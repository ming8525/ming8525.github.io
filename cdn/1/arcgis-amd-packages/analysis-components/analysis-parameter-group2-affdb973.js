define(["exports","./index-ef555910","./index2-588b02d9","./primitiveFactory-d8ce40e4","./utils-793221d4","./analysis-attribute-expression2-a90d2a8c","./analysis-boolean-input2-096997f6","./analysis-chip-group2-097fb4b1","./analysis-data-file-input2-34f8bb3a","./analysis-dataset-input2-9534a23f","./analysis-dataset-input-popover2-b6dcb32a","./analysis-date-input2-1f634ecb","./analysis-expression-group2-ce4cdcfd","./analysis-field-input2-e1115e33","./analysis-field-select2-eb77dd22","./analysis-folder-input2-5bb22688","./analysis-geoenrichment-databrowser2-6a737015","./analysis-geoenrichment-input2-4eb9195c","./analysis-item-browser2-508c9cf3","./analysis-item-input2-3709ada5","./analysis-label2-f17c360a","./analysis-layer-input2-f52c4db0","./analysis-layer-input-popover2-13f7974d","./analysis-linear-unit-input2-62802ce9","./analysis-multiple-input2-31e7ea23","./analysis-number-input2-ee81e720","./analysis-query-builder2-59ad1897","./analysis-query-entry2-a97f8d18","./analysis-query-input2-4bacfecd","./analysis-query-modal2-5e925cce","./analysis-query-target-select2-1308b9a9","./analysis-spatial-expression2-5e7137a9","./analysis-spatial-reference-input2-68aa634b","./analysis-spatial-reference-selector2-197bdd55","./analysis-string-input2-61f7c630","./analysis-summary-fields2-732adae8","./analysis-summary-fields-popover2-3708aecb","./analysis-traffic-time-input2-944df8cc","./analysis-tree2-21de4d9f","./analysis-unsupported-input2-606583a1","./analysis-workflow-select2-60915450","./analysis-workflow-select-popover2-a6a5c39c"],(function(exports,index,index2,primitiveFactory,utils,analysisAttributeExpression2,analysisBooleanInput2,analysisChipGroup2,analysisDataFileInput2,analysisDatasetInput2,analysisDatasetInputPopover2,analysisDateInput2,analysisExpressionGroup2,analysisFieldInput2,analysisFieldSelect2,analysisFolderInput2,analysisGeoenrichmentDatabrowser2,analysisGeoenrichmentInput2,analysisItemBrowser2,analysisItemInput2,analysisLabel2,analysisLayerInput2,analysisLayerInputPopover2,analysisLinearUnitInput2,analysisMultipleInput2,analysisNumberInput2,analysisQueryBuilder2,analysisQueryEntry2,analysisQueryInput2,analysisQueryModal2,analysisQueryTargetSelect2,analysisSpatialExpression2,analysisSpatialReferenceInput2,analysisSpatialReferenceSelector2,analysisStringInput2,analysisSummaryFields2,analysisSummaryFieldsPopover2,analysisTrafficTimeInput2,analysisTree2,analysisUnsupportedInput2,analysisWorkflowSelect2,analysisWorkflowSelectPopover2){"use strict";const iconMapping={[primitiveFactory.AnalysisToolParamDataType.GPString]:{icon:"string"},[primitiveFactory.AnalysisToolParamDataType.GPMultiValueString]:{icon:"string"},[primitiveFactory.AnalysisToolParamDataType.GPBoolean]:{icon:"boolean"},[primitiveFactory.AnalysisToolParamDataType.GPMultiValueBoolean]:{icon:"boolean"},[primitiveFactory.AnalysisToolParamDataType.GPDouble]:{icon:"number"},[primitiveFactory.AnalysisToolParamDataType.GPMultiValueDouble]:{icon:"number"},[primitiveFactory.AnalysisToolParamDataType.GPLong]:{icon:"number"},[primitiveFactory.AnalysisToolParamDataType.GPMultiValueLong]:{icon:"number"},[primitiveFactory.AnalysisToolParamDataType.GPDate]:{icon:"calendar"},[primitiveFactory.AnalysisToolParamDataType.GPMultiValueDate]:{icon:"calendar"},[primitiveFactory.AnalysisToolParamDataType.GPLinearUnit]:{icon:"line-straight"},[primitiveFactory.AnalysisToolParamDataType.GPMultiValueLinearUnit]:{icon:"line-straight"},[primitiveFactory.AnalysisToolParamDataType.GPFeatureRecordSetLayer]:{icon:"feature-layer"},[primitiveFactory.AnalysisToolParamDataType.GPMultiValueFeatureRecordSetLayer]:{icon:"feature-layer"},[primitiveFactory.AnalysisToolParamDataType.GPRecordSet]:{icon:"table"},[primitiveFactory.AnalysisToolParamDataType.GPMultiValueRecordSet]:{icon:"tables"},[primitiveFactory.AnalysisToolParamDataType.GPRasterDataLayer]:{icon:"image-layer"},[primitiveFactory.AnalysisToolParamDataType.GPMultiValueRasterDataLayer]:{icon:"image-layer"},[primitiveFactory.AnalysisToolParamDataType.GPDataFile]:{icon:"data"},[primitiveFactory.AnalysisToolParamDataType.GPMultiValueDataFile]:{icon:"data"},[primitiveFactory.AnalysisToolParamDataType.GPField]:{icon:"brackets-curly"},[primitiveFactory.AnalysisToolParamDataType.GPMultiValueField]:{icon:"brackets-curly"},[primitiveFactory.AnalysisToolParamDataType.GPValueTable]:{icon:"brackets-curly"},[primitiveFactory.AnalysisToolParamDataType.GPMultiValueValueTable]:{icon:"brackets-curly"},[primitiveFactory.AnalysisToolParamDataType.GPComposite]:{icon:"brackets-curly"},[primitiveFactory.AnalysisToolParamDataType.GPMultiValueComposite]:{icon:"brackets-curly"}};const LayerIdState={NeverSet:"NEVER_SET",NoLayer:"NO_LAYER"};const analysisParameterGroupCss=":root{--analysis-quarter-spacing:0.25rem;--analysis-half-spacing:0.5rem;--analysis-three-quarter-spacing:0.75rem;--analysis-full-spacing:1rem;--analysis-component-default-width:100%;--analysis-ui-border-input:#d4d4d4;--analysis-label-font-size:var(--calcite-font-size--2);--analysis-popover-content-min-height-s:7.5rem;--analysis-popover-content-min-height-m:8.75rem;--analysis-popover-content-max-height:60vh;--analysis-popover-content-height:45vh}:host{--calcite-color-border-input:var(--analysis-ui-border-input);margin-bottom:var(--analysis-half-spacing)}";const AnalysisParameterGroup=index.proxyCustomElement(class AnalysisParameterGroup extends index.H{constructor(){super();this.__registerHost();this.__attachShadow();this.analysisParameterGroupInputChange=index.createEvent(this,"analysisParameterGroupInputChange",7);this.analysisHelpClick=index.createEvent(this,"analysisHelpClick",7);this.selectionOptionChange=()=>{const select=this.pickerElement;this.dataType=select.selectedOption.value};this.selectedChipsChange=()=>{const[selectedChip]=this.pickerElement.selectedChips;this.dataType=selectedChip??this.dataType;if(selectedChip===undefined)this.pickerElement.selectedChips=[this.dataType]};this.parameterValueChanged=()=>{const componentValue=this.mappedElement?.value;this.updateValue(componentValue,this.value)};this.setAnalysisRef=ref=>{if(ref!==null&&ref!==undefined){this.mappedElement=ref}};this.groupLabel=undefined;this.value=undefined;this.dataType=undefined;this.required=undefined;this.visibleTypes=[];this.UIparameterInfos=undefined;this.pickerElement=undefined;this.mappedElement=undefined;this.UIparameterMap=new Map;this.data=new Map;this.layerIdMap=new Map}onDataTypeChange(newDataType,oldDataType){if(newDataType!==oldDataType){this.updateValue(this.currentDataMapValue,this.value)}}onVisibleTypesChange(newVisibleTypes){this.visibleTypes=newVisibleTypes??[]}onUIparameterInfosChange(newUIparameterInfos){this.updateWithUIParameterInfos(newUIparameterInfos)}async componentWillLoad(){({strings:this.strings,dir:this.dir}=await index2.fetchComponentLocaleStrings(this.hostElement,index.getAssetPath(`.`)));this.updateWithUIParameterInfos(this.UIparameterInfos)}async checkValidity(){return Promise.resolve(this.validate())}async validate(){let isValid;if(this.mappedElement!==undefined&&"checkValidity"in this.mappedElement){isValid=await this.mappedElement.checkValidity()}else{isValid=this.required===true&&this.value===undefined?false:true}return isValid}saveValue(dataType,value){const previousValue=dataType!==undefined?this.data.get(dataType):undefined;if(dataType!==undefined&&value!==previousValue){this.data.set(dataType,value)}}updateValue(newValue,oldValue){if(newValue!==oldValue){this.value=newValue;this.saveValue(this.currentDataType,this.value);this.analysisParameterGroupInputChange.emit({data:newValue})}}getNewLayerIdState(layerId,previousLayerIdState){const emptyLayerState=previousLayerIdState===LayerIdState.NeverSet?LayerIdState.NeverSet:LayerIdState.NoLayer;const newLayerIdState=layerId!==undefined?layerId:emptyLayerState;return newLayerIdState}updateLayerIdMap(dataType,mapLayer){const previousMapLayerId=this.layerIdMap.get(dataType)??LayerIdState.NeverSet;const mapLayerId=mapLayer?.id;const newMapLayerId=this.getNewLayerIdState(mapLayerId,previousMapLayerId);this.layerIdMap.set(dataType,newMapLayerId);if(newMapLayerId!==previousMapLayerId&&previousMapLayerId!==LayerIdState.NeverSet){this.saveValue(dataType,undefined)}}updateUIParameterMap(inputComponentParameters){const{dataType,...UIParams}=inputComponentParameters;this.UIparameterMap.set(dataType,UIParams)}updateDataMap(inputComponentParameters){const{dataType,value,defaultValue,mapLayer}=inputComponentParameters;if(dataType!==undefined){this.updateLayerIdMap(dataType,mapLayer)}const dataTypeValue=value??this.data.get(dataType)??defaultValue;this.saveValue(dataType,dataTypeValue)}updateWithUIParameterInfos(UIparameterInfos){this.saveValue(this.dataType,this.value);this.UIparameterMap.clear();const parameterInfos=UIparameterInfos??[];for(const inputComponentParameters of parameterInfos){this.updateUIParameterMap(inputComponentParameters);this.updateDataMap(inputComponentParameters)}this.updateValue(this.currentDataMapValue,this.value)}get types(){return[...this.UIparameterMap.keys()].filter((type=>this.visibleTypes.length===0||this.visibleTypes.includes(type)))}get currentDataType(){if(this.dataType===undefined||this.types.includes(this.dataType)===false){this.dataType=this.types[0]}return this.dataType}get currentDataMapValue(){return this.data.get(this.currentDataType)}getChipGroupData(){return this.types.reduce(((accumulator,dataType)=>{const UIparam=this.UIparameterMap.get(dataType);const{icon}=iconMapping[dataType];const chipLabel=UIparam?.parameterGroupDataTypeLabel??this.strings[dataType]??dataType;accumulator.labels.push(chipLabel);accumulator.icons.push(icon);return accumulator}),{labels:[],icons:[]})}renderChipGroup(){const dataTypeValues=this.types;const chipGroupData=this.getChipGroupData();return index.h("analysis-chip-group",{ref:el=>{this.pickerElement=el},selectionMode:"single",value:dataTypeValues,chipLabel:chipGroupData.labels,selectedChips:[this.currentDataType],iconLabel:chipGroupData.icons,label:this.groupLabel,required:true,onAnalysisChipGroupSelectionChange:this.selectedChipsChange})}renderSelect(){return index.h("calcite-select",{ref:el=>{this.pickerElement=el},label:this.strings.gpSelection,onCalciteSelectChange:this.selectionOptionChange,scale:utils.UIDefaults.Scale},index.h("calcite-option-group",{label:this.strings.gpTypes},this.types.map((gpType=>index.h("calcite-option",{key:gpType,value:gpType},this.strings[gpType]??gpType)))))}renderDefaultComponent(){const dataType=this.currentDataType;const componentValue=this.currentDataMapValue;const componentUIparams=this.UIparameterMap.get(this.currentDataType)??{};return index.h(primitiveFactory.AnalysisPrimitiveParameter,{dataType,...componentUIparams,value:componentValue,required:this.required,onSetRef:this.setAnalysisRef,onValueChange:this.parameterValueChanged})}render(){return index.h(index.Host,{dir:this.dir},index.h("analysis-label",{label:this.groupLabel,onAnalysisLabelHelpActionClick:()=>this.analysisHelpClick.emit()}),this.types.length<=2?this.renderChipGroup():this.renderSelect(),this.renderDefaultComponent())}static get assetsDirs(){return["t9n"]}get hostElement(){return this}static get watchers(){return{dataType:["onDataTypeChange"],visibleTypes:["onVisibleTypesChange"],UIparameterInfos:["onUIparameterInfosChange"]}}static get style(){return analysisParameterGroupCss}},[1,"analysis-parameter-group",{groupLabel:[513,"group-label"],value:[1032],dataType:[1537,"data-type"],required:[516],visibleTypes:[16],UIparameterInfos:[16],pickerElement:[32],mappedElement:[32],UIparameterMap:[32],data:[32],layerIdMap:[32],checkValidity:[64]},undefined,{dataType:["onDataTypeChange"],visibleTypes:["onVisibleTypesChange"],UIparameterInfos:["onUIparameterInfosChange"]}]);function defineCustomElement(){if(typeof customElements==="undefined"){return}const components=["analysis-parameter-group","analysis-attribute-expression","analysis-boolean-input","analysis-chip-group","analysis-data-file-input","analysis-dataset-input","analysis-dataset-input-popover","analysis-date-input","analysis-expression-group","analysis-field-input","analysis-field-select","analysis-folder-input","analysis-geoenrichment-databrowser","analysis-geoenrichment-input","analysis-item-browser","analysis-item-input","analysis-label","analysis-layer-input","analysis-layer-input-popover","analysis-linear-unit-input","analysis-multiple-input","analysis-number-input","analysis-query-builder","analysis-query-entry","analysis-query-input","analysis-query-modal","analysis-query-target-select","analysis-spatial-expression","analysis-spatial-reference-input","analysis-spatial-reference-selector","analysis-string-input","analysis-summary-fields","analysis-summary-fields-popover","analysis-traffic-time-input","analysis-tree","analysis-unsupported-input","analysis-workflow-select","analysis-workflow-select-popover"];components.forEach((tagName=>{switch(tagName){case"analysis-parameter-group":if(!customElements.get(tagName)){customElements.define(tagName,AnalysisParameterGroup)}break;case"analysis-attribute-expression":if(!customElements.get(tagName)){analysisAttributeExpression2.defineCustomElement()}break;case"analysis-boolean-input":if(!customElements.get(tagName)){analysisBooleanInput2.defineCustomElement()}break;case"analysis-chip-group":if(!customElements.get(tagName)){analysisChipGroup2.defineCustomElement()}break;case"analysis-data-file-input":if(!customElements.get(tagName)){analysisDataFileInput2.defineCustomElement()}break;case"analysis-dataset-input":if(!customElements.get(tagName)){analysisDatasetInput2.defineCustomElement()}break;case"analysis-dataset-input-popover":if(!customElements.get(tagName)){analysisDatasetInputPopover2.defineCustomElement()}break;case"analysis-date-input":if(!customElements.get(tagName)){analysisDateInput2.defineCustomElement()}break;case"analysis-expression-group":if(!customElements.get(tagName)){analysisExpressionGroup2.defineCustomElement()}break;case"analysis-field-input":if(!customElements.get(tagName)){analysisFieldInput2.defineCustomElement()}break;case"analysis-field-select":if(!customElements.get(tagName)){analysisFieldSelect2.defineCustomElement()}break;case"analysis-folder-input":if(!customElements.get(tagName)){analysisFolderInput2.defineCustomElement()}break;case"analysis-geoenrichment-databrowser":if(!customElements.get(tagName)){analysisGeoenrichmentDatabrowser2.defineCustomElement()}break;case"analysis-geoenrichment-input":if(!customElements.get(tagName)){analysisGeoenrichmentInput2.defineCustomElement()}break;case"analysis-item-browser":if(!customElements.get(tagName)){analysisItemBrowser2.defineCustomElement()}break;case"analysis-item-input":if(!customElements.get(tagName)){analysisItemInput2.defineCustomElement()}break;case"analysis-label":if(!customElements.get(tagName)){analysisLabel2.defineCustomElement()}break;case"analysis-layer-input":if(!customElements.get(tagName)){analysisLayerInput2.defineCustomElement()}break;case"analysis-layer-input-popover":if(!customElements.get(tagName)){analysisLayerInputPopover2.defineCustomElement()}break;case"analysis-linear-unit-input":if(!customElements.get(tagName)){analysisLinearUnitInput2.defineCustomElement()}break;case"analysis-multiple-input":if(!customElements.get(tagName)){analysisMultipleInput2.defineCustomElement()}break;case"analysis-number-input":if(!customElements.get(tagName)){analysisNumberInput2.defineCustomElement()}break;case"analysis-query-builder":if(!customElements.get(tagName)){analysisQueryBuilder2.defineCustomElement()}break;case"analysis-query-entry":if(!customElements.get(tagName)){analysisQueryEntry2.defineCustomElement()}break;case"analysis-query-input":if(!customElements.get(tagName)){analysisQueryInput2.defineCustomElement()}break;case"analysis-query-modal":if(!customElements.get(tagName)){analysisQueryModal2.defineCustomElement()}break;case"analysis-query-target-select":if(!customElements.get(tagName)){analysisQueryTargetSelect2.defineCustomElement()}break;case"analysis-spatial-expression":if(!customElements.get(tagName)){analysisSpatialExpression2.defineCustomElement()}break;case"analysis-spatial-reference-input":if(!customElements.get(tagName)){analysisSpatialReferenceInput2.defineCustomElement()}break;case"analysis-spatial-reference-selector":if(!customElements.get(tagName)){analysisSpatialReferenceSelector2.defineCustomElement()}break;case"analysis-string-input":if(!customElements.get(tagName)){analysisStringInput2.defineCustomElement()}break;case"analysis-summary-fields":if(!customElements.get(tagName)){analysisSummaryFields2.defineCustomElement()}break;case"analysis-summary-fields-popover":if(!customElements.get(tagName)){analysisSummaryFieldsPopover2.defineCustomElement()}break;case"analysis-traffic-time-input":if(!customElements.get(tagName)){analysisTrafficTimeInput2.defineCustomElement()}break;case"analysis-tree":if(!customElements.get(tagName)){analysisTree2.defineCustomElement()}break;case"analysis-unsupported-input":if(!customElements.get(tagName)){analysisUnsupportedInput2.defineCustomElement()}break;case"analysis-workflow-select":if(!customElements.get(tagName)){analysisWorkflowSelect2.defineCustomElement()}break;case"analysis-workflow-select-popover":if(!customElements.get(tagName)){analysisWorkflowSelectPopover2.defineCustomElement()}break}}))}defineCustomElement();exports.AnalysisParameterGroup=AnalysisParameterGroup;exports.defineCustomElement=defineCustomElement}));
