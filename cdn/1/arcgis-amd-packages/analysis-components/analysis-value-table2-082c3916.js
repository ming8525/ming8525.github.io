define(["exports","./index-ef555910","./index2-588b02d9","./set-91d835d2","./primitiveFactory-d8ce40e4","./utils-793221d4","./analysis-attribute-expression2-a90d2a8c","./analysis-boolean-input2-096997f6","./analysis-chip-group2-097fb4b1","./analysis-data-file-input2-34f8bb3a","./analysis-dataset-input2-9534a23f","./analysis-dataset-input-popover2-b6dcb32a","./analysis-date-input2-1f634ecb","./analysis-expression-group2-ce4cdcfd","./analysis-field-input2-e1115e33","./analysis-field-select2-eb77dd22","./analysis-folder-input2-5bb22688","./analysis-geoenrichment-databrowser2-6a737015","./analysis-geoenrichment-input2-4eb9195c","./analysis-item-browser2-508c9cf3","./analysis-item-input2-3709ada5","./analysis-label2-f17c360a","./analysis-layer-input2-f52c4db0","./analysis-layer-input-popover2-13f7974d","./analysis-linear-unit-input2-62802ce9","./analysis-multiple-input2-31e7ea23","./analysis-number-input2-ee81e720","./analysis-query-builder2-59ad1897","./analysis-query-entry2-a97f8d18","./analysis-query-input2-4bacfecd","./analysis-query-modal2-5e925cce","./analysis-query-target-select2-1308b9a9","./analysis-spatial-expression2-5e7137a9","./analysis-spatial-reference-input2-68aa634b","./analysis-spatial-reference-selector2-197bdd55","./analysis-string-input2-61f7c630","./analysis-summary-fields2-732adae8","./analysis-summary-fields-popover2-3708aecb","./analysis-traffic-time-input2-944df8cc","./analysis-tree2-21de4d9f","./analysis-unsupported-input2-606583a1","./analysis-workflow-select2-60915450","./analysis-workflow-select-popover2-a6a5c39c"],(function(exports,index,index2,set,primitiveFactory,utils,analysisAttributeExpression2,analysisBooleanInput2,analysisChipGroup2,analysisDataFileInput2,analysisDatasetInput2,analysisDatasetInputPopover2,analysisDateInput2,analysisExpressionGroup2,analysisFieldInput2,analysisFieldSelect2,analysisFolderInput2,analysisGeoenrichmentDatabrowser2,analysisGeoenrichmentInput2,analysisItemBrowser2,analysisItemInput2,analysisLabel2,analysisLayerInput2,analysisLayerInputPopover2,analysisLinearUnitInput2,analysisMultipleInput2,analysisNumberInput2,analysisQueryBuilder2,analysisQueryEntry2,analysisQueryInput2,analysisQueryModal2,analysisQueryTargetSelect2,analysisSpatialExpression2,analysisSpatialReferenceInput2,analysisSpatialReferenceSelector2,analysisStringInput2,analysisSummaryFields2,analysisSummaryFieldsPopover2,analysisTrafficTimeInput2,analysisTree2,analysisUnsupportedInput2,analysisWorkflowSelect2,analysisWorkflowSelectPopover2){"use strict";const AnalysisToolParamParameterType={Required:"esriGPParameterTypeRequired",Optional:"esriGPParameterTypeOptional"};function splitDestinationPath(path){const firstPeriodIndex=path.indexOf(".");let paramName=path;let propertyPath="";if(firstPeriodIndex>0){paramName=path.substring(0,firstPeriodIndex);propertyPath=path.substring(firstPeriodIndex+1)}return[paramName,propertyPath]}function joinParams(uiParams,params){return uiParams.filter((uiParam=>uiParam.direction!=="esriGPParameterDirectionOutput"))?.map((uiParam=>{const matchingParam=params.find((param=>param.name===uiParam.name));return{...matchingParam,...uiParam}}))}function getRulesByDestination(rules){const rulesByDestination=new Map;for(const rule of rules){const destinations=Array.isArray(rule.destination)?rule.destination:[rule.destination];for(const destination of destinations){const[paramName]=splitDestinationPath(destination);if(rulesByDestination.has(paramName)){rulesByDestination.get(paramName).push(rule)}else{rulesByDestination.set(paramName,[rule])}}}return rulesByDestination}function applyEffectParams(param,effectParams,parsedDestinations){let updatedParam={...param};for(const path of parsedDestinations){for(const[property,value]of Object.entries(effectParams)){const fullPath=path===""?property:`${path}.${property}`;if(fullPath.includes("UIparameterInfos")){updatedParam=index2.setImmutableValue(updatedParam,fullPath,value)}else{set.set(updatedParam,fullPath,value)}}}return updatedParam}function applyRules(params){const{param,data,rules,renderedParameters,currentTool}=params;const paramName=param.name;if(paramName===undefined){return[param,data]}let adaptedParam={...param};for(const rule of rules){const effectParams=index2.processRule({rule,data,renderedParams:renderedParameters??{},currentTool});if(effectParams===undefined){continue}const destinations=Array.isArray(rule.destination)?rule.destination:[rule.destination];const parsedDestinations=destinations.map(splitDestinationPath).filter((([destinationName])=>destinationName===paramName));if("value"in effectParams){data[paramName]=effectParams.value}adaptedParam=applyEffectParams(adaptedParam,effectParams,parsedDestinations.map((([,path])=>path)));adaptedParam.value=data[paramName]}return[adaptedParam,data]}function getTravelModeUnitsType(travelMode){let units;if(travelMode.impedanceAttributeName===travelMode.timeAttributeName){units="time"}else if(travelMode.impedanceAttributeName===travelMode.distanceAttributeName){units="distance"}return units}function getTravelModeIcon(travelMode,units){let icon;switch(travelMode.type.toLowerCase()){case"automobile":const driveIcons={time:"driving-time",distance:"driving-distance",other:"car"};icon=driveIcons[units??"other"]??driveIcons.other;break;case"walk":const walkIcons={time:"walking-time",distance:"walking-distance",other:"walk"};icon=walkIcons[units??"other"]??walkIcons.other;break;case"truck":const truckIcons={time:"trucking-time",distance:"trucking-distance",other:"dashboard"};icon=truckIcons[units??"other "]??truckIcons.other;break;default:const otherIcons={time:"edit-attributes",distance:"edit-attributes",other:"dashboard"};icon=otherIcons[units??"other "]??otherIcons.other;break}return icon}function adaptForTravelModes(props){const{param,data,travelModeInfo,straightLineLabel}=props;const paramName=param.name;if(paramName===undefined){return[param,data]}const paramValue=data[paramName];const defaultValue="defaultValue"in param?param.defaultValue:undefined;const choiceList=[];const choiceListLabels={};const choiceListIcons={};let defaultTravelMode=undefined;if(travelModeInfo!==undefined){const travelModes=travelModeInfo?.travelModes?.filter((travelMode=>param.filterTravelModeType!==undefined?getTravelModeUnitsType(travelMode)===param.filterTravelModeType:true));defaultTravelMode=travelModeInfo?.defaultTravelMode??undefined;if(param.filterTravelModeType!==undefined&&getTravelModeUnitsType(defaultTravelMode)!==param.filterTravelModeType){defaultTravelMode=travelModes?.[0]??undefined}if(index2.isEmptyDataItem(paramValue)||paramValue===defaultValue&&paramValue!==index2.StraightLineParameterValue){data[paramName]=defaultTravelMode}travelModes?.forEach((travelMode=>{const units=getTravelModeUnitsType(travelMode);choiceList.push(travelMode.id);choiceListLabels[travelMode.id]=travelMode.name;choiceListIcons[travelMode.id]=getTravelModeIcon(travelMode,units)}))}if((defaultValue===index2.StraightLineParameterValue||param.includeStraightLine===true)&&choiceList.includes(index2.StraightLineParameterValue)===false){choiceList.push(index2.StraightLineParameterValue);choiceListLabels[index2.StraightLineParameterValue]=straightLineLabel??index2.StraightLineParameterValue;choiceListIcons[index2.StraightLineParameterValue]="line-straight"}let adaptedParamValue=defaultValue===index2.StraightLineParameterValue?index2.StraightLineParameterValue:defaultTravelMode?.id??"";if(!index2.isEmptyDataItem(paramValue)){adaptedParamValue=paramValue===index2.StraightLineParameterValue?index2.StraightLineParameterValue:paramValue?.id??""}const adaptedParam={...param,...{choiceListLabels,choiceList,choiceListIcons,value:adaptedParamValue}};return[adaptedParam,data]}function applyVisibilityRules(props){const{param,data,renderedParameters}=props;const paramName=param.name;if(paramName===undefined){return[param,data]}const renderedParam=renderedParameters?.[paramName];const becameVisible=renderedParam===undefined&&param.visible===true;const becameNonVisible=renderedParam!==undefined&&param.visible===false;if(becameVisible){data[paramName]??(data[paramName]=param.defaultValue);param.value=data[paramName]}else if(becameNonVisible){data[paramName]=undefined;param.value=data[paramName]}return[param,data]}function getDefaultValueRulesUsingUserSettings(rules){const usesUserSettings=rule=>{switch(rule.ruleType){case"expression":return rule.expression?.includes("userSettings");case"equals":return rule.valueA?.toString().includes("userSettings")===true||rule.valueB?.toString().includes("userSettings")===true;default:return false}};const usesDefaultValue=rule=>"effectParams"in rule&&"defaultValue"in rule.effectParams;const rulesUsingUserSettings=rules?.filter((rule=>usesUserSettings(rule)&&usesDefaultValue(rule)));return rulesUsingUserSettings??[]}const isParamVisible=param=>param.visible===undefined||param.visible===true;function applyUserSettings(args){const{defaultValues,user,hasAdvancedLicense}=args;defaultValues.userSettings={unitSystem:user?.units,hasNAPrivilege:index2.hasNAPrivilege(user),hasGEPrivilege:index2.hasGeoEnrichmentPrivilege(user),hasAdvancedLicense};return defaultValues}function applyToolUIJsonParameterDefaults(args){let{defaultValues}=args;const{toolName,toolUIJsonParametersByName,travelModeInfo}=args;Object.keys(toolUIJsonParametersByName??{}).forEach((key=>{const param=toolUIJsonParametersByName?.[key];if(param?.name!==undefined&&isParamVisible(param)===true){if(travelModeInfo!==undefined&&toolName!==undefined&&index2.isTravelModeParameter(param.name,toolName)===true){defaultValues[param.name]=param.defaultValue;[,defaultValues]=adaptForTravelModes({param,data:defaultValues,travelModeInfo})}else{defaultValues[param.name]=param.defaultValue}}else if(param?.name!==undefined&&param.visible===false){defaultValues[param.name]=undefined}}));return defaultValues}function applyToolParameterDefaults(args){const{defaultValues,toolJsonParameters,toolUIJsonParametersByName}=args;toolJsonParameters?.forEach((param=>{const matchingUIParam=toolUIJsonParametersByName?.[param.name];if(param.direction!=="esriGPParameterDirectionOutput"&&defaultValues[param.name]===undefined&&(matchingUIParam?.visible===undefined||matchingUIParam?.visible===true)){defaultValues[param.name]=param.defaultValue}}));return defaultValues}function applyUserSettingsRules(args){const{defaultValues,toolUIJsonParametersByName,rules}=args;const rulesUsingUserSettings=getDefaultValueRulesUsingUserSettings(rules);const userSettingsRulesByDestination=getRulesByDestination(rulesUsingUserSettings);Object.keys(toolUIJsonParametersByName??{}).forEach((key=>{const param=toolUIJsonParametersByName?.[key];if(param?.name!==undefined&&isParamVisible(param)===true){const rulesToApply=userSettingsRulesByDestination.get(key);if(rulesToApply!==undefined){const[modifiedParam]=applyRules({param,data:defaultValues,rules:rulesToApply,renderedParameters:{}});defaultValues[param.name]=modifiedParam.defaultValue}}}));return defaultValues}const component="value-table";const HTMLClasses={groupContainer:`${component}__group-container`,groupAction:`${component}__group-action`,groupAction1:`${component}__group-action-1`,label:`${component}__label`,groupHorizontal:`${component}__horizontal-layout`,groupHorizontalRtl:`${component}__horizontal-layout-rtl`};const analysisValueTableCss=":root{--analysis-quarter-spacing:0.25rem;--analysis-half-spacing:0.5rem;--analysis-three-quarter-spacing:0.75rem;--analysis-full-spacing:1rem;--analysis-component-default-width:100%;--analysis-ui-border-input:#d4d4d4;--analysis-label-font-size:var(--calcite-font-size--2);--analysis-popover-content-min-height-s:7.5rem;--analysis-popover-content-min-height-m:8.75rem;--analysis-popover-content-max-height:60vh;--analysis-popover-content-height:45vh}:host{display:block;margin-bottom:var(--analysis-half-spacing)}.value-table__group-container{display:flex;flex-direction:column;border:1px var(--calcite-color-border-1) solid;border-radius:var(--calcite-border-radius);padding:var(--analysis-half-spacing) var(--analysis-half-spacing) 0 var(--analysis-half-spacing);margin-bottom:var(--analysis-half-spacing)}.value-table__group-action{align-self:flex-end}.value-table__group-action-1{align-self:flex-start}.value-table__label{margin:var(--analysis-half-spacing) 0}.value-table__horizontal-layout{display:flex;border:1px var(--calcite-color-border-1) solid;width:calc(100% - var(--analysis-half-spacing) - 1px);margin-top:-1px;padding-top:var(--analysis-half-spacing);padding-left:var(--analysis-half-spacing)}.value-table__horizontal-layout-rtl{padding-left:unset;padding-right:var(--analysis-half-spacing)}";const ValueTableEntry=({direction,entryIndex,values,parameterInfos,valueWithoutKey,removeLabel,onEntryDeleted,onValueChange,onSetRef,props})=>{const firstParameterInfo=parameterInfos[0];const label=firstParameterInfo?.label;return valueWithoutKey?index.h("div",{class:`${HTMLClasses.groupHorizontal} ${direction==="rtl"?HTMLClasses.groupHorizontal:""}`,key:entryIndex},Boolean(label)&&index.h("analysis-label",{label,hideHelp:true,required:firstParameterInfo.required===true||firstParameterInfo.parameterType===AnalysisToolParamParameterType.Required}),index.h(primitiveFactory.AnalysisPrimitiveParameter,{...firstParameterInfo,label:"",onValueChange:event=>onValueChange(entryIndex,parameterInfos[0].name,event),onSetRef:ref=>onSetRef(entryIndex,parameterInfos[0].name,ref),value:values[parameterInfos[0].name]}),index.h("calcite-button",{kind:"neutral","icon-start":"x",appearance:"transparent",scale:"s",class:HTMLClasses.groupAction1,onClick:()=>onEntryDeleted(entryIndex),label:removeLabel})):index.h("div",{class:HTMLClasses.groupContainer,key:entryIndex},index.h("calcite-button",{"icon-end":"trash",appearance:"transparent",kind:"neutral",scale:"s",class:HTMLClasses.groupAction,onClick:()=>onEntryDeleted(entryIndex),label:removeLabel}),parameterInfos.filter((parameterInfo=>!("visible"in parameterInfo&&parameterInfo.visible===false))).map((parameterInfo=>{const required="required"in parameterInfo&&parameterInfo.required===true||parameterInfo.parameterType===AnalysisToolParamParameterType.Required;return index.h("calcite-label",{scale:utils.UIDefaults.Scale},index.h("analysis-label",{required,label:parameterInfo.label??parameterInfo.displayName,hideHelp:true}),index.h(primitiveFactory.AnalysisPrimitiveParameter,{...parameterInfo,...props,label:"",onValueChange:event=>onValueChange(entryIndex,parameterInfo.name,event),onSetRef:ref=>onSetRef(entryIndex,parameterInfo.name,ref),value:values?.[parameterInfo.name]}))})))};function isNamedParam(param){return param.name!==undefined}const AnalysisValueTable=index.proxyCustomElement(class AnalysisValueTable extends index.H{constructor(){super();this.__registerHost();this.__attachShadow();this.analysisValueTableChange=index.createEvent(this,"analysisValueTableChange",7);this.analysisHelpClick=index.createEvent(this,"analysisHelpClick",7);this.direction="ltr";this.entryInputElements=new Map;this.onAddButtonClick=()=>{this.value=this.valueWithoutKey?[...this.value,undefined]:[...this.value,this.getDefaultEntry()];this.analysisValueTableChange.emit()};this.onEntryDeleted=entryIndex=>{this.value.splice(entryIndex,1);this.removeAndUpdateEntryInputElements(entryIndex);this.value=[...this.value];this.analysisValueTableChange.emit()};this.onValueChange=(entryIndex,paramName,event)=>{const value=event.target.value;if(this.valueWithoutKey){this.value[entryIndex]=value}else{this.value[entryIndex][paramName]=value}const[,processedValue]=this.applyRulesToEntry(entryIndex);this.value[entryIndex]=processedValue;this.analysisValueTableChange.emit()};this.onSetRef=(entryIndex,paramName,ref)=>{const entryInputs=this.entryInputElements.get(entryIndex);if(ref){if(this.valueWithoutKey){this.entryInputElements.set(entryIndex,ref)}else{const newEntryAtKey={[paramName]:ref};this.entryInputElements.set(entryIndex,{...entryInputs??{},...newEntryAtKey})}}else{if(this.valueWithoutKey){this.entryInputElements.delete(entryIndex);this.value.splice(entryIndex,1)}else{delete entryInputs?.[paramName];const entry=this.value[entryIndex];if(entry){delete entry[paramName]}}}};this.validateSelection=async()=>{let isValid=true;this.errorMessage=undefined;if(this.value.length<1){isValid=this.required!==true;this.errorMessage=isValid?undefined:this.strings.requiredMessage}else{const allPromises=Array.from(this.entryInputElements.keys()).map((index=>{let entryPromises=[];const entryElement=this.entryInputElements.get(index);if(this.valueWithoutKey){const entry=entryElement;if(index2.isEmptyDataItem(entry)===false&&"checkValidity"in entry&&typeof entry.checkValidity==="function"){entryPromises.push(entry.checkValidity())}else entryPromises.push(Promise.resolve(true))}else{const entry=entryElement;entryPromises=Object.keys(entry).map((parameterName=>{const inputElement=entry[parameterName];return inputElement!==undefined&&"checkValidity"in inputElement&&typeof inputElement.checkValidity==="function"?inputElement.checkValidity():Promise.resolve(true)}))}return entryPromises}));const allValidations=await Promise.all(allPromises.flat());isValid=allValidations!==undefined&&allValidations.find((entry=>entry===false))===undefined}return isValid&&this.errorMessage===undefined};this.getDefaultEntry=()=>{const entries=this.combinedParameterInfos.filter((param=>param.defaultValue!==undefined)).map((param=>[param.name,param.defaultValue]));return Object.fromEntries(entries)};this.required=false;this.value=[];this.label=undefined;this.parameterInfos=undefined;this.UIparameterInfos=undefined;this.UIparameterInfosRules=undefined;this.valueWithoutKey=false;this.user=undefined;this.portal=undefined;this.mapLayers=undefined;this.mapView=undefined;this.errorMessage=undefined}async checkValidity(){return Promise.resolve(this.validateSelection())}get combinedParameterInfos(){let combinedParameterInfos=this.parameterInfos??[];if(this.UIparameterInfos!==undefined){combinedParameterInfos=this.UIparameterInfos.filter(isNamedParam).map((uiParam=>{const matchingParam=this.parameterInfos?.find((param=>param.name===uiParam.name));return{...matchingParam,...uiParam}}))}return combinedParameterInfos}get rulesByDestination(){return getRulesByDestination(this.UIparameterInfosRules??[])}async componentWillLoad(){({strings:this.strings,dir:this.direction}=await index2.fetchComponentLocaleStrings(this.hostElement,index.getAssetPath(`.`)));if(this.value===undefined||this.value.length===0){const defaultEntry=this.valueWithoutKey?undefined:this.getDefaultEntry();this.value=[defaultEntry];if(index2.isEmptyDataItem(defaultEntry)===false){this.analysisValueTableChange.emit()}}}render(){const entryElements=this.value.map(((_,index$1)=>{const[paramInfos,value]=this.applyRulesToEntry(index$1);let valueAsRecord={};if(this.valueWithoutKey){const paramName=paramInfos[0].name;valueAsRecord[paramName]=value}else{valueAsRecord=value}return index.h(ValueTableEntry,{direction:this.direction,entryIndex:index$1,values:valueAsRecord,valueWithoutKey:this.valueWithoutKey,parameterInfos:paramInfos,removeLabel:this.strings.removeEntryButtonLabel,onEntryDeleted:this.onEntryDeleted,onValueChange:this.onValueChange,onSetRef:this.onSetRef,props:{user:this.user,portal:this.portal,mapLayers:this.mapLayers,mapView:this.mapView}})}));return index.h(index.Host,null,index.h("analysis-label",{label:this.label,required:this.valueWithoutKey?this.required:false,onAnalysisLabelHelpActionClick:()=>this.analysisHelpClick.emit()}),entryElements,index.h("calcite-button",{style:this.valueWithoutKey?{marginTop:"var(--analysis-half-spacing)"}:{},appearance:"outline",kind:"neutral","icon-start":"plus",width:"full",scale:utils.UIDefaults.Scale,onClick:this.onAddButtonClick},this.strings.addEntryButtonLabel),index.h("calcite-input-message",{icon:"exclamationMarkTriangle",status:index2.UIInputStatus.INVALID,scale:utils.UIDefaults.Scale,hidden:index2.isEmptyDataItem(this.errorMessage)===true},this.strings.requiredMessage))}removeAndUpdateEntryInputElements(entryIndex){const entryCount=this.entryInputElements.size;if(entryIndex>=0&&entryIndex<entryCount){const updatedEntryInputElements=new Map;for(const[key,input]of this.entryInputElements){const updatedKey=key>entryIndex?key-1:key;if(key!==entryIndex){updatedEntryInputElements.set(updatedKey,input)}}this.entryInputElements=updatedEntryInputElements}}applyRulesToEntry(index){if(this.valueWithoutKey){return[this.combinedParameterInfos,this.value[index]]}const rules=this.rulesByDestination;const value=this.value;const entry=value[index];const inputElements=this.entryInputElements.get(index);let renderedInputs;if(inputElements===undefined){renderedInputs={}}else{renderedInputs=inputElements}const definedRenderedParameters=Object.entries(renderedInputs).reduce(((params,[name,element])=>{if(element!==undefined){params[name]=element}return params}),{});const paramInfos=this.combinedParameterInfos.map((paramInfo=>{let[modifiedParam]=applyRules({param:paramInfo,data:entry,rules:rules.get(paramInfo.name)??[],renderedParameters:definedRenderedParameters});[modifiedParam]=applyVisibilityRules({param:modifiedParam,data:entry,renderedParameters:definedRenderedParameters});return modifiedParam}));return[paramInfos,entry]}static get assetsDirs(){return["t9n"]}get hostElement(){return this}static get style(){return analysisValueTableCss}},[1,"analysis-value-table",{required:[516],value:[1040],label:[513],parameterInfos:[16],UIparameterInfos:[16],UIparameterInfosRules:[16],valueWithoutKey:[516,"value-without-key"],user:[16],portal:[16],mapLayers:[16],mapView:[16],errorMessage:[32],checkValidity:[64]}]);function defineCustomElement(){if(typeof customElements==="undefined"){return}const components=["analysis-value-table","analysis-attribute-expression","analysis-boolean-input","analysis-chip-group","analysis-data-file-input","analysis-dataset-input","analysis-dataset-input-popover","analysis-date-input","analysis-expression-group","analysis-field-input","analysis-field-select","analysis-folder-input","analysis-geoenrichment-databrowser","analysis-geoenrichment-input","analysis-item-browser","analysis-item-input","analysis-label","analysis-layer-input","analysis-layer-input-popover","analysis-linear-unit-input","analysis-multiple-input","analysis-number-input","analysis-query-builder","analysis-query-entry","analysis-query-input","analysis-query-modal","analysis-query-target-select","analysis-spatial-expression","analysis-spatial-reference-input","analysis-spatial-reference-selector","analysis-string-input","analysis-summary-fields","analysis-summary-fields-popover","analysis-traffic-time-input","analysis-tree","analysis-unsupported-input","analysis-workflow-select","analysis-workflow-select-popover"];components.forEach((tagName=>{switch(tagName){case"analysis-value-table":if(!customElements.get(tagName)){customElements.define(tagName,AnalysisValueTable)}break;case"analysis-attribute-expression":if(!customElements.get(tagName)){analysisAttributeExpression2.defineCustomElement()}break;case"analysis-boolean-input":if(!customElements.get(tagName)){analysisBooleanInput2.defineCustomElement()}break;case"analysis-chip-group":if(!customElements.get(tagName)){analysisChipGroup2.defineCustomElement()}break;case"analysis-data-file-input":if(!customElements.get(tagName)){analysisDataFileInput2.defineCustomElement()}break;case"analysis-dataset-input":if(!customElements.get(tagName)){analysisDatasetInput2.defineCustomElement()}break;case"analysis-dataset-input-popover":if(!customElements.get(tagName)){analysisDatasetInputPopover2.defineCustomElement()}break;case"analysis-date-input":if(!customElements.get(tagName)){analysisDateInput2.defineCustomElement()}break;case"analysis-expression-group":if(!customElements.get(tagName)){analysisExpressionGroup2.defineCustomElement()}break;case"analysis-field-input":if(!customElements.get(tagName)){analysisFieldInput2.defineCustomElement()}break;case"analysis-field-select":if(!customElements.get(tagName)){analysisFieldSelect2.defineCustomElement()}break;case"analysis-folder-input":if(!customElements.get(tagName)){analysisFolderInput2.defineCustomElement()}break;case"analysis-geoenrichment-databrowser":if(!customElements.get(tagName)){analysisGeoenrichmentDatabrowser2.defineCustomElement()}break;case"analysis-geoenrichment-input":if(!customElements.get(tagName)){analysisGeoenrichmentInput2.defineCustomElement()}break;case"analysis-item-browser":if(!customElements.get(tagName)){analysisItemBrowser2.defineCustomElement()}break;case"analysis-item-input":if(!customElements.get(tagName)){analysisItemInput2.defineCustomElement()}break;case"analysis-label":if(!customElements.get(tagName)){analysisLabel2.defineCustomElement()}break;case"analysis-layer-input":if(!customElements.get(tagName)){analysisLayerInput2.defineCustomElement()}break;case"analysis-layer-input-popover":if(!customElements.get(tagName)){analysisLayerInputPopover2.defineCustomElement()}break;case"analysis-linear-unit-input":if(!customElements.get(tagName)){analysisLinearUnitInput2.defineCustomElement()}break;case"analysis-multiple-input":if(!customElements.get(tagName)){analysisMultipleInput2.defineCustomElement()}break;case"analysis-number-input":if(!customElements.get(tagName)){analysisNumberInput2.defineCustomElement()}break;case"analysis-query-builder":if(!customElements.get(tagName)){analysisQueryBuilder2.defineCustomElement()}break;case"analysis-query-entry":if(!customElements.get(tagName)){analysisQueryEntry2.defineCustomElement()}break;case"analysis-query-input":if(!customElements.get(tagName)){analysisQueryInput2.defineCustomElement()}break;case"analysis-query-modal":if(!customElements.get(tagName)){analysisQueryModal2.defineCustomElement()}break;case"analysis-query-target-select":if(!customElements.get(tagName)){analysisQueryTargetSelect2.defineCustomElement()}break;case"analysis-spatial-expression":if(!customElements.get(tagName)){analysisSpatialExpression2.defineCustomElement()}break;case"analysis-spatial-reference-input":if(!customElements.get(tagName)){analysisSpatialReferenceInput2.defineCustomElement()}break;case"analysis-spatial-reference-selector":if(!customElements.get(tagName)){analysisSpatialReferenceSelector2.defineCustomElement()}break;case"analysis-string-input":if(!customElements.get(tagName)){analysisStringInput2.defineCustomElement()}break;case"analysis-summary-fields":if(!customElements.get(tagName)){analysisSummaryFields2.defineCustomElement()}break;case"analysis-summary-fields-popover":if(!customElements.get(tagName)){analysisSummaryFieldsPopover2.defineCustomElement()}break;case"analysis-traffic-time-input":if(!customElements.get(tagName)){analysisTrafficTimeInput2.defineCustomElement()}break;case"analysis-tree":if(!customElements.get(tagName)){analysisTree2.defineCustomElement()}break;case"analysis-unsupported-input":if(!customElements.get(tagName)){analysisUnsupportedInput2.defineCustomElement()}break;case"analysis-workflow-select":if(!customElements.get(tagName)){analysisWorkflowSelect2.defineCustomElement()}break;case"analysis-workflow-select-popover":if(!customElements.get(tagName)){analysisWorkflowSelectPopover2.defineCustomElement()}break}}))}defineCustomElement();exports.AnalysisValueTable=AnalysisValueTable;exports.adaptForTravelModes=adaptForTravelModes;exports.applyRules=applyRules;exports.applyToolParameterDefaults=applyToolParameterDefaults;exports.applyToolUIJsonParameterDefaults=applyToolUIJsonParameterDefaults;exports.applyUserSettings=applyUserSettings;exports.applyUserSettingsRules=applyUserSettingsRules;exports.applyVisibilityRules=applyVisibilityRules;exports.defineCustomElement=defineCustomElement;exports.getRulesByDestination=getRulesByDestination;exports.joinParams=joinParams}));
