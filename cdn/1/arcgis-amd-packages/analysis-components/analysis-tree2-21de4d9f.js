define(["exports","./index-ef555910","./utils-793221d4"],(function(exports,index,utils){"use strict";const analysisTreeCss=":root{--analysis-quarter-spacing:0.25rem;--analysis-half-spacing:0.5rem;--analysis-three-quarter-spacing:0.75rem;--analysis-full-spacing:1rem;--analysis-component-default-width:100%;--analysis-ui-border-input:#d4d4d4;--analysis-label-font-size:var(--calcite-font-size--2);--analysis-popover-content-min-height-s:7.5rem;--analysis-popover-content-min-height-m:8.75rem;--analysis-popover-content-max-height:60vh;--analysis-popover-content-height:45vh}:host{overflow-y:auto;overflow-x:hidden;scroll-behavior:smooth;height:100%;width:100%}";const AnalysisTree=index.proxyCustomElement(class AnalysisTree extends index.H{constructor(){super();this.__registerHost();this.__attachShadow();this.analysisTreeValueChange=index.createEvent(this,"analysisTreeValueChange",7);this.treeItemsOpen=new Set;this.handleMutations=mutations=>{mutations.forEach((mutation=>{if(mutation.type==="attributes"&&mutation.attributeName==="expanded"){const target=mutation.target;if("key"in target.dataset&&target.dataset.key!==undefined){const previousState=this.treeItemsOpen.has(target.dataset.key);if(previousState!==target.expanded){this.toggleTreeItem(target.dataset.key)}}}}))};this.toggleTreeItem=key=>{if(this.treeItemsOpen.has(key)){this.treeItemsOpen.delete(key)}else{this.treeItemsOpen.add(key)}this.buildJSXTree()};this.data={};this.value=undefined;this.renderedTree=[]}onDataChange(){this.setupComponent()}componentWillLoad(){this.setupComponent()}componentDidLoad(){this.setupObserver()}disconnectedCallback(){this.observer?.disconnect()}setupComponent(){this.treeItemsOpen.clear();this.buildJSXTree()}setupObserver(){this.observer=new MutationObserver(this.handleMutations);const target=this.hostElement.shadowRoot??this.hostElement;this.observer.observe(target,{attributes:true,subtree:true,attributeFilter:["expanded"]})}buildJSXTree(){const buildJSXTreeRecursive=subData=>{const elements=[];for(const key in subData){const value=subData[key];let children=undefined;if(typeof value==="object"){children=this.treeItemsOpen.has(key)?buildJSXTreeRecursive(value):[this.createTreeItem("placeholder","placeholder")]}const treeValue=typeof value==="object"?key:value;elements.push(this.createTreeItem(key,treeValue,children))}return elements};this.renderedTree=buildJSXTreeRecursive(this.data)}createTreeItem(key,value,children){return index.h("calcite-tree-item",{key:`${key}-item`,"data-key":key,selected:this.value===key,"aria-selected":this.value===key,expanded:this.treeItemsOpen.has(key),"aria-expanded":this.treeItemsOpen.has(key),onClick:children!==undefined?()=>this.toggleTreeItem(key):undefined},value,children!==undefined&&index.h("calcite-tree",{key:`${key}-child-tree`,slot:"children"},children))}handleTreeSelect(event){const treeEl=event.target;const selectedKey=treeEl?.selectedItems[0]?.dataset.key;if(selectedKey!==undefined){if(selectedKey.includes("placeholder")===true){const parentKey=treeEl?.selectedItems[0].parentElement?.dataset.key;if(parentKey!==undefined){this.treeItemsOpen.add(parentKey)}this.buildJSXTree()}else{this.value=selectedKey;this.analysisTreeValueChange.emit()}}}render(){return index.h(index.Host,null,index.h("div",null,index.h("calcite-tree",{key:"base-tree",scale:utils.UIDefaults.Scale,onCalciteTreeSelect:event=>this.handleTreeSelect(event)},this.renderedTree)))}get hostElement(){return this}static get watchers(){return{data:["onDataChange"]}}static get style(){return analysisTreeCss}},[1,"analysis-tree",{data:[16],value:[1537],renderedTree:[32]},undefined,{data:["onDataChange"]}]);function defineCustomElement(){if(typeof customElements==="undefined"){return}const components=["analysis-tree"];components.forEach((tagName=>{switch(tagName){case"analysis-tree":if(!customElements.get(tagName)){customElements.define(tagName,AnalysisTree)}break}}))}defineCustomElement();exports.AnalysisTree=AnalysisTree;exports.defineCustomElement=defineCustomElement}));
