System.register(["jimu-core","jimu-arcgis","jimu-ui","jimu-layouts/layout-runtime"], function(__WEBPACK_DYNAMIC_EXPORT__, __system_context__) {
	var __WEBPACK_EXTERNAL_MODULE_jimu_core__ = {};
	var __WEBPACK_EXTERNAL_MODULE_jimu_arcgis__ = {};
	var __WEBPACK_EXTERNAL_MODULE_jimu_ui__ = {};
	var __WEBPACK_EXTERNAL_MODULE_jimu_layouts_layout_runtime__ = {};
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_core__, "__esModule", { value: true });
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_arcgis__, "__esModule", { value: true });
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_ui__, "__esModule", { value: true });
	Object.defineProperty(__WEBPACK_EXTERNAL_MODULE_jimu_layouts_layout_runtime__, "__esModule", { value: true });
	return {
		setters: [
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_core__[key] = module[key];
				});
			},
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_arcgis__[key] = module[key];
				});
			},
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_ui__[key] = module[key];
				});
			},
			function(module) {
				Object.keys(module).forEach(function(key) {
					__WEBPACK_EXTERNAL_MODULE_jimu_layouts_layout_runtime__[key] = module[key];
				});
			}
		],
		execute: function() {
			__WEBPACK_DYNAMIC_EXPORT__(
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/basemap.svg":
/*!***********************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/basemap.svg ***!
  \***********************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"nonzero\" d=\"M.1 6.9h6.8V.1H.1zm6-.8H3.985c.077-.403.25-.78.506-1.102a4.574 4.574 0 0 0 1.609.805zm0-1.128a3.758 3.758 0 0 1-1.006-.523c.31-.203.65-.358 1.006-.459zM6.1.9v2.266a4.229 4.229 0 0 0-1.613.73 6.038 6.038 0 0 1-1.1-1.767l.002-.004-.004-.001A8.16 8.16 0 0 1 2.99.9zM.9.9h1.266a8.7 8.7 0 0 0 .359 1.249A1.93 1.93 0 0 1 .9 3.188zm0 3.09a2.828 2.828 0 0 0 2.006-.966c.262.519.594 1 .987 1.428A3.367 3.367 0 0 0 3.17 6.1H.9zM9.1.1v6.8h6.8V.1zm.8.8h4.063a.373.373 0 0 1-.045.2.594.594 0 0 1-.438.176 1.637 1.637 0 0 0-1.175.49.91.91 0 0 0-.203.708c-.001.007-.114.736-.607.742a.74.74 0 0 0-.719.384.828.828 0 0 0-.026.6H9.9zm5.2 5.2H9.9V5h2.296l-.474-.639a1.562 1.562 0 0 1-.192-.346c1.041-.03 1.37-1.188 1.365-1.587a.19.19 0 0 1 .028-.154c.031-.037.166-.162.624-.2.419 0 .81-.205 1.049-.549a1.13 1.13 0 0 0 .16-.625h.344zm-15 9.8h6.8V9.1H.1zm.8-6h5.2v.46l-2 1.973v.867l-3.2-.089zm0 4.01 4 .112v-1.355l1.2-1.182V15.1H.9zm8.2 1.99h6.8V9.1H9.1zm6-.8h-1.792l-1.27-1.572 1.468-1.468 1.594 1.605zm0-5.2v2.628L12.49 9.9zm-5.2 0h1.46l1.581 1.592-1.978 1.98 1.316 1.628H9.9z\"></path></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/close-12.svg":
/*!************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/close-12.svg ***!
  \************************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 14 14\"><g fill=\"none\" fill-rule=\"nonzero\"><path fill=\"#000\" d=\"m7.745 7 4.1 4.1a.527.527 0 0 1-.745.746L7 7.746l-4.1 4.1a.527.527 0 0 1-.746-.746l4.1-4.1-4.1-4.1a.527.527 0 0 1 .746-.746l4.1 4.1 4.1-4.1a.527.527 0 0 1 .746.746z\"></path><path d=\"M1 1h12v12H1z\"></path></g></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/exchange.svg":
/*!************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/exchange.svg ***!
  \************************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 39 32\"><path d=\"M38.784 9.778v2.962H3.236V9.778h.074L13.086.002l2.111 2.111-7.702 7.665zM3.236 21.628h31.327l-7.702 7.702 2.111 2.111 9.776-9.813h.037v-2.962H3.237v2.962z\"></path></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/exit-full-screen.svg":
/*!********************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/exit-full-screen.svg ***!
  \********************************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"nonzero\" d=\"M5 11v5H4v-4.001L0 12v-1zm11 0v1l-4-.001V16h-1v-5zM5 0v5H0V4l4 .001V0zm7 0v4.001L16 4v1h-5V0z\"></path></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/full-screen.svg":
/*!***************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/full-screen.svg ***!
  \***************************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"nonzero\" d=\"M1 11v4.001L5 15v1H0v-5zm15 0v5h-5v-1l4 .001V11zM5 0v1L1 .999V5H0V0zm11 0v5h-1V.999L11 1V0z\"></path></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/layerlist.svg":
/*!*************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/layerlist.svg ***!
  \*************************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"nonzero\" d=\"m14.376 10.573 1.647.927-8 4.5-8-4.5 1.648-.927 1.02.574-.628.353 5.96 3.353 5.96-3.353-.627-.353zm-.999-2.414.606.341-5.96 3.353L2.063 8.5l.607-.341-1.02-.574L.023 8.5l8 4.5 8-4.5-1.626-.915zM8.023 1.023l-8 4.5 8 4.5 8-4.5zm-5.96 4.5 5.96-3.352 5.96 3.352-5.96 3.353z\"></path></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/measure-area.svg":
/*!****************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/measure-area.svg ***!
  \****************************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15 16\"><g fill=\"#000\" fill-rule=\"nonzero\"><path d=\"M4 8h1v3H4zM2 9h1v2H2zm6-1h1v3H8zm4 0h1v3h-1z\"></path><path d=\"M15 12V6h-2V5h1V2h-3v1L4 1.05V0H1v3h1v3H0v6h2v1H1v3h3v-1h7v1h3v-3h-1v-1zm-3-9h1v1h-1zm-8-.92L11 4v1h1v1H3V3h1zM2 1h1v1H2zm1 14H2v-1h1zm8-1H4v-1H3v-1h9v1h-1zm2 1h-1v-1h1zM1 11V7h13v4z\"></path><path d=\"M6 9h1v2H6zm4 0h1v2h-1z\"></path></g></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/measure-distance.svg":
/*!********************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/measure-distance.svg ***!
  \********************************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15 10\"><path fill=\"#000\" fill-rule=\"nonzero\" d=\"M0 10h15V4H0zm1-5h13v4h-1V6h-1v3h-1V7h-1v2H9V6H8v3H7V7H6v2H5V6H4v3H3V7H2v2H1zm11-5v1H3V0H0v3h3V2h9v1h3V0zM2 2H1V1h1zm12 0h-1V1h1z\"></path></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/measure.svg":
/*!***********************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/measure.svg ***!
  \***********************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"nonzero\" d=\"M0 9v6h16V9zm15 3h-1v2h-1v-3h-1v3h-1v-2h-1v2H9v-3H8v3H7v-2H6v2H5v-3H4v3H3v-2H2v2H1v-4h14zm.18-7.5-2.85 2.85-.71-.7L13.23 5H9V4h4.32l-1.7-1.69.71-.7zM2.68 4H7v1H2.77l1.61 1.65-.71.7L.82 4.5l2.85-2.85.71.7z\"></path></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/search.svg":
/*!**********************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/search.svg ***!
  \**********************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"nonzero\" d=\"M7 1a6 6 0 1 0 0 12A6 6 0 0 0 7 1m0 13a7 7 0 1 1 5.621-2.828l-.222.284 3.405 3.404a.668.668 0 0 1-.944.944L11.456 12.4A6.974 6.974 0 0 1 7 14\"></path></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-circle.svg":
/*!*****************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-circle.svg ***!
  \*****************************************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><g fill=\"#363636\" fill-rule=\"nonzero\"><path d=\"m.25 3 8.642 4.969-3.422.738 2.723 5.45-2.886 1.667-2.724-5.45-2.351 2.595zm.996 1.726-.01 5.644 1.527-1.684 2.909 5.771 1.155-.667-2.91-5.77 2.222-.48z\"></path><path d=\"M10.318 0C13.456 0 16 2.462 16 5.5S13.456 11 10.318 11a5.796 5.796 0 0 1-3.023-.842l-.22-.142.54-.752c.788.53 1.722.82 2.703.82 2.615 0 4.735-2.053 4.735-4.584 0-2.531-2.12-4.583-4.735-4.583-1.916 0-3.617 1.112-4.354 2.779l-.078.187L5 3.56C5.827 1.435 7.933 0 10.318 0\"></path></g></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-clear.svg":
/*!****************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-clear.svg ***!
  \****************************************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill=\"#363636\" fill-rule=\"nonzero\" d=\"M16 0v16H0V0zM7.077 1H1v14h10.561L7.078 7.616zM15 6.391 9.56 9.779 12.73 15H15zM15 1H8.077v6.335l.965 1.589L15 5.213z\"></path></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-lasso.svg":
/*!****************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-lasso.svg ***!
  \****************************************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 17 16\"><g fill=\"#363636\" fill-rule=\"nonzero\"><path d=\"m.75 3 8.642 4.969-3.422.738 2.723 5.45-2.886 1.667-2.724-5.45-2.351 2.595zm.996 1.726-.01 5.644 1.527-1.684 2.909 5.771 1.155-.667-2.91-5.77 2.222-.48z\"></path><path d=\"M8.721 0c1.82 0 2.865 1.556 2.865 4.35 0 .462.12.66.385.774.219.093.473.126.99.131h.551l.397.009c1.251.05 1.807.336 2.04 1.333.41 1.76-1.62 3.114-5.904 4.313l-.326.09-.245-.999.64-.18c3.516-1.02 5.088-2.089 4.88-2.979-.094-.407-.382-.535-1.304-.553l-.787-.002c-.62-.008-.943-.055-1.3-.207-.648-.276-.998-.859-.998-1.73 0-2.286-.694-3.318-1.884-3.318-.731 0-1.68.55-2.815 1.685l-.215.22L5 2.203C6.398.748 7.626 0 8.721 0\"></path></g></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-line.svg":
/*!***************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-line.svg ***!
  \***************************************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><g fill=\"#363636\" fill-rule=\"nonzero\"><path d=\"m.25 3 8.642 4.969-3.422.738 2.723 5.45-2.886 1.667-2.724-5.45-2.351 2.595zm.996 1.726-.01 5.644 1.527-1.684 2.909 5.771 1.155-.667-2.91-5.77 2.222-.48zM9.72 1.11l.588-.808 5.082 3.7-4.577 2.656L14.61 9.49l-.598.801L9 6.555l4.56-2.649z\"></path></g></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-point.svg":
/*!****************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-point.svg ***!
  \****************************************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill=\"#363636\" fill-rule=\"nonzero\" d=\"m.25 3 8.642 4.969-3.422.738 2.723 5.45-2.886 1.667-2.724-5.45-2.351 2.595zm.996 1.726-.01 5.644 1.527-1.684 2.909 5.771 1.155-.667-2.91-5.77 2.222-.48zM12 6a2 2 0 1 0 0-4 2 2 0 0 0 0 4\"></path></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-rectangle.svg":
/*!********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-rectangle.svg ***!
  \********************************************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill=\"#363636\" fill-rule=\"nonzero\" d=\"m.25 3 8.642 4.969-3.422.738 2.723 5.45-2.886 1.667-2.724-5.45-2.351 2.595zm.996 1.726-.01 5.644 1.527-1.684 2.909 5.771 1.155-.667-2.91-5.77 2.222-.48zM16 0v11H8.5v-1H15V1H6v2.5H5V0z\"></path></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-zoomto.svg":
/*!*****************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-zoomto.svg ***!
  \*****************************************************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><path fill=\"#363636\" fill-rule=\"nonzero\" d=\"M7.682 6.318a4.5 4.5 0 0 1 .335 5.99l2.847 2.849-.707.707-2.848-2.848a4.5 4.5 0 1 1 .373-6.698m-5.657.707a3.5 3.5 0 1 0 4.95 4.95 3.5 3.5 0 0 0-4.95-4.95M16 0v11H9.5v-1h3.099L10 5.153V1H6v2.5H5V0zm-1 5.954L12.637 7.83 13.801 10H15zM15 1h-3.981v3.813l1.055 1.967L15 4.457z\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/filled/data/placeholder-map.svg":
/*!********************************************************!*\
  !*** ./jimu-icons/svg/filled/data/placeholder-map.svg ***!
  \********************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#050505\" d=\"m12.687 9.074.073-.133a.147.147 0 0 0 .017-.078l-.012-.142c-.002-.033-.042-.051-.068-.028l-.205.175a.05.05 0 0 1-.019.01l-.092.017a.042.042 0 0 0-.033.051l.019.077a.135.135 0 0 0 .093.097l.07.02a.134.134 0 0 0 .157-.066M13.8 9.389a.13.13 0 0 0 .058-.014l.141-.069c.002 0 .002 0 .003.002l.104.13c.005.006.013.01.023.01h.069a.028.028 0 0 0 .023-.046l-.108-.141-.047-.04-.382-.191-.092.036h-.07v-.001l-.026-.084a.027.027 0 0 0-.025-.019h-.093a.027.027 0 0 0-.027.028v.082h.06v.024c0 .03.023.055.052.06l.136.016h.001l.074.093c.023.028.019.097-.006.125v.001h.131zM13.878 6.775l-.048.043a.294.294 0 0 0-.094.187.299.299 0 0 1-.082.178.496.496 0 0 1-.246.136l-.018.004-.076.062s-.022.11 0 .135c.009.012.049.01.061 0 .016-.012.017-.08.017-.08l.242-.087s.06.08.09.083c.012.002.042-.013.05-.025.032-.045.068-.208.068-.208a.546.546 0 0 0 .024-.113l.013-.143.108-.007.043-.087-.112-.011zM9.427 10.12a.141.141 0 0 0 .245 0v-.334a.122.122 0 0 0-.187-.105.125.125 0 0 0-.058.105zM6.698 4.315l.144-.084.002-.006a.065.065 0 0 0-.026-.085.063.063 0 0 0-.031-.008h-.328l-.035-.038a.216.216 0 0 0-.157-.074L5.778 4l-.048.009a2.362 2.362 0 0 1-.048.009l-.289.122a.209.209 0 0 1-.076.018l-.464.023a.232.232 0 0 0-.099.028l-.26.148a.03.03 0 0 0-.015.024.03.03 0 0 0 .012.026c.02.015.014.047-.01.053l-.203.051a.03.03 0 0 0-.019.044l.068.112a.03.03 0 0 0 .02.014l.364.063c.056.01.106.04.14.086l.251.333.074.102a.094.094 0 0 1-.007.118l-.056.06a.093.093 0 0 0-.015.105l.183.37a.134.134 0 0 0 .081.068.223.223 0 0 0 .274-.142l.048-.137a.097.097 0 0 1 .04-.05l.204-.175a.24.24 0 0 1 .085-.046l.32-.088a.22.22 0 0 0 .148-.133l.151-.378a.227.227 0 0 0-.001-.172l-.03-.07a.227.227 0 0 1 .097-.28M4.03 4.643l.061-.11a.221.221 0 0 1 .088-.087l.504-.282-.057-.066-.572-.035a.203.203 0 0 0-.05.003l-.557.09a.232.232 0 0 0-.137.377l.125.148c.043.051.107.08.172.08h.224a.226.226 0 0 0 .199-.118M4.666 5.672l.052-.061c.013-.016.01-.04-.007-.051l-.162-.116-.569-.425a.137.137 0 0 0-.081-.027h-.224a.131.131 0 0 0-.095.04l-.118.115a.034.034 0 0 0-.003.047l.067.085c.006.01.018.015.03.014l.064-.006a.035.035 0 0 1 .038.033l.002.038c0 .005 0 .01-.002.016l-.03.073a.036.036 0 0 0 .006.036l.07.084a.032.032 0 0 0 .028.012l.068-.003a.035.035 0 0 0 .034-.035v-.147c0-.019.014-.034.032-.035l.094-.007c.008 0 .018.002.024.007l.174.133c.013.011.017.029.01.044l-.057.116a.033.033 0 0 1-.03.018l-.054.004a.036.036 0 0 0-.032.027.036.036 0 0 0 .032.044l.117.009c.024.001.048.01.069.024l.206.146c.014.01.03.008.043-.003l.065-.055a.03.03 0 0 0 .011-.018l.021-.083a.035.035 0 0 0-.004-.029l-.07-.11.022-.004a.037.037 0 0 1 .024.004l.091.054a.035.035 0 0 0 .044-.008M2.08 5.137h.07l.104.146c.014.018.03.033.05.044l.136.068c.018.01.04.015.061.015h.422V5.27l-.156-.056-.18-.097A.14.14 0 0 1 2.52 5.1l-.288-.166a.13.13 0 0 0-.067-.018h-.173a.136.136 0 0 0-.13.095l-.014.047a.14.14 0 0 0 .033.14l.061.062h.138zM2.679 5.022l.11-.058a.139.139 0 0 1 .063-.015h.06c.052 0 .1.03.123.078l.044.092v.094h-.2v-.12l-.084-.043-.1.003zM3.061 4.95l.1.164.08.047h.115l.116-.124-.088-.116-.225.028zM2.414 4.698l.158.057a.12.12 0 0 1 .03.015l.109.073c.018.012.038.02.06.021l.2.02-.024-.124-.238-.132a.14.14 0 0 0-.065-.017h-.122zM7.46 5.712l.058.092a.025.025 0 0 1-.001.028l-.044.06c-.004.008-.007.016-.004.022l.017.061a.02.02 0 0 0 .008.012l.092.072c.063.048.07.141.017.2l-.001.002a.138.138 0 0 1-.101.046h-.11a.025.025 0 0 1-.024-.031l.028-.11a.023.023 0 0 1 .014-.017l.049-.024c.01-.004.015-.015.013-.026l-.002-.03a.026.026 0 0 0-.02-.021l-.071-.015a.024.024 0 0 0-.027.014l-.016.035v.002l-.001.002-.035.118c-.003.011-.013.018-.024.018l-.11-.003a.024.024 0 0 1-.018-.007.024.024 0 0 1-.007-.017v-.127c0-.013.011-.024.024-.024l.058-.002c.008 0 .014-.004.02-.01l.053-.079A.027.027 0 0 0 7.3 5.94V5.82c0-.008.004-.015.01-.019l.115-.094a.024.024 0 0 1 .037.005\"></path><path fill=\"#050505\" fill-rule=\"evenodd\" d=\"M15.073 5.1H14.7a.042.042 0 0 1-.04-.03l-.358-.069a.161.161 0 0 1-.088-.027l-.081-.055a.16.16 0 0 0-.088-.027s-.832-.43-1.922-.388c-.41.016-.77.222-.77.222a.033.033 0 0 0-.02.026l-.004.034a.033.033 0 0 1-.033.028l-.164-.004a.033.033 0 0 0-.034.032l-.459.016c-.04 0-.077.02-.1.053l-.041.06c-.03.045-.441.06-.441.06a.06.06 0 0 1-.036-.055v-.049c0-.017.006-.032.02-.044l.218-.2a.162.162 0 0 1 .087-.04l.136-.018a.06.06 0 0 0 .04-.024l.016-.024a.06.06 0 0 0-.028-.09l-.01-.005a.06.06 0 0 0-.047.004l-.104.061a.057.057 0 0 1-.03.008h-.101a.159.159 0 0 0-.114.049l-.244.252a.165.165 0 0 0-.042.08l-.023.11.016.047-.096.135-.087.087h-.081v-.087H9.45l-.028.11a.161.161 0 0 1-.098.11l-.081.032a.157.157 0 0 1-.156-.026l-.106-.086.284.015.032-.062S9 5.18 8.828 5.084c-.14-.08-.324-.013-.388.016a.147.147 0 0 0-.042.027l-.62.565a.162.162 0 0 0-.006.231l.058.061.083-.069a.057.057 0 0 1 .076.003l.155.146h.04l.146-.176a.057.057 0 0 0 .002-.072l-.019-.026a.06.06 0 0 1-.004-.066l.204-.334a.042.042 0 0 1 .052-.017l.036.018c.022.01.03.035.019.057l-.14.268a.134.134 0 0 0-.01.104l.023.071a.18.18 0 0 1-.03.146l-.087.12a.161.161 0 0 1-.134.064l-.254-.01a.046.046 0 0 1-.031-.013.047.047 0 0 1-.013-.032v-.042a.045.045 0 0 0-.046-.046.046.046 0 0 0-.045.042l-.007.074a.046.046 0 0 1-.045.042h-.024a.042.042 0 0 0-.03.012l-.414.386.06.088v.093a.057.057 0 0 1-.056.056h-.132c-.071 0-.127.06-.123.132l.001.018a.124.124 0 0 0 .119.116l.141.004a.16.16 0 0 0 .135-.068l.101-.144a.158.158 0 0 1 .13-.067h.097c.032 0 .064.01.09.028l.157.11c.03.022.033.068.004.092l-.088.077a.156.156 0 0 1-.104.04h-.55a.158.158 0 0 0-.126.064l-.425.573a.168.168 0 0 0-.032.096v.38c0 .035.011.069.032.097l.148.198c.013.016.02.036.027.055.01.033.036.08.1.08h.686s.172.005.172.12c0 .04-.001.08-.003.116a.162.162 0 0 0 .083.148c.048.028.099.077.099.155v.21a.203.203 0 0 1-.007.049.772.772 0 0 1-.079.178c-.036.054.015.135.052.182a.17.17 0 0 1 .035.102v.21s.016.076.088.109a.583.583 0 0 1 .097.05v.084c0 .09.071.16.16.16h.207s.094.008.155-.087l.28-.437s.04-.043 0-.12c-.04-.076-.021-.145-.021-.145l.19-.11s.09-.016.09-.141v-.136a.115.115 0 0 0-.018-.062l-.033-.057a.162.162 0 0 1 .021-.191l.395-.424s.104-.156.104-.235H9.49a.16.16 0 0 1-.136-.077l-.346-.576a.087.087 0 0 1 .033-.121.084.084 0 0 1 .112.03l.335.552-.001.05c0 .016.012.028.028.028.083 0 .327-.01.463-.13a.596.596 0 0 0 .143-.181.16.16 0 0 0-.038-.19l-.085-.076-.11.025-.197-.199a.063.063 0 0 1 .016-.1.06.06 0 0 1 .065.007l.307.238s.063.056.127.056h.18c.056 0 .108.03.136.078l.402.683s.06.056.094.054c.035-.003.082-.15.082-.15 0-.136.065-.266.176-.344l.138-.098a.158.158 0 0 1 .202.015l.085.083v.09c0 .014.012.027.028.027h.038l.036-.036h.042v.359c0 .04.015.08.043.109l.267.288v-.103a.159.159 0 0 0-.035-.1l-.125-.158a.159.159 0 0 1-.035-.1v-.109c0-.017.021-.026.033-.013l.162.167.004.105c.001.02.025.03.038.015l.229-.25s.066-.083 0-.152a5.405 5.405 0 0 0-.158-.154.05.05 0 0 1-.016-.039.05.05 0 0 1 .019-.038l.044-.037.11.002s-.023.052-.058.112c0 0 .017.096.123-.083.008-.007.036-.003.067.002.04.006.084.014.1-.002.06-.064.309-.407.309-.407s.032-.126-.043-.192c-.076-.066-.043-.147-.043-.147l.094-.082v-.058h-.244s.02-.13.194-.139l.031-.001c.011 0 .021 0 .03-.002a.132.132 0 0 1 .127.083c.006.016.01.034.01.052v.243l.036.004s.068.007.093-.084c0 0 .046-.013.046-.068v-.066l-.066-.08.107-.138a.122.122 0 0 1 .075-.045l.054-.011a.125.125 0 0 0 .08-.053l.247-.373a.165.165 0 0 0 .027-.09v-.102a.05.05 0 0 0-.05-.05h-.144s-.06-.07.022-.12c.057-.035.169-.128.232-.18a.155.155 0 0 1 .101-.038h.29a.16.16 0 0 0 .093-.03l.19-.137a.04.04 0 0 1 .025-.008c.082 0 .125.1.07.162l-.198.214a.158.158 0 0 0-.043.106l-.003.173c0 .032.026.06.059.06h.048l.259-.268a.125.125 0 0 0 .033-.066l.01-.056a.16.16 0 0 1 .155-.134h.114a.154.154 0 0 0 .104-.039l.159-.14a.043.043 0 0 1 .028-.01h.082a.042.042 0 0 0 .043-.044v-.08c0-.013.005-.024.013-.032l.062-.058a.156.156 0 0 1 .181-.024l.104.055a.061.061 0 0 0 .076-.016l.051-.065a.062.062 0 0 0 .012-.052.062.062 0 0 0-.033-.042l-.503-.25a5.427 5.427 0 0 0-.39-.014M8.141 7.024l.09-.078zl-.133-.163a.053.053 0 0 1-.01-.019.053.053 0 0 0 .01.018zm.755.493h-.081a.13.13 0 0 1-.032-.004 9.127 9.127 0 0 1-.61-.186.062.062 0 0 1-.035-.045.063.063 0 0 1 .015-.055l.11-.117a.094.094 0 0 1 .13.005l.1.107.087-.016-.024-.064s-.01-.03-.021-.056c-.011-.027.048-.061.048-.061s.06-.006.06.088c0 .093.097.163.097.163h.332c.021 0 .035.023.024.04l-.059.113a.16.16 0 0 1-.141.088m.417-.503H9.2l-.083-.065a.057.057 0 0 0-.032-.01h-.108a.067.067 0 0 0-.044.017l-.078.07-.078.012a.053.053 0 0 1-.056-.026.055.055 0 0 1-.006-.02l-.011-.087a.09.09 0 0 1 .021-.069l.128-.145.058-.005-.003.026a.051.051 0 0 0 .05.058h.029a.069.069 0 0 0 .064-.042l.026-.058.12.02.01.087a.077.077 0 0 0 .026.048l.133.112v.025c0 .03-.023.052-.053.052m.574.093v.099h-.205l-.018-.099a.05.05 0 0 1 .008-.039l.011-.015a.052.052 0 0 0-.008-.069l-.096-.089v-.163l.14-.06h.072c.028 0 .052.019.06.046l.001.004c.006.02 0 .04-.013.056a.061.061 0 0 0-.015.031l-.013.085.113.105-.08.054z\" clip-rule=\"evenodd\"></path><path fill=\"#050505\" d=\"M12.945 7.8c-.006-.015-.01-.022-.017-.021-.007 0-.018.009-.036.025a.11.11 0 0 0-.039.08c0 .02.003.04.012.062.007.018.02.032.028.032.025 0 .066-.14.052-.178M12.894 8.108a.116.116 0 0 1 .024.005l.014.004c.018.006.027.009.033.015.005.005.008.014.013.03l.004.014c.008.027.002.053-.018.07-.046.037-.038.057.03.072.047.01.061.024.061.062 0 .046-.003.046-.055.019-.03-.016-.06-.023-.065-.016-.007.007 0 .016.014.021.055.02.086.071.074.12-.014.057.014.066.059.02.048-.049.089.023.078.136-.004.038-.038.055-.09.043a.047.047 0 0 1-.022-.012.04.04 0 0 1-.013-.027c0-.024-.013-.029-.051-.02-.038.01-.05.006-.05-.018a.05.05 0 0 1 .03-.044c.013-.005.02-.009.02-.017 0-.008-.007-.019-.02-.038a.174.174 0 0 1-.03-.08c0-.02-.008-.037-.019-.037-.027 0-.088-.193-.063-.201.004-.002.009-.008.012-.016a.148.148 0 0 0 .009-.053c0-.04.003-.054.021-.052M12.8 8.567c.047-.044.072-.116.04-.116-.014 0-.082.079-.11.129-.03.052.009.045.07-.013M12.912 8.698a.02.02 0 0 1 .021.02c0 .011-.003.02-.008.02 0 0-.005 0-.007-.003a.064.064 0 0 1-.015-.017c-.007-.011-.003-.02.01-.02M13.254 8.913c-.013-.03-.03-.045-.044-.043-.014.001-.025.018-.03.05a.058.058 0 0 1-.01.026c.013.052.052.06.064.063h.004a.255.255 0 0 1 .025-.029.751.751 0 0 0 .014-.015zM13.082 8.894c.026-.004.035.015.011.043a.044.044 0 0 0-.008.015l-.057.01a.62.62 0 0 1-.036.005c-.038.006-.077.011-.1.037 0 .004.004.007.01.009.007.002.019.002.032-.001l.006-.003.005-.003.02-.002.064.008-.004.006h-.002l-.005.004-.013.008c-.03.026-.044.054-.034.067.008.012.015.04.015.062-.002.053-.066.067-.079.017-.006-.023-.01-.016-.012.021-.001.044-.011.057-.038.051-.02-.004-.035-.025-.035-.047a.142.142 0 0 0-.016-.065c-.008-.013-.006-.048.006-.078.007-.019.009-.028.01-.036l.002-.006.012-.032.018-.05-.003.001c.028-.026.056-.032.1-.022l.032.004a.15.15 0 0 0 .068-.012c.01-.005.02-.01.031-.011M13.36 9.136c0-.027-.034-.042-.092-.042a.445.445 0 0 0-.064.006c-.08.012-.103.027-.08.051.02.02.236.007.236-.015M5.866 9.362l-.35-.185a.222.222 0 0 0-.102-.026h-.101a.038.038 0 0 1-.037-.033.22.22 0 0 0-.218-.201h-.032a.217.217 0 0 1-.173-.088l-.048-.065a.216.216 0 0 0-.155-.086l-.262-.023a.028.028 0 0 1-.017-.007l-.043-.03c-.012-.007-.026-.009-.038 0l-.187.106a.216.216 0 0 1-.108.028h-.192a.037.037 0 0 1-.017-.004.146.146 0 0 1-.071-.133v-.112a.038.038 0 0 0-.023-.035.037.037 0 0 0-.014-.003h-.122a.037.037 0 0 1-.032-.019.038.038 0 0 1 0-.038l.057-.1a.044.044 0 0 0 .006-.02V8.2c0-.01-.004-.02-.011-.027a.037.037 0 0 0-.027-.011h-.066a.037.037 0 0 0-.03.017l-.038.06a.217.217 0 0 1-.184.1h-.054s-.086-.015-.086-.108v-.339a.097.097 0 0 1 .045-.067c.032-.02.107-.061.144-.081a.038.038 0 0 1 .043.005l.07.066c.007.007.015.01.024.01h.015c.022 0 .051 0 .057-.003.004-.002.004-.007.003-.014 0-.017 0-.046.045-.06.066-.019.109.04.109.04l.165.199a.037.037 0 0 0 .05.006l.023-.016a.038.038 0 0 0 .012-.05l-.002-.005a.223.223 0 0 1 .048-.28l.137-.118s.016-.01.024-.071c.005-.037.015-.09.021-.128l.021-.036.02-.036.297-.252a.036.036 0 0 1 .055.008c.014.022.038.046.069.045a.767.767 0 0 0 .208-.093.036.036 0 0 0 .019-.033v-.047l-.143.03a.038.038 0 0 1-.044-.031l-.016-.095a.038.038 0 0 0-.036-.03l-.143.015.018-.043a.043.043 0 0 1 .034-.027l.352-.037.056-.023.056-.023.071-.056a.038.038 0 0 0 .004-.055l-.396-.41a.039.039 0 0 0-.043-.008l-.118.057a.04.04 0 0 1-.038-.003L4.1 5.91a.036.036 0 0 0-.05.008l-.051.07a.033.033 0 0 0-.007.02l-.01.174c0 .011.003.02.011.029l.048.05a.038.038 0 0 1-.005.056l-.07.051a.037.037 0 0 1-.034.006l-.16.027a.22.22 0 0 0-.133-.13l-.08-.028a.222.222 0 0 1-.098-.35l.156-.19a.042.042 0 0 0 .007-.038l-.044-.115-.008-.012-.176-.19a.122.122 0 0 0-.21.065l-.001.01a.123.123 0 0 1-.12.104H2.54l-.05-.01a2.652 2.652 0 0 1-.04-.009l-.358-.162a2.003 2.003 0 0 0-.075-.018l-.33-.022a2.158 2.158 0 0 1-.092.015l-.148.058a.217.217 0 0 1-.124.01L.591 5.23a.212.212 0 0 0-.132.013l-.346.15a.038.038 0 0 0-.009.063l.09.077c.026.021.011.065-.022.066l-.136.003c-.02 0-.036.017-.036.037v.02c0 .02.016.036.036.037l.117.001c.04.002.051.056.015.072l-.101.046a.037.037 0 0 0-.022.037l.01.103a.22.22 0 0 0 .184.198l.072.012c.034.006.042.051.013.069l-.023.013c-.024.015-.024.05 0 .064l.012.006a.04.04 0 0 0 .035.003l.618-.282a.215.215 0 0 1 .237.04l.588.543a.22.22 0 0 1 .071.152l.02.415a.222.222 0 0 0 .048.128l.579.728c.01.014.03.018.045.01a.038.038 0 0 0 .014-.055s.365.383.4.399l.296.148a.22.22 0 0 0 .097.023h.147c.015 0 .028.008.033.021l.05.108V8.7l.001.001.002.003c.015.025.088.143.165.148.087.005.243 0 .243 0s.056-.001.056.06v.095a.036.036 0 0 1-.019.032c-.048.027-.172.107-.172.197v.212c0 .01.003.017.008.024.016.019.05.06.08.084.027.022.072.073.098.103l.013.014a.038.038 0 0 1 .008.024v.122a.04.04 0 0 1 .001.006l.001.007c.007.016.024.057.055.072.019.009.065.047.108.085a.222.222 0 0 1 .076.186l-.027.345-.003.02a.43.43 0 0 1-.003.02l-.119.45a1.75 1.75 0 0 0-.007.08l.012.185a.233.233 0 0 1-.01.095l-.044.126a.235.235 0 0 0-.007.125l.056.233a.123.123 0 0 0 .044.07l.057.045c.022.018.054.042.076.026.077-.054.12-.218.155-.353.015-.06.03-.115.044-.15.01-.023.067-.105.134-.202.11-.156.245-.35.244-.389l-.003-.09c0-.022.016-.038.037-.038h.114c.01 0 .02-.004.026-.012l.266-.294a.036.036 0 0 0 .01-.026v-.12c0-.021.017-.037.038-.037.045.002.12.002.145-.02.027-.021.097-.103.138-.15l.021-.024a.039.039 0 0 0 .01-.025v-.19c0-.055.02-.108.057-.15l.133-.148a.137.137 0 0 0-.043-.215M14.916 10.7l-.008.001c-.006.005.005.036.024.067.031.051.033.062.016.086-.017.025-.016.03.004.044.036.023.028.034-.022.03-.038-.004-.049.002-.07.039a.27.27 0 0 1-.078.074c-.071.044-.108.109-.06.109.013 0 .017.01.012.026-.01.032-.006.032.065-.002.041-.02.06-.038.066-.065a.065.065 0 0 1 .041-.048c.018-.006.032-.015.03-.019-.007-.018.033-.082.048-.077.02.006.08-.06.07-.076-.005-.006.001-.011.012-.011.022 0 .043-.048.03-.067-.004-.006-.023-.007-.043-.003-.024.005-.035.002-.035-.01 0-.02-.075-.089-.102-.097M12.885 9.274l-.486-.057a.119.119 0 0 1-.035-.01l-.118-.048a.144.144 0 0 1-.048-.032l-.39-.414a.05.05 0 0 0-.042-.015.047.047 0 0 0-.028.078l.41.466a.15.15 0 0 0 .063.04l.232.07a.128.128 0 0 0 .04.005h.397zM13.85 9.535l-.02.057a.255.255 0 0 1-.27.17.05.05 0 0 1-.038-.027.05.05 0 0 1 .001-.047l.1-.186-.26.01a.254.254 0 0 0-.1.023l-.098.046a.249.249 0 0 0-.07.049l-.18.178a.24.24 0 0 1-.075.051l-.123.055a.259.259 0 0 0-.152.236v.02c0 .034.007.068.02.1l.096.228c.003.005.004.01.005.015a.11.11 0 0 0 .143.077l.245-.088a.248.248 0 0 1 .108-.013l.294.027c.08.006.15.05.193.12l.02.03a.254.254 0 0 0 .218.122h.118a.255.255 0 0 0 .182-.076l.13-.132a.26.26 0 0 0 .075-.183v-.173a.26.26 0 0 0-.082-.19l-.268-.248a.24.24 0 0 1-.06-.082l-.08-.175c-.017-.027-.06-.026-.071.006M13.322 9.25c.017.001.029.014.028.037 0 .015-.029.043-.064.063a.332.332 0 0 1-.068.032c-.016.004-.019-.005-.019-.027 0-.017.006-.031.014-.031.007 0 .03-.02.051-.043.02-.022.041-.032.058-.03M13.079 9.272c.16 0 .149.04-.013.048-.095.004-.12 0-.115-.021.005-.018.045-.027.128-.027M6.117 5.52h.09l.067.046.182-.047.033.081v.115l-.175.021a.133.133 0 0 1-.1-.028l-.153-.121zM8.12 4.551h-.23l-.056.04.197.25h.09l.082-.152.202.103.032-.048-.24-.169a.132.132 0 0 0-.076-.024M8.611 4.372h-.298l-.028.046.086.064a.13.13 0 0 0 .08.027h.16l.076-.08zM3.042 4.379l-.197.074-.19.048.273.13.216-.07.072-.013-.057-.109zM3.415 4.78h-.086v.043l.046.017.01.044.071.01.048.055.424-.014.024-.05-.037-.056h-.456zM3.03 4.884l-.033-.096.033-.018.127.01.03.029-.07.082zM3.216 4.725l.016-.054.035-.024.034.013.058.025v.024h-.03l-.046.038z\"></path><path fill=\"#050505\" d=\"m3.844 8.095-.083.037c-.01.005-.01.021 0 .024l.088.037.103-.017.167.115h.119s.081-.01.081-.032-.081-.033-.081-.033l-.172-.13zM4.4 8.272s-.074.045-.065.066c.016.038.16 0 .16 0s.052-.048.043-.066c-.018-.031-.138 0-.138 0M14.162 10.93h-.28l.074.164h.066z\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/directional/arrow-fat-left.svg":
/*!****************************************************************!*\
  !*** ./jimu-icons/svg/outlined/directional/arrow-fat-left.svg ***!
  \****************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M.4 8 8 1.92V5.5h7v5H8v3.58zM7 9.5h7v-3H7V4L2 8l5 4z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/directional/arrow-fat-right.svg":
/*!*****************************************************************!*\
  !*** ./jimu-icons/svg/outlined/directional/arrow-fat-right.svg ***!
  \*****************************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"m16 8-7.6 6.08V10.5h-7v-5h7V1.92zM9.4 6.5h-7v3h7V12l5-4-5-4z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-icons/svg/outlined/editor/trash.svg":
/*!**************************************************!*\
  !*** ./jimu-icons/svg/outlined/editor/trash.svg ***!
  \**************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 16 16\"><path fill=\"#000\" d=\"M6 6.5a.5.5 0 0 1 1 0v6a.5.5 0 0 1-1 0zM9.5 6a.5.5 0 0 0-.5.5v6a.5.5 0 0 0 1 0v-6a.5.5 0 0 0-.5-.5\"></path><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M11 0H5a1 1 0 0 0-1 1v2H.5a.5.5 0 0 0 0 1h1.6l.81 11.1a1 1 0 0 0 .995.9h8.19a1 1 0 0 0 .995-.9L13.9 4h1.6a.5.5 0 0 0 0-1H12V1a1 1 0 0 0-1-1m0 3V1H5v2zm1.895 1h-9.79l.8 11h8.19z\" clip-rule=\"evenodd\"></path></svg>"

/***/ }),

/***/ "./jimu-ui/lib/icons/arrow-down-header.svg":
/*!*************************************************!*\
  !*** ./jimu-ui/lib/icons/arrow-down-header.svg ***!
  \*************************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 9 5\"><path fill=\"#000\" fill-rule=\"evenodd\" d=\"M4.128 4.587.751.834A.5.5 0 0 1 1.123 0h6.754a.5.5 0 0 1 .372.834L4.872 4.587a.5.5 0 0 1-.744 0\"></path></svg>"

/***/ }),

/***/ "./jimu-ui/lib/icons/more-16.svg":
/*!***************************************!*\
  !*** ./jimu-ui/lib/icons/more-16.svg ***!
  \***************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"><g fill=\"none\" fill-rule=\"nonzero\"><path fill=\"#000\" d=\"M13 7.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0m-6.5 0a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0M0 7.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0\"></path><path d=\"M0 0h16v16H0z\"></path></g></svg>"

/***/ }),

/***/ "./jimu-ui/lib/icons/widgets.svg":
/*!***************************************!*\
  !*** ./jimu-ui/lib/icons/widgets.svg ***!
  \***************************************/
/***/ ((module) => {

module.exports = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M20.889 1.333h6.222a3.556 3.556 0 0 1 3.556 3.556v6.222a3.556 3.556 0 0 1-3.556 3.556h-6.222a3.556 3.556 0 0 1-3.556-3.556V4.889a3.556 3.556 0 0 1 3.556-3.556M20 4v8h8V4zM4.889 17.333h6.222a3.556 3.556 0 0 1 3.556 3.556v6.222a3.556 3.556 0 0 1-3.556 3.556H4.889a3.556 3.556 0 0 1-3.556-3.556v-6.222a3.556 3.556 0 0 1 3.556-3.556M4 20v8h8v-8zm20 8a4 4 0 1 0 0-8 4 4 0 0 0 0 8m0 2.667a6.667 6.667 0 1 1 0-13.334 6.667 6.667 0 0 1 0 13.334M4.981 12h6.037L7.999 5.963zm4.212-9.615 5.176 10.352a1.334 1.334 0 0 1-1.192 1.93H2.825a1.333 1.333 0 0 1-1.192-1.929L6.809 2.386a1.332 1.332 0 0 1 2.385 0z\"></path></svg>"

/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/config.ts":
/*!************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/config.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SceneQualityMode: () => (/* binding */ SceneQualityMode)
/* harmony export */ });
var SceneQualityMode;
(function (SceneQualityMode) {
    SceneQualityMode["auto"] = "auto";
    SceneQualityMode["low"] = "low";
    SceneQualityMode["medium"] = "medium";
    SceneQualityMode["high"] = "high";
})(SceneQualityMode || (SceneQualityMode = {}));


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/default-map.tsx":
/*!*************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/components/default-map.tsx ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DefaultMap)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/utils.ts");
/* harmony import */ var _multisourcemap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./multisourcemap */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap.tsx");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");




class DefaultMap extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.state = {
            defaultMapInfo: null
        };
    }
    componentDidMount() {
        jimu_arcgis__WEBPACK_IMPORTED_MODULE_3__.portalUtils.getDefaultWebMap(this.props.baseWidgetProps.portalUrl).then(defaultMapInfo => {
            this.setState({
                defaultMapInfo: defaultMapInfo
            });
        });
    }
    render() {
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'w-100 h-100' },
            !this.state.defaultMapInfo && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'widget-map w-100 h-100 widget-map-background' },
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { style: { position: 'absolute', left: '50%', top: '50%' }, className: 'jimu-secondary-loading' })),
            this.state.defaultMapInfo && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('w-100 h-100', { 'map-is-design-mode': !(0,_utils__WEBPACK_IMPORTED_MODULE_1__.checkIsLive)(this.props.baseWidgetProps.appMode) }) }, jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_multisourcemap__WEBPACK_IMPORTED_MODULE_2__["default"], { key: 0, fullScreenMap: this.props.fullScreenMap, baseWidgetProps: this.props.baseWidgetProps, startLoadModules: this.props.startLoadModules, isDefaultMap: true, ref: this.props.setMultiSourceMapInstance, onViewGroupCreate: this.props.onViewGroupCreate, onJimuMapViewCreated: this.props.onJimuMapViewCreated, onActiveJimuMapViewChange: this.props.onActiveJimuMapViewChange, widgetHeight: this.props.widgetHeight, widthBreakpoint: this.props.widthBreakpoint, isFullScreen: this.props.isFullScreen, isMapInVisibleArea: this.props.isMapInVisibleArea, defaultMapInfo: this.state.defaultMapInfo, autoControlWidgetId: this.props.autoControlWidgetId }))));
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/map-thumb.tsx":
/*!***********************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/components/map-thumb.tsx ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MapThumb)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var jimu_icons_filled_data_placeholder_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-icons/filled/data/placeholder-map */ "./jimu-icons/filled/data/placeholder-map.tsx");



class MapThumb extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.unmount = false;
        this.setMapThumbUrl = (mapId) => {
            var _a;
            if (!mapId) {
                this.setState({ mapThumbUrl: null });
            }
            // if no portalUrl or same to config portalurl, use app config's portalUrl
            const portalUrl = ((_a = this.props) === null || _a === void 0 ? void 0 : _a.portUrl) || (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl;
            const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getSessionByUrl(portalUrl) || null;
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.esri.restPortal.searchItems({
                q: `id:${mapId}`,
                authentication: session,
                portal: portalUrl + '/sharing/rest'
            }).then(items => {
                var _a;
                if (!this.unmount) {
                    if ((_a = items.results[0]) === null || _a === void 0 ? void 0 : _a.thumbnail) {
                        const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getSessionByUrl(portalUrl);
                        let tempThumbUrl = null;
                        if (session && session.token) {
                            tempThumbUrl = `${portalUrl}/sharing/rest/content/items/${items.results[0].id}/` +
                                `info/${items.results[0].thumbnail}?token=${session.token}`;
                        }
                        else {
                            tempThumbUrl = `${portalUrl}/sharing/rest/content/items/${items.results[0].id}/` +
                                `info/${items.results[0].thumbnail}`;
                        }
                        this.setState({ mapThumbUrl: tempThumbUrl });
                    }
                    else {
                        this.setState({ mapThumbUrl: null });
                    }
                }
            });
        };
        this.state = {
            mapThumbUrl: null
        };
    }
    componentDidMount() {
        this.unmount = false;
        this.setMapThumbUrl(this.props.mapItemId);
    }
    componentDidUpdate(prevProps, prevState) {
        if (prevProps.mapItemId !== this.props.mapItemId) {
            this.setMapThumbUrl(this.props.mapItemId);
        }
    }
    componentWillUnmount() {
        this.unmount = true;
    }
    render() {
        if (this.state.mapThumbUrl) {
            return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.ImageWithParam, { imageParam: { url: this.state.mapThumbUrl } });
        }
        else {
            const palette = this.props.theme.colors.palette;
            return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { style: { backgroundColor: palette.light[200], height: '100%' } },
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_icons_filled_data_placeholder_map__WEBPACK_IMPORTED_MODULE_2__.PlaceholderMapFilled, { color: palette.light[600], size: '100%' })));
        }
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/mapbase.tsx":
/*!*********************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/components/mapbase.tsx ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MapLoadStatus: () => (/* binding */ MapLoadStatus),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config */ "./extensions/widgets/arcgis/arcgis-map/src/config.ts");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/utils.ts");
/* harmony import */ var _multisourcemap_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./multisourcemap-context */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap-context.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/** @jsx jsx */






const Exchange = __webpack_require__(/*! ../assets/icons/exchange.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/exchange.svg");
const DEFAULT_HIGHLIGHT_COLOR = '#00FFFF';
const DEFAULT_HIGHLIGHT_HALO_COLOR = '#00FFFF';
var MapLoadStatus;
(function (MapLoadStatus) {
    MapLoadStatus["Loading"] = "LOADING";
    MapLoadStatus["Loadok"] = "LOADOK";
    MapLoadStatus["LoadError"] = "LOADERROR";
})(MapLoadStatus || (MapLoadStatus = {}));
class MapBase extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.dsManager = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance();
        this.isFirstReceiveMessage = true;
        this.__unmount = false;
        this.debounceUpdateUrlHashParams = () => { };
        this.getInitViewPointForDefaultWebMap = () => {
            const defaultExtent = this.props.defaultMapInfo && this.props.defaultMapInfo.defaultExtent;
            let tempViewPoint = null;
            if (this.props.baseWidgetProps.config.initialMapState && this.props.baseWidgetProps.config.initialMapState.viewPoint) {
                tempViewPoint = this.generateViewPointFromInitialMapState(this.props.baseWidgetProps.config.initialMapState);
            }
            else {
                tempViewPoint = new this.Viewpoint({
                    targetGeometry: new this.Extent({
                        xmin: defaultExtent && defaultExtent.xmin,
                        ymin: defaultExtent && defaultExtent.ymin,
                        xmax: defaultExtent && defaultExtent.xmax,
                        ymax: defaultExtent && defaultExtent.ymax,
                        spatialReference: { wkid: defaultExtent.spatialReference.wkid }
                    })
                });
            }
            return tempViewPoint;
        };
        /**
         * onDataSourceCreated and onCreateDataSourceFailed will not invoked when this.props.isWebMap is true
         * @param dataSource
         */
        this.onDataSourceCreated = (dataSource) => {
            if (dataSource.id === this.props.dataSourceId) {
                const isDsCreateFailedBefore = this.createFailedDataSourceIds[this.props.dataSourceId];
                delete this.createFailedDataSourceIds[this.props.dataSourceId];
                this.mapDs = dataSource;
                if (this.isReadyToCreateJimuMapView()) {
                    this.createJimuMapView();
                    return;
                }
                if (isDsCreateFailedBefore && !this.view && !this.mapCreatingInfo && this.expectedDataSourceInfo && this.expectedDataSourceInfo.dataSourceId === dataSource.id) {
                    console.log(`recreate map because data source ${this.props.dataSourceId} is recreated`);
                    this.cacheLoadModulesAndCreateMapbaseView(this.expectedDataSourceInfo);
                }
            }
        };
        this.onCreateDataSourceFailed = (err) => {
            console.warn('onCreateDataSourceFailed', err);
            this.mapDs = null;
            const dsId = this.props.dataSourceId;
            this.createFailedDataSourceIds[dsId] = true;
            this.setState({
                mapLoadStatus: MapLoadStatus.LoadError
            }, () => {
                this.props.onMapLoaded(dsId, MapLoadStatus.LoadError);
            });
        };
        // This method is used to sync viewpoint between two mapbase of same map widget.
        this.setViewPoint = (viewPoint) => {
            if (this.view && viewPoint) {
                this.view.viewpoint = viewPoint.clone();
            }
        };
        // This method is used to sync viewpoint between two mapbase of same map widget.
        this.getViewPoint = () => {
            return this.view && this.view.viewpoint ? this.view.viewpoint.clone() : null;
        };
        this.getMapLoadStatus = () => {
            return this.state.mapLoadStatus;
        };
        this.getViewType = () => {
            return this.getDsJsonFromDsId(this.props.dataSourceId).type;
        };
        this.queryExtentFromSingleLayerQueryParams = (dataSourceId) => {
            const dataSource = this.dsManager.getDataSource(dataSourceId);
            const queryParams = dataSource.getCurrentQueryParams();
            let layerObjectPromise;
            if (dataSource === null || dataSource === void 0 ? void 0 : dataSource.layer) {
                layerObjectPromise = Promise.resolve(dataSource.layer);
            }
            else {
                layerObjectPromise = dataSource.createJSAPILayerByDataSource().then((layerObject) => Promise.resolve(layerObject));
            }
            return (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)([
                'esri/rest/support/Query',
                'esri/Graphic',
                'esri/geometry/Point'
            ]).then(modules => {
                const [Query, Graphic, Point] = modules;
                const query = new Query();
                query.where = queryParams === null || queryParams === void 0 ? void 0 : queryParams.where;
                return layerObjectPromise.then(layerObject => {
                    return layerObject.queryExtent(query).then(result => {
                        var _a;
                        const extentCenter = (_a = result === null || result === void 0 ? void 0 : result.extent) === null || _a === void 0 ? void 0 : _a.center;
                        const extent = result === null || result === void 0 ? void 0 : result.extent;
                        let singlePointGraphic;
                        if ((result === null || result === void 0 ? void 0 : result.count) === 1 && (layerObject.geometryType === 'point') && extentCenter) {
                            const point = new Point({
                                x: extentCenter.x,
                                y: extentCenter.y,
                                spatialReference: extent.spatialReference
                            });
                            singlePointGraphic = new Graphic({ geometry: point });
                        }
                        return {
                            extent: extent,
                            singlePointGraphic: singlePointGraphic,
                            count: result === null || result === void 0 ? void 0 : result.count,
                            layer: layerObject
                        };
                    });
                });
            });
        };
        this.queryExtentFromQueryParams = (mapBaseView, dataSourceIds, useDataSources) => {
            //const dataSource = this.dsManager.getDataSource(dataSourceId) as FeatureLayerDataSource
            //const queryParams: SqlQueryParams = dataSource.getCurrentQueryParams()
            const useDefaultExtentOfCurrentView = !useDataSources.some(useDataSource => {
                const dataSource = this.dsManager.getDataSource(useDataSource.dataSourceId);
                const queryParams = dataSource.getRuntimeQueryParams();
                // use default extent if all merged SQLs on data source is remvoved.
                const hasQueryWhere = (queryParams === null || queryParams === void 0 ? void 0 : queryParams.where) && queryParams.where !== '1=1';
                if (hasQueryWhere) {
                    return true;
                }
                else {
                    return false;
                }
            });
            if (useDefaultExtentOfCurrentView) {
                const initViewPoint = this.getMapBaseInitViewPoint();
                return Promise.resolve({
                    viewpoint: initViewPoint,
                    useDefaultExtentOfCurrentView: true,
                    singlePointGraphic: null,
                    count: 2,
                    layer: null
                });
            }
            const extentResultPromises = [];
            dataSourceIds.forEach(dataSourceId => {
                extentResultPromises.push(this.queryExtentFromSingleLayerQueryParams(dataSourceId));
            });
            return Promise.all(extentResultPromises).then(results => {
                let fullExtent = null;
                let count = 0;
                if ((results === null || results === void 0 ? void 0 : results.length) === 1) {
                    return results[0];
                }
                else {
                    results.forEach(result => {
                        if (result.extent) {
                            fullExtent = fullExtent ? fullExtent.union(result.extent) : result.extent;
                        }
                        count = count + result.count;
                    });
                    return {
                        extent: fullExtent,
                        singlePointGraphic: null,
                        count: count,
                        layer: null
                    };
                }
            });
        };
        this.debounceUpdateUrlHashParams = jimu_core__WEBPACK_IMPORTED_MODULE_0__.lodash.debounce(() => {
            this.updateUrlHashParams();
        }, 500);
        this.restored = false;
        this.createFailedDataSourceIds = {};
        this.updateExpectedDataSourceInfo();
        const restoreData = this.getRestoreDataFromMS();
        if (restoreData && restoreData.expectedDataSourceInfo.uniqueId === this.expectedDataSourceInfo.uniqueId) {
            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.restoreMapBase)(this, restoreData);
            this.updateRestoreDataToMS(null);
            this.bindMapBaseViewEvent(this.view);
            if (this.view) {
                this.view.isInCaching = false;
                this.view.mapbase = this;
                this.restored = true;
                this.tryFatalErrorRecovery(this.view);
                if (this.view.isMapToolsHidden) {
                    this.view.hideMapTools();
                }
                else {
                    this.view.showMapTools();
                }
            }
        }
        else {
            this.state = {
                dataSourceId: null,
                isBasicModulesLoaded: false,
                mapLoadStatus: MapLoadStatus.Loading
            };
        }
    }
    static getDerivedStateFromProps(nextProps, prevState) {
        if (nextProps.dataSourceId !== prevState.dataSourceId) {
            return {
                dataSourceId: nextProps.dataSourceId,
                mapLoadStatus: MapLoadStatus.Loading
            };
        }
        else {
            return null;
        }
    }
    getStyle() {
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      .esri-view .esri-view-surface:focus::after {
        display: none;
      }
    `;
    }
    render() {
        let useDataSource = null;
        if (this.props.baseWidgetProps.useDataSources) {
            useDataSource = this.props.baseWidgetProps.useDataSources.find((item) => item.dataSourceId === this.props.dataSourceId);
        }
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 h-100 map-base', style: { position: 'relative' }, css: this.getStyle(), ref: ref => { this.widgetContainer = ref; } },
            (this.state.mapLoadStatus === MapLoadStatus.Loading) &&
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 h-100 widget-map-background' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { style: { position: 'absolute', left: '50%', top: '50%' }, className: 'jimu-secondary-loading' })),
            (this.state.mapLoadStatus === MapLoadStatus.LoadError) &&
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 h-100 widget-map-background' },
                    this.getMapSwitchForErrorMap(),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 h-100 d-flex justify-content-center align-items-center' }, this.formatMessage('mapFailure'))),
            !this.props.isDefaultMap && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { style: { position: 'absolute', display: 'none' } },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceComponent, { useDataSource: useDataSource, onDataSourceCreated: this.onDataSourceCreated, onCreateDataSourceFailed: this.onCreateDataSourceFailed }))));
    }
    componentDidMount() {
        this.__unmount = false;
        if (this.widgetContainer.getElementsByClassName('widget-map').length === 0) {
            if (!this.mapContainer) {
                this.mapContainer = document && document.createElement('div');
                this.mapContainer.className = 'w-100 h-100 widget-map mapview-container';
            }
            this.widgetContainer.appendChild(this.mapContainer);
        }
        if (this.props.startLoadModules) {
            this.loadCommonModules();
        }
        if (this.restored) {
            const jimuMapView = this.getJimuMapViewFoView(this.view);
            if (jimuMapView && !jimuMapView.isCached()) {
                jimuMapView.onRestore();
            }
        }
    }
    componentDidUpdate(prevProps) {
        // update the this.expectedDataSourceInfo by the current props
        this.updateExpectedDataSourceInfo();
        if (!this.state.isBasicModulesLoaded) {
            return;
        }
        // TODO: should we check isMapInVisibleArea before this.checkAndHandleIfDataSourceIdPropChange() ?
        // props.isMapInVisibleArea changed
        if (this.view && prevProps.isMapInVisibleArea !== this.props.isMapInVisibleArea && (this.props.baseWidgetProps.useDataSources && this.props.baseWidgetProps.useDataSources.length === 2)) {
            if (this.props.isMapInVisibleArea) {
                this.view.isInCaching = false;
                this.tryFatalErrorRecovery(this.view);
            }
            else {
                this.view.isInCaching = true;
            }
        }
        // the following code is mainly used to check and handle if dataSourceId prop change
        let needCreateNewView = false;
        if (this.view) {
            // this.view created, now need to check if this.view match this.props.dataSourceId or not
            if (this.isViewExpected(this.view)) {
                // data source match this.props.dataSourceId, do nothing
                needCreateNewView = false;
                // this.view is the expected view
                // We call this.tryUpdateCurrentViewByConfigProps() to consume this.props.baseWidgetProps.config change
                this.tryUpdateCurrentViewByConfigProps(false);
                // We call this.checkAndHandleMutableStateProps() to consume this.props.baseWidgetProps.mutableStateProps change
                this.checkAndHandleMutableStateProps();
                return;
            }
            else {
                // data source changed, we need to destroy this.view
                needCreateNewView = true;
            }
        }
        else {
            // this.view not created, we need to check if we are creating the expected view
            if (this.isCreatingExpectedView()) {
                // We are creating the expected view, do nothing
                needCreateNewView = false;
                return;
            }
            else {
                // need to create new view
                needCreateNewView = true;
            }
        }
        if (needCreateNewView) {
            this.destroyCurrentMapbaseView();
            this.cacheLoadModulesAndCreateMapbaseView(this.expectedDataSourceInfo);
        }
    }
    componentWillUnmount() {
        this.__unmount = true;
        if (this.view) {
            this.view.mapbase = null;
        }
        const widgets = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appConfig.widgets;
        if (widgets[this.props.baseWidgetProps.id] && widgets[this.props.baseWidgetProps.id].useDataSources === this.props.baseWidgetProps.useDataSources &&
            this.state.mapLoadStatus !== MapLoadStatus.Loading) {
            // JS API limits only 16 canvas with WebGL context on a html page. Caching the map widget (unmount the canvas from the html tree but don't destroy the view) is a workround.
            // We scroll the page and the map widget is not in the visible area, we need to cache it so we can restore it quickly.
            // We don't destroy the map view here, just cache it to mutable store.
            const restoreData = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getMapBaseRestoreData)(this);
            if (this.view) {
                this.view.isInCaching = true;
            }
            this.updateRestoreDataToMS(restoreData);
            if (this.view) {
                const jimuMapView = this.getJimuMapViewFoView(this.view);
                if (jimuMapView) {
                    jimuMapView.onCache();
                }
            }
        }
        else {
            // Destroy the map view
            this.destroyCurrentMapbaseView();
            this.mapCreatingInfo = null;
            if (this.view && !this.view.destroyed) {
                this.view.container = null;
                this.view = null;
            }
            this.mapDs = null;
        }
    }
    createDataSourceInfo(dataSourceId) {
        let result = null;
        const dataSourceJson = this.getDsJsonFromDsId(dataSourceId);
        if (dataSourceJson && dataSourceJson.id) {
            // data source case2 or data source case3
            const type = dataSourceJson.type || '';
            const itemId = dataSourceJson.itemId || '';
            const dataSourceId = dataSourceJson.id;
            const jimuMapViewId = this.getJimuMapViewId(dataSourceId);
            if (type === jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.DataSourceTypes.WebScene) {
                // user select a web scene
                result = {
                    isDefaultMap: false,
                    isWebMap: false,
                    uniqueId: `webscene-${dataSourceId}-${itemId}`,
                    dataSourceId,
                    jimuMapViewId,
                    dataSourceJson
                };
            }
            else {
                // user select a web map
                result = {
                    isDefaultMap: false,
                    isWebMap: true,
                    uniqueId: `webmap-${dataSourceId}-${itemId}`,
                    dataSourceId,
                    jimuMapViewId,
                    dataSourceJson
                };
            }
        }
        else {
            // data source case1: use default web map
            const dataSourceId = '';
            // TODO: could we use this.getJimuMapViewId('defaultmap') here ?
            const jimuMapViewId = this.getJimuMapViewId(dataSourceId);
            result = {
                isDefaultMap: true,
                isWebMap: true,
                uniqueId: 'webmap-default',
                dataSourceId,
                jimuMapViewId,
                dataSourceJson
            };
        }
        return result;
    }
    getJimuMapViewId(dataSourceId) {
        return (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getJimuMapViewId)(this.props.baseWidgetProps.id, dataSourceId);
    }
    getDsJsonFromDsId(dataSourceId) {
        let result = null;
        if (dataSourceId) {
            result = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appConfig.dataSources[dataSourceId];
        }
        if (!result) {
            result = {};
        }
        return result;
    }
    getCurrentDataSourceJson() {
        // when select a web map or web scene in builder, this.props.dataSourceId is not null, the result is like this
        // {
        //   id: "dataSource_5",
        //   type: "WEB_MAP",
        //   sourceLabel: "China Version 1_2",
        //   itemId: "a2c5449c4c624447bf45d48478b25838",
        //   portalUrl: "https://esridevbeijing.maps.arcgis.com",
        // }
        // when use the default web map in builder, this.props.dataSourceId is null, the result is empty object {}
        return this.getDsJsonFromDsId(this.props.dataSourceId);
    }
    updateExpectedDataSourceInfo() {
        this.expectedDataSourceInfo = this.createDataSourceInfo(this.props.dataSourceId);
    }
    isCurrentViewExpected() {
        return this.isViewExpected(this.view);
    }
    isViewExpected(view) {
        return view && view.dataSourceInfo.uniqueId === this.expectedDataSourceInfo.uniqueId;
    }
    isCreatingExpectedView() {
        return this.mapCreatingInfo && this.isDataSourceInfoExpected(this.mapCreatingInfo.dataSourceInfo);
    }
    isDataSourceInfoExpected(dataSourceInfo) {
        return dataSourceInfo && dataSourceInfo.uniqueId === this.expectedDataSourceInfo.uniqueId;
    }
    /**
     * Consume this.props.baseWidgetProps.config change
     * @param calledWhenViewCreate true means this method is called when view just created, false means this method is called when config props change
     */
    tryUpdateCurrentViewByConfigProps(calledWhenViewCreate) {
        if (!this.view) {
            return;
        }
        const config = this.props.baseWidgetProps.config;
        const preConfig = this.lastUpdateViewConfig;
        this.lastUpdateViewConfig = config;
        // update popup options
        const currPopupEnabled = !config.disablePopUp;
        if (calledWhenViewCreate) {
            // calledWhenViewCreate is true, means tryUpdateCurrentViewByConfigProps is called when view just created, we just set view.popupEnabled to !config.disablePopUp.
            this.view.popupEnabled = currPopupEnabled;
        }
        else {
            // calledWhenViewCreate is false, means tryUpdateCurrentViewByConfigProps is called when config props change, we need to handle config.disablePopUp change.
            const prePopupEnabled = !(preConfig === null || preConfig === void 0 ? void 0 : preConfig.disablePopUp);
            const popupEnabled = !config.disablePopUp;
            // Both Map widget 'disablePopUp' option and JimuMapView.enableClickOpenPopup() can control 'view.popupEnabled'.
            // We should not use `this.view.popupEnabled !== currPopupEnabled` here because we only want to check if Map widget 'disablePopUp' option changed,
            // so we should use `prePopupEnabled !== currPopupEnabled` here.
            if (prePopupEnabled !== popupEnabled) {
                // config.disablePopUp really changed
                this.view.popupEnabled = popupEnabled;
                if (!popupEnabled) {
                    this.view.closePopup();
                }
            }
        }
        if ((config.selectionHighlightColor !== (preConfig === null || preConfig === void 0 ? void 0 : preConfig.selectionHighlightColor)) || (config.selectionHighlightHaloColor !== (preConfig === null || preConfig === void 0 ? void 0 : preConfig.selectionHighlightHaloColor))) {
            // highlight info changes
            const highlightColor = config.selectionHighlightColor || DEFAULT_HIGHLIGHT_COLOR;
            const highlightHaloColor = config.selectionHighlightHaloColor || DEFAULT_HIGHLIGHT_HALO_COLOR;
            const highlightOptions = Object.assign(Object.assign({}, this.view.highlightOptions), { color: new this.Color(highlightColor), haloColor: new this.Color(highlightHaloColor) });
            this.view.highlightOptions = highlightOptions;
        }
        const enableScroll = !config.disableScroll;
        // this.view.navigation is empty sometimes, so we need to check it here.
        if (this.view.navigation) {
            if (this.view.navigation.mouseWheelZoomEnabled !== enableScroll) {
                this.view.navigation.mouseWheelZoomEnabled = enableScroll;
            }
            if (this.view.navigation.browserTouchPanEnabled !== enableScroll) {
                this.view.navigation.browserTouchPanEnabled = enableScroll;
            }
        }
        if (this.view.ui) {
            this.view.ui.components = [];
        }
        const sceneQualityMode = config.sceneQualityMode;
        if (this.isSceneView(this.view)) {
            const sceneView = this.view;
            if (sceneQualityMode && sceneQualityMode !== sceneView.qualityProfile) {
                sceneView.qualityProfile = sceneQualityMode;
            }
        }
    }
    /**
     * Consume this.props.baseWidgetProps.mutableStateProps change
     */
    checkAndHandleMutableStateProps() {
        if (this.view && this.props.baseWidgetProps.mutableStateProps) {
            const jimuMapViewId = this.view.dataSourceInfo.jimuMapViewId;
            const jimuMapView = jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.MapViewManager.getInstance().getJimuMapViewById(jimuMapViewId);
            if (jimuMapView) {
                jimuMapView.whenJimuMapViewLoaded().then(() => {
                    setTimeout(() => {
                        // We don't need to check this.view if null or destroyed here, we do it in this.handleAction()
                        this.handleAction(this.props.baseWidgetProps.mutableStateProps, this.view, jimuMapView);
                        this.isFirstReceiveMessage = false;
                    }, this.isFirstReceiveMessage ? 500 : 0);
                });
            }
        }
    }
    isMapView(view) {
        return view && view.declaredClass === 'esri.views.MapView';
    }
    isSceneView(view) {
        return view && view.declaredClass === 'esri.views.SceneView';
    }
    diffProps(prevProps) {
        const addedKeys = [];
        const removeKeys = [];
        const updatedKeys = [];
        const currKeys = Object.keys(this.props);
        const prevKeys = Object.keys(prevProps);
        const prevKeysMap = {};
        prevKeys.forEach(key => {
            prevKeysMap[key] = true;
        });
        const currKeysMap = {};
        currKeys.forEach(key => {
            currKeysMap[key] = true;
        });
        currKeys.forEach(currKey => {
            if (prevKeysMap[currKey]) {
                if (prevProps[currKey] !== this.props[currKey]) {
                    updatedKeys.push(currKey);
                }
            }
            else {
                addedKeys.push(currKey);
            }
        });
        prevKeys.forEach(prevKey => {
            if (!currKeysMap[prevKey]) {
                removeKeys.push(prevKey);
            }
        });
        return {
            addedKeys,
            removeKeys,
            updatedKeys
        };
    }
    loadCommonModules() {
        return __awaiter(this, void 0, void 0, function* () {
            const modules = yield (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)([
                'esri/geometry/Extent',
                'esri/Viewpoint',
                'esri/portal/Portal',
                'esri/portal/PortalItem',
                'esri/Color'
            ]);
            [
                this.Extent, this.Viewpoint, this.Portal, this.PortalItem, this.Color
            ] = modules;
            if (this.__unmount) {
                return;
            }
            this.setState({
                isBasicModulesLoaded: true
            });
        });
    }
    cacheLoadModulesAndCreateMapbaseView(dataSourceInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.__unmount || this.isCurrentViewExpected() || this.isCreatingExpectedView()) {
                return;
            }
            this.setState({
                mapLoadStatus: MapLoadStatus.Loading
            });
            const mapCreatingInfo = {
                dataSourceInfo
            };
            this.mapCreatingInfo = mapCreatingInfo;
            try {
                if (dataSourceInfo.isWebMap) {
                    // load modules to create MapView
                    if (!this.MapView) {
                        const modules = yield (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)([
                            'esri/geometry/Geometry',
                            'esri/webmap/InitialViewProperties',
                            'esri/Basemap',
                            'esri/layers/TileLayer',
                            'esri/views/MapView',
                            'esri/WebMap'
                        ]);
                        [
                            this.Geometry, this.InitialViewProperties, this.Basemap, this.TileLayer, this.MapView, this.WebMap
                        ] = modules;
                    }
                }
                else {
                    // load modules for create SceneView
                    if (!this.SceneView) {
                        const modules = yield (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)([
                            'esri/views/SceneView',
                            'esri/WebScene'
                        ]);
                        [
                            this.SceneView, this.WebScene
                        ] = modules;
                    }
                }
                if (this.__unmount || this.isCurrentViewExpected() || !this.isDataSourceInfoExpected(mapCreatingInfo.dataSourceInfo)) {
                    return;
                }
                yield this.createMapbaseView(mapCreatingInfo);
            }
            catch (e) {
                console.error('cacheLoadModulesAndCreateMapbaseView error', e);
                if (this.mapCreatingInfo === mapCreatingInfo) {
                    this.setState({
                        mapLoadStatus: MapLoadStatus.LoadError
                    });
                }
            }
            if (this.mapCreatingInfo === mapCreatingInfo) {
                this.mapCreatingInfo = null;
            }
        });
    }
    createMapbaseView(mapCreatingInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const dataSourceInfo = mapCreatingInfo.dataSourceInfo;
            if (this.__unmount || this.isCurrentViewExpected() || !this.isDataSourceInfoExpected(dataSourceInfo)) {
                return;
            }
            // get mapViewOption or sceneViewOption
            let mapViewOption = null;
            let sceneViewOption = null;
            if (dataSourceInfo.isWebMap) {
                // get map view option
                mapViewOption = yield this.getMapViewOptionToCreateMapView(dataSourceInfo);
            }
            else {
                // get scene view option
                sceneViewOption = yield this.getSceneViewOptionToCreateSceneView(dataSourceInfo);
            }
            // need to check view again to avoid new MapView() twice, because we use async function to get mapViewOption
            if (this.__unmount || this.isCurrentViewExpected() || !this.isDataSourceInfoExpected(dataSourceInfo)) {
                return;
            }
            let initUrlHashViewpoint = null;
            if (this.props.baseWidgetProps.isRunAppMode) {
                const hashViewpoint = this.generateViewpointByUrlHashParams(dataSourceInfo.isWebMap);
                if (hashViewpoint) {
                    initUrlHashViewpoint = hashViewpoint.clone();
                    if (mapViewOption) {
                        mapViewOption.viewpoint = hashViewpoint;
                        // Note, we must set snapToZoom to false if we can get hashViewpoint, otherwise the final view.scale is different with hashViewpoint.scale,
                        // because hashViewpoint.scale comes from a float-zoom map and view.scale comes from a int-zoom map.
                        mapViewOption.constraints.snapToZoom = false;
                    }
                    if (sceneViewOption) {
                        sceneViewOption.viewpoint = hashViewpoint;
                    }
                }
            }
            let view = null;
            // create map view or scene view
            if (dataSourceInfo.isWebMap) {
                view = new this.MapView(mapViewOption);
            }
            else {
                view = new this.SceneView(sceneViewOption);
            }
            view.initUrlHashViewpoint = initUrlHashViewpoint;
            const map = view.map;
            // set view.map.originalBasemap
            const setOriginalBasemap = () => {
                if (map.originalBasemap) {
                    return;
                }
                const originalBasemap = map.basemap;
                // originalBasemap maybe null, we need to check originalBasemap is null or not
                if (!originalBasemap) {
                    return;
                }
                if (!originalBasemap.thumbnailUrl) {
                    const mapThumbnailUrl = map.thumbnailUrl;
                    // use map.thumbnailUrl as originalBasemap.thumbnailUrl if originalBasemap.thumbnailUrl is empty
                    if (mapThumbnailUrl) {
                        originalBasemap.thumbnailUrl = mapThumbnailUrl;
                    }
                }
                map.originalBasemap = originalBasemap;
            };
            if (map.basemap) {
                setOriginalBasemap();
            }
            else {
                let watchBasemapHandle = null;
                watchBasemapHandle = map.watch('basemap', () => {
                    // only watch once
                    if (watchBasemapHandle) {
                        watchBasemapHandle.remove();
                    }
                    watchBasemapHandle = null;
                    if (map.basemap) {
                        setOriginalBasemap();
                    }
                });
            }
            view.mapbase = this;
            view.highLightHandles = {};
            view.mapBaseViewEventHandles = {};
            view.extentChangeRelatedWidgetIds = [];
            view.publishExtentChangeMessage = function (stationary, interacive) {
                try {
                    if (view && !view.destroyed) {
                        const mapbase = view.mapbase;
                        if (mapbase && !mapbase.__unmount && mapbase.props && mapbase.props.onExtentChanged) {
                            mapbase.publishExtentChangeMessage(view, stationary, interacive);
                        }
                    }
                }
                catch (e) {
                    console.error('view publish extent change message error', e);
                }
            };
            view.hideMapTools = function () {
                try {
                    view.isMapToolsHidden = true;
                    if (view && !view.destroyed) {
                        const mapbase = view.mapbase;
                        if (mapbase && !mapbase.__unmount && mapbase.props) {
                            if (mapbase.props.onActiveToolInfoChange) {
                                // set no active tool
                                mapbase.props.onActiveToolInfoChange(null);
                            }
                            const multiSourceMapDom = mapbase.props.multiSourceMapDom;
                            if (multiSourceMapDom) {
                                multiSourceMapDom.classList.add('hide-map-tools-layout');
                            }
                        }
                    }
                }
                catch (e) {
                    console.error('view hide map tools error', e);
                }
            };
            view.viewpointHistory = [];
            view.viewpointIndex = -1;
            view.showMapTools = function () {
                try {
                    view.isMapToolsHidden = false;
                    if (view && !view.destroyed) {
                        const mapbase = view.mapbase;
                        if (mapbase && !mapbase.__unmount && mapbase.props) {
                            const multiSourceMapDom = mapbase.props.multiSourceMapDom;
                            if (multiSourceMapDom) {
                                multiSourceMapDom.classList.remove('hide-map-tools-layout');
                            }
                        }
                    }
                }
                catch (e) {
                    console.error('view show map tools error', e);
                }
            };
            if (view.popup) {
                view.popup.spinnerEnabled = false;
            }
            view.dataSourceInfo = dataSourceInfo;
            if (this.view) {
                this.destroyCurrentMapbaseView();
                this.view = null;
            }
            // update this.view
            this.view = view;
            this.mapCreatingInfo = null;
            if (this.isReadyToCreateJimuMapView()) {
                this.createJimuMapView();
            }
            // the following code are same for both map view and scene view
            view.when(() => {
                var _a, _b, _c;
                if (view.viewpoint) {
                    view.viewWhenInitialViewpoint = view.viewpoint.clone();
                    view.lastViewpointUpdateUrlParams = view.viewpoint.clone();
                }
                else {
                    view.viewWhenInitialViewpoint = null;
                    view.lastViewpointUpdateUrlParams = null;
                }
                view.viewWhenTimestamp = Date.now();
                // view.when() is async, we need to check the view is expected or not
                // if the view is not expected again, we don't execute the following logic
                const isViewOk = !view.destroyed && this.view === view && this.isViewExpected(view);
                if (!isViewOk) {
                    return;
                }
                setTimeout(() => {
                    if (!view.destroyed) {
                        // make sure publish extent-change message at least once
                        this.publishExtentChangeMessage(view, true);
                    }
                }, 1000);
                view.watchInteractingHandle = view.watch('interacting', () => {
                    if (view.interacting) {
                        MapBase.lastInteraciveView = view;
                        // We must set view.extentChangeRelatedWidgetIds to empty array, becuase current view is the extent-change sourcer.
                        this.setExtentChangeRelatedWidgetIdsForView(view, []);
                    }
                });
                // MapView always trigger twice extent change event after view when, about 3ms - 80ms after view when.
                // SceneView always trigger 2-5 times extent change event after view when, about 3 - 5000 ms, depends on data.
                view.extentWatchHandle = view.watch('extent', (extent) => {
                    if (!extent) {
                        return;
                    }
                    this.publishExtentChangeMessage(view, false);
                    if (view.stationaryTimerId) {
                        clearTimeout(view.stationaryTimerId);
                        view.stationaryTimerId = null;
                    }
                    // We don't use view.watch('stationary', cb) to check if view is static or not, because the behavior of view.stationary is strange.
                    // Instead, we use a timeout to check if view is static or not.
                    view.stationaryTimerId = setTimeout(() => {
                        view.stationaryTimerId = null;
                        // view is static now
                        // We need to publish extent-change message again when view is static.
                        this.publishExtentChangeMessage(view, true);
                        // Note, make sure we call setExtentChangeRelatedWidgetIdsForView() after publish extent-change message.
                        this.setExtentChangeRelatedWidgetIdsForView(view, []);
                        setTimeout(() => {
                            if (view === MapBase.lastInteraciveView && !view.interacting) {
                                MapBase.lastInteraciveView = null;
                            }
                        }, 1000);
                    }, 200);
                });
                if (!view.fatalErrorWatchHandle) {
                    view.fatalErrorWatchHandle = view.watch('fatalError', (error) => {
                        var _a, _b;
                        if (error) {
                            // Don't use this.props.isMapInVisibleArea to check is map visible or not, because mapbase maybe unmounted and this.props.isMapInVisibleArea is still true.
                            // It is more safe to
                            const shouldRecovery = !view.isInCaching && view.container && view.container.clientWidth > 0 && view.container.clientHeight > 0;
                            const widgetId = ((_b = (_a = this.props) === null || _a === void 0 ? void 0 : _a.baseWidgetProps) === null || _b === void 0 ? void 0 : _b.id) || '';
                            if (shouldRecovery) {
                                console.error(`${widgetId} Fatal Error! View has lost its WebGL context. Attempting to recover it because the view is visible.`);
                                this.tryFatalErrorRecovery(view);
                            }
                            else {
                                console.error(`${widgetId} Fatal Error! View has lost its WebGL context. Don't recover it because the view is not visible.`);
                            }
                        }
                    });
                }
                // after view is loaded, send extent change message
                this.setState({ mapLoadStatus: MapLoadStatus.Loadok }, () => {
                    this.props.onMapLoaded(this.props.dataSourceId, MapLoadStatus.Loadok);
                });
                // If there is an extent is passed from extentMessage before, don't init extent here as this will publish
                // extentMessage and change other mapWidget's extent.
                if (!((_c = (_b = (_a = this.props.baseWidgetProps) === null || _a === void 0 ? void 0 : _a.mutableStateProps) === null || _b === void 0 ? void 0 : _b.zoomToFeatureActionValue) === null || _c === void 0 ? void 0 : _c.value)) {
                    // In 2023.R02, it always calls this.goHome(false) here. We keep it for compatibility.
                    // In the next release, if we can get viewpoint from url hash, we will use it as map initial viewpoint.
                    // For this case (view.initUrlHashViewpoint not empty), we don't call this.goHome(false), because goHome will let the map goto config.initialMapState.
                    if (!view.initUrlHashViewpoint) {
                        this.goHome(false);
                    }
                }
                if (this.isMapView(view)) {
                    // snapToZoom: true means integer zoom, false means float zoom
                    // We need to set the initial value to true for backward compatibility and keep the same behavior with MapViewer
                    // After map inited, we will set snapToZoom to false to get the best synchronization between two map widgets
                    // We use setTimeout here to make sure the above this.goHome(false) is done.
                    setTimeout(() => {
                        view.constraints.snapToZoom = false;
                    }, 0);
                }
            });
            this.bindMapBaseViewEvent(view);
            this.tryUpdateCurrentViewByConfigProps(true);
            this.checkAndHandleMutableStateProps();
        });
    }
    publishExtentChangeMessage(view, stationary, interacive) {
        if (!view) {
            return;
        }
        const nowTime = Date.now();
        if (!view.firstPublishExtentChangeTime) {
            view.firstPublishExtentChangeTime = nowTime;
        }
        const extent = view.extent.clone();
        const viewpoint = view.viewpoint.clone();
        const extentMessage = new jimu_core__WEBPACK_IMPORTED_MODULE_0__.ExtentChangeMessage(this.props.baseWidgetProps.id, extent, viewpoint, stationary);
        extentMessage.publishTime = nowTime;
        extentMessage.interacive = interacive || view.interacting;
        const extentChangeRelatedWidgetIdsOfView = this.getExtentChangeRelatedWidgetIdsOfView(view);
        extentMessage.setRelatedWidgetIds(extentChangeRelatedWidgetIdsOfView);
        extentMessage.addRelatedWidgetId(this.props.baseWidgetProps.id);
        this.props.onExtentChanged(this.props.dataSourceId, extentMessage);
        if (stationary) {
            // handle viewpointHistory
            const currentViewpoint = view.viewpoint.clone();
            if (view.viewpointHistory.length > 0) {
                const indexes = [view.viewpointIndex, view.viewpointIndex - 1, view.viewpointIndex + 1];
                let isSamelikeViewpoint = false;
                const lastViewpointIndex = view.viewpointHistory.length - 1;
                for (let i = 0; i < indexes.length; i++) {
                    const viewpointIndex = indexes[i];
                    if (viewpointIndex >= 0 && viewpointIndex <= lastViewpointIndex) {
                        const viewpoint = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getViewpointInstanceFromHistory)(view, viewpointIndex);
                        if (viewpoint && (0,_utils__WEBPACK_IMPORTED_MODULE_4__.isSamelikeViewpoints)(view, currentViewpoint, viewpoint)) {
                            isSamelikeViewpoint = true;
                            break;
                        }
                    }
                }
                if (!isSamelikeViewpoint) {
                    // current viewpointHistory: view.viewpointIndex point to C
                    // A -> B -> [C] -> D -> E
                    // temp viewpointHistory
                    // A -> B -> [C]
                    view.viewpointHistory.splice(view.viewpointIndex + 1);
                    // new viewpointHistory
                    // A -> B -> C -> [F]
                    view.viewpointHistory.push(currentViewpoint);
                    view.viewpointIndex += 1;
                }
            }
            else {
                // first viewpoint
                view.viewpointHistory.push(currentViewpoint);
                view.viewpointIndex = 0;
            }
            if (view.stationaryCallback) {
                view.stationaryCallback();
            }
        }
        this.debounceUpdateUrlHashParams();
    }
    updateUrlHashParams() {
        if (this.view) {
            const jimuMapView = this.getJimuMapViewFoView(this.view);
            if (jimuMapView && jimuMapView.isActive) {
                // MapView always trigger twice extent change event after view when, about 3ms - 80ms after view when.
                // SceneView always trigger 2-5 times extent change event after view when, about 3 - 5000 ms, depends on data.
                // We don't want to update map url parameters during map initializing, so need to check viewpoint really changed or not.
                const isViewpointChange = !(0,_utils__WEBPACK_IMPORTED_MODULE_4__.isSamelikeViewpoints)(this.view, this.view.viewpoint, this.view.lastViewpointUpdateUrlParams);
                if (isViewpointChange) {
                    // viewpoint really changed
                    (0,_utils__WEBPACK_IMPORTED_MODULE_4__.updateUrlHashParamsForActiveJimuMapView)(jimuMapView);
                }
            }
        }
    }
    generateViewPointFromInitialMapState(initialMapState) {
        // For 2d, initialMapState.extent and initialMapState.viewPoint have some difference.
        // The logic has run long time, for now we don't change its logic for compatibility.
        if (initialMapState.viewType === '2d') {
            return new this.Viewpoint({
                targetGeometry: this.Extent.fromJSON(initialMapState.extent),
                rotation: initialMapState.rotation
            });
        }
        else {
            return this.Viewpoint.fromJSON(initialMapState.viewPoint);
        }
    }
    generateViewpointByUrlHashParams(is2d) {
        let resultViewpoint = null;
        try {
            const isRunAppMode = this.props.baseWidgetProps.isRunAppMode;
            const runtimeUrlHashParams = this.props.baseWidgetProps.runtimeUrlHashParams;
            // if (isRunAppMode && runtimeUrlHashParams && runtimeUrlHashParams.map_state) {
            //   const mapStateJson = JSON.parse(runtimeUrlHashParams.map_state)
            //   const viewpointJson = mapStateJson.viewpoint
            //   const extentJson = mapStateJson.extent
            //   if (viewpointJson && extentJson) {
            //     const viewpoint = this.Viewpoint.fromJSON(viewpointJson)
            //     const extent = this.Extent.fromJSON(extentJson)
            //     if (viewpoint && extent) {
            //       const viewType = is2d ? '2d' : '3d'
            //       const rotation = viewpoint.rotation ?? 0
            //       const initialMapState: ImmutableObject<InitialMapState> = Immutable({
            //         viewPoint: viewpointJson,
            //         viewType,
            //         extent: extentJson,
            //         rotation
            //       })
            //       resultViewpoint = this.generateViewPointFromInitialMapState(initialMapState)
            //     }
            //   }
            // }
            if (isRunAppMode && runtimeUrlHashParams && runtimeUrlHashParams.map_state) {
                const mapStateJson = JSON.parse(runtimeUrlHashParams.map_state);
                const viewpointJson = mapStateJson.viewpoint;
                if (viewpointJson) {
                    resultViewpoint = this.Viewpoint.fromJSON(viewpointJson);
                }
            }
        }
        catch (e) {
            console.error('parse map_state from url hash params error', e);
            resultViewpoint = null;
        }
        return resultViewpoint;
    }
    /**
     * This method create web map or web scene by data source. This method doesn't consider default web map case.
     * @param dataSourceInfo
     * @returns
     */
    createWebMapOrWebSceneByDataSource(dataSourceInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            let webMapOrWebScene = null;
            const MapClass = dataSourceInfo.isWebMap ? this.WebMap : this.WebScene;
            const dataSourceJson = dataSourceInfo.dataSourceJson;
            if (dataSourceJson.portalUrl) {
                // create web map or web scene for portal
                const portal = new this.Portal({
                    url: jimu_core__WEBPACK_IMPORTED_MODULE_0__.portalUrlUtils.getPlatformUrlByOrgUrl(dataSourceJson.portalUrl)
                });
                webMapOrWebScene = new MapClass({
                    portalItem: new this.PortalItem({
                        id: dataSourceJson.itemId,
                        portal: portal
                    })
                });
            }
            else {
                // create web map or web scene for arcgis online
                webMapOrWebScene = new MapClass({
                    portalItem: new this.PortalItem({
                        id: dataSourceJson.itemId
                    })
                });
            }
            if (jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getWhetherUseProxy()) {
                yield webMapOrWebScene.load();
                yield webMapOrWebScene.when();
                // set proxy url for layers and tables
                const allLayers = webMapOrWebScene.allLayers.toArray();
                const tables = webMapOrWebScene.tables ? webMapOrWebScene.tables.toArray() : [];
                const layersAndTables = allLayers.concat(tables);
                layersAndTables.forEach(layer => {
                    const sourceUrl = jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getUrlByLayer(layer);
                    if (!sourceUrl) {
                        return;
                    }
                    const proxyUrl = jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getDataSourceProxyUrl(sourceUrl);
                    if (proxyUrl) {
                        layer.url = proxyUrl;
                        // The following code is the workaround to fix JS API 4.28 issue. Need to be replaced with request interceptor in next release.
                        const portalItem = layer.portalItem;
                        if (portalItem && portalItem.when) {
                            portalItem.when(() => {
                                // After execute 'layer.url = proxyUrl', layer.url maybe still different with proxyUrl, e.g. proxyUrl is 'xxx/featureserver/0', but the final layer.url is 'xxx/featureserver'.
                                // so we use layer.url here, not proxyUrl.
                                portalItem.url = layer.url;
                                if (portalItem.sourceJSON) {
                                    portalItem.sourceJSON.url = layer.url;
                                }
                            });
                        }
                    }
                });
            }
            return webMapOrWebScene;
        });
    }
    getDefaultWebMap() {
        const defaultExtent = this.props.defaultMapInfo && this.props.defaultMapInfo.defaultExtent;
        const tempViewPoint = new this.Viewpoint({
            targetGeometry: new this.Extent({
                xmin: defaultExtent && defaultExtent.xmin,
                ymin: defaultExtent && defaultExtent.ymin,
                xmax: defaultExtent && defaultExtent.xmax,
                ymax: defaultExtent && defaultExtent.ymax,
                spatialReference: { wkid: defaultExtent.spatialReference.wkid }
            })
        });
        const defaultWebmap = new this.WebMap({
            portalItem: {
                id: this.props.defaultMapInfo.defaultMapId,
                portal: {
                    url: this.props.baseWidgetProps.portalUrl
                }
            },
            initialViewProperties: new this.InitialViewProperties({
                spatialReference: defaultExtent && defaultExtent.spatialReference,
                viewpoint: tempViewPoint
            })
        });
        return defaultWebmap;
    }
    getMapViewOptionToCreateMapView(dataSourceInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            let mapViewOption;
            const initialMapState = this.props.baseWidgetProps.config.initialMapState;
            if (this.props.isDefaultMap) {
                const defaultMap = this.getDefaultWebMap();
                mapViewOption = {
                    map: defaultMap,
                    container: this.mapContainer,
                    viewpoint: this.getInitViewPointForDefaultWebMap()
                };
            }
            else {
                const webMap = yield this.createWebMapOrWebSceneByDataSource(dataSourceInfo);
                if (initialMapState) {
                    mapViewOption = {
                        map: webMap,
                        container: this.mapContainer,
                        viewpoint: initialMapState && this.generateViewPointFromInitialMapState(initialMapState)
                    };
                }
                else {
                    mapViewOption = {
                        map: webMap,
                        container: this.mapContainer
                    };
                }
                const highlightColor = this.props.baseWidgetProps.config.selectionHighlightColor || DEFAULT_HIGHLIGHT_COLOR;
                const highlightHaloColor = this.props.baseWidgetProps.config.selectionHighlightHaloColor || DEFAULT_HIGHLIGHT_HALO_COLOR;
                mapViewOption.highlightOptions = {
                    color: new this.Color(highlightColor),
                    haloColor: new this.Color(highlightHaloColor)
                };
            }
            mapViewOption.popup = {
                defaultPopupTemplateEnabled: true
            };
            mapViewOption.constraints = {
                // snapToZoom: true means integer zoom, false means float zoom
                // We need to set the initial value to true for backward compatibility and keep the same behavior with MapViewer
                // After map inited, we will set snapToZoom to false to get the best synchronization between two map widgets
                snapToZoom: true
            };
            // Set timeZone to 'system' for compatibility.
            mapViewOption.timeZone = 'system';
            if (!window.jimuConfig.isInBuilder) {
                if (this.props.baseWidgetProps.queryObject[this.props.baseWidgetProps.id]) {
                    const extentStr = this.props.baseWidgetProps.queryObject[this.props.baseWidgetProps.id].substr('extent='.length);
                    let extent;
                    try {
                        extent = new this.Extent(JSON.parse(extentStr));
                    }
                    catch (err) {
                        console.error('Bad extent URL parameter.');
                    }
                    if (extent) {
                        mapViewOption.extent = extent;
                    }
                }
            }
            return mapViewOption;
        });
    }
    getSceneViewOptionToCreateSceneView(dataSourceInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const webScene = yield this.createWebMapOrWebSceneByDataSource(dataSourceInfo);
            const mapViewOption = {
                map: webScene,
                container: this.mapContainer,
                popup: {
                    defaultPopupTemplateEnabled: true
                }
            };
            const widgetConfig = this.props.baseWidgetProps.config;
            const initialMapState = widgetConfig.initialMapState;
            if (initialMapState) {
                mapViewOption.viewpoint = initialMapState && this.generateViewPointFromInitialMapState(initialMapState);
            }
            const highlightColor = widgetConfig.selectionHighlightColor || DEFAULT_HIGHLIGHT_COLOR;
            const highlightHaloColor = widgetConfig.selectionHighlightHaloColor || DEFAULT_HIGHLIGHT_HALO_COLOR;
            mapViewOption.highlightOptions = {
                color: new this.Color(highlightColor),
                haloColor: new this.Color(highlightHaloColor)
            };
            const sceneQualityMode = widgetConfig.sceneQualityMode;
            if (sceneQualityMode && sceneQualityMode !== _config__WEBPACK_IMPORTED_MODULE_1__.SceneQualityMode.auto) {
                mapViewOption.qualityProfile = sceneQualityMode;
            }
            else {
                // use 'low' as default value
                mapViewOption.qualityProfile = _config__WEBPACK_IMPORTED_MODULE_1__.SceneQualityMode.low;
            }
            return mapViewOption;
        });
    }
    bindMapBaseViewEvent(view) {
        if (view) {
            this.releaseMapbaseViewEventHandles(view);
            view.mapBaseViewEventHandles.click = view.on('click', () => {
                this.releaseHighLightHandles(view);
            });
        }
    }
    isReadyToCreateJimuMapView() {
        if (this.view) {
            if (this.props.isDefaultMap) {
                // Don't need data source if use default map.
                return true;
            }
            else {
                return this.mapDs && this.mapDs.id === this.props.dataSourceId;
            }
        }
        return false;
    }
    getJimuMapViewFoView(view) {
        var _a;
        const jimuMapViewId = (_a = view === null || view === void 0 ? void 0 : view.dataSourceInfo) === null || _a === void 0 ? void 0 : _a.jimuMapViewId;
        if (jimuMapViewId) {
            const jimuMapView = jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.MapViewManager.getInstance().getJimuMapViewById(jimuMapViewId);
            return jimuMapView;
        }
        return null;
    }
    createJimuMapView() {
        if (!this.isReadyToCreateJimuMapView()) {
            return;
        }
        const view = this.view;
        // If dataSourceId is null, make sure it converts to empty string.
        const dataSourceId = this.props.dataSourceId || '';
        const useUrlHashLayersVisibility = this.props.baseWidgetProps.isRunAppMode;
        jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.MapViewManager.getInstance().createJimuMapView({
            mapWidgetId: this.props.baseWidgetProps.id,
            dataSourceId,
            view,
            isEnablePopup: this.props.baseWidgetProps.config && !this.props.baseWidgetProps.config.disablePopUp,
            mapViewManager: jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.MapViewManager.getInstance(),
            useUrlHashLayersVisibility
        });
        view.when(() => {
            const jimuMapViewId = view.dataSourceInfo.jimuMapViewId;
            const jimuMapView = jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.MapViewManager.getInstance().getJimuMapViewById(jimuMapViewId);
            if (jimuMapView) {
                if (jimuMapView.view) {
                    jimuMapView.whenJimuMapViewLoaded().then(() => {
                        if (!jimuMapView.view) {
                            jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.MapViewManager.getInstance().destroyJimuMapView(jimuMapViewId);
                            return;
                        }
                        if (this.isViewExpected(view)) {
                            if (this.props.onJimuMapViewCreated) {
                                this.props.onJimuMapViewCreated(jimuMapView);
                            }
                        }
                    });
                }
                else {
                    jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.MapViewManager.getInstance().destroyJimuMapView(jimuMapViewId);
                }
            }
        });
    }
    destroyCurrentMapbaseView() {
        if (this.view) {
            this.destroyMapbaseView(this.view);
        }
        // Note, don't set this.mapDs to null here.
        // Consider this case:
        // We create a new Mapbase instance, onDataSourceCreated callback is quickly, then we get this.mapDs.
        // Then componentDidMount is invoked for some reason (e.g. this.isBasicModulesLoaded changed from false to true),
        // and we need to call this method to destroy this.view.
        // So, if we set this.mapDs to null, we will never get this.mapDs,
        // and this.isReadyToCreateJimuMapView() always return false, then we can't create jimu map view.
        this.view = null;
    }
    destroyMapbaseView(view) {
        if (view) {
            // release handles
            if (view.watchInteractingHandle) {
                view.watchInteractingHandle.remove();
                view.watchInteractingHandle = null;
            }
            if (view.extentWatchHandle) {
                view.extentWatchHandle.remove();
                view.extentWatchHandle = null;
            }
            if (view.fatalErrorWatchHandle) {
                view.fatalErrorWatchHandle.remove();
                view.fatalErrorWatchHandle = null;
            }
            if (view.stationaryTimerId) {
                clearTimeout(view.stationaryTimerId);
                view.stationaryTimerId = null;
            }
            this.releaseHighLightHandles(view);
            this.releaseMapbaseViewEventHandles(view);
        }
        const jimuMapViewId = view.dataSourceInfo.jimuMapViewId;
        if (jimuMapViewId) {
            jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.MapViewManager.getInstance().destroyJimuMapView(jimuMapViewId);
        }
        if (!view.destroyed) {
            view.destroy();
        }
    }
    releaseHighLightHandles(view) {
        if (view.highLightHandles) {
            const keys = Object.keys(view.highLightHandles);
            for (const key of keys) {
                view.highLightHandles[key].remove();
            }
        }
        view.highLightHandles = {};
    }
    releaseMapbaseViewEventHandles(view) {
        if (view.mapBaseViewEventHandles) {
            const keys = Object.keys(view.mapBaseViewEventHandles);
            for (const key of keys) {
                view.mapBaseViewEventHandles[key].remove();
            }
        }
        view.mapBaseViewEventHandles = {};
    }
    getRestoreDataFromMS() {
        const basicKey = this.getRestoreDataKey();
        const restoreData = jimu_core__WEBPACK_IMPORTED_MODULE_0__.MutableStoreManager.getInstance().getStateValue([this.props.baseWidgetProps.id, 'restoreData', basicKey]);
        return restoreData;
    }
    updateRestoreDataToMS(restoreData) {
        const basicKey = this.getRestoreDataKey();
        jimu_core__WEBPACK_IMPORTED_MODULE_0__.MutableStoreManager.getInstance().updateStateValue(this.props.baseWidgetProps.id, `restoreData.${basicKey}`, restoreData);
    }
    getRestoreDataKey() {
        return `${this.props.baseWidgetProps.id}-restoreData-${this.props.dataSourceId}`;
    }
    /**
     * This method is called when user clicks the map thubnail in map setting page and change the config.initialMapDataSourceID.
     * @param useAmination
     */
    goHome(useAmination) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.getDsJsonFromDsId(this.props.dataSourceId)) {
                return;
            }
            const widgets = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appConfig.widgets;
            if (this.view && widgets[this.props.baseWidgetProps.id]) {
                const initViewPoint = this.getMapBaseInitViewPoint();
                if (initViewPoint) {
                    // TODO: maybe need to set view.constraints.snapToZoom to true before call view.goTo() and reset it to false after view.goTo() is done.
                    return this.view.goTo(initViewPoint, {
                        animate: useAmination
                    });
                }
            }
        });
    }
    getMapBaseInitViewPoint() {
        var _a, _b;
        if (this.props.isDefaultMap) {
            return this.getInitViewPointForDefaultWebMap();
        }
        else {
            const initialMapState = this.props.baseWidgetProps.config.initialMapState;
            if (initialMapState) {
                return this.generateViewPointFromInitialMapState(initialMapState);
            }
            else {
                if (this.view) {
                    const map = this.view.map;
                    return (_b = (_a = map === null || map === void 0 ? void 0 : map.initialViewProperties) === null || _a === void 0 ? void 0 : _a.viewpoint) === null || _b === void 0 ? void 0 : _b.clone();
                }
            }
        }
    }
    formatMessage(id) {
        return this.props.baseWidgetProps.intl.formatMessage({ id: id, defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_3__.defaultMessages[id] });
    }
    handleDisableWheel() {
        this.widgetContainer.style.pointerEvents = 'none';
        setTimeout(() => {
            this.widgetContainer.style.pointerEvents = 'auto';
        }, 50);
    }
    getMapSwitchForErrorMap() {
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_multisourcemap_context__WEBPACK_IMPORTED_MODULE_5__.MultiSourceMapContext.Consumer, null, ({ isShowMapSwitchBtn, dataSourceIds, activeDataSourceId, switchMap }) => ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'mapswitch-container', style: {
                display: isShowMapSwitchBtn ? 'block' : 'none',
                marginBottom: this.props.widthBreakpoint === 'xsmall' ? 10 : 0
            } },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { onClick: (e) => { e.preventDefault(); switchMap(); }, className: 'w-100 h-100 esri-widget--button' },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_3__.Icon, { icon: Exchange, width: 16, height: 16, className: 'mapswitch-icon' }))))));
    }
    /**
     * handle message/action.
     */
    handleAction(mutableStateProps, mapBaseView, jimuMapView) {
        if (!mapBaseView || mapBaseView.destroyed) {
            return;
        }
        // consume mutableStateProps.zoomToFeatureActionValue
        this.handleActionForZoomToFeatureActionValue(mutableStateProps, mapBaseView);
        // consume mutableStateProps.panToActionValue
        this.handleActionForPanToActionValue(mutableStateProps, mapBaseView);
        // consume mutableStateProps.newFeatureSetActionValue
        this.handleActionForNewFeatureSetActionValue(mutableStateProps, mapBaseView);
        // consume mutableStateProps.changedFeatureSetActionValue
        this.handleActionForChangedFeatureSetActionValue(mutableStateProps, mapBaseView);
        // consume mutableStateProps.selectFeatureActionValue
        this.handleActionForSelectFeatureActionValue(mutableStateProps, mapBaseView);
        // consume flashActionValue and filterActionValue
        this.handleActionForFlashActionValueAndFilterActionValue(mutableStateProps, mapBaseView);
        // handle show data on map action
        this.handleActionForShowOnMapDatas(mutableStateProps, jimuMapView);
        // handle add data to map action
        this.handleActionForAddToMapDatas(mutableStateProps, jimuMapView);
    }
    getExtentChangeRelatedWidgetIdsOfView(view) {
        let result = [];
        if (view) {
            const relatedWidgetIds = view.extentChangeRelatedWidgetIds || [];
            // We need to clone the relatedWidgetIds.
            result = relatedWidgetIds.slice();
        }
        return result;
    }
    setExtentChangeRelatedWidgetIdsForView(view, _relatedWidgetIds) {
        if (view) {
            const relatedWidgetIds = _relatedWidgetIds || [];
            // We need to clone the relatedWidgetIds.
            view.extentChangeRelatedWidgetIds = relatedWidgetIds.slice();
        }
    }
    tryFatalErrorRecovery(view) {
        if (view) {
            view.tryFatalErrorRecovery();
        }
    }
    handleActionForZoomToFeatureActionValue(mutableStateProps, mapBaseView) {
        if (!mutableStateProps.zoomToFeatureActionValue) {
            return;
        }
        const receiveMessageTime = Date.now();
        const zoomToFeatureActionValue = mutableStateProps.zoomToFeatureActionValue;
        const relatedWidgetIds = mutableStateProps.zoomToFeatureActionValue.relatedWidgets || [];
        if (relatedWidgetIds && relatedWidgetIds.includes(this.props.baseWidgetProps.id)) {
            // avoid endless loop
            this.props.onMutableStatePropsChanged(this.props.dataSourceId, 'zoomToFeatureActionValue', null);
        }
        else {
            const zoomToFeatureInternalValue = zoomToFeatureActionValue.value;
            if (zoomToFeatureInternalValue.type === 'zoom-to-extent') {
                // ZoomToExtentInternalValue
                const nowTime = Date.now();
                mapBaseView.lastZoomToExtentTime = nowTime;
                // map widget1 extent chagnes and map widget2 needs to sync the extent by message action.
                // Finally, it calls view.goTo(extent)
                // Consider this case:
                // On app load:
                // 1. Both map widget1 and map widget2 set zoom-to action for each other.
                // 2. The initial extent of map widget1 is extent1 and the initial extent of map widget2 is extent2.
                // 3. map widget1 first publish extent-change message after the view is ready.
                // 4. Then map widget2 publish extent-change message.
                // 5. Then map widget2 receive message from map widget1 and call handleAction.
                // 6. Then map widget1 receive message from map widget2 and call handleAction.
                // At last, the extent of map widget1 is extent2 and the extent of map widget2 is extent1. This is not the expected result.
                // To avoid the above case, we need to stop the step6 because map widget1 first publish message.
                let isAboveCase = false;
                if (mapBaseView.firstPublishExtentChangeTime) {
                    if ((nowTime - mapBaseView.firstPublishExtentChangeTime) <= 2000) {
                        if (mapBaseView.firstPublishExtentChangeTime <= zoomToFeatureInternalValue.publishTime) {
                            if (!zoomToFeatureInternalValue.interacive) {
                                // #14391, if extentMessage.interacive is true, means the extent comes from a interactiving map and needs to sync viewpoint with the interactiving map
                                if ((0,_utils__WEBPACK_IMPORTED_MODULE_4__.isTwoWidgetsMutuallyExtentChange)(this.props.baseWidgetProps.id, zoomToFeatureInternalValue.publishWidgetId)) {
                                    isAboveCase = true;
                                }
                            }
                        }
                    }
                }
                // If mapBaseView is the last interactive view, it means mapBaseView is the extent-change source, we should ignore the zoom-to-extent message.
                if (!isAboveCase && mapBaseView !== MapBase.lastInteraciveView) {
                    const viewpoint = zoomToFeatureInternalValue.viewpoint;
                    const extent = zoomToFeatureInternalValue.extent;
                    const stationary = zoomToFeatureInternalValue.stationary;
                    this.setExtentChangeRelatedWidgetIdsForView(mapBaseView, relatedWidgetIds);
                    const viewSR = mapBaseView.spatialReference;
                    // viewpoint has high priority than exent, because it contains more information
                    if (viewpoint) {
                        // update view by viewpoint
                        if ((0,_utils__WEBPACK_IMPORTED_MODULE_4__.isNeedProjectViewpoint)(viewpoint, viewSR)) {
                            if (stationary) {
                                // only project the viewpoint when map is static
                                (0,_utils__WEBPACK_IMPORTED_MODULE_4__.projectViewpoint)(viewpoint, viewSR).then((projectedViewpoint) => {
                                    // Consider this case(#16423):
                                    // 1. handleActionForZoomToFeatureActionValue receive message at time1, the message viewpoint is viewpoint1
                                    // 2. the viewpoint needs to be project, then send http request to project the viewpoint1, this async step maybe take long time
                                    // 3. then JimuMapView needs to update viewpoint to viewpoint2 by url data_id (sync step) in JimuMapView.moveFeatureToCenter() at time2
                                    // 4. then the async step2 is done at time3, and udpate viewpoint by the projected viewpoint1, finally the viewpoint is the projected viewpoint1
                                    // The step4 is wrong, because viewpoint2 of step3 is the new one, and the projected viewpoint1 is stale.
                                    // To avoid this case, we should check projectedViewpoint is fresh or stale.
                                    const isProjectedViewpointStale = mapBaseView.receiveMessageTimeOfLastViewUpdate && mapBaseView.receiveMessageTimeOfLastViewUpdate > receiveMessageTime;
                                    if (!isProjectedViewpointStale) {
                                        mapBaseView.viewpoint = projectedViewpoint;
                                    }
                                });
                            }
                        }
                        else {
                            mapBaseView.viewpoint = viewpoint;
                        }
                    }
                    else {
                        // TODO: need to remove the following extent logic
                        // update view by extent
                        if ((0,_utils__WEBPACK_IMPORTED_MODULE_4__.isNeedProjectSpatialReference)(extent.spatialReference, viewSR)) {
                            if (stationary) {
                                // only project the extent when map is static
                                (0,_utils__WEBPACK_IMPORTED_MODULE_4__.projectGeometries)([extent], viewSR).then((projectedGeometries) => {
                                    const projectedExtent = projectedGeometries[0];
                                    mapBaseView.goTo(projectedExtent);
                                });
                            }
                        }
                        else {
                            mapBaseView.goTo(extent, { animate: false });
                        }
                    }
                }
            }
            else if (zoomToFeatureInternalValue.type === 'zoom-to-query-params') {
                // ZoomToQueryParamsInternalValue
                this.queryExtentFromQueryParams(mapBaseView, zoomToFeatureInternalValue.dataSourceIds, zoomToFeatureInternalValue.useDataSources).then((result) => {
                    let target;
                    if (result.count === 0) {
                        return;
                    }
                    else if (result.count === 1 && (result === null || result === void 0 ? void 0 : result.singlePointGraphic)) {
                        target = {
                            graphics: [result === null || result === void 0 ? void 0 : result.singlePointGraphic],
                            layer: result === null || result === void 0 ? void 0 : result.layer
                        };
                    }
                    else {
                        target = result === null || result === void 0 ? void 0 : result.extent;
                    }
                    this.setExtentChangeRelatedWidgetIdsForView(mapBaseView, relatedWidgetIds);
                    // Because of 'zoomToUtils' does not support 'viewpoint', temporary code for using default viewpoint of sceneView.
                    if (result.useDefaultExtentOfCurrentView) {
                        mapBaseView.goTo(result.viewpoint);
                    }
                    else {
                        jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.zoomToUtils.zoomTo(mapBaseView, target, zoomToFeatureInternalValue.zoomToOption);
                    }
                });
            }
            else if (zoomToFeatureInternalValue.type === 'zoom-to-array-graphics') {
                // ZoomToArrayGraphicsInternalValue
                this.setExtentChangeRelatedWidgetIdsForView(mapBaseView, relatedWidgetIds);
                jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.zoomToUtils.zoomTo(mapBaseView, zoomToFeatureInternalValue.arrayFeatures, zoomToFeatureInternalValue.zoomToOption);
            }
            else if (zoomToFeatureInternalValue.type === 'zoom-to-layers') {
                // ZoomToLayersInternalValue
                const dataSourceIds = zoomToFeatureInternalValue.dataSourceIds;
                (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getLayersFromDataSourceIds)(dataSourceIds).then(layers => {
                    this.setExtentChangeRelatedWidgetIdsForView(mapBaseView, relatedWidgetIds);
                    jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.zoomToUtils.zoomTo(mapBaseView, layers, zoomToFeatureInternalValue.zoomToOption);
                });
            }
            else {
                // zoom-to-graphics
                const dataSource = this.dsManager.getDataSource(zoomToFeatureInternalValue.dataSourceId);
                let layerPromise;
                if (dataSource === null || dataSource === void 0 ? void 0 : dataSource.layer) {
                    layerPromise = Promise.resolve(dataSource.layer);
                }
                else if (dataSource === null || dataSource === void 0 ? void 0 : dataSource.createJSAPILayerByDataSource) {
                    layerPromise = dataSource.createJSAPILayerByDataSource();
                }
                else {
                    layerPromise = Promise.resolve(null);
                }
                layerPromise.then(layer => {
                    const originalGraphics = zoomToFeatureInternalValue.features || [];
                    (0,_utils__WEBPACK_IMPORTED_MODULE_4__.processZoomToFeatures)(mapBaseView, layer, originalGraphics).then(handledGraphics => {
                        let zoomToTarget = null;
                        if (layer) {
                            zoomToTarget = {
                                layer,
                                graphics: handledGraphics
                            };
                        }
                        else {
                            zoomToTarget = handledGraphics;
                        }
                        if (!zoomToFeatureInternalValue.zoomToOption) {
                            zoomToFeatureInternalValue.zoomToOption = {};
                        }
                        this.setExtentChangeRelatedWidgetIdsForView(mapBaseView, relatedWidgetIds);
                        zoomToFeatureInternalValue.zoomToOption.queryParams = ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.getCurrentQueryParams) && dataSource.getCurrentQueryParams()) || '';
                        jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.zoomToUtils.zoomTo(mapBaseView, zoomToTarget, zoomToFeatureInternalValue.zoomToOption);
                    });
                });
            }
            this.props.onMutableStatePropsChanged(this.props.dataSourceId, 'zoomToFeatureActionValue', null);
        }
    }
    handleActionForPanToActionValue(mutableStateProps, mapBaseView) {
        var _a;
        if (!mutableStateProps.panToActionValue) {
            return;
        }
        const relatedWidgetIds = mutableStateProps.panToActionValue.relatedWidgets || [];
        const panToType = (_a = mutableStateProps.panToActionValue.value) === null || _a === void 0 ? void 0 : _a.type;
        if (relatedWidgetIds && relatedWidgetIds.includes(this.props.baseWidgetProps.id)) {
            // avoid endless loop
            this.props.onMutableStatePropsChanged(this.props.dataSourceId, 'panToActionValue', null);
        }
        else if (panToType === 'pan-to-query-params') {
            const panToValue = mutableStateProps.panToActionValue.value;
            this.queryExtentFromQueryParams(mapBaseView, panToValue.dataSourceIds, panToValue.useDataSources).then((result) => {
                var _a, _b, _c;
                // Because of 'panToGeometry' method does not support 'viewpoint', temporary code for using default viewpoint of sceneView.
                if (result.useDefaultExtentOfCurrentView) {
                    const targetGeometry = ((_b = (_a = result === null || result === void 0 ? void 0 : result.viewpoint) === null || _a === void 0 ? void 0 : _a.camera) === null || _b === void 0 ? void 0 : _b.position) || ((_c = result === null || result === void 0 ? void 0 : result.viewpoint) === null || _c === void 0 ? void 0 : _c.targetGeometry);
                    this.panToGeometry([targetGeometry], mapBaseView, relatedWidgetIds);
                }
                else {
                    this.panToGeometry([result === null || result === void 0 ? void 0 : result.extent], mapBaseView, relatedWidgetIds);
                }
            });
        }
        else if (panToType === 'pan-to-layer') {
            const panToValue = mutableStateProps.panToActionValue.value;
            const dataSource = this.dsManager.getDataSource(panToValue.dataSourceId);
            let layerPromise;
            if (dataSource === null || dataSource === void 0 ? void 0 : dataSource.layer) {
                layerPromise = Promise.resolve(dataSource.layer);
            }
            else if (dataSource === null || dataSource === void 0 ? void 0 : dataSource.createJSAPILayerByDataSource) {
                layerPromise = dataSource.createJSAPILayerByDataSource();
            }
            else {
                layerPromise = Promise.resolve(null);
            }
            layerPromise.then(layer => {
                let queryParams = null;
                if (dataSource) {
                    if (dataSource.getCurrentQueryParams) {
                        queryParams = dataSource.getCurrentQueryParams();
                    }
                }
                jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.zoomToUtils.layerExtent(mapBaseView, layer, queryParams).then(layerExtent => {
                    if (layerExtent) {
                        this.panToGeometry([layerExtent], mapBaseView, []);
                    }
                });
            });
        }
        else if (panToType === 'pan-to-layers') {
            const panToValue = mutableStateProps.panToActionValue.value;
            const dataSourceIds = panToValue.dataSourceIds;
            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getLayersFromDataSourceIds)(dataSourceIds).then(layers => {
                const extentPromises = [];
                layers.forEach(layer => {
                    if (layer) {
                        extentPromises.push(jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.zoomToUtils.layerExtent(mapBaseView, layer));
                    }
                });
                let fullExtent = null;
                return Promise.all(extentPromises).then(extents => {
                    extents.forEach(extent => {
                        if (extent) {
                            fullExtent = fullExtent ? fullExtent.union(extent) : extent;
                        }
                    });
                    if (fullExtent) {
                        this.panToGeometry([fullExtent], mapBaseView, []);
                    }
                });
            });
        }
        else if (panToType === 'pan-to-geometries') {
            const panToValue = mutableStateProps.panToActionValue.value;
            this.panToGeometry(panToValue.geometries, mapBaseView, relatedWidgetIds);
        }
        else if (panToType === 'pan-to-extent') {
            // map widget1 extent changes and map widget2 needs to sync the extent by message action.
            // Finally, it calls view.goTo(extent.center).
            // Consider this case:
            // 1. Both map widget1 and map widget2 set pan-to action for each other.
            // 2. The initial extent of map widget1 is extent1 and the initial extent of map widget2 is extent2.
            // 3. map widget1 first publish extent-change message after the view is ready.
            // 4. Then map widget2 publish extent-change message.
            // 5. Then map widget2 receive message from map widget1 and call handleAction.
            // 6. Then map widget1 receive message from map widget2 and call handleAction.
            // At last, the extent of map widget1 is extent2 and the extent of map widget2 is extent1. This is not the expected result.
            // To avoid the above case, we need to stop the step6 because map widget1 first publish message.
            let isAboveCase = false;
            const nowTime = Date.now();
            if (mapBaseView.firstPublishExtentChangeTime) {
                if ((nowTime - mapBaseView.firstPublishExtentChangeTime) <= 2000) {
                    if (mapBaseView.firstPublishExtentChangeTime <= mutableStateProps.panToActionValue.value.publishTime) {
                        if ((0,_utils__WEBPACK_IMPORTED_MODULE_4__.isTwoWidgetsMutuallyExtentChange)(this.props.baseWidgetProps.id, mutableStateProps.panToActionValue.value.publishWidgetId)) {
                            isAboveCase = true;
                        }
                    }
                }
            }
            // Consider this case:
            // 1. We have 4 map widgets. Here are the actions.
            // 2. Widget1 -> zoom to -> Widget2 -> zoom to -> Widget4
            // 3. Widget1 -> zoom to -> Widget3 -> pan to -> Widget4
            // 4. We move the map of widget1, finally widget4 will receive zoomTo and panTo actions serially, like zoomTo, panTo, zoomTo, panTo, ...
            // 5. Step4 will result in widget4's map view jumping.
            // 6. To avoid this case, we need to stop executing panTo action if zoomTo action is executed recently.
            let isPanZoomConflictCase = false;
            if (mapBaseView.lastZoomToExtentTime) {
                // By test, the biggest delta time is about 200ms in most cases, but it is safe to use a bigger one.
                if ((nowTime - mapBaseView.lastZoomToExtentTime) <= 500) {
                    isPanZoomConflictCase = true;
                }
            }
            // If mapBaseView is the last interactive view, it means mapBaseView is the extent-change source, we should ignore the pan-to-extent message.
            if (!isAboveCase && !isPanZoomConflictCase && mapBaseView !== MapBase.lastInteraciveView) {
                this.setExtentChangeRelatedWidgetIdsForView(mapBaseView, relatedWidgetIds);
                const panToValue = mutableStateProps.panToActionValue.value;
                const extent = panToValue.geometries[0];
                const extentCenter = extent.center;
                const stationary = panToValue.stationary;
                const viewSR = mapBaseView.spatialReference;
                if ((0,_utils__WEBPACK_IMPORTED_MODULE_4__.isNeedProjectSpatialReference)(extentCenter.spatialReference, viewSR)) {
                    if (stationary) {
                        // only project the extent when map is static
                        (0,_utils__WEBPACK_IMPORTED_MODULE_4__.projectGeometries)([extentCenter], viewSR).then((projectedGeometries) => {
                            const projectedCenter = projectedGeometries[0];
                            mapBaseView.goTo(projectedCenter);
                        });
                    }
                }
                else {
                    // mapBaseView.goTo(extentCenter, { animate: false })
                    mapBaseView.center = extentCenter;
                }
            }
        }
        this.props.onMutableStatePropsChanged(this.props.dataSourceId, 'panToActionValue', null);
    }
    panToGeometry(originalGeometries, mapBaseView, relatedWidgetIds) {
        (0,_utils__WEBPACK_IMPORTED_MODULE_4__.projectGeometries)(originalGeometries, mapBaseView.spatialReference).then((projectedGeometries) => {
            this.setExtentChangeRelatedWidgetIdsForView(mapBaseView, relatedWidgetIds);
            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.mapPanto)(mapBaseView, projectedGeometries);
        });
    }
    handleActionForNewFeatureSetActionValue(mutableStateProps, mapBaseView) {
        if (mutableStateProps.newFeatureSetActionValue && !mutableStateProps.newFeatureSetActionValue.promise) {
            const createNewFeaturelayerPromise = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.createNewFeaturelayer)(mapBaseView, mutableStateProps.newFeatureSetActionValue.value);
            if (createNewFeaturelayerPromise) {
                this.props.onMutableStatePropsChanged(this.props.dataSourceId, 'newFeatureSetActionValue.promise', createNewFeaturelayerPromise);
                createNewFeaturelayerPromise.then(() => {
                    this.props.onMutableStatePropsChanged(this.props.dataSourceId, 'newFeatureSetActionValue', null);
                });
            }
            else {
                this.props.onMutableStatePropsChanged(this.props.dataSourceId, 'newFeatureSetActionValue', null);
            }
        }
    }
    handleActionForChangedFeatureSetActionValue(mutableStateProps, mapBaseView) {
        if (mutableStateProps.changedFeatureSetActionValue) {
            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.updateFeaturelayer)(mapBaseView, mutableStateProps.changedFeatureSetActionValue);
            this.props.onMutableStatePropsChanged(this.props.dataSourceId, 'changedFeatureSetActionValue', null);
        }
    }
    handleActionForSelectFeatureActionValue(mutableStateProps, mapBaseView) {
        if (mutableStateProps.selectFeatureActionValue) {
            mapBaseView.closePopup();
            this.releaseHighLightHandles(mapBaseView);
            const selectFeatureHandle = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.selectFeature)(mapBaseView, mutableStateProps.selectFeatureActionValue);
            if (selectFeatureHandle) {
                mapBaseView.highLightHandles[selectFeatureHandle.layerId] = selectFeatureHandle.handle;
            }
            setTimeout(() => {
                this.props.onMutableStatePropsChanged(this.props.dataSourceId, 'selectFeatureActionValue', null);
            }, 500);
        }
    }
    handleActionForFlashActionValueAndFilterActionValue(mutableStateProps, mapBaseView) {
        const mutableStatePropsKeys = Object.keys(mutableStateProps);
        // WHY: why use array.some() here ? the callback always return false
        mutableStatePropsKeys.some(actionKey => {
            var _a;
            const jimuMapViewId = mapBaseView.dataSourceInfo.jimuMapViewId;
            const tempJimuMapView = jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.MapViewManager.getInstance().getJimuMapViewById(jimuMapViewId);
            // handle flash action
            if (actionKey.indexOf('flashActionValue-') === 0 && mutableStateProps[actionKey]) {
                mutableStateProps[actionKey].querySQL && (0,_utils__WEBPACK_IMPORTED_MODULE_4__.flashFeaturesByQuery)(tempJimuMapView, mutableStateProps[actionKey].layerDataSourceId, mutableStateProps[actionKey].querySQL);
                this.props.onMutableStatePropsChanged(this.props.dataSourceId, actionKey, null);
            }
            // handle filter action
            if (actionKey.indexOf('filterActionValue-') === 0 && mutableStateProps[actionKey]) {
                ((_a = mutableStateProps[actionKey].querySQL) === null || _a === void 0 ? void 0 : _a.length) >= 0 && (0,_utils__WEBPACK_IMPORTED_MODULE_4__.filterFeaturesByQuery)(tempJimuMapView, mutableStateProps[actionKey].layerDataSourceId, mutableStateProps[actionKey].querySQL);
                this.props.onMutableStatePropsChanged(this.props.dataSourceId, actionKey, null);
            }
            return false;
        });
    }
    handleActionForShowOnMapDatas(mutableStateProps, jimuMapView) {
        if (mutableStateProps.showOnMapDatas) {
            jimuMapView.drawDataOnMap(mutableStateProps.showOnMapDatas);
        }
    }
    handleActionForAddToMapDatas(mutableStateProps, jimuMapView) {
        if (mutableStateProps.addToMapDatas) {
            jimuMapView.addOrRemoveDataOnMap(mutableStateProps.addToMapDatas);
        }
    }
}
// Record the JimuMapView/Mapbase inited count for the specific jimuMapViewId (mapWidgetId + dataSourceId) at runtime, the key is jimuMapViewId, the value is the JimuMapView/Mapbase inited count.
// We use runtimeInitedJimuMapViews to identify whether the JimuMapView/Mapbase is initialized for the first time,
// and replace config.initialMapState with map_state in the url hash during the first initialization.
MapBase.runtimeInitedJimuMapViews = {};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapBase);


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap-context.ts":
/*!***********************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap-context.ts ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MultiSourceMapContext: () => (/* binding */ MultiSourceMapContext)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

const MultiSourceMapContext = jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createContext({
    mapWidgetId: null,
    mapWidgetHeight: null,
    isShowMapSwitchBtn: false,
    isFullScreen: false,
    dataSourceIds: [],
    activeDataSourceId: null,
    switchMap: () => { },
    fullScreenMap: () => { },
    initialMapState: null,
    mobilePanelContainer: null,
    onMobilePanelContentChange: (MobilePanelContent) => { },
    theme: null
});


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap.tsx":
/*!****************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap.tsx ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _mapbase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mapbase */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/mapbase.tsx");
/* harmony import */ var _multisourcemap_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./multisourcemap-context */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap-context.ts");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");
/* harmony import */ var _layout_map_fixed_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../layout/map-fixed-layout */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/map-fixed-layout.tsx");
/* harmony import */ var _layout_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../layout/layout */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/layout.tsx");
/* harmony import */ var _layout_pc_layout_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../layout/pc-layout-json */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/pc-layout-json.ts");
/* harmony import */ var _layout_mobile_layout_json__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../layout/mobile-layout-json */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/mobile-layout-json.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/utils.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









const VisibleStyles = {
    firstMapVisible: [{
            zIndex: 'unset',
            opacity: 1
        }, {
            zIndex: -1,
            opacity: 0
        }],
    secondMapVisible: [{
            zIndex: -1,
            opacity: 0
        }, {
            zIndex: 'unset',
            opacity: 1
        }]
};
class MultiSourceMap extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.mutableStatePropsMap = {};
        this.__unmount = false;
        this.onPageChange = (prePageId, currentPageId) => {
            // close active tool
            if (prePageId && currentPageId && prePageId !== currentPageId) {
                this.setState({
                    activeToolInfo: null
                });
            }
        };
        this.onResize = (width, height) => {
            // close active tool
            this.setState({
                activeToolInfo: null
            });
        };
        this.reInitWidgetInstance = (restoreData) => {
            this.state = restoreData;
            this.isReIniting = true;
        };
        /**
         * This method is called when user clicks the map thubnail in map setting page and change the config.initialMapDataSourceID.
         * @param dataSourceId
         * @param callBack
         */
        this.changeInitialMapDataSourceID = (dataSourceId, callBack) => {
            if (this.props.baseWidgetProps.useDataSources && this.props.baseWidgetProps.useDataSources.length > 1) {
                const firstMapInstance = this.refs.firstMapInstance;
                const secondMapInstance = this.refs.secondMapInstance;
                if (!firstMapInstance || !secondMapInstance) {
                    // Make sure both firstMapInstance and secondMapInstance exist, otherwise we don't need to call this method.
                    if (callBack) {
                        callBack();
                    }
                    return;
                }
                if (!this.state.currentMapIndex) {
                    if (this.state.secondMapDsId && this.state.secondMapDsId === dataSourceId) {
                        this.startChangeInitialMapAnimation(callBack);
                        secondMapInstance.goHome(false);
                    }
                    else {
                        firstMapInstance.goHome(false);
                    }
                }
                else {
                    if (this.state.firstMapDsId && this.state.firstMapDsId === dataSourceId) {
                        this.startChangeInitialMapAnimation(callBack);
                        firstMapInstance.goHome(false);
                    }
                    else {
                        secondMapInstance.goHome(false);
                    }
                }
            }
        };
        this.startChangeInitialMapAnimation = (callBack) => {
            const firstMapInstance = this.refs.firstMapInstance;
            const secondMapInstance = this.refs.secondMapInstance;
            if (!firstMapInstance || !secondMapInstance) {
                // Make sure both firstMapInstance and secondMapInstance exist, otherwise we don't need to call this method.
                if (callBack) {
                    callBack();
                }
                return;
            }
            const tempState = Object.assign({}, this.state);
            if (!this.state.currentMapIndex) {
                // currentMapIndex: 0 -> 1
                // first map visible -> second map visible
                tempState.currentMapIndex = 1;
                tempState.multiMapStyle = VisibleStyles.secondMapVisible;
                const viewPoint = firstMapInstance.getViewPoint();
                if (viewPoint) {
                    secondMapInstance.setViewPoint(viewPoint);
                }
                this.setState(tempState, () => { callBack && callBack(); });
            }
            else {
                // currentMapIndex: 1 -> 0
                // second map visible -> first map visible
                tempState.currentMapIndex = 0;
                tempState.multiMapStyle = VisibleStyles.firstMapVisible;
                const viewPoint = secondMapInstance.getViewPoint();
                if (viewPoint) {
                    firstMapInstance.setViewPoint(viewPoint);
                }
                this.setState(tempState, () => { callBack && callBack(); });
            }
        };
        /**
         * This method is called when user clicks the switch tool at the left bottom of map widget.
         */
        this.switchMap = (ignoreSwitchAnimation = false) => __awaiter(this, void 0, void 0, function* () {
            if (!this.props.baseWidgetProps.useDataSources || this.props.baseWidgetProps.useDataSources.length < 2) {
                yield Promise.resolve();
                return;
            }
            const firstMapInstance = this.refs.firstMapInstance;
            const secondMapInstance = this.refs.secondMapInstance;
            if (!firstMapInstance || !secondMapInstance) {
                // Make sure both firstMapInstance and secondMapInstance exist, otherwise we don't need to call this method.
                return;
            }
            const tempState = Object.assign({}, this.state);
            // By default, we enable switching opacity animation.
            tempState.useAnimation = !ignoreSwitchAnimation;
            if (!this.state.currentMapIndex) {
                // currentMapIndex: 0 -> 1
                // first map visible -> second map visible
                tempState.currentMapIndex = 1;
                tempState.multiMapStyle = VisibleStyles.secondMapVisible;
                const viewPoint = firstMapInstance.getViewPoint();
                if (viewPoint) {
                    secondMapInstance.setViewPoint(viewPoint);
                }
            }
            else {
                // currentMapIndex: 1 -> 0
                // second map visible -> first map visible
                tempState.currentMapIndex = 0;
                tempState.multiMapStyle = VisibleStyles.firstMapVisible;
                const viewPoint = secondMapInstance.getViewPoint();
                if (viewPoint) {
                    firstMapInstance.setViewPoint(viewPoint);
                }
            }
            return new Promise((resolve, reject) => {
                this.setState(tempState, () => {
                    this.confirmJimuMapViewIsActive();
                    setTimeout(() => {
                        this.setState({
                            useAnimation: false
                        }, () => {
                            resolve(null);
                        });
                    }, 500);
                });
            });
        });
        this.handleMutableStatePropsChanged = (dataSourceId, propKey, value) => {
            if (!this.mutableStatePropsMap[propKey]) {
                this.mutableStatePropsMap[propKey] = [dataSourceId];
            }
            else {
                if (!this.mutableStatePropsMap[propKey].includes(dataSourceId)) {
                    this.mutableStatePropsMap[propKey].push(dataSourceId);
                }
            }
            const multiMapDsIds = [];
            const firstMapInstance = this.refs.firstMapInstance;
            const secondMapInstance = this.refs.secondMapInstance;
            if (firstMapInstance && firstMapInstance.getViewType()) {
                multiMapDsIds.push(this.state.firstMapDsId);
            }
            if (secondMapInstance && secondMapInstance.getViewType()) {
                multiMapDsIds.push(this.state.secondMapDsId);
            }
            let isAllMatched = true;
            for (let i = 0; i < multiMapDsIds.length; i++) {
                if (!this.mutableStatePropsMap[propKey].includes(multiMapDsIds[i])) {
                    isAllMatched = false;
                    break;
                }
            }
            if (isAllMatched) {
                delete this.mutableStatePropsMap[propKey];
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.MutableStoreManager.getInstance().updateStateValue(this.props.baseWidgetProps.id, propKey, value);
            }
        };
        // callback of view.extent change
        this.onMapbaseExtentChanged = (dataSourceId, message) => {
            const currentVisibleDsId = this.getCurrentVisibleDsId();
            if (currentVisibleDsId === dataSourceId) {
                const clonedViewpoint = message.viewpoint.clone();
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageManager.getInstance().publishMessage(message);
                // sync viewpoint of hidden mapbase
                let hiddenMapBase = null;
                if (this.state.firstMapDsId && this.state.firstMapDsId !== dataSourceId) {
                    hiddenMapBase = this.refs.firstMapInstance;
                }
                else if (this.state.secondMapDsId && this.state.secondMapDsId !== dataSourceId) {
                    hiddenMapBase = this.refs.secondMapInstance;
                }
                if (hiddenMapBase) {
                    hiddenMapBase.setViewPoint(clonedViewpoint);
                }
            }
        };
        this.handleMapLoaded = (dataSourceId, mapLoadStatus) => {
            this.forceUpdate();
        };
        this.handleJimuMapViewCreated = (jimuMapView) => {
            if (this.props.onJimuMapViewCreated) {
                this.props.onJimuMapViewCreated(jimuMapView);
            }
            if (this.__unmount) {
                return;
            }
            this.confirmJimuMapViewIsActive();
        };
        /**
         * Update this.state.currentJimuMapViewId by this.state.multiMapStyle and update JimuMapView.isActive by calling jimuMapView.setIsActive(isActive).
         */
        this.confirmJimuMapViewIsActive = () => {
            if (this.props.isDefaultMap) {
                const jimuMapView = this.getJimuMapViewByDataSourceId(null);
                if (jimuMapView) {
                    this.setActiveJimuMapView(jimuMapView, true);
                }
                return;
            }
            const allDatasourceIds = [];
            this.state.firstMapDsId && allDatasourceIds.push(this.state.firstMapDsId);
            this.state.secondMapDsId && allDatasourceIds.push(this.state.secondMapDsId);
            const currentDataSourceId = this.getCurrentVisibleDsId();
            for (let i = 0; i < allDatasourceIds.length; i++) {
                const jimuMapView = this.getJimuMapViewByDataSourceId(allDatasourceIds[i]);
                if (jimuMapView) {
                    if (allDatasourceIds[i] === currentDataSourceId) {
                        this.setActiveJimuMapView(jimuMapView, true);
                    }
                    else {
                        this.setActiveJimuMapView(jimuMapView, false);
                    }
                }
            }
        };
        this.isShowMapSwitchBtn = () => {
            const firstMapInstance = this.refs.firstMapInstance;
            const secondMapInstance = this.refs.secondMapInstance;
            if (firstMapInstance && secondMapInstance) {
                if (firstMapInstance.getMapLoadStatus() !== _mapbase__WEBPACK_IMPORTED_MODULE_1__.MapLoadStatus.Loading && secondMapInstance.getMapLoadStatus() !== _mapbase__WEBPACK_IMPORTED_MODULE_1__.MapLoadStatus.Loading) {
                    return true;
                }
            }
            else {
                return false;
            }
        };
        this.getCurrentVisibleDsId = () => {
            if (this.state.multiMapStyle[0].opacity === 1) {
                return this.state.firstMapDsId;
            }
            else {
                return this.state.secondMapDsId;
            }
        };
        this.handleViewGroupCreate = (viewGroup) => {
            if (this.props.onViewGroupCreate) {
                this.props.onViewGroupCreate(viewGroup);
            }
        };
        this.handleMobilePanelContentChange = (mobilePanelContent) => {
            this.setState({
                mobilePanelContent: mobilePanelContent
            });
        };
        this.handleActiveToolInfoChange = (activeToolInfo) => {
            this.setState({
                activeToolInfo: activeToolInfo
            });
        };
        this.domRef = jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createRef();
        const mapWidgetId = this.props.baseWidgetProps.id;
        if (typeof MultiSourceMap.runtimeInitedMapWidgets[mapWidgetId] === 'number') {
            // MultiSourceMap is inited multiple times for mapWidgetId
            MultiSourceMap.runtimeInitedMapWidgets[mapWidgetId] += 1;
        }
        else {
            // MultiSourceMap is inited firstly for mapWidgetId
            MultiSourceMap.runtimeInitedMapWidgets[mapWidgetId] = 1;
        }
        const restoreData = jimu_core__WEBPACK_IMPORTED_MODULE_0__.MutableStoreManager.getInstance().getStateValue([this.props.baseWidgetProps.id, 'restoreData',
            `${this.props.baseWidgetProps.id}-restoreData-multimap`]);
        if (restoreData) {
            const mobilePanelContainer = document.createElement('div');
            mobilePanelContainer.id = `${this.props.baseWidgetProps.id}-bottom-panel`;
            mobilePanelContainer.className = 'w-100 h-100';
            restoreData.mobilePanelContainer = mobilePanelContainer;
            this.reInitWidgetInstance(restoreData);
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.MutableStoreManager.getInstance().updateStateValue(this.props.baseWidgetProps.id, `restoreData.${this.props.baseWidgetProps.id}-restoreData-multimap`, null);
        }
        else {
            const mobilePanelContainer = document.createElement('div');
            mobilePanelContainer.id = `${this.props.baseWidgetProps.id}-bottom-panel`;
            mobilePanelContainer.className = 'w-100 h-100';
            // The workflow to show top map and bottom map:
            // 1. this.state.multiMapStyle is set to VisibleStyles.firstMapVisible, this leads to getCurrentVisibleDsId() returning this.state.firstMapDsId.
            // 2. In componentDidMount, this.state.firstMapDsId is set to initialMapDataSourceID.
            // 3. When JimuMapView created, handleJimuMapViewCreated is called, then handleJimuMapViewCreated calls confirmJimuMapViewIsActive.
            // 4. In confirmJimuMapViewIsActive, it calls this.getCurrentVisibleDsId() as currentDataSourceId, currentDataSourceId is this.state.firstMapDsId due to step1.
            //    And because of step2, this.state.firstMapDsId is initialMapDataSourceID, so the currentDataSourceId is initialMapDataSourceID.
            //    Then call JimuMapView.setIsActive(isActive), isActive is true if jimuMapView.dataSourceId equals currentDataSourceId, otherwise isActive is false.
            this.state = {
                // show useDataSources[0] on the top by default
                currentMapIndex: 0,
                multiMapStyle: VisibleStyles.firstMapVisible,
                firstMapDsId: null,
                secondMapDsId: null,
                useAnimation: false,
                useDataSources: null,
                // Note, the initial currentJimuMapViewId is empty, it is not empty after called this.confirmJimuMapViewIsActive() method.
                currentJimuMapViewId: null,
                mobilePanelContent: null,
                mobilePanelContainer: mobilePanelContainer,
                activeToolInfo: null
                // showOnMapDatasKey: null
            };
        }
        this.mutableStatePropsMap = {};
        this.useMapWidgetIds = this.props.baseWidgetProps.id ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([this.props.baseWidgetProps.id]) : (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)([]);
        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.observeStore)(this.onPageChange, ['appRuntimeInfo', 'currentPageId']);
    }
    componentDidMount() {
        if ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().mapWidgetsInfo) {
            if (!(0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().mapWidgetsInfo[this.props.baseWidgetProps.id]) {
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.MapWidgetInfoAdded(this.props.baseWidgetProps.id, (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)({ mapWidgetId: this.props.baseWidgetProps.id })));
            }
        }
        this.__unmount = false;
        if (this.isReIniting) {
            // this.isReIniting is true means MultiSourceMap is restored.
            return;
        }
        const useDataSources = this.props.baseWidgetProps.useDataSources;
        if (useDataSources) {
            // initialMapDataSourceID maybe config.initialMapDataSourceID or url hash param active_datasource_id
            let initialMapDataSourceID = this.props.baseWidgetProps.config.initialMapDataSourceID;
            // If url hash param active_datasource_id is set and this is the first time MultiSourceMap inited,
            // then we use active_datasource_id override config.initialMapDataSourceID.
            if (this.props.baseWidgetProps.isRunAppMode) {
                const mapWidgetId = this.props.baseWidgetProps.id;
                const firstTimeInited = MultiSourceMap.runtimeInitedMapWidgets[mapWidgetId] === 1;
                if (firstTimeInited) {
                    // MultiSourceMap is inited firstly for mapWidgetId.
                    const runtimeUrlHashParams = this.props.baseWidgetProps.runtimeUrlHashParams;
                    if (runtimeUrlHashParams && runtimeUrlHashParams.active_datasource_id) {
                        const allDataSourceIds = useDataSources.map(item => item.dataSourceId);
                        if (allDataSourceIds.includes(runtimeUrlHashParams.active_datasource_id)) {
                            initialMapDataSourceID = runtimeUrlHashParams.active_datasource_id;
                        }
                    }
                }
            }
            // the following code make sure firstMapDsId points to the above initialMapDataSourceID
            if (!initialMapDataSourceID) {
                this.setState({
                    firstMapDsId: useDataSources[0] && useDataSources[0].dataSourceId,
                    secondMapDsId: useDataSources[1] && useDataSources[1].dataSourceId
                });
            }
            else {
                if (initialMapDataSourceID === (useDataSources[0] && useDataSources[0].dataSourceId)) {
                    this.setState({
                        firstMapDsId: useDataSources[0] && useDataSources[0].dataSourceId,
                        secondMapDsId: useDataSources[1] && useDataSources[1].dataSourceId
                    });
                }
                else if (initialMapDataSourceID === (useDataSources[1] && useDataSources[1].dataSourceId)) {
                    this.setState({
                        firstMapDsId: useDataSources[1] && useDataSources[1].dataSourceId,
                        secondMapDsId: useDataSources[0] && useDataSources[0].dataSourceId
                    });
                }
                else {
                    this.setState({
                        firstMapDsId: useDataSources[0] && useDataSources[0].dataSourceId,
                        secondMapDsId: useDataSources[1] && useDataSources[1].dataSourceId
                    });
                }
            }
        }
    }
    componentWillUnmount() {
        this.__unmount = true;
        const widgets = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appConfig.widgets;
        if (widgets[this.props.baseWidgetProps.id] && widgets[this.props.baseWidgetProps.id].useDataSources === this.props.baseWidgetProps.useDataSources) {
            const restoreData = {
                currentMapIndex: this.state.currentMapIndex,
                multiMapStyle: this.state.multiMapStyle,
                firstMapDsId: this.state.firstMapDsId,
                secondMapDsId: this.state.secondMapDsId,
                useAnimation: this.state.useAnimation,
                currentJimuMapViewId: this.state.currentJimuMapViewId
            };
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.MutableStoreManager.getInstance().updateStateValue(this.props.baseWidgetProps.id, `restoreData.${this.props.baseWidgetProps.id}-restoreData-multimap`, restoreData);
        }
        if (!widgets[this.props.baseWidgetProps.id]) {
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.MapWidgetInfoRemoved(this.props.baseWidgetProps.id));
        }
    }
    static getDerivedStateFromProps(newProps, prevState) {
        if (newProps.baseWidgetProps.useDataSources !== prevState.useDataSources) {
            const newState = MultiSourceMap.getChangedState(prevState.firstMapDsId, prevState.secondMapDsId, newProps.baseWidgetProps.useDataSources);
            return newState;
        }
        else {
            return null;
        }
    }
    componentDidUpdate(prevProps, prevState, snapshot) {
        if (this.props.baseWidgetProps.stateProps && this.props.baseWidgetProps.stateProps.initialMapDataSourceID) {
            // mapWidget.props.stateProps.initialMapDataSourceID is a temporary variable to let map setting and map runtime communicate with each other.
            // If we change the initialMapDataSourceID by clicking ds thumbnail in map setting,
            // then map setting will call builderAppSync.publishChangeWidgetStatePropToApp() to update mapWidget.props.stateProps.initialMapDataSourceID.
            // Once we check mapWidget.props.stateProps.initialMapDataSourceID is not empty in MultiSourceMap, means we changed the initialMapDataSourceID,
            // then we make sure the initialMapbase go to the initial extent.
            // At last, we will reset mapWidget.props.stateProps.initialMapDataSourceID to empty.
            const initialMapDataSourceID = this.props.baseWidgetProps.stateProps.initialMapDataSourceID;
            if (this.state.firstMapDsId === initialMapDataSourceID) {
                const firstMapInstance = this.refs.firstMapInstance;
                if (firstMapInstance) {
                    firstMapInstance.goHome(false);
                }
            }
            if (this.state.secondMapDsId === initialMapDataSourceID) {
                const secondMapInstance = this.refs.secondMapInstance;
                if (secondMapInstance) {
                    secondMapInstance.goHome(false);
                }
            }
            this.props.baseWidgetProps.dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.widgetStatePropChange(this.props.baseWidgetProps.id, 'initialMapDataSourceID', null));
        }
        if (this.isReIniting) {
            this.isReIniting = false;
            return;
        }
        if (this.props.baseWidgetProps.config.initialMapDataSourceID !== prevProps.baseWidgetProps.config.initialMapDataSourceID) {
            // User clicks the map thubnail in map setting page and change the config.initialMapDataSourceID.
            this.changeInitialMapDataSourceID(this.props.baseWidgetProps.config.initialMapDataSourceID, this.confirmJimuMapViewIsActive);
        }
        if (this.props.baseWidgetProps.useDataSources !== prevProps.baseWidgetProps.useDataSources) {
            this.confirmJimuMapViewIsActive();
        }
    }
    getJimuMapViewByDataSourceId(dsId) {
        const jimuMapViewId = (0,_utils__WEBPACK_IMPORTED_MODULE_8__.getJimuMapViewId)(this.props.baseWidgetProps.id, dsId);
        const jimuMapView = jimu_arcgis__WEBPACK_IMPORTED_MODULE_3__.MapViewManager.getInstance().getJimuMapViewById(jimuMapViewId);
        return jimuMapView;
    }
    setActiveJimuMapView(jimuMapView, isActive) {
        var _a, _b;
        if (isActive) {
            // jimuMapView is active
            jimuMapView.setIsActive(isActive);
            this.setState({
                currentJimuMapViewId: jimuMapView.id
            });
            if (this.props.onActiveJimuMapViewChange) {
                this.props.onActiveJimuMapViewChange(jimuMapView);
            }
            const baseWidgetProps = (_a = this.props) === null || _a === void 0 ? void 0 : _a.baseWidgetProps;
            if (baseWidgetProps) {
                // If current url active_datasource_id is empty, we should treat it as initialMapDataSourceID.
                let urlActiveDsId = ((_b = baseWidgetProps.runtimeUrlHashParams) === null || _b === void 0 ? void 0 : _b.active_datasource_id) || baseWidgetProps.config.initialMapDataSourceID;
                // initialMapDataSourceID only exists when useDataSources.length === 2, so initialMapDataSourceID maybe null.
                if (!urlActiveDsId) {
                    // means runtimeUrlHashParams.active_datasource_id and config.initialMapDataSourceID are null
                    const useDataSources = baseWidgetProps.useDataSources;
                    if (useDataSources && useDataSources.length === 1) {
                        urlActiveDsId = useDataSources[0].dataSourceId;
                    }
                }
                if (!urlActiveDsId) {
                    urlActiveDsId = '';
                }
                const newActiveDsId = jimuMapView.dataSourceId || '';
                if (newActiveDsId !== urlActiveDsId) {
                    (0,_utils__WEBPACK_IMPORTED_MODULE_8__.updateUrlHashParamsForActiveJimuMapView)(jimuMapView);
                }
            }
        }
        else {
            // jimuMapView is not active
            jimuMapView.setIsActive(isActive);
        }
    }
    // handleShowOnMapDataChange = (showOnMapDatasKey: string[]) => {
    //  this.setState({
    //    showOnMapDatasKey: showOnMapDatasKey
    //  })
    // }
    getLayoutConfig() {
        if (this.props.widthBreakpoint === 'xsmall') {
            return _layout_mobile_layout_json__WEBPACK_IMPORTED_MODULE_7__["default"][0];
        }
        else {
            return this.props.baseWidgetProps.config.layoutIndex ? _layout_pc_layout_json__WEBPACK_IMPORTED_MODULE_6__["default"][this.props.baseWidgetProps.config.layoutIndex] : _layout_pc_layout_json__WEBPACK_IMPORTED_MODULE_6__["default"][0];
        }
    }
    render() {
        var _a;
        const mutiSourceMapDom = this.domRef.current;
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_multisourcemap_context__WEBPACK_IMPORTED_MODULE_2__.MultiSourceMapContext.Provider, { value: {
                mapWidgetId: this.props.baseWidgetProps.id,
                mapWidgetHeight: this.props.widgetHeight,
                isShowMapSwitchBtn: this.props.baseWidgetProps.useDataSources && this.props.baseWidgetProps.useDataSources.length > 1 && this.isShowMapSwitchBtn(),
                dataSourceIds: [this.state.firstMapDsId, this.state.secondMapDsId],
                activeDataSourceId: this.getCurrentVisibleDsId(),
                switchMap: this.switchMap,
                fullScreenMap: this.props.fullScreenMap,
                isFullScreen: this.props.isFullScreen,
                mobilePanelContainer: this.state.mobilePanelContainer,
                onMobilePanelContentChange: this.handleMobilePanelContentChange,
                initialMapState: this.props.baseWidgetProps.config && this.props.baseWidgetProps.config.initialMapState,
                theme: this.props.baseWidgetProps.theme
            } },
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { ref: this.domRef, className: 'w-100 h-100 multi-source-map' },
                !this.props.isDefaultMap && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'w-100 h-100 multi-map-container', style: { position: 'relative' } },
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('w-100 h-100 map1', {
                            'multisourcemap-item-appear': this.state.useAnimation && this.state.multiMapStyle[0].opacity,
                            'multisourcemap-item-disappear': this.state.useAnimation && !(this.state.multiMapStyle[0].opacity),
                            'multisourcemap-item-appear-noanimate': this.state.multiMapStyle[0].opacity,
                            'multisourcemap-item-disappear-noanimate': !(this.state.multiMapStyle[0].opacity)
                        }), style: { position: 'absolute', zIndex: this.state.multiMapStyle[0].zIndex } }, this.state.firstMapDsId && this.props.isMapInVisibleArea && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_mapbase__WEBPACK_IMPORTED_MODULE_1__["default"], { ref: 'firstMapInstance', baseWidgetProps: this.props.baseWidgetProps, onMapLoaded: this.handleMapLoaded, onMutableStatePropsChanged: this.handleMutableStatePropsChanged, onExtentChanged: this.onMapbaseExtentChanged, onJimuMapViewCreated: this.handleJimuMapViewCreated, onActiveToolInfoChange: this.handleActiveToolInfoChange, 
                        // onShowOnMapDataChanged={this.handleShowOnMapDataChange}
                        startLoadModules: this.props.startLoadModules, dataSourceId: this.state.firstMapDsId, widthBreakpoint: this.props.widthBreakpoint, isMapInVisibleArea: this.props.isMapInVisibleArea, multiSourceMapDom: mutiSourceMapDom })),
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('w-100 h-100 map2', {
                            'multisourcemap-item-appear': this.state.useAnimation && this.state.multiMapStyle[1].opacity,
                            'multisourcemap-item-disappear': this.state.useAnimation && !(this.state.multiMapStyle[1].opacity),
                            'multisourcemap-item-appear-noanimate': this.state.multiMapStyle[1].opacity,
                            'multisourcemap-item-disappear-noanimate': !(this.state.multiMapStyle[1].opacity)
                        }), style: { position: 'absolute', zIndex: this.state.multiMapStyle[1].zIndex } }, this.state.secondMapDsId && this.props.isMapInVisibleArea && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_mapbase__WEBPACK_IMPORTED_MODULE_1__["default"], { ref: 'secondMapInstance', baseWidgetProps: this.props.baseWidgetProps, onMapLoaded: this.handleMapLoaded, onMutableStatePropsChanged: this.handleMutableStatePropsChanged, onExtentChanged: this.onMapbaseExtentChanged, onJimuMapViewCreated: this.handleJimuMapViewCreated, onActiveToolInfoChange: this.handleActiveToolInfoChange, 
                        // onShowOnMapDataChanged={this.handleShowOnMapDataChange}
                        startLoadModules: this.props.startLoadModules, dataSourceId: this.state.secondMapDsId, widthBreakpoint: this.props.widthBreakpoint, isMapInVisibleArea: this.props.isMapInVisibleArea, multiSourceMapDom: mutiSourceMapDom }))),
                this.props.isDefaultMap && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'w-100 h-100 default-map-container', style: { position: 'relative' } },
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('w-100 h-100 multisourcemap-item-appear-noanimate default-map-mapbase-container'), style: { position: 'absolute', zIndex: 'unset' } }, this.props.isMapInVisibleArea && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_mapbase__WEBPACK_IMPORTED_MODULE_1__["default"], { ref: 'firstMapInstance', isDefaultMap: this.props.isDefaultMap, baseWidgetProps: this.props.baseWidgetProps, onMapLoaded: this.handleMapLoaded, onMutableStatePropsChanged: this.handleMutableStatePropsChanged, dataSourceId: null, onExtentChanged: this.onMapbaseExtentChanged, onJimuMapViewCreated: this.handleJimuMapViewCreated, onActiveToolInfoChange: this.handleActiveToolInfoChange, 
                        // onShowOnMapDataChanged={this.handleShowOnMapDataChange}
                        startLoadModules: this.props.startLoadModules, widthBreakpoint: this.props.widthBreakpoint, isMapInVisibleArea: this.props.isMapInVisibleArea, defaultMapInfo: this.props.defaultMapInfo, multiSourceMapDom: mutiSourceMapDom }))),
                this.state.currentJimuMapViewId && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_layout_map_fixed_layout__WEBPACK_IMPORTED_MODULE_4__["default"], { jimuMapView: jimu_arcgis__WEBPACK_IMPORTED_MODULE_3__.MapViewManager.getInstance().getJimuMapViewById(this.state.currentJimuMapViewId), appMode: this.props.baseWidgetProps.appMode, layouts: this.props.baseWidgetProps.layouts, LayoutEntry: this.props.baseWidgetProps.builderSupportModules && this.props.baseWidgetProps.builderSupportModules.LayoutEntry, widgetManifestName: this.props.baseWidgetProps.manifest.name }),
                this.state.currentJimuMapViewId && jimu_arcgis__WEBPACK_IMPORTED_MODULE_3__.MapViewManager.getInstance().getJimuMapViewById(this.state.currentJimuMapViewId) &&
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_layout_layout__WEBPACK_IMPORTED_MODULE_5__["default"], { mapWidgetId: this.props.baseWidgetProps.id, isMobile: this.props.widthBreakpoint === 'xsmall', jimuMapView: jimu_arcgis__WEBPACK_IMPORTED_MODULE_3__.MapViewManager.getInstance().getJimuMapViewById(this.state.currentJimuMapViewId), appMode: this.props.baseWidgetProps.appMode, layouts: this.props.baseWidgetProps.layouts, intl: this.props.baseWidgetProps.intl, LayoutEntry: this.props.baseWidgetProps.builderSupportModules && this.props.baseWidgetProps.builderSupportModules.LayoutEntry, layoutConfig: this.getLayoutConfig(), toolConfig: this.props.baseWidgetProps.config.toolConfig ? this.props.baseWidgetProps.config.toolConfig : {}, activeToolInfo: this.state.activeToolInfo, onActiveToolInfoChange: this.handleActiveToolInfoChange, theme: this.props.baseWidgetProps.theme, widgetManifestName: this.props.baseWidgetProps.manifest.name, widgetHeight: this.props.widthBreakpoint === 'xsmall' ? null : this.props.widgetHeight, autoControlWidgetId: this.props.autoControlWidgetId }),
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_arcgis__WEBPACK_IMPORTED_MODULE_3__.JimuMapViewComponent, { useMapWidgetId: (_a = this.useMapWidgetIds) === null || _a === void 0 ? void 0 : _a[0], onViewGroupCreate: this.handleViewGroupCreate }),
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactResizeDetector, { handleHeight: true, handleWidth: true, onResize: this.onResize }))));
    }
}
// Record the MultiSourceMap inited count for the specific mapWidgetId at runtime, the key is map widget id, the value is the MultiSourceMap inited count.
// We use runtimeInitedMapWidgets to identify whether the MultiSourceMap is initialized for the first time,
// and replace config.initialMapDataSourceID with activeDataSourceId in the url hash during the first initialization.
MultiSourceMap.runtimeInitedMapWidgets = {};
MultiSourceMap.getChangedState = (firstMapDsId, secondMapDsId, useDataSources) => {
    const changedState = {};
    if (useDataSources && useDataSources[0]) {
        const newDataSourceArr = [];
        const repeatDataSourceArr = [];
        for (let i = 0; i < useDataSources.length; i++) {
            if (firstMapDsId !== useDataSources[i].dataSourceId) {
                newDataSourceArr.push(useDataSources[i].dataSourceId);
            }
            else {
                repeatDataSourceArr.push(useDataSources[i].dataSourceId);
            }
        }
        if (repeatDataSourceArr.length > 0) {
            changedState.firstMapDsId = firstMapDsId;
            changedState.secondMapDsId = newDataSourceArr[0];
        }
        else if (repeatDataSourceArr.length === 0) {
            if (newDataSourceArr.includes(secondMapDsId)) {
                newDataSourceArr.splice(newDataSourceArr.indexOf(secondMapDsId), 1);
                changedState.firstMapDsId = newDataSourceArr[0];
                changedState.secondMapDsId = secondMapDsId;
            }
            else {
                changedState.firstMapDsId = newDataSourceArr[0];
                changedState.secondMapDsId = newDataSourceArr[1];
            }
        }
    }
    else {
        changedState.firstMapDsId = null;
        changedState.secondMapDsId = null;
    }
    if (changedState.firstMapDsId !== firstMapDsId) {
        if (changedState.firstMapDsId) {
            changedState.multiMapStyle = VisibleStyles.firstMapVisible;
            changedState.currentMapIndex = 0;
        }
        else if (changedState.secondMapDsId) {
            changedState.multiMapStyle = VisibleStyles.secondMapVisible;
            changedState.currentMapIndex = 1;
        }
        else {
            changedState.multiMapStyle = VisibleStyles.firstMapVisible;
            changedState.currentMapIndex = 0;
        }
    }
    else {
        if (!changedState.secondMapDsId) {
            changedState.multiMapStyle = VisibleStyles.firstMapVisible;
            changedState.currentMapIndex = 0;
        }
        else if (changedState.secondMapDsId !== secondMapDsId) {
            changedState.multiMapStyle = VisibleStyles.secondMapVisible;
            changedState.currentMapIndex = 1;
        }
    }
    return changedState;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MultiSourceMap);


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool-shell.tsx":
/*!******************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool-shell.tsx ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BaseToolShell)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _ui_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui-component */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/ui-component.tsx");
/* harmony import */ var _tool_modules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tool-modules */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/tool-modules.ts");
/** @jsx jsx */



class BaseToolShell extends _ui_component__WEBPACK_IMPORTED_MODULE_1__.UIComponent {
    render() {
        const ToolClass = _tool_modules__WEBPACK_IMPORTED_MODULE_2__["default"][this.props.toolName];
        let isAvailable = true;
        if (ToolClass) {
            if (ToolClass.isAvailable) {
                isAvailable = ToolClass.isAvailable(this.props);
            }
            else {
                isAvailable = true;
            }
        }
        else {
            isAvailable = false;
        }
        if (isAvailable) {
            const className = `exbmap-ui exbmap-ui-tool-shell divitem exbmap-ui-tool-shell-${this.props.toolName}`;
            const styleObj = this.props.layoutConfig.elements[this.props.toolName].style || {};
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)(this.props.className, className, this.props.layoutConfig.elements[this.props.toolName].className, {
                    'exbmap-ui-hidden-element': this.props.isHidden,
                    'rounded-pill': ['Compass'].includes(this.props.toolName)
                }), style: styleObj },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(ToolClass, { mapWidgetId: this.props.mapWidgetId, ref: 'baseToolInstance', toolJson: this.props.layoutConfig.elements[this.props.toolName], toolName: this.props.toolName, isMobile: this.props.isMobile, jimuMapView: this.props.jimuMapView, activeToolInfo: this.props.activeToolInfo, onActiveToolInfoChange: this.props.onActiveToolInfoChange, intl: this.props.intl, theme: this.props.theme, autoControlWidgetId: this.props.autoControlWidgetId })));
        }
        else {
            if (this.props.isMobile) {
                return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", null);
            }
            else {
                return null;
            }
        }
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx":
/*!************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseTool: () => (/* binding */ BaseTool)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _ui_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui-component */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/ui-component.tsx");
/* harmony import */ var _scroll_container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scroll-container */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/scroll-container.tsx");
/* harmony import */ var _panel_shell__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./panel-shell */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/panel-shell.tsx");
/* harmony import */ var _components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../components/multisourcemap-context */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap-context.ts");
/** @jsx jsx */






const defaultIcon = __webpack_require__(/*! jimu-ui/lib/icons/widgets.svg */ "./jimu-ui/lib/icons/widgets.svg");
const closeIcon = __webpack_require__(/*! ../../assets/icons/close-12.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/close-12.svg");
class BaseTool extends _ui_component__WEBPACK_IMPORTED_MODULE_2__.UIComponent {
    constructor(props) {
        super(props);
        this.toolName = null;
        this.isContainedToMobilePanel = false;
        // this param is used to update pop position when pc content has changed
        this.generation = 0;
        this._getContent = () => {
            if (this.props.toolJson.isOnlyExpanded) {
                return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this._cssStyle(), className: 'exbmap-ui exbmap-ui-tool-panel' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_core__WEBPACK_IMPORTED_MODULE_0__.ErrorBoundary, null, this.getExpandPanel())));
            }
            else {
                if (this.props.isMobile) {
                    return this._renderMobileTool();
                }
                else {
                    return this._renderPCTool();
                }
            }
        };
        this.onResize = (width, height) => {
            if (!width || !height) {
                return;
            }
            this.generation = height;
            this.forceUpdate();
        };
        this.handleToggleMobilePanel = () => {
            this.props.onActiveToolInfoChange(null);
        };
        const mapContainer = this.props.jimuMapView && this.props.jimuMapView.view && this.props.jimuMapView.view.container;
        if (jimu_ui__WEBPACK_IMPORTED_MODULE_1__.MobilePanelManager.getInstance().checkDomIsContained(mapContainer)) {
            this.isContainedToMobilePanel = true;
        }
        this.modifiers = [{
                name: 'flip',
                options: {
                    padding: 0
                }
            }, {
                name: 'preventOverflow',
                options: {
                    boundary: mapContainer
                }
            }];
        this._onKeyDown = this._onKeyDown.bind(this);
        this.onPopperToggle = this.onPopperToggle.bind(this);
    }
    _cssStyle() {
        const extendCssStyle = this.getExtendCssStyle();
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      .exbmap-basetool-loader {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 2px;
        width: 100%;
        animation: esri-fade-in 500ms ease-in-out;
      }

      .exbmap-basetool-loader:before {
        background-color: rgba(110,110,110,0.3);
        width: 100%;
        z-index: 0;
        content: "";
        opacity: 1;
        position: absolute;
        height: 2px;
        top: 0;
        transition: opacity 500ms ease-in-out;
      }

      .exbmap-basetool-loader:after {
        background-color: #6e6e6e;
        width: 20%;
        z-index: 0;
        animation: looping-progresss-bar-ani 1500ms linear infinite;
        content: "";
        opacity: 1;
        position: absolute;
        height: 2px;
        top: 0;
        transition: opacity 500ms ease-in-out;
      }

      ${extendCssStyle}

      /* pointer-events: auto;
      box-shadow: 0 1px 2px rgba(0,0,0,0.3);
      position: relative;

      .exbmap-ui-tool-icon {
        fill: black;
        left: 8px;
        top: 8px;
        position: absolute;
        display: block;
      }

      .exbmap-ui-expand-content {
        transition: opacity 250ms ease-in-out, margin 250ms ease-in-out;
        min-height: 10px;
        min-width: 10px;
        padding-top: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)};
        padding-bottom: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)};
        padding-left: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)};
        padding-right: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(20)};

        .exbmap-ui-expand-content-header {
          margin-bottom: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(10)};
        }

        .panel-title {
          font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(16)};
          color: #000000;
        }
      }

      .expand-placement-bottom {
        padding-top: 0.25rem !important;
      }

      .expand-placement-left {
        padding-right: 0.25rem !important;
      }

      .expand-placement-right {
        padding-left: 0.25rem !important;
      }

      .expand-placement-top {
        padding-bottom: 0.25rem !important;
      }

      .exbmap-basetool-loader {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 2px;
        width: 100%;
        animation: esri-fade-in 500ms ease-in-out;
      }

      .exbmap-basetool-loader:before {
        background-color: rgba(110,110,110,0.3);
        width: 100%;
        z-index: 0;
        content: "";
        opacity: 1;
        position: absolute;
        height: 2px;
        top: 0;
        transition: opacity 500ms ease-in-out;
      }

      .exbmap-basetool-loader:after {
        background-color: #6e6e6e;
        width: 20%;
        z-index: 0;
        animation: looping-progresss-bar-ani 1500ms linear infinite;
        content: "";
        opacity: 1;
        position: absolute;
        height: 2px;
        top: 0;
        transition: opacity 500ms ease-in-out;
      } */
    `;
    }
    getExtendCssStyle() {
        return '';
    }
    focusDefaultElement() { }
    onShowPanel() { }
    onClosePanel() { }
    destroy() { }
    static getIsNeedSetting() {
        return true;
    }
    /**
     * Retrun true if the tool should be rendered on the map, otherwise return false.
     * e.g. ScaleBar only supports map view, so ScaleBarTool.isAvailable() will return false if the map is scene view.
     */
    static isAvailable(toolShellProps) {
        return true;
    }
    onPopperToggle(e) {
        if (e) {
            if (e.type === 'keydown' && e.key === 'Escape') {
                this._onIconClick();
                this.iconContainer.focus();
            }
        }
    }
    _onKeyDown(e) {
        var _a;
        if (e.key === 'Enter' || e.key === ' ') {
            if (((_a = this.props.activeToolInfo) === null || _a === void 0 ? void 0 : _a.activeToolName) !== this.toolName) {
                this._onIconClick();
            }
            else {
                this.focusDefaultElement();
            }
        }
    }
    _onIconClick(e) {
        const onIconClick = this.getIcon() && this.getIcon().onIconClick;
        if (onIconClick) {
            onIconClick(e);
        }
        if (!this.getExpandPanel()) {
            return;
        }
        if (this.props.activeToolInfo) {
            if (this.props.activeToolInfo.activeToolName === this.toolName) {
                this.props.onActiveToolInfoChange(null);
            }
            else {
                this.props.onActiveToolInfoChange({
                    activeToolName: this.toolName,
                    activeToolTitle: this.getTitle()
                });
                this.onShowPanel();
            }
        }
        else {
            this.props.onActiveToolInfoChange({
                activeToolName: this.toolName,
                activeToolTitle: this.getTitle()
            });
            this.onShowPanel();
        }
    }
    _initIconContainer(ref) {
        if (ref && !this.iconContainer) {
            this.iconContainer = ref;
            this.forceUpdate();
        }
    }
    _renderPCTool() {
        var _a;
        let toolIcon = this.getIcon();
        if (!toolIcon) {
            toolIcon = {
                icon: defaultIcon,
                onIconClick: () => { }
            };
        }
        const expandPanel = this.getExpandPanel();
        const activeToolName = this.props.activeToolInfo && this.props.activeToolInfo.activeToolName;
        this.generation = this.generation + 1;
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'exbmap-ui exbmap-ui-tool', css: this._cssStyle(), style: { width: '32px', height: '32px' } },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { style: {}, ref: ref => { this._initIconContainer(ref); }, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('exbmap-ui-tool esri-widget--button', {
                    'exbmap-ui-tool-icon-selected': this.toolName === activeToolName && expandPanel
                }), title: this.props.toolJson.isShowIconTitle ? this.getTitle() : '', onClick: e => { this._onIconClick(e); }, "aria-expanded": ((_a = this.props.activeToolInfo) === null || _a === void 0 ? void 0 : _a.activeToolName) === this.toolName, role: 'button', tabIndex: 0, onKeyDown: this._onKeyDown },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, className: 'exbmap-ui-tool-icon', icon: toolIcon.icon })),
            this.iconContainer && (this.toolName === activeToolName && expandPanel) && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_panel_shell__WEBPACK_IMPORTED_MODULE_4__["default"], { onDestroyed: () => { this.onClosePanel(); } },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Popper, { className: 'exbmap-ui-popper', reference: this.iconContainer, open: !!(this.toolName === activeToolName && expandPanel), placement: this.props.toolJson.panelPlacement, modifiers: this.modifiers, version: this.generation, offset: [0, 4], toggle: this.onPopperToggle, forceLatestFocusElements: true },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_5__.MultiSourceMapContext.Consumer, null, ({ mapWidgetHeight }) => ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this._cssStyle(), className: this.getExpandPanelPlacementClassName() },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'exbmap-ui-expand-content' },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 justify-content-between d-flex exbmap-ui-expand-content-header' },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'panel-title text-truncate', style: { maxWidth: '210px' }, title: this.getTitle() }, this.getTitle()),
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { onClick: () => { this.props.onActiveToolInfoChange(null); }, style: { cursor: 'pointer' }, tabIndex: 0, role: "button", "aria-label": this.props.intl.formatMessage({ id: 'close', defaultMessage: 'close' }) },
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 20, height: 20, icon: closeIcon }))),
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_core__WEBPACK_IMPORTED_MODULE_0__.ErrorBoundary, null,
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { style: { maxHeight: `${mapWidgetHeight - 55}px`, overflowY: this.toolName !== 'Search' ? 'auto' : 'inherit' } }, expandPanel),
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactResizeDetector, { handleHeight: true, onResize: this.onResize }))))))))));
    }
    _renderMobileTool() {
        let toolIcon = this.getIcon();
        if (!toolIcon) {
            toolIcon = {
                icon: defaultIcon,
                onIconClick: () => { }
            };
        }
        const expandPanel = this.getExpandPanel();
        const activeToolName = this.props.activeToolInfo && this.props.activeToolInfo.activeToolName;
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_5__.MultiSourceMapContext.Consumer, null, ({ mobilePanelContainer }) => ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'exbmap-ui exbmap-ui-tool', css: this._cssStyle() },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { style: {}, ref: ref => { this.iconContainer = ref; }, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('exbmap-ui-tool esri-widget--button', {
                    'exbmap-ui-tool-icon-selected': this.toolName === activeToolName && expandPanel
                }), role: 'button', tabIndex: 0, onKeyDown: this._onKeyDown, title: this.props.toolJson.isShowIconTitle ? this.getTitle() : '', onClick: e => { this._onIconClick(e); } },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, className: 'exbmap-ui-tool-icon', icon: toolIcon.icon })),
            this.toolName === activeToolName && expandPanel &&
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactDOM.createPortal((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_panel_shell__WEBPACK_IMPORTED_MODULE_4__["default"], { onDestroyed: () => { this.onClosePanel(); } },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 h-100 d-flex flex-column', css: this._cssStyle() },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_scroll_container__WEBPACK_IMPORTED_MODULE_3__["default"], { className: 'w-100 h-100' },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_core__WEBPACK_IMPORTED_MODULE_0__.ErrorBoundary, null, this.getExpandPanel())))), mobilePanelContainer)))));
    }
    getExpandPanelPlacementClassName() {
        if (!this.props.toolJson.panelPlacement) {
            return null;
        }
        else {
            return `expand-placement-${this.props.toolJson.panelPlacement.split('-')[0]}`;
        }
    }
    render() {
        return this._getContent();
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/group.tsx":
/*!********************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/group.tsx ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Group)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _ui_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui-component */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/ui-component.tsx");
/* harmony import */ var _base_tool_shell__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base-tool-shell */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool-shell.tsx");
/* harmony import */ var _tool_modules__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tool-modules */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/tool-modules.ts");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../components/multisourcemap-context */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap-context.ts");
/** @jsx jsx */






class Group extends _ui_component__WEBPACK_IMPORTED_MODULE_1__.UIComponent {
    getStyle() {
        const groupJson = this.props.layoutConfig.elements[this.props.groupName];
        const direction = groupJson.direction;
        const isRTL = this.props.isRTL;
        const isVertical = direction === 'vertical';
        let flexFlow = '';
        if (isVertical) {
            flexFlow = 'column';
        }
        else {
            if (isRTL) {
                flexFlow = 'row-reverse';
            }
            else {
                flexFlow = 'row';
            }
        }
        let alignItems = 'flex-start';
        if (isVertical) {
            if (groupJson.isVerticalRrlAlignItemsStart) {
                if (isRTL) {
                    alignItems = 'flex-end';
                }
                else {
                    alignItems = 'flex-start';
                }
            }
            if (groupJson.isVerticalRrlAlignItemsEnd) {
                if (isRTL) {
                    alignItems = 'flex-start';
                }
                else {
                    alignItems = 'flex-end';
                }
            }
        }
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `

      display: flex;
      flex-flow: ${flexFlow};
      align-items: ${alignItems};

      .exbmap-ui-group-expand-icon {
        fill: black;
        left: 8px;
        top: 8px;
        position: absolute;
        display: block;
      }

      .expand-mobile-panel {
        box-shadow: rgba(0, 0, 0, 0.3) 0px 0px 2px;
        border-radius: 10px 10px 0px 0px;
      }

      .expand-mobile-panel-transition {
        transition: height 0.3s;
      }

      .expand-mobile-panel-touch-container {
        top: 0;
        position: absolute;
        width: 100%;
        height: 31px;
      }

      .expand-mobile-panel-bar {
        width: 36px;
        height: 4px;
        background-color: #434343;
        border-radius: 2px;
      }
      `;
    }
    constructor(props) {
        super(props);
        this.checkIsHiddenElement = (elementName) => {
            if (this.props.hiddenElementNames) {
                if (this.props.hiddenElementNames.includes(elementName)) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        };
        /**
         * Hide some tools if widget hegith is too small.
         * This method only hide child element names if current group is main group and in mobile size.
         * @returns
         */
        this.checkResponsive = () => {
            if (!this.props.onSetHiddenElementNames) {
                return;
            }
            if (!this.props.isMainGroup || !this.props.isMobile) {
                this.props.onSetHiddenElementNames([]);
                return;
            }
            const mobileResponsiveStrategy = this.props.layoutConfig.mobileResponsiveStrategy;
            const aboveHeight = this.state.widgetHeight;
            // see issue #2862 for more details
            let hiddenElementNames = [];
            if (aboveHeight >= 465) {
                hiddenElementNames = [];
            }
            else if (aboveHeight >= 400 && aboveHeight < 465) {
                hiddenElementNames = (mobileResponsiveStrategy === null || mobileResponsiveStrategy === void 0 ? void 0 : mobileResponsiveStrategy.stage1) || [];
            }
            else if (aboveHeight >= 320 && aboveHeight < 400) {
                hiddenElementNames = (mobileResponsiveStrategy === null || mobileResponsiveStrategy === void 0 ? void 0 : mobileResponsiveStrategy.stage2) || [];
            }
            else if (aboveHeight >= 250 && aboveHeight < 320) {
                hiddenElementNames = (mobileResponsiveStrategy === null || mobileResponsiveStrategy === void 0 ? void 0 : mobileResponsiveStrategy.stage3) || [];
            }
            else if (aboveHeight >= 160 && aboveHeight < 250) {
                hiddenElementNames = (mobileResponsiveStrategy === null || mobileResponsiveStrategy === void 0 ? void 0 : mobileResponsiveStrategy.stage4) || [];
            }
            else if (aboveHeight >= 54 && aboveHeight < 160) {
                hiddenElementNames = (mobileResponsiveStrategy === null || mobileResponsiveStrategy === void 0 ? void 0 : mobileResponsiveStrategy.stage5) || [];
            }
            else if (aboveHeight < 54) {
                hiddenElementNames = (mobileResponsiveStrategy === null || mobileResponsiveStrategy === void 0 ? void 0 : mobileResponsiveStrategy.stage6) || [];
            }
            this.props.onSetHiddenElementNames(hiddenElementNames);
        };
        this.onResize = (width, height) => {
            if (!width || !height) {
                return;
            }
            this.setState({
                widgetWidth: width,
                widgetHeight: height
                // isThumbMap: false
            }, () => {
                this.checkResponsive();
            });
        };
        this.returnNullNode = (key) => {
            if (this.props.isMobile) {
                return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", { key: key });
            }
            else {
                return null;
            }
        };
        this.checkIsLastElement = (parentGroupJson, toolJson) => {
            const toolName = toolJson.toolName;
            const layoutJson = this.props.layoutConfig;
            const children = layoutJson.layout[parentGroupJson.groupName].children;
            const index = children.indexOf(toolName);
            if (index === children.length - 1) {
                return true;
            }
            if (index < children.length - 1) {
                let isLastElement = true;
                for (let i = (index + 1); i < children.length; i++) {
                    const elementName = children[i];
                    if (layoutJson.elements[children[i]].type === 'GROUP') {
                        continue;
                    }
                    else if ((!_tool_modules__WEBPACK_IMPORTED_MODULE_3__["default"][elementName].getIsNeedSetting() || (this.props.toolConfig && this.props.toolConfig[`can${elementName}`]) ||
                        (layoutJson.lockToolNames && layoutJson.lockToolNames.includes(elementName)))) {
                        isLastElement = false;
                        break;
                    }
                    else {
                        continue;
                    }
                }
                return isLastElement;
            }
        };
        this.handleToggleMobilePanel = () => {
            this.props.onActiveToolInfoChange(null);
        };
        this.handlePanelHeightChange = (panelWidth, panelHeight) => {
            this.setState({ bottomPanelHeight: panelHeight }, () => {
                this.checkResponsive();
            });
        };
        this.getMobilePanelInContext = () => {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_5__.MultiSourceMapContext.Consumer, null, ({ mobilePanelContainer, mapWidgetId }) => ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_4__.MobilePanel, { mapWidgetId: mapWidgetId, title: this.props.activeToolInfo && this.props.activeToolInfo.activeToolTitle, open: !!this.props.activeToolInfo, onClose: () => { this.handleToggleMobilePanel(); } },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 h-100', ref: (container) => { if (mobilePanelContainer && container) {
                        container.appendChild(mobilePanelContainer);
                    } } })))));
        };
        this.getGroupContent = (layoutJson) => {
            if (!layoutJson) {
                return this.returnNullNode();
            }
            else {
                const children = layoutJson.layout[this.props.groupName] && layoutJson.layout[this.props.groupName].children;
                if (this.checkIsShowGroup(layoutJson, children)) {
                    const groupClassName = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)(`exbmap-ui exbmap-ui-group exbmap-ui-group-${this.props.groupName}`, this.props.className, { 'exbmap-ui-hidden-element': this.props.isHidden });
                    const styleObj = this.props.layoutConfig.elements[this.props.groupName].style || {};
                    return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { id: (this.props.isMainGroup ? this.props.mapWidgetId : undefined), css: this.getStyle(), className: groupClassName, style: styleObj },
                        children.map((key, index) => {
                            var _a, _b;
                            if (!layoutJson.elements[key]) {
                                return this.returnNullNode(index);
                            }
                            if (layoutJson.elements[key].type === 'GROUP') {
                                return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(Group, { mapWidgetId: this.props.mapWidgetId, isHidden: this.checkIsHiddenElement(key), className: layoutJson.elements[key].className, style: layoutJson.elements[key].style, key: index, layoutConfig: layoutJson, toolConfig: this.props.toolConfig, isMobile: this.props.isMobile, intl: this.props.intl, jimuMapView: this.props.jimuMapView, groupName: key, activeToolInfo: this.props.activeToolInfo, hiddenElementNames: this.props.hiddenElementNames, onActiveToolInfoChange: this.props.onActiveToolInfoChange, theme: this.props.theme, isThumbMap: this.props.isMainGroup ? this.state.isThumbMap : this.props.isThumbMap, autoControlWidgetId: this.props.autoControlWidgetId, isRTL: this.props.isRTL }));
                            }
                            else if (layoutJson.elements[key].type === 'TOOL') {
                                const toolName = layoutJson.elements[key].toolName;
                                const viewType = (_b = (_a = this.props.jimuMapView) === null || _a === void 0 ? void 0 : _a.view) === null || _b === void 0 ? void 0 : _b.type;
                                // Navigation is not available for 2D MapView.
                                if ((toolName === 'Navigation' && viewType === '2d') || (toolName === 'ScaleBar' && viewType === '3d')) {
                                    return this.returnNullNode(index);
                                }
                                if (!_tool_modules__WEBPACK_IMPORTED_MODULE_3__["default"][key].getIsNeedSetting() || (this.props.toolConfig && this.props.toolConfig[`can${key}`]) || (layoutJson.lockToolNames && layoutJson.lockToolNames.includes(key))) {
                                    return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_base_tool_shell__WEBPACK_IMPORTED_MODULE_2__["default"], { mapWidgetId: this.props.mapWidgetId, isHidden: this.checkIsHiddenElement(key), key: index, layoutConfig: layoutJson, activeToolInfo: this.props.activeToolInfo, toolConfig: this.props.toolConfig, jimuMapView: this.props.jimuMapView, toolName: key, theme: this.props.theme, onActiveToolInfoChange: this.props.onActiveToolInfoChange, intl: this.props.intl, isMobile: this.props.isMobile, isLastElement: this.checkIsLastElement(layoutJson.elements[this.props.groupName], layoutJson.elements[key]), autoControlWidgetId: this.props.autoControlWidgetId }));
                                }
                                else {
                                    return this.returnNullNode(index);
                                }
                            }
                            else {
                                return this.returnNullNode(index);
                            }
                        }),
                        this.props.isMainGroup && this.props.isMobile && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactResizeDetector, { handleWidth: true, handleHeight: true, onResize: this.onResize }),
                        this.props.isMainGroup && this.props.isMobile && this.props.activeToolInfo && this.props.activeToolInfo.activeToolName !== 'Select' && this.getMobilePanelInContext(),
                        this.props.isMainGroup && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'exbmap-ui w-100', style: {
                                position: 'relative',
                                pointerEvents: 'auto',
                                overflow: 'hidden',
                                touchAction: 'none',
                                display: this.props.isMobile && !(this.state.isThumbMap || this.props.isThumbMap) ? 'block' : 'none'
                            } },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: `${this.props.mapWidgetId}-bottom-panel exbmap-ui w-100 expand-mobile-panel`, style: { overflow: 'hidden', pointerEvents: 'auto', position: 'relative', touchAction: 'none' } },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 h-100' },
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactResizeDetector, { handleHeight: true, onResize: this.handlePanelHeightChange }))))));
                }
                else {
                    return this.returnNullNode();
                }
            }
        };
        this.checkIsShowGroup = (layoutJson, children) => {
            if (!children || children.length === 0) {
                return false;
            }
            else {
                const toolNames = [];
                this.findAllToolNames(layoutJson, children, toolNames);
                let isShowGroup = false;
                for (let i = 0; i < toolNames.length; i++) {
                    if (this.props.toolConfig[`can${toolNames[i]}`] || !_tool_modules__WEBPACK_IMPORTED_MODULE_3__["default"][toolNames[i]].getIsNeedSetting() ||
                        (layoutJson.lockToolNames && layoutJson.lockToolNames.includes(toolNames[i]))) {
                        isShowGroup = true;
                        break;
                    }
                }
                return isShowGroup;
            }
        };
        this.findAllToolNames = (layoutJson, children, toolNames) => {
            if (!children || children.length === 0) {
                return;
            }
            for (let i = 0; i < children.length; i++) {
                const childName = children[i];
                const elementInfo = layoutJson.elements[childName];
                if (elementInfo.type === 'GROUP') {
                    const groupName = elementInfo.groupName;
                    this.findAllToolNames(layoutJson, layoutJson.layout[groupName] && layoutJson.layout[groupName].children, toolNames);
                }
                else {
                    toolNames.push(children[i]);
                }
            }
        };
        this.state = {
            bottomPanelHeight: 0,
            isThumbMap: !!this.props.isMobile
        };
    }
    componentDidMount() {
        this.checkResponsive();
    }
    render() {
        if (this.props.isMainGroup && this.props.isMobile && this.props.toolConfig && this.props.toolConfig.canSelect) {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { style: { position: 'absolute', top: 0, left: 0, bottom: 0, right: 0 } },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { id: `${this.props.mapWidgetId}-with-select-container`, style: { position: 'absolute', top: 0, left: 0, bottom: 0, right: 0 } },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 h-100', style: { position: 'relative' } }, this.getGroupContent(this.props.layoutConfig)))));
        }
        else {
            return this.getGroupContent(this.props.layoutConfig);
        }
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/panel-shell.tsx":
/*!**************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/panel-shell.tsx ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PanelShell)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

class PanelShell extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    componentWillUnmount() {
        if (this.props.onDestroyed) {
            this.props.onDestroyed();
        }
    }
    render() {
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.Fragment, null, this.props.children));
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/scroll-container.tsx":
/*!*******************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/scroll-container.tsx ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScrollContainer)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/** @jsx jsx */

class ScrollContainer extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor() {
        super(...arguments);
        this.moveY = 0;
        this.startY = 0;
        this.isRegisted = false;
        this.registerTouchEvent = (ref) => {
            if (ref && !this.isRegisted) {
                ref.addEventListener('touchstart', (event) => {
                    this.moveY = 0;
                    const touch = event.touches[0];
                    this.startY = touch.clientY;
                }, { passive: false });
                ref.addEventListener('touchmove', (event) => {
                    const touch = event.touches[0];
                    this.moveY = (touch.clientY - this.startY) * -1;
                    this.startY = touch.clientY;
                    ref.scrollTop = ref.scrollTop + this.moveY;
                }, { passive: false });
                ref.addEventListener('touchend', (event) => {
                    this.moveY = 0;
                    this.startY = 0;
                }, { passive: false });
                this.isRegisted = true;
            }
        };
    }
    getStyle() {
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      overflow: auto;
      pointer-events: auto;
      `;
    }
    render() {
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this.getStyle(), className: this.props.className, style: this.props.style, ref: ref => {
                this.registerTouchEvent(ref);
            } }, this.props.children));
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/ui-component.tsx":
/*!***************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/ui-component.tsx ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UIComponent: () => (/* binding */ UIComponent)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

class UIComponent extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/layout.tsx":
/*!****************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/layout.tsx ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MapToolLayout)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _base_group__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base/group */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/group.tsx");
/** @jsx jsx */


class MapToolLayout extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.getMaxHeightForPcExpand = (widgetHeight) => {
            if (!widgetHeight) {
                return null;
            }
            else {
                if (widgetHeight < 65) {
                    return null;
                }
                else {
                    const resultHeight = widgetHeight - 65;
                    if (resultHeight < 300) {
                        return resultHeight;
                    }
                    else {
                        return 300;
                    }
                }
            }
        };
        this.handSetHiddenElementNames = (elementNames) => {
            this.setState({
                hiddenElementNames: elementNames
            });
        };
        this.state = {
            toolsContentInMobileExpandPanel: null,
            hiddenElementNames: []
        };
    }
    getStyle() {
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      z-index: 8;
      pointer-events: none;

      .expand-panel-transition {
        transition: opacity 0.3s, right 0.3s;
      }

      .scale-attribution-xy-group {
        > div:first-of-type:nth-last-of-type(1) {
          width: 100%;
          max-width: 100% !important;
        }
      }

      .exbmap-ui-hidden-element {
        display: none !important;
      }

      .exbmap-ui-pc-expand-maxheight {
        max-height: ${this.getMaxHeightForPcExpand(this.props.widgetHeight)}px;
        overflow: auto
      }
      `;
    }
    getLayoutContent(layoutJson) {
        if (!layoutJson || !this.props.toolConfig) {
            return null;
        }
        else {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'exbmap-ui esri-ui-inner-container map-tool-layout', css: this.getStyle() }, Object.keys(layoutJson.layout).map((key, index) => {
                const elementItem = layoutJson.elements[key];
                const layoutItem = layoutJson.layout[key];
                if (!elementItem || elementItem.type !== 'GROUP' || !layoutItem.isMainGroup) {
                    return null;
                }
                const isRTL = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appContext.isRTL;
                return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_base_group__WEBPACK_IMPORTED_MODULE_1__["default"], { mapWidgetId: this.props.mapWidgetId, className: elementItem.className, style: elementItem.style, isMobile: this.props.isMobile, isMainGroup: true, key: index, layoutConfig: layoutJson, toolConfig: this.props.toolConfig, activeToolInfo: this.props.activeToolInfo, jimuMapView: this.props.jimuMapView, groupName: key, onActiveToolInfoChange: this.props.onActiveToolInfoChange, hiddenElementNames: layoutJson.mobileResponsiveStrategy && this.state.hiddenElementNames, intl: this.props.intl, onSetHiddenElementNames: this.handSetHiddenElementNames, theme: this.props.theme, autoControlWidgetId: this.props.autoControlWidgetId, isRTL: isRTL }));
            })));
        }
    }
    componentDidUpdate(prevProps) {
        if (prevProps.appMode !== this.props.appMode && this.props.appMode === jimu_core__WEBPACK_IMPORTED_MODULE_0__.AppMode.Design) {
            this.props.onActiveToolInfoChange(null);
        }
    }
    render() {
        return this.getLayoutContent(this.props.layoutConfig);
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/map-fixed-layout.tsx":
/*!**************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/map-fixed-layout.tsx ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Layout)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-layouts/layout-runtime */ "jimu-layouts/layout-runtime");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/utils.ts");
/** @jsx jsx */



class Layout extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.getMapFixedLayout = () => {
            // #1197, #2960
            if (window.jimuConfig.isInBuilder) {
                const LayoutEntry = this.props.LayoutEntry;
                const layout = this.props.layouts && this.props.layouts.MapFixedLayout;
                return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(LayoutEntry, { layouts: layout || null, isInWidget: true, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('w-100 h-100 map-fix-layout', { 'widget-map-usemask': !(0,_utils__WEBPACK_IMPORTED_MODULE_2__.checkIsLive)(this.props.appMode), 'map-is-live-mode': (0,_utils__WEBPACK_IMPORTED_MODULE_2__.checkIsLive)(this.props.appMode) }) }));
            }
            else {
                const layout = this.props.layouts && this.props.layouts.MapFixedLayout;
                return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_1__.LayoutEntry, { layouts: layout ? (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable)(layout) : null, className: 'w-100 h-100 map-is-live-mode map-fix-layout' });
            }
        };
        this.state = {};
    }
    render() {
        return this.getMapFixedLayout();
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/mobile-layout-json.ts":
/*!***************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/mobile-layout-json.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const mobileLayoutJson = {
    elements: {
        mainGroup: {
            type: 'GROUP',
            groupName: 'mainGroup',
            direction: 'vertical',
            className: 'd-flex flex-column',
            style: {
                position: 'absolute',
                top: '0px',
                left: '0px',
                bottom: '0px',
                right: '0px'
            }
        },
        topGroup: {
            type: 'GROUP',
            groupName: 'topGroup',
            direction: 'horizontal',
            className: 'd-flex w-100 align-items-center justify-content-between',
            style: {
                padding: '10px 10px 0 10px'
            }
        },
        midGroup: {
            type: 'GROUP',
            groupName: 'midGroup',
            direction: 'horizontal',
            className: 'flex-grow-1 d-flex w-100 justify-content-between',
            style: {
                position: 'relative'
            }
        },
        bottomGroup: {
            type: 'GROUP',
            groupName: 'bottomGroup',
            direction: 'horizontal',
            className: 'd-flex w-100 align-items-center justify-content-between'
        },
        'midGroup-left-top': {
            type: 'GROUP',
            groupName: 'midGroup-left-top',
            direction: 'vertical',
            style: {
                position: 'absolute',
                left: '0px',
                top: '0px'
            }
        },
        'midGroup-left-bottom': {
            type: 'GROUP',
            groupName: 'midGroup-left-bottom',
            direction: 'vertical',
            className: 'd-flex flex-column',
            isVerticalRrlAlignItemsStart: true,
            style: {
                position: 'absolute',
                left: '0px',
                bottom: '0px'
            }
        },
        'midGroup-right-content-top': {
            type: 'GROUP',
            groupName: 'midGroup-right-content-top',
            direction: 'vertical',
            style: {
                position: 'absolute',
                top: '0px',
                right: '10px'
            }
        },
        'midGroup-right-content-bottom': {
            type: 'GROUP',
            groupName: 'midGroup-right-content-bottom',
            direction: 'vertical',
            style: {
                position: 'absolute',
                bottom: '10px',
                right: '10px'
            }
        },
        Search: {
            type: 'TOOL',
            toolName: 'Search',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            className: 'flex-grow-1'
        },
        FullScreen: {
            type: 'TOOL',
            toolName: 'FullScreen',
            isOnlyExpanded: false,
            isShowIconTitle: true,
            style: {
                marginLeft: '10px'
            }
        },
        Locate: {
            type: 'TOOL',
            toolName: 'Locate',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            style: {
                marginTop: '10px'
            }
        },
        ClearActionData: {
            type: 'TOOL',
            toolName: 'ClearActionData',
            isOnlyExpanded: true,
            isShowIconTitle: false
        },
        Compass: {
            type: 'TOOL',
            toolName: 'Compass',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            className: 'mb-0',
            style: {
                marginLeft: '10px',
                marginTop: '10px'
            }
        },
        MapSwitch: {
            type: 'TOOL',
            toolName: 'MapSwitch',
            isOnlyExpanded: true,
            isShowIconTitle: true,
            style: {
                marginLeft: '10px',
                marginBottom: '10px'
            }
        },
        Zoom: {
            type: 'TOOL',
            toolName: 'Zoom',
            isOnlyExpanded: true,
            isShowIconTitle: false
        },
        Home: {
            type: 'TOOL',
            toolName: 'Home',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            style: {
                marginTop: '10px'
            }
        },
        ExtentNavigate: {
            type: 'TOOL',
            toolName: 'ExtentNavigate',
            isOnlyExpanded: true,
            isShowIconTitle: true,
            style: {
                marginLeft: '10px',
                marginBottom: '10px'
            }
        },
        Layers: {
            type: 'TOOL',
            toolName: 'Layers',
            isOnlyExpanded: false,
            isShowIconTitle: true,
            panelPlacement: 'left-start',
            style: {
                marginTop: '10px'
            }
        },
        BaseMap: {
            type: 'TOOL',
            toolName: 'BaseMap',
            isOnlyExpanded: false,
            isShowIconTitle: true,
            panelPlacement: 'left-start',
            style: {
                marginTop: '10px'
            }
        },
        Select: {
            type: 'TOOL',
            toolName: 'Select',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            style: {
                marginTop: '10px'
            }
        },
        SelectState: {
            type: 'TOOL',
            toolName: 'SelectState',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            style: {
                width: '100%'
            }
        },
        Measure: {
            type: 'TOOL',
            toolName: 'Measure',
            isOnlyExpanded: false,
            isShowIconTitle: true,
            panelPlacement: 'left-start',
            style: {
                marginTop: '10px'
            }
        },
        ScaleBar: {
            type: 'TOOL',
            toolName: 'ScaleBar',
            isOnlyExpanded: true,
            isShowIconTitle: false
        }
    },
    layout: {
        mainGroup: {
            isMainGroup: true,
            children: ['topGroup', 'midGroup', 'bottomGroup']
        },
        topGroup: {
            children: ['Search', 'FullScreen']
        },
        midGroup: {
            children: ['midGroup-left-top', 'midGroup-left-bottom', 'midGroup-right-content-top', 'midGroup-right-content-bottom']
        },
        'midGroup-left-top': {
            children: ['Compass']
        },
        'midGroup-left-bottom': {
            children: ['ExtentNavigate', 'MapSwitch', 'ScaleBar']
        },
        'midGroup-right-content-top': {
            children: ['Layers', 'BaseMap', 'Measure', 'Select']
        },
        'midGroup-right-content-bottom': {
            children: ['Zoom', 'Home', 'Locate', 'ClearActionData']
        },
        bottomGroup: {
            children: ['SelectState']
        }
    },
    mobileResponsiveStrategy: {
        // height: 400-465
        stage1: ['Measure', 'Locate'],
        // height: 320-400
        stage2: ['Measure', 'Select', 'Locate', 'bottomGroup'],
        // height: 250-320
        stage3: ['ExtentNavigate', 'midGroup-right-content-top', 'Locate', 'bottomGroup'],
        // height: 160-250
        stage4: ['MapSwitch', 'midGroup-right-content-top', 'Home', 'Locate', 'ClearActionData', 'bottomGroup'],
        // height: 54-160
        stage5: ['midGroup', 'bottomGroup'],
        // height: 0-54
        stage6: ['topGroup', 'midGroup', 'bottomGroup']
    },
    lockToolNames: []
};
const mobileLayoutJsons = [mobileLayoutJson];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mobileLayoutJsons);


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/pc-layout-json.ts":
/*!***********************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/pc-layout-json.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const layoutJson1 = {
    elements: {
        leftTopContainer: {
            type: 'GROUP',
            groupName: 'leftTopContainer',
            direction: 'horizontal',
            style: {
                position: 'absolute',
                top: '15px',
                left: '15px'
            }
        },
        navigator: {
            type: 'GROUP',
            groupName: 'navigator',
            direction: 'vertical',
            style: {
                marginRight: '10px'
            }
        },
        interact: {
            type: 'GROUP',
            groupName: 'interact',
            direction: 'vertical',
            isResponsive: true,
            style: {
                position: 'absolute',
                top: '15px',
                right: '15px'
            }
        },
        bottom: {
            type: 'GROUP',
            groupName: 'bottom',
            direction: 'vertical',
            className: 'w-100',
            style: {
                position: 'absolute',
                bottom: '0px',
                left: '0px'
            }
        },
        'bottom-line1': {
            type: 'GROUP',
            groupName: 'bottom-line1',
            direction: 'horizontal',
            className: 'd-flex align-items-center justify-content-between w-100 scale-attribution-xy-group',
            style: {
                marginBottom: '0px',
                marginTop: '0px'
            }
        },
        'bottom-line2': {
            type: 'GROUP',
            groupName: 'bottom-line2',
            direction: 'horizontal',
            className: 'd-flex align-items-end justify-content-between w-100',
            style: {
                paddingLeft: '15px',
                paddingRight: '15px',
                marginBottom: '10px'
            }
        },
        'SelectState-FullScreen-Container': {
            type: 'GROUP',
            groupName: 'SelectState-FullScreen-Container',
            direction: 'vertical',
            isVerticalRrlAlignItemsEnd: true
        },
        attributionGroup: {
            type: 'GROUP',
            groupName: 'attributionGroup',
            direction: 'horizontal',
            style: {
                maxWidth: '60%'
            }
        },
        Zoom: {
            type: 'TOOL',
            toolName: 'Zoom',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            style: {
                marginBottom: '10px'
            }
        },
        Home: {
            type: 'TOOL',
            toolName: 'Home',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            style: {
                marginBottom: '10px'
            }
        },
        Compass: {
            type: 'TOOL',
            toolName: 'Compass',
            isOnlyExpanded: true,
            isShowIconTitle: false
        },
        Navigation: {
            type: 'TOOL',
            toolName: 'Navigation',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            style: {
                marginBottom: '10px'
            }
        },
        Locate: {
            type: 'TOOL',
            toolName: 'Locate',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            style: {
                marginBottom: '10px'
            }
        },
        Layers: {
            type: 'TOOL',
            toolName: 'Layers',
            isOnlyExpanded: false,
            isShowIconTitle: true,
            panelPlacement: 'left-start',
            style: {
                marginBottom: '10px'
            }
        },
        BaseMap: {
            type: 'TOOL',
            toolName: 'BaseMap',
            isOnlyExpanded: false,
            isShowIconTitle: true,
            panelPlacement: 'left-start',
            style: {
                marginBottom: '10px'
            }
        },
        Select: {
            type: 'TOOL',
            toolName: 'Select',
            isOnlyExpanded: true,
            isShowIconTitle: true
        },
        SelectState: {
            type: 'TOOL',
            toolName: 'SelectState',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            style: {
                marginTop: '10px',
                boxShadow: '0 1px 2px 0 rgba(0,0,0,0)'
            }
        },
        ExtentNavigate: {
            type: 'TOOL',
            toolName: 'ExtentNavigate',
            isOnlyExpanded: true,
            isShowIconTitle: true,
            style: {
                marginBottom: '10px'
            }
        },
        Measure: {
            type: 'TOOL',
            toolName: 'Measure',
            isOnlyExpanded: false,
            isShowIconTitle: true,
            panelPlacement: 'left-start'
        },
        MapSwitch: {
            type: 'TOOL',
            toolName: 'MapSwitch',
            isOnlyExpanded: true,
            isShowIconTitle: true
        },
        FullScreen: {
            type: 'TOOL',
            toolName: 'FullScreen',
            isOnlyExpanded: false,
            isShowIconTitle: true
        },
        ClearActionData: {
            type: 'TOOL',
            toolName: 'ClearActionData',
            isOnlyExpanded: true,
            isShowIconTitle: false
        },
        ScaleBar: {
            type: 'TOOL',
            toolName: 'ScaleBar',
            isOnlyExpanded: true,
            isShowIconTitle: false
        },
        Attribution: {
            type: 'TOOL',
            toolName: 'Attribution',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            className: 'w-100'
        },
        Search: {
            type: 'TOOL',
            toolName: 'Search',
            isOnlyExpanded: false,
            isShowIconTitle: true,
            panelPlacement: 'left-start',
            style: {
                marginBottom: '10px'
            }
        }
    },
    layout: {
        leftTopContainer: {
            isMainGroup: true,
            children: ['navigator', 'Select']
        },
        navigator: {
            children: ['Zoom', 'Home', 'Navigation', 'ExtentNavigate', 'Locate', 'Compass']
        },
        interact: {
            isMainGroup: true,
            children: ['Search', 'Layers', 'BaseMap', 'Measure']
        },
        'bottom-line1': {
            children: ['ScaleBar', 'attributionGroup']
        },
        'bottom-line2': {
            children: ['MapSwitch', 'SelectState-FullScreen-Container']
        },
        'SelectState-FullScreen-Container': {
            children: ['FullScreen', 'ClearActionData', 'SelectState']
        },
        bottom: {
            isMainGroup: true,
            children: ['bottom-line2', 'bottom-line1']
        },
        attributionGroup: {
            children: ['Attribution']
        }
    }
};
const layoutJson2 = {
    elements: {
        navigator: {
            type: 'GROUP',
            groupName: 'navigator',
            direction: 'vertical',
            isVerticalRrlAlignItemsEnd: true
        },
        interact: {
            type: 'GROUP',
            groupName: 'interact',
            direction: 'horizontal',
            isResponsive: true,
            style: {
                position: 'absolute',
                top: '15px',
                left: '15px'
            }
        },
        fullScreenGroup: {
            type: 'GROUP',
            groupName: 'fullScreenGroup',
            direction: 'horizontal',
            style: {
                position: 'absolute',
                top: '15px',
                right: '15px'
            }
        },
        bottom: {
            type: 'GROUP',
            groupName: 'bottom',
            direction: 'vertical',
            className: 'w-100',
            style: {
                position: 'absolute',
                bottom: '0px',
                left: '0px'
            }
        },
        'bottom-line1': {
            type: 'GROUP',
            groupName: 'bottom-line1',
            direction: 'horizontal',
            className: 'd-flex align-items-center justify-content-between w-100 scale-attribution-xy-group',
            style: {
                marginBottom: '0px',
                marginTop: '0px'
            }
        },
        'bottom-line2': {
            type: 'GROUP',
            groupName: 'bottom-line2',
            direction: 'horizontal',
            className: 'd-flex align-items-end justify-content-between w-100',
            style: {
                paddingLeft: '15px',
                paddingRight: '15px',
                marginBottom: '10px'
            }
        },
        attributionGroup: {
            type: 'GROUP',
            groupName: 'attributionGroup',
            direction: 'horizontal',
            style: {
                maxWidth: '60%'
            },
            className: 'attibute-group'
        },
        Zoom: {
            type: 'TOOL',
            toolName: 'Zoom',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            style: {
                marginTop: '10px'
            }
        },
        Home: {
            type: 'TOOL',
            toolName: 'Home',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            style: {
                marginTop: '10px'
            }
        },
        Compass: {
            type: 'TOOL',
            toolName: 'Compass',
            isOnlyExpanded: true,
            isShowIconTitle: false
        },
        Navigation: {
            type: 'TOOL',
            toolName: 'Navigation',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            style: {
                marginTop: '10px'
            }
        },
        Locate: {
            type: 'TOOL',
            toolName: 'Locate',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            style: {
                marginTop: '10px'
            }
        },
        ExtentNavigate: {
            type: 'TOOL',
            toolName: 'ExtentNavigate',
            isOnlyExpanded: true,
            isShowIconTitle: true,
            style: {
                marginTop: '10px'
            }
        },
        Layers: {
            type: 'TOOL',
            toolName: 'Layers',
            isOnlyExpanded: false,
            isShowIconTitle: true,
            panelPlacement: 'bottom',
            style: {
                marginRight: '10px'
            }
        },
        BaseMap: {
            type: 'TOOL',
            toolName: 'BaseMap',
            isOnlyExpanded: false,
            isShowIconTitle: true,
            panelPlacement: 'bottom',
            style: {
                marginRight: '10px'
            }
        },
        Select: {
            type: 'TOOL',
            toolName: 'Select',
            isOnlyExpanded: true,
            isShowIconTitle: true
        },
        SelectState: {
            type: 'TOOL',
            toolName: 'SelectState',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            style: {
                marginTop: '10px',
                boxShadow: '0 1px 2px 0 rgba(0,0,0,0)'
            }
        },
        Measure: {
            type: 'TOOL',
            toolName: 'Measure',
            isOnlyExpanded: false,
            isShowIconTitle: true,
            panelPlacement: 'bottom',
            style: {
                marginRight: '10px'
            }
        },
        MapSwitch: {
            type: 'TOOL',
            toolName: 'MapSwitch',
            isOnlyExpanded: true,
            isShowIconTitle: true
        },
        FullScreen: {
            type: 'TOOL',
            toolName: 'FullScreen',
            isOnlyExpanded: false,
            isShowIconTitle: true
        },
        ClearActionData: {
            type: 'TOOL',
            toolName: 'ClearActionData',
            isOnlyExpanded: true,
            isShowIconTitle: false
        },
        ScaleBar: {
            type: 'TOOL',
            toolName: 'ScaleBar',
            isOnlyExpanded: true,
            isShowIconTitle: false
        },
        Attribution: {
            type: 'TOOL',
            toolName: 'Attribution',
            isOnlyExpanded: true,
            isShowIconTitle: false,
            className: 'w-100'
        },
        Search: {
            type: 'TOOL',
            toolName: 'Search',
            isOnlyExpanded: false,
            isShowIconTitle: true,
            panelPlacement: 'bottom',
            style: {
                marginRight: '10px'
            }
        }
    },
    layout: {
        navigator: {
            children: ['Compass', 'Locate', 'ExtentNavigate', 'Navigation', 'Zoom', 'Home', 'SelectState']
        },
        interact: {
            isMainGroup: true,
            children: ['Search', 'Layers', 'BaseMap', 'Measure', 'Select']
        },
        fullScreenGroup: {
            isMainGroup: true,
            children: ['FullScreen', 'ClearActionData']
        },
        'bottom-line1': {
            children: ['ScaleBar', 'attributionGroup']
        },
        'bottom-line2': {
            children: ['MapSwitch', 'navigator']
        },
        bottom: {
            isMainGroup: true,
            children: ['bottom-line2', 'bottom-line1']
        },
        attributionGroup: {
            children: ['Attribution']
        }
    }
};
const layoutJsons = [layoutJson1, layoutJson2];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (layoutJsons);


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/tool-modules.ts":
/*!*********************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/tool-modules.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _tools_zoom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tools/zoom */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/zoom.tsx");
/* harmony import */ var _tools_home__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tools/home */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/home.tsx");
/* harmony import */ var _tools_compass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tools/compass */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/compass.tsx");
/* harmony import */ var _tools_locate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tools/locate */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/locate.tsx");
/* harmony import */ var _tools_clear_action_data__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../tools/clear-action-data */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/clear-action-data.tsx");
/* harmony import */ var _tools_navigation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tools/navigation */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/navigation.tsx");
/* harmony import */ var _tools_search__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../tools/search */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/search.tsx");
/* harmony import */ var _tools_layers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../tools/layers */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/layers.tsx");
/* harmony import */ var _tools_basemap__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../tools/basemap */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/basemap.tsx");
/* harmony import */ var _tools_mapswitch__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../tools/mapswitch */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/mapswitch.tsx");
/* harmony import */ var _tools_fullscreen__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../tools/fullscreen */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/fullscreen.tsx");
/* harmony import */ var _tools_scalebar__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../tools/scalebar */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/scalebar.tsx");
/* harmony import */ var _tools_attribution__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../tools/attribution */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/attribution.tsx");
/* harmony import */ var _tools_measure__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../tools/measure */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/measure.tsx");
/* harmony import */ var _tools_select__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../tools/select */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/select/index.tsx");
/* harmony import */ var _tools_selectstate__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../tools/selectstate */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/selectstate/index.tsx");
/* harmony import */ var _tools_extent_navigate__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../tools/extent-navigate */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/extent-navigate.tsx");

















const ToolModules = {
    Zoom: _tools_zoom__WEBPACK_IMPORTED_MODULE_0__["default"],
    Home: _tools_home__WEBPACK_IMPORTED_MODULE_1__["default"],
    Navigation: _tools_navigation__WEBPACK_IMPORTED_MODULE_5__["default"],
    Locate: _tools_locate__WEBPACK_IMPORTED_MODULE_3__["default"],
    ClearActionData: _tools_clear_action_data__WEBPACK_IMPORTED_MODULE_4__["default"],
    Compass: _tools_compass__WEBPACK_IMPORTED_MODULE_2__["default"],
    Search: _tools_search__WEBPACK_IMPORTED_MODULE_6__["default"],
    Layers: _tools_layers__WEBPACK_IMPORTED_MODULE_7__["default"],
    BaseMap: _tools_basemap__WEBPACK_IMPORTED_MODULE_8__["default"],
    Measure: _tools_measure__WEBPACK_IMPORTED_MODULE_13__["default"],
    MapSwitch: _tools_mapswitch__WEBPACK_IMPORTED_MODULE_9__["default"],
    FullScreen: _tools_fullscreen__WEBPACK_IMPORTED_MODULE_10__["default"],
    ScaleBar: _tools_scalebar__WEBPACK_IMPORTED_MODULE_11__["default"],
    Attribution: _tools_attribution__WEBPACK_IMPORTED_MODULE_12__["default"],
    Select: _tools_select__WEBPACK_IMPORTED_MODULE_14__["default"],
    SelectState: _tools_selectstate__WEBPACK_IMPORTED_MODULE_15__["default"],
    ExtentNavigate: _tools_extent_navigate__WEBPACK_IMPORTED_MODULE_16__["default"]
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ToolModules);


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/attribution.tsx":
/*!********************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/attribution.tsx ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Attribution)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");



class Attribution extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor() {
        super(...arguments);
        this.toolName = 'Attribution';
    }
    static getIsNeedSetting() {
        return false;
    }
    getTitle() {
        return 'Attribution';
    }
    getIcon() {
        return null;
    }
    getExpandPanel() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(AttributionInner, { jimuMapView: this.props.jimuMapView });
    }
}
class AttributionInner extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.Attribution = null;
        this.state = {
            apiLoaded: false
        };
    }
    componentDidMount() {
        if (!this.state.apiLoaded) {
            (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)(['esri/widgets/Attribution']).then(modules => {
                [this.Attribution] = modules;
                this.setState({
                    apiLoaded: true
                });
            });
        }
    }
    componentDidUpdate(prevProps) {
        if (this.state.apiLoaded && this.container) {
            if (prevProps.jimuMapView && this.props.jimuMapView && (prevProps.jimuMapView.id !== this.props.jimuMapView.id)) {
                if (this.AttributionBtn && !this.AttributionBtn.destroy) {
                    this.AttributionBtn.view = this.props.jimuMapView.view;
                    this.AttributionBtn.renderNow();
                    this.props.jimuMapView.addJimuMapTool({
                        name: 'Attribution',
                        instance: this.AttributionBtn
                    });
                }
            }
            else {
                this.AttributionBtn = new this.Attribution({
                    container: this.container,
                    view: this.props.jimuMapView.view
                });
                this.props.jimuMapView.deleteJimuMapTool('Attribution');
                this.props.jimuMapView.addJimuMapTool({
                    name: 'Attribution',
                    instance: this.AttributionBtn
                });
            }
        }
    }
    componentWillUnmount() {
        if (this.AttributionBtn) {
            this.AttributionBtn.destroy();
            this.AttributionBtn = null;
            this.props.jimuMapView.deleteJimuMapTool('Attribution');
        }
    }
    render() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'attribution-map-tool', style: { position: 'relative' }, ref: ref => { this.container = ref; } });
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/basemap.tsx":
/*!****************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/basemap.tsx ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BaseMap)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");





class BaseMap extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor() {
        super(...arguments);
        this.toolName = 'BaseMap';
    }
    getTitle() {
        return this.props.intl.formatMessage({ id: 'BaseMapLabel', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_3__.defaultMessages.BaseMapLabel });
    }
    getIcon() {
        return {
            icon: __webpack_require__(/*! ../assets/icons/basemap.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/basemap.svg")
        };
    }
    getExpandPanel() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(BaseMapInner, { jimuMapView: this.props.jimuMapView, isMobile: this.props.isMobile });
    }
}
class BaseMapInner extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.__unmount = false;
        this.state = {
            apiLoaded: false,
            sourceLoaded: false
        };
    }
    componentDidMount() {
        if (!this.state.apiLoaded) {
            (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)(['esri/widgets/BasemapGallery', 'esri/widgets/BasemapGallery/support/LocalBasemapsSource']).then(modules => {
                if (this.__unmount) {
                    return;
                }
                [this.BasemapGallery, this.LocalBasemapsSource] = modules;
                this.setState({
                    apiLoaded: true
                });
            });
        }
        if (!this.state.sourceLoaded) {
            jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.basemapUtils.getOrgBasemaps().then((basemaps) => {
                if (this.__unmount) {
                    return;
                }
                this.orgBasemaps = basemaps;
                this.setState({
                    sourceLoaded: true
                });
            }).catch(err => {
                console.error(`load basemap gallery source error: ${err}`);
            });
        }
    }
    componentDidUpdate(prevProps) {
        if (this.state.apiLoaded && this.state.sourceLoaded && this.container) {
            if (this.basemapGallery) {
                // basemapGallery already created
                const isViewChanged = prevProps.jimuMapView && this.props.jimuMapView && (prevProps.jimuMapView.id !== this.props.jimuMapView.id);
                if (isViewChanged) {
                    // view changed
                    this.basemapGallery.view = this.props.jimuMapView.view;
                    this.basemapGallery.source = this.getFinalBasemapGallerySource(this.orgBasemaps);
                    this.basemapGallery.renderNow();
                }
            }
            else {
                // basemapGallery not created
                const source = this.getFinalBasemapGallerySource(this.orgBasemaps);
                this.basemapGallery = new this.BasemapGallery({
                    container: this.container,
                    view: this.props.jimuMapView.view,
                    source,
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment, @typescript-eslint/prefer-ts-expect-error
                    // @ts-ignore
                    includeCurrentBasemap: true
                });
                this.props.jimuMapView.deleteJimuMapTool('BaseMap');
                this.props.jimuMapView.addJimuMapTool({
                    name: 'BaseMap',
                    instance: this.basemapGallery
                });
            }
        }
    }
    getFinalBasemapGallerySource(orgBasemaps) {
        const finalBasemaps = orgBasemaps.slice();
        const source = new this.LocalBasemapsSource({
            basemaps: finalBasemaps
        });
        return source;
    }
    componentWillUnmount() {
        this.__unmount = true;
        if (this.basemapGallery) {
            this.basemapGallery.destroy();
            this.basemapGallery = null;
            this.props.jimuMapView.deleteJimuMapTool('BaseMap');
        }
    }
    render() {
        if (this.props.isMobile) {
            return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'basemap-map-tool', ref: ref => { this.container = ref; }, style: { width: '100%', minHeight: '32px', maxWidth: 'none', maxHeight: 'none', overflowY: 'auto', position: 'relative' } }, !this.state.apiLoaded && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'exbmap-basetool-loader' })));
        }
        else {
            return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { ref: ref => { this.container = ref; }, style: { width: '250px', minHeight: '32px', position: 'relative' }, className: 'exbmap-ui-pc-expand-maxheight basemap-map-tool' }, !this.state.apiLoaded && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'exbmap-basetool-loader' })));
        }
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/clear-action-data.tsx":
/*!**************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/clear-action-data.tsx ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ClearActionData)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var _components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/multisourcemap-context */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap-context.ts");
/** @jsx jsx */





class ClearActionData extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_3__.BaseTool {
    constructor(props) {
        super(props);
        this.toolName = 'ClearActionData';
        this.onIconClick = () => { };
        this.onDropDownToggle = () => {
            this.setState({ isOpen: !this.state.isOpen });
        };
        this.onItemClick = (listItem, mapWidgetId) => {
            var _a, _b, _c;
            this.setState({ isOpen: false });
            const layerId = listItem.layerId;
            const mutableState = jimu_core__WEBPACK_IMPORTED_MODULE_0__.MutableStoreManager.getInstance().getStateValue([mapWidgetId]) || {};
            if (listItem.isAction) {
                // this item comes from ShowOnMap/AddToMap actions, remove it by mutableStoreManager.updateStateValue().
                const actionDataId = layerId;
                const showOnMapDatas = mutableState.showOnMapDatas;
                const addToMapDatas = mutableState.addToMapDatas;
                if (showOnMapDatas) {
                    delete showOnMapDatas[actionDataId];
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.MutableStoreManager.getInstance().updateStateValue(mapWidgetId, 'showOnMapDatas', showOnMapDatas);
                }
                if (addToMapDatas && ((_a = addToMapDatas[actionDataId]) === null || _a === void 0 ? void 0 : _a.dataChangeType) === jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__.DataChangeType.Created) {
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.MutableStoreManager.getInstance().updateStateValue(mapWidgetId, `addToMapDatas.${actionDataId}.dataChangeType`, jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__.DataChangeType.Remove);
                }
            }
            else {
                // this item comes from JimuLayerView.removeableByMapTool
                // just remove the layer from map, don't need to update removeableLayerIdsInfo (only update removeableLayerIdsInfo when calling JimuLayerView.setRemoveableByMapTool())
                const map = (_c = (_b = this.props.jimuMapView) === null || _b === void 0 ? void 0 : _b.view) === null || _c === void 0 ? void 0 : _c.map;
                if (map) {
                    const layer = map.findLayerById(layerId);
                    if (layer) {
                        map.remove(layer);
                    }
                }
            }
        };
        this.getContent = (mapWidgetId) => {
            const listItems = this.getListItems(mapWidgetId);
            const dropdownItems = listItems.map((listItem, index) => this.createDropdownItem(listItem, mapWidgetId, index));
            if (dropdownItems.length > 0) {
                return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this.getStyle(), title: this.getTitle() },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.Dropdown, { direction: 'down', size: 'sm', toggle: this.onDropDownToggle, isOpen: this.state.isOpen },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.DropdownButton, { icon: true, arrow: false, size: 'sm', type: 'default' },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.Icon, { size: 16, className: 'exbmap-ui-tool-icon', icon: this.getIcon().icon })),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.DropdownMenu, null, dropdownItems))));
            }
            return null;
        };
        this.state = { isOpen: false };
    }
    static getIsNeedSetting() {
        return false;
    }
    getStyle() {
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      .jimu-dropdown {
        display: flex;
        .icon-btn {
          padding: 7px;
          border-radius: 0;
        }
      }
    `;
    }
    getTitle() {
        return this.props.intl.formatMessage({ id: 'clearResults', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.clearResults });
    }
    getIcon() {
        return {
            icon: __webpack_require__(/*! jimu-icons/svg/outlined/editor/trash.svg */ "./jimu-icons/svg/outlined/editor/trash.svg"),
            onIconClick: () => {
                this.onIconClick();
            }
        };
    }
    getListItems(mapWidgetId) {
        const mapMutableState = jimu_core__WEBPACK_IMPORTED_MODULE_0__.MutableStoreManager.getInstance().getStateValue([mapWidgetId]) || {};
        const listItems1 = this.getListItemsByAddOrShowOnMapDatas(mapWidgetId, mapMutableState);
        const layerIds1 = listItems1.map(listItem => listItem.layerId);
        let listItems2 = this.getListItemsByRemoveableLayerIdsInfo(mapMutableState);
        // one layerId maybe both in showOnMapDatas/addToMapDatas and removeableLayerIdsInfo, so need to remove repeat items
        listItems2 = listItems2.filter(listItem => !layerIds1.includes(listItem.layerId));
        const result = listItems1.concat(listItems2);
        return result;
    }
    /**
     * Only show layers that crated by data actions. The layers maybe crated by showOnMap data action or addToMap data action.
     * @param mapWidgetId
     * @returns
     */
    getListItemsByAddOrShowOnMapDatas(mapWidgetId, mapMutableState) {
        const showOnMapDatas = (mapMutableState === null || mapMutableState === void 0 ? void 0 : mapMutableState.showOnMapDatas) || {};
        const addToMapDatas = (mapMutableState === null || mapMutableState === void 0 ? void 0 : mapMutableState.addToMapDatas) || {};
        const showOnMapDataInfos = Object.entries(showOnMapDatas).map(entry => {
            return {
                id: entry[0],
                title: entry[1].title,
                jimuMapViewId: entry[1].jimuMapViewId,
                mapWidgetId: entry[1].mapWidgetId,
                needToRemove: true,
                type: entry[1].type
            };
        });
        const addToMapDataInfos = Object.entries(addToMapDatas).map(entry => {
            return {
                id: entry[0],
                title: entry[1].title,
                jimuMapViewId: entry[1].jimuMapViewId,
                mapWidgetId: entry[1].mapWidgetId,
                needToRemove: entry[1].dataChangeType === jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__.DataChangeType.Created,
                type: entry[1].type
            };
        });
        const dataActionInfos = showOnMapDataInfos.concat(addToMapDataInfos).filter(dataInfo => {
            // There is no jimuMapViewId while generating the action data if the map widget hasn't been loaded in the another page/view,
            // use a default jimuMapViewId to show data.
            let jimuMapViewId = dataInfo.jimuMapViewId;
            if (!jimuMapViewId && dataInfo.mapWidgetId === mapWidgetId) {
                const jimuMapViewsInfo = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().jimuMapViewsInfo;
                jimuMapViewId = Object.keys(jimuMapViewsInfo || {}).find(viewId => jimuMapViewsInfo[viewId].mapWidgetId === mapWidgetId);
            }
            return (jimuMapViewId === this.props.jimuMapView.id && dataInfo.type === jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__.ActionType.DataAction && dataInfo.needToRemove);
        });
        const dataActionListItems = dataActionInfos.map((item) => {
            const listItem = {
                layerId: item.id,
                title: item.title,
                isAction: true
            };
            return listItem;
        });
        return dataActionListItems;
    }
    /**
     * Get list items by JimuLayerView.removeableByMapTool.
     * @param mutableState
     */
    getListItemsByRemoveableLayerIdsInfo(mutableState) {
        var _a;
        const listItems = [];
        const removeableLayerIdsInfo = (mutableState === null || mutableState === void 0 ? void 0 : mutableState.removeableLayerIdsInfo) || {};
        const jimuMapView = this.props.jimuMapView;
        if (jimuMapView) {
            const map = (_a = jimuMapView.view) === null || _a === void 0 ? void 0 : _a.map;
            if (map) {
                const removeableLayerIds = removeableLayerIdsInfo[jimuMapView.id] || [];
                removeableLayerIds.forEach(layerId => {
                    const layer = map.findLayerById(layerId);
                    if (layer) {
                        const title = layer.title || layerId;
                        const listItem = {
                            layerId,
                            title,
                            isAction: false
                        };
                        listItems.push(listItem);
                    }
                });
            }
        }
        return listItems;
    }
    createDropdownItem(listItem, mapWidgetId, index) {
        const key = `${listItem.layerId}-index-${index}`;
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_2__.DropdownItem, { key: key, header: false, onClick: () => { this.onItemClick(listItem, mapWidgetId); } }, listItem.title));
    }
    getExpandPanel() {
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_4__.MultiSourceMapContext.Consumer, null, ({ mapWidgetId }) => (this.getContent(mapWidgetId))));
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/compass.tsx":
/*!****************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/compass.tsx ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Compass)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");




class Compass extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor() {
        super(...arguments);
        this.toolName = 'Compass';
    }
    getTitle() {
        return this.props.intl.formatMessage({ id: 'CompassLabel', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_3__.defaultMessages.CompassLabel });
    }
    getIcon() {
        return null;
    }
    getExpandPanel() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(CompassInner, { jimuMapView: this.props.jimuMapView });
    }
}
class CompassInner extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.Compass = null;
        this.state = {
            apiLoaded: false
        };
    }
    componentDidMount() {
        if (!this.state.apiLoaded) {
            (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)(['esri/widgets/Compass']).then(modules => {
                [this.Compass] = modules;
                this.setState({
                    apiLoaded: true
                });
            });
        }
    }
    componentDidUpdate() {
        if (this.state.apiLoaded && this.container) {
            if (this.CompassBtn) {
                this.container.innerHTML = '';
            }
            this.CompassBtn = new this.Compass({
                container: this.container,
                view: this.props.jimuMapView.view
            });
            this.props.jimuMapView.deleteJimuMapTool('Compass');
            this.props.jimuMapView.addJimuMapTool({
                name: 'Compass',
                instance: this.CompassBtn
            });
        }
    }
    componentWillUnmount() {
        if (this.CompassBtn) {
            this.CompassBtn.destroy();
            this.CompassBtn = null;
            this.props.jimuMapView.deleteJimuMapTool('Compass');
        }
    }
    render() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'compass-map-tool', ref: ref => { this.container = ref; } });
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/extent-navigate.tsx":
/*!************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/extent-navigate.tsx ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ExtentNavigate)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/utils.ts");
/* harmony import */ var jimu_icons_outlined_directional_arrow_fat_left__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-icons/outlined/directional/arrow-fat-left */ "./jimu-icons/outlined/directional/arrow-fat-left.tsx");
/* harmony import */ var jimu_icons_outlined_directional_arrow_fat_right__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jimu-icons/outlined/directional/arrow-fat-right */ "./jimu-icons/outlined/directional/arrow-fat-right.tsx");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");






class ExtentNavigate extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor() {
        super(...arguments);
        this.toolName = 'ExtentNavigate';
        this.onViewStationary = () => {
            // view static, view.viewpointHistory maybe changed
            this.updateByCurrentView();
        };
        this.onClickPrevBtn = () => {
            if (!this.isPrevBtnEnabled()) {
                return;
            }
            this.view.viewpointIndex--;
            const viewpoint = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getViewpointInstanceFromHistory)(this.view, this.view.viewpointIndex);
            if (viewpoint) {
                this.view.goTo(viewpoint);
            }
            this.updateByCurrentView();
        };
        this.onClickNextBtn = () => {
            if (!this.isNextBtnEnabled()) {
                return;
            }
            this.view.viewpointIndex++;
            const viewpoint = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getViewpointInstanceFromHistory)(this.view, this.view.viewpointIndex);
            if (viewpoint) {
                this.view.goTo(viewpoint);
            }
            this.updateByCurrentView();
        };
    }
    getTitle() {
        return 'ExtentNavigate';
    }
    getIcon() {
        return {
            icon: null
        };
    }
    getExtendCssStyle() {
        return `
      .extent-navigate-btn {
        width: 32px;
        height: 32px;
        text-align: center;
        line-height: 32px;
        cursor: default;
      }

      .extent-navigate-btn.extent-navigate-btn-disabled {
        color: grey;
      }

      .extent-navigate-prev-btn {
        border-bottom: 1px solid #ccc;
      }
    `;
    }
    getExpandPanel() {
        const isPrevBtnDisabled = !this.isPrevBtnEnabled();
        const isNextBtnDisabled = !this.isNextBtnEnabled();
        const prevBtnClassName = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('esri-widget--button extent-navigate-btn extent-navigate-prev-btn', { 'extent-navigate-btn-disabled': isPrevBtnDisabled });
        const nextBtnClassName = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('esri-widget--button extent-navigate-btn extent-navigate-next-btn', { 'extent-navigate-btn-disabled': isNextBtnDisabled });
        const prevExtentTitle = this.formatMessage('prevExtent');
        const nextExtentTitle = this.formatMessage('nextExtent');
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", null,
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: prevBtnClassName, title: prevExtentTitle, onClick: this.onClickPrevBtn },
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_icons_outlined_directional_arrow_fat_left__WEBPACK_IMPORTED_MODULE_3__.ArrowFatLeftOutlined, null)),
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: nextBtnClassName, title: nextExtentTitle, onClick: this.onClickNextBtn },
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_icons_outlined_directional_arrow_fat_right__WEBPACK_IMPORTED_MODULE_4__.ArrowFatRightOutlined, null))));
    }
    formatMessage(strId) {
        return this.props.intl.formatMessage({ id: strId, defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_5__.defaultMessages[strId] });
    }
    componentDidMount() {
        this.bindView();
    }
    componentDidUpdate() {
        this.bindView();
    }
    bindView() {
        var _a;
        const view = (_a = this.props.jimuMapView) === null || _a === void 0 ? void 0 : _a.view;
        if (this.view !== view) {
            // active view changes
            if (this.view) {
                this.view.stationaryCallback = null;
            }
            this.view = view;
            if (this.view) {
                this.view.stationaryCallback = this.onViewStationary;
            }
            this.updateByCurrentView();
        }
    }
    updateByCurrentView() {
        this.forceUpdate();
    }
    isPrevBtnEnabled() {
        return this.view && this.view.viewpointHistory.length >= 2 && this.view.viewpointIndex >= 1;
    }
    isNextBtnEnabled() {
        return this.view && this.view.viewpointHistory.length >= 2 && this.view.viewpointIndex < (this.view.viewpointHistory.length - 1);
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/fullscreen.tsx":
/*!*******************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/fullscreen.tsx ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Fullscreen)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var _components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/multisourcemap-context */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap-context.ts");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");




class Fullscreen extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor() {
        super(...arguments);
        this.toolName = 'Fullscreen';
        this.isFullScreen = false;
        this.fullScreenMap = () => { };
        this.getContent = (fullScreenMap, isFullScreen) => {
            this.fullScreenMap = fullScreenMap;
            this.isFullScreen = isFullScreen;
            return super.render();
        };
    }
    getTitle() {
        return this.props.intl.formatMessage({ id: 'FullScreenLabel', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_3__.defaultMessages.FullScreenLabel });
    }
    getIcon() {
        return {
            icon: this.isFullScreen ? __webpack_require__(/*! ../assets/icons/exit-full-screen.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/exit-full-screen.svg") : __webpack_require__(/*! ../assets/icons/full-screen.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/full-screen.svg"),
            onIconClick: (evt) => {
                this.fullScreenMap();
            }
        };
    }
    getExpandPanel() {
        return null;
    }
    render() {
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_2__.MultiSourceMapContext.Consumer, null, ({ fullScreenMap, isFullScreen }) => (this.getContent(fullScreenMap, isFullScreen))));
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/home.tsx":
/*!*************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/home.tsx ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Home)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/multisourcemap-context */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap-context.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class Home extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor() {
        super(...arguments);
        this.toolName = 'Home';
        this.getHomeContent = (initialMapState) => {
            return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(HomeInner, { jimuMapView: this.props.jimuMapView, initialMapState: initialMapState });
        };
    }
    getTitle() {
        return this.props.intl.formatMessage({ id: 'HomeLabel', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_3__.defaultMessages.HomeLabel });
    }
    getIcon() {
        return null;
    }
    getExpandPanel() {
        // return <HomeInner jimuMapView={this.props.jimuMapView}></HomeInner>;
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(_components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_4__.MultiSourceMapContext.Consumer, null, ({ initialMapState }) => (this.getHomeContent(initialMapState))));
    }
}
class HomeInner extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.Home = null;
        this.generateViewPointFromInitialMapState = (initialMapState) => {
            if (initialMapState.viewType === '2d') {
                return new this.Viewpoint({
                    targetGeometry: this.Extent.fromJSON(initialMapState.extent),
                    rotation: initialMapState.rotation
                });
            }
            else {
                return this.Viewpoint.fromJSON(initialMapState.viewPoint);
            }
        };
        this.homeBtnGoToOverride = (view, goToParams) => __awaiter(this, void 0, void 0, function* () {
            const is2DView = view.type === '2d';
            // snapToZoom: true means integer zoom, false means float zoom
            // We need to make sure goTo the integer zoom when click home btn.
            let needToRestoreSnapToZoomToFalse = false;
            if (is2DView && view.constraints && !view.constraints.snapToZoom) {
                view.constraints.snapToZoom = true;
                needToRestoreSnapToZoomToFalse = true;
            }
            try {
                yield view.goTo(goToParams.target, goToParams.options);
            }
            catch (e) {
                console.error('home btn goto error', e);
            }
            // When goTo is done, we need to reset to float zoom to get the best synchronization between two map widgets.
            if (is2DView && view.constraints && needToRestoreSnapToZoomToFalse) {
                view.constraints.snapToZoom = false;
            }
        });
        this.state = {
            apiLoaded: false
        };
    }
    componentDidMount() {
        if (!this.state.apiLoaded) {
            (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)(['esri/widgets/Home',
                'esri/geometry/Extent',
                'esri/Viewpoint']).then(modules => {
                [this.Home, this.Extent, this.Viewpoint] = modules;
                this.setState({
                    apiLoaded: true
                });
            });
        }
    }
    componentDidUpdate(prevProps) {
        var _a;
        if (!this.state.apiLoaded || !this.container) {
            return;
        }
        const currView = ((_a = this.props.jimuMapView) === null || _a === void 0 ? void 0 : _a.view) || null;
        // check initialMapState change or not
        // sometimes prevProps.initialMapState is undefined and props.initialMapState is null, so we need to convert undefined to null
        const preInitialMapState = (prevProps === null || prevProps === void 0 ? void 0 : prevProps.initialMapState) || null;
        const currInitialMapState = this.props.initialMapState || null;
        const isInitialMapStateChanged = preInitialMapState !== currInitialMapState;
        // destroy current view when view changed or initialMapState changed
        if (this.homeBtn && (this.homeBtn.view !== currView || isInitialMapStateChanged)) {
            this.destroyHomeBtn();
        }
        // create new home btn if this.homeBtn is empty and currView is not empty
        if (!this.homeBtn && currView) {
            let initViewpoint = this.props.initialMapState
                ? this.generateViewPointFromInitialMapState(this.props.initialMapState)
                : this.props.jimuMapView.view.map.initialViewProperties.viewpoint;
            if (initViewpoint) {
                initViewpoint = initViewpoint.clone();
            }
            const homeBtnContainer = document.createElement('div');
            this.container.appendChild(homeBtnContainer);
            this.homeBtn = new this.Home({
                container: homeBtnContainer,
                view: this.props.jimuMapView.view,
                viewpoint: initViewpoint,
                goToOverride: this.homeBtnGoToOverride
            });
            this.props.jimuMapView.deleteJimuMapTool('Home');
            this.props.jimuMapView.addJimuMapTool({
                name: 'Home',
                instance: this.homeBtn
            });
        }
        if (isInitialMapStateChanged) {
            // initialMapState change
            if (currView && this.homeBtn) {
                // const cloneViewpoint = this.homeBtn.viewpoint.clone()
                // set currView.viewpoint to cloneViewpoint directly not work with error 'invalid scale value of 0' if the init homeBtan.viewpoint.scale is 0, so use view.goTo() instead
                // currView.viewpoint = cloneViewpoint
                // currView.goTo(cloneViewpoint, {
                //   animate: false
                // })
                this.homeBtn.go();
            }
        }
    }
    destroyHomeBtn() {
        if (this.homeBtn) {
            // this.homeBtn.destroy() will remove this.homeBtn.container from dom tree and let this.homeBtn.container.parentNode be null
            this.homeBtn.destroy();
            this.homeBtn = null;
            this.props.jimuMapView.deleteJimuMapTool('Home');
        }
        if (this.container) {
            this.container.innerHTML = '';
        }
    }
    componentWillUnmount() {
        this.destroyHomeBtn();
    }
    render() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'home-map-tool', ref: ref => { if (!this.container) {
                this.container = ref;
            } } });
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/layers.tsx":
/*!***************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/layers.tsx ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Layers)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");




class Layers extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor(props) {
        super(props);
        this.toolName = 'Layers';
        this.handleTabIndexChange = (activeTabIndex) => {
            this.setState({
                activeTabIndex: activeTabIndex
            });
        };
        this.handleKeyDown = (e, index) => {
            if (e.key === 'Enter' || e.key === ' ') {
                this.handleTabIndexChange(index);
            }
        };
        this.state = {
            activeTabIndex: 0
        };
    }
    getTitle() {
        return this.props.intl.formatMessage({ id: 'LayersLabel', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_3__.defaultMessages.LayersLabel });
    }
    getIcon() {
        return {
            icon: __webpack_require__(/*! ../assets/icons/layerlist.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/layerlist.svg")
        };
    }
    getExpandPanel() {
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { style: { width: this.props.isMobile ? '100%' : '250px', minHeight: '32px', position: 'relative' }, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)({ 'exbmap-ui-pc-expand-maxheight': !this.props.isMobile }) },
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_3__.Nav, { tabs: true },
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_3__.NavItem, null,
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_3__.NavLink, { active: this.state.activeTabIndex === 0, onClick: () => { this.handleTabIndexChange(0); }, onKeyDown: e => { this.handleKeyDown(e, 0); } }, this.props.intl.formatMessage({ id: 'LayersLabelLayer', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_3__.defaultMessages.LayersLabelLayer }))),
                jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_3__.NavItem, null,
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_3__.NavLink, { active: this.state.activeTabIndex === 1, onClick: () => { this.handleTabIndexChange(1); }, onKeyDown: e => { this.handleKeyDown(e, 1); } }, this.props.intl.formatMessage({ id: 'LayersLabelLegend', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_3__.defaultMessages.LayersLabelLegend })))),
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'mt-1' }),
            this.state.activeTabIndex === 0 && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(LayerListInner, { jimuMapView: this.props.jimuMapView }),
            this.state.activeTabIndex === 1 && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(LegendInner, { jimuMapView: this.props.jimuMapView })));
    }
}
class LayerListInner extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.LayerList = null;
        this.state = {
            apiLoaded: false
        };
    }
    componentDidMount() {
        if (!this.state.apiLoaded) {
            (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)(['esri/widgets/LayerList']).then(modules => {
                [this.LayerList] = modules;
                this.setState({
                    apiLoaded: true
                });
            });
        }
    }
    componentDidUpdate(prevProps) {
        if (this.state.apiLoaded && this.container) {
            if (prevProps.jimuMapView && this.props.jimuMapView && (prevProps.jimuMapView.id !== this.props.jimuMapView.id)) {
                if (this.LayerListBtn) {
                    this.LayerListBtn.view = this.props.jimuMapView.view;
                    this.LayerListBtn.renderNow();
                }
            }
            else {
                this.LayerListBtn = new this.LayerList({
                    container: this.container,
                    view: this.props.jimuMapView.view
                });
                this.props.jimuMapView.deleteJimuMapTool('LayerList');
                this.props.jimuMapView.addJimuMapTool({
                    name: 'LayerList',
                    instance: this.LayerListBtn
                });
            }
        }
    }
    componentWillUnmount() {
        if (this.LayerListBtn) {
            this.LayerListBtn = null;
            this.props.jimuMapView.deleteJimuMapTool('LayerList');
        }
    }
    render() {
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'layers-map-tool', ref: ref => { this.container = ref; }, style: { width: '100%', minHeight: '32px', position: 'relative' } }, !this.state.apiLoaded && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'exbmap-basetool-loader' })));
    }
}
class LegendInner extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.Legend = null;
        this.state = {
            apiLoaded: false
        };
    }
    componentDidMount() {
        if (!this.state.apiLoaded) {
            (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)(['esri/widgets/Legend']).then(modules => {
                [this.Legend] = modules;
                this.setState({
                    apiLoaded: true
                });
            });
        }
    }
    componentDidUpdate(prevProps) {
        if (this.state.apiLoaded && this.container) {
            if (prevProps.jimuMapView && this.props.jimuMapView && (prevProps.jimuMapView.id !== this.props.jimuMapView.id)) {
                if (this.LegendBtn) {
                    this.LegendBtn.view = this.props.jimuMapView.view;
                    this.LegendBtn.renderNow();
                }
            }
            else {
                this.LegendBtn = new this.Legend({
                    container: this.container,
                    view: this.props.jimuMapView.view
                });
                this.props.jimuMapView.deleteJimuMapTool('Legend');
                this.props.jimuMapView.addJimuMapTool({
                    name: 'Legend',
                    instance: this.LegendBtn
                });
            }
        }
    }
    componentWillUnmount() {
        if (this.LegendBtn) {
            this.LegendBtn = null;
            this.props.jimuMapView.deleteJimuMapTool('Legend');
        }
    }
    render() {
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { ref: ref => { this.container = ref; }, style: { width: '100%', minHeight: '32px', position: 'relative' } }, !this.state.apiLoaded && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'exbmap-basetool-loader' })));
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/locate.tsx":
/*!***************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/locate.tsx ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Locate)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");



class Locate extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor() {
        super(...arguments);
        this.toolName = 'Locate';
    }
    getTitle() {
        return 'Locate';
    }
    getIcon() {
        return null;
    }
    getExpandPanel() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(LocateInner, { jimuMapView: this.props.jimuMapView });
    }
}
class LocateInner extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.Locate = null;
        this.state = {
            apiLoaded: false
        };
    }
    componentDidMount() {
        if (!this.state.apiLoaded) {
            (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)(['esri/widgets/Locate']).then(modules => {
                [this.Locate] = modules;
                this.setState({
                    apiLoaded: true
                });
            });
        }
    }
    componentDidUpdate() {
        if (this.state.apiLoaded && this.container) {
            if (this.LocateBtn) {
                this.container.innerHTML = '';
            }
            this.LocateBtn = new this.Locate({
                container: this.container,
                view: this.props.jimuMapView.view
            });
            this.props.jimuMapView.deleteJimuMapTool('Locate');
            this.props.jimuMapView.addJimuMapTool({
                name: 'Locate',
                instance: this.LocateBtn
            });
        }
    }
    componentWillUnmount() {
        if (this.LocateBtn) {
            this.LocateBtn.destroy();
            this.LocateBtn = null;
            this.props.jimuMapView.deleteJimuMapTool('Locate');
        }
    }
    render() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'esri-widget--button locate-map-tool', ref: ref => { this.container = ref; } });
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/mapswitch.tsx":
/*!******************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/mapswitch.tsx ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MapSwitch)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var _components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/multisourcemap-context */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap-context.ts");
/* harmony import */ var _components_map_thumb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/map-thumb */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/map-thumb.tsx");
/** @jsx jsx */





class MapSwitch extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_2__.BaseTool {
    constructor() {
        super(...arguments);
        this.toolName = 'MapSwitch';
        this.switchMap = () => { };
        this.handleKeyDown = (e, onClick) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e === null || e === void 0 ? void 0 : e.preventDefault();
                onClick();
            }
        };
        this.getContent = (isShowMapSwitchBtn, dataSourceIds, activeDataSourceId, switchMap, mapWidgetId, theme) => {
            const onClick = () => {
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.requestAutoControlMapWidget(mapWidgetId, mapWidgetId));
                switchMap();
            };
            if (isShowMapSwitchBtn) {
                if (this.props.isMobile) {
                    return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'exbmap-ui-tool esri-widget--button', onClick: onClick, role: 'button', tabIndex: 0, onKeyDown: e => { this.handleKeyDown(e, onClick); }, "aria-label": this.props.intl.formatMessage({ id: 'SwitchMap', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SwitchMap }) },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, className: 'exbmap-ui-tool-icon', icon: this.getIcon().icon })));
                }
                else {
                    const dsJsons = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appConfig.dataSources;
                    return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'mapswitch-map-tool', css: this.getStyle(), onClick: onClick, role: 'button', tabIndex: 0, onKeyDown: e => { this.handleKeyDown(e, onClick); }, "aria-label": this.props.intl.formatMessage({ id: 'SwitchMap', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SwitchMap }) },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { title: dsJsons[dataSourceIds[0]] ? dsJsons[dataSourceIds[0]].label : null, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('mapthumb-item', { front: dataSourceIds[0] !== activeDataSourceId }, { back: dataSourceIds[0] === activeDataSourceId }) },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_map_thumb__WEBPACK_IMPORTED_MODULE_4__["default"], { mapItemId: dsJsons[dataSourceIds[0]] ? dsJsons[dataSourceIds[0]].itemId : null, portUrl: dsJsons[dataSourceIds[0]] ? dsJsons[dataSourceIds[0]].portalUrl : null, theme: theme })),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { title: dsJsons[dataSourceIds[1]] ? dsJsons[dataSourceIds[1]].label : null, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('mapthumb-item', { front: dataSourceIds[1] !== activeDataSourceId }, { back: dataSourceIds[1] === activeDataSourceId }) },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_map_thumb__WEBPACK_IMPORTED_MODULE_4__["default"], { mapItemId: dsJsons[dataSourceIds[1]] ? dsJsons[dataSourceIds[1]].itemId : null, portUrl: dsJsons[dataSourceIds[1]] ? dsJsons[dataSourceIds[1]].portalUrl : null, theme: theme }))));
                }
            }
            else {
                return null;
            }
        };
        this.getIconContent = (isShowMapSwitchBtn, dataSourceIds, activeDataSourceId, switchMap) => {
            if (isShowMapSwitchBtn) {
                this.switchMap = switchMap;
                return super.render();
            }
            else {
                return null;
            }
        };
    }
    static getIsNeedSetting() {
        return false;
    }
    static isAvailable(toolShellProps) {
        if (toolShellProps.isMobile) {
            const widgetId = toolShellProps.mapWidgetId;
            if (widgetId) {
                const widgetInfo = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appConfig.widgets[widgetId];
                if (widgetInfo) {
                    return widgetInfo.useDataSources && widgetInfo.useDataSources.length >= 2;
                }
            }
            return false;
        }
        // Always return true for pc layout because false will let SelectState-FullScreen-Container in wroing position.
        return true;
    }
    getStyle() {
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(68)};
      height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(52)};
      cursor: pointer;
      position: relative;

      .mapthumb-item {
        position: absolute;
        width: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(64)};
        height: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(48)};
        transition: bottom 0.5s, left 0.5s, top 0.5s, right 0.5s, z-index 0.5s;
      }

      .front {
        z-index: 1;
        bottom: 0;
        left: 0;
      }

      .back {
        z-index: 0;
        top: 0;
        right: 0;
      }
    `;
    }
    getTitle() {
        return 'MapSwitch';
    }
    getIcon() {
        return {
            icon: __webpack_require__(/*! ../assets/icons/exchange.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/exchange.svg"),
            onIconClick: () => {
                this.switchMap();
            }
        };
    }
    getExpandPanel() {
        if (this.props.toolJson.isOnlyExpanded) {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_3__.MultiSourceMapContext.Consumer, null, ({ isShowMapSwitchBtn, dataSourceIds, activeDataSourceId, switchMap, mapWidgetId, theme }) => (this.getContent(isShowMapSwitchBtn, dataSourceIds, activeDataSourceId, switchMap, mapWidgetId, theme))));
        }
        else {
            return null;
        }
    }
    render() {
        if (this.props.toolJson.isOnlyExpanded) {
            return super.render();
            // In fact, it never goes here.
        }
        else {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_3__.MultiSourceMapContext.Consumer, null, ({ isShowMapSwitchBtn, dataSourceIds, activeDataSourceId, switchMap }) => (this.getIconContent(isShowMapSwitchBtn, dataSourceIds, activeDataSourceId, switchMap))));
        }
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/measure.tsx":
/*!****************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/measure.tsx ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Measure)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");




class Measure extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_2__.BaseTool {
    constructor(props) {
        super(props);
        this.toolName = 'Measure';
        this.measureModules2D = [{
                name: 'Line',
                title: 'Line',
                activeTool: 'distance',
                src: __webpack_require__(/*! ../assets/icons/measure-distance.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/measure-distance.svg")
            }, {
                name: 'Polygon',
                title: 'Polygon',
                activeTool: 'area',
                src: __webpack_require__(/*! ../assets/icons/measure-area.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/measure-area.svg")
            }];
        this.measureModules3D = [{
                name: 'Line',
                title: 'Line',
                activeTool: 'direct-line',
                src: __webpack_require__(/*! ../assets/icons/measure-distance.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/measure-distance.svg")
            }, {
                name: 'Polygon',
                title: 'Polygon',
                activeTool: 'area',
                src: __webpack_require__(/*! ../assets/icons/measure-area.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/measure-area.svg")
            }];
        this.destroy = () => {
            if (this.state.measureInstance && !this.state.measureInstance.destroyed) {
                this.state.measureInstance.destroy();
                this.setState({
                    measureInstance: null,
                    activeTabIndex: 0
                });
            }
        };
        this.handleMeasurceInstanceCreated = (measureInstance) => {
            this.setState({
                measureInstance: measureInstance
            });
        };
        this.onTabClick = (index) => {
            if (this.state.activeTabIndex === index) {
                return;
            }
            this.state.measureInstance.clear();
            this.setState({ activeTabIndex: index });
            if (index === 0) {
                this.state.measureInstance.activeTool = this.props.jimuMapView.view.type === '2d' ? 'distance' : 'direct-line';
            }
            else if (index === 1) {
                this.state.measureInstance.activeTool = 'area';
            }
        };
        this.handleKeyDown = (e, index) => {
            if (e.key === 'Enter' || e.key === ' ') {
                this.onTabClick(index);
            }
        };
        this.onRequestClosePanel = () => {
            if (this.props.activeToolInfo.activeToolName === this.toolName) {
                this.props.onActiveToolInfoChange(null);
            }
        };
        this.onClosePanel = () => {
            this.destroy();
        };
        this.onShowPanel = () => {
            if (this.state.measureInstance) {
                if (this.state.activeTabIndex === 0) {
                    this.state.measureInstance.activeTool = this.props.jimuMapView.view.type === '2d' ? 'distance' : 'direct-line';
                }
                else if (this.state.activeTabIndex === 1) {
                    this.state.measureInstance.activeTool = 'area';
                }
            }
        };
        this.getNavTab = () => {
            if (this.props.jimuMapView.view.type === '2d') {
                return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Nav, { tabs: true }, this.measureModules2D.map((module, index) => {
                    const tabTitle = index === 0 ? 'drawModeLine' : 'drawModePolygon';
                    return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.NavItem, { key: index },
                        jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.NavLink, { active: this.state.activeTabIndex === index, ref: ref => { this.state.activeTabIndex === index && (this.activeTabRef = ref); }, onClick: () => { this.onTabClick(index); }, onKeyDown: e => { this.handleKeyDown(e, index); }, "aria-label": this.props.intl.formatMessage({ id: `${tabTitle}`, defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages[tabTitle] }) },
                            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, className: 'm-0', icon: module.src }))));
                })));
            }
            else if (this.props.jimuMapView.view.type === '3d') {
                return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Nav, { tabs: true }, this.measureModules3D.map((module, index) => {
                    const tabTitle = index === 0 ? 'drawModeLine' : 'drawModePolygon';
                    return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.NavItem, { key: index },
                        jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.NavLink, { active: this.state.activeTabIndex === index, ref: ref => { this.state.activeTabIndex === index && (this.activeTabRef = ref); }, onClick: () => { this.onTabClick(index); }, onKeyDown: e => { this.handleKeyDown(e, index); }, "aria-label": this.props.intl.formatMessage({ id: `${tabTitle}`, defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages[tabTitle] }) },
                            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, className: 'm-0', icon: module.src }))));
                })));
            }
            else {
                return null;
            }
        };
        this.getMeasureModule = () => {
            if (this.props.jimuMapView.view.type === '2d') {
                return this.measureModules2D[this.state.activeTabIndex];
            }
            else {
                return this.measureModules3D[this.state.activeTabIndex];
            }
        };
        this.state = {
            activeTabIndex: 0,
            measureInstance: null
        };
    }
    getTitle() {
        return this.props.intl.formatMessage({ id: 'MeasureLabel', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.MeasureLabel });
    }
    getIcon() {
        return {
            icon: __webpack_require__(/*! ../assets/icons/measure.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/measure.svg")
        };
    }
    focusDefaultElement() {
        var _a;
        (_a = this.activeTabRef) === null || _a === void 0 ? void 0 : _a.focus();
    }
    getExpandPanel() {
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { style: { width: this.props.isMobile ? '100%' : '250px', position: 'relative' }, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)({ 'exbmap-ui-pc-expand-maxheight': !this.props.isMobile }) },
            this.getNavTab(),
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(MeasureInner, { mapWidgetId: this.props.mapWidgetId, activeTabIndex: this.state.activeTabIndex, jimuMapView: this.props.jimuMapView, measureModule: this.getMeasureModule(), measureInstance: this.state.measureInstance, onMeasurceInstanceCreated: this.handleMeasurceInstanceCreated, autoControlWidgetId: this.props.autoControlWidgetId, onRequestClosePanel: this.onRequestClosePanel })));
    }
}
class MeasureInner extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.MeasureInstance = null;
        this.toolName = 'measurement';
        this.checkContainer = () => {
            if (this.container.style.opacity === '0' || this.container.style.opacity === 0) {
                this.container.style.opacity = 1;
                this.container.style.height = '';
            }
        };
        this.id = `${this.props.mapWidgetId}-measure-tool`;
        this.state = {
            apiLoaded: false
        };
    }
    componentDidMount() {
        if (!this.state.apiLoaded) {
            (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_3__.loadArcGISJSAPIModules)(['esri/widgets/Measurement']).then(modules => {
                [this.MeasureClass] = modules;
                this.setState({
                    apiLoaded: true
                });
            });
        }
    }
    componentDidUpdate(prevProps) {
        if (this.state.apiLoaded && this.parentContainer && this.container) {
            if (!this.props.measureInstance) {
                // crate measure isntance here
                const tempInstance = new this.MeasureClass({
                    container: this.container,
                    view: this.props.jimuMapView.view
                });
                tempInstance.activeTool = this.props.measureModule.activeTool;
                this.setCurrentJimuMapView(this.props.jimuMapView);
                this.currentJimuMapView.deleteJimuMapTool(this.toolName);
                this.currentJimuMapView.addJimuMapTool({
                    name: this.toolName,
                    instance: tempInstance
                });
                this.props.onMeasurceInstanceCreated(tempInstance);
                const action = jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.requestAutoControlMapWidget(this.props.mapWidgetId, this.id);
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(action);
            }
            else {
                const newJimuMapView = this.props.jimuMapView;
                if (this.props.measureInstance.view !== newJimuMapView.view) {
                    // map view changed by switch
                    this.restoreClickHighlightEnabledForCurrentJimuMapView();
                    this.setCurrentJimuMapView(newJimuMapView);
                    this.props.measureInstance.clear();
                    this.props.measureInstance.view = newJimuMapView.view;
                    // @ts-expect-error
                    this.props.measureInstance.activeTool = this.props.measureModule.activeTool;
                }
            }
            this.checkContainer();
        }
        // check if autoControlWidgetId changed
        const prevAutoControlWidgetId = (prevProps === null || prevProps === void 0 ? void 0 : prevProps.autoControlWidgetId) || '';
        if (prevAutoControlWidgetId === this.id && this.props.autoControlWidgetId !== this.id) {
            // measure is from active to inactive, destroy MeasureInner
            this.props.onRequestClosePanel();
        }
    }
    componentWillUnmount() {
        this.restoreClickHighlightEnabledForCurrentJimuMapView();
        if (this.props.autoControlWidgetId === this.id) {
            const action = jimu_core__WEBPACK_IMPORTED_MODULE_0__.appActions.releaseAutoControlMapWidget(this.props.mapWidgetId);
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().dispatch(action);
        }
    }
    setCurrentJimuMapView(jimuMapView) {
        this.currentJimuMapView = jimuMapView;
        this.originalClickHighlightEnabled = jimuMapView.isClickHighlightEnabled();
        // disable click highlight to avoid conflict with clicking-select
        this.currentJimuMapView.disableClickHighlight();
    }
    restoreClickHighlightEnabledForCurrentJimuMapView() {
        if (this.currentJimuMapView) {
            if (this.originalClickHighlightEnabled) {
                this.currentJimuMapView.enableClickHighlight();
            }
            else {
                this.currentJimuMapView.disableClickHighlight();
            }
        }
    }
    reload() {
        if (this.container.childNodes && this.container.childNodes[0]) {
            this.container.style.opacity = 0;
            this.container.style.height = '35px';
        }
        //this.setState({
        //  apiLoaded: false
        //}, () => {
        //  loadArcGISJSAPIModules(['esri/widgets/Measurement']).then(modules => {
        //    [this.MeasureClass] = modules
        //    this.setState({
        //      apiLoaded: true
        //    })
        //  })
        //})
    }
    render() {
        return (jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'w-100', style: { width: '250px', position: 'relative', minHeight: '32px' }, ref: ref => { this.parentContainer = ref; } },
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'measure-container measure-map-tool', ref: ref => { this.container = ref; } }),
            !this.state.apiLoaded && jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'exbmap-basetool-loader' })));
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/navigation.tsx":
/*!*******************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/navigation.tsx ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Navigation)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");



class Navigation extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor() {
        super(...arguments);
        this.toolName = 'Navigation';
    }
    getTitle() {
        return 'Navigation';
    }
    getIcon() {
        return null;
    }
    getExpandPanel() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(NavigationInner, { jimuMapView: this.props.jimuMapView });
    }
    /**
     * Navigation only supports scene view, so ScaleBarTool.isAvailable() will return false if the map is map view.
     */
    static isAvailable(toolShellProps) {
        var _a, _b;
        return ((_b = (_a = toolShellProps.jimuMapView) === null || _a === void 0 ? void 0 : _a.view) === null || _b === void 0 ? void 0 : _b.type) === '3d';
    }
}
class NavigationInner extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.Navigation = null;
        this.state = {
            apiLoaded: false
        };
    }
    componentDidMount() {
        if (!this.state.apiLoaded) {
            (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)(['esri/widgets/NavigationToggle']).then(modules => {
                [this.Navigation] = modules;
                this.setState({
                    apiLoaded: true
                });
            });
        }
    }
    componentDidUpdate() {
        if (this.state.apiLoaded && this.container) {
            if (this.NavigationBtn) {
                this.container.innerHTML = '';
            }
            this.NavigationBtn = new this.Navigation({
                container: this.container,
                view: this.props.jimuMapView.view
            });
            this.props.jimuMapView.deleteJimuMapTool('Navigation');
            this.props.jimuMapView.addJimuMapTool({
                name: 'Navigation',
                instance: this.NavigationBtn
            });
        }
    }
    componentWillUnmount() {
        if (this.NavigationBtn) {
            this.NavigationBtn.destroy();
            this.NavigationBtn = null;
            this.props.jimuMapView.deleteJimuMapTool('Navigation');
        }
    }
    render() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'navigation-map-tool', ref: ref => { this.container = ref; } });
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/scalebar.tsx":
/*!*****************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/scalebar.tsx ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScaleBar)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");



class ScaleBar extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor() {
        super(...arguments);
        this.toolName = 'ScaleBar';
    }
    getTitle() {
        return 'ScaleBar';
    }
    getIcon() {
        return null;
    }
    getExpandPanel() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(ScaleBarInner, { jimuMapView: this.props.jimuMapView });
    }
    /**
     * ScaleBar only supports map view, so ScaleBarTool.isAvailable() will return false if the map is scene view.
     */
    static isAvailable(toolShellProps) {
        var _a, _b;
        return ((_b = (_a = toolShellProps.jimuMapView) === null || _a === void 0 ? void 0 : _a.view) === null || _b === void 0 ? void 0 : _b.type) === '2d';
    }
}
class ScaleBarInner extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.ScaleBar = null;
        this.state = {
            apiLoaded: false
        };
    }
    componentDidMount() {
        if (!this.state.apiLoaded) {
            (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)(['esri/widgets/ScaleBar']).then(modules => {
                [this.ScaleBar] = modules;
                this.setState({
                    apiLoaded: true
                });
            });
        }
    }
    componentDidUpdate() {
        if (this.state.apiLoaded && this.container) {
            if (this.ScaleBarBtn) {
                this.container.innerHTML = '';
            }
            let rawUnit = '';
            const appState = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState();
            if (appState) {
                if (appState.user && appState.user.units) {
                    rawUnit = appState.user.units;
                }
                else if (appState.portalSelf && appState.portalSelf.units) {
                    rawUnit = appState.portalSelf.units;
                }
            }
            let scaleBarUnit = null;
            // metric => metric
            // english => imperial
            // '' => dual
            if (rawUnit === 'metric') {
                scaleBarUnit = 'metric';
            }
            else if (rawUnit === 'english') {
                scaleBarUnit = 'imperial';
            }
            else {
                scaleBarUnit = 'dual';
            }
            this.ScaleBarBtn = new this.ScaleBar({
                container: this.container,
                view: this.props.jimuMapView.view,
                unit: scaleBarUnit
            });
            this.props.jimuMapView.deleteJimuMapTool('ScaleBar');
            this.props.jimuMapView.addJimuMapTool({
                name: 'ScaleBar',
                instance: this.ScaleBarBtn
            });
        }
    }
    componentWillUnmount() {
        if (this.ScaleBarBtn) {
            this.ScaleBarBtn.destroy();
            this.ScaleBarBtn = null;
            this.props.jimuMapView.deleteJimuMapTool('ScaleBar');
        }
    }
    render() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'scalebar-map-tool', ref: ref => { this.container = ref; } });
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/search.tsx":
/*!***************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/search.tsx ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Search)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/** @jsx jsx */




class Search extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor() {
        super(...arguments);
        this.toolName = 'Search';
    }
    getTitle() {
        return this.props.intl.formatMessage({ id: 'SearchLabel', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_3__.defaultMessages.SearchLabel });
    }
    getIcon() {
        return {
            icon: __webpack_require__(/*! ../assets/icons/search.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/search.svg")
        };
    }
    getExpandPanel() {
        if (this.props.isMobile) {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { style: { minHeight: '32px', position: 'relative', width: '100%' } },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SearchInner, { jimuMapView: this.props.jimuMapView, mapWidgetId: this.props.mapWidgetId })));
        }
        else {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { style: { minWidth: '250px', minHeight: '32px', position: 'relative' } },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(SearchInner, { jimuMapView: this.props.jimuMapView, mapWidgetId: this.props.mapWidgetId })));
        }
    }
}
class SearchInner extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.Search = null;
        this.Portal = null;
        this.state = {
            apiLoaded: false
        };
    }
    getStyle() {
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      /* border: solid 1px rgba(110,110,110,0.3); */
    `;
    }
    componentDidMount() {
        if (!this.state.apiLoaded) {
            (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)(['esri/widgets/Search', 'esri/portal/Portal']).then(modules => {
                [this.Search, this.Portal] = modules;
                this.setState({
                    apiLoaded: true
                });
            });
        }
    }
    componentDidUpdate() {
        if (this.state.apiLoaded && this.container) {
            if (this.SearchBtn) {
                const containerParent = this.container.parentElement;
                this.SearchBtn.destroy();
                this.SearchBtn = null;
                if (!this.container.parentElement && containerParent) {
                    containerParent.appendChild(this.container);
                }
                this.container.innerHTML = '';
            }
            this.SearchBtn = new this.Search({
                container: this.container,
                view: this.props.jimuMapView.view,
                portal: new this.Portal({
                    url: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().portalUrl
                })
            });
            this.props.jimuMapView.deleteJimuMapTool('Search');
            this.props.jimuMapView.addJimuMapTool({
                name: 'Search',
                instance: this.SearchBtn
            });
            this.SearchBtn.on('select-result', (event) => {
                if (!event.result.feature.layer) {
                    const geometry = event.result.feature.geometry.toJSON();
                    jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageManager.getInstance().publishMessage(new jimu_core__WEBPACK_IMPORTED_MODULE_0__.LocationChangeMessage(this.props.mapWidgetId, geometry));
                }
                else {
                    const geometry = event.result.feature.geometry;
                    if (geometry.type === 'point') {
                        jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageManager.getInstance().publishMessage(new jimu_core__WEBPACK_IMPORTED_MODULE_0__.LocationChangeMessage(this.props.mapWidgetId, geometry.toJSON()));
                    }
                    else {
                        const point = geometry.extent.center;
                        jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageManager.getInstance().publishMessage(new jimu_core__WEBPACK_IMPORTED_MODULE_0__.LocationChangeMessage(this.props.mapWidgetId, point.toJSON()));
                    }
                }
            });
        }
    }
    componentWillUnmount() {
        if (this.SearchBtn) {
            this.SearchBtn.destroy();
            this.SearchBtn = null;
            this.props.jimuMapView.deleteJimuMapTool('Search');
        }
    }
    render() {
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this.getStyle(), className: 'w-100 search-map-tool', ref: ref => { this.container = ref; } }, !this.state.apiLoaded && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'exbmap-basetool-loader' })));
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/select/index.tsx":
/*!*********************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/select/index.tsx ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Select)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _select_pc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./select-pc */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/select/select-pc.tsx");
/* harmony import */ var _select_mobile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./select-mobile */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/select/select-mobile.tsx");
/** @jsx jsx */





class Select extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor(props) {
        super(props);
        this.toolName = 'Select';
        this.state = {};
    }
    getTitle() {
        return this.props.intl.formatMessage({ id: 'SelectLabel', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_2__.defaultMessages.SelectLabel });
    }
    getIcon() {
        return {
            icon: __webpack_require__(/*! ../../assets/icons/select-tool/select-rectangle.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-rectangle.svg")
        };
    }
    getExpandPanel() {
        if (this.props.isMobile) {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_select_mobile__WEBPACK_IMPORTED_MODULE_4__.SelectMobileTool, { isActive: this.toolName === (this.props.activeToolInfo && this.props.activeToolInfo.activeToolName), activeToolInfo: this.props.activeToolInfo, toolName: this.toolName, onActiveToolInfoChange: this.props.onActiveToolInfoChange, _onIconClick: () => { this._onIconClick(); }, theme: this.props.theme, intl: this.props.intl, jimuMapView: this.props.jimuMapView }));
        }
        else {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_select_pc__WEBPACK_IMPORTED_MODULE_3__.SelectPCTool, { theme: this.props.theme, intl: this.props.intl, jimuMapView: this.props.jimuMapView, activeToolInfo: this.props.activeToolInfo, toolName: this.toolName, onActiveToolInfoChange: this.props.onActiveToolInfoChange }));
        }
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/select/select-mobile.tsx":
/*!*****************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/select/select-mobile.tsx ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SelectMobileTool: () => (/* binding */ SelectMobileTool)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");
/* harmony import */ var _components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../components/multisourcemap-context */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap-context.ts");
/* harmony import */ var _select_progress__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./select-progress */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/select/select-progress.tsx");
/** @jsx jsx */





const defaultPointSymbol = {
    style: 'esriSMSCircle',
    color: [0, 0, 128, 128],
    name: 'Circle',
    outline: {
        color: [0, 0, 128, 255],
        width: 1
    },
    type: 'esriSMS',
    size: 18
};
const defaultPolylineSymbol = {
    tags: ['solid'],
    title: 'Blue Thin',
    style: 'esriSLSSolid',
    color: [79, 129, 189, 255],
    width: 3,
    name: 'Blue 1',
    type: 'esriSLS'
};
const defaultPolygonSymbol = {
    style: 'esriSFSSolid',
    color: [79, 129, 189, 77],
    type: 'esriSFS',
    outline: {
        style: 'esriSLSSolid',
        color: [54, 93, 141, 255],
        width: 1.5,
        type: 'esriSLS'
    }
};
const SelectRectangleIcon = __webpack_require__(/*! ../../assets/icons/select-tool/select-rectangle.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-rectangle.svg");
const SelectLassoIcon = __webpack_require__(/*! ../../assets/icons/select-tool/select-lasso.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-lasso.svg");
const SelectCircleIcon = __webpack_require__(/*! ../../assets/icons/select-tool/select-circle.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-circle.svg");
const SelectLineIcon = __webpack_require__(/*! ../../assets/icons/select-tool/select-line.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-line.svg");
const SelectPointIcon = __webpack_require__(/*! ../../assets/icons/select-tool/select-point.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-point.svg");
const SelectMoreIcon = __webpack_require__(/*! jimu-ui/lib/icons/more-16.svg */ "./jimu-ui/lib/icons/more-16.svg");
class SelectMobileTool extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        var _a, _b;
        super(props);
        this.jsonUtils = null;
        this.currentActiveTool = 'rectangle';
        this.onJimuMapViewSelectProgressChange = (progress) => {
            this.setState({
                selectProgress: progress
            });
        };
        this.onKeyDown = (event) => {
            if (event.key === 'Shift') {
                this.lastShiftKeyEventInfo = {
                    eventDate: new Date(),
                    isKeyDown: true
                };
            }
            else if ((this.isMac && event.key === 'Meta') || (!this.isMac && event.key === 'Control')) {
                this.lastCtrlKeyEventInfo = {
                    eventDate: new Date(),
                    isKeyDown: true
                };
            }
        };
        this.onKeyUp = (event) => {
            if (event.key === 'Shift') {
                this.lastShiftKeyEventInfo = {
                    eventDate: new Date(),
                    isKeyDown: false
                };
            }
            else if ((this.isMac && event.key === 'Meta') || (!this.isMac && event.key === 'Control')) {
                this.lastCtrlKeyEventInfo = {
                    eventDate: new Date(),
                    isKeyDown: false
                };
            }
        };
        this.setCurrentSelectType = (currentSelectType) => {
            this.initialSketchTool();
            if (currentSelectType === this.state.currentSelectType) {
                return;
            }
            if (currentSelectType === 'Point') {
                if (this.props.isActive) {
                    this.setActiveToolForSketchViewModel('point');
                }
                this.currentActiveTool = 'point';
            }
            if (currentSelectType === 'Rectangle') {
                if (this.props.isActive) {
                    this.setActiveToolForSketchViewModel('rectangle');
                }
                this.currentActiveTool = 'rectangle';
            }
            if (currentSelectType === 'Lasso') {
                if (this.props.isActive) {
                    this.setActiveToolForSketchViewModel('polygon');
                }
                this.currentActiveTool = 'polygon';
            }
            if (currentSelectType === 'Circle') {
                if (this.props.isActive) {
                    this.setActiveToolForSketchViewModel('circle');
                }
                this.currentActiveTool = 'circle';
            }
            if (currentSelectType === 'Line') {
                if (this.props.isActive) {
                    this.setActiveToolForSketchViewModel('polyline');
                }
                this.currentActiveTool = 'polyline';
            }
            this.setState({
                currentSelectType: currentSelectType
            }, () => {
                if (!this.props.activeToolInfo || (this.props.activeToolInfo && this.props.activeToolInfo.activeToolName !== this.props.toolName)) {
                    this.props._onIconClick(null);
                }
            });
        };
        this.toggleIsSelectActive = () => {
            this.props._onIconClick(null);
        };
        this.onClickLoadingProgress = () => {
            if (this.activeJimuMapView) {
                this.activeJimuMapView.cancelSelectByQuery();
            }
        };
        this.handleIsShowSelectSetting = () => {
            this.setState({
                isShowSelectSetting: !this.state.isShowSelectSetting
            });
        };
        this.getSelectToolIcon = () => {
            if (this.state.currentSelectType === 'Point') {
                return SelectPointIcon;
            }
            else if (this.state.currentSelectType === 'Rectangle') {
                return SelectRectangleIcon;
            }
            else if (this.state.currentSelectType === 'Lasso') {
                return SelectLassoIcon;
            }
            else if (this.state.currentSelectType === 'Circle') {
                return SelectCircleIcon;
            }
            else if (this.state.currentSelectType === 'Line') {
                return SelectLineIcon;
            }
            else {
                return SelectRectangleIcon;
            }
        };
        this.getMobilePanelForSelectSetting = () => {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_multisourcemap_context__WEBPACK_IMPORTED_MODULE_3__.MultiSourceMapContext.Consumer, null, ({ mapWidgetId }) => ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.MobilePanel, { mapWidgetId: `${mapWidgetId}-with-select-container`, title: '', open: this.state.isShowSelectSetting, onClose: () => { this.handleIsShowSelectSetting(); } },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100' }, this.getMobilePanelSettingContent())))));
        };
        this.getMobilePanelSettingContent = () => {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this.getCSSStyle() },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'content-title mt-1 mb-2' }, this.props.intl.formatMessage({ id: 'SelectionTool', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionTool })),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 select-tool-type-mobile-container-shell' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'select-tool-type-mobile-container d-flex' },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('select-tool-type mr-4 d-flex flex-column align-items-center justify-content-center select-tool-btn-hover', {
                                'select-tool-type-choosed': this.state.currentSelectType === 'Rectangle'
                            }), onClick: () => { this.setCurrentSelectType('Rectangle'); }, onKeyDown: e => { this.handleSelectTypeKeyDown(e, 'Rectangle'); }, role: 'button', tabIndex: 0 },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, icon: SelectRectangleIcon }),
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'select-tool-type-text mt-1 w-100 text-truncate pl-1 pr-1 d-flex justify-content-center', title: this.props.intl.formatMessage({ id: 'SelectionToolRectangle', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolRectangle }) }, this.props.intl.formatMessage({ id: 'SelectionToolRectangle', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolRectangle }))),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('select-tool-type mr-4 d-flex flex-column align-items-center justify-content-center select-tool-btn-hover', {
                                'select-tool-type-choosed': this.state.currentSelectType === 'Lasso'
                            }), onClick: () => { this.setCurrentSelectType('Lasso'); }, onKeyDown: e => { this.handleSelectTypeKeyDown(e, 'Lasso'); }, role: 'button', tabIndex: 0 },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, icon: SelectLassoIcon }),
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'select-tool-type-text mt-1 w-100 text-truncate pl-1 pr-1 d-flex justify-content-center', title: this.props.intl.formatMessage({ id: 'SelectionToolLasso', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolLasso }) }, this.props.intl.formatMessage({ id: 'SelectionToolLasso', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolLasso }))),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('select-tool-type mr-4 d-flex flex-column align-items-center justify-content-center select-tool-btn-hover', {
                                'select-tool-type-choosed': this.state.currentSelectType === 'Circle'
                            }), onClick: () => { this.setCurrentSelectType('Circle'); }, onKeyDown: e => { this.handleSelectTypeKeyDown(e, 'Circle'); }, role: 'button', tabIndex: 0 },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, icon: SelectCircleIcon }),
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'select-tool-type-text mt-1 w-100 text-truncate pl-1 pr-1 d-flex justify-content-center', title: this.props.intl.formatMessage({ id: 'SelectionToolCircle', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolCircle }) }, this.props.intl.formatMessage({ id: 'SelectionToolCircle', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolCircle }))),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('select-tool-type mr-4 d-flex flex-column align-items-center justify-content-center select-tool-btn-hover', {
                                'select-tool-type-choosed': this.state.currentSelectType === 'Line'
                            }), onClick: () => { this.setCurrentSelectType('Line'); }, onKeyDown: e => { this.handleSelectTypeKeyDown(e, 'Line'); }, role: 'button', tabIndex: 0 },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, icon: SelectLineIcon }),
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'select-tool-type-text mt-1 w-100 text-truncate pl-1 pr-1 d-flex justify-content-center', title: this.props.intl.formatMessage({ id: 'SelectionToolLine', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolLine }) }, this.props.intl.formatMessage({ id: 'SelectionToolLine', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolLine }))),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('select-tool-type mr-4 d-flex flex-column align-items-center justify-content-center select-tool-btn-hover', {
                                'select-tool-type-choosed': this.state.currentSelectType === 'Point'
                            }), onClick: () => { this.setCurrentSelectType('Point'); }, onKeyDown: e => { this.handleSelectTypeKeyDown(e, 'Point'); }, role: 'button', tabIndex: 0 },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, icon: SelectPointIcon }),
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'select-tool-type-text mt-1 w-100 text-truncate pl-1 pr-1 d-flex justify-content-center', title: this.props.intl.formatMessage({ id: 'SelectionToolPoint', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolPoint }) }, this.props.intl.formatMessage({ id: 'SelectionToolPoint', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolPoint }))))),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'content-title mt-1 mb-2' }, this.props.intl.formatMessage({ id: 'SelectionMode', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionMode })),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", null,
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex align-items-center mt-2' },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Radio, { style: { cursor: 'pointer' }, checked: this.state.spatialRelationship === 'intersects', onChange: () => { this.setState({ spatialRelationship: 'intersects' }); } }),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("label", { className: 'm-0 ml-2 content-title', style: { cursor: 'pointer' }, onClick: () => { this.setState({ spatialRelationship: 'intersects' }); } }, this.props.intl.formatMessage({ id: 'SelectionWithin', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionWithin }))),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex align-items-center mt-2' },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Radio, { style: { cursor: 'pointer' }, checked: this.state.spatialRelationship === 'contains', onChange: () => { this.setState({ spatialRelationship: 'contains' }); } }),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("label", { className: 'm-0 ml-2 content-title', style: { cursor: 'pointer' }, onClick: () => { this.setState({ spatialRelationship: 'contains' }); } }, this.props.intl.formatMessage({ id: 'SelectionContain', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionContain }))))));
        };
        this.handleSelectTypeKeyDown = (e, selectType) => {
            if (e.key === 'Enter' || e.key === ' ') {
                this.setCurrentSelectType(selectType);
            }
        };
        this.handleKeyDown = (e, action) => {
            if (e.key === 'Enter' || e.key === ' ') {
                if (action === 'toggleIsSelectActive') {
                    this.toggleIsSelectActive();
                }
                else if (action === 'showSelectSetting') {
                    this.handleIsShowSelectSetting();
                }
                else if (action === 'onClickLoadingProgress') {
                    this.onClickLoadingProgress();
                }
            }
        };
        this.isMac = ((_b = (_a = window.jimuUA) === null || _a === void 0 ? void 0 : _a.os) === null || _b === void 0 ? void 0 : _b.name) === 'macOS';
        this.sketChCreateOptions = {
            polygon: {
                mode: 'hybrid'
            }
        };
        this.state = {
            currentSelectType: 'Rectangle',
            sketchInitialed: false,
            spatialRelationship: 'intersects',
            selectProgress: 0,
            isShowSelectSetting: false
        };
        this.bindShiftCtrlKeysEventListeners();
    }
    getCSSStyle() {
        const theme = this.props.theme;
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      .select-tool-btn-hover: hover {
        background-color: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rgba(theme.colors.palette.primary[500], 0.1)};;
      }

      .content-title {
        font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(13)};
        font-weight: bold;
      }

      .select-tool-type-mobile-container-shell {
        overflow-x: auto;
        padding: 4px;
      }

      .select-tool-type-mobile-container-shell::-webkit-scrollbar {
        height: 0 !important;
        display: none;
      }

      .select-tool-type-mobile-container {
        width: 400px;
      }

      .select-tool-type {
        width: 64px;
        height: 64px;
        border: 1px solid ${theme.colors.palette.light[400]};
        cursor: pointer;
      }

      .select-tool-type-choosed {
        border: 1px solid ${theme.colors.primary};
        position: relative;
      }

      .select-tool-type-choosed:after {
        width: 0;
        height: 0;
        border-top: 8px solid ${theme.colors.primary};
        border-left: 8px solid transparent;
        position: absolute;
        top: 0;
        right: 0;
        content: "";
      }

      .select-tool-type-text {
        font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(12)};
      }

      .select-tool-loader {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 2px;
        width: 100%;
        animation: esri-fade-in 500ms ease-in-out;
      }

      .select-tool-loader:before {
        background-color: rgba(110,110,110,0.3);
        width: 100%;
        z-index: 0;
        content: "";
        opacity: 1;
        position: absolute;
        height: 2px;
        top: 0;
        transition: opacity 500ms ease-in-out;
      }

      .select-tool-loader:after {
        background-color: ${theme.colors.primary};
        width: 40%;
        z-index: 0;
        animation: looping-progresss-bar-ani 1500ms linear infinite;
        content: "";
        opacity: 1;
        position: absolute;
        height: 2px;
        top: 0;
        transition: opacity 500ms ease-in-out;
      }

    `;
    }
    componentDidMount() {
        if (!this.state.sketchInitialed) {
            (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)([
                'esri/widgets/Sketch/SketchViewModel',
                'esri/layers/GraphicsLayer',
                'esri/rest/support/Query',
                'esri/symbols/support/jsonUtils',
                'esri/geometry/geometryEngine'
            ]).then(modules => {
                [this.SketchViewModel, this.GraphicsLayer, this.Query, this.jsonUtils, this.geometryEngine] = modules;
                this.props.jimuMapView.view.when(() => {
                    this.initialSketchTool();
                    this.setState({
                        sketchInitialed: true
                    });
                });
            });
        }
    }
    componentDidUpdate(prevProps, prevState) {
        const prevActiveToolName = prevProps.activeToolInfo && prevProps.activeToolInfo.activeToolName;
        const currentActiveToolName = this.props.activeToolInfo && this.props.activeToolInfo.activeToolName;
        if (prevActiveToolName !== currentActiveToolName && currentActiveToolName !== this.props.toolName && currentActiveToolName) {
            this.setState({
                isShowSelectSetting: false
            });
        }
        if (prevState.sketchInitialed !== this.state.sketchInitialed && this.state.sketchInitialed) {
            this.initialSketchTool();
            if (this.props.isActive && this.currentActiveTool) {
                this.setActiveToolForSketchViewModel(this.currentActiveTool);
            }
            return;
        }
        if (prevProps.jimuMapView && this.props.jimuMapView && (prevProps.jimuMapView.id !== this.props.jimuMapView.id) && this.state.sketchInitialed) {
            // active JimuMapView changed
            // need to destroy current this.sketchViewModel and recreate it, dont't change this.sketchViewModel.view, because we need to bind view keydown/keyup events before init sketchViewModel
            this.destroySketchViewModelAndReleaseHandles();
            this.initialSketchTool();
            if (this.props.isActive && this.currentActiveTool) {
                this.setActiveToolForSketchViewModel(this.currentActiveTool);
            }
            return;
        }
        if (prevProps.isActive !== this.props.isActive) {
            this.initialSketchTool();
            if (this.props.isActive) {
                this.setActiveToolForSketchViewModel(this.currentActiveTool);
            }
            else {
                this.destroySketchViewModelAndReleaseHandles();
            }
        }
    }
    componentWillUnmount() {
        this.destroySketchViewModelAndReleaseHandles();
        this.releaseShiftCtrlKeysEventListeners();
    }
    destroySketchViewModelAndReleaseHandles() {
        this.releaseViewHandles();
        if (this.sketchViewModel) {
            this.sketchViewModel.destroy();
            this.sketchViewModel = null;
        }
        this.activeJimuMapView = null;
    }
    releaseViewHandles() {
        if (this.activeJimuMapView) {
            this.activeJimuMapView.removeSelectByQueryProgressChangeListener(this.onJimuMapViewSelectProgressChange);
        }
        if (this.viewKeyDownHandle) {
            this.viewKeyDownHandle.remove();
            this.viewKeyDownHandle = null;
        }
        if (this.viewKeyUpHandle) {
            this.viewKeyUpHandle.remove();
            this.viewKeyUpHandle = null;
        }
    }
    useShiftKey(tolearnaceMs) {
        return this.useKey(this.lastShiftKeyEventInfo, tolearnaceMs);
    }
    useCtrlKey(tolearnaceMs) {
        return this.useKey(this.lastCtrlKeyEventInfo, tolearnaceMs);
    }
    useKey(lastKeyEventInfo, tolearnaceMs) {
        if (lastKeyEventInfo) {
            if (lastKeyEventInfo.isKeyDown) {
                // key is still down and not up, return true
                return true;
            }
            else {
                // key is up, we use tolearnaceMs to deterine the return value
                const deltaTime = Date.now() - lastKeyEventInfo.eventDate.getTime();
                if (deltaTime <= tolearnaceMs) {
                    // keyup time is not too long from now
                    return true;
                }
                else {
                    // keyup time is too long from nows
                    return false;
                }
            }
        }
        else {
            // key never down, return false
            return false;
        }
    }
    bindShiftCtrlKeysEventListeners() {
        document.addEventListener('keydown', this.onKeyDown, true);
        document.addEventListener('keyup', this.onKeyUp, true);
    }
    releaseShiftCtrlKeysEventListeners() {
        document.removeEventListener('keydown', this.onKeyDown, true);
        document.removeEventListener('keyup', this.onKeyUp, true);
    }
    initialSketchTool() {
        if (!this.SketchViewModel) {
            return;
        }
        if (!this.sketchViewModel) {
            this.releaseViewHandles();
            const jimuMapView = this.props.jimuMapView;
            this.activeJimuMapView = jimuMapView;
            this.activeJimuMapView.addSelectByQueryProgressChangeListener(this.onJimuMapViewSelectProgressChange);
            const view = jimuMapView.view;
            this.viewKeyDownHandle = view.on('key-down', (event) => {
                if (event.key === 'Shift') {
                    event.stopPropagation();
                }
            });
            this.viewKeyDownHandle = view.on('key-up', (event) => {
                if (event.key === 'Shift') {
                    event.stopPropagation();
                }
            });
            this.sketchViewModel = new this.SketchViewModel({
                view: view,
                layer: new this.GraphicsLayer(),
                pointSymbol: this.jsonUtils.fromJSON(defaultPointSymbol),
                polylineSymbol: this.jsonUtils.fromJSON(defaultPolylineSymbol),
                polygonSymbol: this.jsonUtils.fromJSON(defaultPolygonSymbol)
            });
            this.sketchViewModel.on('create', (event) => {
                if (event.state === 'complete') {
                    // keep continuous drawing for SketchViewModel
                    this.setActiveToolForSketchViewModel(this.currentActiveTool);
                    const jimuMapView = this.props.jimuMapView;
                    jimuMapView.view.closePopup();
                    const graphic = event.graphic;
                    // graphic.geometry is null when double click map
                    if (!graphic.geometry) {
                        console.log('sketch graphic.geometry is null');
                        return;
                    }
                    const useKeyToleranceMs = 500;
                    const isShiftKey = this.useShiftKey(useKeyToleranceMs);
                    const isCtrlKey = this.useCtrlKey(useKeyToleranceMs);
                    let selectionMode = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceSelectionMode.New;
                    if (isShiftKey) {
                        if (isCtrlKey) {
                            selectionMode = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceSelectionMode.SelectFromCurrent;
                        }
                        else {
                            selectionMode = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceSelectionMode.AddToCurrent;
                        }
                    }
                    else {
                        if (isCtrlKey) {
                            selectionMode = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceSelectionMode.RemoveFromCurrent;
                        }
                        else {
                            selectionMode = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceSelectionMode.New;
                        }
                    }
                    jimuMapView.selectFeaturesByGraphic(graphic, this.state.spatialRelationship, selectionMode);
                }
            });
        }
    }
    setActiveToolForSketchViewModel(activeTool) {
        if (this.sketchViewModel) {
            const createOptions = this.sketChCreateOptions[activeTool];
            if (createOptions) {
                this.sketchViewModel.create(activeTool, createOptions);
            }
            else {
                this.sketchViewModel.create(activeTool);
            }
        }
    }
    getSelectIconTitle() {
        let topTitle = '';
        if (this.state.currentSelectType === 'Point') {
            topTitle = this.formatMessage('SelectionByPoint');
        }
        else if (this.state.currentSelectType === 'Rectangle') {
            topTitle = this.formatMessage('SelectionByRectangle');
        }
        else if (this.state.currentSelectType === 'Lasso') {
            topTitle = this.formatMessage('SelectionByLasso');
        }
        else if (this.state.currentSelectType === 'Circle') {
            topTitle = this.formatMessage('SelectionByCircle');
        }
        else if (this.state.currentSelectType === 'Line') {
            topTitle = this.formatMessage('SelectionByLine');
        }
        else {
            topTitle = this.formatMessage('SelectLabel');
        }
        const newSelection = this.formatMessage('newSelection');
        const addToCurrentSelection = this.formatMessage('addToCurrentSelection');
        const removeFromCurrentSelection = this.formatMessage('removeFromCurrentSelection');
        const selectFromCurrentSelection = this.formatMessage('selectFromCurrentSelection');
        const drawShape = this.formatMessage('drawShape');
        const draw = this.formatMessage('draw');
        const ctrlKey = this.isMac ? 'Cmd' : 'Ctrl';
        const newSelectionTip = `∙ ${newSelection} (${drawShape})`;
        const addToCurrentSelectionTip = `∙ ${addToCurrentSelection} (Shift + ${draw})`;
        const removeFromCurrentSelectionTip = `∙ ${removeFromCurrentSelection} (${ctrlKey} + ${draw})`;
        const selectFromCurrentSelectionTip = `∙ ${selectFromCurrentSelection} (Shift + ${ctrlKey} + ${draw})`;
        const finalTitle = `${topTitle}
${newSelectionTip}
${addToCurrentSelectionTip}
${removeFromCurrentSelectionTip}
${selectFromCurrentSelectionTip}
    `;
        return finalTitle;
    }
    formatMessage(strId) {
        return this.props.intl.formatMessage({ id: strId, defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages[strId] });
    }
    render() {
        const selectIconTitle = this.getSelectIconTitle();
        const moreIconTitle = this.props.intl.formatMessage({ id: 'more', defaultMessage: 'More' });
        const isSelecting = this.state.selectProgress > 0 && this.state.selectProgress < 1;
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this.getCSSStyle() },
            this.state.sketchInitialed && !isSelecting && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { onClick: this.toggleIsSelectActive, style: {}, title: selectIconTitle, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('exbmap-ui-tool border-0 esri-widget--button', {
                    'exbmap-ui-tool-icon-selected': this.props.isActive
                }), onKeyDown: e => { this.handleKeyDown(e, 'toggleIsSelectActive'); }, role: 'button', tabIndex: 0 },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, className: 'exbmap-ui-tool-icon', icon: this.getSelectToolIcon() })),
            this.state.sketchInitialed && isSelecting && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_select_progress__WEBPACK_IMPORTED_MODULE_4__["default"], { progress: this.state.selectProgress, intl: this.props.intl, theme: this.props.theme, onClick: this.onClickLoadingProgress }),
            !this.state.sketchInitialed && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { style: {}, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('exbmap-ui-tool border-0 esri-widget--button') },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, className: 'exbmap-ui-tool-icon', icon: this.getSelectToolIcon() })),
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'border border-top-0 w-100', style: { height: '1px' } }),
            this.state.sketchInitialed && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { onClick: this.handleIsShowSelectSetting, title: moreIconTitle, style: {}, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('exbmap-ui-tool border-0 esri-widget--button'), onKeyDown: e => { this.handleKeyDown(e, 'showSelectSetting'); }, role: 'button', tabIndex: 0 },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, className: 'exbmap-ui-tool-icon', icon: SelectMoreIcon })),
            !this.state.sketchInitialed && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { style: {}, title: moreIconTitle, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('exbmap-ui-tool border-0 esri-widget--button') },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, className: 'exbmap-ui-tool-icon', icon: SelectMoreIcon })),
            this.state.isShowSelectSetting && this.getMobilePanelForSelectSetting()));
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/select/select-pc.tsx":
/*!*************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/select/select-pc.tsx ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SelectPCTool: () => (/* binding */ SelectPCTool)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");
/* harmony import */ var _select_progress__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./select-progress */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/select/select-progress.tsx");
/** @jsx jsx */




const defaultPointSymbol = {
    style: 'esriSMSCircle',
    color: [0, 0, 128, 128],
    name: 'Circle',
    outline: {
        color: [0, 0, 128, 255],
        width: 1
    },
    type: 'esriSMS',
    size: 18
};
const defaultPolylineSymbol = {
    tags: ['solid'],
    title: 'Blue Thin',
    style: 'esriSLSSolid',
    color: [79, 129, 189, 255],
    width: 3,
    name: 'Blue 1',
    type: 'esriSLS'
};
const defaultPolygonSymbol = {
    style: 'esriSFSSolid',
    color: [79, 129, 189, 77],
    type: 'esriSFS',
    outline: {
        style: 'esriSLSSolid',
        color: [54, 93, 141, 255],
        width: 1.5,
        type: 'esriSLS'
    }
};
const IconArrowDown = __webpack_require__(/*! jimu-ui/lib/icons/arrow-down-header.svg */ "./jimu-ui/lib/icons/arrow-down-header.svg");
const SelectRectangleIcon = __webpack_require__(/*! ../../assets/icons/select-tool/select-rectangle.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-rectangle.svg");
const SelectLassoIcon = __webpack_require__(/*! ../../assets/icons/select-tool/select-lasso.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-lasso.svg");
const SelectCircleIcon = __webpack_require__(/*! ../../assets/icons/select-tool/select-circle.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-circle.svg");
const SelectLineIcon = __webpack_require__(/*! ../../assets/icons/select-tool/select-line.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-line.svg");
const SelectPointIcon = __webpack_require__(/*! ../../assets/icons/select-tool/select-point.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-point.svg");
const SelectClearIcon = __webpack_require__(/*! ../../assets/icons/select-tool/select-clear.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-clear.svg");
class SelectPCTool extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        var _a, _b;
        super(props);
        this.currentActiveTool = 'rectangle';
        this.jsonUtils = null;
        this.resultGraphics = [];
        this.toggleIsSelectActive = () => {
            this.setState({
                isActive: !this.state.isActive
            }, () => {
                this.tryUpdateActiveToolInfoWhenStateChange();
            });
        };
        this.onClickLoadingProgress = () => {
            if (this.activeJimuMapView) {
                this.activeJimuMapView.cancelSelectByQuery();
            }
        };
        this.getSelectToolIcon = () => {
            if (this.state.currentSelectType === 'Point') {
                return SelectPointIcon;
            }
            else if (this.state.currentSelectType === 'Rectangle') {
                return SelectRectangleIcon;
            }
            else if (this.state.currentSelectType === 'Lasso') {
                return SelectLassoIcon;
            }
            else if (this.state.currentSelectType === 'Circle') {
                return SelectCircleIcon;
            }
            else if (this.state.currentSelectType === 'Line') {
                return SelectLineIcon;
            }
            else {
                return SelectRectangleIcon;
            }
        };
        this.toggleSelectTypePopup = () => {
            this.setState({
                isShowSelectTypePopup: !this.state.isShowSelectTypePopup
            }, () => {
                this.tryUpdateActiveToolInfoWhenStateChange();
            });
        };
        this.setCurrentSelectType = (currentSelectType) => {
            this.initialSketchTool();
            if (currentSelectType === 'Point') {
                this.setActiveToolForSketchViewModel('point');
                this.currentActiveTool = 'point';
            }
            if (currentSelectType === 'Rectangle') {
                this.setActiveToolForSketchViewModel('rectangle');
                this.currentActiveTool = 'rectangle';
            }
            if (currentSelectType === 'Lasso') {
                this.setActiveToolForSketchViewModel('polygon');
                this.currentActiveTool = 'polygon';
            }
            if (currentSelectType === 'Circle') {
                this.setActiveToolForSketchViewModel('circle');
                this.currentActiveTool = 'circle';
            }
            if (currentSelectType === 'Line') {
                this.setActiveToolForSketchViewModel('polyline');
                this.currentActiveTool = 'polyline';
            }
            this.setState({
                currentSelectType: currentSelectType,
                isShowSelectTypePopup: false,
                isActive: true
            });
        };
        this.onJimuMapViewSelectProgressChange = (progress) => {
            this.setState({
                selectProgress: progress
            });
        };
        this.onKeyDown = (event) => {
            if (event.key === 'Shift') {
                this.lastShiftKeyEventInfo = {
                    eventDate: new Date(),
                    isKeyDown: true
                };
            }
            else if ((this.isMac && event.key === 'Meta') || (!this.isMac && event.key === 'Control')) {
                this.lastCtrlKeyEventInfo = {
                    eventDate: new Date(),
                    isKeyDown: true
                };
            }
        };
        this.onKeyUp = (event) => {
            if (event.key === 'Shift') {
                this.lastShiftKeyEventInfo = {
                    eventDate: new Date(),
                    isKeyDown: false
                };
            }
            else if ((this.isMac && event.key === 'Meta') || (!this.isMac && event.key === 'Control')) {
                this.lastCtrlKeyEventInfo = {
                    eventDate: new Date(),
                    isKeyDown: false
                };
            }
        };
        this.clearSelect = () => {
            this.props.jimuMapView.clearSelectedFeatures();
        };
        this.onPopperToggle = (e) => {
            this.toggleSelectTypePopup();
            if (e) {
                if (e.type === 'keydown' && e.key === 'Escape') {
                    this.btnSelectTypeContainer.focus();
                }
            }
        };
        this.handleKeyDown = (e, selectType) => {
            if (e.key === 'Enter' || e.key === ' ') {
                this.setCurrentSelectType(selectType);
            }
        };
        this.isMac = ((_b = (_a = window.jimuUA) === null || _a === void 0 ? void 0 : _a.os) === null || _b === void 0 ? void 0 : _b.name) === 'macOS';
        this.sketChCreateOptions = {
            polygon: {
                mode: 'hybrid'
            }
        };
        this.state = {
            isShowSelectTypePopup: false,
            currentSelectType: 'Rectangle',
            sketchInitialed: false,
            isActive: false,
            spatialRelationship: 'intersects',
            resultGraphics: [],
            selectProgress: 0
        };
        this.bindShiftCtrlKeysEventListeners();
    }
    getCSSStyle() {
        const theme = this.props.theme;
        const containerbg = theme.arcgis.components.button.variants.default.default.bg;
        const containerBorder = theme.arcgis.components.button.variants.default.default.border;
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      .select-tool-container {
        ${containerbg && `background-color: ${containerbg};`}
        ${containerBorder && `border: ${containerBorder.color} ${containerBorder.width} solid;`}
      }

      .select-tool-btn {
        width: 32px;
        height: 32px;
      }

      .content-bg {
        background-color: ${theme.colors.palette.light[100]};
      }

      .content-title {
        font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(13)};
        font-weight: bold;
      }

      .select-tool-type-mobile-container-shell {
        overflow-x: auto;
      }

      .select-tool-type-mobile-container-shell::-webkit-scrollbar {
        height: 0 !important;
        display: none;
      }

      .select-tool-type-mobile-container {
        width: 400px;
      }

      .select-tool-type {
        width: 64px;
        height: 64px;
        border: 1px solid ${theme.colors.palette.light[400]};
        cursor: pointer;
      }

      .select-tool-type-choosed {
        border: 1px solid ${theme.colors.primary};
        position: relative;
      }

      .select-tool-type-choosed:after {
        width: 0;
        height: 0;
        border-top: 8px solid ${theme.colors.primary};
        border-left: 8px solid transparent;
        position: absolute;
        top: 0;
        right: 0;
        content: "";
      }

      .select-tool-type-text {
        font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(12)};
      }

      .select-tool-loader {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 2px;
        width: 100%;
        animation: esri-fade-in 500ms ease-in-out;
      }

      .select-tool-loader:before {
        background-color: rgba(110,110,110,0.3);
        width: 100%;
        z-index: 0;
        content: "";
        opacity: 1;
        position: absolute;
        height: 2px;
        top: 0;
        transition: opacity 500ms ease-in-out;
      }

      .select-tool-loader:after {
        background-color: ${theme.colors.primary};
        width: 20%;
        z-index: 0;
        animation: looping-progresss-bar-ani 1500ms linear infinite;
        content: "";
        opacity: 1;
        position: absolute;
        height: 2px;
        top: 0;
        transition: opacity 500ms ease-in-out;
      }
    `;
    }
    componentDidMount() {
        if (!this.state.sketchInitialed) {
            (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)([
                'esri/widgets/Sketch/SketchViewModel',
                'esri/layers/GraphicsLayer',
                'esri/rest/support/Query',
                'esri/symbols/support/jsonUtils',
                'esri/geometry/geometryEngine'
            ]).then(modules => {
                [this.SketchViewModel, this.GraphicsLayer, this.Query, this.jsonUtils, this.geometryEngine] = modules;
                this.props.jimuMapView.view.when(() => {
                    this.initialSketchTool();
                    this.setState({
                        sketchInitialed: true
                    });
                });
            });
        }
    }
    componentDidUpdate(prevProps, prevState) {
        if (prevState.sketchInitialed !== this.state.sketchInitialed && this.state.sketchInitialed) {
            this.initialSketchTool();
            if (this.state.isActive && this.currentActiveTool) {
                this.setActiveToolForSketchViewModel(this.currentActiveTool);
            }
            return;
        }
        if (prevProps.jimuMapView && this.props.jimuMapView && (prevProps.jimuMapView.id !== this.props.jimuMapView.id) && this.state.sketchInitialed) {
            // active JimuMapView changed
            // need to destroy current this.sketchViewModel and recreate it, dont't change this.sketchViewModel.view, because we need to bind view keydown/keyup events before init sketchViewModel
            this.destroySketchViewModelAndReleaseHandles();
            this.initialSketchTool();
            if (this.state.isActive && this.currentActiveTool) {
                this.setActiveToolForSketchViewModel(this.currentActiveTool);
            }
            return;
        }
        if (prevState.isActive !== this.state.isActive) {
            // active change
            this.initialSketchTool();
            if (this.state.isActive) {
                // change from inactive to active
                this.setActiveToolForSketchViewModel(this.currentActiveTool);
            }
            else {
                // change from active to inactive
                this.destroySketchViewModelAndReleaseHandles();
            }
        }
        this.tryUpdateActiveToolInfoWhenPropsChange(prevProps);
    }
    componentWillUnmount() {
        this.destroySketchViewModelAndReleaseHandles();
        this.releaseShiftCtrlKeysEventListeners();
    }
    getSelectIconTitle() {
        let topTitle = '';
        if (this.state.currentSelectType === 'Point') {
            topTitle = this.formatMessage('SelectionByPoint');
        }
        else if (this.state.currentSelectType === 'Rectangle') {
            topTitle = this.formatMessage('SelectionByRectangle');
        }
        else if (this.state.currentSelectType === 'Lasso') {
            topTitle = this.formatMessage('SelectionByLasso');
        }
        else if (this.state.currentSelectType === 'Circle') {
            topTitle = this.formatMessage('SelectionByCircle');
        }
        else if (this.state.currentSelectType === 'Line') {
            topTitle = this.formatMessage('SelectionByLine');
        }
        else {
            topTitle = this.formatMessage('SelectLabel');
        }
        const newSelection = this.formatMessage('newSelection');
        const addToCurrentSelection = this.formatMessage('addToCurrentSelection');
        const removeFromCurrentSelection = this.formatMessage('removeFromCurrentSelection');
        const selectFromCurrentSelection = this.formatMessage('selectFromCurrentSelection');
        const drawShape = this.formatMessage('drawShape');
        const draw = this.formatMessage('draw');
        const ctrlKey = this.isMac ? 'Cmd' : 'Ctrl';
        const newSelectionTip = `∙ ${newSelection} (${drawShape})`;
        const addToCurrentSelectionTip = `∙ ${addToCurrentSelection} (Shift + ${draw})`;
        const removeFromCurrentSelectionTip = `∙ ${removeFromCurrentSelection} (${ctrlKey} + ${draw})`;
        const selectFromCurrentSelectionTip = `∙ ${selectFromCurrentSelection} (Shift + ${ctrlKey} + ${draw})`;
        const finalTitle = `${topTitle}
${newSelectionTip}
${addToCurrentSelectionTip}
${removeFromCurrentSelectionTip}
${selectFromCurrentSelectionTip}
    `;
        return finalTitle;
    }
    formatMessage(strId) {
        return this.props.intl.formatMessage({ id: strId, defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages[strId] });
    }
    tryUpdateActiveToolInfoWhenStateChange() {
        var _a;
        const prevSelectIsActiveTool = ((_a = this.props.activeToolInfo) === null || _a === void 0 ? void 0 : _a.activeToolName) === this.props.toolName;
        const currentSelectIsActiveTool = !!(this.state.isActive || this.state.isShowSelectTypePopup);
        if (!prevSelectIsActiveTool && currentSelectIsActiveTool) {
            // select changes to active tool
            this.props.onActiveToolInfoChange({
                activeToolName: this.props.toolName,
                activeToolTitle: this.props.toolName
            });
        }
        else if (prevSelectIsActiveTool && !currentSelectIsActiveTool) {
            // select changes to inactive tool
            this.setState({
                isActive: false,
                isShowSelectTypePopup: false
            });
            this.props.onActiveToolInfoChange(null);
        }
    }
    tryUpdateActiveToolInfoWhenPropsChange(prevProps) {
        var _a, _b;
        const preActiveToolName = ((_a = prevProps === null || prevProps === void 0 ? void 0 : prevProps.activeToolInfo) === null || _a === void 0 ? void 0 : _a.activeToolName) || '';
        const currentActiveToolName = ((_b = this.props.activeToolInfo) === null || _b === void 0 ? void 0 : _b.activeToolName) || '';
        if (preActiveToolName !== currentActiveToolName) {
            // props.activeToolInfo.activeToolName changes
            const toolName = this.props.toolName;
            const prevSelectIsActiveTool = preActiveToolName === toolName;
            const currentSelectIsActiveTool = currentActiveToolName === toolName;
            if (prevSelectIsActiveTool && !currentSelectIsActiveTool) {
                // select changes to inactive tool
                this.setState({
                    isActive: false,
                    isShowSelectTypePopup: false
                });
            }
        }
    }
    destroySketchViewModelAndReleaseHandles() {
        this.releaseViewHandles();
        if (this.sketchViewModel) {
            this.sketchViewModel.destroy();
            this.sketchViewModel = null;
        }
        this.activeJimuMapView = null;
    }
    releaseViewHandles() {
        if (this.activeJimuMapView) {
            this.activeJimuMapView.removeSelectByQueryProgressChangeListener(this.onJimuMapViewSelectProgressChange);
        }
        if (this.viewKeyDownHandle) {
            this.viewKeyDownHandle.remove();
            this.viewKeyDownHandle = null;
        }
        if (this.viewKeyUpHandle) {
            this.viewKeyUpHandle.remove();
            this.viewKeyUpHandle = null;
        }
    }
    useShiftKey(tolearnaceMs) {
        return this.useKey(this.lastShiftKeyEventInfo, tolearnaceMs);
    }
    useCtrlKey(tolearnaceMs) {
        return this.useKey(this.lastCtrlKeyEventInfo, tolearnaceMs);
    }
    useKey(lastKeyEventInfo, tolearnaceMs) {
        if (lastKeyEventInfo) {
            if (lastKeyEventInfo.isKeyDown) {
                // key is still down and not up, return true
                return true;
            }
            else {
                // key is up, we use tolearnaceMs to deterine the return value
                const deltaTime = Date.now() - lastKeyEventInfo.eventDate.getTime();
                if (deltaTime <= tolearnaceMs) {
                    // keyup time is not too long from now
                    return true;
                }
                else {
                    // keyup time is too long from nows
                    return false;
                }
            }
        }
        else {
            // key never down, return false
            return false;
        }
    }
    bindShiftCtrlKeysEventListeners() {
        document.addEventListener('keydown', this.onKeyDown, true);
        document.addEventListener('keyup', this.onKeyUp, true);
    }
    releaseShiftCtrlKeysEventListeners() {
        document.removeEventListener('keydown', this.onKeyDown, true);
        document.removeEventListener('keyup', this.onKeyUp, true);
    }
    initialSketchTool() {
        if (!this.SketchViewModel) {
            return;
        }
        if (!this.sketchViewModel) {
            this.releaseViewHandles();
            const jimuMapView = this.props.jimuMapView;
            this.activeJimuMapView = jimuMapView;
            this.activeJimuMapView.addSelectByQueryProgressChangeListener(this.onJimuMapViewSelectProgressChange);
            const view = jimuMapView.view;
            this.viewKeyDownHandle = view.on('key-down', (event) => {
                if (event.key === 'Shift') {
                    event.stopPropagation();
                }
            });
            this.viewKeyDownHandle = view.on('key-up', (event) => {
                if (event.key === 'Shift') {
                    event.stopPropagation();
                }
            });
            this.sketchViewModel = new this.SketchViewModel({
                view: view,
                layer: new this.GraphicsLayer(),
                pointSymbol: this.jsonUtils.fromJSON(defaultPointSymbol),
                polylineSymbol: this.jsonUtils.fromJSON(defaultPolylineSymbol),
                polygonSymbol: this.jsonUtils.fromJSON(defaultPolygonSymbol)
            });
            this.sketchViewModel.on('create', (event) => {
                if (event.state === 'complete') {
                    // keep continuous drawing for SketchViewModel
                    this.setActiveToolForSketchViewModel(this.currentActiveTool);
                    const jimuMapView = this.props.jimuMapView;
                    jimuMapView.view.closePopup();
                    const graphic = event.graphic;
                    // graphic.geometry is null when double click map
                    if (!graphic.geometry) {
                        console.log('sketch graphic.geometry is null');
                        return;
                    }
                    const useKeyToleranceMs = 500;
                    const isShiftKey = this.useShiftKey(useKeyToleranceMs);
                    const isCtrlKey = this.useCtrlKey(useKeyToleranceMs);
                    let selectionMode = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceSelectionMode.New;
                    if (isShiftKey) {
                        if (isCtrlKey) {
                            selectionMode = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceSelectionMode.SelectFromCurrent;
                        }
                        else {
                            selectionMode = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceSelectionMode.AddToCurrent;
                        }
                    }
                    else {
                        if (isCtrlKey) {
                            selectionMode = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceSelectionMode.RemoveFromCurrent;
                        }
                        else {
                            selectionMode = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceSelectionMode.New;
                        }
                    }
                    jimuMapView.selectFeaturesByGraphic(graphic, this.state.spatialRelationship, selectionMode);
                }
            });
        }
    }
    setActiveToolForSketchViewModel(activeTool) {
        if (this.sketchViewModel) {
            const createOptions = this.sketChCreateOptions[activeTool];
            if (createOptions) {
                this.sketchViewModel.create(activeTool, createOptions);
            }
            else {
                this.sketchViewModel.create(activeTool);
            }
        }
    }
    render() {
        const selectIconTitle = this.getSelectIconTitle();
        const clearSelectionTitle = this.props.intl.formatMessage({ id: 'clearSelection', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.clearSelection });
        const isSelecting = this.state.selectProgress > 0 && this.state.selectProgress < 1;
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this.getCSSStyle() },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex align-items-center justify-content-center select-tool-container', ref: ref => { this.btnContainer = ref; } },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex', title: selectIconTitle },
                        !isSelecting && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("button", { onClick: this.toggleIsSelectActive, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('esri-widget--button  border-0 select-tool-btn d-flex align-items-center justify-content-center', { active: this.state.isActive }), disabled: !this.state.sketchInitialed },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, icon: this.getSelectToolIcon() })),
                        isSelecting && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_select_progress__WEBPACK_IMPORTED_MODULE_3__["default"], { progress: this.state.selectProgress, intl: this.props.intl, theme: this.props.theme, onClick: this.onClickLoadingProgress }),
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("button", { onClick: this.toggleSelectTypePopup, style: { width: 18 }, className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('esri-widget--button border-0 pl-1 pr-1 select-tool-btn d-flex align-items-center justify-content-center', { active: this.state.isShowSelectTypePopup }), disabled: !this.state.sketchInitialed, ref: ref => { this.btnSelectTypeContainer = ref; } },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 8, height: 8, icon: IconArrowDown }))),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("button", { title: clearSelectionTitle, className: 'select-tool-btn d-flex align-items-center justify-content-center select-tool-btn-hover esri-widget--button border-0', ref: ref => { this.selectResultContainer = ref; }, onClick: this.clearSelect, disabled: !this.state.sketchInitialed },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, icon: SelectClearIcon })),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Popper, { css: this.getCSSStyle(), reference: this.btnContainer, open: this.state.isShowSelectTypePopup, placement: 'bottom-start', toggle: this.onPopperToggle },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'p-4 content-bg', style: { display: 'flex', flexDirection: 'column' } },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'content-title' }, this.props.intl.formatMessage({ id: 'SelectionTool', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionTool })),
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'mt-2 mb-2' },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex mb-2' },
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('select-tool-type mr-2 d-flex flex-column align-items-center justify-content-center select-tool-btn-hover', {
                                            'select-tool-type-choosed': this.state.currentSelectType === 'Rectangle'
                                        }), onClick: () => { this.setCurrentSelectType('Rectangle'); }, onKeyDown: e => { this.handleKeyDown(e, 'Rectangle'); }, role: 'button', tabIndex: 0 },
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, icon: SelectRectangleIcon }),
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'select-tool-type-text mt-1 w-100 text-truncate pl-1 pr-1 d-flex justify-content-center', title: this.props.intl.formatMessage({ id: 'SelectionToolRectangle', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolRectangle }) }, this.props.intl.formatMessage({ id: 'SelectionToolRectangle', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolRectangle }))),
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('select-tool-type mr-2 d-flex flex-column align-items-center justify-content-center select-tool-btn-hover', {
                                            'select-tool-type-choosed': this.state.currentSelectType === 'Lasso'
                                        }), onClick: () => { this.setCurrentSelectType('Lasso'); }, onKeyDown: e => { this.handleKeyDown(e, 'Lasso'); }, role: 'button', tabIndex: 0 },
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, icon: SelectLassoIcon }),
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'select-tool-type-text mt-1 w-100 text-truncate pl-1 pr-1 d-flex justify-content-center', title: this.props.intl.formatMessage({ id: 'SelectionToolLasso', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolLasso }) }, this.props.intl.formatMessage({ id: 'SelectionToolLasso', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolLasso }))),
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('select-tool-type d-flex flex-column align-items-center justify-content-center select-tool-btn-hover', {
                                            'select-tool-type-choosed': this.state.currentSelectType === 'Circle'
                                        }), onClick: () => { this.setCurrentSelectType('Circle'); }, onKeyDown: e => { this.handleKeyDown(e, 'Circle'); }, role: 'button', tabIndex: 0 },
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, icon: SelectCircleIcon }),
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'select-tool-type-text mt-1 w-100 text-truncate pl-1 pr-1 d-flex justify-content-center', title: this.props.intl.formatMessage({ id: 'SelectionToolCircle', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolCircle }) }, this.props.intl.formatMessage({ id: 'SelectionToolCircle', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolCircle })))),
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex' },
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('select-tool-type mr-2 d-flex flex-column align-items-center justify-content-center select-tool-btn-hover', {
                                            'select-tool-type-choosed': this.state.currentSelectType === 'Line'
                                        }), onClick: () => { this.setCurrentSelectType('Line'); }, onKeyDown: e => { this.handleKeyDown(e, 'Line'); }, role: 'button', tabIndex: 0 },
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, icon: SelectLineIcon }),
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'select-tool-type-text mt-1 w-100 text-truncate pl-1 pr-1 d-flex justify-content-center', title: this.props.intl.formatMessage({ id: 'SelectionToolLine', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolLine }) }, this.props.intl.formatMessage({ id: 'SelectionToolLine', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolLine }))),
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('select-tool-type d-flex flex-column align-items-center justify-content-center select-tool-btn-hover', {
                                            'select-tool-type-choosed': this.state.currentSelectType === 'Point'
                                        }), onClick: () => { this.setCurrentSelectType('Point'); }, onKeyDown: e => { this.handleKeyDown(e, 'Point'); }, role: 'button', tabIndex: 0 },
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, icon: SelectPointIcon }),
                                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'select-tool-type-text mt-1 w-100 text-truncate pl-1 pr-1 d-flex justify-content-center', title: this.props.intl.formatMessage({ id: 'SelectionToolPoint', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolPoint }) }, this.props.intl.formatMessage({ id: 'SelectionToolPoint', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionToolPoint }))))),
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'content-title' }, this.props.intl.formatMessage({ id: 'SelectionMode', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionMode })),
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", null,
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex align-items-center mt-2' },
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Radio, { style: { cursor: 'pointer' }, checked: this.state.spatialRelationship === 'intersects', onChange: () => { this.setState({ spatialRelationship: 'intersects' }); } }),
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("label", { className: 'm-0 ml-2 content-title', style: { cursor: 'pointer' }, onClick: () => { this.setState({ spatialRelationship: 'intersects' }); } }, this.props.intl.formatMessage({ id: 'SelectionWithin', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionWithin }))),
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex align-items-center mt-2' },
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Radio, { style: { cursor: 'pointer' }, checked: this.state.spatialRelationship === 'contains', onChange: () => { this.setState({ spatialRelationship: 'contains' }); } }),
                                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("label", { className: 'm-0 ml-2 content-title', style: { cursor: 'pointer' }, onClick: () => { this.setState({ spatialRelationship: 'contains' }); } }, this.props.intl.formatMessage({ id: 'SelectionContain', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionContain })))))))),
            (!this.state.sketchInitialed) && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'select-tool-loader' })));
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/select/select-progress.tsx":
/*!*******************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/select/select-progress.tsx ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SelectProgress)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/** @jsx jsx */


class SelectProgress extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.state = {};
    }
    getStyle() {
        const progressColor = this.props.theme.darkTheme ? 'black' : 'white';
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      position: relative;

      .select-circle-progress {
        position: absolute;
        left: 6px;
        top: 6px;

        .progress-circle-bg {
          stroke: ${progressColor};
          opacity: 0.3;
        }

        .progress-circle-progress {
          stroke: ${progressColor};
        }
      }

      .progress-stop {
        width: 6px;
        height: 6px;
        background: ${progressColor};
      }

      .progress-mask {
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        background: transparent;
      }
    `;
    }
    render() {
        var _a;
        const progress = this.props.progress * 100;
        const progressInt = parseFloat(progress.toFixed(2));
        const defaultStr = jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.selectingFeaturesTip;
        const title = ((_a = this.props.intl) === null || _a === void 0 ? void 0 : _a.formatMessage({ id: 'selectingFeaturesTip', defaultMessage: defaultStr })) || defaultStr;
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("button", { css: this.getStyle(), onClick: this.props.onClick, className: 'esri-widget--button  border-0 select-tool-btn d-flex align-items-center justify-content-center active select-progress' },
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Progress, { className: 'select-circle-progress', color: 'light', type: 'circular', value: progressInt, circleSize: 20 }),
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'progress-stop' }),
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'progress-mask', title: title })));
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/selectstate/index.tsx":
/*!**************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/selectstate/index.tsx ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SelectState)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var _selected_number__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selected-number */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/selectstate/selected-number.tsx");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/** @jsx jsx */




const SelectZoomtoIcon = __webpack_require__(/*! ../../assets/icons/select-tool/select-zoomto.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-zoomto.svg");
const SelectClearIcon = __webpack_require__(/*! ../../assets/icons/select-tool/select-clear.svg */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/assets/icons/select-tool/select-clear.svg");
class SelectState extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_2__.BaseTool {
    constructor(props) {
        super(props);
        this.toolName = 'SelectState';
        this.handleSelectedGraphicsChanged = (selectedGraphicCount) => {
            this.setState({
                selectedGraphicCount
            });
        };
        this.zoomToSelectedFeatures = () => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const view = (_a = this.props.jimuMapView) === null || _a === void 0 ? void 0 : _a.view;
            if (view) {
                const graphics = yield this.getSelectedGraphics();
                if (graphics.length > 0) {
                    view.goTo(graphics);
                }
            }
        });
        this.clearSelectedFeatures = () => {
            this.props.jimuMapView.clearSelectedFeatures();
        };
        this.state = {
            selectedGraphicCount: 0
        };
    }
    getStyle() {
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      background-color: ${this.props.theme.arcgis.components.button.variants.default.default.bg};

      .divide-line {
        border-right: 1px solid ${this.props.theme.colors.palette.dark[400]};
        height: 100%;
      }
    `;
    }
    getTitle() {
        return '';
    }
    getIcon() {
        return null;
    }
    getSelectedGraphics() {
        return __awaiter(this, void 0, void 0, function* () {
            let selectedGraphics = [];
            if (this.props.jimuMapView) {
                selectedGraphics = yield this.props.jimuMapView.getSelectedFeatures();
            }
            return selectedGraphics;
        });
    }
    getExpandPanel() {
        const selectedFeaturesTip = this.props.intl.formatMessage({ id: 'SelectionSelectedFeatures', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionSelectedFeatures });
        const clearSelectionTitle = this.props.intl.formatMessage({ id: 'clearSelection', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.clearSelection });
        const zoomToSelectedFeaturesTip = this.props.intl.formatMessage({ id: 'SelectionZoomToSelectedFeatures', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_1__.defaultMessages.SelectionZoomToSelectedFeatures });
        if (this.props.isMobile) {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this.getStyle(), className: 'w-100 d-flex justify-content-between align-items-center', style: { height: '40px' } },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'ml-2' }, `${selectedFeaturesTip}: ${this.state.selectedGraphicCount}`),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'd-flex' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { title: zoomToSelectedFeaturesTip, className: 'h-100 border border-top-0 border-bottom-0 d-flex justify-content-center align-items-center', style: { width: '40px', cursor: 'pointer' }, onClick: this.zoomToSelectedFeatures },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 18, height: 18, icon: SelectZoomtoIcon })),
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'h-100 d-flex justify-content-center align-items-center', style: { width: '40px', cursor: 'pointer' }, onClick: this.clearSelectedFeatures, title: clearSelectionTitle },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 18, height: 18, icon: SelectClearIcon }))),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_selected_number__WEBPACK_IMPORTED_MODULE_3__.SelectedNumber, { jimuMapView: this.props.jimuMapView, onSelectedGraphicsChanged: this.handleSelectedGraphicsChanged })));
        }
        else {
            return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.Fragment, null,
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Button, { onClick: this.zoomToSelectedFeatures, title: zoomToSelectedFeaturesTip },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, { width: 16, height: 16, icon: SelectZoomtoIcon, className: 'mr-2' }),
                    `${selectedFeaturesTip}: ${this.state.selectedGraphicCount}`),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_selected_number__WEBPACK_IMPORTED_MODULE_3__.SelectedNumber, { jimuMapView: this.props.jimuMapView, onSelectedGraphicsChanged: this.handleSelectedGraphicsChanged })));
        }
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/selectstate/selected-number.tsx":
/*!************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/selectstate/selected-number.tsx ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SelectedNumber: () => (/* binding */ SelectedNumber)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

class _SelectedNumber extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor() {
        super(...arguments);
        this.onJimuLayerViewSelectedFeaturesChange = () => {
            // Typically, this callback method is called when we highlight a feature by popup click, but the data source is not used and not created.
            this.computerSelectedGraphicCount();
        };
    }
    componentDidMount() {
        this.setCurrentJimuMapView(this.props.jimuMapView);
        this.computerSelectedGraphicCount();
    }
    componentDidUpdate(prevProps) {
        const preJimuMapView = (prevProps === null || prevProps === void 0 ? void 0 : prevProps.jimuMapView) || null;
        const currJimuMapView = this.props.jimuMapView || null;
        if (preJimuMapView !== currJimuMapView) {
            // switch map
            this.setCurrentJimuMapView(currJimuMapView);
        }
        this.computerSelectedGraphicCount();
    }
    componentWillUnmount() {
        this.setCurrentJimuMapView(null);
    }
    setCurrentJimuMapView(jimuMapView) {
        if (this.currentJimuMapView) {
            this.currentJimuMapView.removeJimuLayerViewSelectedFeaturesChangeListener(this.onJimuLayerViewSelectedFeaturesChange);
        }
        this.currentJimuMapView = jimuMapView;
        if (this.currentJimuMapView) {
            this.currentJimuMapView.addJimuLayerViewSelectedFeaturesChangeListener(this.onJimuLayerViewSelectedFeaturesChange);
        }
    }
    computerSelectedGraphicCount() {
        if (this.props.onSelectedGraphicsChanged) {
            const selectedGraphicCount = this.props.jimuMapView.getSelectedFeatureCount();
            this.props.onSelectedGraphicsChanged(selectedGraphicCount);
        }
    }
    render() {
        return null;
    }
}
const mapStateToProps = (state, ownProps) => {
    if (state.appStateInBuilder) {
        const dataSourcesInfo = state.appStateInBuilder && state.appStateInBuilder.dataSourcesInfo;
        const jimuMapViewsInfo = state.appStateInBuilder && state.appStateInBuilder.jimuMapViewsInfo;
        return {
            dataSourcesInfo: dataSourcesInfo,
            viewInfos: jimuMapViewsInfo
        };
    }
    else {
        const dataSourcesInfo = state && state.dataSourcesInfo;
        const jimuMapViewsInfo = state && state.jimuMapViewsInfo;
        return {
            dataSourcesInfo: dataSourcesInfo,
            viewInfos: jimuMapViewsInfo
        };
    }
};
const SelectedNumber = jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactRedux.connect(mapStateToProps)(_SelectedNumber);


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/zoom.tsx":
/*!*************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/tools/zoom.tsx ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Zoom)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layout/base/base-tool */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/layout/base/base-tool.tsx");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");




class Zoom extends _layout_base_base_tool__WEBPACK_IMPORTED_MODULE_1__.BaseTool {
    constructor() {
        super(...arguments);
        this.toolName = 'Zoom';
    }
    getTitle() {
        return this.props.intl.formatMessage({ id: 'ZoomLabel', defaultMessage: jimu_ui__WEBPACK_IMPORTED_MODULE_3__.defaultMessages.ZoomLabel });
    }
    getIcon() {
        return null;
    }
    getExpandPanel() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(ZoomInner, { jimuMapView: this.props.jimuMapView });
    }
}
class ZoomInner extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.Zoom = null;
        this.state = {
            apiLoaded: false
        };
    }
    componentDidMount() {
        if (!this.state.apiLoaded) {
            (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_2__.loadArcGISJSAPIModules)(['esri/widgets/Zoom']).then(modules => {
                [this.Zoom] = modules;
                this.setState({
                    apiLoaded: true
                });
            });
        }
    }
    componentDidUpdate() {
        if (this.state.apiLoaded && this.container) {
            if (this.ZoomBtn) {
                this.container.innerHTML = '';
            }
            this.ZoomBtn = new this.Zoom({
                container: this.container,
                view: this.props.jimuMapView.view
            });
            this.props.jimuMapView.deleteJimuMapTool('Zoom');
            this.props.jimuMapView.addJimuMapTool({
                name: 'Zoom',
                instance: this.ZoomBtn
            });
        }
    }
    componentWillUnmount() {
        if (this.ZoomBtn) {
            this.ZoomBtn.destroy();
            this.ZoomBtn = null;
            this.props.jimuMapView.deleteJimuMapTool('Zoom');
            /**
             * TODO
             * When the map widget has two maps, the "componentWillUnmount" is called only for the current active view,
             * so the another view's mapTool is not cleared.
             */
        }
    }
    render() {
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("div", { className: 'zoom-map-tool', ref: ref => { this.container = ref; } });
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/translations/default.ts":
/*!**********************************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/translations/default.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    _widgetLabel: 'Map',
    _action_displayFeatureSet_label: 'Display feature set',
    _action_panTo_label: 'Pan to',
    _action_zoomToFeature_label: 'Zoom to',
    _action_selectFeature_label: 'Select feature',
    _action_flash_label: 'Flash',
    _action_filter_label: 'Filter',
    _action_showOnMap_label: 'Show on map',
    _action_addToMap_label: 'Add to map',
    showOnMapData: 'Show on map data',
    addedData: 'added data',
    failToAddTheDataOnMap: 'Fail to add the data.',
    addToMapData: 'Add to map data',
    mapCurrentRecord: '{layerName} map current record',
    _url_params_map_state_label: 'Viewpoint',
    _url_params_layer_center_label: 'Center',
    _url_params_layer_scale_label: 'Scale',
    _url_params_layer_rotation_label: 'Rotation',
    _url_params_layer_visibility_label: 'Layer visibility'
});


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/runtime/utils.ts":
/*!*******************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/utils.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkIsLive: () => (/* binding */ checkIsLive),
/* harmony export */   cloneFeature: () => (/* binding */ cloneFeature),
/* harmony export */   createNewFeaturelayer: () => (/* binding */ createNewFeaturelayer),
/* harmony export */   filterFeaturesByQuery: () => (/* binding */ filterFeaturesByQuery),
/* harmony export */   flashFeaturesByQuery: () => (/* binding */ flashFeaturesByQuery),
/* harmony export */   getJimuMapViewId: () => (/* binding */ getJimuMapViewId),
/* harmony export */   getLayersFromDataSourceIds: () => (/* binding */ getLayersFromDataSourceIds),
/* harmony export */   getMapBaseRestoreData: () => (/* binding */ getMapBaseRestoreData),
/* harmony export */   getViewpointInstanceFromHistory: () => (/* binding */ getViewpointInstanceFromHistory),
/* harmony export */   goToTargetImmediately: () => (/* binding */ goToTargetImmediately),
/* harmony export */   goToViewpointImmediately: () => (/* binding */ goToViewpointImmediately),
/* harmony export */   isNeedProjectSpatialReference: () => (/* binding */ isNeedProjectSpatialReference),
/* harmony export */   isNeedProjectViewpoint: () => (/* binding */ isNeedProjectViewpoint),
/* harmony export */   isSamelikeViewpoints: () => (/* binding */ isSamelikeViewpoints),
/* harmony export */   isTwoWidgetsMutuallyExtentChange: () => (/* binding */ isTwoWidgetsMutuallyExtentChange),
/* harmony export */   isWidgetSendZoomToActionToAnother: () => (/* binding */ isWidgetSendZoomToActionToAnother),
/* harmony export */   mapPanto: () => (/* binding */ mapPanto),
/* harmony export */   processZoomToFeatures: () => (/* binding */ processZoomToFeatures),
/* harmony export */   projectGeometries: () => (/* binding */ projectGeometries),
/* harmony export */   projectViewpoint: () => (/* binding */ projectViewpoint),
/* harmony export */   restoreMapBase: () => (/* binding */ restoreMapBase),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   updateFeaturelayer: () => (/* binding */ updateFeaturelayer),
/* harmony export */   updateUrlHashParamsForActiveJimuMapView: () => (/* binding */ updateUrlHashParamsForActiveJimuMapView)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable prefer-const */


function createNewFeaturelayer(mapBaseView, newFeatureSetValue) {
    return __awaiter(this, void 0, void 0, function* () {
        const newLayerPromises = [];
        newFeatureSetValue && Object.keys(newFeatureSetValue).forEach(layerId => {
            const layer = mapBaseView.map.layers.find(layer => layer.id === layerId);
            if (layer) {
                console.warn('the feature layer is already created');
                return;
            }
            newLayerPromises.push(addFeatureSetToMap(mapBaseView, newFeatureSetValue[layerId], layerId));
        });
        if (newLayerPromises.length === 0) {
            return null;
        }
        else {
            return Promise.all(newLayerPromises);
        }
    });
}
function updateFeaturelayer(mapBaseView, changedFeatureSetValue) {
    return __awaiter(this, void 0, void 0, function* () {
        const updatePromises = [];
        changedFeatureSetValue && Object.keys(changedFeatureSetValue).forEach(layerId => {
            const layer = mapBaseView.map.layers.find(layer => layer.id === layerId);
            if (layer) {
                mapBaseView.map.remove(layer);
                updatePromises.push(addFeatureSetToMap(mapBaseView, changedFeatureSetValue[layerId], layerId));
            }
        });
        if (updatePromises.length === 0) {
            return null;
        }
        else {
            return Promise.all(updatePromises);
        }
    });
}
function addFeatureSetToMap(mapBaseView, featureSet, layerId) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield new Promise((resolve, reject) => {
            return (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__.loadArcGISJSAPIModules)([
                'esri/layers/FeatureLayer'
            ]).then(modules => {
                if (featureSet.features.length < 1) {
                    resolve(null);
                }
                else {
                    // let FeatureSet: typeof  __esri.FeatureSet;
                    let FeatureLayer;
                    // eslint-disable-next-line
                    [FeatureLayer] = modules;
                    const layerFromFeatureSet = featureSet.features[0].layer;
                    const fieldsInFeaturelayer = [];
                    const fieldMap = {};
                    for (let i = 0; i < layerFromFeatureSet.fields.length; i++) {
                        const fieldsItem = getReasonableField(layerFromFeatureSet.fields[i]);
                        fieldMap[layerFromFeatureSet.fields[i].name] = fieldsItem.name;
                        fieldsInFeaturelayer.push(fieldsItem);
                    }
                    const fieldsInPopupTemplate = [];
                    for (const key in featureSet.features[0].attributes) {
                        if (fieldMap[key]) {
                            const fieldsItem = {
                                fieldName: fieldMap[key],
                                label: key
                            };
                            fieldsInPopupTemplate.push(fieldsItem);
                        }
                    }
                    const sourceFeatures = [];
                    featureSet.features.forEach((feature, index) => {
                        const tempFeature = feature;
                        if (tempFeature.attributes) {
                            for (const key in tempFeature.attributes) {
                                tempFeature.attributes[fieldMap[key]] = tempFeature.attributes[key];
                            }
                            tempFeature.attributes.exbfid = index;
                        }
                        else {
                            tempFeature.attributes = {
                                exbfid: index
                            };
                        }
                        sourceFeatures.push(tempFeature);
                    });
                    const layer = new FeatureLayer({
                        id: layerId,
                        title: layerFromFeatureSet.title,
                        source: sourceFeatures,
                        fields: fieldsInFeaturelayer,
                        outFields: ['*'],
                        objectIdField: 'exbfid',
                        renderer: layerFromFeatureSet.renderer,
                        popupEnabled: true,
                        popupTemplate: {
                            title: 'information',
                            content: [{
                                    type: 'fields',
                                    fieldInfos: fieldsInPopupTemplate
                                }]
                        }
                    });
                    mapBaseView.map.add(layer);
                    layer.on('layerview-create', event => {
                        resolve(null);
                    });
                }
            });
        });
    });
}
function getReasonableField(field) {
    // the function is supported to normalize the field.name
    const fieldName = field.name;
    return {
        name: fieldName.replace(/\./g, '_').replace(/\(/g, '_').replace(/\)/g, '_'),
        alias: field.alias,
        type: field.type
    };
}
function selectFeature(mapBaseView, target, layerId) {
    // In this function, we assume that features come from the same layer
    let featureLayerId = layerId;
    let featureLayerView = null;
    let tempFeature = null;
    // if layerId doesn't exist, we get layerId by feature
    if (!featureLayerId) {
        if (target instanceof Array) {
            tempFeature = target[0];
        }
        else {
            tempFeature = target;
        }
        if (tempFeature) {
            featureLayerId = tempFeature.layer && tempFeature.layer.id;
        }
    }
    if (featureLayerId) {
        const layerViews = mapBaseView.allLayerViews;
        for (let i = 0; i < layerViews.length; i++) {
            if (layerViews.getItemAt(i).layer.id === featureLayerId) {
                featureLayerView = layerViews.getItemAt(i);
            }
        }
        if (featureLayerView) {
            return {
                layerId: featureLayerId,
                handle: featureLayerView.highlight(target)
            };
        }
        else {
            return null;
        }
    }
}
function goToTargetImmediately(view, _target) {
    return __awaiter(this, void 0, void 0, function* () {
        const viewSR = view.spatialReference;
        const geometries = yield projectGeometries([_target], viewSR);
        if (geometries && geometries.length > 0) {
            const target = geometries[0];
            view.goTo(target, { animate: false });
        }
    });
}
function goToViewpointImmediately(view, _viewpoint) {
    return __awaiter(this, void 0, void 0, function* () {
        const viewSR = view.spatialReference;
        const viewpoint = yield projectViewpoint(_viewpoint, viewSR);
        // view.goTo(viewpoint, { animate: false })
        view.viewpoint = viewpoint;
    });
}
function isNeedProjectViewpoint(viewpoint, viewSR) {
    var _a, _b, _c;
    const sr1 = (_a = viewpoint.targetGeometry) === null || _a === void 0 ? void 0 : _a.spatialReference;
    if (sr1 && isNeedProjectSpatialReference(sr1, viewSR)) {
        return true;
    }
    const sr2 = (_c = (_b = viewpoint.camera) === null || _b === void 0 ? void 0 : _b.position) === null || _c === void 0 ? void 0 : _c.spatialReference;
    if (sr2 && isNeedProjectSpatialReference(sr2, viewSR)) {
        return true;
    }
    return false;
}
function isNeedProjectSpatialReference(sr1, sr2) {
    const isSame = sr1.wkid === sr2.wkid || sr1.equals(sr2);
    //  In JS API 4.x, the view can handle WebMercator and WGS84 spatialReference auto
    const isLike = (sr1.isWebMercator || sr1.isWGS84) && (sr2.isWebMercator || sr2.isWGS84);
    return !isSame && !isLike;
}
function projectViewpoint(_viewpoint, viewSR) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const viewpoint = _viewpoint.clone();
        const targetGeometry = viewpoint.targetGeometry;
        const cameraPositon = (_a = viewpoint.camera) === null || _a === void 0 ? void 0 : _a.position;
        const toProjectGeometries = [];
        let isProjectTargetGeometry = false;
        let isProjectCameraPosition = false;
        if (targetGeometry && isNeedProjectSpatialReference(targetGeometry.spatialReference, viewSR)) {
            isProjectTargetGeometry = true;
            toProjectGeometries.push(targetGeometry);
        }
        if (cameraPositon && isNeedProjectSpatialReference(cameraPositon.spatialReference, viewSR)) {
            isProjectCameraPosition = true;
            toProjectGeometries.push(cameraPositon);
        }
        if (toProjectGeometries.length > 0) {
            const projectedGeometries = yield projectGeometries(toProjectGeometries, viewSR);
            if (isProjectTargetGeometry) {
                viewpoint.targetGeometry = projectedGeometries[0];
            }
            if (isProjectCameraPosition) {
                viewpoint.camera.position = projectedGeometries[projectedGeometries.length - 1];
            }
        }
        return viewpoint;
    });
}
function mapPanto(mapBaseView, target) {
    return __awaiter(this, void 0, void 0, function* () {
        const panToTarget = target;
        const tempBaseMapView = mapBaseView;
        if (panToTarget instanceof Array) {
            if (panToTarget.length === 0) {
                yield Promise.resolve();
                return;
            }
            if (panToTarget[0].geometry) {
                const geometryArr = [];
                for (let i = 0; i < panToTarget.length; i++) {
                    geometryArr.push(panToTarget[i].geometry);
                }
                yield getGeometriesExtent(geometryArr).then((extent) => {
                    return goTo(tempBaseMapView, extent.center);
                });
            }
            else {
                return getGeometriesExtent(panToTarget).then((extent) => {
                    return goTo(tempBaseMapView, extent.center);
                });
            }
        }
        else {
            if (panToTarget.geometry) {
                const getmetry = panToTarget.geometry;
                return goTo(tempBaseMapView, getCenterPoint(getmetry));
            }
            else {
                return goTo(tempBaseMapView, getCenterPoint(panToTarget));
            }
        }
    });
}
function goTo(view, target) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            // delay before updating of view turns true, 400ms is a temporary solution.
            setTimeout(() => {
                //// there is a conflict for paning when the layer view is updating, such as 'pan to' and 'filter'.
                //// this is a temporary solution, it can reduce the frequency of the problem rather than solve it completely.
                //if (view.updating) {
                //  const handler = view.watch('updating', value => {
                //    if (!value) {
                //      view.goTo(target).then(() => resolve()).catch(() => reject())
                //      handler.remove()
                //    }
                //  })
                //} else {
                //  view.goTo(target).then(() => resolve()).catch(() => reject())
                //}
                view.goTo(target).then(() => { resolve(); }).catch(() => { reject(); });
            }, 400);
        });
    });
}
function getGeometriesExtent(geometries) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__.loadArcGISJSAPIModules)([
            'esri/geometry/Extent'
        ]).then((modules) => __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line
            let Extent;
            [Extent] = modules;
            if (!geometries || !geometries.length) {
                return yield Promise.resolve(null);
            }
            let fullExtent = null;
            let index;
            const numGeometries = geometries.length;
            for (index = 0; index < numGeometries; index++) {
                const geometry = geometries[index];
                if (!geometry) {
                    continue;
                }
                let extent = geometry.extent;
                if (!extent && geometry.type === 'point') {
                    const pointGeometry = geometry;
                    if (pointGeometry.x && pointGeometry.y) {
                        extent = new Extent({
                            xmax: pointGeometry.x,
                            xmin: pointGeometry.x,
                            ymax: pointGeometry.y,
                            ymin: pointGeometry.y,
                            zmax: pointGeometry.z,
                            zmin: pointGeometry.z,
                            spatialReference: pointGeometry.spatialReference
                        });
                    }
                }
                if (!extent) {
                    continue;
                }
                if (fullExtent) {
                    fullExtent = fullExtent.union(extent);
                }
                else {
                    fullExtent = extent;
                }
            }
            if (fullExtent.width < 0 && fullExtent.height < 0) {
                return yield Promise.resolve(null);
            }
            return yield Promise.resolve(fullExtent);
        }));
    });
}
function filterFeaturesByQuery(jimuMapView, actionLayerDataSourceId, querySQL) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!actionLayerDataSourceId) {
            return;
        }
        const dataSource = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(actionLayerDataSourceId);
        if (!dataSource) {
            return;
        }
        let jimuLayerView = null;
        try {
            jimuLayerView = yield jimuMapView.whenJimuLayerViewLoadedByDataSource(dataSource);
        }
        catch (err) {
            jimuLayerView = null;
            console.error('can\'t get jimuLayerView by dataSource', dataSource, err);
        }
        if (jimuLayerView && jimuLayerView.layer && (jimuLayerView.type === jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__.LayerTypes.FeatureLayer || jimuLayerView.type === jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__.LayerTypes.SceneLayer)) {
            jimuLayerView.setDefinitionExpression(querySQL);
        }
    });
}
function queryFeatures(layerObject, querySQL) {
    return (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__.loadArcGISJSAPIModules)([
        'esri/rest/support/Query'
    ]).then(modules => {
        let Query;
        [Query] = modules;
        const query = new Query();
        query.where = querySQL;
        query.outFields = ['*'];
        query.returnGeometry = true;
        return layerObject.queryFeatures(query).then(featureSet => {
            return featureSet;
        });
    });
}
function flashOnFeatureLayer(jimuMapView, querySQL, tempJimuLayerView) {
    if ((tempJimuLayerView).view) {
        let featureLayerView = (tempJimuLayerView).view;
        if (featureLayerView) {
            queryFeatures(featureLayerView.layer, querySQL).then(featureSet => {
                if (featureSet && featureSet.features && featureSet.features.length > 0) {
                    const symbol = getFlashSymbol(featureLayerView.layer.geometryType);
                    startFlash(jimuMapView.view, featureSet.features, symbol);
                }
            });
        }
        else {
            return null;
        }
    }
    else {
        (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__.loadArcGISJSAPIModules)([
            'esri/layers/FeatureLayer'
        ]).then(modules => {
            let FeatureLayer;
            [FeatureLayer] = modules;
            let tempFeatureLayer = new FeatureLayer({
                url: jimu_core__WEBPACK_IMPORTED_MODULE_0__.dataSourceUtils.getUrlByLayer(tempJimuLayerView.layer)
            });
            tempFeatureLayer.load().then(() => {
                queryFeatures(tempFeatureLayer, querySQL).then(featureSet => {
                    if (featureSet && featureSet.features && featureSet.features.length > 0) {
                        const symbol = getFlashSymbol(featureSet.features[0].geometry.type);
                        startFlash(jimuMapView.view, featureSet.features, symbol);
                    }
                });
            });
        });
    }
}
let sceneHightlightHandle = null;
function flashOnSceneLayer(jimuMapView, querySQL, tempJimuLayerView) {
    var _a;
    if ((tempJimuLayerView).view) {
        let sceneLayerView = (tempJimuLayerView).view;
        // @ts-expect-error
        queryFeatures((_a = sceneLayerView === null || sceneLayerView === void 0 ? void 0 : sceneLayerView.layer) === null || _a === void 0 ? void 0 : _a.associatedLayer, querySQL).then(featureSet => {
            if (featureSet && featureSet.features && featureSet.features.length > 0) {
                const objectIdField = sceneLayerView.layer.objectIdField;
                const objectIds = featureSet.features.map(feature => feature.attributes[objectIdField]);
                let i = 0;
                const maxFlashCount = 6;
                let highlightColor = [255, 255, 0, 0.8];
                const originalHighlightOptions = jimuMapView.view.highlightOptions;
                const flash = function () {
                    if (i < maxFlashCount) {
                        i++;
                        if (highlightColor) {
                            highlightColor = null;
                            // @ts-expect-error
                            jimuMapView.view.highlightOptions = { color: [0, 0, 0, 0] };
                            sceneHightlightHandle && sceneHightlightHandle.remove();
                            sceneHightlightHandle = sceneLayerView.highlight(objectIds);
                        }
                        else {
                            highlightColor = [255, 255, 0, 0.8];
                            // @ts-expect-error
                            jimuMapView.view.highlightOptions = { color: highlightColor };
                            sceneHightlightHandle && sceneHightlightHandle.remove();
                            sceneHightlightHandle = sceneLayerView.highlight(objectIds);
                        }
                        setTimeout(flash, 500);
                    }
                    else {
                        jimuMapView.view.highlightOptions = originalHighlightOptions;
                        sceneHightlightHandle && sceneHightlightHandle.remove();
                    }
                };
                setTimeout(flash, 500);
            }
        });
    }
}
function flashFeaturesByQuery(jimuMapView, layerDataSourceId, querySQL) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!layerDataSourceId) {
            return;
        }
        const dataSource = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(layerDataSourceId);
        if (!dataSource) {
            return;
        }
        let jimuLayerView = null;
        try {
            jimuLayerView = yield jimuMapView.whenJimuLayerViewLoadedByDataSource(dataSource);
        }
        catch (err) {
            jimuLayerView = null;
            console.error('can\'t get jimuLayerView by dataSource', dataSource, err);
        }
        if (jimuLayerView && jimuLayerView.layer) {
            if (jimuLayerView.type === jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__.LayerTypes.FeatureLayer) {
                flashOnFeatureLayer(jimuMapView, querySQL, jimuLayerView);
            }
            else if (jimuLayerView.type === jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__.LayerTypes.SceneLayer) {
                flashOnSceneLayer(jimuMapView, querySQL, jimuLayerView);
            }
        }
    });
}
function startFlash(mapBaseView, features, symbol) {
    (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__.loadArcGISJSAPIModules)([
        'esri/Graphic'
    ]).then(modules => {
        // eslint-disable-next-line
        let Graphic;
        [Graphic] = modules;
        const flashFeatures = function (features, maxFlashCount) {
            const graphics = [];
            let flashCount = 0;
            for (let i = 0; i < features.length; i++) {
                const tempGraphic = new Graphic({
                    geometry: features[i].geometry,
                    symbol: symbol,
                    attributes: features[i].attributes
                });
                graphics.push(tempGraphic);
            }
            const singleFlash = function () {
                mapBaseView.graphics.addMany(graphics);
                setTimeout(() => {
                    mapBaseView.graphics.removeMany(graphics);
                    flashCount = flashCount + 1;
                    if (flashCount < maxFlashCount) {
                        setTimeout(() => {
                            singleFlash();
                        }, 500);
                    }
                }, 500);
            };
            singleFlash();
        };
        flashFeatures(features, 3);
    });
}
function getFlashSymbol(geometryType) {
    if (['point', 'multipoint'].includes(geometryType)) {
        return {
            type: 'simple-marker',
            style: 'circle',
            color: [255, 255, 0, 0.8],
            size: '16px',
            outline: {
                color: [255, 255, 0, 0.8],
                width: 3
            }
        };
    }
    else if (['polyline'].includes(geometryType)) {
        return {
            type: 'simple-line',
            color: [255, 255, 0, 0.8],
            width: 3,
            style: 'solid'
        };
    }
    else if (['polygon', 'extent'].includes(geometryType)) {
        return {
            type: 'simple-fill', // autocasts as new SimpleFillSymbol()
            color: [255, 255, 0, 0.5],
            style: 'solid',
            outline: {
                color: [255, 255, 0, 0.8],
                width: 3
            }
        };
    }
    else if (['mesh'].includes(geometryType)) {
        return {
            type: 'mesh-3d', // autocasts as new MeshSymbol3D()
            symbolLayers: [{
                    type: 'fill', // autocasts as new FillSymbol3DLayer()
                    material: { color: [255, 255, 0, 0.8] }
                }]
        };
    }
    else {
        return null;
    }
}
function getCenterPoint(geometry) {
    // point | multipoint | polyline | polygon | extent | mesh
    switch (geometry.type) {
        case 'point':
            return geometry;
        case 'extent':
            return geometry.center;
        case 'polygon':
            return geometry.centroid;
        case 'polyline':
            return geometry.extent.center;
        default:
            return geometry && geometry.extent ? geometry.extent.center : undefined;
        // todo
    }
}
function cloneFeature(feature, Graphic) {
    let tempFeature = null;
    if (feature.clone) {
        tempFeature = feature.clone();
    }
    else {
        tempFeature = Graphic.fromJSON(Object.assign({}, feature));
        tempFeature.attributes = Object.assign({}, feature.attributes);
    }
    return tempFeature;
}
function projectGeometries(geometries, spatialReference) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!geometries || geometries.length === 0 || !geometries[0] ||
            spatialReference.wkid === geometries[0].spatialReference.wkid || (spatialReference.equals(geometries[0].spatialReference))) {
            return yield Promise.resolve(geometries);
        }
        else if (spatialReference.isWebMercator && geometries[0].spatialReference.isWGS84) {
            // In js api 4.x, the view can handle WebMercator and WGS84 spatialReference auto
            return yield Promise.resolve(geometries);
        }
        else if (spatialReference.isWGS84 && geometries[0].spatialReference.isWebMercator) {
            // In js api 4.x, the view can handle WebMercator and WGS84 spatialReference auto
            return yield Promise.resolve(geometries);
        }
        else {
            return yield jimu_core__WEBPACK_IMPORTED_MODULE_0__.geometryUtils.projectToSpatialReference(geometries, spatialReference);
        }
    });
}
function processZoomToFeatures(mapBaseView, layer, features) {
    return __awaiter(this, void 0, void 0, function* () {
        if (mapBaseView && mapBaseView.type === '3d' && layer && layer.queryFeatures && features) {
            return yield (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_1__.loadArcGISJSAPIModules)([
                'esri/rest/support/Query'
            ]).then((modules) => {
                const [Query] = modules;
                const query = new Query();
                query.returnGeometry = true;
                query.outFields = ['*'];
                query.objectIds = features.map(feature => feature.attributes[layer.objectIdField]);
                return layer.queryFeatures(query).then((result) => __awaiter(this, void 0, void 0, function* () {
                    if (result && result.features && result.features.length === features.length) {
                        return yield Promise.resolve(result.features);
                    }
                    else {
                        return yield Promise.resolve(features);
                    }
                }), () => __awaiter(this, void 0, void 0, function* () {
                    return yield Promise.resolve(features);
                }));
            });
        }
        else {
            return yield Promise.resolve(features);
        }
    });
}
function checkIsLive(appMode) {
    if (window.jimuConfig.isInBuilder) {
        if (appMode === jimu_core__WEBPACK_IMPORTED_MODULE_0__.AppMode.Design) {
            return false;
        }
        else {
            return true;
        }
    }
    else {
        return true;
    }
}
function getLayersFromDataSourceIds(dataSourceIds) {
    const layerPromises = [];
    dataSourceIds.forEach(dataSourceId => {
        const dataSource = jimu_core__WEBPACK_IMPORTED_MODULE_0__.DataSourceManager.getInstance().getDataSource(dataSourceId);
        let layerPromise;
        if (dataSource === null || dataSource === void 0 ? void 0 : dataSource.layer) {
            layerPromise = Promise.resolve(dataSource.layer);
        }
        else if (dataSource === null || dataSource === void 0 ? void 0 : dataSource.createJSAPILayerByDataSource) {
            layerPromise = dataSource.createJSAPILayerByDataSource();
        }
        else {
            layerPromise = Promise.resolve(null);
        }
        layerPromises.push(layerPromise);
    });
    return Promise.all(layerPromises);
}
function getJimuMapViewId(widgetId, dataSourceId) {
    // If dataSourceId is null, make sure it converts to empty string.
    const dsId = dataSourceId || '';
    return `${widgetId}-${dsId}`;
}
function getMapBaseRestoreData(mapInstance) {
    const { mapContainer, state, Geometry, InitialViewProperties, TileLayer, Basemap, MapView, SceneView, Extent, Viewpoint, PortalItem, Portal, WebMap, WebScene, Color, expectedDataSourceInfo, mapCreatingInfo, view, lastUpdateViewConfig, mapDs, dsManager, isFirstReceiveMessage } = mapInstance;
    return {
        mapContainer,
        state,
        Geometry,
        InitialViewProperties,
        TileLayer,
        Basemap,
        MapView,
        SceneView,
        Extent,
        Viewpoint,
        PortalItem,
        Portal,
        WebMap,
        WebScene,
        Color,
        expectedDataSourceInfo,
        mapCreatingInfo,
        view,
        lastUpdateViewConfig,
        mapDs,
        dsManager,
        isFirstReceiveMessage
    };
}
function restoreMapBase(mapInstance, restoreData) {
    const keys = Object.keys(restoreData);
    for (const key of keys) {
        mapInstance[key] = restoreData[key];
    }
}
function isTwoWidgetsMutuallyExtentChange(widgetId1, widgetId2) {
    if (widgetId1 && widgetId2) {
        const messageConfigs = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appConfig.messageConfigs;
        if (messageConfigs) {
            const actionNames = ['panTo', 'zoomToFeature'];
            const messageType = jimu_core__WEBPACK_IMPORTED_MODULE_0__.MessageType.ExtentChange;
            if (isWidgetSendActionsToAnother(widgetId1, widgetId2, messageConfigs, messageType, actionNames) &&
                isWidgetSendActionsToAnother(widgetId2, widgetId1, messageConfigs, messageType, actionNames)) {
                return true;
            }
        }
    }
    return false;
}
function isWidgetSendZoomToActionToAnother(sendMessageWidgetId, actionWidgetId, messageType) {
    if (sendMessageWidgetId && actionWidgetId) {
        const messageConfigs = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appConfig.messageConfigs;
        if (messageConfigs) {
            const actionNames = ['zoomToFeature'];
            return isWidgetSendActionsToAnother(sendMessageWidgetId, actionWidgetId, messageConfigs, messageType, actionNames);
        }
    }
    return false;
}
function isWidgetSendActionsToAnother(sendMessageWidgetId, actionWidgetId, messageConfigs, messageType, actionNames) {
    if (messageConfigs) {
        const messageJsonArray = Object.values(messageConfigs);
        for (let i = 0; i < messageJsonArray.length; i++) {
            const messageJson = messageJsonArray[i];
            if (messageJson.widgetId === sendMessageWidgetId && messageJson.messageType === messageType) {
                const actions = messageJson.actions;
                for (let j = 0; j < actions.length; j++) {
                    const action = actions[j];
                    if (action.widgetId === actionWidgetId) {
                        if (actionNames.includes(action.actionName)) {
                            return true;
                        }
                    }
                }
            }
        }
    }
    return false;
}
function isSamelikeViewpoints(view, vp1, vp2) {
    if (!vp1) {
        return false;
    }
    if (!vp2) {
        return false;
    }
    // We need to check both targetGeometry and camera.
    if (vp1.targetGeometry && vp1.targetGeometry.declaredClass === 'esri.geometry.Point' && vp2.targetGeometry && vp2.targetGeometry.declaredClass === 'esri.geometry.Point') {
        const screenPoint1 = view.toScreen(vp1.targetGeometry);
        const screenPoint2 = view.toScreen(vp2.targetGeometry);
        const deltaX = screenPoint1.x - screenPoint2.x;
        const deltaY = screenPoint1.y - screenPoint2.y;
        const dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        if (dist >= 5) {
            return false;
        }
    }
    const camera1 = vp1.camera;
    const camera2 = vp2.camera;
    if (camera1 && camera2) {
        // compare viewpoint for SceneView
        const heading1 = parseFloat(camera1.heading.toFixed(2));
        const heading2 = parseFloat(camera2.heading.toFixed(2));
        if (heading1 !== heading2) {
            return false;
        }
        const tilt1 = parseFloat(camera1.tilt.toFixed(2));
        const tilt2 = parseFloat(camera2.tilt.toFixed(2));
        if (tilt1 !== tilt2) {
            return false;
        }
        const positionDist = camera1.position.distance(camera2.position);
        if (positionDist >= 1) {
            return false;
        }
    }
    else {
        // compare viewpoint for MapView
        const rotation1 = parseFloat(vp1.rotation.toFixed(2));
        const rotation2 = parseFloat(vp2.rotation.toFixed(2));
        if (rotation1 !== rotation2) {
            return false;
        }
        const deltaScale = vp1.scale - vp2.scale;
        if (Math.abs(deltaScale) >= 1) {
            return false;
        }
    }
    return true;
}
function getViewpointInstanceFromHistory(view, viewpointIndex) {
    if (view.viewpointHistory.length > 0) {
        const lastIndex = view.viewpointHistory.length - 1;
        if (viewpointIndex >= 0 && viewpointIndex <= lastIndex) {
            const viewpoint = view.viewpointHistory[viewpointIndex];
            return viewpoint.clone();
        }
    }
    return null;
}
function updateUrlHashParamsForActiveJimuMapView(jimuMapView) {
    if (jimuMapView && jimuMapView.isActive && jimuMapView.view && !jimuMapView.view.destroyed) {
        const view = jimuMapView.view;
        const urlManager = jimu_core__WEBPACK_IMPORTED_MODULE_0__.UrlManager.getInstance();
        const viewpointJson = view.viewpoint ? view.viewpoint.toJSON() : null;
        const extentJson = view.extent ? view.extent.toJSON() : null;
        let mapStateStr = null;
        if (viewpointJson && extentJson) {
            const mapState = {
                viewpoint: viewpointJson,
                extent: extentJson
            };
            mapStateStr = JSON.stringify(mapState);
        }
        view.lastViewpointUpdateUrlParams = view.viewpoint ? view.viewpoint.clone() : null;
        const activeDatasourceId = jimuMapView.dataSourceId || null;
        const mapUrlHashParams = {
            active_datasource_id: activeDatasourceId,
            // if map_state is null, UrlManager will remove it from url
            map_state: mapStateStr
        };
        urlManager.setWidgetUrlParams(jimuMapView.mapWidgetId, mapUrlHashParams);
    }
}


/***/ }),

/***/ "./extensions/widgets/arcgis/arcgis-map/src/version-manager.ts":
/*!*********************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/version-manager.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   versionManager: () => (/* binding */ versionManager)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");

class VersionManager extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.BaseVersionManager {
    constructor() {
        super(...arguments);
        this.versions = [{
                version: '1.10.0',
                description: '1.10.0',
                upgrader: (oldConfig) => {
                    let newConfig;
                    if (oldConfig.toolConifg) {
                        // fix typo for 'toolConifg'
                        newConfig = jimu_core__WEBPACK_IMPORTED_MODULE_0__.Immutable.without(oldConfig, 'toolConifg');
                        newConfig = newConfig.set('toolConfig', oldConfig.toolConifg);
                    }
                    return newConfig;
                }
            }];
    }
}
const versionManager = new VersionManager();


/***/ }),

/***/ "./jimu-icons/filled/data/placeholder-map.tsx":
/*!****************************************************!*\
  !*** ./jimu-icons/filled/data/placeholder-map.tsx ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PlaceholderMapFilled: () => (/* binding */ PlaceholderMapFilled)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_filled_data_placeholder_map_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/filled/data/placeholder-map.svg */ "./jimu-icons/svg/filled/data/placeholder-map.svg");
/* harmony import */ var _svg_filled_data_placeholder_map_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_filled_data_placeholder_map_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const PlaceholderMapFilled = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_filled_data_placeholder_map_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/directional/arrow-fat-left.tsx":
/*!************************************************************!*\
  !*** ./jimu-icons/outlined/directional/arrow-fat-left.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ArrowFatLeftOutlined: () => (/* binding */ ArrowFatLeftOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_directional_arrow_fat_left_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/directional/arrow-fat-left.svg */ "./jimu-icons/svg/outlined/directional/arrow-fat-left.svg");
/* harmony import */ var _svg_outlined_directional_arrow_fat_left_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_directional_arrow_fat_left_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const ArrowFatLeftOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_directional_arrow_fat_left_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "./jimu-icons/outlined/directional/arrow-fat-right.tsx":
/*!*************************************************************!*\
  !*** ./jimu-icons/outlined/directional/arrow-fat-right.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ArrowFatRightOutlined: () => (/* binding */ ArrowFatRightOutlined)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _svg_outlined_directional_arrow_fat_right_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../svg/outlined/directional/arrow-fat-right.svg */ "./jimu-icons/svg/outlined/directional/arrow-fat-right.svg");
/* harmony import */ var _svg_outlined_directional_arrow_fat_right_svg__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_svg_outlined_directional_arrow_fat_right_svg__WEBPACK_IMPORTED_MODULE_1__);
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


const ArrowFatRightOutlined = (props) => {
    const SVG = window.SVG;
    const { className } = props, others = __rest(props, ["className"]);
    const classes = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('jimu-icon jimu-icon-component', className);
    if (!SVG)
        return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement("svg", Object.assign({ className: classes }, others));
    return jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.createElement(SVG, Object.assign({ className: classes, src: (_svg_outlined_directional_arrow_fat_right_svg__WEBPACK_IMPORTED_MODULE_1___default()) }, others));
};


/***/ }),

/***/ "jimu-arcgis":
/*!******************************!*\
  !*** external "jimu-arcgis" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_arcgis__;

/***/ }),

/***/ "jimu-core":
/*!****************************!*\
  !*** external "jimu-core" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_core__;

/***/ }),

/***/ "jimu-layouts/layout-runtime":
/*!**********************************************!*\
  !*** external "jimu-layouts/layout-runtime" ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_layouts_layout_runtime__;

/***/ }),

/***/ "jimu-ui":
/*!**************************!*\
  !*** external "jimu-ui" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_jimu_ui__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "";
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other entry modules.
(() => {
/*!******************************************!*\
  !*** ./jimu-core/lib/set-public-path.ts ***!
  \******************************************/
/**
 * Webpack will replace __webpack_public_path__ with __webpack_require__.p to set the public path dynamically.
 * The reason why we can't set the publicPath in webpack config is: we change the publicPath when download.
 * */
// eslint-disable-next-line
// @ts-ignore
__webpack_require__.p = window.jimuConfig.baseUrl;

})();

// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*********************************************************************!*\
  !*** ./extensions/widgets/arcgis/arcgis-map/src/runtime/widget.tsx ***!
  \*********************************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __set_webpack_public_path__: () => (/* binding */ __set_webpack_public_path__),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var jimu_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jimu-core */ "jimu-core");
/* harmony import */ var _components_multisourcemap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/multisourcemap */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/multisourcemap.tsx");
/* harmony import */ var _components_default_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/default-map */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/components/default-map.tsx");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/utils.ts");
/* harmony import */ var jimu_arcgis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jimu-arcgis */ "jimu-arcgis");
/* harmony import */ var jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jimu-layouts/layout-runtime */ "jimu-layouts/layout-runtime");
/* harmony import */ var _version_manager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../version-manager */ "./extensions/widgets/arcgis/arcgis-map/src/version-manager.ts");
/* harmony import */ var jimu_ui__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! jimu-ui */ "jimu-ui");
/* harmony import */ var _translations_default__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./translations/default */ "./extensions/widgets/arcgis/arcgis-map/src/runtime/translations/default.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/** @jsx jsx */









class Widget extends jimu_core__WEBPACK_IMPORTED_MODULE_0__.React.PureComponent {
    constructor(props) {
        super(props);
        this.multiSourceMapInstance = null;
        this.activeJimuMapView = null;
        this.watchSelectedFeatureHandle = null;
        this.dataActionListContainer = null;
        this.reactiveUtils = null;
        this.popupDomNodeObserver = null;
        this.startRenderMap = () => {
            setTimeout(() => {
                this.setState({
                    startLoadModules: true
                });
            }, 100);
        };
        this.getPlaceHolderImage = () => {
            let placeHolderImage = this.props.config.placeholderImage;
            const session = jimu_core__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getInstance().getMainSession();
            if (placeHolderImage) {
                // eslint-disable-next-line
                const isPortalThumbExp = new RegExp('^(.)+/sharing/rest/content/items/(.)+/info/(.)+');
                if (isPortalThumbExp.test(placeHolderImage)) {
                    if (session) {
                        placeHolderImage = placeHolderImage + `?token=${session.token}`;
                    }
                    else {
                        // eslint-disable-next-line no-self-assign
                        placeHolderImage = placeHolderImage;
                    }
                }
            }
            return placeHolderImage;
        };
        this.fullScreenHanlder = (event) => {
            if (!document.fullscreenElement && !document.webkitFullscreenElement) {
                this.setState({
                    isFullScreen: false
                });
            }
        };
        this.fullScreenMap = () => {
            if (jimu_core__WEBPACK_IMPORTED_MODULE_0__.utils.isTouchDevice()) {
                // is touch device
                if (this.container.style.position === 'fixed') {
                    this.container.style.height = `${this.containerClientRect.height}px`;
                    this.container.style.width = `${this.containerClientRect.width}px`;
                    this.container.style.top = `${this.containerClientRect.top}px`;
                    this.container.style.left = `${this.containerClientRect.left}px`;
                    setTimeout(() => {
                        this.container.style.transition = null;
                        this.container.style.position = 'relative';
                        this.container.style.height = '100%';
                        this.container.style.width = '100%';
                        this.container.style.top = '0';
                        this.container.style.left = '0';
                        this.container.style.backgroundColor = 'none';
                        this.parentContainer.appendChild(this.container);
                        this.setState({
                            isFullScreen: false
                        });
                    }, 100);
                }
                else {
                    const clientRect = this.container.getBoundingClientRect();
                    this.containerClientRect = clientRect;
                    this.container.style.height = `${clientRect.height}px`;
                    this.container.style.width = `${clientRect.width}px`;
                    this.container.style.position = 'fixed';
                    this.container.style.top = `${clientRect.top}px`;
                    this.container.style.left = `${clientRect.left}px`;
                    this.container.style.zIndex = '1';
                    document && document.body.appendChild(this.container);
                    setTimeout(() => {
                        this.container.style.transition = 'top 0.3s, bottom 0.3s, left 0.3s, right 0.3s, height 0.3s, width 0.3s';
                        this.container.style.top = '0px';
                        this.container.style.left = '0px';
                        this.container.style.right = '0px';
                        this.container.style.bottom = '0px';
                        this.container.style.height = null;
                        this.container.style.width = null;
                        this.container.style.backgroundColor = '#fff';
                        this.setState({
                            isFullScreen: true
                        });
                    }, 100);
                }
            }
            else {
                const element = this.container;
                if (!document) {
                    return;
                }
                document.addEventListener('webkitfullscreenchange', this.fullScreenHanlder);
                document.addEventListener('fullscreenchange', this.fullScreenHanlder);
                if (document.fullscreenElement === element) {
                    document.exitFullscreen();
                    this.setState({
                        isFullScreen: false
                    });
                    return;
                }
                if (document.webkitFullscreenElement === element) {
                    document.webkitCancelFullScreen();
                    this.setState({
                        isFullScreen: false
                    });
                    return;
                }
                const requestMethod = element.requestFullScreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || element.msRequestFullScreen;
                if (requestMethod) {
                    this.setState({
                        isFullScreen: true
                    });
                    requestMethod.call(element);
                }
                else if (typeof window.ActiveXObject !== 'undefined') {
                    const wscript = new ActiveXObject('WScript.Shell');
                    if (wscript !== null) {
                        wscript.SendKeys('{F11}');
                    }
                }
            }
        };
        this.handleViewGroupCreate = (viewGroup) => {
            if (viewGroup) {
                viewGroup.setMapWidgetInstance(this);
            }
        };
        this.onJimuMapViewCreated = (jimuMapView) => {
            jimuMapView.setMapWidgetState(this.props.state);
            this.setShowPopupUponSelectionForJimuMapView(jimuMapView);
        };
        this.onActiveJimuMapViewChange = (jimuMapView) => {
            this.activeJimuMapView = jimuMapView;
            this.watchPopupSelectedFeatureChange();
        };
        this.switchMap = (ignoreSwitchAnimation = false) => __awaiter(this, void 0, void 0, function* () {
            if (this.multiSourceMapInstance) {
                return yield this.multiSourceMapInstance.switchMap(ignoreSwitchAnimation);
            }
            else {
                yield Promise.resolve();
            }
        });
        this.setMultiSourceMapInstance = (instance) => {
            this.multiSourceMapInstance = instance;
        };
        this.onResize = (width, height) => {
            if (!width || !height) {
                return;
            }
            if (width <= 545 && width > 0) {
                this.setState({
                    widthBreakpoint: 'xsmall',
                    widgetHeight: height
                });
            }
            else {
                this.setState({
                    widthBreakpoint: 'other',
                    widgetHeight: height
                });
            }
        };
        this.isLoadingDisplayed = () => {
            var _a;
            const addToMapDatas = ((_a = this.props.mutableStateProps) === null || _a === void 0 ? void 0 : _a.addToMapDatas) || {};
            return Object.values(addToMapDatas).some(value => (value === null || value === void 0 ? void 0 : value.dataChangeStatus) === jimu_arcgis__WEBPACK_IMPORTED_MODULE_4__.DataChangeStatus.Pending);
        };
        this.isWarningDisplayed = () => {
            var _a;
            const addToMapDatas = ((_a = this.props.mutableStateProps) === null || _a === void 0 ? void 0 : _a.addToMapDatas) || {};
            return Object.values(addToMapDatas).some(value => (value === null || value === void 0 ? void 0 : value.dataChangeStatus) === jimu_arcgis__WEBPACK_IMPORTED_MODULE_4__.DataChangeStatus.Rejected);
        };
        this.getInnerContent = (isMapInVisibleArea) => {
            if (!this.state.startLoadModules) {
                return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this.getStyle(), className: 'w-100 h-100' },
                    (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'widget-map w-100 h-100' },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { style: { position: 'absolute', left: '50%', top: '50%' }, className: 'jimu-secondary-loading' }))));
            }
            else {
                if (!(this.props.useDataSources && this.props.useDataSources[0] && this.props.useDataSources[0].dataSourceId)) {
                    return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 h-100', ref: ref => { this.parentContainer = ref; } },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this.getStyle(), className: 'w-100 h-100', ref: ref => { this.container = ref; } },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('w-100 h-100', { 'map-is-design-mode': !(0,_utils__WEBPACK_IMPORTED_MODULE_3__.checkIsLive)(this.props.appMode) }) },
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_default_map__WEBPACK_IMPORTED_MODULE_2__["default"], { fullScreenMap: this.fullScreenMap, baseWidgetProps: this.props, startLoadModules: this.state.startLoadModules, isDefaultMap: true, setMultiSourceMapInstance: this.setMultiSourceMapInstance, onViewGroupCreate: this.handleViewGroupCreate, onJimuMapViewCreated: this.onJimuMapViewCreated, onActiveJimuMapViewChange: this.onActiveJimuMapViewChange, widgetHeight: this.state.widgetHeight, widthBreakpoint: this.state.widthBreakpoint, isFullScreen: this.state.isFullScreen, isMapInVisibleArea: isMapInVisibleArea, autoControlWidgetId: this.props.autoControlWidgetId })),
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactResizeDetector, { handleWidth: true, handleHeight: true, onResize: this.onResize }))));
                }
                else {
                    return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'w-100 h-100', ref: ref => { this.parentContainer = ref; } },
                        (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { css: this.getStyle(), className: 'w-100 h-100', ref: ref => { this.container = ref; } },
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.classNames)('w-100 h-100', { 'map-is-design-mode': !(0,_utils__WEBPACK_IMPORTED_MODULE_3__.checkIsLive)(this.props.appMode) }) }, this.props.useDataSources.length >= 1 &&
                                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(_components_multisourcemap__WEBPACK_IMPORTED_MODULE_1__["default"], { key: 1, fullScreenMap: this.fullScreenMap, baseWidgetProps: this.props, startLoadModules: this.state.startLoadModules, ref: this.setMultiSourceMapInstance, onViewGroupCreate: this.handleViewGroupCreate, onJimuMapViewCreated: this.onJimuMapViewCreated, onActiveJimuMapViewChange: this.onActiveJimuMapViewChange, widgetHeight: this.state.widgetHeight, widthBreakpoint: this.state.widthBreakpoint, isFullScreen: this.state.isFullScreen, isMapInVisibleArea: isMapInVisibleArea, autoControlWidgetId: this.props.autoControlWidgetId })),
                            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactResizeDetector, { handleWidth: true, handleHeight: true, onResize: this.onResize }))));
                }
            }
        };
        this.warningIcon = `<svg width="16" height="15" viewBox="0 0 16 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M7.09926 5.37004C7.04598 4.83729 7.46434 4.375 7.99975 4.375C8.53516 4.375 8.95353 4.83728 8.90025 5.37004L8.5495 8.87748C8.52126 9.15992 8.2836 9.375 7.99975 9.375C7.71591 9.375 7.47825 9.15992 7.45 8.87748L7.09926 5.37004Z" fill="#938500"/>
                        <path d="M7.99975 12.375C8.55204 12.375 8.99975 11.9273 8.99975 11.375C8.99975 10.8227 8.55204 10.375 7.99975 10.375C7.44747 10.375 6.99975 10.8227 6.99975 11.375C6.99975 11.9273 7.44747 12.375 7.99975 12.375Z" fill="#938500"/>
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M1.66642 14.375C0.9115 14.375 0.428811 13.5705 0.784067 12.9044L7.1174 1.02941C7.49387 0.323529 8.50564 0.323529 8.88211 1.02941L15.2154 12.9044C15.5707 13.5705 15.088 14.375 14.3331 14.375H1.66642ZM1.66642 13.375L7.99975 1.5L14.3331 13.375H1.66642Z" fill="#938500"/>
                        </svg>`;
        this.state = {
            widthBreakpoint: null,
            widgetHeight: null,
            isFullScreen: false,
            dataActionDataSet: null
        };
        this.dataActionListContainer = document.createElement('div');
        this.dataActionListContainer.className = 'data-action-list-wrapper';
        this.loadReactiveUtils();
    }
    getWidgetSyle() {
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      .map-loading-bar {
        z-index: 8;
      }

      .map-warning-bar {
        z-index: 8;
        position: absolute;
        bottom: 4px;
        left: 4px;
        right: 4px;
        height: 35px;
        background: #fffdeb;
        border: 1px solid #fff592;
        display: flex;
        align-items: center;
        justify-content: flex-start;

        .warning-icon {
          width: 14px;
          margin: 0 12px 0 12px;
        }
      }

      .map-fix-layout {
        position: absolute !important;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        z-index: 7;
        pointer-events: none;
      }

      .hide-map-tools-layout .map-tool-layout{
        display: none;
      }

      .esri-view-root > .esri-ui {
        z-index: unset;
      }

      .esri-ui-manual-container .esri-swipe {
        z-index: 0;
      }

      .esri-ui .esri-popup {
        z-index: 9;
      }

      .data-action-list-wrapper {
        margin: 3px;
      }
    `;
    }
    getStyle() {
        const theme = this.props.theme;
        return (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.css) `
      position: relative;

      .map-is-live-mode {
        .exbmap-ui {
          pointer-events: auto !important;
        }

        .is-widget {
          pointer-events: auto !important;
        }
      }

      .widget-map-usemask {
        pointer-events: auto !important;
      }

      .map-is-design-mode {
        .exbmap-ui,
        .exbmap-ui-tool {
          pointer-events: none !important;
        }

        .is-widget {
          pointer-events: auto !important;
        }
      }

      .widget-map{
        padding: 0;
        margin: 0;
        height: 100%;
        width: 100%;
        z-index: -1;
        .overview-container{
          position: absolute;
          top: 12px;
          right: 12px;
          width: 300px;
          height: 200px;
          border: 1px solid black;
          z-index: 1;
        }

        .extent-container{
          background-color: rgba(0, 0, 0, 0.5);
          position: absolute;
          z-index: 2;
        }

        .extent-btn-container{
          button{
            outline: none;
          }
          .previous-extent-btn{
            color: #111;
          }
          .next-extent-btn{
            color: #222;
          }
        }
      }

      .mapswitch-container {
        position: absolute;
        z-index: 7;
        width: 32px;
        height: 32px;
        bottom: 10px;
        left: 10px;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3)
      }

      .mapswitch-icon {
        fill: black;
        left: 8px;
        top: 8px;
        position: absolute;
        display: block;
      }

      .widget-map-background {
        background-color: ${theme.colors.white};
        position: absolute;
        z-index: 1;
      }

      .widget-map-crashed {
        background-color: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rgba(theme.colors.white, 0.85)};
        position: absolute;
        z-index: 1;
        top: 0;

        .widget-map-crashed-label-padding {
          padding-left: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(24)};
          padding-right: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(24)};
        }

        .widget-map-crashed-label {
          font-size: ${jimu_core__WEBPACK_IMPORTED_MODULE_0__.polished.rem(13)};
          color: ${theme.colors.black};
          font-weight: bold;
          text-align: center;
        }
      }

      @keyframes appear {
        0%{opacity:0}
        25%{opacity:.25}
        50%{opacity:.5;}
        75%{opacity:.75}
        100%{opacity:1;}
      }

      @keyframes disappear {
        0%{opacity:1}
        25%{opacity:.75}
        50%{opacity:.5;}
        75%{opacity:.25}
        100%{opacity:0;}
      }

      .multisourcemap-item-appear {
        animation: appear 300ms;
        -webkit-animation: appear 300ms;
        -moz-animation: appear 300ms;
        animation-fill-mode: forwards;
        -webkit-animation-fill-mode: forwards;
        -moz-animation-fill-mode: forwards;
        animation-timing-function: ease-in;
        -webkit-animation-timing-function: ease-in;
        -moz-animation-timing-function: ease-in;
      }

      .multisourcemap-item-disappear {
        animation: disappear 300ms;
        -webkit-animation: disappear 300ms;
        -moz-animation: disappear 300ms;
        animation-fill-mode: forwards;
        -webkit-animation-fill-mode: forwards;
        -moz-animation-fill-mode: forwards;
        animation-timing-function: ease-in;
        -webkit-animation-timing-function: ease-in;
        -moz-animation-timing-function: ease-in;
      }

      .multisourcemap-item-appear-noanimate {
        opacity: 1;
      }

      .multisourcemap-item-disappear-noanimate {
        opacity: 0;
      }
      `;
    }
    componentDidMount() {
        if (!this.state.startLoadModules) {
            if (window.jimuConfig.isInBuilder || !this.props.config.canPlaceHolder) {
                this.startRenderMap();
            }
        }
    }
    componentDidUpdate(prevProps, prevState) {
        var _a, _b, _c;
        // check if props.state changed or not
        const preWidgetState = prevProps.state;
        const currWidgetState = this.props.state;
        if (preWidgetState !== currWidgetState) {
            const jimuMapViews = this.getJimuMapViews();
            jimuMapViews.forEach((jimuMapView) => {
                jimuMapView.setMapWidgetState(currWidgetState);
            });
        }
        // check if props.config.showPopupUponSelection changed or not
        const preShowPopupUponSelection = !!((_a = prevProps === null || prevProps === void 0 ? void 0 : prevProps.config) === null || _a === void 0 ? void 0 : _a.showPopupUponSelection);
        const curShowPopupUponSelection = !!((_c = (_b = this.props) === null || _b === void 0 ? void 0 : _b.config) === null || _c === void 0 ? void 0 : _c.showPopupUponSelection);
        if (preShowPopupUponSelection !== curShowPopupUponSelection) {
            const jimuMapViews = this.getJimuMapViews();
            jimuMapViews.forEach((jimuMapView) => {
                this.setShowPopupUponSelectionForJimuMapView(jimuMapView);
            });
        }
        // check if props.enableDataAction changed or not
        const preEnableDataAction = prevProps === null || prevProps === void 0 ? void 0 : prevProps.enableDataAction;
        const currEnableDataAction = this.props.enableDataAction;
        if (preEnableDataAction !== currEnableDataAction) {
            console.log('enableDataAction changed');
            this.handleDataActionWhenPopupSelectedFeatureChange(this.activeJimuMapView);
        }
    }
    componentWillUnmount() {
        const widgets = (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.getAppStore)().getState().appConfig.widgets;
        document.removeEventListener('webkitfullscreenchange', this.fullScreenHanlder);
        document.removeEventListener('fullscreenchange', this.fullScreenHanlder);
        if (!widgets[this.props.id]) {
            jimu_core__WEBPACK_IMPORTED_MODULE_0__.MutableStoreManager.getInstance().updateStateValue(this.props.id, 'restoreData', null);
        }
    }
    getJimuMapViews() {
        let jimuMapViews = [];
        const jimuMapViewGroup = jimu_arcgis__WEBPACK_IMPORTED_MODULE_4__.MapViewManager.getInstance().getJimuMapViewGroup(this.props.id);
        if (jimuMapViewGroup) {
            jimuMapViews = jimuMapViewGroup.getAllJimuMapViews();
        }
        return jimuMapViews;
    }
    setShowPopupUponSelectionForJimuMapView(jimuMapView) {
        if (jimuMapView) {
            jimuMapView.setShowPopupUponSelection(!!this.props.config.showPopupUponSelection);
        }
    }
    getCurrentPopupSelectedFeature() {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.activeJimuMapView) === null || _a === void 0 ? void 0 : _a.view) === null || _b === void 0 ? void 0 : _b.popup) === null || _c === void 0 ? void 0 : _c.selectedFeature;
    }
    loadReactiveUtils() {
        return __awaiter(this, void 0, void 0, function* () {
            [this.reactiveUtils] = (yield (0,jimu_arcgis__WEBPACK_IMPORTED_MODULE_4__.loadArcGISJSAPIModules)(['esri/core/reactiveUtils']));
            this.watchPopupSelectedFeatureChange();
        });
    }
    watchPopupSelectedFeatureChange() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.watchSelectedFeatureHandle) {
                this.watchSelectedFeatureHandle.remove();
                this.watchSelectedFeatureHandle = null;
            }
            const activeJimuMapView = this.activeJimuMapView;
            if (!activeJimuMapView || !this.reactiveUtils) {
                return;
            }
            if (this.getCurrentPopupSelectedFeature()) {
                this.handleDataActionWhenPopupSelectedFeatureChange(activeJimuMapView);
            }
            this.watchSelectedFeatureHandle = this.reactiveUtils.watch(() => { var _a, _b; return (_b = (_a = activeJimuMapView === null || activeJimuMapView === void 0 ? void 0 : activeJimuMapView.view) === null || _a === void 0 ? void 0 : _a.popup) === null || _b === void 0 ? void 0 : _b.selectedFeature; }, () => __awaiter(this, void 0, void 0, function* () {
                this.handleDataActionWhenPopupSelectedFeatureChange(activeJimuMapView);
            }));
        });
    }
    handleDataActionWhenPopupSelectedFeatureChange(activeJimuMapView) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const popup = (_a = activeJimuMapView === null || activeJimuMapView === void 0 ? void 0 : activeJimuMapView.view) === null || _a === void 0 ? void 0 : _a.popup;
            const originalSelectedFeature = popup === null || popup === void 0 ? void 0 : popup.selectedFeature;
            // firstly, we need to remove dataActionListContainer from popup domNode,
            // when state.dataActionDataSet is ready, we can add dataActionListContainer to popup domNode
            if (this.dataActionListContainer.parentNode) {
                this.dataActionListContainer.parentNode.removeChild(this.dataActionListContainer);
            }
            this.releasePopupDomNodeObserver();
            yield this.updateDataActionDataSet(null);
            const isDataActionEnabled = this.isDataActionEnabled();
            if (isDataActionEnabled && originalSelectedFeature) {
                const dataActionDataSet = yield this.getDataActionDataSet(activeJimuMapView, originalSelectedFeature);
                // getDataActionDataSet may take a long time, so we need to check should we go on or not
                if (this.getCurrentPopupSelectedFeature() !== originalSelectedFeature) {
                    return;
                }
                yield this.updateDataActionDataSet(dataActionDataSet);
                if (this.getCurrentPopupSelectedFeature() !== originalSelectedFeature) {
                    return;
                }
                this.watchPopupDomNodeChange(popup);
            }
        });
    }
    updateDataActionDataSet(dataActionDataSet) {
        return new Promise((resolve) => {
            this.setState({
                dataActionDataSet
            }, () => {
                resolve();
            });
        });
    }
    releasePopupDomNodeObserver() {
        if (this.popupDomNodeObserver) {
            this.popupDomNodeObserver.disconnect();
            this.popupDomNodeObserver = null;
        }
    }
    watchPopupDomNodeChange(popup) {
        this.releasePopupDomNodeObserver();
        const popupDomNode = (popup.domNode || popup.container);
        this.tryAppendDataActionListDomNodeToPopup(popupDomNode);
        const config = {
            childList: true,
            subtree: true
        };
        const callback = (mutationsList) => {
            for (const mutation of mutationsList) {
                if (mutation.type === 'childList') {
                    this.tryAppendDataActionListDomNodeToPopup(popupDomNode);
                }
            }
        };
        const observer = new MutationObserver(callback);
        observer.observe(popupDomNode, config);
        this.popupDomNodeObserver = observer;
    }
    tryAppendDataActionListDomNodeToPopup(popupDomNode) {
        const selector = 'calcite-action-bar[slot="action-bar"]';
        const popupActionsContainer = popupDomNode.querySelector(selector);
        if (popupActionsContainer && !popupActionsContainer.contains(this.dataActionListContainer)) {
            // this.dataActionListContainer is not in popup
            if (this.state.dataActionDataSet) {
                // DataActionList domNode is ready, we can add it to popup domNode now
                if (this.dataActionListContainer.parentNode) {
                    this.dataActionListContainer.parentNode.removeChild(this.dataActionListContainer);
                }
                // append this.dataActionListContainer into popupActionsContainer as the first child
                if (popupActionsContainer.firstChild) {
                    popupActionsContainer.insertBefore(this.dataActionListContainer, popupActionsContainer.firstChild);
                }
                else {
                    popupActionsContainer.appendChild(this.dataActionListContainer);
                }
            }
        }
    }
    getDataActionDataSet(jimuMapView, selectedFeature) {
        return __awaiter(this, void 0, void 0, function* () {
            let jimuLayerView = null;
            // If the selectedFeature is from JimuLayerView selection, we can get the jimuLayerViewId.
            // See JimuFeatureLayerView.getSelectedFeatures() for more details.
            const jimuLayerViewId = selectedFeature.jimuLayerViewId;
            if (jimuLayerViewId) {
                jimuLayerView = jimuMapView.jimuLayerViews[jimuLayerViewId];
            }
            // If jimuLayerView is still null, means the selectedFeature comes from clicking map, we can try to find the jimuLayerView by layer.
            if (!jimuLayerView) {
                const allJimuLayerViews = Object.values(jimuMapView.jimuLayerViews);
                if (selectedFeature.layer) {
                    jimuLayerView = allJimuLayerViews.find(item => item.layer === selectedFeature.layer);
                }
                if (!jimuLayerView) {
                    // If the selected feature commes from esri.layers.support.Sublayer, then the selectedFeature.layer is null and selectedFeature.sourceLayer is not null.
                    const sourceLayer = selectedFeature.sourceLayer;
                    if (sourceLayer) {
                        jimuLayerView = allJimuLayerViews.find(item => item.layer === sourceLayer);
                    }
                }
            }
            if (!jimuLayerView) {
                return null;
            }
            let layerDataSource = jimuLayerView.getLayerDataSource();
            if (!layerDataSource) {
                layerDataSource = yield jimuLayerView.createLayerDataSource();
            }
            if (layerDataSource) {
                const sourceLabel = layerDataSource.getLabel() || '';
                const stringKey = 'mapCurrentRecord';
                const dataSetName = this.props.intl.formatMessage({ id: stringKey, defaultMessage: _translations_default__WEBPACK_IMPORTED_MODULE_8__["default"][stringKey] }, { layerName: sourceLabel });
                const record = layerDataSource.buildRecord(selectedFeature);
                const dataSet = {
                    dataSource: layerDataSource,
                    name: dataSetName,
                    type: 'current',
                    records: [record]
                };
                return dataSet;
            }
            return null;
        });
    }
    isDataActionEnabled() {
        // By default, this.props.enableDataAction is undefined, which means enabled.
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-boolean-literal-compare
        return this.props.enableDataAction !== false;
    }
    renderDataActionList() {
        const isDataActionEnabled = this.isDataActionEnabled();
        if (isDataActionEnabled && this.state.dataActionDataSet) {
            // render the DataActionList into this.dataActionListContainer, so we can append it to popup domNode
            return jimu_core__WEBPACK_IMPORTED_MODULE_0__.ReactDOM.createPortal((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_7__.DataActionList, { widgetId: this.props.id, dataSets: [this.state.dataActionDataSet], disableDataSourceLevelActions: true, listStyle: jimu_ui__WEBPACK_IMPORTED_MODULE_7__.DataActionListStyle.Dropdown, hideGroupTitle: true }), this.dataActionListContainer);
        }
        return null;
    }
    render() {
        const dataActionList = this.renderDataActionList();
        return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'jimu-widget arcgis-map', css: this.getWidgetSyle() },
            this.isLoadingDisplayed() && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_7__.Loading, { className: 'map-loading-bar', type: jimu_ui__WEBPACK_IMPORTED_MODULE_7__.LoadingType.Bar }),
            this.isWarningDisplayed() && (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", { className: 'map-warning-bar' },
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_ui__WEBPACK_IMPORTED_MODULE_7__.Icon, { className: 'warning-icon', icon: this.warningIcon, size: 26, currentColor: false }),
                (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)("span", null, this.props.intl.formatMessage({ id: 'failToAddTheDataOnMap', defaultMessage: 'Fail to add the data.' }))),
            dataActionList,
            (0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_5__.PageVisibilityContext.Consumer, null, (isPageVisible) => {
                return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_5__.ViewportVisibilityContext.Consumer, null, (isVisibleInViewPort) => {
                    return ((0,jimu_core__WEBPACK_IMPORTED_MODULE_0__.jsx)(jimu_layouts_layout_runtime__WEBPACK_IMPORTED_MODULE_5__.ViewVisibilityContext.Consumer, null, (viewVisibilityContextProps) => {
                        // isPageVisible:
                        // App can have page1, page2, isPageVisible is used to judge whether the current page is visible.
                        // isVisibleInViewPort:
                        // When scrolling the scroll page, the widget may be scrolled out of the current viewport,
                        // isVisibleInViewPort is used to determine whether the current widget is in the viewport of the browser.
                        // isPrintPreview
                        // isPrintPreview is used to determine whether it is currently in browser printing mode.
                        // isVisibleInView:
                        // The widget is ultimately placed in a view in a layout. It is possible that we have a section with multiple views in it, similar to tabs.
                        // isVisibleInView is used to determine whether the widget is in the currently visible view.
                        const isVisibleInView = viewVisibilityContextProps.isInView ? viewVisibilityContextProps.isInCurrentView : true;
                        // isMapInVisibleArea:
                        // isMapInVisibleArea is used to finally determine whether the dom of the map is visible to the user.
                        // Here we use (isVisibleInViewPort || this.props.isPrintPreview), not only isVisibleInViewPort, consider the following case.
                        // Case:
                        // We create a scroll page with map. We scroll the page and the map is not visible for user.
                        // User wants to print the scroll page, including the map (even the map is not visible).
                        // Then the user enables print view mode by a button. Now, isVisibleInViewPort is false and this.props.isPrintPreview is true.
                        // We need to make sure the map widget is visible (let isMapInVisibleArea be true) when in print view mode, otherwise the print result will lose map.
                        // So we use (isVisibleInViewPort || this.props.isPrintPreview), instead of this.props.isPrintPreview.
                        const isMapInVisibleArea = isPageVisible && (isVisibleInViewPort || this.props.isPrintPreview) && isVisibleInView;
                        return this.getInnerContent(isMapInVisibleArea);
                    }));
                }));
            })));
    }
}
Widget.versionManager = _version_manager__WEBPACK_IMPORTED_MODULE_6__.versionManager;
Widget.mapExtraStateProps = (state, props) => {
    var _a;
    let autoControlWidgetId = '';
    const mapWidgetId = props.id;
    if (state.mapWidgetsInfo && mapWidgetId) {
        autoControlWidgetId = ((_a = state.mapWidgetsInfo[mapWidgetId]) === null || _a === void 0 ? void 0 : _a.autoControlWidgetId) || '';
    }
    const appMode = state && state.appRuntimeInfo && state.appRuntimeInfo.appMode;
    const isRunAppMode = appMode === jimu_core__WEBPACK_IMPORTED_MODULE_0__.AppMode.Run;
    let runtimeUrlHashParams = null;
    if (isRunAppMode && state.urlHashObject) {
        runtimeUrlHashParams = state.urlHashObject[mapWidgetId];
    }
    return {
        appMode: appMode,
        isPrintPreview: state.appRuntimeInfo.isPrintPreview,
        queryObject: state.queryObject,
        autoControlWidgetId,
        isRunAppMode,
        runtimeUrlHashParams
    };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Widget);
function __set_webpack_public_path__(url) { __webpack_require__.p = url; }

})();

/******/ 	return __webpack_exports__;
/******/ })()

			);
		}
	};
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,