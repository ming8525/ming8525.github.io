"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-563af0"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-field-pick-list_3.entry.js":
/*!***************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-field-pick-list_3.entry.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_field_pick_list: () => (/* binding */ ArcgisFieldPickList),
/* harmony export */   arcgis_smart_mapping_action: () => (/* binding */ ArcgisSmartMappingAction),
/* harmony export */   arcgis_smart_mapping_attribute_input: () => (/* binding */ ArcgisSmartMappingAttributeInput)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _feature_1ce1b984_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./feature-1ce1b984.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/feature-1ce1b984.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */











const arcgisFieldPickListCss = ".popover{z-index:100}.panel{min-height:300px}.content{max-height:60vh}.selection-button-div{padding:4px 10px}";

const ArcgisFieldPickList = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisFieldPickListDismissed = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFieldPickListDismissed", 7);
        this.arcgisFieldPickListChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFieldPickListChange", 7);
        this.arcgisFieldPickListSortByChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFieldPickListSortByChange", 7);
        this.calciteValueList = (field) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list-item", { key: field.name, label: field.alias || field.name, description: (() => {
                if (this.showFieldName) {
                    return `{${field.name}}`;
                }
                if (this.showDescription && field.description) {
                    return field.description;
                }
                return null;
            })(), value: field.name, selected: (!this.multiple && field.name === this.selectedFields[0]) ||
                (this.multiple && this.selectedFields.indexOf(field.name) > -1), metadata: {
                label: field.alias,
                fieldName: field.name
            } }, this.showFieldInfoCheck(field) && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", text: this.strings.info, title: this.strings.info, scale: "s", icon: "information", onClick: (event) => {
                var _a;
                event.stopPropagation();
                const action = event.target;
                const fieldInfoFlowItem = document.createElement("calcite-flow-item");
                fieldInfoFlowItem.heading = (_a = field.alias) !== null && _a !== void 0 ? _a : field.name;
                fieldInfoFlowItem.description = field.name;
                const fieldInfo = document.createElement("arcgis-field-info");
                fieldInfo.lang = this.currentLanguageIntl;
                fieldInfo.fieldName = field.name;
                fieldInfo.layer = this.layer;
                fieldInfo.view = this.mapView;
                fieldInfo.classList.add("content");
                fieldInfoFlowItem.appendChild(fieldInfo);
                fieldInfoFlowItem.addEventListener("calciteFlowItemBack", () => setTimeout(() => requestAnimationFrame(() => action.setFocus()), 200));
                this.flowElement.appendChild(fieldInfoFlowItem);
                setTimeout(() => requestAnimationFrame(() => fieldInfoFlowItem.setFocus()), 200);
            } }))));
        this.selectedFields = [];
        this.fields = undefined;
        this.popoverProps = undefined;
        this.layer = undefined;
        this.mapView = undefined;
        this.showFieldInfo = false;
        this.showFieldName = false;
        this.showDescription = false;
        this.showSelectionAll = false;
        this.showCancel = true;
        this.showSort = true;
        this.showFilterLength = 10;
        this.multiple = false;
        this.heading = undefined;
        this.okBtnText = undefined;
        this.filterPlaceholderText = undefined;
        this.sortBy = undefined;
        this.lastSortyBy = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.L.default;
        this.filterFields = null;
    }
    // --------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    // --------------------------------------------------------------------------
    async componentWillLoad() {
        const localeSettings = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.hostElement);
        this.strings = localeSettings[0];
        this.currentLanguage = localeSettings[1];
        this.currentLanguageIntl = localeSettings[2];
        // in case more than 1 selected field and multiple is set to false
        if (!this.multiple && this.selectedFields.length > 1) {
            this.selectedFields = [this.selectedFields[0]];
        }
        this.lastSortyBy = this.sortBy || this.lastSortyBy;
    }
    componentDidLoad() {
        this.setUpObserver();
        this.popoverNode.open = true;
        // need timeout because of re-render
        setTimeout(() => requestAnimationFrame(() => this.panelElement.setFocus()), 200);
    }
    disconnectedCallback() {
        var _a;
        (_a = this.observer) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
    // temp: https://github.com/Esri/calcite-components/issues/4333
    calciteFilterChangeHandler(event) {
        var _a, _b;
        event.stopPropagation();
        const filterNode = (_a = event === null || event === void 0 ? void 0 : event.path) === null || _a === void 0 ? void 0 : _a.find((item) => item.nodeName === "CALCITE-FILTER");
        this.filterFields = (_b = filterNode === null || filterNode === void 0 ? void 0 : filterNode.filteredItems) === null || _b === void 0 ? void 0 : _b.map((item) => {
            return item.value;
        });
    }
    // --------------------------------------------------------------------------
    //
    // Public Methods
    //
    // --------------------------------------------------------------------------
    async setFocus() {
        setTimeout(() => requestAnimationFrame(() => this.panelElement.setFocus()), 1);
    }
    async reposition() {
        var _a;
        (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
    }
    // --------------------------------------------------------------------------
    //
    // Private Methods
    //
    // --------------------------------------------------------------------------
    getSortedList() {
        const tempSorted = [...this.fields];
        if (this.lastSortyBy === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.L.display) {
            tempSorted.sort((a, b) => a.alias.localeCompare(b.alias));
        }
        else if (this.lastSortyBy === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.L.field) {
            tempSorted.sort((a, b) => a.name.localeCompare(b.name));
        }
        else if (this.lastSortyBy === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.L.type) {
            tempSorted.sort((a, b) => a.type.localeCompare(b.type));
        }
        return tempSorted;
    }
    showFieldInfoCheck(field) {
        if (this.showFieldInfo) {
            // dont want info for arcade and relation fields
            if (field.name.includes(_commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.f.expression) ||
                field.name.includes(_commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.f.relationship)) {
                return false;
            }
            else {
                return true;
            }
        }
        else {
            return false;
        }
    }
    // return true for deselect all, false for select all
    selectDeselect() {
        var _a;
        return ((_a = this.filterFields) === null || _a === void 0 ? void 0 : _a.length)
            ? this.filterContainsAll()
            : this.selectedFields.length === this.fields.length;
    }
    // check if filter has all current field info
    filterContainsAll() {
        return this.filterFields.every((filter) => {
            return this.selectedFields.some((curr) => {
                return curr === filter;
            });
        });
    }
    // --------------------------------------------------------------------------
    //
    // Rendor  Methods
    //
    // --------------------------------------------------------------------------
    render() {
        var _a;
        const addBtn = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", appearance: this.showCancel ? "solid" : "outline-fill", width: this.showCancel ? "half" : "full", scale: "m", onClick: () => {
                this.arcgisFieldPickListDismissed.emit({ selectedFields: this.selectedFields });
            } }, this.okBtnText || (this.multiple ? this.strings.done : this.strings.ok)));
        const cancelBtn = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", appearance: "outline-fill", width: this.multiple ? "half" : "full", scale: "m", onClick: () => this.arcgisFieldPickListDismissed.emit() }, this.strings.cancel));
        const hasType = this.fields.every((field) => !!field.type);
        const sort = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { slot: "menu-actions", placement: "bottom-end", overlayPositioning: "fixed", ref: (node) => (this.dropdownNode = node), onCalciteDropdownOpen: () => {
                var _a;
                (_a = this.observer) === null || _a === void 0 ? void 0 : _a.disconnect();
                this.observer.observe(this.popoverNode, { attributes: true });
            }, onCalciteDropdownClose: () => { var _a; return (_a = this.observer) === null || _a === void 0 ? void 0 : _a.disconnect(); } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "trigger", text: this.strings.sort, title: this.strings.sort }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "sortDescending" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.L.default, onClick: () => {
                this.lastSortyBy = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.L.default;
                this.arcgisFieldPickListSortByChange.emit(this.lastSortyBy);
            } }, this.strings.default), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.L.display, onClick: () => {
                this.lastSortyBy = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.L.display;
                this.arcgisFieldPickListSortByChange.emit(this.lastSortyBy);
            } }, this.strings.displayName), hasType && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.L.type, onClick: () => {
                this.lastSortyBy = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.L.type;
                this.arcgisFieldPickListSortByChange.emit(this.lastSortyBy);
            } }, this.strings.type)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: this.lastSortyBy === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.L.field, onClick: () => {
                this.lastSortyBy = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.L.field;
                this.arcgisFieldPickListSortByChange.emit(this.lastSortyBy);
            } }, this.strings.fieldName))));
        const selectionBtn = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "selection-button-div" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", scale: "s", width: "full", onClick: () => {
                var _a, _b;
                if (this.selectDeselect()) {
                    //deselect all
                    this.selectedFields = ((_a = this.filterFields) === null || _a === void 0 ? void 0 : _a.length)
                        ? this.selectedFields.filter((item) => !this.filterFields.includes(item))
                        : [];
                }
                else {
                    //select all
                    this.selectedFields = ((_b = this.filterFields) === null || _b === void 0 ? void 0 : _b.length)
                        ? [...new Set([...this.selectedFields, ...this.filterFields])]
                        : this.fields.map((field) => {
                            return field.name;
                        });
                }
            } }, this.selectDeselect() ? this.strings.deselectAll : this.strings.selectAll)));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement), class: "popover", placement: this.popoverProps.placement || "leading-start", open: false, pointerDisabled: true, referenceElement: this.popoverProps.refElement, offsetDistance: this.popoverProps.offsetDistance ||
                -Math.round(this.popoverProps.refElement.getBoundingClientRect().width), offsetSkidding: this.popoverProps.offsetSkidding || 0, overlayPositioning: this.popoverProps.overlayPositioning, triggerDisabled: this.popoverProps.triggerDisabled, autoClose: this.popoverProps.autoClose, label: this.heading || (this.multiple ? this.strings.headerSelect : this.strings.header), onCalcitePopoverClose: () => this.arcgisFieldPickListDismissed.emit(), ref: (node) => (this.popoverNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { ref: (node) => {
                this.flowElement = node;
            }, style: {
                width: `${this.popoverProps.popoverWidth ||
                    this.popoverProps.refElement.getBoundingClientRect().width}px`
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { ref: (el) => (this.panelElement = el), class: "panel", heading: this.heading || (this.multiple ? this.strings.headerSelect : this.strings.header), closable: true, onCalciteFlowItemClose: () => this.arcgisFieldPickListDismissed.emit() }, this.multiple && addBtn, this.showCancel && cancelBtn, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-pick-list", { multiple: this.multiple, ref: (node) => {
                this.pickListNode = node;
            }, class: "content", filterEnabled: this.fields.length >= this.showFilterLength ? true : false, filterPlaceholder: (_a = this.filterPlaceholderText) !== null && _a !== void 0 ? _a : this.strings.filter, onCalciteListChange: async () => {
                // keep original order. Add addional values at the end
                const tempSelectedFields = await this.pickListNode.getSelectedItems();
                this.selectedFields = [
                    ...new Set([
                        ...this.selectedFields.filter((item) => {
                            return tempSelectedFields.has(item);
                        }),
                        ...tempSelectedFields.keys()
                    ])
                ];
                this.arcgisFieldPickListChange.emit({ selectedFields: this.selectedFields });
                if (!this.multiple) {
                    this.arcgisFieldPickListDismissed.emit({ selectedFields: this.selectedFields });
                }
            } }, this.fields.length >= this.showFilterLength && this.showSort && sort, this.multiple && this.showSelectionAll && selectionBtn, [...this.getSortedList()].map((field) => {
            return this.calciteValueList(field);
        })))))));
    }
    // --------------------------------------------------------------------------
    //
    // Private  Methods
    //
    // --------------------------------------------------------------------------
    setUpObserver() {
        this.observer = new MutationObserver((mutationList /* , observer */) => {
            for (const mutation of mutationList) {
                if (mutation.attributeName === "style") {
                    if (this.popoverNode.style.visibility === "hidden") {
                        this.dropdownNode.open = false;
                    }
                }
            }
        });
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisFieldPickList.style = arcgisFieldPickListCss;

const arcgisSmartMappingActionCss = ".smart-mapping-action-outline{border:#eaeaea 1px solid}";

const ArcgisSmartMappingAction = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.hasOutline = true;
        this.text = undefined;
        this.icon = undefined;
        this.disabled = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Set focus on component
     */
    async setFocus() {
        var _a;
        (_a = this.calciteActionNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    disconnectedCallback() {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.ae)();
    }
    //--------------------------------------------------------------------------
    //
    // Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { class: `${this.hasOutline ? "smart-mapping-action-outline" : ""}`, scale: "s", text: this.text, icon: this.icon, disabled: this.disabled, ref: (node) => (this.calciteActionNode = node), onMouseOver: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.af)(this.calciteActionNode, this.text), onMouseOut: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.ae)(), onFocus: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.af)(this.calciteActionNode, this.text), onFocusout: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.ae)() }));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingAction.style = arcgisSmartMappingActionCss;

const arcgisSmartMappingAttributeInputCss = ".field-select-with-icon{display:flex;width:100%;justify-content:space-between;align-items:stretch;min-width:0}.field-button:focus{z-index:10}.non-simple-field-button{width:calc(100% - 32px)}";

const ArcgisSmartMappingAttributeInput = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingAttributeInputChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingAttributeInputChange", 7);
        this.arcgisSmartMappingAttributeInputError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingAttributeInputError", 7);
        this.fieldList = undefined;
        this.selectedField = undefined;
        this.label = undefined;
        this.mode = "simple";
        this.popoverReferenceElement = undefined;
        this.hideLabel = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Calls
    //
    //--------------------------------------------------------------------------
    async clear() {
        this.currentField = null;
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    // --------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    // --------------------------------------------------------------------------
    componentWillLoad() {
        this.currentField = this.selectedField;
        if (!this.popoverReferenceElement) {
            this.popoverReferenceElement = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.F)(this.hostElement, "calcite-flow-item");
        }
    }
    componentWillUpdate() {
        // handles rendering the date field correctly when a renderer re-creation fails in arcgis-smart-mapping-age
        if (this.currentField !== this.selectedField) {
            this.currentField = this.selectedField;
        }
    }
    // --------------------------------------------------------------------------
    //
    // Render  Methods
    //
    // --------------------------------------------------------------------------
    render() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.s;
        if (this.hideLabel) {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "field-select-with-icon" }, this.renderFieldButton(), this.mode === "remove" && this.currentField && this.renderRemoveButton(), this.mode === "expression" && this.renderArcadeButton()));
        }
        else {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.label || strings.attributeInput.attribute, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "field-select-with-icon" }, this.renderFieldButton(), this.mode === "remove" && this.currentField && this.renderRemoveButton(), this.mode === "expression" && this.renderArcadeButton())));
        }
    }
    renderArcadeButton() {
        var _a;
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.s;
        const label = this.currentField.field
            ? strings.attributeInput.useExpression
            : strings.attributeInput.useField;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, "\u00A0"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { id: "smart-mapping-attribute-switch", appearance: "outline-fill", kind: "neutral", iconStart: ((_a = this.currentField) === null || _a === void 0 ? void 0 : _a.field) ? "code" : "brackets-curly", label: label, class: "field-button", onClick: () => this.handleSwitchAttributeType(), ref: (node) => (this.switchButtonNode = node) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "smart-mapping-attribute-switch", label: label }, label)));
    }
    renderFieldButton() {
        var _a, _b, _c, _d, _e, _f;
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.s;
        const buttonType = (this.mode === "remove" || this.mode === "expression") && this.currentField
            ? "non-simple-field-button"
            : "";
        const disabled = ((_a = this.currentField) === null || _a === void 0 ? void 0 : _a.field) && this.fieldList.length === 1 && this.mode !== "remove";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "icon-end-space-between", appearance: "outline-fill", kind: "neutral", disabled: disabled, iconEnd: ((_b = this.currentField) === null || _b === void 0 ? void 0 : _b.expression) ? "pencil" : disabled ? undefined : "chevron-down", width: "full", class: `field-button ${buttonType}`, onClick: async () => {
                var _a;
                if ((_a = this.currentField) === null || _a === void 0 ? void 0 : _a.expression) {
                    await this.openArcadeEditorModal(this.currentField);
                    this.fieldButtonNode.setFocus();
                }
                else {
                    this.openFieldPickList();
                }
            }, ref: (node) => {
                if (node) {
                    this.fieldButtonNode = node;
                }
            } }, ((_c = this.currentField) === null || _c === void 0 ? void 0 : _c.field)
            ? (_d = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.u)(this.currentField.field)) === null || _d === void 0 ? void 0 : _d.label
            : ((_e = this.currentField) === null || _e === void 0 ? void 0 : _e.expression)
                ? (_f = this.currentField) === null || _f === void 0 ? void 0 : _f.expressionTitle
                : strings.attributeInput.chooseField));
    }
    renderRemoveButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, "\u00A0"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { id: "smart-mapping-attribute-switch", appearance: "outline-fill", kind: "neutral", iconStart: "x", label: strings.clear, class: "field-button", onClick: () => this.handleRemoveField() }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "smart-mapping-attribute-switch", label: strings.clear }, strings.clear)));
    }
    // --------------------------------------------------------------------------
    //
    // Private Methods
    //
    // --------------------------------------------------------------------------
    async handleRemoveField() {
        this.currentField = null;
        this.arcgisSmartMappingAttributeInputChange.emit();
    }
    async handleSwitchAttributeType() {
        var _a, _b;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.E)();
        if ((_a = this.currentField) === null || _a === void 0 ? void 0 : _a.field) {
            // switch to expression
            if ((_b = this.lastSettings) === null || _b === void 0 ? void 0 : _b.expression) {
                const fieldInfo = {
                    expression: this.lastSettings.expression,
                    expressionTitle: this.lastSettings.expressionTitle,
                    simpleFieldType: this.lastSettings.simpleFieldType
                };
                this.currentField.field = null;
                this.currentField = fieldInfo;
                this.arcgisSmartMappingAttributeInputChange.emit(this.currentField);
            }
            else {
                try {
                    await this.openArcadeEditorModal();
                    this.fieldButtonNode.setFocus();
                }
                catch (e) {
                    this.switchButtonNode.setFocus();
                }
            }
        }
        else {
            // switch to field
            this.openFieldPickList();
        }
    }
    async openArcadeEditorModal(fieldInfo) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.s;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.E)();
        try {
            fieldInfo = await (0,_feature_1ce1b984_js__WEBPACK_IMPORTED_MODULE_6__.u)(fieldInfo);
            if (fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.w.STRING) {
                this.arcgisSmartMappingAttributeInputError.emit({
                    message: strings.attributeInput.errors.expressionMustBeNumber,
                    type: "warning"
                });
                return;
            }
            else if (fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.w.UNKNOWN) {
                // let's just assume it's a number; maybe it didn't have good test data
                fieldInfo.simpleFieldType = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.w.NUMBER;
            }
            this.currentField.field = null;
            this.currentField.expression = fieldInfo.expression;
            this.currentField.expressionTitle = fieldInfo.expressionTitle;
            this.currentField.simpleFieldType = fieldInfo.simpleFieldType;
            this.arcgisSmartMappingAttributeInputChange.emit(this.currentField);
            return new Promise((resolve) => {
                resolve();
            });
        }
        catch (e) {
            return new Promise((__, reject) => {
                reject();
            });
        }
    }
    openFieldPickList() {
        const { layer, mapView, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.s;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.E)();
        const fieldPickList = document.createElement("arcgis-field-pick-list");
        fieldPickList.fields = this.fieldList.map((field) => {
            return {
                name: field.layerField.name,
                alias: field.label,
                type: field.simpleFieldType,
                description: "description" in field.layerField ? field.layerField.description : undefined
            };
        });
        if (this.currentField) {
            fieldPickList.heading = strings.replaceField;
            fieldPickList.selectedFields = [this.currentField.field];
        }
        else {
            fieldPickList.heading = strings.addField;
        }
        fieldPickList.popoverProps = {
            refElement: this.popoverReferenceElement,
            placement: "leading",
            offsetDistance: 0,
            popoverWidth: this.popoverReferenceElement.getBoundingClientRect().width * 1.05,
            overlayPositioning: "absolute",
            flipDisabled: false,
            triggerDisabled: false
        };
        fieldPickList.layer = layer;
        fieldPickList.mapView = mapView;
        fieldPickList.showFieldInfo = true;
        fieldPickList.sortBy = this.lastFieldSortBy;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.L)(this.popoverReferenceElement, true);
        document.body.appendChild(fieldPickList);
        fieldPickList.addEventListener("arcgisFieldPickListSortByChange", (event) => {
            this.lastFieldSortBy = event.detail;
        });
        fieldPickList.addEventListener("arcgisFieldPickListDismissed", (event) => {
            var _a, _b;
            if ((_a = event.detail) === null || _a === void 0 ? void 0 : _a.selectedFields) {
                const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.u)(event.detail.selectedFields[0]);
                const fieldInfo = {
                    field: field.layerField.name,
                    simpleFieldType: field.simpleFieldType
                };
                if ((_b = this.currentField) === null || _b === void 0 ? void 0 : _b.expression) {
                    this.lastSettings = {
                        expression: this.currentField.expression,
                        expressionTitle: this.currentField.expressionTitle,
                        simpleFieldType: this.currentField.simpleFieldType
                    };
                }
                this.currentField = fieldInfo;
                this.arcgisSmartMappingAttributeInputChange.emit(this.currentField);
            }
            this.fieldButtonNode.setFocus();
            document.body.removeChild(fieldPickList);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_4__.L)(this.popoverReferenceElement, false);
        });
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingAttributeInput.style = arcgisSmartMappingAttributeInputCss;



//# sourceMappingURL=arcgis-field-pick-list_3.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,