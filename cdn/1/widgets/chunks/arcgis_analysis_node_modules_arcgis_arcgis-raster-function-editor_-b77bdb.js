"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-b77bdb"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.pl-a6eab705.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.pl-a6eab705.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Abs_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Abs_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Abs_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Abs_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Abs_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Abs_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Abs_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Abs_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Abs_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Abs_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Abs_Raster_tag0@@": "Raster wejściowy, dla którego mają zostać obliczone wartości bezwzględne.",
	"@@ACos_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@ACos_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@ACos_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@ACos_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@ACos_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@ACos_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@ACos_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@ACos_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@ACos_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@ACos_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@ACos_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@ACos_Raster_tag0@@": "Dane wejściowe, dla których będą obliczane wartości funkcji odwrotnej do funkcji cosinus.",
	"@@ACosH_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@ACosH_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@ACosH_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@ACosH_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@ACosH_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@ACosH_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@ACosH_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@ACosH_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@ACosH_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@ACosH_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@ACosH_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@ACosH_Raster_tag0@@": "Dane wejściowe, dla których mają zostać obliczone wartości arcus cosinusa hiperbolicznego.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "Wyniki funkcji Widoczny współczynnik odbicia można także określić mianem albedo, który to termin oznacza procentową wartość dostępnej energii odbijanej przez powierzchnię planety. Współczynnik albedo jest używany przez naukowców w aplikacjach wykorzystujących złożone modelowanie i teledetekcję.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Niezaznaczone — funkcja zwraca wartości widocznego współczynnika odbicia. Jest to opcja domyślna.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Gdy zaznaczone — funkcja zwraca 32-bitowe wartości zmiennoprzecinkowe, najczęściej mieszczące się w zakresie od 0,0 do 1,0. Jeśli zaznaczona jest ta opcja, ograniczanie danych nie jest przeprowadzane.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Ponieważ dane wynikowe dla albedo są typu zmiennoprzecinkowego, należy wyraźnie ustawić preferowany <strong>Typ piksela wynikowego</strong> jako 32-bitową wartość zmiennoprzecinkową lub 64-bitową wartość double (podwójnej precyzji). Parametr <strong>Typ piksela wynikowego</strong> znajduje się na karcie <strong>Ogólne</strong> funkcji rastrowej <strong>Widoczny współczynnik odbicia</strong>. Jeśli parametr <strong>Typ piksela wynikowego</strong> dla opcji <strong>Albedo</strong> nie został wybrany prawidłowo, wartości wynikowe będą nieprawidłowe i będą miały wartość 0.",
	"@@Apparent-Reflectance_Offset_tag0@@": "Skalowana wartość albedo opcjonalnie może mieć współczynnik kompensacji:",
	"@@Apparent-Reflectance_Offset_tag1@@": "Dla typów danych 16-bitowych bez znaku domyślny współczynnik kompensacji skali wynosi 5 000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "Dla typów danych 8-bitowych bez znaku domyślny współczynnik kompensacji skali wynosi 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "Nie jest stosowane żadne skalowane w przypadku albedo jako danej wynikowej.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "Tę wartość można ręcznie konfigurować lub edytować dla poszczególnych pasm. Odpowiednie informacje można odczytać z metadanych wejściowego produktu rastrowego.",
	"@@Apparent-Reflectance_Raster_tag0@@": "Produkt rastrowy, dla którego będzie stosowana funkcja Widoczny współczynnik odbicia.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "Wartość wynikowa widocznego współczynnika odbicia może być wyrażona w postaci liczby całkowitej. Współczynnik skali jest mnożony przez wartość albedo w celu przekonwertowania wszystkich wartości zmiennoprzecinkowych na wartości całkowite.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Jeśli współczynnik skali ma wartość ${0} lub nie jest określony, zostanie zastosowane skalowanie domyślne zależne od typu piksela danych wejściowych:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "Dla typów danych 16-bitowych bez znaku domyślny współczynnik skali wynosi 50 000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "Dla typów danych 8-bitowych bez znaku domyślny współczynnik skali wynosi 255.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "Współczynnik skali jest stosowany zawsze w przypadku widocznego współczynnika odbicia jako danej wynikowej. Nie jest stosowane żadne skalowane w przypadku albedo jako danej wynikowej.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Jest to wartość określająca wysokość słońca wyrażona w stopniach. Zostanie ona wstawiona przez system, jeśli odpowiednią informację można odczytać z metadanych. Można ręcznie ustawiać i edytować tę wartość.",
	"@@ArgStatistics_Max_tag0@@": "Skonfigurowana wartość maksymalna to największa wartość równa lub mniejsza od wartości końcowej przedziału.",
	"@@ArgStatistics_Max_tag1@@": "To ustawienie ma zastosowanie tylko w przypadku metody Czas trwania.",
	"@@ArgStatistics_Method_tag0@@": "Wybiera metodę statystyczną do wykonania obliczeń:",
	"@@ArgStatistics_Method_tag1@@": "Argument maksimum — argument wartości maksymalnej, zwracany jest indeks pasma ${Band index}, dla którego dany piksel uzyskuje wartość maksymalną z wartości należących do wszystkich pasm. Wszystkim pasmom rastra z każdego rastra wejściowego przypisany jest przyrostowy indeks pasma o wartości początkowej 0, który jest uporządkowany w pierwszej kolejności według indeksu rastra wejściowego, a w drugiej kolejności według powiązanych pasm w obrębie każdego rastra wejściowego.",
	"@@ArgStatistics_Method_tag2@@": "Argument mediany — argument mediany, zwracany jest indeks pasma ${Band index}, dla którego dany piksel uzyskuje wartość mediany z wartości należących do wszystkich pasm.",
	"@@ArgStatistics_Method_tag3@@": "Argument minimum — argument wartości minimalnej, zwracany jest indeks pasma ${Band index}, dla którego dany piksel uzyskuje wartość minimalną z wartości należących do wszystkich pasm.",
	"@@ArgStatistics_Method_tag4@@": "Czas trwania — metoda Czas trwania znajduje najdłuższy ciąg kolejnych elementów w macierzy taki, że każdy element ma wartość większą lub równą względem wartości <strong>Minimum</strong> i mniejszą lub równą względem wartości <strong>Maksimum</strong>, a następnie zwraca jego długość.",
	"@@ArgStatistics_Min_tag0@@": "Ustawiona wartość minimum to najmniejsza wartość równa lub większa od wartości początkowej przedziału.",
	"@@ArgStatistics_Min_tag1@@": "To ustawienie ma zastosowanie tylko w przypadku metody Czas trwania.",
	"@@ArgStatistics_Rasters_tag0@@": "Raster wejściowy, dla którego będą wykonywane różne metody statystyczne.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "Stała wejściowa zwracana, gdy nie można uzyskać konkretnej wartości maksymalnej, minimalnej czy mediany. Najczęściej sytuacja taka ma miejsce wówczas, gdy wartość maksymalna lub minimalna występuje więcej niż raz wśród wartości ze wszystkich pasm. Domyślną wartością dla niezdefiniowanej stałej jest 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "Stała Niezdefiniowana klasa dotyczy wyłącznie metod <strong>ArgMaksimum</strong>, <strong>ArgMinimum</strong> oraz <strong>ArgMediana</strong>.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Wskazuje, czy wartości Brak danych są ignorowane w obliczeniach statystycznych.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Zaznaczone — analiza obejmie wszystkie poprawne piksele w rastrach wejściowych i zignoruje wszystkie piksele o wartości Brak danych.",
	"@@ArgStatistics_ignorenodata_tag2@@": "Niezaznaczone — wynikiem analizy będzie wartość Brak danych, jeśli dla pikseli w rastrach wejściowych istnieją jakiekolwiek wartości Brak danych. To jest ustawienie domyślne.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Arithmetic_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Arithmetic_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Arithmetic_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Arithmetic_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Arithmetic_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Arithmetic_Operation_tag0@@": "Operacja arytmetyczna do wykonania na dwóch rastrach wejściowych.",
	"@@Arithmetic_Operation_tag1@@": "Dostępne opcje to:",
	"@@Arithmetic_Operation_tag2@@": "<strong>Podziel</strong> — daje w wyniku iloraz wartości odpowiednich pikseli dla każdego rastra.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Odejmij</strong> — daje w wyniku różnicę między wartościami odpowiednich pikseli dla każdego rastra. Ta funkcja może być używana do obliczeń mających na celu wykrywanie zmian.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Dominanta</strong> — daje w wyniku najliczniej występującą wartość spośród wszystkich nakładających się pikseli. Na przykład, jeśli raster zawiera sześć pasm, będzie istnieć sześć nakładających się pikseli. Dla wartości 4, 5, 6, 4, 7, 9 dominanta jest równa 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Pomnóż</strong> — daje w wyniku iloczyn wartości odpowiednich pikseli dla każdego rastra. Ta funkcja może być używana do wykonywania niektórych funkcji kosztowych.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Dodaj</strong> — daje w wyniku sumę wartości wszystkich odpowiednich pikseli dla każdego rastra.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Potęga</strong> — daje w wyniku wartości odpowiednich pikseli podniesione do potęg określonych przez raster wejściowy lub skalar.",
	"@@Arithmetic_Raster_tag0@@": "Pierwszy wejściowy zestaw danych rastrowych.",
	"@@Arithmetic_Raster2_tag0@@": "Drugi wejściowy zestaw danych rastrowych.",
	"@@ASin_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@ASin_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@ASin_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@ASin_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@ASin_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@ASin_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@ASin_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@ASin_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@ASin_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@ASin_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@ASin_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@ASin_Raster_tag0@@": "Dane wejściowe, dla których będą obliczane wartości funkcji odwrotnej do funkcji sinus.",
	"@@ASinH_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@ASinH_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@ASinH_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@ASinH_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@ASinH_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@ASinH_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@ASinH_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@ASinH_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@ASinH_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@ASinH_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@ASinH_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@ASinH_Raster_tag0@@": "Dane wejściowe, dla których będą obliczane wartości funkcji odwrotnej do funkcji sinus hiperboliczny.",
	"@@Aspect_Raster_tag0@@": "Wartość wejściowa DEM używana do wyprowadzania zestawu danych ekspozycji.",
	"@@Aspect-Slope_Raster_tag0@@": "Wejściowy model DEM.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "Współczynnik skalowania używany do konwertowania wartości wysokości służący dwóm celom:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "Konwersji jednostek wysokości (takich jak metry lub stopy) na poziome jednostki współrzędnych zbioru danych, takie jak stopy, metry lub stopnie.",
	"@@Aspect-Slope_Z-Factor_tag2@@": "Dodania pionowego wyniesienia dla efektu wizualnego.",
	"@@ATan_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@ATan_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@ATan_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@ATan_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@ATan_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@ATan_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@ATan_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@ATan_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@ATan_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@ATan_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@ATan_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@ATan_Raster_tag0@@": "Dane wejściowe, dla których będą obliczane wartości funkcji odwrotnej do funkcji tangens.",
	"@@ATan2_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@ATan2_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@ATan2_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@ATan2_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@ATan2_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@ATan2_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@ATan2_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@ATan2_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@ATan2_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@ATan2_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@ATan2_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@ATan2_Raster_tag0@@": "Dane wejściowe, które określają licznik lub wartość y używaną podczas obliczania funkcji odwrotnej do funkcji tangens.",
	"@@ATan2_Raster2_tag0@@": "Dane wejściowe, które określają mianownik lub wartość x używaną podczas obliczania funkcji odwrotnej do funkcji tangens.",
	"@@ATanH_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@ATanH_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@ATanH_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@ATanH_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@ATanH_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@ATanH_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@ATanH_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@ATanH_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@ATanH_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@ATanH_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@ATanH_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@ATanH_Raster_tag0@@": "Dane wejściowe, dla których będą obliczane wartości funkcji odwrotnej do funkcji tangens hiperboliczny.",
	"@@Attribute-Table_Raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@Attribute-Table_Table-Type_tag0@@": "Tabelę atrybutów wejściowych można wprowadzić, używając typu <strong>Ręczny</strong> i przypisując nazwę klasy oraz kolor do poszczególnych wartości. Można też odnieść się do istniejącej tabeli pochodzącej z pliku ${.dbf}.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Jeśli w polu <strong>Metoda</strong> wybrano wartość <strong>Zdefiniowana przez użytkownika</strong>, należy zdefiniować formułę arytmetyki pasma.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "Jeśli w polu <strong>Metoda</strong> zostanie wybrany wstępnie zdefiniowany wskaźnik, należy zdefiniować odpowiednie pasma wejściowych zestawów danych rastrowych, które odpowiadają wskaźnikowi.",
	"@@Band-Arithmetic_Method_tag0@@": "Typ algorytmu arytmetyki pasma, który ma zostać wdrożony. Można zdefiniować własny niestandardowy algorytm lub wybrać jeden ze wstępnie zdefiniowanych wskaźników.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong> -- wskaźnik obszarów spalonych",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>CIg</strong> -- indeks chlorofilowy - zielony",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>CIre</strong> — wskaźnik chlorofilowy — krawędź czerwieni",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Clay Minerals</strong> — współczynnik minerałów ilastych",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong> — rozszerzony wskaźnik roślinności",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Ferrous Minerals</strong> — współczynnik minerałów żelazowych",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong> — wskaźnik globalnego monitorowania środowiskowego",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong> — zielony znormalizowany różnicowy wskaźnik roślinności",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong> — wskaźnik roślinności zielonej Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Iron Oxide</strong> — współczynnik tlenków żelaza",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>WNDWI</strong> — zmodyfikowany znormalizowany różnicowy wskaźnik wody",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong> — zmodyfikowany trójkątny wskaźnik roślinności (druga iteracja)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>Zmodyfikowany SAVI</strong> — zmodyfikowany wskaźnik roślinności dostosowany względem gleby",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong> — znormalizowany indeks współczynnika spalenia",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong> — znormalizowany różnicowy indeks zabudowy",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong> — znormalizowany różnicowy wskaźnik wilgotności",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong> — znormalizowany różnicowy wskaźnik śniegu",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong> — znormalizowany różnicowy wskaźnik roślinności",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong> — znormalizowany różnicowy wskaźnik roślinności krawędzi czerwieni",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong> — znormalizowany różnicowy wskaźnik wody",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong> — wskaźnik roślinności pionowej",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong> — trójkątny wskaźnik roślinności krawędzi czerwieni",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong> — wskaźnik roślinności dostosowany względem gleby",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong> — prosty współczynnik",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong> — prosty współczynnik krawędzi czerwieni",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Wzór Sułtana</strong> — wzór Sułtana",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>Przetransformowany SAVI</strong> — przetransformowany wskaźnik roślinności dostosowany względem gleby",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>Zdefiniowane przez użytkownika</strong> — pozwala zdefiniować własne niestandardowe wyrażenie arytmetyki pasma.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong> — wskaźnik Visible Atmospherically Resistant Index",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong> — ważony znormalizowany różnicowy wskaźnik wody",
	"@@Band-Arithmetic_Raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@Binary-Thresholding_Raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Bitwise-And_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Bitwise-And_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Bitwise-And_Raster_tag0@@": "Pierwsza wartość wejściowa do użycia w tej operacji bitowej.",
	"@@Bitwise-And_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Bitwise-And_Raster2_tag0@@": "Druga wartość wejściowa do użycia w tej operacji bitowej.",
	"@@Bitwise-And_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "Wartość wejściowa, której przesunięcie ma zostać wykonane.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "Wartość wejściowa określająca liczbę pozycji, o jaką bity mają zostać przesunięte.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Bitwise-Not_Raster_tag0@@": "Raster wejściowy, na którym ma być wykonywana operacja bitowej negacji (uzupełnienia).",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Bitwise-Or_Raster_tag0@@": "Pierwsza wartość wejściowa do użycia w tej operacji bitowej.",
	"@@Bitwise-Or_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Bitwise-Or_Raster2_tag0@@": "Druga wartość wejściowa do użycia w tej operacji bitowej.",
	"@@Bitwise-Or_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "Wartość wejściowa, której przesunięcie ma zostać wykonane.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "Wartość wejściowa określająca liczbę pozycji, o jaką bity mają zostać przesunięte.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Bitwise-Xor_Raster_tag0@@": "Pierwsza wartość wejściowa do użycia w tej operacji bitowej.",
	"@@Bitwise-Xor_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Bitwise-Xor_Raster2_tag0@@": "Druga wartość wejściowa do użycia w tej operacji bitowej.",
	"@@Bitwise-Xor_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Boolean-and_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Boolean-and_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Boolean-and_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Boolean-and_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Boolean-and_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Boolean-and_Raster_tag0@@": "Pierwsza wartość wejściowa do użycia w tej operacji logicznej.",
	"@@Boolean-and_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Boolean-and_Raster2_tag0@@": "Druga wartość wejściowa do użycia w tej operacji logicznej.",
	"@@Boolean-and_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Boolean-Not_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Boolean-Not_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Boolean-Not_Raster_tag0@@": "Pierwsza wartość wejściowa do użycia w tej operacji logicznej.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Boolean-Or_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Boolean-Or_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Boolean-Or_Raster_tag0@@": "Pierwsza wartość wejściowa do użycia w tej operacji logicznej.",
	"@@Boolean-Or_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Boolean-Or_Raster2_tag0@@": "Druga wartość wejściowa do użycia w tej operacji logicznej.",
	"@@Boolean-Or_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Boolean-Xor_Raster_tag0@@": "Pierwsza wartość wejściowa do użycia w tej operacji logicznej.",
	"@@Boolean-Xor_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Boolean-Xor_Raster2_tag0@@": "Druga wartość wejściowa do użycia w tej operacji logicznej.",
	"@@Boolean-Xor_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Buffered_Raster_tag0@@": "Raster wejściowy, który ma zostać umieszczony w pamięci.",
	"@@Calculator_Cellsize-Type_tag0@@": "Rozmiar komórki używany do tworzenia rastra wynikowego.",
	"@@Calculator_Cellsize-Type_tag1@@": "Na liście rozwijanej dostępne są następujące opcje dla rozmiaru komórki wynikowej:",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>Pierwszy z</strong> — rozmiar komórki pierwszej zmiennej rastra.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Min. z</strong> — minimalny rozmiar komórki rastrów wejściowych.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Maks. z</strong> — maksymalny rozmiar komórki rastrów wejściowych.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Średnia z</strong> — średni rozmiar komórki rastrów wejściowych.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Ostatni z</strong> — rozmiar komórki ostatniej zmiennej rastra.",
	"@@Calculator_Cellsize-Type_tag12@@": "Domyślnie wybierana jest opcja <strong>Maks z</strong>.",
	"@@Calculator_Expression_tag0@@": "Utworzenie wyrażenia algebraicznego w celu wykonania analizy przestrzennej względem rastra wejściowego.",
	"@@Calculator_Expression_tag1@@": "W celu utworzenia wyrażenia mogą być wywoływane wszystkie istniejące funkcje matematyczne. Dostępne operacje wymieniono poniżej.",
	"@@Calculator_Expression_tag2@@": "Operacje arytmetyczne",
	"@@Calculator_Expression_tag3@@": "Dodawanie: +",
	"@@Calculator_Expression_tag4@@": "Dzielenie: /",
	"@@Calculator_Expression_tag5@@": "Modulo: %",
	"@@Calculator_Expression_tag6@@": "Mnożenie: *",
	"@@Calculator_Expression_tag7@@": "Potęgowanie: **",
	"@@Calculator_Expression_tag8@@": "Odejmowanie: -",
	"@@Calculator_Expression_tag9@@": "Operacje logiczne",
	"@@Calculator_Expression_tag10@@": "Logiczne AND: &&",
	"@@Calculator_Expression_tag11@@": "Logiczne Or: ||",
	"@@Calculator_Expression_tag12@@": "Operacje relacyjne",
	"@@Calculator_Expression_tag13@@": "Równe: ==",
	"@@Calculator_Expression_tag14@@": "Większe niż: >",
	"@@Calculator_Expression_tag15@@": "Większe lub równe: >=",
	"@@Calculator_Expression_tag16@@": "Mniejsze niż: <",
	"@@Calculator_Expression_tag17@@": "Mniejsze lub równe: >=",
	"@@Calculator_Expression_tag18@@": "Nie jest równe: !=",
	"@@Calculator_Expression_tag19@@": "Dodatkowe operacje",
	"@@Calculator_Expression_tag20@@": "Minimalna wartość dwóch rastrów na podstawie poszczególnych pikseli: min(a,b)",
	"@@Calculator_Expression_tag21@@": "Maksymalna wartość dwóch rastrów na podstawie poszczególnych pikseli: max(a,b)",
	"@@Calculator_Expression_tag22@@": "Oto kilka przykładów wyrażeń:",
	"@@Calculator_Expression_tag23@@": "Proste wyrażenie warunkowe: w rastrze (oznaczonym literą T) znajdź wartości wysokości powyżej 4000 stóp i nadaj tym obszarom wartość 1, a wszystkim innym obszarom wartość 0.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Zagnieżdżone wyrażenie warunkowe: znajdź obszary, na których spadek (określony jako b1) jest mniejszy niż 10 stopni, a NDVI (określony jako b2) jest większy niż 0,5. Nadaj tym obszarom wartość 1. Wszystkim innym obszarom przypisz wartość 2, jeśli spadek wynosi powyżej 10 stopni, a wysokość (określana jako b3) wynosi ponad 2500 stóp. Wszystkim innym obszarom przypisz wartość 3.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Wybierz zasięg do użycia w rastrze wynikowym:</p><ul><li><p>Pierwszy z — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.</p></li><li>Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. To jest ustawienie domyślne.</li><li>Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.</li><li>Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "Zdefiniowana przez użytkownika nazwa zmiennej i raster wejściowy.",
	"@@Classify_Input-Definition-File_tag0@@": "Wejściowy plik definicji klasyfikatora Esri (${.ecd}) zawierający statystyki i inne informacje związane z klasyfikacją dotyczące określonego zestawu danych, klasyfikatora i wybranych atrybutów.",
	"@@Classify_Raster_tag0@@": "Zestaw danych rastrowych, który ma zostać sklasyfikowany.",
	"@@Classify_Raster2_tag0@@": "Opcjonalny pomocniczy zestaw danych rastrowych dołączany do klasyfikatora, jak np. obraz podzielony na segmenty, obraz wielospektralny lub dane wysokościowe, używany do generowania bardziej rozbudowanych definicji klasyfikacji dla zestawu danych. Zestaw danych rastrowych wykorzystywany przez ten parametr musi odpowiadać zestawowi użytemu do utworzenia wejściowego pliku definicji klasyfikatora Esri.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "Do określania zasięgu przycinania można używać następujących elementów:",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Przycinanie rastra</strong> — zasięg rastra przycinającego",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Zasięg niestandardowy</strong> — minimalne i maksymalne wartości współrzędnych X i Y",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Bieżący zasięg mapy</strong> — bieżący zasięg mapy",
	"@@Clip_Clipping-Raster_tag0@@": "Warstwa rastrowa używana do przycinania.",
	"@@Clip_Clipping-Type_tag0@@": "Wskaż, czy należy zachować obszar wewnątrz geometrii, czy poza geometrią przycięcia.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Wewnątrz geometrii</strong> — usunięte zostanie zobrazowanie znajdujące się wewnątrz zasięgów przycięcia.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Poza geometrią</strong> — usunięte zostanie zobrazowanie znajdujące się poza zasięgami przycięcia.",
	"@@Clip_Custom-Extent_tag0@@": "Podaj cztery współrzędne, które definiują zasięg ramki ograniczającej używanej do przycinania rastra.",
	"@@Clip_Output-Extent_tag0@@": "Współrzędne x i y bieżącego zasięgu przycinania.",
	"@@Clip_Output-Extent_tag1@@": "Przycisk <strong>Przechwyć bieżący zasięg mapy</strong> powoduje użycie zasięgu widoku aktywnej mapy.",
	"@@Clip_Raster_tag0@@": "Wejściowa warstwa rastrowa.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "Gdy ta opcja jest wybrana, dane są przycinane zgodnie z geometrią podanej klasy obiektów.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Niezaznaczone — w funkcji używana jest geometria przycięcia określona przez <strong>Prostokąt</strong>. Jest to opcja domyślna.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Zaznaczone — w funkcji używana jest geometria przycięcia zdefiniowana przez klasę obiektów.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "Typ konwersji koloru do wykonania:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "HSV do RGB",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "RGB do HSV",
	"@@Color-Model-Conversion_Raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@Colormap_Color-Ramp_tag0@@": "Wybierz istniejącą skalę barw.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Wybierz typ schematu kolorów, według którego będzie renderowany raster wejściowy",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Skala barw — użyj skali barw.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Mapa kolorów — użyj istniejącej mapy kolorów.",
	"@@Colormap_Colormap_tag0@@": "Na liście rozwijanej są dostępne następujące domyślne mapy kolorów:",
	"@@Colormap_Colormap_tag1@@": "Dane wysokościowe — mapa kolorów zmieniających się stopniowo od koloru turkusowego przez fioletowy do czarnego.",
	"@@Colormap_Colormap_tag2@@": "Szara — mapa kolorów zmieniających się stopniowo od koloru czarnego do białego.",
	"@@Colormap_Colormap_tag7@@": "Cieniowanie rzeźby — mapa w skali szarości wizualizująca trójwymiarową reprezentację powierzchni terenu, w której przy cieniowaniu obrazu brane jest pod uwagę względne położenie słońca.",
	"@@Colormap_Colormap_tag3@@": "NDVI — mapa kolorów do wizualizacji roślinności. Wartości bliskie zeru są niebieskie. Niskie wartości są brązowe. Następnie kolor zmienia się stopniowo od czerwonego przez pomarańczowy, żółty, zielony aż do czarnego zgodnie ze wzrostem wartości wskaźnika roślinności.",
	"@@Colormap_Colormap_tag4@@": "NDVI2 — mapa kolorów do wizualizacji roślinności. Niskie wartości są odwzorowane w kolorach od białego do zielonego. Następnie kolor zmienia się od szarego przez fioletowy, fiołkowy, ciemnoniebieski aż do czarnego zgodnie ze wzrostem wartości wskaźnika roślinności.",
	"@@Colormap_Colormap_tag5@@": "NDVI3 — mapa kolorów do wizualizacji roślinności. Wartości bliskie zeru są niebieskie. Następnie kolor zmienia się stopniowo od czerwonego przez pomarańczowy aż do zielonego zgodnie ze wzrostem wartości wskaźnika roślinności.",
	"@@Colormap_Colormap_tag6@@": "Losowa — losowa mapa kolorów.",
	"@@Colormap_Raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@Colormap-To-RGB_Raster_tag0@@": "Raster wejściowy mapy kolorów.",
	"@@Complex_Raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@Composite-Bands_Rasters_tag0@@": "Użyj listy rozwijanej lub przycisku <strong>Przeglądaj</strong> w celu wybrania danych wejściowych rastra.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.</p><ul><li>Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.</li><li>Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.</li><li>Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. To jest ustawienie domyślne.</li><li>Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.</li><li>Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Con-function_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Con-function_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Con-function_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Con-function_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Con-function_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Con_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Con_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Con_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Con_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Con_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Con_False-Raster_tag0@@": "Dane wejściowe, których wartości będą używane jako wynikowe wartości pikseli, jeśli warunek ma wartość fałsz (false). Może to być raster całkowitoliczbowy lub zmiennoprzecinkowy albo wartość stała.",
	"@@Con_Raster_tag0@@": "Raster wejściowy reprezentujący wynik logicznej matematycznej funkcji rastrowej w postaci wartości logicznej. Wartości to 1 (prawda — true) lub 0 (fałsz — false). Może to być raster całkowitoliczbowy lub zmiennoprzecinkowy.",
	"@@Con_True-Raster_tag0@@": "Dane wejściowe, których wartości będą używane jako wynikowe wartości pikseli, jeśli warunek ma wartość prawda (true). Może to być raster całkowitoliczbowy lub zmiennoprzecinkowy albo wartość stała.",
	"@@Constant_Constant_tag0@@": "Stała wartość dodawana do wirtualnego rastra.",
	"@@Constant_Raster-Info_tag0@@": "Użyj przycisku <strong>Wczytaj szablon rastra</strong>, aby wczytać szablon z katalogu lub portalu.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "Stopień wygładzania stosowanego do linii warstwicowej. Wartość domyślna wynosi 2,5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "Niższa wartość daje linie warstwicowe o większej szczegółowości i mniej gładkie, wyższa wartość pozwala uzyskać linie bardziej gładkie i mniej postrzępione.",
	"@@Contour_Contour-Interval_tag0@@": "Różnica wysokości między liniami warstwicowymi.",
	"@@Contour_Contour-Interval_tag1@@": "Mała wartość skoku warstwicowego jest stosowana w przypadku obszarów o płaskim ukształtowaniu, natomiast wyższe wartości są stosowane na terenach o bogatej rzeźbie i górzystych.",
	"@@Contour_Contour-Type_tag0@@": "Typ tworzonej warstwicy:",
	"@@Contour_Contour-Type_tag1@@": "<strong>Wypełnienie warstwicy</strong> — wypełnia obszar między liniami warstwicowymi skwantyzowanymi wartościami wysokości.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Linie warstwicowe</strong> — łączy punkty o tej samej wysokości, tworząc linie reprezentujące stałą wysokość.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Tylko gładka powierzchnia</strong> — wygładza wejściową warstwę wysokościową, ale nie tworzy warstwic.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "Warstwica indeksowa reprezentowana przez pogrubioną linę.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "Wartością domyślną jest 5, tak więc co piąta linia warstwicowa jest pogrubiona.",
	"@@Contour_Number-Of-Contours_tag0@@": "Liczba warstwic generowanych na ekranie. Dynamicznie dobiera skok warstwicowy odpowiedni dla ukształtowania terenu widocznego na ekranie spośród zestawu standardowych wartości: 1, 5, 10 itd.",
	"@@Contour_Raster_tag0@@": "Zestaw danych wysokościowych rastra jednopasmowego.",
	"@@Contour_Z-Base_tag0@@": "Wartość konturu podstawowego. Warstwice są generowane powyżej i poniżej tej wartości według wymagań, aby pokryć cały zakres wartości rastra wejściowego. Domyślna wartość to 0.",
	"@@Contour_Z-Base_tag1@@": "Wartość 0 często reprezentuje średni poziom morza, w zależności od źródłowego zestawu danych wysokościowych.",
	"@@Contour_Z-Factor_tag0@@": "Współczynnik konwersji jednostek używany podczas generowania warstwic. Wartość domyślna wynosi 1.",
	"@@Contour_Z-Factor_tag1@@": "Linie warstwicowe są generowane na podstawie wartości Z rastra wejściowego, które są często wyrażane w metrach lub stopach. Po zastosowaniu wartości domyślnej równej 1 warstwice będą wyrażone w tych samych jednostkach co wartości Z rastra wejściowego. Aby utworzyć warstwice w innych jednostkach niż wartości Z, należy ustawić odpowiednią wartość współczynnika Z. Należy pamiętać, że jednostki x,y terenu i jednostki Z nie muszą być spójne, aby móc skorzystać z tego narzędzia.",
	"@@Contour_Z-Factor_tag2@@": "Na przykład jeśli wartości wysokości w rastrze wejściowym są wyrażone w stopach, a warstwice mają być generowane w metrach, należy skonfigurować współczynnik Z na wartość 0,3048 (ponieważ 1 stopa = 0,3048 metra).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Skoryguj jasność warstwy rastrowej.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "Przesunięcie jasności można modyfikować za pomocą suwaka lub wpisując jego wartość.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Skoryguj kontrast warstwy rastrowej.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "Przesunięcie kontrastu można modyfikować za pomocą suwaka lub wpisując jego wartość.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "Raster wejściowy, dla którego będzie edytowana jasność i kontrast.",
	"@@Convolution_kernel_tag0@@": "<p>W tej tabeli pokazano, w jaki sposób poszczególne piksele będą ważone w procesie filtrowania. Tę tabelę można edytować, jeśli w polu <strong>Typ</strong> zostanie wybrana opcja <strong>Zdefiniowane przez użytkownika</strong>.</p>",
	"@@Convolution_Raster_tag0@@": "Wejściowy zestaw danych rastrowych.",
	"@@Convolution_Type_tag0@@": "Wybierz typ filtrowania, który ma zostać wykonany. Można wybrać opcje wyostrzania, rozmywania i wykrywania krawędzi lub zdefiniować własny filtr na podstawie skupień",
	"@@Corridor_Distance-Raster-1_tag0@@": "Pierwszy wejściowy raster odległości. Powinna to być wynikowa odległość o najmniejszym akumulowanym koszcie z funkcji Odległość kosztu lub Odległość ścieżki.",
	"@@Corridor_Distance-Raster-2_tag0@@": "Drugi wejściowy raster odległości. Powinna to być wynikowa odległość o najmniejszym akumulowanym koszcie z funkcji Odległość kosztu lub Odległość ścieżki.",
	"@@Cos_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Cos_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Cos_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Cos_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Cos_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Cos_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Cos_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Cos_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Cos_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Cos_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Cos_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Cos_Raster_tag0@@": "Dane wejściowe, dla których będą obliczane wartości funkcji cosinus.",
	"@@CosH_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@CosH_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@CosH_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@CosH_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@CosH_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@CosH_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@CosH_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@CosH_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@CosH_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@CosH_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@CosH_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@CosH_Raster_tag0@@": "Dane wejściowe, dla których mają zostać obliczone wartości cosinusa hiperbolicznego.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Ten parametr symuluje wzrost wysiłku potrzebnego do przezwyciężenia kosztów w miarę wzrostu akumulowanego kosztu. Służy do modelowania zmęczenia podróżującej osoby. Rosnący akumulowany koszt dotarcia do komórki jest mnożony przez współczynnik oporu i dodawany do kosztu ruchu do kolejnej komórki.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Jest to zmodyfikowana wersja wzoru na stopę procentu składanego służąca do obliczania oczywistego kosztu poruszania się przez komórkę. Wraz ze wzrostem współczynnika oporu rośnie koszt komórek odwiedzanych później. Im wyższy współczynnik oporu, tym większy koszt dotarcia do kolejnej komórki, który nakłada się na koszt każdego kolejnego ruchu. Ponieważ współczynnik oporu jest podobny do procentu składanego i wartości akumulowanego kosztu są zazwyczaj bardzo duże, zaleca się stosowanie niskich wartości tego współczynnika, np. 0,005 lub jeszcze niższych, w zależności od wartości akumulowanego kosztu.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola z <strong>rastra źródłowego</strong>.",
	"@@Cost-Allocation_Capacity_tag0@@": "Definiuje pojemność kosztową osoby podróżującej dla danego źródła. Obliczenia kosztów są kontynuowane dla każdego źródła do momentu osiągnięcia określonej pojemności.",
	"@@Cost-Allocation_Capacity_tag1@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Cost-Allocation_Capacity_tag2@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola <strong>rastra źródłowego</strong>.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "Wymagany raster wejściowy definiujący koszt (impedancję) ruchu planimetrycznego między poszczególnymi komórkami. Wartość w każdej lokalizacji komórki reprezentuje odległość kosztu na jednostkę na potrzeby poruszania się przez tę komórkę. Wartość każdej lokalizacji komórki jest mnożona przez rozdzielczość komórki, a jednocześnie następuje kompensacja ruchu ukośnego, aby uzyskać łączny koszt poruszania się przez komórkę.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "Wartości <strong>rastra kosztów</strong> mogą być całkowitoliczbowe lub zmiennoprzecinkowe, ale nie mogą być ujemne ani równe zero.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "Próg, którego nie mogą przekroczyć wartości akumulowanego kosztu. Jeśli odległość akumulowanego kosztu przekroczy tę wartość, wartością wynikową lokalizacji komórki będzie ${NoData}. Maksymalna odległość definiuje zasięg, dla którego są obliczane odległości akumulowanego kosztu. Domyślna odległość to zasięg rastra wynikowego.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Mnożnik do zastosowania do wartości kosztów.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Ten parametr umożliwia sterowanie trybem podróżowania lub wielkością w źródle. Im wyższy mnożnik, tym większy koszt ruchu przez każdą komórkę.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Wartości muszą być większe niż zero. Domyślna wartość to 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola z <strong>rastra źródłowego</strong>.",
	"@@Cost-Allocation_Source-Field_tag0@@": "Pole służące do przypisywania wartości do lokalizacji źródłowych. Musi być typu całkowitoliczbowego. Jeśli ustawiono opcję <strong>Raster wartości</strong>, wartości tego rastra wejściowego będą miały pierwszeństwo przed dowolnym ustawieniem opcji <strong>Pole źródłowe</strong>.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "Wymagany raster wejściowy lokalizacji źródłowych.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Jest to raster identyfikujący komórki lub lokalizacje, z których jest obliczana odległość o najmniejszym akumulowanym koszcie dla każdej lokalizacji komórki wynikowej.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "Jeśli wejściowy <strong>Raster źródłowy</strong> jest zmiennoprzecinkowy, należy ustawić opcję <strong>Raster wartości</strong> i musi to być raster całkowitoliczbowy. Opcja <strong>Raster wartości</strong> ma pierwszeństwo przed każdym ustawieniem opcji <strong>Pole źródłowe</strong>.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "Początkowy koszt, od którego będą rozpoczynane obliczenia kosztów. Ten parametr pozwala określić stały koszt powiązany ze źródłem. Zamiast rozpoczynać od kosztu równego 0, algorytm kosztu rozpocznie od podanej wartości.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "Wartość musi wynosić zero lub więcej. Domyślna wartość to 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Definiuje kierunek osoby podróżującej podczas stosowania źródłowego współczynnika oporu i początkowego kosztu dla źródła.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>Ze źródła</strong> — źródłowy współczynnik oporu i początkowy koszt zostaną zastosowane, począwszy od wejściowego źródła przy ruchu w kierunku komórek innych niż źródłowe. Jest to opcja domyślna.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>Do źródła</strong> — źródłowy współczynnik oporu i początkowy koszt zostaną zastosowane, począwszy od każdej komórki innej niż źródłowa przy ruchu w kierunku wejściowego źródła.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Podaj słowo kluczowe <strong>Ze źródła</strong> lub <strong>Do źródła</strong>, które zostanie zastosowane do wszystkich źródeł lub podaj pole w <strong>rastrze źródłowym</strong> zawierające słowa kluczowe identyfikujące kierunek podróżowania dla każdego źródła. To pole musi zawierać ciąg znakowy ${FROM_SOURCE} lub ${TO_SOURCE}.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "Wejściowy raster całkowitoliczbowy identyfikujący wartości strefy do użycia dla każdej wejściowej lokalizacji źródłowej. Dla każdej komórki lokalizacji źródłowej wartość zdefiniowana w opcji <strong>Raster wartości</strong> zostanie przypisana do wszystkich komórek przydzielonych do lokalizacji źródłowej na potrzeby obliczenia. Opcja <strong>Raster wartości</strong> ma pierwszeństwo przed każdym ustawieniem opcji <strong>Pole źródłowe</strong>.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Ten parametr symuluje wzrost wysiłku potrzebnego do przezwyciężenia kosztów w miarę wzrostu akumulowanego kosztu. Służy do modelowania zmęczenia podróżującej osoby. Rosnący akumulowany koszt dotarcia do komórki jest mnożony przez współczynnik oporu i dodawany do kosztu ruchu do kolejnej komórki.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Jest to zmodyfikowana wersja wzoru na stopę procentu składanego służąca do obliczania oczywistego kosztu poruszania się przez komórkę. Wraz ze wzrostem współczynnika oporu rośnie koszt komórek odwiedzanych później. Im wyższy współczynnik oporu, tym większy koszt dotarcia do kolejnej komórki, który nakłada się na koszt każdego kolejnego ruchu. Ponieważ współczynnik oporu jest podobny do procentu składanego i wartości akumulowanego kosztu są zazwyczaj bardzo duże, zaleca się stosowanie niskich wartości tego współczynnika, np. 0,005 lub jeszcze niższych, w zależności od wartości akumulowanego kosztu.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola z <strong>rastra źródłowego</strong>.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Definiuje pojemność kosztową osoby podróżującej dla danego źródła. Obliczenia kosztów są kontynuowane dla każdego źródła do momentu osiągnięcia określonej pojemności.",
	"@@Cost-Back-Link_Capacity_tag1@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Cost-Back-Link_Capacity_tag2@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola <strong>rastra źródłowego</strong>.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "Wymagany raster wejściowy definiujący koszt (impedancję) ruchu planimetrycznego między poszczególnymi komórkami. Wartość w każdej lokalizacji komórki reprezentuje odległość kosztu na jednostkę na potrzeby poruszania się przez tę komórkę. Wartość każdej lokalizacji komórki jest mnożona przez rozdzielczość komórki, a jednocześnie następuje kompensacja ruchu ukośnego, aby uzyskać łączny koszt poruszania się przez komórkę.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "Wartości <strong>rastra kosztów</strong> mogą być całkowitoliczbowe lub zmiennoprzecinkowe, ale nie mogą być ujemne ani równe zero.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "Próg, którego nie mogą przekroczyć wartości akumulowanego kosztu. Jeśli odległość akumulowanego kosztu przekroczy tę wartość, wartością wynikową lokalizacji komórki będzie NoData. Maksymalna odległość definiuje zasięg, dla którego są obliczane odległości akumulowanego kosztu. Domyślna odległość to zasięg rastra wynikowego.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Mnożnik do zastosowania do wartości kosztów.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Ten parametr umożliwia sterowanie trybem podróżowania lub wielkością w źródle. Im wyższy mnożnik, tym większy koszt ruchu przez każdą komórkę.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Wartości muszą być większe niż zero. Domyślna wartość to 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola <strong>rastra źródłowego</strong>.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "Wymagany raster wejściowy lokalizacji źródłowych.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Jest to raster identyfikujący komórki lub lokalizacje, z których jest obliczana odległość o najmniejszym akumulowanym koszcie dla każdej lokalizacji komórki wynikowej.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "Początkowy koszt, od którego będą rozpoczynane obliczenia kosztów. Ten parametr pozwala określić stały koszt powiązany ze źródłem. Zamiast rozpoczynać od kosztu równego 0, algorytm kosztu rozpocznie od podanej wartości.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "Wartość musi wynosić zero lub więcej. Domyślna wartość to 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Definiuje kierunek osoby podróżującej podczas stosowania źródłowego współczynnika oporu i początkowego kosztu dla źródła.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>Ze źródła</strong> — źródłowy współczynnik oporu i początkowy koszt zostaną zastosowane, począwszy od wejściowego źródła przy ruchu w kierunku komórek innych niż źródłowe. Jest to opcja domyślna.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>Do źródła</strong> — źródłowy współczynnik oporu i początkowy koszt zostaną zastosowane, począwszy od każdej komórki innej niż źródłowa przy ruchu w kierunku wejściowego źródła.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Podaj słowo kluczowe <strong>Ze źródła</strong> lub <strong>Do źródła</strong>, które zostanie zastosowane do wszystkich źródeł lub podaj pole w <strong>rastrze źródłowym</strong> zawierające słowa kluczowe identyfikujące kierunek podróżowania dla każdego źródła. To pole musi zawierać ciąg znakowy ${FROM_SOURCE} lub ${TO_SOURCE}.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Ten parametr symuluje wzrost wysiłku potrzebnego do przezwyciężenia kosztów w miarę wzrostu akumulowanego kosztu. Służy do modelowania zmęczenia podróżującej osoby. Rosnący akumulowany koszt dotarcia do komórki jest mnożony przez współczynnik oporu i dodawany do kosztu ruchu do kolejnej komórki.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Jest to zmodyfikowana wersja wzoru na stopę procentu składanego służąca do obliczania oczywistego kosztu poruszania się przez komórkę. Wraz ze wzrostem współczynnika oporu rośnie koszt komórek odwiedzanych później. Im wyższy współczynnik oporu, tym większy koszt dotarcia do kolejnej komórki, który nakłada się na koszt każdego kolejnego ruchu. Ponieważ współczynnik oporu jest podobny do procentu składanego i wartości akumulowanego kosztu są zazwyczaj bardzo duże, zaleca się stosowanie niskich wartości tego współczynnika, np. 0,005 lub jeszcze niższych, w zależności od wartości akumulowanego kosztu.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola z <strong>rastra źródłowego</strong>.",
	"@@Cost-Distance_Capacity_tag0@@": "Definiuje pojemność kosztową osoby podróżującej dla danego źródła. Obliczenia kosztów są kontynuowane dla każdego źródła do momentu osiągnięcia określonej pojemności.",
	"@@Cost-Distance_Capacity_tag1@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Cost-Distance_Capacity_tag2@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola z <strong>rastra źródłowego</strong>.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "Wymagany raster wejściowy definiujący koszt (impedancję) ruchu planimetrycznego między poszczególnymi komórkami. Wartość w każdej lokalizacji komórki reprezentuje odległość kosztu na jednostkę na potrzeby poruszania się przez tę komórkę. Wartość każdej lokalizacji komórki jest mnożona przez rozdzielczość komórki, a jednocześnie następuje kompensacja ruchu ukośnego, aby uzyskać łączny koszt poruszania się przez komórkę.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "Wartości <strong>rastra kosztów</strong> mogą być całkowitoliczbowe lub zmiennoprzecinkowe, ale nie mogą być ujemne ani równe zero.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "Próg, którego nie mogą przekroczyć wartości akumulowanego kosztu. Jeśli odległość akumulowanego kosztu przekroczy tę wartość, wartością wynikową lokalizacji komórki będzie NoData. Maksymalna odległość definiuje zasięg, dla którego są obliczane odległości akumulowanego kosztu. Domyślna odległość to zasięg rastra wynikowego.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Mnożnik do zastosowania do wartości kosztów.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Ten parametr umożliwia sterowanie trybem podróżowania lub wielkością w źródle. Im wyższy mnożnik, tym większy koszt ruchu przez każdą komórkę.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Wartości muszą być większe niż zero. Domyślna wartość to 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola z <strong>rastra źródłowego</strong>.",
	"@@Cost-Distance_Source-Raster_tag0@@": "Wymagany raster wejściowy lokalizacji źródłowych.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Jest to raster identyfikujący komórki lub lokalizacje, z których jest obliczana odległość o najmniejszym akumulowanym koszcie dla każdej lokalizacji komórki wynikowej.",
	"@@Cost-Distance_Start-Cost_tag0@@": "Początkowy koszt, od którego będą rozpoczynane obliczenia kosztów. Ten parametr pozwala określić stały koszt powiązany ze źródłem. Zamiast rozpoczynać od kosztu równego 0, algorytm kosztu rozpocznie od podanej wartości.",
	"@@Cost-Distance_Start-Cost_tag1@@": "Wartość musi wynosić zero lub więcej. Domyślna wartość to 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Definiuje kierunek osoby podróżującej podczas stosowania źródłowego współczynnika oporu i początkowego kosztu dla źródła.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>Ze źródła</strong> — źródłowy współczynnik oporu i początkowy koszt zostaną zastosowane, począwszy od wejściowego źródła przy ruchu w kierunku komórek innych niż źródłowe. Jest to opcja domyślna.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>Do źródła</strong> — źródłowy współczynnik oporu i początkowy koszt zostaną zastosowane, począwszy od każdej komórki innej niż źródłowa przy ruchu w kierunku wejściowego źródła.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Podaj słowo kluczowe <strong>Ze źródła</strong> lub <strong>Do źródła</strong>, które zostanie zastosowane do wszystkich źródeł lub podaj pole w <strong>rastrze źródłowym</strong> zawierające słowa kluczowe identyfikujące kierunek podróżowania dla każdego źródła. To pole musi zawierać ciąg znakowy ${FROM_SOURCE} lub ${TO_SOURCE}.",
	"@@Curvature_Curvature-Type_tag0@@": "Typ krzywizny uwydatnia różne aspekty spadków. Dostępne są trzy opcje krzywizny:",
	"@@Curvature_Curvature-Type_tag1@@": "Planarna — prostopadła do kierunku maksymalnego spadku. Określa zbieżność i rozbieżność przepływu.",
	"@@Curvature_Curvature-Type_tag2@@": "Wertykalna — równoległa do spadku; wskazuje kierunek maksymalnego spadku. Wpływa na przyspieszenie i spowolnienie przepływu na powierzchni.",
	"@@Curvature_Curvature-Type_tag3@@": "Standardowa — stanowi połączenie krzywizn <strong>wertykalnej</strong> i <strong>planarnej</strong>.",
	"@@Curvature_DEM_tag0@@": "Warstwa rastrowa numerycznego modelu terenu (Digital Elevation Model, DEM).",
	"@@Curvature_Z-Factor_tag0@@": "Współczynnik Z określa jednostki miary jednostek Z, gdy różnią się one od jednostek x i y powierzchni wejściowej. Jeśli jednostki miary X, Y oraz Z są takie same, wówczas współczynnik Z powinien zostać skonfigurowany na 1. Wartości Z powierzchni wejściowej są mnożone przez współczynnik Z podczas obliczania końcowej powierzchni wynikowej. Przykład: jeśli jednostkami Z są stopy, a jednostkami x, y są metry, wówczas na potrzeby konwersji jednostek Z ze stóp na metry należy użyć współczynnika Z wynoszącego 0,3048 (1 stopa = 0,3048 m).",
	"@@Divide_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Divide_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Divide_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Divide_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Divide_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Divide_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Divide_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Divide_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Divide_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Divide_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Divide_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Divide_Raster_tag0@@": "Dane wejściowe, których wartości zostaną podzielone przez drugie dane wejściowe.",
	"@@Divide_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać liczbę, jeśli dla parametru ${Raster2} zostanie podany raster.",
	"@@Divide_Raster2_tag0@@": "Dane wejściowe, których wartość będzie dzielnikiem dla pierwszych danych wejściowych.",
	"@@Divide_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać liczbę, jeśli jako parametr ${Raster} zostanie podany raster.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "Wejściowy model DEM.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "Maksymalna szerokość luki określa największą lukę, która będzie wypełniana. Jeśli szerokość lub wysokość obwiedni luki będzie większa niż maksymalna szerokość luki, nie zostanie ona wypełniona. Jednostki tego parametru są takie same jak jednostki w układzie odniesień przestrzennych danych.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Jeśli ten parametr pozostanie pusty lub przyjmie wartość ${0}, maksymalna szerokość nie zostanie użyta i wypełniane będą wszystkie luki. Wartość ${-1} oznacza, że luki nie będą wypełniane.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "Maksymalny promień wyszukiwania użyty do wypełniania luk. Luka najbardziej oddalona od dowolnego piksela o wartość większą niż ta wartość progowa będzie nadal traktowana jako luka. Jednostki tego parametru są takie same jak jednostki w układzie odniesień przestrzennych danych.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Jeśli wartość parametru nie zostanie podana lub zostanie ustawiona na ${0} lub ${-1}, ten parametr nie będzie używany.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Equal-to_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Equal-to_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Equal-to_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Equal-to_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Equal-to_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Equal-to_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Equal-to_Raster_tag0@@": "Dane wejściowe, które będą używane na potrzeby sprawdzania równości z drugimi danymi wejściowymi.",
	"@@Equal-to_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Equal-to_Raster2_tag0@@": "Dane wejściowe, które będą używane na potrzeby sprawdzania równości z pierwszymi danymi wejściowymi.",
	"@@Equal-to_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "Wielkość komórki używana podczas tworzenia rastra wynikowego.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Jeśli rozmiar komórki został jawnie ustawiony w ramach opcji <strong>Środowiska analizy</strong>, będzie to domyślny rozmiar komórki. Jeśli ta opcja nie została ustawiona, rozmiar komórki danych wynikowych będzie taki sam jak rozmiar w <strong>rastrze źródłowym</strong>.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Określa, czy odległości mają być obliczane przy użyciu metody planarnej (płaska powierzchnia Ziemi), czy geodezyjnej (elipsoida).",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Geodezyjnie — najkrótsza linia między dwoma punktami na powierzchni ziemi traktowanej jak sferoida (elipsoida). Dzięki temu wyniki nie zmieniają się w zależności od wejściowego lub wynikowego odwzorowania. Jednym z zastosowań linii geodezyjnych jest określenie najkrótszej odległości między dwoma miastami na ścieżce lotu. Nosi ona także nazwę linii koła wielkiego, jeśli zamiast elipsoidy przyjęta zostanie sfera.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Na płaszczyźnie — pomiar na płaszczyźnie używający obliczeń kartezjańskich 2D do wyliczenia długości i pola powierzchni. Ta opcja jest dostępna tylko przy pomiarach dokonywanych w układzie współrzędnych odwzorowanych i jako podstawa obliczeń stosowana jest powierzchnia 2D tego układu współrzędnych.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Definiuje odległość progową, w ramach której zostanie określone najbliższe źródło. Jeśli odległość do najbliższego źródła jest większa od tej odległości progowej, danymi wynikowymi dla komórki będzie wartość ${NoData}.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "Domyślna odległość to zasięg rastra wynikowego.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "Raster definiujący bariery.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "Zestaw danych musi zawierać wartość ${NoData} tam, gdzie nie ma żadnych barier. Bariery są reprezentowane przez prawidłowe wartości, w tym wartość zero.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "Bariery mogą być zdefiniowane przez raster całkowitoliczbowy lub zmiennoprzecinkowy.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "Pole służące do przypisywania wartości do lokalizacji źródłowych. Musi być typu całkowitoliczbowego. Jeśli ustawiono opcję <strong>Raster wartości</strong>, wartości tego rastra wejściowego będą miały pierwszeństwo przed dowolnym ustawieniem opcji <strong>Pole źródłowe</strong>.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "Wymagany raster wejściowy identyfikujący lokalizacje źródłowe. Dla każdej komórki w danych wynikowych najbliższe źródło zostanie obliczone na podstawie odległości euklidesowej",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "Dane wejściowe mogą być typu całkowitoliczbowego lub zmiennoprzecinkowego.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "Wejściowy raster całkowitoliczbowy identyfikujący wartości strefy do użycia dla każdej wejściowej lokalizacji źródłowej. Dla każdej komórki lokalizacji źródłowej wartość zdefiniowana w opcji <strong>Raster wartości</strong> zostanie przypisana do wszystkich komórek przydzielonych do lokalizacji źródłowej na potrzeby obliczenia. Opcja <strong>Raster wartości</strong> ma pierwszeństwo przed każdym ustawieniem opcji <strong>Pole źródłowe</strong>.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "Wielkość komórki używana podczas tworzenia rastra wynikowego.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Jeśli rozmiar komórki został jawnie ustawiony w ramach opcji <strong>Środowiska analizy</strong>, będzie to domyślny rozmiar komórki. Jeśli ta opcja nie została ustawiona, rozmiar komórki danych wynikowych będzie taki sam jak rozmiar w <strong>rastrze źródłowym</strong>.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Określa, czy odległości mają być obliczane przy użyciu metody planarnej (płaska powierzchnia Ziemi), czy geodezyjnej (elipsoida).",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Geodezyjnie — najkrótsza linia między dwoma punktami na powierzchni ziemi traktowanej jak sferoida (elipsoida). Dzięki temu wyniki nie zmieniają się w zależności od wejściowego lub wynikowego odwzorowania. Jednym z zastosowań linii geodezyjnych jest określenie najkrótszej odległości między dwoma miastami na ścieżce lotu. Nosi ona także nazwę linii koła wielkiego, jeśli zamiast elipsoidy przyjęta zostanie sfera.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Na płaszczyźnie — pomiar na płaszczyźnie używający obliczeń kartezjańskich 2D do wyliczenia długości i pola powierzchni. Ta opcja jest dostępna tylko przy pomiarach dokonywanych w układzie współrzędnych odwzorowanych i jako podstawa obliczeń stosowana jest powierzchnia 2D tego układu współrzędnych.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Definiuje odległość progową, w ramach której zostanie obliczony kierunek do najbliższego źródła. Jeśli odległość do najbliższego źródła jest większa od tej odległości progowej, danymi wynikowymi dla komórki będzie wartość ${NoData}.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "Domyślna odległość to zasięg rastra wynikowego.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "Raster definiujący bariery.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "Zestaw danych musi zawierać wartość NoData tam, gdzie nie ma żadnych barier. Bariery są reprezentowane przez prawidłowe wartości, w tym wartość zero.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "Bariery mogą być zdefiniowane przez raster całkowitoliczbowy lub zmiennoprzecinkowy.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "Wymagany raster wejściowy identyfikujący komórki lub lokalizacje, do których jest obliczany kierunek euklidesowy dla każdej lokalizacji komórki wynikowej.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "Dane wejściowe mogą być typu całkowitoliczbowego lub zmiennoprzecinkowego.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "Wielkość komórki używana podczas tworzenia rastra wynikowego.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Jeśli rozmiar komórki został jawnie ustawiony w ramach opcji <strong>Środowiska analizy</strong>, będzie to domyślny rozmiar komórki. Jeśli ta opcja nie została ustawiona, rozmiar komórki danych wynikowych będzie taki sam jak rozmiar w <strong>rastrze źródłowym</strong>.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Określa, czy odległości mają być obliczane przy użyciu metody planarnej (płaska powierzchnia Ziemi), czy geodezyjnej (elipsoida).",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Geodezyjnie — najkrótsza linia między dwoma punktami na powierzchni ziemi traktowanej jak sferoida (elipsoida). Dzięki temu wyniki nie zmieniają się w zależności od wejściowego lub wynikowego odwzorowania. Jednym z zastosowań linii geodezyjnych jest określenie najkrótszej odległości między dwoma miastami na ścieżce lotu. Nosi ona także nazwę linii koła wielkiego, jeśli zamiast elipsoidy przyjęta zostanie sfera.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Na płaszczyźnie — pomiar na płaszczyźnie używający obliczeń kartezjańskich 2D do wyliczenia długości i pola powierzchni. Ta opcja jest dostępna tylko przy pomiarach dokonywanych w układzie współrzędnych odwzorowanych i jako podstawa obliczeń stosowana jest powierzchnia 2D tego układu współrzędnych.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "Próg, którego nie mogą przekroczyć wartości akumulowanej odległości. Jeśli akumulowana odległość euklidesowa przekroczy tę wartość, lokalizacja komórki będzie miała wartość wynikową NoData.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "Domyślna odległość to zasięg rastra wynikowego.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "Raster definiujący bariery.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "Zestaw danych musi zawierać wartość ${NoData} tam, gdzie nie ma żadnych barier. Bariery są reprezentowane przez prawidłowe wartości, w tym wartość zero.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "Bariery mogą być zdefiniowane przez raster całkowitoliczbowy lub zmiennoprzecinkowy.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "Wymagany raster wejściowy identyfikujący komórki lub lokalizacje, do których jest obliczana odległość euklidesowa dla każdej lokalizacji komórki wynikowej.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "Dane wejściowe mogą być typu całkowitoliczbowego lub zmiennoprzecinkowego.",
	"@@Exp_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Exp_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Exp_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Exp_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Exp_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Exp_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Exp_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Exp_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Exp_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Exp_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Exp_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Exp_Raster_tag0@@": "Wartości wejściowe, dla których jest znajdywana funkcja wykładnicza o podstawie e.",
	"@@Exp10_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Exp10_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Exp10_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Exp10_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Exp10_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Exp10_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Exp10_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Exp10_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Exp10_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Exp10_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Exp10_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Exp10_Raster_tag0@@": "Wartości wejściowe, dla których jest znajdywana funkcja wykładnicza o podstawie 10.",
	"@@Exp2_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Exp2_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Exp2_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Exp2_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Exp2_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Exp2_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Exp2_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Exp2_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Exp2_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Exp2_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Exp2_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Exp2_Raster_tag0@@": "Wartości wejściowe, dla których jest znajdywana funkcja wykładnicza o podstawie 2.",
	"@@Extract-Bands_Band_tag0@@": "Wybierz pasma do wyodrębnienia z listy na podstawie użytej opcji parametru <strong>Metoda</strong>.",
	"@@Extract-Bands_Combination_tag0@@": "Kombinacja pasm lub ich kolejność. Lista wyboru jest zależna od podanej opcji <strong>Metoda</strong>. Jeśli na przykład <strong>Metoda</strong> to <strong>Nazwy pasm</strong>, możesz wybrać kombinację Niebieski, Zielony i Czerwony, aby wyodrębnić obraz o naturalnych kolorach.",
	"@@Extract-Bands_Method_tag0@@": "Wybierz jedną z następujących metod wyodrębniania pasm:",
	"@@Extract-Bands_Method_tag1@@": "<strong>Identyfikatory pasm</strong> — oznaczenie lub numer pasma unikalny dla każdego czujnika. Te wartości mogą być identyczne jak <strong>Nazwy pasm</strong>.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Nazwy pasm</strong> — używana jest nazwa pasma reprezentująca przedział długości fal w spektrum elektromagnetycznym (na przykład Czerwień, Bliska podczerwień, Podczerwień termiczna). Mogą one pełnić również rolę identyfikatorów numerów pasm.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Długości fal pasm</strong> — długość fali widma promieniowania elektromagnetycznego.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Określa działanie podejmowane, kiedy pasmo z listy wyodrębnionych pasm nie jest dostępne.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Najlepsze dopasowanie</strong> — umożliwia znalezienie najlepszego dostępnego pasma do użycia zamiast brakującego pasma w oparciu o długość fali, dzięki czemu funkcja nie zakończy się niepowodzeniem",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Niepowodzenie</strong> — jeśli w wejściowym zestawie danych brakuje któregokolwiek z pasm podanych w parametrze <strong>Pasmo</strong>, działanie funkcji zakończy się niepowodzeniem.",
	"@@Extract-Bands_Raster_tag0@@": "Produkt rastrowy, z którego będą wyodrębniane pasma.",
	"@@Fill_Raster_tag0@@": "Raster wysokościowy o pojedynczym pasmie.",
	"@@Fill_Z-Limit_tag0@@": "Maksymalna różnica wysokości między ujściem i jego punktem wylewu do wypełnienia.",
	"@@Fill_Z-Limit_tag1@@": "Jeśli dla tego parametru nie zostanie określona wartość, wszystkie ujścia zostaną wypełnione bez względu na głębokość.",
	"@@Fill_Z-Limit_tag2@@": "Wartość parametru <strong>Limit Z</strong> musi być większa niż zero.",
	"@@Float_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Float_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Float_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Float_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Float_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Float_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Float_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Float_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Float_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Float_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Float_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Float_Raster_tag0@@": "Raster wejściowy, który ma zostać przekształcony w liczbę zmiennoprzecinkową.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "Raster wejściowy, który pokazuje kierunek przepływu od każdej komórki.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "Raster kierunku przepływu może być utworzony w wyniku uruchomienia funkcji <strong>Kierunek przepływu</strong>.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Definiuje typ wejściowego rastra kierunku przepływu.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong> — wejściowy raster kierunku przepływu jest typu D8. Jest to opcja domyślna.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> — wejściowy raster kierunku przepływu jest typu D-Infinity (DINF).",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> — wejściowy raster kierunku przepływu jest typu Multi Flow Direction (MFD).",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "Wynikowy raster akumulowania może być liczbą całkowitą lub zmiennoprzecinkową.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Zmiennoprzecinkowe</strong> — raster wynikowy będzie liczbą zmiennoprzecinkową. Jest to opcja domyślna.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Całkowite</strong> — raster wynikowy będzie liczbą całkowitą.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "Opcjonalny raster wejściowy stosujący wagi dla każdego piksela.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Jeśli żaden raster ważony nie jest określony, do każdego piksela zostanie zastosowana waga równa 1.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Definiuje typ wejściowego rastra kierunku przepływu.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong> — wejściowy raster kierunku przepływu jest typu D8. Jest to opcja domyślna.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> — wejściowy raster kierunku przepływu jest typu D-Infinity (DINF).",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> — wejściowy raster kierunku przepływu jest typu Multi Flow Direction (MFD).",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Określa, czy piksele krawędziowe będą zawsze wypływały na zewnątrz, czy będą zachowywały się zgodnie z normalnymi regułami przepływu.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>Nie</strong> — jeśli maksymalne odrzucenie po wewnętrznej stronie piksela krawędziowego jest większe od zera, kierunek przepływu zostanie określony tak jak zwykle. W przeciwnym razie kierunek przepływu będzie zwrócony w stronę krawędzi. Piksele, które powinny wypływać z krawędzi rastra powierzchni do wewnątrz, będą się tak zachowywały. Jest to opcja domyślna.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Tak</strong> — wszystkie piksele znajdujące się przy krawędzi rastra powierzchni będą wypływały na zewnątrz rastra powierzchni.",
	"@@Flow-Direction_Raster_tag0@@": "Raster wejściowy reprezentujący ciągłą powierzchnię wysokościową.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Określa, czy jest obliczany pionowy, czy poziomy komponent odległości przepływu.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Poziomo</strong> — obliczenia odległości reprezentują poziomy komponent odległości przepływu od poszczególnych pikseli w domenie do pikseli w strumieniu, do którego przepływają.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Pionowo</strong> — obliczenia odległości reprezentują pionowy komponent odległości przepływu od poszczególnych pikseli w domenie do pikseli w strumieniu, do którego przepływają. Jest to opcja domyślna.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "Raster wejściowy, który pokazuje kierunek przepływu od każdego piksela.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "Jeśli zostanie podany raster kierunku przepływu, kierunki spadku zostaną ograniczone do tych zdefiniowanych w wejściowych kierunkach przepływu.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "Raster kierunku przepływu może być utworzony w wyniku użycia funkcji Kierunek przepływu.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Definiuje typ wejściowego rastra kierunku przepływu.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong> — wejściowy raster kierunku przepływu jest typu D8. Jest to opcja domyślna.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> — wejściowy raster kierunku przepływu jest typu D-Infinity (DINF).",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> — wejściowy raster kierunku przepływu jest typu Multi Flow Direction (MFD).",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Określa typ statystyki używany do obliczania odległości przepływu w wielu ścieżkach przepływów. Jeśli istnieje tylko jedna ścieżka przepływu z każdej komórki do komórki w strumieniu, wszystkie typy statystyk dadzą taki sam wynik.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Minimum</strong> — w przypadku istnienia wielu ścieżek przepływu obliczana jest minimalna odległość przepływu. Jest to opcja domyślna.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Średnia ważona</strong> — w przypadku istnienia wielu ścieżek przepływu obliczana jest średnia ważona odległość przepływu. Proporcje przepływu z komórki do sąsiadujących z nią w dół przepływu komórek są używane jako wagi do obliczania średniej ważonej.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Maksimum</strong> — w przypadku istnienia wielu ścieżek przepływu obliczana jest maksymalna odległość przepływu.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "Wejściowy raster strumieniowy reprezentujący liniową sieć strumieniową.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "Raster wejściowy reprezentujący ciągłą powierzchnię wysokościową.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "Kierunek pomiaru wzdłuż ścieżki przepływu.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong>W dół</strong> — oblicza odległość spadku wzdłuż ścieżki przepływu od każdej komórki do ujścia lub wylotu na krawędzi rastra.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>W górę</strong> — oblicza najdłuższą odległość wznoszenia wzdłuż ścieżki przepływu od każdej komórki do szczytu działu wód.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "Raster wejściowy, który pokazuje kierunek przepływu od każdej komórki.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "Raster kierunku przepływu może być utworzony w wyniku uruchomienia funkcji <strong>Kierunek przepływu</strong>.",
	"@@Flow-Length_Weight-Raster_tag0@@": "Opcjonalny raster wejściowy stosujący wagi dla każdej komórki.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Jeśli żaden raster ważony nie jest określony, do każdej komórki zostanie zastosowana waga równa 1.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Wskazuje, czy wartości ${NoData} są ignorowane przez obliczenia statystyczne.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Zaznaczone</strong> — określa, że jeśli wartość ${NoData} istnieje w sąsiedztwie, wartość ${NoData} będzie ignorowana. Tylko komórki z sąsiedztwa, które mają wartości danych, będą używane na potrzeby określania wartości wynikowej. Jest to opcja domyślna.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Niezaznaczone</strong> — określa, że jeśli jakakolwiek komórka w sąsiedztwie ma wartość ${NoData}, wartość wynikowa dla przetwarzanej komórki będzie wynosiła ${NoData}.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "Kształt obszaru wokół każdej komórki używanej do obliczania statystyk.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Każde sąsiedztwo ma dodatkowe parametry definiowania kształtu.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Pierścień, Promień wewnętrzny, Promień zewnętrzny",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Okrąg, Promień",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Nieregularny, Szerokość, Wysokość, Wartości w sąsiedztwie",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Prostokąt, Szerokość, Wysokość",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Klin, Promień, Kąt początkowy, Kąt końcowy",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Waga, Szerokość, Wysokość, Wartości w sąsiedztwie",
	"@@Focal-Statistics_Neighborhood_tag8@@": "Typ Nieregularny umożliwia określenie sąsiedztwa o nieregularnym kształcie wokół przetwarzanej komórki. Tabela Wartości w sąsiedztwie umożliwia zdefiniowanie kształtu skupienia sąsiedztwa. Położenie komórki o wartości 0 wskazuje, że komórka nie jest częścią sąsiedztwa i nie będzie używana na potrzeby przetwarzania. Wartość 1 wskazuje, że odpowiednia komórka (i wartość) jest członkiem sąsiedztwa.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "Typ Waga sąsiedztwa jest podobny do typu nieregularnego, ponieważ zezwala na definiowanie nieregularnego sąsiedztwa wokół przetwarzanej komórki i dodatkowo zezwala na stosowanie wag do wartości wejściowych. Wartości w skupieniu wag określają, które położenia komórek powinny zostać uwzględnione w sąsiedztwie i wagi, przez jakie będzie wykonywane mnożenie. Użycie wartości 0 umożliwia wykluczenie komórki z przetwarzania. Jako wag można użyć wartości dodatnich, ujemnych i dziesiętnych. W typie sąsiedztwa Waga obsługiwane są tylko statystyki Średnia, Odchylenie standardowe i Suma.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Oznacza, który percentyl ma zostać obliczony po wybraniu opcji <strong>Percentyl</strong> jako typu statystyki. Wartość domyślna to 90 oznaczająca 90. percentyl.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "Wartości należą do zakresu od 0 do 100. Zerowy percentyl jest właściwie równoważny statystyce Minimum, a setny percentyl odpowiada statystyce Maksimum, z takim wyjątkiem, że wynik będzie liczbą zmiennoprzecinkową. Wartość 50 da praktycznie taki sam wynik jak statystyka Mediana.",
	"@@Focal-Statistics_Raster_tag0@@": "Wymagany raster wejściowy.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "Typ statystyki do obliczenia.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Większość</strong> — umożliwia obliczenie większości (wartości występującej najczęściej) komórek w sąsiedztwie.",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Maksimum</strong> — umożliwia obliczenie maksymalnej liczby (największej wartości) komórek w sąsiedztwie.",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Średnia</strong> — umożliwia obliczenie średniej liczby (wartości średniej) komórek w sąsiedztwie.",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Mediana</strong> — umożliwia obliczenie mediany komórek w sąsiedztwie.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Minimum</strong> — umożliwia obliczenie minimalnej liczby (najmniejszej wartości) komórek w sąsiedztwie.",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Mniejszość</strong> — umożliwia obliczenie mniejszości (wartości występującej najrzadziej) komórek w sąsiedztwie.",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Percentyl</strong> — umożliwia obliczenie percentyla komórek w sąsiedztwie. Percentyl, który ma zostać obliczony, można określić za pomocą parametru <strong>Wartość percentylowa</strong>.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Zakres</strong> — umożliwia obliczenie zakresu (różnicy między największą i najmniejszą wartością) komórek w sąsiedztwie.",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Odchylenie standardowe</strong> — umożliwia obliczenie odchylenia standardowego komórek w sąsiedztwie.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Suma</strong> — umożliwia obliczenie sumy (łącznej sumy wszystkich wartości) komórek w sąsiedztwie.",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Zróżnicowanie</strong> — umożliwia obliczenie zróżnicowania (liczby wartości unikalnych) komórek w sąsiedztwie.",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Jeśli raster wejściowy jest zmiennoprzecinkowy, dostępne są tyko następujące typy statystyki: Średnia, Maksimum, Mediana, Minimum, Percentyl, Zakres, Odchylenie standardowe i Suma.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "W przypadku typów Średnia, Mediana, Percentyl i Odchylenie standardowe dane wynikowe są zawsze zmiennoprzecinkowe.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "Domyślnym typem statystyki jest Średnia.",
	"@@Geometric_Constant-Z_tag0@@": "Podaj stałą wysokość na potrzeby funkcji Geometryzacja.",
	"@@Geometric_DEM_tag0@@": "Podaj model DEM na potrzeby funkcji Geometryzacja. Modelu DEM zawartego w zestawie danych mozaiki można użyć jako zestawu danych rastrowych lub jako zestawu danych mozaiki z danymi wynikowymi DEM.",
	"@@Geometric_Geoid_tag0@@": "Większość zestawów danych wysokości, takich jak USGS NED lub ArcGIS Online World Elevation, zawiera dane wysokości ortometrycznej, konieczne jest zatem wybranie korekty geoidalnej w celu zapewnienia kompatybilności z RPC satelitów, które wymagają określenia wysokości elipsoidalnej. Aby zastosować korektę geoidalną (EGM96) do wartości z, należy zaznaczyć pole <strong>Geoida</strong>. Wyjątkiem jest sytuacja, w której w modelu DEM już zastosowano wysokość elipsoidalną.",
	"@@Geometric_Method_tag0@@": "Wybierz metodę wyznaczania wysokości dla funkcji Geometryzacja:",
	"@@Geometric_Method_tag1@@": "Użyj stałej Z — określ stałą wysokość na potrzeby wykonywania funkcji Geometryzacja.",
	"@@Geometric_Method_tag2@@": "Użyj DEM — określ model DEM na potrzeby wykonywania funkcji Geometryzacja.",
	"@@Geometric_Raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@Geometric_Z-Factor_tag0@@": "Współczynniki RPC dla satelitów są skalowane na potrzeby zestawów danych, w których jednostkami wyrażającymi wysokość są metry. Jeśli wysokość jest wyrażana w innych jednostkach, należy wprowadzić <strong>współczynnik Z</strong> w celu ich przeliczenia na metry. Przykład: jeśli jednostkami wysokości są stopy, wówczas na potrzeby konwersji jednostek wysokości ze stóp na metry należy użyć współczynnika o wartości 0,3048.",
	"@@Geometric_Z-Offset_tag0@@": "Wartość bazowa dodawana do wartości wysokości w DEM. Opcja ta może zostać użyta jako przesunięcie wartości wysokości, które nie są liczone od poziomu morza.",
	"@@Geometric_Tolerance_tag0@@": "Podaj maksymalny tolerowany błąd funkcji geometrycznej, określony w liczbie pikseli. Wartość domyślna dla typu rastra NITF (NCDRD) wynosi dwa.",
	"@@Grayscale_Raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@Grayscale_Conversion-Parameters_tag0@@": "Wagi dla poszczególnych pasm składających się na raster wejściowy.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Greater-Than_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Greater-Than_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Greater-Than_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Greater-Than_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Greater-Than_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Greater-Than_Raster_tag0@@": "Testowane dane wejściowe w celu określenia, czy są one większe niż drugie dane wejściowe.",
	"@@Greater-Than_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Greater-Than_Raster2_tag0@@": "Dane wejściowe, względem których są testowane pierwsze dane wejściowe pod kątem ich większości.",
	"@@Greater-Than_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Greater-Than-Equal_Raster_tag0@@": "Testowane dane wejściowe w celu określenia, czy są one większe lub równe drugim danym wejściowym.",
	"@@Greater-Than-Equal_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "Dane wejściowe, względem których są testowane pierwsze dane wejściowe pod kątem ich większości lub równej wartości.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "Jednostka miary powiązana z rastrem wynikowym. Dostępne jednostki danych wynikowych to stopnie Celsjusza, Fahrenheita i Kelwina.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "Raster z pojedynczym pasmem, w którym wartości pikseli reprezentują wilgotność względną w postaci wartości procentowej z zakresu od 0 do 100.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "Raster z pojedynczym pasmem, w którym wartości pikseli reprezentują temperaturę powietrza w otoczeniu.",
	"@@Heat-Index_Temperature-Units_tag0@@": "Jednostka miary powiązana z wejściowym rastrem temperatur. Dostępne jednostki danych wejściowych to stopnie Celsjusza, Fahrenheita i Kelwina.",
	"@@Hillshade_Altitude_tag0@@": "Wysokość określa kąt opisujący położenie słońca nad horyzontem i może zawierać się w przedziale od 0 do 90 stopni. Wartość 0 stopni oznacza, że słońce znajduje się na horyzoncie, czyli na tej samej płaszczyźnie poziomej, co struktura odniesienia. Wartość 90 stopni oznacza natomiast, że słońce znajduje się bezpośrednio nad płaszczyzną.",
	"@@Hillshade_Altitude_tag1@@": "Ten parametr jest prawidłowy tylko wtedy, gdy <strong>Typ cieniowania rzeźby terenu</strong> ma wartość <strong>Tradycyjne</strong>. Wartość domyślna to 45 stopni nad horyzontem.",
	"@@Hillshade_Azimuth_tag0@@": "Azymut określa względne położenie słońca na horyzoncie (w stopniach). Położenie to jest określane przez kąt między położeniem słońca a północą, mierzony zgodnie z ruchem wskazówek zegara. Azymut o wartości 0 stopni oznacza północ, 90 stopni — wschód, 180 stopni — południe, a 270 stopni — zachód.",
	"@@Hillshade_Azimuth_tag1@@": "Ten parametr jest prawidłowy tylko wtedy, gdy <strong>Typ cieniowania rzeźby terenu</strong> ma wartość <strong>Tradycyjne</strong>. Wartość domyślna to 315 stopni wskazująca na północny zachód.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "Dzięki użyciu tej opcji możliwe jest uniknięcie artefaktów, które mogą pojawić się przy krawędziach rastra podczas ponownego próbkowania. Piksele wynikowe znajdujące się wzdłuż krawędzi rastra lub obok pikseli o wartości NoData zostaną zastąpione wartościami NoData. Z tego powodu zaleca się używanie tego parametru jedynie z nakładającymi się zestawami danych mozaiki dotyczącymi wysokości. Jeśli istnieją piksele nakładające się, w obszarach niezawierających danych zamiast pustych pikseli wyświetlą się wartości nakładających się pikseli.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Niezaznaczone — dwuliniowe ponowne próbkowanie zostanie zastosowane jednakowo podczas ponownego próbkowania cieniowania rzeźby terenu. Użyj tej opcji, kiedy zestaw danych mozaiki zawierający dane rastra wysokości jest przyłączony na styk. Jest to opcja domyślna.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Zaznaczone — dwuliniowe ponowne próbkowanie zostanie zastosowane do cieniowania rzeźby terenu, z wyjątkiem miejsc wzdłuż krawędzi rastrów lub obok pikseli o wartości NoData. Te piksele zostaną wypełnione wartościami NoData i zostaną wyświetlone wartości nakładających się pikseli. Dzięki temu ulegają zmniejszeniu efekty ostrych krawędzi, które mogą wystąpić w przeciwnym razie. Użyj tej opcji, kiedy zestaw danych mozaiki zawierający dane rastra wysokości składa się z nakładających się elementów lub kafli.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "Wyniki funkcji mogą zależeć od danych. Jeśli w swoich danych wynikowych zaobserwujesz artefakty graniczne, wybierz alternatywny stan tego pola wyboru.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Kontroluje źródło oświetlenia cieniowania rzeźby terenu:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Tradycyjne — oblicza cieniowanie rzeźby terenu na podstawie pojedynczego kierunku oświetlenia. Jest to opcja domyślna. W celu kontrolowania lokalizacji źródła światła można skonfigurować wartości <strong>Azymut</strong> i <strong>Wysokość</strong>.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Wielokierunkowe — łączy światło z wielu źródeł w celu zaprezentowania rozszerzonej wizualizacji terenu.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "Współczynnik rozmiaru pikseli uwzględnia zmiany skali podczas powiększania i pomniejszania mapy przez wyświetlającego. Określa on tempo, z jakim zmienia się <strong>Współczynnik Z</strong>.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Ten parametr jest prawidłowy tylko wtedy, gdy typ <strong>Skalowanie</strong> ma wartość <strong>Dostosowane</strong>. Wartość domyślna wynosi 0,024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "Potęga rozmiaru pikseli uwzględnia zmiany wysokości (lub skali) podczas powiększania i pomniejszania mapy przez wyświetlającego. Jest to wykładnik stosowany do rozmiaru pikseli w równaniu określającym tempo, z jakim zmienia się <strong>Współczynnik Z</strong>, aby uniknąć istotnej utraty dokładności w odwzorowaniu rzeźby terenu.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Ten parametr jest prawidłowy tylko wtedy, gdy typ <strong>Skalowanie</strong> ma wartość <strong>Dostosowane</strong>. Wartość domyślna wynosi 0,664.",
	"@@Hillshade_Raster_tag0@@": "Wejściowy zestaw danych wysokościowych.",
	"@@Hillshade_Scaling_tag0@@": "Wynikowe cieniowanie jest skalowane dynamicznie przez zmianę współczynnika Z przy użyciu jednej z dwóch następujących opcji:",
	"@@Hillshade_Scaling_tag1@@": "Dostosowane — powoduje zastosowanie modyfikacji nieliniowej z użyciem domyślnych wartości <strong>Potęga rozmiaru pikseli</strong> i <strong>Współczynnik rozmiaru pikseli</strong>, które uwzględniają szeroki zakres zmian wysokości (skali) podczas powiększania i pomniejszania obrazu. Skonfigurowanie parametru <strong>Dostosowane</strong> jest zalecane w przypadku korzystania z zestawów danych dotyczących świata.",
	"@@Hillshade_Scaling_tag8@@": "Brak — brak skalowania. Jest to zalecane rozwiązanie w przypadku pojedynczego zestawu danych rastrowych pokrywającego obszar lokalny. Nie jest ono natomiast zalecane w odniesieniu do zestawów danych dotyczących świata, w których występują duże różnice w wysokości, ani map wieloskalowych, ponieważ powoduje wygenerowanie rzeźby terenu, która jest spłaszczona w małej skali.",
	"@@Hillshade_Z-Factor_tag0@@": "Współczynnik z to współczynnik skalowania używany do konwertowania wartości wysokości w celu:",
	"@@Hillshade_Z-Factor_tag1@@": "Konwersji jednostek wysokości (takich jak metry lub stopy) na poziome jednostki współrzędnych zbioru danych, takie jak stopy, metry lub stopnie.",
	"@@Hillshade_Z-Factor_tag2@@": "Dodania pionowego wyniesienia dla efektu wizualnego.",
	"@@Int_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Int_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Int_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Int_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Int_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Int_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Int_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Int_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Int_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Int_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Int_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Int_Raster_tag0@@": "Raster wejściowy, który ma zostać przekształcony w liczbę całkowitą.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "Wielkość komórki rastra wynikowego zostanie wykryta automatycznie. To zachowanie można jednak zmienić. Choć wielkość komórki można zmienić, zasięg zestawu danych rastrowych pozostanie taki sam.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "Dane punktów wejściowych.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Dla tej funkcji dostępne są cztery metody przepróbkowania:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Ważone odwrotności odległości</strong> — określa wartości komórek na podstawie kombinacji zestawu punktów lub komórek próbek ważonych liniowo. Ważenie jest funkcją odwrotności odległości od znanych punktów lub komórek.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>Pokrywanie liniowe</strong> — za pomocą trójkątnej, nieregularnej sieci rozchodzącej się ze środka każdej komórki w nieregularnym rastrze interpoluje powierzchnię, która jest następnie konwertowana na regularny raster.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Naturalne sąsiedztwo</strong> — znajduje podzestaw wejściowych danych próbek znajdujący się najbliżej punktu zapytania i nadaje im wagi na podstawie obszarów proporcjonalnych w celu interpolacji wartości.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Najbliższy sąsiad</strong> — oblicza wartość piksela przy użyciu najbliższego piksela. Jeśli nie istnieje piksel źródłowy, w danych wynikowych nie można utworzyć żadnego nowego piksela. Jest to opcja domyślna.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Określa liczbę pikseli uwzględnianych na potrzeby wybranej metody ponownego próbkowania. Wartość domyślna wynosi ${3} piksele.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Wybranie klasy obiektów punktowych jako danych wejściowych powoduje konieczność zidentyfikowania pola w tabeli atrybutów za pomocą wartości punktów.",
	"@@Is-Null_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Is-Null_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Is-Null_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Is-Null_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Is-Null_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Is-Null_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Is-Null_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Is-Null_Raster_tag0@@": "Raster wejściowy testowany w celu zidentyfikowania komórek mających wartość ${NoData} (null).",
	"@@Is-Null_Raster_tag1@@": "Dane wejściowe mogą być typu całkowitoliczbowego lub zmiennoprzecinkowego.",
	"@@Key-Metadata_Band-Names_tag0@@": "Ta metoda jest używana w celu zastąpienia nazw pasm rastra. Jest to ciąg znakowy rozdzielany przecinkami reprezentujący zaktualizowane nazwy pasm.",
	"@@Key-Metadata_Band-Names_tag1@@": "Ten parametr jest opcjonalny.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "Kluczowe metadane, które mają zostać wstrzyknięte do rastra wychodzącego opisanego jako ciąg znakowy w formacie JSON, reprezentujące zbiór par klucz-wartość. Poniżej przedstawiono przykładowy ciąg znakowy JSON, którego można użyć jako danych wejściowych tej funkcji. Wszystkie dane wejściowe dla tego parametru powinny być w takim samym formacie.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "Ciąg znakowy JSON reprezentujący kluczowe metadane",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Niebieski\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Zielony\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "Nazwa kluczowej właściwości na poziomie zestawu danych, która ma zostać zastąpiona.",
	"@@Key-Metadata_Raster_tag0@@": "Raster lub zestaw danych mozaiki zawierający kluczowe metadane, które mają zostać wstawione bądź zastąpione.",
	"@@Key-Metadata_Value_tag0@@": "Wartość zastępująca kluczową właściwość na poziomie zestawu danych, która ma zostać ustawiona.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Ten parametr symuluje wzrost wysiłku potrzebnego do przezwyciężenia kosztów w miarę wzrostu akumulowanego kosztu. Służy do modelowania zmęczenia podróżującej osoby. Rosnący akumulowany koszt dotarcia do komórki jest mnożony przez współczynnik oporu i dodawany do kosztu ruchu do kolejnej komórki.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "Jest to zmodyfikowana wersja wzoru na stopę procentu składanego służąca do obliczania oczywistego kosztu poruszania się przez komórkę. Wraz ze wzrostem współczynnika oporu rośnie koszt komórek odwiedzanych później. Im wyższy współczynnik oporu, tym większy koszt dotarcia do kolejnej komórki, który nakłada się na koszt każdego kolejnego ruchu. Ponieważ współczynnik oporu jest podobny do procentu składanego i wartości akumulowanego kosztu są zazwyczaj bardzo duże, zaleca się stosowanie niskich wartości tego współczynnika, np. 0,005 lub jeszcze niższych, w zależności od wartości akumulowanego kosztu.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Definiuje pojemność kosztową osoby podróżującej dla danego źródła. Obliczenia kosztów są kontynuowane dla każdego źródła do momentu osiągnięcia określonej pojemności.",
	"@@Least-Cost-Path_Capacity_tag1@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "Wymagany raster wejściowy definiujący koszt (impedancję) ruchu planimetrycznego między poszczególnymi komórkami. Wartość w każdej lokalizacji komórki reprezentuje odległość kosztu na jednostkę na potrzeby poruszania się przez tę komórkę. Wartość każdej lokalizacji komórki jest mnożona przez rozdzielczość komórki, a jednocześnie następuje kompensacja ruchu ukośnego, aby uzyskać łączny koszt poruszania się przez komórkę.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "Wartości <strong>rastra kosztów</strong> mogą być całkowitoliczbowe lub zmiennoprzecinkowe, ale nie mogą być ujemne ani równe zero.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "Pole służące do uzyskiwania wartości dla lokalizacji docelowych.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "Wymagany raster wejściowy identyfikujący piksele, na podstawie których jest określana ścieżka o najmniejszym koszcie do najmniej kosztownego źródła. Te dane wejściowe składają się z pikseli mających prawidłowe wartości. Pozostałe piksele muszą mieć przypisaną wartość ${NoData}. Wartości 0 są prawidłowe.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "Próg, którego nie mogą przekroczyć wartości akumulowanego kosztu. Jeśli odległość akumulowanego kosztu przekroczy tę wartość, wartością wynikową lokalizacji komórki będzie ${NoData}. Maksymalna odległość definiuje zasięg, dla którego są obliczane odległości akumulowanego kosztu. Domyślna odległość to zasięg rastra wynikowego.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Ten parametr umożliwia sterowanie trybem podróżowania lub wielkością w źródle. Im wyższy mnożnik, tym większy koszt ruchu przez każdą komórkę.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "Wartości muszą być większe niż zero. Domyślna wartość to 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Słowo kluczowe definiujące sposób interpretowania wartości i stref w wejściowych danych określających miejsca docelowe przy obliczaniu kosztu ścieżki:",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Najlepsza pojedyncza</strong> — dla wszystkich pikseli w wejściowych danych określających miejsca docelowe jako ścieżka o najniższym koszcie jest wybierana ścieżka od piksela odpowiadającego minimum najmniejszych wartości kosztu ścieżek do komórek źródłowych.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Każda komórka</strong> — ścieżka o najniższym koszcie jest wyznaczana dla każdego piksela mającego prawidłową wartość wejściowych danych określających miejsca docelowe i jest zapisywana w rastrze wynikowym. Każda komórka w wejściowych danych określających miejsca docelowe jest traktowana oddzielnie, a ścieżka o najniższym koszcie jest określana dla każdej komórki początkowej.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Każda strefa</strong> — ścieżka o najniższym koszcie jest wyznaczana dla każdej strefy wejściowych danych określających miejsca docelowe i jest zapisywana w rastrze wynikowym. Ścieżka o najniższym koszcie dla każdej strefy rozpoczyna się w pikselu o najniższym koszcie odległości w strefie.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Jest to wymagany raster wejściowy identyfikujący komórki lub lokalizacje, z których jest obliczana odległość o najmniejszym akumulowanym koszcie dla każdej lokalizacji komórki wynikowej.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "Początkowy koszt, od którego będą rozpoczynane obliczenia kosztów. Ten parametr pozwala określić stały koszt powiązany ze źródłem. Zamiast rozpoczynać od kosztu równego 0, algorytm kosztu rozpocznie od podanej wartości.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "Wartość musi wynosić zero lub więcej. Domyślna wartość to 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Definiuje kierunek osoby podróżującej podczas stosowania źródłowego współczynnika oporu i początkowego kosztu dla źródła.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>Ze źródła</strong> — źródłowy współczynnik oporu i początkowy koszt zostaną zastosowane, począwszy od wejściowego źródła przy ruchu w kierunku komórek innych niż źródłowe. Jest to opcja domyślna.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>Do źródła</strong> — źródłowy współczynnik oporu i początkowy koszt zostaną zastosowane, począwszy od każdej komórki innej niż źródłowa przy ruchu w kierunku wejściowego źródła.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Podaj słowo kluczowe <strong>Ze źródła</strong> lub <strong>Do źródła</strong>, które zostanie zastosowane do wszystkich źródeł lub podaj pole w <strong>rastrze źródłowym</strong> zawierające słowa kluczowe identyfikujące kierunek podróżowania dla każdego źródła. To pole musi zawierać ciąg znakowy ${FROM_SOURCE} lub ${TO_SOURCE}.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Less-Than_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Less-Than_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Less-Than_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Less-Than_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Less-Than_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Less-Than_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Less-Than_Raster_tag0@@": "Testowane dane wejściowe w celu określenia, czy są one mniejsze niż drugie dane wejściowe.",
	"@@Less-Than_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Less-Than_Raster2_tag0@@": "Dane wejściowe, względem których są testowane pierwsze dane wejściowe pod kątem ich mniejszości.",
	"@@Less-Than_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Less-Than-Equal_Raster_tag0@@": "Testowane dane wejściowe w celu określenia, czy są one mniejsze lub równe drugim danym wejściowym.",
	"@@Less-Than-Equal_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Less-Than-Equal_Raster2_tag0@@": "Dane wejściowe, względem których są testowane pierwsze dane wejściowe pod kątem ich mniejszości lub równej wartości.",
	"@@Less-Than-Equal_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Ln_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Ln_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Ln_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Ln_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Ln_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Ln_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Ln_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Ln_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Ln_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Ln_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Ln_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Ln_Raster_tag0@@": "Wartości wejściowe, dla których jest znajdywany logarytm naturalny (Ln).",
	"@@Log10_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Log10_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Log10_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Log10_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Log10_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Log10_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Log10_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Log10_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Log10_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Log10_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Log10_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Log10_Raster_tag0@@": "Wartości wejściowe, dla których jest znajdywany logarytm o podstawie 10.",
	"@@Log2_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Log2_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Log2_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Log2_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Log2_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Log2_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Log2_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Log2_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Log2_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Log2_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Log2_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Log2_Raster_tag0@@": "Wartości wejściowe, dla których jest znajdywany logarytm o podstawie 2.",
	"@@Lookup_Field_tag0@@": "Pole zawierające pożądane wartości nowego rastra.",
	"@@Lookup_Field_tag1@@": "Musi być typu liczbowego.",
	"@@Lookup_Raster_tag0@@": "Raster wejściowy, który zawiera pole, na podstawie którego ma zostać utworzony nowy raster.",
	"@@Lookup_Raster_tag1@@": "Może być typu całkowitoliczbowego lub zmiennoprzecinkowego.",
	"@@Mask_Included-Ranges_tag0@@": "Dołączone zakresy można określić dla każdego pasma, podając wartość minimalną i maksymalną. Każda wartość leżąca poza tym zakresem będzie wartością ${NoData}. Piksel zostanie dołączony, jeśli jego wartość będzie się mieścić w dowolnym z podanych zakresów. W ten sposób, jeśli pasmo 1 ma zakres 5–10, pasmo 2 ma zakres 15–20, a wartością piksela dla pasma 1 jest 8, wówczas ten piksel nie będzie maskowany.",
	"@@Mask_NoData-Interpretation_tag0@@": "Odnosi się to do sposobu, w jaki <strong>wartości ${NoData}</strong> wpływają na obraz wynikowy.",
	"@@Mask_NoData-Interpretation_tag3@@": "Można wybrać jedną z dwóch następujących opcji:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Dopasuj wszystkie</strong> — wartości ${NoData} podane dla każdego pasma muszą występować dla tych samych pikseli, aby obraz wynikowy zawierał piksele z wartościami ${NoData}.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Dopasuj dowolne</strong> — jeśli podana wartość ${NoData} występuje dla piksela w określonym paśmie, wówczas ten piksel w obrazie wynikowym będzie miał wartość ${NoData}. Jest to opcja domyślna.",
	"@@Mask_NoData-Values_tag0@@": "Wartości NoData można określić dla każdego pasma. Można określić kilka wartości, wprowadzając rozdzielaną spacjami listę.",
	"@@Mask_Raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@Minus_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Minus_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Minus_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Minus_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Minus_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Minus_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Minus_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Minus_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Minus_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Minus_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Minus_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Minus_Raster_tag0@@": "Dane wejściowe, z których mają zostać odjęte wartości drugich danych wejściowych.",
	"@@Minus_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Minus_Raster2_tag0@@": "Wartości wejściowe, które mają zostać odjęte od wartości pierwszych danych wejściowych.",
	"@@Minus_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@ML-Classify_Raster_tag0@@": "Raster wejściowy, który ma zostać sklasyfikowany za pomocą algorytmu klasyfikacji na podstawie maksymalnego prawdopodobieństwa.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "Plik ${.gsg} podpisu.",
	"@@Mod_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Mod_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Mod_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Mod_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Mod_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Mod_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Mod_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Mod_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Mod_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Mod_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Mod_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Mod_Raster_tag0@@": "Dane wejściowe licznika.",
	"@@Mod_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Mod_Raster2_tag0@@": "Dane wejściowe mianownika.",
	"@@Mod_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Umożliwia rozwiązanie konfliktu powstającego w przypadku istnienia części co najmniej dwóch nakładających się obrazów. Dostępne są między innymi następujące opcje:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Zlewanie</strong> — oblicza i wyświetla średnią nakładających się pikseli przez przesunięcie wagi na korzyść pikseli znajdujących się bliżej sąsiadujących obrazów, dzięki czemu wynikowy obraz jest bardziej gładki. Jest to opcja domyślna.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>Pierwszy</strong> — wyświetla piksele z pierwszego obrazu na liście obrazów nakładających się na danym obszarze.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Ostatni</strong> — wyświetla piksele z ostatniego obrazu na liście obrazów nakładających się na danym obszarze.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Maksimum</strong> — wyświetla piksel o najwyższej wartości ze wszystkich nakładających się warstw. W przypadku zastosowania tej opcji nie ma gwarancji, że na nakładającym się obszarze będą wyświetlane piksele należące tylko do jednego obrazu. Bardziej prawdopodobne jest wyświetlenie kombinacji wszystkich potencjalnych warstw.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Średnia</strong> — oblicza i wyświetla średnią z nakładających się pikseli.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Minimum</strong> — wyświetla piksel o najniższej wartości ze wszystkich nakładających się warstw. W przypadku zastosowania tej opcji nie ma gwarancji, że na nakładającym się obszarze będą wyświetlane piksele należące tylko do jednego obrazu. Bardziej prawdopodobne jest wyświetlenie kombinacji wszystkich potencjalnych warstw.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Wybierz rastry, które powinny razem utworzyć mozaikę w celu uformowania jednego obrazu.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Określa identyfikator pasma reprezentujący bliską podczerwień w widmie fal elektromagnetycznych.",
	"@@NDVI_Raster_tag0@@": "Wejściowy raster wielospektralny.",
	"@@NDVI_Scientific-Output_tag0@@": "Wartości wynikowe będą mieścić się w zakresie od -1,0 do 1,0. Jest to zakres używany w wielu zastosowaniach naukowych.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Określa identyfikator pasma reprezentujący czerwoną część widma fal elektromagnetycznych.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Z listy rozwijanej wybierz wstępnie zdefiniowaną skalę barw.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Wybierz typ skali barw, za pomocą którego mają zostać pokolorowane dane wynikowe NDVI:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Mapa kolorów — z listy rozwijanej wybierz wstępnie zdefiniowaną mapę kolorów. Alternatywnie można użyć istniejącego pliku mapy kolorów.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Skala barw — z listy rozwijanej wybierz wstępnie zdefiniowaną skalę barw.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Z listy rozwijanej wybierz wstępnie zdefiniowaną mapę kolorów. Alternatywnie można użyć istniejącego pliku mapy kolorów.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Określa identyfikator pasma reprezentujący bliską podczerwień w widmie fal elektromagnetycznych.",
	"@@NDVI-Colorized_Raster_tag0@@": "Wejściowy raster wielospektralny.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "Wartości wynikowe będą mieścić się w zakresie od -1,0 do 1,0. Jest to zakres używany w wielu zastosowaniach naukowych.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Określa identyfikator pasma reprezentujący czerwoną część widma fal elektromagnetycznych.",
	"@@Negate_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Negate_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Negate_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Negate_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Negate_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Negate_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Negate_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Negate_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Negate_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Negate_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Negate_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Negate_Raster_tag0@@": "Raster wejściowy, który ma zostać zanegowany (pomnożony przez -1).",
	"@@Nibble_Mask-Raster_tag0@@": "Wymagany raster wejściowy używany jako maska.",
	"@@Nibble_Mask-Raster_tag1@@": "Komórki o wartości NoData zostaną zastąpione najbliższym sąsiadem w <strong>rastrze</strong> wejściowym.",
	"@@Nibble_Mask-Raster_tag4@@": "Raster maski może być typu całkowitoliczbowego lub zmiennoprzecinkowego.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Definiuje, czy komórki o wartości NoData w rastrze wejściowym pozostaną komórkami o wartości NoData w rastrze wynikowym.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>Nie</strong> — określa, że komórki o wartości NoData w rastrze wejściowym pozostaną komórkami o wartości NoData w danych wynikowych. Jest to opcja domyślna.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Tak</strong> — określa, że komórki o wartości NoData w rastrze wejściowym i w masce mogą być zastępowane najbliższym sąsiadem, aby uzyskać prawidłowe wartości komórek wynikowych.",
	"@@Nibble_Raster_tag0@@": "Wymagany raster wejściowy, który zostanie zastąpiony najbliższym sąsiadem.",
	"@@Nibble_Raster_tag1@@": "Raster wejściowy może być typu całkowitoliczbowego lub zmiennoprzecinkowego.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Definiuje, czy wartości ${NoData} w rastrze wejściowym mogą być zastępowane najbliższym sąsiadem w obszarze zdefiniowanym przez raster maski.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Tak</strong> — określa, że wartość najbliższego sąsiada zostanie użyta bez względu na to, czy jest to wartość ${NoData}, czy inna wartość danych w rastrze wejściowym. Wartości ${NoData} w rastrze wejściowym mogą być zastępowane najbliższym sąsiadem w obszarach zdefiniowanych w masce, jeśli są one najbliższymi sąsiadami. Jest to opcja domyślna.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>Nie</strong> — określa, że wartości danych mogą być zastępowane najbliższym sąsiadem tylko w obszarach zdefiniowanych w rastrze maski. Wartości ${NoData} w rastrze wejściowym nie mogą być zastępowane najbliższym sąsiadem w obszarach zdefiniowanych w rastrze maski, nawet jeśli są one najbliższymi sąsiadami.",
	"@@Nibble_Zone-Raster_tag0@@": "Wejściowy raster strefy.",
	"@@Nibble_Zone-Raster_tag1@@": "Strefa to wszystkie komórki w rastrze, które mają tę samą wartość, niezależnie od tego, czy są to komórki ciągłe. Wejściowa warstwa strefy definiuje kształt, wartości i lokalizacje stref. Raster strefy może być liczbą całkowitą lub zmiennoprzecinkową.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Not-Equal_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Not-Equal_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Not-Equal_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Not-Equal_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Not-Equal_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Not-Equal_Raster_tag0@@": "Dane wejściowe, które zostaną porównane pod kątem nierówności z drugimi danymi wejściowymi.",
	"@@Not-Equal_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Not-Equal_Raster2_tag0@@": "Dane wejściowe, które zostaną porównane z pierwszymi danymi wejściowymi pod kątem nierówności.",
	"@@Not-Equal_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Pansharpening_Multispectral_tag0@@": "Raster wielospektralny, który ma zostać wyostrzony za pomocą pasma panchromatycznego.",
	"@@Pansharpening_Panchromatic_tag0@@": "Raster o pojedynczym paśmie i wysokiej rozdzielczości, który zostanie użyty do wyostrzania panchromatycznego rastra wielospektralnego o niższej rozdzielczości.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Wybierz algorytm wyostrzenia panchromatycznego, który chcesz zastosować.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey — użycie algorytmu Brovey opartego na modelowaniu widmowym w celu przeprowadzenia fuzji danych.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri — użycie algorytmu Esri opartego na modelowaniu spektralnym w celu przeprowadzenia fuzji danych.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram-Schmidt — użycie algorytmu wyostrzania spektralnego Gram-Schmidt w celu wyostrzenia danych wielospektralnych.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS — użycie przestrzeni kolorów IHS (Intensity — intensywność, Hue — kolor i Saturation — nasycenie) w celu przeprowadzenia fuzji danych.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Średnia — użycie uśrednionej wartości kolorów czerwonego, zielonego i niebieskiego oraz wartości piksela panchromatycznego.",
	"@@Pansharpening_Weights_tag0@@": "Należy określić wagi dla pasm czerwonego, zielonego, niebieskiego i podczerwieni. Wszystkie wartości powinny mieścić się w zakresie od 0 do 1.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Ten parametr symuluje wzrost wysiłku potrzebnego do przezwyciężenia kosztów w miarę wzrostu akumulowanego kosztu. Służy do modelowania zmęczenia podróżującej osoby. Rosnący akumulowany koszt dotarcia do komórki jest mnożony przez współczynnik oporu i dodawany do kosztu ruchu do kolejnej komórki.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Jest to zmodyfikowana wersja wzoru na stopę procentu składanego służąca do obliczania oczywistego kosztu poruszania się przez komórkę. Wraz ze wzrostem współczynnika oporu rośnie koszt komórek odwiedzanych później. Im wyższy współczynnik oporu, tym większy koszt dotarcia do kolejnej komórki, który nakłada się na koszt każdego kolejnego ruchu. Ponieważ współczynnik oporu jest podobny do procentu składanego i wartości akumulowanego kosztu są zazwyczaj bardzo duże, zaleca się stosowanie niskich wartości tego współczynnika, np. 0,005 lub jeszcze niższych, w zależności od wartości akumulowanego kosztu.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Path-Distance_Capacity_tag0@@": "Definiuje pojemność kosztową osoby podróżującej dla danego źródła. Obliczenia kosztów są kontynuowane dla każdego źródła do momentu osiągnięcia określonej pojemności.",
	"@@Path-Distance_Capacity_tag1@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Path-Distance_Cost-Raster_tag0@@": "Wymagany raster wejściowy definiujący koszt (impedancję) ruchu planimetrycznego między poszczególnymi komórkami. Wartość w każdej lokalizacji komórki reprezentuje odległość kosztu na jednostkę na potrzeby poruszania się przez tę komórkę. Wartość każdej lokalizacji komórki jest mnożona przez rozdzielczość komórki, a jednocześnie następuje kompensacja ruchu ukośnego, aby uzyskać łączny koszt poruszania się przez komórkę.",
	"@@Path-Distance_Cost-Raster_tag1@@": "Wartości <strong>rastra kosztów</strong> mogą być całkowitoliczbowe lub zmiennoprzecinkowe, ale nie mogą być ujemne ani równe zero.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Definiuje relację między poziomym składnikiem kosztu i poziomym względnym kątem ruchu (HRMA).</p><p>Istnieje kilka składników z modyfikatorami, które identyfikują wykres składnika pionowego. Dodatkowo można użyć tabeli do utworzenia wykresu niestandardowego. Wykresy służą do określania składnika pionowego używanego do obliczania łącznego kosztu przemieszczenia się do sąsiedniej komórki.</p><p>W poniższym wyjaśnieniu używane są dwa akronimy: HF i HRMA. HF oznacza składnik poziomy (Horizontal Factor), który definiuje trudności napotkane przy ruchu w poziomie podczas przemieszczania się z jednej komórki do komórki następnej. HRMA oznacza poziomy względny kąt ruchu (Horizontal Relative Moving Angle), który określa kąt między kierunkiem poziomym z komórki i kierunkiem ruchu.</p><p>Dostępne są następujące typy <strong>Składnika poziomego</strong>:</p><ul><li><strong>Binarny</strong> — wskazuje, że jeśli kąt HRMA jest mniejszy niż kąt odcinania, składnik HF jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. W przeciwnym razie jest dla niego ustawiana nieskończoność.</li><li><strong>Do przodu</strong> — określa, że dozwolony jest wyłącznie ruch do przodu. Kąt HRMA musi być większy lub równy 0 i mniejszy niż 90 stopni (0 &lt;= HRMA &lt; 90). Jeśli kąt HRMA jest większy niż 0 i mniejszy niż 45 stopni, składnik HF dla komórki jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. Jeśli kąt HRMA jest większy niż 45 stopni lub jest równy tej wartości, używana jest wartość modyfikatora wartości pobocznej. W przypadku kąta HRMA o wartości większej lub równej 90 stopni składnik HF jest skonfigurowany na nieskończoność.</li><li><strong>Liniowa</strong> — określa, że składnik HF jest funkcją linową kąta HRMA.</li><li><strong>Liniowa odwrotna</strong> — określa, że składnik HF jest odwrotną funkcją liniową kąta HRMA.</li><li><strong>Tabela</strong> — określa, że do zdefiniowania wykresu składnika poziomego używanego do określania składników HF zostanie użyty plik tabeli.</li></ul><p>Do modyfikatorów składników poziomych należą:</p><ul><li><strong>Składnik o wartości zerowej</strong> — składnik poziomy, który ma być używany, gdy kąt HRMA ma wartość zero. Ten składnik ustawia pozycję przecięcia osi y dla wszystkich funkcji składnika poziomego.</li><li><strong>Kąt odcinania</strong> — definiuje kąt HRMA, po którego przekroczeniu jako wartość składnika HF zostanie ustawiona nieskończoność.</li><li><strong>Nachylenie</strong> — określa nachylenie linii prostej używanej ze słowami kluczowymi składników pionowych <strong>Liniowa</strong>i<strong>Liniowa odwrotna</strong>. Nachylenie jest określone jako ułamek przedstawiający stosunek różnicy wysokości do długości (na przykład nachylenie wynoszące 45 procent to 1/45, które wprowadza się jako 0,02222).</li><li><strong>Wartość poboczna</strong> — ustanawia składnik HF, gdy kąt HRMA jest większy niż 45 stopni lub jest równy tej wartości i jest mniejszy niż 90 stopni, gdy podano słowo kluczowe składnika poziomego <strong>Do przodu</strong>.</li><li><strong>Nazwa tabeli</strong> — określa nazwę tabeli definiującej składnik HF.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "Raster definiujący kierunek poziomy w każdej komórce.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "Wartościami rastra muszą być liczby całkowitoliczbowe z zakresu od 0 do 360, przy czym 0 stopni wskazuje północ lub kierunek ku górze ekranu, a wartości wzrastają zgodnie z kierunkiem ruchu wskazówek zegara. Obszary o płaskim ukształtowaniu powinny mieć wartość -1. Wartości w każdej lokalizacji będą używane w połączeniu ze <strong>składnikiem poziomym</strong>, aby określić koszt poziomy ponoszony podczas poruszania się z komórki do jej sąsiadów.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "Próg, którego nie mogą przekroczyć wartości akumulowanego kosztu. Jeśli odległość akumulowanego kosztu przekroczy tę wartość, wartością wynikową lokalizacji komórki będzie NoData. Maksymalna odległość definiuje zasięg, dla którego są obliczane odległości akumulowanego kosztu. Domyślna odległość to zasięg rastra wynikowego.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Mnożnik do zastosowania do wartości kosztów.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Ten parametr umożliwia sterowanie trybem podróżowania lub wielkością w źródle. Im wyższy mnożnik, tym większy koszt ruchu przez każdą komórkę.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Wartości muszą być większe niż zero. Domyślna wartość to 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola z <strong>rastra źródłowego</strong>.",
	"@@Path-Distance_Source-Raster_tag0@@": "Wymagany raster wejściowy lokalizacji źródłowych.",
	"@@Path-Distance_Source-Raster_tag1@@": "Jest to raster identyfikujący komórki lub lokalizacje, z których jest obliczana odległość o najmniejszym akumulowanym koszcie dla każdej lokalizacji komórki wynikowej.",
	"@@Path-Distance_Source-Raster_tag2@@": "Może to być typ całkowitoliczbowy lub zmiennoprzecinkowy.",
	"@@Path-Distance_Start-Cost_tag0@@": "Początkowy koszt, od którego będą rozpoczynane obliczenia kosztów. Ten parametr pozwala określić stały koszt powiązany ze źródłem. Zamiast rozpoczynać od kosztu równego 0, algorytm kosztu rozpocznie od podanej wartości.",
	"@@Path-Distance_Start-Cost_tag1@@": "Wartość musi wynosić zero lub więcej. Domyślna wartość to 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "Raster definiujący wartości wysokości dla każdej lokalizacji komórki.",
	"@@Path-Distance_Surface-Raster_tag1@@": "Wartości te są używane do obliczenia rzeczywistej odległości powierzchniowej pokonywanej podczas poruszania się przez komórki.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Definiuje kierunek osoby podróżującej podczas stosowania źródłowego współczynnika oporu i początkowego kosztu dla źródła.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>Ze źródła</strong> — źródłowy współczynnik oporu i początkowy koszt zostaną zastosowane, począwszy od wejściowego źródła przy ruchu w kierunku komórek innych niż źródłowe. Jest to opcja domyślna.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>Do źródła</strong> — źródłowy współczynnik oporu i początkowy koszt zostaną zastosowane, począwszy od każdej komórki innej niż źródłowa przy ruchu w kierunku wejściowego źródła.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Podaj słowo kluczowe <strong>Ze źródła</strong> lub <strong>Do źródła</strong>, które zostanie zastosowane do wszystkich źródeł lub podaj pole w <strong>rastrze źródłowym</strong> zawierające słowa kluczowe identyfikujące kierunek podróżowania dla każdego źródła. To pole musi zawierać ciąg znakowy ${FROM_SOURCE} lub ${TO_SOURCE}.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Definiuje relację między pionowym składnikiem kosztu i pionowym względnym kątem ruchu (VRMA).</p><p>Istnieje kilka składników z modyfikatorami, które identyfikują wykres składnika pionowego. Dodatkowo można użyć tabeli do utworzenia wykresu niestandardowego. Wykresy służą do określania składnika pionowego używanego do obliczania łącznego kosztu przemieszczenia się do sąsiedniej komórki.</p><p>W poniższym wyjaśnieniu używane są dwa akronimy: VF i VRMA. VF oznacza składnik pionowy (Vertical Factor), który definiuje trudności napotkane przy ruchu w pionie podczas przemieszczania się z jednej komórki do komórki następnej. VRMA oznacza poziomy względny kąt ruchu (Vertical Relative Moving Angle), który określa kąt nachylenia między kierunkiem z komórki Z (przetwarzana komórka) i kierunkiem komórki DO.</p><p>Dostępne są następujące typy <strong>Składnika pionowego</strong>:</p><ul><li><strong>Binarny</strong> — określa, że jeśli kąt VRMA jest większy niż dolny kąt odcinania i mniejszy niż górny kąt odcinania, składnik VF jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. W przeciwnym razie jest dla niego ustawiana nieskończoność.</li><li><strong>Liniowa</strong> — określa, że składnik VF jest funkcją liniową kąta VRMA.</li><li><strong>Symetryczna liniowa</strong> — określa, że składnik VF jest funkcją liniową kąta VRMA odpowiednio dla ujemnej i dodatniej wartości kąta VRMA, a te dwie funkcje linowe są symetryczne w odniesieniu do osi składnika VF (oś y).</li><li><strong>Liniowa odwrotna</strong> — określa, ze składnik VF jest odwrotną funkcją liniową kąta VRMA.</li><li><strong>Symetryczna liniowa odwrotna</strong> — określa, że składnik VF jest odwrotną funkcją liniową kąta VRMA odpowiednio dla ujemnej i dodatniej wartości kąta VRMA, a te dwie funkcje linowe są symetryczne w odniesieniu do osi składnika VF (oś y).</li><li><strong>Cos</strong> — określa składnik VF jako funkcję cosinusową kąta VRMA.</li><li><strong>Sec</strong> — określa składnik VF jako funkcję sieczną kąta VRMA.</li><li><strong>Cos-Sec</strong> — określa, że składnik VF jest funkcją cosinusową kąta VRMA, gdy kąt VRMA ma wartość ujemną i że jest on funkcją sieczną kąta VRMA, gdy kąt VRMA ma wartość nieujemną.</li><li><strong>Sec-Cos</strong> — określa, że składnik VF jest funkcją sieczną kąta VRMA, gdy kąt VRMA ma wartość ujemną i że jest on funkcją cosinusową kąta VRMA, gdy kąt VRMA ma wartość nieujemną.</li><li><strong>Tabela</strong> — określa, że do zdefiniowania wykresu składnika pionowego używanego do określania składników VF zostanie użyty plik tabeli.</li></ul><p>Do modyfikatorów słów kluczowych składników pionowych należą:</p><ul><li><strong>Składnik o wartości zerowej</strong> — określa składnik pionowy używany, gdy kąt VRMA ma wartość zero. Ten składnik ustawia pozycję przecięcia osi y dla podanej funkcji. Zgodnie z definicją składnik o wartości zerowej nie ma zastosowania do żadnych trygonometrycznych funkcji pionowych (COS, SEC, COS-SEC ani SEC-COS). Pozycja przecięcia osi y jest definiowana przez te funkcje.</li><li><strong>Niski kąt odcinania</strong>— definiuje kąt VRMA, poniżej którego składnik VF zostanie ustawiony na nieskończoność.</li><li><strong>Wysoki kąt odcinania</strong>— definiuje kąt VRMA, powyżej którego składnik VF zostanie ustawiony na nieskończoność.</li><li><strong>Nachylenie </strong> — określa nachylenie linii prostej używanej ze słowami kluczowymi składników pionowych<strong>Liniowa</strong>i<strong>Liniowa odwrotna</strong>. Nachylenie jest określone jako ułamek przedstawiający stosunek różnicy wysokości do długości (na przykład nachylenie wynoszące 45 procent to 1/45, które wprowadza się jako 0,02222).</li><li><strong>Nazwa tabeli</strong> — określa nazwę tabeli definiującej składnik VF.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Definiuje relację między pionowym składnikiem kosztu i pionowym względnym kątem ruchu (VRMA).",
	"@@Path-Distance_Vertical-Raster_tag1@@": "Wartości te służą do obliczania nachylenia używanego do identyfikowania składnika pionowego występującego podczas poruszania się między komórkami.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Ten parametr symuluje wzrost wysiłku potrzebnego do przezwyciężenia kosztów w miarę wzrostu akumulowanego kosztu. Służy do modelowania zmęczenia podróżującej osoby. Rosnący akumulowany koszt dotarcia do komórki jest mnożony przez współczynnik oporu i dodawany do kosztu ruchu do kolejnej komórki.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Jest to zmodyfikowana wersja wzoru na stopę procentu składanego służąca do obliczania oczywistego kosztu poruszania się przez komórkę. Wraz ze wzrostem współczynnika oporu rośnie koszt komórek odwiedzanych później. Im wyższy współczynnik oporu, tym większy koszt dotarcia do kolejnej komórki, który nakłada się na koszt każdego kolejnego ruchu. Ponieważ współczynnik oporu jest podobny do procentu składanego i wartości akumulowanego kosztu są zazwyczaj bardzo duże, zaleca się stosowanie niskich wartości tego współczynnika, np. 0,005 lub jeszcze niższych, w zależności od wartości akumulowanego kosztu.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Definiuje pojemność kosztową osoby podróżującej dla danego źródła. Obliczenia kosztów są kontynuowane dla każdego źródła do momentu osiągnięcia określonej pojemności.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "Wymagany raster wejściowy definiujący koszt (impedancję) ruchu planimetrycznego między poszczególnymi komórkami. Wartość w każdej lokalizacji komórki reprezentuje odległość kosztu na jednostkę na potrzeby poruszania się przez tę komórkę. Wartość każdej lokalizacji komórki jest mnożona przez rozdzielczość komórki, a jednocześnie następuje kompensacja ruchu ukośnego, aby uzyskać łączny koszt poruszania się przez komórkę.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "Wartości <strong>rastra kosztów</strong> mogą być całkowitoliczbowe lub zmiennoprzecinkowe, ale nie mogą być ujemne ani równe zero.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Definiuje relację między poziomym składnikiem kosztu i poziomym względnym kątem ruchu (HRMA).</p><p>Istnieje kilka składników z modyfikatorami, które identyfikują wykres składnika pionowego. Dodatkowo można użyć tabeli do utworzenia wykresu niestandardowego. Wykresy służą do określania składnika pionowego używanego do obliczania łącznego kosztu przemieszczenia się do sąsiedniej komórki.</p><p>W poniższym wyjaśnieniu używane są dwa akronimy: HF i HRMA. HF oznacza składnik poziomy (Horizontal Factor), który definiuje trudności napotkane przy ruchu w poziomie podczas przemieszczania się z jednej komórki do komórki następnej. HRMA oznacza poziomy względny kąt ruchu (Horizontal Relative Moving Angle), który określa kąt między kierunkiem poziomym z komórki i kierunkiem ruchu.</p><p>Dostępne są następujące typy <strong>Składnika poziomego</strong>:</p><ul><li><strong>Binarny</strong> — wskazuje, że jeśli kąt HRMA jest mniejszy niż kąt odcinania, składnik HF jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. W przeciwnym razie jest dla niego ustawiana nieskończoność.</li><li><strong>Do przodu</strong> — określa, że dozwolony jest wyłącznie ruch do przodu. Kąt HRMA musi być większy lub równy 0 i mniejszy niż 90 stopni (0 &lt;= HRMA &lt; 90). Jeśli kąt HRMA jest większy niż 0 i mniejszy niż 45 stopni, składnik HF dla komórki jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. Jeśli kąt HRMA jest większy niż 45 stopni lub jest równy tej wartości, używana jest wartość modyfikatora wartości pobocznej. W przypadku kąta HRMA o wartości większej lub równej 90 stopni składnik HF jest skonfigurowany na nieskończoność.</li><li><strong>Liniowa</strong> — określa, że składnik HF jest funkcją linową kąta HRMA.</li><li><strong>Liniowa odwrotna</strong> — określa, że składnik HF jest odwrotną funkcją liniową kąta HRMA.</li><li><strong>Tabela</strong> — określa, że do zdefiniowania wykresu składnika poziomego używanego do określania składników HF zostanie użyty plik tabeli.</li></ul><p>Do modyfikatorów składników poziomych należą:</p><ul><li><strong>Składnik o wartości zerowej</strong> — składnik poziomy, który ma być używany, gdy kąt HRMA ma wartość zero. Ten składnik ustawia pozycję przecięcia osi y dla wszystkich funkcji składnika poziomego.</li><li><strong>Kąt odcinania</strong> — definiuje kąt HRMA, po którego przekroczeniu jako wartość składnika HF zostanie ustawiona nieskończoność.</li><li><strong>Nachylenie</strong> — określa nachylenie linii prostej używanej ze słowami kluczowymi składników pionowych <strong>Liniowa</strong>i<strong>Liniowa odwrotna</strong>. Nachylenie jest określone jako ułamek przedstawiający stosunek różnicy wysokości do długości (na przykład nachylenie wynoszące 45 procent to 1/45, które wprowadza się jako 0,02222).</li><li><strong>Wartość poboczna</strong> — ustanawia składnik HF, gdy kąt HRMA jest większy niż 45 stopni lub jest równy tej wartości i jest mniejszy niż 90 stopni, gdy podano słowo kluczowe składnika poziomego <strong>Do przodu</strong>.</li><li><strong>Nazwa tabeli</strong> — określa nazwę tabeli definiującej składnik HF.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "Raster definiujący kierunek poziomy w każdej komórce.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "Wartościami rastra muszą być liczby całkowitoliczbowe z zakresu od 0 do 360, przy czym 0 stopni wskazuje północ lub kierunek ku górze ekranu, a wartości wzrastają zgodnie z kierunkiem ruchu wskazówek zegara. Obszary o płaskim ukształtowaniu powinny mieć wartość -1. Wartości w każdej lokalizacji będą używane w połączeniu ze <strong>składnikiem poziomym</strong>, aby określić koszt poziomy ponoszony podczas poruszania się z komórki do jej sąsiadów.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "Próg, którego nie mogą przekroczyć wartości akumulowanego kosztu. Jeśli odległość akumulowanego kosztu przekroczy tę wartość, wartością wynikową lokalizacji komórki będzie NoData. Maksymalna odległość definiuje zasięg, dla którego są obliczane odległości akumulowanego kosztu. Domyślna odległość to zasięg rastra wynikowego.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Mnożnik do zastosowania do wartości kosztów.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Ten parametr umożliwia sterowanie trybem podróżowania lub wielkością w źródle. Im wyższy mnożnik, tym większy koszt ruchu przez każdą komórkę.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Wartości muszą być większe niż zero. Domyślna wartość to 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola <strong>rastra źródłowego</strong>.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "Pole służące do przypisywania wartości do lokalizacji źródłowych. Musi być typu całkowitoliczbowego. Jeśli ustawiono opcję <strong>Raster wartości</strong>, wartości tego rastra wejściowego będą miały pierwszeństwo przed dowolnym ustawieniem opcji <strong>Pole źródłowe</strong>.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "Wymagany raster wejściowy lokalizacji źródłowych.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Jest to raster identyfikujący komórki lub lokalizacje, z których jest obliczana odległość o najmniejszym akumulowanym koszcie dla każdej lokalizacji komórki wynikowej.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Może to być typ całkowitoliczbowy lub zmiennoprzecinkowy.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "Początkowy koszt, od którego będą rozpoczynane obliczenia kosztów. Ten parametr pozwala określić stały koszt powiązany ze źródłem. Zamiast rozpoczynać od kosztu równego 0, algorytm kosztu rozpocznie od podanej wartości.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "Wartość musi wynosić zero lub więcej. Domyślna wartość to 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "Raster definiujący wartości wysokości dla każdej lokalizacji komórki.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "Wartości te są używane do obliczenia rzeczywistej odległości powierzchniowej pokonywanej podczas poruszania się przez komórki.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Definiuje kierunek osoby podróżującej podczas stosowania źródłowego współczynnika oporu i początkowego kosztu dla źródła.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>Ze źródła</strong> — źródłowy współczynnik oporu i początkowy koszt zostaną zastosowane, począwszy od wejściowego źródła przy ruchu w kierunku komórek innych niż źródłowe. Jest to opcja domyślna.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>Do źródła</strong> — źródłowy współczynnik oporu i początkowy koszt zostaną zastosowane, począwszy od każdej komórki innej niż źródłowa przy ruchu w kierunku wejściowego źródła.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Podaj słowo kluczowe <strong>Ze źródła</strong> lub <strong>Do źródła</strong>, które zostanie zastosowane do wszystkich źródeł lub podaj pole w <strong>rastrze źródłowym</strong> zawierające słowa kluczowe identyfikujące kierunek podróżowania dla każdego źródła. To pole musi zawierać ciąg znakowy ${FROM_SOURCE} lub ${TO_SOURCE}.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "Wejściowy raster całkowitoliczbowy identyfikujący wartości strefy do użycia dla każdej wejściowej lokalizacji źródłowej. Dla każdej komórki lokalizacji źródłowej wartość zdefiniowana w opcji <strong>Raster wartości</strong> zostanie przypisana do wszystkich komórek przydzielonych do lokalizacji źródłowej na potrzeby obliczenia. Opcja <strong>Raster wartości</strong> ma pierwszeństwo przed każdym ustawieniem opcji <strong>Pole źródłowe</strong>.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Definiuje relację między pionowym składnikiem kosztu i pionowym względnym kątem ruchu (VRMA).</p><p>Istnieje kilka składników z modyfikatorami, które identyfikują wykres składnika pionowego. Dodatkowo można użyć tabeli do utworzenia wykresu niestandardowego. Wykresy służą do określania składnika pionowego używanego do obliczania łącznego kosztu przemieszczenia się do sąsiedniej komórki.</p><p>W poniższym wyjaśnieniu używane są dwa akronimy: VF i VRMA. VF oznacza składnik pionowy (Vertical Factor), który definiuje trudności napotkane przy ruchu w pionie podczas przemieszczania się z jednej komórki do komórki następnej. VRMA oznacza poziomy względny kąt ruchu (Vertical Relative Moving Angle), który określa kąt nachylenia między kierunkiem z komórki Z (przetwarzana komórka) i kierunkiem komórki DO.</p><p>Dostępne są następujące typy <strong>Składnika pionowego</strong>:</p><ul><li><strong>Binarny</strong> — określa, że jeśli kąt VRMA jest większy niż dolny kąt odcinania i mniejszy niż górny kąt odcinania, składnik VF jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. W przeciwnym razie jest dla niego ustawiana nieskończoność.</li><li><strong>Liniowa</strong> — określa, że składnik VF jest funkcją liniową kąta VRMA.</li><li><strong>Symetryczna liniowa</strong> — określa, że składnik VF jest funkcją liniową kąta VRMA odpowiednio dla ujemnej i dodatniej wartości kąta VRMA, a te dwie funkcje linowe są symetryczne w odniesieniu do osi składnika VF (oś y).</li><li><strong>Liniowa odwrotna</strong> — określa, ze składnik VF jest odwrotną funkcją liniową kąta VRMA.</li><li><strong>Symetryczna liniowa odwrotna</strong> — określa, że składnik VF jest odwrotną funkcją liniową kąta VRMA odpowiednio dla ujemnej i dodatniej wartości kąta VRMA, a te dwie funkcje linowe są symetryczne w odniesieniu do osi składnika VF (oś y).</li><li><strong>Cos</strong> — określa składnik VF jako funkcję cosinusową kąta VRMA.</li><li><strong>Sec</strong> — określa składnik VF jako funkcję sieczną kąta VRMA.</li><li><strong>Cos-Sec</strong> — określa, że składnik VF jest funkcją cosinusową kąta VRMA, gdy kąt VRMA ma wartość ujemną i że jest on funkcją sieczną kąta VRMA, gdy kąt VRMA ma wartość nieujemną.</li><li><strong>Sec-Cos</strong> — określa, że składnik VF jest funkcją sieczną kąta VRMA, gdy kąt VRMA ma wartość ujemną i że jest on funkcją cosinusową kąta VRMA, gdy kąt VRMA ma wartość nieujemną.</li><li><strong>Tabela</strong> — określa, że do zdefiniowania wykresu składnika pionowego używanego do określania składników VF zostanie użyty plik tabeli.</li></ul><p>Do modyfikatorów słów kluczowych składników pionowych należą:</p><ul><li><strong>Składnik o wartości zerowej</strong> — określa składnik pionowy używany, gdy kąt VRMA ma wartość zero. Ten składnik ustawia pozycję przecięcia osi y dla podanej funkcji. Zgodnie z definicją składnik o wartości zerowej nie ma zastosowania do żadnych trygonometrycznych funkcji pionowych (COS, SEC, COS-SEC ani SEC-COS). Pozycja przecięcia osi y jest definiowana przez te funkcje.</li><li><strong>Niski kąt odcinania</strong>— definiuje kąt VRMA, poniżej którego składnik VF zostanie ustawiony na nieskończoność.</li><li><strong>Wysoki kąt odcinania</strong>— definiuje kąt VRMA, powyżej którego składnik VF zostanie ustawiony na nieskończoność.</li><li><strong>Nachylenie </strong> — określa nachylenie linii prostej używanej ze słowami kluczowymi składników pionowych<strong>Liniowa</strong>i<strong>Liniowa odwrotna</strong>. Nachylenie jest określone jako ułamek przedstawiający stosunek różnicy wysokości do długości (na przykład nachylenie wynoszące 45 procent to 1/45, które wprowadza się jako 0,02222).</li><li><strong>Nazwa tabeli</strong> — określa nazwę tabeli definiującej składnik VF.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Definiuje relację między pionowym składnikiem kosztu i pionowym względnym kątem ruchu (VRMA).",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "Wartości te służą do obliczania nachylenia używanego do identyfikowania składnika pionowego występującego podczas poruszania się między komórkami.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Ten parametr symuluje wzrost wysiłku potrzebnego do przezwyciężenia kosztów w miarę wzrostu akumulowanego kosztu. Służy do modelowania zmęczenia podróżującej osoby. Rosnący akumulowany koszt dotarcia do komórki jest mnożony przez współczynnik oporu i dodawany do kosztu ruchu do kolejnej komórki.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Jest to zmodyfikowana wersja wzoru na stopę procentu składanego służąca do obliczania oczywistego kosztu poruszania się przez komórkę. Wraz ze wzrostem współczynnika oporu rośnie koszt komórek odwiedzanych później. Im wyższy współczynnik oporu, tym większy koszt dotarcia do kolejnej komórki, który nakłada się na koszt każdego kolejnego ruchu. Ponieważ współczynnik oporu jest podobny do procentu składanego i wartości akumulowanego kosztu są zazwyczaj bardzo duże, zaleca się stosowanie niskich wartości tego współczynnika, np. 0,005 lub jeszcze niższych, w zależności od wartości akumulowanego kosztu.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Definiuje pojemność kosztową osoby podróżującej dla danego źródła. Obliczenia kosztów są kontynuowane dla każdego źródła do momentu osiągnięcia określonej pojemności.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "Wymagany raster wejściowy definiujący koszt (impedancję) ruchu planimetrycznego między poszczególnymi komórkami. Wartość w każdej lokalizacji komórki reprezentuje odległość kosztu na jednostkę na potrzeby poruszania się przez tę komórkę. Wartość każdej lokalizacji komórki jest mnożona przez rozdzielczość komórki, a jednocześnie następuje kompensacja ruchu ukośnego, aby uzyskać łączny koszt poruszania się przez komórkę.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "Wartości <strong>rastra kosztów</strong> mogą być całkowitoliczbowe lub zmiennoprzecinkowe, ale nie mogą być ujemne ani równe zero.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Definiuje relację między poziomym składnikiem kosztu i poziomym względnym kątem ruchu (HRMA).</p><p>Istnieje kilka składników z modyfikatorami, które identyfikują wykres składnika pionowego. Dodatkowo można użyć tabeli do utworzenia wykresu niestandardowego. Wykresy służą do określania składnika pionowego używanego do obliczania łącznego kosztu przemieszczenia się do sąsiedniej komórki.</p><p>W poniższym wyjaśnieniu używane są dwa akronimy: HF i HRMA. HF oznacza składnik poziomy (Horizontal Factor), który definiuje trudności napotkane przy ruchu w poziomie podczas przemieszczania się z jednej komórki do komórki następnej. HRMA oznacza poziomy względny kąt ruchu (Horizontal Relative Moving Angle), który określa kąt między kierunkiem poziomym z komórki i kierunkiem ruchu.</p><p>Dostępne są następujące typy <strong>Składnika poziomego</strong>:</p><ul><li><strong>Binarny</strong> — wskazuje, że jeśli kąt HRMA jest mniejszy niż kąt odcinania, składnik HF jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. W przeciwnym razie jest dla niego ustawiana nieskończoność.</li><li><strong>Do przodu</strong> — określa, że dozwolony jest wyłącznie ruch do przodu. Kąt HRMA musi być większy lub równy 0 i mniejszy niż 90 stopni (0 &lt;= HRMA &lt; 90). Jeśli kąt HRMA jest większy niż 0 i mniejszy niż 45 stopni, składnik HF dla komórki jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. Jeśli kąt HRMA jest większy niż 45 stopni lub jest równy tej wartości, używana jest wartość modyfikatora wartości pobocznej. W przypadku kąta HRMA o wartości większej lub równej 90 stopni składnik HF jest skonfigurowany na nieskończoność.</li><li><strong>Liniowa</strong> — określa, że składnik HF jest funkcją linową kąta HRMA.</li><li><strong>Liniowa odwrotna</strong> — określa, że składnik HF jest odwrotną funkcją liniową kąta HRMA.</li><li><strong>Tabela</strong> — określa, że do zdefiniowania wykresu składnika poziomego używanego do określania składników HF zostanie użyty plik tabeli.</li></ul><p>Do modyfikatorów składników poziomych należą:</p><ul><li><strong>Składnik o wartości zerowej</strong> — składnik poziomy, który ma być używany, gdy kąt HRMA ma wartość zero. Ten składnik ustawia pozycję przecięcia osi y dla wszystkich funkcji składnika poziomego.</li><li><strong>Kąt odcinania</strong> — definiuje kąt HRMA, po którego przekroczeniu jako wartość składnika HF zostanie ustawiona nieskończoność.</li><li><strong>Nachylenie</strong> — określa nachylenie linii prostej używanej ze słowami kluczowymi składników pionowych <strong>Liniowa</strong>i<strong>Liniowa odwrotna</strong>. Nachylenie jest określone jako ułamek przedstawiający stosunek różnicy wysokości do długości (na przykład nachylenie wynoszące 45 procent to 1/45, które wprowadza się jako 0,02222).</li><li><strong>Wartość poboczna</strong> — ustanawia składnik HF, gdy kąt HRMA jest większy niż 45 stopni lub jest równy tej wartości i jest mniejszy niż 90 stopni, gdy podano słowo kluczowe składnika poziomego <strong>Do przodu</strong>.</li><li><strong>Nazwa tabeli</strong> — określa nazwę tabeli definiującej składnik HF.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "Raster definiujący kierunek poziomy w każdej komórce.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "Wartościami rastra muszą być liczby całkowitoliczbowe z zakresu od 0 do 360, przy czym 0 stopni wskazuje północ lub kierunek ku górze ekranu, a wartości wzrastają zgodnie z kierunkiem ruchu wskazówek zegara. Obszary o płaskim ukształtowaniu powinny mieć wartość -1. Wartości w każdej lokalizacji będą używane w połączeniu ze <strong>składnikiem poziomym</strong>, aby określić koszt poziomy ponoszony podczas poruszania się z komórki do jej sąsiadów.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "Próg, którego nie mogą przekroczyć wartości akumulowanego kosztu. Jeśli odległość akumulowanego kosztu przekroczy tę wartość, wartością wynikową lokalizacji komórki będzie NoData. Maksymalna odległość definiuje zasięg, dla którego są obliczane odległości akumulowanego kosztu. Domyślna odległość to zasięg rastra wynikowego.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Mnożnik do zastosowania do wartości kosztów.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Ten parametr umożliwia sterowanie trybem podróżowania lub wielkością w źródle. Im wyższy mnożnik, tym większy koszt ruchu przez każdą komórkę.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Wartości muszą być większe niż zero. Domyślna wartość to 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola <strong>rastra źródłowego</strong>.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "Wymagany raster wejściowy lokalizacji źródłowych.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Jest to raster identyfikujący komórki lub lokalizacje, z których jest obliczana odległość o najmniejszym akumulowanym koszcie dla każdej lokalizacji komórki wynikowej.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Może to być typ całkowitoliczbowy lub zmiennoprzecinkowy.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "Początkowy koszt, od którego będą rozpoczynane obliczenia kosztów. Ten parametr pozwala określić stały koszt powiązany ze źródłem. Zamiast rozpoczynać od kosztu równego 0, algorytm kosztu rozpocznie od podanej wartości.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "Wartość musi wynosić zero lub więcej. Domyślna wartość to 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "Raster definiujący wartości wysokości dla każdej lokalizacji komórki.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "Wartości te są używane do obliczenia rzeczywistej odległości powierzchniowej pokonywanej podczas poruszania się przez komórki.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Definiuje kierunek osoby podróżującej podczas stosowania źródłowego współczynnika oporu i początkowego kosztu dla źródła.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>Ze źródła</strong> — źródłowy współczynnik oporu i początkowy koszt zostaną zastosowane, począwszy od wejściowego źródła przy ruchu w kierunku komórek innych niż źródłowe. Jest to opcja domyślna.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>Do źródła</strong> — źródłowy współczynnik oporu i początkowy koszt zostaną zastosowane, począwszy od każdej komórki innej niż źródłowa przy ruchu w kierunku wejściowego źródła.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Podaj słowo kluczowe <strong>Ze źródła</strong> lub <strong>Do źródła</strong>, które zostanie zastosowane do wszystkich źródeł lub podaj pole w <strong>rastrze źródłowym</strong> zawierające słowa kluczowe identyfikujące kierunek podróżowania dla każdego źródła. To pole musi zawierać ciąg znakowy ${FROM_SOURCE} lub ${TO_SOURCE}.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Definiuje relację między pionowym składnikiem kosztu i pionowym względnym kątem ruchu (VRMA).</p><p>Istnieje kilka składników z modyfikatorami, które identyfikują wykres składnika pionowego. Dodatkowo można użyć tabeli do utworzenia wykresu niestandardowego. Wykresy służą do określania składnika pionowego używanego do obliczania łącznego kosztu przemieszczenia się do sąsiedniej komórki.</p><p>W poniższym wyjaśnieniu używane są dwa akronimy: VF i VRMA. VF oznacza składnik pionowy (Vertical Factor), który definiuje trudności napotkane przy ruchu w pionie podczas przemieszczania się z jednej komórki do komórki następnej. VRMA oznacza poziomy względny kąt ruchu (Vertical Relative Moving Angle), który określa kąt nachylenia między kierunkiem z komórki Z (przetwarzana komórka) i kierunkiem komórki DO.</p><p>Dostępne są następujące typy <strong>Składnika pionowego</strong>:</p><ul><li><strong>Binarny</strong> — określa, że jeśli kąt VRMA jest większy niż dolny kąt odcinania i mniejszy niż górny kąt odcinania, składnik VF jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. W przeciwnym razie jest dla niego ustawiana nieskończoność.</li><li><strong>Liniowa</strong> — określa, że składnik VF jest funkcją liniową kąta VRMA.</li><li><strong>Symetryczna liniowa</strong> — określa, że składnik VF jest funkcją liniową kąta VRMA odpowiednio dla ujemnej i dodatniej wartości kąta VRMA, a te dwie funkcje linowe są symetryczne w odniesieniu do osi składnika VF (oś y).</li><li><strong>Liniowa odwrotna</strong> — określa, ze składnik VF jest odwrotną funkcją liniową kąta VRMA.</li><li><strong>Symetryczna liniowa odwrotna</strong> — określa, że składnik VF jest odwrotną funkcją liniową kąta VRMA odpowiednio dla ujemnej i dodatniej wartości kąta VRMA, a te dwie funkcje linowe są symetryczne w odniesieniu do osi składnika VF (oś y).</li><li><strong>Cos</strong> — określa składnik VF jako funkcję cosinusową kąta VRMA.</li><li><strong>Sec</strong> — określa składnik VF jako funkcję sieczną kąta VRMA.</li><li><strong>Cos-Sec</strong> — określa, że składnik VF jest funkcją cosinusową kąta VRMA, gdy kąt VRMA ma wartość ujemną i że jest on funkcją sieczną kąta VRMA, gdy kąt VRMA ma wartość nieujemną.</li><li><strong>Sec-Cos</strong> — określa, że składnik VF jest funkcją sieczną kąta VRMA, gdy kąt VRMA ma wartość ujemną i że jest on funkcją cosinusową kąta VRMA, gdy kąt VRMA ma wartość nieujemną.</li><li><strong>Tabela</strong> — określa, że do zdefiniowania wykresu składnika pionowego używanego do określania składników VF zostanie użyty plik tabeli.</li></ul><p>Do modyfikatorów słów kluczowych składników pionowych należą:</p><ul><li><strong>Składnik o wartości zerowej</strong> — określa składnik pionowy używany, gdy kąt VRMA ma wartość zero. Ten składnik ustawia pozycję przecięcia osi y dla podanej funkcji. Zgodnie z definicją składnik o wartości zerowej nie ma zastosowania do żadnych trygonometrycznych funkcji pionowych (COS, SEC, COS-SEC ani SEC-COS). Pozycja przecięcia osi y jest definiowana przez te funkcje.</li><li><strong>Niski kąt odcinania</strong>— definiuje kąt VRMA, poniżej którego składnik VF zostanie ustawiony na nieskończoność.</li><li><strong>Wysoki kąt odcinania</strong>— definiuje kąt VRMA, powyżej którego składnik VF zostanie ustawiony na nieskończoność.</li><li><strong>Nachylenie </strong> — określa nachylenie linii prostej używanej ze słowami kluczowymi składników pionowych<strong>Liniowa</strong>i<strong>Liniowa odwrotna</strong>. Nachylenie jest określone jako ułamek przedstawiający stosunek różnicy wysokości do długości (na przykład nachylenie wynoszące 45 procent to 1/45, które wprowadza się jako 0,02222).</li><li><strong>Nazwa tabeli</strong> — określa nazwę tabeli definiującej składnik VF.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Definiuje relację między pionowym składnikiem kosztu i pionowym względnym kątem ruchu (VRMA).",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "Wartości te służą do obliczania nachylenia używanego do identyfikowania składnika pionowego występującego podczas poruszania się między komórkami.",
	"@@Plus_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Plus_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Plus_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Plus_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Plus_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Plus_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Plus_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Plus_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Plus_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Plus_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Plus_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Plus_Raster_tag0@@": "Dane wejściowe, których wartości zostaną dodane.",
	"@@Plus_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Plus_Raster2_tag0@@": "Dane wejściowe, których wartości zostaną dodane do pierwszych danych wejściowych.",
	"@@Plus_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Local_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Local_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Local_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Local_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. To jest ustawienie domyślne.",
	"@@Local_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Local_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Local_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Local_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Local_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. To jest ustawienie domyślne.",
	"@@Local_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Local_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Local_Raster_tag0@@": "Dane wejściowe, których wartości zostaną dodane.",
	"@@Local_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Local_Raster2_tag0@@": "Dane wejściowe, których wartości zostaną dodane do pierwszych danych wejściowych.",
	"@@Local_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Local_False-Raster_tag0@@": "Dane wejściowe, których wartości będą używane jako wynikowe wartości pikseli, jeśli warunek ma wartość fałsz (false). Może to być raster całkowitoliczbowy lub zmiennoprzecinkowy albo wartość stała.",
	"@@Local_True-Raster_tag0@@": "Dane wejściowe, których wartości będą używane jako wynikowe wartości pikseli, jeśli warunek ma wartość prawda (true). Może to być raster całkowitoliczbowy lub zmiennoprzecinkowy albo wartość stała.",
	"@@Power_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Power_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Power_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Power_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Power_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Power_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Power_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Power_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Power_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Power_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Power_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Power_Raster_tag0@@": "Wartości wejściowe, które mają zostać podniesione do potęgi zdefiniowanej za pomocą właściwości <strong>Raster2</strong>.",
	"@@Power_Raster_tag3@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Power_Raster2_tag0@@": "Dane wejściowe określające potęgę, do której będą podniesione wartości właściwości <strong>Raster</strong>.",
	"@@Power_Raster2_tag3@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "Typ kalibracji, który ma zostać wykonany.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Beta-nought — funkcja zwraca odbicie radaru na jednostkę powierzchni w zakresie pochyłości. Jest to domyślny typ kalibracji.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Beta-nought — funkcja zwraca odbicie radaru na jednostkę powierzchni w zakresie podłoża. Wyniki są 32-bitowymi wartościami zmiennoprzecinkowymi najczęściej mieszczącymi się w zakresie od 0,0 do 1,0. Jeśli zaznaczona jest ta opcja, ograniczanie danych nie jest przeprowadzane.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gamma — funkcja zwraca odbicie radaru na jednostkę powierzchni na płaszczyźnie prostopadłej do kierunku pomiaru.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Brak",
	"@@Radar-Calibration_Raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@RasterInfo_Raster-Info_tag0@@": "Wybieranie zestawu danych rastrowych jako szablonu",
	"@@RasterInfo_Raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "Wykaz pól w <strong>tabeli atrybutów strefowych</strong>, poszczególne pola są rozdzielone przecinkami. Wartości w każdym polu będą przedstawione jako pasmo w rastrze wynikowym.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "Początkowa wartość pikseli pasm wynikowych w rastrze sprzed ponownego przyporządkowania.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Jeśli dany piksel nie będzie znajdował się w strefie, będzie on stanowił tło.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "Wymagany raster wejściowy.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "Dane wejściowe powinny stanowić raster jednopasmowy. W razie użycia rastra wielopasmowego zostanie użyte tylko pierwsze pasmo.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "Opcjonalne dodatkowe zapytanie stosowane do <strong>tabeli atrybutów strefowych</strong>.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "W przypadku korzystania z powyższej przykładowej tabeli, zapytanie przyjmie postać ${Variable1 = 'bare earth'}.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "Atrybuty strefowe określane w postaci ścieżki do lokalnej klasy obiektów, tabeli, adresu URL warstwy usługi obiektowej lub ciągu znakowego JSON.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "W formacie JSON jest on określany jako zbiór przyporządkowań ID stref do macierzy liczb całkowitych. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "Nazwa pola zawierająca wartości ID stref.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "Opcjonalny raster jednopasmowy, w którym każdy piksel zawiera identyfikator strefy powiązany z lokalizacją. ID strefy służy do wyszukiwania wierszy w tabeli atrybutów strefowych dla danej strefy.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Aby zaimportować tylko atrybut, nie należy określać tego parametru.",
	"@@Rasterize-Features_Field_tag0@@": "Wybierz pole, które ma zostać użyte do zidentyfikowania poszczególnych obiektów.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Wybierz klasę obiektów, która ma zostać przekształcona na format rastrowy.",
	"@@Rasterize-Features_Raster_tag0@@": "Wybierz raster w celu zdefiniowania rozmiaru komórki i zasięgu konwersji obiektu.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Określa sposób zarządzania zakładkami:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>Pierwszy</strong> — do nakładających się obszarów zostanie przypisana wartość z pierwszego zestawu danych.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Ostatni</strong> — do nakładających się obszarów zostanie przypisana wartość z ostatniego zestawu danych.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Najmniejszy</strong> — do nakładających się obszarów zostanie przypisana wartość z mniejszego obiektu.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Największy</strong> — do nakładających się obszarów zostanie przypisana wartość z większego obiektu.",
	"@@Recast_Overrides_tag0@@": "Tabela nazw zmiennych i wartości zdefiniowanych przez użytkownika używanych do modyfikowania zestawu danych mozaiki.",
	"@@Recast_Raster_tag0@@": "Produkt rastrowy, do którego zostanie zastosowana funkcja Przekształcenie.",
	"@@Region-Group_Add-Link_tag0@@": "Określa, czy pole łącza jest dodawane do tabeli danych wynikowych.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Dodaj łącze</strong> — element ${LINK} zostanie dodany do tabeli rastra wynikowego.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>Brak łącza</strong> — tabela atrybutów dla rastra wynikowego będzie zawierać tylko elementy ${Value} i ${Count}.",
	"@@Region-Group_Excluded-Value_tag0@@": "Identyfikuje wartość, dzięki czemu jeśli lokalizacja komórki zawiera wartość, łączność przestrzenna nie będzie wartościowana bez względu na sposób określania liczby sąsiadów (CZTERY lub OSIEM).",
	"@@Region-Group_Excluded-Value_tag1@@": "Komórki zawierające wartość wykluczoną będą traktowane jako komórki NoData i będą eliminowane z obliczeń. Lokalizacje komórek zawierające wykluczoną wartość otrzymają wartość 0 w rastrze wynikowym.",
	"@@Region-Group_Excluded-Value_tag2@@": "Pojęcie wartości wykluczonej jest podobne do pojęcia wartości tła lub do stosowania maski. Konieczne jest podanie wartości tego parametru, jeśli podano parametr <strong>${CROSS}</strong>.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "Liczba sąsiadujących komórek, które mają zostać uwzględnione podczas oceniania łączności między komórkami.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>CZTERY</strong> — definiuje łączność między komórkami mającymi taką samą wartość tylko w przypadku, gdy te komórki znajdują się bezpośrednio po lewej lub prawej stronie albo ponad bądź poniżej każdego z czterech najbliższych sąsiadów. Jest to opcja domyślna.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>OSIEM</strong> — definiuje łączność między komórkami mającymi taką samą wartość, jeśli znajdują się one w bezpośrednim sąsiedztwie ośmiu najbliższych komórek. Uwzględniane są komórki leżące po prawej i lewej stronie, powyżej i ukośnie względem siebie.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Definiuje, które wartości komórek należy brać pod uwagę podczas testowania łączności.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>W OBRĘBIE</strong> — testuje łączność między wartościami wejściowymi, które są identyczne w obrębie tej samej strefy. Jest to opcja domyślna.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "Jedynymi komórkami, które można grupować, są komórki z tej samej strefy (wartość), które spełniają wymagania przestrzenne dotyczące łączności podane w parametrze <strong>Liczba sąsiadów</strong> (z czterech stron lub z ośmiu).",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>KRZYŻOWE</strong> — testuje łączność według wymagań przestrzennych określonych parametrem Liczba sąsiadów między komórkami z dowolnymi wartościami z wyjątkiem wartości do wykluczenia zidentyfikowanej za pomocą parametru Wartość wykluczona.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "Gdy jest używana ta opcja, konieczne jest podanie wartości parametru <strong>Wartość wykluczona</strong>.",
	"@@Region-Group_Zone-Raster_tag0@@": "Wymagany raster wejściowy, którego unikalne połączone regiony będą identyfikowane.",
	"@@Region-Group_Zone-Raster_tag1@@": "Musi być liczbą całkowitą.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "Pole w tabeli atrybutów definiujące wartość wypełnienia dla grupy pikseli. W obrazie wielopasmowym ta wartość zostanie przypisana wszystkim pasmom.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "Pole w tabeli atrybutów definiujące maksymalny wzrost promienia w jednostkach odniesienia przestrzennego obrazu.",
	"@@Region-Grow_Raster_tag0@@": "Raster, względem którego ma być wykonywana funkcja.",
	"@@Region-Grow_Seed-Points_tag0@@": "Klasa obiektu punktowego służąca jako początkowe zaczepienia dla algorytmu. Każdy punkt zaczepienia odpowiada jednej pozycji w tabeli atrybutów odnoszącej się do maksymalnego wzrostu promienia, progu podobieństwa i informacji o wartości wypełnienia.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "Pole w tabeli atrybutów definiujące próg podobieństwa jako odległość euklidesową w przestrzeni spektralnej.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Brakujące wartości w tabeli ponownej klasyfikacji zachowują swoją wartość lub zostaje im przyporządkowana wartość NoData.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Niezaznaczone — wszystkie piksele w rastrze wejściowym, które nie zostały ponownie sklasyfikowane w tabeli ponownego przyporządkowania, zachowają swoje wartości i zostaną zapisane w ich lokalizacjach w rastrze wynikowym. Jest to opcja domyślna.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Zaznaczone — wszystkim pikselom w rastrze wejściowym, które nie zostały ponownie sklasyfikowane w tabeli ponownego przyporządkowania, zostanie ponownie przyporządkowana wartość Brak danych w ich lokalizacjach w rastrze wynikowym.",
	"@@Remap_Input-Field_tag0@@": "Wybiera pole określające wejściową wartość piksela, która zostanie ponownie przyporządkowana.",
	"@@Remap_Input-Field_tag1@@": "Jeśli w tabeli istnieje zakres wartości, polem tym będzie pole wartości minimalnej, a oprócz tego należy też podać parametr <strong>Wejściowe pole wartości Maks.</strong>",
	"@@Remap_Input-Max-Field_tag0@@": "Wybiera pole wartości maksymalnej, jeśli tabela określa zakres wartości.",
	"@@Remap_List_tag0@@": "Określa wartości przyporządkowania, minimalną i maksymalną wartość zakresu oraz nowe wartości ponownego przyporządkowania. Dodatkowo zakres wartości może być określony jako piksele o wartości NoData.",
	"@@Remap_Output-Field_tag0@@": "Wybiera pole, które zostanie użyte jako ponownie przyporządkowana wartość wynikowa.",
	"@@Remap_Raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@Remap_Remap-Definition-Type_tag0@@": "Wybierz opcję używaną do skonfigurowania ponownego przyporządkowania:",
	"@@Remap_Remap-Definition-Type_tag1@@": "Lista — określa zakres wartości pikseli, dla których mają być przyporządkowane wynikowe wartości piksela",
	"@@Remap_Remap-Table-Type_tag0@@": "Wybiera typ tabeli, która zostanie użyta do ponownego przyporządkowania rastra wejściowego:",
	"@@Remap_Remap-Table-Type_tag1@@": "Prosty — używa danych wejściowych <strong>Tabeli ponownego przyporządkowania</strong> do ponownego przyporządkowania wartości pikseli <strong>Pola wejściowego</strong> odpowiadającym im wartościom w parametrze <strong>Pole wynikowe</strong>. Ta metoda zapisuje w pamięci podręcznej tabelę ponownego przyporządkowania, co przyspiesza jej działanie.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dynamiczny — ta metoda nie zapisuje w pamięci podręcznej tabeli ponownego przyporządkowania i wywołuje zapytanie przy każdym wysyłanym żądaniu (przesunięcie, powiększenie lub odświeżenie). W przypadku modyfikacji tabeli kolejne żądanie spowoduje zgodne z nią ponowne przyporządkowanie wartości w sposób dynamiczny.",
	"@@Remap_Remap-Table-Type_tag9@@": "Ponowne przypisanie — w procesie ponownej klasyfikacji wykorzystywana jest specjalna tabela, której każdy wiersz określa ponowne przyporządkowanie wykonywane jedynie w obrębie granic każdego obiektu.",
	"@@Remap_Remap-Table_tag0@@": "Przechodzi do tabeli określającej wartości ponownego przyporządkowania.",
	"@@Reproject_Raster_tag0@@": "Zestaw danych rastrowych do ponownego odwzorowania lub ponownego próbkowania.",
	"@@Reproject_Spatial-Reference_tag0@@": "Układ współrzędnych używany do ponownego odwzorowania danych.",
	"@@Reproject_X-Cellsize_tag0@@": "Wymiar X, do którego dane będą ponownie próbkowane. To ustawienie jest opcjonalne. Wartość 0 lub niższa powoduje, że obwiednia wynikowa (zasięg i wielkość komórki) jest obliczana na podstawie rastra wejściowego.",
	"@@Reproject_X-Registration-Point_tag0@@": "Współrzędna x używana do określenia górnego lewego końca zestawu danych. Tę współrzędną należy określić w jednostkach odpowiadających nowym odniesieniom przestrzennym. Jeśli obydwa parametry, <strong>Rozmiar komórki X</strong> oraz <strong>Rozmiar komórki Y</strong> przyjmują wartość większą niż 0, są one używane wraz z parametrami <strong>Punkt rejestracji X</strong> oraz <strong>Punkt rejestracji Y</strong> do zdefiniowania obwiedni wynikowej.",
	"@@Reproject_Y-Cellsize_tag0@@": "Wymiar Y, do którego dane będą ponownie próbkowane. To ustawienie jest opcjonalne. Wartość 0 lub niższa powoduje, że obwiednia wynikowa (zasięg i wielkość komórki) jest obliczana na podstawie rastra wejściowego.",
	"@@Reproject_Y-Registration-Point_tag0@@": "Współrzędna y używana do określenia górnego lewego końca zestawu danych. Tę współrzędną należy określić w jednostkach odpowiadających nowym odniesieniom przestrzennym. Jeśli obydwa parametry, <strong>Rozmiar komórki X</strong> oraz <strong>Rozmiar komórki Y</strong> przyjmują wartość większą niż 0, są one używane wraz z parametrami <strong>Punkt rejestracji X</strong> oraz <strong>Punkt rejestracji Y</strong> do zdefiniowania obwiedni wynikowej.",
	"@@Resample_Input-Cellsize_tag0@@": "Rozmiar komórki piksela rastra wejściowego.",
	"@@Resample_Output-Cellsize_tag0@@": "Rozmiar komórki piksela rastra wynikowego. Choć rozmiar komórki można zmienić, zasięg zestawu danych rastrowych pozostanie taki sam. Ponowne próbkowanie na podstawie zdefiniowanego przez użytkownika rozmiaru komórki może być wykonywane znacznie wolniej niż próbkowanie wykonywane domyślnie przez system, ponieważ domyślne próbkowanie systemowe przetwarza minimalne ilości danych w możliwie jak najbardziej zbliżonej rozdzielczości.",
	"@@Resample_Raster_tag0@@": "Raster wejściowy, który ma być ponownie próbkowany.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>Najbliższy sąsiad</strong> — oblicza wynikową wartość piksela przy użyciu najbliższego piksela wejściowego. Piksele o wartości NoData pozostaną niezmienione w wynikowym zestawie danych rastrowych. Jest to zachowanie domyślne.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Interpolacja dwuliniowa</strong> — oblicza wartość piksela przy użyciu wartości czterech najbliższych pikseli ważonej na podstawie odległości. Przetwarzanie z użyciem tej metody jest wydajne pod względem obliczeniowym.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Splot sześcienny</strong> — nowa wartość piksela jest określana na podstawie dopasowania wygładzonej krzywej przechodzącej przez środki 16 najbliższych pikseli wejściowych.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Większość</strong> — oblicza wartość piksela przy użyciu wartości większości pikseli w 16 najbliższych pikselach. Piksele o wartości NoData pozostaną niezmienione w wynikowym zestawie danych rastrowych.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Interpolacja dwuliniowa plus</strong> — korzysta z metody <strong>Interpolacja dwuliniowa</strong> z wyjątkiem pikseli na krawędziach, które są zdefiniowane jako wartości NoData i nie są replikowane ani uwzględniane w obliczeniach. Funkcji <strong>Interpolacja dwuliniowa plus</strong> należy używać dla danych kafelkowych, ponieważ krawędzie będą lepiej dopasowane.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Rozmycie Gaussa</strong> — stosuje splot gaussowski względem rastra źródłowego i oblicza wartość piksela przy użyciu wartości czterech najbliższych pikseli z rastra rozmytego ważonej na podstawie odległości. Ta metoda nadaje się do usuwania szumu w ponownie próbkowanych danych oraz do próbkowania w dół do większego rozmiaru piksela.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Rozmycie Gaussa plus</strong> — korzysta z tej samej metody co <strong>Rozmycie Gaussa</strong>, z wyjątkiem pikseli na krawędziach, które są zdefiniowane jako wartości NoData i nie są replikowane ani uwzględniane w obliczeniach. Funkcji <strong>Rozmycie Gaussa</strong> plus należy używać dla danych kafelkowych, ponieważ krawędzie będą lepiej dopasowane.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Średnia</strong> — oblicza wartości pikseli z użyciem wartości średniej wszystkich nakładających się pikseli dla każdego piksela docelowego.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Minimum</strong> — oblicza wartość minimalną z użyciem wartości minimalnej wszystkich nakładających się pikseli. Piksele o wartości NoData pozostaną niezmienione w wynikowym zestawie danych rastrowych.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Maksimum</strong> — odpowiednia dla danych ciągłych, generuje bardziej wygładzony obraz wynikowy niż metoda ponownego próbkowania Najbliższy sąsiad.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Średnia wektora</strong> — oblicza średnią wektorową wielkości-kierunku z użyciem wszystkich pikseli, których dotyczą te obliczenia. Ta metoda ma zastosowanie tylko w przypadku rastrów z dwoma pasmami, które reprezentują wielkość i kierunek. Najpierw następuje przekształcenie rastra typu wielkość-kierunek w raster U-V, a następnie wyciągana jest średnia arytmetyczna ze wszystkich zaangażowanych pikseli w celu uzyskania współczynnika U-V piksela docelowego. Na koniec następuje ponowne przekształcenie w raster typu wielkość-kierunek.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Round-Down_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Round-Down_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Round-Down_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Round-Down_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Round-Down_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Round-Down_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Round-Down_Raster_tag0@@": "Wartości wejściowe, które mają zostać zaokrąglone w dół.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Round-Up_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Round-Up_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Round-Up_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Round-Up_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Round-Up_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Round-Up_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Round-Up_Raster_tag0@@": "Wartości wejściowe, które mają zostać zaokrąglone w górę.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "Minimalny rozmiar segmentu wyrażony w pikselach. Ta wartość jest powiązana z minimalną jednostką przyporządkowywania. Powoduje odfiltrowanie mniejszych bloków pikseli. Wszystkie segmenty mniejsze niż określona wartość zostaną scalone z najbardziej pasującym do nich segmentem sąsiadującym.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "Raster wejściowy, który ma zostać podzielony na segmenty.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "Granice segmentów są wyświetlane w postaci czarnej linii konturu wokół każdego segmentu. Dzięki temu łatwiej jest dostrzec przylegające segmenty o podobnych kolorach.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Niezaznaczone — granice segmentów nie są wyświetlane. Jest to opcja domyślna.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Zaznaczone — granice segmentów są wyświetlane w postaci czarnych linii konturu wokół każdego segmentu.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "Względna ważność oddzielania obiektów na podstawie charakterystyk przestrzennych.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "Prawidłowymi wartościami są liczby całkowite z zakresu od 1 do 20. Mniejsze wartości powodują powstawanie szerokich klas i większego wygładzania. Wyższa wartość jest odpowiednia do rozróżniania obiektów zajmujących mało przestrzeni i zgrupowanych razem. Na przykład w przypadku sceny urbanistycznej można sklasyfikować ogólne obiekty powierzchni nieprzepuszczalnej, korzystając z mniejszej wartości szczegółowych danych przestrzennych, a budynki i drogi można sklasyfikować jako oddzielne klasy, korzystając z większej wartości szczegółowych danych przestrzennych.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "Względna ważność oddzielania obiektów na podstawie charakterystyk koloru.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "Prawidłowymi wartościami są liczby zmiennoprzecinkowe z zakresu od 1,0 do 20,0. Mniejsze wartości powodują powstawanie szerokich klas i większego wygładzania. Wyższa wartość nadaje się do rozróżniania obiektów mających podobne charakterystyki spektralne. Na przykład zastosowanie wyższej wartości szczegółowych danych spektralnych w scenie zalesionej umożliwia lepsze rozróżnienie różnych gatunków drzew.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>Maksymalny rozmiar segmentu. Segmenty przekraczające podany rozmiar zostaną podzielone. Użyj tego parametru, aby uniknąć w warstwie wynikowej artefaktów będących wynikiem dużych segmentów. Wartość domyślna wynosi -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Wybierz jeden z czterech typów kalibracji:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta nought</strong> — tworzy dane wynikowe zawierające współczynnik jasności radaru.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma nought</strong> — rozpraszanie wsteczne powracające do anteny z jednostki powierzchni na ziemi, względem zakresu terenu.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gamma</strong> — pomiar energii emitowanej i powracającej umożliwia określenie wzorców anteny.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>Brak</strong> — korekta nie jest stosowana. Jest to opcja domyślna.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "Raster wejściowy Sentinel-1 Level-1 GRD lub SLC, który ma zostać przetworzony.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "Funkcja będzie korzystała z pliku LUT w celu zastosowania korekty termicznej lub usunięcia korekty, w zależności od zawartości pliku LUT.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "Raster wejściowy Sentinel-1, który ma zostać przetworzony.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "Funkcja będzie korzystała z pliku LUT w celu zastosowania korekty termicznej lub usunięcia korekty, w zależności od zawartości pliku LUT.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Set-Null_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Set-Null_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Set-Null_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Set-Null_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Set-Null_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Set-Null_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Set-Null_False-Raster_tag0@@": "Dane wejściowe, których wartości będą używane jako wynikowe wartości pikseli, jeśli warunek ma wartość fałsz (false). Może to być raster całkowitoliczbowy lub zmiennoprzecinkowy albo wartość stała.",
	"@@Set-Null_Raster_tag0@@": "Raster wejściowy reprezentujący wynik logicznej matematycznej funkcji rastrowej w postaci wartości logicznej. Wartości to 1 (prawda — true) lub 0 (fałsz — false). Może to być raster całkowitoliczbowy lub zmiennoprzecinkowy.",
	"@@Shaded-Relief_Altitude_tag0@@": "Wysokość określa kąt opisujący położenie słońca nad horyzontem i może zawierać się w przedziale od 0 do 90 stopni. Wartość 0 stopni oznacza, że słońce znajduje się na horyzoncie, czyli na tej samej płaszczyźnie poziomej, co struktura odniesienia. Wartość 90 stopni oznacza natomiast, że słońce znajduje się bezpośrednio nad płaszczyzną. Wartość domyślna to 45 stopni nad horyzontem.",
	"@@Shaded-Relief_Azimuth_tag0@@": "Azymut określa względne położenie słońca na horyzoncie (w stopniach). Położenie to jest określane przez kąt między położeniem słońca a północą, mierzony zgodnie z ruchem wskazówek zegara. Azymut o wartości 0 stopni oznacza północ, 90 stopni — wschód, 180 stopni — południe, a 270 stopni — zachód.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Wskaż, czy do wyświetlania cieniowanej rzeźby terenu będzie używana skala barw, czy mapa kolorów.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Skala barw</strong> — po wybraniu opcji <strong>Skala barw</strong> należy wybrać odpowiednią skalę barw.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Mapa kolorów</strong> — po wybraniu opcji <strong>Mapa kolorów</strong> należy podać plik mapy kolorów do użycia.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Wskazuje, czy domyślna interpolacja pikseli krawędzi zostanie wyłączona.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Niezaznaczone — dwuliniowe ponowne próbkowanie zostanie zastosowane jednakowo podczas ponownego próbkowania cieniowanej rzeźby terenu. Jest to opcja domyślna.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Zaznaczone — dwuliniowe ponowne próbkowanie zostanie zastosowane w ramach cieniowanej rzeźby terenu, z wyjątkiem miejsc wzdłuż krawędzi rastrów lub obok pikseli o wartości NoData. Te piksele zostaną wypełnione wartościami NoData, ponieważ zredukuje to ewentualne efekty ostrych krawędzi.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Użycie tej opcji pozwoli na uniknięcie artefaktów, które mogą pojawić się przy krawędziach rastra podczas ponownego próbkowania. Piksele wynikowe znajdujące się wzdłuż krawędzi rastra lub za pikselami niemającymi wartości zostaną zastąpione wartościami NoData. Z tego powodu zaleca się używanie tej opcji jedynie, gdy dostępne są inne rastry z nakładającymi się pikselami. Jeśli istnieją piksele nakładające się, w obszarach niezawierających danych zamiast braku danych wyświetlą się wartości nakładających się pikseli.",
	"@@Shaded-Relief_Raster_tag0@@": "Wejściowy raster wysokości.",
	"@@Shaded-Relief_Scaling_tag0@@": "Wynikowe cieniowanie jest skalowane dynamicznie przez zmianę współczynnika Z przy użyciu jednej z dwóch następujących opcji:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>Brak</strong> — brak skalowania. Jest to zalecane rozwiązanie w przypadku pojedynczego zestawu danych rastrowych pokrywającego obszar lokalny. Nie jest ono natomiast zalecane w odniesieniu do zestawów danych dotyczących świata, w których występują duże różnice w wysokości, ani map wieloskalowych, ponieważ powoduje wygenerowanie rzeźby terenu, która jest spłaszczona w małej skali.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Dostosowane</strong> — stosowana jest modyfikacja nieliniowa z użyciem domyślnych wartości <strong>Potęga rozmiaru pikseli</strong> oraz <strong>Współczynnik rozmiaru pikseli</strong>, która uwzględnia szeroki zakres zmian wysokości (skali) podczas powiększania i pomniejszania obrazu. Opcja <strong>Dostosowane</strong> jest zalecana w przypadku korzystania z zestawu danych obejmującego cały świat.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "Współczynnik z to współczynnik skalowania używany do konwertowania wartości wysokości w celu:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "Konwersji jednostek wysokości (takich jak metry lub stopy) na poziome jednostki współrzędnych zestawu danych, takie jak stopy, metry lub stopnie",
	"@@Shaded-Relief_Z-Factor_tag2@@": "Dodania pionowego wyniesienia dla efektu wizualnego",
	"@@Shaded-Relief_Z-Factor_tag3@@": "Wynikowe cieniowanie jest skalowane dynamicznie przez zmianę współczynnika Z przy użyciu jednej z dwóch następujących opcji:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>Brak</strong> — brak skalowania. Jest to zalecane rozwiązanie w przypadku pojedynczego zestawu danych rastrowych pokrywającego obszar lokalny. Nie jest ono natomiast zalecane w odniesieniu do zestawów danych dotyczących świata, w których występują duże różnice w wysokości, ani map wieloskalowych, ponieważ powoduje wygenerowanie rzeźby terenu, która jest spłaszczona w małej skali.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Dostosowane</strong> — stosowana jest modyfikacja nieliniowa z użyciem domyślnych wartości <strong>Potęga rozmiaru pikseli</strong> oraz <strong>Współczynnik rozmiaru pikseli</strong>, która uwzględnia szeroki zakres zmian wysokości (skali) podczas powiększania i pomniejszania obrazu. Opcja <strong>Dostosowane</strong> jest zalecana w przypadku korzystania z zestawu danych obejmującego cały świat.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Kontroluje źródło oświetlenia cieniowania rzeźby terenu.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Tradycyjne</strong> -- oblicza cieniowanie rzeźby terenu na podstawie pojedynczego kierunku oświetlenia. W celu kontrolowania lokalizacji źródła światła można skonfigurować opcje <strong>Azymut</strong> i <strong>Wysokość</strong>. Jest to opcja domyślna.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Wielokierunkowe</strong> -- łączy światło z wielu źródeł w celu zaprezentowania rozszerzonej wizualizacji terenu.",
	"@@Shaded-Relief_PSPower_tag0@@": "<strong>Potęga rozmiaru pikseli</strong> uwzględnia zmiany wysokości (lub skali) podczas powiększania i pomniejszania mapy przez wyświetlającego. Jest to wykładnik stosowany do rozmiaru pikseli w równaniu określającym tempo, z jakim zmienia się <strong>Współczynnik Z</strong>, aby uniknąć znaczącej utraty dokładności w odwzorowaniu rzeźby terenu.",
	"@@Shaded-Relief_PSPower_tag1@@": "Ten parametr jest prawidłowy tylko wtedy, gdy typem <strong>Skalowania</strong> jest <strong>Modyfikowane</strong>. Wartość domyślna wynosi 0,664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "<strong>Współczynnik rozmiaru pikseli</strong> uwzględnia zmiany skali podczas powiększania i pomniejszania mapy przez wyświetlającego. Określa on tempo, z jakim zmienia się <strong>Współczynnik Z</strong>.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Ten parametr jest prawidłowy tylko wtedy, gdy typem <strong>Skalowania</strong> jest <strong>Modyfikowane</strong>. Wartość domyślna wynosi 0,024.",
	"@@Sin_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Sin_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Sin_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Sin_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Sin_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Sin_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Sin_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Sin_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Sin_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Sin_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Sin_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Sin_Raster_tag0@@": "Dane wejściowe, dla których będą obliczane wartości funkcji sinus.",
	"@@SinH_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@SinH_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@SinH_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@SinH_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@SinH_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@SinH_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@SinH_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@SinH_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@SinH_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@SinH_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@SinH_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@SinH_Raster_tag0@@": "Dane wejściowe, dla których mają zostać obliczone wartości sinusa hiperbolicznego.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "Raster wejściowy, który pokazuje kierunek przepływu od każdej komórki.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "Raster kierunku przepływu może być utworzony w wyniku uruchomienia funkcji <strong>Kierunek przepływu</strong>.",
	"@@Slope_DEM_tag0@@": "Wejściowy raster wysokości.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Użycie tej opcji pozwoli na uniknięcie artefaktów, które mogą pojawić się przy krawędziach rastra podczas ponownego próbkowania. Piksele wynikowe znajdujące się wzdłuż krawędzi rastra lub za pikselami niemającymi wartości zostaną zastąpione wartościami NoData. Z tego powodu zaleca się używanie tej opcji jedynie, gdy dostępne są inne rastry z nakładającymi się pikselami. Jeśli istnieją piksele nakładające się, w obszarach niezawierających danych zamiast braku danych wyświetlą się wartości nakładających się pikseli.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Niezaznaczone — dwuliniowe ponowne próbkowanie zostanie zastosowane jednakowo podczas ponownego próbkowania spadku. Jest to opcja domyślna.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Zaznaczone — dwuliniowe ponowne próbkowanie zostanie zastosowane do spadku, z wyjątkiem miejsc wzdłuż krawędzi rastrów lub obok pikseli o wartości NoData. Te piksele zostaną wypełnione wartościami NoData, ponieważ zredukuje to ewentualne efekty ostrych krawędzi.",
	"@@Slope_Scaling_tag0@@": "Nachylenie spadku może zostać zwrócone jako wartość w stopniach lub procentowo. Dla pozycji <strong>Skalowanie</strong> są dostępne trzy opcje:",
	"@@Slope_Scaling_tag3@@": "<strong>Stopnie</strong> — nachylenie spadku jest obliczane w stopniach. Wartości należą do zakresu od 0 do 90.",
	"@@Slope_Scaling_tag5@@": "<strong>Percent_Rise</strong> — nachylenie spadku jest obliczane jako wartość procentowa. Wartości należą do zakresu od 0 do nieskończoności. Płaska powierzchnia to 0%, natomiast powierzchnia o nachyleniu 45 stopni to 100%. Wartość procentowa rośnie, gdy powierzchnia staje się coraz bardziej pionowa.",
	"@@Slope_Scaling_tag7@@": "<strong>Skalowane</strong> — nachylenie spadku jest obliczane w ten sam sposób, jak w przypadku opcji DEGREE, ale współczynnik Z jest dopasowywany pod kątem skali. Ta opcja korzysta z wartości <strong>Potęga rozmiaru pikseli</strong> i <strong>Współczynnik rozmiaru pikseli</strong>, które pozwalają na zmiany rozdzielczości (skalowanie) podczas powiększania lub pomniejszania przez przeglądającego. Jest to zalecane w przypadku używania zestawów danych obejmujących cały świat, a zwłaszcza wtedy, gdy spadek jest stosowany jako powierzchnia dla wizualizacji.",
	"@@Slope_Scaling_tag13@@": "Współczynnik Z jest dopasowywany z użyciem następującego równania:",
	"@@Slope_Scaling_tag14@@": "Skorygowany współczynnik Z = (Współczynnik Z) + (Rozmiar piksela)",
	"@@Slope_Scaling_tag15@@": "× (Współczynnik rozmiaru pikseli)",
	"@@Slope_Scaling_tag16@@": "Potęga rozmiaru pikseli",
	"@@Slope_Z-Factor_tag0@@": "<strong>Współczynnik Z</strong> to współczynnik skalowania używany do konwertowania wartości wysokości w celu:",
	"@@Slope_Z-Factor_tag3@@": "Konwersji jednostek wysokości (takich jak metry lub stopy) na poziome jednostki współrzędnych zestawu danych, takie jak stopy, metry lub stopnie",
	"@@Slope_Z-Factor_tag4@@": "Dodania pionowego wyniesienia dla efektu wizualnego",
	"@@Slope_PSPower_tag0@@": "<strong>Potęga rozmiaru pikseli</strong> uwzględnia zmiany wysokości (lub skali) podczas powiększania i pomniejszania mapy przez wyświetlającego. Jest to wykładnik stosowany do rozmiaru pikseli w równaniu określającym tempo, z jakim zmienia się <strong>Współczynnik Z</strong>, aby uniknąć znaczącej utraty dokładności w odwzorowaniu rzeźby terenu.",
	"@@Slope_PSPower_tag1@@": "Ten parametr jest prawidłowy tylko wtedy, gdy typem <strong>Skalowania</strong> jest <strong>Skalowane</strong>. Wartość domyślna wynosi 0,664.",
	"@@Slope_PSZFactor_tag0@@": "<strong>Współczynnik rozmiaru pikseli</strong> uwzględnia zmiany skali podczas powiększania i pomniejszania mapy przez wyświetlającego. Określa on tempo, z jakim zmienia się <strong>Współczynnik Z</strong>.",
	"@@Slope_PSZFactor_tag1@@": "Ten parametr jest prawidłowy tylko wtedy, gdy typem <strong>Skalowania</strong> jest <strong>Skalowane</strong>. Wartość domyślna wynosi 0,024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "Warstwa wejściowego rastra akumulowania przepływu.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "Można go utworzyć za pomocą funkcji <strong>Przepływ zbiorczy</strong>.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "Pole służące do przypisywania wartości do lokalizacji punktów wylewu.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "Lokalizacje wejściowych punktów wylewu, które mają zostać dociągnięte.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "W warstwie rastra wejściowego wszystkie komórki, które nie mają wartości NoData (tzn. mają wartość) będą traktowane jako punkty wylewu i zostaną dociągnięte.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "Maksymalna odległość (w jednostkach mapy) wyszukiwania komórki z wyższym przepływem zbiorczym.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Określa wartość średnią addytywnego szumu. Wyższa wartość średnia szumu spowoduje mniejsze wygładzanie, a mniejsza wartość — większe wygładzanie.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Ten parametr jest prawidłowy tylko wtedy, gdy <strong>Typ filtru</strong> ma wartość <strong>Filtr Lee</strong>, a <strong>Model szumów</strong> ma wartość <strong>Addytywny szum</strong> lub <strong>Addytywny i multiplikatywny szum</strong>. Wartość domyślna wynosi 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Określa zasięg efektu tłumienia wykładniczego podczas filtrowania. Większa wartość tłumienia przyczynia się do lepszego zachowania krawędzi, ale zmniejsza wygładzanie, podczas gdy mniejsza wartość poprawia wygładzanie. Zastosowanie wartości 0 powoduje taki sam efekt jak filtr nisko-przepustowy.",
	"@@Speckle_Damping-Factor_tag1@@": "Ten parametr jest prawidłowy tylko wtedy, gdy <strong>Typ filtru</strong> ma wartość <strong>Rozszerzony filtr Lee</strong> lub <strong>Filtr Frost</strong>. Wartość domyślna wynosi 1.",
	"@@Speckle_Filter-Size_tag0@@": "Określa rozmiar okna pikseli używanego do filtrowania szumu:",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "Określa typ filtru, który ma zostać użyty na potrzeby algorytmu wygładzania w celu usunięcia szumu punktowego:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Filtr Lee</strong> — zmniejsza szum punktowy przez zastosowanie filtru przestrzennego do każdego piksela obrazu, co powoduje filtrowanie danych na podstawie lokalnej statystyki obliczonej w obrębie kwadratowego okna. Ten filtr jest pomocny podczas wygładzania danych zawierających echa punktowe, które mają addytywny lub multiplikatywny komponent. Jest to opcja domyślna.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Rozszerzony filtr Lee</strong> — zaadoptowana wersja filtru Lee uwzględniająca wartości <strong>Współczynnik tłumienia</strong> i <strong>Liczba spojrzeń</strong>. Ten filtr jest pomocny podczas zmniejszania szumu punktowego z jednoczesnym zachowaniem informacji o teksturze.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Filtr Frost</strong> — zmniejsza szum punktowy za pomocą symetrycznego filtru kołowego z tłumieniem wykładniczym, który korzysta z lokalnej statystyki w obrębie poszczególnych okien filtru. Ten filtr jest pomocny podczas zmniejszania szumu punktowego z jednoczesnym zachowaniem krawędzi w obrazowaniu radarowym.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Filtr Kuan</strong> — podobnie jak filtr Lee, ten filtr stosuje filtr przestrzenny do każdego piksela obrazu i filtruje dane na podstawie lokalnej statystyki obliczonej w obrębie kwadratowego okna. Ten filtr jest pomocny podczas zmniejszania szumu punktowego z jednoczesnym zachowaniem krawędzi w obrazowaniu radarowym.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Określa wartość średnią multiplikatywnego szumu. Wyższa wartość średnia szumu spowoduje mniejsze wygładzanie, a mniejsza wartość — większe wygładzanie.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Ten parametr jest prawidłowy tylko wtedy, gdy <strong>Typ filtru</strong> ma wartość <strong>Filtr Lee</strong>, a <strong>Model szumów</strong> ma wartość <strong>Addytywny szum</strong> lub <strong>Addytywny i multiplikatywny szum</strong>. Wartość domyślna wynosi 1.",
	"@@Speckle_Noise-Model_tag0@@": "Określa typ szumu, który obniża jakość obrazowania radarowego:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Multiplikatywny szum</strong> — losowy szum sygnału, który jest zwielokrotniany w odpowiednim sygnale podczas przechwytywania lub transmisji",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Addytywny szum</strong> — losowy szum sygnału, który jest dodawany do odpowiedniego sygnału podczas przechwytywania lub transmisji",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Addytywny i multiplikatywny szum</strong> — oba modele szumu",
	"@@Speckle_Noise-Variance_tag0@@": "Określa wariancję szumów obrazowania radarowego.",
	"@@Speckle_Noise-Variance_tag1@@": "Ten parametr jest prawidłowy tylko wtedy, gdy <strong>Typ filtru</strong> ma wartość <strong>Filtr Lee</strong>, a <strong>Model szumów</strong> ma wartość <strong>Addytywny szum</strong> lub <strong>Addytywny i multiplikatywny szum</strong>. Wartość domyślna wynosi 0,25.",
	"@@Speckle_Number-of-Looks_tag0@@": "Określa liczbę spojrzeń obrazu, które kontrolują wygładzanie obrazu i szacują wariancję szumów. Mniejsza wartość powoduje większe wygładzanie, a większa wartość umożliwia zachowanie większej liczby obiektów obrazu.",
	"@@Speckle_Number-of-Looks_tag1@@": "Ten parametr jest prawidłowy tylko wtedy, gdy <strong>Typ filtru</strong> ma wartość <strong>Filtr Lee</strong>, a <strong>Model szumów</strong> ma wartość <strong>Multiplikatywny szum</strong> albo gdy <strong>Typ filtru</strong> ma wartość <strong>Filtr Kuan</strong>. Wartość domyślna wynosi 1.",
	"@@Speckle_Raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "Macierz używana do konwersji rastra wejściowego.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "Równanie używane do przeprowadzania tej konwersji to:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Wynikowe pasmo Band_R = Weight_P * Band_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "gdzie:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Band_R to pasmo wynikowe, a R to liczba z zakresu od 1 do liczby pasm wynikowych.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Weight_P to rozdzielona przecinkami lista wag, po jednej dla każdego pasma wejściowego. Suma wag poszczególnych pasm powinna wynosić 1.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "Band_C to obraz wejściowy, a C to liczba z zakresu do 1 do liczby pasm obrazu wejściowego.",
	"@@Spectral-Conversion_Raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@Spectral-Conversion_Raster_tag1@@": "Może to być zestaw danych rastrowych, zestaw danych mozaiki lub usługa rastrowa.",
	"@@Spectral-Conversion_Size_tag0@@": "Liczba wierszy i kolumn w <strong>macierzy konwersji</strong>.",
	"@@Square_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Square_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Square_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Square_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Square_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Square_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Square_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Square_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Square_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Square_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Square_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Square_Raster_tag0@@": "Wartości wejściowe, które mają zostać podniesione do kwadratu.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Square-Root_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Square-Root_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Square-Root_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Square-Root_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Square-Root_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Square-Root_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Square-Root_Raster_tag0@@": "Wartości wejściowe używane do znalezienia pierwiastka kwadratowego.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Konfiguruje wartości danych statystycznych dla każdego pasma.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "Kolumna ${Histogram} jest polem tylko do odczytu, które może być uzupełnione za pomocą parametru <strong>Import</strong>. Po zaimportowaniu pliku z histogramem kolumna ${Histogram} zostanie oznaczona jako <strong>Zdefiniowane</strong>.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Importowanie informacji o danych statystycznych i histogramie z istniejącego rastra lub pliku XML.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "Raster wejściowy, w którym mają być zdefiniowane dane statystyczne i histogram.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Określa wartości danych statystycznych dla każdego pasma.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "Raster wejściowy, który pokazuje kierunek przepływu od każdej komórki.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "Raster kierunku przepływu może być utworzony w wyniku uruchomienia funkcji <strong>Kierunek przepływu</strong>.",
	"@@Stream-Link_Stream-Raster_tag0@@": "Raster wejściowy reprezentujący liniową sieć strumieniową.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "Raster wejściowy, który pokazuje kierunek przepływu od każdej komórki.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "Raster kierunku przepływu może być utworzony w wyniku uruchomienia funkcji <strong>Kierunek przepływu</strong>.",
	"@@Stream-Order_Order-Method_tag0@@": "Metoda umożliwiająca przypisywanie priorytetu strumieniom.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLERA</strong> — metoda ustawiania priorytetów strumieni zaproponowana przez Strahlera w 1952 r. Priorytet strumienia zostaje zwiększony, jeśli strumienie o takim samym priorytecie się krzyżują. Skrzyżowanie łącza o pierwszym w kolejności priorytecie i łącza o drugim w kolejności priorytecie da w wyniku łącze o drugim w kolejności priorytecie, a nie o trzecim w kolejności priorytecie. Jest to opcja domyślna.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVA</strong> — metoda ustawiania priorytetów strumieni według wielkości zaproponowana przez Shreva w 1967 r. Wszystkim łączom bez dopływów jest przypisywana wielkość (priorytet) o wartości 1. Wielkości dodają się w kierunku spadku. Kiedy dwa łącza się krzyżują, ich wielkości są dodawane i przypisywane do łącza w kierunku spadku.",
	"@@Stream-Order_Stream-Raster_tag0@@": "Wejściowy raster strumieniowy reprezentujący liniową sieć strumieniową.",
	"@@Stretch_Auto-Gamma_tag0@@": "Użyj opcji <strong>Automatyczna korekta gamma</strong>, aby obliczyć współczynnik gamma na podstawie statystyki i histogramu zestawu danych. Statystyka może być oszacowana przez samą funkcję lub przez oprogramowanie, jeśli zostanie wybrana warstwa.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Zaznacz pole wyboru <strong>Dynamiczna regulacja zakresu</strong>, aby statystyka była obliczana tylko na podstawie pikseli wyświetlanych na ekranie. Ta opcja jest ogólnie stosowana, kiedy obraz zostanie opublikowany i użyty w aplikacji internetowej, która nie może wykonać tego typu rozciągnięcia.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Zaznacz pole wyboru <strong>Oszacuj statystykę</strong>, jeśli chcesz oszacować statystykę. Szacowana statystyka jest obliczana na podstawie próbkowania o rozdzielczości 1000 na 1000, począwszy od środka rastra. Jest ona używana na potrzeby rozciągania.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Jeśli zaznaczono to pole wyboru i raster zawiera statystykę lub wprowadzono wartości w tabeli <strong>Statystyka</strong>, zostaną one użyte zamiast oceniania, chyba że rozciąganie wymaga histogramu. Jeśli rozciąganie wymaga histogramu, który nie istnieje, zostanie on oszacowany.",
	"@@Stretch_Gamma_tag0@@": "Użyj suwaka, aby ręcznie skonfigurować wartość <strong>Gamma</strong>.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Podaj wartość n jako liczbę odchyleń standardowych, które mają zostać użyte. Ta metoda służy do podkreślenia, w jakim stopniu wartości obiektu różnią się od wartości średniej. Najlepiej sprawdza się ona dla danych z rozkładem normalnym.",
	"@@Stretch_Output-Maximum_tag0@@": "Konfigurowanie najwyższej wartości piksela dla histogramu.",
	"@@Stretch_Output-Maximum_tag1@@": "Wartości <strong>Wynikowa wartość minimalna</strong> i <strong>Wynikowa wartość maksymalna</strong> służą do konfigurowania zakresu wartości, których kontrast zostanie następnie liniowo rozciągnięty.",
	"@@Stretch_Output-Minimum_tag0@@": "Konfigurowanie najniższej wartości piksela dla histogramu.",
	"@@Stretch_Output-Minimum_tag1@@": "Wartości <strong>Wynikowa wartość minimalna</strong> i <strong>Wynikowa wartość maksymalna</strong> służą do konfigurowania zakresu wartości, których kontrast zostanie następnie liniowo rozciągnięty.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Określanie wartości procentowej górnych wartości, które mają zostać wykluczone z rozciągania.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "Prawidłowymi wartościami są liczby z zakresu od 0 do 99.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Określanie wartości procentowej dolnych wartości, które mają zostać wykluczone z rozciągania.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "Prawidłowymi wartościami są liczby z zakresu od 0 do 99.",
	"@@Stretch_Raster_tag0@@": "Raster wejściowy, dla którego ma zostać wykonane rozciąganie kontrastu.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "Wartość <strong>Poziom siły</strong> określa, jaka część funkcji sigmoidalnej zostanie użyta podczas rozciągania. Ustawienie niskiej wartości, na przykład 1, spowoduje użycie tylko środkowej części krzywej, w wyniku czego generowane kolory są matowe i niewyraźne. Ustawienie wysokiej wartości, na przykład 6, spowoduje użycie całej krzywej, w wyniku czego generowane kolory są wyraźne i ostre.",
	"@@Stretch_Statistics_tag0@@": "W oknie dialogowym można wprowadzić własne statystyki. Domyślnie statystyka jest pobierana z danych, ale jeśli zostaną wprowadzone wartości dla tego parametru, zostaną one użyte.",
	"@@Stretch_Type_tag0@@": "Wybierz metodę rozciągania:",
	"@@Stretch_Type_tag1@@": "Brak — brak rozciągnięcia kontrastu",
	"@@Stretch_Type_tag2@@": "OdchStd — rozciągnięcie zgodne z odchyleniem standardowym",
	"@@Stretch_Type_tag3@@": "MinMaks — rozciągnięcie typu minimum-maksimum",
	"@@Stretch_Type_tag4@@": "Procentowa wartość MinMaks — procentowe rozciągnięcie przycięcia",
	"@@Stretch_Type_tag5@@": "Sigmoid — rozciągnięcie sigmoidalne",
	"@@Stretch_Use-Gamma_tag0@@": "Zaznacz pole wyboru <strong>Użyj korekty gamma</strong>, jeśli chcesz zastosować rozciągnięcie gamma.",
	"@@Swath_Cellsize_tag0@@": "Wielkość komórki rastra wynikowego zostanie wykryta automatycznie. To zachowanie można jednak zmienić. Choć rozmiar komórki można zmienić, zasięg zestawu danych rastrowych pozostanie taki sam.",
	"@@Swath_Interpolation-Method_tag0@@": "Dla tej funkcji dostępne są cztery metody przepróbkowania:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Najbliższy sąsiad</strong> — oblicza wartość piksela przy użyciu najbliższego piksela. Jeśli nie istnieje piksel źródłowy, w danych wynikowych nie można utworzyć żadnego nowego piksela.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Interpolacja dwuliniowa</strong> — oblicza wartość piksela przy użyciu wartości czterech najbliższych pikseli ważonej na podstawie odległości.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>Pokrywanie liniowe</strong> — za pomocą trójkątnej, nieregularnej sieci rozchodzącej się ze środka każdej komórki w nieregularnym rastrze interpoluje powierzchnię, która jest następnie konwertowana na regularny raster.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Naturalne sąsiedztwo</strong> — przeprowadza przypisanie najbliższego sąsiada i jest to najszybsza metoda interpolacji. Jest ona stosowana głównie w przypadku danych dyskretnych, np. klasyfikacji zagospodarowania gruntów, ponieważ nie spowoduje zmiany wartości komórek. Maksymalny błąd przestrzenny wynosi połowę rozmiaru komórki.",
	"@@Swath_Raster_tag0@@": "Raster o nieregularnej siatce do przepróbkowania.",
	"@@Tan_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Tan_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Tan_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Tan_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Tan_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Tan_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Tan_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Tan_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Tan_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Tan_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Tan_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Tan_Raster_tag0@@": "Dane wejściowe, dla których będą obliczane wartości funkcji tangens.",
	"@@TanH_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@TanH_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@TanH_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@TanH_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@TanH_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@TanH_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@TanH_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@TanH_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@TanH_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@TanH_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@TanH_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@TanH_Raster_tag0@@": "Dane wejściowe, dla których będą obliczane wartości funkcji tangens hiperboliczny.",
	"@@Tasseled-Cap_Raster_tag0@@": "Raster wejściowy, na którym ma zostać wykonana transformacja Tasseled Cap.",
	"@@Times_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Times_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Times_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Times_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Times_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Times_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Times_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Times_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Times_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Times_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Times_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Times_Raster_tag0@@": "Dane wejściowe zawierające wartości, które mają zostać pomnożone.",
	"@@Times_Raster_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Times_Raster2_tag0@@": "Dane wejściowe zawierające wartości, przez które zostaną pomnożone pierwsze dane wejściowe.",
	"@@Times_Raster2_tag1@@": "Jako dane wejściowe dla tego parametru można podać stałą, jeśli dla drugiego parametru zostanie podany raster.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Wybierz typ przestawienia do wykonania lub podaj niestandardowy:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Cirrus Landsat 8",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Chmura Landsat 8",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Cień chmury Landsat 8",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Wyznaczone wypełnienie Landsat 8",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Pominięta ramka Landsat 8",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Śnieg/Lód Landsat 8",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Okluzja terenu Landsat 8",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Roślinność Landsat 8",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Woda Landsat 8",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Zdefiniowane przez użytkownika",
	"@@Transpose-Bits_Constant-Value_tag0@@": "Opcjonalna wartość, która zostanie użyta do wypełnienia wszystkich bitów, które nie są używane podczas przestawiania. Ten parametr jest dostępny, gdy parametr <strong>Utwórz wypełnienie rastra ze stałej</strong> jest skonfigurowany na wartość <strong>Tak</strong>.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Określa zestaw danych rastrowych, który zostanie użyty do wypełnienia wszystkich bitów, które nie są używane podczas przestawiania. Ten parametr jest dostępny, gdy parametr <strong>Utwórz wypełnienie rastra ze stałej</strong> jest skonfigurowany na wartość <strong>Nie</strong>.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Utwórz wypełnienie rastra na podstawie wartości stałej:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Tak</strong> — raster zostanie wygenerowany przy użyciu wartości stałej na potrzeby wypełniania bitów, które nie są używane podczas przestawiania. Jest to opcja domyślna.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>Nie</strong> — raster zostanie wygenerowany przy użyciu wartości pikseli z istniejącego zestawu danych rastrowych na potrzeby wypełniania bitów, które nie są używane podczas przestawiania.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "Tabela tylko do odczytu zawierająca wynikowe bity i dane wejściowe, które zajmą ich miejsce.",
	"@@Transpose-Bits_Raster_tag0@@": "Raster wejściowy do rozpakowania i ponownego przyporządkowania.",
	"@@Unit-Conversion_From-Unit_tag0@@": "Oryginalny typ jednostek pikseli.",
	"@@Unit-Conversion_Raster_tag0@@": "Raster wejściowy, który będzie zawierać przekształcone jednostki.",
	"@@Unit-Conversion_To-Unit_tag0@@": "Przekształcony typ jednostek pikseli.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Określa sposób mierzenia komponentu kierunku.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Geograficzny — kąt 0° wskazuje północ, a kąt 90° wschód",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Arytmetyczny — kąt 0° wskazuje wschód, a kąt 90° północ",
	"@@Vector-Field_Input-Data-Type_tag0@@": "Typ pola wektorowego reprezentowany przez dane wejściowe.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Nieznany — nie wiadomo, czy dane wejściowe reprezentują typ U-V, czy Wielkość-kierunek.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V — dane wejściowe reprezentują komponenty U i V.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Wielkość-kierunek — dane wejściowe reprezentują wielkość i kierunek.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Określa typ pola wektorowego reprezentowany przez dane wynikowe.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Wielkość-kierunek — dane wynikowe reprezentują wielkość i kierunek.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V — dane wynikowe reprezentują komponenty U i V.",
	"@@Vector-Field_Raster1_tag0@@": "Pierwszy raster wejściowy.",
	"@@Vector-Field_Raster1_tag1@@": "Będzie to wartość U lub wielkość.",
	"@@Vector-Field_Raster2_tag0@@": "Drugi raster wejściowy.",
	"@@Vector-Field_Raster2_tag1@@": "Będzie to wartość V lub kierunek.",
	"@@Viewshed_Analysis-Method_tag0@@": "Wybierz metodę obliczania widoczności. Ta opcja umożliwia zwiększenie wydajności kosztem nieznacznego zmniejszenia dokładności.",
	"@@Viewshed_Analysis-Method_tag1@@": "Wszystkie pola widzenia — obliczanie pola widzenia jest wykonywane względem każdego piksela w rastrze w celu zdefiniowania widocznych obszarów. To jest metoda domyślna.",
	"@@Viewshed_Analysis-Method_tag2@@": "Pola widzenia po obwodzie — obliczanie pola widzenia jest wykonywane tylko względem pikseli na obwodzie widocznych obszarów w celu zdefiniowania obszarów widoczności. Ta metoda zapewnia większą wydajność niż metoda <strong>Wszystkie pola widzenia</strong>, ponieważ w obliczeniach jest uwzględniana mniejsza liczba pól widzenia.",
	"@@Viewshed_Analysis-Type_tag0@@": "Wybierz typ analizy widoczności, który ma zostać wykonany, określając stopień widoczności poszczególnych komórek dla obserwatorów lub identyfikując dla każdej lokalizacji na powierzchni, którzy obserwatorzy są widoczni.",
	"@@Viewshed_Analysis-Type_tag1@@": "Częstotliwość — dane dotyczące tego, ile razy każda lokalizacja piksela na wejściowym rastrze powierzchni jest widoczna z wejściowych lokalizacji obserwacyjnych (jako punkty lub jako wierzchołki poliliniowych obiektów obserwatora). Jest to opcja domyślna.",
	"@@Viewshed_Analysis-Type_tag2@@": "Obserwatorzy — dane wynikowe identyfikują dokładnie, które punkty obserwatora są widoczne z poszczególnych lokalizacji na powierzchni rastrowej. W przypadku tego typu analizy maksymalna dozwolona liczba wejściowych obserwatorów wynosi 32.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Ta wartość definiuje kąt końcowy poziomego zasięgu skanowania. Ta wartość powinna być podana w stopniach z zakresu od 0 do 360,0, gdzie 0 oznacza kierunek północny. Wartość domyślna wynosi 360,0.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Może to być pole w wejściowym zestawie danych <strong>Obiekty obserwatorów</strong> lub wartość liczbowa. Jeśli dla tego parametru zostanie ustawiona wartość, zostanie ona zastosowana dla wszystkich obserwatorów. Aby podać inne wartości dla każdego obserwatora, skonfiguruj dla tego parametru pole w zestawie danych <strong>Obiekty obserwatorów</strong>.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Ta wartość definiuje kąt początkowy poziomego zasięgu skanowania. Ta wartość powinna być podana w stopniach z zakresu od 0 do 360,0, gdzie 0 oznacza kierunek północny. Wartość domyślna wynosi 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Może to być pole w wejściowym zestawie danych <strong>Obiekty obserwatorów</strong> lub wartość liczbowa. Jeśli dla tego parametru zostanie ustawiona wartość, zostanie ona zastosowana dla wszystkich obserwatorów. Aby podać inne wartości dla każdego obserwatora, skonfiguruj dla tego parametru pole w zestawie danych <strong>Obiekty obserwatorów</strong>.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "Typ odległości dla parametru Promień wewnętrzny.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Niezaznaczone — wartość <strong>Promień wewnętrzny</strong> powinna zostać zinterpretowana jako odległość dwuwymiarowa. Jest to opcja domyślna.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Zaznaczone — wartość <strong>Promień wewnętrzny</strong> powinna zostać zinterpretowana jako odległość trójwymiarowa.",
	"@@Viewshed_Inner-Radius_tag0@@": "Ta wartość definiuje początkową (minimalną) odległość, od której jest określana widoczność. Piksele znajdujące się bliżej niż wynosi ta odległość są uznawane za niewidoczne w danych wynikowych, ale nadal mogą blokować widoczność pikseli znajdujących się między <strong>promieniem wewnętrznym</strong> i <strong>promieniem zewnętrznym</strong>. Wartość domyślna wynosi 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "Może to być pole w wejściowym zestawie danych <strong>Obiekty obserwatorów</strong> lub wartość liczbowa. Jeśli dla tego parametru zostanie ustawiona wartość, zostanie ona zastosowana dla wszystkich obserwatorów. Aby podać inne wartości dla każdego obserwatora, skonfiguruj dla tego parametru pole w zestawie danych <strong>Obiekty obserwatorów</strong>.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Ta wartość jest używana w celu zdefiniowania wysokości powierzchni punktów lub wierzchołków obserwatora.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Może to być pole w wejściowym zestawie danych <strong>Obiekty obserwatorów</strong> lub wartość liczbowa. Jeśli wartość tego parametru nie zostanie podana, wysokość obserwatora zostanie uzyskana z rastra powierzchni przy użyciu interpolacji bilinearnej. Jeśli dla tego parametru zostanie skonfigurowana wartość, to będzie ona stosowana do wszystkich obserwatorów. Aby podać inne wartości dla każdego obserwatora, skonfiguruj dla tego parametru pole w zestawie danych <strong>Obiekty obserwatorów</strong>.",
	"@@Viewshed_Observer-Features_tag0@@": "Wymagana wejściowa klasa obiektów identyfikująca lokalizacje obserwatora. Mogą to być obiekty punktowe, wielopunktowe lub poliliniowe.",
	"@@Viewshed_Observer-Features_tag1@@": "Podczas obliczania widoczności wejściowa klasa obiektów jest przekształcana w trójwymiarowy, geocentryczny układ współrzędnych. Obserwatorzy znajdujący się poza zasięgiem rastra powierzchni lub w komórkach o wartości NoData nie będą uwzględniani w obliczeniach.",
	"@@Viewshed_Observer-Offset_tag0@@": "Ta wartość wskazuje pionową odległość (w jednostkach powierzchni), która ma zostać dodana do wysokości obserwatora. Ta wartość powinna być dodatnią liczbą całkowitą lub zmiennoprzecinkową.",
	"@@Viewshed_Observer-Offset_tag1@@": "Może to być pole w wejściowym zestawie danych <strong>Obiekty obserwatorów</strong> lub wartość liczbowa. Jeśli dla tego parametru zostanie ustawiona wartość, zostanie ona zastosowana dla wszystkich obserwatorów. Aby podać inne wartości dla każdego obserwatora, skonfiguruj dla tego parametru pole w zestawie danych <strong>Obiekty obserwatorów</strong>.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Typ odległości dla parametru Promień zewnętrzny.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Niezaznaczone — wartość <strong>Promień zewnętrzny</strong> powinna zostać zinterpretowana jako odległość dwuwymiarowa. Jest to opcja domyślna.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Zaznaczone — wartość <strong>Promień wewnętrzny</strong> powinna zostać zinterpretowana jako odległość trójwymiarowa.",
	"@@Viewshed_Outer-Radius_tag0@@": "Ta wartość definiuje maksymalną odległość, od której jest określana widoczność. Piksele znajdujące się poza tą odległością są wykluczone z analizy.",
	"@@Viewshed_Outer-Radius_tag1@@": "Może to być pole w wejściowym zestawie danych <strong>Obiekty obserwatorów</strong> lub wartość liczbowa. Jeśli dla tego parametru zostanie ustawiona wartość, zostanie ona zastosowana dla wszystkich obserwatorów. Aby podać inne wartości dla każdego obserwatora, skonfiguruj dla tego parametru pole w zestawie danych <strong>Obiekty obserwatorów</strong>.",
	"@@Viewshed_Raster_tag0@@": "Wymagany wejściowy raster powierzchni. Może to być raster całkowitoliczbowy lub zmiennoprzecinkowy.",
	"@@Viewshed_Raster_tag1@@": "Podczas obliczania widoczności dane wejściowe są przekształcane w trójwymiarowy, geocentryczny układ współrzędnych. Komórki o wartościach NoData w rastrze wejściowym nie blokują możliwości określania widoczności.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Współczynnik załamania światła widzialnego w powietrzu.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "Wartość domyślna wynosi 0,13.",
	"@@Viewshed_Surface-Offset_tag0@@": "Ta wartość wskazuje pionową odległość (w jednostkach powierzchni), która ma zostać dodana do wartości Z każdego piksela docelowego uznanego za widoczny. Ta wartość powinna być dodatnią liczbą całkowitą lub zmiennoprzecinkową.",
	"@@Viewshed_Surface-Offset_tag1@@": "Może to być pole w wejściowym zestawie danych <strong>Obiekty obserwatorów</strong> lub wartość liczbowa. Jeśli dla tego parametru zostanie ustawiona wartość, zostanie ona zastosowana dla wszystkich obserwatorów. Aby podać inne wartości dla każdego obserwatora, skonfiguruj dla tego parametru pole w zestawie danych <strong>Obiekty obserwatorów</strong>.",
	"@@Viewshed_Vertical-Error_tag0@@": "Wielkość niepewności mierzona jako błąd średniej kwadratowej (RMSE) w wartościach wysokości powierzchni. Jest to wartość zmiennoprzecinkowa reprezentująca oczekiwany błąd wartości wejściowej powierzchni. Jeśli dla tego parametru przypisano wartość większą niż 0, wynikowy raster widoczności będzie liczbą zmiennoprzecinkową. W tym przypadku każda wartość piksela w wynikowym rastrze widoczności reprezentuje sumę prawdopodobieństw, że komórka będzie widoczna dla któregokolwiek z obserwatorów.",
	"@@Viewshed_Vertical-Error_tag1@@": "Jeśli opcja <strong>Rodzaj analizy</strong> ma wartość <strong>Obserwatorzy</strong> lub opcja <strong>Metoda analizy</strong> ma wartość <strong>Pola widzenia po obwodzie</strong>, ten parametr jest wyłączony.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Ta wartość definiuje limit dolnego kąta pionowego skanu poniżej płaszczyzny poziomej. Ta wartość powinna być określana w stopniach w zakresie od -90,0 do 0, w liczbach całkowitych lub zmiennoprzecinkowych. Wartość domyślna wynosi -90,0.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Może to być pole w wejściowym zestawie danych <strong>Obiekty obserwatorów</strong> lub wartość liczbowa. Jeśli dla tego parametru zostanie ustawiona wartość, zostanie ona zastosowana dla wszystkich obserwatorów. Aby podać inne wartości dla każdego obserwatora, skonfiguruj dla tego parametru pole w zestawie danych <strong>Obiekty obserwatorów</strong>.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Ta wartość definiuje limit górnego kąta pionowego skanu powyżej płaszczyzny poziomej. Ta wartość powinna być określana w stopniach w zakresie od 0 do 90,0, w liczbach całkowitych lub zmiennoprzecinkowych. Wartość domyślna wynosi 90,0.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Może to być pole w wejściowym zestawie danych <strong>Obiekty obserwatorów</strong> lub wartość liczbowa. Jeśli dla tego parametru zostanie ustawiona wartość, zostanie ona zastosowana dla wszystkich obserwatorów. Aby podać inne wartości dla każdego obserwatora, skonfiguruj dla tego parametru pole w zestawie danych <strong>Obiekty obserwatorów</strong>.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "Raster wejściowy, który pokazuje kierunek przepływu od każdej komórki.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "Raster kierunku przepływu może być utworzony w wyniku uruchomienia funkcji <strong>Kierunek przepływu</strong>.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "Lokalizacje wejściowych punktów wylewu.",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Ten raster reprezentuje komórki, powyżej których zostanie określony obszar spływu (zlewnia). Jako komórki źródłowe zostaną użyte wszystkie komórki, które nie mają wartości Brak danych.",
	"@@Watershed_Pour-Point-Field_tag0@@": "Pole służące do przypisywania wartości do lokalizacji punktów wylewu.",
	"@@Watershed_Pour-Point-Field_tag1@@": "Dla zestawu danych punktów wylewu domyślnie jest używana wartość ${Value}.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Weighted-Overlay_Scales_tag0@@": "Zakres nowych wartości, według których zostaną ponownie przyporządkowane stare wartości.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "Tabela nakładania ważonego składa się z czterech części:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Warstwa — wszystkie rastry wejściowe muszą być typu całkowitoliczbowego.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Wpływ — każdy raster wejściowy jest ważony w zależności od jego ważności lub jego wpływu, jako względna wartość procentowa. Suma procentowych wag wpływu musi wynosić 100, a każda waga musi być określona wartościami całkowitoliczbowymi.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Pole — pole całkowitoliczbowe lub znakowe w rastrze wejściowym, które będzie używane na potrzeby ważenia.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Tabela ponownego przyporządkowania — do każdej wartości w rastrze wejściowym jest przypisywana nowa wartość skali na podstawie tabeli ponownego przyporządkowania. Wartość skali może być prawidłową wartością lub wartością NoData.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "Tabela sumy ważonej jest definiowana przez trzy właściwości:",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Warstwa — raster poddawany ważeniu.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Pole — pole rastra, które ma zostać użyte na potrzeby ważenia.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Waga — wartość wagi, przez którą będzie mnożony raster. Może to być dowolna dodatnia lub ujemna wartość dziesiętna.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "Raster z pojedynczym pasmem, w którym wartości pikseli reprezentują temperaturę powietrza w otoczeniu.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "Jednostka miary powiązana z wejściowym rastrem temperatur. Dostępne jednostki danych wejściowych to stopnie Celsjusza, Fahrenheita i Kelwina.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "Jednostka miary powiązana z rastrem wynikowym. Dostępne jednostki danych wynikowych to stopnie Celsjusza, Fahrenheita i Kelwina.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "Raster z pojedynczym pasmem, w którym wartości pikseli reprezentują prędkość wiatru.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Definiuje jednostkę miary na potrzeby rastra prędkości wiatru:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Mile na godzinę (mph)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Kilometry na godzinę (km/h)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Metry na sekundę (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Stopy na sekundę (st/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Węzły (kn)",
	"@@Zonal-Remap_Background-Value_tag0@@": "Początkowa wartość piksela w rastrze wynikowym przed wykonaniem ponownego przyporządkowania pikseli wejściowych.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "Wartość, która zostanie przypisana do piksela niespełniającego żadnego z warunków ustawionych w <strong>tabeli atrybutów strefowych</strong>.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "Będzie to również wartość piksela wynikowego, jeśli parametr <strong>Nazwa pola wartości wynikowej</strong> nie zostanie podany lub jeśli wartość wynikowa odpowiedniego progu strefowego nie zostanie podana w <strong>tabeli atrybutów strefowych</strong>.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "Nazwa pola zawierającego wartość maksymalną, poniżej której piksel wejściowy będzie podlegać ponownemu przyporządkowaniu.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Jeśli nie zostanie podana lub jeśli pole zawiera wartość null, wartości pikseli nie będą sprawdzane pod kątem wartości maksymalnej.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "Nazwa pola zawierającego wartość minimalną, powyżej której piksel wejściowy będzie podlegać ponownemu przyporządkowaniu.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Jeśli nie zostanie podana lub jeśli pole zawiera wartość null, wartości pikseli nie będą sprawdzane pod kątem wartości minimalnej.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "Nazwa pola zawierającego wartość docelową, którą uzyska piksel wejściowy po ponownym przyporządkowaniu.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Jeśli nie zostanie podana lub jeśli pole zawiera wartość null, wartości pikseli po ponownym przyporządkowaniu zostaną skonfigurowane zgodnie z parametrem <strong>Domyślna wartość wynikowa</strong>.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "Wymagany wejściowy raster jednopasmowy zawierający wartości pikseli do ponownego przyporządkowania.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "Opcjonalne dodatkowe zapytanie stosowane do <strong>tabeli atrybutów strefowych</strong>.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "W przypadku korzystania z powyższej przykładowej tabeli, zapytanie przyjmie postać ${Variable1 = 'bare earth' AND Variable2 = 'California'}.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "Wymagana tabela wejściowa zawierająca co najmniej trzy pola. Musi ona zawierać wartość minimalną progu, wartość maksymalną progu i wartość docelową. Wartość docelowa to pole, które będzie zawierać wartość po ponownym przyporządkowaniu.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "Plik może mieć format klasy obiektów, usługi obiektowej lub dowolnego innego typu tabeli obsługiwanego przez oprogramowanie ArcGIS.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "Nazwa pola w <strong>tabeli atrybutów strefowych</strong>, które zawiera wartości identyfikatorów stref.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "Wartości identyfikatorów stref są bezpośrednio powiązane z identyfikatorami stref w rastrze strefowym. Zapewniają one dodatkowy poziom filtrowania podczas ponownego przyporządkowania. Jeśli z danym rekordem w tabeli nie jest powiązany żaden identyfikator strefy, nie będzie on uczestniczyć w ponownym przyporządkowaniu.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "Raster o pojedynczym paśmie, w którym każdy piksel definiuje strefy powiązane z daną lokalizacją. Strefa jest definiowana jako wszystkie obszary w danych wejściowych, które mają tę samą wartość. Obszary nie muszą być ciągłe.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Określa metodę służącą do podania wartości wymiarów prognozy.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>Przez wartość</strong> — prognoza zostanie obliczona dla jednej wartości wymiaru. Na przykład: chcesz prognozować roczne opady atmosferyczne dla lat 2050, 2100 i 2150. Jest to opcja domyślna.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>Według przedziału</strong> — prognoza zostanie obliczona dla interwału wymiaru zdefiniowanego przez wartość początkową i końcową. Na przykład: chcesz prognozować roczne opady atmosferyczne dla każdego roku między 2050 a 2150.",
	"@@Predict-Using-Trend_end_tag0@@": "Data końcowa, wysokość lub głębokość przedziału interwału do użycia w prognozie.",
	"@@Predict-Using-Trend_end_tag1@@": "Ten parametr jest wymagany, gdy parametr <strong>Definicja wymiaru</strong> jest skonfigurowany na wartość <strong>Według przedziału</strong>.",
	"@@Predict-Using-Trend_raster_tag0@@": "Wejściowy wielowymiarowy raster trendu z funkcji <strong>Generuj trend</strong>.",
	"@@Predict-Using-Trend_start_tag0@@": "Data początkowa, wysokość lub głębokość przedziału interwału do użycia w prognozie.",
	"@@Predict-Using-Trend_start_tag1@@": "Ten parametr jest wymagany, gdy parametr <strong>Definicja wymiaru</strong> jest skonfigurowany na wartość <strong>Według przedziału</strong>.",
	"@@Predict-Using-Trend_unit_tag0@@": "Jednostka, która będzie używana dla przedziału wartości. Ten parametr ma zastosowanie, gdy wymiarem analizy jest wymiar czasu.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Godziny</strong> — prognoza zostanie obliczona dla każdej godziny w zakresie czasu opisanym parametrami <strong>Początek</strong>, <strong>Koniec</strong> oraz <strong>Przedział wartości</strong>.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Dni</strong> — prognoza zostanie obliczona dla każdego dnia w zakresie czasu opisanym parametrami <strong>Początek</strong>, <strong>Koniec</strong> oraz <strong>Przedział wartości</strong>.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Tygodnie</strong> — prognoza zostanie obliczona dla każdego tygodnia w zakresie czasu opisanym parametrami <strong>Początek</strong>, <strong>Koniec</strong> oraz <strong>Przedział wartości</strong>.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Miesiące</strong> — prognoza zostanie obliczona dla każdego miesiąca w zakresie czasu opisanym parametrami <strong>Początek</strong>, <strong>Koniec</strong> oraz <strong>Przedział wartości</strong>.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Lata</strong> — prognoza zostanie obliczona dla każdego roku w zakresie czasu opisanym parametrami <strong>Początek</strong>, <strong>Koniec</strong> oraz <strong>Przedział wartości</strong>.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "Liczba etapów między dwiema wartościami wymiarów, które mają zostać uwzględnione w prognozie. Wartość domyślna wynosi 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Ten parametr jest wymagany, gdy parametr <strong>Definicja wymiaru</strong> jest skonfigurowany na wartość <strong>Według przedziału</strong>.",
	"@@Predict-Using-Trend_values_tag0@@": "Wartość lub wartości wymiarów do użycia w prognozie.",
	"@@Predict-Using-Trend_values_tag1@@": "Format wartości czasu, głębokości i wysokości musi być zgodny z formatem wartości wymiarów użytym do generowania rastra trendu. Jeśli raster trendu został wygenerowany dla wymiaru StdTime, format powinien być następujący: RRRR-MM-DDTGG:MM:SS, na przykład 2050-01-01T00:00:00. Wiele wartości jest rozdzielanych średnikiem.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Podaj szablon funkcji rastrowej służący do agregowania wielu przekrojów w mniejszą liczbę przekrojów lub w jeden przekrój.",
	"@@Process-Raster-Collection_dimension_tag0@@": "Wymiar agregacji. Jest to wymiar, wzdłuż którego zmienne będą agregowane.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Podaj szablon funkcji rastrowej służący do przetworzenia każdego przekroju lub elementu w wejściowym zbiorze rastrów.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Określa interwał słów kluczowych, który będzie używany przy agregowaniu wzdłuż wymiaru. Ten parametr jest wymagany, gdy w polu <strong>Typ</strong> jest skonfigurowana wartość <strong>Słowo kluczowe przedziału</strong>, a agregacja musi być przeprowadzana w pewnym okresie.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>Co godzinę</strong> — wartości danych będą agregowane w godzinowe etapy czasowe i wynik będzie zawierać każdą godzinę w postaci szeregów czasowych.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Codziennie</strong> — wartości danych będą agregowane w dzienne etapy czasowe i wynik będzie zawierać każdy dzień w postaci szeregów czasowych.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Co tydzień</strong> — wartości danych będą agregowane w tygodniowe etapy czasowe i wynik będzie zawierać każdy tydzień w postaci szeregów czasowych.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>Co dziesięć</strong> — wartości danych będą agregowane w 3 okresy po 10 dni każdy. Ostatni okres może zawierać mniej lub więcej niż 10 dni. Dane wynikowe będą zawierać 3 klatki dla każdego miesiąca.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>Co pięć</strong> — wartości danych będą agregowane w 6 okresów po 5 dni każdy. Ostatni okres może zawierać mniej lub więcej niż 5 dni. Dane wynikowe będą zawierać 6 klatek dla każdego miesiąca.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Co miesiąc</strong> — wartości danych będą agregowane w miesięczne etapy czasowe i wynik będzie zawierać każdy miesiąc w postaci szeregów czasowych.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Co kwartał</strong> — wartości danych będą agregowane w kwartalne etapy czasowe i wynik będzie zawierać każdy kwartał w postaci szeregów czasowych.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Co rok</strong> — wartości danych będą agregowane w roczne etapy czasowe i wynik będzie zawierać każdy rok w postaci szeregów czasowych.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Powtarzane codziennie</strong> — wartości danych będą agregowane w dzienne etapy czasowe i wynik będzie zawierać jedną agregowaną wartość na dzień juliański. Dane wynikowe będą zawierać maksymalnie 366 dziennych przekrojów czasu.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Powtarzane co tydzień</strong> — wartości danych będą agregowane w tygodniowe etapy czasowe i wynik będzie zawierać jedną agregowaną wartość na tydzień. Dane wynikowe będą zawierać maksymalnie 53 tygodniowe klatki czasu.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Powtarzane co miesiąc</strong> — wartości danych będą agregowane w miesięczne etapy czasowe i wynik będzie zawierać jedną agregowaną wartość na miesiąc. Dane wynikowe będą zawierać maksymalnie 12 miesięcznych klatek czasu.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Powtarzane co kwartał</strong> — wartości danych będą agregowane w kwartalne etapy czasowe i wynik będzie zawierać jedną agregowaną wartość na kwartał. Dane wynikowe będą zawierać maksymalnie 4 kwartalne klatki czasu.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "Wartość maksymalna zakresu.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Ten parametr jest wymagany, gdy parametr <strong>Typ</strong> jest skonfigurowany na wartość <strong>Zakresy przedziałów</strong>.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "Wartość minimalna zakresu.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Ten parametr jest wymagany, gdy parametr <strong>Typ</strong> jest skonfigurowany na wartość <strong>Zakresy przedziałów</strong>.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Podaj szablon funkcji rastrowej służący do wyświetlenia przetworzonej warstwy rastrowej.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "Wejściowy raster wielowymiarowy, warstwa mozaiki lub zestaw danych mozaiki.",
	"@@Process-Raster-Collection_type_tag0@@": "Określa przedział wymiaru, dla którego będą agregowane dane.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>Wszystkie</strong> — wartości danych będą agregowane dla wszystkich przekrojów. Jest to opcja domyślna.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Słowo kluczowe przedziału</strong> — dane zmiennej będą agregowane przy użyciu najczęściej używanego przedziału.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Zakresy przedziałów</strong> — dane zmiennej będą agregowane między podaną parą wartości lub dat.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Wartości przedziałów</strong> — dane zmiennej będą agregowane przy użyciu jednostki i przedziału podanych przez użytkownika.",
	"@@Process-Raster-Collection_unit_tag0@@": "Jednostka, która będzie używana dla wartości przedziału. Ten parametr jest wymagany, gdy pole <strong>Wymiar</strong> jest polem czasu, a parametr <strong>Typ</strong> jest skonfigurowany na <strong>Wartość przedziału</strong>.",
	"@@Process-Raster-Collection_unit_tag1@@": "W przypadku agregacji innej niż czasowa ta opcja nie będzie dostępna i jednostka wartości przedziału będzie zgodna z jednostką zmiennej wejściowych danych rastra wielowymiarowego.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Godziny</strong> — wartości danych będą agregowane w godzinowe klatki czasu w podanym przedziale.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Dni</strong> — wartości danych będą agregowane w dzienne klatki czasu w podanym przedziale.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Tygodnie</strong> — wartości danych będą agregowane w tygodniowe klatki czasu w podanym przedziale.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Miesiące</strong> — wartości danych będą agregowane w miesięczne klatki czasu w podanym przedziale.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Lata</strong> — wartości danych będą agregowane w roczne klatki czasu w podanym przedziale.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "Wielkość przedziału, który będzie używany podczas agregacji. Ten parametr jest wymagany, gdy parametr <strong>Typ</strong> jest skonfigurowany na wartość <strong>Wartość przedziału</strong>.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "Aby na przykład agregować 30 lat miesięcznych danych o temperaturze w 5-letnie przyrosty, wprowadź wartość 5 w parametrze <strong>Przedział wartości</strong>, a jako wartość <strong>Jednostka</strong> wprowadź <strong>Lata</strong>.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Określa opcje do zdefiniowania wynikowych wartości pikseli.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Zaznaczone — nie będzie ujemnych wartości wynikowych.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Niezaznaczone — wartości częściowego pokrycia terenu będą mogły być ujemne.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "Wejściowe dane warstwy rastrowej",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "Wejściowy plik profilu spektralnego.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "Informacje spektralne dla różnych klas pokrycia terenu.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Profil spektralny</strong> — plik definicji klasyfikacji (${.ecd}) wygenerowany w narzędziu <strong><strong>Train Maximum Likelihood Classifier</strong></strong> lub plik JSON (${.json}), który zawiera profile spektralne klasy.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Obiekt treningowy</strong> — obiekty poligonowe lub klasa obiektów próbek treningowych wygenerowana w <strong>Menedżerze próbek treningowych</strong>.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Określa opcje do zdefiniowania wynikowych wartości pikseli.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Zaznaczone — wartości klas dla każdego piksela są podawane w formacie dziesiętnym, a suma wszystkich klas wynosi 1. Na przykład: Klasa1 = 0,16; Klasa2 = 0,24; Klasa3 = 0,60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Niezaznaczone — suma wszystkich klas w pikselu może przekroczyć 1.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "Wejściowy plik obiektu treningowego.",
	"@@Aggregate_aggregationtechnique_tag0@@": "Metoda służąca do agregacji. Wartości komórek wejściowych wchodzących w skład mniej szczegółowych komórek wynikowych są agregowane przy użyciu jednej z następujących statystyk:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Suma</strong> — suma komórek wejściowych. Jest to opcja domyślna.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Maksimum</strong> — największa wartość spośród komórek wejściowych.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Średnia</strong> — średnia wartość komórek wejściowych.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Mediana</strong> — wartość mediany komórek wejściowych.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Minimum</strong> — najmniejsza wartość spośród komórek wejściowych.",
	"@@Aggregate_cellfactor_tag0@@": "Współczynnik do przemnożenia rozmiaru komórki rastra wejściowego.",
	"@@Aggregate_cellfactor_tag1@@": "Przykładowo wartość współczynnika komórki wynosząca trzy spowoduje, że rozmiar komórki wynikowej będzie trzykrotnie większy niż w rastrze wejściowym.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Definiuje sposób obsługi granic rastra wejściowego, gdy jego wiersze lub kolumny nie są wielokrotnością współczynnika komórki.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Zaznaczone — rozszerza górne lub prawe granice rastra wejściowego, tak aby łączna liczba komórek w wierszu lub kolumnie była wielokrotnością współczynnika komórki. W przypadku zastosowania tej opcji raster wynikowy może pokrywać większy zasięg przestrzenny niż raster wejściowy. Jest to opcja domyślna.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Niezaznaczone — redukuje liczbę wierszy lub kolumn w rastrze wynikowym. Powoduje to przycięcie pozostałych komórek na górnej lub prawej granicy rastra wejściowego, dzięki czemu liczba wierszy lub kolumn w rastrze wejściowym staje się wielokrotnością współczynnika komórki. W przypadku zastosowania tej opcji raster wynikowy może pokrywać mniejszy zasięg przestrzenny niż raster wejściowy.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Wskazuje, czy wartości ${NoData} są ignorowane przez obliczenia agregacji.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Zaznaczone — określa, że w sytuacji, gdy dla dowolnych komórek zawartych w zasięgu przestrzennym większej komórki rastra wynikowego istnieją wartości ${NoData}, zostaną one zignorowane przy określaniu wartości lokalizacji komórek wynikowych. Przy określaniu wartości komórki wynikowej zostaną użyte tylko komórki wejściowe w zasięgu komórki wynikowej, które mają wartości danych. Jest to opcja domyślna.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Niezaznaczone — określa, że w sytuacji, gdy każda komórka zawarta w zasięgu przestrzennym większej komórki rastra wynikowego ma wartość ${NoData}, wartością lokalizacji tej komórki wynikowej będzie ${NoData}. Gdy jest użyta ta opcja, oznacza to, że jeśli komórki w agregacji zawierają wartość ${NoData}, brak jest wystarczających informacji do przeprowadzenia podanych obliczeń niezbędnych do określenia wartości wynikowej.",
	"@@Aggregate_raster_tag0@@": "Raster wejściowy, który ma zostać zagregowany.",
	"@@Expand_numberofcells_tag0@@": "Liczba komórek, o jaką należy rozszerzyć strefy.",
	"@@Expand_numberofcells_tag1@@": "Wartość musi być liczbą całkowitą i może wynosić 1 lub więcej.",
	"@@Expand_raster_tag0@@": "Raster wejściowy, dla którego mają zostać rozszerzone wskazane strefy.",
	"@@Expand_raster_tag1@@": "Musi być liczbą całkowitą.",
	"@@Expand_zonevalues_tag0@@": "Lista stref do rozszerzenia.",
	"@@Expand_zonevalues_tag1@@": "Wartości strefy muszą być liczbami całkowitymi i mogą występować w dowolnej kolejności.",
	"@@Expand_zonevalues_tag2@@": "Aby podać wiele stref, użyj spacji do rozdzielenia wartości stref.",
	"@@Multidimensional-Filter_dimension_tag0@@": "Wymiar, z którego mają zostać wyodrębnione zmienne.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Określa metodę, która zostanie użyta do podzielenia wymiaru.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>Wszystkie</strong> — zostanie użyty pełny zakres dla każdego wymiaru. Jest to opcja domyślna.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>Według wartości</strong> — wymiar zostanie podzielony przy użyciu wartości lub listy wartości wymiaru.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>Według zakresów</strong> — wymiar zostanie podzielony przy użyciu zakresu lub listy zakresów.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>Według iteracji</strong> — wymiar zostanie podzielony na podany rozmiar interwału.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "Koniec pierwszego interwału. Ten interwał służy do iteracji po zestawie danych.Ten parametr jest wymagany, gdy parametr <strong>Definicja wymiaru</strong> jest skonfigurowany na wartość <strong>Według iteracji</strong>.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "Wartość maksymalna zakresu. Ten parametr jest wymagany, gdy parametr <strong>Definicja wymiaru</strong> jest skonfigurowany na wartość <strong>Według zakresów</strong>.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "Wartość minimalna zakresu. Ten parametr jest wymagany, gdy parametr <strong>Definicja wymiaru</strong> jest skonfigurowany na wartość <strong>Według zakresów</strong>.",
	"@@Multidimensional-Filter_raster_tag0@@": "Wejściowy raster wielowymiarowy.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>Zakresy przedziałów określone w tabeli są używane do agregowania grup wartości. Wartości minimalna i maksymalna określają zakres do uwzględnienia.</p><p>Ten parametr jest wymagany, gdy dla parametru <strong>Typ</strong> skonfigurowano opcję <strong>Zakresy przedziałów</strong>.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "Początek pierwszego interwału. Ten interwał służy do iteracji po zestawie danych.Ten parametr jest wymagany, gdy parametr <strong>Definicja wymiaru</strong> jest skonfigurowany na wartość <strong>Według iteracji</strong>.",
	"@@Multidimensional-Filter_step_tag0@@": "Częstotliwość z jaką będą dzielone dane. Ten parametr jest wymagany, gdy parametr <strong>Definicja wymiaru</strong> jest skonfigurowany na wartość <strong>Według iteracji</strong>. Domyślna wartość to 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Określa jednostkę iteracji. Ten parametr jest wymagany, gdy parametr <strong>Definicja wymiaru</strong> jest skonfigurowany na wartość <strong>Według iteracji</strong> i parametr <strong>Wymiar</strong> jest skonfigurowany na wartość <strong>StdTime</strong>.",
	"@@Multidimensional-Filter_value_tag0@@": "Wartość dla podanego wymiaru. Ten parametr jest wymagany, gdy parametr <strong>Definicja wymiaru</strong> jest skonfigurowany na wartość <strong>Według wartości</strong>.",
	"@@Multidimensional-Filter_variables_tag0@@": "Zmienne, które zostaną uwzględnione w wynikowej wielowymiarowej warstwie rastrowej. Jeśli nie zostanie podana zmienna, zostanie użyta pierwsza zmienna.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Decyduje o tym, czy warstwa ma mieć wartości wymiarów. Ta opcja jest dostępna tylko wtedy, gdy w celu utworzenia warstwy został wybrany pojedynczy przekrój.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Zaznaczona -- warstwa nie będzie miała wartości wymiarów.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Niezaznaczona -- warstwa będzie miała wartości wymiarów. Jest to opcja domyślna.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "Rozmiar komórki interpolowanego rastra. Wartość domyślna wynosi ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "Metoda ponownego próbkowania służąca do interpolacji danych nieregularnych.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>Najbliższy sąsiad</strong> — oblicza wynikową wartość piksela przy użyciu najbliższego piksela wejściowego. Jeśli nie istnieje piksel źródłowy, w danych wynikowych nie można utworzyć żadnego nowego piksela. Jest to opcja domyślna.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>Pokrywanie liniowe</strong> — za pomocą triangulacyjnej, nieregularnej sieci rozchodzącej się ze środka każdego piksela w nieregularnym rastrze interpoluje powierzchnię, która jest następnie konwertowana na regularny raster.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Naturalne sąsiedztwo</strong> — znajduje podzestaw wejściowych danych próbek znajdujący się najbliżej punktu zapytania i nadaje im wagi na podstawie obszarów proporcjonalnych w celu interpolacji wartości.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Ważone odwrotności odległości</strong> — określa wartości komórek na podstawie kombinacji zestawu punktów lub komórek próbek ważonych liniowo. Waga jest funkcją odwrotności odległości od znanych punktów lub pikseli.",
	"@@Multidimensional-Raster_raster_tag0@@": "Wejściowy raster wielowymiarowy.",
	"@@Multidimensional-Raster_variables_tag0@@": "Zmienna lub zmienne, które zostaną uwzględnione w wielowymiarowej warstwie rastrowej.",
	"@@Random_distribution_tag0@@": "Podaj metodę dystrybucji wartości losowej, która ma zostać użyta.",
	"@@Random_distribution_tag1@@": "<strong>Jednorodne</strong> (minimum, maksimum) — rozkład jednorodny ze zdefiniowanym zakresem. Wartości domyślne wynoszą 0 dla minimum i 1 dla maksimum. Jest to opcja domyślna.",
	"@@Random_distribution_tag2@@": "<strong>Całkowite</strong> (minimum, maksimum) — rozkład całkowity ze zdefiniowanym zakresem. Wartości domyślne wynoszą 1 dla minimum i 10 dla maksimum.",
	"@@Random_distribution_tag3@@": "<strong>Normalne</strong> (średnia, odchylenie standardowe) — rozkład normalny ze zdefiniowaną średnią i odchyleniem standardowym. Wartości domyślne wynoszą 0 dla średniej i 1 dla odchylenia standardowego.",
	"@@Random_distribution_tag4@@": "<strong>Wykładniczy</strong> (średnia) — rozkład wykładniczy ze zdefiniowaną średnią. Wartość domyślna wynosi 1.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (średnia) — rozkład Poissona ze zdefiniowaną średnią. Wartość domyślna wynosi 1.",
	"@@Random_distribution_tag6@@": "<strong>Gamma</strong> (alfa, beta — rozkład gamma ze zdefiniowanymi wartościami alfa i beta. Wartości domyślne wynoszą 1 dla alfa i 1 dla beta.",
	"@@Random_distribution_tag7@@": "<strong>Dwumian</strong> (N, prawdopodobieństwo) — rozkład dwumianowy ze zdefiniowaną wartością N i prawdopodobieństwem. Wartości domyślne wynoszą 10 dla N i 0,5 dla prawdopodobieństwa.",
	"@@Random_distribution_tag8@@": "<strong>Geometryczny</strong> (prawdopodobieństwo) — rozkład geometryczny ze zdefiniowanym prawdopodobieństwem. Wartość domyślna wynosi 0,5.",
	"@@Random_distribution_tag9@@": "<strong>Ujemny dwumian</strong> (r, prawdopodobieństwo) — rozkład Pascala ze zdefiniowaną wartością r i prawdopodobieństwem. Wartości domyślne wynoszą 10,0 dla r i 0,5 dla prawdopodobieństwa.",
	"@@Random_randomnumbergenerator_tag0@@": "Podaj algorytm generatora losowego, który korzysta z ziarna i rozkładu w celu wygenerowania sekwencji liczb losowych. Dostępne są następujące opcje:",
	"@@Random_randomnumbergenerator_tag1@@": "Liczba pseudolosowa z biblioteki standardowej języka C",
	"@@Random_randomnumbergenerator_tag2@@": "Algorytm 599 publikacji ACM collected algorithms",
	"@@Random_randomnumbergenerator_tag3@@": "Generator Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "Wartość domyślna to Mersenne Twister.",
	"@@Random_rasterinfo_tag0@@": "Użyj przycisku <strong>Wczytaj szablon rastra</strong>, aby wczytać szablon z katalogu lub portalu.",
	"@@Random_seed_tag0@@": "Ziarno to wartość całkowita używana do zainicjowania generatora liczb losowych. Wartość domyślna wynosi 1.",
	"@@Shrink_numberofcells_tag0@@": "Liczba komórek, o jaką ma zostać zmniejszona każda podana strefa.",
	"@@Shrink_numberofcells_tag1@@": "Wartość musi być liczbą całkowitą i może wynosić 1 lub więcej.",
	"@@Shrink_raster_tag0@@": "Raster wejściowy, dla którego mają zostać zmniejszone wskazane strefy.",
	"@@Shrink_raster_tag1@@": "Musi być liczbą całkowitą.",
	"@@Shrink_zonevalues_tag0@@": "Lista stref do zmniejszenia.",
	"@@Shrink_zonevalues_tag1@@": "Wartości strefy muszą być liczbami całkowitymi i mogą występować w dowolnej kolejności.",
	"@@Shrink_zonevalues_tag2@@": "Aby podać wiele stref, użyj spacji do rozdzielenia wartości stref.",
	"@@Distance-Accumulation_costraster_tag0@@": "Raster definiujący koszt (impedancję) ruchu planimetrycznego między poszczególnymi komórkami. Wartość w każdej lokalizacji komórki reprezentuje odległość kosztu na jednostkę na potrzeby poruszania się przez tę komórkę. Wartość każdej lokalizacji komórki jest mnożona przez rozdzielczość komórki, a jednocześnie następuje kompensacja ruchu ukośnego, aby uzyskać łączny koszt poruszania się przez komórkę.",
	"@@Distance-Accumulation_costraster_tag1@@": "Wartości <strong>rastra kosztów</strong> mogą być całkowitoliczbowe lub zmiennoprzecinkowe, ale nie mogą być ujemne ani równe zero.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Określa, czy odległości mają być obliczane przy użyciu metody planarnej (płaska powierzchnia Ziemi), czy geodezyjnej (elipsoida).",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Na płaszczyźnie — pomiar na płaszczyźnie używający obliczeń kartezjańskich 2D do wyliczenia długości i pola powierzchni. Ta opcja jest dostępna tylko przy pomiarach dokonywanych w układzie współrzędnych odwzorowanych i jako podstawa obliczeń stosowana jest powierzchnia 2D tego układu współrzędnych.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Geodezyjnie — najkrótsza linia między dwoma punktami na powierzchni ziemi traktowanej jak sferoida (elipsoida). Dzięki temu wyniki nie zależą od wejściowego lub wynikowego odwzorowania.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Uwaga:</strong> jednym z zastosowań linii geodezyjnych jest określenie najkrótszej odległości między dwoma miastami na ścieżce lotu. Nosi ona także nazwę linii koła wielkiego, jeśli zamiast elipsoidy przyjęta zostanie sfera.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Określa, czy jest tworzony tylko raster akumulacji odległości, czy zarówno raster akumulacji odległości, jak i raster kierunku wstecz.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Niezaznaczone — wynikiem jest raster akumulacji odległości. Jest to wynik jednopasmowy. Jest to opcja domyślna.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Zaznaczone — tworzony jest wynik wielopasmowy. Pierwszym pasmem jest raster akumulacji odległości, a drugim pasmem jest raster kierunku wstecz.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "Raster kierunku wstecz oblicza dla każdej komórki kierunek w stopniach do sąsiedniej komórki znajdującej się na najkrótszej ścieżce powrotnej prowadzącej do najbliższego źródła z ominięciem barier.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Definiuje relację między poziomym składnikiem kosztu i poziomym względnym kątem ruchu (HRMA).</p><p>Istnieje kilka składników z modyfikatorami, które identyfikują wykres składnika pionowego. Dodatkowo można użyć tabeli do utworzenia wykresu niestandardowego. Wykresy służą do określania składnika pionowego używanego do obliczania łącznego kosztu przemieszczenia się do sąsiedniej komórki.</p><p>W poniższym wyjaśnieniu używane są dwa akronimy: HF i HRMA. HF oznacza składnik poziomy (Horizontal Factor), który definiuje trudności napotkane przy ruchu w poziomie podczas przemieszczania się z jednej komórki do komórki następnej. HRMA oznacza poziomy względny kąt ruchu (Horizontal Relative Moving Angle), który określa kąt między kierunkiem poziomym z komórki i kierunkiem ruchu.</p><p>Dostępne są następujące typy <strong>Składnika poziomego</strong>:</p><ul><li><strong>Binarny</strong> — wskazuje, że jeśli kąt HRMA jest mniejszy niż kąt odcinania, składnik HF jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. W przeciwnym razie jest dla niego ustawiana nieskończoność.</li><li><strong>Do przodu</strong> — określa, że dozwolony jest wyłącznie ruch do przodu. Kąt HRMA musi być większy lub równy 0 i mniejszy niż 90 stopni (0 &lt;= HRMA &lt; 90). Jeśli kąt HRMA jest większy niż 0 i mniejszy niż 45 stopni, składnik HF dla komórki jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. Jeśli kąt HRMA jest większy niż 45 stopni lub jest równy tej wartości, używana jest wartość modyfikatora wartości pobocznej. W przypadku kąta HRMA o wartości większej lub równej 90 stopni składnik HF jest skonfigurowany na nieskończoność.</li><li><strong>Liniowa</strong> — określa, że składnik HF jest funkcją linową kąta HRMA.</li><li><strong>Liniowa odwrotna</strong> — określa, że składnik HF jest odwrotną funkcją liniową kąta HRMA.</li><li><strong>Tabela</strong> — określa, że do zdefiniowania wykresu składnika poziomego używanego do określania składników HF zostanie użyty plik tabeli.</li></ul><p>Do modyfikatorów składników poziomych należą:</p><ul><li><strong>Składnik o wartości zerowej</strong> — składnik poziomy, który ma być używany, gdy kąt HRMA ma wartość zero. Ten składnik ustawia pozycję przecięcia osi y dla wszystkich funkcji składnika poziomego.</li><li><strong>Kąt odcinania</strong> — definiuje kąt HRMA, po którego przekroczeniu jako wartość składnika HF zostanie ustawiona nieskończoność.</li><li><strong>Nachylenie</strong> — określa nachylenie linii prostej używanej ze słowami kluczowymi składników pionowych <strong>Liniowa</strong>i<strong>Liniowa odwrotna</strong>. Nachylenie jest określone jako ułamek przedstawiający stosunek różnicy wysokości do długości (na przykład nachylenie wynoszące 45 procent to 1/45, które wprowadza się jako 0,02222).</li><li><strong>Wartość poboczna</strong> — ustanawia składnik HF, gdy kąt HRMA jest większy niż 45 stopni lub jest równy tej wartości i jest mniejszy niż 90 stopni, gdy podano słowo kluczowe składnika poziomego <strong>Do przodu</strong>.</li><li><strong>Nazwa tabeli</strong> — określa nazwę tabeli definiującej składnik HF.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "Raster definiujący kierunek poziomy w każdej komórce.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "Wartościami rastra muszą być liczby całkowitoliczbowe z zakresu od 0 do 360, przy czym 0 stopni wskazuje północ lub kierunek ku górze ekranu, a wartości wzrastają zgodnie z kierunkiem ruchu wskazówek zegara. Obszary o płaskim ukształtowaniu powinny mieć wartość -1. Wartości w każdej lokalizacji będą używane w połączeniu ze <strong>składnikiem poziomym</strong>, aby określić koszt poziomy ponoszony podczas poruszania się z komórki do jej sąsiadów.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "Akumulowany koszt początkowy służący do rozpoczęcia obliczania kosztu. Ten parametr pozwala określić stały koszt powiązany ze źródłem. Zamiast rozpoczynać od kosztu równego 0, algorytm kosztu rozpocznie od podanej wartości.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola z <strong>rastra źródłowego</strong>.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "Wartość musi wynosić zero lub więcej. Domyślna wartość to 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Definiuje maksymalny akumulowany koszt dla osoby podróżującej dla danego źródła. Obliczenia kosztów są kontynuowane dla każdego źródła do momentu osiągnięcia określonej pojemności.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola z <strong>rastra źródłowego</strong>.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "Mnożnik do zastosowania do wartości kosztów.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Ten parametr umożliwia sterowanie trybem podróżowania lub wielkością w źródle. Im wyższy mnożnik, tym większy koszt ruchu przez każdą komórkę.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola z <strong>rastra źródłowego</strong>.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "Wartości muszą być większe niż zero. Domyślna wartość to 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "Raster definiujący bariery.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "Zestaw danych musi zawierać wartość NoData tam, gdzie nie ma żadnych barier. Bariery są reprezentowane przez prawidłowe wartości, w tym wartość zero.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "Bariery mogą być zdefiniowane przez raster całkowitoliczbowy lub zmiennoprzecinkowy.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "Wejściowe lokalizacje źródłowe.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Jest to zestaw danych rastrowych identyfikujący komórki lub lokalizacje, na podstawie którego jest obliczana odległość o najmniejszym akumulowanym koszcie dla każdej lokalizacji komórki wynikowej.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Może to być typ całkowitoliczbowy lub zmiennoprzecinkowy.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "Raster definiujący wartości wysokości dla każdej lokalizacji komórki.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "Wartości te są używane do obliczenia rzeczywistej odległości powierzchniowej pokonywanej podczas poruszania się przez komórki.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Definiuje kierunek osoby podróżującej podczas stosowania składnika pionowego, składnika poziomego i źródłowego współczynnika oporu.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>Ze źródła</strong> — składnik pionowy, składnik poziomy i źródłowy współczynnik oporu zostaną zastosowane, począwszy od wejściowego źródła przy ruchu w kierunku komórek innych niż źródłowe. Jest to opcja domyślna.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>Do źródła</strong> — składnik pionowy, składnik poziomy i źródłowy współczynnik oporu zostaną zastosowane, począwszy od każdej komórki innej niż źródłowa przy ruchu w kierunku wejściowego źródła.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Podaj słowo kluczowe <strong>Ze źródła</strong> lub <strong>Do źródła</strong>, które zostanie zastosowane do wszystkich źródeł lub podaj pole w <strong>rastrze źródłowym</strong> zawierające słowa kluczowe identyfikujące kierunek podróżowania dla każdego źródła. To pole musi zawierać ciąg znakowy ${FROM_SOURCE} lub ${TO_SOURCE}.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Definiuje relację między pionowym składnikiem kosztu i pionowym względnym kątem ruchu (VRMA).</p><p>Istnieje kilka składników z modyfikatorami, które identyfikują wykres składnika pionowego. Dodatkowo można użyć tabeli do utworzenia wykresu niestandardowego. Wykresy służą do określania składnika pionowego używanego do obliczania łącznego kosztu przemieszczenia się do sąsiedniej komórki.</p><p>W poniższym wyjaśnieniu używane są dwa akronimy: VF i VRMA. VF oznacza składnik pionowy (Vertical Factor), który definiuje trudności napotkane przy ruchu w pionie podczas przemieszczania się z jednej komórki do komórki następnej. VRMA oznacza poziomy względny kąt ruchu (Vertical Relative Moving Angle), który określa kąt nachylenia między kierunkiem z komórki Z (przetwarzana komórka) i kierunkiem komórki DO.</p><p>Dostępne są następujące typy <strong>Składnika pionowego</strong>:</p><ul><li><strong>Binarny</strong> — określa, że jeśli kąt VRMA jest większy niż dolny kąt odcinania i mniejszy niż górny kąt odcinania, składnik VF jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. W przeciwnym razie jest dla niego ustawiana nieskończoność.</li><li><strong>Liniowa</strong> — określa, że składnik VF jest funkcją liniową kąta VRMA.</li><li><strong>Symetryczna liniowa</strong> — określa, że składnik VF jest funkcją liniową kąta VRMA odpowiednio dla ujemnej i dodatniej wartości kąta VRMA, a te dwie funkcje linowe są symetryczne w odniesieniu do osi składnika VF (oś y).</li><li><strong>Liniowa odwrotna</strong> — określa, ze składnik VF jest odwrotną funkcją liniową kąta VRMA.</li><li><strong>Symetryczna liniowa odwrotna</strong> — określa, że składnik VF jest odwrotną funkcją liniową kąta VRMA odpowiednio dla ujemnej i dodatniej wartości kąta VRMA, a te dwie funkcje linowe są symetryczne w odniesieniu do osi składnika VF (oś y).</li><li><strong>Cos</strong> — określa składnik VF jako funkcję cosinusową kąta VRMA.</li><li><strong>Sec</strong> — określa składnik VF jako funkcję sieczną kąta VRMA.</li><li><strong>Cos-Sec</strong> — określa, że składnik VF jest funkcją cosinusową kąta VRMA, gdy kąt VRMA ma wartość ujemną i że jest on funkcją sieczną kąta VRMA, gdy kąt VRMA ma wartość nieujemną.</li><li><strong>Sec-Cos</strong> — określa, że składnik VF jest funkcją sieczną kąta VRMA, gdy kąt VRMA ma wartość ujemną i że jest on funkcją cosinusową kąta VRMA, gdy kąt VRMA ma wartość nieujemną.</li><li><strong>Tabela</strong> — określa, że do zdefiniowania wykresu składnika pionowego używanego do określania składników VF zostanie użyty plik tabeli.</li></ul><p>Do modyfikatorów słów kluczowych składników pionowych należą:</p><ul><li><strong>Składnik o wartości zerowej</strong> — określa składnik pionowy używany, gdy kąt VRMA ma wartość zero. Ten składnik ustawia pozycję przecięcia osi y dla podanej funkcji. Zgodnie z definicją składnik o wartości zerowej nie ma zastosowania do żadnych trygonometrycznych funkcji pionowych (COS, SEC, COS-SEC ani SEC-COS). Pozycja przecięcia osi y jest definiowana przez te funkcje.</li><li><strong>Niski kąt odcinania</strong>— definiuje kąt VRMA, poniżej którego składnik VF zostanie ustawiony na nieskończoność.</li><li><strong>Wysoki kąt odcinania</strong>— definiuje kąt VRMA, powyżej którego składnik VF zostanie ustawiony na nieskończoność.</li><li><strong>Nachylenie </strong> — określa nachylenie linii prostej używanej ze słowami kluczowymi składników pionowych<strong>Liniowa</strong>i<strong>Liniowa odwrotna</strong>. Nachylenie jest określone jako ułamek przedstawiający stosunek różnicy wysokości do długości (na przykład nachylenie wynoszące 45 procent to 1/45, które wprowadza się jako 0,02222).</li><li><strong>Nazwa tabeli</strong> — określa nazwę tabeli definiującej składnik VF.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Definiuje relację między pionowym składnikiem kosztu i pionowym względnym kątem ruchu (VRMA).",
	"@@Distance-Accumulation_verticalraster_tag1@@": "Wartości te służą do obliczania nachylenia używanego do identyfikowania składnika pionowego występującego podczas poruszania się między komórkami.",
	"@@Distance-Allocation_costraster_tag0@@": "Raster definiujący koszt (impedancję) ruchu planimetrycznego między poszczególnymi komórkami. Wartość w każdej lokalizacji komórki reprezentuje odległość kosztu na jednostkę na potrzeby poruszania się przez tę komórkę. Wartość każdej lokalizacji komórki jest mnożona przez rozdzielczość komórki, a jednocześnie następuje kompensacja ruchu ukośnego, aby uzyskać łączny koszt poruszania się przez komórkę.",
	"@@Distance-Allocation_costraster_tag1@@": "Wartości <strong>rastra kosztów</strong> mogą być całkowitoliczbowe lub zmiennoprzecinkowe, ale nie mogą być ujemne ani równe zero.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Określa, czy odległości mają być obliczane przy użyciu metody planarnej (płaska powierzchnia Ziemi), czy geodezyjnej (elipsoida).",
	"@@Distance-Allocation_distancemethod_tag1@@": "Na płaszczyźnie — pomiar na płaszczyźnie używający obliczeń kartezjańskich 2D do wyliczenia długości i pola powierzchni. Ta opcja jest dostępna tylko przy pomiarach dokonywanych w układzie współrzędnych odwzorowanych i jako podstawa obliczeń stosowana jest powierzchnia 2D tego układu współrzędnych.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Geodezyjnie — najkrótsza linia między dwoma punktami na powierzchni ziemi traktowanej jak sferoida (elipsoida). Dzięki temu wyniki nie zależą od wejściowego lub wynikowego odwzorowania.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Uwaga:</strong> jednym z zastosowań linii geodezyjnych jest określenie najkrótszej odległości między dwoma miastami na ścieżce lotu. Nosi ona także nazwę linii koła wielkiego, jeśli zamiast elipsoidy przyjęta zostanie sfera.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Definiuje relację między poziomym składnikiem kosztu i poziomym względnym kątem ruchu (HRMA).</p><p>Istnieje kilka składników z modyfikatorami, które identyfikują wykres składnika pionowego. Dodatkowo można użyć tabeli do utworzenia wykresu niestandardowego. Wykresy służą do określania składnika pionowego używanego do obliczania łącznego kosztu przemieszczenia się do sąsiedniej komórki.</p><p>W poniższym wyjaśnieniu używane są dwa akronimy: HF i HRMA. HF oznacza składnik poziomy (Horizontal Factor), który definiuje trudności napotkane przy ruchu w poziomie podczas przemieszczania się z jednej komórki do komórki następnej. HRMA oznacza poziomy względny kąt ruchu (Horizontal Relative Moving Angle), który określa kąt między kierunkiem poziomym z komórki i kierunkiem ruchu.</p><p>Dostępne są następujące typy <strong>Składnika poziomego</strong>:</p><ul><li><strong>Binarny</strong> — wskazuje, że jeśli kąt HRMA jest mniejszy niż kąt odcinania, składnik HF jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. W przeciwnym razie jest dla niego ustawiana nieskończoność.</li><li><strong>Do przodu</strong> — określa, że dozwolony jest wyłącznie ruch do przodu. Kąt HRMA musi być większy lub równy 0 i mniejszy niż 90 stopni (0 &lt;= HRMA &lt; 90). Jeśli kąt HRMA jest większy niż 0 i mniejszy niż 45 stopni, składnik HF dla komórki jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. Jeśli kąt HRMA jest większy niż 45 stopni lub jest równy tej wartości, używana jest wartość modyfikatora wartości pobocznej. W przypadku kąta HRMA o wartości większej lub równej 90 stopni składnik HF jest skonfigurowany na nieskończoność.</li><li><strong>Liniowa</strong> — określa, że składnik HF jest funkcją linową kąta HRMA.</li><li><strong>Liniowa odwrotna</strong> — określa, że składnik HF jest odwrotną funkcją liniową kąta HRMA.</li><li><strong>Tabela</strong> — określa, że do zdefiniowania wykresu składnika poziomego używanego do określania składników HF zostanie użyty plik tabeli.</li></ul><p>Do modyfikatorów składników poziomych należą:</p><ul><li><strong>Składnik o wartości zerowej</strong> — składnik poziomy, który ma być używany, gdy kąt HRMA ma wartość zero. Ten składnik ustawia pozycję przecięcia osi y dla wszystkich funkcji składnika poziomego.</li><li><strong>Kąt odcinania</strong> — definiuje kąt HRMA, po którego przekroczeniu jako wartość składnika HF zostanie ustawiona nieskończoność.</li><li><strong>Nachylenie</strong> — określa nachylenie linii prostej używanej ze słowami kluczowymi składników pionowych <strong>Liniowa</strong>i<strong>Liniowa odwrotna</strong>. Nachylenie jest określone jako ułamek przedstawiający stosunek różnicy wysokości do długości (na przykład nachylenie wynoszące 45 procent to 1/45, które wprowadza się jako 0,02222).</li><li><strong>Wartość poboczna</strong> — ustanawia składnik HF, gdy kąt HRMA jest większy niż 45 stopni lub jest równy tej wartości i jest mniejszy niż 90 stopni, gdy podano słowo kluczowe składnika poziomego <strong>Do przodu</strong>.</li><li><strong>Nazwa tabeli</strong> — określa nazwę tabeli definiującej składnik HF.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "Raster definiujący kierunek poziomy w każdej komórce.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "Wartościami rastra muszą być liczby całkowitoliczbowe z zakresu od 0 do 360, przy czym 0 stopni wskazuje północ lub kierunek ku górze ekranu, a wartości wzrastają zgodnie z kierunkiem ruchu wskazówek zegara. Obszary o płaskim ukształtowaniu powinny mieć wartość -1. Wartości w każdej lokalizacji będą używane w połączeniu ze <strong>składnikiem poziomym</strong>, aby określić koszt poziomy ponoszony podczas poruszania się z komórki do jej sąsiadów.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "Akumulowany koszt początkowy służący do rozpoczęcia obliczania kosztu. Ten parametr pozwala określić stały koszt powiązany ze źródłem. Zamiast rozpoczynać od kosztu równego 0, algorytm kosztu rozpocznie od podanej wartości.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola <strong>rastra źródłowego</strong>.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "Wartość musi wynosić zero lub więcej. Domyślna wartość to 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Definiuje maksymalny akumulowany koszt dla osoby podróżującej dla danego źródła. Obliczenia kosztów są kontynuowane dla każdego źródła do momentu osiągnięcia określonej pojemności.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola <strong>rastra źródłowego</strong>.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "Wartość musi być większa niż zero. Domyślna pojemność to krawędź rastra wynikowego.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "Mnożnik do zastosowania do wartości kosztów.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Ten parametr umożliwia sterowanie trybem podróżowania lub wielkością w źródle. Im wyższy mnożnik, tym większy koszt ruchu przez każdą komórkę.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "Wartości muszą być większe niż zero. Domyślna wartość to 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "Jako wartości tego parametru można użyć wartości liczbowej (liczba zmiennoprzecinkowa podwójnej precyzji) lub pola <strong>rastra źródłowego</strong>.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "Raster definiujący bariery.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "Zestaw danych musi zawierać wartość NoData tam, gdzie nie ma żadnych barier. Bariery są reprezentowane przez prawidłowe wartości, w tym wartość zero.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "Bariery mogą być zdefiniowane przez raster całkowitoliczbowy lub zmiennoprzecinkowy.",
	"@@Distance-Allocation_sourcefield_tag0@@": "Pole służące do przypisywania wartości do lokalizacji źródłowych. Musi być typu całkowitoliczbowego.",
	"@@Distance-Allocation_sourceraster_tag0@@": "Wejściowe lokalizacje źródłowe.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Jest to zestaw danych rastrowych identyfikujący komórki lub lokalizacje, na podstawie którego jest obliczana odległość o najmniejszym akumulowanym koszcie dla każdej lokalizacji komórki wynikowej.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Określa, czy jest tworzony tylko raster przydziału, czy jest tworzony wynik wielopasmowy.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Niezaznaczone — wynikiem jest raster przydziału odległości. Jest to wynik jednopasmowy. Jest to opcja domyślna.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Zaznaczone — tworzony jest raster wielopasmowy. Pierwszym pasmem jest raster przydziału odległości, drugie pasmo zawiera indeks wiersza, a trzecie pasmo zawiera indeks kolumny. Te indeksy wskazują lokalizację komórki źródłowej, która jest odległa o najmniejszy akumulowany koszt.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "Raster definiujący wartości wysokości dla każdej lokalizacji komórki.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "Wartości te są używane do obliczenia rzeczywistej odległości powierzchniowej pokonywanej podczas poruszania się przez komórki.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Definiuje kierunek osoby podróżującej podczas stosowania składnika pionowego, składnika poziomego i źródłowego współczynnika oporu.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>Ze źródła</strong> — składnik pionowy, składnik poziomy i źródłowy współczynnik oporu zostaną zastosowane, począwszy od wejściowego źródła przy ruchu w kierunku komórek innych niż źródłowe. Jest to opcja domyślna.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>Do źródła</strong> — składnik pionowy, składnik poziomy i źródłowy współczynnik oporu zostaną zastosowane, począwszy od każdej komórki innej niż źródłowa przy ruchu w kierunku wejściowego źródła.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Podaj słowo kluczowe <strong>Ze źródła</strong> lub <strong>Do źródła</strong>, które zostanie zastosowane do wszystkich źródeł lub podaj pole w <strong>rastrze źródłowym</strong> zawierające słowa kluczowe identyfikujące kierunek podróżowania dla każdego źródła. To pole musi zawierać ciąg znakowy ${FROM_SOURCE} lub ${TO_SOURCE}.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Definiuje relację między pionowym składnikiem kosztu i pionowym względnym kątem ruchu (VRMA).</p><p>Istnieje kilka składników z modyfikatorami, które identyfikują wykres składnika pionowego. Dodatkowo można użyć tabeli do utworzenia wykresu niestandardowego. Wykresy służą do określania składnika pionowego używanego do obliczania łącznego kosztu przemieszczenia się do sąsiedniej komórki.</p><p>W poniższym wyjaśnieniu używane są dwa akronimy: VF i VRMA. VF oznacza składnik pionowy (Vertical Factor), który definiuje trudności napotkane przy ruchu w pionie podczas przemieszczania się z jednej komórki do komórki następnej. VRMA oznacza poziomy względny kąt ruchu (Vertical Relative Moving Angle), który określa kąt nachylenia między kierunkiem z komórki Z (przetwarzana komórka) i kierunkiem komórki DO.</p><p>Dostępne są następujące typy <strong>Składnika pionowego</strong>:</p><ul><li><strong>Binarny</strong> — określa, że jeśli kąt VRMA jest większy niż dolny kąt odcinania i mniejszy niż górny kąt odcinania, składnik VF jest ustawiany na wartość powiązaną ze składnikiem o wartości zerowej. W przeciwnym razie jest dla niego ustawiana nieskończoność.</li><li><strong>Liniowa</strong> — określa, że składnik VF jest funkcją liniową kąta VRMA.</li><li><strong>Symetryczna liniowa</strong> — określa, że składnik VF jest funkcją liniową kąta VRMA odpowiednio dla ujemnej i dodatniej wartości kąta VRMA, a te dwie funkcje linowe są symetryczne w odniesieniu do osi składnika VF (oś y).</li><li><strong>Liniowa odwrotna</strong> — określa, ze składnik VF jest odwrotną funkcją liniową kąta VRMA.</li><li><strong>Symetryczna liniowa odwrotna</strong> — określa, że składnik VF jest odwrotną funkcją liniową kąta VRMA odpowiednio dla ujemnej i dodatniej wartości kąta VRMA, a te dwie funkcje linowe są symetryczne w odniesieniu do osi składnika VF (oś y).</li><li><strong>Cos</strong> — określa składnik VF jako funkcję cosinusową kąta VRMA.</li><li><strong>Sec</strong> — określa składnik VF jako funkcję sieczną kąta VRMA.</li><li><strong>Cos-Sec</strong> — określa, że składnik VF jest funkcją cosinusową kąta VRMA, gdy kąt VRMA ma wartość ujemną i że jest on funkcją sieczną kąta VRMA, gdy kąt VRMA ma wartość nieujemną.</li><li><strong>Sec-Cos</strong> — określa, że składnik VF jest funkcją sieczną kąta VRMA, gdy kąt VRMA ma wartość ujemną i że jest on funkcją cosinusową kąta VRMA, gdy kąt VRMA ma wartość nieujemną.</li><li><strong>Tabela</strong> — określa, że do zdefiniowania wykresu składnika pionowego używanego do określania składników VF zostanie użyty plik tabeli.</li></ul><p>Do modyfikatorów słów kluczowych składników pionowych należą:</p><ul><li><strong>Składnik o wartości zerowej</strong> — określa składnik pionowy używany, gdy kąt VRMA ma wartość zero. Ten składnik ustawia pozycję przecięcia osi y dla podanej funkcji. Zgodnie z definicją składnik o wartości zerowej nie ma zastosowania do żadnych trygonometrycznych funkcji pionowych (COS, SEC, COS-SEC ani SEC-COS). Pozycja przecięcia osi y jest definiowana przez te funkcje.</li><li><strong>Niski kąt odcinania</strong>— definiuje kąt VRMA, poniżej którego składnik VF zostanie ustawiony na nieskończoność.</li><li><strong>Wysoki kąt odcinania</strong>— definiuje kąt VRMA, powyżej którego składnik VF zostanie ustawiony na nieskończoność.</li><li><strong>Nachylenie </strong> — określa nachylenie linii prostej używanej ze słowami kluczowymi składników pionowych<strong>Liniowa</strong>i<strong>Liniowa odwrotna</strong>. Nachylenie jest określone jako ułamek przedstawiający stosunek różnicy wysokości do długości (na przykład nachylenie wynoszące 45 procent to 1/45, które wprowadza się jako 0,02222).</li><li><strong>Nazwa tabeli</strong> — określa nazwę tabeli definiującej składnik VF.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Definiuje relację między pionowym składnikiem kosztu i pionowym względnym kątem ruchu (VRMA).",
	"@@Distance-Allocation_verticalraster_tag1@@": "Wartości te służą do obliczania nachylenia używanego do identyfikowania składnika pionowego występującego podczas poruszania się między komórkami.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "Wielkość komórki używana podczas tworzenia rastra wynikowego.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Jeśli rozmiar komórki został jawnie ustawiony w ramach opcji <strong>Środowiska</strong>, będzie to domyślny rozmiar komórki. Jeśli ta opcja nie została ustawiona, rozmiar komórki danych wynikowych będzie taki sam jak rozmiar w <strong>rastrze źródłowym</strong>.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Określa, czy odległości mają być obliczane przy użyciu metody planarnej (płaska powierzchnia Ziemi), czy geodezyjnej (elipsoida).",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Na płaszczyźnie — pomiar na płaszczyźnie używający obliczeń kartezjańskich 2D do wyliczenia długości i pola powierzchni. Ta opcja jest dostępna tylko przy pomiarach dokonywanych w układzie współrzędnych odwzorowanych i jako podstawa obliczeń stosowana jest powierzchnia 2D tego układu współrzędnych.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Geodezyjnie — najkrótsza linia między dwoma punktami na powierzchni ziemi traktowanej jak sferoida (elipsoida). Dzięki temu wyniki nie zależą od wejściowego lub wynikowego odwzorowania.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Uwaga:</strong> jednym z zastosowań linii geodezyjnych jest określenie najkrótszej odległości między dwoma miastami na ścieżce lotu. Nosi ona także nazwę linii koła wielkiego, jeśli zamiast elipsoidy przyjęta zostanie sfera.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Definiuje odległość progową, w ramach której zostanie obliczony kierunek do najbliższego źródła. Jeśli odległość do najbliższego źródła jest większa od tej odległości progowej, danymi wynikowymi dla komórki będzie wartość NoData.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "Domyślna odległość to zasięg rastra wynikowego.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "Raster definiujący bariery.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "Zestaw danych musi zawierać wartość NoData tam, gdzie nie ma żadnych barier. Bariery są reprezentowane przez prawidłowe wartości, w tym wartość zero.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "Bariery mogą być zdefiniowane przez raster całkowitoliczbowy lub zmiennoprzecinkowy.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "Zestaw danych rastrowych identyfikujący komórki lub lokalizacje, do których jest obliczany kierunek euklidesowy dla każdej lokalizacji komórki wynikowej.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "Dane wejściowe mogą być typu całkowitoliczbowego lub zmiennoprzecinkowego.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "Nazwa warstwy rastrowej kosztów łączy powrotnych używana w celu określenia ścieżki najmniejszego kosztu powrotu do źródła.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "Dla każdej komórki rastra łączy powrotnych wartość identyfikuje sąsiada będącego następną komórką w ścieżce o najmniejszym akumulowanym koszcie od komórki do pojedynczej komórki źródłowej lub zestawu komórek źródłowych.",
	"@@Cost-Path_costdistanceraster_tag0@@": "Nazwa rastra kosztów odległości, który ma zostać użyty do określania ścieżki najmniejszego kosztu z lokalizacji docelowych do źródłowych.",
	"@@Cost-Path_costdistanceraster_tag1@@": "Raster kosztów odległości jest zwykle tworzony za pomocą funkcji Koszt odległości, Alokacja kosztu lub Łącze powrotne kosztu. Warstwa rastra kosztów odległości zapisuje dla każdej komórki minimalną odległość akumulowanego kosztu na powierzchni kosztów z każdej komórki do zestawu komórek źródłowych.",
	"@@Cost-Path_destinationfield_tag0@@": "Pole służące do uzyskiwania wartości dla lokalizacji docelowych. Wejściowe dane obiektowe muszą zawierać co najmniej jedno poprawne pole.",
	"@@Cost-Path_destinationraster_tag0@@": "Warstwa zestawu danych rastrowych identyfikująca te komórki, na podstawie których jest ustalana ścieżka o najmniejszym koszcie do najmniej kosztownego źródła.",
	"@@Cost-Path_destinationraster_tag1@@": "Wejściowa warstwa rastrowa składa się z komórek mających prawidłowe wartości (zero jest prawidłową wartością), a do pozostałych komórek musi zostać przypisana wartość NoData (Brak danych).",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Wymusza traktowanie przez funkcję wejściowego rastra łączy powrotnych jako rastra kierunku przepływu. Rastry kierunku przepływu mogą zawierać liczby całkowite o wartościach z zakresu 0-255.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Niezaznaczone — jeśli wartości podanego rastra łączy powrotnych są liczbami całkowitymi z zakresu 0-8, zestaw danych będzie traktowany jako raster kosztów łączy powrotnych. Jeśli wartości są z zakresu 0-255, dane wejściowe będą traktowane jako raster kierunku przepływu. Jeśli wartości są z zakresu 0-360 i zmiennoprzecinkowe, dane wejściowe będą traktowane jako raster kierunku wstecz.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Zaznaczone — raster podany dla rastra łączy powrotnych będzie traktowany jako raster kierunku przepływu. Użycie tej opcji powoduje, że raster kierunku przepływu ma maksymalną wartość 8.",
	"@@Cost-Path_pathtype_tag0@@": "Słowo kluczowe definiujące sposób interpretowania wartości i stref w wejściowych danych określających miejsca docelowe przy obliczaniu kosztu ścieżki. Dostępne opcje to:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Każda komórka</strong> — dla wszystkich komórek o prawidłowych wartościach w wejściowych danych określających miejsca docelowe jest ustalana ścieżka o najniższym koszcie i jest ona zapisywana w rastrze wynikowym. Przy tej opcji każda komórka w wejściowych danych określających miejsca docelowe jest traktowana oddzielnie, a ścieżka o najniższym koszcie jest ustalana dla każdej komórki.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Każda strefa</strong> — dla wszystkich stref w wejściowych danych określających miejsca docelowe jest ustalana ścieżka o najniższym koszcie i jest ona zapisywana w rastrze wynikowym. Przy tej opcji ścieżka o najniższym koszcie dla każdej strefy rozpoczyna się w komórce o najniższym koszcie odległości w strefie.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Najlepsza pojedyncza</strong> — dla wszystkich komórek w wejściowych danych określających miejsca docelowe jako ścieżka o najniższym koszcie jest wybierana ścieżka od komórki odpowiadającej minimum najmniejszych wartości kosztu ścieżek do komórek źródłowych.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. Jest to opcja domyślna.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.",
	"@@Cell-Statistics_extenttype_tag0@@": "Wybierz zasięg do użycia w rastrze wynikowym:",
	"@@Cell-Statistics_extenttype_tag1@@": "Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.",
	"@@Cell-Statistics_extenttype_tag2@@": "Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. Jest to opcja domyślna.",
	"@@Cell-Statistics_extenttype_tag3@@": "Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.",
	"@@Cell-Statistics_extenttype_tag4@@": "Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Decyduje o sposobie przetwarzania pasm rastrów wejściowych.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Niezaznaczone — wszystkie wielopasmowe dane wejściowe będą przetwarzane jako pojedyncze pasma. Jest to opcja domyślna.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Zaznaczone — wszystkie wielopasmowe dane wejściowe będą przetwarzane jako dane wielopasmowe.",
	"@@Cell-Statistics_rasters_tag0@@": "Lista rastrów, dla których są wyliczane statystyki dla wszystkich pikseli po kolei.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Wskazuje metodę interpolacji percentylowej, która ma być używana, gdy podana wartość percentylowa leży między dwiema wejściowymi wartościami komórek.</p><ul><li><strong>Automatyczne wykrywanie</strong> — jeśli rastry wejściowe są typu piksela w postaci liczby całkowitej, używana jest metoda <strong>Najbliższy</strong>. Jeśli raster wejściowy ma zmiennoprzecinkowy typ pikseli, używana jest metoda <strong>Liniowy</strong>. To jest ustawienie domyślne.</li><li><strong>Najbliższy</strong> — używana jest najbliższa dostępna wartość do żądanego percentyla. W takim przypadku typ piksela wynikowego jest taki sam jak typ wejściowego rastra wartości.</li><li><strong>Liniowy</strong> — używana jest średnia ważona dwóch otaczających wartości z żądanego percentyla. W takim przypadku typ piksela wynikowego jest zmiennoprzecinkowy.</li></ul><p>Ta opcja jest dostępna tylko wtedy, gdy parametr typu <strong>Operacja</strong>jest ustawiony na wartość <strong>Mediana</strong>lub<strong>Percentyl</strong>.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>Percentyl do obliczenia. Wartość domyślna to 90 oznaczająca 90. percentyl.</p><p>Wartości należą do zakresu od 0 do 100. Zerowy percentyl jest właściwie równoważny statystyce Minimum, a setny percentyl odpowiada statystyce Maksimum. Wartość 50 da praktycznie taki sam wynik jak statystyka Mediana.</p><p>Ta opcja jest dostępna tylko wtedy, gdy parametr <strong>Operacja</strong>jest ustawiony na wartość <strong>Percentyl</strong>.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "Raster kierunku powrotnego zawiera kierunki obliczone w stopniach. Kierunek identyfikuje sąsiednią komórkę znajdującą się na optymalnej ścieżce powrotnej prowadzącej z powrotem do źródła o najniższym koszcie akumulowanym, przy czym omijane są bariery.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "Wartości należą do zakresu od 0 do 360 stopni, przy czym wartość 0 jest zarezerwowana dla komórek źródłowych. Dla kierunku wschodniego (na prawo) wartość wynosi 90, a wartości wzrastają zgodnie z kierunkiem ruchu wskazówek zegara (180 wskazuje południe, 270 — zachód, a 360 — północ).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "Pole służące do uzyskiwania wartości dla lokalizacji docelowych.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "Warstwa zestawu danych rastrowych identyfikująca te komórki, na podstawie których jest ustalana optymalna ścieżka do najmniej kosztownego źródła. Te dane wejściowe są wymagane.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "Wejściowa warstwa rastrowa składa się z komórek mających prawidłowe wartości (zero jest prawidłową wartością), a do pozostałych komórek musi zostać przypisana wartość NoData (Brak danych).",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "Raster akumulacji odległości jest używany do wyznaczania optymalnej ścieżki z miejsc docelowych do źródeł. Raster akumulacji odległości jest zwykle tworzony przy użyciu funkcji <strong>Akumulacja odległości</strong>. Każda komórka w rastrze akumulacji odległości reprezentuje odległość o najmniejszym akumulowanym koszcie na powierzchni z każdej komórki do zestawu komórek źródłowych.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Określa słowo kluczowe definiujące sposób interpretowania wartości i stref w wejściowych danych określających miejsca docelowe przy obliczaniu kosztu ścieżki.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Każda strefa</strong> — dla wszystkich stref w wejściowych danych określających miejsca docelowe jest ustalana ścieżka o najniższym koszcie i jest ona zapisywana w rastrze wynikowym. W przypadku wybrania tej opcji optymalna ścieżka dla każdej strefy rozpoczyna się w komórce o najniższej wadze kosztu i odległości w strefie.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Najlepsza pojedyncza</strong> — dla wszystkich komórek w wejściowych danych określających miejsca docelowe jako optymalna ścieżka jest wybierana ścieżka od komórki odpowiadającej minimum najmniejszych wartości kosztu ścieżek do komórek źródłowych.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Każda komórka</strong> — dla wszystkich komórek o prawidłowych wartościach w wejściowych danych określających miejsca docelowe jest ustalana optymalna ścieżka. W przypadku wybrania tej opcji każda komórka w wejściowych danych określających miejsca docelowe jest traktowana oddzielnie, a optymalna ścieżka jest ustalana dla każdej komórki.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "Identyfikatory pasm używane podczas wykrywania zmian. Jeśli nie zostaną podane identyfikatory pasm, będą używane wszystkie pasma wejściowego zestawu danych rastrowych.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "Wartości identyfikatorów powinny być liczbami całkowitymi rozdzielanymi spacjami.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "Identyfikatory pasm zieleni i SWIR służące do maskowania chmur, cieni chmur i śniegu. Jeśli nie zostaną podane żadne identyfikatory pasm, maskowanie nie zostanie przeprowadzone.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "Wartości identyfikatorów powinny być liczbami całkowitymi rozdzielanymi spacjami.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Ten parametr określa pasma używane do maskowania chmur, cieni chmur i śniegu. Ponieważ cienie chmur i śnieg są bardzo ciemne w krótkofalowym paśmie podczerwieni (SWIR), a chmury i śnieg są bardzo jasne w paśmie zieleni, zalecamy maskowanie indeksów pasm SWIR i zieleni.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "Próg prawdopodobieństwa zmiany chi kwadrat. Jeśli dla obserwacji zostało obliczone prawdopodobieństwo zmiany, które jest wyższe niż ta wartość progowa, obserwacja jest oznaczana jako anomalia, co jest potencjalnym zdarzeniem zmiany. Wartość domyślna wynosi 0,99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "Minimalna liczba kolejnych obserwacji anomalnych, które muszą wystąpić, zanim zdarzenie zostanie uznane za zmianę. Piksel musi zostać oznaczony jako anomalia dla określonej liczby kolejnych klatek czasu, zanim zostanie uznany za prawdziwą zmianę. Domyślna wartość to 6.",
	"@@CCDC-Analysis_raster_tag0@@": "Wejściowa wielowymiarowa warstwa rastrowa.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "Częstotliwość aktualizowania modelu szeregów czasowych nowymi obserwacjami. Domyślnie model jest aktualizowany raz w roku.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Ten parametr definiuje to, jak często model szeregów czasowych będzie aktualizowany nowymi obserwacjami. Częste aktualizowanie modelu może być obliczeniowo kosztowne, a korzyści są zwykle minimalne. Jeśli na przykład w rastrze wielowymiarowym istnieje 365 klatek czasowych lub wyraźnych obserwacji rocznie, a częstotliwość aktualizacji jest skonfigurowana w taki sposób, że model jest aktualizowany przy każdej obserwacji, wówczas przetwarzanie będzie 365 razy bardziej kosztowne pod względem obliczeniowym w porównaniu z aktualizacjami przeprowadzanymi raz do roku, a dokładność może się nie zmienić.",
	"@@Trend-To-RGB_modeltype_tag0@@": "Typ informacji z modelu do przekształcenia w dane RGB.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Liniowe -- liniowe informacje o trendzie zostaną przekształcone w dane RGB. Jest to opcja domyślna.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Harmoniczne -- harmoniczne informacje o trendzie zostaną przekształcone w dane RGB.",
	"@@Trend-To-RGB_raster_tag0@@": "Wejściowy raster trendu.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>Wartość najlepszych proporcji modelu. Podczas procesu wyboru modelu narzędzie obliczy wartość p dla każdego modelu i wybierze model, który ma najwięcej wierzchołków przy zachowaniu najmniejszej (najbardziej znaczącej) wartości p na podstawie tej wartości proporcji. Wartość 1 oznacza, że model ma najniższą wartość p, ale może nie mieć dużej liczby wierzchołków. Wartością domyślną jest 1,25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>Maksymalna liczba segmentów do dopasowania do szeregów czasowych dla każdego piksela. Wartością domyślną jest 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>Minimalna liczba prawidłowych obserwacji wymaganych do przeprowadzenia dopasowywania. Liczba lat w wejściowym wielowymiarowym zestawie danych musi być równa tej wartości lub musi być od niej większa. Wartością domyślną jest 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Określa, czy inne pasma zostaną uwzględnione w wynikach.</p><ul><li>Gdy jest zaznaczone, inne pasma zostaną uwzględnione w wynikach. Informacje o segmentacji i wierzchołkach z początkowego pasma segmentacji określonego w parametrze <strong>Pasmo przetwarzania</strong> także zostaną dopasowane do pozostałych pasm w zobrazowaniach wielopasmowych. Wyniki modelu będą zawierały najpierw pasmo segmentacji, a następnie pozostałe pasma.</li><li>Gdy nie jest zaznaczone, pozostałe pasma nie będą uwzględniane. To jest ustawienie domyślne.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Określa, czy segmenty z odzyskiwaniem jednego roku będą wykluczane.</p><ul><li>Gdy jest zaznaczone, segmenty z odzyskiwaniem jednego roku będą wykluczane. To jest ustawienie domyślne.</li><li>Gdy nie jest zaznaczone, segmenty z odzyskiwaniem jednego roku nie będą wykluczane.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>Pasmo używane do segmentowania trajektorii wartości pikseli w czasie. Wybierz pasmo, które najlepiej przechwyci zmiany w obiekcie, który chcesz obserwować.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>Próg wartości p dla modelu do wybrania. Po wykryciu wierzchołków na początkowym etapie dopasowywania modelu narzędzie dopasuje każdy segment i obliczy wartość p w celu określenia istotności modelu. W następnej iteracji model zmniejszy liczbę segmentów o jeden i ponownie obliczy wartość p. Będzie to kontynuowane i jeśli wartość p będzie mniejsza od wartości określonej w tym parametrze, model zostanie wybrany i narzędzie przestanie szukać lepszego modelu. Jeśli żaden taki model nie zostanie wybrany, narzędzie wybierze model z wartością p mniejszą niż <strong>najniższa wartość p pomnożona przez najlepszą wartość proporcji modelu</strong>. Wartością domyślną jest 0,01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>Wejściowa wielowymiarowa warstwa rastrowa Landsat.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Określa, czy odzyskiwanie ma trend rosnący (dodatni).</p><ul><li>Gdy jest zaznaczone, odzyskiwanie ma trend rosnący. To jest ustawienie domyślne.</li><li>Gdy nie jest zaznaczone, odzyskiwanie ma trend malejący.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>Wartość progu odzyskiwania wyrażona w latach. Jeśli segment ma tempo odzyskiwania o wartości większej niż <strong>1/próg odzyskiwania</strong>, segment jest odrzucany i nie jest uwzględniany w modelu szeregów czasowych. Wartość musi należeć do zakresu od 0 do 1. Wartość domyślna wynosi 0,25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>Wartość używana do wybrania przekroju dla każdego roku w wejściowym wielowymiarowym zestawie danych. Zostanie wybrany przekrój z datą najbliższą dacie dociągania. Ten parametr jest wymagany, jeśli wejściowy zestaw danych zawiera dane z okresu krótszego niż rok.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>Próg używany do tłumienia skoków i anomalii w trajektorii wartości pikseli. Wartość musi należeć do zakresu od 0 do 1, przy czym wartość 1 oznacza brak tłumienia. Wartością domyślną jest 0,9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>Liczba dodatkowych wierzchołków poza wartością <strong>max_num_segments + 1</strong>, których można użyć do dopasowania modelu na początkowym etapie identyfikowania wierzchołków. W późniejszym czasie podczas procesu modelowania liczba dodatkowych wierzchołków zostanie zmniejszona do wartości <strong>max_num_segments + 1</strong>. Wartością domyślną jest 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>Wejściowe zestawy danych rastrowych lub wielowymiarowe zestawy danych rastrowych do scalenia.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Określa metodę używaną do wyświetlania nakładających się pikseli w połączonych zestawach danych.</p><ul><li><strong>Pierwszy</strong> — wartością piksela w nakładających się obszarach jest wartość z pierwszego rastra na liście rastrów wejściowych. To jest ustawienie domyślne.</li><li><strong>Ostatni</strong> — wartością piksela w nakładających się obszarach jest wartość z ostatniego rastra na liście rastrów wejściowych.</li><li><strong>Minimum</strong> — wartością piksela w nakładających się obszarach jest wartość najmniejsza z nakładających się pikseli.</li><li><strong>Maksimum</strong> — wartością piksela w nakładających się obszarach jest wartość największa z nakładających się pikseli.</li><li><strong>Średnia</strong> — wartością piksela w nakładających się obszarach jest wartość średnia z nakładających się pikseli.</li><li><strong>Suma</strong> — wartością piksela w nakładających się obszarach jest suma wartości z nakładających się pikseli.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Decyduje o jednostce czasu, która będzie używana do określania długości cyklu harmonicznego.</p><ul><li><strong>Dni</strong> — jednostką długości cyklu harmonicznego są dni.</li><li><strong>Lata</strong> — jednostką długości cyklu harmonicznego są lata. To jest ustawienie domyślne.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>Wymiar, wzdłuż którego zostanie wyodrębniony trend dla zmiennej lub zmiennych wybranych w analizie.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>Liczba częstotliwości do użycia w dopasowaniu trendu. Ten parametr określa częstotliwość cykli w roku. Wartością domyślną jest 1 lub jeden cykl harmoniczny na rok.</p><p>Ten parametr jest uwzględniany tylko w analizie trendów dla regresji harmonicznej.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Określa, czy w analizie są ignorowane wartości NoData.</p><ul><li>Zaznaczone — analiza obejmie wszystkie poprawne piksele w danym wymiarze i zignoruje piksele o wartości NoData. To jest ustawienie domyślne.</li><li>Niezaznaczone — wynikiem analizy będzie wartość NoData, jeśli dla pikseli w danym wymiarze istnieją jakiekolwiek wartości NoData.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>Długość cyklu wariacji okresowej do modelowania. Jednostką są dni, niezależnie od jednostki czasu danych wejściowych. Na przykład zieleń liści często charakteryzuje się jednym silnym cyklem zmian w roku, więc długością cyklu jest 365,25, nawet jeśli dane wejściowe dotyczą miesięcznych zmian zieleni. Cogodzinne dane o temperaturze charakteryzują się jednym silnym cyklem zmian w ciągu dnia, więc długością cyklu jest 1.</p><p>W przypadku danych charakteryzujących się cyklem rocznym domyślną długością jest 365,25 dnia.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Decyduje o tym, czy ma być obliczana statystyka wartości p dla współczynnika nachylenia linii trendu.</p><ul><li>Zaznaczone — wartość p zostanie obliczona i wyświetlona w szczegółach po zakończeniu działania funkcji.</li><li>Niezaznaczone — wartość p współczynnika nachylenia nie będzie obliczana. To jest ustawienie domyślne.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>Liczba kolejności wielomianowej do użycia w dopasowaniu trendu. Ten parametr określa kolejność wielomianową. Wartością domyślną jest 2, czyli wielomian drugiego stopnia.</p><p>Ten parametr jest uwzględniany tylko w analizie trendów dla regresji wielomianu.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Decyduje o tym, czy ma być obliczana statystyka dokładności dopasowania R kwadrat dla linii dopasowania trendu.</p><ul><li>Zaznaczone — wartość R kwadrat zostanie obliczona i wyświetlona w szczegółach po zakończeniu działania funkcji.</li><li>Niezaznaczone — wartość R kwadrat nie będzie obliczana. To jest ustawienie domyślne.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>Wejściowy raster wielowymiarowy.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Decyduje o tym, czy ma być generowany błąd średni kwadratowy (RMSE) linii dopasowania trendu.</p><ul><li>Zaznaczone — wartość RMSE zostanie obliczona i wyświetlona w szczegółach po zakończeniu działania funkcji. To jest ustawienie domyślne.</li><li>Niezaznaczone — błąd średni kwadratowy nie będzie obliczany.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Decyduje o jednostce czasu, która będzie używana do określania długości okresu sezonowego, gdy wykonywany jest test Kendalla (sezonowy).</p><ul><li>Dni — jednostką długości okresu sezonowego są dni. To jest ustawienie domyślne.</li><li>Miesiące — jednostką długości okresu sezonowego są miesiące.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Określa typ linii do użycia w celu dopasowania do wartości pikseli wzdłuż wymiaru.</p><ul><li><strong>Liniowa</strong> — dopasowuje wartości pikseli dla zmiennej wzdłuż linii trendu liniowego. To jest ustawienie domyślne.</li><li><strong>Harmoniczna</strong> — dopasowuje wartości pikseli dla zmiennej wzdłuż linii trendu harmonicznego.</li><li><strong>Wielomianiowa</strong> — dopasowuje wartości pikseli dla zmiennej wzdłuż linii trendu wielomianu drugiego stopnia.</li><li><strong>Mann-Kendall</strong> — wartości pikseli dla zmiennej zostaną oszacowane za pomocą testu Manna-Kendalla wskazującego trend.</li><li><strong>Kendall (sezonowy)</strong> — wartości pikseli dla zmiennej zostaną oszacowane za pomocą testu Kendalla (sezonowego) wskazującego trend.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.</p><ul><li>Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.</li><li>Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.</li><li>Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. To jest ustawienie domyślne.</li><li>Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.</li><li>Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>Używana metoda obliczeniowa.</p><ul><li><strong>Różnica</strong> — zostanie obliczona matematyczna różnica (operacja odejmowania) między wartościami pikseli w rastrach wejściowych. To jest ustawienie domyślne.</li><li><strong>Różnica względna</strong> — zostanie obliczona różnica w wartościach pikseli, uwzględniająca wielkości porównywanych wartości.</li><li><strong>Różnica kategorialna</strong> — zostanie obliczona różnica między dwoma rastrami kategorialnymi lub tematycznymi, gdzie wynik zawiera przejścia klas, które wystąpiły między dwoma rastrami.</li><li><strong>Spektralna odległość euklidesowa</strong> — zostanie obliczona odległość euklidesowa między wartościami pikseli dwóch rastrów wielopasmowych.</li><li><strong>Różnica kątów spektralnych</strong> — zostanie obliczony kąt spektralny między wartościami pikseli dwóch rastrów wielopasmowych. Dane wynikowe są wyrażone w radianach.</li><li><strong>Pasmo z największymi zmianami</strong> — zostanie obliczone pasmo, które powoduje największą zmianę w każdym pikselu między dwoma rastrami wielopasmowymi.</li></ul><p>Jeśli <strong>Metoda obliczania zmian</strong> została skonfigurowana jako <strong>Różnica kategorialna</strong> i jeden z wejściowych zestawów danych nie jest zestawem kategorialnym, zostanie obliczona prosta różnica.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Określ metodę, która ma być używana do symbolizowania pikseli o zmienionych klasach.</p><ul><li><strong>Uśrednij kolory początkowy i końcowy</strong> — kolor piksela będzie średnią z koloru klasy początkowej i koloru klasy końcowej.</li><li><strong>Użyj kolorów początkowych</strong> — kolor piksela będzie kolorem klasy początkowej.</li><li><strong>Użyj kolorów końcowych</strong> — kolor piksela będzie kolorem klasy końcowej.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Wybierz zasięg do użycia w rastrze wynikowym:</p><ul><li>Pierwszy — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.</li><li>Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. To jest ustawienie domyślne.</li><li>Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.</li><li>Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Wybierz metodę filtrowania do obliczania zmian kategorialnych.</p><ul><li><strong>Zachowaj wszystko</strong> — w wynikach znajdą się wszystkie klasy i nie będzie stosowane filtrowanie. Wybierz tę opcję, aby zobaczyć piksele zmienione i niezmienione w ramach jednego zestawu danych.</li><li><strong>Zachowaj tylko zmienione piksele</strong> — w wynikach znajdą się tylko te klasy, dla których został zmieniony typ klasy na inny. Wybierz tę opcję, jeśli interesujesz się tylko zmianami.</li><li><strong>Zachowaj tylko niezmienione piksele</strong> — w wynikach znajdą się tylko te klasy, które nie zostały zmienione. Wybierz tę opcję, jeśli interesujesz się tylko brakiem zmian.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>Wartości klas z parametru <strong>Z rastra</strong> do uwzględnienia w obliczeniach w przypadku porównywania dwóch rastrów kategorialnych. Jest to rozdzielana spacjami lista wartości całkowitych odpowiadających polu <strong>ClassValue</strong> w wejściowym zestawie danych rastrowych.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>Pierwszy raster używany podczas obliczeń. Aby oszacować zmianę z czasu 1 (wcześniej) na czas 2 (później), wprowadź tu raster czasu 1.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>Wartości klas z parametru <strong>Do rastra</strong> do uwzględnienia w obliczeniach w przypadku porównywania dwóch rastrów kategorialnych. Jest to rozdzielana spacjami lista wartości całkowitych odpowiadających polu <strong>ClassValue</strong> w wejściowym zestawie danych rastrowych.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>Drugi raster używany podczas obliczeń. Aby oszacować zmianę z czasu 1 (wcześniej) na czas 2 (później), wprowadź tu raster czasu 2.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Określ metodę, która ma być używana do symbolizowania pikseli o zmienionych klasach.</p><ul><li><strong>Uśrednij kolory początkowy i końcowy</strong> — kolor piksela będzie średnią z koloru klasy początkowej i koloru klasy końcowej.</li><li><strong>Użyj kolorów początkowych</strong> — kolor piksela będzie kolorem klasy początkowej.</li><li><strong>Użyj kolorów końcowych</strong> — kolor piksela będzie kolorem klasy końcowej.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>Pole, które przechowuje nazwy klas w danych wejściowych <strong>Raster początkowy</strong>. Narzędzie automatycznie wyszukuje pole <strong>ClassName</strong>lub pole<strong>Class_Name</strong>w celu użycia.</p><p>Należy użyć tej opcji, jeśli dane wejściowe nie zawierają tych standardowych nazw pól.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>Pole, które przechowuje nazwy klas w danych wejściowych <strong>Raster końcowy</strong>. Narzędzie automatycznie wyszuka pole <strong>ClassName</strong>lub pole<strong>Class_Name</strong>w celu użycia.</p><p>Należy użyć tej opcji, jeśli dane wejściowe nie zawierają tych standardowych nazw pól.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>Liczba kolumn pikseli służąca do określenia wymiarów sąsiedztwa.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>Liczba wierszy pikseli służąca do określenia wymiarów sąsiedztwa.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Służy do wypełniania obszarów NoData w danych wynikowych. Jest to użyteczne, jeśli w zobrazowaniu mogą występować usunięte linie.</p>",
	"@@Statistics_raster_tag0@@": "<p>Raster wejściowy, na którym mają zostać obliczone statystyki z punktami centralnymi.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>Poniżej przedstawiono siedem typów funkcji statystyk centralnych:</p><ul><li>Minimum — oblicza wartość minimalną pikseli w sąsiedztwie</li><li>Maksimum — oblicza wartość maksymalną pikseli w sąsiedztwie.</li><li>Średnia — oblicza wartość średnią pikseli w sąsiedztwie. To jest ustawienie domyślne.</li><li>Odchylenie standardowe — oblicza wartość odchylenia standardowego pikseli w sąsiedztwie.</li><li>Mediana — oblicza wartość mediany pikseli znajdujących się w sąsiedztwie.</li><li>Większość — oblicza wartość większości lub występującą najczęściej wartość pikseli w sąsiedztwie.</li><li>Mniejszość — oblicza wartość mniejszości lub występującą najrzadziej wartość pikseli w sąsiedztwie.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Określa kierunek zmian do uwzględnienia w analizie.</p><p>Ten parametr jest dostępny tylko wtedy, gdy wejściowy raster analizy zmian jest wynikiem działania narzędzi LandTrendr.</p><ul><li><strong>Wszystkie kierunki</strong> — w wynikach uwzględniane są wszystkie kierunki zmian. To jest ustawienie domyślne.</li><li><strong>Zwiększanie</strong> — w wynikach są uwzględniane tylko zmiany w kierunku dodatnim (zwiększanie).</li><li><strong>Zmniejszanie</strong> — w wynikach są uwzględniane tylko zmiany w kierunku ujemnym (zmniejszanie).</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Wskazuje informacje o zmianach do obliczenia.</p><ul><li><strong>Czas najnowszej zmiany</strong> — każdy piksel zawiera datę swojej ostatniej zmiany w szeregu czasowym. To jest ustawienie domyślne.</li><li><strong>Czas najwcześniejszej zmiany</strong> — każdy piksel zawiera datę swojej najwcześniejszej zmiany w szeregu czasowym.</li><li><strong>Czas największej zmiany</strong> — każdy piksel zawiera datę swojej najbardziej znaczącej zmiany w szeregu czasowym.</li><li><strong>Liczba zmian</strong> — każdy piksel zawiera informacje o łącznej liczbie swoich zmian w szeregu czasowym.</li><li><strong>Czas najdłuższej zmiany</strong> — każdy piksel zawiera datę zmiany na koniec najdłuższego segmentu przejścia w szeregu czasowym.</li><li><strong>Czas najkrótszej zmiany</strong> — każdy piksel zawiera datę zmiany na koniec najkrótszego segmentu przejścia w szeregu czasowym.</li><li><strong>Czas najszybszej zmiany</strong> — każdy piksel zawiera datę zmiany na koniec przejścia, które było najszybsze.</li><li><strong>Czas najwolniejszej zmiany</strong> — każdy piksel zawiera datę zmiany na koniec przejścia, które było najwolniejsze.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Określa, czy filtrowanie ma uwzględniać czas trwania.</p><p></p><ul><li>Zaznaczony — wyniki są filtrowane według czasu trwania: w wynikach są uwzględniane tylko te zmiany, które trwały określony czas.</li><li>Niezaznaczony — wyniki nie są filtrowane według czasu trwania. To jest ustawienie domyślne.</li></ul><p>Ten parametr jest dostępny tylko wtedy, gdy wejściowy raster analizy zmian jest wynikiem działania narzędzi LandTrendr.</p><p>Jeśli ten parametr jest zaznaczony, na potrzeby filtrowania należy skonfigurować parametry <strong>Minimalny czas trwania</strong> i <strong>Maksymalny czas trwania</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Określa, czy filtrowanie ma uwzględniać wielkość zmian.</p><ul><li>Zaznaczony — wyniki są filtrowane według wielkości: w wynikach są uwzględniane tylko zmiany o określonej wielkości.</li><li>Niezaznaczony — wyniki nie są filtrowane według wielkości. To jest ustawienie domyślne.</li></ul><p>Ten parametr jest dostępny tylko wtedy, gdy wejściowy raster analizy zmian jest wynikiem działania narzędzi LandTrendr.</p><p>Jeśli ten parametr jest zaznaczony, na potrzeby filtrowania należy skonfigurować parametry <strong>Wielkość minimalna</strong> i <strong>Wielkość maksymalna</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Określa, czy ograniczyć wyniki z użyciem zakresu lat.</p><ul><li>Zaznaczony — wyniki są filtrowane w taki sposób, że zawierają tylko te zmiany, które nastąpiły w określonym zakresie lat.</li><li>Niezaznaczony — wyniki nie są filtrowane według zakresu lat. To jest ustawienie domyślne.</li></ul><p>Jeśli ten parametr jest zaznaczony, na potrzeby filtrowania należy skonfigurować parametry <strong>Wartość minimalna</strong> i <strong>Wartość maksymalna</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Filtruj wyniki według wartości początkowej, tak aby w danych wynikowych były uwzględnione tylko zmiany danej wartości początkowej.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Filtruj wyniki według wartości końcowej, tak aby w danych wynikowych były uwzględnione tylko zmiany danej wartości końcowej.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>Maksymalna liczba zmian na piksel do obliczenia. Wprowadzona liczba odpowiada liczbie pasm w rastrze wynikowym. Wartość domyślna wynosi 1, co oznacza, że zostanie obliczona tylko jedna data zmiany, a raster wynikowy będzie zawierał tylko jedno pasmo.</p><p>Ten parametr nie jest dostępny, gdy dla parametru <strong>Typ zmian</strong> skonfigurowano opcję <strong>Liczba zmian</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>Wejściowy raster analizy zmian.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Określa, czy wyodrębnić datę na początku, czy też na końcu segmentu zmiany.</p><p>Ten parametr jest dostępny tylko wtedy, gdy wejściowy raster analizy zmian jest wynikiem działania narzędzi LandTrendr.</p><ul><li><strong>Początek segmentu</strong> — wyodrębniana jest data na początku segmentu zmiany. To jest ustawienie domyślne.</li><li><strong>Koniec segmentu</strong> — wyodrębniana jest data na końcu segmentu zmiany.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>Jednostki powierzchni wynikowych wartości zagęszczenia.</p><ul><li>Jednostki powierzchni na mapach — kwadrat jednostek liniowych wynikowego odniesienia przestrzennego.</li><li>Mile kwadratowe — mile (USA).</li><li>Kilometry kwadratowe — kilometry.</li><li>Akry — akry (USA).</li><li>Hektary — hektary.</li><li>Metry kwadratowe — metry.</li><li>Jardy kwadratowe — jardy (USA).</li><li>Stopy kwadratowe — stopy (USA).</li><li>Cale kwadratowe — cale (USA).</li><li>Centymetry kwadratowe — centymetry.</li><li>Milimetry kwadratowe — milimetry.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>Rozmiar piksela wynikowego zestawu danych rastrowych. Jeśli w środowiskach geoprzetwarzania skonfigurowano wartość <strong>Rozmiar komórki</strong>, jest to opcja domyślna.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>Zestaw danych definiujący bariery.</p><p>Barierami może być warstwa obiektowa obiektów poliliniowych lub poligonowych.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>Wejściowe obiekty punktowe lub liniowe, dla których zostanie obliczona gęstość.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Określa, czy ma zostać użyta najkrótsza ścieżka z zastosowaniem metody sferoidalnej (geodezyjnej) lub płaskiej powierzchni Ziemi (planarnej).</p><ul><li><strong>Planarne</strong> — używane są odległości planarne między obiektami. To jest ustawienie domyślne.</li><li><strong>Geodezyjne</strong> — używane są odległości geodezyjne między obiektami. W tej metodzie brana jest pod uwagę krzywizna sferoidy i prawidłowo są interpretowane dane w pobliżu biegunów oraz międzynarodowej linii zmiany daty.</li></ul><p>Korzystanie z metody <strong>Geodezyjne</strong> jest zalecane do przetwarzania danych przechowywanych w układzie współrzędnych, który nie jest odpowiedni do pomiarów odległości i analizowania dużych obszarów geograficznych. Metody <strong>Geodezyjne</strong> należy użyć w przypadku układu Web Mercator lub dowolnych układów współrzędnych geograficznych.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Określa, co reprezentują wartości w rastrze wynikowym.</p><ul><li><strong>Zagęszczenie</strong> — wartości wynikowe reprezentują przewidywaną wartość zagęszczenia. To jest ustawienie domyślne.</li><li><strong>Oczekiwana liczba</strong> — wartości wynikowe reprezentują przewidywaną ilość zjawiska w obrębie każdego piksela. Ponieważ wartość piksela jest powiązana z podaną wartością <strong>Rozmiar komórki</strong>, raster wynikowy nie może być ponownie próbkowany do innego rozmiaru piksela i będzie nadal reprezentował ilość zjawiska.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Pole oznaczające wartości liczby ludności dla każdego obiektu. Wartość opcji <strong>Pole populacji</strong> to liczba lub ilość, która powinna zostać rozprzestrzeniona w krajobrazie w celu utworzenia ciągłej powierzchni. Wartości opcji <strong>Pole populacji</strong> mogą być typu całkowitoliczbowego lub zmiennoprzecinkowego.</p><p>Poniżej opisano według priorytetów opcje i domyślne zachowania dla tego pola.</p><ul><li>Użyj opcji <strong>None</strong>, jeśli nie będzie używany żaden element ani wartość specjalna, a poszczególne obiekty będą liczone jeden raz.</li><li>Użyj opcji <strong>Shape</strong>, jeśli obiekty wejściowe zawierają jednostki Z.</li><li>W przeciwnym razie polem domyślnym jest <strong>POPULATION</strong> lub dowolna akceptowalna wartość pochodna populacji:<ul><li><strong>POPULATIONxxxx</strong> — gdzie <strong>xxxx</strong> może reprezentować dowolne poprawne znaki, na przykład <strong>POPULATION6</strong>, <strong>POPULATION1974</strong> lub <strong>POPULATIONROADTYPE</strong>.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>Jeśli żadne z powyższych wartości nie mają zastosowania, wartością domyślną jest <strong>None</strong>.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>Promień wyszukiwania, w obrębie którego jest obliczana gęstość. Jednostki są oparte na jednostce liniowej odwzorowania.</p><p>Jeśli na przykład jednostkami są metry, to aby uwzględnić wszystkie obiekty w sąsiedztwie o promieniu jednej mili, należy skonfigurować promień wyszukiwania równy 1609,344 (1 mila = 1609,344 m).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Wskazuje, czy wartości <strong>NoData</strong> w <strong>rastrze wartości</strong> będą miały wpływ na wyniki strefy, do której będą należeć.</p><ul><li><strong>Tak</strong> — w obrębie każdej konkretnej strefy tylko piksele mające wartość w <strong>rastrze wartości</strong> będą używane do określania wartości wynikowej dla tej strefy. Piksele z wartościami <strong>NoData</strong> w <strong>rastrze wartości</strong> będą ignorowane podczas obliczeń statystyk. To jest ustawienie domyślne.</li><li><strong>Nie</strong> — jeśli w obrębie jakiejkolwiek konkretnej strefy istnieją piksele z wartościami <strong>NoData</strong> w <strong>rastrze wartości</strong>, uznaje się, że nie ma wystarczających informacji, aby móc przeprowadzić obliczenia statystyczne dla wszystkich pikseli w tej strefie, dlatego dla całej strefy zostaje przypisana wartość <strong>NoData</strong> w rastrze wynikowym.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Określa metodę interpolacji percentylowej, która ma być używana, gdy liczba wartości z rastra wejściowego do obliczenia jest parzysta.</p><ul><li><strong>Automatyczne wykrywanie</strong> — jeśli wejściowy raster wartości ma całkowitoliczbowy typ pikseli, używana jest metoda <strong>Najbliższy</strong>. Jeśli wejściowy raster wartości ma zmiennoprzecinkowy typ pikseli, używana jest metoda <strong>Liniowy</strong>. To jest ustawienie domyślne.</li><li><strong>Najbliższy</strong> — używana jest najbliższa dostępna wartość do żądanego percentyla. W takim przypadku typ piksela wynikowego jest taki sam jak typ wejściowego rastra wartości.</li><li><strong>Liniowy</strong> — używana jest średnia ważona dwóch otaczających wartości z żądanego percentyla. W takim przypadku typ piksela wynikowego jest zmiennoprzecinkowy.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>Percentyl do obliczenia. Wartość domyślna to 90 oznaczająca 90. percentyl.</p><p>Wartości należą do zakresu od 0 do 100. Zerowy percentyl jest właściwie równoważny statystyce Minimum, a setny percentyl odpowiada statystyce Maksimum. Wartość 50 da praktycznie taki sam wynik jak statystyka Mediana.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Określa sposób przetwarzania wejściowego rastra wartości wielowymiarowych.</p><ul><li><strong>Bieżący przekrój</strong> — statystyki zostaną obliczone na podstawie bieżącego przekroju wielowymiarowego zestawu danych. To jest ustawienie domyślne.</li><li><strong>Wszystkie przekroje</strong> — statystyki zostaną obliczone dla wszystkich wymiarów (takich jak czas czy głębokość) wielowymiarowego zestawu danych.</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>Typ statystyki do obliczenia.</p><ul><li><strong>Średnia</strong> — oblicza średnią ze wszystkich pikseli w <strong>rastrze wartości</strong>, które należą do tej samej strefy co piksel wynikowy.</li><li><strong>Większość</strong> — określa wartość najczęściej występującą we wszystkich pikselach w <strong>rastrze wartości</strong>, które należą do tej samej strefy co piksel wynikowy.</li><li><strong>Maksimum</strong> — określa największą wartość ze wszystkich pikseli w <strong>rastrze wartości</strong>, które należą do tej samej strefy co piksel wynikowy.</li><li><strong>Mediana</strong> — określa wartość mediany ze wszystkich pikseli w <strong>rastrze wartości</strong>, które należą do tej samej strefy co piksel wynikowy.</li><li><strong>Minimum</strong> — określa najmniejszą wartość ze wszystkich pikseli w <strong>rastrze wartości</strong>, które należą do tej samej strefy co piksel wynikowy.</li><li><strong>Mniejszość</strong> — określa wartość najrzadziej występującą we wszystkich pikselach w <strong>rastrze wartości</strong>, które należą do tej samej strefy co piksel wynikowy.</li><li><strong>Percentyl</strong> — oblicza percentyl wszystkich komórek w <strong>rastrze wartości</strong>, które należą do tej samej strefy co piksel wynikowy. Domyślnie obliczany jest 90. percentyl. Percentyl, który ma zostać obliczony, można określić za pomocą parametru <strong>Wartość percentylowa</strong>.</li><li><strong>Zakres</strong> — oblicza różnicę między największą i najmniejszą wartością ze wszystkich pikseli w <strong>rastrze wartości</strong>, które należą do tej samej strefy co piksel wynikowy.</li><li><strong>Odchylenie standardowe</strong> — oblicza odchylenie standardowe wszystkich pikseli w <strong>rastrze wartości</strong>, które należą do tej samej strefy co piksel wynikowy.</li><li><strong>Suma</strong> — oblicza łączną wartość wszystkich pikseli w <strong>rastrze wartości</strong>, które należą do tej samej strefy co piksel wynikowy.</li><li><strong>Zróżnicowanie</strong> — oblicza liczbę unikalnych wartości dla wszystkich pikseli w <strong>rastrze wartości</strong>, które należą do tej samej strefy co piksel wynikowy.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Raster zawierający wartości, na podstawie których są obliczane statystyki.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>Pole zawierające wartości definiujące poszczególne strefy. Może to być pole całkowitoliczbowe lub znakowe rastra strefy.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>Zestaw danych, który definiuje strefy. Strefy mogą być definiowane przez raster całkowitoliczbowy.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>Określa sposób obliczania statystyki.</p><ul><li><strong>Arytmetyczna</strong> — oblicza statystykę arytmetyczną. Jest to ustawienie domyślne.</li><li><strong>Kołowa</strong> — oblicza statystykę kołową, która jest odpowiednia dla wielkości cyklicznych, takich jak kierunek kompasu w stopniach, pory dnia i ułamkowe części liczb rzeczywistych.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>Najwyższa możliwa wartość (górna granica) w danych cyklicznych. Jest to liczba dodatnia, której wartość domyślna wynosi 360. Ta wartość reprezentuje również tę samą wielkość, co najmniejsza możliwa wartość (dolna granica).</p><p>Ten parametr ma zastosowanie tylko wtedy, gdy obliczana jest statystyka kołowa.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>Raster wejściowy, dla którego zostanie wygładzona granica między strefami.</p><p>Musi mieć on typ całkowitoliczbowy.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Określa liczbę procesów wygładzania, które zostaną wykonane: dwa razy lub jeden raz.</p><ul><li><p><strong>Zaznaczone</strong> — operacja rozszerzania i zmniejszania zostanie wykonana dwa razy. Za pierwszym razem operacja jest wykonywana zgodnie z podanym typem sortowania. Następnie dodatkowa operacja rozszerzania i zmniejszania jest wykonywana z odwróconym priorytetem. To jest ustawienie domyślne.</p></li><li><p><strong>Niezaznaczone</strong> — operacja rozszerzania i zmniejszania jest wykonywana jeden raz zgodnie z typem sortowania.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Określa typ sortowania używanego w procesie wygładzania. Sortowanie określa priorytet, według którego komórki mogą się rozszerzać do swoich sąsiadów.</p><p>Sortowanie może odbywać się na podstawie wartości strefy lub powierzchni strefy.</p><ul><li><p><strong>Nie sortuj</strong> — strefy nie są sortowane według wielkości. Strefy o większych wartościach mają wyższy priorytet w celu rozszerzania do stref o niższych wartościach w wygładzonym wyniku. To jest ustawienie domyślne.</p></li><li><p><strong>Malejąco</strong> — strefy są sortowane według wielkości w kolejności malejącej. Strefy o większych powierzchniach całkowitych mają wyższy priorytet w celu rozszerzania do stref o mniejszych powierzchniach całkowitych. Ta opcja ma tendencję do eliminowania lub zmniejszania dominacji komórek z mniejszych stref w wygładzonym wyniku.</p></li><li><p><strong>Rosnąco</strong> — strefy są sortowane według wielkości w kolejności rosnącej. Strefy o mniejszych powierzchniach całkowitych mają wyższy priorytet w celu rozszerzania do stref o większych powierzchniach całkowitych. Ta opcja ma tendencję do zachowywania lub zwiększania dominacji komórek z mniejszych stref w wygładzonym wyniku.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>Wymiar agregacji. Jest to wymiar, wzdłuż którego zmienne będą agregowane.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Określa metodę, która ma być używana do filtrowania wejściowych danych wielowymiarowych przed agregacją.</p><ul><li><strong>Wszystko</strong> — zostanie użyty pełny zakres dla każdego wymiaru. Jest to opcja domyślna.</li><li><strong>Według wartości</strong> — wymiar zostanie podzielony przy użyciu wartości lub listy wartości wymiaru.</li><li><strong>Według zakresów</strong> — wymiar zostanie podzielony przy użyciu zakresu lub listy zakresów.</li><li><strong>Według iteracji</strong> — wymiar zostanie podzielony na podany rozmiar przedziału.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Parametry definicji iteracji umożliwiają określenie wartości wymiarów, które mają być używane do filtrowania wejściowych danych wielowymiarowych na potrzeby analizy, gdy dla parametru <strong>Definicja wymiaru</strong> skonfigurowano opcję <strong>Według iteracji</strong>.</p><ul><li><strong>Wymiar</strong> — wymiar, który ma być używany do filtrowania.</li><li><strong>Rozpocznij pierwszą iterację</strong> — początek pierwszego przedziału. Ten przedział jest używany do iteracji w zestawie danych.</li><li><strong>Zakończ pierwszą iterację</strong> — koniec pierwszego przedziału. Ten przedział jest używany do iteracji w zestawie danych.</li><li><strong>Etap</strong> — częstotliwość z jaką będą dzielone dane.</li><li><strong>Jednostka</strong> — jednostka iteracji.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Określa przedział słów kluczowych, który będzie używany przy agregowaniu wzdłuż wymiaru.</p><p>Ten parametr jest wymagany, gdy dla parametru <strong>Typ</strong> skonfigurowano opcję <strong>Słowo kluczowe przedziału</strong>.</p><ul><li><strong>Co godzinę</strong> — wartości danych są agregowane w godzinowe etapy czasowe, a wynik zawiera każdą godzinę w postaci szeregów czasowych. Jest to opcja domyślna.</li><li><strong>Codziennie</strong> — wartości danych są agregowane w dzienne etapy czasowe, a wynik zawiera każdy dzień w postaci szeregów czasowych.</li><li><strong>Co tydzień</strong> — wartości danych są agregowane w tygodniowe etapy czasowe, a wynik zawiera każdy tydzień w postaci szeregów czasowych.</li><li><strong>Co dziesięć</strong> — wartości danych są agregowane w 3 okresy po 10 dni każdy. Ostatni okres może zawierać mniej lub więcej niż 10 dni. Dane wynikowe zawierają 3 segmenty dla każdego miesiąca.</li><li><strong>Co pięć</strong> — wartości danych są agregowane w 6 okresów po 5 dni każdy. Ostatni okres może zawierać mniej lub więcej niż 5 dni. Dane wynikowe zawierają 6 segmentów dla każdego miesiąca.</li><li><strong>Co miesiąc</strong> — wartości danych są agregowane w miesięczne etapy czasowe, a wynik zawiera każdy miesiąc w postaci szeregów czasowych.</li><li><strong>Co kwartał</strong> — wartości danych są agregowane w kwartalne etapy czasowe, a wynik zawiera każdy kwartał w postaci szeregów czasowych.</li><li><strong>Co rok</strong> — wartości danych są agregowane w roczne etapy czasowe, a wynik zawiera każdy rok w postaci szeregów czasowych.</li><li><strong>Powtarzane codziennie</strong> — wartości danych są agregowane w dzienne etapy czasowe, a wynik zawiera każdy dzień w postaci szeregów czasowych. Dane wynikowe zawierają maksymalnie 366 dziennych segmentów czasu.</li><li><strong>Powtarzane co tydzień</strong> — wartości danych są agregowane w tygodniowe etapy czasowe, a wynik zawiera jedną agregowaną wartość na tydzień. Dane wynikowe zawierają maksymalnie 53 tygodniowe segmenty czasu.</li><li><strong>Powtarzane co miesiąc</strong> — wartości danych są agregowane w miesięczne etapy czasowe, a wynik zawiera jedną agregowaną wartość na miesiąc. Dane wynikowe zawierają maksymalnie 12 miesięcznych segmentów czasu.</li><li><strong>Powtarzane co kwartał</strong> — wartości danych są agregowane w kwartalne etapy czasowe, a wyniki zawierają jedną agregowaną wartość na kwartał. Dane wynikowe zawierają maksymalnie 4 kwartalne segmenty czasu.</ul></li>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Określa metodę matematyczną, która zostanie użyta do połączenia agregowanych segmentów w przedział.</p><ul><li><strong>Większość</strong> — zostanie obliczona wartość pikseli, która występowała najczęściej dla wszystkich segmentów w danym przedziale.</li><li><strong>Maksimum</strong> — zostanie obliczona wartość maksymalna pikseli dla wszystkich segmentów w danym przedziale.</li><li><strong>Średnia</strong> — zostanie obliczona średnia wartość pikseli dla wszystkich segmentów w danym przedziale. Jest to opcja domyślna.</li><li><strong>Mediana</strong> — zostanie obliczona wartość mediany pikseli dla wszystkich segmentów w danym przedziale.</li><li><strong>Minimum</strong> — zostanie obliczona wartość minimalna pikseli dla wszystkich segmentów w danym przedziale.</li><li><strong>Mniejszość</strong> — zostanie obliczona wartość pikseli, która występowała najrzadziej dla wszystkich segmentów w danym przedziale.</li><li><strong>Zakres</strong> — zostanie obliczony zakres wartości pikseli dla wszystkich segmentów w danym przedziale.</li><li><strong>Odchylenie standardowe</strong> — zostanie obliczone odchylenie standardowe wartości pikseli dla wszystkich segmentów w danym przedziale.</li><li><strong>Suma</strong> — zostanie obliczona suma wartości pikseli dla wszystkich segmentów w danym przedziale.</li><li><strong>Zróżnicowanie</strong> — zostanie obliczona liczba unikalnych wartości pikseli dla wszystkich segmentów w danym przedziale.</li></ul><p>Dla wszystkich opcji istnieje odpowiednik z opcją Ignoruj wartości NoData. Spowodują one wykonanie operacji matematycznej na wszystkich poprawnych pikselach w danym wymiarze i zignorowanie pikseli o wartości NoData.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>Zakresy przedziałów określone w tabeli są używane do agregowania grup wartości. Wartości minimalna i maksymalna określają zakres do uwzględnienia.</p><p>Ten parametr jest wymagany, gdy dla parametru <strong>Typ</strong> skonfigurowano opcję <strong>Zakresy przedziałów</strong>.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>Wejściowy raster wielowymiarowy.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Określa przedział wymiaru, dla którego będą agregowane dane.</p><ul><li><strong>Wszystkie</strong> — dane zmiennej będą agregowane dla wszystkich segmentów. Jest to opcja domyślna.</li><li><strong>Słowo kluczowe przedziału</strong> — dane zmiennej będą agregowane przy użyciu najczęściej używanego przedziału.</li><li><strong>Wartość przedziału</strong> — dane zmiennej będą agregowane przy użyciu przedziału i jednostki podanych przez użytkownika.</li><li><strong>Zakresy przedziałów</strong> — dane zmiennej będą agregowane między podanymi parami wartości lub dat.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>Wielkość przedziału używanego podczas agregacji.</p><p>Ten parametr jest wymagany, gdy dla parametru <strong>Typ</strong> skonfigurowano opcję <strong>Wartość przedziału</strong>.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>Wartości wymiarów do użycia w celu filtrowania wejściowych danych wielowymiarowych na potrzeby analizy. Ten parametr jest wymagany, gdy dla parametru <strong>Definicja wymiaru</strong> skonfigurowano opcję <strong>Według wartości</strong>.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>Zmienna lub zmienne, które będą agregowane wzdłuż danego wymiaru.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>Wejściowy plik definicji regresji Esri (<strong>.ecd</strong>) zawierający statystyki i informacje związane z określonym zestawem danych, model regresji oraz wybrane atrybuty.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>Zestaw danych rastra lub zestawy danych reprezentujące zmienne prognozujące. Może to być raster jednopasmowy, wielopasmowy i wielowymiarowy, zestaw danych mozaiki lub zbiór rastrów.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>Rodzaj wykonywanych obliczeń statystycznych.</p><p>Dostępne są następujące statystyki: <strong>Większość</strong>,<strong>Maksimum</strong>,<strong>Wartość średnia</strong>,<strong>Mediana</strong>,<strong>Minimum</strong>,<strong>Mniejszość</strong>,<strong>Percentyl</strong>,<strong>Zakres</strong>,<strong>Odchylenie standardowe</strong>,<strong>Suma</strong> i <strong>Zróżnicowanie</strong>.</p><p>Ustawieniem domyślnym jest <strong>Wartość średnia</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>Kolory są losowo przypisywane do pikseli nieuwzględnionych na mapie kolorów.</p><ul><li>Niezaznaczone — nieprzyporządkowanym pikselom nie jest przypisywany kolor. To jest ustawienie domyślne.</li><li>Zaznaczone — nieprzyporządkowanym pikselom jest przypisywany kolor.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>W przypadku wybrania algorytmu Gram-Schmidt można również podać czujnik, który zebrał dane wejściowe rastra wielopasmowego. Wybranie typu czujnika spowoduje ustawienie odpowiednich wag pasm.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>Wartość określająca, ile przekrojów przed lub nad ma być uwzględnionych w zdefiniowanym oknie. Wartość musi być dodatnią liczbą całkowitą z zakresu od 1 do 100. Wartością domyślną jest 1.</p><p>Jednostką tego parametru jest przekrój.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>Wartość, która zostanie użyta do zaokrąglenia wartości liniowej do zakresu danej średniej kołowej.</p><p>Jej wartość musi być dodatnia. Wartość domyślna wynosi 360 stopni.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>Nazwa wymiaru, wzdłuż którego będzie się poruszać okno.</p><p>Domyślną wartością jest pierwszy wymiar inny niż x,y znajdujący się w wejściowym rastrze wielowymiarowym.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>Wartość określająca, ile przekrojów po lub pod ma być uwzględnionych w zdefiniowanym oknie. Wartość musi być dodatnią liczbą całkowitą z zakresu od 1 do 100. Wartością domyślną jest 1.</p><p>Jednostką tego parametru jest przekrój.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>Rastrem wejściowym może być tylko raster wielowymiarowy w formacie rastra chmury (Cloud Raster Format — plik <strong>.crf</strong>).</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>Określa, w jaki sposób wartości Brak danych będą obsługiwane przez obliczenia statystyczne.</p><ul><li><strong>Dane</strong> — wartości Brak danych na wejściu wartości będą ignorowane w wynikach zdefiniowanego okna, w którym się znajdują. To jest ustawienie domyślne.</li><li><strong>Brak danych</strong> — wartości wyjściowe będą wartościami Brak danych, jeśli jakiekolwiek wartości Brak danych istnieją w danych wejściowych w zdefiniowanym oknie.</li><li><strong>Wypełnij wartości Brak danych</strong> — wartości komórek Brak danych zostaną zastąpione przy użyciu wybranej statystyki w zdefiniowanym oknie.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Wskazuje metodę interpolacji, która będzie używana, gdy wartość percentylowa leży między dwiema wartościami komórek.</p><ul><li><strong>Automatyczne wykrywanie</strong> — jeśli raster wejściowy jest typu piksela w postaci liczby całkowitej, zostanie użyta metoda <strong>Najbliższy</strong>. Jeśli raster wejściowy ma zmiennoprzecinkowy typ pikseli, używana jest metoda <strong>Liniowy</strong>. To jest ustawienie domyślne.</li><li><strong>Najbliższy</strong> — używana jest najbliższa dostępna wartość do żądanego percentyla. W takim przypadku typ piksela wynikowego będzie taki sam jak typ wejściowego rastra wartości.</li><li><strong>Liniowy</strong> — używana będzie średnia ważona dwóch otaczających wartości z percentyla. W takim przypadku typ piksela wynikowego będzie zmiennoprzecinkowy.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>Percentyl, który zostanie obliczony po wybraniu opcji <strong>Percentyl</strong> jako typu statystyki. Wartość domyślna to 90 oznaczająca 90. percentyl.</p><p>Wartości należą do zakresu od 0 do 100. Zerowy percentyl jest właściwie równoważny statystyce minimum, a setny percentyl odpowiada statystyce maksimum, z takim wyjątkiem, że wynik będzie liczbą zmiennoprzecinkową. Wartość 50 da taki sam wynik jak statystyka mediana.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Wskazuje typ statystyki do obliczenia.</p><p></p><ul><li><strong>Średnia</strong> — umożliwia obliczenie średniej liczby (wartości średniej) komórek w zdefiniowanym oknie. To jest ustawienie domyślne.</li><li><strong>Średnia kołowa</strong> — umożliwia obliczenie średniej kołowej komórek w zdefiniowanym oknie. Po wybraniu tego typu statystyki udostępniany jest parametr <strong>Wartość zawijania okrężnego</strong>.</li><li><strong>Większość</strong> — umożliwia wyznaczenie większości (wartości występującej najczęściej) komórek w zdefiniowanym oknie.</li><li><strong>Maksimum</strong> — umożliwia wyznaczenie wartości maksymalnej (największej) komórek w zdefiniowanym oknie.</li><li><strong>Mediana</strong> — umożliwia wyznaczenie mediany komórek w sąsiedztwie.</li><li><strong>Minimum</strong> — umożliwia wyznaczenie wartości minimalnej (najmniejszej) komórek w sąsiedztwie.</li><li><strong>Percentyl</strong> — umożliwia obliczenie percentyla komórek w sąsiedztwie. Po wybraniu tego typu statystyki udostępniane są parametry <strong>Wartość percentylowa</strong> i <strong>Typ interpolacji percentylowej</strong>. Użyj tych nowych parametrów, aby odpowiednio określić percentyl do obliczenia i wybrać typ interpolacji do zastosowania.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>Wymiar do użycia na potrzeby interpolacji.</p><p>Ten parametr jest wymagany, gdy dla parametru <strong>Definicja wymiaru</strong>ustawiono wartość <strong>Według przedziału</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Określa metodę, która zostanie użyta do filtrowania wejściowych danych wielowymiarowych przed wykonaniem interpolacji.</p><ul><li><strong>Według wartości</strong> — wymiar zostanie podzielony przy użyciu wartości wymiaru lub listy wartości.</li><li><strong>Według przedziału</strong> — wymiar zostanie podzielony przy użyciu zakresu lub listy zakresów.</li><li><strong>Według rastra docelowego</strong> — wymiar zostanie podzielony przy użyciu określonego docelowego rastra wielowymiarowego.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>Koniec przedziału, który jest używany do iteracji w zestawie danych.</p><p>Ten parametr jest wymagany, gdy dla parametru <strong>Definicja wymiaru</strong> ustawiono wartość <strong>Według przedziału</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Określa, czy w analizie są ignorowane wartości Brak danych.</p><ul><li>Niezaznaczone — wynikiem analizy będzie wartość Brak danych, jeśli w przyległych przekrojach występują wartości Brak danych. To jest ustawienie domyślne.</li><li>Zaznaczone — w analizie zostaną użyte wyłącznie te przekroje, w których występują poprawne piksele, a przekroje zawierające wartości Brak danych będą ignorowane.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Określa metodę, która zostanie użyta do interpolacji rastra.</p><ul><li><strong>Liniowa</strong> — dane wyjściowe będą interpolowane liniowo przy użyciu przyległych przekrojów. To jest ustawienie domyślne.</li><li><strong>Najbliższy sąsiad</strong> — dane wyjściowe będą używały najbliższego przyległego przekroju.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>Wejściowy raster wielowymiarowy.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>Początek przedziału, który jest używany do iteracji w zestawie danych.</p><p>Ten parametr jest wymagany, gdy dla parametru <strong>Definicja wymiaru</strong> ustawiono wartość <strong>Według przedziału</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>Częstotliwość interpolowania danych.</p><p>Ten parametr jest wymagany, gdy dla parametru <strong>Definicja wymiaru</strong> ustawiono wartość <strong>Według przedziału</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>Raster docelowy określony przez definicję wymiaru.</p><p>Ten parametr jest wymagany, gdy dla parametru <strong>Definicja wymiaru</strong> ustawiono wartość <strong>Według rastra docelowego</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>Jednostka przedziału.</p><p>Ten parametr jest wymagany, gdy dla parametru <strong>Definicja wymiaru</strong> ustawiono wartość <strong>Według przedziału</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>Wartości wymiaru używane do filtrowania wejściowych danych wielowymiarowych na potrzeby analizy.</p><p>Ten parametr jest wymagany, gdy dla parametru <strong>Definicja wymiaru</strong> ustawiono wartość <strong>Według wartości</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>Zmienna lub zmienne, które będą interpolowane według definicji wymiaru.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Określa, czy dla danych wynikowych zostanie przeprowadzone spłaszczanie terenu za pomocą <strong>Sigma nought</strong>lub<strong>Gamma nought</strong>.</p><ul><li><strong>Gamma nought</strong> — rozpraszanie wsteczne beta nought zostanie znormalizowane przy użyciu jednostkowego pola powierzchni płaszczyzny lokalnie stycznej do modelu DEM, powszechnie znanego jako lokalny kąt padania. To jest ustawienie domyślne.</li><li><strong>Sigma nought</strong> — rozpraszanie wsteczne beta nought zostanie znormalizowane przy użyciu modelu DEM w celu obliczenia obszaru.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>Wartość wejściowa DEM</p><p>Model DEM służy do oszacowania lokalnego obszaru oświetlonego.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Określa, czy pionowy system odniesienia wejściowego modelu DEM zostanie przekształcony na wysokość elipsoidalną. Większość zbiorów danych wysokościowych odnosi się do wysokości ortometrycznej poziomu morza, dlatego w takich przypadkach wymagana jest korekcja w celu przeliczenia na wysokość elipsoidalną.</p><ul><li>Zaznaczone — zostanie wprowadzona korekcja geoidy w celu przeliczenia wysokości ortometrycznej na wysokość elipsoidalną (na podstawie geoidy EGM96). Jest to ustawienie domyślne.</li><li>Niezaznaczone — nie będzie wprowadzana korekcja geoidy. Tej opcji należy użyć tylko wówczas, gdy model DEM jest wyrażony w wysokości elipsoidalnej.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>Wejściowe dane radarowe.</p><p>Ten raster należy skalibrować radiometrycznie na beta nought.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>Obliczenie przypisane do trzeciego pasma.</p><p>Nazwa pasma, identyfikator pasma lub wyrażenie algebraiczne wykorzystujące pasma.</p><p>Obsługiwane są operatory jednoargumentowe: plus (+), minus (-), mnożenie (*) i dzielenie (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>Obliczenie przypisane do drugiego pasma.</p><p>Nazwa pasma, identyfikator pasma lub wyrażenie algebraiczne wykorzystujące pasma.</p><p>Obsługiwane są operatory jednoargumentowe: plus (+), minus (-), mnożenie (*) i dzielenie (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>Dane wejściowe rastra wielopasmowego.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Określa metodę, która zostanie użyta do wydzielenia pasm.</p><ul><li>Nazwy pasm — używana jest nazwa pasma reprezentująca przedział długości fal w widmie promieniowania elektromagnetycznego (na przykład Czerwień, Bliska podczerwień, Podczerwień termiczna) lub polaryzację (na przykład VH, VV, HH lub HV). Jest to ustawienie domyślne.</li><li>Identyfikatory pasm — używany jest numer pasma (na przykład B1, B2 lub B3).</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>Obliczenie przypisane do pierwszego pasma.</p><p>Nazwa pasma, identyfikator pasma lub wyrażenie algebraiczne wykorzystujące pasma.</p><p>Obsługiwane są operatory jednoargumentowe: plus (+), minus (-), mnożenie (*) i dzielenie (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Wybierz typ funkcji powierzchniowej, która zostanie dopasowana wokół komórki docelowej.</p><ul><li>Kwadratowa — do komórek w sąsiedztwie zostanie dopasowana kwadratowa funkcja powierzchniowa. Jest to typ domyślny. </li><li>Bikwadratowa — do komórek w sąsiedztwie zostanie dopasowana bikwadratowa funkcja powierzchniowa.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>Wynik zostanie obliczony dla tej odległości od środka komórki docelowej. Określa ona wielkość sąsiedztwa. Domyślną wartością jest wielkość komórki rastra wejściowego, co daje sąsiedztwo 3 na 3.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>Jednostki miary (stopnie lub procenty), które zostaną użyte w rastrze wynikowym spadku. Ten parametr jest aktywny tylko wtedy, gdy <strong>typ parametru</strong> to <strong>Spadki</strong>. </p><ul><li>Stopień — nachylenie spadku będzie obliczane w stopniach. Jest to wartość domyślna.</li><li>Wzrost procentowy — nachylenie spadku będzie obliczane jako wzrost procentowy, nazywany również wartością procentową nachylenia.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Określa typ parametru powierzchni wynikowej, który zostanie obliczony.</p><ul><li>Spadki — zostanie obliczony wskaźnik zmiany wysokości. Jest to wartość domyślna.</li><li>Ekspozycje — obliczony zostanie kierunek spadku maksymalnego wskaźnika zmian dla każdej komórki.</li><li>Krzywizna średnia — zmierzona zostanie ogólna krzywizna powierzchni. Jest ona obliczana jako średnia z krzywizny minimalnej i maksymalnej. Krzywizna ta opisuje wewnętrzną wypukłość lub wklęsłość powierzchni, niezależnie od kierunku i wpływu grawitacji.</li><li>Krzywizna tangencjalna (normalna warstwica) — mierzona jest geometryczna krzywizna normalna prostopadła do linii spadku, styczna do warstwicy. Krzywizna ta jest zwykle stosowana do charakteryzowania zbieżności lub rozbieżności przepływu przez powierzchnię.</li><li>Krzywizna profilu (normalna linia spadku) — mierzona jest geometryczna normalna krzywizna wzdłuż linii spadku. Krzywizna ta jest zwykle stosowana do charakteryzowania przyspieszenia i spowolnienia przepływu po powierzchni.</li><li>Krzywizna planu (krzywizna odwzorowana) — mierzona jest krzywizna wzdłuż warstwic.</li><li>Skręcenie geodezyjne warstwicy — mierzony jest współczynnik zmiany kąta spadku wzdłuż warstwic.</li><li>Krzywizna gaussowska — mierzona jest ogólna krzywizna powierzchni. Jest ona obliczana jako iloczyn krzywizny minimalnej i maksymalnej.</li><li>Krzywizna Casoratiego — mierzona jest ogólna krzywizna powierzchni. Może być zerem lub dowolną liczbą dodatnią.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Określa, czy azymuty geodezyjne będą odwzorowywane w celu skorygowania zniekształceń kątowych spowodowanych przez wyjściowe odniesienie przestrzenne. Ten parametr jest aktywny tylko wtedy, gdy <strong>Typ parametru</strong> ma wartość <strong>Ekspozycje</strong>.</p><ul><li>Niezaznaczone — azymuty geodezyjne nie będą odwzorowywane. Jest to ustawienie domyślne.</li><li>Zaznaczone — azymuty geodezyjne będą odwzorowywane.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>Wejściowy raster powierzchni. Może to być raster całkowitoliczbowy lub zmiennoprzecinkowy.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Określa, czy odległość sąsiedztwa będzie się zmieniać wraz ze zmianami krajobrazu (adaptacyjna). Maksymalna odległość jest określana przez odległość sąsiedztwa. Minimalna odległość to wielkość komórki rastra wejściowego.</p><ul><li>Niezaznaczone — we wszystkich lokalizacjach zostanie użyta pojedyncza (stała) odległość sąsiedztwa. Jest to ustawienie domyślne.</li><li>Zaznaczone — we wszystkich lokalizacjach zostanie użyta adaptacyjna odległość sąsiedztwa.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Określa, czy ekspozycja będzie mierzona od punktu na równiku, czy od bieguna północnego. Ten parametr jest aktywny tylko wtedy, gdy <strong>Typ parametru</strong> ma wartość <strong>Ekspozycje</strong>.</p><ul><li>Niezaznaczone — ekspozycja będzie mierzona od bieguna północnego. Jest to ustawienie domyślne.</li><li>Zaznaczono — ekspozycja będzie mierzona od punktu na równiku.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>Jednostka liniowa pionowych wartości Z.</p><p>Jest ona definiowana przez pionowy układ współrzędnych, jeśli taki istnieje. Jeśli pionowy układ współrzędnych nie istnieje, jednostka Z powinna być definiowana na podstawie listy jednostek, aby zapewnić poprawność obliczeń geodezyjnych.</p><ul><li>Cal — jednostką liniową będzie cal.</li><li>Stopa — jednostką liniową będzie stopa.</li><li>Jard — jednostką liniową będzie jard.</li><li>Mila (USA) jednostką liniową będzie mila.</li><li>Mila morska jednostką liniową będzie mila morska.</li><li>Milimetr — jednostką liniową będzie milimetr.</li><li>Centymetr — jednostką liniową będzie centymetr.</li><li>Metr — jednostką liniową będzie metr. Jest to wartość domyślna.</li><li>Kilometr — jednostką liniową będzie kilometr.</li><li>Decymetr — jednostką liniową będzie decymetr.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>Raster określający lokalizacje, w których będzie mieć miejsce analiza.</p><p>Raster może być typu całkowitoliczbowego lub zmiennoprzecinkowego.</p><p>Wszystkie komórki z poprawną wartością, w tym zerową, będą składać się na maskę. Komórki o wartości Brak danych w masce wejściowej będą mieć wartość Brak danych w danych wynikowych.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Wybierz rozmiar komórki do użycia w rastrze wynikowym. Jeśli rozmiar wszystkich komórek wejściowych jest taki sam, wszystkie opcje zwrócą ten sam wynik.</p><ul><li>Pierwszy — użyj pierwszego rozmiaru komórki spośród rastrów wejściowych.</li><li>Minimalny — użyj najmniejszego rozmiaru komórki spośród wszystkich rastrów wejściowych.</li><li>Maksymalny — użyj największego rozmiaru komórki spośród wszystkich rastrów wejściowych. To jest ustawienie domyślne.</li><li>Średni — użyj średniego rozmiaru komórki spośród wszystkich rastrów wejściowych.</li><li>Ostatni — użyj ostatniego rozmiaru komórki spośród rastrów wejściowych.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>Określa wartość zbieżności między dwiema kolejnymi iteracjami. Gdy wartość epsilon jest mniejsza od podanej wartości lub jej równa, iteracja zostaje zatrzymana i używany jest wynik ostatniej iteracji.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Wybierz zasięg do użycia w rastrze wynikowym:</p><ul><li><p>Pierwszy z — do określenia zasięgu przetwarzania zostanie użyty zasięg pierwszego rastra wejściowego.</p></li><li>Przecięcie — do określenia zasięgu przetwarzania zostanie użyty zasięg nakładających się pikseli. To jest ustawienie domyślne.</li><li>Suma — do określenia zasięgu przetwarzania zostanie użyty zasięg wszystkich rastrów.</li><li>Ostatni — do określenia zasięgu przetwarzania zostanie użyty zasięg ostatniego rastra wejściowego.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Określa maksymalną liczbę iteracji do wykonania. Obliczenia kończą się po osiągnięciu tej wartości, niezależnie od ustawienia <strong>Epsilon</strong>.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>Wejściowe rastry wielopasmowe.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>Raster wejściowy reprezentujący odległość kosztu skumulowanego od pierwszego źródła.</p><p>Powinna to być wynikowa odległość kosztu skumulowanego z funkcji <strong>Akumulacja odległości</strong> lub <strong>Przydział odległości.</strong></p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>Raster wejściowy reprezentujący odległość kosztu skumulowanego od drugiego źródła.</p><p>Powinna to być wynikowa odległość kosztu skumulowanego z funkcji <strong>Akumulacja odległości</strong> lub <strong>Przydział odległości.</strong></p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>Wejściowy raster kierunku powrotnego z pierwszego źródła.</p><p>Jest to zestaw danych rastrowych identyfikujący kierunek następnej komórki wzdłuż ścieżki najmniejszego kosztu z powrotem do pierwszego źródła. Jest to wynik funkcji <strong>Akumulacja odległości</strong> lub <strong>Przydział odległości.</strong></p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>Wejściowy raster kierunku powrotnego z drugiego źródła.</p><p>Jest to zestaw danych rastrowych identyfikujący kierunek następnej komórki wzdłuż ścieżki najmniejszego kosztu z powrotem do pierwszego źródła. Jest to wynik funkcji <strong>Akumulacja odległości</strong> lub <strong>Przydział odległości.</strong></p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>Próg w postaci wartości procentowej lub kosztu skumulowanego określający, czy dana komórka zostanie uwzględniona w wynikowym rastrze korytarza.</p><p>Gdy parametr <strong>Metoda progowa</strong> ma ustawienie <strong>Procent najmniejszego kosztu</strong>, określona wartość wskazuje wzrost procentowy, jaki należy zastosować do wartości minimalnej zsumowanych rastrów odległości kosztu skumulowanego. Gdy parametr <strong>Metoda progowa</strong> ma ustawienie <strong>Koszt skumulowany</strong>, wartość wskazuje komórki, których zsumowany koszt skumulowany jest równy lub niższy od wartości, która zostanie uwzględniona w korytarzu.</p><p>Ten parametr jest aktywny tylko wtedy, gdy parametr <strong>Metoda progowa</strong> ma ustawienie <strong>Procent najmniejszego kosztu</strong> lub <strong>Koszt skumulowany</strong>.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Określa sposób definiowania progu.</p><p></p><ul><li><strong>Brak progu</strong> — nie zostanie zastosowany żaden próg, a wynikowy korytarz obejmie cały zasięg rastrów wejściowych. Jest to ustawienie domyślne.</li><li><strong>Procent najmniejszego kosztu</strong> — próg zostanie zdefiniowany jako procent wartości minimalnej zsumowanych rastrów odległości kosztu skumulowanego.</li><li><strong>Koszt skumulowany</strong> — próg zostanie zdefiniowany w jednostkach odległości kosztu skumulowanego.</li></ul>"
};
const helpTexts_pl = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_pl);


//# sourceMappingURL=help-texts.pl-a6eab705.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,