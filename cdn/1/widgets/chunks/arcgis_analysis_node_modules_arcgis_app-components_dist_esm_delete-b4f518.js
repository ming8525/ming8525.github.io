"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_delete-b4f518"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/delete-items-32d24534.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/delete-items-32d24534.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DAYS_IN_RECYCLE_BIN),
/* harmony export */   a: () => (/* binding */ deleteItems),
/* harmony export */   b: () => (/* binding */ determineDeleteItemsBuckets),
/* harmony export */   c: () => (/* binding */ determineDeleteMode),
/* harmony export */   d: () => (/* binding */ deleteItem),
/* harmony export */   e: () => (/* binding */ determineDeletePrimaryAction)
/* harmony export */ });
/* harmony import */ var _service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./service-8c2c4241.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/service-8c2c4241.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */





const deleteItem = async (item, user, permanentDelete = false) => {
    const url = `${user.userContentUrl}/items/${item.id}/delete`;
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_3__.r)(url, { permanentDelete }, {}, "post");
};
const deleteItems = async (items, user, permanentDelete = false) => {
    const content = { items: items.map((item) => item.id).join(","), permanentDelete };
    const url = `${user.userContentUrl}/deleteItems`;
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_3__.r)(url, content, {}, "post");
};
/** Checks either `canRecycle` or `canDelete`, depending on the status of the recycle bin */
const canDeleteItem = async (item, user, portal) => {
    const endpoint = portal.sourceJSON.recycleBinEnabled ? "/canRecycle" : "/canDelete";
    const url = `${user.userContentUrl}/items/${item.id}${endpoint}`;
    return await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_3__.r)(url);
};
/**
 * Tries to fetch the data that was used to create this item
 * for map services or scene services which can be created from either a
 * dataView (View Service) or a file item, we may need to check both relationships
 * if it was created from a view (Service2Service) or if it was created from a file (Service2Data)
 */
const getSourceData = async (item, portal) => {
    const { type, typeKeywords } = item;
    const isSpecialType = [
        "Scene Service",
        "Map Service",
        "WFS",
        "OGCFeatureServer",
        "Vector Tile Service",
        "3DTiles Service"
    ].includes(type);
    const isTile = ["Map Service", "Vector Tile Service"].includes(type);
    let relatedType = isSpecialType
        ? "Service2Service"
        : item.typeKeywords.includes("Route Layer")
            ? "Service2Route"
            : "Service2Data";
    let relatedDirection = relatedType === "Service2Service" || relatedType === "Service2Route" ? "reverse" : "forward";
    let relatedItem;
    const isView = (relatedItem) => {
        return (relatedItem && relatedItem.typeKeywords.includes("View Service")) || false;
    };
    if (typeKeywords.indexOf("Bulk Published Service") > -1) {
        relatedType = "DataStore2BPService";
        relatedDirection = "reverse";
    }
    try {
        const response = await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_0__.g)(item.id, portal, {
            relationshipType: relatedType,
            direction: relatedDirection
        });
        relatedItem = (response === null || response === void 0 ? void 0 : response.total) ? response.relatedItems.shift() : null;
        // If Service2Service didn't return any results, and this is one of the
        // the special types, we need to check its Service2Data relationship, since
        // it was probably created from a file, not a view
        if (isSpecialType) {
            // For tile services we need to do this to cover the tile services that are published in tandem with
            // feature services from an SD file. Without this, the source data is interpreted to be the tandem feature
            // service, but the source item ID expected in /edit requests to the tile service require the item id
            // of the SD file.
            if ((isTile && !isView(relatedItem)) || !relatedItem) {
                const sourceData = await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_0__.g)(item.id, portal, {
                    relationshipType: "Service2Data",
                    direction: "forward"
                });
                return (sourceData === null || sourceData === void 0 ? void 0 : sourceData.total) ? sourceData.relatedItems.shift() : relatedItem;
            }
            else {
                return relatedItem;
            }
        }
        else {
            return relatedItem;
        }
    }
    catch (e) {
        // TODO: return `Result`
        console.error(e);
    }
};
/**
 * Tries to fetch the services/items that were created from this item
 * @public
 */
const getResultData = async (item, portal) => {
    const { type } = item;
    const relatedType = _service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_0__.i ? "Service2Service" : "Service2Data";
    const relatedDirection = relatedType === "Service2Service" && type !== "Feed" ? "forward" : "reverse";
    const response = await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_0__.g)(item.id, portal, {
        relationshipType: relatedType,
        direction: relatedDirection
    });
    return response.total > 0 && response.relatedItems;
};

const DAYS_IN_RECYCLE_BIN = 14;
/** Sorts `items` into buckets based on their protected status, related items, etc. */
const determineDeleteItemsBuckets = async (items, user, portal, allowDiscouraged = false) => {
    const protectedItems = [];
    const unprotectedItems = [];
    const unrecyclableItems = [];
    const isSourceItem = async (item, sourceData, resultData) => {
        const { typeKeywords, type } = item;
        return !sourceData && (resultData === null || resultData === void 0 ? void 0 : resultData.length) && !(0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_0__.i)(typeKeywords, type);
    };
    await Promise.all(items.map(async (item) => {
        var _a;
        try {
            const response = await canDeleteItem(item, user, portal);
            /**
             * Some items can be blocked or warned from deletion, despite a `success` message from canDelete.
             * Check again for items with dependencies, blocking them or marking for delete depending if delete
             * discouraged items are allowed to be deleted
             */
            if (response.success) {
                const sourceData = await getSourceData(item, portal);
                const resultData = await getResultData(item, portal);
                const discourageSourceDelete = await isSourceItem(item, sourceData, resultData);
                const preventSourceDelete = !discourageSourceDelete &&
                    !!resultData &&
                    !isFeedWithSingleHostedFeatureLayer(item, resultData) &&
                    !isHostedFeatureLayerFromFeed(item, resultData);
                const discouragedAllowedSourceItem = (_a = (allowDiscouraged &&
                    items.length === 1 &&
                    discourageSourceDelete && { item, error: { message: "Delete discouraged" } })) !== null && _a !== void 0 ? _a : null;
                if (discouragedAllowedSourceItem) {
                    unprotectedItems.push(discouragedAllowedSourceItem);
                }
                else {
                    discourageSourceDelete && !allDependentItemsIncludedForDelete(items, resultData)
                        ? protectedItems.push({ item, error: { message: "Delete discouraged" } })
                        : preventSourceDelete && !allDependentItemsIncludedForDelete(items, resultData)
                            ? protectedItems.push({ item, error: { messageCode: "CONT_00481", offendingItems: resultData } })
                            : unprotectedItems.push({ item });
                }
            }
            else {
                // TODO: Remove once backend handles delete protected, unsupported items
                if (item.protected) {
                    protectedItems.push({ item, error: { messageCode: "CONT_0048" } });
                }
                else {
                    unrecyclableItems.push({ item });
                }
            }
        }
        catch (error) {
            const sharingError = Object.assign({}, error);
            switch (error.messageCode) {
                // This service item has a related Service item
                case "CONT_00481": {
                    const { offendingItems } = error;
                    if (allDependentItemsIncludedForDelete(items, offendingItems)) {
                        unprotectedItems.push({ item });
                    }
                    else {
                        protectedItems.push({ item, error: sharingError });
                    }
                    break;
                }
                case "CONT_0048": // Delete protection is turned on
                    protectedItems.push({ item, error: sharingError });
                    break;
                case "CONT_0298": // Part of an unsupported relationship type
                    unrecyclableItems.push({ item });
                    break;
                default:
                    protectedItems.push({ item, error: sharingError });
                    break;
            }
        }
    }));
    return Promise.resolve({ protectedItems, unprotectedItems, unrecyclableItems });
};
const determineDeleteMode = (buckets) => {
    const { protectedItems, unrecyclableItems, unprotectedItems } = buckets;
    const modeList = [];
    protectedItems.length > 0 && modeList.push("PROTECTED");
    unrecyclableItems.length > 0 && modeList.push("UNRECYCLABLE");
    unprotectedItems.length > 0 && modeList.push("UNPROTECTED");
    // TODO: Improve type safety
    return modeList.join("_");
};
const determineDeletePrimaryAction = (mode) => {
    let primaryAction = "DELETE";
    // TODO: Reconnect in recycle bin logic
    // if (inRecycleBin) {
    //   return "PERMANENTLY_DELETE";
    // }
    switch (mode) {
        case "PROTECTED":
            primaryAction = "NONE";
            break;
        case "UNRECYCLABLE":
        case "PROTECTED_UNRECYCLABLE":
            primaryAction = "PERMANENTLY_DELETE";
    }
    return primaryAction;
};
const allDependentItemsIncludedForDelete = (items, offendingItems) => {
    var _a;
    // If all related items are also selected for delete, then they can be marked unprotected
    // But only if all of those related items too can be deleted
    const offendingItemIds = (_a = offendingItems === null || offendingItems === void 0 ? void 0 : offendingItems.map((item) => { var _a; return (_a = item.itemId) !== null && _a !== void 0 ? _a : item.id; })) !== null && _a !== void 0 ? _a : [];
    const fullOffendingItems = items.filter((item) => offendingItemIds.includes(item.id));
    const areAllOffendingItemsSelected = offendingItemIds.every((id) => items.some((item) => item.id === id));
    const areAllOffendingItemsDeletable = fullOffendingItems.every((item) => !item.protected);
    return areAllOffendingItemsSelected && areAllOffendingItemsDeletable;
};
const isFeedWithSingleHostedFeatureLayer = (item, resultData) => {
    const { typeKeywords, type } = item;
    return (item.type === "Feed" &&
        (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_0__.i)(typeKeywords, type) &&
        (resultData === null || resultData === void 0 ? void 0 : resultData.length) === 1 &&
        resultData[0].type === "Feature Service" &&
        resultData[0].typeKeywords.includes("Hosted Service"));
};
const isHostedFeatureLayerFromFeed = (item, resultData) => {
    const { typeKeywords, type } = item;
    return (item.type === "Feature Service" &&
        (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_0__.i)(typeKeywords, type) &&
        (resultData === null || resultData === void 0 ? void 0 : resultData.length) === 1 &&
        resultData[0].type === "Feed" &&
        resultData[0].typeKeywords.includes("Hosted Service"));
};



//# sourceMappingURL=delete-items-32d24534.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fZGVsZXRlLWI0ZjUxOC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDbUY7QUFDaEQ7QUFDTDtBQUNzQjs7QUFFcEQ7QUFDQSxtQkFBbUIsb0JBQW9CLFNBQVMsUUFBUTtBQUN4RCxXQUFXLHNEQUFPLFFBQVEsaUJBQWlCLElBQUk7QUFDL0M7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixtQkFBbUIsb0JBQW9CO0FBQ3ZDLFdBQVcsc0RBQU8saUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQixTQUFTLFFBQVEsRUFBRSxTQUFTO0FBQ25FLGlCQUFpQixzREFBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxQkFBcUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHVEQUFlO0FBQzlDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsdURBQWU7QUFDeEQ7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CLHdCQUF3QixtREFBZTtBQUN2QztBQUNBLDJCQUEyQix1REFBZTtBQUMxQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscUJBQXFCO0FBQ3JDLDhHQUE4Ryx1REFBZTtBQUM3SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGVBQWUsaUNBQWlDO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsZUFBZSxpQ0FBaUM7QUFDaEc7QUFDQSxvREFBb0QsZUFBZSx5REFBeUQ7QUFDNUgsc0RBQXNELE1BQU07QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxlQUFlLDRCQUE0QjtBQUNyRjtBQUNBO0FBQ0EsNkNBQTZDLE1BQU07QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGlCQUFpQjtBQUM3QztBQUNBLGdEQUFnRCxNQUFNO0FBQ3REO0FBQ0E7QUFDQSw4Q0FBOEMsMkJBQTJCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDJCQUEyQjtBQUNyRTtBQUNBO0FBQ0EsNkNBQTZDLE1BQU07QUFDbkQ7QUFDQTtBQUNBLDBDQUEwQywyQkFBMkI7QUFDckU7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLDZCQUE2QixxREFBcUQ7QUFDbEY7QUFDQTtBQUNBLFlBQVksc0RBQXNEO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtJQUFrSSxRQUFRLHFFQUFxRTtBQUMvTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFCQUFxQjtBQUNqQztBQUNBLFFBQVEsdURBQWU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkscUJBQXFCO0FBQ2pDO0FBQ0EsUUFBUSx1REFBZTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFc0s7O0FBRXRLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vZGVsZXRlLWl0ZW1zLTMyZDI0NTM0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHY0LjAuNThcbiAqL1xuaW1wb3J0IHsgZyBhcyBnZXRSZWxhdGVkSXRlbXMsIGkgYXMgaXNIb3N0ZWRTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlLThjMmM0MjQxLmpzJztcbmltcG9ydCAnLi9sb2FkTW9kdWxlcy1iNGFjMTI0Ny5qcyc7XG5pbXBvcnQgJy4vY29uZmlnLTc1YWRmOTYyLmpzJztcbmltcG9ydCB7IHIgYXMgcmVxdWVzdCB9IGZyb20gJy4vcG9ydGFsLWQ1MThiNTcxLmpzJztcblxuY29uc3QgZGVsZXRlSXRlbSA9IGFzeW5jIChpdGVtLCB1c2VyLCBwZXJtYW5lbnREZWxldGUgPSBmYWxzZSkgPT4ge1xuICAgIGNvbnN0IHVybCA9IGAke3VzZXIudXNlckNvbnRlbnRVcmx9L2l0ZW1zLyR7aXRlbS5pZH0vZGVsZXRlYDtcbiAgICByZXR1cm4gcmVxdWVzdCh1cmwsIHsgcGVybWFuZW50RGVsZXRlIH0sIHt9LCBcInBvc3RcIik7XG59O1xuY29uc3QgZGVsZXRlSXRlbXMgPSBhc3luYyAoaXRlbXMsIHVzZXIsIHBlcm1hbmVudERlbGV0ZSA9IGZhbHNlKSA9PiB7XG4gICAgY29uc3QgY29udGVudCA9IHsgaXRlbXM6IGl0ZW1zLm1hcCgoaXRlbSkgPT4gaXRlbS5pZCkuam9pbihcIixcIiksIHBlcm1hbmVudERlbGV0ZSB9O1xuICAgIGNvbnN0IHVybCA9IGAke3VzZXIudXNlckNvbnRlbnRVcmx9L2RlbGV0ZUl0ZW1zYDtcbiAgICByZXR1cm4gcmVxdWVzdCh1cmwsIGNvbnRlbnQsIHt9LCBcInBvc3RcIik7XG59O1xuLyoqIENoZWNrcyBlaXRoZXIgYGNhblJlY3ljbGVgIG9yIGBjYW5EZWxldGVgLCBkZXBlbmRpbmcgb24gdGhlIHN0YXR1cyBvZiB0aGUgcmVjeWNsZSBiaW4gKi9cbmNvbnN0IGNhbkRlbGV0ZUl0ZW0gPSBhc3luYyAoaXRlbSwgdXNlciwgcG9ydGFsKSA9PiB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBwb3J0YWwuc291cmNlSlNPTi5yZWN5Y2xlQmluRW5hYmxlZCA/IFwiL2NhblJlY3ljbGVcIiA6IFwiL2NhbkRlbGV0ZVwiO1xuICAgIGNvbnN0IHVybCA9IGAke3VzZXIudXNlckNvbnRlbnRVcmx9L2l0ZW1zLyR7aXRlbS5pZH0ke2VuZHBvaW50fWA7XG4gICAgcmV0dXJuIGF3YWl0IHJlcXVlc3QodXJsKTtcbn07XG4vKipcbiAqIFRyaWVzIHRvIGZldGNoIHRoZSBkYXRhIHRoYXQgd2FzIHVzZWQgdG8gY3JlYXRlIHRoaXMgaXRlbVxuICogZm9yIG1hcCBzZXJ2aWNlcyBvciBzY2VuZSBzZXJ2aWNlcyB3aGljaCBjYW4gYmUgY3JlYXRlZCBmcm9tIGVpdGhlciBhXG4gKiBkYXRhVmlldyAoVmlldyBTZXJ2aWNlKSBvciBhIGZpbGUgaXRlbSwgd2UgbWF5IG5lZWQgdG8gY2hlY2sgYm90aCByZWxhdGlvbnNoaXBzXG4gKiBpZiBpdCB3YXMgY3JlYXRlZCBmcm9tIGEgdmlldyAoU2VydmljZTJTZXJ2aWNlKSBvciBpZiBpdCB3YXMgY3JlYXRlZCBmcm9tIGEgZmlsZSAoU2VydmljZTJEYXRhKVxuICovXG5jb25zdCBnZXRTb3VyY2VEYXRhID0gYXN5bmMgKGl0ZW0sIHBvcnRhbCkgPT4ge1xuICAgIGNvbnN0IHsgdHlwZSwgdHlwZUtleXdvcmRzIH0gPSBpdGVtO1xuICAgIGNvbnN0IGlzU3BlY2lhbFR5cGUgPSBbXG4gICAgICAgIFwiU2NlbmUgU2VydmljZVwiLFxuICAgICAgICBcIk1hcCBTZXJ2aWNlXCIsXG4gICAgICAgIFwiV0ZTXCIsXG4gICAgICAgIFwiT0dDRmVhdHVyZVNlcnZlclwiLFxuICAgICAgICBcIlZlY3RvciBUaWxlIFNlcnZpY2VcIixcbiAgICAgICAgXCIzRFRpbGVzIFNlcnZpY2VcIlxuICAgIF0uaW5jbHVkZXModHlwZSk7XG4gICAgY29uc3QgaXNUaWxlID0gW1wiTWFwIFNlcnZpY2VcIiwgXCJWZWN0b3IgVGlsZSBTZXJ2aWNlXCJdLmluY2x1ZGVzKHR5cGUpO1xuICAgIGxldCByZWxhdGVkVHlwZSA9IGlzU3BlY2lhbFR5cGVcbiAgICAgICAgPyBcIlNlcnZpY2UyU2VydmljZVwiXG4gICAgICAgIDogaXRlbS50eXBlS2V5d29yZHMuaW5jbHVkZXMoXCJSb3V0ZSBMYXllclwiKVxuICAgICAgICAgICAgPyBcIlNlcnZpY2UyUm91dGVcIlxuICAgICAgICAgICAgOiBcIlNlcnZpY2UyRGF0YVwiO1xuICAgIGxldCByZWxhdGVkRGlyZWN0aW9uID0gcmVsYXRlZFR5cGUgPT09IFwiU2VydmljZTJTZXJ2aWNlXCIgfHwgcmVsYXRlZFR5cGUgPT09IFwiU2VydmljZTJSb3V0ZVwiID8gXCJyZXZlcnNlXCIgOiBcImZvcndhcmRcIjtcbiAgICBsZXQgcmVsYXRlZEl0ZW07XG4gICAgY29uc3QgaXNWaWV3ID0gKHJlbGF0ZWRJdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiAocmVsYXRlZEl0ZW0gJiYgcmVsYXRlZEl0ZW0udHlwZUtleXdvcmRzLmluY2x1ZGVzKFwiVmlldyBTZXJ2aWNlXCIpKSB8fCBmYWxzZTtcbiAgICB9O1xuICAgIGlmICh0eXBlS2V5d29yZHMuaW5kZXhPZihcIkJ1bGsgUHVibGlzaGVkIFNlcnZpY2VcIikgPiAtMSkge1xuICAgICAgICByZWxhdGVkVHlwZSA9IFwiRGF0YVN0b3JlMkJQU2VydmljZVwiO1xuICAgICAgICByZWxhdGVkRGlyZWN0aW9uID0gXCJyZXZlcnNlXCI7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0UmVsYXRlZEl0ZW1zKGl0ZW0uaWQsIHBvcnRhbCwge1xuICAgICAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogcmVsYXRlZFR5cGUsXG4gICAgICAgICAgICBkaXJlY3Rpb246IHJlbGF0ZWREaXJlY3Rpb25cbiAgICAgICAgfSk7XG4gICAgICAgIHJlbGF0ZWRJdGVtID0gKHJlc3BvbnNlID09PSBudWxsIHx8IHJlc3BvbnNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiByZXNwb25zZS50b3RhbCkgPyByZXNwb25zZS5yZWxhdGVkSXRlbXMuc2hpZnQoKSA6IG51bGw7XG4gICAgICAgIC8vIElmIFNlcnZpY2UyU2VydmljZSBkaWRuJ3QgcmV0dXJuIGFueSByZXN1bHRzLCBhbmQgdGhpcyBpcyBvbmUgb2YgdGhlXG4gICAgICAgIC8vIHRoZSBzcGVjaWFsIHR5cGVzLCB3ZSBuZWVkIHRvIGNoZWNrIGl0cyBTZXJ2aWNlMkRhdGEgcmVsYXRpb25zaGlwLCBzaW5jZVxuICAgICAgICAvLyBpdCB3YXMgcHJvYmFibHkgY3JlYXRlZCBmcm9tIGEgZmlsZSwgbm90IGEgdmlld1xuICAgICAgICBpZiAoaXNTcGVjaWFsVHlwZSkge1xuICAgICAgICAgICAgLy8gRm9yIHRpbGUgc2VydmljZXMgd2UgbmVlZCB0byBkbyB0aGlzIHRvIGNvdmVyIHRoZSB0aWxlIHNlcnZpY2VzIHRoYXQgYXJlIHB1Ymxpc2hlZCBpbiB0YW5kZW0gd2l0aFxuICAgICAgICAgICAgLy8gZmVhdHVyZSBzZXJ2aWNlcyBmcm9tIGFuIFNEIGZpbGUuIFdpdGhvdXQgdGhpcywgdGhlIHNvdXJjZSBkYXRhIGlzIGludGVycHJldGVkIHRvIGJlIHRoZSB0YW5kZW0gZmVhdHVyZVxuICAgICAgICAgICAgLy8gc2VydmljZSwgYnV0IHRoZSBzb3VyY2UgaXRlbSBJRCBleHBlY3RlZCBpbiAvZWRpdCByZXF1ZXN0cyB0byB0aGUgdGlsZSBzZXJ2aWNlIHJlcXVpcmUgdGhlIGl0ZW0gaWRcbiAgICAgICAgICAgIC8vIG9mIHRoZSBTRCBmaWxlLlxuICAgICAgICAgICAgaWYgKChpc1RpbGUgJiYgIWlzVmlldyhyZWxhdGVkSXRlbSkpIHx8ICFyZWxhdGVkSXRlbSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZURhdGEgPSBhd2FpdCBnZXRSZWxhdGVkSXRlbXMoaXRlbS5pZCwgcG9ydGFsLCB7XG4gICAgICAgICAgICAgICAgICAgIHJlbGF0aW9uc2hpcFR5cGU6IFwiU2VydmljZTJEYXRhXCIsXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogXCJmb3J3YXJkXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHNvdXJjZURhdGEgPT09IG51bGwgfHwgc291cmNlRGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlRGF0YS50b3RhbCkgPyBzb3VyY2VEYXRhLnJlbGF0ZWRJdGVtcy5zaGlmdCgpIDogcmVsYXRlZEl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVsYXRlZEl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVsYXRlZEl0ZW07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gVE9ETzogcmV0dXJuIGBSZXN1bHRgXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxufTtcbi8qKlxuICogVHJpZXMgdG8gZmV0Y2ggdGhlIHNlcnZpY2VzL2l0ZW1zIHRoYXQgd2VyZSBjcmVhdGVkIGZyb20gdGhpcyBpdGVtXG4gKiBAcHVibGljXG4gKi9cbmNvbnN0IGdldFJlc3VsdERhdGEgPSBhc3luYyAoaXRlbSwgcG9ydGFsKSA9PiB7XG4gICAgY29uc3QgeyB0eXBlIH0gPSBpdGVtO1xuICAgIGNvbnN0IHJlbGF0ZWRUeXBlID0gaXNIb3N0ZWRTZXJ2aWNlID8gXCJTZXJ2aWNlMlNlcnZpY2VcIiA6IFwiU2VydmljZTJEYXRhXCI7XG4gICAgY29uc3QgcmVsYXRlZERpcmVjdGlvbiA9IHJlbGF0ZWRUeXBlID09PSBcIlNlcnZpY2UyU2VydmljZVwiICYmIHR5cGUgIT09IFwiRmVlZFwiID8gXCJmb3J3YXJkXCIgOiBcInJldmVyc2VcIjtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGdldFJlbGF0ZWRJdGVtcyhpdGVtLmlkLCBwb3J0YWwsIHtcbiAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogcmVsYXRlZFR5cGUsXG4gICAgICAgIGRpcmVjdGlvbjogcmVsYXRlZERpcmVjdGlvblxuICAgIH0pO1xuICAgIHJldHVybiByZXNwb25zZS50b3RhbCA+IDAgJiYgcmVzcG9uc2UucmVsYXRlZEl0ZW1zO1xufTtcblxuY29uc3QgREFZU19JTl9SRUNZQ0xFX0JJTiA9IDE0O1xuLyoqIFNvcnRzIGBpdGVtc2AgaW50byBidWNrZXRzIGJhc2VkIG9uIHRoZWlyIHByb3RlY3RlZCBzdGF0dXMsIHJlbGF0ZWQgaXRlbXMsIGV0Yy4gKi9cbmNvbnN0IGRldGVybWluZURlbGV0ZUl0ZW1zQnVja2V0cyA9IGFzeW5jIChpdGVtcywgdXNlciwgcG9ydGFsLCBhbGxvd0Rpc2NvdXJhZ2VkID0gZmFsc2UpID0+IHtcbiAgICBjb25zdCBwcm90ZWN0ZWRJdGVtcyA9IFtdO1xuICAgIGNvbnN0IHVucHJvdGVjdGVkSXRlbXMgPSBbXTtcbiAgICBjb25zdCB1bnJlY3ljbGFibGVJdGVtcyA9IFtdO1xuICAgIGNvbnN0IGlzU291cmNlSXRlbSA9IGFzeW5jIChpdGVtLCBzb3VyY2VEYXRhLCByZXN1bHREYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgdHlwZUtleXdvcmRzLCB0eXBlIH0gPSBpdGVtO1xuICAgICAgICByZXR1cm4gIXNvdXJjZURhdGEgJiYgKHJlc3VsdERhdGEgPT09IG51bGwgfHwgcmVzdWx0RGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzdWx0RGF0YS5sZW5ndGgpICYmICFpc0hvc3RlZFNlcnZpY2UodHlwZUtleXdvcmRzLCB0eXBlKTtcbiAgICB9O1xuICAgIGF3YWl0IFByb21pc2UuYWxsKGl0ZW1zLm1hcChhc3luYyAoaXRlbSkgPT4ge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNhbkRlbGV0ZUl0ZW0oaXRlbSwgdXNlciwgcG9ydGFsKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU29tZSBpdGVtcyBjYW4gYmUgYmxvY2tlZCBvciB3YXJuZWQgZnJvbSBkZWxldGlvbiwgZGVzcGl0ZSBhIGBzdWNjZXNzYCBtZXNzYWdlIGZyb20gY2FuRGVsZXRlLlxuICAgICAgICAgICAgICogQ2hlY2sgYWdhaW4gZm9yIGl0ZW1zIHdpdGggZGVwZW5kZW5jaWVzLCBibG9ja2luZyB0aGVtIG9yIG1hcmtpbmcgZm9yIGRlbGV0ZSBkZXBlbmRpbmcgaWYgZGVsZXRlXG4gICAgICAgICAgICAgKiBkaXNjb3VyYWdlZCBpdGVtcyBhcmUgYWxsb3dlZCB0byBiZSBkZWxldGVkXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlRGF0YSA9IGF3YWl0IGdldFNvdXJjZURhdGEoaXRlbSwgcG9ydGFsKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHREYXRhID0gYXdhaXQgZ2V0UmVzdWx0RGF0YShpdGVtLCBwb3J0YWwpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc2NvdXJhZ2VTb3VyY2VEZWxldGUgPSBhd2FpdCBpc1NvdXJjZUl0ZW0oaXRlbSwgc291cmNlRGF0YSwgcmVzdWx0RGF0YSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmVudFNvdXJjZURlbGV0ZSA9ICFkaXNjb3VyYWdlU291cmNlRGVsZXRlICYmXG4gICAgICAgICAgICAgICAgICAgICEhcmVzdWx0RGF0YSAmJlxuICAgICAgICAgICAgICAgICAgICAhaXNGZWVkV2l0aFNpbmdsZUhvc3RlZEZlYXR1cmVMYXllcihpdGVtLCByZXN1bHREYXRhKSAmJlxuICAgICAgICAgICAgICAgICAgICAhaXNIb3N0ZWRGZWF0dXJlTGF5ZXJGcm9tRmVlZChpdGVtLCByZXN1bHREYXRhKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXNjb3VyYWdlZEFsbG93ZWRTb3VyY2VJdGVtID0gKF9hID0gKGFsbG93RGlzY291cmFnZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMubGVuZ3RoID09PSAxICYmXG4gICAgICAgICAgICAgICAgICAgIGRpc2NvdXJhZ2VTb3VyY2VEZWxldGUgJiYgeyBpdGVtLCBlcnJvcjogeyBtZXNzYWdlOiBcIkRlbGV0ZSBkaXNjb3VyYWdlZFwiIH0gfSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGRpc2NvdXJhZ2VkQWxsb3dlZFNvdXJjZUl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdW5wcm90ZWN0ZWRJdGVtcy5wdXNoKGRpc2NvdXJhZ2VkQWxsb3dlZFNvdXJjZUl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzY291cmFnZVNvdXJjZURlbGV0ZSAmJiAhYWxsRGVwZW5kZW50SXRlbXNJbmNsdWRlZEZvckRlbGV0ZShpdGVtcywgcmVzdWx0RGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcHJvdGVjdGVkSXRlbXMucHVzaCh7IGl0ZW0sIGVycm9yOiB7IG1lc3NhZ2U6IFwiRGVsZXRlIGRpc2NvdXJhZ2VkXCIgfSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBwcmV2ZW50U291cmNlRGVsZXRlICYmICFhbGxEZXBlbmRlbnRJdGVtc0luY2x1ZGVkRm9yRGVsZXRlKGl0ZW1zLCByZXN1bHREYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gcHJvdGVjdGVkSXRlbXMucHVzaCh7IGl0ZW0sIGVycm9yOiB7IG1lc3NhZ2VDb2RlOiBcIkNPTlRfMDA0ODFcIiwgb2ZmZW5kaW5nSXRlbXM6IHJlc3VsdERhdGEgfSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdW5wcm90ZWN0ZWRJdGVtcy5wdXNoKHsgaXRlbSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBSZW1vdmUgb25jZSBiYWNrZW5kIGhhbmRsZXMgZGVsZXRlIHByb3RlY3RlZCwgdW5zdXBwb3J0ZWQgaXRlbXNcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5wcm90ZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkSXRlbXMucHVzaCh7IGl0ZW0sIGVycm9yOiB7IG1lc3NhZ2VDb2RlOiBcIkNPTlRfMDA0OFwiIH0gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1bnJlY3ljbGFibGVJdGVtcy5wdXNoKHsgaXRlbSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCBzaGFyaW5nRXJyb3IgPSBPYmplY3QuYXNzaWduKHt9LCBlcnJvcik7XG4gICAgICAgICAgICBzd2l0Y2ggKGVycm9yLm1lc3NhZ2VDb2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBzZXJ2aWNlIGl0ZW0gaGFzIGEgcmVsYXRlZCBTZXJ2aWNlIGl0ZW1cbiAgICAgICAgICAgICAgICBjYXNlIFwiQ09OVF8wMDQ4MVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgb2ZmZW5kaW5nSXRlbXMgfSA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsRGVwZW5kZW50SXRlbXNJbmNsdWRlZEZvckRlbGV0ZShpdGVtcywgb2ZmZW5kaW5nSXRlbXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bnByb3RlY3RlZEl0ZW1zLnB1c2goeyBpdGVtIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkSXRlbXMucHVzaCh7IGl0ZW0sIGVycm9yOiBzaGFyaW5nRXJyb3IgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgXCJDT05UXzAwNDhcIjogLy8gRGVsZXRlIHByb3RlY3Rpb24gaXMgdHVybmVkIG9uXG4gICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZEl0ZW1zLnB1c2goeyBpdGVtLCBlcnJvcjogc2hhcmluZ0Vycm9yIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiQ09OVF8wMjk4XCI6IC8vIFBhcnQgb2YgYW4gdW5zdXBwb3J0ZWQgcmVsYXRpb25zaGlwIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgdW5yZWN5Y2xhYmxlSXRlbXMucHVzaCh7IGl0ZW0gfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZEl0ZW1zLnB1c2goeyBpdGVtLCBlcnJvcjogc2hhcmluZ0Vycm9yIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgcHJvdGVjdGVkSXRlbXMsIHVucHJvdGVjdGVkSXRlbXMsIHVucmVjeWNsYWJsZUl0ZW1zIH0pO1xufTtcbmNvbnN0IGRldGVybWluZURlbGV0ZU1vZGUgPSAoYnVja2V0cykgPT4ge1xuICAgIGNvbnN0IHsgcHJvdGVjdGVkSXRlbXMsIHVucmVjeWNsYWJsZUl0ZW1zLCB1bnByb3RlY3RlZEl0ZW1zIH0gPSBidWNrZXRzO1xuICAgIGNvbnN0IG1vZGVMaXN0ID0gW107XG4gICAgcHJvdGVjdGVkSXRlbXMubGVuZ3RoID4gMCAmJiBtb2RlTGlzdC5wdXNoKFwiUFJPVEVDVEVEXCIpO1xuICAgIHVucmVjeWNsYWJsZUl0ZW1zLmxlbmd0aCA+IDAgJiYgbW9kZUxpc3QucHVzaChcIlVOUkVDWUNMQUJMRVwiKTtcbiAgICB1bnByb3RlY3RlZEl0ZW1zLmxlbmd0aCA+IDAgJiYgbW9kZUxpc3QucHVzaChcIlVOUFJPVEVDVEVEXCIpO1xuICAgIC8vIFRPRE86IEltcHJvdmUgdHlwZSBzYWZldHlcbiAgICByZXR1cm4gbW9kZUxpc3Quam9pbihcIl9cIik7XG59O1xuY29uc3QgZGV0ZXJtaW5lRGVsZXRlUHJpbWFyeUFjdGlvbiA9IChtb2RlKSA9PiB7XG4gICAgbGV0IHByaW1hcnlBY3Rpb24gPSBcIkRFTEVURVwiO1xuICAgIC8vIFRPRE86IFJlY29ubmVjdCBpbiByZWN5Y2xlIGJpbiBsb2dpY1xuICAgIC8vIGlmIChpblJlY3ljbGVCaW4pIHtcbiAgICAvLyAgIHJldHVybiBcIlBFUk1BTkVOVExZX0RFTEVURVwiO1xuICAgIC8vIH1cbiAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSBcIlBST1RFQ1RFRFwiOlxuICAgICAgICAgICAgcHJpbWFyeUFjdGlvbiA9IFwiTk9ORVwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJVTlJFQ1lDTEFCTEVcIjpcbiAgICAgICAgY2FzZSBcIlBST1RFQ1RFRF9VTlJFQ1lDTEFCTEVcIjpcbiAgICAgICAgICAgIHByaW1hcnlBY3Rpb24gPSBcIlBFUk1BTkVOVExZX0RFTEVURVwiO1xuICAgIH1cbiAgICByZXR1cm4gcHJpbWFyeUFjdGlvbjtcbn07XG5jb25zdCBhbGxEZXBlbmRlbnRJdGVtc0luY2x1ZGVkRm9yRGVsZXRlID0gKGl0ZW1zLCBvZmZlbmRpbmdJdGVtcykgPT4ge1xuICAgIHZhciBfYTtcbiAgICAvLyBJZiBhbGwgcmVsYXRlZCBpdGVtcyBhcmUgYWxzbyBzZWxlY3RlZCBmb3IgZGVsZXRlLCB0aGVuIHRoZXkgY2FuIGJlIG1hcmtlZCB1bnByb3RlY3RlZFxuICAgIC8vIEJ1dCBvbmx5IGlmIGFsbCBvZiB0aG9zZSByZWxhdGVkIGl0ZW1zIHRvbyBjYW4gYmUgZGVsZXRlZFxuICAgIGNvbnN0IG9mZmVuZGluZ0l0ZW1JZHMgPSAoX2EgPSBvZmZlbmRpbmdJdGVtcyA9PT0gbnVsbCB8fCBvZmZlbmRpbmdJdGVtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2ZmZW5kaW5nSXRlbXMubWFwKChpdGVtKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IGl0ZW0uaXRlbUlkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBpdGVtLmlkOyB9KSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgY29uc3QgZnVsbE9mZmVuZGluZ0l0ZW1zID0gaXRlbXMuZmlsdGVyKChpdGVtKSA9PiBvZmZlbmRpbmdJdGVtSWRzLmluY2x1ZGVzKGl0ZW0uaWQpKTtcbiAgICBjb25zdCBhcmVBbGxPZmZlbmRpbmdJdGVtc1NlbGVjdGVkID0gb2ZmZW5kaW5nSXRlbUlkcy5ldmVyeSgoaWQpID0+IGl0ZW1zLnNvbWUoKGl0ZW0pID0+IGl0ZW0uaWQgPT09IGlkKSk7XG4gICAgY29uc3QgYXJlQWxsT2ZmZW5kaW5nSXRlbXNEZWxldGFibGUgPSBmdWxsT2ZmZW5kaW5nSXRlbXMuZXZlcnkoKGl0ZW0pID0+ICFpdGVtLnByb3RlY3RlZCk7XG4gICAgcmV0dXJuIGFyZUFsbE9mZmVuZGluZ0l0ZW1zU2VsZWN0ZWQgJiYgYXJlQWxsT2ZmZW5kaW5nSXRlbXNEZWxldGFibGU7XG59O1xuY29uc3QgaXNGZWVkV2l0aFNpbmdsZUhvc3RlZEZlYXR1cmVMYXllciA9IChpdGVtLCByZXN1bHREYXRhKSA9PiB7XG4gICAgY29uc3QgeyB0eXBlS2V5d29yZHMsIHR5cGUgfSA9IGl0ZW07XG4gICAgcmV0dXJuIChpdGVtLnR5cGUgPT09IFwiRmVlZFwiICYmXG4gICAgICAgIGlzSG9zdGVkU2VydmljZSh0eXBlS2V5d29yZHMsIHR5cGUpICYmXG4gICAgICAgIChyZXN1bHREYXRhID09PSBudWxsIHx8IHJlc3VsdERhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3VsdERhdGEubGVuZ3RoKSA9PT0gMSAmJlxuICAgICAgICByZXN1bHREYXRhWzBdLnR5cGUgPT09IFwiRmVhdHVyZSBTZXJ2aWNlXCIgJiZcbiAgICAgICAgcmVzdWx0RGF0YVswXS50eXBlS2V5d29yZHMuaW5jbHVkZXMoXCJIb3N0ZWQgU2VydmljZVwiKSk7XG59O1xuY29uc3QgaXNIb3N0ZWRGZWF0dXJlTGF5ZXJGcm9tRmVlZCA9IChpdGVtLCByZXN1bHREYXRhKSA9PiB7XG4gICAgY29uc3QgeyB0eXBlS2V5d29yZHMsIHR5cGUgfSA9IGl0ZW07XG4gICAgcmV0dXJuIChpdGVtLnR5cGUgPT09IFwiRmVhdHVyZSBTZXJ2aWNlXCIgJiZcbiAgICAgICAgaXNIb3N0ZWRTZXJ2aWNlKHR5cGVLZXl3b3JkcywgdHlwZSkgJiZcbiAgICAgICAgKHJlc3VsdERhdGEgPT09IG51bGwgfHwgcmVzdWx0RGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVzdWx0RGF0YS5sZW5ndGgpID09PSAxICYmXG4gICAgICAgIHJlc3VsdERhdGFbMF0udHlwZSA9PT0gXCJGZWVkXCIgJiZcbiAgICAgICAgcmVzdWx0RGF0YVswXS50eXBlS2V5d29yZHMuaW5jbHVkZXMoXCJIb3N0ZWQgU2VydmljZVwiKSk7XG59O1xuXG5leHBvcnQgeyBEQVlTX0lOX1JFQ1lDTEVfQklOIGFzIEQsIGRlbGV0ZUl0ZW1zIGFzIGEsIGRldGVybWluZURlbGV0ZUl0ZW1zQnVja2V0cyBhcyBiLCBkZXRlcm1pbmVEZWxldGVNb2RlIGFzIGMsIGRlbGV0ZUl0ZW0gYXMgZCwgZGV0ZXJtaW5lRGVsZXRlUHJpbWFyeUFjdGlvbiBhcyBlIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGV0ZS1pdGVtcy0zMmQyNDUzNC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=