"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-94f22c"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.pt-BR-13a658bd.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.pt-BR-13a658bd.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "OK";
const cancel = "Cancelar";
const enterURL = "Inserir URL do Serviço de Imagem";
const serviceURL = "URL de Serviço";
const selectRaster = "Selecionar Raster";
const failedToLoadLayer = "Falha ao carregar Camada";
const loadingLayer = "Carregando camada";
const selectFeature = "Selecionar Camada de Feição";
const enterFURL = "Inserir URL de Serviço da Feição";
const addRaster = "Adiciona Variável de Raster";
const addScalar = "Adicionar Constante";
const raster = "Raster";
const scalar = "Escalar";
const defaultModelName = "Modelo de Função do Raster";
const general = "Geral";
const parameters = "Parâmetros";
const variables = "Variáveis";
const name = "Nome";
const description = "Descrição";
const parameter = "Parâmetro";
const isPublic = "É Público";
const isDataset = "IsDataset";
const unknownPixelType = "Desconhecido";
const outputPixelType = "Tipo de Pixel de Saída";
const u8PixelType = "8 Bit Indefinido";
const s8PixelType = "8 Bit Definido";
const u16PixelType = "16 Bit Indefinido";
const s16PixelType = "16 Bit Definido";
const u32PixelType = "32 Bit Não Atribuído";
const s32PixelType = "32 Bit Atribuído";
const f32PixelType = "32 Bit Flutuante";
const f64PixelType = "64 Bit Duplo";
const properties = "Propriedades";
const multidimensionalRules = "Regras Multidimensionais";
const matchVariables = "Variável Correspondentes";
const unionDimensions = "Unir Dimensões";
const rasterFunctionEditor = {
	invalidRFTMessage: "O Modelo de Função do Raster não é válido.",
	rfxArgsEditor: {
		outputRaster: "OutputRaster",
		raster: "Raster",
		unsupportedDataTypeWarning: "Os seguintes parâmetros não são exibidos, pois atualmente não são suportados.",
		unsupportedFunction: "Contém funções raster atualmente não suportadas."
	},
	rfxRasterInput: {
		selectLayer: "Selecionar Camada",
		browseLayers: "Procurar Camadas",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Método",
		bandLabel: "Banda",
		combinationLabel: "Combinação"
	},
	rfxRemapGrid: {
		minimum: "Mínimo",
		maximum: "Máximo",
		output: "Saída",
		noData: "NoData",
		remapValuesLabel: "Remapear Valores"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Variáveis do Raster",
		deleteSelectedVars: "Remover variáveis selecionadas"
	},
	rfxClippingGeometry: {
		clippingLayer: "Recortando Camada",
		clippingRaster: "Recortando Raster",
		clippingGeometry: "Recortando Geometria",
		customExtent: "Personalizar extensão",
		outputExtent: "Extensão de Saída",
		currentExtent: "Extensão do Mapa Atual",
		drawLabel: "Desenhar"
	},
	rfxCustomExtent: {
		top: "Superior",
		right: "Direita",
		bottom: "Inferior",
		left: "Esquerda"
	},
	rfxRasterArrayEditor: {
		moveUp: "Mover para Cima",
		moveDown: "Mover para Baixo",
		remove: "Remover"
	},
	rfxStatisticsGrid: {
		stdDev: "Desvio Padrão",
		min: "Mín",
		max: "Máx",
		mean: "Média"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Tabela de Soma Ponderada",
		id: "ID",
		layer: "Camada",
		field: "Campo",
		weight: "Peso",
		value: "Valor",
		selectLayer: "Selecionar Camada"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Tabela de Sobreposição Ponderada",
		id: "ID",
		layer: "Camada",
		field: "Campo",
		influence: "Influência",
		sumOfInfluence: "Soma de Influência",
		value: "Valor",
		remapTable: "Tabela de Remapeamento",
		scale: "Escala",
		scales: "Escalas",
		selectRaster: "Selecionar Raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Procurar por uma camada de feição",
		addPointLayer: "Procurar por uma camada de ponto"
	},
	rfxFieldSelect: {
		value: "Valor",
		count: "Contagem"
	},
	rfxAttributeTable: {
		tableType: "Tipo de Tabela",
		manual: "Manual",
		external: "Externo",
		minVal: "Valor Mínimo",
		maxVal: "Valor Máximo",
		baseClassName: "Nome de Base de Classe",
		colorScheme: "Esquema de Cores",
		defaultClassName: "Label_",
		generateTable: "Gerar Tabela",
		browseTable: "Procurar Tabela",
		value: "Valor",
		classname: "ClassName",
		color: "Cor"
	},
	rfxFieldNumberSwitchable: {
		number: "Numérico",
		field: "Campo",
		string: "Texto",
		linearUnit: "Unidade Linear"
	},
	rfxPropertySet: {
		name: "Nome",
		value: "Valor"
	},
	rfxConversionGrid: {
		size: "Tamanho"
	},
	rfxTransposeBit: {
		bitPattern: "Padrão Bit",
		outputBit: "Bit de Saída",
		inputBit: "Bit de Entrada"
	},
	rfxSpatialReference: {
		placeHolder: "Refinar por Palavra-Chave",
		coordinateSystem: "Sistema de Coordenadas",
		gcs: "Sistema de Coordenadas Geográficas",
		pcs: "Sistema de Coordenadas Planas",
		vcs: "Sistema de Coordenadas Verticais"
	}
};
const rfxLicenseInfo = "Este modelo de função raster pode ser utilizado para processar sua imagem utilizando o ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Calcule o co-seno hiperbólico inverso de células em um raster.",
		aCosHDesc: "A função calcula o co-seno hiperbólico inverso dos pixels em um raster.",
		aCosName: "ACos",
		aCosSnip: "Calcula o co-seno inverso dos pixels em um raster.",
		aCosDesc: "Esta função de raster calcula o co-seno inverso das células em um raster. Em matemática, todas as funções trigonométricas têm uma faixa definida de valores de entrada válidos, chamada de domínio. Os valores de saída de cada função também têm uma faixa definida. Para esta ferramenta, o domínio é [-1, 1], e o intervalo é [0, pi].",
		aSinHName: "ASenH",
		aSinHSnip: "Calcula o seno hiperbólico inverso de células em um raster.",
		aSinHDesc: "A função calcula o seno hiperbólico inverso dos pixels em um raster.",
		aSinName: "ASen",
		aSinSnip: "Calcula o seno inverso de células em um raster.",
		aSinDesc: "A função calcula o seno inverso dos pixels em um raster.",
		aTan2Name: "ATan2",
		aTan2Snip: "Calcula a tangente inversa (baseado em x,y) de células em um raster.",
		aTan2Desc: "A função calcula a tangente inversa (baseado em x,y) dos pixels em um raster.",
		aTanHName: "ATanH",
		aTanHSnip: "Calcula a tangente hiperbólica inversa de células em um raster.",
		aTanHDesc: "A função calcula a tangente hiperbólica inversa dos pixels em um raster.",
		aTanName: "ATan",
		aTanSnip: "Calcula a tangente inversa de células em um raster.",
		aTanDesc: "A função calcula a tangente inversa dos pixels em um raster.",
		absName: "Abs",
		absSnip: "Calcule o valor absoluto das células em um raster.",
		absDesc: "A função Abs calcula o valor absoluto dos pixels em um raster.",
		reflectanceName: "Reflectância Aparente",
		reflectanceSnip: "Converte imagem bruta em valores do Topo da Atmosfera levando em conta as características do sensor, a posição do sol e o tempo de aquisição.",
		reflectanceDesc: "Esta função de raster que ajusta os valores do número digital de brilho da imagem (DN) para alguns sensores de satélite. Os ajustes são baseados na elevação do Sol, na data de aquisição e nas propriedades do sensor para definir o ganho e a polarização para cada banda. Esta função é utilizada para ajustar os valores de reflectância ou brilho de algumas imagens de satélite com base na iluminação da cena e nas configurações de ganho do sensor. As imagens são ajustadas para uma condição de iluminação teoricamente comum, portanto, deve haver menor variação entre cenas de diferentes datas e diferentes sensores. Isto pode ser útil para classificação de imagem, balanceamento de cores e mosaico. Esta função pode ser utilizada somente com imagens específicas. Os sensores aplicáveis são Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 e Pleiades.<div><br/>A função executa duas correções. O primeiro é baseado nas configurações de ganho. Os valores de brilho originais são recriados a partir dos valores da imagem ao reverter as equações de ganho. A segunda correção tem a ver com as diferenças de ângulo e brilho do Sol. Os valores de brilho originais são ajustados para uma condição de iluminação comum normalizando cenas capturadas em condições de iluminação variável. Em geral, enquanto o tipo de dados da imagem de saída for o mesmo que o tipo de dados da imagem de entrada, os valores de saída serão inferiores aos valores de entrada e serão cortados no intervalo de dados válido.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Calcula a estatística de cenário incluindo Arg Máx, Arg Mín, Arg Média e Duração.",
		argStatisticsDesc: "A função computa estatística de argumento. Há quatro métodos na função ArgStatistics: ArgMax, ArgMin, ArgMedian e Duration.",
		arithmeticName: "Aritmético",
		arithmeticSnip: "Executa uma operação aritmética entre dois rasters ou um raster e um escalar.",
		arithmeticDesc: "A função Aritmética executa uma operação aritmética entre dois rasters ou um raster e um escalar, e vice versa.",
		aspectSlopeName: "Aspecto-Declividade",
		aspectSlopeSnip: "Cria um raster que exibe simultaneamente o aspecto (direção) e a declividade (inclinação) de uma superfície contínua, conforme representado em um modelo de elevação digital.",
		aspectSlopeDesc: "A função Aspecto de Declividade cria uma camada raster que exibe simultaneamente o aspecto e declive de uma superfície. O aspecto identifica a direção de declividade da taxa máxima de alteração no valor de cada pixel para seus vizinhos. O aspecto pode ser visto como a direção de declividade. Os valores do raster de saída serão a direção de bússola do aspecto, representados por uma tonalidade (cor). A declividade representa a taxa de alteração de elevação de cada pixel do modelo de elevação digital (DEM). A declividade representa a parte íngreme da superfície e é simbolizada em três classes que são mostradas utilizando saturação de cor (brilho).<div><br/>Os valores de pixel no raster de declividade-aspecto de saída refletem uma combinação de aspecto e declividade. Pixels com valores abaixo de 20 são considerados planos e são mostrados em cinzas. Os valores de declividade-aspecto de 21 e acima de serão exibidos com saturações variadas como seguem: 21 a 30 —Saturação de declividade baixa, 31 para 40—Saturação de declividade moderada, 41 e acima—Saturação de declividade alta</div>",
		aspectName: "Aspecto",
		aspectSnip: "Mostra qual é a direção de um pixel, onde 0 é devido ao norte e ao ângulo aumentando no sentido horário para 360.",
		aspectDesc: "A função Aspecto identifica a direção de declividade da taxa máxima de alteração no valor de cada célula para seus vizinhos. O aspecto pode ser visto como a direção de declividade. Os valores do raster de saída serão a direção de bússola do aspecto.<div><br/>A entrada desta função é Raster de Entrada. A função Aspecto é normalmente aplicada a um modelo digital de elevação (DEM). Por padrão, o aspecto aparece como uma imagem em escala de cinza. Você pode adicionar a função Mapa de Cores para especificar um esquema de cores em particular ou permitir que a pessoa que visualiza o mosaico modifique a simbologia com seu próprio esquema de cores.</div>",
		tableName: "Tabela de Atributos",
		tableSnip: "Utilize uma tabela para nomear e simbolizar os valores em um conjunto de dados. As colunas da tabela são delimitadas por vírgula: PixelValue, AttributeName, RedValue, GreenValue, BlueValu.",
		tableDesc: "A função Tabela de Atributo permite a você definir uma tabela de atributos para simbolizar um conjunto de dados de mosaico de única banda ou conjunto de dados raster. <div><br/>Isto é útil quando desejar apresentar a imagem que sofreu uma classificação para uso do solo, tais como, terra de floresta, zonas úmidas, área de colheita e urbana. Adicionalmente, se sua tabela contiver campos nomeados vermelho, verde e azul, os valores dentro destes campos serão utilizados como um mapa de cores ao renderizar a imagem.</div>",
		bandArithmeticName: "Aritmética de Bandas",
		bandArithmeticSnip: "Calcula índices utilizando fórmulas pré definidas ou uma expressão definida pelo usuário.",
		bandArithmeticDesc: "A função Aritmética da Banda executa uma operação aritmética nas bandas de um conjunto de dados raster. Você pode escolher algoritmos pré-definidos ou inserir sua própria fórmula de linha única. Os operadores suportados são -,+,/,*, e unário -.",
		thresholdName: "Limite Binário",
		thresholdSnip: "Organiza dados contínuos no primeiro plano e segundo plano minimizando a covariância entre as duas classes.",
		thresholdDesc: "Quando um conjunto de dados raster tiver uma distribuição bimodal, esta função cria um novo raster que divide os dados em duas classes distintas. Ele cria uma classe de valor baixo exibido com pixels pretos e uma classe de valor alto exibida com pixels brancos.",
		bitwiseAndName: "E Bitwise",
		bitwiseAndSnip: "Executa a operação Bitwise E em valores binários de dois rasters de entrada.",
		bitwiseAndDesc: "Bitwise E executa uma operação Bitwise E em valores binários de dois rasters de entrada.",
		bitwiseLeftShiftName: "Mudança à Esquerda de Bitwise",
		bitwiseLeftShiftSnip: "Executa a operação Mudança à Esquerda de Bitwise em valores binários de dois rasters de entrada.",
		bitwiseLeftShiftDesc: "A ferramenta Mudança à Esquerda de Bitwise executa uma operação Mudança à Esquerda de Bitwise nos valores binários de dois dados rasters de entrada.",
		bitwiseNotName: "Não Bitwise",
		bitwiseNotSnip: "Executa uma operação Bitwise Não (complemento) nos valores binários de dois rasters de entrada.",
		bitwiseNotDesc: "A função executa uma operação Bitwise Não (complemento) no valor binário de um raster de entrada.",
		bitwiseOrName: "Ou Bitwise",
		bitwiseOrSnip: "Executa uma operação Bitwise Ou em valores binários de dois rasters de entrada.",
		bitwiseOrDesc: "A função executa uma operação Bitwise Ou em valores binários de dois rasters de entrada. ",
		bitwiseRightShiftName: "Deslocar à Direita do Bitwise",
		bitwiseRightShiftSnip: "Executa a operação Deslocar à Direita do Bitwise em valores binários de dois rasters de entrada.",
		bitwiseRightShiftDesc: "A função executa uma operação Deslocar à Direita do Bitwise em valores binários de dois rasters de entrada.",
		bitwiseXorName: "XOu Bitwise",
		bitwiseXorSnip: "Executa a operação Ou Bitwise eXclusivo em valores binários de dois rasters de entrada.",
		bitwiseXorDesc: "A função executa uma operação Bitwise eXclusivo em valores binários de dois rasters de entrada.",
		booleanAndName: "E Booleano",
		booleanAndSnip: "Executa a operação E Booleano em valores da célula de dois rasters de entrada. Se ambos os valores de entrada forem verdadeiros (não zero), o valor de saída será 1. Se uma ou ambas entradas forem falsas (zero), o valor de saída será 0.",
		booleanAndDesc: "A função executa uma operação Booleano E em valores de pixel de dois rasters de entrada. Se ambos os valores de entrada forem verdadeiros (não zero), o valor de saída será 1. Se um ou ambos os valores de entrada forem falsos (zero), o valor de saída será 0. ",
		booleanNotName: "Não Booleano",
		booleanNotSnip: "Executa uma operação Não Booleano (complemento) nos valores de células do raster de entrada. Se os valores de entrada forem verdadeiros (não zero), o valor de saída será 0. Se os valores de entrada forem falsos (zero), o valor de saída será 1.",
		booleanNotDesc: "A função executa uma operação Não Booleano (complemento) nos valores de pixel do raster de entrada. Se os valores de entrada forem verdadeiros (não zero), o valor de saída será 0. Se os valores de entrada forem falsos (zero), o valor de saída será 1.",
		booleanOrName: "Ou Booleano",
		booleanOrSnip: "Executa a operação Ou Booleano em valores da célula de dois rasters de entrada. Se um ou ambos valores de entrada forem verdadeiros (não zero), o valor de saída será 1. Se ambos os valores de entrada forem falsos (zero), a saída será 0.",
		booleanOrDesc: "A função executa uma operação Bitwise Ou em valores de células de dois rasters de entrada. Se um ou ambos os valores de entrada forem verdadeiros (não zero), o valor de saída será 1. Se ambos os valores de entrada forem falsos (zero), o valor de saída será 0.",
		booleanXorName: "XOu Boolean",
		booleanXorSnip: "Executa a operação Booleano eXclusive Ou em valores da célula de dois rasters de entrada. Se um valor de entrada for verdadeiro (não zero) e o outro valor for falso (zero), o valor de saída será 1. Se ambos os valores de entrada forem verdadeiros ou ambos forem falsos, o valor de saída será 0.",
		booleanXorDesc: "A função executa uma operação Booleano eXclusivo Ou nos valores de células de dois rasters de entrada. Se um valor de entrada for verdadeiro (não zero) e o outro valor for falso (zero), o valor de saída será 1. Se ambos os valores de entrada forem verdadeiros ou ambos forem falsos, o valor de saída será 0.",
		bufferedRasterName: "Buffer",
		bufferedRasterSnip: "Gera o buffer do último bloco de pixel acessado.",
		bufferedRasterDesc: "A função Com Buffer é utilizada para otimizar o desempenho de cadeias de funções complexas. Ela armazena a saída na memória de parte da cadeia de função que vem antes dela. <div><br/>Insira esta função no Editor de Função onde deseja armazenar a saída.</div>",
		rasterCalculatorName: "Calculadora",
		rasterCalculatorSnip: "Computa um raster a partir de um raster baseado em uma expressão matemática.",
		rasterCalculatorDesc: "A função Calculadora permite a você criar e executar expressões, e incorporar estas em cadeias de função.",
		cellStatisticsName: "Estatísticas da Célula",
		cellStatisticsSnip: "Calcula uma estatística por célula de vários rasters. As estatísticas disponíveis são Maioria, Máximo, Média, Mediana, Mínimo, Minoria, Percentil, Intervalo, Desvio Padrão, Soma e Variedade.",
		cellStatisticsDesc: "Esta é uma função que calcula estatísticas de múltiplos rasters, em uma base de pixel por pixel. As estatísticas disponíveis são maioria, máximo, média, mediana, mínimo, minoria, intervalo, desvio padrão, soma e variedade.",
		classifyName: "Classificar",
		classifySnip: "Atribui cada pixel a uma classe. Incorpora dados subordinados, tal como, uma imagem segmentada.",
		classifyDesc: "Esta função de raster classifica um conjunto de dados raster baseado em um arquivo de Definição do Classificador da Esri (.ecd) e entradas do conjunto de dados raster. O arquivo .ecd utilizado na função Classificar contém todas as informações para um conjunto de dados específico e classificador, e é gerado pelas ferramentas de treinamento de classificação, tal como, as ferramentas Treinar Máquina Vetorial de Suporte ou Treinar Árvores Aleatórias .",
		clipName: "Recortar",
		clipSnip: "Configura a extensão de um raster utilizando coordenadas ou outro conjunto de dados.",
		clipDesc: "Esta função recorta um raster utilizando uma forma retangular de acordo com as extensões definidas ou recortará um raster para a forma de uma classe de feição de polígono de entrada. A forma que define o recorte pode recortar a extensão do raster ou recortar uma área dentro do raster.",
		colorspaceConversionName: "Conversão do Modelo de Cores",
		colorspaceConversionSnip: "Converte um raster de RGB para HSV e vice versa.",
		colorspaceConversionDesc: "A função Conversão do Modelo de Cores converte o modelo de cores de uma imagem a partir da tonalidade, saturação e valor (HSV) de cor de espaço para vermelho, verde e azul (RGB) ou vice-versa.<div><br/>Esta função pode ser utilizada em um conjunto de dados de mosaico.</div>",
		colormapToRGBName: "Mapa de Cores para RGB",
		colormapToRGBSnip: "Converte um raster de banda única com um mapa de cores, para um raster de três bandas (vermelho, verde e azul).",
		colormapToRGBDesc: "Esta função converte um raster de banda única com um mapa de cores, para um raster de três bandas (vermelho, verde e azul).<div><br/>Esta função é útil quando você precisar criar um raster de três bandas de um raster de banda única com um mapa de cores associado. Os valores no mapa de cores serão utilizados para criar cada banda vermelha, verde e azul. Esta função pode ser utilizada em um conjunto de dados de mosaico.</div>",
		colormapName: "Mapa de Cores",
		colormapSnip: "Altera os valores de pixel para exibir os dados do raster como uma imagem em vermelho, azul, verde (RGB) ou escala de cinza, baseado em um mapa de cores ou uma rampa de cores.",
		colormapDesc: "A função Mapa de cores é um tipo de renderizador de dados raster. Ela transforma os valores de pixel para exibir os dados raster como uma imagem de escala em cinza ou RGB com base em um esquema de cor ou cores específicas em um arquivo de mapa de cores. Você pode utilizar um mapa de cores para representar dados analisados, como uma imagem classificada ou ao exibir um mapa topográfico (ou um índice de imagem escaneada de cor).<div><br/>Os mapas de cores contém um conjunto de valores que são associados com cores utilizadas para exibir um raster de banda única constantemente com as mesmas cores. Cada valor de pixel é associado com uma cor, definido como um conjunto de valores RGB. Os mapas de cores são capazes de suportar qualquer profundidade de bit exceto o ponto flutuante. Eles também suportam valores positivos e negativos e podem conter valores mapeados de cores ausentes. Ao exibir um conjunto de dados com um mapa de cores contendo valores ausentes, os pixels com estes valores ausentes não serão exibidos.</div>",
		complexName: "Complexo",
		complexSnip: "Extrai a magnitude de números complexos.",
		complexDesc: "Esta função computa a magnitude de valores complexos.<div><br/>Esta função é normalmente utilizada com imagens RADAR que tem um tipo de dados complexos. Ela pode ser utilizada em um conjunto de dados de mosaico.</div>",
		compositeBandName: "Bandas Compostas",
		compositeBandSnip: "Combina múltiplos conjunto de dados em um raster de múltiplas bandas.",
		compositeBandDesc: "A função Bandas Compostas permite a você combinar várias imagens para formar uma imagem de múltiplas bandas.",
		conName: "Con",
		conSnip: "Executa uma operação condicional Se, Então, Outro. Quando um operador Con é utilizado, normalmente são necessárias duas ou mais funções locais encadeadas, onde uma função declara os critérios e a segunda função é o operador Con que utiliza os critérios e dita quais devem ser as saídas verdadeiras e falsas.",
		conDesc: "A função Con configura os pixels do raster de saída baseado em uma avaliação se\\outro de cada pixel de entrada. Ela retorna valores de pixel do Raster Verdadeiro se a avaliação condicional for verdadeira (1) ou retorna os valores de pixel a partir do Raster Falso se a avaliação condicional for falsa (0). Estes critérios são especificados pela saída de uma função matemática lógica, que será o Raster de entrada.",
		constantName: "Constante",
		constantSnip: "Cria um raster virtual com um único valor de pixel.",
		constantDesc: "Esta função cria um raster virtual com um valor de pixel único que pode ser utilizado em modelos de função de raster e para processar um conjunto de dados do mosaico.<div><br/>O valor da constante é utilizado para cada valor de pixel no raster.</div>",
		contourName: "Curva de Nível",
		contourSnip: "Cria linhas da curva de nível.",
		contourDesc: "A função Curva de Nível gera linhas de contorno juntando pontos com a mesma elevação a partir de um conjunto de dados raster de elevação. As curvas de nível são isolinhas criadas como rasters para visualização. Os recursos chaves seguintes tornam esta função poderosa: as curvas de nível são geradas de forma rápida e dinâmica em conjunto de dados grandes, como Elevação Mundial; as curvas de nível pode ser suavizadas para fornecer uma aparência cartográfica mais agradável enquanto mantém a exatidão das curvas de nível; controle dinâmico sobre o intervalo das curvas de nível é fornecido; as opções de saída incluem linhas de curvas de nível, curvas de nível de índice e curvas de nível preenchidas.<div><br/>A criação de uma camada de curva de nível como um produto raster é valiosa para uma ampla gama de aplicações, já que as curvas de nível podem ser sobrepostas em um mapa e fornecer informações sobre o terreno sem obscurecer os dados subjacentes. Elas são úteis em aplicações como engenharia, agricultura e gerenciamento de água.</div>",
		contrastBrightnessName: "Contraste e Brilho",
		contrastBrightnessSnip: "Ajusta o contraste e brilho de um raster.",
		contrastBrightnessDesc: "A função Contraste E Brilho melhora a aparência de dados raster modificando o brilho ou contraste dentro da imagem. O brilho aumenta a claridade global da imagem—por exemplo, tornando cores escuras mais claras e cores claras mais branca—enquanto o contraste ajusta a diferença entre as cores mais escuras e mais claras.<div><br/>A utilização desta função altera os valores de pixel; portanto, esta função deve ser utilizada quando desejar realçar a aparência dos dados e não se você pretender utilizar os dados como parte de uma análise que exigiria os valores de pixels brutos. Esta função é útil ao publicar os dados como um serviço de imagem que pode ser utilizado em aplicativos sem a habilidade de alterar o contraste e brilho da imagem ou assegurar que ela seja exibida utilizando suas configurações preferidas.</div>",
		convolutionName: "Convolução",
		convolutionSnip: "Aplica um filtro para nitidez, sombreado, detectar bordas, suavização ou um efeito gradiente através de um raster.",
		convolutionDesc: "A função Convolução executa um filtro nos valores de pixel em uma imagem, que pode ser utilizado para clarear uma imagem, escurecer uma imagem, detectar bordas dentro de uma imagem ou outras otimizações baseadas em kernel. Os filtros são utilizados para melhorar a qualidade da imagem raster eliminando dados espúrios ou melhorando feições nos dados. Estes filtros de convolução são aplicados um kernel de mudança, sobreposição (janela ou vizinhança), como 3 por 3. Os filtros de convolução funcionam com o cálculo do valor de pixel baseado nos pesos de seus vizinhos.",
		corridorName: "Corredor",
		corridorSnip: "Calcula a soma de custos acumulativos para dois rasters acumulativos de entrada.",
		corridorDesc: "A função de Corredor calcula a soma de custos acumulativos para dois rasters de custo acumulativo de entrada. Enquanto dois rasters podem ser utilizados para a entrada, para obter um resultado significante eles devem ser rasters de saída de custo acumulativo inalterado. A ordem das duas entradas é irrelevante.",
		cosHName: "CosH",
		cosHSnip: "Calcula o co-seno hiperbólico de células em um raster.",
		cosHDesc: "A função calcula o co-seno hiperbólico dos pixels em um raster.",
		cosName: "Cos",
		cosSnip: "Calcula o co-seno de uma célula em um raster.",
		cosDesc: "A função calcula o co-seno dos pixels em um raster.",
		costAllocationName: "Alocação de Custo",
		costAllocationSnip: "Calcula, para cada célula, sua origem de menor custo baseada no menor custo acumulativo sobre uma superfície de custo.",
		costAllocationDesc: "A função Alocação de Custo calcula para cada célula sua fonte de menor custo baseada no menor custo acumulativo sobre uma superfície de custo.",
		costBackLinkName: "Vínculo Anterior de Custo",
		costBackLinkSnip: "Define o vizinho que será a próxima célula no menor caminho de custo acumulativo até a fonte de menor custo.",
		costBackLinkDesc: "A função Vínculo Anterior de Custo define o vizinho que está próximo da célula no caminho de menor custo acumulativo até a fonte de menor custo.<div><br/>O backlink do raster contém valores de zero a oito, que define a direção ou identifica a próxima célula vizinha (célula bem sucedida) ao longo do caminho de custo menos acumulativo de uma célula para alcançar sua origem de menor custo. Se o caminho for passar no vizinho direito, a célula será atribuída ao valor 1, 2 para célula diagonal direita inferior e continuando à direita. O valor 0 é reservado para células de origem.</div>",
		costDistanceName: "Distância de Custo",
		costDistanceSnip: "Calcula a distância de menor custo acumulativo para cada célula de ou para a origem de menor custo sobre uma superfície de custo.",
		costDistanceDesc: "A função Distância de Custo calcula a distância de menor custo acumulativo para cada célula de ou até a fonte de menor custo sobre uma superfície de custo.",
		costPathName: "Caminho de Custo",
		costPathSnip: "Calcula o caminho de menor custo da origem até o destino.",
		costPathDesc: "A função Caminho de Custo global calcula o caminho de menor custo a partir de uma origem até um destino.<div><br/>Esta função produz um raster de saída que registra o caminho menor custo ou caminhos de localizações selecionadas para a célula de origem mais próxima definida dentro da superfície de custo acumulativo, em termos de distância de custo.</div>",
		curvatureName: "Curvatura",
		curvatureSnip: "Calcula a curvatura de uma superfície de raster, opcionalmente inclui perfil e curvatura plana.",
		curvatureDesc: "A função Curvatura exibe a forma ou curvatura de declividade. Uma parte da superfície pode ser côncava ou convexa; você pode dizer isto olhando o valor da curvatura. A curvatura é definida calculando a segunda derivada da superfície.<div><br/>A saída da função Curvatura pode ser utilizada para descrever as características físicas de uma bacia de drenagem em um esforço para entender os processos de erosão e escoamento. O valor da curvatura pode ser utilizado para encontrar padrões de erosão do solo, como também, a distribuição de água na terra. A curvatura do perfil afeta a aceleração e desaceleração do fluxo e, portanto, influencia a erosão e a deposição. A curvatura da forma plana influencia a convergência e divergência do fluxo.</div>",
		divideName: "Dividir",
		divideSnip: "Divide os valores de dois rasters em uma base de célula por célula.",
		divideDesc: "A função Dividir divide os valores de dois rasters em uma base de pixel a pixel.",
		elevationVoidFillName: "Preenchimento de Elevação Nula",
		elevationVoidFillSnip: "Cria pixels onde tiver vazios em seus dados de elevação.",
		elevationVoidFillDesc: "A função Preenchimento de Elevação Nula é utilizada para criar pixels onde tiver vazios em sua elevação.<div><br/>Os vazios ocorrem quando não há pontos coletados dentro da área representada por um pixel no raster resultante. Os vazios são frequentemente causados por corpos d'água, seleção do tipo de classe ou exclusão. O preenchimento do vazio é mais comumente utilizado ao gerar uma superfície.</div>",
		equalToName: "Igual A",
		equalToSnip: "Executa uma operação não-igual-a Relacional em duas entradas em uma base célula a célula. Retorna 1 para células onde o primeiro raster é igual ao segundo dado raster e 0 para células onde não é.",
		equalToDesc: "A função executa uma operação igual-a em dois raster em uma base pixel a pixel. Retorna um valor de 1 de pixels onde o primeiro raster é igual ao segundo raster e um valor de 0 para pixels onde eles não são iguais.",
		eucAllocationName: "Alocação Euclidiana",
		eucAllocationSnip: "Calcula a origem mais próxima para cada célula baseada na distância Euclidiana.",
		eucAllocationDesc: "A função Alocação Euclidiana calcula, para cada célula, a origem mais próxima com base na distância Euclidiana.",
		eucDirectionName: "Direção Euclidiana",
		eucDirectionSnip: "Calcula, para cada célula, a direção, em graus, da origem mais próxima.",
		eucDirectionDesc: "A função Direção Euclidiana calcula, para cada célula, a direção em graus até a origem mais próxima. <div><br/>A direção é calculada a partir de cada centro da célula para o centro da célula de origem que está mais próximo dela. A faixa de valores é de 0 graus a 360 graus, com 0 reservado para as células de origem. Devido ao leste (direita) é 90 e os valores aumentam à direita (180 é sul, 270 é oeste e 360 é norte).</div>",
		eucDistanceName: "Distância Euclidiana",
		eucDistanceSnip: "Calcula, para cada célula, a distância Euclidiana para a origem mais próxima.",
		eucDistanceDesc: "A função Distância Euclidiana calcula, para cada célula, a distância Euclidiana até a origem mais próxima.",
		exp10Name: "Exp10",
		exp10Snip: "Calcula a base de exponencial 10 das células em um raster.",
		exp10Desc: "A função Exp 10 calcula a base 10 exponencial dos pixels em um raster.",
		exp2Name: "Exp2",
		exp2Snip: "Calcula a base de exponencial 2 das células em um raster.",
		exp2Desc: "A função calcula a base 2 exponencial dos pixels em um raster.",
		expName: "Exp",
		expSnip: "Calcule a base e exponencial das células em um raster.",
		expDesc: "Esta função calcula a base e exponencial dos pixels em um raster.",
		extractBandName: "Extrair Faixas",
		extractBandSnip: "Especifica com quais bandas trabalhar ao utilizar conjuntos de dados de múltiplas bandas.",
		extractBandDesc: " A função extrair Bandas permite a você extrair uma ou mais bandas de um raster ou pode reordenar as bandas em um conjunto de dados raster de múltiplas bandas.<div><br/>Você pode utilizar a função Extrair Bandas antes de outras funções, como Aritmética, para controlar quais bandas são utilizadas como entrada na próxima função.</div>",
		fillName: "Preenchimento",
		fillSnip: "Preenche as depressões na superfície do raster para remover pequenas imperfeições nos dados.",
		fillDesc: "A função Preencher global localiza e preenche depressões e cumes em um raster de superfície de elevação para remover imperfeições pequenas nos dados. A função preencherá um processo iterativo até que todas as depressões sejam preenchidas dentro do Limite Z especificado.<div><br/>Quando uma superfície de elevação for criada com ferramentas de Mapeamento de Ortofotos ou por outros meios, há frequentemente pequenos erros significantes no formulário de depressões e cumes nos dados. Em fotogrametria, depressões e cumes são frequentemente chamado de buracos e picos. devido ao fato dos dados de superfície serem frequentemente utilizados em modelagem, como modelagem hidrológica, é importante corrigir estes erros de depressões e cumes até certo ponto consistente com os dados circundantes.</div>",
		floatName: "Real",
		floatSnip: "Converte cada valor de célula de um raster em uma representação de ponto flutuante.",
		floatDesc: "A função Flutuante converte cada valor de pixel de um raster em uma representação de ponto flutuante.",
		flowAccumulationName: "Acumulação de Fluxo",
		flowAccumulationSnip: "Cria um raster de fluxo acumulado em cada célula. Um fator de peso pode opcionalmente ser aplicado.",
		flowAccumulationDesc: "A função Acumulação de Fluxo global cria um raster de fluxo acumulado em cada pixel, como determinado pelo acúmulo do peso de todos os pixels que fluem em cada pixel de declividade. Se nenhum peso de raster for fornecido, um peso de 1 é aplicado a cada pixel e o valor dos pixels no raster de saída for o número de pixels que fluem em cada pixel.<div><br/>Os pixels de saída com uma acumulação de fluxo alta são áreas de fluxos concentrados e podem ser utilizados para identificar canais de rios. Os pixels de saída com uma acumulação de fluxo de zero são locais topográficos altos e podem ser utilizados para identificar cumes.</div>",
		flowDirectionName: "Direção do Fluxo",
		flowDirectionSnip: "Cria um raster da direção de fluxo de cada célula até o vizinho de maior declividade.",
		flowDirectionDesc: "Uma das chaves para derivar características hidrológicas de uma superfície é a habilidade de determinar a direção de fluxo de cada pixel no raster. A função de raster Direção de Fluxo utiliza uma superfície como entrada e cria um raster de direção de fluxo a partir de cada pixel para seu vizinho de declividade mais íngreme. A função Direção de Fluxo suporta três métodos de modelagem de fluxo: o D8 (oito direções), Direção de Fluxo Múltiplo (MFD), e D-Infinity (DINF). ",
		flowDistanceName: "Distância do Fluxo",
		flowDistanceSnip: "Calcula, para cada célula, a distância vertical ou horizontal mínima de declividade para células em um fluxo ou rio no qual fluem.",
		flowDistanceDesc: "Para cada pixel, a função irá calcular a distância mínima vertical ou horizontal de declividade para pixels em um fluxo ou rio em eles fluem. Se um raster de direção de fluxo opcional for fornecido, a direção de declividade será limitada para os definidos pelo raster de direção de fluxo de entrada. A saída é um raster de distância de fluxo.",
		focalName: "Estatística Focal",
		focalSnip: "Calcula a estatística focal para cada pixel de uma imagem baseado em uma vizinhança focal definida.",
		focalDesc: "A função Estatísticas Focal calcula a estatística focal de cada pixel a partir de uma imagem baseado em uma vizinhança focal definida.",
		geometricName: "Geométrico",
		geometricSnip: "Aumenta a precisão posicional de um conjunto de dados ao representar a elevação.",
		geometricDesc: "A função Geométrica produz uma imagem ortorretificada baseado em uma definição de sensor e um modelo de terreno. Aumenta a precisão posicional de um conjunto de dados ao representar a elevação.",
		grayscaleName: "Escala de cinza",
		grayscaleSnip: "Converte uma imagem de banda múltipla em uma imagem de escala de cinza de única banda.",
		grayscaleDesc: "Esta função converte uma imagem de múltiplas bandas em uma imagem de escala de cinza de única banda.<div><br/>Esta função se aplica em pesos especificados para cada banda de entrada e normaliza a imagem de saída. Os pesos estão frequentemente aplicados devido algumas bandas terem importância de variável dependendo do aplicativo. Por exemplo, a banda azul frequentemente contém mais ruído que outras bandas.</div>",
		greaterThanEqualName: "Maior que Igual",
		greaterThanEqualSnip: "Executa uma operação maior-que-igual-a Relacional em duas entradas em uma base célula a célula. Retorna 1 para células onde um raster é maior que ou igual ao segundo raster e 0 se não for maior.",
		greaterThanEqualDesc: "A função executa uma operação maior-que-ou-igual-a Relacional em duas entradas em uma base pixel a pixel. Retorna um valor de 1 para pixels onde o primeiro raster é maior que o segundo raster e um valor de 0 para pixels onde o primeiro raster não é maior ou igual ao segundo raster.",
		greaterThanName: "Maior Que",
		greaterThanSnip: "Executa uma operação maior-que Relacional em duas entradas em uma base célula a célula. Retorna 1 para células em que o primeiro dado raster é maior que o segundo e 0 para células em não é.",
		greaterThanDesc: "A função executa uma operação maior-que Relacional em duas entradas em uma base pixel a pixel. Retorna um valor de 1 para pixels onde o primeiro raster é maior que o segundo raster e um valor de 0 para pixels onde o primeiro raster não é maior que o segundo raster.",
		heatIndexName: "Índice de Aquecimento",
		heatIndexSnip: "Combina temperatura do ambiente e umidade relativa à umidade para retornar uma temperatura aparente.",
		heatIndexDesc: "Esta função calcula a temperatura aparente baseado na temperatura ambiente e umidade relativa. A temperatura aparente é frequentemente descrita como quão quente ele é para o corpo humano.<div><br/>Este índice pode ser útil para calcular os perigos relacionados para problemas médicos como cãibras musculares, desidratação, exaustão de calor ou insolação mais séria em dias quentes e úmidos. Quando a umidade relativa estiver alta, ela se torna mais difícil para o suor do corpo evaporar, deixando indivíduos sem um caminho natural efetivo para se refrescar. Mapas de aquecimento ou avisos são frequentemente um produto de reclassificação do resultado de índice de aquecimento em classes, onde quanto maior o valor de índice, mais provável dele se tornar um alerta ao invés de apenas um aviso.</div>",
		hillshadeName: "Relevo Sombreado",
		hillshadeSnip: "Cria uma representação 3D da superfície, levando em conta a posição relativa do sol para sombreamento da imagem.",
		hillshadeDesc: "A função Relevo Sombreado produz uma representação 3D da superfície do terreno em escala de cinza, levando em conta a posição relativa do Sol para sombreamento da imagem. <div><br/>O Relevo Sombreado é uma técnica para visualizar o terreno determinado por uma fonte de luz, e a declividade e aspecto da superfície de elevação. É um método qualitativo para visualizar topografia e não fornece valores de elevação absolutos. </div>",
		intName: "Int",
		intSnip: "Converte cada valor da célula de um raster para um número inteiro utilizando a função Truncar.",
		intDesc: "A função Int converte cada valor da pixel de um raster para um número inteiro por truncamento.",
		interpolateIrregularDataName: "Interpolar Dados Irregulares",
		interpolateIrregularDataSnip: "Interpola de nuvens de ponto ou grades irregulares.",
		interpolateIrregularDataDesc: "Alguns conjuntos de dados netCDF ou HDF armazenam sua localização geográfica como conjuntos irregularmente espaçados de pixels ou dados de pontos. Ao adicionar estes conjunto de dados para um conjunto de dados do mosaico, a função irregular interpolar dados utiliza a irregularmente dos dados da grade e os reamostra de forma que cada pixel seja de tamanho uniforme e seja quadrado.<div><br/>Ao adicionar variáveis de netCDF ou HDF a um conjunto de dados de mosaico, ela verificará automaticamente se os dados estão dispostos regularmente. Caso contrário, a função Interpolar Dados Irregulares pode ser utilizada para converter os dados irregulares em um raster de grade regular. Você pode alterar o método de interpolação e o tamanho da célula utilizados na função Interpolar Dados Irregulares do raster. Para dados raster de espaçamento regular, nenhuma interpolação será aplicada e os dados serão lidos como estão.</div>",
		isNullName: "Nulo",
		isNullSnip: "Determina quais valores dos rasters de entrada são de NoData em uma base de célula a célula. Retorna um valor de 1 se os valores de entrada for NoData e 0 para células que não forem.",
		isNullDesc: "A função É Nulo determina quais valores do raster de entrada são NoData em uma base de pixel e pixel. Retorna um valor de 1 se o valor de entrada for NoData e o valor de 0 para pixels que não são NoData.",
		kernelDensityName: "Densidade de Kernel",
		kernelDensitySnip: "Calcula uma área de magnitude por unidade a partir das feições de polilinha ou linha utilizando uma função de Kernel para ajustar uma superfície suavemente coberta para cada polilinha ou ponto.",
		kernelDensityDesc: "Esta função calcula uma área de unidade por magnitude a partir de feições de ponto ou de polilinha utilizando uma função de kernel para ajustar uma superfície suavemente coberta para cada ponto ou polilinha.",
		keyMetadataName: "Principais Metadados",
		keyMetadataSnip: "Substitui ou insere metadados-chaves de um raster em uma cadeia de função.",
		keyMetadataDesc: "Esta função permite que você insira ou substitua metadados chaves de uma raster.<div><br/>As informações nos metadados chave é utilizado para ajudar o aplicativo com algum processamento e renderização, incluindo fornecer algumas informações úteis como o nome do sensor, nomes de bandas ou cobertura de nuvem associado com a imagem.</div>",
		shortestPathName: "Caminhos de Menor Custo",
		shortestPathSnip: "Executa uma análise da distância de custo utilizando entradas de origem e destino, que são utilizadas para determinar o caminho de menor custo de uma origem até um destino.",
		shortestPathDesc: "A função Caminho de Menor Custo global calcula o caminho de menor custo a partir de uma origem até um destino. A distância de menor custo acumulativo é calculado para cada pixel sobre uma superfície de custo, para a origem mais próxima. Esta função produz um raster de saída que registra o caminho menor custo ou caminhos de localizações selecionadas para os pixels de origem mais próximos definidos dentro da superfície de custo acumulativo, em termos de distância de custo.<div><br/>Cada caminho de menor custo é atribuído um valor quando encontrou no processo de escaneamento. O pixel final no Raster de Origem de um caminho de custo recebe um valor de 1. O primeiro caminho recebe um valor de 3, o segundo 4 e assim por diante. Quando caminhos múltiplos se juntam e seguem a distância restante de volta para uma origem na mesma rota, o segmento onde os dois caminhos viajam juntos é atribuído um valor de 2. A porção juntada do caminho não pode ser atribuído ao valor de um dos caminhos, já que a porção juntada pertence a ambas as rotas.</div>",
		lessThanEqualName: "Menor que Igual",
		lessThanEqualSnip: "Executa uma operação menor-que-ou-igual-a Relacional em duas entradas em uma base célula a célula. Retorna 1 para células onde o primeiro raster for menor ou igual ao segundo raster e 0 onde não for maior.",
		lessThanEqualDesc: "A função executa uma operação menor-que-ou-igual-a Relacional em duas entradas em uma base pixel a pixel. Retorna um valor de 1 para pixels onde o primeiro raster é menor ou igual ao segundo raster e um valor de 0 onde ele não é menor ou igual ao segundo raster.",
		lessThanName: "Menor Que",
		lessThanSnip: "Executa uma operação menor-que Relacional em duas entradas em uma base célula a célula. Retorna 1 para células onde o primeiro raster é menor que o segundo raster e 0 se não for.",
		lessThanDesc: "A função executa uma operação menor-que Relacional em duas entradas em uma base pixel a pixel. Retorna um valor de 1 para pixels onde o primeiro raster é menor que o segundo raster e um valor de 0 se ele não for menor que o segundo raster.",
		lnName: "Ln",
		lnSnip: "Calcula o logaritmo natural (base e) de células em um raster.",
		lnDesc: "A função Ln calcula o logaritmo natural (base e) de cada pixel em um raster.",
		log10Name: "Log10",
		log10Snip: "Calcula a base de logaritmo 10 das células em um raster.",
		log10Desc: "A função Log10 calcula a base de logaritmo 10 de cada pixel em um raster.",
		log2Name: "Log2",
		log2Snip: "Calcula a base de logaritmo 2 das células em um raster.",
		log2Desc: "A função Log2 calcula a base de logaritmo 2 de cada pixel em um raster.",
		lookupName: "Pesquisar",
		lookupSnip: "Cria um novo raster pesquisando valores encontrados em outro campo na tabela do raster de entrada.",
		lookupDesc: "A função cria um novo raster pesquisando valores encontrados em outro campo na tabela do raster de entrada",
		mlClassifyName: "Classificação ML",
		mlClassifySnip: "Classifica a imagem utilizando uma abordagem por pixel. Os pixels misturados são atribuídos para a feição com a porcentagem mais alta neste pixel.",
		mlClassifyDesc: "A função Classificação ML permite a você executar uma classificação supervisionada utilizando o algoritmo de classificação de máxima probabilidade, em um conjunto de dados raster ou conjunto de dados do mosaico. Esta função exige um arquivo de assinatura de classificação.",
		maskName: "Máscara",
		maskSnip: "Configura os valores que você não deseja exibir.",
		maskDesc: "Esta função de raster define os valores que você não deseja para exibir em seu raster. Com a utilização da função Mascarar, você especificará um ou mais valores NoData ou uma faixa de valores de pixels válidas. ",
		minusName: "Subtrair",
		minusSnip: "Subtrai o valor do segundo raster de entrada do valor do primeiro raster de entrada em uma base de célula por célula.",
		minusDesc: "A função Menos subtrai o valor do segundo raster de entrada do valor do primeiro raster de entrada em uma base de pixel a pixel.",
		modName: "Mod",
		modSnip: "Encontra o remanescente (módulo) do primeiro raster quando dividido pelo segundo raster em uma base de célula por célula.",
		modDesc: "A função Mod localiza o remanescente (módulo) do primeiro raster quando dividido pelo segundo raster em uma base de pixel a pixel. A ordem das entradas é importante e afeta o resultado de saída.",
		mosaicRastersName: "Rasters do Mosaico",
		mosaicRastersSnip: "Liga os pontos dos conjuntos de dados rasters para criar um conjunto de dados.",
		mosaicRastersDesc: "A função Rasters do Mosaico cria uma imagem de mosaico a partir de múltiplas imagens. Quando houver sobreposição entre as imagens, há diversos métodos que você pode escolher para determinar quais imagens são exibidas.",
		ndviColorizedName: "NDVI Colorizado",
		ndviColorizedSnip: "Cria um conjunto de dados de múltiplas bandas que representa a saúde de vegetação, baseado na diferença entre as bandas do vermelho e infravermelho próximas.",
		ndviColorizedDesc: "A função NDVI Colorizado aplica a função NDVI na imagem de entrada e então utiliza um mapa de cores ou rampa de cores para exibir o resultado.",
		ndviName: "NDVI",
		ndviSnip: "Índice de Vegetação de Diferença Normalizada (NDVI)",
		ndviDesc: "A função NDVI cria um conjunto de dados de múltiplas bandas que representa a saúde de vegetação, baseado na diferença entre as bandas do vermelho e infravermelho próximas.<div><br/>NDVI é um índice padronizado permitindo a você gerar uma imagem exibindo verde, conhecido também como biomassa relativa. Este índice aproveita o contraste das características de duas bandas de um conjunto de dados raster multiespectral: absorções de pigmento da clorofila na banda vermelha e a alta refletividade de materiais vegetais na banda de infravermelho próximo (NIR). Os valores de NDVI extremamente baixos ou negativos representam áreas sem vegetação, tais como, nuvem, água ou chuvisco. Os valores muito baixos representam áreas de pequenas sem vegetação, tais como, concreto, pedra ou solo bruto. Os valores moderados representam áreas de arbustos e pastagens. Os valores altos representam áreas de floresta e vegetação exuberante.</div>",
		negateName: "Negativo",
		negateSnip: "Altera o sinal (multiplica por -1) dos valores de célula do raster de entrada em uma base de célula por célula.",
		negateDesc: "A função Negativo altera o sinal (multiplica por -1) dos valores de pixel do raster de entrada em um pixel ",
		nibbleName: "Extrair por Partes",
		nibbleSnip: "Substitui as células de um raster correspondendo à máscara com os valores dos vizinhos mais próximos.",
		nibbleDesc: "A função global Nibble permite áreas selecionadas de um raster para ser atribuído o valor de seu vizinho mais próximo. Isto é útil para áreas de edição de um raster onde os dados podem apresentar erros.",
		notEqualName: "Não Igual",
		notEqualSnip: "Executa uma operação não-igual-a Relacional em duas entradas em uma base célula a célula. Retorna 1 para células onde o primeiro raster não é igual ao segundo raster e 0 onde é igual.",
		notEqualDesc: "A função executa uma operação não-igual-a Relacional em duas entradas em uma base pixel a pixel. Retorna um valor de 1 de pixels onde o primeiro raster não é igual ao segundo raster e um valor de 0 para pixels onde ele é igual ao segundo raster.",
		pansharpeningName: "Nitidez Pancromática",
		pansharpeningSnip: "Realça artificialmente a resolução espacial de uma imagem de múltiplas bandas fundindo com uma imagem pancromática de resolução mais alta.",
		pansharpeningDesc: "A função Nitidez Pancromática utiliza uma imagem pancromática de alta resolução ou uma banda de raster para se fundir com um conjunto de dados raster de múltiplas bandas, de menor resolução para aumentar a resolução espacial da imagem de múltiplas bandas.<div><br/>O propósito da nitidez pancromática é criar uma imagem visual de melhor qualidade. Já que as técnicas alteram a radiometria e as características espectrais da imagem de múltiplas bandas, a imagem pancromática precisa ser utilizada com cautela para propósitos de sensoriamento remoto analítico.</div>",
		pathAllocationName: "Alocação da Distância do Caminho",
		pathAllocationSnip: "Calcula a fonte de menor custo para cada célula baseada no menor custo acumulativo sobre uma superfície de custo, ao responder pela distância da superfície junto com fatores de custo horizontais e verticais.",
		pathAllocationDesc: "A função Alocação da Distância do Caminho calcula a fonte mais próxima para cada célula com base no menor custo acumulativo sobre uma superfície de custo, enquanto considera a distância e os fatores de custo vertical e horizontal.",
		pathBackLinkName: "Vínculo Anterior de Distância do Caminho",
		pathBackLinkSnip: "Define o vizinho que está próximo da célula no caminho de menor custo acumulativo até a fonte de menor custo, ao responder pela distância da superfície junto com fatores de custo horizontais e verticais.",
		pathBackLinkDesc: "A função Vínculo Anterior de Distância do Caminho identifica a direcionalidade do vizinho que é a próxima célula no caminho de menor custo acumulativo até a fonte mais próxima, enquanto considera a distância de superfície e fatores de custo horizontais e verticais.",
		pathDistanceName: "Distância do Caminho",
		pathDistanceSnip: "Calcula, para cada célula, a distância de menor custo acumulativo de ou até a fonte de menor custo, ao responder pela distância da superfície junto com fatores de custo horizontais e verticais.",
		pathDistanceDesc: "A função Distância do Caminho calcula, para cada célula, a distância de menor custo acumulativo até a fonte mais próxima, enquanto considera a distância de superfície e os fatores de custo horizontal e vertical.",
		plusName: "Plus",
		plusSnip: "Adiciona (somas) os valores de dois rasters em uma base de célula por célula.",
		plusDesc: "A função Adição adiciona (somas) os valores de dois rasters em uma base de pixel a pixel.",
		powerName: "Potência",
		powerSnip: "Eleva os valores de célula em um raster para a potência dos valores encontrados em outro raster.",
		powerDesc: "A função Potência eleva os valores de pixel em um raster à potência dos valores localizados em outro raster.",
		radarCalibrationName: "Calibração de Radar",
		radarCalibrationSnip: "Converte RADARSAT-2 backscatter.",
		radarCalibrationDesc: "Esta função pode ser utilizada para calibrar imagem RADARSAT-2 em um conjunto de dados do mosaico ou como um produto de raster. A calibração é executada em imagem de radar de forma que os valores de pixel sejam uma representação verdadeira do radar backscatter.",
		rasterInfoName: "RasterInfo",
		rasterInfoSnip: "Modifica propriedades do raster, como tamanho de bit, um valor de NoData, tamanho da célula, e assim por diante.",
		rasterInfoDesc: "O parâmetro Info do Raster inclui um diálogo com propriedades do conjunto de dados raster, como o número de colunas e linhas, o número de bandas, o tipo de pixel, a extensão e a referência espacial. Você pode editar estas propriedades selecionando um conjunto de dados raster para utilizar como um modelo. ",
		rasterizeAttributesName: "Rasterizar Atributos",
		rasterizeAttributesSnip: "Enriquece um raster por bandas adicionais derivadas dos valores de atributos especificados de um serviço da feição ou tabela externa.",
		rasterizeAttributesDesc: "A função Rasterizar Atributo enriquece um raster ao adicionar bandas derivadas dos valores de atributos especificados de um serviço da feição ou tabela externa. Opcionalmente, você pode especificar um raster de zona e o atributo de ID da zona associada para habilitar a consulta baseada na região.",
		rasterizeFeatureClassName: "Feições Rasterizadas",
		rasterizeFeatureClassSnip: "Converte feições para raster.",
		rasterizeFeatureClassDesc: "Esta função converte dados da classe de feição de polígono, polilinha e ponto para uma camada raster.<div><br/>As feições são valores de pixel atribuídos com base no OBJECTID (padrão) da feição. Opcionalmente, os valores de pixel podem ser baseados em um campo de valor definido pelo usuário na tabela de atributos da feição de entrada.</div>",
		recastName: "Remodelar",
		recastSnip: "Modifica os parâmetros de uma cadeia de função em um conjunto de dados do mosaico ou serviço de imagem. Isto é normalmente utilizado com conjuntos de dados LAS para evitar de ter que criar um conjunto de dados do mosaico separado para diferentes representações do terreno.",
		recastDesc: "A função Remodelar é utilizada para modificar o parâmetro de função utilizado em um conjunto de dados do mosaico ou serviço de imagem dinamicamente sem persistir fisicamente nas alterações.",
		regionGroupName: "Agrupar por Regiões",
		regionGroupSnip: "Para cada célula na saída, a identidade da região conectada na qual a célula pertence é registrada. Um único número é atribuído para cada região.",
		regionGroupDesc: "A função Agrupar por Regiões global registra em cada célula na saída, a identidade da região conectada na qual a célula pertence. Um único número é atribuído para cada região.<div><br/>A primeiro região escaneada recebe o valor um, a segunda dois, e assim por diante, até que todas as regiões tenham um valor atribuído. O escaneamento move da esquerda para direita, da parte superior para parte inferior. Os valores atribuídos às zonas de saída são baseados quando eles forem encontrados no processo de escaneamento.</div>",
		regionGrowName: "Região de Crescimento",
		regionGrowSnip: "Regiões de crescimento dos pontos de origem.",
		regionGrowDesc: "A função Crescimento de Região agrupa pixels vizinhos em grupos dependendo do raio especificado a partir do ponto de origem. O grupo de pixels ou objeto recebe um valor de preenchimento especificado.",
		remapName: "Remapear",
		remapSnip: "Altera os valores do pixel atribuindo novos valores para intervalos de valores do pixel ou utilizando uma tabela externa.",
		remapDesc: "A função Remapear permite a você alterar ou reclassificar os valores de pixels dos dados raster. Isto pode ser feito especificando uma faixa de valores de pixels para mapear um valor de pixel de saída ou utilizando uma tabela para mapear os valores de pixel para o valor de pixel de saída.",
		reprojectName: "Reprojetar",
		reprojectSnip: "Modifica a projeção de um conjunto de dados raster, um conjunto de dados de mosaico ou um item do raster em um conjunto de dados de mosaico. Também pode reamostrar os dados para um novo tamanho de célula e definir uma origem.",
		reprojectDesc: "A função Reprojetar modifica a projeção de um conjunto de dados raster, um conjunto de dados de mosaico ou um item do raster em um conjunto de dados de mosaico. Também pode reamostrar os dados para um novo tamanho de célula e definir uma origem.<div><br/>A função Reprojetar pode ser utilizada ao criar um cache a partir de um conjunto de dados raster ou de mosaico que não esteja na projeção exigida. Por exemplo, ao criar um serviço de imagem com cache que pode ser integrado por aplicativos com outros serviços com cache, é importante que todos estejam na mesma projeção. Isto geralmente é uma projeção Web Mercator. Já que o conjunto de dados de mosaico não pode ser reprojetado, você pode fazer uma das duas coisas—criar um conjunto de dados de mosaico referenciado a partir do seu conjunto de dados de mosaico na projeção necessária ou adicionar a função Reprojetar à cadeia de função do conjunto de dados de mosaico. Outro exemplo utiliza esta função no item do raster em um conjunto de dados de mosaico. Ao utilizar a função Raster Com Cache, você pode desejar a inserção da função Reprojetar para que o cache seja criado na nova projeção. Os itens do raster em um conjunto de dados de mosaico podem ser armazenados em cache quando o processamento é intenso e você está tentando publicar um serviço de imagem rápido, sem armazenar em cache o serviço de imagem inteiro.</div>",
		resampleName: "Reamostrar",
		resampleSnip: "Altera o tamanho de célula de um raster.",
		resampleDesc: "A função Reamostrar altera o tamanho de célula, tipo de reamostragem ou ambos.<div><br/>A função Reamostrar deve somente ser utilizada com requisitos de computação específicos; por exemplo, quando você estiver computando o vento ou direção de magnitude atual que exige a reamostragem da resolução de origem.</div>",
		roundDownName: "Arredondar para Menos",
		roundDownSnip: "Retorna o próximo valor inteiro mais baixo, apenas representado como um ponto flutuante, para cada célula em um raster.",
		roundDownDesc: "A função Arredondar para Menos retorna o próximo valor inteiro mais baixo, como um valor de ponto flutuante de cada pixel em um raster.",
		roundUpName: "Arredondar para mais",
		roundUpSnip: "Retorna o próximo valor inteiro mais alto, apenas representado como um ponto flutuante, para cada célula em um raster.",
		roundUpDesc: "A função Arredondar para mais, retorna o próximo valor inteiro mais alto, como um valor de ponto flutuante, para cada pixel em um raster.",
		segmentMeanShiftName: "Deslocamento Médio do Segmento",
		segmentMeanShiftSnip: "Agrupa pixels vizinhos com características espectrais semelhantes em segmentos.",
		segmentMeanShiftDesc: "A função identifica objetos, feições ou segmentos na sua imagem agrupando pixels adjacentes com características espectrais semelhantes. Você pode controlar a quantidade de suavização espectral e espacial para ajudar a derivar as feições de interesse.",
		s1RadiometricCalibrationName: "Calibração Radiométrica do Sentinel-1",
		s1RadiometricCalibrationSnip: "Executa diferentes tipos de calibração radiométrica em conjuntos de dados do Sentinel-1.",
		s1RadiometricCalibrationDesc: "Esta função de raster executa três calibrações diferentes pra conjunto de dados Sentinel 1, incluindo beta zero e gama, e gera a saída do conjunto de dados calibrado. O objetivo de calibração de SAR é fornecer imagem em quais valores de pixels podem ser diretamente relacionados à retrodispersão do radar da cena. Entretanto a imagem SAR não calibrada é suficiente para uso qualitativo, as imagens de SAR calibradas são essenciais para uso quantitativo dos dados de SAR.<div><br/>O processamento de dados de SAR típico, que produz imagens de Nível 1, não inclui correções radiométricas e o desvio significante radiométrico permanece. Portanto, é necessário se aplicar correção radiométrica para imagens de SAR de forma que os valores de pixel das imagens representam verdadeiramente a retrodispersão do radar da superfície refletida. A correção radiométrica também é necessária para a comparação de imagens SAR adquiridas com sensores diferentes ou adquiridas a partir do mesmo sensor em tempos diferentes, em modos diferentes ou processadas por processadores diferentes.</div>",
		s1ThermalNoiseRemovalName: "Remoção de Ruído Térmico do Sentinel-1",
		s1ThermalNoiseRemovalSnip: "Remove ruído térmico de dados do Sentinel-1.",
		s1ThermalNoiseRemovalDesc: "A correção de ruído térmico pode ser aplicada aos produtos Sentinel-1 Level-1 Single Look Complex (SLC) como também produtos Level-1 Ground Range Detection (GRD) que já não foram corrigidos. O operador também pode remover esta correção baseada nas anotações de produto para re-introduzir o sinal de ruído que foi removido para produzir o produto original. As anotações de produto serão consequentemente atualizadas para permitir a re-aplicação da correção. ",
		setNullName: "Definir Nulo",
		setNullSnip: "Configurar para Nulo define localizações de célula identificadas para NoData baseado em critérios especificados. Ele retorna NoData se uma avaliação condicional for verdadeira e retorna o valor especificado por outro dado raster se falsa.",
		setNullDesc: "A função Configurar para Nulo define os pixels identificados para NoData baseado em critérios específicos. Ele retorna NoData se uma avaliação condicional for verdadeira (1) e retorna o valor especificado no Raster Falso se avaliação condicional for falsa (0). Estes critérios são especificados pela saída de uma função matemática lógica, que será o Raster de entrada.",
		shadedReliefName: "Relevo Sombreado",
		shadedReliefSnip: "Cria uma representação da superfície 3D, de cores codificadas, de múltiplas bandas, levando em conta a posição relativa do sol para sombramento da imagem.",
		shadedReliefDesc: "A função Relevo Sombreado cria uma representação de cor 3D do terreno que é criado juntando as imagens dos métodos de elevação e relevo sombreado codificados. Esta função utiliza a altitude e propriedades de azimute para especificar a posição do sol.<div><br/></div>",
		sinHName: "SenH",
		sinHSnip: "Calcula o seno hiperbólico de células em um raster.",
		sinHDesc: "A função calcula o seno hiperbólico dos pixels em um raster.",
		sinName: "Sen",
		sinSnip: "Calcula o seno das células em um raster.",
		sinDesc: "A função calcula o seno dos pixels em um raster.",
		slopeName: "Declividade",
		slopeSnip: "Calcula a taxa de alteração de um valor de pixel para seus vizinhos.",
		slopeDesc: "Esta função de raster calcula a declividade que é a taxa de mudança de elevação de cada célula do modelo de elevação digital (DEM). É o primeiro derivado de um DEM.<div><br/>Esta função utiliza uma função acelerada atan(). É seis vezes mais rápido e o erro de aproximação é sempre menos que 0.3 graus.</div>",
		speckleName: "Manchar",
		speckleSnip: "Fornece filtros para retirar ruído dos conjuntos de dados do rada de abertura sintética.",
		speckleDesc: "Manchar, é o ruído de alta-frequência em dados de radar. As imagens geradas por sistemas de radar de abertura sintética (SAR) são altamente sujeito a efeitos de manchas devido ao processamento de sinais dispersos e interferência de ondas de eletromagnético dispersos de superfícies ou objetos. Esta função Manchar filtra o conjunto de dados de radar manchado e suaviza o ruído ao reter as bordas ou feições nítidas na imagem.",
		spectralConversionName: "Conversão Espectral",
		spectralConversionSnip: "Aplica uma matriz para uma imagem de múltiplas bandas.",
		spectralConversionDesc: "A função Conversão Espectral aplica uma matriz para uma imagem de bandas múltiplas para afetar os valores de cores da saída.<div><br/>Alguns sensores não coletam bandas azuis por causa de uma sinal baixo para taxa de ruído. Isto pode ser utilizado, por exemplo, para converter uma imagem infravermelha falsa para uma imagem de cor natural.</div>",
		squareRootName: "Raiz Quadrada",
		squareRootSnip: "Calcula a raiz quadrada dos valores da célula em um raster.",
		squareRootDesc: "A função Raiz Quadrada calcula a raiz quadrada dos valores de pixel em um raster.",
		squareName: "Quadrado",
		squareSnip: "Calcule a equação dos valores de célula em um raster.",
		squareDesc: "A função Quadrado calcule o quadrado dos valores de pixel em um raster.",
		statisticsHistogramName: "Estatísticas e Histograma",
		statisticsHistogramSnip: "Define ou associa a estatísticas e histograma.",
		statisticsHistogramDesc: "A função Estatística e Histograma é utilizada para definir a estatística e histograma de um raster. Você pode inserir esta função no final da cadeia de função para descrever a estatística e histograma de um modelo de função do raster (RFT). Isto pode ser necessário para controlar a visualização padrão do resultado de processamento, especialmente ao definir uma cadeia de função que contém muitas funções.<div><br/>Você pode definir estatísticas digitando os valores ou importando de um conjunto de dados raster ou um arquivo XML. Os histogramas podem somente ser definidos importando um arquivo.</div>",
		statisticsName: "Estatística",
		statisticsSnip: "Calcula a estatística focal para cada pixel de uma imagem baseado em uma vizinhança focal definida.",
		statisticsDesc: "A função Estatística calcula a estatística focal para cada pixel de uma imagem baseado em uma vizinhança focal definida.<div><br/>A função Estatística pode ser utilizada para preencher linhas descartadas em uma imagem. As linhas descartadas estão frequentemente causadas por problemas no sensor onde os dados não são coletados. Isto ocorreu em sensores como Landsat 7's Enhanced Thematic Mapper Plus (ETM+). Estes problemas causam perda de dados para análise e também quando visualizar a imagem. Há pouco que pode ser feito ao utilizar a imagem para análise; entretanto, se houver uma imagem de sobreposição, pode ser utilizado no lugar do conteúdo perdido. O mesmo pode ser feito se a imagem estiver sendo utilizada para visualização. Entretanto, não há sempre uma imagem extra para preencher o conteúdo perdido, então ele deve ser obtido a partir de dados existentes.</div>",
		streamLinkName: "Link do Fluxo",
		streamLinkSnip: "Atribui valores únicos para seções da rede linear do raster entre interseções.",
		streamLinkDesc: "A função Link do Fluxo global atribui valores únicos para seções da rede linear do raster entre intersecções.<div><br/>Links são as seções de um canal de fluxo conectando duas junções sucessivas, uma junção e a saída, ou uma junção e a divisão de drenagem. Em hidrologia, estes segmentos de fluxo são chamados de alcances. Uma junção é relacionada a um ponto de escoamento e ajuda delinear uma bacia ou limite de drenagem de sub-bacia.</div>",
		stretchName: "Contraste",
		stretchSnip: "Melhora uma imagem ajustando a faixa de valores exibidos. Isto não altera os valores de pixel subjacentes. Se um pixel tiver um valor fora da faixa especificada, ele aparecerá como o valor mínimo ou máximo.",
		stretchDesc: "A função Contraste melhora uma imagem pela alteração das propriedades, tal como, brilho, contraste e gama através de vários tipos de contraste. Esta função utiliza a estatística dos rasters dentro do conjunto de dados do mosaico; portanto, se você utilizar esta função, você deve certificar-se que as estatísticas foram calculadas.<div><br/>O tipo de contraste define um contraste de histograma que será aplicado aos rasters para melhorar sua aparência. O contraste melhora a aparência dos dados espalhando os valores de pixel ao longo de um histograma a partir de valores mínimos e máximos definidos por sua profundidade de bit. </div>",
		swathName: "Fileira",
		swathSnip: "Interpola de grades irregulares ou dados de fileira.",
		swathDesc: "Alguns conjunto de dados netCDF ou HDF armazenam sua localização geográfica como vetores espaçados irregularmente. Ao adicionar estes conjunto de dados para um conjunto de dados do mosaico, a função de fileira utiliza os dados irregularmente na grade e reamostra de forma que cada pixel é de tamanho uniforme e é quadrado.<div><br/>Ao adicionar variáveis de netCDF ou HDF a um conjunto de dados de mosaico, ela verificará automaticamente se os dados estão dispostos regularmente. Se ela não for, a função de fileira é automaticamente aplicado para converter o raster irregular em pontos e então para uma raster regularmente na grade. Você pode alterar o método de interpolação e tamanho de célula utilizado na função de raster de fileira. Para dados raster espaçado de forma regular, nenhuma interpolação será aplicada, os dados serão lidos como estão.</div>",
		tanHName: "TanH",
		tanHSnip: "Calcula a tangente hiperbólica de células em um raster.",
		tanHDesc: "A função calcula a tangente hiperbólica dos pixels em um raster.",
		tanName: "Tangente",
		tanSnip: "Calcula a tangente de células em um raster.",
		tanDesc: "A função calcula a tangente dos pixels em um raster. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Calcula níveis de vegetação, umidade e brilho. Esta técnica conta com coeficientes que devem ser especificamente calculados para um sensor.",
		tasseledCapDesc: "A transformação Tasseled Cap (Kauth-Thomas) é projetada para analisar e mapear a fenomenologia de vegetação e alterações de desenvolvimento urbano detectadas por vários sistemas de sensor do satélite. É conhecida como a transformação Tasseled Cap devido à forma da distribuição gráfica dos dados. A transformação forneceu uma razão para os padrões localizados em dados de Landsat MSS de campos agrícola como uma função do ciclo vitalício da colheita. Essencialmente, à medida que as colheitas crescem da semente à maturidade, há um aumento líquido no infravermelho próximo e uma diminuição na refletância do vermelho com base na cor do solo<div><br>O utilitário desta transformação expandiu a partir do monitoramento de colheitas para analisar e mapear a vegetação para suportar uma variedade de aplicações, tais como, silvicultura, gerenciamento de vegetação industrial, mapeamento e gerenciamento de ecossistema, inventário e monitoramento do isolamento de carbono e créditos, desenvolvimento urbano e mais. Também expandiu a partir do suporte do Landsat MSS para incluir outros sistemas de satélites populares, como sensores multiespectrais do Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 e RapidEye.</div>",
		timesName: "Multiplicar",
		timesSnip: "Multiplica os valores de dois rasters em uma base de célula por célula.",
		timesDesc: "A função Multiplicar divide os valores de dois rasters em uma base de pixel a pixel.",
		transposeBitsName: "Transportar Bits",
		transposeBitsSnip: "Descompacta os bits do pixel de entrada e mapeie-os para bits especificados no pixel de saída. O propósito desta função é manipular bits de algumas entradas, como produtos de banda da qualidade Landsat 8.",
		transposeBitsDesc: "A função Transportar Bits descompacta os bits do pixel de entrada e mapeie-os para bits especificados no pixel de saída. O propósito desta função é manipular bits de algumas entradas, como produtos de banda da qualidade Landsat 8.",
		unitConversionName: "Conversão da Unidade",
		unitConversionSnip: "Altera valores de uma unidade de medição para outra.",
		unitConversionDesc: "Esta função converte pixels de uma unidade até outra. Suporta conversão de distância, velocidade e temperatura.",
		vectorFieldName: "Campo de Vetor",
		vectorFieldSnip: "Exibe conjuntos de dados com ambas a magnitude (u) e direção (v) como setas onde a magnitude é representada pelo tamanho e a direção é representada pelo ângulo da seta.",
		vectorFieldDesc: "A função Campo de Vetor é utilizada para compor e converter dois rasters em um raster de duas bandas que é do tipo de dados Direção de Magnitude ou tipo de dados U-V.<div><br/>O valor U é às vezes chamado da velocidade zonal e valor V é às vezes chamado de velocidade meridional.</div>",
		viewshed2Name: "Panorama",
		viewshed2Snip: "Determina os locais de superfície do raster visíveis para um conjunto de feições do observador, utilizando métodos geodésicos.",
		viewshed2Desc: "A função Panorama determinas as localizações visíveis da superfície do raster para um conjunto de feições do observador utilizando métodos geodésicos<div><br/>A visibilidade de cada centro do pixel é determinado por um teste de linha-de-visada entre o alvo e cada observador. Se um observador pode visualizar o alvo no centro do pixel, o pixel é considerado visível. Esta ferramenta sempre considera a curvatura da Terra quando a visibilidade é determinada.</div>",
		watershedName: "Vertente",
		watershedSnip: "Determina a área de contribuição sobre um conjunto de células em um raster.",
		watershedDesc: "A função Vertente global determina a contribuição de área sobre um conjunto de pixels em um raster. As vertentes são delineadas a partir de um raster de direção de fluxo que identifica a direção de fluxo de cada pixel.",
		weightedOverlayName: "Sobreposição Ponderada",
		weightedOverlaySnip: "Sobrepõe diversos dados raster utilizando uma escala de medida comum e pesa cada um de acordo com sua importância.",
		weightedOverlayDesc: "Esta função permite a você sobrepor diversos rasters utilizando uma escala de medida comum e pesos, cada um de acordo com sua importância.",
		weightedSumName: "Soma Ponderada",
		weightedSumSnip: "Pesa e adiciona um conjunto de dados rasters em uma base de célula a célula.",
		weightedSumDesc: "A função Soma Ponderada permite a você sobrepor vários rasters, multiplicando cada um pelo seu peso e somando-os juntos.",
		windchillName: "Vento Frio",
		windchillSnip: "Combina temperatura do ambiente e velocidade do vento para calcular a sensação térmica.",
		windchillDesc: "A função de Vento Frio é útil para identificar condições perigosas de inverno que, dependendo dos tempos de exposição aos elementos, pode resultar em ulceração ou até hipotermia. O vento frio é uma forma para medir o quanto está frio quando o vento é levado em conta com temperaturas já baixas. Quanto mais rápida a velocidade do vento, o corpo perderá calor mais rapidamente e mais frio eles sentirão.",
		zonalRemapName: "Remapeamento Zonal",
		zonalRemapSnip: "Remapeia pixels em um raster baseado em zonas definidas por outro raster e um mapeamento de valores dependente de zona definido em uma tabela.",
		zonalRemapDesc: "Esta é uma função que permite a você remapear pixels em um raster baseado em zonas definidas por outro raster e um mapeamento de valores dependente de zona definido em uma tabela.",
		zonalStatisticsName: "Estatística Zonal",
		zonalStatisticsSnip: "Calcula a estatística em valores de um raster dentro das zonas de outro conjunto de dados.",
		zonalStatisticsDesc: "A função calcula a estatística em valores de um raster dentro das zonas de outro conjunto de dados. A zona é definida por todos os locais na entrada que tenham o mesmo valor. Estas áreas não têm que ser contíguas. Quando a zona e entradas de valores são ambos rasters da mesma resolução, eles serão diretamente utilizados. Se as resoluções forem diferentes, uma reamostragem interna é aplicada para corresponder às resoluções antes da operação zonal ser executada.",
		flowLengthName: "Comprimento do Fluxo",
		flowLengthSnip: "Calcula a distância a montante ou a jusante, ou a distância ponderada, ao longo do caminho do fluxo para cada célula.",
		flowLengthDesc: "Esta é uma função de raster global . Esta função cria uma camada de raster da distância de montante ou jusante, ou distância ponderada, ao longo do trajeto de fluxo para cada célula.<div><br/>Um uso importante da função Comprimento do Fluxo é calcular o comprimento de trajeto do fluxo mais longo dentro de uma determinada bacia. Esta medida é normalmente utilizada para calcular o tempo de concentração de uma bacia. Isto é concluído com o uso da opção Montante. A função também pode ser utilizada para criar diagramas de área-distância de eventos hipotéticos de precipitação e escoamento utilizando um raster de peso como uma impedância ao movimento de declividade.</div>",
		streamOrderName: "Ordem do Fluxo",
		streamOrderSnip: "Atribui uma ordem numérica aos segmentos do raster representando ramificações de uma rede linear",
		streamOrderDesc: "Esta é uma função de raster global . Esta função cria uma camada de raster que atribui uma ordem numérica para segmentos de um raster representando ramificações de uma rede linear.<div><br/>A saída da função Ordem do Fluxo será de qualidade superior se a camada de raster do fluxo de entrada e a camada de raster da direção do fluxo de entrada forem derivadas da mesma superfície. Se o raster de fluxo for derivado de um conjunto de dados de fluxos rasterizados, a saída poderá não ser utilizável, pois, em uma base de célula por célula, a direção não corresponderá à localização das células do fluxo. Os resultados da função Acumulação de Fluxo podem ser utilizados para criar uma rede de fluxo do raster, aplicando um valor limite para selecionar células com alto fluxo acumulado. Por exemplo, células que têm mais de 100 células fluindo para dentro delas são utilizadas para definir a rede de fluxo. Utilize a função Con ou Definir Nulo para criar um raster da rede de fluxo na qual valores de acumulação do fluxo de 100 ou maiores vão para um, e o restante é colocado em segundo plano (NoData). A rede de fluxo resultante pode ser utilizada na função Ordem do Fluxo. Esta função suporta somente uma camada de raster de entrada da direção de fluxo D8. As direções de fluxo D8 podem ser criadas utilizando a função Direção do Fluxo e executadas com o tipo de direção de fluxo D8 padrão.</div>",
		snapPourPointName: "Ajustar Ponto de Escoamento",
		snapPourPointSnip: "Ajusta pontos de escoamento para a célula de maior acumulação de fluxo dentro de uma distância especificada",
		snapPourPointDesc: "Esta é uma função de raster global . Esta função ajusta os pontos de escoamento na célula de maior acumulação de fluxo dentro de uma distância especificada.<div><br/>A função Ajustar Ponto de Escoamento é utilizada para garantir a seleção de pontos de alto fluxo acumulado ao delinear bacias de drenagem utilizando a função Vertente. Ajustar Ponto de Escoamento buscará a uma distância de ajuste em torno dos pontos de escoamento especificados para a célula de maior fluxo acumulado e moverá o ponto de escoamento para este local. A saída é uma camada de raster inteira quando os locais originais do ponto de escoamento foram ajustados aos locais com maior fluxo acumulado.</div>",
		sinkName: "Coletor",
		sinkSnip: "Cria um raster identificando todos os coletores ou áreas de drenagem interna",
		sinkDesc: "Esta é uma função de raster global . Esta função cria uma camada de raster identificando todos os coletores ou áreas de drenagem interna. Um coletor é uma célula ou conjunto de células conectadas espacialmente com uma direção de fluxo que não pode ser atribuída a um dos oito valores válidos em um raster de direção do fluxo. Isto pode ocorrer quando todas as células vizinhas são mais altas que a célula de processamento ou quando duas células fluem uma para a outra, criando um loop de duas células.<div><br/>A função Coletor suporta somente uma camada de raster de entrada da direção de fluxo D8. As direções de fluxo D8 podem ser criadas utilizando a função Direção do Fluxo e executadas com o tipo de direção de fluxo D8 padrão. A saída da função Coletor é um raster inteiro, com cada coletor sendo atribuído a um valor único. Estes valores únicos têm um intervalo entre um e o número total de coletores. Por exemplo, se o número total de coletores for 1000, os valores únicos variam de 1 a 1000.</div>",
		aggregateName: "Agregar",
		aggregateSnip: "Gera uma versão de resolução reduzida de um raster.",
		aggregateDesc: "A função Agregar reamostra um raster de entrada para uma resolução mais grosseira baseado em uma estratégia de agregação especificada. Cada célula de saída contém a Soma, Mínimo, Máximo, Média ou Mediano das células de entrada que são cercadas pela extensão desta célula.<div><br/>Você pode especificar o fator pelo qual multiplicar o tamanho da célula do raster de entrada. Por exemplo, um valor de fator da célula de 3 resultaria em um tamanho de célula de saída três vezes maior que o do raster de entrada. Você pode definir como manipular a extensão da saída se o número de linhas ou colunas na entrada não for um múltiplo exato do fator da célula. Por padrão, os limites da direita e superior serão expandidos para cobrir uma extensão espacial maior que o raster de entrada, a fim de assegurar que todas as células de entrada sejam processadas. Alternativamente, os limites da direita e superior podem ser reduzidos para cobrir uma extensão pequena, de forma que o número de linhas e colunas processadas sejam um múltiplo exato do fator da célula. Você pode definir como as células NoData são manipuladas pelo cálculo de agregação. O mecanismo padrão é que as células NoData de entrada que caem na extensão espacial de uma célula maior no raster de saída serão ignoradas ao determinar o valor desta célula de saída. Alternativamente, você pode especificar que, se houver uma única célula NoData de entrada na extensão espacial de uma célula de saída, esta célula será NoData no raster de saída.</div>",
		ccdcName: "Análise de CCDC",
		ccdcSnip: "Avalia as alterações valores de pixels com o passar do tempo utilizando o algoritmo Detecção de Alteração Contínua e Classificação (CCDC) e gera resultados de modelo.",
		ccdcDesc: "A função Análise CCDC avalia as alterações valores de pixels com o passar do tempo utilizando o algoritmo Detecção de Alteração Contínua e Classificação (CCDC) e gera um raster multidimensional contendo os resultados do modelo. É somente suportado junto com a função Detectar Alteração Utilizando Alterar Análise em um modelo de função raster. Para produzir uma saída de raster , conecte a função Análise de CCDC com a função Detectar Alteração Utilizando Alterar Análise, salvar como um modelo de função do raster e execute Análise Raster com o modelo de função.<div><br/>Isto função utiliza o algoritmo Detectar Alteração Contínua e Classificação (CCDC) para avaliar alterações em valores de pixels com o passar do tempo para uma pilha de imagens. Em uma série de tempo de imagens ópticas ou derivados de imagens (por exemplo, NDVI), os valores de pixels podem flutuar por diversas razões: 1. Alterações sazonais -- As alterações de valores do pixel refletem alterações em vegetação devido a variabilidade sazonal de temperatura e precipitação. No Hemisfério Norte, por exemplo, nós esperamos ver densidade mais alta de vegetação verde no verão comparado ao inverno; 2. Alteração gradual -- As alterações de valores do pixel refletem tendências em vegetação ou água de superfície devido a variabilidade de clima ou práticas de gerenciamento de solo a longo prazo. Por exemplo, o solo bruto pode gradualmente aumentar em área devido a declínio a longo prazo em precipitação; e 3. Alteração abrupta -- As alterações de valores do pixel refletem alterações de cobertura de solo que ocorre de repente devido ao desmatamento, desenvolvimento urbano, desastre natural e assim por diante. O algoritmo de CCDC identifica todos os três tipos de alteração com o propósito primário de identificar a alteração abrupta. A regressão e modelos de tendência harmônicos são ajustados aos dados para estimar alteração sazonal e gradual, e divergências súbitas a partir de modelos de tendências modelos que são indicações de alteração abrupta.<div><br/>O algoritmo CCDC foi originalmente projetado para Landsat TM, Landsat ETM+ e Reflectância de Superfície de dados Landsat OLI ou dados de Temperatura de Brilho. Entretanto, a função Detectar Alteração Utilizando Análise de Alteração junto com esta função irá detectar alteração das imagens de bandas múltiplas de qualquer sensor suportado, assim como imagens de banda única são derivadas como índices de bandas. Por exemplo, você pode executar detecção de alteração contínua em um raster Normalizar Índice de Vegetação de Diferença (NDVI), pois as alterações abruptas no NDVI pode ser indicativo de desmatamento.</div>",
		computeChangeName: "Computar Alteração",
		computeChangeSnip: "Computa a diferença entre dois conjuntos de dados raster categórico ou contínuo.",
		computeChangeDesc: "A função de Computar Alteração pode ser utilizada para enumerar as diferenças entre dois rasters classificados para análise de alteração de cobertura do solo, ou ele pode ser utilizado para examinar alterações entre dois rasters de banda única contínuo, tais como, elevação, temperatura, cobertura de copa da árvore e assim por diante.",
		detectChangeName: "Detectar Alteração Utilizando Análise de Alteração",
		detectChangeSnip: "Gera uma camada de raster contendo informações de alteração de pixel utilizando o raster de análise de alteração de saída.",
		detectChangeDesc: "<div>A função Detectar Alteração Utilizando Análise de Alteração gera uma camada de raster contendo informações de alteração de data do pixel utilizando o raster de análise de alteração. O raster de análise de alteração deve ser gerado pela ferramenta Analisar Alterações Utilizando CCDC ou Analisar Alterações Utilizando LandTrendr, ou a função do raster Análise de CCDC ou Análise de LandTrendr.</div><br><div>Esta função do raster pode ser combinada com a função do raster Análise de CCDC ou a função do raster Análise de LandTrendr em um modelo de função do raster. Para produzir uma saída de raster permanente, conecte a saída da função Análise de CCDC ou Análise de LandTrendr à função Detectar Alteração Utilizando Análise de Alteração, salve como um modelo de função do raster e execute a Análise de Raster com o modelo.</div><br><div>O parâmetro <strong>Tipo de Alteração</strong> indica as informações que são geradas. As informações são extraídas do raster da análise de alteração. Ao executar esta função na saída da função/ferramenta CCDC, você pode escolher entre as seguintes opções:</div><ul><li><strong>Hora da alteração mais recente</strong>--A data e hora mais recente na qual um pixel foi sinalizado como sendo alterado.</li><li><strong>Hora da alteração mais antiga</strong>--A data e hora mais antigas na qual um pixel foi sinalizado como sendo alterado.</li><li><strong>Hora da maior alteração</strong>--A data e hora na qual a alteração calculada foi a mais significativa para um pixel.</li><li> <strong>Número de alterações</strong>--O número total de vezes que o pixel alterou.</li></ul><div>Ao executar esta função na saída da função/ferramenta LandTrendr, as seguintes opções adicionais estão disponíveis:</div><ul><li><strong>Hora da alteração mais longa</strong>--A data na qual um pixel foi sinalizado como sendo alterado, no início ou no final do período mais longo de alteração.</li><li><strong>Hora da alteração mais curta</strong>--A data na qual um pixel foi sinalizado como sendo alterado, no início ou no final do período mais curto de alteração.</li><li><strong>Hora da alteração mais rápida</strong>--A data na qual um pixel foi sinalizado como sendo alterado, no início ou no final do período mais rápido de alteração.</li><li><strong>Hora da alteração mais lenta</strong>--A data na qual um pixel foi sinalizado como sendo alterado, no início ou no final do período mais lento de alteração.</li></ul><div>O raster de saída é um raster de múltiplas bandas no qual cada banda contém informações de alteração dependendo do tipo de alteração selecionado e do número máximo de alterações especificado. Por exemplo, se <strong>Tipo de Alteração</strong> estiver definido para <strong>Hora de Alteração Mais Antiga</strong> e <strong>Número Máximo de Alterações</strong> estiver definido como 2, a função calculará as duas primeiras datas nas quais a alteração ocorreu ao longo da série de tempo para cada pixel. O resultado é um raster no qual a primeira banda contém as datas da primeira alteração por pixel e a segunda banda contém as datas da segunda alteração mais antiga por pixel.</div><br><div>Ao aplicar esta função na saída das ferramentas LandTrendr, você pode escolher se deseja extrair a data que marca o início ou o fim de uma alteração usando o parâmetro <strong>Data do Segmento</strong> . Por exemplo, para entender como a alteração mais recente na série de tempo começou, defina o <strong>Tipo de Alteração</strong> para <strong>Hora da última alteração</strong> e a <strong>Data do Segmento</strong> para <strong>Início do segmento</strong>.</div><br><div>Use os seguintes parâmetros de filtragem para extrair datas mais específicas de alterações do seu raster da análise de alteração:</div><ul><li><strong>Filtrar por ano</strong>--Identifique alterações que ocorreram dentro de um período de tempo específico, por exemplo, se você estiver procurando por alterações que ocorreram em uma paisagem durante cinco anos de seca.</li><li><strong>Filtrar por duração</strong>--Identifique alterações que ocorreram ao longo de um determinado intervalo de anos, por exemplo, se você estiver procurando apenas alterações abruptas que ocorreram ao longo de 1 ou 2 anos. Você pode calcular a duração de seu interesse usando a fórmula<strong>ano final - ano inicial +1</strong>. Os intervalo na série de tempo serão incluídos.</li><li><strong>Filtrar por magnitude</strong>--Identifica alterações de uma determinada magnitude, por exemplo, se você estiver procurando apenas grandes alterações no índice de vegetação NDVI. Magnitude é um valor absoluto, portanto, os valores mínimo e máximo não podem ser negativos. Para especificar alteração direcional, use o parâmetro <strong>Alterar Direção</strong> .</li></ul>",
		distanceAccumulationName: "Acumulação de Distância",
		distanceAccumulationSnip: "Calcula a distância acumulada de cada célula para origens, permitindo distância de linha direta, distância de custo, distância de superfície verdadeira, como também fatores de custo vertical e horizontal.",
		distanceAccumulationDesc: "Acumulação de Distância calcula a distância para cada localização na área de estudo para a origem mais próxima ou de menos custo. Se somente as origens forem fornecidas para entrada, então uma distância de linha reta é calculada para cada localização na área de estudo. Se ambas as origens e barreiras forem utilizadas como entrada, então Acumulação de Distância calcula a distância de linha reta ao redor de barreiras. Para ambos raster de origem e o raster de barreira, o valor de plano de fundo deve ser NoData, enquanto origens e barreiras são representadas com valores de célula válidos. Os valores válidos incluem zero. <div><br/>Quando um raster de superfície for fornecido como entrada, então a distância de superfície real entre as células será calculada. Para executar análise de custo utilizando Acumulação de Distância, uma superfície de custo é precisado. Se uma superfície de custo for fornecida, o resultado será um raster de distância de custo acumulado. Quando fatores horizontais e verticais são fornecidos, então a direcionalidade é considerada conforme o custo é acumulado. Há quatro características de origem que podem ser utilizadas. Estas características, que pode ser da origem ou movedores a partir da origem, são controlados por parâmetros específicos: 1. Acumulação inicial: define o custo inicial antes do movimento iniciar. 2. Acumulação máxima: especifica quanto o custo de uma fonte pode acumular antes de alcançar seu limite. 3. Multiplicador para aplicar aos custos: especifica o modo de viagem ou magnitude na origem. 4. A direção de viagem: identifica se o transportador está iniciando em uma origem e mudando para localizações de não origem, ou está iniciando em localizações de não origem e movendo de volta para uma origem.<div><br/>Por padrão, o resultado da Acumulação de Distância é uma banda única, que é o raster de acumulação de distância. Entretanto, uma segunda banda também pode ser criada, a banda de direção de volta.  Esta banda indica cada localização na área de estudo, que direção seguir para obter a origem de menor custo.  Ambas as bandas serão necessárias para determinar caminhos favoráveis dentro da área de estudo. Para gerar um caminho, primeiro utilize a função Extrair Banda para extrair o raster de acumulação de distância e o raster de direção de volta. Utilize estas camadas como entrada para a função Caminho de Custo. Na função, utilize o raster de acumulação de distância como entrada do Raster da Distância de Custo e o raster de direção de volta como a entrada do Raster de Vínculo de Retorno de Custo.</div>",
		distanceAllocationName: "Alocação de Distância",
		distanceAllocationSnip: "Calcula a alocação de distância de cada célula para origens fornecidas com base em distância de linha direta, distância de custo, distância de superfície verdadeira, como também fatores de custo vertical e horizontal.",
		distanceAllocationDesc: "Alocação de Distância calcula qual origem cada localização na área de estudo é alocado. Se somente as origens forem fornecidas para entrada, então as localizações são alocadas utilizando uma distância de linha reta para a origem mais próxima. Se ambas as origens e barreiras forem utilizadas como entrada, então Alocação de Distância calcula a distância de linha reta ao redor de barreiras para determinar qual origem uma localização está alocada. Para ambos raster de origem e o raster de barreira, o valor de plano de fundo deve ser NoData, enquanto origens e barreiras são representadas com valores de célula válidos. Os valores válidos incluem zero.<div><br/>Para executar análise de custo utilizando Alocação de Distância, uma superfície de custo é precisado. Se uma superfície de custo for fornecida, então o resultado será um raster de alocação baseado em custo acumulativo, não em uma distância de linha reta. Quando fatores horizontais e verticais são fornecidos, então a direcionalidade é considerada conforme o custo é acumulado. Quando um raster de superfície for fornecido como entrada, então a distância de superfície real coberta ao passar entre células é calculado quando a alocação for determinada. Há quatro características de origem que podem ser utilizadas. Estas características, que pode ser da origem ou movedores a partir da origem, são controlados por parâmetros específicos: 1. Acumulação inicial: define o custo inicial antes do movimento iniciar. 2. Acumulação máxima: especifica quanto o custo de uma fonte pode acumular antes de alcançar seu limite. 3. Multiplicador para aplicar aos custos: especifica o modo de viagem ou magnitude na origem. 4. A direção de viagem: identifica se o transportador está iniciando em uma origem e mudando para localizações de não origem, ou está iniciando em localizações de não origem e movendo de volta para uma origem.<div><br/>Por padrão, o resultado da Alocação de Distância é uma banda única, que é o raster de alocação de distância. Marcar a opção Booleano, Gerar linha e coluna de origem como bandas adicionais na saída resultará em um raster de bandas múltiplas consistindo em três bandas. A primeira banda é a banda de alocação de distância, a segunda banda contém um índice de linha e a terceira banda contém um índice de coluna. Estes índices identificam o local da célula de origem que é a menor distância de custo acumulada. O índice de linha de origem e índice de coluna de origem pode ser utilizado junto para executar o mapeamento de intensidade. Se você consultar qualquer localização em sua área de estudo através das bandas duas e três, você saberá a linha e coluna da origem de menor custo para esta localização.</div>",
		eucBackDirectionName: "Direção Euclidiana de Retorno",
		eucBackDirectionSnip: "Calcula, para cada célula, a direção, em graus, até a célula vizinha ao longo do caminho mais curto de volta à fonte mais próxima, evitando barreiras.",
		eucBackDirectionDesc: "A função Direção de Volta Euclideana resulta em um raster de ponto flutuante contínuo que representa a direção em graus de volta para a origem mais próxima enquanto evita barreiras, se barreiras forem fornecidas.<div><br/>As entradas para Direção de Volta Euclideana são a origem que a direção será calculada. Uma entrada opcional é um raster que representa barreiras dentro da área de estudo. Para ambos raster de origem e o raster de barreira, o valor de plano de fundo deve ser NoData, enquanto origens e barreiras são representadas com valores válidos. Os valores válidos incluem zero. Por padrão, o cálculo irá processar na extensão combinada das origens e barreiras, mais 2 linhas e colunas. Se a análise for somente necessária dentro de uma distância especificada a partir das origens, então o parâmetro Distância Máxima pode ser utilizada. Direção de Volta Euclideana suporta ambos um método Plano e um método Geodésico no cálculo. O cálculo do método Planar será executado em um plano projetado utilizando um sistema de coordenadas Cartesianas 2D. O cálculo de método Geodésico será executado no elipsóide, o qual significa que não importando a projeção de entrada ou saída, os resultados não alteram.<div><br/>O resultado da função Direção de Volta Euclideana pode ser utilizado junto com o resultado da função Distância Euclideana para determinar os menores caminhos de localizações dentro da área de estudo de volta para a origem. Ambos os resultados de Direção de Volta Euclideana e Distância Euclideana são utilizadas na função Caminho de Custo junto com destinos para gerar os menores caminhos.</div>",
		expandName: "Expandir",
		expandSnip: "Expande zonas selecionadas de um raster por zonas, por um número de células específico.",
		expandDesc: "Com a função global Expandir, você pode generalizar ou simplificar rasters criando zonas particulares maiores. Você também pode controlar a quantia de generalização que ocorrerá.<div><br/>As zonas que você seleciona aumentará em tamanho expandindo em outras zonas. Conceitualmente, os Valores de Zona selecionados podem ser visualizados como zonas de primeiro plano, enquanto os outros valores permanecem zonas de plano de fundo. As zonas de primeiro plano podem expandir nas zonas de plano de fundo.<div><br/>A quantia de generalização pode ser controlada com o parâmetro Número de Células. Por padrão, este valor é 1, que significa que as zonas selecionadas expandirá pela quantia correspondendo para um tamanho da célula. Para aumentar o grau de generalização, você pode especificar um valor maior para este parâmetro. Conceitualmente, é como executar a ferramenta tantos quanto o número especificado, com os resultados dos anteriores na execução sendo a entrada na interação subsequente.</div>",
		trendAnalysisName: "Gerar Tendência",
		trendAnalysisSnip: "Estima a tendência de cada pixel ao longo de uma dimensão para um ou mais variáveis em um raster multidimensional.",
		trendAnalysisDesc: "<div>Esta função pode ser usada para ajustar os dados ao longo de uma linha de tendência linear, harmônica ou polinomial, ou pode ser usada para realizar a detecção de tendência usando o teste de Mann-Kendall ou Sazonal-Kendall.</div><br><div>O raster de tendência de saída gerado com esta função é usado como entrada para a função <strong>Prever Utilizando Tendência</strong> .</div><br><div>Os testes de Mann-Kendall e Seasonal-Kendall são usados para determinar se há uma tendência monotônica nos dados. Eles são não paramétricos, o que significa que não assumem uma distribuição específica de dados. O teste de Mann-Kendall não considera correlação serial ou efeitos sazonais. Se os dados forem sazonais, o teste de Sazonal-Kendall será mais apropriado.</div><br><div>Se a ferramenta for usada para realizar o teste de Mann-Kendall ou Sazonal-Kendall, a saída será um raster de cinco bandas como segue:</div><ul><li>Banda 1 = declividade de Sen</li><li>Banda 2 = valor p</li><li>Banda 3 = pontuação (S) de Mann-Kendall</li><li>Banda 4 = Variância S</li><li>Banda 4 = Variância S</li><li>Banda 5 = pontuação Z</li></ul><div>As saídas do teste de Mann-Kendall ou Sazonal-Kendall podem ser usadas para determinar quais pixels em sua série de tempo multidimensional têm uma tendência estatisticamente significativa. Você pode usar estas informações em conjunto com a análise de tendência linear, harmônica ou polinomial para extrair tendências significativas em sua série de tempo. Você pode gerar uma máscara incluindo pixels com valores p significativos, aplicar a máscara ao raster multidimensional e usar este raster multidimensional mascarado como entrada para a ferramenta para realizar análises de tendência linear, harmônica ou polinomial.</div><br><div>Há três opções de linha de tendência para ajustar uma tendência aos valores de variáveis ao longo de uma dimensão: linear, polinomial e harmônico.</div><br><div>Para análise de tendência linear, a saída é um raster de três bandas como segue:</div><ul><li>Banda 1 = Declividade</li><li>Banda 2 = Interceptar</li><li>Banda 3 = Erro Médio Quadrático (RMSE) ou o erro em torno da linha de melhor ajuste</li></ul><div>Para análise de tendência polinomial, o número de bandas na saída depende da ordem polinomial. O ajuste polinomial de segunda ordem produz um raster de quatro bandas como segue:</div><ul><li>Banda 1 = Polynomial_2</li><li>Banda 2 = Polynomial_1</li><li>Banda 3 = Polynomial_0</li><li>Banda 4 = RMSE</li></ul><div>O ajuste polinomial de terceira ordem produz um raster de cinco bandas como segue:</div><ul><li>Banda 1 = Polynomial_3</li><li>Banda 2 = Polynomial_2</li><li>Banda 3 = Polynomial_1</li><li>Banda 4 = Polynomial_0</li><li>Banda 5 = RMSE</li></ul><div>Para análise de tendência harmônica, o número de bandas na saída depende da frequência harmônica. Quando a frequência é definida como 1, a saída é um raster de cinco bandas como segue:</div><ul><li>Banda 1 = Declividade</li><li>Banda 2 = Interceptar</li><li>Banda 3 = Harmonic_sin1</li><li>Banda 4 = Harmonic_cos1</li><li>Banda 5 = RMSE</li></ul><div>Quando a frequência é definida como 2, a saída é um raster de sete bandas como segue:</div><ul><li>Banda 1 = Declividade</li><li>Banda 2 = Interceptar</li><li>Banda 3 = Harmonic_sin1</li><li>Banda 4 = Harmonic_cos1</li><li>Banda 5 = Harmonic_sin2</li><li>Banda 6 = Harmonic_cos2</li><li>Banda 7 = RMSE</li></ul><div>O parâmetro <strong>Comprimento do Ciclo</strong> para análise de tendência harmônica é usado para indicar o número e a duração dos ciclos que você espera visualizar em seus dados ao longo de um dia ou ano. Por exemplo, se você espera que seus dados passem por dois ciclos de variação em um ano, a duração do ciclo será de 182.5 dias ou 0.5 anos. Se você tiver dados de temperatura coletados a cada três horas e houver um ciclo de variação por dia, a duração do ciclo será de um dia.</div><br><div>O parâmetro <strong>Frequência</strong> para análise de tendência harmônica é usado para descrever o modelo harmônico para se ajustar aos dados. Se a frequência for definida como 1, uma combinação da curva linear e da curva harmônica de primeira ordem será usada para ajustar o modelo. Se a frequência for 2, uma combinação de curva harmônica linear de primeira ordem e curva harmônica de segunda ordem será usada para ajustar os dados. Se a frequência for 3, uma curva harmônica de terceira ordem adicional será usada para modelar os dados, e assim por diante.</div><br><div>As estatísticas de ajuste perfeito do modelo podem ser geradas como saídas opcionais. A raiz do erro quadrático médio (RMSE), R-quadrado e o valor p da inclinação da tendência podem ser calculados e simbolizados. Simbolize a camada de raster de tendência de saída usando a simbologia <strong>RGB</strong> e especifique as estatísticas como as bandas vermelha, verde e azul.</div><br>",
		spectralUnmixingName: "Separar Linear Espectral",
		spectralUnmixingSnip: "Executa classificação de subpixel e calcula a abundância fracionária de tipos de cobertura de solo diferentes para pixels individuais.",
		spectralUnmixingDesc: "A função Separar Linear Espectral calcula a cobertura fracionária de pixels individuais que contenham tipos de cobertura de solo múltiplos. Ela gera uma camada de bandas múltiplas, onde cada banda corresponde à abundância fracionária de cada classe de cobertura de solo. Por exemplo, você pode utilizá-la to executar classificação de cobertura de solo em uma imagem multiespectral para identificar vegetação fotossintética, solo bruto e vegetação morta ou não fotossintética.<div><br/>A ordem do raster de bandas múltiplas de saída segue a ordem do perfil de entrada espectral. O número de classes não pode exceder o número de bandas no raster de entrada. Por exemplo, você não pode extrair informações sobre mais de 8 classes de raster de 8-bandas.</div>",
		multidimensionalFilterName: "Filtro Multidimensional",
		interpolateRasterByDimensionFunctionName: "Interpolar Raster por Dimensão",
		interpolateRasterByDimensionFunctionSnip: "Interpola um raster multidimensional em valores de dimensão especificados usando divisões adjacentes.",
		interpolateRasterByDimensionFunctionDesc: "<p>Esta função permite estimar valores de pixel para uma divisão de dimensão indefinida em um raster multidimensional. Por exemplo, se você tem um conjunto de dados contendo a temperatura do oceano ao nível da superfície e a 100 metros abaixo do nível do mar e deseja estimar a temperatura a 50 metros abaixo do nível do mar, você pode usar esta função para obter uma estimativa nessa profundidade usando o botão Por definição de dimensão de valores.</p><p>Você também pode reduzir a amostra de um conjunto de dados mensal em um conjunto de dados diário usando a definição de dimensão Por intervalo e especificando o valor do parâmetro Etapa como 1 e o valor do parâmetro Unidade como Dias.</p><p>Use a opção Definição de dimensão por Raster de Destino para estimar o valor do Raster de Destino.</p>",
		multidimensionalFilterSnip: "Cria uma camada raster a partir de um conjunto de dados raster multidimensional ou camada raster multidimensional dividindo os dados ao longo de variáveis e dimensões definidas.",
		multidimensionalFilterDesc: "O Filtro Multidimensional cria uma camada raster multidimensional filtrando e extraindo um subconjunto de variáveis de um raster multidimensional. Por exemplo, você tem um conjunto de dados multidimensional que contém 30 anos de dados de precipitação mensal e deseja extrair dados de cada Janeiro para verificar como a precipitação foi alterada para este mês.<div><br/>Utilize o parâmetro Definição de Dimensão para dividir dimensões utilizando um intervalo, um valor ou um intervalo de valores. Por exemplo, se você tiver 10 anos de dados de salinidade do oceano, coletados mensalmente e a cada 2 metros de profundidade até 500 metros, poderá utilizar as diferentes opções da definição de dimensão para os seguintes cenários. Cenário 1: Extrair dados de salinidade para o mês de Janeiro durante o período de 10 anos. Escolha Por Valores, defina Dimensão para StdTime e defina Valores para Janeiro. Cenário 2: Dividir dados de salinidade em um intervalo de profundidade de 0 a 150 metros. Escolha Por Intervalos, defina Dimensão para StdZ e defina Valor Mínimo para -150 e Valor Máximo para 0. Cenário 3: Extrair dados de salinidade dos 10 primeiros dias de cada Janeiro, durante um período de 10 anos. Escolha Por Iteração, defina Dimensão para StdTime, defina o Início da primeira iteração e Término da primeira iteração para o início e o término correspondentes do período da iteração, defina Etapa para 1 e defina Unidade para Anos.</div>",
		multidimensionalRasterName: "Raster Multidimensional",
		multidimensionalRasterSnip: "Adiciona dados multidimensionais a um mapa como uma camada raster multidimensional.",
		multidimensionalRasterDesc: "A função Raster Multidimensional adiciona dados multidimensionais a um mapa como uma camada multidimensional. Essa função é útil ao executar fluxos de trabalho da análise de raster utilizando uma cadeia de funções.<div><br/>Os conjuntos de dados raster multidimensionais suportados incluem netCDF, GRIB, HDF e CRF da Esri. Conjuntos de dados de mosaico multidimensionais também são suportados.</div>",
		optimalPathAsRasterName: "Caminho Favorável como Raster",
		optimalPathAsRasterSnip: "Calcula o caminho de menor custo da origem até o destino.",
		optimalPathAsRasterDesc: "Esta função global produz um raster de saída que registra o caminho favorável ou caminhos de localizações selecionadas para a célula de origem mais próxima definida dentro da superfície de custo acumulativo, em termos de distância de custo.<div><br/>Uma ou mais funções de custo ponderado (Acumulação de Distância ou Alocação de Distância) são geralmente exigidas antes de executar a função Caminho Favorável como função Raster para criar a acumulação da distância de entrada e os rasters da direção de retorno. Estas são camadas raster de entrada obrigatórias para a função Caminho Favorável. Os valores no caminho favorável de saída representam o número de caminhos em um determinado local. Em muitos casos, os caminhos seguem a mesma rota, deixando uma fonte e então divergindo para ir até diferentes destinos. Por exemplo, o valor de um indica que existe somente um caminho favorável em um determinado local, enquanto um valor de cinco significa que neste local há cinco caminhos favoráveis passando por esta célula na área de estudo.<div><br/>Os dados de destino de entrada devem ser uma camada raster. O conjunto de células de destino consiste em todas as células no raster de entrada que tem valores válidos. As células com valores NoData não são incluídas no conjunto. O valor de zero é considerado um destino legítimo. Um raster de destino pode ser criado utilizando as ferramentas de extração. Se você tiver feições de origem ou destino, poderá convertê-las em raster utilizando a função Rasterizar Feições. Utilize o raster de acumulação de distância ou direção de volta como entrada do Raster para a função de rasterização. Isto garantirá que a feição seja rasterizada utilizando o mesmo tamanho de célula, extensão e referência espacial que os outros rasters que entram na função Caminho Favorável como Raster. A função Caminho Favorável como Raster também pode ser utilizada para derivar o caminho de menor resistência em um modelo de elevação digital (DEM). Neste caso, utilize o DEM para o raster de acumulação da distância de entrada e a saída da função Direção do Fluxo para o Raster da direção de volta.</div>",
		trendName: "Prever Utilizando Tendência",
		trendSnip: "Calcula uma camada raster multidimensional prevista utilizando o raster de tendência de saída da função Gerar Tendência ou da ferramenta de geoprocessamento Gerar Raster de Tendência.",
		trendDesc: "A função Prever Utilizando Tendência calcula uma camada raster multidimensional prevista utilizando o raster de tendência de saída da função Gerar Tendência ou da ferramenta de geoprocessamento Gerar Raster de Tendência.",
		rasterCollectionName: "Processar Coleção de Raster",
		rasterCollectionSnip: "Processa cada parte de um raster multidimensional ou cada item em um raster de mosaico. Esta função também pode agregar divisões múltiplas em uma divisão única.",
		rasterCollectionDesc: "A função Processar Coleção de Raster processa cada parte em um raster multidimensional ou cada item em um raster de mosaico. Esta função também pode agregar divisões múltiplas em uma divisão única.<div><br/>Esta função processa cada parte no raster multidimensional ou raster de mosaico utilizando um modelo de função do raster. Esta função suporta as seguintes opções: 1. Especificar um modelo de função raster para Função Item. Por exemplo, você tem um conjunto de dados de mosaico que contém 20 anos de imagens do Landsat e deseja calcular o NDVI para cada cena na série temporal. Para Função Item, especifique um modelo de função do raster que contenha a função de raster do NDVI. Especificar um modelo de função do raster para a Função Agregação. Por exemplo, você tem um raster multidimensional que contém 10 anos de dados diários de temperatura e deseja calcular a temperatura máxima para cada ano. Na Função Agregação, especifique um modelo de função do raster que contenha a função Estatísticas da Célula, com a operação definida como Máximo. Em Definição de Agregação, defina Dimensão para StdTime, defina Tipo para Palavra-Chave do Intervalo e defina o Intervalo da Palavras-Chave para Anual. Note que, se o conjunto de dados de mosaico de entrada não for multidimensional, a função de agregação não respeitará a definição de agregação. A função de agregação agregará todos os itens ou cada grupo em um, se eles estiverem definidos no modelo de função de agregação. Para mais informações sobre o uso de grupos em um conjunto de dados de mosaico, consulte Utilizando itens do conjunto de dados de mosaico em modelos de função do raster. Especificar um modelo de função do raster para a Função Processamento. A função ou cadeia de funções neste modelo é utilizada para exibir o novo raster processado. Por exemplo, especifique um modelo de função do raster que contenha a função Mapa de Cores para alterar como a camada raster processada é exibida. Note que, se a entrada for um raster multidimensional, a função de processamento será aplicada à parte de exibição atual. Se a entrada for uma camada ou conjunto de dados de mosaico, a função de processamento será aplicada ao raster de mosaico utilizando o método Primeiro para resolver sobreposições. 3. Especificar modelos para qualquer combinação das três funções. Por exemplo, você tem um conjunto de dados de mosaico que contém imagens do Landsat de séries temporais e deseja gerar uma imagem composta com o máximo de NDVI. Para Função Item, especifique um modelo de função do raster que contenha a função de raster do NDVI. Para a Função Agregação, especifique um modelo de função do raster que contenha a função Estatísticas da Célula, com a operação definida para Máximo. Para a Função Processamento, especifique um modelo de função do raster que contenha a função Mapa de Cores. Note que a ordem de processamento da função segue a ordem dos parâmetros de entrada. Por exemplo, a Função Item será processada primeiro.</div>",
		randomName: "Aleatório",
		randomSnip: "Cria um raster com valores de pixel aleatórios extraídos de uma distribuição pseudo-aleatória. Diversas distribuições e geradores de números aleatórios são suportados.",
		randomDesc: "A função Aleatório cria um raster com valores de pixel aleatórios que podem ser utilizados em modelos de função do raster ou conjuntos de dados de mosaico.<div><br/>Embora muitas funções funcionem em uma ou mais fontes de entrada, a função Aleatório não exige um raster de entrada. Isto significa que ele se comporta mais como um conjunto de dados raster do que como uma função, portanto, deve-se tomar cuidado especial ao adicioná-lo ou removê-lo da cadeia de funções.</div>",
		shrinkName: "Reduzir",
		shrinkSnip: "Diminui as zonas selecionadas por um número especificado de células substituindo-as com o valor da célula que é mais frequente em sua vizinhança.",
		shrinkDesc: "Com a função global Reduzir, você pode generalizar ou simplificar rasters, diminuindo zonas específicas. Você também pode controlar a quantia de generalização que ocorrerá.<div><br/>As zonas que você seleciona encolherão ou reduzirão de tamanho, fazendo com que as células das zonas circundantes se expandam para elas. Conceitualmente, os Valores de Zona selecionados podem ser visualizados como zonas de primeiro plano, enquanto os outros valores permanecem zonas de plano de fundo. As células nas zonas de primeiro plano podem ser substituídas por células nas zonas de segundo plano. Ilhas finas dentro de uma zona, que podem ser visualizadas como limites de compartilhamento com a zona, também podem ser substituídas.<div><br/>A quantia de generalização pode ser controlada com o parâmetro Número de Células. Por padrão, este valor é 1, o que significa que as zonas selecionadas serão reduzidas pela quantidade correspondente ao tamanho de uma célula. Para aumentar o grau de generalização, você pode especificar um valor maior para este parâmetro. Conceitualmente, é como executar a ferramenta tantos quanto o número especificado, com os resultados dos anteriores na execução sendo a entrada na interação subsequente.</div>",
		trendToRGBName: "Tendência para RGB",
		trendToRGBSnip: "Converte um raster de tendência em um raster de três bandas (vermelho, verde e azul).",
		trendToRGBDesc: "A função Tendência para RGB converte um raster de tendência para um raster de três bandas (vermelho, verde e azul). O raster de tendência é gerado a partir da função do raster Gerar Tendência ou da função do raster Análise de CCDC.<div><br/>Esta função é útil para visualizar dados de coeficiente do modelo a partir da função Gerar Tendência ou da função Análise de CCDC. Ambas as funções estimam tendências na alteração dos valores de pixel, mas os resultados das funções são difíceis de interpretar diretamente.<div><br/>Como muitas funções do raster, talvez seja necessário utilizar o Ajuste de Intervalo Dinâmico (DRA) para exibir melhor os resultados desta função.</div>",
		landTrendrName: "Análise LandTrendr",
		landTrendrSnip: "Avalia alterações em valores de pixel com o passar do tempo usando a detecção de tendências baseada em Landsat no metódo de perturbação e recuperação (LandTrendr) e gera um raster de análise de alteração contendo os resultados do modelo.",
		landTrendrDesc: "Esta função do raster pode ser usada somente como entrada para a função do raster Detectar Alteração Utilizando Análise de Alteração. Para gerar uma saída de raster, conecte a função Análise de LandTrendr à função Detectar Alteração Utilizando Análise de Alteração em um modelo de função do raster e use o modelo como entrada na ferramenta de geoprocessamento Gerar Raster de Função do Raster. O resultado é um raster contendo informações sobre o momento no qual os valores de pixel mudaram.<div><br>O objetivo desta função do raster é extrair alterações em uma feição observada, de modo que a imagem multidimensional de entrada ideal deve capturar uma observação consistente ao longo do tempo e não deve incluir interferências atmosféricas ou de sensores, nuvens ou sombra de nuvem. A melhor prática é usar dados que foram normalizados e podem ser mascarados usando uma banda de QA, por exemplo, produtos Landsat Collection 1 Surface Reflectance com uma máscara de nuvem.<div><br>A função executa a análise em uma imagem por ano, e o número de divisões anuais deve ser igual ou maior que o valor especificado no parâmetro <strong>Número Mínimo de Observações</strong> . É recomendado que você tenha pelo menos seis anos de dados.<div><br>Se você tiver dados mensais, semanais ou diários, é recomendado que você selecione várias imagens de cada ano (de preferência da mesma estação), remova nuvens e sombras de nuvens e combine as imagens para gerar uma única imagem que capture bem a observação. Se dados mensais, semanais ou diários forem fornecidos como raster multidimensional de entrada, a função identificará uma divisão para análise com base na data mais próxima daquela fornecida no parâmetro <strong>Ajustar Data</strong> .<div><br>Uma feição em uma paisagem geralmente leva tempo para se recuperar de uma mudança não permanente, como um incêndio florestal ou uma infestação de insetos. Para controlar a taxa de recuperação reconhecida pelo modelo, defina o parâmetro Limite de Recuperação. Um segmento distinto não pode ter uma taxa de recuperação mais rápida do que 1/limite de recuperação.<div><br>A recuperação de uma mudança na paisagem pode ocorrer na direção positiva ou negativa. Por exemplo, quando uma paisagem sofre perda de floresta, uma série temporal de valores do índice de vegetação mostra uma queda nos valores de índice e a recuperação mostra um aumento gradual nos valores do índice de vegetação ou uma tendência de recuperação positiva. Especifique a direção da tendência de recuperação com o parâmetro<strong>A Recuperação Tem Tendência de Aumentar</strong> .",
		aggregateMultidimensionalName: "Agregar Multidimensional",
		aggregateMultidimensionalSnip: "Combina dados de variável do raster multidimensional existentes ao longo de uma dimensão.",
		aggregateMultidimensionalDesc: "A função Agregar Multidimensional cria uma camada de raster multidimensional combinando dados da variável de raster multidimensional existentes ao longo de uma dimensão.<div><br>Use o <strong>parâmetro Definição da Dimensão</strong> para filtrar primeiro os dados de entrada que deseja agregar. Por exemplo, se você tiver 30 anos de dados mensais, mas deseja criar apenas uma camada agregada para os primeiros 15 anos, poderá usar o parâmetro <strong>Definição da Dimensão</strong> para especificar os anos para incluir na análise.<div><br><ul><li>Extraia os dados de salinidade do mês de Janeiro durante o período de 10 anos. Escolha <strong>Por Valores</strong>, defina <strong>Dimensão</strong> para <strong>StdTime</strong>, e defina <strong>Valores</strong>para <strong>Janeiro</strong>.</li><li>Divida os dados de salinidade em uma faixa de profundidade de 0 a 150 metros. Escolha <strong>Por Intervalos</strong>, defina <strong>Dimensão</strong> para <strong>StdZ</strong>, e defina <strong>Valor Mínimo</strong> para <strong>-150</strong> e <strong>Valor Máximo</strong> para <strong>0</strong>.</li><li>Extraia dados de salinidade para os primeiros 10 dias de cada Janeiro durante um período de 10 anos. Escolha <strong>Por Interação</strong>, defina <strong>Dimensão</strong> para <strong>StdTime</strong>, defina <strong>Começo da primeiro iteração</strong> e <strong>Final da primeiro iteração</strong> para o início e fim correspondentes do período de iteração, defina <strong>Etapa</strong> para <strong>1</strong>, e defina <strong>Unidade</strong> para <strong>Anos</strong>.</li></ul><div><br>Use o parâmetro <strong>Definição de Agregação</strong> para escolher a dimensão a ser avaliada e o intervalo de agregação usando uma palavra-chave, um valor ou um intervalo de valores. Por exemplo, se você tiver 30 anos de dados de temperatura da superfície do mar, coletados diariamente e a cada 5 metros de profundidade até 100 metros, poderá usar as diferentes opções de intervalo para os seguintes cenários: <div><br><ul><li>Agregue dados diários de temperatura em dados mensais, onde o resultado é um raster multidimensional com 12 divisões de tempo, e cada divisão é o agregado de cada mês ao longo dos anos. Escolha <strong>Palavra-Chave de Intervalo</strong> e defina a palavra-chave para <strong>Mensal Recorrente</strong>.</li><li>Agregue dados de temperatura diários em dados mensais, onde o resultado é um raster multidimensional com 360 divisões, ou 12 divisões de tempo por ano (30 anos x 12 meses = 360 divisões). Escolha <strong>Palavra-Chave de Intervalo</strong> e defina a palavra-chave para <strong>Mensal</strong>.</li><li>Agregue dados de temperatura mensais em intervalos de 4 meses. Escolha <strong>Valor de Intervalo</strong> defina <strong>Intervalo de Valor</strong> para 4 e defina <strong>Unidade</strong> para <strong>Meses</strong>.</li><li>Agregue dados de temperatura de 0 a 25 metros, então de 25 a 50 metros, então de 50 a 100 metros. Escolha <strong>Faixas de Intervalos</strong> e especifique as profundidades mínima e máxima como <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Juntar Rasters",
		mergeRastersSnip: "Combina múltiplos conjunto de dados raster espacialmente ou em todas as variáveis e dimensões.",
		mergeRastersDesc: "Esta função cria um raster mesclado de uma lista de raster. Por exemplo, se você tiver um conjunto de dados de mosaico que contenha 30 anos de dados mensais de precipitação e outro conjunto de dados com 10 anos de dados mensais de temperatura, poderá combiná-los em um raster multidimensional com ambas as variáveis. <div><br>Se os rasters multidimensionais de entrada tiverem variáveis diferentes, o raster multidimensional de saída conterá todas as variáveis. <div><br>Se os raster multidimensionais de entrada tiverem dimensões ou valores de dimensão diferentes, o raster multidimensional de saída incluirá todas as dimensões e valores de dimensão. <div><br>Se os rasters multidimensionais de entrada tiverem as mesmas dimensões e variáveis, mas diferentes extensões espaciais, o raster multidimensional de saída incluirá as variáveis e dimensões nas extensões espaciais mescladas.<div><br>Esta função também pode ser usada quando você tiver vários rasters que deseja que sejam tratados como um único item, como calcular as mesmas estatísticas para todos, ou ao balancear cores, de forma que não seja necessário balancear cada imagem separadamente. Isto é útil ao trabalhar com imagens armazenadas como mosaicos separados devido a restrições de tamanho do arquivo; desta forma, os mosaicos serão tratados como parte da mesma imagem.",
		boundaryCleanName: "Limpar Limites",
		boundaryCleanSnip: "Suaviza o limite entre as zonas.",
		boundaryCleanDesc: "<p>A função generaliza ou simplifica os rasters suavizando os limites entre as zonas. A função fornece opções para controlar como as células das zonas na entrada influenciam a suavização e a quantidade de suavização que será aplicada. Cada célula de entrada é avaliada usando seus oito vizinhos imediatos.</p><p>O processo de suavização primeiro classifica as células vizinhas por uma prioridade em particular. A prioridade determina qual zona das células vizinhas pode substituir o valor da célula de processamento na saída.</p><p>A prioridade pode ser baseada no valor das zonas ou no tamanho das zonas. O parâmetro <strong>Tipo de classificação</strong> determina o tipo de classificação a ser usado. </p><p>A configuração padrão <strong>Não classificar</strong> avalia a prioridade com base no valor das zonas. Células de zonas com valores maiores terão uma prioridade mais alta para expandir em zonas com valores menores.</p><p>O tamanho ou área total, das zonas pode ser usado para classificar a prioridade. Com a configuração <strong>Decrescente</strong> , as zonas são classificadas por tamanho em ordem decrescente. As zonas com total de áreas maiores terão a prioridade de expansão para zonas com áreas menores. Com a configuração <strong>Ascendente</strong> , o oposto é verdadeiro: zonas com o total de áreas menores terão a prioridade de expansão em zonas com o total de áreas maiores.</p><p>A quantidade de suavização é controlada pelo parâmetro <strong>Executar expansão e redução duas vezes</strong> , que determina o número de vezes que o processo de expansão e redução será realizado.</p><p>Com a configuração desmarcada, o processo de expandir e reduzir é executado uma vez. Com a configuração marcada, o processo de expandir e reduzir é executado duas vezes, resultando em um grau adicional de suavização dos limites da zona.</p><p>Se os valores de todas as oito células vizinhas forem iguais aos da célula de processamento, a célula de saída manterá o valor da célula de entrada.</p>",
		predictUsingRegressionName: "Prever utilizando Regressão",
		predictUsingRegressionSnip: "Calcula um raster previsto com base em entradas de dados raster e um modelo de regressão. O modelo de regressão é a saída da ferramenta de geoprocessamento do raster <strong>Treinar Modelo de Regressão de Árvores Aleatórias</strong>.",
		predictUsingRegressionDesc: "<p>O modelo de regressão é definido em um arquivo da definição de regressão da Esri (.ecd). Ele contém todas as informações para um conjunto de dados específico ou um conjunto de conjuntos de dados, e o modelo de regressão, e é gerado pela ferramenta de geoprocessamento do raster <strong>Treinar Modelo de Regressão de Árvores Aleatórias</strong>.</p><p>A entrada pode ser uma única banda, múltiplas bandas, ou um raster multidimensional, ou uma lista destes tipos. Os tipos de raster de entrada devem ser o mesmo tipo de raster treinado pelo modelo de regressão.</p><ul><li>Quando a entrada é um raster de múltipls bandas, cada banda é tratada como uma variável preditora. As bandas devem estar na mesma ordem que a entrada de múltiplas bandas para a ferramenta de treinamento do modelo de regressão. </li><li>Quando a entrada é um raster multidimensional, cada variável é tratada como uma variável preditora e a variável deve ser uma banda única e ter uma dimensão de tempo. Os nomes e a ordem da variável devem ser os mesmos da entrada quando o modelo de regressão foi treinado. A saída é um raster multidimensional.</li><li>A entrada pode ser uma lista de itens. O número e a ordem dos itens devem corresponder à entrada quando o modelo de regressão foi treinado.</li></ul>",
		dimensionalMovingStatisticsName: "Estatística de Movimento Dimensional",
		dimensionalMovingStatisticsSnip: "Calcula estatísticas sobre uma janela móvel em dados multidimensionais ao longo de uma dimensão especificada.",
		dimensionalMovingStatisticsDesc: "<p>A função Estatística de Movimento Dimensional calcula várias estatísticas dentro de uma janela predefinida para todos os valores de dimensão ao longo de uma dimensão. Esta função recebe uma camada raster multidimensional como entrada e cria uma camada raster multidimensional como saída que tem o mesmo tamanho dimensional da camada de entrada.</p><p>Você pode especificar uma dimensão para a qual os valores de dimensão são considerados durante o cálculo. Por padrão, ele calcula ao longo da primeira dimensão não espacial. Você também pode especificar um tamanho de janela especificando os parâmetros Janela de Trás e Janela da Frente.</p><p>Quando o Tipo de Estatística é definido como Percentil, os parâmetros Valor de Percentil e Tipo de Interpolação de Percentual ficam disponíveis. Você pode usar esses parâmetros para especificar o percentil a ser calculado e escolher o tipo de interpolação a ser usado, respectivamente. Quando o Tipo de Estatística é definido como Média Circular, o parâmetro Valor de Quebra Circular fica disponível. O valor de quebra circular é usado para converter um valor linear no intervalo de uma determinada média circular.</p>",
		terrainFlattenFunctionName: "Nivelar Terreno",
		terrainFlattenFunctionSnip: "Corrige os dados do radar de abertura sintética (SAR) de entrada para distorções radiométricas devido à topografia.",
		terrainFlattenFunctionDesc: "<p>A função Nivelar Terreno raster corrige os dados de entrada do radar de abertura sintética (SAR) para distorções radiométricas devido à topografia.</p><p>Os dados do radar de entrada devem primeiro ser calibrados para zero beta. Use a ferramenta Aplicar calibração radiométrica para calibrar os dados do radar para zero beta.</p><p>If the input DEM does not span the entire SAR dataset, the tool will output NoData values for the pixels outside of the DEM extent for gamma nought, sigma nought, scattering area, and geometric distortion outputs. Para a saída da máscara de distorção geométrica, a ferramenta produzirá valores indeterminados para pixels fora da extensão do DEM.</p><p>A entrada DEM deve estar no sistema de coordenadas geográficas WGS 1984 (EPSG:4326).</p>",
		createColorCompositeFunctionName: "Criar Composição de Cores",
		createColorCompositeFunctionSnip: "Cria um raster de três bandas a partir de um conjunto de dados raster multibanda no qual cada banda pode usar um cálculo algébrico com base na álgebra de banda.",
		createColorCompositeFunctionDesc: "<p>A função de raster Criar Composição de Cores cria um raster de três bandas a partir de um conjunto de dados raster multibanda no qual cada banda pode usar um cálculo algébrico baseado em álgebra de banda.</p><p>Ao definir um algoritmo aritmético de banda, você pode inserir uma fórmula algébrica de linha única para cada expressão para criar uma saída multibanda. Os operadores suportados são unários, mais (+), menos (-), vezes (*) e divisão (/).</p><p>Ao usar um ID de banda em uma expressão, identifique a banda prefixando B ou b ao número da banda.</p><p>Uma combinação de banda comum usada para radar de abertura sintética (SAR) em unidades lineares é VV para vermelho, VH para verde e VV/VH para azul. Se os dados de entrada estiverem em decibéis, a combinação de bandas deve ser VV para vermelho, VH para verde e VV-VH para azul.</p>",
		surfaceParametersName: "Parâmetros da Superfície",
		surfaceParametersSnip: "Determina parâmetros de um raster de superfície como aspecto, inclinação e diversos tipos de curvaturas usando métodos geodésicos.",
		surfaceParametersDesc: "<p>A função Parâmetros de Superfície determina parâmetros de um raster de superfície, como aspecto, declividade e vários tipos de curvaturas usando métodos geodésicos.</p><p>Esta função pode ser usada para as seguintes aplicações:</p><ul><li>Calcular aspecto e declividade usando métodos geodésicos.</li><li>Calcular diferentes tipos de curvaturas de um raster de superfície de entrada, por exemplo, <strong>Curvatura tangencial (curva de nível normal)</strong> que caracteriza a convergência topográfica e a divergência de fluxo ao longo da superfície.</li></ul>",
		leastCostCorridorName: "Corredor de Menor Custo",
		leastCostCorridorSnip: "Calcula a soma de dois rasters de distância de custo acumulativo com a opção de aplicar um limite baseado em porcentagem ou custo acumulativo.",
		leastCostCorridorDesc: "<p>Os rasters de entrada devem ser da acumulação de distância e rasters de direção inversa resultantes da função <strong>Acumulação de Distância</strong> ou <strong>Distância-Alocação</strong>. Estes devem ser baseados na distância de custo e as mesmas configurações de parâmetros devem ser usadas ao criar as camadas para cada fonte. Nenhum parâmetro que dependa da direcionalidade (fator horizontal, fator vertical e direção da viagem) deve ser usado na criação desses rasters.</p><p>Os valores no raster do corredor de saída são a soma do custo acumulativo para chegar a um determinado local com as mesmas unidades que os rasters da distância de custo acumulativo de entrada.</p><p>Se um valor de <strong>Limite</strong> especificado for maior que o custo acumulativo máximo quando os dois rasters da acumulação de distância forem somados, o raster do corredor de saída cobrirá a mesma área que os rasters acumulativos de entrada.</p><p>Se um valor de limite especificado for menor que o valor mínimo no raster do corredor, uma mensagem de aviso será retornada e o raster de saída ficará vazio.</p><p>O raster do corredor de saída pode conter células com custos acumulativos ligeiramente maiores que o valor limite. Isso vem dos rasters de direção de volta usando células com custos ligeiramente mais altos do que o limite para conectar células desconectadas ao corredor.</p>",
		geometricMedianName: "Mediana Geométrica",
		geometricMedianSnip: "A função Mediana Geométrica calcula a mediana geométrica entre pixels em uma série temporal de imagens de múltiplas bandas.",
		geometricMedianDesc: "<p>Essa função reduz ruídos e discrepâncias em imagens de séries temporais calculando um pixel geométrico mediano para cada matriz de pixels na pilha de imagens. O algoritmo mantém os relacionamentos espectrais entre as bandas nos espectros de pixels, para que a saída possa ser usada em análises, como índices de vegetação.</p><p>Nuvens e sombras devem ser mascaradas usando a banda de controle de qualidade do conjunto de dados antes de aplicar esta função.</p><p>Se a imagem de entrada for de ponto flutuante, como refletância de superfície com valores entre 0 e 1, um valor épsilon de 0.001 deverá produzir resultados de qualidade.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Tipo do Esquema de Cores",
		colormapName: "Mapa de Cores",
		colormapNameName: "Nome do Mapa de Cores",
		colorRampName: "Rampa de Cores",
		contrastOffsetName: "Deslocamento de Contraste",
		brightnessOffsetName: "Deslocamento de Brilho",
		methodName: "Método",
		bandNamesName: "Nomes de Bandas",
		bandWavelengthsName: "Comprimentos de Onda da Banda",
		bandIdsName: "IDs de Banda",
		missingBandActionName: "Ação da Banda Ausente",
		conversionParametersName: "Parâmetros de Conversão",
		hillshadeTypeName: "Tipo de Relevo Sombreado",
		azimuthName: "Azimute",
		altitudeName: "Altitude",
		slopeTypeName: "Escala",
		zFactorName: "Fator Z",
		PSPowerName: "Potência de Tamanho do Pixel",
		PSZFactorName: "Fator de Tamanho do Pixel",
		removeEdgeEffectName: "Desativar interpolação de pixel do segmento padrão",
		fromUnitName: "Da Unidade",
		toUnitName: "Para Unidade",
		rasterTypeName: "Tipo",
		minName: "Mínimo de Saída",
		maxName: "Máximo de Saída",
		minPercentName: "Porcentagem Mínima de Recorte",
		maxPercentName: "Porcentagem Máxima de Recorte",
		numberOfStandardDeviationName: "Número de desvios padrão",
		sigmoidStrengthLevelName: "Nível de Contraste do Sigmóide",
		estimateStatsHistogramName: "Avaliar Estatística",
		DRAName: "Ajuste de Intervalo Dinâmico",
		statisticsName: "Estatística",
		histogramsName: "Histogramas",
		statisticsHistogramName: "Definir Estatísticas e Histograma",
		computeGammaName: "Gama Automático",
		useGammaName: "Utilizar Gama",
		gammaName: "Gama",
		inputNamesName: "Nomes",
		expressionName: "Expressão",
		cellsizeTypeName: "Tipo de Tamanho da Célula",
		extentTypeName: "Tipo de Extensão",
		classifierDefinitionFileName: "Arquivo de Definição de Entrada",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Raster Verdadeiro",
		falseRasterName: "Raster Falso",
		noDataInterpretationName: "Interpretação de NoData",
		noDataValuesName: "Valores de NoData",
		includedRangesName: "Intervalos Incluídos",
		curvatureTypeName: "Tipo de Curvatura",
		rastersName: "Rasters",
		attributeTableName: "Tabela",
		attributeTableTypeName: "Tipo de Tabela",
		rowsName: "Número de Linhas",
		columnsName: "Número de Colunas",
		kernelName: "Kernel",
		mirrorEdgesName: "Refletir Bordas",
		influencesName: "Influências",
		fieldsName: "Campos",
		remapsName: "Tabela de Remapeamento",
		evalFromName: "Da Escala de Avaliação",
		evalToName: "Para Escala de Avaliação",
		weightsName: "Pesos",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "Raio IDW de Intervalo Curto",
		maxVoidWidthName: "Largura Máxima do Vazio",
		sigmaGaussianName: "Suavização Adaptativa",
		contourTypeName: "Tipo de Contorno",
		zBaseName: "Base Z",
		numberOfContoursName: "Número de Curvas de Nível",
		contourIntervalName: "Intervalo da Curva de Nível",
		nthContourLineInBoldName: "Linha de Curva de Nível Nth em Negrito",
		featureClassName: "Feições de Entrada",
		classIndexFieldName: "Campo",
		resolveOverlapMethodName: "Solucionar Método de Sobreposição",
		resamplingTypeName: "Tipo de Reamostragem",
		inputCellsizeName: "Tamanho da Célula de Entrada",
		outputCellsizeName: "Tamanho da Célula de Saída",
		pointFeatureClassName: "Pontos de Origem",
		maxGrowthRadiusFieldName: "Campo do Raio de Crescimento Máximo",
		similarityThresholdFieldName: "Campo do Limite de Similaridade",
		fillValueFieldName: "Campo do Valor de Preenchimento",
		spectralDetailName: "Detalhe Espectral [1..20]",
		spatialDetailName: "Detalhe Espacial [1..20]",
		minNumPixelsPerSegmentName: "Tamanho Mínimo do Segmento em Pixels",
		boundariesOnlyName: "Somente limites de segmento",
		statisticsTypeName: "Tipo de Estatística",
		fillNoDataOnlyName: "Somente preencher pixels de NoData",
		inputDataTypeName: "Tipo de Dados de Entrada",
		angleReferenceSystemName: "Sistema de Referência do Ângulo",
		outputDataTypeName: "Tipo de Dados de Saída",
		inputSamplePointFeatureClassName: "Amostras de Entrada",
		valueFieldName: "Campo de Valor",
		rasterInfoName: "Info do Raster",
		interpolationMethodName: "Método de Interpolação",
		radiusName: "Proporção",
		radianceGainValuesName: "Ganho de Radiação",
		radianceBiasValuesName: "Bias de Radiância",
		reflectedGainValuesName: "Ganho de Reflectância",
		reflectedBiasValuesName: "Bias de Reflectância",
		sunElevationName: "Elevação do Sol (graus)",
		albedoName: "Albedo",
		scaleFactorName: "Fator de Escala",
		offsetName: "Deslocamento",
		thresholdTypeName: "Tipo de Limite",
		thresholdsName: "Limites",
		undefinedClassName: "Classe Indefinida",
		minValueName: "Mín",
		maxValueName: "Máx",
		operationName: "Operação",
		clippingTypeName: "Tipo de Recorte",
		clippingGeometryName: "Recortando Geometria / Raster",
		extentName: "Extensão de Saída",
		useInputFeatureGeometryName: "Utilizar feições de entrada para recortar geometria",
		remapDefinitionTypeName: "Tipo da Definição de Remapeamento",
		inputRangeName: "Intervalos de Entrada",
		outputValuesName: "Valores de Saída",
		noDataRangeName: "Intervalos de NoData",
		inputFieldName: "Campo de Entrada",
		outputFieldName: "Campo de Saída",
		inputMaxFieldName: "Campo Máximo de Entrada (opcional)",
		remapTableTypeName: "Tipo da Tabela de Remapeamento",
		allowUnmatchedName: "Permitir Valores de Pixels Incomparáveis",
		changeMissingValuesToNoDataName: "Alterar valores ausentes para Nodata",
		visibleBandIDName: "ID da Banda Visível",
		infraredBandIDName: "ID da Banda de InfraVermelho",
		scientificOutputName: "Saída Científica",
		bandIndexesName: "Índices da Banda",
		constantName: "Constante",
		weightName: "Peso",
		minimumName: "Mínimo",
		maximumName: "Máximo",
		sourceDataName: "Raster de Origem",
		sourceFieldName: "Campo de Origem",
		costRasterName: "Raster de Custo",
		maxDistanceName: "Distância Máxima",
		valueRasterName: "Raster de Valor",
		costMultiplierName: "Multiplicador para Aplicar aos Custos",
		startCostName: "Custo Inicial",
		accumCostResistanceRateName: "Taxa de Resistência do Custo Acumulativo",
		capacityName: "Capacidade",
		travelDirectionName: "Direção do Percurso",
		cellSizeName: "Tamanho da Célula",
		populationFieldName: "Campo de Preenchimento",
		areaUnitsName: "Unidades de Área",
		outputValueTypeName: "Valores da Célula de Saída",
		barriersName: "Barreiras de Entrada",
		destinationDataName: "Raster de Destino",
		destinationFieldName: "Campo de Destino",
		pathTypeName: "Tipo de Caminho",
		observerFeaturesName: "Feições do Observador",
		analysisMethodName: "Método de Análise",
		analysisTypeName: "Tipo de Análise",
		verticalErrorName: "Erro Vertical",
		refractivityCoefficientName: "Coeficiente de Refratividade",
		surfaceOffsetName: "Deslocamento de Superfície",
		observerElevationName: "Elevação do Observador",
		observerOffsetName: "Deslocamento do Observador",
		innerRadiusName: "Raio Interno",
		innerRadiusIs3DDistanceName: "O Raio Interno é a Distância 3D",
		outerRadiusName: "Raio Externo",
		outerRadiusIs3DDistanceName: "O Raio Externo é a Distância 3D",
		horizontalStartAngleName: "Ângulo Inicial Horizontal",
		horizontalEndAngleName: "Ângulo Final Horizontal",
		verticalUpperAngleName: "Ângulo Superior Vertical",
		verticalLowerAngleName: "Ângulo Inferior Vertical",
		zoneDataName: "Raster de Zona",
		zoneFieldName: "Campo de Zona",
		ignoreNoDataName: "Ignorar NoData nos cálculos",
		temperatureRasterName: "Raster de Temperatura",
		inTemperatureUnitsName: "Unidades de Temperatura",
		outHeatIndexTemperatureUnitsName: "Unidades do Índice de Aquecimento",
		relativeHumidityRasterName: "Raster de Humidade Relativa",
		outWindChillTemperatureUnitsName: "Unidades da Sensação Térmica",
		windSpeedRasterName: "Raster de Velocidade do Vento",
		inWindSpeedUnitsName: "Unidades de Velocidade do Vento",
		valueName: "Valor",
		propertyName: "Propriedade do Nome",
		jsonName: "Metadados JSON",
		zoneTableName: "Tabela de Atributos Zonais",
		attributeFieldNames: "Nomes do Campo de Atributo",
		backgroundName: "Valor do Plano de Fundo",
		whereClauseName: "Cláusula Where",
		minimumValueFieldName: "Nome do Campo de Valor Mínimo",
		maximumValueFieldName: "Nome do Campo de Valor Máximo",
		outValueFieldName: "Nome do Campo de Valor de Saída",
		defaultValueName: "Valor de Saída Padrão",
		conversionMatrixName: "Matriz de Conversão",
		IsPseudoColorOutputName: "É uma pseudo cor de saída",
		unmappedAsRandomColorName: "Atribuir Cor Aleatoriamente Para Pixels Não Mapeados",
		distanceMethodName: "Método de Distância",
		flowDirRasterName: "Raster de Direção de Fluxo",
		pourPointName: "Fluir Raster de Ponto",
		pourPointFieldName: "Fluir Campo de Ponto",
		constantZName: "Constante Z",
		zOffsetName: "Deslocamento Z",
		geoIdName: "Geóide",
		calibrationTypeName: "Tipo de Calibração",
		filterTypeName: "Tipo de Filtro",
		filterSizeName: "Tamanho de Filtro",
		noiseModelName: "Modelo de Ruído",
		noiseVarianceName: "Variação de Ruído",
		additiveNoiseMeanName: "Média de Ruído Aditivo",
		multiplicativeNoiseMeanName: "Média de Ruído Multiplicativo",
		numberofLooksName: "Número de Visualizações",
		dampingFactorName: "Fator de Amortecimento",
		maskRasterName: "Raster de Máscara",
		nibbleValuesName: "Utilizar valores Nodata se forem vizinhos mais próximos",
		nibbleNoDataName: "Extrair células de NoData",
		zLimitName: "Limite Z",
		flowDirectionTypeName: "Tipo de Direção do Fluxo",
		weightRasterName: "Raster de Peso",
		forceEdgeName: "Forçar a saída do fluxo de todas as células do segmento",
		streamRasterName: "Raster do Fluxo",
		surfaceRasterName: "Raster de Superfície",
		conversionType: "Tipo de Conversão",
		distanceRaster1: "Raster de Distância 1",
		distanceRaster2: "Raster de Distância 2",
		costDistanceRaster: "Raster da Distância de Custo",
		costBacklinkRaster: "Raster de Vínculo Anterior de Custo",
		overridesName: "Substituições",
		fieldName: "Campo",
		signatureFileOrUrl: "Arquivo de Assinatura ou URL",
		redName: "Vermelho",
		greenName: "Verde",
		blueName: "Azul",
		infraredName: "Infra-Vermelho",
		panchromaticName: "Pancromática",
		multispectralName: "Multiespectral",
		pansharpeningType: "Tipo de Nitidez Pancromática",
		sensorName: "Sensor",
		spatialReferenceName: "Referência Espacial",
		xCellsizeName: "Tamanho da Célula X",
		yCellsizeName: "Tamanho da Célula Y",
		xOriginName: "Ponto de Registro X",
		yOriginName: "Ponto de Registro Y",
		percentileName: "Valor Percentil",
		neighborhoodType: "Tipo de Vizinhança",
		widthName: "Largura",
		heightName: "Altura",
		startAngleName: "Ângulo Inicial",
		endAngleName: "Ângulo Final",
		neighborhoodValues: "Valores de Vizinhança",
		horizontalRaster: "Raster Horizontal",
		horizontalFactor: "Fator Horizontal",
		verticalRaster: "Raster Vertical",
		verticalFactor: "Fator Vertical",
		streamRaster: "Raster do Fluxo",
		flowDirRaster: "Raster de Direção de Fluxo",
		numberNeighborCells: "Número de Células Vizinhas",
		zoneConnectivity: "Conectividade de Zona",
		addLinkBehavior: "Adicionar Link",
		excludedValue: "Valores Excluídos",
		constantFillCheck: "Gerar Raster de Preenchimento da Constante",
		fillRaster: "Raster de Preenchimento",
		constantFillValue: "Valor Constante",
		inputBitPositions: "Bit de Entrada",
		outputBitPositions: "Bit de Saída",
		distanceTypeName: "Tipo de Distância",
		barrierDataName: "Barreiras do Raster",
		pourPointDataName: "Raster de Ponto de Escoamento",
		accumulationRasterName: "Raster de Acumulação de Fluxo",
		snapDistanceName: "Ajustar Distância",
		orderMethodName: "Método de Ordenação",
		directionMeasurementName: "Direção da Medida",
		processAsMultiband: "Processar como Múltiplas Bandas",
		processMultidimensional: "Processar como multidimensional",
		forceFlowDirectionConvention: "Forçar convenção de direção de fluxo para raster do link de retorno",
		initialAccumulation: "Acumulação Inicial",
		maximumAccumulation: "Acumulação Máxima",
		sourceLocationBands: "Gerar linha e coluna de origem como bandas adicionais na saída",
		backDirectionBand: "Gerar direção de volta como banda adicional na saída",
		numberOfCells: "Número de Células",
		zoneValues: "Valores de Zona",
		shrinkMethod: "Método Reduzir",
		expandMethod: "Método Expandir",
		inputSpectralProfileType: "Tipo de Perfil Espectral",
		spectralProfileFileName: "Perfil Espectral",
		trainingFeatureFileName: "Feição de Treinamento",
		nonNegative: "Não-negativo",
		sumToOne: "Somar para Um",
		randomDistribution: "Distribuição",
		meanName: "Média",
		probabilityName: "Probabilidade",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "N",
		seed: "Origem",
		randomNumberGenerator: "Gerador de Número Aleatório",
		cellFactor: "Fator da Célula",
		aggregationType: "Técnica de Agregação",
		extentHandling: "Expandir extensão se necessário",
		trendAnalysisDimensionName: "Nome da dimensão",
		trendAnalysisType: "Tipo de Tendência",
		harmonicFrequency: "Frequência Harmônica",
		polynomialOrder: "Ordem Polinomial",
		cycleLengthName: "Comprimento do Ciclo",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R-Quadrada",
		trendAnalysisSlopePValue: "Valor P do Coeficiente de Declividade",
		trendAnalysisSeasonalPeriod: "Período Sazonal",
		cycleUnitName: "Unidade de Ciclo",
		predictDimensionValues: "Valores",
		dimensionDefinitionType: "Definição de Dimensão",
		predictDimensionStart: "Iniciar",
		predictDimensionEnd: "Final",
		predictDimensionInterval: "Intervalo do Valor",
		dimensionUnit: "Unidade",
		interpolationCellsizeName: "Tamanho da Célula de Interpolação",
		variableName: "Variáveis",
		dimensionlessName: "Adimensional",
		mdimDefinition: "Definição de Dimensão",
		dimensionName: "Dimensão",
		iterationStart: "Iniciar da primeira iteração",
		iterationEnd: "Finalizar da primeira iteração",
		intervalStart: "Início do Intervalo",
		intervalEnd: "Fim do Intervalo",
		stepName: "Intervalo",
		rangesName: "Faixas",
		minValue: "Valor Mínimo",
		maxValue: "Valor Máximo",
		changeAnalysisRasterName: "Raster da Análise de Alteração",
		changeTypeName: "Alterar Tipo",
		segmentDate: "Data do Segmento",
		changeDirectionName: "Alterar Direção",
		maxNumChangesName: "Número Máximo de Alterações",
		filterByYear: "Filtrar Por Ano",
		minimumYear: "Valor Mínimo",
		maximumYear: "Valor Máximo",
		filterByDuration: "Filtrar Por Duração",
		minimumDuration: "Duração Mínima",
		maximumDuration: "Duração Máxima",
		filterByMagnitude: "Filtrar Por Magnitude",
		minimumMagnitude: "Magnitude Mínima",
		maximumMagnitude: "Magnitude Máxima",
		filterByStartValue: "Filtrar por Valor Inicial",
		minimumStartValue: "Valor Inicial Mínimo",
		maximumStartValue: "Valor Inicial Máximo",
		filterByEndValue: "Filtrar por Valor Final",
		minimumEndValue: "Valor Final Mínimo",
		maximumEndValue: "Valor Final Máximo",
		modelTypeName: "Tipo de Modelo",
		fromRasterName: "Do Raster",
		toRasterName: "Para Raster",
		computeChangeMethod: "Calcular Método de Alteração",
		fromClassValues: "De Valores de Classe (Exemplo: 2 5)",
		toClassValues: "Para Valores de Classe (Exemplo: 2 5)",
		keepMethod: "Método de Filtro",
		useColorMethod: "Definir Cores de Transição",
		detectChangeBands: "Bandas para Detectar Alterações (começar em 0)",
		tmaskBands: "Bandas para Máscara Temporal (começar em 0)",
		chiSquaredThreshold: "Limite de Chi-Quadrado para Detectar Alterações",
		minAnomaly: "Observações de Anomalia Sucessivas Mínimas",
		updatingFrequency: "Atualizando Frequência de Ajuste (em anos)",
		distanceAccumulationRasterName: "Raster de Acumulação de Distância",
		costBackdirectionRasterName: "Direção de Volta ou Raster de Direção de Fluxo",
		rasterCollectionName: "Coleção de Raster",
		itemFunctionName: "Função do Item",
		aggregationFunctionName: "Função de Agregação",
		processingFunctionName: "Função de Processamento",
		aggregationDefinitionName: "Definição de Agregação",
		queryGeometryName: "Consultar geometria",
		factorFunctionZeroFactor: "Fator Zero",
		factorFunctionCutAngle: "Ângulo de Corte",
		factorFunctionSideFactor: "Fator Lateral",
		factorFunctionSlope: "Declividade",
		factorFunctionLowCutAngle: "Ângulo de Corte Baixo",
		factorFunctionHighCutAngle: "Ângulo de Corte Alto",
		factorFunctionCosPower: "Potência do Co-seno",
		factorFunctionSecPower: "Potência da Secante",
		factorFunctionTablePath: "Caminho da Tabela",
		processingBand: "Banda de Processamento",
		processingBandName: "Nome da Banda de Processamento",
		snappingDate: "Data de Ajuste",
		maxNumSegments: "Número Máximo de Segmentos",
		vertexCountOvershoot: "Excesso da Contagem de Vértice",
		spikeThreshold: "Limite de Spike",
		recoveryThreshold: "Limite de Recuperação",
		minNumObs: "Número mínimo de Observações",
		pValueThreshold: "Limite de Valor P",
		bestModelProportion: "Melhor Proporção do Modelo",
		preventOneYearRecovery: "Impedir Recuperação de Um Ano",
		recoveryIncreaseTrend: "A Recuperação Tem Tendência de Aumento",
		outputOtherBands: "Saída de Outras Bandas",
		sortType: "Tipo de Classificação",
		numberOfRuns: "Executar expansão e redução duas vezes",
		percentileValue: "Valor Percentil",
		percentileInterpolationType: "Tipo de interpolação de percentil",
		rasterInfoProperty: "Propriedade",
		rasterInfoValue: "Valor",
		rasterInfoColumns: "Colunas:",
		rasterInfoRows: "Linhas",
		rasterInfoBandCount: "Número de Bandas",
		rasterInfoPixelSizeX: "Tamanho da Célula X",
		rasterInfoPixelSizeY: "Tamanho da Célula Y",
		rasterInfoPixelType: "Tipo de Pixel",
		rasterExtentTop: "Superior",
		rasterExtentBottom: "Inferior",
		rasterExtentLeft: "Esquerda",
		rasterExtentRight: "Direita",
		rasterStatisticsNotCalculated: "A estatística não foi calculada.",
		spatialReferenceProjection: "Projeção",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "WKID Anterior",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "VCSWKID Anterior",
		spatialReferenceAuthority: "Autoridade",
		spatialReferenceLinearUnit: "Unidade Linear",
		spatialReferenceAngularUnit: "Unidade Angular",
		spatialReferenceFalseEasting: "Falso Leste",
		spatialReferenceFalseNorthing: "Falso Norte",
		spatialReferenceCentralMeridian: "Meridiano Central",
		spatialReferencePrimeMeridian: "Meridiano Principal",
		spatialReferenceStandardParallel1: "Paralelo Padrão 1",
		spatialReferenceStandardParallel2: "Paralelo Padrão 2",
		spatialReferenceLatitudeOfOrigin: "Latitude de Origem",
		spatialReferenceAuxiliarySphereType: "Tipo de Esfera Auxiliar",
		spatialReferenceDatum: "Datum",
		spatialReferenceSpheroid: "Esferóide",
		spatialReferenceSemimajorAxis: "Semi-Eixo Maior",
		spatialReferenceSemiminorAxis: "Semi-Eixo Menor",
		spatialReferenceInverseFlattening: "Achatamento Inverso",
		inputDefinitionFileName: "Arquivo de Definição de Entrada",
		deleteName: "Excluir",
		addVariableName: "Adicionar variável",
		maxNumPixelsPerSegment: "Tamanho Máximo do Segmento em Pixels",
		forwardWindowName: "Janela da Frente",
		backwardWindowName: "Janela de Trás",
		noDataHandlingName: "Manipulação do NoData",
		circularWrapValueName: "Valor de Quebra Circular",
		fromClassNameFieldName: "Nome de Campo para Nomes da Classe em Do Raster",
		toClassNameFieldName: "Nome de Campo para Nomes da Classe em Para Raster",
		targetRasterName: "Raster de Destino",
		circularWrapValue: "Valor de Quebra Circular",
		bandIndexesR: "Expressão Vermelha",
		bandIndexesG: "Expressão Verde",
		bandIndexesB: "Expressão Azul",
		exampleName: "Exemplo",
		inputName: "Entrada",
		outputName: "Saída",
		optionalName: "Opcional",
		browseDefinitionFile: "Procurar arquivo de definição",
		selectDefinitionFile: "Selecione o arquivo de definição de entrada",
		inputDefinitionURL: "URL do arquivo de definição de entrada",
		enterDefinitionFileURL: "Insira a URL do arquivo de definição",
		browseXMLFile: "Procurar arquivo XML",
		selectStatsFile: "Selecione o arquivo de estatísticas e histogramas",
		enterXMLFileURL: "Digite a URL do arquivo XML",
		xmlFileURL: "URL do arquivo XML",
		circularCalculation: "Calcular Estatística Circular",
		localSurfaceType: "Tipo de Superfície Local",
		surfaceParameterType: "Tipo de Parâmetro",
		neighborhoodDistance: "Distância de Vizinhança",
		useAdaptiveNeighborhood: "Usar Vizinhança Adaptável",
		outputSlopeType: "Medição de Inclinação de Saída",
		projectAzimuths: "Azimutes Geodésicos do Projeto",
		useEquatorialAspect: "Usar Aspecto Equatorial",
		zUnit: "Unidade Z",
		analysisMask: "Máscara de Análise",
		stdDeviation: "Desvio Padrão",
		"true": "Verdadeiro",
		"false": "Falso",
		costDistanceRaster1: "Raster de Distância de Custo Acumulado de Entrada 1",
		costDistanceRaster2: "Raster de Distância de Custo Acumulado de Entrada 2",
		threshold: "Limite",
		thresholdMethod: "Método de Limite",
		directionRaster1: "Raster de Direção de Volta de Entrada 1",
		directionRaster2: "Raster de Direção de Volta de Entrada 2",
		maxIterations: "Número Máximo de Iterações",
		epsilon: "Épsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Manual",
		attributeTableTypeExternal: "Externo",
		clrSchemeTypeColormap: "Mapa de Cores",
		clrSchemeTypeColorRamp: "Rampa de Cores",
		colormapTypeElevation: "Elevação",
		colormapTypeGray: "Cinza",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Aleatório",
		none: "Nenhum",
		slopeTypeAdjusted: "Ajustado",
		slopeTypeDegree: "Graus",
		slopeTypePercentRise: "Aumento da Porcentagem",
		slopeTypeScaled: "Dimensionado",
		stretchTypeMinMax: "Mín-Máx",
		stretchTypePercentMinMax: "Percentagem Mín-Máx",
		stretchTypeSigmoid: "Sigmóide",
		stretchTypeStdDev: "Desvio Padrão",
		hillshadeTypeSimple: "Tradicional",
		hillshadeTypeMultidirectional: "Multidirecional",
		bandComboByNames: "Nomes de Bandas",
		bandComboByWavelength: "Comprimentos de Onda da Banda",
		bandComboByIDs: "IDs de Banda",
		missingBandActionBestMatch: "Melhor Combinação",
		missingBandActionFail: "Falha",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Centímetros",
		unitTypeDecimeters: "Decímetros",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Pés",
		unitTypeFeetPerSec: "Pés por Segundo (ft/s)",
		unitTypeInches: "Polegadas",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Quilômetros",
		unitTypeKmsPerHour: "Quilômetros Por Hora (km/h)",
		unitTypeKnots: "Nó (kn)",
		unitTypeMeters: "Metros",
		unitTypeMetersPerSec: "Metros por Segundos (m/s)",
		unitTypeMiles: "Milhas",
		unitTypeMilesPerHour: "Milhas por Hora (mph)",
		unitTypeMillimeters: "Milímetros",
		unitTypeNauticalMiles: "Milhas Náuticas",
		unitTypeYards: "Jardas",
		unitTypeDecimalDegrees: "Graus Decimais",
		unitTypePoints: "Pontos",
		unitTypeUnknown: "Desconhecido",
		unitTypeSqMapUnits: "Unidades Quadráticas do Mapa",
		unitTypeSqMiles: "Milhas Quadradas",
		unitTypeSqKms: "Quilômetros Quadrados",
		unitTypeAcres: "Acres",
		unitTypeHectares: "Hectares",
		unitTypeSqYards: "Jardas Quadradas",
		unitTypeSqFt: "Pés Quadrados",
		unitTypeSqInches: "Polegadas Quadradas",
		unitTypeSqMts: "Metros Quadrados",
		unitTypeSqCms: "Centímetros Quadrados",
		unitTypeSqMms: "Milímetros Quadrados",
		cellsizeTypeFirst: "Primeiro De",
		cellsizeTypeMin: "Mínimo De",
		cellsizeTypeMax: "Máximo De",
		cellsizeTypeMean: "Média De",
		cellsizeTypeLast: "Último De",
		extentTypeFirst: "Primeiro De",
		extentTypeIntersection: "Intersecção De",
		extentTypeUnion: "União De",
		extentTypeLast: "Último De",
		noDataInterpretAny: "Combinar Qualquer Um",
		noDataInterpretAll: "Combinar Todos",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Perfil",
		curvatureTypePlanform: "Forma Plana",
		filterTypeLineDetectionHorizontal: "Detecção de Linha Horizontal",
		filterTypeLineDetectionVertical: "Detecção de Linha Vertical",
		filterTypeLineDetectionLeftDiagonal: "Detecção de Linha Diagonal Esquerda",
		filterTypeLineDetectionRightDiagonal: "Detecção de Linha Diagonal Direita",
		filterTypeGradientNorth: "Norte Gradiente",
		filterTypeGradientWest: "Oeste Gradiente",
		filterTypeGradientEast: "Leste Gradiente",
		filterTypeGradientSouth: "Sul Gradiente",
		filterTypeGradientNorthEast: "Nordeste Gradiente",
		filterTypeGradientNorthWest: "Noroeste Gradiente",
		filterTypeSmoothArithmeticMean: "Suavizar Média Aritmética",
		filterTypeSmoothing3x3: "Suavização 3x3",
		filterTypeSmoothing5x5: "Suavização 5x5",
		filterTypeSharpening3x3: "Nitidez 3x3",
		filterTypeSharpening5x5: "Nitidez 5x5",
		filterTypeLaplacian3x3: "Laplaciano 3x3",
		filterTypeLaplacian5x5: "Laplaciano 5x5",
		filterTypeSobelHorizontal: "Horizontal de Sobel",
		filterTypeSobelVertical: "Vertical de Sobel",
		filterTypeSharpen: "Nítido",
		filterTypeSharpen2: "Mais Nítido",
		filterTypePointSpread: "Propagação de Ponto",
		userDefined: "Usuário Definido",
		ContourTypeLines: "Linhas de Contorno",
		ContourTypeFill: "Preenchimento de Contorno",
		ContourTypeSmoothOnly: "Somente superfície suave",
		rasterizeFirst: "Primeiro",
		rasterizeLast: "Último",
		rasterizeSmallest: "Menor",
		rasterizeLargest: "Maior",
		resamplingTypeNearest: "Vizinho Mais Próximo",
		resamplingTypeBilinear: "Interpolação Bilinear",
		resamplingTypeCubic: "Convolução Cúbica",
		resamplingTypeMajority: "Maioria",
		resamplingTypeBilinearPlus: "Interpolação Bilinear Adicional",
		resamplingTypeGauss: "Gauss Blur",
		resamplingTypeGaussPlus: "Gauss Blur Adicional",
		resamplingTypeAverage: "Média",
		resamplingTypeMinimum: "Mínimo",
		resamplingTypeMaximum: "Máximo",
		resamplingTypeVectorAvg: "Média Vetorial",
		minimum: "Mínimo",
		maximum: "Máximo",
		mean: "Média",
		stdDeviation: "Desvio Padrão",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Magnitude-Direção",
		unknown: "Desconhecido",
		angleRefSysGeographic: "Geográfico",
		angleRefSysArithmetic: "Aritmético",
		interpolateIrregularDataNearest: "Vizinho Mais Próximo",
		interpolateIrregularDataBilinear: "Bilinear",
		interpolateIrregularDataTinningLinear: "Estanhagem Linear",
		interpolateIrregularDataTinningNaturalNeighbor: "Vizinho Natural",
		interpolateIrregularDataTinningIDW: "Distância Inversa Ponderada",
		esriRasterThresholdTypeConstant: "Constante",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Parâmetro Máximo",
		argStatsTypeMin: "Parâmetro Mínimo",
		argStatsTypeMedian: "Parâmetro da Mediana",
		argStatsTypeDuration: "Duração",
		arithmeticOpPlus: "Adição",
		arithmeticOpMinus: "Subtrair",
		arithmeticOpMultiply: "Multiplicar",
		arithmeticOpDivide: "Dividir",
		arithmeticOpPower: "Potência",
		arithmeticOpMode: "Modo",
		clipTypeOutside: "Recortar Fora",
		clipTypeInside: "Recortar Dentro",
		yes: "Sim",
		no: "Não",
		densities: "Densidades",
		expectedCounts: "Contagens Esperadas",
		planar: "Planar",
		geodesic: "Geodésica",
		eachCell: "Cada Célula",
		eachZone: "Cada Zona",
		bestSingle: "Mais Simples",
		allSightlines: "Todas as Linhas de Visão",
		perimeterSightlines: "Linhas de Visão do Perímetro",
		frequency: "Frequência",
		observers: "Observadores",
		majority: "Maioria",
		median: "Mediana",
		minority: "Minoria",
		percentile: "Percentil",
		range: "Intervalo",
		sum: "Soma",
		variety: "Variedade",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "SAVI Transformado",
		bandArithmeticMethodMSAVI: "SAVI Modificado",
		bandArithmeticMethodSultan: "Fórmula de Sultan",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Óxido de Ferro",
		ferrousMinerals: "Minerais Férreos",
		clayMinerals: "Minerais do Barro",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Raiz Quadrada",
		localACos: "ACos",
		localASin: "ASen",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Não Bitwise",
		localBooleanNot: "Não Booleano",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "Nulo",
		localFloat: "Real",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Negativo",
		localRoundDown: "Arredondar para Menos",
		localRoundUp: "Arredondar para mais",
		localSin: "Sen",
		localSinH: "SenH",
		localTan: "Tangente",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASenH",
		localPlus: "Adição",
		localMinus: "Subtrair",
		localTimes: "Multiplicar",
		localPower: "Potência",
		localBitwiseAnd: "E Bitwise",
		localBitwiseLeftShift: "Mudança à Esquerda de Bitwise",
		localBitwiseOr: "Ou Bitwise",
		localBitwiseRightShift: "Deslocar à Direita do Bitwise",
		localBitwiseXor: "XOu Bitwise",
		localBooleanAnd: "E Booleano",
		localBooleanOr: "Ou Booleano",
		localBooleanXor: "XOu Boolean",
		localDivide: "Dividir",
		localEqualTo: "Igual A",
		localGreaterThan: "Maior Que",
		localGreaterThanEqual: "Maior que Igual",
		localLessThan: "Menor Que",
		localLessThanEqual: "Menor que Igual",
		localMod: "Mod",
		localNotEqual: "Não Igual",
		localATan2: "ATan2",
		localSquare: "Quadrado",
		localSetNull: "Definir Nulo",
		remapDefTypeList: "Lista",
		remapDefTypeTable: "Tabela",
		remapTableTypeSimple: "Simples",
		remapTableTypeDynamic: "Dinâmico",
		remapTableTypeReassignment: "Reatribuição",
		geomCorrectionByConstZ: "Utilizar Constante Z",
		geomCorrectionByDEM: "Utilizar DEM",
		radarCalibBetaNought: "Beta zero",
		radarCalibSigmaNought: "Sigma zero",
		radarCalibGammaNought: "Gama zero",
		speckleFilterTypeLee: "Filtro de Lee",
		speckleFilterTypeEnhancedLee: "Filtro de Lee Melhorado",
		speckleFilterTypeFrost: "Filtro de Frost",
		speckleFilterTypeKuan: "Filtro de Kuan",
		speckleNoiseModelMul: "Ruído Multiplicativo",
		speckleNoiseModelAdd: "Ruído Aditivo",
		speckleNoiseModelAddnMul: "Ruído Multiplicativo e Aditivo",
		mosaicOpTypeFirst: "Primeiro",
		mosaicOpTypeLast: "Último",
		mosaicOpTypeMin: "Mín",
		mosaicOpTypeMax: "Máx",
		mosaicOpTypeMean: "Média",
		mosaicOpTypeBlend: "Mesclar",
		mosaicOpTypeSum: "Soma",
		integer: "Inteiro",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Vertical",
		horizontal: "Horizontal",
		localCellStatisticsMajority: "Maioria",
		localCellStatisticsMax: "Máximo",
		localCellStatisticsMean: "Média",
		localCellStatisticsMedian: "Mediana",
		localCellStatisticsMin: "Mínimo",
		localCellStatisticsMinority: "Minoria",
		localCellStatisticsRange: "Intervalo",
		localCellStatisticsStdDev: "Desvio Padrão",
		localCellStatisticsSum: "Soma",
		localCellStatisticsVariety: "Variedade",
		localCellStatisticsMajorityIgnoreND: "Maioria (Ignorar NoData)",
		localCellStatisticsMaxIgnoreND: "Máximo (Ignorar NoData)",
		localCellStatisticsMeanIgnoreND: "Média (Ignorar NoData)",
		localCellStatisticsMedianIgnoreND: "Mediana (Ignorar NoData)",
		localCellStatisticsMinIgnoreND: "Mínimo (Ignorar NoData)",
		localCellStatisticsMinorityIgnoreND: "Minoria (Ignorar NoData)",
		localCellStatisticsRangeIgnoreND: "Intervalo (Ignorar NoData)",
		localCellStatisticsStdDevIgnoreND: "Desvio Padrão (Ignorar NoData)",
		localCellStatisticsSumIgnoreND: "Soma (Ignorar NoData)",
		localCellStatisticsVarietyIgnoreND: "Variedade (Ignorar NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Percentil (ignorar NoData)",
		fromSource: "Da Origem",
		toSource: "Para Origem",
		colorspaceConversionRgbToHsv: "RGB para HSV",
		colorspaceConversionHsvToRgb: "HSV para RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Média",
		pansharpenTypeGramSchmidt: "GramSchmidt",
		rectangleNeighborhood: "Retângulo",
		circleNeighborhood: "Círculo",
		annulusNeighborhood: "Anelar",
		wedgeNeighborhood: "Cunha",
		irregularNeighborhood: "Irregular",
		weightNeighborhood: "Peso",
		four: "Quatro",
		eight: "Oito",
		within: "Dentro",
		cross: "Transversal",
		addLink: "Adicionar Link",
		noLink: "Nenhum Link",
		weightedMean: "Média Ponderada",
		ls8QCBitPatternCirrus: "Landsat 8 Cirros",
		ls8QCBitPatternCloud: "Landsat 8 Nuvem",
		ls8QCBitPatternCloudShadow: "Landsat 8 Sombra de Nuvem",
		ls8QCBitPatternDesignatedFill: "Landsat 8 Preenchimento Designado",
		ls8QCBitPatternDroppedFrame: "Landsat 8 Estrutura Danificada",
		ls8QCBitPatternSnowIce: "Landsat 8 Neve/Gelo",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 Oclusão de Terreno",
		ls8QCBitPatternVegetation: "Landsat 8 Vegetação",
		ls8QCBitPatternWater: "Landsat 8 Água",
		downStream: "Corrente Inativa",
		upStream: "Corrente Ativa",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Divisão Atual",
		allSlices: "Todas as Divisões",
		expandDistance: "DISTÂNCIA",
		expandMorphological: "MORFOLÓGICO",
		spectralProfileFile: "Perfil Espectral",
		trainingFeatureFile: "Feição de Treinamento",
		randomDistributionTypeUniform: "Uniforme",
		randomDistributionTypeUniformInteger: "Inteiro",
		randomDistributionTypeNormal: "Normal",
		randomDistributionTypeExponential: "Exponencial",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gama",
		randomDistributionTypeBinomial: "Binômio",
		randomDistributionTypeGeometric: "Geométrico",
		randomDistributionTypeNegativeBinomial: "Binômio Negativo",
		randomGeneratorTypeStandardCRand: "Standard C Rand",
		randomGeneratorTypeAlgorithmACM599: "Algoritmo ACM coletado 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Soma",
		medainName: "Mediana",
		trendLinear: "Linear",
		trendHarmonic: "Harmônico",
		trendPolynomial: "Polinomial",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Kendall Sazonal",
		dimensionByValue: "Por Valor",
		dimensionByInterval: "Por Intervalo",
		mdimDefTypeAll: "Todos",
		mdimDefTypeByValues: "Por Valores",
		mdimDefTypeByRanges: "Por Intervalos",
		mdimDefTypeByIteration: "Por Iteração",
		mdimDefTypeByInterval: "Por Intervalo",
		mdimDefTypeByTargetRaster: "Por Raster de Destino",
		esriTimeUnitsHours: "Horas",
		esriTimeUnitsDays: "Dias",
		esriTimeUnitsWeeks: "Semanas",
		esriTimeUnitsMonths: "Meses",
		esriTimeUnitsYears: "Anos",
		esriTimeIntervalKeywordHourly: "A Cada Hora",
		esriTimeIntervalKeywordDaily: "Diariamente",
		esriTimeIntervalKeywordWeekly: "Semanalmente",
		esriTimeIntervalKeywordDekadly: "Décadas",
		esriTimeIntervalKeywordPentadly: "Quinquênio",
		esriTimeIntervalKeywordMonthly: "Mensalmente",
		esriTimeIntervalKeywordQuarterly: "Trimestral",
		esriTimeIntervalKeywordYearly: "Anualmente",
		esriTimeIntervalKeywordRecurringDaily: "Diariamente recorrente",
		esriTimeIntervalKeywordRecurringWeekly: "Semanalmente recorrente",
		esriTimeIntervalKeywordRecurringMonthly: "Mensalmente recorrente",
		esriTimeIntervalKeywordRecurringQuarterly: "Trimestralmente recorrente",
		aggDefTypeAll: "Todos",
		aggDefTypeIntervalKeyword: "Palavra-chave de Intervalo",
		aggDefTypeIntervalValue: "Valor do Intervalo",
		aggDefTypeIntervalRanges: "Faixas de Intervalo",
		latestChange: "Hora da Última Alteração",
		earliestChange: "Hora da Primeira Alteração",
		largestChange: "Hora da Maior Alteração",
		numberOfChanges: "Número de Alterações",
		longestChange: "Tempo de Alteração mais Longo",
		shortestChange: "Tempo de Alteração Menor",
		fastestChange: "Tempo de Alteração Mais Rápido",
		slowestChange: "Tempo de Alteração Mais Lento",
		allChanges: "Todos",
		increaseChanges: "Aumentar",
		decreaseChanges: "Diminuir",
		segmentBeginning: "Início do segmento",
		segmentEnd: "Final do segmento",
		esriComputeChangeMethodDifference: "Diferença",
		esriComputeChangeMethodRelativeDifference: "Diferença Relativa",
		esriComputeChangeMethodCategorical: "Diferença Categórica",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Distância Euclidiana Espectral",
		esriComputeChangeMethodMultispectralAngularDifference: "Diferença de Ângulo Espectral",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Banda Com Mais Alterações",
		esriComputeChangeKeepAll: "Manter Todos",
		esriComputeChangeKeepChangedOnly: "Manter Somente Pixels Alterados",
		esriComputeChangeKeepUnchangedOnly: "Manter Somente Pixels Não Alterados",
		esriComputeChangeUseColorAverage: "Média De e Para Cores",
		esriComputeChangeUseColorFrom: "Utilizar De Cores",
		esriComputeChangeUseColorTo: "Utilizar Para Cores",
		factorFunctionBinary: "Binário",
		factorFunctionForward: "Para Frente",
		factorFunctionLinear: "Linear",
		factorFunctionInvLinear: "Linear Inverso",
		factorFunctionTable: "Tabela",
		factorFunctionSymLinear: "Linear Simétrico",
		factorFunctionSymInvLinear: "Linear Simétrico Inverso",
		factorFunctionCos: "Co-seno",
		factorFunctionSec: "Secante",
		factorFunctionCosSec: "Co-seno Secante",
		factorFunctionSecCos: "Secante Co-seno",
		noSort: "Não Classificar",
		ascend: "Ascendente",
		descend: "Descendente",
		autoDetect: "Detecção automática",
		nearest: "Mais Próximo",
		linear: "Linear",
		esriMonthJanuary: "Janeiro",
		esriMonthFebruary: "Fevereiro",
		esriMonthMarch: "Março",
		esriMonthApril: "Abril",
		esriMonthMay: "Maio",
		esriMonthJune: "Junho",
		esriMonthJuly: "Julho",
		esriMonthAugust: "Agosto",
		esriMonthSeptember: "Setembro",
		esriMonthOctober: "Outubro",
		esriMonthNovember: "Novembro",
		esriMonthDecember: "Dezembro",
		dimensionalMovingIgnoreNoData: "Dados",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "Preenchimento de NoData",
		circularMean: "Média Circular",
		circularName: "Circular",
		arithmeticName: "Aritmético",
		slopeName: "Declividade",
		aspectName: "Aspecto",
		meanCurvature: "Curvatura média",
		profileCurvature: "Curvatura do perfil (linha de declividade normal)",
		tangentialCurvature: "Curvatura tangencial (curva de nível normal)",
		planCurvature: "Curvatura do plano (curva de nível projetada)",
		contourGeodesicTorsion: "Torção geodésica de curva de nível",
		gaussianCurvature: "Curvatura Gaussiana",
		casoratiCurvature: "Curvatura de Casorati",
		localSurfaceTypeQuadratic: "Quadrático",
		localSurfaceTypeBiquadratic: "Biquadrático",
		thresholdNoThreshold: "Sem Limite",
		thresholdPercentLeastCost: "Porcentagem de Menor Custo",
		thresholdAccumulativeCost: "Custo Acumulativo",
		clrmapTypeHillshade: "Relevo Sombreado"
	},
	categoryLabels: {
		sourceCharacteristics: "Características de Origem",
		neighborhoodSettings: "Configurações de Vizinhança",
		statistics: "Estatística",
		gamma: "Gama",
		viewshedParameters: "Parâmetros do Panorama",
		observerParameters: "Parâmetros do Observador",
		irregularDataInterpolation: "Interpolação de Dados Irregulares",
		modelStatistics: "Estatística do Modelo",
		aggregationDef: "Definição de Agregação",
		filterByAttributes: "Filtrar Por Atributos",
		percentileName: "Percentil",
		rasterInfo: "Informações do Raster",
		extent: "Extensão",
		spatialReference: "Referência Espacial"
	},
	outputRasterHelpTexts: {
		outputName: "<p>O nome da camada que será criada e adicionada ao mapa.</p>",
		resultType: "<p>O tipo de saída que será criado. As saídas podem ser camadas de imagens mosaicadas ou camadas de imagens dinâmicas.</p>",
		saveResultIn: "<p>O nome da pasta em <b>Meu conteúdo</b> onde o resultado será salvo.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Configurações do ambiente para análise no Map Viewer. </p>",
		outSR: "<p>Especifica o sistema de coordenadas para análise e a camada resultante.</p>",
		extent: "<p>Especifica a área a ser usada para análise.</p>",
		snapRaster: "<p>Ajusta a extensão da saída para que corresponda ao alinhamento da célula da camada raster de ajuste especificada.</p>",
		cellSize: "<p>Especifica o tamanho ou resolução da célula que será usada para análise e para criar a camada raster de saída.</p>",
		mask: "<p>Especifica uma camada de máscara, na qual apenas as células que se enquadram na área de máscara serão usadas para análise.</p>",
		resamplingMethod: "<p>Especifica como interpolar valores de pixel quando os rasters de entrada e saída não se alinham.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Tipo não suportado",
		currentlyUnsupported: " Um editor padrão para o ${missingType} está pendente, mas será lançado em breve. Caixa de texto temporária do espaço reservado para especificar entradas baseadas em string.",
		unsupportedOverrideWarning: "Um componente do editor de substituição que fornece um UX melhor para trabalhar com os seguintes parâmetros, está pendente, mas será lançado em breve:",
		overrideWidgetMissing: "Componente do editor de substituição ausente!",
		uiIncomplete: "Falha ao enviar trabalho. A função não pode ser executada, pois alguns dos campos obrigatórios estão incompletos ou ausentes na interface do usuário.",
		count: "Contagem",
		selectVariables: "Selecionar variáveis",
		selectFeature: "Selecione uma camada de feição",
		greaterThanErrorMessage: "O número de entrada deve ser maior que ${min}",
		lesserThanErrorMessage: "O número de entrada deve ser menor que ${max}",
		greaterThanOrEqualErrorMessage: "O número de entrada deve ser maior ou igual a ${min}",
		lesserThanOrEqualErrorMessage: "O número de entrada deve ser menor ou igual a ${max}",
		allowScalar: "Selecione uma camada ou insira uma constante",
		selectField: "Selecionar campo",
		parameterRequired: "Este parâmetro é exigido.s",
		enterAValue: "Inserir um valor...",
		invalidInput: "O valor inserido não é válido.",
		itemNotFound: "O item não existe ou está inacessível.",
		itemPermissionDenied: "Você não tem permissões para acessar este item.",
		layerNotAvailable: "Falha ao carregar a camada ${layerName}.",
		multipleLayersNotAvailable: "Falha ao carregar camada ${layerName} e outros.",
		learnMoreLabel: "Obtenha Mais Informações",
		fieldNotAvailable: "Falha ao carregar o campo.",
		allowAnalysis: "A análise não é permitida no serviço de imagem.",
		allowAnalysisReason: "Uma ou mais camadas do mapa não estão listadas aqui porque não permitem análise.",
		learnMoreText: "Saiba mais",
		atLeastOneRasterInput: "Pelo menos uma camada de entrada deve ser uma camada raster.",
		browseAnalysisLayers: "Procurar camadas",
		activeMapViewExtent: "Usar Extensão do Mapa Atual",
		chooseRaster: "Escolha Recortando Raster",
		chooseGeometry: "Escolha Recortando Geometria",
		resultType: "Tipo de resultado",
		saveInFolder: "Salvar na pasta",
		outputName: "Nome de saída",
		outputLayerType: "Tipo da camada de saída",
		dynamicImageryLayer: "Camada de imagens dinâmica",
		tiledImageryLayer: "Camada de imagens do mosaico",
		custom: "Personalizada",
		loading: "Carregando...",
		layerMissing: "Uma ou mais camadas do mapa não estão listadas aqui porque não permitem análise. Saiba mais.",
		browseCoordinateSystems: "Procurar sistemas de coordenadas",
		unableToRepopulateOutSR: "Não é possível preencher o sistema de coordenadas de saída.",
		defaultTitle: "Veja mais",
		"ARC (equal arc-second)": "ARC (segundo arco igual)",
		Africa: "África",
		Antarctica: "Antártica",
		Argentina: "Argentina",
		Asia: "Ásia",
		"Asteroid Belt": "Cinturão de Asteróides",
		"Atlantic Ocean": "Oceano Atlântico",
		Australia: "Austrália",
		"Australia and New Zealand": "Austrália e Nova Zelândia",
		Austria: "Áustria",
		"BLM (US Feet)": "BLM (US Feet)",
		Bangladesh: "Bangladeche",
		"Beijing 1954": "Beijing 1954",
		Bhutan: "Butão",
		CGCS2000: "CGCS2000",
		Canada: "Canadá",
		Caribbean: "Caribe",
		"Caribbean Sea": "Mar do Caribe",
		"Central America": "América Central",
		"Central and North America": "América do Norte e Central",
		Colombia: "Colômbia",
		Continental: "Continental",
		"County Systems": "Sistemas do Município",
		"Democratic Republic of the Congo": "Congo",
		"EPSG Arctic": "EPSG Ártico",
		Earth: "Terra",
		"Ellipsoidal-based": "Baseado no elipsoidal",
		Europe: "Europa",
		Finland: "Finlândia",
		France: "França",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss Kruger",
		"Geographic Coordinate Systems": "Sistema de Coordenadas Geográficas",
		Germany: "Alemanha",
		"Gravity-related": "Relacionado à gravidade",
		"Greenwich-based": "Baseado no Greenwich",
		"Highways England": "Rodovias Inglaterra",
		Illinois: "Illinois",
		"Indian Ocean": "Oceano Índico",
		"Indian Subcontinent": "Subcontinente Indiano",
		Indiana: "Indiana",
		Indonesia: "Indonésia",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irlanda e Reino Unido",
		Italy: "Itália",
		Japan: "Japão",
		Jupiter: "Júpiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Líbia",
		Malaysia: "Malásia",
		"Malaysia and Singapore": "Malásia e Cingapura",
		Mars: "Marte",
		Mercury: "Mercúrio",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (US Feet)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (Intl Feet)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (Metros)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (US Feet)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (Intl Feet)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (Metros)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (US Feet)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (Intl Feet)",
		"NAD 1983 (Meters)": "NAD 1983 (Metros)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (Metros)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (US Feet)",
		"NAD 1983 (US Feet)": "NAD 1983 (US Feet)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (Intl Feet)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (Metros)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (US Feet)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (Intl Feet)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (Metros)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (US Feet)",
		"National Grids": "Grades Nacionais",
		Navajo: "Navajo",
		Neptune: "Netuno",
		"New Beijing": "New Beijing",
		"New Zealand": "Nova Zelândia",
		"North America": "América do Norte",
		"Northern Hemisphere": "Hemisfério Norte",
		Norway: "Noruega",
		Oceans: "Oceanos",
		Oregon: "Oregon",
		"Other GCS": "Other GCS",
		"Pacific Ocean": "Oceano Pacífico",
		Pluto: "Plutão",
		Polar: "Polar",
		Portugal: "Portugal",
		"Projected Coordinate Systems": "Sistema de Coordenadas Planas",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Substituído",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturno",
		"Solar System": "Sistema Solar",
		"South Africa": "África do Sul",
		"South America": "América do Sul",
		"South Korea": "Coréia do Sul",
		"Southern Hemisphere": "Hemisfério Sul",
		"Spheroid-based": "Baseado no esferóide",
		"State Plane": "State Plane",
		"State Systems": "Sistemas Estaduais",
		Sweden: "Suécia",
		"Switzerland and Liechtenstein": "Suíça e Liechtenstein",
		Texas: "Texas",
		Tribal: "Tribal",
		Turkey: "Turquia",
		"US Feet": "US Feet",
		"USA and territories": "Estados Unidos e territórios",
		UTM: "UTM",
		Ukraine: "Ucrânia",
		"Unknown Height Systems": "Sistemas de Altura Desconhecidos",
		Uranus: "Urano",
		Venus: "Vênus",
		"Vertical Coordinate Systems": "Sistemas de Coordenadas Verticais",
		Vietnam: "Vietnã",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Mundial",
		"World (Sphere-based)": "Mundial (baseado no esferóide)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Concluir",
		noResults: "Nenhum resultado encontrado",
		searchPlaceholder: "Nome ou WKID",
		browseTemplate: "Procurar modelos de função raster",
		saveTemplate: "Salvar modelo de função raster",
		preview: "Visualizar",
		previewDescription: "Visualize o resultado antes de executar a análise.",
		showPreview: "Mostrar visualização",
		previewLayer: "Camada de visualização ${number}",
		newPreview: "Nova visualização",
		previewPopup: "Habilite a visualização dos resultados da análise com base nos parâmetros de entrada.",
		updatePreviewLayer: "Atualizar camada de visualização selecionada",
		createPreviewLayer: "Crie uma nova camada de visualização",
		maximumPreviewAllowed: "Número máximo permitido de camadas de visualização: ${maxCount}",
		previewFailure: "Esta camada de visualização não está disponível. Verifique os parâmetros de entrada e atualize esta camada de visualização novamente.",
		header: "Selecionar item",
		content: "Você tem alterações não salvas em ${rftTitle}. Se você recomeçar com um novo modelo, essas alterações serão perdidas.",
		dontSave: "Não salvar",
		"continue": "Continuar",
		stretch: "Ajustar na janela",
		pan: "Mover",
		newTemplate: "Criar novo modelo",
		openTemplate: "Abrir modelo",
		addFunction: "Adicionar funções raster",
		addConstant: "Adicionar constante",
		addRaster: "Adicionar variável raster",
		move: "Mover",
		zoom: "Zoom",
		saveAs: "Salvar Como",
		clear: "Limpar",
		addRasterFunctionTitle: "Adicionar funções raster",
		templatePropertiesTitle: "Propriedades do modelo",
		browseRFT: "Procurar modelos de função raster",
		defaultToolDescription: "Ferramenta de análise ${toolTitle}.",
		openToolText: "Abrir Ferramenta",
		toolDropdownText: "Menu Suspenso da Ferramenta",
		addToMap: "Confirme e adicione ao mapa",
		confirm: "Confirmar",
		select: "Selecionar",
		selectTask: "Selecionar tarefa",
		unsupportedLayer: "Este parâmetro não suporta as seguintes camadas: ${layerName}.",
		viewDetails: "Visualizar detalhes de item completo",
		rename: "Renomear",
		duplicate: "Duplicar",
		launch: "Abrir para executar",
		templateEditor: "Editor de modelos",
		createItem: "Salvar modelo de função raster",
		actionLabel: "Filtrar",
		filterPopoverHeading: "Filtrar as funções",
		defaultSearchPlaceholder: "Pesquisar por nome",
		settings: "Configurações",
		summary: "Resumo",
		definitionQuery: "Consulta de definição",
		matchVariables: "Variáveis ​​de correspondência",
		unionDimension: "Dimensão da união",
		nameEditorPlaceholder: "Inserir título",
		summaryEditorPlaceholder: "Insira uma breve descrição.",
		definitionQueryPlaceholder: "Inserir...",
		upload: "Carregar",
		chooseImage: "Clique para escolher um arquivo",
		update: "Atualizar",
		thumbnailErrors: {
			wrongImageType: "Tipo de imagem selecionado errado",
			notAvailable: "Miniatura não disponível",
			loadError: "Não foi possível carregar a imagem",
			chooseFile: "Clique para escolher arquivo"
		}
	}
};
const copy = "Copiar";
const save = "Salvar";
const title = "Título";
const folder = "Pasta";
const tags = "Tags";
const savingMessage = "Salvando item em";
const shareWith = "Compartilhar Com";
const share = "Compartilhar";
const setSharingLevel = "Configurar Nível de Compartilhamento";
const setGroupSharing = "Configurar Compartilhamento do Grupo";
const owner = "Proprietário";
const organization = "Organização";
const everyone = "Todos (público)";
const groups = "Grupos:";
const type = "Tipo";
const mosaic = "Mosaico";
const itemGroup = "Grupo de Item";
const item = "Item";
const definitionQuery = "Consulta de Definição";
const groupItemsBy = "Agrupar Itens Por";
const groupFieldName = "Nome de Campo do Grupo";
const tagFieldName = "Nome de Campo da Tag";
const noTitleTagErrorMsg = "Você deve fornecer um título para seu item e tags para permitir ao seu mapa ser encontrado por pesquisas.";
const noTitleErrorMsg = "Você deve fornecer um título para o item.";
const noTagErrorMsg = "Você deve fornecer pelo menos uma tag para ajudar os usuários a encontrar seu item por pesquisas.";
const error = "Erro";
const warning = "Aviso";
const success = "Bem Sucedido";
const details = "Detalhes:";
const tryAgain = "Tentar Novamente";
const toolModeler = {
	save: "Salvar",
	editProperties: "Editar Propriedades",
	saveAs: "Salvar Como",
	savingNotification: "Salvando as alterações no item...",
	savingTitle: "Salvando",
	saveFailedMessage: "Falha ao salvar alterações.",
	saveWithErrorsMessage: "As alterações foram salvas com os erros seguintes.",
	viewItemMessage: "Visualizar o item salvo",
	here: "aqui.",
	itemCreatedMessage: "Novo item foi criado.",
	clickToViewItemMessage: "Clique em OK para visualizar a página de detalhes do item; clique em Cancelar para continuar.",
	readingFailed: "Falha ao carregar modelo de função raster selecionado.",
	failedToLoadXML: "Falha ao carregar modelo de função raster selecionado no formato XML.",
	learnMore: "Saiba mais",
	overwriteTitle: "Confirmar substituição",
	overwriteMessage: "Você deseja substituir o item existente?",
	overwriteSuccessMessage: "O item foi atualizado."
};
const toolEditor = {
	run: "Executar",
	save: "Salvar",
	deleteSelected: "Excluir Itens Selecionados",
	addRaster: "Adicionar Raster",
	addScalar: "Adicionar Escalar",
	layout: "Layout Automático",
	errorTitle: "Erro",
	invalidToolMessage: "O modelo de função do raster não é válido.",
	out: "Fora",
	zoomIn: "Mais Zoom",
	zoomOut: "Menos Zoom",
	zoomToFit: "Ajustar na Janela",
	panOn: "Trocar para modo mover",
	panOff: "Desativar modo mover",
	defaultModelName: "Modelo de Ferramenta",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Modelo de Função do Raster",
	defaultToolDescription: "Adicionar um breve resumo sobre a função do raster.",
	defaultHelpText: "Clique no ícone de ajuda para editar o texto de ajuda",
	editHelpTitle: "Editar Ajuda",
	saveLabel: "Salvar",
	cancelLabel: "Cancelar",
	thumbnail: {
		wrongImageType: "Tipo de imagem selecionado errado",
		notAvailable: "Miniatura não disponível",
		loadError: "Não foi possível carregar a imagem",
		chooseFile: "Clique para escolher arquivo"
	}
};
const saveUtils = {
	thumbnail: "Miniatura",
	sharing: "Compartilhamento"
};
const close = "Fechar";
const unsavedWarningExisting = "Gostaria de salvar as alterações no item <b>${itemTitle}</b> ?";
const unsavedWarningNew = "Gostaria de salvar as suas alterações?";
const saveAs = "Salvar Como";
const dontSave = "Não Salvar";
const unsavedTitle = "Alterações Não Salvas";
const invalidRFTMessage = "O modelo de função do raster criado não é válido.";
const errorTitle = "Erro";
const breadcrumb = "Editor de Função do Raster";
const breadcrumbEditor = "Conteúdo > Editor de Função do Raster";
const viewerModeTitle = "Somente Leitura";
const viewerModeMessage = "O item do modelo de função raster é somente leitura. As alterações não podem ser salvas.";
const userStartDirection = "Selecione uma função para iniciar a construção de um modelo de função do raster.";
const selectFunction = "Adicionar Função";
const deselectFunction = "Função Remover";
const dialogTitle = "Sistema";
const category = "Categorias";
const search = "Procurar Funções de Raster";
const categoryNames = {
	analysis: "Análise",
	appearance: "Aparência",
	classification: "Classificação",
	conversion: "Conversão",
	correction: "Correção",
	dataManagement: "Gerenciamento de Dados",
	distance: "Distância",
	distanceLegacy: "Distância (Validada)",
	hydrology: "Hidrologia",
	math: "Matemática",
	mathConditional: "Matemática: Condicional",
	mathLogical: "Matemática: Lógica",
	mathTrigonometric: "Matemática: Trigonométrico",
	reclass: "Reclassificar",
	statistical: "Estatística",
	surface: "Superfície"
};
const commonStrings_ptBR = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_ptBR);


//# sourceMappingURL=common-strings.pt-BR-13a658bd.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,