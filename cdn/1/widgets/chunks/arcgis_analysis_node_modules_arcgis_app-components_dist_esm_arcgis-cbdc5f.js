"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-cbdc5f"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-item-category-schema-editor.entry.js":
/*!*************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-item-category-schema-editor.entry.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_item_category_schema_editor: () => (/* binding */ ArcgisItemCategorySchemaEditor)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _categories_9f0f37ee_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./categories-9f0f37ee.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-9f0f37ee.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./privileges-5c382f61.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js");
/* harmony import */ var _util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util-2a0e2f08.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/util-2a0e2f08.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _query_d62660d4_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./query-d62660d4.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/query-d62660d4.js");
/* harmony import */ var _group_6a6303b0_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./group-6a6303b0.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/group-6a6303b0.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/* harmony import */ var _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./categories-ca134005.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


















const getItemCategoryAggregation = async (user, portal, group) => {
    const url = group ? `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_5__.g)(portal)}/content/groups/${group.id}/` : `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_5__.g)(portal)}`;
    const queryParams = group
        ? { q: _query_d62660d4_js__WEBPACK_IMPORTED_MODULE_6__.H, countFields: "access,contentstatus,groupCategories" }
        : { q: `orgid:${user.orgId} ${_query_d62660d4_js__WEBPACK_IMPORTED_MODULE_6__.H}`, countFields: "categories" };
    try {
        const searchResult = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_5__.r)(`${url}search`, Object.assign(Object.assign({}, queryParams), { countSize: 200, num: 0, f: "json" }));
        return { result: searchResult.aggregations.counts[0] };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
const updateSchema = async ({ portal, group, categorySchema }) => {
    try {
        const orgEndpoint = group ? (0,_group_6a6303b0_js__WEBPACK_IMPORTED_MODULE_7__.g)(portal, group) : `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_5__.g)(portal)}/portals/${portal.id}/`;
        await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_5__.r)(`${orgEndpoint}assignCategorySchema`, { categorySchema: JSON.stringify({ categorySchema }) }, {}, "post");
        return {};
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
const deleteSchema = async (portal, group) => {
    try {
        const orgEndpoint = group ? (0,_group_6a6303b0_js__WEBPACK_IMPORTED_MODULE_7__.g)(portal, group) : `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_5__.g)(portal)}/portals/${portal.id}/`;
        await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_5__.r)(`${orgEndpoint}deleteCategorySchema`, {}, {}, "post");
        return {};
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
const getStandardSetCategories = async (portal) => {
    try {
        const [{ categorySchema: livingAtlasCategories }, { categorySchema: inspireCategories }, { categorySchema: isoCategories }] = await Promise.all([
            (0,_categories_9f0f37ee_js__WEBPACK_IMPORTED_MODULE_1__.a)(portal, "LivingAtlas"),
            (0,_categories_9f0f37ee_js__WEBPACK_IMPORTED_MODULE_1__.a)(portal, "Inspire"),
            (0,_categories_9f0f37ee_js__WEBPACK_IMPORTED_MODULE_1__.a)(portal, "ISO")
        ]);
        return {
            result: { LivingAtlas: livingAtlasCategories, Inspire: inspireCategories, ISO: isoCategories }
        };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};

const cleanData = (curData) => {
    curData.forEach((datum) => {
        datum.description && delete datum.description;
        datum.categories ? cleanData(datum.categories) : (datum.categories = []);
    });
};
/**
 * Prepare a category schema object for submission to server
 */
const cleanTemplateData = (originalSchema) => {
    const schema = structuredClone(originalSchema);
    cleanData(schema);
    return schema;
};

const arcgisItemCategorySchemaEditorCss = ".stage{height:100%;overflow:hidden;--tw-translate-x:0px;transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));background-color:var(--calcite-color-background);display:flex}@media screen and (min-width: 1080px){.stage{height:min(700px, 60vh)}}.modal{--calcite-modal-content-padding:0;--calcite-modal-width:48rem}.modal--large{--calcite-modal-width:1080px}.template-container{overflow:auto;width:20rem;padding:1rem}.template-title{margin-top:0px;margin-bottom:0px;margin-bottom:1rem;font-size:1.125rem}.template-link{font-size:0.75rem}.inner-container{overflow:auto;width:100%;padding:2rem}.inner-container--new-category{padding-inline-start:0.5rem;padding:1rem}.help-text{margin-top:0px}.confirm-modal{--calcite-modal-width:32rem}.confirm-modal-content{padding:1rem}";

const ArcgisItemCategorySchemaEditor = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.workflowCancel = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "workflowCancel", 7);
        this.newSchemaWorkflowComplete = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "newSchemaWorkflowComplete", 7);
        this.deleteAllSchema = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "deleteAllSchema", 7);
        this.hasChangeSinceLastOpen = false;
        this.didFetchTemplates = false;
        this.templateInfo = {
            // Schema will be filled in later
            custom: { schema: [{ title: "Categories", categories: [] }] },
            arcgis: { schema: [], learnMoreId: "120001580" },
            iso: { schema: [], learnMoreId: "120001581" },
            inspire: { schema: [], learnMoreId: "120001582" }
        };
        this.fetchCategoryData = async () => {
            var _a, _b;
            const { user, portal, setCategorySchema, group, templateInfo, didFetchTemplates } = this;
            const [{ result: categorySchema }, { result: categoryAggregationData }] = await Promise.all([
                (0,_categories_9f0f37ee_js__WEBPACK_IMPORTED_MODULE_1__.g)({ user, portal, group }),
                getItemCategoryAggregation(user, portal, group)
            ]);
            if (!((_b = (_a = categorySchema === null || categorySchema === void 0 ? void 0 : categorySchema[0]) === null || _a === void 0 ? void 0 : _a.categories) === null || _b === void 0 ? void 0 : _b.length)) {
                // There can be no categories or no subcategories other than the root
                this.rootCategoryTitle = "Categories";
                this.categorySchema = [];
                this.newCategoryMode = true;
                if (!didFetchTemplates) {
                    this.isFetchingTemplate = true;
                    // TODO: handle error
                    const { result } = await getStandardSetCategories(portal);
                    templateInfo.arcgis.schema = result.LivingAtlas;
                    templateInfo.iso.schema = result.ISO;
                    templateInfo.inspire.schema = result.Inspire;
                    this.didFetchTemplates = true;
                    this.isFetchingTemplate = false;
                }
                return;
            }
            setCategorySchema(categorySchema);
            this.categoryAggregationData = categoryAggregationData;
        };
        this.setCategorySchema = (categorySchema) => {
            // The first one is always the root category with title "Categories" which we don't care about
            this.rootCategoryTitle = categorySchema[0].title; // But we still need to add it back when calling update
            this.categorySchema = categorySchema[0].categories;
        };
        this.closeDialog = () => {
            this.schemaToDelete = null;
            this.workflowCancel.emit({ hasChangeSinceLastOpen: this.hasChangeSinceLastOpen });
        };
        this.updateSchema = async ({ schemaToUpdate, ignoreNewCategoryMode = false, optimisticUpdate = true }) => {
            const { portal, rootCategoryTitle, handleError, fetchCategoryData, newCategoryMode, group, deleteAllSchema } = this;
            if (newCategoryMode && !ignoreNewCategoryMode) {
                this.hasUnsavedChanges = schemaToUpdate.length > 0;
                this.categorySchema = schemaToUpdate;
                return true;
            }
            this.hasChangeSinceLastOpen = true;
            // Optimistic update
            const prevSchema = this.categorySchema;
            optimisticUpdate && (this.categorySchema = schemaToUpdate);
            const updateSchemaHelper = async () => {
                this.error = null;
                // If there is no schema left, we call delete instead of update
                if (schemaToUpdate.length === 0) {
                    const { error } = await deleteSchema(portal, group);
                    if (!error) {
                        this.newCategoryMode = true;
                        deleteAllSchema.emit();
                    }
                    else {
                        // TODO: handle error
                        handleError("generic");
                        optimisticUpdate && (this.categorySchema = prevSchema);
                    }
                    return;
                }
                const { error } = await updateSchema({
                    portal,
                    categorySchema: [
                        {
                            title: rootCategoryTitle,
                            categories: newCategoryMode ? cleanTemplateData(schemaToUpdate) : schemaToUpdate
                        }
                    ],
                    group
                });
                if (!error) {
                    this.hasUnsavedChanges = false;
                    await fetchCategoryData();
                }
                else {
                    // TODO: handle error
                    handleError("generic");
                    optimisticUpdate && (this.categorySchema = prevSchema);
                }
            };
            /**
             * Just return true without `await` so the optimistic update works
             *  which will disable the new category input right away and rollback if there's an error
             */
            updateSchemaHelper();
            return true;
        };
        this.finishSetupNewCategorySchema = async () => {
            const { newSchemaWorkflowComplete, categorySchema, updateSchema } = this;
            const success = await updateSchema({
                schemaToUpdate: categorySchema,
                ignoreNewCategoryMode: true
            });
            if (success) {
                this.newCategoryMode = false;
                newSchemaWorkflowComplete.emit({ newSchema: categorySchema });
            }
        };
        this.renderTemplates = () => {
            const { templateInfo, i18n, chosenTemplate, config, setCategorySchema } = this;
            const { helpBase, helpMap } = config;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "template-container" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "template-title" }, i18n.template.title), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile-select-group", null, Object.keys(templateInfo).map((templateKey) => {
                const { learnMoreId } = templateInfo[templateKey];
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile-select", { key: templateKey, checked: chosenTemplate === templateKey, description: i18n.template.templateList[templateKey].message, heading: i18n.template.templateList[templateKey].title, width: "auto", value: templateKey, onCalciteTileSelectChange: (e) => {
                        const newTemplate = e.target.value;
                        this.chosenTemplate = newTemplate;
                        setCategorySchema(templateInfo[newTemplate].schema);
                        // User can save a template as is
                        this.hasUnsavedChanges = newTemplate !== "custom";
                    } }, learnMoreId && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { href: `${helpBase}${helpMap[learnMoreId]}`, role: "presentation", class: "template-link", iconEnd: "launch", target: "_blank", rel: "noopener noreferrer" }, i18n.template.learnMore))));
            }))));
        };
        this.renderDeleteConfirmationModal = () => {
            var _a;
            const { i18n, updateSchema, schemaToDelete } = this;
            if (!schemaToDelete) {
                return null;
            }
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { kind: "danger", scale: "m", widthScale: "s", onCalciteModalClose: (event) => {
                    event.stopPropagation();
                    this.schemaToDelete = null;
                }, open: !!schemaToDelete, class: "confirm-modal" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header" }, i18n.warning.deleteInUseCategory.title), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content", class: "confirm-modal-content" }, i18n.warning.deleteInUseCategory.message.replace("${numItem}", (_a = schemaToDelete.count) === null || _a === void 0 ? void 0 : _a.toLocaleString())), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "secondary", appearance: "outline", "data-id": "cancelButton", onClick: () => (this.schemaToDelete = null), width: "full" }, i18n.cancel), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "primary", appearance: "solid", "data-id": "nextButton", onClick: () => {
                    updateSchema({ schemaToUpdate: schemaToDelete.schema });
                    this.schemaToDelete = null;
                }, width: "full" }, i18n.warning.deleteInUseCategory.cta)));
        };
        this.handleError = (type) => {
            const { i18n } = this;
            let message = i18n.error[type].message;
            if (type === "maxCharacter") {
                message = message.replace("${maxCharacter}", `${_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_4__.M}`);
            }
            this.error = { title: i18n.error[type].title, message };
        };
        this.user = undefined;
        this.portal = undefined;
        this.config = undefined;
        this.group = undefined;
        this.isActive = undefined;
        this.newCategoryMode = false;
        this.categorySchema = [];
        this.categoryAggregationData = {
            fieldName: "categories",
            fieldValues: []
        };
        this.hasUnsavedChanges = undefined;
        this.error = null;
        this.isFetchingSchemaOnActiveChange = false;
        this.isFetchingTemplate = false;
        this.schemaToDelete = undefined;
        this.chosenTemplate = "custom";
    }
    async componentWillLoad() {
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el);
        this.i18n = locale[0];
    }
    componentDidLoad() {
        this.handleIsActiveChange();
    }
    async handleIsActiveChange() {
        // Just want to reset this whenever isActive changes
        this.hasChangeSinceLastOpen = false;
        this.chosenTemplate = "custom";
        this.error = null;
        this.schemaToDelete = null;
        // Public user doesn't have access to categories unless they do it through group
        if (this.isActive && (!(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_3__.a)(this.user) || this.group)) {
            this.isFetchingSchemaOnActiveChange = true;
            await this.fetchCategoryData();
            this.isFetchingSchemaOnActiveChange = false;
        }
    }
    render() {
        const { newCategoryMode, categorySchema, categoryAggregationData, isActive, isFetchingSchemaOnActiveChange, closeDialog, i18n, updateSchema, error, renderTemplates, chosenTemplate, isFetchingTemplate, workflowCancel, finishSetupNewCategorySchema, hasUnsavedChanges, handleError, renderDeleteConfirmationModal } = this;
        // ! Have to check for isFetchingSchemaOnActiveChange or the modal width won't change dynamically once it's rendered
        if (!isActive || isFetchingSchemaOnActiveChange) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { open: isActive, onCalciteModalClose: closeDialog, scale: "m", class: { modal: true, "modal--large": newCategoryMode } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header", class: "header" }, i18n.modalHeader), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content", class: "stage" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-alert", { icon: true, open: !!error, label: error === null || error === void 0 ? void 0 : error.title, kind: "danger", onCalciteAlertClose: () => (this.error = null) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, error === null || error === void 0 ? void 0 : error.message)), isFetchingTemplate && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-scrim", { loading: true }, i18n.loadingText), newCategoryMode && renderTemplates(), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { "inner-container": true, "inner-container--new-category": newCategoryMode } }, !newCategoryMode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "help-text" }, i18n.helpText), renderDeleteConfirmationModal(), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-schema-editor", { newCategoryMode: newCategoryMode, showInputByDefault: chosenTemplate === "custom", canEditCategory: () => true, categoryAggregationData: categoryAggregationData, categorySchema: categorySchema, canCollapseAll: !newCategoryMode, saveNewTitle: async ({ newSchema }) => 
            // We don't want to optimistic update here since the input has the loading spinner
            updateSchema({ schemaToUpdate: newSchema, optimisticUpdate: false }), saveNewCategory: async ({ newSchema }) => updateSchema({ schemaToUpdate: newSchema }), onArcgisSchemaEditorDelete: async ({ detail: { newSchema, categoryCount } }) => categoryCount
                ? (this.schemaToDelete = { schema: newSchema, count: categoryCount })
                : updateSchema({ schemaToUpdate: newSchema }), onArcgisSchemaEditorListOrderChange: async ({ detail: { newSchema } }) => updateSchema({ schemaToUpdate: newSchema }), onArcgisSchemaEditorInvalidMove: ({ detail: { errorCode } }) => {
                handleError(errorCode);
            }, onArcgisSchemaEditorTitleInvalid: ({ detail: { errorCode } }) => {
                handleError(errorCode);
            } }))), newCategoryMode && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "secondary", appearance: "outline-fill", "data-id": "cancelButton", onClick: () => workflowCancel.emit(), width: "full" }, i18n.cancel), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "primary", appearance: "solid", "data-id": "nextButton", onClick: finishSetupNewCategorySchema, width: "full", disabled: !hasUnsavedChanges }, i18n.finishSetup)))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "isActive": ["handleIsActiveChange"]
    }; }
};
ArcgisItemCategorySchemaEditor.style = arcgisItemCategorySchemaEditorCss;



//# sourceMappingURL=arcgis-item-category-schema-editor.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-9f0f37ee.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-9f0f37ee.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ fetchLivingAtlasCategories),
/* harmony export */   b: () => (/* binding */ fetchGroupCategories),
/* harmony export */   f: () => (/* binding */ fetchCategories),
/* harmony export */   g: () => (/* binding */ getItemCategorySchema),
/* harmony export */   u: () => (/* binding */ updateCategories)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _group_6a6303b0_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./group-6a6303b0.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/group-6a6303b0.js");
/* harmony import */ var _privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./privileges-5c382f61.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */





const getItemCategorySchema = async ({ portal, user, group, useCache = false }) => {
    var _a;
    try {
        const fetchResult = await (group
            ? fetchGroupCategories(group.id, portal, useCache)
            : fetchCategories(portal, user, useCache));
        return { result: (_a = fetchResult === null || fetchResult === void 0 ? void 0 : fetchResult.categorySchema) !== null && _a !== void 0 ? _a : null };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
async function fetchCategories(portal, user, useCache = true) {
    portal !== null && portal !== void 0 ? portal : (portal = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal);
    user !== null && user !== void 0 ? user : (user = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user);
    if (!(portal === null || portal === void 0 ? void 0 : portal.id) || (user && (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_3__.a)(user))) {
        return null;
    }
    const getSchema = () => (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}portals/${portal.id}/categorySchema`);
    return useCache ? (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(getSchema, "categorySchema", portal.id) : getSchema();
}
async function fetchGroupCategories(groupId, portal, useCache = true) {
    portal !== null && portal !== void 0 ? portal : (portal = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal);
    if (!groupId || !portal) {
        return null;
    }
    const getSchema = () => (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${(0,_group_6a6303b0_js__WEBPACK_IMPORTED_MODULE_2__.g)(portal, { id: groupId })}categorySchema`);
    return useCache ? (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(getSchema, "categorySchema", groupId) : getSchema();
}
async function fetchLivingAtlasSchema(portal, categoryName) {
    var _a;
    const base = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal);
    const self = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${base}portals/self`);
    const groupSearch = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${base}community/groups?q=${self.contentCategorySetsGroupQuery}`);
    const categoryGroup = (_a = groupSearch === null || groupSearch === void 0 ? void 0 : groupSearch.results) === null || _a === void 0 ? void 0 : _a[0];
    const schemaItemSearch = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${base}content/groups/${categoryGroup.id}/search`, {
        q: `typekeywords: ${categoryName}`
    });
    const schemaItem = schemaItemSearch.results[0];
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${base}content/items/${schemaItem.id}/data`);
}
async function fetchLivingAtlasCategories(portal, categoryName, useCache = true) {
    const getSchema = () => fetchLivingAtlasSchema(portal, categoryName);
    return useCache ? (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(getSchema, "categorySchema", categoryName) : getSchema();
}
async function updateCategories({ categories, itemIds, portal }) {
    try {
        const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}/content/updateItems`;
        const items = JSON.stringify(itemIds.map((id) => {
            return {
                [id]: { categories: Array.isArray(categories) ? categories : categories[id] }
            };
        }));
        return { result: await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, { items }, {}, "post") };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
}



//# sourceMappingURL=categories-9f0f37ee.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CATEGORY_BASE_PATH),
/* harmony export */   U: () => (/* binding */ UPPER_CATEGORY_BASE_PATH),
/* harmony export */   a: () => (/* binding */ getCategoryUIPath),
/* harmony export */   g: () => (/* binding */ getRootCategoryPath)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const CATEGORY_BASE_PATH = "/categories";
const UPPER_CATEGORY_BASE_PATH = "/Categories";

// TODO: add unit tests
/**
 * Construct the path of the category based on the parent path and the category title
 */
const getCategoryUIPath = (parentPath, category, lowerCase = true) => {
    const basePath = parentPath !== null && parentPath !== void 0 ? parentPath : "";
    return `${basePath}${basePath.endsWith("/") ? "" : "/"}${lowerCase ? category.title.toLocaleLowerCase() : category.title}`;
};
/**
 * Find the root node title to use for categories
 */
function getRootCategoryPath(categories) {
    var _a;
    let categoryTitle = (_a = categories === null || categories === void 0 ? void 0 : categories[0]) === null || _a === void 0 ? void 0 : _a.title;
    if (categoryTitle && categoryTitle.charAt(0) !== "/") {
        categoryTitle = `/${categoryTitle}`;
    }
    return categoryTitle || UPPER_CATEGORY_BASE_PATH;
}



//# sourceMappingURL=categories-ca134005.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/group-6a6303b0.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/group-6a6303b0.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ getGroupRestBaseUrl)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const getGroupRestBaseUrl = (portal, group) => (0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_1__.a)(`${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}/community/groups/${group.id}`);



//# sourceMappingURL=group-6a6303b0.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isSubscriber),
/* harmony export */   b: () => (/* binding */ isPremium),
/* harmony export */   c: () => (/* binding */ canUpdateItem),
/* harmony export */   d: () => (/* binding */ itemsBelongToUserOrg),
/* harmony export */   g: () => (/* binding */ getItemHomeAppUrl),
/* harmony export */   i: () => (/* binding */ isOwner),
/* harmony export */   u: () => (/* binding */ userIsItemAdmin)
/* harmony export */ });
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


function isEsri(item) {
    var _a;
    return !!((_a = item.owner) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes("esri"));
}
function isPremium(item) {
    var _a;
    return isEsri(item) && !!((_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("Requires Credits"));
}
function isSubscriber(item) {
    var _a;
    return isEsri(item) && !!((_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("Requires Subscription"));
}
function isOwner(item, user) {
    return item.owner === user.username;
}
/**
 * Can the user update the item
 */
function canUpdateItem(item, user) {
    return userIsItemAdmin(item, user) || item.itemControl === "update";
}
/**
 * Is the user either an owner or admin of the item
 */
function userIsItemAdmin(item, user) {
    return isOwner(item, user) || isItemAdmin(item, user);
}
/**
 * Does the user have admin capabilities on this item
 */
function isItemAdmin(item, user) {
    var _a;
    // if this flag is already set (probably home app), use it
    if (item.isAdmin != null) {
        return !!item.isAdmin;
    }
    const itemOwner = item.owner;
    const itemControlAdmin = item.itemControl === "admin";
    const esriUsers = ["esri_livingatlas", "esri_demographics", "esri_boundaries"];
    if (((_a = item.portal) === null || _a === void 0 ? void 0 : _a.isPortal) &&
        !isOwner(item, user) &&
        itemControlAdmin &&
        itemOwner.includes("esri_") &&
        // portal incorrectly returns "itemControl="admin" for esri owned items
        !esriUsers.includes(itemOwner)) {
        return false;
    }
    return itemControlAdmin;
}
const itemsBelongToUserOrg = (items, user) => {
    return !!user.orgId && items.every((item) => item.isOrgItem);
};
const getItemHomeAppUrl = (itemId, baseUrl) => `${(0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_0__.a)(baseUrl)}item.html?id=${itemId}`;



//# sourceMappingURL=item-3535552d.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isPublicUser),
/* harmony export */   b: () => (/* binding */ isOrgAdmin),
/* harmony export */   c: () => (/* binding */ isHostedPortal),
/* harmony export */   d: () => (/* binding */ isCustomRole),
/* harmony export */   e: () => (/* binding */ canUpdateOrgGroups),
/* harmony export */   f: () => (/* binding */ canUpdateItemCategories),
/* harmony export */   g: () => (/* binding */ canManageCollaborations),
/* harmony export */   h: () => (/* binding */ isOrgUser),
/* harmony export */   i: () => (/* binding */ isDeveloper),
/* harmony export */   j: () => (/* binding */ canShareItemToGroup),
/* harmony export */   k: () => (/* binding */ canShareItemToOrg),
/* harmony export */   l: () => (/* binding */ adminCanShareOthersItemToGroup),
/* harmony export */   m: () => (/* binding */ canShareOthersItemsToOrg),
/* harmony export */   n: () => (/* binding */ canShareItemToPublic),
/* harmony export */   o: () => (/* binding */ canShareOthersItemsToPublic),
/* harmony export */   p: () => (/* binding */ hasAdminSharePrivilege),
/* harmony export */   q: () => (/* binding */ canViewOthersOrgItems)
/* harmony export */ });
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const getUserRole = (user) => {
    var _a, _b, _c;
    return typeof (user === null || user === void 0 ? void 0 : user.role) === "string" && !!(user === null || user === void 0 ? void 0 : user.role)
        ? user === null || user === void 0 ? void 0 : user.role
        : (_b = (_a = user === null || user === void 0 ? void 0 : user.roleId) !== null && _a !== void 0 ? _a : user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : (_c = user === null || user === void 0 ? void 0 : user.sourceJSON) === null || _c === void 0 ? void 0 : _c.id;
};
function isPublicUser(user) {
    return user && !user.orgId;
}
function isHostedPortal(portal) {
    return !portal.isPortal || !!portal.isBackedBySDS;
}
function isDeveloper(subscriptionInfo) {
    const devSubscriptionTypes = ["Trial Developer", "Developer", "Developer Subscription"];
    return devSubscriptionTypes.includes(subscriptionInfo === null || subscriptionInfo === void 0 ? void 0 : subscriptionInfo.type);
}
function isOrgAdmin(user) {
    return getUserRole(user) === "org_admin" || getUserRole(user) === "account_admin";
}
function isOrgUser(user) {
    return getUserRole(user) === "org_user" || getUserRole(user) === "account_user";
}
function isCustomRole(user) {
    // The Home App collapse the `roleId` and `role` into a single `id` property, that's why
    //  https://devtopia.esri.com/WebGIS/arcgis-portal-app/blob/master/src/js/arcgisonline/sharing/dijit/Role.ts#L469 works
    // In practice, we only need to check if `roleId` exist
    //  https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/44682#issuecomment-4146866
    return !!(user === null || user === void 0 ? void 0 : user.roleId) && user.roleId.length > 0;
}
/**
 * Checks whether the privilege "portal:admin:updateItemCategorySchema" is granted.
 */
function canUpdateItemCategories(user) {
    var _a;
    return !!((_a = user === null || user === void 0 ? void 0 : user.privileges) === null || _a === void 0 ? void 0 : _a.includes("portal:admin:updateItemCategorySchema"));
}
/**
 * Checks whether the privilege "portal:admin:updateGroups" is granted.
 */
function canUpdateOrgGroups(user) {
    var _a;
    return !!((_a = user === null || user === void 0 ? void 0 : user.privileges) === null || _a === void 0 ? void 0 : _a.includes("portal:admin:updateGroups"));
}
/**
 * Checks whether the user is allowed to update other user's items in their organization.
 */
function canUpdateOrgItems(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:updateItems");
}
/**
 * Checks to ensure the portal is an organization portal
 */
function isOrgPortal(portal) {
    return !!(portal.urlKey && portal.customBaseUrl) || !!portal.isPortal;
}
/**
 * Checks whether the user is allowed to share their item to groups
 */
function canShareItemToGroup(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToGroup");
}
/**
 * Checks whether the user can share an item on a given portal
 */
function canShare(user, portal) {
    return (!isOrgPortal(portal) ||
        canShareItemToGroup(user) ||
        canShareItemToOrg(user) ||
        (!!portal.canSharePublic && canShareItemToPublic(user)));
}
/**
 * Checks whether the user is allowed to share their item ot the organization.
 */
function canShareItemToOrg(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToOrg");
}
/**
 * Checks whether the user is allowed to share their item to public
 */
function canShareItemToPublic(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToPublic");
}
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItemsToOrg(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToOrg");
}
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItemsToPublic(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToPublic");
}
/**
 * Checks whether the user can share other user's items
 */
function adminCanShareOthersItemToGroup(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToGroup");
}
/**
 * Checks whether the user is in an allowed organization and has the power to manage collaborations
 */
function canManageCollaborations(config, user, portal, subscriptionInfo) {
    const excludedOrgTypes = ["Trial", "Trial Press", "Trial Developer", "Developer Subscription", "Evaluation"];
    const isValidOrgType = subscriptionInfo && !excludedOrgTypes.includes(subscriptionInfo.type);
    const hasPrivilege = ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:manageCollaborations");
    return !!((config === null || config === void 0 ? void 0 : config.collaborationsEnabled) &&
        user &&
        (isOrgAdmin(user) || hasPrivilege) &&
        ((portal === null || portal === void 0 ? void 0 : portal.isPortal) || isValidOrgType));
}
/**
 * Checks whether the user can view other organization users' items
 */
function canViewOrgItems(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:viewItems");
}
/**
 * Checks whether the user can view other organization users' items
 */
function canViewOthersOrgItems(user) {
    return !!user && (!isCustomRole(user) || (isCustomRole(user) && canViewOrgItems(user)));
}
// TODO: add unit tests
const hasAdminSharePrivilege = ({ items, user, portal }) => {
    const item = items[0];
    // enterprise incorrectly returns items owned by "esri_" as item control admin (WebGIS/arcgis-portal-app#38695)
    const owner = item.owner;
    const whitelistOwner = ["esri_livingatlas"];
    if (portal.isPortal && owner !== user.username && owner.includes("esri_") && !whitelistOwner.includes(owner)) {
        return false;
    }
    const isOwnerOrAdmin = (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.u)(item, user);
    const isCustom = isCustomRole(user);
    const canShareOrgItems = canShareOthersItems(user);
    const canUpdateAndShare = (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.c)(item, user) &&
        canUpdateOrgItems(user) &&
        !isCustom &&
        (canShare(user, portal) || canShareOthersItems(user));
    // if it's the item owner or admin, or custom admin who can share
    return isOwnerOrAdmin || canUpdateAndShare || ((0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.d)(items, user) && canShareOrgItems);
};
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItems(user) {
    return adminCanShareOthersItemToGroup(user) || canShareOthersItemsToOrg(user) || canShareOthersItemsToPublic(user);
}



//# sourceMappingURL=privileges-5c382f61.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/query-d62660d4.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/query-d62660d4.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   H: () => (/* binding */ HIDDEN_ITEMS_QUERY)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const HIDDEN_ITEMS_QUERY = `-type:"Code Attachment" -type:"Featured Items" -type:"Symbol Set" -type:"Color Set" -type:"Windows Viewer Add In" -type:"Windows Viewer Configuration" -type:"Map Area" -typekeywords:"MapAreaPackage" -type:"Indoors Map Configuration" -typekeywords:"SMX"`;



//# sourceMappingURL=query-d62660d4.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/util-2a0e2f08.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/util-2a0e2f08.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   M: () => (/* binding */ MAX_CATEGORY_NAME_LENGTH),
/* harmony export */   a: () => (/* binding */ getNewCategorySchemaFromDelete),
/* harmony export */   b: () => (/* binding */ getCategoryFromPath),
/* harmony export */   c: () => (/* binding */ checkNewCategoryTitleValid),
/* harmony export */   d: () => (/* binding */ getNewCategorySchemaFromTitleChange),
/* harmony export */   e: () => (/* binding */ getNewCategorySchemaFromCategoryAdd),
/* harmony export */   f: () => (/* binding */ getPathLength),
/* harmony export */   g: () => (/* binding */ getNewCategorySchemaFromMove),
/* harmony export */   h: () => (/* binding */ getUICategoryFromCategorySchema),
/* harmony export */   i: () => (/* binding */ countNumCategories)
/* harmony export */ });
/* harmony import */ var _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./categories-ca134005.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


// TODO: add unit tests
const getNewCategorySchemaFromMove = (category, { fromCategory: { path: fromPath }, toCategory: { path: toPath }, fromIndex, toIndex }) => {
    // Copy since this will be a destructive operation
    const uiCategory = structuredClone(category);
    const fromCategory = getCategoryFromPath(uiCategory, fromPath);
    let toCategory = fromCategory;
    if (fromPath !== toPath) {
        toCategory = getCategoryFromPath(uiCategory, toPath);
    }
    const [removed] = fromCategory.targetCategory.categories.splice(fromIndex, 1);
    toCategory.targetCategory.categories.splice(toIndex, 0, removed);
    return getCategorySchemaFromUICategory(uiCategory);
};
const getNewCategorySchemaFromTitleChange = (category, { newTitle, path }) => {
    const uiCategory = structuredClone(category);
    const categoryToChange = getCategoryFromPath(uiCategory, path);
    categoryToChange.targetCategory.title = newTitle;
    return getCategorySchemaFromUICategory(uiCategory);
};
const getNewCategorySchemaFromCategoryAdd = (category, { newTitle, path }) => {
    const uiCategory = structuredClone(category);
    // Remove the last part since it's just the placeholder
    // e.g. `/categories/category 1/new-input` -> `/categories/category 1`
    const containerPath = path.replace(/\/[^/]+$/, "");
    if (containerPath) {
        const { targetCategory } = getCategoryFromPath(uiCategory, containerPath);
        targetCategory.categories.push({ title: newTitle, categories: [], count: 0, path: null });
    }
    else {
        /**
         * This means we're adding a root level category when there is no category yet
         *
         * Can happens when we first set up the category schema
         */
        uiCategory.categories.push({ title: newTitle, categories: [], count: 0, path: null });
    }
    return getCategorySchemaFromUICategory(uiCategory);
};
const getNewCategorySchemaFromDelete = (category, { path }) => {
    const uiCategory = structuredClone(category);
    const { targetIndex, parentCategory } = getCategoryFromPath(uiCategory, path);
    parentCategory === null || parentCategory === void 0 ? void 0 : parentCategory.categories.splice(targetIndex, 1);
    return getCategorySchemaFromUICategory(uiCategory);
};
// * --- Utils
// Path we want to remove the base path since we count root as 0th level then also remove the beginning `/` to avoid empty string
const getPathLength = (path) => { var _a; return (_a = path === null || path === void 0 ? void 0 : path.replace(_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C, "").slice(1).split("/").length) !== null && _a !== void 0 ? _a : 0; };
/**
 * Get the category from schema based on the path
 */
const getCategoryFromPath = (uiCategory, path) => {
    if (path == null || path === _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C) {
        // Root level
        return { targetCategory: uiCategory, targetIndex: 1, parentCategory: null };
    }
    // Path starts with `/` so remove it
    const pathParts = path.slice(1).split("/");
    let curPath = path.indexOf(_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C) === 0 ? (0,_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.a)("", { title: pathParts.shift() }) : "";
    let parentCategory = null;
    let targetCategory = uiCategory;
    let targetIndex = 0;
    do {
        curPath = (0,_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.a)(curPath, { title: pathParts.shift() });
        parentCategory = targetCategory;
        targetIndex = targetCategory.categories.findIndex((subcategory) => subcategory.path === curPath);
        targetCategory = targetCategory.categories[targetIndex];
    } while (pathParts.length > 0 && targetCategory.categories.length);
    return { targetCategory, targetIndex, parentCategory };
};
/**
 * Create a nested category schema from the aggregated search result starting from root
 */
const getUICategoryFromCategorySchema = (categorySchema, categoryAggregationData) => {
    var _a, _b;
    return ({
        title: "",
        path: null,
        count: (_b = (_a = categoryAggregationData.fieldValues.find((fieldValue) => fieldValue.value === _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C)) === null || _a === void 0 ? void 0 : _a.count) !== null && _b !== void 0 ? _b : 0,
        categories: getUICategoryFromCategorySchemaRecursive(null, categorySchema, categoryAggregationData)
    });
};
const getCategorySchemaFromUICategory = (uiCategory) => uiCategory.categories.map(getCategoryFromUICategory);
const getCategoryFromUICategory = (uiCategory) => ({
    title: uiCategory.title,
    categories: uiCategory.categories.map(getCategoryFromUICategory)
});
const getUICategoryFromCategorySchemaRecursive = (parentPath, categorySchema, categoryAggregationData) => {
    return categorySchema.map((category) => {
        var _a, _b;
        const path = (0,_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.a)(parentPath !== null && parentPath !== void 0 ? parentPath : _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C, category);
        const categoryCount = (_a = categoryAggregationData.fieldValues.find((fieldValue) => fieldValue.value === path)) === null || _a === void 0 ? void 0 : _a.count;
        const subcategories = getUICategoryFromCategorySchemaRecursive(path, (_b = category.categories) !== null && _b !== void 0 ? _b : [], categoryAggregationData);
        return {
            title: category.title,
            path,
            count: categoryCount !== null && categoryCount !== void 0 ? categoryCount : 0,
            categories: subcategories
        };
    });
};
const countNumCategories = (categorySchema) => {
    // + 1 is itself
    return categorySchema.reduce((acc, cur) => { var _a; return acc + 1 + countNumCategories((_a = cur.categories) !== null && _a !== void 0 ? _a : []); }, 0);
};
const checkNewCategoryTitleValid = ({ targetCategory, targetParentCategory }) => {
    var _a;
    const categoryLowerCaseTitle = (_a = targetCategory.title.toLocaleLowerCase()) === null || _a === void 0 ? void 0 : _a.trim();
    if (!categoryLowerCaseTitle) {
        return "emptyTitle";
    }
    if (categoryLowerCaseTitle.length > MAX_CATEGORY_NAME_LENGTH) {
        return "maxCharacter";
    }
    // No duplicate category name on the same level
    if (targetParentCategory.categories.some((category) => category.title.toLowerCase() === categoryLowerCaseTitle && category.path !== targetCategory.path)) {
        return "destinationHasSameName";
    }
    return null;
};
const MAX_CATEGORY_NAME_LENGTH = 100;



//# sourceMappingURL=util-2a0e2f08.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,