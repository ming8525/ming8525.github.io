"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-5a65ec"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-layer-override_3.entry.js":
/*!**************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-layer-override_3.entry.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_layer_override: () => (/* binding */ ArcgisLayerOverride),
/* harmony export */   arcgis_layer_override_properties: () => (/* binding */ ArcgisLayerOverrideProperties),
/* harmony export */   arcgis_layer_override_status: () => (/* binding */ ArcgisLayerOverrideStatus)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _localStorage_9c4e7a3a_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./localStorage-9c4e7a3a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-9c4e7a3a.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */









const CSS$2 = {
    container: "container",
    details: "details",
    buttons: "buttons",
    topButton: "top-button",
    properties: "properties",
    propertiesIcon: "properties-icon"
};

/**
 * get override status
 * @param props - LayerOverrideProps
 */
function getLayerOriginInfo(props) {
    const { layer, layerOriginUtils } = props;
    props.layerOriginInfo = layerOriginUtils.getLayerOriginInfo(layer, "web-map");
    //console.log("layerOriginInfo (web-map)", props.layerOriginInfo);
    //console.log("layerOriginInfo (portal-item)", layerOriginUtils.getLayerOriginInfo(layer, "portal-item"));
}

const arcgisLayerOverrideCss = ":host{height:100%}.container{padding:6px;background-color:white}.details{width:100%;margin-bottom:8px;cursor:pointer}.buttons{margin-bottom:14px}.top-button{margin-bottom:4px}.properties{margin-bottom:16px;cursor:pointer}.properties-icon{height:100%;padding:0 var(--calcite-notice-spacing-token-large)}";

const ArcgisLayerOverride = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisLayerOverrideChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerOverrideChange", 7);
        this.arcgisLayerOverrideDuplicateClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerOverrideDuplicateClick", 7);
        this.arcgisLayerOverrideSaveLayerClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerOverrideSaveLayerClick", 7);
        this.arcgisLayerOverrideSaveAsLayerClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerOverrideSaveAsLayerClick", 7);
        // --------------------------------------------------------------------------
        //
        //  Private methods
        //
        // --------------------------------------------------------------------------
        this.afterCreateSource = (node) => {
            this.sourceNode = node;
        };
        this.afterCreateStatusAction = (node) => {
            this.statusActionNode = node;
        };
        this.afterCreatePropertiesButton = (node) => {
            this.propertiesNode = node;
        };
        this.onPanelScroll = async () => {
            var _a, _b;
            if (this.statusPopover) {
                const rect = await ((_a = this.statusPopover) === null || _a === void 0 ? void 0 : _a.getPopoverRect());
                if ((rect === null || rect === void 0 ? void 0 : rect.top) < 0) {
                    this.closePopovers();
                }
            }
            if (this.propertiesPopover) {
                const rect = await ((_b = this.propertiesPopover) === null || _b === void 0 ? void 0 : _b.getPopoverRect());
                if ((rect === null || rect === void 0 ? void 0 : rect.top) < 0) {
                    this.closePopovers();
                }
            }
        };
        this.openDetails = () => {
            const { layer } = this;
            const { portalItem } = layer;
            let url;
            if (portalItem === null || portalItem === void 0 ? void 0 : portalItem.portal) {
                if (portalItem.portal.urlKey) {
                    url = `//${portalItem.portal.urlKey}.${portalItem.portal.customBaseUrl}/home/item.html?id=${portalItem.id}&sublayer=${layer.layerId}`;
                }
                else {
                    url = `//${portalItem.portal.portalHostname}/home/item.html?id=${portalItem.id}&sublayer=${layer.layerId}`;
                }
            }
            else {
                url = `${layer.url}/${layer.layerId}`;
            }
            window.open(url);
        };
        this.saveLayer = (event) => {
            event.stopPropagation();
            const { layer } = this;
            this.arcgisLayerOverrideSaveLayerClick.emit(layer.id);
        };
        this.saveAsLayer = (event) => {
            event.stopPropagation();
            const { layer } = this;
            this.arcgisLayerOverrideSaveAsLayerClick.emit(layer.id);
        };
        this.duplicateLayer = (event) => {
            event.stopPropagation();
            const { layer } = this;
            this.arcgisLayerOverrideDuplicateClick.emit(layer.id);
        };
        this.openStatus = async (event) => {
            event.stopPropagation();
            if (this.containerPanelNode.disabled) {
                return;
            }
            // layer status floating panel
            if (this.statusPopover) {
                if (this.statusPopover.parentNode) {
                    // already open, hide it
                    this.statusPopover.parentNode.removeChild(this.statusPopover);
                    this.statusPopover = null;
                    return;
                }
                else {
                    // got closed by something outside
                    this.statusPopover = null;
                }
            }
            this.closePopovers();
            await this.scrollIntoView(this.sourceNode);
            const { props, strings } = this;
            const popover = document.createElement("arcgis-layer-override-status");
            popover.props = props;
            popover.strings = strings;
            popover.popoverReferenceElement = this.sourceNode;
            document.body.appendChild(popover);
            this.statusPopover = popover;
            this.disableContainer(true);
        };
        this.openManageProps = async () => {
            // manage layer properties floating panel
            // layer status floating panel
            if (this.propertiesPopover) {
                if (this.propertiesPopover.parentNode) {
                    // already open, hide it
                    this.propertiesPopover.parentNode.removeChild(this.propertiesPopover);
                    this.propertiesPopover = null;
                    return;
                }
                else {
                    // got closed by something outside
                    this.propertiesPopover = null;
                }
            }
            this.closePopovers();
            await this.scrollIntoView(this.sourceNode);
            const { props, strings } = this;
            const popover = document.createElement("arcgis-layer-override-properties");
            popover.props = props;
            popover.strings = strings;
            popover.popoverReferenceElement = this.sourceNode;
            document.body.appendChild(popover);
            this.propertiesPopover = popover;
            this.disableContainer(true);
        };
        this.layer = undefined;
        this.config = undefined;
        this.portal = undefined;
        this.props = undefined;
        this.reRender = false;
    }
    closeAllPopoversHandler() {
        this.closePopovers();
    }
    arcgisLayerOverridePropChange() {
        this.arcgisLayerOverrideChange.emit();
        this.reRender = !this.reRender;
    }
    arcgisLayerOverrideStatusChange() {
        this.reRender = !this.reRender;
    }
    //--------------------------------------------------------------------------
    //
    //  public calls
    //
    //--------------------------------------------------------------------------
    /**
     * Set focus on component
     */
    async setFocus() { }
    /**
     * Close popovers before removing component
     */
    async done() {
        this.closePopovers();
    }
    /**
     * Refresh content, e.g. after layer properties changes
     */
    async refresh() {
        getLayerOriginInfo(this.props);
        this.reRender = !this.reRender;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        const [strings] = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
        this.strings = strings;
        // build LayerOverrideProps
        this.props = {
            layer: this.layer,
            portal: this.portal,
            config: this.config
        };
        const [layerOriginUtils] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__.l)(["esri/layers/support/layerOriginUtils"]);
        this.props.layerOriginUtils = layerOriginUtils;
        layerOriginUtils.isSupportedLayer(this.layer);
        getLayerOriginInfo(this.props);
    }
    async componentDidLoad() {
        var _a;
        // once component is visible make other calls
        this.containerPanelNode = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.q)(this.hostElement, "calcite-panel");
        if (!this.containerPanelNode) {
            this.containerPanelNode = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.q)(this.hostElement, "calcite-flow-item");
        }
        (_a = this.containerPanelNode) === null || _a === void 0 ? void 0 : _a.addEventListener("calcitePanelScroll", this.onPanelScroll);
    }
    disconnectedCallback() {
        var _a;
        (_a = this.containerPanelNode) === null || _a === void 0 ? void 0 : _a.removeEventListener("calcitePanelScroll", this.onPanelScroll);
        this.closePopovers();
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.container }, this.renderSource(), this.renderCopy(), this.renderStatus(), this.renderProperties())));
    }
    renderSource() {
        var _a;
        const { strings, layer } = this;
        const itemTitle = (_a = layer.portalItem) === null || _a === void 0 ? void 0 : _a.title;
        const layerTitle = layer.title;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.hostElement) === "rtl";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { ref: this.afterCreateSource }, strings.sourceLayer, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile", { class: CSS$2.details, heading: itemTitle && itemTitle !== layerTitle
                ? rtl
                    ? `${layerTitle} / ${itemTitle}`
                    : `${itemTitle} / ${layerTitle}`
                : layerTitle, description: layer.isTable ? "Table" : "Feature layer", onClick: this.openDetails }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { scale: "s", compact: true, slot: "content-end", icon: "launch", text: strings.sourceLayer, onClick: this.openDetails }))));
    }
    renderCopy() {
        var _a;
        const { strings, layer, props } = this;
        const { portal } = props;
        const canCreateItems = this.canCreateItems(portal === null || portal === void 0 ? void 0 : portal.user);
        const canSave = ["admin", "update"].indexOf((_a = layer.portalItem) === null || _a === void 0 ? void 0 : _a.itemControl) > -1;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$2.buttons }, canSave && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { width: "full", appearance: "outline-fill", kind: "neutral", iconStart: "save", class: CSS$2.topButton, label: strings.save, onClick: this.saveLayer }, strings.save)), canCreateItems && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { width: "full", appearance: "outline-fill", kind: "neutral", iconStart: "save", class: CSS$2.topButton, label: strings.saveAs, onClick: this.saveAsLayer }, strings.saveAs)), !layer.isTable && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { width: "full", appearance: "outline-fill", kind: "neutral", iconStart: "duplicate", label: strings.duplicate, onClick: this.duplicateLayer }, strings.duplicate))));
    }
    renderStatus() {
        const { strings, layer, props } = this;
        const { layerOriginInfo } = props;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { class: CSS$2.properties, width: "full", scale: "s", open: true, onClick: this.openStatus }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "title" }, layerOriginInfo.status === "source"
            ? strings.propsFromSource
            : layerOriginInfo.status === "overridden"
                ? strings.propsSetInWebmap
                : strings.somePropsSetInWebmap), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", icon: "information", scale: "s", compact: true, class: CSS$2.propertiesIcon, text: layer.isTable ? strings.tableStatus : strings.layerStatus, onClick: this.openStatus, ref: this.afterCreateStatusAction })));
    }
    renderProperties() {
        const { strings, layer } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", kind: "neutral", width: "full", label: layer.isTable ? strings.manageTableProps : strings.manageLayerProps, onClick: this.openManageProps, ref: this.afterCreatePropertiesButton }, layer.isTable ? strings.manageTableProps : strings.manageLayerProps));
    }
    closePopovers() {
        this.closeStatusPopover();
        this.closePropertiesPopover();
        this.disableContainer(false);
    }
    closeStatusPopover() {
        var _a;
        if (this.statusPopover) {
            (_a = this.statusPopover.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.statusPopover);
            this.statusPopover = null;
            setTimeout(() => {
                // doesn't work without timeout
                this.statusActionNode.setFocus();
            }, 300);
        }
    }
    closePropertiesPopover() {
        var _a;
        if (this.propertiesPopover) {
            (_a = this.propertiesPopover.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.propertiesPopover);
            this.propertiesPopover = null;
            setTimeout(() => {
                // doesn't work without timeout
                this.propertiesNode.setFocus();
            }, 300);
        }
    }
    scrollIntoView(referenceElement) {
        var _a;
        if (((_a = referenceElement.getBoundingClientRect()) === null || _a === void 0 ? void 0 : _a.top) < 0) {
            // let's make sure it fully shows
            referenceElement.scrollIntoView({
                behavior: "smooth",
                block: "nearest",
                inline: "start"
            });
            // wait until scrolling is done
            return new Promise(async (resolve) => {
                let count = 0;
                const hndl = setInterval(() => {
                    var _a;
                    if (count > 10 || ((_a = referenceElement.getBoundingClientRect()) === null || _a === void 0 ? void 0 : _a.top) >= 0) {
                        clearInterval(hndl);
                        resolve();
                    }
                    count++;
                }, 100);
            });
        }
        else {
            return Promise.resolve();
        }
    }
    disableContainer(disable) {
        if (this.containerPanelNode) {
            this.containerPanelNode.disabled = disable;
        }
    }
    canCreateItems(user) {
        var _a;
        return user && (this.isPublicUser(user) || ((_a = user.privileges) === null || _a === void 0 ? void 0 : _a.includes("portal:user:createItem")));
    }
    isPublicUser(user) {
        return !user.orgId;
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerOverride.style = arcgisLayerOverrideCss;

const CSS$1 = {
    popover: "popover",
    content: "content",
    notice: "notice",
    tile: "tile",
    tooltip: "tooltip"
};

const arcgisLayerOverridePropertiesCss = ".popover{z-index:100}.content{padding:0.5rem 0.75rem;background-color:#ffffff;max-height:80vh}.notice{margin-bottom:16px}.tile{cursor:pointer}.tooltip{max-width:80%}";

const ArcgisLayerOverrideProperties = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.closeAllPopovers = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeAllPopovers", 7);
        this.arcgisLayerOverridePropertiesChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerOverridePropertiesChange", 7);
        // --------------------------------------------------------------------------
        //
        //  Private methods
        //
        // --------------------------------------------------------------------------
        this.afterCreatePopover = (node) => {
            this.popoverNode = node;
        };
        this.afterCreateCloseButton = (node) => {
            this.closeButtonNode = node;
        };
        this.handleCloseClick = () => {
            this.closeAllPopovers.emit();
        };
        this.resetToSource = (event) => {
            event.stopPropagation();
            const { props } = this;
            const { layer, layerOriginUtils } = props;
            layerOriginUtils.clearOverrides(layer, "web-map");
            this.reRender = !this.reRender;
            this.arcgisLayerOverridePropertiesChange.emit();
        };
        this.disconnectProps = (event) => {
            event.stopPropagation();
            const { props } = this;
            const { layer, layerOriginUtils } = props;
            layerOriginUtils.disconnectFromSource(layer, "web-map");
            this.reRender = !this.reRender;
            this.arcgisLayerOverridePropertiesChange.emit();
        };
        this.props = undefined;
        this.popoverReferenceElement = undefined;
        this.strings = undefined;
        this.reRender = false;
        this.isOpen = false;
    }
    //--------------------------------------------------------------------------
    //
    //  public calls
    //
    //--------------------------------------------------------------------------
    /**
     * Repositions popover
     */
    async reposition() {
        var _a;
        (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
    }
    /**
     * Calls getBoundingClientRect() on popover
     */
    async getPopoverRect() {
        var _a;
        return (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentDidLoad() {
        this.popoverNode.reposition();
        this.isOpen = true;
        // need timeout because of re-render
        setTimeout(() => requestAnimationFrame(() => this.closeButtonNode.setFocus()), 100);
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        var _a;
        const { popoverReferenceElement, strings, props } = this;
        const { layer } = props;
        const nodeWidth = popoverReferenceElement.clientWidth;
        // let the popover start at the top of the reference element
        const offsetDistance = popoverReferenceElement.clientHeight ||
            ((_a = popoverReferenceElement.getBoundingClientRect()) === null || _a === void 0 ? void 0 : _a.height) ||
            96;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { placement: "bottom", dir: document.dir, open: this.isOpen, pointerDisabled: true, referenceElement: popoverReferenceElement, offsetDistance: -1 * offsetDistance, offsetSkidding: 0, class: CSS$1.popover, style: nodeWidth
                ? {
                    width: `${nodeWidth + 60}px`
                }
                : null, label: layer.isTable ? strings.manageTableProps : strings.manageLayerProps, ref: this.afterCreatePopover, onCalcitePopoverBeforeClose: () => this.closeAllPopovers.emit() }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { style: nodeWidth
                ? {
                    width: `${nodeWidth + 58}px`
                }
                : null }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: layer.isTable ? strings.manageTableProps : strings.manageLayerProps }, this.renderCloseButton(), this.renderContent())))));
    }
    renderCloseButton() {
        const { strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.close, scale: "s", slot: "header-actions-end", onClick: this.handleCloseClick, ref: this.afterCreateCloseButton, icon: "x" }));
    }
    renderContent() {
        const { strings, props } = this;
        const { layer } = props;
        // always make a new call in case things have changed
        getLayerOriginInfo(props);
        const { layerOriginInfo } = props;
        const resetToSourceDisabled = layerOriginInfo.status === "source";
        const disconnectDisabled = layerOriginInfo.status === "overridden";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS$1.content }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { class: CSS$1.notice, width: "full", scale: "s", open: true }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "title" }, layerOriginInfo.status === "source"
            ? strings.propsFromSource
            : layerOriginInfo.status === "overridden"
                ? strings.propsSetInWebmap
                : strings.somePropsSetInWebmap)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: "layer-override-reset" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile", { heading: strings.resetToSource, description: strings.discardProps, class: CSS$1.tile, disabled: resetToSourceDisabled, onClick: !resetToSourceDisabled ? this.resetToSource : null }, resetToSourceDisabled ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", slot: "content-start", icon: "reset" })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { scale: "s", compact: true, slot: "content-start", icon: "reset", text: strings.resetToSource, onClick: !resetToSourceDisabled ? this.resetToSource : null })))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { id: "layer-override-disconnect" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile", { heading: layer.isTable ? strings.disconnectPropsTable : strings.disconnectProps, description: strings.setPropsInWebmap, class: CSS$1.tile, disabled: disconnectDisabled, onClick: !disconnectDisabled ? this.disconnectProps : null }, disconnectDisabled ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", slot: "content-start", icon: "unlink" })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { scale: "s", compact: true, slot: "content-start", icon: "unlink", text: strings.disconnectProps, onClick: !disconnectDisabled ? this.disconnectProps : null })))), resetToSourceDisabled && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { class: CSS$1.tooltip, placement: "top", offsetDistance: -50, overlayPositioning: "fixed", referenceElement: "layer-override-reset", label: strings.propsCannotBeReset }, strings.propsCannotBeReset)), disconnectDisabled && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { class: CSS$1.tooltip, placement: "top", offsetDistance: -50, overlayPositioning: "fixed", referenceElement: "layer-override-disconnect", label: strings.propsCannotBeDisconnected }, strings.propsCannotBeDisconnected))));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerOverrideProperties.style = arcgisLayerOverridePropertiesCss;

const CSS = {
    popover: "popover",
    content: "content",
    notice: "notice",
    filter: "filter",
    blockContent: "block-content",
    listHeader: "list-header"
};

const arcgisLayerOverrideStatusCss = ".popover{z-index:100}.content{max-height:60vh}.notice{margin:8px}.filter{border-width:0px 0px 1px;border-color:var(--calcite-color-border-3);border-style:solid}.block-content{background-color:var(--calcite-color-foreground-2)}.list-header{padding:0.75rem 0.5rem 0.25rem 0.5rem}";

const ArcgisLayerOverrideStatus = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.closeAllPopovers = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeAllPopovers", 7);
        this.arcgisLayerOverrideStatusChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLayerOverrideStatusChange", 7);
        this.documentTabHandler = undefined;
        this.documentClickHandler = undefined;
        this.allItems = [];
        this.dataTypes = [
            "data",
            "definition-expression",
            "popup",
            "refresh-interval",
            "use-view-time",
            //"editing-enabled",
            "form-template",
            "floor-info",
            "custom-parameters",
            "charts"
        ];
        this.appearanceTypes = [
            "renderer",
            "labels",
            "scale-range",
            "opacity",
            "feature-reduction",
            "blend-mode",
            "effect",
            "legend-enabled",
            "order-by"
        ];
        // --------------------------------------------------------------------------
        //
        //  Private methods
        //
        // --------------------------------------------------------------------------
        this.afterCreatePopover = (node) => {
            this.popoverNode = node;
        };
        this.afterCreateCloseButton = (node) => {
            this.closeButtonNode = node;
        };
        this.handleCloseClick = () => {
            this.closeAllPopovers.emit();
        };
        this.props = undefined;
        this.popoverReferenceElement = undefined;
        this.strings = undefined;
        this.reRender = false;
        this.filteredItems = undefined;
        this.isOpen = false;
    }
    //--------------------------------------------------------------------------
    //
    //  public calls
    //
    //--------------------------------------------------------------------------
    /**
     * Repositions popover
     */
    async reposition() {
        var _a;
        (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
    }
    /**
     * Calls getBoundingClientRect() on popover
     */
    async getPopoverRect() {
        var _a;
        return (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        var _a, _b;
        const { strings } = this;
        // always make a new call in case things have changed
        const beforeStatus = (_a = this.props.layerOriginInfo) === null || _a === void 0 ? void 0 : _a.status;
        getLayerOriginInfo(this.props);
        const afterStatus = (_b = this.props.layerOriginInfo) === null || _b === void 0 ? void 0 : _b.status;
        if (beforeStatus !== afterStatus) {
            // refesh notice text
            this.arcgisLayerOverrideStatusChange.emit();
        }
        this.allItems = [
            {
                value: "data",
                title: strings.status.data
            },
            {
                value: "definition-expression",
                title: strings.status.filter
            },
            {
                value: "popup",
                title: strings.status.popupsAndAttributes
            },
            {
                value: "refresh-interval",
                title: strings.status.refreshInterval
            },
            {
                value: "use-view-time",
                title: strings.status.time
            },
            {
                value: "editing-enabled",
                title: strings.status.editing
            },
            {
                value: "form-template",
                title: strings.status.formTemplate
            },
            {
                value: "floor-info",
                title: strings.status.floorInfo
            },
            {
                value: "custom-parameters",
                title: strings.status.customParameters
            },
            {
                value: "charts",
                title: strings.status.charts
            },
            {
                value: "renderer",
                title: strings.status.style
            },
            {
                value: "labels",
                title: strings.status.labels
            },
            {
                value: "scale-range",
                title: strings.status.visibleRange
            },
            {
                value: "opacity",
                title: strings.status.transparency
            },
            {
                value: "feature-reduction",
                title: strings.status.aggregation
            },
            {
                value: "blend-mode",
                title: strings.status.blending
            },
            {
                value: "effect",
                title: strings.status.effects
            },
            {
                value: "legend-enabled",
                title: strings.status.legend
            },
            {
                value: "order-by",
                title: strings.status.orderBy
            }
        ];
    }
    componentDidLoad() {
        this.popoverNode.reposition();
        this.isOpen = true;
        // need timeout because of re-render
        setTimeout(() => requestAnimationFrame(() => this.closeButtonNode.setFocus()), 100);
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        var _a;
        const { popoverReferenceElement, strings, props } = this;
        const { layer } = props;
        const nodeWidth = popoverReferenceElement.clientWidth;
        const nodeHeight = document.body.clientHeight;
        // let the popover start at the top of the reference element
        const offsetDistance = popoverReferenceElement.clientHeight ||
            ((_a = popoverReferenceElement.getBoundingClientRect()) === null || _a === void 0 ? void 0 : _a.height) ||
            96;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { placement: "bottom", dir: document.dir, open: this.isOpen, pointerDisabled: true, referenceElement: popoverReferenceElement, offsetDistance: -1 * offsetDistance, offsetSkidding: 0, class: CSS.popover, style: nodeWidth
                ? {
                    width: `${nodeWidth + 60}px`
                }
                : null, label: "", ref: this.afterCreatePopover, onCalcitePopoverBeforeClose: () => this.closeAllPopovers.emit() }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { style: nodeWidth
                ? {
                    width: `${nodeWidth + 58}px`,
                    maxHeight: `${nodeHeight * 0.7}px`
                }
                : null }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: layer.isTable ? strings.tableStatus : strings.layerStatus, ref: (node) => {
                node.addEventListener("calciteFlowItemScroll", () => this.closeInfoPopover());
            } }, this.renderCloseButton(), this.renderContent())))));
    }
    renderCloseButton() {
        const { strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.close, scale: "s", slot: "header-actions-end", onClick: this.handleCloseClick, ref: this.afterCreateCloseButton, icon: "x" }));
    }
    renderContent() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.content }, this.renderInfo(), this.renderSearch(), this.renderDataContent(), this.renderAppearanceContent()));
    }
    renderInfo() {
        const { props, strings } = this;
        const { config } = props;
        const { helpBase, helpMap } = config;
        if ((0,_localStorage_9c4e7a3a_js__WEBPACK_IMPORTED_MODULE_5__.g)(_localStorage_9c4e7a3a_js__WEBPACK_IMPORTED_MODULE_5__.l.ARCGIS_COMPONENT_NOTIFICATIONS, _localStorage_9c4e7a3a_js__WEBPACK_IMPORTED_MODULE_5__.a.LAYER_OVERRIDE_STATUS_TIP_DISMISSED)) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { class: CSS.notice, open: true, closable: true, scale: "s", width: "auto", onCalciteNoticeClose: () => {
                (0,_localStorage_9c4e7a3a_js__WEBPACK_IMPORTED_MODULE_5__.s)(_localStorage_9c4e7a3a_js__WEBPACK_IMPORTED_MODULE_5__.l.ARCGIS_COMPONENT_NOTIFICATIONS, {
                    key: _localStorage_9c4e7a3a_js__WEBPACK_IMPORTED_MODULE_5__.a.LAYER_OVERRIDE_STATUS_TIP_DISMISSED,
                    value: "true"
                });
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, strings.tip), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { slot: "link", title: strings.learnMore, target: "_blank", href: `${helpBase}${helpMap["120002913"]}` }, strings.learnMore)));
    }
    renderSearch() {
        const { allItems, strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-filter", { items: allItems, messageOverrides: { label: strings.status.searchPlaceholder, clear: strings.status.clear }, placeholder: strings.status.searchPlaceholder, class: CSS.filter, onCalciteFilterChange: (event) => {
                this.filteredItems = event.target.filteredItems;
                this.dataBlockNode.open = true;
                if (this.appearanceBlockNode) {
                    this.appearanceBlockNode.open = true;
                }
                setTimeout(() => {
                    // doesn't work without timeout
                    this.reposition();
                }, 100);
            } }));
    }
    renderDataContent() {
        const { allItems, filteredItems, dataTypes, strings } = this;
        let items = (filteredItems || allItems)
            .filter((item) => dataTypes.indexOf(item.value) > -1)
            .map((item) => {
            if (item.value === "data") {
                // data is never overridden
                return [item.title, "source"];
            }
            else {
                return [item.title, this.getOverrideType(item.value)];
            }
        });
        items.sort((a, b) => a[0].localeCompare(b[0]));
        // move "data" to beginning of list; unless it's filtered out
        const dataItem = items.find((item) => item[0] === strings.status.data);
        if (dataItem) {
            items = items.filter((item) => item[0] !== strings.status.data);
            items.unshift(dataItem);
        }
        const sourceItems = items.filter((item) => item[1] === "source");
        const mapItems = items.filter((item) => item[1] === "webmap");
        const hasSourceItems = sourceItems.length > 0;
        const hasMapItems = mapItems.length > 0;
        const summary = hasSourceItems && hasMapItems
            ? strings.somePropsSetInWebmap
            : hasSourceItems
                ? strings.propsFromSource
                : strings.propsSetInWebmap;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: strings.status.dataProps, description: summary, collapsible: true, open: hasMapItems, onCalciteBlockOpen: () => {
                setTimeout(() => {
                    // doesn't work without timeout
                    this.reposition();
                }, 100);
            }, onCalciteBlockClose: () => {
                setTimeout(() => {
                    // doesn't work without timeout
                    this.reposition();
                }, 100);
            }, ref: (node) => (this.dataBlockNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.blockContent }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", null, hasMapItems && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: CSS.listHeader, scale: "s" }, strings.setInWebmap)), hasMapItems && mapItems.map(([label, type]) => this.renderListItem(label, type)), hasSourceItems && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: CSS.listHeader, scale: "s" }, strings.setFromSource)), hasSourceItems && sourceItems.map(([label, type]) => this.renderListItem(label, type))))));
    }
    renderAppearanceContent() {
        const { allItems, filteredItems, appearanceTypes, strings, props } = this;
        const { layer } = props;
        if (layer.isTable) {
            return null;
        }
        const items = (filteredItems || allItems)
            .filter((item) => appearanceTypes.indexOf(item.value) > -1)
            .map((item) => [item.title, this.getOverrideType(item.value)]);
        items.sort((a, b) => a[0].localeCompare(b[0]));
        const sourceItems = items.filter((item) => item[1] === "source");
        const mapItems = items.filter((item) => item[1] === "webmap");
        const hasSourceItems = sourceItems.length > 0;
        const hasMapItems = mapItems.length > 0;
        const summary = hasSourceItems && hasMapItems
            ? strings.somePropsSetInWebmap
            : hasSourceItems
                ? strings.propsFromSource
                : strings.propsSetInWebmap;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: strings.status.appearanceProps, description: summary, collapsible: true, open: hasMapItems, onCalciteBlockOpen: () => {
                setTimeout(() => {
                    // doesn't work without timeout
                    this.reposition();
                }, 100);
            }, onCalciteBlockClose: () => {
                setTimeout(() => {
                    // doesn't work without timeout
                    this.reposition();
                }, 100);
            }, ref: (node) => (this.appearanceBlockNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.blockContent }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", null, hasMapItems && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.listHeader }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, strings.setInWebmap))), hasMapItems && mapItems.map(([label, type]) => this.renderListItem(label, type)), hasSourceItems && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.listHeader }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, strings.setFromSource))), hasSourceItems && sourceItems.map(([label, type]) => this.renderListItem(label, type))))));
    }
    renderListItem(label, type) {
        const { strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { label: label }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", text: strings.moreInfo, icon: "information", onClick: (event) => this.moreInfo(label, type, event) })));
    }
    moreInfo(label, type, event) {
        const { popoverNode, strings } = this;
        const referenceNode = event.currentTarget;
        this.closeInfoPopover();
        const div = document.createElement("div");
        div.innerHTML =
            type === "source"
                ? strings.propReflectUpdates.replace("${label}", label)
                : strings.propNotConnected.replace("${label}", label);
        div.style = `width: ${popoverNode.clientWidth * 0.8}px; font-size: var(--calcite-font-size--1); line-height: 1rem; margin: 0.75rem;`;
        /* issue with calcite
        const labelNode = document.createElement("calcite-label");
        labelNode.scale = "m";
        labelNode.innerHTML = type === "source" ? strings.propReflectUpdates : strings.propNotConnected;
        (labelNode as any).style = `width: ${popoverNode.clientWidth * 0.7}px;`;
        */
        const moreInfoPopover = document.createElement("calcite-popover");
        moreInfoPopover.heading = type === "source" ? strings.setFromSource : strings.setInWebmap;
        moreInfoPopover.placement = "auto";
        moreInfoPopover.offsetSkidding = 5;
        moreInfoPopover.closable = true;
        moreInfoPopover.label = strings.moreInfo;
        moreInfoPopover.referenceElement = referenceNode;
        moreInfoPopover.className = `js-app-flyout`; // js-app-flyout needed by app
        document.body.appendChild(moreInfoPopover);
        moreInfoPopover.appendChild(div);
        moreInfoPopover.setAttribute("open", "true");
        moreInfoPopover.reposition();
        moreInfoPopover.addEventListener("calcitePopoverClose", () => {
            this.closeInfoPopover();
        });
        // need to wait until it's all visible
        setTimeout(() => moreInfoPopover.setFocus(), 100);
        setTimeout(() => {
            // close popover when tabbing out
            this.documentTabHandler = (event) => {
                if (event.key === "Tab") {
                    event.stopPropagation();
                    this.closeInfoPopover();
                }
            };
            document.addEventListener("keydown", this.documentTabHandler);
            // close popover when clicking outside
            this.documentClickHandler = () => this.closeInfoPopover();
            document.addEventListener("click", this.documentClickHandler);
        }, 100);
        this.moreInfoPopoverNode = moreInfoPopover;
    }
    closeInfoPopover() {
        var _a;
        if (this.moreInfoPopoverNode) {
            (_a = this.moreInfoPopoverNode.referenceElement) === null || _a === void 0 ? void 0 : _a.setFocus();
            document.body.removeChild(this.moreInfoPopoverNode);
            this.moreInfoPopoverNode = null;
        }
        if (this.documentTabHandler) {
            document.removeEventListener("keydown", this.documentTabHandler);
            this.documentTabHandler = undefined;
        }
        if (this.documentClickHandler) {
            document.removeEventListener("click", this.documentClickHandler);
            this.documentClickHandler = undefined;
        }
    }
    isOverridden(id) {
        var _a, _b, _c;
        const { props } = this;
        const { layerOriginInfo } = props;
        return !!(((_c = (_b = (_a = layerOriginInfo === null || layerOriginInfo === void 0 ? void 0 : layerOriginInfo.propertyGroupOriginInfos) === null || _a === void 0 ? void 0 : _a.filter((info) => info.id === id)) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.status) === "overridden");
    }
    getOverrideType(id) {
        return this.isOverridden(id) ? "webmap" : "source";
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisLayerOverrideStatus.style = arcgisLayerOverrideStatusCss;



//# sourceMappingURL=arcgis-layer-override_3.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-9c4e7a3a.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/localStorage-9c4e7a3a.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arcgisComponentNotificationsKeys),
/* harmony export */   g: () => (/* binding */ getSingleObjectLocalStorage),
/* harmony export */   l: () => (/* binding */ localStorageKeys),
/* harmony export */   s: () => (/* binding */ setSingleObjectLocalStorage)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
var localStorageKeys;
(function (localStorageKeys) {
    localStorageKeys["ARCGIS_COMPONENT_NOTIFICATIONS"] = "arcgisComponent_notifications";
})(localStorageKeys || (localStorageKeys = {}));
var arcgisComponentNotificationsKeys;
(function (arcgisComponentNotificationsKeys) {
    arcgisComponentNotificationsKeys["FEATURE_REDUCTION_WARNING_DISMISSED"] = "arcgis_feature_reduction_warning_dismissed";
    arcgisComponentNotificationsKeys["POPUP_WARNING_DISMISSED"] = "arcgis_popup_warning_dismissed";
    arcgisComponentNotificationsKeys["INCOMPATIBLE_VECTOR_SYMBOLS_DISMISSED"] = "arcgis_symbol_styler_incompatible_vector_symbols_dismissed";
    arcgisComponentNotificationsKeys["EFFECTS_TIP_DISMISSED"] = "arcgis_effects_tip_dismissed";
    arcgisComponentNotificationsKeys["LAYER_VIEW_DEFINITION_DISMISSED"] = "arcgis_layer_view_definition_dismissed";
    arcgisComponentNotificationsKeys["LAYER_OVERRIDE_STATUS_TIP_DISMISSED"] = "arcgis_layer_override_status_tip_dismissed";
    arcgisComponentNotificationsKeys["SMART_MAPPING_TIP1_DISMISSED"] = "arcgis_smart_mapping_tip1_dismissed";
    arcgisComponentNotificationsKeys["SMART_MAPPING_TIP2_DISMISSED"] = "arcgis_smart_mapping_tip2_dismissed";
    arcgisComponentNotificationsKeys["LAYER_VIEW_JOIN_TIP_DISMISSED"] = "arcgis_layer_view_join_tip_dismissed";
    arcgisComponentNotificationsKeys["MULTIDIMENSIONAL_INFO_TIP_DISMISSED"] = "arcgis_multidimensional_info_tip_dismissed";
})(arcgisComponentNotificationsKeys || (arcgisComponentNotificationsKeys = {}));
const getLocalStorage = (localStorageKey) => {
    return localStorage.getItem(localStorageKey);
};
const setLocalStorage = (localStorageKey, value) => {
    localStorage.setItem(localStorageKey, value);
};
const getObjectLocalStorage = (localStorageKey) => {
    return JSON.parse(getLocalStorage(localStorageKey)) || {};
};
const setSingleObjectLocalStorage = (localStorageKey, keyValueObject) => {
    const setLocalStorageVal = getObjectLocalStorage(localStorageKey);
    setLocalStorageVal[keyValueObject.key] = keyValueObject.value;
    setLocalStorage(localStorageKey, JSON.stringify(setLocalStorageVal));
};
const getSingleObjectLocalStorage = (localStorageKey, objectKey) => {
    const getLocalStorageVal = getObjectLocalStorage(localStorageKey);
    if (getLocalStorageVal === null || getLocalStorageVal === void 0 ? void 0 : getLocalStorageVal.hasOwnProperty(objectKey)) {
        return getLocalStorageVal[objectKey];
    }
    else {
        return null;
    }
};



//# sourceMappingURL=localStorage-9c4e7a3a.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,