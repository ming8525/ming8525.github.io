"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-7b76e5"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-gamma-slider_2.entry.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-gamma-slider_2.entry.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_gamma_slider: () => (/* binding */ ArcgisSmartMappingGammaSlider),
/* harmony export */   arcgis_smart_mapping_stretch_type_button: () => (/* binding */ ArcgisSmartMappingStretchTypeButton)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */











const arcgisSmartMappingGammaSliderCss = ".slider{height:60px;background-color:transparent;position:relative;width:90%;margin:0 auto 0 auto}.esri-slider__content{margin-bottom:30px}.slider-bottom-label .esri-slider__max,.slider-bottom-label .esri-slider__min{width:-moz-fit-content;width:fit-content;position:absolute;bottom:0}.slider-bottom-label .esri-slider__max{right:-9px;text-align:right}.slider-bottom-label .esri-slider__min{left:-9px;text-align:left}";

const ArcgisSmartMappingGammaSlider = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.watchHandles = [];
        this.gamma = undefined;
        this.rendererType = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentDidLoad() {
        const { config } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        this.hostElement.shadowRoot.firstElementChild.insertAdjacentHTML("beforebegin", `<link rel="stylesheet" href="${config.jsapiUrl}/themes/light/main.css" />`);
    }
    //--------------------------------------------------------------------------
    //
    // Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        var _a;
        const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (!this.slider) {
            const config = {
                min: -1000,
                max: 1000,
                values: [this.parseGammaValue(this.gamma.toString())],
                visibleElements: {
                    labels: true,
                    rangeLabels: true
                },
                rangeLabelInputsEnabled: false,
                precision: 3,
                labelInputsEnabled: true
            };
            config.labelFormatFunction = (value) => {
                return this.formatGammaValue(value);
            };
            config.inputFormatFunction = (value) => {
                return this.formatGammaValue(value);
            };
            config.inputParseFunction = (value) => {
                return this.parseGammaValue(value);
            };
            (_a = this.watchHandles[0]) === null || _a === void 0 ? void 0 : _a.remove();
            this.watchHandles[0] = undefined;
            this.slider = new modules.Slider(config);
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider slider-bottom-label", ref: (node) => {
                if (node) {
                    this.afterGammaSliderCreate(node);
                }
            } }));
    }
    // -------------------------------------------------------------------
    //
    //  Private methods
    //
    // -------------------------------------------------------------------
    afterGammaSliderCreate(node) {
        if (!this.slider.container) {
            const divNode = document.createElement("div");
            node.append(divNode);
            this.slider.container = divNode;
            this.createGammaSliderChangeEvents();
        }
    }
    createGammaSliderChangeEvents() {
        this.watchHandles.push(this.slider.watch("values", (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.d)(() => this.handleGammaSliderValueChange(), 300)));
    }
    handleGammaSliderValueChange() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const newGamma = this.formatGammaValue(this.slider.values[0]);
        renderer.gamma =
            this.rendererType === "raster-stretch" ? [newGamma] : new Array(3).fill(newGamma);
        renderer.useGamma = true;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    /**
     * Takes in a number ranging from -1000 to 1000, reduces it to a
     * range of [-1, 1], and performs mathematical operations to obtain
     * a number in the range [0.1, 10]
     */
    formatGammaValue(value) {
        return parseFloat(Math.exp((value / 1000) * Math.log(10)).toFixed(2));
    }
    /**
     * Takes in a gamma value ranging from 0.1 to 10 and converts it to
     * a value to be represented on the slider in the range [-1000, 1000]
     */
    parseGammaValue(value) {
        const gammaValue = parseFloat(value);
        const sliderValue = (Math.log(gammaValue) / Math.log(10)) * 1000;
        return sliderValue;
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingGammaSlider.style = arcgisSmartMappingGammaSliderCss;

const arcgisSmartMappingStretchTypeButtonCss = ".stretch-type-button{display:flex;padding:6px;justify-content:space-between;align-items:center;border-radius:0;cursor:pointer;background-color:var(--calcite-color-foreground-1);color:var(--calcite-color-text-1);border-color:var(--calcite-color-foreground-3);border-width:1px;border-style:solid;box-shadow:transparent 0px 0px 0px 1px inset}.stretch-type-button:hover{box-shadow:inset 0 0 0 1px var(--calcite-color-foreground-3)}.stretch-type-button:active{box-shadow:inset 0 0 0 2px var(--calcite-color-foreground-3)}.stretch-type-button:focus{box-shadow:inset 0 0 0 2px var(--calcite-color-foreground-3);outline:2px solid var(--calcite-color-brand);outline-offset:2px}.stretch-type-button.active{outline:1px solid var(--calcite-ui-focus-color, var(--calcite-color-brand))}.stretch-type-content{display:flex;align-items:center;justify-content:space-between;width:100%}.stretch-type-button-text{display:inline-block;padding:0 10px}.stretch-type-button-title{font-weight:bold}.stretch-type-button-msg{font-size:80%;line-height:16px}";

const ArcgisSmartMappingStretchTypeButton = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingStretchTypeButtonChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingStretchTypeButtonChange", 7);
        this.arcgisSmartMappingStretchTypeButtonBeforeOpen = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingStretchTypeButtonBeforeOpen", 7);
        this.stretchTypeInfos = [];
        this.open = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        this.buttonNode.focus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        this.populateStretchTypeInfo();
        this.setSelection();
    }
    componentWillUpdate() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { stretchType } = renderer;
        if (this.selectedStretchTypeInfo.value !== stretchType) {
            this.setSelection();
        }
    }
    // --------------------------------------------------------------------------
    //
    // Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.stretchTypeButton.stretchType, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "stretch-type-button", role: "button", tabindex: "0", "aria-haspopup": "true", "aria-label": strings.stretchTypeButton.stretchType, ref: (node) => (this.buttonNode = node), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.openStretchTypeDropdown();
                }
            }, onClick: () => this.openStretchTypeDropdown() }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "stretch-type-content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "stretch-type-button-text" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "stretch-type-button-title" }, this.selectedStretchTypeInfo.title), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "stretch-type-button-msg" }, this.selectedStretchTypeInfo.msg)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "chevron-down" })))))));
    }
    // --------------------------------------------------------------------------
    //
    // Private methods
    //
    // --------------------------------------------------------------------------
    populateStretchTypeInfo() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const stretchTypeOptions = strings.stretchTypeButton.stretchTypeOptions;
        const stretchTypeOptionDescriptions = strings.stretchTypeButton.stretchTypeOptionDescriptions;
        this.stretchTypeInfos.push({
            value: "none",
            title: stretchTypeOptions.none,
            msg: stretchTypeOptionDescriptions.none,
            iconPath: null,
            selected: false
        });
        this.stretchTypeInfos.push({
            value: "min-max",
            title: stretchTypeOptions.minimumMaximum,
            msg: stretchTypeOptionDescriptions.minimumMaximum,
            iconPath: null,
            selected: false
        });
        this.stretchTypeInfos.push({
            value: "percent-clip",
            title: stretchTypeOptions.percentClip,
            msg: stretchTypeOptionDescriptions.percentClip,
            iconPath: null,
            selected: false
        });
        this.stretchTypeInfos.push({
            value: "standard-deviation",
            title: stretchTypeOptions.standardDeviation,
            msg: stretchTypeOptionDescriptions.standardDeviation,
            iconPath: null,
            selected: false
        });
        // NOTE: not yet supported
        // this.stretchTypeInfos.push({
        //   key: "histogram-equalization",
        //   title: stretchTypeOptions.histogramEqualize,
        //   msg: i18n.ui.stretchTypeOptionDescriptions.histogramEqualize,
        //   selected: false
        // });
        // this.stretchTypeInfos.push({
        //   key: "custom",
        //   title: stretchTypeOptions.custom,
        //   msg: stretchTypeOptionDescriptions.custom,
        //   selected: false
        // });
    }
    setSelection() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        this.selectedStretchTypeInfo = this.stretchTypeInfos.find((info) => info.value === renderer.stretchType);
        this.stretchTypeInfos.forEach((stretchTypeInfo) => {
            stretchTypeInfo.selected = stretchTypeInfo.value === this.selectedStretchTypeInfo.value;
        });
    }
    closePopover() {
        var _a;
        this.open = false;
        if (this.dropdownNode) {
            (_a = this.dropdownNode.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.dropdownNode);
            this.dropdownNode = null;
            this.buttonNode.classList.remove("active");
        }
    }
    openStretchTypeDropdown() {
        if (!this.open) {
            this.arcgisSmartMappingStretchTypeButtonBeforeOpen.emit();
            const dropdown = document.createElement("arcgis-smart-mapping-dropdown");
            dropdown.buttonNode = this.buttonNode;
            dropdown.infos = this.stretchTypeInfos;
            this.dropdownNode = dropdown;
            dropdown.addEventListener("arcgisSmartMappingDropdownClose", (event) => {
                this.closePopover();
                event.detail === "Escape" && this.setFocus();
            });
            dropdown.addEventListener("arcgisSmartMappingDropdownChange", (event) => this.setStretchType(event.detail));
            this.buttonNode.classList.add("active");
            document.body.appendChild(dropdown);
            this.open = true;
        }
        else {
            this.open = false;
        }
    }
    setStretchType(newStretchTypeInfo) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const { stretchType: currentStretchType } = renderer;
        const newStretchType = newStretchTypeInfo.value;
        if (newStretchType === currentStretchType) {
            this.closePopover();
            setTimeout(() => this.setFocus(), 300);
            return;
        }
        this.stretchTypeInfos.forEach((stretchTypeInfo) => {
            stretchTypeInfo.selected = stretchTypeInfo.value === newStretchType;
        });
        this.selectedStretchTypeInfo = newStretchTypeInfo;
        this.arcgisSmartMappingStretchTypeButtonChange.emit(this.selectedStretchTypeInfo.value);
        this.closePopover();
        setTimeout(() => this.setFocus(), 300);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingStretchTypeButton.style = arcgisSmartMappingStretchTypeButtonCss;



//# sourceMappingURL=arcgis-smart-mapping-gamma-slider_2.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,