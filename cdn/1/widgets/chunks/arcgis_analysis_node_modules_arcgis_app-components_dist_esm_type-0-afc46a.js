"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_type-0-afc46a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/type-0ace5d2e.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/type-0ace5d2e.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createTypeRendererFromExisting),
/* harmony export */   b: () => (/* binding */ getOtherUniqueValueClasses),
/* harmony export */   c: () => (/* binding */ createTypeRenderer),
/* harmony export */   d: () => (/* binding */ getUniqueGroupName),
/* harmony export */   e: () => (/* binding */ getDateLabel),
/* harmony export */   f: () => (/* binding */ separateMergedClasses),
/* harmony export */   g: () => (/* binding */ getOtherUniqueValueInfos),
/* harmony export */   s: () => (/* binding */ sameTypeField)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * Updates the layer with a Color renderer with default settings
 * @param options: options
 */
function createTypeRenderer(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    const fieldInfo = options.fieldInfos[0];
    return modules.TypeCreator.createRenderer({
        layer,
        view: mapView,
        field: fieldInfo.field,
        valueExpression: fieldInfo.expression,
        valueExpressionTitle: fieldInfo.expressionTitle,
        numTypes: options.numTypes || 10,
        sortBy: options.sortBy || "count",
        typeScheme: options.typeScheme || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__._)(),
        returnAllCodedValues: true,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : true,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : true,
        legendOptions: options.legendOptions,
        defaultSymbolEnabled: true,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        //console.log("modules.TypeCreator.createRenderer", result);
        if (!result.excludedUniqueValueInfos.length) {
            result.renderer.defaultLabel = null;
            result.renderer.defaultSymbol = null;
        }
        if (sameTypeField(options)) {
            // re-use type renderer
            const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).clone();
            const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "auto");
            const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
            result.renderer.visualVariables = [];
            if (sizeAutoVisVar) {
                result.renderer.visualVariables = result.renderer.visualVariables || [];
                result.renderer.visualVariables.push(sizeAutoVisVar);
            }
            if (sizeOutlineVisVar) {
                result.renderer.visualVariables = result.renderer.visualVariables || [];
                result.renderer.visualVariables.push(sizeOutlineVisVar);
            }
            result.renderer.uniqueValueInfos = renderer.uniqueValueInfos;
            // if we keep the uniqueValueInfos, we also need to keep the additional fields
            result.renderer.field2 = renderer.field2;
            result.renderer.field3 = renderer.field3;
            if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer) && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)() === "type-size") {
                // switch markers to polygons
                const polygonSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView);
                const infos = result.renderer.uniqueValueInfos.slice();
                infos.map((valueInfo) => {
                    const color = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(valueInfo.symbol);
                    valueInfo.symbol = polygonSymbol.clone();
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(valueInfo.symbol, color);
                });
                result.renderer.uniqueValueInfos = infos;
            }
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Type renderer with settings from current renderer
 * @param options: options, only contains what needs to be overwritten
 */
function createTypeRendererFromExisting(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || [];
    let fieldInfo = options.fieldInfos ? options.fieldInfos[0] : null;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)(renderer);
    const symbol = renderer.uniqueValueInfos && renderer.uniqueValueInfos.length ? renderer.uniqueValueInfos[0].symbol : null;
    const defaultSymbol = renderer.defaultSymbol;
    const defaultLabel = renderer.defaultLabel;
    // TODO need to keep ramp
    const fieldInfoChange = fieldInfo && (fieldInfo.field != renderer.field || fieldInfo.expression != renderer.valueExpression);
    options = options || {};
    return modules.TypeCreator.createRenderer({
        layer,
        view: mapView,
        field: fieldInfo ? fieldInfo.field : renderer.field,
        valueExpression: fieldInfo ? fieldInfo.expression : renderer.valueExpression,
        valueExpressionTitle: fieldInfo ? fieldInfo.expressionTitle : renderer.valueExpressionTitle,
        numTypes: options.numTypes || (fieldInfoChange ? 10 : renderer.uniqueValueInfos.length),
        sortBy: options.sortBy || "count",
        typeScheme: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__._)(),
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : !!extras.sizeOutlineVisVar,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : !!extras.sizeAutoVisVar,
        legendOptions: options.legendOptions || renderer.legendOptions,
        defaultSymbolEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.defaultSymbolEnabled) || !!renderer.defaultSymbol,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        if (symbol && result.renderer.uniqueValueInfos && result.renderer.uniqueValueInfos.length) {
            const infos = result.renderer.uniqueValueInfos.slice();
            infos.map((info) => {
                // keep the same symbol style, not the color
                const sym = symbol.clone();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(sym, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(info.symbol));
                info.symbol = sym;
            });
            result.renderer.uniqueValueInfos = infos;
        }
        if (defaultSymbol) {
            result.renderer.defaultSymbol = defaultSymbol;
            result.renderer.defaultLabel = defaultLabel;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
// From JS-API
// maybe in future use esri/smartMapping/support/utils.formatAnyDate(value: number | string | Date, options?: FormatAnyDateOptions | Nil): string
const dateFormatIntervalOptions = {
    // Display both date and time components:
    millisecond: "long-month-day-year-long-time",
    second: "long-month-day-year-long-time",
    minute: "long-month-day-year-short-time",
    hour: "long-month-day-year-short-time",
    // Just display the date component.
    day: "long-month-day-year",
    month: "long-month-day-year",
    // Just display the year.
    year: "year"
};
function getDateLabel(value, field) {
    const { allUniqueValues, locale, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    modules.intl.setLocale(locale);
    if ((field === null || field === void 0 ? void 0 : field.simpleFieldType) === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.DATE) {
        const dateFormat = allUniqueValues &&
            // @ts-ignore
            modules.rendererSupportUtils.calculateDateFormatInterval(allUniqueValues.map((uv) => uv.value));
        if (mapView.timeZone === "unknown") {
            return modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions(dateFormat ? dateFormatIntervalOptions[dateFormat] : "long-month-day-year")), { timeZone: "utc", timeZoneName: "shortOffset" }));
        }
        else {
            // known issues with formatting it-CH
            return modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions(dateFormat ? dateFormatIntervalOptions[dateFormat] : "long-month-day-year")), { timeZone: mapView.timeZone }));
        }
    }
    else {
        // date-only
        return modules.intl.formatDateOnly(value, modules.intl.convertDateFormatToIntlOptions("long-month-day-year"));
    }
}
function getOtherUniqueValueClasses() {
    const { allUniqueValues, layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    if (!(allUniqueValues === null || allUniqueValues === void 0 ? void 0 : allUniqueValues.length) || !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(allUniqueValues[0].count)) {
        return [];
    }
    let typeValues = [];
    renderer.uniqueValueGroups.forEach((uniqueValueGroup) => {
        const values = [];
        uniqueValueGroup.classes.forEach((uniqueValueClass) => uniqueValueClass.values.forEach((value) => values.push(`${value.value}`)));
        typeValues = typeValues.concat(values);
    });
    const otherInfos = allUniqueValues.filter((info) => typeValues.indexOf(`${info.value}`) === -1);
    const otherClasses = otherInfos.map((info) => {
        return new modules.UniqueValueClass({
            label: info.label,
            symbol: info.symbol,
            values: [
                {
                    value: info.value
                }
            ]
        });
    });
    return otherClasses;
}
function getOtherUniqueValueInfos() {
    const { allUniqueValues, layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    if (!(allUniqueValues === null || allUniqueValues === void 0 ? void 0 : allUniqueValues.length) || !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(allUniqueValues[0].count)) {
        return [];
    }
    let typeValues = [];
    renderer.uniqueValueGroups.forEach((uniqueValueGroup) => {
        const values = [];
        uniqueValueGroup.classes.forEach((uniqueValueClass) => uniqueValueClass.values.forEach((value) => values.push(`${value.value}`)));
        typeValues = typeValues.concat(values);
    });
    const otherInfos = allUniqueValues.filter((info) => typeValues.indexOf(`${info.value}`) === -1);
    return otherInfos;
}
function getUniqueGroupName(groups) {
    const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    let count = 1;
    let newGroupHeading = strings.panels.type.defaultGroupName.replace("${number}", count.toString());
    while (groups.find((group) => group.heading === newGroupHeading)) {
        newGroupHeading = strings.panels.type.defaultGroupName.replace("${number}", (++count).toString());
    }
    return newGroupHeading;
}
function sameTypeField(options) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    if (["type", "type-size"].indexOf((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)()) > -1) {
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        const renderFieldInfo = {
            field: renderer.field,
            expression: renderer.valueExpression,
            expressionTitle: renderer.valueExpressionTitle
        };
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.x)(options.fieldInfos[0], renderFieldInfo)) {
            return true;
        }
    }
    return false;
}
function separateMergedClasses(group, classIdxs) {
    const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.u)(renderer.field);
    const isInt = field && ["small-integer", "integer", "big-integer", "long"].indexOf((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.z)(field.layerField)) > -1;
    const isDate = (field === null || field === void 0 ? void 0 : field.simpleFieldType) === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.DATE;
    const isDateOnly = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.z)(field.layerField) === "date-only";
    const newClasses = [];
    const scheme = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__._)();
    let counter = 0;
    group.classes.forEach((uvClass, idx) => {
        var _a;
        if (uvClass.values.length === 1 || (classIdxs && classIdxs.indexOf(idx) === -1)) {
            newClasses.push(uvClass);
            counter++;
        }
        else if (!classIdxs || classIdxs.indexOf(idx) > -1) {
            const symbol = ["simple-marker", "simple-line", "simple-fill", "cim"].indexOf((_a = uvClass.symbol) === null || _a === void 0 ? void 0 : _a.type) > -1
                ? uvClass.symbol
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)());
            uvClass.values.forEach((value, idx) => {
                const newSymbol = modules.esriLang.clone(symbol);
                if (idx > 0) {
                    // change color
                    if (scheme) {
                        const color = scheme.colors[(group.classes.length + counter) % scheme.colors.length];
                        color && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(newSymbol, color);
                    }
                    else {
                        // just pick some colors from the primary scheme
                        const primaryRampColors = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.$)().colors;
                        const color = new modules.esriColor(primaryRampColors[(group.classes.length + counter) % 10]);
                        color && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(newSymbol, color);
                    }
                }
                const label = isDate || isDateOnly
                    ? this.getDateLabel(value.value, field)
                    : (field === null || field === void 0 ? void 0 : field.simpleFieldType) === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
                        ? __esri.intl.formatNumber(isInt ? parseInt(value.value) : parseFloat(value.value))
                        : value.value;
                newClasses.push(new modules.UniqueValueClass({
                    values: [new modules.UniqueValue({ value: value.value })],
                    label,
                    symbol: newSymbol
                }));
                counter++;
            });
        }
    });
    group.classes = newClasses;
}



//# sourceMappingURL=type-0ace5d2e.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,