"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_locale-158e80"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-c58ffced.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-c58ffced.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getHydratedItem),
/* harmony export */   b: () => (/* binding */ getItemDataUrl),
/* harmony export */   c: () => (/* binding */ getItem),
/* harmony export */   d: () => (/* binding */ getItemGroups),
/* harmony export */   g: () => (/* binding */ getItemData),
/* harmony export */   i: () => (/* binding */ isEditableItem)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./service-8c2c4241.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/service-8c2c4241.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




const getHydratedItem = async (itemId, portal) => {
    try {
        const item = await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_1__.r)(getItemUrl(itemId, portal), portal);
        // TODO: check if we still need to do this
        // if (isHostedService(item.typeKeywords, item.type)) {
        //   const itemData = getItemData(item.id, portal);
        //   return { result: { ...item, ...itemInfo, ...itemData } };
        // }
        return { result: item };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
const getItemDataUrl = (itemId, portal) => `${getItemUrl(itemId, portal)}/data`;
const getItemData = async (itemId, portal) => {
    return (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_1__.r)(getItemDataUrl(itemId, portal), portal);
};
// TODO: remove these once we figure out how to efficiently disable the toast on the Home App
const getItemUrl = (itemId, portal) => `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}content/items/${itemId}`;
const getItem = async (itemId, portal, requestOptions) => {
    try {
        const url = getItemUrl(itemId, portal);
        return await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_1__.r)(url, portal, requestOptions);
    }
    catch (error) {
        console.warn(error);
    }
};
const getItemGroups = async (itemId, portal) => {
    try {
        const url = `${getItemUrl(itemId, portal)}/groups`;
        return { result: await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_1__.r)(url, portal) };
    }
    catch (error) {
        // TODO: handle error
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
const isEditableItem = async (item, portal) => {
    let isEditable = false;
    if ((0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_1__.i)(item.typeKeywords, item.type)) {
        isEditable = await hasEditingCapability(item.url, portal);
    }
    return isEditable;
};
const hasEditingCapability = async (layerUrl, portal, requiredNoToken = false) => {
    var _a, _b, _c;
    if (layerUrl) {
        try {
            const result = await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_1__.r)(`${(_a = (0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_2__.p)(layerUrl)) === null || _a === void 0 ? void 0 : _a.baseServerUrl}/layers`, portal, { addTokenManually: !requiredNoToken });
            return (_b = result === null || result === void 0 ? void 0 : result.layers) === null || _b === void 0 ? void 0 : _b.reduce((memo, layer) => memo || (layer === null || layer === void 0 ? void 0 : layer.capabilities.includes("Editing")), false);
        }
        catch (error) {
            if ((_c = error === null || error === void 0 ? void 0 : error.message) === null || _c === void 0 ? void 0 : _c.toLowerCase().includes("token required")) {
                return hasEditingCapability(layerUrl, portal, true);
            }
        }
    }
    return false;
};



//# sourceMappingURL=item-c58ffced.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isPublicUser),
/* harmony export */   b: () => (/* binding */ isOrgAdmin),
/* harmony export */   c: () => (/* binding */ isHostedPortal),
/* harmony export */   d: () => (/* binding */ isCustomRole),
/* harmony export */   e: () => (/* binding */ canUpdateOrgGroups),
/* harmony export */   f: () => (/* binding */ canUpdateItemCategories),
/* harmony export */   g: () => (/* binding */ canManageCollaborations),
/* harmony export */   h: () => (/* binding */ isOrgUser),
/* harmony export */   i: () => (/* binding */ isDeveloper),
/* harmony export */   j: () => (/* binding */ canShareItemToGroup),
/* harmony export */   k: () => (/* binding */ canShareItemToOrg),
/* harmony export */   l: () => (/* binding */ adminCanShareOthersItemToGroup),
/* harmony export */   m: () => (/* binding */ canShareOthersItemsToOrg),
/* harmony export */   n: () => (/* binding */ canShareItemToPublic),
/* harmony export */   o: () => (/* binding */ canShareOthersItemsToPublic),
/* harmony export */   p: () => (/* binding */ hasAdminSharePrivilege),
/* harmony export */   q: () => (/* binding */ canViewOthersOrgItems)
/* harmony export */ });
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const getUserRole = (user) => {
    var _a, _b, _c;
    return typeof (user === null || user === void 0 ? void 0 : user.role) === "string" && !!(user === null || user === void 0 ? void 0 : user.role)
        ? user === null || user === void 0 ? void 0 : user.role
        : (_b = (_a = user === null || user === void 0 ? void 0 : user.roleId) !== null && _a !== void 0 ? _a : user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : (_c = user === null || user === void 0 ? void 0 : user.sourceJSON) === null || _c === void 0 ? void 0 : _c.id;
};
function isPublicUser(user) {
    return user && !user.orgId;
}
function isHostedPortal(portal) {
    return !portal.isPortal || !!portal.isBackedBySDS;
}
function isDeveloper(subscriptionInfo) {
    const devSubscriptionTypes = ["Trial Developer", "Developer", "Developer Subscription"];
    return devSubscriptionTypes.includes(subscriptionInfo === null || subscriptionInfo === void 0 ? void 0 : subscriptionInfo.type);
}
function isOrgAdmin(user) {
    return getUserRole(user) === "org_admin" || getUserRole(user) === "account_admin";
}
function isOrgUser(user) {
    return getUserRole(user) === "org_user" || getUserRole(user) === "account_user";
}
function isCustomRole(user) {
    // The Home App collapse the `roleId` and `role` into a single `id` property, that's why
    //  https://devtopia.esri.com/WebGIS/arcgis-portal-app/blob/master/src/js/arcgisonline/sharing/dijit/Role.ts#L469 works
    // In practice, we only need to check if `roleId` exist
    //  https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/44682#issuecomment-4146866
    return !!(user === null || user === void 0 ? void 0 : user.roleId) && user.roleId.length > 0;
}
/**
 * Checks whether the privilege "portal:admin:updateItemCategorySchema" is granted.
 */
function canUpdateItemCategories(user) {
    var _a;
    return !!((_a = user === null || user === void 0 ? void 0 : user.privileges) === null || _a === void 0 ? void 0 : _a.includes("portal:admin:updateItemCategorySchema"));
}
/**
 * Checks whether the privilege "portal:admin:updateGroups" is granted.
 */
function canUpdateOrgGroups(user) {
    var _a;
    return !!((_a = user === null || user === void 0 ? void 0 : user.privileges) === null || _a === void 0 ? void 0 : _a.includes("portal:admin:updateGroups"));
}
/**
 * Checks whether the user is allowed to update other user's items in their organization.
 */
function canUpdateOrgItems(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:updateItems");
}
/**
 * Checks to ensure the portal is an organization portal
 */
function isOrgPortal(portal) {
    return !!(portal.urlKey && portal.customBaseUrl) || !!portal.isPortal;
}
/**
 * Checks whether the user is allowed to share their item to groups
 */
function canShareItemToGroup(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToGroup");
}
/**
 * Checks whether the user can share an item on a given portal
 */
function canShare(user, portal) {
    return (!isOrgPortal(portal) ||
        canShareItemToGroup(user) ||
        canShareItemToOrg(user) ||
        (!!portal.canSharePublic && canShareItemToPublic(user)));
}
/**
 * Checks whether the user is allowed to share their item ot the organization.
 */
function canShareItemToOrg(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToOrg");
}
/**
 * Checks whether the user is allowed to share their item to public
 */
function canShareItemToPublic(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToPublic");
}
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItemsToOrg(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToOrg");
}
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItemsToPublic(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToPublic");
}
/**
 * Checks whether the user can share other user's items
 */
function adminCanShareOthersItemToGroup(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToGroup");
}
/**
 * Checks whether the user is in an allowed organization and has the power to manage collaborations
 */
function canManageCollaborations(config, user, portal, subscriptionInfo) {
    const excludedOrgTypes = ["Trial", "Trial Press", "Trial Developer", "Developer Subscription", "Evaluation"];
    const isValidOrgType = subscriptionInfo && !excludedOrgTypes.includes(subscriptionInfo.type);
    const hasPrivilege = ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:manageCollaborations");
    return !!((config === null || config === void 0 ? void 0 : config.collaborationsEnabled) &&
        user &&
        (isOrgAdmin(user) || hasPrivilege) &&
        ((portal === null || portal === void 0 ? void 0 : portal.isPortal) || isValidOrgType));
}
/**
 * Checks whether the user can view other organization users' items
 */
function canViewOrgItems(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:viewItems");
}
/**
 * Checks whether the user can view other organization users' items
 */
function canViewOthersOrgItems(user) {
    return !!user && (!isCustomRole(user) || (isCustomRole(user) && canViewOrgItems(user)));
}
// TODO: add unit tests
const hasAdminSharePrivilege = ({ items, user, portal }) => {
    const item = items[0];
    // enterprise incorrectly returns items owned by "esri_" as item control admin (WebGIS/arcgis-portal-app#38695)
    const owner = item.owner;
    const whitelistOwner = ["esri_livingatlas"];
    if (portal.isPortal && owner !== user.username && owner.includes("esri_") && !whitelistOwner.includes(owner)) {
        return false;
    }
    const isOwnerOrAdmin = (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.u)(item, user);
    const isCustom = isCustomRole(user);
    const canShareOrgItems = canShareOthersItems(user);
    const canUpdateAndShare = (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.c)(item, user) &&
        canUpdateOrgItems(user) &&
        !isCustom &&
        (canShare(user, portal) || canShareOthersItems(user));
    // if it's the item owner or admin, or custom admin who can share
    return isOwnerOrAdmin || canUpdateAndShare || ((0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.d)(items, user) && canShareOrgItems);
};
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItems(user) {
    return adminCanShareOthersItemToGroup(user) || canShareOthersItemsToOrg(user) || canShareOthersItemsToPublic(user);
}



//# sourceMappingURL=privileges-5c382f61.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/service-8c2c4241.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/service-8c2c4241.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getServiceUrlResponse),
/* harmony export */   g: () => (/* binding */ getRelatedItems),
/* harmony export */   i: () => (/* binding */ isHostedService),
/* harmony export */   r: () => (/* binding */ requestFetch)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



/** Work-around since using `request` directly will trigger unwanted toast on the Home App if the layer is unavailable */
const requestFetch = async (url, portal, options = {}) => {
    const { body, usePost, addTokenManually, api = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.api, customToken } = options;
    const data = new URLSearchParams();
    if (body) {
        Object.entries(body).forEach(([key, value]) => {
            if (value !== undefined) {
                data.append(key, value);
            }
        });
    }
    const urlToSend = new URL(url);
    urlToSend.searchParams.append("f", "json");
    if (customToken) {
        urlToSend.searchParams.append("token", customToken);
    }
    else {
        const token = addTokenManually === false ? null : await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.h)(portal, api);
        if (token) {
            urlToSend.searchParams.append("token", token);
        }
    }
    const response = await fetch(urlToSend.toString(), {
        body: usePost ? data : undefined,
        method: usePost ? "POST" : "GET"
    });
    const result = await response.json();
    const error = result.error;
    if (error) {
        throw typeof error === "string" ? new Error(error) : error;
    }
    return result;
};

/**
 * Send a request to get data for `url`. This request will not include a token to avoid token leak
 */
const getServiceUrlResponse = async (url, portal) => {
    var _a;
    try {
        return { result: await requestFetch(url, portal, { addTokenManually: false }) };
    }
    catch (error) {
        const tokenRequiredMessage = "token required";
        if ((_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(tokenRequiredMessage)) {
            return { error: { code: "tokenRequired" } };
        }
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
async function getRelatedItems(itemId, portal, { relationshipType, direction }) {
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}content/items/${itemId}/relatedItems`;
    return await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, { relationshipType, direction });
}

const isHostedService = (typeKeywords, type) => type === "Feature Service" && typeKeywords.includes("Hosted Service");



//# sourceMappingURL=service-8c2c4241.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-66aee31b.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-66aee31b.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ analyzeSharingDetail),
/* harmony export */   b: () => (/* binding */ shareItems),
/* harmony export */   c: () => (/* binding */ isBlockedFromSharingToPublic),
/* harmony export */   d: () => (/* binding */ isBlockedFromDeveloperSharingToPublic),
/* harmony export */   e: () => (/* binding */ dependencyCheckCacheTypes),
/* harmony export */   i: () => (/* binding */ isAccessLevelGreater),
/* harmony export */   s: () => (/* binding */ shareItemsToSharedGroups),
/* harmony export */   u: () => (/* binding */ unshareItems)
/* harmony export */ });
/* harmony import */ var _server_item_8d384796_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./server-item-8d384796.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/server-item-8d384796.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/* harmony import */ var _service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./service-8c2c4241.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/service-8c2c4241.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./privileges-5c382f61.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js");
/* harmony import */ var _item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./item-c58ffced.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-c58ffced.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */









/**
 * Share items to the specified groups with the specified access level
 *
 * Note: `request` will toast an error on the Home app `useFetchRequest` is a workaround. TODO: remove this once we have a better way
 *
 * */
const shareItems = async (items, shareLevel, groupIds, config, useFetchRequest = false) => {
    const { portal, user } = config;
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.g)(portal)}content/users/${user.username}/shareItems`;
    let result = [];
    const shareLevelOptions = shareLevel ? toShareLevelOptions(shareLevel) : {};
    if (items.every((item) => (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_2__.i)(item, user))) {
        try {
            result = (await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_3__.r)(url, portal, {
                body: Object.assign({ items: items.map((item) => item.id).join(","), groups: (groupIds === null || groupIds === void 0 ? void 0 : groupIds.length) ? groupIds.join(",") : undefined, confirmItemControl: true }, shareLevelOptions),
                usePost: true
            })).results;
        }
        catch (error) {
            console.error(error);
            return { error: { code: "unhandledError" } };
        }
    }
    else {
        // TODO: hair splitting error here
        result = (await Promise.all(items.map(({ id }) => shareItem(id, shareLevelOptions, groupIds, portal, useFetchRequest)))).map((response) => response.result);
    }
    return { result };
};
const unshareItems = async (itemIds, groupIds, config) => {
    const { portal, user } = config;
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.g)(portal)}content/users/${user.username}/unshareItems`;
    try {
        const result = (await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_3__.r)(url, portal, {
            body: { items: itemIds.join(","), groups: (groupIds === null || groupIds === void 0 ? void 0 : groupIds.length) ? groupIds.join(",") : null },
            usePost: true
        })).results;
        return { result };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
/**
 * Share single item to the specified groups with the specified access level
 *
 * Note: `request` will toast an error on the Home app `useFetchRequest` is a workaround. TODO: remove this once we have a better way
 *
 * */
async function shareItem(itemId, shareLevelOptions, groups, portal, useFetchRequest = false) {
    try {
        const url = `${(0,_server_item_8d384796_js__WEBPACK_IMPORTED_MODULE_0__.g)(itemId, portal)}/share`;
        const params = Object.assign({ groups: (groups === null || groups === void 0 ? void 0 : groups.length) ? groups.join(",") : null, confirmItemControl: true }, shareLevelOptions);
        let result;
        if (useFetchRequest) {
            result = await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_3__.r)(url, portal, { body: params, usePost: true });
        }
        else {
            result = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.r)(url, params, {}, "post");
        }
        return { result };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
}
function toShareLevelOptions(shareLevel) {
    switch (shareLevel) {
        case "public":
            return { org: false, everyone: true };
        case "org":
            return { org: true, everyone: false };
        case "private":
            return { org: false, everyone: false };
        case "shared":
            return { org: false, everyone: false };
        default:
            return {};
    }
}

// disable public sharing of certain items
// WebGIS/arcgis-portal-app#26591, WebGIS/arcgis-portal-app#26987, WebGIS/arcgis-portal-app#30517
// WebGIS/arcgis-portal-app#35924, WebGIS/arcgis-portal-app#36835
function isBlockedFromSharingToPublic(item) {
    const { typeKeywords, type, url } = item;
    const hasNonShareableKeyword = typeKeywords && nonPubliclyShareableKeywords.some((keyword) => typeKeywords.includes(keyword));
    // ! No need to check for portal.isPortal here as that url type is only in ArcGIS Online
    const isOnlineDynamicImageryService = type === "Image Service" && (url === null || url === void 0 ? void 0 : url.includes("://iservices")) && url.includes("arcgis.com");
    const isNonShareableType = nonPubliclyShareableTypes.includes(type);
    return hasNonShareableKeyword || isOnlineDynamicImageryService || isNonShareableType;
}
function isBlockedFromDeveloperSharingToPublic(item) {
    var _a;
    const isHosted = (_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("Hosted Service");
    const blackListTypes = [
        "Vector Tile Service",
        "Map Service",
        "Scene Service",
        "Feature Service"
    ];
    return blackListTypes.includes(item.type) && isHosted;
}
const nonPubliclyShareableKeywords = [
    "Location Tracking Service",
    "Location Tracking View",
    "IoTFeed",
    "IoTFeatureLayer",
    "IoTMapImageLayer",
    "IoTStreamLayer",
    "Administrative Report",
    "EditExtensionIndoorsSpaces",
    "ArcgisWorkflowJobLocation"
];
const nonPubliclyShareableTypes = ["Knowledge Graph", "Pro Project"];

// * --- Dependent item layers
const getDependentItemLayers = async (mainItem, portal) => {
    const id = mainItem.id;
    let getDataError;
    let itemsAndLayers = { items: [], layers: [] };
    switch (mainItem.type) {
        case "Group Layer":
            ({ result: itemsAndLayers, error: getDataError } = await getGroupLayerDependentItemLayers(id, portal));
            break;
        case "Web Map":
        case "Web Scene":
            ({ result: itemsAndLayers, error: getDataError } = await getWebMapDependentItemLayers(id, portal));
            break;
        case "Web Mapping Application":
            ({ result: itemsAndLayers, error: getDataError } = await getWebAppDependentItemLayers(id, portal));
            break;
        case "Web Experience":
        case "Web Experience Template":
            ({ result: itemsAndLayers, error: getDataError } = await getWebExperienceDependentItemLayers(id, mainItem.typeKeywords, portal));
            break;
        case "Big Data File Share":
            ({ result: itemsAndLayers, error: getDataError } = await getBDFSDependentItems(mainItem, portal));
            break;
        case "Data Store":
            ({ result: itemsAndLayers, error: getDataError } = await getCloudDataStoreDependentItems(mainItem, portal));
            break;
    }
    return { result: itemsAndLayers, error: getDataError };
};
// * --- Group layer
const getGroupLayerDependentItemLayers = async (itemId, portal) => {
    try {
        const itemData = await (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.g)(itemId, portal);
        return {
            result: {
                items: [],
                layers: [Object.assign({}, itemData)]
            }
        };
    }
    catch (error) {
        // TODO: handle more error
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
// * --- Web map
const getWebMapDependentItemLayers = async (itemId, portal) => {
    var _a, _b;
    try {
        const itemData = await (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.g)(itemId, portal);
        const { operationalLayers, baseMap, tables, ground } = itemData;
        return {
            result: {
                items: [],
                layers: [
                    ...(operationalLayers !== null && operationalLayers !== void 0 ? operationalLayers : []),
                    ...((_a = baseMap === null || baseMap === void 0 ? void 0 : baseMap.baseMapLayers) !== null && _a !== void 0 ? _a : []),
                    ...((_b = ground === null || ground === void 0 ? void 0 : ground.layers) !== null && _b !== void 0 ? _b : []),
                    ...(tables !== null && tables !== void 0 ? tables : [])
                ]
            }
        };
    }
    catch (error) {
        // TODO: handle more error
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
// * --- Web app
const getWebAppDependentItemLayers = async (itemId, portal) => {
    try {
        const itemData = await (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.g)(itemId, portal);
        if (!itemData) {
            return { result: { items: [], layers: [] } };
        }
        const webAppMapList = getWebAppMapList(itemData);
        const dependentItems = (await Promise.all(webAppMapList.map((itemId) => (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.a)(itemId, portal))))
            // TODO: handle errors
            .map(({ result }) => result)
            .filter((item) => item);
        const dependentItemLayers = await Promise.all(dependentItems.map((item) => getDependentItemLayers(item, portal)));
        const { items, layers } = flattenDependentItemsAndLayerResponse(dependentItemLayers
            .map(({ result }) => result)
            .flat()
            .filter((result) => result));
        return {
            // Web map application doesn't have any layers so we only return the layers from dep items
            result: { items: [...dependentItems, ...items], layers }
        };
    }
    catch (error) {
        // TODO: handle more error
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
const getWebAppMapList = (appData) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const items = ((_a = appData === null || appData === void 0 ? void 0 : appData.map) === null || _a === void 0 ? void 0 : _a.itemId) ? [appData.map.itemId] : [];
    const portfolioCollection = (_d = (_c = (_b = appData.values) === null || _b === void 0 ? void 0 : _b.itemCollection) === null || _c === void 0 ? void 0 : _c.map((el) => el.id)) !== null && _d !== void 0 ? _d : [];
    const maps = (_g = (_f = (_e = appData.values) === null || _e === void 0 ? void 0 : _e.webmap) === null || _f === void 0 ? void 0 : _f.split(",")) !== null && _g !== void 0 ? _g : [];
    const scenes = (_k = (_j = (_h = appData.values) === null || _h === void 0 ? void 0 : _h.webscene) === null || _j === void 0 ? void 0 : _j.split(",")) !== null && _k !== void 0 ? _k : [];
    return [...items, ...portfolioCollection, ...maps, ...scenes];
};
// * --- Web experience
const getWebExperienceDependentItemLayers = async (itemId, typeKeywords, portal) => {
    const draftUrl = `${(0,_server_item_8d384796_js__WEBPACK_IMPORTED_MODULE_0__.g)(itemId, portal)}/resources/config/config.json`;
    const itemDataUrl = (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.b)(itemId, portal);
    const dataUrls = [];
    if (typeKeywords.includes("status: Draft")) {
        dataUrls.push(draftUrl);
    }
    else if (typeKeywords.includes("status: Changed")) {
        dataUrls.push(draftUrl, itemDataUrl);
    }
    else {
        dataUrls.push(itemDataUrl);
    }
    try {
        const allItems = [];
        const allDependentItems = [];
        const allLayers = [];
        await Promise.all(dataUrls.map(async (dataUrl) => {
            const itemData = await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_3__.r)(dataUrl, portal);
            if (!(itemData === null || itemData === void 0 ? void 0 : itemData.dataSources) && !(itemData === null || itemData === void 0 ? void 0 : itemData.utilities)) {
                return;
            }
            const dependentItems = (await Promise.all(getWebExperienceDependencyIdList(itemData).map((itemId) => (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.a)(itemId, portal)))) // TODO: handle errors
                .map(({ result }) => result)
                .filter((item) => item);
            const dependentItemLayers = await Promise.all(dependentItems.map((item) => getDependentItemLayers(item, portal)));
            const { items, layers } = flattenDependentItemsAndLayerResponse(dependentItemLayers.flatMap(({ result }) => result).filter((layer) => layer));
            allLayers.push(...layers);
            allItems.push(...items);
            allDependentItems.push(...dependentItems);
        }));
        return {
            // Web experience doesn't have any layers so we only return the layers from dep items
            result: { items: [...allDependentItems, ...allItems], layers: allLayers }
        };
    }
    catch (error) {
        // TODO: handle more error
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
function getWebExperienceDependencyIdList(data) {
    const dataSources = data.dataSources || {};
    const utilities = data.utilities || {};
    const allDeps = [...Object.values(dataSources), ...Object.values(utilities)];
    return allDeps.map((dep) => dep.itemId).filter((id) => id);
}
// * --- Big data file share
const getBDFSDependentItems = async (item, portal) => {
    try {
        // Data Store (Big Data File Share: File Share, HDFS, Hive & Cloud) -> Data Store (Big Data File Share)
        const { relatedItems } = await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_3__.g)(item.id, portal, {
            relationshipType: "BDFSDataStore2BDFSCatalogService",
            direction: "reverse"
        });
        // Data Store (Big Data File Share: Cloud) -> Data Store (Big Data File Share) - display 2 items
        // Here the share request must be sent using the ID of the Data Store (Cloud) item
        const typeKeywords = relatedItems[0].typeKeywords;
        if (typeKeywords.includes("bigDataFileShare") && typeKeywords.includes("dataStore")) {
            const { result: relatedDataStoreResult } = await getCloudDataStoreDependentItems(relatedItems[0], portal);
            const { items: relatedDataStore } = relatedDataStoreResult;
            const bdfsItem = await (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.c)(relatedItems[0].id, portal);
            return { result: { items: [...relatedDataStore, bdfsItem], layers: [] } };
        }
        // Data Store (Big Data File Share: File Share, HDFS && Hive) -> Data Store (Big Data File Share) - display 1 item
        return {
            result: {
                items: await Promise.all(relatedItems.map((relatedItem) => (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.c)(relatedItem.id, portal))),
                layers: []
            }
        };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
// * --- Data Store (Big Data File Share) -> Data Store (Cloud) - display 1 item
const getCloudDataStoreDependentItems = async (item, portal) => {
    try {
        const { relatedItems } = await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_3__.g)(item.id, portal, {
            relationshipType: "CloudDataStore2BDFSDataStore",
            direction: "reverse"
        });
        return {
            result: {
                items: await Promise.all(relatedItems.map((relatedItem) => (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.c)(relatedItem.id, portal))),
                layers: []
            }
        };
    }
    catch (error) {
        console.error("error:", error);
        return { error: { code: "unhandledError" } };
    }
};
const flattenDependentItemsAndLayerResponse = (responses) => {
    return {
        items: responses.flatMap((response) => response.items),
        layers: responses.flatMap((response) => response.layers)
    };
};

/**
 * Get the groups that a layer is shared with
 */
async function getLayerSharedGroups(layerId, portal, includeFavoriteGroups = false) {
    try {
        const { result } = await (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.d)(layerId, portal);
        return {
            result: [...result.admin, ...result.member, ...result.other]
                .filter((group) => includeFavoriteGroups || !group.isFav)
                .map((group) => group.id)
        };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
}

const isWebMapTable = (layer) => 
// ! This is just a workaround for now but it's not completely safe since there is no discriminator
!("layerType" in layer) && layer.url && layer.popupInfo;
const isSupportedLayerTypeForUrlCheck = (layer) => {
    const validTypes = [
        "table",
        "ArcGISFeatureLayer",
        "ArcGISTiledMapServiceLayer",
        "VectorTileLayer",
        "GroupLayer",
        "ArcGISImageServiceLayer",
        "ArcGISTiledImageServiceLayer",
        "SubtypeGroupLayer",
        "ArcGISStreamLayer"
    ];
    return validTypes.includes(layer.layerType);
};
const isTileLayer = (layer) => layer.layerType === "ArcGISTiledMapServiceLayer";
const isTileOperationLayerWithPopup = (layer) => layer.layerType === "ArcGISTiledMapServiceLayer" && "layers" in layer && layer.layers[0].disablePopup === false;
const isVectorTileLayer = (layer) => layer.layerType === "VectorTileLayer" && "styleUrl" in layer;
const DEFAULT_SHARING_DETAILS = {
    needsGroupUpdate: false,
    needsShareLevelUpdate: false,
    canEditShareLevel: true,
    premium: false,
    bdfsDatastore: false
};

const accessLevel = {
    private: 0,
    shared: 1,
    org: 2,
    public: 3
};
const isAccessLevelGreater = (mainAccess, otherAccess) => accessLevel[mainAccess] > accessLevel[otherAccess];
/**
 * Given a URL and a relative path, return the full URL
 * e.g: https://www.arcgis.com/sharing/rest/content/items/1234567890abcdefg and "../../", return https://www.arcgis.com/sharing/rest/
 *
 */
const traverseUrls = ({ path, url }) => {
    const urlParts = url.split("/");
    const pathParts = path.split("/");
    const urlPartsToKeep = urlParts.slice(0, urlParts.length - pathParts.length);
    return urlPartsToKeep.join("/");
};

const filterUrlsFromSameOrigin = async (portal, urlsToCheck) => {
    const { owningSystemUrl: mainItemOwningSystemUrl } = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.f)(async () => (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.a)(portal), "portalInfo", portal.id);
    const urlOwningSystemInfo = await Promise.all(urlsToCheck.map(async (url) => {
        try {
            const { owningSystemUrl } = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.b)(url);
            return { owningSystemUrl, url };
        }
        catch (error) {
            console.error(error);
            return { owningSystemUrl: null, url };
        }
    }));
    return (urlOwningSystemInfo
        // TODO: handle Enterprise case
        .filter(({ owningSystemUrl }) => owningSystemUrl === mainItemOwningSystemUrl)
        .map(({ url }) => url));
};

/** Get the source item for tile layer
 * @param layer - The layer to get the source item for with layer type of ArcGISTiledMapServiceLayer
 */
const getTileLayerSourceItem = async (layer, portal) => {
    try {
        const itemId = layer.itemId;
        const itemData = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.f)(() => (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.g)(itemId, portal), "itemData", itemId);
        // Currently a tile layer can only be created from a single layer so we can just take the first layer
        const { layerItemId: sourceItemId } = itemData === null || itemData === void 0 ? void 0 : itemData.layers[0];
        if (!sourceItemId) {
            return { error: { code: "unhandledError" } };
        }
        return { result: await (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.c)(sourceItemId, portal) };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
/** Get source items for items duplicated from another item
 *
 * This will ignore items that is not on the same environment as the main item
 * or if not using the same federated server if we're in Enterprise
 *
 * https://devtopia.esri.com/WebGIS/arcgis-app-components/issues/3809
 */
const getSourceItemsFromUrls = async (itemUrls, portal) => {
    const validUrlInfos = itemUrls.filter((urlInfo) => !!(urlInfo === null || urlInfo === void 0 ? void 0 : urlInfo.url) && isSupportedLayerTypeForUrlCheck({ layerType: urlInfo.layerType }));
    const validItemUrls = await filterOutDiffOriginAGSUrls(validUrlInfos.map((urlInfo) => urlInfo.url), portal);
    // Some url is a root.json url so we need to go through another layer of getSourceItemsFromUrls to get the actual item
    const rootJSONServiceURL = [];
    // * First send request without token
    const requiredTokenUrls = [];
    const noTokenMetaData = [];
    await Promise.all(validItemUrls.map(async (url) => {
        const { result, error } = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.f)(() => (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_3__.a)(url, portal), "itemMetadata", `${url}--no-token`);
        if ((error === null || error === void 0 ? void 0 : error.code) === "tokenRequired") {
            requiredTokenUrls.push(url);
            return;
        }
        if (isRootJSONResponse(result)) {
            rootJSONServiceURL.push(getRootJSONResponseUrl(result, url));
        }
        else {
            noTokenMetaData.push(result);
        }
    }));
    const noTokenServiceIds = noTokenMetaData.map((metaData) => metaData === null || metaData === void 0 ? void 0 : metaData.serviceItemId);
    // * For urls that require token, check if they are in the same origin
    const sameHostRestUrls = await filterUrlsFromSameOrigin(portal, requiredTokenUrls);
    // If yes, then we can just get the item detail
    const requiredTokenMetaData = await Promise.all(sameHostRestUrls.map(async (url) => ({
        response: await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_3__.r)(url, portal, { addTokenManually: true }),
        url // We need this for root json url
    })));
    const requiredTokenServiceIds = requiredTokenMetaData.reduce((idList, { response, url }) => {
        if (isRootJSONResponse(response)) {
            rootJSONServiceURL.push(getRootJSONResponseUrl(response, url));
            return idList;
        }
        return [...idList, response === null || response === void 0 ? void 0 : response.serviceItemId];
    }, []);
    // * Then just get the item detail
    const returnItems = await Promise.all([...noTokenServiceIds, ...requiredTokenServiceIds].map(async (serviceItemId) => serviceItemId ? (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.c)(serviceItemId, portal) : null));
    // We repeat the same process to get the actual `serviceItemId` then the item via the root json URL
    const rootJSONItems = rootJSONServiceURL.length <= 0
        ? []
        : await getSourceItemsFromUrls(rootJSONServiceURL.map((url) => ({ url, layerType: "VectorTileLayer" })), portal);
    return [...returnItems.filter((item) => !!item), ...rootJSONItems];
};
const isRootJSONResponse = (response) => {
    return !!(response === null || response === void 0 ? void 0 : response.sources);
};
const getRootJSONResponseUrl = (response, url) => {
    var _a;
    const responseUrl = (_a = Object.values(response.sources)[0]) === null || _a === void 0 ? void 0 : _a.url;
    if (!responseUrl) {
        return null;
    }
    return responseUrl.includes("..") ? traverseUrls({ url, path: responseUrl }) : responseUrl;
};
const filterOutDiffOriginAGSUrls = async (urls, portal) => {
    const validAgsURL = urls.filter((url) => !!url && !!(0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_7__.p)(url));
    // TODO R3: we'll fine-grain checking this later and once items have better spec
    const nonAGSUrls = urls.filter((url) => !url || !(0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_7__.p)(url));
    const sameOriginUrls = await filterUrlsFromSameOrigin(portal, validAgsURL);
    return [...sameOriginUrls, ...nonAGSUrls];
};

const getSourceItemsFromDependentLayers = async (dependentLayers, portal) => {
    // * Recursively flatten layers, focusing on GroupLayer
    const flattenedLayers = [];
    const analyzeLayer = (layer) => {
        if (isWebMapTable(layer)) {
            flattenedLayers.push({
                id: layer.id,
                url: layer.url,
                layerType: "table",
                getType: "normal"
            });
            return;
        }
        if (layer.layerType === "GroupLayer") {
            if (layer.itemId) {
                // A GroupLayer item
                flattenedLayers.push({
                    id: layer.id,
                    itemId: layer.itemId,
                    layerType: "GroupLayer",
                    getType: "normal"
                });
            }
            layer.layers.forEach((subLayer) => {
                if (isWebMapTable(subLayer) || subLayer.layerType === "GroupLayer") {
                    analyzeLayer(subLayer);
                    return;
                }
                const subLayerUrl = subLayer.url;
                if (!subLayerUrl) {
                    analyzeLayer(subLayer);
                    return;
                }
                const parseUrlInfo = (0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_7__.p)(subLayerUrl);
                analyzeLayer(Object.assign(Object.assign({}, subLayer), { 
                    // If a layer in GroupLayer has index in their URL, we'll want to strip them out first
                    // This might create some duplicated URLs but we already filter them out below via the `layerItemIdLookupMap`
                    url: (parseUrlInfo === null || parseUrlInfo === void 0 ? void 0 : parseUrlInfo.index) != null ? parseUrlInfo.baseServerUrl : subLayer.url }));
            });
            return;
        }
        if (isVectorTileLayer(layer)) {
            flattenedLayers.push({
                id: layer.id,
                url: layer.styleUrl,
                itemId: layer.itemId,
                layerType: layer.layerType,
                getType: "normal"
            });
            return;
        }
        // We need to also fetch the original item this tile layer is created from
        if (isTileLayer(layer)) {
            // If the tile layer has popup enabled, we can just take the layer directly
            //  which is simply via layers[0]'s `layerItemId`
            //  if not, we'll have to go into /data and get the `layerItemId` first from there
            const isTileLayerWithPopup = isTileOperationLayerWithPopup(layer);
            if (isTileLayerWithPopup) {
                const firstSubLayer = layer.layers[0];
                flattenedLayers.push({
                    id: firstSubLayer.id,
                    url: firstSubLayer.layerUrl,
                    getType: "normal",
                    layerType: layer.layerType,
                    itemId: firstSubLayer.layerItemId
                });
                // ! We also want to check for the tile layer sharing mismatch so there is no return here
            }
            flattenedLayers.push({
                id: layer.id,
                getType: isTileLayerWithPopup ? "normal" : "tile-layer-with-no-popup",
                itemId: layer.itemId,
                layerType: layer.layerType,
                url: layer.url
            });
            return;
        }
        if (layer.itemId || layer.url) {
            flattenedLayers.push({
                id: layer.id,
                url: layer.url,
                itemId: layer.itemId,
                layerType: layer.layerType,
                getType: "normal"
            });
        }
    };
    dependentLayers.forEach(analyzeLayer);
    const layerItemIdLookupMap = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.a)(flattenedLayers, (layer) => {
        if (layer.itemId) {
            return { key: layer.itemId, data: { searchType: "item-id", layerType: layer.layerType } };
        }
        // Layer from shallow copied or duplicated items
        // However, if layer doesn't have both `itemId` and `url`, we'll just have the key as `null` and ignore them since there is no way to get the source item
        return { key: layer.url, data: { searchType: "url", layerType: layer.layerType } };
    });
    const uniqueIds = Object.keys(layerItemIdLookupMap).filter((id) => layerItemIdLookupMap[id].searchType === "item-id");
    try {
        // * --- Handle getting source item
        const itemsFromIds = (await Promise.all(uniqueIds.map((id) => (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.c)(id, portal)))).filter((itemInfo) => !!itemInfo);
        // Handle tile layer source item if the tile layer doesn't have popup enabled
        const dependentTileLayers = flattenedLayers.filter(({ getType: type, itemId }) => type === "tile-layer-with-no-popup" && !!itemId);
        const tileLayerSourceItems = (await Promise.all(dependentTileLayers.map((layer) => getTileLayerSourceItem(layer, portal)))).map(({ result }) => result);
        // Handle item duplicated from another item --- currently also handle vector tile layer
        //  because isHostedService doesn't count vector tile layer as hosted service
        const nonHostedItems = itemsFromIds.filter((item) => !(0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_3__.i)(item.typeKeywords, item.type));
        const nonHostedItemInfos = await getSourceItemsFromUrls(nonHostedItems.map((item) => {
            const { url, id } = item;
            const layerInfo = layerItemIdLookupMap[id];
            return layerInfo ? { layerType: layerInfo.layerType, url } : null;
        }), portal);
        const nonHostedItemsLookupByUrl = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.a)(nonHostedItemInfos, (item) => ({
            key: item.url,
            data: item
        }));
        // Handle shallow copied layers
        const shallowedCopiedLayerUrls = Object.keys(layerItemIdLookupMap)
            .map((url) => {
            const layerInfo = layerItemIdLookupMap[url];
            return layerInfo && layerInfo.searchType === "url" ? { layerType: layerInfo.layerType, url } : null;
        })
            .filter((layerInfo) => layerInfo);
        const shallowCopiedItems = await getSourceItemsFromUrls(shallowedCopiedLayerUrls, portal);
        // * Aggregate the result
        const sourceItems = [];
        itemsFromIds
            .filter((itemInfo) => itemInfo)
            .forEach((item) => {
            const itemUrl = item.url;
            sourceItems.push({ sourceItem: item });
            const nonHostedSourceItem = nonHostedItemsLookupByUrl[itemUrl];
            if (nonHostedSourceItem && item.id !== nonHostedSourceItem.id) {
                sourceItems.push({ sourceItem: nonHostedSourceItem });
            }
        });
        [...tileLayerSourceItems, ...shallowCopiedItems].forEach((item) => {
            if (!item) {
                return;
            }
            sourceItems.push({ layer: null, sourceItem: item });
        });
        return { result: sourceItems };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};

/**
 * Analyze sharing detail of the item and return any mismatch or sharing issues
 *
 * @param overrideLayers
 * Normally, the util will fetch the layers from the /data endpoint
 * However, if the user has overrideLayers layers, we can pass them in here
 *
 * **Note!!!**: Make sure the layers passed in is in the form of what we would receive from the /data endpoint of the item, not JS API's `Layer`
 *
 * This is useful in the case of Map Viewer where the /data endpoint is not updated with the latest layers after save
 * However, cases like DataStore and BDFS use the items directly and therefore this param is redundant
 *
 * @param options - options - see {@link Options}
 */
const analyzeSharingDetail = async (item, portal, overrideLayers, options = { clearDataCacheOnDone: true }) => {
    if (item.access === "private") {
        return {
            result: {
                needEditableLayers: [],
                needPubliclyEditableLayers: [],
                needDataCollectionLayers: [],
                needsShareLevelUpdateLayers: [],
                premiumLayers: [],
                notEditableLayers: [],
                needBDFSDatastoreUpdate: [],
                needAuthentication: []
            }
        };
    }
    const { result, error } = await getLayerAndSharingDetail(item, portal, overrideLayers);
    if (error) {
        return { error };
    }
    const sharingDetailBuckets = {
        needEditableLayers: [],
        needPubliclyEditableLayers: [],
        needDataCollectionLayers: [],
        needsShareLevelUpdateLayers: [],
        premiumLayers: [],
        notEditableLayers: [],
        needBDFSDatastoreUpdate: [],
        needAuthentication: checkIfDeveloperBasemap(item)
            ? [
                {
                    sourceItem: item,
                    detail: {
                        bdfsDatastore: false,
                        canEditShareLevel: true,
                        needsGroupUpdate: false,
                        needsShareLevelUpdate: false,
                        premium: false
                    }
                }
            ]
            : []
    };
    await Promise.all(result === null || result === void 0 ? void 0 : result.map(async (info) => {
        const bucket = await getSharingDetailBucket({
            mainItem: item,
            sharingDetailResult: info,
            portal
        });
        bucket && sharingDetailBuckets[bucket].push(info);
    }));
    if (options.clearDataCacheOnDone) {
        // TODO: find a way to scope this to the function only (possibly through store of cache)
        //  but right now we don't have a use case for that so it should be fine...
        dependencyCheckCacheTypes.forEach((type) => (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.c)(type));
    }
    return { result: sharingDetailBuckets };
};
/**
 * Get item and layers from /data in case user doesn't pass layers

  * Ultimately, the goal is to get the source item and their sharing detail from all the dependent layers
 */
const getLayerAndSharingDetail = async (mainItem, portal, overrideLayers) => {
    let itemsToCheck = [];
    let dependentLayers = [...(overrideLayers || [])];
    let getDataError;
    if (!(dependentLayers === null || dependentLayers === void 0 ? void 0 : dependentLayers.length)) {
        // If the consumer doesn't pass in any layers, we need to get the layers from the actual endpoints
        const { error, result } = await getDependentItemLayers(mainItem, portal);
        getDataError = error;
        dependentLayers = result.layers;
        itemsToCheck = result.items;
    }
    if (getDataError) {
        return { error: getDataError };
    }
    if (dependentLayers.length <= 0 && itemsToCheck.length <= 0) {
        return { error: { code: "dataNotAvailable" } };
    }
    try {
        // For BDFS and Data Store, we already retrieve the deps in getDependentItemLayers which is also the source items
        // and there is no need to get the source item again
        if (mainItem.type !== "Big Data File Share" && mainItem.type !== "Data Store") {
            const { result: dependentLayerSourceItems, error } = await getSourceItemsFromDependentLayers(dependentLayers, portal);
            if (error) {
                return { error };
            }
            itemsToCheck.push(...dependentLayerSourceItems.map(({ sourceItem }) => sourceItem));
        }
        // * Group sharing stuff
        const { result: mainItemSharingGroups, error: getSharedGroupsError } = await getLayerSharedGroups(mainItem.id, portal);
        if (getSharedGroupsError) {
            return { error: getSharedGroupsError };
        }
        // Sometimes layers can be created from he same source layers so we need to make sure we don't check the same source item multiple times
        const allSourceItems = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.u)(itemsToCheck, (item) => item.id);
        const result = await Promise.all(allSourceItems.map(async (item) => {
            const sharingDetail = await getItemSharingDetail({
                sourceItem: item,
                mainItemAccess: mainItem.access,
                mainItemSharingGroups,
                portal
            });
            return { sourceItem: item, detail: sharingDetail };
        }));
        return { result };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
async function getItemSharingDetail({ mainItemAccess, mainItemSharingGroups, portal, sourceItem }) {
    const { access: sourceItemAccess, itemControl } = sourceItem;
    const sharingDetail = Object.assign({}, DEFAULT_SHARING_DETAILS);
    const isMainItemSharingToPublic = mainItemAccess === "public";
    if (isBlockedFromSharingToPublic(sourceItem) && isMainItemSharingToPublic) {
        return Object.assign(Object.assign({}, sharingDetail), { needsShareLevelUpdate: true, canEditShareLevel: false });
    }
    // Can current user update the sharing on this item, and do they need to, if the layer is public
    // it doesn't really matter if they can or cannot
    if (sourceItemAccess !== "public") {
        sharingDetail.canEditShareLevel = checkCanUpdateShareLevel(itemControl);
        sharingDetail.needsGroupUpdate = await checkNeedGroupUpdate({
            sourceItem,
            isMainItemSharingToPublic,
            mainItemSharingGroups,
            portal
        });
        sharingDetail.needsShareLevelUpdate = checkNeedShareUpdate({
            mainItemAccess,
            sourceItemAccess
        });
    }
    else {
        // Is this item considered a premium item
        sharingDetail.premium = isPremiumContent(sourceItem);
    }
    return sharingDetail;
}
const checkCanUpdateShareLevel = (itemControl) => itemControl === "admin";
const checkIfDeveloperBasemap = (item) => item.typeKeywords.includes("DeveloperBasemap");
const checkNeedGroupUpdate = async ({ sourceItem, isMainItemSharingToPublic, portal, mainItemSharingGroups }) => {
    // TODO: remove this once we have fine-grain check for
    //  https://devtopia.esri.com/WebGIS/arcgis-app-components/pull/4068
    if (isMainItemSharingToPublic) {
        return false;
    }
    const { result: layerSharedGroups } = await getLayerSharedGroups(sourceItem.id, portal);
    return !sharedWithSameGroups(mainItemSharingGroups, layerSharedGroups);
};
const checkNeedShareUpdate = ({ mainItemAccess, sourceItemAccess }) => 
// "shared" is the same as "private" with groups so it needs group update, not share update
!(sourceItemAccess === "private" && mainItemAccess === "shared") &&
    isAccessLevelGreater(mainItemAccess, sourceItemAccess);
function isPremiumContent(item) {
    return (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_2__.a)(item) || (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_2__.b)(item);
    // return selectedShareLevel !== "public" ? false : isSubscriber(item) || isPremium(item);
}
function sharedWithSameGroups(sharedGroups, layerSharedGroups) {
    if (sharedGroups === null || sharedGroups === void 0 ? void 0 : sharedGroups.length) {
        // We use `sharedGroups` to check the order since we only need to check if layerSharedGroups
        // contains the same groups in the same order as sharedGroups, not the other way around
        const groupsNotSharedWithLayer = sharedGroups.filter((value) => !(layerSharedGroups || []).includes(value));
        return groupsNotSharedWithLayer.length <= 0;
    }
    return true;
}
/**
 * Share `items` with groups fetch from `sourceItemsForGroups`
 */
async function shareItemsToSharedGroups(items, sourceItemsForGroups, shareLevel, portal, shouldUpdateGroup = true) {
    const { user } = portal;
    const sharedGroupsList = !shouldUpdateGroup
        ? []
        : await Promise.all(sourceItemsForGroups.map(async (mainItem) => {
            const { result: groupIds } = await getLayerSharedGroups(mainItem.id, portal);
            return groupIds;
        }));
    const groupIds = sharedGroupsList.flat(1);
    return shareItems(items, shareLevel, groupIds, { portal, user }, true);
}
// https://www.figma.com/file/BBmw0ioRw0ZQmCqFHJeH2N/Share-Flowchart-5?type=whiteboard&node-id=401-149&t=E77ZkPzT8cboGdt7-0
const getSharingDetailBucket = async ({ mainItem, sharingDetailResult, portal }) => {
    var _a;
    const { sourceItem, detail } = sharingDetailResult;
    const { canEditShareLevel, needsGroupUpdate, needsShareLevelUpdate, premium } = detail;
    if (detail.bdfsDatastore) {
        return "needBDFSDatastoreUpdate";
    }
    if (!needsGroupUpdate && !needsShareLevelUpdate && !premium) {
        return null;
    }
    if (!canEditShareLevel && !premium) {
        return "notEditableLayers";
    }
    switch (mainItem.access) {
        case "public":
            if (premium) {
                return "premiumLayers";
            }
            if (sourceItem.access !== "public") {
                const developer = (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_5__.i)(portal.subscriptionInfo || ((_a = portal.sourceJSON) === null || _a === void 0 ? void 0 : _a.subscriptionInfo));
                if (developer && isBlockedFromDeveloperSharingToPublic(sourceItem)) {
                    return "notEditableLayers";
                }
                if (await (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_6__.i)(sourceItem, portal)) {
                    const isDataCollectionLayer = sourceItem.typeKeywords.includes("Public Data Collection");
                    return isDataCollectionLayer ? "needEditableLayers" : "needDataCollectionLayers";
                }
            }
            return "needsShareLevelUpdateLayers";
        case "org":
        case "shared":
        case "private":
            if (premium) {
                return null;
            }
            return "needsShareLevelUpdateLayers";
        default:
            assertNever(mainItem.access);
    }
};
// We don't blow up the cache for portal info since that information will not likely be changed
const dependencyCheckCacheTypes = ["itemData", "itemMetadata"];
const assertNever = (access) => {
    throw new Error(`Unexpected share level ${access}`);
};



//# sourceMappingURL=services-66aee31b.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-f4f44b88.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-f4f44b88.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DEFAULT_SHARING_DETAIL),
/* harmony export */   a: () => (/* binding */ getUsernameQuery),
/* harmony export */   b: () => (/* binding */ showRevertGroupWarning),
/* harmony export */   c: () => (/* binding */ showRevertShareLevelWarning),
/* harmony export */   d: () => (/* binding */ DEFAULT_SHARE_LEVELS),
/* harmony export */   e: () => (/* binding */ showShareLevelChangeWarning),
/* harmony export */   f: () => (/* binding */ isShareLevelDirty),
/* harmony export */   g: () => (/* binding */ getItemsAndGroupsToUpdateShare),
/* harmony export */   h: () => (/* binding */ getPossibleShareLevel),
/* harmony export */   i: () => (/* binding */ isSelectedGroupDataDirty),
/* harmony export */   j: () => (/* binding */ getShareMode),
/* harmony export */   k: () => (/* binding */ canShareItemToGroup),
/* harmony export */   l: () => (/* binding */ checkIfSharingMixed),
/* harmony export */   s: () => (/* binding */ showEditGroupWarning)
/* harmony export */ });
/* harmony import */ var _privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./privileges-5c382f61.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/* harmony import */ var _services_66aee31b_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services-66aee31b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-66aee31b.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */





const groupsAreOwnedByOrg = (user, groupData) => {
    const { username, orgId } = user;
    return groupData.every(({ group }) => {
        const isOwner = username === (group === null || group === void 0 ? void 0 : group.owner);
        const isOwnedByMyOrg = orgId === group.orgId;
        return isOwner || isOwnedByMyOrg;
    });
};
const canShareItemToGroup = (selectedGroupData, user) => userCanShare(user) || ((0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.l)(user) && groupsAreOwnedByOrg(user, selectedGroupData));
const userCanShare = (user) => !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.h)(user) || userCanShareItemToGroup(user);
/**
 * Checks if the groups are in a mixed state where at least one group is shared with different items than the rest
 */
const checkIfSharingMixed = (items, selectedGroups) => selectedGroups.some(({ selectedByItemIds }) => selectedByItemIds.length !== items.length);
/**
 * Checks whether the user is allowed to share their item to groups
 */
function userCanShareItemToGroup(user) {
    return (user.privileges || []).includes("portal:user:shareToGroup");
}
const privateItemsHaveBeenSharedToGroups = ({ items, groupData }) => items
    .filter((item) => {
    const access = item.access;
    return access === "private" || access === "shared";
})
    .reduce((memo, item) => memo || itemHasBeenSharedToGroups({ item, groupData }), false);
const itemHasBeenSharedToGroups = ({ item, groupData }) => groupData.reduce((memo, groupData) => memo || (!!groupData.selectedByItemIds && groupData.selectedByItemIds.includes(item.id)), false);
const showEditGroupWarning = (user, selectedShareLevels) => !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.h)(user) &&
    !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.j)(user) &&
    // They can't share to org anyway so no need to check that
    selectedShareLevels.some((shareLevel) => shareLevel === "private");
const showRevertGroupWarning = (user, selectedShareLevels, initialSelectedGroupData) => (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.a)(user) &&
    selectedShareLevels.some((shareLevel) => shareLevel === "private") &&
    initialSelectedGroupData.length > 0;
const showRevertShareLevelWarning = (user, items, selectedGroupData) => !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.h)(user) &&
    !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.k)(user) &&
    privateItemsHaveBeenSharedToGroups({ items, groupData: selectedGroupData });
const showShareLevelChangeWarning = (user, newShareLevel, selectedGroupData) => !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.b)(user) &&
    !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.h)(user) &&
    !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.k)(user) &&
    newShareLevel === "private" &&
    Object.keys(selectedGroupData).length > 0;

const getUsernameQuery = ({ shareMode, currentUsername, user, userGroupLookup, isPrivate }) => {
    var _a;
    let groupIds = [];
    let groupIdsQuery;
    if (userGroupLookup) {
        let currentUserGroups = [];
        if (shareMode === "admin" && ((_a = userGroupLookup[currentUsername]) === null || _a === void 0 ? void 0 : _a.length) && currentUsername !== user.username) {
            // In admin case, we want to also includes groups that the item owner has access to
            currentUserGroups = [...userGroupLookup[currentUsername]];
        }
        if (shareMode !== "admin" || !isPrivate) {
            // For admin, we only want to include the admin's groups if the item is not private
            // For private item owner, includes groups that they can share to
            userGroupLookup[user.username].forEach((group) => {
                if (!currentUserGroups.some((g) => g.id === group.id)) {
                    currentUserGroups.push(group);
                }
            });
        }
        currentUserGroups === null || currentUserGroups === void 0 ? void 0 : currentUserGroups.forEach((group) => {
            var _a;
            // include group ids that the current user is owner or admin or if viewOnly is false
            const memberType = (_a = group.userMembership) === null || _a === void 0 ? void 0 : _a.memberType;
            if (group.isViewOnly && (memberType === "owner" || memberType === "admin")) {
                groupIds.push(group.id);
            }
        });
    }
    if (groupIds.length) {
        groupIdsQuery = `(isviewonly:false OR id:(${groupIds.join(" OR ")}))`;
    }
    const adminGroupQuery = groupIds.length ? ` OR id:(${groupIds.join(" OR ")})` : "";
    switch (shareMode) {
        // In the default (item owner) case, we want to show all the groups
        // that the user either owns or has write access to.
        // Write access is indicated by the isviewonly flag.
        //
        // Ideally, we'd also be able to show groups the current user is admin of
        // maybe with a syntax like admin:${currentUsername}
        // but the search endpoint does not support that.
        case "default":
            return groupIdsQuery || `(owner:${currentUsername} OR isviewonly:false)`;
        // group owner mode should only see groups owned by the current user
        // excluding shared-update groups
        case "group":
            return `owner:${currentUsername} -capabilities:updateitemcontrol`;
        // In admin cases, we want all the groups the current user is a member of.
        // this is handled by the searchUserAccess and searchUserName params
        // outside of the query string.
        case "admin":
            if (user.username === currentUsername) {
                return `(isviewonly:false${adminGroupQuery} OR owner:${user.username}) -capabilities:updateitemcontrol`;
            }
            // When looking at the content user's groups, show that user's groups
            // or groups they have access to.
            // WebGIS/arcgis-portal-app#28041
            return `(owner:${currentUsername} OR isviewonly:false${adminGroupQuery})`;
        default:
            return "";
    }
};

const DEFAULT_SHARING_DETAIL = {
    needEditableLayers: [],
    needPubliclyEditableLayers: [],
    needDataCollectionLayers: [],
    needsShareLevelUpdateLayers: [],
    premiumLayers: [],
    notEditableLayers: [],
    needAuthentication: [],
    needBDFSDatastoreUpdate: []
};
const DEFAULT_SHARE_LEVELS = ["private", "org", "public"];

// TODO: add unit test
/**
 * Compose the list of items/groups to share and unshare
 *
 * ! This assume when we share/unshare, we share/unshare to all items
 *
 * Useful for /shareItems or /unshareItems endpoints
 *  */
const getItemsAndGroupsToUpdateShare = (initialSelectedGroupData, curSelectedGroupData) => {
    // 3 states to handle:
    // 1: groups that are completely unshared from the all items -> unshareData
    // 2: groups that are completely shared to all items -> shareData
    // 3: mixed sharing -> we don't care // ! it will affect the activity log but we don't care for now
    const completelyUnsharedGroupData = initialSelectedGroupData.filter((groupData) => !curSelectedGroupData.some((curGroupData) => curGroupData.group.id === groupData.group.id));
    const completelySharedGroupData = curSelectedGroupData.filter((groupData) => {
        const initialGroupData = initialSelectedGroupData.find((initialGroupData) => initialGroupData.group.id === groupData.group.id);
        // This assume that when we share/unshare, we share/unshare to all items,
        //  so this means groupData.selectedByItemIds.length is already the max
        // This would make the util independent of the length of the items array
        return !initialGroupData || initialGroupData.selectedByItemIds.length < groupData.selectedByItemIds.length;
    });
    return {
        unshareGroupIds: completelyUnsharedGroupData.map((groupData) => groupData.group.id),
        shareGroupIds: completelySharedGroupData.map((groupData) => groupData.group.id)
    };
};
const getPossibleShareLevel = (user, items, portal) => {
    const isPublicUser$1 = (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.a)(user);
    let possibleShareLevelOptions = DEFAULT_SHARE_LEVELS;
    if (isPublicUser$1) {
        possibleShareLevelOptions = ["private", "public"];
    }
    else if (!portal.canSharePublic && !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.b)(user)) {
        possibleShareLevelOptions = ["private", "org"];
    }
    possibleShareLevelOptions = possibleShareLevelOptions.filter((shareLevel) => canShareLevel(shareLevel, items, user, portal));
    return possibleShareLevelOptions;
};
const canShareLevel = (shareLevel, items, user, portal) => {
    var _a;
    if (shareLevel === "private") {
        return true;
    }
    const isOwnerOfAllItems = itemsOwnedByUser(user, items);
    const itemsBelongToOrg = itemsOwnedByOrg(user, items);
    const isItemAdmin = (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.b)(user) && !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.d)(user) && itemsBelongToOrg;
    const isCustomItemAdmin = (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.b)(user) && (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.d)(user) && itemsBelongToOrg;
    const isPublicUser$1 = (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.a)(user);
    if (shareLevel === "org") {
        if (isPublicUser$1) {
            return false;
        }
        return (((0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.k)(user) && (isOwnerOfAllItems || isItemAdmin)) ||
            ((0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.m)(user) && (isItemAdmin || isCustomItemAdmin)));
    }
    if (shareLevel === "public") {
        const developer = (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.i)((portal === null || portal === void 0 ? void 0 : portal.subscriptionInfo) || ((_a = portal === null || portal === void 0 ? void 0 : portal.sourceJSON) === null || _a === void 0 ? void 0 : _a.subscriptionInfo));
        if (items.length === 1 &&
            ((0,_services_66aee31b_js__WEBPACK_IMPORTED_MODULE_3__.c)(items[0]) || (developer && (0,_services_66aee31b_js__WEBPACK_IMPORTED_MODULE_3__.d)(items[0])))) {
            return false;
        }
        const canSharePublic = portal.canSharePublic;
        return (isPublicUser$1 ||
            ((0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.n)(user) && ((isOwnerOfAllItems && canSharePublic) || isItemAdmin)) ||
            ((0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.o)(user) && (isItemAdmin || isCustomItemAdmin)));
    }
};
/**
 * Determine the share mode of the user based on the item.
 *
 * ! We only consider the first item on the list
 */
const getShareMode = (items, user, portal) => {
    var _a;
    const item = items[0];
    if ((0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_2__.i)(item, user)) {
        return "default";
    }
    /**
     * if there is no org id on the item, deduce that the user can do admin things
     *
     * if item.orgId is present, check equality against portal user's org
     */
    const itemOwnerAndUserSameOrg = (!item.orgId && !((_a = item.sourceJSON) === null || _a === void 0 ? void 0 : _a.orgId)) || itemsOwnedByOrg(user, [item]);
    if ((0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_0__.p)({ items, user, portal }) && itemOwnerAndUserSameOrg) {
        return "admin";
    }
    // if the user is not item owner or org admin, they enter group sharing mode
    // which is very restricted
    return "group";
};
const itemsOwnedByUser = (user, items) => {
    return items.every((item) => (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_2__.i)(item, user));
};
const itemsOwnedByOrg = (user, items) => {
    const userOrgId = user === null || user === void 0 ? void 0 : user.orgId;
    return items.every((item) => {
        var _a, _b;
        return ((0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_2__.i)(item, user) ||
            item.orgId === userOrgId ||
            ((_a = item.sourceJSON) === null || _a === void 0 ? void 0 : _a.orgId) === userOrgId ||
            ((_b = item.portal) === null || _b === void 0 ? void 0 : _b.id) === userOrgId ||
            item.isOrgItem);
    });
};
const isShareLevelDirty = (selectedShareLevels, initialShareLevels, items, selectedGroupData) => selectedShareLevels.some((curShareLevel, index) => {
    const initialShareLevel = initialShareLevels[index];
    // "shared" level = shared to group + "private"
    if (initialShareLevel === "shared" && curShareLevel === "private") {
        const item = items[index];
        return !selectedGroupData.some((groupData) => groupData.selectedByItemIds.includes(item.id));
    }
    return initialShareLevel !== curShareLevel;
});
// TODO: optimize this O(n^3)...
const isSelectedGroupDataDirty = (initialSelectedGroupData, curSelectedGroupData) => {
    if (initialSelectedGroupData.length !== curSelectedGroupData.length) {
        return true;
    }
    return curSelectedGroupData.some((curGroupData) => {
        const initialGroupData = initialSelectedGroupData.find((initialGroupData) => initialGroupData.group.id === curGroupData.group.id);
        if (!initialGroupData) {
            return true;
        }
        return !(0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__.f)(initialGroupData.selectedByItemIds, curGroupData.selectedByItemIds);
    });
};



//# sourceMappingURL=utils-f4f44b88.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,