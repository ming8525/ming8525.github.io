"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-9b1986"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js":
/*!***********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   P: () => (/* binding */ PREDEFINED_JSON_COLOR_RAMPS),
/* harmony export */   a: () => (/* binding */ colorRampDict),
/* harmony export */   c: () => (/* binding */ convertColorRampToColormap),
/* harmony export */   g: () => (/* binding */ getRFxArgColorRampValue)
/* harmony export */ });
/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
const e$9 = {
  transparent: [0, 0, 0, 0],
  black: [0, 0, 0, 1],
  silver: [192, 192, 192, 1],
  gray: [128, 128, 128, 1],
  white: [255, 255, 255, 1],
  maroon: [128, 0, 0, 1],
  red: [255, 0, 0, 1],
  purple: [128, 0, 128, 1],
  fuchsia: [255, 0, 255, 1],
  green: [0, 128, 0, 1],
  lime: [0, 255, 0, 1],
  olive: [128, 128, 0, 1],
  yellow: [255, 255, 0, 1],
  navy: [0, 0, 128, 1],
  blue: [0, 0, 255, 1],
  teal: [0, 128, 128, 1],
  aqua: [0, 255, 255, 1],
  aliceblue: [240, 248, 255, 1],
  antiquewhite: [250, 235, 215, 1],
  aquamarine: [127, 255, 212, 1],
  azure: [240, 255, 255, 1],
  beige: [245, 245, 220, 1],
  bisque: [255, 228, 196, 1],
  blanchedalmond: [255, 235, 205, 1],
  blueviolet: [138, 43, 226, 1],
  brown: [165, 42, 42, 1],
  burlywood: [222, 184, 135, 1],
  cadetblue: [95, 158, 160, 1],
  chartreuse: [127, 255, 0, 1],
  chocolate: [210, 105, 30, 1],
  coral: [255, 127, 80, 1],
  cornflowerblue: [100, 149, 237, 1],
  cornsilk: [255, 248, 220, 1],
  crimson: [220, 20, 60, 1],
  cyan: [0, 255, 255, 1],
  darkblue: [0, 0, 139, 1],
  darkcyan: [0, 139, 139, 1],
  darkgoldenrod: [184, 134, 11, 1],
  darkgray: [169, 169, 169, 1],
  darkgreen: [0, 100, 0, 1],
  darkgrey: [169, 169, 169, 1],
  darkkhaki: [189, 183, 107, 1],
  darkmagenta: [139, 0, 139, 1],
  darkolivegreen: [85, 107, 47, 1],
  darkorange: [255, 140, 0, 1],
  darkorchid: [153, 50, 204, 1],
  darkred: [139, 0, 0, 1],
  darksalmon: [233, 150, 122, 1],
  darkseagreen: [143, 188, 143, 1],
  darkslateblue: [72, 61, 139, 1],
  darkslategray: [47, 79, 79, 1],
  darkslategrey: [47, 79, 79, 1],
  darkturquoise: [0, 206, 209, 1],
  darkviolet: [148, 0, 211, 1],
  deeppink: [255, 20, 147, 1],
  deepskyblue: [0, 191, 255, 1],
  dimgray: [105, 105, 105, 1],
  dimgrey: [105, 105, 105, 1],
  dodgerblue: [30, 144, 255, 1],
  firebrick: [178, 34, 34, 1],
  floralwhite: [255, 250, 240, 1],
  forestgreen: [34, 139, 34, 1],
  gainsboro: [220, 220, 220, 1],
  ghostwhite: [248, 248, 255, 1],
  gold: [255, 215, 0, 1],
  goldenrod: [218, 165, 32, 1],
  greenyellow: [173, 255, 47, 1],
  grey: [128, 128, 128, 1],
  honeydew: [240, 255, 240, 1],
  hotpink: [255, 105, 180, 1],
  indianred: [205, 92, 92, 1],
  indigo: [75, 0, 130, 1],
  ivory: [255, 255, 240, 1],
  khaki: [240, 230, 140, 1],
  lavender: [230, 230, 250, 1],
  lavenderblush: [255, 240, 245, 1],
  lawngreen: [124, 252, 0, 1],
  lemonchiffon: [255, 250, 205, 1],
  lightblue: [173, 216, 230, 1],
  lightcoral: [240, 128, 128, 1],
  lightcyan: [224, 255, 255, 1],
  lightgoldenrodyellow: [250, 250, 210, 1],
  lightgray: [211, 211, 211, 1],
  lightgreen: [144, 238, 144, 1],
  lightgrey: [211, 211, 211, 1],
  lightpink: [255, 182, 193, 1],
  lightsalmon: [255, 160, 122, 1],
  lightseagreen: [32, 178, 170, 1],
  lightskyblue: [135, 206, 250, 1],
  lightslategray: [119, 136, 153, 1],
  lightslategrey: [119, 136, 153, 1],
  lightsteelblue: [176, 196, 222, 1],
  lightyellow: [255, 255, 224, 1],
  limegreen: [50, 205, 50, 1],
  linen: [250, 240, 230, 1],
  magenta: [255, 0, 255, 1],
  mediumaquamarine: [102, 205, 170, 1],
  mediumblue: [0, 0, 205, 1],
  mediumorchid: [186, 85, 211, 1],
  mediumpurple: [147, 112, 219, 1],
  mediumseagreen: [60, 179, 113, 1],
  mediumslateblue: [123, 104, 238, 1],
  mediumspringgreen: [0, 250, 154, 1],
  mediumturquoise: [72, 209, 204, 1],
  mediumvioletred: [199, 21, 133, 1],
  midnightblue: [25, 25, 112, 1],
  mintcream: [245, 255, 250, 1],
  mistyrose: [255, 228, 225, 1],
  moccasin: [255, 228, 181, 1],
  navajowhite: [255, 222, 173, 1],
  oldlace: [253, 245, 230, 1],
  olivedrab: [107, 142, 35, 1],
  orange: [255, 165, 0, 1],
  orangered: [255, 69, 0, 1],
  orchid: [218, 112, 214, 1],
  palegoldenrod: [238, 232, 170, 1],
  palegreen: [152, 251, 152, 1],
  paleturquoise: [175, 238, 238, 1],
  palevioletred: [219, 112, 147, 1],
  papayawhip: [255, 239, 213, 1],
  peachpuff: [255, 218, 185, 1],
  peru: [205, 133, 63, 1],
  pink: [255, 192, 203, 1],
  plum: [221, 160, 221, 1],
  powderblue: [176, 224, 230, 1],
  rebeccapurple: [102, 51, 153, 1],
  rosybrown: [188, 143, 143, 1],
  royalblue: [65, 105, 225, 1],
  saddlebrown: [139, 69, 19, 1],
  salmon: [250, 128, 114, 1],
  sandybrown: [244, 164, 96, 1],
  seagreen: [46, 139, 87, 1],
  seashell: [255, 245, 238, 1],
  sienna: [160, 82, 45, 1],
  skyblue: [135, 206, 235, 1],
  slateblue: [106, 90, 205, 1],
  slategray: [112, 128, 144, 1],
  slategrey: [112, 128, 144, 1],
  snow: [255, 250, 250, 1],
  springgreen: [0, 255, 127, 1],
  steelblue: [70, 130, 180, 1],
  tan: [210, 180, 140, 1],
  thistle: [216, 191, 216, 1],
  tomato: [255, 99, 71, 1],
  turquoise: [64, 224, 208, 1],
  violet: [238, 130, 238, 1],
  wheat: [245, 222, 179, 1],
  whitesmoke: [245, 245, 245, 1],
  yellowgreen: [154, 205, 50, 1]
};
function r$8(r) {
  return !!e$9[r] || !!e$9[r.toLowerCase()];
}
function l$4(r) {
  return e$9[r] ?? e$9[r.toLowerCase()];
}
function n$4(e, r, l) {
  l < 0 && ++l, l > 1 && --l;
  const a = 6 * l;
  return a < 1 ? e + (r - e) * a : 2 * l < 1 ? r : 3 * l < 2 ? e + (r - e) * (2 / 3 - l) * 6 : e;
}
function o$8(e, r, l, a = 1) {
  const o = (((e % 360) + 360) % 360) / 360,
    i = l <= 0.5 ? l * (r + 1) : l + r - l * r,
    t = 2 * l - i;
  return [
    Math.round(255 * n$4(t, i, o + 1 / 3)),
    Math.round(255 * n$4(t, i, o)),
    Math.round(255 * n$4(t, i, o - 1 / 3)),
    a
  ];
}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
function n$3() {
  return [0, 0, 0];
}
function t$3(n) {
  return [n[0], n[1], n[2]];
}
function r$7(n, t, r) {
  return [n, t, r];
}
function e$8(t) {
  const r = n$3(),
    e = Math.min(3, t.length);
  for (let n = 0; n < e; ++n) r[n] = t[n];
  return r;
}
function u$6(n, t) {
  return new Float64Array(n, t, 3);
}
function o$7() {
  return n$3();
}
function a$6() {
  return r$7(1, 1, 1);
}
function s$7() {
  return r$7(1, 0, 0);
}
function c$7() {
  return r$7(0, 1, 0);
}
function i$6() {
  return r$7(0, 0, 1);
}
const f$4 = o$7(),
  l$3 = a$6(),
  _$2 = s$7(),
  O$3 = c$7(),
  b$4 = i$6();
Object.freeze(
  Object.defineProperty(
    {
      __proto__: null,
      ONES: l$3,
      UNIT_X: _$2,
      UNIT_Y: O$3,
      UNIT_Z: b$4,
      ZEROS: f$4,
      clone: t$3,
      create: n$3,
      createView: u$6,
      fromArray: e$8,
      fromValues: r$7,
      ones: a$6,
      unitX: s$7,
      unitY: c$7,
      unitZ: i$6,
      zeros: o$7
    },
    Symbol.toStringTag,
    { value: "Module" }
  )
);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
let t$2 = 1e-6;
function a$5() {
  return t$2;
}
function e$7(a) {
  t$2 = a;
}
const n$2 = Math.random,
  o$6 = Math.PI / 180,
  s$6 = 180 / Math.PI;
function r$6(t) {
  return t * o$6;
}
function u$5(t) {
  return t * s$6;
}
function c$6(a, e) {
  return Math.abs(a - e) <= t$2 * Math.max(1, Math.abs(a), Math.abs(e));
}
Object.freeze(
  Object.defineProperty(
    { __proto__: null, RANDOM: n$2, equals: c$6, getEpsilon: a$5, setEpsilon: e$7, toDegree: u$5, toRadian: r$6 },
    Symbol.toStringTag,
    { value: "Module" }
  )
);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
function s$5(t) {
  const n = t[0],
    a = t[1],
    s = t[2];
  return Math.sqrt(n * n + a * a + s * s);
}
function r$5(t, n) {
  return (t[0] = n[0]), (t[1] = n[1]), (t[2] = n[2]), t;
}
function o$5(t, n, a, s) {
  return (t[0] = n), (t[1] = a), (t[2] = s), t;
}
function u$4(t, n, a) {
  return (t[0] = n[0] + a[0]), (t[1] = n[1] + a[1]), (t[2] = n[2] + a[2]), t;
}
function e$6(t, n, a) {
  return (t[0] = n[0] - a[0]), (t[1] = n[1] - a[1]), (t[2] = n[2] - a[2]), t;
}
function c$5(t, n, a) {
  return (t[0] = n[0] * a[0]), (t[1] = n[1] * a[1]), (t[2] = n[2] * a[2]), t;
}
function i$5(t, n, a) {
  return (t[0] = n[0] / a[0]), (t[1] = n[1] / a[1]), (t[2] = n[2] / a[2]), t;
}
function h$3(t, n) {
  return (t[0] = Math.ceil(n[0])), (t[1] = Math.ceil(n[1])), (t[2] = Math.ceil(n[2])), t;
}
function M$2(t, n) {
  return (t[0] = Math.floor(n[0])), (t[1] = Math.floor(n[1])), (t[2] = Math.floor(n[2])), t;
}
function f$3(t, n) {
  return (t[0] = Math.abs(n[0])), (t[1] = Math.abs(n[1])), (t[2] = Math.abs(n[2])), t;
}
function l$2(t, n) {
  return (t[0] = Math.sign(n[0])), (t[1] = Math.sign(n[1])), (t[2] = Math.sign(n[2])), t;
}
function m$3(t, n, a) {
  return (t[0] = Math.min(n[0], a[0])), (t[1] = Math.min(n[1], a[1])), (t[2] = Math.min(n[2], a[2])), t;
}
function d$2(t, n, a) {
  return (t[0] = Math.max(n[0], a[0])), (t[1] = Math.max(n[1], a[1])), (t[2] = Math.max(n[2], a[2])), t;
}
function b$3(t, n) {
  return (t[0] = Math.round(n[0])), (t[1] = Math.round(n[1])), (t[2] = Math.round(n[2])), t;
}
function g$3(t, n, a) {
  return (t[0] = n[0] * a), (t[1] = n[1] * a), (t[2] = n[2] * a), t;
}
function q$1(t, n, a, s) {
  return (t[0] = n[0] + a[0] * s), (t[1] = n[1] + a[1] * s), (t[2] = n[2] + a[2] * s), t;
}
function x$3(t, n) {
  const a = n[0] - t[0],
    s = n[1] - t[1],
    r = n[2] - t[2];
  return Math.sqrt(a * a + s * s + r * r);
}
function p$2(t, n) {
  const a = n[0] - t[0],
    s = n[1] - t[1],
    r = n[2] - t[2];
  return a * a + s * s + r * r;
}
function v$2(t) {
  const n = t[0],
    a = t[1],
    s = t[2];
  return n * n + a * a + s * s;
}
function j$1(t, n) {
  return (t[0] = -n[0]), (t[1] = -n[1]), (t[2] = -n[2]), t;
}
function y$3(t, n) {
  return (t[0] = 1 / n[0]), (t[1] = 1 / n[1]), (t[2] = 1 / n[2]), t;
}
function z$2(t, n) {
  const a = n[0],
    s = n[1],
    r = n[2];
  let o = a * a + s * s + r * r;
  return o > 0 && ((o = 1 / Math.sqrt(o)), (t[0] = n[0] * o), (t[1] = n[1] * o), (t[2] = n[2] * o)), t;
}
function P$1(t, n) {
  return t[0] * n[0] + t[1] * n[1] + t[2] * n[2];
}
function _$1(t, n, a) {
  const s = n[0],
    r = n[1],
    o = n[2],
    u = a[0],
    e = a[1],
    c = a[2];
  return (t[0] = r * c - o * e), (t[1] = o * u - s * c), (t[2] = s * e - r * u), t;
}
function A$1(t, n, a, s) {
  const r = n[0],
    o = n[1],
    u = n[2];
  return (t[0] = r + s * (a[0] - r)), (t[1] = o + s * (a[1] - o)), (t[2] = u + s * (a[2] - u)), t;
}
function D$1(t, n, a, s, r, o) {
  const u = o * o,
    e = u * (2 * o - 3) + 1,
    c = u * (o - 2) + o,
    i = u * (o - 1),
    h = u * (3 - 2 * o);
  return (
    (t[0] = n[0] * e + a[0] * c + s[0] * i + r[0] * h),
    (t[1] = n[1] * e + a[1] * c + s[1] * i + r[1] * h),
    (t[2] = n[2] * e + a[2] * c + s[2] * i + r[2] * h),
    t
  );
}
function I$1(t, n, a, s, r, o) {
  const u = 1 - o,
    e = u * u,
    c = o * o,
    i = e * u,
    h = 3 * o * e,
    M = 3 * c * u,
    f = c * o;
  return (
    (t[0] = n[0] * i + a[0] * h + s[0] * M + r[0] * f),
    (t[1] = n[1] * i + a[1] * h + s[1] * M + r[1] * f),
    (t[2] = n[2] * i + a[2] * h + s[2] * M + r[2] * f),
    t
  );
}
function L$1(t, n) {
  n = n || 1;
  const s = n$2,
    r = 2 * s() * Math.PI,
    o = 2 * s() - 1,
    u = Math.sqrt(1 - o * o) * n;
  return (t[0] = Math.cos(r) * u), (t[1] = Math.sin(r) * u), (t[2] = o * n), t;
}
function O$2(t, n, a) {
  const s = n[0],
    r = n[1],
    o = n[2];
  return (
    (t[0] = a[0] * s + a[4] * r + a[8] * o + a[12]),
    (t[1] = a[1] * s + a[5] * r + a[9] * o + a[13]),
    (t[2] = a[2] * s + a[6] * r + a[10] * o + a[14]),
    t
  );
}
function S$1(t, n, a) {
  const s = n[0],
    r = n[1],
    o = n[2];
  return (
    (t[0] = s * a[0] + r * a[3] + o * a[6]),
    (t[1] = s * a[1] + r * a[4] + o * a[7]),
    (t[2] = s * a[2] + r * a[5] + o * a[8]),
    t
  );
}
function E$2(t, n, a) {
  const s = a[0],
    r = a[1],
    o = a[2],
    u = a[3],
    e = n[0],
    c = n[1],
    i = n[2];
  let h = r * i - o * c,
    M = o * e - s * i,
    f = s * c - r * e,
    l = r * f - o * M,
    m = o * h - s * f,
    d = s * M - r * h;
  const b = 2 * u;
  return (
    (h *= b),
    (M *= b),
    (f *= b),
    (l *= 2),
    (m *= 2),
    (d *= 2),
    (t[0] = e + h + l),
    (t[1] = c + M + m),
    (t[2] = i + f + d),
    t
  );
}
function Q(t, n, a, s) {
  const r = [],
    o = [];
  return (
    (r[0] = n[0] - a[0]),
    (r[1] = n[1] - a[1]),
    (r[2] = n[2] - a[2]),
    (o[0] = r[0]),
    (o[1] = r[1] * Math.cos(s) - r[2] * Math.sin(s)),
    (o[2] = r[1] * Math.sin(s) + r[2] * Math.cos(s)),
    (t[0] = o[0] + a[0]),
    (t[1] = o[1] + a[1]),
    (t[2] = o[2] + a[2]),
    t
  );
}
function R(t, n, a, s) {
  const r = [],
    o = [];
  return (
    (r[0] = n[0] - a[0]),
    (r[1] = n[1] - a[1]),
    (r[2] = n[2] - a[2]),
    (o[0] = r[2] * Math.sin(s) + r[0] * Math.cos(s)),
    (o[1] = r[1]),
    (o[2] = r[2] * Math.cos(s) - r[0] * Math.sin(s)),
    (t[0] = o[0] + a[0]),
    (t[1] = o[1] + a[1]),
    (t[2] = o[2] + a[2]),
    t
  );
}
function T(t, n, a, s) {
  const r = [],
    o = [];
  return (
    (r[0] = n[0] - a[0]),
    (r[1] = n[1] - a[1]),
    (r[2] = n[2] - a[2]),
    (o[0] = r[0] * Math.cos(s) - r[1] * Math.sin(s)),
    (o[1] = r[0] * Math.sin(s) + r[1] * Math.cos(s)),
    (o[2] = r[2]),
    (t[0] = o[0] + a[0]),
    (t[1] = o[1] + a[1]),
    (t[2] = o[2] + a[2]),
    t
  );
}
function k$2(t, n) {
  r$5(w$1, t), r$5(B$2, n), z$2(w$1, w$1), z$2(B$2, B$2);
  const a = P$1(w$1, B$2);
  return a > 1 ? 0 : a < -1 ? Math.PI : Math.acos(a);
}
const w$1 = n$3(),
  B$2 = n$3();
function C$1(t) {
  return "vec3(" + t[0] + ", " + t[1] + ", " + t[2] + ")";
}
function F$1(t, n) {
  return t[0] === n[0] && t[1] === n[1] && t[2] === n[2];
}
function G(t, a) {
  if (t === a) return !0;
  const s = t[0],
    r = t[1],
    o = t[2],
    u = a[0],
    e = a[1],
    c = a[2],
    i = a$5();
  return (
    Math.abs(s - u) <= i * Math.max(1, Math.abs(s), Math.abs(u)) &&
    Math.abs(r - e) <= i * Math.max(1, Math.abs(r), Math.abs(e)) &&
    Math.abs(o - c) <= i * Math.max(1, Math.abs(o), Math.abs(c))
  );
}
function H(t, n, a) {
  const s = a[0] - n[0],
    r = a[1] - n[1],
    o = a[2] - n[2];
  let u = s * s + r * r + o * o;
  return u > 0
    ? ((u = 1 / Math.sqrt(u)), (t[0] = s * u), (t[1] = r * u), (t[2] = o * u), t)
    : ((t[0] = 0), (t[1] = 0), (t[2] = 0), t);
}
const J = e$6,
  K = c$5,
  N = i$5,
  U = x$3,
  X = p$2,
  Y = s$5,
  Z = v$2;
Object.freeze(
  Object.defineProperty(
    {
      __proto__: null,
      abs: f$3,
      add: u$4,
      angle: k$2,
      bezier: I$1,
      ceil: h$3,
      copy: r$5,
      cross: _$1,
      direction: H,
      dist: U,
      distance: x$3,
      div: N,
      divide: i$5,
      dot: P$1,
      equals: G,
      exactEquals: F$1,
      floor: M$2,
      hermite: D$1,
      inverse: y$3,
      len: Y,
      length: s$5,
      lerp: A$1,
      max: d$2,
      min: m$3,
      mul: K,
      multiply: c$5,
      negate: j$1,
      normalize: z$2,
      random: L$1,
      rotateX: Q,
      rotateY: R,
      rotateZ: T,
      round: b$3,
      scale: g$3,
      scaleAndAdd: q$1,
      set: o$5,
      sign: l$2,
      sqrDist: X,
      sqrLen: Z,
      squaredDistance: p$2,
      squaredLength: v$2,
      str: C$1,
      sub: J,
      subtract: e$6,
      transformMat3: S$1,
      transformMat4: O$2,
      transformQuat: E$2
    },
    Symbol.toStringTag,
    { value: "Module" }
  )
);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
function a$4(t, n) {
  return (t[0] = n[0]), (t[1] = n[1]), (t[2] = n[2]), (t[3] = n[3]), t;
}
function r$4(t, n, a, r, s) {
  return (t[0] = n), (t[1] = a), (t[2] = r), (t[3] = s), t;
}
function s$4(t, n, a) {
  return (t[0] = n[0] + a[0]), (t[1] = n[1] + a[1]), (t[2] = n[2] + a[2]), (t[3] = n[3] + a[3]), t;
}
function o$4(t, n, a) {
  return (t[0] = n[0] - a[0]), (t[1] = n[1] - a[1]), (t[2] = n[2] - a[2]), (t[3] = n[3] - a[3]), t;
}
function u$3(t, n, a) {
  return (t[0] = n[0] * a[0]), (t[1] = n[1] * a[1]), (t[2] = n[2] * a[2]), (t[3] = n[3] * a[3]), t;
}
function e$5(t, n, a) {
  return (t[0] = n[0] / a[0]), (t[1] = n[1] / a[1]), (t[2] = n[2] / a[2]), (t[3] = n[3] / a[3]), t;
}
function c$4(t, n) {
  return (t[0] = Math.ceil(n[0])), (t[1] = Math.ceil(n[1])), (t[2] = Math.ceil(n[2])), (t[3] = Math.ceil(n[3])), t;
}
function i$4(t, n) {
  return (t[0] = Math.floor(n[0])), (t[1] = Math.floor(n[1])), (t[2] = Math.floor(n[2])), (t[3] = Math.floor(n[3])), t;
}
function h$2(t, n, a) {
  return (
    (t[0] = Math.min(n[0], a[0])),
    (t[1] = Math.min(n[1], a[1])),
    (t[2] = Math.min(n[2], a[2])),
    (t[3] = Math.min(n[3], a[3])),
    t
  );
}
function M$1(t, n, a) {
  return (
    (t[0] = Math.max(n[0], a[0])),
    (t[1] = Math.max(n[1], a[1])),
    (t[2] = Math.max(n[2], a[2])),
    (t[3] = Math.max(n[3], a[3])),
    t
  );
}
function f$2(t, n) {
  return (t[0] = Math.round(n[0])), (t[1] = Math.round(n[1])), (t[2] = Math.round(n[2])), (t[3] = Math.round(n[3])), t;
}
function l$1(t, n, a) {
  return (t[0] = n[0] * a), (t[1] = n[1] * a), (t[2] = n[2] * a), (t[3] = n[3] * a), t;
}
function m$2(t, n, a, r) {
  return (t[0] = n[0] + a[0] * r), (t[1] = n[1] + a[1] * r), (t[2] = n[2] + a[2] * r), (t[3] = n[3] + a[3] * r), t;
}
function d$1(t, n) {
  const a = n[0] - t[0],
    r = n[1] - t[1],
    s = n[2] - t[2],
    o = n[3] - t[3];
  return Math.sqrt(a * a + r * r + s * s + o * o);
}
function b$2(t, n) {
  const a = n[0] - t[0],
    r = n[1] - t[1],
    s = n[2] - t[2],
    o = n[3] - t[3];
  return a * a + r * r + s * s + o * o;
}
function x$2(t) {
  const n = t[0],
    a = t[1],
    r = t[2],
    s = t[3];
  return Math.sqrt(n * n + a * a + r * r + s * s);
}
function q(t) {
  const n = t[0],
    a = t[1],
    r = t[2],
    s = t[3];
  return n * n + a * a + r * r + s * s;
}
function p$1(t, n) {
  return (t[0] = -n[0]), (t[1] = -n[1]), (t[2] = -n[2]), (t[3] = -n[3]), t;
}
function g$2(t, n) {
  return (t[0] = 1 / n[0]), (t[1] = 1 / n[1]), (t[2] = 1 / n[2]), (t[3] = 1 / n[3]), t;
}
function v$1(t, n) {
  const a = n[0],
    r = n[1],
    s = n[2],
    o = n[3];
  let u = a * a + r * r + s * s + o * o;
  return u > 0 && ((u = 1 / Math.sqrt(u)), (t[0] = a * u), (t[1] = r * u), (t[2] = s * u), (t[3] = o * u)), t;
}
function y$2(t, n) {
  return t[0] * n[0] + t[1] * n[1] + t[2] * n[2] + t[3] * n[3];
}
function j(t, n, a, r) {
  const s = n[0],
    o = n[1],
    u = n[2],
    e = n[3];
  return (
    (t[0] = s + r * (a[0] - s)),
    (t[1] = o + r * (a[1] - o)),
    (t[2] = u + r * (a[2] - u)),
    (t[3] = e + r * (a[3] - e)),
    t
  );
}
function _(t, a) {
  const r = n$2;
  let s, o, u, e, c, i;
  a = a || 1;
  do {
    (s = 2 * r() - 1), (o = 2 * r() - 1), (c = s * s + o * o);
  } while (c >= 1);
  do {
    (u = 2 * r() - 1), (e = 2 * r() - 1), (i = u * u + e * e);
  } while (i >= 1);
  const h = Math.sqrt((1 - c) / i);
  return (t[0] = a * s), (t[1] = a * o), (t[2] = a * u * h), (t[3] = a * e * h), t;
}
function w(t, n, a) {
  const r = n[0],
    s = n[1],
    o = n[2],
    u = n[3];
  return (
    (t[0] = a[0] * r + a[4] * s + a[8] * o + a[12] * u),
    (t[1] = a[1] * r + a[5] * s + a[9] * o + a[13] * u),
    (t[2] = a[2] * r + a[6] * s + a[10] * o + a[14] * u),
    (t[3] = a[3] * r + a[7] * s + a[11] * o + a[15] * u),
    t
  );
}
function z$1(t, n, a) {
  const r = n[0],
    s = n[1],
    o = n[2],
    u = a[0],
    e = a[1],
    c = a[2],
    i = a[3],
    h = i * r + e * o - c * s,
    M = i * s + c * r - u * o,
    f = i * o + u * s - e * r,
    l = -u * r - e * s - c * o;
  return (
    (t[0] = h * i + l * -u + M * -c - f * -e),
    (t[1] = M * i + l * -e + f * -u - h * -c),
    (t[2] = f * i + l * -c + h * -e - M * -u),
    (t[3] = n[3]),
    t
  );
}
function A(t) {
  return "vec4(" + t[0] + ", " + t[1] + ", " + t[2] + ", " + t[3] + ")";
}
function D(t, n) {
  return t[0] === n[0] && t[1] === n[1] && t[2] === n[2] && t[3] === n[3];
}
function E$1(n, a) {
  const r = n[0],
    s = n[1],
    o = n[2],
    u = n[3],
    e = a[0],
    c = a[1],
    i = a[2],
    h = a[3],
    M = a$5();
  return (
    Math.abs(r - e) <= M * Math.max(1, Math.abs(r), Math.abs(e)) &&
    Math.abs(s - c) <= M * Math.max(1, Math.abs(s), Math.abs(c)) &&
    Math.abs(o - i) <= M * Math.max(1, Math.abs(o), Math.abs(i)) &&
    Math.abs(u - h) <= M * Math.max(1, Math.abs(u), Math.abs(h))
  );
}
const L = o$4,
  O$1 = u$3,
  S = e$5,
  k$1 = d$1,
  B$1 = b$2,
  C = x$2,
  F = q;
Object.freeze(
  Object.defineProperty(
    {
      __proto__: null,
      add: s$4,
      ceil: c$4,
      copy: a$4,
      dist: k$1,
      distance: d$1,
      div: S,
      divide: e$5,
      dot: y$2,
      equals: E$1,
      exactEquals: D,
      floor: i$4,
      inverse: g$2,
      len: C,
      length: x$2,
      lerp: j,
      max: M$1,
      min: h$2,
      mul: O$1,
      multiply: u$3,
      negate: p$1,
      normalize: v$1,
      random: _,
      round: f$2,
      scale: l$1,
      scaleAndAdd: m$2,
      set: r$4,
      sqrDist: B$1,
      sqrLen: F,
      squaredDistance: b$2,
      squaredLength: q,
      str: A,
      sub: L,
      subtract: o$4,
      transformMat4: w,
      transformQuat: z$1
    },
    Symbol.toStringTag,
    { value: "Module" }
  )
);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
const u$2 = new Float32Array(1);
function i$3(t, n, r) {
  return Math.min(Math.max(t, n), r);
}
const g$1 = new DataView(new ArrayBuffer(Float64Array.BYTES_PER_ELEMENT));
function E(t) {
  return g$1.setFloat64(0, t), g$1.getBigInt64(0);
}
function B(t) {
  return g$1.setBigInt64(0, t), g$1.getFloat64(0);
}
const I = BigInt("1000000");
x$1(1);
function x$1(t) {
  const n = E((t = Math.abs(t))),
    r = B(n <= I ? I : n - I);
  return Math.abs(t - r);
}
function P(t) {
  return (u$2[0] = t), u$2[0];
}
P(34028234663852886e22);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
let e$4;
function has(a) {
  return "function" == typeof e$4[a] ? (e$4[a] = e$4[a](globalThis)) : e$4[a];
}
(e$4 =
  globalThis.dojoConfig?.has || globalThis.esriConfig?.has
    ? { ...globalThis.dojoConfig?.has, ...globalThis.esriConfig?.has }
    : {}),
  (has.add = (a, o, d, r) => ((r || void 0 === e$4[a]) && (e$4[a] = o), d && has(a))),
  (has.cache = e$4),
  has.add("esri-deprecation-warnings", !0),
  has.add("esri-force-fullscreen-debug", !1),
  (() => {
    has.add("host-webworker", void 0 !== globalThis.WorkerGlobalScope && self instanceof globalThis.WorkerGlobalScope);
    const e =
      "undefined" != typeof window &&
      "undefined" != typeof location &&
      "undefined" != typeof document &&
      window.location === location &&
      window.document === document;
    if (
      (has.add("host-browser", e),
      has.add(
        "host-node",
        "object" == typeof globalThis.process && globalThis.process.versions?.node && globalThis.process.versions.v8
      ),
      has.add("dom", e),
      has("host-browser"))
    ) {
      const e = navigator,
        a = e.userAgent,
        o = e.appVersion,
        d = parseFloat(o);
      if (
        (has.add("wp", parseFloat(a.split("Windows Phone")[1]) || void 0),
        has.add("msapp", parseFloat(a.split("MSAppHost/")[1]) || void 0),
        has.add("khtml", o.includes("Konqueror") ? d : void 0),
        has.add("edge", parseFloat(a.split("Edge/")[1]) || void 0),
        has.add("opr", parseFloat(a.split("OPR/")[1]) || void 0),
        has.add("webkit", (!has("wp") && !has("edge") && parseFloat(a.split("WebKit/")[1])) || void 0),
        has.add("chrome", (!has("edge") && !has("opr") && parseFloat(a.split("Chrome/")[1])) || void 0),
        has.add("android", (!has("wp") && parseFloat(a.split("Android ")[1])) || void 0),
        has.add(
          "safari",
          !o.includes("Safari") || has("wp") || has("chrome") || has("android") || has("edge") || has("opr")
            ? void 0
            : parseFloat(o.split("Version/")[1])
        ),
        has.add("mac", o.includes("Macintosh")),
        !has("wp") && /(iPhone|iPod|iPad)/.test(a))
      ) {
        const e = RegExp.$1.replace(/P/, "p"),
          o = /OS ([\d_]+)/.test(a) ? RegExp.$1 : "1",
          d = parseFloat(o.replace(/_/, ".").replaceAll("_", ""));
        has.add(e, d), has.add("ios", d);
      }
      has("webkit") ||
        (!a.includes("Gecko") || has("wp") || has("khtml") || has("edge") || has.add("mozilla", d),
        has("mozilla") && has.add("ff", parseFloat(a.split("Firefox/")[1] || a.split("Minefield/")[1]) || void 0));
    }
  })(),
  (() => {
    if (globalThis.navigator) {
      const e = navigator.userAgent,
        a = /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini|IEMobile/i.test(e),
        o = /iPhone/i.test(e);
      a && has.add("esri-mobile", a),
        o && has.add("esri-iPhone", o),
        has.add("esri-geolocation", !!navigator.geolocation);
    }
    has.add("esri-wasm", "WebAssembly" in globalThis),
      has.add("esri-shared-array-buffer", () => {
        const e = "SharedArrayBuffer" in globalThis,
          a = !1 === globalThis.crossOriginIsolated;
        return e && !a;
      }),
      has.add("wasm-simd", () => {
        const e = [
          0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 123, 3, 2, 1, 0, 10, 10, 1, 8, 0, 65, 0, 253, 15, 253, 98, 11
        ];
        return WebAssembly.validate(new Uint8Array(e));
      }),
      has.add("esri-atomics", "Atomics" in globalThis),
      has.add("esri-workers", "Worker" in globalThis),
      has.add("web-feat:cache", "caches" in globalThis),
      has.add("esri-workers-arraybuffer-transfer", !has("safari") || Number(has("safari")) >= 12),
      has.add("workers-pool-size", 8),
      has.add("featurelayer-simplify-thresholds", [0.5, 0.5, 0.5, 0.5]),
      has.add("featurelayer-simplify-payload-size-factors", [1, 1, 4]),
      has.add("featurelayer-animation-enabled", !0),
      has.add("featurelayer-snapshot-enabled", !0),
      has.add("featurelayer-snapshot-point-min-threshold", 8e4),
      has.add("featurelayer-snapshot-point-max-threshold", 4e5),
      has.add("featurelayer-snapshot-point-coverage", 0.1),
      has.add("featurelayer-advanced-symbols", !1),
      has.add("featurelayer-pbf", !0),
      has.add("featurelayer-pbf-statistics", !1),
      has.add("feature-layers-workers", !0),
      has.add("feature-polyline-generalization-factor", 1),
      has.add("mapview-transitions-duration", 200),
      has.add("mapview-srswitch-adjust-rotation-scale-threshold", 24e6),
      has.add("mapserver-pbf-version-support", 10.81),
      has.add("mapservice-popup-identify-max-tolerance", 20),
      has.add("heatmap-allow-raster-fallback", !1),
      has.add("heatmap-force-raster", !1),
      has("host-webworker") ||
        (has("host-browser") &&
          (has.add("esri-csp-restrictions", () => {
            try {
              new Function();
            } catch {
              return !0;
            }
            return !1;
          }),
          has.add("esri-image-decode", () => {
            if ("decode" in new Image()) {
              const e = new Image();
              return (
                (e.src =
                  'data:image/svg+xml;charset=UTF-8,<svg version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'),
                void e
                  .decode()
                  .then(() => {
                    has.add("esri-image-decode", !0, !0, !0);
                  })
                  .catch(() => {
                    has.add("esri-image-decode", !1, !0, !0);
                  })
              );
            }
            return !1;
          }),
          has.add("esri-url-encodes-apostrophe", () => {
            const e = window.document.createElement("a");
            return (e.href = "?'"), e.href.includes("?%27");
          })));
  })();

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
function r$3(n) {
  return "Int8Array" === n?.constructor?.name;
}
function t$1(n) {
  return "Uint8Array" === n?.constructor?.name;
}
function u$1(n) {
  return "Uint8ClampedArray" === n?.constructor?.name;
}
function o$3(n) {
  return "Int16Array" === n?.constructor?.name;
}
function c$3(n) {
  return "Uint16Array" === n?.constructor?.name;
}
function e$3(n) {
  return "Int32Array" === n?.constructor?.name;
}
function a$3(n) {
  return "Uint32Array" === n?.constructor?.name;
}
function i$2(n) {
  return "Float32Array" === n?.constructor?.name;
}
function f$1(n) {
  return "Float64Array" === n?.constructor?.name;
}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
function a$2(t) {
  if (!t || "object" != typeof t || "function" == typeof t) return t;
  const n = O(t);
  if (null != n) return n;
  if (y$1(t)) return t.clone();
  if (m$1(t)) return t.map(a$2);
  if (b$1(t)) return t.clone();
  const e = {};
  for (const r of Object.getOwnPropertyNames(t)) e[r] = a$2(t[r]);
  return e;
}
function y$1(t) {
  return "function" == typeof t.clone;
}
function m$1(t) {
  return "function" == typeof t.map && "function" == typeof t.forEach;
}
function b$1(t) {
  return "function" == typeof t.notifyChange && "function" == typeof t.watch;
}
function O(t) {
  if (r$3(t) || t$1(t) || u$1(t) || o$3(t) || c$3(t) || e$3(t) || a$3(t) || i$2(t) || f$1(t)) return t.slice();
  if (t instanceof Date) return new Date(t.getTime());
  if (t instanceof ArrayBuffer) {
    return t.slice(0, t.byteLength);
  }
  if (t instanceof Map) {
    const n = new Map();
    for (const [e, r] of t) n.set(e, a$2(r));
    return n;
  }
  if (t instanceof Set) {
    const n = new Set();
    for (const e of t) n.add(a$2(e));
    return n;
  }
  return null;
}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
function n$1(r, n, t = !1) {
  return i$1(r, n, t);
}
function o$2(r, n, t) {
  const o = r.split("."),
    i = o.pop(),
    u = e$2(o, !0, t);
  u && i && (u[i] = n);
}
function e$2(r, n, t) {
  let o = t;
  for (const e of r) {
    if (null == o) return;
    if (!(e in o)) {
      if (!n) return;
      o[e] = {};
    }
    o = o[e];
  }
  return o;
}
function i$1(n, t, o) {
  return t
    ? Object.keys(t).reduce((n, e) => {
        let u = n[e],
          c = t[e];
        return u === c
          ? n
          : void 0 === u
          ? ((n[e] = a$2(c)), n)
          : (Array.isArray(c) || Array.isArray(n)
              ? ((u = u ? (Array.isArray(u) ? (n[e] = u.concat()) : (n[e] = [u])) : (n[e] = [])),
                c &&
                  (Array.isArray(c) || (c = [c]),
                  o
                    ? c.forEach((r) => {
                        u.includes(r) || u.push(r);
                      })
                    : (n[e] = c.concat())))
              : c && "object" == typeof c
              ? (n[e] = i$1(u, c, o))
              : (n.hasOwnProperty(e) && !t.hasOwnProperty(e)) || (n[e] = c),
            n);
      }, n || {})
    : n;
}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
const c$2 = "20230526";

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
const r$2 = {
  analysisTheme: { accentColor: [255, 127, 0], textColor: "white" },
  apiKey: void 0,
  applicationName: "",
  applicationUrl: globalThis.location?.href,
  assetsPath: "",
  fontsUrl: "https://static.arcgis.com/fonts",
  geometryServiceUrl: "https://utility.arcgisonline.com/arcgis/rest/services/Geometry/GeometryServer",
  geoRSSServiceUrl: "https://utility.arcgis.com/sharing/rss",
  kmlServiceUrl: "https://utility.arcgis.com/sharing/kml",
  userPrivilegesApplied: !1,
  portalUrl: "https://www.arcgis.com",
  routeServiceUrl: "https://route-api.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World",
  workers: { loaderConfig: { has: {}, paths: {}, map: {}, packages: [] } },
  request: {
    crossOriginNoCorsDomains: null,
    httpsDomains: [
      "arcgis.com",
      "arcgisonline.com",
      "esrikr.com",
      "premiumservices.blackbridge.com",
      "esripremium.accuweather.com",
      "gbm.digitalglobe.com",
      "firstlook.digitalglobe.com",
      "msi.digitalglobe.com"
    ],
    interceptors: [],
    maxUrlLength: 2e3,
    priority: "high",
    proxyRules: [],
    proxyUrl: null,
    timeout: 6e4,
    trustedServers: [],
    useIdentity: !0
  },
  log: { interceptors: [], level: null }
};
if ((globalThis.esriConfig && (n$1(r$2, globalThis.esriConfig, !0), delete r$2.has), !r$2.assetsPath)) {
  {
    const e = "4.27.0";
    r$2.assetsPath = `https://cdn.jsdelivr.net/npm/@arcgis/core@${e}-next.${c$2}/assets`;
  }
  r$2.defaultAssetsPath = r$2.assetsPath;
}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
function c$1(t) {
  let e = 0;
  for (let n = 0; n < t.length; n++) (e = (e << 5) - e + t.charCodeAt(n)), (e |= 0);
  return e;
}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
const r$1 = { info: 0, warn: 1, error: 2, none: 3 };
class s$3 {
  constructor(e) {
    (this.level = null),
      (this._module = ""),
      (this._parent = null),
      (this.writer = null),
      (this._loggedMessages = { error: new Map(), warn: new Map(), info: new Map() }),
      null != e.level && (this.level = e.level),
      null != e.writer && (this.writer = e.writer),
      (this._module = e.module),
      s$3._loggers.set(this.module, this);
    const t = this.module.lastIndexOf(".");
    -1 !== t && (this._parent = s$3.getLogger(this.module.slice(0, t)));
  }
  get module() {
    return this._module;
  }
  get parent() {
    return this._parent;
  }
  error(...e) {
    this._log("error", "always", ...e);
  }
  warn(...e) {
    this._log("warn", "always", ...e);
  }
  info(...e) {
    this._log("info", "always", ...e);
  }
  errorOnce(...e) {
    this._log("error", "once", ...e);
  }
  warnOnce(...e) {
    this._log("warn", "once", ...e);
  }
  infoOnce(...e) {
    this._log("info", "once", ...e);
  }
  errorOncePerTick(...e) {
    this._log("error", "oncePerTick", ...e);
  }
  warnOncePerTick(...e) {
    this._log("warn", "oncePerTick", ...e);
  }
  infoOncePerTick(...e) {
    this._log("info", "oncePerTick", ...e);
  }
  get test() {
    const e = this;
    return { loggedMessages: e._loggedMessages, clearLoggedWarnings: () => e._loggedMessages.warn.clear() };
  }
  static get test() {
    return {
      resetLoggers(e = new Map()) {
        const t = s$3._loggers;
        return (s$3._loggers = e), t;
      },
      set throttlingDisabled(e) {
        s$3._throttlingDisabled = e;
      }
    };
  }
  static getLogger(e) {
    return (e = "string" != typeof e ? e.declaredClass : e), s$3._loggers.get(e) || new s$3({ module: e });
  }
  _log(t, r, ...n) {
    if (!this._matchLevel(t)) return;
    if ("always" !== r && !s$3._throttlingDisabled) {
      const e = this._argsToKey(n),
        o = this._loggedMessages[t].get(e);
      if (("once" === r && null != o) || ("oncePerTick" === r && o && o >= s$3._tickCounter)) return;
      this._loggedMessages[t].set(e, s$3._tickCounter), s$3._scheduleTickCounterIncrement();
    }
    for (const s of r$2.log.interceptors) if (s(t, this.module, ...n)) return;
    this._inheritedWriter()(t, this.module, ...n);
  }
  _parentWithMember(e, t) {
    let r = this;
    for (; null != r; ) {
      const t = r[e];
      if (null != t) return t;
      r = r.parent;
    }
    return t;
  }
  _inheritedWriter() {
    return this._parentWithMember("writer", this._consoleWriter);
  }
  _consoleWriter(e, t, ...r) {
    console[e](`[${t}]`, ...r);
  }
  _matchLevel(t) {
    const s = r$2.log.level || "warn";
    return r$1[this._parentWithMember("level", s)] <= r$1[t];
  }
  _argsToKey(...e) {
    const r = (e, t) => ("object" != typeof t || Array.isArray(t) ? t : "[Object]");
    return c$1(JSON.stringify(e, r));
  }
  static _scheduleTickCounterIncrement() {
    s$3._tickCounterScheduled ||
      ((s$3._tickCounterScheduled = !0),
      Promise.resolve().then(() => {
        s$3._tickCounter++, (s$3._tickCounterScheduled = !1);
      }));
  }
}
(s$3._loggers = new Map()), (s$3._tickCounter = 0), (s$3._tickCounterScheduled = !1), (s$3._throttlingDisabled = !1);

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
s$3.getLogger("esri.core.accessorSupport.ensureTypes");
function s$2(e) {
  return null == e ? e : Math.round(parseFloat(e));
}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
function a$1(t) {
  return i$3(s$2(t), 0, 255);
}
function e$1(t, r, s) {
  return (t = Number(t)), isNaN(t) ? s : t < r ? r : t > s ? s : t;
}
class o$1 {
  static blendColors(t, r, s, i = new o$1()) {
    return (
      (i.r = Math.round(t.r + (r.r - t.r) * s)),
      (i.g = Math.round(t.g + (r.g - t.g) * s)),
      (i.b = Math.round(t.b + (r.b - t.b) * s)),
      (i.a = t.a + (r.a - t.a) * s),
      i._sanitize()
    );
  }
  static fromRgb(r, s) {
    const i = r.toLowerCase().match(/^(rgba?|hsla?)\(([\s\.\-,%0-9]+)\)/);
    if (i) {
      const r = i[2].split(/\s*,\s*/),
        n = i[1];
      if (("rgb" === n && 3 === r.length) || ("rgba" === n && 4 === r.length)) {
        const t = r[0];
        if ("%" === t.charAt(t.length - 1)) {
          const t = r.map((t) => 2.56 * parseFloat(t));
          return 4 === r.length && (t[3] = parseFloat(r[3])), o$1.fromArray(t, s);
        }
        return o$1.fromArray(
          r.map((t) => parseFloat(t)),
          s
        );
      }
      if (("hsl" === n && 3 === r.length) || ("hsla" === n && 4 === r.length))
        return o$1.fromArray(
          o$8(parseFloat(r[0]), parseFloat(r[1]) / 100, parseFloat(r[2]) / 100, parseFloat(r[3])),
          s
        );
    }
    return null;
  }
  static fromHex(t, r = new o$1()) {
    if ((4 !== t.length && 7 !== t.length) || "#" !== t[0]) return null;
    const s = 4 === t.length ? 4 : 8,
      i = (1 << s) - 1;
    let n = Number("0x" + t.substr(1));
    return isNaN(n)
      ? null
      : (["b", "g", "r"].forEach((t) => {
          const a = n & i;
          (n >>= s), (r[t] = 4 === s ? 17 * a : a);
        }),
        (r.a = 1),
        r);
  }
  static fromArray(t, r = new o$1()) {
    return r._set(Number(t[0]), Number(t[1]), Number(t[2]), Number(t[3])), isNaN(r.a) && (r.a = 1), r._sanitize();
  }
  static fromString(t, i) {
    const n = r$8(t) ? l$4(t) : null;
    return (n && o$1.fromArray(n, i)) || o$1.fromRgb(t, i) || o$1.fromHex(t, i);
  }
  static fromJSON(t) {
    return t && new o$1([t[0], t[1], t[2], t[3] / 255]);
  }
  static toUnitRGB(t) {
    return null != t ? [t.r / 255, t.g / 255, t.b / 255] : null;
  }
  static toUnitRGBA(t) {
    return null != t ? [t.r / 255, t.g / 255, t.b / 255, null != t.a ? t.a : 1] : null;
  }
  constructor(t) {
    (this.r = 255), (this.g = 255), (this.b = 255), (this.a = 1), t && this.setColor(t);
  }
  get isBright() {
    return 0.299 * this.r + 0.587 * this.g + 0.114 * this.b >= 127;
  }
  setColor(t) {
    return (
      "string" == typeof t
        ? o$1.fromString(t, this)
        : Array.isArray(t)
        ? o$1.fromArray(t, this)
        : (this._set(t.r ?? 0, t.g ?? 0, t.b ?? 0, t.a ?? 1), t instanceof o$1 || this._sanitize()),
      this
    );
  }
  toRgb() {
    return [this.r, this.g, this.b];
  }
  toRgba() {
    return [this.r, this.g, this.b, this.a];
  }
  toHex() {
    const t = this.r.toString(16),
      r = this.g.toString(16),
      s = this.b.toString(16);
    return `#${t.length < 2 ? "0" + t : t}${r.length < 2 ? "0" + r : r}${s.length < 2 ? "0" + s : s}`;
  }
  toCss(t = !1) {
    const r = this.r + ", " + this.g + ", " + this.b;
    return t ? `rgba(${r}, ${this.a})` : `rgb(${r})`;
  }
  toString() {
    return this.toCss(!0);
  }
  toJSON() {
    return this.toArray();
  }
  toArray(t = o$1.AlphaMode.ALWAYS) {
    const r = a$1(this.r),
      s = a$1(this.g),
      i = a$1(this.b);
    return t === o$1.AlphaMode.ALWAYS || 1 !== this.a ? [r, s, i, a$1(255 * this.a)] : [r, s, i];
  }
  clone() {
    return new o$1(this.toRgba());
  }
  hash() {
    return (this.r << 24) | (this.g << 16) | (this.b << 8) | (255 * this.a);
  }
  equals(t) {
    return null != t && t.r === this.r && t.g === this.g && t.b === this.b && t.a === this.a;
  }
  _sanitize() {
    return (
      (this.r = Math.round(e$1(this.r, 0, 255))),
      (this.g = Math.round(e$1(this.g, 0, 255))),
      (this.b = Math.round(e$1(this.b, 0, 255))),
      (this.a = e$1(this.a, 0, 1)),
      this
    );
  }
  _set(t, r, s, i) {
    (this.r = t), (this.g = r), (this.b = s), (this.a = i);
  }
}
(o$1.prototype.declaredClass = "esri.Color"),
  (function (t) {
    var r;
    ((r = t.AlphaMode || (t.AlphaMode = {}))[(r.ALWAYS = 0)] = "ALWAYS"), (r[(r.UNLESS_OPAQUE = 1)] = "UNLESS_OPAQUE");
  })(o$1 || (o$1 = {}));
const h$1 = o$1;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
function n(n) {
  return "r" in n && "g" in n && "b" in n;
}
function t(n) {
  return "h" in n && "s" in n && "v" in n;
}
function r(n) {
  return "l" in n && "a" in n && "b" in n;
}
function u(n) {
  return "l" in n && "c" in n && "h" in n;
}
function o(n) {
  return "x" in n && "y" in n && "z" in n;
}
const e = [
    [0.4124, 0.3576, 0.1805],
    [0.2126, 0.7152, 0.0722],
    [0.0193, 0.1192, 0.9505]
  ],
  c = [
    [3.2406, -1.5372, -0.4986],
    [-0.9689, 1.8758, 0.0415],
    [0.0557, -0.204, 1.057]
  ];
function a(n, t) {
  const r = [];
  let u, o;
  if (n[0].length !== t.length) throw new Error("dimensions do not match");
  const e = n.length,
    c = n[0].length;
  let a = 0;
  for (u = 0; u < e; u++) {
    for (a = 0, o = 0; o < c; o++) a += n[u][o] * t[o];
    r.push(a);
  }
  return r;
}
function i(n) {
  const t = [n.r / 255, n.g / 255, n.b / 255].map((n) => (n <= 0.04045 ? n / 12.92 : ((n + 0.055) / 1.055) ** 2.4)),
    r = a(e, t);
  return { x: 100 * r[0], y: 100 * r[1], z: 100 * r[2] };
}
function h(n) {
  const t = a(c, [n.x / 100, n.y / 100, n.z / 100]).map((n) => {
    const t = n <= 0.0031308 ? 12.92 * n : 1.055 * n ** (1 / 2.4) - 0.055;
    return Math.min(1, Math.max(t, 0));
  });
  return { r: Math.round(255 * t[0]), g: Math.round(255 * t[1]), b: Math.round(255 * t[2]) };
}
function s$1(n) {
  const t = [n.x / 95.047, n.y / 100, n.z / 108.883].map((n) =>
    n > (6 / 29) ** 3 ? n ** (1 / 3) : (1 / 3) * (29 / 6) ** 2 * n + 4 / 29
  );
  return { l: 116 * t[1] - 16, a: 500 * (t[0] - t[1]), b: 200 * (t[1] - t[2]) };
}
function f(n) {
  const t = n.l,
    r = [(t + 16) / 116 + n.a / 500, (t + 16) / 116, (t + 16) / 116 - n.b / 200].map((n) =>
      n > 6 / 29 ? n ** 3 : 3 * (6 / 29) ** 2 * (n - 4 / 29)
    );
  return { x: 95.047 * r[0], y: 100 * r[1], z: 108.883 * r[2] };
}
function b(n) {
  const t = n.l,
    r = n.a,
    u = n.b,
    o = Math.sqrt(r * r + u * u);
  let e = Math.atan2(u, r);
  return (e = e > 0 ? e : e + 2 * Math.PI), { l: t, c: o, h: e };
}
function l(n) {
  const t = n.l,
    r = n.c,
    u = n.h;
  return { l: t, a: r * Math.cos(u), b: r * Math.sin(u) };
}
function g(n) {
  return s$1(i(n));
}
function M(n) {
  return h(f(n));
}
function m(n) {
  return b(s$1(i(n)));
}
function d(n) {
  return h(f(l(n)));
}
function x(n) {
  const t = n.r,
    r = n.g,
    u = n.b,
    o = Math.max(t, r, u),
    e = o - Math.min(t, r, u);
  let c = o,
    a = 0 === e ? 0 : o === t ? ((r - u) / e) % 6 : o === r ? (u - t) / e + 2 : (t - r) / e + 4,
    i = 0 === e ? 0 : e / c;
  return a < 0 && (a += 6), (a *= 60), (i *= 100), (c *= 100 / 255), { h: a, s: i, v: c };
}
function k(n) {
  const t = ((n.h + 360) % 360) / 60,
    r = n.s / 100,
    u = (n.v / 100) * 255,
    o = u * r,
    e = o * (1 - Math.abs((t % 2) - 1));
  let c;
  switch (Math.floor(t)) {
    case 0:
      c = { r: o, g: e, b: 0 };
      break;
    case 1:
      c = { r: e, g: o, b: 0 };
      break;
    case 2:
      c = { r: 0, g: o, b: e };
      break;
    case 3:
      c = { r: 0, g: e, b: o };
      break;
    case 4:
      c = { r: e, g: 0, b: o };
      break;
    case 5:
    case 6:
      c = { r: o, g: 0, b: e };
      break;
    default:
      c = { r: 0, g: 0, b: 0 };
  }
  return (c.r = Math.round(c.r + u - o)), (c.g = Math.round(c.g + u - o)), (c.b = Math.round(c.b + u - o)), c;
}
function p(e) {
  return n(e) ? e : u(e) ? d(e) : r(e) ? M(e) : o(e) ? h(e) : t(e) ? k(e) : e;
}
function y(n) {
  if (t(n)) return n;
  return x(p(n));
}
function z(n) {
  return r(n) ? n : g(p(n));
}
function v(n) {
  return u(n) ? n : m(p(n));
}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.27/esri/copyright.txt for details.
*/
class s {
  constructor(s, o = { ignoreUnknown: !1, useNumericKeys: !1 }) {
    (this._jsonToAPI = s),
      (this._options = o),
      (this.apiValues = []),
      (this.jsonValues = []),
      (this._apiToJSON = this._invertMap(s)),
      (this.apiValues = this._getKeysSorted(this._apiToJSON)),
      (this.jsonValues = this._getKeysSorted(this._jsonToAPI)),
      (this.read = (t) => this.fromJSON(t)),
      (this.write = (s, o, i) => {
        const n = this.toJSON(s);
        void 0 !== n && o$2(i, n, o);
      }),
      (this.write.isJSONMapWriter = !0);
  }
  toJSON(t) {
    if (null == t) return null;
    if (this._apiToJSON.hasOwnProperty(t)) {
      const s = this._apiToJSON[t];
      return this._options.useNumericKeys ? +s : s;
    }
    return this._options.ignoreUnknown ? void 0 : t;
  }
  fromJSON(t) {
    return null != t && this._jsonToAPI.hasOwnProperty(t)
      ? this._jsonToAPI[t]
      : this._options.ignoreUnknown
      ? void 0
      : t;
  }
  _invertMap(t) {
    const s = {};
    for (const o in t) s[t[o]] = o;
    return s;
  }
  _getKeysSorted(t) {
    const s = [];
    for (const o in t) s.push(o);
    return s.sort(), s;
  }
}

// esri
const PREDEFINED_JSON_COLOR_RAMPS = [
  {
    id: "aspect",
    type: "multipart",
    colorRamps: [
      { fromColor: [190, 190, 190], toColor: [255, 45, 8] },
      { fromColor: [255, 45, 8], toColor: [255, 181, 61] },
      { fromColor: [255, 181, 61], toColor: [255, 254, 52] },
      { fromColor: [255, 254, 52], toColor: [0, 251, 50] },
      { fromColor: [0, 251, 50], toColor: [255, 254, 52] },
      { fromColor: [0, 253, 255], toColor: [0, 181, 255] },
      { fromColor: [0, 181, 255], toColor: [26, 35, 253] },
      { fromColor: [26, 35, 253], toColor: [255, 57, 251] },
      { fromColor: [255, 57, 251], toColor: [255, 45, 8] }
    ]
  },
  { id: "black-to-white", fromColor: [0, 0, 0], toColor: [255, 255, 255] },
  { id: "blue-bright", fromColor: [204, 204, 255], toColor: [0, 0, 224] },
  { id: "blue-light-to-dark", fromColor: [211, 229, 232], toColor: [46, 100, 140] },
  { id: "blue-green-bright", fromColor: [203, 245, 234], toColor: [48, 207, 146] },
  { id: "blue-green-light-to-dark", fromColor: [216, 242, 237], toColor: [21, 79, 74] },
  { id: "brown-light-to-dark", fromColor: [240, 236, 170], toColor: [102, 72, 48] },
  {
    id: "brown-to-blue-green-diverging-right",
    type: "multipart",
    colorRamps: [
      { fromColor: [156, 85, 31], toColor: [255, 255, 191] },
      { fromColor: [255, 255, 191], toColor: [33, 130, 145] }
    ]
  },
  {
    id: "brown-to-blue-green-diverging-dark",
    type: "multipart",
    colorRamps: [
      { fromColor: [110, 70, 45], toColor: [204, 204, 102] },
      { fromColor: [204, 204, 102], toColor: [48, 100, 102] }
    ]
  },
  { id: "coefficient-bias", fromColor: [214, 214, 255], toColor: [0, 57, 148] },
  {
    id: "cold-to-hot-diverging",
    type: "multipart",
    colorRamps: [
      { fromColor: [69, 117, 181], toColor: [255, 255, 191] },
      { fromColor: [255, 255, 191], toColor: [214, 47, 39] }
    ]
  },
  {
    id: "condition-number",
    type: "multipart",
    colorRamps: [
      { fromColor: [0, 97, 0], toColor: [255, 255, 0] },
      { fromColor: [255, 255, 0], toColor: [255, 34, 0] }
    ]
  },
  {
    id: "cyan-to-purple",
    type: "multipart",
    colorRamps: [
      { fromColor: [0, 245, 245], toColor: [0, 0, 245] },
      { fromColor: [0, 0, 245], toColor: [245, 0, 245] }
    ]
  },
  {
    id: "cyan-light-to-blue-dark",
    type: "multipart",
    colorRamps: [
      { fromColor: [182, 237, 240], toColor: [31, 131, 224] },
      { fromColor: [31, 131, 224], toColor: [9, 9, 145] }
    ]
  },
  { id: "distance", fromColor: [255, 200, 0], toColor: [0, 0, 255] },
  {
    id: "elevation1",
    type: "multipart",
    colorRamps: [
      { fromColor: [175, 240, 233], toColor: [255, 255, 179] },
      { fromColor: [255, 255, 179], toColor: [0, 128, 64] },
      { fromColor: [0, 128, 64], toColor: [252, 186, 3] },
      { fromColor: [252, 186, 3], toColor: [128, 0, 0] },
      { fromColor: [120, 0, 0], toColor: [105, 48, 13] },
      { fromColor: [105, 48, 13], toColor: [171, 171, 171] },
      { fromColor: [171, 171, 171], toColor: [255, 252, 255] }
    ]
  },
  {
    id: "elevation2",
    type: "multipart",
    colorRamps: [
      { fromColor: [118, 219, 211], toColor: [255, 255, 199] },
      { fromColor: [255, 255, 199], toColor: [255, 255, 128] },
      { fromColor: [255, 255, 128], toColor: [217, 194, 121] },
      { fromColor: [217, 194, 121], toColor: [135, 96, 38] },
      { fromColor: [135, 96, 38], toColor: [150, 150, 181] },
      { fromColor: [150, 150, 181], toColor: [181, 150, 181] },
      { fromColor: [181, 150, 181], toColor: [255, 252, 255] }
    ]
  },
  { id: "errors", fromColor: [255, 235, 214], toColor: [196, 10, 10] },
  { id: "gray-light-to-dark", fromColor: [219, 219, 219], toColor: [69, 69, 69] },
  { id: "green-bright", fromColor: [204, 255, 204], toColor: [14, 204, 14] },
  { id: "green-light-to-dark", fromColor: [220, 245, 233], toColor: [34, 102, 51] },
  {
    id: "green-to-blue",
    type: "multipart",
    colorRamps: [
      { fromColor: [32, 204, 16], toColor: [0, 242, 242] },
      { fromColor: [0, 242, 242], toColor: [2, 33, 227] }
    ]
  },
  { id: "orange-bright", fromColor: [255, 235, 204], toColor: [240, 118, 5] },
  { id: "orange-light-to-dark", fromColor: [250, 233, 212], toColor: [171, 65, 36] },
  {
    id: "partial-spectrum",
    type: "multipart",
    colorRamps: [
      { fromColor: [242, 241, 162], toColor: [255, 255, 0] },
      { fromColor: [255, 255, 0], toColor: [255, 0, 0] },
      { fromColor: [252, 3, 69], toColor: [176, 7, 237] },
      { fromColor: [176, 7, 237], toColor: [2, 29, 173] }
    ]
  },
  {
    id: "partial-spectrum-1-diverging",
    type: "multipart",
    colorRamps: [
      { fromColor: [135, 38, 38], toColor: [240, 149, 12] },
      { fromColor: [240, 149, 12], toColor: [255, 255, 191] },
      { fromColor: [255, 255, 191], toColor: [74, 80, 181] },
      { fromColor: [74, 80, 181], toColor: [39, 32, 122] }
    ]
  },
  {
    id: "partial-spectrum-2-diverging",
    type: "multipart",
    colorRamps: [
      { fromColor: [115, 77, 42], toColor: [201, 137, 52] },
      { fromColor: [201, 137, 52], toColor: [255, 255, 191] },
      { fromColor: [255, 255, 191], toColor: [91, 63, 176] },
      { fromColor: [91, 63, 176], toColor: [81, 13, 97] }
    ]
  },
  {
    id: "pink-to-yellow-green-diverging-bright",
    type: "multipart",
    colorRamps: [
      { fromColor: [158, 30, 113], toColor: [255, 255, 191] },
      { fromColor: [255, 255, 191], toColor: [99, 110, 45] }
    ]
  },
  {
    id: "pink-to-yellow-green-diverging-dark",
    type: "multipart",
    colorRamps: [
      { fromColor: [97, 47, 73], toColor: [204, 204, 102] },
      { fromColor: [204, 204, 102], toColor: [22, 59, 15] }
    ]
  },
  {
    id: "precipitation",
    type: "multipart",
    colorRamps: [
      { fromColor: [194, 82, 60], toColor: [237, 161, 19] },
      { fromColor: [237, 161, 19], toColor: [255, 255, 0] },
      { fromColor: [255, 255, 0], toColor: [0, 219, 0] },
      { fromColor: [0, 219, 0], toColor: [32, 153, 143] },
      { fromColor: [32, 153, 143], toColor: [11, 44, 122] }
    ]
  },
  {
    id: "prediction",
    type: "multipart",
    colorRamps: [
      { fromColor: [40, 146, 199], toColor: [250, 250, 100] },
      { fromColor: [250, 250, 100], toColor: [232, 16, 20] }
    ]
  },
  { id: "purple-bright", fromColor: [255, 204, 255], toColor: [199, 0, 199] },
  {
    id: "purple-to-green-diverging-bright",
    type: "multipart",
    colorRamps: [
      { fromColor: [77, 32, 150], toColor: [255, 255, 191] },
      { fromColor: [255, 255, 191], toColor: [20, 122, 11] }
    ]
  },
  {
    id: "purple-to-green-diverging-dark",
    type: "multipart",
    colorRamps: [
      { fromColor: [67, 14, 89], toColor: [204, 204, 102] },
      { fromColor: [204, 204, 102], toColor: [24, 79, 15] }
    ]
  },
  { id: "purple-blue-bright", fromColor: [223, 184, 230], toColor: [112, 12, 242] },
  { id: "purple-blue-light-to-dark", fromColor: [229, 213, 242], toColor: [93, 44, 112] },
  { id: "purple-red-bright", fromColor: [255, 204, 225], toColor: [199, 0, 99] },
  { id: "purple-red-light-to-dark", fromColor: [250, 215, 246], toColor: [143, 17, 57] },
  { id: "red-bright", fromColor: [255, 204, 204], toColor: [219, 0, 0] },
  { id: "red-light-to-dark", fromColor: [255, 224, 224], toColor: [143, 10, 10] },
  {
    id: "red-to-blue-diverging-bright",
    type: "multipart",
    colorRamps: [
      { fromColor: [196, 69, 57], toColor: [255, 255, 191] },
      { fromColor: [255, 255, 191], toColor: [48, 95, 207] }
    ]
  },
  {
    id: "red-to-blue-diverging-dark",
    type: "multipart",
    colorRamps: [
      { fromColor: [107, 13, 13], toColor: [204, 204, 102] },
      { fromColor: [204, 204, 102], toColor: [13, 53, 97] }
    ]
  },
  {
    id: "red-to-green",
    type: "multipart",
    colorRamps: [
      { fromColor: [245, 0, 0], toColor: [245, 245, 0] },
      { fromColor: [245, 245, 0], toColor: [0, 245, 0] }
    ]
  },
  {
    id: "red-to-green-diverging-bright",
    type: "multipart",
    colorRamps: [
      { fromColor: [186, 20, 20], toColor: [255, 255, 191] },
      { fromColor: [255, 255, 191], toColor: [54, 145, 33] }
    ]
  },
  {
    id: "red-to-green-diverging-dark",
    type: "multipart",
    colorRamps: [
      { fromColor: [97, 21, 13], toColor: [204, 204, 102] },
      { fromColor: [204, 204, 102], toColor: [16, 69, 16] }
    ]
  },
  {
    id: "slope",
    type: "multipart",
    colorRamps: [
      { fromColor: [56, 168, 0], toColor: [255, 255, 0] },
      { fromColor: [255, 255, 0], toColor: [255, 0, 0] }
    ]
  },
  {
    id: "spectrum-full-bright",
    type: "multipart",
    colorRamps: [
      { fromColor: [255, 0, 0], toColor: [255, 255, 0] },
      { fromColor: [255, 255, 0], toColor: [0, 255, 255] },
      { fromColor: [0, 255, 255], toColor: [0, 0, 255] }
    ]
  },
  {
    id: "spectrum-full-dark",
    type: "multipart",
    colorRamps: [
      { fromColor: [153, 0, 0], toColor: [153, 153, 0] },
      { fromColor: [153, 153, 0], toColor: [0, 153, 153] },
      { fromColor: [0, 153, 153], toColor: [0, 0, 153] }
    ]
  },
  {
    id: "spectrum-full-light",
    type: "multipart",
    colorRamps: [
      { fromColor: [255, 153, 153], toColor: [255, 255, 153] },
      { fromColor: [255, 255, 153], toColor: [153, 255, 255] },
      { fromColor: [153, 255, 255], toColor: [153, 153, 255] }
    ]
  },
  {
    id: "surface",
    type: "multipart",
    colorRamps: [
      { fromColor: [112, 153, 89], toColor: [242, 238, 162] },
      { fromColor: [242, 238, 162], toColor: [242, 206, 133] },
      { fromColor: [242, 206, 133], toColor: [194, 140, 124] },
      { fromColor: [194, 140, 124], toColor: [255, 242, 255] }
    ]
  },
  {
    id: "temperature",
    type: "multipart",
    colorRamps: [
      { fromColor: [255, 252, 255], toColor: [255, 0, 255] },
      { fromColor: [255, 0, 255], toColor: [0, 0, 255] },
      { fromColor: [0, 0, 255], toColor: [0, 255, 255] },
      { fromColor: [0, 255, 255], toColor: [0, 255, 0] },
      { fromColor: [0, 255, 0], toColor: [255, 255, 0] },
      { fromColor: [255, 255, 0], toColor: [255, 128, 0] },
      { fromColor: [255, 128, 0], toColor: [128, 0, 0] }
    ]
  },
  { id: "white-to-black", fromColor: [255, 255, 255], toColor: [0, 0, 0] },
  {
    id: "yellow-to-dark-red",
    type: "multipart",
    colorRamps: [
      { fromColor: [255, 255, 128], toColor: [242, 167, 46] },
      { fromColor: [242, 167, 46], toColor: [107, 0, 0] }
    ]
  },
  {
    id: "yellow-to-green-to-dark-blue",
    type: "multipart",
    colorRamps: [
      { fromColor: [255, 255, 128], toColor: [56, 224, 9] },
      { fromColor: [56, 224, 9], toColor: [26, 147, 171] },
      { fromColor: [26, 147, 171], toColor: [12, 16, 120] }
    ]
  },
  { id: "yellow-to-red", fromColor: [245, 245, 0], toColor: [255, 0, 0] },
  { id: "yellow-green-bright", fromColor: [236, 252, 204], toColor: [157, 204, 16] },
  { id: "yellow-green-light-to-dark", fromColor: [215, 240, 175], toColor: [96, 107, 45] }
];
const colorRampDict = new s({
  Aspect: "aspect",
  "Black to White": "black-to-white",
  "Blue Bright": "blue-bright",
  "Blue Light to Dark": "blue-light-to-dark",
  "Blue-Green Bright": "blue-green-bright",
  "Blue-Green Light to Dark": "blue-green-light-to-dark",
  "Brown Light to Dark": "brown-light-to-dark",
  "Brown to Blue Green Diverging, Bright": "brown-to-blue-green-diverging-right",
  "Brown to Blue Green Diverging, Dark": "brown-to-blue-green-diverging-dark",
  "Coefficient Bias": "coefficient-bias",
  "Cold to Hot Diverging": "cold-to-hot-diverging",
  "Condition Number": "condition-number",
  "Cyan to Purple": "cyan-to-purple",
  "Cyan-Light to Blue-Dark": "cyan-light-to-blue-dark",
  Distance: "distance",
  "Elevation #1": "elevation1",
  "Elevation #2": "elevation2",
  Errors: "errors",
  "Gray Light to Dark": "gray-light-to-dark",
  "Green Bright": "green-bright",
  "Green Light to Dark": "green-light-to-dark",
  "Green to Blue": "green-to-blue",
  "Orange Bright": "orange-bright",
  "Orange Light to Dark": "orange-light-to-dark",
  "Partial Spectrum": "partial-spectrum",
  "Partial Spectrum 1 Diverging": "partial-spectrum-1-diverging",
  "Partial Spectrum 2 Diverging": "partial-spectrum-2-diverging",
  "Pink to YellowGreen Diverging, Bright": "pink-to-yellow-green-diverging-bright",
  "Pink to YellowGreen Diverging, Dark": "pink-to-yellow-green-diverging-dark",
  Precipitation: "precipitation",
  Prediction: "prediction",
  "Purple Bright": "purple-bright",
  "Purple to Green Diverging, Bright": "purple-to-green-diverging-bright",
  "Purple to Green Diverging, Dark": "purple-to-green-diverging-dark",
  "Purple-Blue Bright": "purple-blue-bright",
  "Purple-Blue Light to Dark": "purple-blue-light-to-dark",
  "Purple-Red Bright": "purple-red-bright",
  "Purple-Red Light to Dark": "purple-red-light-to-dark",
  "Red Bright": "red-bright",
  "Red Light to Dark": "red-light-to-dark",
  "Red to Blue Diverging, Bright": "red-to-blue-diverging-bright",
  "Red to Blue Diverging, Dark": "red-to-blue-diverging-dark",
  "Red to Green": "red-to-green",
  "Red to Green Diverging, Bright": "red-to-green-diverging-bright",
  "Red to Green Diverging, Dark": "red-to-green-diverging-dark",
  Slope: "slope",
  "Spectrum-Full Bright": "spectrum-full-bright",
  "Spectrum-Full Dark": "spectrum-full-dark",
  "Spectrum-Full Light": "spectrum-full-light",
  Surface: "surface",
  Temperature: "temperature",
  "White to Black": "white-to-black",
  "Yellow to Dark Red": "yellow-to-dark-red",
  "Yellow to Green to Dark Blue": "yellow-to-green-to-dark-blue",
  "Yellow to Red": "yellow-to-red",
  "Yellow-Green Bright": "yellow-green-bright",
  "Yellow-Green Light to Dark": "yellow-green-light-to-dark"
});
//--------------------------------------------------------------------------
//
//  Private Methods
//
//--------------------------------------------------------------------------
function _colorsEqual(color1, color2) {
  if (!color1 || !color2 || color1.length !== color2.length) {
    return false;
  }
  for (let i = 0; i < color1.length; i++) {
    if (color1[i] > color2[i] + 2 || color1[i] < color2[i] - 2) {
      return false;
    }
  }
  return true;
}
function _invertAlgorithmicColorRamp(colorRamp) {
  const newColorRamp = colorRamp.clone();
  newColorRamp.fromColor = colorRamp.toColor;
  newColorRamp.toColor = colorRamp.fromColor;
  newColorRamp.algorithm = colorRamp.algorithm;
  return newColorRamp;
}
function _invertColorRamp(colorRamp) {
  if (colorRamp.type === "multipart") {
    const newColorRamp = colorRamp.clone();
    if (!newColorRamp.colorRamps?.length) {
      return newColorRamp;
    }
    newColorRamp.colorRamps = newColorRamp.colorRamps.reverse().map((ramp) => _invertAlgorithmicColorRamp(ramp));
    return newColorRamp;
  }
  return _invertAlgorithmicColorRamp(colorRamp);
}
function _getColorRampId(colorRamp, lookUpColorRamps) {
  if (!colorRamp) {
    return undefined;
  }
  const colorRamps = lookUpColorRamps ?? PREDEFINED_JSON_COLOR_RAMPS;
  let selectedColorRampId = null;
  // types are defined as algorithmic and multipart in colorRamp
  if (colorRamp.type === "algorithmic") {
    colorRamps.some((storeColorRamp) => {
      if (
        _colorsEqual(colorRamp.fromColor.toRgb(), storeColorRamp.fromColor) &&
        _colorsEqual(colorRamp.toColor.toRgb(), storeColorRamp.toColor)
      ) {
        selectedColorRampId = storeColorRamp.id;
        return true;
      }
      return undefined;
    });
  } else if (colorRamp.type === "multipart") {
    colorRamps.some((storeColorRamp) => {
      const colorRampParts = colorRamp.colorRamps;
      const storeColorRampParts = storeColorRamp.colorRamps;
      //lengths equal
      if (colorRampParts && storeColorRampParts && colorRampParts.length === storeColorRampParts.length) {
        if (
          !storeColorRampParts.some((storeColorRampPart, idx) => {
            if (
              !_colorsEqual(colorRampParts[idx].fromColor.toRgb(), new h$1(storeColorRampPart.fromColor).toRgb()) ||
              !_colorsEqual(colorRampParts[idx].toColor.toRgb(), new h$1(storeColorRampPart.toColor).toRgb())
            ) {
              return true;
            }
            return undefined;
          })
        ) {
          if (selectedColorRampId) {
            return true;
          }
          selectedColorRampId = storeColorRamp.id;
        }
      }
      return undefined;
    });
  }
  return selectedColorRampId;
}
//--------------------------------------------------------------------------
//
//  Public Methods
//
//--------------------------------------------------------------------------
function getColorRampId(colorRamp, lookUpColorRamps) {
  if (!colorRamp) {
    return undefined;
  }
  let selectedColorRampId = _getColorRampId(colorRamp, lookUpColorRamps);
  if (selectedColorRampId == null) {
    colorRamp = _invertColorRamp(colorRamp);
    selectedColorRampId = _getColorRampId(colorRamp, lookUpColorRamps);
  }
  return selectedColorRampId;
}
function getColorRampName(colorRampOrId) {
  const selectedColorRampId = typeof colorRampOrId === "string" ? colorRampOrId : getColorRampId(colorRampOrId);
  if (selectedColorRampId) {
    return colorRampDict.toJSON(selectedColorRampId);
  }
  return null;
}
function processColorrampOptions(options) {
  options = options || {};
  const numColors = options.numColors || 256;
  const distanceOffset = options.distanceOffset || 0;
  const isCustomInterval =
    options.isCustomInterval != null
      ? options.isCustomInterval
      : options.distanceInterval !== null && options.distanceInterval !== 1 / (numColors - 1);
  const distanceInterval = options.distanceInterval || 1 / (numColors - 1);
  return {
    ...options,
    numColors,
    distanceOffset,
    interpolateAlpha: !!options.interpolateAlpha,
    distanceInterval,
    isCustomInterval,
    weights: options.weights
  };
}
function createHsvAlgorithmicColorRamp(fromHSV, toHSV, options) {
  // ported from 3.x colorRampGenerator, which was based on AlgorithmicColorRamp in ArcObjects
  const { numColors, distanceOffset, distanceInterval: interval, isCustomInterval } = options;
  const fromGrey = fromHSV.s === 0;
  const toGrey = toHSV.s === 0;
  let fromHue = fromHSV.h;
  let toHue = toHSV.h;
  //favor the hue from somewhat saturated color
  if (fromGrey && !toGrey) {
    fromHue = toHue;
  } else if (toGrey && !fromGrey) {
    toHSV = { ...toHSV, h: fromHue };
    toHue = fromHue;
  }
  let hueDiff = Math.abs(toHue - fromHue);
  let hi;
  const MAX_HUE = 360;
  if (hueDiff < MAX_HUE / 2) {
    hi = (toHue - fromHue) * interval;
  } else {
    hueDiff = MAX_HUE - hueDiff;
    if (fromHue > toHue) {
      hi = hueDiff * interval;
    } else {
      hi = -hueDiff * interval;
    }
  }
  const si = (toHSV.s - fromHSV.s) * interval;
  const vi = (toHSV.v - fromHSV.v) * interval;
  let { s, v } = fromHSV;
  let h = fromHue;
  if (distanceOffset) {
    const offsetIntervalCount = distanceOffset / interval;
    h = (h + offsetIntervalCount * hi + MAX_HUE) % MAX_HUE;
    s += offsetIntervalCount * si;
    v += offsetIntervalCount * vi;
  }
  const colors = [];
  for (let i = 0; i < numColors - 1; i++) {
    colors.push({ h, s, v });
    h = (h + hi + MAX_HUE) % MAX_HUE;
    s += si;
    v += vi;
  }
  colors.push(isCustomInterval ? { h, s, v } : toHSV);
  return colors;
}
function createCIELabAlgorithmicColorRamp(fromLAB, toLAB, options) {
  // ported from 3.x colorRampGenerator, which was based on AlgorithmicColorRamp in ArcObjects
  const { numColors, distanceOffset, distanceInterval: interval, isCustomInterval } = options;
  let { l, a, b } = fromLAB;
  const li = (toLAB.l - l) * interval;
  const ai = (toLAB.a - a) * interval;
  const bi = (toLAB.b - b) * interval;
  const colors = [];
  if (distanceOffset) {
    const offsetIntervalCount = distanceOffset / interval;
    l += offsetIntervalCount * li;
    a += offsetIntervalCount * ai;
    b += offsetIntervalCount * bi;
  }
  for (let i = 0; i < numColors - 1; i++) {
    colors.push({ l, a, b });
    l += li;
    a += ai;
    b += bi;
  }
  colors.push(isCustomInterval ? { l, a, b } : toLAB);
  return colors;
}
function createLabLchAlgorithmicColorRamp(fromLCH, toLCH, options) {
  // ported from 3.x colorRampGenerator, which was based on AlgorithmicColorRamp in ArcObjects
  const { numColors, distanceOffset, distanceInterval: interval, isCustomInterval } = options;
  const fromAngle = fromLCH.h;
  const toAngle = toLCH.h;
  const MAX_H = 2 * Math.PI;
  // determine the increments for angle and carthesic distance
  // Take the shortest distance between fromAngle and toAngle (clockwise/counterclockwise)
  let angleD;
  if (fromAngle <= toAngle) {
    const dLeft = toAngle - fromAngle;
    const dRight = toAngle - fromAngle - MAX_H;
    angleD = Math.abs(dRight) < Math.abs(dLeft) ? dRight : dLeft;
  } else {
    const dLeft = toAngle + MAX_H - fromAngle;
    const dRight = toAngle - fromAngle;
    angleD = Math.abs(dRight) < Math.abs(dLeft) ? dRight : dLeft;
  }
  const angleI = angleD * interval;
  const li = (toLCH.l - fromLCH.l) * interval;
  const ci = (toLCH.c - fromLCH.c) * interval;
  let { l, c, h } = fromLCH;
  if (distanceOffset) {
    const offsetIntervalCount = distanceOffset / interval;
    l += offsetIntervalCount * li;
    c += offsetIntervalCount * ci;
    h = (h + offsetIntervalCount * angleI + MAX_H) % MAX_H;
  }
  const colors = [];
  for (let i = 0; i < numColors - 1; i++) {
    colors.push({ l, c, h });
    l += li;
    c += ci;
    h = (h + angleI + MAX_H) % MAX_H;
  }
  colors.push(isCustomInterval ? { l, c, h } : toLCH);
  return colors;
}
function createAlgorithmicColorRamp(algorithmicColorRamp, options) {
  // ported from 3.x colorRampGenerator, which was based on AlgorithmicColorRamp in ArcObjects
  // standardize from/to colors
  let { fromColor, toColor } = algorithmicColorRamp;
  fromColor = [...fromColor];
  toColor = [...toColor];
  if (fromColor.length === 3) {
    fromColor = fromColor.concat([255]);
  }
  if (toColor.length === 3) {
    toColor = toColor.concat([255]);
  }
  // process optional parameters
  const algorithm = algorithmicColorRamp.algorithm || "esriCIELabAlgorithm";
  const processedOptions = processColorrampOptions(options);
  const { numColors, distanceOffset, isCustomInterval, interpolateAlpha } = processedOptions;
  // simple case
  if (numColors === 1 && distanceOffset === 0) {
    return [fromColor];
  }
  if (numColors === 2 && distanceOffset === 0 && !isCustomInterval) {
    return [fromColor, toColor];
  }
  // ramp
  const fromColorRGB = { r: fromColor[0], g: fromColor[1], b: fromColor[2] };
  const toColorRGB = { r: toColor[0], g: toColor[1], b: toColor[2] };
  const colors =
    algorithm === "esriCIELabAlgorithm"
      ? createCIELabAlgorithmicColorRamp(z(fromColorRGB), z(toColorRGB), processedOptions)
      : algorithm === "esriHSVAlgorithm"
      ? createHsvAlgorithmicColorRamp(y(fromColorRGB), y(toColorRGB), processedOptions)
      : createLabLchAlgorithmicColorRamp(v(fromColorRGB), v(toColorRGB), processedOptions);
  // convert to rgba color
  const rgbaColors = [];
  const fromAlpha = fromColor[3] ?? 255;
  const toAlpha = toColor[3] ?? 255;
  const alphaI = (toAlpha - fromAlpha) / (numColors - 1);
  for (let i = 0; i < numColors; i++) {
    const { r, g, b } = p(colors[i]);
    const a = interpolateAlpha ? Math.round(fromAlpha + alphaI * i) : 255;
    rgbaColors.push([r, g, b, a]);
  }
  return rgbaColors;
}
function createMultiPartColorRamp(multiPartColorRamp, options) {
  const { numColors, interpolateAlpha } = processColorrampOptions(options);
  let weights = options?.weights;
  const { colorRamps } = multiPartColorRamp;
  if (weights) {
    const sum = weights.reduce((a, b) => a + b);
    weights = weights.map((weight) => weight / sum);
  } else {
    // TODO: weights can be calculated from start/stop when AlgorithmicColorramp is updated https://developers.arcgis.com/documentation/common-data-types/color-ramp-objects.htm
    weights = [];
    for (let i = 0; i < colorRamps.length; i++) {
      weights[i] = 1 / colorRamps.length;
    }
  }
  const rgbaColors = [];
  let count = 0,
    weightSum = 0;
  const distanceInterval = 1 / (numColors - 1);
  let aligned = false;
  for (let i = 0; i < colorRamps.length; i++) {
    let distanceOffset = aligned ? 0 : count * distanceInterval - weightSum;
    let segmentColorCount =
      i === colorRamps.length - 1 ? numColors - 1 - count : (weights[i] - distanceOffset) / distanceInterval;
    aligned = Math.ceil(segmentColorCount) === segmentColorCount;
    segmentColorCount = Math.ceil(segmentColorCount);
    if (segmentColorCount === 0) {
      continue;
    }
    distanceOffset /= weights[i];
    const colors = createAlgorithmicColorRamp(colorRamps[i], {
      numColors: segmentColorCount,
      interpolateAlpha,
      distanceOffset,
      distanceInterval: distanceInterval / weights[i]
    });
    count += colors.length;
    rgbaColors.push(...colors);
    weightSum += weights[i];
  }
  const toColor = [...colorRamps[colorRamps.length - 1].toColor];
  if (toColor.length === 3) {
    toColor.push(255);
  }
  rgbaColors.push(toColor);
  return rgbaColors;
}
/**
 * convert a ColorRamp object/json to a list of rgba colors. Default number of colors is 256.
 * @method convertColorRampToColors
 * @since 4.27
 * @instance
 * @todo doc
 * @ignore
 *
 * @param {module:esri/rest/support/AlgorithmicColorRamp | module:esri/rest/support/MultipartColorRamp} colorRamp - the input colorRamp
 * @param {object} [options] - Additional options that can be used to control the output
 * @param {number} [options.numColors=256] - Number of colors.
 * @param {number} [options.interpolateAlpha] - When true, alpha is interpolated.
 *
 * @return {number[]} A 4-component array of rgba colors.
 */
function convertColorRampToColors(colorRamp, options) {
  const colorRampJSON = "toJSON" in colorRamp ? colorRamp.toJSON() : colorRamp;
  const rgbaColors =
    colorRampJSON.type === "multipart"
      ? createMultiPartColorRamp(colorRampJSON, options)
      : createAlgorithmicColorRamp(colorRampJSON, options);
  return rgbaColors;
}
/**
 * convert a ColorRamp object/json to a raster colormap. Default number of colors is 256.
 * @method convertColorRampToColormap
 * @since 4.27
 * @instance
 * @todo doc
 * @ignore
 *
 * @param {module:esri/rest/support/AlgorithmicColorRamp | module:esri/rest/support/MultipartColorRamp} colorRamp - the input colorRamp
 * @param {object} [options] - Additional options that can be used to control the output
 * @param {number} [options.numColors=256] - Number of colors.
 * @param {number} [options.interpolateAlpha] - When true, alpha is interpolated.
 *
 * @return {number[]} Raster colormap represented in a 4-component or 5-component array: [value, r, g, b][] or [value, r, g, b, a][]
 */
function convertColorRampToColormap(colorRamp, options) {
  const rgbaColors = convertColorRampToColors(colorRamp, options);
  const interpolateAlpha = options?.interpolateAlpha;
  rgbaColors.forEach((value, index) => {
    value.unshift(index);
    // classical raster colormap skips alpha, especially when used on server side
    if (!interpolateAlpha) {
      value.pop();
    }
  });
  return rgbaColors;
}
function getHsvColor(color) {
  const colorHsv = y(color);
  return {
    type: "HsvColor",
    Hue: colorHsv.h,
    Saturation: colorHsv.s,
    Value: colorHsv.v,
    AlphaValue: 255
  };
}
function getRFxArgAlgorithmicColorRamp(colorRamp) {
  const jsonColorRamp = colorRamp.toJSON();
  return {
    Algorithm: jsonColorRamp?.Algorithm || "esriHSVAlgorithm",
    type: "AlgorithmicColorRamp",
    FromColor: getHsvColor(colorRamp.fromColor),
    ToColor: getHsvColor(colorRamp.toColor)
  };
}
function getRFxArgColorRampValue(colorRamp) {
  //convert colorRamp object to color ramp format readable as part of RFTs
  const name = getColorRampName(colorRamp);
  if (!name) {
    return null;
  }
  if (colorRamp.type === "algorithmic") {
    return { ...getRFxArgAlgorithmicColorRamp(colorRamp), Name: name };
  }
  if (colorRamp.colorRamps) {
    const arrayOfColorRamps = colorRamp.colorRamps.map(getRFxArgAlgorithmicColorRamp);
    return {
      type: "MultiPartColorRamp",
      NumColorRamps: arrayOfColorRamps.length,
      ArrayOfColorRamp: arrayOfColorRamps,
      Name: name
    };
  }
  return null;
}



//# sourceMappingURL=colorRampUtils-8bdd46c5.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,