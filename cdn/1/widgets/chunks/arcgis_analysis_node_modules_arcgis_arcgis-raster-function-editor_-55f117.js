"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-55f117"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.ca-ada3d60c.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.ca-ada3d60c.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "D'acord";
const cancel = "Cancel·la";
const enterURL = "Introduïu la URL del servei d'imatges";
const serviceURL = "URL del servei";
const selectRaster = "Seleccioneu un ràster";
const failedToLoadLayer = "No s'ha pogut carregar la capa";
const loadingLayer = "S'està carregant la capa";
const selectFeature = "Seleccioneu la capa d'entitats";
const enterFURL = "Introduïu l'URL del servei d'entitats";
const addRaster = "Afegeix una variable de ràster";
const addScalar = "Afegeix una constant";
const raster = "Ràster";
const scalar = "Escalar";
const defaultModelName = "Plantilla de funció de ràster";
const general = "General";
const parameters = "Paràmetres";
const variables = "Variables";
const name = "Nom";
const description = "Descripció";
const parameter = "Paràmetre";
const isPublic = "IsPublic";
const isDataset = "IsDataset";
const unknownPixelType = "Desconegut";
const outputPixelType = "Tipus de píxel de sortida";
const u8PixelType = "8 bits sense signar";
const s8PixelType = "8 bits signat";
const u16PixelType = "16 bits sense signar";
const s16PixelType = "16 bits signat";
const u32PixelType = "32 bits sense signar";
const s32PixelType = "32 bits signat";
const f32PixelType = "32 bits flotant";
const f64PixelType = "64 bits doble";
const properties = "Propietats";
const multidimensionalRules = "Regles multidimensionals";
const matchVariables = "Variables de coincidència";
const unionDimensions = "Dimensions d'unió";
const rasterFunctionEditor = {
	invalidRFTMessage: "La plantilla de funció de ràster no és vàlida.",
	rfxArgsEditor: {
		outputRaster: "OutputRaster",
		raster: "Ràster",
		unsupportedDataTypeWarning: "Els arguments següents no es mostren perquè actualment no són compatibles.",
		unsupportedFunction: "Conté funcions de ràster no admeses actualment."
	},
	rfxRasterInput: {
		selectLayer: "Seleccioneu la capa",
		browseLayers: "Examina les capes",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Mètode",
		bandLabel: "Banda",
		combinationLabel: "Combinació"
	},
	rfxRemapGrid: {
		minimum: "Mínim",
		maximum: "Màxim",
		output: "Sortida",
		noData: "NoData",
		remapValuesLabel: "Nova representació cartogràfica de valors"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Variables de ràster",
		deleteSelectedVars: "Elimina les variables seleccionades"
	},
	rfxClippingGeometry: {
		clippingLayer: "Capa de retalls",
		clippingRaster: "S'està retallant el ràster",
		clippingGeometry: "S'està retallant la geometria",
		customExtent: "Extensió personalitzada",
		outputExtent: "Extensió de sortida",
		currentExtent: "Extensió de mapa actual",
		drawLabel: "Dibuixa"
	},
	rfxCustomExtent: {
		top: "Superior",
		right: "Dret",
		bottom: "Inferior",
		left: "Esquerre"
	},
	rfxRasterArrayEditor: {
		moveUp: "Mou cap amunt",
		moveDown: "Mou cap avall",
		remove: "Elimina"
	},
	rfxStatisticsGrid: {
		stdDev: "Desv. estàndard",
		min: "Mín.",
		max: "Màx.",
		mean: "Mitja"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Taula de sumes ponderades",
		id: "ID",
		layer: "Capa",
		field: "Camp",
		weight: "Pes",
		value: "Valor",
		selectLayer: "Seleccioneu la capa"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Taula de superposició ponderada",
		id: "ID",
		layer: "Capa",
		field: "Camp",
		influence: "Influència",
		sumOfInfluence: "Suma d'influència",
		value: "Valor",
		remapTable: "Taula de nova representació geogràfica",
		scale: "Escala",
		scales: "Escales",
		selectRaster: "Seleccioneu un ràster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Cerca una capa d'entitats",
		addPointLayer: "Cerca una capa de punts"
	},
	rfxFieldSelect: {
		value: "Valor",
		count: "Recompte"
	},
	rfxAttributeTable: {
		tableType: "Tipus de taula",
		manual: "Manual",
		external: "Extern",
		minVal: "Valor mínim",
		maxVal: "Valor màxim",
		baseClassName: "Nom de base de la classe",
		colorScheme: "Esquema de colors",
		defaultClassName: "Label_",
		generateTable: "Genera la taula",
		browseTable: "Navegueu per la taula",
		value: "Valor",
		classname: "ClassName",
		color: "Color"
	},
	rfxFieldNumberSwitchable: {
		number: "Numèric",
		field: "Camp",
		string: "Cadena",
		linearUnit: "Unitat lineal"
	},
	rfxPropertySet: {
		name: "Nom",
		value: "Valor"
	},
	rfxConversionGrid: {
		size: "Mida"
	},
	rfxTransposeBit: {
		bitPattern: "Patró de bits",
		outputBit: "Bit de sortida",
		inputBit: "Bit d'entrada"
	},
	rfxSpatialReference: {
		placeHolder: "Refina per paraula clau",
		coordinateSystem: "Sistema de coordenades",
		gcs: "Sistema de coordenades geogràfiques",
		pcs: "Sistema de coordenades projectades",
		vcs: "Sistema de coordenades verticals"
	}
};
const rfxLicenseInfo = "Aquesta plantilla de funció de ràster es pot utilitzar per processar les imatges mitjançant l'ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "Arc cosinus hiperbòlic (ACosH)",
		aCosHSnip: "Calcula el cosinus hiperbòlic invers de les cel·les d'un ràster.",
		aCosHDesc: "La funció calcula el cosinus hiperbòlic invers dels píxels d'un ràster.",
		aCosName: "Arc cosinus (ACos)",
		aCosSnip: "Calcula el cosinus invers dels píxels d'un ràster.",
		aCosDesc: "Aquesta funció de ràster calcula el cosinus invers de les cel·les d'un ràster. En matemàtiques, totes les funcions trigonomètriques tenen un interval definit de valors d'entrada vàlids, que es coneixen com el domini. Els valor de sortida de cada funció també té un interval definit. Per a aquesta eina, el domini és [-1, 1] i l'interval és [0, pi].",
		aSinHName: "Arc sinus hiperbòlic (ASinH)",
		aSinHSnip: "Calcula el sinus hiperbòlic invers de les cel·les d'un ràster.",
		aSinHDesc: "La funció calcula el sinus hiperbòlic invers dels píxels d'un ràster.",
		aSinName: "Arc sinus (ASin)",
		aSinSnip: "Calcula el sinus invers de les cel·les d'un ràster.",
		aSinDesc: "La funció calcula el sinus invers dels píxels d'un ràster.",
		aTan2Name: "Arc tangent (ATan2)",
		aTan2Snip: "Calcula la tangent inversa (basada en x,y) de les cel·les d'un ràster.",
		aTan2Desc: "La funció calcula la tangent inversa (basada en x,y) dels píxels d'un ràster.",
		aTanHName: "Arc tangent hiperbòlica (ATanH)",
		aTanHSnip: "Calcula la tangent hiperbòlica inversa de les cel·les d'un ràster.",
		aTanHDesc: "La funció calcula la tangent hiperbòlica inversa dels píxels d'un ràster.",
		aTanName: "Arc tangent (ATan)",
		aTanSnip: "Calcula la tangent inversa de les cel·les d'un ràster.",
		aTanDesc: "La funció calcula la tangent inversa dels píxels d'un ràster.",
		absName: "Valor absolut",
		absSnip: "Calcula el valor absolut de les cel·les d'un ràster.",
		absDesc: "La funció Valor absolut calcula el valor absolut dels píxels d'un ràster.",
		reflectanceName: "Reflectància aparent",
		reflectanceSnip: "Converteix les imatges sense processar en valors de sostre de l'atmosfera (TOA). Per fer-ho, té en compte les característiques del sensor, la posició del sol i el temps d'adquisició.",
		reflectanceDesc: "Aquesta funció ajusta els valors de nombre digital (DN) de brillantor de la imatge per a alguns sensors de satèl·lit. Aquests ajusts es basen en les propietats d'elevació del sol, de data d'adquisició i del sensor per definir el guany i el biaix de cada banda. Aquesta funció s'utilitza per ajustar els valors de reflectància, o brillantor, d'algunes imatges de satèl·lit en funció de la il·luminació de l'escena i la configuració de guany del sensor. Les imatges s'ajusten a una condició d'il·luminació teòricament comuna i, per tant, hi hauria d'haver menys variació entre les escenes de dates i sensors diferents. Això pot resultar útil per a la classificació d'imatges, l'ajust del color i la creació de mosaics. Aquesta funció només es pot utilitzar amb imatges específiques. Els sensors aplicables són Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 i Pleiades.<div><br/>La funció realitza dues correccions. La primera es basa en la configuració de guany. Els valors de brillantor originals es tornen a crear a partir dels valors d'imatge. Per fer-ho, s'inverteixen les equacions de guany. La segona correcció té a veure amb les diferències en l'angle i la brillantor del sol. Els valors de brillantor originals s'ajusten a una condició d'il·luminació comuna mitjançant la normalització de les escenes capturades en condicions d'il·luminació variables. En general, tot i que el tipus de dades d'imatge de sortida és el mateix que el d'entrada, els valors de sortida són més baixos que els d'entrada i es retallen per ajustar-los a l'interval de dades vàlid.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Calcula les estadístiques arg, que inclouen Arg Max, Arg Min, Arg Median i Duration.",
		argStatisticsDesc: "La funció calcula les estadístiques arg. La funció ArgStatistics presenta quatre mètodes: ArgMax, ArgMin, ArgMedian i Duration.",
		arithmeticName: "Aritmètic",
		arithmeticSnip: "Realitza una operació aritmètica entre dos ràsters o un ràster i un escalar.",
		arithmeticDesc: "La funció aritmètica realitza una operació aritmètica entre dos ràsters o un ràster i un escalar i viceversa.",
		aspectSlopeName: "Orientació-pendent",
		aspectSlopeSnip: "Crea un ràster que mostra simultàniament l'orientació (direcció) i el pendent (inclinació) d'una superfície contínua, tal com es representa en un model d'elevació digital.",
		aspectSlopeDesc: "La funció Orientació-pendent crea una capa de ràster que mostra simultàniament l'orientació i el pendent d'una superfície. L'orientació identifica la direcció descendent de la velocitat màxima de canvi del valor des de cada píxel als píxels veïns. L'orientació es pot considerar la direcció del pendent. Els valors del ràster de sortida seran la direcció de brúixola de l'orientació, representada amb un to (color). El pendent representa l'índex de canvi d'elevació de cada píxel del model d'elevació digital (DEM). El pendent representa la inclinació de la superfície i se simbolitza en tres classes que es mostren mitjançant la saturació del color (brillantor).<div><br/>Els valors de píxel del ràster d'orientació-pendent de sortida reflecteixen una combinació d'orientació i pendent. Els píxels amb valors inferiors a 20 es consideren plans i es mostren grisos. Els valors d'orientació-pendent de 21 i superiors es mostraran amb saturacions variables de la manera següent: de 21 a 30, saturació de pendent baix; de 31 a 40, saturació de pendent moderat; 41 i superiors, saturació de pendent alt</div>",
		aspectName: "Orientació",
		aspectSnip: "Mostra quina direcció segueix un píxel, on 0 fa referència al nord i els angles augmenten en el sentit de les agulles del rellotge fins a 360.",
		aspectDesc: "La funció Orientació identifica la direcció descendent de la velocitat màxima de canvi del valor des de cada cel·la a les cel·les veïnes. L'orientació es pot considerar la direcció del pendent. Els valors del ràster de sortida seran la direcció de brúixola de l'orientació.<div><br/>L'entrada d'aquesta funció és Ràster d'entrada. La funció Orientació s'aplica sovint a un model d'elevació digital (DEM). Per defecte, l'orientació es mostra com una imatge en escala de grisos. Podeu afegir la funció Mapa de color per especificar un esquema de colors específic o permetre que la persona que visualitza el mosaic modifiqui la simbologia amb el seu propi esquema de colors.</div>",
		tableName: "Taula d'atributs",
		tableSnip: "Utilitza una taula per anomenar i simbolitzar els valors d'un dataset. Les columnes de la taula estan delimitades per comes: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "La funció Taula d'atributs us permet definir una taula d'atributs per simbolitzar un dataset ràster o un dataset de mosaic d'una banda. <div><br/>Resulta útil si voleu presentar imatges que s'han sotmès a classificació per a ús del sòl, com ara terreny forestal, zones humides, terres de cultiu i zones urbanes. Tanmateix, si la taula conté camps anomenats vermell, verd i blau, els valors d'aquests camps s'utilitzaran com un mapa de color quan es representi la imatge.</div>",
		bandArithmeticName: "Aritmètica de banda",
		bandArithmeticSnip: "Calcula els índexs mitjançant fórmules predefinides o una expressió definida per l'usuari.",
		bandArithmeticDesc: "La funció Aritmètica de banda realitza una operació aritmètica sobre les bandes d'un dataset ràster. Podeu triar algoritmes predefinits o introduir la vostra pròpia fórmula d'una línia. Els operadors admesos són -, +, /, * i - unari.",
		thresholdName: "Definició de llindar binari",
		thresholdSnip: "Organitza les dades contínues en primer pla i en segon terme. Per fer-ho, minimitza la covariància entre les dues classes.",
		thresholdDesc: "Quan un dataset ràster té una distribució bimodal, aquesta funció crea un ràster nou que divideix les dades en dues classes diferents. Crea una classe de valors baixos que es mostra amb píxels negres i una classe de valors alts que es mostra amb píxels blancs.",
		bitwiseAndName: "Bitwise And",
		bitwiseAndSnip: "Realitza una operació Bitwise And als valors binaris dels dos ràsters d'entrada.",
		bitwiseAndDesc: "Bitwise And realitza una operació Bitwise And als valors binaris dels dos ràsters d'entrada",
		bitwiseLeftShiftName: "Bitwise Left Shift",
		bitwiseLeftShiftSnip: "Realitza una operació Bitwise Left Shift als valors binaris dels dos ràsters d'entrada.",
		bitwiseLeftShiftDesc: "Bitwise Left Shift realitza una operació Bitwise Left Shift als valors binaris dels dos ràsters d'entrada",
		bitwiseNotName: "Bitwise Not",
		bitwiseNotSnip: "Realitza una operació Bitwise Not (complement) als valors binaris dels dos ràsters d'entrada.",
		bitwiseNotDesc: "La funció realitza una operació Bitwise Not (complement) al valor binari d'un ràster d'entrada.",
		bitwiseOrName: "Bitwise Or",
		bitwiseOrSnip: "Realitza una operació Bitwise Or als valors binaris dels dos ràsters d'entrada.",
		bitwiseOrDesc: "La funció realitza una operació Bitwise Or als valors binaris dels dos ràsters d'entrada. ",
		bitwiseRightShiftName: "Bitwise Right Shift",
		bitwiseRightShiftSnip: "Realitza una operació Bitwise Right Shift als valors binaris dels dos ràsters d'entrada.",
		bitwiseRightShiftDesc: "La funció realitza una operació Bitwise Right Shift als valors binaris dels dos ràsters d'entrada.",
		bitwiseXorName: "Bitwise Xor",
		bitwiseXorSnip: "Realitza una operació Bitwise eXclusive Or als valors binaris dels dos ràsters d'entrada.",
		bitwiseXorDesc: "La funció realitza una operació Bitwise eXclusive Or als valors binaris dels dos ràsters d'entrada",
		booleanAndName: "Booleana And",
		booleanAndSnip: "Realitza una operació Booleana And als valors de cel·la dels dos ràsters d'entrada. Si ambdós valors d'entrada són certs (no zero), el valor de sortida és 1. Si una de les entrades o totes dues són falses (zero), el valor de sortida és 0.",
		booleanAndDesc: "La funció realitza una operació Booleana And als valors de píxel de les dues entrades. Si ambdós valors d'entrada són certs (no zero), el valor de sortida és 1. Si un dels valors d'entrada o tots dos són falsos (zero), el valor de sortida és 0. ",
		booleanNotName: "Booleana Not",
		booleanNotSnip: "Realitza una operació Booleana Not (complement) als valors de cel·la del ràster d'entrada. Si els valors d'entrada són certs (no zero), el valor de sortida és 0. Si els valors d'entrada són falsos (zero), la sortida és 1.",
		booleanNotDesc: "La funció realitza una operació Booleana Not (complement) als valors de píxel del ràster d'entrada. Si els valors d'entrada són certs (no zero), el valor de sortida és 0. Si els valors d'entrada són falsos (zero), el valor de sortida és 1.",
		booleanOrName: "Booleana Or",
		booleanOrSnip: "Realitza una operació Booleana Or als valors de cel·la dels dos ràsters d'entrada. Si un dels valors d'entrada o tots dos són certs (no zero), el valor de sortida és 1. Si ambdós valors d'entrada són falsos (zero), la sortida és 0.",
		booleanOrDesc: "La funció realitza una operació Booleana Or als valors de cel·la dels dos ràsters d'entrada. Si un dels valors d'entrada o tots dos són certs (no zero), el valor de sortida és 1. Si ambdós valors d'entrada són falsos (zero), el valor de sortida és 0.",
		booleanXorName: "Booleana Xor",
		booleanXorSnip: "Realitza una operació Booleana eXclusive Or als valors de cel·la dels dos ràsters d'entrada. Si un dels valors d'entrada és cert (no zero) i l'altre és fals (zero), la sortida és 1. Si ambdós valors d'entrada són certs o ambdós són falsos, la sortida és 0.",
		booleanXorDesc: "La funció realitza una operació Booleana eXclusive Or als valors de cel·la dels dos ràsters d'entrada. Si un dels valors d'entrada és cert (no zero) i l'altre és fals (zero), el valor de sortida és 1. Si ambdós valors d'entrada són certs o ambdós són falsos, el valor de sortida és 0.",
		bufferedRasterName: "En àrea d'influència",
		bufferedRasterSnip: "Crea àrees d'influència dels últims blocs que píxels als quals s'ha accedit.",
		bufferedRasterDesc: "La funció En àrea d'influència s'utilitza per optimitzar el rendiment de les cadenes de funcions complexes. Emmagatzema la sortida a la memòria de la part de la cadena de funcions que la precedeix. <div><br/>Inseriu aquesta funció a l'Editor de funció on voleu emmagatzemar la sortida.</div>",
		rasterCalculatorName: "Calculadora",
		rasterCalculatorSnip: "Calcula un ràster a partir d'una expressió matemàtica basada en ràster.",
		rasterCalculatorDesc: "La funció Calculadora us permet crear i executar expressions i incorporar-les a les cadenes de funcions.",
		cellStatisticsName: "Estadístiques de la cel·la",
		cellStatisticsSnip: "Calcula estadístiques per cel·la de diversos ràsters. Les estadístiques disponibles són Majoria, Màxim, Mitja, Mitjana, Mínim, Minoria, Interval, Desviació Estàndard, Suma i Varietat.",
		cellStatisticsDesc: "Aquesta funció calcula les estadístiques a partir de diversos ràsters, píxel per píxel. Les estadístiques disponibles són majoria, màxim, mitja, mitjana, mínim, minoria, interval, desviació estàndard, suma i varietat.",
		classifyName: "Classifica",
		classifySnip: "Assigna cada píxel a una classe. Incorporeu les dades auxiliars, com ara una imatge segmentada.",
		classifyDesc: "Aquesta funció de ràster classifica un dataset ràster en funció d'un fitxer de definició de classificador d'Esri (.ecd) i de les entrades de dataset ràster. El fitxer .ecd utilitzat a la funció Classifica conté tota la informació d'un dataset i un classificador específics, i es genera mitjançant eines de preparació de classificació, com ara Preparar classificador de màquina de vectors de suport o Preparar classificador d'arbres aleatoris.",
		clipName: "Retalla",
		clipSnip: "Defineix l'extensió d'un ràster mitjançant coordenades o un altre dataset.",
		clipDesc: "Aquesta funció retalla un ràster mitjançant una forma rectangular d'acord amb les extensions definides, o bé el retalla amb la forma d'una classe d'entitat de polígon d'entrada. La forma que defineix el retall pot retallar l'extensió del ràster o bé retallar una àrea dins del ràster.",
		colorspaceConversionName: "Conversió del model de color",
		colorspaceConversionSnip: "Converteix un ràster d'RGB a HSV i viceversa.",
		colorspaceConversionDesc: "La funció Conversió del model de color converteix el model de color d'una imatge des de l'espai de color de to, saturació i valor (HSV) al de vermell, verd i blau (RGB) o viceversa.<div><br/>Aquesta funció es pot utilitzar en un dataset de mosaic.</div>",
		colormapToRGBName: "Mapa de color a RGB",
		colormapToRGBSnip: "Converteix un ràster d'una banda amb un mapa de color en un ràster de tres bandes (vermella, verda i blava).",
		colormapToRGBDesc: "Aquesta funció converteix un ràster d'una banda amb un mapa de color en un ràster de tres bandes (vermella, verda i blava).<div><br/>Aquesta funció resulta útil si necessiteu crear un ràster de tres bandes a partir d'un ràster d'una banda amb un mapa de color associat. Els valors del mapa de color s'utilitzaran per crear cadascuna de les bandes vermella, verda i blava. Aquesta funció es pot utilitzar en un dataset de mosaic.</div>",
		colormapName: "Mapa de color",
		colormapSnip: "Canvia els valors de píxel per mostrar les dades de ràster com una imatge en escala de grisos o una imatge vermella, verda i blava (RGB), basada en un mapa de color o una rampa de color.",
		colormapDesc: "La funció Mapa de color és un tipus de renderitzador de dades de ràster. Transforma els valors de píxel per mostrar les dades de ràster com una imatge en escala de grisos o una imatge en color RGB basada en un esquema de color o en colors específics d'un fitxer de mapa de color. Podeu utilitzar un mapa de color per representar les dades analitzades, com ara una imatge classificada o quan visualitzeu un mapa topogràfic (o una imatge d'índex escanejada en color).<div><br/>Els mapes de color contenen un conjunt de valors associats als colors que s'utilitzen per mostrar un ràster d'una banda de manera coherent amb els mateixos colors. Cada valor de píxel està associat a un color, definit com un conjunt de valors RGB. Els mapes de color poden admetre qualsevol profunditat de bits, excepte la de punt flotant. També admeten valors positius i negatius i poden contenir valors assignats de colors que faltin. En visualitzar un dataset amb un mapa de color que contingui valors que falten, els píxels amb aquests valors que falten no es mostraran.</div>",
		complexName: "Complex",
		complexSnip: "Extreu la magnitud dels nombres complexos.",
		complexDesc: "Aquesta funció calcula la magnitud dels valors complexos.<div><br/>Aquesta funció s'utilitza habitualment amb imatges RADAR que tenen un tipus de dades complex. Es pot utilitzar en un dataset de mosaic.</div>",
		compositeBandName: "Bandes compostes",
		compositeBandSnip: "Combina diversos datasets en un ràster multibanda.",
		compositeBandDesc: "La funció Bandes compostes us permet combinar ràsters per formar una imatge multibanda.",
		conName: "Condicional",
		conSnip: "Realitza una operació If, Then, Else condicional. Si s'utilitza un operador Condicional, generalment cal que dues o més funcions estiguin encadenades, una de les quals indica els criteris i l'altra és l'operador Condicional que utilitza els criteris i dicta quines han de ser les sortides certes i falses.",
		conDesc: "La funció Condicional defineix els píxels del ràster de sortida segons una avaluació if\\else de cada píxel d'entrada. Retorna els valors de píxel del ràster cert si l'avaluació condicional és certa (1), o bé retorna els valors de píxel del ràster fals si l'avaluació condicional és falsa (0). Aquest criteri l'especifica la sortida d'una funció matemàtica lògica, que serà el ràster d'entrada.",
		constantName: "Constant",
		constantSnip: "Crea un ràster virtual amb un sol valor de píxel.",
		constantDesc: "Aquesta funció crea un ràster virtual amb un sol valor de píxel que es pot utilitzar en plantilles de funció de ràster i per processar un dataset de mosaic.<div><br/>El valor constant s'utilitza per a cada valor de píxel del ràster.</div>",
		contourName: "Corba de nivell",
		contourSnip: "Crea línies de corba de nivell.",
		contourDesc: "La funció Corba de nivell genera línies de corba de nivell mitjançant la unió de punts amb la mateixa elevació d'un dataset d'elevació de ràster. Les corbes de nivell són isolínies creades com ràsters per a la visualització. Les següents característiques clau fan que aquesta funció sigui molt eficaç: les corbes de nivell es generen de manera ràpida i dinàmica en datasets molt grans, com ara World Elevation; les corbes de nivell es poden suavitzar per proporcionar una aparença cartogràficament més agradable i, alhora, mantenir-ne la precisió; es proporciona control dinàmic sobre l'interval de corbes de nivell; les opcions de sortida inclouen línies de corbes de nivell, corbes de nivell mestres i corbes de nivell plenes.<div><br/>La creació d'una capa de corba de nivell com un producte ràster resulta útil per a una gran varietat d'aplicacions, ja que les corbes de nivell es poden superposar en un mapa i proporcionen informació sobre el terreny sense amagar les dades subjacents. Resulten útils en aplicacions, com ara d'enginyeria, agricultura i gestió de recursos hídrics.</div>",
		contrastBrightnessName: "Contrast i brillantor",
		contrastBrightnessSnip: "Ajusta el contrast i la brillantor d'un ràster.",
		contrastBrightnessDesc: "La funció Contrast i brillantor millora l'aparença de les dades de ràster mitjançant la modificació de la brillantor i el contrast a la imatge. La brillantor augmenta la il·luminació general de la imatge (per exemple, aclareix els colors foscos i fa que els colors clars siguin més blancs), mentre que el contrast ajusta la diferència entre els colors més foscos i més clars.<div><br/>La utilització d'aquesta funció altera els valors de píxel; per tant, aquesta funció s'ha d'utilitzar quan es vol millorar l'aparença de les dades, però no si la intenció és utilitzar les dades com a part d'una anàlisi que exigiria valors de píxel sense processar. Aquesta funció resulta útil quan es publiquen les dades com un servei d'imatges que es pot utilitzar en aplicacions sense la capacitat d'alterar el contrast i la brillantor de les imatges, o de garantir la visualització amb la vostra configuració preferida.</div>",
		convolutionName: "Convolució",
		convolutionSnip: "Aplica un filtre per enfocar, difuminar, detectar vores o suavitzar la imatge, o bé un gradient en un ràster.",
		convolutionDesc: "La funció Convolució realitza el filtratge als valors de píxel d'una imatge, que es pot utilitzar per enfocar o difuminar una imatge, detectar les vores d'una imatge o altres millores basades en el nucli. Els filtres s'utilitzen per millorar la qualitat de la imatge de ràster. Per aconseguir-ho elimina les dades falses o millora les característiques de les dades. Aquests filtres de convolució s'apliquen en un nucli mòbil superposat (finestra o veïnat), com ara 3 per 3. Els filtres de convolució funcionen calculant el valor de píxel en funció de la ponderació dels seus veïns.",
		corridorName: "Corredor",
		corridorSnip: "Calcula la suma dels costos acumulatius de dos ràsters acumulatius d'entrada.",
		corridorDesc: "La funció Corredor calcula la suma dels costos acumulatius de dos ràsters de cost acumulatiu d'entrada. Tot i que es poden utilitzar dos ràsters qualsevol per a l'entrada, per obtenir un resultat significatiu han de ser ràsters de sortida de cost acumulatiu sense alterar. L'ordre de les dues entrades és irrellevant.",
		cosHName: "Cosinus hiperbòlic (CosH)",
		cosHSnip: "Calcula el cosinus hiperbòlic de les cel·les d'un ràster.",
		cosHDesc: "La funció calcula el cosinus hiperbòlic dels píxels d'un ràster.",
		cosName: "Cosinus (Cos)",
		cosSnip: "Calcula el cosinus d'una cel·la del ràster.",
		cosDesc: "La funció calcula el cosinus dels píxels d'un ràster.",
		costAllocationName: "Assignació de costos",
		costAllocationSnip: "Calcula, per a cada cel·la, l'origen de menor cost en funció del cost acumulatiu més baix en una superfície de cost.",
		costAllocationDesc: "La funció Assignació de costos calcula, per a cada cel·la, l'origen de menor cost en funció del cost acumulatiu més baix en una superfície de cost.",
		costBackLinkName: "Enllaç de menor cost",
		costBackLinkSnip: "Defineix el veí que és la cel·la següent a la ruta de menor cost acumulatiu a l'origen de menor cost.",
		costBackLinkDesc: "La funció Enllaç de menor cost defineix el veí que és la cel·la següent a la ruta de menor cost acumulatiu a l'origen de menor cost.<div><br/>El ràster d'enllaç de menor cost conté valors de zero a vuit, que defineixen la direcció o identifiquen la cel·la veïna següent (la cel·la posterior) al llarg de la ruta de menor cost acumulatiu des d'una cel·la per arribar a l'origen de menor cost. Si la ruta ha de passar al veí de la dreta, s'assignarà el valor 1 a la cel·la, 2 per a la cel·la diagonal dreta inferior, i així successivament en el sentit de les agulles del rellotge. El valor 0 es reserva per a les cel·les d'origen.</div>",
		costDistanceName: "Cost en pla",
		costDistanceSnip: "Calcula la distància de menor cost acumulatiu de cada cel·la des de o cap a l'origen de menor cost sobre una superfície de cost.",
		costDistanceDesc: "La funció Cost en pla calcula la distància de menor cost acumulatiu de cada cel·la des de o cap a l'origen de menor cost sobre una superfície de cost.",
		costPathName: "Ruta de cost",
		costPathSnip: "Calcula la ruta de menor cost des d'un origen fins a una destinació.",
		costPathDesc: "La funció Ruta de cost global calcula la ruta de menor cost des d'un origen fins a una destinació.<div><br/>Aquesta funció genera un ràster de sortida que registra la ruta o les rutes de menor cost des de les ubicacions seleccionades fins a la cel·la d'origen més propera definida a la superfície de cost acumulatiu, en termes de cost en pla.</div>",
		curvatureName: "Curvatura",
		curvatureSnip: "Calcula la curvatura d'una superfície de ràster, que pot incloure la curvatura del perfil i del pla.",
		curvatureDesc: "La funció Curvatura mostra la forma o la curvatura del pendent. Una part d'una superfície pot ser còncava o convexa; per saber-ho, observeu el valor de curvatura. Per obtenir la curvatura es calcula la segona derivada de la superfície.<div><br/>La sortida de la funció Curvatura es pot utilitzar per descriure les característiques físiques d'una conca de drenatge per intentar entendre els processos d'erosió i escolament. El valor de curvatura es pot utilitzar per cercar patrons d'erosió del sòl, així com la distribució d'aigua al terreny. La curvatura del perfil afecta l'acceleració i desacceleració del flux i, per tant, influeix en l'erosió i la deposició. La curvatura de la planta influeix en la convergència i la divergència del flux.</div>",
		divideName: "Divisió",
		divideSnip: "Divideix els valors de dos ràsters píxel per píxel.",
		divideDesc: "La funció Divisió divideix els valors de dos ràsters píxel per píxel.",
		elevationVoidFillName: "Emplenament de buits d'elevació",
		elevationVoidFillSnip: "Crea píxels allà on les dades d'elevació presenten forats.",
		elevationVoidFillDesc: "La funció Emplenament de buits d'elevació s'utilitza per crear píxels allà on l'elevació presenta forats.<div><br/>Els buits es produeixen quan no s'han recopilat punts en una àrea representada per un píxel al ràster resultant. Les causes dels buits solen ser les masses d'aigua, la selecció del tipus de classe o l'exclusió. L'emplenament de buits s'utilitza principalment quan es genera una superfície de terreny.</div>",
		equalToName: "Igual que",
		equalToSnip: "Realitza una operació d'igualtat relacional en dues entrades cel·la per cel·la. Retorna el valor 1 per a les cel·les on el primer ràster és igual que el segon i el valor 0 per a les cel·les quan els ràsters no són iguals.",
		equalToDesc: "La funció realitza una operació d'igualtat en dos ràsters píxel per píxel. Retorna el valor 1 per als píxels on el primer ràster és igual que el segon i el valor 0 per als píxels on els ràsters no són iguals.",
		eucAllocationName: "Assignació euclidiana",
		eucAllocationSnip: "Calcula, per a cada cel·la, l'origen més proper basat en la distància euclidiana.",
		eucAllocationDesc: "La funció Assignació euclidiana calcula, per a cada cel·la, l'origen més proper basat en la distància euclidiana.",
		eucDirectionName: "Direcció euclidiana",
		eucDirectionSnip: "Calcula, per a cada cel·la, la direcció, en graus, a l'origen més proper.",
		eucDirectionDesc: "La funció Direcció euclidiana calcula, per a cada cel·la, la direcció, en graus, a l'origen més proper. <div><br/>La direcció es calcula des del centre de cada cel·la fins al centre de la cel·la d'origen més propera. L'interval de valors és de 0 a 360 graus, amb el valor 0 reservat per a les cel·les d'origen. Cap a l'est (dreta) és 90 i els valors augmenten en el sentit de les agulles del rellotge (180 és el sud, 270 és l'oest i 360 és el nord).</div>",
		eucDistanceName: "Distància euclidiana",
		eucDistanceSnip: "Calcula, per a cada cel·la, la distància euclidiana a l'origen més proper.",
		eucDistanceDesc: "La funció Distància euclidiana calcula, per a cada cel·la, la distància euclidiana a l'origen més proper.",
		exp10Name: "Exponencial en base 10 (Exp10)",
		exp10Snip: "Calcula l'exponencial en base 10 de les cel·les d'un ràster.",
		exp10Desc: "La funció Exponencial en base 10 calcula l'exponencial en base 10 dels píxels d'un ràster.",
		exp2Name: "Exponencial en base 2 (Exp2)",
		exp2Snip: "Calcula l'exponencial en base 2 de les cel·les d'un ràster.",
		exp2Desc: "Aquesta funció calcula l'exponencial en base 2 dels píxels d'un ràster.",
		expName: "Exponencial en base e (Exp)",
		expSnip: "Calcula l'exponencial en base e de les cel·les d'un ràster.",
		expDesc: "Aquesta funció calcula l'exponencial en base e dels píxels d'un ràster.",
		extractBandName: "Extreu les bandes",
		extractBandSnip: "Especifica amb quines bandes cal treballar quan s'utilitzen datasets multibanda.",
		extractBandDesc: " La funció Extreu les bandes us permet extreure una o més bandes d'un dataset ràster multibanda, o bé reordenar-ne les bandes.<div><br/>Podeu utilitzar la funció Extreu les bandes abans que altres funcions, com ara Aritmètica, per controlar quines bandes s'utilitzaran com a entrada a la funció següent.</div>",
		fillName: "Emplena",
		fillSnip: "Emplena els embornals d'un ràster de superfície per eliminar petites imperfeccions de les dades.",
		fillDesc: "La funció Emplenament global localitza i emplena embornals i pics en un ràster de superfície d'elevació per eliminar petites imperfeccions de les dades. La funció realitzarà l'emplenament en un procés iteratiu fins que tots els embornals s'hagin emplenat dins del límit Z especificat.<div><br/>Quan es crea una superfície d'elevació amb les eines de representació cartogràfica d'ortofotos o per altres mitjans, acostumen a produir-se errors menors, però significatius, en la forma dels embornals i pics de les dades. En l'àmbit de la fotogrametria, els embornals i pics s'acostumen a anomenar \"forats i pics\". Atès que les dades de superfície s'acostumen a utilitzar per a la modelització, com ara la modelització hidrològica, és important corregir aquests errors d'embornals i pics de manera coherent amb les dades de l'entorn.</div>",
		floatName: "Punt flotant",
		floatSnip: "Converteix cada valor de cel·la d'un ràster en una representació de punt flotant.",
		floatDesc: "La funció Punt flotant converteix cada valor de píxel d'un ràster en una representació de punt flotant.",
		flowAccumulationName: "Acumulació de flux",
		flowAccumulationSnip: "Crea un ràster de flux acumulat a cada cel·la. De manera opcional, es pot aplicar un factor de ponderació.",
		flowAccumulationDesc: "La funció Acumulació de flux global crea un ràster del flux acumulat en cada píxel, tal com determina l'acumulació de la ponderació de tots els píxels que flueixen a cada píxel de pendent descendent. Si no es proporciona cap ràster de ponderació, s'aplicarà una ponderació d'1 a cada píxel, i el valor dels píxels del ràster de sortida serà el nombre de píxels que flueixen a cada píxel.<div><br/>Els píxels de sortida amb una acumulació de flux alta són àrees de flux concentrat i es poden utilitzar per identificar canals de corrent. Els píxels de sortida amb una acumulació de flux alta són àrees de flux concentrat i es poden utilitzar per identificar canals de corrent.</div>",
		flowDirectionName: "Direcció del flux",
		flowDirectionSnip: "Crea un ràster de direcció del flux des de cada cel·la fins al veí de pendent descendent més pronunciat.",
		flowDirectionDesc: "Una de les claus per derivar característiques hidrològiques d'una superfície és la possibilitat de determina la direcció del flux des de cada píxel del ràster. La funció de ràster Direcció del flux pren una superfície com a entrada i crea un ràster de direcció del flux des de cada píxel fins al veí de pendent descendent més pronunciat. La funció Direcció del flux admet tres mètodes de modelització de flux: D8 (vuit direccions), Direcció del flux múltiple (MFD) i D-Infinity (DINF). ",
		flowDistanceName: "Distància del flux",
		flowDistanceSnip: "Calcula, per a cada cel·la, la distància horitzontal o vertical mínima del pendent descendent a les cel·les en un riu o un corrent al qual flueixen.",
		flowDistanceDesc: "Per a cada píxel, la funció calcularà la distància horitzontal o vertical mínima del pendent descendent als píxels en un riu o un corrent al qual flueixen. Si es proporciona un ràster de direcció del flux opcional, les direccions del pendent descendent es limitaran a les definides pel ràster de direcció del flux d'entrada. La sortida és un ràster de distància del flux.",
		focalName: "Estadístiques focals",
		focalSnip: "Calcula les estadístiques focals de cada píxel d'una imatge en funció del veïnat focal definit.",
		focalDesc: "La funció Estadístiques focals calcula les estadístiques focals de cada píxel d'una imatge en funció del veïnat focal definit.",
		geometricName: "Geomètrica",
		geometricSnip: "Augmenta la precisió de la posició d'un dataset en tenir en compte l'elevació.",
		geometricDesc: "La funció Geomètrica genera una imatge ortorectificada basada en una definició de sensor i un model de terreny. Augmenta la precisió de la posició d'un dataset en tenir en compte l'elevació.",
		grayscaleName: "Escala de grisos",
		grayscaleSnip: "Converteix una imatge multibanda en una imatge en escala de grisos d'una banda.",
		grayscaleDesc: "Aquesta funció converteix una imatge multibanda en una imatge en escala de grisos d'una banda.<div><br/>Aquesta funció aplica ponderacions especificades a cadascuna de les bandes d'entrada i normalitza la imatge de sortida. Les ponderacions s'acostumen a aplicar perquè algunes bandes tenen una importància variable segons l'aplicació. Per exemple, la banda blava acostuma a contenir més soroll que les altres.</div>",
		greaterThanEqualName: "Major o igual que",
		greaterThanEqualSnip: "Realitza una operació de superioritat o igualtat relacional en dues entrades cel·la per cel·la. Retorna el valor 1 per a les cel·les on el primer ràster és major o igual que el segon i el valor 0 si no ho és.",
		greaterThanEqualDesc: "La funció realitza una operació de superioritat o igualtat relacional en dues entrades píxel per píxel. Retorna un valor d'1 per als píxels on el primer ràster és major o igual que el segon i un valor de 0 per als píxels on el primer ràster no és major ni igual que el segon.",
		greaterThanName: "Major que",
		greaterThanSnip: "Realitza una operació de superioritat relacional en dues entrades cel·la per cel·la. Retorna el valor 1 per a les cel·les on el primer ràster és major que el segon i el valor 0 si no ho és.",
		greaterThanDesc: "La funció realitza una operació de superioritat relacional en dues entrades píxel per píxel. Retorna un valor d'1 per als píxels on el primer ràster és major que el segon i un valor de 0 per als píxels on el primer ràster no és major que el segon.",
		heatIndexName: "Índex de calor",
		heatIndexSnip: "Combina la temperatura ambient de l'aire i la humitat relativa per retornar la temperatura aparent.",
		heatIndexDesc: "Aquesta funció calcula la temperatura aparent en funció de la temperatura ambient i la humitat relativa. La temperatura aparent s'acostuma a descriure com a sensació tèrmica.<div><br/>Aquest índex pot resultar útil per calcular els perills relacionats amb problemes mèdics, com ara rampes, deshidratació, insolacions o cops de calor greus en dies càlids i humits. Si la humitat relativa és alta, cada cop es fa més difícil per al cos evaporar la suor, i les persones perden la seva capacitat natural per baixar la temperatura corporal de manera eficaç. Els mapes de consells o avisos d'altes temperatures acostumen a ser un mètode per organitzar el resultat d'índex de calor en classes. Com més alt és el valor d'índex, més probable és que esdevingui un avís que no pas un consell.</div>",
		hillshadeName: "Ombreig",
		hillshadeSnip: "Crea una representació 3D de la superfície, tenint en compte la posició relativa del sol per ombrejar la imatge",
		hillshadeDesc: "La funció Ombreig genera una representació 3D en escala de grisos de la superfície del terreny, tenint en compte la posició relativa del sol per ombrejar la imatge. <div><br/>L'ombreig és una tècnica per visualitzar terreny determinada per una font d'il·luminació i pel pendent i l'orientació de la superfície d'elevació. És un mètode qualitatiu per visualitzar topografia, que no proporciona valors d'elevació absoluts. </div>",
		intName: "Enter",
		intSnip: "Converteix cada valor de cel·la d'un ràster en un enter per truncament.",
		intDesc: "La funció Enter converteix cada valor de píxel d'un ràster en un enter mitjançant el truncament.",
		interpolateIrregularDataName: "Interpola dades irregulars",
		interpolateIrregularDataSnip: "Realitza la interpolació des de núvols de punts o quadrícules irregulars.",
		interpolateIrregularDataDesc: "Alguns datasets de netCDF o HDF emmagatzemen la seva geolocalització com a matrius de píxels o dades de punts amb espais irregulars. En afegir aquests datasets a un dataset de mosaic, la funció Interpola dades irregulars pren les dades quadriculades irregulars i les torna a mostrejar perquè cada píxel tingui una mida uniforme i sigui quadrat.<div><br/>En afegir variables de netCDF o HDF a un dataset de mosaic, es verificarà automàticament si les dades s'han disposat a la matriu correctament. En cas contrari, la funció Interpola dades irregulars s'utilitzarà per convertir les dades irregulars en un ràster quadriculat regular. Podeu canviar el mètode d'interpolació i la mida de la cel·la que s'utilitzen a la funció de ràster Interpola dades irregulars. En el cas de les dades de ràster amb espais regulars, no s'aplicarà cap interpolació i les dades es llegiran tal qual.</div>",
		isNullName: "És nul",
		isNullSnip: "Determina quins valors dels ràsters d'entrada són NoData cel·la per cel·la. Retorna un valor d'1 si els valors d'entrada són NoData i de 0 per a les cel·les que no presenten aquest valor.",
		isNullDesc: "La funció És nul determina quins valors del ràster d'entrada són NoData píxel per píxel. Retorna un valor d'1 si el valor d'entrada és NoData i un valor de 0 per als píxels que no són NoData.",
		kernelDensityName: "Densitat del nucli",
		kernelDensitySnip: "Aquesta funció calcula una àrea de magnitud per unitat des de les entitats de punt o polilínia mitjançant una funció de nucli per ajustar una superfície suaument estreta a cada punt o polilínia.",
		kernelDensityDesc: "Aquesta funció calcula una àrea de magnitud per unitat des de les entitats de punt o polilínia mitjançant una funció de nucli per ajustar una superfície suaument estreta a cada punt o polilínia.",
		keyMetadataName: "Metadades clau",
		keyMetadataSnip: "Invalida o insereix metadades clau d'un ràster en una cadena de funcions.",
		keyMetadataDesc: "Aquesta funció us permet inserir o invalidar metadades clau d'un ràster.<div><br/>La informació de les metadades clau s'utilitza per ajudar l'aplicació amb algunes tasques de processament i representació, inclòs el subministrament d'algunes dades útils, com ara el nom del sensor, els noms de les bandes o la cobertura del núvol, associades a les imatges.</div>",
		shortestPathName: "Ruta de menor cost",
		shortestPathSnip: "Realitza una anàlisi de cost de distància mitjançant les entrades d'origen i destinació, que s'utilitzarà posteriorment per determinar la ruta de menor cost des d'un origen fins a una destinació.",
		shortestPathDesc: "La funció Ruta de menor cost calcula la ruta de menor cost des d'un origen fins a una destinació. La distància de menor cost acumulatiu es calcula per a cada píxel sobre una superfície de cost, fins a l'origen més proper. Genera un ràster de sortida que registra la ruta o les rutes de menor cost des de les ubicacions seleccionades fins als píxels d'origen més propers definits a la superfície de cost acumulatiu, en termes de cost en pla.<div><br/>S'assigna un valor a cada ruta de menor cost quan es troba al procés d'escaneig. El píxel final del ràster d'origen d'una ruta de cost rep un valor d'1. La primera ruta rep un valor de 3, la segona rep un valor de 4 i així successivament. Quan diverses rutes es fusionen i segueixen la distància restant fins a un origen de la mateixa ruta, al segment on les dues rutes viatgen juntes se li assigna un valor de 2. A la part fusionada de la ruta no se li pot assignar el valor d'una de les rutes perquè aquesta part pertany a ambdues rutes.</div>",
		lessThanEqualName: "Menor o igual que",
		lessThanEqualSnip: "Realitza una operació d'inferioritat o igualtat relacional en dues entrades cel·la per cel·la. Retorna el valor 1 per a les cel·les on el primer ràster és menor o igual que el segon i el valor 0 si no ho és.",
		lessThanEqualDesc: "La funció realitza una operació d'inferioritat o igualtat relacional en dues entrades píxel per píxel. Retorna un valor d'1 per als píxels on el primer ràster és menor o igual que el segon i un valor de 0 per als píxels on el primer ràster no és menor ni igual que el segon.",
		lessThanName: "Menor que",
		lessThanSnip: "Realitza una operació d'inferioritat relacional en dues entrades cel·la per cel·la. Retorna el valor 1 per a les cel·les on el primer ràster és menor que el segon i el valor 0 si no ho és.",
		lessThanDesc: "La funció realitza una operació d'inferioritat relacional en dues entrades píxel per píxel. Retorna un valor d'1 per als píxels on el primer ràster és menor que el segon i un valor de 0 per als píxels on el primer ràster no és menor que el segon.",
		lnName: "Logaritme neperià (Ln)",
		lnSnip: "Calcula el logaritme natural (base e) de les cel·les d'un ràster.",
		lnDesc: "La funció Logaritme neperià (Ln) calcula el logaritme natural (base e) de cada píxel d'un ràster.",
		log10Name: "Logaritme en base 10 (Log10)",
		log10Snip: "Calcula el logaritme en base 10 de les cel·les d'un ràster.",
		log10Desc: "La funció Logaritme en base 10 (Log10) calcula el logaritme en base 10 de cada píxel d'un ràster.",
		log2Name: "Logaritme en base 2 (log2)",
		log2Snip: "Calcula el logaritme en base 2 de les cel·les d'un ràster.",
		log2Desc: "La funció Logaritme en base 2 (log2) calcula el logaritme en base 2 de cada píxel d'un ràster.",
		lookupName: "Cerca",
		lookupSnip: "Crea un nou ràster mitjançant la cerca dels valors que es troben en un altre camp de la taula del ràster d'entrada.",
		lookupDesc: "La funció crea un nou ràster mitjançant la cerca dels valors que es troben en un altre camp de la taula del ràster d'entrada.",
		mlClassifyName: "Classificació ML",
		mlClassifySnip: "Classifica les imatges mitjançant un plantejament per píxel. Els píxels combinats s'assignen a l'entitat amb el percentatge més alt del píxel.",
		mlClassifyDesc: "La funció Classificació ML us permet realitzar una classificació supervisada, mitjançant l'algoritme de classificació de màxima versemblança, en un dataset de ràster o un dataset de mosaic. Aquesta funció necessita un fitxer de signatura de classificació.",
		maskName: "Màscara",
		maskSnip: "Defineix els valors que no voleu mostrar.",
		maskDesc: "Aquesta funció de ràster defineix els valors que no voleu mostrar al vostre ràster. Amb la funció Màscara, especificareu un o diversos valors NoData, o bé un interval de valors de píxel vàlids. ",
		minusName: "Resta",
		minusSnip: "Resta el valor del segon ràster d'entrada del valor del primer ràster d'entrada píxel per píxel.",
		minusDesc: "La funció Resta sostreu el valor del segon ràster d'entrada del valor del primer ràster d'entrada píxel per píxel.",
		modName: "Mòdul",
		modSnip: "Cerca la resta (mòdul) del primer ràster quan es divideix pel segon ràster cel·la per cel·la.",
		modDesc: "La funció Mòdul cerca la resta (mòdul) del primer ràster quan es divideix pel segon ràster píxel per píxel. L'ordre de les entrades és important i afecta el resultat de sortida.",
		mosaicRastersName: "Ràsters de mosaic",
		mosaicRastersSnip: "Uneix un conjunt de datasets de ràster per crear un dataset.",
		mosaicRastersDesc: "La funció Ràsters de mosaic crea una imatge de mosaic a partir de diverses imatges. Si hi ha superposició entre les imatges, podeu triar entre diversos mètodes per determinar quines es mostraran.",
		ndviColorizedName: "NDVI en color",
		ndviColorizedSnip: "Crea un dataset multibanda que representa l'estat de la vegetació segons la diferència entre la banda d'infrarojos vermella i les properes.",
		ndviColorizedDesc: "La funció NDVI en color aplica la funció NDVI a la imatge d'entrada i, a continuació, utilitza un mapa de color o una rampa de color per mostrar el resultat.",
		ndviName: "NDVI",
		ndviSnip: "Calcula l'índex de vegetació amb diferència normalitzada (NDVI).",
		ndviDesc: "La funció NDVI crea un dataset d'una banda que representa l'estat de la vegetació segons la diferència entre la banda vermella i la d'infraroig proper.<div><br/>NDVI és un índex estandarditzat que us permet generar una imatge que mostri la verdor, també coneguda com biomassa relativa. Aquest índex aprofita el contrast de les característiques entre dues bandes d'un dataset ràster multiespectral: l'absorció de pigment de clorofil·la de la banda vermella i l'altra reflectivitat del material de les plantes de la banda d'infraroig proper (NIR). Els valors d'NDVI extremadament baixos o negatius representen les àrees sense res de vegetació, com ara núvols, aigua o neu. Els valors molt baixos representen àrees sense vegetació o amb vegetació escassa, com ara ciment, roques o sòl nu. Els valors moderats representen zones d'arbustos i prats. Els valors alts representen àrees forestals i vegetació abundant.</div>",
		negateName: "Canvi de signe",
		negateSnip: "Canvia el signe (multiplica per -1) dels valors de cel·la del ràster d'entrada cel·la per cel·la.",
		negateDesc: "La funció Canvi de signe canvia el signe (multiplica per -1) dels valors de píxel del ràster d'entrada en un píxel ",
		nibbleName: "Nibble",
		nibbleSnip: "Substitueix les cel·les d'un ràster corresponent a una màscara amb els valors dels veïns més propers.",
		nibbleDesc: "La funció Nibble global permet assignar a les àrees seleccionades d'un ràster el valor del veí més proper. Resulta útil per editar les àrees d'un ràster on les dades poden ser errònies.",
		notEqualName: "No igual",
		notEqualSnip: "Realitza una operació de desigualtat relacional en dues entrades cel·la per cel·la. Retorna el valor 1 per a les cel·les on el primer ràster no és igual que el segon i el valor 0 on sí que ho és.",
		notEqualDesc: "La funció realitza una operació de desigualtat relacional en dues entrades píxel per píxel. Retorna un valor d'1 per als píxels on el primer ràster no és igual que el segon i un valor de 0 per als píxels on el primer ràster és igual que el segon.",
		pansharpeningName: "Enfocament pancromàtic",
		pansharpeningSnip: "Millora de manera artificial la resolució espacial d'una imatge multibanda fusionant-la amb una imatge pancromàtica de resolució superior.",
		pansharpeningDesc: "La funció Enfocament pancromàtic utilitza una imatge pancromàtica d'alta resolució o una banda de ràster per fusionar-la amb un dataset ràster multibanda de baixa resolució a fi d'augmentar la resolució espacial de la imatge multibanda.<div><br/>La finalitat de l'enfocament pancromàtic és crear una imatge visual de qualitat superior. Atès que les tècniques alteren la radiometria i les característiques espectrals de les imatges multibanda, les imatges amb enfocament pancromàtic s'han d'utilitzar amb precaució per a les finalitats de teledetecció analítica.</div>",
		pathAllocationName: "Assignació de distància de ruta",
		pathAllocationSnip: "La funció Assignació de distància de ruta calcula l'origen més proper per a cada cel·la en funció del menor cost acumulatiu sobre una superfície de cost, alhora que té en compte la distància de superfície i els factors de cost horitzontal i vertical.",
		pathAllocationDesc: "La funció Assignació de distància de ruta calcula l'origen més proper per a cada cel·la en funció del menor cost acumulatiu sobre una superfície de cost, alhora que té en compte la distància de superfície i els factors de cost horitzontal i vertical.",
		pathBackLinkName: "Enllaç de menor distància de ruta",
		pathBackLinkSnip: "Defineix el veí que és la cel·la següent a la ruta de menor cost acumulatiu a l'origen de menor cost, alhora que té en compte la distància de superfície, juntament amb els factors de cost horitzontal i vertical.",
		pathBackLinkDesc: "La funció Enllaç de menor distància de ruta identifica la direccionalitat del veí que és la cel·la següent a la ruta de menor cost acumulatiu a l'origen més proper, alhora que té en compte la distància de superfície i els factors de cost horitzontal i vertical.",
		pathDistanceName: "Distància de ruta",
		pathDistanceSnip: "Calcula, per a cada cel·la, la distància de menor cost acumulatiu des de o fins a l'origen de menor cost, alhora que té en compte la distància de superfície, juntament amb els factors de cost horitzontal i vertical.",
		pathDistanceDesc: "La funció Distància de ruta calcula, per a cada cel·la, la distància de menor cost acumulatiu a l'origen més proper, alhora que té en compte la distància de superfície i els factors de cost horitzontal i vertical.",
		plusName: "Plus",
		plusSnip: "Afegeix (suma) els valors de dos ràsters cel·la per cel·la.",
		plusDesc: "La funció Suma afegeix els valors de dos ràsters píxel per píxel.",
		powerName: "Potència",
		powerSnip: "Eleva els valors de cel·la d'un ràster a la potència dels valors que es troben en un altre ràster.",
		powerDesc: "La funció Potència eleva els valors de píxel d'un ràster a la potència dels valors que es troben en un altre ràster.",
		radarCalibrationName: "Calibratge de radar",
		radarCalibrationSnip: "Converteix la retrodispersió de RADARSAT-2.",
		radarCalibrationDesc: "Aquesta funció es pot utilitzar per calibrar imatges RADARSDAT-2 en un dataset de mosaic o com un producte ràster. El calibratge es realitza en imatges de radar perquè els valors de píxel siguin una representació real de la retrodispersió de radar.",
		rasterInfoName: "Informació del ràster",
		rasterInfoSnip: "Modifica les propietats del ràster, com ara la profunditat de bits, el valor NoData, la mida de la cel·la, etc.",
		rasterInfoDesc: "La funció Informació del ràster obre un quadre de diàleg amb propietats del dataset ràster, com ara el nombre de columnes i files, el nombre de bandes, el tipus de píxel, l'extensió i la referència espacial. Per editar aquestes propietats, podeu seleccionar un dataset ràster per utilitzar-lo com una plantilla. ",
		rasterizeAttributesName: "Rasteritza atributs",
		rasterizeAttributesSnip: "Enriqueix un ràster mitjançant bandes addicionals derivades dels valors dels atributs especificats d'una taula externa o un servei d'entitats.",
		rasterizeAttributesDesc: "La funció Rasteritza atributs enriqueix un ràster mitjançant l'addició de bandes derivades dels valors dels atributs especificats d'una taula externa o un servei d'entitats. També podeu especificar un ràster de zona i l'atribut d'ID de zona associat per activar la cerca basada en la regió.",
		rasterizeFeatureClassName: "Rasteritza entitats",
		rasterizeFeatureClassSnip: "Converteix entitats en ràsters.",
		rasterizeFeatureClassDesc: "Aquesta funció converteix les dades de les classes d'entitats de polígons, polilínies i punts en una capa de ràster.<div><br/>S'assignen valors de píxel a les entitats basats en el valor del camp OBJECTID de les entitats (per defecte). De manera opcional, els valors de píxel es poden basar en un camp de valor definit per l'usuari de la taula d'atributs de l'entitat d'entrada.</div>",
		recastName: "Reformula",
		recastSnip: "Modifica els paràmetres d'una cadena de funcions en un dataset de mosaic o un servei d'imatges. S'acostuma a utilitzar amb datasets LAS per evitar haver de crear un dataset de mosaic independent per a les diferents representacions del terreny.",
		recastDesc: "La funció Reformula s'utilitza per modificar de manera dinàmica el paràmetre de funció utilitzat en un dataset de mosaic o un servei d'imatges sense mantenir els canvis físicament.",
		regionGroupName: "Grup de regions",
		regionGroupSnip: "Per a cada cel·la de la sortida, es registra la identitat de la regió connectada a la qual pertany la cel·la. S'assigna un nombre únic a cada regió.",
		regionGroupDesc: "La funció Grup de regions global registra, per a cada cel·la de la sortida, la identitat de la regió connectada a la qual pertany la cel·la. S'assigna un nombre únic a cada regió.<div><br/>La primera regió escanejada rep el valor u, la segona rep el dos i així successivament, fins que totes les regions tenen un valor assignat. L'escaneig es mou d'esquerra a dreta i de dalt a baix. Els valors assignats a les zones de sortida es basen en el moment en què es troben al procés d'escaneig.</div>",
		regionGrowName: "Creixement de regió",
		regionGrowSnip: "Fa créixer les regions des dels punts d'origen.",
		regionGrowDesc: "La funció Creixement de regió agrupa els píxels veïns en funció del radi especificat des del punt d'origen. S'assigna un valor d'emplenament especificat al grup de píxels o l'objecte.",
		remapName: "Nova representació cartogràfica",
		remapSnip: "Canvia els valors de píxel mitjançant l'assignació de nous valors a intervals de valors de píxel o bé a través d'una taula externa.",
		remapDesc: "La funció Nova representació cartogràfica permet canviar o tornar a classificar els valors de píxel de les dades del ràster. Aquesta acció es pot realitzar especificant un interval de valors de píxel per assignar a un valor de píxel de sortida, o bé mitjançant una taula per assignar els valors de píxel a un valor de píxel de sortida.",
		reprojectName: "Reprojecta",
		reprojectSnip: "Modifica la projecció d'un dataset ràster, un dataset de mosaic o un element de ràster d'un dataset de mosaic. També pot remostrejar les dades a una mida de cel·la nova i definir un origen.",
		reprojectDesc: "La funció Reprojecta modifica la projecció d'un dataset ràster, un dataset de mosaic o un element de ràster d'un dataset de mosaic. També pot remostrejar les dades a una mida de cel·la nova i definir un origen.<div><br/>La funció Reprojecta es pot utilitzar en crear una memòria cau a partir d'un dataset ràster o de mosaic que no es troba a la projecció necessària. Per exemple, en crear un servei d'imatges emmagatzemat a la memòria cau que podria estar integrat per altres amb altres serveis emmagatzemats a la memòria cau, és important que tots estiguin a la mateixa projecció. Acostuma a ser una projecció del Web Mercator. Atès que el dataset de mosaic no es pot reprojectar, podeu realitzar una de les accions següents: crear un dataset de mosaic de referència a partir del vostre dataset de mosaic de la projecció necessària o afegir la funció Reprojecta a la cadena de funcions del dataset de mosaic. Un altre exemple utilitza aquesta funció a l'element de ràster d'un dataset de mosaic. Quan utilitzeu la funció Ràster emmagatzemat a la memòria cau, podeu inserir la funció Reprojecta perquè la memòria cau es creï a la projecció nova. Els elements de ràster d'un dataset de mosaic es poden emmagatzemar a la memòria cau quan el processament és intens i intenteu publicar un servei d'imatges d'alta velocitat, sense emmagatzemar tot el servei d'imatges a la memòria cau.</div>",
		resampleName: "Remostreja",
		resampleSnip: "Canvia la mida de la cel·la d'un ràster.",
		resampleDesc: "La funció Remostreja canvia la mida de la cel·la, el tipus de remostreig o ambdues coses.<div><br/>La funció Remostreja només s'ha d'utilitzar per a requisits de càlcul específics; per exemple, quan calculeu la magnitud-direcció del vent o el corrent que requereix el remostreig de la resolució d'origen.</div>",
		roundDownName: "Arrodoniment a la baixa",
		roundDownSnip: "Retorna el següent valor enter més baix, representat com un valor de punt flotant, de cada cel·la d'un ràster.",
		roundDownDesc: "La funció Arrodoniment a la baixa retorna el següent enter més baix, com un valor de punt flotant, de cada píxel d'un ràster.",
		roundUpName: "Arrodoniment a l'alça",
		roundUpSnip: "Retorna el següent valor enter més alt, representat com un valor de punt flotant, de cada cel·la d'un ràster.",
		roundUpDesc: "La funció Arrodoniment a l'alça retorna el següent enter més alt, com un valor de punt flotant, de cada píxel d'un ràster.",
		segmentMeanShiftName: "Desplaçament mitjà de segment",
		segmentMeanShiftSnip: "Agrupa els píxels veïns amb característiques espectrals similars en segments.",
		segmentMeanShiftDesc: "Aquesta funció identifica objectes, entitats o segments de les imatges mitjançant l'agrupació dels píxels adjacents que tenen característiques espectrals i espacials similars. Podeu controlar la quantitat de suavització espacial i espectral per ajudar a derivar entitats d'interès.",
		s1RadiometricCalibrationName: "Calibratge radiomètric de Sentinel-1",
		s1RadiometricCalibrationSnip: "Realitza diferents tipus de calibratge radiomètric a les dades de Sentinel-1.",
		s1RadiometricCalibrationDesc: "Aquesta funció de ràster realitza tres calibratges diferents per als datasets de Sentinel 1, inclosos beta zero i gamma, i genera el dataset calibrat. L'objectiu del calibratge de SAR és proporcionar imatges en què els valors de píxel es pugui relacionar directament a la retrodispersió del radar de l'escena. Malgrat que les imatges de SAR sense calibrar són suficients per a un ús qualitatiu, les imatges de SAR calibrades són essencials per a l'ús quantitatiu de les dades de SAR.<div><br/>El processament habitual de les dades de SAR, que produeix imatges de nivell 1, no inclou correccions radiomètriques i es manté un biaix radiomètric considerable. Per tant, és necessari aplicar la correcció radiomètrica a les imatges de SAR perquè els valors de píxel de les imatges representin realment la retrodispersió del radar de la superfície reflectora. La correcció radiomètrica també és necessària per a la comparació de les imatges de SAR adquirides amb sensors diferents o adquirides des del mateix sensor en moments diferents, adquirides en modes diferents o processades per processadors diferents.</div>",
		s1ThermalNoiseRemovalName: "Eliminació de soroll tèrmic de Sentinel-1",
		s1ThermalNoiseRemovalSnip: "Elimina el soroll tèrmic de les dades de Sentinel-1.",
		s1ThermalNoiseRemovalDesc: "La correcció de soroll tèrmic es pot aplicar als productes Single Look Complex (SLC) de nivell 1 i als productes Level-1 Ground Range Detection (GRD) de Sentinel-1 que encara no s'han corregit. L'operador també pot eliminar aquesta correcció d'acord amb les anotacions del producte per tornar a introduir el senyal de soroll que s'ha eliminat per produir el producte original. Les anotacions del producte s'actualitzaran en conseqüència per tornar a aplicar la correcció. ",
		setNullName: "Defineix nuls",
		setNullSnip: "La funció Defineix nuls estableix les ubicacions de cel·la identificades en NoData en funció d'uns criteris especificats. Retorna NoData si una avaluació condicional és certa i retorna el valor especificat per un altre ràster si és falsa.",
		setNullDesc: "La funció Defineix nuls estableix els píxels identificats en NoData, segons els criteris específics. Retorna NoData si una avaluació condicional és certa (1) i retorna el valor especificat al ràster fals si una avaluació condicional és falsa (0). Aquest criteri l'especifica la sortida d'una funció matemàtica lògica, que serà el ràster d'entrada.",
		shadedReliefName: "Relleu ombrejat",
		shadedReliefSnip: "Crea una representació 3D de la superfície multibanda amb codificació de color, tenint en compte la posició relativa del sol per ombrejar la imatge.",
		shadedReliefDesc: "La funció Relleu ombrejat crea una representació 3D en color del terreny mitjançant la fusió de les imatges a partir dels mètodes de codificació d'elevació i ombreig. Aquesta funció utilitza les propietats d'altitud i d'azimut per especificar la posició del sol.<div><br/></div>",
		sinHName: "Sinus hiperbòlic (SinH)",
		sinHSnip: "Calcula el sinus hiperbòlic de les cel·les d'un ràster.",
		sinHDesc: "La funció calcula el sinus hiperbòlic dels píxels d'un ràster.",
		sinName: "Sinus (Sin)",
		sinSnip: "Calcula el sinus de les cel·les d'un ràster.",
		sinDesc: "La funció calcula el sinus dels píxels d'un ràster.",
		slopeName: "Pendent",
		slopeSnip: "Calcula l'índex de canvi d'un valor de píxel respecte als seus veïns.",
		slopeDesc: "Aquesta funció de ràster calcula el pendent, que és l'índex de canvi d'elevació de cada cel·la del model d'elevació digital (DEM). És la primera derivada d'un DEM.<div><br/>Aquesta funció utilitza una funció atan() accelerada. És sis vegades més ràpida i l'error d'aproximació sempre és inferior a 0,3 graus.</div>",
		speckleName: "Pigallat",
		speckleSnip: "Proporciona filtres per eliminar el soroll dels datasets de radar d'obertura sintètica.",
		speckleDesc: "El pigallat és el soroll d'alta freqüència a les dades d'un radar. Les imatges que generen els sistemes de radar d'apertura sintètica (SAR) estan extremadament sotmesos als efectes del pigallat a causa del processament de senyals dispersos i de la interferència d'ones electromagnètiques dispersades des de superfícies o objectes. La funció Pigallat filtra el dataset de radar amb pigallat i suavitza el soroll mentre manté les vores o les entitats precises de la imatge.",
		spectralConversionName: "Conversió espectral",
		spectralConversionSnip: "Aplica una matriu a una imatge multibanda.",
		spectralConversionDesc: "La funció Conversió espectral aplica una matriu a una imatge multibanda per alterar els valors de color de la sortida.<div><br/>Alguns sensors no reben les bandes blaves a causa d'una relació senyal-soroll baixa. Per exemple, es pot utilitzar per convertir una imatge infraroja de colors falsos en una imatge de colors pseudonaturals.</div>",
		squareRootName: "Arrel quadrada",
		squareRootSnip: "Calcula l'arrel quadrada dels valors de cel·la d'un ràster.",
		squareRootDesc: "La funció Arrel quadrada calcula l'arrel quadrada dels valors de píxel d'un ràster.",
		squareName: "Quadrada",
		squareSnip: "Calcula el quadrat dels valors de cel·la d'un ràster.",
		squareDesc: "La funció Quadrat calcula el quadrat dels valors de píxel d'un ràster.",
		statisticsHistogramName: "Estadístiques i histograma",
		statisticsHistogramSnip: "Definiu o associeu les estadístiques i l'histograma.",
		statisticsHistogramDesc: "La funció Estadístiques i histograma s'utilitza per definir les estadístiques i l'histograma d'un ràster. Podeu inserir aquesta funció al final de la cadena de funcions per descriure les estadístiques i l'histograma d'una plantilla de funció de ràster (RFT). Pot ser necessari per controlar la visualització per defecte del resultat del processament, especialment en definir una cadena de funcions que conté moltes funcions.<div><br/>Per definir les estadístiques, podeu escriure els valors o importar-los d'un dataset ràster o un fitxer XML. Els histogrames només es poden definir important un fitxer.</div>",
		statisticsName: "Estadístiques",
		statisticsSnip: "Calcula les estadístiques focals de cada píxel d'una imatge en funció del veïnat focal definit.",
		statisticsDesc: "La funció Estadístiques calcula les estadístiques focals de cada píxel d'una imatge en funció del veïnat focal definit.<div><br/>La funció Estadístiques es pot utilitzar per emplenar línies no contínues en una imatge. Les línies no contínues les acostumen a causar problemes al sensor on no es recopilen dades. Això ha passat en sensors com ara l'Enhanced Thematic Mapper Plus (ETM+) de Landsat 7. Aquestes dades que falten provoquen problemes a l'anàlisi i també en l'observació de les imatges. Hi ha poca cosa a fer quan s'utilitzen les imatges per a l'anàlisi; això no obstant, si hi ha una imatge superposada, es pot utilitzar en lloc del contingut que falta. El mateix es pot fer si les imatges s'utilitzen per a la visualització. Però no sempre hi ha una imatge addicional per emplenar el contingut que falta i, aleshores, s'ha de derivar de les dades existents.</div>",
		streamLinkName: "Enllaç de corrent",
		streamLinkSnip: "Assigna valors únics a les seccions d'una xarxa de ràster lineal entre interseccions.",
		streamLinkDesc: "La funció Enllaç de corrent global assigna valors únics a les seccions d'una xarxa de ràster lineal entre interseccions.<div><br/>Els enllaços són les seccions d'un canal de corrent que connecta dos encreuaments successius, un encreuament i la sortida o un encreuament i la divisió de drenatge. En el camp de la hidrologia, aquests segments de corrent s'anomenen cursos. Un encreuament es relaciona amb un punt de fluïdesa i ajuda de delinear el límit de la subconca de la conca hidrogràfica o del drenatge.</div>",
		stretchName: "Estira",
		stretchSnip: "Ajusta l'interval de valors que es mostra per millorar una imatge. Això no altera els valors de píxel subjacents. Si el valor d'un píxel es troba fora de l'interval especificat, es mostrarà com el valor mínim o màxim.",
		stretchDesc: "La funció Estira modifica les propietats d'una imatge per millorar-la, com ara les de brillantor, contrast i gamma, mitjançant diversos tipus d'extensió. Aquesta funció utilitza les estadístiques dels ràsters del dataset de mosaic; per tant, si la utilitzeu, heu d'assegurar-vos que s'hagin calculat les estadístiques.<div><br/>El tipus d'extensió defineix una extensió d'histograma que s'aplicarà als ràsters per millorar-ne l'aparença. L'extensió millora l'aparença de les dades, ja que expandeix els valors de píxel en un histograma a partir dels valors mínim i màxim definits per la seva profunditat de bits. </div>",
		swathName: "Dallada",
		swathSnip: "Realitza la interpolació des de quadrícules o dades de dallada irregulars.",
		swathDesc: "Alguns datasets de netCDF o HDF emmagatzemen la seva geolocalització com a matrius amb espais irregulars. En afegir aquests datasets a un dataset de mosaic, la funció Dallada pren les dades quadriculades irregulars i les torna a mostrejar perquè cada píxel tingui una mida uniforme i sigui quadrat.<div><br/>En afegir variables de netCDF o HDF a un dataset de mosaic, es verificarà automàticament si les dades s'han disposat a la matriu correctament. En cas contrari, la funció Dallada s'aplica automàticament per convertir el ràster irregular en punts i, a continuació, en un ràster quadriculat regular. Podeu canviar el mètode d'interpolació i la mida de la cel·la que s'utilitzen a la funció de ràster Dallada. En el cas de les dades de ràster amb espais regulars, no s'aplicarà cap interpolació i les dades es llegiran tal qual.</div>",
		tanHName: "Tangent hiperbòlica (TanH)",
		tanHSnip: "Calcula la tangent hiperbòlica de les cel·les d'un ràster.",
		tanHDesc: "La funció calcula la tangent hiperbòlica dels píxels d'un ràster.",
		tanName: "Tangent (Tan)",
		tanSnip: "Calcula la tangent de les cel·les d'un ràster.",
		tanDesc: "La funció calcula la tangent dels píxels d'un ràster. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Calcula els nivells de vegetació, humitat i brillantor. Aquesta tècnica depèn de coeficients que s'han de calcular específicament per a un sensor.",
		tasseledCapDesc: "La transformació Tasseled Cap (Kauth-Thomas) s'ha dissenyat per analitzar i assignar fenomenologia de la vegetació i canvis de desenvolupament urbà a través de diversos sistemes de sensors satel·litals. Es coneix com a transformació Tasseled Cap a causa de la forma de la distribució gràfica de les dades. La transformació va proporcionar una lògica per als patrons trobats a les dades MSS Landsat de camps agrícoles com una funció del cicle de vida del cultiu. Essencialment, a mesura que els cultius creixen des de la llavor fins a la maduresa, hi ha un augment net de l'infraroig vermell i una reducció de la reflectància vermella en base al color del sòl<div><br/>La utilitat d'aquesta transformació s'ha ampliat des de la supervisió dels cultius fins a l'anàlisi i l'assignació de vegetació per donar suport a una àmplia varietat d'aplicacions, com ara la silvicultura, la gestió de la vegetació industrial, la representació cartogràfica i la gestió dels ecosistemes, l'inventari i el control de l'aïllament del carboni i els crèdits, el desenvolupament urbà, etc. També s'ha ampliat de la compatibilitat amb MSS Landsat per incloure altres sistemes de satèl·lit populars, com ara Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 i els sensors multiespectrals RapidEye.</div>",
		timesName: "Multiplicació",
		timesSnip: "Multiplica els valors de dos ràsters cel·la per cel·la.",
		timesDesc: "La funció Multiplicació multiplica els valors de dos ràsters píxel per píxel.",
		transposeBitsName: "Transposa els bits",
		transposeBitsSnip: "Desempaqueta els bits del píxel d'entrada i els assigna als bits especificats del píxel de sortida. La finalitat d'aquesta funció és manipular els bits d'un parell d'entrades, com ara els productes de banda de qualitat de Landsat 8.",
		transposeBitsDesc: "La funció Transposa els bits desempaqueta els bits del píxel d'entrada i els assigna als bits especificats del píxel de sortida. La finalitat d'aquesta funció és manipular els bits d'un parell d'entrades, com ara els productes de banda de qualitat de Landsat 8.",
		unitConversionName: "Conversió d'unitats",
		unitConversionSnip: "Canvia els valors d'una unitat de mesura a una altra.",
		unitConversionDesc: "Aquesta funció converteix els píxels d'una unitat a una altra. Admet la conversió de distància, velocitat i temperatura.",
		vectorFieldName: "Camp vectorial",
		vectorFieldSnip: "Mostra els datasets amb els valors de magnitud (u) i direcció (v) com fletxes on la magnitud es representa per la mida de la fletxa i la direcció, pel seu angle.",
		vectorFieldDesc: "La funció Camp vectorial s'utilitza per compondre i convertir dos ràsters en un ràster de dues bandes, que sigui del tipus de dades magnitud-direcció o U-V.<div><br/>De vegades, ens referim al valor U com a velocitat zonal i al valor V, com a velocitat meridional.</div>",
		viewshed2Name: "Conca visual",
		viewshed2Snip: "Determina les ubicacions en una superfície de ràster que són visibles per a un conjunt d'entitats d'observador mitjançant mètodes geodèsics.",
		viewshed2Desc: "La funció Conca visual determina les ubicacions en una superfície de ràster que són visibles per a un conjunt d'entitats d'observador mitjançant mètodes geodèsics<div><br/>La visibilitat de cada centre del píxel ve determinada per una prova de línia de visió entre l'objectiu i cada observador. Si un observador pot veure l'objectiu al centre del píxel, el píxel es considera visible. Aquesta eina sempre considera la curvatura de la Terra quan es determina la visibilitat.</div>",
		watershedName: "Conca hidrogràfica",
		watershedSnip: "Determina l'àrea de contribució sobre un conjunt de cel·les d'un ràster",
		watershedDesc: "La funció Conca hidrogràfica global determina l'àrea de contribució sobre un conjunt de píxels d'un ràster. Les conques hidrogràfiques es delineen a partir d'un ràster de direcció del flux que identifica la direcció del flux de cada píxel.",
		weightedOverlayName: "Superposició ponderada",
		weightedOverlaySnip: "Superposa diversos ràsters mitjançant una escala de mesura comuna i pondera cadascun segons la seva importància.",
		weightedOverlayDesc: "Aquesta funció us permet superposar diversos ràsters mitjançant una escala de mesura comuna i pondera cadascun segons la seva importància.",
		weightedSumName: "Suma ponderada",
		weightedSumSnip: "Pondera i afegeix una matriu de ràsters cel·la per cel·la.",
		weightedSumDesc: "La funció Suma ponderada us permet superposar diversos ràsters. Multiplica cadascun d'aquests ràsters pel pes especificat i fa la suma de tots els valors.",
		windchillName: "Sensació tèrmica",
		windchillSnip: "Combina la temperatura ambient de l'aire amb la velocitat del vent per calcular el factor de sensació tèrmica.",
		windchillDesc: "La funció Sensació tèrmica resulta útil per identificar condicions hivernals perilloses que, en funció del temps d'exposició als elements, pot produir congelació o fins i tot hipotèrmia. La sensació tèrmica és una manera de mesurar el fred que sent una persona tenint en compte el vent quan les temperatures ja són fredes. Com més alta sigui la velocitat del vent, més ràpida serà la pèrdua de calor i més fred sentirà la persona.",
		zonalRemapName: "Nova representació cartogràfica zonal",
		zonalRemapSnip: "Feu una nova representació cartogràfica dels píxels d'un ràster segons les zones definides en un altre ràster i de l'assignació del valor dependent de la zona definit en una taula.",
		zonalRemapDesc: "Aquesta funció us permet fer una nova representació cartogràfica dels píxels d'un ràster segons les zones definides en un altre ràster i de l'assignació del valor dependent de la zona definit en una taula.",
		zonalStatisticsName: "Estadístiques zonals",
		zonalStatisticsSnip: "Calcula estadístiques sobre els valors d'un ràster dins de les zones d'un altre dataset.",
		zonalStatisticsDesc: "La funció calcula estadístiques sobre els valors d'un ràster dins de les zones d'un altre dataset. Una zona es defineix com totes les àrees de l'entrada que tenen el mateix valor. No és necessari que aquestes àrees siguin contigües. Si ambdues entrades de zona i valor són ràsters de la mateixa resolució, s'utilitzaran directament. Si les resolucions són diferents, s'aplica un remostreig intern per fer que les resolucions coincideixin abans de realitzar l'operació zonal.",
		flowLengthName: "Longitud del flux",
		flowLengthSnip: "Calcula la distància ascendent o descendent, o bé la distància ponderada, juntament amb el recorregut del flux de cada cel·la.",
		flowLengthDesc: "Aquesta és una funció de ràster global. Aquesta funció crea una capa ràster de distància ascendent o descendent, o bé de distància ponderada, juntament amb el recorregut del flux de cada cel·la.<div><br/>Un ús primari de la funció Longitud del flux és el càlcul de la longitud del recorregut del flux més llarg en una conca determinada. Normalment, aquesta mesura s'utilitza per calcular el temps de concentració d'una conca. El càlcul es fa amb l'opció Ascendent. La funció també es pot utilitzar per crear diagrames de distància-àrea d'esdeveniments de cabal i precipitació hipotètics mitjançant el ràster de ponderació com a impedància per al pendent descendent del moviment.</div>",
		streamOrderName: "Ordre de transmissió",
		streamOrderSnip: "Assigna un ordre numèric als segments d'un ràster que representa les bifurcacions d'una xarxa lineal",
		streamOrderDesc: "Aquesta és una funció de ràster global. Aquesta funció crea una capa ràster que assigna un ordre numèric als segments d'un ràster que representa les bifurcacions d'una xarxa lineal.<div><br/>La sortida de la funció Ordre de transmissió tindrà més qualitat si la capa ràster de transmissió d'entrada i la capa ràster de direcció del flux d'entrada es deriven de la mateixa superfície. Si el ràster de transmissió es deriva d'un dataset de transmissions rasteritzades, pot ser que la sortida no es pugui utilitzar. El motiu serà que la direcció de les cel·les individuals no es correspondrà amb la ubicació de les cel·les de la transmissió. Els resultats de la funció Acumulació de flux es poden utilitzar per crear una xarxa de transmissió de ràster. Per fer-ho, caldrà aplicar un llindar per seleccionar les cel·les amb un flux acumulat alt. Per exemple, les cel·les que tinguin més de 100 cel·les que hi flueixin s'utilitzaran per definir la xarxa de transmissió. Utilitzeu la funció Condicional o Defineix nuls per crear un ràster de xarxa de transmissió on els valors d'acumulació de flux de 100 o més s'adrecin a una, i la resta es deixin en segon terme (NoData). La xarxa de transmissió resultant es pot utilitzar a la funció Ordre de transmissió. Aquesta funció només admet una capa ràster de direcció del flux d'entrada D8. Les direccions del flux es poden crear mitjançant l'eina Direcció del flux i executar-se mitjançant el tipus de direcció del flux per defecte D8.</div>",
		snapPourPointName: "Ajusta el punt de fluïdesa",
		snapPourPointSnip: "Ajusta els punts de fluïdesa a la cel·la amb l'acumulació de flux més alta dins d'una distància especificada",
		snapPourPointDesc: "Aquesta és una funció de ràster global. Aquesta funció ajusta els punts de fluïdesa a la cel·la amb una acumulació de flux més alta dins d'una distància especificada.<div><br/>La funció Ajusta el punt de fluïdesa s'utilitza per garantir la selecció de punts amb un flux acumulat alt en delinear les conques de drenatge mitjançant la funció Conca hidrogràfica. La funció Ajusta el punt de fluïdesa farà una cerca dins d'una distància d'alineació al voltant dels punts de fluïdesa especificats de la cel·la amb el flux acumulat més alt i mourà el punt de fluïdesa a aquesta ubicació. La sortida és una capa ràster d'enter si les ubicacions dels punts de fluïdesa originals s'han ajustat a les ubicacions amb un flux acumulat més alt.</div>",
		sinkName: "Embornal",
		sinkSnip: "Crea un ràster que identifica tots els embornals o les àrees de drenatge intern",
		sinkDesc: "Aquesta és una funció de ràster global. Aquesta funció crea una capa ràster que identifica tots els embornals o les àrees de drenatge intern. Un embornal és una cel·la o un conjunt de cel·la connectades de manera espacial amb una direcció del flux a la qual no es pot assignar un dels vuit valors vàlids d'un ràster de direcció del flux. Això pot passar si totes les cel·les veïnes són més altes que la cel·la de processament o si dues cel·la flueixen d'una a l'altra i creen un bucle de dues cel·les.<div><br/>La funció Embornal només admet una capa ràster de direcció del flux d'entrada D8. Les direccions del flux es poden crear mitjançant l'eina Direcció del flux i executar-se mitjançant el tipus de direcció del flux per defecte D8. La sortida de la funció Embornal és un ràster d'enter, on s'assigna un valor únic a cada embornal. Aquests valors únics tenen un interval entre un i el nombre total d'embornals. Per exemple, si el nombre total d'embornals fos 1000, l'interval de valors únics seria d'1 a 1000.</div>",
		aggregateName: "Agrega",
		aggregateSnip: "Genera una versió de resolució reduïda d'un ràster.",
		aggregateDesc: "La funció Agrega torna a mostrejar un ràster d'entrada amb una resolució més baixa en funció d'una estratègia d'agregació especificada. Cada cel·la de sortida conté la suma, el mínim, el màxim, la mitjana o la mediana de les cel·les d'entrada compreses en l'extensió d'aquesta cel·la.<div><br/>Podeu especificar el factor pel que es multiplicarà la mida de cel·la del ràster d'entrada. Per exemple, un valor de factor de cel·la de 3 tindrà com a resultat una mida de cel·la de sortida tres vegades superior a la del ràster d'entrada. Podeu definir com es gestiona l'extensió de la sortida si el nombre de files o de columnes de la sortida no és un múltiple exacte del factor de cel·la. Per defecte, els límits superior i dret s'expandiran per cobrir una extensió espacial més gran que la del ràster d'entrada per assegurar que es processen totes les cel·les d'entrada. També es poden reduir els límits superior i dret per cobrir una extensió més petita, de manera que el nombre de files i de columnes que es processi sigui un múltiple exacte del factor de cel·la. Podeu definir com s'han de gestionar les cel·les NoData amb el càlcul d'agregació. El mecanisme per defecte és que les cel·les NoData d'entrada que es trobin dins de l'extensió espacial d'una cel·la més gran del ràster de sortida s'ignoraran en determinar el valor de la cel·la de sortida. També podeu especificar que, si hi ha alguna cel·la NoData d'entrada a l'extensió espacial d'una cel·la de sortida, la cel·la serà NoData al ràster de sortida.</div>",
		ccdcName: "Anàlisi de CCDC",
		ccdcSnip: "Avalua els canvis en els valors de píxel al llarg del temps mitjançant l'algoritme Detecció i classificació contínues dels canvis (CCDC) i genera resultats dels models.",
		ccdcDesc: "La funció Anàlisi de CCDC avalua els canvis en els valors de píxel al llarg del temps mitjançant l'algoritme Detecció i classificació contínues dels canvis (CCDC) i genera un ràster multidimensional amb els resultats dels models. Només s'admet juntament amb la funció Detecta els canvis a partir de l'anàlisi de canvis en una plantilla de funció de ràster. Per produir un ràster de sortida, connecteu la funció Anàlisi de CCDC amb la funció Detecta els canvis a partir de l'anàlisi de canvis, deseu-ho com a plantilla de funció de ràster i executeu l'anàlisi de ràster amb la plantilla de funció.<div><br/>Aquesta funció utilitza l'algoritme Detecció i classificació contínues dels canvis (CCDC) per avaluar els canvis en els valors de píxel al llarg del temps per a un conjunt d'imatges. En una sèrie temporal d'imatges òptiques o de derivats d'imatges (per exemple, un NDVI), els valors de píxel poden fluctuar per diversos motius: 1. Canvi estacional: els canvis de valors de píxel reflecteixen els canvis en la vegetació a causa de la variabilitat estacional de la temperatura i les precipitacions. Per exemple, a l'hemisferi nord s'espera una major densitat de vegetació verda a l'estiu que a l'hivern. 2. Canvi gradual: els canvis en els valors de píxel reflecteixen les tendències en la vegetació o l'aigua superficial a causa de la variabilitat climàtica o les pràctiques de gestió del sòl a llarg termini. Per exemple, el sòl nu pot augmentar gradualment en una zona a causa d'una davallada a llarg termini de les precipitacions. 3. Canvi abrupte: els canvis en els valors de píxel poden reflectir canvis en la cobertura del sòl que poden produir-se de sobte a causa de la desforestació, el desenvolupament urbà, desastres naturals, etc. L'algoritme CCDC identifica tots tres tipus de canvis amb l'objectiu principal d'identificar un canvi abrupte. La regressió harmònica i els models de tendència s'ajusten a les dades per estimar un canvi estacional i gradual, i les desviacions sobtades dels models de tendència són indicacions d'un canvi abrupte.<div><br/>L'algoritme CCDC es va dissenyar originalment per a dades del Landsat TM, el Landsat ETM+ i el Landsat OLI de reflectància de la superfície o de temperatura de brillantor. Tanmateix, la funció Detecta els canvis a partir de l'anàlisi de canvis juntament amb aquesta funció detectaran els canvis de les imatges multibanda de qualsevol sensor compatible, així com dels derivats d'imatges d'una banda com ara els índex de banda. Per exemple, podeu dur a terme una detecció contínua de canvis en un ràster d'índex de vegetació amb diferència normalitzada (NDVI), ja que els canvis a l'NDVI poden indicar una desforestació.</div>",
		computeChangeName: "Calcula el canvi",
		computeChangeSnip: "Calcula la diferència entre dos datasets ràster continus o categòrics.",
		computeChangeDesc: "La funció Calcula el canvi es pot utilitzar per enumerar les diferències entre dos ràsters classificats per a l'anàlisi de canvis en la cobertura de sòl, o bé per examinar els canvis entre dos ràsters continus d'una banda com ara l'elevació, la temperatura, la coberta vegetal, etc.",
		detectChangeName: "Detecta els canvis a partir de l'anàlisi de canvis",
		detectChangeSnip: "Genera una capa ràster amb informació sobre els canvis dels píxels mitjançant el ràster d'anàlisi de canvis de sortida.",
		detectChangeDesc: "<div>La funció Detecta els canvis a partir de l'anàlisi de canvis genera una capa ràster amb informació de la data dels canvis dels píxels mitjançant el ràster d'anàlisi de canvis. El ràster d'anàlisi de canvis s'ha de generar amb l'eina Analitza els canvis amb CCDC, l'eina Analitza els canvis amb LandTrendr, la funció de ràster Anàlisi de CCDC o la funció de ràster Anàlisi de LandTrendr.</div><br><div>Aquesta funció de ràster es pot combinar amb la funció de ràster Anàlisi de CCDC o la funció de ràster Anàlisi de LandTrendr en una plantilla de funció de ràster. Per produir un ràster de sortida permanent, connecteu la sortida de les funcions Anàlisi de CCDC o Anàlisi de LandTrendr amb la funció Detecta els canvis a partir de l'anàlisi de canvis, deseu-ho com a plantilla de funció de ràster i executeu l'anàlisi de ràster amb la plantilla.</div><br><div>El paràmetre <strong>Tipus de canvi</strong> indica la informació que es genera. La informació s'extreu del ràster d'anàlisi de canvis. En executar aquesta funció a la sortida de la funció o l'eina de CCDC, podeu triar una d'aquestes opcions:</div><ul><li><strong>Hora de l'últim canvi</strong>: data i hora més recent en què un píxel es va marcar com a canviat.</li><li><strong>Hora del primer canvi</strong>: data i hora més antigues en què el píxel es va marcar com a canviat.</li><li><strong>Hora del canvi més gran</strong>: data i hora en què el canvi calculat era més significant per a un píxel.</li><li> <strong>Nombre de canvis</strong>: nombre total de vegades que el píxel ha canviat.</li></ul><div>En executar aquesta funció a la sortida de la funció o l'eina de LandTrendr, hi ha disponibles aquestes opcions addicionals:</div><ul><li><strong>Temps del canvi més llarg</strong>: data en què un píxel es va marcar com a canviat, al principi o al final del període de canvi més llarg.</li><li><strong>Temps del canvi més curt</strong>: data en què un píxel es va marcar com a canviat, al principi o al final del període de canvi més curt.</li><li><strong>Temps del canvi més ràpid</strong>: data en què un píxel es va marcar com a canviat, al principi o al final del període de canvi més ràpid.</li><li><strong>Temps del canvi més lent</strong>: data en què un píxel es va marcar com a canviat, al principi o al final del període de canvi més lent.</li></ul><div>El ràster de sortida és un ràster multibanda en què cada banda conté informació sobre els canvis en funció del tipus de canvi seleccionat i el nombre màxim de canvis especificat. Per exemple, si <strong>Tipus de canvi</strong> s'ha definit com a <strong>Hora del primer canvi</strong> i <strong>Nombre màxim de canvis</strong> s'ha definit com a 2, la funció calcula les dues primeres dates en què s'han produït canvis a la sèrie temporal de cada píxel. El resultat és un ràster en què la primera banda conté les dates del primer canvi per píxel i la segona banda conté les dates del segon canvi per píxel.</div><br><div>En aplicar aquesta funció a la sortida de les eines de LandTrendr, pots triar si vols extreure la data que marca el principi d'un canvi o el seu final amb el paràmetre <strong>Data del segment</strong>. Per exemple, per entendre com va començar el canvi més recent d'una sèrie temporal, definiu <strong>Tipus de canvi</strong> com a <strong>Hora de l'últim canvi</strong> i <strong>Data del segment</strong> com a <strong>Inici del segment</strong>.</div><br><div>Feu servir els paràmetres de filtratge següents per extreure dates de canvi més concretes del ràster d'anàlisi de canvis:</div><ul><li><strong>Filtra per l'any</strong>: identifiqueu canvis que s'han produït en un període de temps concret, per exemple si cerqueu canvis que s'han produït en un paisatge durant cinc anys de sequera.</li><li><strong>Filtra per la durada</strong>: identifiqueu els canvis que s'han produït durant un interval d'anys especificat, per exemple si només cerqueu els canvis abruptes que han tingut lloc durant 1 o 2 anys. Podeu calcular la durada que us interessi amb la fórmula <strong>any de finalització - any d'inici + 1</strong>. S'inclouran les separacions en les sèries temporals.</li><li><strong>Filtra per la magnitud</strong>: identifiqueu els canvis d'una magnitud especificada, per exemple si només cerqueu grans canvis en l'índex de vegetació NDVI. La magnitud és un valor absolut, de manera que els valors mínims i màxims no poden ser negatius. Per especificar un canvi direccional, feu servir el paràmetre <strong>Direcció del canvi</strong>.</li></ul>",
		distanceAccumulationName: "Acumulació de distància",
		distanceAccumulationSnip: "Calcula la distància acumulada per a cada cel·la als orígens, tenint en compte la distància en línia recta, el cost en pla, la distància de superfície real i els factors de cost horitzontal i vertical.",
		distanceAccumulationDesc: "La funció Acumulació de distància calcula la distància de cada ubicació de l'àrea d'estudi a l'origen més proper o de menor cost. Si a l'entrada només es proporcionen els orígens, es calcula una distància en línia recta a cada ubicació de l'àrea d'estudi. Si com a entrada s'utilitzen tant orígens com barreres, la funció Acumulació de distància calcula la distància en línia recta al voltant de les barreres. Tant per al ràster d'origen com per al ràster de barrera, el valor de fons ha de ser NoData, mentre que els orígens i les barreres es representen amb valors de cel·la vàlids. Els valors vàlids inclouen el zero. <div><br/>Quan es proporciona un ràster de superfície com a entrada, es calcula la distància de superfície real entre les cel·les. Per fer una anàlisi de costos amb la funció Acumulació de distància, es necessita una superfície de cost. Si es proporciona una superfície de cost, el resultat és un ràster de cost en pla acumulat. Quan es proporcionen factors horitzontals i verticals, s'acumula la direccionalitat considerada com a cost. Es poden utilitzar quatre característiques d'origen. Aquestes característiques, que poden ser de l'origen o dels element en moviment de l'origen, es controlen amb paràmetres concrets: 1. Acumulació inicial: defineix el cost inicial abans que comenci el moviment. 2. Acumulació màxima: especifica quin cost pot acumular un origen abans d'arribar al límit. 3. Multiplicador per aplicar als costos: especifica el mode de viatge o la magnitud a l'origen. 4. Direcció del desplaçament: identifica si l'element en moviment comença a l'origen i es mou a ubicacions que no són les d'origen, o bé si comença en ubicacions que no són les d'origen i torna a l'origen.<div><br/>Per defecte, el resultat de l'Acumulació de distància és una banda, que és el ràster d'acumulació de distància. Tanmateix, també es pot crear una segona banda: la banda de direcció inversa. Aquesta banda indica cap a quina direcció s'ha d'anar des de cada ubicació de l'àrea d'estudi per obtenir l'origen de menor cost. Totes dues bandes es necessiten per determinar rutes òptimes a l'àrea d'estudi. Per generar una ruta, primer feu servir la funció Extreu les bandes per extreure el ràster d'acumulació de distància i el ràster de direcció inversa. Utilitzeu aquestes capes com a entrada de la funció Ruta de cost. En aquesta funció, utilitzeu el ràster d'acumulació de distància com a entrada del ràster de cost en pla, i el ràster de direcció inversa com a entrada de ràster d'enllaç de menor cost.</div>",
		distanceAllocationName: "Assignació de distància",
		distanceAllocationSnip: "Calcula l'assignació de distància per a cada cel·la als orígens proporcionats, en funció de la distància en línia recta, el cost en pla, la distància de superfície real i els factors de cost horitzontal i vertical.",
		distanceAllocationDesc: "La funció Assignació de distància calcula a quin origen està assignada cada ubicació de l'àrea d'estudi. Si per a l'entrada només es proporcionen orígens, les ubicacions s'assignen mitjançant una distància en línia recta a l'origen més proper. Si com a entrada s'utilitzen tant orígens com barreres, la funció Assignació de distància calcula la distància en línia recta al voltant de les barreres per determinar a quin origen s'assigna una ubicació. Tant per al ràster d'origen com per al ràster de barrera, el valor de fons ha de ser NoData, mentre que els orígens i les barreres es representen amb valors de cel·la vàlids. Els valors vàlids inclouen el zero.<div><br/>Per fer una anàlisi de costos amb la funció Assignació de distància, es necessita una superfície de cost. Si es proporciona una superfície de cost, el resultat és un ràster d'assignació basat en el cost acumulatiu, no en la distància en línia recta. Quan es proporcionen factors horitzontals i verticals, s'acumula la direccionalitat considerada com a cost. Quan es proporciona un ràster de superfície com a entrada, es calcula la distància de superfície real coberta en passar entre les cel·les quan es determina l'assignació. Es poden utilitzar quatre característiques d'origen. Aquestes característiques, que poden ser de l'origen o dels element en moviment de l'origen, es controlen amb paràmetres concrets: 1. Acumulació inicial: defineix el cost inicial abans que comenci el moviment. 2. Acumulació màxima: especifica quin cost pot acumular un origen abans d'arribar al límit. 3. Multiplicador per aplicar als costos: especifica el mode de viatge o la magnitud a l'origen. 4. Direcció del desplaçament: identifica si l'element en moviment comença a l'origen i es mou a ubicacions que no són les d'origen, o bé si comença en ubicacions que no són les d'origen i torna a l'origen.<div><br/>Per defecte, el resultat de l'Assignació de distància és una banda, que és el ràster d'assignació de distància. Si es marca l'opció booleana Genera una fila i una columna d'origen com a bandes addicionals a la sortida, el resultat serà un ràster multibanda de tres bandes. La primera banda és el ràster d'assignació de distància, la segona banda conté un índex de files i la tercera banda conté un índex de columnes. Aquests índex identifiquen la ubicació de la cel·la d'origen amb la menor distància de cost acumulat. L'índex de fila d'origen i l'índex de columna d'origen es poden utilitzar conjuntament per representar cartogràficament la intensitat. Si consulteu qualsevol ubicació de l'àrea d'estudi a les bandes dos i tres, sabreu la fila i la columna de l'origen de menor cost per a la ubicació.</div>",
		eucBackDirectionName: "Direcció inversa euclidiana",
		eucBackDirectionSnip: "Calcula per a cada cel·la la direcció en graus a la cel·la veïna, a més de la ruta més curta de tornada a l'origen més proper, a la vegada que evita les barreres.",
		eucBackDirectionDesc: "La funció Direcció inversa euclidiana té com a resultat un ràster de punt flotant continu que representa la direcció en graus de tornada a l'origen més proper, a la vegada que evita les barreres, si se n'han proporcionat.<div><br/>Les entrades de la funció Direcció inversa euclidiana són l'origen cap al qual es calcularà la direcció. Com a entrada opcional, es pot proporcionar un ràster que representi les barreres de l'àrea d'estudi. Tant per al ràster d'origen com per al ràster de barrera, el valor de fons ha de ser NoData, mentre que els orígens i les barreres es representen amb valors vàlids. Els valors vàlids inclouen el zero. Per defecte, el càlcul processarà l'extensió combinada d'orígens i barreres, a més de dues files i columnes. Si l'anàlisi només es necessita en una distància especificada dels orígens, es pot utilitzar el paràmetre Distància màxima. La funció Direcció inversa euclidiana admet tant el mètode Pla com el mètode Geodèsic al càlcul. El mètode de càlcul Pla es realitzarà en un terreny pla projectat mitjançant un sistema de coordenades cartesianes 2D. El mètode de càlcul Geodèsic es realitzarà en un el·lipsoide, és a dir, que independentment de la projecció d'entrada i de sortida, els resultats no canviaran.<div><br/>El resultat de la funció Direcció inversa euclidiana es pot utilitzar juntament amb el resultat de la funció Distància euclidiana per determinar les rutes més curtes des de les ubicacions de l'àrea d'estudi fins a l'origen. Tant el resultat de la funció Direcció inversa euclidiana com el resultat de la Distància euclidiana s'utilitzen a la funció Ruta de cost juntament amb les destinacions per generar les rutes més curtes.</div>",
		expandName: "Expandeix",
		expandSnip: "Expandeix les zones seleccionades d'un ràster en un nombre especificat de cel·les.",
		expandDesc: "Amb la funció global Expandeix, podeu generalitzar o simplificar ràsters fent que zones concretes siguin més grans. També podeu controlar la quantitat de generalització que es produirà.<div><br/>Les zones que seleccioneu augmentaran de mida expandint-se a altres zones. Conceptualment, els valors de zona seleccionats es poden veure com a zones en primer pla, mentre que els altres valors continuaran sent zones de fons. Les zones en primer pla es poden expandir a les zones de fons.<div><br/>La quantitat de generalització es pot controlar amb el paràmetre Nombre de cel·les. Per defecte, el valor és 1, cosa que vol dir que les zones seleccionades s'expandiran la quantitat corresponent a la mida d'una cel·la. Per incrementar el grau de generalització, podeu especificar un valor més gran per a aquest paràmetre. Conceptualment, és com executar l'eina les mateixes vegades que el nombre especificat, utilitzant els valors de l'execució anterior com a entrada a la iteració posterior.</div>",
		trendAnalysisName: "Genera la tendència",
		trendAnalysisSnip: "Estima la tendència de cada píxel en una dimensió per a una o diverses variables d'un ràster multidimensional.",
		trendAnalysisDesc: "<div>Aquesta funció es pot fer servir per ajustar les dades al llarg d'una línia de tendència lineal, harmònica o polinòmica, o bé per detectar la tendència amb la prova de Mann-Kendall o estacional de Kendall.</div><br><div>El ràster de tendència de sortida generat amb aquesta funció s'utilitza com a entrada de la funció <strong>Prediu mitjançant la tendència</strong>.</div><br><div>Les proves de Mann-Kendall i estacional de Kendall es fan servir per determinar si hi ha una tendència monòtona a les dades. No són paramètriques, cosa que significa que no donen per fet una distribució concreta de les dades. La prova de Mann-Kendall no considera una correlació de sèrie ni efectes estacionals. Si les dades són estacionals, la prova estacional de Kendall és més adient.</div><br><div>Si l'eina es fa servir per dur a terme una prova de Mann-Kendall o una prova estacional de Kendall, la sortida és un ràster de cinc bandes, tal com s'indica a continuació:</div><ul><li>Banda 1 = pendent de Sen</li><li>Banda 2 = valor p</li><li>Banda 3 = puntuació de Mann-Kendall (S)</li><li>Banda 4 = variància S</li><li>Banda 4 = variància S</li><li>Banda 5 = puntuació Z</li></ul><div>Si les sortides de la prova de Mann-Kendall o Kendall estacional es poden fer servir per determinar quins píxels de la sèrie temporal multidimensional tenen una tendència estadísticament significativa. Podeu fer servir aquesta informació juntament amb l'anàlisi de tendència lineal, harmònica o polinòmica per extreure tendències significatives de la sèrie temporal. Podeu generar una màscara que inclogui els píxels amb valors p significatius, aplicar la màscara al ràster multidimensional i fer servir aquest ràster multidimensional amb màscara com a entrada de l'eina per fer anàlisis de tendència lineal, harmònica o polinòmica.</div><br><div>Hi ha tres opcions de línia de tendència per ajustar una tendència als valors variables d'una dimensió: lineal, polinòmica i harmònica.</div><br><div>Per a l'anàlisi de tendència lineal, la sortida és un ràster de tres bandes, tal com s'indica a continuació:</div><ul><li>Banda 1 = pendent</li><li>Banda 2 = intercepció</li><li>Banda 3 = error quadràtic mitjà (RMSE) o l'error al voltant de la línia de millor ajust</li></ul><div>Per a anàlisis de tendència polinòmica, el nombre de bandes de la sortida depèn de l'ordre polinòmic. L'ajust polinòmic de segon ordre produeix un ràster de quatre bandes, tal com s'indica a continuació:</div><ul><li>Banda 1 = Polynomial_2</li><li>Banda 2 = Polynomial_1</li><li>Banda 3 = Polynomial_0</li><li>Banda 4 = RMSE</li></ul><div>L'ajust polinòmic de tercer ordre produeix un ràster de cinc bandes, tal com s'indica a continuació:</div><ul><li>Banda 1 = Polynomial_3</li><li>Banda 2 = Polynomial_2</li><li>Banda 3 = Polynomial_1</li><li>Banda 4 = Polynomial_0</li><li>Banda 5 = RMSE</li></ul><div>En el cas de les anàlisis de tendència harmònica, el nombre de bandes de la sortida depèn de la freqüència harmònica. Quan la freqüència es defineix com a 1, la sortida és un ràster de cinc bandes, tal com s'indica a continuació:</div><ul><li>Banda 1 = pendent</li><li>Banda 2 = intercepció</li><li>Banda 3 = Harmonic_sin1</li><li>Banda 4 = Harmonic_cos1</li><li>Banda 5 = RMSE</li></ul><div>Quan la freqüència es defineix com a 2, la sortida és un ràster de set bandes, tal com s'indica a continuació:</div><ul><li>Banda 1 = pendent</li><li>Banda 2 = intercepció</li><li>Banda 3 = Harmonic_sin1</li><li>Banda 4 = Harmonic_cos1</li><li>Banda 5 = Harmonic_sin2</li><li>Banda 6 = Harmonic_cos2</li><li>Banda 7 = RMSE</li></ul><div>El paràmetre <strong>Durada del cicle</strong> per a anàlisis de tendència harmònica es fa servir per indicar el nombre i la durada dels cicles que espereu veure a les dades al llarg d'un dia o d'un any. Per exemple, si espereu que les dades passin per dos cicles de variació en un any, la durada del cicle és de 182,5 dies o 0,5 anys. Si heu recopilat dades de temperatura cada tres hores i hi ha un cicle de variació per dia, la durada del cicle és d'un dia.</div><br><div>El paràmetre <strong>Freqüència</strong> per a anàlisis de tendència harmònica es fa servir per descriure el model harmònic a què s'ajustaran les dades. Si la freqüència es defineix com a 1, es farà servir una combinació de lineal i corba harmònica de primer ordre per ajustar el model. Si la freqüència es defineix com a 2, es farà servir una combinació de lineal, corba harmònica de primer ordre i corba harmònica de segon ordre per ajustar les dades. Si la freqüència és 3, a més es farà servir una corba harmònica de tercer ordre per modelar les dades, etc.</div><br><div>Les estadístiques de bondat d'ajust del model es poden generar com a sortides opcionals. L'error quadràtic mitjà (RMSE), l'R quadrat i el valor p del pendent de tendència es poden calcular i simbolitzar. Simbolitzeu la capa ràster de tendència de sortida amb simbologia <strong>RGB</strong> i especifiqueu les estadístiques com a bandes de vermell, verd i blau.</div><br>",
		spectralUnmixingName: "Anàlisi lineal de mescles espectrals",
		spectralUnmixingSnip: "Realitza una classificació per subpíxels i calcula l'abundància fraccionària de diferents tipus de cobertura de sòl de píxels individuals.",
		spectralUnmixingDesc: "La funció Anàlisi lineal de mescles espectrals calcula la cobertura fraccionària de píxels individuals que contenen diversos tipus de cobertura de sòl. Genera una capa multibanda en què cada banda correspon a l'abundància fraccionària de cada classe de cobertura de sòl. Per exemple, la podeu utilitzar per fer una classificació de la cobertura de sòl en una imatge multiespectral per identificar la vegetació fotosintètica, el sòl nu i la vegetació morta o no fotosintètica.<div><br/>L'ordre del ràster multibanda de sortida segueix l'ordre del perfil espectral d'entrada. El nombre de classes no pot superar el nombre de bandes del ràster d'entrada. Per exemple, no podeu extreure informació sobre més de 8 classes d'un ràster de 8 bandes.</div>",
		multidimensionalFilterName: "Filtre multidimensional",
		interpolateRasterByDimensionFunctionName: "Interpola ràster per dimensió",
		interpolateRasterByDimensionFunctionSnip: "Interpola un ràster multidimensional a uns valors de dimensió especificats mitjançant sectors adjacents.",
		interpolateRasterByDimensionFunctionDesc: "<p>Aquesta funció permet calcular valors de píxels per a un sector de dimensió sense definir d'un ràster multidimensional. Per exemple, si teniu un dataset que contingui la temperatura de l'oceà al nivell de superfície i a 100 metres per sota del nivell del mar i voleu calcular la temperatura a 50 metres per sota del nivell del mar, podeu fer servir aquesta funció per obtenir una estimació a aquesta profunditat mitjançant la definició de la dimensió Per valors.</p><p>També podeu obtenir una submostra d'un dataset diari a partir d'un dataset mensual mitjançant la definició de la dimensió Per interval i definint el valor del paràmetre Pas en 1 i el valor del paràmetre Unitat en Dies.</p><p>Feu servir la definició de la dimensió Per ràster de destinació per calcular el valor del ràster de destinació.</p>",
		multidimensionalFilterSnip: "Crea una capa ràster a partir d'un dataset ràster multidimensional o una capa ràster multidimensional segmentant les dades segons les variables i les dimensions definides.",
		multidimensionalFilterDesc: "La funció Filtre multidimensional crea una capa ràster multidimensional filtrant i extraient un subconjunt de variables d'un ràster multidimensional. Per exemple, teniu un dataset multidimensional que conté 30 anys de dades de precipitacions mensuals i només voleu extreure les dades de cada gener per veure com les precipitacions han canviat aquest mes.<div><br/>Utilitzeu el paràmetre Definició de la dimensió per segmentar les dimensions a partir d'un interval, un valor o un interval de valors. Per exemple, si teniu 10 anys de dades de salinitat de l'oceà, recopilades mensualment a cada dos metres de profunditat fins als 500 metres, podeu utilitzar diferents opcions de definició de la dimensió per als casos següents. Cas 1: extraieu les dades de salinitat del mes de gener en un període de 10 anys. Trieu Per valors, definiu Dimensió en StdTime i definiu Valors en Gener. Cas 2: segmenteu les dades de salinitat en un interval de profunditat de 0 a 150 metres. Trieu Per intervals, definiu Dimensió en StdZ i definiu Valor mínim en -150 i Valor màxim en 0. Cas 3: extraieu les dades de salinitat dels primers 10 dies de cada gener en un període de 10 anys. Trieu Per iteració, definiu Dimensió en StdTime, definiu Inici de la primera iteració i Final de la primera iteració en l'inici i el final corresponents al període d'iteració, definiu Pas en 1 i definiu Unitat en Anys.</div>",
		multidimensionalRasterName: "Ráster multidimensional",
		multidimensionalRasterSnip: "Afegeix dades multidimensionals a un mapa com una capa de ràster multidimensional.",
		multidimensionalRasterDesc: "La funció Ràster multidimensional afegeix dades multidimensionals a un mapa com una capa de ràster multidimensional. Aquesta funció és útil en executar fluxos de treball d'anàlisi de ràster amb una cadena de funcions.<div><br/>Entre els datasets ràster multidimensionals admesos hi ha netCDF, GRIB, HDF i CRF d'Esri. Els datasets de mosaic multidimensionals també s'admeten.</div>",
		optimalPathAsRasterName: "Ruta òptima com a ràster",
		optimalPathAsRasterSnip: "Calcula la ruta de menor cost des d'un origen fins a una destinació.",
		optimalPathAsRasterDesc: "Aquesta funció global genera un ràster de sortida que registra la ruta o les rutes òptimes des de les ubicacions seleccionades fins a la cel·la d'origen més propera definida a la superfície de cost acumulatiu, en termes de cost en pla.<div><br/>Normalment s'han d'executar una o diverses de les funcions de cost ponderat (Acumulació de distància o Assignació de distància) abans d'executar la funció Ruta òptima com a ràster per crear l'acumulació de distància d'entrada i els ràsters de direcció inversa. Aquestes són capes ràster d'entrada obligatòries per a la funció Ruta òptima. Els valors de la ruta òptima de sortida representen el nombre de rutes a una ubicació determinada. En molts casos, les rutes segueixen el mateix camí, surten d'un origen i es desvien per anar a diferents destinacions. Per exemple, un valor d'u indica que només hi ha una ruta òptima en una ubicació determinada, mentre que un valor de cinc significa que a la ubicació hi ha cinc rutes òptimes que passen per aquesta cel·la de l'àrea d'estudi.<div><br/>Les dades de destinació d'entrada han de ser una capa ràster. El conjunt de cel·les de destinació consisteix en totes les cel·les del ràster d'entrada que tenen valors vàlids. Les cel·les amb valors NoData no s'inclouen al conjunt. El valor zero es considera una destinació legítima. Un ràster de destinació es pot crear amb eines d'extracció. Si teniu entitats de destinació o d'origen, podeu convertir-les en ràster amb la funció Rasteritza entitats. Utilitzeu el ràster d'acumulació de distància o de direcció inversa com a entrada de ràster a la funció de rasterització. D'aquesta manera, l'entitat es rasteritza amb la mateixa mida de cel·la, la mateixa extensió i la mateixa referència espacial que els altres ràsters que s'inclouran a la funció Ruta òptima com a ràster. La funció Ruta òptima com a ràster també es pot utilitzar per derivar la ruta de menys resistència a un model d'elevació digital (DEM). En aquest cas, utilitzeu el DEM per al ràster d'acumulació de distància d'entrada i la sortida de la funció Direcció del flux per al ràster de direcció inversa.</div>",
		trendName: "Prediu mitjançant la tendència",
		trendSnip: "Calcula una capa ràster multidimensional prevista mitjançant el ràster de tendència de sortida des de la funció Genera la tendència o l'eina de geoprocessament Genera el ràster de tendència.",
		trendDesc: "La funció Prediu mitjançant la tendència calcula una capa ràster multidimensional prevista mitjançant el ràster de tendència de sortida des de la funció Genera la tendència o l'eina de geoprocessament Genera el ràster de tendència.",
		rasterCollectionName: "Processa la col·lecció de ràster",
		rasterCollectionSnip: "Processa cada sector d'un ràster multidimensional o cada element d'un ràster de mosaic. Aquesta funció també pot agregar diversos sectors en un sol sector.",
		rasterCollectionDesc: "La funció Processa la col·lecció de ràster processa cada sector d'un ràster multidimensional o cada element d'un ràster de mosaic. Aquesta funció també pot agregar diversos sectors en un sol sector.<div><br/>Aquesta funció processa cada sector d'un ràster multidimensional o ràster de mosaic amb una plantilla de funció de ràster. Aquesta funció admet les opcions següents: 1. Especificar una plantilla de funció de ràster per a Funció d'element. Per exemple, teniu un dataset de mosaic que conté 20 anys d'imatges del Landsat i voleu calcular l'NDVI de cada escena en una sèrie temporal. Per a Funció d'element, especifiqueu una plantilla de funció de ràster que contingui la funció de ràster de l'NDVI. 2. Especificar una plantilla de funció de ràster per a Funció d'agregació. Per exemple, teniu un ràster multidimensional que conté 10 anys de dades de temperatura diàries i voleu calcular la temperatura màxima de cada any. A Funció d'agregació, especifiqueu una plantilla de funció de ràster que contingui la funció Estadístiques de la cel·la, amb l'operació definida com a Màxim. A Definició de l'agregació, definiu Dimensió en StdTime, definiu Tipus en Paraula clau de l'interval i definiu Interval de paraules clau en Anual. Tingueu en compte que si el dataset de mosaic d'entrada no és multidimensional, la funció d'agregació no respectarà la definició d'agregació. La funció d'agregació agregarà tots els elements o cada grup en un si estan definits a la plantilla de funció d'agregació. Per obtenir més informació sobre l'ús dels grups en un dataset de mosaic, consulteu Utilitzar elements de dataset de mosaic en plantilles de funció de ràster. 3. Especificar una plantilla de funció de ràster per a Funció de processament. La funció o la cadena de funcions d'aquesta plantilla s'utilitza per mostrar el nou ràster processat. Per exemple, especifiqueu una plantilla de funció ràster que contingui la funció Mapa de color per canviar com es mostra la capa ràster processada. Tingueu en compte que si l'entrada és un ràster multidimensional, la funció de processament s'aplica al sector que es mostra actualment. Si l'entrada és una capa de mosaic o un dataset de mosaic, la funció de processament s'aplica al ràster de mosaic amb el mètode Primer per resoldre les superposicions. 3. Especificar les plantilles per a qualsevol combinació de totes tres funcions. Per exemple, teniu un dataset de mosaic que conté imatges del Landsat de sèries temporals i voleu generar una imatge composta amb un NDVI màxim. Per a Funció d'element, especifiqueu una plantilla de funció de ràster que contingui la funció de ràster de l'NDVI. Per a Funció d'agregació, especifiqueu una plantilla de funció de ràster que contingui la funció Estadístiques de la cel·la, amb l'operació definida com a Màxim. Per a Funció de processament, especifiqueu una plantilla de funció de ràster que contingui la funció Mapa de color. Tingueu en compte que l'ordre de la funció de processament segueix l'ordre dels paràmetres d'entrada. Per exemple, Funció d'element es processarà primer.</div>",
		randomName: "Aleatori",
		randomSnip: "Crea un ràster amb valors de píxel aleatoris extrets d'una distribució pseudoaleatòria. S'admeten diverses distribucions i generadors de nombres aleatoris.",
		randomDesc: "La funció Aleatori crea un ràster amb valors de píxel aleatoris que es poden utilitzar a les plantilles de funció de ràster o als datasets de mosaic,.<div><br/>Tot i que moltes funcions s'apliquen a un o diversos ràsters d'entrada, la funció Aleatori no en necessita cap. Això vol dir que funciona més com un dataset de ràster que com una funció, així que cal anar amb compte en afegir-la o eliminar-la de la cadena de funcions.</div>",
		shrinkName: "Redueix",
		shrinkSnip: "Redueix les zones seleccionades en un nombre especificat de cel·les substituint-les amb el valor de la cel·la que és més freqüent al veïnat.",
		shrinkDesc: "Amb la funció global Redueix, podeu generalitzar o simplificar ràsters fent que zones concretes siguin més petites. També podeu controlar la quantitat de generalització que es produirà.<div><br/>Les zones que seleccioneu es reduiran, o en disminuirà la mida, en expandir-s'hi les zones dels voltants. Conceptualment, els valors de zona seleccionats es poden veure com a zones en primer pla, mentre que els altres valors continuaran sent zones de fons. Les cel·les de les zones en primer pla es poden substituir per cel·les de les zones de fons. També es poden substituir petites illes dins d'una zona, que es poden veure com a límits compartits amb la zona.<div><br/>La quantitat de generalització es pot controlar amb el paràmetre Nombre de cel·les. Per defecte, el valor és 1, cosa que vol dir que les zones seleccionades es reduiran la quantitat corresponent a la mida d'una cel·la. Per incrementar el grau de generalització, podeu especificar un valor més gran per a aquest paràmetre. Conceptualment, és com executar l'eina les mateixes vegades que el nombre especificat, utilitzant els valors de l'execució anterior com a entrada a la iteració posterior.</div>",
		trendToRGBName: "Tendència a RGB",
		trendToRGBSnip: "Converteix un ràster de tendència en un ràster de tres bandes (vermell, verd i blau).",
		trendToRGBDesc: "La funció Tendència a RGB converteix un ràster de tendència en un ràster de tres bandes (vermell, verd i blau). El ràster de tendència es genera a partir de la funció de ràster Genera la tendència o la funció de ràster Anàlisi de CCDC.<div><br/>Aquesta funció és útil per visualitzar dades de coeficient del model a partir de la funció Genera la tendència o la funció Anàlisi de CCDC. Totes dues funcions estimen tendències en valors de píxel canviants, però els resultats de les funcions són difícils d'interpretar directament.<div><br/>Com en el cas de moltes funcions de ràster, és possible que hàgiu d'utilitzar l'ajust de marge dinàmic (DRA) per mostrar millor els resultats d'aquesta funció.</div>",
		landTrendrName: "Anàlisi LandTrendr",
		landTrendrSnip: "Avalua canvis en valors de píxels al llarg del temps utilitzant la detecció basada en Landsat de tendències en el mètode de pertorbació i recuperació (LandTrendr) i genera un ràster d’anàlisi de canvis amb els resultats del model.",
		landTrendrDesc: "Aquesta funció de ràster només pot es utilitzar com a entrada a la funció de ràster de Detecta canvi amb anàlisi de canvi. Per generar un resultat de ràster, connecteu la funció Anàlisi de LandTrendr a la funció Detecta canvi amb anàlisi de canvi en una plantilla de funcions de ràster, i utilitzeu la plantilla com a entrada en l’eina de geoprocessament Genera ràster a partir de la funció de ràster. El resultat es un ràster que conté informació respecte al moment en què han canviat el valors dels píxels.<div><br>La finalitat d’aquesta funció de ràster és extreure canvis en una característica observada, de forma que les imatges multidimensionals d’entrada idònies haurien de capturar una observació coherent al llarg del temps i no haurien d’incloure interferències atmosfèriques, núvols o l’ombra dels núvols. La millor pràctica és utilitzar dades que hagin estat normalitzades i puguin ser emmascarades fent servir una banda QA, per exemple, productes Landsat Collection 1 Surface Reflectance amb una màscara de núvols.<div><br>La funció executa una anàlisi sobre una imatge per any, i el nombre de particions anuals ha de ser igual o més gran que el valor especificat en el paràmetre <strong>Minimum Number of Observations</strong>. És recomanable tenir, com a mínim, sis anys de dades.<div><br>Si teniu dades mensuals, setmanals o diàries, és recomanable seleccionar diverses imatges de cada any (preferentment de la mateixa estació de l’any), elimineu els núvols i l’ombra dels núvols, i uniu les imatges per generar una única imatge que capturi bé l’observació. Si es faciliten dades mensuals, setmanals o diàries com a ràster multidimensional d’entrada, la funció identificarà una partició per a l’anàlisi basada en la data més propera a la proporcionada en el paràmetre <strong>Snapping Date</strong>.<div><br>Una característica en un paisatge sovint trigarà temps a recuperar-se d’un canvi no permanent com pot ser un incendi forestal o un plaga d’insectes. Per controlar l’índex de recuperació reconegut pel model, establiu el paràmetre Límit de recuperació. Un segment singular no pot tenir un índex de recuperació més ràpid que 1 / límit de recuperació.<div><br>En un paisatge, la recuperació d’un canvi es pot donar de manera positiva o negativa. Per exemple, quan un paisatge experimenta un pèrdua de boscos, una sèrie temporal de valors d’índex de vegetació mostra una caiguda en els valors d’índex, i la recuperació mostra un increment gradual en valors d’índex de vegetació, o una tendència de recuperació positiva. Especifiqueu la direcció de la tendència de recuperació amb el paràmetre <strong>Recovery Has Increasing Trend</strong>.",
		aggregateMultidimensionalName: "Multidimensional agregat",
		aggregateMultidimensionalSnip: "Combina dades de variables de ràster multidimensional ja existents juntament amb una dimensió.",
		aggregateMultidimensionalDesc: "La funció Agrega multidimensional crea una capa de ràsters multidimensionals combinant dades de variables de ràsters multidimensionals amb una dimensió.<div><br>Utilitzeu el paràmetre <strong>Definició de la dimensió</strong> per filtrar primer les dades d’entrada que voleu agregar. Per exemple, si teniu 30 anys de dades mensuals, però només voleu crear una capa agregada per als primers 15 anys, podeu fer servir el paràmetre <strong>Definició de la dimensió</strong> per especificar els anys que s’han d’incloure a l’anàlisi.<div><br><ul><li>Extreure dades de salinitat per al mes de gener al llarg d’un període de 10 anys. Trieu <strong>Per valors</strong>, definiu <strong>Dimensió</strong> amb el valor <strong>StdTime</strong> i <strong>Valors</strong> amb el valor <strong>Gener</strong>.</li><li>Fragment de dades de salinitat amb un interval de profunditat de 0 a 15 metres. Trieu <strong>Per rangs</strong>, establiu <strong>Dimensió</strong> amb el valor <strong>StdZ</strong>, <strong>Valor mínim</strong> amb el valor <strong>-150</strong> i <strong>Valor màxim</strong> amb el valor <strong>0</strong>.</li><li>Extreure dades de salinitat per als primers 10 dies de cada mes de gener durant un període de 10 anys. Trieu <strong>Per iteració</strong>, definiu <strong>Dimensió</strong> amb el valor <strong>StdTime</strong>, <strong>Inici de la primera iteració</strong> i <strong>Final de la primera iteració</strong> amb l'inici i final corresponents del període d'iteració, <strong>Pas</strong> amb el valor <strong>1</strong> i <strong>Unitat</strong> amb el valor <strong>Anys</strong>.</li></ul><div><br>Utilitzeu els paràmetres <strong>Definició de l'agregació</strong> per triar la dimensió que cal avaluar i l'interval d'agregació mitjançant una paraula clau, un valor o un interval de valors. Per exemple, si teniu 30 anys de dades de temperatura del mar, recopilades diàriament i a cada 5 metres de profunditat fins als 100 metres, podeu utilitzar les diferents opcions d’intervals per als següents escenaris:<div><br><ul><li>Agrega dades de temperatura diària a les dades mensuals, on el resultat és un ràster multidimensional amb 12 particions de temps, i cada partició és l’agregat de cada mes al llarg de tots els anys. Trieu <strong>Paraula clau d'interval</strong> i establiu la paraula clau a <strong>Amb recurrència mensual</strong>.</li><li>Afegiu dades de temperatura diària en dades mensuals, on el resultat és un ràster multidimensional amb 360 particions, o 12 particions de temps per any (30 anys 5 × 12 mesos = 360 particions). Trieu <strong>Paraula clau de l'interval</strong> i definiu la paraula clau <strong>Mensualment</strong>.</li><li>Afegiu dades de temperatura mensuals en intervals de 4 mesos. Trieu <strong>Valor de l'interval</strong>, definiu <strong>Interval de valors</strong> en 4, i definiu <strong>Unitat</strong> en <strong>Mesos</strong>.</li><li>Afegiu les dades de temperatura de 0 a 25 metres, després de 25 a 50 metres i després de 50 a 100 metres. Trieu <strong>Rangs de l'interval</strong> i especifiqueu les profunditats mínima i màxima com a <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Fusionar ràsters",
		mergeRastersSnip: "Combina múltiples conjunts de dades de ràsters espacialment, o entre variables i dimensions.",
		mergeRastersDesc: "Aquesta funció crea un ràster fusionat a partir d’una llista de ràsters. Per exemple, si teniu un conjunt de dades de mosaic que conté 30 anys de dades de precipitació mensual i un altre conjunt de dades amb 10 anys de dades de temperatures mensuals, podeu combinar-les en un ràster multidimensional amb ambdues variables. <div><br>Si els ràsters multidimensionals d’entrada contenen diferent variables, el ràster multidimensional de sortida inclourà totes les variables. <div><br>Si els ràsters multidimensionals d’entrada contenen diferents dimensions o valors de dimensions, el ràster multidimensional de sortida inclourà totes les dimensions i valors de dimensions. <div><br>Si els ràsters multidimensionals d’entrada contenen les mateixes dimensions i variables però diferents extensions espacials, el ràster multidimensional de sortida inclourà les variables i dimensions d’entre les extensions espacials fusionades.<div><br>Aquesta funció també es pot utilitzar quan teniu múltiples ràsters que voleu tractar com a un element únic, com ara calculant les mateixes estadístiques per a tots, o quan es fa equilibri de color, de manera que no necessiteu fer equilibri de color separadament per a cada imatge. Això resulta d’utilitat quan es treballa amb imatges emmagatzemades com a lloses separades degut a limitacions en la mida dels arxius; d’aquesta manera es tractarà les lloses com a part de la mateixa imatge.",
		boundaryCleanName: "Refinament de límits",
		boundaryCleanSnip: "Suavitza els límits entre zones.",
		boundaryCleanDesc: "<p>Aquesta funció generalitza o simplifica els ràsters suavitzant els límits entre zones. Aquesta funció proporciona opcions per controlar com les cel·les de les zones de l'entrada influencien la suavització i la quantitat de suavització que s'aplicarà. Cada cel·la d'entrada s'avalua a partir dels seus vuit veïns immediats.</p><p>El procés de suavització primer ordena les cel·les veïnes amb una prioritat concreta. La prioritat determina quina zona de les cel·les veïnes pot substituir el valor de la cel·la de processament a la sortida.</p><p>La prioritat es pot basar en el valor de les zones o en la mida de les zones. El paràmetre <strong>Tipus d'ordenació</strong> determina el tipus d'ordenació que es farà servir. </p><p>La configuració per defecte <strong>No ho ordenis</strong> avalua la prioritat en funció del valor de les zones. Les cel·les de les zones amb valors més grans tindran més prioritat per expandir-se a zones amb valors més petits.</p><p>La mida o l'àrea total de les zones es pot fer servir per ordenar la prioritat. Amb la configuració <strong>Descendent</strong>, les zones s'ordenen per mida en ordre descendent. Les zones amb àrees totals més grans tindran prioritat per expandir-se a zones amb àrees més petites. Amb la configuració <strong>Ascendent</strong> passa el contrari: les zones amb àrees totals més petites tindran prioritat per expandir-se a zones amb àrees totals més grans.</p><p>La quantitat de suavització es controla amb el paràmetre <strong>Executa l'expansió i la reducció dues vegades</strong>, que determina el nombre de vegades que es durà a terme el procés d'expansió i reducció.</p><p>Si aquesta configuració està desactivada, el procés d'expansió i reducció només es durà a terme una vegada. Si aquesta configuració està activada, el procés d'expansió i de reducció es realitzarà dues vegades, de manera que els límits de les zones se suavitzaran més.</p><p>Si els valors de les vuit cel·les veïnes són iguals que els de la cel·la que es processa, la cel·la de sortida conservarà el valor de la cel·la d'entrada.</p>",
		predictUsingRegressionName: "Prediu mitjançant regressió",
		predictUsingRegressionSnip: "Calcula un ràster predit basat en entrades de dades de ràsters i un model de regressió. El model de regressió és la producció de l'eina de geoprocessament ràster <strong>Train Random Trees Regression Model</strong>",
		predictUsingRegressionDesc: "<p>El model de regressió es defineix en un fitxer de definició de regressió Esri (.ecd). Conté tota la informació per a un conjunt de dades específic o un conjunt de conjunts de dades, a més del model de regressió, i és generat per <strong></strong>l'eina de geoprocessament ràster </p>Train Random Trees Regression Model.<p> L'entrada pot ser una sola banda, una multibanda o un ràster multidimensional o una llista d'aquests tipus. Els tipus de ràsters d’entrada han de ser el mateixos que els entrenats pel model de regressió.</p><ul><li>Quan l’entrada és un ràster multibanda, cada banda es tracta com una variable predictora. Les bandes han d'estar en el mateix ordre que l'entrada multibanda per a l'eina d'entrenament del model de regressió.</li><li>Quan l’entrada és un ràster multidimensional, cada variable es tracta com una variable predictora i la variable ha de ser de banda única i tenir una dimensió de temps. L'ordre i els noms de les variables han de ser els mateixos que els d'entrada quan es va entrenar el model de regressió. La sortida és un ràster multidimensional.</li><li>L'entrada pot ser una llista d'elements. El nombre i l'ordre dels ítems han de coincidir amb l'entrada quan es va entrenar el model de regressió.</li></ul>",
		dimensionalMovingStatisticsName: "Estadístiques mòbils dimensionals",
		dimensionalMovingStatisticsSnip: "Calcula les estadístiques en una finestra mòbil sobre dades multidimensionals en una dimensió especificada.",
		dimensionalMovingStatisticsDesc: "<p>La funció Estadístiques mòbils dimensionals calcula diverses estadístiques en una finestra predefinida per a tots els valors d'una dimensió. Aquesta funció agafa una capa ràster multidimensional com a entrada i crea una capa ràster multidimensional com a sortida que té la mateixa mida dimensional que la capa d'entrada.</p><p>Podeu especificar una dimensió els valors de la qual es tindran en compte durant el càlcul. Per defecte, el càlcul es fa a partir de la primera dimensió no espacial. També podeu especificar una mida de finestra amb els paràmetres Finestra Enrere i Finestra Endavant.</p><p>Quan Tipus d'estadística s'estableix en Percentil, els paràmetres Valor de percentil i Tipus d'interpolació del percentil estan disponibles. Podeu fer servir aquests paràmetres per especificar el percentil que voleu calcular i triar el tipus d'interpolació que voleu fer servir, respectivament. Quan el tipus d'estadístiques s'estableix en Mitjana circular, el paràmetre Valor d'ajust circular està disponible. El valor d'ajust circular s'utilitza per convertir un valor lineal en l'interval d'una mitjana circular determinada.</p>",
		terrainFlattenFunctionName: "Aplana un terreny",
		terrainFlattenFunctionSnip: "Corregeix les dades d'entrada del radar d'obertura sintètica (SAR) per a les distorsions radiomètriques per causa de la topografia.",
		terrainFlattenFunctionDesc: "<p>La funció de ràster Aplana el terreny corregeix les dades d'entrada del radar d'obertura sintètica (SAR) per a les distorsions radiomètriques per causa de la topografia.</p><p>En primer lloc cal calibrar les dades d'entrada del radar en beta zero. Utilitzeu l'eina Aplica calibratge radiomètric per calibrar les dades del radar en beta zero.</p><p>Si el DEM d'entrada no abraça tot el dataset de SAR, l'eina generarà valors NoData per als píxels que quedin fora de l'extensió DEM per a les sortides de gamma zero, sigma zero, àrea de dispersió i distorsió geomètrica. Per a la sortida de la màscara de distorsió geomètrica, l'eina generarà valors indeterminats per als píxels que quedin fora de l'extensió DEM.</p><p>El DEM d'entrada ha de ser al sistema de coordenades geogràfiques WGS 1984 (EPSG:4326).</p>",
		createColorCompositeFunctionName: "Crea una composició de color",
		createColorCompositeFunctionSnip: "Crea un ràster de tres bandes a partir d'un dataset ràster multibanda en el qual cada banda pot utilitzar un càlcul algebraic basat en àlgebra de bandes.",
		createColorCompositeFunctionDesc: "<p>La funció de ràster \"Crea una composició de color\" crea un ràster de tres bandes a partir d'un dataset ràster en el qual cada banda pot utilitzar un càlcul algebraic basat en àlgebra de bandes.</p><p>Quan definiu un algoritme aritmètic de bandes, podeu introduir una fórmula algebraica d'una sola línia per a cada expressió per crear una sortida multibanda. Els operadors admesos són unaris: suma (+), resta (-), multiplicació (*) i divisió (/).</p><p>Si utilitzeu un Id. de banda en una expressió, heu d'especificar el prefix B o b com a prefix del número de banda per tal d'identificar la banda.</p><p>Una de les combinacions de banda que s'utilitza sovint per al radar d'obertura sintètica (SAR) a les unitats lineals és VV per al vermell, VH per al verd i VV/VH per al blau. Si les dades d'entrada són en decibels, la combinació de banda ha de ser VV per al vermell, VH per al verd i VV-VH per al blau.</p>",
		surfaceParametersName: "Paràmetres de superfície",
		surfaceParametersSnip: "Determina els paràmetres d'un ràster de superfície com ara l'aspecte, el pendent i diversos tipus de curvatures mitjançant mètodes geodèsics.",
		surfaceParametersDesc: "<p>La funció Paràmetres de superfície determina els paràmetres d'un ràster de superfície com ara l'aspecte, el pendent i diversos tipus de curvatures mitjançant mètodes geodèsics.</p><p>Aquesta funció té les aplicacions següents:</p><ul><li>Calcular l'aspecte i el pendent mitjançant mètodes geodèsics.</li><li>Calcular diferents tipus de curvatures d'un ràster de superfície d'entrada, per exemple, <strong>Curvatura tangencial (contorn normal)</strong>, que caracteritza la convergència i la divergència topogràfica del flux per la superfície.</li></ul>",
		leastCostCorridorName: "Corredor de menor cost",
		leastCostCorridorSnip: "Calcula la suma de dos ràsters de distància de cost acumulatiu amb l'opció d'aplicar un llindar en funció d'un percentatge o cost acumulatiu.",
		leastCostCorridorDesc: "<p>Els ràsters d'entrada han de ser la sortida de ràsters d'acumulació de distància i de direcció inversa de la funció <strong>Acumulació de distància</strong> o <strong>Assignació de distància</strong>. S'han de basar en la distància de costos i cal que s'utilitzi la mateixa configuració de paràmetres en crear les capes per a cada font. No s'han d'utilitzar paràmetres que depenguin de la direccionalitat (factor horitzontal, factor vertical i direcció del viatge) en crear aquests ràsters.</p><p>Els valors del ràster de corredor de sortida són la suma del cost acumulatiu per arribar a una ubicació determinada amb les mateixes unitats que els ràsters de distància de cost acumulatiu d'entrada.</p><p>Si un valor <strong>Llindar</strong> especificat és superior al cost acumulatiu màxim quan se sumen dos ràsters d'acumulació de distància, el ràster de corredor de sortida cobrirà la mateixa àrea que els ràsters acumulatius d'entrada.</p><p>Si un valor de llindar especificat és inferior al valor mínim del ràster de corredor, es retornarà un missatge d'avís i el ràster de sortida estarà buit.</p><p>El ràster de corredor de sortida pot contenir cel·les amb costos acumulatius lleugerament superiors al valor del llindar. Això es deu als ràsters de direcció inversa que utilitzen cel·les que tenen assignats costos lleugerament superiors al llindar per connectar cel·les desconnectades al corredor.</p>",
		geometricMedianName: "Mitjana geomètrica",
		geometricMedianSnip: "La funció Mediana geomètrica calcula la mediana geomètrica dels píxels en una sèrie temporal d'imatges multibanda.",
		geometricMedianDesc: "<p>Aquesta funció redueix el soroll i els valors atípics en imatges de sèrie temporal calculant un píxel de mediana geomètrica per a cada matriu de píxels de la pila d'imatges. L'algoritme manté les relacions espectrals entre les bandes dels espectres de píxels per poder utilitzar la sortida en anàlisis, com ara índexs de vegetació.</p><p>Els núvols i les ombres s'han d'emmascarar mitjançant la banda de QA del dataset abans d'aplicar aquesta funció.</p><p>Si la imatge d'entrada és un punt flotant, com ara la reflectància de superfície amb valors entre 0 i 1, un valor èpsilon de 0,001 ha de generar resultats de qualitat.</p>"
	},
	rfxArgs: {
		rasterName: "Ràster",
		colorSchemeTypeName: "Tipus d'esquema de colors",
		colormapName: "Mapa de color",
		colormapNameName: "Nom del mapa de color",
		colorRampName: "Rampa de color",
		contrastOffsetName: "Desplaçament del contrast",
		brightnessOffsetName: "Desplaçament de la brillantor",
		methodName: "Mètode",
		bandNamesName: "Noms de banda",
		bandWavelengthsName: "Longituds d'ona de bandes",
		bandIdsName: "ID de banda",
		missingBandActionName: "Falta l'acció de banda",
		conversionParametersName: "Paràmetres de conversió",
		hillshadeTypeName: "Tipus d'ombra",
		azimuthName: "Azimut",
		altitudeName: "Altitud",
		slopeTypeName: "Escala",
		zFactorName: "Factor Z",
		PSPowerName: "Potència de mida de píxel",
		PSZFactorName: "Factor de mida de píxel",
		removeEdgeEffectName: "Deshabilita la interpolació de píxels de vora per defecte",
		fromUnitName: "Des de la unitat",
		toUnitName: "Fins a la unitat",
		rasterTypeName: "Tipus",
		minName: "Sortida mínima",
		maxName: "Sortida màxima",
		minPercentName: "Percentatge de retall mínim",
		maxPercentName: "Percentatge de retall màxim",
		numberOfStandardDeviationName: "Nombre de desviacions estàndard",
		sigmoidStrengthLevelName: "Nivell de resistència sigmoide",
		estimateStatsHistogramName: "Calcula les estadístiques",
		DRAName: "Ajust de marge dinàmic",
		statisticsName: "Estadístiques",
		histogramsName: "Histogrames",
		statisticsHistogramName: "Defineix les estadístiques i l'histograma",
		computeGammaName: "Gamma automàtic",
		useGammaName: "Utilitza el gamma",
		gammaName: "Gamma",
		inputNamesName: "Noms",
		expressionName: "Expressió",
		cellsizeTypeName: "Tipus de mida de cel·la",
		extentTypeName: "Tipus d'extensió",
		classifierDefinitionFileName: "Fitxer de definició d'entrada",
		raster1Name: "Ràster1",
		raster2Name: "Ràster2",
		raster3Name: "Ràster3",
		trueRasterName: "Ràster cert",
		falseRasterName: "Ràster fals",
		noDataInterpretationName: "Interpretació de NoData",
		noDataValuesName: "Valors NoData",
		includedRangesName: "Intervals inclosos",
		curvatureTypeName: "Tipus de curvatura",
		rastersName: "Ràsters",
		attributeTableName: "Taula",
		attributeTableTypeName: "Tipus de taula",
		rowsName: "Nombre de files",
		columnsName: "Nombre de columnes",
		kernelName: "Nucli",
		mirrorEdgesName: "Vores mirall",
		influencesName: "Influències",
		fieldsName: "Camps",
		remapsName: "Taula de nova representació geogràfica",
		evalFromName: "Escala d'avaluació inicial",
		evalToName: "Escala d'avaluació final",
		weightsName: "Pesos",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "Radi IDW d'interval curt",
		maxVoidWidthName: "Amplada buida màxima",
		sigmaGaussianName: "Suavització adaptativa",
		contourTypeName: "Tipus de corba de nivell",
		zBaseName: "Base Z",
		numberOfContoursName: "Nombre de corbes de nivell",
		contourIntervalName: "Interval de corbes de nivell",
		nthContourLineInBoldName: "Línia de corba de nivell N en negreta",
		featureClassName: "Entitats d'entrada",
		classIndexFieldName: "Camp",
		resolveOverlapMethodName: "Mètode de resolució de superposició",
		resamplingTypeName: "Tipus de mostreig nou",
		inputCellsizeName: "Mida de cel·la d'entrada",
		outputCellsizeName: "Mida de cel·la de sortida",
		pointFeatureClassName: "Punt d'origen",
		maxGrowthRadiusFieldName: "Camp del radi de creixement màxim",
		similarityThresholdFieldName: "Camp del llindar de similitud",
		fillValueFieldName: "Camp del valor d'emplenament",
		spectralDetailName: "Detall espectral [1..20]",
		spatialDetailName: "Detall espacial [1..20]",
		minNumPixelsPerSegmentName: "Mida de segment mínima en píxels",
		boundariesOnlyName: "Només límits de segment",
		statisticsTypeName: "Tipus d'estadístiques",
		fillNoDataOnlyName: "Només emplenar píxels NoData",
		inputDataTypeName: "Tipus de dades d'entrada",
		angleReferenceSystemName: "Sistema de referència d'angles",
		outputDataTypeName: "Tipus de dades de sortida",
		inputSamplePointFeatureClassName: "Mostres d'entrada",
		valueFieldName: "Camp de valor",
		rasterInfoName: "Informació del ràster",
		interpolationMethodName: "Mètode d'interpolació",
		radiusName: "Radi",
		radianceGainValuesName: "Guany de radiància",
		radianceBiasValuesName: "Biaix de radiància",
		reflectedGainValuesName: "Guany de reflectància",
		reflectedBiasValuesName: "Biaix de reflectància",
		sunElevationName: "Elevació del sol (graus)",
		albedoName: "Albedo",
		scaleFactorName: "Factor d'escala",
		offsetName: "Desplaçament",
		thresholdTypeName: "Tipus de llindar",
		thresholdsName: "Llindars",
		undefinedClassName: "Classe sense definir",
		minValueName: "Mín.",
		maxValueName: "Màx.",
		operationName: "Operació",
		clippingTypeName: "Tipus de retall",
		clippingGeometryName: "Geometria/ràster de retall",
		extentName: "Extensió de sortida",
		useInputFeatureGeometryName: "Utilitza entitats d'entrada per retallar la geometria",
		remapDefinitionTypeName: "Tipus de definició de nova representació geogràfica",
		inputRangeName: "Intervals d'entrada",
		outputValuesName: "Valors de sortida",
		noDataRangeName: "Intervals NoData",
		inputFieldName: "Camp d'entrada",
		outputFieldName: "Camp de sortida",
		inputMaxFieldName: "Camp d'entrada màx. (opcional)",
		remapTableTypeName: "Tipus de taula de nova representació geogràfica",
		allowUnmatchedName: "Permet valors de píxel sense coincidència",
		changeMissingValuesToNoDataName: "Canvia els valors que falten a NoData",
		visibleBandIDName: "ID de banda visible",
		infraredBandIDName: "ID de banda infraroja",
		scientificOutputName: "Sortida científica",
		bandIndexesName: "Índexs de banda",
		constantName: "Constant",
		weightName: "Pes",
		minimumName: "Mínim",
		maximumName: "Màxim",
		sourceDataName: "Ràster d'origen",
		sourceFieldName: "Camp d'origen",
		costRasterName: "Ràster de costos",
		maxDistanceName: "Distància màxima",
		valueRasterName: "Ràster de valor",
		costMultiplierName: "Multiplicador per aplicar als costos",
		startCostName: "Cost inicial",
		accumCostResistanceRateName: "Taxa de resistència del cost acumulat",
		capacityName: "Capacitat",
		travelDirectionName: "Direcció del desplaçament",
		cellSizeName: "Mida de cel·la",
		populationFieldName: "Camp de població",
		areaUnitsName: "Unitats d'àrea",
		outputValueTypeName: "Valors de cel·la de sortida",
		barriersName: "Barreres d’entrada",
		destinationDataName: "Ràster de destinació",
		destinationFieldName: "Camp de destinació",
		pathTypeName: "Tipus de ruta",
		observerFeaturesName: "Entitats d'observador",
		analysisMethodName: "Mètode d'anàlisi",
		analysisTypeName: "Tipus d'anàlisi",
		verticalErrorName: "Error vertical",
		refractivityCoefficientName: "Coeficient de refracció",
		surfaceOffsetName: "Desplaçament de superfície",
		observerElevationName: "Elevació de l'observador",
		observerOffsetName: "Desplaçament de l'observador",
		innerRadiusName: "Radi intern",
		innerRadiusIs3DDistanceName: "El radi intern és la distància 3D",
		outerRadiusName: "Radi extern",
		outerRadiusIs3DDistanceName: "El radi extern és la distància 3D",
		horizontalStartAngleName: "Angle d'inici horitzontal",
		horizontalEndAngleName: "Angle de finalització horitzontal",
		verticalUpperAngleName: "Angle superior vertical",
		verticalLowerAngleName: "Angle inferior vertical",
		zoneDataName: "Ràster de zona",
		zoneFieldName: "Camp de zona",
		ignoreNoDataName: "Ignora NoData als càlculs",
		temperatureRasterName: "Ràster de temperatura",
		inTemperatureUnitsName: "Unitats de temperatura",
		outHeatIndexTemperatureUnitsName: "Unitats d'índex de calor",
		relativeHumidityRasterName: "Ràster d'humitat relativa",
		outWindChillTemperatureUnitsName: "Unitat de sensació tèrmica",
		windSpeedRasterName: "Ràster de velocitat del vent",
		inWindSpeedUnitsName: "Unitats de velocitat del vent",
		valueName: "Valor",
		propertyName: "Nom de propietat",
		jsonName: "JSON de metadades",
		zoneTableName: "Taula d'atributs zonal",
		attributeFieldNames: "Noms de camp d'atribut",
		backgroundName: "Valor de fons",
		whereClauseName: "Clàusula Where",
		minimumValueFieldName: "Nom de camp de valor mínim",
		maximumValueFieldName: "Nom de camp de valor màxim",
		outValueFieldName: "Nom de camp de valor de sortida",
		defaultValueName: "Valor de sortida per defecte",
		conversionMatrixName: "Matriu de conversió",
		IsPseudoColorOutputName: "És una pseudosortida de color",
		unmappedAsRandomColorName: "Assigna un color de manera aleatòria als píxels sense assignar",
		distanceMethodName: "Mètode de distància",
		flowDirRasterName: "Ràster de direcció del flux",
		pourPointName: "Ràster de punts de fluïdesa",
		pourPointFieldName: "Camp de punt de fluïdesa",
		constantZName: "Z constant",
		zOffsetName: "Desplaçament de Z",
		geoIdName: "Geoide",
		calibrationTypeName: "Tipus de calibratge",
		filterTypeName: "Tipus de filtre",
		filterSizeName: "Mida del filtre",
		noiseModelName: "Model de soroll",
		noiseVarianceName: "Variància del soroll",
		additiveNoiseMeanName: "Mitja de soroll additiu",
		multiplicativeNoiseMeanName: "Mitja de soroll multiplicatiu",
		numberofLooksName: "Nombre d'observacions",
		dampingFactorName: "Factor d'amortiment",
		maskRasterName: "Ràster de màscara",
		nibbleValuesName: "Utilitzeu valors NoData si són el veí més proper",
		nibbleNoDataName: "Assigna cel·les NoData",
		zLimitName: "Límit de Z",
		flowDirectionTypeName: "Tipus de direcció del flux",
		weightRasterName: "Ràster de pes",
		forceEdgeName: "Força que totes les cel·les de vores flueixin enfora",
		streamRasterName: "Ràster de transmissió",
		surfaceRasterName: "Ràster de superfície",
		conversionType: "Tipus de conversió",
		distanceRaster1: "Ràster de distància 1",
		distanceRaster2: "Ràster de distància 2",
		costDistanceRaster: "Ràster de cost en pla",
		costBacklinkRaster: "Ràster d'enllaç de menor cost",
		overridesName: "Invalidacions",
		fieldName: "Camp",
		signatureFileOrUrl: "URL o fitxer de signatura",
		redName: "Vermell",
		greenName: "Verd",
		blueName: "Blau",
		infraredName: "Infraroig",
		panchromaticName: "Pancromàtic",
		multispectralName: "Multiespectral",
		pansharpeningType: "Tipus d'enfocament pancromàtic",
		sensorName: "Sensor",
		spatialReferenceName: "Referència espacial",
		xCellsizeName: "Mida de cel·la X",
		yCellsizeName: "Mida de cel·la Y",
		xOriginName: "Punt de registre X",
		yOriginName: "Punt de registre Y",
		percentileName: "Valor de percentil",
		neighborhoodType: "Tipus de veïnat",
		widthName: "Amplada",
		heightName: "Altura",
		startAngleName: "Angle d'inici",
		endAngleName: "Angle de finalització",
		neighborhoodValues: "Valors de veïnat",
		horizontalRaster: "Ràster horitzontal",
		horizontalFactor: "Factor horitzontal",
		verticalRaster: "Ràster vertical",
		verticalFactor: "Factor vertical",
		streamRaster: "Ràster de transmissió",
		flowDirRaster: "Ràster de direcció del flux",
		numberNeighborCells: "Nombre de cel·les veïnes",
		zoneConnectivity: "Connectivitat de la zona",
		addLinkBehavior: "Afegeix un enllaç",
		excludedValue: "Valor exclòs",
		constantFillCheck: "Genera un ràster d'emplenament a partir de la constant",
		fillRaster: "Ràster d'emplenament",
		constantFillValue: "Valor constant",
		inputBitPositions: "Bit d'entrada",
		outputBitPositions: "Bit de sortida",
		distanceTypeName: "Tipus de distància",
		barrierDataName: "Barreres de ràster",
		pourPointDataName: "Ràster de punts de fluïdesa",
		accumulationRasterName: "Ràster d'acumulació de flux",
		snapDistanceName: "Distància d'alineació",
		orderMethodName: "Mètode d'ordenació",
		directionMeasurementName: "Direcció de mesura",
		processAsMultiband: "Processa com a multibanda",
		processMultidimensional: "Processa com a multidimensional",
		forceFlowDirectionConvention: "Força la convenció de la direcció del flux per al ràster d'enllaç de menor cost",
		initialAccumulation: "Acumulació inicial",
		maximumAccumulation: "Acumulació màxima",
		sourceLocationBands: "Genera una fila i una columna d'origen com a bandes originals a la sortida",
		backDirectionBand: "Genera la direcció inversa com a banda original a la sortida",
		numberOfCells: "Nombre de cel·les",
		zoneValues: "Valors de zona",
		shrinkMethod: "Mètode de reducció",
		expandMethod: "Mètode d'expansió",
		inputSpectralProfileType: "Tipus de perfil espectral",
		spectralProfileFileName: "Perfil espectral",
		trainingFeatureFileName: "Entitat de formació",
		nonNegative: "No negatiu",
		sumToOne: "Suma u",
		randomDistribution: "Distribució",
		meanName: "Mitja",
		probabilityName: "Probabilitat",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "N",
		seed: "Origina",
		randomNumberGenerator: "Generador de números aleatorios",
		cellFactor: "Factor de cel·la",
		aggregationType: "Técnica de agregación",
		extentHandling: "Ampliar la extensión si es necesario",
		trendAnalysisDimensionName: "Nom de la dimensió",
		trendAnalysisType: "Tipus de tendència",
		harmonicFrequency: "Freqüència harmònica",
		polynomialOrder: "Ordre polinòmic",
		cycleLengthName: "Durada del cicle",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R quadrat",
		trendAnalysisSlopePValue: "Valor P del coeficient de pendent",
		trendAnalysisSeasonalPeriod: "Període estacional",
		cycleUnitName: "Unitat del cicle",
		predictDimensionValues: "Valors",
		dimensionDefinitionType: "Definició de la dimensió",
		predictDimensionStart: "Principi",
		predictDimensionEnd: "Final",
		predictDimensionInterval: "Interval de valors",
		dimensionUnit: "Unitat",
		interpolationCellsizeName: "Mida de cel·la de la interpolació",
		variableName: "Variables",
		dimensionlessName: "Adimensional",
		mdimDefinition: "Definició de la dimensió",
		dimensionName: "Dimensió",
		iterationStart: "Inici de la primera iteració",
		iterationEnd: "Final de la primera iteració",
		intervalStart: "Inici de l'interval",
		intervalEnd: "Final de l'interval",
		stepName: "Pas",
		rangesName: "Intervals",
		minValue: "Valor mínim",
		maxValue: "Valor màxim",
		changeAnalysisRasterName: "Ràster d’anàlisi de canvis",
		changeTypeName: "Canvia el tipus",
		segmentDate: "Data de segment",
		changeDirectionName: "Direcció de canvi",
		maxNumChangesName: "Nombre màxim de canvis",
		filterByYear: "Filtra per any",
		minimumYear: "Valor mínim",
		maximumYear: "Valor màxim",
		filterByDuration: "Filtra per durada",
		minimumDuration: "Durada mínima",
		maximumDuration: "Durada màxima",
		filterByMagnitude: "Filtra per magnitud",
		minimumMagnitude: "Magnitud mínima",
		maximumMagnitude: "Magnitud màxima",
		filterByStartValue: "Filtra per valor inicial",
		minimumStartValue: "Valor inicial mínim",
		maximumStartValue: "Valor inicial màxim",
		filterByEndValue: "Filtra per valor final",
		minimumEndValue: "Valor final mínim",
		maximumEndValue: "Valor final màxim",
		modelTypeName: "Tipus de model",
		fromRasterName: "De ráster",
		toRasterName: "A ráster",
		computeChangeMethod: "Calcula el mètode de canvi",
		fromClassValues: "Des de valors de classe (Exemple: 2 5)",
		toClassValues: "Fins a valors de classe (Example: 2 5)",
		keepMethod: "Mètode de filtratge",
		useColorMethod: "Defineix colors de transició",
		detectChangeBands: "Bandes per detectar canvis (comença al 0)",
		tmaskBands: "Bandes d'emmascarament temporal (comença al 0)",
		chiSquaredThreshold: "Llindar de khi quadrat per detectar canvis",
		minAnomaly: "Observacions d'anomalies consecutives mínimes",
		updatingFrequency: "Actualitzant la freqüència d'ajustament (en anys)",
		distanceAccumulationRasterName: "Ràster d'acumulació de distància",
		costBackdirectionRasterName: "Ràster de direcció del flux o de direcció inversa",
		rasterCollectionName: "Captura de ràsters",
		itemFunctionName: "Funció d'element",
		aggregationFunctionName: "Funció d'agregació",
		processingFunctionName: "Funció de processament",
		aggregationDefinitionName: "Definició d'agregació",
		queryGeometryName: "Consulta la geometria",
		factorFunctionZeroFactor: "Factor zero",
		factorFunctionCutAngle: "Angle de tall",
		factorFunctionSideFactor: "Factor lateral",
		factorFunctionSlope: "Pendent",
		factorFunctionLowCutAngle: "Angle de tall baix",
		factorFunctionHighCutAngle: "Angle de tall alt",
		factorFunctionCosPower: "Potència del cosinus",
		factorFunctionSecPower: "Potència de la secant",
		factorFunctionTablePath: "Ruta de la taula",
		processingBand: "Banda de processament",
		processingBandName: "Nom de la banda de processament",
		snappingDate: "Data instantània",
		maxNumSegments: "Nombre màxim de segments",
		vertexCountOvershoot: "Overshoot de recompte de vèrtex",
		spikeThreshold: "Límit de punta",
		recoveryThreshold: "Límit de recuperació",
		minNumObs: "Cantidad mínima de observaciones",
		pValueThreshold: "Límit de P-Value",
		bestModelProportion: "Millor proporció de model",
		preventOneYearRecovery: "Evitar recuperació d’un any",
		recoveryIncreaseTrend: "La recuperació té tendència creixent",
		outputOtherBands: "Resultat altres bandes",
		sortType: "Tipus d'ordenació",
		numberOfRuns: "Executa l'expansió i la reducció dues vegades",
		percentileValue: "Valor de percentil",
		percentileInterpolationType: "Tipus d'interpolació del percentil",
		rasterInfoProperty: "Propietat",
		rasterInfoValue: "Valor",
		rasterInfoColumns: "Columnes",
		rasterInfoRows: "Files",
		rasterInfoBandCount: "Nombre de bandes",
		rasterInfoPixelSizeX: "Mida X de la cel·la",
		rasterInfoPixelSizeY: "Mida Y de la cel·la",
		rasterInfoPixelType: "Tipus de píxel",
		rasterExtentTop: "Superior",
		rasterExtentBottom: "Inferior",
		rasterExtentLeft: "Esquerra",
		rasterExtentRight: "Dreta",
		rasterStatisticsNotCalculated: "No s'han calculat les estadístiques.",
		spatialReferenceProjection: "Projecció",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "WKID anterior",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "VCSWKID anterior",
		spatialReferenceAuthority: "Autoritat",
		spatialReferenceLinearUnit: "Unitat lineal",
		spatialReferenceAngularUnit: "Unitat angular",
		spatialReferenceFalseEasting: "Fals est",
		spatialReferenceFalseNorthing: "Fals nord",
		spatialReferenceCentralMeridian: "Meridià central",
		spatialReferencePrimeMeridian: "Meridià inicial",
		spatialReferenceStandardParallel1: "Paral·lel estàndard 1",
		spatialReferenceStandardParallel2: "Paral·lel estàndard 2",
		spatialReferenceLatitudeOfOrigin: "Latitud de l'origen",
		spatialReferenceAuxiliarySphereType: "Tipus d'esfera auxiliar",
		spatialReferenceDatum: "Datum",
		spatialReferenceSpheroid: "Esferoide",
		spatialReferenceSemimajorAxis: "Semieix major",
		spatialReferenceSemiminorAxis: "Semieix menor",
		spatialReferenceInverseFlattening: "Aplatament invers",
		inputDefinitionFileName: "Fitxer de definició d'entrada",
		deleteName: "Suprimeix",
		addVariableName: "Agregar variable",
		maxNumPixelsPerSegment: "Mida de segment màxima en píxels",
		forwardWindowName: "Finestra Endavant",
		backwardWindowName: "Finestra Enrere",
		noDataHandlingName: "Tractament de NoData",
		circularWrapValueName: "Valor d'ajust circular",
		fromClassNameFieldName: "Nom de camp per a noms de classes al ràster d'origen",
		toClassNameFieldName: "Nom de camp per a noms de classes al ràster de destinació",
		targetRasterName: "Ràster de destinació",
		circularWrapValue: "Valor d'ajust circular",
		bandIndexesR: "Expressió en vermell",
		bandIndexesG: "Expressió en verd",
		bandIndexesB: "Expressió en blau",
		exampleName: "Exemple",
		inputName: "Entrada",
		outputName: "Sortida",
		optionalName: "Opcional",
		browseDefinitionFile: "Navega al fitxer de definició",
		selectDefinitionFile: "Seleccioneu el fitxer de definició d'entrada",
		inputDefinitionURL: "URL del fitxer de definició d'entrada",
		enterDefinitionFileURL: "Introduïu l'URL del fitxer de definició",
		browseXMLFile: "Navega al fitxer XML",
		selectStatsFile: "Seleccioneu el fitxer d'estadístiques i d'histogrames",
		enterXMLFileURL: "Introduïu l'URL del fitxer XML",
		xmlFileURL: "URL del fitxer XML",
		circularCalculation: "Calcula les estadístiques circulars",
		localSurfaceType: "Tipus de superfície local",
		surfaceParameterType: "Tipus de paràmetre",
		neighborhoodDistance: "Distància de veïnatge",
		useAdaptiveNeighborhood: "Utilitza veïnatge adaptatiu",
		outputSlopeType: "Mesura del pendent de sortida",
		projectAzimuths: "Projecte d'azimuts geodèsics",
		useEquatorialAspect: "Utilitza la projecció equatorial",
		zUnit: "Unitat Z",
		analysisMask: "Màscara d'anàlisi",
		stdDeviation: "Desviació estàndard",
		"true": "Cert",
		"false": "Fals",
		costDistanceRaster1: "Ràster de distància de cost acumulatiu d'entrada 1",
		costDistanceRaster2: "Ràster de distància de cost acumulatiu d'entrada 2",
		threshold: "Llindar",
		thresholdMethod: "Mètode de llindar",
		directionRaster1: "Ràster de direcció inversa d'entrada 1",
		directionRaster2: "Ràster de direcció inversa d'entrada 2",
		maxIterations: "Nombre màxim d'iteracions",
		epsilon: "Èpsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Manual",
		attributeTableTypeExternal: "Extern",
		clrSchemeTypeColormap: "Mapa de color",
		clrSchemeTypeColorRamp: "Rampa de color",
		colormapTypeElevation: "Elevació",
		colormapTypeGray: "Gris",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Aleatori",
		none: "Cap",
		slopeTypeAdjusted: "Ajustat",
		slopeTypeDegree: "Grau",
		slopeTypePercentRise: "PercentRise",
		slopeTypeScaled: "Escalat",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "PercentMinMax",
		stretchTypeSigmoid: "Sigmoide",
		stretchTypeStdDev: "Desv. est.",
		hillshadeTypeSimple: "Tradicional",
		hillshadeTypeMultidirectional: "Multidireccional",
		bandComboByNames: "Noms de banda",
		bandComboByWavelength: "Longituds d'ona de bandes",
		bandComboByIDs: "ID de banda",
		missingBandActionBestMatch: "Millor coincidència",
		missingBandActionFail: "Error",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Centímetres",
		unitTypeDecimeters: "Decímetres",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Peus",
		unitTypeFeetPerSec: "Peus per segon (ft/s)",
		unitTypeInches: "Polzades",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Quilòmetres",
		unitTypeKmsPerHour: "Quilòmetres per hora (km/h)",
		unitTypeKnots: "Nusos (kn)",
		unitTypeMeters: "Metres",
		unitTypeMetersPerSec: "Metres per segon (m/s)",
		unitTypeMiles: "Milles",
		unitTypeMilesPerHour: "Milles per hora (mph)",
		unitTypeMillimeters: "Mil·límetres",
		unitTypeNauticalMiles: "Milles nàutiques",
		unitTypeYards: "Iardes",
		unitTypeDecimalDegrees: "Graus decimals",
		unitTypePoints: "Punts",
		unitTypeUnknown: "Desconegut",
		unitTypeSqMapUnits: "Unitats de mapa quadrades",
		unitTypeSqMiles: "Milles quadrades",
		unitTypeSqKms: "Quilòmetres quadrats",
		unitTypeAcres: "Acres",
		unitTypeHectares: "Hectàrees",
		unitTypeSqYards: "Iardes quadrades",
		unitTypeSqFt: "Peus quadrats",
		unitTypeSqInches: "Polzades quadrades",
		unitTypeSqMts: "Metres quadrats",
		unitTypeSqCms: "Centímetres quadrats",
		unitTypeSqMms: "Mil·límetres quadrats",
		cellsizeTypeFirst: "Primer de",
		cellsizeTypeMin: "Mínim de",
		cellsizeTypeMax: "Màxim de",
		cellsizeTypeMean: "Mitja de",
		cellsizeTypeLast: "Últim de",
		extentTypeFirst: "Primer de",
		extentTypeIntersection: "Intersecció de",
		extentTypeUnion: "Unió de",
		extentTypeLast: "Últim de",
		noDataInterpretAny: "Coincideix amb qualsevol",
		noDataInterpretAll: "Coincideix amb tots",
		curvatureTypeStandard: "Estàndard",
		curvatureTypeProfile: "Perfil",
		curvatureTypePlanform: "Pla",
		filterTypeLineDetectionHorizontal: "Detecció de línia horitzontal",
		filterTypeLineDetectionVertical: "Detecció de línia vertical",
		filterTypeLineDetectionLeftDiagonal: "Detecció de línia diagonal cap a l'esquerra",
		filterTypeLineDetectionRightDiagonal: "Detecció de línia diagonal cap a la dreta",
		filterTypeGradientNorth: "Gradient nord",
		filterTypeGradientWest: "Gradient oest",
		filterTypeGradientEast: "Gradient est",
		filterTypeGradientSouth: "Gradient sud",
		filterTypeGradientNorthEast: "Gradient nord-est",
		filterTypeGradientNorthWest: "Gradient nord-oest",
		filterTypeSmoothArithmeticMean: "Mitja aritmètica de suavització",
		filterTypeSmoothing3x3: "Suavització 3×3",
		filterTypeSmoothing5x5: "Suavització 5×5",
		filterTypeSharpening3x3: "Enfocament 3×3",
		filterTypeSharpening5x5: "Enfocament 5×5",
		filterTypeLaplacian3x3: "Laplacià 3×3",
		filterTypeLaplacian5x5: "Laplacià 5×5",
		filterTypeSobelHorizontal: "Sobel horitzontal",
		filterTypeSobelVertical: "Sobel vertical",
		filterTypeSharpen: "Enfoca",
		filterTypeSharpen2: "Enfoca més",
		filterTypePointSpread: "Dispersió del punt",
		userDefined: "Definit per l'usuari",
		ContourTypeLines: "Línies de corba de nivell",
		ContourTypeFill: "Emplenament de la corba de nivell",
		ContourTypeSmoothOnly: "Suavitza només la superfície",
		rasterizeFirst: "Primer",
		rasterizeLast: "Últim",
		rasterizeSmallest: "Més petit",
		rasterizeLargest: "Més gran",
		resamplingTypeNearest: "Veí més proper",
		resamplingTypeBilinear: "Interpolació bilineal",
		resamplingTypeCubic: "Convolució cúbica",
		resamplingTypeMajority: "Majoria",
		resamplingTypeBilinearPlus: "Suma d'interpolació bilineal",
		resamplingTypeGauss: "Desenfocament gaussià",
		resamplingTypeGaussPlus: "Suma de desenfocament gaussià",
		resamplingTypeAverage: "Mig",
		resamplingTypeMinimum: "Mínim",
		resamplingTypeMaximum: "Màxim",
		resamplingTypeVectorAvg: "Mitjana del vector",
		minimum: "Mínim",
		maximum: "Màxim",
		mean: "Mitja",
		stdDeviation: "Desviació estàndard",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Magnitud-direcció",
		unknown: "Desconegut",
		angleRefSysGeographic: "Geogràfic",
		angleRefSysArithmetic: "Aritmètic",
		interpolateIrregularDataNearest: "Veí més proper",
		interpolateIrregularDataBilinear: "Bilineal",
		interpolateIrregularDataTinningLinear: "Simplificació lineal",
		interpolateIrregularDataTinningNaturalNeighbor: "Veí natural",
		interpolateIrregularDataTinningIDW: "Distància inversa ponderada",
		esriRasterThresholdTypeConstant: "Constant",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg Max",
		argStatsTypeMin: "Arg Min",
		argStatsTypeMedian: "Arg Median",
		argStatsTypeDuration: "Duration",
		arithmeticOpPlus: "Suma",
		arithmeticOpMinus: "Resta",
		arithmeticOpMultiply: "Multiplicació",
		arithmeticOpDivide: "Divisió",
		arithmeticOpPower: "Potència",
		arithmeticOpMode: "Mode",
		clipTypeOutside: "Retall exterior",
		clipTypeInside: "Retall interior",
		yes: "Sí",
		no: "No",
		densities: "Densitats",
		expectedCounts: "Recomptes esperats",
		planar: "Pla",
		geodesic: "Geodèsic",
		eachCell: "Cada cel·la",
		eachZone: "Cada zona",
		bestSingle: "L'únic millor",
		allSightlines: "Totes les línies de visió",
		perimeterSightlines: "Línies de visió de perímetre",
		frequency: "Freqüència",
		observers: "Observadors",
		majority: "Majoria",
		median: "Mitjana",
		minority: "Minoria",
		percentile: "Percentil",
		range: "Interval",
		sum: "Suma",
		variety: "Varietat",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "SAVI transformat",
		bandArithmeticMethodMSAVI: "SAVI modificat",
		bandArithmeticMethodSultan: "Fórmula de Sultan",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Òxid de ferro",
		ferrousMinerals: "Minerals ferrosos",
		clayMinerals: "Minerals argilosos",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Arrel quadrada",
		localACos: "Arc cosinus (ACos)",
		localASin: "Arc sinus (ASin)",
		localATan: "Arc tangent (ATan)",
		localATanH: "Arc tangent hiperbòlica (ATanH)",
		localAbs: "Valor absolut",
		localBitwiseNot: "Bitwise Not",
		localBooleanNot: "Booleana Not",
		localCos: "Cosinus (Cos)",
		localCosH: "Cosinus hiperbòlic (CosH)",
		localExp: "Exponencial en base e (Exp)",
		localExp10: "Exponencial en base 10 (Exp10)",
		localExp2: "Exponencial en base 2 (Exp2)",
		localInt: "Enter",
		localIsNull: "És nul",
		localFloat: "Punt flotant",
		localLn: "Logaritme neperià (Ln)",
		localLog10: "Logaritme en base 10 (Log10)",
		localLog2: "Logaritme en base 2 (log2)",
		localNegate: "Canvi de signe",
		localRoundDown: "Arrodoniment a la baixa",
		localRoundUp: "Arrodoniment a l'alça",
		localSin: "Sinus (Sin)",
		localSinH: "Sinus hiperbòlic (SinH)",
		localTan: "Tangent (Tan)",
		localTanH: "Tangent hiperbòlica (TanH)",
		localACosH: "Arc cosinus hiperbòlic (ACosH)",
		localASinH: "Arc sinus hiperbòlic (ASinH)",
		localPlus: "Suma",
		localMinus: "Resta",
		localTimes: "Multiplicació",
		localPower: "Potència",
		localBitwiseAnd: "Bitwise And",
		localBitwiseLeftShift: "Bitwise Left Shift",
		localBitwiseOr: "Bitwise Or",
		localBitwiseRightShift: "Bitwise Right Shift",
		localBitwiseXor: "Bitwise Xor",
		localBooleanAnd: "Booleana And",
		localBooleanOr: "Booleana Or",
		localBooleanXor: "Booleana Xor",
		localDivide: "Divisió",
		localEqualTo: "Igual que",
		localGreaterThan: "Major que",
		localGreaterThanEqual: "Major o igual que",
		localLessThan: "Menor que",
		localLessThanEqual: "Menor o igual que",
		localMod: "Mòdul",
		localNotEqual: "No igual",
		localATan2: "Arc tangent (ATan2)",
		localSquare: "Quadrada",
		localSetNull: "Defineix nuls",
		remapDefTypeList: "Llista",
		remapDefTypeTable: "Taula",
		remapTableTypeSimple: "Simple",
		remapTableTypeDynamic: "Dinàmic",
		remapTableTypeReassignment: "Reassignació",
		geomCorrectionByConstZ: "Utilitza Z constant",
		geomCorrectionByDEM: "Utilitza DEM",
		radarCalibBetaNought: "Beta zero",
		radarCalibSigmaNought: "Sigma zero",
		radarCalibGammaNought: "Gamma zero",
		speckleFilterTypeLee: "Filtre de Lee",
		speckleFilterTypeEnhancedLee: "Filtre de Lee millorat",
		speckleFilterTypeFrost: "Filtre de Frost",
		speckleFilterTypeKuan: "Filtre de Kuan",
		speckleNoiseModelMul: "Soroll multiplicatiu",
		speckleNoiseModelAdd: "Soroll additiu",
		speckleNoiseModelAddnMul: "Soroll additiu i multiplicatiu",
		mosaicOpTypeFirst: "Primer",
		mosaicOpTypeLast: "Últim",
		mosaicOpTypeMin: "Mín.",
		mosaicOpTypeMax: "Màx.",
		mosaicOpTypeMean: "Mitja",
		mosaicOpTypeBlend: "Combinació",
		mosaicOpTypeSum: "Suma",
		integer: "Enter",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Vertical",
		horizontal: "Horitzontal",
		localCellStatisticsMajority: "Majoria",
		localCellStatisticsMax: "Màxim",
		localCellStatisticsMean: "Mitja",
		localCellStatisticsMedian: "Mitjana",
		localCellStatisticsMin: "Mínim",
		localCellStatisticsMinority: "Minoria",
		localCellStatisticsRange: "Interval",
		localCellStatisticsStdDev: "Desviació estàndard",
		localCellStatisticsSum: "Suma",
		localCellStatisticsVariety: "Varietat",
		localCellStatisticsMajorityIgnoreND: "Majoria (ignora els elements NoData)",
		localCellStatisticsMaxIgnoreND: "Màxim (ignora els elements NoData)",
		localCellStatisticsMeanIgnoreND: "Mitja (ignora els elements NoData)",
		localCellStatisticsMedianIgnoreND: "Mitjana (ignora els elements NoData)",
		localCellStatisticsMinIgnoreND: "Mínim (ignora els elements NoData)",
		localCellStatisticsMinorityIgnoreND: "Minoria (ignora els elements NoData)",
		localCellStatisticsRangeIgnoreND: "Interval (ignora els elements NoData)",
		localCellStatisticsStdDevIgnoreND: "Desviació estàndard (ignora els elements NoData)",
		localCellStatisticsSumIgnoreND: "Suma (ignora els elements NoData)",
		localCellStatisticsVarietyIgnoreND: "Varietat (ignora els elements NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Percentil (ignora els elements NoData)",
		fromSource: "Des de l'origen",
		toSource: "Fins a l'origen",
		colorspaceConversionRgbToHsv: "RGB a HSV",
		colorspaceConversionHsvToRgb: "HSV a RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Mitja",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Rectangle",
		circleNeighborhood: "Cercle",
		annulusNeighborhood: "Corona circular",
		wedgeNeighborhood: "Falca",
		irregularNeighborhood: "Irregular",
		weightNeighborhood: "Pes",
		four: "Quatre",
		eight: "Vuit",
		within: "Dins",
		cross: "Creu",
		addLink: "Afegeix un enllaç",
		noLink: "Sense enllaç",
		weightedMean: "Mitjana ponderada",
		ls8QCBitPatternCirrus: "Landsat 8 Cirrus",
		ls8QCBitPatternCloud: "Landsat 8 Cloud",
		ls8QCBitPatternCloudShadow: "Landsat 8 Cloud Shadow",
		ls8QCBitPatternDesignatedFill: "Landsat 8 Designated Fill",
		ls8QCBitPatternDroppedFrame: "Landsat 8 Dropped Frame",
		ls8QCBitPatternSnowIce: "Landsat 8 Snow/Ice",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 Terrain Occlusion",
		ls8QCBitPatternVegetation: "Landsat 8 Vegetation",
		ls8QCBitPatternWater: "Landsat 8 Water",
		downStream: "Descendent",
		upStream: "Ascendent",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Sector actual",
		allSlices: "Tots els sectors",
		expandDistance: "DISTÀNCIA",
		expandMorphological: "MORFOLÒGIC",
		spectralProfileFile: "Perfil espectral",
		trainingFeatureFile: "Entitat de formació",
		randomDistributionTypeUniform: "Uniforme",
		randomDistributionTypeUniformInteger: "Enter",
		randomDistributionTypeNormal: "Normal",
		randomDistributionTypeExponential: "Exponencial",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binomial",
		randomDistributionTypeGeometric: "Geomètrica",
		randomDistributionTypeNegativeBinomial: "Binomial negatiu",
		randomGeneratorTypeStandardCRand: "Rand C estándar",
		randomGeneratorTypeAlgorithmACM599: "Algoritmo 599 capturado por ACM",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Suma",
		medainName: "Mitjana",
		trendLinear: "Lineal",
		trendHarmonic: "Harmònic",
		trendPolynomial: "Polinomial",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Kendall estacional",
		dimensionByValue: "Per valor",
		dimensionByInterval: "Per interval",
		mdimDefTypeAll: "Tots",
		mdimDefTypeByValues: "Per valors",
		mdimDefTypeByRanges: "Per intervals",
		mdimDefTypeByIteration: "Per iteració",
		mdimDefTypeByInterval: "Per interval",
		mdimDefTypeByTargetRaster: "Per ràster de destinació",
		esriTimeUnitsHours: "Hores",
		esriTimeUnitsDays: "Dies",
		esriTimeUnitsWeeks: "Setmanes",
		esriTimeUnitsMonths: "Mesos",
		esriTimeUnitsYears: "Anys",
		esriTimeIntervalKeywordHourly: "Cada hora",
		esriTimeIntervalKeywordDaily: "Diària",
		esriTimeIntervalKeywordWeekly: "Setmanal",
		esriTimeIntervalKeywordDekadly: "Cada dècada",
		esriTimeIntervalKeywordPentadly: "Cada cinc anys",
		esriTimeIntervalKeywordMonthly: "Mensualment",
		esriTimeIntervalKeywordQuarterly: "Trimestralment",
		esriTimeIntervalKeywordYearly: "Anualment",
		esriTimeIntervalKeywordRecurringDaily: "Amb recurrència diària",
		esriTimeIntervalKeywordRecurringWeekly: "Amb recurrència setmanal",
		esriTimeIntervalKeywordRecurringMonthly: "Amb recurrència mensual",
		esriTimeIntervalKeywordRecurringQuarterly: "Amb recurrència trimestral",
		aggDefTypeAll: "Tot",
		aggDefTypeIntervalKeyword: "Paraula clau de l'interval",
		aggDefTypeIntervalValue: "Valor de l'interval",
		aggDefTypeIntervalRanges: "Rangs de l'interval",
		latestChange: "Hora de l'últim canvi",
		earliestChange: "Hora del primer canvi",
		largestChange: "Hora del canvi més gran",
		numberOfChanges: "Nombre de canvis",
		longestChange: "Temps de canvi més llarg",
		shortestChange: "Temps de canvi més curt",
		fastestChange: "Temps de canvi més ràpid",
		slowestChange: "Temps de canvi més lent",
		allChanges: "Tot",
		increaseChanges: "Incrementar",
		decreaseChanges: "Redueix",
		segmentBeginning: "Inici de segment",
		segmentEnd: "Fi de segment",
		esriComputeChangeMethodDifference: "Diferència",
		esriComputeChangeMethodRelativeDifference: "Diferència relativa",
		esriComputeChangeMethodCategorical: "Diferència categòrica",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Distància euclidiana espectral",
		esriComputeChangeMethodMultispectralAngularDifference: "Diferència d'angle espectral",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Banda amb més canvis",
		esriComputeChangeKeepAll: "Mantenir tots",
		esriComputeChangeKeepChangedOnly: "Mantenir només píxels canviats",
		esriComputeChangeKeepUnchangedOnly: "Mantenir només píxels no canviats",
		esriComputeChangeUseColorAverage: "Promig Colors des de i fins a",
		esriComputeChangeUseColorFrom: "Utilitza Colors des de",
		esriComputeChangeUseColorTo: "Utilitza Colors ins a",
		factorFunctionBinary: "Binari",
		factorFunctionForward: "Endavant",
		factorFunctionLinear: "Lineal",
		factorFunctionInvLinear: "Lineal invers",
		factorFunctionTable: "Taula",
		factorFunctionSymLinear: "Lineal simètric",
		factorFunctionSymInvLinear: "Lineal simètric invers",
		factorFunctionCos: "Cosinus",
		factorFunctionSec: "Secant",
		factorFunctionCosSec: "Cosinus secant",
		factorFunctionSecCos: "Secant cosinus",
		noSort: "No ho ordenis",
		ascend: "Ascendent",
		descend: "Descendent",
		autoDetect: "Detecta automàticament",
		nearest: "Més proper",
		linear: "Lineal",
		esriMonthJanuary: "Gener",
		esriMonthFebruary: "Febrer",
		esriMonthMarch: "Març",
		esriMonthApril: "Abril",
		esriMonthMay: "Maig",
		esriMonthJune: "Juny",
		esriMonthJuly: "Juliol",
		esriMonthAugust: "Agost",
		esriMonthSeptember: "Setembre",
		esriMonthOctober: "Octubre",
		esriMonthNovember: "Novembre",
		esriMonthDecember: "Desembre",
		dimensionalMovingIgnoreNoData: "Dades",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "Emplena NoData",
		circularMean: "Mitjana circular",
		circularName: "Circular",
		arithmeticName: "Aritmètica",
		slopeName: "Pendent",
		aspectName: "Orientació",
		meanCurvature: "Curvatura mitja",
		profileCurvature: "Curvatura del perfil (línia de pendent normal)",
		tangentialCurvature: "Curvatura tangencial (contorn normal)",
		planCurvature: "Curvatura del pla (contorn projectat)",
		contourGeodesicTorsion: "Torsió geodèsica del contorn",
		gaussianCurvature: "Curvatura gaussiana",
		casoratiCurvature: "Curvatura de Casorati",
		localSurfaceTypeQuadratic: "Quadràtica",
		localSurfaceTypeBiquadratic: "Bioquadràtica",
		thresholdNoThreshold: "Sense llindar",
		thresholdPercentLeastCost: "Percentatge del menor cost",
		thresholdAccumulativeCost: "Cost acumulatiu",
		clrmapTypeHillshade: "Ombreig"
	},
	categoryLabels: {
		sourceCharacteristics: "Característiques d'origen",
		neighborhoodSettings: "Configuració del veïnat",
		statistics: "Estadístiques",
		gamma: "Gamma",
		viewshedParameters: "Paràmetres de conca visual",
		observerParameters: "Paràmetres d'observador",
		irregularDataInterpolation: "Interpolació de dades irregular",
		modelStatistics: "Estadístiques del model",
		aggregationDef: "Definició d'agregació",
		filterByAttributes: "Filtra per atributs",
		percentileName: "Percentil",
		rasterInfo: "Informació de ràster",
		extent: "Extensió",
		spatialReference: "Referència espacial"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Nom de la capa que es crearà i s'afegirà al mapa.</p>",
		resultType: "<p>Tipus de sortida que es crearà. Les sortides poden ser capes d'imatges en mosaic o capes d'imatges dinàmiques.</p>",
		saveResultIn: "<p>Nom de la carpeta a <b>El meu contingut</b> on es desarà el resultat.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Configuració de l'entorn per a l'anàlisi al Visor de mapes. </p>",
		outSR: "<p>Especifica el sistema de coordenades per a l'anàlisi i la capa de resultats.</p>",
		extent: "<p>Especifica l'àrea que es farà servir per a l'anàlisi.</p>",
		snapRaster: "<p>Ajusta l'extensió de la sortida perquè coincideixi amb l'alineació de cel·les de la capa ràster d'ajust.</p>",
		cellSize: "<p>Especifica la mida o la resolució de cel·la que s'utilitzarà per a l'anàlisi i per crear la capa de ràster de sortida.</p>",
		mask: "<p>Especifica una capa de màscara en la qual només es faran servir per a l'anàlisi les cel·les que es trobin dins de l'àrea de màscara.</p>",
		resamplingMethod: "<p>Especifica com interpolar els valors de píxel quan els ràsters d'entrada i de sortida no estan alineats.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Tipus no compatible",
		currentlyUnsupported: " Hi ha un editor predeterminat per a ${missingType}, estarà disponible properament. Quadre de text de marcador de posició temporal per especificar entrades basades en cadena.",
		unsupportedOverrideWarning: "Properament, hi haurà disponible un editor d'invalidació que oferirà una UX millor per treballar amb els paràmetres següents:",
		overrideWidgetMissing: "Falta un component de l'editor d'invalidació.",
		uiIncomplete: "No s'ha pogut enviar el treball. La funció no es pot executar perquè alguns dels camps necessaris no són compatibles o no apareixen a la UI.",
		count: "Recompte",
		selectVariables: "Selecciona les variables",
		selectFeature: "Seleccioneu la capa d'entitats",
		greaterThanErrorMessage: "El valor d'entrada ha de ser major que ${min}.",
		lesserThanErrorMessage: "El valor d'entrada ha de ser menor que ${max}.",
		greaterThanOrEqualErrorMessage: "El valor d'entrada ha de ser major o igual que ${min}.",
		lesserThanOrEqualErrorMessage: "El valor d'entrada ha de ser menor o igual que ${max}.",
		allowScalar: "Seleccioneu una capa o introduïu una constant",
		selectField: "Seleccioneu un camp",
		parameterRequired: "Aquest paràmetre és obligatori.",
		enterAValue: "Introduïu un valor...",
		invalidInput: "El valor que s'ha introduït no és vàlid.",
		itemNotFound: "L'element no existeix o no s'hi pot accedir.",
		itemPermissionDenied: "No teniu permisos per accedir a aquest element.",
		layerNotAvailable: "No s'ha pogut pujar la capa ${layerName}.",
		multipleLayersNotAvailable: "No s'ha pogut pujar la capa ${layerName} ni cap altra.",
		learnMoreLabel: "Més informació",
		fieldNotAvailable: "No s'ha pogut carregar el camp.",
		allowAnalysis: "Anàlisi no permesa al servei d'imatges.",
		allowAnalysisReason: "Una o diverses capes del mapa no figuren en aquesta llista perquè no permeten l'anàlisi.",
		learnMoreText: "Més informació",
		atLeastOneRasterInput: "Com a mínim una capa d'entrada ha de ser una capa ràster.",
		browseAnalysisLayers: "Examineu capes",
		activeMapViewExtent: "Utilitza l'extensió de mapa actual",
		chooseRaster: "Seleccioneu Retalla el ràster",
		chooseGeometry: "Seleccioneu Retalla la geometria",
		resultType: "Tipus de resultat",
		saveInFolder: "Desa-ho a la carpeta",
		outputName: "Nom de sortida",
		outputLayerType: "Tipus de capa de sortida",
		dynamicImageryLayer: "Capa d'imatges dinàmica",
		tiledImageryLayer: "Capa d'imatges en mosaic",
		custom: "Personalitzat",
		loading: "S'està carregant...",
		layerMissing: "Una o diverses capes del mapa no figuren en aquesta llista perquè no permeten l'anàlisi. Obteniu més informació.",
		browseCoordinateSystems: "Examina els sistemes de coordenades",
		unableToRepopulateOutSR: "No es pot emplenar el sistema de coordenades de sortida.",
		defaultTitle: "Veure'n més",
		"ARC (equal arc-second)": "ARC (segon d'arc igual)",
		Africa: "Àfrica",
		Antarctica: "Antàrtida",
		Argentina: "Argentina",
		Asia: "Àsia",
		"Asteroid Belt": "Cinturó d'asteroides",
		"Atlantic Ocean": "Oceà Atlàntic",
		Australia: "Austràlia",
		"Australia and New Zealand": "Austràlia i Nova Zelanda",
		Austria: "Àustria",
		"BLM (US Feet)": "BLM (peus dels EUA)",
		Bangladesh: "Bangla Desh",
		"Beijing 1954": "Pequín 1954",
		Bhutan: "Bhutan",
		CGCS2000: "CGCS2000",
		Canada: "Canadà",
		Caribbean: "Carib",
		"Caribbean Sea": "Mar Carib",
		"Central America": "Amèrica Central",
		"Central and North America": "Amèrica Central i del Nord",
		Colombia: "Colòmbia",
		Continental: "Continental",
		"County Systems": "Sistemes de comtats",
		"Democratic Republic of the Congo": "República Democràtica del Congo",
		"EPSG Arctic": "EPSG Àrtic",
		Earth: "Terra",
		"Ellipsoidal-based": "Basat en un el·lipsoide",
		Europe: "d'Europa",
		Finland: "Finlàndia",
		France: "França",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss-Krüger",
		"Geographic Coordinate Systems": "Sistemes de coordenades geogràfiques",
		Germany: "Alemanya",
		"Gravity-related": "Relacionat amb la gravetat",
		"Greenwich-based": "Basat en Greenwich",
		"Highways England": "Autopistes Anglaterra",
		Illinois: "Illinois",
		"Indian Ocean": "Oceà Índic",
		"Indian Subcontinent": "Subcontinent indi",
		Indiana: "Indiana",
		Indonesia: "Indonèsia",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irlanda i el Regne Unit",
		Italy: "Itàlia",
		Japan: "Japó",
		Jupiter: "Júpiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Líbia",
		Malaysia: "Malàisia",
		"Malaysia and Singapore": "Malàisia i Singapur",
		Mars: "Mart",
		Mercury: "Mercuri",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (peus dels EUA)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (peus internacionals)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (metres)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (peus dels EUA)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (peus internacionals)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (metres)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (peus dels EUA)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (peus internacionals)",
		"NAD 1983 (Meters)": "NAD 1983 (metres)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (metres)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (peus dels EUA)",
		"NAD 1983 (US Feet)": "NAD 1983 (peus dels EUA)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (peus internacionals)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (metres)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (peus dels EUA)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (peus internacionals)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (metres)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (peus dels EUA)",
		"National Grids": "Quadrícules nacionals",
		Navajo: "Navajo",
		Neptune: "Neptú",
		"New Beijing": "Nou Pequín",
		"New Zealand": "Nova Zelanda",
		"North America": "Amèrica del Nord",
		"Northern Hemisphere": "Hemisferi nord",
		Norway: "Noruega",
		Oceans: "Oceans",
		Oregon: "Oregon",
		"Other GCS": "Altres GCS",
		"Pacific Ocean": "Oceà Pacífic",
		Pluto: "Plutó",
		Polar: "Polar",
		Portugal: "Portugal",
		"Projected Coordinate Systems": "Sistemes de coordenades projectades",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Substituït",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturn",
		"Solar System": "Sistema solar",
		"South Africa": "Sud-àfrica",
		"South America": "Amèrica del Sud",
		"South Korea": "Corea del Sud",
		"Southern Hemisphere": "Hemisferi sud",
		"Spheroid-based": "Basat en l'esferoide",
		"State Plane": "State Plane",
		"State Systems": "Sistemes estatals",
		Sweden: "Suècia",
		"Switzerland and Liechtenstein": "Suïssa i Liechtenstein",
		Texas: "Texas",
		Tribal: "Tribal",
		Turkey: "Turquia",
		"US Feet": "Peus dels EUA",
		"USA and territories": "EUA i territoris",
		UTM: "UTM",
		Ukraine: "Ucraïna",
		"Unknown Height Systems": "Sistemes d'alçada desconeguda",
		Uranus: "Urà",
		Venus: "Venus",
		"Vertical Coordinate Systems": "Sistemes de coordenades verticals",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Món",
		"World (Sphere-based)": "Món (basat en una esfera)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Fet",
		noResults: "No s'han trobat resultats",
		searchPlaceholder: "Nom o WKID",
		browseTemplate: "Examina les plantilles de funció de ràster",
		saveTemplate: "Desa la plantilla de funció de ràster",
		preview: "Visualització prèvia",
		previewDescription: "Mostra una visualització prèvia del resultat abans d'executar l'anàlisi.",
		showPreview: "Mostra la visualització prèvia",
		previewLayer: "Visualització prèvia de la capa ${number}",
		newPreview: "Visualització prèvia nova",
		previewPopup: "Habiliteu la visualització prèvia dels resultats de l'anàlisi en funció dels paràmetres d'entrada.",
		updatePreviewLayer: "Actualitza la capa de visualització prèvia seleccionada",
		createPreviewLayer: "Crea una capa de visualització prèvia nova",
		maximumPreviewAllowed: "Nombre màxim de capes de visualització prèvia permeses: ${maxCount}",
		previewFailure: "Aquesta capa de visualització prèvia no està disponible. Comproveu els paràmetres d'entada i torneu a actualitzar aquesta capa de visualització prèvia.",
		header: "Selecciona l'element",
		content: "Teniu canvis sense desar a ${rftTitle}. Si torneu a començar amb una plantilla nova, aquests canvis es perdran.",
		dontSave: "No ho desis",
		"continue": "Continua",
		stretch: "Ajusta a la finestra",
		pan: "Desplaça",
		newTemplate: "Crea una plantilla nova",
		openTemplate: "Obre la plantilla",
		addFunction: "Afegeix funcions de ràster",
		addConstant: "Afegeix una constant",
		addRaster: "Afegeix una variable de ràster",
		move: "Mou",
		zoom: "Zoom",
		saveAs: "Anomena i desa",
		clear: "Esborra",
		addRasterFunctionTitle: "Afegeix funcions de ràster",
		templatePropertiesTitle: "Propietats de la plantilla",
		browseRFT: "Examina les plantilles de funció de ràster",
		defaultToolDescription: "Eina d'anàlisi ${toolTitle}.",
		openToolText: "Obre l'eina",
		toolDropdownText: "Menú desplegable d'eines",
		addToMap: "Confirma i afegeix al mapa",
		confirm: "Confirma",
		select: "Selecciona",
		selectTask: "Seleccioneu una tasca",
		unsupportedLayer: "Aquest paràmetre no admet les capes següents: ${layerName}.",
		viewDetails: "Visualitza tots els detalls de l'element",
		rename: "Canvia el nom",
		duplicate: "Duplica",
		launch: "Obre-ho per executar-ho",
		templateEditor: "Editor de plantilles",
		createItem: "Desa la plantilla de funcions de ràster",
		actionLabel: "Filtre",
		filterPopoverHeading: "Filtra les funcions",
		defaultSearchPlaceholder: "Cerca per nom",
		settings: "Configuració",
		summary: "Resum",
		definitionQuery: "Consulta de definició",
		matchVariables: "Variables de coincidència",
		unionDimension: "Dimensió d'unió",
		nameEditorPlaceholder: "Introduïu el títol",
		summaryEditorPlaceholder: "Introduïu una descripció breu.",
		definitionQueryPlaceholder: "Introduïu...",
		upload: "Puja",
		chooseImage: "Feu clic per triar un fitxer",
		update: "Actualitza",
		thumbnailErrors: {
			wrongImageType: "El tipus d'imatge seleccionat és incorrecte",
			notAvailable: "Miniatura no disponible",
			loadError: "No s'ha pogut carregar la imatge",
			chooseFile: "Feu clic per triar el fitxer"
		}
	}
};
const copy = "Copia";
const save = "Desa";
const title = "Títol";
const folder = "Carpeta";
const tags = "Etiquetes";
const savingMessage = "S'està desant l'element a";
const shareWith = "Comparteix-ho amb";
const share = "Comparteix";
const setSharingLevel = "Defineix el nivell d'ús compartit";
const setGroupSharing = "Defineix l'ús compartit del grup";
const owner = "Propietari";
const organization = "Organització";
const everyone = "Tothom (públic)";
const groups = "Grups:";
const type = "Tipus";
const mosaic = "Mosaic";
const itemGroup = "Grup d'elements";
const item = "Element";
const definitionQuery = "Consulta de definició";
const groupItemsBy = "Agrupa els elements per";
const groupFieldName = "Nom del camp de grup";
const tagFieldName = "Nom del camp d'etiqueta";
const noTitleTagErrorMsg = "Heu de proporcionar un títol per a l'element i etiquetes perquè el mapa es pugui trobar mitjançant cerques.";
const noTitleErrorMsg = "Heu de proporcionar un títol per a l'element.";
const noTagErrorMsg = "Heu de proporcionar com a mínim una etiqueta per ajudar les persones a trobar el vostre element mitjançant cerques.";
const error = "Error";
const warning = "Avís";
const success = "Correcte";
const details = "Detalls:";
const tryAgain = "Torna-ho a provar";
const toolModeler = {
	save: "Desa",
	editProperties: "Edita les propietats",
	saveAs: "Anomena i desa",
	savingNotification: "S'estan desant els canvis a l'element...",
	savingTitle: "S'està desant",
	saveFailedMessage: "No s'han pogut desar els canvis.",
	saveWithErrorsMessage: "Els canvis s'han desat amb els errors següents.",
	viewItemMessage: "Visualitzeu l'element desat",
	here: "aquí.",
	itemCreatedMessage: "S'ha creat un element nou.",
	clickToViewItemMessage: "Feu clic a D'acord per visualitzar la pàgina de detalls de l'element; feu clic a Cancel·la per continuar.",
	readingFailed: "No s'ha pogut carregar la plantilla de funció de ràster seleccionada.",
	failedToLoadXML: "No s'ha pogut pujar la plantilla de funció ràster seleccionada en format XML.",
	learnMore: "Més informació",
	overwriteTitle: "Confirma la sobreescriptura",
	overwriteMessage: "Voleu sobreescriure l'element existent?",
	overwriteSuccessMessage: "L'element s'ha actualitzat."
};
const toolEditor = {
	run: "Executa",
	save: "Desa",
	deleteSelected: "Suprimeix els elements seleccionats",
	addRaster: "Afegeix un ràster",
	addScalar: "Afegeix un escalar",
	layout: "Disseny automàtic",
	errorTitle: "Error",
	invalidToolMessage: "La plantilla de funció de ràster no és vàlida.",
	out: "Fora",
	zoomIn: "Amplia",
	zoomOut: "Redueix",
	zoomToFit: "Ajusta a la finestra",
	panOn: "Canvia al mode panoràmic",
	panOff: "Desactiva el mode panoràmic",
	defaultModelName: "Model d'eina",
	defaultRasterName: "Ràster"
};
const toolDetailsEditor = {
	defaultToolName: "Plantilla de funció de ràster",
	defaultToolDescription: "Afegiu un resum breu sobre la funció de ràster.",
	defaultHelpText: "Feu clic a la icona d'ajuda per editar el text d'ajuda",
	editHelpTitle: "Edita l'ajuda",
	saveLabel: "Desa",
	cancelLabel: "Cancel·la",
	thumbnail: {
		wrongImageType: "El tipus d'imatge seleccionat és incorrecte",
		notAvailable: "Miniatura no disponible",
		loadError: "No s'ha pogut carregar la imatge",
		chooseFile: "Feu clic per triar el fitxer"
	}
};
const saveUtils = {
	thumbnail: "Miniatura",
	sharing: "Ús compartit"
};
const close = "Tanca";
const unsavedWarningExisting = "Voleu desar els canvis a l'element <b>${itemTitle}</b> ?";
const unsavedWarningNew = "Voleu desar els canvis?";
const saveAs = "Anomena i desa";
const dontSave = "No ho desis";
const unsavedTitle = "Canvis sense desar";
const invalidRFTMessage = "La plantilla de funció de ràster creada no és vàlida.";
const errorTitle = "Error";
const breadcrumb = "Editor de funcions ràster";
const breadcrumbEditor = "Contingut > Editor de funcions ràster";
const viewerModeTitle = "Només de lectura";
const viewerModeMessage = "L'element de la plantilla de funció de ràster és només de lectura No es poden desar els canvis.";
const userStartDirection = "Seleccioneu una funció per començar a crear una plantilla de funció de ràster.";
const selectFunction = "Afegeix una funció";
const deselectFunction = "Elimina la funció";
const dialogTitle = "Sistema";
const category = "Categories";
const search = "Cerca funcions de ràster";
const categoryNames = {
	analysis: "Anàlisi",
	appearance: "Aparença",
	classification: "Classificació",
	conversion: "Conversió",
	correction: "Correcció",
	dataManagement: "Administració de dades",
	distance: "Distància",
	distanceLegacy: "Distància (heretat)",
	hydrology: "Hidrologia",
	math: "Matemàtiques",
	mathConditional: "Matemàtiques: condicionals",
	mathLogical: "Matemàtiques: lògiques",
	mathTrigonometric: "Matemàtiques: trigonomètriques",
	reclass: "Reclassifica",
	statistical: "Estadística",
	surface: "Superfície"
};
const commonStrings_ca = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_ca);


//# sourceMappingURL=common-strings.ca-ada3d60c.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,