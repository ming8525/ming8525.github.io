"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-3691da"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/interfaces-879f83d7.js":
/*!*******************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/interfaces-879f83d7.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   F: () => (/* binding */ FunctionType),
/* harmony export */   R: () => (/* binding */ RFxListViewMode)
/* harmony export */ });
/**
 * Defines how a raster function template is applied on an image service
 */
const FunctionType = {
    Mosaic: 0,
    Item: 1,
    ItemGroup: 2
};
/**
 * CORE: the list is shown in rfx-editor-core -> has an action item in the end of the function list item.
 */
const RFxListViewMode = {
    CORE: "CORE",
    STANDARD: "STANDARD"
};



//# sourceMappingURL=interfaces-879f83d7.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js":
/*!****************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DefaultLocale),
/* harmony export */   S: () => (/* binding */ SupportedLocales),
/* harmony export */   a: () => (/* binding */ getDirectionBasedOnRTL),
/* harmony export */   b: () => (/* binding */ fetchComponentLocaleStrings),
/* harmony export */   f: () => (/* binding */ formatLocalizedHelpUrl),
/* harmony export */   g: () => (/* binding */ getLocaleInfo)
/* harmony export */ });
/**
 * Locale list reference [JSAPI](https://devtopia.esri.com/WebGIS/arcgis-js-api/tree/master/esri/nls)
 * also has Hindi: "hi"
 */
const SupportedLocales = {
    Arabic: "ar",
    Bosnian: "bs",
    Bulgarian: "bg",
    Catalan: "ca",
    Czech: "cs",
    Danish: "da",
    German: "de",
    Greek: "el",
    English: "en",
    EnglishUSA: "en-US",
    Spanish: "es",
    Estonian: "et",
    Finnish: "fi",
    French: "fr",
    Hebrew: "he",
    Hindi: "hi",
    Croatian: "hr",
    Hungarian: "hu",
    Indonesian: "id",
    Italian: "it",
    Japanese: "ja",
    Korean: "ko",
    Lithuanian: "lt",
    Latvian: "lv",
    NorwegianBokml: "nb",
    Dutch: "nl",
    Polish: "pl",
    PortugueseBrazil: "pt-BR",
    PortuguesePortugal: "pt-PT",
    Romanian: "ro",
    Russian: "ru",
    Serbian: "sr",
    Slovenian: "sl",
    Slovak: "sk",
    Swedish: "sv",
    Thai: "th",
    Turkish: "tr",
    Ukrainian: "uk",
    Vietnamese: "vi",
    ChineseChina: "zh-CN",
    ChineseHongKong: "zh-HK",
    ChineseTaiwan: "zh-TW"
};
const SupportedOnlineHelpLocales = ["ar", "de", "es", "fr", "it", "ja", "ko", "ru", "pl", "pt-br", "zh-cn"];
const LocaleMap = {
    "en-AU": "en",
    "en-CA": "en",
    "en-GB": "en",
    "en-US": "en",
    "es-ES": "es",
    "es-MX": "es",
    "de-CH": "de",
    "de-AT": "de",
    "de-DE": "de",
    "fr-CH": "fr",
    "fr-FR": "fr",
    "it-CH": "it",
    "it-IT": "it",
    ind: "id",
    ukr: "uk"
};
/**
 * List of supported locales that are RTL
 * reference: https://devtopia.esri.com/WebGIS/arcgis-js-api/blob/4master/esri/intl/locale.ts
 */
const RTLLocales = [SupportedLocales.Arabic, SupportedLocales.Hebrew];
const DefaultLocale = SupportedLocales.English;
/**
 * Utility to centralize logic, and return "rtl" or "rtl" depending on rtl boolean
 * @param {boolean} rtl whether locale is in Right to Left direction
 * @returns {"ltr" | "rtl"} codes that can be passed to "dir" prop of a component.
 */
function getDirectionBasedOnRTL(rtl) {
    return rtl === true ? "rtl" : "ltr";
}
/**
 * Helper function to find the closest element crossing multiple (parent) shadowDOM boundaries.
 * The implementation is based on [this](https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd) solution.
 *
 * @param {string} selector
 * @param {Element} base
 */
function getClosestElement(selector, base) {
    function closestFrom(el) {
        let element;
        if (el === undefined || el === document || el === window)
            element = null;
        else {
            const found = el.closest(selector);
            element = found || closestFrom(el.getRootNode().host);
        }
        return element;
    }
    return closestFrom(base);
}
/**
 * Converts the given locale to a supported locale using the provided locale map.
 *
 * @param {string | undefined} locale - The locale to be converted.
 * @param {object} localeMap - A map of locales to supported locales.
 * @returns {string} - The supported locale.
 */
function convertToSupportedLocale(locale, localeMap) {
    const defaultLocale = DefaultLocale;
    let localeSanitized = locale?.toLowerCase();
    if (localeSanitized !== undefined && localeSanitized.indexOf("-") !== -1) {
        const [lang, region] = localeSanitized.split("-");
        localeSanitized = `${lang}-${region.toUpperCase()}`;
    }
    if (!localeSanitized) {
        return defaultLocale;
    }
    const localeMapKeys = Object.keys(LocaleMap);
    if (localeMapKeys.includes(localeSanitized) === true) {
        return localeMap[localeSanitized];
    }
    return localeSanitized;
}
/**
 * Retrieves locale information; In the case of Regional codes (en-au) it is converted to a supported locale (en).
 *
 * @param {Element} [element=document.documentElement] - The element to search for locale information.
 * @returns {Object} An object containing the locale information.
 * @property {string} locale - The locale code.
 * @property {boolean} rtl - A flag indicating whether the locale is right-to-left.
 */
function getLocaleInfo(element = document.documentElement) {
    // Gets the closest element with a lang attribute and falls back to navigator.language if not found
    const closestElement = getClosestElement("[lang]", element);
    const locale = closestElement?.lang ?? window.navigator.language;
    const supportedLocales = Object.values(SupportedLocales);
    const defaultLocale = DefaultLocale;
    const convertedLocale = convertToSupportedLocale(locale, LocaleMap);
    const isSupportedLocale = supportedLocales.includes(convertedLocale);
    return {
        locale: isSupportedLocale ? convertedLocale : defaultLocale,
        rtl: RTLLocales.includes(locale)
    };
}
/**
 * Fetches the locale file of the given component; defaults to `"en"` locale
 * @param componentName
 * @param props
 * @param locale
 * @param resourcesUrl
 * @param props.path
 * @param props.locale
 * @param props.baseURL
 */
async function fetchLocaleStrings(props) {
    const { path, locale, baseURL } = props;
    // Using the getPublicPath method that leverages `data-resources-url` currently this is not working.
    // const rUrl = getPublicPath(componentName) || resourcesUrl;
    let localeData = {};
    try {
        const response = await fetch(`${baseURL}t9n/${path}.t9n.${locale}.json`);
        localeData = await response.json();
    }
    catch (e) {
        const defaultResponse = await fetch(`${baseURL}t9n/${path}.t9n.${DefaultLocale}.json`);
        localeData = await defaultResponse.json();
    }
    return localeData;
}
async function fetchComponentLocaleStrings(element, baseURL) {
    const componentName = element.tagName.toLowerCase();
    const { locale, rtl } = getLocaleInfo(element);
    const strings = await fetchLocaleStrings({ path: componentName, locale, baseURL });
    return { strings, dir: getDirectionBasedOnRTL(rtl), locale: locale };
}
/**
 * Formats a URL to link to
 * @param {string} url the url string from after the locale
 * @param {string} basePath the base path from the signed in portal object.
 * @param {string} locale the locale abbreviation for the browser.
 * @returns {string} the formatted url.
 */
function formatLocalizedHelpUrl(url, basePath, locale = "en") {
    let localeSanitized = locale;
    const localeMapKeys = Object.keys(LocaleMap);
    if (localeMapKeys.includes(locale) === true) {
        localeSanitized = LocaleMap[locale];
    }
    const localeInLowerCase = localeSanitized.toLocaleLowerCase();
    if (SupportedOnlineHelpLocales.includes(localeInLowerCase) === true) {
        // following regex tests /en/ is present in url and replaces it with the locale
        // https://docdev.arcgis.com/en/arcgis-online/analyze/aggregate-points-mv.htm
        // self Response only provides with `en` locale not as per the user locale or current app locale
        // so we need this replace call.
        basePath = basePath.replace(/^https?:\/\/[^/]+\/en/, (match) => match.replace("en", localeInLowerCase));
    }
    const learnMoreUrl = `${basePath}analyze/${url}`;
    return learnMoreUrl;
}



//# sourceMappingURL=localization-helper-4819b67d.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-functions-list_3.entry.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-functions-list_3.entry.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rfx_functions_list: () => (/* binding */ RfxFunctionsList),
/* harmony export */   rfx_list_view: () => (/* binding */ RasterFunctionsList),
/* harmony export */   rfx_search: () => (/* binding */ RfxSearch)
/* harmony export */ });
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui-utils-928a4096.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js");
/* harmony import */ var _arcgis_core_identity_IdentityManager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @arcgis/core/identity/IdentityManager.js */ "@arcgis/core/identity/IdentityManager.js");
/* harmony import */ var _arcgis_core_core_urlUtils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @arcgis/core/core/urlUtils.js */ "@arcgis/core/core/urlUtils.js");
/* harmony import */ var _arcgis_core_layers_Layer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @arcgis/core/layers/Layer.js */ "@arcgis/core/layers/Layer.js");
/* harmony import */ var _arcgis_core_layers_ImageryLayer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @arcgis/core/layers/ImageryLayer.js */ "@arcgis/core/layers/ImageryLayer.js");
/* harmony import */ var _arcgis_core_smartMapping_raster_renderers_stretch_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @arcgis/core/smartMapping/raster/renderers/stretch.js */ "@arcgis/core/smartMapping/raster/renderers/stretch.js");
/* harmony import */ var _common_fda1462e_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./common-fda1462e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-fda1462e.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");
/* harmony import */ var _interfaces_879f83d7_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./interfaces-879f83d7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/interfaces-879f83d7.js");
/* harmony import */ var _functions_f1f2dffd_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./functions-f1f2dffd.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/functions-f1f2dffd.js");
/* harmony import */ var _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./_Uint8Array-68e1e3f9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_Uint8Array-68e1e3f9.js");
/* harmony import */ var _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./_getTag-96af029d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_getTag-96af029d.js");
/* harmony import */ var _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./resources-27c66f5c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/resources-27c66f5c.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
























const HTMLClasses$1 = {
    noResultsContainer: "no-results-container",
    toolCategoryWrapper: "tool-category-wrapper",
    noResultsIcon: "no-results-icon",
    toolsListItem: "tools-list-item"
};

const rfxFunctionsListCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}:host{display:flex;flex-direction:column;flex-wrap:wrap}.tool-category-wrapper{width:100%}.no-results-container{justify-content:center;display:flex;flex-direction:column;width:100%;align-items:center;color:var(--calcite-color-text-3)}.no-results-icon{margin-top:1.5rem}";

const RfxFunctionsList = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.triggerChangePanel = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "triggerChangePanel", 7);
        this.triggerSelectTool = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "triggerSelectTool", 7);
        this.openCategoriesChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "openCategoriesChange", 7);
        /**
         * Gets called when the user selects the tool
         * @param rfxFunctionItem
         * @category Private
         */
        this.modifyPanelState = (rfxFunctionItem) => {
            this.triggerSelectTool.emit(rfxFunctionItem);
            this.triggerChangePanel.emit(1);
        };
        /**
         * Gets called to render the tool icon
         * @param rfxFunctionItem
         * @category Private
         */
        this.getRfxFunctionIcon = (rfxFunctionItem) => {
            let icon = "";
            // const { analysisEngine } = rfxFunctionItem;
            // TODO: logic can be reused when each function has unique icon
            const functionTypes = ["raster", "geoanalytics"];
            const functionType = functionTypes[0];
            switch (functionType) {
                case "raster":
                    icon = "raster-analysis";
                    break;
                case "geoanalytics":
                    icon = "map-pin";
                    break;
                default:
                    icon = "hammer";
            }
            return rfxFunctionItem.icon ?? icon;
        };
        /**
         * Gets called to render the function icon
         * @category Private
         */
        this.displayResults = () => {
            const keys = Array.from(this.rfxFunctionsMap.keys());
            return this.searchIsActive ? ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { selectionAppearance: "border" }, this.renderFunctionSearchList(keys))) : (this.renderRfxFunctionsCategoriesList(keys));
        };
        /**
         * Renders searched calcite-list-items when search is active
         * @param keys Toolmap keys
         * @returns array of category calcite-lists
         * @category Private
         */
        this.renderFunctionSearchList = (keys) => {
            const calciteListItems = [];
            keys.map((category) => {
                const functionsInCategory = this.rfxFunctionsMap.get(category);
                if (functionsInCategory !== undefined && functionsInCategory.length > 0) {
                    calciteListItems.push(...this.renderRfxFunctions(category));
                }
            });
            return calciteListItems;
        };
        /**
         * Renders all the lists when search is not active
         * @param keys Toolmap keys
         * @returns array of category calcite-lists
         * @category Private
         */
        this.renderRfxFunctionsCategoriesList = (keys) => {
            const rfxFunctionCategoryBlocks = keys.map((category, i) => {
                const functionsInCategory = this.rfxFunctionsMap.get(category);
                if (functionsInCategory !== undefined && functionsInCategory.length > 0) {
                    return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: HTMLClasses$1.toolCategoryWrapper, dir: this.dir, heading: this.rfxFunctionsMap.get(category)[0].categoryTitle, collapsible: true, open: this.openCategories.has(i), onCalciteBlockToggle: () => this.openCategoriesChange.emit(i) }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { selectionAppearance: "border" }, this.renderRfxFunctions(category))));
                }
            });
            return rfxFunctionCategoryBlocks;
        };
        /**
         * Renders the no results message and icon
         * @category Render UX
         */
        this.renderNoResults = () => {
            return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses$1.noResultsContainer }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { class: HTMLClasses$1.noResultsIcon, icon: "search", scale: "m" }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", null, this.strings.noResults)));
        };
        /**
         * Renders tooltip with function description
         * @category Render UX
         */
        this.createRfxFunctionCategoryHelp = () => {
            this.rfxFunctionHelpTooltip = document.createElement("calcite-tooltip");
            document.body.appendChild(this.rfxFunctionHelpTooltip);
        };
        /**
         * Calls the createRfxFunctionCategoryHelp method to show the tooltip after a 500 millisecond delay
         * @param e
         * @param toolTitle
         * @param toolDescription
         * @category Event Handler
         */
        this.showRfxFunctionTooltip = (e, toolTitle, toolDescription) => {
            this.removeHelpTooltip();
            const targetElement = e.target;
            this.createRfxFunctionCategoryHelp();
            if (this.rfxFunctionHelpTooltip !== undefined && targetElement !== undefined) {
                this.rfxFunctionHelpTooltip.referenceElement = targetElement;
                this.rfxFunctionHelpTooltip.placement = "left";
                this.rfxFunctionHelpTooltip.innerText =
                    toolDescription ?? (0,_common_fda1462e_js__WEBPACK_IMPORTED_MODULE_9__.f)(this.strings.defaultToolDescription, { toolTitle });
                this.hoverTimer = setTimeout(() => {
                    if (this.rfxFunctionHelpTooltip !== undefined) {
                        this.rfxFunctionHelpTooltip.open = true;
                    }
                }, 500);
            }
        };
        /**
         * Removes tooltip for tool
         * @category Private
         */
        this.removeHelpTooltip = () => {
            clearTimeout(this.hoverTimer);
            if (this.rfxFunctionHelpTooltip !== undefined) {
                this.rfxFunctionHelpTooltip?.remove();
                this.rfxFunctionHelpTooltip.open = false;
            }
        };
        /**
         * Renders the list of functions
         * @category Render UX
         * @param category
         * @returns HTMLElement
         */
        this.renderRfxFunctions = (category) => {
            return (this.rfxFunctionsMap.get(category)?.map((rfxFunctionItem) => {
                return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { class: HTMLClasses$1.toolsListItem, label: rfxFunctionItem.title, description: this.showFunctionDescription === true ? rfxFunctionItem.description : "", onClick: () => this.isEmbeddedInCoreApp ? null : this.modifyPanelState(rfxFunctionItem), onMouseOver: (event) => this.showRfxFunctionTooltip(event, rfxFunctionItem.title, rfxFunctionItem.description), onMouseOut: this.removeHelpTooltip, value: `${category}_${rfxFunctionItem.toolName}`, key: `${category}_${rfxFunctionItem.toolName}`, scale: this.scale }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: this.getRfxFunctionIcon(rfxFunctionItem), slot: "content-start", scale: this.scale }), this.isEmbeddedInCoreApp ? ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { id: "add-tool", icon: "plus-circle", slot: "content-end", scale: this.scale, onClick: () => this.modifyPanelState(rfxFunctionItem) }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: "add-tool", label: "Hello" }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, "Hello")))) : null));
            }) ?? []);
        };
        this.categories = undefined;
        this.mode = _interfaces_879f83d7_js__WEBPACK_IMPORTED_MODULE_17__.R.STANDARD;
        this.rfxFunctionsArray = [];
        this.searchIsActive = undefined;
        this.scale = _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.U.Scale;
        this.showFunctionDescription = undefined;
        this.openCategories = new Set([0]);
        this.rfxFunctionsMap = new Map();
    }
    onBuildRfxFunctionsMap() {
        const newFunctionsMap = new Map();
        for (let i = 0; i < this.categories?.length; i += 1) {
            newFunctionsMap.set(this.categories[i], this.rfxFunctionsArray.filter((rfxFunctionItem) => {
                return rfxFunctionItem.categoryName === this.categories[i];
            }));
        }
        this.rfxFunctionsMap = newFunctionsMap;
    }
    get isEmbeddedInCoreApp() {
        return this.mode === _interfaces_879f83d7_js__WEBPACK_IMPORTED_MODULE_17__.R.CORE;
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.dir } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_1__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
        this.onBuildRfxFunctionsMap();
    }
    /**
     * @category Lifestyle
     */
    disconnectedCallback() {
        this.removeHelpTooltip();
        this.rfxFunctionHelpTooltip?.remove();
    }
    /**
     * @category Lifecycle
     * Render lifecycle method
     */
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.H, null, this.rfxFunctionsArray.length > 0 ? this.displayResults() : this.renderNoResults()));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
    static get watchers() { return {
        "categories": ["onBuildRfxFunctionsMap"],
        "rfxFunctionsArray": ["onBuildRfxFunctionsMap"]
    }; }
};
RfxFunctionsList.style = rfxFunctionsListCss;

const RasterFunctionsList = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.triggerSelectFunction = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "triggerSelectFunction", 7);
        /**
         *  Analysis studio search's calcite filter's value
         *  @category Private
         */
        this.searchValue = "";
        /**
         * The most recent filter selection, to filter search results
         * @category Private
         */
        this.filterValue = [];
        /**
         * @category Private
         * @param event the search results
         */
        this.searchCallback = (event) => {
            this.searchValue = event.detail.searchValue;
            this.functionsList = [...event.detail.rfxFunctions];
            this.filterValue = [...event.detail.filterValue];
        };
        /**
         * handler called as soon as the panel changes
         * @category Private
         * @param panelChangeEvent custom event containing the direction where the flow is to move
         */
        this.handleTriggerPanelChange = (panelChangeEvent) => {
        };
        /**
         * handler called as soon as a rfx is opened or selected from the rfx list
         * @category Private
         * @param selectToolEvent custom event containing the data for the tool selected
         */
        this.handleTriggerSelectTool = (selectToolEvent) => {
            const selectedRFx = selectToolEvent.detail;
            this.triggerSelectFunction.emit(selectedRFx.toolName);
        };
        /**
         * handler called as soon as a category in the list is open
         * @category Private
         * @param event custom event containing the category number
         */
        this.handleOpenCategoryChange = (event) => {
            const categoryNumber = event.detail;
            if (this.openCategories.has(categoryNumber)) {
                this.openCategories.delete(categoryNumber);
            }
            else {
                this.openCategories.add(categoryNumber);
            }
        };
        this.functionsList = [];
        this.mode = undefined;
        this.openCategories = new Set([0]);
        this.showToolDescription = undefined;
        this.scale = _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.U.Scale;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * @category Lifecycle
     */
    async connectedCallback() {
        const { rfxFunctions, rfxCategories } = await (0,_functions_f1f2dffd_js__WEBPACK_IMPORTED_MODULE_18__.a)();
        this.rfxFunctionsArray = rfxFunctions.map((rasterTool) => {
            return {
                analysisEngine: "raster",
                categoryName: rasterTool.category,
                categoryTitle: rasterTool.categoryTitle,
                description: rasterTool.snippet,
                icon: "raster-function",
                title: rasterTool.title,
                toolName: rasterTool.name,
                analysisType: "rft"
            };
        });
        if (this.rfxFunctionsArray?.length > -1) {
            this.rfxCategories = rfxCategories;
            this.functionsList = [...this.rfxFunctionsArray];
        }
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-search", { rfxFunctionsArray: this.rfxFunctionsArray ?? [], onAnalysisStudioSearchUpdate: this.searchCallback, searchValue: this.searchValue, filterValue: this.filterValue, hideFilter: true }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-functions-list", { rfxFunctionsArray: this.functionsList, categories: this.rfxCategories, searchIsActive: this.searchValue !== "", showFunctionDescription: false, mode: this.mode, scale: this.scale, onTriggerChangePanel: this.handleTriggerPanelChange, onTriggerSelectTool: this.handleTriggerSelectTool, openCategories: this.openCategories, onOpenCategoriesChange: this.handleOpenCategoryChange })));
    }
};

const HTMLClasses = {
    actionPadding: "action-padding",
    rtl: "analysis--rtl"
};

const rfxSearchCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}:host{display:flex;background-color:var(--calcite-color-foreground-1);border-bottom:1px solid var(--calcite-color-border-3)}.action-padding{padding-right:var(--analysis-half-spacing);padding-left:0rem}:host(.analysis--rtl) .action-padding{padding-left:var(--analysis-half-spacing);padding-right:0rem}";

const RfxSearch = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.analysisStudioSearchUpdate = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "analysisStudioSearchUpdate", 7);
        /**
         * TODO: Currently filter is hidden and doesn't work.
         * Applies the filter to an input
         * @param data
         * @param filterSelection
         * @category private
         */
        this.filterList = (data, filterSelection) => {
            // return data.filter((rfxFunctionItem: RfxFunctionItem) => {
            // return filterSelection.length === 0 ? true : filterSelection.includes(rfxFunctionItem.analysisEngine);
            // });
            return data.filter(() => {
                return filterSelection.length === 0 ? true : false;
            });
        };
        /**
         * Creates the array of functions that only contain searchable information
         * @param data
         * @category private
         */
        this.getSearchableFunctionsList = (data) => {
            const rfxFunctions = data ?? this.rfxFunctionsArray;
            return rfxFunctions.map((rfxFunctionItem) => {
                return {
                    title: rfxFunctionItem.title,
                    toolName: rfxFunctionItem.toolName,
                    keys: rfxFunctionItem.keys
                };
            });
        };
        /**
         * Backtracks from an array of RfxSearchableItems to RfxFunctionItems
         * @param searchList
         * @category private
         */
        this.getToolsListFromSearchList = (searchList) => {
            return searchList.map((searchableItem) => {
                return this.rfxFunctionsArray.filter((rfxFunctionItem) => {
                    return (searchableItem.title === rfxFunctionItem.title &&
                        searchableItem.toolName === rfxFunctionItem.toolName);
                })[0];
            });
        };
        /**
         * Called whenever the search is updated and emits an event to parent components containing the results of the search
         * @category Private
         * @param event the results of the search
         */
        this.onAnalysisStudioSearchUpdate = () => {
            if (this.calciteFilter.value !== this.searchValue) {
                const filterResult = this.calciteFilter.filteredItems;
                const filteredFunctions = this.filterList(this.getToolsListFromSearchList(filterResult), this.filterValue);
                this.rfxFunctionItems = [...filteredFunctions];
                this.analysisStudioSearchUpdate.emit({
                    rfxFunctions: this.rfxFunctionItems,
                    searchValue: this.calciteFilter.value ?? "",
                    filterValue: this.filterValue
                });
            }
        };
        /**
         * This function is called when the filter selection is updated and emits an event
         * with updated filter and search values
         * @param {string} filterItemValue the value of the filter item that was selected
         * @category private
         */
        this.handleFilterItemSelection = (filterItemValue) => {
            const isSelected = this.filterValue.includes(filterItemValue);
            const newFilterSelection = isSelected === false
                ? [...this.filterValue, filterItemValue]
                : this.filterValue.filter((value) => value !== filterItemValue);
            const data = this.calciteFilter.value === ""
                ? this.rfxFunctionsArray
                : this.getToolsListFromSearchList(this.calciteFilter.filteredItems);
            this.rfxFunctionItems = this.filterList(data, newFilterSelection);
            this.analysisStudioSearchUpdate.emit({
                rfxFunctions: this.rfxFunctionItems,
                searchValue: this.searchValue ?? "",
                filterValue: newFilterSelection
            });
        };
        this.open = false;
        this.rfxFunctionItems = undefined;
        this.rfxFunctionsArray = undefined;
        this.searchValue = undefined;
        this.filterValue = undefined;
        this.placeholderText = undefined;
        this.hideFilter = false;
    }
    onDataChange(newValue) {
        this.getSearchableFunctionsList(newValue);
    }
    /**
     * @category Lifecycle
     */
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.dir } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_1__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
        // TODO: get locale, implemnt later when we add support for "keys"
        const commonT9n = {
            toolInfoKeys: {}
        };
        // const commonT9n = await fetchLocaleStrings({
        //   baseURL: `${getAssetPath("assets")}/`,
        //   locale: state.locale,
        //   path: "common"
        // });
        this.searchKeys = commonT9n.toolInfoKeys;
        this.rfxFunctionsArray.forEach((rfxFunctionItem) => {
            rfxFunctionItem.keys = (rfxFunctionItem.keys ?? []).map((key) => {
                const formattedKey = key.replace("$", "");
                return this.searchKeys?.[formattedKey];
            });
            return rfxFunctionItem;
        });
        this.rfxFunctionItems = [...this.rfxFunctionsArray];
    }
    /**
     * @category Lifecycle
     */
    componentDidLoad() {
        // Forces the calcite filter to generate filteredItems without
        // firing the search change event. Needed for filterValue updates
        // Issue documented in calcite-components repo #4111
        this.calciteFilter.items = [...this.calciteFilter.items];
    }
    /**
     * TODO: currently does no filtering, will be useful when filter support is added
     * Renders a dropdown item for the filter dropdown
     * @param {string} value the value of the dropdown item, used to determine if the item is selected
     * @param {string} label the label of the dropdown item
     * @category private
     */
    // private renderDropdownItem(value: string, label: string): HTMLCalciteDropdownItemElement {
    //   return (
    //     <calcite-dropdown-item
    //       key={value}
    //       label={label}
    //       selected={this.filterValue.includes(value)}
    //       onCalciteDropdownItemSelect={() => this.handleFilterItemSelection(value)}
    //     >
    //       {label}
    //     </calcite-dropdown-item>
    //   );
    // }
    /**
     * TODO: currently does no filtering, will be useful when filter support is added
     * Conditionally renders the dropdown menu that allows the user to filter the functions by type
     * if there is only one type of function, the dropdown is not rendered
     * @category private
     */
    // private renderDropdown(): HTMLCalciteDropdownGroupElement {
    //   const performableTypes = {
    //     // standard: state.canPerformStandard,
    //     // raster: state.canPerformRaster,
    //     standard: false,
    //     raster: true,
    //     geoanalytics: false // FIXME: Revert change once geoanalytics tools are available
    //   };
    //   // Only render the dropdown if there are multiple types of tools that can be performed
    //   const shouldRender =
    //     Object.values(performableTypes).filter((canPerform) => canPerform === true).length > 1;
    //   return (
    //     shouldRender && (
    //       <calcite-dropdown placement="bottom-start" overlayPositioning="fixed" closeOnSelectDisabled>
    //         <calcite-action
    //           text={this.strings.actionLabel}
    //           icon="sliders"
    //           appearance="solid"
    //           scale="s"
    //           class={HTMLClasses.actionPadding}
    //           slot="trigger"
    //         >
    //           <calcite-tooltip
    //             label={this.strings.actionLabel}
    //             overlayPositioning="fixed"
    //             closeOnClick
    //             slot="tooltip"
    //             placement="trailing"
    //           >
    //             {this.strings.actionLabel}
    //           </calcite-tooltip>
    //         </calcite-action>
    //         <calcite-dropdown-group
    //           key="tools-filter"
    //           groupTitle={this.strings.analysisEngine}
    //           selectionMode="multiple"
    //         >
    //           {performableTypes.raster &&
    //             this.renderDropdownItem("raster", this.strings.rasterAnalysis)}
    //         </calcite-dropdown-group>
    //       </calcite-dropdown>
    //     )
    //   );
    // }
    /**
     * @category Lifecycle
     * Render lifecycle method
     */
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: { [HTMLClasses.rtl]: this.dir === "rtl" } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-filter", { placeholder: this.placeholderText ?? this.strings.defaultSearchPlaceholder, items: this.getSearchableFunctionsList(this.rfxFunctionsArray), onCalciteFilterChange: this.onAnalysisStudioSearchUpdate, value: this.searchValue, ref: (e) => {
                this.calciteFilter = e;
            }, dir: this.dir })));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
    static get watchers() { return {
        "rfxFunctionItems": ["onDataChange"]
    }; }
};
RfxSearch.style = rfxSearchCss;



//# sourceMappingURL=rfx-functions-list_3.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js":
/*!********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ ARGS_KEYWORD),
/* harmony export */   F: () => (/* binding */ FUNCTION_KEYWORD),
/* harmony export */   R: () => (/* binding */ RFV_TYPE),
/* harmony export */   T: () => (/* binding */ TYPE_KEYWORD),
/* harmony export */   a: () => (/* binding */ isRFxArg),
/* harmony export */   b: () => (/* binding */ RFT_TYPE),
/* harmony export */   c: () => (/* binding */ isReferencedObject),
/* harmony export */   d: () => (/* binding */ isNumber),
/* harmony export */   e: () => (/* binding */ isWidgetValueBoolean),
/* harmony export */   f: () => (/* binding */ isColorRamp),
/* harmony export */   g: () => (/* binding */ isRecordSet),
/* harmony export */   h: () => (/* binding */ isFeatureLayer),
/* harmony export */   i: () => (/* binding */ isEmptyDataItem),
/* harmony export */   j: () => (/* binding */ isTileLayer),
/* harmony export */   k: () => (/* binding */ isDynamicImageryLayer),
/* harmony export */   l: () => (/* binding */ isImageryLayer),
/* harmony export */   m: () => (/* binding */ isImageryTileLayer)
/* harmony export */ });
/* harmony import */ var _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getTag-96af029d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_getTag-96af029d.js");


/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if ((0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_0__.i)(value) &&
      ((0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_0__.a)(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_0__.b)(value) || (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_0__.c)(value) || (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_0__.d)(value))) {
    return !value.length;
  }
  var tag = (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_0__.g)(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if ((0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_0__.e)(value)) {
    return !(0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_0__.f)(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

const RFT_TYPE = "RasterFunctionTemplate";
const TYPE_KEYWORD = "type";
const RFV_TYPE = "RasterFunctionVariable";
const ARGS_KEYWORD = "arguments";
const FUNCTION_KEYWORD = "function";
function isReferencedObject(obj) {
    if (!obj) {
        return false;
    }
    if (obj._object_ref_id != null) {
        return true;
    }
    return false;
}
function isNumber(x) {
    x = String(x).trim();
    if (x === "") {
        return false;
    }
    return /^[+-]?(\d+)?(\.\d+)?$/.test(x);
}
function isWidgetValueBoolean(x) {
    x = String(x).trim();
    return ["true", "false"].indexOf(x) >= 0;
}
function isColorRamp(rfxArg) {
    if (!rfxArg) {
        return false;
    }
    if (rfxArg.type && rfxArg.type.toLowerCase().indexOf("colorramp") >= 0) {
        return true;
    }
    if (rfxArg.value && rfxArg.value.type && rfxArg.value.type.toLowerCase().indexOf("colorramp") >= 0) {
        return true;
    }
    return false;
}
function isRecordSet(rfxArg) {
    return rfxArg.type && rfxArg.type.toLowerCase().indexOf("recordset") >= 0;
}
/**
 * Determines whether the given RFT element is an RFx argument.
 *
 * @param {any} rftElement - The RFT element to check.
 * @returns {boolean} `true` if the given element is RasterFunctionTemplate,
 * RasterFunctionVariable, isColorRamp, isRecordSet; `false` otherwise.
 */
function isRFxArg(rftElement) {
    if (!rftElement) {
        return false;
    }
    const type = rftElement.type;
    return [RFT_TYPE, RFV_TYPE].indexOf(type) >= 0 || isColorRamp(rftElement) || isRecordSet(rftElement);
}
/**
 * Determines if the input is a FeatureLayer
 * @param {__esri.Layer} layer the layer to check the type of
 * @returns {layer is __esri.FeatureLayer} layer is a FeatureLayer
 */
function isFeatureLayer(layer) {
    return layer.type === "feature";
}
/**
 * Determines if the input is a TileLayer
 * @param {__esri.Layer} layer the layer to check the type of
 * @returns {layer is __esri.TileLayer} layer is a TileLayer
 */
function isTileLayer(layer) {
    return layer.type === "tile";
}
/**
 * Determines if the input is a ImageryTileLayer
 * @param {__esri.Layer} layer the layer to check the type of
 * @returns {layer is __esri.ImageryLayer} layer is a ImageryLayer
 */
function isDynamicImageryLayer(layer) {
    return (layer.type === "imagery-tile" &&
        layer.sourceJSON.capabilities.toLowerCase().indexOf("tilesonly") < 0);
}
/**
 * Determines if the input is a ImageryLayer
 * @param {__esri.Layer} layer the layer to check the type of
 * @returns {layer is __esri.ImageryLayer} layer is a ImageryLayer
 */
function isImageryLayer(layer) {
    return layer.type === "imagery" || isDynamicImageryLayer(layer);
}
/**
 * Determines if the input is a ImageryTileLayer
 * @param {__esri.Layer} layer the layer to check the type of
 * @returns {layer is __esri.ImageryTileLayer} layer is a ImageryTileLayer
 */
function isImageryTileLayer(layer) {
    return layer.type === "imagery-tile" && !isDynamicImageryLayer(layer);
}
function isEveryPropertyEmpty(value) {
    let isAllPropsEmpty = true;
    if (typeof value === "object" && (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_0__.a)(value) === false) {
        // using for-in as it will work with objects with properties that set via accessors as well
        for (const prop in value) {
            // This will tell the TypeScript compiler that the obj object has a string index signature,
            // and will allow to access its properties using a string index without getting the "Element implicitly has an 'any' type" error.
            const propValue = value?.[prop];
            if (value.hasOwnProperty(prop) === true && propValue !== undefined && propValue !== null && propValue !== "") {
                isAllPropsEmpty = false;
                break;
            }
        }
    }
    return isAllPropsEmpty;
}
/**
 * Check for an empty value for data items like GPString and Field.
 * @param value data item value.
 * @returns whether the value is considered empty.
 */
function isEmptyDataItem(value) {
    return (value === undefined ||
        value === null ||
        // single-select, "" is a special case for strings
        (typeof value === "string" && value === "") ||
        // single-select, empty objects are a special case for nested values
        ((0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_0__.h)(value) && isEmpty(value)) ||
        // multi-select
        (Array.isArray(value) && value.length < 1) ||
        // only testing objects which are not arrays
        // TODO: combine isEveryPropertyEmpty and isEmptyDataItem to single function
        (typeof value === "object" && (0,_getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_0__.a)(value) === false && isEveryPropertyEmpty(value)));
}



//# sourceMappingURL=type-gaurds-1840747f.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CalciteScale),
/* harmony export */   U: () => (/* binding */ UIDefaults),
/* harmony export */   a: () => (/* binding */ CalciteOverlayPositioning)
/* harmony export */ });
const UIDefaults = {
    Scale: "s",
    PopoverTimer: 60
};
const CalciteScale = {
    s: "s",
    m: "m"
};
const CalciteOverlayPositioning = {
    absolute: "absolute",
    fixed: "fixed"
};



//# sourceMappingURL=ui-utils-928a4096.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,