"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-1b7d85"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-weighted-overlay-table-editor-7b97df1d.js":
/*!**********************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-weighted-overlay-table-editor-7b97df1d.js ***!
  \**********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: () => (/* binding */ RfxCteWeightedOverlayTableEditor)
/* harmony export */ });
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
/* harmony import */ var _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui-utils-928a4096.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js");
/* harmony import */ var _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./interfaces-d0c68944.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/interfaces-d0c68944.js");
/* harmony import */ var _layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./layer-helper-3867eef7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/layer-helper-3867eef7.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./sanitize-number-d84114f7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/sanitize-number-d84114f7.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");
















const component = "rfx-cte-weighted-overlay-table-editor";
const HTMLClasses = {
    colorRed: `${component}__color-red`,
    grid: `${component}__grid`,
    layerColumn: `${component}__layer-column`,
    influenceColumn: `${component}__influence-column`,
    fieldColumn: `${component}__field-column`,
    valueColumn: `${component}__value-column`,
    scaleColumn: `${component}__scale-column`
};
const HelpClickHandlerKeys = {
    weightedOverlayTableHelpClickHandler: "weightedOverlayTableHelpClickHandler",
    remapTableHelpClickHandler: "remapTableHelpClickHandler",
    scalesHelpClickHandler: "scalesHelpClickHandler"
};
const DefaultScalesOptions = [
    { key: "1-3", label: "1-3" },
    { key: "1-5", label: "1-5" },
    { key: "1-7", label: "1-7" },
    { key: "1-9", label: "1-9" },
    { key: "1-10", label: "1-10" },
    { key: "1-20", label: "1-20" },
    { key: "1-25", label: "1-25" },
    { key: "1-50", label: "1-50" },
    { key: "1-75", label: "1-75" },
    { key: "1-100", label: "1-100" }
];

const rfxCteWeightedOverlayTableEditorCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-cte-weighted-overlay-table-editor__grid table{width:100%;table-layout:fixed}.rfx-cte-weighted-overlay-table-editor__grid table thead tr th:first-child{width:7%}.rfx-cte-weighted-overlay-table-editor__grid table thead tr th:last-child{width:7%}.rfx-cte-weighted-overlay-table-editor__grid table tbody tr td:first-child{width:7%}.rfx-cte-weighted-overlay-table-editor__grid table tbody tr td:last-child{width:7%}.rfx-cte-weighted-overlay-table-editor__color-red{color:red}.rfx-cte-weighted-overlay-table-editor__layer-column{width:40%}.rfx-cte-weighted-overlay-table-editor__influence-column{width:16%}.rfx-cte-weighted-overlay-table-editor__field-column{width:30%}.rfx-cte-weighted-overlay-table-editor__scale-column{width:30%}";

const RfxCteWeightedOverlayTableEditor = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        /**
         * Stores event handlers for help action click, stored in connected callback to avoid
         * fetching function on each render ( to avoid common bad practice )
         */
        this.helpActionClickEventHandlers = new Map();
        /**
         * scales options for scales select
         */
        this.scalesOptions = DefaultScalesOptions;
        // Refresh the remaps grid when this.selectedRowId is changed or the corresponding layer/field is changed
        this.refreshRemapsGrid = () => {
            const remapsGridOptions = this.getRemapGridData();
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(remapsGridOptions)) {
                return;
            }
            this.remapsGridSchema = {
                ...this.remapsGridSchema,
                gridOptions: remapsGridOptions
            };
        };
        // Event handler for grid row click
        this.handleGridRowClick = (event) => {
            const { detail: { gridOptions, rowIndex } } = event;
            if (rowIndex < 0 || rowIndex > gridOptions?.length - 1) {
                return;
            }
            this.selectedRowId = rowIndex;
            this.refreshRemapsGrid();
        };
        // Event handler for grid options change on weighted overlay table
        this.updateValue_weightedOverlayTable = async (event) => {
            const { detail: { gridOptions, rowIndex } } = event;
            const inputArgs = this.inputArgs;
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(gridOptions) || (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(inputArgs)) {
                return;
            }
            const rastersValueElements = [], influenceValues = [], fieldValues = [];
            let sumOfInfluence = 0, hasSumOfInfluenceChanged = false;
            gridOptions.forEach((dataObj, index) => {
                if (index === gridOptions.length - 1) {
                    return; // last is a placeholder
                }
                const { layer, influence, field } = dataObj;
                if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(layer) || (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(field)) {
                    return;
                }
                rastersValueElements.push(layer);
                fieldValues.push(field);
                let influenceVal = (0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_11__.p)(influence);
                if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(influenceVal) || isNaN(influenceVal)) {
                    // set default value for influence
                    influenceVal = index === 0 ? 100 : 0;
                }
                sumOfInfluence += influenceVal;
                influenceValues.push(influenceVal / 100); // in RFT JSON, the influence values are in decimals
            });
            if (sumOfInfluence !== this.sumOfInfluence) {
                hasSumOfInfluenceChanged = true;
                this.updateSumOfInfluenceElement(sumOfInfluence);
            }
            // Set inputArgs for Raster Function Template
            const rasters = inputArgs.Rasters, influences = inputArgs.Influences, fields = inputArgs.Fields, remaps = inputArgs.Remaps;
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(rasters.value)) {
                rasters.value = { elements: rastersValueElements, type: "ArgumentArray" };
            }
            else {
                rasters.value.elements = rastersValueElements;
            }
            influences.value = influenceValues;
            fields.value = fieldValues;
            // check difference happened in weighted overlay grid, and update remaps grid
            let updatedDataObj;
            // when a new row has been added
            if (gridOptions.length > this.weightedOverlayGridOptionsLength) {
                updatedDataObj = gridOptions[rowIndex];
            }
            // when some row has been deleted
            else if (gridOptions.length < this.weightedOverlayGridOptionsLength) {
                this.deleteLayerRemapStr(rowIndex);
                this.selectedRowId = rowIndex + 1;
            }
            // when some row has been updated
            else if (gridOptions.length === this.weightedOverlayGridOptionsLength) {
                if (!hasSumOfInfluenceChanged) {
                    // when either layer or field has been changed
                    updatedDataObj = gridOptions[rowIndex];
                }
            }
            // only initialize remapStr for newly added or changed layer, keep other layers' remapStrs as they were
            if (remaps?.value && updatedDataObj?.layer?.value) {
                this.selectedRowId = rowIndex;
                // initialize remapStr for dataObj layer, and update/insert remapStr into remaps.value
                const dataLength = gridOptions.length - 1;
                await this.initLayerRemapStr(updatedDataObj, rowIndex, dataLength);
            }
            // refresh remaps table
            this.refreshRemapsGrid();
            // update the temp this.weightedOverlayGridOptionsLength
            this.weightedOverlayGridOptionsLength = gridOptions.length;
        };
        // Event handler for grid options change on remaps table
        this.updateValue_remapTable = (event) => {
            const { detail: { gridOptions } } = event;
            const inputArgs = this.inputArgs;
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(gridOptions) || (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(inputArgs)) {
                return;
            }
            const remaps = inputArgs.Remaps, remapsValueLength = remaps?.value?.length;
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(remapsValueLength) ||
                remapsValueLength < 1 ||
                this.selectedRowId < 0 ||
                this.selectedRowId > remapsValueLength - 1) {
                return;
            }
            // update remaps.value[this.selectedRowId] (typeof string)
            let remapStr = "";
            const dataLength = gridOptions.length - 1;
            gridOptions.forEach(function (dataObj, index) {
                const { value, scale } = dataObj;
                if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(value) && !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(scale?.value)) {
                    let valueStr = value;
                    const scaleStr = scale.value;
                    if (typeof value === "string") {
                        // add single quotes around those string-type remapValues which contains spaces
                        valueStr = value.indexOf(" ") > -1 ? "'" + value + "'" : value;
                    }
                    remapStr += valueStr + " " + scaleStr;
                    if (index < dataLength - 1) {
                        remapStr += " ; ";
                    }
                }
            });
            remaps.value[this.selectedRowId] = remapStr;
        };
        // Event handler for scales select value change
        this.updateValue_scales = async (event) => {
            event.stopPropagation();
            const element = event.target;
            const value = element.value;
            // get the pair of evalFrom and evalTo, such as ["1", "9"]
            const evalValues = value.replace(/\s/g, "").split("-");
            if (evalValues.length !== 2) {
                return;
            }
            const evalFrom = parseInt(evalValues[0], 10), evalTo = parseInt(evalValues[1], 10);
            if (isNaN(evalFrom) || isNaN(evalTo) || evalFrom > evalTo) {
                return;
            }
            this.evalScales = {
                evalFrom: evalFrom,
                evalTo: evalTo
            };
            this.inputArgs.EvalFrom.value = evalFrom;
            this.inputArgs.EvalTo.value = evalTo;
            const rowIndex = this.selectedRowId;
            const dataObj = this.weightedOverlayGridSchema.gridOptions?.[rowIndex];
            const dataLength = this.weightedOverlayGridSchema.gridOptions?.length;
            await this.initLayerRemapStr(dataObj, rowIndex, dataLength);
            this.refreshRemapsGrid();
        };
        this.weightedOverlayGridSchema = {
            canAdd: true,
            gridLayout: {},
            gridOptions: [],
            hasBorder: true,
            hasHeader: true,
            hasIdColumn: true
        };
        this.remapsGridSchema = {
            canAdd: true,
            gridLayout: {},
            gridOptions: [],
            hasBorder: true,
            hasHeader: true,
            hasIdColumn: true
        };
        this.sumOfInfluence = 0;
        this.evalScales = undefined;
        this.widgetArgs = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.direction } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_2__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(".")));
        const { inputArgs, inputLayers } = this.widgetArgs;
        this.inputArgs = inputArgs;
        this.inputLayers = inputLayers;
        this.initScalesSelectOptions();
        this.initGrids();
    }
    componentDidLoad() {
        this.attachHelpClickEventHandlers();
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    attachHelpClickEventHandlers() {
        const weightedOverlayTableHelpClickHandler = this.widgetArgs.onHelpActionClick({
            heading: this.strings.weightedOverlayTable,
            referenceElement: this.weightedOverlayTableLabelElement,
            helpTextID: this.widgetArgs.helpTextIDs?.weightedoverlay_weightedoverlaytable
        });
        this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.weightedOverlayTableHelpClickHandler, weightedOverlayTableHelpClickHandler);
        const remapTableHelpClickHandler = this.widgetArgs.onHelpActionClick({
            heading: this.strings.remapTable,
            referenceElement: this.remapTableLabelElement,
            helpTextID: this.widgetArgs.helpTextIDs?.weightedoverlay_remaptable
        });
        this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.remapTableHelpClickHandler, remapTableHelpClickHandler);
        const scalesHelpClickHandler = this.widgetArgs.onHelpActionClick({
            heading: this.strings.scales,
            referenceElement: this.scalesLabelElement,
            helpTextID: this.widgetArgs.helpTextIDs?.weightedoverlay_scales
        });
        this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.scalesHelpClickHandler, scalesHelpClickHandler);
    }
    async getSelectedLayer(url) {
        const sanitizedUrl = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_6__.g)(url);
        const selectedLayer = this.inputLayers.find((layer) => layer.url === sanitizedUrl);
        if (selectedLayer) {
            await selectedLayer.load();
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.l)(selectedLayer)) {
                // calculate necessary info and add to the ImageryLayerArg for other widgets to use
                try {
                    // use ImageryLayer.rasterFunction instead of renderingRule as it is deprecated since 4.27
                    selectedLayer.rasterInfo = await selectedLayer.generateRasterInfo(selectedLayer.rasterFunction);
                }
                catch (error) {
                    console.error(error);
                }
            }
        }
        return selectedLayer;
    }
    getScaleOptions() {
        const scaleOptions = [];
        for (let i = this.evalScales.evalFrom; i <= this.evalScales.evalTo; i++) {
            scaleOptions.push({ key: i.toString(), label: i.toString() });
        }
        scaleOptions.push({ key: "NODATA", label: "NODATA" });
        scaleOptions.push({ key: "RESTRICTED", label: "RESTRICTED" });
        return scaleOptions;
    }
    getDefaultGridOption_weightedOverlayTable() {
        return {
            id: 0,
            layer: undefined,
            field: undefined,
            influence: 0
        };
    }
    getDefaultGridOption_remapTable() {
        return {
            id: 0,
            value: undefined,
            scale: { options: this.getScaleOptions(), value: undefined }
        };
    }
    // get the corresponding data from inputArgs.Remaps for displaying on remap grid
    getRemapGridData() {
        const remaps = this.inputArgs?.Remaps, selectedIndex = this.selectedRowId, data = [];
        if (selectedIndex < 0 || selectedIndex > remaps?.value?.length - 1) {
            return data;
        }
        if (remaps?.value?.[selectedIndex]) {
            const remapStr = remaps.value[selectedIndex], remapArr = remapStr.split(";");
            remapArr.forEach((remapPairStr, index) => {
                // trim each remapPairStr then split by spaces but skip those in single quotes
                const remapPairArr = remapPairStr.trim().match(/(?:[^\s']+|'[^']*')+/g);
                if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(remapPairArr) || remapPairArr.length !== 2) {
                    return;
                }
                let remapValue = remapPairArr[0];
                const remapScale = remapPairArr[1];
                if (remapValue.indexOf("'") > -1) {
                    // remove single quotes before displaying on grid
                    remapValue = remapValue.replace(/[']+/g, "");
                }
                data.push({
                    id: index,
                    value: remapValue,
                    scale: { options: this.getScaleOptions(), value: remapScale }
                });
            });
            // add a blank data object as the last row on remaps grid
            const dataLength = data.length;
            data.push({
                id: dataLength,
                value: undefined,
                scale: { options: this.getScaleOptions(), value: undefined }
            });
        }
        else {
            // add a blank data object
            data.push(this.getDefaultGridOption_remapTable());
        }
        return data;
    }
    /**
     * Read inputArgs and create an array of data objects as grid options based on the input args values.
     * @returns {any[]} The result array of data objects as grid options.
     */
    readArgValues() {
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(this.inputArgs)) {
            return;
        }
        const inputArgs = this.inputArgs;
        const weightedOverlayGridOptions = [], // gridOptions of weightedOverlayGrid (Rasters, Influences, Fields)
        rasters = inputArgs.Rasters, fields = inputArgs.Fields, influences = inputArgs.Influences, remaps = inputArgs.Remaps;
        let remapsGridOptions = [], // gridOptions of remapsGrid for each corresponding row on weightedOverlayGrid
        dataLength = 0, idx = 0;
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(rasters) &&
            !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(fields) &&
            !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(influences) &&
            !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(remaps)) {
            dataLength = Math.max(rasters.value?.elements?.length || 0, fields.value?.length || 0, influences.value?.length || 0, remaps.value?.length || 0);
            remaps.value = remaps.value ?? [];
        }
        if (dataLength === 0 || isNaN(dataLength)) {
            // add blank data object to each grid
            weightedOverlayGridOptions.push(this.getDefaultGridOption_weightedOverlayTable());
            remapsGridOptions.push(this.getDefaultGridOption_remapTable());
            return [weightedOverlayGridOptions, remapsGridOptions];
        }
        while (idx < dataLength) {
            weightedOverlayGridOptions.push({
                id: idx,
                layer: rasters?.value?.elements?.[idx],
                field: fields?.value?.[idx],
                influence: influences?.value && ((influences.value[idx] * 100).toFixed(2) || (idx > 0 ? 0 : 100))
            });
            idx += 1;
        }
        if (remaps?.value?.length > 0) {
            // push remaps[0] data to remapsGridOptions as an array
            if (weightedOverlayGridOptions?.length > 0 &&
                weightedOverlayGridOptions[0]?.layer?.value &&
                weightedOverlayGridOptions[0]?.field) {
                this.selectedRowId = 0;
                remapsGridOptions = this.getRemapGridData();
            }
        }
        else {
            // initialize remaps.value if empty
            for (let i = 0; i < dataLength; i++) {
                remaps.value.push("");
            }
        }
        return [weightedOverlayGridOptions, remapsGridOptions];
    }
    initGrids() {
        const weightedOverlayGridLayout = {
            layer: {
                allowScalar: false,
                label: this.strings.layer,
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_5__.G.raster,
                style: HTMLClasses.layerColumn
            },
            influence: {
                label: this.strings.influence,
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_5__.G.number,
                style: HTMLClasses.influenceColumn
            },
            field: {
                label: this.strings.field,
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_5__.G.field,
                style: HTMLClasses.fieldColumn
            }
        };
        const remapsGridLayout = {
            value: {
                label: this.strings.value,
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_5__.G.textInput,
                style: HTMLClasses.valueColumn
            },
            scale: {
                label: this.strings.scale,
                uiType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_5__.G.select,
                style: HTMLClasses.scaleColumn
            }
        };
        const dataArray = this.readArgValues();
        const weightedOverlayGridOptions = dataArray[0], remapsGridOptions = dataArray[1];
        this.weightedOverlayGridOptionsLength = weightedOverlayGridOptions?.length ?? 0;
        this.weightedOverlayGridSchema = {
            ...this.weightedOverlayGridSchema,
            gridLayout: weightedOverlayGridLayout,
            gridOptions: weightedOverlayGridOptions
        };
        this.remapsGridSchema = {
            ...this.remapsGridSchema,
            gridLayout: remapsGridLayout,
            gridOptions: remapsGridOptions
        };
    }
    initScalesSelectOptions() {
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(this.inputArgs)) {
            return;
        }
        const { EvalFrom, EvalTo } = this.inputArgs;
        const evalFromValue = EvalFrom?.value ?? 1, //defaultValue from schema is 1
        evalToValue = EvalTo?.value ?? 9; //defaultValue from schema is 9
        this.evalScales = {
            evalFrom: evalFromValue,
            evalTo: evalToValue
        };
        const scalesStr = `${evalFromValue}-${evalToValue}`;
        if (!this.scalesOptions.some((scalesOption) => scalesOption.key === scalesStr)) {
            this.scalesOptions.push({ key: scalesStr, label: scalesStr });
        }
    }
    updateSumOfInfluenceElement(sumOfInfluence) {
        this.sumOfInfluence = sumOfInfluence;
        // change color to red if sumOfInfluence > 100
        if (sumOfInfluence > 100) {
            this.sumOfInfluenceElement.classList.add(HTMLClasses.colorRed);
        }
        else {
            this.sumOfInfluenceElement.classList.remove(HTMLClasses.colorRed);
        }
    }
    // initialize the remap string for newly added/selected layer
    async initLayerRemapStr(dataObj, rowIndex, dataLength) {
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(dataObj) || rowIndex < 0 || dataLength <= 0 || rowIndex > dataLength - 1) {
            return;
        }
        const { layer, field } = dataObj;
        const { evalFrom, evalTo } = this.evalScales;
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(layer) || (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(field)) {
            return;
        }
        const layerObj = await this.getSelectedLayer(layer.value?.url);
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(layerObj)) {
            return;
        }
        let remapStr = "";
        // If newly added/selected layer has RAT, automatically update the corresponding remap string
        // Since JSAPI-4.14 `hasRasterAttributeTable` moved to under `layer.sourceJSON`
        if (layerObj.sourceJSON?.hasRasterAttributeTable && field) {
            const rat = (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.l)(layerObj)
                ? layerObj.serviceRasterInfo.attributeTable
                : layerObj.rasterInfo.attributeTable;
            const features = rat?.features;
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(features)) {
                return;
            }
            const remapValues = features
                .map((feature) => feature.attributes[field])
                .filter(function (val, pos, self) {
                return self.indexOf(val) === pos;
            });
            // sort the remapValues array if values are numbers
            if (remapValues?.length > 1 && !isNaN(remapValues[0])) {
                remapValues.sort(function (a, b) {
                    return a - b;
                });
            }
            const remapArr = remapValues.map(function (val, pos) {
                if (typeof val === "string") {
                    // add single quotes around those string-type remapValues which contains spaces
                    val = val.indexOf(" ") > -1 ? "'" + val + "'" : val;
                }
                const scale = pos + evalFrom <= evalTo ? pos + evalFrom : evalFrom;
                return `${val} ${scale}`;
            });
            remapStr = remapArr.join(" ; ");
            // remap string example:
            // "Brush/transitional 1 ; Water 2 ; 'Barren land' 3 ; 'Built up' 4 ; Agriculture 5 ; Forest 6 ; Wetlands 7"
        }
        // After async returns, replace the corresponding remapStr in remaps
        const idx = rowIndex, remaps = this.inputArgs.Remaps, fields = this.inputArgs.Fields;
        // update field in inputArgs after async returns
        fields.value.splice(idx, 1, field);
        if (remaps.value.length === dataLength) {
            // when a row's Layer or Field has been changed, replace the corresponding remapStr in remaps
            remaps.value.splice(idx, 1, remapStr);
        }
        if (remaps.value.length < dataLength) {
            // when a new row has been added, insert the new remapStr to remaps
            remaps.value.splice(idx, 0, remapStr);
        }
    }
    // Delete the remap str of layer at rowIndex
    deleteLayerRemapStr(idx) {
        const remaps = this.inputArgs.Remaps;
        remaps.value.splice(idx, 1);
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.weightedOverlayTableLabelElement = e;
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.strings.weightedOverlayTable, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.weightedOverlayTableHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-grid", { canAdd: this.weightedOverlayGridSchema.canAdd, class: HTMLClasses.grid, gridLayout: this.weightedOverlayGridSchema.gridLayout, gridOptions: this.weightedOverlayGridSchema.gridOptions, hasBorder: this.weightedOverlayGridSchema.hasBorder, hasHeader: this.weightedOverlayGridSchema.hasHeader, hasIdColumn: this.weightedOverlayGridSchema.hasIdColumn, inputLayers: this.widgetArgs.inputLayers, onRfxGridRowClick: this.handleGridRowClick, onRfxGridOptionChange: this.updateValue_weightedOverlayTable, rfxBrowseLayerClick: this.widgetArgs.onRfxBrowseLayerClick })), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "inline-space-between" }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, this.strings.sumOfInfluence), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { ref: (e) => {
                this.sumOfInfluenceElement = e;
            } }, this.sumOfInfluence)), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.remapTableLabelElement = e;
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.strings.remapTable, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.remapTableHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-grid", { canAdd: this.remapsGridSchema.canAdd, class: HTMLClasses.grid, gridLayout: this.remapsGridSchema.gridLayout, gridOptions: this.remapsGridSchema.gridOptions, hasBorder: this.remapsGridSchema.hasBorder, hasHeader: this.remapsGridSchema.hasHeader, hasIdColumn: this.remapsGridSchema.hasIdColumn, onRfxGridOptionChange: this.updateValue_remapTable })), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.scalesLabelElement = e;
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.strings.scales, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.scalesHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { allowCustomValues: true, options: this.scalesOptions, onRfxArgumentChange: this.updateValue_scales, value: `${this.evalScales.evalFrom}-${this.evalScales.evalTo}` }))));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RfxCteWeightedOverlayTableEditor.style = rfxCteWeightedOverlayTableEditorCss;



//# sourceMappingURL=rfx-cte-weighted-overlay-table-editor-7b97df1d.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-weighted-overlay-table-editor.entry.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-weighted-overlay-table-editor.entry.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rfx_cte_weighted_overlay_table_editor: () => (/* reexport safe */ _rfx_cte_weighted_overlay_table_editor_7b97df1d_js__WEBPACK_IMPORTED_MODULE_0__.R)
/* harmony export */ });
/* harmony import */ var _rfx_cte_weighted_overlay_table_editor_7b97df1d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rfx-cte-weighted-overlay-table-editor-7b97df1d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-weighted-overlay-table-editor-7b97df1d.js");
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
/* harmony import */ var _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_getTag-96af029d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_getTag-96af029d.js");
/* harmony import */ var _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui-utils-928a4096.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js");
/* harmony import */ var _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./interfaces-d0c68944.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/interfaces-d0c68944.js");
/* harmony import */ var _layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./layer-helper-3867eef7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/layer-helper-3867eef7.js");
/* harmony import */ var _arcgis_core_identity_IdentityManager_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @arcgis/core/identity/IdentityManager.js */ "@arcgis/core/identity/IdentityManager.js");
/* harmony import */ var _arcgis_core_core_urlUtils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @arcgis/core/core/urlUtils.js */ "@arcgis/core/core/urlUtils.js");
/* harmony import */ var _arcgis_core_layers_Layer_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @arcgis/core/layers/Layer.js */ "@arcgis/core/layers/Layer.js");
/* harmony import */ var _arcgis_core_layers_ImageryLayer_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @arcgis/core/layers/ImageryLayer.js */ "@arcgis/core/layers/ImageryLayer.js");
/* harmony import */ var _arcgis_core_smartMapping_raster_renderers_stretch_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @arcgis/core/smartMapping/raster/renderers/stretch.js */ "@arcgis/core/smartMapping/raster/renderers/stretch.js");
/* harmony import */ var _common_fda1462e_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./common-fda1462e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-fda1462e.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./_Uint8Array-68e1e3f9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_Uint8Array-68e1e3f9.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./sanitize-number-d84114f7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/sanitize-number-d84114f7.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");

























//# sourceMappingURL=rfx-cte-weighted-overlay-table-editor.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/sanitize-number-d84114f7.js":
/*!************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/sanitize-number-d84114f7.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ formatNumberToLocale),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   i: () => (/* binding */ isValidNumber),
/* harmony export */   p: () => (/* binding */ parseNumber),
/* harmony export */   s: () => (/* binding */ sanitizeNumber)
/* harmony export */ });
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");



/**
 * Indicates if a provided number value is valid.
 * An invalid value is: undefined | NaN | Infinite | -Infinite | null
 * See for more details:
 *   - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite
 *   - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
 * @param {number | undefined | null} value value to check
 * @returns {boolean} if valid or not
 */
function isValidNumber(value) {
    return value !== undefined && value !== null && Number.isNaN(value) === false && Number.isFinite(value) === true;
}
/**
 * Returns a string representation of the provided number for use with calcite-input. It also
 * guards against invalid types following this logic:
 *   - If the value is valid (not NaN, finite), the value is returned as a string
 *   - If not and if a valid default value is provided, the default value is returned as a string
 *   - If not, an empty string is returned
 * @param value
 * @param defaultValue
 * @returns a sanitized string
 */
function sanitizeNumber(value, defaultValue) {
    let returnedValue;
    if (value !== null) {
        const testedValue = typeof value === "string" ? Number.parseFloat(value) : value;
        if (isValidNumber(testedValue))
            returnedValue = testedValue;
        else if (isValidNumber(defaultValue))
            returnedValue = defaultValue;
    }
    return returnedValue === undefined ? "" : `${returnedValue}`;
}
/**
 * Parses a value string to a number for use with calcite-input. If the string is empty, it will return undefined.
 * If the string is otherwise invalid, it will return NaN.
 * @param value calcite-input value
 * @returns {number | undefined} the parsed number
 */
function parseNumber(value) {
    if (value === "")
        return undefined;
    return Number.parseFloat(value);
}
/**
 * Formats a number to a specified number of decimal places.
 *
 * @param {number} value - The number to format.
 * @param {number} [fractionDigits=3] - The number of decimal places to include in the formatted number. Defaults to 3.
 * @returns {number|undefined} - The formatted number, or undefined if the input value is empty.
 */
function formatNumber(value, fractionDigits = 3) {
    if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_1__.i)(value))
        return undefined;
    return Number.parseFloat(value.toFixed(fractionDigits));
}
/**
 * Formats a number or string representing a number according to the locale, passing Intl number format options
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/ReferenceGlobal_Objects/Intl/NumberFormat/NumberFormat#options
 * @param {number | string | undefined} value to be formatted and localized
 * @param {Intl.NumberFormatOptions} formatOptions options object matching Intl.NumberFormat
 * @returns {string} localized / rounded string
 */
function formatNumberToLocale(value, formatOptions) {
    let formattedValue = "";
    if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_1__.i)(value) && !Number.isNaN(value)) {
        const localeCode = (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_0__.g)().locale;
        formattedValue = Intl.NumberFormat(localeCode, formatOptions).format(Number(value));
    }
    return formattedValue;
}



//# sourceMappingURL=sanitize-number-d84114f7.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CalciteScale),
/* harmony export */   U: () => (/* binding */ UIDefaults),
/* harmony export */   a: () => (/* binding */ CalciteOverlayPositioning)
/* harmony export */ });
const UIDefaults = {
    Scale: "s",
    PopoverTimer: 60
};
const CalciteScale = {
    s: "s",
    m: "m"
};
const CalciteOverlayPositioning = {
    absolute: "absolute",
    fixed: "fixed"
};



//# sourceMappingURL=ui-utils-928a4096.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,