"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_raster-106253"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};



//# sourceMappingURL=index-05956cab.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js":
/*!*************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $: () => (/* binding */ getPrimaryTypeScheme),
/* harmony export */   A: () => (/* binding */ isPointType),
/* harmony export */   B: () => (/* binding */ isPolylineType),
/* harmony export */   C: () => (/* binding */ getFieldTypeCount),
/* harmony export */   D: () => (/* binding */ getGeometryType),
/* harmony export */   E: () => (/* binding */ closePopovers),
/* harmony export */   F: () => (/* binding */ findParentNode),
/* harmony export */   G: () => (/* binding */ getSingleObjectLocalStorage),
/* harmony export */   H: () => (/* binding */ setSingleObjectLocalStorage),
/* harmony export */   I: () => (/* binding */ getLayerFieldTypeCount),
/* harmony export */   J: () => (/* binding */ getRendererTheme),
/* harmony export */   K: () => (/* binding */ addFieldsToLayerCache),
/* harmony export */   L: () => (/* binding */ disablePanel),
/* harmony export */   M: () => (/* binding */ arcgisComponentNotificationsKeys),
/* harmony export */   N: () => (/* binding */ localStorageKeys),
/* harmony export */   O: () => (/* binding */ addFieldsToOutFields),
/* harmony export */   P: () => (/* binding */ findColorScheme),
/* harmony export */   Q: () => (/* binding */ fixNormalizationField),
/* harmony export */   R: () => (/* binding */ isEmpty),
/* harmony export */   S: () => (/* binding */ getDefaultSymbol),
/* harmony export */   T: () => (/* binding */ getSymbolSize),
/* harmony export */   U: () => (/* binding */ applySymbolSize),
/* harmony export */   V: () => (/* binding */ findHeatmapScheme),
/* harmony export */   W: () => (/* binding */ findPredominanceScheme),
/* harmony export */   X: () => (/* binding */ switchMarkersToPolygons),
/* harmony export */   Y: () => (/* binding */ switchPolygonsToMarkers),
/* harmony export */   Z: () => (/* binding */ findPieChartScheme),
/* harmony export */   _: () => (/* binding */ findTypeScheme),
/* harmony export */   a: () => (/* binding */ getVisVar),
/* harmony export */   a0: () => (/* binding */ findRelationshipScheme),
/* harmony export */   a1: () => (/* binding */ createUniqueValueRenderer),
/* harmony export */   a2: () => (/* binding */ createRGBRenderer),
/* harmony export */   a3: () => (/* binding */ createStretchRenderer),
/* harmony export */   a4: () => (/* binding */ isSameColor),
/* harmony export */   a5: () => (/* binding */ hasSymbolOutline),
/* harmony export */   a6: () => (/* binding */ isPictureMarker),
/* harmony export */   a7: () => (/* binding */ getFillColors),
/* harmony export */   a8: () => (/* binding */ layerSupportsCIM),
/* harmony export */   a9: () => (/* binding */ getColorRampsWithSchemes),
/* harmony export */   aA: () => (/* binding */ getRasterUniqueValueFields),
/* harmony export */   aB: () => (/* binding */ createUniqueValueRendererFromExisting),
/* harmony export */   aC: () => (/* binding */ getZoomOptions),
/* harmony export */   aD: () => (/* binding */ getHandleInfo),
/* harmony export */   aE: () => (/* binding */ isSymbolTransparent),
/* harmony export */   aF: () => (/* binding */ addSmartMappingTooltipWithId),
/* harmony export */   aG: () => (/* binding */ removeSmartMappingTooltipById),
/* harmony export */   aH: () => (/* binding */ isDate),
/* harmony export */   aI: () => (/* binding */ scrollIntoView),
/* harmony export */   aJ: () => (/* binding */ removeVisVar),
/* harmony export */   aK: () => (/* binding */ getFirstNumberField),
/* harmony export */   aL: () => (/* binding */ getDefaultDataRange),
/* harmony export */   aa: () => (/* binding */ isTopFlowItem),
/* harmony export */   ab: () => (/* binding */ updateRenderer),
/* harmony export */   ac: () => (/* binding */ isDefined),
/* harmony export */   ad: () => (/* binding */ validateMinMax),
/* harmony export */   ae: () => (/* binding */ removeSmartMappingTooltip),
/* harmony export */   af: () => (/* binding */ addSmartMappingTooltip),
/* harmony export */   ag: () => (/* binding */ hasNumberField),
/* harmony export */   ah: () => (/* binding */ getGeoRSSDefaultSymbol),
/* harmony export */   ai: () => (/* binding */ isLineMarker),
/* harmony export */   aj: () => (/* binding */ getRasterDefaultSymbol),
/* harmony export */   ak: () => (/* binding */ isCimLineSymbol),
/* harmony export */   al: () => (/* binding */ getCimLine),
/* harmony export */   am: () => (/* binding */ getSymbolChanges),
/* harmony export */   an: () => (/* binding */ updateSymbol),
/* harmony export */   ao: () => (/* binding */ applyAlpha),
/* harmony export */   ap: () => (/* binding */ getCIMOutlineWidth),
/* harmony export */   aq: () => (/* binding */ isSymbolAlmostWhite),
/* harmony export */   ar: () => (/* binding */ getRenderPreviewSize),
/* harmony export */   as: () => (/* binding */ setDefaultRGBBands),
/* harmony export */   at: () => (/* binding */ getPercentLabelFlip),
/* harmony export */   au: () => (/* binding */ createRgbRendererFromExisting),
/* harmony export */   av: () => (/* binding */ rgbTypeMap),
/* harmony export */   aw: () => (/* binding */ rgbDefaults),
/* harmony export */   ax: () => (/* binding */ stretchDefaults),
/* harmony export */   ay: () => (/* binding */ createStretchRendererFromExisting),
/* harmony export */   az: () => (/* binding */ stretchTypeMap),
/* harmony export */   b: () => (/* binding */ status),
/* harmony export */   c: () => (/* binding */ clearSmartMappingState),
/* harmony export */   d: () => (/* binding */ buildFieldsList),
/* harmony export */   e: () => (/* binding */ applyRenderer),
/* harmony export */   f: () => (/* binding */ getRendererFieldInfos),
/* harmony export */   g: () => (/* binding */ getRendererType),
/* harmony export */   h: () => (/* binding */ getRenderer),
/* harmony export */   i: () => (/* binding */ isRasterLayer),
/* harmony export */   j: () => (/* binding */ applyRendererToAll),
/* harmony export */   k: () => (/* binding */ isRasterRGBRenderer),
/* harmony export */   l: () => (/* binding */ applyExtraVisVars),
/* harmony export */   m: () => (/* binding */ saveExtraVisVars),
/* harmony export */   n: () => (/* binding */ getVisVarsExcept),
/* harmony export */   o: () => (/* binding */ getAuthVisVarsExcept),
/* harmony export */   p: () => (/* binding */ getAuthVisVar),
/* harmony export */   q: () => (/* binding */ isPolygonType),
/* harmony export */   r: () => (/* binding */ applySymbolColor),
/* harmony export */   s: () => (/* binding */ smartMappingState),
/* harmony export */   t: () => (/* binding */ getSymbolColor),
/* harmony export */   u: () => (/* binding */ getField),
/* harmony export */   v: () => (/* binding */ isSameFieldInfos),
/* harmony export */   w: () => (/* binding */ simpleFieldTypes),
/* harmony export */   x: () => (/* binding */ isSameFieldInfo),
/* harmony export */   y: () => (/* binding */ getFieldTypeFromValueType),
/* harmony export */   z: () => (/* binding */ getFieldType)
/* harmony export */ });
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */







var status;
(function (status) {
    status["MISSING"] = "missing";
    status["IN_PROGRESS"] = "inProgress";
    status["SUCCESS"] = "success";
    status["FAILED"] = "failed";
})(status || (status = {}));
/**
 * Returns true if the object in question is empty
 * @param input - object to determine if empty
 */
function isEmpty(input) {
    return Object.keys(input).length === 0 && input.constructor === Object;
}
function closePopovers() {
    document.querySelectorAll("calcite-popover").forEach((node) => {
        let remove = false;
        node.classList.forEach((className) => {
            if (className.startsWith("smart-mapping-") && className.endsWith("-popover")) {
                remove = true;
            }
        });
        if (remove) {
            node.setAttribute("open", "false");
            const parentNode = node.parentNode;
            parentNode === null || parentNode === void 0 ? void 0 : parentNode.removeChild(node);
        }
    });
    document
        .querySelectorAll("arcgis-smart-mapping-styler-popover, arcgis-smart-mapping-info-popover")
        .forEach((node) => {
        var _a;
        (_a = node.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(node);
    });
}
/**
 * Returns a parent element with that tag name or class name
 * @param node - starting node
 * @param tagName - tag name to find up the tree
 * @param className - class name to find up the tree
 */
function findParentNode(node, tagName, className) {
    if ((tagName && (node === null || node === void 0 ? void 0 : node.tagName) === tagName.toUpperCase()) || (className && (node === null || node === void 0 ? void 0 : node.classList.contains(className)))) {
        return node;
    }
    else {
        let parentNode = node === null || node === void 0 ? void 0 : node.parentElement;
        while (parentNode) {
            if ((tagName && parentNode.tagName === tagName.toUpperCase()) ||
                (className && parentNode.classList.contains(className))) {
                return parentNode;
            }
            else if (parentNode.tagName === "BODY") {
                break;
            }
            else {
                parentNode = parentNode.parentElement;
            }
        }
    }
    return;
}
/* old */
function findParentPanel(node) {
    if ((node === null || node === void 0 ? void 0 : node.tagName) === "CALCITE-PANEL") {
        return node;
    }
    else if ((node === null || node === void 0 ? void 0 : node.tagName) === "CALCITE-FLOW-ITEM") {
        return node;
    }
    else {
        let parentNode = node === null || node === void 0 ? void 0 : node.parentElement;
        while (parentNode) {
            if (parentNode.tagName === "CALCITE-PANEL") {
                return parentNode;
            }
            else if (parentNode.tagName === "CALCITE-FLOW-ITEM") {
                return parentNode;
            }
            else {
                parentNode = parentNode.parentElement;
            }
        }
    }
    return;
}
/* old */
function disablePanel(node, disable) {
    const parentPanel = findParentPanel(node);
    if (parentPanel) {
        parentPanel.disabled = disable;
    }
}
function isTopFlowItem(node) {
    let parentNode = node === null || node === void 0 ? void 0 : node.parentElement;
    if ((parentNode === null || parentNode === void 0 ? void 0 : parentNode.tagName) === "CALCITE-FLOW") {
        let index = 0;
        parentNode.childNodes.forEach((childNode, idx) => {
            if (childNode === node) {
                index = idx;
            }
        });
        return index === 0;
    }
    return false;
}
function addSmartMappingTooltipWithId(tooltipParentNode, label, id, open = true) {
    let node = document.getElementById(id);
    if (node === null || node === void 0 ? void 0 : node.parentNode) {
        node.parentNode.removeChild(node);
    }
    const tooltip = document.createElement("calcite-tooltip");
    tooltip.className = "smart-mapping-tooltip";
    tooltip.id = id;
    tooltip.referenceElement = tooltipParentNode;
    tooltip.open = open;
    tooltip.innerHTML = label;
    document.body.append(tooltip);
}
function addSmartMappingTooltip(tooltipParentNode, label, open = true) {
    const tooltip = document.createElement("calcite-tooltip");
    tooltip.className = "smart-mapping-tooltip";
    tooltip.referenceElement = tooltipParentNode;
    tooltip.open = open;
    tooltip.innerHTML = label;
    document.body.append(tooltip);
}
function removeSmartMappingTooltip() {
    document.querySelectorAll(".smart-mapping-tooltip").forEach((tooltip) => {
        var _a;
        (_a = tooltip.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(tooltip);
    });
}
function removeSmartMappingTooltipById(id) {
    const node = document.getElementById(id);
    if ((node === null || node === void 0 ? void 0 : node.className) === "smart-mapping-tooltip" && (node === null || node === void 0 ? void 0 : node.parentNode)) {
        node.parentNode.removeChild(node);
    }
}
function validateMinMax(obj) {
    if (obj.min === obj.max && isDefined(obj.min)) {
        if (obj.min > 0) {
            obj.min = 0;
            obj.max = obj.max * 2;
        }
        else if (obj.min < 0) {
            obj.min = obj.min * 2;
            obj.max = 0;
        }
        else {
            obj.min = -10;
            obj.max = 10;
        }
    }
    return obj;
}
function getGeometryType(layer) {
    var _a;
    if ("featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning") {
        return "polygon";
    }
    return layer.type === "imagery" || layer.type === "imagery-tile"
        ? "polygon"
        : layer.type === "geo-rss"
            ? "point"
            : layer.geometryType;
}
function isPointType(layer) {
    const isStreamLayer = layer.type === "stream";
    return isStreamLayer || getGeometryType(layer) === "point" || getGeometryType(layer) === "multipoint";
}
function isPolygonType(layer) {
    const isStreamLayer = layer.type === "stream";
    return !isStreamLayer && getGeometryType(layer) === "polygon";
}
function isPolylineType(layer) {
    const isStreamLayer = layer.type === "stream";
    return !isStreamLayer && getGeometryType(layer) === "polyline";
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
function getDefaultDataRange(fieldInfo) {
    if (fieldInfo.simpleFieldType === simpleFieldTypes.DATE) {
        const year = new Date().getFullYear();
        return [new Date(`1/1/${year}`).getTime(), new Date(`12/31/${year}`).getTime()];
    }
    else {
        return [0, 100];
    }
}
function scrollIntoView(node) {
    setTimeout(() => {
        if (node) {
            node.scrollIntoView({
                behavior: "smooth",
                block: "nearest",
                inline: "start"
            });
        }
        // Firefox/Safari bug
        setTimeout(() => {
            var _a;
            const shellNode = (_a = document.getElementsByTagName("calcite-shell")) === null || _a === void 0 ? void 0 : _a[0];
            if (shellNode) {
                shellNode.scrollTop = 0;
            }
        }, 100);
    }, 100);
}
function getPercentLabelFlip(element) {
    const currentLanguage = (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__.a)(element);
    const dir = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_0__.g)(element);
    const percentFormatter = new Intl.NumberFormat(currentLanguage, { style: "percent" });
    const percentFormatSample = percentFormatter.format(0);
    const percentLabelFlip = dir === "rtl" ? percentFormatSample.endsWith("%") : percentFormatSample.startsWith("%");
    return percentLabelFlip;
}

var simpleFieldTypes;
(function (simpleFieldTypes) {
    simpleFieldTypes["NUMBER"] = "number";
    simpleFieldTypes["STRING"] = "string";
    simpleFieldTypes["DATE"] = "date";
    simpleFieldTypes["OID"] = "oid";
    simpleFieldTypes["GUID"] = "guid";
    simpleFieldTypes["UNKNOWN"] = "unknown";
})(simpleFieldTypes || (simpleFieldTypes = {}));
let excludedFields = [
    "id",
    "fips",
    "fid",
    "objectid",
    "_objectid",
    "__objectid",
    "x",
    "y",
    "lat",
    "long",
    "latitude",
    "longitude",
    "shape",
    "shape_length",
    "shape_leng",
    "shape_area",
    "perimeter",
    "stretched_value",
    "fnode_",
    "tnode_",
    "lpoly_",
    "rpoly_",
    "poly_",
    "subclass",
    "rings_ok",
    "rings_nok",
    "st_length(shape)",
    "st_area(shape)"
];
function buildFieldsList() {
    const { layer, mapImageSublayer } = smartMappingState;
    let { layerFields } = smartMappingState;
    if (!layer || layerFields) {
        return Promise.resolve();
    }
    smartMappingState.layerFields = getLayerFields(layer);
    // https://demographics9dev.arcgis.com/arcgis/rest/services/USA_Demographics_and_Boundaries_2019/MapServer
    if (mapImageSublayer &&
        mapImageSublayer.layer.portalItem &&
        mapImageSublayer.layer.url.indexOf("https://demographics") > -1 &&
        mapImageSublayer.layer.url.indexOf(".arcgis.com") > -1) {
        const portalItem = mapImageSublayer.layer.portalItem;
        return portalItem
            .fetchData()
            .then((response) => {
            if (response === null || response === void 0 ? void 0 : response.thematicGroup) {
                const fieldNames = response.thematicGroup.fieldNames;
                if (fieldNames) {
                    layerFields = layerFields.filter((layerField) => fieldNames.indexOf(layerField.name) > -1);
                }
            }
            buildFieldsListAfterThematicGroupCheck();
            return Promise.resolve();
        })
            .catch(() => {
            // assume there is none
            buildFieldsListAfterThematicGroupCheck();
            return Promise.resolve();
        });
    }
    else {
        buildFieldsListAfterThematicGroupCheck();
        return Promise.resolve();
    }
}
function getLayerFields(layer) {
    var _a;
    const { modules } = smartMappingState;
    if (layer.type === "feature" && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning") {
        // convert AggregateFields into Fields
        const aggregateFields = layer.featureReduction.fields;
        const fields = [];
        aggregateFields.forEach((aggregateField) => {
            const layerField = layer.fields.find((field) => field.name === aggregateField.onStatisticField);
            if (!aggregateField.onStatisticField || layerField) {
                fields.push(new modules.Field({
                    name: aggregateField.name,
                    alias: aggregateField.alias || aggregateField.name,
                    type: getFieldType(aggregateField)
                }));
            } // field doesn't exist on layer anymore; don't use it here
        });
        return fields;
    }
    return "fields" in layer && layer.fields;
}
function buildFieldsListAfterThematicGroupCheck() {
    var _a, _b;
    const { layer, mapImageSublayer, layerFields, supportsArcade } = smartMappingState;
    //const supportsStandardizedQuery = layer.version >= 10.2 && layer.capabilities?.query?.supportsStandardizedQueriesOnly;
    // JS-API #27120
    const supportsSqlExpression = layer.hasOwnProperty("capabilities") && ((_b = (_a = layer.capabilities) === null || _a === void 0 ? void 0 : _a.query) === null || _b === void 0 ? void 0 : _b.supportsSqlExpression);
    smartMappingState.fields = [];
    smartMappingState.stringFieldsCount = 0;
    smartMappingState.dateFieldsCount = 0;
    smartMappingState.numberFieldsCount = 0;
    const fieldInfos = "popupTemplate" in layer && layer.popupTemplate ? layer.popupTemplate.fieldInfos : [];
    // make sure no fields used in the renderer are excluded
    // not checking Arcade expressions...
    const rendererFields = getRendererFieldInfos(layer);
    const renNames = rendererFields
        .filter((renField) => !!renField.field)
        .map((renField) => renField.field.toLowerCase());
    if (renNames === null || renNames === void 0 ? void 0 : renNames.length) {
        excludedFields = excludedFields.filter((name) => renNames.indexOf(name) === -1);
    }
    layerFields.forEach((layerField) => {
        if (excludedFields.indexOf(layerField.name.toLowerCase()) > -1) {
            return;
        }
        if (["date", "date-only"].indexOf(layerField.type) > -1 &&
            ((mapImageSublayer && !supportsArcade) || (layer.type !== "stream" && !supportsSqlExpression))) {
            // no date field support
            return;
        }
        const list = fieldInfos
            ? fieldInfos.filter((fieldInfo) => fieldInfo.fieldName === layerField.name)
            : null;
        const label = list && list.length ? list[0].label : null;
        const featureFilterField = {
            layerField: layerField,
            label: label || layerField.alias || layerField.name
        };
        getSimpleFieldType(featureFilterField, renNames);
        if (featureFilterField.simpleFieldType) {
            smartMappingState.fields.push(featureFilterField);
        } // else can't use field
    });
}
function getField(fieldName) {
    const { layer } = smartMappingState;
    if (isRasterLayer(layer)) {
        const fields = getRasterUniqueValueFields();
        const list = fields.filter((field) => field.name === fieldName);
        if (list.length) {
            const field = list[0];
            return {
                label: field.alias,
                layerField: field,
                // raster layer displays are not dependent on field type, so we use "string" as a placeholder
                simpleFieldType: simpleFieldTypes.STRING
            };
        }
    }
    else {
        const list = smartMappingState.fields.filter((field) => field.layerField.name === fieldName);
        if (list.length) {
            return list[0];
        }
    }
    return undefined;
}
function getFirstNumberField() {
    const list = smartMappingState.fields.filter((field) => field.simpleFieldType === simpleFieldTypes.NUMBER);
    if (list.length) {
        return list[0];
    }
    return undefined;
}
function hasNumberField() {
    return smartMappingState.numberFieldsCount > 0;
}
function getFieldTypeCount() {
    const { selectedFields } = smartMappingState;
    const counts = { string: 0, number: 0, date: 0, unknown: 0, expression: 0 };
    selectedFields.forEach((fieldInfo) => {
        counts.expression += fieldInfo.expression ? 1 : 0;
        let fieldType;
        if (fieldInfo.field) {
            const field = getField(fieldInfo.field);
            fieldType = field ? field.simpleFieldType : simpleFieldTypes.UNKNOWN;
        }
        else {
            fieldType = fieldInfo.simpleFieldType;
        }
        switch (fieldType) {
            case simpleFieldTypes.NUMBER:
            case simpleFieldTypes.OID:
            case simpleFieldTypes.GUID:
                counts.number++;
                break;
            case simpleFieldTypes.STRING:
                counts.string++;
                break;
            case simpleFieldTypes.DATE:
                counts.date++;
                break;
            case simpleFieldTypes.UNKNOWN:
                counts.unknown++;
        }
    });
    return counts;
}
function getLayerFieldTypeCount(fields) {
    const { fields: stateFields } = smartMappingState;
    fields = fields || stateFields;
    const counts = { string: 0, number: 0, date: 0, expression: 0 };
    fields.forEach((field) => {
        switch (field.simpleFieldType) {
            case simpleFieldTypes.NUMBER:
            case simpleFieldTypes.OID:
            case simpleFieldTypes.GUID:
                counts.number++;
                break;
            case simpleFieldTypes.STRING:
                counts.string++;
                break;
            case simpleFieldTypes.DATE:
                counts.date++;
                break;
        }
    });
    return counts;
}
function addFieldsToLayerCache(fieldNames) {
    const { layer } = smartMappingState;
    if (!("featureReduction" in layer) || !layer.featureReduction || layer.featureReduction.type !== "binning") {
        addFieldsToOutFields(fieldNames);
    }
}
function addFieldsToOutFields(fieldNames) {
    /*
      feature, geoJSON and wfs need to have outFields updated
      stream layers have read-only outFields and all fields included in outFields
      csv by default has all the fields included in outFields
      for ogc-feature, outFields is not available.. but it would work as if its layerView.availableFields has all the fields..
    */
    const { layer } = smartMappingState;
    if (layer.type === "geojson" || layer.type === "wfs" || layer.type === "feature") {
        layer.outFields = fieldNames;
    }
}
function isSameFieldInfos(fieldInfos1, fieldInfos2) {
    let isSame = true;
    if (fieldInfos1.length !== fieldInfos2.length) {
        return false;
    }
    fieldInfos1.forEach((fieldInfo, idx) => {
        if (isSame && !isSameFieldInfo(fieldInfo, fieldInfos2[idx])) {
            isSame = false;
        }
    });
    return isSame;
}
function isSameFieldInfo(fieldInfo1, fieldInfo2) {
    // no exact comparison so `undefined == null` equals true
    if (fieldInfo1 &&
        fieldInfo2 &&
        fieldInfo1.field == fieldInfo2.field &&
        fieldInfo1.expression == fieldInfo2.expression &&
        fieldInfo1.expressionTitle == fieldInfo2.expressionTitle) {
        return true;
    }
    return false;
}
function isDate(fieldInfo) {
    return fieldInfo.simpleFieldType === simpleFieldTypes.DATE;
}
function getSimpleFieldType(featureFilterField, rendererFieldNames) {
    const layerFieldType = getFieldType(featureFilterField.layerField);
    switch (layerFieldType) {
        case "string":
        case "date-only":
            featureFilterField.simpleFieldType = simpleFieldTypes.STRING;
            smartMappingState.stringFieldsCount++;
            break;
        case "date":
            featureFilterField.simpleFieldType = simpleFieldTypes.DATE;
            smartMappingState.dateFieldsCount++;
            break;
        case "oid":
            // only if field is used in current renderer; field stays for the session
            if (rendererFieldNames.indexOf(featureFilterField.layerField.name.toLowerCase()) > -1) {
                featureFilterField.simpleFieldType = simpleFieldTypes.OID;
            }
            break;
        case "guid":
            // only if field is used in current renderer; field stays for the session
            if (rendererFieldNames.indexOf(featureFilterField.layerField.name.toLowerCase()) > -1) {
                featureFilterField.simpleFieldType = simpleFieldTypes.GUID;
            }
            break;
        case "small-integer":
        case "big-integer":
        case "integer":
        case "single":
        case "double":
        case "long":
            featureFilterField.simpleFieldType = simpleFieldTypes.NUMBER;
            smartMappingState.numberFieldsCount++;
            break;
    }
}
function getFieldTypeFromValueType(field) {
    // "count-or-amount","percentage-or-ratio","measurement","unique-identifier","coordinate","binary"
    // "name-or-title","type-or-category","description","location-or-place-name","ordered-or-ranked","date-and-time"
    const layerField = field.layerField;
    const layerFieldType = getFieldType(layerField);
    switch (layerFieldType) {
        case "small-integer":
        case "big-integer":
        case "integer":
        case "single":
        case "double": {
            if ("domain" in layerField && layerField.domain) {
                return "string";
            }
            switch ("valueType" in layerField && layerField.valueType) {
                case "name-or-title":
                case "type-or-category":
                case "description":
                case "location-or-place-name":
                case "ordered-or-ranked":
                case "binary":
                case "unique-identifier":
                case "date-and-time":
                    return "string";
                case "count-or-amount":
                    return "integer";
                case "percentage-or-ratio":
                case "measurement":
                case "coordinate":
                    return "double";
                default:
                    return "double";
            }
        }
        case "string":
        case "date-only":
            return "string";
        case "date":
            return "date";
        default:
            return "string";
    }
}
function getFieldType(field) {
    const { layer } = smartMappingState;
    if (!field || !("fields" in layer)) {
        return;
    }
    if ("type" in field) {
        // __esri.Field
        return field.type;
    }
    else if ("statisticType" in field) {
        // __esri.AggregateField
        const layerField = layer.fields.find((layerField) => layerField.name === field.onStatisticField);
        if (!field.onStatisticField || layerField) {
            if (field.statisticType === "count") {
                return "integer";
            }
            else if (field.statisticType === "avg") {
                return "double";
            }
            else if (["min", "max", "sum", "mode"].indexOf(field.statisticType) - 1) {
                return (layerField === null || layerField === void 0 ? void 0 : layerField.type) || "integer";
            }
        } // field doesn't exist on layer anymore
        return;
    }
    return;
}

function isRasterLayer(layer) {
    return ["imagery", "imagery-tile"].indexOf(layer.type) > -1;
}

var localStorageKeys;
(function (localStorageKeys) {
    localStorageKeys["ARCGIS_COMPONENT_NOTIFICATIONS"] = "arcgisComponent_notifications";
})(localStorageKeys || (localStorageKeys = {}));
var arcgisComponentNotificationsKeys;
(function (arcgisComponentNotificationsKeys) {
    arcgisComponentNotificationsKeys["SMART_MAPPING_TIP1_DISMISSED"] = "arcgis_smart_mapping_tip1_dismissed";
    arcgisComponentNotificationsKeys["SMART_MAPPING_TIP2_DISMISSED"] = "arcgis_smart_mapping_tip2_dismissed";
})(arcgisComponentNotificationsKeys || (arcgisComponentNotificationsKeys = {}));
const getLocalStorage = (localStorageKey) => {
    return localStorage.getItem(localStorageKey);
};
const setLocalStorage = (localStorageKey, value) => {
    localStorage.setItem(localStorageKey, value);
};
const getObjectLocalStorage = (localStorageKey) => {
    const info = getLocalStorage(localStorageKey);
    return info ? JSON.parse(info) : {};
};
const setSingleObjectLocalStorage = (localStorageKey, keyValueObject) => {
    const setLocalStorageVal = getObjectLocalStorage(localStorageKey);
    setLocalStorageVal[keyValueObject.key] = keyValueObject.value;
    setLocalStorage(localStorageKey, JSON.stringify(setLocalStorageVal));
};
const getSingleObjectLocalStorage = (localStorageKey, objectKey) => {
    const getLocalStorageVal = getObjectLocalStorage(localStorageKey);
    if (getLocalStorageVal === null || getLocalStorageVal === void 0 ? void 0 : getLocalStorageVal.hasOwnProperty(objectKey)) {
        return getLocalStorageVal[objectKey];
    }
    else {
        return null;
    }
};

const SmartMappingStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_4__.c)({
    selectedFields: [],
    hideLayerTitle: false,
    supportsArcade: false,
    stringFieldsCount: -1,
    dateFieldsCount: -1,
    numberFieldsCount: -1,
    isRTL: false,
    oneFeatureResponseStatus: status.MISSING
});
const smartMappingState = SmartMappingStore.state;
// createStore gets called just once in a app session
function clearSmartMappingState(smartMappingState) {
    smartMappingState.selectedFields = [];
    smartMappingState.layerFields = undefined;
    smartMappingState.fields = undefined;
    smartMappingState.hideLayerTitle = false;
    smartMappingState.supportsArcade = false;
    smartMappingState.stringFieldsCount = -1;
    smartMappingState.dateFieldsCount = -1;
    smartMappingState.numberFieldsCount = -1;
    smartMappingState.oneFeatureResponseStatus = status.MISSING;
    smartMappingState.selectedAttribute = undefined;
    smartMappingState.selectedAttributeText = undefined;
    smartMappingState.selectedTypeValue = undefined;
    smartMappingState.selectedValue = undefined;
    smartMappingState.lastDefault = undefined;
    smartMappingState.lastDefaults = undefined;
    smartMappingState.dotColorSelected = undefined;
    smartMappingState.backgroundStyleSelected = undefined;
    smartMappingState.lastSettings = undefined;
    smartMappingState.classedSymbolSelectedIdx = undefined;
    smartMappingState.allUniqueValues = undefined;
}

const defaultGeometry = "polygon";
function getRendererType() {
    const { layer } = smartMappingState;
    const renderer = getRenderer(layer);
    return getRendererTypeFromRenderer(renderer);
}
function getRendererTypeFromRenderer(renderer) {
    var _a;
    const { layer } = smartMappingState;
    const hasSizeVisVar = hasVisVar(renderer, "size");
    const hasColorVisVar = hasVisVar(renderer, "color");
    const colorVisVar = getVisVar(renderer, "color");
    const authColorVisVar = getAuthVisVar(renderer, "color");
    const authSizeVisVar = getAuthVisVar(renderer, "size");
    let rendererType = "unknown";
    if (renderer.normalizationType &&
        renderer.normalizationType !== "field") {
        // "percent-of-total" and "log" not supported
        return "unknown";
    }
    else if (renderer.type === "simple") {
        rendererType = "simple";
    }
    else if (renderer.type === "dot-density") {
        rendererType = "dot-density";
    }
    else if (renderer.type === "heatmap") {
        rendererType = "heatmap";
    }
    else if (renderer.type === "class-breaks") {
        const cbRenderer = renderer;
        if (hasColorVisVar) {
            if (cbRenderer.valueExpression && !authColorVisVar) {
                rendererType = "color";
            }
            else if (hasSizeVisVar) {
                if (authSizeVisVar && authSizeVisVar.units) {
                    rendererType = "color-size-age";
                }
                else if (authColorVisVar && authColorVisVar.units) {
                    rendererType = "color-age-size";
                }
                else {
                    rendererType = "color-size";
                }
            }
            else if (authColorVisVar && authColorVisVar.style && colorVisVar.normalizationField) {
                rendererType = "compare";
            }
            else if (authColorVisVar && authColorVisVar.units) {
                if (hasSizeVisVar) {
                    rendererType = "color-age-size";
                }
                else {
                    rendererType = "color-age";
                }
            }
            else {
                rendererType = "color";
            }
        }
        else if (hasSizeVisVar) {
            if (((_a = cbRenderer.authoringInfo) === null || _a === void 0 ? void 0 : _a.type) === "univariate-color-size") {
                rendererType = "color-size";
            }
            else if (cbRenderer.valueExpression && !authSizeVisVar) {
                rendererType = "size";
            }
            else if (authSizeVisVar && authSizeVisVar.units) {
                rendererType = "size-age";
            }
            else {
                rendererType = "size";
            }
        }
        else {
            // classed
            const rend = renderer;
            const authoringInfo = rend.authoringInfo;
            if (authoringInfo) {
                if (authoringInfo.type === "class-breaks-color") {
                    rendererType = "color"; //"classed-color";
                }
                else if (authoringInfo.type === "class-breaks-size") {
                    rendererType = "size"; //"classed-size";
                }
                else {
                    // guess the type
                    if (isSizeChanging(rend.classBreakInfos)) {
                        rendererType = "size"; //"classed-size";
                    }
                    else {
                        rendererType = "color"; //"classed-color";
                    }
                }
            }
            else if (isPolygonType(layer)) {
                if (rend.valueExpression) {
                    if (isSizeChanging(rend.classBreakInfos)) {
                        rendererType = "size"; //"classed-size";
                    }
                    else {
                        rendererType = "color"; //"classed-color";
                    }
                }
                else if (rend.backgroundFillSymbol) {
                    rendererType = "size"; //"classed-size";
                }
                else {
                    rendererType = "color"; //"classed-color";
                }
            }
            else {
                if (isSizeChanging(rend.classBreakInfos)) {
                    rendererType = "size"; //"classed-size";
                }
                else {
                    rendererType = "color"; //"classed-color";
                }
            }
        }
    }
    else if (renderer.type === "unique-value") {
        if (renderer.valueExpression) {
            // TODO API bug; fixed in 4master
            if ((renderer.authoringInfo && renderer.authoringInfo.type === "predominance") ||
                renderer.valueExpressionTitle === "Predominant category") {
                if (hasVisVar(renderer, "size")) {
                    rendererType = "predominance-size";
                }
                else {
                    rendererType = "predominance";
                }
            }
            else if (renderer.authoringInfo && renderer.authoringInfo.type === "relationship") {
                if (hasVisVar(renderer, "size")) {
                    rendererType = "relationship-size";
                }
                else {
                    rendererType = "relationship";
                }
            }
            else if (hasVisVar(renderer, "size")) {
                rendererType = "type-size";
            }
            else {
                rendererType = "type";
            }
        }
        else if (hasSizeVisVar) {
            if (authSizeVisVar && authSizeVisVar.units) {
                rendererType = "type-size-age";
            }
            else {
                rendererType = "type-size";
            }
        }
        else {
            rendererType = "type";
        }
    }
    else if (renderer.type === "pie-chart") {
        if (hasVisVar(renderer, "size")) {
            rendererType = "chart-size";
        }
        else {
            rendererType = "chart";
        }
    }
    return rendererType;
}
function fixNormalizationField(renderer) {
    // otherwise legend will show labels for the only info
    const colorVisVar = getVisVar(renderer, "color");
    const sizeVisVar = getVisVar(renderer, "size");
    const rendererType = getRendererTypeFromRenderer(renderer);
    if (colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.normalizationField) {
        renderer.normalizationField = colorVisVar.normalizationField;
        renderer.normalizationType = "field";
    }
    else if (["color-size", "color-age-size", "color-size-age"].indexOf(rendererType) > -1 && colorVisVar) {
        renderer.normalizationField = undefined;
        renderer.normalizationType = undefined;
    }
    else if (rendererType === "size" && (sizeVisVar === null || sizeVisVar === void 0 ? void 0 : sizeVisVar.normalizationField)) {
        renderer.normalizationField = sizeVisVar.normalizationField;
        renderer.normalizationType = "field";
    }
}
function getRendererFieldInfos(layer) {
    var _a;
    let renderer = getRenderer(layer);
    let fieldInfos = [];
    const rendererType = getRendererType();
    switch (rendererType) {
        case "relationship":
        case "relationship-size": {
            fieldInfos = [
                {
                    field: renderer.authoringInfo.field1.field,
                    simpleFieldType: simpleFieldTypes.NUMBER
                },
                {
                    field: renderer.authoringInfo.field2.field,
                    simpleFieldType: simpleFieldTypes.NUMBER
                }
            ];
            const sizeVisVar = getVisVar(renderer, "size");
            if (sizeVisVar) {
                // relationship + size
                const field = getField(sizeVisVar.field);
                fieldInfos.push({
                    field: sizeVisVar.field,
                    expression: sizeVisVar.valueExpression,
                    expressionTitle: sizeVisVar.valueExpressionTitle,
                    simpleFieldType: sizeVisVar.field && field ? field.simpleFieldType : simpleFieldTypes.NUMBER
                });
            }
            break;
        }
        case "predominance":
        case "predominance-size": {
            fieldInfos = renderer.uniqueValueInfos.map((info) => {
                var _a;
                return {
                    field: "" + info.value,
                    simpleFieldType: ((_a = getField("" + info.value)) === null || _a === void 0 ? void 0 : _a.simpleFieldType) || simpleFieldTypes.NUMBER
                };
            });
            break;
        }
        case "chart":
        case "chart-size": {
            fieldInfos = renderer.attributes.map((attr) => {
                const field = getField(attr.field);
                return {
                    field: attr.field,
                    expression: attr.valueExpression,
                    expressionTitle: attr.valueExpressionTitle,
                    simpleFieldType: attr.field && field ? field.simpleFieldType : simpleFieldTypes.NUMBER
                };
            });
            break;
        }
    }
    if (fieldInfos.length) {
        // found it
        return fieldInfos;
    }
    switch (renderer.type) {
        case "dot-density": {
            fieldInfos = renderer.attributes.map((attribute) => {
                var _a;
                return {
                    field: attribute.field,
                    simpleFieldType: ((_a = getField(attribute.field)) === null || _a === void 0 ? void 0 : _a.simpleFieldType) || simpleFieldTypes.NUMBER
                };
            });
            break;
        }
        case "heatmap": {
            const hmRenderer = renderer;
            if (hmRenderer.field) {
                fieldInfos = [
                    {
                        field: hmRenderer.field,
                        simpleFieldType: ((_a = getField(hmRenderer.field)) === null || _a === void 0 ? void 0 : _a.simpleFieldType) || simpleFieldTypes.NUMBER
                    }
                ];
            }
            else {
                fieldInfos = [];
            }
            break;
        }
        case "class-breaks": {
            const cbRenderer = renderer;
            const field = getField(cbRenderer.field);
            fieldInfos = [
                {
                    field: cbRenderer.field,
                    expression: !field ? cbRenderer.valueExpression : undefined,
                    expressionTitle: !field ? cbRenderer.valueExpressionTitle : undefined,
                    simpleFieldType: cbRenderer.field && field ? field.simpleFieldType : simpleFieldTypes.NUMBER
                }
            ];
            const colorVisVar = getVisVar(renderer, "color");
            const sizeVisVar = getVisVar(renderer, "size");
            const authColorVisVar = getAuthVisVar(renderer, "color");
            const authSizeVisVar = getAuthVisVar(renderer, "size");
            if (colorVisVar && sizeVisVar) {
                // color + size
                if (colorVisVar.field === sizeVisVar.field &&
                    colorVisVar.valueExpression === sizeVisVar.valueExpression &&
                    colorVisVar.valueExpressionTitle === sizeVisVar.valueExpressionTitle) {
                    // same field
                    const field = getField(colorVisVar.field);
                    fieldInfos = [
                        {
                            field: colorVisVar.field,
                            expression: !field ? colorVisVar.valueExpression : undefined,
                            expressionTitle: !field ? colorVisVar.valueExpressionTitle : undefined,
                            simpleFieldType: colorVisVar.field && field ? field.simpleFieldType : simpleFieldTypes.NUMBER
                        }
                    ];
                }
                else {
                    if (authColorVisVar && authColorVisVar.units) {
                        // color-age
                        fieldInfos = [
                            {
                                field: authColorVisVar.field,
                                simpleFieldType: simpleFieldTypes.DATE
                            }
                        ];
                    }
                    else {
                        const field = getField(colorVisVar.field);
                        fieldInfos = [
                            {
                                field: colorVisVar.field,
                                expression: !field ? colorVisVar.valueExpression : undefined,
                                expressionTitle: !field ? colorVisVar.valueExpressionTitle : undefined,
                                simpleFieldType: colorVisVar.field && field ? field.simpleFieldType : simpleFieldTypes.NUMBER
                            }
                        ];
                    }
                    if (authSizeVisVar && authSizeVisVar.units) {
                        // size-age
                        fieldInfos.push({
                            field: authSizeVisVar.field,
                            simpleFieldType: simpleFieldTypes.DATE
                        });
                    }
                    else {
                        const field = getField(sizeVisVar.field);
                        fieldInfos.push({
                            field: sizeVisVar.field,
                            expression: !field ? sizeVisVar.valueExpression : undefined,
                            expressionTitle: !field ? sizeVisVar.valueExpressionTitle : undefined,
                            simpleFieldType: sizeVisVar.field && field ? field.simpleFieldType : simpleFieldTypes.NUMBER
                        });
                    }
                }
            }
            else if (colorVisVar) {
                // color
                if (authColorVisVar && authColorVisVar.units) {
                    fieldInfos = [
                        {
                            field: authColorVisVar.field,
                            simpleFieldType: simpleFieldTypes.DATE
                        }
                    ];
                }
                else {
                    const field = getField(colorVisVar.field);
                    fieldInfos = [
                        {
                            field: colorVisVar.field,
                            expression: !field ? colorVisVar.valueExpression : undefined,
                            expressionTitle: !field ? colorVisVar.valueExpressionTitle : undefined,
                            simpleFieldType: colorVisVar.field && field ? field.simpleFieldType : simpleFieldTypes.NUMBER
                        }
                    ];
                }
            }
            else if (sizeVisVar) {
                // size
                if (authSizeVisVar && authSizeVisVar.units) {
                    fieldInfos = [
                        {
                            field: authSizeVisVar.field,
                            simpleFieldType: simpleFieldTypes.DATE
                        }
                    ];
                }
                else {
                    const field = getField(sizeVisVar.field);
                    fieldInfos = [
                        {
                            field: sizeVisVar.field,
                            expression: !field ? sizeVisVar.valueExpression : undefined,
                            expressionTitle: !field ? sizeVisVar.valueExpressionTitle : undefined,
                            simpleFieldType: sizeVisVar.field && field ? field.simpleFieldType : simpleFieldTypes.NUMBER
                        }
                    ];
                }
            }
            if (authColorVisVar && authColorVisVar.style && colorVisVar.normalizationField) {
                // compare
                const field = getField(colorVisVar.field);
                const normField = getField(colorVisVar.normalizationField);
                fieldInfos = [
                    {
                        field: colorVisVar.field,
                        simpleFieldType: field ? field.simpleFieldType : simpleFieldTypes.NUMBER
                    },
                    {
                        field: colorVisVar.normalizationField,
                        simpleFieldType: normField ? normField.simpleFieldType : simpleFieldTypes.NUMBER
                    }
                ];
            }
            break;
        }
        case "unique-value": {
            if (renderer.authoringInfo && renderer.authoringInfo.type === "predominance") {
                // predominance
                const uvRenderer = renderer;
                fieldInfos = uvRenderer.uniqueValueInfos.map((info) => {
                    const field = getField("" + info.value);
                    return {
                        field: "" + info.value,
                        simpleFieldType: field ? field.simpleFieldType : simpleFieldTypes.NUMBER
                    };
                });
            }
            else if (renderer.authoringInfo && renderer.authoringInfo.type === "chart") {
                // chart
                const uvRenderer = renderer;
                fieldInfos = uvRenderer.uniqueValueInfos.map((info) => {
                    const field = getField("" + info.value);
                    return {
                        field: "" + info.value,
                        simpleFieldType: field ? field.simpleFieldType : simpleFieldTypes.NUMBER
                    };
                });
            }
            else if (renderer.authoringInfo && renderer.authoringInfo.type === "relationship") {
                // relationship
                const field1 = getField(renderer.authoringInfo.field1.field);
                const field2 = getField(renderer.authoringInfo.field2.field);
                fieldInfos = [
                    {
                        field: renderer.authoringInfo.field1.field,
                        simpleFieldType: field1 ? field1.simpleFieldType : simpleFieldTypes.NUMBER
                    },
                    {
                        field: renderer.authoringInfo.field2.field,
                        simpleFieldType: field2 ? field2.simpleFieldType : simpleFieldTypes.NUMBER
                    }
                ];
            }
            else {
                // types
                const uvRenderer = renderer;
                const field = getField(uvRenderer.field);
                let returnType = simpleFieldTypes.NUMBER;
                if (uvRenderer.field && field) {
                    returnType = field.simpleFieldType;
                }
                else if (uvRenderer.valueExpression &&
                    uvRenderer.uniqueValueInfos &&
                    uvRenderer.uniqueValueInfos[0] &&
                    typeof uvRenderer.uniqueValueInfos[0].value === "string") {
                    returnType = simpleFieldTypes.STRING;
                }
                fieldInfos = [
                    {
                        field: uvRenderer.field,
                        expression: !field ? uvRenderer.valueExpression : undefined,
                        expressionTitle: !field ? uvRenderer.valueExpressionTitle : undefined,
                        simpleFieldType: returnType
                    }
                ];
                const sizeVisVar = getVisVar(renderer, "size");
                if (sizeVisVar) {
                    // type + size
                    let fieldName = sizeVisVar.field;
                    if (!fieldName) {
                        // age renderer
                        const authSizeVisVar = getAuthVisVar(renderer, "size") || {};
                        fieldName = authSizeVisVar.field;
                    }
                    const field = getField(fieldName);
                    fieldInfos.push({
                        field: fieldName,
                        expression: !field ? sizeVisVar.valueExpression : undefined,
                        expressionTitle: !field ? sizeVisVar.valueExpressionTitle : undefined,
                        simpleFieldType: fieldName && field ? field.simpleFieldType : simpleFieldTypes.NUMBER
                    });
                }
            }
        }
    }
    return fieldInfos;
}
function getHandleInfo(theme, stops, noSegment = false) {
    if (!stops || stops.length === 5) {
        switch (theme) {
            case "high-to-low":
            case "above":
            case "below":
                return {
                    handlesSyncedToPrimary: false,
                    primaryHandleEnabled: false,
                    visibleElements: {
                        interactiveTrack: true
                    }
                };
            case "above-and-below":
                return {
                    handlesSyncedToPrimary: false,
                    primaryHandleEnabled: true,
                    syncedSegmentsEnabled: !noSegment,
                    visibleElements: {
                        interactiveTrack: !noSegment
                    }
                };
            case "centered-on":
                return {
                    handlesSyncedToPrimary: false,
                    primaryHandleEnabled: true,
                    syncedSegmentsEnabled: true,
                    visibleElements: {
                        interactiveTrack: true
                    }
                };
            case "extremes":
                return {
                    handlesSyncedToPrimary: false,
                    primaryHandleEnabled: true,
                    syncedSegmentsEnabled: true,
                    visibleElements: {
                        interactiveTrack: true
                    }
                };
        }
    }
    else {
        return {
            handlesSyncedToPrimary: false,
            primaryHandleEnabled: false,
            visibleElements: {
                interactiveTrack: true
            }
        };
    }
}
function getBasemapType(mapView) {
    const baseLayer = mapView.map.basemap.baseLayers.getItemAt(0);
    if (!baseLayer.url) {
        if (baseLayer.declaredClass === "esri.layers.OpenStreetMapLayer") {
            return "osm";
        }
        else {
            return "topo";
        }
    }
    const url = baseLayer.url.toLowerCase();
    if (url.indexOf("arcgis/rest/services/World_Street_Map".toLowerCase()) > -1) {
        return "streets";
    }
    else if (url.indexOf("ArcGIS/rest/services/Canvas/World_Light_Gray_Base".toLowerCase()) > -1) {
        return "gray";
    }
    else if (url.indexOf("arcgis/rest/services/World_Topo_Map".toLowerCase()) > -1 ||
        url.indexOf("arcgis/rest/services/USGSTopo".toLowerCase()) > -1) {
        return "topo";
    }
    else if (url.indexOf("ArcGIS/rest/services/World_Terrain_Base".toLowerCase()) > -1) {
        return "terrain";
    }
    else if (url.indexOf("arcgis/rest/services/NatGeo_World_Map".toLowerCase()) > -1) {
        return "national-geographic";
    }
    else if (url.indexOf("arcgis/rest/services/Ocean/World_Ocean_Base".toLowerCase()) > -1) {
        return "oceans";
    }
    else if (url.indexOf("arcgis/rest/services/World_Imagery".toLowerCase()) > -1) {
        return "satellite";
    }
    else if (url.indexOf("ArcGIS/rest/services/Reference/World_Boundaries_and_Places".toLowerCase()) > -1) {
        return "hybrid";
    }
    else if (url.indexOf("arcgis/rest/services/Canvas/World_Dark_Gray_Base".toLowerCase()) > -1) {
        return "dark-gray";
    }
    return "topo";
}
function getZoomOptions(stops, totalMin, totalMax) {
    if (!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_5__.i)(totalMin) || !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_5__.i)(totalMax)) {
        return null;
    }
    const lowerThumb = stops[0].value;
    const upperThumb = stops[stops.length - 1].value;
    const range = upperThumb - lowerThumb;
    const padding = range * 0.3;
    const zoomMin = lowerThumb - padding > totalMin ? lowerThumb - padding : null;
    const zoomMax = upperThumb + padding < totalMax ? upperThumb + padding : null;
    return { min: zoomMin, max: zoomMax, minMaxSame: lowerThumb === upperThumb };
}
function updateRenderer() {
    const { layer, mapImageSublayer } = smartMappingState;
    const isGeoRSS = layer.declaredClass === "esri.layers.GeoRSSLayer";
    if (isGeoRSS) {
        const geoRSSLayer = layer;
        geoRSSLayer.pointSymbol = geoRSSLayer.pointSymbol.clone();
        geoRSSLayer.lineSymbol = geoRSSLayer.lineSymbol.clone();
        geoRSSLayer.polygonSymbol = geoRSSLayer.polygonSymbol.clone();
    }
    else {
        applyRenderer(getRenderer(layer).clone(), layer);
        if (mapImageSublayer) {
            mapImageSublayer.renderer = getRenderer(layer).clone();
        }
    }
}
function applyRenderer(renderer, layer) {
    var _a;
    if ("featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning") {
        layer.featureReduction.renderer = renderer;
    }
    else if ("renderer" in layer) {
        layer.renderer = renderer;
    }
}
/*
 * Apply renderer to layer and mapImageSublayer and make sure it works with featureReduction.
 */
function applyRendererToAll(originalRendererJSON, originalFeatureReduction) {
    const { layer, mapImageSublayer, modules } = smartMappingState;
    if (originalFeatureReduction && "featureReduction" in layer) {
        // to avoid errors while new featureReduction doesn't fit to orig renderer
        layer.featureReduction = null;
    }
    applyRenderer(modules.rendererJsonUtils.fromJSON(originalRendererJSON), layer);
    if (originalFeatureReduction && "featureReduction" in layer) {
        layer.featureReduction = originalFeatureReduction;
    }
    if (mapImageSublayer) {
        mapImageSublayer.renderer = modules.rendererJsonUtils.fromJSON(originalRendererJSON);
    }
}
function getRenderer(layer) {
    var _a;
    if ("featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning") {
        return layer.featureReduction.renderer;
    }
    return "renderer" in layer && layer.renderer;
}
function getRendererTheme(subType) {
    const { layer } = smartMappingState;
    const renderer = "renderer" in layer && layer.renderer;
    const authInfo = "authoringInfo" in renderer && renderer.authoringInfo;
    const authColorVisVar = getAuthVisVar(getRenderer(layer), "color");
    const authSizeVisVar = getAuthVisVar(getRenderer(layer), "size");
    return ((subType === "color"
        ? authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.theme
        : subType === "size"
            ? authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.theme
            : (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) || (authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.theme) || (authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.theme)) || "");
}
function isSizeChanging(classBreakInfos) {
    // this gets tricky, because the user can change each symbol to anything
    // so if at least 2 symbols have the same color we assume size
    let i, k;
    for (i = 0; i < classBreakInfos.length; i++) {
        const sym1 = classBreakInfos[i].symbol;
        for (k = 0; k < classBreakInfos.length; k++) {
            const sym2 = classBreakInfos[k].symbol;
            if (i !== k && hasSameColor(sym1, sym2)) {
                return true;
            }
        }
    }
    return false;
}
function hasSameColor(sym1, sym2) {
    if (sym1.type == "picture-marker") {
        return false;
    }
    if (sym1.style === "cross" || sym1.style === "x") {
        if (sym2.style === "cross" || sym2.style === "x") {
            return ((!sym1.outline.color && !sym2.outline.color) ||
                (sym1.outline.color && sym2.outline.color && sym1.outline.color.toString() === sym2.outline.color.toString()));
        }
        else {
            return ((!sym1.outline.color && !sym2.color) ||
                (sym1.outline.color && sym2.color && sym1.outline.color.toString() === sym2.color.toString()));
        }
    }
    else {
        if (sym2.style === "cross" || sym2.style === "x") {
            return ((!sym1.color && !sym2.outline.color) ||
                (sym1.color && sym2.outline.color && sym1.color.toString() === sym2.outline.color.toString()));
        }
        else {
            return ((!sym1.color && !sym2.color) || (sym1.color && sym2.color && sym1.color.toString() === sym2.color.toString()));
        }
    }
}
function findColorScheme(theme) {
    // theme is optional
    const { layer, modules } = smartMappingState;
    const renderer = getRenderer(layer);
    const rendererType = getRendererType();
    if (["unique-size", "unique-size-age"].indexOf(rendererType) > -1) {
        return null;
    }
    // try to figure this out
    let matchingSchemes;
    const colorVisVar = getVisVar(renderer, "color");
    const infos = renderer.classBreakInfos ? renderer.classBreakInfos : renderer.uniqueValueInfos;
    let colors;
    if (colorVisVar) {
        colors = colorVisVar.stops.map((stop) => {
            return stop.color;
        });
        matchingSchemes = modules.colorSchemes.getMatchingSchemes({
            theme: theme || "high-to-low",
            colors: colors,
            geometryType: getGeometryType(layer) || defaultGeometry
        });
    }
    else if (infos && infos.length >= 1) {
        colors = infos
            ? infos
                .map((info) => {
                return getSymbolColor(info.symbol);
            })
                .filter((color) => {
                return color;
            })
            : null;
        if (colors && colors.length) {
            if (colors.length > 10) {
                colors = colors.slice(0, 9);
            }
            matchingSchemes = getMatchingSchemes(colors, theme);
        } // else might have point-cloud tag
    }
    if (matchingSchemes && matchingSchemes.length) {
        return matchingSchemes[0];
    }
    return null;
}
function getMatchingSchemes(colors, theme) {
    const { layer, modules } = smartMappingState;
    let matchingSchemes = modules.colorSchemes.getMatchingSchemes({
        theme: theme || "high-to-low",
        colors: colors,
        geometryType: getGeometryType(layer) || defaultGeometry
    });
    if (theme && (!matchingSchemes || !matchingSchemes.length)) {
        matchingSchemes = modules.colorSchemes.getMatchingSchemes({
            theme: "high-to-low",
            colors: colors,
            geometryType: getGeometryType(layer) || defaultGeometry
        });
    }
    if (!matchingSchemes || !matchingSchemes.length) {
        matchingSchemes = modules.colorSchemes.getMatchingSchemes({
            theme: "above-and-below",
            colors: colors,
            geometryType: getGeometryType(layer) || defaultGeometry
        });
    }
    return matchingSchemes;
}
function findRelationshipScheme() {
    const { layer, mapView, modules } = smartMappingState;
    const renderer = getRenderer(layer);
    const infos = renderer.uniqueValueInfos;
    if (!infos || infos.length < 2) {
        return null;
    }
    const currentNumClasses = Math.sqrt(infos.length);
    const schemes = modules.relationshipSchemes.getSchemes({
        basemap: mapView.map.basemap || "topo",
        geometryType: getGeometryType(layer)
    });
    const allSchemes = [schemes.primaryScheme].concat(schemes.secondarySchemes);
    const matchingSchemes = [];
    allSchemes.forEach((scheme) => {
        let allColors = [];
        scheme.colorsForClassBreaks[currentNumClasses - 2].colors.forEach((arr) => {
            allColors = allColors.concat(modules.esriLang.clone(arr));
        });
        const hasNoMatch = infos.some((info) => {
            const color = getSymbolColor(info.symbol);
            // order doesn't matter
            return !color ? false : !allColors.find((allColor) => isSameColor(allColor, color));
        });
        if (!hasNoMatch) {
            matchingSchemes.push(scheme);
        }
    });
    return matchingSchemes.length ? matchingSchemes[0] : null;
}
function findTypeScheme() {
    const { layer, mapView, modules } = smartMappingState;
    const renderer = getRenderer(layer);
    if (!renderer.uniqueValueInfos || renderer.uniqueValueInfos.length < 2) {
        return null;
    }
    const schemes = modules.typeSchemes.getSchemes({
        basemap: mapView.map.basemap,
        geometryType: getGeometryType(layer) || defaultGeometry
    });
    return findScheme(schemes);
}
function findPredominanceScheme() {
    const { layer, mapView, modules } = smartMappingState;
    const renderer = getRenderer(layer);
    if (!renderer.uniqueValueInfos || renderer.uniqueValueInfos.length < 2) {
        return null;
    }
    const schemes = modules.predominanceSchemes.getSchemes({
        basemap: mapView.map.basemap,
        geometryType: getGeometryType(layer),
        numColors: 10 //renderer.uniqueValueInfos.length
    });
    return findScheme(schemes);
}
function findPieChartScheme() {
    const { layer, mapView, modules } = smartMappingState;
    const renderer = getRenderer(layer);
    if (!renderer.attributes || renderer.attributes.length < 2) {
        return null;
    }
    const schemes = modules.pieChartSchemes.getSchemes({
        basemap: mapView.map.basemap,
        geometryType: getGeometryType(layer),
        numColors: 10 //renderer.uniqueValueInfos.length
    });
    return findScheme(schemes);
}
function findHeatmapScheme() {
    // theme is optional
    const { layer, mapView, modules } = smartMappingState;
    const renderer = getRenderer(layer);
    // try to figure this out
    let colors;
    colors = renderer.colorStops
        .filter((__, idx) => idx >= 3)
        .map((stop) => {
        return stop.color;
    });
    const schemes = modules.heatmapSchemes.getSchemes({
        basemap: mapView.map.basemap || "topo" // TODO
    });
    const allSchemes = [schemes.primaryScheme].concat(schemes.secondarySchemes);
    const matchingSchemes = [];
    allSchemes.forEach((scheme) => {
        const hasNoMatch = colors.some((color, idx) => {
            return !isSameColor(scheme.colors[idx], color);
        });
        if (!hasNoMatch) {
            matchingSchemes.push(scheme);
        }
    });
    return matchingSchemes.length ? matchingSchemes[0] : null;
}
function findScheme(schemes) {
    const { layer } = smartMappingState;
    const renderer = getRenderer(layer);
    const infos = renderer.uniqueValueInfos;
    if (!infos || infos.length < 2) {
        return null;
    }
    const colorRampsAndSchemes = getColorRampsWithSchemes(schemes, Math.min(infos.length, 10));
    const matchingSchemes = [];
    colorRampsAndSchemes.forEach((ramp) => {
        const hasNoMatch = infos
            .filter((__, idx) => idx < 10)
            .some((info, idx) => {
            const color = getSymbolColor(info.symbol);
            return !color ? false : !isSameColor(ramp.colors[idx], color);
        });
        if (!hasNoMatch) {
            matchingSchemes.push(ramp.scheme);
        }
    });
    return matchingSchemes.length ? matchingSchemes[0] : null;
}
function getPrimaryTypeScheme() {
    const { layer, mapView, modules } = smartMappingState;
    const schemes = modules.typeSchemes.getSchemes({
        basemap: mapView.map.basemap,
        geometryType: getGeometryType(layer) || defaultGeometry
    });
    return schemes.primaryScheme;
}
function isSameColor(a, b) {
    if (a.r === b.r && a.g === b.g && a.b === b.b) {
        return true;
    }
    return false;
}

function getColorRampsWithSchemes(schemes, numClasses) {
    const allSchemes = _unify(schemes), colorRampsAndSchemes = [];
    allSchemes.forEach((scheme) => {
        const isClassed = numClasses > 0, hasColorsForClassBreaks = !!scheme.colorsForClassBreaks;
        let colors;
        if (isClassed) {
            colors = hasColorsForClassBreaks
                ? _maxSupportedClassBreakColors(scheme.colorsForClassBreaks, numClasses)
                : scheme.colors;
        }
        else {
            colors = scheme.colors;
        }
        colorRampsAndSchemes.push({
            colors,
            scheme
        });
    });
    return colorRampsAndSchemes;
}
function getFillColors(schemes) {
    const allSchemes = _unify(schemes);
    let fillColors = [];
    allSchemes.forEach(function (scheme) {
        if (scheme.colors) {
            fillColors = fillColors.concat(scheme.colors);
        }
    });
    return _removeDuplicates(fillColors);
}
function _unify(schemes) {
    return [schemes.primaryScheme].concat(schemes.secondarySchemes);
}
function _maxSupportedClassBreakColors(colorsForClassBreaks, numClasses) {
    const totalColorsForClassBreaks = colorsForClassBreaks.length;
    let colors = [];
    for (let i = 0; i < totalColorsForClassBreaks; i++) {
        const colorForClassBreaks = colorsForClassBreaks[i];
        if (numClasses < colorForClassBreaks.numClasses) {
            break;
        }
        colors = colorForClassBreaks.colors;
    }
    return colors;
}
function _removeDuplicates(colors) {
    const usedHexColors = {};
    return colors.filter(function (color) {
        const unusedColor = !usedHexColors[color.toHex()];
        if (unusedColor) {
            usedHexColors[color.toHex()] = 1;
        }
        return unusedColor;
    });
}

function getDefaultSymbol(layer, mapView, rendererType) {
    const { modules } = smartMappingState;
    const symbolInfo = modules.typeSchemes.getSchemes({
        theme: "default",
        basemap: getBasemapType(mapView),
        geometryType: getGeometryType(layer)
    }).primaryScheme;
    let defaultSymbol;
    if (isPointType(layer) ||
        (rendererType &&
            [
                "size",
                "color-size",
                "color-age-size",
                "color-size-age",
                "color-age-size-age",
                "type-size",
                "predominance-size",
                "chart-size",
                "relationship-size"
            ].indexOf(rendererType) > -1)) {
        const outlineSym = new modules.SimpleLineSymbol({
            style: "solid",
            color: new modules.esriColor(symbolInfo.outline.color),
            width: symbolInfo.outline.width
        });
        defaultSymbol = new modules.SimpleMarkerSymbol({
            style: "circle",
            size: symbolInfo.size,
            outline: outlineSym,
            color: symbolInfo.noDataColor
        });
    }
    else if (isPolygonType(layer)) {
        const outlineSym = new modules.SimpleLineSymbol({
            style: "solid",
            color: new modules.esriColor(symbolInfo.outline.color),
            width: symbolInfo.outline.width
        });
        defaultSymbol = new modules.SimpleFillSymbol({
            style: "solid",
            outline: outlineSym,
            color: symbolInfo.noDataColor
        });
    }
    else if (isPolylineType(layer)) {
        defaultSymbol = new modules.SimpleLineSymbol({
            style: "solid",
            color: new modules.esriColor(symbolInfo.noDataColor),
            width: symbolInfo.width
        });
    }
    return defaultSymbol;
}
function getGeoRSSDefaultSymbol(mapView, type) {
    const { modules } = smartMappingState;
    const symbolInfo = modules.typeSchemes.getSchemes({
        theme: "default",
        basemap: getBasemapType(mapView),
        geometryType: type === "line" ? "polyline" : type
    }).primaryScheme;
    let defaultSymbol;
    if (type === "point") {
        const outlineSym = new modules.SimpleLineSymbol({
            style: "solid",
            color: new modules.esriColor(symbolInfo.outline.color),
            width: symbolInfo.outline.width
        });
        defaultSymbol = new modules.SimpleMarkerSymbol({
            style: "circle",
            size: symbolInfo.size,
            outline: outlineSym,
            color: symbolInfo.noDataColor
        });
    }
    else if (type === "polygon") {
        const outlineSym = new modules.SimpleLineSymbol({
            style: "solid",
            color: new modules.esriColor(symbolInfo.outline.color),
            width: symbolInfo.outline.width
        });
        defaultSymbol = new modules.SimpleFillSymbol({
            style: "solid",
            outline: outlineSym,
            color: symbolInfo.noDataColor
        });
    }
    else if (type === "line") {
        defaultSymbol = new modules.SimpleLineSymbol({
            style: "solid",
            color: new modules.esriColor(symbolInfo.noDataColor),
            width: symbolInfo.width
        });
    }
    return defaultSymbol;
}
/**
 * to get the default symbol for Raster layers
 */
function getRasterDefaultSymbol() {
    const { modules } = smartMappingState;
    return new modules.SimpleFillSymbol({
        color: [184, 184, 184, 1],
        style: "solid",
        outline: {
            // autocasts as new SimpleLineSymbol()
            color: "white",
            width: 1
        }
    });
}
function isSymbolTransparent(symbol) {
    if (!symbol) {
        return false;
    }
    let isTransparent = false;
    const color = getSymbolColor(symbol);
    if (symbol && symbol.declaredClass === "esri.symbols.SimpleFillSymbol") {
        const outline = symbol.outline;
        if ((!color || color.a === 0) && (!outline || !outline.color || outline.color.a === 0)) {
            isTransparent = true;
        }
    }
    else if (symbol && symbol.declaredClass === "esri.symbols.SimpleLineSymbol") {
        if (!color || color.a === 0) {
            isTransparent = true;
        }
    }
    else if (symbol && symbol.declaredClass === "esri.symbols.SimpleMarkerSymbol") {
        const outline = symbol.outline;
        if ((!color || color.a === 0) && (!outline || !outline.color || outline.color.a === 0)) {
            isTransparent = true;
        }
    }
    return isTransparent;
}
function isSymbolAlmostWhite(symbol) {
    const { modules } = smartMappingState;
    if (symbol) {
        const contrast = modules.previewSymbol2D.getContrastingBackgroundTheme(symbol, 245);
        return contrast === "dark";
    }
    return false;
}
function getSymbolColor(symbol) {
    var _a, _b;
    const { modules } = smartMappingState;
    return (symbol === null || symbol === void 0 ? void 0 : symbol.type) === "cim"
        ? modules.esriColor.fromJSON((_a = modules.cimSymbolUtils.getCIMSymbolColor(symbol)) === null || _a === void 0 ? void 0 : _a.toJSON())
        : (symbol === null || symbol === void 0 ? void 0 : symbol.type) === "simple-marker" && ["x", "cross"].indexOf(symbol === null || symbol === void 0 ? void 0 : symbol.style) > -1
            ? (_b = symbol === null || symbol === void 0 ? void 0 : symbol.outline) === null || _b === void 0 ? void 0 : _b.color
            : symbol === null || symbol === void 0 ? void 0 : symbol.color;
}
function applySymbolColor(sym, color) {
    const { modules } = smartMappingState;
    if (sym.type === "picture-marker") {
        return;
    }
    if (sym.type === "cim") {
        modules.cimSymbolUtils.applyCIMSymbolColor(sym, color);
    }
    else if (sym.type === "simple-marker" && sym.style && ["cross", "x"].indexOf(sym.style) > -1) {
        if (!sym.outline) {
            sym.outline = new __esri.SimpleLineSymbol();
        }
        sym.outline.color = color;
    }
    else {
        sym.color = color;
    }
}
function applyAlpha(color, alpha) {
    if (color) {
        color.a = alpha;
    }
    return color;
}
function getSymbolSize(sym) {
    const { modules } = smartMappingState;
    if (sym.type === "cim") {
        return modules.cimSymbolUtils.getCIMSymbolSize(sym);
    }
    else if (sym.size) {
        return sym.size;
    }
    return sym.width;
}
function applySymbolSize(sym, size) {
    const { modules } = smartMappingState;
    if (sym.type === "cim") {
        // we don't want to change the outline here...
        //const outline = getCimLine(sym);
        //const width = outline?.width;
        // symbol styler doesn't use preserveOutlineWidth, so comparing CIMs is not going to work
        modules.cimSymbolUtils.scaleCIMSymbolTo(sym, size /* , { preserveOutlineWidth: true } */);
        //if (outline && ["CIMPointSymbol", "CIMPolygonSymbol"].indexOf(sym.data.symbol.type) > -1) {
        // set outline width back
        //  outline.width = width;
        //}
    }
    else if ((0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_5__.i)(sym.size)) {
        sym.size = size;
    }
    else {
        const ratio = sym.height / sym.width;
        sym.width = size;
        sym.height = sym.width * ratio;
    }
}
function getCIMOutlineWidth(symbol) {
    var _a, _b;
    // just take first stroke
    const stroke = (_a = symbol.data.symbol.symbolLayers) === null || _a === void 0 ? void 0 : _a.find((symbolLayer) => ["CIMSolidStroke", "CIMPictureStroke"].indexOf(symbolLayer.type) > -1);
    return (_b = stroke === null || stroke === void 0 ? void 0 : stroke.width) !== null && _b !== void 0 ? _b : 0;
}
function getSymbolRotation(sym) {
    const { modules } = smartMappingState;
    if (sym.type === "cim") {
        return modules.cimSymbolUtils.getCIMSymbolRotation(sym, true);
    }
    else if (["simple-marker", "picture-marker"].indexOf(sym.type) > -1) {
        return sym.angle;
    }
    return;
}
function applySymbolRotation(sym, angle) {
    const { modules } = smartMappingState;
    if (angle === null || angle === undefined) {
        return;
    }
    if (sym.type === "cim") {
        modules.cimSymbolUtils.applyCIMSymbolRotation(sym, angle, true);
    }
    else if (["simple-marker", "picture-marker"].indexOf(sym.type) > -1) {
        sym.angle = angle;
    }
}
function hasSymbolOutline(sym) {
    var _a;
    return sym.type === "picture-marker"
        ? false
        : sym.type === "cim"
            ? [/* "CIMPointSymbol", */ "CIMPolygonSymbol"].indexOf(sym.data.symbol.type) > -1 && !!getCimLine(sym)
            : !!((_a = sym.outline) === null || _a === void 0 ? void 0 : _a.color);
}
function switchMarkersToPolygons(renderer, polygonSymbol) {
    var _a, _b;
    if ((_a = renderer.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a.length) {
        const infos = renderer.uniqueValueInfos.slice();
        infos.map((info) => {
            const symbol = polygonSymbol.clone();
            applySymbolColor(symbol, getSymbolColor(info.symbol));
            info.symbol = symbol;
        });
        renderer.uniqueValueInfos = infos;
    }
    else if ((_b = renderer.classBreakInfos) === null || _b === void 0 ? void 0 : _b.length) {
        const infos = renderer.classBreakInfos.slice();
        infos.map((info) => {
            const symbol = polygonSymbol.clone();
            applySymbolColor(symbol, getSymbolColor(info.symbol));
            info.symbol = symbol;
        });
        renderer.classBreakInfos = infos;
    }
    else if (renderer.symbol) {
        const symbol = polygonSymbol.clone();
        applySymbolColor(symbol, getSymbolColor(renderer.symbol));
        renderer.symbol = symbol;
    }
}
function switchPolygonsToMarkers(renderer, markerSymbol) {
    var _a, _b;
    if ((_a = renderer.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a.length) {
        const infos = renderer.uniqueValueInfos.slice();
        infos.map((info) => {
            const symbol = markerSymbol.clone();
            applySymbolColor(symbol, getSymbolColor(info.symbol));
            info.symbol = symbol;
        });
        renderer.uniqueValueInfos = infos;
    }
    else if ((_b = renderer.classBreakInfos) === null || _b === void 0 ? void 0 : _b.length) {
        const infos = renderer.classBreakInfos.slice();
        infos.map((info) => {
            const symbol = markerSymbol.clone();
            applySymbolColor(symbol, getSymbolColor(info.symbol));
            info.symbol = symbol;
        });
        renderer.classBreakInfos = infos;
    }
    else if (renderer.symbol) {
        const symbol = markerSymbol.clone();
        applySymbolColor(symbol, getSymbolColor(renderer.symbol));
        renderer.symbol = symbol;
    }
}
function isCimLineSymbol(sym) {
    var _a;
    return sym.type === "cim" && ((_a = sym.data.symbol) === null || _a === void 0 ? void 0 : _a.type) === "CIMLineSymbol";
}
function getCimLine(sym) {
    var _a, _b, _c;
    if (((_a = sym.data.symbol) === null || _a === void 0 ? void 0 : _a.type) === "CIMPointSymbol") {
        return undefined; //getCimPointOutline(sym);
    }
    else if (((_b = sym.data.symbol) === null || _b === void 0 ? void 0 : _b.type) === "CIMLineSymbol") {
        return getCimLineLine(sym);
    }
    else if (((_c = sym.data.symbol) === null || _c === void 0 ? void 0 : _c.type) === "CIMPolygonSymbol") {
        return getCimPolygonOutline(sym);
    }
}
function getCimLineLine(sym) {
    const symbolLayers = sym.data.symbol.symbolLayers;
    return symbolLayers[0];
}
function getCimPolygonOutline(sym) {
    // we can assume the top stroke layer on polygons is an outline
    const symbolLayers = sym.data.symbol.symbolLayers;
    return symbolLayers.find((sl) => sl.type === "CIMSolidStroke");
}
function isFillOnlyCIM(sym) {
    const { modules } = smartMappingState;
    return !!modules.cimSymbolUtils.getCIMSymbolColor(sym);
}
function layerSupportsCIM() {
    var _a;
    const { mapImageSublayer, layer } = smartMappingState;
    if (mapImageSublayer) {
        return !!((_a = layer.sourceJSON) === null || _a === void 0 ? void 0 : _a.cimVersion);
    }
    return true;
}
/*function hasFill(symbolLayers: any[]): boolean {
  return symbolLayers?.find((sl: any) => sl.type === "CIMSolidFill");
}

function hasUnlockedFill(symbolLayers: any[]): boolean {
  return symbolLayers?.find((sl: any) => sl.type === "CIMSolidFill" && !sl.colorLocked);
}

function hasStroke(symbolLayers: any[]): boolean {
  return symbolLayers?.find((sl: any) => sl.type === "CIMSolidStroke");
}

function hasFillAndStroke(symbolLayers: any[]): boolean {
  return hasFill(symbolLayers) && hasStroke(symbolLayers);
}

function hasUnlockedFillAndStroke(symbolLayers: any[]): boolean {
  return hasUnlockedFill(symbolLayers) && hasStroke(symbolLayers);
} */
function isLineMarker(sym) {
    if (sym.style && ["cross", "x"].indexOf(sym.style) > -1) {
        return true;
    }
    return false;
}
function isPictureMarker(sym) {
    if (sym.type === "picture-marker") {
        return true;
    }
    else if (sym.type === "cim" && !isFillOnlyCIM(sym)) {
        return true;
    }
    return false;
}
function getRenderPreviewSize(symbol) {
    return symbol.type === "simple-line"
        ? {
            width: 12,
            height: 3
        }
        : symbol.type === "cim" && symbol.data.symbol.type === "CIMLineSymbol"
            ? undefined
            : symbol.type === "simple-fill"
                ? 14 /* {
                    width: 12,
                    height: 12
                  } because CIMs still have the non-square shape */
                : symbol.type === "cim" && symbol.data.symbol.type === "CIMPolygonSymbol"
                    ? undefined
                    : symbol.type === "cim"
                        ? 20
                        : 14;
}
function getSymbolChanges(newSym, lastSym) {
    // props only return true if those are the only changes in the symbol
    // { rotation: boolean, size: boolean, color: boolean }
    //console.log("newSym - size", getSymbolSize(newSym), JSON.stringify(newSym.toJSON()));
    //console.log("lastSym - size", getSymbolSize(lastSym), JSON.stringify(lastSym.toJSON()));
    var _a, _b, _c, _d;
    if (newSym.type !== lastSym.type) {
        /* console.log(
          "* getSymbolChanges *",
          "hasRotationChanges:",
          false,
          "hasSizeChanges:",
          false,
          "hasOutlineChanges:",
          false,
          "hasColorChanges:",
          false,
          "hasOtherChanges:",
          true
        ); */
        return {
            hasOtherChanges: true,
            any: true
        };
    }
    const hasRotationChanges = getSymbolRotation(newSym) !== getSymbolRotation(lastSym);
    // consider rounding issues between pt and px conversions
    const hasSizeChanges = Math.abs(getSymbolSize(newSym) - getSymbolSize(lastSym)) > 0.01;
    const hasColorChanges = JSON.stringify((_a = getSymbolColor(newSym)) === null || _a === void 0 ? void 0 : _a.toJSON()) !== JSON.stringify((_b = getSymbolColor(lastSym)) === null || _b === void 0 ? void 0 : _b.toJSON());
    const hasOutlineChanges = ["simple-marker", "simple-fill"].indexOf(newSym.type) > -1
        ? JSON.stringify((_c = newSym.outline) === null || _c === void 0 ? void 0 : _c.toJSON()) !== JSON.stringify((_d = lastSym.outline) === null || _d === void 0 ? void 0 : _d.toJSON())
        : false;
    const tempSym = newSym.clone();
    applySymbolSize(tempSym, getSymbolSize(lastSym));
    applySymbolColor(tempSym, getSymbolColor(lastSym));
    if (["simple-marker", "simple-fill"].indexOf(newSym.type) > -1) {
        tempSym.outline = lastSym.outline.clone();
    }
    applySymbolRotation(tempSym, getSymbolRotation(lastSym));
    //console.log("tempSym - size", getSymbolSize(tempSym), JSON.stringify(tempSym.toJSON()));
    const hasOtherChanges = !isSameSymbol(tempSym, lastSym);
    /* console.log(
      "* getSymbolChanges *",
      "hasRotationChanges:",
      hasRotationChanges,
      "hasSizeChanges:",
      hasSizeChanges,
      "hasOutlineChanges:",
      hasOutlineChanges,
      "hasColorChanges:",
      hasColorChanges,
      "hasOtherChanges:",
      hasOtherChanges
    ); */
    return {
        rotation: hasRotationChanges && !hasSizeChanges && !hasColorChanges && !hasOutlineChanges && !hasOtherChanges,
        size: hasSizeChanges && !hasRotationChanges && !hasColorChanges && !hasOutlineChanges && !hasOtherChanges,
        outline: hasOutlineChanges && !hasRotationChanges && !hasSizeChanges && !hasColorChanges && !hasOtherChanges,
        color: hasColorChanges && !hasRotationChanges && !hasSizeChanges && !hasOutlineChanges && !hasOtherChanges,
        other: hasOtherChanges,
        any: hasRotationChanges || hasSizeChanges || hasOutlineChanges || hasColorChanges || hasOtherChanges
    };
}
function updateSymbol(symbol, fromSymbol, color, symbolChangeInfo) {
    var _a;
    if (symbolChangeInfo.rotation) {
        applySymbolRotation(symbol, getSymbolRotation(fromSymbol));
    }
    else if (symbolChangeInfo.size) {
        applySymbolSize(symbol, getSymbolSize(fromSymbol));
    }
    else if (symbolChangeInfo.color) {
        if (symbol.type === "picture-marker") {
            symbol = fromSymbol.clone();
        }
        applySymbolColor(symbol, color);
    }
    else if (symbolChangeInfo.outline) {
        if (symbol.type === "picture-marker") {
            symbol = fromSymbol.clone();
        }
        else {
            symbol.outline = (_a = fromSymbol.outline) === null || _a === void 0 ? void 0 : _a.clone();
        }
    }
    else {
        // we're changing the entire symbol
        symbol = fromSymbol.clone();
        applySymbolColor(symbol, color);
    }
    return symbol;
}
function isSameSymbol(sym1, sym2) {
    if (JSON.stringify(sym1.toJSON()) === JSON.stringify(sym2.toJSON())) {
        return true;
    }
    else if (sym1.type === "cim" && sym2.type === "cim") {
        // it could just be rounding issues for size and width
        return deepCIMEqual(sym1.toJSON().symbol, sym2.toJSON().symbol);
    }
    return false;
}
function deepCIMEqual(x, y) {
    const ok = Object.keys, tx = typeof x, ty = typeof y;
    if (x && y && tx === "object" && tx === ty) {
        return (ok(x).length === ok(y).length &&
            ok(x).every((key) => {
                if (key === "size" || key === "width") {
                    return Math.abs(x[key] - y[key]) < 0.01;
                }
                else {
                    return deepCIMEqual(x[key], y[key]);
                }
            }));
    }
    else {
        return x === y;
    }
}

function hasVisVar(object, type, target) {
    // target="auto" - means the visual variable for automatic sizing
    const visVars = object && object.visualVariables;
    if (visVars) {
        return visVars.some((visVar) => {
            // SizeVariable has property target
            const visVarTarget = visVar.target;
            const isAutomatic = visVar.valueExpression === "$view.scale";
            return (visVar.type === type &&
                ((!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_5__.i)(visVarTarget) && !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_5__.i)(target) && !isAutomatic) ||
                    visVarTarget === target ||
                    (target === "auto" && isAutomatic)));
        });
    }
    return false;
}
function getVisVar(object, type, target) {
    // target="auto" - means the visual variable for automatic sizing
    const visVars = object && object.visualVariables;
    if (visVars) {
        const foundVisVars = visVars.filter((visVar) => {
            const visVarTarget = visVar.target;
            const isAutomatic = visVar.valueExpression === "$view.scale";
            return (visVar.type === type &&
                ((!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_5__.i)(visVarTarget) && !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_5__.i)(target) && !isAutomatic) ||
                    visVarTarget === target ||
                    (target === "auto" && isAutomatic && !visVarTarget)));
        });
        if (foundVisVars.length) {
            return foundVisVars[0];
        }
    }
    return undefined;
}
function getAuthVisVar(object, type, target) {
    if (!object.authoringInfo) {
        return undefined;
    }
    const visVars = object && object.authoringInfo && object.authoringInfo.visualVariables;
    if (visVars) {
        const foundVisVars = visVars.filter((visVar) => {
            const visVarTarget = visVar.target;
            return visVar.type === type && ((!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_5__.i)(visVarTarget) && !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_5__.i)(target)) || visVarTarget === target);
        });
        if (foundVisVars.length) {
            return foundVisVars[0];
        }
    }
    return undefined;
}
function getVisVarsExcept(object, type, target) {
    // target="auto" - means the visual variable for automatic sizing
    const visVars = object && object.visualVariables;
    if (visVars) {
        const foundVisVars = visVars.filter((visVar) => {
            const visVarTarget = visVar.target;
            const isAutomatic = visVar.valueExpression === "$view.scale";
            return !(visVar.type === type &&
                ((!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_5__.i)(visVarTarget) && !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_5__.i)(target) && !isAutomatic) ||
                    visVarTarget === target ||
                    (target === "auto" && isAutomatic)));
        });
        if (foundVisVars.length) {
            return foundVisVars;
        }
    }
    return undefined;
}
function getAuthVisVarsExcept(object, type, target) {
    if (!("authoringInfo" in object) || !object.authoringInfo) {
        return undefined;
    }
    const visVars = object && object.authoringInfo.visualVariables && object.authoringInfo.visualVariables;
    if (visVars) {
        const foundVisVars = visVars.filter((visVar) => {
            const visVarTarget = visVar.target;
            return !(visVar.type === type && ((!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_5__.i)(visVarTarget) && !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_5__.i)(target)) || visVarTarget === target));
        });
        if (foundVisVars.length) {
            return foundVisVars;
        }
    }
    return undefined;
}
function removeVisVar(type, layer) {
    if (!("renderer" in layer) || !("visualVariables" in layer.renderer)) {
        return;
    }
    const { renderer } = layer;
    renderer.visualVariables = getVisVarsExcept(renderer, type);
    if ("authoringInfo" in renderer && renderer.authoringInfo) {
        renderer.authoringInfo.visualVariables = getAuthVisVarsExcept(renderer, type);
    }
}
function saveExtraVisVars(renderer) {
    const rendererType = getRendererTypeFromRenderer(renderer);
    const sizeOutlineVisVar = getVisVar(renderer, "size", "outline");
    const sizeAutoVisVar = getVisVar(renderer, "size", "auto");
    const rotationVisVar = getVisVar(renderer, "rotation");
    let opacityVisVar, authOpacityVisVar;
    if (["predominance", "predominance-size"].indexOf(rendererType) === -1) {
        opacityVisVar = getVisVar(renderer, "opacity");
        authOpacityVisVar = getAuthVisVar(renderer, "opacity");
    }
    return {
        sizeOutlineVisVar,
        sizeAutoVisVar,
        opacityVisVar,
        authOpacityVisVar,
        rotationVisVar
    };
}
function applyExtraVisVars(extras, renderer, options) {
    const { sizeOutlineVisVar, opacityVisVar, authOpacityVisVar, rotationVisVar } = extras;
    if (sizeOutlineVisVar) {
        renderer.visualVariables = getVisVarsExcept(renderer, "size", "outline") || [];
        renderer.visualVariables.push(sizeOutlineVisVar);
    }
    if (opacityVisVar && authOpacityVisVar && !(options && options.notOpacity)) {
        renderer.visualVariables = getVisVarsExcept(renderer, "opacity") || [];
        renderer.visualVariables.push(opacityVisVar);
        renderer.authoringInfo = renderer.authoringInfo || {};
        renderer.authoringInfo.visualVariables = getAuthVisVarsExcept(renderer, "opacity") || [];
        renderer.authoringInfo.visualVariables.push(authOpacityVisVar);
    }
    if (rotationVisVar) {
        renderer.visualVariables = renderer.visualVariables || [];
        renderer.visualVariables.push(rotationVisVar);
    }
}

var rgbTypeMap;
(function (rgbTypeMap) {
    rgbTypeMap["NONE"] = "none";
    rgbTypeMap["MINIMUM_MAXIMUM"] = "min-max";
    rgbTypeMap["PERCENT_CLIP"] = "percent-clip";
    rgbTypeMap["STANDARD_DEVIATION"] = "standard-deviation";
    // NOTE: not yet supported
    // HISTOGRAM_EQUALIZE = "histogram-equalization",
    // SIGMOID = "sigmoid",
    // CUSTOM = "custom"
})(rgbTypeMap || (rgbTypeMap = {}));
const rgbDefaults = {
    STD_DEV: 2.0,
    MIN_PERCENT: 2.0,
    MAX_PERCENT: 2.0,
    GAMMA: 1.0,
    STRETCH_TYPE: rgbTypeMap.NONE
};
/**
 * creates an Rgb renderer with default settings
 */
async function createRGBRenderer() {
    const { layer: smLayer, modules } = smartMappingState;
    const layer = smLayer;
    const rasterFunction = layer.type === "imagery" ? layer.rasterFunction : undefined;
    layer.bandIds = await setDefaultRGBBands(layer);
    return modules.RasterRGBCreator.createRenderer({
        layer,
        rasterFunction,
        rgbBandIds: layer.bandIds
    }).then((result) => {
        layer.effect = undefined;
        layer.renderer = result.renderer;
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates an Rgb renderer with some settings from the current renderer
 * @param options: options
 */
function createRgbRendererFromExisting(options) {
    const { layer: smLayer, modules } = smartMappingState;
    const layer = smLayer;
    const renderer = layer.renderer;
    const rasterFunction = layer.type === "imagery" ? layer.rasterFunction : undefined;
    options = options || {};
    return modules.RasterRGBCreator.createRenderer({
        layer,
        rasterFunction,
        rgbBandIds: layer.bandIds,
        stretchType: options.stretchType || renderer.stretchType
    }).then((result) => {
        // save dynamic range adjustment settings
        result.renderer.dynamicRangeAdjustment = renderer.dynamicRangeAdjustment;
        // save old color ramp
        result.renderer.colorRamp = renderer.colorRamp;
        // save old statistics
        result.renderer.statistics = renderer.statistics;
        // handle standard deviation
        if (!isDefined(result.renderer.numberOfStandardDeviations) || result.renderer.numberOfStandardDeviations === 0) {
            result.renderer.numberOfStandardDeviations = rgbDefaults.STD_DEV;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
function isRasterRGBRenderer(layer) {
    var _a, _b, _c, _d;
    const isRasterStretchRenderer = ((_a = layer.renderer) === null || _a === void 0 ? void 0 : _a.type) === "raster-stretch";
    if (!isRasterStretchRenderer) {
        return false;
    }
    // checking "> 1" and not "=== 3" for datasets which
    // have just 2 bands but are supported by rgb
    const hasValidBandIds = ((_b = layer.bandIds) === null || _b === void 0 ? void 0 : _b.length) > 1;
    const isMultiband = ((_c = layer.rasterInfo) === null || _c === void 0 ? void 0 : _c.bandCount) > 1;
    const hasValidGammaValue = ((_d = layer.renderer.gamma) === null || _d === void 0 ? void 0 : _d.length) > 1;
    // return true if renderer type is stretch and has bandIds > 1, or
    // return true if renderer type is stretch and isMultiband and has multiple gamma values
    return isRasterStretchRenderer && (hasValidBandIds || (isMultiband && hasValidGammaValue));
}
async function setDefaultRGBBands(layer) {
    var _a;
    const { modules } = smartMappingState;
    const { rasterInfo } = layer;
    const { bandCount } = rasterInfo;
    let defaultBandCombination = await modules.RasterRendererUtils.getDefaultBandCombination({ layer });
    const bandCombinationLength = defaultBandCombination.length;
    if (bandCombinationLength !== bandCount) {
        defaultBandCombination.push(...new Array(3 - bandCombinationLength).fill(bandCount - 1));
    }
    if (((_a = layer.bandIds) === null || _a === void 0 ? void 0 : _a.length) !== 3) {
        layer.bandIds = defaultBandCombination;
    }
    return layer.bandIds;
}

var stretchTypeMap;
(function (stretchTypeMap) {
    stretchTypeMap["NONE"] = "none";
    stretchTypeMap["MINIMUM_MAXIMUM"] = "min-max";
    stretchTypeMap["PERCENT_CLIP"] = "percent-clip";
    stretchTypeMap["STANDARD_DEVIATION"] = "standard-deviation";
    // NOTE: not yet supported
    // HISTOGRAM_EQUALIZE = "histogram-equalization",
    // SIGMOID = "sigmoid",
    // CUSTOM = "custom"
})(stretchTypeMap || (stretchTypeMap = {}));
const stretchDefaults = {
    STD_DEV: 2.0,
    MIN_PERCENT: 2.0,
    MAX_PERCENT: 2.0,
    GAMMA: 1.0,
    BAND_INDEX: 0,
    STRETCH_TYPE: stretchTypeMap.NONE
};
/**
 * creates a Stretch renderer with default settings
 */
function createStretchRenderer() {
    const { layer: smLayer, modules } = smartMappingState;
    const layer = smLayer;
    const rasterFunction = layer.type === "imagery" ? layer.rasterFunction : undefined;
    layer.bandIds = [0];
    return modules.RasterStretchCreator.createRenderer({ layer, rasterFunction }).then((result) => {
        layer.effect = undefined;
        // handles when renderer statistics are stored as an array, not in an object
        const newStatistics = result.renderer.statistics;
        if (Array.isArray(newStatistics) && newStatistics.length > 1) {
            result.renderer.statistics = [
                {
                    min: newStatistics[0],
                    max: newStatistics[1],
                    avg: newStatistics[2],
                    stddev: newStatistics[3]
                }
            ];
        }
        layer.renderer = result.renderer;
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Stretch renderer with some settings from the current renderer
 * @param options: options
 */
function createStretchRendererFromExisting(options) {
    const { layer: smLayer, modules } = smartMappingState;
    const layer = smLayer;
    const renderer = layer.renderer;
    const rasterFunction = layer.type === "imagery" ? layer.rasterFunction : undefined;
    options = options || {};
    return modules.RasterStretchCreator.createRenderer({
        layer,
        rasterFunction,
        stretchType: options.stretchType || renderer.stretchType
    }).then((result) => {
        // save dynamic range adjustment settings
        result.renderer.dynamicRangeAdjustment = renderer.dynamicRangeAdjustment;
        // save old color ramp
        result.renderer.colorRamp = renderer.colorRamp;
        // save old statistics
        result.renderer.statistics = renderer.statistics;
        // handle standard deviation
        if (!isDefined(result.renderer.numberOfStandardDeviations) || result.renderer.numberOfStandardDeviations === 0) {
            result.renderer.numberOfStandardDeviations = stretchDefaults.STD_DEV;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}

/**
 * creates a Unique Value renderer with default settings
 */
async function createUniqueValueRenderer() {
    const { layer: smLayer, modules } = smartMappingState;
    const layer = smLayer;
    const rasterFunction = layer.type === "imagery" ? layer.rasterFunction : undefined;
    return modules.RasterUniqueValueCreator.createRenderer({ layer, rasterFunction });
}
/**
 * Creates a Unique Value renderer with some settings from the current renderer
 * @param options: options
 */
function createUniqueValueRendererFromExisting(options) {
    const { layer: smLayer, modules } = smartMappingState;
    const layer = smLayer;
    const renderer = layer.renderer;
    const rasterFunction = layer.type === "imagery" ? layer.rasterFunction : undefined;
    options = options || {};
    return modules.RasterUniqueValueCreator.createRenderer({
        layer,
        rasterFunction,
        classFieldName: options.field || renderer.field
    }).then((result) => {
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
function getRasterUniqueValueFields() {
    var _a;
    const { layer: smLayer, modules, strings } = smartMappingState;
    const layer = smLayer;
    let fields;
    const { rasterInfo } = layer;
    const rasterAttributeTableFields = (_a = rasterInfo === null || rasterInfo === void 0 ? void 0 : rasterInfo.attributeTable) === null || _a === void 0 ? void 0 : _a.fields;
    if (rasterAttributeTableFields) {
        fields = rasterAttributeTableFields.filter((field) => field.type !== "oid");
    }
    else {
        fields = [new modules.Field({ name: "value", alias: strings.panels.uniqueValue.value })];
    }
    return fields;
}



//# sourceMappingURL=raster-unique-value-0976ec7f.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,