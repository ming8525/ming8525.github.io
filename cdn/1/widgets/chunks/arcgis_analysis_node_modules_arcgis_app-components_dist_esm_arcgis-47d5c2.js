"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-47d5c2"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/api-2e3a136f.js":
/*!*********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/api-2e3a136f.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getAppSwitcherConfig),
/* harmony export */   b: () => (/* binding */ getMarketPlaceProvisionedListings),
/* harmony export */   c: () => (/* binding */ getUserProperties),
/* harmony export */   d: () => (/* binding */ getApprovedApps),
/* harmony export */   e: () => (/* binding */ getOrgCapabilities),
/* harmony export */   f: () => (/* binding */ getSigninSettings),
/* harmony export */   g: () => (/* binding */ getShowInAppLauncher),
/* harmony export */   h: () => (/* binding */ getBlockableApps),
/* harmony export */   i: () => (/* binding */ getServers),
/* harmony export */   j: () => (/* binding */ getPortalSettings),
/* harmony export */   k: () => (/* binding */ fetchAllResources),
/* harmony export */   q: () => (/* binding */ queryAppItemsForChanges),
/* harmony export */   u: () => (/* binding */ updateUserProperties)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const appSwitcherConfigItemQuery = `owner:"esri" AND title:"AppSwitcher Config" AND type: "Application Configuration"`;
async function getPortalSettings(portal) {
    const portalUrl = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal);
    if (!portalUrl) {
        return;
    }
    const url = `${portalUrl}portals/self/settings`;
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(() => request(url), "portalSettings", portalUrl);
}
async function getShowInAppLauncher() {
    var _a;
    const settings = await getPortalSettings();
    return ((_a = settings === null || settings === void 0 ? void 0 : settings.portalConfigProperties) === null || _a === void 0 ? void 0 : _a.showInAppLauncher) || [];
}
async function getAppSwitcherConfigItem() {
    const portalUrl = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    if (!portalUrl) {
        return;
    }
    const url = `${portalUrl}search`;
    return request(url, {
        num: 1,
        start: 0,
        sortField: "title",
        sortOrder: "asc",
        q: appSwitcherConfigItemQuery
    });
}
async function getConfigData(itemId) {
    const portalUrl = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    if (!portalUrl || !itemId) {
        return;
    }
    const url = `${portalUrl}content/items/${itemId}/data`;
    return request(url);
}
async function getAppSwitcherConfig() {
    var _a;
    const { portal, user } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
    if (!(portal === null || portal === void 0 ? void 0 : portal.id) || !user) {
        return;
    }
    const result = await getAppSwitcherConfigItem();
    const item = (_a = result === null || result === void 0 ? void 0 : result.results) === null || _a === void 0 ? void 0 : _a[0];
    if (!item) {
        return;
    }
    const itemId = item.id;
    const data = await getConfigData(itemId);
    return data;
}
async function getUserProperties() {
    const { user } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}community/users/${user.username}/properties`;
    return request(url);
}
async function getApprovedApps() {
    const { portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}portals/${portal.id}/approvedApps`;
    return request(url, { returnAllApps: false });
}
async function fetchAllResources(url, content, resourceKey = "results") {
    const max = 100;
    let start = 1;
    let resources = [];
    let totalLeft;
    let numRequests;
    let promises;
    let i;
    content.start = start;
    if (!content.num) {
        content.num = max;
    }
    try {
        const result = await request(url, content);
        if (!(result === null || result === void 0 ? void 0 : result[resourceKey])) {
            return resources;
        }
        resources = [...resources, ...result[resourceKey]];
        // calculate whether further batches are needed
        start = result.nextStart;
        totalLeft = result.total - resources.length;
        numRequests = Math.ceil(totalLeft / max);
        promises = [];
        // request each necessary batch
        for (i = 0; i < numRequests; i++) {
            content.start = start + i * max;
            promises.push(request(url, content));
        }
        try {
            const results = await Promise.all(promises);
            results.forEach((r) => {
                resources = [...resources, ...r[resourceKey]];
            });
            return resources;
        }
        catch (_a) {
            return resources;
        }
    }
    catch (_b) {
        return resources;
    }
}
async function getMarketPlaceProvisionedListings() {
    const { user } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}community/users/${user.username}/provisionedListings`;
    return fetchAllResources(url, { returnAppClientIds: true, returnAllProvisions: true }, "provisionedListings");
}
async function getOrgCapabilities() {
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}portals/self/subscriptionInfo`;
    try {
        const response = await request(url);
        return (response === null || response === void 0 ? void 0 : response.orgCapabilities) || [];
    }
    catch (_a) {
        return [];
    }
}
async function queryAppItemsForChanges(approvedApps, runQuery) {
    if (!runQuery || !(approvedApps === null || approvedApps === void 0 ? void 0 : approvedApps.length)) {
        return;
    }
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}search`;
    return request(url, {
        num: 100,
        q: `id:(${approvedApps.map((a) => `"${a.itemId}"`).join(" OR ")})`
    });
}
const blockedAppsConfigItemQuery = `owner:"esri" AND title:"BlockedApps Config" AND type: "Application Configuration"`;
async function getBlockableApps() {
    var _a, _b;
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}search`;
    try {
        const response = await request(url, {
            num: 10,
            start: 0,
            sortField: "title",
            sortOrder: "asc",
            q: blockedAppsConfigItemQuery
        });
        if (!response) {
            return [];
        }
        const itemId = ((_b = (_a = response.results) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.id) || "";
        const data = await getConfigData(itemId);
        return (data === null || data === void 0 ? void 0 : data.blockedApps) || [];
    }
    catch (_c) {
        return [];
    }
}
async function getServers() {
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}portals/self/servers`;
    const response = await request(url);
    return (response === null || response === void 0 ? void 0 : response.servers) || [];
}
async function getSigninSettings() {
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}portals/self/signinSettings`;
    const response = await request(url);
    return response;
}
function getUrl(path) {
    let portalUrl = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    if (portalUrl.slice(-1) !== "/") {
        portalUrl += "/";
    }
    return `${portalUrl}${path}`;
}
async function request(url, params) {
    if (!params) {
        params = {};
    }
    params.f = "json";
    const token = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.e)();
    if (token) {
        params.token = token;
    }
    const urlObj = new URL(url);
    Object.keys(params).forEach((key) => urlObj.searchParams.append(key, params[key]));
    const response = await fetch(urlObj);
    const responseData = await response.json();
    return responseData;
}
async function postRequest(url, data) {
    data.append("f", "json");
    const token = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.e)();
    if (token) {
        data.append("token", token);
    }
    fetch(url, { method: "POST", body: data });
}
async function updateUserProperties(properties) {
    const { user } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
    const url = getUrl(`community/users/${user.username}/setProperties`);
    const data = new FormData();
    data.append("properties", JSON.stringify(properties));
    return postRequest(url, data);
}



//# sourceMappingURL=api-2e3a136f.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-app-switcher_2.entry.js":
/*!************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-app-switcher_2.entry.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_app_switcher: () => (/* binding */ ArcgisAppSwitcher),
/* harmony export */   arcgis_app_switcher_link: () => (/* binding */ ArcgisAppLink)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _sortable_esm_7e785780_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sortable.esm-7e785780.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/sortable.esm-7e785780.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./api-2e3a136f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/api-2e3a136f.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _storage_0353a769_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./storage-0353a769.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-0353a769.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./privileges-5c382f61.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
















function cookieForQueryingItemsExists() {
    const cookie = (0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_6__.c)("APSW-query", true);
    if ((cookie === null || cookie === void 0 ? void 0 : cookie.expires) > new Date().setHours(new Date().getHours())) {
        return true;
    }
    // Query for approved app items every 5 hours
    const payload = { expires: new Date().setHours(new Date().getHours() + 5) };
    (0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_6__.d)("APSW-query", payload, {
        path: "/",
        domain: document.domain,
        sameSite: "Strict"
    }, true);
    return false;
}

const licenses = {};
function hasLicense(clientId) {
    var _a;
    return ((_a = licenses[clientId.toLowerCase()]) === null || _a === void 0 ? void 0 : _a.valid) || false;
}
function isInPortalConfig(title, portal, showInAppLauncher) {
    return !portal.isPortal || showInAppLauncher.indexOf(title) > -1;
}
function hasAccessToOpenData(portal) {
    if ((portal === null || portal === void 0 ? void 0 : portal.portalProperties) && (!portal.portalProperties.openData || !portal.portalProperties.openData.enabled)) {
        return false;
    }
    return hasLicense("HubforArcGIS");
}
function hasAccessToVelocity(user) {
    const requiresOneOf = [
        "portal:publisher:publishFeeds",
        "portal:publisher:publishRealTimeAnalytics",
        "portal:publisher:publishBigDataAnalytics"
    ];
    const privileges = (user === null || user === void 0 ? void 0 : user.privileges) || [];
    const hasPrivilege = privileges.some((privilege) => requiresOneOf.indexOf(privilege) > -1);
    const hasCapability = hasLicense("velocity");
    return hasPrivilege && hasCapability;
}
function hasAccessToSites(portal, title, showInAppLauncher) {
    return isInPortalConfig(title, portal, showInAppLauncher) && hasLicense("HubforArcGIS");
}
function hasAccessToMapViewer(portal, newMapViewerEnabled) {
    var _a;
    const disabledInApp = portal.isPortal && ((_a = portal.portalProperties) === null || _a === void 0 ? void 0 : _a.newMapViewerEnabled) === false;
    return newMapViewerEnabled && !disabledInApp && hasLicense("arcgisWebApps");
}
function hasAccessToOrthoMaker(portal, showInAppLauncher) {
    var _a;
    return (!!((_a = portal.helperServices) === null || _a === void 0 ? void 0 : _a.rasterAnalytics) &&
        !!portal.helperServices.orthoMapping &&
        isInPortalConfig("Ortho Maker", portal, showInAppLauncher));
}
function hasAccessToNotebooks(title, portal, user, showInAppLauncher, notebookServerEnabled) {
    var _a;
    const notebookServerConfigured = notebookServerEnabled && (!portal.isPortal || portal.supportsHostedNotebooks);
    const canCreateNotebooks = !!((_a = user === null || user === void 0 ? void 0 : user.privileges) === null || _a === void 0 ? void 0 : _a.length) &&
        user.privileges.some((privilege) => privilege === "premium:publisher:createNotebooks");
    return notebookServerConfigured && canCreateNotebooks && isInPortalConfig(title, portal, showInAppLauncher);
}
function hasAccessToTrackViewer(portal, showInAppLauncher, trackViewerEnabled) {
    var _a;
    return (!!((_a = portal.helperServices) === null || _a === void 0 ? void 0 : _a.locationTracking) &&
        trackViewerEnabled &&
        isInPortalConfig("Track Viewer", portal, showInAppLauncher));
}

const arcgisAppSwitcherCss = ".apps-content-container{position:relative}.toggle-button{margin:0px;display:block;cursor:pointer;overflow:visible;border-width:0px;padding:0px;-webkit-appearance:button;background-color:transparent;height:3.5rem;width:3.5rem}.toggle-button:not(.toggle-button--expanded):hover{box-shadow:inset 0 -3px 0 0 rgba(0, 121, 193, 0.5)}.toggle-button--expanded{box-shadow:inset 0 -3px 0 0 var(--calcite-color-brand)}.toggle-button__icon{display:block;height:1.5rem;width:1.5rem}:host{position:relative;color:var(--calcite-color-text-2)}.apps-content{position:absolute;right:0px;display:none}.apps-content--rtl{left:0px;right:auto}.apps-content--expanded{display:block}.apps-content ::-webkit-scrollbar{width:0.5rem}.apps-content ::-webkit-scrollbar-thumb{border-radius:var(--calcite-border-radius);background-color:rgba(0, 0, 0, 0.5);box-shadow:0 0 1px rgba(255, 255, 255, 0.5)}.dropdown-menu{top:0px;cursor:default;overflow-y:auto;overflow-x:hidden;background-color:var(--calcite-color-background);border-top:1px solid var(--calcite-color-border-1);max-height:85vh;max-width:480px;min-width:475px}.intro-container{background-color:var(--calcite-color-background);text-align:center}.intro-text{margin:0px;background-color:var(--calcite-color-background);padding-left:4rem;padding-right:4rem;padding-top:1rem;padding-bottom:0.75rem;font-size:0.875rem;color:var(--calcite-color-text-3)}.apps-list{margin-top:0px;margin-bottom:0px;list-style-type:none;flex-direction:row;flex-wrap:wrap;overflow:hidden;background-color:var(--calcite-color-background);padding-top:0.5rem;padding-bottom:0.5rem;padding-left:0.5rem;padding-right:0.5rem;text-align:left}.apps-list .secondary-drag-text{display:none}.app-item{position:relative;float:none;margin:0px;box-sizing:border-box;display:inline-block;cursor:pointer;overflow-wrap:break-word;text-align:left;vertical-align:top;font-size:0.875rem;height:110px;width:150px}@-moz-document url-prefix(){.app-item{width:146px}}.apps-content:not(.apps-content--dragging) .app-item:not(.app-item--missing):hover{color:var(--calcite-color-text-1);outline:1px solid var(--calcite-color-brand)}.app-item--dragging{outline-offset:-1px}.app-item--missing{padding-top:0.5rem}.show-more{display:flex;width:100%;cursor:pointer;align-items:center;justify-content:center;border-style:none;background-color:var(--calcite-color-foreground-3);padding:0.25rem;font-size:0.875rem;color:var(--calcite-color-text-3)}.secondary-container{background-color:var(--calcite-color-foreground-2);padding-top:0.25rem;padding-bottom:0.25rem;border-top:1px solid var(--calcite-color-border-3)}.secondary-container--hidden{display:none}.secondary-target{margin-top:0.75rem;margin-bottom:0.75rem;margin-left:1.5rem;margin-right:1.5rem;overflow:hidden;padding-left:2rem;padding-right:2rem;text-align:center;font-size:0.875rem;border:2px dashed var(--calcite-color-border-2);letter-spacing:normal;height:100px}.secondary-target--hover{border-color:var(--calcite-color-brand)}.secondary-list{margin:0px;padding-top:0.75rem;padding-bottom:0.75rem;padding-left:0.5rem;padding-right:0.5rem;text-align:left}";

const ArcgisAppSwitcher = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisAppSwitcherToggle = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAppSwitcherToggle", 7);
        this.willQueryForItems = true;
        this.blockedApps = [];
        this.showInAppLauncher = [];
        this.servers = [];
        this.orgCapabilities = [];
        this.updateAppsProperties = async () => {
            const primaryIds = this.getIdsFromDOM(this.primaryContainer);
            const primaryApps = this.getAppsByIds(primaryIds);
            const primary = this.convertToAppData(primaryApps);
            const secondaryIds = this.getIdsFromDOM(this.secondaryContainer);
            const secondaryApps = this.getAppsByIds(secondaryIds);
            const secondary = this.convertToAppData(secondaryApps);
            const updatedProperties = Object.assign({}, this.userProperties);
            updatedProperties.appLauncher = { primary, secondary };
            await (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_4__.u)(updatedProperties);
            this.userProperties = updatedProperties;
            const previousSecondaryCount = this.secondaryApps.length;
            this.primaryApps = primaryApps;
            this.secondaryApps = secondaryApps;
            if (previousSecondaryCount > 0 && !this.secondaryApps.length) {
                // if all apps are removed from secondary, show the drag box and text
                this.hoveringOverSecondary = false;
            }
        };
        this.handleToggle = () => {
            this.isExpanded = !this.isExpanded;
            this.arcgisAppSwitcherToggle.emit(this.isExpanded);
        };
        this.handleShowMore = () => {
            this.secondaryExpanded = true;
        };
        this.handleDismissIntro = () => {
            this.updateAppsProperties();
            this.displayIntro = false;
        };
        this.keydownHandler = (event) => {
            var _a;
            if (event.key === "Escape" && this.isExpanded) {
                this.handleToggle();
                (_a = this.toggleButton) === null || _a === void 0 ? void 0 : _a.focus();
            }
        };
        this.api = undefined;
        this.portal = undefined;
        this.user = undefined;
        this.newMapViewerEnabled = true;
        this.notebookServerEnabled = true;
        this.trackViewerEnabled = true;
        this.shouldExpand = false;
        this.displayIntro = false;
        this.primaryApps = [];
        this.secondaryApps = [];
        this.isExpanded = false;
        this.hoveringOverSecondary = false;
        this.secondaryExpanded = false;
        this.sorting = false;
        this.focusItemId = undefined;
        this.dragging = false;
    }
    handleLinkClick() {
        this.isExpanded = false;
        this.arcgisAppSwitcherToggle.emit(this.isExpanded);
    }
    handleLinkActivated() {
        this.secondaryExpanded = true;
    }
    async handleLinkMove(evt) {
        const { uid, keyCode, index } = evt.detail;
        this.focusItemId = uid;
        const primaryTotal = this.primaryApps.length;
        const secondaryTotal = this.secondaryApps.length;
        const isInPrimary = index < primaryTotal;
        let targetPrimary;
        if (isInPrimary) {
            const rowCount = Math.ceil(primaryTotal / 3);
            const lastRowFirstIndex = rowCount * 3 - 3;
            if (index < lastRowFirstIndex) {
                targetPrimary = true;
            }
            else if (keyCode === "ArrowLeft" || keyCode === "ArrowUp") {
                targetPrimary = true;
            }
            else if (keyCode === "ArrowRight" && index < primaryTotal - 1) {
                targetPrimary = true;
            }
            else {
                targetPrimary = false;
            }
        }
        else {
            if (index >= primaryTotal + 3) {
                targetPrimary = false;
            }
            else if (keyCode === "ArrowRight" || keyCode === "ArrowDown") {
                targetPrimary = false;
            }
            else if (keyCode === "ArrowLeft" && index > primaryTotal) {
                targetPrimary = false;
            }
            else {
                targetPrimary = true;
            }
        }
        let targetIndex = -1;
        const sameList = (isInPrimary && targetPrimary) || (!isInPrimary && !targetPrimary);
        if (sameList) {
            if (keyCode === "ArrowUp") {
                targetIndex = index - 3;
            }
            else if (keyCode === "ArrowRight") {
                targetIndex = index + 1;
            }
            else if (keyCode === "ArrowDown") {
                targetIndex = index + 3;
            }
            else if (keyCode === "ArrowLeft") {
                targetIndex = index - 1;
            }
        }
        else {
            if (isInPrimary) {
                if (keyCode === "ArrowRight") {
                    targetIndex = primaryTotal;
                }
                else if (keyCode === "ArrowDown") {
                    targetIndex = (index % 3) + primaryTotal;
                }
            }
            else {
                targetIndex = primaryTotal;
            }
        }
        let app;
        if (isInPrimary) {
            app = this.primaryApps.splice(index, 1)[0];
        }
        else {
            app = this.secondaryApps.splice(index - primaryTotal, 1)[0];
        }
        if (targetPrimary) {
            this.primaryApps.splice(targetIndex, 0, app);
        }
        else {
            const secondaryIndex = targetIndex - primaryTotal;
            this.secondaryApps.splice(secondaryIndex, 0, app);
        }
        const primary = this.convertToAppData(this.primaryApps);
        const secondary = this.convertToAppData(this.secondaryApps);
        const updatedProperties = Object.assign({}, this.userProperties);
        updatedProperties.appLauncher = { primary, secondary };
        await (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_4__.u)(updatedProperties);
        this.userProperties = updatedProperties;
        if (secondaryTotal > 0 && !this.secondaryApps.length) {
            this.hoveringOverSecondary = false;
        }
        window.setTimeout(() => {
            // reset after setting focus
            this.focusItemId = "";
        }, 100);
    }
    async handleLinkRemove(evt) {
        const id = evt.detail;
        const updatedProperties = Object.assign({}, this.userProperties);
        let { primary, secondary } = updatedProperties.appLauncher;
        primary = primary.filter((app) => app.uid !== id);
        secondary = secondary.filter((app) => app.uid !== id);
        updatedProperties.appLauncher = { primary, secondary };
        await (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_4__.u)(updatedProperties);
        this.userProperties = updatedProperties;
        this.primaryApps = this.primaryApps.filter((app) => {
            const appId = app.itemId || app.title;
            return appId !== id;
        });
        this.secondaryApps = this.secondaryApps.filter((app) => {
            const appId = app.itemId || app.title;
            return appId !== id;
        });
    }
    handleShouldExpandChange(newValue) {
        this.isExpanded = newValue;
    }
    componentDidLoad() {
        const mobileDevices = [/Android/i, /webOS/i, /iPhone/i, /iPad/i];
        const isMobile = mobileDevices.some((device) => navigator.userAgent.match(device));
        if (isMobile) {
            // currently sortableJS inside Shadow DOM is not working correctly on mobile, so avoiding this
            // this should also allow scrolling the apps list on mobile
            return;
        }
        _sortable_esm_7e785780_js__WEBPACK_IMPORTED_MODULE_1__.S.create(this.primaryContainer, {
            animation: 150,
            group: "apps",
            filter: ".secondary-drag-text",
            dragClass: "app-item--dragging",
            onUpdate: this.updateAppsProperties,
            onAdd: this.updateAppsProperties,
            onMove: (params) => {
                this.hoveringOverSecondary = params.to.className === "secondary-target";
            },
            onStart: () => {
                this.dragging = true;
            },
            onEnd: () => {
                this.dragging = false;
            }
        });
        _sortable_esm_7e785780_js__WEBPACK_IMPORTED_MODULE_1__.S.create(this.secondaryContainer, {
            animation: 150,
            group: "apps",
            filter: ".secondary-drag-text",
            dragClass: "app-item--dragging",
            onUpdate: this.updateAppsProperties,
            onAdd: this.updateAppsProperties
        });
    }
    componentDidRender() {
        if (this.primaryContainer.contains(this.secondaryDragText)) {
            this.secondaryContainer.appendChild(this.secondaryDragText);
        }
    }
    async componentWillLoad() {
        var _a, _b;
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el);
        this.strings = locale[0];
        this.willQueryForItems = cookieForQueryingItemsExists();
        this.initializeConfig();
        if (!((_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c.portal) === null || _a === void 0 ? void 0 : _a.id) || !_config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c.user) {
            return;
        }
        if (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c.portal.isPortal) {
            this.showInAppLauncher = await (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_4__.g)();
        }
        const [config, marketplace, preferences, customOrgApps, orgCapabilities] = await Promise.all([
            (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_4__.a)(),
            (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_4__.b)(),
            (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_4__.c)(),
            (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_4__.d)(),
            (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_4__.e)()
        ]);
        this.orgCapabilities = orgCapabilities;
        this.userProperties = (preferences === null || preferences === void 0 ? void 0 : preferences.properties) || {};
        this.userApps = config === null || config === void 0 ? void 0 : config.appSwitcher;
        if (!_config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c.portal.isPortal) {
            this.userApps.apps.unshift(this.getAgoApp());
        }
        this.approvedApps =
            ((_b = customOrgApps.approvedApps) === null || _b === void 0 ? void 0 : _b.filter((app) => !app.hideForNonPrivilegedMember)) || [];
        if (!this.userProperties.appLauncher) {
            this.willQueryForItems = false;
            this.displayIntro = true;
        }
        this.provisionedListings = marketplace || [];
        this.provisionedListings.forEach((listing) => {
            var _a;
            const clientId = (_a = listing.clientId) === null || _a === void 0 ? void 0 : _a.toLowerCase();
            if (clientId) {
                licenses[clientId] = {
                    valid: true,
                    itemId: listing.itemId,
                    clientId: listing.clientId
                };
            }
        });
        orgCapabilities === null || orgCapabilities === void 0 ? void 0 : orgCapabilities.forEach((capability) => {
            var _a;
            const capabilityId = (_a = capability.id) === null || _a === void 0 ? void 0 : _a.toLowerCase();
            if (capabilityId) {
                licenses[capabilityId] = {
                    valid: true,
                    clientId: capability.id
                };
            }
        });
        await this.init();
        this.primaryApps.forEach((app) => {
            app.fontSize = this.calcFontSize(app);
        });
    }
    convertToAppData(apps) {
        return apps.map((app) => ({ label: app.label, uid: app.itemId || app.title }));
    }
    getAppsByIds(ids) {
        const apps = [...this.primaryApps, ...this.secondaryApps];
        return ids.map((id) => apps.find((app) => app.itemId === id || app.title === id));
    }
    getIdsFromDOM(container) {
        const ids = [];
        container.querySelectorAll(".app-item").forEach((el) => {
            ids.push(el.dataset.id);
        });
        return ids;
    }
    getTextWidth(text) {
        const canvas = document.createElement("canvas"), context = canvas.getContext("2d");
        context.font = "avenir";
        const metrics = context.measureText(text);
        return metrics.width;
    }
    calcFontSize(app) {
        if (!app.abbr) {
            return;
        }
        const abbreviationSizes = [0, 32, 24, 20, 18, 16, 14, 12, 10, 8, 6];
        let strWidth = Math.ceil(this.getTextWidth(app.abbr) / 5);
        if (strWidth > abbreviationSizes.length - 1) {
            strWidth = abbreviationSizes.length - 1;
        }
        return `${abbreviationSizes[strWidth]}px`;
    }
    async getBlockedApps() {
        const [signinSettings, blockableApps] = await Promise.all([
            (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_4__.f)(),
            (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_4__.h)()
        ]);
        const clientIds = (signinSettings === null || signinSettings === void 0 ? void 0 : signinSettings.blockedApps) || [];
        if ((!clientIds.length && !signinSettings.blockBetaApps) || !(blockableApps === null || blockableApps === void 0 ? void 0 : blockableApps.length)) {
            return [];
        }
        if (signinSettings.blockBetaApps) {
            blockableApps.forEach((app) => {
                if (app.isBeta && !clientIds.includes(app.clientid)) {
                    clientIds.push(app.clientid);
                }
            });
        }
        clientIds.forEach((id) => {
            const match = blockableApps.find((app) => app.clientid === id);
            if (match) {
                this.blockedApps.push(match);
            }
        });
        return this.blockedApps;
    }
    filterBlockedApps(apps) {
        return apps.filter((app) => {
            var _a;
            const inBlockedList = (_a = this.blockedApps) === null || _a === void 0 ? void 0 : _a.some((ba) => {
                return (app.itemId && app.itemId === ba.itemid) || (app.title && app.title === ba.title);
            });
            return !inBlockedList;
        });
    }
    populateAppIdentifiers(prev, app) {
        const list = Object.keys(this.appDictionary).map((key) => this.appDictionary[key]);
        let populatedApp = list.filter((a) => a.itemId === app.uid || a.title === app.uid).shift();
        if (populatedApp && !this.appDictionary[app.uid]) {
            app.uid = populatedApp.itemId || populatedApp.title;
        }
        if (populatedApp === null || populatedApp === void 0 ? void 0 : populatedApp.hasBeenPopulated) {
            return prev;
        }
        if (!populatedApp) {
            // App Can't be Found
            populatedApp = app;
            populatedApp.canAccess = false;
            populatedApp.itemId = app.uid;
            this.appDictionary[app.uid] = populatedApp;
        }
        else {
            // -- Insert into Dictionary --
            if ((app.hasChanged ||
                populatedApp.hasChanged ||
                (!populatedApp.canAccess && !populatedApp.ignoreNoAccess)) &&
                this.isAdmin()) {
                this.appDictionary[app.uid].hasChanged = true;
                this.appDictionary[app.uid].ignoreNoAccess = app.ignoreNoAccess;
            }
            if (app.isNew) {
                this.appDictionary[app.uid].isNew = true;
            }
            delete this.newAppDictionary[app.uid];
        }
        // -- Prevent duplicates from any possible error states
        this.appDictionary[app.uid].hasBeenPopulated = true;
        prev.push(populatedApp);
        return prev;
    }
    isInPortalConfig(title) {
        const { portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c;
        return isInPortalConfig(title, portal, this.showInAppLauncher);
    }
    getAppExceptions() {
        const { portal, user } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c;
        return {
            "Open Data": {
                hasAccess: () => hasAccessToOpenData(portal)
            },
            AppStudio: {
                hasAccess: () => hasLicense("arcgisWebApps")
            },
            "ArcGIS Velocity": {
                hasAccess: () => hasAccessToVelocity(user)
            },
            "ArcGIS Hub": {
                hasAccess: () => hasLicense("HubforArcGIS")
            },
            "ArcGIS Enterprise Sites": {
                hasAccess: (title) => hasAccessToSites(portal, title, this.showInAppLauncher)
            },
            "ArcGIS Experience Builder": {
                hasAccess: (title) => this.isInPortalConfig(title)
            },
            "ArcGIS StoryMaps": {
                hasAccess: (title) => this.isInPortalConfig(title)
            },
            "ArcGIS QuickCapture Web Designer": {
                hasAccess: (title) => this.isInPortalConfig(title) && hasLicense("arcgisWebApps")
            },
            "ArcGIS Collector": {
                hasAccess: (title) => this.isInPortalConfig(title)
            },
            "ArcGIS Field Maps": {
                hasAccess: (title) => this.isInPortalConfig(title)
            },
            "ArcGIS Dashboards": {
                hasAccess: (title) => this.isInPortalConfig(title) && hasLicense("dashboards")
            },
            "ArcGIS Solutions": {
                // For Portal
                hasAccess: (title) => this.isInPortalConfig(title)
            },
            "ArcGIS Workforce": {
                // For Portal
                hasAccess: (title) => this.isInPortalConfig(title)
            },
            "Deep Learning Studio": {
                // For Portal
                hasAccess: (title) => this.isInPortalConfig(title)
            },
            "Map Viewer": {
                hasAccess: () => hasAccessToMapViewer(portal, this.newMapViewerEnabled) &&
                    this.isInPortalConfig("ArcGIS Map Viewer")
            },
            "Map Viewer Classic": {
                hasAccess: () => hasLicense("arcgisWebApps") && this.isInPortalConfig("ArcGIS Map Viewer Classic")
            },
            "Operations Dashboard for ArcGIS": {
                hasAccess: () => hasLicense("opsdashboard") && this.isInPortalConfig("ArcGIS Dashboards Classic")
            },
            "ArcGIS Dashboards Classic": {
                hasAccess: (title) => hasLicense("opsdashboard") && this.isInPortalConfig(title)
            },
            "Ortho Maker": {
                hasAccess: () => hasAccessToOrthoMaker(portal, this.showInAppLauncher)
            },
            Notebook: {
                hasAccess: (title) => hasAccessToNotebooks(title, portal, user, this.showInAppLauncher, this.notebookServerEnabled)
            },
            "Scene Viewer": {
                hasAccess: (title) => hasLicense("arcgisWebApps") && this.isInPortalConfig(title)
            },
            "Story Maps": {
                hasAccess: () => hasLicense("arcgisWebApps")
            },
            Survey123: {
                hasAccess: () => hasLicense("survey123")
            },
            "Track Viewer": {
                hasAccess: () => hasAccessToTrackViewer(portal, this.showInAppLauncher, this.trackViewerEnabled)
            },
            "Instant Apps": {
                // For Portal
                hasAccess: (title) => hasLicense("arcgisWebApps") && this.isInPortalConfig(title)
            },
            "Vector Tile Style Editor": {
                // For Portal
                hasAccess: (title) => this.isInPortalConfig(title)
            },
            "ArcGIS GeoBIM": {
                // For Portal
                hasAccess: (title) => this.isInPortalConfig(title)
            },
            "ArcGIS Maps for Adobe Creative Cloud": {
                hasAccess: () => {
                    return hasLicense("arcgisWebApps") && !_config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c.portal.isPortal;
                }
            }
        };
    }
    getExcludedProvisionedListings() {
        let excluded = {
            opsdashboard: 1,
            arcgisWebApps: 1,
            Workforce: 1,
            geoplanner: 1,
            webappbuilder: 1,
            HubforArcGIS: 1,
            appstudio: 1,
            survey123: 1,
            storymaps: 1,
            mapsForOffice: 1,
            mapsForO365: 1,
            mapsForSharePoint: 1,
            mapsForCreativeCloud: 1
        };
        const { portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c;
        if (portal.isPortal) {
            // exclude certain provisioned listings for Enterprise
            excluded = Object.assign(Object.assign({}, excluded), { arcgisonline: 1, arcgisUrban: 1, arcgisinstantapps: 1 });
        }
        return excluded;
    }
    getImagePath(app) {
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/${(app === null || app === void 0 ? void 0 : app.image) ? app.image : ""}`);
    }
    modifyWebAppForView(app) {
        var _a, _b;
        const img = ((_a = app.appSwitcher) === null || _a === void 0 ? void 0 : _a.image) || app.icon;
        if (img) {
            app.image = this.getWebMappingAppImgPath(app);
        }
        else {
            app.placeHolderIcon = `${this.getImagePath()}svg-app-circle.svg`;
        }
        app.abbr = ((_b = app.appSwitcher) === null || _b === void 0 ? void 0 : _b.abbr) || app.abbreviation;
        delete app.abbreviation;
        delete app.appSwitcher;
        delete app.approvedApp;
        delete app.webMappingApp;
        return app;
    }
    modifySystemAppForView(app, uniqueId) {
        var _a;
        const { portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c;
        if (app.image) {
            app.image = this.getImagePath(app);
        }
        else {
            app.placeHolderIcon = `${this.getImagePath()}svg-app-icon.svg`;
        }
        // relative urls must be pointed at the org url (#25494)
        if (((_a = app.url) === null || _a === void 0 ? void 0 : _a.indexOf("../")) === 0) {
            const baseUrl = portal.urlKey
                ? `${portal.urlKey}.${portal.customBaseUrl}`
                : portal.portalHostname;
            app.url = `${location.protocol}//${baseUrl}${app.url.substring(2, app.url.length)}`;
        }
        delete app.isLicensed;
        delete app.privileges;
        app.itemId = uniqueId;
        return app;
    }
    getWebMappingAppImgPath(app) {
        const { portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c;
        const token = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_5__.e)(portal);
        if (!app.icon) {
            return `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_5__.g)()}content/items/${app.itemId}/resources/${app.appSwitcher.image}?token=${token}`;
        }
        return `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_5__.g)()}portals/self/resources/${app.icon}?token=${token}`;
    }
    modifyPartnerAppForView(app) {
        var _a, _b, _c;
        app.appSwitcher = (_a = app.properties) === null || _a === void 0 ? void 0 : _a.appSwitcher;
        const customIcon = ((_b = app.appSwitcher) === null || _b === void 0 ? void 0 : _b.image) || app.icon;
        return {
            abbr: ((_c = app.appSwitcher) === null || _c === void 0 ? void 0 : _c.abbr) || app.abbreviation,
            itemId: app.itemId,
            canAccess: true,
            webMappingApp: true,
            image: customIcon ? this.getWebMappingAppImgPath(app) : null,
            label: app.title || app.label,
            url: app.url,
            placeHolderIcon: app.placeHolderIcon || `${this.getImagePath()}svg-app-circle.svg`
        };
    }
    async getLicensedApps() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const { portal, user } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c;
        const allAppUids = {};
        const appDictionary = {};
        const exceptions = this.getAppExceptions();
        const excludedProvisionedListings = this.getExcludedProvisionedListings();
        const legalApps = [];
        const appCount = this.userApps.apps.length;
        for (let i = 0; i < appCount; i++) {
            const app = this.userApps.apps[i];
            const uid = app.itemId || app.title;
            let isPrivileged = true;
            const inBlockedList = (_a = this.blockedApps) === null || _a === void 0 ? void 0 : _a.some((ba) => (app.itemId && app.itemId === ba.itemid) || (app.title && app.title === ba.title));
            allAppUids[uid] = 1;
            appDictionary[uid] = app;
            if (inBlockedList) {
                continue;
            }
            const portalDeploymentType = portal.portalDeploymentType || ((_b = portal.sourceJSON) === null || _b === void 0 ? void 0 : _b.portalDeploymentType);
            if (portalDeploymentType === "ArcGISEnterpriseOnKubernetes" &&
                app.supportsKubernetes === false) {
                continue;
            }
            if (exceptions[app.title] && !exceptions[app.title].hasAccess(app.title)) {
                continue;
            }
            const subscriptionInfo = portal.subscriptionInfo || ((_c = portal.sourceJSON) === null || _c === void 0 ? void 0 : _c.subscriptionInfo);
            if (app.subscriptionType) {
                if ((subscriptionInfo === null || subscriptionInfo === void 0 ? void 0 : subscriptionInfo.type) === app.subscriptionType) {
                    appDictionary[uid].canAccess = true;
                    legalApps.push(this.modifySystemAppForView(app, uid));
                }
                continue;
            }
            if (app.orgCapabilities) {
                if ((_d = this.orgCapabilities) === null || _d === void 0 ? void 0 : _d.length) {
                    const hasCapability = this.orgCapabilities.some((capability) => app.orgCapabilities.includes(capability.id));
                    if (hasCapability) {
                        appDictionary[uid].canAccess = true;
                        legalApps.push(this.modifySystemAppForView(app, uid));
                    }
                }
                continue;
            }
            if (!((_e = app.privileges) === null || _e === void 0 ? void 0 : _e.length) && !app.isLicensed && !app.serverFunction) {
                appDictionary[uid].canAccess = true;
                legalApps.push(this.modifySystemAppForView(app, uid));
                continue;
            }
            const skipPrivCheck = ((_g = ((user === null || user === void 0 ? void 0 : user.userLicenseTypeId) || ((_f = user === null || user === void 0 ? void 0 : user.sourceJSON) === null || _f === void 0 ? void 0 : _f.userLicenseTypeId))) === null || _g === void 0 ? void 0 : _g.toLowerCase()) === "storytellerut" && ((_h = app.label) === null || _h === void 0 ? void 0 : _h.toLowerCase()) === "storymaps";
            if (skipPrivCheck) {
                appDictionary[uid].canAccess = true;
                legalApps.push(this.modifySystemAppForView(app, uid));
                continue;
            }
            if (((_j = app.privileges) === null || _j === void 0 ? void 0 : _j.length) > 0 && (user === null || user === void 0 ? void 0 : user.privileges)) {
                for (let j = 0; j < app.privileges.length; j++) {
                    if (user.privileges.indexOf(app.privileges[j]) < 0) {
                        isPrivileged = false;
                        break;
                    }
                }
                if (!app.isLicensed && isPrivileged) {
                    appDictionary[uid].canAccess = true;
                    legalApps.push(this.modifySystemAppForView(app, uid));
                    continue;
                }
            }
            if (app.isLicensed && isPrivileged) {
                for (let k = 0; k < this.provisionedListings.length; k++) {
                    if (uid === this.provisionedListings[k].itemId ||
                        uid === this.provisionedListings[k].title) {
                        appDictionary[uid].canAccess = true;
                        legalApps.push(this.modifySystemAppForView(app, uid));
                        break;
                    }
                }
            }
            if (app.serverFunction && isPrivileged) {
                if (this.servers.some((server) => {
                    var _a;
                    const functions = ((_a = server.serverFunction) === null || _a === void 0 ? void 0 : _a.split(",")) || [];
                    return functions.includes(app.serverFunction);
                })) {
                    appDictionary[uid].canAccess = true;
                    legalApps.push(this.modifySystemAppForView(app, uid));
                    continue;
                }
            }
        }
        // - Web mapping apps from Markeplace
        this.provisionedListings.forEach((app) => {
            if (app.type === "Web Mapping Application" &&
                !excludedProvisionedListings[app.clientId] &&
                !allAppUids[app.itemId] &&
                app.url &&
                app.title &&
                !allAppUids[app.title] &&
                app.typeKeywords.indexOf("hideFromAppSwitcher") < 0) {
                const modifiedApp = this.modifyPartnerAppForView(app);
                appDictionary[app.itemId] = modifiedApp;
                legalApps.push(modifiedApp);
            }
        });
        const apps = [
            ...this.approvedApps.map((app) => {
                const appProperties = Object.assign(Object.assign({}, app.appProperties), { itemId: app.itemId, webMappingApp: true, approvedApp: true, canAccess: !this.willQueryForItems });
                appDictionary[app.itemId] = appProperties;
                return this.modifyWebAppForView(appProperties);
            }),
            ...legalApps
        ];
        return {
            apps,
            appDictionary
        };
    }
    isAdmin() {
        const { user } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c;
        if (!user) {
            return false;
        }
        return user.role === "org_admin" || user.role === "account_admin";
    }
    // Map the uid of existing user properties to match the new title
    mapAppTitles(apps) {
        const { portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c;
        apps.forEach((app) => {
            if (app.uid === "Map Viewer Beta") {
                app.uid = "Map Viewer";
            }
            if (portal.isPortal) {
                if (app.uid === "Operations Dashboard for ArcGIS") {
                    app.uid = "ArcGIS Dashboards Classic";
                }
                else if (app.uid === "Workforce for ArcGIS") {
                    app.uid = "ArcGIS Workforce";
                }
            }
        });
    }
    async init() {
        var _a;
        if (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c.portal.isPortal) {
            this.servers = await (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_4__.i)();
        }
        await this.getBlockedApps();
        const { apps, appDictionary } = await this.getLicensedApps();
        this.appDictionary = appDictionary;
        if (this.userProperties.appLauncher) {
            if (this.userProperties.appLauncher.primary) {
                this.mapAppTitles(this.userProperties.appLauncher.primary);
            }
            if (this.userProperties.appLauncher.secondary) {
                this.mapAppTitles(this.userProperties.appLauncher.secondary);
            }
        }
        if (!this.userProperties.appLauncher ||
            !this.userProperties.appLauncher.primary ||
            !this.userProperties.appLauncher.secondary) {
            this.primaryApps = apps.slice().sort((a, b) => (a.label < b.label ? -1 : 1));
            this.primaryApps = this.filterBlockedApps(this.primaryApps);
            this.secondaryApps = [];
            return;
        }
        else {
            const response = await (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_4__.q)(this.approvedApps, this.willQueryForItems);
            if (((_a = response === null || response === void 0 ? void 0 : response.results) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                response.results.forEach((item) => {
                    const app = this.appDictionary[item.id];
                    app.canAccess = true;
                    app.hasChanged = app.url !== item.url ? !!item.url : false;
                });
            }
            this.newAppDictionary = Object.assign({}, this.appDictionary);
            this.userProperties.appLauncher.primary.forEach((p) => {
                if (p.label === "Map Viewer") {
                    p.uid = "Map Viewer";
                }
            });
            this.primaryApps =
                this.userProperties.appLauncher.primary.reduce(this.populateAppIdentifiers.bind(this), []) || [];
            this.secondaryApps =
                this.userProperties.appLauncher.secondary.reduce(this.populateAppIdentifiers.bind(this), []) || [];
            this.primaryApps = this.filterBlockedApps(this.primaryApps);
            this.secondaryApps = this.filterBlockedApps(this.secondaryApps);
            // :: Check for New App Icons ::
            for (const app in this.newAppDictionary) {
                if (this.newAppDictionary[app].canAccess) {
                    this.newAppDictionary[app].isNew = true;
                    this.appDictionary[app] = this.newAppDictionary[app];
                    this.primaryApps.push(this.newAppDictionary[app]);
                }
            }
            return;
        }
    }
    getAgoApp() {
        const { portal, user } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c;
        const baseUrl = `${location.protocol}//${portal.urlKey ? `${portal.urlKey}.${portal.customBaseUrl}` : portal.portalHostname}/home/`;
        const { landingPage } = this.userProperties;
        const url = `${baseUrl}${(landingPage === null || landingPage === void 0 ? void 0 : landingPage.url) ? landingPage.url : (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_8__.b)(user) ? "organization.html" : "index.html"}`;
        return {
            image: "arcgis-online.png",
            label: "ArcGIS Online",
            title: "ArcGIS Online",
            url
        };
    }
    initializeConfig() {
        _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c.api = this.api;
        _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c.user = this.user;
        _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c.portal = this.portal;
    }
    render() {
        const total = this.primaryApps.length + this.secondaryApps.length;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.el) === "rtl";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { onKeyDown: this.keydownHandler }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", kind: "neutral", class: { "toggle-button": true, "toggle-button--expanded": this.isExpanded }, "aria-label": this.strings.appLauncher, onClick: this.handleToggle, ref: (el) => (this.toggleButton = el), "aria-expanded": this.isExpanded }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { class: "toggle-button__icon", icon: "app-launcher", scale: "m" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "apps-content-container" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                "apps-content": true,
                "apps-content--rtl": rtl,
                "apps-content--expanded": this.isExpanded,
                "apps-content--dragging": this.dragging
            }, "aria-hidden": "false" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("nav", { class: "dropdown-menu dropdown-right", role: "menu" }, this.displayIntro && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "intro-container" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "drag-and-drop-intro intro-text" }, this.strings.dragDrop), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", kind: "neutral", onClick: this.handleDismissIntro }, this.strings.gotIt))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { class: "apps-list", ref: (el) => (this.primaryContainer = el) }, this.primaryApps.map((app, index) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", { "data-id": app.itemId || app.title, key: app.itemId, class: { "app-item": true, "app-item--missing": !app.canAccess } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-app-switcher-link", { app: app, index: index, total: total, focusItemId: this.focusItemId, openText: this.strings.openWindow }))))), !this.secondaryExpanded && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "show-more", onClick: this.handleShowMore }, this.strings.showMore, " ", (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "chevron-down", scale: "s" }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                "secondary-container": true,
                "secondary-container--hidden": !this.secondaryExpanded
            }, "aria-expanded": "true" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { class: {
                "secondary-target": this.secondaryApps.length === 0,
                "secondary-list": this.secondaryApps.length !== 0,
                "secondary-target--hover": this.hoveringOverSecondary && this.secondaryApps.length === 0
            }, ref: (el) => (this.secondaryContainer = el) }, this.secondaryApps.length === 0 && !this.hoveringOverSecondary && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "secondary-drag-text", ref: (el) => (this.secondaryDragText = el) }, this.strings.dragSecondary)), this.secondaryApps.map((app, index) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", { "data-id": app.itemId, key: app.itemId, class: { "app-item": true, "app-item--missing": !app.canAccess } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-app-switcher-link", { app: app, index: this.primaryApps.length + index, total: total, focusItemId: this.focusItemId, openText: this.strings.openWindow })))))))))));
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "shouldExpand": ["handleShouldExpandChange"]
    }; }
};
ArcgisAppSwitcher.style = arcgisAppSwitcherCss;

const AppSwitcherLinkArrows = ({ index, total, active }) => {
    const isFirst = index === 0;
    const isFirstRow = index <= 2;
    const isLast = index === total - 1;
    const rowCount = Math.ceil(total / 3);
    const lastRowFirstIndex = rowCount * 3 - 3;
    const isLastRow = index >= lastRowFirstIndex;
    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: { "arrow--hidden": !active } },
        !isFirst && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "arrow arrow--left" }),
        !isLast && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "arrow arrow--right" }),
        !isFirstRow && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "arrow arrow--top" }),
        !isLastRow && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "arrow arrow--bottom" })));
};

const arcgisAppSwitcherLinkCss = ":host{display:block;height:93%}.app-link{position:relative;display:block;height:100%;-webkit-user-select:text;-moz-user-select:text;user-select:text;padding-left:0.5rem;padding-right:0.5rem;padding-top:0.5rem;text-decoration-line:none;color:inherit}.app-link:focus{outline:1px solid var(--calcite-color-brand)}.arrow{position:absolute;height:0px;width:0px}.arrow--hidden{visibility:hidden}.arrow--left{border-right:5px solid var(--calcite-color-brand);border-bottom:5px solid transparent;border-top:5px solid transparent;left:38px;top:27px}.arrow--right{border-left:5px solid var(--calcite-color-brand);border-bottom:5px solid transparent;border-top:5px solid transparent;right:38px;top:27px}.arrow--top{border-bottom:5px solid var(--calcite-color-brand);border-left:5px solid transparent;border-right:5px solid transparent;top:0;right:70px}.arrow--bottom{border-top:5px solid var(--calcite-color-brand);border-left:5px solid transparent;border-right:5px solid transparent;top:59px;right:70px}.missing-icon .arrow--top{top:-4px}.icon-wrapper{margin-top:0px;margin-bottom:0px;margin-left:auto;margin-right:auto;margin-bottom:0.5rem;display:block;height:3rem;width:3rem;background-size:contain;background-repeat:no-repeat;text-align:center;font-size:1.125rem;color:var(--calcite-color-text-2)}.icon-abbr{position:absolute;width:3rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-size:1.25rem;font-weight:700;color:var(--calcite-color-foreground-1);line-height:3rem;text-shadow:0 1px 8px var(--calcite-color-text-3);transform:translateZ(0)}.icon-img{pointer-events:none;height:3rem;width:3rem}.indicator{position:absolute;clear:both;box-sizing:border-box;height:1rem;width:1rem;border-radius:50%;border:2px solid var(--calcite-color-foreground-1);z-index:50}.indicator--new{background-color:var(--calcite-color-status-success);top:4px;right:46px}.indicator--new-rtl{right:auto;left:46px}.indicator--remove{display:flex;cursor:pointer;align-items:center;justify-content:center;background-color:var(--calcite-color-foreground-1);line-height:2px;padding:1px;right:42px;top:2px}.indicator--remove-rtl{right:auto;left:42px}.indicator--remove:hover,.indicator--remove:focus{outline:2px solid transparent;outline-offset:2px;border-color:var(--calcite-color-status-danger);color:var(--calcite-color-status-danger)}.missing-icon{margin-top:0px;margin-bottom:0px;margin-left:auto;margin-right:auto;margin-bottom:0.5rem;box-sizing:border-box;display:block;height:3rem;width:3rem;cursor:pointer;background-color:var(--calcite-color-foreground-3);text-align:center;border:1px dashed var(--calcite-color-inverse);border-radius:6px;outline-color:var(--calcite-color-brand)}.label-text{margin-top:0px;margin-bottom:0px;margin-left:auto;margin-right:auto;display:block;text-align:center;line-height:17px;width:128px}.screen-readers{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}";

const ArcgisAppLink = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisAppSwitcherLinkActivated = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAppSwitcherLinkActivated", 7);
        this.arcgisAppSwitcherLinkMove = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAppSwitcherLinkMove", 7);
        this.arcgisAppSwitcherLinkRemove = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAppSwitcherLinkRemove", 7);
        this.arcgisAppSwitcherLinkClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAppSwitcherLinkClick", 7);
        this.isFirstRow = false;
        this.isLastRow = false;
        this.moveElement = (keyCode) => {
            this.arcgisAppSwitcherLinkMove.emit({
                uid: this.app.itemId || this.app.title,
                index: this.index,
                keyCode
            });
        };
        this.handleKey = (evt) => {
            let keyMatch = true;
            switch (evt.code) {
                case "Space":
                    this.sortingActive = !this.sortingActive;
                    this.arcgisAppSwitcherLinkActivated.emit();
                    break;
                case "ArrowUp":
                case "ArrowRight":
                case "ArrowDown":
                case "ArrowLeft":
                    if (this.sortingActive) {
                        this.moveElement(evt.code);
                    }
                    break;
                default:
                    keyMatch = false;
                    break;
            }
            if (keyMatch) {
                evt.preventDefault();
                evt.stopPropagation();
            }
        };
        this.handleBlur = () => {
            this.sortingActive = false;
        };
        this.handleRemove = () => {
            this.arcgisAppSwitcherLinkRemove.emit(this.app.itemId || this.app.title);
        };
        this.handleRemoveKeydown = (evt) => {
            switch (evt.code) {
                case "Space":
                case "Enter":
                    this.handleRemove();
                    evt.preventDefault();
                    break;
            }
        };
        this.handleClick = () => {
            this.arcgisAppSwitcherLinkClick.emit();
        };
        this.app = undefined;
        this.index = undefined;
        this.total = undefined;
        this.focusItemId = undefined;
        this.openText = undefined;
        this.sortingActive = false;
    }
    componentDidRender() {
        var _a, _b;
        if (this.focusItemId &&
            (this.focusItemId === this.app.itemId || this.focusItemId === this.app.title)) {
            this.sortingActive = true;
            if (this.app.canAccess) {
                (_a = this.linkElement) === null || _a === void 0 ? void 0 : _a.focus();
            }
            else if (!this.app.canAccess) {
                (_b = this.missingElement) === null || _b === void 0 ? void 0 : _b.focus();
            }
        }
    }
    render() {
        var _a;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.el) === "rtl";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, ((_a = this.app) === null || _a === void 0 ? void 0 : _a.canAccess) && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", { ref: (el) => (this.linkElement = el), href: this.app.url, class: "app-link", onKeyDown: this.handleKey, onBlur: this.handleBlur, onClick: this.handleClick, draggable: false, target: "_blank", role: "menuitem" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "icon-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(AppSwitcherLinkArrows, { active: this.sortingActive, index: this.index, total: this.total }), !this.app.image && this.app.abbr && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { style: { fontSize: this.app.fontSize || "20px" }, class: "avenir icon-abbr" }, this.app.abbr)), !this.app.image && this.app.abbr && this.app.placeHolderIcon && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("img", { src: this.app.placeHolderIcon, alt: "" })), this.app.image && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("img", { src: this.app.image, class: "icon-img", alt: "" })), this.app.isNew && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: { indicator: true, "indicator--new": true, "indicator--new-rtl": rtl } })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "label-text" }, this.app.label), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "screen-readers" }, this.openText))), this.app && !this.app.canAccess && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { indicator: true, "indicator--remove": true, "indicator--remove-rtl": rtl }, tabIndex: 0, onClick: this.handleRemove, onKeyDown: this.handleRemoveKeydown }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "x" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (el) => (this.missingElement = el), class: "missing-icon", tabIndex: 0, onKeyDown: this.handleKey, onBlur: this.handleBlur }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(AppSwitcherLinkArrows, { active: this.sortingActive, index: this.index, total: this.total })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "label-text" }, this.app.label)))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAppLink.style = arcgisAppSwitcherLinkCss;



//# sourceMappingURL=arcgis-app-switcher_2.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isSubscriber),
/* harmony export */   b: () => (/* binding */ isPremium),
/* harmony export */   c: () => (/* binding */ canUpdateItem),
/* harmony export */   d: () => (/* binding */ itemsBelongToUserOrg),
/* harmony export */   g: () => (/* binding */ getItemHomeAppUrl),
/* harmony export */   i: () => (/* binding */ isOwner),
/* harmony export */   u: () => (/* binding */ userIsItemAdmin)
/* harmony export */ });
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


function isEsri(item) {
    var _a;
    return !!((_a = item.owner) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes("esri"));
}
function isPremium(item) {
    var _a;
    return isEsri(item) && !!((_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("Requires Credits"));
}
function isSubscriber(item) {
    var _a;
    return isEsri(item) && !!((_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("Requires Subscription"));
}
function isOwner(item, user) {
    return item.owner === user.username;
}
/**
 * Can the user update the item
 */
function canUpdateItem(item, user) {
    return userIsItemAdmin(item, user) || item.itemControl === "update";
}
/**
 * Is the user either an owner or admin of the item
 */
function userIsItemAdmin(item, user) {
    return isOwner(item, user) || isItemAdmin(item, user);
}
/**
 * Does the user have admin capabilities on this item
 */
function isItemAdmin(item, user) {
    var _a;
    // if this flag is already set (probably home app), use it
    if (item.isAdmin != null) {
        return !!item.isAdmin;
    }
    const itemOwner = item.owner;
    const itemControlAdmin = item.itemControl === "admin";
    const esriUsers = ["esri_livingatlas", "esri_demographics", "esri_boundaries"];
    if (((_a = item.portal) === null || _a === void 0 ? void 0 : _a.isPortal) &&
        !isOwner(item, user) &&
        itemControlAdmin &&
        itemOwner.includes("esri_") &&
        // portal incorrectly returns "itemControl="admin" for esri owned items
        !esriUsers.includes(itemOwner)) {
        return false;
    }
    return itemControlAdmin;
}
const itemsBelongToUserOrg = (items, user) => {
    return !!user.orgId && items.every((item) => item.isOrgItem);
};
const getItemHomeAppUrl = (itemId, baseUrl) => `${(0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_0__.a)(baseUrl)}item.html?id=${itemId}`;



//# sourceMappingURL=item-3535552d.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isPublicUser),
/* harmony export */   b: () => (/* binding */ isOrgAdmin),
/* harmony export */   c: () => (/* binding */ isHostedPortal),
/* harmony export */   d: () => (/* binding */ isCustomRole),
/* harmony export */   e: () => (/* binding */ canUpdateOrgGroups),
/* harmony export */   f: () => (/* binding */ canUpdateItemCategories),
/* harmony export */   g: () => (/* binding */ canManageCollaborations),
/* harmony export */   h: () => (/* binding */ isOrgUser),
/* harmony export */   i: () => (/* binding */ isDeveloper),
/* harmony export */   j: () => (/* binding */ canShareItemToGroup),
/* harmony export */   k: () => (/* binding */ canShareItemToOrg),
/* harmony export */   l: () => (/* binding */ adminCanShareOthersItemToGroup),
/* harmony export */   m: () => (/* binding */ canShareOthersItemsToOrg),
/* harmony export */   n: () => (/* binding */ canShareItemToPublic),
/* harmony export */   o: () => (/* binding */ canShareOthersItemsToPublic),
/* harmony export */   p: () => (/* binding */ hasAdminSharePrivilege),
/* harmony export */   q: () => (/* binding */ canViewOthersOrgItems)
/* harmony export */ });
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const getUserRole = (user) => {
    var _a, _b, _c;
    return typeof (user === null || user === void 0 ? void 0 : user.role) === "string" && !!(user === null || user === void 0 ? void 0 : user.role)
        ? user === null || user === void 0 ? void 0 : user.role
        : (_b = (_a = user === null || user === void 0 ? void 0 : user.roleId) !== null && _a !== void 0 ? _a : user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : (_c = user === null || user === void 0 ? void 0 : user.sourceJSON) === null || _c === void 0 ? void 0 : _c.id;
};
function isPublicUser(user) {
    return user && !user.orgId;
}
function isHostedPortal(portal) {
    return !portal.isPortal || !!portal.isBackedBySDS;
}
function isDeveloper(subscriptionInfo) {
    const devSubscriptionTypes = ["Trial Developer", "Developer", "Developer Subscription"];
    return devSubscriptionTypes.includes(subscriptionInfo === null || subscriptionInfo === void 0 ? void 0 : subscriptionInfo.type);
}
function isOrgAdmin(user) {
    return getUserRole(user) === "org_admin" || getUserRole(user) === "account_admin";
}
function isOrgUser(user) {
    return getUserRole(user) === "org_user" || getUserRole(user) === "account_user";
}
function isCustomRole(user) {
    // The Home App collapse the `roleId` and `role` into a single `id` property, that's why
    //  https://devtopia.esri.com/WebGIS/arcgis-portal-app/blob/master/src/js/arcgisonline/sharing/dijit/Role.ts#L469 works
    // In practice, we only need to check if `roleId` exist
    //  https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/44682#issuecomment-4146866
    return !!(user === null || user === void 0 ? void 0 : user.roleId) && user.roleId.length > 0;
}
/**
 * Checks whether the privilege "portal:admin:updateItemCategorySchema" is granted.
 */
function canUpdateItemCategories(user) {
    var _a;
    return !!((_a = user === null || user === void 0 ? void 0 : user.privileges) === null || _a === void 0 ? void 0 : _a.includes("portal:admin:updateItemCategorySchema"));
}
/**
 * Checks whether the privilege "portal:admin:updateGroups" is granted.
 */
function canUpdateOrgGroups(user) {
    var _a;
    return !!((_a = user === null || user === void 0 ? void 0 : user.privileges) === null || _a === void 0 ? void 0 : _a.includes("portal:admin:updateGroups"));
}
/**
 * Checks whether the user is allowed to update other user's items in their organization.
 */
function canUpdateOrgItems(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:updateItems");
}
/**
 * Checks to ensure the portal is an organization portal
 */
function isOrgPortal(portal) {
    return !!(portal.urlKey && portal.customBaseUrl) || !!portal.isPortal;
}
/**
 * Checks whether the user is allowed to share their item to groups
 */
function canShareItemToGroup(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToGroup");
}
/**
 * Checks whether the user can share an item on a given portal
 */
function canShare(user, portal) {
    return (!isOrgPortal(portal) ||
        canShareItemToGroup(user) ||
        canShareItemToOrg(user) ||
        (!!portal.canSharePublic && canShareItemToPublic(user)));
}
/**
 * Checks whether the user is allowed to share their item ot the organization.
 */
function canShareItemToOrg(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToOrg");
}
/**
 * Checks whether the user is allowed to share their item to public
 */
function canShareItemToPublic(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToPublic");
}
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItemsToOrg(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToOrg");
}
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItemsToPublic(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToPublic");
}
/**
 * Checks whether the user can share other user's items
 */
function adminCanShareOthersItemToGroup(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToGroup");
}
/**
 * Checks whether the user is in an allowed organization and has the power to manage collaborations
 */
function canManageCollaborations(config, user, portal, subscriptionInfo) {
    const excludedOrgTypes = ["Trial", "Trial Press", "Trial Developer", "Developer Subscription", "Evaluation"];
    const isValidOrgType = subscriptionInfo && !excludedOrgTypes.includes(subscriptionInfo.type);
    const hasPrivilege = ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:manageCollaborations");
    return !!((config === null || config === void 0 ? void 0 : config.collaborationsEnabled) &&
        user &&
        (isOrgAdmin(user) || hasPrivilege) &&
        ((portal === null || portal === void 0 ? void 0 : portal.isPortal) || isValidOrgType));
}
/**
 * Checks whether the user can view other organization users' items
 */
function canViewOrgItems(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:viewItems");
}
/**
 * Checks whether the user can view other organization users' items
 */
function canViewOthersOrgItems(user) {
    return !!user && (!isCustomRole(user) || (isCustomRole(user) && canViewOrgItems(user)));
}
// TODO: add unit tests
const hasAdminSharePrivilege = ({ items, user, portal }) => {
    const item = items[0];
    // enterprise incorrectly returns items owned by "esri_" as item control admin (WebGIS/arcgis-portal-app#38695)
    const owner = item.owner;
    const whitelistOwner = ["esri_livingatlas"];
    if (portal.isPortal && owner !== user.username && owner.includes("esri_") && !whitelistOwner.includes(owner)) {
        return false;
    }
    const isOwnerOrAdmin = (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.u)(item, user);
    const isCustom = isCustomRole(user);
    const canShareOrgItems = canShareOthersItems(user);
    const canUpdateAndShare = (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.c)(item, user) &&
        canUpdateOrgItems(user) &&
        !isCustom &&
        (canShare(user, portal) || canShareOthersItems(user));
    // if it's the item owner or admin, or custom admin who can share
    return isOwnerOrAdmin || canUpdateAndShare || ((0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.d)(items, user) && canShareOrgItems);
};
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItems(user) {
    return adminCanShareOthersItemToGroup(user) || canShareOthersItemsToOrg(user) || canShareOthersItemsToPublic(user);
}



//# sourceMappingURL=privileges-5c382f61.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-0353a769.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-0353a769.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ setSessionStorageItem),
/* harmony export */   b: () => (/* binding */ getSessionStorageItem),
/* harmony export */   c: () => (/* binding */ getCookie),
/* harmony export */   d: () => (/* binding */ setCookie),
/* harmony export */   g: () => (/* binding */ getLocalStorageItem),
/* harmony export */   s: () => (/* binding */ setLocalStorageItem)
/* harmony export */ });
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


// import stringUtil from "./strings";
/**
 * Utility methods for dealing with storage of various forms (cookies, local storage, and session storage).
 */
function setCookie(name, cookie, properties, stringify) {
    writeCookie(name, stringify ? JSON.stringify(cookie) : cookie, properties);
}
function getCookie(name, parse) {
    const cookie = readCookie(name);
    return cookie && parse ? JSON.parse(cookie) : cookie;
}
function setLocalStorageItem(name, item, stringify) {
    window.localStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getLocalStorageItem(name, parse) {
    const item = window.localStorage.getItem(name);
    return item && parse ? JSON.parse(item) : item;
}
function setSessionStorageItem(name, item, stringify) {
    window.sessionStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getSessionStorageItem(name, parse) {
    const item = window.sessionStorage.getItem(name);
    return item && parse ? JSON.parse(item) : item;
}
function readCookie(name) {
    const cookie = document.cookie;
    const cookieNameRE = new RegExp(`(?:^|; )${(0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_0__.e)(name)}=([^;]*)`);
    const matchedCookies = cookie.match(cookieNameRE);
    return matchedCookies ? decodeURIComponent(matchedCookies[1]) : undefined;
}
function writeCookie(name, value, properties) {
    properties = properties || {};
    let expires = properties === null || properties === void 0 ? void 0 : properties.expires;
    if (typeof expires === "number") {
        const expirationDate = new Date();
        const daysFromTodayInMs = expires * 24 * 60 * 60 * 1000;
        expirationDate.setTime(Date.now() + daysFromTodayInMs);
        expires = properties.expires = expirationDate;
    }
    if (typeof expires !== "string" && (expires === null || expires === void 0 ? void 0 : expires.toUTCString)) {
        properties.expires = expires.toUTCString();
    }
    let cookie = `${name}=${encodeURIComponent(value)}`;
    let property;
    for (property in properties) {
        cookie += `; ${property}`;
        const propertyValue = properties[property];
        if (propertyValue !== true) {
            cookie += `=${propertyValue}`;
        }
    }
    document.cookie = cookie;
}



//# sourceMappingURL=storage-0353a769.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,