"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-6e5199"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.es-c2958463.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.es-c2958463.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Abs_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Abs_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Abs_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Abs_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Abs_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Abs_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Abs_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Abs_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Abs_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Abs_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Abs_Raster_tag0@@": "El ráster de entrada para el cual se calculan los valores absolutos.",
	"@@ACos_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@ACos_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@ACos_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@ACos_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@ACos_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@ACos_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@ACos_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@ACos_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@ACos_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@ACos_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@ACos_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@ACos_Raster_tag0@@": "La entrada para la cual se calculan los valores del coseno inverso.",
	"@@ACosH_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@ACosH_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@ACosH_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@ACosH_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@ACosH_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@ACosH_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@ACosH_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@ACosH_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@ACosH_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@ACosH_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@ACosH_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@ACosH_Raster_tag0@@": "La entrada para la cual se calculan los valores del coseno hiperbólico inverso.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "Los resultados de la función Reflectancia aparente también se pueden expresar como albedo, que es el porcentaje de la energía disponible que refleja la superficie planetaria. Los usuarios científicos emplean los datos de Albedo para el modelado complejo y las aplicaciones técnicas de teledetección.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Desactivado: la función devuelve los valores de reflectancia aparente. Esta es la opción predeterminada.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Activado: la función devuelve valores de punto flotante de 32 bits, que se encuentran normalmente en el rango de 0,0 a 1,0. Los datos no se recortan si esta opción está seleccionada.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Dado que los datos de salida de albedo son del tipo punto flotante, debe definir de forma explícita el <strong>Tipo de píxel de salida</strong> preferido como flotante de 32 bits o doble de 64 bits. El parámetro <strong>Tipo de píxel de salida</strong> se encuentra en la pestaña <strong>General</strong> de la función de ráster <strong>Reflectancia aparente</strong>. Si el <strong>Tipo de píxel de salida</strong> no está configurado correctamente para la opción <strong>Albedo</strong>, los valores resultantes no serán válidos y se dará un valor de 0.",
	"@@Apparent-Reflectance_Offset_tag0@@": "El valor de albedo escalado puede, opcionalmente, tener un valor de desplazamiento:",
	"@@Apparent-Reflectance_Offset_tag1@@": "Para los tipos de datos de 16 bits sin signo, el desplazamiento de escala predeterminado es 5.000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "Para los tipos de datos de 8 bits sin signo, el desplazamiento de escala predeterminado es 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "No se aplica ninguna escala cuando la salida es de albedo.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "Puede establecer o editar manualmente este valor para cada banda. La información adecuada se puede leer en los metadatos del producto ráster de entrada.",
	"@@Apparent-Reflectance_Raster_tag0@@": "El producto ráster en el que se aplicará la reflectancia aparente.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "El valor de salida de reflectancia aparente se puede expresar como un entero. El factor de escala se multiplica por el albedo para convertir todos los valores de punto flotante en valores enteros.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Si el factor de escala es ${0} o no se especifica, la escala predeterminada se aplicará dependiendo del tipo de píxel de los datos de entrada:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "Para los tipos de datos de 16 bits sin signo, el factor de escala predeterminado es 50.000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "Para los tipos de datos de 8 bits sin signo, el factor de escala predeterminado es 255.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "El factor de escala se aplica siempre cuando la salida es de reflectancia aparente. No se aplica ninguna escala cuando la salida es de albedo.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Este es el valor de elevación del sol, expresado en grados. Lo completará el sistema si se puede leer la información apropiada en los metadatos. Puede establecer o editar manualmente este valor.",
	"@@ArgStatistics_Max_tag0@@": "El valor máximo que usted establece es el valor más alto igual o menor que el final de la duración.",
	"@@ArgStatistics_Max_tag1@@": "Esta entrada solo se aplica si el método es Duration.",
	"@@ArgStatistics_Method_tag0@@": "Seleccione el método estadístico que desea calcular:",
	"@@ArgStatistics_Method_tag1@@": "ArgMax: el argumento del máximo, el cual devuelve el ${Band index} para el cual el píxel dado obtiene su valor máximo de todas las bandas. A todas las bandas de ráster de cada ráster de entrada se les asigna un índice de banda incremental de base 0 que es el primero solicitado por el índice de ráster de entrada, y luego por el orden de banda relativo de cada ráster de entrada.",
	"@@ArgStatistics_Method_tag2@@": "ArgMedian: el argumento del mediano, el cual devuelve el ${Band index} para el cual el píxel dado obtiene la mediana de valores de todas las bandas.",
	"@@ArgStatistics_Method_tag3@@": "ArgMin: el argumento del mínimo, el cual devuelve el ${Band index} para el cual el píxel dado obtiene su valor mínimo de todas las bandas.",
	"@@ArgStatistics_Method_tag4@@": "Duración: este método encuentra los elementos consecutivos más largos del conjunto, donde cada elemento tiene un valor mayor o igual que el <strong>Mín.</strong> y menor o igual que el <strong>Máx.</strong>, y después devuelve su longitud.",
	"@@ArgStatistics_Min_tag0@@": "El valor mínimo que usted establece es el valor más bajo igual o mayor que el principio de la duración.",
	"@@ArgStatistics_Min_tag1@@": "Esta entrada solo se aplica si el método es Duration.",
	"@@ArgStatistics_Rasters_tag0@@": "El ráster de entrada en el que realizará los distintos métodos estadísticos.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "Una entrada constante que se devuelve cuando no es posible obtener un máximo, un mínimo o una mediana definitivos. El escenario más habitual es cuando el valor máximo o mínimo tiene lugar más de una vez entre valores de todas las bandas. El valor predeterminado para la constante sin definir es 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "La clase sin definir solo se aplica si el método es <strong>ArgMax</strong>, <strong>ArgMin</strong> o <strong>ArgMedian</strong>.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Indica si los valores NoData se ignoran en el cálculo de estadísticas.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Activado: el análisis incluirá todos los píxeles válidos en los rásteres de entrada y se ignorarán los píxeles NoData.",
	"@@ArgStatistics_ignorenodata_tag2@@": "Desactivado: el análisis dará como resultado NoData si hay valores NoData para los píxeles en los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Arithmetic_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Arithmetic_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Arithmetic_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Arithmetic_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Arithmetic_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Arithmetic_Operation_tag0@@": "La operación aritmética a realizar entre los dos rásteres de entrada.",
	"@@Arithmetic_Operation_tag1@@": "Las opciones son las siguientes:",
	"@@Arithmetic_Operation_tag2@@": "<strong>División</strong>: genera el resultado divisible entre los valores de píxel correspondientes de cada ráster.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Resta</strong>: genera la diferencia entre los valores de píxel correspondientes de cada ráster. Esta operación se puede utilizar en la detección de cambios.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Modo</strong>: genera el valor de píxel de todos los píxeles superpuestos que más se repiten. Por ejemplo, si hay seis bandas en un ráster, habrá seis píxeles superpuestos. Para los valores 4, 5, 6, 4, 7, 9, el valor de modo es 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Multiplicación</strong>: genera el producto de los valores de píxel correspondientes de cada ráster. Esta operación se puede utilizar para realizar algunas funciones de coste.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Suma</strong>: genera la suma de todos los valores de píxel correspondientes de cada ráster.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Potencia</strong>: genera el producto de los valores de píxel correspondientes elevado a la potencia del ráster de entrada o escalar.",
	"@@Arithmetic_Raster_tag0@@": "El primer dataset ráster de entrada.",
	"@@Arithmetic_Raster2_tag0@@": "El segundo dataset ráster de entrada.",
	"@@ASin_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@ASin_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@ASin_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@ASin_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@ASin_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@ASin_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@ASin_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@ASin_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@ASin_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@ASin_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@ASin_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@ASin_Raster_tag0@@": "La entrada para la cual se calculan los valores del seno inverso.",
	"@@ASinH_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@ASinH_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@ASinH_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@ASinH_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@ASinH_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@ASinH_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@ASinH_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@ASinH_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@ASinH_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@ASinH_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@ASinH_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@ASinH_Raster_tag0@@": "La entrada para la cual se calculan los valores del seno hiperbólico inverso.",
	"@@Aspect_Raster_tag0@@": "El DEM de entrada utilizado para derivar el dataset de orientación.",
	"@@Aspect-Slope_Raster_tag0@@": "El DEM de entrada.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "Un factor de escala que se utiliza para convertir los valores de elevación por los dos motivos siguientes:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "Convierte las unidades de elevación (como metros o pies) a las unidades de coordenadas horizontales del dataset, que pueden ser pies, metros o grados.",
	"@@Aspect-Slope_Z-Factor_tag2@@": "Agregue exageración vertical para lograr un efecto visual.",
	"@@ATan_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@ATan_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@ATan_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@ATan_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@ATan_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@ATan_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@ATan_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@ATan_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@ATan_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@ATan_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@ATan_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@ATan_Raster_tag0@@": "La entrada para la cual se calculan los valores de la tangente inversa.",
	"@@ATan2_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@ATan2_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@ATan2_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@ATan2_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@ATan2_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@ATan2_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@ATan2_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@ATan2_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@ATan2_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@ATan2_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@ATan2_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@ATan2_Raster_tag0@@": "La entrada que especifica el numerador, o valor y, para utilizarlo cuando se calcula la tangente inversa.",
	"@@ATan2_Raster2_tag0@@": "La entrada que especifica el denominador, o valor x, para utilizarlo cuando se calcula la tangente inversa.",
	"@@ATanH_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@ATanH_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@ATanH_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@ATanH_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@ATanH_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@ATanH_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@ATanH_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@ATanH_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@ATanH_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@ATanH_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@ATanH_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@ATanH_Raster_tag0@@": "La entrada para la cual se calculan los valores de la tangente hiperbólica inversa.",
	"@@Attribute-Table_Raster_tag0@@": "El ráster de entrada.",
	"@@Attribute-Table_Table-Type_tag0@@": "La tabla de atributos de entrada se puede introducir utilizando el tipo <strong>Manual</strong> donde se asigna un nombre de clase y un color a cada valor o haciendo referencia una tabla existente que procede de un archivo ${.dbf}.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Defina su fórmula aritmética de banda si eligió <strong>Definido por el usuario</strong> como <strong>Método</strong>.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "Si eligió un índice predefinido como <strong>Método</strong>, defina las bandas adecuadas de su dataset ráster de entrada que se corresponden con el índice.",
	"@@Band-Arithmetic_Method_tag0@@": "El tipo de algoritmo aritmético de banda que desea implementar. Puede definir su propio algoritmo personalizado o elegir un índice predefinido.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong>: índice de área quemada",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>Clg</strong>: índice de clorofila - Verde",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>Clre</strong>: índice de clorofila - Límite rojo",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Minerales arcillosos</strong>: ratio de minerales arcillosos",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong>: índice de vegetación mejorado",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Minerales ferrosos</strong>: ratio de minerales ferrosos",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong>: índice de supervisión de medioambiente global",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong>: índice de vegetación de diferencia normalizada verde",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong>: índice de vegetación verde - Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Óxido de hierro</strong>: ratio de óxido de hierro",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong>: índice modificado de agua de diferencia normalizada",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong>: índice triangulado de vegetación modificado (segunda iteración)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>SAVI modificado</strong>: índice de vegetación ajustado de suelo modificado",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong>: índice de ratio de calcinación normalizado",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong>: índice de áreas construidas de diferencia normalizada",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong>: índice de diferencia de humedad normalizado",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong>: índice de nieve de diferencia normalizada",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong>: índice de vegetación de diferencia normalizada",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong>: índice de vegetación de diferencia normalizada de límite rojo",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong>: índice de agua de diferencia normalizada",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong>: índice de vegetación perpendicular",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVIcore</strong>: índice triangulado de vegetación de límite rojo",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong>: índice de vegetación ajustado de suelo",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong>: relación simple",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong>: ratio simple de límite rojo",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Fórmula de Sultan</strong>: fórmula de Sultan",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>SAVI transformado</strong>: índice de vegetación ajustado de suelo transformado",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>Definido por el usuario</strong>: le permite definir su expresión aritmética de banda personalizada.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong>: índice de resistencia atmosférica visible",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong>: índice de agua de diferencia normalizada ponderada",
	"@@Band-Arithmetic_Raster_tag0@@": "El ráster de entrada.",
	"@@Binary-Thresholding_Raster_tag0@@": "El ráster de entrada.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Bitwise-And_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Bitwise-And_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Bitwise-And_Raster_tag0@@": "La primera entrada que se utiliza en esta operación bit a bit.",
	"@@Bitwise-And_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Bitwise-And_Raster2_tag0@@": "La segunda entrada que se utiliza en esta operación bit a bit.",
	"@@Bitwise-And_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "La entrada en la cual se realiza el cambio.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "La entrada que define la cantidad de posiciones para cambiar los bits.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Bitwise-Not_Raster_tag0@@": "El ráster de entrada sobre el que se realizan la operación de Bitwise Not (complementario).",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Bitwise-Or_Raster_tag0@@": "La primera entrada que se utiliza en esta operación bit a bit.",
	"@@Bitwise-Or_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Bitwise-Or_Raster2_tag0@@": "La segunda entrada que se utiliza en esta operación bit a bit.",
	"@@Bitwise-Or_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "La entrada en la cual se realiza el cambio.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "La entrada que define la cantidad de posiciones para cambiar los bits.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Bitwise-Xor_Raster_tag0@@": "La primera entrada que se utiliza en esta operación bit a bit.",
	"@@Bitwise-Xor_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Bitwise-Xor_Raster2_tag0@@": "La segunda entrada que se utiliza en esta operación bit a bit.",
	"@@Bitwise-Xor_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Boolean-and_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Boolean-and_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Boolean-and_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Boolean-and_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Boolean-and_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Boolean-and_Raster_tag0@@": "La primera entrada que se utiliza en esta operación booleana.",
	"@@Boolean-and_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Boolean-and_Raster2_tag0@@": "La segunda entrada que se utiliza en esta operación booleana.",
	"@@Boolean-and_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Boolean-Not_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Boolean-Not_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Boolean-Not_Raster_tag0@@": "La primera entrada que se utiliza en esta operación booleana.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Boolean-Or_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Boolean-Or_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Boolean-Or_Raster_tag0@@": "La primera entrada que se utiliza en esta operación booleana.",
	"@@Boolean-Or_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Boolean-Or_Raster2_tag0@@": "La segunda entrada que se utiliza en esta operación booleana.",
	"@@Boolean-Or_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Boolean-Xor_Raster_tag0@@": "La primera entrada que se utiliza en esta operación booleana.",
	"@@Boolean-Xor_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Boolean-Xor_Raster2_tag0@@": "La segunda entrada que se utiliza en esta operación booleana.",
	"@@Boolean-Xor_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Buffered_Raster_tag0@@": "El ráster de entrada que se desea almacenar en memoria.",
	"@@Calculator_Cellsize-Type_tag0@@": "El tamaño de celda utilizado para crear el ráster de salida.",
	"@@Calculator_Cellsize-Type_tag1@@": "Puede elegir el tamaño de celda de salida de entre las siguientes opciones de la lista desplegable:",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>Primero de</strong>: el tamaño de celda de la primera variable de ráster.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Mínimo de</strong>: el tamaño de celda mínimo de los rásteres de entrada.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Máximo de</strong>: el tamaño de celda máximo de los rásteres de entrada.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Valor medio de</strong>: el tamaño de celda medio de los rásteres de entrada.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Último de</strong>: el tamaño de celda de la última variable de ráster.",
	"@@Calculator_Cellsize-Type_tag12@@": "La selección predeterminada es <strong>Máximo de</strong>.",
	"@@Calculator_Expression_tag0@@": "Construya una expresión algebraica para realizar análisis espacial en el ráster de entrada.",
	"@@Calculator_Expression_tag1@@": "Puede invocar todas las funciones matemáticas existentes para construir la expresión. Los operadores disponibles se enumeran a continuación.",
	"@@Calculator_Expression_tag2@@": "Operaciones aritméticas",
	"@@Calculator_Expression_tag3@@": "Suma: +",
	"@@Calculator_Expression_tag4@@": "División: /",
	"@@Calculator_Expression_tag5@@": "Módulo: %",
	"@@Calculator_Expression_tag6@@": "Multiplicación: *",
	"@@Calculator_Expression_tag7@@": "Potencia: **",
	"@@Calculator_Expression_tag8@@": "Resta: -",
	"@@Calculator_Expression_tag9@@": "Operaciones booleanas",
	"@@Calculator_Expression_tag10@@": "Booleana And: &&",
	"@@Calculator_Expression_tag11@@": "Booleana Or: ||",
	"@@Calculator_Expression_tag12@@": "Operaciones relacionales",
	"@@Calculator_Expression_tag13@@": "Igual que: ==",
	"@@Calculator_Expression_tag14@@": "Mayor que: >",
	"@@Calculator_Expression_tag15@@": "Mayor o igual que: >=",
	"@@Calculator_Expression_tag16@@": "Menor que: <",
	"@@Calculator_Expression_tag17@@": "Menor o igual que: <=",
	"@@Calculator_Expression_tag18@@": "No es igual que: !=",
	"@@Calculator_Expression_tag19@@": "Operaciones adicionales",
	"@@Calculator_Expression_tag20@@": "Mínimo de dos rásteres por píxel: min(a,b)",
	"@@Calculator_Expression_tag21@@": "Máximo de dos rásteres por píxel: max(a,b)",
	"@@Calculator_Expression_tag22@@": "Estos son algunos ejemplos de expresiones:",
	"@@Calculator_Expression_tag23@@": "Declaración condicional simple: en un ráster (indicado como T), hallar los valores de elevación superiores a 4.000 pies y asignar a esas áreas el valor 1 y a las demás el valor 0.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Declaración condicional anidada: hallar las áreas donde la pendiente (indicado como b1) es inferior a 10 grados y el NDVI (indicado como b2) es superior a 0,5 y asignar a esas áreas el valor 1. Para las demás áreas, asignar el valor 2 si la pendiente es superior a 10 grados y la elevación (indicada como b3) es superior a 2.500 pies. Asignar a las demás áreas el valor 3.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Elija qué extensión se debería usar en el ráster de salida:</p><ul><li><p>Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.</p></li><li>Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.</li><li>Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.</li><li>Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "El nombre de la variable definida por el usuario y el ráster de entrada.",
	"@@Classify_Input-Definition-File_tag0@@": "El archivo de definición de clasificador de Esri (${.ecd}) de entrada que contiene las estadísticas y otra información de clasificación para el dataset y el clasificador concretos y los atributos elegidos.",
	"@@Classify_Raster_tag0@@": "El dataset ráster que desea clasificar.",
	"@@Classify_Raster2_tag0@@": "Un dataset ráster opcional y complementario que se puede incorporar al clasificador, por ejemplo, una imagen segmentada, una imagen multiespectral o datos de elevación, y que se utiliza para generar una definición de clasificación más sólida para su dataset. El dataset ráster para este parámetro debe coincidir con el utilizado para crear el archivo de definición de clasificador de Esri de entrada.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "Puede utilizar las siguientes opciones para especificar la extensión de recorte:",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Ráster de recorte</strong>: extensión del ráster de recorte",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Extensión personalizada</strong>: coordenadas X e Y mínimas y máximas",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Extensión de mapa actual</strong>: extensión de la visualización del mapa actual",
	"@@Clip_Clipping-Raster_tag0@@": "La capa ráster utilizada para el recorte.",
	"@@Clip_Clipping-Type_tag0@@": "Especifique si desea conservar el área de dentro o fuera de su geometría de recorte.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Recortar dentro</strong>: se eliminarán las imágenes que queden dentro de las extensiones de recorte.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Recortar fuera</strong>: se eliminarán las imágenes que queden fuera de las extensiones de recorte.",
	"@@Clip_Custom-Extent_tag0@@": "Especifica las cuatro coordenadas que definen la extensión del cuadro de delimitación utilizado para recortar el ráster.",
	"@@Clip_Output-Extent_tag0@@": "Las coordenadas x e y de la extensión de recorte actual.",
	"@@Clip_Output-Extent_tag1@@": "El botón <strong>Capturar la extensión de mapa actual</strong> utiliza la extensión de visualización para el mapa activo.",
	"@@Clip_Raster_tag0@@": "La capa ráster de entrada.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "Cuando se selecciona, los datos se recortan según la geometría de la clase de entidad especificada.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Desactivado: la función utiliza la geometría de recorte especificada por <strong>Rectángulo</strong>. Esta es la opción predeterminada.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Activado: la función utiliza la geometría de recorte definida por una clase de entidad.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "El tipo de conversión de color a realizar:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "HSV a RGB",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "RGB a HSV",
	"@@Color-Model-Conversion_Raster_tag0@@": "El ráster de entrada.",
	"@@Colormap_Color-Ramp_tag0@@": "Elija una rampa de color preexistente.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Elija el tipo de esquema de color para renderizar su ráster de entrada",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Rampa de color: usar una rampa de color.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Mapa de color: usar un mapa de color preexistente.",
	"@@Colormap_Colormap_tag0@@": "Están disponibles los siguientes mapas de color predeterminados en la lista desplegable:",
	"@@Colormap_Colormap_tag1@@": "Elevación: un mapa de color que cambia gradualmente de cian a morado y luego a negro.",
	"@@Colormap_Colormap_tag2@@": "Gris: un mapa de color que cambia gradualmente de negro a blanco.",
	"@@Colormap_Colormap_tag7@@": "Sombreado: un mapa de color en escala de grises para visualizar una representación 3D de la superficie del terreno, que tiene en cuenta la posición relativa del sol para sombrear la imagen.",
	"@@Colormap_Colormap_tag3@@": "NDVI: un mapa de color para visualizar la vegetación. Los valores cercanos a cero son azules. Los valores bajos son marrones. A continuación, los colores cambian gradualmente de rojo a naranja, a amarillo, a verde y a negro, a medida que el índice de vegetación pasa de bajo a alto.",
	"@@Colormap_Colormap_tag4@@": "NDVI2: un mapa de color para visualizar la vegetación. Los valores bajos varían de blanco a verde. A continuación, los colores cambian de gris a morado, a violeta, a azul oscuro y a negro, a medida que el índice de vegetación pasa de bajo a alto.",
	"@@Colormap_Colormap_tag5@@": "NDVI3: un mapa de color para visualizar la vegetación. Los valores cercanos a cero son azules. A continuación, los colores cambian gradualmente de rojo a naranja y a verde, a medida que el índice de vegetación pasa de bajo a alto.",
	"@@Colormap_Colormap_tag6@@": "Aleatorio: un mapa de color aleatorio.",
	"@@Colormap_Raster_tag0@@": "El ráster de entrada.",
	"@@Colormap-To-RGB_Raster_tag0@@": "El ráster de mapa de color de entrada.",
	"@@Complex_Raster_tag0@@": "El ráster de entrada.",
	"@@Composite-Bands_Rasters_tag0@@": "Use la lista desplegable o el botón <strong>Examinar</strong> para elegir las entradas de ráster.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Elija el tamaño de celda que desee usar en el ráster de salida.Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.</p><ul><li>Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.</li><li>Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.</li><li>Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.</li><li>Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.</li><li>Último de: utiliza el último tamaño de celda de los rásteres de entrada.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Con-function_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Con-function_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Con-function_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Con-function_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Con-function_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Con_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Con_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Con_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Con_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Con_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Con_False-Raster_tag0@@": "La entrada cuyos valores se utilizan como valores de píxel de salida si la condición es falsa. Puede ser un ráster de punto flotante o entero o un valor constante.",
	"@@Con_Raster_tag0@@": "El ráster de entrada que representa el resultado booleano de una función ráster matemática lógica. Los valores serán 1 (para verdadero) o 0 (para falso). El ráster puede ser un entero o punto flotante.",
	"@@Con_True-Raster_tag0@@": "La entrada cuyos valores se utilizarán como valores de píxel de salida si la condición es verdadera. Puede ser un ráster de punto flotante o entero o un valor constante.",
	"@@Constant_Constant_tag0@@": "El valor de la constante que se agregará al ráster virtual.",
	"@@Constant_Raster-Info_tag0@@": "Utilice el botón <strong>Cargar ráster de plantilla</strong> para cargar una plantilla de un directorio o portal.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "La cantidad de suavizado que se aplicará a la línea de las curvas de nivel. El valor predeterminado es 2,5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "Un valor más bajo produce una línea de curvas de nivel con más granularidad y menos suavizado, mientras que un valor más alto produce una línea de curvas de nivel con más suavizado que aparece menos irregular.",
	"@@Contour_Contour-Interval_tag0@@": "La diferencia de altitud entre las líneas de las curvas de nivel.",
	"@@Contour_Contour-Interval_tag1@@": "En áreas relativamente planas se utiliza un intervalo de curvas de nivel pequeño, mientras que en terrenos variables o montañosos se utilizan intervalos de curvas de nivel más grandes.",
	"@@Contour_Contour-Type_tag0@@": "El tipo de curva de nivel que se creará:",
	"@@Contour_Contour-Type_tag1@@": "<strong>Relleno de curva de nivel</strong>: rellena el área entre cada línea de curva de nivel con el valor de elevación cuantificado.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Líneas de curvas nivel</strong>: se unen puntos con la misma elevación para crear una línea que represente la elevación constante.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Suavizar solo superficie</strong>: suaviza la capa de elevación de entrada, pero no genera curvas de nivel.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "La curva de nivel del índice, que se representa como una línea en negrita.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "El valor predeterminado es 5; por tanto, cada 5ª línea de curva de nivel está en negrita.",
	"@@Contour_Number-Of-Contours_tag0@@": "La cantidad de curvas de nivel que se generarán en la visualización. Esto ajusta dinámicamente el intervalo de las curvas de nivel para adaptarlo al terreno en la visualización, manteniendo intervalos estandarizados como, por ejemplo, 1, 5, 10, etcétera.",
	"@@Contour_Raster_tag0@@": "Un dataset de elevación ráster de una sola banda.",
	"@@Contour_Z-Base_tag0@@": "El valor de la curva de nivel base. Las curvas de nivel se generan por encima y por debajo de este valor según se necesite cubrir el rango de valor completo del ráster de entrada. El valor predeterminado es 0.",
	"@@Contour_Z-Base_tag1@@": "Normalmente, un valor de 0 representa el nivel medio del mar, dependiendo del dataset de elevación de origen.",
	"@@Contour_Z-Factor_tag0@@": "El factor de conversión de la unidad que se utiliza al generar curvas de nivel. El valor predeterminado es 1.",
	"@@Contour_Z-Factor_tag1@@": "Las líneas de curvas de nivel se generan con base en los valores z en el ráster de entrada, que a menudo se miden en unidades de metros o pies. Con el valor predeterminado de 1, las curvas de nivel estarán en las mismas unidades que los valores z del ráster de entrada. Para crear curvas de nivel en una unidad diferente a la de los valores z, establezca un valor adecuado para el factor z. Tenga en cuenta que para esta herramienta no es necesario que las unidades x, y de terreno y z de superficie concuerden.",
	"@@Contour_Z-Factor_tag2@@": "Por ejemplo, si los valores de elevación de su ráster de entrada están en pies, pero desea que las curvas de nivel se generen basándose en unidades en metros, establezca el factor z en 0,3048 (ya que 1 pie = 0,3048 metros).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Ajuste el brillo de la capa ráster.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "Puede utilizar el control deslizante para modificar la compensación de brillo, o también puede escribir un valor.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Ajuste el contraste de la capa ráster.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "Puede utilizar el control deslizante para modificar la compensación de contraste, o también puede escribir un valor.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "El ráster de entrada en el que se editan el brillo y el contraste.",
	"@@Convolution_kernel_tag0@@": "<p>En esta tabla se muestra cómo se ponderará cada píxel en el proceso de filtrado. Esta tabla se puede editar si elige<strong>Definido por el usuario</strong>como<strong>Tipo</strong>.</p>",
	"@@Convolution_Raster_tag0@@": "El dataset ráster de entrada.",
	"@@Convolution_Type_tag0@@": "Seleccione el tipo de filtrado que desee realizar Hay opciones para aumentar la nitidez, difuminar y detectar bordes. También puede definir su propio filtro basado en el kernel",
	"@@Corridor_Distance-Raster-1_tag0@@": "El primer ráster de distancia de entrada. Debería ser una salida de coste-distancia acumulado a partir de Coste-distancia o Distancia de ruta.",
	"@@Corridor_Distance-Raster-2_tag0@@": "El segundo ráster de distancia de entrada. Debería ser una salida de coste-distancia acumulado a partir de Coste-distancia o Distancia de ruta.",
	"@@Cos_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Cos_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Cos_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Cos_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Cos_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Cos_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Cos_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Cos_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Cos_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Cos_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Cos_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Cos_Raster_tag0@@": "La entrada para la cual se calculan los valores del coseno.",
	"@@CosH_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@CosH_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@CosH_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@CosH_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@CosH_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@CosH_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@CosH_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@CosH_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@CosH_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@CosH_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@CosH_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@CosH_Raster_tag0@@": "La entrada para la cual se calculan los valores del coseno hiperbólico.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parámetro simula el aumento del esfuerzo para sobreponerse a los costes a medida que aumenta el coste acumulado. Se utiliza para modelar el cansancio del viajero. El coste acumulado que aumenta para llegar a una celda se multiplica por la tasa de resistencia y se agrega al coste de moverse a la celda siguiente.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Es una versión modificada de una fórmula de tasa de interés compuesto que se usa para calcular el coste aparente de atravesar una celda. A medida que aumenta el valor de la tasa de resistencia, aumenta el coste de las celdas que se visitan más tarde. Cuanto mayor sea la tasa de resistencia, más coste adicional se agregará para llegar a la celda siguiente, un valor que se suma para cada movimiento posterior. Como la tasa de resistencia es similar a una tasa compuesta y normalmente los valores del coste acumulado son muy grandes, es recomendable usar tasas de resistencia pequeñas, como 0,005, o incluso menores, dependiendo de los valores del coste acumulado.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Cost-Allocation_Capacity_tag0@@": "Define la capacidad de coste del viajero para un origen. Los cálculos de coste continúan para cada origen hasta que se alcanza la capacidad especificada.",
	"@@Cost-Allocation_Capacity_tag1@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Cost-Allocation_Capacity_tag2@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "Ráster de entrada obligatorio que define el coste o la impedancia de hacer un movimiento planimétrico a través de cada celda. El valor de cada ubicación de celda representa la distancia de coste por unidad para moverse a través de la celda. Cada valor de ubicación de celda se multiplica por la resolución de la celda, mientras que también se compensa por el movimiento diagonal para obtener el coste total de pasar por la celda.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "Los valores del <strong>Ráster de costes</strong> pueden ser enteros o de punto flotante, pero no pueden ser negativos ni cero.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "El umbral que los valores de coste acumulado no pueden superar. Si un coste-distancia acumulado supera este valor, el valor de salida de la ubicación de la celda será ${NoData}. La distancia máxima define la extensión por la cual se calculan las distancias de coste acumulado. La distancia predeterminada es hasta la extensión del ráster de salida.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Un multiplicador que se debe aplicar a los valores de coste.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Este parámetro permite controlar el modo de desplazamiento o la magnitud en un origen. Cuanto mayor sea el multiplicador, mayor será el coste de moverse a través de cada celda.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Los valores deben ser mayores que cero. El valor predeterminado es 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Cost-Allocation_Source-Field_tag0@@": "El campo que se utiliza para asignar los valores a las ubicaciones de origen. Debe ser de tipo entero. Si el <strong>Ráster de valor</strong> se ha establecido, los valores de esa entrada tendrán prioridad sobre cualquier configuración del <strong>Campo de origen</strong>.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "El ráster de entrada obligatorio de las ubicaciones de origen.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Es un ráster que identifica las celdas o las ubicaciones desde las que se calcula el menor coste-distancia acumulado para cada ubicación de celda de salida.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "Si el <strong>Ráster de origen</strong> de entrada es de punto flotante, se debe definir el <strong>Ráster de valor</strong> y debe ser un entero. El <strong>Ráster de valor</strong> tendrá prioridad sobre cualquier ajuste del <strong>Campo de origen</strong>.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "El coste de inicio a partir del cual empezarán los cálculos del coste. Este parámetro permite especificar el coste fijo asociado a un origen. En lugar de empezar con un coste de 0, el algoritmo de coste empezará con el valor especificado.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "El valor debe ser mayor o igual que cero. El valor predeterminado es 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Define la dirección del viajero cuando se aplica la tasa de resistencia en origen y el coste inicial en origen.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>Desde origen</strong>: la tasa de resistencia en origen y el coste inicial en origen se aplicarán empezando en el origen de entrada y avanzando hacia las celdas que no pertenezcan al origen. Esta es la opción predeterminada.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>A origen</strong>: la tasa de resistencia en origen y el coste inicial en origen se aplicarán empezando por cada celda que no pertenezca al origen y regresando al origen de entrada.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Especifique la palabra clave <strong>De origen</strong> o <strong>A origen</strong> que se aplicará a todos los orígenes o especifique un campo en el <strong>Ráster de origen</strong> que contenga las palabras clave para identificar la dirección de desplazamiento de cada origen. Ese campo debe contener la cadena de caracteres ${FROM_SOURCE} o ${TO_SOURCE}.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "Ráster entero de entrada que identifica los valores de la zona que se deben utilizar para cada ubicación de origen de entrada. En cada celda de ubicación de origen, el valor definido por el <strong>Ráster de valor</strong> se asignará a todas las celdas asignadas a la ubicación de origen para el cómputo. El <strong>Ráster de valor</strong> tendrá prioridad sobre cualquier ajuste para el <strong>Campo de origen</strong>.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parámetro simula el aumento del esfuerzo para sobreponerse a los costes a medida que aumenta el coste acumulado. Se utiliza para modelar el cansancio del viajero. El coste acumulado que aumenta para llegar a una celda se multiplica por la tasa de resistencia y se agrega al coste de moverse a la celda siguiente.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Es una versión modificada de una fórmula de tasa de interés compuesto que se usa para calcular el coste aparente de atravesar una celda. A medida que aumenta el valor de la tasa de resistencia, aumenta el coste de las celdas que se visitan más tarde. Cuanto mayor sea la tasa de resistencia, más coste adicional se agregará para llegar a la celda siguiente, un valor que se suma para cada movimiento posterior. Como la tasa de resistencia es similar a una tasa compuesta y normalmente los valores del coste acumulado son muy grandes, es recomendable usar tasas de resistencia pequeñas, como 0,005, o incluso menores, dependiendo de los valores del coste acumulado.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Define la capacidad de coste del viajero para un origen. Los cálculos de coste continúan para cada origen hasta que se alcanza la capacidad especificada.",
	"@@Cost-Back-Link_Capacity_tag1@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Cost-Back-Link_Capacity_tag2@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "Ráster de entrada obligatorio que define el coste o la impedancia de hacer un movimiento planimétrico a través de cada celda. El valor de cada ubicación de celda representa la distancia de coste por unidad para moverse a través de la celda. Cada valor de ubicación de celda se multiplica por la resolución de la celda, mientras que también se compensa por el movimiento diagonal para obtener el coste total de pasar por la celda.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "Los valores del <strong>Ráster de costes</strong> pueden ser enteros o de punto flotante, pero no pueden ser negativos ni cero.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "El umbral que los valores de coste acumulado no pueden superar. Si un coste-distancia acumulado supera este valor, el valor de salida de la ubicación de la celda será NoData. La distancia máxima define la extensión por la cual se calculan las distancias de coste acumulado. La distancia predeterminada es hasta la extensión del ráster de salida.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Un multiplicador que se debe aplicar a los valores de coste.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Este parámetro permite controlar el modo de desplazamiento o la magnitud en un origen. Cuanto mayor sea el multiplicador, mayor será el coste de moverse a través de cada celda.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Los valores deben ser mayores que cero. El valor predeterminado es 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "El ráster de entrada obligatorio de las ubicaciones de origen.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Es un ráster que identifica las celdas o las ubicaciones desde las que se calcula el menor coste-distancia acumulado para cada ubicación de celda de salida.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "El coste de inicio a partir del cual empezarán los cálculos del coste. Este parámetro permite especificar el coste fijo asociado a un origen. En lugar de empezar con un coste de 0, el algoritmo de coste empezará con el valor especificado.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "El valor debe ser mayor o igual que cero. El valor predeterminado es 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Define la dirección del viajero cuando se aplica la tasa de resistencia en origen y el coste inicial en origen.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>Desde origen</strong>: la tasa de resistencia en origen y el coste inicial en origen se aplicarán empezando en el origen de entrada y avanzando hacia las celdas que no pertenezcan al origen. Esta es la opción predeterminada.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>A origen</strong>: la tasa de resistencia en origen y el coste inicial en origen se aplicarán empezando por cada celda que no pertenezca al origen y regresando al origen de entrada.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Especifique la palabra clave <strong>De origen</strong> o <strong>A origen</strong> que se aplicará a todos los orígenes o especifique un campo en el <strong>Ráster de origen</strong> que contenga las palabras clave para identificar la dirección de desplazamiento de cada origen. Ese campo debe contener la cadena de caracteres ${FROM_SOURCE} o ${TO_SOURCE}.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parámetro simula el aumento del esfuerzo para sobreponerse a los costes a medida que aumenta el coste acumulado. Se utiliza para modelar el cansancio del viajero. El coste acumulado que aumenta para llegar a una celda se multiplica por la tasa de resistencia y se agrega al coste de moverse a la celda siguiente.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Es una versión modificada de una fórmula de tasa de interés compuesto que se usa para calcular el coste aparente de atravesar una celda. A medida que aumenta el valor de la tasa de resistencia, aumenta el coste de las celdas que se visitan más tarde. Cuanto mayor sea la tasa de resistencia, más coste adicional se agregará para llegar a la celda siguiente, un valor que se suma para cada movimiento posterior. Como la tasa de resistencia es similar a una tasa compuesta y normalmente los valores del coste acumulado son muy grandes, es recomendable usar tasas de resistencia pequeñas, como 0,005, o incluso menores, dependiendo de los valores del coste acumulado.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Cost-Distance_Capacity_tag0@@": "Define la capacidad de coste del viajero para un origen. Los cálculos de coste continúan para cada origen hasta que se alcanza la capacidad especificada.",
	"@@Cost-Distance_Capacity_tag1@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Cost-Distance_Capacity_tag2@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "Ráster de entrada obligatorio que define el coste o la impedancia de hacer un movimiento planimétrico a través de cada celda. El valor de cada ubicación de celda representa la distancia de coste por unidad para moverse a través de la celda. Cada valor de ubicación de celda se multiplica por la resolución de la celda, mientras que también se compensa por el movimiento diagonal para obtener el coste total de pasar por la celda.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "Los valores del <strong>Ráster de costes</strong> pueden ser enteros o de punto flotante, pero no pueden ser negativos ni cero.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "El umbral que los valores de coste acumulado no pueden superar. Si un coste-distancia acumulado supera este valor, el valor de salida de la ubicación de la celda será NoData. La distancia máxima define la extensión por la cual se calculan las distancias de coste acumulado. La distancia predeterminada es hasta la extensión del ráster de salida.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Un multiplicador que se debe aplicar a los valores de coste.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Este parámetro permite controlar el modo de desplazamiento o la magnitud en un origen. Cuanto mayor sea el multiplicador, mayor será el coste de moverse a través de cada celda.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Los valores deben ser mayores que cero. El valor predeterminado es 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Cost-Distance_Source-Raster_tag0@@": "El ráster de entrada obligatorio de las ubicaciones de origen.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Es un ráster que identifica las celdas o las ubicaciones desde las que se calcula el menor coste-distancia acumulado para cada ubicación de celda de salida.",
	"@@Cost-Distance_Start-Cost_tag0@@": "El coste de inicio a partir del cual empezarán los cálculos del coste. Este parámetro permite especificar el coste fijo asociado a un origen. En lugar de empezar con un coste de 0, el algoritmo de coste empezará con el valor especificado.",
	"@@Cost-Distance_Start-Cost_tag1@@": "El valor debe ser mayor o igual que cero. El valor predeterminado es 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Define la dirección del viajero cuando se aplica la tasa de resistencia en origen y el coste inicial en origen.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>Desde origen</strong>: la tasa de resistencia en origen y el coste inicial en origen se aplicarán empezando en el origen de entrada y avanzando hacia las celdas que no pertenezcan al origen. Esta es la opción predeterminada.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>A origen</strong>: la tasa de resistencia en origen y el coste inicial en origen se aplicarán empezando por cada celda que no pertenezca al origen y regresando al origen de entrada.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Especifique la palabra clave <strong>De origen</strong> o <strong>A origen</strong> que se aplicará a todos los orígenes o especifique un campo en el <strong>Ráster de origen</strong> que contenga las palabras clave para identificar la dirección de desplazamiento de cada origen. Ese campo debe contener la cadena de caracteres ${FROM_SOURCE} o ${TO_SOURCE}.",
	"@@Curvature_Curvature-Type_tag0@@": "El tipo de curvatura acentúa diversos aspectos de la pendiente. Hay tres opciones de curvatura:",
	"@@Curvature_Curvature-Type_tag1@@": "Plano: es perpendicular a la dirección de la pendiente máxima. Afecta a la convergencia y divergencia del flujo por la superficie.",
	"@@Curvature_Curvature-Type_tag2@@": ": es paralela a la pendiente e indica la dirección de pendiente máxima. Afecta a la aceleración y desaceleración del flujo por la superficie.",
	"@@Curvature_Curvature-Type_tag3@@": "Estándar: combina las dos curvaturas de <strong>Perfil</strong> y de <strong>Plano</strong>.",
	"@@Curvature_DEM_tag0@@": "Ráster de un modelo digital de elevación (DEM).",
	"@@Curvature_Z-Factor_tag0@@": "El factor z ajusta las unidades de medida para las unidades z cuando son diferentes de las unidades x, y de la superficie de entrada. Si las unidades z y las unidades x,y están en las mimas unidades de medida, el factor z debe estar establecido en 1. Los valores z de la superficie de entrada se multiplican por el factor z al calcular la superficie de salida final. Por ejemplo, si las unidades z son pies y las unidades x,y son metros, debe utilizar un factor z de 0,3048 para convertir las unidades z de pies a metros, ya que 1 pie = 0,3048 metros.",
	"@@Divide_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Divide_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Divide_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Divide_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Divide_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Divide_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Divide_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Divide_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Divide_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Divide_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Divide_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Divide_Raster_tag0@@": "La entrada cuyo valor se dividirá por la segunda entrada.",
	"@@Divide_Raster_tag1@@": "Se puede utilizar un número como entrada para este parámetro, siempre que se especifique un ráster para ${Raster2}.",
	"@@Divide_Raster2_tag0@@": "La entrada por cuyo valor se dividirá la primera entrada.",
	"@@Divide_Raster2_tag1@@": "Se puede utilizar un número como entrada para este parámetro, siempre que se especifique un ráster para ${Raster}.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "El DEM de entrada.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "El valor de ancho máximo de vacío se utiliza para especificar el tamaño más grande de un vacío que desea rellenar. Si el peso o la altura del cuadro de límite alrededor del vacío es mayor que el valor de ancho máximo de vacío, el vacío no se llena. Las unidades de este parámetro son las mismas que se utilizan en el sistema de referencia espacial de sus datos.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Si este parámetro está vacío o tiene el valor ${0}, no se utilizará el ancho máximo y los vacíos se rellenarán. Un valor de ${-1} significa que no se rellenarán los vacíos.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "El radio de búsqueda máximo que se usará para llenar vacíos. Un vacío que esté más lejos de cualquier píxel válido que este valor de umbral se mantendrá como vacío. Las unidades de este parámetro son las mismas que se utilizan en el sistema de referencia espacial de sus datos.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Si el valor de este parámetro está en blanco, es ${0} o ${-1}, no se usará este parámetro.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Equal-to_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Equal-to_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Equal-to_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Equal-to_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Equal-to_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Equal-to_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Equal-to_Raster_tag0@@": "La entrada que la segunda entrada usará para la comparación de igualdad.",
	"@@Equal-to_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Equal-to_Raster2_tag0@@": "La entrada que la primera entrada usará para la comparación de igualdad.",
	"@@Equal-to_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "El tamaño de celda con el que se creará el ráster de salida.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Si el tamaño de celda se ha definido explícitamente en <strong>Entornos de análisis</strong>, ese será el tamaño de celda predeterminado. Si no se definió, el tamaño de celda de salida coincidirá con el del <strong>Ráster de origen</strong>.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Determina si la distancia se calcula basándose en un método planar (Tierra plana) o geodésico (elipsoide).",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Geodésico: la línea más corta entre dos puntos en la superficie terrestre de un esferoide (elipsoide). Por lo tanto, independientemente de la proyección de entrada o salida, los resultados no cambian. Determinar la distancia más corta entre dos ciudades para la ruta de vuelo de un avión es uno de los usos de una línea geodésica. También se la conoce como línea de círculo grande si está basada en una esfera, en lugar de un elipsoide.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Planar: las mediciones de tipo planar usan matemáticas cartesianas 2D para calcular la longitud y el área. Esta opción solo está disponible cuando se toman medidas en un sistema de coordenadas proyectadas y el plano 2D de ese sistema de coordenadas se utiliza como base para las mediciones.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Define la distancia de umbral dentro de la cual se determinará el origen más cercano. Si la distancia hasta el origen más cercano la supera, la salida de esa celda será ${NoData}.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "La distancia predeterminada es hasta la extensión del ráster de salida.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "El ráster que define las barreras.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "El dataset debe contener ${NoData} donde no haya barreras. Las barreras se representan mediante valores válidos, incluido el cero.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "Las barreras pueden definirse mediante un ráster entero o de punto flotante.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "El campo que se utiliza para asignar los valores a las ubicaciones de origen. Debe ser de tipo entero. Si el <strong>Ráster de valor</strong> se ha establecido, los valores de esa entrada tendrán prioridad sobre cualquier configuración del <strong>Campo de origen</strong>.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "Un ráster de entrada obligatorio que identifica las ubicaciones de origen. El origen más cercano se determinará para cada celda en la salida en función de la distancia euclidiana",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "El tipo de entrada puede ser un valor de tipo entero o de punto flotante.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "Ráster entero de entrada que identifica los valores de la zona que se deben utilizar para cada ubicación de origen de entrada. En cada celda de ubicación de origen, el valor definido por el <strong>Ráster de valor</strong> se asignará a todas las celdas asignadas a la ubicación de origen para el cómputo. El <strong>Ráster de valor</strong> tendrá prioridad sobre cualquier ajuste para el <strong>Campo de origen</strong>.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "El tamaño de celda con el que se creará el ráster de salida.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Si el tamaño de celda se ha definido explícitamente en <strong>Entornos de análisis</strong>, ese será el tamaño de celda predeterminado. Si no se definió, el tamaño de celda de salida coincidirá con el del <strong>Ráster de origen</strong>.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Determina si la distancia se calcula basándose en un método planar (Tierra plana) o geodésico (elipsoide).",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Geodésico: la línea más corta entre dos puntos en la superficie terrestre de un esferoide (elipsoide). Por lo tanto, independientemente de la proyección de entrada o salida, los resultados no cambian. Determinar la distancia más corta entre dos ciudades para la ruta de vuelo de un avión es uno de los usos de una línea geodésica. También se la conoce como línea de círculo grande si está basada en una esfera, en lugar de un elipsoide.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Planar: las mediciones de tipo planar usan matemáticas cartesianas 2D para calcular la longitud y el área. Esta opción solo está disponible cuando se toman medidas en un sistema de coordenadas proyectadas y el plano 2D de ese sistema de coordenadas se utiliza como base para las mediciones.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Define la distancia de umbral dentro de la cual se calculará la dirección hasta el origen más cercano. Si la distancia hasta el origen más cercano la supera, la salida de esa celda será ${NoData}.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "La distancia predeterminada es hasta la extensión del ráster de salida.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "El ráster que define las barreras.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "El dataset debe contener NoData donde no haya barreras. Las barreras se representan mediante valores válidos, incluido el cero.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "Las barreras pueden definirse mediante un ráster entero o de punto flotante.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "Un ráster de entrada obligatorio que identifica las celdas o las ubicaciones para las cuales se calcula la dirección euclidiana de cada ubicación de celda de salida.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "El tipo de entrada puede ser un valor de tipo entero o de punto flotante.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "El tamaño de celda con el que se creará el ráster de salida.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Si el tamaño de celda se ha definido explícitamente en <strong>Entornos de análisis</strong>, ese será el tamaño de celda predeterminado. Si no se definió, el tamaño de celda de salida coincidirá con el del <strong>Ráster de origen</strong>.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Determina si la distancia se calcula basándose en un método planar (Tierra plana) o geodésico (elipsoide).",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Geodésico: la línea más corta entre dos puntos en la superficie terrestre de un esferoide (elipsoide). Por lo tanto, independientemente de la proyección de entrada o salida, los resultados no cambian. Determinar la distancia más corta entre dos ciudades para la ruta de vuelo de un avión es uno de los usos de una línea geodésica. También se la conoce como línea de círculo grande si está basada en una esfera, en lugar de un elipsoide.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Planar: las mediciones de tipo planar usan matemáticas cartesianas 2D para calcular la longitud y el área. Esta opción solo está disponible cuando se toman medidas en un sistema de coordenadas proyectadas y el plano 2D de ese sistema de coordenadas se utiliza como base para las mediciones.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "El umbral que los valores de distancia acumulada no pueden superar. Si una distancia euclidiana acumulada supera este valor, el valor de salida de la ubicación de la celda será NoData.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "La distancia predeterminada es hasta la extensión del ráster de salida.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "El ráster que define las barreras.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "El dataset debe contener ${NoData} donde no haya barreras. Las barreras se representan mediante valores válidos, incluido el cero.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "Las barreras pueden definirse mediante un ráster entero o de punto flotante.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "El ráster de entrada obligatorio que identifica las celdas o las ubicaciones para las cuales se calcula la distancia euclidiana de cada ubicación de celda de salida.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "El tipo de entrada puede ser un valor de tipo entero o de punto flotante.",
	"@@Exp_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Exp_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Exp_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Exp_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Exp_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Exp_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Exp_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Exp_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Exp_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Exp_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Exp_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Exp_Raster_tag0@@": "Los valores de entrada para los que buscará el exponencial base e.",
	"@@Exp10_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Exp10_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Exp10_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Exp10_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Exp10_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Exp10_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Exp10_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Exp10_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Exp10_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Exp10_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Exp10_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Exp10_Raster_tag0@@": "Los valores de entrada de los que hay que encontrar el exponencial base 10.",
	"@@Exp2_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Exp2_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Exp2_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Exp2_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Exp2_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Exp2_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Exp2_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Exp2_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Exp2_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Exp2_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Exp2_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Exp2_Raster_tag0@@": "Los valores de entrada de los que hay que encontrar el exponencial en base 2.",
	"@@Extract-Bands_Band_tag0@@": "Seleccione las bandas que desea extraer de una lista basada en la opción del parámetro <strong>Método</strong> que se utilice.",
	"@@Extract-Bands_Combination_tag0@@": "El orden o combinación de bandas. La lista de selección depende de la opción de <strong>Método</strong> especificada. Por ejemplo, si <strong>Método</strong> es <strong>Nombres de banda</strong>, puede seleccionar una combinación de azul, verde y rojo para extraer una imagen con un color natural.",
	"@@Extract-Bands_Method_tag0@@": "Seleccione uno de los siguientes métodos para extraer bandas:",
	"@@Extract-Bands_Method_tag1@@": "<strong>Id. de banda</strong>: el número o designación de banda, exclusivo de cada sensor. Pueden los mismos que los <strong>Nombres de banda</strong>.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Nombres de banda</strong>: utiliza el nombre de banda que representa el intervalo de longitud de onda en el espectro electromagnético (por ejemplo, rojo, infrarrojo cercano, infrarrojo térmico). También se puede designar como Id. de número de banda.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Longitudes de onda de bandas</strong>: la longitud de onda del espectro electromagnético.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Especifique la acción que se producirá cuando una banda de la lista de banda de extracción no esté disponible.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Mejor coincidencia</strong>: busca la mejor banda disponible para utilizarla en lugar de la banda que falta según la longitud de onda, para que la función no genere un error.",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Error</strong>: si en el dataset de entrada falta alguna banda que se haya especificado en el parámetro <strong>Banda</strong>, la función fallará.",
	"@@Extract-Bands_Raster_tag0@@": "El producto ráster del que se extraerán las bandas.",
	"@@Fill_Raster_tag0@@": "Un ráster de elevación de una sola banda.",
	"@@Fill_Z-Limit_tag0@@": "La diferencia máxima de elevación entre un sumidero y su punto de fluidez a rellenar.",
	"@@Fill_Z-Limit_tag1@@": "Si no se especifica un valor para este parámetro, todos los sumideros se llenarán independientemente de la profundidad.",
	"@@Fill_Z-Limit_tag2@@": "El valor de <strong>Límite Z</strong> debe ser mayor que cero.",
	"@@Float_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Float_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Float_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Float_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Float_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Float_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Float_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Float_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Float_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Float_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Float_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Float_Raster_tag0@@": "El ráster de entrada que se va a convertir a punto flotante.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "Ráster de entrada que muestra la dirección del flujo de cada celda.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "El ráster de dirección de flujo se puede crear ejecutando la función <strong>Dirección de flujo</strong>.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Define el tipo del ráster de dirección del flujo de entrada.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong>: el ráster de dirección del flujo de entrada es de tipo D8. Esta es la opción predeterminada.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>: el ráster de dirección del flujo de entrada es de tipo D-Infinity (DINF).",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>: el ráster de dirección del flujo de entrada es de tipo Dirección del flujo múltiple (MFD).",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "El ráster de acumulación de salida puede ser de tipo entero o punto flotante.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Flotante</strong>: el ráster de salida será de tipo punto flotante. Esta es la opción predeterminada.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Entero</strong>: el ráster de salida será de tipo entero.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "Un ráster de entrada opcional para aplicar un peso a cada píxel.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Si no se especifica ningún ráster de peso, se aplica un peso predeterminado de 1 a cada píxel.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Define el tipo del ráster de dirección del flujo de entrada.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong>: el ráster de dirección del flujo de entrada es de tipo D8. Esta es la opción predeterminada.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>: el ráster de dirección del flujo de entrada es de tipo D-Infinity (DINF).",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>: el ráster de dirección del flujo de entrada es de tipo Dirección del flujo múltiple (MFD).",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Especifica si los píxeles del borde se desplazarán siempre hacia fuera o seguirán las reglas de flujo normales.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>No</strong>: si la caída máxima del interior del píxel de un borde es mayor que cero, la dirección de flujo se determinará de la forma habitual; de lo contrario, la dirección de flujo será hacia el borde. Los píxeles que deben fluir desde el borde del ráster de superficie hacia dentro lo harán. Esta es la opción predeterminada.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Sí</strong>: todos los píxeles del borde del ráster de superficie fluirán hacia fuera del ráster de superficie.",
	"@@Flow-Direction_Raster_tag0@@": "El ráster de entrada representa una superficie de elevación continua.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Determina si se calcula el componente vertical u horizontal de la distancia de flujo.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Horizontal</strong>: los cálculos de distancia de flujo representan el componente horizontal de la distancia de flujo desde cada píxel del dominio hasta los píxeles del curso de agua hacia el que fluyen.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Vertical</strong>: los cálculos de distancia de flujo representan el componente vertical de la distancia de flujo desde cada píxel del dominio hasta los píxeles del curso de agua hacia el que fluyen. Esta es la opción predeterminada.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "El ráster de entrada que muestra la dirección de flujo fuera de cada píxel.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "Si se proporciona un ráster de dirección de flujo opcional, las direcciones de pendiente descendente se limitarán a aquellas definidas por las direcciones del flujo de entrada.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "El ráster de dirección de flujo se puede crear con la función Dirección de flujo.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Define el tipo del ráster de dirección del flujo de entrada.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong>: el ráster de dirección del flujo de entrada es de tipo D8. Esta es la opción predeterminada.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>: el ráster de dirección del flujo de entrada es de tipo D-Infinity (DINF).",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>: el ráster de dirección del flujo de entrada es de tipo Dirección del flujo múltiple (MFD).",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Determina el tipo de estadísticas usadas para calcular la distancia del flujo a lo largo de varias rutas de flujo. Si tan solo existe una única ruta de flujo desde cada celda a otra celda del curso de agua, todos los tipos de estadísticas generarán el mismo resultado.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Mínimo</strong>: si existen varias rutas de flujo, se calcula la distancia de flujo mínima. Esta es la opción predeterminada.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Media ponderada</strong>: si existen varias rutas de flujo, se calcula la distancia de flujo media ponderada. La proporción del flujo desde una celda hasta las celdas vecinas aguas abajo se usa como ponderaciones para calcular la media ponderada.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Máxima</strong>: si existen varias rutas de flujo, se calcula la distancia de flujo máxima.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "Un ráster de curso de agua de entrada que representa una red de curso de agua lineal.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "El ráster de entrada representa una superficie de elevación continua.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "La dirección de medición a lo largo de la ruta de flujo.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong> Aguas abajo</strong>: calcula la distancia de la pendiente descendente a lo largo de la ruta de flujo, desde cada celda hasta un sumidero o salida en el eje del ráster.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>Aguas arriba</strong>: calcula la distancia más larga de la pendiente ascendente a lo largo de la ruta de flujo, desde cada celda hasta la parte superior de la división del drenaje.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "Ráster de entrada que muestra la dirección del flujo de cada celda.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "El ráster de dirección de flujo se puede crear ejecutando la función <strong>Dirección de flujo</strong>.",
	"@@Flow-Length_Weight-Raster_tag0@@": "Ráster de entrada opcional para aplicar un peso en cada celda.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Si no se especifica ningún ráster de peso, se aplicará un peso predeterminado de 1 a cada celda.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Indica si los valores ${NoData} se ignorarán en el cálculo de la estadística.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Activado</strong>: especifica que si existe un valor ${NoData} dentro de una vecindad, este se ignorará. Para determinar el valor de salida solo se utilizarán las celdas dentro de la vecindad que contengan valores de datos. Esta es la opción predeterminada.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Desactivado</strong>: especifica que si cualquier celda de una vecindad tiene el valor de ${NoData}, la salida de la celda de procesamiento será ${NoData}.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "La forma del área alrededor de cada celda utilizada para calcular la estadística.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Cada vecindad tiene parámetros adicionales con los que definir la forma.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Anillo, Radio interno, Radio externo",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Círculo, Radio",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Valores de Irregular, Ancho, Altura, Vecindad",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Rectángulo, Ancho, Altura",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Porción de círculo, Radio, Ángulo de inicio, Ángulo de finalización",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Valores de Peso, Ancho, Altura, Vecindad",
	"@@Focal-Statistics_Neighborhood_tag8@@": "La vecindad Irregular permite especificar una vecindad de forma irregular alrededor de la celda de procesamiento. Utilice la tabla de valores Vecindad para definir la forma del kernel de vecindad. Un valor de 0 para una posición de celda indica que la celda no es parte de la vecindad y no se utilizará para el procesamiento. Un valor de 1 indica que la celda correspondiente (y valor) es un miembro de la vecindad.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "La vecindad Peso es similar al tipo de vecindad irregular, la vecindad de peso permite definir una vecindad irregular alrededor de la celda de procesamiento, pero además permite aplicar pesos a los valores de entrada. Los valores del archivo kernel de peso especifica qué posiciones de celda se deben incluir dentro de la vecindad y los pesos por los que se multiplicarán. Utilice un valor de 0 para excluir una celda del procesamiento. Los valores positivos, negativos y decimales son todas opciones válidas para utilizar como peso. Para la vecindad de tipo Peso, solo se admiten las estadísticas Valor medio, Desviación estándar o Suma.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Denota el percentil que se debe calcular cuando <strong>Percentil</strong> está seleccionado como el tipo de estadística. El valor predeterminado es 90, para el 90.º percentil.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "Los valores pueden variar de 0 a 100. El 0.º percentil equivale en esencia a la estadística Mínimo, mientras que el 100.º percentil equivale a la estadística Máximo, con la excepción de que el resultado será de punto flotante. Un valor de 50 generará en esencia el mismo resultado que la estadística Mediana.",
	"@@Focal-Statistics_Raster_tag0@@": "El ráster de entrada obligatorio.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "El tipo de estadística que se calculará.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Mayoría</strong>: calcula la mayoría (valor que se produce con mayor frecuencia) de las celdas en la vecindad.",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Máximo</strong>: calcula el máximo (valor superior) de las celdas en la vecindad.",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Valor medio</strong>: calcula la media (valor medio) de las celdas en la vecindad.",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Mediana</strong>: calcula la mediana de las celdas en la vecindad.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Mínimo</strong>: calcula el mínimo (valor inferior) de las celdas en la vecindad.",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Minoría</strong>: calcula la minoría (valor que se produce con menor frecuencia) de las celdas en la vecindad.",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Percentil</strong>: calcula un percentil de las celdas en la vecindad. Puede determinar el percentil que se va a calcular con el parámetro <strong>Valor de percentil</strong>.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Rango</strong>: calcula el rango (diferencia entre los valores superior e inferior) de las celdas en la vecindad.",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Desviación estándar</strong>: calcula la desviación estándar de las celdas en la vecindad.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Suma</strong>: calcula la suma (total de todos los valores) de las celdas en la vecindad.",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Variedad</strong>: calcula la variedad (el número de valores únicos) de las celdas en la vecindad.",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Si el ráster de entrada es de punto flotante, solo están disponibles los tipos de estadísticas Valor medio, Máximo, Mediana, Mínimo, Percentil, Rango, Desviación estándar y Suma.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "Para Valor medio, Mediana, Percentil y Desviación estándar, la salida es siempre de punto flotante.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "El tipo de estadísticas por defecto es el valor medio.",
	"@@Geometric_Constant-Z_tag0@@": "Especifique una elevación constante para utilizar en la función Geométrica.",
	"@@Geometric_DEM_tag0@@": "Especifique el DEM que se va a usar en la función Geométrica. Puede utilizar un DEM incluido en el dataset de mosaico o uno almacenado como un dataset ráster o un dataset de mosaico cuya salida sea un DEM.",
	"@@Geometric_Geoid_tag0@@": "La mayoría de los datasets de elevación como, por ejemplo, USGS NED o ArcGIS Online World Elevation, son alturas ortométricas, por lo que es necesario seleccionar la corrección Geoide para garantizar la compatibilidad con los RPC de satélite, que requieren alturas elipsoidales. Marque la casilla de verificación <strong>Geoide</strong> para aplicar la corrección geoide /EGM96) a los valores z salvo que el DEM ya se refiera a alturas elipsoidales.",
	"@@Geometric_Method_tag0@@": "Elija el método de elevación para la función Geométrica:",
	"@@Geometric_Method_tag1@@": ": especifique una elevación constante para realizar la función Geométrica.",
	"@@Geometric_Method_tag2@@": "Usar DEM: especifique un DEM para realizar la función Geométrica.",
	"@@Geometric_Raster_tag0@@": "El ráster de entrada.",
	"@@Geometric_Z-Factor_tag0@@": "Los coeficientes polinómicos racionales de satélite (RPC) están escalados para datasets de elevación con las unidades verticales en metros. Si la elevación utiliza otras unidades verticales, introduzca un <strong>Factor z</strong> para ajustar la escala a metros. Por ejemplo, si las unidades de elevación se expresan en pies, deberá usar un valor de 0,3048 para convertir las unidades de elevación de pies a metros.",
	"@@Geometric_Z-Offset_tag0@@": "El valor básico que se agregará al valor de elevación en el DEM. Este se puede utilizar para desplazar los valores de elevación que no comienzan a nivel del mar.",
	"@@Geometric_Tolerance_tag0@@": "Especifique el error máximo tolerable en la función geométrica, en número de píxeles. El valor predeterminado del tipo de ráster NITF (NCDRD) es dos.",
	"@@Grayscale_Raster_tag0@@": "El ráster de entrada.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "Los pesos de cada una de las bandas que comprende el ráster de entrada.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Greater-Than_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Greater-Than_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Greater-Than_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Greater-Than_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Greater-Than_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Greater-Than_Raster_tag0@@": "La entrada a probar para determinar si es mayor que la segunda entrada.",
	"@@Greater-Than_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Greater-Than_Raster2_tag0@@": "La entrada con la que se prueba la primera entrada para ver si es mayor.",
	"@@Greater-Than_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Greater-Than-Equal_Raster_tag0@@": "La entrada que se prueba para determinar si es mayor o igual que la segunda entrada.",
	"@@Greater-Than-Equal_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "La entrada con la que se prueba la primera entrada para ver si es mayor o igual.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "La unidad de medida asociada al ráster de salida. Las unidades de salida disponibles son Celsius, Fahrenheit y Kelvin.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "Ráster de una única banda en el que los valores de los píxeles representan la humedad relativa como un valor de porcentaje entre 0 y 100.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "Un ráster de una única banda en el que los valores de píxeles representan la temperatura ambiente del aire.",
	"@@Heat-Index_Temperature-Units_tag0@@": "La unidad de medida asociada al ráster de temperatura de entrada. Las unidades de entrada disponibles son Celsius, Fahrenheit y Kelvin.",
	"@@Hillshade_Altitude_tag0@@": "La altitud es el ángulo de elevación del sol sobre el horizonte y varía entre 0 y 90 grados. Un valor de 0 grados indica que el sol se encuentra en el horizonte, es decir, en el mismo plano horizontal que el marco de referencia. Un valor de 90 grados indica que el sol está directamente sobre la cabeza.",
	"@@Hillshade_Altitude_tag1@@": "Este parámetro solo es válido cuando <strong>Tipo de sombreado</strong> es <strong>Tradicional</strong>. El valor predeterminado es 45 grados por encima del horizonte.",
	"@@Hillshade_Azimuth_tag0@@": "El acimut es la posición relativa del sol a lo largo del horizonte (en grados). Esta posición la indica el ángulo del sol que se mide en sentido de las agujas del reloj desde el Norte. Un acimut de 0 grados indica el Norte, el Este está a los 90 grados, el Sur a los 180 grados y el Oeste a los 270 grados.",
	"@@Hillshade_Azimuth_tag1@@": "Este parámetro solo es válido cuando <strong>Tipo de sombreado</strong> es <strong>Tradicional</strong>. El valor predeterminado es de 315 grados, es decir, desde el noroeste.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "Al usar esta opción se evitan los artefactos de remuestreo que pueden producirse en los bordes de un ráster. Los píxeles de salida situados a lo largo del borde de un ráster o adyacentes a píxeles NoData se llenarán con NoData; por tanto, es recomendable que esta opción solo se use con datasets de mosaico de elevación que tengan superposiciones. Cuando haya píxeles superpuestos disponibles, estas áreas de NoData mostrarán los valores de píxeles superpuestos en lugar de píxeles en blanco.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Desactivado: el remuestreo bilineal se aplicará de manera uniforme para remuestrear el sombreado. Use esta opción cuando el dataset de mosaico que contiene los datos ráster de elevación se unan por los extremos. Esta es la opción predeterminada.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Activado: el remuestreo bilineal se usará en el sombreado, excepto a lo largo de los bordes de los rásteres o junto a los píxeles NoData. Estos píxeles se llenarán con NoData y mostrarán los valores de los píxeles superpuestos, lo que reducirá los efectos de bordes agudos que podrían producirse si no se llenaran. Use esta opción cuando el dataset de mosaico que contiene los datos ráster de elevación se componga de elementos o teselas superpuestos.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "Los resultados de la función pueden depender de los datos. Si observa artefactos de límite de teselas en la salida, seleccione el otro estado de la casilla de verificación.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Controla la fuente de iluminación del sombreado:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Tradicional: calcula el sombreado desde una única dirección de iluminación. Esta es la opción predeterminada. Puede definir el <strong>Acimut</strong> y la <strong>Altitud</strong> para controlar la ubicación de la fuente de luz.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Multidireccional: combina luz de varias fuentes para representar una visualización mejorada del terreno.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "Factor de tamaño de píxel refleja los cambios de escala a medida que el visor se acerca y se aleja en la visualización del mapa. Controla la velocidad a la que cambia el <strong>Factor Z</strong>.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Este parámetro solo es válido cuando el tipo de <strong>Escalado</strong> es <strong>Ajustado</strong>. El valor predeterminado es 0,024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "Potencia del tamaño de píxel refleja los cambios de altitud (o escala) a medida que el visor se acerca y se aleja en la visualización del mapa. Es el exponente aplicado al término de tamaño de píxel en la ecuación que controla la velocidad a la que cambia el <strong>Factor Z</strong> para evitar una pérdida de relieve significativa.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Este parámetro solo es válido cuando el tipo de <strong>Escalado</strong> es <strong>Ajustado</strong>. El valor predeterminado es 0,664.",
	"@@Hillshade_Raster_tag0@@": "El dataset de elevación de entrada.",
	"@@Hillshade_Scaling_tag0@@": "El resultado sombreado se escala dinámicamente ajustando el factor z con una de estas dos opciones:",
	"@@Hillshade_Scaling_tag1@@": "Ajustado: esto aplica un ajuste no lineal en el que se utilizan los valores predeterminados de <strong>Potencia del tamaño de píxel</strong> y <strong>Factor de tamaño de píxeles</strong>, que tienen en cuenta una amplia variedad de cambios de altitud (escala) a medida que la imagen se acerca y se aleja. El parámetro <strong>Ajustado</strong> es recomendable cuando se usa un dataset mundial.",
	"@@Hillshade_Scaling_tag8@@": "Ninguno: no se aplica ningún escalado. Es ideal para un solo dataset ráster que cubra un área local. No es recomendable para datasets mundiales con grandes variaciones de elevación ni para mapas con varias escalas, ya que producirá un relieve del terreno con poca variación en las escalas pequeñas.",
	"@@Hillshade_Z-Factor_tag0@@": "El factor z es un factor de escalado que se utiliza para convertir los valores de elevación para dos motivos:",
	"@@Hillshade_Z-Factor_tag1@@": "Convierte las unidades de elevación (como metros o pies) a las unidades de coordenadas horizontales del dataset, que pueden ser pies, metros o grados.",
	"@@Hillshade_Z-Factor_tag2@@": "Agregue exageración vertical para lograr un efecto visual.",
	"@@Int_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Int_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Int_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Int_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Int_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Int_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Int_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Int_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Int_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Int_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Int_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Int_Raster_tag0@@": "El ráster de entrada que se convertirá a entero.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "El tamaño de celda del ráster de salida se detectará automáticamente; no obstante, puede cambiarlo. Si bien el tamaño de celda se puede cambiar, la extensión del dataset ráster permanecerá igual.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "Los datos de puntos de entrada.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Existen cuatro métodos de remuestreo para esta función:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Ponderación de distancia inversa</strong>: determina los valores de celda a través de una combinación ponderada linealmente de un conjunto de puntos o celdas de muestra. La ponderación es una función de la inversa de la distancia a partir de puntos o celdas conocidos.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>Simplificación lineal</strong>: utiliza una red irregular triangular desde los puntos centrales de cada celda del ráster irregular para interpolar una superficie que, después, se convierte a un ráster regular.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Vecino natural</strong>: busca el subconjunto más cercano de muestras de entrada a un punto de consulta y les aplica la ponderación en función de áreas proporcionadas para interpolar un valor.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Vecino más cercano</strong>: calcula el valor de píxel usando el píxel más cercano. Si no hay ningún píxel de origen, no se podrá crear ningún píxel nuevo en la salida. Esta es la opción predeterminada.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Identifica el número de píxeles que se van a incluir en el método de remuestreo seleccionado. El valor predeterminado es ${3} píxeles.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Si selecciona una clase de entidad de punto como entrada, deberá identificar el campo en la tabla de atributos con el valor de los puntos.",
	"@@Is-Null_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Is-Null_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Is-Null_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Is-Null_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Is-Null_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Is-Null_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Is-Null_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Is-Null_Raster_tag0@@": "El ráster de entrada que se probará para identificar las celdas que son ${NoData} (nulas).",
	"@@Is-Null_Raster_tag1@@": "La entrada puede ser de tipo entero o punto flotante.",
	"@@Key-Metadata_Band-Names_tag0@@": "Se utiliza para invalidar los nombres de bandas de un ráster. Es una cadena de caracteres separada por comas que representa los nombres de bandas actualizados.",
	"@@Key-Metadata_Band-Names_tag1@@": "Este parámetro es opcional.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "Los metadatos clave que se van a inyectar en el ráster de salida descritos como una cadena de caracteres JSON que representa un conjunto de pares de clave-valor. A continuación se muestra un ejemplo de una cadena de caracteres JSON que se puede utilizar como entrada para esta función. Todas las entradas para este parámetro deben seguir el mismo formato.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "Cadena de caracteres JSON que representa metadatos clave",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "El nombre de la propiedad clave en el nivel de dataset que se va a invalidar.",
	"@@Key-Metadata_Raster_tag0@@": "El dataset ráster o de mosaico que contiene los metadatos clave que desea insertar o invalidar.",
	"@@Key-Metadata_Value_tag0@@": "El valor de invalidación de la propiedad clave en el nivel de dataset que desea establecer.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parámetro simula el aumento del esfuerzo para sobreponerse a los costes a medida que aumenta el coste acumulado. Se utiliza para modelar el cansancio del viajero. El coste acumulado que aumenta para llegar a una celda se multiplica por la tasa de resistencia y se agrega al coste de moverse a la celda siguiente.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "Es una versión modificada de una fórmula de tasa de interés compuesto que se usa para calcular el coste aparente de atravesar una celda. A medida que aumenta el valor de la tasa de resistencia, aumenta el coste de las celdas que se visitan más tarde. Cuanto mayor sea la tasa de resistencia, más coste adicional se agregará para llegar a la celda siguiente, un valor que se suma para cada movimiento posterior. Como la tasa de resistencia es similar a una tasa compuesta y normalmente los valores del coste acumulado son muy grandes, es recomendable usar tasas de resistencia pequeñas, como 0,005, o incluso menores, dependiendo de los valores del coste acumulado.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Define la capacidad de coste del viajero para un origen. Los cálculos de coste continúan para cada origen hasta que se alcanza la capacidad especificada.",
	"@@Least-Cost-Path_Capacity_tag1@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "Ráster de entrada obligatorio que define el coste o la impedancia de hacer un movimiento planimétrico a través de cada celda. El valor de cada ubicación de celda representa la distancia de coste por unidad para moverse a través de la celda. Cada valor de ubicación de celda se multiplica por la resolución de la celda, mientras que también se compensa por el movimiento diagonal para obtener el coste total de pasar por la celda.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "Los valores del <strong>Ráster de costes</strong> pueden ser enteros o de punto flotante, pero no pueden ser negativos ni cero.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "El campo que se utiliza para obtener valores para la ubicaciones de destino.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "Un ráster de entrada obligatorio que identifica aquellos píxeles desde los que se determina la ruta de menor coste al origen menos costoso. Esta entrada se compone de píxeles que tienen valores válidos, y a los píxeles restantes se les debe asignar ${NoData}. Los valores iguales a 0 son válidos.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "El umbral que los valores de coste acumulado no pueden superar. Si un coste-distancia acumulado supera este valor, el valor de salida de la ubicación de la celda será ${NoData}. La distancia máxima define la extensión por la cual se calculan las distancias de coste acumulado. La distancia predeterminada es hasta la extensión del ráster de salida.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Este parámetro permite controlar el modo de desplazamiento o la magnitud en un origen. Cuanto mayor sea el multiplicador, mayor será el coste de moverse a través de cada celda.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "Los valores deben ser mayores que cero. El valor predeterminado es 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Una palabra clave que define la manera en que se interpretarán los valores y las zonas de los datos de destino de entrada en los cálculos de la ruta de coste:",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Mejor simple</strong>: para todos los píxeles de los datos de destino de entrada, la ruta de menor coste se deriva del píxel con la mínima de las rutas de menor coste a las celdas de origen.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Cada celda</strong>: por cada píxel con valores válidos en los datos de destino de entrada, se determina una ruta de menor coste que se guarda en el ráster de salida. Cada celda de los datos de destino de entrada se trata de forma separada y se determina una ruta de menor coste para cada una desde la celda.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Cada zona</strong>: para cada zona de los datos de destino de entrada, se determina una ruta de menor coste que se guarda en el ráster de salida. La ruta de menor coste de cada zona comienza en el píxel con la ponderación de distancia de coste más baja de la zona.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Es un ráster de entrada obligatorio que identifica las celdas o las ubicaciones desde las que se calcula el menor coste-distancia acumulado para cada ubicación de celda de salida.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "El coste de inicio a partir del cual empezarán los cálculos del coste. Este parámetro permite especificar el coste fijo asociado a un origen. En lugar de empezar con un coste de 0, el algoritmo de coste empezará con el valor especificado.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "El valor debe ser mayor o igual que cero. El valor predeterminado es 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Define la dirección del viajero cuando se aplica la tasa de resistencia en origen y el coste inicial en origen.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>Desde origen</strong>: la tasa de resistencia en origen y el coste inicial en origen se aplicarán empezando en el origen de entrada y avanzando hacia las celdas que no pertenezcan al origen. Esta es la opción predeterminada.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>A origen</strong>: la tasa de resistencia en origen y el coste inicial en origen se aplicarán empezando por cada celda que no pertenezca al origen y regresando al origen de entrada.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Especifique la palabra clave <strong>De origen</strong> o <strong>A origen</strong> que se aplicará a todos los orígenes o especifique un campo en el <strong>Ráster de origen</strong> que contenga las palabras clave para identificar la dirección de desplazamiento de cada origen. Ese campo debe contener la cadena de caracteres ${FROM_SOURCE} o ${TO_SOURCE}.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Less-Than_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Less-Than_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Less-Than_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Less-Than_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Less-Than_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Less-Than_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Less-Than_Raster_tag0@@": "La entrada que se prueba para determinar si es menor que la segunda entrada.",
	"@@Less-Than_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Less-Than_Raster2_tag0@@": "La entrada con la que se prueba la primera entrada para ver si es menor.",
	"@@Less-Than_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Less-Than-Equal_Raster_tag0@@": "La entrada que se prueba para determinar si es menor o igual que la segunda entrada.",
	"@@Less-Than-Equal_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Less-Than-Equal_Raster2_tag0@@": "La entrada con la que se prueba la primera entrada para ver si es menor o igual.",
	"@@Less-Than-Equal_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Ln_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Ln_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Ln_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Ln_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Ln_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Ln_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Ln_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Ln_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Ln_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Ln_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Ln_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Ln_Raster_tag0@@": "Los valores de entrada para los que hay que encontrar el logaritmo natural (Ln).",
	"@@Log10_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Log10_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Log10_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Log10_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Log10_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Log10_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Log10_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Log10_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Log10_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Log10_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Log10_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Log10_Raster_tag0@@": "Los valores de entrada de los que hay que encontrar el logaritmo base 10.",
	"@@Log2_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Log2_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Log2_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Log2_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Log2_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Log2_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Log2_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Log2_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Log2_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Log2_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Log2_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Log2_Raster_tag0@@": "Los valores de entrada de los que hay que encontrar el logaritmo base 2.",
	"@@Lookup_Field_tag0@@": "Campo que contiene los valores deseados para el ráster nuevo.",
	"@@Lookup_Field_tag1@@": "Tiene que ser un tipo numérico.",
	"@@Lookup_Raster_tag0@@": "El ráster de entrada que contiene un campo desde el cual se crea un ráster nuevo.",
	"@@Lookup_Raster_tag1@@": "Puede ser de tipo entero o punto flotante.",
	"@@Mask_Included-Ranges_tag0@@": "Se pueden especificar los rangos incluidos para cada banda especificando un valor mínimo y un valor máximo; los valores fuera del rango se devolverán como ${NoData}. Se incluye un píxel si el valor del píxel pertenece a cualquiera de los rangos especificados. Por lo tanto, si la banda 1 tiene un rango de 5–10 y la banda 2 tiene un rango de 15–20, y el valor de píxel de la banda 1 es 8, este píxel no se enmascarará.",
	"@@Mask_NoData-Interpretation_tag0@@": "Se refiere a cómo influirán los <strong>Valores ${NoData}</strong> en la imagen de salida.",
	"@@Mask_NoData-Interpretation_tag3@@": "Puede elegir entre estas dos opciones:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Coincidir todos</strong>: los valores ${NoData} que especifique para cada banda deben estar en el mismo píxel para que la imagen de salida contenga el píxel ${NoData}.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Coincidir cualquiera</strong>: si el valor ${NoData} que especifique está en un píxel de una banda concreta, dicho píxel será ${NoData} en la imagen de salida. Esta es la opción predeterminada.",
	"@@Mask_NoData-Values_tag0@@": "Se pueden especificar los valores NoData para cada banda. Puede especificar más de un valor si escribe una lista delimitada por espacios.",
	"@@Mask_Raster_tag0@@": "El ráster de entrada.",
	"@@Minus_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Minus_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Minus_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Minus_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Minus_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Minus_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Minus_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Minus_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Minus_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Minus_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Minus_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Minus_Raster_tag0@@": "La entrada desde la que se sustraen los valores de la segunda entrada.",
	"@@Minus_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Minus_Raster2_tag0@@": "Los valores de entrada a sustraer de los valores de la primera entrada.",
	"@@Minus_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@ML-Classify_Raster_tag0@@": "El ráster de entrada que se va a clasificar con el algoritmo de clasificación de máxima verosimilitud.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "El archivo de firma ${.gsg}.",
	"@@Mod_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Mod_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Mod_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Mod_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Mod_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Mod_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Mod_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Mod_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Mod_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Mod_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Mod_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Mod_Raster_tag0@@": "La entrada del numerador.",
	"@@Mod_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Mod_Raster2_tag0@@": "La entrada del denominador.",
	"@@Mod_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Resuelva los conflictos cuando hay partes de dos o varias imágenes que se superponen. Entre las opciones se incluyen las siguientes:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Combinar</strong>: calcula y muestra un promedio de los píxeles que se superponen asignando más peso a los píxeles que están más cerca de las imágenes vecinas para que la salida sea una imagen más suave. Esta es la opción predeterminada.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>Primera</strong>: muestra los píxeles de la primera imagen de la lista de imágenes que se superponen en un área determinada.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Última</strong>: muestra los píxeles de la última imagen de la lista de imágenes que se superponen en un área determinada.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Máx.</strong>: muestra el píxel con el valor más alto de todas las capas superpuestas. Con esta opción, no tendrá ninguna garantía de mostrar los píxeles de una sola imagen en el área superpuesta, sino una combinación de todas las capas posibles.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Valor medio</strong>: calcula y muestra un promedio de los píxeles que se superponen.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Mín.</strong>: muestra el píxel con el valor más bajo de todas las capas superpuestas. Con esta opción, no tendrá ninguna garantía de mostrar los píxeles de una sola imagen en el área superpuesta, sino una combinación de todas las capas posibles.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Seleccione los rásteres que desee unir en un mosaico para formar una imagen.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Especifica el Id. de banda que representa la parte infrarroja cercana del espectro electromagnético.",
	"@@NDVI_Raster_tag0@@": "El ráster multiespectral de entrada.",
	"@@NDVI_Scientific-Output_tag0@@": "Los valores de salida oscilarán entre -1,0 y 1,0, lo que se utiliza en muchas aplicaciones científicas.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Especifica el Id. de banda que representa la parte roja del espectro electromagnético.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Elija un esquema de color predefinido de la lista desplegable.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Elija el tipo de esquema de color para colorear la salida de NDVI:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Mapa de color: elija un mapa de color predefinido de la lista desplegable. También puede buscar un archivo de mapa de color persistente que ya exista.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Rampa de color: elija un esquema de color predefinido de la lista desplegable.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Elija un mapa de color predefinido de la lista desplegable. También puede buscar un archivo de mapa de color existente.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Especifica el Id. de banda que representa la parte infrarroja cercana del espectro electromagnético.",
	"@@NDVI-Colorized_Raster_tag0@@": "El ráster multiespectral de entrada.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "Los valores de salida oscilarán entre -1,0 y 1,0, lo que se utiliza en muchas aplicaciones científicas.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Especifica el Id. de banda que representa la parte roja del espectro electromagnético.",
	"@@Negate_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Negate_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Negate_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Negate_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Negate_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Negate_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Negate_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Negate_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Negate_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Negate_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Negate_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Negate_Raster_tag0@@": "El ráster de entrada que se cambiará de signo (multiplicado por -1).",
	"@@Nibble_Mask-Raster_tag0@@": "El ráster de entrada obligatorio utilizado como máscara.",
	"@@Nibble_Mask-Raster_tag1@@": "En las celdas con NoData como valor, Nibble se aplica en el <strong>Ráster</strong> de entrada.",
	"@@Nibble_Mask-Raster_tag4@@": "El ráster de máscara puede ser de tipo entero o de punto flotante.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Define si las celdas NoData del ráster de entrada seguirán siendo NoData en el ráster de salida.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>No</strong>: especifica que las celdas NoData del ráster de entrada seguirán siendo NoData en la salida. Esta es la opción predeterminada.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Sí</strong>: especifica que las celdas NoData del ráster de entrada y de la máscara se pueden reasignar a valores de celda de salida válidos.",
	"@@Nibble_Raster_tag0@@": "El ráster de entrada obligatorio al que se aplicará Nibble.",
	"@@Nibble_Raster_tag1@@": "El ráster de entrada puede ser de tipo entero o de punto flotante.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Define si se puede aplicar Nibble a los valores ${NoData} del ráster de entrada en el área definida por el ráster de máscara.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Sí</strong>: especifica que el valor del vecino más cercano se utilizará en el ráster de entrada, ya sea que se trate de ${NoData} u otro valor de datos. Los valores ${NoData} en el ráster de entrada pueden reasignarse a áreas definidas en la máscara si son el vecino más próximo. Esta es la opción predeterminada.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>No</strong>: especifica que solo los valores de datos pueden reasignarse a áreas definidas en el ráster de máscara. Los valores ${NoData} en el ráster de entrada no pueden reasignarse a áreas definidas en el ráster de máscara, aunque sean el vecino más próximo.",
	"@@Nibble_Zone-Raster_tag0@@": "El ráster de zona de entrada.",
	"@@Nibble_Zone-Raster_tag1@@": "Una zona son todas las celdas en un ráster que tienen el mismo valor, sean o no contiguas. La capa de zonas de entrada define la forma, los valores y las ubicaciones de las zonas. El ráster de zona puede ser de tipo entero o de punto flotante.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Not-Equal_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Not-Equal_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Not-Equal_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Not-Equal_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Not-Equal_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Not-Equal_Raster_tag0@@": "La entrada con la que se comparará por desigualdad la segunda entrada.",
	"@@Not-Equal_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Not-Equal_Raster2_tag0@@": "La entrada con la que se comparará la segunda entrada por desigualdad.",
	"@@Not-Equal_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Pansharpening_Multispectral_tag0@@": "El ráster multiespectral que desea refinar con la banda pancromática.",
	"@@Pansharpening_Panchromatic_tag0@@": "El ráster de alta resolución y banda única utilizado para el refinado pancromático del ráster multiespectral de resolución inferior.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Elija el algoritmo de refinado pancromático que desee utilizar.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey: utiliza el algoritmo de Brovey basado en el modelado espectral para la fusión de datos.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri: utiliza el algoritmo de Esri basado en el modelado espectral para la fusión de datos.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram-Schmidt: usa el algoritmo de nitidez espectral para refinar datos multiespectrales.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS: utiliza los espacios de color de Intensidad, Tono y Saturación para la fusión de datos.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Valor medio: usa el valor medio entre los valores de rojo, verde y azul y el valor de píxel pancromático.",
	"@@Pansharpening_Weights_tag0@@": "Especifique los pesos de las bandas roja, verde, azul e infrarroja. Todos los valores deben oscilar entre el 0 y el 1.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parámetro simula el aumento del esfuerzo para sobreponerse a los costes a medida que aumenta el coste acumulado. Se utiliza para modelar el cansancio del viajero. El coste acumulado que aumenta para llegar a una celda se multiplica por la tasa de resistencia y se agrega al coste de moverse a la celda siguiente.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Es una versión modificada de una fórmula de tasa de interés compuesto que se usa para calcular el coste aparente de atravesar una celda. A medida que aumenta el valor de la tasa de resistencia, aumenta el coste de las celdas que se visitan más tarde. Cuanto mayor sea la tasa de resistencia, más coste adicional se agregará para llegar a la celda siguiente, un valor que se suma para cada movimiento posterior. Como la tasa de resistencia es similar a una tasa compuesta y normalmente los valores del coste acumulado son muy grandes, es recomendable usar tasas de resistencia pequeñas, como 0,005, o incluso menores, dependiendo de los valores del coste acumulado.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Path-Distance_Capacity_tag0@@": "Define la capacidad de coste del viajero para un origen. Los cálculos de coste continúan para cada origen hasta que se alcanza la capacidad especificada.",
	"@@Path-Distance_Capacity_tag1@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Path-Distance_Cost-Raster_tag0@@": "Ráster de entrada obligatorio que define el coste o la impedancia de hacer un movimiento planimétrico a través de cada celda. El valor de cada ubicación de celda representa la distancia de coste por unidad para moverse a través de la celda. Cada valor de ubicación de celda se multiplica por la resolución de la celda, mientras que también se compensa por el movimiento diagonal para obtener el coste total de pasar por la celda.",
	"@@Path-Distance_Cost-Raster_tag1@@": "Los valores del <strong>Ráster de costes</strong> pueden ser enteros o de punto flotante, pero no pueden ser negativos ni cero.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Define la relación entre el factor de coste horizontal y el ángulo de movimiento relativo horizontal (HRMA).</p><p>Existen varios factores con modificadores que identifican un gráfico de factores vertical definido. Además, se puede utilizar una tabla para crear un gráfico personalizado. Los gráficos se utilizan para identificar el factor vertical utilizado en el cálculo del coste total de desplazarse a una celda vecina.</p><p>En las siguientes explicaciones, se utilizan dos acrónimos: HF y HRMA. HF significa factor horizontal, lo que define la dificultad horizontal con la se encuentra al realizar un movimiento desde una celda a la siguiente. HRMA significa ángulo de movimiento relativo horizontal, que define el ángulo entre la dirección horizontal de una celda y la dirección del movimiento.</p><p><strong>Factor horizontal</strong>contiene los siguientes tipos:</p><ul><li><strong>Binario</strong>: indica que si el HRMA es menor que el ángulo de corte, el HF se fija en el valor asociado al factor cero; en caso contrario, es infinito.</li><li><strong>Hacia delante</strong>: establece que solo se permite el movimiento hacia delante. El HRMA debe ser mayor o igual que 0 y menor que 90 grados (0 &lt;= HRMA &lt; 90). Si el HRMA es mayor que 0 y menor que 45 grados, el HF de la celda se establece para el valor asociado con el factor cero. Si el HRMA es mayor o igual que 45 grados, se utiliza el valor de modificación del valor lateral. El HF para cualquier valor de HRMA igual o superior a 90 grados se establece en infinito.</li><li><strong>Lineal</strong>: especifica que el HF es una función lineal de la HRMA.</li><li><strong>Lineal inverso</strong>: Especifica que el HF es una función lineal inversa de la HRMA.</li><li><strong>Tabla</strong>: Identifica que se utilizará un archivo de tabla para definir el gráfico de factores horizontales utilizado para determinar los HF.</li></ul><p>Los modificadores de los factores horizontales son los siguientes:</p><ul><li><strong>Factor cero</strong>: el factor horizontal que se utilizará si el HRMA es cero. Este factor posiciona el interceptor y para cualquiera de las funciones de los factores horizontales.</li><li><strong>Ángulo de corte</strong>: define el ángulo de HRMA más allá el cual el HF cambiará a infinito.</li><li><strong>Pendiente</strong>: establece la pendiente de la línea recta utilizada con las palabras clave de factor horizontal<strong>Lineal</strong>y<strong>Lineal inverso</strong>. La pendiente se especifica como una fracción de aumento en la distancia (por ejemplo, una pendiente con un porcentaje de 45 es 1/45, que se introduce como 0,02222).</li><li><strong>Valor lateral</strong>: establece el HF cuando el HRMA es mayor o igual a 45 grados y menor a 90 grados cuando se especifica la palabra clave del factor horizontal<strong>Adelante</strong>.</li><li><strong>Nombre de tabla</strong>: identifica el nombre de la tabla que define el HF.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "Ráster que define la dirección horizontal de cada celda.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "Los valores del ráster deben ser números enteros comprendidos entre 0 y 360, con 0 grados al norte o hacia la parte superior de la pantalla y que aumentan en el sentido de las agujas del reloj. Las áreas llanas deben tener el valor -1. Los valores de cada ubicación se utilizarán en conjunto con el <strong>Factor horizontal</strong> para determinar el coste horizontal incurrido al realizar el movimiento de una celda hacia sus elementos próximos.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "El umbral que los valores de coste acumulado no pueden superar. Si un coste-distancia acumulado supera este valor, el valor de salida de la ubicación de la celda será NoData. La distancia máxima define la extensión por la cual se calculan las distancias de coste acumulado. La distancia predeterminada es hasta la extensión del ráster de salida.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Un multiplicador que se debe aplicar a los valores de coste.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Este parámetro permite controlar el modo de desplazamiento o la magnitud en un origen. Cuanto mayor sea el multiplicador, mayor será el coste de moverse a través de cada celda.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Los valores deben ser mayores que cero. El valor predeterminado es 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Path-Distance_Source-Raster_tag0@@": "El ráster de entrada obligatorio de las ubicaciones de origen.",
	"@@Path-Distance_Source-Raster_tag1@@": "Es un ráster que identifica las celdas o las ubicaciones desde las que se calcula el menor coste-distancia acumulado para cada ubicación de celda de salida.",
	"@@Path-Distance_Source-Raster_tag2@@": "Puede ser de tipo entero o de punto flotante.",
	"@@Path-Distance_Start-Cost_tag0@@": "El coste de inicio a partir del cual empezarán los cálculos del coste. Este parámetro permite especificar el coste fijo asociado a un origen. En lugar de empezar con un coste de 0, el algoritmo de coste empezará con el valor especificado.",
	"@@Path-Distance_Start-Cost_tag1@@": "El valor debe ser mayor o igual que cero. El valor predeterminado es 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "Ráster que define los valores de elevación de cada ubicación de celda.",
	"@@Path-Distance_Surface-Raster_tag1@@": "Los valores se utilizan para calcular la distancia de la superficie actual cubierta al pasar entre las celdas.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Define la dirección del viajero cuando se aplica la tasa de resistencia en origen y el coste inicial en origen.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>Desde origen</strong>: la tasa de resistencia en origen y el coste inicial en origen se aplicarán empezando en el origen de entrada y avanzando hacia las celdas que no pertenezcan al origen. Esta es la opción predeterminada.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>A origen</strong>: la tasa de resistencia en origen y el coste inicial en origen se aplicarán empezando por cada celda que no pertenezca al origen y regresando al origen de entrada.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Especifique la palabra clave <strong>De origen</strong> o <strong>A origen</strong> que se aplicará a todos los orígenes o especifique un campo en el <strong>Ráster de origen</strong> que contenga las palabras clave para identificar la dirección de desplazamiento de cada origen. Ese campo debe contener la cadena de caracteres ${FROM_SOURCE} o ${TO_SOURCE}.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Define la relación entre el factor de coste vertical y el ángulo de movimiento relativo vertical (VRMA).</p><p>Existen varios factores con modificadores que identifican un gráfico de factores vertical definido. Además, se puede utilizar una tabla para crear un gráfico personalizado. Los gráficos se utilizan para identificar el factor vertical utilizado en el cálculo del coste total de desplazarse a una celda vecina.</p><p>En las siguientes explicaciones, se utilizan dos acrónimos: VF y VRMA. VF significa factor vertical, lo que define la dificultad vertical con la se encuentra al realizar un movimiento desde una celda a la siguiente. VRMA significa ángulo de desplazamiento relativo vertical, que identifica el ángulo de inclinación entre la celda DESDE, o de procesamiento, y la celda A.</p><p><strong>Factor vertical</strong>tiene los siguientes tipos posibles:</p><ul><li><strong>Binario</strong>: especifica que si el VRMA es mayor que el ángulo de corte bajo y menor que el ángulo de corte alto, el VF se fija en el valor asociado al factor cero; en caso contrario, es infinito.</li><li><strong>Lineal</strong>: indica que el VF es una función lineal del VRMA.</li><li><strong>Lineal simétrico</strong>: especifica que el VF es una función lineal del VRMA en el lado negativo o positivo del VRMA, respectivamente, y las dos funciones lineales son simétricas con respecto al eje VF (y).</li><li><strong>Lineal inverso</strong>: indica que el VF es una función lineal inversa del VRMA.</li><li><strong>Lineal inverso simétrico</strong>: especifica que el VF es una función lineal inversa del VRMA en el lado negativo o positivo del VRMA, respectivamente, y las dos funciones lineales son simétricas con respecto al eje VF (y).</li><li><strong>Cos</strong>: identifica el VF como la función basada en el coseno del VRMA.</li><li><strong>Sec</strong>: identifica el VF como la función basada en la secante del VRMA.</li><li><strong>Cos-Sec</strong>: especifica que el VF es la función basada en el coseno del VRMA cuando el VRMA es negativo y la función basada en la secante del VRMA cuando el VRMA no es negativo.</li><li><strong>Sec-Cos</strong>: especifica que el VF es la función basada en la secante del VRMA cuando el VRMA es negativo y la función basada en el coseno del VRMA cuando el VRMA no es negativo.</li><li><strong>Tabla</strong>: identifica que se utilizará un archivo de tabla para definir el gráfico del factor vertical que se utiliza para determinar los VF.</li></ul><p>Los modificadores de las palabras clave verticales son los siguientes:</p><ul><li><strong>Factor cero</strong>: establece el factor vertical utilizado cuando el VRMA es cero. Este factor posiciona el interceptor y de la función especificada. Por definición, el factor cero no es aplicable a ninguna de las funciones verticales trigonométricas (COS, SEC, COS-SEC o SEC-COS). La intersección y está definida por estas funciones.</li><li><strong>Ángulo de corte bajo</strong>: define el ángulo del VRMA por debajo del cual el VF se establecerá en el infinito.</li><li><strong>Ángulo de corte alto</strong>: define el ángulo de VRMA por encima del cual el VF se pondrá a infinito.</li><li><strong>Pendiente</strong>: establece la pendiente de la línea recta utilizada con las palabras clave de factor vertical<strong>Lineal</strong>y<strong>Lineal inverso</strong>. La pendiente se especifica como una fracción de aumento sobre la ejecución (por ejemplo, 45 de pendiente en porcentaje es 1/45, lo que se introduce como 0,02222).</li><li><strong>Nombre de tabla</strong>: identifica el nombre de la tabla que define el VF.</ul></li>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Define la relación entre el factor de coste vertical y el ángulo de movimiento relativo vertical (VRMA).",
	"@@Path-Distance_Vertical-Raster_tag1@@": "Los valores se utilizan para calcular la pendiente utilizada para identificar el factor vertical incurrido al realizar un movimiento de una celda a otra.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parámetro simula el aumento del esfuerzo para sobreponerse a los costes a medida que aumenta el coste acumulado. Se utiliza para modelar el cansancio del viajero. El coste acumulado que aumenta para llegar a una celda se multiplica por la tasa de resistencia y se agrega al coste de moverse a la celda siguiente.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Es una versión modificada de una fórmula de tasa de interés compuesto que se usa para calcular el coste aparente de atravesar una celda. A medida que aumenta el valor de la tasa de resistencia, aumenta el coste de las celdas que se visitan más tarde. Cuanto mayor sea la tasa de resistencia, más coste adicional se agregará para llegar a la celda siguiente, un valor que se suma para cada movimiento posterior. Como la tasa de resistencia es similar a una tasa compuesta y normalmente los valores del coste acumulado son muy grandes, es recomendable usar tasas de resistencia pequeñas, como 0,005, o incluso menores, dependiendo de los valores del coste acumulado.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Define la capacidad de coste del viajero para un origen. Los cálculos de coste continúan para cada origen hasta que se alcanza la capacidad especificada.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "Ráster de entrada obligatorio que define el coste o la impedancia de hacer un movimiento planimétrico a través de cada celda. El valor de cada ubicación de celda representa la distancia de coste por unidad para moverse a través de la celda. Cada valor de ubicación de celda se multiplica por la resolución de la celda, mientras que también se compensa por el movimiento diagonal para obtener el coste total de pasar por la celda.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "Los valores del <strong>Ráster de costes</strong> pueden ser enteros o de punto flotante, pero no pueden ser negativos ni cero.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Define la relación entre el factor de coste horizontal y el ángulo de movimiento relativo horizontal (HRMA).</p><p>Existen varios factores con modificadores que identifican un gráfico de factores vertical definido. Además, se puede utilizar una tabla para crear un gráfico personalizado. Los gráficos se utilizan para identificar el factor vertical utilizado en el cálculo del coste total de desplazarse a una celda vecina.</p><p>En las siguientes explicaciones, se utilizan dos acrónimos: HF y HRMA. HF significa factor horizontal, lo que define la dificultad horizontal con la se encuentra al realizar un movimiento desde una celda a la siguiente. HRMA significa ángulo de movimiento relativo horizontal, que define el ángulo entre la dirección horizontal de una celda y la dirección del movimiento.</p><p><strong>Factor horizontal</strong>contiene los siguientes tipos:</p><ul><li><strong>Binario</strong>: indica que si el HRMA es menor que el ángulo de corte, el HF se fija en el valor asociado al factor cero; en caso contrario, es infinito.</li><li><strong>Hacia delante</strong>: establece que solo se permite el movimiento hacia delante. El HRMA debe ser mayor o igual que 0 y menor que 90 grados (0 &lt;= HRMA &lt; 90). Si el HRMA es mayor que 0 y menor que 45 grados, el HF de la celda se establece para el valor asociado con el factor cero. Si el HRMA es mayor o igual que 45 grados, se utiliza el valor de modificación del valor lateral. El HF para cualquier valor de HRMA igual o superior a 90 grados se establece en infinito.</li><li><strong>Lineal</strong>: especifica que el HF es una función lineal de la HRMA.</li><li><strong>Lineal inverso</strong>: Especifica que el HF es una función lineal inversa de la HRMA.</li><li><strong>Tabla</strong>: Identifica que se utilizará un archivo de tabla para definir el gráfico de factores horizontales utilizado para determinar los HF.</li></ul><p>Los modificadores de los factores horizontales son los siguientes:</p><ul><li><strong>Factor cero</strong>: el factor horizontal que se utilizará si el HRMA es cero. Este factor posiciona el interceptor y para cualquiera de las funciones de los factores horizontales.</li><li><strong>Ángulo de corte</strong>: define el ángulo de HRMA más allá el cual el HF cambiará a infinito.</li><li><strong>Pendiente</strong>: establece la pendiente de la línea recta utilizada con las palabras clave de factor horizontal<strong>Lineal</strong>y<strong>Lineal inverso</strong>. La pendiente se especifica como una fracción de aumento en la distancia (por ejemplo, una pendiente con un porcentaje de 45 es 1/45, que se introduce como 0,02222).</li><li><strong>Valor lateral</strong>: establece el HF cuando el HRMA es mayor o igual a 45 grados y menor a 90 grados cuando se especifica la palabra clave del factor horizontal<strong>Adelante</strong>.</li><li><strong>Nombre de tabla</strong>: identifica el nombre de la tabla que define el HF.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "Ráster que define la dirección horizontal de cada celda.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "Los valores del ráster deben ser números enteros comprendidos entre 0 y 360, con 0 grados al norte o hacia la parte superior de la pantalla y que aumentan en el sentido de las agujas del reloj. Las áreas llanas deben tener el valor -1. Los valores de cada ubicación se utilizarán en conjunto con el <strong>Factor horizontal</strong> para determinar el coste horizontal incurrido al realizar el movimiento de una celda hacia sus elementos próximos.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "El umbral que los valores de coste acumulado no pueden superar. Si un coste-distancia acumulado supera este valor, el valor de salida de la ubicación de la celda será NoData. La distancia máxima define la extensión por la cual se calculan las distancias de coste acumulado. La distancia predeterminada es hasta la extensión del ráster de salida.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Un multiplicador que se debe aplicar a los valores de coste.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Este parámetro permite controlar el modo de desplazamiento o la magnitud en un origen. Cuanto mayor sea el multiplicador, mayor será el coste de moverse a través de cada celda.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Los valores deben ser mayores que cero. El valor predeterminado es 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "El campo que se utiliza para asignar los valores a las ubicaciones de origen. Debe ser de tipo entero. Si el <strong>Ráster de valor</strong> se ha establecido, los valores de esa entrada tendrán prioridad sobre cualquier configuración del <strong>Campo de origen</strong>.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "El ráster de entrada obligatorio de las ubicaciones de origen.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Es un ráster que identifica las celdas o las ubicaciones desde las que se calcula el menor coste-distancia acumulado para cada ubicación de celda de salida.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Puede ser de tipo entero o de punto flotante.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "El coste de inicio a partir del cual empezarán los cálculos del coste. Este parámetro permite especificar el coste fijo asociado a un origen. En lugar de empezar con un coste de 0, el algoritmo de coste empezará con el valor especificado.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "El valor debe ser mayor o igual que cero. El valor predeterminado es 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "Ráster que define los valores de elevación de cada ubicación de celda.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "Los valores se utilizan para calcular la distancia de la superficie actual cubierta al pasar entre las celdas.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Define la dirección del viajero cuando se aplica la tasa de resistencia en origen y el coste inicial en origen.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>Desde origen</strong>: la tasa de resistencia en origen y el coste inicial en origen se aplicarán empezando en el origen de entrada y avanzando hacia las celdas que no pertenezcan al origen. Esta es la opción predeterminada.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>A origen</strong>: la tasa de resistencia en origen y el coste inicial en origen se aplicarán empezando por cada celda que no pertenezca al origen y regresando al origen de entrada.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Especifique la palabra clave <strong>De origen</strong> o <strong>A origen</strong> que se aplicará a todos los orígenes o especifique un campo en el <strong>Ráster de origen</strong> que contenga las palabras clave para identificar la dirección de desplazamiento de cada origen. Ese campo debe contener la cadena de caracteres ${FROM_SOURCE} o ${TO_SOURCE}.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "Ráster entero de entrada que identifica los valores de la zona que se deben utilizar para cada ubicación de origen de entrada. En cada celda de ubicación de origen, el valor definido por el <strong>Ráster de valor</strong> se asignará a todas las celdas asignadas a la ubicación de origen para el cómputo. El <strong>Ráster de valor</strong> tendrá prioridad sobre cualquier ajuste para el <strong>Campo de origen</strong>.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Define la relación entre el factor de coste vertical y el ángulo de movimiento relativo vertical (VRMA).</p><p>Existen varios factores con modificadores que identifican un gráfico de factores vertical definido. Además, se puede utilizar una tabla para crear un gráfico personalizado. Los gráficos se utilizan para identificar el factor vertical utilizado en el cálculo del coste total de desplazarse a una celda vecina.</p><p>En las siguientes explicaciones, se utilizan dos acrónimos: VF y VRMA. VF significa factor vertical, lo que define la dificultad vertical con la se encuentra al realizar un movimiento desde una celda a la siguiente. VRMA significa ángulo de desplazamiento relativo vertical, que identifica el ángulo de inclinación entre la celda DESDE, o de procesamiento, y la celda A.</p><p><strong>Factor vertical</strong>tiene los siguientes tipos posibles:</p><ul><li><strong>Binario</strong>: especifica que si el VRMA es mayor que el ángulo de corte bajo y menor que el ángulo de corte alto, el VF se fija en el valor asociado al factor cero; en caso contrario, es infinito.</li><li><strong>Lineal</strong>: indica que el VF es una función lineal del VRMA.</li><li><strong>Lineal simétrico</strong>: especifica que el VF es una función lineal del VRMA en el lado negativo o positivo del VRMA, respectivamente, y las dos funciones lineales son simétricas con respecto al eje VF (y).</li><li><strong>Lineal inverso</strong>: indica que el VF es una función lineal inversa del VRMA.</li><li><strong>Lineal inverso simétrico</strong>: especifica que el VF es una función lineal inversa del VRMA en el lado negativo o positivo del VRMA, respectivamente, y las dos funciones lineales son simétricas con respecto al eje VF (y).</li><li><strong>Cos</strong>: identifica el VF como la función basada en el coseno del VRMA.</li><li><strong>Sec</strong>: identifica el VF como la función basada en la secante del VRMA.</li><li><strong>Cos-Sec</strong>: especifica que el VF es la función basada en el coseno del VRMA cuando el VRMA es negativo y la función basada en la secante del VRMA cuando el VRMA no es negativo.</li><li><strong>Sec-Cos</strong>: especifica que el VF es la función basada en la secante del VRMA cuando el VRMA es negativo y la función basada en el coseno del VRMA cuando el VRMA no es negativo.</li><li><strong>Tabla</strong>: identifica que se utilizará un archivo de tabla para definir el gráfico del factor vertical que se utiliza para determinar los VF.</li></ul><p>Los modificadores de las palabras clave verticales son los siguientes:</p><ul><li><strong>Factor cero</strong>: establece el factor vertical utilizado cuando el VRMA es cero. Este factor posiciona el interceptor y de la función especificada. Por definición, el factor cero no es aplicable a ninguna de las funciones verticales trigonométricas (COS, SEC, COS-SEC o SEC-COS). La intersección y está definida por estas funciones.</li><li><strong>Ángulo de corte bajo</strong>: define el ángulo del VRMA por debajo del cual el VF se establecerá en el infinito.</li><li><strong>Ángulo de corte alto</strong>: define el ángulo de VRMA por encima del cual el VF se pondrá a infinito.</li><li><strong>Pendiente</strong>: establece la pendiente de la línea recta utilizada con las palabras clave de factor vertical<strong>Lineal</strong>y<strong>Lineal inverso</strong>. La pendiente se especifica como una fracción de aumento sobre la ejecución (por ejemplo, 45 de pendiente en porcentaje es 1/45, lo que se introduce como 0,02222).</li><li><strong>Nombre de tabla</strong>: identifica el nombre de la tabla que define el VF.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Define la relación entre el factor de coste vertical y el ángulo de movimiento relativo vertical (VRMA).",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "Los valores se utilizan para calcular la pendiente utilizada para identificar el factor vertical incurrido al realizar un movimiento de una celda a otra.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Este parámetro simula el aumento del esfuerzo para sobreponerse a los costes a medida que aumenta el coste acumulado. Se utiliza para modelar el cansancio del viajero. El coste acumulado que aumenta para llegar a una celda se multiplica por la tasa de resistencia y se agrega al coste de moverse a la celda siguiente.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Es una versión modificada de una fórmula de tasa de interés compuesto que se usa para calcular el coste aparente de atravesar una celda. A medida que aumenta el valor de la tasa de resistencia, aumenta el coste de las celdas que se visitan más tarde. Cuanto mayor sea la tasa de resistencia, más coste adicional se agregará para llegar a la celda siguiente, un valor que se suma para cada movimiento posterior. Como la tasa de resistencia es similar a una tasa compuesta y normalmente los valores del coste acumulado son muy grandes, es recomendable usar tasas de resistencia pequeñas, como 0,005, o incluso menores, dependiendo de los valores del coste acumulado.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Define la capacidad de coste del viajero para un origen. Los cálculos de coste continúan para cada origen hasta que se alcanza la capacidad especificada.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "Ráster de entrada obligatorio que define el coste o la impedancia de hacer un movimiento planimétrico a través de cada celda. El valor de cada ubicación de celda representa la distancia de coste por unidad para moverse a través de la celda. Cada valor de ubicación de celda se multiplica por la resolución de la celda, mientras que también se compensa por el movimiento diagonal para obtener el coste total de pasar por la celda.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "Los valores del <strong>Ráster de costes</strong> pueden ser enteros o de punto flotante, pero no pueden ser negativos ni cero.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Define la relación entre el factor de coste horizontal y el ángulo de movimiento relativo horizontal (HRMA).</p><p>Existen varios factores con modificadores que identifican un gráfico de factores vertical definido. Además, se puede utilizar una tabla para crear un gráfico personalizado. Los gráficos se utilizan para identificar el factor vertical utilizado en el cálculo del coste total de desplazarse a una celda vecina.</p><p>En las siguientes explicaciones, se utilizan dos acrónimos: HF y HRMA. HF significa factor horizontal, lo que define la dificultad horizontal con la se encuentra al realizar un movimiento desde una celda a la siguiente. HRMA significa ángulo de movimiento relativo horizontal, que define el ángulo entre la dirección horizontal de una celda y la dirección del movimiento.</p><p><strong>Factor horizontal</strong>contiene los siguientes tipos:</p><ul><li><strong>Binario</strong>: indica que si el HRMA es menor que el ángulo de corte, el HF se fija en el valor asociado al factor cero; en caso contrario, es infinito.</li><li><strong>Hacia delante</strong>: establece que solo se permite el movimiento hacia delante. El HRMA debe ser mayor o igual que 0 y menor que 90 grados (0 &lt;= HRMA &lt; 90). Si el HRMA es mayor que 0 y menor que 45 grados, el HF de la celda se establece para el valor asociado con el factor cero. Si el HRMA es mayor o igual que 45 grados, se utiliza el valor de modificación del valor lateral. El HF para cualquier valor de HRMA igual o superior a 90 grados se establece en infinito.</li><li><strong>Lineal</strong>: especifica que el HF es una función lineal de la HRMA.</li><li><strong>Lineal inverso</strong>: Especifica que el HF es una función lineal inversa de la HRMA.</li><li><strong>Tabla</strong>: Identifica que se utilizará un archivo de tabla para definir el gráfico de factores horizontales utilizado para determinar los HF.</li></ul><p>Los modificadores de los factores horizontales son los siguientes:</p><ul><li><strong>Factor cero</strong>: el factor horizontal que se utilizará si el HRMA es cero. Este factor posiciona el interceptor y para cualquiera de las funciones de los factores horizontales.</li><li><strong>Ángulo de corte</strong>: define el ángulo de HRMA más allá el cual el HF cambiará a infinito.</li><li><strong>Pendiente</strong>: establece la pendiente de la línea recta utilizada con las palabras clave de factor horizontal<strong>Lineal</strong>y<strong>Lineal inverso</strong>. La pendiente se especifica como una fracción de aumento en la distancia (por ejemplo, una pendiente con un porcentaje de 45 es 1/45, que se introduce como 0,02222).</li><li><strong>Valor lateral</strong>: establece el HF cuando el HRMA es mayor o igual a 45 grados y menor a 90 grados cuando se especifica la palabra clave del factor horizontal<strong>Adelante</strong>.</li><li><strong>Nombre de tabla</strong>: identifica el nombre de la tabla que define el HF.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "Ráster que define la dirección horizontal de cada celda.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "Los valores del ráster deben ser números enteros comprendidos entre 0 y 360, con 0 grados al norte o hacia la parte superior de la pantalla y que aumentan en el sentido de las agujas del reloj. Las áreas llanas deben tener el valor -1. Los valores de cada ubicación se utilizarán en conjunto con el <strong>Factor horizontal</strong> para determinar el coste horizontal incurrido al realizar el movimiento de una celda hacia sus elementos próximos.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "El umbral que los valores de coste acumulado no pueden superar. Si un coste-distancia acumulado supera este valor, el valor de salida de la ubicación de la celda será NoData. La distancia máxima define la extensión por la cual se calculan las distancias de coste acumulado. La distancia predeterminada es hasta la extensión del ráster de salida.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Un multiplicador que se debe aplicar a los valores de coste.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Este parámetro permite controlar el modo de desplazamiento o la magnitud en un origen. Cuanto mayor sea el multiplicador, mayor será el coste de moverse a través de cada celda.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Los valores deben ser mayores que cero. El valor predeterminado es 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "El ráster de entrada obligatorio de las ubicaciones de origen.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Es un ráster que identifica las celdas o las ubicaciones desde las que se calcula el menor coste-distancia acumulado para cada ubicación de celda de salida.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Puede ser de tipo entero o de punto flotante.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "El coste de inicio a partir del cual empezarán los cálculos del coste. Este parámetro permite especificar el coste fijo asociado a un origen. En lugar de empezar con un coste de 0, el algoritmo de coste empezará con el valor especificado.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "El valor debe ser mayor o igual que cero. El valor predeterminado es 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "Ráster que define los valores de elevación de cada ubicación de celda.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "Los valores se utilizan para calcular la distancia de la superficie actual cubierta al pasar entre las celdas.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Define la dirección del viajero cuando se aplica la tasa de resistencia en origen y el coste inicial en origen.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>Desde origen</strong>: la tasa de resistencia en origen y el coste inicial en origen se aplicarán empezando en el origen de entrada y avanzando hacia las celdas que no pertenezcan al origen. Esta es la opción predeterminada.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>A origen</strong>: la tasa de resistencia en origen y el coste inicial en origen se aplicarán empezando por cada celda que no pertenezca al origen y regresando al origen de entrada.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Especifique la palabra clave <strong>De origen</strong> o <strong>A origen</strong> que se aplicará a todos los orígenes o especifique un campo en el <strong>Ráster de origen</strong> que contenga las palabras clave para identificar la dirección de desplazamiento de cada origen. Ese campo debe contener la cadena de caracteres ${FROM_SOURCE} o ${TO_SOURCE}.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Define la relación entre el factor de coste vertical y el ángulo de movimiento relativo vertical (VRMA).</p><p>Existen varios factores con modificadores que identifican un gráfico de factores vertical definido. Además, se puede utilizar una tabla para crear un gráfico personalizado. Los gráficos se utilizan para identificar el factor vertical utilizado en el cálculo del coste total de desplazarse a una celda vecina.</p><p>En las siguientes explicaciones, se utilizan dos acrónimos: VF y VRMA. VF significa factor vertical, lo que define la dificultad vertical con la se encuentra al realizar un movimiento desde una celda a la siguiente. VRMA significa ángulo de desplazamiento relativo vertical, que identifica el ángulo de inclinación entre la celda DESDE, o de procesamiento, y la celda A.</p><p><strong>Factor vertical</strong>tiene los siguientes tipos posibles:</p><ul><li><strong>Binario</strong>: especifica que si el VRMA es mayor que el ángulo de corte bajo y menor que el ángulo de corte alto, el VF se fija en el valor asociado al factor cero; en caso contrario, es infinito.</li><li><strong>Lineal</strong>: indica que el VF es una función lineal del VRMA.</li><li><strong>Lineal simétrico</strong>: especifica que el VF es una función lineal del VRMA en el lado negativo o positivo del VRMA, respectivamente, y las dos funciones lineales son simétricas con respecto al eje VF (y).</li><li><strong>Lineal inverso</strong>: indica que el VF es una función lineal inversa del VRMA.</li><li><strong>Lineal inverso simétrico</strong>: especifica que el VF es una función lineal inversa del VRMA en el lado negativo o positivo del VRMA, respectivamente, y las dos funciones lineales son simétricas con respecto al eje VF (y).</li><li><strong>Cos</strong>: identifica el VF como la función basada en el coseno del VRMA.</li><li><strong>Sec</strong>: identifica el VF como la función basada en la secante del VRMA.</li><li><strong>Cos-Sec</strong>: especifica que el VF es la función basada en el coseno del VRMA cuando el VRMA es negativo y la función basada en la secante del VRMA cuando el VRMA no es negativo.</li><li><strong>Sec-Cos</strong>: especifica que el VF es la función basada en la secante del VRMA cuando el VRMA es negativo y la función basada en el coseno del VRMA cuando el VRMA no es negativo.</li><li><strong>Tabla</strong>: identifica que se utilizará un archivo de tabla para definir el gráfico del factor vertical que se utiliza para determinar los VF.</li></ul><p>Los modificadores de las palabras clave verticales son los siguientes:</p><ul><li><strong>Factor cero</strong>: establece el factor vertical utilizado cuando el VRMA es cero. Este factor posiciona el interceptor y de la función especificada. Por definición, el factor cero no es aplicable a ninguna de las funciones verticales trigonométricas (COS, SEC, COS-SEC o SEC-COS). La intersección y está definida por estas funciones.</li><li><strong>Ángulo de corte bajo</strong>: define el ángulo del VRMA por debajo del cual el VF se establecerá en el infinito.</li><li><strong>Ángulo de corte alto</strong>: define el ángulo de VRMA por encima del cual el VF se pondrá a infinito.</li><li><strong>Pendiente</strong>: establece la pendiente de la línea recta utilizada con las palabras clave de factor vertical<strong>Lineal</strong>y<strong>Lineal inverso</strong>. La pendiente se especifica como una fracción de aumento sobre la ejecución (por ejemplo, 45 de pendiente en porcentaje es 1/45, lo que se introduce como 0,02222).</li><li><strong>Nombre de tabla</strong>: identifica el nombre de la tabla que define el VF.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Define la relación entre el factor de coste vertical y el ángulo de movimiento relativo vertical (VRMA).",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "Los valores se utilizan para calcular la pendiente utilizada para identificar el factor vertical incurrido al realizar un movimiento de una celda a otra.",
	"@@Plus_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Plus_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Plus_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Plus_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Plus_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Plus_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Plus_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Plus_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Plus_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Plus_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Plus_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Plus_Raster_tag0@@": "La entrada a cuyos valores se sumarán otros valores.",
	"@@Plus_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Plus_Raster2_tag0@@": "La entrada cuyos valores se sumarán a los de la primera entrada.",
	"@@Plus_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Local_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Local_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Local_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Local_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Local_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásters de entrada.",
	"@@Local_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Local_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Local_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Local_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Local_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Local_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Local_Raster_tag0@@": "La entrada a cuyos valores se sumarán otros valores.",
	"@@Local_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Local_Raster2_tag0@@": "La entrada cuyos valores se sumarán a los de la primera entrada.",
	"@@Local_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Local_False-Raster_tag0@@": "La entrada cuyos valores se utilizan como valores de píxel de salida si la condición es falsa. Puede ser un ráster de punto flotante o entero o un valor constante.",
	"@@Local_True-Raster_tag0@@": "La entrada cuyos valores se utilizarán como valores de píxel de salida si la condición es verdadera. Puede ser un ráster de punto flotante o entero o un valor constante.",
	"@@Power_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Power_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Power_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Power_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Power_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Power_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Power_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Power_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Power_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Power_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Power_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Power_Raster_tag0@@": "Los valores de entrada que se elevarán a la potencia definida mediante <strong>Raster2</strong>.",
	"@@Power_Raster_tag3@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Power_Raster2_tag0@@": "La entrada que determina la potencia a la que se elevarán los valores de <strong>Ráster</strong>.",
	"@@Power_Raster2_tag3@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "El tipo de calibración que se va a realizar.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Beta-cero: la función devuelve la reflectividad del radar por área de unidad en un rango de inclinación. Este es el tipo de calibración predeterminado.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Sigma-cero: la función devuelve la reflectividad del radar por área de unidad en un rango de suelo. Los resultados son valores de punto flotante de 32 bits, que se encuentran normalmente en el rango de 0,0 a 1,0. Los datos no se recortan si esta opción está seleccionada.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gamma: la función devuelve la reflectividad del radar por área de unidad en el plano perpendicular a la dirección de la medición.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Ninguna",
	"@@Radar-Calibration_Raster_tag0@@": "El ráster de entrada.",
	"@@RasterInfo_Raster-Info_tag0@@": "Seleccione un dataset ráster para usarlo como plantilla.",
	"@@RasterInfo_Raster_tag0@@": "El ráster de entrada.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "Una lista de campos en la <strong>Tabla de atributos zonales</strong>, donde cada campo está separado por una coma. Los valores de cada campo se representarán mediante una banda en el ráster de salida.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "El valor de píxel inicial de las bandas de salida en el ráster, antes de la nueva representación cartográfica.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Si un píxel no queda dentro de una zona, se mantendrá como valor de fondo.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "El ráster de entrada obligatorio.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "La entrada debe ser un ráster de banda única. Si se utiliza un ráster multibanda, solo se mantendrá la primera banda.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "Consulta adicional opcional aplicada a la <strong>Tabla de atributos zonales</strong>.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "Si utilizara la tabla anterior como ejemplo, la consulta sería ${Variable1 = 'bare earth'}.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "Los atributos zonales especificados como una ruta a la clase de entidad local, la ruta a la tabla, la dirección URL a la capa de servicio de entidades o una cadena de caracteres JSON.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "En JSON, se describe como un conjunto de representación cartográfica de Id. de zona a un conjunto de enteros. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "El nombre del campo que contiene los valores de Id. de zona.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "Ráster de una banda opcional donde cada píxel contiene el Id. de zona asociado a la ubicación. El Id. de zona se utiliza para buscar filas en la tabla de atributos zonales para la ingestión específica de zonas.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Deje este parámetro sin especificar si solo desea importar el atributo.",
	"@@Rasterize-Features_Field_tag0@@": "Seleccione el campo que se usará para identificar cada entidad.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Seleccione la clase de entidad que se convertirá al formato de ráster.",
	"@@Rasterize-Features_Raster_tag0@@": "Seleccione un ráster para definir el tamaño de celda y la extensión para la conversión de entidades.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Determina cómo administrar las entidades que se superponen:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>Primero</strong>: a las áreas superpuestas se les asignará un valor del primer dataset de la lista.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Último</strong>: a las áreas superpuestas se les asignará un valor del último dataset de la lista.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Más pequeño</strong>: a las áreas superpuestas se les asignará un valor de la entidad más pequeña.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Más grande</strong>: a las áreas superpuestas se les asignará un valor de la entidad más grande.",
	"@@Recast_Overrides_tag0@@": "Una tabla de nombres de variable y valores definidos por el usuario que se utilizan para modificar un dataset de mosaico.",
	"@@Recast_Raster_tag0@@": "El producto ráster al que se aplicará la función Reformular.",
	"@@Region-Group_Add-Link_tag0@@": "Especifica si se añade un campo de vínculo a la tabla de salida.",
	"@@Region-Group_Add-Link_tag1@@": "<strong> Agregar vínculo</strong>: se agrega un elemento ${LINK} a la tabla del ráster de salida.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>Sin vínculo</strong>: la tabla de atributos del ráster de salida solo contendrá los elementos ${Value} y ${Count}.",
	"@@Region-Group_Excluded-Value_tag0@@": "Identifica un valor tal que si una ubicación de celda contiene el valor, no se evaluará ninguna conectividad espacial, independientemente de cómo se especifica la cantidad de vecinos (FOUR o EIGHT).",
	"@@Region-Group_Excluded-Value_tag1@@": "Las celdas con el valor excluido se tratarán como NoData y se eliminarán de los cálculos. Las ubicaciones de celda que contienen el valor excluido recibirán 0 en el ráster de salida.",
	"@@Region-Group_Excluded-Value_tag2@@": "El valor excluido es similar al concepto de valor de fondo o a tener una máscara aplicada. Se debe especificar un valor para este parámetro si se especifica el parámetro <strong>${CROSS}</strong>.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "La cantidad de celdas vecinas a utilizar en la evaluación de conectividad entre celdas.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>FOUR</strong>: define la conectividad entre celdas del mismo valor solo si las celdas están directamente a la izquierda, a la derecha, arriba o abajo de cada uno de los cuatro vecinos más cercanos. Esta es la opción predeterminada.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>EIGHT</strong>: define la conectividad entre celdas del mismo valor si se encuentran dentro de la vecindad inmediata de ocho celdas de cada una. Esto incluye a la derecha, a la izquierda, arriba o en diagonal a la otra.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Define cuáles de los valores de las celdas se deben considerar al probar la conectividad.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>WITHIN</strong>: pruebas de conectividad entre los valores de entrada que son iguales dentro de la misma zona. Esta es la opción predeterminada.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "Las únicas celdas que se pueden agrupar son las celdas que pertenecen a la misma zona (valor) que cumplan con los requerimientos de conectividad espaciales especificados por el parámetro <strong>Número de elementos próximos</strong> (cuatro u ocho direcciones).",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>CROSS</strong>: prueba la conectividad mediante los requerimientos espaciales especificados por el parámetro número de vecinos para utilizar entre celdas con cualquier valor, excepto para el valor identificado para excluir mediante el parámetro valor excluido.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "Cuando se utiliza esta opción, debe especificarse un valor para el parámetro <strong>Valor excluido</strong>.",
	"@@Region-Group_Zone-Raster_tag0@@": "El ráster de entrada obligatorio para el que se identificarán regiones únicas conectadas.",
	"@@Region-Group_Zone-Raster_tag1@@": "Debe ser de tipo entero.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "El campo en la tabla de atributos que define el valor de relleno del grupo de píxeles. En una imagen multibanda, se asignará este valor a todas las bandas.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "El campo en la tabla de atributos que define el radio de crecimiento máximo, expresado en las unidades de referencia espacial de la imagen.",
	"@@Region-Grow_Raster_tag0@@": "El ráster en el que desea realizar esta función.",
	"@@Region-Grow_Seed-Points_tag0@@": "Una clase de entidad de puntos que sirve como valores de inicialización para el algoritmo. Cada punto de semilla se corresponde con una entrada de la tabla de atributos, que incluye el radio de crecimiento máximo, el umbral de similitud e información sobre el valor de relleno.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "El campo en la tabla de atributos que define el umbral de similitud, expresado en la distancia euclidiana en el espacio espectral.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Los valores ausentes en la tabla de reclasificación pueden conservar su valor o reasignarse a NoData.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Desactivado: cualquier píxel del ráster de entrada que no se reclasifique en una tabla de reasignación conservará su valor y será escrito para su ubicación en el ráster de salida. Esta es la opción predeterminada.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Activado: cualquier píxel del ráster de entrada que no se reclasifique en una tabla de reasignación tendrá su valor reasignado a NoData para su ubicación en el ráster de salida.",
	"@@Remap_Input-Field_tag0@@": "Elija el campo que especifica el valor de píxel de entrada que será reasignado.",
	"@@Remap_Input-Field_tag1@@": "Si su tabla presenta un rango de valores, este será el campo de valor mínimo, y se deberá especificar también el parámetro <strong>Campo máx. de entrada</strong>.",
	"@@Remap_Input-Max-Field_tag0@@": "Elija el campo de valor máximo si su tabla especifica un rango de valores.",
	"@@Remap_List_tag0@@": "Especifique los valores de asignación y especifique el rango de valores mínimo y máximo, así como los nuevos valores de reasignación. Además, el rango de valores se puede definir como píxeles NoData.",
	"@@Remap_Output-Field_tag0@@": "Elija el campo que se utilizará como el valor reasignado de salida.",
	"@@Remap_Raster_tag0@@": "El ráster de entrada.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Elija la opción que desee utilizar para establecer los valores de reasignación:",
	"@@Remap_Remap-Definition-Type_tag1@@": "Lista: especifique un rango de valores de píxel para asignarlos a un valor de píxel de salida",
	"@@Remap_Remap-Table-Type_tag0@@": "Elija el tipo de tabla que usará para reasignar su ráster de entrada:",
	"@@Remap_Remap-Table-Type_tag1@@": "Simple: utiliza la entrada <strong>Tabla de reasignación</strong> para reasignar los valores de píxel del <strong>Campo de entrada</strong> al valor correspondiente en el parámetro <strong>Campo de salida</strong>. Este método almacena en caché la tabla de reasignación para que pueda ejecutarse más rápido.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dinámica: este método no almacena en caché la tabla de reasignación y hace una consulta cada vez que se realiza una solicitud (desplazamiento panorámico, zoom o refrescar). Si se modifica la tabla, la siguiente solicitud puede reasignar dinámicamente los valores como corresponda.",
	"@@Remap_Remap-Table-Type_tag9@@": "Reasignación: una tabla específica utilizada para el proceso de reclasificación, en el que cada fila de la tabla solo reasignará en función de cada límite de entidad.",
	"@@Remap_Remap-Table_tag0@@": "Busque la tabla que establece sus valores de reasignación.",
	"@@Reproject_Raster_tag0@@": "El dataset ráster que se va a reproyectar o remuestrear.",
	"@@Reproject_Spatial-Reference_tag0@@": "El sistema de coordenadas que se utiliza para reproyectar los datos.",
	"@@Reproject_X-Cellsize_tag0@@": "La dimensión x en la que se deben remuestrear los datos. Esto es opcional. Si el valor es 0 o menor, el sobre de salida (extensión y tamaños de celda) se calcula a partir del ráster de entrada.",
	"@@Reproject_X-Registration-Point_tag0@@": "La coordenada x que se utiliza para definir la esquina superior izquierda del dataset. Esta coordenada se debe definir en las unidades de la nueva referencia espacial. Si tanto el parámetro <strong>Tamaño de celda X</strong> como <strong>Tamaño de celda Y</strong> son mayores que 0, se utilizan junto con los parámetros <strong>Punto de proceso de registro X</strong> y <strong>Punto de proceso de registro Y</strong> para definir el sobre de salida.",
	"@@Reproject_Y-Cellsize_tag0@@": "La dimensión y en la que se deben remuestrear los datos. Esto es opcional. Si el valor es 0 o menor, el sobre de salida (extensión y tamaños de celda) se calcula a partir del ráster de entrada.",
	"@@Reproject_Y-Registration-Point_tag0@@": "La coordenada y que se utiliza para definir la esquina superior izquierda del dataset. Esta coordenada se debe definir en las unidades de la nueva referencia espacial. Si tanto el parámetro <strong>Tamaño de celda X</strong> como <strong>Tamaño de celda Y</strong> son mayores que 0, se utilizan junto con los parámetros <strong>Punto de proceso de registro X</strong> y <strong>Punto de proceso de registro Y</strong> para definir el sobre de salida.",
	"@@Resample_Input-Cellsize_tag0@@": "El tamaño de celda de píxel del ráster de entrada.",
	"@@Resample_Output-Cellsize_tag0@@": "El tamaño de celda de píxel del ráster de salida. El tamaño de celda puede cambiarse, pero la extensión del dataset ráster permanecerá igual. El remuestreo de un tamaño de celda definido por el usuario puede ser más lento que el valor predeterminado del sistema, ya que el proceso de remuestreo predeterminado del sistema procesa la cantidad mínima de datos a partir de la resolución más cercana posible.",
	"@@Resample_Raster_tag0@@": "El ráster de entrada que se desea remuestrear.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>Vecino más cercano</strong>: calcula el valor de píxel de salida mediante el píxel de entrada más cercano. Los píxeles NoData permanecerán sin cambios en el dataset ráster de salida. Es la opción predeterminada.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Interpolación bilineal</strong>: calcula el valor de píxel utilizando el valor de distancia ponderada de los cuatro píxeles más cercanos. Este método es eficiente desde el punto de vista de cómputo en lo que se refiere al proceso.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Convolución cúbica</strong>: determina el nuevo valor de un píxel basándose en el ajuste de una curva suave a través de los 16 centros de píxeles de entrada más cercanos.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Mayoría</strong>: calcula el valor de píxel utilizando el valor de píxel de mayoría de los 16 píxeles más cercanos. Los píxeles NoData permanecerán sin cambios en el dataset ráster de salida.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Interpolación bilineal plus</strong>: utiliza <strong>Interpolación bilineal</strong>, salvo los píxeles a lo largo de los bordes están definidos como NoData y no se replican ni se tienen en cuenta en el cálculo. Utilice <strong>Interpolación bilineal plus</strong> para datos de teselas, puesto que los bordes coincidirán mejor.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Difuminado gaussiano</strong>: aplica la convolución gaussiana al ráster de origen y calcula el valor de píxel usando el valor de distancia ponderada de los cuatro píxeles más cercanos a partir del ráster difuminado. Resulta apropiado para eliminar el ruido en los datos remuestreados y para reducir la resolución a un tamaño de píxel mayor.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Desenfoque gaussiano plus</strong>: utiliza el mismo método que <strong>Desenfoque gaussiano</strong> salvo los píxeles a lo largo de los bordes, que están definidos como NoData y no se replican ni se tienen en cuenta en el cálculo. Utilice <strong>Desenfoque gaussiano plus</strong> para datos de teselas, puesto que los bordes coincidirán mejor.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Media</strong>: calcula los valores de píxel utilizando el valor medio de todos los píxeles superpuestos para cada píxel de destino.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Mínimo</strong>: calcula los valores de píxel utilizando el valor mínimo de todos los píxeles superpuestos. Los píxeles NoData permanecerán sin cambios en el dataset ráster de salida.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Máximo</strong>: adecuado para datos continuos, produce una imagen de salida más suave que el método de remuestreo Vecino más cercano.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Promedio vectorial</strong>: calcula el promedio de vector de la magnitud-dirección usando todos los píxeles implicados. Este método solo es aplicable para dos rásteres de banda que representan la magnitud y la dirección. Primero convierte la magnitud-dirección en U-V y después toma el promedio aritmético por todos los píxeles implicados para obtener el U-V del píxel de destino y convertirlo de nuevo a magnitud-dirección.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Round-Down_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Round-Down_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Round-Down_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Round-Down_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Round-Down_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Round-Down_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Round-Down_Raster_tag0@@": "Los valores de entrada que se redondearán hacia abajo.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Round-Up_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Round-Up_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Round-Up_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Round-Up_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Round-Up_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Round-Up_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Round-Up_Raster_tag0@@": "Los valores de entrada que se redondearán hacia arriba.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "El tamaño mínimo del segmento, medido en píxeles. Este valor está relacionado con su unidad cartográfica mínima y excluirá los bloques de píxeles menores de este tamaño. Todos los segmentos más pequeños que el valor especificado fusionarán los segmentos más pequeños con el segmento vecino que mejor se ajuste.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "El ráster de entrada que se desea segmentar.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "Los límites de segmento se trazan como una línea de curvas de nivel negra alrededor de cada segmento. Resulta útil para poder distinguir segmentos adyacentes que tengan colores parecidos.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Desactivado: los límites de segmento no se visualizan. Esta es la opción predeterminada.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Activado: los límites de segmento se visualizan con líneas de curvas de nivel negras alrededor de cada segmento.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "La importancia relativa de separar los objetos basándose en características espaciales.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "Los valores enteros válidos varían de 1 a 20. Los valores más pequeños resultan en clases más amplias y más suavizado. Un valor más elevado es adecuado para discriminar entre entidades espacialmente pequeñas y agrupadas en clústeres. Por ejemplo, en una escena urbana, podría clasificar entidades generales con superficie impermeable utilizando un menor valor de detalle espacial o podría clasificar edificios y carreteras como clases separadas utilizando un valor de detalle espacial mayor.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "La importancia relativa de separar los objetos basándose en características de color.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "Los valores de punto flotante válidos varían de 1,0 a 20,0. Los valores más pequeños resultan en clases más amplias y más suavizado. Conviene usar un valor mayor si desea discriminar entre entidades que presentan características espectrales relativamente similares. Por ejemplo, con un mayor valor de detalle espectral en una escena de bosque, podrá distinguir mejor las distintas especies de árboles.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>El tamaño máximo de un segmento. Los segmentos de tamaño mayor que el especificado se dividirán. Utilice este parámetro para evitar artefactos en la capa de salida a consecuencia de los segmentos grandes. El valor predeterminado es -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Seleccione uno de los cuatro tipos de calibración:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta cero</strong>: genera una salida que contiene el coeficiente de brillo del radar.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma cero</strong>: la retrodispersión devuelta a la antena desde una unidad de área del terreno, relacionada con el rango del terreno.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gamma</strong>: medición de la energía emitida y devuelta, útil para determinar los patrones de la antena.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>Ninguno</strong>: no aplicar ninguna corrección. Esta es la opción predeterminada.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "El ráster de entrada GRD o SLC de nivel 1 de Sentinel-1 que desea procesar.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "La función utilizará el archivo de LUT para aplicar la corrección térmica o para eliminar la corrección, en función del contenido de la LUT.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "El ráster de entrada de Sentinel-1 que desea procesar.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "La función utilizará el archivo de LUT para aplicar la corrección térmica o para eliminar la corrección, en función del contenido de la LUT.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Set-Null_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Set-Null_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Set-Null_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Set-Null_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Set-Null_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Set-Null_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Set-Null_False-Raster_tag0@@": "La entrada cuyos valores se utilizan como valores de píxel de salida si la condición es falsa. Puede ser un ráster de punto flotante o entero o un valor constante.",
	"@@Set-Null_Raster_tag0@@": "El ráster de entrada que representa el resultado booleano de una función ráster matemática lógica. Los valores serán 1 (para verdadero) o 0 (para falso). El ráster puede ser un entero o punto flotante.",
	"@@Shaded-Relief_Altitude_tag0@@": "La altitud es el ángulo de elevación del sol sobre el horizonte y varía entre 0 y 90 grados. Un valor de 0 grados indica que el sol se encuentra en el horizonte, es decir, en el mismo plano horizontal que el marco de referencia. Un valor de 90 grados indica que el sol está directamente sobre la cabeza. El valor predeterminado es 45 grados por encima del horizonte.",
	"@@Shaded-Relief_Azimuth_tag0@@": "El acimut es la posición relativa del sol a lo largo del horizonte (en grados). Esta posición la indica el ángulo del sol que se mide en sentido de las agujas del reloj desde el Norte. Un acimut de 0 grados indica el Norte, el Este está a los 90 grados, el Sur a los 180 grados y el Oeste a los 270 grados.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Especifique si se utilizará una rampa de color o un mapa de color para visualizar el relieve sombreado.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Rampa de color</strong>: si selecciona <strong>Rampa de color</strong>, se le pedirá que seleccione una rampa de color adecuada.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Mapa de color</strong>: si selecciona <strong>Mapa de color</strong>, se le pedirá que especifique el archivo de mapa de color a utilizar.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Especifique si se deshabilitará la interpolación de píxeles de borde predeterminada.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Desactivado: el remuestreo bilineal se aplicará de manera uniforme para remuestrear el relieve sombreado. Esta es la opción predeterminada.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Activado: el remuestreo bilineal se usará en el relieve sombreado, excepto a lo largo de los bordes de los rásteres o junto a los píxeles de NoData. Estos píxeles se llenarán con NoData, ya que esto reducirá los efectos de bordes agudos que puedan producirse.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Al usar esta opción se evitarán los artefactos de remuestreo que pueda haber en los bordes de un ráster. Los píxeles de salida situados a lo largo del borde de un ráster o adyacentes a píxeles sin un valor se llenarán con NoData; por tanto, es recomendable que esta opción solo se use cuando haya otros rásteres con píxeles superpuestos disponibles. Cuando haya píxeles superpuestos disponibles, estas áreas de NoData mostrarán los valores de píxeles superpuestos en lugar de quedar en blanco.",
	"@@Shaded-Relief_Raster_tag0@@": "El ráster de elevación de entrada.",
	"@@Shaded-Relief_Scaling_tag0@@": "El resultado sombreado se escala dinámicamente ajustando el factor z con una de estas dos opciones:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>Ninguno</strong>: no se aplica ningún escalado. Es ideal para un solo dataset ráster que cubra un área local. No es recomendable para datasets a escala mundial con grandes variaciones de elevación ni para mapas multiescala, ya que producirá un relieve del terreno con poca variación a pequeña escala.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Ajustado</strong>: se aplica un ajuste no lineal con los valores predeterminados de <strong>Potencia de tamaño de píxel</strong> y <strong>Factor de tamaño de píxel</strong>, que tienen en cuenta una amplia variedad de cambios de altitud (escala) a medida que el visor se acerca y se aleja. La opción <strong>Ajustado</strong> se recomienda cuando se usa un dataset mundial.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "El factor z es un factor de escalado que se utiliza para convertir los valores de elevación para dos motivos:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "Para convertir las unidades de elevación (como metros o pies) a las unidades de coordenadas horizontales del dataset, que pueden ser pies, metros o grados",
	"@@Shaded-Relief_Z-Factor_tag2@@": "Para agregar exageración vertical para lograr un efecto visual.",
	"@@Shaded-Relief_Z-Factor_tag3@@": "El resultado sombreado se escala dinámicamente ajustando el factor z con una de estas dos opciones:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>Ninguno</strong>: no se aplica ningún escalado. Es ideal para un solo dataset ráster que cubra un área local. No es recomendable para datasets a escala mundial con grandes variaciones de elevación ni para mapas multiescala, ya que producirá un relieve del terreno con poca variación a pequeña escala.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Ajustado</strong>: se aplica un ajuste no lineal con los valores predeterminados de <strong>Potencia de tamaño de píxel</strong> y <strong>Factor de tamaño de píxel</strong>, que tienen en cuenta una amplia variedad de cambios de altitud (escala) a medida que el visor se acerca y se aleja. La opción <strong>Ajustado</strong> se recomienda cuando se usa un dataset mundial.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Controla la fuente de iluminación del sombreado.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Tradicional</strong>: calcula el sombreado desde una única dirección de iluminación. Puede definir las opciones <strong>Acimut</strong> y <strong>Altitud</strong> para controlar la ubicación de la fuente de luz. Esta es la opción predeterminada.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Multidireccional</strong>: combina luz de varias fuentes para representar una visualización mejorada del terreno.",
	"@@Shaded-Relief_PSPower_tag0@@": "<strong>Potencia de tamaño de píxel</strong> refleja los cambios de altitud (o escala) a medida que el visor se acerca y se aleja en la visualización del mapa. Es el exponente aplicado al término de tamaño de píxel en la ecuación que controla la velocidad a la que cambia el <strong>factor Z</strong> para evitar una pérdida de relieve significativa.",
	"@@Shaded-Relief_PSPower_tag1@@": "Este parámetro solo es válido cuando el tipo de <strong>Escalado</strong> es <strong>Ajustado</strong>. El valor predeterminado es 0,664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "<strong>Factor de tamaño de píxel</strong> refleja los cambios de escala a medida que el visor se acerca y se aleja en la visualización del mapa. Controla la velocidad a la que cambia el <strong>factor Z</strong>.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Este parámetro solo es válido cuando el tipo de <strong>Escalado</strong> es <strong>Ajustado</strong>. El valor predeterminado es 0,024.",
	"@@Sin_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Sin_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Sin_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Sin_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Sin_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Sin_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Sin_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Sin_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Sin_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Sin_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Sin_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Sin_Raster_tag0@@": "La entrada para la cual se calculan los valores del seno.",
	"@@SinH_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@SinH_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@SinH_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@SinH_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@SinH_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@SinH_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@SinH_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@SinH_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@SinH_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@SinH_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@SinH_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@SinH_Raster_tag0@@": "La entrada para la cual se calculan los valores del seno hiperbólico.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "Ráster de entrada que muestra la dirección del flujo de cada celda.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "El ráster de dirección de flujo se puede crear ejecutando la función <strong>Dirección de flujo</strong>.",
	"@@Slope_DEM_tag0@@": "El ráster de elevación de entrada.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Al usar esta opción se evitarán los artefactos de remuestreo que pueda haber en los bordes de un ráster. Los píxeles de salida situados a lo largo del borde de un ráster o adyacentes a píxeles sin un valor se llenarán con NoData; por tanto, es recomendable que esta opción solo se use cuando haya otros rásteres con píxeles superpuestos disponibles. Cuando haya píxeles superpuestos disponibles, estas áreas de NoData mostrarán los valores de píxeles superpuestos en lugar de quedar en blanco.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Desactivado: el remuestreo bilineal se aplicará de manera uniforme para remuestrear la pendiente. Esta es la opción predeterminada.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Activado: el remuestreo bilineal se usará en la pendiente, excepto a lo largo de los bordes de los rásteres o junto a los píxeles NoData. Estos píxeles se llenarán con NoData, ya que esto reducirá los efectos de bordes agudos que puedan producirse.",
	"@@Slope_Scaling_tag0@@": "La inclinación de la pendiente se puede enviar como un valor en grados o la elevación en porcentaje. Existen tres opciones para el <strong>Escalado</strong>:",
	"@@Slope_Scaling_tag3@@": "<strong>Grados</strong>: la inclinación de la pendiente calculada en grados. Los valores varían de 0 a 90.",
	"@@Slope_Scaling_tag5@@": "<strong>Percent_Rise</strong>: la inclinación de la pendiente se calcula como valores de porcentaje. Los valores varían de 0 a infinito. Una superficie plana tiene un aumento del 0 por ciento, mientras que una superficie de 45 grados tiene un aumento del 100 por ciento. A medida que la superficie se vuelve más vertical, la elevación en porcentaje es cada vez mayor.",
	"@@Slope_Scaling_tag7@@": "<strong>Escalado</strong>: la inclinación de la pendiente se calcula igual que los GRADOS, pero el factor z se ajusta para la escala. Utiliza los valores <strong>Potencia del tamaño de píxel</strong> y <strong>Factor del tamaño de píxeles</strong> que tienen en cuenta los cambios de resolución (escala) a medida que el visor se acerca y se aleja. Esto es recomendable al utilizar datasets mundiales, particularmente al utilizar una pendiente como superficie de visualización.",
	"@@Slope_Scaling_tag13@@": "El factor z se ajusta mediante la siguiente ecuación:",
	"@@Slope_Scaling_tag14@@": "Factor Z ajustado = (Factor Z) + (Tamaño de píxel)",
	"@@Slope_Scaling_tag15@@": "× (Factor de tamaño de píxeles)",
	"@@Slope_Scaling_tag16@@": "Potencia de tamaño de píxel",
	"@@Slope_Z-Factor_tag0@@": "El <strong>factor z</strong> es un factor de escalado que se utiliza para convertir los valores de elevación para dos motivos:",
	"@@Slope_Z-Factor_tag3@@": "Para convertir las unidades de elevación (como metros o pies) a las unidades de coordenadas horizontales del dataset, que pueden ser pies, metros o grados",
	"@@Slope_Z-Factor_tag4@@": "Para agregar exageración vertical para lograr un efecto visual.",
	"@@Slope_PSPower_tag0@@": "<strong>Potencia de tamaño de píxel</strong> refleja los cambios de altitud (o escala) a medida que el visor se acerca y se aleja en la visualización del mapa. Es el exponente aplicado al término de tamaño de píxel en la ecuación que controla la velocidad a la que cambia el <strong>factor Z</strong> para evitar una pérdida de relieve significativa.",
	"@@Slope_PSPower_tag1@@": "Este parámetro solo es válido cuando el tipo de <strong>Escalado</strong> es <strong>Escalado</strong>. El valor predeterminado es 0,664.",
	"@@Slope_PSZFactor_tag0@@": "<strong>Factor de tamaño de píxel</strong> refleja los cambios de escala a medida que el visor se acerca y se aleja en la visualización del mapa. Controla la velocidad a la que cambia el <strong>factor Z</strong>.",
	"@@Slope_PSZFactor_tag1@@": "Este parámetro solo es válido cuando el tipo de <strong>Escalado</strong> es <strong>Escalado</strong>. El valor predeterminado es 0,024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "La capa ráster de acumulación de flujo de entrada.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "Puede crearse con la función <strong>Acumulación de flujo</strong>.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "Campo utilizado para asignar valores a las ubicaciones de punto corriente.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "Las ubicaciones de punto de fluidez de entrada que se alinearán.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "Para una capa ráster de entrada, todas las celdas que no sean NoData (es decir, que tengan un valor) se considerarán puntos de fluidez y se alinearán.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "La distancia máxima, en unidades de mapa, para buscar una celda de mayor flujo acumulado.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Especifica el valor medio de ruido aditivo. Un ruido mayor significa que se producirá menos suavizado, mientras que un valor menor produce más suavizado.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Este parámetro solo es válido cuando el <strong>Tipo de filtro</strong> es <strong>Filtro Lee</strong> y el <strong>Modelo de ruido</strong> es <strong>Ruido aditivo</strong> o <strong>Ruido aditivo y multiplicativo</strong>. El valor predeterminado es 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Especifica la extensión del efecto de vaciado exponencial en el filtrado. Un valor de vaciado mayor conserva mejor los bordes, pero suaviza menos, mientras que un valor menor produce más suavizado. Un valor de 0 genera la misma salida que un filtro de paso bajo.",
	"@@Speckle_Damping-Factor_tag1@@": "Este parámetro solo es válido cuando el <strong>Tipo de filtro</strong> es <strong>Filtro Lee mejorado</strong> o <strong>Filtro Congelamiento</strong>. El valor predeterminado es 1.",
	"@@Speckle_Filter-Size_tag0@@": "Especifica el tamaño de la ventana de píxeles que se utiliza para filtrar el ruido:",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "Especifica el tipo de filtro que se va a utilizar en el algoritmo de suavizado para eliminar el ruido de moteado:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Filtro Lee</strong>: reduce el ruido de moteado al aplicar un filtro espacial a cada píxel en una imagen, el cual filtra los datos con base en estadísticas locales calculadas dentro de una ventana cuadrada. Este filtro resulta útil si desea suavizar los datos moteados que tienen un componente aditivo o multiplicativo. Esta es la opción predeterminada.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Filtro Lee mejorado</strong>: una versión adaptada del filtro Lee que incluye <strong>Factor de vaciado</strong> y <strong>Cantidad de aspectos</strong>. Este filtro resulta útil si desea reducir el moteado a la vez que conserva la información de textura.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Filtro Congelamiento</strong>: reduce el ruido de moteado con un filtro simétrico circular vaciado exponencialmente que usa estadísticas locales dentro de ventanas de filtro individuales. Este filtro resulta útil si desea reducir el moteado a la vez que conserva los bordes de las imágenes de radar.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Filtro Kuan</strong>: de forma similar al filtro Lee, este filtro aplica un filtro espacial a cada píxel en una imagen y filtra los datos con base en estadísticas locales calculadas dentro de una ventana cuadrada. Este filtro resulta útil si desea reducir el moteado a la vez que conserva los bordes de las imágenes de radar.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Especifica el valor medio de ruido multiplicativo. Un ruido mayor significa que se producirá menos suavizado, mientras que un valor menor produce más suavizado.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Este parámetro solo es válido cuando el <strong>Tipo de filtro</strong> es <strong>Filtro Lee</strong> y el <strong>Modelo de ruido</strong> es <strong>Ruido aditivo</strong> o <strong>Ruido aditivo y multiplicativo</strong>. El valor predeterminado es 1.",
	"@@Speckle_Noise-Model_tag0@@": "Especifica el tipo de ruido que está reduciendo la calidad de la imagen de radar:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Ruido multiplicativo</strong>: ruido de señal aleatorio que se multiplica en la señal relevante durante la captura o transmisión",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Ruido aditivo</strong>: ruido de señal aleatorio que se agrega a la señal relevante durante la captura o transmisión",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Ruido aditivo y multiplicativo</strong>: ambos modelos de ruido",
	"@@Speckle_Noise-Variance_tag0@@": "Especifica la varianza de ruido de la imagen de radar.",
	"@@Speckle_Noise-Variance_tag1@@": "Este parámetro solo es válido cuando el <strong>Tipo de filtro</strong> es <strong>Filtro Lee</strong> y el <strong>Modelo de ruido</strong> es <strong>Ruido aditivo</strong> o <strong>Ruido aditivo y multiplicativo</strong>. El valor predeterminado es 0,25.",
	"@@Speckle_Number-of-Looks_tag0@@": "Especifica la cantidad de aspectos de la imagen, que controla el suavizado de la imagen y estima la varianza de ruido. Un valor menor significa que se producirá más suavizado, mientras que un valor mayor retiene más entidades de la imagen.",
	"@@Speckle_Number-of-Looks_tag1@@": "Este parámetro solo es válido cuando el <strong>Tipo de filtro</strong> es <strong>Filtro Lee</strong> y el <strong>Modelo de ruido</strong> es <strong>Ruido multiplicativo</strong> o cuando el <strong>Tipo de filtro</strong> es <strong>Filtro Kuan</strong>. El valor predeterminado es 1.",
	"@@Speckle_Raster_tag0@@": "El ráster de entrada.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "La matriz usada para convertir el ráster de entrada.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "La ecuación que se utiliza para realizar esta conversión es:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Output Band_R = Weight_P * Band_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "donde:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Band_R es una banda de salida, donde R es un número entre 1 y el número de bandas de salida.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Weight_P es una lista de pesos delimitada por comas, 1 para cada banda de entrada. La suma de los pesos para cada banda debería ser igual a 1.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "Band_C es la imagen de entrada, donde C es un número entre 1 y el número de bandas de la imagen de entrada.",
	"@@Spectral-Conversion_Raster_tag0@@": "El ráster de entrada.",
	"@@Spectral-Conversion_Raster_tag1@@": "Puede ser un dataset ráster, un dataset de mosaico o un servicio de imágenes.",
	"@@Spectral-Conversion_Size_tag0@@": "El número de filas y columnas de la <strong>Matriz de conversión</strong>.",
	"@@Square_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Square_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Square_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Square_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Square_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Square_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Square_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Square_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Square_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Square_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Square_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Square_Raster_tag0@@": "Los valores de entrada que se redondearán hacia abajo.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Square-Root_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Square-Root_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Square-Root_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Square-Root_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Square-Root_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Square-Root_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Square-Root_Raster_tag0@@": "Los valores de entrada que se usarán para buscar la raíz cuadrada.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Defina los valores estadísticos de cada banda.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "La columna ${Histogram} es un campo de solo lectura que puede completarse usando el parámetro <strong>Importar</strong>. Si importa un archivo de histograma, la columna ${Histogram} se marcará como <strong>Definido</strong>.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Importe la información de estadísticas e histograma de cualquier ráster o archivo XML existente.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "El ráster de entrada que requiere las estadísticas y el histograma que se desea definir.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Defina los valores estadísticos de cada banda.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "Ráster de entrada que muestra la dirección del flujo de cada celda.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "El ráster de dirección de flujo se puede crear ejecutando la función <strong>Dirección de flujo</strong>.",
	"@@Stream-Link_Stream-Raster_tag0@@": "El ráster de entrada que representa una red de curso de agua lineal.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "Ráster de entrada que muestra la dirección del flujo de cada celda.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "El ráster de dirección de flujo se puede crear ejecutando la función <strong>Dirección de flujo</strong>.",
	"@@Stream-Order_Order-Method_tag0@@": "El método utilizado para asignar la clasificación de cursos de agua.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLER</strong>: el método de clasificación de cursos de agua propuesto por Strahler en 1952. La clasificación de cursos de agua solo aumenta cuando los cursos de agua del mismo orden intersecan. La intersección de un vínculo de primer orden y de segundo orden mantendrá un vínculo de segundo orden, en lugar de crear un vínculo de tercer orden. Esta es la opción predeterminada.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong>: el método de clasificación de cursos de agua por magnitud, propuesto por Shreve en 1967. A todos los vínculos sin afluentes se les asigna una magnitud (un orden) de 1. Las magnitudes son pendientes descendentes aditivas. Cuando dos vínculos intersecan, se suman sus magnitudes y éstas se asignan al vínculo de pendiente descendente.",
	"@@Stream-Order_Stream-Raster_tag0@@": "Un ráster de curso de agua de entrada que representa una red de curso de agua lineal.",
	"@@Stretch_Auto-Gamma_tag0@@": "Utilice <strong>Gamma automático</strong> para calcular gamma a partir de las estadísticas y el histograma el dataset. Las estadísticas pueden ser las calculadas por la propia función, pero el software también puede calcular las estadísticas si elige una capa.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Active la casilla de verificación <strong>Ajuste de rango dinámico</strong> si desea que las estadísticas se calculen únicamente a partir de los píxeles mostrados en la pantalla. Esta opción generalmente se aplica cuando la imagen se publicará y se utilizará en una aplicación Web que no puede realizar este tipo de extensión.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Active la casilla de verificación <strong>Estimar estadísticas</strong> si desea estimar las estadísticas. Las estadísticas estimadas se calculan a partir de un muestreo de 1.000 por 1.000 del centro del ráster y se usan en la extensión.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Si esta opción está activada y el ráster tiene estadísticas, o bien si se han introducido valores en la tabla <strong>Estadísticas</strong>, se utilizarán dichas estadísticas en vez de calcularse, a menos que la extensión requiera un histograma. Si la extensión requiere un histograma que no existe, se calculará.",
	"@@Stretch_Gamma_tag0@@": "Use la barra deslizante para definir manualmente el valor <strong>Gamma</strong>.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Especifique el valor n para el número de desviaciones estándar que se van a usar. Este método se utiliza para enfatizar la proporción de los valores de entidad que varía con respecto al valor medio; es más eficaz cuando se utiliza con datos distribuidos normalmente.",
	"@@Stretch_Output-Maximum_tag0@@": "Defina el valor de píxel más alto para el histograma.",
	"@@Stretch_Output-Maximum_tag1@@": "<strong>Mínimo de salida</strong> y <strong>Máximo de salida</strong> definirán el rango de valores a los que se aplicará una extensión de contraste lineal.",
	"@@Stretch_Output-Minimum_tag0@@": "Defina el valor de píxel más bajo para el histograma.",
	"@@Stretch_Output-Minimum_tag1@@": "<strong>Mínimo de salida</strong> y <strong>Máximo de salida</strong> definirán el rango de valores a los que se aplicará una extensión de contraste lineal.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Especifique el porcentaje de los valores altos que se deben excluir de la extensión.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "Los valores válidos se encuentran entre 0 y 99.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Especifique el porcentaje de los valores bajos que se deben excluir de la extensión.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "Los valores válidos se encuentran entre 0 y 99.",
	"@@Stretch_Raster_tag0@@": "Ráster de entrada para la extensión de contraste.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "El <strong>nivel de extensión</strong> determina qué proporción de la función sigmoidea se va a utilizar en el aumento. Con un valor bajo (por ejemplo, 1) solo se utilizará la parte central de la curva, que tiende a producir colores apagados y difuminados. Con un valor alto (por ejemplo, 6) se utilizará toda la curva, que tiende a producir colores audaces y nítidos.",
	"@@Stretch_Statistics_tag0@@": "Puede introducir sus propias estadísticas en el cuadro de diálogo. De forma predeterminada, las estadísticas se recuperan de los datos; sin embargo, en su lugar, se utilizará cualquier valor que especifique en este parámetro.",
	"@@Stretch_Type_tag0@@": "Elija el método de tipo de extensión:",
	"@@Stretch_Type_tag1@@": "Ninguna: sin aumento de contraste",
	"@@Stretch_Type_tag2@@": "StdDev: extensión de desviación estándar",
	"@@Stretch_Type_tag3@@": "MinMax: extensión mínima-máxima",
	"@@Stretch_Type_tag4@@": "PercentMinMax: extensión de porcentaje de recorte",
	"@@Stretch_Type_tag5@@": "Sigmoideo: extensión sigmoidea",
	"@@Stretch_Use-Gamma_tag0@@": "Active la casilla de verificación <strong>Usar gamma</strong> si desea aplicar una extensión gamma.",
	"@@Swath_Cellsize_tag0@@": "El tamaño de celda del ráster de salida se detectará automáticamente; no obstante, puede cambiarlo si lo desea. El tamaño de celda puede cambiarse, pero la extensión del dataset ráster permanecerá igual.",
	"@@Swath_Interpolation-Method_tag0@@": "Existen cuatro métodos de remuestreo para esta función:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Vecino más cercano</strong>: calcula el valor de píxel usando el píxel más cercano. Si no hay ningún píxel de origen, no se podrá crear ningún píxel nuevo en la salida.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Bilineal</strong>: calcula el valor de píxel con el valor de distancia ponderada de los cuatro píxeles más cercanos.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>Simplificación lineal</strong>: utiliza una red irregular triangulada desde los puntos centrales de cada celda del ráster irregular para interpolar una superficie que, después, se convierte a un ráster regular.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Vecino natural</strong>: realiza una asignación de vecino más cercano, es el método de interpolación más rápido. Se utiliza principalmente para datos discretos, como la clasificación del uso del suelo, ya que no cambiará los valores de las celdas. El error espacial máximo será la mitad del tamaño de celda.",
	"@@Swath_Raster_tag0@@": "El ráster cuadriculado irregular que se va a remuestrear.",
	"@@Tan_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Tan_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Tan_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Tan_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Tan_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Tan_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Tan_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Tan_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Tan_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Tan_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Tan_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Tan_Raster_tag0@@": "La entrada para la cual se calculan los valores de la tangente.",
	"@@TanH_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@TanH_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@TanH_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@TanH_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@TanH_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@TanH_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@TanH_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@TanH_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@TanH_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@TanH_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@TanH_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@TanH_Raster_tag0@@": "La entrada para la cual se calculan los valores de la tangente hiperbólica.",
	"@@Tasseled-Cap_Raster_tag0@@": "El ráster de entrada en el que realizar la transformación Tasseled Cap.",
	"@@Times_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Times_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Times_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Times_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Times_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Times_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Times_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Times_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Times_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Times_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Times_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Times_Raster_tag0@@": "La entrada que contiene los valores que se multiplicarán.",
	"@@Times_Raster_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Times_Raster2_tag0@@": "La entrada que contiene los valores por los que se multiplicará la primera entrada.",
	"@@Times_Raster2_tag1@@": "Se puede utilizar un valor constante como entrada para este parámetro, siempre que se especifique un ráster para el otro parámetro.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": ": elija el tipo de transposición que desee realizar o especifique una transposición personalizada:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8 Cirrus",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8 Cloud",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8 Cloud Shadow",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8 Designated Fill",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8 Dropped Frame",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8 Snow/Ice",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8 Terrain Occlusion",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8 Vegetation",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8 Water",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Definido por el usuario",
	"@@Transpose-Bits_Constant-Value_tag0@@": ": valor opcional que se utilizará para rellenar todos los bits que no están implicados en la transposición. Este parámetro está expuesto cuando el parámetro <strong>Generar ráster de relleno a partir de constante</strong> tiene el valor <strong>Sí</strong>.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Especificar un dataset ráster que se utilizará para rellenar todos los bits que no están implicados en la transposición. Este parámetro está expuesto cuando el parámetro <strong>Generar ráster de relleno a partir de constante</strong> tiene el valor <strong>No</strong>.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Generar un ráster de relleno utilizando un valor constante:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Sí</strong>: se generará un ráster utilizando un valor constante para rellenar los bits que no intervienen en la transposición. Esta es la opción predeterminada.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>No</strong>: se generará un ráster utilizando valores de píxel de un dataset ráster existente para rellenar los bits que no intervienen en la transposición.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "Una tabla de solo lectura que muestra los bits de salida y de entrada que están en su lugar.",
	"@@Transpose-Bits_Raster_tag0@@": "El ráster de entrada que se va a desempaquetar y reasignar.",
	"@@Unit-Conversion_From-Unit_tag0@@": "El tipo de unidad original de los píxeles.",
	"@@Unit-Conversion_Raster_tag0@@": "El ráster de entrada que contendrá las unidades convertidas.",
	"@@Unit-Conversion_To-Unit_tag0@@": "El tipo de unidad convertida de los píxeles.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Especifica cómo se midió el componente de dirección.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Geográfico: 0° norte y 90° este",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Aritmético: 0° este y 90° norte",
	"@@Vector-Field_Input-Data-Type_tag0@@": "El tipo de campo de vector que representan sus entradas.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Desconocido: es desconocido independientemente de si las entradas representan U-V o Magnitud-Dirección.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V: los datos de entrada representan componentes U y V.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Magnitud-Dirección: los datos de entrada representan la magnitud y la dirección.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Especifica el tipo de campo de vector que representa su salida.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Magnitud-Dirección: los datos de salida representan la magnitud y la dirección.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V: los datos de salida representan componentes U y V.",
	"@@Vector-Field_Raster1_tag0@@": "El primer ráster de entrada.",
	"@@Vector-Field_Raster1_tag1@@": "Este será el valor U o la magnitud.",
	"@@Vector-Field_Raster2_tag0@@": "El segundo ráster de entrada.",
	"@@Vector-Field_Raster2_tag1@@": "Este será el valor V o la dirección.",
	"@@Viewshed_Analysis-Method_tag0@@": "Seleccione el método por el cual se calculará la visibilidad. Esta opción le permite restar cierto grado de precisión para aumentar el rendimiento.",
	"@@Viewshed_Analysis-Method_tag1@@": "Todas las líneas de visión: se ejecuta una línea de visión para cada píxel del ráster a fin de establecer las áreas visibles. Este es el método predeterminado.",
	"@@Viewshed_Analysis-Method_tag2@@": "Líneas de visión de perímetro: las líneas de visión solo se ejecutan para los píxeles en el perímetro de las áreas visibles a fin de establecer las áreas de visibilidad. Con este método se obtiene un rendimiento mejor que con el método <strong>Todas las líneas de visión</strong>, ya que en el cálculo se utilizan menos líneas de visión.",
	"@@Viewshed_Analysis-Type_tag0@@": "Seleccione el tipo de análisis de visibilidad que desea realizar, ya sea determinando el grado de visibilidad de cada celda para los observadores, o bien identificando qué observadores estarán visibles para cada ubicación de la superficie.",
	"@@Viewshed_Analysis-Type_tag1@@": "Frecuencia: el número de veces que cada ubicación de píxel del ráster de superficie de entrada puede ser vista por las ubicaciones de observación de entrada (como puntos o vértices para entidades de observador de polilínea). Esta es la opción predeterminada.",
	"@@Viewshed_Analysis-Type_tag2@@": "Observadores: la salida identifica exactamente qué puntos de observador están visibles desde cada ubicación de superficie de ráster. Con este tipo de análisis, el número máximo permitido de observadores de entrada es 32.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Este valor define el ángulo final del rango de escaneo horizontal. El valor se debe especificar en grados de 0 a 360,0, con 0 orientado al norte. El valor predeterminado es 360.0.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Puede ser un campo del dataset de <strong>Entidades de observador</strong> de entrada o un valor numérico. Si se establece un valor para este parámetro, ese valor se aplicará a todos los observadores. Para especificar valores diferentes para cada observador, establezca este parámetro con un campo del dataset <strong>Entidades de observador</strong>.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Este valor define el ángulo inicial del rango de escaneo horizontal. El valor se debe especificar en grados de 0 a 360,0, con 0 orientado al norte. El valor predeterminado es 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Puede ser un campo del dataset de <strong>Entidades de observador</strong> de entrada o un valor numérico. Si se establece un valor para este parámetro, ese valor se aplicará a todos los observadores. Para especificar valores diferentes para cada observador, establezca este parámetro con un campo del dataset <strong>Entidades de observador</strong>.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "Tipo de distancia del parámetro de radio interno.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Desactivado: el <strong>radio interno</strong> se va a interpretar como una distancia 2D. Esta es la opción predeterminada.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Activado: el <strong>radio interno</strong> se va a interpretar como una distancia 3D.",
	"@@Viewshed_Inner-Radius_tag0@@": "Este valor define la distancia (mínima) inicial desde donde se determina la visibilidad. Los píxeles que están más cerca que esta distancia se consideran no visibles en la salida, pero pueden seguir bloqueando la visibilidad de los píxeles entre el <strong>Radio interno</strong> y el <strong>Radio externo</strong>. El valor predeterminado es 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "Puede ser un campo del dataset de <strong>Entidades de observador</strong> de entrada o un valor numérico. Si se establece un valor para este parámetro, ese valor se aplicará a todos los observadores. Para especificar valores diferentes para cada observador, establezca este parámetro con un campo del dataset <strong>Entidades de observador</strong>.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Este valor se usa para definir las elevaciones de superficie de los vértices o puntos de observador.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Puede ser un campo del dataset de <strong>Entidades de observador</strong> de entrada o un valor numérico. Si no se especifica este parámetro, la elevación del observador se obtendrá del ráster de superficie mediante interpolación bilineal. Si se establece un valor para este parámetro, ese valor se aplicará a todos los observadores. Para especificar valores diferentes para cada observador, establezca este parámetro con un campo del dataset <strong>Entidades de observador</strong>.",
	"@@Viewshed_Observer-Features_tag0@@": "La clase de entidad de entrada obligatoria que identifica las ubicaciones del observador. Pueden ser entidades de punto, multipunto o de polilínea.",
	"@@Viewshed_Observer-Features_tag1@@": "La clase de entidad de entrada se transforma en un sistema de coordenadas geocéntricas 3D durante el cálculo de la visibilidad. En el cálculo se ignorarán los observadores que estén fuera de la extensión del ráster de superficie o ubicados en celdas NoData.",
	"@@Viewshed_Observer-Offset_tag0@@": "Este valor indica una distancia vertical (en unidades de superficie) que se añadirá a la elevación del observador. Debe ser un entero positivo o un valor de punto flotante.",
	"@@Viewshed_Observer-Offset_tag1@@": "Puede ser un campo del dataset de <strong>Entidades de observador</strong> de entrada o un valor numérico. Si se establece un valor para este parámetro, ese valor se aplicará a todos los observadores. Para especificar valores diferentes para cada observador, establezca este parámetro con un campo del dataset <strong>Entidades de observador</strong>.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Tipo de distancia del parámetro de radio externo.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Desactivado: el <strong>radio externo</strong> se va a interpretar como una distancia 2D. Esta es la opción predeterminada.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Activado: el <strong>radio externo</strong> se va a interpretar como una distancia 3D.",
	"@@Viewshed_Outer-Radius_tag0@@": "Este valor define la distancia máxima desde donde se determina la visibilidad. Los píxeles situados más allá de esta distancia se excluyen del análisis.",
	"@@Viewshed_Outer-Radius_tag1@@": "Puede ser un campo del dataset de <strong>Entidades de observador</strong> de entrada o un valor numérico. Si se establece un valor para este parámetro, ese valor se aplicará a todos los observadores. Para especificar valores diferentes para cada observador, establezca este parámetro con un campo del dataset <strong>Entidades de observador</strong>.",
	"@@Viewshed_Raster_tag0@@": "El ráster de superficie de entrada obligatorio. El ráster puede ser un entero o punto flotante.",
	"@@Viewshed_Raster_tag1@@": "La entrada se transforma en un sistema de coordenadas geocéntricas 3D durante el cálculo de la visibilidad. Las celdas NoData del ráster de entrada no bloquean la determinación de visibilidad.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Coeficiente de la refracción de la luz visible en el aire.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "El valor predeterminado es 0.13.",
	"@@Viewshed_Surface-Offset_tag0@@": "Este valor indica una distancia vertical (en unidades de superficie) que se sumará al valor z de cada píxel de destino cuando se considere para la visibilidad. Debe ser un entero positivo o un valor de punto flotante.",
	"@@Viewshed_Surface-Offset_tag1@@": "Puede ser un campo del dataset de <strong>Entidades de observador</strong> de entrada o un valor numérico. Si se establece un valor para este parámetro, ese valor se aplicará a todos los observadores. Para especificar valores diferentes para cada observador, establezca este parámetro con un campo del dataset <strong>Entidades de observador</strong>.",
	"@@Viewshed_Vertical-Error_tag0@@": "La cantidad de incertidumbre, medida como error cuadrático medio (RMSE), en los valores de elevación de superficie. Se trata de un valor de punto flotante que representa el error esperado en los valores de elevación de entrada. Cuando este parámetro tiene asignado un valor mayor que 0, el ráster de visibilidad de salida será de punto flotante. En este caso, cada uno de los valores de píxel del ráster de visibilidad de salida representará la suma de probabilidades de que la celda esté visible para cualquiera de los observadores.",
	"@@Viewshed_Vertical-Error_tag1@@": "Cuando el <strong>Tipo de análisis</strong> es <strong>Observadores</strong> o el <strong>Método de análisis</strong> es <strong>Líneas de visión de perímetro</strong>, este parámetro se deshabilita.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Este valor define el límite del ángulo vertical inferior del escaneo debajo de un plano horizontal. El valor debe especificarse en grados de -90.0 a 0 y puede ser un entero o un número de punto flotante. El valor predeterminado es -90,0.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Puede ser un campo del dataset de <strong>Entidades de observador</strong> de entrada o un valor numérico. Si se establece un valor para este parámetro, ese valor se aplicará a todos los observadores. Para especificar valores diferentes para cada observador, establezca este parámetro con un campo del dataset <strong>Entidades de observador</strong>.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Este valor define el límite del ángulo vertical superior del escaneo sobre un plano horizontal. El valor debe especificarse en grados de 0 a 90.0 y puede ser un entero o un número de punto flotante. El valor predeterminado es 90.0.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Puede ser un campo del dataset de <strong>Entidades de observador</strong> de entrada o un valor numérico. Si se establece un valor para este parámetro, ese valor se aplicará a todos los observadores. Para especificar valores diferentes para cada observador, establezca este parámetro con un campo del dataset <strong>Entidades de observador</strong>.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "Ráster de entrada que muestra la dirección del flujo de cada celda.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "El ráster de dirección de flujo se puede crear ejecutando la función <strong>Dirección de flujo</strong>.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "Las ubicaciones de punto de fluidez de entrada.",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Este ráster representa las celdas por encima de las cuales se determina el área de cuenca contribuyente o de captación. Todas las celdas que no son NoData se utilizarán como celdas de origen.",
	"@@Watershed_Pour-Point-Field_tag0@@": "Campo utilizado para asignar valores a las ubicaciones de punto corriente.",
	"@@Watershed_Pour-Point-Field_tag1@@": "En un dataset ráster de punto de fluidez, ${Value} se utiliza de forma predeterminada.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Weighted-Overlay_Scales_tag0@@": "El rango para los nuevos valores mediante el cual se realiza una nueva representación cartográfica de los valores antiguos.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "La tabla de superposición ponderada se compone de cuatro partes:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Capa: todos los rásteres de entrada deben ser de tipo entero.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Influencia: cada ráster de entrada se pondera de acuerdo con su importancia, o su influencia, como un porcentaje relativo. La suma de los porcentajes de influencia debe ser igual a 100, y cada peso debe especificarse mediante valores enteros.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Campo: un campo de enteros o de cadenas de caracteres en el ráster de entrada que se usa para la ponderación.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Tabla de reasignación: a cada valor de un ráster de entrada se le asigna un nuevo valor de escala basado en la tabla de reasignación. El valor de la escala puede ser un valor válido o un valor NoData.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "La tabla de suma ponderada se define mediante tres propiedades:",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Capa: el ráster que se pondera.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Campo: el campo del ráster que se utilizará para la ponderación.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Peso: el valor de la ponderación por el cual se multiplicará el ráster. Puede ser cualquier valor decimal positivo o negativo.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "Un ráster de una única banda en el que los valores de píxeles representan la temperatura ambiente del aire.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "La unidad de medida asociada al ráster de temperatura de entrada. Las unidades de entrada disponibles son Celsius, Fahrenheit y Kelvin.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "La unidad de medida asociada al ráster de salida. Las unidades de salida disponibles son Celsius, Fahrenheit y Kelvin.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "Un ráster de una única banda en el que los valores de píxeles representan la velocidad del viento.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Define la unidad de medida asociada con el ráster de velocidad del viento:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Millas por hora (mph)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Kilómetros por hora (km/h)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Metros por segundo (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Pies por segundo (pies/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Nudos (kn)",
	"@@Zonal-Remap_Background-Value_tag0@@": "El valor de píxel inicial del ráster de salida, antes de la nueva representación cartográfica de los píxeles de entrada.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "El valor que se asignará a un píxel que no cumple ninguna de las condiciones establecidas en la <strong>Tabla de atributos zonales</strong>.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "También será el valor del píxel de salida si el parámetro <strong>Nombre de campo de valor de salida</strong> se deja sin especificar o si el valor de salida del umbral zonal correspondiente se deja sin especificar en la <strong>Tabla de atributos zonales</strong>.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "El nombre de campo que contiene el valor máximo por debajo del cual se realiza la nueva representación cartográfica del píxel de entrada.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Si se deja sin especificar, o si el valor del campo es nulo, no se probará el valor máximo de los valores de píxel.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "El nombre de campo que contiene el valor mínimo por encima del cual se realiza la nueva representación cartográfica del píxel de entrada.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Si se deja sin especificar, o si el valor del campo es nulo, no se probará el valor mínimo de los valores de píxel.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "El nombre de campo que contiene el valor objetivo con el que se realiza la nueva representación cartográfica del píxel de entrada.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Si se deja sin especificar, o si el valor de campo es nulo, los valores de píxel con la nueva representación cartográfica se establecen con el <strong>Valor de salida predeterminado</strong>.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "Un ráster de banda única de entrada obligatorio que contiene los valores de píxel de los que desea realizar una nueva representación cartográfica.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "Consulta opcional aplicada a la <strong>Tabla de atributos zonales</strong>.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "Si utilizara la tabla anterior como ejemplo, la consulta sería ${Variable1 = 'bare earth' AND Variable2 = 'California'}.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "Una tabla de entrada obligatoria que contiene al menos tres campos. Debe tener el valor mínimo de umbral, el valor máximo de umbral y el valor objetivo. El valor objetivo es el campo que contendrá el valor reasignado.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "El formato del archivo puede ser una clase de entidad, un servicio de entidades o cualquier tipo de tabla que se admita en ArcGIS.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "El nombre del campo, en la <strong>Tabla de atributos zonales</strong>, que contiene los valores de Id. de zona.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "Los valores de Id. de zona se vinculan directamente a los Id. de zona de su ráster zonal. Proporcionan otro nivel de filtro al realizar la nueva representación cartográfica. Si no hay ningún Id. de zona asociado a un determinado registro de la tabla, no participará en la nueva representación cartográfica.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "Un ráster de una banda donde cada píxel define zonas asociadas a una determinada ubicación. Una zona se define como todas las áreas de la entrada que tienen el mismo valor. No es necesario que las áreas sean contiguas.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Especifica el método utilizado para ofrecer valores de dimensión de predicción.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>Por valor</strong>: la predicción se calculará para un solo valor de dimensión. Por ejemplo, desea predecir la precipitación anual de los años 2050, 2100 y 2150. Esta es la opción predeterminada.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>Por intervalo</strong>: la predicción se calculará para un intervalo de la dimensión definida por un valor inicial y final. Por ejemplo, desea predecir la precipitación anual de cada año entre el 2050 y el 2150.",
	"@@Predict-Using-Trend_end_tag0@@": "La fecha, la altura o la profundidad finales del intervalo de dimensiones que se utilizarán en la predicción.",
	"@@Predict-Using-Trend_end_tag1@@": "Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por intervalo</strong>.",
	"@@Predict-Using-Trend_raster_tag0@@": "El ráster de tendencia multidimensional de entrada de la función <strong>Generar tendencia</strong>.",
	"@@Predict-Using-Trend_start_tag0@@": "La fecha, la altura o la profundidad de inicio del intervalo de dimensiones que se utilizarán en la predicción.",
	"@@Predict-Using-Trend_start_tag1@@": "Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por intervalo</strong>.",
	"@@Predict-Using-Trend_unit_tag0@@": "La unidad que se usará para el intervalo de valores. Este parámetro solo se aplica cuando la dimensión del análisis es una dimensión de tiempo.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Horas</strong>: la predicción se calculará para cada hora del rango de tiempo descrito por los parámetros <strong>Inicio</strong>, <strong>Fin</strong> e <strong>Intervalo de valor</strong>.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Horas</strong>: la predicción se calculará para cada hora del rango de tiempo descrito por los parámetros <strong>Inicio</strong>, <strong>Fin</strong> e <strong>Intervalo de valor</strong>.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Semanas</strong>: la predicción se calculará para cada semana del rango de tiempo descrito por los parámetros <strong>Inicio</strong>, <strong>Fin</strong> e <strong>Intervalo de valor</strong>.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Meses</strong>: la predicción se calculará para cada mes del rango de tiempo descrito por los parámetros <strong>Inicio</strong>, <strong>Fin</strong> e <strong>Intervalo de valor</strong>.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Años</strong>: la predicción se calculará para cada año del rango de tiempo descrito por los parámetros <strong>Inicio</strong>, <strong>Fin</strong> e <strong>Intervalo de valor</strong>.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "El número de pasos entre dos valores de dimensión que se incluirán en la predicción. El valor predeterminado es 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por intervalo</strong>.",
	"@@Predict-Using-Trend_values_tag0@@": "El valor o los valores de dimensión que se utilizarán en la predicción.",
	"@@Predict-Using-Trend_values_tag1@@": "El formato de los valores de tiempo, profundidad y altura debe coincidir con el formato de los valores de dimensión utilizados para generar el ráster de tendencia. Si el ráster de tendencia se generó para la dimensión StdTime, el formato debería ser AAAA-MM-DDTHH:MM:SS, por ejemplo, 2050-01-01T00:00:00. Varios valores se separan mediante punto y coma.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Especifique la plantilla de función ráster utilizada para agregar varias divisiones en otras más pequeñas o en una única división.",
	"@@Process-Raster-Collection_dimension_tag0@@": "La dimensión de consolidación. Esta es la dimensión a lo largo de la cual se consolidan las variables.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Especifique la plantilla de función ráster utilizada para procesar cada división o elemento en la colección de rásteres de entrada.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Especifica el intervalo de palabra clave que se usará al agregar a lo largo de la dimensión. Este parámetro es obligatorio si el <strong>Tipo</strong> se define como <strong>Palabra clave de intervalo</strong> y, además, la agregación debe ser a lo largo del tiempo.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>Cada hora</strong>: los valores de datos se agregarán en periodos de tiempo horarios y el resultado incluirá todas las horas de las series temporales.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Cada día</strong>: los valores de datos se agregarán en periodos de tiempo diarios y el resultado incluirá todos los días de las series temporales.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Cada semana</strong>: los valores de datos se agregarán en periodos de tiempo semanales y el resultado incluirá todas las semanas de las series temporales.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>Cada diez días</strong>: los valores de datos se agregarán en 3 periodos de 10 días cada uno. Es posible que el último periodo contenga más o menos de 10 días. La salida incluirá 3 periodos para cada mes.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>Cada cinco días</strong>: los valores de datos se agregarán en 6 periodos de 5 días cada uno. Es posible que el último periodo contenga más o menos de 5 días. La salida incluirá 6 periodos para cada mes.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Cada mes</strong>: los valores de datos se agregarán en periodos de tiempo mensuales y el resultado incluirá todos los meses de las series temporales.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Cada trimestre</strong>: los valores de datos se agregarán en periodos de tiempo trimestrales y el resultado incluirá todos los trimestres de las series temporales.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Cada año</strong>: los valores de datos se agregarán en periodos de tiempo anuales y el resultado incluirá todos los años de las series temporales.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Recurrente diariamente</strong>: los valores de datos se agregarán en periodos de tiempo diarios y el resultado incluirá un valor agregado por día juliano. La salida incluirá, al menos, 366 periodos de tiempo diarios.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Recurrente semanalmente</strong>: los valores de datos se agregarán en periodos de tiempo semanales y el resultado incluirá un valor agregado por semana. La salida incluirá, al menos, 53 periodos de tiempo semanales.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Recurrente mensualmente</strong>: los valores de datos se agregarán en periodos de tiempo mensuales y el resultado incluirá un valor agregado por mes. La salida incluirá, al menos, 12 periodos de tiempo mensuales.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Recurrente trimestralmente</strong>: los valores de datos se agregarán en periodos de tiempo trimestrales y el resultado incluirá un valor agregado por trimestre. La salida incluirá, al menos, 4 periodos de tiempo trimestrales.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "El valor máximo de un rango.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Este parámetro es obligatorio si el parámetro <strong>Tipo</strong> se define como <strong>Rangos de intervalos</strong>.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "El valor mínimo de un rango.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Este parámetro es obligatorio si el parámetro <strong>Tipo</strong> se define como <strong>Rangos de intervalos</strong>.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Especifique la plantilla de función ráster utilizada para mostrar la capa ráster procesada.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "El ráster multidimensional, capa de mosaico o dataset de mosaico de entrada.",
	"@@Process-Raster-Collection_type_tag0@@": "Especifica el intervalo de dimensión en el que se agregarán los datos.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>Todo</strong>: los valores de datos se agregarán en todas las divisiones. Esta es la opción predeterminada.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Palabra clave de intervalo</strong>: los datos variables se agregarán con un intervalo comúnmente conocido.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Rangos de intervalos</strong>: los datos variables se agregarán entre pares de valores o fechas especificados.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Valores de intervalo</strong>: los datos variables se agregarán con un intervalo y una unidad especificados por el usuario.",
	"@@Process-Raster-Collection_unit_tag0@@": "La unidad que se usará para el valor del intervalo. Este parámetro es obligatorio si el parámetro <strong>Dimensión</strong> es un campo de tiempo y el parámetro <strong>Tipo</strong> se define como <strong>Valor de intervalo</strong>.",
	"@@Process-Raster-Collection_unit_tag1@@": "Si consolida a lo largo de algo que no sea tiempo, esta opción no estará disponible y la unidad del valor de intervalo coincidirá con la unidad de variable de los datos ráster multidimensionales de entrada.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Horas</strong>: los valores de datos se agregarán en periodos de tiempo horarios en el intervalo proporcionado.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Días</strong>: los valores de datos se agregarán en periodos de tiempo diarios en el intervalo proporcionado.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Semanas</strong>: los valores de datos se agregarán en periodos de tiempo semanales en el intervalo proporcionado.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Meses</strong>: los valores de datos se agregarán en periodos de tiempo mensuales en el intervalo proporcionado.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Años</strong>: los valores de datos se agregarán en periodos de tiempo anuales en el intervalo proporcionado.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "El tamaño del intervalo que se utilizará para la agregación. Este parámetro es obligatorio si el parámetro <strong>Tipo</strong> se define como <strong>Valor de intervalo</strong>.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "Por ejemplo, para agregar 30 años de datos de temperatura mensuales en incrementos de 5 años, introduzca 5 como el <strong>Intervalo de valor</strong> y especifique la <strong>Unidad</strong> como <strong>Años</strong>.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Especifica las opciones para definir los valores de píxel de salida.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Activado: no habrá valores de salida negativos.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Desactivado: puede haber valores negativos de cobertura de suelo fraccional.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "El ráster de entrada.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "El archivo del perfil espectral de entrada.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "La información espectral de las diferentes clases de cobertura de suelo.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Perfil espectral</strong>: un archivo de definición de clasificador (${.ecd}) generado a partir de la herramienta <strong><strong>Preparar clasificador de máxima verosimilitud</strong></strong> o un archivo JavaScript Object Notation (${.json}) que contenga los perfiles de clase espectrales.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Entidad de entrenamiento</strong>: entidades poligonales o una clase de entidad de muestra de entrenamiento, generadas desde el <strong>Administrador de muestras de entrenamiento</strong>.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Especifica las opciones para definir los valores de píxel de salida.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Activado: se proporcionan valores de clase para cada píxel en formato decimal, con la suma de todas las clases equivalente a 1. Por ejemplo, Class1 = 0,16; Class2 = 0,24; Class3 = 0,60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Desactivado: la suma de todas las clases de un píxel puede ser mayor que 1.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "El archivo de entidad de entrenamiento de entrada.",
	"@@Aggregate_aggregationtechnique_tag0@@": "El método utilizado para la agregación. Los valores de las celdas de entrada abarcadas por las celdas de salida más gruesas se agregan mediante una de las siguientes estadísticas:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Suma</strong>: el total de las celdas de entrada. Esta es la opción predeterminada.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Máximo</strong>: el valor más alto de las celdas de entrada.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Media</strong>: el valor medio de las celdas de entrada.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Mediana</strong>: la mediana de las celdas de entrada.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Mínimo</strong>: el valor más bajo de las celdas de entrada.",
	"@@Aggregate_cellfactor_tag0@@": "El factor por el que se multiplica el tamaño de celda del ráster de entrada.",
	"@@Aggregate_cellfactor_tag1@@": "Por ejemplo, un valor de factor de celda de tres generará como resultado un tamaño de celda de salida tres veces mayor que el del ráster de entrada.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Define cómo se gestionan los límites del ráster de entrada cuando sus filas o columnas no son múltiplos del factor de celda.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Activado: expande los límites superiores o de la derecha del ráster de entrada para que la cantidad total de celdas de una fila o columna sea un múltiplo del factor de celda. Con esta opción, el ráster de salida puede cubrir una extensión espacial más amplia que la del ráster de entrada. Esta es la opción predeterminada.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Desactivado: reduce la cantidad de filas o columnas del ráster de salida. Se truncan el resto de celdas de los límites superiores o de la derecha del ráster de entrada, de tal forma que la cantidad de filas o columnas del ráster de entrada es un múltiplo del factor de celda. Con esta opción, el ráster de salida puede cubrir una extensión espacial más reducida que la del ráster de entrada.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Indica que los valores ${NoData} se ignorarán al añadir cálculos.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Activada: especifica que, si existen valores ${NoData} para cualquiera de las celdas que caen dentro de la extensión espacial de una celda más grande en el ráster de salida, se ignorarán los valores ${NoData} cuando se determine el valor para las ubicaciones de celda de salida. Solo se utilizarán las celdas de entrada dentro de la extensión de la celda de salida que contengan valores de datos para determinar el valor de la celda de salida. Esta es la opción predeterminada.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Desactivada: especifica que, si cualquiera de las celdas que caen dentro de la extensión espacial de una celda más grande en el ráster de salida tiene un valor de ${NoData}, el valor para esa ubicación de celda de salida será ${NoData}. El uso de esta opción implica que cuando las celdas dentro de una agregación contienen el valor ${NoData}, no hay suficiente información para realizar los cálculos que se especificaron como necesarios para determinar un valor de salida.",
	"@@Aggregate_raster_tag0@@": "El ráster de entrada que se desea agregar.",
	"@@Expand_numberofcells_tag0@@": "El número de celdas que se expandirá.",
	"@@Expand_numberofcells_tag1@@": "El valor debe ser un entero y puede ser igual o mayor que 1.",
	"@@Expand_raster_tag0@@": "El ráster de entrada para el que se expandirán las zonas identificadas.",
	"@@Expand_raster_tag1@@": "Debe ser de tipo entero.",
	"@@Expand_zonevalues_tag0@@": "La lista de zonas a expandir.",
	"@@Expand_zonevalues_tag1@@": "Los valores de zona deben ser enteros y pueden aparecer en cualquier orden.",
	"@@Expand_zonevalues_tag2@@": "Para especificar varias zonas, use un espacio para separar los valores de zona.",
	"@@Multidimensional-Filter_dimension_tag0@@": "La dimensión de la que extraer variables.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Especifica el método que se utilizará para dividir la dimensión.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>Todo</strong>: se utilizará el rango completo para cada dimensión. Esta es la opción predeterminada.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>Por valores</strong>: la dimensión se dividirá mediante un valor de dimensión o una lista de valores.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>Por rangos</strong>: la dimensión se dividirá mediante un rango o una lista de rangos.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>Por iteración</strong>: la dimensión se dividirá a lo largo de un tamaño de intervalo especificado.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "El final del primer intervalo. Este intervalo se utiliza para iterar por el dataset. Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por iteración</strong>.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "El valor máximo del rango. Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por rangos</strong>.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "El valor mínimo del rango. Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por rangos</strong>.",
	"@@Multidimensional-Filter_raster_tag0@@": "El ráster multidimensional de entrada.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>Se usan los rangos de intervalos especificados en una tabla para agregar grupos de valores. Los valores mínimo y máximo especifican el rango que se incluirá.</p><p>Este parámetro es necesario si el parámetro <strong>Tipo</strong> está establecido en <strong>Rangos de intervalos</strong>.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "El inicio del primer intervalo. Este intervalo se utiliza para iterar por el dataset. Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por iteración</strong>.",
	"@@Multidimensional-Filter_step_tag0@@": "La frecuencia por la que se dividirán los datos. Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por iteración</strong>. El valor predeterminado es 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Especifica la unidad de iteración. Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por iteración</strong> y el parámetro <strong>Dimensión</strong> tiene el valor <strong>StdTime</strong>.",
	"@@Multidimensional-Filter_value_tag0@@": "El valor de la dimensión especificada. Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por valores</strong>.",
	"@@Multidimensional-Filter_variables_tag0@@": "Las variables que se incluirán en la capa ráster multidimensional de salida. Si no se especifica ninguna variable, se utilizará la primera variable.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Especifica si la capa debería tener valores de dimensión. Esta opción solo está disponible si se selecciona una única porción para crear una capa.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Activado: la capa no tendrá valores de dimensión.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Desactivado: la capa tendrá valores de dimensión. Esta es la opción predeterminada.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "El tamaño de la celda del ráster interpolado. El valor predeterminado es ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "El método de remuestreo utilizado para interpolar datos irregulares.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>Vecino más cercano</strong>: calcula el valor de píxel de salida mediante el píxel de entrada más cercano. Si no hay ningún píxel de origen, no se podrá crear ningún píxel nuevo en la salida. Esta es la opción predeterminada.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>Simplificación lineal</strong>: utiliza una red irregular de triángulos desde el punto central de cada píxel del ráster irregular para interpolar una superficie que, después, se convierte a un ráster regular.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Vecino natural</strong>: busca el subconjunto más cercano de muestras de entrada a un punto de consulta y les aplica la ponderación en función de áreas proporcionadas para interpolar un valor.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Ponderación de distancia inversa</strong>: determina los valores de píxel a través de una combinación ponderada linealmente de un conjunto de puntos o píxeles de muestra. La ponderación es una función de la inversa de la distancia a partir de puntos o píxeles conocidos.",
	"@@Multidimensional-Raster_raster_tag0@@": "El ráster multidimensional de entrada.",
	"@@Multidimensional-Raster_variables_tag0@@": "La variable o las variables que se van a incluir en la capa ráster multidimensional.",
	"@@Random_distribution_tag0@@": "Especifique el método de distribución de valores aleatorios que va a utilizar.",
	"@@Random_distribution_tag1@@": "<strong>Uniforme</strong> (Mínimo, Máximo): distribución uniforme con un rango definido. Los valores predeterminados son 0 para Mínimo y 1 para Máximo. Esta es la opción predeterminada.",
	"@@Random_distribution_tag2@@": "<strong>Entero</strong> (Mínimo, Máximo): distribución de enteros con un rango definido. Los valores predeterminados son 1 para Mínimo y 10 para Máximo.",
	"@@Random_distribution_tag3@@": "<strong>Normal</strong> (Valor medio, Desviación estándar): distribución normal con una desviación estándar y un valor medio definidos. Los valores predeterminados son 0 para Valor medio y 1 para Desviación estándar.",
	"@@Random_distribution_tag4@@": "<strong>Exponencial</strong> (Media): distribución exponencial con una media definida. El valor predeterminado es 1.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (Media): distribución Poisson con una media definida. El valor predeterminado es 1.",
	"@@Random_distribution_tag6@@": "<strong>Gamma</strong> (Alfa, Beta): distribución Gamma con Alfa y Beta definidos. Los valores predeterminados son 1 para Alfa y 1 para Beta.",
	"@@Random_distribution_tag7@@": "<strong>Binomial</strong> (N, Probabilidad): distribución binomial con Probabilidad y N definidas. Los valores predeterminados son 10 para N y 0,5 para Probabilidad.",
	"@@Random_distribution_tag8@@": "<strong>Geométrica</strong> (Probabilidad): distribución geométrica con una Probabilidad definida. El valor predeterminado es 0,5.",
	"@@Random_distribution_tag9@@": "<strong>Binomial negativa</strong> (r, Probabilidad): distribución Pascal con Probabilidad y r definidas. Los valores predeterminados son 10,0 para r y 0,5 para Probabilidad.",
	"@@Random_randomnumbergenerator_tag0@@": "Especifique el algoritmo de generador aleatorio que utiliza el valor de inicialización y la distribución para producir una secuencia de números aleatorios. Las opciones disponibles son las siguientes:",
	"@@Random_randomnumbergenerator_tag1@@": "Rand C estándar",
	"@@Random_randomnumbergenerator_tag2@@": "Algoritmo 599 capturado por ACM",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "El valor predeterminado es Mersenne Twister.",
	"@@Random_rasterinfo_tag0@@": "Utilice el botón <strong>Cargar ráster de plantilla</strong> para cargar una plantilla de un directorio o portal.",
	"@@Random_seed_tag0@@": "El valor de inicialización es un valor entero que se utiliza para iniciar el generador de números aleatorios. El valor predeterminado es 1.",
	"@@Shrink_numberofcells_tag0@@": "La cantidad de celdas en la que se encogerá cada zona especificada.",
	"@@Shrink_numberofcells_tag1@@": "El valor debe ser un entero y puede ser igual o mayor que 1.",
	"@@Shrink_raster_tag0@@": "El ráster de entrada para el cual se encogerán las zonas identificadas.",
	"@@Shrink_raster_tag1@@": "Debe ser de tipo entero.",
	"@@Shrink_zonevalues_tag0@@": "La lista de zonas a encoger.",
	"@@Shrink_zonevalues_tag1@@": "Los valores de zona deben ser enteros y pueden aparecer en cualquier orden.",
	"@@Shrink_zonevalues_tag2@@": "Para especificar varias zonas, use un espacio para separar los valores de zona.",
	"@@Distance-Accumulation_costraster_tag0@@": "Ráster que define el coste o la impedancia de hacer un movimiento planimétrico a través de cada celda. El valor de cada ubicación de celda representa la distancia de coste por unidad para moverse a través de la celda. Cada valor de ubicación de celda se multiplica por la resolución de la celda, mientras que también se compensa por el movimiento diagonal para obtener el coste total de pasar por la celda.",
	"@@Distance-Accumulation_costraster_tag1@@": "Los valores del <strong>Ráster de costes</strong> pueden ser enteros o de punto flotante, pero no pueden ser negativos ni cero.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Determina si la distancia se calcula basándose en un método planar (Tierra plana) o geodésico (elipsoide).",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Planar: las mediciones de tipo planar usan matemáticas cartesianas 2D para calcular la longitud y el área. Esta opción solo está disponible cuando se toman medidas en un sistema de coordenadas proyectadas y el plano 2D de ese sistema de coordenadas se utiliza como base para las mediciones.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Geodésico: la línea más corta entre dos puntos en la superficie terrestre de un esferoide (elipsoide). Por lo tanto, independientemente de la proyección de entrada o salida, los resultados no cambian.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Nota</strong>: determinar la distancia más corta entre dos ciudades para la ruta de vuelo de un avión es uno de los usos de una línea geodésica. También se la conoce como línea de círculo grande si está basada en una esfera, en lugar de un elipsoide.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Determina si se crea solamente el ráster de acumulación de distancia o si se crea un ráster multibanda formado por el ráster de acumulación de distancia y el ráster de dirección hacia atrás.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Desactivado: el resultado es el ráster de acumulación de distancia. Es un resultado de banda única. Esta es la opción predeterminada.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Activado: se crea un resultado multibanda. La primera banda es el ráster de acumulación de distancia y la segunda banda es el ráster de dirección hacia atrás.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "El ráster de dirección hacia atrás calcula en grados, para cada celda, la dirección a la celda vecina por la ruta más corta, de vuelta al origen más cercano, a la vez que evita las barreras.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Define la relación entre el factor de coste horizontal y el ángulo de movimiento relativo horizontal (HRMA).</p><p>Existen varios factores con modificadores que identifican un gráfico de factores vertical definido. Además, se puede utilizar una tabla para crear un gráfico personalizado. Los gráficos se utilizan para identificar el factor vertical utilizado en el cálculo del coste total de desplazarse a una celda vecina.</p><p>En las siguientes explicaciones, se utilizan dos acrónimos: HF y HRMA. HF significa factor horizontal, lo que define la dificultad horizontal con la se encuentra al realizar un movimiento desde una celda a la siguiente. HRMA significa ángulo de movimiento relativo horizontal, que define el ángulo entre la dirección horizontal de una celda y la dirección del movimiento.</p><p><strong>Factor horizontal</strong>contiene los siguientes tipos:</p><ul><li><strong>Binario</strong>: indica que si el HRMA es menor que el ángulo de corte, el HF se fija en el valor asociado al factor cero; en caso contrario, es infinito.</li><li><strong>Hacia delante</strong>: establece que solo se permite el movimiento hacia delante. El HRMA debe ser mayor o igual que 0 y menor que 90 grados (0 &lt;= HRMA &lt; 90). Si el HRMA es mayor que 0 y menor que 45 grados, el HF de la celda se establece para el valor asociado con el factor cero. Si el HRMA es mayor o igual que 45 grados, se utiliza el valor de modificación del valor lateral. El HF para cualquier valor de HRMA igual o superior a 90 grados se establece en infinito.</li><li><strong>Lineal</strong>: especifica que el HF es una función lineal de la HRMA.</li><li><strong>Lineal inverso</strong>: Especifica que el HF es una función lineal inversa de la HRMA.</li><li><strong>Tabla</strong>: Identifica que se utilizará un archivo de tabla para definir el gráfico de factores horizontales utilizado para determinar los HF.</li></ul><p>Los modificadores de los factores horizontales son los siguientes:</p><ul><li><strong>Factor cero</strong>: el factor horizontal que se utilizará si el HRMA es cero. Este factor posiciona el interceptor y para cualquiera de las funciones de los factores horizontales.</li><li><strong>Ángulo de corte</strong>: define el ángulo de HRMA más allá el cual el HF cambiará a infinito.</li><li><strong>Pendiente</strong>: establece la pendiente de la línea recta utilizada con las palabras clave de factor horizontal<strong>Lineal</strong>y<strong>Lineal inverso</strong>. La pendiente se especifica como una fracción de aumento en la distancia (por ejemplo, una pendiente con un porcentaje de 45 es 1/45, que se introduce como 0,02222).</li><li><strong>Valor lateral</strong>: establece el HF cuando el HRMA es mayor o igual a 45 grados y menor a 90 grados cuando se especifica la palabra clave del factor horizontal<strong>Adelante</strong>.</li><li><strong>Nombre de tabla</strong>: identifica el nombre de la tabla que define el HF.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "Ráster que define la dirección horizontal de cada celda.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "Los valores del ráster deben ser números enteros comprendidos entre 0 y 360, con 0 grados al norte o hacia la parte superior de la pantalla y que aumentan en el sentido de las agujas del reloj. Las áreas llanas deben tener el valor -1. Los valores de cada ubicación se utilizarán en conjunto con el <strong>Factor horizontal</strong> para determinar el coste horizontal incurrido al realizar el movimiento de una celda hacia sus elementos próximos.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "El coste acumulativo inicial con el que comenzar el cálculo de costes. Este parámetro permite especificar el coste fijo asociado a un origen. En lugar de empezar con un coste de 0, el algoritmo de coste empezará con el valor especificado.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "El valor debe ser mayor o igual que cero. El valor predeterminado es 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Define el coste acumulativo máximo del viajero para un origen. Los cálculos de coste continúan para cada origen hasta que se alcanza la capacidad especificada.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "Un multiplicador que se debe aplicar a los valores de coste.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Este parámetro permite controlar el modo de desplazamiento o la magnitud en un origen. Cuanto mayor sea el multiplicador, mayor será el coste de moverse a través de cada celda.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "Los valores deben ser mayores que cero. El valor predeterminado es 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "El ráster que define las barreras.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "El dataset debe contener NoData donde no haya barreras. Las barreras se representan mediante valores válidos, incluido el cero.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "Las barreras pueden definirse mediante un ráster entero o de punto flotante.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "Ubicaciones de origen de entrada.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Es un dataset ráster que identifica las celdas o las ubicaciones desde las que se calcula el menor coste-distancia acumulado para cada ubicación de celda de salida.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Puede ser de tipo entero o de punto flotante.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "Ráster que define los valores de elevación de cada ubicación de celda.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "Los valores se utilizan para calcular la distancia de la superficie actual cubierta al pasar entre las celdas.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Define la dirección del viajero cuando se aplica el factor vertical, el factor horizontal y la tasa de resistencia en origen.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>Desde origen</strong>: el factor vertical, el factor horizontal y la tasa de resistencia en origen se aplicarán empezando en el origen de entrada y avanzando hacia las celdas que no pertenezcan al origen. Esta es la opción predeterminada.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>A origen</strong>: el factor vertical, el factor horizontal y la tasa de resistencia en origen se aplicarán empezando por cada celda que no pertenezca al origen y regresando al origen de entrada.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Especifique la palabra clave <strong>De origen</strong> o <strong>A origen</strong> que se aplicará a todos los orígenes o especifique un campo en el <strong>Ráster de origen</strong> que contenga las palabras clave para identificar la dirección de desplazamiento de cada origen. Ese campo debe contener la cadena de caracteres ${FROM_SOURCE} o ${TO_SOURCE}.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Define la relación entre el factor de coste vertical y el ángulo de movimiento relativo vertical (VRMA).</p><p>Existen varios factores con modificadores que identifican un gráfico de factores vertical definido. Además, se puede utilizar una tabla para crear un gráfico personalizado. Los gráficos se utilizan para identificar el factor vertical utilizado en el cálculo del coste total de desplazarse a una celda vecina.</p><p>En las siguientes explicaciones, se utilizan dos acrónimos: VF y VRMA. VF significa factor vertical, lo que define la dificultad vertical con la se encuentra al realizar un movimiento desde una celda a la siguiente. VRMA significa ángulo de desplazamiento relativo vertical, que identifica el ángulo de inclinación entre la celda DESDE, o de procesamiento, y la celda A.</p><p><strong>Factor vertical</strong>tiene los siguientes tipos posibles:</p><ul><li><strong>Binario</strong>: especifica que si el VRMA es mayor que el ángulo de corte bajo y menor que el ángulo de corte alto, el VF se fija en el valor asociado al factor cero; en caso contrario, es infinito.</li><li><strong>Lineal</strong>: indica que el VF es una función lineal del VRMA.</li><li><strong>Lineal simétrico</strong>: especifica que el VF es una función lineal del VRMA en el lado negativo o positivo del VRMA, respectivamente, y las dos funciones lineales son simétricas con respecto al eje VF (y).</li><li><strong>Lineal inverso</strong>: indica que el VF es una función lineal inversa del VRMA.</li><li><strong>Lineal inverso simétrico</strong>: especifica que el VF es una función lineal inversa del VRMA en el lado negativo o positivo del VRMA, respectivamente, y las dos funciones lineales son simétricas con respecto al eje VF (y).</li><li><strong>Cos</strong>: identifica el VF como la función basada en el coseno del VRMA.</li><li><strong>Sec</strong>: identifica el VF como la función basada en la secante del VRMA.</li><li><strong>Cos-Sec</strong>: especifica que el VF es la función basada en el coseno del VRMA cuando el VRMA es negativo y la función basada en la secante del VRMA cuando el VRMA no es negativo.</li><li><strong>Sec-Cos</strong>: especifica que el VF es la función basada en la secante del VRMA cuando el VRMA es negativo y la función basada en el coseno del VRMA cuando el VRMA no es negativo.</li><li><strong>Tabla</strong>: identifica que se utilizará un archivo de tabla para definir el gráfico del factor vertical que se utiliza para determinar los VF.</li></ul><p>Los modificadores de las palabras clave verticales son los siguientes:</p><ul><li><strong>Factor cero</strong>: establece el factor vertical utilizado cuando el VRMA es cero. Este factor posiciona el interceptor y de la función especificada. Por definición, el factor cero no es aplicable a ninguna de las funciones verticales trigonométricas (COS, SEC, COS-SEC o SEC-COS). La intersección y está definida por estas funciones.</li><li><strong>Ángulo de corte bajo</strong>: define el ángulo del VRMA por debajo del cual el VF se establecerá en el infinito.</li><li><strong>Ángulo de corte alto</strong>: define el ángulo de VRMA por encima del cual el VF se pondrá a infinito.</li><li><strong>Pendiente</strong>: establece la pendiente de la línea recta utilizada con las palabras clave de factor vertical<strong>Lineal</strong>y<strong>Lineal inverso</strong>. La pendiente se especifica como una fracción de aumento sobre la ejecución (por ejemplo, 45 de pendiente en porcentaje es 1/45, lo que se introduce como 0,02222).</li><li><strong>Nombre de tabla</strong>: identifica el nombre de la tabla que define el VF.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Define la relación entre el factor de coste vertical y el ángulo de movimiento relativo vertical (VRMA).",
	"@@Distance-Accumulation_verticalraster_tag1@@": "Los valores se utilizan para calcular la pendiente utilizada para identificar el factor vertical incurrido al realizar un movimiento de una celda a otra.",
	"@@Distance-Allocation_costraster_tag0@@": "Ráster que define el coste o la impedancia de hacer un movimiento planimétrico a través de cada celda. El valor de cada ubicación de celda representa la distancia de coste por unidad para moverse a través de la celda. Cada valor de ubicación de celda se multiplica por la resolución de la celda, mientras que también se compensa por el movimiento diagonal para obtener el coste total de pasar por la celda.",
	"@@Distance-Allocation_costraster_tag1@@": "Los valores del <strong>Ráster de costes</strong> pueden ser enteros o de punto flotante, pero no pueden ser negativos ni cero.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Determina si la distancia se calcula basándose en un método planar (Tierra plana) o geodésico (elipsoide).",
	"@@Distance-Allocation_distancemethod_tag1@@": "Planar: las mediciones de tipo planar usan matemáticas cartesianas 2D para calcular la longitud y el área. Esta opción solo está disponible cuando se toman medidas en un sistema de coordenadas proyectadas y el plano 2D de ese sistema de coordenadas se utiliza como base para las mediciones.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Geodésico: la línea más corta entre dos puntos en la superficie terrestre de un esferoide (elipsoide). Por lo tanto, independientemente de la proyección de entrada o salida, los resultados no cambian.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Nota</strong>: determinar la distancia más corta entre dos ciudades para la ruta de vuelo de un avión es uno de los usos de una línea geodésica. También se la conoce como línea de círculo grande si está basada en una esfera, en lugar de un elipsoide.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Define la relación entre el factor de coste horizontal y el ángulo de movimiento relativo horizontal (HRMA).</p><p>Existen varios factores con modificadores que identifican un gráfico de factores vertical definido. Además, se puede utilizar una tabla para crear un gráfico personalizado. Los gráficos se utilizan para identificar el factor vertical utilizado en el cálculo del coste total de desplazarse a una celda vecina.</p><p>En las siguientes explicaciones, se utilizan dos acrónimos: HF y HRMA. HF significa factor horizontal, lo que define la dificultad horizontal con la se encuentra al realizar un movimiento desde una celda a la siguiente. HRMA significa ángulo de movimiento relativo horizontal, que define el ángulo entre la dirección horizontal de una celda y la dirección del movimiento.</p><p><strong>Factor horizontal</strong>contiene los siguientes tipos:</p><ul><li><strong>Binario</strong>: indica que si el HRMA es menor que el ángulo de corte, el HF se fija en el valor asociado al factor cero; en caso contrario, es infinito.</li><li><strong>Hacia delante</strong>: establece que solo se permite el movimiento hacia delante. El HRMA debe ser mayor o igual que 0 y menor que 90 grados (0 &lt;= HRMA &lt; 90). Si el HRMA es mayor que 0 y menor que 45 grados, el HF de la celda se establece para el valor asociado con el factor cero. Si el HRMA es mayor o igual que 45 grados, se utiliza el valor de modificación del valor lateral. El HF para cualquier valor de HRMA igual o superior a 90 grados se establece en infinito.</li><li><strong>Lineal</strong>: especifica que el HF es una función lineal de la HRMA.</li><li><strong>Lineal inverso</strong>: Especifica que el HF es una función lineal inversa de la HRMA.</li><li><strong>Tabla</strong>: Identifica que se utilizará un archivo de tabla para definir el gráfico de factores horizontales utilizado para determinar los HF.</li></ul><p>Los modificadores de los factores horizontales son los siguientes:</p><ul><li><strong>Factor cero</strong>: el factor horizontal que se utilizará si el HRMA es cero. Este factor posiciona el interceptor y para cualquiera de las funciones de los factores horizontales.</li><li><strong>Ángulo de corte</strong>: define el ángulo de HRMA más allá el cual el HF cambiará a infinito.</li><li><strong>Pendiente</strong>: establece la pendiente de la línea recta utilizada con las palabras clave de factor horizontal<strong>Lineal</strong>y<strong>Lineal inverso</strong>. La pendiente se especifica como una fracción de aumento en la distancia (por ejemplo, una pendiente con un porcentaje de 45 es 1/45, que se introduce como 0,02222).</li><li><strong>Valor lateral</strong>: establece el HF cuando el HRMA es mayor o igual a 45 grados y menor a 90 grados cuando se especifica la palabra clave del factor horizontal<strong>Adelante</strong>.</li><li><strong>Nombre de tabla</strong>: identifica el nombre de la tabla que define el HF.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "Ráster que define la dirección horizontal de cada celda.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "Los valores del ráster deben ser números enteros comprendidos entre 0 y 360, con 0 grados al norte o hacia la parte superior de la pantalla y que aumentan en el sentido de las agujas del reloj. Las áreas llanas deben tener el valor -1. Los valores de cada ubicación se utilizarán en conjunto con el <strong>Factor horizontal</strong> para determinar el coste horizontal incurrido al realizar el movimiento de una celda hacia sus elementos próximos.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "El coste acumulativo inicial con el que comenzar el cálculo de costes. Este parámetro permite especificar el coste fijo asociado a un origen. En lugar de empezar con un coste de 0, el algoritmo de coste empezará con el valor especificado.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "El valor debe ser mayor o igual que cero. El valor predeterminado es 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Define el coste acumulativo máximo del viajero para un origen. Los cálculos de coste continúan para cada origen hasta que se alcanza la capacidad especificada.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "El valor debe ser mayor que cero. La capacidad predeterminada es hasta el borde del ráster de salida.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "Un multiplicador que se debe aplicar a los valores de coste.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Este parámetro permite controlar el modo de desplazamiento o la magnitud en un origen. Cuanto mayor sea el multiplicador, mayor será el coste de moverse a través de cada celda.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "Los valores deben ser mayores que cero. El valor predeterminado es 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "Un valor numérico (doble) o un campo del <strong>Ráster de origen</strong> se pueden usar para este parámetro.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "El ráster que define las barreras.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "El dataset debe contener NoData donde no haya barreras. Las barreras se representan mediante valores válidos, incluido el cero.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "Las barreras pueden definirse mediante un ráster entero o de punto flotante.",
	"@@Distance-Allocation_sourcefield_tag0@@": "El campo que se utiliza para asignar los valores a las ubicaciones de origen. Debe ser de tipo entero.",
	"@@Distance-Allocation_sourceraster_tag0@@": "Ubicaciones de origen de entrada.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Es un dataset ráster que identifica las celdas o las ubicaciones desde las que se calcula el menor coste-distancia acumulado para cada ubicación de celda de salida.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Determina si se crea únicamente el ráster de asignación o si se crea un resultado multibanda.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Desactivado: el resultado es el ráster de asignación de distancia. Es un resultado de banda única. Esta es la opción predeterminada.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Activado: se crea un ráster multibanda. La primera banda es el ráster de asignación de distancia, la segunda banda contiene un índice de fila y la tercera banda contiene un índice de columna. Estos índices identifican la ubicación de la celda de origen más cercana al menor coste-distancia acumulado.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "Ráster que define los valores de elevación de cada ubicación de celda.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "Los valores se utilizan para calcular la distancia de la superficie actual cubierta al pasar entre las celdas.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Define la dirección del viajero cuando se aplica el factor vertical, el factor horizontal y la tasa de resistencia en origen.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>Desde origen</strong>: el factor vertical, el factor horizontal y la tasa de resistencia en origen se aplicarán empezando en el origen de entrada y avanzando hacia las celdas que no pertenezcan al origen. Esta es la opción predeterminada.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>A origen</strong>: el factor vertical, el factor horizontal y la tasa de resistencia en origen se aplicarán empezando por cada celda que no pertenezca al origen y regresando al origen de entrada.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Especifique la palabra clave <strong>De origen</strong> o <strong>A origen</strong> que se aplicará a todos los orígenes o especifique un campo en el <strong>Ráster de origen</strong> que contenga las palabras clave para identificar la dirección de desplazamiento de cada origen. Ese campo debe contener la cadena de caracteres ${FROM_SOURCE} o ${TO_SOURCE}.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Define la relación entre el factor de coste vertical y el ángulo de movimiento relativo vertical (VRMA).</p><p>Existen varios factores con modificadores que identifican un gráfico de factores vertical definido. Además, se puede utilizar una tabla para crear un gráfico personalizado. Los gráficos se utilizan para identificar el factor vertical utilizado en el cálculo del coste total de desplazarse a una celda vecina.</p><p>En las siguientes explicaciones, se utilizan dos acrónimos: VF y VRMA. VF significa factor vertical, lo que define la dificultad vertical con la se encuentra al realizar un movimiento desde una celda a la siguiente. VRMA significa ángulo de desplazamiento relativo vertical, que identifica el ángulo de inclinación entre la celda DESDE, o de procesamiento, y la celda A.</p><p><strong>Factor vertical</strong>tiene los siguientes tipos posibles:</p><ul><li><strong>Binario</strong>: especifica que si el VRMA es mayor que el ángulo de corte bajo y menor que el ángulo de corte alto, el VF se fija en el valor asociado al factor cero; en caso contrario, es infinito.</li><li><strong>Lineal</strong>: indica que el VF es una función lineal del VRMA.</li><li><strong>Lineal simétrico</strong>: especifica que el VF es una función lineal del VRMA en el lado negativo o positivo del VRMA, respectivamente, y las dos funciones lineales son simétricas con respecto al eje VF (y).</li><li><strong>Lineal inverso</strong>: indica que el VF es una función lineal inversa del VRMA.</li><li><strong>Lineal inverso simétrico</strong>: especifica que el VF es una función lineal inversa del VRMA en el lado negativo o positivo del VRMA, respectivamente, y las dos funciones lineales son simétricas con respecto al eje VF (y).</li><li><strong>Cos</strong>: identifica el VF como la función basada en el coseno del VRMA.</li><li><strong>Sec</strong>: identifica el VF como la función basada en la secante del VRMA.</li><li><strong>Cos-Sec</strong>: especifica que el VF es la función basada en el coseno del VRMA cuando el VRMA es negativo y la función basada en la secante del VRMA cuando el VRMA no es negativo.</li><li><strong>Sec-Cos</strong>: especifica que el VF es la función basada en la secante del VRMA cuando el VRMA es negativo y la función basada en el coseno del VRMA cuando el VRMA no es negativo.</li><li><strong>Tabla</strong>: identifica que se utilizará un archivo de tabla para definir el gráfico del factor vertical que se utiliza para determinar los VF.</li></ul><p>Los modificadores de las palabras clave verticales son los siguientes:</p><ul><li><strong>Factor cero</strong>: establece el factor vertical utilizado cuando el VRMA es cero. Este factor posiciona el interceptor y de la función especificada. Por definición, el factor cero no es aplicable a ninguna de las funciones verticales trigonométricas (COS, SEC, COS-SEC o SEC-COS). La intersección y está definida por estas funciones.</li><li><strong>Ángulo de corte bajo</strong>: define el ángulo del VRMA por debajo del cual el VF se establecerá en el infinito.</li><li><strong>Ángulo de corte alto</strong>: define el ángulo de VRMA por encima del cual el VF se pondrá a infinito.</li><li><strong>Pendiente</strong>: establece la pendiente de la línea recta utilizada con las palabras clave de factor vertical<strong>Lineal</strong>y<strong>Lineal inverso</strong>. La pendiente se especifica como una fracción de aumento sobre la ejecución (por ejemplo, 45 de pendiente en porcentaje es 1/45, lo que se introduce como 0,02222).</li><li><strong>Nombre de tabla</strong>: identifica el nombre de la tabla que define el VF.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Define la relación entre el factor de coste vertical y el ángulo de movimiento relativo vertical (VRMA).",
	"@@Distance-Allocation_verticalraster_tag1@@": "Los valores se utilizan para calcular la pendiente utilizada para identificar el factor vertical incurrido al realizar un movimiento de una celda a otra.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "El tamaño de celda con el que se creará el ráster de salida.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Si el tamaño de celda se ha definido explícitamente en <strong>Entornos</strong>, ese será el tamaño de celda predeterminado. Si no se definió, el tamaño de celda de salida coincidirá con el del <strong>Ráster de origen</strong>.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Determina si la distancia se calcula basándose en un método planar (Tierra plana) o geodésico (elipsoide).",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Planar: las mediciones de tipo planar usan matemáticas cartesianas 2D para calcular la longitud y el área. Esta opción solo está disponible cuando se toman medidas en un sistema de coordenadas proyectadas y el plano 2D de ese sistema de coordenadas se utiliza como base para las mediciones.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Geodésico: la línea más corta entre dos puntos en la superficie terrestre de un esferoide (elipsoide). Por lo tanto, independientemente de la proyección de entrada o salida, los resultados no cambian.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Nota</strong>: determinar la distancia más corta entre dos ciudades para la ruta de vuelo de un avión es uno de los usos de una línea geodésica. También se la conoce como línea de círculo grande si está basada en una esfera, en lugar de un elipsoide.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Define la distancia de umbral dentro de la cual se calculará la dirección hasta el origen más cercano. Si la distancia hasta el origen más cercano la supera, la salida de esa celda será NoData.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "La distancia predeterminada es hasta la extensión del ráster de salida.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "El ráster que define las barreras.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "El dataset debe contener NoData donde no haya barreras. Las barreras se representan mediante valores válidos, incluido el cero.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "Las barreras pueden definirse mediante un ráster entero o de punto flotante.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "Un dataset ráster que identifica las celdas o ubicaciones para las que se calcula la dirección euclidiana de cada ubicación de celda de salida.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "El tipo de entrada puede ser un valor de tipo entero o de punto flotante.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "El nombre de una capa ráster de vínculo de menor coste que se utiliza para determinar la ruta para volver a un origen mediante la ruta de menor coste.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "Para cada celda en el ráster de vínculo de menor coste, un valor identifica al vecino que es la próxima celda en la ruta de menor coste acumulativo desde la celda hasta una única celda de origen o un conjunto de celdas de origen.",
	"@@Cost-Path_costdistanceraster_tag0@@": "El nombre de un ráster de distancia de coste que se utiliza para determinar la ruta de menor coste desde las ubicaciones de destino a un origen.",
	"@@Cost-Path_costdistanceraster_tag1@@": "En general, el ráster de coste-distancia se crea con las funciones Coste-distancia, Asignación de costes o Vínculo de menor coste. La capa ráster de coste-distancia almacena, para cada celda, el coste-distancia acumulativo mínimo sobre una superficie de coste desde cada celda hasta un conjunto de celdas de origen.",
	"@@Cost-Path_destinationfield_tag0@@": "EL campo que se utiliza para obtener valores para la ubicaciones de destino. Los datos de entidad de entrada deben contener al menos un campo válido.",
	"@@Cost-Path_destinationraster_tag0@@": "Una capa de dataset ráster que identifica aquellas celdas desde donde se determina la ruta de menor coste al origen menos costoso.",
	"@@Cost-Path_destinationraster_tag1@@": "La capa ráster de entrada consta de celdas con valores válidos (cero es un valor válido) y se debe asignar NoData a las celdas restantes.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Obliga a la función a tratar el ráster de vínculo de entrada como un ráster de dirección del flujo. Los rásteres de dirección del flujo pueden tener un entero con valores de 0 a 255.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Desactivado: si los valores del ráster de vínculo especificado son enteros en el rango de 0-8, el dataset se tratará como ráster de vínculo de menor coste. Si los valores se encuentran entre 0-255, la entrada se tratará como ráster de dirección del flujo. Si los valores se encuentran entre 0-360 y punto flotante, la entrada se tratará como ráster de dirección hacia atrás.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Activado: el ráster suministrado para el ráster de vínculo se tratará como ráster de dirección del flujo. Esta opción del ráster de dirección del flujo se utiliza con un valor máximo de 8.",
	"@@Cost-Path_pathtype_tag0@@": "Una palabra clave que define la manera en que se interpretarán los valores y las zonas de los datos de destino de entrada en los cálculos de la ruta de coste. Las opciones son las siguientes:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Cada celda</strong>: por cada celda con valores válidos en los datos de destino de entrada, se determina una ruta de menor coste y se guarda en el ráster de salida. Con esta opción, cada celda de los datos de destino de entrada se trata de forma separada y se determina una ruta de menor coste para cada celda.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Cada zona</strong>: por cada zona en los datos de destino de entrada, se determina una ruta de menor coste y se guarda en el ráster de salida. Con esta opción, la ruta de menor coste de cada zona comienza en la celda con la ponderación de distancia de coste más baja de la zona.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Mejor simple</strong>: para todas las celdas en los datos de destino de entrada, la ruta de menor coste deriva de la celda con las rutas de menor coste mínimas a las celdas de origen.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Último de: utiliza el último tamaño de celda de los rásteres de entrada.",
	"@@Cell-Statistics_extenttype_tag0@@": "Elija qué extensión se debería usar en el ráster de salida:",
	"@@Cell-Statistics_extenttype_tag1@@": "Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.",
	"@@Cell-Statistics_extenttype_tag2@@": "Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.",
	"@@Cell-Statistics_extenttype_tag3@@": "Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.",
	"@@Cell-Statistics_extenttype_tag4@@": "Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Determina cómo se procesan las bandas de los rásteres de entrada.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Desactivado: todas las entradas multibanda se procesan como bandas únicas. Esta es la opción predeterminada.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Activado: todas las entradas multibanda se procesan como multibanda.",
	"@@Cell-Statistics_rasters_tag0@@": "Lista de rásteres a partir de los cuales se calculan estadísticas píxel por píxel.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Especifica el método de interpolación que se va a utilizar cuando el valor de percentil especificado se encuentra entre dos valores de celda de entrada del ráster de valores de entrada.</p><ul><li><strong>Detección automática</strong>: si los rásteres de entrada corresponden al tipo de píxel entero, se utiliza el método<strong>más cercano</strong>. Si el ráster de entrada es de tipo píxel de punto flotante, se utiliza el método<strong>Lineal</strong>. Esta es la opción predeterminada.</li><li><strong>Más cercano</strong>: se utiliza el valor disponible más cercano para el percentil deseado. En este caso, el tipo de píxel de salida es el mismo que el del ráster de valor de entrada.</li><li><strong>Lineal</strong>: se utiliza la media ponderada de los dos valores circundantes del percentil deseado. En este caso, el tipo de píxel de salida es de coma flotante.</li></ul><p>Esta opción solo está disponible si el parámetro de tipo<strong>Operación</strong>cambia a<strong>Mediana</strong>o<strong>Percentil</strong>.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>El percentil que se va a calcular. El valor predeterminado es 90, para el 90.º percentil.</p><p>Los valores pueden variar de 0 a 100. El 0.º percentil equivale en esencia a la estadística mínimo, mientras que el 100.º percentil equivale a la estadística máximo. Un valor de 50 generará en esencia el mismo resultado que la estadística Mediana.</p><p>Esta opción solo está disponible si el parámetro<strong>Operación</strong>cambia a<strong>Percentil</strong>.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "El ráster de dirección hacia atrás contiene direcciones calculadas en grados. La dirección identifica la siguiente celda a lo largo de la ruta óptima, de vuelta al origen de menor coste-distancia acumulado, a la vez que se evitan barreras.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "El rango de valores es de 0 grados hasta 360 grados, con el 0 reservado para las celdas de origen. Hacia el este (derecha) es 90 y los valores aumentan en el sentido de las agujas del reloj (180 es sur, 270 es oeste y 360 es norte).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "El campo que se utiliza para obtener valores para las ubicaciones de destino.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "Una capa de dataset ráster que identifica aquellas celdas desde donde se determina la ruta óptima al origen menos costoso. Esta entrada es obligatoria.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "La capa ráster de entrada consta de celdas con valores válidos (cero es un valor válido) y se debe asignar NoData a las celdas restantes.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "El ráster de acumulación de distancia se utiliza para determinar la ruta óptima desde los destinos hasta los orígenes. El ráster de acumulación de distancia se suele crear con la función <strong>Acumulación de distancia</strong>. Cada celda del ráster de acumulación de distancia representa el coste-distancia acumulativo mínimo sobre una superficie desde cada celda hasta un conjunto de celdas de origen.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Especifica una palabra clave que define la manera en que se interpretarán los valores y las zonas de los datos de destino de entrada en los cálculos de la ruta de coste.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Cada zona</strong>: por cada zona en los datos de destino de entrada, se determina una ruta de menor coste y se guarda en el ráster de salida. Con esta opción, la ruta óptima de cada zona comienza en la celda con la ponderación de coste-distancia más baja de la zona.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Mejor simple</strong>: para todas las celdas en los datos de destino de entrada, la ruta óptima deriva de la celda con las rutas de menor coste mínimas a las celdas de origen.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Cada celda</strong>: por cada celda con valores válidos en los datos de destino de entrada, se determina una ruta óptima. Con esta opción, cada celda de los datos de destino de entrada se trata de forma separada y se determina una ruta óptima para cada celda.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "Los Id. de banda que se utilizarán para la detección de cambios. Si no se proporciona ningún Id. de banda, se utilizarán todas las bandas del dataset ráster de entrada.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "Los valores de los Id. deberían ser enteros separados por espacios.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "Los Id. de banda de la banda verde y la banda SWIR se utilizarán para la máscara de nubes, sombra de nubes y nieve. Si no se proporciona ningún Id. de banda, no se producirá el enmascaramiento.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "Los valores de los Id. deberían ser enteros separados por espacios.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Este parámetro especifica las bandas que se deben utilizar para el enmascaramiento de nubes, sombra de nubes y nieve. Como las sombras de las nubes y la nieve se muestran muy oscuras en la banda infrarroja de onda corta (SWIR), y las nubes y la nieve aparecen muy brillantes en la banda verde, se recomienda enmascarar los índices de banda correspondientes a las bandas SWIR y verde.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "El umbral de probabilidad de cambio de chi cuadrado. Si una observación tiene calculada una probabilidad de cambio superior a este umbral, se marca como anomalía, lo cual es un evento de cambio potencial. El valor predeterminado es 0,99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "La cantidad mínima de observaciones consecutivas de anomalías que deben producirse antes de que un evento se considere un cambio. Un píxel se debe marcar como anomalía en la cantidad especificada de periodos de tiempo consecutivos para que se considere un cambio real. El valor predeterminado es 6.",
	"@@CCDC-Analysis_raster_tag0@@": "La capa ráster multidimensional de entrada.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "La frecuencia a la que se debe actualizar el modelo de serie temporal con las observaciones nuevas. La opción predeterminada es actualizar el modelo 1 vez al año.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Este parámetro define la frecuencia con la que se actualizará el modelo de serie temporal con observaciones nuevas. Una actualización frecuente del modelo puede suponer un coste informático y reportar muy pocos beneficios. Por ejemplo, si hay 365 divisiones u observaciones claras al año en un ráster multidimensional y se actualiza con cada observación, el procesamiento será 365 veces más costoso desde el punto de vista informático que la actualización anual; además, la precisión podría no ser mayor.",
	"@@Trend-To-RGB_modeltype_tag0@@": "El tipo de información de modelo que se convertirá a RGB.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Lineal: la información de tendencia lineal se convertirá a RGB. Esta es la opción predeterminada.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Armónica: la información de tendencia amónica se convertirá a RGB.",
	"@@Trend-To-RGB_raster_tag0@@": "El ráster de tendencia de entrada.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>El mejor valor de proporción de modelo. Durante el proceso de selección de modelo, la herramienta calculará el valor p de cada modelo y seleccionará un modelo que tenga la mayor cantidad de vértices mientras mantiene el valor p más pequeño (más significativo) basado en este valor de proporción. Un valor de 1 significa que el modelo tiene el valor p más bajo, pero es posible que no tenga un número elevado de vértices. El valor predeterminado es 1,25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>Número máximo de segmentos que se ajustarán a la serie temporal para cada píxel. El valor predeterminado es 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>Número mínimo de observaciones válidas necesarias para realizar el ajuste. El número de años del dataset multidimensional de entrada debe ser igual o mayor que este valor. El valor predeterminado es 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Especifica si se incluirán otras bandas en los resultados.</p><ul><li>Activado: se incluirán otras bandas en los resultados. La información de segmentación y vértices de la banda de segmentación inicial especificada en el parámetro<strong>Banda de procesamiento</strong>también se ajustará a las bandas restantes de las imágenes multibanda. Los resultados del modelo incluirán primero la banda de segmentación y, luego, las bandas restantes.</li><li>Desactivado: no se incluirán otras bandas. Esta es la opción predeterminada.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Especifica si se excluirán los segmentos que presentan una recuperación de un año.</p><ul><li>Activado: los segmentos que presenten una recuperación de un año se excluirán. Esta es la configuración predeterminada.</li><li>Desactivado: no se excluirán los segmentos que presenten una recuperación de un año.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>La banda que se utilizará para segmentar las trayectorias de valores de píxel a lo largo del tiempo. Elija la banda que capturará mejor los cambios en la entidad que desea observar.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>Umbral de valor p correspondiente a un modelo que se va a seleccionar. Una vez detectados los vértices en la etapa inicial del ajuste del modelo, la herramienta ajustará cada segmento y calculará el valor p para determinar la importancia del modelo. En la siguiente iteración, el modelo disminuirá el número de segmentos en uno y volverá a calcular el valor p. Esto continuará y, si el valor p es menor que el valor especificado en este parámetro, el modelo se seleccionará y la herramienta dejará de buscar un modelo mejor. Si no se selecciona ningún modelo, la herramienta seleccionará un modelo con un valor p menor que el<strong>valor p más bajo × mejor valor de proporción de modelo</strong>. El valor predeterminado es 0,01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>La capa ráster multidimensional Landsat de entrada.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Especifica si la recuperación presenta una tendencia creciente (positiva).</p><ul><li>Activado: la recuperación presenta una tendencia creciente. Esta es la opción predeterminada.</li><li>Desactivado: la recuperación presenta una tendencia descendente.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>Valor del umbral de recuperación, en años. Si un segmento presenta una tasa de recuperación más rápida que<strong>1/umbral de recuperación</strong>, el segmento se descarta y no se incluye en el modelo de serie temporal. El valor debe estar comprendido entre 0 y 1. El valor predeterminado es 0,25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>La fecha utilizada para seleccionar una división para cada año en el dataset multidimensional de entrada. Se seleccionará la división con la fecha más cercana a la fecha de ajuste. Este parámetro es obligatorio si el dataset de entrada contiene datos subanuales.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>Umbral que se va a utilizar para atenuar picos o anomalías en la trayectoria del valor de píxel. El valor debe estar entre 0 y 1, donde 1 significa que no hay atenuación. El valor predeterminado es 0,9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>El número de vértices adicionales por encima de<strong>max_num_segments + 1</strong>que se puede utilizar para ajustar el modelo durante la etapa inicial de identificación de vértices. Más adelante en el proceso de modelado, el número de vértices adicionales se reducirá a<strong>max_num_segments + 1</strong>. El valor predeterminado es 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>Los datasets ráster de entrada o los datasets ráster multidimensionales que se van a fusionar.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Especifica el método que se debe utilizar para resolver los píxeles superpuestos en los datasets combinados.</p><ul><li><strong>Primero</strong>: el valor de píxel de las áreas superpuestas es el valor del primer ráster de la lista de rásteres de entrada. Este es el valor predeterminado.</li><li><strong>Último</strong>: el valor de píxel de las áreas superpuestas es el valor del último ráster de la lista de rásteres de entrada.</li><li><strong>Mín.</strong>: el valor de píxel de las áreas superpuestas es el valor mínimo de los píxeles superpuestos.</li><li><strong>Máx.</strong>: el valor de píxel de las áreas superpuestas es el valor máximo de los píxeles superpuestos.</li><li><strong>Media</strong>: el valor de píxel de las áreas superpuestas es el promedio de los píxeles superpuestos.</li><li><strong>Suma</strong>: el valor de píxel de las áreas superpuestas es la suma total de los píxeles superpuestos.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Especifica la unidad de tiempo que se utilizará para la longitud de un ciclo armónico.</p><ul><li><strong>Días</strong>: la unidad para la duración del ciclo armónico es días.</li><li><strong>Años</strong>: la unidad para la duración del ciclo armónico es años. Esta es la opción predeterminada.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>La dimensión a lo largo de la cual se extraerá una tendencia para la variable o variables seleccionadas en el análisis.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>El número de frecuencia que se utilizará en el ajuste de tendencia. Este parámetro especifica la frecuencia de ciclos en un año. El valor predeterminado es 1, o un ciclo armónico por año.</p><p>Este parámetro se incluye únicamente en el análisis de tendencia de una regresión armónica.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Especifica si los valores NoData se ignorarán en el análisis.</p><ul><li>Activado: el análisis incluirá todos los píxeles válidos a lo largo de una dimensión determinada y se ignorarán los píxeles NoData. Esta es la opción predeterminada.</li><li>Desactivado: el análisis dará como resultado NoData si no hay valores NoData para los píxeles a lo largo de la dimensión determinada.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>La longitud de la variación periódica que se va a modelar. La unidad es días, independientemente de la unidad de tiempo de los datos de entrada. Por ejemplo, el verdor de las hojas tiene con frecuencia un ciclo fuerte de variación en un solo año, por lo que la longitud de ciclo es 365,25, aunque los datos de entrada sean el verdor mensual. Los datos de temperatura por hora tienen un ciclo fuerte de variación en un solo día, por lo que la longitud de ciclo es 1.</p><p>La longitud predeterminada es 365,25 días para los datos que varían en un ciclo anual.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Especifica si se calcula la estadística de valor P para el coeficiente de pendiente de la línea de tendencia.</p><ul><li>Activado: el valor P se calculará y mostrará en los detalles cuando se complete la función.</li><li>Desactivado: el valor P no se calculará. Esta es la opción predeterminada.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>El número de orden polinómico que se utilizará en el ajuste de tendencia. Este parámetro especifica el orden polinómico. El valor predeterminado es 2, o polinómico de segundo orden.</p><p>Este parámetro se incluye únicamente en el análisis de tendencia de una regresión polinómica.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Especifica si se calcula la estadística de idoneidad de ajuste de R cuadrado para la línea de ajuste de tendencia.</p><ul><li>Activado: R cuadrado se calculará y mostrará en los detalles cuando se complete la función.</li><li>Desactivado: R cuadrado no se calculará. Esta es la opción predeterminada.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>El ráster multidimensional de entrada.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Especifica si se genera el error cuadrático medio (RMSE) de la línea de ajuste de tendencia.</p><ul><li>Activado: RMSE se calculará y mostrará en los detalles cuando se complete la función. Esta es la opción predeterminada.</li><li>Desactivado: RMSE no se calculará.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Especifica la unidad de tiempo que se utilizará para la duración de un período semanal al realizar la prueba de Seasonal-Kendall.</p><ul><li>Días: la unidad para la duración del periodo semanal es días. Esta es la opción predeterminada.</li><li>Meses: la unidad de la duración del periodo estacional es meses.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Especifica el tipo de línea que se utilizará para ajustar a los valores de píxel a lo largo de una dimensión.</p><ul><li><strong>Lineal</strong>: ajusta los valores de píxel de una variable a lo largo de una línea de tendencia lineal. Esta es la opción predeterminada.</li><li><strong>Armónico</strong>: ajusta los valores de píxel de una variable a lo largo de una línea de tendencia armónica.</li><li><strong>Polinómico</strong>: ajusta los valores de píxel de una variable a lo largo de una línea de tendencia polinómica de segundo orden.</li><li><strong>Mann-Kendall</strong>: los valores de píxel variables se evaluarán con la prueba de tendencia Mann-Kendall.</li><li><strong>Seasonal-Kendall</strong>: los valores de píxel variables se evaluarán con la prueba de tendencia Seasonal-Kendall.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.</p><ul><li>Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.</li><li>Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.</li><li>Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.</li><li>Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.</li><li>Último de: utiliza el último tamaño de celda de los rásteres de entrada.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>El método utilizado para el cómputo.</p><ul><li><strong>Diferencia</strong>: la diferencia matemática (o resta) se calculará entre los valores de píxel de los rásteres de entrada. Este es el valor predeterminado.</li><li><strong>Diferencia relativa</strong>: se calculará la diferencia en los valores de píxel, teniendo en cuenta las magnitudes de los valores que se comparan.</li><li><strong>Diferencia de categoría</strong>: se calculará la diferencia entre dos rásteres temáticos o de categorías en los que la salida contiene transiciones de clase que ocurrieron entre los dos rásteres.</li><li><strong>Distancia euclidiana espectral</strong>: se calculará la distancia euclidiana entre los valores de píxel de dos rásteres multibanda.</li><li><strong>Diferencia de ángulo espectral</strong>: se calculará el ángulo espectral entre los valores de píxel de dos rásteres multibanda. La salida es en radianes.</li><li><strong>Banda con más cambio</strong>: se calculará la banda que representa el mayor cambio en cada píxel entre dos rásteres multibanda.</li></ul><p>Si<strong>Método de cálculo del cambio</strong>está definido como<strong>Diferencia de categoría</strong>y una de las entradas no es de categoría, se calculará la diferencia sencilla.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Especifique el método que se utilizará para simbolizar los píxeles que tienen clases cambiadas.</p><ul><li><strong>Promedio de colores de origen y destino</strong>: el color del píxel será el promedio del color de su clase original y el color de su clase final.</li><li><strong>Usar colores de origen</strong>: el color del píxel será el color de la clase original.</li><li><strong>Usar colores de destino</strong>: el color del píxel será el color de la clase final.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Elija qué extensión se debería usar en el ráster de salida:</p><ul><li>Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.</li><li>Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.</li><li>Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.</li><li>Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Elija el método Filtrar para el cómputo de cambios categóricos.</p><ul><li><strong>Conservar todas</strong>: se incluyen todas las clases en la salida y no se realiza ningún filtrado. Elija esta opción para ver el cambio y la persistencia en un único dataset.</li><li><strong>Conservar solo los píxeles cambiados</strong>: solo se incluyen en la salida las clases que han cambiado de un tipo de clase a otro. Elija esta opción si solo le interesan los cambios.</li><li><strong>Conservar solo los píxeles no cambiados</strong>: solo las clases que no han cambiado de un tipo de clase a otro se incluyen en la salida. Elija esta opción si solo le interesa la persistencia.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>Los valores de clase de<strong>De ráster</strong>que se incluirán en el cómputo, si se comparan dos rásteres de categorías. Esta es una lista delimitada por espacios de valores enteros que corresponden al campo<strong>ClassValue</strong>del dataset ráster de entrada.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>El primer ráster que se utilizará en el cómputo. Para evaluar el cambio de la hora 1 (anterior) a la hora 2 (posterior), introduzca aquí el ráster de la hora 1.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>Los valores de clase de<strong>A ráster</strong>que se incluirán en el cómputo, si se comparan dos rásteres de categorías. Esta es una lista delimitada por espacios de valores enteros que corresponden al campo<strong>ClassValue</strong>del dataset ráster de entrada.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>El segundo ráster que se utilizará en el cómputo. Para evaluar el cambio de la hora 1 (anterior) a la hora 2 (posterior), introduzca el ráster de la hora 2.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Especifique el método que se utilizará para simbolizar los píxeles que tienen clases cambiadas.</p><ul><li><strong>Promedio de colores de origen y destino</strong>: el color del píxel será el promedio del color de su clase original y el color de su clase final.</li><li><strong>Usar colores de origen</strong>: el color del píxel será el color de la clase original.</li><li><strong>Usar colores de destino</strong>: el color del píxel será el color de la clase final.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>Un campo que almacena nombres de clase en la entrada<strong>De ráster</strong>. Esta herramienta busca automáticamente el campo<strong>ClassName</strong>o<strong>Class_Name</strong>que se desea usar.</p><p>Utilice esta opción si la entrada no contiene estos nombres de campo estándar.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>Un campo que almacena nombres de clase en la entrada<strong>A ráster</strong>. Esta herramienta buscará automáticamente el campo<strong>ClassName</strong>o<strong>Class_Name</strong>que se desea usar.</p><p>Utilice esta opción si la entrada no contiene estos nombres de campo estándar.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>El número de columnas de píxeles que se van a utilizar en su dimensión de vecindad focal.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>El número de filas de píxeles que se van a utilizar en su dimensión de vecindad focal.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Rellena los huecos de NoData en la salida. Resulta útil cuando puede que las imágenes tengan líneas no continuas.</p>",
	"@@Statistics_raster_tag0@@": "<p>El ráster de entrada en el que realizar estadísticas focalizadas.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>A continuación, se muestran los siete tipos de funciones de estadísticas focalizadas:</p><ul><li>Mínimo: calcula el valor mínimo de los píxeles dentro de la vecindad.</li><li>Máximo: calcula el valor máximo de los píxeles dentro de la vecindad.</li><li>Media: calcula el valor medio de los píxeles dentro de la vecindad. Esta es la opción predeterminada.</li><li>Desviación estándar: calcula el valor de la desviación estándar de los píxeles dentro de la vecindad.</li><li>Valor medio: calcula el valor medio de los píxeles dentro de la vecindad.</li><li>Mayoría: calcula el valor de mayoría o el valor que se produce con mayor frecuencia de los píxeles dentro de la vecindad.</li><li>Minoría: calcula el valor de minoría o el valor que se produce con menor frecuencia de los píxeles dentro de la vecindad.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Especifica la dirección de cambio que se incluirá en el análisis.</p><p>Este parámetro solo está disponible si el ráster de análisis de cambios de entrada es la salida de las herramientas LandTrendr.</p><ul><li><strong>Todas las direcciones</strong>: todas las direcciones de cambio se incluyen en la salida. Esta es la opción predeterminada.</li><li><strong>Creciente</strong>: solo se incluye en la salida un cambio en la dirección positiva o creciente.</li><li><strong>Decreciente</strong>: solo se incluye en la salida un cambio en la dirección negativa o decreciente.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Especifica la información de cambio que se va a calcular para cada píxel.</p><ul><li><strong>Hora del cambio más reciente</strong>: cada píxel contiene la fecha del cambio más reciente de ese píxel en la serie temporal. Esta es la opción predeterminada.</li><li><strong>Hora del cambio más temprano</strong>: cada píxel contiene la fecha del cambio más temprano de ese píxel en la serie temporal.</li><li><strong>Hora del cambio más grande</strong>: cada píxel contiene la fecha del cambio más significativo de ese píxel en la serie temporal.</li><li><strong>Número de cambios</strong>: cada píxel contiene el número total de veces que el píxel cambió en la serie temporal.</li><li><strong>Hora del cambio más largo</strong>: cada píxel contiene la fecha de cambio al final del segmento de transición más largo en la serie temporal.</li><li><strong>Hora del cambio más corto</strong>: cada píxel contiene la fecha de cambio al final del segmento de transición más corto en la serie temporal.</li><li><strong>Hora del cambio más rápido</strong>: cada píxel contiene la fecha de cambio al final de la transición que se produjo más rápido.</li><li><strong>Hora del cambio más lento</strong>: cada píxel contiene la fecha de cambio al final de la transición que se produjo más lento.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Especifica si se filtrará por la duración del cambio.</p><p></p><ul><li>Activado: los resultados se filtran por duración para que en la salida solo se incluyan los cambios que duraron un tiempo determinado.</li><li>Desactivado: los resultados no se filtran por duración. Esta es la opción predeterminada.</li></ul><p>Este parámetro solo está disponible si el ráster de análisis de cambios de entrada es la salida de las herramientas LandTrendr.</p><p>Si este parámetro está activado, debe definir los parámetros<strong>Duración mínima</strong>y<strong>Duración máxima</strong>para el filtrado.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Especifica si se filtrará por la magnitud del cambio.</p><ul><li>Activado: los resultados se filtran por magnitud para que en la salida solo se incluyan los cambios de una magnitud determinada.</li><li>Desactivado: los resultados no se filtran por magnitud. Esta es la opción predeterminada.</li></ul><p>Este parámetro solo está disponible si el ráster de análisis de cambios de entrada es la salida de las herramientas LandTrendr.</p><p>Si este parámetro está activado, debe definir los parámetros<strong>Magnitud mínima</strong>y<strong>Magnitud máxima</strong>para el filtrado.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Especifica si se limita la salida por un rango de años.</p><ul><li>Activado: los resultados se filtran para que en la salida solo se incluyan los cambios que se produjeron en un rango específico de años.</li><li>Desactivado: los resultados no se filtran por año. Esta es la opción predeterminada.</li></ul><p>Si este parámetro está activado, debe definir los parámetros<strong>Valor mínimo</strong>y<strong>Valor máximo</strong>para el filtrado.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Filtre los resultados por valor inicial para que solo se incluyan en la salida los cambios de un valor inicial determinado.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Filtre los resultados por valor final para que solo se incluyan en la salida los cambios de un valor final determinado.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>El número máximo de cambios por píxel que se calculará. El número introducido corresponde al número de bandas del ráster de salida. El valor predeterminado es 1, lo cual significa que solamente se calcula una fecha de cambio y que el ráster de salida contiene una sola banda.</p><p>Este parámetro no está disponible si el parámetro<strong>Tipo de cambio</strong>se define como<strong>Número de cambios</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>El ráster de análisis de cambios de entrada.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Especifica si la fecha se extrae al principio de un segmento de cambio o al final.</p><p>Este parámetro solo está disponible si el ráster de análisis de cambios de entrada es la salida de las herramientas LandTrendr.</p><ul><li><strong>Inicio de segmento</strong>: extraiga la fecha al principio de un segmento de cambio. Esta es la opción predeterminada.</li><li><strong>Extremo de segmento</strong>: extraiga la fecha al final de un segmento de cambio.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>Unidades de área de los valores de densidad de salida.</p><ul><li>Unidades de mapa cuadradas: para el cuadrado de las unidades lineales de la referencia espacial de salida.</li><li>Millas cuadradas: para las millas (Estados Unidos).</li><li>Kilómetros cuadrados: para los kilómetros.</li><li>Acres: para los acres (Estados Unidos).</li><li>Hectáreas: para las hectáreas.</li><li>Metros cuadrados: para los metros.</li><li>Yardas cuadradas: para las yardas (Estados Unidos).</li><li>Pies cuadrados: para los pies (Estados Unidos).</li><li>Pulgadas cuadradas: para las pulgadas (Estados Unidos).</li><li>Centímetros cuadrados: para los centímetros.</li><li>Milímetros cuadrados: para los milímetros.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>El tamaño de píxel para el dataset ráster de salida. Si se ha establecido el valor de<strong>Tamaño de celda</strong>en los entornos de geoprocesamiento, será el ajuste predeterminado.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>El dataset que define las barreras.</p><p>Las barreras pueden ser una capa de entidades poligonales o de polilínea.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>Las entidades de entrada de punto o de línea para las que se calculará la densidad.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Determina si se utiliza una ruta más corta en un método esferoide (geodésico) o una tierra plana (planar).</p><ul><li><strong>Planar</strong>: utiliza distancias planares entre entidades. Esta es la opción predeterminada.</li><li><strong>Geodésico</strong>: utiliza distancias geodésicas entre entidades. Este método tiene en cuenta la curvatura del esferoide y trata correctamente los datos cercanos a los polos y la línea internacional de cambio de fecha.</li></ul><p>Es recomendable utilizar el método<strong>Geodésico</strong>con datos almacenados en un sistema de coordenadas que no sea adecuado para las mediciones de distancia y cualquier análisis que abarque un área geográfica extensa. Por ejemplo, Web Mercator o cualquier sistema de coordenadas geográficas debe usar el método<strong>Geodésico</strong>.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Determina qué representan los valores del ráster de salida.</p><ul><li><strong>Densidades</strong>: los valores de salida representan el valor de densidad previsto. Esta es la opción predeterminada.</li><li><strong>Recuentos esperados</strong>: los valores de salida representan la cantidad prevista del fenómeno dentro de cada píxel. Dado que el valor del píxel está vinculado al valor de<strong>Tamaño de celda</strong>especificado, el ráster resultante no puede remuestrearse con otro tamaño de píxel y seguir representando la cantidad del fenómeno.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Campo que denota los valores de población para cada entidad. El valor de<strong>Campo de población</strong>es el recuento o la cantidad que se expandirá a lo largo del paisaje para crear una superficie continua. Los valores de<strong>Campo de población</strong>pueden ser enteros o de punto flotante.</p><p>A continuación, se enumeran las opciones y los comportamientos predeterminados para el campo por orden de prioridad.</p><ul><li>Use<strong>Ninguno</strong>si no se utilizará un elemento o valor especial y cada entidad se contará una sola vez.</li><li>Use<strong>Forma</strong>si las entidades de entrada contienen Z.</li><li>De lo contrario, el campo predeterminado es<strong>POPULATION</strong>, o cualquier derivado aceptable de la población:<ul><li><strong>POPULATIONxxxx</strong>donde<strong>xxxx</strong>puede ser cualquier carácter válido, como<strong>POPULATION6</strong>,<strong>POPULATION1974</strong>, o<strong>POPULATIONROADTYPE</strong>.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>Si ninguno de los valores anteriores es válido, el valor predeterminado será<strong>None</strong>.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>El radio de búsqueda dentro del cual se calcula la densidad. Las unidades están basadas en la unidad lineal de la proyección.</p><p>Por ejemplo, si las unidades están expresadas en metros, para incluir todas las entidades que se encuentran dentro de una vecindad de una milla, establezca el radio de búsqueda en 1609,344 (ya que 1 milla son 1609,344 metros).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Denota si los valores<strong>NoData</strong>del<strong>Ráster de valor</strong>influirán en los resultados de la zona a la que pertenecen.</p><ul><li><strong>Sí</strong>: dentro de una zona, solo los píxeles que tienen un valor en el<strong>Ráster de valor</strong>se usarán para determinar el valor de salida para esa zona. Los píxeles<strong>NoData</strong>del<strong>Ráster de valor</strong>se ignorarán en el cálculo estadístico. Esta es la opción predeterminada.</li><li><strong>No</strong>: dentro de una zona, si hay píxeles<strong>NoData</strong>en el<strong>Ráster de valor</strong>, se considera que no hay suficiente información para realizar cálculos estadísticos para todos los píxeles de esa zona; por tanto, toda la zona recibirá el valor<strong>NoData</strong>en el ráster de salida.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Determina el método de interpolación de percentil que se desea utilizar si el número de valores del ráster de entrada que se desea calcular es par.</p><ul><li><strong>Detección automática</strong>: si el ráster de valor de entrada es de tipo píxel entero, se utiliza el método<strong>Más cercano.</strong> Si el ráster de valor de entrada es de tipo píxel de punto flotante, se utiliza el método<strong>Lineal.</strong> Esta es la opción predeterminada.</li><li><strong>Más cercano</strong>: se utiliza el valor disponible más cercano para el percentil deseado. En este caso, el tipo de píxel de salida es el mismo que el del ráster de valor de entrada.</li><li><strong>Lineal</strong>: se utiliza la media ponderada de los dos valores circundantes del percentil deseado. En este caso, el tipo de píxel de salida es un punto flotante.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>El percentil que se va a calcular. El valor predeterminado es 90, para el 90.º percentil.</p><p>Los valores pueden variar de 0 a 100. El 0.º percentil equivale en esencia a la estadística Mínimo, mientras que el 100.º percentil equivale a la estadística Máximo. Un valor de 50 generará en esencia el mismo resultado que la estadística Mediana.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Determina cómo se procesa el ráster de valor multidimensional de entrada.</p><ul><li><strong>División actual</strong>: se calculan estadísticas de la división actual de un dataset multidimensional. Esta es la opción predeterminada.</li><li><strong>Todas las divisiones</strong>: se calculan estadísticas de todas las dimensiones (tales como el tiempo o la profundidad) de un dataset multidimensional.</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>Tipo de estadísticas a calcular.</p><ul><li><strong>Media</strong>: calcula la media de todos los píxeles en el<strong>Ráster de valor</strong>que pertenecen a la misma zona que el píxel de salida.</li><li><strong>Mayoría</strong>: determina el valor que más se repite de todos los píxeles del<strong>Ráster de valor</strong>que pertenecen a la misma zona que el píxel de salida.</li><li><strong>Máximo</strong>: determina el valor más grande de todos los píxeles del<strong>Ráster de valor</strong>que pertenecen a la misma zona que el píxel de salida.</li><li><strong>Mediana</strong>: determina el valor medio de todos los píxeles del<strong>Ráster de valor</strong>que pertenecen a la misma zona que el píxel de salida.</li><li><strong>Mínimo</strong>: determina el valor más pequeño de todos los píxeles del<strong>Ráster de valor</strong>que pertenecen a la misma zona que el píxel de salida.</li><li><strong>Minoría</strong>: determina el valor que menos se repite de todos los píxeles del<strong>Ráster de valor</strong>que pertenecen a la misma zona que el píxel de salida.</li><li><strong>Percentil</strong>: calcula un percentil de todos los píxeles en el<strong>Ráster de valor</strong>que pertenecen a la misma zona que el píxel de salida.. El 90.º percentil se calcula de forma predeterminada. Puede determinar el percentil que se va a calcular con el parámetro<strong>Valor de percentil</strong>.</li><li><strong>Rango</strong>: calcula la diferencia entre el mayor y el menor valor de todos los píxeles del<strong>Ráster de valor</strong>que pertenecen a la misma zona que el píxel de salida.</li><li><strong>Desviación estándar</strong>: calcula la desviación estándar de todos los píxeles del<strong>Ráster de valor</strong>que pertenecen a la misma zona que el píxel de salida.</li><li><strong>Suma</strong>: calcula el valor total de todos los píxeles del<strong>Ráster de valor</strong>que pertenecen a la misma zona que el píxel de salida.</li><li><strong>Variedad</strong>: calcula el número de valores únicos de todos los píxeles del<strong>Ráster de valor</strong>que pertenecen a la misma zona que el píxel de salida.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>El ráster que contiene los valores en los cuales se calcula una estadística.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>El campo que mantiene los valores que definen cada zona. Puede ser un campo de enteros o de cadenas de caracteres del ráster zonal.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>El dataset que define las zonas. Las zonas se pueden definir mediante un ráster entero.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>Especifica cómo se calcula el tipo de estadística.</p><ul><li><strong>Aritmética</strong>: calcula estadísticas aritméticas. Esta es la opción predeterminada.</li><li><strong>Circular</strong>: calcula estadísticas circulares adecuadas para magnitudes cíclicas, como rumbo de brújula en grados, horas del día y fracciones de números reales.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>El valor más alto posible (límite superior) de los datos cíclicos. Es un número real positivo y su valor predeterminado es 360. Este valor también representa la misma cantidad que el valor más bajo posible (límite más bajo).</p><p>Este parámetro solo se aplica cuando se calculan estadísticas circulares.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>El ráster de entrada para el que se suavizará el límite entre zonas.</p><p>Debe ser de tipo entero.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Especifica el número de veces que se producirá el proceso de suavizado dos o una vez.</p><ul><li><p><strong>Activado</strong>: realiza una operación de expansión y contracción dos veces. La primera vez, la operación se realiza según el tipo de ordenación especificado. Luego se realiza una operación de expansión y contracción adicional con la prioridad invertida. Esta es la opción predeterminada.</p></li><li><p><strong>Desactivado</strong>: realiza la operación de expansión y contracción una vez según el tipo de ordenación.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Especifica el tipo de ordenamiento que debe utilizar en el proceso de suavizado. La ordenación determina la prioridad por la que se pueden expandir las celdas hacia sus vecinos.</p><p>La ordenación se puede llevar a cabo basándose en el valor o tamaño de zona.</p><ul><li><p><strong>No ordenar</strong>: las zonas no se ordenan por tamaño. Las zonas con valores más grandes tienen una mayor prioridad para expandirse en zonas con valores más pequeños en la salida suavizada. Esta es la opción predeterminada.</p></li><li><p><strong>Descendente</strong>: ordena las zonas por tamaño en orden descendente. Las zonas con las áreas totales más grandes tienen una prioridad más alta de expandirse a zonas con áreas totales más pequeñas. Esta opción tiende a eliminar o reducir la prevalencia de celdas de zonas más pequeñas en la salida suavizada.</p></li><li><p><strong>Ascendente</strong>: ordena las zonas por tamaño en orden ascendente. Las zonas con áreas totales más pequeñas tienen una prioridad mayor de expandirse en áreas totales más grandes. Esta opción tiende a conservar o aumentar la prevalencia de celdas de zonas más pequeñas en la salida suavizada.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>La dimensión de agregación. Esta es la dimensión a lo largo de la cual se agregan las variables.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Especifica el método que se utilizará para filtrar los datos multidimensionales de entrada antes de realizar la agregación.</p><ul><li><strong>Todo</strong>: se utilizará el rango completo de cada dimensión. Este es el valor predeterminado.</li><li><strong>Por valores</strong>: la dimensión se dividirá mediante un valor de dimensión o una lista de valores.</li><li><strong>Por rangos</strong>: la dimensión se dividirá mediante un rango o una lista de rangos.</li><li><strong>Por iteración</strong>: la dimensión se dividirá por encima de un tamaño de intervalo especificado.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Los parámetros de Definición de iteración le permiten definir los valores de dimensión que se utilizarán para filtrar los datos multidimensionales de entrada para el análisis cuando el parámetro <strong>Definición de dimensión</strong> se establece en <strong>Por iteración</strong>.</p><ul><li><strong>Dimensión</strong>: dimensión que se va a utilizar para filtrar.</li><li><strong>Inicio de la primera iteración</strong>: inicio del primer intervalo. Este intervalo se utiliza para iterar a través del dataset.</li><li><strong>Fin de la primera iteración</strong>: final del primer intervalo. Este intervalo se utiliza para iterar a través del dataset.</li><li><strong>Paso</strong>: frecuencia con la que se dividirán los datos.</li><li><strong>Unidad</strong>: unidad de iteración.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Especifica el intervalo de palabras clave que se utilizará al agregar en la dimensión.</p><p>Este parámetro es necesario cuando el parámetro <strong>Tipo</strong> está establecido en <strong>Palabra clave de intervalo</strong>.</p><ul><li><strong>Cada hora</strong>: los valores de datos se agregan en periodos de tiempo horarios, y el resultado incluye todas las horas de las series temporales. Esta es la opción predeterminada.</li><li><strong>Diariamente</strong>: los valores se agregan en periodos de tiempo diarios, y el resultado incluye todos los días de las series temporales.</li><li><strong>Semanalmente</strong>: los valores de datos se agregan en periodos de te tiempo semanales, y los resultados incluyen todas las semanas de las series temporales.</li><li><strong>Cada década</strong>: los valores de datos se agregan en 3 periodos de 10 días cada uno. El último periodo puede contener más o menos de 10 días. La salida incluye 3 divisiones para cada mes.</li><li><strong>Cada lustro</strong>: los valores de datos se agregan en 6 periodos de 5 días cada uno. El último periodo puede contener más o menos de 5 días. La salida incluye 6 periodos para cada mes.</li><li><strong>Mensualmente</strong>: los valores de datos se agregan en periodos de mensuales, y el resultado incluye todos los meses de las series de tiempo.</li><li><strong>Trimestralmente</strong>: los valores de datos se agregan en periodos de tiempo trimestrales, y el resultado incluye todos los trimestres de las series de tiempo.</li><li><strong>Anualmente</strong>: los valores de datos se agregan en periodos de tiempo anuales, y el resultado incluye todos los años de la series de tiempo.</li><li><strong>Recurrente diariamente</strong>: los valores de datos se agregan en periodos de tiempo diarios, y el resultado incluye un valor agregado por fecha juliana. El resultado incluye, como máximo, 366 periodos de tiempo diarios.</li><li><strong>Recurrente semanalmente</strong>: los valores de datos se agregan en periodos de tiempo semanales, y los resultados incluyen un valor agregado por semana. La salida incluye, como máximo, 53 periodos de tiempo semanales.</li><li><strong>Recurrente mensualmente</strong>: los valores de datos se agregan en periodos de tiempo mensuales, y los resultados incluyen un valor agregado por mes. La salida incluye, como máximo, 12 periodos de tiempo mensuales.</li><li><strong>Recurrente trimestralmente</strong>: los valores de datos se agregan en periodos de tiempo trimestrales, y los resultados incluyen un valor agregado por trimestre. La salida incluye, como máximo, 4 periodos de tiempo trimestrales.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Especifica el método matemático que se utilizará para combinar los periodos agregados en un intervalo.</p><ul><li><strong>Mayoría</strong>: el valor de píxel que se produce con más frecuencia se calculará en todos los periodos del intervalo.</li><li><strong>Máximo</strong>: el valor máximo de un píxel se calculará en todos los periodos del intervalo.</li><li><strong>Valor medio</strong>: la media de los valores de un píxel se calculará en todos los periodos del intervalo. Esta es la opción predeterminada.</li><li><strong>Mediana</strong>: la mediana de un píxel se calculará en todos los periodos del intervalo.</li><li><strong>Mínimo</strong>: el valor mínimo de un píxel se calculará en todos los periodos del intervalo.</li><li><strong>Minoría</strong>: el valor de píxel que se produce con menor frecuencia se calculará en todos los periodos del intervalo.</li><li><strong>Rango</strong>: el rango de valores de un píxel se calculará en todos los periodos del intervalo.</li><li><strong>Desviación estándar</strong>: la desviación estándar de los valores de un píxel se calculará en todos los periodos del intervalo.</li><li><strong>Suma</strong>: la suma de los valores del píxel se calculará en todos los periodos del intervalo.</li><li><strong>Variedad</strong>: el número de valores de píxel únicos se calculará en todos los periodos del intervalo.</li></ul><p>Todas las opciones tienen también un equivalente con una opción Ignorar NoData. Estas realizarán la operación matemática en todos los píxeles válidos a lo largo de la dimensión e ignorarán los píxeles NoData.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>Se usan los rangos de intervalos especificados en una tabla para agregar grupos de valores. Los valores mínimo y máximo especifican el rango que se incluirá.</p><p>Este parámetro es necesario si el parámetro <strong>Tipo</strong> está establecido en <strong>Rangos de intervalos</strong>.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>El ráster multidimensional de entrada.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Especifica el intervalo de dimensión en el que se agregarán los datos.</p><ul><li><strong>Todo</strong>: los datos variables se agregarán en todos los periodos. Esta es la opción predeterminada.</li><li><strong>Palabra clave de intervalo</strong>: los datos variables se agregarán utilizando un intervalo comúnmente conocido.</li><li><strong>Intervalo de valor</strong>: los datos variables se agregarán utilizando un intervalo y una unidad especificados por el usuario.</li><li><strong>Rangos de intervalos</strong>: los datos de variables se agregarán entre pares de valores o fechas especificados.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>Tamaño del intervalo utilizado para la agregación.</p><p>Este parámetro es necesario cuando el parámetro <strong>Tipo</strong> está establecido en <strong>Valor de intervalo</strong>.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>Valores de dimensión que se utilizarán para filtrar los datos multidimensionales de entrada para el análisis. Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por valores</strong>.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>Las variables que se agregarán a lo largo de la dimensión determinada.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>El archivo de definición de regresión de Esri (<strong>.ecd</strong>) de entrada que contiene las estadísticas y la información del dataset específico, el modelo de regresión y los atributos elegidos.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>El dataset o datasets ráster que representan las variables de indicador. Puede ser un ráster de una sola banda, un ráster de varias bandas, un ráster multidimensional, un dataset de mosaico o un conjunto de rásteres.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>Tipo de cálculo estadístico que desea realizar.</p><p>Las estadísticas disponibles son<strong>Mayoría</strong>,<strong>Máximo</strong>,<strong>Valor medio</strong>,<strong>Mediana</strong>,<strong>Mínimo</strong>,<strong>Minoría</strong>,<strong>Percentil</strong>,<strong>Rango</strong>,<strong>Desviación estándar</strong>,<strong>Suma</strong> y <strong>Variedad</strong>.</p><p>El valor predeterminado es <strong>Valor medio</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>Los colores se asignan aleatoriamente a píxeles no incluidos en el mapa de color.</p><ul><li>Desactivado: no se asigna ningún color a los píxeles no asignados. Este es el valor predeterminado.</li><li>Activado: se asigna un color a los píxeles no asignados.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>Si se elige el algoritmo Gram-Schmidt, también puede especificar el sensor que captura la entrada de ráster multibanda. La elección del tipo de sensor permite ajustar los pesos de banda adecuados.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>El valor del número de divisiones en zonas antes o por encima que se incluirán en la ventana definida. El valor debe ser un entero positivo entre 1 y 100. El valor predeterminado es 1.</p><p>La unidad de este parámetro es la división en zonas.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>Valor que se utilizará para redondear un valor lineal al rango de un valor medio circular determinado.</p><p>Su valor debe ser positivo. El valor predeterminado es 360 grados.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>Nombre de la dimensión a lo largo de la cual se moverá la ventana.</p><p>El valor predeterminado es la primera dimensión distinta de x,y encontrada en el ráster multidimensional de entrada.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>Valor del número de divisiones en zonas después o por debajo que se incluirán en la ventana definida. El valor debe ser un entero positivo entre 1 y 100. El valor predeterminado es 1.</p><p>La unidad de este parámetro es la división en zonas.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>El ráster de entrada solo puede ser un ráster multidimensional en formato de ráster de nube (archivo <strong>.crf</strong>).</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>Especifica cuántos valores NoData se gestionarán en el cálculo de estadísticas.</p><ul><li><strong>Datos</strong>: los valores NoData de la entrada de valores se ignorarán en los resultados de la ventana definida a la que pertenecen. Este es el valor predeterminado.</li><li><strong>NoData</strong>: los valores de salida serán NoData si ya existen valores NoData en la entrada dentro de la ventana definida.</li><li><strong>Rellenar NoData</strong>: los valores de celda NoData se reemplazarán con la estadística seleccionada dentro de la ventana definida.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Especifica el método de interpolación que se utilizará cuando el valor de percentil se encuentre entre dos valores de celda.</p><ul><li><strong>Detección automática</strong>: si el ráster de entrada es de tipo de píxel entero, se utilizará el método <strong>Más cercano</strong>. Si el ráster de entrada es de tipo píxel de punto flotante, se utilizará el método <strong>Lineal</strong>. Esta es la opción predeterminada.</li><li><strong>Más cercano</strong>: se utilizará el valor disponible más cercano para el percentil. En este caso, el tipo de píxel de salida será el mismo que el del ráster de valor de entrada.</li><li><strong>Lineal</strong>: se utilizará la media ponderada de los dos valores circundantes del percentil. En este caso, el tipo de píxel de salida será un punto flotante.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>Percentil que se calculará cuando <strong>Percentil</strong> esté seleccionado como el tipo de estadística. El valor predeterminado es 90, para el 90.º percentil.</p><p>Los valores pueden variar de 0 a 100. El 0.º percentil equivale en esencia a la estadística Mínimo, mientras que el 100.º percentil equivale a la estadística Máximo, con la excepción de que el resultado será de punto flotante. Un valor de 50 generará el mismo resultado que la estadística media.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Especifica el tipo de estadística que se va a calcular.</p><p></p><ul><li><strong>Media</strong>: se calculará la media (valor promedio) de las celdas en la ventana definida. Este es el valor predeterminado.</li><li><strong>Media circular</strong>: se calculará la media circular de las celdas en la ventana definida. Cuando se selecciona este tipo de estadística, el parámetro <strong>Valor de envoltura circular</strong> pasa a estar disponible.</li><li><strong>Mayoría</strong>: se identificará la mayoría (valor más frecuente) de las celdas en la ventana definida.</li><li><strong>Máximo</strong>: se identificará el valor máximo (valor más grande) de las celdas en la ventana definida.</li><li><strong>Mediana</strong>: se identificará la mediana de las celdas del vecindario.</li><li><strong>Mínimo</strong>: se identificará el valor mínimo (valor más pequeño) de las celdas del vecindario.</li><li><strong>Percentil</strong>: se calculará el percentil de las celdas del vecindario. Cuando se selecciona este tipo de estadísticas, los parámetros <strong>Valor de percentil</strong> y <strong>Tipo de interpolación de percentil</strong> pasan a estar disponibles. Utilice estos nuevos parámetros para designar el percentil para calcular y elegir respectivamente el tipo de interpolación que se va a utilizar.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>Dimensión que se va a utilizar en la interpolación.</p><p>Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Especifica el método que se utilizará para filtrar los datos multidimensionales de entrada antes de realizar la interpolación.</p><ul><li><strong>Por valores</strong>: la dimensión se dividirá mediante un valor de dimensión o una lista de valores.</li><li><strong>Por intervalo</strong>: la dimensión se dividirá mediante un rango o una lista de rangos.</li><li><strong>Por ráster de destino</strong>: la dimensión se dividirá utilizando un ráster multidimensional de destino concreto.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>Final del intervalo, que se utiliza en la iteración por el dataset.</p><p>Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Especifica si los valores NoData se ignorarán en el análisis.</p><ul><li>Desactivado: el análisis dará como resultado NoData si hay valores NoData en las porciones adyacentes. Este es el valor predeterminado.</li><li>Activado: el análisis solo utilizará las porciones con píxeles válidos e ignorará las porciones con NoData.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Especifica el método que se utilizará para interpolar el ráster.</p><ul><li><strong>Lineal</strong>: la salida se interpolará de forma lineal mediante el uso de porciones adyacentes. Este es el valor predeterminado.</li><li><strong>Vecino más cercano</strong>: la salida utilizará la porción adyacente más cercana.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>El ráster multidimensional de entrada.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>Principio del intervalo, que se utiliza en la iteración por el dataset.</p><p>Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>Frecuencia con la que se interpolarán los datos.</p><p>Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>Ráster de destino especificado en la definición de dimensión.</p><p>Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por ráster de destino</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>Unidad de intervalo.</p><p>Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por intervalo</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>Valores dimensionales que se van a utilizar para filtrar los datos multidimensionales de entrada para analizar.</p><p>Este parámetro es necesario si el parámetro <strong>Definición de dimensión</strong> tiene el valor <strong>Por valores</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>Variables que interpolará la definición de dimensión.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Especifica si el aplanamiento del terreno de la salida se hará con<strong>sigma cero</strong>o<strong>gamma cero</strong>.</p><ul><li><strong>Gamma cero</strong>: la retrodispersión beta cero se normalizará mediante el área de unidad de un plano de tangente local al DEM, que se conoce normalmente como ángulo de incidencia local. Este es el valor por defecto.</li><li><strong>Sigma cero</strong>: la retrodispersión beta cero se normalizará con un DEM para calcular el área.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>DEM de entrada.</p><p>El DEM se utiliza para estimar el área iluminada local.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Especifica si el sistema de referencia vertical del DEM de entrada se transformará a altura elipsoidal. La mayoría de los datasets de elevación hacen referencia a altura ortométrica a nivel del mar, por lo que es necesario realizar una corrección en estos casos para convertirla a altura elipsoidal.</p><ul><li>Activada: se realizará una corrección de geoide para convertir la altura ortométrica en altura elipsoidal (basándose en el geoide EGM96). Este es el valor predeterminado.</li><li>Desactivada: no se realizará ninguna corrección de geoide. Utilice esta opción solamente si el DEM ya está expresado en altura elipsoidal.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>Datos del radar de entrada.</p><p>Este ráster se debe calibrar primero radiométricamente en beta cero.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>Cálculo asignado a la tercera banda.</p><p>Un nombre de banda, un Id. de banda o una expresión algebraica que utiliza las bandas.</p><p>Los operadores admitidos son unarios: suma (+), resta (-), multiplicación (*) y división (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>Cálculo asignado a la segunda banda.</p><p>Un nombre de banda, un Id. de banda o una expresión algebraica que utiliza las bandas.</p><p>Los operadores admitidos son unarios: suma (+), resta (-), multiplicación (*) y división (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>Los datos ráster multibanda de entrada.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Especifica el método que se utilizará para extraer bandas.</p><ul><li>Nombres de banda: se utilizará el nombre de banda que representa el intervalo de longitud de onda en el espectro electromagnético (como Rojo, Infrarrojo cercano o Infrarrojo térmico) o la polarización (como VH, VV, HH o HV). Este es el valor predeterminado.</li><li>Id. de banda: se utilizará el número de banda (por ejemplo, B1, B2 o B3).</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>Cálculo asignado a la primera banda.</p><p>Un nombre de banda, un Id. de banda o una expresión algebraica que utiliza las bandas.</p><p>Los operadores admitidos son unarios: suma (+), resta (-), multiplicación (*) y división (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Elija el tipo de función de superficie que se ajustará alrededor de la celda de destino.</p><ul><li>Cuadrática: se ajustará una función de superficie bicuadrática a las celdas de la vecindad. Esta es la opción predeterminada.</li><li>Bicuadrática: se ajustará una función de superficie bicuadrática a las celdas de la vecindad.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>La salida se calculará a lo largo de esta distancia desde el centro de la celda de destino. Determina el tamaño de la vecindad. El valor predeterminado es el tamaño de celda ráster de entrada, que da lugar a una vecindad de 3 por 3.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>Unidades de medida (grados o porcentajes) que se utilizarán para el ráster de pendiente de salida. Este parámetro solo está activo cuando el<strong>Tipo de parámetro</strong>es<strong>Pendiente</strong>.</p><ul><li>Degree: la inclinación de la pendiente se calculará en grados. Esta es la opción predeterminada.</li><li>Elevación en porcentaje: la inclinación de la pendiente se calculará como elevación en porcentaje, que también se conoce como pendiente en porcentaje.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Especifica el tipo de parámetro de superficie de salida que se calculará.</p><ul><li>Pendiente: se calculará la tasa de cambio en la elevación. Esta es la opción predeterminada.</li><li>Orientación: se calculará la dirección de pendiente descendente de la tasa máxima de cambio de cada celda.</li><li>Curvatura media: se medirá la curvatura general de la superficie. Se calcula como la media de las curvaturas mínima y máxima. Esta curvatura describe la convexidad o concavidad intrínseca de la superficie, independientemente de la dirección o la influencia de la gravedad.</li><li>Curvatura tangencial (curva de nivel normal): se medirá la curvatura normal geométrica perpendicular a la línea de pendiente, tangente a la línea de curvas de nivel. Esta curvatura se suele aplicar para caracterizar la convergencia o divergencia del flujo por la superficie.</li><li>Curvatura de perfil (línea de pendiente normal): se medirá la curvatura normal geométrica a lo largo de la línea de pendiente. Esta curvatura se suele aplicar para caracterizar la aceleración y deceleración del flujo por la superficie.</li><li>Curvatura del plano (curva de nivel proyectada): se medirá la curvatura a lo largo de las líneas de curvas de nivel.</li><li>Torsión geodésica de curvas de nivel: se medirá la tasa de cambio en el ángulo de pendiente a lo largo de las líneas de las curvas de nivel.</li><li>Curvatura gaussiana: se medirá la curvatura general de la superficie. Se calcula como el producto de las curvaturas mínima y máxima.</li><li>Curvatura de Casorati: se medirá la curvatura general de la superficie. Puede ser cero o cualquier otro número positivo.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Especifica si se proyectan acimuts geodésicos para corregir la distorsión de ángulo causada por la referencia espacial de salida.Este parámetro solo está activo cuando el<strong>Tipo de parámetro</strong>es<strong>Orientación</strong>.</p><ul><li>Desactivado: no se proyectan acimuts geodésicos. Esta es la opción predeterminada.</li><li>Activado: se proyectan acimuts geodésicos.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>Ráster de entrada de superficie. El ráster puede ser un entero o punto flotante.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Especifica si la distancia de vecindad variará con los cambios del paisaje (adaptable). La distancia máxima viene determinada por la distancia de vecindad. La distancia mínima es el tamaño de celda ráster de entrada.</p><ul><li>Desactivado: se utilizará una única distancia de vecindad (fija) en todas las ubicaciones. Esta es la opción predeterminada.</li><li>Activado: se utilizará una distancia de vecindad adaptable en todas las ubicaciones.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Especifica si la orientación se medirá desde un punto del ecuador o desde el polo norte.Este parámetro solo está activo cuando el<strong>Tipo de parámetro</strong>es<strong>Orientación</strong>.</p><ul><li>Desactivado: la orientación se medirá desde el polo norte. Esta es la opción predeterminada.</li><li>Activado: la orientación se medirá a partir de un punto en el ecuador.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>Unidad lineal de valores z verticales.</p><p>Se define mediante un sistema de coordenadas verticales si existe. Si no existe un sistema de coordenadas verticales, la unidad z debe definirse en una lista de unidades para garantizar el cómputo geodésico correcto.</p><ul><li>Pulgada: la unidad lineal será pulgadas.</li><li>Pie: la unidad lineal será pies.</li><li>Yarda: la unidad lineal será yardas.</li><li>Milla estadounidense: la unidad lineal será millas.</li><li>Milla náutica: la unidad lineal será millas náuticas.</li><li>Milímetro: la unidad lineal será milímetros.</li><li>Centímetro: la unidad lineal será centímetros.</li><li>Metro: la unidad lineal será metros. Esta es la opción predeterminada.</li><li>Kilómetro: la unidad lineal será kilómetros.</li><li>Decímetro: la unidad lineal será decímetros.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>Un ráster que especifica las ubicaciones en las que se producirá el análisis.</p><p>El ráster puede ser de tipo entero o punto flotante.</p><p>Todas las celdas con un valor válido, incluido cero, compondrán la máscara. Las celdas que son NoData en la entrada de la máscara serán NoData en la salida.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Elija el tamaño de celda que desee usar en el ráster de salida. Si todos los tamaños de celda de entrada son iguales, todas las opciones generarán los mismos resultados.</p><ul><li>Primero de: utiliza el primer tamaño de celda de los rásteres de entrada.</li><li>Mínimo de: utiliza el tamaño de celda más pequeño de todos los rásteres de entrada.</li><li>Máximo de: utiliza el tamaño de celda más grande de todos los rásteres de entrada. Esta es la opción predeterminada.</li><li>Valor medio de: utiliza el tamaño de celda medio de todos los rásteres de entrada.</li><li>Último de: utiliza el último tamaño de celda de los rásteres de entrada.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>Especifica el valor de convergencia entre dos iteraciones consecutivas. Cuando épsilon es menor o igual que el valor especificado, la iteración se detiene y se utiliza el resultado de la última iteración.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Elija qué extensión se debería usar en el ráster de salida:</p><ul><li><p>Primero de: utiliza la extensión del primer ráster de entrada para determinar la extensión del procesamiento.</p></li><li>Intersección de: utiliza la extensión de los píxeles superpuestos para determinar la extensión del procesamiento. Esta es la opción predeterminada.</li><li>Unión de: utiliza la extensión de todos los rásteres para determinar la extensión del procesamiento.</li><li>Último de: utiliza la extensión del último ráster de entrada para determinar la extensión del procesamiento.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Especifica el número máximo de iteraciones que se completarán. El cómputo termina cuando se alcanza este valor, independientemente del<strong>ajuste de</strong>Épsilon.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>Los rásteres multibanda de entrada.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>El ráster de entrada que representa el coste-distancia acumulativo desde el primer origen.</p><p>Debería ser una salida de coste-distancia acumulado a partir de la función <strong>Acumulación de distancia</strong> o <strong>Asignación de distancia</strong>.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>El ráster de entrada que representa el coste-distancia acumulativo desde el segundo origen.</p><p>Debería ser una salida de coste-distancia acumulado a partir de la función <strong>Acumulación de distancia</strong> o <strong>Asignación de distancia</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>El ráster de dirección hacia atrás de entrada desde el primer origen.</p><p>Es un dataset ráster que identifica la dirección de la próxima celda a lo largo de la ruta de menor coste que vuelve al primer origen. Esto surge de la función<strong>Acumulación de distancia</strong>o<strong>Asignación de distancia</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>El ráster de dirección hacia atrás de entrada desde el segundo origen.</p><p>Es un dataset ráster que identifica la dirección de la próxima celda a lo largo de la ruta de menor coste que vuelve al primer origen. Esto surge de la función<strong>Acumulación de distancia</strong>o<strong>Asignación de distancia</strong>.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>Un umbral de coste acumulativo o porcentaje que determinará si una celda determinada se incluirá en el ráster de corredor de salida.</p><p>Cuando el parámetro<strong>Método de umbral</strong>se establece en<strong>Porcentaje del menor coste</strong>,el valor especificado indica el aumento porcentual que se debe aplicar desde el valor mínimo de los rásteres de coste-distancia acumulativo sumados. Cuando el parámetro<strong>Método de umbral</strong>se establece en<strong>Coste acumulativo</strong>, el valor indica las celdas que tienen un coste acumulativo sumado igual o inferior al valor que se incluirá en el corredor.</p><p>Este parámetro solo está activo si el parámetro<strong>Método de umbral</strong>está establecido en<strong>Porcentaje del menor coste</strong>o<strong>Coste acumulativo</strong>.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Especifica cómo se definirá el umbral.</p><p></p><ul><li><strong>Sin umbral</strong>: no se aplicará ningún umbral y el corredor resultante abarcará la extensión completa de los rásteres de entrada. Esta es la opción predeterminada.</li><li><strong>Porcentaje de menor coste</strong>: el umbral se definirá como un porcentaje del valor mínimo de los rásteres de coste-distancia acumulativo sumados.</li><li><strong>Coste acumulativo</strong>: el umbral se definirá en unidades de coste-distancia acumulativo.</li></ul>"
};
const helpTexts_es = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_es);


//# sourceMappingURL=help-texts.es-c2958463.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,