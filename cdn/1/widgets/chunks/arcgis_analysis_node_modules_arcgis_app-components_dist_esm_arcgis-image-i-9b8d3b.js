"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-image-i-9b8d3b"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-image-item-preview.entry.js":
/*!****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-image-item-preview.entry.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_image_item_preview: () => (/* binding */ ArcgisImageItemPreview)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./layer-9a7593aa.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/layer-9a7593aa.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */





const arcgisImageItemPreviewCss = ".from-map-wrapper{position:relative;padding:0.5rem}.loader-container{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.map-container{width:100%;height:100%}.esri-zoom{position:absolute;top:1px;left:1px}.is-rtl .esri-zoom{left:0}";

const ArcgisImageItemPreview = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.jsapiUrl = undefined;
        this.previewLayerUrl = undefined;
        this.previewImageItemObjectId = undefined;
        this.loading = true;
    }
    async componentDidLoad() {
        // add JSAPI CSS link element before the component <style> tag
        this.el.shadowRoot.firstElementChild.insertAdjacentHTML("beforebegin", `<link rel="stylesheet" href="${this.jsapiUrl}/themes/light/main.css" />`);
        this.initMapView();
    }
    handleRefreshImageItemPreviewLayer() {
        this.refreshImageItemPreviewLayer(this.previewImageItemObjectId);
    }
    async initMapView() {
        try {
            const { previewLayerUrl, previewImageItemObjectId } = this;
            const [Map, MapView, ImageryLayer] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__.l)([
                "esri/Map",
                "esri/views/MapView",
                "esri/layers/ImageryLayer"
            ]);
            this.previewLayer = new ImageryLayer({ url: previewLayerUrl, visible: false });
            const map = new Map({
                layers: [this.previewLayer]
            });
            this.mapView = new MapView({
                map,
                container: this.container
            });
            this.mapView.ui.remove(["attribution"]);
            this.mapView.when(() => {
                this.refreshImageItemPreviewLayer(previewImageItemObjectId);
                this.loading = false;
            });
        }
        catch (e) { }
    }
    async refreshImageItemPreviewLayer(imageItemObjectId) {
        const [MosaicRule] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__.l)(["esri/layers/support/MosaicRule"]);
        const mosaicRule = new MosaicRule({
            method: "lock-raster",
            lockRasterIds: [imageItemObjectId]
        });
        this.previewLayer.mosaicRule = mosaicRule;
        const imageItemGeometry = await (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_2__.m)(this.previewLayer, imageItemObjectId);
        this.mapView.goTo({ target: imageItemGeometry });
        this.previewLayer.visible = true;
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "map-container", ref: (el) => (this.container = el) })));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "previewImageItemObjectId": ["handleRefreshImageItemPreviewLayer"]
    }; }
};
ArcgisImageItemPreview.style = arcgisImageItemPreviewCss;



//# sourceMappingURL=arcgis-image-item-preview.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLWltYWdlLWktOWI4ZDNiLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDMkY7QUFDOUI7QUFDRztBQUM5Qjs7QUFFbEMscURBQXFELGtCQUFrQixlQUFlLGtCQUFrQixrQkFBa0IsUUFBUSxTQUFTLGdDQUFnQyxlQUFlLFdBQVcsWUFBWSxXQUFXLGtCQUFrQixRQUFRLFNBQVMsbUJBQW1CLE9BQU87O0FBRXpSO0FBQ0E7QUFDQSxRQUFRLHFEQUFnQjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtHQUErRyxjQUFjO0FBQzdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDRDQUE0QztBQUNoRSx1REFBdUQsMkRBQVc7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsc0NBQXNDO0FBQ3pGO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLDJEQUFXO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHdDQUF3QyxxREFBb0I7QUFDNUQsNEJBQTRCLDJCQUEyQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscURBQUMsQ0FBQyxpREFBSSxRQUFRLHFEQUFDLFVBQVUsNERBQTREO0FBQ3JHO0FBQ0EsZUFBZSxPQUFPLHFEQUFVO0FBQ2hDLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFK0Q7O0FBRS9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vYXJjZ2lzLWltYWdlLWl0ZW0tcHJldmlldy5lbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2NC4wLjU4XG4gKi9cbmltcG9ydCB7IHIgYXMgcmVnaXN0ZXJJbnN0YW5jZSwgaCwgSCBhcyBIb3N0LCBkIGFzIGdldEVsZW1lbnQgfSBmcm9tICcuL2luZGV4LWUzYmY3ZGE3LmpzJztcbmltcG9ydCB7IGwgYXMgbG9hZE1vZHVsZXMgfSBmcm9tICcuL2xvYWRNb2R1bGVzLWI0YWMxMjQ3LmpzJztcbmltcG9ydCB7IG0gYXMgZ2V0SW1hZ2VJdGVtR2VvbWV0cnkgfSBmcm9tICcuL2xheWVyLTlhNzU5M2FhLmpzJztcbmltcG9ydCAnLi9mdW5jdGlvbmFsLTQ0ZGU4ZmNmLmpzJztcblxuY29uc3QgYXJjZ2lzSW1hZ2VJdGVtUHJldmlld0NzcyA9IFwiLmZyb20tbWFwLXdyYXBwZXJ7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZzowLjVyZW19LmxvYWRlci1jb250YWluZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC01MCUpfS5tYXAtY29udGFpbmVye3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9LmVzcmktem9vbXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MXB4O2xlZnQ6MXB4fS5pcy1ydGwgLmVzcmktem9vbXtsZWZ0OjB9XCI7XG5cbmNvbnN0IEFyY2dpc0ltYWdlSXRlbVByZXZpZXcgPSBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgICAgICB0aGlzLmpzYXBpVXJsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnByZXZpZXdMYXllclVybCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wcmV2aWV3SW1hZ2VJdGVtT2JqZWN0SWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgfVxuICAgIGFzeW5jIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgICAgIC8vIGFkZCBKU0FQSSBDU1MgbGluayBlbGVtZW50IGJlZm9yZSB0aGUgY29tcG9uZW50IDxzdHlsZT4gdGFnXG4gICAgICAgIHRoaXMuZWwuc2hhZG93Um9vdC5maXJzdEVsZW1lbnRDaGlsZC5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmViZWdpblwiLCBgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCIke3RoaXMuanNhcGlVcmx9L3RoZW1lcy9saWdodC9tYWluLmNzc1wiIC8+YCk7XG4gICAgICAgIHRoaXMuaW5pdE1hcFZpZXcoKTtcbiAgICB9XG4gICAgaGFuZGxlUmVmcmVzaEltYWdlSXRlbVByZXZpZXdMYXllcigpIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoSW1hZ2VJdGVtUHJldmlld0xheWVyKHRoaXMucHJldmlld0ltYWdlSXRlbU9iamVjdElkKTtcbiAgICB9XG4gICAgYXN5bmMgaW5pdE1hcFZpZXcoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IHByZXZpZXdMYXllclVybCwgcHJldmlld0ltYWdlSXRlbU9iamVjdElkIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgW01hcCwgTWFwVmlldywgSW1hZ2VyeUxheWVyXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcbiAgICAgICAgICAgICAgICBcImVzcmkvTWFwXCIsXG4gICAgICAgICAgICAgICAgXCJlc3JpL3ZpZXdzL01hcFZpZXdcIixcbiAgICAgICAgICAgICAgICBcImVzcmkvbGF5ZXJzL0ltYWdlcnlMYXllclwiXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHRoaXMucHJldmlld0xheWVyID0gbmV3IEltYWdlcnlMYXllcih7IHVybDogcHJldmlld0xheWVyVXJsLCB2aXNpYmxlOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoe1xuICAgICAgICAgICAgICAgIGxheWVyczogW3RoaXMucHJldmlld0xheWVyXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1hcFZpZXcgPSBuZXcgTWFwVmlldyh7XG4gICAgICAgICAgICAgICAgbWFwLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogdGhpcy5jb250YWluZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5tYXBWaWV3LnVpLnJlbW92ZShbXCJhdHRyaWJ1dGlvblwiXSk7XG4gICAgICAgICAgICB0aGlzLm1hcFZpZXcud2hlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoSW1hZ2VJdGVtUHJldmlld0xheWVyKHByZXZpZXdJbWFnZUl0ZW1PYmplY3RJZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgfVxuICAgIGFzeW5jIHJlZnJlc2hJbWFnZUl0ZW1QcmV2aWV3TGF5ZXIoaW1hZ2VJdGVtT2JqZWN0SWQpIHtcbiAgICAgICAgY29uc3QgW01vc2FpY1J1bGVdID0gYXdhaXQgbG9hZE1vZHVsZXMoW1wiZXNyaS9sYXllcnMvc3VwcG9ydC9Nb3NhaWNSdWxlXCJdKTtcbiAgICAgICAgY29uc3QgbW9zYWljUnVsZSA9IG5ldyBNb3NhaWNSdWxlKHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJsb2NrLXJhc3RlclwiLFxuICAgICAgICAgICAgbG9ja1Jhc3RlcklkczogW2ltYWdlSXRlbU9iamVjdElkXVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wcmV2aWV3TGF5ZXIubW9zYWljUnVsZSA9IG1vc2FpY1J1bGU7XG4gICAgICAgIGNvbnN0IGltYWdlSXRlbUdlb21ldHJ5ID0gYXdhaXQgZ2V0SW1hZ2VJdGVtR2VvbWV0cnkodGhpcy5wcmV2aWV3TGF5ZXIsIGltYWdlSXRlbU9iamVjdElkKTtcbiAgICAgICAgdGhpcy5tYXBWaWV3LmdvVG8oeyB0YXJnZXQ6IGltYWdlSXRlbUdlb21ldHJ5IH0pO1xuICAgICAgICB0aGlzLnByZXZpZXdMYXllci52aXNpYmxlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKGgoSG9zdCwgbnVsbCwgaChcImRpdlwiLCB7IGNsYXNzOiBcIm1hcC1jb250YWluZXJcIiwgcmVmOiAoZWwpID0+ICh0aGlzLmNvbnRhaW5lciA9IGVsKSB9KSkpO1xuICAgIH1cbiAgICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG4gICAgc3RhdGljIGdldCB3YXRjaGVycygpIHsgcmV0dXJuIHtcbiAgICAgICAgXCJwcmV2aWV3SW1hZ2VJdGVtT2JqZWN0SWRcIjogW1wiaGFuZGxlUmVmcmVzaEltYWdlSXRlbVByZXZpZXdMYXllclwiXVxuICAgIH07IH1cbn07XG5BcmNnaXNJbWFnZUl0ZW1QcmV2aWV3LnN0eWxlID0gYXJjZ2lzSW1hZ2VJdGVtUHJldmlld0NzcztcblxuZXhwb3J0IHsgQXJjZ2lzSW1hZ2VJdGVtUHJldmlldyBhcyBhcmNnaXNfaW1hZ2VfaXRlbV9wcmV2aWV3IH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyY2dpcy1pbWFnZS1pdGVtLXByZXZpZXcuZW50cnkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9