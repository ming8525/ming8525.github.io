"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-95eb49"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.en-f9d07fbe.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.en-f9d07fbe.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Abs_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Abs_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Abs_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Abs_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Abs_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Abs_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Abs_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Abs_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Abs_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Abs_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Abs_Raster_tag0@@": "The input raster for which to calculate the absolute values.",
	"@@ACos_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@ACos_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@ACos_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@ACos_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@ACos_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@ACos_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@ACos_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@ACos_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@ACos_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@ACos_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@ACos_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@ACos_Raster_tag0@@": "The input for which to calculate the inverse cosine values.",
	"@@ACosH_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@ACosH_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@ACosH_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@ACosH_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@ACosH_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@ACosH_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@ACosH_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@ACosH_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@ACosH_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@ACosH_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@ACosH_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@ACosH_Raster_tag0@@": "The input for which to calculate the inverse hyperbolic cosine values.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "The results of the Apparent Reflectance function can also be expressed as albedo, which is the percentage of the available energy reflected by the planetary surface. Albedo data is used by scientific users for complex modeling and technical remote-sensing applications.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Unchecked--The function returns apparent reflectance values. This is the default.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Checked--The function returns 32-bit floating-point values, which most commonly are in the range of 0.0 to 1.0. No data clipping is performed if this option is selected.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Since the output data type for albedo is floating point, you must explicitly set the preferred <strong>Output Pixel Type</strong> to either 32-bit float or 64-bit double. The <strong>Output Pixel Type</strong> parameter is found on the <strong>General</strong> tab in the <strong>Apparent Reflectance</strong> raster function. If the <strong>Output Pixel Type</strong> is not set correctly for the <strong>Albedo</strong> option, the resulting values will be invalid and given a value of 0.",
	"@@Apparent-Reflectance_Offset_tag0@@": "Your scaled albedo value can optionally have an offset value:",
	"@@Apparent-Reflectance_Offset_tag1@@": "For 16-bit unsigned data types, the default scale offset is 5,000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "For 8-bit unsigned data types, the default scale offset is 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "No scaling is applied when the output is albedo.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "You can manually set or edit this value for each band. The appropriate information can be read from the metadata of the input raster product.",
	"@@Apparent-Reflectance_Raster_tag0@@": "The raster product on which the apparent reflectance will be applied.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "Your apparent reflectance output value can be expressed as an integer. The scaling factor is multiplied by the albedo to convert all floating-point values into integer values.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "If the scale factor is either ${0} or not specified, default scaling will be applied depending on the pixel type of the input data:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "For 16-bit unsigned data types, the default scale factor is 50,000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "For 8-bit unsigned data types, default scale factor is 255.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "The scaling factor is always applied when the output is apparent reflectance. No scaling is applied when the output is albedo.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "This is sun elevation value, expressed in degrees. This will be populated by the system if the appropriate information can be read from the metadata. You can manually set or edit this value.",
	"@@ArgStatistics_Max_tag0@@": "The maximum value that you set is the highest value equal to or less than the end of the duration.",
	"@@ArgStatistics_Max_tag1@@": "This input is only applicable when the method is Duration.",
	"@@ArgStatistics_Method_tag0@@": "Select the statistics method to calculate:",
	"@@ArgStatistics_Method_tag1@@": "Arg Max--The argument of the maximum, which returns the ${Band index} for which the given pixel attains its minimum value from all the bands. All raster bands from every input raster are assigned a 0-based incremental band index, which is first ordered by the input raster index, and then by the relative band order within each input raster.",
	"@@ArgStatistics_Method_tag2@@": "Arg Median--The argument of the median, which returns the ${Band index} for which the given pixel attains the median value of values from all bands.",
	"@@ArgStatistics_Method_tag3@@": "Arg Min--The argument of the minimum, which returns the ${Band index} for which the given pixel attains its minimum value from all the bands.",
	"@@ArgStatistics_Method_tag4@@": "Duration--The Duration method finds the longest consecutive elements in the array, where each element has a value greater than or equal to <strong>Min</strong> and less than or equal to <strong>Max</strong>, and then returns its length.",
	"@@ArgStatistics_Min_tag0@@": "The minimum value that you set is the lowest value equal to or greater than the beginning of the duration.",
	"@@ArgStatistics_Min_tag1@@": "This input is only applicable when the method is Duration.",
	"@@ArgStatistics_Rasters_tag0@@": "The input raster that you will perform the various statistical methods upon.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "A constant input that will be returned when no definitive maximum, minimum, or median can be attained. The most common scenario is when the maximum or minimum value occurs more than once among values from all bands. The default value for the undefined constant is 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "The undefined class is only applicable when the method is <strong>ArgMax</strong>, <strong>ArgMin</strong>, or <strong>ArgMedian</strong>.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Denotes whether NoData values are ignored in the statistical calculation.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Checked--The analysis will include all valid pixels in the input rasters and ignore any NoData pixels.",
	"@@ArgStatistics_ignorenodata_tag2@@": "Unchecked--The analysis will result in NoData if there are any NoData values for the pixels in the input rasters. This is the default.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Arithmetic_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Arithmetic_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Arithmetic_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Arithmetic_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Arithmetic_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Arithmetic_Operation_tag0@@": "The arithmetic operation to be performed between the two input rasters.",
	"@@Arithmetic_Operation_tag1@@": "The options are as follows:",
	"@@Arithmetic_Operation_tag2@@": "<strong>Divide</strong>--Outputs the divisible result between the corresponding pixel values for each raster.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Minus</strong>--Outputs the difference between the corresponding pixel values for each raster. This can be used to calculate change detection.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Mode</strong>--Outputs the pixel value of all overlapping pixels that occurs the most. For example, if there are six bands in a raster, there will be six overlapping pixels. For the values 4, 5, 6, 4, 7, 9, the mode value is 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Multiply</strong>--Outputs the product of the corresponding pixel values for each raster. This can be used to perform some cost functions.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Plus</strong>--Outputs the sum of all the corresponding pixel values for each raster.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Power</strong>--Outputs the product of the corresponding pixel values raised to the power of the input raster or scalar.",
	"@@Arithmetic_Raster_tag0@@": "The first input raster dataset.",
	"@@Arithmetic_Raster2_tag0@@": "The second input raster dataset.",
	"@@ASin_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@ASin_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@ASin_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@ASin_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@ASin_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@ASin_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@ASin_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@ASin_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@ASin_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@ASin_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@ASin_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@ASin_Raster_tag0@@": "The input for which to calculate the inverse sine values.",
	"@@ASinH_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@ASinH_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@ASinH_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@ASinH_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@ASinH_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@ASinH_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@ASinH_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@ASinH_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@ASinH_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@ASinH_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@ASinH_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@ASinH_Raster_tag0@@": "The input for which to calculate the inverse hyperbolic sine values.",
	"@@Aspect_Raster_tag0@@": "The input DEM used to derive the aspect dataset.",
	"@@Aspect-Slope_Raster_tag0@@": "The input DEM.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "A scaling factor used to convert the elevation values for the following two purposes:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "Convert the elevation units (such as meters or feet) to the horizontal coordinate units of the dataset, which may be feet, meters, or degrees.",
	"@@Aspect-Slope_Z-Factor_tag2@@": "Add vertical exaggeration for visual effect.",
	"@@ATan_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@ATan_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@ATan_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@ATan_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@ATan_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@ATan_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@ATan_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@ATan_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@ATan_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@ATan_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@ATan_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@ATan_Raster_tag0@@": "The input for which to calculate the inverse tangent values.",
	"@@ATan2_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@ATan2_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@ATan2_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@ATan2_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@ATan2_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@ATan2_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@ATan2_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@ATan2_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@ATan2_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@ATan2_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@ATan2_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@ATan2_Raster_tag0@@": "The input that specifies the numerator, or y value, to use when calculating the inverse tangent.",
	"@@ATan2_Raster2_tag0@@": "The input that specifies the denominator, or x value, to use when calculating the inverse tangent.",
	"@@ATanH_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@ATanH_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@ATanH_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@ATanH_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@ATanH_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@ATanH_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@ATanH_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@ATanH_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@ATanH_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@ATanH_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@ATanH_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@ATanH_Raster_tag0@@": "The input for which to calculate the inverse hyperbolic tangent values.",
	"@@Attribute-Table_Raster_tag0@@": "The input raster.",
	"@@Attribute-Table_Table-Type_tag0@@": "The input attribute table can be entered using the <strong>Manual</strong> type where you assign a class name and a color to each value, or you can reference an existing table which comes from a ${.dbf} file.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Define your band arithmetic formula if you chose <strong>User Defined</strong> for your <strong>Method</strong>.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "If you chose a predefined index for your <strong>Method</strong>, define the proper bands of your input raster dataset that correspond to the index.",
	"@@Band-Arithmetic_Method_tag0@@": "The type of band arithmetic algorithm you want to deploy. You can define your custom algorithm, or choose a predefined index.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong>--Burn Area Index",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>CIg</strong>--Chlorophyll Index - Green",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>CIre</strong>--Chlorophyll Index - Red Edge",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Clay Minerals</strong>--Clay Minerals Ratio",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong>--Enhanced Vegetation Index",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Ferrous Minerals</strong>--Ferrous Minerals Ratio",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong>--Global Environmental Monitoring Index",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong>--Green Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong>--Green Vegetation Index Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Iron Oxide</strong>--Iron Oxide Ratio",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong>--Modified Normalized Difference Water Index",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong>--Modified Triangulated Vegetation Index (second iteration)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>Modified SAVI</strong>--Modified Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong>--Normalized Burn Ratio Index",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong>--Normalized Difference Built-up Index",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong>--Normalized Difference Moisture Index",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong>--Normalized Difference Snow Index",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong>--Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong>--Red-Edge Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong>--Normalized Difference Water Index",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong>--Perpendicular Vegetation Index",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong>--Red-Edge Triangulated Vegetation Index",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong>--Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong>--Simple Ratio",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong>--Red-Edge Simple Ratio",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Sultan's Formula</strong>--Sultan's Formula",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>Transformed SAVI</strong>--Transformed Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>User Defined</strong>--Allows you to define your custom band arithmetic expression.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong>--Visible Atmospherically Resistant Index",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong>--Weighted Normalized Difference Water Index",
	"@@Band-Arithmetic_Raster_tag0@@": "The input raster.",
	"@@Binary-Thresholding_Raster_tag0@@": "The input raster.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Bitwise-And_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Bitwise-And_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Bitwise-And_Raster_tag0@@": "The first input to use in this bitwise operation.",
	"@@Bitwise-And_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Bitwise-And_Raster2_tag0@@": "The second input to use in this bitwise operation.",
	"@@Bitwise-And_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "The input on which to perform the shift.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "The input defining the number of positions to shift the bits.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Bitwise-Not_Raster_tag0@@": "The input raster on which to perform the Bitwise Not (complement) operation.",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Bitwise-Or_Raster_tag0@@": "The first input to use in this bitwise operation.",
	"@@Bitwise-Or_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Bitwise-Or_Raster2_tag0@@": "The second input to use in this bitwise operation.",
	"@@Bitwise-Or_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "The input on which to perform the shift.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "The input defining the number of positions to shift the bits.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Bitwise-Xor_Raster_tag0@@": "The first input to use in this bitwise operation.",
	"@@Bitwise-Xor_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Bitwise-Xor_Raster2_tag0@@": "The second input to use in this bitwise operation.",
	"@@Bitwise-Xor_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Boolean-and_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Boolean-and_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Boolean-and_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Boolean-and_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Boolean-and_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Boolean-and_Raster_tag0@@": "The first input to use in this Boolean operation.",
	"@@Boolean-and_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Boolean-and_Raster2_tag0@@": "The second input to use in this Boolean operation.",
	"@@Boolean-and_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Boolean-Not_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Boolean-Not_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Boolean-Not_Raster_tag0@@": "The first input to use in this Boolean operation.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Boolean-Or_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Boolean-Or_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Boolean-Or_Raster_tag0@@": "The first input to use in this Boolean operation.",
	"@@Boolean-Or_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Boolean-Or_Raster2_tag0@@": "The second input to use in this Boolean operation.",
	"@@Boolean-Or_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Boolean-Xor_Raster_tag0@@": "The first input to use in this Boolean operation.",
	"@@Boolean-Xor_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Boolean-Xor_Raster2_tag0@@": "The second input to use in this Boolean operation.",
	"@@Boolean-Xor_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Buffered_Raster_tag0@@": "The input raster to be stored in memory.",
	"@@Calculator_Cellsize-Type_tag0@@": "The cell size used to create the output raster.",
	"@@Calculator_Cellsize-Type_tag1@@": "You can choose the output cell size from the following options in the drop down list:",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>First Of</strong>--The cellsize of the first raster variable.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Min Of</strong>--The minimum cellsize of the input rasters.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Max Of</strong>--The maximum cellsize of the input rasters.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Mean Of</strong>--The average cellsize of the input rasters.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Last Of</strong>--The cellsize of the last raster variable.",
	"@@Calculator_Cellsize-Type_tag12@@": "The default selection is <strong>Max Of</strong>.",
	"@@Calculator_Expression_tag0@@": "Build an algebraic expression to perform spatial analysis on the input raster.",
	"@@Calculator_Expression_tag1@@": "All existing math functions can be called to build the expression. The available operators are listed below.",
	"@@Calculator_Expression_tag2@@": "Arithmetic Operations",
	"@@Calculator_Expression_tag3@@": "Addition: +",
	"@@Calculator_Expression_tag4@@": "Division: /",
	"@@Calculator_Expression_tag5@@": "Modulo: %",
	"@@Calculator_Expression_tag6@@": "Multiplication: *",
	"@@Calculator_Expression_tag7@@": "Power: **",
	"@@Calculator_Expression_tag8@@": "Subtraction: -",
	"@@Calculator_Expression_tag9@@": "Boolean Operations",
	"@@Calculator_Expression_tag10@@": "Boolean And: &&",
	"@@Calculator_Expression_tag11@@": "Boolean Or: ||",
	"@@Calculator_Expression_tag12@@": "Relation Operations",
	"@@Calculator_Expression_tag13@@": "Equal to: ==",
	"@@Calculator_Expression_tag14@@": "Greater than: >",
	"@@Calculator_Expression_tag15@@": "Greater than or Equal to: >=",
	"@@Calculator_Expression_tag16@@": "Less than: <",
	"@@Calculator_Expression_tag17@@": "Less than or Equal to: <=",
	"@@Calculator_Expression_tag18@@": "Not Equal to: !=",
	"@@Calculator_Expression_tag19@@": "Additional Operations",
	"@@Calculator_Expression_tag20@@": "Minimum of two rasters on a per-pixel basis: min(a,b)",
	"@@Calculator_Expression_tag21@@": "Maximum of two rasters on a per-pixel basis: max(a,b)",
	"@@Calculator_Expression_tag22@@": "Here are some examples of expressions:",
	"@@Calculator_Expression_tag23@@": "Simple Conditional Statement: in a raster (denoted by T) find elevation values above 4,000 feet and give these areas a value of 1 and all other areas a value of 0.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Nested Conditional Statement: find areas where slope (denoted by b1)) is below 10 degrees and NDVI (denoted by b2) is above 0.5, and give these areas a value of 1. For all other areas, assign a value of 2 if slope is above 10 degrees and elevation (denoted by b3) is over 2,500 feet. All other areas are assigned a value of 3.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Choose which extent should be used in the output raster:</p><ul><li><p>First Of--Use the extent of the first input raster to determine the processing extent.</p></li><li>Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.</li><li>Union Of--Use the extent of all the rasters to determine the processing extent.</li><li>Last Of--Use the extent of the last input raster to determine the processing extent.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "The user-defined variable name and the input raster.",
	"@@Classify_Input-Definition-File_tag0@@": "The input Esri Classifier Definition (${.ecd}) file that contains the statistics and other classification information for the specific dataset, classifier, and chosen attributes.",
	"@@Classify_Raster_tag0@@": "The raster dataset you want to classify.",
	"@@Classify_Raster2_tag0@@": "An optional ancillary raster dataset to incorporate into the classifier, such as a segmented image, multispectral image, or elevation data, used to generate a more robust classification definition for your dataset. The raster dataset for this parameter must match the one used to create the input Esri Classifier Definition file.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "The following can be used to specify the clipping extent:",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Clipping Raster</strong>--Extent of the clipping raster",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Custom Extent</strong>--X and Y minimum and maximum coordinates",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Current Map Extent</strong>--Extent of the current map display",
	"@@Clip_Clipping-Raster_tag0@@": "The raster layer used to clip.",
	"@@Clip_Clipping-Type_tag0@@": "Specify whether you want to retain the area inside or outside your clip geometry.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Clip Inside</strong>--Imagery inside the clip extents will be removed.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Clip Outside</strong>--Imagery outside the clip extents will be removed.",
	"@@Clip_Custom-Extent_tag0@@": "Specify the four coordinates that define the extent of the bounding box used to clip the raster.",
	"@@Clip_Output-Extent_tag0@@": "The x and y coordinates of the current clipping extent.",
	"@@Clip_Output-Extent_tag1@@": "The <strong>Capture Current Map Extent</strong> button uses the display extent for the active map.",
	"@@Clip_Raster_tag0@@": "The input raster layer.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "When selected, the data is clipped according to the geometry of the specified feature class.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Unchecked--The function uses the clip geometry specified by <strong>Rectangle</strong>. This is the default.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Checked--The function uses the clip geometry defined by a feature class.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "The color conversion type to perform:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "HSV to RGB",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "RGB to HSV",
	"@@Color-Model-Conversion_Raster_tag0@@": "The input raster.",
	"@@Colormap_Color-Ramp_tag0@@": "Choose a pre-existing color ramp.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Choose the type of color scheme to render your input raster",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Color Ramp--Use a color ramp.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Colormap--Use a pre-existing color map.",
	"@@Colormap_Colormap_tag0@@": "The following default color maps are available from the drop-down list:",
	"@@Colormap_Colormap_tag1@@": "Elevation--A color map that gradually changes from cyan to purple to black.",
	"@@Colormap_Colormap_tag2@@": "Gray--A color map that gradually changes from black to white.",
	"@@Colormap_Colormap_tag7@@": "Hillshade--A greyscale colormap to visualize a 3D representation of the terrain surface, with the sun's relative position taken into account for shading the image.",
	"@@Colormap_Colormap_tag3@@": "NDVI--A colormap to visualize vegetation. Values near zero are blue. Low values are brown. Then the colors gradually change from red, to orange, to yellow, to green, and to black as the vegetation index goes from low to high.",
	"@@Colormap_Colormap_tag4@@": "NDVI2--A colormap to visualize vegetation. Low values range from white to green. Then the colors range from gray, to purple, to violet, to dark blue, and to black as the vegetation index goes from low to high.",
	"@@Colormap_Colormap_tag5@@": "NDVI3--A colormap to visualize vegetation. Values near zero are blue. Then the colors gradually change from red, to orange, and to green as the vegetation index goes from low to high.",
	"@@Colormap_Colormap_tag6@@": "Random--A random colormap.",
	"@@Colormap_Raster_tag0@@": "The input raster.",
	"@@Colormap-To-RGB_Raster_tag0@@": "The input color map raster.",
	"@@Complex_Raster_tag0@@": "The input raster.",
	"@@Composite-Bands_Rasters_tag0@@": "Use the drop-down list or the <strong>Browse</strong> button to choose the raster inputs.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Choose which cell size to use in the output raster.If all the input cell sizes are the same, all the options willyield the same results.</p><ul><li>First Of--Use the first cell size of the input rasters.</li><li>Min Of--Use the smallest cell size of all the input rasters.</li><li>Max Of--Use the largest cell size of all the input rasters. This is the default.</li><li>Mean Of--Use the mean cell size of all the input rasters.</li><li>Last Of--Use the last cell size of the input rasters.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Con-function_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Con-function_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Con-function_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Con-function_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Con-function_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Con_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Con_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Con_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Con_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Con_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Con_False-Raster_tag0@@": "The input whose values will be used as the output pixel values if the condition is false. It can be an integer, a floating-point raster, or a constant value.",
	"@@Con_Raster_tag0@@": "The input raster that represents the Boolean result of a logical math raster function. The values will be either 1 (for true) or 0 (for false). It can be an integer or a floating-point raster.",
	"@@Con_True-Raster_tag0@@": "The input whose values will be used as the output pixel values if the condition is true. It can be an integer, a floating-point raster, or a constant value.",
	"@@Constant_Constant_tag0@@": "The value of the constant to be added to the virtual raster.",
	"@@Constant_Raster-Info_tag0@@": "Use the <strong>Load template raster</strong> button to load a template from a directory or portal.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "The amount of smoothing to apply to the contour line. The default value is 2.5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "A lower value produces a contour line with more granularity and less smoothing, while a higher value produces a contour line with more smoothing that appears less jagged.",
	"@@Contour_Contour-Interval_tag0@@": "The difference in altitude between contour lines.",
	"@@Contour_Contour-Interval_tag1@@": "A small contour interval is used in relatively flat areas, while larger contour intervals are used in variable or mountainous terrain.",
	"@@Contour_Contour-Type_tag0@@": "The type of contour to be created:",
	"@@Contour_Contour-Type_tag1@@": "<strong>Contour fill</strong>--Fills the area between every contour line with the quantized elevation value.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Contour lines</strong>--Joins points of equal elevation to create a line representing constant elevation.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Smooth surface only</strong>--Smooths the input elevation layer but does not produce contours.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "The index contour, which is represented as a bold line.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "The default value is 5; thus, every 5th contour line is bold.",
	"@@Contour_Number-Of-Contours_tag0@@": "The number of contours to be generated in the display. This dynamically adjusts the contour interval to fit the terrain in the display while maintaining standardized intervals such as 1, 5, 10, and so on.",
	"@@Contour_Raster_tag0@@": "A single band raster elevation dataset.",
	"@@Contour_Z-Base_tag0@@": "The base contour value. Contours are generated above and below this value as needed to cover the entire value range of the input raster. The default is 0.",
	"@@Contour_Z-Base_tag1@@": "A value of 0 often represents mean sea level, depending on the source elevation dataset.",
	"@@Contour_Z-Factor_tag0@@": "The unit conversion factor used when generating contours. The default value is 1.",
	"@@Contour_Z-Factor_tag1@@": "The contour lines are generated based on the z-values in the input raster, which are often measured in units of meters or feet. With the default value of 1, the contours will be in the same units as the z-values of the input raster. To create contours in a different unit than that of the z-values, set an appropriate value for the z-factor. Note that it is not necessary to have the ground x,y and surface z-units be consistent for this tool.",
	"@@Contour_Z-Factor_tag2@@": "For example, if the elevation values in your input raster are in feet, but you want the contours to be generated based on units of meters, set the z-factor to 0.3048 (since 1 foot =0.3048 meters).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Adjust the brightness of the raster layer.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "You can use the slider to modify the brightness offset, or you can type a value.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Adjust the contrast of the raster layer.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "You can use the slider to modify the contrast offset, or you can type a value.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "The input raster on which to edit the brightness and contrast.",
	"@@Convolution_kernel_tag0@@": "<p>This table shows how each pixel will be weighted in the filtering process. This table can be edited if you choose<strong>User Defined</strong>as the<strong>Type</strong>.</p>",
	"@@Convolution_Raster_tag0@@": "The input raster dataset.",
	"@@Convolution_Type_tag0@@": "Select the type of filtering you want to perform. There are options for sharpening, blurring, and detecting edges, or you can define your own kernel-based filter",
	"@@Corridor_Distance-Raster-1_tag0@@": "The first input distance raster. It should be an accumulated cost distance output from Cost Distance or Path Distance.",
	"@@Corridor_Distance-Raster-2_tag0@@": "The second input distance raster. It should be an accumulated cost distance output from Cost Distance or Path Distance.",
	"@@Cos_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Cos_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Cos_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Cos_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Cos_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Cos_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Cos_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Cos_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Cos_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Cos_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Cos_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Cos_Raster_tag0@@": "The input for which to calculate the cosine values.",
	"@@CosH_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@CosH_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@CosH_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@CosH_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@CosH_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@CosH_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@CosH_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@CosH_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@CosH_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@CosH_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@CosH_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@CosH_Raster_tag0@@": "The input for which to calculate the hyperbolic cosine values.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "This parameter simulates the increase in the effort to overcome costs as the accumulative cost increases. It is used to model fatigue of the traveler. The growing accumulative cost to reach a cell is multiplied by the resistance rate and added to the cost to move into the subsequent cell.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "It's a modified version of a compound interest rate formula that's used to calculate the apparent cost of moving through a cell. As the value of the resistance rate increases, it increases the cost of the cells that are visited later. The greater the resistance rate, the higher the cost to reach the next cell, which is compounded for each subsequent movement. Since the resistance rate is similar to a compound rate and generally the accumulative cost values are very large, small resistance rates are suggested, such as 0.005 or even smaller, depending on the accumulative cost values.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Cost-Allocation_Capacity_tag0@@": "Defines the cost capacity for the traveler for a source. The cost calculations continue for each source until the specified capacity is reached.",
	"@@Cost-Allocation_Capacity_tag1@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Cost-Allocation_Capacity_tag2@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "A required input raster defining the cost or impedance to move planimetrically through each cell. The value at each cell location represents the cost-per-unit distance for moving through it. Each cell location value is multiplied by the cell resolution, and also compensates for diagonal movement to obtain the total cost of passing through the cell.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "The values of the <strong>Cost Raster</strong> can be integer or floating point, but they cannot be negative or zero.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "The threshold that the accumulative cost values cannot exceed. If an accumulative cost distance exceeds this value, the output value for the cell location will be ${NoData}. The maximum distance defines the extent for which the accumulative cost distances are calculated. The default distance is to the extent of the output raster.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "A multiplier to apply to the cost values.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "This parameter allows for control of the mode of travel or the magnitude at a source. The greater the multiplier, the greater the cost to move through each cell.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "The values must be greater than zero. The default is 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Cost-Allocation_Source-Field_tag0@@": "The field used to assign values to the source locations. It must be an integer type. If the <strong>Value Raster</strong> has been set, the values in that input will take precedence over any setting for the <strong>Source Field</strong>.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "The required input raster of source locations.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "This is a raster that identifies the cells or locations from which the least accumulated cost distance for every output cell location is calculated.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "If the input <strong>Source Raster</strong> is floating point, the <strong>Value Raster</strong> must be set, and it must be an integer. The <strong>Value Raster</strong> will take precedence over any setting of the <strong>Source Field</strong>.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "The starting cost from which to begin the cost calculations. This parameter allows for the specification of the fixed cost associated with a source. Instead of starting at a cost of 0, the cost algorithm will begin with the value specified.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "The value must be zero or greater. The default is 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Defines the direction of the traveler when applying the source resistance rate and the source starting cost.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>From Source</strong>--The source resistance rate and source starting cost will be applied beginning at the input source and moving out to the non-source cells. This is the default.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>To Source</strong>--The source resistance rate and source starting cost will be applied beginning at each non-source cell and moving back to the input source.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Either specify the <strong>From Source</strong> or <strong>To Source</strong> keyword, which will be applied to all sources, or specify a field in the <strong>Source Raster</strong> that contains the keywords to identify the direction of travel for each source. That field must contain the string ${FROM_SOURCE} or ${TO_SOURCE}.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "The input integer raster that identifies the zone values to be used for each input source location. For each source location cell, the value defined by the <strong>Value Raster</strong> will be assigned to all cells allocated to the source location for the computation. The <strong>Value Raster</strong> will take precedence over any setting for the <strong>Source Field</strong>.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "This parameter simulates the increase in the effort to overcome costs as the accumulative cost increases. It is used to model fatigue of the traveler. The growing accumulative cost to reach a cell is multiplied by the resistance rate and added to the cost to move into the subsequent cell.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "It's a modified version of a compound interest rate formula that's used to calculate the apparent cost of moving through a cell. As the value of the resistance rate increases, it increases the cost of the cells that are visited later. The greater the resistance rate, the higher the cost to reach the next cell, which is compounded for each subsequent movement. Since the resistance rate is similar to a compound rate and generally the accumulative cost values are very large, small resistance rates are suggested, such as 0.005 or even smaller, depending on the accumulative cost values.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Defines the cost capacity for the traveler for a source. The cost calculations continue for each source until the specified capacity is reached.",
	"@@Cost-Back-Link_Capacity_tag1@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Cost-Back-Link_Capacity_tag2@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "A required input raster defining the cost or impedance to move planimetrically through each cell. The value at each cell location represents the cost-per-unit distance for moving through it. Each cell location value is multiplied by the cell resolution, and also compensates for diagonal movement to obtain the total cost of passing through the cell.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "The values of the <strong>Cost Raster</strong> can be integer or floating point, but they cannot be negative or zero.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "The threshold that the accumulative cost values cannot exceed. If an accumulative cost distance exceeds this value, the output value for the cell location will be NoData. The maximum distance defines the extent for which the accumulative cost distances are calculated. The default distance is to the extent of the output raster.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "A multiplier to apply to the cost values.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "This parameter allows for control of the mode of travel or the magnitude at a source. The greater the multiplier, the greater the cost to move through each cell.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "The values must be greater than zero. The default is 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "The required input raster of source locations.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "This is a raster that identifies the cells or locations from which the least accumulated cost distance for every output cell location is calculated.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "The starting cost from which to begin the cost calculations. This parameter allows for the specification of the fixed cost associated with a source. Instead of starting at a cost of 0, the cost algorithm will begin with the value specified.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "The value must be zero or greater. The default is 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Defines the direction of the traveler when applying the source resistance rate and the source starting cost.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>From Source</strong>--The source resistance rate and source starting cost will be applied beginning at the input source and moving out to the non-source cells. This is the default.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>To Source</strong>--The source resistance rate and source starting cost will be applied beginning at each non-source cell and moving back to the input source.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Either specify the <strong>From Source</strong> or <strong>To Source</strong> keyword, which will be applied to all sources, or specify a field in the <strong>Source Raster</strong> that contains the keywords to identify the direction of travel for each source. That field must contain the string ${FROM_SOURCE} or ${TO_SOURCE}.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "This parameter simulates the increase in the effort to overcome costs as the accumulative cost increases. It is used to model fatigue of the traveler. The growing accumulative cost to reach a cell is multiplied by the resistance rate and added to the cost to move into the subsequent cell.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "It's a modified version of a compound interest rate formula that's used to calculate the apparent cost of moving through a cell. As the value of the resistance rate increases, it increases the cost of the cells that are visited later. The greater the resistance rate, the higher the cost to reach the next cell, which is compounded for each subsequent movement. Since the resistance rate is similar to a compound rate and generally the accumulative cost values are very large, small resistance rates are suggested, such as 0.005 or even smaller, depending on the accumulative cost values.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Cost-Distance_Capacity_tag0@@": "Defines the cost capacity for the traveler for a source. The cost calculations continue for each source until the specified capacity is reached.",
	"@@Cost-Distance_Capacity_tag1@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Cost-Distance_Capacity_tag2@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "A required input raster defining the cost or impedance to move planimetrically through each cell. The value at each cell location represents the cost-per-unit distance for moving through it. Each cell location value is multiplied by the cell resolution, and also compensates for diagonal movement to obtain the total cost of passing through the cell.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "The values of the <strong>Cost Raster</strong> can be integer or floating point, but they cannot be negative or zero.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "The threshold that the accumulative cost values cannot exceed. If an accumulative cost distance exceeds this value, the output value for the cell location will be NoData. The maximum distance defines the extent for which the accumulative cost distances are calculated. The default distance is to the extent of the output raster.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "A multiplier to apply to the cost values.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "This parameter allows for control of the mode of travel or the magnitude at a source. The greater the multiplier, the greater the cost to move through each cell.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "The values must be greater than zero. The default is 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Cost-Distance_Source-Raster_tag0@@": "The required input raster of source locations.",
	"@@Cost-Distance_Source-Raster_tag1@@": "This is a raster that identifies the cells or locations from which the least accumulated cost distance for every output cell location is calculated.",
	"@@Cost-Distance_Start-Cost_tag0@@": "The starting cost from which to begin the cost calculations. This parameter allows for the specification of the fixed cost associated with a source. Instead of starting at a cost of 0, the cost algorithm will begin with the value specified.",
	"@@Cost-Distance_Start-Cost_tag1@@": "The value must be zero or greater. The default is 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Defines the direction of the traveler when applying the source resistance rate and the source starting cost.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>From Source</strong>--The source resistance rate and source starting cost will be applied beginning at the input source and moving out to the non-source cells. This is the default.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>To Source</strong>--The source resistance rate and source starting cost will be applied beginning at each non-source cell and moving back to the input source.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Either specify the <strong>From Source</strong> or <strong>To Source</strong> keyword, which will be applied to all sources, or specify a field in the <strong>Source Raster</strong> that contains the keywords to identify the direction of travel for each source. That field must contain the string ${FROM_SOURCE} or ${TO_SOURCE}.",
	"@@Curvature_Curvature-Type_tag0@@": "The curvature type accentuates different aspects of the slope. There are three curvature options:",
	"@@Curvature_Curvature-Type_tag1@@": "Planform--Is perpendicular to the direction of the maximum slope. It affects the convergence and divergence of flow across a surface.",
	"@@Curvature_Curvature-Type_tag2@@": "Profile--Is parallel to the slope and indicates the direction of maximum slope. It affects the acceleration and deceleration of flow across the surface.",
	"@@Curvature_Curvature-Type_tag3@@": "Standard--Combines both the <strong>Profile</strong> and <strong>Planform</strong> curvatures.",
	"@@Curvature_DEM_tag0@@": "A digital elevation model (DEM) raster.",
	"@@Curvature_Z-Factor_tag0@@": "The z-factor adjusts the units of measure for the z units when they are different from the x,y units of the input surface. If the x,y units and z units are in the same units of measure, the z-factor should be set to 1. The z-values of the input surface are multiplied by the z-factor when calculating the final output surface. For example, if your z units are feet and your x,y units are meters, you would use a z-factor of 0.3048 to convert your z units from feet to meters, since 1 foot = 0.3048 meters.",
	"@@Divide_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Divide_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Divide_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Divide_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Divide_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Divide_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Divide_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Divide_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Divide_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Divide_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Divide_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Divide_Raster_tag0@@": "The input whose value will be divided by the second input.",
	"@@Divide_Raster_tag1@@": "A number can be used as an input for this parameter, provided a raster is specified for ${Raster2}.",
	"@@Divide_Raster2_tag0@@": "The input whose value the first input will be divided by.",
	"@@Divide_Raster2_tag1@@": "A number can be used as an input for this parameter, provided a raster is specified for ${Raster}.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "The input DEM.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "The maximum void width value is used to specify the largest size of a void that you want to fill. If the width or height of the bounding box around the void is larger than the maximum void width value, the void is not filled. The units of this parameter are the same as the units used in your data's spatial reference system.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "If this parameter is blank or has a value of ${0}, no maximum width will be used, and all voids will be filled. A value of ${-1} means that no void filling will occur.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "The maximum search radius that will be used for void filling. A void that is further away, from any valid pixel, than this threshold value will remain as a void. The units of this parameter are the same as the units used in your data's spatial reference system.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "If the value of this parameter is blank, ${0}, or ${-1} this parameter will not be used.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Equal-to_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Equal-to_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Equal-to_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Equal-to_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Equal-to_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Equal-to_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Equal-to_Raster_tag0@@": "The input that will be used for comparison for equality by the second input.",
	"@@Equal-to_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Equal-to_Raster2_tag0@@": "The input that will be used for comparison for equality by the first input.",
	"@@Equal-to_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "The cell size at which the output raster will be created.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "If the cell size was explicitly set in <strong>Analysis Environments</strong> , that will be the default cell size. If it was not set, the output cell size will be the same as the <strong>Source Raster</strong>.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Determines whether to calculate the distance using a planar (flat earth) or a geodesic (ellipsoid) method.",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Geodesic--The shortest line between two points on the earth's surface on a spheroid (ellipsoid). Therefore, regardless of input or output projection, the results do not change. One use for a geodesic line is when you want to determine the shortest distance between two cities for an airplane's flight path. This is also known as a great circle line if based on a sphere rather than an ellipsoid.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Planar--Planar measurements use 2D Cartesian mathematics to calculate length and area. The option is only available when measuring in a projected coordinate system and the 2D plane of that coordinate system will be used as the basis for the measurements.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Defines the threshold distance within which the nearest source will be determined. If the distance to the nearest source exceeds this, the output for that cell will be ${NoData}.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "The default distance is to the extent of the output raster.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "The raster that defines the barriers.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "The dataset must contain ${NoData} where there are no barriers. Barriers are represented by valid values including zero.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "The barriers can be defined by an integer or a floating-point raster.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "The field used to assign values to the source locations. It must be an integer type. If the <strong>Value Raster</strong> has been set, the values in that input will take precedence over any setting for the <strong>Source Field</strong>.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "A required input raster that identifies the source locations. Based on Euclidean distance, the nearest source will be determined for each cell in the output",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "The input type can be an integer or a floating-point type.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "The input integer raster that identifies the zone values to be used for each input source location. For each source location cell, the value defined by the <strong>Value Raster</strong> will be assigned to all cells allocated to the source location for the computation. The <strong>Value Raster</strong> will take precedence over any setting for the <strong>Source Field</strong>.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "The cell size at which the output raster will be created.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "If the cell size was explicitly set in <strong>Analysis Environments</strong> , that will be the default cell size. If it was not set, the output cell size will be the same as the <strong>Source Raster</strong>.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Determines whether to calculate the distance using a planar (flat earth) or a geodesic (ellipsoid) method.",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Geodesic--The shortest line between two points on the earth's surface on a spheroid (ellipsoid). Therefore, regardless of input or output projection, the results do not change. One use for a geodesic line is when you want to determine the shortest distance between two cities for an airplane's flight path. This is also known as a great circle line if based on a sphere rather than an ellipsoid.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Planar--Planar measurements use 2D Cartesian mathematics to calculate length and area. The option is only available when measuring in a projected coordinate system and the 2D plane of that coordinate system will be used as the basis for the measurements.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Defines the threshold distance within which the direction to the closest source will be calculated. If the distance to the nearest source exceeds this, the output for that cell will be ${NoData}.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "The default distance is to the extent of the output raster.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "The raster that defines the barriers.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "The dataset must contain NoData where there are no barriers. Barriers are represented by valid values including zero.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "The barriers can be defined by an integer or a floating-point raster.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "A required input raster that identifies the cells or locations to which the Euclidean direction for every output cell location is calculated.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "The input type can be an integer or a floating-point type.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "The cell size at which the output raster will be created.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "If the cell size was explicitly set in <strong>Analysis Environments</strong> , that will be the default cell size. If it was not set, the output cell size will be the same as the <strong>Source Raster</strong>.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Determines whether to calculate the distance using a planar (flat earth) or a geodesic (ellipsoid) method.",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Geodesic--The shortest line between two points on the earth's surface on a spheroid (ellipsoid). Therefore, regardless of input or output projection, the results do not change. One use for a geodesic line is when you want to determine the shortest distance between two cities for an airplane's flight path. This is also known as a great circle line if based on a sphere rather than an ellipsoid.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Planar--Planar measurements use 2D Cartesian mathematics to calculate length and area. The option is only available when measuring in a projected coordinate system and the 2D plane of that coordinate system will be used as the basis for the measurements.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "The threshold that the accumulative distance values cannot exceed. If an accumulative Euclidean distance exceeds this value, the output value for the cell location will be NoData.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "The default distance is to the extent of the output raster.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "The raster that defines the barriers.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "The dataset must contain ${NoData} where there are no barriers. Barriers are represented by valid values including zero.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "The barriers can be defined by an integer or a floating-point raster.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "The required input raster that identifies the cells or locations to which the Euclidean distance for every output cell location is calculated.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "The input type can be an integer or a floating-point type.",
	"@@Exp_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Exp_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Exp_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Exp_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Exp_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Exp_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Exp_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Exp_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Exp_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Exp_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Exp_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Exp_Raster_tag0@@": "The input values for which to find the base e exponential.",
	"@@Exp10_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Exp10_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Exp10_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Exp10_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Exp10_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Exp10_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Exp10_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Exp10_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Exp10_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Exp10_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Exp10_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Exp10_Raster_tag0@@": "The input values for which to find the base 10 exponential.",
	"@@Exp2_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Exp2_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Exp2_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Exp2_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Exp2_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Exp2_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Exp2_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Exp2_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Exp2_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Exp2_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Exp2_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Exp2_Raster_tag0@@": "The input values for which to find the base 2 exponential.",
	"@@Extract-Bands_Band_tag0@@": "Select the bands to extract from a list based on the <strong>Method</strong> parameter option used.",
	"@@Extract-Bands_Combination_tag0@@": "The band combination or band order. The selection list depends on the <strong>Method</strong> option specified. For example, if <strong>Method</strong> is <strong>Band Names</strong> , you can select a Blue, Green, and Red combination to extract a natural color image.",
	"@@Extract-Bands_Method_tag0@@": "Select one of the following methods for extracting bands:",
	"@@Extract-Bands_Method_tag1@@": "<strong>Band IDs</strong>--The band designation or number, which is unique for each sensor. These can be identical to the <strong>Band Names</strong>.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Band Names</strong>--Uses the band name representing the wavelength interval on the electromagnetic spectrum (Red, Near Infrared, Thermal Infrared, for example). This can also be designated as a band number ID.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Band Wavelengths</strong>--The wavelength on the electromagnetic spectrum.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Specify the action that will occur when a band within the extract band list is not available.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Best Match</strong>--Finds the best available band to use in place of the missing band based on wavelength, so that the function will not fail",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Fail</strong>--If the input dataset is missing any band specified in the <strong>Band</strong> parameter, the function will fail.",
	"@@Extract-Bands_Raster_tag0@@": "The raster product from which the band or bands will be extracted.",
	"@@Fill_Raster_tag0@@": "A single band elevation raster.",
	"@@Fill_Z-Limit_tag0@@": "The maximum elevation difference between a sink and its pour point to be filled.",
	"@@Fill_Z-Limit_tag1@@": "Unless a value is specified for this parameter, all sinks will be filled, regardless of depth.",
	"@@Fill_Z-Limit_tag2@@": "The value for <strong>Z Limit</strong> must be greater than zero.",
	"@@Float_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Float_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Float_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Float_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Float_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Float_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Float_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Float_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Float_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Float_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Float_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Float_Raster_tag0@@": "The input raster to be converted to floating point.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "The input raster that shows the direction of flow out of each cell.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "The flow direction raster can be created by running the <strong>Flow Direction</strong> function.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Defines the type of the input flow direction raster.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--The input flow direction raster is of type D8. This is the default.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--The input flow direction raster is of type D-Infinity (DINF).",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--The input flow direction raster is of type Multi Flow Direction (MFD).",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "The output accumulation raster can be integer or floating point type.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Float</strong>--The output raster will be floating point type. This is the default.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Integer</strong>--The output raster will be integer type.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "An optional input raster for applying a weight to each pixel.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "If no weight raster is specified, a default weight of 1 will be applied to each pixel.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Defines the type of the input flow direction raster.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--The input flow direction raster is of type D8. This is the default.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--The input flow direction raster is of type D-Infinity (DINF).",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--The input flow direction raster is of type Multi Flow Direction (MFD).",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Specifies if edge pixels will always flow outward or follow normal flow rules.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>No</strong>--If the maximum drop on the inside of an edge pixel is greater than zero, the flow direction will be determined as usual; otherwise, the flow direction will be towards the edge. Pixels that should flow from the edge of the surface raster inward will do so. This is the default.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Yes</strong>--All the pixels at the edge of the surface raster will flow outward from the surface raster.",
	"@@Flow-Direction_Raster_tag0@@": "The input raster representing a continuous elevation surface.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Determines if the vertical or horizontal component of flow distance is calculated.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Horizontal</strong>--The flow distance calculations represent the horizontal component of flow distance from each pixel in the domain to the pixel(s) on the stream into which they flow.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Vertical</strong>--The flow distance calculations represent the vertical component of flow distance from each pixel in the domain to the pixel(s) on the stream into which they flow. This is the default.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "The input raster that shows the direction of flow out of each pixel.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "When a flow direction raster is provided, the down slope direction(s) will be limited to those defined by the input flow directions.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "The flow direction raster can be created using the Flow Direction function.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Defines the type of the input flow direction raster.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--The input flow direction raster is of type D8. This is the default.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--The input flow direction raster is of type D-Infinity (DINF).",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--The input flow direction raster is of type Multi Flow Direction (MFD).",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Determines the statistics type used to compute flow distance over multiple flow paths. If there is only a single flow path from each cell to a cell on the stream, all statistics types produce the same result.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Minimum</strong>--Where multiple flow paths exist, minimum flow distance in computed. This is the default.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Weighted Mean</strong>--Where multiple flow paths exist, a weighted mean of flow distance is computed. Flow proportion from a cell to its downstream neighboring cells are used as weights for computing weighted mean.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Maximum</strong>--When multiple flow paths exist, maximum flow distance is computed.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "An input stream raster that represents a linear stream network.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "The input raster representing a continuous elevation surface.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "The direction of measurement along the flow path.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong>Downstream</strong>--Calculates the downslope distance along the flow path, from each cell to a sink or outlet on the edge of the raster.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>Upstream</strong>--Calculates the longest upslope distance along the flow path, from each cell to the top of the drainage divide.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "The input raster that shows the direction of flow out of each cell.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "The flow direction raster can be created by running the <strong>Flow Direction</strong> function.",
	"@@Flow-Length_Weight-Raster_tag0@@": "An optional input raster for applying a weight to each cell.",
	"@@Flow-Length_Weight-Raster_tag1@@": "If no weight raster is specified, a default weight of 1 will be applied to each cell.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Denotes whether ${NoData} values are ignored by the statistic calculation.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Checked</strong>--Specifies that if a ${NoData} value exists within a neighborhood, the ${NoData} value will be ignored. Only cells within the neighborhood that have data values will be used in determining the output value. This is the default.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Unchecked</strong>--Specifies that if any cell in a neighborhood has a value of ${NoData}, the output for the processing cell will be ${NoData}.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "The shape of the area around each cell used to calculate the statistic.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Each neighborhood have additional parameters with which to define the shape.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Annulus, Inner Radius, Outer Radius",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Circle, Radius",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Irregular, Width, Height, Neighborhood values",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Rectangle, Width, Height",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Wedge, Radius, Start angle, End angle",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Weight, Width, Height, Neighborhood values",
	"@@Focal-Statistics_Neighborhood_tag8@@": "The Irregular neighborhood allows you to specify an irregularly shaped neighborhood around the processing cell. Use the Neighborhood values table to define the shape of the neighborhood kernel. A value of 0 for a cell position indicates that the cell is not part of the neighborhood, and will not be used for processing. A value of 1 indicates that its corresponding cell (and value) is a member of the neighborhood.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "The Weight neighborhood is similar to the irregular neighborhood type, in that it allows you to define an irregular neighborhood around the processing cell, but it additionally allows you to apply weights to the input values. The values in the weight kernel specifies which cell positions should be included within the neighborhood and the weights by which they will be multiplied. Use a value of 0 to exclude a cell from processing. Positive, negative, and decimal values are all valid options to use as a weight. For the Weight neighborhood type, only the Mean, Standard Deviation, or Sum statistics are supported.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Denotes which percentile to calculate when <strong>Percentile</strong> is selected as the statistics type. The default is 90, for the 90th percentile.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "The values can range from 0 to 100. The 0th percentile is essentially equivalent to the Minimum statistic, and the 100th percentile equivalent to Maximum, with the exception that the result will be floating point. A value of 50 will essentially produce the same result as the Median statistic.",
	"@@Focal-Statistics_Raster_tag0@@": "The required input raster.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "The statistic type to be calculated.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Majority</strong>--Calculates the majority (value that occurs most often) of the cells in the neighborhood.",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Maximum</strong>--Calculates the maximum (largest value) of the cells in the neighborhood.",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Mean</strong>--Calculates the mean (average value) of the cells in the neighborhood.",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Median</strong>--Calculates the median of the cells in the neighborhood.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Minimum</strong>--Calculates the minimum (smallest value) of the cells in the neighborhood.",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Minority</strong>--Calculates the minority (value that occurs least often) of the cells in the neighborhood.",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Percentile</strong>--Calculates a percentile of the cells in the neighborhood. You can determine which percentile to calculate with the <strong>Percentile Value</strong> parameter.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Range</strong>--Calculates the range (difference between largest and smallest value) of the cells in the neighborhood.",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Standard Deviation</strong>--Calculates the standard deviation of the cells in the neighborhood.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Sum</strong>--Calculates the sum (total of all values) of the cells in the neighborhood.",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Variety</strong>--Calculates the variety (the number of unique values) of the cells in the neighborhood.",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "If the input raster is floating point, only the Mean, Maximum, Median, Minimum, Percentile, Range, Standard Deviation, and Sum statistic types are available.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "For Mean, Median, Percentile, and Standard Deviation, the output is always floating point.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "The default statistic type is Mean.",
	"@@Geometric_Constant-Z_tag0@@": "Specify a constant elevation to use for the Geometric function.",
	"@@Geometric_DEM_tag0@@": "Specify the DEM to use for the Geometric function. You can use a DEM contained in the mosaic dataset as a raster dataset or as a mosaic dataset whose output is a DEM.",
	"@@Geometric_Geoid_tag0@@": "Most elevation datasets, such as USGS NED or ArcGIS Online World Elevation, are orthometric heights, so it is necessary to select the Geoid correction for compatibility with satellite RPCs, which require ellipsoidal heights. Check the <strong>Geoid</strong> check box to apply the geoid (EGM96) correction to the z-values, unless your DEM is already referenced to ellipsoidal heights.",
	"@@Geometric_Method_tag0@@": "Choose the elevation method for the geometric function:",
	"@@Geometric_Method_tag1@@": "Use Constant Z--Specify a constant elevation to perform the Geometric function.",
	"@@Geometric_Method_tag2@@": "Use DEM--Specify a DEM to perform the Geometric function.",
	"@@Geometric_Raster_tag0@@": "The input raster.",
	"@@Geometric_Z-Factor_tag0@@": "Satellite rational polynomial coefficients (RPCs) are scaled for elevation datasets with vertical units in meters. If your elevation uses other vertical units, enter a <strong>Z Factor</strong> to rescale to meters. For example, if your elevation units are in feet, you would use a value of 0.3048 to convert your elevation units from feet to meters.",
	"@@Geometric_Z-Offset_tag0@@": "The base value to be added to the elevation value in the DEM. This could be used to offset elevation values that do not start at sea level.",
	"@@Geometric_Tolerance_tag0@@": "Specify the maximum tolerable error in the geometric function, given in number of pixels. The default for the NITF (NCDRD) raster type is two.",
	"@@Grayscale_Raster_tag0@@": "The input raster.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "The weights for each of the bands comprising the input raster.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Greater-Than_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Greater-Than_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Greater-Than_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Greater-Than_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Greater-Than_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Greater-Than_Raster_tag0@@": "The input being tested to determine if it is greater than the second input.",
	"@@Greater-Than_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Greater-Than_Raster2_tag0@@": "The input against which the first input is tested to be greater than.",
	"@@Greater-Than_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Greater-Than-Equal_Raster_tag0@@": "The input being tested to determine if it is greater than or equal to the second input.",
	"@@Greater-Than-Equal_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "The input against which the first input is tested to be greater than or equal to.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "The unit of measurement associated with the output raster. Available output units are Celsius, Fahrenheit, and Kelvin.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "A single-band raster where pixel values represent relative humidity as a percentage value between 0 and 100.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "A single-band raster where pixel values represent ambient air temperature.",
	"@@Heat-Index_Temperature-Units_tag0@@": "The unit of measurement associated with the input temperature raster. Available input units are Celsius, Fahrenheit, and Kelvin.",
	"@@Hillshade_Altitude_tag0@@": "Altitude is the sun's angle of elevation above the horizon and ranges from 0 to 90 degrees. A value of 0 degrees indicates that the sun is on the horizon, that is, on the same horizontal plane as the frame of reference. A value of 90 degrees indicates that the sun is directly overhead.",
	"@@Hillshade_Altitude_tag1@@": "This parameter is only valid when <strong>Hillshade Type</strong> is <strong>Traditional</strong> . The default is 45 degrees above the horizon.",
	"@@Hillshade_Azimuth_tag0@@": "Azimuth is the sun's relative position along the horizon (in degrees). This position is indicated by the angle of the sun measured clockwise from due north. An azimuth of 0 degrees indicates north, east is 90 degrees, south is 180 degrees, and west is 270 degrees.",
	"@@Hillshade_Azimuth_tag1@@": "This parameter is only valid when <strong>Hillshade Type</strong> is <strong>Traditional</strong> . The default is 315 degrees, which is from the northwest.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "Using this option avoids any resampling artifacts that may occur along the edges of a raster. The output pixels along the edge of a raster or beside NoData pixels will be populated with NoData; therefore, it is recommended that this parameter is only used with elevation mosaic datasets that have overlap. When overlapping pixels are available, the areas of NoData will display the overlapping pixel values instead of blank pixels.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Unchecked--Bilinear resampling will be applied uniformly to resample your hillshade. Use this option when the mosaic dataset containing your elevation raster data is butt joined. This is the default.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Checked--Bilinear resampling will be used within the hillshade except along the edges of the rasters or beside pixels of NoData. These pixels will be populated with NoData and display the overlapping pixel values, thereby reducing any sharp edge effects that may otherwise occur. Use this option when the mosaic dataset containing your elevation raster data consists of overlapping items or tiles.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "The results from the function can be data dependent. If you observe tile boundary artifacts in your output, select the alternate condition of the check box.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Controls the illumination source for the hillshade:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Traditional--Calculates hillshade from a single illumination direction. This is the default. You can set the <strong>Azimuth</strong> and <strong>Altitude</strong> to control the location of the light source.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Multidirectional--Combines light from multiple sources to represent an enhanced visualization of the terrain.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "Pixel Size Factor accounts for changes in scale as the viewer zooms in and out on the map display. It controls the rate at which the <strong>Z Factor</strong> changes.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "This parameter is only valid when the <strong>Scaling</strong> type is <strong>Adjusted</strong>. The default value is 0.024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "Pixel Size Power accounts for the altitude changes (or scale) as the viewer zooms in and out on the map display. It is the exponent applied to the pixel size term in the equation that controls the rate at which the <strong>Z Factor</strong> changes to avoid significant loss of relief.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "This parameter is only valid when the <strong>Scaling</strong> type is <strong>Adjusted</strong>. The default value is 0.664.",
	"@@Hillshade_Raster_tag0@@": "The input elevation dataset.",
	"@@Hillshade_Scaling_tag0@@": "The shaded result is scaled dynamically by adjusting the z-factor using one of two options:",
	"@@Hillshade_Scaling_tag1@@": "Adjusted--This applies a nonlinear adjustment using the default <strong>Pixel Size Power</strong> and <strong>Pixel Size Factor</strong> values, which accommodate a wide variety of altitude changes (scale) as the viewer zooms in and out. The <strong>Adjusted</strong> parameter setting is recommended when using a worldwide dataset.",
	"@@Hillshade_Scaling_tag8@@": "None--No scaling is applied. This is ideal for a single raster dataset covering a local area. This is not recommended for worldwide datasets with large variations in elevation or multiscale maps as it will produce terrain relief with little variation at small scales.",
	"@@Hillshade_Z-Factor_tag0@@": "The z-factor is a scaling factor used to convert the elevation values for two purposes:",
	"@@Hillshade_Z-Factor_tag1@@": "Convert the elevation units (such as meters or feet) to the horizontal coordinate units of the dataset, which may be feet, meters, or degrees.",
	"@@Hillshade_Z-Factor_tag2@@": "Add vertical exaggeration for visual effect.",
	"@@Int_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Int_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Int_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Int_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Int_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Int_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Int_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Int_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Int_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Int_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Int_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Int_Raster_tag0@@": "The input raster to be converted to integer.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "The cell size for the output raster will be automatically detected; however, you can change this. While the cell size can be changed, the extent of the raster dataset will remain the same.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "The input points data.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "There are four resampling methods for this function:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Inverse Distance Weighted</strong>--Determines cell values using a linearly weighted combination of a set of sample points or cells. The weight is a function of the inverse of the distance from the known points or cells.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>Linear Tinning</strong>--Uses a triangular irregular network from the center points of each cell in the irregular raster to interpolate a surface that is then converted to a regular raster.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Natural Neighbor</strong>--Finds the closest subset of input samples to a query point and applies weights to them based on proportionate areas to interpolate a value.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Nearest Neighbor</strong>--Calculates pixel value using the nearest pixel. If no source pixel exists, no new pixel can be created in the output. This is the default.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Identifies the number of pixels to be included for the selected resampling method. The default value is ${3} pixels.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "If you select a point feature class as the input, you will need to identify the field in the attribute table with the value of the points",
	"@@Is-Null_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Is-Null_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Is-Null_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Is-Null_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Is-Null_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Is-Null_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Is-Null_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Is-Null_Raster_tag0@@": "The input raster being tested to identify the cells that are ${NoData} (null).",
	"@@Is-Null_Raster_tag1@@": "The input can be either integer or floating-point type.",
	"@@Key-Metadata_Band-Names_tag0@@": "This is used to override the band names of a raster. It is a comma-separated string representing updated band names.",
	"@@Key-Metadata_Band-Names_tag1@@": "This parameter is optional.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "Key metadata to be injected into the outgoing raster described as a JSON string representing a collection of key-value pairs. The following is an example of a JSON string that can be used as an input to this function. All inputs for this parameter should follow the same format.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "JSON string representing key metadata",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "The name of the dataset-level key property to override.",
	"@@Key-Metadata_Raster_tag0@@": "The raster or mosaic dataset containing key metadata that you would like to insert or overwrite.",
	"@@Key-Metadata_Value_tag0@@": "The overriding value of the dataset-level key property that you want to set.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "This parameter simulates the increase in the effort to overcome costs as the accumulative cost increases. It is used to model fatigue of the traveler. The growing accumulative cost to reach a cell is multiplied by the resistance rate and added to the cost to move into the subsequent cell.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "It's a modified version of a compound interest rate formula that's used to calculate the apparent cost of moving through a cell. As the value of the resistance rate increases, it increases the cost of the cells that are visited later. The greater the resistance rate, the higher the cost to reach the next cell, which is compounded for each subsequent movement. Since the resistance rate is similar to a compound rate and generally the accumulative cost values are very large, small resistance rates are suggested, such as 0.005 or even smaller, depending on the accumulative cost values.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Defines the cost capacity for the traveler for a source. The cost calculations continue for each source until the specified capacity is reached.",
	"@@Least-Cost-Path_Capacity_tag1@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "A required input raster defining the cost or impedance to move planimetrically through each cell. The value at each cell location represents the cost-per-unit distance for moving through it. Each cell location value is multiplied by the cell resolution, and also compensates for diagonal movement to obtain the total cost of passing through the cell.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "The values of the <strong>Cost Raster</strong> can be integer or floating point, but they cannot be negative or zero.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "The field used to obtain values for the destination locations.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "A required input raster that identifies the pixels from which the least-cost path is determined to the least costly source. This input consists of pixels that have valid values, and the remaining pixels must be assigned ${NoData}. Values of 0 are valid.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "The threshold that the accumulative cost values cannot exceed. If an accumulative cost distance exceeds this value, the output value for the cell location will be ${NoData}. The maximum distance defines the extent for which the accumulative cost distances are calculated. The default distance is to the extent of the output raster.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "This parameter allows for control of the mode of travel or the magnitude at a source. The greater the multiplier, the greater the cost to move through each cell.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "The values must be greater than zero. The default is 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "A keyword defining the manner in which the values and zones on the input destination data will be interpreted in the cost path calculations:",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Best Single</strong>--For all pixels on the input destination data, the least-cost path is derived from the pixel with the minimum of the least-cost paths to source cells.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Each Cell</strong>--A least-cost path is determined for each pixel with valid values on the input destination data, and saved on the output raster. Each cell of the input destination data is treated separately, and a least-cost path is determined for each from cell.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Each Zone</strong>--A least-cost path is determined for each zone on the input destination data and saved on the output raster. The least-cost path for each zone begins at the pixel with the lowest cost distance weighting in the zone.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "This is a required input raster that identifies the cells or locations from which the least accumulated cost distance for every output cell location is calculated.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "The starting cost from which to begin the cost calculations. This parameter allows for the specification of the fixed cost associated with a source. Instead of starting at a cost of 0, the cost algorithm will begin with the value specified.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "The value must be zero or greater. The default is 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Defines the direction of the traveler when applying the source resistance rate and the source starting cost.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>From Source</strong>--The source resistance rate and source starting cost will be applied beginning at the input source and moving out to the non-source cells. This is the default.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>To Source</strong>--The source resistance rate and source starting cost will be applied beginning at each non-source cell and moving back to the input source.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Either specify the <strong>From Source</strong> or <strong>To Source</strong> keyword, which will be applied to all sources, or specify a field in the <strong>Source Raster</strong> that contains the keywords to identify the direction of travel for each source. That field must contain the string ${FROM_SOURCE} or ${TO_SOURCE}.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Less-Than_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Less-Than_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Less-Than_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Less-Than_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Less-Than_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Less-Than_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Less-Than_Raster_tag0@@": "The input being tested to determine if it is less than the second input.",
	"@@Less-Than_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Less-Than_Raster2_tag0@@": "The input against which the first input is tested to be less than.",
	"@@Less-Than_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Less-Than-Equal_Raster_tag0@@": "The input being tested to determine if it is less than or equal to the second input.",
	"@@Less-Than-Equal_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Less-Than-Equal_Raster2_tag0@@": "The input against which the first input is tested to be less than or equal to.",
	"@@Less-Than-Equal_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Ln_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Ln_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Ln_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Ln_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Ln_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Ln_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Ln_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Ln_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Ln_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Ln_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Ln_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Ln_Raster_tag0@@": "Input values for which to find the natural logarithm (Ln).",
	"@@Log10_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Log10_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Log10_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Log10_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Log10_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Log10_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Log10_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Log10_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Log10_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Log10_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Log10_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Log10_Raster_tag0@@": "Input values for which to find the base 10 logarithm.",
	"@@Log2_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Log2_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Log2_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Log2_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Log2_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Log2_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Log2_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Log2_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Log2_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Log2_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Log2_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Log2_Raster_tag0@@": "Input values for which to find the base 2 logarithm.",
	"@@Lookup_Field_tag0@@": "Field containing the desired values for the new raster.",
	"@@Lookup_Field_tag1@@": "It has to be a numeric type.",
	"@@Lookup_Raster_tag0@@": "The input raster that contains a field from which to create a new raster.",
	"@@Lookup_Raster_tag1@@": "It can be either integer or floating-point type.",
	"@@Mask_Included-Ranges_tag0@@": "The included ranges can be specified for each band by specifying a minimum and maximum value; any values outside the range will be returned as ${NoData}. A pixel is included if the pixel's value falls within any of the ranges specified. Therefore, if band 1 has a range of 5-10 and band 2 has a range of 15-20, and the pixel value for band 1 is 8, this pixel will not be masked.",
	"@@Mask_NoData-Interpretation_tag0@@": "This refers to how <strong>${NoData} Values</strong> will impact the output image.",
	"@@Mask_NoData-Interpretation_tag3@@": "You can select from the following two options:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Match All</strong>--The ${NoData} values you specify for each band must occur in the same pixel for the output image to contain the ${NoData} pixel.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Match Any</strong>--If the ${NoData} value you specify occurs for a pixel in a specified band, that pixel in the output image will be ${NoData}. This is the default.",
	"@@Mask_NoData-Values_tag0@@": "The NoData values can be specified for each band. You can specify more than one value by entering a space-delimited list.",
	"@@Mask_Raster_tag0@@": "The input raster.",
	"@@Minus_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Minus_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Minus_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Minus_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Minus_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Minus_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Minus_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Minus_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Minus_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Minus_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Minus_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Minus_Raster_tag0@@": "The input from which to subtract the values of the second input.",
	"@@Minus_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Minus_Raster2_tag0@@": "The input values to subtract from the values of the first input.",
	"@@Minus_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@ML-Classify_Raster_tag0@@": "The input raster to classify using the maximum likelihood classification algorithm.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "The ${.gsg} signature file.",
	"@@Mod_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Mod_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Mod_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Mod_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Mod_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Mod_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Mod_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Mod_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Mod_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Mod_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Mod_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Mod_Raster_tag0@@": "The numerator input.",
	"@@Mod_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Mod_Raster2_tag0@@": "The denominator input.",
	"@@Mod_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Resolve any conflict when you have parts of two or more images that overlap. The options include the following:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Blend</strong>--Calculate and display an average of the overlapping pixels by giving more weight to pixels that are closer to neighboring images so the output is a smoother image. This is the default.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>First</strong>--Display the pixels from the first image in the list of images overlapping a given area.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Last</strong>--Display the pixels from the last image in the list of images overlapping a given area.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Max</strong>--Display the highest valued pixel of all the overlapping layers. With this option, you have no guarantee of displaying the pixels of just one image in the overlapping area but rather a combination of all potential layers.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Mean</strong>--Calculate and display an average of the overlapping pixels.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Min</strong>--Display the lowest valued pixel of all the overlapping layers. With this option, you have no guarantee of displaying the pixels of just one image in the overlapping area but rather a combination of all potential layers.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Select the rasters you want to mosaic together to form one image.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Specifies the band ID that represents the near-infrared part of the electromagnetic spectrum.",
	"@@NDVI_Raster_tag0@@": "The input multispectral raster.",
	"@@NDVI_Scientific-Output_tag0@@": "The output values will range from -1.0 to 1.0, which is used in many scientific applications.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Specifies the band ID that represents the red part of the electromagnetic spectrum.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Choose a predefined color scheme from the drop down list.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Chose which type of color scheme to colorize the NDVI output:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Colormap--Choose a predefined color map from the drop down list. Alternatively, you can browse to a persisted color map file that exists.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Color Ramp--Choose a predefined color scheme from the drop down list.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Choose a predefined color map from the drop down list. Alternatively, you can browse to an existing color map file.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Specifies the band ID that represents the near-infrared part of the electromagnetic spectrum.",
	"@@NDVI-Colorized_Raster_tag0@@": "The input multispectral raster.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "The output values will range from -1.0 to 1.0, which is used in many scientific applications.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Specifies the band ID that represents the red part of the electromagnetic spectrum.",
	"@@Negate_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Negate_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Negate_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Negate_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Negate_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Negate_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Negate_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Negate_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Negate_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Negate_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Negate_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Negate_Raster_tag0@@": "The input raster to be negated (multiplied by -1).",
	"@@Nibble_Mask-Raster_tag0@@": "The required input raster used as the mask.",
	"@@Nibble_Mask-Raster_tag1@@": "Cells with NoData as their value will be nibbled in the input <strong>Raster</strong>.",
	"@@Nibble_Mask-Raster_tag4@@": "The mask raster can be an integer or a floating-point type.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Defines if NoData cells in the input raster will remain NoData in the output raster.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>No</strong>--Specifies that NoData cells in the input raster will remain NoData in the output. This is the default.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Yes</strong>--Specifies that NoData cells in the input raster and within the mask can be nibbled into valid output cell values.",
	"@@Nibble_Raster_tag0@@": "The required input raster that will be nibbled.",
	"@@Nibble_Raster_tag1@@": "The input raster can be an integer or a floating-point type.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Defines if ${NoData} values in the input raster are allowed to nibble into the area defined by the mask raster.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Yes</strong>--Specifies that the nearest neighbor value will be used whether it is ${NoData} or another data value in the input raster. ${NoData} values in the input raster are free to nibble into areas defined in the mask if they are the nearest neighbor. This is the default.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>No</strong>--Specifies that only data values are free to nibble into areas defined in the mask raster. ${NoData} values in the input raster are not allowed to nibble into areas defined in the mask raster even if they are the nearest neighbor.",
	"@@Nibble_Zone-Raster_tag0@@": "The input zone raster.",
	"@@Nibble_Zone-Raster_tag1@@": "A zone is all the cells in a raster that have the same value, whether or not they are contiguous. The input zone layer defines the shape, values, and locations of the zones. The zone raster can be either integer or floating point type.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Not-Equal_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Not-Equal_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Not-Equal_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Not-Equal_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Not-Equal_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Not-Equal_Raster_tag0@@": "The input that will be compared to for inequality by the second input.",
	"@@Not-Equal_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Not-Equal_Raster2_tag0@@": "The input that will be compared to the first input for inequality.",
	"@@Not-Equal_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Pansharpening_Multispectral_tag0@@": "The multispectral raster that you want to sharpen using the panchromatic band.",
	"@@Pansharpening_Panchromatic_tag0@@": "The high-resolution, single-band raster that will be used to pan sharpen the lower-resolution multispectral raster.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Choose the pan sharpening algorithm you want to use.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey--Uses the Brovey algorithm based on spectral modeling for data fusion.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri--Uses the Esri algorithm based on spectral modeling for data fusion.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram-Schmidt--Uses the Gram-Schmidt spectral-sharpening algorithm to sharpen multispectral data.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS--Uses Intensity, Hue, and Saturation color space for data fusion.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Mean--Uses the averaged value between the red, green, and blue values and the panchromatic pixel value.",
	"@@Pansharpening_Weights_tag0@@": "Specify the weights for the red, green, blue, and infrared bands. All values should be within the range of 0 to 1.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "This parameter simulates the increase in the effort to overcome costs as the accumulative cost increases. It is used to model fatigue of the traveler. The growing accumulative cost to reach a cell is multiplied by the resistance rate and added to the cost to move into the subsequent cell.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "It's a modified version of a compound interest rate formula that's used to calculate the apparent cost of moving through a cell. As the value of the resistance rate increases, it increases the cost of the cells that are visited later. The greater the resistance rate, the higher the cost to reach the next cell, which is compounded for each subsequent movement. Since the resistance rate is similar to a compound rate and generally the accumulative cost values are very large, small resistance rates are suggested, such as 0.005 or even smaller, depending on the accumulative cost values.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Path-Distance_Capacity_tag0@@": "Defines the cost capacity for the traveler for a source. The cost calculations continue for each source until the specified capacity is reached.",
	"@@Path-Distance_Capacity_tag1@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Path-Distance_Cost-Raster_tag0@@": "A required input raster defining the cost or impedance to move planimetrically through each cell. The value at each cell location represents the cost-per-unit distance for moving through it. Each cell location value is multiplied by the cell resolution, and also compensates for diagonal movement to obtain the total cost of passing through the cell.",
	"@@Path-Distance_Cost-Raster_tag1@@": "The values of the <strong>Cost Raster</strong> can be integer or floating point, but they cannot be negative or zero.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Defines the relationship between the horizontal cost factor and the horizontal relative moving angle (HRMA).</p><p>There are several factors with modifiers that identify a defined vertical factor graph. Additionally, a table can be used to create a custom graph. The graphs are used to identify the vertical factor used in calculating the total cost of moving into a neighboring cell.</p><p>In the explanations below, two acronyms are used: HF and HRMA. HF stands for horizontal factor, which defines the horizontal difficulty encountered when moving from one cell to the next. HRMA stands for horizontal relative moving angle, which identifies the angle between the horizontal direction from a cell and the moving direction.</p><p><strong>Horizontal factor</strong>types include the following:</p><ul><li><strong>Binary</strong>--Indicates that if the HRMA is less than the cut angle, the HF is set to the value associated with the zero factor; otherwise, it is infinity.</li><li><strong>Forward</strong>--Establishes that only forward movement is allowed. The HRMA must be greater than or equal to 0 and less than 90 degrees (0 &lt;= HRMA &lt; 90). If the HRMA is greater than 0 and less than 45 degrees, the HF for the cell is set to the value associated with the zero factor. If the HRMA is greater than or equal to 45 degrees, the side value modifier value is used. The HF for any HRMA value equal to or greater than 90 degrees is set to infinity.</li><li><strong>Linear</strong>--Specifies that the HF is a linear function of the HRMA.</li><li><strong>Inverse Linear</strong>--Specifies that the HF is an inverse linear function of the HRMA.</li><li><strong>Table</strong>--Identifies that a table file will be used to define the horizontal factor graph used to determine the HFs.</li></ul><p>Modifiers to the horizontal factors include the following:</p><ul><li><strong>Zero factor</strong>--The horizontal factor to be used when the HRMA is zero. This factor positions the y-intercept for any of the horizontal factor functions.</li><li><strong>Cut angle</strong>--Defines the HRMA angle beyond which the HF will be set to infinity.</li><li><strong>Slope</strong>--Establishes the slope of the straight line used with the<strong>Linear</strong>and<strong>Inverse Linear</strong>horizontal factor keywords. The slope is specified as a fraction of rise over run (for example, 45 percent slope is 1/45, which is input as 0.02222).</li><li><strong>Side value</strong>--Establishes the HF when the HRMA is greater than or equal to 45 degrees and less than 90 degrees when the<strong>Forward</strong>horizontal factor keyword is specified.</li><li><strong>Table name</strong>--Identifies the name of the table defining the HF.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "A raster defining the horizontal direction at each cell.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "The values on the raster must be integers ranging from 0 to 360, with 0 degrees being north, or toward the top of the screen, and increasing clockwise. Flat areas should be given a value of -1. The values at each location will be used in conjunction with the <strong>Horizontal factor</strong> to determine the horizontal cost incurred when moving from a cell to its neighbors.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "The threshold that the accumulative cost values cannot exceed. If an accumulative cost distance exceeds this value, the output value for the cell location will be NoData. The maximum distance defines the extent for which the accumulative cost distances are calculated. The default distance is to the extent of the output raster.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "A multiplier to apply to the cost values.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "This parameter allows for control of the mode of travel or the magnitude at a source. The greater the multiplier, the greater the cost to move through each cell.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "The values must be greater than zero. The default is 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Path-Distance_Source-Raster_tag0@@": "The required input raster of source locations.",
	"@@Path-Distance_Source-Raster_tag1@@": "This is a raster that identifies the cells or locations from which the least accumulated cost distance for every output cell location is calculated.",
	"@@Path-Distance_Source-Raster_tag2@@": "It can be an integer or a floating-point type.",
	"@@Path-Distance_Start-Cost_tag0@@": "The starting cost from which to begin the cost calculations. This parameter allows for the specification of the fixed cost associated with a source. Instead of starting at a cost of 0, the cost algorithm will begin with the value specified.",
	"@@Path-Distance_Start-Cost_tag1@@": "The value must be zero or greater. The default is 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "A raster defining the elevation values at each cell location.",
	"@@Path-Distance_Surface-Raster_tag1@@": "The values are used to calculate the actual surface distance covered when passing between cells.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Defines the direction of the traveler when applying the source resistance rate and the source starting cost.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>From Source</strong>--The source resistance rate and source starting cost will be applied beginning at the input source and moving out to the non-source cells. This is the default.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>To Source</strong>--The source resistance rate and source starting cost will be applied beginning at each non-source cell and moving back to the input source.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Either specify the <strong>From Source</strong> or <strong>To Source</strong> keyword, which will be applied to all sources, or specify a field in the <strong>Source Raster</strong> that contains the keywords to identify the direction of travel for each source. That field must contain the string ${FROM_SOURCE} or ${TO_SOURCE}.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Defines the relationship between the vertical cost factor and the vertical relative moving angle (VRMA).</p><p>There are several factors with modifiers that identify a defined vertical factor graph. Additionally, a table can be used to create a custom graph. The graphs are used to identify the vertical factor used in calculating the total cost of moving into a neighboring cell.</p><p>In the explanations below, two acronyms are used: VF and VRMA. VF stands for vertical factor, which defines the vertical difficulty encountered in moving from one cell to the next. VRMA stands for vertical relative moving angle, which identifies the slope angle between the FROM, or processing, cell and the TO cell.</p><p><strong>Vertical factor</strong>types include the following:</p><ul><li><strong>Binary</strong>--Specifies that if the VRMA is greater than the low-cut angle and less than the high-cut angle, the VF is set to the value associated with the zero factor; otherwise, it is infinity.</li><li><strong>Linear</strong>--Indicates that the VF is a linear function of the VRMA.</li><li><strong>Symmetric Linear</strong>--Specifies that the VF is a linear function of the VRMA in either the negative or positive side of the VRMA, respectively, and the two linear functions are symmetrical with respect to the VF (y) axis.</li><li><strong>Inverse Linear</strong>--Indicates that the VF is an inverse linear function of the VRMA.</li><li><strong>Symmetric Inverse Linear</strong>--Specifies that the VF is an inverse linear function of the VRMA in either the negative or positive side of the VRMA, respectively, and the two linear functions are symmetrical with respect to the VF (y) axis.</li><li><strong>Cos</strong>--Identifies the VF as the cosine-based function of the VRMA.</li><li><strong>Sec</strong>--Identifies the VF as the secant-based function of the VRMA.</li><li><strong>Cos-Sec</strong>--Specifies that the VF is the cosine-based function of the VRMA when the VRMA is negative and the secant-based function of the VRMA when the VRMA is not negative.</li><li><strong>Sec-Cos</strong>--Specifies that the VF is the secant-based function of the VRMA when the VRMA is negative and the cosine-based function of the VRMA when the VRMA is not negative.</li><li><strong>Table</strong>--Identifies that a table file will be used to define the vertical-factor graph that is used to determine the VFs.</li></ul><p>Modifiers to the vertical keywords include the following:</p><ul><li><strong>Zero factor</strong>--Establishes the vertical factor used when the VRMA is zero. This factor positions the y-intercept of the specified function. By definition, the zero factor is not applicable to any of the trigonometric vertical functions (COS, SEC, COS-SEC, or SEC-COS). The y-intercept is defined by these functions.</li><li><strong>Low Cut angle</strong>--Defines the VRMA angle below which the VF will be set to infinity.</li><li><strong>High Cut angle</strong>--Defines the VRMA angle above which the VF will be set to infinity.</li><li><strong>Slope</strong>--Establishes the slope of the straight line used with the<strong>Linear</strong>and<strong>Inverse Linear</strong>vertical-factor keywords. The slope is specified as a fraction of rise over run (for example, 45 percent slope is 1/45, which is input as 0.02222).</li><li><strong>Table name</strong>--Identifies the name of the table defining the VF.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Defines the relationship between the vertical cost factor and the vertical relative moving angle (VRMA).",
	"@@Path-Distance_Vertical-Raster_tag1@@": "The values are used for calculating the slope used to identify the vertical factor incurred when moving from one cell to another.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "This parameter simulates the increase in the effort to overcome costs as the accumulative cost increases. It is used to model fatigue of the traveler. The growing accumulative cost to reach a cell is multiplied by the resistance rate and added to the cost to move into the subsequent cell.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "It's a modified version of a compound interest rate formula that's used to calculate the apparent cost of moving through a cell. As the value of the resistance rate increases, it increases the cost of the cells that are visited later. The greater the resistance rate, the higher the cost to reach the next cell, which is compounded for each subsequent movement. Since the resistance rate is similar to a compound rate and generally the accumulative cost values are very large, small resistance rates are suggested, such as 0.005 or even smaller, depending on the accumulative cost values.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Defines the cost capacity for the traveler for a source. The cost calculations continue for each source until the specified capacity is reached.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "A required input raster defining the cost or impedance to move planimetrically through each cell. The value at each cell location represents the cost-per-unit distance for moving through it. Each cell location value is multiplied by the cell resolution, and also compensates for diagonal movement to obtain the total cost of passing through the cell.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "The values of the <strong>Cost Raster</strong> can be integer or floating point, but they cannot be negative or zero.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Defines the relationship between the horizontal cost factor and the horizontal relative moving angle (HRMA).</p><p>There are several factors with modifiers that identify a defined vertical factor graph. Additionally, a table can be used to create a custom graph. The graphs are used to identify the vertical factor used in calculating the total cost of moving into a neighboring cell.</p><p>In the explanations below, two acronyms are used: HF and HRMA. HF stands for horizontal factor, which defines the horizontal difficulty encountered when moving from one cell to the next. HRMA stands for horizontal relative moving angle, which identifies the angle between the horizontal direction from a cell and the moving direction.</p><p><strong>Horizontal factor</strong>types include the following:</p><ul><li><strong>Binary</strong>--Indicates that if the HRMA is less than the cut angle, the HF is set to the value associated with the zero factor; otherwise, it is infinity.</li><li><strong>Forward</strong>--Establishes that only forward movement is allowed. The HRMA must be greater than or equal to 0 and less than 90 degrees (0 &lt;= HRMA &lt; 90). If the HRMA is greater than 0 and less than 45 degrees, the HF for the cell is set to the value associated with the zero factor. If the HRMA is greater than or equal to 45 degrees, the side value modifier value is used. The HF for any HRMA value equal to or greater than 90 degrees is set to infinity.</li><li><strong>Linear</strong>--Specifies that the HF is a linear function of the HRMA.</li><li><strong>Inverse Linear</strong>--Specifies that the HF is an inverse linear function of the HRMA.</li><li><strong>Table</strong>--Identifies that a table file will be used to define the horizontal factor graph used to determine the HFs.</li></ul><p>Modifiers to the horizontal factors include the following:</p><ul><li><strong>Zero factor</strong>--The horizontal factor to be used when the HRMA is zero. This factor positions the y-intercept for any of the horizontal factor functions.</li><li><strong>Cut angle</strong>--Defines the HRMA angle beyond which the HF will be set to infinity.</li><li><strong>Slope</strong>--Establishes the slope of the straight line used with the<strong>Linear</strong>and<strong>Inverse Linear</strong>horizontal factor keywords. The slope is specified as a fraction of rise over run (for example, 45 percent slope is 1/45, which is input as 0.02222).</li><li><strong>Side value</strong>--Establishes the HF when the HRMA is greater than or equal to 45 degrees and less than 90 degrees when the<strong>Forward</strong>horizontal factor keyword is specified.</li><li><strong>Table name</strong>--Identifies the name of the table defining the HF.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "A raster defining the horizontal direction at each cell.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "The values on the raster must be integers ranging from 0 to 360, with 0 degrees being north, or toward the top of the screen, and increasing clockwise. Flat areas should be given a value of -1. The values at each location will be used in conjunction with the <strong>Horizontal factor</strong> to determine the horizontal cost incurred when moving from a cell to its neighbors.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "The threshold that the accumulative cost values cannot exceed. If an accumulative cost distance exceeds this value, the output value for the cell location will be NoData. The maximum distance defines the extent for which the accumulative cost distances are calculated. The default distance is to the extent of the output raster.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "A multiplier to apply to the cost values.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "This parameter allows for control of the mode of travel or the magnitude at a source. The greater the multiplier, the greater the cost to move through each cell.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "The values must be greater than zero. The default is 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "The field used to assign values to the source locations. It must be an integer type. If the <strong>Value Raster</strong> has been set, the values in that input will take precedence over any setting for the <strong>Source Field</strong>.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "The required input raster of source locations.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "This is a raster that identifies the cells or locations from which the least accumulated cost distance for every output cell location is calculated.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "It can be an integer or a floating-point type.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "The starting cost from which to begin the cost calculations. This parameter allows for the specification of the fixed cost associated with a source. Instead of starting at a cost of 0, the cost algorithm will begin with the value specified.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "The value must be zero or greater. The default is 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "A raster defining the elevation values at each cell location.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "The values are used to calculate the actual surface distance covered when passing between cells.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Defines the direction of the traveler when applying the source resistance rate and the source starting cost.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>From Source</strong>--The source resistance rate and source starting cost will be applied beginning at the input source and moving out to the non-source cells. This is the default.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>To Source</strong>--The source resistance rate and source starting cost will be applied beginning at each non-source cell and moving back to the input source.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Either specify the <strong>From Source</strong> or <strong>To Source</strong> keyword, which will be applied to all sources, or specify a field in the <strong>Source Raster</strong> that contains the keywords to identify the direction of travel for each source. That field must contain the string ${FROM_SOURCE} or ${TO_SOURCE}.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "The input integer raster that identifies the zone values to be used for each input source location. For each source location cell, the value defined by the <strong>Value Raster</strong> will be assigned to all cells allocated to the source location for the computation. The <strong>Value Raster</strong> will take precedence over any setting for the <strong>Source Field</strong>.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Defines the relationship between the vertical cost factor and the vertical relative moving angle (VRMA).</p><p>There are several factors with modifiers that identify a defined vertical factor graph. Additionally, a table can be used to create a custom graph. The graphs are used to identify the vertical factor used in calculating the total cost of moving into a neighboring cell.</p><p>In the explanations below, two acronyms are used: VF and VRMA. VF stands for vertical factor, which defines the vertical difficulty encountered in moving from one cell to the next. VRMA stands for vertical relative moving angle, which identifies the slope angle between the FROM, or processing, cell and the TO cell.</p><p><strong>Vertical factor</strong>types include the following:</p><ul><li><strong>Binary</strong>--Specifies that if the VRMA is greater than the low-cut angle and less than the high-cut angle, the VF is set to the value associated with the zero factor; otherwise, it is infinity.</li><li><strong>Linear</strong>--Indicates that the VF is a linear function of the VRMA.</li><li><strong>Symmetric Linear</strong>--Specifies that the VF is a linear function of the VRMA in either the negative or positive side of the VRMA, respectively, and the two linear functions are symmetrical with respect to the VF (y) axis.</li><li><strong>Inverse Linear</strong>--Indicates that the VF is an inverse linear function of the VRMA.</li><li><strong>Symmetric Inverse Linear</strong>--Specifies that the VF is an inverse linear function of the VRMA in either the negative or positive side of the VRMA, respectively, and the two linear functions are symmetrical with respect to the VF (y) axis.</li><li><strong>Cos</strong>--Identifies the VF as the cosine-based function of the VRMA.</li><li><strong>Sec</strong>--Identifies the VF as the secant-based function of the VRMA.</li><li><strong>Cos-Sec</strong>--Specifies that the VF is the cosine-based function of the VRMA when the VRMA is negative and the secant-based function of the VRMA when the VRMA is not negative.</li><li><strong>Sec-Cos</strong>--Specifies that the VF is the secant-based function of the VRMA when the VRMA is negative and the cosine-based function of the VRMA when the VRMA is not negative.</li><li><strong>Table</strong>--Identifies that a table file will be used to define the vertical-factor graph that is used to determine the VFs.</li></ul><p>Modifiers to the vertical keywords include the following:</p><ul><li><strong>Zero factor</strong>--Establishes the vertical factor used when the VRMA is zero. This factor positions the y-intercept of the specified function. By definition, the zero factor is not applicable to any of the trigonometric vertical functions (COS, SEC, COS-SEC, or SEC-COS). The y-intercept is defined by these functions.</li><li><strong>Low Cut angle</strong>--Defines the VRMA angle below which the VF will be set to infinity.</li><li><strong>High Cut angle</strong>--Defines the VRMA angle above which the VF will be set to infinity.</li><li><strong>Slope</strong>--Establishes the slope of the straight line used with the<strong>Linear</strong>and<strong>Inverse Linear</strong>vertical-factor keywords. The slope is specified as a fraction of rise over run (for example, 45 percent slope is 1/45, which is input as 0.02222).</li><li><strong>Table name</strong>--Identifies the name of the table defining the VF.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Defines the relationship between the vertical cost factor and the vertical relative moving angle (VRMA).",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "The values are used for calculating the slope used to identify the vertical factor incurred when moving from one cell to another.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "This parameter simulates the increase in the effort to overcome costs as the accumulative cost increases. It is used to model fatigue of the traveler. The growing accumulative cost to reach a cell is multiplied by the resistance rate and added to the cost to move into the subsequent cell.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "It's a modified version of a compound interest rate formula that's used to calculate the apparent cost of moving through a cell. As the value of the resistance rate increases, it increases the cost of the cells that are visited later. The greater the resistance rate, the higher the cost to reach the next cell, which is compounded for each subsequent movement. Since the resistance rate is similar to a compound rate and generally the accumulative cost values are very large, small resistance rates are suggested, such as 0.005 or even smaller, depending on the accumulative cost values.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Defines the cost capacity for the traveler for a source. The cost calculations continue for each source until the specified capacity is reached.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "A required input raster defining the cost or impedance to move planimetrically through each cell. The value at each cell location represents the cost-per-unit distance for moving through it. Each cell location value is multiplied by the cell resolution, and also compensates for diagonal movement to obtain the total cost of passing through the cell.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "The values of the <strong>Cost Raster</strong> can be integer or floating point, but they cannot be negative or zero.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Defines the relationship between the horizontal cost factor and the horizontal relative moving angle (HRMA).</p><p>There are several factors with modifiers that identify a defined vertical factor graph. Additionally, a table can be used to create a custom graph. The graphs are used to identify the vertical factor used in calculating the total cost of moving into a neighboring cell.</p><p>In the explanations below, two acronyms are used: HF and HRMA. HF stands for horizontal factor, which defines the horizontal difficulty encountered when moving from one cell to the next. HRMA stands for horizontal relative moving angle, which identifies the angle between the horizontal direction from a cell and the moving direction.</p><p><strong>Horizontal factor</strong>types include the following:</p><ul><li><strong>Binary</strong>--Indicates that if the HRMA is less than the cut angle, the HF is set to the value associated with the zero factor; otherwise, it is infinity.</li><li><strong>Forward</strong>--Establishes that only forward movement is allowed. The HRMA must be greater than or equal to 0 and less than 90 degrees (0 &lt;= HRMA &lt; 90). If the HRMA is greater than 0 and less than 45 degrees, the HF for the cell is set to the value associated with the zero factor. If the HRMA is greater than or equal to 45 degrees, the side value modifier value is used. The HF for any HRMA value equal to or greater than 90 degrees is set to infinity.</li><li><strong>Linear</strong>--Specifies that the HF is a linear function of the HRMA.</li><li><strong>Inverse Linear</strong>--Specifies that the HF is an inverse linear function of the HRMA.</li><li><strong>Table</strong>--Identifies that a table file will be used to define the horizontal factor graph used to determine the HFs.</li></ul><p>Modifiers to the horizontal factors include the following:</p><ul><li><strong>Zero factor</strong>--The horizontal factor to be used when the HRMA is zero. This factor positions the y-intercept for any of the horizontal factor functions.</li><li><strong>Cut angle</strong>--Defines the HRMA angle beyond which the HF will be set to infinity.</li><li><strong>Slope</strong>--Establishes the slope of the straight line used with the<strong>Linear</strong>and<strong>Inverse Linear</strong>horizontal factor keywords. The slope is specified as a fraction of rise over run (for example, 45 percent slope is 1/45, which is input as 0.02222).</li><li><strong>Side value</strong>--Establishes the HF when the HRMA is greater than or equal to 45 degrees and less than 90 degrees when the<strong>Forward</strong>horizontal factor keyword is specified.</li><li><strong>Table name</strong>--Identifies the name of the table defining the HF.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "A raster defining the horizontal direction at each cell.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "The values on the raster must be integers ranging from 0 to 360, with 0 degrees being north, or toward the top of the screen, and increasing clockwise. Flat areas should be given a value of -1. The values at each location will be used in conjunction with the <strong>Horizontal factor</strong> to determine the horizontal cost incurred when moving from a cell to its neighbors.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "The threshold that the accumulative cost values cannot exceed. If an accumulative cost distance exceeds this value, the output value for the cell location will be NoData. The maximum distance defines the extent for which the accumulative cost distances are calculated. The default distance is to the extent of the output raster.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "A multiplier to apply to the cost values.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "This parameter allows for control of the mode of travel or the magnitude at a source. The greater the multiplier, the greater the cost to move through each cell.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "The values must be greater than zero. The default is 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "The required input raster of source locations.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "This is a raster that identifies the cells or locations from which the least accumulated cost distance for every output cell location is calculated.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "It can be an integer or a floating-point type.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "The starting cost from which to begin the cost calculations. This parameter allows for the specification of the fixed cost associated with a source. Instead of starting at a cost of 0, the cost algorithm will begin with the value specified.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "The value must be zero or greater. The default is 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "A raster defining the elevation values at each cell location.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "The values are used to calculate the actual surface distance covered when passing between cells.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Defines the direction of the traveler when applying the source resistance rate and the source starting cost.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>From Source</strong>--The source resistance rate and source starting cost will be applied beginning at the input source and moving out to the non-source cells. This is the default.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>To Source</strong>--The source resistance rate and source starting cost will be applied beginning at each non-source cell and moving back to the input source.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Either specify the <strong>From Source</strong> or <strong>To Source</strong> keyword, which will be applied to all sources, or specify a field in the <strong>Source Raster</strong> that contains the keywords to identify the direction of travel for each source. That field must contain the string ${FROM_SOURCE} or ${TO_SOURCE}.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Defines the relationship between the vertical cost factor and the vertical relative moving angle (VRMA).</p><p>There are several factors with modifiers that identify a defined vertical factor graph. Additionally, a table can be used to create a custom graph. The graphs are used to identify the vertical factor used in calculating the total cost of moving into a neighboring cell.</p><p>In the explanations below, two acronyms are used: VF and VRMA. VF stands for vertical factor, which defines the vertical difficulty encountered in moving from one cell to the next. VRMA stands for vertical relative moving angle, which identifies the slope angle between the FROM, or processing, cell and the TO cell.</p><p><strong>Vertical factor</strong>types include the following:</p><ul><li><strong>Binary</strong>--Specifies that if the VRMA is greater than the low-cut angle and less than the high-cut angle, the VF is set to the value associated with the zero factor; otherwise, it is infinity.</li><li><strong>Linear</strong>--Indicates that the VF is a linear function of the VRMA.</li><li><strong>Symmetric Linear</strong>--Specifies that the VF is a linear function of the VRMA in either the negative or positive side of the VRMA, respectively, and the two linear functions are symmetrical with respect to the VF (y) axis.</li><li><strong>Inverse Linear</strong>--Indicates that the VF is an inverse linear function of the VRMA.</li><li><strong>Symmetric Inverse Linear</strong>--Specifies that the VF is an inverse linear function of the VRMA in either the negative or positive side of the VRMA, respectively, and the two linear functions are symmetrical with respect to the VF (y) axis.</li><li><strong>Cos</strong>--Identifies the VF as the cosine-based function of the VRMA.</li><li><strong>Sec</strong>--Identifies the VF as the secant-based function of the VRMA.</li><li><strong>Cos-Sec</strong>--Specifies that the VF is the cosine-based function of the VRMA when the VRMA is negative and the secant-based function of the VRMA when the VRMA is not negative.</li><li><strong>Sec-Cos</strong>--Specifies that the VF is the secant-based function of the VRMA when the VRMA is negative and the cosine-based function of the VRMA when the VRMA is not negative.</li><li><strong>Table</strong>--Identifies that a table file will be used to define the vertical-factor graph that is used to determine the VFs.</li></ul><p>Modifiers to the vertical keywords include the following:</p><ul><li><strong>Zero factor</strong>--Establishes the vertical factor used when the VRMA is zero. This factor positions the y-intercept of the specified function. By definition, the zero factor is not applicable to any of the trigonometric vertical functions (COS, SEC, COS-SEC, or SEC-COS). The y-intercept is defined by these functions.</li><li><strong>Low Cut angle</strong>--Defines the VRMA angle below which the VF will be set to infinity.</li><li><strong>High Cut angle</strong>--Defines the VRMA angle above which the VF will be set to infinity.</li><li><strong>Slope</strong>--Establishes the slope of the straight line used with the<strong>Linear</strong>and<strong>Inverse Linear</strong>vertical-factor keywords. The slope is specified as a fraction of rise over run (for example, 45 percent slope is 1/45, which is input as 0.02222).</li><li><strong>Table name</strong>--Identifies the name of the table defining the VF.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Defines the relationship between the vertical cost factor and the vertical relative moving angle (VRMA).",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "The values are used for calculating the slope used to identify the vertical factor incurred when moving from one cell to another.",
	"@@Plus_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Plus_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Plus_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Plus_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Plus_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Plus_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Plus_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Plus_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Plus_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Plus_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Plus_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Plus_Raster_tag0@@": "The input whose values will be added to.",
	"@@Plus_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Plus_Raster2_tag0@@": "The input whose values will be added to the first input.",
	"@@Plus_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Local_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Local_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Local_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Local_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Local_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Local_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Local_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Local_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Local_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Local_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Local_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Local_Raster_tag0@@": "The input whose values will be added to.",
	"@@Local_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Local_Raster2_tag0@@": "The input whose values will be added to the first input.",
	"@@Local_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Local_False-Raster_tag0@@": "The input whose values will be used as the output pixel values if the condition is false. It can be an integer, a floating-point raster, or a constant value.",
	"@@Local_True-Raster_tag0@@": "The input whose values will be used as the output pixel values if the condition is true. It can be an integer, a floating-point raster, or a constant value.",
	"@@Power_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Power_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Power_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Power_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Power_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Power_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Power_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Power_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Power_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Power_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Power_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Power_Raster_tag0@@": "The input values to be raised to the power defined by <strong>Raster2</strong>.",
	"@@Power_Raster_tag3@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Power_Raster2_tag0@@": "The input that determines the power to which the values of <strong>Raster</strong> will be raised.",
	"@@Power_Raster2_tag3@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "The type of calibration to be performed.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Beta-nought--The function returns the radar reflectivity per unit area in slant range. This is the default calibration type.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Sigma-nought--The function returns the radar reflectivity per unit area in ground range. Results are 32-bit floating-point values commonly in the range of 0.0 to 1.0. No data clipping is performed if this option is selected.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gamma--The function returns the radar reflectivity per unit area in the plane perpendicular to the direction of measurement.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "None",
	"@@Radar-Calibration_Raster_tag0@@": "The input raster.",
	"@@RasterInfo_Raster-Info_tag0@@": "Select a raster dataset to use as a template",
	"@@RasterInfo_Raster_tag0@@": "The input raster.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "A list of fields in the <strong>Zonal Attributes Table</strong> , where each field is separated by a comma. Values in each field will be represented by a band in the output raster.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "The initial pixel value of the output bands in a raster, before being remapped.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "If a pixel does not fall within a zone, it will remain as the background value.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "The required input raster.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "The input should be a single-band raster. If a multiband raster is used, only the first band will be used.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "An optional additional query applied on the <strong>Zonal Attributes Table</strong>.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "If you were using the table above as an example, the query would be ${Variable1 = 'bare earth'}.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "The zonal attributes specified as a path to a local feature class, the path to a table, the URL to a feature service layer, or a JSON string.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "In JSON, it is described as a collection of mapping from zone IDs to an array of integers. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "The field name containing the zone ID values.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "An optional single-band raster where each pixel contains the zone ID associated with the location. The zone ID is used for looking up rows in the zonal attributes table for zone-specific ingestion.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Leave this parameter unspecified if you only want to import the attribute.",
	"@@Rasterize-Features_Field_tag0@@": "Select the field to use to identify each feature.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Select the feature class to convert to raster format.",
	"@@Rasterize-Features_Raster_tag0@@": "Select a raster to define the cell size and extent for the feature conversion.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Determine how to manage features that overlap:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>First</strong>--The overlapping areas will be assigned a value from the first dataset listed.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Last</strong>--The overlapping areas will be assigned a value from the last dataset listed.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Smallest</strong>--The overlapping areas will be assigned a value from the smaller of the features.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Largest</strong>--The overlapping areas will be assigned a value from the larger of the features.",
	"@@Recast_Overrides_tag0@@": "A table of variable names and user-defined values used to modify a mosaic dataset.",
	"@@Recast_Raster_tag0@@": "The raster product to which the Recast function will be applied.",
	"@@Region-Group_Add-Link_tag0@@": "Specifies whether a link field is added to the table of the output.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Add Link</strong>--An item ${LINK} item will be added to the table of the output raster.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>No Link</strong>--The attribute table for the output raster will only contain the ${Value} and ${Count} items.",
	"@@Region-Group_Excluded-Value_tag0@@": "Identifies a value such that if a cell location contains the value, no spatial connectivity will be evaluated regardless how the number of neighbors is specified (FOUR or EIGHT).",
	"@@Region-Group_Excluded-Value_tag1@@": "Cells with the excluded value will be treated as NoData and are eliminated from calculations. Cell locations that contain the excluded value will receive 0 on the output raster.",
	"@@Region-Group_Excluded-Value_tag2@@": "The excluded value is similar to the concept of a background value, or having a mask applied. A value must be specified for this parameter if the <strong>${CROSS}</strong> parameter is specified.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "The number of neighboring cells to use in evaluating connectivity between cells.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>FOUR</strong>--Defines connectivity between cells of the same value only if the cells are directly to the left, right, above, or below each of the four nearest neighbors. This is the default.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>EIGHT</strong>--Defines connectivity between cells of the same value if they are within the immediate eight-cell neighborhood of each other. This includes to the right, left, above, or diagonal to each other.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Defines which cell values should be considered when testing for connectivity.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>WITHIN</strong>--Tests connectivity between input values that are the same within the same zone. This is the default.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "The only cells that can be grouped are cells from the same zone (value) that meet the spatial requirements of connectivity specified by the <strong>Number of neighbors</strong> parameter (four-way or eight-way).",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>CROSS</strong>--Tests connectivity by the spatial requirements specified by the number of neighbors parameter between cells with any values, except for the value identified to be excluded by the excluded value parameter.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "When this option is used, a value for the <strong>Excluded value</strong> parameter must be specified.",
	"@@Region-Group_Zone-Raster_tag0@@": "The required input raster whose unique connected regions will be identified.",
	"@@Region-Group_Zone-Raster_tag1@@": "It must be of integer type.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "The field in the attribute table that defines the fill value for the group of pixels. In a multiband image, all bands will be assigned this value.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "The field in the attribute table that defines the maximum growth radius, in the image's spatial reference units.",
	"@@Region-Grow_Raster_tag0@@": "The raster that you want to perform this function on.",
	"@@Region-Grow_Seed-Points_tag0@@": "A point feature class, serving as the initial seeds for the algorithm. Each seed point corresponds to one entry in the attribute table, which carries the maximum growth radius, similarity threshold, and fill value information.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "The field in the attribute table that defines the similarity threshold, as Euclidean distance in spectral space.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Missing values in the reclass table can retain their value or be remapped to NoData.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Unchecked--Any pixel from the input raster that does not get reclassed in a remap table will retain its value and be written for its location to the output raster. This is the default.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Checked--Any pixel from the input raster that does not get reclassed in a remap table will have its value remapped to NoData for its location to the output raster.",
	"@@Remap_Input-Field_tag0@@": "Choose the field that specifies the input pixel value that will be remapped.",
	"@@Remap_Input-Field_tag1@@": "If your table has a value range, this will be the minimum value field, and the <strong>Input Max Field</strong> parameter needs to be specified as well.",
	"@@Remap_Input-Max-Field_tag0@@": "Choose the maximum value field if your table specifies a value range.",
	"@@Remap_List_tag0@@": "Specify the map values and specify the minimum and maximum value range and the new remap values. In addition, the value range can be set as NoData pixels.",
	"@@Remap_Output-Field_tag0@@": "Choose the field that will be used as the output remapped value.",
	"@@Remap_Raster_tag0@@": "The input raster.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Choose the option you want to use to set the remap values:",
	"@@Remap_Remap-Definition-Type_tag1@@": "List--Specify a range of pixel values to map to an output pixel value",
	"@@Remap_Remap-Table-Type_tag0@@": "Choose the type of table you'll use to remap your input raster:",
	"@@Remap_Remap-Table-Type_tag1@@": "Simple--Uses the <strong>Remap Table</strong> input to remap the <strong>Input Field</strong> pixel values to the corresponding value in the <strong>Output Field</strong> parameter. This method caches the remap table so that it can perform faster.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dynamic--This method does not cache the remap table and will make a query each time a request is made (pan, zoom, or refresh). If the table changes, the next request can dynamically remap the values accordingly.",
	"@@Remap_Remap-Table-Type_tag9@@": "Reassignment--A specific table used for the reclassification process, where each row in the table will only remap based on each feature boundary.",
	"@@Remap_Remap-Table_tag0@@": "Browse to the table that sets your remap values.",
	"@@Reproject_Raster_tag0@@": "The raster dataset to be reprojected or resampled.",
	"@@Reproject_Spatial-Reference_tag0@@": "The coordinate system used to reproject the data.",
	"@@Reproject_X-Cellsize_tag0@@": "The x-dimension to which the data should be resampled. This is optional. If the value is 0 or less, the output envelope (extent and cell sizes) is calculated from the input raster.",
	"@@Reproject_X-Registration-Point_tag0@@": "The x-coordinate used to define the upper left corner of the dataset. This coordinate must be defined in the units of the new spatial reference. If both the <strong>X Cellsize</strong> and <strong>Y Cellsize</strong> parameters are greater than 0, they are used along with the <strong>X Registration Point</strong> and <strong>Y Registration Point</strong> parameters to define the output envelope.",
	"@@Reproject_Y-Cellsize_tag0@@": "The y-dimension to which the data should be resampled. This is optional. If the value is 0 or less, the output envelope (extent and cell sizes) is calculated from the input raster.",
	"@@Reproject_Y-Registration-Point_tag0@@": "The y-coordinate used to define the upper left corner of the dataset. This coordinate must be defined in the units of the new spatial reference. If both the <strong>X Cellsize</strong> and <strong>Y Cellsize</strong> parameters are greater than 0, they are used along with the <strong>X Registration Point</strong> and <strong>Y Registration Point</strong> parameters to define the output envelope.",
	"@@Resample_Input-Cellsize_tag0@@": "The pixel cell size of the input raster.",
	"@@Resample_Output-Cellsize_tag0@@": "The pixel cell size of the output raster. The cell size can be changed, but the extent of the raster dataset will remain the same. Resampling from a user-defined cell size can be much slower than the system default, since the system default resampling processes the minimum amount of data from the closest possible resolution.",
	"@@Resample_Raster_tag0@@": "The input raster to be resampled.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>Nearest Neighbor</strong>--Calculates the output pixel value using the nearest input pixel. NoData pixels will remain unchanged in the output raster dataset. This the default.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Bilinear Interpolation</strong>--Calculates the pixel value using the distance-weighted value of the four nearest pixels. This method is computationally efficient to process.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Cubic Convolution</strong>--Determines the new value of a pixel based on fitting a smooth curve through the 16 nearest input pixel centers.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Majority</strong>--Calculates pixel value using the majority pixel value in the 16 nearest pixels. NoData pixels will remain unchanged in the output raster dataset.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Bilinear Interpolation Plus</strong>--Uses <strong>Bilinear Interpolation</strong>, except the pixels along the edges are defined as NoData and are not replicated or considered in the calculation. Use <strong>Bilinear Interpolation Plus</strong> for tiled data because the edges will match better.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Gauss Blur</strong>--Applies a Gaussian convolution to the source raster and calculates pixel value using the distance-weighted value of four nearest pixels from the blurred raster. It is appropriate for removing noise in resampled data and for down-sampling to a larger pixel size.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Gauss Blur Plus</strong>--Uses the same method as <strong>Gauss Blur</strong> , except the pixels along the edges are defined as NoData and are not replicated or considered in the calculation. Use <strong>Gauss Blur Plus</strong> for tiled data because the edges will match better.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Average</strong>--Calculates pixel values using the average value of all overlapping pixels, for each target pixel.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Minimum</strong>--Calculates pixel value using the minimum value of all overlapping pixels. NoData pixels will remain unchanged in the output raster dataset.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Maximum</strong>--Appropriate for continuous data, it produces a smoother output image than the Nearest Neighbor resampling method.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Vector Average</strong>--Calculates vector average of magnitude-direction using all involved pixels. This method is only applicable for two band rasters that represent magnitude and direction. It first converts magnitude-direction into U-V, and then it takes the arithmetic average across all involved pixels to get the U-V of the target pixel and converts it back to magnitude-direction.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Round-Down_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Round-Down_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Round-Down_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Round-Down_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Round-Down_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Round-Down_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Round-Down_Raster_tag0@@": "The input values to be rounded down.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Round-Up_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Round-Up_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Round-Up_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Round-Up_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Round-Up_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Round-Up_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Round-Up_Raster_tag0@@": "The input values to be rounded up.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "The minimum segment size, measured in pixels. This value is related to your minimum mapping unit, and will filter out smaller blocks of pixels. All segments that are smaller than the specified value will merge the smaller segments with their best fitting neighbor segment.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "The input raster to be segmented.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "The segment boundaries draw as a black contour line around each segment. This is helpful so you can distinguish adjacent segments that have similar colors.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Unchecked--The segment boundaries are not displayed. This is the default.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Checked--The segment boundaries are displayed with black contour lines around each segment.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "The relative importance of separating objects based on spatial characteristics.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "Valid integer values range from 1 to 20. Smaller values result in broad classes and more smoothing. A higher value is appropriate for discriminating between features that are spatially small and clustered together. For example, in an urban scene, you could classify general impervious surface features using a smaller spatial detail value, or you could classify buildings and roads as separate classes using a higher spatial detail value.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "The relative importance of separating objects based on color characteristics.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "Valid floating-point values range from 1.0 to 20.0. Smaller values result in broad classes and more smoothing. A higher value is appropriate when you want to discriminate between features having somewhat similar spectral characteristics. For example, using a higher spectral detail value in a forested scene allows you to better distinguish the different tree species.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>The maximum size of a segment. Segments that are larger than the specified size will be divided. Use this parameter to prevent artifacts in the output layer resulting from large segments. The default is -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Select one of four calibration types:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta nought</strong>--produces an output containing the radar brightness coefficient.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma nought</strong>--the backscatter returned to the antenna from a unit area on the ground, related to ground range.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gamma</strong>--measurement of emitted and returned energy useful for determining antenna patterns.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>None</strong>--do not apply a correction. This is the default.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "The Sentinel-1 Level-1 GRD or SLC input raster you want to process.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "The function will use the LUT file either to apply the thermal correction or to remove the correction, depending on the contents of the LUT.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "The Sentinel-1 input raster you want to process.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "The function will use the LUT file to either apply the thermal correction or remove the correction depending on the contents of the LUT.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Set-Null_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Set-Null_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Set-Null_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Set-Null_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Set-Null_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Set-Null_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Set-Null_False-Raster_tag0@@": "The input whose values will be used as the output pixel values if the condition is false. It can be an integer, a floating-point raster, or a constant value.",
	"@@Set-Null_Raster_tag0@@": "The input raster that represents the Boolean result of a logical math raster function. The values will be either 1 (for true) or 0 (for false). It can be an integer or a floating-point raster.",
	"@@Shaded-Relief_Altitude_tag0@@": "Altitude is the sun's angle of elevation above the horizon and ranges from 0 to 90 degrees. A value of 0 degrees indicates that the sun is on the horizon, that is, on the same horizontal plane as the frame of reference. A value of 90 degrees indicates that the sun is directly overhead. The default is 45 degrees above the horizon.",
	"@@Shaded-Relief_Azimuth_tag0@@": "Azimuth is the sun's relative position along the horizon (in degrees). This position is indicated by the angle of the sun measured clockwise from due north. An azimuth of 0 degrees indicates north, east is 90 degrees, south is 180 degrees, and west is 270 degrees.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Specify whether a color ramp or a color map will be used to display the shaded relief.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Color Ramp</strong>--When you choose <strong>Color Ramp</strong>, you will be prompted to select an appropriate color ramp.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Colormap</strong>--When you choose <strong>Colormap</strong> , you will be prompted to specify the color map file to use.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Specify whether the default edge pixel interpolation with be disabled.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Unchecked--Bilinear resampling will be applied uniformly to resample the shaded relief. This is the default.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Checked--Bilinear resampling will be used within the shaded relief, except along the edges of the rasters or next to pixels of NoData. These pixels will be populated with NoData, since it will reduce any sharp edge effects that may occur.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Using this option will avoid any resampling artifacts that may occur along the edges of a raster. The output pixels along the edge of a raster or beside pixels without a value will be populated with NoData; therefore, it is recommended that this option be used only when there are other rasters with overlapping pixels available. When overlapping pixels are available, these areas of NoData will display the overlapping pixel values instead of being blank.",
	"@@Shaded-Relief_Raster_tag0@@": "The input elevation raster.",
	"@@Shaded-Relief_Scaling_tag0@@": "The shaded result is scaled dynamically by adjusting the z-factor using one of two options:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>None</strong>--No scaling is applied. This is ideal for a single raster dataset covering a local area. This is not recommended for worldwide datasets with large variations in elevation or multiscale maps, as it will produce terrain relief with little variation at small scales.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Adjusted</strong>--A nonlinear adjustment is applied using the default <strong>Pixel Size Power</strong> and <strong>Pixel Size Factor</strong> values, which accommodate a wide variety of altitude changes (scale) as the viewer zooms in and out. The <strong>Adjusted</strong> option is recommended when using a worldwide dataset.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "The z-factor is a scaling factor used to convert the elevation values for two purposes:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "To convert the elevation units (such as meters or feet) to the horizontal coordinate units of the dataset, which may be feet, meters, or degrees",
	"@@Shaded-Relief_Z-Factor_tag2@@": "To add vertical exaggeration for visual effect",
	"@@Shaded-Relief_Z-Factor_tag3@@": "The shaded result is scaled dynamically by adjusting the z-factor using one of two options:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>None</strong>--No scaling is applied. This is ideal for a single raster dataset covering a local area. This is not recommended for worldwide datasets with large variations in elevation or multiscale maps, as it will produce terrain relief with little variation at small scales.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Adjusted</strong>--A nonlinear adjustment is applied using the default <strong>Pixel Size Power</strong> and <strong>Pixel Size Factor</strong> values, which accommodate a wide variety of altitude changes (scale) as the viewer zooms in and out. The <strong>Adjusted</strong> option is recommended when using a worldwide dataset.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Controls the illumination source for the hillshade.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Traditional</strong>--Calculates hillshade from a single illumination direction. You can set the <strong>Azimuth</strong> and <strong>Altitude</strong> options to control the location of the light source. This is the default.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Multidirectional</strong>--Combines light from multiple sources to represent an enhanced visualization of the terrain.",
	"@@Shaded-Relief_PSPower_tag0@@": "<strong>Pixel Size Power</strong> accounts for the altitude changes (or scale) as the viewer zooms in and out on the map display. It is the exponent applied to the pixel size term in the equation that controls the rate at which the <strong>Z Factor</strong> changes to avoid significant loss of relief.",
	"@@Shaded-Relief_PSPower_tag1@@": "This parameter is only valid when the <strong>Scaling</strong> type is <strong>Adjusted</strong>. The default value is 0.664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "<strong>Pixel Size Factor</strong> accounts for changes in scale as the viewer zooms in and out on the map display. It controls the rate at which the <strong>Z Factor</strong> changes.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "This parameter is only valid when the <strong>Scaling</strong> type is <strong>Adjusted</strong>. The default value is 0.024.",
	"@@Sin_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Sin_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Sin_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Sin_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Sin_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Sin_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Sin_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Sin_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Sin_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Sin_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Sin_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Sin_Raster_tag0@@": "The input for which to calculate the sine values.",
	"@@SinH_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@SinH_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@SinH_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@SinH_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@SinH_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@SinH_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@SinH_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@SinH_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@SinH_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@SinH_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@SinH_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@SinH_Raster_tag0@@": "The input for which to calculate the hyperbolic sine values.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "The input raster that shows the direction of flow out of each cell.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "The flow direction raster can be created by running the <strong>Flow Direction</strong> function.",
	"@@Slope_DEM_tag0@@": "The input elevation raster.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Using this option will avoid any resampling artifacts that may occur along the edges of a raster. The output pixels along the edge of a raster or beside pixels without a value will be populated with NoData; therefore, it is recommended that this option be used only when there are other rasters with overlapping pixels available. When overlapping pixels are available, these areas of NoData will display the overlapping pixel values instead of being blank.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Unchecked--Bilinear resampling will be applied uniformly to resample your slope. This is the default.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Checked--Bilinear resampling will be used within the slope, except along the edges of the rasters or beside pixels of NoData. These pixels will be populated with NoData, since it will reduce any sharp edge effects that may occur.",
	"@@Slope_Scaling_tag0@@": "The inclination of slope can be output as either a value in degrees, or percent rise. There are three options for the <strong>Scaling</strong>:",
	"@@Slope_Scaling_tag3@@": "<strong>Degree</strong>--The inclination of slope is calculated in degrees. The values range from 0 to 90.",
	"@@Slope_Scaling_tag5@@": "<strong>Percent_Rise</strong>--The inclination of slope is calculated as percentage values. The values range from 0 to infinity. A flat surface is 0 percent rise, whereas a 45-degree surface is 100 percent rise. As the surface becomes more vertical, the percent rise becomes increasingly larger.",
	"@@Slope_Scaling_tag7@@": "<strong>Scaled</strong>--The inclination of slope is calculated the same as DEGREE, but the z-factor is adjusted for scale. It uses the <strong>Pixel Size Power</strong> and <strong>Pixel Size Factor</strong> values, which account for the resolution changes (scale) as the viewer zooms in and out. This is recommended when using worldwide datasets--particularly when using slope as a surface for visualization.",
	"@@Slope_Scaling_tag13@@": "The z-factor is adjusted using the following equation:",
	"@@Slope_Scaling_tag14@@": "Adjusted Z Factor = (Z Factor) + (Pixel Size)",
	"@@Slope_Scaling_tag15@@": "× (Pixel Size Factor)",
	"@@Slope_Scaling_tag16@@": "Pixel Size Power",
	"@@Slope_Z-Factor_tag0@@": "The <strong>Z Factor</strong> is a scaling factor used to convert the elevation values for two purposes:",
	"@@Slope_Z-Factor_tag3@@": "To convert the elevation units (such as meters or feet) to the horizontal coordinate units of the dataset, which may be feet, meters, or degrees",
	"@@Slope_Z-Factor_tag4@@": "To add vertical exaggeration for visual effect",
	"@@Slope_PSPower_tag0@@": "<strong>Pixel Size Power</strong> accounts for the altitude changes (or scale) as the viewer zooms in and out on the map display. It is the exponent applied to the pixel size term in the equation that controls the rate at which the <strong>Z Factor</strong> changes to avoid significant loss of relief.",
	"@@Slope_PSPower_tag1@@": "This parameter is only valid when the <strong>Scaling</strong> type is <strong>Scaled</strong>. The default value is 0.664.",
	"@@Slope_PSZFactor_tag0@@": "<strong>Pixel Size Factor</strong> accounts for changes in scale as the viewer zooms in and out on the map display. It controls the rate at which the <strong>Z Factor</strong> changes.",
	"@@Slope_PSZFactor_tag1@@": "This parameter is only valid when the <strong>Scaling</strong> type is <strong>Scaled</strong>. The default value is 0.024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "The input flow accumulation raster layer.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "This can be created with the <strong>Flow Accumulation</strong> function.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "Field used to assign values to the pour point locations.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "The input pour point locations that are to be snapped.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "For an input raster layer, all cells that are not NoData (that is, have a value) will be considered pour points and will be snapped.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "The maximum distance, in map units, to search for a cell of higher accumulated flow.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Specifies the mean value of additive noise. A larger noise mean value will produce less smoothing, while a smaller value results in more smoothing.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "This parameter is only valid when the <strong>Filter Type</strong> is <strong>Lee Filter</strong> and the <strong>Noise Model</strong> is <strong>Additive Noise</strong> or <strong>Additive and Multiplicative Noise</strong>. The default value is 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Specifies the extent of exponential damping effect on filtering. A larger damping value preserves edges better but smooths less, while a smaller value produces more smoothing. A value of 0 results in the same output as a low-pass filter.",
	"@@Speckle_Damping-Factor_tag1@@": "This parameter is only valid when the <strong>Filter Type</strong> is <strong>Enhanced Lee Filter</strong> or <strong>Frost Filter</strong>. The default value is 1.",
	"@@Speckle_Filter-Size_tag0@@": "Specifies the size of the pixel window used to filter noise:",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "Specifies the filter type to be used in the smoothing algorithm to remove speckle noise:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Lee Filter</strong>--Reduces the speckle noise by applying a spatial filter to each pixel in an image, which filters the data based on local statistics calculated within a square window. This filter is useful when you want to smooth speckled data that has an additive or multiplicative component. This is the default.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Enhanced Lee Filter</strong>--An adapted version of the Lee filter that includes <strong>Damping Factor</strong> and <strong>Number of Looks</strong>. This filter is useful when you want to reduce speckle while preserving texture information.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Frost Filter</strong>--Reduces speckle noise with an exponentially damped circularly symmetric filter that uses local statistics within individual filter windows. This filter is useful when you want to reduce speckle while preserving edges in radar images.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Kuan Filter</strong>--Similar to the Lee filter, this filter applies a spatial filter to each pixel in an image and filters the data based on local statistics calculated within a square window. This filter is useful when you want to reduce speckle while preserving edges in radar images.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Specifies the mean value of multiplicative noise. A larger noise mean value will produce less smoothing, while a smaller value results in more smoothing.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "This parameter is only valid when the <strong>Filter Type</strong> is <strong>Lee Filter</strong> and the <strong>Noise Model</strong> is <strong>Additive Noise</strong> or <strong>Additive and Multiplicative Noise</strong>. The default value is 1.",
	"@@Speckle_Noise-Model_tag0@@": "Specifies the type of noise that is reducing the quality of the radar image:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Multiplicative Noise</strong>--Random signal noise that is multiplied into the relevant signal during capture or transmission",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Additive Noise</strong>--Random signal noise that is added into the relevant signal during capture or transmission",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Additive and Multiplicative Noise</strong>--Both noise models",
	"@@Speckle_Noise-Variance_tag0@@": "Specifies the noise variance of the radar image.",
	"@@Speckle_Noise-Variance_tag1@@": "This parameter is only valid when the <strong>Filter Type</strong> is <strong>Lee Filter</strong> and the <strong>Noise Model</strong> is <strong>Additive Noise</strong> or <strong>Additive and Multiplicative Noise</strong>. The default value is 0.25.",
	"@@Speckle_Number-of-Looks_tag0@@": "Specifies the number of looks of the image, which controls image smoothing and estimates noise variance. A smaller value results in more smoothing, while a larger value retains more image features.",
	"@@Speckle_Number-of-Looks_tag1@@": "This parameter is only valid when the <strong>Filter Type</strong> is <strong>Lee Filter</strong> and the <strong>Noise Model</strong> is <strong>Multiplicative Noise</strong> , or when the <strong>Filter Type</strong> is <strong>Kuan Filter</strong>. The default value is 1.",
	"@@Speckle_Raster_tag0@@": "The input raster.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "The matrix used to convert the input raster.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "The equation used to perform this conversion is:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Output Band_R = Weight_P * Band_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "where:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Band_R is an output band, where R is a number from 1 to the number of output bands.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Weight_P is a comma-delimited list of weights, 1 for each input band. The sum of the weights for each band should equal 1.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "Band_C is the input image, where C is a number from 1 to the number of bands of the input image.",
	"@@Spectral-Conversion_Raster_tag0@@": "The input raster.",
	"@@Spectral-Conversion_Raster_tag1@@": "This can be a raster dataset, a mosaic dataset or an image service.",
	"@@Spectral-Conversion_Size_tag0@@": "The number of rows and columns in the <strong>Conversion Matrix</strong>.",
	"@@Square_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Square_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Square_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Square_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Square_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Square_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Square_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Square_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Square_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Square_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Square_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Square_Raster_tag0@@": "The input values to be squared.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Square-Root_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Square-Root_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Square-Root_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Square-Root_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Square-Root_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Square-Root_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Square-Root_Raster_tag0@@": "The input values used to find the square root.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Set the statistics values for each band.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "The ${Histogram} column is a read-only field that can be populated using the <strong>Import</strong> parameter. If you import a histogram file, the ${Histogram} column will be marked as <strong>Defined</strong>.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Import the statistics and histogram information from an existing raster or XML file.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "The input raster that requires the statistics and histogram to be set.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Set the statistics values for each band.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "The input raster that shows the direction of flow out of each cell.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "The flow direction raster can be created by running the <strong>Flow Direction</strong> function.",
	"@@Stream-Link_Stream-Raster_tag0@@": "The input raster that represents a linear stream network.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "The input raster that shows the direction of flow out of each cell.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "The flow direction raster can be created by running the <strong>Flow Direction</strong> function.",
	"@@Stream-Order_Order-Method_tag0@@": "The method used for assigning stream order.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLER</strong>--The method of stream ordering proposed by Strahler in 1952. Stream order only increases when streams of the same order intersect. The intersection of a first-order and second-order link will remain a second-order link, rather than creating a third-order link. This is the default.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong>--The method of stream ordering by magnitude, proposed by Shreve in 1967. All links with no tributaries are assigned a magnitude (order) of one. Magnitudes are additive downslope. When two links intersect, their magnitudes are added and assigned to the downslope link.",
	"@@Stream-Order_Stream-Raster_tag0@@": "An input stream raster that represents a linear stream network.",
	"@@Stretch_Auto-Gamma_tag0@@": "Use <strong>Auto Gamma</strong> to calculate gamma from the statistics and histogram of the dataset. The statistics can be the estimated stats by the function itself, or the statistics can be estimated by the software if you chose a layer.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Check the <strong>Dynamic Range Adjustment</strong> check box if you want the statistics calculated from only the pixels displayed on your screen. This option is generally applied when the image will be published and used in a web app that cannot perform this type of stretch.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Check the <strong>Estimate Statistics</strong> check box if you want to estimate your statistics. The estimated statistics are calculated from a 1000 by 1000 sampling from the center of the raster and used by the stretch.",
	"@@Stretch_Estimate-Statistics_tag3@@": "If this is checked and the raster has statistics, or you've entered values in the <strong>Statistics</strong> table, they will be used instead of estimating, unless the stretch requires a histogram. If the stretch requires a histogram that doesn't exist, it will be estimated.",
	"@@Stretch_Gamma_tag0@@": "Use the slider bar to manually set the <strong>Gamma</strong> value.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Specify the n value for the number of standard deviations to use. This method is used to emphasize how much feature values vary from the mean value; it is best when used on normally distributed data.",
	"@@Stretch_Output-Maximum_tag0@@": "Set the highest pixel value for the histogram.",
	"@@Stretch_Output-Maximum_tag1@@": "The <strong>Output Minimum</strong> and <strong>Output Maximum</strong> will set the range of values that will then be linearly contrast stretched.",
	"@@Stretch_Output-Minimum_tag0@@": "Set the lowest pixel value for the histogram.",
	"@@Stretch_Output-Minimum_tag1@@": "The <strong>Output Minimum</strong> and <strong>Output Maximum</strong> will set the range of values that will then be linearly contrast stretched.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Specify the percentage of the high values to exclude from the stretch.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "Valid values range from 0 to 99.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Specify the percentage of the low values to exclude from the stretch.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "Valid values range from 0 to 99.",
	"@@Stretch_Raster_tag0@@": "The input raster to contrast stretch.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "The <strong>Strength Level</strong> determines how much of the sigmoidal function will be used in the stretch. A low value such as 1 will only use the middle portion of the curve, which tends to produce dull and faint colors. A high value such as 6 will use the entire curve, which tends to produce bold and sharp colors.",
	"@@Stretch_Statistics_tag0@@": "You can enter your own statistics on the dialog box. By default, the statistics are retrieved from the data; however, any values you enter in this parameter will be used instead.",
	"@@Stretch_Type_tag0@@": "Choose the stretch type method:",
	"@@Stretch_Type_tag1@@": "None--No contrast stretch",
	"@@Stretch_Type_tag2@@": "StdDev--Standard deviation stretch",
	"@@Stretch_Type_tag3@@": "MinMax--Minimum-Maximum stretch",
	"@@Stretch_Type_tag4@@": "PercentMinMax--Percent clip stretch",
	"@@Stretch_Type_tag5@@": "Sigmoid--Sigmoid stretch",
	"@@Stretch_Use-Gamma_tag0@@": "Check the <strong>Use Gamma</strong> check box if you want to apply a gamma stretch.",
	"@@Swath_Cellsize_tag0@@": "The cell size for the output raster will be automatically detected; however, you can change this if you want to. The cell size can be changed, but the extent of the raster dataset will remain the same.",
	"@@Swath_Interpolation-Method_tag0@@": "There are four resampling methods for this function:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Nearest Neighbor</strong>--Calculates pixel value using the nearest pixel. If no source pixel exists, no new pixel can be created in the output.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Bilinear</strong>--Calculates pixel value using the distance-weighted value of four nearest pixels.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>Linear Tinning</strong>--Uses a triangulated irregular network from the center points of each cell in the irregular raster to interpolate a surface that is then converted to a regular raster.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Natural Neighbor</strong>--Performs a nearest neighbor assignment, is the fastest of the interpolation methods. It is used primarily for discrete data, such as a land-use classification, since it will not change the values of the cells. The maximum spatial error will be one-half the cell size.",
	"@@Swath_Raster_tag0@@": "The irregularly gridded raster to be resampled.",
	"@@Tan_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Tan_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Tan_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Tan_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Tan_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Tan_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Tan_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Tan_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Tan_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Tan_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Tan_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Tan_Raster_tag0@@": "The input for which to calculate the tangent values.",
	"@@TanH_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@TanH_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@TanH_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@TanH_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@TanH_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@TanH_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@TanH_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@TanH_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@TanH_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@TanH_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@TanH_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@TanH_Raster_tag0@@": "The input for which to calculate the hyperbolic tangent values.",
	"@@Tasseled-Cap_Raster_tag0@@": "The input raster to perform the Tasseled Cap transformation on.",
	"@@Times_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Times_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Times_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Times_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Times_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Times_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Times_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Times_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Times_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Times_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Times_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Times_Raster_tag0@@": "The input containing the values to be multiplied.",
	"@@Times_Raster_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Times_Raster2_tag0@@": "The input containing the values by which the first input will be multiplied.",
	"@@Times_Raster2_tag1@@": "A constant value can be used as an input for this parameter, provided a raster is specified for the other parameter.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Choose the type of transpose to perform or specify a custom one:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8 Cirrus",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8 Cloud",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8 Cloud Shadow",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8 Designated Fill",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8 Dropped Frame",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8 Snow/Ice",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8 Terrain Occlusion",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8 Vegetation",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8 Water",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "User Defined",
	"@@Transpose-Bits_Constant-Value_tag0@@": "An optional value that will be used to fill in all bits that are not involved in the transpose. This parameter is exposed when the <strong>Generate Fill Raster from Constant</strong> parameter is set to <strong>Yes</strong>.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Specify a raster dataset to be used to fill in all bits that are not involved in the transpose. This parameter is exposed when the <strong>Generate Fill Raster from Constant</strong> parameter is set to <strong>No</strong>.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Generate a fill raster using a constant value:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Yes</strong>--A raster will be generated using a constant value to fill in the bits not involved in the transpose. This is the default.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>No</strong>--A raster will be generated using pixel values from an existing raster dataset to fill in the bits not involved in the transpose.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "A read-only table that shows the output bits and the inputs that will be in their place.",
	"@@Transpose-Bits_Raster_tag0@@": "The input raster to unpack and remap.",
	"@@Unit-Conversion_From-Unit_tag0@@": "The original unit type of the pixels.",
	"@@Unit-Conversion_Raster_tag0@@": "The input raster that will contain the converted units.",
	"@@Unit-Conversion_To-Unit_tag0@@": "The converted unit type of the pixels.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Specifies how the direction component was measured.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Geographic--0° points due north, and 90° points due east",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Arithmetic--0° points due east, and 90° points due north",
	"@@Vector-Field_Input-Data-Type_tag0@@": "The type of vector field your inputs represent.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Unknown--It is unknown whether the inputs represent U-V or Magnitude-Direction.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V--Input data represents U and V components.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Magnitude-Direction--Input data represents magnitude and direction.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Specifies the type of vector field your output will represent.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Magnitude-Direction--Output data represents magnitude and direction.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V--Output data represents U and V components.",
	"@@Vector-Field_Raster1_tag0@@": "The first input raster.",
	"@@Vector-Field_Raster1_tag1@@": "This will either be the U value or the magnitude.",
	"@@Vector-Field_Raster2_tag0@@": "The second input raster.",
	"@@Vector-Field_Raster2_tag1@@": "This will either be the V value or the direction.",
	"@@Viewshed_Analysis-Method_tag0@@": "Choose the method by which the visibility will be calculated. This option allows you to trade some accuracy for increased performance.",
	"@@Viewshed_Analysis-Method_tag1@@": "All Sightlines--A sightline is performed on every pixel in the raster in order to establish visible areas. This is the default method.",
	"@@Viewshed_Analysis-Method_tag2@@": "Perimeter Sightlines--Sightlines are only performed to the pixels on the perimeter of the visible areas in order to establish visibility areas. This method has a better performance than the <strong>All Sightlines</strong> method since less sightlines are in the calculation.",
	"@@Viewshed_Analysis-Type_tag0@@": "Choose which type of visibility analysis you wish to perform, either determining how visible each cell is to the observers, or identifying for each surface location which observers are visible.",
	"@@Viewshed_Analysis-Type_tag1@@": "Frequency--The number of times that each pixel location in the input surface raster can be seen by the input observation locations (as points or as vertices for polyline observer features). This is the default.",
	"@@Viewshed_Analysis-Type_tag2@@": "Observers--The output identifies exactly which observer points are visible from each raster surface location. The allowed maximum number of input observers is 32 with this analysis type.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "This value defines the end angle of the horizontal scan range. The value should be specified in degrees from 0 to 360.0, where 0 is oriented to north. The default value is 360.0.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "It can be a field in the input <strong>Observer Features</strong> dataset or a numerical value. If this parameter is set to a value, that value will be applied to all the observers. To specify different values for each observer, set this parameter to a field in the <strong>Observer Features</strong> dataset.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "This value defines the start angle of the horizontal scan range. The value should be specified in degrees from 0 to 360.0, where 0 is oriented to north. The default value is 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "It can be a field in the input <strong>Observer Features</strong> dataset or a numerical value. If this parameter is set to a value, that value will be applied to all the observers. To specify different values for each observer, set this parameter to a field in the <strong>Observer Features</strong> dataset.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "Type of distance for the inner radius parameter.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Unchecked--<strong>Inner Radius</strong> is to be interpreted as a 2D distance. This is the default.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Checked--<strong>Inner Radius</strong> is to be interpreted as a 3D distance.",
	"@@Viewshed_Inner-Radius_tag0@@": "This value defines the start (minimum) distance from which visibility is determined. Pixels closer than this distance are considered not visible in the output but can still block visibility of the pixels between the <strong>Inner Radius</strong> and the <strong>Outer Radius</strong>. The default value is 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "It can be a field in the input <strong>Observer Features</strong> dataset or a numerical value. If this parameter is set to a value, that value will be applied to all the observers. To specify different values for each observer, set this parameter to a field in the <strong>Observer Features</strong> dataset.",
	"@@Viewshed_Observer-Elevation_tag0@@": "This value is used to define the surface elevations of the observer points or vertices.",
	"@@Viewshed_Observer-Elevation_tag1@@": "It can be a field in the input <strong>Observer Features</strong> dataset or a numerical value. If this parameter is not specified, the observer elevation will be obtained from the surface raster using bilinear interpolation. If this parameter is set to a value, then that value will be applied to all the observers. To specify different values for each observer, set this parameter to a field in the <strong>Observer Features</strong> dataset.",
	"@@Viewshed_Observer-Features_tag0@@": "The required input feature class that identifies the observer locations. It can be point, multipoint, or polyline features.",
	"@@Viewshed_Observer-Features_tag1@@": "The input feature class is transformed into a 3D geocentric coordinate system during the visibility calculation. Observers outside of the extent of the surface raster, or located on NoData cells, will be ignored in the calculation.",
	"@@Viewshed_Observer-Offset_tag0@@": "This value indicates a vertical distance (in surface units) to be added to observer elevation. It should be a positive integer or floating-point value.",
	"@@Viewshed_Observer-Offset_tag1@@": "It can be a field in the input <strong>Observer Features</strong> dataset or a numerical value. If this parameter is set to a value, that value will be applied to all the observers. To specify different values for each observer, set this parameter to a field in the <strong>Observer Features</strong> dataset.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Type of distance for the outer radius parameter.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Unchecked--<strong>Outer Radius</strong> is to be interpreted as a 2D distance. This is the default.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Checked--<strong>Outer Radius</strong> is to be interpreted as a 3D distance.",
	"@@Viewshed_Outer-Radius_tag0@@": "This value defines the maximum distance from which visibility is determined. Pixels beyond this distance are excluded from the analysis.",
	"@@Viewshed_Outer-Radius_tag1@@": "It can be a field in the input <strong>Observer Features</strong> dataset or a numerical value. If this parameter is set to a value, that value will be applied to all the observers. To specify different values for each observer, set this parameter to a field in the <strong>Observer Features</strong> dataset.",
	"@@Viewshed_Raster_tag0@@": "The required input surface raster. It can be an integer or a floating-point raster.",
	"@@Viewshed_Raster_tag1@@": "The input is transformed into a 3D geocentric coordinate system during the visibility calculation. NoData cells on the input raster do not block the visibility determination.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Coefficient of the refraction of visible light in air.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "The default value is 0.13.",
	"@@Viewshed_Surface-Offset_tag0@@": "This value indicates a vertical distance (in surface units) to be added to the z-value of each target pixel as it is considered for visibility. It should be a positive integer or floating-point value.",
	"@@Viewshed_Surface-Offset_tag1@@": "It can be a field in the input <strong>Observer Features</strong> dataset or a numerical value. If this parameter is set to a value, that value will be applied to all the observers. To specify different values for each observer, set this parameter to a field in the <strong>Observer Features</strong> dataset.",
	"@@Viewshed_Vertical-Error_tag0@@": "The amount of uncertainty, measured as Root Mean Square error (RMSE), in the surface elevation values. It is a floating-point value representing the expected error of the input elevation values. When this parameter is assigned a value greater than 0, the output visibility raster will be floating point. In this case, each pixel value on the output visibility raster represents the sum of probabilities that the cell is visible to any of the observers.",
	"@@Viewshed_Vertical-Error_tag1@@": "When the <strong>Analysis Type</strong> is <strong>Observers</strong> or the <strong>Analysis Method</strong> is <strong>Perimeter Sightlines</strong>, this parameter is disabled.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "This value defines the lower vertical angle limit of the scan below a horizontal plane. The value should be specified in degrees from -90.0 to 0, which can be integer or floating point. The default value is -90.0.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "It can be a field in the input <strong>Observer Features</strong> dataset or a numerical value. If this parameter is set to a value, that value will be applied to all the observers. To specify different values for each observer, set this parameter to a field in the <strong>Observer Features</strong> dataset.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "This value defines the upper vertical angle limit of the scan above a horizontal plane. The value should be specified in degrees from 0 to 90.0, which can be integer or floating point. The default value is 90.0.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "It can be a field in the input <strong>Observer Features</strong> dataset or a numerical value. If this parameter is set to a value, that value will be applied to all the observers. To specify different values for each observer, set this parameter to a field in the <strong>Observer Features</strong> dataset.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "The input raster that shows the direction of flow out of each cell.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "The flow direction raster can be created by running the <strong>Flow Direction</strong> function.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "The input pour point locations.",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "This raster represents cells above which the contributing area, or catchment, will be determined. All cells that are not NoData will be used as source cells.",
	"@@Watershed_Pour-Point-Field_tag0@@": "Field used to assign values to the pour point locations.",
	"@@Watershed_Pour-Point-Field_tag1@@": "For a raster pour point dataset, ${Value} is used by default.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Weighted-Overlay_Scales_tag0@@": "The range for the new values by which to remap the old values.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "The weighted overlay table consists of four parts:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Layer--All input rasters must be of type integer.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Influence--Each input raster is weighted according to its importance, or its influence, as a relative percentage. The sum of the percent influence weights must equal 100, and each weight must be specified by integer values.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Field--An integer or string field on the input raster to use for weighting.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Remap Table--Each value in an input raster is assigned a new scale value based on the remap table. The scale value can be a valid value or a NoData value.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "The weighted sum table is defined by three properties:",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Layer--The raster being weighted.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Field--The field of the raster to use for weighting.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Weight--The weight value by which to multiply the raster. It can be any positive or negative decimal value.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "A single-band raster where pixel values represent ambient air temperature.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "The unit of measurement associated with the input temperature raster. Available input units are Celsius, Fahrenheit, and Kelvin.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "The unit of measurement associated with the output raster. Available output units are Celsius, Fahrenheit, and Kelvin.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "A single-band raster where pixel values represent wind speed.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Defines the unit of measurement for the wind-speed raster:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Miles Per Hour (mph)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Kilometers Per Hour (km/h)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Meters Per Second (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Feet Per Second (ft/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Knots (kn)",
	"@@Zonal-Remap_Background-Value_tag0@@": "The initial pixel value of the output raster, before input pixels are remapped.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "The value that will be assigned to a pixel that does not satisfy any of the conditions set in the <strong>Zonal Attributes Table</strong>.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "This will also be the value of the output pixel if either the <strong>Output Value Field Name</strong> parameter is left unspecified or the output value of the corresponding zonal threshold is left unspecified in the <strong>Zonal Attributes Table</strong>.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "The field name containing the maximum value below which an input pixel is remapped.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "If left unspecified, or if the field value is null, pixel values are not tested for maximum.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "The field name containing the minimum value above which an input pixel is remapped.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "If left unspecified, or if the field value is null, pixel values are not tested for minimum.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "The field name containing the target value to which an input pixel is remapped.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "If left unspecified, or if the field value is null, remapped pixel values are set to <strong>Default Output Value</strong>.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "A required single-band raster input containing pixel values to remap.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "An optional query applied on the <strong>Zonal Attributes Table</strong>.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "If you were using the table above as an example, the query would be ${Variable1 = 'bare earth' AND Variable2 = 'California'}.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "A required input table containing at least three fields. It must have a minimum threshold value, maximum threshold value, and target value. The target value is the field that will contain the remapped value.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "The format of the file can be a feature class, feature service, or any table type that ArcGIS supports.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "The field name in the <strong>Zonal Attributes Table</strong> that contains the zone ID values.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "The zone ID values are directly tied to the zone IDs in your zonal raster. They provide another level of filtering while remapping. If there is no zone ID associated with a particular record in the table, it will not participate in the remapping.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "A single-band raster where each pixel defines zones associated with a particular location. A zone is defined as all areas in the input that have the same value. The areas do not have to be contiguous.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Specifies the method used to provide prediction dimension values.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>By Value</strong>--The prediction will be calculated for a single dimension value . For example, you want to predict yearly precipitation for the years 2050, 2100, and 2150. This is the default.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>By Interval</strong>--The prediction will be calculated for an interval of the dimension defined by a start and an end value. For example, you want to predict yearly precipitation for every year between 2050 and 2150.",
	"@@Predict-Using-Trend_end_tag0@@": "The end date, height, or depth of the dimension interval to be used in the prediction.",
	"@@Predict-Using-Trend_end_tag1@@": "This parameter is required when the <strong>Dimension Definition</strong> parameter is set to <strong>By Interval</strong>.",
	"@@Predict-Using-Trend_raster_tag0@@": "The input multidimensional trend raster from the <strong>Generate Trend</strong> function.",
	"@@Predict-Using-Trend_start_tag0@@": "The start date, height, or depth of the dimension interval to be used in the prediction.",
	"@@Predict-Using-Trend_start_tag1@@": "This parameter is required when the <strong>Dimension Definition</strong> parameter is set to <strong>By Interval</strong>.",
	"@@Predict-Using-Trend_unit_tag0@@": "The unit that will be used for the value interval. This parameter only applies when the dimension of analysis is a time dimension.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Hours</strong>--The prediction will be calculated for each hour in the range of time described by the <strong>Start</strong>, <strong>End</strong>, and <strong>Value Interval</strong> parameters.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Days</strong>--The prediction will be calculated for each day in the range of time described by the <strong>Start</strong>, <strong>End</strong>, and <strong>Value Interval</strong> parameters.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Weeks</strong>--The prediction will be calculated for each week in the range of time described by the <strong>Start</strong>, <strong>End</strong>, and <strong>Value Interval</strong> parameters.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Months</strong>--The prediction will be calculated for each month in the range of time described by the <strong>Start</strong>, <strong>End</strong>, and <strong>Value Interval</strong> parameters.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Years</strong>--The prediction will be calculated for each year in the range of time described by the <strong>Start</strong>, <strong>End</strong>, and <strong>Value Interval</strong> parameters.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "The number of steps between two dimension values to be included in the prediction. The default value is 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "This parameter is required when the <strong>Dimension Definition</strong> parameter is set to <strong>By Interval</strong>.",
	"@@Predict-Using-Trend_values_tag0@@": "The dimension value or values to be used in the prediction.",
	"@@Predict-Using-Trend_values_tag1@@": "The format of the time, depth, and height values must match the format of the dimension values used to generate the trend raster. If the trend raster was generated for the StdTime dimension, the format should be YYYY-MM-DDTHH:MM:SS, for example, 2050-01-01T00:00:00. Multiple values are separated with a semicolon.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Specify the raster function template used to aggregate multiple slices into fewer slices or a single slice.",
	"@@Process-Raster-Collection_dimension_tag0@@": "The aggregation dimension. This is the dimension along which the variables will be aggregated.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Specify the raster function template used to process each slice or item in the input raster collection.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Specifies the keyword interval that will be used when aggregating along the dimension. This parameter is required when the <strong>Type</strong> is set to <strong>Interval Keyword</strong>, and the aggregation must be across time.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>Hourly</strong>--The data values will be aggregated into hourly time steps, and the result will include every hour in the time series.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Daily</strong>--The data values will be aggregated into daily time steps, and the result will include every day in the time series.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Weekly</strong>--The data values will be aggregated into weekly time steps, and the result will include every week in the time series.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>Dekadly</strong>--The data values will be aggregated into 3 periods of 10 days each. The last period might contain more or fewer than 10 days. The output will include 3 slices for each month.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>Pentadly</strong>--The data values will be aggregated into 6 periods of 5 days each. The last period might contain more or fewer than 5 days. The output will include 6 slices for each month.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Monthly</strong>--The data values will be aggregated into monthly time steps, and the result will include every month in the time series.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Quarterly</strong>--The data values will be aggregated into quarterly time steps, and the result will include every quarter in the time series.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Yearly</strong>--The data values will be aggregated into yearly time steps, and the result will include every year in the time series.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Recurring daily</strong>--The data values will be aggregated into daily time steps, and the result will include one aggregated value per Julian day. The output will include, at most, 366 daily time slices.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Recurring weekly</strong>--The data values will be aggregated into weekly time steps, and the result will include one aggregated value per week. The output will include, at most, 53 weekly time slices.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Recurring monthly</strong>--The data values will be aggregated into monthly time steps, and the result will include one aggregated value per month. The output will include, at most, 12 monthly time slices.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Recurring quarterly</strong>--The data values will be aggregated into quarterly time steps, and the result will include one aggregated value per quarter. The output will include, at most, 4 quarterly time slices.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "The maximum value for a range.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "This parameter is required when the <strong>Type</strong> parameter is set to <strong>Interval Ranges</strong>.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "The minimum value for a range.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "This parameter is required when the <strong>Type</strong> parameter is set to <strong>Interval Ranges</strong>.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Specify the raster function template used to display the processed raster layer.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "The input multidimensional raster, mosaic layer, or mosaic dataset.",
	"@@Process-Raster-Collection_type_tag0@@": "Specifies the dimension interval for which the data will be aggregated.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>All</strong>--The data values will be aggregated across all slices. This is the default.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Interval Keyword</strong>--The variable data will be aggregated using a commonly known interval.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Interval Ranges</strong>--The variable data will be aggregated between specified pairs of values or dates.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Interval Values</strong>--The variable data will be aggregated using a user-specified interval and unit.",
	"@@Process-Raster-Collection_unit_tag0@@": "The unit that will be used for the interval value. This parameter is required when the <strong>Dimension</strong> is a time field and the <strong>Type</strong> parameter is set to <strong>Interval Value</strong>.",
	"@@Process-Raster-Collection_unit_tag1@@": "If you are aggregating over anything other than time, this option will not be available and the unit for the interval value will match the variable unit of the input multidimensional raster data.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Hours</strong>--The data values will be aggregated into hourly time slices at the interval provided.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Days</strong>--The data values will be aggregated into daily time slices at the interval provided.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Weeks</strong>--The data values will be aggregated into weekly time slices at the interval provided.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Months</strong>--The data values will be aggregated into monthly time slices at the interval provided.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Years</strong>--The data values will be aggregated into yearly time slices at the interval provided.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "The size of the interval that will be used for the aggregation. This parameter is required when the <strong>Type</strong> parameter is set to <strong>Interval Value</strong>.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "For example, to aggregate 30 years of monthly temperature data into 5-year increments, enter 5 as the <strong>Value Interval</strong>, and specify <strong>Unit</strong> as <strong>Years</strong>.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Specifies the options to define the output pixel values.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Checked--There will be no negative output values.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Unchecked--There can be negative values of fractional land cover.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "The input raster.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "The input spectral profile file.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "The spectral information for the different land cover classes.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Spectral Profile</strong>--A classifier definition file (${.ecd}), generated from the <strong><strong>Train Maximum Likelihood Classifier</strong></strong> tool, or a JavaScript Object Notation file (${.json}) that contains the class spectral profiles.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Training Feature</strong>--Polygon features or a training sample feature class, generated from the <strong>Training Samples Manager</strong>.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Specifies the options to define the output pixel values.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Checked--Class values for each pixel are provided in decimal format with the sum of all classes equal to 1. For example, Class1 = 0.16; Class2 = 0.24; Class3 = 0.60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Unchecked--The sum of all classes in a pixel can exceed 1.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "The input training feature file.",
	"@@Aggregate_aggregationtechnique_tag0@@": "The method used for aggregation. The values of the input cells encompassed by the coarser output cells are aggregated by one of the following statistics:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Sum</strong>--The total of the input cells. This is the default.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Maximum</strong>--The largest value of the input cells.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Mean</strong>--The average value of the input cells.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Median</strong>--The median value of the input cells.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Minimum</strong>--The smallest value of the input cells.",
	"@@Aggregate_cellfactor_tag0@@": "The factor by which to multiply the cell size of the input raster.",
	"@@Aggregate_cellfactor_tag1@@": "For example, a cell factor value of three would result in an output cell size three times larger than that of the input raster.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Defines how to handle the boundaries of the input raster when its rows or columns are not a multiple of the cell factor.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Checked--Expands the top or right boundaries of the input raster so the total number of cells in a row or column is a multiple of the cell factor. With this option, the output raster can cover a larger spatial extent than the input raster. This is the default.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Unchecked--Reduces the number of rows or columns in the output raster. This truncates the remaining cells on the top or right boundaries of the input raster, making the number of rows or columns in the input raster a multiple of the cell factor. With this option, the output raster can cover a smaller spatial extent than the input raster.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Denotes whether ${NoData} values are ignored by the aggregation calculation.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Checked--Specifies that if ${NoData} values exist for any of the cells that fall within the spatial extent of a larger cell on the output raster, the ${NoData} values will be ignored when determining the value for output cell locations. Only input cells within the extent of the output cell that have data values will be used in determining the value of the output cell. This is the default.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Unchecked--Specifies that if any cell that falls within the spatial extent of a larger cell on the output raster has a value of ${NoData}, the value for that output cell location will be ${NoData}. When the this option is used, it is implied that when cells within an aggregation contain the ${NoData} value, there is insufficient information to perform the specified calculations necessary to determine an output value.",
	"@@Aggregate_raster_tag0@@": "The input raster to be aggregated.",
	"@@Expand_numberofcells_tag0@@": "The number of cells to expand by.",
	"@@Expand_numberofcells_tag1@@": "The value must be integer, and can be 1 or greater.",
	"@@Expand_raster_tag0@@": "The input raster for which the identified zones are to be expanded.",
	"@@Expand_raster_tag1@@": "It must be of integer type.",
	"@@Expand_zonevalues_tag0@@": "The list of zones to expand.",
	"@@Expand_zonevalues_tag1@@": "The zone values must be integer, and they can be in any order.",
	"@@Expand_zonevalues_tag2@@": "To specify multiple zones, use a space to separate the zone values.",
	"@@Multidimensional-Filter_dimension_tag0@@": "The dimension to extract variables from.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Specifies the method that will be used to slice the dimension.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>All</strong>--The full range for each dimension will be used. This is the default.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>By Values</strong>--The dimension will be sliced using a dimension value or list of values.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>By Ranges</strong>--The dimension will be sliced using a range or a list of ranges.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>By Iteration</strong>--The dimension will be sliced over a specified interval size.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "The end of the first interval. This interval is used to iterate through the dataset.This parameter is required when the <strong>Dimension Definition</strong> parameter is set to <strong>By Iteration</strong>.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "The maximum value for the range. This parameter is required when the <strong>Dimension Definition</strong> parameter is set to <strong>By Ranges</strong>.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "The minimum value for the range. This parameter is required when the <strong>Dimension Definition</strong> parameter is set to <strong>By Ranges</strong>.",
	"@@Multidimensional-Filter_raster_tag0@@": "The input multidimensional raster.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>Interval ranges specified in a table are used to aggregate groups of values. The minimum and maximum values specify the range to be included.</p><p>This parameter is required when the<strong>Type</strong>parameter is set to<strong>Interval Ranges</strong>.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "The beginning of the first interval. This interval is used to iterate through the dataset.This parameter is required when the <strong>Dimension Definition</strong> parameter is set to <strong>By Iteration</strong>.",
	"@@Multidimensional-Filter_step_tag0@@": "The frequency with which the data will be sliced.This parameter is required when the <strong>Dimension Definition</strong> parameter is set to <strong>By Iteration</strong>. The default is 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Specifies the iteration unit. This parameter is required when the <strong>Dimension Definition</strong> parameter is set to <strong>By Iteration</strong> and the <strong>Dimension</strong> parameter is set to <strong>StdTime</strong>.",
	"@@Multidimensional-Filter_value_tag0@@": "The value for the specified dimension. This parameter is required when the <strong>Dimension Definition</strong> parameter is set to <strong>By Values</strong>.",
	"@@Multidimensional-Filter_variables_tag0@@": "The variables that will be included in the output multidimensional raster layer. If no variable is specified, the first variable will be used.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Specifies whether the layer should have dimension values. This option is only available if a single slice is selected to create a layer.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Checked--The layer will not have dimension values.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Unchecked--The layer will have a dimension value. This is the default.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "The cell size of the interpolated raster. The default value is ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "The resampling method used to interpolate irregular data.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>Nearest Neighbor</strong>--Calculates the output pixel value using the nearest input pixel. If no source pixel exists, no new pixel can be created in the output. This is the default.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>Linear Tinning</strong>--Uses a triangulated irregular network from the center point of each pixel in the irregular raster to interpolate a surface that is then converted to a regular raster.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Natural Neighbor</strong>--Finds the closest subset of input samples to a query point and applies weights to them, based on proportionate areas, to interpolate a value.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Inverse Distance Weighting</strong>--Determines pixel values using a linearly weighted combination of a set of sample points or pixels. The weight is a function of the inverse of the distance from the known points or pixels.",
	"@@Multidimensional-Raster_raster_tag0@@": "The input multidimensional raster.",
	"@@Multidimensional-Raster_variables_tag0@@": "The variable or variables to be included in the multidimensional raster layer.",
	"@@Random_distribution_tag0@@": "Specify the random value distribution method to use.",
	"@@Random_distribution_tag1@@": "<strong>Uniform</strong> (Minimum, Maximum)--A uniform distribution with a defined range. The default values are 0 for Minimum and 1 for Maximum. This is the default.",
	"@@Random_distribution_tag2@@": "<strong>Integer</strong> (Minimum, Maximum)--An integer distribution with a defined range. The default values are 1 for Minimum and 10 for Maximum.",
	"@@Random_distribution_tag3@@": "<strong>Normal</strong> (Mean, Standard Deviation)--A normal distribution with a defined mean and standard deviation. The default values are 0 for Mean and 1 for Standard Deviation.",
	"@@Random_distribution_tag4@@": "<strong>Exponential</strong> (Mean)--An exponential distribution with a defined mean. The default value is 1.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (Mean)--A Poisson distribution with a defined mean. The default value is 1.",
	"@@Random_distribution_tag6@@": "<strong>Gamma</strong> (Alpha, Beta)--A gamma distribution with a defined alpha and beta. The default values are 1 for Alpha and 1 for Beta.",
	"@@Random_distribution_tag7@@": "<strong>Binomial</strong> (N, Probability)--A binomial distribution with a defined N and probability. The default values are 10 for N and 0.5 for Probability.",
	"@@Random_distribution_tag8@@": "<strong>Geometric</strong> (Probability)--A geometric distribution with a defined probability. The default value is 0.5.",
	"@@Random_distribution_tag9@@": "<strong>Negative Binomial</strong> (r, Probability)--A Pascal distribution with a defined r and probability. The default values are 10.0 for r and 0.5 for Probability.",
	"@@Random_randomnumbergenerator_tag0@@": "Specify the random generator algorithm that uses the seed and distribution to produce a sequence of random numbers. The available options are as follows:",
	"@@Random_randomnumbergenerator_tag1@@": "Standard C Rand",
	"@@Random_randomnumbergenerator_tag2@@": "ACM collected algorithm 599",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "The default value is Mersenne Twister.",
	"@@Random_rasterinfo_tag0@@": "Use the <strong>Load template raster</strong> button to load a template from a directory or portal.",
	"@@Random_seed_tag0@@": "The seed is an integer value and is used to initiate the random number generator. The default value is 1.",
	"@@Shrink_numberofcells_tag0@@": "The number of cells by which to shrink each specified zone.",
	"@@Shrink_numberofcells_tag1@@": "The value must be integer, and can be 1 or greater.",
	"@@Shrink_raster_tag0@@": "The input raster for which the identified zones are to be shrunk.",
	"@@Shrink_raster_tag1@@": "It must be of integer type.",
	"@@Shrink_zonevalues_tag0@@": "The list of zones to shrink.",
	"@@Shrink_zonevalues_tag1@@": "The zone values must be integer, and they can be in any order.",
	"@@Shrink_zonevalues_tag2@@": "To specify multiple zones, use a space to separate the zone values.",
	"@@Distance-Accumulation_costraster_tag0@@": "A raster defining the cost or impedance to move planimetrically through each cell. The value at each cell location represents the cost-per-unit distance for moving through it. Each cell location value is multiplied by the cell resolution, and also compensates for diagonal movement to obtain the total cost of passing through the cell.",
	"@@Distance-Accumulation_costraster_tag1@@": "The values of the <strong>Cost Raster</strong> can be integer or floating point, but they cannot be negative or zero.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Determines whether to calculate the distance using a planar (flat earth) or a geodesic (ellipsoid) method.",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Planar--Planar measurements use 2D Cartesian mathematics to calculate length and area. The option is only available when measuring in a projected coordinate system and the 2D plane of that coordinate system will be used as the basis for the measurements.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Geodesic--The shortest line between two points on the earth's surface on a spheroid (ellipsoid). Therefore, regardless of input or output projection, the results do not change.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Note:</strong> one use for a geodesic line is when you want to determine the shortest distance between two cities for an airplane's flight path. This is also known as a great circle line if based on a sphere rather than an ellipsoid.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Determines whether only the distance accumulation raster is created or a multiband raster consisting of both the distance accumulation raster and the back direction raster is created.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Unchecked--The result is the distance accumulation raster. This is a single-band result. This is the default.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Checked--A multiband result is created. The first band is the distance accumulation raster and the second band is the back direction raster.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "The back direction raster calculates, for each cell, the direction, in degrees, to the neighboring cell along the shortest path back to the closest source while avoiding barriers.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Defines the relationship between the horizontal cost factor and the horizontal relative moving angle (HRMA).</p><p>There are several factors with modifiers that identify a defined vertical factor graph. Additionally, a table can be used to create a custom graph. The graphs are used to identify the vertical factor used in calculating the total cost of moving into a neighboring cell.</p><p>In the explanations below, two acronyms are used: HF and HRMA. HF stands for horizontal factor, which defines the horizontal difficulty encountered when moving from one cell to the next. HRMA stands for horizontal relative moving angle, which identifies the angle between the horizontal direction from a cell and the moving direction.</p><p><strong>Horizontal factor</strong>types include the following:</p><ul><li><strong>Binary</strong>--Indicates that if the HRMA is less than the cut angle, the HF is set to the value associated with the zero factor; otherwise, it is infinity.</li><li><strong>Forward</strong>--Establishes that only forward movement is allowed. The HRMA must be greater than or equal to 0 and less than 90 degrees (0 &lt;= HRMA &lt; 90). If the HRMA is greater than 0 and less than 45 degrees, the HF for the cell is set to the value associated with the zero factor. If the HRMA is greater than or equal to 45 degrees, the side value modifier value is used. The HF for any HRMA value equal to or greater than 90 degrees is set to infinity.</li><li><strong>Linear</strong>--Specifies that the HF is a linear function of the HRMA.</li><li><strong>Inverse Linear</strong>--Specifies that the HF is an inverse linear function of the HRMA.</li><li><strong>Table</strong>--Identifies that a table file will be used to define the horizontal factor graph used to determine the HFs.</li></ul><p>Modifiers to the horizontal factors include the following:</p><ul><li><strong>Zero factor</strong>--The horizontal factor to be used when the HRMA is zero. This factor positions the y-intercept for any of the horizontal factor functions.</li><li><strong>Cut angle</strong>--Defines the HRMA angle beyond which the HF will be set to infinity.</li><li><strong>Slope</strong>--Establishes the slope of the straight line used with the<strong>Linear</strong>and<strong>Inverse Linear</strong>horizontal factor keywords. The slope is specified as a fraction of rise over run (for example, 45 percent slope is 1/45, which is input as 0.02222).</li><li><strong>Side value</strong>--Establishes the HF when the HRMA is greater than or equal to 45 degrees and less than 90 degrees when the<strong>Forward</strong>horizontal factor keyword is specified.</li><li><strong>Table name</strong>--Identifies the name of the table defining the HF.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "A raster defining the horizontal direction at each cell.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "The values on the raster must be integers ranging from 0 to 360, with 0 degrees being north, or toward the top of the screen, and increasing clockwise. Flat areas should be given a value of -1. The values at each location will be used in conjunction with the <strong>Horizontal factor</strong> to determine the horizontal cost incurred when moving from a cell to its neighbors.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "The initial accumulative cost to begin the cost calculation. This parameter allows for the specification of the fixed cost associated with a source. Instead of starting at a cost of 0, the cost algorithm will begin with the value specified.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "The value must be zero or greater. The default is 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Defines the maximum accumulative cost for the traveler for a source. The cost calculations continue for each source until the specified capacity is reached.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "A multiplier to apply to the cost values.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "This parameter allows for control of the mode of travel or the magnitude at a source. The greater the multiplier, the greater the cost to move through each cell.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "The values must be greater than zero. The default is 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "The raster that defines the barriers.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "The dataset must contain NoData where there are no barriers. Barriers are represented by valid values including zero.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "The barriers can be defined by an integer or a floating-point raster.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "The input source locations.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "This is a raster dataset that identifies the cells or locations from which the least accumulated cost distance for every output cell location is calculated.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "It can be an integer or a floating-point type.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "A raster defining the elevation values at each cell location.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "The values are used to calculate the actual surface distance covered when passing between cells.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Defines the direction of the traveler when applying vertical factor, horizontal factor and the source resistance rate.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>From Source</strong>--The vertical factor, horizontal factor and source resistance rate will be applied beginning at the input source and moving out to the non-source cells. This is the default.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>To Source</strong>--The vertical factor, horizontal factor and source resistance rate will be applied beginning at each non-source cell and moving back to the input source.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Either specify the <strong>From Source</strong> or <strong>To Source</strong> keyword, which will be applied to all sources, or specify a field in the <strong>Source Raster</strong> that contains the keywords to identify the direction of travel for each source. That field must contain the string ${FROM_SOURCE} or ${TO_SOURCE}.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Defines the relationship between the vertical cost factor and the vertical relative moving angle (VRMA).</p><p>There are several factors with modifiers that identify a defined vertical factor graph. Additionally, a table can be used to create a custom graph. The graphs are used to identify the vertical factor used in calculating the total cost of moving into a neighboring cell.</p><p>In the explanations below, two acronyms are used: VF and VRMA. VF stands for vertical factor, which defines the vertical difficulty encountered in moving from one cell to the next. VRMA stands for vertical relative moving angle, which identifies the slope angle between the FROM, or processing, cell and the TO cell.</p><p><strong>Vertical factor</strong>types include the following:</p><ul><li><strong>Binary</strong>--Specifies that if the VRMA is greater than the low-cut angle and less than the high-cut angle, the VF is set to the value associated with the zero factor; otherwise, it is infinity.</li><li><strong>Linear</strong>--Indicates that the VF is a linear function of the VRMA.</li><li><strong>Symmetric Linear</strong>--Specifies that the VF is a linear function of the VRMA in either the negative or positive side of the VRMA, respectively, and the two linear functions are symmetrical with respect to the VF (y) axis.</li><li><strong>Inverse Linear</strong>--Indicates that the VF is an inverse linear function of the VRMA.</li><li><strong>Symmetric Inverse Linear</strong>--Specifies that the VF is an inverse linear function of the VRMA in either the negative or positive side of the VRMA, respectively, and the two linear functions are symmetrical with respect to the VF (y) axis.</li><li><strong>Cos</strong>--Identifies the VF as the cosine-based function of the VRMA.</li><li><strong>Sec</strong>--Identifies the VF as the secant-based function of the VRMA.</li><li><strong>Cos-Sec</strong>--Specifies that the VF is the cosine-based function of the VRMA when the VRMA is negative and the secant-based function of the VRMA when the VRMA is not negative.</li><li><strong>Sec-Cos</strong>--Specifies that the VF is the secant-based function of the VRMA when the VRMA is negative and the cosine-based function of the VRMA when the VRMA is not negative.</li><li><strong>Table</strong>--Identifies that a table file will be used to define the vertical-factor graph that is used to determine the VFs.</li></ul><p>Modifiers to the vertical keywords include the following:</p><ul><li><strong>Zero factor</strong>--Establishes the vertical factor used when the VRMA is zero. This factor positions the y-intercept of the specified function. By definition, the zero factor is not applicable to any of the trigonometric vertical functions (COS, SEC, COS-SEC, or SEC-COS). The y-intercept is defined by these functions.</li><li><strong>Low Cut angle</strong>--Defines the VRMA angle below which the VF will be set to infinity.</li><li><strong>High Cut angle</strong>--Defines the VRMA angle above which the VF will be set to infinity.</li><li><strong>Slope</strong>--Establishes the slope of the straight line used with the<strong>Linear</strong>and<strong>Inverse Linear</strong>vertical-factor keywords. The slope is specified as a fraction of rise over run (for example, 45 percent slope is 1/45, which is input as 0.02222).</li><li><strong>Table name</strong>--Identifies the name of the table defining the VF.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Defines the relationship between the vertical cost factor and the vertical relative moving angle (VRMA).",
	"@@Distance-Accumulation_verticalraster_tag1@@": "The values are used for calculating the slope used to identify the vertical factor incurred when moving from one cell to another.",
	"@@Distance-Allocation_costraster_tag0@@": "A raster defining the cost or impedance to move planimetrically through each cell. The value at each cell location represents the cost-per-unit distance for moving through it. Each cell location value is multiplied by the cell resolution, and also compensates for diagonal movement to obtain the total cost of passing through the cell.",
	"@@Distance-Allocation_costraster_tag1@@": "The values of the <strong>Cost Raster</strong> can be integer or floating point, but they cannot be negative or zero.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Determines whether to calculate the distance using a planar (flat earth) or a geodesic (ellipsoid) method.",
	"@@Distance-Allocation_distancemethod_tag1@@": "Planar--Planar measurements use 2D Cartesian mathematics to calculate length and area. The option is only available when measuring in a projected coordinate system and the 2D plane of that coordinate system will be used as the basis for the measurements.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Geodesic--The shortest line between two points on the earth's surface on a spheroid (ellipsoid). Therefore, regardless of input or output projection, the results do not change.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Note:</strong> one use for a geodesic line is when you want to determine the shortest distance between two cities for an airplane's flight path. This is also known as a great circle line if based on a sphere rather than an ellipsoid.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Defines the relationship between the horizontal cost factor and the horizontal relative moving angle (HRMA).</p><p>There are several factors with modifiers that identify a defined vertical factor graph. Additionally, a table can be used to create a custom graph. The graphs are used to identify the vertical factor used in calculating the total cost of moving into a neighboring cell.</p><p>In the explanations below, two acronyms are used: HF and HRMA. HF stands for horizontal factor, which defines the horizontal difficulty encountered when moving from one cell to the next. HRMA stands for horizontal relative moving angle, which identifies the angle between the horizontal direction from a cell and the moving direction.</p><p><strong>Horizontal factor</strong>types include the following:</p><ul><li><strong>Binary</strong>--Indicates that if the HRMA is less than the cut angle, the HF is set to the value associated with the zero factor; otherwise, it is infinity.</li><li><strong>Forward</strong>--Establishes that only forward movement is allowed. The HRMA must be greater than or equal to 0 and less than 90 degrees (0 &lt;= HRMA &lt; 90). If the HRMA is greater than 0 and less than 45 degrees, the HF for the cell is set to the value associated with the zero factor. If the HRMA is greater than or equal to 45 degrees, the side value modifier value is used. The HF for any HRMA value equal to or greater than 90 degrees is set to infinity.</li><li><strong>Linear</strong>--Specifies that the HF is a linear function of the HRMA.</li><li><strong>Inverse Linear</strong>--Specifies that the HF is an inverse linear function of the HRMA.</li><li><strong>Table</strong>--Identifies that a table file will be used to define the horizontal factor graph used to determine the HFs.</li></ul><p>Modifiers to the horizontal factors include the following:</p><ul><li><strong>Zero factor</strong>--The horizontal factor to be used when the HRMA is zero. This factor positions the y-intercept for any of the horizontal factor functions.</li><li><strong>Cut angle</strong>--Defines the HRMA angle beyond which the HF will be set to infinity.</li><li><strong>Slope</strong>--Establishes the slope of the straight line used with the<strong>Linear</strong>and<strong>Inverse Linear</strong>horizontal factor keywords. The slope is specified as a fraction of rise over run (for example, 45 percent slope is 1/45, which is input as 0.02222).</li><li><strong>Side value</strong>--Establishes the HF when the HRMA is greater than or equal to 45 degrees and less than 90 degrees when the<strong>Forward</strong>horizontal factor keyword is specified.</li><li><strong>Table name</strong>--Identifies the name of the table defining the HF.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "A raster defining the horizontal direction at each cell.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "The values on the raster must be integers ranging from 0 to 360, with 0 degrees being north, or toward the top of the screen, and increasing clockwise. Flat areas should be given a value of -1. The values at each location will be used in conjunction with the <strong>Horizontal factor</strong> to determine the horizontal cost incurred when moving from a cell to its neighbors.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "The initial accumulative cost to begin the cost calculation. This parameter allows for the specification of the fixed cost associated with a source. Instead of starting at a cost of 0, the cost algorithm will begin with the value specified.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "The value must be zero or greater. The default is 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Defines the maximum accumulative cost for the traveler for a source. The cost calculations continue for each source until the specified capacity is reached.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "The value must be greater than zero. The default capacity is to the edge of the output raster.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "A multiplier to apply to the cost values.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "This parameter allows for control of the mode of travel or the magnitude at a source. The greater the multiplier, the greater the cost to move through each cell.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "The values must be greater than zero. The default is 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "A numeric (double) value or a field from the <strong>Source Raster</strong> can be used for this parameter.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "The raster that defines the barriers.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "The dataset must contain NoData where there are no barriers. Barriers are represented by valid values including zero.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "The barriers can be defined by an integer or a floating-point raster.",
	"@@Distance-Allocation_sourcefield_tag0@@": "The field used to assign values to the source locations. It must be an integer type.",
	"@@Distance-Allocation_sourceraster_tag0@@": "The input source locations.",
	"@@Distance-Allocation_sourceraster_tag1@@": "This is a raster dataset that identifies the cells or locations from which the least accumulated cost distance for every output cell location is calculated.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Determines whether only the allocation raster is created or if a multiband result is created.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Unchecked--The result is the distance allocation raster. This is a single-band result. This is the default.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Checked--A multiband raster is created. The first band is the distance allocation raster, the second band contains a row index and the third band contains a column index. These indices identify the location of the source cell that is the least accumulated cost distance away.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "A raster defining the elevation values at each cell location.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "The values are used to calculate the actual surface distance covered when passing between cells.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Defines the direction of the traveler when applying vertical factor, horizontal factor and the source resistance rate.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>From Source</strong>--The vertical factor, horizontal factor and source resistance rate will be applied beginning at the input source and moving out to the non-source cells. This is the default.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>To Source</strong>--The vertical factor, horizontal factor and source resistance rate will be applied beginning at each non-source cell and moving back to the input source.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Either specify the <strong>From Source</strong> or <strong>To Source</strong> keyword, which will be applied to all sources, or specify a field in the <strong>Source Raster</strong> that contains the keywords to identify the direction of travel for each source. That field must contain the string ${FROM_SOURCE} or ${TO_SOURCE}.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Defines the relationship between the vertical cost factor and the vertical relative moving angle (VRMA).</p><p>There are several factors with modifiers that identify a defined vertical factor graph. Additionally, a table can be used to create a custom graph. The graphs are used to identify the vertical factor used in calculating the total cost of moving into a neighboring cell.</p><p>In the explanations below, two acronyms are used: VF and VRMA. VF stands for vertical factor, which defines the vertical difficulty encountered in moving from one cell to the next. VRMA stands for vertical relative moving angle, which identifies the slope angle between the FROM, or processing, cell and the TO cell.</p><p><strong>Vertical factor</strong>types include the following:</p><ul><li><strong>Binary</strong>--Specifies that if the VRMA is greater than the low-cut angle and less than the high-cut angle, the VF is set to the value associated with the zero factor; otherwise, it is infinity.</li><li><strong>Linear</strong>--Indicates that the VF is a linear function of the VRMA.</li><li><strong>Symmetric Linear</strong>--Specifies that the VF is a linear function of the VRMA in either the negative or positive side of the VRMA, respectively, and the two linear functions are symmetrical with respect to the VF (y) axis.</li><li><strong>Inverse Linear</strong>--Indicates that the VF is an inverse linear function of the VRMA.</li><li><strong>Symmetric Inverse Linear</strong>--Specifies that the VF is an inverse linear function of the VRMA in either the negative or positive side of the VRMA, respectively, and the two linear functions are symmetrical with respect to the VF (y) axis.</li><li><strong>Cos</strong>--Identifies the VF as the cosine-based function of the VRMA.</li><li><strong>Sec</strong>--Identifies the VF as the secant-based function of the VRMA.</li><li><strong>Cos-Sec</strong>--Specifies that the VF is the cosine-based function of the VRMA when the VRMA is negative and the secant-based function of the VRMA when the VRMA is not negative.</li><li><strong>Sec-Cos</strong>--Specifies that the VF is the secant-based function of the VRMA when the VRMA is negative and the cosine-based function of the VRMA when the VRMA is not negative.</li><li><strong>Table</strong>--Identifies that a table file will be used to define the vertical-factor graph that is used to determine the VFs.</li></ul><p>Modifiers to the vertical keywords include the following:</p><ul><li><strong>Zero factor</strong>--Establishes the vertical factor used when the VRMA is zero. This factor positions the y-intercept of the specified function. By definition, the zero factor is not applicable to any of the trigonometric vertical functions (COS, SEC, COS-SEC, or SEC-COS). The y-intercept is defined by these functions.</li><li><strong>Low Cut angle</strong>--Defines the VRMA angle below which the VF will be set to infinity.</li><li><strong>High Cut angle</strong>--Defines the VRMA angle above which the VF will be set to infinity.</li><li><strong>Slope</strong>--Establishes the slope of the straight line used with the<strong>Linear</strong>and<strong>Inverse Linear</strong>vertical-factor keywords. The slope is specified as a fraction of rise over run (for example, 45 percent slope is 1/45, which is input as 0.02222).</li><li><strong>Table name</strong>--Identifies the name of the table defining the VF.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Defines the relationship between the vertical cost factor and the vertical relative moving angle (VRMA).",
	"@@Distance-Allocation_verticalraster_tag1@@": "The values are used for calculating the slope used to identify the vertical factor incurred when moving from one cell to another.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "The cell size at which the output raster will be created.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "If the cell size was explicitly set in <strong>Environments</strong>, that will be the default cell size. If it was not set, the output cell size will be the same as the <strong>Source Raster</strong>.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Determines whether to calculate the distance using a planar (flat earth) or a geodesic (ellipsoid) method.",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Planar--Planar measurements use 2D Cartesian mathematics to calculate length and area. The option is only available when measuring in a projected coordinate system and the 2D plane of that coordinate system will be used as the basis for the measurements.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Geodesic--The shortest line between two points on the earth's surface on a spheroid (ellipsoid). Therefore, regardless of input or output projection, the results do not change.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Note:</strong> one use for a geodesic line is when you want to determine the shortest distance between two cities for an airplane's flight path. This is also known as a great circle line if based on a sphere rather than an ellipsoid.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Defines the threshold distance within which the direction to the closest source will be calculated. If the distance to the nearest source exceeds this, the output for that cell will be NoData.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "The default distance is to the extent of the output raster.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "The raster that defines the barriers.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "The dataset must contain NoData where there are no barriers. Barriers are represented by valid values including zero.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "The barriers can be defined by an integer or a floating-point raster.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "A raster dataset that identifies the cells or locations to which the Euclidean direction for every output cell location is calculated.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "The input type can be an integer or a floating-point type.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "The name of a cost backlink raster layer used to determine the path to return to a source via the least-cost path.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "For each cell in the backlink raster, a value identifies the neighbor that's the next cell on the least accumulative cost path from the cell to a single source cell or set of source cells.",
	"@@Cost-Path_costdistanceraster_tag0@@": "The name of a cost distance raster to be used to determine the least-cost path from the destination locations to a source.",
	"@@Cost-Path_costdistanceraster_tag1@@": "The cost distance raster is usually created with the Cost Distance, Cost Allocation, or Cost Back Link function. The cost distance raster layer stores, for each cell, the minimum accumulative cost distance over a cost surface from each cell to a set of source cells.",
	"@@Cost-Path_destinationfield_tag0@@": "The field used to obtain values for the destination locations. Input feature data must contain at least one valid field.",
	"@@Cost-Path_destinationraster_tag0@@": "A raster dataset layer that identifies those cells from which the least-cost path is determined to the least costly source.",
	"@@Cost-Path_destinationraster_tag1@@": "The input raster layer consists of cells that have valid values (zero is a valid value), and the remaining cells must be assigned NoData.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Forces the function to treat the input backlink raster as a flow direction raster. Flow direction rasters can have integer with values from 0-255.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Unchecked--If the values of the of the specified backlink raster are integers in the range of 0-8, the dataset will be treated as a cost backlink raster. If the values are from 0-255, the input will be treated as a flow direction raster. If the values are from 0-360 and floating point, the input will be treated as a back direction raster.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Checked--The raster supplied for the backlink raster will be treated as a flow direction raster. Use this option of the flow direction raster happens to have a maximum value of 8 or less.",
	"@@Cost-Path_pathtype_tag0@@": "A keyword defining the manner in which the values and zones on the input destination data will be interpreted in the cost path calculations. The options are as follows:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Each Cell</strong>--For each cell with valid values on the input destination data, a least-cost path is determined and saved on the output raster. With this option, each cell of the input destination data is treated separately, and a least-cost path is determined for each cell.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Each Zone</strong>--For each zone on the input destination data, a least-cost path is determined and saved on the output raster. With this option, the least-cost path for each zone begins at the cell with the lowest cost distance weighting in the zone.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Best Single</strong>--For all cells on the input destination data, the least-cost path is derived from the cell with the minimum of the least-cost paths to source cells.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "First Of--Use the first cell size of the input rasters.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Min Of--Use the smallest cell size of all the input rasters.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Max Of--Use the largest cell size of all the input rasters. This is the default.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Mean Of--Use the mean cell size of all the input rasters.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Last Of--Use the last cell size of the input rasters.",
	"@@Cell-Statistics_extenttype_tag0@@": "Choose which extent should be used in the output raster:",
	"@@Cell-Statistics_extenttype_tag1@@": "First Of--Use the extent of the first input raster to determine the processing extent.",
	"@@Cell-Statistics_extenttype_tag2@@": "Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.",
	"@@Cell-Statistics_extenttype_tag3@@": "Union Of--Use the extent of all the rasters to determine the processing extent.",
	"@@Cell-Statistics_extenttype_tag4@@": "Last Of--Use the extent of the last input raster to determine the processing extent.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Determines how the input rasters bands are processed.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Unchecked--All multiband inputs will be processed as single bands. This is the default.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Checked--All multiband inputs will be processed as multiband.",
	"@@Cell-Statistics_rasters_tag0@@": "The list of rasters from which to calculate statistics, on a pixel-by-pixel basis.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Specifies the method of interpolation to be used when the specified percentile value lies between two input cell values.</p><ul><li><strong>Auto-detect</strong>--If the input rasters are of integer pixel type, the<strong>Nearest</strong>method is used. If the input raster is of floating point pixel type, then the<strong>Linear</strong>method is used. This is the default.</li><li><strong>Nearest</strong>--The nearest available value to the desired percentile is used. In this case, the output pixel type is the same as that of the input value rasters.</li><li><strong>Linear</strong>--The weighted average of the two surrounding values from the desired percentile is used. In this case, the output pixel type is floating point.</li></ul><p>This option is only available if the<strong>Operation</strong>type parameter is set to<strong>Median</strong>or<strong>Percentile</strong>.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>The percentile to calculate. The default is 90, for the 90th percentile.</p><p>The values can range from 0 through 100. The 0th percentile is essentially equivalent to the minimum statistic, and the 100th percentile is equivalent to maximum. A value of 50 will produce essentially the same result as the median statistic.</p><p>This option is only available if the<strong>Operation</strong>parameter is set to<strong>Percentile</strong>.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "The back direction raster contains calculated directions in degrees. The direction identifies the next cell along the optimal path back to the least accumulative cost source while avoiding barriers.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "The range of values is from 0 degrees to 360 degrees, with 0 reserved for the source cells. Due east (right) is 90, and the values increase clockwise (180 is south, 270 is west, and 360 is north).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "The field used to obtain values for the destination locations.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "A raster dataset layer that identifies those cells from which the optimum path is determined to the least costly source. This input is required.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "The input raster layer consists of cells that have valid values (zero is a valid value), and the remaining cells must be assigned NoData.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "The distance accumulation raster is used to determine the optimal path from the destinations to the sources. The distance accumulation raster is usuallycreated with the <strong>Distance Accumulation</strong> function. Each cell in the distance accumulationraster represents the minimum accumulative cost distance over asurface from each cell to a set of source cells.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Specifies a keyword defining the manner in which the values and zones on the input destination data will be interpreted in the cost path calculations.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Each Zone</strong>--For each zone on the input destination data, a least-cost path is determined and saved on the output raster. With this option, the optimal path for each zone begins at the cell with the lowest cost distance weighting in the zone.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Best Single</strong>--For all cells on the input destination data, the optimal path is derived from the cell with the minimum of the least-cost paths to source cells.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Each Cell</strong>--For each cell with valid values on the input destination data, an optimal path is determined. With this option, each cell of the input destination data is treated separately, and an optimal path is determined for each cell.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "The band IDs to use for change detection. If no band IDs are provided, all the bands from the input raster dataset will be used.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "The ID values should be integers separated by spaces.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "The band IDs of the green band and the SWIR band, to be used to mask for cloud, cloud shadow and snow. If no band IDs are provided, masking will not occur.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "The ID values should be integers separated by spaces.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "This parameter specifies the bands to use for cloud, cloud shadow, and snow masking. Because cloud shadow and snow show up very dark in the shortwave infrared (SWIR) band, and clouds and snow are very bright in the green band, it is recommended that the band indexes for the SWIR and green bands are masked.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "The chi-square change probability threshold. If an observation has a calculated change probability that is above this threshold, it is flagged as an anomaly, which is a potential change event. The default value is 0.99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "The minimum number of consecutive anomaly observations that must occur before an event is considered a change. A pixel must be flagged as an anomaly for the specified number of consecutive time slices before it is considered a true change. The default is 6.",
	"@@CCDC-Analysis_raster_tag0@@": "The input multidimensional raster layer.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "The frequency at which to update the time series model with new observations. The default is to update the model every 1 year.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "This parameter defines how often the time series model will be updated with new observations. Updating a model frequently can be computationally costly and the benefit can be minimal. For example, if there are 365 slices or clear observations per year in the multidimensional raster, and the updating frequency is for every observation, the processing will be 365 times more computationally expensive compared to updating once per year, but the accuracy may not be higher.",
	"@@Trend-To-RGB_modeltype_tag0@@": "The type of model information to convert to RGB.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Linear--Linear trend information will be converted to RGB. This is the default.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Harmonic--Harmonic trend information will be converted to RGB.",
	"@@Trend-To-RGB_raster_tag0@@": "The input trend raster.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>The best model proportion value. During the model selection process, the tool will calculate the p-value for each model and select a model that has the most vertices while maintaining the smallest (most significant) p-value based on this proportion value. A value of 1 means the model has the lowest p-value but may not have a high number of vertices. The default is 1.25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>The maximum number of segments to be fitted to the time series for each pixel. The default is 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>The minimum number of valid observations required to perform fitting. The number of years in the input multidimensional dataset must be equal to or greater than this value. The default is 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Specifies whether other bands will be included in the results.</p><ul><li>Checked--Other bands will be included in the results. The segmentation and vertices information from the initial segmentation band specified in the<strong>Processing Band</strong>parameter will also be fitted to the remaining bands in the multiband images. The model results will include the segmentation band first, then the remaining bands.</li><li>Unchecked--Other bands will not be included. This is the default.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Specifies whether segments that exhibit a one year recovery will be excluded.</p><ul><li>Checked--Segments that exhibit a one year recovery will be excluded. This is the default.</li><li>Unchecked--Segments that exhibit a one year recovery will be not be excluded.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>The band to use for segmenting the pixel value trajectories over time. Choose the band that will best capture the changes in the feature you want to observe.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>The p-value thresholdfor a model to be selected. After the vertices are detected in the initial stage of the model fitting, the tool will fit each segment and calculate the p-value to determine the significance of the model. On the next iteration, the model will decrease the number of segments by one and recalculate the p-value. This will continue and, if the p-value is smaller than the value specified in this parameter, the model will be selected and the tool will stop searching for a better model. If no such model is selected, the tool will select a model with a p-value smaller than the<strong>lowest p-value × best model proportion value</strong>. The default is 0.01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>The input Landsat multidimensional raster layer.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Specifies whether the recovery has an increasing (positive) trend.</p><ul><li>Checked--The recovery has an increasing trend. This is the default.</li><li>Unchecked--The recovery has a decreasing trend.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>The recovery threshold value, in years. If a segment has a recovery rate that is faster than<strong>1/recovery threshold</strong>, the segment is discarded and not included in the time series model. The value must range between 0 and 1. The default is 0.25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>The date used to select a slice for each year in the input multidimensional dataset. The slice with the date closest to the snapping date will be selected. This parameter is required if the input dataset contains sub-yearly data.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>The threshold to use for dampening spikes or anomalies in the pixel value trajectory. The value must range between 0 and 1, where 1 means no dampening. The default is 0.9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>The number of additional vertices beyond<strong>max_num_segments + 1</strong>that can be used to fit the model during the initial stage of identifying vertices. Later in the modeling process, the number of additional vertices will be reduced to<strong>max_num_segments + 1</strong>. The default is 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>The input raster datasets or multidimensional raster datasets to merge.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Specifies the method to use to resolve overlapping pixels in the combined datasets.</p><ul><li><strong>First</strong>--The pixel value in the overlapping areas is the value from the first raster in the list of input rasters. This is the default.</li><li><strong>Last</strong>--The pixel value in the overlapping areas is the value from the last raster in the list of input rasters.</li><li><strong>Min</strong>--The pixel value in the overlapping areas is the minimum value of the overlapping pixels.</li><li><strong>Max</strong>--The pixel value in the overlapping areas is the maximum value of the overlapping pixels.</li><li><strong>Mean</strong>--The pixel value in the overlapping areas is the average of the overlapping pixels.</li><li><strong>Sum</strong>--The pixel value in the overlapping areas is the total sum of the overlapping pixels.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Specifies the time unit to be used for the length of a harmonic cycle.</p><ul><li><strong>Days</strong>--The unit for the length of the harmonic cycle is days.</li><li><strong>Years</strong>--The unit for the length of the harmonic cycle is years. This is the default.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>The dimension along which a trend will be extracted for the variable or variables selected in the analysis.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>The frequency number to use in the trend fitting. This parameter specifies the frequency of cycles in a year. The default value is 1, or one harmonic cycle per year.</p><p>This parameter is only included in the trend analysis for a harmonic regression.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Specifies whether NoData values are ignored in the analysis.</p><ul><li>Checked--The analysis will include all valid pixels along a given dimension and ignore any NoData pixels. This is the default.</li><li>Unchecked--The analysis will result in NoData if there are any NoData values for the pixels along the given dimension.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>The length of periodic variation to model. The unit is days, regardless of the time unit of the input data. For example, leaf greenness often has one strong cycle of variation in a single year, so the cycle length is 365.25, even if the input data is monthly greenness. Hourly temperature data has one strong cycle of variation throughout a single day, so the cycle length is 1.</p><p>The default length is 365.25 days for data that varies on an annual cycle.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Specifies whether to calculate the p-value statistic for the slope coefficient of the trend line.</p><ul><li>Checked--The p-value will be calculated and displayed in the details when the function completes.</li><li>Unchecked--The p-value will not be calculated. This is the default.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>The polynomial order number to use in the trend fitting. This parameter specifies the polynomial order. The default value is 2, or second-order polynomial.</p><p>This parameter is only included in the trend analysis for a polynomial regression.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Specifies whether to calculate the R-squared goodness-of-fit statistic for the trend fit line.</p><ul><li>Checked--The R-squared will be calculated and displayed in the details when the function is completed.</li><li>Unchecked--The R-squared will not be calculated. This is the default.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>The input multidimensional raster.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Specifies whether to generate the root mean square error (RMSE) of the trend fit line.</p><ul><li>Checked--The RMSE will be calculated and displayed in the details when the function is completed. This is the default.</li><li>Unchecked--The RMSE will not be calculated.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Specifies the time unit to be used for the length of a seasonal period when performing the Seasonal-Kendall test.</p><ul><li>Days--The unit for the length of the seasonal period is days. This is the default.</li><li>Months--The unit for the length of the seasonal period is months.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Specifies the type of line to be used to fit to the pixel values along a dimension.</p><ul><li><strong>Linear</strong>--Fits the pixel values for a variable along a linear trend line. This is the default.</li><li><strong>Harmonic</strong>--Fits the pixel values for a variable along a harmonic trend line.</li><li><strong>Polynomial</strong>--Fits the pixel values for a variable along a second-order polynomial trend line.</li><li><strong>Mann-Kendall</strong>--Variable pixel values will be evaluated using the Mann-Kendall trend test.</li><li><strong>Seasonal Kendall</strong>--Variable pixel values will be evaluated using the Seasonal-Kendall trend test.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.</p><ul><li>First Of--Use the first cell size of the input rasters.</li><li>Min Of--Use the smallest cell size of all the input rasters.</li><li>Max Of--Use the largest cell size of all the input rasters. This is the default.</li><li>Mean Of--Use the mean cell size of all the input rasters.</li><li>Last Of--Use the last cell size of the input rasters.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>The method used for computation.</p><ul><li><strong>Difference</strong>--The mathematical difference, or subtraction, between the pixel values in the input rasters will be calculated. This is the default.</li><li><strong>Relative Difference</strong>--The difference in pixel values, accounting for the magnitudes of the values being compared, will be calculated.</li><li><strong>Categorical Difference</strong>--The difference between two categorical or thematic rasters will be calculated, where the output contains class transitions that occurred between the two rasters.</li><li><strong>Spectral Euclidean Distance</strong>--The Euclidean distance between the pixel values of two multiband rasters will be calculated.</li><li><strong>Spectral Angle Difference</strong>--The spectral angle between the pixel values of two multiband rasters will be calculated. The output is in radians.</li><li><strong>Band With Most Change</strong>--The band that accounts for the most change in each pixel between two multiband rasters will be calculated.</li></ul><p>If the<strong>Compute Change Method</strong>is set to<strong>Categorical Difference</strong>and one of the inputs is not categorical, a simple difference will be calculated.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Specify the method to use for symbolizing the pixels that have changed classes.</p><ul><li><strong>Average From And To Colors</strong>--The color of the pixel will be the average of the color of its original class and the color of its final class.</li><li><strong>Use From Colors</strong>--The color of the pixel will be the color of its original class.</li><li><strong>Use To Colors</strong>--The color of the pixel will be the color of its final class.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Choose which extent should be used in the output raster:</p><ul><li>First Of--Use the extent of the first input raster to determine the processing extent.</li><li>Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.</li><li>Union Of--Use the extent of all the rasters to determine the processing extent.</li><li>Last Of--Use the extent of the last input raster to determine the processing extent.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Choose the filter method for categorical change computation.</p><ul><li><strong>Keep All</strong>--All classes are included in the output, and no filtering will occur. Choose this option to see change and persistence in a single dataset.</li><li><strong>Keep Changed Pixels Only</strong>--Only the classes that have changed from one class type to another class type are included in the output. Choose this option is you are only interested in change.</li><li><strong>Keep Unchanged Pixels Only</strong>--Only the classes that have not changed are included in the output. Choose this option if you are only interested in persistence.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>The class values from the<strong>From Raster</strong>to be included in the computation, if comparing two categorical rasters. This is a space-delimited list of integer values corresponding to the<strong>ClassValue</strong>field in your input raster dataset.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>The first raster to be used in the computation. To evaluate change from time 1 (earlier) to time 2 (later), enter the time 1 raster here.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>The class values from the<strong>To Raster</strong>to be included in the computation, if comparing two categorical rasters. This is a space-delimited list of integer values corresponding to the<strong>ClassValue</strong>field in your input raster dataset.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>The second raster to be used in the computation. To evaluate change from time 1 (earlier) to time 2 (later), enter the time 2 raster.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Specify the method to use for symbolizing the pixels that have changed classes.</p><ul><li><strong>Average From And To Colors</strong>--The color of the pixel will be the average of the color of its original class and the color of its final class.</li><li><strong>Use From Colors</strong>--The color of the pixel will be the color of its original class.</li><li><strong>Use To Colors</strong>--The color of the pixel will be the color of its final class.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>A field that stores class names in the<strong>From Raster</strong>input. The tool automatically searches for<strong>ClassName</strong>field or<strong>Class_Name</strong>field to use.</p><p>Use this option if the input does not contain these standard field names.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>A field that stores class names in the<strong>To Raster</strong>input. The tool will automatically search for<strong>ClassName</strong>field or<strong>Class_Name</strong>field to use.</p><p>Use this option if the input does not contain these standard field names.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>The number of pixel columns to use in a focal neighborhood dimension.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>The number of pixel rows to use in a focal neighborhood dimension.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Fills in NoData gaps in the output. This is useful when your imagery may have dropped lines.</p>",
	"@@Statistics_raster_tag0@@": "<p>The input raster to perform focal statistics on.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>The following are the seven types of focal statistical functions:</p><ul><li>Minimum--Calculates the minimum value of the pixels within the neighborhood.</li><li>Maximum--Calculates the maximum value of the pixels within the neighborhood.</li><li>Mean--Calculates the average value of the pixels within the neighborhood. This is the default.</li><li>Standard Deviation--Calculates the standard deviation value of the pixels within the neighborhood.</li><li>Median--Calculates the median value of pixels within the neighborhood.</li><li>Majority--Calculates the majority value, or the value that occurs most frequently, of the pixels within the neighborhood.</li><li>Minority--Calculates the minority value, or the value that occurs least frequently, of the pixels within the neighborhood.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Specifies the direction of change to be included in the analysis.</p><p>This parameter is available only when the input change analysis raster is the output from the LandTrendr tools.</p><ul><li><strong>All directions</strong>--All change directions are included in the output. This is the default.</li><li><strong>Increasing</strong>--Only change in the positive or increasing direction is included in the output.</li><li><strong>Decreasing</strong>--Only change in the negative or decreasing direction is included in the output.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Specifies the change information to calculate.</p><ul><li><strong>Time of Latest Change</strong>--Each pixel contains the date of the most recent change for that pixel in the time series. This is the default.</li><li><strong>Time of Earliest Change</strong>--Each pixel contains the date of the earliest change for that pixel in the time series.</li><li><strong>Time of Largest Change</strong>--Each pixel contains the date of the most significant change for that pixel in the time series.</li><li><strong>Number of Changes</strong>--Each pixel contains the total number of times the pixel changed in the time series.</li><li><strong>Time of Longest Change</strong>--Each pixel contains the date of change at the end of the longest transition segment in the time series.</li><li><strong>Time of Shortest Change</strong>--Each pixel contains the date of change at the end of the shortest transition segment in the time series.</li><li><strong>Time of Fastest Change</strong>--Each pixel contains the date of change at the end of the transition that occurred most quickly.</li><li><strong>Time of Slowest Change</strong>--Each pixel contains the date of change at the end of the transition that occurred most slowly.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Specifies whether to filter by the change duration.</p><p></p><ul><li>Checked--Filter results by duration so that only the changes that lasted a given amount of time are included in the output.</li><li>Unchecked--Do not filter results by duration. This is the default.</li></ul><p>This parameter is available only when the input change analysis raster is the output from the LandTrendr tools.</p><p>If this parameter is checked, you must set the<strong>Minimum Duration</strong>and<strong>Maximum Duration</strong>parameters for filtering.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Specifies whether to filter by change magnitude.</p><ul><li>Checked--Filter results by magnitude so that only the changes of a given magnitude are included in the output.</li><li>Unchecked--Do not filter results by magnitude. This is the default.</li></ul><p>This parameter is available only when the input change analysis raster is the output from the LandTrendr tools.</p><p>If this parameter is checked, you must set the<strong>Minimum Magnitude</strong>and<strong>Maximum Magnitude</strong>parameters for filtering.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Specifies whether to limit the output by a range of years.</p><ul><li>Checked--Filter results so that only changes that occurred within a specific range of years are included in the output.</li><li>Unchecked--Do not filter results by year. This is the default.</li></ul><p>If this parameter is checked, you must set the<strong>Minimum Value</strong>and<strong>Maximum Value</strong>parameters for filtering.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Filter results by start value so that only the changes of a given start value are included in the output.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Filter results by end value so that only the changes of a given end value are included in the output.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>The maximum number of changes per pixel to be calculated. The number entered corresponds to the number of bands in the output raster. The default is 1, meaning only one change date is calculated, and the output raster contains only one band.</p><p>This parameter is not available when the<strong>Change Type</strong>parameter is set to<strong>Number of changes</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>The input change analysis raster.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Specifies whether to extract the date at the beginning of a change segment, or the end.</p><p>This parameter is available only when the input change analysis raster is the output from the LandTrendr tools.</p><ul><li><strong>Beginning of segment</strong>--Extract the date at the beginning of a change segment. This is the default.</li><li><strong>End of segment</strong>--Extract the date at the end of a change segment.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>The area units of the output density values.</p><ul><li>Square Map Units--For the square of the linear units of the output spatial reference.</li><li>Square Miles--For (U.S.) miles.</li><li>Square Kilometers--For kilometers.</li><li>Acres--For (U.S.) acres.</li><li>Hectares--For hectares.</li><li>Square Meters--For meters.</li><li>Square Yards--For (U.S.) yards.</li><li>Square Feet--For (U.S.) feet.</li><li>Square Inches--For (U.S.) inches.</li><li>Square Centimeters--For centimeters.</li><li>Square Millimeters--For millimeters.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>The pixel size for the output raster dataset. If the<strong>Cellsize</strong>value has been set in the geoprocessing environments, it is the default.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>The dataset that defines the barriers.</p><p>The barriers can be a feature layer of polyline or polygon features.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>The input point or line features for which to calculate the density.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Determines whether to use a shortest path on a spheroid (geodesic) or a flat earth (planar) method.</p><ul><li><strong>Planar</strong>--Uses planar distances between the features. This is the default.</li><li><strong>Geodesic</strong>--Uses geodesic distances between features. This method takes into account the curvature of the spheroid and correctly deals with data near the poles and the international dateline.</li></ul><p>It is recommended that you use the<strong>Geodesic</strong>method with data stored in a coordinate system that is not appropriate for distance measurements and any analysis that spans a large geographic area. For example, Web Mercator or any geographic coordinate system should use the<strong>Geodesic</strong>method.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Determines what the values in the output raster represent.</p><ul><li><strong>Densities</strong>--The output values represent the predicted density value. This is the default.</li><li><strong>Expected Counts</strong>--The output values represent the predicted amount of the phenomenon within each pixel. Since the pixel value is linked to the specified<strong>Cellsize</strong>value, the resulting raster cannot be resampled to a different pixel size and still represent the amount of the phenomenon.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Field denoting population values for each feature. The<strong>Population Field</strong>value is the count or quantity to be spread across the landscape to create a continuous surface. Values in the<strong>Population Field</strong>may be integer or floating point.</p><p>The options and default behaviors for the field are listed below in the order of priority.</p><ul><li>Use<strong>None</strong>if no item or special value will be used and each feature will be counted once.</li><li>Use<strong>Shape</strong>if the input features contain Z.</li><li>Otherwise, the default field is<strong>POPULATION</strong>, or any acceptable derivative of population:<ul><li><strong>POPULATIONxxxx</strong>where<strong>xxxx</strong>can be any valid character, such as<strong>POPULATION6</strong>,<strong>POPULATION1974</strong>, or<strong>POPULATIONROADTYPE</strong>.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>If none of the above apply, the default is<strong>None</strong>.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>The search radius within which to calculate density. Units are based on the linear unit of the projection.</p><p>For example, if the units are in meters--to include all features within a one-mile neighborhood--set the search radius equal to 1609.344 (since 1 mile is 1609.344 meters).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Denotes whether<strong>NoData</strong>values in the<strong>Value Raster</strong>will influence the results of the zone that they fall within.</p><ul><li><strong>Yes</strong>--Within any particular zone, only pixels that have a value in the<strong>Value Raster</strong>will be used in determining the output value for that zone.<strong>NoData</strong>pixels in the<strong>Value Raster</strong>will be ignored in the statistic calculation. This is the default.</li><li><strong>No</strong>--Within any particular zone, if any<strong>NoData</strong>pixels exist in the<strong>Value Raster</strong>, it is deemed that there is insufficient information to perform statistical calculations for all the pixels in that zone; therefore, the entire zone will receive the<strong>NoData</strong>value on the output raster.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Determines the method of percentile interpolation to be used when the number of values from the input raster to be calculated are even.</p><ul><li><strong>Auto-detect</strong>--If the input value raster is of integer pixel type, the<strong>Nearest</strong>method is used. If the input value raster is of floating point pixel type, then the<strong>Linear</strong>method is used. This is the default.</li><li><strong>Nearest</strong>--The nearest available value to the desired percentile is used. In this case, the output pixel type is the same as that of the input value raster.</li><li><strong>Linear</strong>--The weighted average of the two surrounding values from the desired percentile is used. In this case, the output pixel type is floating point.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>The percentile to calculate. The default is 90, for the 90th percentile.</p><p>The values can range from 0 through 100. The 0th percentile is essentially equivalent to the Minimum statistic, and the 100th percentile is equivalent to Maximum. A value of 50 will produce essentially the same result as the Median statistic.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Determines how the input multidimensional value raster is processed.</p><ul><li><strong>Current Slice</strong>--Statistics will be calculated from the current slice of a multidimensional dataset. This is the default.</li><li><strong>All Slices</strong>--Statistics will be calculated for all dimensions (such as time or depth) of a multidimensional dataset.</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>Statistic type to be calculated.</p><ul><li><strong>Mean</strong>--Calculates the average of all pixels in the<strong>Value Raster</strong>that belong to the same zone as the output pixel.</li><li><strong>Majority</strong>--Determines the value that occurs most often of all pixels in the<strong>Value Raster</strong>that belong to the same zone as the output pixel.</li><li><strong>Maximum</strong>--Determines the largest value of all pixels in the<strong>Value Raster</strong>that belong to the same zone as the output pixel.</li><li><strong>Median</strong>--Determines the median value of all pixels in the<strong>Value Raster</strong>that belong to the same zone as the output pixel.</li><li><strong>Minimum</strong>--Determines the smallest value of all pixels in the<strong>Value Raster</strong>that belong to the same zone as the output pixel.</li><li><strong>Minority</strong>--Determines the value that occurs least often of all pixels in the<strong>Value Raster</strong>that belong to the same zone as the output pixel.</li><li><strong>Percentile</strong>--Calculates a percentile of all pixels in the<strong>Value Raster</strong>that belong to the same zone as the output pixel. The 90th percentile is calculated by default. You can determine which percentile to calculate with the<strong>Percentile Value</strong>parameter.</li><li><strong>Range</strong>--Calculates the difference between the largest and smallest value of all pixels in the<strong>Value Raster</strong>that belong to the same zone as the output pixel.</li><li><strong>Standard Deviation</strong>--Calculates the standard deviation of all pixels in the<strong>Value Raster</strong>that belong to the same zone as the output pixel.</li><li><strong>Sum</strong>--Calculates the total value of all pixels in the<strong>Value Raster</strong>that belong to the same zone as the output pixel.</li><li><strong>Variety</strong>--Calculates the number of unique values for all pixels in the<strong>Value Raster</strong>that belong to the same zone as the output pixel.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Raster that contains the values on which to calculate a statistic.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>Field that holds the values that define each zone. It can be an integer or a string field of the zone raster.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>Dataset that defines the zones. The zones can be defined by an integer raster.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>Specifies how the statistics type will be calculated.</p><ul><li><strong>Arithmetic</strong>--Calculates arithmetic statistics. This is the default.</li><li><strong>Circular</strong>--Calculates circular statistics that are appropriate for cyclic quantities, such as compass direction in degrees, daytimes, and fractional parts of real numbers.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>The highest possible value (upper bound) in the cyclic data. It is a positive number, with a default value of 360. This value also represents the same quantity as the lowest possible value (lower bound).</p><p>This parameter is applicable only when circular statistics is calculated.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>The input raster for which the boundary between zones will be smoothed.</p><p>It must be of integer type.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Specifies the number of times the smoothing process will occur, twice or once.</p><ul><li><p><strong>Checked</strong>--Performs an expansion and shrinking operation two times. For the first time, the operation is performed according to the specified sorting type. Then an additional expansion and shrinking operation is performed with the priority reversed. This is the default.</p></li><li><p><strong>Unchecked</strong>--Performs the expansion and shrinking operation once according to the sorting type.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Specifies the type of sorting to use in the smoothing process. The sorting determines the priority by which cells can expand into their neighbors.</p><p>The sorting can be done based on zone value or zone area.</p><ul><li><p><strong>Do not sort</strong>--The zones are not sorted by size. Zones with larger values have a higher priority to expand into zones with smaller values in the smoothed output. This is the default.</p></li><li><p><strong>Descending</strong>--Sorts zones in descending order by size. Zones with larger total areas have a higher priority to expand into zones with smaller total areas. This option tends to eliminate or reduce the prevalence of cells from smaller zones in the smoothed output.</p></li><li><p><strong>Ascending</strong>--Sorts zones in ascending order by size. Zones with smaller total areas have a higher priority to expand into zones with larger total areas. This option tends to preserve or increase the prevalence of cells from smaller zones in the smoothed output.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>The aggregation dimension. This is the dimension along which the variables will be aggregated.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Specifies the method to use to filter the input multidimensional data before performing the aggregation.</p><ul><li><strong>All</strong>--The full range for each dimension will be used. This is the default.</li><li><strong>By Values</strong>--The dimension will be sliced using a dimension value or list of values.</li><li><strong>By Ranges</strong>--The dimension will be sliced using a range or a list of ranges.</li><li><strong>By Iteration</strong>--The dimension will be sliced over a specified interval size.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>The Iteration Definition parameters allow you to define the dimension values to use to filter the input multidimensional data for analysis when the<strong>Dimension Definition</strong>parameter is set to<strong>By Iteration</strong>.</p><ul><li><strong>Dimension</strong>--The dimension to use for filtering.</li><li><strong>Start of first iteration</strong>--The beginning of the first interval. This interval is used to iterate through the dataset.</li><li><strong>End of first iteration</strong>--The end of the first interval. This interval is used to iterate through the dataset.</li><li><strong>Step</strong>--The frequency with which the data will be sliced.</li><li><strong>Unit</strong>--The iteration unit.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Specifies the keyword interval that will be used when aggregating along the dimension.</p><p>This parameter is required when the<strong>Type</strong>parameter is set to<strong>Interval Keyword</strong>.</p><ul><li><strong>Hourly</strong>--The data values are aggregated into hourly time steps, and the result includes every hour in the time series. This is the default.</li><li><strong>Daily</strong>--The data values are aggregated into daily time steps, and the result includes every day in the time series.</li><li><strong>Weekly</strong>--The data values are aggregated into weekly time steps, and the result includes every week in the time series.</li><li><strong>Dekadly</strong>--The data values are aggregated into 3 periods of 10 days each. The last period can contain more or fewer than 10 days. The output includes 3 slices for each month.</li><li><strong>Pentadly</strong>--The data values are aggregated into 6 periods of 5 days each. The last period can contain more or fewer than 5 days. The output includes 6 slices for each month.</li><li><strong>Monthly</strong>--The data values are aggregated into monthly time steps, and the result includes every month in the time series.</li><li><strong>Quarterly</strong>--The data values are aggregated into quarterly time steps, and the result includes every quarter in the time series.</li><li><strong>Yearly</strong>--The data values are aggregated into yearly time steps, and the result includes every year in the time series.</li><li><strong>Recurring daily</strong>--The data values are aggregated into daily time steps, and the result includes one aggregated value per Julian day. The output includes, at most, 366 daily time slices.</li><li><strong>Recurring weekly</strong>--The data values are aggregated into weekly time steps, and the result includes one aggregated value per week. The output includes, at most, 53 weekly time slices.</li><li><strong>Recurring monthly</strong>--The data values are aggregated into monthly time steps, and the result includes one aggregated value per month. The output includes, at most, 12 monthly time slices.</li><li><strong>Recurring quarterly</strong>--The data values are aggregated into quarterly time steps, and the results include one aggregated value per quarter. The output includes, at most, 4 quarterly time slices.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Specifies the mathematical method that will be used to combine the aggregated slices in an interval.</p><ul><li><strong>Majority</strong>--The pixel value that occurred most frequently will be calculated across all slices in the interval.</li><li><strong>Maximum</strong>--The maximum value of a pixel will be calculated across all slices in the interval.</li><li><strong>Mean</strong>--The mean of a pixel's values will be calculated across all slices in the interval. This is the default.</li><li><strong>Median</strong>--The median value of a pixel will be calculated across all slices in the interval.</li><li><strong>Minimum</strong>--The minimum value of a pixel will be calculated across all slices in the interval.</li><li><strong>Minority</strong>--The pixel value that occurred least frequently will be calculated across all slices in the interval.</li><li><strong>Range</strong>--The range of values for a pixel will be calculated across all slices in the interval.</li><li><strong>Standard Deviation</strong>--The standard deviation of a pixel's values will be calculated across all slices in the interval.</li><li><strong>Sum</strong>--The sum of a pixel's values will be calculated across all slices in the interval.</li><li><strong>Variety</strong>--The number of unique pixel values will be calculated across all slices in the interval.</li></ul><p>All options also have an equivalent with an Ignore NoData option. These will perform the mathematical operation on all valid pixels along the dimension and ignore any NoData pixels.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>Interval ranges specified in a table are used to aggregate groups of values. The minimum and maximum values specify the range to be included.</p><p>This parameter is required when the<strong>Type</strong>parameter is set to<strong>Interval Ranges</strong>.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>The input multidimensional raster.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Specifies the dimension interval for which the data will be aggregated.</p><ul><li><strong>All</strong>--The variable data will be aggregated across all slices. This is the default.</li><li><strong>Interval Keyword</strong>--The variable data will be aggregated using a commonly known interval.</li><li><strong>Interval Value</strong>--The variable data will be aggregated using a user-specified interval and unit.</li><li><strong>Interval Ranges</strong>--The variable data will be aggregated between specified pairs of values or dates.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>The size of the interval used for the aggregation.</p><p>This parameter is required when the<strong>Type</strong>parameter is set to<strong>Interval Value</strong>.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>The dimension values to use to filter the input multidimensional data for analysis. This parameter is required when the<strong>Dimension Definition</strong>parameter is set to<strong>By Values</strong>.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>The variable or variables that will be aggregated along the given dimension.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>The input Esri regression definition (<strong>.ecd</strong>) file that contains the statistics and information for the specific dataset, regression model, and chosen attributes.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>The raster dataset or datasets representing the predictor variables. It can be a single-band raster, multiple-band raster, multidimensional raster, mosaic dataset, or a raster collection.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>The type of statistical calculation that you want to perform.</p><p>The available statistics are<strong>Majority</strong>,<strong>Maximum</strong>,<strong>Mean</strong>,<strong>Median</strong>,<strong>Minimum</strong>,<strong>Minority</strong>,<strong>Percentile</strong>,<strong>Range</strong>,<strong>Standard Deviation</strong>,<strong>Sum</strong>, and<strong>Variety</strong>.</p><p>The default is<strong>Mean</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>Colors are randomly assigned to pixels that are not included in the color map.</p><ul><li>Unchecked--Unmapped pixels are not assigned a color. This is the default.</li><li>Checked--Unmapped pixels are assigned a color.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>When the Gram-Schmidt algorithm is chosen, you can also specify the sensor that collected the multiband raster input. Choosing the sensor type will set appropriate band weights.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>The value of how many slices before or above to be included in the defined window. The value must be a positive integer from 1 to 100. The default value is 1.</p><p>The unit of this parameter is slice.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>The value that will be used to round a linear value to the range of a given circular mean.</p><p>Its value must be positive. The default value is 360 degrees.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>The name of the dimension along which the window will move.</p><p>The default value is the first dimension other than x,y found in the input multidimensional raster.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>The value of how many slices after or below to be included in the defined window. The value must be a positive integer from 1 to 100. The default value is 1.</p><p>The unit of this parameter is slice.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>The input raster can only be a multidimensional raster in Cloud Raster Format (<strong>.crf</strong>file).</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>Specifies how NoData values will be handled by the statistic calculation.</p><ul><li><strong>Data</strong>--NoData values in the value input will be ignored in the results of the defined window that they fall within. This is the default.</li><li><strong>NoData</strong>--Output values will be NoData if any NoData values exist in the input within the defined window.</li><li><strong>Fill NoData</strong>--NoData cell values will be replaced using the selected statistic within the defined window.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Specifies the method of interpolation that will be used when the percentile value falls between two cell values.</p><ul><li><strong>Auto-detect</strong>--If the input raster is of integer pixel type, the<strong>Nearest</strong>method will be used. If the input raster is of float pixel type, the<strong>Linear</strong>method will be used. This is the default.</li><li><strong>Nearest</strong>--The nearest available value to the percentile will be used. In this case, the output pixel type will be the same as that of the input value raster.</li><li><strong>Linear</strong>--The weighted average of the two surrounding values from the percentile will be used. In this case, the output pixel type will be floating point.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>The percentile that will be calculated when<strong>Percentile</strong>is selected as the statistics type. The default is 90, for the 90th percentile.</p><p>The values can range from 0 through 100. The 0th percentile is essentially equivalent to the minimum statistic, and the 100th percentile is equivalent to the maximum statistic, with the exception that the result will be floating point. A value of 50 will produce the same result as the median statistic.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Specifies the statistic type to be calculated.</p><p></p><ul><li><strong>Mean</strong>--The mean (average value) of the cells in the defined window will be calculated. This is the default.</li><li><strong>Circular Mean</strong>--The circular mean of the cells in the defined window will be calculated. When this statistics type is selected, the<strong>Circular Wrap Value</strong>parameter becomes available.</li><li><strong>Majority</strong>--The majority (value that occurs most often) of the cells in the defined window will be identified.</li><li><strong>Maximum</strong>--The maximum (largest value) of the cells in the defined window will be identified.</li><li><strong>Median</strong>--The median of the cells in the neighborhood will be identified.</li><li><strong>Minimum</strong>--The minimum (smallest value) of the cells in the neighborhood will be identified.</li><li><strong>Percentile</strong>--A percentile of the cells in the neighborhood will be calculated. When this statistics type is selected, the<strong>Percentile Value</strong>and<strong>Percentile Interpolation Type</strong>parameters become available. Use these new parameters to designate the percentile to calculate and choose the interpolation type to use, respectively.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>The dimension to use for interpolation.</p><p>This parameter is required when the<strong>Dimension Definition</strong>parameter is set to<strong>By Interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Specifies the method that will be used to filter the input multidimensional data before performing the interpolation.</p><ul><li><strong>By Values</strong>--The dimension will be sliced using a dimension value or list of values.</li><li><strong>By Interval</strong>--The dimension will be sliced using a range or a list of ranges.</li><li><strong>By Target Raster</strong>--The dimension will be sliced using a specific target multidimensional raster.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>The end of the interval, which is used to iterate through the dataset.</p><p>This parameter is required when the<strong>Dimension Definition</strong>parameter is set to<strong>By Interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Specifies whether NoData values will be ignored in the analysis.</p><ul><li>Unchecked--The analysis will result in NoData if there are NoData values in adjacent slices. This is the default.</li><li>Checked--The analysis will only use slices that have valid pixels and will ignore NoData slices.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Specifies the method that will be used to interpolate the raster.</p><ul><li><strong>Linear</strong>--The output will be interpolated linearly using the adjacent slices. This is the default.</li><li><strong>Nearest Neighbor</strong>--The output will use the nearest adjacent slice.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>The input multidimensional raster.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>The beginning of the interval, which is used to iterate through the dataset.</p><p>This parameter is required when the<strong>Dimension Definition</strong>parameter is set to<strong>By Interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>The frequency with which the data will be interpolated.</p><p>This parameter is required when the<strong>Dimension Definition</strong>parameter is set to<strong>By Interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>The target raster specified by the dimension definition.</p><p>This parameter is required when the<strong>Dimension Definition</strong>parameter is set to<strong>By Target Raster</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>The interval unit.</p><p>This parameter is required when the<strong>Dimension Definition</strong>parameter is set to<strong>By Interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>The dimensional values to use to filter the input multidimensional data for analysis.</p><p>This parameter is required when the<strong>Dimension Definition</strong>parameter is set to<strong>By Values</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>The variable or variables that will be interpolated by the dimension definition.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Specifies whether the output will be terrain flattened using<strong>Sigma nought</strong>or<strong>Gamma nought</strong>.</p><ul><li><strong>Gamma nought</strong>--The beta nought backscatter will be normalized using the unit area of a plane locally tangent to the DEM, commonly known as the local incidence angle. This is the default.</li><li><strong>Sigma nought</strong>--The beta nought backscatter will be normalized using a DEM to compute the area.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>The input DEM.</p><p>The DEM is used to estimate the local illuminated area.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Specifies whether the vertical reference system of the input DEM will be transformed to ellipsoidal height. Most elevation datasets are referenced to sea level orthometric height, so a correction is required in these cases to convert to ellipsoidal height.</p><ul><li>Checked--A geoid correction will be made to convert orthometric height to ellipsoidal height (based on EGM96 geoid). This is the default.</li><li>Unchecked--No geoid correction will be made. Use this option only if the DEM is expressed in ellipsoidal height.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>The input radar data.</p><p>This raster must first be radiometrically calibrated to beta nought.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>The calculation assigned to the third band.</p><p>A band name, band ID, or an algebraic expression using the bands.</p><p>The supported operators are unary: plus (+), minus (-), times (*), and divide (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>The calculation assigned to the second band.</p><p>A band name, band ID, or an algebraic expression using the bands.</p><p>The supported operators are unary: plus (+), minus (-), times (*), and divide (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>The input multiband raster data.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Specifies themethod that will be used to extract bands.</p><ul><li>Band Names--The band name representing the wavelengthinterval on the electromagnetic spectrum (such as Red, Near Infrared,or Thermal Infrared) or the polarization (such as VH, VV, HH,or HV) will be used. This is the default.</li><li>Band IDs--The band number (such as B1, B2, or B3) will be used.</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>The calculation assigned to the first band.</p><p>A band name, band ID, or an algebraic expression using the bands.</p><p>The supported operators are unary: plus (+), minus (-), times (*), and divide (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Choose the type of surface function that will be fitted around the target cell.</p><ul><li>Quadratic--A quadratic surface function will be fitted to the neighborhood cells. This is the default type.</li><li>Biquadratic--A biquadratic surface function will be fitted to the neighborhood cells.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>The output will be calculated over this distance from the target cell center. It determines the neighborhood size. The default value is the input raster cell size, resulting in a 3 by 3 neighborhood.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>The measurement units (degrees or percentages) that will be used for the output slope raster. This parameter is only active when<strong>Parameter type</strong>is<strong>Slope</strong>.</p><ul><li>Degree--The inclination of slope will be calculated in degrees. This is the default.</li><li>Percent rise--The inclination of slope will be calculated as percent rise, also referred to as the percent slope.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Specifies the output surface parameter type that will be computed.</p><ul><li>Slope--The rate of change in elevation will be computed. This is the default.</li><li>Aspect--The downslope direction of the maximum rate of change for each cell will be computed.</li><li>Mean Curvature--The overall curvature of the surface will be measured. It is computed as the average of the minimum and maximum curvature. This curvature describes the intrinsic convexity or concavity of the surface, independent of direction or gravity influence.</li><li>Tangential (normal contour) Curvature--The geometric normal curvature perpendicular to the slope line, tangent to the contour line will be measured. This curvature is typically applied to characterize the convergence or divergence of flow across the surface.</li><li>Profile (normal slope line) Curvature--The geometric normal curvature along the slope line will be measured. This curvature is typically applied to characterize the acceleration and deceleration of flow down the surface.</li><li>Plan (projected contour) Curvature--The curvature along contour lines will be measured.</li><li>Contour Geodesic Torsion--The rate of change in slope angle along contour lines will be measured.</li><li>Gaussian Curvature--The overall curvature of the surface will be measured. It is computed as the product of the minimum and maximum curvature.</li><li>Casorati Curvature--The general curvature of the surface will be measured. It can be zero or any other positive number.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Specifies whether geodesic azimuths will be projected to correct the angle distortion caused by the output spatial reference.This parameter is only active when<strong>Parameter type</strong>is<strong>Aspect</strong>.</p><ul><li>Unchecked--Geodesic azimuths will not be projected. This is the default.</li><li>Checked--Geodesic azimuths will be projected.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>The input surface raster. It can be an integer or a floating-point raster.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Specifies whether neighborhood distance will vary with landscape changes (adaptive). The maximum distance is determined by the neighborhood distance. The minimum distance is the input raster cell size.</p><ul><li>Unchecked--A single (fixed) neighborhood distance will be used at all locations. This is the default.</li><li>Checked--An adaptive neighborhood distance will be used at all locations.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Specifies whether aspect will be measured from a point on the equator or from the north pole.This parameter is only active when<strong>Parameter type</strong>is<strong>Aspect</strong>.</p><ul><li>Unchecked--Aspect will be measured from the north pole. This is the default.</li><li>Checked--Aspect will be measured from a point on the equator.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>The linear unit of vertical z-values.</p><p>It is defined by a vertical coordinate system if it exists. If a vertical coordinate system does not exist, the z-unit should be defined from the unit list, to ensure correct geodesic computation.</p><ul><li>Inch--The linear unit will be inches.</li><li>Foot--The linear unit will be feet.</li><li>Yard--The linear unit will be yards.</li><li>Mile US--The linear unit will be miles.</li><li>Nautical mile--The linear unit will be nautical miles.</li><li>Millimeter--The linear unit will be millimeters.</li><li>Centimeter--The linear unit will be centimeters.</li><li>Meter--The linear unit will be meters. This is the default.</li><li>Kilometer--The linear unit will be kilometers.</li><li>Decimeter--The linear unit will be decimeters.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>A raster that specifies the locations where the analysis will occur.</p><p>The raster can be integer or floating point type.</p><p>All cells with a valid value, including zero, will compose the mask. Cells that are NoData in the mask input will be NoData in the output.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Choose which cell size to use in the output raster. If all the input cell sizes are the same, all the options will yield the same results.</p><ul><li>First Of--Use the first cell size of the input rasters.</li><li>Min Of--Use the smallest cell size of all the input rasters.</li><li>Max Of--Use the largest cell size of all the input rasters. This is the default.</li><li>Mean Of--Use the mean cell size of all the input rasters.</li><li>Last Of--Use the last cell size of the input rasters.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>Specifies the convergence value between two consecutive iterations. When epsilon is less than or equal to the specified value, the iteration stops, and the result of the last iteration is used.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Choose which extent should be used in the output raster:</p><ul><li><p>First Of--Use the extent of the first input raster to determine the processing extent.</p></li><li>Intersection Of--Use the extent of the overlapping pixels to determine the processing extent. This is the default.</li><li>Union Of--Use the extent of all the rasters to determine the processing extent.</li><li>Last Of--Use the extent of the last input raster to determine the processing extent.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Specifies the maximum number of iterations to complete. The computation ends when this value is reached, regardless of the<strong>Epsilon</strong>setting.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>The input multiband rasters.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>The input raster representing accumulative cost distance from the first source.</p><p>It should be an accumulated cost distance output from the<strong>Distance Accumulation</strong>or<strong>Distance Allocation</strong>function.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>The input raster representing accumulative cost distance from the second source.</p><p>It should be an accumulated cost distance output from the<strong>Distance Accumulation</strong>or<strong>Distance Allocation</strong>function.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>The input back direction raster from the first source.</p><p>This is a raster dataset identifying the direction of the next cell along the least-cost path back to the first source. This is output from the<strong>Distance Accumulation</strong>or<strong>Distance Allocation</strong>function.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>The input back direction raster from the second source.</p><p>This is a raster dataset identifying the direction of the next cell along the least-cost path back to the first source. This is output from the<strong>Distance Accumulation</strong>or<strong>Distance Allocation</strong>function.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>A percent or accumulative cost threshold that will determine whether a given cell will be included in the output corridor raster.</p><p>When the<strong>Threshold method</strong>parameter is set to<strong>Percent of least cost</strong>, the specified value indicates the percent increase to apply from the minimum value of the summed accumulative cost distance rasters. When the<strong>Threshold method</strong>parameter is set to<strong>Accumulative cost</strong>, the value indicates cells that have a summed accumulative cost equal to or below the value that will be included in the corridor.</p><p>This parameter is only active if the<strong>Threshold method</strong>parameter is set to<strong>Percent of least cost</strong>or<strong>Accumulative cost</strong>.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Specifies how the threshold will be defined.</p><p></p><ul><li><strong>No Threshold</strong>--No threshold will be applied, and the resulting corridor will cover the full extent of the input rasters. This is the default.</li><li><strong>Percent of Least Cost</strong>--The threshold will be defined as a percent of the minimum value of the summed accumulative cost distance rasters.</li><li><strong>Accumulative Cost</strong>--The threshold will be defined in accumulative cost distance units.</li></ul>"
};
const helpTexts_en = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_en);


//# sourceMappingURL=help-texts.en-f9d07fbe.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,