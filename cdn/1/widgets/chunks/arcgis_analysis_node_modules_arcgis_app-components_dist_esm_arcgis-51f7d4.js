"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-51f7d4"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-group-browser_16.entry.js":
/*!**************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-group-browser_16.entry.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_group_browser: () => (/* binding */ ArcgisGroupBrowser),
/* harmony export */   arcgis_group_browser_actions: () => (/* binding */ ArcgisGroupBrowserActions),
/* harmony export */   arcgis_group_browser_content: () => (/* binding */ ArcgisGroupBrowserContent),
/* harmony export */   arcgis_group_browser_filter_date: () => (/* binding */ ArcgisGroupBrowserFilterDate),
/* harmony export */   arcgis_group_browser_filter_groups_by_user: () => (/* binding */ ArcgisGroupBrowserFilterGroupsByUser),
/* harmony export */   arcgis_group_browser_filter_member_org: () => (/* binding */ ArcgisGroupBrowserFilterMemberOrg),
/* harmony export */   arcgis_group_browser_filter_membership: () => (/* binding */ ArcgisGroupBrowserFilterMembership),
/* harmony export */   arcgis_group_browser_filter_owner: () => (/* binding */ ArcgisGroupBrowserFilterOwner),
/* harmony export */   arcgis_group_browser_filter_special_groups: () => (/* binding */ ArcgisGroupBrowserFilterSpecialGroups),
/* harmony export */   arcgis_group_browser_filters: () => (/* binding */ ArcgisGroupBrowserFilters),
/* harmony export */   arcgis_group_browser_pagination: () => (/* binding */ ArcgisGroupBrowserPagination),
/* harmony export */   arcgis_group_browser_preview: () => (/* binding */ ArcgisGroupBrowserPreview),
/* harmony export */   arcgis_group_browser_preview_card: () => (/* binding */ ArcgisGroupBrowserPreviewCard),
/* harmony export */   arcgis_group_browser_search: () => (/* binding */ ArcgisGroupBrowserSearch),
/* harmony export */   arcgis_group_browser_sort: () => (/* binding */ ArcgisGroupBrowserSort),
/* harmony export */   arcgis_group_browser_top_bar: () => (/* binding */ ArcgisGroupBrowserTopBar)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./resize-a17b7292.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/resize-a17b7292.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _string_58a5fef3_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./string-58a5fef3.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/string-58a5fef3.js");
/* harmony import */ var _store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./store-da3fccd5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-da3fccd5.js");
/* harmony import */ var _store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./store-8b1b0846.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js");
/* harmony import */ var _privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./privileges-5c382f61.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js");
/* harmony import */ var _items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./items-a4f5e98b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/items-a4f5e98b.js");
/* harmony import */ var _portal_660bb43a_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./portal-660bb43a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-660bb43a.js");
/* harmony import */ var _user_0fa9ff5a_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./user-0fa9ff5a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-0fa9ff5a.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _utils_2f459d6d_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils-2f459d6d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-2f459d6d.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/* harmony import */ var _group_6a6303b0_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./group-6a6303b0.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/group-6a6303b0.js");
/* harmony import */ var _query_d62660d4_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./query-d62660d4.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/query-d62660d4.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */























async function queryGroups(portal, query) {
    const restBase = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.g)(portal);
    const url = `${restBase}community/groups`;
    const { num, start, sortOrder, sortField, filters, baseQuery, searchTerm, searchUser } = query;
    const filterIds = Object.keys(filters || {});
    const term = searchTerm ? `(${(0,_string_58a5fef3_js__WEBPACK_IMPORTED_MODULE_8__.c)(searchTerm)}) ` : "";
    const baseParams = Object.assign(Object.assign({}, (searchUser ? { searchUserAccess: "groupMember", searchUserName: searchUser } : {})), { q: `${baseQuery || ""} ${term}` });
    const queryParams = filterIds.reduce((params, key) => {
        const { param, value } = filters[key];
        return Object.assign(Object.assign({}, params), { [param]: `${params[param] || ""} ${value}` });
    }, baseParams);
    const params = Object.assign(Object.assign({ num,
        start }, (sortField === "relevance"
        ? {}
        : {
            sortField,
            sortOrder
        })), (queryParams || {}));
    const hasActiveQuery = Object.entries(queryParams).some(([_key, value]) => typeof value !== "string" || !!(value === null || value === void 0 ? void 0 : value.trim()));
    if (!hasActiveQuery) {
        // the group search endpoint will throw an error with no search parameters, so treat as an empty result set
        return {
            nextStart: -1,
            num: 0,
            results: [],
            start: 0,
            total: 0
        };
    }
    const response = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.r)(url, params);
    return Object.assign(Object.assign({}, response), { q: queryParams.q, queryParams: params });
}
async function queryGroupContent(portal, groupId, params = {}) {
    const restBase = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.g)(portal);
    const url = `${restBase}content/groups/${groupId}/search`;
    const defaultParams = {
        num: 4,
        start: 0,
        sortField: "modified",
        sortOrder: "desc"
    };
    const response = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.r)(url, Object.assign(Object.assign({}, defaultParams), params));
    return response;
}
async function queryFeaturedContent(portal, groupId, featured, limit = 4) {
    const restBase = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.g)(portal);
    const url = `${restBase}content/groups/${groupId}/search`;
    const params = {
        num: limit,
        start: 0,
        q: `id:(${featured.slice(0, limit).join(" OR ")})`
    };
    const response = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.r)(url, params);
    // results will be returned in a "relevance" order, we want them in the requested order
    // not all featured items will be available to all users so also filter out ones that were not returned
    if (response.total) {
        const newResults = featured
            .map((id) => {
            return response.results.find((item) => item.id === id);
        })
            .filter(Boolean);
        response.results = newResults;
    }
    return response;
}

const arcgisGroupBrowserCss = ":host{position:relative;display:flex;height:100%;flex-direction:column;overflow-y:auto;overflow-x:hidden;background-color:var(--calcite-color-background);--group-browser-max-width:100%;--group-browser-pane-width:18.75rem;--group-browser-pane-z-index:11;--group-browser-top-bar-background:var(--calcite-color-foreground-1)}arcgis-browser{--arcgis-browser-max-width:var(--group-browser-max-width);--arcgis-browser-pane-width:var(--group-browser-pane-width);--arcgis-browser-pane-z-index:var(--group-browser-pane-z-index);--arcgis-browser-top-bar-background:var(--group-browser-top-bar-background)}@media screen and (max-width: 640px){:host{--group-browser-pane-width:100%}}";

const ArcgisGroupBrowser = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisGroupBrowserUpdate = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserUpdate", 7);
        this.arcgisGroupBrowserLoading = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserLoading", 7);
        this.arcgisGroupBrowserSelect = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserSelect", 7);
        this.arcgisGroupBrowserPreview = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserPreview", 7);
        this.arcgisGroupBrowserSublayerPreview = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserSublayerPreview", 7);
        this.arcgisGroupBrowserInternalUIAction = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserInternalUIAction", 7);
        this.liveRegionUpdate = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "liveRegionUpdate", 7);
        this.allowFetch = false;
        this.currentResults = [];
        this.updateFiltersEmpty = () => {
            var _a;
            this.store.state.filtersEmpty = !((_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelector(`[slot="filters"]`));
        };
        this.updateTopbarEmpty = () => {
            var _a;
            this.store.state.topbarEmpty = !((_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelector(`[slot="top-bar"]`));
        };
        this.updateSortEmpty = () => {
            var _a;
            this.store.state.sortEmpty = !((_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelector(`[slot="sort"]`));
        };
        this.filterMutationObserver = new MutationObserver(this.updateFiltersEmpty);
        this.topbarMutationObserver = new MutationObserver(this.updateTopbarEmpty);
        this.sortMutationObserver = new MutationObserver(this.updateSortEmpty);
        this.fetchGroups = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.d)(async () => {
            this.loading = true;
            this.currentResults = [];
            this.arcgisGroupBrowserLoading.emit();
            this.store.state.preview = null;
            if (!this.portal || !this.allowFetch) {
                return;
            }
            let query = this.getQuery();
            if (this.preflight) {
                query = await this.preflight(query);
            }
            const response = await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.m)(this.queryGroups(query), 500);
            this.arcgisGroupBrowserUpdate.emit(Object.assign(Object.assign(Object.assign({}, response), { selectedGroups: this.selectedGroups, filters: Object.assign({}, this.store.state.filters), searchTerm: this.searchTerm }), this.sort));
            this.currentResponse = response;
            this.currentResults = response.results;
            this.loading = false;
        }, 150);
        this.handleResizeEvent = (e) => {
            this.resize(e);
        };
        this.renderSelectedItem = (selectedGroup) => {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-selected-item", { key: selectedGroup.id, heading: selectedGroup.title, onArcgisSelectedItemRemove: () => {
                    this.deselectGroup(selectedGroup);
                    this.arcgisGroupBrowserSelect.emit(this.selectedGroups);
                } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-thumbnail", { slot: "content-start", group: selectedGroup, portal: this.portal, scale: "s" })));
        };
        this.api = undefined;
        this.portal = undefined;
        this.user = undefined;
        this.searchUser = undefined;
        this.config = undefined;
        this.selection = "none";
        this.view = "list";
        this.num = 20;
        this.q = "";
        this.selectedGroups = [];
        this.preflight = undefined;
        this.fetch = undefined;
        this.hidePreviewFooter = false;
        this.hidePreviewBadges = false;
        this.hasIndoorsSpaces = false;
        this.height = "full";
        this.store = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_1__.c)({ filters: {} });
        this.usePanelLayout = false;
        this.searchTerm = "";
        this.sort = undefined;
        this.page = { num: this.num, start: 1, nextStart: -1 };
        this.loading = true;
        this.formFactor = undefined;
        this.pageRangeText = "";
        this.previewGroup = undefined;
        this.currentResponse = undefined;
    }
    /** Manually trigger a fetch of new results */
    async refresh() {
        this.fetchGroups();
    }
    async componentWillLoad() {
        const { el, hasIndoorsSpaces, selectedGroups, view } = this;
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_5__.g)(el);
        this.i18n = locale[0];
        this.store.state.i18n = locale[0];
        this.store.state.lang = locale[1];
        this.store.state.view = view;
        this.store.state.hasIndoorsSpaces = hasIndoorsSpaces;
        this.store.state.selectedGroups = selectedGroups;
        this.initializeConfig();
        (0,_resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.s)(this.store).observe(this.el);
        el.addEventListener("arcgisBrowserResize", this.handleResizeEvent);
        this.filterMutationObserver.observe(el, { childList: true });
        this.topbarMutationObserver.observe(el, { childList: true });
        this.sortMutationObserver.observe(el, { childList: true });
        this.updateFiltersEmpty();
        this.updateTopbarEmpty();
        this.updateSortEmpty();
        if (this.usePanelLayout || (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_3__.c)(this.el, "calcite-shell-panel")) {
            this.store.state.panel = true;
            this.store.state.filtersExpanded = false;
        }
    }
    disconnectedCallback() {
        var _a, _b;
        (_a = this.store.state.resizeObserver) === null || _a === void 0 ? void 0 : _a.unobserve(this.el);
        this.filterMutationObserver.disconnect();
        this.topbarMutationObserver.disconnect();
        this.sortMutationObserver.disconnect();
        this.filterClearHandler(false);
        (_b = this.el) === null || _b === void 0 ? void 0 : _b.removeEventListener("arcgisBrowserResize", this.handleResizeEvent);
    }
    updateUser(newUser) {
        var _a;
        (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) !== null && _a !== void 0 ? _a : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user = newUser);
    }
    updatePortal(newPortal) {
        var _a;
        (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) !== null && _a !== void 0 ? _a : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal = newPortal);
    }
    updateAPI(newValue) {
        var _a;
        (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.api) !== null && _a !== void 0 ? _a : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.api = newValue);
    }
    updateConfig(newConfig) {
        var _a;
        (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config) !== null && _a !== void 0 ? _a : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config = newConfig);
    }
    updateSelection(newValue) {
        this.store.state.selection = newValue;
    }
    updateSelectedGroups(groups) {
        this.store.state.selectedGroups = groups;
    }
    updateQ() {
        this.resetPagination();
        this.fetchGroups();
    }
    async componentDidLoad() {
        this.initializeConfig();
        // initially, fetch is locked
        // wait for all components to emit events impacting state prior to initial fetch
        await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(400);
        this.allowFetch = true;
        if (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) {
            this.fetchGroups();
        }
        else {
            (0,_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.o)("portal", () => {
                this.initializeConfig();
                this.fetchGroups();
            });
        }
    }
    filterHandler(e) {
        const filters = Object.assign(Object.assign({}, this.store.state.filters), { [e.detail.id]: e.detail });
        // remove filter from set
        if (!e.detail.value) {
            delete filters[e.detail.id];
        }
        this.store.state.filters = filters;
        this.resetPagination();
        this.fetchGroups();
    }
    filterRemoveHandler(e) {
        if (!e.detail) {
            return;
        }
        const filters = Object.assign({}, this.store.state.filters);
        delete filters[e.detail];
        this.store.state.filters = filters;
        this.resetPagination();
        this.fetchGroups();
    }
    filterClearHandler(doFetchGroups = true) {
        this.store.state.filters = {};
        this.resetPagination();
        doFetchGroups && this.fetchGroups();
    }
    genericFilterClearHandler() {
        this.filterClearHandler();
    }
    filterToggleHandler() {
        this.store.state.preview = null;
        this.store.state.filtersExpanded = !this.store.state.filtersExpanded;
    }
    searchHandler(e) {
        const newTerm = e.detail;
        this.searchTerm = newTerm;
        this.resetPagination();
        if (newTerm) {
            this.fetchGroups();
        }
        else {
            this.fetchGroups.invoke();
        }
    }
    sortHandler(e) {
        this.sort = e.detail;
        this.fetchGroups();
    }
    async pageHandler(e) {
        var _a;
        this.page = e.detail;
        if (this.allowFetch) {
            await this.fetchGroups();
            await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(400);
            // TODO: figure out why a ref doesn't work for this element
            (_a = this.el.shadowRoot.querySelector(".content__view")) === null || _a === void 0 ? void 0 : _a.scrollTo({
                top: 0,
                behavior: "smooth"
            });
        }
    }
    selectHandler(e) {
        const { selected, group } = e.detail;
        switch (this.selection) {
            case "single":
                this.selectedGroups = [group];
                break;
            case "multiple":
                if (selected) {
                    this.selectGroup(group);
                }
                else {
                    this.deselectGroup(group);
                }
                break;
        }
        this.arcgisGroupBrowserSelect.emit(this.selectedGroups);
    }
    async togglePreview({ detail }) {
        this.store.state.filtersExpanded = false;
        if (!detail || this.store.state.preview === detail.id) {
            this.store.state.preview = null;
            this.previewGroup = null;
            this.arcgisGroupBrowserPreview.emit();
            this.arcgisGroupBrowserSublayerPreview.emit();
        }
        else {
            this.restoreFocusElement = document.activeElement;
            this.store.state.preview = detail.id;
            this.previewGroup = Object.assign({}, detail);
            this.arcgisGroupBrowserPreview.emit(Object.assign({}, detail));
        }
        this.arcgisGroupBrowserInternalUIAction.emit({
            action: this.previewGroup ? "open panel" : "close panel",
            category: "card action"
        });
    }
    async initializeConfig() {
        var _a, _b, _c, _d;
        (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.api) !== null && _a !== void 0 ? _a : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.api = this.api);
        (_b = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) !== null && _b !== void 0 ? _b : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user = this.user);
        (_c = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) !== null && _c !== void 0 ? _c : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal = this.portal);
        (_d = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config) !== null && _d !== void 0 ? _d : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config = this.config);
    }
    resetPagination() {
        this.page.start = 1;
        this.page.total = 0;
    }
    getQuery() {
        return Object.assign(Object.assign({ filters: this.store.state.filters, searchUser: this.searchUser, searchTerm: this.searchTerm, baseQuery: this.q }, this.sort), this.page);
    }
    queryGroups(query) {
        if (this.fetch) {
            return this.fetch(query);
        }
        return queryGroups(this.portal, query);
    }
    restoreFocus() {
        if (this.restoreFocusElement) {
            const el = this.restoreFocusElement;
            if (el.restoreFocus) {
                el.restoreFocus();
            }
            else if (el.setFocus) {
                el.setFocus();
            }
            else if (el.focus) {
                el.focus();
            }
        }
    }
    selectGroup(group) {
        if (!this.isSelected(group)) {
            this.selectedGroups = [...this.selectedGroups, group];
        }
    }
    deselectGroup(group) {
        this.selectedGroups = this.selectedGroups.filter(({ id }) => id !== group.id);
    }
    isSelected(group) {
        var _a;
        return (_a = this.selectedGroups) === null || _a === void 0 ? void 0 : _a.some(({ id }) => group.id === id);
    }
    resize({ detail: { width, height } }) {
        this.formFactor = width > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.sm ? "large" : "small";
        const oldFormFactor = this.store.state.width > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.sm ? "large" : "small";
        /** when going from large to small or small to large, collapse or expand filters, accordingly */
        if (oldFormFactor === "large" && this.formFactor === "small") {
            /** use panel layout if enabled on smaller group browsers */
            this.store.state.panel = this.usePanelLayout;
            this.store.state.filtersExpanded = false;
        }
        if (oldFormFactor === "small" && this.formFactor === "large") {
            /** panel layout won't work on larger group browsers */
            this.store.state.panel = false;
            this.store.state.filtersExpanded = true;
        }
        this.store.state.width = width;
        this.store.state.height = height;
    }
    renderSelected() {
        var _a, _b, _c, _d;
        const wholePageSelected = (_a = this.currentResults) === null || _a === void 0 ? void 0 : _a.every((group) => this.isSelected(group));
        const totalSelected = (_b = this.selectedGroups) === null || _b === void 0 ? void 0 : _b.length;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-selected", { slot: "selection", loading: this.loading, total: (_c = this.currentResults) === null || _c === void 0 ? void 0 : _c.length, totalSelected: totalSelected, emptyText: this.i18n.groupBrowser.noSelectedGroups, heading: this.i18n.groupBrowser.selectedGroups, checked: !this.loading && wholePageSelected, indeterminate: !wholePageSelected && !!totalSelected, onArcgisSelectedDeselectAll: () => {
                this.selectedGroups = [];
                this.arcgisGroupBrowserSelect.emit(this.selectedGroups);
            }, onArcgisSelectedSelectPage: () => {
                var _a;
                (_a = this.currentResults) === null || _a === void 0 ? void 0 : _a.forEach((group) => {
                    this.selectGroup(group);
                });
                this.arcgisGroupBrowserSelect.emit(this.selectedGroups);
            } }, (_d = this.selectedGroups) === null || _d === void 0 ? void 0 : _d.map(this.renderSelectedItem)));
    }
    renderSlot(name, defaultContent) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: name }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: name }, defaultContent)));
    }
    render() {
        const { loading, i18n, selectedGroups, selection, currentResponse, store, api, searchTerm, formFactor, height, renderSlot } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser", { preview: !!this.previewGroup, loading: loading, selected: selectedGroups, alwaysShowSelection: selection === "multiple", response: currentResponse, store: store, api: api, formFactor: formFactor, searchTerm: searchTerm, height: height }, renderSlot("top-bar"), renderSlot("sort"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-preview", { slot: "preview", group: this.previewGroup, portal: this.portal, user: this.user, key: this.store.state.preview, onArcgisGroupBrowserPreviewClose: () => {
                this.store.state.preview = null;
                this.previewGroup = null;
                this.arcgisGroupBrowserPreview.emit();
                this.arcgisGroupBrowserSublayerPreview.emit();
                this.restoreFocus();
            }, hidePreviewFooter: this.hidePreviewFooter, showBadges: !this.hidePreviewBadges, currentResponse: this.currentResponse }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer-action" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "preview-footer-action" }))), this.renderSelected(), renderSlot("actions"), renderSlot("content-start"), renderSlot("content"), renderSlot("content-end"), renderSlot("pagination"), renderSlot("filters"), renderSlot("scroll-end"), renderSlot("no-results", i18n.content.noResults), renderSlot("no-content", i18n.content.noContent))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "user": ["updateUser"],
        "portal": ["updatePortal"],
        "api": ["updateAPI"],
        "config": ["updateConfig"],
        "selection": ["updateSelection"],
        "selectedGroups": ["updateSelectedGroups"],
        "q": ["updateQ"]
    }; }
};
ArcgisGroupBrowser.style = arcgisGroupBrowserCss;

const ArcgisGroupBrowserActions = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.actions = [];
    }
    async componentWillLoad() {
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.el);
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-actions", { actions: this.actions, selection: this.store.state.selectedGroups, store: this.store })));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const arcgisGroupBrowserContentCss = ":host{--arcgis-group-browser-columns:repeat(1, 1fr);--arcgis-group-browser-gap:0.5rem}.list slot,.compact slot{display:grid;grid-template-columns:var(--arcgis-group-browser-columns)}.compact slot{gap:0px}.list slot{gap:var(--arcgis-group-browser-gap)}";

const ArcgisGroupBrowserContent = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    }
    async componentWillLoad() {
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.el);
    }
    render() {
        const view = this.store.state.view;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                [view]: true,
                "no-space": this.store.state.width < _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.xs && this.store.state.panel
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisGroupBrowserContent.style = arcgisGroupBrowserContentCss;

const ArcgisGroupBrowserFilterDate = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisGroupBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserFilter", 7);
        this.property = "modified";
        this.range = undefined;
        this.start = undefined;
        this.end = undefined;
        this.expanded = undefined;
    }
    componentWillLoad() {
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.el);
    }
    getEventDetail(detail) {
        return Object.assign({ param: "q" }, detail);
    }
    render() {
        const { property, range, start, end, store, expanded } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter-date", { serverProperty: property, property: property, store: store, start: start, end: end, range: range, expanded: expanded, onArcgisBrowserFilter: (e) => {
                this.arcgisGroupBrowserFilter.emit(this.getEventDetail(e.detail));
            } }));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisGroupBrowserFilterGroupsByUser = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisGroupBrowserUsernamesFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserUsernamesFilter", 7);
        this.searchUsernames = undefined;
        this.searchUsername = undefined;
        this.owner = undefined;
        this.expanded = undefined;
        this.allUsernames = [];
        this.selectedUsername = undefined;
    }
    async componentWillLoad() {
        var _a, _b, _c;
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.el);
        this.i18n = this.store.state.i18n.filterGroupsByUser;
        this.selectedUsername =
            (_b = (_a = this.searchUsername) !== null && _a !== void 0 ? _a : this.searchUsernames[0]) !== null && _b !== void 0 ? _b : (_c = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) === null || _c === void 0 ? void 0 : _c.username;
    }
    async searchUsernamesChanged() {
        this.allUsernames = this.searchUsernames;
    }
    async searchUsernameChanged() {
        this.selectedUsername = this.searchUsername;
    }
    render() {
        var _a;
        const { allUsernames, selectedUsername, searchUsername, i18n } = this;
        const currentUsername = (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) === null || _a === void 0 ? void 0 : _a.username;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: this.i18n.title, expanded: this.expanded, onArcgisBrowserFilterRemove: () => {
                this.selectedUsername = searchUsername;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { selectionMode: "single", scale: "m", onCalciteTreeSelect: (event) => {
                var _a, _b;
                const node = event.target;
                const selectedUsername = ((_b = (_a = node.selectedItems) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.dataset.username) || "";
                this.selectedUsername = selectedUsername;
                this.arcgisGroupBrowserUsernamesFilter.emit(selectedUsername);
            } }, allUsernames.map((username) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-username": username, selected: username === selectedUsername }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, username === currentUsername ? i18n.me.replace("${username}", username) : username)))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "searchUsernames": ["searchUsernamesChanged"],
        "searchUsername": ["searchUsernameChanged"]
    }; }
};

const ArcgisGroupBrowserFilterMemberOrg = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisGroupBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserFilter", 7);
        this.memberOrg = undefined;
        this.orgId = undefined;
        this.expanded = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.el);
        this.i18n = this.store.state.i18n.filterMemberOrg;
    }
    async componentDidLoad() {
        if (this.memberOrg) {
            this.arcgisGroupBrowserFilter.emit(this.getEventDetail());
        }
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_10__.a)("memberOrg", this.store, () => (this.memberOrg = null));
    }
    getQueryValue() {
        const { username } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user;
        const orgid = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal.id;
        if (!username || !orgid) {
            return "";
        }
        switch (this.memberOrg) {
            case "myOrg":
                return "memberorgids:NULL";
            case "anotherOrg":
                if (this.orgId) {
                    return `(memberorgids:${this.orgId} OR orgid:${this.orgId})`;
                }
                else {
                    return "-memberorgids:NULL";
                }
            default:
                return "";
        }
    }
    getEventDetail() {
        const { memberOrg, orgId } = this;
        const value = this.getQueryValue();
        const label = this.i18n.label.replace("${label}", this.i18n[memberOrg]);
        return { id: "memberOrg", param: "q", value, label, memberOrg, orgId };
    }
    render() {
        var _a;
        // https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/44198
        if ((_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) === null || _a === void 0 ? void 0 : _a.isPortal) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: this.i18n.currentMembersAreFrom, expanded: this.expanded, active: !!this.memberOrg, filterID: "memberOrg", onArcgisBrowserFilterRemove: () => {
                this.memberOrg = null;
                this.orgId = null;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { selectionMode: "single", scale: "m", onCalciteTreeSelect: (event) => {
                var _a, _b;
                const node = event.target;
                const memberOrg = ((_b = (_a = node.selectedItems) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.dataset.memberOrg) || "";
                if (this.memberOrg === memberOrg) {
                    this.memberOrg = null;
                }
                else {
                    this.memberOrg = memberOrg;
                }
                this.arcgisGroupBrowserFilter.emit(this.getEventDetail());
            } }, ["myOrg", "anotherOrg"].map((memberOrg) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-member-org": memberOrg, selected: memberOrg === this.memberOrg }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, this.i18n[memberOrg])))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisGroupBrowserFilterMembership = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisGroupBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserFilter", 7);
        this.hasIndoorsSpaces = false;
        this.membership = undefined;
        this.expanded = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.el);
        this.i18n = this.store.state.i18n.filterMembership;
        this.hasIndoorsSpaces = this.store.state.hasIndoorsSpaces;
    }
    async componentDidLoad() {
        if (this.membership) {
            this.arcgisGroupBrowserFilter.emit(this.getEventDetail());
        }
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_10__.a)("membership", this.store, () => (this.membership = null));
    }
    getQueryValue() {
        // https://devtopia.esri.com/webgis/arcgis-portal-app/issues/37831
        if (this.hasIndoorsSpaces) {
            return "membershipaccess:org";
        }
        switch (this.membership) {
            case "org":
                return "membershipaccess:org";
            case "collaboration":
                return "membershipaccess:collaboration";
            case "anyOrg":
                return "membershipaccess:NULL";
            default:
                return "";
        }
    }
    getEventDetail() {
        const { membership } = this;
        const value = this.getQueryValue();
        const label = this.i18n.label.replace("${label}", this.i18n[membership]);
        return { id: "membership", param: "q", value, label, membership };
    }
    render() {
        var _a;
        if (
        // https://devtopia.esri.com/webgis/arcgis-portal-app/issues/37831
        this.hasIndoorsSpaces ||
            (
            // https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/44198
            (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) === null || _a === void 0 ? void 0 : _a.isPortal)) {
            // This will relies on the event emitted in `componentDidLoad` to set the proper base q value
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: this.i18n.groupMembershipSetting, expanded: this.expanded, active: !!this.membership, filterID: "membership", onArcgisBrowserFilterRemove: () => {
                this.membership = null;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { selectionMode: "single", scale: "m", onCalciteTreeSelect: (event) => {
                var _a, _b;
                const node = event.target;
                const membership = ((_b = (_a = node.selectedItems) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.dataset.membership) || "";
                if (this.membership === membership) {
                    this.membership = null;
                }
                else {
                    this.membership = membership;
                }
                this.arcgisGroupBrowserFilter.emit(this.getEventDetail());
            } }, ["org", "collaboration", "anyOrg"].map((membership) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-membership": membership, selected: membership === this.membership }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, this.i18n[membership])))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisGroupBrowserFilterOwner = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisGroupBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserFilter", 7);
        this.hasIndoorsSpaces = false;
        this.searchUsername = undefined;
        this.owner = undefined;
        this.expanded = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.el);
        this.i18n = this.store.state.i18n.filterOwner;
        this.hasIndoorsSpaces = this.store.state.hasIndoorsSpaces;
    }
    async componentDidLoad() {
        var _a, _b;
        if (this.owner) {
            this.arcgisGroupBrowserFilter.emit(this.getEventDetail());
        }
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_10__.a)("owner", this.store, () => (this.owner = null));
        (_a = this.searchUsername) !== null && _a !== void 0 ? _a : (this.searchUsername = (_b = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) === null || _b === void 0 ? void 0 : _b.username);
    }
    getQueryValue() {
        var _a, _b, _c;
        const username = (_a = this.searchUsername) !== null && _a !== void 0 ? _a : (_b = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) === null || _b === void 0 ? void 0 : _b.username;
        const orgId = (_c = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) === null || _c === void 0 ? void 0 : _c.id;
        // We don't want to return empty string even if orgId is empty
        //  to make sure the query value still has the correct syntax
        // This mimics behavior on prod
        // TODO: find a better way to filter that out in R3
        if (!username) {
            return "";
        }
        switch (this.owner) {
            case "owner":
                return `owner:${username}`;
            case "inOrg":
                return `-owner:${username} orgid:${orgId}`;
            case "outsideOrg":
                // this magic SQL query gets all org ids and then removes the current org
                return `(orgid: [0 TO \{]) -orgid:${orgId}`;
            default:
                return "";
        }
    }
    getEventDetail() {
        const { owner, searchUsername: username } = this;
        const value = this.getQueryValue();
        const label = this.i18n.label.replace("${label}", owner === "owner" ? username : this.i18n[owner]);
        return { id: "owner", param: "q", value, label, owner, username };
    }
    getOwnerText(owner) {
        if (owner === "owner") {
            return this.searchUsername;
        }
        if (owner === "outsideOrg") {
            return this.i18n[(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_11__.a)(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) ? "someoneElse" : "outsideOrg"];
        }
        return this.i18n[owner];
    }
    searchUsernameChanged() {
        this.arcgisGroupBrowserFilter.emit(this.getEventDetail());
    }
    render() {
        const user = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user;
        const username = user === null || user === void 0 ? void 0 : user.username;
        if (!username) {
            return null;
        }
        const filters = (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_11__.a)(user)
            ? ["owner", "outsideOrg"]
            : ["owner", "inOrg", "outsideOrg"];
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: this.i18n.owner, expanded: this.expanded, active: !!this.owner, filterID: "owner", onArcgisBrowserFilterRemove: () => {
                this.owner = null;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { selectionMode: "single", scale: "m", onCalciteTreeSelect: (event) => {
                var _a, _b;
                const node = event.target;
                const owner = ((_b = (_a = node.selectedItems) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.dataset.owner) || "";
                if (this.owner === owner) {
                    this.owner = null;
                }
                else {
                    this.owner = owner;
                }
                this.arcgisGroupBrowserFilter.emit(this.getEventDetail());
            } }, filters
            .filter((value) => !(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal.isPortal || this.hasIndoorsSpaces) || value !== "outsideOrg")
            .map((owner) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-owner": owner, selected: owner === this.owner }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, this.getOwnerText(owner))))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "searchUsername": ["searchUsernameChanged"]
    }; }
};

async function getOrgSettingsGroupsQuery(portal) {
    var _a, _b, _c, _d, _e, _f;
    let queryStrings = [];
    const orgSettingsQueries = [
        // Org Settings > Gallery
        portal.featuredItemsGroupQuery,
        // Org Settings > Map
        portal.basemapGalleryGroupQuery,
        portal.templatesGroupQuery,
        portal["2DStylesGroupQuery"],
        (_a = portal.stylesGroupQuery) !== null && _a !== void 0 ? _a : (_b = portal.sourceJSON) === null || _b === void 0 ? void 0 : _b.stylesGroupQuery,
        (_c = portal.analysisLayersGroupQuery) !== null && _c !== void 0 ? _c : (_d = portal.sourceJSON) === null || _d === void 0 ? void 0 : _d.analysisLayersGroupQuery,
        // Org Settings > Groups > Configuriable Apps
        portal.galleryTemplatesGroupQuery
    ];
    // Org Settings > Home Page
    if ((0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.j)(portal)) {
        const homePageConfig = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.k)(portal);
        const contentGalleries = ((_e = homePageConfig === null || homePageConfig === void 0 ? void 0 : homePageConfig.content) === null || _e === void 0 ? void 0 : _e.filter((content) => content.type === "gallery" && !!content.groupId)) || [];
        if (contentGalleries.length > 0) {
            contentGalleries.forEach(({ groupId }) => {
                const query = `id:${groupId}`;
                queryStrings = addToQueryString(query, queryStrings);
            });
        }
    }
    else {
        orgSettingsQueries.push(portal.homePageFeaturedContent);
    }
    orgSettingsQueries.forEach((query) => {
        queryStrings = addToQueryString(query, queryStrings);
    });
    // Org Settings > Featured Groups
    portal.featuredGroups.forEach((featuredGroup) => {
        if (featuredGroup.id) {
            const query = `id:${featuredGroup.id}`;
            queryStrings = addToQueryString(query, queryStrings);
        }
        else {
            // in enterprise, some groups don't use ids, so commit the full assembled query
            const queryParts = Object.entries(featuredGroup).map((entry) => `${entry[0]}:"${entry[1]}"`);
            const query = `(${queryParts.join(" ")})`;
            queryStrings = addToQueryString(query, queryStrings, true);
        }
    });
    // Org Settings > Member Defaults
    const memberDefaults = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.l)(portal);
    (_f = memberDefaults === null || memberDefaults === void 0 ? void 0 : memberDefaults.groups) === null || _f === void 0 ? void 0 : _f.forEach((id) => {
        const query = `id:${id}`;
        queryStrings = addToQueryString(query, queryStrings);
    });
    return queryStrings.length > 0 ? `(${queryStrings.join(" OR ")})` : "";
}
function addToQueryString(query, queryStrings, allowNonId) {
    if (((query === null || query === void 0 ? void 0 : query.indexOf("id:")) !== 0 && !allowNonId) || queryStrings.includes(query)) {
        return [...queryStrings];
    }
    return [...queryStrings, query];
}

const ArcgisGroupBrowserFilterSpecialGroups = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisGroupBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserFilter", 7);
        this.hasIndoorsSpaces = false;
        this.specialGroup = undefined;
        this.expanded = undefined;
        this.options = [];
    }
    async componentWillLoad() {
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.el);
        this.i18n = this.store.state.i18n.filterSpecialGroups;
        this.hasIndoorsSpaces = this.store.state.hasIndoorsSpaces;
        this.validateOptions();
        (0,_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.o)("portal", () => this.validateOptions());
    }
    async validateOptions() {
        if (!_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) {
            return (this.options = []);
        }
        const settingsQuery = await getOrgSettingsGroupsQuery(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal);
        this.options = ["openData", "sharedUpdate", "distributed", "admin", "settings"].filter((option) => {
            return !((option === "openData" && _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal.isPortal) ||
                // https://devtopia.esri.com/webgis/arcgis-portal-app/issues/37831
                (option === "distributed" && this.hasIndoorsSpaces) ||
                // https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/45449 orgs with no settings groups configured don't need this option
                (option === "settings" && !settingsQuery));
        });
    }
    async componentDidLoad() {
        if (this.specialGroup) {
            this.arcgisGroupBrowserFilter.emit(await this.getEventDetail());
        }
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_10__.a)("specialGroups", this.store, () => (this.specialGroup = null));
    }
    async getQueryValue() {
        switch (this.specialGroup) {
            case "openData":
                return "isopendata:true";
            case "sharedUpdate":
                return "capabilities:updateitemcontrol";
            case "distributed":
                return "capabilities:distributed";
            case "admin":
                return "isleavingdisallowed:true";
            case "settings":
                return await getOrgSettingsGroupsQuery(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal);
            default:
                return "";
        }
    }
    async getEventDetail() {
        const { specialGroup } = this;
        const value = await this.getQueryValue();
        const label = this.i18n.label.replace("${label}", this.i18n[specialGroup]);
        return { id: "specialGroups", param: "q", value, label, specialGroups: specialGroup };
    }
    render() {
        if (!(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal)) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: this.i18n.title, expanded: this.expanded, active: !!this.specialGroup, filterID: "specialGroups", onArcgisBrowserFilterRemove: async () => {
                this.specialGroup = null;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { selectionMode: "single", scale: "m", onCalciteTreeSelect: async (event) => {
                var _a, _b;
                const node = event.target;
                const specialGroups = ((_b = (_a = node.selectedItems) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.dataset.specialGroups) || "";
                if (this.specialGroup === specialGroups) {
                    this.specialGroup = null;
                }
                else {
                    this.specialGroup = specialGroups;
                }
                this.arcgisGroupBrowserFilter.emit(await this.getEventDetail());
            } }, this.options.map((specialGroups) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-special-groups": specialGroups, selected: specialGroups === this.specialGroup }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, this.i18n[specialGroups], specialGroups === "settings" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-information", { style: { verticalAlign: "-.25rem", "--arcgis-information-min-width": "0" }, label: this.i18n.tooltipLabel, overlayPositioning: "fixed", placement: "bottom-end", paddedContent: true }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.i18n.tooltip))))))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisGroupBrowserFilters = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    }
    async componentWillLoad() {
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.el);
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filters", { store: this.store }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "top" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "top" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "bottom" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "bottom" }))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const arcgisGroupBrowserPaginationCss = ".wrapper{display:flex;justify-content:center;padding-left:0.5rem;padding-right:0.5rem;padding-top:2rem;padding-bottom:2rem}.hide{display:none}";

const ArcgisGroupBrowserPagination = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisGroupBrowserPage = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserPage", 7);
        this.total = undefined;
        this.start = undefined;
        this.num = 60;
    }
    async componentWillLoad() {
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.el);
    }
    render() {
        const { start, total, num, store } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-pagination", { start: start, total: total, num: num, store: store, onArcgisBrowserPage: (e) => this.arcgisGroupBrowserPage.emit(e.detail) }));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisGroupBrowserPagination.style = arcgisGroupBrowserPaginationCss;

async function fetchGroupMembers(groupId, portal, params = {}) {
    const restBase = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.g)(portal);
    const url = `${restBase}community/groups/${groupId}/userlist`;
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__.r)(url, params);
}

const arcgisGroupBrowserPreviewCss = ":host{display:flex;height:100%;width:100%;flex:1 1 0%;flex-direction:column;background-color:var(--calcite-color-background)}.preview__header{margin-inline-start:0.75rem}.preview__title{margin:0px;overflow-wrap:break-word;padding:0px;font-size:1rem;font-weight:500;color:var(--calcite-color-text-1);line-height:1.375}.title{margin-top:0.75rem;margin-bottom:0.75rem;padding:0px;font-size:1.125rem;font-weight:500;color:var(--calcite-color-text-1);word-wrap:break-word;word-break:break-word}.badges{margin-top:1rem}.badges[empty]{display:none}calcite-accordion-item{--calcite-accordion-item-padding:1rem 1rem;--calcite-accordion-item-background:var(--calcite-color-foreground-1);width:100%;box-sizing:border-box;border-bottom:1px solid var(--calcite-color-border-2)}.section{background-color:var(--calcite-color-background);padding:1rem;margin:0rem -1rem calc(-1rem - 1px);line-height:1.35}.section--tight{padding-top:0px;padding-bottom:0px;padding-left:0px;padding-right:0px}.section--centered{display:flex;width:100%;flex-direction:column;align-items:center;row-gap:0.75rem}.full-card-wrapper{padding-left:0.5rem;padding-right:0.5rem;padding-top:0.75rem}.details-title{margin-top:1rem;margin-bottom:0px;padding-bottom:0.25rem;padding-top:0px;font-size:0.75rem;font-weight:500;color:var(--calcite-color-text-3);--calcite-label-margin-bottom:0}.details-title:first-of-type{margin-top:0px}.details-title--label{padding-bottom:0px}.details-text{margin:0px;overflow-wrap:break-word;padding:0px;font-size:0.875rem;font-weight:400;color:var(--calcite-color-text-1)}.details-text a{color:var(--calcite-color-text-link)}.details--text-empty{font-weight:400;color:var(--calcite-color-text-3)}.details-link{margin-top:0.75rem}.description{overflow-wrap:break-word;line-height:1.35}.description *{font-size:0.875rem !important}.icon-xl{height:3rem;width:3rem}.content-card{margin-bottom:0.25rem}.content-thumbnail{margin-top:auto;margin-bottom:auto;width:100%;margin-inline-end:1rem}.settings-text{margin-top:-0.25rem;margin-bottom:-0.25rem;font-size:0.875rem;font-weight:400}.footer-actions{display:flex;width:100%;flex-direction:column;row-gap:0.5rem;padding:1rem}.block--padded{padding-bottom:1rem;padding-inline-start:0.25rem}";

const ArcgisGroupBrowserPreview = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisGroupBrowserPreviewClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserPreviewClose", 7);
        this.arcgisGroupBrowserInternalUIAction = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserInternalUIAction", 7);
        this.group = undefined;
        this.portal = undefined;
        this.user = undefined;
        this.hidePreviewFooter = false;
        this.showBadges = true;
        this.currentResponse = undefined;
        this.fullGroup = undefined;
        this.userInfo = undefined;
        this.content = undefined;
        this.managers = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.el);
        this.lang = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_5__.a)(this.el);
        this.i18n = this.store.state.i18n.preview;
        this.init();
    }
    updatePreview() {
        this.init();
    }
    async init() {
        var _a, _b, _c;
        if (!this.group) {
            return;
        }
        const { group, portal, user } = this;
        this.isGroupOwner = group.owner === (user === null || user === void 0 ? void 0 : user.username);
        this.fullGroup = null;
        this.fullGroup = await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.m)((0,_items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_12__.f)(group.id, this.portal), 600);
        this.userInfo = await (0,_user_0fa9ff5a_js__WEBPACK_IMPORTED_MODULE_14__.f)(group.owner, portal);
        const contentQuery = this.getTypeQuery(this.fullGroup);
        this.content = await (((_b = (_a = this.fullGroup.properties) === null || _a === void 0 ? void 0 : _a.featuredItemIds) === null || _b === void 0 ? void 0 : _b.length) &&
            this.fullGroup.properties.isFeatured
            ? queryFeaturedContent(portal, group.id, this.fullGroup.properties.featuredItemIds)
            : queryGroupContent(portal, group.id, Object.assign({ sortField: this.fullGroup.sortField || "modified", sortOrder: this.fullGroup.sortOrder || "desc" }, (contentQuery ? { q: contentQuery } : {}))));
        this.managers = await this.fetchGroupAdmins(portal, group);
        (_c = this.flowItem) === null || _c === void 0 ? void 0 : _c.setFocus();
    }
    handleAccordionItemClick(element, details) {
        this.arcgisGroupBrowserInternalUIAction.emit({
            action: element.expanded ? "expand" : "collapse",
            category: "group panel action",
            details
        });
    }
    closePreview() {
        this.fullGroup = null;
        this.arcgisGroupBrowserInternalUIAction.emit({
            action: "close panel",
            category: "group panel action"
        });
        this.arcgisGroupBrowserPreviewClose.emit();
    }
    handleDetailsClick(details) {
        this.arcgisGroupBrowserInternalUIAction.emit({
            action: "click",
            category: "group panel action",
            details
        });
    }
    renderHeader() {
        var _a;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header-content", class: "preview__header" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", { class: "preview__title" }, (_a = this.group) === null || _a === void 0 ? void 0 : _a.title)));
    }
    isAccordionItem(element) {
        return element.tagName === "CALCITE-ACCORDION-ITEM";
    }
    getViewByText(group) {
        switch (group.access) {
            case "public":
                return this.i18n.everyone;
            case "private":
                return this.i18n.onlyMembers;
            case "org":
                return this.i18n.onlyOrganization;
            case "shared":
                return this.i18n.onlyOrganizationAndPartners;
        }
    }
    getJoinByText(group) {
        if (group.autoJoin) {
            return this.i18n.byAutojoin;
        }
        if (group.isInvitationOnly) {
            return this.i18n.byInvitation;
        }
        if (group.providerGroupName) {
            return this.i18n.byEnterprise;
        }
        return this.i18n.byRequest;
    }
    async fetchGroupAdmins(portal, group) {
        var _a, _b;
        const admins = (_b = (_a = (await fetchGroupMembers(group.id, portal, { memberType: "admin" }))) === null || _a === void 0 ? void 0 : _a.users) !== null && _b !== void 0 ? _b : [];
        const owner = admins.find((admin) => admin.username === group.owner);
        return [owner, ...admins.filter((admin) => admin.username !== owner.username)];
    }
    getTypeQuery(group) {
        var _a;
        if ((_a = group.displaySettings) === null || _a === void 0 ? void 0 : _a.itemTypes) {
            const itemType = group.displaySettings.itemTypes.split(",")[0].toLowerCase();
            switch (itemType) {
                case "application":
                    return _items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_12__.i.applications.q;
                case "web map":
                    return _items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_12__.i.maps.q;
                case "web scene":
                    return _items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_12__.i.scenes.q;
                case "locator package":
                    return _items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_12__.i.tools.q;
                case "csv":
                    return _items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_12__.i.files.q;
                case "layer":
                    return _items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_12__.i.layers.q;
                default:
                    return "";
            }
        }
    }
    render() {
        const { group, fullGroup, i18n, managers, portal, content, showBadges, user } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { closable: true, loading: !fullGroup, onCalciteFlowItemClose: () => this.closePreview(), ref: (el) => (this.flowItem = el) }, this.renderHeader(), fullGroup && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion", { "icon-position": "start", appearance: "transparent", key: group.id, class: "accordion" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { heading: i18n.overview, expanded: Boolean(fullGroup.snippet), ref: (el) => {
                this.overviewElement = el;
            }, onClick: (e) => this.isAccordionItem(e.target) &&
                this.handleAccordionItemClick(this.overviewElement, "overview") }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, fullGroup.snippet ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "details-text" }, fullGroup.snippet)) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "details-text details-text--empty" }, i18n.noSummary)), showBadges && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-badges", { group: fullGroup, portal: portal, showTooltips: false, width: "full", scale: "s", appearance: "outline-fill", class: "badges" })))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { heading: i18n.description, key: "description", ref: (el) => {
                this.descriptionElement = el;
            }, onClick: (e) => this.isAccordionItem(e.target) &&
                this.handleAccordionItemClick(this.descriptionElement, "description") }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, fullGroup.description ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "description", innerHTML: (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_3__.s)(fullGroup.description) })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "details-text details-text--empty" }, i18n.noDescription)))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { heading: i18n.content.replace("${count}", content ? `${content.total}` : "0"), expanded: true, ref: (el) => {
                this.contentElement = el;
            }, onClick: (e) => this.isAccordionItem(e.target) &&
                this.handleAccordionItemClick(this.contentElement, "content") }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { section: true, "section--tight": (content === null || content === void 0 ? void 0 : content.total) > 0 } }, (content === null || content === void 0 ? void 0 : content.total) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "full-card-wrapper" }, content.results.map((item) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-browser-preview-card", { class: "content-card", item: item, portal: portal, user: user, key: item.id }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "details-link block--padded" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { href: `${(0,_portal_660bb43a_js__WEBPACK_IMPORTED_MODULE_13__.g)(portal)}/home/group.html?id=${group.id}&view=list#content`, onClick: () => {
                this.handleDetailsClick("view all content");
            } }, i18n.viewContent)))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section--centered" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "l", icon: "files", class: "icon-xl details-text--empty" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "details-text details-text--empty" }, i18n.noContent))))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { heading: i18n.groupManagers.replace("${count}", managers ? `${managers.length}` : "0"), expanded: true, ref: (el) => {
                this.managersElement = el;
            }, onClick: (e) => this.isAccordionItem(e.target) &&
                this.handleAccordionItemClick(this.managersElement, "managers") }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section section--tight" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "full-card-wrapper" }, managers === null || managers === void 0 ? void 0 :
            managers.map((admin) => {
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-card", { key: admin.username, class: "content-card" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-user-avatar", { heading: admin.username === group.owner
                        ? i18n.groupOwner.replace("${fullName}", (0,_user_0fa9ff5a_js__WEBPACK_IMPORTED_MODULE_14__.g)(admin, this.lang))
                        : admin.fullName, showName: true, user: admin, description: admin.username, portal: portal })));
            }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "details-link block--padded" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { href: `${(0,_portal_660bb43a_js__WEBPACK_IMPORTED_MODULE_13__.g)(portal)}/home/group.html?id=${group.id}#members`, onClick: () => {
                this.handleDetailsClick("open members page");
            } }, i18n.openMembers))))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { heading: i18n.settings, expanded: this.isGroupOwner, ref: (el) => {
                this.settingsElement = el;
            }, onClick: (e) => this.isAccordionItem(e.target) &&
                this.handleAccordionItemClick(this.settingsElement, "settings") }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h4", { class: "details-title" }, i18n.viewableBy, ":"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "settings-text" }, this.getViewByText(fullGroup)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h4", { class: "details-title" }, i18n.contributors, ":"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "settings-text" }, fullGroup.isViewOnly ? i18n.onlyOwnerManager : i18n.allMembers), this.isGroupOwner && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h4", { class: "details-title" }, i18n.joinMethod, ":"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "settings-text" }, this.getJoinByText(fullGroup)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "details-link" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { href: `${(0,_portal_660bb43a_js__WEBPACK_IMPORTED_MODULE_13__.g)(portal)}/home/group.html?id=${group.id}#settings`, onClick: () => {
                this.handleDetailsClick("open settings");
            } }, i18n.openSettings))))))))), !this.hidePreviewFooter && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer", class: "footer-actions" }, portal && group && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { onClick: () => {
                var _a;
                const { currentResponse, group } = this;
                const index = (_a = currentResponse === null || currentResponse === void 0 ? void 0 : currentResponse.results) === null || _a === void 0 ? void 0 : _a.findIndex((result) => result.id === group.id);
                const position = index + currentResponse.start;
                this.arcgisGroupBrowserInternalUIAction.emit({
                    action: "view group details",
                    category: "group panel action",
                    position
                });
            }, href: `${(0,_portal_660bb43a_js__WEBPACK_IMPORTED_MODULE_13__.g)(portal)}/home/group.html?id=${group.id}`, kind: "neutral", appearance: "solid", width: "full" }, i18n.viewDetails)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "footer-action" })))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "group": ["updatePreview"]
    }; }
};
ArcgisGroupBrowserPreview.style = arcgisGroupBrowserPreviewCss;

const arcgisGroupBrowserPreviewCardCss = ":host{display:block;min-width:0px}.card{position:relative;box-sizing:border-box;display:flex;height:100%;width:100%;flex-direction:column;color:var(--calcite-color-text-1);opacity:0;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);transition-duration:150ms;outline-color:transparent;background-color:var(--calcite-color-foreground-1);transition-property:background-color, outline, outline-offset, opacity;border:1px solid var(--calcite-color-border-3)}.card:focus{z-index:10;outline:2px solid var(--calcite-color-brand);outline-offset:-2px}.card--loaded{opacity:1}.card--selected{border-color:var(--calcite-color-brand)}.card--hoverable{cursor:pointer}.card__top{padding:0.75rem}.card__upper{flex:1 1 0%;background-color:var(--calcite-color-foreground-1);transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s}.card--hoverable .card__upper:hover{background-color:var(--calcite-color-background)}.card__upper--link{color:var(--calcite-color-text-1);text-decoration-line:none;outline-color:transparent}.card__upper--link:focus{z-index:10;outline:2px solid var(--calcite-color-brand);outline-offset:2px}.card__content{display:flex;min-width:0px;flex:1 1 0%;flex-direction:column}.card__details{margin-top:0.25rem;display:flex;flex-direction:row}.card__detail{font-size:0.75rem;color:var(--calcite-color-text-2)}.card__footer{margin-top:auto;display:flex;align-items:center;background-color:var(--calcite-color-foreground-1);padding-left:0.75rem;padding-right:0.75rem;padding-top:0.5rem;padding-bottom:0.5rem;border-top:1px solid var(--calcite-color-border-2)}.card__footer__start{display:flex;min-width:0px;flex:1 1 0%;flex-direction:row;align-items:center;overflow:hidden;margin-inline-end:0.75rem}.card__footer__start--owner{margin-inline-start:-0.25rem}.card__profile-wrap{box-sizing:border-box;max-width:100%;padding:0.25rem}.card__summary{margin:0px;padding:0px;font-size:0.875rem;color:var(--calcite-color-text-2)}.card__divider{display:flex;align-items:center;flex:0 0 auto}.card__divider:not([empty]):before{content:\"\";height:1.25rem;width:1px;background-color:var(--calcite-color-border-1);margin-inline:0.75rem}.card__divider:first-child:before{display:none}.card-flex{display:flex}.card-flex-1{min-width:0px;flex:1 1 0%}.screen-readers-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.card__title{margin-top:0px;margin-bottom:0px;height:2rem;overflow:hidden;overflow-wrap:break-word;padding-top:0px;padding-bottom:0px;font-size:0.875rem;font-weight:500;line-height:1.15;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical}.card__title--padded{margin-bottom:0.5rem}.card__snippet{margin:0px;margin-bottom:0.75rem;flex:1 1 0%;padding:0px;font-size:0.875rem}.card__badges--stacked{margin-top:0.5rem}.card__thumbnail{margin:0px;box-sizing:content-box;width:4rem;padding:0px;padding-inline-start:0.5rem}.card__owner{min-width:0px}";

const ArcgisGroupBrowserPreviewCard = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisGroupBrowserInternalUIAction = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserInternalUIAction", 7);
        this.arcgisGroupBrowserPreviewCardSelect = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserPreviewCardSelect", 7);
        var _a;
        this.handleCardClick = () => {
            // when using the cards as a link, don't do any special handling
            if (this.link) {
                return;
            }
            this.arcgisGroupBrowserPreviewCardSelect.emit(this.item);
        };
        this.item = undefined;
        this.portal = undefined;
        this.user = undefined;
        this.api = 4;
        this.baseUrl = (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config) === null || _a === void 0 ? void 0 : _a.baseUrl;
        this.link = undefined;
        this.newTab = undefined;
        this.showThumbnail = true;
        this.showOwner = true;
        this.showItemType = true;
        this.showDateUpdated = false;
        this.showSummary = false;
        this.showBadges = false;
        this.showOwnerPopup = false;
        this.interactive = false;
        this.hover = undefined;
        this.updatedText = "";
        this.loaded = undefined;
    }
    /* Calling this setFocus causes calcite to focus here when the user popup is closed... */
    async restoreFocus() {
        if (this.link && this.linkEl) {
            this.linkEl.focus();
            return;
        }
        if (this.sectionEl) {
            this.sectionEl.focus();
            return;
        }
    }
    async componentWillLoad() {
        var _a, _b, _c;
        //this.store = getGroupBrowserStore(this.el);
        //this.i18n = this.store.state.i18n.previewCard;
        this.updatedText = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_15__.a)(this.item.modified);
        this.portal = (_a = this.portal) !== null && _a !== void 0 ? _a : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal;
        this.user = (_b = this.user) !== null && _b !== void 0 ? _b : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user;
        this.api = (_c = this.api) !== null && _c !== void 0 ? _c : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.api;
    }
    async componentDidLoad() {
        await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(100);
        this.loaded = true;
    }
    render() {
        var _a, _b;
        const { item, user, portal, api, 
        //i18n,
        loaded, showDateUpdated, showItemType, showOwner, showOwnerPopup, showBadges, showSummary, showThumbnail, interactive, link, newTab } = this;
        const baseUrl = (_a = this.baseUrl) !== null && _a !== void 0 ? _a : (_b = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config) === null || _b === void 0 ? void 0 : _b.baseUrl;
        const CardTag = this.link ? "a" : "div";
        const linkAttributes = Object.assign({ href: link }, (newTab ? { target: "_blank", rel: "noopener noreferrer" } : {}));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", Object.assign({ class: {
                "card": true,
                "card--hoverable": interactive,
                "card--loaded": loaded
            } }, (interactive ? { onMouseOver: () => (this.hover = true) } : {}), (interactive ? { onMouseOut: () => (this.hover = false) } : {}), (link ? {} : { onClick: this.handleCardClick }), { ref: (el) => (this.sectionEl = el) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-top" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(CardTag, Object.assign({ class: { "card__upper": true, "card__upper--link": !!link } }, (link ? linkAttributes : {}), { ref: (el) => (this.linkEl = el) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "card-flex card__top" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "card-flex-1" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "card-flex" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "card__content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", { class: {
                "card__title": true,
                "card__title--padded": showItemType || (showSummary && !!item.snippet)
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "card__title__span" }, item.title)), showSummary && item.snippet && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "card__summary" }, item.snippet.length > 250
            ? `${item.snippet.substring(0, 250)}…`
            : item.snippet)), showItemType && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-type", { scale: "s", item: item, portal: portal }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "card__details" }, showDateUpdated && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: {
                "card__detail": true,
                "card__divider": true
            } }, this.updatedText)), showBadges && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-badges", { item: item, user: user, portal: portal, width: "narrow", showTooltips: true, class: {
                "card__badges": true,
                "card__divider": true
            }, scale: "s" })))), showThumbnail && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("figure", { class: "card__thumbnail" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-card-thumbnail", { item: item, user: user, portal: portal }))))))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "card__footer", onClick: (e) => {
                e.stopPropagation();
            }, onKeyPress: (e) => {
                if (e.key === "Enter" || e.key == " ") {
                    e.stopPropagation();
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                "card__footer__start": true,
                "card__footer__start--owner": showOwner
            } }, showOwner && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "card__profile-wrap", onClick: (e) => {
                e.preventDefault();
                e.stopPropagation();
            } }, showOwnerPopup ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-user-popup", { underline: true, username: item.owner, api: api, portal: portal, baseUrl: baseUrl, showAvatar: false, class: "card__owner", scale: "s", onArcgisUserPopupInternalUIAction: (e) => {
                e.stopPropagation();
                this.arcgisGroupBrowserInternalUIAction.emit(e.detail);
            } })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-user-avatar", { slot: "footer-start", scale: "s", showName: true, showAvatar: false, username: item.owner, portal: portal }))))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "actions-end" })))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisGroupBrowserPreviewCard.style = arcgisGroupBrowserPreviewCardCss;

const arcgisGroupBrowserSearchCss = ":host{position:relative;display:block}.search{pointer-events:none;position:absolute;z-index:10;margin-top:1rem;font-size:0.875rem;color:var(--calcite-color-text-1);inset-inline-start:1.5rem}.x{position:absolute;top:0px;z-index:10;margin-top:0.25rem;cursor:pointer;border-style:none;padding:0.5rem;color:var(--calcite-color-text-1);outline:2px solid transparent;outline-offset:2px;inset-inline-end:0.25rem;background:transparent}.input{position:relative;z-index:0;box-sizing:border-box;display:block;height:3rem;width:100%;border-style:none;padding-top:1rem;padding-bottom:1rem;padding-left:3rem;padding-right:3rem;font-size:0.875rem;color:var(--calcite-color-text-1);--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;transition-duration:150ms;background-color:transparent;border-bottom:2px solid transparent;font-family:inherit}.input::-webkit-search-cancel-button{display:none}.input::-ms-clear{display:none}.input:focus{--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);outline:2px solid transparent;outline-offset:2px;border-bottom-color:var(--calcite-color-brand)}";

const ArcgisGroupBrowserSearch = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisGroupBrowserSearch = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserSearch", 7);
        this.arcgisGroupBrowserSearchInput = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserSearchInput", 7);
        this.term = undefined;
        this.placeholder = undefined;
        this.showClear = false;
    }
    async componentWillLoad() {
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.el);
        this.i18n = this.store.state.i18n.search;
    }
    render() {
        const { term, placeholder } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-search", { term: term, placeholder: placeholder || this.i18n.label, onArcgisBrowserSearch: (e) => this.arcgisGroupBrowserSearch.emit(e.detail), onArcgisBrowserSearchInput: (e) => this.arcgisGroupBrowserSearchInput.emit(e.detail) })));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisGroupBrowserSearch.style = arcgisGroupBrowserSearchCss;

const ArcgisGroupBrowserSort = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisGroupBrowserSort = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisGroupBrowserSort", 7);
        var _a;
        this.options = ["title", "relevance", "modified"];
        this.field = ((_a = this.options) === null || _a === void 0 ? void 0 : _a[0]) || "relevance";
        this.order = undefined;
        this.activeField = undefined;
        this.activeOrder = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.el);
        this.activeField = this.field;
    }
    componentDidLoad() {
        this.arcgisGroupBrowserSort.emit({
            sortField: this.field,
            sortOrder: this.order || (0,_utils_2f459d6d_js__WEBPACK_IMPORTED_MODULE_16__.a)(this.field)
        });
    }
    updateSortField(field) {
        this.activeField = field;
        this.activeOrder = (0,_utils_2f459d6d_js__WEBPACK_IMPORTED_MODULE_16__.a)(field);
        this.arcgisGroupBrowserSort.emit({
            sortField: this.activeField,
            sortOrder: this.activeOrder
        });
    }
    updateSortOrder(order) {
        this.activeOrder = order;
        this.arcgisGroupBrowserSort.emit({
            sortField: this.activeField,
            sortOrder: this.activeOrder
        });
    }
    render() {
        const { activeField, activeOrder, field, order, options } = this;
        const selectedField = activeField || (options.includes(field) ? field : options[0]);
        const selectedOrder = activeOrder || order;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-sort", { store: this.store, field: selectedField, order: selectedOrder, options: options, onArcgisBrowserSortFieldChange: (e) => this.updateSortField(e.detail), onArcgisBrowserSortOrderChange: (e) => this.updateSortOrder(e.detail) })));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisGroupBrowserTopBar = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    }
    async componentWillLoad() {
        this.store = (0,_store_da3fccd5_js__WEBPACK_IMPORTED_MODULE_9__.g)(this.el);
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-top-bar", { store: this.store }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content-start" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-start" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "search" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "search" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content-end" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-end" })))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};



//# sourceMappingURL=arcgis-group-browser_16.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isSubscriber),
/* harmony export */   b: () => (/* binding */ isPremium),
/* harmony export */   c: () => (/* binding */ canUpdateItem),
/* harmony export */   d: () => (/* binding */ itemsBelongToUserOrg),
/* harmony export */   g: () => (/* binding */ getItemHomeAppUrl),
/* harmony export */   i: () => (/* binding */ isOwner),
/* harmony export */   u: () => (/* binding */ userIsItemAdmin)
/* harmony export */ });
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


function isEsri(item) {
    var _a;
    return !!((_a = item.owner) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes("esri"));
}
function isPremium(item) {
    var _a;
    return isEsri(item) && !!((_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("Requires Credits"));
}
function isSubscriber(item) {
    var _a;
    return isEsri(item) && !!((_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("Requires Subscription"));
}
function isOwner(item, user) {
    return item.owner === user.username;
}
/**
 * Can the user update the item
 */
function canUpdateItem(item, user) {
    return userIsItemAdmin(item, user) || item.itemControl === "update";
}
/**
 * Is the user either an owner or admin of the item
 */
function userIsItemAdmin(item, user) {
    return isOwner(item, user) || isItemAdmin(item, user);
}
/**
 * Does the user have admin capabilities on this item
 */
function isItemAdmin(item, user) {
    var _a;
    // if this flag is already set (probably home app), use it
    if (item.isAdmin != null) {
        return !!item.isAdmin;
    }
    const itemOwner = item.owner;
    const itemControlAdmin = item.itemControl === "admin";
    const esriUsers = ["esri_livingatlas", "esri_demographics", "esri_boundaries"];
    if (((_a = item.portal) === null || _a === void 0 ? void 0 : _a.isPortal) &&
        !isOwner(item, user) &&
        itemControlAdmin &&
        itemOwner.includes("esri_") &&
        // portal incorrectly returns "itemControl="admin" for esri owned items
        !esriUsers.includes(itemOwner)) {
        return false;
    }
    return itemControlAdmin;
}
const itemsBelongToUserOrg = (items, user) => {
    return !!user.orgId && items.every((item) => item.isOrgItem);
};
const getItemHomeAppUrl = (itemId, baseUrl) => `${(0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_0__.a)(baseUrl)}item.html?id=${itemId}`;



//# sourceMappingURL=item-3535552d.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-660bb43a.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-660bb43a.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ getPortalBaseUrl)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
function getPortalBaseUrl(portal) {
    const { customBaseUrl, portalHostname, urlKey } = portal;
    const { protocol } = window.location;
    const url = urlKey ? `${urlKey}.${customBaseUrl}` : portalHostname;
    return `${protocol}//${url}`;
}



//# sourceMappingURL=portal-660bb43a.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isPublicUser),
/* harmony export */   b: () => (/* binding */ isOrgAdmin),
/* harmony export */   c: () => (/* binding */ isHostedPortal),
/* harmony export */   d: () => (/* binding */ isCustomRole),
/* harmony export */   e: () => (/* binding */ canUpdateOrgGroups),
/* harmony export */   f: () => (/* binding */ canUpdateItemCategories),
/* harmony export */   g: () => (/* binding */ canManageCollaborations),
/* harmony export */   h: () => (/* binding */ isOrgUser),
/* harmony export */   i: () => (/* binding */ isDeveloper),
/* harmony export */   j: () => (/* binding */ canShareItemToGroup),
/* harmony export */   k: () => (/* binding */ canShareItemToOrg),
/* harmony export */   l: () => (/* binding */ adminCanShareOthersItemToGroup),
/* harmony export */   m: () => (/* binding */ canShareOthersItemsToOrg),
/* harmony export */   n: () => (/* binding */ canShareItemToPublic),
/* harmony export */   o: () => (/* binding */ canShareOthersItemsToPublic),
/* harmony export */   p: () => (/* binding */ hasAdminSharePrivilege),
/* harmony export */   q: () => (/* binding */ canViewOthersOrgItems)
/* harmony export */ });
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const getUserRole = (user) => {
    var _a, _b, _c;
    return typeof (user === null || user === void 0 ? void 0 : user.role) === "string" && !!(user === null || user === void 0 ? void 0 : user.role)
        ? user === null || user === void 0 ? void 0 : user.role
        : (_b = (_a = user === null || user === void 0 ? void 0 : user.roleId) !== null && _a !== void 0 ? _a : user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : (_c = user === null || user === void 0 ? void 0 : user.sourceJSON) === null || _c === void 0 ? void 0 : _c.id;
};
function isPublicUser(user) {
    return user && !user.orgId;
}
function isHostedPortal(portal) {
    return !portal.isPortal || !!portal.isBackedBySDS;
}
function isDeveloper(subscriptionInfo) {
    const devSubscriptionTypes = ["Trial Developer", "Developer", "Developer Subscription"];
    return devSubscriptionTypes.includes(subscriptionInfo === null || subscriptionInfo === void 0 ? void 0 : subscriptionInfo.type);
}
function isOrgAdmin(user) {
    return getUserRole(user) === "org_admin" || getUserRole(user) === "account_admin";
}
function isOrgUser(user) {
    return getUserRole(user) === "org_user" || getUserRole(user) === "account_user";
}
function isCustomRole(user) {
    // The Home App collapse the `roleId` and `role` into a single `id` property, that's why
    //  https://devtopia.esri.com/WebGIS/arcgis-portal-app/blob/master/src/js/arcgisonline/sharing/dijit/Role.ts#L469 works
    // In practice, we only need to check if `roleId` exist
    //  https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/44682#issuecomment-4146866
    return !!(user === null || user === void 0 ? void 0 : user.roleId) && user.roleId.length > 0;
}
/**
 * Checks whether the privilege "portal:admin:updateItemCategorySchema" is granted.
 */
function canUpdateItemCategories(user) {
    var _a;
    return !!((_a = user === null || user === void 0 ? void 0 : user.privileges) === null || _a === void 0 ? void 0 : _a.includes("portal:admin:updateItemCategorySchema"));
}
/**
 * Checks whether the privilege "portal:admin:updateGroups" is granted.
 */
function canUpdateOrgGroups(user) {
    var _a;
    return !!((_a = user === null || user === void 0 ? void 0 : user.privileges) === null || _a === void 0 ? void 0 : _a.includes("portal:admin:updateGroups"));
}
/**
 * Checks whether the user is allowed to update other user's items in their organization.
 */
function canUpdateOrgItems(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:updateItems");
}
/**
 * Checks to ensure the portal is an organization portal
 */
function isOrgPortal(portal) {
    return !!(portal.urlKey && portal.customBaseUrl) || !!portal.isPortal;
}
/**
 * Checks whether the user is allowed to share their item to groups
 */
function canShareItemToGroup(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToGroup");
}
/**
 * Checks whether the user can share an item on a given portal
 */
function canShare(user, portal) {
    return (!isOrgPortal(portal) ||
        canShareItemToGroup(user) ||
        canShareItemToOrg(user) ||
        (!!portal.canSharePublic && canShareItemToPublic(user)));
}
/**
 * Checks whether the user is allowed to share their item ot the organization.
 */
function canShareItemToOrg(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToOrg");
}
/**
 * Checks whether the user is allowed to share their item to public
 */
function canShareItemToPublic(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToPublic");
}
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItemsToOrg(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToOrg");
}
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItemsToPublic(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToPublic");
}
/**
 * Checks whether the user can share other user's items
 */
function adminCanShareOthersItemToGroup(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToGroup");
}
/**
 * Checks whether the user is in an allowed organization and has the power to manage collaborations
 */
function canManageCollaborations(config, user, portal, subscriptionInfo) {
    const excludedOrgTypes = ["Trial", "Trial Press", "Trial Developer", "Developer Subscription", "Evaluation"];
    const isValidOrgType = subscriptionInfo && !excludedOrgTypes.includes(subscriptionInfo.type);
    const hasPrivilege = ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:manageCollaborations");
    return !!((config === null || config === void 0 ? void 0 : config.collaborationsEnabled) &&
        user &&
        (isOrgAdmin(user) || hasPrivilege) &&
        ((portal === null || portal === void 0 ? void 0 : portal.isPortal) || isValidOrgType));
}
/**
 * Checks whether the user can view other organization users' items
 */
function canViewOrgItems(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:viewItems");
}
/**
 * Checks whether the user can view other organization users' items
 */
function canViewOthersOrgItems(user) {
    return !!user && (!isCustomRole(user) || (isCustomRole(user) && canViewOrgItems(user)));
}
// TODO: add unit tests
const hasAdminSharePrivilege = ({ items, user, portal }) => {
    const item = items[0];
    // enterprise incorrectly returns items owned by "esri_" as item control admin (WebGIS/arcgis-portal-app#38695)
    const owner = item.owner;
    const whitelistOwner = ["esri_livingatlas"];
    if (portal.isPortal && owner !== user.username && owner.includes("esri_") && !whitelistOwner.includes(owner)) {
        return false;
    }
    const isOwnerOrAdmin = (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.u)(item, user);
    const isCustom = isCustomRole(user);
    const canShareOrgItems = canShareOthersItems(user);
    const canUpdateAndShare = (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.c)(item, user) &&
        canUpdateOrgItems(user) &&
        !isCustom &&
        (canShare(user, portal) || canShareOthersItems(user));
    // if it's the item owner or admin, or custom admin who can share
    return isOwnerOrAdmin || canUpdateAndShare || ((0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.d)(items, user) && canShareOrgItems);
};
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItems(user) {
    return adminCanShareOthersItemToGroup(user) || canShareOthersItemsToOrg(user) || canShareOthersItemsToPublic(user);
}



//# sourceMappingURL=privileges-5c382f61.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/query-d62660d4.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/query-d62660d4.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   H: () => (/* binding */ HIDDEN_ITEMS_QUERY)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const HIDDEN_ITEMS_QUERY = `-type:"Code Attachment" -type:"Featured Items" -type:"Symbol Set" -type:"Color Set" -type:"Windows Viewer Add In" -type:"Windows Viewer Configuration" -type:"Map Area" -typekeywords:"MapAreaPackage" -type:"Indoors Map Configuration" -typekeywords:"SMX"`;



//# sourceMappingURL=query-d62660d4.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-da3fccd5.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-da3fccd5.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ groupBrowserState),
/* harmony export */   g: () => (/* binding */ getGroupBrowserStore)
/* harmony export */ });
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./store-8b1b0846.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



function getGroupBrowserStore(el) {
    return (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_1__.g)(el, "arcgis-group-browser");
}
const GroupBrowserStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__.c)({ filters: {} });
const groupBrowserState = GroupBrowserStore.state;



//# sourceMappingURL=store-da3fccd5.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/string-58a5fef3.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/string-58a5fef3.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ cleanSearchTerm)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


function cleanSearchTerm(term = "") {
    // sanitize input if it contains html
    const sanitizedSearchTerm = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.s)(term);
    // escape question marks, angle brackets, square brackets, etc
    const escapedTerm = sanitizedSearchTerm.replace(/[<>\/\\[\]\?]/g, "\\$&");
    return escapedTerm.trim();
}



//# sourceMappingURL=string-58a5fef3.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,