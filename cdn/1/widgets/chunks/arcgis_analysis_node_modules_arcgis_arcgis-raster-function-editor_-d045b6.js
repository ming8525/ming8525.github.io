"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-d045b6"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.ro-db6b4694.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.ro-db6b4694.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "OK.";
const cancel = "Anulare";
const enterURL = "Introduceți URL serviciu de imagini";
const serviceURL = "URL serviciu";
const selectRaster = "Selectați raster";
const failedToLoadLayer = "A eșuat încărcarea Stratului tematic";
const loadingLayer = "Se încarcă stratul";
const selectFeature = "Selectare strat tematic de obiecte spațiale";
const enterFURL = "Introducere URL serviciu de obiecte spațiale";
const addRaster = "Adăugați variabila raster";
const addScalar = "Adăugare constantă";
const raster = "Raster";
const scalar = "Scalar";
const defaultModelName = "Şablon funcţie raster";
const general = "Informații generale";
const parameters = "Parametri";
const variables = "Variabile";
const name = "Nume";
const description = "Descriere";
const parameter = "Parametru";
const isPublic = "IsPublic";
const isDataset = "IsDataset";
const unknownPixelType = "Necunoscut";
const outputPixelType = "Tip pixeli de ieşire";
const u8PixelType = "8 Bit nesemnat";
const s8PixelType = "8 Bit Semnat";
const u16PixelType = "16 Bit nesemnat";
const s16PixelType = "16 Bit Semnat";
const u32PixelType = "32 Bit nesemnat";
const s32PixelType = "32 Bit Semnat";
const f32PixelType = "32 Bit Mobil";
const f64PixelType = "64 Bit Dublu";
const properties = "Proprietăți";
const multidimensionalRules = "Reguli multidimensionale";
const matchVariables = "Variabile de potrivire";
const unionDimensions = "Dimensiuni de uniune";
const rasterFunctionEditor = {
	invalidRFTMessage: "Șablonul de funcție raster nu este valabil.",
	rfxArgsEditor: {
		outputRaster: "Raster ieșire",
		raster: "Raster",
		unsupportedDataTypeWarning: "Următoarele argumente nu sunt afişate, deoarece acestea nu sunt acceptate în prezent.",
		unsupportedFunction: "Conține funcție (funcții) de raster neacceptată(e) momentan."
	},
	rfxRasterInput: {
		selectLayer: "Selectați stratul tematic",
		browseLayers: "Răsfoire straturi tematice",
		rfxVariable: "Funcția raster variabilă"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Metodă",
		bandLabel: "Bandă",
		combinationLabel: "Combinaţie"
	},
	rfxRemapGrid: {
		minimum: "Minim",
		maximum: "Maxim",
		output: "Ieşire",
		noData: "NoData",
		remapValuesLabel: "Recartografiere valori"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Variabile raster",
		deleteSelectedVars: "Eliminare variabile selectate"
	},
	rfxClippingGeometry: {
		clippingLayer: "Strat tematic de decupare",
		clippingRaster: "Se decupează raster",
		clippingGeometry: "Se decupează geometria",
		customExtent: "Măsură personalizată",
		outputExtent: "Extindere ieșire",
		currentExtent: "Extinderea curentă a hărţii",
		drawLabel: "Trasare"
	},
	rfxCustomExtent: {
		top: "Sus",
		right: "Dreapta",
		bottom: "Jos",
		left: "Stânga"
	},
	rfxRasterArrayEditor: {
		moveUp: "Deplasare în sus",
		moveDown: "Deplasare în jos",
		remove: "Eliminare"
	},
	rfxStatisticsGrid: {
		stdDev: "Abatere Dev",
		min: "Min",
		max: "Max",
		mean: "Medie"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Tabel de sume ponderate",
		id: "ID",
		layer: "Strat tematic",
		field: "Field",
		weight: "Greutate",
		value: "Valoare",
		selectLayer: "Selectați stratul tematic"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Tabel suprapus ponderat",
		id: "ID",
		layer: "Strat tematic",
		field: "Field",
		influence: "Influenţă",
		sumOfInfluence: "Suma influenței",
		value: "Valoare",
		remapTable: "Recartografiere tabel",
		scale: "Scară",
		scales: "Scări",
		selectRaster: "Selectați raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Căutare pentru un strat tematic de obiecte spaţiale",
		addPointLayer: "Căutare pentru un strat tematic de puncte spaţiale"
	},
	rfxFieldSelect: {
		value: "Valoare",
		count: "Număr"
	},
	rfxAttributeTable: {
		tableType: "Tip tabel",
		manual: "Manual",
		external: "Extern",
		minVal: "Valoare minimă",
		maxVal: "Valoare maximă",
		baseClassName: "Denumire de bază clasă",
		colorScheme: "Schemă de culori",
		defaultClassName: "Etichetă_",
		generateTable: "Generați tabel",
		browseTable: "Navigați la tabel",
		value: "Valoare",
		classname: "Denumire clasă",
		color: "Culoare"
	},
	rfxFieldNumberSwitchable: {
		number: "Numeric",
		field: "Field",
		string: "Șir",
		linearUnit: "Unitate liniară"
	},
	rfxPropertySet: {
		name: "Nume",
		value: "Valoare"
	},
	rfxConversionGrid: {
		size: "Dimensiune"
	},
	rfxTransposeBit: {
		bitPattern: "Modelul de Biți",
		outputBit: "Bit de ieșire",
		inputBit: "Bit de intrare"
	},
	rfxSpatialReference: {
		placeHolder: "Rafinați după Cuvânt Cheie",
		coordinateSystem: "Sistem de coordonate",
		gcs: "Sistem de coordonate geografice",
		pcs: "Sistem de coordonate proiectate",
		vcs: "Sistem de coordonate verticale"
	}
};
const rfxLicenseInfo = "Acest șablon de funcţie raster poate fi utilizat pentru a prelucra imaginile dvs. folosind ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Calculează cosinusul hiperbolic invers al celulelor dintr-un raster.",
		aCosHDesc: "Funcția calculează cosinusul hiperbolic invers al pixelilor dintr-un raster.",
		aCosName: "ACos",
		aCosSnip: "Calculează cosinusul invers al pixelilor dintr-un raster.",
		aCosDesc: "Această funcție raster calculează cosinusul invers al celulelor dintr-un raster. În matematică, toate funcțiile trigonometrice au un interval definit de valori de intrare valabile, denumit domeniu. Valorile de ieșire din fiecare funcție au, de asemenea, un interval definit. Pentru acest instrument, domeniul este [-1, 1], iar intervalul este [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Calculează sinusul hiperbolic invers al celulelor dintr-un raster.",
		aSinHDesc: "Funcția calculează sinusul hiperbolic invers al pixelilor dintr-un raster.",
		aSinName: "ASin",
		aSinSnip: "Calculează sinusul invers al celulelor dintr-un raster.",
		aSinDesc: "Funcția calculează sinusul invers al pixelilor dintr-un raster.",
		aTan2Name: "ATan2",
		aTan2Snip: "Calculează tangenta inversă (pe baza x,y) a celulelor dintr-un raster.",
		aTan2Desc: "Funcția calculează tangenta inversă (pe baza x,y) a pixelilor dintr-un raster.",
		aTanHName: "ATanH",
		aTanHSnip: "Calculează tangenta hiperbolică inversă a celulelor dintr-un raster.",
		aTanHDesc: "Funcția calculează tangenta hiperbolică inversă a pixelilor dintr-un raster.",
		aTanName: "ATan",
		aTanSnip: "Calculează tangenta inversă a celulelor dintr-un raster.",
		aTanDesc: "Funcția calculează tangenta inversă a pixelilor dintr-un raster.",
		absName: "Abs",
		absSnip: "Calculează valoarea absolută a celulelor dintr-un raster.",
		absDesc: "Funcția Abs calculează valoarea absolută a pixelilor dintr-un raster.",
		reflectanceName: "Reflectanță aparentă",
		reflectanceSnip: "Transformă imaginile brute în valori Top of Atmosphere prin luarea în considerare a caracteristicilor senzorului, a poziției soarelui și timpului de achiziție.",
		reflectanceDesc: "Această funcție ajustează numărul digital (ND) al luminozității imaginii pentru unii dintre senzorii de satelit. Ajustările se bazează pe elevația soarelui, data achiziției și proprietățile senzorului pentru a seta amplificarea și înclinarea pentru fiecare bandă. Această funcție este folosită pentru a ajusta reflectanța sau luminozitatea, valori ale unor imagini de satelit pe baza iluminării scenei și setării amplificării senzorului. Imaginile sunt ajustate conform unei condiții de iluminare comune teoretică, prin urmare trebuie să existe mai puțină variație între scenele din date diferite și de la senzori diferiți. Acest lucru poate fi util pentru clasificarea imaginii, echilibrarea culorii și mozaicare. Această funcție poate fi utilizată doar cu imagini specifice. Senzorii aplicabili sunt Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 și Pleiades.<div><br/>Funcțiile efectuează două corecții. Prima se bazează pe setările amplificării. Valorile originale de luminozitate sunt re-create din valorile imaginii prin inversarea ecuațiilor de amplificare. A doua corecție este aferentă diferenței unghiului și luminozității soarelui. Valorile inițiale ale luminozității sunt ajustate unei stări comune a luminozității prin scene de normalizare capturate în condiții de iluminare variabile. În general, în timp ce tipul datelor de imagine rezultate este același cu tipul datelor de intrare, valorile de ieșire sunt mai mici decât valorile de intrare și sunt decupate conform intervalului de date valabil.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Calculează statisticile arg inclusiv Arg Max, Arg Min, Arg Median și Durată.",
		argStatisticsDesc: "Funcția calculează statisticile arg. Există patru metode în funcția ArgStatistics: ArgMax, ArgMin, ArgMedian și Durată.",
		arithmeticName: "Aritmetic",
		arithmeticSnip: "Efectuează o operație aritmetică între două rastere sau un raster și un scalar.",
		arithmeticDesc: "Funcția aritmetică efectuează o operație aritmetică între două rastere sau un raster și un scalar și invers.",
		aspectSlopeName: "Aspect-Pantă",
		aspectSlopeSnip: "Creează un raster care prezintă simultan aspectul (direcția) și panta (înclinarea) unei suprafețe continue, conform reprezentării dintr-un model digital de elevare.",
		aspectSlopeDesc: "Funcția Pantă de Aspect creează un strat raster care afișează aspectul și panta unei suprafețe. Aspectul identifică direcția în pantă a ratei maxime de schimbare a valorii din fiecare pixel către vecinii săi. Aspectul poate fi considerat direcția pantei. Valorile rasterului de ieșire vor fi direcția de busolă a aspectului, reprezentată de o nuanță (culoare). Panta reprezintă rata de modificare a elevației pentru fiecare pixel al modelului digital de elevație (DEM). Panta reprezintă înclinarea suprafeței și este simbolizată prin trei clase prezentate cu ajutorul saturației culorii (luminozității).<div><br/>Valorile pixelilor din rasterul de ieșire aspect-înclinare reflectă o combinație a aspectului și pantei. Pixelii cu valori sub 20 sunt considerați plați și sunt prezentați cu gri. Valorile aspect-pantă de 21 și mai mult vor fi prezentate cu saturații diferite, după cum urmează: 21 până la 30 —Saturație redusă a pantei, 31 până la 40—Saturație moderată a pantei, 41 și above—Saturație ridicată a pantei</div>",
		aspectName: "Aspect",
		aspectSnip: "Prezintă direcția în care este orientat un pixel, unde 0 este orientat către nord și unghiurile cresc în sens orar până la 360.",
		aspectDesc: "Funcția de aspect identifică direcția în pantă a ratei maxime de schimbare a valorii din fiecare celulă către vecinii săi. Aspectul poate fi considerat direcția pantei. Valorile rasterului de ieșire vor fi direcția aspectului.<div><br/>Intrarea pentru această funcție este Rasterul de Intrare. Funcția de aspect este adesea aplicată unui model de elevare digitală (DEM). Implicit, aspectul apare ca o imagine pe scală de gri. Puteți adăuga funcția Colormap pentru a specifica o anumită schemă de culori sau a permite persoanei care vizualizează mozaicul să modifice simbologia cu propria schemă de culori.</div>",
		tableName: "Tabel de atribute",
		tableSnip: "Utilizează un tabel pentru a denumi și simboliza valorile dintr-un set de date. Coloanele pentru tabel sunt delimitate cu virgulă: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "Funcția Tabel de atribute vă permite să definiți un tabel de atribute pentru a simboliza un set de date mozaic cu o singură bandă sau un set de date raster. <div><br/>Acest lucru este util atunci când doriți să prezentați imagini care au suferit o clasificare conform utilizării terenului, cum ar fi teren împădurit, mlaștini, teren agricol și urban. În plus, dacă tabelul dvs. conține câmpuri denumite roșu, verde și albastru, valorile din acele câmpuri vor fi utilizate ca o hartă de culori la redarea imaginii.</div>",
		bandArithmeticName: "Aritmetică bandă",
		bandArithmeticSnip: "Calculează indicii folosind formule prestabilite sau o expresie definită de utilizator.",
		bandArithmeticDesc: "Funcția de aritmetică bandă efectuează o operație aritmetică pe benzile unui set de date raster. Puteți alege algoritmii prestabiliți sau puteți introduce propria formulă cu o singură linie. Operatorii suportați sunt -,+,/,*, și unar -.",
		thresholdName: "Limitare binară",
		thresholdSnip: "Organizează datele continue în prim plan și fundal prin reducerea la minimum a covarianței dintre cele două clase.",
		thresholdDesc: "Atunci când un set de date raster are o distribuție bimodală, această funcție creează un nou raster care împarte datele în două clase distincte. Creează o clasă de valoare inferioară prezentată cu pixeli negri și o clasă de valoare ridicată prezentată cu pixeli albi.",
		bitwiseAndName: "Bitwise And",
		bitwiseAndSnip: "Efectuează o operație Bitwise And asupra valorilor binare a două rastere de intrare.",
		bitwiseAndDesc: "Bitwise And efectuează o operație Bitwise And asupra valorilor binare a două rastere de intrare",
		bitwiseLeftShiftName: "Bitwise Left Shift",
		bitwiseLeftShiftSnip: "Efectuează o operație Bitwise Left asupra valorilor binare a două rastere de intrare.",
		bitwiseLeftShiftDesc: "Bitwise Left Shift efectuează o operație Bitwise Left Shift asupra valorilor binare a două rastere de intrare",
		bitwiseNotName: "Bitwise Not",
		bitwiseNotSnip: "Efectuează o operație Bitwise Not (complement) asupra valorilor binare a două rastere de intrare.",
		bitwiseNotDesc: "Funcția efectuează o operație Bitwise Not (complement) asupra valorilor binare ale unui raster de intrare.",
		bitwiseOrName: "Bitwise Or",
		bitwiseOrSnip: "Efectuează o operație Bitwise Or asupra valorilor binare a două rastere de intrare.",
		bitwiseOrDesc: "Funcția efectuează o operație Bitwise Or asupra valorilor binare a două rastere de intrare. ",
		bitwiseRightShiftName: "Bitwise Right Shift",
		bitwiseRightShiftSnip: "Efectuează o operație Bitwise Right Shift asupra valorilor binare a două rastere de intrare.",
		bitwiseRightShiftDesc: "Funțcia efectuează o operație Bitwise Right Shift asupra valorilor binare a două rastere de intrare.",
		bitwiseXorName: "Bitwise Xor",
		bitwiseXorSnip: "Efectuează o operație Bitwise eXclusive Or asupra valorilor binare a două rastere de intrare.",
		bitwiseXorDesc: "Funțcia efectuează o operație Bitwise eXclusive Ir asupra valorilor binare a două rastere de intrare",
		booleanAndName: "Boolean And",
		booleanAndSnip: "Efectuează o operație Boolean And asupra valorilor celulei a două rastere de intrare. Dacă ambele valori de intrare sunt reale (non-zero), valoarea de ieșire este 1. Dacă una sau ambele intrări sunt false (zero), ieșirea este 0.",
		booleanAndDesc: "Funțcia efectuează o operație Boolean And asupra valorilor pixel a două intrări. Dacă ambele valori de intrare sunt reale (nonzero), valoarea de ieșire este 1. Dacă una sau ambele valori de intrare sunt false (zero), valoarea de ieșire este 0. ",
		booleanNotName: "Boolean Not",
		booleanNotSnip: "Efectuează o operație Boolean And (complement) asupra valorilor celulei rasterului de intrare. Dacă valorile de intrare sunt reale (non-zero), valoarea de ieșire este 0. Dacă valorile de intrare sunt false (zero), ieșirea este 1.",
		booleanNotDesc: "Funcția efectuează o operație Boolean Not (complement) asupra valorilor pixel ale rasterului de intrare. Dacă valorile de intrare sunt reale (nonzero), valoarea de ieșire este 0. Dacă valorile de intrare sunt false (zero), valoarea de ieșire este 1.",
		booleanOrName: "Boolean Or",
		booleanOrSnip: "Efectuează o operație Boolean Or asupra valorilor celulei celor două rastere de intrare. Dacă unul sau ambele valori de intrare sunt reale (non-zero), valoarea de ieșire este 1. Dacă ambele valori de intrare sunt false (zero), ieșirea este 0.",
		booleanOrDesc: "Funcția efectuează o operație Boolean Or asupra valorilor binare a două rastere de intrare. Dacă una sau ambele valori de intrare sunt reale (nonzero), valoarea de ieșire este 1. Dacă ambele valori de intrare sunt false (zero), valoarea de ieșire este 0.",
		booleanXorName: "Boolean Xor",
		booleanXorSnip: "Efectuează o operație Boolean eXclusive Or asupra valorilor celulei a două rastere de intrare. Dacă o valoare de intrare este reală (non-zero) și cealaltă falsă (zero), valoarea de ieșire este 1. Dacă ambele valori de intrare sunt reale sau ambele sunt false, ieșirea este 0.",
		booleanXorDesc: "Funcția efectuează o operație Boolean eXclusive Or asupra valorilor celulei a două rastere de intrare. Dacă o valoare de intrare este reală (nonzero) și cealaltă valoare este falsă (zero), valoarea de ieșire este 1. Dacă ambele valori de intrare sunt reale sau ambele sunt false, valoarea de ieșire este 0.",
		bufferedRasterName: "Tamponat",
		bufferedRasterSnip: "Tamponează cel(e) mai recent(e) bloc(uri) de pixeli accesate.",
		bufferedRasterDesc: "Funcția Buffered este folosită pentru a optimiza performanțele lanțurilor de funcții complexe. Stochează ieșirea în memoria părții lanțului de funcții de dinaintea acestuia. <div><br/>Introduceți această funcție în Editorul de Funcție acolo unde doriți să stocați ieșirea.</div>",
		rasterCalculatorName: "Calculator",
		rasterCalculatorSnip: "Calculează un raster dintr-o expresie matematică bazată pe raster.",
		rasterCalculatorDesc: "Funcția de Calculator vă permite să creați și să utilizați expresii și să le includeți în lanțurile de funcții.",
		cellStatisticsName: "Statisticile celulei",
		cellStatisticsSnip: "Calculează o statistică pe fiecare celulă din rastere multiple. Statisticile disponibile sunt Majoritate, Maximum, Mijlociu, Mediu, Minimum, Minoritate, Percentilă, Interval, Abatere Standard, Sumă și Varietate.",
		cellStatisticsDesc: "Această funcție calculează statisticile din rastere multiple, pixel cu pixel. Statisticile disponibile sunt majoritate. maximum, mijlociu, mediu, minimum, minoritate, interval, abatere standard, sumă și varietate.",
		classifyName: "Clasificare",
		classifySnip: "Alocă fiecare pixel unei clase. Include datele auxiliare cum ar fi o imagine segmentată.",
		classifyDesc: "Această funcție raster clasifică un set de date raster pe baza unui fișier de Definiție a Clasificatorului Esri (.ecd) și a intrărilor seturilor de date raster. Fișierul .ecd folosit în funcția Clasificare include toate informațiile pentru un set de date și clasificator specific și este generat de către instrumentele de instruire pentru clasificare, cum ar fi instrumentele Train Support Vector Machine sau Train Random Trees.",
		clipName: "Atașare",
		clipSnip: "Stabilește mărimea unui raster folosind coordonatele sau un alt set de date.",
		clipDesc: "Această funcție decupează un raster folosind o formă dreptunghiulară conform măsurilor definite sau va decupa un raster conform formei unei clase de obiecte spațiale poligonale de intrare. Forma care definește decuparea poate decupa mărimea rasterului sau decupa o zonă din raster.",
		colorspaceConversionName: "Transformarea modelului de culoare",
		colorspaceConversionSnip: "Transformă un raster din RGB în HSV și invers.",
		colorspaceConversionDesc: "Funcția de Conversie a Modelului de Culoare transformă modelul de culoare al unei imagini din spațiul de culoare de nuanță, saturație și valoare (HSV) în roșu, verde și albastru (RGB) sau invers.<div><br/>Această funcție poate fi folosită într-un set de date mozaic.</div>",
		colormapToRGBName: "Hartă a culorii în RGB",
		colormapToRGBSnip: "Transformă un raster cu o singură bandă cu o hartă a culorii într-un raster cu trei benzi (roșu, verde și albastru).",
		colormapToRGBDesc: "Această funcție transformă un raster cu o singură bandă într-un raster cu trei benzi (roșu, verde și albastru).<div><br/>Această funcție este utilă atunci când trebuie să creați un raster din trei benzi dintr-un raster cu o singură bandă cu o hartă a culorii asociată. Valorile din harta culorii vor fi folosite pentru a crea fiecare bandă roșie, verde și albastră. Această funcție poate fi folosită într-un set de date mozaic.</div>",
		colormapName: "Culoare hartă",
		colormapSnip: "Modifică valorile pixelilor pentru a prezenta datele rasterului ca scară gri sau o imagine roșie, verde, albastră (RGB), pe baza unei hărți a culorilor sau a unei rampe de culoare.",
		colormapDesc: "Funcția Harta Culorii este un tip de dispozitiv de redare a datelor rasterului. Aceasta transformă valorile pixelilor pentru a afișa datele rasterului ca fiind o scară gri sau o imagine de culori RGB bazată pe o schemă de culori sau culori specifice într-un fișier de hartă color. Puteți folosi o hartă color pentru a reprezenta datele analizate, cum ar fi o imagine clasificată sau la afișarea unei hărți topografice (sau a unei imagini scanate cu indice de culoare).<div><br/> Hărțile de culori conțin un set de valori asociate culorilor folosite pentru afișarea unui raster cu o singură bandă în mod consecvent cu aceleași culori. Fiecare valoare a pixelului este asociată unei culori, definite ca un set de valori RGB. Hărțile de culori sunt capabile să suporte orice adâncime a bitului cu excepția punctului flotant. De asemenea, suportă valorile pozitive și negative și pot include valorile lipsă cu hărți de culori. La afișarea unui set de date cu o hartă de culori care include valori lipsă, pixelii cu acele valori lipsă nu vor fi afișați.</div>",
		complexName: "Complex",
		complexSnip: "Extrage magnitudinea din numerele complexe.",
		complexDesc: "Această funcție calculează magnitudinea din valori complexe.<div><br/>Această funcție este folosită de obicei cu imagini RADAR care au un tip de date complexe. Poate fi folosită într-un set de date mozaic.</div>",
		compositeBandName: "Benzi compozite",
		compositeBandSnip: "Combină seturile de date multiple într-un raster cu benzi multiple.",
		compositeBandDesc: "Funcția de Benzi Compozite vă permite să combinați rasterele pentru a forma o imagine cu mai multe benzi.",
		conName: "Con",
		conSnip: "Efectuează o operațiune condițională Dacă, Atunci, Sau. Atunci când este folosit un operator Con, de obicei trebuie să existe două sau mai multe funcții conectate, acolo unde o funcție stabilește criteriile și a doua funcție o reprezintă operatorul Con care folosește criteriile și dictează care ar trebui să fie ieșirile reale și false.",
		conDesc: "Funcția Condițional stabilește pixelii rasterului de ieșire pe baza unei evaluări dacă//sau a fiecărui pixel de intrare. Returnează valorile pixelului din Rasterul Real dacă evaluarea condițională este reală (1) sau returnează valorile pixelului din Rasterul Fals dacă evaluarea condiționată este falsă (0). Acest criteriu este specificat de rezultatul unei funcții matematice logice, care va fi Rasterul de intrare.",
		constantName: "Constantă",
		constantSnip: "Creează un raster virtual cu o singură valoare de pixel.",
		constantDesc: "Această funcție creează un raster virtual cu o singură valoare de pixel care poate fi folosită în șabloane de funcție raster și pentru a prelucra un set de date mozaic.<div><br/>Valoarea constantă este folosită pentru fiecare valoare de pixel din raster.</div>",
		contourName: "Contur",
		contourSnip: "Creează linii de contur.",
		contourDesc: "Funcția de contur generează linii contur prin alăturarea punctelor cu aceeași elevație dintr-un set de date de elevație a rasterului. Contururile sunt izolinii create ca rastere pentru vizualizare. Următoarele caracteristici principale reprezintă forța acestei funcții: contururile sunt generate rapid și dinamic pe seturi de date foarte mari, așa cum ar fi Elevația Globală; contururile pot fi aplatizate pentru a oferi un aspect cartografic mai plăcut în timp ce se păstrează acuratețea contururilor; se asigură controlul dinamic asupra intervalului de contur; opțiunile de ieșire includ liniile de contur, contururile index și contururile umplute.<div><br/>Crearea unui strat tematic de contur ca produs raster este valoroasă pentru o gamă largă de aplicații din moment ce contururile pot fi suprapuse pe o hartă și pot oferi informații referitoare la teren fără a ascunde datele de bază. Acestea sunt utile în aplicații cum ar fi ingineria, agricultura și administrarea apelor.</div>",
		contrastBrightnessName: "Contrast și Luminozitate",
		contrastBrightnessSnip: "Ajustați contrastul și luminozitatea unui raster.",
		contrastBrightnessDesc: "Funcția de Contrast Și Luminozitate amplifică aspectul datelor raster prin modificarea luminozității și contrastului din imagine. Luminozitatea crește iluminarea generală a imaginii—de exemplu, deschizând culorile mai închise și albind culorile deschise—în timp ce contrastul ajustează diferența dintre culorile cele mai închise și cele mai deschise.<div><br/>Utilizarea acestei funcții modifică valorile pixelului; astfel, această funcție ar trebui folosită atunci când doriți să amplificați datelor și nu dacă intenționați să folosiți datele ca parte a unei analize care ar necesita valorile brute ale pixelilor. Această funcție este utilă la publicarea datelor ca un serviciu de imagini care poate fi utilizat în aplicații fără capacitate de modificare a contrastului și luminozității imaginilor, sau pentru a asigura că face o prezentare folosind setările dvs. preferate.</div>",
		convolutionName: "Convoluție",
		convolutionSnip: "Aplică un filtru pentru a clarifica, blura, detecta margini, aplatiza sau un gradient pe un raster.",
		convolutionDesc: "Funcția Convoluție efectuează filtrarea asupra valorilor pixelilor dintr-o imagine, care poate fi folosit pentru clarificarea unei imagini, blurarea unei imagini, detectarea marginilor dintr-o imagine, sau alte amplificări bazate pe nuclee. Filtrele sunt utilizate pentru îmbunătățirea calității imaginii raster prin eliminarea datelor secundare sau amplificarea obiectelor spațiale din date. Aceste filtre de convoluție sunt aplicate pe un nucleu aflat în deplasare, suprapus (fereastră sau în apropiere), cum ar fi 3 ori 3. Filtrele de convoluție funcționează prin calcularea valorii pixelului pe baza ponderii vecinilor săi.",
		corridorName: "Coridor",
		corridorSnip: "Calculează suma costurilor acumulative pentru două rastere acumulative de intrare.",
		corridorDesc: "Funcția de coridor calculează suma costurilor acumulative pentru două rastere de cost acumulative de intrare. În timp ce oricare două rastere pot fi utilizate pentru intrare, pentru a obține un rezultat semnificativ acestea trebuie să fie rastere de ieșire de cost acumulative nealterate. Ordinea celor două intrări este irelevantă.",
		cosHName: "CosH",
		cosHSnip: "Calculează cosinusul hiperbolic al celulelor dintr-un raster.",
		cosHDesc: "Funcția calculează cosinusul hiperbolic al pixelilor dintr-un raster.",
		cosName: "Cos",
		cosSnip: "Calculează cosinusul unei celule dintr-un raster.",
		cosDesc: "Funcția calculează cosinusul pixelilor dintr-un raster.",
		costAllocationName: "Alocarea Costului",
		costAllocationSnip: "Calculează, pentru fiecare celulă, sursa cu cel mai mic cost pe baza costului cel mai puțin acumulativ pe o suprafață de cost.",
		costAllocationDesc: "Funcția de Alocare a Costurilor calculează, pentru fiecare celulă, sursa cu cel mai mic cost pe baza costului cel mai puțin acumulativ pe o suprafață de cost.",
		costBackLinkName: "Link Cost Back",
		costBackLinkSnip: "Definește vecinul care este celula următoare pe traseul de cost cel mai puțin acumulativ către sursa cu cel mai mic cost.",
		costBackLinkDesc: "Funcția de Cost Back definește vecinul care este celula următoare pe traseul de cost cel mai puțin acumulativ către sursa cu cel mai mic cost.<div><br/>Rasterul de legătură inversă include valori de zero până la opt, care definesc direcția sau identifică următoarea celulă vecină (celula care succede) pe traseul de cost cel mai puțin acumulativ de la o celulă pentru a ajunge la sursa sa cu cele mai mici costuri. Dacă traseul va trece la vecinul din dreapta, celula va primi valoarea 1, 2 pentru celula diagonală din dreapta jos și continuă în sens orar. Valoarea 0 este rezervată pentru celulele sursă.</div>",
		costDistanceName: "Distanță de Cost",
		costDistanceSnip: "Calculează distanța de cost cel mai puțin acumulativă pentru fiecare celulă de la sau la sursa cu cel mai mic cost pe o suprafață de cost.",
		costDistanceDesc: "Funcția Cost Distanță calculează distanța de cost cel mai puțin acumulativă pentru fiecare celulă de la sau la sursa cu cel mai mic cost pe o suprafață de cost.",
		costPathName: "Traseu de Cost",
		costPathSnip: "Calculează traseul cu cel mai mic cost dintr-o sursă la o destinație.",
		costPathDesc: "Funcția globală Traseu de Cost calculează traseul cu cel mai mic cost dintr-o sursă la o destinație.<div><br/>Această funcție produce un raster de ieșire care înregistrează traseul sau traseele cu costul cel mai mic din locații selectate până la cea mai apropiată sursă definită în suprafața de cost acumulativă, cu privire la distanța de cost.</div>",
		curvatureName: "Curbură",
		curvatureSnip: "Calculează curbura unei suprafețe raster, incluzând opțional profilul și curbura planului.",
		curvatureDesc: "Funcția de Curbură prezintă forma sau curbura pantei. O parte a unei suprafețe poate fi concavă sau convexă; vă puteți da seama de acest lucru privind valoarea curburii. Curbura este calculată prin calcularea celei de-a doua derivative a suprafeței.<div><br/>Ieșirea funcției de Curbură poate fi folosită pentru a descrie caracteristicile fizice ale unui bazin de scurgere într-un efort pentru a înțelege procesele de eroziune și scurgere. Valoarea curburii poate fi folosită pentru a găsi șabloane de eroziune a solului cât și distribuția apei pe teren. Curbura profilului afectează accelerarea și decelerarea curgerii și, prin urmare, influențează eroziunea și depunerile. Curbura platformei influențează convergența și divergența curgerii.</div>",
		divideName: "Împărțire",
		divideSnip: "Împarte valorile a două rastere celulă cu celulă.",
		divideDesc: "Funcția de Împărțire împarte valorile a două rastere pixel cu pixel.",
		elevationVoidFillName: "Umplerea Vidului Elevației",
		elevationVoidFillSnip: "Creează pixeli acolo unde există găuri în datele dvs. de elevație.",
		elevationVoidFillDesc: "Funcția de Umplere a Vidului Elevației este utilizată pentru a crea pixeli acolo unde există găuri în elevația dvs.<div><br/>Vidul apare acolo unde nu există puncte colectate în zona reprezentată de un pixel în rasterul rezultant. Vidul este adesea cauzat de corpurile de apă, de selectarea tipului de clasă sau de excludere. Umplerea vidului este utilizată cel mai des la generarea unei suprafețe de sol.</div>",
		equalToName: "Egală cu",
		equalToSnip: "Efectuează o operație de egalizare Relațională pe două intrări de la o celulă la alta. Returnează valoarea 1 pentru celulele unde primul raster este cu cel de-al doilea raster și 0 pentru celulele unde acestea nu sunt egale.",
		equalToDesc: "Funcția efectuează o operație de egalizare pe două rastere de la un pixel la altul. Aceasta returnează valoarea 1 pentru pixelii unde primul raster este egal cu cel de-al doilea raster și valoarea 0 pentru pixeli unde aceștia nu sunt egali.",
		eucAllocationName: "Alocare Euclidiană",
		eucAllocationSnip: "Calculează, pentru fiecare celulă, cea mai apropiată sursă pe baza distanței euclidiene.",
		eucAllocationDesc: "Funcția de Alocare Euclidiană calculează, pentru fiecare celulă, cea mai apropiată sursă pe baza distanței euclidiene.",
		eucDirectionName: "Direcție Euclidiană",
		eucDirectionSnip: "Calculează, pentru fiecare celulă, direcția până la cea mai apropiată sursă, în grade.",
		eucDirectionDesc: "Funcția de Direcție Euclidiană calculează, pentru fiecare celulă, direcția până la cea mai apropiată sursă, în grade. <div><br/>Direcția este calculată de la centrul fiecărei celule până la centrul celulei sursă care se află cel mai aproape de aceasta. Gama de valori este de la 0 grade la 360 grade, cu 0 rezervat pentru celulele sursă. Spre Est (dreapta) este 90 iar valoarea crește în sens orar (180 este sudul, 270 este vestul iar 360 este nordul).</div>",
		eucDistanceName: "Distanță Euclidiană",
		eucDistanceSnip: "Calculează, pentru fiecare celulă, distanța euclidiană până la cea mai apropiată sursă.",
		eucDistanceDesc: "Funcția de Distanță Euclidiană calculează, pentru fiecare celulă, distanța până la cea mai apropiată sursă.",
		exp10Name: "Exp10",
		exp10Snip: "Calculează exponențialul în bază 10 a celulelor dintr-un raster.",
		exp10Desc: "Funcția Exp 10 calculează funcția exponențială în bază 10 a pixelilor dintr-un raster.",
		exp2Name: "Exp2",
		exp2Snip: "Calculează exponențialul în bază 2 al celulelor dintr-un raster.",
		exp2Desc: "Această funcție calculează funcția exponențială în bază 2 a pixelilor dintr-un raster.",
		expName: "Exp",
		expSnip: "Calculează exponențialul în bază e al celulelor dintr-un raster.",
		expDesc: "Această funcție calculează funcția exponențială în bază e a pixelilor dintr-un raster.",
		extractBandName: "Extragerea Benzilor",
		extractBandSnip: "Specifică benzile cu care se va lucra la utilizarea seturilor de date cu benzi multiple.",
		extractBandDesc: " Funcția de Extragere a Benzilor vă permite să extrageți una sau mai multe benzi sau să reordonați benzile într-un set de date raster cu benzi multiple.<div><br/>Puteți folosi funcția de Extragere Benzi înaintea altor funcții, cum ar fi Aritmetica, pentru a controla care dintre benzi sunt folosite ca intrare în funcția următoare.</div>",
		fillName: "Umplere",
		fillSnip: "Umple dolinele într-un raster de suprafață pentru eliminarea unor mici imperfecții ale datelor.",
		fillDesc: "Funcția de Umplere globală localizează și umple doline și vârfuri într-un raster de suprafață de elevație pentru a elimina micile imperfecții ale datelor. Funcția va completa într-un proces repetitiv până la umplerea tuturor dolinelor din cadrul limitei Z specificate.<div><br/>Atunci când suprafața de elevație este creată cu instrumentele Ortho Mapping sau cu alte mijloace, există adesea erori mici, dar semnificative, sub forma dolinelor și vârfurilor din cadrul datelor. În fotogrametrie, dolinele și vârfurile sunt menționate adesea ca găuri și vârfuri. Datorită faptului că datele de suprafață sunt folosite adesea în modelare, cum ar fi modelarea hidrologică, este important să se corecteze aceste erori de doline și vârfuri într-un mod consecvent datelor înconjurătoare.</div>",
		floatName: "Mobil",
		floatSnip: "Transformă fiecare valoare a celulei unui raster într-o reprezentare a punctului flotant.",
		floatDesc: "Funcția de Flotare transformă fiecare valoare a pixelului unui raster într-o reprezentare a punctului flotant.",
		flowAccumulationName: "Acumularea fluxului",
		flowAccumulationSnip: "Creează un raster de flux acumulat în fiecare celulă. Un factor de pondere poate fi aplicat în mod opțional.",
		flowAccumulationDesc: "Funcția globală de Acumulare a Fluxului creează un raster de flux acumulat în fiecare pixel, conform celor determinate prin acumularea greutății tuturor pixelilor care curg în fiecare pixel al pantei de coborâre. Dacă nu se pune la dispoziție niciun raster de pondere, o pondere de 1 se aplică fiecărui pixel, iar valoarea pixelilor din rasterul de ieșire este numărul de pixeli care curg în fiecare pixel.<div><br/>Pixelii de ieșire cu o acumulare de flux ridicată reprezintă zonele de flux concentrat și pot fi folosite pentru identificarea canalelor de curs. Pixelii de ieșire cu o acumulare de flux zero sunt valori topografice locale ridicate și pot fi folosite pentru identificarea crestelor.</div>",
		flowDirectionName: "Direcția fluxului",
		flowDirectionSnip: "Creează un raster de direcție a fluxului din fiecare celulă până la vecinul său de pe panta cea mai abruptă.",
		flowDirectionDesc: "Una dintre cheile derivării caracteristicilor hidrologice ale unei suprafețe o reprezintă capacitatea de stabilire a direcției fluxului din fiecare pixel din raster. Funcția rasterului Direcției de Flux ia o suprafață drept intrare și creează un raster al direcției de flux de la fiecare pixel către vecinul de pe panta de coborâre cea mai abruptă. Funcția de Direcție a Fluxului suportă trei metode de modelare a fluxului: D8 (opt direcții), direcție multiplă a fluxului (MFD) și D-Infinit (DINF). ",
		flowDistanceName: "Distanța Fluxului",
		flowDistanceSnip: "Calculează, pentru fiecare celulă, distanța minimă orizontală sau verticală a pantei de coborâre către celulele de pe un curs de apă sau râu în care curg.",
		flowDistanceDesc: "Pentru fiecare pixel, funcția va calcula distanța orizontală sau verticală a pantei de coborâre către pixel(i) pe un râu sau curs de apă în care curg aceștia. Dacă este pus la dispoziție un raster opțional de direcție a fluxului, direcția(iile) pantei de coborâre va fi limitată la cele definite de rasterul de direcție a fluxului de intrare. Ieșirea este un raster de distanță a fluxului.",
		focalName: "Statistică Focală",
		focalSnip: "Calculează statistica focală pentru fiecare pixel a unei imagini bazate pe o vecinătate focală definită.",
		focalDesc: "Funcția de Statistică Focală calculează statistica focală pentru fiecare pixel a unei imagini bazate pe o vecinătate focală definită.",
		geometricName: "Zone geometrice",
		geometricSnip: "Crește precizia pozițională a unui set de date prin contabilizarea elevației.",
		geometricDesc: "Funcția geometrică produce o imagine ortorectificată pe baza unei definiții a senzorilor și a unui model de teren. Crește precizia pozițională a unui set de date prin contabilizarea elevației.",
		grayscaleName: "Scară gri",
		grayscaleSnip: "Transformă o imagine cu benzi multiple într-o imagine pe scară gri cu o singură bandă.",
		grayscaleDesc: "Această funcție transformă o imagine cu benzi multiple într-o imagine pe scară gri cu o singură bandă.<div><br/>Această funcție aplică ponderi specificate fiecăreia dintre benzile de intrare și normalizează imaginea de ieșire. Ponderile sunt adesea aplicate deoarece unele benzi au o importanță variabilă în funcție de aplicație. De exemplu, banda albastră conține adesea mai mult zgomot decât celelalte benzi.</div>",
		greaterThanEqualName: "Mai mare decât egal",
		greaterThanEqualSnip: "Efectuează o operație de egalizare relațională mai mare decât egal cu pe două intrări de la o celulă la alta. Returnează 1 pentru celulele unde primul raster este mai mare decât sau egal cu al doilea raster și 0 dacă nu este.",
		greaterThanEqualDesc: "Funcția efectuează o operație relațională mai mare sau egală cu pe două intrări pixel cu pixel. Aceasta returnează o valoare de 1 pentru pixelii unde primul raster este mai mare decât sau egal cu al doilea raster și o valoare de 0 pentru pixeli unde primul raster nu este mai mare decât sau egal cu al doilea raster.",
		greaterThanName: "Mai mare decât",
		greaterThanSnip: "Efectuează o operație relațională mai mare decât pe două intrări de la o celulă la alta. Returnează valoarea 1 pentru celulele unde primul raster este mai mare decât cel de-al doilea raster și 0 pentru celulele unde acestea nu sunt egale.",
		greaterThanDesc: "Funcția efectuează o operație relațională mai mare decât sau egală cu pe două intrări pixel cu pixel. Returnează o valoare de 1 pentru pixelii unde primul raster este mai mare decât al doilea raster și o valoare de 0 pentru pixeli unde primul raster nu este mai mare decât al doilea raster.",
		heatIndexName: "Index căldură",
		heatIndexSnip: "Combină temperatura aerului ambiental și umiditatea relativă pentru a afla temperatura aparentă.",
		heatIndexDesc: "Această funcție calculează temperatura aparentă pe baza temperaturii ambiente și umidității relative. Temperatura aparentă este adesea descrisă ca fiind cât de cald se simte pentru corpul uman.<div><br/>Acest indice poate fi util pentru calcularea pericolelor aferente problemelor medicale cum ar fi crampele musculare, deshidratarea, epuizarea din cauza căldurii sau insolația mai gravă în zilele calde și umede. Atunci când umiditatea relativă este ridicată, devine din ce în ce mai greu pentru transpirația corporală să se evapore, lăsând persoanele fără o modalitate de răcorire naturală și eficientă. Hărțile cu indicațiile și avertizările privind căldura sunt adesea produsul reclasificării rezultatului indicelui termic în clase, acolo unde cu cât este mai mare valoarea indicelui, cu atât este mai probabil să devină o avertizare decât o simplă indicație.</div>",
		hillshadeName: "Efect de umbră",
		hillshadeSnip: "Creează o reprezentare 3D a suprafeței, cu poziția relativă a soarelui luată în considerare pentru hașurarea imaginii",
		hillshadeDesc: "Funcția Hillshade produce o reprezentare pe scară gri 3D a suprafeței terenului, cu poziția relativă a soarelui luată în considerare pentru hașurarea imaginii. <div><br/>Hașurarea este o tehnică de vizualizare a terenului determinată de o sursă de lumină și de panta și aspectul suprafeței elevației. Aceasta este o metodă calitativă de vizualizare a topografiei și nu oferă valori de elevare absolute. </div>",
		intName: "Int",
		intSnip: "Transformă fiecare valoare a celulei unui raster într-un întreg prin reducere.",
		intDesc: "Funcția Int transformă fiecare valoare a pixelului unui raster într-un întreg prin reducere.",
		interpolateIrregularDataName: "Interpolarea datelor neregulate",
		interpolateIrregularDataSnip: "Interpolează din nori de puncte sau grile neregulate.",
		interpolateIrregularDataDesc: "Unele seturi de date netCDF sau HDF își stochează geolocarea sub forma unor șiruri așezate la distanțe neregulate de pixeli sau date de puncte. La adăugarea acestor seturi de date într-un set de date mozaic, funcția de interpolare a datelor neregulate ia datele introduse neregulat în grilă și recolectează probele astfel încât fiecare pixel să aibă dimensiune uniformă și să fie pătrat.<div><br/>La adăugarea variabilelor din netCDF sau HDF într-un set de date mozaic, acesta va verifica în mod automat dacă datele sunt dispuse ]n șiruri regulate. În caz contrar, funcția de interpolare a datelor neregulate poate fi folosită pentru a transforma datele neregulate într-un raster cu grilă regulată. Puteți modifica metoda de interpolare și dimensiunea celulei folosite în funcția de interpolare a rasterului datelor neregulate. Pentru datele cu raster cu distanță regulată, nu se va aplica interpolarea iar datele vor fi citite așa cum sunt.</div>",
		isNullName: "Este nul",
		isNullSnip: "Stabilește care valori din rasterul de intrare sunt NoData de la o celulă la alta. Returnează o valoare de 1 dacă valoarea de intrare este NoData și 0 pentru celule care nu sunt.",
		isNullDesc: "Funcția Este Nul stabilește care valori din rasterul de intrare sunt NoData de la un pixel la altul. Aceasta returnează o valoare de 1 dacă valoarea de intrare este NoData și o valoare de 0 pentru pixeli care nu sunt NoData.",
		kernelDensityName: "Kernel Density",
		kernelDensitySnip: "Calculează o zonă de magnitudine pe unitate din obiectele spațiale puncte sau polilinii folosind o funcție nucleu pentru a include o suprafață conică lină în fiecare punct sau polilinie.",
		kernelDensityDesc: "Această funcție calculează o zonă de magnitudine pe unitate din obiectele spațiale puncte sau polilinii folosind o funcție nucleu pentru a include o suprafață conică lină în fiecare punct sau polilinie.",
		keyMetadataName: "Metadate principale",
		keyMetadataSnip: "Suprareglează sau introduce metadatele principale ale unui raster într-un lanț de funcții.",
		keyMetadataDesc: "Această funcție vă permite să introduceți sau să suprareglați metadatele principale ale unui raster.<div><br/>Informațiile din metadatele principale sunt folosite pentru a ajuta aplicația cu o parte din prelucrare și redare, inclusiv furnizarea unor informații utile cum ar fi denumirea senzorului, denumirile benzilor sau nebulozitatea asociată cu imaginile.</div>",
		shortestPathName: "Traseul cu cel mai mic cost",
		shortestPathSnip: "Efectuează o analiză a distanței de cost folosind intrările sursei și destinației care mai apoi sunt folosite pentru a stabili traseul cu costul cel mai mic dintr-o sursă către o destinație.",
		shortestPathDesc: "Funcția Traseului cu Cel Mai Mic Cost calculează traseul cu cel mai mic cost dintr-o sursă și până la o destinație. Distanța cu costul cel mai puțin acumulativ este calculată pentru fiecare pixel pe o suprafață a costului, către cea mai apropiată sursă. Aceasta produce un raster de ieșire care înregistrează traseul sau traseele cu costul cel mai mic, din locații selectate până la pixelii din cea mai apropiată sursă definiți în suprafața de cost acumulativă, cu privire la distanța de cost.<div><br/>Fiecărui traseu cu costul cel mai mic îi este alocată o valoare atunci când este întâlnit în cadrul procesului de scanare. Pixelul de sfârșit de pe Rasterul Sursă al unui traseu de cost primește o valoare de 1. Primul traseu primește o valoare de 3, al doilea 4 și așa mai departe. Atunci când mai multe trasee converg și urmează distanța remanentă înapoi către o sursă de pe același traseu, segmentul unde cele două trasee se deplasează împreună primește o valoare de 2. Porțiunii fuzionate a traseului nu îi poate fi alocată o valoare a unuia dintre trasee, având în vedere că porțiunea fuzionată aparține ambelor trasee.</div>",
		lessThanEqualName: "Mai mic decât egal",
		lessThanEqualSnip: "Efectuează o operație de egalizare relațională mai mică decât sau egală cu pe două intrări de la o celulă la alta. Returnează 1 pentru celulele unde primul raster este mai mic decât sau egal cu al doilea raster și 0 acolo unde nu este.",
		lessThanEqualDesc: "Funcția efectuează o operație relațională mai mică sau egală cu pe două intrări pixel cu pixel. Aceasta returnează o valoare de 1 pentru pixelii unde primul raster este mai mic decât sau egal cu al doilea raster și o valoare de 0 unde primul raster nu este mai mic decât sau egal cu al doilea raster.",
		lessThanName: "Mai mic decât",
		lessThanSnip: "Efectuează o operație relațională mai mică decât pe două intrări de la o celulă la alta. Returnează 1 pentru celulele unde primul raster este mai mic decât al doilea raster și 0 dacă nu este.",
		lessThanDesc: "Funcția efectuează o operație relațională mai mică decât pe două intrări pixel cu pixel. Aceasta returnează o valoare de 1 pentru pixelii unde primul raster este mai mic decât al doilea raster și o valoare de 0 dacă primul raster nu este mai mic decât al doilea raster.",
		lnName: "Ln",
		lnSnip: "Calculează logaritmul natural (baza e) a celulelor dintr-un raster.",
		lnDesc: "Funcția Ln calculează logaritmul natural (baza e) a fiecărui pixel dintr-un raster.",
		log10Name: "Log10",
		log10Snip: "Calculează logaritmul de bază 10 al celulelor dintr-un raster.",
		log10Desc: "Funcția Log10 calculează logaritmul de bază 10 a fiecărui pixel dintr-un raster.",
		log2Name: "Log2",
		log2Snip: "Calculează logaritmul de bază 2 al celulelor dintr-un raster.",
		log2Desc: "Funcția Log10 calculează logaritmul de bază 2 al fiecărui pixel dintr-un raster.",
		lookupName: "Căutare",
		lookupSnip: "Creează un nou raster prin căutarea valorilor găsite într-un alt câmp din tabelul rasterului de intrare.",
		lookupDesc: "Funcția creează un nou raster prin căutarea valorilor găsite într-un alt câmp din tabelul rasterului de intrare.",
		mlClassifyName: "Clasificare ML",
		mlClassifySnip: "Clasifică imaginile folosind o abordare pe fiecare pixel. Pixelii combinați sunt alocați obiectului spațial cu cel mai mare procent din acel pixel.",
		mlClassifyDesc: "Funcția ML Clasificare vă permite să efectuați o clasificare supravegheată, folosind algoritmul de clasificare de probabilitate maximă, asupra unui set de date raster sau mozaic. Această funcție necesită un fișier de semnătură de clasificare.",
		maskName: "Mască",
		maskSnip: "Stabilește valorile pe care nu doriți să le afișați.",
		maskDesc: "Această funcție raster stabilește valorile pe care nu doriți să le afișați pe rasterul dvs. Folosind funcția Mască, veți specifica una sau mai multe valori NoData sau un interval de valori de pixel valabile. ",
		minusName: "Minus",
		minusSnip: "Scade valoarea celui de-al doilea raster de intrare din valoarea primului raster de intrare de la o celulă la alta.",
		minusDesc: "Funcția scade valoarea celui de-al doilea raster de intrare din valoarea primului raster de intrare de la un pixel la altul.",
		modName: "Mod",
		modSnip: "Găsește restul (în modul) primului raster atunci când este împărțit la al doilea raster pentru fiecare celulă.",
		modDesc: "Funcția Mod găsește restul (în modul) primului raster atunci când este împărțită la al doilea raster de la un pixel la altul. Ordinea intrărilor este importantă și afectează rezultatul ieșirii.",
		mosaicRastersName: "Rastere Mozaic",
		mosaicRastersSnip: "Compilează un set de seturi de date raster pentru a crea un singur set de date.",
		mosaicRastersDesc: "Funcția de Rastere Mozaic creează o imagine mozaic din mai multe imagini. Acolo unde există o suprapunere între imagini, există mai multe metode din care puteți alege pentru a stabili ce imagini să fie afișate.",
		ndviColorizedName: "NDVI Colorizat",
		ndviColorizedSnip: "Creează un set de date cu benzi multiple care reprezintă starea de sănătate a vegetației, pe baza diferențelor dintre benzile roșu și infraroșu apropiat.",
		ndviColorizedDesc: "Funcția NDVI Colorizat aplică funcția NDVI pe imaginea de intrare și apoi utilizează o hartă color sau o rampă de culoare pentru a prezenta rezultatul.",
		ndviName: "NDVI",
		ndviSnip: "Calculează Indice de Vegetație Diferență Normalizată (NDVI).",
		ndviDesc: "Funcția NDVI creează un set de date cu o singură bandă care reprezintă starea de sănătate a vegetației, pe baza diferențelor dintre benzile roșu și infraroșu apropiat.<div><br/>NDVI este un index standardizat care vă permite să generați o imagine care afișează intensitatea verdelui, denumită și biomasa relativă. Acest index profită de contrastul caracteristicilor dintre cele două benzi dintr-un set de date raster multispectrale: absorbțiile pigmentului clorofilei din banda roșie și reflectivitatea ridicată a materialului plantelor din banda de infraroșu apropiat (NIR). Valorile NDVI extrem de reduse sau negative reprezintă zone fără nicio vegetație, cum ar fi norii, apa sau zăpada. Valorile foarte mici reprezintă zone cu vegetație redusă sau deloc, cum ar fi betonul, rocile sau solul dezgolit. Valorile moderate reprezintă zone de arbuști și pajiști. Valorile ridicate reprezintă zone de păduri și vegetație luxuriantă.</div>",
		negateName: "Anulare",
		negateSnip: "Schimbă semnul (înmulțește cu -1) valorilor celulei rasterului de intrare de la o celulă la alta.",
		negateDesc: "Funcția de anulare schimbă semnul (înmulțește cu -1) valorilor pixelului rasterului de intrare de pe un pixel ",
		nibbleName: "Nibble",
		nibbleSnip: "Înlocuiește celulele unui raster în mod corespunzător unei măști cu valorilor vecinilor cei mai apropiați.",
		nibbleDesc: "Funcția globală Nibble permite zonelor selectate ale rasterului să le fie alocată valoarea vecinului cel mai apropiat. Acest lucru este util pentru editarea zonelor unui raster unde datele pot fi eronate.",
		notEqualName: "Nu este egal cu",
		notEqualSnip: "Efectuează o operație diferit de relațională pe două intrări de la o celulă la alta. Returnează 1 pentru celulele unde primul raster nu este egal cu al doilea raster și 0 acolo unde este egal.",
		notEqualDesc: "Funcția efectuează o operație relațională diferit de pe două intrări pixel cu pixel. Aceasta returnează o valoare de 1 pentru pixelii unde primul raster nu este egal cu al doilea raster și o valoare de 0 pentru pixeli unde primul raster este egal cu al doilea raster.",
		pansharpeningName: "Panclarificare",
		pansharpeningSnip: "Amplifică artificial rezoluția spațială a unei imagini cu benzi multiple prin fuzionarea acesteia cu o imagine pancromatică de rezoluție mai mare.",
		pansharpeningDesc: "Funcția de Panclarificare utilizează o imagine pancromatică de rezoluție mai mare sau bandă raster pentru fuzionarea cu un set de date de rezoluție mai mică, cu benzi multiple, pentru a crește rezoluția spațială a imaginii cu benzi multiple.<div><br/>Scopul panclarificării este acela de a crea o imagine cu calitate vizuală ridicată. Având în vedere faptul că tehnicile modifică caracteristicile de radiometrie și spectrale ale imaginilor cu benzi multiple, imaginile pan-clarificate trebuie să fie folosite cu atenție în scopul detectării analitice de la distanță.</div>",
		pathAllocationName: "Alocarea Distanței de Traseu",
		pathAllocationSnip: "Calculează sursa cu cel mai mic cost pentru fiecare celulă pe baza costului cel mai puțin acumulativ pe o suprafață de cost, în timp ce se ține seama de distanța de suprafață și factorii de cost orizontali și verticali.",
		pathAllocationDesc: "Funcția de Alocare a Distanței Traseului calculează cea mai apropiată sursă pentru fiecare celulă pe baza costului cel mai puțin acumulativ pe o suprafață de cost, în timp ce se ține seama de distanța de suprafață și factorii de cost orizontali și verticali.",
		pathBackLinkName: "Link Distanță de Traseu Înapoi",
		pathBackLinkSnip: "Definește vecinul care este celula următoare pe traseul de cost cel mai puțin acumulativ către sursa cu cel mai mic cost, în timp ce se ține seama de distanța de suprafață și factorii de cost orizontali și verticali.",
		pathBackLinkDesc: "Funcția Link Distanță de Traseu Înapoi identifică direcționalitatea vecinului care înseamnă următoarea celulă din cel mai puțin acumulativ traseu de cost către cea mai apropiată sursă, în timp ce se ia în considerare distanța de suprafață și factorii de cost orizontali și verticali.",
		pathDistanceName: "Distanța de Traseu",
		pathDistanceSnip: "Calculează pentru fiecare celulă distanța de cost cel mai puțin acumulativă de la sau către sursa cu cele mai puține costuri, în timp ce se ține seama de distanța de suprafață și factorii de cost orizontali și verticali.",
		pathDistanceDesc: "Funcția Distanței Traseului calculează, pentru fiecare celulă, distanța de cost cel mai puțin acumulativă către cea mai apropiată sursă, în timp ce se ține seama de distanța de suprafață și factorii de cost orizontali și verticali.",
		plusName: "Plus",
		plusSnip: "Adaugă (însumează) valorile a două rastere celulă cu celulă.",
		plusDesc: "Funcția de adunare adaugă (însumează) valorile a două rastere pixel cu pixel.",
		powerName: "Putere",
		powerSnip: "Crește valorile celulei dintr-un raster la puterea valorilor găsite într-un alt raster.",
		powerDesc: "Funcția de putere crește valorile pixelului într-un raster la puterea valorilor găsite într-un alt raster.",
		radarCalibrationName: "Calibrarea radarului",
		radarCalibrationSnip: "Transformă retro-împrăștierea RADARSAT-2.",
		radarCalibrationDesc: "Această funcție poate fi folosită pentru a calibra imaginile RADARSAT-2 într-un set de date mozaic sau ca un produs raster. Calibrarea este efectuată asupra imaginilor radar astfel încât valorile pixelului să fie o reprezentare reală a retro-împrăștierii.",
		rasterInfoName: "RasterInfo",
		rasterInfoSnip: "Modifică proprietățile rasterului, cum ar fi adâncimea bitului, valoarea NoData, dimensiunea celulei și așa mai departe.",
		rasterInfoDesc: "Informații despre Raster deschide un dialog cu proprietățile setului de date raster, cum ar fi numărul de coloane și rânduri, numărul de benzi, tipul pixelului, măsura și referința spațială. Puteți edita aceste proprietăți prin selectarea setului de date raster pentru a îl folosi ca șablon. ",
		rasterizeAttributesName: "Rasterizarea Atributelor",
		rasterizeAttributesSnip: "Îmbogățește un raster prin benzi suplimentare derivate din valorile atributelor specificate ale unui tabel extern sau dintr-un serviciu de obiecte spațiale.",
		rasterizeAttributesDesc: "Funcția de Rasterizare a Atributului îmbogățește un raster prin adăugarea benzilor derivate din atribute specificate, dintr-un tabel extern sau dintr-un serviciu de obiecte spațiale. Puteți specifica în mod opțional un raster de zonă și atributul ID-ului de zonă asociat pentru a permite căutarea pe baza regiunii.",
		rasterizeFeatureClassName: "Rasterizarea obiectelor spațiale",
		rasterizeFeatureClassSnip: "Transformă caracteristicile în raster.",
		rasterizeFeatureClassDesc: "Această funcție transformă datele clasei de obiecte spațiale poligonale, polilinie și puncte într-un strat tematic de raster.<div><br/>Obiectelor spațiale li se alocă valori ale pixelilor pe baza OBJECTID (implicit) al obiectelor spațiale. În mod opțional, valorile pixelilor pot avea la bază o valoare definită de utilizator din tabelul de atribute ale obiectului spațial de intrare.</div>",
		recastName: "Transformare",
		recastSnip: "Modifică parametrii unui lanț de funcții dintr-un set de date mozaic sau serviciu de imagini. Acest lucru este adesea utilizat cu seturi de date LAS pentru a evita necesitatea de a crea un set de date mozaic separat pentru diferite reprezentări ale terenului.",
		recastDesc: "Funcția de transformare este folosită pentru modificarea dinamică a parametrului de funcție folosit într-un set de date mozaic sau serviciu de imagini fără persistența fizică a modificărilor.",
		regionGroupName: "Grup de Regiune",
		regionGroupSnip: "Pentru fiecare celulă din rezultat, este înregistrată identitatea regiunii conectate căreia îi aparține acea celulă. Un număr unic este alocat fiecărei regiuni.",
		regionGroupDesc: "Funcția globală a Regiunii Grupului înregistrează, pentru fiecare celulă din rezultat, identitatea regiunii conectate căreia îi aparține acea celulă. Un număr unic este alocat fiecărei regiuni.<div><br/>Prima regiune scanată primește valoarea unu, a doua primește valoarea doi și tot așa, până când tuturor regiunilor le este alocată câte o valoare. Scanarea se deplasează de la stânga la dreapta și de sus în jos. Valorile alocate zonelor de ieșire se bazează pe momentul în care acestea sunt întâlnite în procesul de scanare.</div>",
		regionGrowName: "Creștere Regiune",
		regionGrowSnip: "Crește regiunile din punctele de plecare.",
		regionGrowDesc: "Funcția de Creștere Regiune grupează pixelii învecinați în grupuri în funcție de raza specificată de la punctul de plecare. Grupului de pixeli sau obiectului li se alocă o valoare de umplere specificată.",
		remapName: "Remapare",
		remapSnip: "Modifică valorile pixelului prin alocarea unor noi valori intervalelor de valori ale pixelului sau cu ajutorul tabelului extern.",
		remapDesc: "Funcția de Remapare vă permite să modificați sau să reclasificați valorile pixelilor datelor raster. Acest lucru poate fi realizat fie prin specificarea unui interval de valori de pixeli pentru cartarea conform unei valori de ieșire a pixelului, sau cu ajutorul unui tabel pentru maparea valorilor pixelului conform valorii de ieșire a pixelului.",
		reprojectName: "Reproiectare",
		reprojectSnip: "Modifică proiectarea unui set de date raster, set de date mozaic sau reper raster într-un set de date mozaic. De asemenea, poate recolecta probele datelor într-o nouă dimensiune de celulă și defini o origine.",
		reprojectDesc: "Funcția de Reproiectare modifică proiectarea unui set de date raster, set de date mozaic sau reper raster într-un set de date mozaic. De asemenea, poate recolecta probele datelor într-o nouă dimensiune de celulă și defini o origine.<div><br/>Funcția de reproiectare poate fi utilizată la crearea unei arhive dintr-un set de date raster sau mozaic care nu intră în proiecția specificată. De exemplu, la crearea unui serviciu de imagini arhivate care pot fi integrate prin aplicații cu alte servicii arhivate, este important ca acestea să se afle în aceeași proiecție. Adesea, aceasta este o proiecție Web Mercator. Din moment de setul de date mozaic nu poate fi reproiectat, aveți două opțiuni—fie creați un set de date mozaic inclus în referințe din setul dvs. de date mozaic în proiecția necesară, sau adăuga funcția de Reproiectare în lanțul de funcții al setului de date mozaic. Un alt exemplu utilizează această funcție de pe reperul raster într-un set de date mozaic. La utilizarea funcției de Raster Arhivat, vă puteți dori să introduceți funcția de Reproiectare astfel încât arhiva să fie creată în noua proiecție. Reperele raster într-un set de date mozaic poate fi arhivat atunci când prelucrarea este intensă și încercați să publicați un serviciu de imagini care este rapid, fără arhivarea întregului serviciu de imagini.</div>",
		resampleName: "Re-colectarea probelor",
		resampleSnip: "Modifică dimensiunea celulei unui raster.",
		resampleDesc: "Funcția de Recolectare a probelor modifică dimensiunea celulei, tipul recolectării sau ambele.<div><br/>Funcția de Recolectare a probelor trebuie utilizată doar cu anumite cerințe de calcul; de exemplu, atunci când calculați magnitudinea-direcția vântului sau curentului care presupune Re-colectarea probelor din rezoluția sursă.</div>",
		roundDownName: "Rotunjire în scădere",
		roundDownSnip: "Dă următoarea valoare mai mică a unui număr întreg, reprezentat ca punct flotant, pentru fiecare celulă dintr-un raster.",
		roundDownDesc: "Funcția de Rotunjire în Scădere dă următorul număr întreg mai mic, ca valoare a unui punct flotant, pentru fiecare pixel dintr-un raster.",
		roundUpName: "Rotunjire în creștere",
		roundUpSnip: "Dă următoarea valoare mai mare a unui număr întreg, reprezentat ca punct flotant, pentru fiecare celulă dintr-un raster.",
		roundUpDesc: "Funcția de Rotunjire în Creștere dă următorul număr întreg mai mare, ca valoare a unui punct flotant, pentru fiecare pixel dintr-un raster.",
		segmentMeanShiftName: "Segment Mean Shift",
		segmentMeanShiftSnip: "Grupează pixelii învecinați cu caracteristici spectrale asemănătoare în segmente.",
		segmentMeanShiftDesc: "Această funcție identifică obiectele, obiectele spațiale sau segmentele din imagistica dvs. grupând împreună pixelii învecinați care au caracteristici spectrale și spațiale asemănătoare. Puteți controla suma nivelării spațiale și spectrale pentru a ajuta la derivarea obiectelor spațiale de interes.",
		s1RadiometricCalibrationName: "Calibrarea Radiometrică Sentinel-1",
		s1RadiometricCalibrationSnip: "Efectuează tipuri diferite de calibrări radiometrice pe datele Sentinel-1.",
		s1RadiometricCalibrationDesc: "Această funcție raster efectuează trei calibrări diferite pentru seturile de date Sentinel 1, inclusiv beta zero și gamma, și obține setul de date calibrat. Obiectivul calibrării SAR este acela de a asigura imagini în care valorile pixelului pot fi aferente direct retro-împrăștierii radarului aferente scenei. Deși imaginile SAR necalibrate sunt suficiente pentru utilizare calitativă, imaginile SAR calibrate sunt esențiale pentru utilizarea cantitativă a datelor SAR.<div><br/>Prelucrarea tipică a datelor SAR, care produce imagini de Nivel 1, nu include corecții radiometrice și rămâne o polarizare radiometrică semnificativă. Prin urmare, este necesar să se aplice o corecție radiometrică imaginilor SAR astfel încât valorile pixelului ale imaginilor reprezintă cu adevărat retro-împrăștierea radarului suprafeței reflectante. Corecția radiometrică este necesară și pentru comparația imaginilor SAR achiziționate cu diverși senzori sau achiziționate din același senzor în momente diferite, în moduri diferite sau prelucrată de procesoare diferite.</div>",
		s1ThermalNoiseRemovalName: "Eliminarea Zgomotului Termic Sentinel-1",
		s1ThermalNoiseRemovalSnip: "Elimină zgomotul termic de la datele Sentinel-1.",
		s1ThermalNoiseRemovalDesc: "Corecția zgomotului termic poate fi aplicată produselor Sentinel-1 Level-1 Single Look Complex (SLC) cât și produselor Level-1 Ground Range Detection (GRD) care nu au fost deja corectate. Operatorul poate elimina această corecție pe baza adnotărilor produsului pentru a reintroduce semnalul de zgomot eliminat pentru a realiza produsul original. Adnotările produsului vor fi actualizate corespunzător pentru a permite reaplicarea corecției. ",
		setNullName: "Setare nulă",
		setNullSnip: "Setare Nulă stabilește amplasarea celulelor identificate către NoData pe baza unui criteriu specificat. Returnează NoData dacă evaluarea condițională este reală, și returnează valoarea specificată de un alt raster dacă este falsă.",
		setNullDesc: "Funcția de Setare Nulă stabilește pixelii identificați către NoData, pe baza criteriilor specifice. Returnează NoData dacă evaluarea condițională este reală (1) și returnează valoarea specificată în Rasterul Fals dacă o evaluare condiționată este falsă (0). Acest criteriu este specificat de rezultatul unei funcții matematice logice, care va fi Rasterul de intrare.",
		shadedReliefName: "Relief cu umbrire",
		shadedReliefSnip: "Creează o reprezentare cu benzi multiple, codificată după culori, 3D a suprafeței, cu poziția relativă a soarelui luată în considerare pentru umbrirea imaginii.",
		shadedReliefDesc: "Funcția de relief cu umbrire creează o reprezentare color 3D a terenului prin fuzionarea imaginilor din metodele codificate după elevație și de hașurare. Această funcție utilizează proprietățile altitudinii și azimutului pentru a specifica poziția soarelui.div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Calculează sinusul hiperbolic al celulelor dintr-un raster.",
		sinHDesc: "Funcția calculează sinusul hiperbolic al pixelilor dintr-un raster.",
		sinName: "Sin",
		sinSnip: "Calculează sinusul celulelor dintr-un raster.",
		sinDesc: "Funcția calculează sinusul al pixelilor dintr-un raster.",
		slopeName: "Pantă",
		slopeSnip: "Calculează rata de schimbare de la o valoare a pixelului la vecinii săi.",
		slopeDesc: "Această funcție raster calculează panta care reprezintă rata de modificare a elevației pentru fiecare celulă a modelului digital de elevație (DEM). Este prima valoare derivată dintr-un DEM.<div><br/>Această funcție utilizează o funcție atan() accelerată. Aceasta este de șase ori mai rapidă, iar eroarea de aproximare este întotdeauna mai mică de 0,3 grade.</div>",
		speckleName: "Împrăștiere",
		speckleSnip: "Prezintă filtre pentru eliminarea zgomotului seturilor de date ale radarelor cu deschidere sintetică.",
		speckleDesc: "Împrăștierea este zgomotul de înaltă frecvență de pe datele unui radar. Imaginile generate de sistemele de radar cu deschidere sintetică (SAR) sunt foarte supuse efectelor de împrăștiere din cauza prelucrării semnalelor împrăștiate și interferenței undelor electromagnetice împrăștiate de pe suprafețe sau obiecte. Această funcție de Împrăștiere filtrează setul de date radar împrăștiate și aplatizează zgomotul în timp ce reține marginile sau obiectele spațiale clare din imagine.",
		spectralConversionName: "Conversie Spectrală",
		spectralConversionSnip: "Aplică o matrice unei imagini cu benzi multiple.",
		spectralConversionDesc: "Funcția de Conversie Spectrală aplică o matrice unei imagini multibandă pentru a afecta valorile de culoare ale ieșirii.<div><br/>Unii senzori nu colectează benzi albastre din cauza unui raport redus între semnal și zgomot. De exemplu, acest lucru poate fi folosit pentru a converti o imagine infraroșu color falsă într-o pseudo-imagine de culoare naturală.</div>",
		squareRootName: "Rădăcină pătrată",
		squareRootSnip: "Calculează rădăcina pătrată a valorilor celulelor dintr-un raster.",
		squareRootDesc: "Funcția Rădăcină Pătrată calculează rădăcina pătrată a valorilor pixelului dintr-un raster.",
		squareName: "Pătrat",
		squareSnip: "Calculează pătratul valorilor celulei dintr-un raster.",
		squareDesc: "Pătrat calculează pătratul valorilor pixelului dintr-un raster.",
		statisticsHistogramName: "Statistică și Histogramă",
		statisticsHistogramSnip: "Definirea sau asocierea statisticii și histogramei.",
		statisticsHistogramDesc: "Funcția Statistică și Histogramă este utilizată pentru a defini statistica și histograma unui raster. Puteți introduce această funcție la sfârșitul lanțului de funcționare pentru a descrie statistica și histograma unui șablon cu funcție raster (RFT). Acest lucru poate fi necesar pentru a controla afișajul implicit al rezultatului prelucrării, în special la definirea unui lanț de funcționare care conține multe funcții.<div><br/>Puteți defini statisticile prin introducerea valorilor sau importarea dintr-un set de date raster sau un fișier XML. Histogramele pot fi definite doar prin importarea unui fișier.</div>",
		statisticsName: "Statistică",
		statisticsSnip: "Calculează statistica focală pentru fiecare pixel a unei imagini bazate pe o vecinătate focală definită.",
		statisticsDesc: "Funcția de Statistică calculează statistica focală pentru fiecare pixel al unei imagini bazate pe o vecinătate focală definită.<div><br/>Funcția Statistică poate fi utilizată pentru a umple liniile lipsă dintr-o imagine. Liniile lipsă sunt provocate adesea de probleme ale senzorului unde nu sunt colectate date. Acest lucru s-a întâmplat la senzori cum ar fi Landsat 7's Enhanced Thematic Mapper Plus (ETM+). Aceste date lipsă provoacă probleme pentru analiză și la studierea imaginilor. Nu se pot face prea multe la utilizarea imaginii pentru analiză; totuși, dacă a existat o imagine suprapusă, aceasta poate fi folosită în locul conținutului lipsă. Același lucru poate fi realizat dacă imaginile sunt folosite pentru vizualizare. Totuși, nu întotdeauna există o imagine suplimentară pentru a completa conținutul lipsă, așadar acesta trebuie derivat din datele existente.</div>",
		streamLinkName: "Stream Link",
		streamLinkSnip: "Alocă valori unice secțiunilor unei rețele liniare de raster între intersecții.",
		streamLinkDesc: "Funcția globală Stream Link alocă valori unice secțiunilor unei rețele liniare de raster între intersecții.<div><br/>Link-urile sunt secțiunile unui canal de curs care conectează două îmbinări succesive, o îmbinare și evacuarea, sau o îmbinare și linia de separație a apelor de la scurgere. În hidrologie, aceste segmente de curs sunt denumite cursuri de apă. O îmbinare este aferentă unui punct de curgere și ajută la delimitarea unui sub-bazin de recepție sau scurgere.</div>",
		stretchName: "Întindere",
		stretchSnip: "Amplifică o imagine prin ajustarea intervalului de valori afișate. Acest lucru nu modifică valorile pixelilor de la bază. Dacă un pixel are o valoare în afara intervalului specificat, aceasta va apărea fie ca valoare minimă, fie ca valoare maximă.",
		stretchDesc: "Funcția de Întindere amplifică o imagine prin modificarea proprietăților cum ar fi luminozitatea, contrastul și gamma prin tipuri multiple de întindere. Această funcție utilizează statisticile de la rastere din setul de date mozaic; prin urmare, dacă folosiți această funcție, trebuie să vă asigurați că au fost calculate statisticile.<div><br/>Tipul de întindere definește o întindere de histogramă care se va aplica rasterelor pentru amplificarea aspectului acestora. Întinderea îmbunătățește aspectul datelor prin împrăștierea valorilor pixelilor de-a lungul unei histograme de la valorile minimă și maximă definite conform adâncimii bitului. </div>",
		swathName: "Serie",
		swathSnip: "Interpolează din grile neregulate sau date de serie.",
		swathDesc: "Unele seturi de date netCDF sau HDF își stochează geolocarea sub forma unor șiruri așezate la distanțe neregulate. La adăugarea acestor seturi de date într-un set de date mozaic, funcția de serie ia datele cu grilă neregulată și re-colectează probele astfel încât fiecare pixel să aibă dimensiune uniformă și să fie pătrat.<div><br/>La adăugarea variabilelor din netCDF sau HDF într-un set de date mozaic, acesta va verifica în mod automat dacă datele sunt dispuse în șiruri regulate. În caz contrar, funcția de serie se aplică automat pentru transformarea automată a rasterului neregulat în puncte și apoi într-un raster cu grilă regulată. Puteți modifica metoda de interpolare și dimensiunea celulei folosite în funcția de serie a rasterului. Pentru datele cu raster cu distanță regulată, nu se va aplica interpolarea, datele vor fi citite așa cum sunt.</div>",
		tanHName: "TanH",
		tanHSnip: "Calculează tangenta hiperbolică a celulelor dintr-un raster.",
		tanHDesc: "Funcția calculează tangenta hiperbolică a pixelilor dintr-un raster.",
		tanName: "Tan",
		tanSnip: "Calculează tangenta celulelor dintr-un raster.",
		tanDesc: "Funcția calculează tangenta pixelilor dintr-un raster. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Calculează nivelurile de vegetație, umiditate și luminozitate. Această tehnică se bazează pe coeficienți care trebuie calculați în mod specific pentru un senzor.",
		tasseledCapDesc: "Transformarea Tasseled Cap (Kauth-Thomas) este creată pentru a analiza și reprezenta fenomenologia vegetației și modificările de dezvoltare urbană detectate de diverse sisteme de senzori ai unor sateliți. Aceasta este cunoscută sub denumirea de transformarea Tasseled Cap datorită formei distribuției grafice a datelor. Transformarea a oferit un raționament pentru șabloanele descoperite în datele Landsat MSS ale câmpurilor agricole ca funcție a ciclului de viață al recoltei. În principiu, pe măsură ce recoltele se dezvoltă de la sămânță la maturitate, există o creștere netă în ceea ce privește banda de infraroșu apropiat și o descreștere în ceea ce privește reflectanța roșie pe baza culorii solului<div><br/>Utilitatea acestei transformări s-a extins de la monitorizarea recoltelor la analizarea și reprezentarea vegetației pentru a sprijini o varietate de aplicații cum ar fi silvicultura, administrarea vegetației industriale, reprezentarea și administrarea ecosistemului, inventarierea și monitorizarea sechestrării și creditelor de carbon, dezvoltării urbane și mai multe. De asemenea, s-a extins de la sprijinirea Landsat MSS pentru a include și alte sisteme de satelit populare cum ar fi Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 și senzori multispectrali RapidEye.</div>",
		timesName: "Timpi",
		timesSnip: "Înmulțește valorile a două rastere celulă cu celulă.",
		timesDesc: "Funcția de Înmulțire înmulțește valorile a două rastere pixel cu pixel.",
		transposeBitsName: "Transpunere Biți",
		transposeBitsSnip: "Desface biții pixelului de intrare și îi reprezintă conform biților specificați din pixelul de ieșire. Scopul acestei funcții este acela de a manipula biții din câteva intrări, cum ar produsele benzii de calitate Landsat 8.",
		transposeBitsDesc: "Funcția de Transpunere Bit desface biții pixelului de intrare și îi reprezintă conform biților specificați din pixelul de ieșire. Scopul acestei funcții este acela de a manipula biții din câteva intrări, cum ar fi produsele benzii de calitate Landsat 8.",
		unitConversionName: "Conversia Unității",
		unitConversionSnip: "Modifică valorile dintr-o unitate de măsură la alta.",
		unitConversionDesc: "Această funcție transformă pixelii dintr-o unitate într-o altă unitate. Sprijină conversia distanței, vitezei și temperaturii.",
		vectorFieldName: "Câmp vector",
		vectorFieldSnip: "Prezintă seturi de date cu magnitudine (u) și direcție (v) sub forma unor săgeți unde magnitudinea este reprezentată prin dimensiune iar direcția este reprezentată prin unghiul săgeții.",
		vectorFieldDesc: "Funcția Câmp Vector este utilizată pentru a compune și converti două rastere într-un raster cu două benzi care este fie de tipul datelor magnitudine-direcție sau de tipul datelor U-V.<div><br/>Uneori, valoarea U este denumită ca fiind viteza zonală, iar valoarea V este uneori denumită viteza meridională.</div>",
		viewshed2Name: "Rază vizuală",
		viewshed2Snip: "Determină locațiile de pe o suprafață raster care sunt vizibile unui set de obiecte spațiale observatoare, folosind metode geodezice.",
		viewshed2Desc: "Funcția Rază vizuală determină locațiile de pe o suprafață raster care sunt vizibile unui set de obiecte spațiale observatoare, folosind metode geodezice<div><br/>Vizibilitatea fiecărui centru de pixel este determinată de un test pentru linia de vizibilitate între țintă și fiecare observator. Dacă un observator poate vedea ținta la centrul pixelului, pixelul este considerat vizibil. Acest instrument ia în considerare întotdeauna curbura pământului la stabilirea vizibilității.</div>",
		watershedName: "Bazin hidrografic",
		watershedSnip: "Stabilește zona de contribuție de deasupra unui set de celule dintr-un raster",
		watershedDesc: "Funcția globală Rază Vizuală stabilește zona de contribuție de deasupra unui set de pixeli dintr-un raster. Razele vizuale sunt delimitate de un raster de direcție a fluxului care identifică direcția fluxului din fiecare pixel.",
		weightedOverlayName: "Suprapunere ponderată",
		weightedOverlaySnip: "Suprapune mai multe rastere folosind o scară de măsură și o greutate comună conform importanței acesteia.",
		weightedOverlayDesc: "Această funcție vă permite să suprapuneți mai multe rastere folosind o scară de măsură și o greutate comună conform importanței acesteia.",
		weightedSumName: "Sumă Ponderată",
		weightedSumSnip: "Ponderează și adaugă un șir de rastere de la o celulă la alta.",
		weightedSumDesc: "Funcția sumei ponderate vă permite să suprapuneți mai multe rastere, înmulțindu-l pe fiecare cu ponderea alocată și însumarea acestora.",
		windchillName: "Răcire eoliană",
		windchillSnip: "Combină temperatura aerului ambiental și viteza vântului pentru calcularea factorului de răcire eoliană.",
		windchillDesc: "Funcția de Răcire Eoliană este utilă pentru identificarea condițiilor de iarnă periculoase care, în funcție de timpii de expunere la elemente, pot duce la degerături sau chiar la hipotermie. Răcirea eoliană este o modalitate de a măsura frigul resimțit de o persoană atunci când vântul este luat în considerare cu temperaturile deja scăzute. Cu cât este mai mare viteza vântului, cu atât mai repede se va pierde căldura corporală și cu atât mai frig se vor simți.",
		zonalRemapName: "Remapare Zonală",
		zonalRemapSnip: "Remapați pixelii într-un raster pe baza zonelor definite într-un alt raster și o valoare de mapare dependentă de zonă definită într-un tabel.",
		zonalRemapDesc: "Această funcție vă permite să remapați pixelii într-un raster pe baza zonelor definite într-un alt raster și o valoare de mapare dependentă de zonă definită într-un tabel.",
		zonalStatisticsName: "Statistică zonală",
		zonalStatisticsSnip: "Calculează statistici pe baza valorilor unui raster în cadrul zonelor unui alt set de date.",
		zonalStatisticsDesc: "Funcția calculează statistici pe baza valorilor unui raster în cadrul zonelor unui alt set de date. O zonă este definită ca toate suprafețele din intrare care au aceeași valoare. Aceste suprafețe nu trebuie să fie continue. Atunci când intrările de zonă și valoare sunt ambele rastere de aceeași rezoluție, vor fi utilizate direct. Dacă rezoluțiile sunt diferite, o re-colectare pe plan intern este aplicată pentru a corela rezoluțiile înainte de efectuarea operării zonale.",
		flowLengthName: "Lungimea fluxului",
		flowLengthSnip: "Calculează distanța în amonte sau în aval sau distanța ponderată, de-a lungul căii fluxului pentru fiecare celulă.",
		flowLengthDesc: "Aceasta este o funcție raster globală. Această funcție creează un strat tematic raster pentru distanța în amonte sau în aval sau distanța ponderată, de-a lungul căii fluxului pentru fiecare celulă.<div><br/>Utilizarea principală a funcției Lungime flux este calcularea distanței pentru cea mai lungă cale a fluxului în cadrul unui anumit bazin. Această măsurare este utilizată deseori pentru a calcula timpul de concentrare pentru un bazin. Acest lucru se efectuează utilizând opțiunea Amonte. Această funcție poate fi utilizată și pentru a crea diagrame distanță-zonă pentru precipitațiile și efectele ploilor torențiale ipotetice, utilizând rasterul de greutate ca impedanță privind mișcarea în pantă.</div>",
		streamOrderName: "Ordonare flux",
		streamOrderSnip: "Atribuie o ordine numerică segmentelor unui raster care reprezintă ramificațiile unei rețele liniare",
		streamOrderDesc: "Aceasta este o funcție raster globală. Această funcție creează un strat tematic de raster care atribuie o ordine numerică pentru segmentele unui raster care reprezintă ramificațiile unei rețele liniare.<div><br/>Rezultatul funcției Ordonare flux va fi unul de înaltă calitate dacă stratul tematic de raster al fluxului de intrare și stratul tematic de raster al direcției fluxului de intrare sunt derivate pe baza aceleiași suprafețe. Dacă rasterul de flux este derivat pe baza unui set de date al fluxurilor rasterizate, rezultatul nu poate fi utilizat, deoarece direcția nu va corespunde locației celulelor fluxului, de la celulă la celulă. Rezultatele funcției Acumulare flux pot fi utilizate pentru a crea o rețea de flux de raster prin aplicarea unei valori de prag pentru a selecta celule cu un flux cu o acumulare mare. De exemplu, celulele cu un flux mai mare de 100 celule în acestea sunt utilizate pentru definirea rețelei de flux. Utilizați funcția Con sau Setare nul pentru a crea un raster de rețea de flux în care valorile de acumulare a fluxului de 100 sau mai multe celule sunt setate la 1, iar celelalte sunt puse în fundal (NoData). Rețeaua de flux rezultată poate fi utilizată în funcția Ordonare flux. Această funcție acceptă doar un strat tematic raster de direcție a fluxului de intrare D8. Direcțiile de flux D8 pot fi create utilizând funcția Direcție flux și sunt executate cu tipul de direcție a fluxului implicit.</div>",
		snapPourPointName: "Fixare punct de curgere",
		snapPourPointSnip: "Fixează punctele de curgere în celula cu cea mai mare acumulare de flux pe o distanță specificată",
		snapPourPointDesc: "Aceasta este o funcție raster globală. Această funcție fixează punctele de curgere în celula cu cea mai mare acumulare de flux pe o distanță specificată.<div><br/>Funcția Fixare punct de curgere este utilizată pentru a asigura selectarea punctelor cu un flux cu acumulare mare la delimitarea bazinelor hidrografice utilizând funcția Bazin hidrografic. „Fixare punct de curgere” va căuta pe o distanță fixată în jurul punctelor de curgere specificate pentru celula cu fluxul cu cea mai mare acumulare și va muta punctul de curgere în locația respectivă. Rezultatul este un strat tematic de raster cu numere întregi atunci când locațiile punctelor de curgere au fost fixate în locațiile fluxului cu cea mai mare acumulare.</div>",
		sinkName: "Dolină",
		sinkSnip: "Creează un raster care identifică toate dolinele sau zonele de scurgere internă",
		sinkDesc: "Aceasta este o funcție raster globală. Această funcție creează un strat tematic de raster care identifică toate dolinele sau zonele de scurgere internă. O dolină este o celulă sau un set de celule conectate spațial cu o direcție a fluxului care nu poate fi atribuită uneia dintre cele opt valori valide dintr-un raster de direcție a fluxului. Acest lucru se poate întâmpla dacă celulele învecinate sunt mai mari decât celula procesată sau atunci când două celule au un flux reciproc, creând o buclă de două celule.<div><br/>Funcția Dolină acceptă doar un strat tematic raster de direcție a fluxului de intrare D8. Direcțiile de flux D8 pot fi create utilizând funcția Direcție flux și sunt executate cu tipul de direcție a fluxului implicit. Rezultatul funcției Dolină este un raster cu numere întregi, fiecărei doline fiindu-i atribuită o valoare unică. Aceste valori unice au un interval cuprins între 1 și numărul total de doline. De exemplu, dacă numărul total de doline este 1000, valorile unice vor fi cuprinse între 1 și 1000.</div>",
		aggregateName: "Însumare",
		aggregateSnip: "Generează o versiune de rezoluție redusă a unui raster.",
		aggregateDesc: "Funcția Însumare reeșantionează un raster de intrare la o rezoluție mai grosieră, pe baza unei strategii de însumare specifice. Fiecare celulă de ieșire conține Suma, Minimum, Maximum sau Mediu pentru celulele de intrare care sunt cuprinse de mărimea celulei respective.<div><br/>Factorul cu care trebuie să se înmulțească dimensiunea celulei rasterului de intrare. De exemplu, o valoare de 3 a factorului de celulă ar duce la o dimensiune a celulei de ieșire de trei ori mai mare decât aceea a rasterului de intrare. Puteți defini modul de manipulare a mărimii de ieșire dacă numărul de rânduri sau coloane din intrare nu este un multiplu exact al factorului de celulă. În mod implicit, limita superioară și cea dreaptă vor fi extinse pentru a acoperi o mărime spațială mai mare decât cea a rasterului de intrare, pentru a asigura faptul că sunt procesate toate celulele de intrare. În mod alternativ, limita superioară și cea dreaptă pot fi reduse pentru a acoperi o mărime mai mică, astfel încât numărul de rânduri și de coloane procesate să fie un multiplu exact al factorului de celulă. Puteți defini modul în care celule NoData trebuie manipulate de către calculul de însumare. Mecanismul implicit este faptul că celule NoData de intrare care se încadrează în mărimea spațială a unei celule mai mari din rasterul de ieșire vor fi ignorate la determinarea valorii celulei de ieșire respective. În mod alternativ, puteți specifica faptul că, dacă există chiar și o celulă NoData de intrare individuală în cadrul mărimii spațiale a unei celule de ieșire, celula respectivă va fi NoData în rasterul de ieșire.</div>",
		ccdcName: "Analiza CCDC",
		ccdcSnip: "Evaluează modificările în ceea ce privește valorile pixelilor odată cu trecerea timpului utilizând algoritmul de Detectare și Clasificare a Modificării Continue (CCDC) și generează rezultate model.",
		ccdcDesc: "Funcția de Analiză CCDC evaluează modificările în ceea ce privește valorile pixelilor odată cu trecerea timpului utilizând algoritmul de Detectare și Clasificare a Modificării Continue (CCDC) și generează un raster multidimensional care conține rezultatele de model. Acesta este acceptat numai împreună cu funcția Detectare modificare utilizând analiza de modificări în cadrul unui șablon de funcție raster. Pentru a realiza o ieșire de raster, conectați funcția Analiză CCDC la funcția Detectarea modificărilor utilizând analiza de modificări, salvați ca șablon de funcție raster și rulați Analiză raster cu șablonul de funcție.<div><br/>Această funcție utilizează algoritmul de Detectare și Clasificare a Modificării Continue (CCDC) pentru a evalua modificările privind valorile pixelilor odată cu trecerea timpului pentru o stivă de imagini. În cadrul unei serii temporale de imagini optice sau derivate de imagini (de exemplu, NDVI), valorile pixelilor pot fluctua din mai multe motive: 1. Modificare sezonieră -- Modificările valorilor pixelilor reflectă modificări ale vegetației din cauza variabilității sezoniere a temperaturii și a precipitațiilor. În Emisfera nordică, de exemplu, ne așteptăm să vedem o densitate mai mare a vegetației verde pe timpul verii, în comparație cu iarna; 2. Modificarea graduală -- Modificările valorilor pixelilor reflectă tendințele vegetației sau ale apei de suprafață din cauza variabilității climatice sau a practicilor de administrare a solurilor pe termen lung. De exemplu, suprafața solului dezgolit pot să crească gradual ca urmare a declinului precipitațiilor pe termen lung; și 3. Modificare bruscă -- Modificările valorilor pixelilor reflectă modificările acoperirii solurilor care au loc brusc din cauza despăduririi, a dezvoltării urbane, a dezastrelor naturale etc. Algoritmul CCDC identifică toate cele trei tipuri de modificări cu scopul primar de identificare a modificării bruște. Regresia armonică și modelele de tendință sunt adaptate la date pentru a estima modificarea sezonieră și graduală, iar abaterile bruște de la modelele de tendințe reprezintă indicații ale modificării bruște.<div><br/>Algoritmul CCDC a fost inițial conceput pentru datele de Temperatură luminozitate sau Reflectanță suprafață Landsat TM, Landsat ETM+ și Landsat OLI. Cu toate acestea, funcția Detectarea modificărilor utilizând analiza de modificări, utilizată împreună cu această funcție, va detecta modificarea pentru imaginile cu benzi multiple de la orice senzor compatibil, precum și derivatele de imagini cu o singură bandă, precum indicii de bandă. De exemplu, puteți efectua detectarea modificării continue asupra unui raster de Indice de Vegetație Diferență Normalizată (NDVI), deoarece modificările bruște în NDVI pot indica despădurirea.</div>",
		computeChangeName: "Calculare modificare",
		computeChangeSnip: "Calculează diferența dintre două seturi de date de raster categorice sau continue.",
		computeChangeDesc: "Funcția Calculare modificare poate fi utilizată pentru a enumera diferențele dintre două rastere clasificate pentru analiza de modificări a acoperirii solurilor sau poate fi utilizată pentru a examina modificările între două rastere continue cu o singură bandă, precum elevația, temperatura, coronamentul etc.",
		detectChangeName: "Detectarea modificărilor utilizând analiza de modificări",
		detectChangeSnip: "Generează un strat tematic de raster care conține informații despre modificările pixelilor utilizând rasterul de analiză a modificărilor de ieșire.",
		detectChangeDesc: "<div>Funcția Detectarea modificărilor utilizând analiza de modificări generează un strat tematic de raster care conține informații despre data modificării pixelilor utilizând rasterul de analiză a modificărilor. Rasterul de analiză a modificărilor trebuie să fie generat de Analizați modificările cu ajutorul instrumentului CCDC sau de Analizați modificările cu ajutorul instrumentului LandTrendr, sau funcția raster de analiză CCDC sau funcția raster de analiză LandTrendr.</div><br><div>Această funcție raster poate fi combinată cu funcția raster de analiză CCDC sau funcția raster de analiză LandTrendr într-un șabpon de funcție raster. Pentru a realiza o ieșire de raster permanentă, conectați ieșirea funcției Analiză CCDC sau Analiză LandTrendr la funcția Detectarea modificărilor utilizând analiza de modificări, salvați ca șablon de funcție raster și rulați Analiză raster cu șablonul.</div><br><div>Parametrul <strong>Tipul Schimbării</strong> indică informațiile generate. Informațiile sunt extrase din rasterul de analiză a schimbării. La rularea acestei funcții pe ieșirea din funcția/instrumentul CCDC, puteți alege dintre opțiunile următoare:</div><ul><li><strong>Ora celei mai recente schimbări</strong>--Cea mai recentă dată și oră la care un pixel a fost marcat ca fiind schimbat.</li><li><strong>Ora celei mai vech schimbări</strong>--Cea mai veche dată și oră la care un pixel a fost marcat ca fiind schimbat.</li><li><strong>Ora celei mai mari schimbări</strong>--Data și ora la care schimbarea calculată au fost cele mai semnificative pentru un pixel.</li><li> <strong>Număr de schimbări</strong>--Numărul total de schimbări ale pixelului.</li></ul><div>La rularea acestei funcții pe ieșirea din funcția/instrumentul LandTrendr, sunt disponibile opțiunile suplimentare următoare:</div><ul><li><strong>Ora celei mai lungi schimbări</strong>--Data la care un pixel a fost marcat ca fiind schimbat, la începutul sau sfârșitul celei mai lungi perioade de schimbare.</li><li><strong>Ora celei mai scurte schimbări</strong>--Data la care un pixel a fost marcat ca fiind schimbat, la începutul sau la sfârșitul celei mai scurte perioade de schimbare.</li><li><strong>Ora celei mai rapide schimbări</strong>--Data la care un pixel a fost marcat ca fiind schimbat, la începutul sau sfârșitul celei mai rapide perioade de schimbări.</li><li><strong>Ora celei mai lente schimbări</strong>--Data la care un pixel a fost marcat ca fiind schimbat, la începutul sau la sfârșitul celei mai lente perioade de schimbare.</li></ul><div>Rasterul de ieșire este un raster cu bandă multiplă în care fiecare bandă conține informații despre schimbare în funcție de tipul de schimbare selectat și de numărul maxim de schimbări specificate. De exemplu, dacă <strong>Tipul Schimbării</strong> este setat la <strong>Ora Celei Mai Vechi Schimbări</strong> și <strong>Numărul Maxim de Schimbări</strong> este setat la 2, funcția calculează cele două date cele mai vechi când a apărut schimbarea în cadrul seriei de timp pentru fiecare pixel. Rezultatul este un raster în care prima bandă conține datele celei mai vechi schimbări după pixel, iar a doua bandă conține datele celei de-a doua cele mai vechi schimbări după pixel.</div><br><div>La aplicarea acestei funcții pe ieșirea din instrumentele LandTrendr, puteți alege dacă să extrageți data care marchează începutul sau sfârșitul unei schimbări cu ajutorul parametrului <strong>Data Segmentului</strong>. De exemplu, pentru a înțelege cum a început cea mai recentă schimbare din seria de timp, setați <strong>Tipul Schimbării</strong> la <strong>Ora celei mai recente schimbări</strong> și <strong>Data Segmentului</strong> la <strong>Începutul segmentului</strong>.</div><br><div>Folosiți parametrii de filtrare de mai jos pentru a extrage date de schimbare mai specifice din rasterul dvs. de analiză a schimbării:</div><ul><li><strong>Filtrați după an</strong>--Identificați modificările apărute într-o perioadă specifică, de exemplu, dacă căutați schimbările apărute într-un peisaj în timpul unei secete de cinci ani.</li><li><strong>Filtrați după durată</strong>--Identificați schimbările apărute într-un anumit interval de ani, de exemplu, dacă căutați doar schimbările bruște apărute în 1 sau 2 ani. Puteți calcula durata care vă interesează cu ajutorul formulei <strong>anul de sfârșit - anul de început +1</strong>. Vor fi incluse și spațiile goale din seria de timp.</li><li><strong>Filtrați după magnitudine</strong>--Identificați schimbările conform unei magnitudini date, de exemplu, dacă căutați doar schimbările mari din indicele de vegetație NDVI. Magnitudinea este o valoare absolută, așadar valorile minime și maxime nu pot fi negative. Pentru a specifica schimbarea direcțională, folosiți parametrul <strong>Direcția Schimbării</strong>.</li></ul>",
		distanceAccumulationName: "Acumularea distanței",
		distanceAccumulationSnip: "Calculează distanța acumulată pentru fiecare celulă la surse, permițând distanța de linie dreaptă, distanța de cost, distanța de suprafață reală, precum și factorii de cost verticali și orizontali.",
		distanceAccumulationDesc: "Acumularea distanței calculează distanța pentru fiecare locație din zona de studiu până la cea mai apropiată sursă sau cu costul cel mai mic. Dacă sunt furnizate doar sursele pentru intrare, atunci este calculată o distanță de linie dreaptă pentru fiecare locație din zona de studiu. Dacă ambele surse și bariere sunt utilizate ca intrare, Acumularea distanței calculează distanța de linie dreaptă din preajma barierelor. Atât pentru rasterul sursă, cât și pentru rasterul de barieră, valoarea de fundal trebuie să fie NoData, în timp ce sursele și barierele sunt reprezentate cu valori de celule valide. Valorile valide includ zero. <div><br/>Atunci când un raster de suprafață este furnizat ca intrare, este calculată distanța suprafeței efective dintre celule. Pentru a efectua analiza de cost utilizând Acumularea distanței, este necesară o suprafață de cost. Dacă este furnizată o suprafață de cost, rezultatul este un raster de distanță de cost acumulat. Atunci când sunt furnizați factori orizontali și verticali, direcționalitatea este luată în considerare ca și cum costul ar fi acumulat. Există patru caracteristici sursă care pot fi utilizate. Aceste caracteristici, care pot fi ale sursei sau ale elementelor de deplasare din sursă, sunt controlate de parametri specifici: 1. Acumularea inițială : setează costul inițial înainte de a începe mișcarea. 2. Acumularea maximă: specifică costul pe care o sursă îl poate acumula înainte de atingerea limitei sale. 3. Multiplicatorul de aplicat la costuri: specifică modul de deplasare sau magnitudinea la sursă. 4 Direcția de deplasare: identifică dacă elementul de mutare începe la o sursă și se deplasează către locații diferite de sursă sau dacă începe la locații diferite de sursă și se deplasează înapoi la o sursă.<div><br/>În mod implicit, rezultatul de la Acumularea distanței are o singură bandă, care reprezintă rasterul de acumulare a distanței. Cu toate acestea, poate fi creată și o bandă secundară, banda de direcție inversă. Această bandă indică ce direcție trebuie urmată de la fiecare locație din zona de studiu pentru a ajunge la sursa cu cele mai mici costuri. Ambele benzi vor fi necesare pentru a determina traseele optime în cadrul zonei de studiu. Pentru a genera un traseu, mai întâi utilizați funcția Extragerea Benzilor pentru a extrage rasterul de acumulare a distanței și rasterul de direcție inversă. Utilizați aceste straturi tematice ca intrare pentru funcția Traseu de Cost. În funcție, utilizați rasterul de acumulare a distanței ca intrare de raster cost-distanță și rasterul de direcție inversă ca intrare de raster de legătură inversă.</div>",
		distanceAllocationName: "Alocarea Distanței",
		distanceAllocationSnip: "Calculează alocarea distanței pentru fiecare celulă la sursele furnizate, bazându-se pe distanța de linie dreaptă, distanța de cost, distanța de suprafață reală, precum și factorii de cost verticali și orizontali.",
		distanceAllocationDesc: "Alocarea Distanței calculează la ce sursă este alocată fiecare locație din zona de studiu. Dacă sunt furnizate doar sursele pentru intrare, atunci locațiile sunt alocate utilizând o distanță de linie dreaptă față de cea mai apropiată sursă. Dacă ambele surse și bariere sunt utilizate ca intrare, Alocarea distanței calculează distanța de linie dreaptă din preajma barierelor pentru a determina cărei surse îi este alocată o locație. Atât pentru rasterul sursă, cât și pentru rasterul de barieră, valoarea de fundal trebuie să fie NoData, în timp ce sursele și barierele sunt reprezentate cu valori de celule valide. Valorile valide includ zero.<div><br/>Pentru a efectua analiza de cost utilizând Alocarea distanței, este necesară o suprafață de cost. Dacă este furnizată o suprafață de cost, rezultatul va fi un raster de alocare bazat pe cost acumulativ, nu pe distanța de linie dreaptă. Atunci când sunt furnizați factori orizontali și verticali, direcționalitatea este luată în considerare ca și cum costul ar fi acumulat. Atunci când un raster de suprafață este furnizat ca intrare, este calculată distanța suprafeței efective acoperite la trecerea dintre celule, atunci când alocarea este determinată. Există patru caracteristici sursă care pot fi utilizate. Aceste caracteristici, care pot fi ale sursei sau ale elementelor de deplasare din sursă, sunt controlate de parametri specifici: 1. Acumularea inițială : setează costul inițial înainte de a începe mișcarea. 2. Acumularea maximă: specifică costul pe care o sursă îl poate acumula înainte de atingerea limitei sale. 3. Multiplicatorul de aplicat la costuri: specifică modul de deplasare sau magnitudinea la sursă. 4 Direcția de deplasare: identifică dacă elementul de mutare începe la o sursă și se deplasează către locații diferite de sursă sau dacă începe la locații diferite de sursă și se deplasează înapoi la o sursă.<div><br/>În mod implicit, rezultatul de la Alocarea distanței are o singură bandă, care reprezintă rasterul alocării distanței. Bifarea opțiunii Boolean Generare rând și coloană sursă ca benzi suplimentare la ieșire va avea ca rezultat un raster cu benzi multiple care constă în trei benzi. Prima bandă este banda de alocare a distanței, a doua bandă include un indice de rând, iar a treia bandă include un indice de coloană. Acești indici identifică amplasarea celulei sursă care este la cea mai mică distanță de cost acumulată. Indexul rândului sursă și indexul coloanei sursă pot fi utilizate împreună pentru a efectua maparea intensității. Dacă interogați orice locație din zona dvs. de studiu din benzile doi și trei, veți afla rândul și coloana sursei cu costul cel mai mic pentru locația respectivă.</div>",
		eucBackDirectionName: "Direcție Inversă Euclidiană",
		eucBackDirectionSnip: "Calculează, pentru fiecare celulă, direcția, în grade, până la celula vecină de-a lungul celui mai scurt traseu înapoi către cea mai apropiată sursă în timp ce se evită barierele.",
		eucBackDirectionDesc: "Funcția Direcția Inversă Euclidiană are ca rezultat un raster de punct flotant continuu, care reprezintă direcția în grade înapoi la cea mai apropiată sursă, evitând barierele, dacă sunt furnizate bariere.<div><br/>Intrările pentru Direcția Inversă Euclidiană reprezintă sursa utilizată pentru calcularea direcției respective. O intrare opțională este un raster care reprezintă bariere în cadrul zonei de studiu. Atât pentru rasterul sursă, cât și pentru rasterul de barieră, valoarea de fundal trebuie să fie NoData, în timp ce sursele și barierele sunt reprezentate cu valori valide. Valorile valide includ zero. În mod implicit, calculul va procesa mărimea combinată a surselor și a barierelor, plus 2 rânduri și coloane. Dacă analiza este necesară numai în cadrul unei distanțe specificate față de surse, poate fi utilizat parametrul Distanță maximă. Direcția Inversă Euclidiană acceptă atât o metodă În plan, cât și o metodă Geodezică, în calcul. Metoda de calcul În plan va fi realizată pe un plan plat proiectat folosind un sistem de coordonate cartezian 2D. Metoda de calcul Geodezică va fi efectuată asupra elipsoidului, ceea ce înseamnă că, indiferent de proiecția de intrare sau de ieșire, rezultatelor nu se modifică.<div><br/>Rezultatul din funcția Direcție Inversă Euclidiană va fi utilizat împreună cu rezultatul din funcția Distanță Euclidiană pentru a determina cele mai scurte trasee de la locațiile din cadrul zonei de studiu înapoi la sursă. Atât rezultatul pentru Direcția Inversă Euclidiană, cât și rezultatul Distanța Euclidiană, sunt utilizate în funcția Traseu de Cost, împreună cu destinațiile, pentru a genera cele mai scurte trasee.</div>",
		expandName: "Extindere",
		expandSnip: "Extinde zonele selectate ale unui raster după zone și după un număr specificat de celule.",
		expandDesc: "Cu funcția globală Extindere, puteți generaliza sau simplifica rastere prin mărirea unor anumite zone. De asemenea, puteți controla gradul de generalizare ce va avea loc.<div><br/>Zonele pe care le selectați vor crește ca dimensiune prin extinderea în celelalte zone. Din punct de vedere conceptual, Valorile de zonă selectate pot fi vizualizate ca zone de prim plan, în timp ce celelalte valori rămân valori în fundal. Zonele de prim plan se pot extinde în zonele de fundal.<div><br/>Gradul de generalizare poate fi controlat cu parametrul Număr de celule. În mod implicit, această valoare este 1, ceea ce înseamnă că zonele selectate se vor extinde cu o valoare corespunzătoare dimensiunii unei celule. Pentru a mări gradul de generalizare, puteți specifica o valoare mai mare pentru acest parametru. Din punct de vedere conceptual, acest lucru este similar rulării instrumentului cu un număr echivalent celui specificat, iar rezultatele rulării anterioare reprezintă intrarea în iterația ulterioară.</div>",
		trendAnalysisName: "Generarea Tendinței",
		trendAnalysisSnip: "Estimează tendința pentru fiecare pixel din una sau mai multe variabile dintr-un raster multidimensional.",
		trendAnalysisDesc: "<div>Această funcție poate fi utilizată pentru aplicarea datelor pe o linie de tendință liniară, armonică sau polinomială, sau poate fi folosită pentru efectuarea detectării tendinței cu ajutorul testului Mann-Kendall sau Seasonal-Kendall.</div><br><div>Rasterul de tendință de ieșire generat cu această funcție este folosit ca intrare în funcția <strong>Preconizați cu ajutorul tendinței</strong>.</div><br><div>Testele Mann-Kendall și Seasonal-Kendall sunt folosite pentru a stabili dacă există o tendință monotonică în cadrul datelor. Acestea sunt non-parametrice, adică nu pleacă de la premisa unei distribuiri specifice a datelor. Testul Mann-Kendall nu ia în considerare corelarea serială sau efectele sezoniere. Dacă datele sunt sezoniere, testul Seasonal-Kendall este mai potrivit.</div><br><div>Dacă instrumentul este folosit pentru efectuarea testului Mann-Kendall sau a testului Seasonal-Kendall, rezultatul este un raster cu cinci benzi după cum urmează:</div><ul><li>Banda 1 = panta lui Sen</li><li>Banda 2 = valoarea p</li><li>Banda 3 = punctajul Mann-Kendall (S)</li><li>Banda 4 = Fluctuația S</li><li>Banda 4 = Fluctuația S</li><li>Banda 5 = Punctajul Z</li></ul><div>Ieșirile din testul Mann-Kendall sau Seasonal-Kendall pot fi folosite pentru a stabili care pixeli din seria dvs. multidimensională de timp au o tendință cu semnificație statistică. Puteți folosi aceste informații împreună cu analiza tendinței liniare, armonice sau polinomiale pentru a extrage tendințele semnificative din seria dvs. de timp. Puteți genera o mască incluzând pixelii cu valori p semnificative, aplicați masca rasterului multidimensional și folosi acest raster multidimensional cu mască pe post de intrare în instrument pentru efectuarea analizelor tendințelor liniare, armonice sau polinomiale.</div><br><div>Există trei opțiuni ale liniei de tendință pentru corelarea unei tendințe cu valorile variabile de-a lungul unei dimensiuni: liniară, polinomială și armonică.</div><br><div>Pentru analiza tendinței liniare, ieșirea este un raster cu trei benzi după cum urmează:</div><ul><li>Banda 1 = Pantă</li><li>Banda 2 = Interceptare</li><li>Banda 3 = eroarea mediei pătratice (RMSE) sau eroarea din jurul rândului care se potrivește cel mai bine</li></ul><div>Pentru analiza tendinței polinomiale, numărul de benzi din ieșire depinde de ordinea polinomială. Ajustarea polinomială de ordinul doi realizează un raster cu patru benzi după cum urmează:</div><ul><li>Banda 1 = Polynomial_2</li><li>Banda 2 = Polynomial_1</li><li>Banda 3 = Polynomial_0</li><li>Banda 4 = RMSE</li></ul><div>Ajustarea polinomială de ordinul trei realizează un raster cu cinci benzi după cum urmează:</div><ul><li>Banda 1 = Polynomial_3</li><li>Banda 2 = Polynomial_2</li><li>Banda 3 = Polynomial_1</li><li>Banda 4 = Polynomial_0</li><li>Banda 5 = RMSE</li></ul><div>Pentru analiza tendinței armonice, numărul de benzi din ieșire depinde de frecvența armonică. Când frecvența este setată la 1, iețirea este un raster cu cinci benzi după cum urmează:</div><ul><li>Banda 1 = Pantă</li><li>Banda 2 = Interceptare</li><li>Banda 3 = Harmonic_sin1</li><li>Banda 4 = Harmonic_cos1</li><li>Banda 5 = RMSE</li></ul><div>Când frecvența este setată la 2, ieșirea este un raster cu șapte benzi după cum urmează:</div><ul><li>Banda 1 = Pantă</li><li>Banda 2 = Interceptare</li><li>Banda 3 = Harmonic_sin1</li><li>Banda 4 = Harmonic_cos1</li><li>Banda 5 = Harmonic_sin2</li><li>Banda 6 = Harmonic_cos2</li><li>Banda 7 = RMSE</li></ul><div>Parametrul <strong>Lungimea Ciclului</strong> pentru analiza tendinței armonice este folosit pentru a indica numărul și lungimea ciclurilor pe care vă așteptați să le vedeți în datele dvs. pe durata unei zile sau a unui an. De exemplu, dacă vă așteptați ca datele dvs. să treacă prin două cicluri de variație pe parcursul unui an, lungimea ciclului va fi de 182,5 zile sau de 0,5 ani. Dacă aveți date despre temperatură colectate la fiecare trei ore și există un ciclu de variație pe zi, lungimea ciclului este de o zi.</div><br><div>Parametrul <strong>Frecvență</strong> pentru analiza tendinței armonice este folosit pentru a descrie modelul armonic care să corespundă datelor. Dacă frecvența este setată la 1, o combinație a unei curbe armonice liniare și de prim ordin va fi folosită pentru a corespunde modelului. Dacă frecvența este 2, o combinație a curbei armonice liniare, de prim ordin și a curbei armonice de ordin doi va fi folosită pentru a corespunde datelor. Dacă frecvența este 3, o curbă armonică suplimentară de ordin trei va fi folosită pentru modelarea datelor, și așa mai departe.</div><br><div>Statisticile privind indicele de concordanță al modelului pot fi generate ca ieșiri opționale. Eroarea rădăcinii medii pătrate (RMSE), R pătrat și valoarea p a pantei de tendință pot fi calculate și simbolizate. Simbolizați stratul tematic al rasterului de tendință de ieșire cu ajutorul semioticii <strong>RGB</strong> și specificați statisticile ca fiind benzile roșie, verde și albastră.</div><br>",
		spectralUnmixingName: "Stratificarea spectrală liniară",
		spectralUnmixingSnip: "Efectuează clasificarea subpixelilor și calculează abundența fracționară a tipurilor diferite de acoperiri de sol pentru pixeli individuali.",
		spectralUnmixingDesc: "Funcția Stratificarea spectrală liniară calculează acoperirea fracționară pentru pixeli individuali care conțin mai multe tipuri de acoperiri de sol. Generează un strat tematic cu benzi multiple, unde fiecare bandă corespunde abundenței fracționare a fiecărei clase de acoperire de sol. De exemplu, dacă o utilizați pentru a efectua clasificarea acoperirii de sol pe o imagine multispectrală pentru identificarea vegetației fotosintetice, solul dezgolit și vegetația moartă sau nefotosintetică.<div><br/>Ordinea rasterului cu benzi multiple de ieșire urmează ordinea profilului spectral de intrare. Numărul de clase nu poate depăși numărul de benzi din rasterul de intrare. De exemplu, nu puteți extrage informații despre mai mult de 8 clase dintr-un raster de 8 benzi.</div>",
		multidimensionalFilterName: "Filtru multidimensional",
		interpolateRasterByDimensionFunctionName: "Interpolați rasterul în funcție de dimensiune",
		interpolateRasterByDimensionFunctionSnip: "Interpolează un raster multidimensional la valorile de dimensiune specificate folosind segmente adiacente.",
		interpolateRasterByDimensionFunctionDesc: "<p>Această funcție vă permite să estimați valorile în pixeli pentru o dimensiune nedefinită dintr-un raster multidimensional. De exemplu, dacă aveți un set de date care conține temperatura oceanului la nivelul de suprafață și la 100 de metri sub nivelul mării și doriți să estimați temperatura la sub 50 de metri sub nivelul mării, puteți utiliza această funcție pentru a obține o estimare la acea adâncime folosind definiția dimensiunii după valori.</p><p>Puteți, de asemenea reduceți numărul de probe ale unui set de date lunar la un set de date zilnic folosind definiția dimensiunii după interval și specificând valoarea parametrului Pas la 1 și valoarea parametrului Unitate la Zile.</p><p>Folosiți definiția dimensiunii rasterului în funcție de țintă pentru a estima valoarea pentru Rasterul țintă.</p>",
		multidimensionalFilterSnip: "Creează un strat tematic raster dintr-un set de date de raster multidimensional prin segmentarea datelor la nivelul variabilelor și al dimensiunilor definite.",
		multidimensionalFilterDesc: "Filtrul multidimensional creează un strat tematic de raster multidimensional prin filtrarea și extragerea unui subset de variabile dintr-un raster multidimensional. De exemplu, aveți un set de date multidimensional care conține date lunare despre precipitații pentru 30 de ani și doriți să extrageți doar datele pentru ianuarie pentru a vedea cum s-au schimbat precipitațiile pentru luna respectivă.<div><br/>Utilizarea parametrului Definiția dimensiunii pentru a segmenta dimensiunile utilizând un interval, o valoare sau un interval de valori. De exemplu, dacă aveți date despre salinitatea oceanelor pentru 10 ani, colectate lunar și la o adâncime de 2 până la 500 de metri, ați putea utiliza opțiuni diferite pentru definiția dimensiunii pentru următoarele scenarii. Scenariul 1: Extrageți date despre salinitate pentru ianuarie pentru perioade de 10 ani. Alegeți După valori, setați Dimensiune la StdTime și Valori la Ianuarie. Scenariul 2: Segmentați datele despre salinitate după un interval de adâncime, de la 0 la 150 de metri. Alegeți După intervale, setați Dimensiune la StdZ și Valoare minimă la -150, iar Valoare maximă la 0. Scenariul 3: Extrageți date despre salinitate pentru primele 10 zile din ianuarie pentru o perioadă de 10 ani. Alegeți După iterație, setați Dimensiune la StdTime, setați Începutul primei iterații și Sfârșitul primei iterații la începutul și sfârșitul corespunzătoare pentru perioada de iterație, setați Pasul la 1 și Unitate la Ani.</div>",
		multidimensionalRasterName: "Raster multidimensional",
		multidimensionalRasterSnip: "Adaugă date multidimensionale la o hartă ca un strat tematic de raster multidimensional.",
		multidimensionalRasterDesc: "Funcția Raster multidimensional adaugă date multidimensionale la o hartă ca un strat tematic de raster multidimensional. Această funcție este utilă la efectuarea fluxurilor de lucru pentru analiza de raster utilizând un lanț de funcții.<div><br/>Seturile de date raster multidimensional acceptate includ netCDF, GRIB, HDF și CRF de la Esri. De asemenea, sunt acceptate seturi de date mozaic multidimensionale.</div>",
		optimalPathAsRasterName: "Traseu optim ca raster",
		optimalPathAsRasterSnip: "Calculează traseul cu cel mai mic cost dintr-o sursă la o destinație.",
		optimalPathAsRasterDesc: "Această funcție globală produce un raster de ieșire care înregistrează traseul sau traseele optime din locații selectate până la cea mai apropiată sursă definită în suprafața de cost acumulativă, cu privire la distanța de cost.<div><br/>Una sau mai multe funcții de cost ponderat (Acumularea Distanței și Alocarea Distanței) trebuie, în general, rulate înainte de rularea funcției Traseu optim ca raster pentru crearea rasterelor de acumulare a distanței și de direcție inversă de intrare. Acestea sunt straturi tematice de tip raster de intrare obligatorii pentru funcția Traseu optim. Valorile pentru traseul optim de ieșire reprezintă numărul trasee pentru o locație dată. În multe cazuri, traseele urmează aceeași rută, părăsind o sursă și apoi divergând pentru a se îndrepta către destinații diferite. De exemplu, valoarea 1 indică faptul că există un singur traseu optim pentru o locație dată, în timp ce valoarea 5 înseamnă că, pentru locația respectivă, există cinci trasee optime care parcurg celula respectivă în cadrul zonei de studiu.<div><br/>Datele de destinație de intrare trebuie să fie un strat tematic de tip raster. Setul de celule de destinație constă în toate celulele din rasterul de intrare care au valori valide. Celulele care au valori NoData nu sunt incluse în set. Valoarea zero este considerată o destinație legitimă. Un raster de destinație poate fi creat utilizând instrumentele de extragere. Dacă aveți obiecte spațiale de destinație sau de sursă, le puteți converti în raster utilizând funcția Rasterizarea obiectelor spațiale. Utilizați rasterul de acumulare a distanței sau de direcție inversă ca Raster de intrare pentru funcția de rasterizare. Acest lucru va asigura faptul că respectivul obiect spațial este rasterizat utilizând aceeași dimensiune, mărime și referință spațială pentru celulă, precum celelalte rastere care fac obiectul funcției Traseu optim ca raster. Funcția Traseu optim ca raster poate fi utilizată și pentru a deriva traseul cu cea mai mică rezistență către un model de elevație digitală (DEM). În acest caz, utilizați DEM pentru rasterul de acumulare a distanței de intrare și de ieșire din funcția Direcția fluxului pentru Rasterul de direcție inversă.</div>",
		trendName: "Predicția Utilizării Tendinței",
		trendSnip: "Calculează un strat tematic de tip raster multidimensional prognozat folosind rasterul de tendințe rezultant din funcția Generarea Tendinței sau din instrumentul de geoprocesare Generarea Rasterului de Tendințe.",
		trendDesc: "Funcția Predicția Utilizării Tendinței calculează un strat tematic de tip raster multidimensional prognozat folosind rasterul de tendințe rezultant din funcția Generarea Tendinței sau din instrumentul de geoprocesare Generarea Rasterului de Tendințe.",
		rasterCollectionName: "Procesare colecție raster",
		rasterCollectionSnip: "Procesează fiecare segment dintr-un raster multidimensional sau fiecare reper dintr-un raster mozaic. Această funcție poate, de asemenea, să efectueze agregarea mai multor segmente într-un singur segment.",
		rasterCollectionDesc: "Funcția Procesare colecție raster procesează fiecare segment dintr-un raster multidimensional sau fiecare reper dintr-un raster mozaic. Această funcție poate, de asemenea, să efectueze agregarea mai multor segmente într-un singur segment.<div><br/>Această funcție procesează fiecare segment dintr-un raster multidimensional sau din rasterul mozaic care utilizează un șablon de funcție raster. Această funcție acceptă următoarele opțiuni: 1. Specificați un șablon de funcție raster pentru Funcția Reper. De exemplu, aveți un set de date mozaic care conține 20 de ani de imagini Landsat și doriți să calculați NDVI pentru fiecare scenă din seria temporală. Pentru funcția Reper, specificați un șablon de funcție raster care conține funcția raster NDVI. 2. Specificați un șablon de funcție raster pentru Funcția Agregare. De exemplu, aveți un raster multidimensional care conține date zilnice de temperatură pentru 10 ani și doriți să calculați temperatura maximă pentru fiecare an. În funcția Agregare, specificați un șablon de funcție raster care conține funcția Statisticile celulei, cu operația setată la Maximum. La Definiția agregării, setați Dimensiune la StdTime, Tip la Cuvânt cheie interval și Interval cuvânt cheie la Anual. Rețineți faptul că setul de date mozaic de intrare nu este multidimensional, iar funcția de agregare nu va respecta definiția agregării. Funcția de agregare va agrega toate reperele sau fiecare grup într-unul dacă acestea sunt definite în șablonul funcției de agregare. Pentru mai multe informații privind utilizarea grupurilor într-un set de date mozaic, consultați Utilizarea reperelor într-un set de date mozaic în Șabloane de funcții raster. 3. Specificați un șablon de funcție raster pentru Funcția Procesare. Funcția sau lanțul de funcții din acest șablon se utilizează pentru afișarea noului raster procesat. De exemplu, specificați un șablon de funcție raster care conține funcția Harta culorii pentru a modifica modul de afișare a stratului tematic de tip raster procesat. Rețineți faptul că, dacă intrarea este un raster multidimensional, funcția de procesare este aplicată în segmentul de afișare curent. Dacă intrarea este un strat tematic mozaic sau un set de date mozaic, funcția de procesare este aplicată rasterului mozaic utilizând prima metodă de soluționare a suprapunerilor. 3. Specificați șabloanele pentru orice combinație a celor trei funcții. De exemplu, aveți un set de date mozaic care conține imagini Landsat de serii temporale și doriți să generați o imagine compozită a NDVI maxim. Pentru funcția Reper, specificați un șablon de funcție raster care conține funcția raster NDVI. Pentru funcția Agregare, specificați un șablon de funcție raster care conține funcția Statisticile celulei, cu operația setată la Maximum. Pentru funcția Procesare, specificați un șablon de funcție raster care conține funcția Harta culorii. Rețineți faptul că ordinea de procesare a funcțiilor urmează ordinea parametrilor de intrare. De exemplu, funcția Reper va fi procesată prima.</div>",
		randomName: "Aleatoriu",
		randomSnip: "Creează un raster cu valori ale pixelilor alese în mod aleatoriu dintr-o distribuție pseudoaleatoare. Sunt acceptate mai multe distribuții și generatoare de numere aleatorii.",
		randomDesc: "Funcția Aleatoriu creează un raster cu valori aleatorii ale pixelilor care pot fi utilizate în șabloane de funcții raster sau în seturi de date mozaic.<div><br/>Deși majoritatea funcțiilor funcționează pe unul sau mai multe rastere de intrare, funcția Aleatoriu nu necesită un raster de intrare. Acest lucru înseamnă că se comportă mai mult ca un set de date raster decât ca o funcție, așa că trebuie acordată o funcție specială la adăugarea sau eliminarea acestuia în/din lanțul de funcții.</div>",
		shrinkName: "Micșorare",
		shrinkSnip: "Micșorează zonele selectate cu un număr specificat de celule înlocuindu-le cu valoarea celulei care este cea mai frecventă în vecinătatea sa.",
		shrinkDesc: "Cu funcția globală Micșorare, puteți generaliza sau simplifica rastere prin micșorarea unor anumite zone. De asemenea, puteți controla gradul de generalizare ce va avea loc.<div><br/>Zonele pe care le selectați se vor micșora sau le va fi redusă dimensiunea prin extinderea celulelor din zonele vecine în acestea. Din punct de vedere conceptual, Valorile de zonă selectate pot fi vizualizate ca zone de prim plan, în timp ce celelalte valori rămân valori în fundal. Celulele din zonele aflate în prim plan pot fi înlocuite cu celule din zonele aflate în fundal. De asemenea, pot fi înlocuite insulele înguste din cadrul unei zone, care pot fi considerate ca împărtășind limitele cu zona respectivă.<div><br/>Gradul de generalizare poate fi controlat cu parametrul Număr de celule. În mod implicit, această valoare este 1, ceea ce înseamnă că zonele selectate se vor micșora cu o valoare corespunzătoare dimensiunii unei celule. Pentru a mări gradul de generalizare, puteți specifica o valoare mai mare pentru acest parametru. Din punct de vedere conceptual, acest lucru este similar rulării instrumentului cu un număr echivalent celui specificat, iar rezultatele rulării anterioare reprezintă intrarea în iterația ulterioară.</div>",
		trendToRGBName: "Tendința la RGB",
		trendToRGBSnip: "Transformă un raster de tendințe într-un raster cu trei benzi (roșu, verde și albastru).",
		trendToRGBDesc: "Funcția Tendință la RGB transformă un raster de tendințe într-un raster cu trei benzi (roșu, verde și albastru). Rasterul de tendințe este generat din funcția rasterului Generarea Tendinței sau a funcției rasterului Analiză CCDC.<div><br/>Această funcție este utilă pentru vizualizarea datelor coeficientului de model din funcția Generarea Tendinței sau a funcției Analiză CCDC: Ambele funcții estimează tendințele din valorile modificate ale pixelilor, dar este dificil să se interpreteze direct rezultatele funcțiilor.<div><br/>La fel ca în cazul mai multor funcții de raster, ar putea fi necesară utilizarea funcției Ajustarea dinamică a intervalului (DRA) pentru afișarea îmbunătățită a rezultatelor acestei funcții.</div>",
		landTrendrName: "Analiză LandTrendr",
		landTrendrSnip: "Evaluează schimbările valorilor pixelilor în timp cu ajutorul metodei de detectare pe baza Landsat a tendințelor de afectare și recuperare (LandTrendr) și generează un raster cu analiza schimbării care include rezultatele modelului.",
		landTrendrDesc: "Această funcție raster poate fi folosită doar ca intrare pentru funcția raster de Detectare a modificării folosind analiza modificării. Pentru a genera o ieșire de raster, conectați funcția Analiză LandTrendr la funcția Detectarea modificărilor utilizând analiza modificărilor într-un șablon de funcție raster și folosiți șablonul ca intrare în instrumentul de geoprocesare Generați raster din funcția raster. Rezultatul este un raster care include informații privind ora la care s-a modificat valoarea pixelului.<div><br>Scopul acestei funcții raster este acela de a extrage modificările dintr-un obiect spațial observat, astfel încât imaginile multidimensionale de intrare ideale să surprindă o observare consecventă în timp și nu trebuie să includă interferențe atmosferice sau ale senzorilor, nori sau umbre de nori. Bunele practici sunt de a utiliza datele care au fost normalizate și pot fi mascate cu ajutorul unei benzi QA, de exemplu produse de Reflectanță a Suprafeței Landsat Colecâia 1 cu o mască de nori.<div><br>Funcția efectuează analiza pe o imagine pe an, iar numărul segmentelor anuale trebuie să fie egal cu sau mai mare de valoarea specificată în parametrul <strong>Număr Minim de Observări</strong>. Se recomandă să aveți minimum șase ani de date.<div><br>Dacă aveți date lunare, săptămânale sau zilnice, se recomandă selectarea mai multor imagini din fiecare an (de preferat din același anotimp), eliminarea norilor și umbrelor norilor și combinarea imaginilor pentru a genera o singură imagine care capturează bine observarea. Dacă sunt furnizate date lunare, săptămânale sau zilnice ca raster multidimensional de intrare, funcția va identifica un segment pentru analiză pe baza datei cele mai apropiate de data menționată în parametrul <strong>Data Fotografierii</strong>.<div><br>Un obiect spațial dintr-un peisaj va avea nevoie de timp pentru a se recupera în urma unei schimbări nepermanente, cum ar fi incendiile de pădure sau infestarea cu insecte. Pentru a controla rata de recuperare recunoscută de model, setați parametrul Prag de Recuperare. Un segment distinct nu poate avea o rată de recuperare mai rapidă decât pragul 1/recuperare.<div><br>Recuperarea în urma schimbării peisajului se poate produce în sens pozitiv sau negativ. De exemplu, atunci când într-un peisaj se pierde pădurea, seria de timp a valorilor indicelui de vegetație prezintă o scădere a valorilor indicelui, iar recuperarea arată o creștere treptată a valorilor indicelui de vegetație sau o tendință de recuperare pozitivă. Specificați direcția tendinței de recuperare cu parametrul <strong>Recuperarea are o tendință crescătoare</strong>.",
		aggregateMultidimensionalName: "Multidimensional Agregat",
		aggregateMultidimensionalSnip: "Combină datele variabile raster multidimensionale existente dintr-o dimensiune.",
		aggregateMultidimensionalDesc: "Funcția Multidimensional Agregat creează un strat tematic de raster multidimensional combinând datele variabile de raster multidimensional existente într-o dimensiune.<div><br>Folosiți parametrul <strong>Definiția Dimensiunii</strong> pentru a filtra mai întâi datele de intrare pe care doriți să le agregați. De exemplu, dacă aveți 30 ani de date lunare, dar doriți doar să creați un strat tematic agregat pentru primii 15 ani, puteți utiliza parametrul <strong>Definiția Dimensiunii</strong>  pentru a specifica anii de inclus în analiză.<div><br><ul><li>Extrageți datele privind salinitatea pentru luna ianuarie în perioada de 10 ani. Alegeți <strong>După Valori</strong>, setați <strong>Dimensiune</strong> la <strong>StdTime</strong>, și setați <strong>Valori</strong> la <strong>ianuarie</strong>.</li><li>Segmentați datele despre salinitate după un interval de adâncime de la 0 la 150 metri. Alegeți <strong>După Intervale</strong>, setați <strong>Dimensiune</strong> la <strong>StdZ</strong>, și setați <strong>Valoare Minimă</strong> la <strong>-150</strong> și <strong>Valoare Maximă</strong> la <strong>0</strong>.</li><li>Extrageți datele privind salinitatea pentru luna ianuarie în perioada de 10 ani. Alegeți <strong>După Iterație</strong>, setați <strong>Dimensiune</strong> la <strong>StdTime</strong>, setați <strong>Începutul primei iterații</strong> și <strong>Sfârșitul primei iterații</strong> la începutul și sfârșitul corespunzătpare ale perioadei de iterare, setați <strong>Pas</strong> la <strong>1</strong>, și setați <strong>Unitate</strong> la <strong>Ani</strong>.</li></ul><div><br>Folosiți parametrii <strong>Definiție de Agregare</strong> pentru a alege dimensiunea de evaluat și intervalul de agregare cu ajutorul unui cuvânt cheie, a unei valori, a unui interval de valori. De exemplu, dacă aveți 30 ani de date privind temperatura suprafeței mării, colectate zilnic ți la fiecare 5 metri de adâncime până la 100 metri, puteți utiliza diversele opțiuni de interval pentru următoarele scenarii:<div><br><ul><li>Agregați datele privind temperaturile zilnice în date lunare, unde rezultatul este un raster multidimensional cu 12 segmente de timp, iar fiecare segment este agregatul fiecărei luni din toți anii. A;egeți <strong>Cuvânt Cheie Interval</strong> și setați cuvântul cheie la <strong>Recurent Lunar</strong>.</li><li>Agregați datele privind temperaturile zilnice în date lunare, unde rezultatul este un raster multidimensional cu 360 de segmente, sau 12 segmente de timp pe an (30 ani x 12 luni = 360 segmente). Alegeți <strong>Cuvânt Cheie Interval</strong> și setați cuvântul cheie la <strong>Lunar</strong>.</li><li>Agregați datele privind temperaturile lunare în intervale de câte 4 luni. Alegeți <strong>Valoarea Intervalului</strong>, setați <strong>Valoarea Intervalului</strong> la 4 și setați <strong>Unitatea</strong> la <strong>Luni</strong>.</li><li>Agregați datele privind temperaturile de la 0 la 25 metri, apoi de la 25 la 50 metri, apoi de la 50 la 100 metri. Alegeți <strong>Game de Interval</strong> și specificați adâncimile minime și maxime ca <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Fuzionați rasterele",
		mergeRastersSnip: "Combinați spațial seturi de date de raster multiple sau pe variabile și dimensiuni.",
		mergeRastersDesc: "Această funcție creează un raster fuzionat dintr-o listă de rastere. De exemplu, dacă aveți un set de date mozaicat care conține date lunare despre precipitații pentru 30 de ani și un alt set de date cu date lunare de4spre temperaturi pentru 10 ani, le puteți combina într-un raster multidimensional cu ambele variabile. <div><br>Dacă rasterele multidimensionale de intrare conțin variabile diferite, rasterul multidimensional de ieșire va include toate variabilele. <div><br>Dacă rasterele multidimensionale de intrare conțin dimensiuni sau valori de dimensiuni diferite, rasterul multidimensional de ieșire va include toate dimensiunile și valorile de dimensiuni. <div><br>Dacă rasterele multidimensionale de intrare conțin aceleași dimensiuni și variabile, dar extinderi spațiale diferite, rasterul multidimensional de ieșire va include variabilele și dimensiunile din toate extinderile spațiale fuzionate.<div><br>Această funcție poate fi folosită și când aveți rastere multiple pe care doriți să le tratați ca pe un singur articol, cum ar fi calcularea acelorați statistici pentru toate, sau la echilibrarea culorii, pentru a nu fi nevoiți să echilibrați culoarea fiecărei imagini în mod separat. Acest lucru este util atunci când lucrați cu imagini stocate ca tile separate din cauza constrângerilor privind dimensiunea fișierului; astfel, tilele vor fi tratate ca parte a aceleiași imagini.",
		boundaryCleanName: "Curățarea Graniței",
		boundaryCleanSnip: "Netezește granița dintre zone.",
		boundaryCleanDesc: "<p>Funcția generalizează sau simplifică rasterele netezind granițele dintre zone. Funcția oferă opțiuni pentru controlul modului în care celulele zonelor de intrare influențează netezirea și valoarea de netezire care se va aplica. Fiecare celulă de intrare este evaluată cu ajutorul vecinilor săi imediați, în număr de opt.</p><p>Procesul de netezire sortează mai întâi celulele vecine cu o anumită prioritate. Prioritatea stabilește care zonă din celulele învecinate poate înlocui valoarea celulei de prelucrare din ieșire.</p><p>Prioritatea se poate baza fie pe valoarea zonelor sau pe dimensiunea zonelor. Parametrul <strong>Tip de sortare</strong> stabilește tipul de sortare de folosit. </p><p>Setarea implicită <strong>Nu sorta</strong> evaluează prioritatea pe baza valorii zonelor. Celulele din zonele cu valori mai mari vor avea o prioritate mai mare de extindere în zone cu valori mai mici.</p><p>Dimensiunea sau suprafața totală a zonelor poate fi folosită pentru sortarea priorității. Cu setarea <strong>Descrescătoare</strong>, zonele sunt sortate după dimensiune în ordine descrescătoare. Zonele cu suprafețe totale mai mari vor avea prioritatea de extindere în zone cu suprafețe mai mici. Cu setarea <strong>Crescătoare</strong>, este valabil opusul: zonele cu suprafețe totale mai mici vor avea prioritate de extindere în zone cu suprafețe totale mai mari.</p><p>Valoarea netezirii este controlată de parametrul <strong>Rulați extindere și restrângere de două ori</strong>, care stabilește de câte ori va fi efectuat procesul de extindere și restrângere.</p><p>Dacă setarea nu este bifată, procesul de extindere și restrângere va fi efectuat o singură dată. Dacă setarea este bifată, procesul de extindere și restrângere este efectuat de două ori, având ca rezultat un grad suplimentar de netezire a granițelor dintre zone.</p><p>Dacă valorile tuturor celor opt celule învecinate sunt aceleași cu cele ale celulei de prelucrare, celula rezultantă va reține valoarea celulei de intrare.</p>",
		predictUsingRegressionName: "Predicție cu ajutorul regresiei",
		predictUsingRegressionSnip: "Calculează un raster anticipat pe baza introducerilor de date despre raster și a unui model de regresie. Modelul de regresie este rezultatul produs de instrumentul de geoprocesare a rasterelor <strong>Modelul de antrenare prin arbori aleatori</strong>.",
		predictUsingRegressionDesc: "<p>Modelul de regresie este definit într-un fișier de definiție a regresiei Esri (.ecd). Acesta conține toate informațiile pentru un set de date specific sau un set de seturi de date și modelul de regresie și este generat de instrumentul de geoprocesare a rasterelor <strong>Model de antrenare cu arbori aleatori</strong> .</p><p>Introducerea poate fi un raster cu o singură bandă, cu mai multe benzi, un raster multidimensional sau o listă a acestor tipuri. Tipurile de rastere de introducere trebuie să fie identice cu tipul de raster antrenat de modelul de regresie.</p><ul><li>Când introducerea este un raster cu mai multe benzi, fiecare bandă este tratată ca o variabilă a elementului de predicție. Benzile trebuie să fie în aceeași ordine ca și introducerea cu mai multe benzi pentru instrumentul de antrenare a modelului de regresie.</li><li>Când introducerea este un raster multidimensional, fiecare variabilă este tratată ca o variabilă de element de predicție, iar variabila trebuie să fie cu o singură bandă și să aibă o dimensiune de timp. Ordinea variabilelor și numelor trebuie să fie aceeași ca și introducerea când modelul de regresie a fost antrenat. Ieșirea este un raster multidimensional.</li><li>Introducerea poate fi o listă de elemente. Numărul de elemente și ordinea elementelor trebuie să corespundă cu introducerea când modelul de regresie a fost antrenat.</li></ul>",
		dimensionalMovingStatisticsName: "Statistica de mișcare dimensională",
		dimensionalMovingStatisticsSnip: "Calculează statisticile pe o fereastră mobilă pe date multidimensionale de-a lungul unei dimensiuni specificate.",
		dimensionalMovingStatisticsDesc: "<p>Funcția Statistici mișcare dimensională calculează diverse statistici în cadrul unei ferestre predefinite pentru toate valorile dimensiunii împreună cu o dimensiune. Această funcție ia un strat tematic de raster multidimensional ca intrare și creează un strat tematic de raster multidimensional ca ieșire care are aceeași dimensiune ca și stratul tematic de intrare.</p><p>Puteți specifica o dimensiune pentru care valorile dimensiunii sunt luate în calcul în timpul calculării. Implicit, aceasta se calculează împreună cu prima dimensiune non-spațială. Puteți, de asemenea, să specificați dimensiunea unei ferestre prin specificarea parametrilor Fereastră înapoi și Fereastră înainte.</p><p>Când Tipul statisticii este setat la Percentilă, parametrii Valoare percentilă și Tip interpolare percentilă devin disponibil. Puteți utiliza acești parametri pentru a specifica percentila pentru a calcula și alege respectiv tipul de interpolare de utilizat. Când Tipul de statistică este setat la Medie circulară, parametrul Valoare încadrare circulară devine disponibil. Valoarea de încadrare circulară este utilizată pentru a converti o valoare liniară în intervalul unei medii circulare date.</p>",
		terrainFlattenFunctionName: "Teren aplatizat",
		terrainFlattenFunctionSnip: "Corectează datele de intrare ale radarului cu deschidere sintetică (SAR) pentru distorsiuni radiometrice datorate topografiei.",
		terrainFlattenFunctionDesc: "<p>Funcția \"Terrain Flatten raster\" corectează datele de intrare ale radarului cu deschidere sintetică (SAR) pentru distorsiuni radiometrice datorate topografiei.</p><p>Datele radar de intrare trebuie mai întâi să fie calibrate la zero beta. Utilizați instrumentul \"Apply Radiometric Calibration\" pentru a calibra datele radar la beta zero.</p><p>Dacă DEM-ul de intrare nu acoperă întregul set de date SAR, instrumentul va emite valori NoData pentru pixelii din afara extensiei DEM pentru gamma nought, sigma nought, zona de împrăștiere și distorsiunile geometrice. Pentru ieșirea măștii de distorsiune geometrică, instrumentul va emite valori nedeterminate pentru pixelii din afara extensiei DEM.</p><p>DEM-ul de intrare trebuie să fie în sistemul de coordonate geografice WGS 1984 (EPSG:4326).</p>",
		createColorCompositeFunctionName: "Creați compozit culoare",
		createColorCompositeFunctionSnip: "Creează un raster cu trei benzi dintr-un set de date raster cu mai multe benzi, în care fiecare bandă poate utiliza un calcul algebric bazat pe algebra benzilor.",
		createColorCompositeFunctionDesc: "<p>Funcția de creare a rasterului compozit de culoare creează un raster cu trei benzi dintr-un set de date raster cu mai multe benzi, în care fiecare bandă poate utiliza un calcul algebric bazat pe algebra benzilor.</p><p>Atunci când definiți un algoritm aritmetic de bandă, puteți introduce o formulă algebrică pe o singură linie pentru fiecare expresie pentru a crea o ieșire multibandă. Operatorii suportați sunt unari, plus (+), minus (-), ori (*) și divide (/).</p><p>Atunci când folosiți un ID de bandă într-o expresie, identificați banda prin prefixarea B sau b la numărul benzii.</p><p>O combinație obișnuită de benzi utilizată pentru radarul cu deschidere sintetică (SAR) în unități liniare este VV pentru roșu, VH pentru verde și VV/VH pentru albastru. În cazul în care datele de intrare sunt în decibeli, combinația de benzi trebuie să fie VV pentru roșu, VH pentru verde și VV-VH pentru albastru.</p>",
		surfaceParametersName: "Parametri suprafeței",
		surfaceParametersSnip: "Determină parametrii unui raster de suprafață cum ar fi aspectul, panta și mai multe tipuri de curburi folosind metode geodezice.",
		surfaceParametersDesc: "<p>Parametrii de suprafață determină parametrii unui raster de suprafață cum ar fi aspectul, panta și mai multe tipuri de curburi folosind metode geodezice.</p><p>Această funcție poate fi utilizată pentru următoarele aplicații:</p><ul><li>Calcularea aspectului și a pantei folosind metode geodezice.</li><li>Calcularea diferitelor tipuri de curburi dintr-un raster de suprafață, de exemplu, <strong>Curba tangentă (contur normal)</strong> care caracterizează convergența geografică și divergența fluxului peste suprafață.</li></ul>",
		leastCostCorridorName: "Coridorul cu cel mai mic cost",
		leastCostCorridorSnip: "Calculează suma a două rastere de distanță cu costuri cumulative cu opțiunea de a aplica un prag pe baza procentului sau a costului cumulativ.",
		leastCostCorridorDesc: "<p>Rasterele de intrare trebuie să fie rastere de acumulare a distanței, și rezultate de rastere de direcție înapoi din funcția <strong>Acumulare distanță</strong> sau <strong>Alocare distanță</strong>. Ar trebui să se bazeze distanța de cost și aceleași setări de parametri ar trebui să fie utilizate la crearea straturilor tematice pentru fiecare sursă. Nu ar trebui să se utilizeze parametri care depind de direcționalitate (factor orizontal, factor vertical și direcție de deplasare) în crearea acestor rastere.</p><p>Valorile din rasterul coridorului de ieșire sunt suma costului acumulat pentru a ajunge într-o locație dată cu aceleași unități ca rastere de distanță de cost acumulat.</p><p>Dacă o valoare <strong>Prag</strong> este mai mare decât costul acumulat maxim când se însumează două rastere de acumulare de distanță, rasterul coridor de ieșire va acoperi aceeași suprafață ca și rasterele acumulate de intrare.</p><p>Dacă o valoare prag specificată este mai mică decât valoarea minimă din rasterul coridor, este returnat un mesaj de avertizare și rasterul de ieșire va fi gol.</p><p>Rasterul coridor de ieșire poate conține celule cu costuri acumulate ușor mai mari decât valoarea prag. Acest lucru este provocat de rasterele de direcție înapoi care utilizează celule atribuite cu costuri ușor mai ridicate decât pragul pentru a conecta celulele deconectate la coridor.</p>",
		geometricMedianName: "Mediana geometrică",
		geometricMedianSnip: "Funcția de medie geometrică se calculează ca media geometrică între pixeli într-o serie de timp d imagistică multibandă.",
		geometricMedianDesc: "<p>Această funcție reduce zgomotul și valorile excepționale în imagistica seriei de timp calculând un pixel mediu geometric pentru fiecare serie de pixeli din stiva de imagini. Algoritmul menține relațiile spectrale dintre benzi în spectrul de pixeli, pentru ca rezultatul să poată fi utilizat în analiză, cum ar fi indicii de vegetație.</p><p>Norii și umbrele trebuie să fie mascate folosind Banda QA a setului de date înainte de a aplica această funcție.</p><p>Dacă imaginea de intrare este punctul flotant, cum ar fi o suprafață reflectorizantă cu valori între 0 și 1, o valoare epsilon de 0,001 produce rezultate de calitate.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Tip schemă de culori",
		colormapName: "Culoare hartă",
		colormapNameName: "Nume culoare hartă",
		colorRampName: "Rampă de culoare",
		contrastOffsetName: "Offset contrast",
		brightnessOffsetName: "Offset luminozitate",
		methodName: "Metodă",
		bandNamesName: "Nume bandă",
		bandWavelengthsName: "Lungimi de undă de bandă",
		bandIdsName: "ID-uri bandă",
		missingBandActionName: "Lipsă acțiune bandă",
		conversionParametersName: "Parametrii conversie",
		hillshadeTypeName: "Tip hillshade",
		azimuthName: "Azimut",
		altitudeName: "Altitudine",
		slopeTypeName: "Se scalează",
		zFactorName: "Factor Z",
		PSPowerName: "Transmisie dimensiune pixel",
		PSZFactorName: "Factor dimensiune pixel",
		removeEdgeEffectName: "Dezactivare interpolare pixeli muchie",
		fromUnitName: "De la unitatea",
		toUnitName: "La unitatea",
		rasterTypeName: "Tip",
		minName: "Minimum ieșire",
		maxName: "Maximum ieșire",
		minPercentName: "Minimum fixare procent",
		maxPercentName: "Maximum fixare procent",
		numberOfStandardDeviationName: "Număr de deviații standard",
		sigmoidStrengthLevelName: "Nivel putere sigmoid",
		estimateStatsHistogramName: "Estimare statistici",
		DRAName: "Ajustare de domeniu dinamic",
		statisticsName: "Statistică",
		histogramsName: "Histograme",
		statisticsHistogramName: "Definiți statistici și histogramă",
		computeGammaName: "Auto Gamma",
		useGammaName: "Folosire Gamma",
		gammaName: "Gamma",
		inputNamesName: "Nume",
		expressionName: "Expresie",
		cellsizeTypeName: "Tip dimensiune celulă",
		extentTypeName: "Tip limită",
		classifierDefinitionFileName: "Introducere definiţie fişier",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Raster real",
		falseRasterName: "Raster fals",
		noDataInterpretationName: "Interpolare fără date",
		noDataValuesName: "Valori fără date",
		includedRangesName: "Intervale incluse",
		curvatureTypeName: "Tip curbură",
		rastersName: "Rastere",
		attributeTableName: "Tabel",
		attributeTableTypeName: "Tip tabel",
		rowsName: "Număr de rânduri",
		columnsName: "Număr de coloane",
		kernelName: "Kernel",
		mirrorEdgesName: "Muchii în oglindă",
		influencesName: "Influenţe",
		fieldsName: "Câmpuri",
		remapsName: "Recartografiere tabel",
		evalFromName: "Scară de evaluare de la",
		evalToName: "Scară de evaluare până la",
		weightsName: "Greutăţi",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "Interval scurt raza IDW",
		maxVoidWidthName: "Lățime maximă vid",
		sigmaGaussianName: "Liniarizare adaptivă",
		contourTypeName: "Tip contur",
		zBaseName: "Bază Z",
		numberOfContoursName: "Număr de contururi",
		contourIntervalName: "Interval contur",
		nthContourLineInBoldName: "A n-a linie a conturului este îngroşată",
		featureClassName: "Obiecte spațiale de intrare",
		classIndexFieldName: "Field",
		resolveOverlapMethodName: "Rezolvare metodă de suprapunere",
		resamplingTypeName: "Tip reeșantionare",
		inputCellsizeName: "Dimensiune celulă intrare",
		outputCellsizeName: "Dimensiune celulă ieșire",
		pointFeatureClassName: "Puncte de semințe",
		maxGrowthRadiusFieldName: "Câmp cu rază maximă de creştere",
		similarityThresholdFieldName: "Câmp prag de similaritate",
		fillValueFieldName: "Completaţi valoare câmp",
		spectralDetailName: "Detaliu spectral [1..20]",
		spatialDetailName: "Detaliu spațial [1..20]",
		minNumPixelsPerSegmentName: "Dimensiunea minimă segment în pixeli",
		boundariesOnlyName: "Numai limitele segmentului",
		statisticsTypeName: "Tip statistici",
		fillNoDataOnlyName: "Completați numai pixelii NoData",
		inputDataTypeName: "Tip date de intrare",
		angleReferenceSystemName: "Sistem referinţă unghi",
		outputDataTypeName: "Tip date de ieşire",
		inputSamplePointFeatureClassName: "Eşantioane de intrare",
		valueFieldName: "Câmp valoare",
		rasterInfoName: "Info Raster",
		interpolationMethodName: "Metodă de interpolare",
		radiusName: "Rază",
		radianceGainValuesName: "Amplificare radianță",
		radianceBiasValuesName: "Polarizare radianță",
		reflectedGainValuesName: "Amplificare reflectare",
		reflectedBiasValuesName: "Polarizare reflectare",
		sunElevationName: "Elevație soare (grade)",
		albedoName: "Coeficient de reflexie",
		scaleFactorName: "Factor scară",
		offsetName: "Decalare",
		thresholdTypeName: "Tip prag",
		thresholdsName: "Praguri",
		undefinedClassName: "Clasa nedefinită",
		minValueName: "Min",
		maxValueName: "Max",
		operationName: "Operație",
		clippingTypeName: "Tip decupare",
		clippingGeometryName: "Geometrie/raster de copiere",
		extentName: "Extindere ieșire",
		useInputFeatureGeometryName: "Folosiți obiectele spațiale de intrare pentru geometria de decupare",
		remapDefinitionTypeName: "Recartografiere tip definiție",
		inputRangeName: "Intervale de intrare",
		outputValuesName: "Valori de ieșire",
		noDataRangeName: "Intervale fără date",
		inputFieldName: "Câmp de intrare",
		outputFieldName: "Câmp de ieșire",
		inputMaxFieldName: "Câmp maxim de intrare (opțional)",
		remapTableTypeName: "Recartografiere tip tabel",
		allowUnmatchedName: "Permiteți valori necorelate ale pixelilor",
		changeMissingValuesToNoDataName: "Modificați valorile lipsă în fără date",
		visibleBandIDName: "ID vizibil bandă",
		infraredBandIDName: "ID infraroșu bandă",
		scientificOutputName: "Ieșire științifică",
		bandIndexesName: "Indexuri bandă",
		constantName: "Constantă",
		weightName: "Greutate",
		minimumName: "Minim",
		maximumName: "Maxim",
		sourceDataName: "Raster sursă",
		sourceFieldName: "Câmp sursă",
		costRasterName: "Raster costuri",
		maxDistanceName: "Distanță maximă",
		valueRasterName: "Raster valoare",
		costMultiplierName: "Multiplicator pentru aplicare la costuri",
		startCostName: "Cost de pornire",
		accumCostResistanceRateName: "Rată acumulativă de rezistență a costurilor",
		capacityName: "Capacitate",
		travelDirectionName: "Direcție de deplasare",
		cellSizeName: "Dimensiune celulă",
		populationFieldName: "Câmp populație",
		areaUnitsName: "Unități suprafață",
		outputValueTypeName: "Valori celulă de ieșire",
		barriersName: "Introduceți barierele",
		destinationDataName: "Raster destinație",
		destinationFieldName: "Câmp destinație",
		pathTypeName: "Tip cale",
		observerFeaturesName: "Obiecte spațiale observator",
		analysisMethodName: "Metodă analiză",
		analysisTypeName: "Tip analiză",
		verticalErrorName: "Eroare verticală",
		refractivityCoefficientName: "Coeficient refractare",
		surfaceOffsetName: "Offset suprafață",
		observerElevationName: "Elevație observator",
		observerOffsetName: "Offset observator",
		innerRadiusName: "Rază interioară",
		innerRadiusIs3DDistanceName: "Raza interioară este distanța 3D",
		outerRadiusName: "Rază exterioară",
		outerRadiusIs3DDistanceName: "Raza exterioară este distanța 3D",
		horizontalStartAngleName: "Unghi de pornire orizontal",
		horizontalEndAngleName: "Unghi de finalizare orizontal",
		verticalUpperAngleName: "Unghi superior vertical",
		verticalLowerAngleName: "Unghi inferior vertical",
		zoneDataName: "Raster zonă",
		zoneFieldName: "Câmp zonă",
		ignoreNoDataName: "Ignorare fără date în calcule",
		temperatureRasterName: "Raster temperatură",
		inTemperatureUnitsName: "Unități de temperatură",
		outHeatIndexTemperatureUnitsName: "Unități index căldură",
		relativeHumidityRasterName: "Raster umiditate relativă",
		outWindChillTemperatureUnitsName: "Unități răcire eoliană",
		windSpeedRasterName: "Raster viteză vânt",
		inWindSpeedUnitsName: "Unități viteză vânt",
		valueName: "Valoare",
		propertyName: "Nume proprietate",
		jsonName: "Metadate JSON",
		zoneTableName: "Tabel atribute zonale",
		attributeFieldNames: "Nume câmp atribute",
		backgroundName: "Valoare fundal",
		whereClauseName: "Clauză Unde",
		minimumValueFieldName: "Nume câmp valoare minimă",
		maximumValueFieldName: "Nume câmp valoare maximă",
		outValueFieldName: "Nume câmp valoare de ieșire",
		defaultValueName: "Valoare implicită de ieșire",
		conversionMatrixName: "Matrice de conversie",
		IsPseudoColorOutputName: "Este o pseudo ieșire de culoare",
		unmappedAsRandomColorName: "Alocare aleatorie a culorii la pixelii necartografiați",
		distanceMethodName: "Metoda distanței",
		flowDirRasterName: "Raster al direcției fluxului",
		pourPointName: "Raster de punct(e) de curgere",
		pourPointFieldName: "Câmpul punctului de curgere",
		constantZName: "Constantă Z",
		zOffsetName: "Decalare Z",
		geoIdName: "Geoid",
		calibrationTypeName: "Tip de calibrare",
		filterTypeName: "Tip de filtru",
		filterSizeName: "Dimensiune de filtru",
		noiseModelName: "Model de zgomot",
		noiseVarianceName: "Variație de zgomot",
		additiveNoiseMeanName: "Medie zgomot adițional",
		multiplicativeNoiseMeanName: "Medie zgomot multiplicativ",
		numberofLooksName: "Număr de contururi",
		dampingFactorName: "Factor de amortizare",
		maskRasterName: "Raster mască",
		nibbleValuesName: "Folosiți valori fără date dacă acestea sunt vecinul cel mai apropiat",
		nibbleNoDataName: "Ciugulire celule fără date",
		zLimitName: "Limită Z",
		flowDirectionTypeName: "Tip al direcției fluxului",
		weightRasterName: "Raster pondere",
		forceEdgeName: "Forțați toate celulele de margine pentru a curge în exterior",
		streamRasterName: "Raster curs",
		surfaceRasterName: "Raster suprafață",
		conversionType: "Tip convertire",
		distanceRaster1: "Distanţă Raster 1",
		distanceRaster2: "Distanţă Raster 2",
		costDistanceRaster: "Rasster distanță de cost",
		costBacklinkRaster: "Raster costuri link de revenire",
		overridesName: "Suprareglare",
		fieldName: "Field",
		signatureFileOrUrl: "Fișier de semnătură sau URL",
		redName: "Roşu",
		greenName: "Verde",
		blueName: "Albastru",
		infraredName: "Infraroșu",
		panchromaticName: "Pancromatic",
		multispectralName: "Multispectral",
		pansharpeningType: "Tip pan-îmbunătățire a clarității",
		sensorName: "Senzor",
		spatialReferenceName: "Referinţă spaţială",
		xCellsizeName: "Dimensiune celulă X",
		yCellsizeName: "Dimensiune celulă Y",
		xOriginName: "Punct de înregistrare X",
		yOriginName: "Punct de înregistrare Y",
		percentileName: "Valoare procentuală",
		neighborhoodType: "Tip de vecinătate",
		widthName: "Lățime",
		heightName: "Înălțime",
		startAngleName: "Unghi de pornire",
		endAngleName: "Unghi de finalizare",
		neighborhoodValues: "Valori de vecinătate",
		horizontalRaster: "Raster orizontal",
		horizontalFactor: "Factor orizontal",
		verticalRaster: "Raster vertical",
		verticalFactor: "Factor vertical",
		streamRaster: "Raster curs",
		flowDirRaster: "Raster al direcției fluxului",
		numberNeighborCells: "Număr de celule vecine",
		zoneConnectivity: "Conecitivitate a zonei",
		addLinkBehavior: "Adăugare legătură",
		excludedValue: "Valoare exclusă",
		constantFillCheck: "Generați umplere raster din constantă",
		fillRaster: "Umpleți raster",
		constantFillValue: "Valoare constantă",
		inputBitPositions: "Bit de intrare",
		outputBitPositions: "Bit de ieșire",
		distanceTypeName: "Tip distanță",
		barrierDataName: "Bariere raster",
		pourPointDataName: "Raster al punctului de curgere",
		accumulationRasterName: "Raster de acumulare a fluxului",
		snapDistanceName: "Distanță Fixare",
		orderMethodName: "Metodă de Comandă",
		directionMeasurementName: "Direcție de Măsurare",
		processAsMultiband: "Procesați ca multibandă",
		processMultidimensional: "Procesați ca multidimensional",
		forceFlowDirectionConvention: "Forțați protocolul direcției fluxului pentru raster cu legătură inversă",
		initialAccumulation: "Acumulare inițială",
		maximumAccumulation: "Acumulare maximă",
		sourceLocationBands: "Generați rând și coloană sursă ca benzi suplimentare în ieșire",
		backDirectionBand: "Generați direcția înapoi ca bandă suplimentară în ieșire",
		numberOfCells: "Număr de celule",
		zoneValues: "Valori ale zonei",
		shrinkMethod: "Metoda de contractare",
		expandMethod: "Metoda de extindere",
		inputSpectralProfileType: "Tip de profil spectral",
		spectralProfileFileName: "Profil spectral",
		trainingFeatureFileName: "Obiect spațial pentru instruire",
		nonNegative: "Non-negativ",
		sumToOne: "Adunați la unu",
		randomDistribution: "Distribuţie",
		meanName: "Medie",
		probabilityName: "Probabilitate",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "N",
		seed: "Plecare",
		randomNumberGenerator: "Generator de numere aleatorii",
		cellFactor: "Factor de celulă",
		aggregationType: "Tehnică de agregare",
		extentHandling: "Măsură de extindere dacă este necesară",
		trendAnalysisDimensionName: "Numele dimensiunii",
		trendAnalysisType: "Tipul tendinței",
		harmonicFrequency: "Frecvența armonică",
		polynomialOrder: "Ordine polinomială",
		cycleLengthName: "Durata ciclului",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R la pătrat",
		trendAnalysisSlopePValue: "Valoarea P a coeficientului de pantă",
		trendAnalysisSeasonalPeriod: "Perioadă sezonieră",
		cycleUnitName: "Unitate ciclu",
		predictDimensionValues: "Valori",
		dimensionDefinitionType: "Definiția dimensiunii",
		predictDimensionStart: "Început",
		predictDimensionEnd: "Sfârșit",
		predictDimensionInterval: "Interval de valori",
		dimensionUnit: "Unitate",
		interpolationCellsizeName: "Dimensiunea celulei de interpolare",
		variableName: "Variabile",
		dimensionlessName: "Fără dimensiuni",
		mdimDefinition: "Definiția dimensiunii",
		dimensionName: "Dimensiune",
		iterationStart: "Începutul primei iterații",
		iterationEnd: "Sfârșitul primei iterații",
		intervalStart: "Începutul intervalului",
		intervalEnd: "Sfârșitul intervalului",
		stepName: "Etapă",
		rangesName: "Intervale",
		minValue: "Valoare minimă",
		maxValue: "Valoare maximă",
		changeAnalysisRasterName: "Schimbați rasterul de analiză",
		changeTypeName: "Modificare tip",
		segmentDate: "Data segmentului",
		changeDirectionName: "Schimbați direcția",
		maxNumChangesName: "Număr maxim de modificări",
		filterByYear: "Filtrați după an",
		minimumYear: "Valoare minimă",
		maximumYear: "Valoare maximă",
		filterByDuration: "Filtrați după durată",
		minimumDuration: "Durată minimă",
		maximumDuration: "Durată maximă",
		filterByMagnitude: "Filtrați după magnitudine",
		minimumMagnitude: "Magnitudine minimă",
		maximumMagnitude: "Magnitudine maximă",
		filterByStartValue: "Filtrare după valoare de început",
		minimumStartValue: "Valoare de început minimă",
		maximumStartValue: "Valoare de început maximă",
		filterByEndValue: "Filtrare după valoare de sfârșit",
		minimumEndValue: "Valoare de sfârșit minimă",
		maximumEndValue: "Valoare de sfârșit maximă",
		modelTypeName: "Tipul de model",
		fromRasterName: "De pe raster",
		toRasterName: "Pe raster",
		computeChangeMethod: "Metoda de calculare a modificării",
		fromClassValues: "Valori de clasă De la (Exemplu: 2 5)",
		toClassValues: "Valori de clasă Până la (Exemplu: 2 5)",
		keepMethod: "Metodă de filtrare",
		useColorMethod: "Definiți culorile de tranziție",
		detectChangeBands: "Benzi pentru detectarea schimbării (start la 0)",
		tmaskBands: "Benzi pentru mascare temporală (start la 0)",
		chiSquaredThreshold: "Pragul de chi-pătrat pentru detectarea modificării",
		minAnomaly: "Numărul minim de observații consecutive a anomaliilor",
		updatingFrequency: "Frecvența de actualizare a ajustării (în ani)",
		distanceAccumulationRasterName: "Raster de acumulare a distanței",
		costBackdirectionRasterName: "Raster Direcție inversă sau Direcția fluxului",
		rasterCollectionName: "Colectare Raster",
		itemFunctionName: "Funcție reper",
		aggregationFunctionName: "Funcție de agregare",
		processingFunctionName: "Funcție de procesare",
		aggregationDefinitionName: "Definiție de agregare",
		queryGeometryName: "Geometria de interogare",
		factorFunctionZeroFactor: "Factor zero",
		factorFunctionCutAngle: "Unghi de tăiere",
		factorFunctionSideFactor: "Factor lateral",
		factorFunctionSlope: "Pantă",
		factorFunctionLowCutAngle: "Unghi de tăiere inferior",
		factorFunctionHighCutAngle: "Unghi de tăiere superior",
		factorFunctionCosPower: "Cosinusul puterii",
		factorFunctionSecPower: "Secanta puterii",
		factorFunctionTablePath: "Calea din tabel",
		processingBand: "Bandă de procesare",
		processingBandName: "Numele benzii de procesare",
		snappingDate: "Data efectuării fotografiei",
		maxNumSegments: "Număr maxim de segmente",
		vertexCountOvershoot: "Supramodulația numărului Vertex",
		spikeThreshold: "Prag de neregularități",
		recoveryThreshold: "Prag de recuperare",
		minNumObs: "Număr minim de observări",
		pValueThreshold: "Prag de valoare P",
		bestModelProportion: "Cea mai bună proporție de model",
		preventOneYearRecovery: "Împiedicați recuperarea într-un an",
		recoveryIncreaseTrend: "Recuperarea are tendință crescătoare",
		outputOtherBands: "Ieșire alte benzi",
		sortType: "Sortarea Tipului",
		numberOfRuns: "Rulați extinderea și restrângerea de două ori",
		percentileValue: "Valoare procentuală",
		percentileInterpolationType: "Tip de interpolare a percentilei",
		rasterInfoProperty: "Proprietate",
		rasterInfoValue: "Valoare",
		rasterInfoColumns: "Coloane",
		rasterInfoRows: "Rânduri",
		rasterInfoBandCount: "Număr de benzi",
		rasterInfoPixelSizeX: "Dimensiune celulă X",
		rasterInfoPixelSizeY: "Dimensiune celulă Y",
		rasterInfoPixelType: "Tip pixel",
		rasterExtentTop: "Sus",
		rasterExtentBottom: "Jos",
		rasterExtentLeft: "Stânga",
		rasterExtentRight: "Dreapta",
		rasterStatisticsNotCalculated: "Statistica nu a fost calculată.",
		spatialReferenceProjection: "Proiecţia",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "WKID anterior",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "VCSWKID anterior",
		spatialReferenceAuthority: "Autoritate",
		spatialReferenceLinearUnit: "Unitate liniară",
		spatialReferenceAngularUnit: "Unitate unghiulară",
		spatialReferenceFalseEasting: "Orientare către est falsă",
		spatialReferenceFalseNorthing: "Orientare către nord falsă",
		spatialReferenceCentralMeridian: "Meridian central",
		spatialReferencePrimeMeridian: "Meridian zero",
		spatialReferenceStandardParallel1: "Paralel standard 1",
		spatialReferenceStandardParallel2: "Paralel standard 2",
		spatialReferenceLatitudeOfOrigin: "Latitudinea originii",
		spatialReferenceAuxiliarySphereType: "Tip sferă auxiliară",
		spatialReferenceDatum: "Dată",
		spatialReferenceSpheroid: "Sferoid",
		spatialReferenceSemimajorAxis: "Axă semimajoră",
		spatialReferenceSemiminorAxis: "Axă semiminoră",
		spatialReferenceInverseFlattening: "Aplatizare inversă",
		inputDefinitionFileName: "Introducere definiţie fişier",
		deleteName: "Ștergere",
		addVariableName: "Adăugare variabilă",
		maxNumPixelsPerSegment: "Dimensiunea maximă segment în pixeli",
		forwardWindowName: "Fereastra înainte",
		backwardWindowName: "Fereastra înapoi",
		noDataHandlingName: "Manevrare FărăDate",
		circularWrapValueName: "Valoarea înfășurării circulare",
		fromClassNameFieldName: "Nume de câmp pentru nume de clasă din Raster",
		toClassNameFieldName: "Nume de câmp pentru nume de clasă în Raster",
		targetRasterName: "Raster țintă",
		circularWrapValue: "Valoarea înfășurării circulare",
		bandIndexesR: "Expresie roșie",
		bandIndexesG: "Expresie verde",
		bandIndexesB: "Expresie albastră",
		exampleName: "Exemplu",
		inputName: "Introducere",
		outputName: "Ieşire",
		optionalName: "Opţional",
		browseDefinitionFile: "Răsfoire fișier de definiție",
		selectDefinitionFile: "Selectare fișier de definiție intrare",
		inputDefinitionURL: "URL fișier de definiție intrare",
		enterDefinitionFileURL: "Introduceți URL-ul fișierului de definiție",
		browseXMLFile: "Răsfoiți fișierul XML",
		selectStatsFile: "Selectați fișierul de statistici și histograme",
		enterXMLFileURL: "Introduceți URL-ul fișierului XML",
		xmlFileURL: "URL fișier XML",
		circularCalculation: "Calculare statistici circulare",
		localSurfaceType: "Tip de suprafață locală",
		surfaceParameterType: "Tip de parametru",
		neighborhoodDistance: "Distanță de vecinătate",
		useAdaptiveNeighborhood: "Utilizare vecinătate adaptivă",
		outputSlopeType: "Măsurare pantă ieșire",
		projectAzimuths: "Procent geodezic azimut",
		useEquatorialAspect: "Utilizare aspect ecuatorial",
		zUnit: "Unitate Z",
		analysisMask: "Mască de analiză",
		stdDeviation: "Deviație standard",
		"true": "True",
		"false": "Fals",
		costDistanceRaster1: "Intrare Cost cumulat Distanța de intrare Raster 1",
		costDistanceRaster2: "Intrare Cost cumulat Distanța de intrare Raster 2",
		threshold: "Prag",
		thresholdMethod: "Metoda pragului",
		directionRaster1: "Intrare Înapoi Direcție Raster 1",
		directionRaster2: "Intrare Înapoi Direcție Raster 2",
		maxIterations: "Numărul maxim de iterații",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Manual",
		attributeTableTypeExternal: "Extern",
		clrSchemeTypeColormap: "Culoare hartă",
		clrSchemeTypeColorRamp: "Rampă de culoare",
		colormapTypeElevation: "Elevație",
		colormapTypeGray: "Gri",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Aleatoriu",
		none: "Niciuna",
		slopeTypeAdjusted: "Ajustat",
		slopeTypeDegree: "Grad",
		slopeTypePercentRise: "ProcentCreștere",
		slopeTypeScaled: "Scalat",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "ProcentMinMax",
		stretchTypeSigmoid: "Sigmoid",
		stretchTypeStdDev: "StdDev",
		hillshadeTypeSimple: "Tradiţional",
		hillshadeTypeMultidirectional: "Multidirecțional",
		bandComboByNames: "Nume bandă",
		bandComboByWavelength: "Lungimi de undă de bandă",
		bandComboByIDs: "ID-uri bandă",
		missingBandActionBestMatch: "Cea mai bună potrivire",
		missingBandActionFail: "Eșec",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Centimetri",
		unitTypeDecimeters: "Decimetri",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Ft",
		unitTypeFeetPerSec: "Picioare pe secundă (ft/s)",
		unitTypeInches: "Inci",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilometri",
		unitTypeKmsPerHour: "Kilometri pe oră (km/h)",
		unitTypeKnots: "Noduri (kn)",
		unitTypeMeters: "Metri",
		unitTypeMetersPerSec: "Metri pe secundă (m/s)",
		unitTypeMiles: "Mile",
		unitTypeMilesPerHour: "Mile pe oră (mph)",
		unitTypeMillimeters: "Milimetri",
		unitTypeNauticalMiles: "Mile marine",
		unitTypeYards: "Yarzi",
		unitTypeDecimalDegrees: "Grade zecimale",
		unitTypePoints: "Puncte",
		unitTypeUnknown: "Necunoscut",
		unitTypeSqMapUnits: "Unităţi de hartă dreptunghiulare",
		unitTypeSqMiles: "Mile pătrate",
		unitTypeSqKms: "Kilometri pătrați",
		unitTypeAcres: "Acri",
		unitTypeHectares: "Hectare",
		unitTypeSqYards: "Yarzi pătrați",
		unitTypeSqFt: "Ft pătrați",
		unitTypeSqInches: "Inci pătrați",
		unitTypeSqMts: "Metri pătrați",
		unitTypeSqCms: "Centimetri pătraţi",
		unitTypeSqMms: "Milimetri pătraţi",
		cellsizeTypeFirst: "Primul din",
		cellsizeTypeMin: "Min a/al",
		cellsizeTypeMax: "Max a/al",
		cellsizeTypeMean: "Medie a/al",
		cellsizeTypeLast: "Ultimul din",
		extentTypeFirst: "Primul din",
		extentTypeIntersection: "Intersecţie a/al",
		extentTypeUnion: "Reuniune a /al",
		extentTypeLast: "Ultimul din",
		noDataInterpretAny: "Potriviţi orice",
		noDataInterpretAll: "Potriviţi toate",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Profil",
		curvatureTypePlanform: "Proiecţie la sol",
		filterTypeLineDetectionHorizontal: "Detectarea liniei orizontală",
		filterTypeLineDetectionVertical: "Detectarea liniei verticală",
		filterTypeLineDetectionLeftDiagonal: "Detectarea liniei diagonala stângă",
		filterTypeLineDetectionRightDiagonal: "Detectarea liniei diagonala dreaptă",
		filterTypeGradientNorth: "Gradient nord",
		filterTypeGradientWest: "Gradient vest",
		filterTypeGradientEast: "Gradient est",
		filterTypeGradientSouth: "Gradient sud",
		filterTypeGradientNorthEast: "Gradient nord est",
		filterTypeGradientNorthWest: "Gradient nord vest",
		filterTypeSmoothArithmeticMean: "Medie aritmetică liniară",
		filterTypeSmoothing3x3: "Liniarizare 3x3",
		filterTypeSmoothing5x5: "Liniarizare 5x5",
		filterTypeSharpening3x3: "Accentuare 3x3",
		filterTypeSharpening5x5: "Accentuare 5x5",
		filterTypeLaplacian3x3: "Laplacian 3x3",
		filterTypeLaplacian5x5: "Laplacian 5x5",
		filterTypeSobelHorizontal: "Sobel orizontal",
		filterTypeSobelVertical: "Sobel vertical",
		filterTypeSharpen: "Creştere claritate",
		filterTypeSharpen2: "Creștere mai mare a clarității",
		filterTypePointSpread: "Extindere punct",
		userDefined: "Definit de utilizator",
		ContourTypeLines: "Linii contur",
		ContourTypeFill: "Umplere contur",
		ContourTypeSmoothOnly: "Doar suprafață netedă",
		rasterizeFirst: "Prima",
		rasterizeLast: "Ultima",
		rasterizeSmallest: "Cea mai mică",
		rasterizeLargest: "Cea mai mare",
		resamplingTypeNearest: "Cel mai apropiat vecin",
		resamplingTypeBilinear: "Interpolare biliniară",
		resamplingTypeCubic: "Convoluție cubică",
		resamplingTypeMajority: "Majoritate",
		resamplingTypeBilinearPlus: "Interpolare biliniară plus",
		resamplingTypeGauss: "Estompare gaussiană",
		resamplingTypeGaussPlus: "Estompare gaussiană plus",
		resamplingTypeAverage: "Medie",
		resamplingTypeMinimum: "Minim",
		resamplingTypeMaximum: "Maxim",
		resamplingTypeVectorAvg: "Medie vectorială",
		minimum: "Minim",
		maximum: "Maxim",
		mean: "Medie",
		stdDeviation: "Deviaţie standard",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Magnitudine-Direcţie",
		unknown: "Necunoscut",
		angleRefSysGeographic: "Geografic",
		angleRefSysArithmetic: "Aritmetic",
		interpolateIrregularDataNearest: "Cel mai apropiat vecin",
		interpolateIrregularDataBilinear: "Biliniar",
		interpolateIrregularDataTinningLinear: "Lipire liniar[",
		interpolateIrregularDataTinningNaturalNeighbor: "Vecin natural",
		interpolateIrregularDataTinningIDW: "Distanța inversă ponderată",
		esriRasterThresholdTypeConstant: "Constantă",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg Max",
		argStatsTypeMin: "Arg Min",
		argStatsTypeMedian: "Arg Median",
		argStatsTypeDuration: "Durată",
		arithmeticOpPlus: "Plus",
		arithmeticOpMinus: "Minus",
		arithmeticOpMultiply: "Înmulţire",
		arithmeticOpDivide: "Împărţire",
		arithmeticOpPower: "Putere",
		arithmeticOpMode: "Mod",
		clipTypeOutside: "Se decupează în afară",
		clipTypeInside: "Se decupează înăuntru",
		yes: "Da",
		no: "Nu",
		densities: "Densităţi",
		expectedCounts: "Numere estimate",
		planar: "Planar",
		geodesic: "Geodezic",
		eachCell: "Fiecare celulă",
		eachZone: "Fiecare zonă",
		bestSingle: "Cel mai bun element unic",
		allSightlines: "Toate razele vizuale",
		perimeterSightlines: "Razele vizuale ale perimetrului",
		frequency: "Frecvenţă",
		observers: "Observatori",
		majority: "Majoritate",
		median: "Mediană",
		minority: "Minoritate",
		percentile: "Percentilă",
		range: "Interval",
		sum: "Sumă",
		variety: "Varietate",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "SAVI transformat",
		bandArithmeticMethodMSAVI: "SAVI modificat",
		bandArithmeticMethodSultan: "Formula lui Sultan",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Oxid de fier",
		ferrousMinerals: "Minerale feroase",
		clayMinerals: "Minerale de argilă",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Rădăcină pătrată",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Bitwise Not",
		localBooleanNot: "Boolean Not",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "Este nul",
		localFloat: "Mobil",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Anulare",
		localRoundDown: "Rotunjire prin lipsă",
		localRoundUp: "Rotunjire prin adăugare",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Plus",
		localMinus: "Minus",
		localTimes: "Timpi",
		localPower: "Putere",
		localBitwiseAnd: "Bitwise And",
		localBitwiseLeftShift: "Bitwise Left Shift",
		localBitwiseOr: "Bitwise Or",
		localBitwiseRightShift: "Bitwise Right Shift",
		localBitwiseXor: "Bitwise Xor",
		localBooleanAnd: "Boolean And",
		localBooleanOr: "Boolean Or",
		localBooleanXor: "Boolean Xor",
		localDivide: "Împărţire",
		localEqualTo: "Egală cu",
		localGreaterThan: "Mai mare decât",
		localGreaterThanEqual: "Mai mare decât egal",
		localLessThan: "Mai mic decât",
		localLessThanEqual: "Mai mic decât egal",
		localMod: "Mod",
		localNotEqual: "Nu este egal cu",
		localATan2: "ATan2",
		localSquare: "Pătrat",
		localSetNull: "Setare nulă",
		remapDefTypeList: "Listă",
		remapDefTypeTable: "Tabel",
		remapTableTypeSimple: "Simplu",
		remapTableTypeDynamic: "Dinamic",
		remapTableTypeReassignment: "Realocare",
		geomCorrectionByConstZ: "Utilzare constantă Z",
		geomCorrectionByDEM: "Utilizare DEM",
		radarCalibBetaNought: "Zero beta",
		radarCalibSigmaNought: "Zero sigma",
		radarCalibGammaNought: "Zero gama",
		speckleFilterTypeLee: "Filtru Lee",
		speckleFilterTypeEnhancedLee: "Filtru Lee îmbunătățit",
		speckleFilterTypeFrost: "Filtru Frost",
		speckleFilterTypeKuan: "Filtru Kuan",
		speckleNoiseModelMul: "Zgomot multiplicativ",
		speckleNoiseModelAdd: "Zgomot adițional",
		speckleNoiseModelAddnMul: "Zgomot adițional și multiplicativ",
		mosaicOpTypeFirst: "Primul",
		mosaicOpTypeLast: "Ultimul",
		mosaicOpTypeMin: "Min",
		mosaicOpTypeMax: "Max",
		mosaicOpTypeMean: "Medie",
		mosaicOpTypeBlend: "Amestec",
		mosaicOpTypeSum: "Sumă",
		integer: "Număr întreg",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Verticală",
		horizontal: "Orizontală",
		localCellStatisticsMajority: "Majoritate",
		localCellStatisticsMax: "Maxim",
		localCellStatisticsMean: "Medie",
		localCellStatisticsMedian: "Mediană",
		localCellStatisticsMin: "Minim",
		localCellStatisticsMinority: "Minoritate",
		localCellStatisticsRange: "Interval",
		localCellStatisticsStdDev: "Deviație standard",
		localCellStatisticsSum: "Sumă",
		localCellStatisticsVariety: "Varietate",
		localCellStatisticsMajorityIgnoreND: "Majoritate (Ignorați NoData)",
		localCellStatisticsMaxIgnoreND: "Maximum (Ignorați NoData)",
		localCellStatisticsMeanIgnoreND: "Medie (Ignorați NoData)",
		localCellStatisticsMedianIgnoreND: "Mediană (Ignorați NoData)",
		localCellStatisticsMinIgnoreND: "Minimum (Ignorați NoData)",
		localCellStatisticsMinorityIgnoreND: "Minoritate (Ignorați NoData)",
		localCellStatisticsRangeIgnoreND: "Interval (Ignorați NoData)",
		localCellStatisticsStdDevIgnoreND: "Abatere Standard (Ignorați NoData)",
		localCellStatisticsSumIgnoreND: "Sumă (Ignorați NoData)",
		localCellStatisticsVarietyIgnoreND: "Varietate (Ignorați NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Procent (Ignorați Fără Date)",
		fromSource: "Din sursă",
		toSource: "Către sursă",
		colorspaceConversionRgbToHsv: "RGB către HSV",
		colorspaceConversionHsvToRgb: "HSV către RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Medie",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Dreptunghi",
		circleNeighborhood: "Cerc",
		annulusNeighborhood: "Inel",
		wedgeNeighborhood: "Pană",
		irregularNeighborhood: "Neregulat",
		weightNeighborhood: "Greutate",
		four: "Patru",
		eight: "Opt",
		within: "În",
		cross: "Cruce",
		addLink: "Adăugare legătură",
		noLink: "Fără Link",
		weightedMean: "Medie ponderată",
		ls8QCBitPatternCirrus: "Landsat 8 Cirrus",
		ls8QCBitPatternCloud: "Landsat 8 Nor",
		ls8QCBitPatternCloudShadow: "Landsat 8 Nor Umbră",
		ls8QCBitPatternDesignatedFill: "Landsat 8 Umplere desemnată",
		ls8QCBitPatternDroppedFrame: "Landsat 8 Cadru omis",
		ls8QCBitPatternSnowIce: "Landsat 8 Zăpadă/Gheață",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 Ocluzie teren",
		ls8QCBitPatternVegetation: "Landsat 8 Vegetație",
		ls8QCBitPatternWater: "Landsat 8 Apă",
		downStream: "În aval",
		upStream: "În amonte",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Sector actual",
		allSlices: "Toate sectoarele",
		expandDistance: "DISTANŢĂ",
		expandMorphological: "MORFOLOGIC",
		spectralProfileFile: "Profil spectral",
		trainingFeatureFile: "Obiect spațial pentru instruire",
		randomDistributionTypeUniform: "Uniformă",
		randomDistributionTypeUniformInteger: "Număr întreg",
		randomDistributionTypeNormal: "Normal",
		randomDistributionTypeExponential: "Exponenţial",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binomial",
		randomDistributionTypeGeometric: "Zone geometrice",
		randomDistributionTypeNegativeBinomial: "Binomial negativ",
		randomGeneratorTypeStandardCRand: "Chenar C Standard",
		randomGeneratorTypeAlgorithmACM599: "Algoritm colectat ACM 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Sumă",
		medainName: "Mediană",
		trendLinear: "Liniar",
		trendHarmonic: "Armonică",
		trendPolynomial: "Polinomial",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Sezonier Kendall",
		dimensionByValue: "După valoare",
		dimensionByInterval: "După interval",
		mdimDefTypeAll: "Toți",
		mdimDefTypeByValues: "După valori",
		mdimDefTypeByRanges: "După intervale",
		mdimDefTypeByIteration: "După iterație",
		mdimDefTypeByInterval: "După interval",
		mdimDefTypeByTargetRaster: "În funcție de rasterul țintă",
		esriTimeUnitsHours: "Ore",
		esriTimeUnitsDays: "Zile",
		esriTimeUnitsWeeks: "Săptămâni",
		esriTimeUnitsMonths: "Luni",
		esriTimeUnitsYears: "Ani",
		esriTimeIntervalKeywordHourly: "În fiecare oră",
		esriTimeIntervalKeywordDaily: "Zilnic",
		esriTimeIntervalKeywordWeekly: "Săptămânal",
		esriTimeIntervalKeywordDekadly: "O dată la 10 zile",
		esriTimeIntervalKeywordPentadly: "O dată la 5 zile",
		esriTimeIntervalKeywordMonthly: "Lunar",
		esriTimeIntervalKeywordQuarterly: "Trimestrial",
		esriTimeIntervalKeywordYearly: "Anual",
		esriTimeIntervalKeywordRecurringDaily: "Recurență zilnică",
		esriTimeIntervalKeywordRecurringWeekly: "Recurență săptămânală",
		esriTimeIntervalKeywordRecurringMonthly: "Recurență lunară",
		esriTimeIntervalKeywordRecurringQuarterly: "Recurență trimestrială",
		aggDefTypeAll: "Totul",
		aggDefTypeIntervalKeyword: "Interval cuvinte cheie",
		aggDefTypeIntervalValue: "Interval valori",
		aggDefTypeIntervalRanges: "Interval domenii",
		latestChange: "Data ultimei modificări",
		earliestChange: "Data primei modificări",
		largestChange: "Data celei mai mari modificări",
		numberOfChanges: "Număr de modificări",
		longestChange: "Timpul celei mai lungi schimbări",
		shortestChange: "Timpul celei mai scurte schimbări",
		fastestChange: "Timpul celei mai rapide schimbări",
		slowestChange: "Timpul celei mai lente schimbări",
		allChanges: "Totul",
		increaseChanges: "Creștere",
		decreaseChanges: "Scădere",
		segmentBeginning: "Începutul segmentului",
		segmentEnd: "Sfârșitul segmentului",
		esriComputeChangeMethodDifference: "Diferență",
		esriComputeChangeMethodRelativeDifference: "Diferență relativă",
		esriComputeChangeMethodCategorical: "Diferență de categorii",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Distanță euclidiană spectrală",
		esriComputeChangeMethodMultispectralAngularDifference: "Distanță de unghi spectral",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Banda cu cea mai mare schimbare",
		esriComputeChangeKeepAll: "Păstrați tot",
		esriComputeChangeKeepChangedOnly: "Păstrați doar pixelii modificați",
		esriComputeChangeKeepUnchangedOnly: "Păstrați doar pixelii nemodificați",
		esriComputeChangeUseColorAverage: "Culorii medii de la și până la",
		esriComputeChangeUseColorFrom: "Culori de utilizare de la",
		esriComputeChangeUseColorTo: "Culori de utilizare până la",
		factorFunctionBinary: "Binar",
		factorFunctionForward: "Înainte",
		factorFunctionLinear: "Liniar",
		factorFunctionInvLinear: "Liniar invers",
		factorFunctionTable: "Tabel",
		factorFunctionSymLinear: "Liniar simetric",
		factorFunctionSymInvLinear: "Liniar invers simetric",
		factorFunctionCos: "Cosinus",
		factorFunctionSec: "Secantă",
		factorFunctionCosSec: "Secanta cosinusului",
		factorFunctionSecCos: "Cosinusul secantei",
		noSort: "Nu sortați",
		ascend: "Crescător",
		descend: "Descrescător",
		autoDetect: "Detectare automată",
		nearest: "Cel mai apropiat",
		linear: "Liniar",
		esriMonthJanuary: "Ianuarie",
		esriMonthFebruary: "Februarie",
		esriMonthMarch: "Martie",
		esriMonthApril: "Aprilie",
		esriMonthMay: "Mai",
		esriMonthJune: "Iunie",
		esriMonthJuly: "Iulie",
		esriMonthAugust: "August",
		esriMonthSeptember: "Septembrie",
		esriMonthOctober: "Octombrie",
		esriMonthNovember: "Noiembrie",
		esriMonthDecember: "Decembrie",
		dimensionalMovingIgnoreNoData: "Date",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "Completați câmpurile fără date",
		circularMean: "Medie circulară",
		circularName: "Circulară",
		arithmeticName: "Aritmetic",
		slopeName: "Pantă",
		aspectName: "Aspect",
		meanCurvature: "Curbură medie",
		profileCurvature: "Curbură de profil (linie de pantă normală)",
		tangentialCurvature: "Curbură tangențială (contur normal)",
		planCurvature: "Curbură plană (contur proiectat)",
		contourGeodesicTorsion: "Torsiune geodezică de contur",
		gaussianCurvature: "Curbură gaussiană",
		casoratiCurvature: "Curbura lui Casorati",
		localSurfaceTypeQuadratic: "Cuadratică",
		localSurfaceTypeBiquadratic: "Bicuadratică",
		thresholdNoThreshold: "Fără prag",
		thresholdPercentLeastCost: "Procent din costul cel mai scăzut",
		thresholdAccumulativeCost: "Cost acumulativ",
		clrmapTypeHillshade: "Hillshade"
	},
	categoryLabels: {
		sourceCharacteristics: "Caracteristici sursă",
		neighborhoodSettings: "Setări vecinătate",
		statistics: "Statistică",
		gamma: "Gamma",
		viewshedParameters: "Paremetrii viewshed",
		observerParameters: "Parametrii observator",
		irregularDataInterpolation: "Interpolarea neregulată a datelor",
		modelStatistics: "Statistici de model",
		aggregationDef: "Definiție de agregare",
		filterByAttributes: "Filtrare după atribute",
		percentileName: "Percentilă",
		rasterInfo: "Informații despre raster",
		extent: "Extindere",
		spatialReference: "Referinţă spaţială"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Numele stratului tematic care va fi creat și adăugat pe hartă.</p>",
		resultType: "<p>Tipul de ieșire care va fi creată. Ieșirile pot fi straturi tematice de imagini satelitare cu structură tile sau straturi tematice de imagini satelitare dinamice.</p>",
		saveResultIn: "<p>Numele folderului din <b>Resursele mele</b> în care va fi salvat rezultatul.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Setările mediului pentru analiza în Map Viewer. </p>",
		outSR: "<p>Specifică sistemul de coordonate pentru analiză și stratul tematic de rezultate.</p>",
		extent: "<p>Specifică zona de utilizat pentru analiză.</p>",
		snapRaster: "<p>Se reglează extinderea ieșirii pentru a se potrivi cu alinierea celulelor stratului tematic specificat de fixare raster.</p>",
		cellSize: "<p>Specifică dimensiunea celulei sau rezoluția care va fi utilizată pentru analiză și pentru a crea stratul tematic de raster de ieșire.</p>",
		mask: "<p>Specifică un strat tematic mască, în care doar celulele care intră în zona măștii vor fi folosite pentru analiză.</p>",
		resamplingMethod: "<p>Specifică modul de interpolare a valorilor pixelilor când rasterele de intrare și de ieșire nu se aliniază.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Tip neacceptat",
		currentlyUnsupported: " Un editor implicit pentru ${missingType} este în așteptare, dar va sosi în curând. Casetă de text pentru substituent temporar pentru specificarea intrărilor bazate pe șiruri.",
		unsupportedOverrideWarning: "O componentă de editor de suprascriere care furnizează un mai bun UX pentru lucrul cu următorul(i) parametru(i) este în așteptare, dar va sosi în curând:",
		overrideWidgetMissing: "Componente editor suprascriere lipsă!",
		uiIncomplete: "Trimiterea lucrării nu a reușit. Funcția nu poate fi executată pentru că unele dintre câmpurile obligatorii sunt incomplete sau lipsesc din UI.",
		count: "Număr",
		selectVariables: "Selectare variabile",
		selectFeature: "Selectarea unui strat tematic de obiect spațial",
		greaterThanErrorMessage: "Numărul de intrare trebuie să fie mai mare decât ${min}",
		lesserThanErrorMessage: "Numărul de intrare trebuie să fie mai mic decât ${max}",
		greaterThanOrEqualErrorMessage: "Numărul de intrare trebuie să fie mai mare sau egal cu ${min}",
		lesserThanOrEqualErrorMessage: "Numărul de intrare trebuie să fie mai mic sau egal cu ${max}",
		allowScalar: "Selectați un strat tematic sau introduceți o constantă",
		selectField: "Selectare câmp",
		parameterRequired: "Acest parametru este obligatoriu.",
		enterAValue: "Introduceți o valoare...",
		invalidInput: "Valoarea introdusă nu este validă.",
		itemNotFound: "Elementul nu există sau este inaccesibil.",
		itemPermissionDenied: "Nu aveți permisiuni de accesare a acestui element.",
		layerNotAvailable: "Nu s-a reușit încărcarea stratului tematic ${layerName}.",
		multipleLayersNotAvailable: "Nu s-a reușit încărcarea stratului tematic ${layerName} și a altora.",
		learnMoreLabel: "Aflați mai multe",
		fieldNotAvailable: "Nu s-a reușit încărcarea câmpului.",
		allowAnalysis: "Analiza nu este permisă în serviciul de imagine.",
		allowAnalysisReason: "Unul sau mai multe straturi tematice de pe hartă nu sunt enumerate aici pentru că nu permit analiza.",
		learnMoreText: "Aflați mai multe",
		atLeastOneRasterInput: "Cel puțin un strat tematic de intrare ar trebui să fie un strat tematic de raster.",
		browseAnalysisLayers: "Răsfoirea straturilor tematice",
		activeMapViewExtent: "Utilizarea extinderii hărții curente",
		chooseRaster: "Alegere raster de decupare",
		chooseGeometry: "Alegere geometrie de decupare",
		resultType: "Tip rezultat",
		saveInFolder: "Salvare în director",
		outputName: "Nume ieșire",
		outputLayerType: "Tip strat tematic de ieșire",
		dynamicImageryLayer: "Strat tematic de imagini satelitare dinamice",
		tiledImageryLayer: "Strat tematic de imagistică cu segmente tile",
		custom: "Personalizare",
		loading: "Se încarcă...",
		layerMissing: "Unul sau mai multe straturi tematice de pe hartă nu sunt enumerate aici pentru că nu permit analiza. Aflaţi mai multe.",
		browseCoordinateSystems: "Răsfoire sisteme de coordonate",
		unableToRepopulateOutSR: "Nu se poate popula sistemul de coordonate de ieșire.",
		defaultTitle: "Vedeți mai mult",
		"ARC (equal arc-second)": "ARC (aer egal secundar)",
		Africa: "Africa",
		Antarctica: "Antarctica",
		Argentina: "Argentina",
		Asia: "Asia",
		"Asteroid Belt": "Centură de asteroizi",
		"Atlantic Ocean": "Oceanul Atlantic",
		Australia: "Australia",
		"Australia and New Zealand": "Australia și Noua Zeelandă",
		Austria: "Austria",
		"BLM (US Feet)": "BLM (picioare SUA)",
		Bangladesh: "Bangladesh",
		"Beijing 1954": "Beijing 1954",
		Bhutan: "Bhutan",
		CGCS2000: "CGCS2000",
		Canada: "Canada",
		Caribbean: "Caraibe",
		"Caribbean Sea": "Marea Caraibelor",
		"Central America": "America Centrală",
		"Central and North America": "America Centrală și de Nord",
		Colombia: "Columbia",
		Continental: "Continental",
		"County Systems": "Sisteme regionale",
		"Democratic Republic of the Congo": "Republica Democrată Congo",
		"EPSG Arctic": "EPSG Arctic",
		Earth: "Terra",
		"Ellipsoidal-based": "Bazat pe elipsoidă",
		Europe: "Europa",
		Finland: "Finlanda",
		France: "Franţa",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss Kruger",
		"Geographic Coordinate Systems": "Sisteme de coordonate geografice",
		Germany: "Germania",
		"Gravity-related": "Legat de gravitație",
		"Greenwich-based": "Bazat pe Greenwich",
		"Highways England": "Autostrăzi Anglia",
		Illinois: "Illinois",
		"Indian Ocean": "Oceanul Indian",
		"Indian Subcontinent": "Subcontinentul indian",
		Indiana: "Indiana",
		Indonesia: "Indonezia",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irlanda și Regatul Unit",
		Italy: "Italia",
		Japan: "Japonia",
		Jupiter: "Jupiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libia",
		Malaysia: "Malaysia",
		"Malaysia and Singapore": "Malaysia și Singapore",
		Mars: "Marte",
		Mercury: "Mercur",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (picioare SUA)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (picioare internaționale)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (metri)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (picioare SUA)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (picioare internaționale)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (metri)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (picioare SUA)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (picioare internaționale)",
		"NAD 1983 (Meters)": "NAD 1983 (metri)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (metri)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (picioare SUA)",
		"NAD 1983 (US Feet)": "NAD 1983 (picioare SUA)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (picioare internaționale)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (metri)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (picioare SUA)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (picioare internaționale)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (metri)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (picioare SUA)",
		"National Grids": "Grile naționale",
		Navajo: "Navajo",
		Neptune: "Neptun",
		"New Beijing": "Noul Beijing",
		"New Zealand": "Noua Zeelandă",
		"North America": "America de Nord",
		"Northern Hemisphere": "Emisfera nordică",
		Norway: "Norvegia",
		Oceans: "Oceane",
		Oregon: "Oregon",
		"Other GCS": "Alt GCS",
		"Pacific Ocean": "Oceanul Pacific",
		Pluto: "Pluto",
		Polar: "Polar",
		Portugal: "Portugalia",
		"Projected Coordinate Systems": "Sisteme de coordonate proiectate",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Înlocuit",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturn",
		"Solar System": "Sistemul Solar",
		"South Africa": "Africa de Sud",
		"South America": "America de Sud",
		"South Korea": "Coreea de Sud",
		"Southern Hemisphere": "Emisfera sudică",
		"Spheroid-based": "Pe bază sferoidă",
		"State Plane": "Avion statal",
		"State Systems": "Sisteme statale",
		Sweden: "Suedia",
		"Switzerland and Liechtenstein": "Elveția și Liechtenstein",
		Texas: "Texas",
		Tribal: "Tribale",
		Turkey: "Turcia",
		"US Feet": "Picioare SUA",
		"USA and territories": "SUA și teritoriile",
		UTM: "UTM",
		Ukraine: "Ucraina",
		"Unknown Height Systems": "Sisteme de înălțime necunoscute",
		Uranus: "Uranus",
		Venus: "Venus",
		"Vertical Coordinate Systems": "Sisteme de coordonate verticale",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Glob",
		"World (Sphere-based)": "Glob (formă sferică)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Gata",
		noResults: "Nu a fost găsit niciun rezultat",
		searchPlaceholder: "Nume sau WKID",
		browseTemplate: "Căutați șabloane de funcție raster",
		saveTemplate: "Salvare șablon funcție raster",
		preview: "Previzualizare",
		previewDescription: "Previzualizați rezultatul înainte de a executa analiza.",
		showPreview: "Afișare previzualizare",
		previewLayer: "Previzualizare strat tematic ${number}",
		newPreview: "Previzualizare nouă",
		previewPopup: "Activați previzualizarea rezultatelor analizei pe baza parametrilor de intrare.",
		updatePreviewLayer: "Actualizare strat tematic de previzualizare selectat",
		createPreviewLayer: "Creare strat tematic de previzualizare nou",
		maximumPreviewAllowed: "Număr maxim de straturi tematice de previzualizare permis: ${maxCount}",
		previewFailure: "Acest strat tematic de previzualizare este indisponibil. Verificați parametrii de intrare și actualizați acest strat tematic de previzualizare din nou.",
		header: "Selectați un element",
		content: "Aveți modificări nesalvate în ${rftTitle}. Dacă începeți din nou cu un șablon nou, acele modificări vor fi pierdute.",
		dontSave: "Nu salvați",
		"continue": "Continuare",
		stretch: "Fixare în fereastră",
		pan: "Panoramare",
		newTemplate: "Creare șablon nou",
		openTemplate: "Deschidere șablon",
		addFunction: "Adăugare funcții raster",
		addConstant: "Adăugare constantă",
		addRaster: "Adăugare variabilă raster",
		move: "Mutare",
		zoom: "Zoom",
		saveAs: "Salvare ca",
		clear: "Golire",
		addRasterFunctionTitle: "Adăugare funcții raster",
		templatePropertiesTitle: "Proprietăți șablon",
		browseRFT: "Căutați șabloane de funcție raster",
		defaultToolDescription: "Instrument de analiză ${toolTitle}.",
		openToolText: "Deschidere instrument",
		toolDropdownText: "Instrument derulantă",
		addToMap: "Confirmare și adăugare la hartă",
		confirm: "Confirmare",
		select: "Selectare",
		selectTask: "Selectare activitate",
		unsupportedLayer: "Acest parametru nu acceptă următoarele straturi tematice: ${layerName}.",
		viewDetails: "Vizualizați toate detaliile elementului",
		rename: "Redenumire",
		duplicate: "Duplicate",
		launch: "Deschidere pentru executare",
		templateEditor: "Editor șabloane",
		createItem: "Salvare șablon funcție raster",
		actionLabel: "Filtrare",
		filterPopoverHeading: "Filtrarea funcțiilor",
		defaultSearchPlaceholder: "Căutare după nume",
		settings: "Setări",
		summary: "Rezumat",
		definitionQuery: "Interogare definiție",
		matchVariables: "Variabile de potrivire",
		unionDimension: "Dimensiune uniune",
		nameEditorPlaceholder: "Introducere titlu",
		summaryEditorPlaceholder: "Introduceți o scurtă descriere.",
		definitionQueryPlaceholder: "Introduceți...",
		upload: "Încărcare",
		chooseImage: "Faceți clic pentru a alege un fișier",
		update: "Actualizare",
		thumbnailErrors: {
			wrongImageType: "A fost selectat tipul eronat de imagine",
			notAvailable: "Miniatură indisponibilă",
			loadError: "Nu s-a putut încărca imaginea",
			chooseFile: "Faceți clic pentru a alege fișierul"
		}
	}
};
const copy = "Copiere";
const save = "Salvați";
const title = "Titlu";
const folder = "Folder";
const tags = "Etichete";
const savingMessage = "Salvare reper în";
const shareWith = "Partajare cu";
const share = "Partajare";
const setSharingLevel = "Setați nivelul de partajare";
const setGroupSharing = "Setați partajarea cu un grup";
const owner = "Proprietar";
const organization = "Organizaţie";
const everyone = "Toată lumea (public)";
const groups = "Grupuri:";
const type = "Tip";
const mosaic = "Mozaic";
const itemGroup = "Grup de reper";
const item = "Element";
const definitionQuery = "Interogare definiție";
const groupItemsBy = "Grupați elementele după";
const groupFieldName = "Numele câmpului grup";
const tagFieldName = "Numele câmpului etichetă";
const noTitleTagErrorMsg = "Trebuie să furnizați un titlu pentru reperul dvs. și etichete pentru a permite găsirea hărții prin intermediul căutărilor.";
const noTitleErrorMsg = "Trebuie să furnizaţi un titlu pentru elementul dvs.";
const noTagErrorMsg = "Trebuie să furnizați cel puțin o etichetă pentru a ajuta utilizatorii să găsească reperul dvs. prin intermediul căutărilor.";
const error = "Eroare";
const warning = "Avertisment";
const success = "Succes";
const details = "Detalii:";
const tryAgain = "Încercaţi din nou";
const toolModeler = {
	save: "Salvați",
	editProperties: "Editare proprietăţi",
	saveAs: "Salvare ca",
	savingNotification: "Salvare modificări în reperul...",
	savingTitle: "Se salvează",
	saveFailedMessage: "Schimbările nu au putut fi salvate.",
	saveWithErrorsMessage: "Modificările au fost salvate cu următoarele erori.",
	viewItemMessage: "Vizualizați reperul salvat",
	here: "aici.",
	itemCreatedMessage: "A fost creat un element nou.",
	clickToViewItemMessage: "Faceți clic pe OK pentru a vizualiza pagina de detalii ale elementului; faceți clic pe Anulare pentru a continua.",
	readingFailed: "A eşuat încărcarea șablonului de funcție raster selectat.",
	failedToLoadXML: "A eșuat încărcarea șablonului de funcție raster selectat în format XML.",
	learnMore: "Aflați mai multe",
	overwriteTitle: "Confirmare suprascriere",
	overwriteMessage: "Doriţi să suprascrieţi elementul existent?",
	overwriteSuccessMessage: "Elementul a fost actualizat."
};
const toolEditor = {
	run: "Executare",
	save: "Salvați",
	deleteSelected: "Ştergeți elementele selectate",
	addRaster: "Adăugați raster",
	addScalar: "Adăugați valoare scalară",
	layout: "Configurație automată",
	errorTitle: "Eroare",
	invalidToolMessage: "Șablonul de funcție raster nu este valabil.",
	out: "Ieșire",
	zoomIn: "Mărire",
	zoomOut: "Micşorare",
	zoomToFit: "Fixați în fereastră",
	panOn: "Treceți pe modul pan",
	panOff: "Opriți modul pan",
	defaultModelName: "Model de instrument",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Şablon funcţie raster",
	defaultToolDescription: "Adăugaţi un scurt rezumat despre funcţia raster.",
	defaultHelpText: "Dați clic pe simbolul de ajutor pentru a edita textul de asistență",
	editHelpTitle: "Asistență pentru editare",
	saveLabel: "Salvați",
	cancelLabel: "Anulare",
	thumbnail: {
		wrongImageType: "A fost selectat tipul eronat de imagine",
		notAvailable: "Miniatură indisponibilă",
		loadError: "Nu s-a putut încărca imaginea",
		chooseFile: "Faceţi clic pe selectarea fişierului"
	}
};
const saveUtils = {
	thumbnail: "Miniatură",
	sharing: "Partajare"
};
const close = "Închidere";
const unsavedWarningExisting = "Doriţi să salvaţi modificările aduse elementului <b>${itemTitle}</b> ?";
const unsavedWarningNew = "Doriţi să salvați modificările?";
const saveAs = "Salvare ca";
const dontSave = "Nu se salvează";
const unsavedTitle = "Modificări nesalvate";
const invalidRFTMessage = "Șablonul de funcție raster creat nu este valabil.";
const errorTitle = "Eroare";
const breadcrumb = "Editor de funcție raster";
const breadcrumbEditor = "Conținut > Editor de funcție raster";
const viewerModeTitle = "Numai citire";
const viewerModeMessage = "Elementul șablon de funcție raster este numai pentru citire. Modificările nu pot fi salvate.";
const userStartDirection = "Selectați o funcție pentru a începe construirea unui șablon de funcţie raster.";
const selectFunction = "Adăugare funcție";
const deselectFunction = "Eliminare funcție";
const dialogTitle = "Sistem";
const category = "Categorii";
const search = "Căutați funcţii raster";
const categoryNames = {
	analysis: "Analiză",
	appearance: "Aspect",
	classification: "Clasificare",
	conversion: "Conversie",
	correction: "Corecţie",
	dataManagement: "Administrare date",
	distance: "Distanță",
	distanceLegacy: "Distanță (Legacy)",
	hydrology: "Hidrologie",
	math: "Matematică",
	mathConditional: "Matematică: Condițional",
	mathLogical: "Matematică: Logică",
	mathTrigonometric: "Matematică: trigonometrie",
	reclass: "Reclasificare",
	statistical: "Statistic",
	surface: "Suprafață"
};
const commonStrings_ro = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_ro);


//# sourceMappingURL=common-strings.ro-db6b4694.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,