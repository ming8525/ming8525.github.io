"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_predom-991fb1"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/predominance-a1a2d74d.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/predominance-a1a2d74d.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createPredominanceRendererFromExisting),
/* harmony export */   c: () => (/* binding */ createPredominanceRenderer),
/* harmony export */   g: () => (/* binding */ getPredominantCategories)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * Updates the layer with a Predominance renderer with default settings
 * @param props: must contain layer, mapView, GalleryFields[]
 * @param options: options
 */
function createPredominanceRenderer(options) {
    var _a;
    const { layer: smLayer, mapView, selectedFields, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    return modules.PredominanceCreator.createRenderer({
        layer,
        view: mapView,
        fields: getPredominanceFields(options.fieldInfos),
        predominanceScheme: options.predominanceScheme || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.W)(),
        includeOpacityVariable: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.includeOpacityVariable)
            ? (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.includeOpacityVariable)
            : true,
        includeSizeVariable: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.includeSizeVariable) ? options.includeSizeVariable : false,
        outlineOptimizationEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
            ? options.outlineOptimizationEnabled
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer)
                ? true
                : false,
        sizeOptimizationEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled) ? options.sizeOptimizationEnabled : true,
        legendOptions: options.legendOptions,
        defaultSymbolEnabled: false,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        //console.log("createPredominanceRenderer result", result.renderer.toJSON());
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer, { notOpacity: true });
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
        if (!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.includeOpacityVariable) &&
            ["predominance", "predominance-size"].indexOf(rendererType) > -1) {
            // current renderer was predominance too
            const rendererFields = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.f)(layer);
            const selNames = selectedFields.map((selField) => selField.field).sort();
            // renderer re-orders fields
            const renNames = rendererFields.map((renField) => renField.field).sort();
            const sameFields = selNames.toString() === renNames.toString();
            if (sameFields) {
                // keep transparency
                const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "opacity");
                const opacityAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "opacity");
                result.renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(result.renderer, "opacity") || [];
                if (opacityVisVar) {
                    result.renderer.visualVariables.push(opacityVisVar);
                }
                result.renderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.o)(result.renderer, "opacity") || [];
                if (opacityAuthVisVar) {
                    result.renderer.authoringInfo.visualVariables.push(opacityAuthVisVar);
                }
                // keep colors and symbols
                const symbol = result.renderer.uniqueValueInfos[0].symbol.clone();
                result.renderer.uniqueValueInfos = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).uniqueValueInfos;
                if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer)) {
                    if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)() === "predominance-size" && options.includeSizeVariable !== true) {
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.X)(result.renderer, symbol);
                    }
                    else if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)() === "predominance" && options.includeSizeVariable === true) {
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.Y)(result.renderer, symbol);
                    }
                }
            }
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Predominance renderer with settings from current renderer
 * @param props: must contain layer, mapView
 * @param options: only contains properties that need to be overwritten
 */
function createPredominanceRendererFromExisting(options) {
    var _a;
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
    const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "size");
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)(renderer);
    let fieldInfos = options.fieldInfos
        ? options.fieldInfos
        : renderer.uniqueValueGroups[0].classes.map((info) => {
            return {
                field: info.values[0].value,
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
            };
        });
    let isSameFields = true;
    let lastFieldsOrder;
    if (options.fieldInfos) {
        // compare
        renderer.uniqueValueGroups[0].classes.forEach((info, idx) => {
            if (info.values[0].value !== options.fieldInfos[idx].field) {
                isSameFields = false;
            }
        });
        if (isSameFields) {
            // no changes to fields
            delete options.fieldInfos;
            if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.R)(options)) {
                // nothing really changes
                const newRender = renderer.clone();
                return Promise.resolve({ renderer: newRender });
            }
        }
    }
    if (isSameFields) {
        // keep the order of fields
        lastFieldsOrder = renderer.uniqueValueInfos.map((info) => info.value);
    }
    let symbol;
    const uvRenderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    symbol =
        uvRenderer.uniqueValueInfos && uvRenderer.uniqueValueInfos.length ? uvRenderer.uniqueValueInfos[0].symbol : null;
    const defaultSymbol = renderer.defaultSymbol;
    const defaultLabel = renderer.defaultLabel;
    const backgroundFillSymbol = renderer.backgroundFillSymbol;
    let isInverted = false;
    if (sizeVisVar) {
        if (sizeVisVar.minSize.stops) {
            isInverted = sizeVisVar.minSize.stops[0].size > sizeVisVar.maxSize.stops[0].size;
        }
        else {
            isInverted = sizeVisVar.minSize > sizeVisVar.maxSize;
        }
    }
    const temp = fieldInfos[0];
    fieldInfos[0] = fieldInfos[1];
    fieldInfos[1] = temp;
    return modules.PredominanceCreator.createRenderer({
        layer,
        view: mapView,
        fields: getPredominanceFields(fieldInfos),
        predominanceScheme: options.predominanceScheme || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.W)(),
        includeOpacityVariable: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.includeOpacityVariable)
            ? options.includeOpacityVariable
            : !!extras.opacityVisVar,
        includeSizeVariable: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.includeSizeVariable) ? options.includeSizeVariable : !!sizeVisVar,
        outlineOptimizationEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
            ? options.outlineOptimizationEnabled
            : !!extras.sizeOutlineVisVar,
        sizeOptimizationEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
            ? options.sizeOptimizationEnabled
            : !!extras.sizeAutoVisVar,
        legendOptions: undefined,
        defaultSymbolEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.defaultSymbolEnabled) ? options.defaultSymbolEnabled : !!defaultSymbol,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        //console.log("createRenderer", result);
        // keep slider values
        if (!options.fieldInfos && sizeVisVar) {
            const newSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            newSizeVisVar.minDataValue = sizeVisVar.minDataValue;
            newSizeVisVar.maxDataValue = sizeVisVar.maxDataValue;
            if (authSizeVisVar) {
                const newAuthSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(result.renderer, "size");
                newAuthSizeVisVar.minSliderValue = authSizeVisVar.minSliderValue;
                newAuthSizeVisVar.maxSliderValue = authSizeVisVar.maxSliderValue;
            }
        }
        if (!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.includeOpacityVariable) &&
            isSameFields &&
            extras.opacityVisVar &&
            extras.authOpacityVisVar) {
            // keep the one we had
            result.renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(result.renderer, "opacity");
            result.renderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.o)(result.renderer, "opacity");
            result.renderer.visualVariables.push(extras.opacityVisVar);
            result.renderer.authoringInfo.visualVariables = result.renderer.authoringInfo.visualVariables || [];
            result.renderer.authoringInfo.visualVariables.push(extras.authOpacityVisVar);
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer, { notOpacity: true });
        if (lastFieldsOrder) {
            // keep order of fields
            result.renderer.uniqueValueInfos.sort((infoA, infoB) => {
                const indexA = lastFieldsOrder.indexOf(infoA.value);
                const indexB = lastFieldsOrder.indexOf(infoB.value);
                return indexA > -1 && indexB > -1 && indexA < indexB
                    ? -1
                    : indexA > -1 && indexB > -1 && indexA > indexB
                        ? 1
                        : indexA > -1
                            ? -1
                            : indexB > -1
                                ? 1
                                : 0;
            });
        }
        if (isSameFields) {
            // keep labels
            result.renderer.uniqueValueInfos.forEach((info, idx) => {
                info.label = renderer.uniqueValueInfos[idx].label;
            });
        }
        if (symbol && result.renderer.uniqueValueInfos && result.renderer.uniqueValueInfos.length) {
            const infos = result.renderer.uniqueValueInfos.slice();
            infos.map((info, idx) => {
                let sym;
                if (isSameFields) {
                    // keep the exact symbol from previous renderer
                    sym = renderer.uniqueValueInfos[idx].symbol;
                }
                else {
                    // keep the same symbol style, not the color
                    sym = symbol.clone();
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(sym, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(info.symbol));
                }
                info.symbol = sym;
            });
            result.renderer.uniqueValueInfos = infos;
        }
        if (defaultSymbol) {
            result.renderer.defaultSymbol = defaultSymbol;
            result.renderer.defaultLabel = defaultLabel;
        }
        if (backgroundFillSymbol) {
            result.renderer.backgroundFillSymbol = backgroundFillSymbol;
        }
        if (isInverted) {
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            const tmp = sizeVisVar.minSize;
            sizeVisVar.minSize = sizeVisVar.maxSize;
            sizeVisVar.maxSize = tmp;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * gets predominant categories with the count
 * @param props: must contain layer, mapView, GalleryFields[]
 * @param options: options
 */
function getPredominantCategories(options) {
    var _a;
    const { layer: smLayer, mapView: view, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    return modules.predominantCategories({
        layer,
        view,
        fields: options.fieldInfos.map((fieldInfo) => fieldInfo.field),
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    });
}
function getPredominanceFields(fieldInfos) {
    return fieldInfos.map((fieldInfo) => {
        return {
            //valueExpression: `$feature.${option.value}`,
            name: fieldInfo.field,
            label: getFieldLabel(fieldInfo.field)
        };
    });
}
function getFieldLabel(fieldName) {
    const galleryFields = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s.fields.filter((field) => field.layerField.name === fieldName);
    if (galleryFields.length) {
        return galleryFields[0].label;
    }
    return "";
}



//# sourceMappingURL=predominance-a1a2d74d.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,