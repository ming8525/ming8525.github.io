"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-2b997e"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.da-2dc7d010.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.da-2dc7d010.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Abs_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Abs_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Abs_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Abs_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Abs_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Abs_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@Abs_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Abs_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Abs_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Abs_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Abs_Raster_tag0@@": "Input-rasteren, som de absolutte værdier skal beregnes for.",
	"@@ACos_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@ACos_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@ACos_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@ACos_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@ACos_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@ACos_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@ACos_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@ACos_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@ACos_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@ACos_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@ACos_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@ACos_Raster_tag0@@": "Det input, som de omvendte cosinus-værdier skal beregnes for.",
	"@@ACosH_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@ACosH_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@ACosH_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@ACosH_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@ACosH_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@ACosH_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@ACosH_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@ACosH_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@ACosH_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@ACosH_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@ACosH_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@ACosH_Raster_tag0@@": "Det input, som de omvendte hyperbolske cosinus-værdier skal beregnes for.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "Resultaterne af funktionen Synlig reflektans kan også udtrykkes som albedo, hvilket er procentdelen af ​​den tilgængelige energi, der reflekteres af planetoverfladen. Albedo-data bruges af videnskabelige brugere til kompleks modellering og tekniske fjernmålingsapplikationer.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Ikke markeret - funktionen returnerer værdier for synlig reflektans. Dette er standardværdien.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Markeret - funktionen returnerer 32-bit-værdier med flydende komma, som oftest ligger i intervallet fra 0,0 til 1,0. Der udføres intet dataklip, hvis denne indstilling er valgt.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Da output-datatypen for albedo er flydende komma, skal du indstille den foretrukne <strong>Output Pixel Type</strong> til enten 32-bit flydende eller 64-bit dobbelt. Parameteren <strong>Output Pixel Type</strong> findes på fanen <strong>General</strong> i rasterfunktionen <strong>Apparent Reflectance</strong>. Hvis <strong>Output Pixel Type</strong> ikke er indstillet korrekt til indstillingen <strong>Albedo</strong>, bliver de resulterende værdier ugyldige og får en værdi på 0.",
	"@@Apparent-Reflectance_Offset_tag0@@": "Din skalerede albedo-værdi kan eventuelt have en forskydningsværdi:",
	"@@Apparent-Reflectance_Offset_tag1@@": "For usignerede 16-bit-datatyper er standardskalaforskydningen 5.000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "For usignerede 8-bit-datatyper er standardskalaforskydningen 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "Der anvendes ingen skalering, når output er albedo.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "Du kan manuelt indstille eller redigere denne værdi for hvert bånd. De relevante oplysninger kan læses i metadataene for input-rasterproduktet.",
	"@@Apparent-Reflectance_Raster_tag0@@": "Rasterproduktet, hvorpå den synlige reflektans anvendes.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "Din output-værdi for synlig reflektans kan udtrykkes som et heltal. Skaleringsfaktoren ganges med albedoen for at konvertere alle værdier med flydende komma til heltalværdier.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Hvis skaleringsfaktoren er ${0} eller ikke er specificeret, anvendes standardskalering afhængigt af pixeltypen i input-dataene:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "For usignerede 16-bit-datatyper er standardskaleringsfaktoren 50.000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "For usignerede 8-bit-datatyper er standardskaleringsfaktoren 255.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "Skaleringsfaktoren anvendes altid, når output er synlig reflektans. Der anvendes ingen skalering, når output er albedo.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Dette er værdien for solhøjde udtrykt i grader. Den udfyldes af systemet, hvis de relevante oplysninger kan læses i metadataene. Du kan manuelt indstille eller redigere denne værdi.",
	"@@ArgStatistics_Max_tag0@@": "Den højeste værdi, du angiver, er den højeste værdi, der er lig med eller mindre end slutningen af ​​varigheden.",
	"@@ArgStatistics_Max_tag1@@": "Dette input er kun relevant, når metoden er Varighed.",
	"@@ArgStatistics_Method_tag0@@": "Vælg den statistikmetode, der skal beregnes:",
	"@@ArgStatistics_Method_tag1@@": "Arg Max - argumentet for det maksimum, der returnerer det ${Band index}, for hvilket den givne pixel opnår sin minimumsværdi fra alle båndene. Alle rasterbånd fra alle input-rastere tildeles et 0-baseret trinvist stigende båndindeks, som først er sorteret efter input-rasterindekset og derefter efter den relative båndrækkefølge inden for hver input-raster.",
	"@@ArgStatistics_Method_tag2@@": "Arg Median - argumentet for medianen, der returnerer ${Band index}, for hvilket den givne pixel opnår sin medianværdien af værdierne fra alle båndene.",
	"@@ArgStatistics_Method_tag3@@": "Arg Min - argumentet for det minimum, der returnerer det ${Band index}, for hvilket den givne pixel opnår sin minimumsværdi fra alle båndene.",
	"@@ArgStatistics_Method_tag4@@": "Varighed - metoden Varighed finder de længste på hinanden følgende elementer i et array, hvor hvert element har en værdi, der er større end eller lig med <strong>Min</strong> og mindre end eller lig med <strong>Max</strong>, og returnerer derefter dens længde.",
	"@@ArgStatistics_Min_tag0@@": "Den laveste værdi, du angiver, er den laveste værdi, der er lig med eller større end begyndelsen af ​​varigheden.",
	"@@ArgStatistics_Min_tag1@@": "Dette input er kun relevant, når metoden er Varighed.",
	"@@ArgStatistics_Rasters_tag0@@": "Den input-raster, som du vil udføre de forskellige statistiske metoder på.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "Et konstant input, der returneres, når der ikke kan opnås definitivt maksimum, minimum eller median. Det mest almindelige scenarie er, at den største eller mindste værdi forekommer mere end én gang blandt værdier fra alle bånd. Standardværdien for den udefinerede konstant er 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "Den udefinerede klasse er kun relevant, når metoden er <strong>ArgMax</strong>, <strong>ArgMin</strong> eller <strong>ArgMedian</strong>.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Angiver, om NoData-værdier ignoreres af den statistiske beregning.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Markeret -- Analysen omfatter alle gyldige pixels i inputrasterne og ignorerer eventuelle NoData-pixels.",
	"@@ArgStatistics_ignorenodata_tag2@@": "Ikke markeret -- Analysen resulterer i NoData, hvis der er nogen NoData-værdier for pixels i inputrasterne. Dette er standardværdien.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Arithmetic_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@Arithmetic_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Arithmetic_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Arithmetic_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Arithmetic_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Arithmetic_Operation_tag0@@": "Den aritmetiske operation, der skal udføres mellem de to input-rastere.",
	"@@Arithmetic_Operation_tag1@@": "Der er følgende indstillinger:",
	"@@Arithmetic_Operation_tag2@@": "<strong>Divide</strong>--Outputtet er det delelige resultat mellem de tilsvarende pixelværdier for hver raster.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Minus</strong>--Outputtet er forskellen mellem de tilsvarende pixelværdier for hver raster. Det kan bruges til at beregne registrering af ændringer.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Mode</strong>--Outputtet er pixelværdien af alle de overlappende pixels, der forekommer hyppigst. Hvis der f.eks. er seks bånd i en raster, vil der være seks overlappende pixels. For værdierne 4, 5, 6, 4, 7, 9 er modalværdien 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Multipliy</strong>--Outputtet er produktet af de tilsvarende pixelværdier for hver raster. Det kan bruges til at udføre nogle omkostningsfunktioner.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Plus</strong>--Outputtet er summen af ​​alle de tilsvarende pixelværdier for hver raster.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Power</strong>--Outputtet er produktet af de tilsvarende pixelværdier hævet til potensen af input-rasteren eller skalaren.",
	"@@Arithmetic_Raster_tag0@@": "Det første input-rasterdatasæt.",
	"@@Arithmetic_Raster2_tag0@@": "Det andet input-rasterdatasæt.",
	"@@ASin_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@ASin_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@ASin_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@ASin_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@ASin_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@ASin_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@ASin_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@ASin_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@ASin_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@ASin_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@ASin_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@ASin_Raster_tag0@@": "Det input, som de omvendte sinusværdier skal beregnes for.",
	"@@ASinH_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@ASinH_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@ASinH_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@ASinH_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@ASinH_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@ASinH_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@ASinH_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@ASinH_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@ASinH_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@ASinH_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@ASinH_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@ASinH_Raster_tag0@@": "Det input, som de omvendte hyperbolske sinusværdier skal beregnes for.",
	"@@Aspect_Raster_tag0@@": "Det input-DEM, der bruges til at udlede aspektdatasættet.",
	"@@Aspect-Slope_Raster_tag0@@": "Input-DEM.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "En skaleringsfaktor, der bruges til at konvertere højdeværdierne med følgende to formål:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "At konvertere højdeenheder (f.eks. meter eller fod) til horisontale koordinatenheder for datasættet, som kan være fod, meter eller grader.",
	"@@Aspect-Slope_Z-Factor_tag2@@": "At tilføje vertikal overdrivelse for at øge den visuelle virkning.",
	"@@ATan_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@ATan_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@ATan_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@ATan_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@ATan_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@ATan_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@ATan_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@ATan_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@ATan_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@ATan_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@ATan_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@ATan_Raster_tag0@@": "Det input, som de omvendte tagensværdier skal beregnes for.",
	"@@ATan2_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@ATan2_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@ATan2_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@ATan2_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@ATan2_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@ATan2_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@ATan2_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@ATan2_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@ATan2_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@ATan2_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@ATan2_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@ATan2_Raster_tag0@@": "Det input, der angiver tælleren, eller y-værdien, og som bruges, når man beregner den omvendte tangens.",
	"@@ATan2_Raster2_tag0@@": "Det input, der angiver nævneren, eller x-værdien, og som bruges, når man beregner den omvendte tangens.",
	"@@ATanH_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@ATanH_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@ATanH_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@ATanH_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@ATanH_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@ATanH_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@ATanH_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@ATanH_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@ATanH_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@ATanH_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@ATanH_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@ATanH_Raster_tag0@@": "Det input, som de omvendte hyperbolske tagensværdier skal beregnes for.",
	"@@Attribute-Table_Raster_tag0@@": "Input-rasteren.",
	"@@Attribute-Table_Table-Type_tag0@@": "Input-attribut-tabellen kan indføres ved hjælp af <strong>Manual</strong>-typen, hvor du tildeler et klassenavn og en farve til hver værdi, eller du kan henvise til en eksisterende tabel, der kommer fra en ${.dbf}-fil.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Definer din bånd-aritmetiske formel, hvis du har valgt <strong>User Defined</strong> til din <strong>Method</strong>.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "Hvis du har valgt et foruddefineret indeks til din <strong>Method</strong>, skal du definere de korrekte bånd i dit input-raster-datasæt, der svarer til indekset.",
	"@@Band-Arithmetic_Method_tag0@@": "Den type bånd-aritmetisk algoritme, du vil implementere. Du kan definere din brugerdefinerede algoritme eller vælge et foruddefineret indeks.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong>--Brandindeks",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>CIg</strong>--Chlorophyll Index - Green",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>CIre</strong>--Chlorophyll Index - Red Edge",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Lerholdige mineraler</strong>--Clay Minerals Ratio",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong>--Enhanced Vegetation Index",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Ferrous Minerals</strong>--Ferrous Minerals Ratio",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong>--Global Environmental Monitoring Index",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong>--Green Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong>--Green Vegetation Index Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Iron Oxide</strong>--Iron Oxide Ratio",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong>--Modified Normalized Difference Water Index",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong>--Modified Triangulated Vegetation Index (second iteration)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>Modified SAVI</strong>--Modified Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong>--Normalized Burn Ratio Index",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong>--Normalized Difference Built-up Index",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong>--Normalized Difference Moisture Index",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong>--Normalized Difference Snow Index",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong>--Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong>--Red-Edge Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong>--Normalized Difference Water Index",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong>--Perpendicular Vegetation Index",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong>--Red-Edge Triangulated Vegetation Index",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong>--Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong>--Simple Ratio",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong>--Red-Edge Simple Ratio",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Sultan's Formula</strong>--Sultan's Formula",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>Transformed SAVI</strong>--Transformed Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>User Defined</strong>--Allows you to define your custom band arithmetic expression.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong>--Visible Atmospherically Resistant Index",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong>--Weighted Normalized Difference Water Index",
	"@@Band-Arithmetic_Raster_tag0@@": "Input-rasteren.",
	"@@Binary-Thresholding_Raster_tag0@@": "Input-rasteren.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@Bitwise-And_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-And_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-And_Raster_tag0@@": "Den første input, der skal bruges i denne bitwise-operation.",
	"@@Bitwise-And_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Bitwise-And_Raster2_tag0@@": "Den andet input, der skal bruges i denne bitwise-operation.",
	"@@Bitwise-And_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "Det input, som skiftet skal udføres på.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "Det input, der definerer antallet af pladser, som bits skal flyttes.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Not_Raster_tag0@@": "Den input-raster, som Bitwise Ikke (supplement)-operationen skal udføres på.",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Or_Raster_tag0@@": "Den første input, der skal bruges i denne bitwise-operation.",
	"@@Bitwise-Or_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Bitwise-Or_Raster2_tag0@@": "Den andet input, der skal bruges i denne bitwise-operation.",
	"@@Bitwise-Or_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "Det input, som skiftet skal udføres på.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "Det input, der definerer antallet af pladser, som bits skal flyttes.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Bitwise-Xor_Raster_tag0@@": "Den første input, der skal bruges i denne bitwise-operation.",
	"@@Bitwise-Xor_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Bitwise-Xor_Raster2_tag0@@": "Den andet input, der skal bruges i denne bitwise-operation.",
	"@@Bitwise-Xor_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Boolean-and_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@Boolean-and_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Boolean-and_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Boolean-and_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Boolean-and_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Boolean-and_Raster_tag0@@": "Det første input, der skal bruges i denne boolske operation.",
	"@@Boolean-and_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Boolean-and_Raster2_tag0@@": "Det anden input, der skal bruges i denne boolske operation.",
	"@@Boolean-and_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@Boolean-Not_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Boolean-Not_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Boolean-Not_Raster_tag0@@": "Det første input, der skal bruges i denne boolske operation.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@Boolean-Or_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Boolean-Or_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Boolean-Or_Raster_tag0@@": "Det første input, der skal bruges i denne boolske operation.",
	"@@Boolean-Or_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Boolean-Or_Raster2_tag0@@": "Det anden input, der skal bruges i denne boolske operation.",
	"@@Boolean-Or_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Boolean-Xor_Raster_tag0@@": "Det første input, der skal bruges i denne boolske operation.",
	"@@Boolean-Xor_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Boolean-Xor_Raster2_tag0@@": "Det anden input, der skal bruges i denne boolske operation.",
	"@@Boolean-Xor_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Buffered_Raster_tag0@@": "Input-rasteren, der skal gemmes i hukommelsen.",
	"@@Calculator_Cellsize-Type_tag0@@": "Den cellestørrelse, der bruges til at oprette output-rasteren.",
	"@@Calculator_Cellsize-Type_tag1@@": "Du kan vælge størrelsen på output-cellerne ud fra følgende valgmuligheder på rullelisten:",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>First Of</strong>--Cellestørrelsen på den første rastervariabel.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Min Of</strong>--Den mindste cellestørrelse i input-rasterne.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Max Of</strong>--Den største cellestørrelse i input-rasterne.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Mean Of</strong>--Den gennemsnitlige cellestørrelse i input-rasterne.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Last Of</strong>--Cellestørrelsen i den sidste rastervariabel.",
	"@@Calculator_Cellsize-Type_tag12@@": "Standardvalget er <strong>Max Of</strong>.",
	"@@Calculator_Expression_tag0@@": "Opret et algebraisk udtryk for at udføre spatial analyse på input-rasteren.",
	"@@Calculator_Expression_tag1@@": "Alle eksisterende matematiske funktioner kan kaldes for at oprette udtrykket. De tilgængelige operatorer er vist nedenfor.",
	"@@Calculator_Expression_tag2@@": "Aritmetiske operationer",
	"@@Calculator_Expression_tag3@@": "Addition: +",
	"@@Calculator_Expression_tag4@@": "Division: /",
	"@@Calculator_Expression_tag5@@": "Modulo: %",
	"@@Calculator_Expression_tag6@@": "Multiplikation: *",
	"@@Calculator_Expression_tag7@@": "Potens: **",
	"@@Calculator_Expression_tag8@@": "Subtraktion: -",
	"@@Calculator_Expression_tag9@@": "Boolske operationer",
	"@@Calculator_Expression_tag10@@": "Boolsk Og: &&",
	"@@Calculator_Expression_tag11@@": "Boolsk Eller: ||",
	"@@Calculator_Expression_tag12@@": "Relationsoperationer",
	"@@Calculator_Expression_tag13@@": "Lig med: ==",
	"@@Calculator_Expression_tag14@@": "Større end: >",
	"@@Calculator_Expression_tag15@@": "Større end eller lig med: >=",
	"@@Calculator_Expression_tag16@@": "Mindre end: <",
	"@@Calculator_Expression_tag17@@": "Mindre end eller lig med: <=",
	"@@Calculator_Expression_tag18@@": "Ikke lig med: !=",
	"@@Calculator_Expression_tag19@@": "Yderligere operationer",
	"@@Calculator_Expression_tag20@@": "Minimum to rastere pr. pixel: min(a,b)",
	"@@Calculator_Expression_tag21@@": "Maksimum to rastere pr. pixel: max(a,b)",
	"@@Calculator_Expression_tag22@@": "Her er nogle eksempler på udtryk:",
	"@@Calculator_Expression_tag23@@": "Enkel betingelsessætning: i en raster (betegnet T) findes højdeværdier over 4.000 fod og disse områder gives værdien 1 og alle andre områder værdien 0.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Indlejret betingelsessætning: find områder, hvor hældningen (betegnet b1)) er under 10 grader, og NDVI (betegnet b2) er over 0,5, og giv disse områder værdien 1. Alle andre områder skal tildeles værdien 2, hvis hældningen er over 10 grader og højden (betegnet b3) er over 2.500 fod. Alle andre områder tildeles værdien 3.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Vælg, hvilken udstrækning der skal anvendes i output-rasteren</p><ul><li><p>Første i – Brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.</p></li><li> Skæringspunkt mellem – Brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.</li><li>Sammenlæg – Brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.</li><li>Sidste i – Brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "Det brugerdefinerede variabelnavn og input-rasteren.",
	"@@Classify_Input-Definition-File_tag0@@": "Esri input-klassificeringsdefinitionsfilen (${.ecd}), der indeholder statistikkerne og andre klassificeringsoplysninger for det specifikke datasæt, klassifikator og de valgte attributter.",
	"@@Classify_Raster_tag0@@": "Det rasterdatasæt, der skal klassificeres.",
	"@@Classify_Raster2_tag0@@": "Et valgfrit supplerende rasterdatasæt, der kan medtages i klassifikatoren, f.eks. et segmenteret billede, et multispektralt billede eller højdedata, der bruges til at generere en mere robust klassificeringsdefinition til dit datasæt. Raster-datasættet for denne parameter skal svare til det, der bruges til at oprette Esri input-klassificeringsdefinitionsfilen.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "Følgende kan bruges til at angive klip-udstrækningen:",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Clipping Raster</strong>--Udstrækningen af klip-rasteren",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Custom Extent</strong>--X- og Y- minimum- og maksimumkoordinater",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Current Map Extent</strong>--Udstrækningen af af den aktuelle kortvisning",
	"@@Clip_Clipping-Raster_tag0@@": "Det rasterlag, der skal bruges til at klippe.",
	"@@Clip_Clipping-Type_tag0@@": "Angiv, om du vil beholde området inden for eller uden for din klip-geometri.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Clip Inside</strong>--Billeder inde i klip-udstrækningen bliver fjernet.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Clip Outside</strong>--Billeder uden for klip-udstrækningen bliver fjernet.",
	"@@Clip_Custom-Extent_tag0@@": "Angiv de fire koordinater, der definerer udstrækningen af det afgrænsningsboks, der bruges til at klippe rasteren.",
	"@@Clip_Output-Extent_tag0@@": "X- og y-koordinaterne for den aktuelle klip-udstrækning.",
	"@@Clip_Output-Extent_tag1@@": "Knappen <strong>Capture Current Map Extent</strong> bruger visningsomfanget for det aktive kort.",
	"@@Clip_Raster_tag0@@": "Input-rasterlaget.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "Når det er markeret, klippes dataene i henhold til geometrien i den specificerede funktionsklasse.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Ikke markeret--Funktionen bruger den klipgeometri, der er angivet af <strong>Rectangle</strong>. Dette er standardværdien.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Markeret - funktionen den bruger klip-geometri, der er defineret af en objektklasse.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "Den farvekonverteringstype, der skal udføres:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "HSV til RGB",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "RGB til HSV",
	"@@Color-Model-Conversion_Raster_tag0@@": "Input-rasteren.",
	"@@Colormap_Color-Ramp_tag0@@": "Vælg en farveskala, der allerede eksisterer.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Vælg den type farveskema, der skal bruges til at gengive din input-raster",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Farveskala - brug en farveskala.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Farvekort - brug et farvekort, der allerede eksisterer.",
	"@@Colormap_Colormap_tag0@@": "Følgende standardfarvekort er tilgængelige pån rullelisten:",
	"@@Colormap_Colormap_tag1@@": "Højde - et farvekort, der gradvist skifter fra cyan til lilla til sort.",
	"@@Colormap_Colormap_tag2@@": "Grå - et farvekort, der gradvist skifter fra sort til hvid.",
	"@@Colormap_Colormap_tag7@@": "Skyggevirkning -- Et farvekort med gråtoneskala, der visualiserer en 3D-repræsentation af terrænoverfladen, hvor der tages hensyn til solens relative position, så der kommer skyggevirkning på billedet.",
	"@@Colormap_Colormap_tag3@@": "NDVI - et farvekort til at visualisere af vegetation. Værdier tæt på nul er blå. Lave værdier er brune. Derefter skifter farverne gradvist fra rød til orange, gul, grøn og sort, efterhånden som vegetationsindekset går fra lavt til højt.",
	"@@Colormap_Colormap_tag4@@": "NDVI2 - et farvekort til at visualisere af vegetation. Lave værdier går fra hvid til grøn. Derefter går farverne fra grå til lilla, violet, mørkeblå og sort, når vegetationsindekset går fra lavt til højt.",
	"@@Colormap_Colormap_tag5@@": "NDVI3 - et farvekort til at visualisere af vegetation. Værdier tæt på nul er blå. Derefter skifter farverne gradvist fra rød til orange og grøn, når vegetationsindekset går fra lavt til højt.",
	"@@Colormap_Colormap_tag6@@": "Tilfældig - et tilfældigt farvekort.",
	"@@Colormap_Raster_tag0@@": "Input-rasteren.",
	"@@Colormap-To-RGB_Raster_tag0@@": "Input-rasteren til farvekort.",
	"@@Complex_Raster_tag0@@": "Input-rasteren.",
	"@@Composite-Bands_Rasters_tag0@@": "Brug rullelisten eller knappen <strong>Browse</strong> til at vælge rasterindgange.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Vælg, hvilken cellestørrelse der skal anvendes i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.</p><ul><li>Første i – Brug den første cellestørrelse i input-rastere.</li><li>Min. i – Brug den mindste cellestørrelse i alle input-rastere.</li><li>Maks. i – Brug den største cellestørrelse i alle input-rastere. Dette er standardværdien</li><li>. Middelværdi af – Brug middelcellestørrelsen i alle input-rastere.</li><li>Sidste i – Brug den sidste cellestørrelse i input-rastere.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Con-function_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Con-function_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Con-function_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Con-function_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Con-function_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Con_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Con_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Con_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Con_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Con_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Con_False-Raster_tag0@@": "Det input, hvis værdier vil blive brugt som output-pixelværdier, hvis betingelsen er falsk. Det kan være et heltal, en raster med flydende komma eller en konstant værdi.",
	"@@Con_Raster_tag0@@": "Den input-raster, der repræsenterer det booleske resultat af en logisk matematisk rasterfunktion. Værdierne er enten 1 (for sand) eller 0 (for falsk). Det kan være et heltal eller en raster med flydende komma.",
	"@@Con_True-Raster_tag0@@": "Det input, hvis værdier vil blive brugt som output-pixelværdier, hvis betingelsen er sand. Det kan være et heltal, en raster med flydende komma eller en konstant værdi.",
	"@@Constant_Constant_tag0@@": "Værdien af ​​den konstant, der skal føjes til den virtuelle raster.",
	"@@Constant_Raster-Info_tag0@@": "Brug knappen <strong>Load template raster</strong> til at indlæse en skabelon fra et bibliotek eller portal.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "Graden af ​​udjævning, der skal anvendes på konturlinjen. Standardværdien er 2,5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "En lavere værdi frembringer en konturlinje med mere granularitet og mindre udjævning, mens en højere værdi producerer en konturlinje med mere udjævning, der ser mindre takket ud.",
	"@@Contour_Contour-Interval_tag0@@": "Forskellen i højde mellem konturlinjer.",
	"@@Contour_Contour-Interval_tag1@@": "Et lille konturinterval bruges i relativt flade områder, mens større konturintervaller bruges i varierende eller bjergrigt terræn.",
	"@@Contour_Contour-Type_tag0@@": "Den type kontur, der skal oprettes:",
	"@@Contour_Contour-Type_tag1@@": "<strong>Contour fill</strong>--Fylder området mellem hver konturlinje med den kvantiserede højdeværdi.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Contour lines</strong>--Forbinder punkter med samme højde for at skabe en linje, der repræsenterer konstant højde.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Smooth surface only</strong>--Udjævner input-højdelaget, men frembringer ikke konturer.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "Indekskonturen, der er vist som en fed linje.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "Standardværdien er 5, dvs. hver 5. konturlinje er fed.",
	"@@Contour_Number-Of-Contours_tag0@@": "Antallet af konturer, der skal genereres i visningen. Dette justerer dynamisk konturintervallet, så det passer til terrænet i visningen, mens de standardiserede intervaller som 1, 5, 10 osv. bevares.",
	"@@Contour_Raster_tag0@@": "Et højdedatasæt for en enkeltbånds-raster.",
	"@@Contour_Z-Base_tag0@@": "Grundværdien for konturen. Konturer genereres over og under denne værdi efter behov for at dække hele input-rasterens værdi-interval. Standard er 0.",
	"@@Contour_Z-Base_tag1@@": "En værdi på 0 repræsenterer ofte middel-havniveauet, afhængigt af kildens højde-datasæt.",
	"@@Contour_Z-Factor_tag0@@": "Enhedskonverteringsfaktoren, der bruges ved generering af konturer. Standardværdien er 1.",
	"@@Contour_Z-Factor_tag1@@": "Konturlinjerne genereres ud fra z-værdierne i input-rasteren, som ofte måles i meter eller fod. Med standardværdien 1 vil konturerne være i samme enheder som z-værdierne for input-rasteren. Hvis du vil oprette konturer i en anden enhed end z-værdierne, skal du indstille en passende værdi for z-faktoren. Bemærk, at det ikke er nødvendigt for dette værktøj, at grundplanets x- og y-enheder og overfladens z-enheder er ens.",
	"@@Contour_Z-Factor_tag2@@": "hvis højdeværdierne i din input-raster f.eks. er i fod, men konturerne skal genereres i meter, skal du indstille z-faktoren til 0,3048 (da 1 fod = 0,3048 meter).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Juster lysstyrken på rasterlaget.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "Du kan bruge skyderen til at ændre lysstyrkeforskydningen, eller du kan skrive en værdi.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Juster rasterlagets kontrast.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "Du kan bruge skyderen til at ændre kontrastforskydningen, eller du kan skrive en værdi.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "Den input-raster, som lysstyrke og kontrast skal redigeres for.",
	"@@Convolution_kernel_tag0@@": "<p>Denne tabel viser, hvordan hver pixel vægtes i filtreringsprocessen. Denne tabel kan redigeres, hvis du vælger <strong>User Defined</strong> som <strong>Type</strong>.</p>",
	"@@Convolution_Raster_tag0@@": "Input-raster-datasættet.",
	"@@Convolution_Type_tag0@@": "Vælg den type filtrering, som du vil udføre. Der er indstillinger til at skærpe, sløre og registrere kanter, eller du kan definere dit eget kerne-baserede filter",
	"@@Corridor_Distance-Raster-1_tag0@@": "Den første input-afstandsraster. Det skal være et akkumuleret omkostning/afstands-output fra Omkostning/afstand eller Rute/afstand.",
	"@@Corridor_Distance-Raster-2_tag0@@": "Den anden input-afstandsraster. Det skal være et akkumuleret omkostning/afstands-output fra Omkostning/afstand eller Rute/afstand.",
	"@@Cos_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Cos_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Cos_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Cos_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Cos_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Cos_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Cos_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Cos_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Cos_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Cos_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Cos_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Cos_Raster_tag0@@": "Det input, som cosinusværdierne skal beregnes for.",
	"@@CosH_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@CosH_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@CosH_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@CosH_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@CosH_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@CosH_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@CosH_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@CosH_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@CosH_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@CosH_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@CosH_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@CosH_Raster_tag0@@": "Det input, som de hyperbolske cosinus-værdier skal beregnes for.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Denne parameter simulerer den større indsats for at klare omkostningerne, efterhånden som de akkumulerede omkostninger stiger. Det bruges til at modellere træthed hos rejsende. De voksende akkumulerede omkostninger for at nå en celle ganges med resistens-satsen og tilføjes til omkostningerne ved at flytte ind i den efterfølgende celle.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Det er en modificeret version af en rentes-rente-formel, der bruges til at beregne de synlige omkostninger ved at bevæge sig gennem en celle. Efterhånden som værdien af ​​resistens-satsen øges, øges omkostningerne for de celler, der besøges senere. Jo større resistens-satsen er, jo højere er omkostningerne ved at nå den næste celle, der tilskrives for hver efterfølgende bevægelse. Da resistens-satsen er magen til en rentes-rente-formel, og de akkumulerede omkostningsværdier generelt er meget store, foreslås små resistens-satser  som 0,005 eller endog mindre, afhængigt af de akkumulerede omkostningsværdier.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af ​​output-rasteren.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Cost-Allocation_Capacity_tag0@@": "Definerer omkostningskapaciteten for den rejsende for en kilde. Omkostningsberegningerne fortsætter for hver kilde, indtil den specificerede kapacitet er nået.",
	"@@Cost-Allocation_Capacity_tag1@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af ​​output-rasteren.",
	"@@Cost-Allocation_Capacity_tag2@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "En obligatorisk input-raster, der definerer omkostninger eller impedans ved at bevæge sig planimetrisk gennem hver celle. Værdien ved hver cellelokation repræsenterer omkostning pr. enhed-afstanden ved at bevæge sig gennem den. Værdien ved hver cellelokation ganges med celleopløsningen, og der kompenseres også for diagonal bevægelse for at få de samlede omkostninger ved at bevæge sig gennem cellen.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "Værdierne i <strong>Cost Raster</strong> kan være heltal eller flydende komma, men de kan ikke være negative eller nul.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "Den tærskel, som de akkumulerede omkostningsværdier ikke må overstige. Hvis en akkumuleret omkostning/afstand overstiger denne værdi, bliver output-værdien for den pågældende celleplacering ${NoData}. Den maksimale afstand definerer udstrækningen, som de akkumulerede omkostningsafstande beregnes for. Standardafstanden er til udstrækningen af output-rasteren.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator, der anvendes på omkostningsværdierne.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Denne parameter gør det muligt at kontrollere rejsemåden eller størrelsen ved en kilde. Jo større multiplikator, jo større omkostning ved at bevæge sig gennem hver celle.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Værdierne skal være større end nul. Standard er 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Cost-Allocation_Source-Field_tag0@@": "Det felt, der bruges til at tildele værdier til kildeplaceringerne. Det skal være en heltalstype. Hvis <strong>Value Raster</strong> er angivet, får værdierne i dette input forrang for enhver indstilling for <strong>Source Field</strong>.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "Den obligatoriske input-raster af kildeplaceringer.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Dette er en raster, der identificerer de celler eller placeringer, hvorfra afstanden med de laveste akkumulerede omkostninger beregnes for hver output-celles placering.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "Hvis input-<strong>Source Raster</strong> er med flydende komma, skal <strong>Value Raster</strong> angives, og den skal være et heltal. <strong>Value Raster</strong> får forrang over enhver indstilling i <strong>Source Field</strong>.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "Startomkostningerne, hvorfra omkostningsberegningerne begynder. Denne parameter  gør det muligt at angive de faste omkostninger, der er knyttet til en kilde. I stedet for at starte med en omkostning på 0, begynder omkostningsalgoritmen med den angivne værdi.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "Værdien skal være nul eller større. Standard er 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Definerer den rejsendes retning, når man anvender kildens resistens-sats og startomkostninger.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>From Source</strong>--Kildens resistens-sats og startomkostninger anvendes fra input-kilden og ud til til ikke-kildecellerne. Dette er standardværdien.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>To Source</strong>--Kildens resistens-sats og startomkostninger anvendes fra hver ikke-kildecelle og tilbage til input-kilden.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Angiv enten nøgleordet <strong>From Source</strong> eller <strong>To Source</strong>, som vil blive anvendt på alle kilder, eller angiv et felt i <strong>Source Raster</strong>, der indeholder nøgleordene til at identificere kørselsretningen for hver kilde. Dette felt skal indeholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "Input-heltalsrasteren, der identificerer de zoneværdier, som skal bruges til hver enkelt input-kildeplacering. For hver kildeplaceringscelle bliver den værdi, der er defineret af <strong>Value Raster</strong>, tildelt alle celler, der er tildelt kildeplaceringen til beregningen. <strong>Value Raster</strong> får forrang over enhver indstilling for <strong>Source Field</strong>.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Denne parameter simulerer den større indsats for at klare omkostningerne, efterhånden som de akkumulerede omkostninger stiger. Det bruges til at modellere træthed hos rejsende. De voksende akkumulerede omkostninger for at nå en celle ganges med resistens-satsen og tilføjes til omkostningerne ved at flytte ind i den efterfølgende celle.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Det er en modificeret version af en rentes-rente-formel, der bruges til at beregne de synlige omkostninger ved at bevæge sig gennem en celle. Efterhånden som værdien af ​​resistens-satsen øges, øges omkostningerne for de celler, der besøges senere. Jo større resistens-satsen er, jo højere er omkostningerne ved at nå den næste celle, der tilskrives for hver efterfølgende bevægelse. Da resistens-satsen er magen til en rentes-rente-formel, og de akkumulerede omkostningsværdier generelt er meget store, foreslås små resistens-satser  som 0,005 eller endog mindre, afhængigt af de akkumulerede omkostningsværdier.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af ​​output-rasteren.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Definerer omkostningskapaciteten for den rejsende for en kilde. Omkostningsberegningerne fortsætter for hver kilde, indtil den specificerede kapacitet er nået.",
	"@@Cost-Back-Link_Capacity_tag1@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af ​​output-rasteren.",
	"@@Cost-Back-Link_Capacity_tag2@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "En obligatorisk input-raster, der definerer omkostninger eller impedans ved at bevæge sig planimetrisk gennem hver celle. Værdien ved hver cellelokation repræsenterer omkostning pr. enhed-afstanden ved at bevæge sig gennem den. Værdien ved hver cellelokation ganges med celleopløsningen, og der kompenseres også for diagonal bevægelse for at få de samlede omkostninger ved at bevæge sig gennem cellen.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "Værdierne i <strong>Cost Raster</strong> kan være heltal eller flydende komma, men de kan ikke være negative eller nul.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "Den tærskel, som de akkumulerede omkostningsværdier ikke må overstige. Hvis en akkumuleret omkostning/afstand overstiger denne værdi, bliver output-værdien for den pågældende celleplacering NoData. Den maksimale afstand definerer udstrækningen, som de akkumulerede omkostningsafstande beregnes for. Standardafstanden er til udstrækningen af output-rasteren.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator, der anvendes på omkostningsværdierne.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Denne parameter gør det muligt at kontrollere rejsemåden eller størrelsen ved en kilde. Jo større multiplikator, jo større omkostning ved at bevæge sig gennem hver celle.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Værdierne skal være større end nul. Standard er 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "Den obligatoriske input-raster af kildeplaceringer.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Dette er en raster, der identificerer de celler eller placeringer, hvorfra afstanden med de laveste akkumulerede omkostninger beregnes for hver output-celles placering.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "Startomkostningerne, hvorfra omkostningsberegningerne begynder. Denne parameter  gør det muligt at angive de faste omkostninger, der er knyttet til en kilde. I stedet for at starte med en omkostning på 0, begynder omkostningsalgoritmen med den angivne værdi.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "Værdien skal være nul eller større. Standard er 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Definerer den rejsendes retning, når man anvender kildens resistens-sats og startomkostninger.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>From Source</strong>--Kildens resistens-sats og startomkostninger anvendes fra input-kilden og ud til til ikke-kildecellerne. Dette er standardværdien.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>To Source</strong>--Kildens resistens-sats og startomkostninger anvendes fra hver ikke-kildecelle og tilbage til input-kilden.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Angiv enten nøgleordet <strong>From Source</strong> eller <strong>To Source</strong>, som vil blive anvendt på alle kilder, eller angiv et felt i <strong>Source Raster</strong>, der indeholder nøgleordene til at identificere kørselsretningen for hver kilde. Dette felt skal indeholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Denne parameter simulerer den større indsats for at klare omkostningerne, efterhånden som de akkumulerede omkostninger stiger. Det bruges til at modellere træthed hos rejsende. De voksende akkumulerede omkostninger for at nå en celle ganges med resistens-satsen og tilføjes til omkostningerne ved at flytte ind i den efterfølgende celle.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Det er en modificeret version af en rentes-rente-formel, der bruges til at beregne de synlige omkostninger ved at bevæge sig gennem en celle. Efterhånden som værdien af ​​resistens-satsen øges, øges omkostningerne for de celler, der besøges senere. Jo større resistens-satsen er, jo højere er omkostningerne ved at nå den næste celle, der tilskrives for hver efterfølgende bevægelse. Da resistens-satsen er magen til en rentes-rente-formel, og de akkumulerede omkostningsværdier generelt er meget store, foreslås små resistens-satser  som 0,005 eller endog mindre, afhængigt af de akkumulerede omkostningsværdier.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af ​​output-rasteren.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Cost-Distance_Capacity_tag0@@": "Definerer omkostningskapaciteten for den rejsende for en kilde. Omkostningsberegningerne fortsætter for hver kilde, indtil den specificerede kapacitet er nået.",
	"@@Cost-Distance_Capacity_tag1@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af ​​output-rasteren.",
	"@@Cost-Distance_Capacity_tag2@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "En obligatorisk input-raster, der definerer omkostninger eller impedans ved at bevæge sig planimetrisk gennem hver celle. Værdien ved hver cellelokation repræsenterer omkostning pr. enhed-afstanden ved at bevæge sig gennem den. Værdien ved hver cellelokation ganges med celleopløsningen, og der kompenseres også for diagonal bevægelse for at få de samlede omkostninger ved at bevæge sig gennem cellen.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "Værdierne i <strong>Cost Raster</strong> kan være heltal eller flydende komma, men de kan ikke være negative eller nul.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "Den tærskel, som de akkumulerede omkostningsværdier ikke må overstige. Hvis en akkumuleret omkostning/afstand overstiger denne værdi, bliver output-værdien for den pågældende celleplacering NoData. Den maksimale afstand definerer udstrækningen, som de akkumulerede omkostningsafstande beregnes for. Standardafstanden er til udstrækningen af output-rasteren.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator, der anvendes på omkostningsværdierne.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Denne parameter gør det muligt at kontrollere rejsemåden eller størrelsen ved en kilde. Jo større multiplikator, jo større omkostning ved at bevæge sig gennem hver celle.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Værdierne skal være større end nul. Standard er 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Cost-Distance_Source-Raster_tag0@@": "Den obligatoriske input-raster af kildeplaceringer.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Dette er en raster, der identificerer de celler eller placeringer, hvorfra afstanden med de laveste akkumulerede omkostninger beregnes for hver output-celles placering.",
	"@@Cost-Distance_Start-Cost_tag0@@": "Startomkostningerne, hvorfra omkostningsberegningerne begynder. Denne parameter  gør det muligt at angive de faste omkostninger, der er knyttet til en kilde. I stedet for at starte med en omkostning på 0, begynder omkostningsalgoritmen med den angivne værdi.",
	"@@Cost-Distance_Start-Cost_tag1@@": "Værdien skal være nul eller større. Standard er 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Definerer den rejsendes retning, når man anvender kildens resistens-sats og startomkostninger.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>From Source</strong>--Kildens resistens-sats og startomkostninger anvendes fra input-kilden og ud til til ikke-kildecellerne. Dette er standardværdien.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>To Source</strong>--Kildens resistens-sats og startomkostninger anvendes fra hver ikke-kildecelle og tilbage til input-kilden.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Angiv enten nøgleordet <strong>From Source</strong> eller <strong>To Source</strong>, som vil blive anvendt på alle kilder, eller angiv et felt i <strong>Source Raster</strong>, der indeholder nøgleordene til at identificere kørselsretningen for hver kilde. Dette felt skal indeholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Curvature_Curvature-Type_tag0@@": "Krumningstypen fremhæver forskellige aspekter af hældningen. Der er tre indstillinger for krumning:",
	"@@Curvature_Curvature-Type_tag1@@": "Planform - er vinkelret på retningen for den maksimale hældning. Den påvirker strømmens konvergens og divergens henover en overflade.",
	"@@Curvature_Curvature-Type_tag2@@": "Profil - er parallel med hældningen og angiver retningen for den maksimale hældning. Det påvirker strømmens accelerationen og decelerationen henover overfladen.",
	"@@Curvature_Curvature-Type_tag3@@": "Standard--Kombinerer både <strong>Profile</strong> og <strong>Planform</strong>-krumninger.",
	"@@Curvature_DEM_tag0@@": "En digital højdemodel-raster (DEM).",
	"@@Curvature_Z-Factor_tag0@@": "Z-faktoren justerer måleenhederne for z-enhederne, når de er forskellige fra x, y-enhederne på input-overfladen. Hvis enhederne x, y og z er i samme måleenheder, skal z-faktoren indstilles til 1. Z-værdierne på input-overfladen ganges med z-faktoren ved beregning af den endelige output-overflade. Hvis dine z-enheder f.eks. er i fod, og dine x, y-enheder er i meter, skal du bruge en z-faktor på 0,3048 til at konvertere dine z-enheder fra fod til meter, da 1 fod = 0,3048 meter.",
	"@@Divide_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Divide_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Divide_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Divide_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Divide_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Divide_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Divide_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Divide_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Divide_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Divide_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Divide_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Divide_Raster_tag0@@": "Inputtet, hvis værdi divideres med den andet input.",
	"@@Divide_Raster_tag1@@": "Et tal kan bruges som input til denne parameter, forudsat at der er angivet en raster for ${Raster2}.",
	"@@Divide_Raster2_tag0@@": "Det input, hvis værdi den første input divideres med.",
	"@@Divide_Raster2_tag1@@": "Et tal kan bruges som input til denne parameter, forudsat at der er angivet en raster for ${Raster}.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "Input-DEM.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "Den maksimale værdi for tomrumsbredde bruges til at angive den største størrelse på et tomrum, du vil udfylde. Hvis bredden eller højden på afgrænsningsboksen omkring tomrummet er større end den maksimale værdi for tomrumsbredde, udfyldes tomrummet ikke. Enhederne for denne parameter er de samme som de enheder, der bruges i dine datas spatiale referencesystem.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Hvis denne parameter er tom eller har en værdi på ${0}, bruges der ingen maksimumbredde, og alle tomrum udfyldes. En værdi på ${-1} betyder, at tomrum ikke udfyldes.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "Den maksimale søgeradius, der vil blive brugt til udfyldning af tomrum. Et tomrum, der er længere væk fra enhver gyldig pixel, end denne tærskelværdi, forbliver et tomrum. Enhederne for denne parameter er de samme som de enheder, der bruges i dine datas spatiale referencesystem.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Hvis værdien af ​​denne parameter er tom, ${0} eller ${-1}, bruges denne parameter ikke.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Equal-to_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Equal-to_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Equal-to_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Equal-to_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Equal-to_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Equal-to_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Equal-to_Raster_tag0@@": "Det input, der bliver brugt til sammenligning for lighed med det andet input.",
	"@@Equal-to_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Equal-to_Raster2_tag0@@": "Det input, der bliver brugt til sammenligning for lighed med det første input.",
	"@@Equal-to_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "Den cellestørrelse, som output-rasteren oprettes med.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Hvis cellestørrelsen blev aktivt indstillet i <strong>Analysis Environments</strong>, bliver det standardcellestørrelsen. Hvis den ikke blev indstillet, bliver output-cellestørrelsen den samme som <strong>Source Raster</strong>.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Afgør, om afstanden skal beregnes ved hjælp af en planar-metode (flad jord) eller en geodætisk metode (ellipsoid).",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Geodætisk - den korteste linje mellem to punkter på jordoverfladen på en sfæroid (ellipsoide). Det betyder, at resultaterne ikke ændrer sig, uanset input- eller output-projektion. En geodætisk linje kan f.eks. bruges, når du vil bestemme den korteste afstand mellem to byer for en flyrute. Dette er også kendt som en storcirkel-linje, hvis den er baseret på en sfære i stedet for en ellipsoide.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Planar - planarmålinger bruger 2D kartesisk matematik til at beregne længde og areal. Indstillingen er kun tilgængelig, når der måles i et projiceret koordinatsystem, og 2D-planet for det koordinatsystem bruges som basis for målingerne.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Definerer den tærskelafstand, som den nærmeste kilde bliver bestemt inden for. Hvis afstanden til den nærmeste kilde overstiger den, vil output for den celle være ${NoData}.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "Standardafstanden er til udstrækningen af output-rasteren.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "Rasteren, der definerer barriererne.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "Datasættet skal indeholde ${NoData}, der hvor der ikke er nogen barrierer. Barrierer repræsenteres af gyldige værdier inklusive nul.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "Barriererne kan defineres af et heltal eller en raster med flydende komma.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "Det felt, der bruges til at tildele værdier til kildeplaceringerne. Det skal være en heltalstype. Hvis <strong>Value Raster</strong> er angivet, får værdierne i dette input forrang for enhver indstilling for <strong>Source Field</strong>.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "En obligatorisk input-raster, der identificerer kildeplaceringerne. Baseret på euklidisk afstand bestemmes den nærmeste kilde for hver celle i outputtet",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "Input-typen kan være et heltal eller flydende komma.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "Input-heltalsrasteren, der identificerer de zoneværdier, som skal bruges til hver enkelt input-kildeplacering. For hver kildeplaceringscelle bliver den værdi, der er defineret af <strong>Value Raster</strong>, tildelt alle celler, der er tildelt kildeplaceringen til beregningen. <strong>Value Raster</strong> får forrang over enhver indstilling for <strong>Source Field</strong>.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "Den cellestørrelse, som output-rasteren oprettes med.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Hvis cellestørrelsen blev aktivt indstillet i <strong>Analysis Environments</strong>, bliver det standardcellestørrelsen. Hvis den ikke blev indstillet, bliver output-cellestørrelsen den samme som <strong>kilderaster</strong>.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Afgør, om afstanden skal beregnes ved hjælp af en planar-metode (flad jord) eller en geodætisk metode (ellipsoid).",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Geodætisk - den korteste linje mellem to punkter på jordoverfladen på en sfæroid (ellipsoide). Det betyder, at resultaterne ikke ændrer sig, uanset input- eller output-projektion. En geodætisk linje kan f.eks. bruges, når du vil bestemme den korteste afstand mellem to byer for en flyrute. Dette er også kendt som en storcirkel-linje, hvis den er baseret på en sfære i stedet for en ellipsoide.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Planar - planarmålinger bruger 2D kartesisk matematik til at beregne længde og areal. Indstillingen er kun tilgængelig, når der måles i et projiceret koordinatsystem, og 2D-planet for det koordinatsystem bruges som basis for målingerne.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Definerer tærskelafstanden, som retningen til den nærmeste kilde beregnes inden for. Hvis afstanden til den nærmeste kilde overstiger den, vil output for den celle være ${NoData}.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "Standardafstanden er til udstrækningen af output-rasteren.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "Rasteren, der definerer barriererne.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "Datasættet skal indeholde NoData, der hvor der ikke er nogen barrierer. Barrierer repræsenteres af gyldige værdier inklusive nul.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "Barriererne kan defineres af et heltal eller en raster med flydende komma.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "En obligatorisk input-raster, der identificerer de celler eller placeringer, som den euklidiske retning for hver output-celleplacering beregnes for.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "Input-typen kan være et heltal eller flydende komma.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "Den cellestørrelse, som output-rasteren oprettes med.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Hvis cellestørrelsen blev aktivt indstillet i <strong>Analysis Environments</strong>, bliver det standardcellestørrelsen. Hvis den ikke blev indstillet, bliver output-cellestørrelsen den samme som <strong>Source Raster</strong>.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Afgør, om afstanden skal beregnes ved hjælp af en planar-metode (flad jord) eller en geodætisk metode (ellipsoid).",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Geodætisk - den korteste linje mellem to punkter på jordoverfladen på en sfæroid (ellipsoide). Det betyder, at resultaterne ikke ændrer sig, uanset input- eller output-projektion. En geodætisk linje kan f.eks. bruges, når du vil bestemme den korteste afstand mellem to byer for en flyrute. Dette er også kendt som en storcirkel-linje, hvis den er baseret på en sfære i stedet for en ellipsoide.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Planar - planarmålinger bruger 2D kartesisk matematik til at beregne længde og areal. Indstillingen er kun tilgængelig, når der måles i et projiceret koordinatsystem, og 2D-planet for det koordinatsystem bruges som basis for målingerne.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "Den tærskel, som de akkumulerede afstandsværdier ikke må overstige. Hvis en akkumuleret euklidisk afstand overstiger denne værdi, bliver output-værdien for celleplaceringen NoData.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "Standardafstanden er til udstrækningen af output-rasteren.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "Rasteren, der definerer barriererne.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "Datasættet skal indeholde ${NoData}, der hvor der ikke er nogen barrierer. Barrierer repræsenteres af gyldige værdier inklusive nul.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "Barriererne kan defineres af et heltal eller en raster med flydende komma.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "Den obligatoriske input-raster, der identificerer de celler eller placeringer, hvortil den euklidiske afstand for hver output-celleplacering beregnes.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "Input-typen kan være et heltal eller flydende komma.",
	"@@Exp_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Exp_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Exp_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Exp_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Exp_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Exp_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Exp_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Exp_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Exp_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Exp_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Exp_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Exp_Raster_tag0@@": "Input-værdierne, som grundtal e-eksponentialfunktionen skal findes for.",
	"@@Exp10_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Exp10_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Exp10_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Exp10_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Exp10_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Exp10_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Exp10_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Exp10_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Exp10_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Exp10_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Exp10_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Exp10_Raster_tag0@@": "Input-værdierne, som grundtal 10-eksponentialfunktionen skal findes for.",
	"@@Exp2_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Exp2_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Exp2_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Exp2_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Exp2_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Exp2_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Exp2_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Exp2_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Exp2_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Exp2_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Exp2_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Exp2_Raster_tag0@@": "Input-værdierne, som grundtal 2-eksponentialfunktionen skal findes for.",
	"@@Extract-Bands_Band_tag0@@": "Vælg de bånd, der skal udtrækkes fra en liste, der er baseret på den anvendte <strong>Method</strong>-parameterindstilling.",
	"@@Extract-Bands_Combination_tag0@@": "Båndkombinationen eller båndrækkefølgen. Listen med valgmuligheder afhænger af den angivne <strong>Method</strong>-indstilling. Hvis <strong>Method</strong> er <strong>Band Names</strong>, kan du vælge en kombination af blå, grøn og rød for at udtrække et billede med naturlige farver.",
	"@@Extract-Bands_Method_tag0@@": "Vælg en af ​​følgende metoder til udtrækning af bånd:",
	"@@Extract-Bands_Method_tag1@@": "<strong>Band IDs</strong>--Båndets betegnelse eller nummer, som er unikt for hver sensor. Disse kan være identiske med <strong>Band Names</strong>.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Band Names</strong>--Bruger båndnavnet, der repræsenterer bølgelængdeintervallet på det elektromagnetiske spektrum (for eksempel rød, nær-infrarød, termisk infrarød). Det kan også betegnes båndnummer-ID.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Band Wavelengths</strong>--Bølgelængden på det elektromagnetiske spektrum.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Angiv den handling, der skal finde sted, når et bånd på udtrækningslisten ikke er tilgængeligt.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Best Match</strong>--Finder det bedste tilgængelige bånd i stedet for det manglende bånd baseret på bølgelængde, så funktionen ikke mislykkes",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Fail</strong>--Hvis input-datasættet mangler et bånd, der er angivet i parameteren <strong>Band</strong>, mislykkes funktionen.",
	"@@Extract-Bands_Raster_tag0@@": "Rasterproduktet, hvorfra båndet eller båndene udtrækkes.",
	"@@Fill_Raster_tag0@@": "En enkeltbånds-højderaster.",
	"@@Fill_Z-Limit_tag0@@": "Den maksimale højdeforskel mellem en fordybning og dens vandløbsretning, der skal udfyldes.",
	"@@Fill_Z-Limit_tag1@@": "Medmindre der er angivet en værdi for denne parameter, udfyldes alle fordybninger, uanset dybde.",
	"@@Fill_Z-Limit_tag2@@": "Værdien for <strong>Z Limit</strong> skal være større end nul.",
	"@@Float_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Float_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Float_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Float_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Float_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Float_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Float_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Float_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Float_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Float_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Float_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Float_Raster_tag0@@": "Input-rasteren, der skal konverteres til flydende komma.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "Inputrasteren, der viser strømningsretningen ud af hver celle.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "Flowretningsrasteren kan oprettes ved hjælp af funktionen <strong>Flow Direction</strong>.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Definerer typen på input-flowretningsrasteren.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--Input-flowretningsrasteren er type D8. Dette er standardværdien.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Input-flowretningsrasteren er type D-Infinity (DINF).",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Input-flowretningsrasteren er af typen Multi Flow Direction (MFD).",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "Output-akkumuleringsrasteren kan være af typen heltal eller flydende komma.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Float</strong>--Output-rasteren vil være af typen flydende komma. Dette er standardværdien.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Integer</strong>- Output-rasteren vil være af typen heltal.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "En valgfri input-raster til anvendelse af en vægt på hver pixel.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Hvis der ikke er angivet nogen vægtraster, anvendes en standardvægt på 1 på hver pixel.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Definerer typen på input-flowretningsrasteren.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--Input-flowretningsrasteren er type D8. Dette er standardværdien.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Input-flowretningsrasteren er type D-Infinity (DINF).",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Input-flowretningsrasteren er af typen Multi Flow Direction (MFD).",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Angiver, om kantpixels altid strømmer væk eller følger normale flow-regler.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>No</strong>--Hvis det maksimale fald på indersiden af ​​en kantpixel er større end nul, bestemmes flow-retningen som normalt. Ellers vil flow-retningen være mod kanten. Pixels, der skal strømme fra kanten af overfladerasteret og indad, gør det. Dette er standardværdien.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Yes</strong>--Alle pixels ved kanten af ​​overfladerasteren strømmer udad fra overfladerasteren.",
	"@@Flow-Direction_Raster_tag0@@": "Input-rasteren repræsenterer en kontinuerlig højdeoverflade.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Bestemmer, om den lodrette eller vandrette komponent af flow-afstanden beregnes.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Horizontal</strong>--Beregningerne for flow-afstand repræsenterer den vandrette komponent af flow-afstanden fra hver pixel i domænet til den eller de pixels i strømmen, de flyder ind i.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Vertical</strong>--Strømningsafstandsberegningerne repræsenterer den lodrette komponent af strømningsafstand fra hver pixel i domænet til pixel (er) i den strøm, de strømmer ind i. Dette er standardværdien.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "Input-rasteren, der viser flow-retningen ud af hver pixel.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "Når der er angivet en flow-retningsraster, bliver den eller de nedadgående retningerne begrænset til dem, der er defineret af input-flow-retningen.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "Flowretningsrasteren kan oprettes ved hjælp af funktionen Flowretning.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Definerer typen på input-flowretningsrasteren.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--Input-flowretningsrasteren er type D8. Dette er standardværdien.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Input-flowretningsrasteren er type D-Infinity (DINF).",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Input-flowretningsrasteren er af typen Multi Flow Direction (MFD).",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Bestemmer den statistiktype, der bruges til at beregne flow-afstand over flere strømningsveje. Hvis der kun er en enkelt strømningsvej fra hver celle til en celle i strømmen, giver alle statistiktyper det samme resultat.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Minimum</strong>--Hvor der findes flere strømningsveje, beregnes den korteste flow-afstand. Dette er standardværdien.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Weighted Mean</strong>--Hvor der findes flere strømningsveje, beregnes et vægtet middelværdi flow-afstanden. Flowdelen fra en celle til dens nedstrøms naboceller bruges som vægte til beregning af vægtet middelværdi.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Maximum</strong>--Når der findes flere strømningsveje, beregnes den maksimale flow-afstand.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "En input-strømraster, der repræsenterer et lineært strømnetværk.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "Input-rasteren repræsenterer en kontinuerlig højdeoverflade.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "Måleretningen langs strømningsvejen.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong>Downstream</strong>--Beregner den nedadgående afstand langs strømningsvejen fra hver celle til en fordybning eller et udløb på kanten af ​​rasteren.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>Upstream</strong>--Beregner den længste opadgående afstand langs strømningsvejen, fra hver celle til toppen af ​​afvandingsskellet.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "Inputrasteren, der viser strømningsretningen ud af hver celle.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "Flowretningsrasteren kan oprettes ved hjælp af funktionen <strong>Flow Direction</strong>.",
	"@@Flow-Length_Weight-Raster_tag0@@": "En valgfri input-raster til anvendelse af en vægt på hver celle.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Hvis der ikke er angivet nogen vægtraster, anvendes en standardvægt på 1 på hver celle.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Angiver, om ${NoData}-værdier ignoreres af den statistiske beregning.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Checked</strong>--Angiver, at hvis der findes en ${NoData}-værdi i et nabolaget, ignoreres ${NoData}-værdien. Kun celler i nabolaget, der har dataværdier, bruges til at bestemme output-værdien. Dette er standardværdien.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Unchecked</strong>--Angiver, at hvis en celle i et nabolag har en værdi på ${NoData}, bliver output for behandlingscellen ${NoData}.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "Formen på området omkring hver celle, der bruges til at beregne statistikken.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Hvert nabolag har yderligere parametre til at definere formen.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Annulus, indre radius, ydre radius",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Cirkel, radius",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Uregelmæssig, bredde, højde, naboværdier",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Rektangel, bredde, højde",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Kile, radius, startvinkel, slutvinkel",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Vægt, bredde, højde, naboværdier",
	"@@Focal-Statistics_Neighborhood_tag8@@": "Uregelmæssigt nabolag giver dig mulighed for at angive et uregelmæssigt formet nabolag omkring behandlingscellen. Brug tabellen Naboværdier til at definere formen på kvarterkernen. En værdi på 0 for en celleposition angiver, at cellen ikke er en del af nabolaget, og den vil ikke blive brugt til behandling. En værdi på 1 angiver, at dens tilsvarende celle (og værdi) er medlem af nabolaget.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "Vægt-nabolaget ligner uregelmæssigt-nabolaget, idet det giver dig mulighed for at definere et uregelmæssigt nabolag rundt om behandlingscellen, men det giver dig også mulighed for at anvende vægte på input-værdierne. Værdierne i vægtkernen specificerer, hvilke cellepositioner der skal inkluderes i nabolaget og de vægte, de multipliceres med. Brug en værdi på 0 for at ekskludere en celle fra behandling. Positive, negative og decimalværdier er alle gyldige indstillinger, der skal bruges som vægt. For nabolagstypen Vægt understøttes kun statistik for Middelværdi, Standardafvigelse og Sum.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Angiver, hvilken percentil, der skal beregnes, når <strong>Percentile</strong> er valgt som statistiktype. Standarden er 90, for den 90. percentil.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "Værdierne kan være fra 0 til 100. Den 0. percentil svarer stort det til Minimum-statistikken, og den 100. percentil svarer til Maksimum, bort set fra, at resultatet er flydende komma. En værdi på 50 vil stort set give det samme resultat som Median-statistikken.",
	"@@Focal-Statistics_Raster_tag0@@": "Den påkrævede Input-raster.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "Den statistiktype, der skal beregnes.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Majority</strong>--Beregner majoriteten (værdien, der forekommer oftest) af cellerne i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Maximum</strong>--Beregner maksimum (største værdi) af cellerne i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Mean</strong>--Beregner middelværdien (gennemsnitsværdien) af cellerne i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Median</strong>--Beregner medianen af cellerne i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Minimum</strong>--Beregner minimum (mindste værdi) af cellerne i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Minority</strong>--Beregner minoriteten (værdien, der forekommer mindst ofte) af cellerne i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Percentile</strong>-- Beregner en percentil af cellerne i nabolaget. Du kan bestemme, hvilken procentdel der skal beregnes med parameteren <strong>Percentile Value</strong>.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Range</strong>--Beregner intervallet (forskellen mellem største og mindste værdi) af cellerne i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Standard Deviation</strong>--Beregner standardafvigelsen for cellerne i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Sum</strong>--Beregner summen (summen af ​​alle værdier) af cellerne i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Variety</strong>--Beregner variationen (antallet af unikke værdier) af cellerne i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Hvis input-rasteren er flydende komma, er det kun statistikkerne Middelværdi, Maksimum, Median, Minimum, Percentil, Interval, Standardafvigelse og Sum, der er tilgængelige.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "For Middelværdi, Median, Percentil og Standardafvigelse er output altid flydende komma.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "Standardstatiktypen er Middelværdi.",
	"@@Geometric_Constant-Z_tag0@@": "Angiv en konstant højde, der skal bruges til funktionen Geometrisk.",
	"@@Geometric_DEM_tag0@@": "Specificer den DEM, der skal bruges til funktionen Geometrisk. Du kan bruge et DEM, der er indeholdt i mosaikdatasættet som et rasterdatasæt eller som et mosaikdatasæt, hvis output er et DEM.",
	"@@Geometric_Geoid_tag0@@": "De fleste højdedatasæt, såsom USGS NED eller ArcGIS Online World Elevation, er ortometriske højder, så det er nødvendigt at vælge Geoid-korrektion for kompatibilitet med satellit-RPC'er, som kræver ellipsoide højder. Markér afkrydsningsfeltet <strong>Geoid</strong> for at anvende geoid (EGM96) korrektion på z-værdierne, medmindre din DEM allerede refererer til ellipsoide højder.",
	"@@Geometric_Method_tag0@@": "Vælg højdemetode til den geometriske funktion:",
	"@@Geometric_Method_tag1@@": "Brug konstant Z - Angiv en konstant højde for at udføre funktionen Geometrisk.",
	"@@Geometric_Method_tag2@@": "Brug DEM - Angiv en DEM for at udføre funktionen Geometrisk.",
	"@@Geometric_Raster_tag0@@": "Input-rasteren.",
	"@@Geometric_Z-Factor_tag0@@": "Rationelle polynomiske koefficienter for satellit (RPC'er) skaleres for højdedatasæt med lodrette enheder i meter. Hvis din højde bruger andre lodrette enheder, skal du indtaste en <strong>Z Factor</strong> for at omregne til meter. Hvis dine højdeenheder er i f.eks. fod, skal du bruge vil du bruge en værdi på 0,3048 til at konvertere dine højde-enheder fra fod til meter.",
	"@@Geometric_Z-Offset_tag0@@": "Basisværdien, der skal læges til højdeværdien i DEM. Det kan bruges til at udligne højdeværdier, der ikke starter ved havoverfladen.",
	"@@Geometric_Tolerance_tag0@@": "Angiv den maksimalt tilladelige fejl i den geometriske funktion, i antal pixels. Standard for NITF (NCDRD) rastertypen er to.",
	"@@Grayscale_Raster_tag0@@": "Input-rasteren.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "Vægterne for hvert af båndene, der udgør input-rasteren.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Greater-Than_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Greater-Than_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Greater-Than_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Greater-Than_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Greater-Than_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Greater-Than_Raster_tag0@@": "Det input, der testes for at afgøre, om det er større end det andet input.",
	"@@Greater-Than_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Greater-Than_Raster2_tag0@@": "Det input, som den første input testes op imod for at se, om det er større.",
	"@@Greater-Than_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Greater-Than-Equal_Raster_tag0@@": "Det input, der testes for at afgøre, om det er større end eller lig med det andet input.",
	"@@Greater-Than-Equal_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "Det input, som den første input testes imod, for at finde ud af, om det er større end eller lig med.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "Måleenheden, der er forbundet med output-rasteren. Tilgængelige output-enheder er Celsius, Fahrenheit og Kelvin.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "En enkeltbåndsraster, hvor pixelværdier repræsenterer relativ fugtighed som en procentværdi mellem 0 og 100.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "En enkeltbåndsraster, hvor pixelværdier repræsenterer den omgivende lufttemperatur.",
	"@@Heat-Index_Temperature-Units_tag0@@": "Måleenheden, der er forbundet med input-temperaturrasteren. Tilgængelige input-enheder er Celsius, Fahrenheit og Kelvin.",
	"@@Hillshade_Altitude_tag0@@": "Højde er solens højdevinkel over horisonten og varierer fra 0 til 90 grader. En værdi på 0 grader indikerer, at solen er på horisonten, dvs. på samme horisontale plan som referencerammen. En værdi på 90 grader indikerer, at solen er direkte over os.",
	"@@Hillshade_Altitude_tag1@@": "Denne parameter er kun gyldig, når <strong>Hillshade Type</strong> er <strong>Traditional</strong>. Standarden er 45 grader over horisonten.",
	"@@Hillshade_Azimuth_tag0@@": "Azimut er solens relative position langs horisonten (i grader). Denne position angives som solens vinkel målt med uret fra stik nord. En azimut på 0 grader angiver nord, øst er 90 grader, syd er 180 grader, og vest er 270 grader.",
	"@@Hillshade_Azimuth_tag1@@": "Denne parameter er kun gyldig, når <strong>Hillshade Type</strong> er <strong>Traditional</strong>. Standard er 315 grader, som er fra nordvest.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "Ved at bruge denne indstilling undgår man at resample artefakter, der kan forekomme langs kanterne på en raster. Output-pixel langs kanten af ​​en raster eller ved siden af ​​NoData-pixels udfyldes med NoData. Derfor anbefales det, at denne parameter kun bruges sammen med højde-mosaikdatasæt, der har overlapning. Når overlappende pixels er tilgængelige, vil områderne med NoData vise den overlappende pixelværdi i stedet for tomme pixels.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Ikke markeret--Bilineær resampling vil blive anvendt gennemgående for at resample din skyggevirkning. Brug denne indstilling, når mosaikdatasættet, der indeholder din højde-rasterdata, bindes sammen. Dette er standardværdien.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Markeret--Bilineær resampling vil blive brugt inden for skyggevirkning bortset fra langs rasternes kanter eller ved siden af NoData-pixels. Disse pixels bliver udfyldt med NoData og viser de overlappende pixelværdier, hvilket reducerer eventuelle skarpe kanteffekter, der ellers kan forekomme. Brug denne indstilling, når mosaikdatasættet, der indeholder dine øjde-rasterdata, består af overlappende elementer eller fliser.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "Resultaterne fra funktionen kan være dataafhængige. Hvis du ser artefakter på tile-kanter i dit output-, skal du markere afkrydsningsfeltets alternative tilstand.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Styrer lyskilden for skyggevirkningen:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Traditionel - Beregner skyggevirkning ud fra en enkelt lysretning. Dette er standardværdien. Du kan indstille <strong>Azimuth</strong> og <strong>Altitude</strong> til at styre placeringen af ​​lyskilden.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Mange retninger - Kombinerer lys fra flere kilder for at give en bedre visualisering af terrænet.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "Pixelstørrelsesfaktor tager højde for ændringer i skala, når seeren zoomer ind og ud på kortvisningen. Det styrer den hastighed, som <strong>Z Factor</strong> ændres med.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Denne parameter er kun gyldig, når <strong>Scaling</strong>-typen er <strong>Adjusted</strong>. Standardværdien er 0,024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "Pixelstørrelsespotens tager højde for ændringer i højden (eller skalaen), når seeren zoomer ind og ud på kortvisningen. Det er eksponenten, der anvendes til pixelstørrelsen i ligningen, der styrer den hastighed, hvormed <strong>Z Factor</strong> ændres, for at undgå betydeligt tab af relief.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Denne parameter er kun gyldig, når <strong>Scaling</strong>-typen er <strong>Adjusted</strong>. Standardværdien er 0,664.",
	"@@Hillshade_Raster_tag0@@": "Input-højdedatasættet.",
	"@@Hillshade_Scaling_tag0@@": "Skyggeresultatet skaleres dynamisk ved at justere z-faktoren ved hjælp af en af to indstillinger:",
	"@@Hillshade_Scaling_tag1@@": "Justeret - Der anvendes en ikke-lineær justering ved hjælp af standardværdierne for <strong>Pixel Size Power</strong> og <strong>Pixel Size Factor</strong>, som kan rumme en bred vifte af højdeændringer (skalering), når seeren zoomer ind og ud. Parameterindstillingen <strong>Adjusted</strong> anbefales, når du bruger et globalt datasæt.",
	"@@Hillshade_Scaling_tag8@@": "Ingen - Der anvendes ingen skalering. Dette er ideelt til et enkelt-rasterdatasæt, der dækker et lokalt område. Det anbefales ikke til globale datasæt med store højdevariationer eller kort i mange målestoksforhold, da det vil skabe terrænrelief med lille variation i små målestoksforhold.",
	"@@Hillshade_Z-Factor_tag0@@": "Z-faktoren er en skaleringsfaktor, der bruges til at konvertere højdeværdierne med to formål:",
	"@@Hillshade_Z-Factor_tag1@@": "At konvertere højdeenheder (f.eks. meter eller fod) til horisontale koordinatenheder for datasættet, som kan være fod, meter eller grader.",
	"@@Hillshade_Z-Factor_tag2@@": "At tilføje vertikal overdrivelse for at øge den visuelle virkning.",
	"@@Int_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Int_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Int_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Int_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Int_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Int_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Int_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Int_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Int_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Int_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Int_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Int_Raster_tag0@@": "Input-rasteren, der skal konverteres til heltal.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "Cellestørrelsen for output-rasteren identificeres automatisk, men du kan ændre dette. Cellestørrelsen kan ændres, med udstrækningen af raster-datasættet forbliver den samme.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "Input-punkternes data.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Der findes fire resampling-metoder for denne funktion:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Inverse Distance Weighted</strong>--Bestemmer celleværdier ved hjælp af en lineært vægtet kombination af et sæt eksempelpunkter eller -celler. Vægten er en funktion af det inverse af afstanden fra de kendte punkter eller celler.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>Linear Tinning</strong>--Bruger et triangulær uregelmæssigt netværk fra centerpunktet i hver celle i den uregelmæssige raster til at interpolere en overflade, der så konverteres til en regelmæssig raster.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Natural Neighbor</strong>--Finder det nærmeste undergruppe af input-eksempler til et forespørgselspunkt og anvender vægte på dem baseret på forholdsmæssige områder for at interpolere en værdi.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Nearest Neighbor</strong>--Beregner pixelværdien ved hjælp af den nærmeste pixel. Hvis der ikke er nogen kildepixel, kan der ikke oprettes en ny pixel i outputtet. Dette er standardværdien.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Identificerer antallet af pixels, der skal inkluderes i den valgte resampling-metode. Standardværdien er ${3} pixels.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Hvis du vælger en punktobjektklasse som input, skal du identificere feltet i attribut-tabellen med værdien af ​​punkterne",
	"@@Is-Null_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Is-Null_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Is-Null_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Is-Null_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Is-Null_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Is-Null_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Is-Null_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Is-Null_Raster_tag0@@": "Input-rasteren, der testes for at identificere de celler, der er ${NoData} (null).",
	"@@Is-Null_Raster_tag1@@": "Input-rasteren kan enten være et heltal eller et flydende komma.",
	"@@Key-Metadata_Band-Names_tag0@@": "Det bruges til at tilsidesætte båndnavnene på en raster. Det er en kommasepareret streng, der repræsenterer opdaterede båndnavne.",
	"@@Key-Metadata_Band-Names_tag1@@": "Denne parameter er valgfri.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "Nøglemetadata, der skal injiceres i den udgående raster beskrevet som en JSON-streng, der repræsenterer en samling nøgleværdipar. Følgende er et eksempel på en JSON-streng, der kan bruges som input til denne funktion. Alle input til denne parameter skal have det samme format.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "JSON-streng, der repræsenterer nøglemetadata",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "Navnet på nøgleegenskaben på datasætniveau, der skal tilsidesættes.",
	"@@Key-Metadata_Raster_tag0@@": "Raster- eller mosaikdatasættet, der indeholder nøglemetadata, som du gerne vil indsætte eller overskrive.",
	"@@Key-Metadata_Value_tag0@@": "Den tilsidesættende værdi af nøgleegenskaben på datasætniveau, som du vil indstille.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Denne parameter simulerer den større indsats for at klare omkostningerne, efterhånden som de akkumulerede omkostninger stiger. Det bruges til at modellere træthed hos rejsende. De voksende akkumulerede omkostninger for at nå en celle ganges med resistens-satsen og tilføjes til omkostningerne ved at flytte ind i den efterfølgende celle.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "Det er en modificeret version af en rentes-rente-formel, der bruges til at beregne de synlige omkostninger ved at bevæge sig gennem en celle. Efterhånden som værdien af ​​resistens-satsen øges, øges omkostningerne for de celler, der besøges senere. Jo større resistens-satsen er, jo højere er omkostningerne ved at nå den næste celle, der tilskrives for hver efterfølgende bevægelse. Da resistens-satsen er magen til en rentes-rente-formel, og de akkumulerede omkostningsværdier generelt er meget store, foreslås små resistens-satser  som 0,005 eller endog mindre, afhængigt af de akkumulerede omkostningsværdier.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af ​​output-rasteren.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Definerer omkostningskapaciteten for den rejsende for en kilde. Omkostningsberegningerne fortsætter for hver kilde, indtil den specificerede kapacitet er nået.",
	"@@Least-Cost-Path_Capacity_tag1@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af ​​output-rasteren.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "En obligatorisk input-raster, der definerer omkostninger eller impedans ved at bevæge sig planimetrisk gennem hver celle. Værdien ved hver cellelokation repræsenterer omkostning pr. enhed-afstanden ved at bevæge sig gennem den. Værdien ved hver cellelokation ganges med celleopløsningen, og der kompenseres også for diagonal bevægelse for at få de samlede omkostninger ved at bevæge sig gennem cellen.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "Værdierne i <strong>Cost Raster</strong> kan være heltal eller flydende komma, men de kan ikke være negative eller nul.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "Det felt, der bruges til at få værdier til destinationsplaceringer.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "En obligatorisk input-raster, der identificerer de pixels, hvorfra ruten med de laveste omkostninger til kilden med de laveste omkostninger fastlægges. Dette input består af pixels, der har gyldige værdier, og de resterende pixels skal tildeles ${NoData}. Værdier på 0 er gyldige.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "Den tærskel, som de akkumulerede omkostningsværdier ikke må overstige. Hvis en akkumuleret omkostning/afstand overstiger denne værdi, bliver output-værdien for den pågældende celleplacering ${NoData}. Den maksimale afstand definerer udstrækningen, som de akkumulerede omkostningsafstande beregnes for. Standardafstanden er til udstrækningen af output-rasteren.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Denne parameter gør det muligt at kontrollere rejsemåden eller størrelsen ved en kilde. Jo større multiplikator, jo større omkostning ved at bevæge sig gennem hver celle.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "Værdierne skal være større end nul. Standard er 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Et nøgleord, der definerer den måde, hvorpå værdierne og zonerne på input-destinationsdataene bliver fortolket i beregningerne af rutens omkostninger:",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Best Single</strong>--For alle pixels på input-destinationsdataene findes ruten med de laveste omkostninger fra den pixel, der har det laveste antal lavomkostningsruter til kildecellerne.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Each Cell</strong>--En lavomkostningsrute bestemmes for hver pixel med gyldige værdier på input-destinationsdataene og gemmes på output-rasteren. Hver celle i input-destinationsdataene behandles separat, og der fastlægges en lavomkostningsrute for hver celle.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Each Zone</strong>--For hver zone på input-destinationsdataene bestemmes en lavomkostningsrute, som gemmes på output-rasteren. Lavomkostningsruten for hver zone begynder ved den pixel med den laveste omkostning/afstands-vægtning i zonen.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Dette er en påkrævet input-raster, der identificerer de celler eller placeringer, hvorfra afstanden med de laveste akkumulerede omkostninger beregnes for hver output-celles placering.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "Startomkostningerne, hvorfra omkostningsberegningerne begynder. Denne parameter  gør det muligt at angive de faste omkostninger, der er knyttet til en kilde. I stedet for at starte med en omkostning på 0, begynder omkostningsalgoritmen med den angivne værdi.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "Værdien skal være nul eller større. Standard er 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Definerer den rejsendes retning, når man anvender kildens resistens-sats og startomkostninger.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>From Source</strong>--Kildens resistens-sats og startomkostninger anvendes fra input-kilden og ud til til ikke-kildecellerne. Dette er standardværdien.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>Til kilde</strong>--Kildens resistens-sats og startomkostninger anvendes fra hver ikke-kildecelle og tilbage til input-kilden.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Angiv enten nøgleordet <strong>Fra kilde</strong> eller <strong>Til kilde</strong>, som vil blive anvendt på alle kilder, eller angiv et felt i <strong>Kilderaster</strong>, der indeholder nøgleordene til at identificere kørselsretningen for hver kilde. Dette felt skal indeholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Less-Than_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Less-Than_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Less-Than_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Less-Than_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Less-Than_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Less-Than_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Less-Than_Raster_tag0@@": "Det input, der testes for at afgøre, om det er mindre end det andet input.",
	"@@Less-Than_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Less-Than_Raster2_tag0@@": "Det input, som den første input testes op imod for at se, om det er mindre.",
	"@@Less-Than_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Less-Than-Equal_Raster_tag0@@": "Det input, der testes for at afgøre, om det er mindre end eller lig med det andet input.",
	"@@Less-Than-Equal_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Less-Than-Equal_Raster2_tag0@@": "Det input, som den første input testes imod, for at finde ud af, om det er mindre end eller lig med.",
	"@@Less-Than-Equal_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Ln_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Ln_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Ln_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Ln_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Ln_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Ln_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Ln_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Ln_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Ln_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Ln_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Ln_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Ln_Raster_tag0@@": "Input-værdier, som den naturlige logaritme (Ln) skal findes for.",
	"@@Log10_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Log10_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Log10_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Log10_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Log10_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Log10_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Log10_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Log10_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Log10_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Log10_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Log10_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Log10_Raster_tag0@@": "Input-værdier for hvilke basis 10-logaritmen skal findes.",
	"@@Log2_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Log2_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Log2_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Log2_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Log2_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Log2_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Log2_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Log2_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Log2_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Log2_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Log2_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Log2_Raster_tag0@@": "Input-værdier for hvilke basis 2-logaritmen skal findes.",
	"@@Lookup_Field_tag0@@": "Felt, der indeholder de ønskede værdier for den nye raster.",
	"@@Lookup_Field_tag1@@": "Det skal være numeriske værdier.",
	"@@Lookup_Raster_tag0@@": "Den input-raster, der indeholder et felt, som kan anvendes til at oprette en ny raster.",
	"@@Lookup_Raster_tag1@@": "Den kan enten være heltal eller flydende komma.",
	"@@Mask_Included-Ranges_tag0@@": "De inkluderede intervaller kan angives for hvert bånd ved at angive en minimum- og en maksimumværdi. Værdier uden for intervallet vil blive returneret som ${NoData}. Et pixel er inkluderet, hvis pixlens værdi ligger inden for et af de angivne intervaller. Hvis bånd 1 har et interval på 5-10, og bånd 2 har et interval på 15-20, og pixelværdien for bånd 1 er 8, vil denne pixel derfor ikke være maskeret.",
	"@@Mask_NoData-Interpretation_tag0@@": "Dette henviser til, hvordan <strong>${NoData} Values</strong> påvirker outputbilledet.",
	"@@Mask_NoData-Interpretation_tag3@@": "Du har følgende to valgmuligheder:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Match All</strong>--De ${NoData}-værdier, som du angiver for hvert bånd, skal forekomme i samme pixel til outputbilledet for at indeholde ${NoData}-pixlen.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Match Any</strong>--Hvis den ${NoData}-værdi, som du angiver, forekommer i en pixel i et angivet bånd, vil denne pixel i outputbilledet være ${NoData}. Dette er standardværdien.",
	"@@Mask_NoData-Values_tag0@@": "NoData-værdier kan angives for hvert bånd. Du kan angive mere end én værdi ved at indtaste en rumbegrænset liste.",
	"@@Mask_Raster_tag0@@": "Input-rasteren.",
	"@@Minus_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Minus_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Minus_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Minus_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Minus_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Minus_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Minus_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Minus_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Minus_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Minus_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Minus_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Minus_Raster_tag0@@": "Inputtet, hvorfra værdierne i det andet input fratrækkes.",
	"@@Minus_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Minus_Raster2_tag0@@": "De input-værdier, der skal fratrækkes værdierne i det første input.",
	"@@Minus_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@ML-Classify_Raster_tag0@@": "Den input-raster, der skal klassificeres ved hjælp af algoritmen for den højeste sandsynlighedsklassifikation.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "${.gsg}-signaturfilen.",
	"@@Mod_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Mod_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Mod_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Mod_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Mod_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Mod_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Mod_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Mod_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Mod_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Mod_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Mod_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Mod_Raster_tag0@@": "Tæller-input.",
	"@@Mod_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Mod_Raster2_tag0@@": "Nævner-input.",
	"@@Mod_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Løs eventuelle konflikter, når du har dele af to eller flere billeder, der overlapper. Der kan vælges mellem følgende indstillinger:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Blend</strong>--Beregn og vis et gennemsnit af de overlappende pixels ved at vægte pixels, der ligger tættere på tilstødende billeder, højere, så outputtet er et bedre billede. Dette er standardværdien.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>First</strong>--Vis pixels fra det første billede på listen over billeder, der overlapper i et bestemt område.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Last</strong>--Vis pixels fra det sidste billede på listen over billeder, der overlapper i et bestemt område.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Max</strong>--Vis pixlen med den højeste værdi i alle overlappende lag. Med denne indstilling er der ingen garanti for at få vist pixlerne fra et enkelt billede i det overlappende område, men snarere en kombination af alle potentielle lag.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Mean</strong>--Beregn og vis et gennemsnit af de overlappende pixels.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Min</strong>--Vis pixlen med den laveste værdi i alle overlappende lag. Med denne indstilling er der ingen garanti for at få vist pixlerne fra et enkelt billede i det overlappende område, men snarere en kombination af alle potentielle lag.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Vælg de rastere, som du ønsker tilsammen skal danne et enkelt mosaikbillede.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Angiver det bånd-ID, der repræsenterer den nær-infrarøde del af det elektromagnetiske spektrum.",
	"@@NDVI_Raster_tag0@@": "Den multispektrale input-raster.",
	"@@NDVI_Scientific-Output_tag0@@": "Output-værdierne varierer fra -1.0 til 1.0, hvilket anvendes i mange videnskabelige applikationer.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Angiver det bånd-ID, der repræsenterer den røde del af det elektromagnetiske spektrum.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Vælg et foruddefineret farveskema på rullelisten.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Vælg, hvilken type farveskema, der skal bruges til at farvelægge NDVI-outputtet:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Farvekort--Vælg et foruddefineret farvekort på rullelisten. Alternativt kan du gå til en vedvarende farvekort-fil, der eksisterer.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Farveskala--Vælg et foruddefineret farveskema på rullelisten.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Vælg et foruddefineret farvekort på rullelisten. Alternativt kan du gå til en eksisterende farvekort-fil.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Angiver det bånd-ID, der repræsenterer den nær-infrarøde del af det elektromagnetiske spektrum.",
	"@@NDVI-Colorized_Raster_tag0@@": "Den multispektrale input-raster.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "Output-værdierne varierer fra -1.0 til 1.0, hvilket anvendes i mange videnskabelige applikationer.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Angiver det bånd-ID, der repræsenterer den røde del af det elektromagnetiske spektrum.",
	"@@Negate_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Negate_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Negate_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Negate_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Negate_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Negate_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Negate_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Negate_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Negate_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Negate_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Negate_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Negate_Raster_tag0@@": "Input-rasteren, der skal negeres (ganget med -1).",
	"@@Nibble_Mask-Raster_tag0@@": "Den påkrævede input-raster, der bruges som maske.",
	"@@Nibble_Mask-Raster_tag1@@": "Celler med NoData som værdi vil blive nibbled i input-<strong>Raster</strong>.",
	"@@Nibble_Mask-Raster_tag4@@": "Maske-rasteren kan enten være et heltal eller et flydende komma.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Definerer, hvorvidt NoData-celler i input-rasteren forbliver NoData i output-rasteren.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>No</strong>--Angiver, at NoData-celler i input-rasteren forbliver NoData i outputtet. Dette er standardværdien.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Yes</strong>--Angiver, at NoData-celler i input-rasteren og inden for masken kan blive nibbled til gyldige output-celleværdier.",
	"@@Nibble_Raster_tag0@@": "Den påkrævede input-raster, der vil blive nibbled.",
	"@@Nibble_Raster_tag1@@": "Input-rasteren kan enten være et heltal eller et flydende komma.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Definerer, hvorvidt ${NoData}-værdier i input-rasteren må nibble ind i det område, der er defineret af maske-rasteren.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Yes</strong>--Angiver, at den nærmeste tilstødende værdi vil blive brugt, uanset om den er ${NoData} eller en anden dataværdi i input- rasteren. ${NoData}-værdier i input-rasteren kan nibble ind i områder, der er defineret i masken, hvis de er den nærmeste nabo. Dette er standardværdien.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>No</strong>--Angiver at kun dataværdier må nibble ind i områder, der er defineret i maske-rasteren. ${NoData}-værdier i input-rasteren må ikke nibble ind i områder, der er defineret i masken, hvis de er den nærmeste nabo.",
	"@@Nibble_Zone-Raster_tag0@@": "Inputzone-raster.",
	"@@Nibble_Zone-Raster_tag1@@": "En zone er alle de celler i en raster, der har samme værdi, uanset om de er tilgrænsende eller ej. Inputzone-laget definerer zonernes form, værdi og placering. Zone-rasteren kan enten være et heltal eller et flydende komma.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Not-Equal_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Not-Equal_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Not-Equal_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Not-Equal_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Not-Equal_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Not-Equal_Raster_tag0@@": "Det input, som vil blive sammenlignet med det andet input for ulighed.",
	"@@Not-Equal_Raster_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Not-Equal_Raster2_tag0@@": "Det input, som vil blive sammenlignet med det første input for ulighed.",
	"@@Not-Equal_Raster2_tag1@@": "En konstant værdi kan bruges som input til dette parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Pansharpening_Multispectral_tag0@@": "Den multispektrale raster, som du ønsker at skærpe ved hjælp af det pankromatiske bånd.",
	"@@Pansharpening_Panchromatic_tag0@@": "Den enkeltbåndsraster i høj opløsning, som skal bruges til Pansharpen af den multispektrale raster i lav opløsning.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Vælg den Pansharpen-algoritme, du ønsker at bruge.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey--Bruger Brovey-algoritmen baseret på spektral modellering til datafusion.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri--Bruger Esri-algoritmen baseret på spektral modellering til datafusion.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram-Schmidt--Bruger Gram-Schmidt-algoritmen for spektral-sharpening til at skærpe de multispektrale data.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS--Bruger farverummet intensitet, farvetone og mætning til datafusion.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Mean--Bruger gennemsnitsværdien mellem rød, grøn og blå værdier og værdien af den pankromatiske pixel.",
	"@@Pansharpening_Weights_tag0@@": "Angiv vægtene for de røde, grønne, blå og infrarøde bånd. Alle værdier skal ligge inden for området 0 til 1.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Denne parameter simulerer den større indsats for at klare omkostningerne, efterhånden som de akkumulerede omkostninger stiger. Det bruges til at modellere træthed hos rejsende. De voksende akkumulerede omkostninger for at nå en celle ganges med resistens-satsen og lægges til omkostningerne ved at flytte ind i den efterfølgende celle.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Det er en modificeret version af en rentes-rente-formel, der bruges til at beregne de synlige omkostninger ved at bevæge sig gennem en celle. Efterhånden som værdien af ​​resistens-satsen øges, øges omkostningerne for de celler, der besøges senere. Jo større resistens-satsen er, jo højere er omkostningerne ved at nå den næste celle, der tilskrives for hver efterfølgende bevægelse. Da resistens-satsen er magen til en rentes-rente-formel, og de akkumulerede omkostningsværdier generelt er meget store, foreslås små resistens-satser  som 0,005 eller endog mindre, afhængigt af de akkumulerede omkostningsværdier.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af ​​output-rasteren.",
	"@@Path-Distance_Capacity_tag0@@": "Definerer omkostningskapaciteten for den rejsende for en kilde. Omkostningsberegningerne fortsætter for hver kilde, indtil den specificerede kapacitet er nået.",
	"@@Path-Distance_Capacity_tag1@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af ​​output-rasteren.",
	"@@Path-Distance_Cost-Raster_tag0@@": "En obligatorisk input-raster, der definerer omkostninger eller impedans ved at bevæge sig planimetrisk gennem hver celle. Værdien ved hver cellelokation repræsenterer omkostning pr. enhed-afstanden ved at bevæge sig gennem den. Værdien ved hver cellelokation ganges med celleopløsningen, og der kompenseres også for diagonal bevægelse for at få de samlede omkostninger ved at bevæge sig gennem cellen.",
	"@@Path-Distance_Cost-Raster_tag1@@": "Værdierne i <strong>Cost Raster</strong> kan være heltal eller flydende komma, men de kan ikke være negative eller nul.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Definerer forholdet mellem den vandrette omkostningsfaktor og Horizontal Relative Moving Angle (HRMA).</p><p>Der er adskillige faktorer med modifikatorer, der identificerer en defineret lodret faktorgraf. Man kan også bruge en tabel til at oprette en tilpasset graf. Graferne bruges til at identificere den lodrette faktor, der bruges til at beregne den samlede omkostning ved at bevæge sig over i en nabocelle.</p><p>I forklaringerne nedenfor anvendes to forkortelser: HF og HRMA. HF står for horizontal factor, som definerer de vandrette problemer, der opstår, når man bevæger sig fra en celle til den næste. HRMA står for Horizontal Relative Moving Angle, som identificerer vinklen mellem den vandrette retning fra en celle og bevægelsesretningen.</p><p><strong>Horisontale faktor</strong>-typer omfatter følgende:</p><ul><li><strong>Binær</strong>--Indikerer, at hvis HRMA er mindre end den skårne vinkel, er HF indstillet til den værdi, der er forbundet med nulfaktoren, ellers er den uendelig.</li><li><strong>Frem</strong>--Fastslår, at kun fremadrettede bevægelser er tilladt. HRMA skal være større end eller lig med 0 og mindre end 90 grader (0 &lt;= HRMA &lt; 90). Hvis HRMA er større end 0 og mindre end 45 grader, er HF for cellen indstillet til den værdi, der er forbundet med nulfaktoren. Hvis HRMA er større end eller lig med 45 grader, anvendes modifikatorværdien for sideværdien. HF for HRMA-værdier, der er lig med eller større end 90 grader, er indstillet til uendelig.</li><li><strong>Lineær</strong>--Angiver, at HF er en lineær funktion af HRMA.</li><li><strong>Omvendt lineær</strong>--Angiver, at HF er en omvendt lineær funktion af HRMA.</li><li><strong>Tabel</strong>--Angiver, at en tabelfil vil blive brugt til at definere den vandrette faktorgraf, der anvendes til at fastslå HF'erne.</li></ul><p>Modifikatorer til de vandrette faktorer inkluderer følgende:</p><ul><li><strong>Nulfaktor</strong>--Den vandrette faktor, der anvendes, når HRMA er nul. Denne faktor positionerer y-skæringspunktet for funktionerne for den vandrette faktor.</li><li><strong>Skæringsvinkel</strong>--Definerer den HRMA-vinkel, over hvilken HF vil blive indstillet til uendelig.</li><li><strong>Hældning</strong>--Fastslår hældningen for den lige linje, der bruges med<strong>Lineær</strong>og<strong>Omvendt lineær</strong>vandrette faktornøgleord. Hældningen angives som en brøkdel af ”rise over run” (f.eks. svarer en 45 graders hældning til 1/45, der indtastes som 0,02222).</li><li><strong>Sideværdi</strong>--Fastslår HF, når HRMA er større end eller lig med 45 grader og mindre end 90 grader, når<strong>Frem</strong>nøgleordet for den vandrette faktor er angivet.</li><li><strong>Tabelnavn</strong>--Identificerer navnet på den tabel, der definerer HF.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "En raster, der definerer den vandrette retning i hver celle.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "Værdierne på rasteren skal være heltal i intervallet mellem 0 og 360, hvor 0 grader er nord, eller mod toppen af skærmen, og stigende med uret. Flade områder bør have værdien -1. Værdierne på hvert sted bliver brugt i forbindelse med <strong>Horizontal factor</strong> til at bestemme den vandrette omkostning ved at flytte sig fra én celle til en nabocelle.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "Den tærskel, som de akkumulerede omkostningsværdier ikke må overstige. Hvis en akkumuleret omkostning/afstand overstiger denne værdi, bliver output-værdien for den pågældende celleplacering NoData. Den maksimale afstand definerer udstrækningen, som de akkumulerede omkostningsafstande beregnes for. Standardafstanden er til udstrækningen af output-rasteren.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator, der anvendes på omkostningsværdierne.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Denne parameter gør det muligt at kontrollere rejsemåden eller størrelsen ved en kilde. Jo større multiplikator, jo større omkostning ved at bevæge sig gennem hver celle.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Værdierne skal være større end nul. Standard er 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Path-Distance_Source-Raster_tag0@@": "Den obligatoriske input-raster af kildeplaceringer.",
	"@@Path-Distance_Source-Raster_tag1@@": "Dette er en raster, der identificerer de celler eller placeringer, hvorfra afstanden med de laveste akkumulerede omkostninger beregnes for hver output-celles placering.",
	"@@Path-Distance_Source-Raster_tag2@@": "Det kan være et heltal eller et flydende komma.",
	"@@Path-Distance_Start-Cost_tag0@@": "Startomkostningerne, hvorfra omkostningsberegningerne begynder. Denne parameter gør det muligt at angive de faste omkostninger, der er knyttet til en kilde. I stedet for at starte med en omkostning på 0, begynder omkostningsalgoritmen med den angivne værdi.",
	"@@Path-Distance_Start-Cost_tag1@@": "Værdien skal være nul eller større. Standard er 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "En raster, der definerer højdeværdierne ved hver cellelokation.",
	"@@Path-Distance_Surface-Raster_tag1@@": "Værdierne bruges til at beregne den faktiske overfladedistance, der tilbagelægges, når man flytter mellem cellerne.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Definerer den rejsendes retning, når man anvender kildens resistens-sats og startomkostninger.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>From Source</strong>--Kildens resistens-sats og startomkostninger anvendes fra input-kilden og ud til til ikke-kildecellerne. Dette er standardværdien.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>Source Raster</strong>--Kildens resistens-sats og startomkostninger anvendes fra hver ikke-kildecelle og tilbage til input-kilden.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Angiv enten nøgleordet <strong>From Source</strong> eller <strong>To Source</strong>, som vil blive anvendt på alle kilder, eller angiv et felt i  <strong>Source Raster</strong>, der indeholder nøgleordene til at identificere kørselsretningen for hver kilde. Dette felt skal indeholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Definerer forholdet mellem den lodrette omkostningsfaktor og Vertical Relative Moving Angle (VRMA).</p><p>Der er adskillige faktorer med modifikatorer, der identificerer en defineret lodret faktorgraf. Man kan også bruge en tabel til at oprette en tilpasset graf. Graferne bruges til at identificere den lodrette faktor, der bruges til at beregne den samlede omkostning ved at bevæge sig over i en nabocelle.</p><p>I forklaringerne nedenfor anvendes to forkortelser: VF og VRMA. VF står for vertical factor, som definerer de lodrette problemer, der opstår, når man bevæger sig fra en celle til den næste. VRMA står for vertical relative moving angle, der identificerer hældningsvinklen mellem FROM-cellen, eller behandlingscellen, og TO-cellen.</p><p><strong>Vertikal faktor</strong>-typer omfatter følgende:</p><ul><li><strong>Binær</strong>--Angiver, at hvis VRMA er større end den lavt skårne vinkel og mindre end den højt skårne vinkel, er VF indstillet til den værdi, der er forbundet med nulfaktoren, ellers er den uendelig.</li><li><strong>Lineær</strong>--Indikerer, at VF er en lineær funktion af VRMA.</li><li><strong>Symmetrisk lineær</strong>--Angiver, at VF er en lineær funktion af VRMA i enten den negative eller positive side af VRMA, og de to lineære funktioner er symmetriske med hensyn til VF-aksen (y-aksen).</li><li><strong>Omvendt lineær</strong>--Indikerer, at VF er en omvendt lineær funktion af VRMA.</li><li><strong>Symmetrisk omvendt lineær</strong>--Angiver, at VF er en omvendt lineær funktion af VRMA i enten den negative eller positive side af VRMA, og de to lineære funktioner er symmetriske med hensyn til VF-aksen (y-aksen).</li><li><strong>Cos</strong>--Identificerer VF som den cosinus-baserede funktion af VRMA.</li><li><strong>Sek</strong>--Identificerer VF som den sekant-baserede funktion af VRMA.</li><li><strong>Cos-Sek</strong>--Angiver, at VF er den cosinus-baserede funktion af VRMA, når VRMA er negativ, og den sekant-baserede funktion af cosinus-baserede funktion af VRMA, når VRMA er ikke-negativ.</li><li><strong>Sek-Cos</strong>--Angiver, at VF er den sekant-baserede funktion af VRMA, når VRMA er negativ, og den cosinus-baserede funktion af VRMA, når VRMA er ikke-negativ.</li><li><strong>Tabel</strong>--Identificerer, at der bruges en tabelfil til at definere den vertikal-faktor-graf, der anvendes til at fastslå VF’erne.</li></ul><p>Modifikatorer til de lodrette nøgleord inkluderer følgende:</p><ul><li><strong>Nulfaktor</strong>--Fastslår den lodrette faktor, der anvendes, når VRMA er nul. Denne faktor positionerer y-skæringspunktet for den angivne funktion. Pr. definition kan nulfaktor ikke anvendes på trigonometriske lodrette funktioner (COS, SEK, COS-SEK eller SEK-COS). Y-skæringspunktet er defineret af disse funktioner.</li><li><strong>Lavt skåret vinkel</strong>--Definerer den VRMA-vinkel, under hvilken HF vil blive indstillet til uendelig.</li><li><strong>Højt skåret vinkel</strong>--Definerer den VRMA-vinkel, over hvilken VF vil blive indstillet til uendelig.</li><li><strong>Hældning</strong>--Fastslår hældningen for den lige linje, der bruges med<strong>Lineær</strong>og<strong>Omvendt lineær</strong>lodret-faktor-nøgleord. Hældningen angives som en brøkdel af ”rise over run” (f.eks. svarer en 45 graders hældning til 1/45, der indtastes som 0,02222).</li><li><strong>Tabelnavn</strong>--Identificerer navnet på den tabel, der definerer VF.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Definerer forholdet mellem den lodrette omkostningsfaktor og vertical relative moving angle (VRMA).",
	"@@Path-Distance_Vertical-Raster_tag1@@": "Værdierne anvendes til at beregne den hældning, der bruges til at identificere den lodrette faktor, når man bevæger sig fra en celle til en anden.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Denne parameter simulerer den større indsats for at klare omkostningerne, efterhånden som de akkumulerede omkostninger stiger. Det bruges til at modellere træthed hos rejsende. De voksende akkumulerede omkostninger for at nå en celle ganges med resistens-satsen og lægges til omkostningerne ved at flytte ind i den efterfølgende celle.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Det er en modificeret version af en rentes-rente-formel, der bruges til at beregne de synlige omkostninger ved at bevæge sig gennem en celle. Efterhånden som værdien af ​​resistens-satsen øges, øges omkostningerne for de celler, der besøges senere. Jo større resistens-satsen er, jo højere er omkostningerne ved at nå den næste celle, der tilskrives for hver efterfølgende bevægelse. Da resistens-satsen er magen til en rentes-rente-formel, og de akkumulerede omkostningsværdier generelt er meget store, foreslås små resistens-satser  som 0,005 eller endog mindre, afhængigt af de akkumulerede omkostningsværdier.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af ​​output-rasteren.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Definerer omkostningskapaciteten for den rejsende for en kilde. Omkostningsberegningerne fortsætter for hver kilde, indtil den specificerede kapacitet er nået.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af ​​output-rasteren.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "En obligatorisk input-raster, der definerer omkostninger eller impedans ved at bevæge sig planimetrisk gennem hver celle. Værdien ved hver cellelokation repræsenterer omkostning pr. enhed-afstanden ved at bevæge sig gennem den. Værdien ved hver cellelokation ganges med celleopløsningen, og der kompenseres også for diagonal bevægelse for at få de samlede omkostninger ved at bevæge sig gennem cellen.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "Værdierne i <strong>Cost Raster</strong> kan være heltal eller flydende komma, men de kan ikke være negative eller nul.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Definerer forholdet mellem den vandrette omkostningsfaktor og Horizontal Relative Moving Angle (HRMA).</p><p>Der er adskillige faktorer med modifikatorer, der identificerer en defineret lodret faktorgraf. Man kan også bruge en tabel til at oprette en tilpasset graf. Graferne bruges til at identificere den lodrette faktor, der bruges til at beregne den samlede omkostning ved at bevæge sig over i en nabocelle.</p><p>I forklaringerne nedenfor anvendes to forkortelser: HF og HRMA. HF står for horizontal factor, som definerer de vandrette problemer, der opstår, når man bevæger sig fra en celle til den næste. HRMA står for Horizontal Relative Moving Angle, som identificerer vinklen mellem den vandrette retning fra en celle og bevægelsesretningen.</p><p><strong>Horisontale faktor</strong>-typer omfatter følgende:</p><ul><li><strong>Binær</strong>--Indikerer, at hvis HRMA er mindre end den skårne vinkel, er HF indstillet til den værdi, der er forbundet med nulfaktoren, ellers er den uendelig.</li><li><strong>Frem</strong>--Fastslår, at kun fremadrettede bevægelser er tilladt. HRMA skal være større end eller lig med 0 og mindre end 90 grader (0 &lt;= HRMA &lt; 90). Hvis HRMA er større end 0 og mindre end 45 grader, er HF for cellen indstillet til den værdi, der er forbundet med nulfaktoren. Hvis HRMA er større end eller lig med 45 grader, anvendes modifikatorværdien for sideværdien. HF for HRMA-værdier, der er lig med eller større end 90 grader, er indstillet til uendelig.</li><li><strong>Lineær</strong>--Angiver, at HF er en lineær funktion af HRMA.</li><li><strong>Omvendt lineær</strong>--Angiver, at HF er en omvendt lineær funktion af HRMA.</li><li><strong>Tabel</strong>--Angiver, at en tabelfil vil blive brugt til at definere den vandrette faktorgraf, der anvendes til at fastslå HF'erne.</li></ul><p>Modifikatorer til de vandrette faktorer inkluderer følgende:</p><ul><li><strong>Nulfaktor</strong>--Den vandrette faktor, der anvendes, når HRMA er nul. Denne faktor positionerer y-skæringspunktet for funktionerne for den vandrette faktor.</li><li><strong>Skæringsvinkel</strong>--Definerer den HRMA-vinkel, over hvilken HF vil blive indstillet til uendelig.</li><li><strong>Hældning</strong>--Fastslår hældningen for den lige linje, der bruges med<strong>Lineær</strong>og<strong>Omvendt lineær</strong>vandrette faktornøgleord. Hældningen angives som en brøkdel af ”rise over run” (f.eks. svarer en 45 graders hældning til 1/45, der indtastes som 0,02222).</li><li><strong>Sideværdi</strong>--Fastslår HF, når HRMA er større end eller lig med 45 grader og mindre end 90 grader, når<strong>Frem</strong>nøgleordet for den vandrette faktor er angivet.</li><li><strong>Tabelnavn</strong>--Identificerer navnet på den tabel, der definerer HF.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "En raster, der definerer den vandrette retning i hver celle.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "Værdierne på rasteren skal være heltal i intervallet mellem 0 og 360, hvor 0 grader er nord, eller mod toppen af skærmen, og stigende med uret. Flade områder bør have værdien -1. Værdierne på hvert sted bliver brugt i forbindelse med <strong>Horizontal factor</strong> til at bestemme den vandrette omkostning ved at flytte sig fra én celle til en nabocelle.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "Den tærskel, som de akkumulerede omkostningsværdier ikke må overstige. Hvis en akkumuleret omkostning/afstand overstiger denne værdi, bliver output-værdien for den pågældende celleplacering NoData. Den maksimale afstand definerer udstrækningen, som de akkumulerede omkostningsafstande beregnes for. Standardafstanden er til udstrækningen af output-rasteren.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator, der anvendes på omkostningsværdierne.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Denne parameter gør det muligt at kontrollere rejsemåden eller størrelsen ved en kilde. Jo større multiplikator, jo større omkostning ved at bevæge sig gennem hver celle.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Værdierne skal være større end nul. Standard er 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "Det felt, der bruges til at tildele værdier til kildeplaceringerne. Det skal være en heltalstype. Hvis <strong>værdirasteren</strong> er angivet, får værdierne i dette input forrang for enhver indstilling for <strong>kildefeltet</strong>.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "Den obligatoriske input-raster af kildeplaceringer.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Dette er en raster, der identificerer de celler eller placeringer, hvorfra afstanden med de laveste akkumulerede omkostninger beregnes for hver output-celles placering.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Det kan være et heltal eller et flydende komma.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "Startomkostningerne, hvorfra omkostningsberegningerne begynder. Denne parameter gør det muligt at angive de faste omkostninger, der er knyttet til en kilde. I stedet for at starte med en omkostning på 0, begynder omkostningsalgoritmen med den angivne værdi.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "Værdien skal være nul eller større. Standard er 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "En raster, der definerer højdeværdierne ved hver cellelokation.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "Værdierne bruges til at beregne den faktiske overfladedistance, der tilbagelægges, når man flytter mellem cellerne.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Definerer den rejsendes retning, når man anvender kildens resistens-sats og startomkostninger.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>From Source</strong>--Kildens resistens-sats og startomkostninger anvendes fra input-kilden og ud til til ikke-kildecellerne. Dette er standardværdien.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>To Source</strong>--Kildens resistens-sats og startomkostninger anvendes fra hver ikke-kildecelle og tilbage til input-kilden.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Angiv enten nøgleordet <strong>From Source</strong> eller <strong>To Source</strong>, som vil blive anvendt på alle kilder, eller angiv et felt i  <strong>Source Raster</strong>, der indeholder nøgleordene til at identificere kørselsretningen for hver kilde. Dette felt skal indeholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "Input-heltalsrasteren, der identificerer de zoneværdier, som skal bruges til hver enkelt input-kildeplacering. For hver kildeplaceringscelle bliver den værdi, der er defineret af <strong>Value Raster</strong>, tildelt alle celler, der er tildelt kildeplaceringen til beregningen. <strong>Value Raster</strong> får forrang over enhver indstilling for <strong>Source Field</strong>.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Definerer forholdet mellem den lodrette omkostningsfaktor og Vertical Relative Moving Angle (VRMA).</p><p>Der er adskillige faktorer med modifikatorer, der identificerer en defineret lodret faktorgraf. Man kan også bruge en tabel til at oprette en tilpasset graf. Graferne bruges til at identificere den lodrette faktor, der bruges til at beregne den samlede omkostning ved at bevæge sig over i en nabocelle.</p><p>I forklaringerne nedenfor anvendes to forkortelser: VF og VRMA. VF står for vertical factor, som definerer de lodrette problemer, der opstår, når man bevæger sig fra en celle til den næste. VRMA står for vertical relative moving angle, der identificerer hældningsvinklen mellem FROM-cellen, eller behandlingscellen, og TO-cellen.</p><p><strong>Vertikal faktor</strong>-typer omfatter følgende:</p><ul><li><strong>Binær</strong>--Angiver, at hvis VRMA er større end den lavt skårne vinkel og mindre end den højt skårne vinkel, er VF indstillet til den værdi, der er forbundet med nulfaktoren, ellers er den uendelig.</li><li><strong>Lineær</strong>--Indikerer, at VF er en lineær funktion af VRMA.</li><li><strong>Symmetrisk lineær</strong>--Angiver, at VF er en lineær funktion af VRMA i enten den negative eller positive side af VRMA, og de to lineære funktioner er symmetriske med hensyn til VF-aksen (y-aksen).</li><li><strong>Omvendt lineær</strong>--Indikerer, at VF er en omvendt lineær funktion af VRMA.</li><li><strong>Symmetrisk omvendt lineær</strong>--Angiver, at VF er en omvendt lineær funktion af VRMA i enten den negative eller positive side af VRMA, og de to lineære funktioner er symmetriske med hensyn til VF-aksen (y-aksen).</li><li><strong>Cos</strong>--Identificerer VF som den cosinus-baserede funktion af VRMA.</li><li><strong>Sek</strong>--Identificerer VF som den sekant-baserede funktion af VRMA.</li><li><strong>Cos-Sek</strong>--Angiver, at VF er den cosinus-baserede funktion af VRMA, når VRMA er negativ, og den sekant-baserede funktion af cosinus-baserede funktion af VRMA, når VRMA er ikke-negativ.</li><li><strong>Sek-Cos</strong>--Angiver, at VF er den sekant-baserede funktion af VRMA, når VRMA er negativ, og den cosinus-baserede funktion af VRMA, når VRMA er ikke-negativ.</li><li><strong>Tabel</strong>--Identificerer, at der bruges en tabelfil til at definere den vertikal-faktor-graf, der anvendes til at fastslå VF’erne.</li></ul><p>Modifikatorer til de lodrette nøgleord inkluderer følgende:</p><ul><li><strong>Nulfaktor</strong>--Fastslår den lodrette faktor, der anvendes, når VRMA er nul. Denne faktor positionerer y-skæringspunktet for den angivne funktion. Pr. definition kan nulfaktor ikke anvendes på trigonometriske lodrette funktioner (COS, SEK, COS-SEK eller SEK-COS). Y-skæringspunktet er defineret af disse funktioner.</li><li><strong>Lavt skåret vinkel</strong>--Definerer den VRMA-vinkel, under hvilken HF vil blive indstillet til uendelig.</li><li><strong>Højt skåret vinkel</strong>--Definerer den VRMA-vinkel, over hvilken VF vil blive indstillet til uendelig.</li><li><strong>Hældning</strong>--Fastslår hældningen for den lige linje, der bruges med<strong>Lineær</strong>og<strong>Omvendt lineær</strong>lodret-faktor-nøgleord. Hældningen angives som en brøkdel af ”rise over run” (f.eks. svarer en 45 graders hældning til 1/45, der indtastes som 0,02222).</li><li><strong>Tabelnavn</strong>--Identificerer navnet på den tabel, der definerer VF.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Definerer forholdet mellem den lodrette omkostningsfaktor og vertical relative moving angle (VRMA).",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "Værdierne anvendes til at beregne den hældning, der bruges til at identificere den lodrette faktor, når man bevæger sig fra en celle til en anden.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Denne parameter simulerer den større indsats for at klare omkostningerne, efterhånden som de akkumulerede omkostninger stiger. Det bruges til at modellere træthed hos rejsende. De voksende akkumulerede omkostninger for at nå en celle ganges med resistens-satsen og lægges til omkostningerne ved at flytte ind i den efterfølgende celle.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Det er en modificeret version af en rentes-rente-formel, der bruges til at beregne de synlige omkostninger ved at bevæge sig gennem en celle. Efterhånden som værdien af ​​resistens-satsen øges, øges omkostningerne for de celler, der besøges senere. Jo større resistens-satsen er, jo højere er omkostningerne ved at nå den næste celle, der tilskrives for hver efterfølgende bevægelse. Da resistens-satsen er magen til en rentes-rente-formel, og de akkumulerede omkostningsværdier generelt er meget store, foreslås små resistens-satser  som 0,005 eller endog mindre, afhængigt af de akkumulerede omkostningsværdier.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af ​​output-rasteren.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Definerer omkostningskapaciteten for den rejsende for en kilde. Omkostningsberegningerne fortsætter for hver kilde, indtil den specificerede kapacitet er nået.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af ​​output-rasteren.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "En obligatorisk input-raster, der definerer omkostninger eller impedans ved at bevæge sig planimetrisk gennem hver celle. Værdien ved hver cellelokation repræsenterer omkostning pr. enhed-afstanden ved at bevæge sig gennem den. Værdien ved hver cellelokation ganges med celleopløsningen, og der kompenseres også for diagonal bevægelse for at få de samlede omkostninger ved at bevæge sig gennem cellen.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "Værdierne i <strong>Cost Raster</strong> kan være heltal eller flydende komma, men de kan ikke være negative eller nul.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Definerer forholdet mellem den vandrette omkostningsfaktor og Horizontal Relative Moving Angle (HRMA).</p><p>Der er adskillige faktorer med modifikatorer, der identificerer en defineret lodret faktorgraf. Man kan også bruge en tabel til at oprette en tilpasset graf. Graferne bruges til at identificere den lodrette faktor, der bruges til at beregne den samlede omkostning ved at bevæge sig over i en nabocelle.</p><p>I forklaringerne nedenfor anvendes to forkortelser: HF og HRMA. HF står for horizontal factor, som definerer de vandrette problemer, der opstår, når man bevæger sig fra en celle til den næste. HRMA står for Horizontal Relative Moving Angle, som identificerer vinklen mellem den vandrette retning fra en celle og bevægelsesretningen.</p><p><strong>Horisontale faktor</strong>-typer omfatter følgende:</p><ul><li><strong>Binær</strong>--Indikerer, at hvis HRMA er mindre end den skårne vinkel, er HF indstillet til den værdi, der er forbundet med nulfaktoren, ellers er den uendelig.</li><li><strong>Frem</strong>--Fastslår, at kun fremadrettede bevægelser er tilladt. HRMA skal være større end eller lig med 0 og mindre end 90 grader (0 &lt;= HRMA &lt; 90). Hvis HRMA er større end 0 og mindre end 45 grader, er HF for cellen indstillet til den værdi, der er forbundet med nulfaktoren. Hvis HRMA er større end eller lig med 45 grader, anvendes modifikatorværdien for sideværdien. HF for HRMA-værdier, der er lig med eller større end 90 grader, er indstillet til uendelig.</li><li><strong>Lineær</strong>--Angiver, at HF er en lineær funktion af HRMA.</li><li><strong>Omvendt lineær</strong>--Angiver, at HF er en omvendt lineær funktion af HRMA.</li><li><strong>Tabel</strong>--Angiver, at en tabelfil vil blive brugt til at definere den vandrette faktorgraf, der anvendes til at fastslå HF'erne.</li></ul><p>Modifikatorer til de vandrette faktorer inkluderer følgende:</p><ul><li><strong>Nulfaktor</strong>--Den vandrette faktor, der anvendes, når HRMA er nul. Denne faktor positionerer y-skæringspunktet for funktionerne for den vandrette faktor.</li><li><strong>Skæringsvinkel</strong>--Definerer den HRMA-vinkel, over hvilken HF vil blive indstillet til uendelig.</li><li><strong>Hældning</strong>--Fastslår hældningen for den lige linje, der bruges med<strong>Lineær</strong>og<strong>Omvendt lineær</strong>vandrette faktornøgleord. Hældningen angives som en brøkdel af ”rise over run” (f.eks. svarer en 45 graders hældning til 1/45, der indtastes som 0,02222).</li><li><strong>Sideværdi</strong>--Fastslår HF, når HRMA er større end eller lig med 45 grader og mindre end 90 grader, når<strong>Frem</strong>nøgleordet for den vandrette faktor er angivet.</li><li><strong>Tabelnavn</strong>--Identificerer navnet på den tabel, der definerer HF.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "En raster, der definerer den vandrette retning i hver celle.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "Værdierne på rasteren skal være heltal i intervallet mellem 0 og 360, hvor 0 grader er nord, eller mod toppen af skærmen, og stigende med uret. Flade områder bør have værdien -1. Værdierne på hvert sted bliver brugt i forbindelse med <strong>Horizontal factor</strong> til at bestemme den vandrette omkostning ved at flytte sig fra én celle til en nabocelle.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "Den tærskel, som de akkumulerede omkostningsværdier ikke må overstige. Hvis en akkumuleret omkostning/afstand overstiger denne værdi, bliver output-værdien for den pågældende celleplacering NoData. Den maksimale afstand definerer udstrækningen, som de akkumulerede omkostningsafstande beregnes for. Standardafstanden er til udstrækningen af output-rasteren.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator, der anvendes på omkostningsværdierne.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Denne parameter gør det muligt at kontrollere rejsemåden eller størrelsen ved en kilde. Jo større multiplikator, jo større omkostning ved at bevæge sig gennem hver celle.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Værdierne skal være større end nul. Standard er 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "Den obligatoriske input-raster af kildeplaceringer.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Dette er en raster, der identificerer de celler eller placeringer, hvorfra afstanden med de laveste akkumulerede omkostninger beregnes for hver output-celles placering.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Det kan være et heltal eller et flydende komma.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "Startomkostningerne, hvorfra omkostningsberegningerne begynder. Denne parameter gør det muligt at angive de faste omkostninger, der er knyttet til en kilde. I stedet for at starte med en omkostning på 0, begynder omkostningsalgoritmen med den angivne værdi.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "Værdien skal være nul eller større. Standard er 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "En raster, der definerer højdeværdierne ved hver cellelokation.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "Værdierne bruges til at beregne den faktiske overfladedistance, der tilbagelægges, når man flytter mellem cellerne.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Definerer den rejsendes retning, når man anvender kildens resistens-sats og startomkostninger.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>From Source</strong>--Kildens resistens-sats og startomkostninger anvendes fra input-kilden og ud til til ikke-kildecellerne. Dette er standardværdien.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>To Source</strong>--Kildens resistens-sats og startomkostninger anvendes fra hver ikke-kildecelle og tilbage til input-kilden.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Angiv enten nøgleordet <strong>From Source</strong> eller <strong>To Source</strong>, som vil blive anvendt på alle kilder, eller angiv et felt i  <strong>Source Raster</strong>, der indeholder nøgleordene til at identificere kørselsretningen for hver kilde. Dette felt skal indeholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Definerer forholdet mellem den lodrette omkostningsfaktor og Vertical Relative Moving Angle (VRMA).</p><p>Der er adskillige faktorer med modifikatorer, der identificerer en defineret lodret faktorgraf. Man kan også bruge en tabel til at oprette en tilpasset graf. Graferne bruges til at identificere den lodrette faktor, der bruges til at beregne den samlede omkostning ved at bevæge sig over i en nabocelle.</p><p>I forklaringerne nedenfor anvendes to forkortelser: VF og VRMA. VF står for vertical factor, som definerer de lodrette problemer, der opstår, når man bevæger sig fra en celle til den næste. VRMA står for vertical relative moving angle, der identificerer hældningsvinklen mellem FROM-cellen, eller behandlingscellen, og TO-cellen.</p><p><strong>Vertikal faktor</strong>-typer omfatter følgende:</p><ul><li><strong>Binær</strong>--Angiver, at hvis VRMA er større end den lavt skårne vinkel og mindre end den højt skårne vinkel, er VF indstillet til den værdi, der er forbundet med nulfaktoren, ellers er den uendelig.</li><li><strong>Lineær</strong>--Indikerer, at VF er en lineær funktion af VRMA.</li><li><strong>Symmetrisk lineær</strong>--Angiver, at VF er en lineær funktion af VRMA i enten den negative eller positive side af VRMA, og de to lineære funktioner er symmetriske med hensyn til VF-aksen (y-aksen).</li><li><strong>Omvendt lineær</strong>--Indikerer, at VF er en omvendt lineær funktion af VRMA.</li><li><strong>Symmetrisk omvendt lineær</strong>--Angiver, at VF er en omvendt lineær funktion af VRMA i enten den negative eller positive side af VRMA, og de to lineære funktioner er symmetriske med hensyn til VF-aksen (y-aksen).</li><li><strong>Cos</strong>--Identificerer VF som den cosinus-baserede funktion af VRMA.</li><li><strong>Sek</strong>--Identificerer VF som den sekant-baserede funktion af VRMA.</li><li><strong>Cos-Sek</strong>--Angiver, at VF er den cosinus-baserede funktion af VRMA, når VRMA er negativ, og den sekant-baserede funktion af cosinus-baserede funktion af VRMA, når VRMA er ikke-negativ.</li><li><strong>Sek-Cos</strong>--Angiver, at VF er den sekant-baserede funktion af VRMA, når VRMA er negativ, og den cosinus-baserede funktion af VRMA, når VRMA er ikke-negativ.</li><li><strong>Tabel</strong>--Identificerer, at der bruges en tabelfil til at definere den vertikal-faktor-graf, der anvendes til at fastslå VF’erne.</li></ul><p>Modifikatorer til de lodrette nøgleord inkluderer følgende:</p><ul><li><strong>Nulfaktor</strong>--Fastslår den lodrette faktor, der anvendes, når VRMA er nul. Denne faktor positionerer y-skæringspunktet for den angivne funktion. Pr. definition kan nulfaktor ikke anvendes på trigonometriske lodrette funktioner (COS, SEK, COS-SEK eller SEK-COS). Y-skæringspunktet er defineret af disse funktioner.</li><li><strong>Lavt skåret vinkel</strong>--Definerer den VRMA-vinkel, under hvilken HF vil blive indstillet til uendelig.</li><li><strong>Højt skåret vinkel</strong>--Definerer den VRMA-vinkel, over hvilken VF vil blive indstillet til uendelig.</li><li><strong>Hældning</strong>--Fastslår hældningen for den lige linje, der bruges med<strong>Lineær</strong>og<strong>Omvendt lineær</strong>lodret-faktor-nøgleord. Hældningen angives som en brøkdel af ”rise over run” (f.eks. svarer en 45 graders hældning til 1/45, der indtastes som 0,02222).</li><li><strong>Tabelnavn</strong>--Identificerer navnet på den tabel, der definerer VF.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Definerer forholdet mellem den lodrette omkostningsfaktor og vertical relative moving angle (VRMA).",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "Værdierne anvendes til at beregne den hældning, der bruges til at identificere den lodrette faktor, når man bevæger sig fra en celle til en anden.",
	"@@Plus_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Plus_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Plus_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Plus_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Plus_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Plus_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Plus_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Plus_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Plus_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Plus_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Plus_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Plus_Raster_tag0@@": "Input, hvis værdier der tilføjes.",
	"@@Plus_Raster_tag1@@": "En konstant værdi kan bruges som input til denne parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Plus_Raster2_tag0@@": "Inputtet, hvis værdier tilføjes det første input.",
	"@@Plus_Raster2_tag1@@": "En konstant værdi kan bruges som input til denne parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Local_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Local_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Local_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Local_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Local_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Local_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Local_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Local_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Local_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Local_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Local_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Local_Raster_tag0@@": "Input, hvis værdier der tilføjes.",
	"@@Local_Raster_tag1@@": "En konstant værdi kan bruges som input til denne parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Local_Raster2_tag0@@": "Inputtet, hvis værdier tilføjes det første input.",
	"@@Local_Raster2_tag1@@": "En konstant værdi kan bruges som input til denne parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Local_False-Raster_tag0@@": "Det input, hvis værdier vil blive brugt som output-pixelværdier, hvis betingelsen er falsk. Det kan være et heltal, en raster med flydende komma eller en konstant værdi.",
	"@@Local_True-Raster_tag0@@": "Det input, hvis værdier vil blive brugt som output-pixelværdier, hvis betingelsen er sand. Det kan være et heltal, en raster med flydende komma eller en konstant værdi.",
	"@@Power_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Power_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Power_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Power_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Power_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Power_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Power_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Power_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Power_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Power_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Power_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Power_Raster_tag0@@": "De input-værdier, der skal hæves til potensen defineret af <strong>Raster2</strong>.",
	"@@Power_Raster_tag3@@": "En konstant værdi kan bruges som input til denne parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Power_Raster2_tag0@@": "Det input, der bestemmer den potens, til hvilken værdierne af <strong>Raster</strong> opløftes.",
	"@@Power_Raster2_tag3@@": "En konstant værdi kan bruges som input til denne parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "Den type kalibrering, der skal udføres.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Beta-nought--Funktionen returnerer radarrefleksionen pr. enhedsområde i skråintervallet. Dette er standard kalibreringstypen.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Beta-nought--Funktionen returnerer radarrefleksionen pr. enhedsområde i grundintervallet. Resultaterne er 32-bit-værdier med flydende komma, som oftest ligger i intervallet fra 0,0 til 1,0. Der udføres intet dataklip, hvis denne indstilling er valgt.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gamma--Funktionen returnerer radarrefleksionen pr. enhedsområde i planet vinkelret på retningen for målingen.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Ingen",
	"@@Radar-Calibration_Raster_tag0@@": "Input-rasteren.",
	"@@RasterInfo_Raster-Info_tag0@@": "Vælg et rasterdatasæt, der skal bruges som skabelon",
	"@@RasterInfo_Raster_tag0@@": "Input-rasteren.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "En liste over felter i <strong>Zonal Attributes Table</strong>, hvor hvert felt er adskilt af et komma. Værdien i hvert felt vil blive repræsenteret af et bånd i output-rasteren.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "Den oprindelige pixelværdi af output-båndene i en raster, før den genberegnes.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Hvis en pixel ikke falder inden for en zone, vil den fortsat udgøre baggrundsværdien.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "Den påkrævede Input-raster.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "Input bør være en enkeltbåndsraster. Hvis der anvendes en flerbåndsraster, bruges kun det første bånd.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "En valgfri yderligere forespørgsel, der anvendes på <strong>Zonal Attributes Table</strong>.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "Hvis du anvendte ovenstående tabel som eksempel, vil forespørgslen være ${Variable1 = 'bare earth'}.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "Zoneattributterne angivet som en sti til en lokal objektklasse, stien til en tabel, URL til et objektservicelag eller en JSON-streng.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "I JSON er det beskrevet som en samling af kortlægninger fra zone-ID'er til en række heltal. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "Feltnavnet, der indeholder zone-ID-værdierne.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "En valgfri enkeltbåndsraster, hvor hver pixel indeholder det zone-ID, der er forbundet med placeringen. Zone-ID bruges til at søge i rækker i zoneattributtabellen for zonespecifik behandling.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Angiv ikke denne parameter, hvis du kun ønsker at importere attributten.",
	"@@Rasterize-Features_Field_tag0@@": "Vælg det felt, der skal bruges til at identificere hvert objekt.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Vælg den objektklasse, der skal konverteres til raster-format.",
	"@@Rasterize-Features_Raster_tag0@@": "Vælge en raster for at definere cellestørrelsen og -omfanget for objektkonverteringen.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Bestem, hvordan overlappende objekter skal administreres:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>First</strong>--De overlappende områder vil få tildelt en værdi fra det første datasæt, som er angivet.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Last</strong>--De overlappende områder vil få tildelt en værdi fra det sidste datasæt, som er angivet.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Smallest</strong>--De overlappende områder vil få tildelt en værdi fra de mindste objekter.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Largest</strong>--De overlappende områder vil få tildelt en værdi fra de største objekter.",
	"@@Recast_Overrides_tag0@@": "En tabel med variabelnavne og brugerdefinerede værdier, der bruges til at ændre et mosaik-datasæt.",
	"@@Recast_Raster_tag0@@": "Rasterproduktet, hvorpå funktionen Omarbejd anvendes.",
	"@@Region-Group_Add-Link_tag0@@": "Angiver, hvorvidt et linkfelt tilføjes output-tabellen.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Add Link</strong>--Et ${LINK}-element vil blive tilføjet tabellen for output-rasteren.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>No Link</strong>--Attributtabellen for output-rasteren vil kun indeholde elementerne ${Value} og ${Count}.",
	"@@Region-Group_Excluded-Value_tag0@@": "Identificerer en værdi, og hvis en celleplacering indeholder værdien, vil den rumlige forbindelse ikke blive evalueret, uanset hvordan antallet af tilstødende værdier er angivet (FIRE eller OTTE).",
	"@@Region-Group_Excluded-Value_tag1@@": "Celler med den udelukkede værdi behandles som NoData og fjernes fra beregningerne. De celleplaceringer, der indeholde den udelukkede værdi, vil få et 0 på output-rasteren.",
	"@@Region-Group_Excluded-Value_tag2@@": "Den udelukkede værdi svarer til konceptet med en baggrundsværdi eller til at få en maske benyttet. Der skal være angivet en værdi for denne parameter, hvis parameteren <strong>${CROSS}</strong> er angivet.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "Antallet af naboceller, der skal bruges til at evaluere forbindelsen mellem cellerne.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>FOUR</strong>--Definerer kun forbindelsen mellem celler med samme værdi, hvis cellerne ligger direkte til venstre for, til højre for, over eller under hver af de fire nærmeste naboceller. Dette er standardværdien.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>EIGHT</strong>--Definerer forbindelsen mellem celler med samme værdi, hvis de ligger umiddelbart inden for otte naboceller fra hinanden. Det inkluderer til højre, til venstre, over eller diagonalt for hinanden.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Definerer, hvilke celleværdier, der skal tages i betragtning, når forbindelsen testes.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>WITHIN</strong>--Tester forbindelsen mellem input-værdier, der er ens inden for samme zone. Dette er standardværdien.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "De eneste celler, der kan grupperes, er celler fra samme zone (værdi), der opfylder de rumlige forbindelseskrav, som er angivet ved parameteren (firevejs eller ottevejs) <strong>Number of neighbors</strong>.",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>CROSS</strong>--Tester forbindelsen ved de rumlige krav, der er angivet ved antallet af naboparametre mellem cellerne med værdier, undtagen den værdi, der er bestemt til at skulle udelukkes af den udelukkede værdiparameter.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "Hvis denne indstilling anvendes, skal der angives en værdi for parameteren <strong>Excluded value</strong>.",
	"@@Region-Group_Zone-Raster_tag0@@": "Den påkrævede input-raster, hvis unikke forbundne områder vil blive identificeret.",
	"@@Region-Group_Zone-Raster_tag1@@": "Det skal være en heltalstype.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "Det felt i attributtabellen, der definerer fyldværdien for gruppen af pixels. I et flerbåndsbillede vil alle bånd være tildelt denne værdi.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "Feltet i attributtabellen, der definerer den maksimale vækstradius, i billedets rumlige referenceenheder.",
	"@@Region-Grow_Raster_tag0@@": "Den raster, som du vil udføre denne funktion på.",
	"@@Region-Grow_Seed-Points_tag0@@": "En punktobjektklasse, der fungerer som det oprindelige seed for algoritmen. Hvert seed-punkt svarer til en post i attributtabellen, som overfører information om den maksimale vækstradius, tærskel for lighed og fyldværdi.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "Det felt i attributtabellen, der definerer tærsklen for lighed som den euklidiske afstand i det spektrale rum.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Manglende værdier i omklassificeringstabellen kan bevare deres værdi eller genberegnes til NoData.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Ikke-markeret--Enhver pixel fra input-rasteren, der ikke omklassificeres i en genberegningstabel, bevarer sin værdi og skrives for sin placering til output-rasteren. Dette er standardværdien.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Markeret--Enhver pixel fra input-rasteren, der ikke omklassificeres i en genberegningstabel, vil få sin værdi genberegnet til NoData for sin placering til output-rasteren.",
	"@@Remap_Input-Field_tag0@@": "Vælg det felt, der angiver den input-pixelværdi, som skal genberegnes.",
	"@@Remap_Input-Field_tag1@@": "Hvis din tabel har et værdiinterval, vil dette være minimumværdifeltet, og parameteren <strong>Input Max Field</strong> skal ligeledes angives.",
	"@@Remap_Input-Max-Field_tag0@@": "Vælg maksimumværdifeltet, hvis din tabel angiver et værdiinterval.",
	"@@Remap_List_tag0@@": "Angiv kortværdierne og minimum- og maksimumværdiintervallet samt de nye genberegningsværdier. Desuden kan værdiintervallet indstilles til NoData-pixels.",
	"@@Remap_Output-Field_tag0@@": "Vælg det felt, der skal bruges som genberegnet output-felt.",
	"@@Remap_Raster_tag0@@": "Input-rasteren.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Vælg den indstilling, du ønsker at bruge til at indstille genberegningsværdierne:",
	"@@Remap_Remap-Definition-Type_tag1@@": "Liste--Angiv et interval med pixel-værdier, der skal \"mappes\" til en output-pixelværdi.",
	"@@Remap_Remap-Table-Type_tag0@@": "Vælg den type tabel, du vil bruge til at genberegne din input-raster:",
	"@@Remap_Remap-Table-Type_tag1@@": "Simple--Bruger  <strong>Remap Table</strong>-input til at genberegne pixelværdierne for <strong>Input Field</strong> til den tilsvarende værdi i parameteren <strong>Output Field</strong>. Denne metode cachelagrer genberegningstabellen, så den bliver hurtigere.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dynamisk--Denne metode cachelagrer ikke genberegningstabellen og sender en forespørgsel hver gang der kommer en forespørgsel (panorer, zoom eller opdater). Hvis tabellen ændres, kan den næste forespørgsel lave en tilsvarende dynamisk genberegning af værdierne.",
	"@@Remap_Remap-Table-Type_tag9@@": "Gentildeling--En bestemt tabel, der bruges til omklassificeringsprocessen, hvor hver række i tabellen kun genberegnes på grundlag af hver objektgrænse.",
	"@@Remap_Remap-Table_tag0@@": "Gå til den tabel, der indstiller dine genberegningsværdier.",
	"@@Reproject_Raster_tag0@@": "Det raster-datasæt, der skal genprojiceres eller resamples.",
	"@@Reproject_Spatial-Reference_tag0@@": "Det koordinatsystem, der skal bruges til at genprojicere dataene.",
	"@@Reproject_X-Cellsize_tag0@@": "Den x-dimension, som dataene skal resamples til. Dette er valgfrit. Hvis værdien er 0 eller lavere, beregnes output-envelope (omfang og cellestørrelser) fra input-rasteren.",
	"@@Reproject_X-Registration-Point_tag0@@": "Den x-koordinat, der bruges til at definere øverste venstre hjørne af datasættet. Denne koordinat skal defineres i enhederne for den nye rumlige reference. Hvis både parametrene <strong>X Cellsize</strong> og  <strong>Y Cellsize</strong> er større end 0, bruges de sammen med parametrene <strong>X Registration Point</strong> og <strong>Y Registration Point</strong> til at definere output-envelope.",
	"@@Reproject_Y-Cellsize_tag0@@": "Den y-dimension, som dataene skal resamples til. Dette er valgfrit. Hvis værdien er 0 eller lavere, beregnes output-envelope (omfang og cellestørrelser) fra input-rasteren.",
	"@@Reproject_Y-Registration-Point_tag0@@": "Den y-koordinat, der bruges til at definere øverste venstre hjørne af datasættet. Denne koordinat skal defineres i enhederne for den nye rumlige reference. Hvis både parametrene <strong>X Cellsize</strong> og  <strong>Y Cellsize</strong> er større end 0, bruges de sammen med parametrene <strong>X Registration Point</strong> og <strong>Y Registration Point</strong> til at definere output-envelope.",
	"@@Resample_Input-Cellsize_tag0@@": "Pixelcellestørrelse i input-rasteren.",
	"@@Resample_Output-Cellsize_tag0@@": "Pixelcellestørrelse i output-rasteren. Cellestørrelsen kan ændres, men udstrækningen af raster-datasættet forbliver den samme. Resampling fra en brugerdefineret cellestørrelse kan være meget langsommere end systemstandarden, da standard-resampling behandler den minimale mængde data fra den nærmest mulige opløsning.",
	"@@Resample_Raster_tag0@@": "Input-rasteren, der skal resamples.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>Nearest Neighbor</strong>--Beregner output-pixelværdien ved hjælp af den nærmeste input-pixel. NoData-pixels forbliver uændrede i datasættet for output-raster. Dette er standardværdien.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Bilinear Interpolation</strong>--Beregner pixelværdien ved hjælp af den afstandsvægtede værdi af de fire nærmeste pixels. Dette er en effektiv beregningsmetode.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Cubic Convolution</strong>--Bestemmer en pixels nye værdi ved at tilpasse en jævn kurve gennem de 16 nærmeste input-pixelcentre.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Majority</strong>--Beregner pixelværdien ved hjælp af majoritetspixelværdien i de 16 nærmeste pixels. NoData-pixels forbliver uændrede i datasættet for output-raster.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Bilinear Interpolation Plus</strong>--Bruger <strong>Bilinear Interpolation</strong>, men pixels langs kanterne er defineret som NoData og bliver hverken replikeret eller taget med i beregningen. Brug <strong>Bilinear Interpolation Plus</strong> til tile-data, da kanterne passer bedre.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Gauss Blur</strong>--Anvender en Gaussisk konvolution til kilderasteren og beregner pixelværdien ved hjælp af den afstandsvægtede værdi af de fire nærmeste pixels fra den slørede raster. Det er velegnet til at fjerne støj i resamplede data og til at down-sample til en større pixelstørrelse.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Gauss Blur Plus</strong>--Bruger den samme metode som  <strong>Gauss Blur</strong>,  men pixels langs kanterne er defineret som NoData og bliver hverken replikeret eller taget med i beregningen. Brug <strong>Gauss Blur Plus</strong> til tile-data, da kanterne passer bedre.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Average</strong>--Beregner pixelværdier ved hjælp af gennemsnitsværdien i alle overlappende pixels for hver målpixel.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Minimum</strong>--Beregner pixelværdien ved hjælp af minimumsværdien i alle overlappende pixels. NoData-pixels forbliver uændrede i datasættet for output-raster.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Maximum</strong>--Er velegnet til kontinuerlige data, giver et bedre output-billede end metoden for resampling af nærmeste nabo.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Vector Average</strong>--Beregner vektorgennemsnittet af størrelse-retning ved hjælp af alle involverede pixels. Denne metode anvendes kun til tobånds-rastere, der repræsenterer størrelse og retning. Først konverterer den størrelse-retning til U-V, og derefter tager den det aritmetiske gennemsnit på tværs af alle involverede pixels for at få U-V for målpixlen og konverterer den tilbage størrelse-retning.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Round-Down_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Round-Down_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Round-Down_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Round-Down_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Round-Down_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Round-Down_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Round-Down_Raster_tag0@@": "De input-værdier, der skal rundes ned.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Round-Up_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Round-Up_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Round-Up_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Round-Up_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Round-Up_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Round-Up_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Round-Up_Raster_tag0@@": "De input-værdier, der skal rundes op.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "Mindste segmentstørrelse målt i pixels. Værdien har relation til din mindste kortlægningsenhed og filtrerer mindre blokke af pixels ud. Alle segmenter, der er mindre end den angivne værdi, vil flette de mindre segmenter med deres bedste passende nabosegment.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "Input-rasteren, der skal segmenteres.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "Segmentgrænserne tegnes som en sort konturlinje omkring hvert segment. Det er nyttigt, fordi du så kan skelne mellem dem og tilstødende segmenter med lignende farver.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Ikke markeret--Segmentgrænserne vises ikke. Dette er standardværdien.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Markeret--Segmentgrænserne vises med sorte konturlinjer omkring hvert segment.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "Den relative betydning af at adskille objekter baseret på rumlige karakteristika.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "Gyldige heltalsværdier varierer fra 1 til 20. Mindre værdier resulterer i brede klasser og mere tilpasning. En højere værdi er velegnet til at skelne mellem objekter, der er rumligt små og grupperet sammen. I en byscene kan du f.eks. klassificere generelle uigennemsigtige overfladeobjekter ved hjælp af en mindre værdi for spatiale detaljer, eller du kan klassificere bygninger og veje som separate klasser ved hjælp af en højere værdi for spatiale detaljer.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "Den relative betydning af at adskille objekter baseret på farvekarakteristika.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "Gyldige værdier med flydende komma varierer fra 1,0 til 20,0. Mindre værdier resulterer i brede klasser og mere tilpasning. En højere værdi er velegnet, når du ønsker at skelne mellem objekter, der har næsten samme spektrale karakteristika. Ved at bruge en højere værdi for de spektrale detaljer i et skovområde kan du f.eks. bedre skelne mellem de forskellige træsorter.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>Maksimumstørrelsen for et segment. Segmenter, der er større end den angivne størrelse, vil blive opdelt. Brug denne parameter til at forhindre artefakter i outputlaget, der stammer fra store segmenter. Standardværdien er -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Vælg en af de fire kalibreringstyper:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta nought</strong>--skaber et output, der indeholder koefficienten for radarlysstyrke.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma nought</strong>--tilbagekastning, der returneres til antennen fra et enhedsområde på jorden, i relation til grundintervallet.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gamma</strong>--måling af udsendt og returneret energi, der kan bruges til at bestemme antennemønstre.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>None</strong>--ingen korrektion foretages. Dette er standardværdien.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "Den Sentinel-1 Level-1 GRD eller SLC input-raster, du ønsker at behandle.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "Funktionen bruger LUT-filen enten til at foretage den termiske korrektion eller til at fjerne korrektionen, afhængigt af indholdet af LUT.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "Den Sentinel-1 input-raster, du ønsker at behandle.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "Funktionen bruger LUT-filen enten til at foretage den termiske korrektion eller til at fjerne korrektionen, afhængigt af indholdet af LUT.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Set-Null_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Set-Null_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Set-Null_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Set-Null_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Set-Null_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Set-Null_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Set-Null_False-Raster_tag0@@": "Det input, hvis værdier vil blive brugt som output-pixelværdier, hvis betingelsen er falsk. Det kan være et heltal, en raster med flydende komma eller en konstant værdi.",
	"@@Set-Null_Raster_tag0@@": "Den inputraster, der repræsenterer det booleske resultat af en logisk matematisk rasterfunktion. Værdierne er enten 1 (for sand) eller 0 (for falsk). Det kan være et heltal eller en raster med flydende komma.",
	"@@Shaded-Relief_Altitude_tag0@@": "Højde er solens højdevinkel over horisonten og varierer fra 0 til 90 grader. En værdi på 0 grader indikerer, at solen er på horisonten, dvs. på samme horisontale plan som referencerammen. En værdi på 90 grader indikerer, at solen er direkte over os. Standarden er 45 grader over horisonten.",
	"@@Shaded-Relief_Azimuth_tag0@@": "Azimut er solens relative position langs horisonten (i grader). Denne position angives som solens vinkel målt med uret fra stik nord. En azimut på 0 grader angiver nord, øst er 90 grader, syd er 180 grader, og vest er 270 grader.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Angiv, hvorvidt en farveskala eller et farvekort skal bruges til at vise skyggeeffekt.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Color Ramp</strong>--Når du vælger <strong>Color Ramp</strong>, bliver du bedt om at vælge en passende farveskala.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Colormap</strong>--Når du vælger <strong>Colormap</strong>, vil du blive bedt om at angive de farvekort, der skal bruges.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Angiv, hvorvidt standard-kantpixel-interpolationen skal deaktiveres.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Ikke markeret--Bilineær resampling vil blive anvendt gennemgående for at resample skyggeeffekten. Dette er standardværdien.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Markeret--Bilineær resampling vil blive brugt inden for skyggeeffekten, bortset fra langs rasternes kanter eller ved siden af NoData-pixels. Disse pixels vil blive udfyldt med NoData, da det vil reducere eventuelle effekter af skarpe kanter.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Ved at bruge denne indstilling undgår man at resample artefakter, der kan forekomme langs kanterne på en raster. Output-pixels langs kanten på en raster eller ved siden af pixels uden en værdi vil blive udfyldt med NoData. Derfor anbefales det, at denne indstilling kun bruges, når der er andre rastere med tilgængelige overlappende pixels. Når overlappende pixels er tilgængelige, vil disse områder med NoData vise den overlappende pixelværdi i stedet for at være tom.",
	"@@Shaded-Relief_Raster_tag0@@": "Input-højderasteren.",
	"@@Shaded-Relief_Scaling_tag0@@": "Skyggeresultatet skaleres dynamisk ved at justere z-faktoren ved hjælp af en af to indstillinger:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>None</strong>--Der anvendes ingen skalering. Dette er ideelt til et enkelt-rasterdatasæt, der dækker et lokalt område. Det anbefales ikke til globale datasæt med store højdevariationer eller kort i mange målestoksforhold, da det vil skabe terrænrelief med lille variation i små målestoksforhold.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Adjusted</strong>--Der anvendes en ikke-lineær justering ved hjælp af standardværdierne for <strong>Pixel Size Power</strong> og <strong>Pixel Size Factor</strong>, som kan rumme en bred vifte af højdeændringer (skalering), når seeren zoomer ind og ud. Parameterindstillingen <strong>Adjusted</strong>anbefales, når du bruger et globalt datasæt.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "Z-faktoren er en skaleringsfaktor, der bruges til at konvertere højdeværdierne med to formål:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "At konvertere højdeenheder (f.eks. meter eller fod) til horisontale koordinatenheder for datasættet, som kan være fod, meter eller grader",
	"@@Shaded-Relief_Z-Factor_tag2@@": "At tilføje vertikal overdrivelse for at øge den visuelle virkning",
	"@@Shaded-Relief_Z-Factor_tag3@@": "Skyggeresultatet skaleres dynamisk ved at justere z-faktoren ved hjælp af en af to indstillinger:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>None</strong>--Der anvendes ingen skalering. Dette er ideelt til et enkelt-rasterdatasæt, der dækker et lokalt område. Det anbefales ikke til globale datasæt med store højdevariationer eller kort i mange målestoksforhold, da det vil skabe terrænrelief med lille variation i små målestoksforhold.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Adjusted</strong>--Der anvendes en ikke-lineær justering ved hjælp af standardværdierne for <strong>Pixel Size Power</strong> og <strong>Pixel Size Factor</strong>, som kan rumme en bred vifte af højdeændringer (skalering), når seeren zoomer ind og ud. Parameterindstillingen <strong>Adjusted</strong>anbefales, når du bruger et globalt datasæt.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Styrer lyskilden for skyggevirkningen.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Traditionel</strong> – Beregner skyggevirkning ud fra en enkelt lysretning. Du kan indstille <strong>Azimuth</strong>- og <strong>Højde</strong>-indstillingerne for at at styre placeringen af ​​lyskilden. Dette er standardværdien.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Mange retninger</strong> – Kombinerer lys fra flere kilder for at give en bedre visualisering af terrænet.",
	"@@Shaded-Relief_PSPower_tag0@@": "<strong>Pixelstørrelsespotens</strong> tager højde for ændringer i højden (eller skalaen), når seeren zoomer ind og ud på kortvisningen. Det er eksponenten, der anvendes til pixelstørrelsen i ligningen, der styrer den hastighed, hvormed <strong>Z-faktor</strong> ændres, for at undgå betydeligt tab af relief.",
	"@@Shaded-Relief_PSPower_tag1@@": "Denne parameter er kun gyldig, når <strong>Skalering</strong>-typen er <strong>Justeret</strong>. Standardværdien er 0,664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "<strong>Pixelstørrelsesfaktor</strong> tager højde for ændringer i skala, når seeren zoomer ind og ud på kortvisningen. Det styrer den hastighed, som <strong>Z-faktor</strong> ændres med.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Denne parameter er kun gyldig, når <strong>Skalering</strong>-typen er <strong>Justeret</strong>. Standardværdien er 0,024.",
	"@@Sin_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Sin_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Sin_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Sin_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Sin_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Sin_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Sin_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Sin_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Sin_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Sin_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Sin_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Sin_Raster_tag0@@": "Det input, som sinusværdierne skal beregnes for.",
	"@@SinH_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@SinH_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@SinH_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@SinH_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@SinH_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@SinH_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@SinH_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@SinH_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@SinH_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@SinH_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@SinH_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@SinH_Raster_tag0@@": "Det input, som de hyperbolske sinus-værdier skal beregnes for.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "Inputrasteren, der viser strømningsretningen ud af hver celle.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "Flowretningsrasteren kan oprettes ved hjælp af funktionen <strong>Flowretning</strong>.",
	"@@Slope_DEM_tag0@@": "Input-højderasteren.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Ved at bruge denne indstilling undgår man at resample artefakter, der kan forekomme langs kanterne på en raster. Output-pixels langs kanten på en raster eller ved siden af pixels uden en værdi vil blive udfyldt med NoData. Derfor anbefales det, at denne indstilling kun bruges, når der er andre rastere med tilgængelige overlappende pixels. Når overlappende pixels er tilgængelige, vil disse områder med NoData vise den overlappende pixelværdi i stedet for at være tom.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Ikke markeret--Bilineær resampling vil blive anvendt gennemgående for at resample din hældning. Dette er standardværdien.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Markeret--Bilineær resampling vil blive brugt inden for hældningen, bortset fra langs rasternes kanter eller ved siden af NoData-pixels. Disse pixels vil blive udfyldt med NoData, da det vil reducere eventuelle effekter af skarpe kanter.",
	"@@Slope_Scaling_tag0@@": "Hældningsvinklen kan udlæses enten som en værdi i grader eller som en stigning i procent. Der findes tre indstillinger for <strong>Scaling</strong>:",
	"@@Slope_Scaling_tag3@@": "<strong>Degree</strong>--Hældningsvinklen beregnes i grader. Værdierne varierer fra 0 til 90.",
	"@@Slope_Scaling_tag5@@": "<strong>Percent_Rise</strong>--Hældningsvinklen beregnes som procentværdier. Værdierne varierer fra 0 til uendelig. En flad overflade er en stigning på 0 procent, mens en 45-graders overflade er en stigning på 100 percent. Efterhånden som overfladen bliver mere lodret, bliver den procentvise stigning tilsvarende større.",
	"@@Slope_Scaling_tag7@@": "<strong>Scaled</strong>--Hældningsvinklen beregnes på samme måde som GRAD, men z-faktoren er justeret for målestoksforholdet. Den bruger værdierne fra <strong>Pixelstørrelsespotens</strong> og <strong>Pixelstørrelsesfaktor</strong>, hvilket tager højde for opløsningsændringer (målestok), når kortviseren zoomer ind og ud. Dette anbefales, når der bruges globale datasæt--særligt når der bruges hældning som overflade for visualisering.",
	"@@Slope_Scaling_tag13@@": "Z-faktoren tilpasses ved hjælp af følgende ligning:",
	"@@Slope_Scaling_tag14@@": "Tilpasset Z-Faktor = (Z-Faktor) + (Pixelstørrelse)",
	"@@Slope_Scaling_tag15@@": "x (pixelstørrelsesfaktor)",
	"@@Slope_Scaling_tag16@@": "Pixelstørrelseseffekt",
	"@@Slope_Z-Factor_tag0@@": "<strong>Z Factor</strong> er en skaleringsfaktor, der bruges til at konvertere højdeværdierne med to formål:",
	"@@Slope_Z-Factor_tag3@@": "At konvertere højdeenheder (f.eks. meter eller fod) til horisontale koordinatenheder for datasættet, som kan være fod, meter eller grader",
	"@@Slope_Z-Factor_tag4@@": "At tilføje vertikal overdrivelse for at øge den visuelle virkning",
	"@@Slope_PSPower_tag0@@": "<strong>Pixelstørrelsespotens</strong> tager højde for ændringer i højden (eller skalaen), når seeren zoomer ind og ud på kortvisningen. Det er eksponenten, der anvendes til pixelstørrelsen i ligningen, der styrer den hastighed, hvormed <strong>Z-faktor</strong> ændres, for at undgå betydeligt tab af relief.",
	"@@Slope_PSPower_tag1@@": "Denne parameter er kun gyldig, når <strong>Skalering</strong>-typen er <strong>Skaleret</strong>. Standardværdien er 0,664.",
	"@@Slope_PSZFactor_tag0@@": "<strong>Pixelstørrelsesfaktor</strong> tager højde for ændringer i skala, når seeren zoomer ind og ud på kortvisningen. Det styrer den hastighed, som <strong>Z-faktor</strong> ændres med.",
	"@@Slope_PSZFactor_tag1@@": "Denne parameter er kun gyldig, når <strong>Skalering</strong>-typen er <strong>Skaleret</strong>. Standardværdien er 0,024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "Input-rasterlag for flow-akkumulering.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "Dette kan oprettes med funktionen <strong>Flow Accumulation</strong>.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "Feltet bruges til at tildele værdier til placeringer for punkter for vandløbsretning.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "Input-placeringer for punkter for vandløbsretning, der skal låses.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "For et input-rasterlag vil alle celler, som ikke er NoData (dvs. har en værdi), blive betragtet som punkter for vandløbsretning og blive låst.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "Den maksimale afstand, i kortenheder, for søgning efter en celle med højere akkumuleret flow.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Angiver middelværdien for additiv støj. En højere middelværdi for støj vil give mindre udjævning, mens en lavere værdi resulterer i mere udjævning.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Denne parameter er kun gyldig, når  <strong>Filter Type</strong> er <strong>Lee Filter</strong>, og <strong>Noise Model</strong> er <strong>Additive Noise</strong> eller <strong>Additive and Multiplicative Noise</strong>. Standardværdien er 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Angiver omfanget af eksponentiel dæmpningseffekt på filtrering. En højere dæmpningsværdi bevarer kanterne bedre, men udjævner mindre, mens en lavere værdi giver mere udjævning. En værdi på 0 resulterer i samme output som et lavpasfilter.",
	"@@Speckle_Damping-Factor_tag1@@": "Denne parameter er kun gyldig, når <strong>Filter Type</strong> er <strong>Enhanced Lee Filter</strong> eller <strong>Frost Filter</strong>. Standardværdien er 1.",
	"@@Speckle_Filter-Size_tag0@@": "Angiver størrelsen på det pixelvindue, der bruges til at filtrere støjen:",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "Angiver den filtertype, der skal anvendes i den udjævnende algoritme for at fjerne specklestøj:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Lee Filter</strong>--Reducerer specklestøjen ved at anvende et spatialt filter på hver pixel i et billede, som filtrerer dataene baseret på lokale statistikker beregnet inden for et kvadratisk vindue. Dette filter er nyttigt, hvis du ønsker at udjævne speckledata, der har en additiv eller multiplikativ komponent. Dette er standardværdien.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Enhanced Lee Filter</strong>--En tilpasset version af Lee-filteret, der inkluderer <strong>Damping Factor</strong> og <strong>Number of Looks</strong>. Dette filter er nyttigt, hvis du ønsker at reducere specklestøj og samtidig bevare teksturoplysninger.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Frost Filter</strong>--Reducerer specklestøj med et eksponentielt dæmpet, cirkulært symmetrisk filter, der bruger lokale statistikker inden for individuelle filtervinduer. Dette filter er nyttigt, hvis du ønsker at reducere specklestøj og samtidig bevare kanterne på radarbilleder.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Kuan Filter</strong>--Som Lee-filtret anvender dette filter et spatialt filter på hver pixel i et billede og filtrerer dataene baseret på lokale statistikker beregnet inden for et kvadratisk vindue. Dette filter er nyttigt, hvis du ønsker at reducere specklestøj og samtidig bevare kanterne på radarbilleder.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Angiver middelværdien for multiplikativ støj. En højere middelværdi for støj vil give mindre udjævning, mens en lavere værdi resulterer i mere udjævning.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Denne parameter er kun gyldig, når  <strong>Filter Type</strong> er <strong>Lee Filter</strong>, og <strong>Noise Model</strong> er <strong>Additive Noise</strong> eller <strong>Additive and Multiplicative Noise</strong>. Standardværdien er 1.",
	"@@Speckle_Noise-Model_tag0@@": "Angiver den støjtype, der reducerer kvaliteten af radarbilledet:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Multiplicative Noise</strong>--Vilkårlig signalstøj, der ganges ind i det relevante signal under optagelse eller transmission",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Additive Noise</strong>--Vilkårlig signalstøj, der adderes ind i det relevante signal under optagelse eller transmission",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Additive and Multiplicative Noise</strong>--begge støjmodeller",
	"@@Speckle_Noise-Variance_tag0@@": "Angiver støjvariansen i radarbilledet.",
	"@@Speckle_Noise-Variance_tag1@@": "Denne parameter er kun gyldig, når  <strong>Filter Type</strong> er <strong>Lee Filter</strong>, og <strong>Noise Model</strong> er <strong>Additive Noise</strong> eller <strong>Additive and Multiplicative Noise</strong>. Standardværdien er 0,25.",
	"@@Speckle_Number-of-Looks_tag0@@": "Angiver antallet af billedudseender, der styrer billedudjævningen og estimerer støjvariansen. En lavere værdi giver mere udjævning, mens en højere værdi bevarer flere billedobjekter.",
	"@@Speckle_Number-of-Looks_tag1@@": "Denne parameter er kun gyldig, når  <strong>Filter Type</strong> er <strong>Lee Filter</strong>, og <strong>Noise Model</strong> er <strong>Additive Noise</strong>, eller når <strong>Filter Type</strong> er <strong>Kuan Filter</strong>. Standardværdien er 1.",
	"@@Speckle_Raster_tag0@@": "Input-rasteren.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "Den matrice, der bruges til at konvertere input-rasteren.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "Til at udføre denne konvertering bruges følgende ligning:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Output Band_R = Weight_P * Band_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "hvor:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Band_R er et output-bånd, hvor R er et tal fra 1 til antallet af output-bånd.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Weight_P er en kommasepareret liste med vægte, 1 for hvert input-bånd. Summen af vægtene for hvert bånd skal være lig med 1.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "Band_C er input-billedet, hvor C er et tal fra 1 til antallet af bånd i input-billedet.",
	"@@Spectral-Conversion_Raster_tag0@@": "Input-rasteren.",
	"@@Spectral-Conversion_Raster_tag1@@": "Dette kan været et rasterdatasæt, et mosaikdatasæt eller en billedtjeneste.",
	"@@Spectral-Conversion_Size_tag0@@": "Antallet af rækker og kolonner i <strong>Conversion Matrix</strong>.",
	"@@Square_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Square_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Square_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Square_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Square_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Square_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Square_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Square_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Square_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Square_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Square_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Square_Raster_tag0@@": "De input-værdier, der skal kvadreres.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Square-Root_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Square-Root_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Square-Root_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Square-Root_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Square-Root_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Square-Root_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Square-Root_Raster_tag0@@": "De input-værdier, der skal bruges til at beregne kvadratroden.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Indstiller den statistiske værdi for hvert bånd.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "${Histogram}-kolonnen er et skrivebeskyttet felt, der kan udfyldes ved hjælp af parameteren <strong>Import</strong>. Hvis du importerer en histogramfil, vil ${Histogram}-kolonnen være markeret som <strong>Defined</strong>.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Importér statistik- og histogramoplysninger fra en eksisterende raster- eller XML-fil.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "Input-rasteren, der kræver, at statistik og histogram indstilles.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Indstiller den statistiske værdi for hvert bånd.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "Inputrasteren, der viser strømningsretningen ud af hver celle.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "Flowretningsrasteren kan oprettes ved hjælp af funktionen <strong>Flow Direction</strong>.",
	"@@Stream-Link_Stream-Raster_tag0@@": "Input-rasteren, der repræsenterer et lineært strømnetværk.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "Inputrasteren, der viser strømningsretningen ud af hver celle.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "Flowretningsrasteren kan oprettes ved hjælp af funktionen <strong>Flow Direction</strong>.",
	"@@Stream-Order_Order-Method_tag0@@": "Metoden, der anvendes til at etablere strømrækkefølgen.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLER</strong>--Den metode for etablering af strømrækkefølge, som blev foreslået af Strahler i 1952. Strømrækkefølgen øges kun, hvis strømme i den samme rækkefølge gennemskærer hinanden. Hvis et førsteprioritets- og andenprioritetslink gennemskærer hinanden forbliver det et andenprioritetslink frem for at oprette et tredjeprioritetslink. Dette er standardværdien.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong>--Den metode for etablering af strømrækkefølge efter størrelse, som blev foreslået af Shreve i 1967. Alle links uden tributaries tildeles en størrelse (prioritet) på en. Størrelser er additive med nedadgående hældning. Når to links gennemskærer hinanden, tilføjes og tildeles deres størrelse til det nedadgående link.",
	"@@Stream-Order_Stream-Raster_tag0@@": "En input-strømraster, der repræsenterer et lineært strømnetværk.",
	"@@Stretch_Auto-Gamma_tag0@@": "Brug <strong>Auto Gamma</strong> til at beregne gamma ud fra datasættets statistik og histogram. Statistikken kan være den estimerede statistik ved selve funktionen, eller statistikken kan beregnes af softwaren, hvis du vælger et lag.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Marker afkrydsningsfeltet <strong>Dynamic Range Adjustment</strong>, hvis du ønsker, at statistikken kun skal beregnes ud fra de pixels, der vises på din skærm. Denne indstilling anvendes normalt, hvis billedet skal publiceres og bruges i en webapp, der ikke kan udføre denne form for stræk.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Marker afkrydsningsfeltet <strong>Estimate Statistics</strong>, hvis du ønsker at lave en beregning af din statistik. Statistikken beregnes på basis af en 1000 gange 1000 sampling fra centrum af rasteren og anvendes af strækket.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Hvis denne er markeret og rasteren indeholder statistikoplysninger, eller du har indtastet værdier i tabellen <strong>Statistics</strong>, vil disse blive anvendt i stedet for beregningen, medmindre strækket kræver et histogram. Hvis strækket kræver et histogram, der ikke findes, vil det blive beregnet.",
	"@@Stretch_Gamma_tag0@@": "Træk i skyderen for manuelt at indstille <strong>Gamma</strong>-værdien.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Angiv n-værdien for det antal standardafvigelser, der skal bruges. Denne metode bruges til at vise, hvor meget objektværdier varierer fra middelværdien. Det er bedst at bruge metoden på normalt distribuerede data.",
	"@@Stretch_Output-Maximum_tag0@@": "Indstil den højeste pixelværdi for histogrammet.",
	"@@Stretch_Output-Maximum_tag1@@": "<strong>Output Minimum</strong> and <strong>Output Maximum</strong> angiver det interval af værdier, der skal kontraststrækkes lineært.",
	"@@Stretch_Output-Minimum_tag0@@": "Indstil den laveste pixelværdi for histogrammet.",
	"@@Stretch_Output-Minimum_tag1@@": "<strong>Output Minimum</strong> and <strong>Output Maximum</strong> angiver det interval af værdier, der skal kontraststrækkes lineært.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Angiv den procentdel af de høje værdier, der skal udelukkes fra strækket.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "Gyldige værdier er fra 0 til 99.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Angiv den procentdel af de lave værdier, der skal udelukkes fra strækket.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "Gyldige værdier er fra 0 til 99.",
	"@@Stretch_Raster_tag0@@": "Den input-raster, der skal kontraststrækkes.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "<strong>Strength Level</strong> bestemmer, hvor meget af sigmoid-funktionen, der skal bruges i strækket. Med en lav værdi som f.eks. 1 benyttes kun den midterste del af kurven, hvilket ofte resulterer i matte og svage farver. Ved en høj værdi som f.eks. 6 benyttes hele kurven, hvilket ofte resulterer i stærke og markante farver.",
	"@@Stretch_Statistics_tag0@@": "Du kan indtaste din egen statistik i dialogboksen. Som standard hentes statistikken fra dataene, men hvis du indtaster værdier i denne parameter, vil disse blive brugt i stedet.",
	"@@Stretch_Type_tag0@@": "Vælg stræktypemetode:",
	"@@Stretch_Type_tag1@@": "Ingen--Ingen kontraststræk",
	"@@Stretch_Type_tag2@@": "StdAfv--Standardafvigelsesstræk",
	"@@Stretch_Type_tag3@@": "MinMaks--Minimum-maksimumstræk",
	"@@Stretch_Type_tag4@@": "ProcentMinMaks--Procentklipstræk",
	"@@Stretch_Type_tag5@@": "Sigmoid--Sigmoid-stræk",
	"@@Stretch_Use-Gamma_tag0@@": "Marker afkrydsningsfeltet <strong>Use Gamma</strong>, hvis du vil anvende en gammastræk.",
	"@@Swath_Cellsize_tag0@@": "Cellestørrelsen for output-rasteren identificeres automatisk, men du kan ændre dette, hvis du vil. Cellestørrelsen kan ændres, men udstrækningen af raster-datasættet forbliver den samme.",
	"@@Swath_Interpolation-Method_tag0@@": "Der findes fire resampling-metoder for denne funktion:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Nearest Neighbor</strong>--Beregner pixelværdien ved hjælp af den nærmeste pixel. Hvis der ikke er nogen kildepixel, kan der ikke oprettes en ny pixel i outputtet.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Bilinear</strong>--Beregner pixelværdien ved hjælp af den afstandsvægtede værdi af de fire nærmeste pixels.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>Linear Tinning</strong>--Bruger et trianguleret uregelmæssigt netværk fra centerpunktet i hver celle i den uregelmæssige raster til at interpolere en overflade, der så konverteres til en regelmæssig raster.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Natural Neighbor</strong>--Udfører en tildeling af nærmeste nabo, den hurtigste interpoleringsmetode. Den bruges primært til diskrete data, såsom klassifikation af arealanvendelse, da den ikke ændrer værdierne i cellerne. Den maksimale spatiale fejl vil være halvdelen af cellestørrelsen.",
	"@@Swath_Raster_tag0@@": "Den raster med uregelmæssigt gitter, der skal resamples.",
	"@@Tan_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Tan_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Tan_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Tan_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Tan_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Tan_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Tan_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Tan_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Tan_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Tan_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Tan_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Tan_Raster_tag0@@": "Det input, som tangensværdierne skal beregnes for.",
	"@@TanH_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@TanH_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@TanH_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@TanH_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@TanH_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@TanH_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@TanH_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@TanH_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@TanH_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@TanH_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@TanH_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@TanH_Raster_tag0@@": "Det input, som de hyperbolske tangensværdier skal beregnes for.",
	"@@Tasseled-Cap_Raster_tag0@@": "Den input-raster, som Tasseled Cap-transformationen skal udføres på.",
	"@@Times_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Times_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Times_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Times_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Times_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Times_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Times_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Times_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Times_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Times_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Times_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Times_Raster_tag0@@": "Det input, der indeholder de værdier, der skal ganges med hinanden.",
	"@@Times_Raster_tag1@@": "En konstant værdi kan bruges som input til denne parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Times_Raster2_tag0@@": "Det input, der indeholder de værdier, som det første input skal ganges med.",
	"@@Times_Raster2_tag1@@": "En konstant værdi kan bruges som input til denne parameter, forudsat at der er angivet en raster for det andet parameter.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Vælg den type transponering, der skal udføres, eller angiv en brugerdefineret type:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8 cirrusskyer",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8 skyer",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8 skygge fra skyer",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8 udfyldning",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8 undertrykt billede",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8 sne/is",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8 terræn-okklusion",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8 vegetation",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8 vand",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Brugerdefineret",
	"@@Transpose-Bits_Constant-Value_tag0@@": "En valgfri værdi, der skal bruges til at udfylde alle bits, der ikke er involveret i transponeringen. Denne parameter er eksponeret, når parameteren <strong>Generate Fill Raster from Constant</strong> parameter er indstillet til <strong>Yes</strong>.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Angiv et rasterdatasæt, der skal bruges til at udfylde alle bits, der ikke er involveret i transponeringen. Denne parameter er eksponeret, når parameteren <strong>Generate Fill Raster from Constant</strong> parameter er indstillet til <strong>No</strong>.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Generér en fyldraster ved hjælp af en konstant værdi:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Yes</strong>--En raster bliver genereret ved hjælp af en konstant værdi for at udfylde de bits, der ikke er involveret i transponeringen. Dette er standardværdien.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>No</strong>--En raster bliver genereret ved hjælp af pixelværdier fra et eksisterende rasterdatasæt for at udfylde de bits, der ikke er involveret i transponeringen.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "En skrivebeskyttet tabel, der viser de output-bits og input, der vil være indsat på deres plads.",
	"@@Transpose-Bits_Raster_tag0@@": "Den input-raster, der udpakker og genberegner.",
	"@@Unit-Conversion_From-Unit_tag0@@": "Den originale enhedstype i pixlerne.",
	"@@Unit-Conversion_Raster_tag0@@": "Den input-raster, der vil indeholde de konverterede enheder.",
	"@@Unit-Conversion_To-Unit_tag0@@": "Den konverterede enhedstype i pixlerne.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Angiver, hvordan retningskomponenten blev målt.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Geografisk--0° peger stik nord, og 90° peger stik øst",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Aritmetisk--0° peger stik øst, og 90° peger stik nord",
	"@@Vector-Field_Input-Data-Type_tag0@@": "Den type vektorfelt, som dine input repræsenterer.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Ukendt--Det vides ikke, hvorvidt input repræsenterer U-V eller Størrelse-Retning.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V--Inputdata repræsenterer U- og V-komponenter.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Størrelse-Retning--Inputdata repræsenterer størrelse og retning.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Angiver den type vektorfelt, som dine output repræsenterer.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Størrelse-Retning--Outputdata repræsenterer størrelse og retning.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V--Outputdata repræsenterer U- og V-komponenter.",
	"@@Vector-Field_Raster1_tag0@@": "Den første input-raster.",
	"@@Vector-Field_Raster1_tag1@@": "Det vil enten være U-værdien eller størrelsen.",
	"@@Vector-Field_Raster2_tag0@@": "Den anden input-raster.",
	"@@Vector-Field_Raster2_tag1@@": "Det vil enten være V-værdien eller retningen.",
	"@@Viewshed_Analysis-Method_tag0@@": "Vælg den metode, som skal bruges til at beregne synligheden. Med denne indstilling kan du give afkald på nøjagtighed for at få øget ydeevne.",
	"@@Viewshed_Analysis-Method_tag1@@": "Alle sigtelinjer--En sigtelinje udføres på hver pixel i rasteren for at etablere synlige områder. Dette er standardmetoden.",
	"@@Viewshed_Analysis-Method_tag2@@": "Perimeter-sigtelinjer--Sigtelinjer udføres kun til pixlerne på perimeteren for de synlige områder for at etablere synlige områder. Denne metode har en bedre ydelse end metoden <strong>All Sightlines</strong>, da der er færre sigtelinjer med i beregningen.",
	"@@Viewshed_Analysis-Type_tag0@@": "Vælg, hvilken type synlighedsanalyse du ønsker at udføre, ved enten at bestemme, hvor synlig hver celle er for observatører, eller ved for hver overfladeplacering at identificere, hvilke observatører, der er synlige.",
	"@@Viewshed_Analysis-Type_tag1@@": "Frekvens--Antal gange, som hver pixelplacering i input-overfladerasteren kan ses af input-observationsplaceringerne (som punkter eller som toppunkter for polylinje-observationsobjekter). Dette er standardværdien.",
	"@@Viewshed_Analysis-Type_tag2@@": "Observatører--Outputtet identificerer præcist, hvilke observationspunkter, der er synlige fra hver rasteroverflade-placering. Det maksimale antal input-observatører er 32 for denne analysetype.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Denne værdi definerer slutvinklen for det vandrette scan-område. Værdien bør angives i grader fra 0 til 360,0, hvor 0 er orienteret mod nord. Standardværdien er 360,0.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Det kan være et felt i datasættet <strong>Observer Features</strong> eller en numerisk værdi. Hvis denne parameter er indstillet til en værdi, vil denne værdi blive anvendt for alle observatører. For at angive forskellige værdier for hver observatør indstilles denne parameter til et felt i datasættet <strong>Observer Features</strong>.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Denne værdi definerer startvinklen for det vandrette scan-område. Værdien bør angives i grader fra 0 til 360,0, hvor 0 er orienteret mod nord. Standardværdien er 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Det kan være et felt i datasættet <strong>Observer Features</strong> eller en numerisk værdi. Hvis denne parameter er indstillet til en værdi, vil denne værdi blive anvendt for alle observatører. For at angive forskellige værdier for hver observatør indstilles denne parameter til et felt i datasættet <strong>Observer Features</strong>.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "Afstandstype for den indre radius-parameter.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Ikke markeret--<strong>Inner Radius</strong> skal fortolkes som en 2D-afstand. Dette er standardværdien.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Markeret--<strong>Inner Radius</strong> skal fortolkes som en 3D-afstand.",
	"@@Viewshed_Inner-Radius_tag0@@": "Denne værdi definerer startafstanden (minimumsafstanden), hvorfra synligheden bestemmes. Pixels under denne afstand betragtes ikke som synlige i outputtet, men kan stadig blokere synligheden for pixels mellem <strong>Inner Radius</strong> og <strong>Outer Radius</strong>. Standardværdien er 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "Det kan være et felt i datasættet <strong>Observer Features</strong> eller en numerisk værdi. Hvis denne parameter er indstillet til en værdi, vil denne værdi blive anvendt for alle observatører. For at angive forskellige værdier for hver observatør indstilles denne parameter til et felt i datasættet <strong>Observer Features</strong>.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Denne værdi bruges til at definere overfladehøjden for observationspunkterne eller toppunkterne.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Det kan være et felt i datasættet <strong>Observer Features</strong> eller en numerisk værdi. Hvis denne parameter ikke er angivet, beregnes observationshøjden ud fra overfladerasteren ved hjælp af bilineær interpolation. Hvis denne parameter er indstillet til en værdi, vil denne værdi blive anvendt for alle observatører. For at angive forskellige værdier for hver observatør indstilles denne parameter til et felt i datasættet <strong>Observer Features</strong>.",
	"@@Viewshed_Observer-Features_tag0@@": "Den obligatoriske input-objektklasse, der identificerer observatørens placering. Det kan være punkt-, multipunkt- eller polylinjeobjekter.",
	"@@Viewshed_Observer-Features_tag1@@": "Input-objektklassen transformeres til et 3D-geocentrisk koordinatsystem under synlighedsberegningen. Observatører uden for overfladerasterens udstrækning eller placeret i NoData-celler ignoreres i beregningen.",
	"@@Viewshed_Observer-Offset_tag0@@": "Denne værdi indikerer en lodret afstand (i overfladeenheder), der skal tilføjes observationshøjden. Den bør være et positivt heltal eller flydende komma.",
	"@@Viewshed_Observer-Offset_tag1@@": "Det kan være et felt i datasættet <strong>Observer Features</strong> eller en numerisk værdi. Hvis denne parameter er indstillet til en værdi, vil denne værdi blive anvendt for alle observatører. For at angive forskellige værdier for hver observatør indstilles denne parameter til et felt i datasættet <strong>Observer Features</strong>.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Afstandstype for den ydre radius-parameter.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Ikke markeret--<strong>Outer Radius</strong> skal fortolkes som en 2D-afstand. Dette er standardværdien.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Markeret--<strong>Outer Radius</strong> skal fortolkes som en 3D-afstand.",
	"@@Viewshed_Outer-Radius_tag0@@": "Denne værdi definerer maksimumafstanden, hvorfra synligheden bestemmes. Pixels, der ligger ud over denne afstand, medtages ikke i analysen.",
	"@@Viewshed_Outer-Radius_tag1@@": "Det kan være et felt i datasættet <strong>Observer Features</strong> eller en numerisk værdi. Hvis denne parameter er indstillet til en værdi, vil denne værdi blive anvendt for alle observatører. For at angive forskellige værdier for hver observatør indstilles denne parameter til et felt i datasættet <strong>Observer Features</strong>.",
	"@@Viewshed_Raster_tag0@@": "Den påkrævede input-overfladeraster. Det kan være et heltal eller en raster med flydende komma.",
	"@@Viewshed_Raster_tag1@@": "Inputtet transformeres til et 3D-geocentrisk koordinatsystem under synlighedsberegningen. NoData-celler på input-rasteren blokerer ikke bestemmelsen af synlighed.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Koefficient for brydningen af synligt lys i luften.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "Standardværdien er 0,13.",
	"@@Viewshed_Surface-Offset_tag0@@": "Denne værdi indikerer en lodret afstand (i overfladeenheder), der skal tilføjes z-værdien for hvert målpixel, da den skal medregnes i forhold til synlighed. Den bør være et positivt heltal eller flydende komma.",
	"@@Viewshed_Surface-Offset_tag1@@": "Det kan være et felt i datasættet <strong>Observer Features</strong> eller en numerisk værdi. Hvis denne parameter er indstillet til en værdi, vil denne værdi blive anvendt for alle observatører. For at angive forskellige værdier for hver observatør indstilles denne parameter til et felt i datasættet <strong>Observer Features</strong>.",
	"@@Viewshed_Vertical-Error_tag0@@": "Mængden af usikkerhed, målt som Root Mean Square Error (RMSE), i værdierne for overfladehøjde. Det er en værdi med flydende komma, der repræsenterer den forventede fejl i værdierne for inputhøjde. Hvis denne parameter tildeles en værdi, der er større end 0, vil output-synlighedsrasteren være en værdi med flydende komma. I dette tilfælde, repræsenterer hver pixelværdi på output-synlighedsrasteren summen af sandsynlighederne for, at cellen er synlig for observatørerne.",
	"@@Viewshed_Vertical-Error_tag1@@": "Når <strong>Analysis Type</strong> er <strong>Observers</strong>, eller <strong>Analysis Method</strong> er <strong>Perimeter Sightlines</strong>, er denne parameter deaktiveret.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Denne værdi definerer den nedre grænse for den lodrette vinkel i scanningen under vandret plan. Værdien bør angives i grader fra -90,0 til 0 og kan være heltal eller flydende komma. Standardværdien er -90,0.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Det kan være et felt i datasættet <strong>Observer Features</strong> eller en numerisk værdi. Hvis denne parameter er indstillet til en værdi, vil denne værdi blive anvendt for alle observatører. For at angive forskellige værdier for hver observatør indstilles denne parameter til et felt i datasættet <strong>Observer Features</strong>.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Denne værdi definerer den øvre grænse for den lodrette vinkel i scanningen over vandret plan. Værdien bør angives i grader fra 0 til 90,0 og kan være heltal eller flydende komma. Standardværdien er 90,0.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Det kan være et felt i datasættet <strong>Observer Features</strong> eller en numerisk værdi. Hvis denne parameter er indstillet til en værdi, vil denne værdi blive anvendt for alle observatører. For at angive forskellige værdier for hver observatør indstilles denne parameter til et felt i datasættet <strong>Observer Features</strong>.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "Inputrasteren, der viser strømningsretningen ud af hver celle.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "Flowretningsrasteren kan oprettes ved hjælp af funktionen <strong>Flowretning</strong>.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "Placeringerne for punkter for vandløbsretning.",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Denne raster repræsenterer celler, over hvilke afvandingsområdet vil blive bestemt. Alle celler, der ikke er NoData, vil blive brugt som kildeceller.",
	"@@Watershed_Pour-Point-Field_tag0@@": "Feltet bruges til at tildele værdier til placeringer for punkter for vandløbsretning.",
	"@@Watershed_Pour-Point-Field_tag1@@": "Til et raster-datasæt for vandløbsretning bruges ${Value} som standard.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Weighted-Overlay_Scales_tag0@@": "Intervallet for de nye værdier, der skal bruges til at genberegne de gamle værdier.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "Den vægtede overlay-tabel består af fire dele:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Lag--Alle input-rastere skal være af typen heltal.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Påvirkning--Hver input-raster vægtes efter sin betydning, eller påvirkning, som en relativ procentdel. Summen af de procentvise påvirkningsvægte skal være lig med 100, og hver vægt skal angives med heltalsværdier.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Felt--Et heltal eller strengfelt i den input-raster, der skal bruges til vægtningen.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Genberegn tabel--Hver værdi i en input-raster tildeles en ny skalaværdi baseret på genberegningstabellen. Skalaværdien kan være en gyldig værdi eller en NoData-værdi.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Vælg, hvilken udstrækning der skal bruges i output-rasteren:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "Tabellen for vægtet sum defineres af tre egenskaber:",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Lag--Den raster, der skal vægtes.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Felt--Det rasterfelt, der skal bruges til vægtningen.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Vægt--Den vægtværdi, som rasteren skal ganges med. Det kan være en positiv eller negativ decimalværdi.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "En enkeltbåndsraster, hvor pixelværdier repræsenterer den omgivende lufttemperatur.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "Måleenheden, der er forbundet med input-temperaturrasteren. Tilgængelige input-enheder er Celsius, Fahrenheit og Kelvin.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "Måleenheden, der er forbundet med output-rasteren. Tilgængelige output-enheder er Celsius, Fahrenheit og Kelvin.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "En enkeltbåndsraster, hvor pixelværdier repræsenterer vindhastighed.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Definerer måleenheden for vindhastighedsraster:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Miles pr. time (mph)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Kilometer pr. time (km/t)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Meter pr. sekund (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Fod pr. sekund (ft/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Knob (kn)",
	"@@Zonal-Remap_Background-Value_tag0@@": "Den oprindelige pixelværdi i output-rasteren, inden input-pixels genberegnes.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "Den værdi, der tildeles en pixel, som ikke opfylder betingelserne fastsat i <strong>Zonal Attributes Table</strong>.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "Dette vil også være værdien på outputpixlen, hvis enten parameteren <strong>Output Value Field Name</strong> ikke er angivet, eller hvis output-værdien i den tilsvarende zonetærskel ikke er angivet i <strong>Zonal Attributes Table</strong>.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "Feltnavnet indeholder den maksimumværdi, under hvilken en input-pixel genberegnes.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Hvis værdien ikke angives, eller hvis feltværdien er nul, testes pixelværdierne ikke for maksimum.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "Feltnavnet indeholder den minimumsværdi, over hvilken en input-pixel genberegnes.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Hvis værdien ikke angives, eller hvis feltværdien er nul, testes pixelværdierne ikke for minimum.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "Feltnavnet indeholder den målværdi, til hvilken en input-pixel genberegnes.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Hvis værdien ikke angives, eller hvis feltværdien er nul, indstilles genberegnede pixelværdier til <strong>Default Output Value</strong>.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "En påkrævet enkeltbåndsraster-input indeholder pixelværdier, der skal genberegnes.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "En valgfri forespørgsel, der anvendes på <strong>Zonal Attributes Table</strong>.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "Hvis du anvendte ovenstående tabel som eksempel, ville forespørgslen være ${Variable1 = 'bare earth' AND Variable2 = 'California'}.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "En påkrævet input-tabel indeholder mindst tre felter. Den skal have en minimumtærskelværdi, maksimumtærskelværdi og en målværdi. Målværdien er det felt, der indeholder den genberegnede værdi.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "Filformatet kan være en objektklasse, featuretjeneste eller en tabeltype, som er understøttet af ArcGIS.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "Feltnavnet i <strong>Zonal Attributes Table</strong>, der indeholder zone-ID-værdierne.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "Zone-ID-værdierne er bundet direkte til zone-ID’erne i din zoneraster. De giver et andet filtreringsniveau under genberegningen. Hvis der ikke er noget zone-ID forbundet med en bestemt post i tabellen, vil den ikke indgå i genberegningen.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "En enkeltbåndsraster, hvor hver pixel definerer zoner, som er forbundet med en bestemt placering. En zone er defineret som alle områder i inputtet, der har samme værdi. Områderne behøver ikke at støde op til hinanden.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Angiver den metode, der bruges til at tilvejebringe forudsigelsesdimensionværdier.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>By Value</strong>--Forudsigelsen beregnes for en enkelt dimensions værdi. Hvis du f.eks. ønsker at forudsige årlig nedbør for årene 2050, 2100 og 2150. Dette er standardværdien.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>By Interval</strong>--Forudsigelsen beregnes for et interval af den dimension, der er defineret ved en start og en slutværdi. Hvis du f.eks. ønsker at forudsige årlig nedbør for årene mellem 2050 og 2150.",
	"@@Predict-Using-Trend_end_tag0@@": "Slutdato, højde eller dybde af dimensionsintervallet, der skal bruges i forudsigelsen.",
	"@@Predict-Using-Trend_end_tag1@@": "Dette input er obligatorisk, når parameteren <strong>Dimension Definition</strong> er indstillet til <strong>By Interval</strong>.",
	"@@Predict-Using-Trend_raster_tag0@@": "Den multidimensionale input-tendensraster fra funktionen <strong>Generate Trend</strong>.",
	"@@Predict-Using-Trend_start_tag0@@": "Startdato, højde eller dybde af dimensionsintervallet, der skal bruges i forudsigelsen.",
	"@@Predict-Using-Trend_start_tag1@@": "Dette input er obligatorisk, når parameteren <strong>Dimension Definition</strong> er indstillet til <strong>By Interval</strong>.",
	"@@Predict-Using-Trend_unit_tag0@@": "Enheden, der bliver brugt til værdiintervallet. Denne parameter gælder kun, når analysens dimension er en tidsdimension.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Hours</strong>--Forudsigelsen beregnes for hver time inden for det tidsinterval, der er beskrevet i parametrene <strong>Start</strong>, <strong>End</strong> og <strong>Value Interval</strong>.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Days</strong>--Forudsigelsen beregnes for hver dag inden for det tidsinterval, der er beskrevet i parametrene <strong>Start</strong>, <strong>End</strong> og <strong>Value Interval</strong>.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Weeks</strong>--Forudsigelsen beregnes for hver uge inden for det tidsinterval, der er beskrevet i parametrene <strong>Start</strong>, <strong>End</strong> og <strong>Value Interval</strong>.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Months</strong>--Forudsigelsen beregnes for hver måned inden for det tidsinterval, der er beskrevet i parametrene <strong>Start</strong>, <strong>End</strong> og <strong>Value Interval</strong>.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Years</strong>--Forudsigelsen beregnes for hvert år inden for det tidsinterval, der er beskrevet i parametrene <strong>Start</strong>, <strong>End</strong> og <strong>Value Interval</strong>.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "Antallet af trin mellem to dimensionsværdier, der skal inkluderes i beregningen. Standardværdien er 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Dette input er obligatorisk, når parameteren <strong>Dimension Definition</strong> er indstillet til <strong>By Interval</strong>.",
	"@@Predict-Using-Trend_values_tag0@@": "Dimensionsværdien eller -værdierne, der skal bruges i forudsigelsen.",
	"@@Predict-Using-Trend_values_tag1@@": "Tids-, dybde- og højdeværdiernes format skal matche det format for dimensionsværdierne, som bruges til at generere tendensrasteren. Hvis tendensrasteren blev genereret til StdTime-dimensionen, bør formatet være ÅÅÅÅ-MM-DDTTT:MM:SS, f.eks. 2050-01-01T00:00:00. Flere værdier adskilles med et semikolon.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Angiv den rasterfunktionsskabelon, der bruges til at aggregere flere udsnit til færre udsnit eller et enkelt udsnit.",
	"@@Process-Raster-Collection_dimension_tag0@@": "Aggregeringsdimensionen. Det er den dimension, som variablerne aggregeres langs.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Angiv den rasterfunktionsskabelon, der bruges til at behandle hvert udsnit eller element i input-raster-samlingen.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Angiver det nøgleordsinterval, der bruges ved aggregering af langs dimensionen. Dette parameter er obligatorisk, når <strong>Type</strong> er indstillet til <strong>Interval Keyword</strong>, og aggregeringen skal ske over tid.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>Hourly</strong>--Dataværdierne bliver aggregeret i trin på en time, og resultatet omfatter hver enkelt time i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Daily</strong>--Dataværdierne bliver aggregeret i trin på en dag, og resultatet omfatter hver enkelt dag i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Weekly</strong>--Dataværdierne bliver aggregeret i trin på en uge, og resultatet omfatter hver enkelt uge i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>Dekadly</strong>--Dataværdierne aggregeres til 3 perioder på 10 dage hver. Den sidste periode kan indeholde flere eller færre end 10 dage. Outputtet indeholder 3 tidsudsnit for hver måned.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>Pentadly</strong>--Dataværdierne aggregeres til 6 perioder på 5 dage hver. Den sidste periode kan indeholde flere eller færre end 5 dage. Outputtet indeholder 6 tidsudsnit for hver måned.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Monthly</strong>--Dataværdierne bliver aggregeret i trin på en måned, og resultatet omfatter hver enkelt måned i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Quarterly</strong>--Dataværdierne bliver aggregeret i trin på et kvartal, og resultatet omfatter hvert enkelt kvartal i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Yearly</strong>-- Dataværdierne bliver aggregeret i trin på et år, og resultatet omfatter hvert enkelt år i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Recurring daily</strong>--Dataværdierne bliver aggregeret i trin på en dag, og resultatet omfatter en aggregeret værdi pr. juliansk dag. Outputtet indeholder højst 366 daglige tidsudsnit.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Recurring weekly</strong>--Dataværdierne bliver aggregeret i trin på en uge, og resultatet omfatter en aggregeret værdi pr. uge. Outputtet indeholder højst 53 ugentlige tidsudsnit.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Recurring monthly</strong>--Dataværdierne bliver aggregeret i trin på en måned, og resultatet omfatter en aggregeret værdi pr. måned. Outputtet indeholder højst 12 månedlige tidsudsnit.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Recurring quarterly</strong>--Dataværdierne bliver aggregeret i trin på et kvartal, og resultatet omfatter en aggregeret værdi pr. kvartal. Outputtet indeholder højst 4 kvartalsvise tidsudsnit.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "Maksimumværdien for et interval.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Denne parameter er obligatorisk, når parameteren <strong>Type</strong> er indstillet til <strong>Interval Ranges</strong>.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "Minimumværdien for et interval.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Denne parameter er obligatorisk, når parameteren <strong>Type</strong> er indstillet til <strong>Interval Ranges</strong>.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Angiv den rasterfunktionsskabelon, der skal bruges til at vise det behandlede rasterlag.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "Det flerdimensionale input-raster, mosaiklag eller mosaikdatasæt.",
	"@@Process-Raster-Collection_type_tag0@@": "Angiver det dimensionsinterval, som dataene bliver aggregeret for.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>All</strong>--Dataværdierne aggregeres på tværs af alle udsnit i intervallet. Dette er standardværdien.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Interval Keyword</strong>--De variable data aggregeres ved hjælp af et almindeligt kendt interval.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Interval Ranges</strong>--De variable data aggregeres mellem angivne par af værdier og datoer.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Interval Values</strong>--De variable data aggregeres ved hjælp af brugerdefineret interval og enhed.",
	"@@Process-Raster-Collection_unit_tag0@@": "Den enhed, der bliver brugt som intervalværdi. Denne parameter er obligatorisk, når <strong>Dimension</strong> er et tidsfelt og parameteren <strong>Type</strong> er indstillet til <strong>Interval Value</strong>.",
	"@@Process-Raster-Collection_unit_tag1@@": "Hvis du aggregerer over andet end tid, er denne indstilling ikke tilgængelig, og enheden for intervalværdien svarer til den variable enhed i de flerdimensionale input-rasterdata.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Hours</strong>--Dataværdierne bliver aggregeret i tidsudsnit på en time ved det angivne interval.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Days</strong>--Dataværdierne bliver aggregeret i tidsudsnit på en dag ved det angivne interval.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Weeks</strong>--Dataværdierne bliver aggregeret i tidsudsnit på en uge ved det angivne interval.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Months</strong>--Dataværdierne bliver aggregeret i tidsudsnit på en måned ved det angivne interval.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Years</strong>--Dataværdierne bliver aggregeret i tidsudsnit på et år dag ved det angivne interval.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "Størrelsen på det interval, der skal bruges til aggregering. Denne parameter er obligatorisk, når parameteren <strong>Type</strong> er indstillet til <strong>Interval Value</strong>.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "Hvis man f.eks. vil aggregere 30 års månedlige temperaturdata til stigende 5 årsintervaller, skal man indtaste 5 som <strong>Value Interval</strong> og angive <strong>Unit</strong> til <strong>Years</strong>.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Angiver indstillingerne for at definere output-pixelværdierne.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Markeret--Der ikke være nogen negative output-værdier.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Ikke markeret--Der kan være negative værdier for brøkdele af landdække.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "Input-rasteren.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "Iinput-fil for spektral profil.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "De spektrale oplysninger til de forskellige landdækkeklasse.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Spectral Profile</strong>--En klassificeringsdefinitionsfil (${.ecd}) genereret med værktøjet <strong><strong>Train Maximum Likelihood Classifier</strong></strong> eller en JavaScript Object Notation-fil (${.json}), der indeholder klassens spektrale profiler.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Training Feature</strong>--Polygonobjekter eller et træningseksempel på en objektklasse genereret via <strong>Training Samples Manager</strong>.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Angiver indstillingerne for at definere output-pixelværdierne.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Markeret--Klasseværdier for hver pixel angives med decimaler, hvor summen af alle klasser er lig med 1. F.eks. Klasse1 = 0,16; Klasse2 = 0,24; Klasse3 = 0,60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Ikke markeret--Summen af alle klasser i en pixel kan overstige 1.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "Input-objektfil til træning.",
	"@@Aggregate_aggregationtechnique_tag0@@": "Metode anvendt til aggregering. Værdierne i input-cellerne, der ligger inden for de grovere output-celler aggregeres med en følgende statistikker:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Sum</strong>--Summen af alle input-celler. Dette er standardværdien.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Maximum</strong>--Den største værdi i input-cellen",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Mean</strong>--Den gennemsnitlige værdi i input-cellen.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Median</strong>--Medianværdien i input-cellen.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Minimum</strong>--Den mindste værdi i input-cellen.",
	"@@Aggregate_cellfactor_tag0@@": "Den faktor, som input-rasterens cellestørrelse skal ganges med.",
	"@@Aggregate_cellfactor_tag1@@": "F.eks. vil en cellefaktor på tre resultere i en output-cellestørrelse, der er tre gange større end input-rasterens cellestørrelse.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Definerer, hvordan man håndterer input-rasterens grænser, når dens rækker eller kolonner ikke er en multipel af cellefaktoren.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Markeret--Udvider input-rasterens øvre eller højre grænse, så det samlede antal celler i en række eller en kolonne er en multipel af cellefaktoren. Med denne indstilling kan output-rasteren dække en større spatial udstrækning end input-rasteren. Dette er standardværdien.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Ikke markeret--Reducerer antallet af rækker eller kolonner i output-rasteren. Dette afkorter de resterende celler i input-rasterens øvre og højre grænse, hvilket gør antallet af rækker eller kolonner i input-rasteren til en multipel af cellefaktoren. Med denne indstilling kan output-rasteren dække en mindre spatial udstrækning end input-rasteren.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Angiver, om ${NoData}-værdier ignoreres af aggregeringsberegningen.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Markeret--Angiver at, hvis der findes ${NoData}-værdier for de celler, der ligger i en større celles spatiale udstrækning på output-rasteren, ignoreres ${NoData}-værdierne, når værdien for output-celleplaceringerne bestemmes. Kun input-celler i output-cellens udstrækning, der har dataværdier, bruges til at bestemme output-cellens værdi. Dette er standardværdien.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Ikke markeret--Angiver at, hvis celler, der ligger i en større celles spatiale udstrækning på output-rasteren, har en værdi på ${NoData}, vil værdien for denne output-celleplacering være ${NoData}. Ved brug af denne indstilling forudsættes det, at når celler inden for en aggregering indeholder værdien ${NoData}, er der tilstrækkelige oplysninger til at udføre de angivne beregninger, som er nødvendige for at bestemme en output-værdi.",
	"@@Aggregate_raster_tag0@@": "Input-rasteren, der skal aggregeres.",
	"@@Expand_numberofcells_tag0@@": "Antal celler, der skal udvides med.",
	"@@Expand_numberofcells_tag1@@": "Værdien skal være et helt tal, og kan være 1 eller derover.",
	"@@Expand_raster_tag0@@": "Den input-raster, for hvilken de identificerede zoner skal udvides.",
	"@@Expand_raster_tag1@@": "Det skal være en heltalstype.",
	"@@Expand_zonevalues_tag0@@": "Listen over zoner, der skal udvides.",
	"@@Expand_zonevalues_tag1@@": "Zoneværdierne skal være hele tal, og de kan stå i vilkårlig rækkefølge.",
	"@@Expand_zonevalues_tag2@@": "For at angive flere zoner bruges et mellemrum for at adskille zoneværdierne.",
	"@@Multidimensional-Filter_dimension_tag0@@": "Dimension, hvorfra der skal udtrækkes variabler.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Angiver den metode, der bruges til at inddele dimensionen.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>All</strong>--Det fulde interval for hver dimension vil blive brugt. Dette er standardværdien.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>By Values</strong>--Dimensionen inddeles ved hjælp af en dimensionsværdi eller en liste over værdier.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>By Ranges</strong>--Dimensionen inddeles ved hjælp af et interval eller en liste over intervaller.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>By Iteration</strong>--Dimensionen inddeles over en angivet intervalstørrelse.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "Slutningen af første interval. Dette interval bruges til gentagelse i datasættet. Denne parameter er obligatorisk, når parameteren <strong>Dimension Definition</strong> er indstillet til <strong>By Iteration</strong>.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "Maksimumværdien for intervallet. Denne parameter er obligatorisk, når parameteren <strong>Dimension Definition</strong> er indstillet til <strong>By Ranges</strong>.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "Minimumværdien for intervallet. Denne parameter er obligatorisk, når parameteren <strong>Dimension Definition</strong> er indstillet til <strong>By Ranges</strong>.",
	"@@Multidimensional-Filter_raster_tag0@@": "Den multidimensionale input-raster.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p> intervalområderne, der er angivet i en tabel, anvendes til at aggregere grupper af værdier. Minimum- og maksimumværdierne angiver det interval, der skal inkluderes.</p><p>Denne parameter er obligatorisk når parameteren <strong>Type</strong> er indstillet til <strong>Interval Ranges</strong>.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "Starten af første interval. Dette interval bruges til gentagelse i datasættet. Denne parameter er obligatorisk, når parameteren <strong>Dimension Definition</strong> er indstillet til <strong>By Iteration</strong>.",
	"@@Multidimensional-Filter_step_tag0@@": "Den frekvens, hvormed data inddeles. Denne parameter er obligatorisk, når parameteren <strong>Dimension Definition</strong> er indstillet til <strong>By Iteration</strong>. Standard er 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Angiver gentagelsesenheden. Denne parameter er obligatorisk, når parameteren <strong>Dimension Definition</strong> er indstillet til <strong>By Iteration</strong>, og parameteren <strong>Dimension</strong> er indstillet til <strong>StdTime</strong>.",
	"@@Multidimensional-Filter_value_tag0@@": "Værdien for den angivne dimension. Denne parameter er obligatorisk, når parameteren <strong>Dimension Definition</strong> er indstillet til <strong>By Values</strong>.",
	"@@Multidimensional-Filter_variables_tag0@@": "Variabler, der inkluderes i det flerdimensionale output-rasterlag. Hvis ingen variabler er angivet, bruges den første variabel.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Angiver, om laget skal have dimensionsværdier. Denne indstilling er kun tilgængelig, hvis et enkelt udsnit er valgt med henblik på at oprette et lag.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Markeret – Laget vil ikke have dimensionsværdier.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Ikke-markeret – Laget vil have en dimensionsværdi. Dette er standardværdien.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "Cellestørrelse i den interpolerede raster. Standardværdien er ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "Resampling-metoden bruges til at interpolere uregelmæssige data.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>Nearest Neighbor</strong>--Beregner output-pixelværdien ved hjælp af den nærmeste input-pixel. Hvis der ikke er nogen kildepixel, kan der ikke oprettes en ny pixel i outputtet. Dette er standardværdien.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>Linear Tinning</strong>--Bruger et trianguleret uregelmæssigt netværk fra centerpunktet i hver pixel i den uregelmæssige raster til at interpolere en overflade, der så konverteres til en regelmæssig raster.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Natural Neighbor</strong>--Finder det nærmeste undergruppe af input-eksempler til et forespørgselspunkt og anvender vægte på dem, baseret på forholdsmæssige områder, for at interpolere en værdi.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Inverse Distance Weighting</strong>--Bestemmer pixelværdier ved hjælp af en lineært vægtet kombination af et sæt eksempelpunkter eller -pixels. Vægten er en funktion af det inverse af afstanden fra de kendte punkter eller pixels.",
	"@@Multidimensional-Raster_raster_tag0@@": "Den multidimensionale input-raster.",
	"@@Multidimensional-Raster_variables_tag0@@": "Variabler, der inkluderes i det flerdimensionale rasterlag.",
	"@@Random_distribution_tag0@@": "Angiv den vilkårlige værdidistributionsmetode, der skal anvendes.",
	"@@Random_distribution_tag1@@": "<strong>Uniform</strong> (Minimum, Maksimum)--En ensartet distribution med et defineret interval. Standardværdien er 0 for Minimum og 1 for Maksimum. Dette er standardværdien.",
	"@@Random_distribution_tag2@@": "<strong>Integer</strong> (Minimum, Maksimum)--En heltalsdistribution med et defineret interval. Standardværdien er 1 for Minimum og 10 for Maksimum.",
	"@@Random_distribution_tag3@@": "<strong>Normal</strong> (Middelværdi, Standardafvigelse)--En normal distribution med en defineret middelværdi og en standardafvigelse. Standardværdien er 0 for Gennemsnit og 1 for Standardafvigelse.",
	"@@Random_distribution_tag4@@": "<strong>Exponential</strong> (Middelværdi)--En eksponentiel distribution med en defineret middelværdi. Standardværdien er 1.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (Middelværdi)--En Poisson-distribution med en defineret middelværdi. Standardværdien er 1.",
	"@@Random_distribution_tag6@@": "<strong>Gamma</strong> (Alfa, Beta)--En gamma distribution med en defineret alfa og beta. Standardværdierne er 1 for Alfa og 1 for Beta.",
	"@@Random_distribution_tag7@@": "<strong>Binomial</strong> (N, sandsynlighed)--En binomialfordeling med en defineret N og sandsynlighed. Standardværdierne er 10 for N og 0,5 for sandsynlighed.",
	"@@Random_distribution_tag8@@": "<strong>Geometric</strong> (Sandsynlighed)--En geometrisk fordeling med en defineret sandsynlighed. Standardværdien er 0,5.",
	"@@Random_distribution_tag9@@": "<strong>Negative Binomial</strong> (r, sandsynlighed)--En Pascal-distribution med en defineret r og sandsynlighed. Standardværdierne er 10,0 for r og 0,5 for sandsynlighed.",
	"@@Random_randomnumbergenerator_tag0@@": "Angiv den algoritme for vilkårlig generator, der bruger seed og distribution til at skabe en sekvens af vilkårlige tal. De tilgængelige valgmuligheder er som følger:",
	"@@Random_randomnumbergenerator_tag1@@": "Standard C Rand",
	"@@Random_randomnumbergenerator_tag2@@": "ACM-indsamlet algoritme 599",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "Standardværdien er Mersenne Twister.",
	"@@Random_rasterinfo_tag0@@": "Brug knappen <strong>Load template raster</strong> til at indlæse en skabelon fra et bibliotek eller portal.",
	"@@Random_seed_tag0@@": "Seedet er en heltalsværdi og bruges til at starte generatoren af et vilkårligt tal. Standardværdien er 1.",
	"@@Shrink_numberofcells_tag0@@": "Antal celler, som den angivne zone mindskes med.",
	"@@Shrink_numberofcells_tag1@@": "Værdien skal være et helt tal, og kan være 1 eller derover.",
	"@@Shrink_raster_tag0@@": "Den input-raster, for hvilken de identificerede zoner skal gøres mindre.",
	"@@Shrink_raster_tag1@@": "Det skal være en heltalstype.",
	"@@Shrink_zonevalues_tag0@@": "Lister over zoner, der skal gøres mindre.",
	"@@Shrink_zonevalues_tag1@@": "Zoneværdierne skal være hele tal, og de kan stå i vilkårlig rækkefølge.",
	"@@Shrink_zonevalues_tag2@@": "For at angive flere zoner bruges et mellemrum for at adskille zoneværdierne.",
	"@@Distance-Accumulation_costraster_tag0@@": "En raster, der definerer omkostninger eller impedans ved at bevæge sig planimetrisk gennem hver celle. Værdien ved hver cellelokation repræsenterer omkostning pr. enhed-afstanden ved at bevæge sig gennem den. Værdien ved hver cellelokation ganges med celleopløsningen, og der kompenseres også for diagonal bevægelse for at få de samlede omkostninger ved at bevæge sig gennem cellen.",
	"@@Distance-Accumulation_costraster_tag1@@": "Værdierne i <strong>Cost Raster</strong> kan være heltal eller flydende komma, men de kan ikke være negative eller nul.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Afgør, om afstanden skal beregnes ved hjælp af en planar-metode (flad jord) eller en geodætisk metode (ellipsoid).",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Planar - planarmålinger bruger 2D kartesisk matematik til at beregne længde og areal. Indstillingen er kun tilgængelig, når der måles i et projiceret koordinatsystem, og 2D-planet for det koordinatsystem bruges som basis for målingerne.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Geodætisk - den korteste linje mellem to punkter på jordoverfladen på en sfæroid (ellipsoide). Det betyder, at resultaterne ikke ændrer sig, uanset input- eller output-projektion.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Note:</strong> En geodætisk linje kan f.eks. bruges, når du vil bestemme den korteste afstand mellem to byer for en flyrute. Dette er også kendt som en storcirkel-linje, hvis den er baseret på en sfære i stedet for en ellipsoide.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Bestemmer, hvorvidt det kun er afstand-rastereren for akkumulering, der oprettes, eller hvorvidt der oprettes et multibåndsraster, som består af både afstand-raster for akkumulering og tilbageretningsraster.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Ikke markeret--Resultatet er afstand-rastereren for akkumulering. Dette er et enkeltbåndsresultat. Dette er standardværdien.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Markeret--Der oprettes et multibåndsresultat. Det første bånd er afstand-rasteren for akkumulering, og det andet bånd er tilbageretningsrasteren.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "Tilbageretningsraster beregner, for hver celle, retningen, i grader, til nabocellen ad den korteste vej tilbage til den nærmeste kilde, idet barrierer undgås.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Definerer forholdet mellem den vandrette omkostningsfaktor og Horizontal Relative Moving Angle (HRMA).</p><p>Der er adskillige faktorer med modifikatorer, der identificerer en defineret lodret faktorgraf. Man kan også bruge en tabel til at oprette en tilpasset graf. Graferne bruges til at identificere den lodrette faktor, der bruges til at beregne den samlede omkostning ved at bevæge sig over i en nabocelle.</p><p>I forklaringerne nedenfor anvendes to forkortelser: HF og HRMA. HF står for horizontal factor, som definerer de vandrette problemer, der opstår, når man bevæger sig fra en celle til den næste. HRMA står for Horizontal Relative Moving Angle, som identificerer vinklen mellem den vandrette retning fra en celle og bevægelsesretningen.</p><p><strong>Horisontale faktor</strong>-typer omfatter følgende:</p><ul><li><strong>Binær</strong>--Indikerer, at hvis HRMA er mindre end den skårne vinkel, er HF indstillet til den værdi, der er forbundet med nulfaktoren, ellers er den uendelig.</li><li><strong>Frem</strong>--Fastslår, at kun fremadrettede bevægelser er tilladt. HRMA skal være større end eller lig med 0 og mindre end 90 grader (0 &lt;= HRMA &lt; 90). Hvis HRMA er større end 0 og mindre end 45 grader, er HF for cellen indstillet til den værdi, der er forbundet med nulfaktoren. Hvis HRMA er større end eller lig med 45 grader, anvendes modifikatorværdien for sideværdien. HF for HRMA-værdier, der er lig med eller større end 90 grader, er indstillet til uendelig.</li><li><strong>Lineær</strong>--Angiver, at HF er en lineær funktion af HRMA.</li><li><strong>Omvendt lineær</strong>--Angiver, at HF er en omvendt lineær funktion af HRMA.</li><li><strong>Tabel</strong>--Angiver, at en tabelfil vil blive brugt til at definere den vandrette faktorgraf, der anvendes til at fastslå HF'erne.</li></ul><p>Modifikatorer til de vandrette faktorer inkluderer følgende:</p><ul><li><strong>Nulfaktor</strong>--Den vandrette faktor, der anvendes, når HRMA er nul. Denne faktor positionerer y-skæringspunktet for funktionerne for den vandrette faktor.</li><li><strong>Skæringsvinkel</strong>--Definerer den HRMA-vinkel, over hvilken HF vil blive indstillet til uendelig.</li><li><strong>Hældning</strong>--Fastslår hældningen for den lige linje, der bruges med<strong>Lineær</strong>og<strong>Omvendt lineær</strong>vandrette faktornøgleord. Hældningen angives som en brøkdel af ”rise over run” (f.eks. svarer en 45 graders hældning til 1/45, der indtastes som 0,02222).</li><li><strong>Sideværdi</strong>--Fastslår HF, når HRMA er større end eller lig med 45 grader og mindre end 90 grader, når<strong>Frem</strong>nøgleordet for den vandrette faktor er angivet.</li><li><strong>Tabelnavn</strong>--Identificerer navnet på den tabel, der definerer HF.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "En raster, der definerer den vandrette retning i hver celle.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "Værdierne på rasteren skal være heltal i intervallet mellem 0 og 360, hvor 0 grader er nord, eller mod toppen af skærmen, og stigende med uret. Flade områder bør have værdien -1. Værdierne på hvert sted bliver brugt i forbindelse med <strong>Horizontal factor</strong> til at bestemme den vandrette omkostning ved at flytte sig fra én celle til en nabocelle.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "De oprindelige akkumulerede omkostninger for at starte omkostningsberegningen. Denne parameter gør det muligt at angive de faste omkostninger, der er knyttet til en kilde. I stedet for at starte med en omkostning på 0, begynder omkostningsalgoritmen med den angivne værdi.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "Værdien skal være nul eller større. Standard er 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Definerer den maksimale akkumulerede omkostning for den rejsende for en kilde. Omkostningsberegningerne fortsætter for hver kilde, indtil den specificerede kapacitet er nået.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af output-rasteren.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "En multiplikator, der anvendes på omkostningsværdierne.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Denne parameter gør det muligt at kontrollere rejsemåden eller størrelsen ved en kilde. Jo større multiplikator, jo større omkostning ved at bevæge sig gennem hver celle.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "Værdierne skal være større end nul. Standard er 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "Rasteren, der definerer barriererne.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "Datasættet skal indeholde NoData, der hvor der ikke er nogen barrierer. Barrierer repræsenteres af gyldige værdier inklusive nul.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "Barriererne kan defineres af et heltal eller en raster med flydende komma.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "Input-kildeplacering.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Dette er et raster-datasæt, der identificerer de celler eller placeringer, hvorfra afstanden med de laveste akkumulerede omkostninger beregnes for hver output-celles placering.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Det kan være et heltal eller et flydende komma.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "En raster, der definerer højdeværdierne ved hver cellelokation.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "Værdierne bruges til at beregne den faktiske overfladedistance, der tilbagelægges, når man flytter mellem cellerne.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Definerer den rejsendes retning, når man anvender vertikal faktor, horisontal faktor og kildens resistens-sats.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>From Source</strong>--Vertikal faktor, horisontal faktor og kildens resistens-sats anvendes fra input-kilden og ud til ikke-kildecellerne. Dette er standardværdien.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>To Source</strong>--Vertikal faktor, horisontal faktor og kildens resistens-sats anvendes fra hver ikke-kildecelle og tilbage til input-kilden.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Angiv enten nøgleordet <strong>From Source</strong> eller <strong>To Source</strong>, som vil blive anvendt på alle kilder, eller angiv et felt i <strong>Source Raster</strong>, der indeholder nøgleordene til at identificere kørselsretningen for hver kilde. Dette felt skal indeholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Definerer forholdet mellem den lodrette omkostningsfaktor og Vertical Relative Moving Angle (VRMA).</p><p>Der er adskillige faktorer med modifikatorer, der identificerer en defineret lodret faktorgraf. Man kan også bruge en tabel til at oprette en tilpasset graf. Graferne bruges til at identificere den lodrette faktor, der bruges til at beregne den samlede omkostning ved at bevæge sig over i en nabocelle.</p><p>I forklaringerne nedenfor anvendes to forkortelser: VF og VRMA. VF står for vertical factor, som definerer de lodrette problemer, der opstår, når man bevæger sig fra en celle til den næste. VRMA står for vertical relative moving angle, der identificerer hældningsvinklen mellem FROM-cellen, eller behandlingscellen, og TO-cellen.</p><p><strong>Vertikal faktor</strong>-typer omfatter følgende:</p><ul><li><strong>Binær</strong>--Angiver, at hvis VRMA er større end den lavt skårne vinkel og mindre end den højt skårne vinkel, er VF indstillet til den værdi, der er forbundet med nulfaktoren, ellers er den uendelig.</li><li><strong>Lineær</strong>--Indikerer, at VF er en lineær funktion af VRMA.</li><li><strong>Symmetrisk lineær</strong>--Angiver, at VF er en lineær funktion af VRMA i enten den negative eller positive side af VRMA, og de to lineære funktioner er symmetriske med hensyn til VF-aksen (y-aksen).</li><li><strong>Omvendt lineær</strong>--Indikerer, at VF er en omvendt lineær funktion af VRMA.</li><li><strong>Symmetrisk omvendt lineær</strong>--Angiver, at VF er en omvendt lineær funktion af VRMA i enten den negative eller positive side af VRMA, og de to lineære funktioner er symmetriske med hensyn til VF-aksen (y-aksen).</li><li><strong>Cos</strong>--Identificerer VF som den cosinus-baserede funktion af VRMA.</li><li><strong>Sek</strong>--Identificerer VF som den sekant-baserede funktion af VRMA.</li><li><strong>Cos-Sek</strong>--Angiver, at VF er den cosinus-baserede funktion af VRMA, når VRMA er negativ, og den sekant-baserede funktion af cosinus-baserede funktion af VRMA, når VRMA er ikke-negativ.</li><li><strong>Sek-Cos</strong>--Angiver, at VF er den sekant-baserede funktion af VRMA, når VRMA er negativ, og den cosinus-baserede funktion af VRMA, når VRMA er ikke-negativ.</li><li><strong>Tabel</strong>--Identificerer, at der bruges en tabelfil til at definere den vertikal-faktor-graf, der anvendes til at fastslå VF’erne.</li></ul><p>Modifikatorer til de lodrette nøgleord inkluderer følgende:</p><ul><li><strong>Nulfaktor</strong>--Fastslår den lodrette faktor, der anvendes, når VRMA er nul. Denne faktor positionerer y-skæringspunktet for den angivne funktion. Pr. definition kan nulfaktor ikke anvendes på trigonometriske lodrette funktioner (COS, SEK, COS-SEK eller SEK-COS). Y-skæringspunktet er defineret af disse funktioner.</li><li><strong>Lavt skåret vinkel</strong>--Definerer den VRMA-vinkel, under hvilken HF vil blive indstillet til uendelig.</li><li><strong>Højt skåret vinkel</strong>--Definerer den VRMA-vinkel, over hvilken VF vil blive indstillet til uendelig.</li><li><strong>Hældning</strong>--Fastslår hældningen for den lige linje, der bruges med<strong>Lineær</strong>og<strong>Omvendt lineær</strong>lodret-faktor-nøgleord. Hældningen angives som en brøkdel af ”rise over run” (f.eks. svarer en 45 graders hældning til 1/45, der indtastes som 0,02222).</li><li><strong>Tabelnavn</strong>--Identificerer navnet på den tabel, der definerer VF.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Definerer forholdet mellem den lodrette omkostningsfaktor og vertical relative moving angle (VRMA).",
	"@@Distance-Accumulation_verticalraster_tag1@@": "Værdierne anvendes til at beregne den hældning, der bruges til at identificere den lodrette faktor, når man bevæger sig fra en celle til en anden.",
	"@@Distance-Allocation_costraster_tag0@@": "En raster, der definerer omkostninger eller impedans ved at bevæge sig planimetrisk gennem hver celle. Værdien ved hver cellelokation repræsenterer omkostning pr. enhed-afstanden ved at bevæge sig gennem den. Værdien ved hver cellelokation ganges med celleopløsningen, og der kompenseres også for diagonal bevægelse for at få de samlede omkostninger ved at bevæge sig gennem cellen.",
	"@@Distance-Allocation_costraster_tag1@@": "Værdierne i <strong>Cost Raster</strong> kan være heltal eller flydende komma, men de kan ikke være negative eller nul.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Afgør, om afstanden skal beregnes ved hjælp af en planar-metode (flad jord) eller en geodætisk metode (ellipsoid).",
	"@@Distance-Allocation_distancemethod_tag1@@": "Planar - planarmålinger bruger 2D kartesisk matematik til at beregne længde og areal. Indstillingen er kun tilgængelig, når der måles i et projiceret koordinatsystem, og 2D-planet for det koordinatsystem bruges som basis for målingerne.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Geodætisk - den korteste linje mellem to punkter på jordoverfladen på en sfæroid (ellipsoide). Det betyder, at resultaterne ikke ændrer sig, uanset input- eller output-projektion.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Note:</strong> En geodætisk linje kan f.eks. bruges, når du vil bestemme den korteste afstand mellem to byer for en flyrute. Dette er også kendt som en storcirkel-linje, hvis den er baseret på en sfære i stedet for en ellipsoide.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Definerer forholdet mellem den vandrette omkostningsfaktor og Horizontal Relative Moving Angle (HRMA).</p><p>Der er adskillige faktorer med modifikatorer, der identificerer en defineret lodret faktorgraf. Man kan også bruge en tabel til at oprette en tilpasset graf. Graferne bruges til at identificere den lodrette faktor, der bruges til at beregne den samlede omkostning ved at bevæge sig over i en nabocelle.</p><p>I forklaringerne nedenfor anvendes to forkortelser: HF og HRMA. HF står for horizontal factor, som definerer de vandrette problemer, der opstår, når man bevæger sig fra en celle til den næste. HRMA står for Horizontal Relative Moving Angle, som identificerer vinklen mellem den vandrette retning fra en celle og bevægelsesretningen.</p><p><strong>Horisontale faktor</strong>-typer omfatter følgende:</p><ul><li><strong>Binær</strong>--Indikerer, at hvis HRMA er mindre end den skårne vinkel, er HF indstillet til den værdi, der er forbundet med nulfaktoren, ellers er den uendelig.</li><li><strong>Frem</strong>--Fastslår, at kun fremadrettede bevægelser er tilladt. HRMA skal være større end eller lig med 0 og mindre end 90 grader (0 &lt;= HRMA &lt; 90). Hvis HRMA er større end 0 og mindre end 45 grader, er HF for cellen indstillet til den værdi, der er forbundet med nulfaktoren. Hvis HRMA er større end eller lig med 45 grader, anvendes modifikatorværdien for sideværdien. HF for HRMA-værdier, der er lig med eller større end 90 grader, er indstillet til uendelig.</li><li><strong>Lineær</strong>--Angiver, at HF er en lineær funktion af HRMA.</li><li><strong>Omvendt lineær</strong>--Angiver, at HF er en omvendt lineær funktion af HRMA.</li><li><strong>Tabel</strong>--Angiver, at en tabelfil vil blive brugt til at definere den vandrette faktorgraf, der anvendes til at fastslå HF'erne.</li></ul><p>Modifikatorer til de vandrette faktorer inkluderer følgende:</p><ul><li><strong>Nulfaktor</strong>--Den vandrette faktor, der anvendes, når HRMA er nul. Denne faktor positionerer y-skæringspunktet for funktionerne for den vandrette faktor.</li><li><strong>Skæringsvinkel</strong>--Definerer den HRMA-vinkel, over hvilken HF vil blive indstillet til uendelig.</li><li><strong>Hældning</strong>--Fastslår hældningen for den lige linje, der bruges med<strong>Lineær</strong>og<strong>Omvendt lineær</strong>vandrette faktornøgleord. Hældningen angives som en brøkdel af ”rise over run” (f.eks. svarer en 45 graders hældning til 1/45, der indtastes som 0,02222).</li><li><strong>Sideværdi</strong>--Fastslår HF, når HRMA er større end eller lig med 45 grader og mindre end 90 grader, når<strong>Frem</strong>nøgleordet for den vandrette faktor er angivet.</li><li><strong>Tabelnavn</strong>--Identificerer navnet på den tabel, der definerer HF.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "En raster, der definerer den vandrette retning i hver celle.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "Værdierne på rasteren skal være heltal i intervallet mellem 0 og 360, hvor 0 grader er nord, eller mod toppen af skærmen, og stigende med uret. Flade områder bør have værdien -1. Værdierne på hvert sted bliver brugt i forbindelse med <strong>Horizontal factor</strong> til at bestemme den vandrette omkostning ved at flytte sig fra én celle til en nabocelle.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "De oprindelige akkumulerede omkostninger for at starte omkostningsberegningen. Denne parameter gør det muligt at angive de faste omkostninger, der er knyttet til en kilde. I stedet for at starte med en omkostning på 0, begynder omkostningsalgoritmen med den angivne værdi.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "Værdien skal være nul eller større. Standard er 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Definerer den maksimale akkumulerede omkostning for den rejsende for en kilde. Omkostningsberegningerne fortsætter for hver kilde, indtil den specificerede kapacitet er nået.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "Værdien skal være større end nul. Standardkapaciteten er til kanten af output-rasteren.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "En multiplikator, der anvendes på omkostningsværdierne.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Denne parameter gør det muligt at kontrollere rejsemåden eller størrelsen ved en kilde. Jo større multiplikator, jo større omkostning ved at bevæge sig gennem hver celle.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "Værdierne skal være større end nul. Standard er 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "En numerisk (dobbelt) værdi eller et felt fra <strong>Source Raster</strong> kan bruges til denne parameter.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "Rasteren, der definerer barriererne.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "Datasættet skal indeholde NoData, der hvor der ikke er nogen barrierer. Barrierer repræsenteres af gyldige værdier inklusive nul.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "Barriererne kan defineres af et heltal eller en raster med flydende komma.",
	"@@Distance-Allocation_sourcefield_tag0@@": "Det felt, der bruges til at tildele værdier til kildeplaceringerne. Det skal være en heltalstype.",
	"@@Distance-Allocation_sourceraster_tag0@@": "Input-kildeplacering.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Dette er et raster-datasæt, der identificerer de celler eller placeringer, hvorfra afstanden med de laveste akkumulerede omkostninger beregnes for hver output-celles placering.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Bestemmer, om kun det kun er tildelingsrasteren, der skal oprettes, eller om der oprettes et multibåndsresultat.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Ikke markeret--Resultatet er afstands-tildelingsrasteren. Dette er et enkeltbåndsresultat. Dette er standardværdien.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Markeret--Der oprettes en multibåndsraster. Det første bånd er afstands-tildelingsrasteren, det andet bånd indeholder et rækkeindeks, og det tredje bånd indeholder et kolonneindeks. Disse indekser identificerer placeringen af ​​kildecellen, der er afstanden med de laveste akkumulerede omkostninger væk.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "En raster, der definerer højdeværdierne ved hver cellelokation.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "Værdierne bruges til at beregne den faktiske overfladedistance, der tilbagelægges, når man flytter mellem cellerne.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Definerer den rejsendes retning, når man anvender vertikal faktor, horisontal faktor og kildens resistens-sats.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>From Source</strong>--Vertikal faktor, horisontal faktor og kildens resistens-sats anvendes fra input-kilden og ud til ikke-kildecellerne. Dette er standardværdien.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>To Source</strong>--Vertikal faktor, horisontal faktor og kildens resistens-sats anvendes fra hver ikke-kildecelle og tilbage til input-kilden.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Angiv enten nøgleordet <strong>From Source</strong> eller <strong>To Source</strong>, som vil blive anvendt på alle kilder, eller angiv et felt i <strong>Source Raster</strong>, der indeholder nøgleordene til at identificere kørselsretningen for hver kilde. Dette felt skal indeholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Definerer forholdet mellem den lodrette omkostningsfaktor og Vertical Relative Moving Angle (VRMA).</p><p>Der er adskillige faktorer med modifikatorer, der identificerer en defineret lodret faktorgraf. Man kan også bruge en tabel til at oprette en tilpasset graf. Graferne bruges til at identificere den lodrette faktor, der bruges til at beregne den samlede omkostning ved at bevæge sig over i en nabocelle.</p><p>I forklaringerne nedenfor anvendes to forkortelser: VF og VRMA. VF står for vertical factor, som definerer de lodrette problemer, der opstår, når man bevæger sig fra en celle til den næste. VRMA står for vertical relative moving angle, der identificerer hældningsvinklen mellem FROM-cellen, eller behandlingscellen, og TO-cellen.</p><p><strong>Vertikal faktor</strong>-typer omfatter følgende:</p><ul><li><strong>Binær</strong>--Angiver, at hvis VRMA er større end den lavt skårne vinkel og mindre end den højt skårne vinkel, er VF indstillet til den værdi, der er forbundet med nulfaktoren, ellers er den uendelig.</li><li><strong>Lineær</strong>--Indikerer, at VF er en lineær funktion af VRMA.</li><li><strong>Symmetrisk lineær</strong>--Angiver, at VF er en lineær funktion af VRMA i enten den negative eller positive side af VRMA, og de to lineære funktioner er symmetriske med hensyn til VF-aksen (y-aksen).</li><li><strong>Omvendt lineær</strong>--Indikerer, at VF er en omvendt lineær funktion af VRMA.</li><li><strong>Symmetrisk omvendt lineær</strong>--Angiver, at VF er en omvendt lineær funktion af VRMA i enten den negative eller positive side af VRMA, og de to lineære funktioner er symmetriske med hensyn til VF-aksen (y-aksen).</li><li><strong>Cos</strong>--Identificerer VF som den cosinus-baserede funktion af VRMA.</li><li><strong>Sek</strong>--Identificerer VF som den sekant-baserede funktion af VRMA.</li><li><strong>Cos-Sek</strong>--Angiver, at VF er den cosinus-baserede funktion af VRMA, når VRMA er negativ, og den sekant-baserede funktion af cosinus-baserede funktion af VRMA, når VRMA er ikke-negativ.</li><li><strong>Sek-Cos</strong>--Angiver, at VF er den sekant-baserede funktion af VRMA, når VRMA er negativ, og den cosinus-baserede funktion af VRMA, når VRMA er ikke-negativ.</li><li><strong>Tabel</strong>--Identificerer, at der bruges en tabelfil til at definere den vertikal-faktor-graf, der anvendes til at fastslå VF’erne.</li></ul><p>Modifikatorer til de lodrette nøgleord inkluderer følgende:</p><ul><li><strong>Nulfaktor</strong>--Fastslår den lodrette faktor, der anvendes, når VRMA er nul. Denne faktor positionerer y-skæringspunktet for den angivne funktion. Pr. definition kan nulfaktor ikke anvendes på trigonometriske lodrette funktioner (COS, SEK, COS-SEK eller SEK-COS). Y-skæringspunktet er defineret af disse funktioner.</li><li><strong>Lavt skåret vinkel</strong>--Definerer den VRMA-vinkel, under hvilken HF vil blive indstillet til uendelig.</li><li><strong>Højt skåret vinkel</strong>--Definerer den VRMA-vinkel, over hvilken VF vil blive indstillet til uendelig.</li><li><strong>Hældning</strong>--Fastslår hældningen for den lige linje, der bruges med<strong>Lineær</strong>og<strong>Omvendt lineær</strong>lodret-faktor-nøgleord. Hældningen angives som en brøkdel af ”rise over run” (f.eks. svarer en 45 graders hældning til 1/45, der indtastes som 0,02222).</li><li><strong>Tabelnavn</strong>--Identificerer navnet på den tabel, der definerer VF.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Definerer forholdet mellem den lodrette omkostningsfaktor og vertical relative moving angle (VRMA).",
	"@@Distance-Allocation_verticalraster_tag1@@": "Værdierne anvendes til at beregne den hældning, der bruges til at identificere den lodrette faktor, når man bevæger sig fra en celle til en anden.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "Den cellestørrelse, som output-rasteren oprettes med.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Hvis cellestørrelsen blev aktivt indstillet i <strong> Environments</strong>, bliver det standardcellestørrelsen. Hvis den ikke blev indstillet, bliver output-cellestørrelsen den samme som <strong>Source Raster</strong>.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Afgør, om afstanden skal beregnes ved hjælp af en planar-metode (flad jord) eller en geodætisk metode (ellipsoid).",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Planar - planarmålinger bruger 2D kartesisk matematik til at beregne længde og areal. Indstillingen er kun tilgængelig, når der måles i et projiceret koordinatsystem, og 2D-planet for det koordinatsystem bruges som basis for målingerne.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Geodætisk - den korteste linje mellem to punkter på jordoverfladen på en sfæroid (ellipsoide). Det betyder, at resultaterne ikke ændrer sig, uanset input- eller output-projektion.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Note:</strong> En geodætisk linje kan f.eks. bruges, når du vil bestemme den korteste afstand mellem to byer for en flyrute. Dette er også kendt som en storcirkel-linje, hvis den er baseret på en sfære i stedet for en ellipsoide.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Definerer tærskelafstanden, som retningen til den nærmeste kilde beregnes inden for. Hvis afstanden til den nærmeste kilde overstiger den, vil output for den celle være NoData.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "Standardafstanden er til udstrækningen af output-rasteren.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "Rasteren, der definerer barriererne.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "Datasættet skal indeholde NoData, der hvor der ikke er nogen barrierer. Barrierer repræsenteres af gyldige værdier inklusive nul.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "Barriererne kan defineres af et heltal eller en raster med flydende komma.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "Et rasterdatasæt, der identificerer de celler eller placeringer, som den euklidiske retning for hver output-celleplacering beregnes for.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "Input-typen kan være et heltal eller flydende komma.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "Navnet på et omkostning backlink-rasterlag, der bruges til at bestemme den sti, der skal bruges til at returnere til en kilde via ruten med laveste omkostninger.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "For hver celle i backlink-rasteren identificerer en værdi naboen, som er den næste celle på den rute med de laveste akkumulerede omkostninger fra cellen til en enkelt kildecelle eller sæt kildeceller.",
	"@@Cost-Path_costdistanceraster_tag0@@": "Navnet på en omkostning/afstand-raster, der skal bruges til at bestemme ruten med laveste omkostninger fra destinationsplaceringerne til en kilde.",
	"@@Cost-Path_costdistanceraster_tag1@@": "Omkostning/afstand-rasteren oprettes normalt med funktionen Omkostning/afstand, Omkostningsfordeling eller Omkostning BackLink. Omkostning/afstand-rasterlaget gemmer for hver celle afstanden med de laveste akkumulerede omkostninger over en omkostningsoverflade fra hver celle til et sæt kildeceller.",
	"@@Cost-Path_destinationfield_tag0@@": "Det felt, der bruges til at få værdier til destinationsplaceringer. Input-objektdata skal indeholde mindst et gyldigt felt.",
	"@@Cost-Path_destinationraster_tag0@@": "Et raster-datasætlag, der identificerer de celler, hvorfra ruten med de laveste omkostninger til kilden med de laveste omkostninger fastlægges.",
	"@@Cost-Path_destinationraster_tag1@@": "Input-rasterlaget består af celler, der har gyldige værdier (nul er en gyldig værdi), og de resterende celler skal tildeles NoData.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Tvinger funktionen til at behandle input-backlink-rasteren som en flowretningsraster. Flowretningsrastere kan have heltal med værdier fra 0-255.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Ikke markeret--Hvis værdierne for den angivne backlink-raster er heltal i området 0-8, behandles datasættet som en omkostningsbacklink-raster. Hvis værdierne er fra 0-255, behandles input som en flowretningsraster. Hvis værdierne er fra 0-360 og med flydende komma, behandles input som en tilbageretningsraster.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Markeret--Rasteren, der skal bruges til backlink-rasteren vil blive behandlet som en flowretningsraster. Brug denne indstilling for flowretningrasteren, der har en maksimal værdi på 8 eller derunder.",
	"@@Cost-Path_pathtype_tag0@@": "Et nøgleord, der definerer den måde, hvorpå værdierne og zoner på input-destinationsdataene bliver fortolket i beregningerne af rutens omkostninger. Der er følgende indstillinger:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Each Cell</strong>--For hver celle med gyldige værdier på input-destinationsdataene bestemmes en lavomkostningsrute, som gemmes på output-rasteren. Med denne indstilling behandles hver celle i input-destinationsdataene separat, og der fastlægges en lavomkostningsrute for hver celle.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Each Zone</strong>--For hver zone på input-destinationsdataene bestemmes en lavomkostningsrute, som gemmes på output-raster. Med denne mulighed begynder lavomkostningsruten ved den celle med den laveste omkostning/afstands-vægtning i zonen.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Best Single</strong>--For alle celler på input-destinationsdataene findes ruten med de laveste omkostninger fra den celle, der har det laveste antal lavomkostningsruter til kildecellerne.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "Første i - brug den første cellestørrelse i input-rastere.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Min. i - brug den mindste cellestørrelse i alle input-rastere.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Maks. i - brug den største cellestørrelse i alle input-rastere. Dette er standardværdien.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Middelværdi af - brug middelcellestørrelsen i alle input-rastere.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Sidste i - brug den sidste cellestørrelse i input-rastere.",
	"@@Cell-Statistics_extenttype_tag0@@": "Vælg, hvilken udstrækning, der skal bruges i output-rasteren:",
	"@@Cell-Statistics_extenttype_tag1@@": "Første i - brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.",
	"@@Cell-Statistics_extenttype_tag2@@": "Skæringspunkt mellem - brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.",
	"@@Cell-Statistics_extenttype_tag3@@": "Sammenlæg - brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.",
	"@@Cell-Statistics_extenttype_tag4@@": "Sidste i - brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Bestemmer, hvordan input-rasterbåndene behandles.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Ikke markeret--Alle multibånd-input behandles som enkeltbånd. Dette er standardværdien.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Markeret--Alle multibånd-input behandles som multibånd.",
	"@@Cell-Statistics_rasters_tag0@@": "Listen over rastere, som man kan beregne statistik ud fra pixel for pixel.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Bestemmer metoden for interpolation, der skal anvendes, når percentilværdien ligger mellem to inputcelleværdier.</p><ul><li><strong>Auto-registrering</strong>--Hvis input-rasterne er af heltalspixeltypen, anvendes <strong>Nærmeste</strong>-metoden. Hvis værdien af input-rasteren er af flydende komma-pixeltypen, anvendes <strong>Lineær</strong>-metoden. Dette er standardværdien.</li><li><strong>Nærmeste</strong>–Den nærmeste tilgængelige værdi i forhold til den ønskede percentil anvendes. I dette tilfælde er output-pixeltypen den samme som for input-værdirasterne.</li><li><strong>Lineær</strong>--Det vægtede gennemsnit for de to omgivende værdier fra den ønskede percentil anvendes. I dette tilfælde er output-pixeltypen flydende komma.</li></ul><p>Denne indstilling er kun tilgængelig, hvis parameteren <strong>Handling</strong> er indstillet til <strong>Median</strong>eller<strong>Percentil</strong>.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>Percentilen, der skal beregnes. Standardværdien er 90 for den 90. percentil.</p><p>Værdierne kan variere fra 0 til 100. Den 0. percentil svarer stort set til minimum-statistikken, og den 100. percentil svarer til maksimum. En værdi på 50 vil stort set give det samme resultat som Median-statistikken.</p><p>Denne indstilling er kun tilgængelig, hvis<strong>Handling</strong>-parameteren er indstillet til<strong>Percentil</strong>.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "Tilbageretningsrasteren indeholder beregnede retninger i grader. Retningen identificerer den næste celle langs med den optimale rute tilbage til den laveste akkumulerede omkostningskilde, samtidig med at barrierer undgås.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "Intervallet af værdier er fra 0 grader til 360 grader, hvor 0 er forbeholdt kildecellerne. Stik øst (højre) er 90, og værdierne stiger i retning med uret (180 er syd, 270 er vest og 360 er nord).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "Det felt, der bruges til at få værdier til destinationsplaceringer.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "Et raster-datasætlag, der identificerer de celler, hvorfra den optimale rute til kilden med de laveste omkostninger fastlægges. Dette input er påkrævet.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "Input-rasterlaget består af celler, der har gyldige værdier (nul er en gyldig værdi), og de resterende celler skal tildeles NoData.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "Afstandsakkumuleringsrasteren anvendes til at fastlægge den optimale rute fra destinationer til kilder. Afstandsakkumuleringsrasteren oprettes normalt med funktionen <strong>Afstandsakkumulering</strong>. Hver celle i afstandsakkumuleringsrasteren repræsenterer den laveste akkumulerede omkostningsafstand over en omkostningsoverflade fra hver celle til et sæt kildeceller.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Angiver et nøgleord, der definerer den måde, hvorpå værdierne og zonerne på input-destinationsdataene bliver fortolket i beregningerne af rutens omkostninger.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Each Zone</strong>--For hver zone på input-destinationsdataene bestemmes en lavomkostningsrute, som gemmes på output-raster. Med denne indstilling begynder den optimale rute for hver zone ved den celle, der har den laveste omkostningsafstandsvægtning i zonen.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Best Single</strong> – For alle celler på input-destinationsdataene findes den optimale rute fra den celle, der har det laveste antal lavomkostningsruter til kildecellerne.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Each Cell</strong> – For hver celle med gyldige værdier på input-destinationsdataene bestemmes en optimal rute. Med denne indstilling behandles hver celle i input-destinationsdataene separat, og der fastlægges en optimal rute for hver celle.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "Bånd-ID'er, de skal anvendes til ændringsdetektering. Hvis der ikke angives nogen bånd-ID'er, anvendes alle båndene fra input-rasterdatasættet.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "ID-værdierne skal være heltal adskilt af mellemrum.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "Bånd-ID'erne for det grønne bånd og SWIR-båndet, der skal anvendes til at maskere skydække, skygge fra skyer og sne. Hvis de ikke er angivet nogen bånd-ID'er, vil maskering ikke finde sted.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "ID-værdierne skal være heltal adskilt af mellemrum.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Denne parameter angiver de bånd, der skal anvendes til maskering af skydække, skygge fra skyer og sne. Da skygge fra skyer og sne vises som meget mørke i det infrarøde kortbølgebånd (SWIR), og skydække og sne vises som meget lyse i det grønne bånd, anbefales det at båndindekserne for SWIR og de grønne bånd maskeres.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "Khi2-tærsklen for sandsynlighed af ændring. Hvis en observation har en beregnet sandsynlighed for ændring, der ligger over denne tærskel, markeres det som en anomali, som er en potentiel ændringshændelse. Standardværdien er 0,99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "Det mindst mulige antal på hinanden følgende anomali-observationer, der skal forekomme, før en hændelse anses for at være en ændring. En pixel skal markeres som en anomali for det angivne antal på hinanden følgende tidsudsnit, før den anses for at være en sand ændring. Standard er 6.",
	"@@CCDC-Analysis_raster_tag0@@": "Det flerdimensionale input-rasterlag.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "Den frekvens, hvormed tidsseriemodellen opdateres med nye observationer. Standardværdien er at opdatere modellen hvert år.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Denne parameter definerer, hvor ofte tidsseriemodellen skal opdateres med nye observationer. Hvis en model opdateres meget ofte, kan det være omkostningstungt rent beregningsmæssigt, og fordelene kan være minimale. Hvis der f.eks. er 365 udsnit eller tydelige observationer pr. år i den flerdimensionale raster, og opdateringsfrekvensen er for hver observation, vil behandlingen være 365 gange dyrere rent beregningsmæssigt sammenlignet med at opdatere én gang om året, men præcisionen vil muligvis ikke være bedre.",
	"@@Trend-To-RGB_modeltype_tag0@@": "Den type modeloplysninger, der skal konverteres til RGB.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Lineær – Lineære tendensoplysninger vil blive konverteret til RGB. Dette er standardværdien.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Harmonisk – Harmoniske tendensoplysninger vil blive konverteret til RGB.",
	"@@Trend-To-RGB_raster_tag0@@": "Input-tendensraster.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>Værdi for bedste modelandel. Under modeludvælgelsesprocessen beregner værktøjet p-værdien for hver model og vælger en model, der har de fleste koordinatpunkter, samtidig med at den mindste (mest signifikante) p-værdi bevares baseret på denne andelsværdi. En værdi på 1 betyder, at modellen har den laveste p-værdi, men muligvis ikke har et højt antal koordinatpunkter. Standardværdien er 1,25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>Det maksimale antal segmenter, der kan tilpasses til tidsserierne for hver pixel. Standardværdien er 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>Det mindste antal gyldige observationer, der kræves for at udføre tilpasning. Antallet af år i det input-flerdimensionale datasæt skal være lig med eller større end denne værdi. Standardværdien er 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Angiver, om andre bånd skal inkluderes i resultaterne.</p><ul><li>Markeret – Andre bånd skal inkluderes i resultaterne. Segmenterings- og koordinatoplysningerne fra det oprindelige segmenteringsbånd, der er angivet i parameteren <strong>Behandlingsbånd</strong> vil også blive tilpasset til de resterende bånd i flerbåndsbillederne. Modelresultaterne vil først inkludere segmenteringsbåndet og derefter de resterende bånd.</li><li>Ikke markeret – Andre bånd vil ikke blive medtaget. Dette er standardværdien.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Angiv, om segmenter med ét års genopretning vil blive udelukket.</p><ul><li>Markeret – Segmenter med ét års genopretning udelukkes. Dette er standardværdien.</li><li>Ikke markeret – Segmenter med ét års genopretning vil ikke blive udelukket.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>Det bånd, der skal bruges til at segmentere pixelværdibaner over tid. Vælg det bånd, der bedst tager højde for ændringerne i det objekt, som du vil observere.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>P-værdigrænsen for den model, der skal vælges. Når koordinatpunkter registreres i den første fase af modeltilpasningen, vil værktøjet tilpasse hvert enkelt segment og beregne p-værdien med henblik på at bestemme modellens signifikans. På næste gentagelse vil denne model reducere antallet af segmenter med ét og genberegne p-værdien. Dette vil fortsætte, og hvis p-værdien er mindre end den værdi, der er angivet i denne parameter, vil denne model blive valgt, og værktøjet vil holde op med at søge efter en bedre model. Hvis en sådan model ikke vælges, vil værktøjet vælge en model med en p-værdi, der er mindre end værdien for den<strong>laveste p-værdi – bedste modelandel</strong>. Standardværdien er 0,01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>Det flerdimensionale Landsat input-rasterlag.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Angiver, om genopretningen har en stigende (positiv) tendens.</p><ul><li>Markeret – Genopretningen har en stigende (positiv) tendens. Dette er standardværdien.</li><li>Ikke markeret – Genopretningen har en faldende tendens.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>Tærskelværdien for genopretning – i år. Hvis et segment har en genopretningshastighed, der er hurtigere end<strong>1/genopretningstærskel</strong>, slettes segmentet, og det medtages ikke i tidsseriemodellen. Værdien skal være mellem 0 og 1. Standardværdien er 0,25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>Den dato, der anvendes til at vælge et udsnit for hvert år i det flerdimensionale inputdatasæt. Det udsnit, der ligger tættest på snappingdatoen, vil blive valgt. Denne parameter er påkrævet, hvis inputdatasættet indeholder data på under ét år.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>Den tærskel, der skal anvendes til at dæmpe toppunkter eller afvigelser i pixelværdibanen. Værdien skal være mellem 0 og 1, hvor 1 betyder, at der ikke er nogen dæmpning. Standardværdien er 0,9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>Antallet af ekstra koordinatpunkter ud over<strong>max_num_segments + 1</strong>, der kan bruges til at tilpasse denne model i den første fase af identifikationen af koordinatpunkter. Senere i modelleringsprocessen vil antallet af ekstra koordinatpunkter blive reduceret til<strong>max_num_segments + 1</strong>. Standardværdien er 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>Inputrasterdatasæt eller flerdimensionale rasterdatasæt, der skal flettes.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Angiver den metode, der skal bruges til at håndtere overlappende pixels i kombinerede datasæt.</p><ul><li><strong>Første</strong>–Pixelværdien i de overlappende områder er værdien fra den første raster på listen over inputrastere. Dette er standardværdien.</li><li><strong>Sidste</strong>–Pixelværdien i de overlappende områder er værdien fra den sidste raster på listen over inputrastere.</li><li><strong>Min.</strong>–Pixelværdien i overlappende områder er den minimale værdi af de overlappende pixels.</li><li><strong>Maks.</strong>–Pixelværdien i de overlappende områder er den maksimale værdi af de overlappende pixels.</li><li><strong>Middel</strong>–Pixel-værdien i de overlappende områder er gennemsnittet af de overlappende pixels.</li><li><strong>Sum</strong>–Pixelværdien i de overlappende områder er den samlede sum af de overlappende pixels.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Angiver den tidsenhed, der skal anvendes til længden af en harmonisk cyklus.</p><ul><li><strong> Dage</strong>–Enheden for længden af den harmoniske cyklus er dage.</li><li><strong>År</strong>–Enheden for længden af den harmoniske cyklus er år. Dette er standardværdien.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>Den dimension, langs hvilken en tendens vil blive udtrukket for den eller de variabler, der er valgt i analysen.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>Frekvenstallet, der skal bruges i tendenstilpasningen. Denne parameter angiver frekvensen af cyklusser på et år. Standardværdien er 1 eller én harmonisk cyklus om året.</p><p>Denne parameter er kun inkluderet i tendensanalysen for en harmonisk regression.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Angiver, om NoData-værdier tilsidesættes i analysen.</p><ul><li>Markeret – Analysen omfatter alle gyldige pixels langs en given dimension og tilsidesætter eventuelle NoData-pixels. Dette er standardværdien.</li><li>Ikke markeret – Analysen resulterer i NoData, hvis der er NoData-værdier for pixlerne langs med den givne dimension.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>Længden af en periodisk variation, der skal modelleres. Enheden af dage, uanset inputdataenes tidsenhed. For eksempel har bladenes \"grønhed\" ofte én stærk variationscyklus på et enkelt år, så cyklussens længde er 365,25 år, selvom inputdataene er \"grønhed pr. måned\". Data for hver times temperatur har én stærk variationscyklus i løbet af en enkelt dag, så cyklussens længde er 1.</p><p> Standardlængden er 365,25 dage for data, der varierer i en årlig cyklus.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Angiver, om der skal beregnes p-værdi-statistik for tendenskurvens hældningskoefficient.</p><ul><li>Markeret – P-værdien beregnes og vises i oplysningerne, når funktionen afsluttes.</li><li>Ikke-markeret – P-værdien beregnes ikke. Dette er standardværdien.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>Det polynomiske rækkefølge-nummer, der skal bruges i tendenstilpasningen. Denne parameter angiver den polynomiske rækkefølge. Standardværdien er 2 eller andengradspolynomium.</p><p>Denne parameter er kun inkluderet i tendensanalysen for en polynomisk regression.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Angiver, om den R-kvadratiske goodness of fit-statistik skal beregnes for tendenstilpasningslinjen.</p><ul><li>Markeret – Den R-kvadratiske værdi beregnes og vises i oplysningerne, når funktionen afsluttes.</li><li>Ikke markeret – Den R-kvadratiske værdi beregnes ikke. Dette er standardværdien.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>Den flerdimensionale inputraster.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Angiver, om kvadratroden af den gennemsnitlige kvadratafvigelse (RMSE) skal genereres for tendenstilpasningslinjen.</p><ul><li>Markeret – RMSE beregnes og vises i oplysningerne, når funktionen afsluttes. Dette er standardværdien.</li><li>Ikke markeret – RMSE beregnes ikke.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Angiver den tidsenhed, der skal anvendes til længden af en sæsonbestemt periode, når Seasonal-Kendall-testen udføres.</p><ul><li>Dage – Enheden for længden af den sæsonbestemte periode er dage. Dette er standardværdien</li><li>. Måneder – Enheden for længden af den sæsonbestemte periode er måneder.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Angiver den type linje, der skal bruges for at tilpasse til pixelværdierne langs med en dimension.</p><ul><li><strong>Lineær</strong>–Tilpasser pixelværdierne for en variabel langs med en lineær tendenskurve. Dette er standardværdien.</li><li><strong>Harmonisk</strong>–Tilpasser pixelværdierne for en variabel langs med en harmonisk tendenskurve.</li><li><strong>Polynomial</strong>–Tilpasser pixelværdierne for en variabel langs med en andengradspolynomisk tendenskurve.</li><li><strong>Mann-Kendall</strong>–Variable pixelværdier vil blive beregnet ved hjælp af Mann-Kendall-tendenstesten.</li><li><strong>Seasonal Kendall</strong>–Variable pixelværdier vil blive bedømt ved hjælp af Seasonal-Kendall-tendenstesten.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.</p><ul><li>Første i – Brug den første cellestørrelse i input-rastere.</li><li>Min. i – Brug den mindste cellestørrelse i alle input-rastere.</li><li>Maks. i – Brug den største cellestørrelse i alle input-rastere. Dette er standardværdien</li><li>. Middelværdi af – Brug middelcellestørrelsen i alle input-rastere.</li><li>Sidste i – Brug den sidste cellestørrelse i input-rastere.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>Metode, der anvendes til beregning.</p><ul><li><strong>Forskel</strong>–Den matematiske forskel – eller subtraktion – mellem pixelværdierne i de inputrastere, der skal beregnes. Dette er standarden.</li><li><strong>Relativ forskel</strong> - Forskellen i pixelværdier, der tager højde for størrelsen af de værdier, der sammenlignes, bliver beregnet.</li><li><strong>Kategorisk forskel</strong> - Forskellen mellem to kategoriske eller tematiske rastere bliver beregnet, hvor outputtet indeholder klasseovergange, der er opstået mellem de to rastere.</li><li><strong> Spektral euklidisk afstand</strong> - Den euklidiske afstand mellem pixelværdierne for to multibåndsrastere bliver beregnet. </li><li><strong>Spektralvinkelforskel</strong> - Spektralvinklen mellem pixelværdierne for to multibåndsrastre bliver beregnet. Outputtet er i radianer.</li><li><strong>Bånd med mest ændring</strong> - Det bånd, der tegner sig for den største ændring i hver pixel mellem to multibåndsrastere, bliver beregnet.</li></ul><p>Hvis <strong>Beregning af ændringsmetoden</strong> er sat til <strong>Kategorisk forskel</strong>, og et input ikke er kategorisk, beregnes der en simpel forskel.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Angiv den metode, der skal bruges til at symbolisere de pixels, der har ændret klasser.</p><ul><li><strong>Gennemsnit fra og til farver</strong>–Pixlens farve vil være gennemsnittet af farven på den oprindelige klasse og farven på den endelige klasse.</li><li><strong>Brug fra farver</strong>–Pixlens farve vil være farven på den oprindelige klasse.</li><li><strong>Brug til farver</strong>–Pixlens farve vil være farven på den endelige klasse.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Vælg, hvilken udstrækning der skal anvendes i output-rasteren:</p><ul><li>Første i – Brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.</li><li> Skæringspunkt mellem – Brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.</li><li>Sammenlæg – Brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.</li><li>Sidste i – Brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Vælg filtreringsmetoden for kategorisk ændringsberegning.</p><ul><li><strong>Bevar alle</strong>– Alle klasser er inkluderet i outputtet, og der vil ikke forekomme filtrering. Vælg denne indstilling for at se ændring og fastholdelse i et enkelt datasæt.</li><li><strong>Bevar kun ændrede pixels</strong>–Kun de klasser, der er blevet ændret fra én klassetype til en anden klassetype, er inkluderet i outputtet. Vælg denne indstilling, hvis du udelukkende er interesseret i at foretage ændringer.</li><li><strong>Bevar kun uændrede pixels</strong>–Kun de klasser, der ikke er blevet ændret, medtages i outputtet. Vælg denne indstilling, hvis du udelukkende er interesseret i fastholdelse.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>Klasseværdierne fra<strong>Fra raster</strong>, der skal medtages i beregningen, hvis der skal sammenlignes med to kategoriske rastere. Dette er en rumbegrænset liste med heltalsværdier, der svarer til feltet <strong>ClassValue</strong> i dit input-rasterdatasæt.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>Den første raster, der skal anvendes i beregningen. Hvis du vil evaluere ændringen fra tid 1 (tidligere) til tid 2 (senere), skal du indtaste tid 1-rasteren her.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>Klasseværdierne fra<strong>Til raster</strong>, der skal medtages i beregningen, hvis der skal sammenlignes med to kategoriske rastere. Dette er en rumbegrænset liste med heltalsværdier, der svarer til feltet <strong>ClassValue</strong> i dit input-rasterdatasæt.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>Den anden raster, der skal anvendes i beregningen. Hvis du vil evaluere ændringen fra tid 1 (tidligere) til tid 2 (senere), skal du indtaste tid 2-rasteren.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Angiv den metode, der skal bruges til at symbolisere de pixels, der har ændret klasser.</p><ul><li><strong>Gennemsnit fra og til farver</strong>–Pixlens farve vil være gennemsnittet af farven på den oprindelige klasse og farven på den endelige klasse.</li><li><strong>Brug fra farver</strong>–Pixlens farve vil være farven på den oprindelige klasse.</li><li><strong>Brug til farver</strong>–Pixlens farve vil være farven på den endelige klasse.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>Et felt, der lagrer klassenavne i <strong>Fra raster</strong>-inputtet. Værktøjet søger automatisk efter det<strong>ClassName</strong>-felt eller <strong>Class_Name</strong>-felt, der skal anvendes.</p><p>Brug denne indstilling, hvis inputtet ikke indeholder disse standardfeltnavne.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>Et felt, der lagrer klassenavne i<strong>Til raster</strong>-inputtet. Værktøjet søger automatisk efter det<strong>ClassName</strong>-felt eller<strong>Class_Name</strong>-felt, der skal anvendes.</p><p>Brug denne indstilling, hvis inputtet ikke indeholder disse standardfeltnavne.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>Antallet af pixelkolonner, der skal bruges i en fokuseret nabodimension.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>Antallet af pixelrækker, der skal bruges i en fokuseret nabodimension.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Udfylder NoData-huller i outputtet. Dette er nyttigt, når der muligvis er tabte linjer i dine billeder.</p>",
	"@@Statistics_raster_tag0@@": "<p>Den input-raster, der skal beregnes fokuseret statistik på.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>Følgende er de syv typer fokuserede statistiske funktioner:</p><ul><li>Minimum–Beregner minimumværdien for pixels inden for nabolaget.</li><li>Maksimum–Beregner maksimumværdien for pixels inden for nabolaget.</li><li>Gennemsnit--Beregner gennemsnitsværdien for pixels inden for nabolaget. Dette er standardværdien</li><li>Standardafvigelse–Beregner standardafvigelsesværdien for pixels inden for nabolaget.</li><li>Median–Beregner medianværdien for pixels inden for nabolaget.</li><li>Majoritet–Beregner majoritetens værdi eller den værdi, der forekommer oftest, for pixlerne inden for nabolaget.</li><li>Minoritet–Beregner minoritetsværdien eller den værdi, der forekommer sjældnest, for pixlerne inden for nabolaget.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Angiver den ændringsretning, der skal inkluderes i analysen.</p><p>Denne parameter er kun tilgængelig, når input-ændringsanalyserasteren er outputtet fra LandTrendr-værktøjerne.</p><ul><li><strong>Alle retninger</strong>–Alle ændringsretninger er inkluderet i outputtet. Dette er standardværdien</li><li><strong>Stigende</strong>–Kun ændring i den positive eller stigende retning er inkluderet i outputtet.</li><li><strong>Faldende</strong>–Kun ændring i den negative eller faldende retning er inkluderet i outputtet.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Angiver de ændringsoplysninger, der skal beregnes.</p><ul><li><strong>Tid for seneste ændring</strong> – Hver pixel vil indeholde datoen for den seneste ændring af den pågældende pixel i tidsserien. Dette er standardværdien.</li><li><strong>Tid for tidligste ændring</strong>–Hver pixel indeholder datoen for den tidligste ændring for den pågældende pixel i tidsserien.</li><li><strong>Tid for største ændring</strong>–Hver pixel indeholder datoen for den mest signifikante ændring i tidsserien.</li><li><strong>Antal ændringer</strong>­Hver pixel indeholder det samlede antal gange, den pågældende pixel er blevet ændret i tidsserien.</li><li><strong>Tid for længste ændring</strong>–Hver pixel indeholder datoen for ændring i slutningen af det længste overgangssegment i tidsserien</li><li><strong>Tid for korteste ændring</strong>­Hver pixel indeholder datoen for ændring i slutningen af det korteste overgangssegment i tidsserien</li><li><strong>Tid for hurtigste ændring</strong>­Hver pixel indeholder datoen for ændring i slutningen af den overgang, der er indtruffet hurtigst i tidsserien</li><li><strong>Tid for langsomste ændring</strong>­Hver pixel indeholder datoen for ændring i slutningen af den overgang, der er indtruffet langsomst i tidsserien.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Angiv, om der skal filtreres efter ændringens varighed</p><p></p><ul><li>. Markeret – Filtrerer resultater efter varighed, så kun de ændringer, der har varet en bestemt tid, medtages i outputtet.</li><li>Ikke markeret – Filtrerer ikke resultater efter varighed. Dette er standardværdien.</li></ul><p>Denne parameter er kun tilgængelig, når input-ændringsanalyserasteren er output fra LandTrendr-værktøjerne.</p><p>Hvis denne parameter er markeret, skal du indstille parametrene<strong>Minimumsvarighed</strong>og<strong>Maksimumsvarighed</strong> for filtrering.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Angiver, om der skal filtreres efter ændringsstørrelse</p><ul><li>Markeret – Filtrerer resultater efter størrelse, så kun ændringer af en given størrelse medtages i outputtet.</li><li>Ikke markeret – Filtrerer ikke resultater efter størrelse. Dette er standardværdien.</li></ul><p>Denne parameter er kun tilgængelig, når input-ændringsanalyserasteren er output fra LandTrendr-værktøjerne.</p><p>Hvis denne parameter er markeret, skal du indstille parametrene<strong>Minimumsstørrelse</strong>og<strong>Maksimumsstørrelse</strong> for filtrering.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Angiver, om outputtet skal begrænses med en række år.</p><ul><li>Markeret – Filtrerer resultater, så kun ændringer, der er opstået inden for en bestemt række år, medtages i outputtet.</li><li>Ikke markeret – Filtrerer ikke efter en række år. Dette er standardværdien.</li></ul><p>Hvis denne parameter er markeret, skal du indstille parametrene<strong>Minimumsværdi</strong>og<strong></strong>Maksimumsværdi</p> for filtrering.",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Filtrér resultater efter startværdi, så kun ændringer af en given startværdi medtages i outputtet.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Filtrér resultater efter slutværdi, så kun ændringer af en given slutværdi medtages i outputtet.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>Det maksimale antal ændringer pr. pixel, der skal beregnes. Det angivne antal svarer til antallet af bånd i output-rasteren. Standardværdien er 1, hvilket betyder, at der kun beregnes én ændringsdato, og at output-rasteren kun indeholder ét bånd.</p><p>Denne parameter er ikke tilgængelig, når parameteren<strong>Ændringstype</strong>er indstillet til<strong>Antal ændringer</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>Input-ændringsanalyseraster.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Angiver, om datoen skal udtrækkes i begyndelsen eller slutningen af et ændringssegment.</p><p>Denne parameter er kun tilgængelig, når input-ændringsanalyserasteren er output fra LandTrendr-værktøjerne.</p><ul><li><strong>Start på segment</strong>–Udtræk datoen i begyndelsen af et ændringssegment. Dette er standardværdien.</li><li><strong>Slutning på segment</strong>–Udtræk datoen i slutningen af et ændringssegment.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>Områdeenheder for outputtæthedsværdierne.</p><ul><li>Kvadratkortenheder – For kvadratet af de lineære enheder i den spatiale output-reference.</li><li>Square Miles–For miles (USA).</li><li>Kvadratkilometer– For kilometer.</li><li>Acres–For acres (USA).</li><li>Hektarer – For hektarer.</li><li>Kvadratmeter–For meter.</li><li>Square Yards–For yards (USA).</li><li>Square Feet–For fod (USA).</li><li>Square Inches–For tommer (USA).</li><li>Kvadratcentimeter – For centimeter.</li><li>Kvadratmillimeter – For millimeter.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>Pixelstørrelsen for output-rasterdatasættet. Hvis værdien for <strong>Cellestørrelse</strong> er blevet indstillet i geoprocesseringsmiljøer, vil denne være standardværdien.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>Det datasæt, der definerer grænserne.</p><p>Grænserne kan være et vektorlag med polylinje- eller polygonobjekter.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>De input-punkt- eller linjeobjekter, som tætheden skal beregnes for.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Bestemmer, om der skal bruges en korteste vej på en sfæroid (geodætisk) eller en flad-jords (planar)-metode.</p><ul><li><strong>Planar</strong>–Bruger planar-afstande mellem objekterne. Dette er standardværdien.</li><li><strong>Geodesic</strong>–Bruger geodætiske afstande mellem objekter. Denne metode tager højde for sfæroidens krumning og håndterer data korrekt nær polerne og den internationale datolinje.</li></ul><p>Det anbefales, at du bruger den<strong>geodætiske</strong>metode med data, der er lagret i et koordinatsystem, som ikke er velegnet til afstandsmålinger og analyse, der spænder over et stort geografisk område. Web Mercator eller et vilkårligt geografisk koordinatsystem bør f.eks. benytte den <strong>geodætiske</strong> metode.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Bestemmer, hvad værdierne i output-rasteren repræsenterer.</p><ul><li><strong>Tæthedsværdi.</strong>–Outputværdierne repræsenterer den forudsagte tæthedsværdi. Dette er standardværdien</li><li><strong> Forventede antal</strong>–Output-værdierne repræsenterer den forudsagte mængde af fænomenet inden for hver pixel. Da pixelværdien er knyttet til den specificerede<strong>Cellestørrelse</strong>, kan den resulterende raster ikke resamples til en anden pixelstørrelse og stadig repræsentere mængden af ​​fænomenet.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Felter, der angiver populationsværdier for hvert objekt. <strong>Populationsfelt</strong>-værdien er antallet eller mængden, der skal spredes over landskabet for at skabe en kontinuerlig overflade. Værdierne i <strong>Populationsfeltet</strong>kan være heltal eller flydende komma.</p><p>Valgmuligheder og standardadfærd for feltet er vist nedenfor i prioriteret rækkefølge.</p><ul><li>Brug<strong>Ingen</strong>, hvis der ikke bruges noget element eller en særlig værdi, og hvert objekt vil blive talt én gang.</li><li>Brug <strong>Shape</strong>, hvis input-objekterne indeholder Z.</li><li>Ellers er standardfeltet <strong>POPULATION</strong> eller enhver acceptabel afledning termen \"population\":<ul><li><strong>POPULATIONxxxx</strong>, hvor<strong>xxxx</strong>kan være et gyldigt tegn, såsom<strong>POPULATION6</strong>,<strong>POPULATION1974</strong> eller <strong>POPULATIONROADTYPE</strong>.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>Hvis ingen af de ovennævnte er gyldige, er standardværdien <strong>Ingen</strong>.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>Den søgeradius, som der skal beregnes tæthed inden for. Enheder er baseret på projektionens lineære enhed.</p><p>Hvis enhederne f.eks. er i meter – hvis du vil inkludere alle objekter i et naboområde på én mile – skal du indstille søgeradiussen til at være lig med 1609,344 (fordi 1 mile = 1609,344 meter).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Angiver, om<strong>NoData</strong>-værdier i <strong>Value Raster</strong>vil påvirke resultaterne af den zone, de falder inden for.</p><ul><li><strong>Ja</strong>–Inden for en bestemt zone bruges kun pixels, der har en værdi i <strong>Value Raster</strong>, til at bestemme outputværdien for den pågældende zone.<strong>NoData</strong>-pixels i <strong>Value Raster</strong>vil blive tilsidesat i den statistiske beregning. Dette er standardværdien.</li><li><strong>No</strong>–Hvis der inden for en bestemt zone findes <strong>NoData</strong>-pixels i <strong>Value Raster</strong>, vurderes det, at der er utilstrækkelige oplysninger til at udføre statistiske beregninger for alle pixlerne i den pågældende zone. Derfor vil hele zonen modtage <strong>NoData</strong>-værdien på output-rasteren.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Bestemmer metoden for percentilinterpolation, der skal anvendes, når antallet af værdier fra input-rasteren, der skal beregnes, er lige.</p><ul><li><strong>Auto-registrering</strong>–Hvis værdien af input-rasteren er af heltalspixeltypen, anvendes Nærmeste<strong></strong>-metoden. Hvis værdien af input-rasteren er af flydende komma-pixeltypen, anvendes<strong>Lineær</strong>-metoden. Dette er standardværdien.</li><li><strong>Nærmeste</strong>–Den nærmeste tilgængelige værdi i forhold til den ønskede percentil anvendes. I dette tilfælde er output-pixeltypen den samme som for input-værdirasteren.</li><li><strong>Lineær</strong>–Det vægtede gennemsnit for de to omgivende værdier fra den ønskede percentil anvendes. I dette tilfælde er output-pixeltypen flydende komma.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>Percentilen, der skal beregnes. Standardværdien er 90 for den 90. percentil.</p><p>Værdierne kan variere fra 0 til 100. Den 0. percentil svarer stort det til Minimum-statistikken, og den 100. percentil svarer til Maksimum. En værdi på 50 vil stort set give det samme resultat som Median-statistikken.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Bestemmer, hvordan flerdimensionale input-værdiraster skal behandles.</p><ul><li><strong>Aktuelt udsnit</strong>–Statistikken vil blive beregnet ud fra de aktuelle udsnit af et flerdimensionalt datasæt. Dette er standardværdien.</li><li><strong>Alle udsnit</strong>––Statistikken vil blive beregnet for alle dimensioner (f.eks. tid eller dybde) af et flerdimensionalt datasæt.</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>Statistiktype, der skal beregnes.</p><ul><li><strong>Gennemsnit</strong>–Beregner gennemsnittet af alle pixels i<strong>Value Raster</strong>, der hører til den samme zone som output-pixlen.</li><li><strong>Majoritet</strong>–Bestemmer den værdi, der oftest forekommer af alle pixels i <strong>Value Raster</strong>, som hører til samme zone som outputpixlen.</li><li><strong>Maksimum</strong>–Bestemmer den største værdi af alle pixels i <strong>Value Raster</strong>, der hører til samme zone som outputpixlen.</li><li><strong>Median</strong>–Bestemmer medianværdien af ​​alle pixels i <strong>Value Raster</strong>, der hører til samme zone som outputpixlen.</li><li><strong>Minimum</strong>–Bestemmer den mindste værdi af alle pixels i <strong>Value Raster</strong>, der hører til samme zone som outputpixlen.</li><li><strong>Minoritet</strong>Bestemmer den værdi, der forekommer sjældnest for alle pixels i <strong>Value Raster</strong>, der hører til samme zone som outputpixlenpixel.</li><li><strong>Percentil</strong>–Beregner en percentil for alle pixels i <strong>Value Raster</strong>, der hører til samme zone som outputpixlen. Den 90. percentil beregnes som standard. Du kan bestemme, hvilken percentil der skal beregnes ved hjælp af parameteren<strong>Percentilværdi</strong>.</li><li><strong>Område</strong>–Beregner forskellen mellem den største og den mindste værdi af alle pixels i <strong>Value Raster</strong>, der hører til samme zone som outputpixlen.</li><li><strong>Standardafvigelse</strong>–Beregner standardafvigelsen for alle pixels i <strong>Value Raster</strong>, der hører til samme zone som outputpixlen.</li><li><strong>Sum</strong>–Beregner den samlede værdi af alle pixels i <strong>Value Raster</strong>, der hører til samme zone som outputpixlen.</li><li><strong>Variation</strong>–Beregner antallet af unikke værdier for alle pixels i <strong>Value Raster</strong>, der hører til samme zone som outputpixlen.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Raster, der indeholder de værdier, der skal beregnes en statistik for.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>Felt, der indeholder de værdier, der definerer hver zone. Det kan være et heltal eller et strengfelt i zonerasteren.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>Datasæt, der definerer zonerne. Zonerne kan defineres af en heltalsraster.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>Angiver, hvordan statistiktypen vil blive beregnet.</p><ul><li><strong>Aritmetisk</strong>–Beregner aritmetisk statistik. Dette er standardværdien.</li><li><strong>Cirkulær</strong>– Beregner cirkulære statistikker, der er relevante for cykliske mængder, f.eks. kompasretning i grader, tidspunkter på dagen og brøkdele af reelle tal.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>Den højest mulige værdi (øvre grænse) i de cykliske data. Det er et positivt tal med en standardværdi på 360. Denne værdi repræsenterer også den samme mængde som den lavest mulige værdi (nedre grænse).</p><p>Denne parameter gælder kun, når der beregnes cirkulære statistikker.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>Den inputraster, som grænsen mellem zonerne skal udjævnes for.</p><p>Den skal være af heltalstypen.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Angiver det antal gange, udjævningsprocessen finder sted, én eller to gange.</p><ul><li><p><strong>Markeret</strong>–Udfører en udvidelses- og formindskelseshandling to gange. Første gang udføres handlingen i overensstemmelse med den angivne sorteringstype. Derefter udføres en yderligere udvidelses- og formindskelseshandling med modsat prioritet. Dette er standardværdien.</p></li><li><p><strong>Ikke markeret</strong>–Udfører udvidelses- og formindskelseshandlingen én gang i overensstemmelse med sorteringstypen.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Angiver den type sortering, der skal bruges i forbindelse med udjævningsprocessen. Sorteringen bestemmer prioriteringen af, hvilke celler der kan udvide sig til sine naboer.</p><p>Sorteringen kan foretages på grundlag af zoneværdi eller zoneområde</p><ul><li><p><strong>Sortér ikke</strong>–Zonerne sorteres ikke efter størrelse. Zoner med større værdier vil have en højere prioritering med henblik på at udvide sig til zoner med mindre værdier i det udjævnede output. Dette er standardværdien.</p></li><li><p><strong>Faldende</strong>–Sorterer zoner i faldende rækkefølge efter størrelse. Zoner med større samlede områder vil have en højere prioritering med henblik på at udvide sig til zoner med mindre samlede områder. Denne indstilling har tendens til at fjerne eller reducere antallet af celler fra mindre zoner i det udjævnede output.</p></li><li><p><strong>Stigende</strong>–Sorter zoner i stigende rækkefølge efter størrelse. Zoner med mindre samlede områder vil have en højere prioritering med henblik på at udvide sig til zoner med større samlede områder. Denne indstilling har tendens til at bevare eller øge antallet af celler fra mindre zoner i det udjævnede output.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>Aggregeringsdimensionen. Det er den dimension, som variablerne aggregeres langs.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Angiver den metode, der skal bruges til at filtrere de input-flerdimensionale data, før aggregeringen udføres.</p><ul><li><strong>All</strong>--Det fulde interval for hver dimension vil blive brugt. Dette er standardværdien.</li><li><strong>By Values</strong>--Dimensionen inddeles ved hjælp af en dimensionsværdi eller en liste over værdier.</li><li><strong>By Ranges</strong>--Dimensionen inddeles ved hjælp af et interval eller en liste over intervaller.</li><li><strong>By Iteration</strong>--Dimensionen inddeles over en angivet intervalstørrelse.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Med Iteration Definition-parametrene kan du definere de dimensionsværdier, der skal bruges til at filtrere de input-flerdimensionale data, der skal analyseres, når parameteren <strong>Dimension Definition</strong> er indstillet til <strong>By Iteration</strong>.</p><ul><li><strong>Dimension</strong>--Den dimension, der skal anvendes til filtrering.</li><li><strong>Start of first iteration</strong>--Starten af første interval. Dette interval bruges til gentagelse i datasættet.</li><li><strong>End of first iteration</strong>--Slutningen af første interval. Dette interval bruges til gentagelse i datasættet.</li><li><strong>Step</strong>--Den frekvens, hvormed data inddeles.</li><li><strong>Unit</strong>--Angiver gentagelsesenheden.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Angiver det nøgleordsinterval, der skal anvendes, når der aggregeres langs med dimensionen.</p><p>Denne parameter er påkrævet, parameteren <strong>Type</strong>er indstillet til <strong>Interval Keyword</strong>.</p><ul><li><strong>Hourly</strong>--Dataværdierne bliver aggregeret i trin på en time, og resultatet omfatter hver enkelt time i tidsserien. Dette er standardværdien.</li><li><strong>Daily</strong>--Dataværdierne bliver aggregeret i trin på en dag, og resultatet omfatter hver enkelt dag i tidsserien.</li><li><strong>Weekly</strong>--Dataværdierne bliver aggregeret i trin på en uge, og resultatet omfatter hver enkelt uge i tidsserien.</li><li><strong>Dekadly</strong>--Dataværdierne aggregeres til 3 perioder på 10 dage hver. Den sidste periode kan indeholde flere eller færre end 10 dage. Outputtet indeholder 3 tidsudsnit for hver måned.</li><li><strong>Pentadly</strong>--Dataværdierne aggregeres til 6 perioder på 5 dage hver. Den sidste periode kan indeholde flere eller færre end 5 dage. Outputtet indeholder 6 tidsudsnit for hver måned.</li><li><strong>Monthly</strong>--Dataværdierne bliver aggregeret i trin på en måned, og resultatet omfatter hver eneste måned i tidsserien.</li><li><strong>Quarterly</strong>--Dataværdierne bliver aggregeret i trin på et kvartal, og resultatet omfatter ethvert kvartal i tidsserien.</li><li><strong>Yearly</strong>--Dataværdierne bliver aggregeret i trin på et år, og resultatet omfatter hvert enkelt år i tidsserien.</li><li><strong>Recurring daily</strong>--Dataværdierne bliver aggregeret i trin på en dag, og resultatet omfatter en aggregeret værdi pr. juliansk dag. Outputtet indeholder højst 366 daglige tidsudsnit.</li><li><strong>Recurring weekly</strong>--Dataværdierne bliver aggregeret i trin på en uge, og resultatet omfatter en aggregeret værdi pr. uge. Outputtet indeholder højst 53 ugentlige tidsudsnit.</li><li><strong>Recurring monthly</strong>--Dataværdierne bliver aggregeret i trin på en måned, og resultatet omfatter en aggregeret værdi pr. måned. Outputtet indeholder højst 12 månedlige tidsudsnit.</li><li><strong>Recurring quarterly</strong>--Dataværdierne bliver aggregeret i trin på et kvartal, og resultatet omfatter en aggregeret værdi pr. kvartal. Outputtet indeholder højst 4 kvartalsvise tidsudsnit.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Angiver den matematiske metode, der bruges til at kombinere de aggregerede tidsudsnit i et interval.</p><ul><li><strong>Majority</strong>--Beregner den værdi, der forekom mest hyppigt for en pixel på tværs af alle udsnit i intervallet.</li><li><strong>Maximum</strong>--Beregner den maksimale værdi af en pixel på tværs af alle udsnit i intervallet.</li><li><strong>Mean</strong>--Beregner middelværdien af en pixels værdier på tværs af alle udsnit i intervallet. Dette er standardværdien.</li><li><strong>Median</strong>--Beregner medianværdien af en pixel på tværs af alle udsnit i intervallet.</li><li><strong>Minimum</strong>--Beregner minimumværdien af en pixel på tværs af alle udsnit i intervallet.</li><li><strong>Minority</strong>--Beregner den værdi, der forekom mindst hyppigt for en pixel på tværs af alle udsnit i intervallet..</li><li><strong>Range</strong>--Beregner værdi-intervallet for en pixel på tværs af alle udsnit i intervallet.</li><li><strong>Standard Deviation</strong>--Beregner standardafvigelsen af en pixels værdier på tværs af alle udsnit i intervallet.</li><li><strong>Sum</strong>--Beregner summen af en pixels værdier på tværs af alle udsnit i intervallet.</li><li><strong>Variety</strong>--Beregner antallet af unikke værdier for en pixel på tværs af alle udsnit i intervallet.</li></ul><p>Alle indstillinger har også en tilsvarende indstilling med en Ignorer NoData-indstilling. Disse vil udføre en matematisk handling på alle gyldige pixels langs en given dimension og ignorerer eventuelle NoData-pixels.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p> intervalområderne, der er angivet i en tabel, anvendes til at aggregere grupper af værdier. Minimum- og maksimumværdierne angiver det interval, der skal inkluderes.</p><p>Denne parameter er obligatorisk når parameteren <strong>Type</strong> er indstillet til <strong>Interval Ranges</strong>.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>Den flerdimensionale inputraster.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Angiver det dimensionsinterval, som dataene bliver aggregeret for.</p><ul><li><strong>All</strong>--De variable data vil blive aggregeret på tværs af alle udsnit. Dette er standardværdien.</li><li><strong>Interval Keyword</strong>--De variable data aggregeres ved hjælp af et almindeligt kendt interval.</li><li><strong>Interval Value</strong>--De variable data aggregeres ved hjælp af brugerdefineret interval og enhed.</li><li><strong>Interval Ranges</strong>--De variable data aggregeres mellem angivne par af værdier og datoer.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>Størrelsen på det interval, der skal bruges til aggregering.</p><p>Denne parameter er påkrævet, når parameteren <strong>Type</strong> er indstillet til <strong>Interval Value</strong>.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>De dimensionsværdier, der anvendes til at filtrere de input-flerdimensionale data, der skal analyseres. Denne parameter er påkrævet, når parameteren <strong>Dimension Definition</strong>er indstillet til <strong>By Values</strong>.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>Den eller de variabler, der aggregeres langs den givne dimension.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>Den angivne Esri-regressionsdefinitionsfil (<strong>.ecd</strong>), som indeholder statistikken og oplysningerne for det angivne datasæt, regressionsmodellen og de valgte attributter.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>Rasterdatasættet eller datasættene repræsenterer prognosebaserede variabler. Det kan være raster med med et bånd, flere bånd, flere dimensioner, mosaikdatasættet eller en rastersamling.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>Den type statistisk beregning, du ønsker at udføre.</p><p>De tilgængelige statistikker er<strong>Majoritet</strong>,<strong>Maksimum</strong>,<strong>Middel</strong>,<strong>Median</strong>,<strong>Minimum</strong>,<strong></strong>Minoritet,<strong>Percentil</strong>,<strong>Område</strong>,<strong>Standardafvigelse</strong>,<strong>Sum</strong>,<strong>og Variation</strong>.</p><p>Standardindstillingen er<strong>Middel</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>Farver tildeles tilfældigt til pixels, der ikke er inkluderet i farvekortet.</p><ul><li>Ikke markerede--ikke-tilknyttede pixels tildeles ikke nogen farve. Dette er standarden.</li><li>Markeret -- ikke-tilknyttede pixels tildeles en farve.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>Hvis Gram-Schmidt-algoritmen vælges, kan du også angive den sensor, der indsamlede flerbåndsraster-inputtet. Når du vælger sensortype, indstilles de korrekte båndvægte.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>Værdien for, hvor mange udsnit før eller over der skal medtages i det definerede vindue. Værdien skal være et positivt heltal fra 1 til 100. Standardværdien er 1.</p><p>Enheden for denne parameter er udsnit.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>Den værdi, der bliver brugt til at afrunde en lineær værdi til området for en given cirkulær middelværdi.</p><p>Værdien skal være positiv. Standardværdien er 360 grader.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>Navnet på den dimension, langs hvilken vinduet flyttes.</p><p>Standardværdien er den første dimension ud over x,y, der findes i det multidimensionale rasterinput.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>Værdien for, hvor mange udsnit efter eller under der skal medtages i det definerede vindue. Værdien skal være et positivt heltal fra 1 til 100. Standardværdien er 1.</p><p>Enheden for denne parameter er udsnit.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>Inputrasteren kan kun være en multidimensional raster i Cloud-Raster-format (<strong>.crf</strong>-fil).</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>Angiver, hvordan NoData-værdier håndteres af statistikberegningen.</p><ul><li><strong></strong>--NoData-værdier i værdiinputtet bliver ignoreret i resultaterne af det definerede vindue, som de falder inden for. Dette er standarden.</li><li><strong>NoData</strong>--outputværdier blive til NoData, hvis der findes nogen NoData-værdier i inputtet inden for det definerede vindue.</li><li><strong>Udfyld NoData</strong>--NoData-celleværdier erstattes med den valgte statistik inden for det definerede vindue.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Angiver den interpolationsmetode, der skal bruges, når percentilværdien falder mellem to celleværdier.</p><ul><li><strong>Automatisk registrering</strong>--Hvis inputrasteren er af typen heltalspixel, anvendes metoden <strong>Nærmeste</strong>. Hvis inputrasteren er af typen flydende pixel, anvendes metoden <strong>Lineær</strong>. Dette er standardværdien.</li><li><strong>Nærmeste</strong>--Den nærmest tilgængelige værdi i forhold til percentilen anvendes. I dette tilfælde bliver output-pixeltypen den samme som for input-værdirasteren.</li><li><strong>Lineær</strong>–Det vægtede gennemsnit for de to omgivende værdier fra den ønskede percentil anvendes. I dette tilfælde vil output-pixeltypen blive med flydende komma.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>Den percentil, der beregnes, når<strong>Percentil</strong>vælges som statistiktypen. Standardværdien er 90 for den 90. percentil.</p><p>Værdierne kan variere fra 0 til 100. Den 0. fraktil svarer stort set til minimum-statistikken, og den 100. fraktil svarer til maksimum, bortset fra, at resultatet bliver med flydende komma. En værdi på 50 vil frembringe det samme resultat som median-statistikken.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Angiver den statistiske type, der skal beregnes.</p><p></p><ul><li><strong></strong>--Middel (gennemsnitsværdien) for cellerne i det definerede vindue beregnes. Dette er standarden.</li><li><strong>Cirkulær middelværdi</strong>-- Cellernes cirkulære middelværdi i det definerede vindue beregnes. Når denne statistiktype vælges,bliver parameteren <strong>Cirkulær ombrydningsværdi</strong> tilgængelig.</li><li><strong>Majoritet</strong>-- Majoriteten (værdien, der forekommer oftest) af cellerne i det definerede vindue identificeres.</li><li><strong>Maksimum</strong>-- Den maksimale (største værdi) af cellerne i det definerede vindue identificeres.</li><li><strong>Median</strong>-- Medianen for cellerne i naboområdet identificeres.</li><li><strong>Minimum</strong>-- Minimum (mindste værdi) af cellerne i naboområdet identificeres.</li><li><strong>Percentil</strong>-- En percentil for cellerne i naboområdet beregnes. Når denne statistiktype vælges,bliver parametrene <strong>Percentil-værdi</strong>og<strong>Percentil-interpolationstype</strong>tilgængelige. Brug disse nye parametre til henholdsvis at angive den percentil, der skal beregnes, og at vælge den interpolationstype, der skal bruges.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>Den dimension, der skal bruges til interpolation.</p><p>Denne parameter er påkrævet, når<strong>parameteren Dimensionsdefinition</strong>er indstillet til <strong>Efter interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Angiver den metode, der skal bruges til at filtrere de indtastede flerdimensionale data, før interpoleringen udføres.</p><ul><li><strong>Efter værdier</strong>-- Dimensionen delt ved hjælp af en dimensionsværdi eller værdiliste.</li><li><strong>Efter interval</strong>--Dimensionen bliver delt ved hjælp af et område eller en liste over områder.</li><li><strong>Efter målraster</strong>--Dimensionen bliver delt ved hjælp af en specifik mål- og flerdimensional raster.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>Slutningen af intervallet, der bruges til gentagelse gennem datasættet.</p><p>Denne parameter er obligatorisk, når parameteren <strong>Dimensionsdefinition</strong>er indstillet til<strong>Efter interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Angiver, om NoData-værdier ignoreres i analysen.</p><ul><li>Ikke markerede--Analysen resulterer i NoData, hvis der er NoData-værdier i tilstødende udsnit. Dette er standarden.</li><li>Markerede-- Analysen vil kun bruge udsnit, der har gyldige pixels, og den ignorerer NoData-udsnit.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Angiver den metode, der skal bruges til at interpolere rasteren.</p><ul><li><strong>Lineær</strong>-- Outputtet interpoleres lineært ved hjælp af de tilstødende udsnit. Dette er standarden.</li><li><strong>Nærmeste nabo</strong>--Outputtet bruger det nærmeste tilstødende udsnit.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>Den flerdimensionale inputraster.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>Starten af intervallet, der bruges til gentagelse gennem datasættet.</p><p>Denne parameter er obligatorisk, når parameteren <strong>Dimensionsdefinition</strong>er indstillet til<strong>Efter interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>Frekvensen hvormed dataene interpoleres.</p><p>Denne parameter er obligatorisk, når parameteren <strong>Dimensionsdefinition</strong>er indstillet til<strong>Efter interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>Målrasteren, der er angivet ved definition af dimensionen.</p><p>Denne parameter er obligatorisk, når parameteren <strong>Dimensionsdefinition</strong>er indstillet til<strong>Efter målraster</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>Intervalenheden.</p><p>Denne parameter er obligatorisk, når parameteren <strong>Dimensionsdefinition</strong>er indstillet til<strong>Efter interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>Dimensionsværdierne, der skal bruges til at filtrere de indtastede flerdimensionale data til analyse.</p><p>Denne parameter er påkrævet, når parameteren <strong>Dimensionsdefinition</strong>er indstillet til<strong>Efter værdier</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>Den eller de variabler, der interpoleres ved definition af dimensionen.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Angiver, om outputtet skal være terrænudjævnet ved hjælp af <strong>Sigma-nought</strong>eller<strong>Gamma-nought</strong>.</p><ul><li><strong>Gamma-nought</strong> - Beta-nought tilbagespredning vil blive normaliseret ved hjælp af enhedsarealet af en plan lokal tangent til DEM, almindeligvis kendt som den lokale incidensvinkel. Dette er standard.</li><li><strong>Sigma-nought</strong> - Beta-nought tilbagespredning vil blive normaliseret ved hjælp af en DEM til at beregne arealet.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>Input-DEM.</p><p>DEM bruges til at estimere det lokale oplyste areal.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Angiver, om det vertikale referencesystem for input-DEM ændres til ellipsoid højde. De fleste højdedatasæt refereres til i havniveau (ortometrisk højde), så en korrektion er påkrævet i disse tilfælde for at konvertere til ellipsoid højde. </p><ul><li>Afkrydset - En geoidkorrektion vil blive foretaget for at konvertere ortometrisk højde til ellipsoid højde (baseret på EGM96 geoide). Dette er standard.</li><li>Ikke afkrydset - Der foretages ingen geoidkorrektion. Brug kun denne indstilling, hvis DEM er udtrykt i ellipsoid højde.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>Inputradardata.</p><p>Denne raster skal først kalibreres radiometrisk til beta-nought.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>Beregningen, der er tildelt det tredje bånd. </p><p>Et båndnavn, bånd-id eller et algebraisk udtryk, der benytter båndene.</p><p>De understøttede operatorer er unitære: plus (+), minus (-), gange (*) og divider (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "B<p>eregningen, der er tildelt det andet bånd. </p><p>Et båndnavn, bånd-id eller et algebraisk udtryk, der benytter båndene.</p><p>De understøttede operatorer er unitære: plus (+), minus (-), gange (*) og divider (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>Inputmultibånds-rasterdata.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Angiver metoden, der vil blive brugt til at udtrække bånd. </p><ul><li>Båndnavne - Båndnavnet, der repræsenterer bølgelængdeintervallet på det elektromagnetiske spektrum (såsom rød, nær infrarød eller termisk infrarød) eller polariseringen (såsom VH, VV, HH eller HV ) anvendes. Dette er standard.</li><li>Band-id'er - Båndnummeret (såsom B1, B2 eller B3) anvendes.</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>Beregningen, der er tildelt det første bånd. </p><p>Et båndnavn, bånd-id eller et algebraisk udtryk, der benytter båndene.</p><p>De understøttede operatorer er unitære: plus (+), minus (-), gange (*) og divider (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Vælg den type overfladefunktion, der skal tilpasses omkring målcellen.</p><ul><li>Kvadratisk – En kvadratisk overfladefunktion vil blive tilpasset til nabocellerne. Dette er standardtypen.</li><li>Bikvadratisk – En bikvadratisk overfladefunktion vil blive tilpasset til nabocellerne.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>Outputtet vil blive beregnet over denne afstand fra målcellens centrum. Den bestemmer \"nabolagets\" størrelse. Standardværdien er den angivne rastercellestørrelse, hvilket resulterer i et nabolag på 3 x 3.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>De måleenheder (grader eller procenter), der skal anvendes til output-hældningsrasteren. Denne parameter er kun aktiv, når<strong>Parametertypen</strong>er<strong>Hældning</strong>.</p><ul><li>Grader – Hældningsvinklen beregnes i grader. Dette er standardværdien.</li><li>Stigningsprocent – Hældningsvinklen vil blive beregnet som en stigning i procent – også benævnt som hældningsprocenten.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Angiver den output-overfladeparametertype, der vil blive beregnet.</p><ul><li>Hældning – Ændringsraten i højden beregnes. Dette er standardværdien.</li><li>Aspekt – Den nedadgående hældning for den maksimale ændringsrate for hver celle vil blive beregnet.</li><li>Middelkrumning – Overfladens overordnede krumning måles. Den beregnes som gennemsnittet af den minimale og maksimale krumning. Denne krumning beskriver overfladens iboende konveksitet eller konkavitet uafhængigt af retning eller tyngdepåvirkning.</li><li>Tangential (normal kontur) krumning – Den geometriske normalkrumning vinkelret på hældningslinjen, der tangerer konturlinjen, måles. Denne krumning anvendes typisk til at karakterisere konvergens eller divergens af strømningen på tværs af overfladen.</li><li>Profil (normal hældningslinje) krumning – Den geometriske normalkrumning langs med hældningslinjen måles. Denne krumning anvendes typisk til at karakterisere accelerationen og decelerationen af strømningen ned ad overfladen.</li><li>Plan (projiceret kontur) krumning – Krumningen langs med konturlinjerne måles.</li><li>Kontur geodætisk vridning – Ændringsraten for hældningsvinklen langs med konturlinjerne måles.</li><li>Gaussisk krumning – Overfladens overordnede krumning måles. Den beregnes som produktet af den minimale og maksimale krumning.</li><li>Casoratisk krumning – Overfladens generelle krumning måles. Den kan være nul eller et hvilket som helst andet positivt tal.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Angiver, om geodætiske azimutter skal projiceres for at korrigere den vinkelforvrængning, der er forårsaget af den output-spatiale reference. Denne parameter er kun aktiv, når<strong>Parametertypen</strong>er<strong>Aspekt</strong>.</p><ul><li>Umarkeret – Geodætiske azimutter projiceres ikke. Dette er standardværdien.</li><li>Markeret – Geodætiske azimutter projiceres.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>Input-overfladeraster. Det kan være et heltal eller en raster med flydende komma.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Angiver, om afstanden til nabolaget varierer i takt med landskabsforandringer (adaptivt). Den maksimale afstand bestemmes af naboafstanden. Den minimale afstand er størrelsen af input-rastercellen.</p><ul><li>Umarkeret – Der anvendes en enkelt (fast) naboafstand på alle positioner. Dette er standardværdien.</li><li>Markeret – Der anvendes en tilpasset (adaptiv) naboafstand på alle positioner.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Angiver, om aspekt skal måles fra et punkt på ækvator eller fra Nordpolen. Denne parameter er kun aktiv, når<strong>Parametertypen</strong>er<strong>Aspekt</strong>.</p><ul><li>Umarkeret – Aspekt måles fra Nordpolen. Dette er standardværdien.</li><li>Markeret – Aspekt måles fra et punkt på ækvator.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>Den lineære måleenhed for vertikale z-værdier.</p><p>Den defineres af et vertikalt koordinatsystem, hvis et sådant findes. Hvis der ikke findes et vertikalt koordinatsystem, skal z-enheden defineres ud fra enhedslisten for at sikre korrekt geodætisk beregning.</p><ul><li>Tomme – Den lineære måleenhed vil være tommer.</li><li>Fod – Den lineære måleenhed vil være fod.</li><li>Yard – Den lineære måleenhed vil være yards.</li><li>Mile (USA) – Den lineære måleenhed vil være amerikanske miles.</li><li>Sømil – Den lineære måleenhed vil være sømil.</li><li>Millimeter – Den lineære måleenhed vil være millimeter.</li><li>Centimeter – Den lineære måleenhed vil være centimeter.</li><li>Meter – Den lineære måleenhed vil være meter. Dette er standardværdien.</li><li>Kilometer – Den lineære måleenhed vil være kilometer.</li><li>Decimeter – Den lineære måleenhed vil være decimeter.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>En raster, der angiver de positioner, hvor analysen vil finde sted.</p><p>Rasteren kan være af typen heltal eller flydende komma.</p><p>Alle celler med en gyldig værdi, inkl. nul, vil udgøre masken. Celler, der er NoData i maske-inputtet, vil være NoData i outputtet.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Vælg, hvilken cellestørrelse der skal bruges i output-rasteren. Hvis alle input-cellestørrelser er ens, giver alle indstillinger samme resultat.</p><ul><li>Første i – Brug den første cellestørrelse i input-rastere.</li><li>Min. i – Brug den mindste cellestørrelse i alle input-rastere.</li><li>Maks. i – Brug den største cellestørrelse i alle input-rastere. Dette er standardværdien</li><li>. Middelværdi af – Brug middelcellestørrelsen i alle input-rastere.</li><li>Sidste i – Brug den sidste cellestørrelse i input-rastere.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>Angiver konvergensværdien mellem to på hinanden følgende gentagelser. Når epsilon er mindre end eller lig med den angivne værdi, stopper gentagelsen, og resultatet af den sidste gentagelse anvendes.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Vælg, hvilken udstrækning der skal anvendes i output-rasteren</p><ul><li><p>Første i – Brug udstrækningen i den første input-raster til at bestemme behandlingsudstrækningen.</p></li><li> Skæringspunkt mellem – Brug udstrækningen af de overlappende pixels til at bestemme behandlingsudstrækningen. Dette er standardværdien.</li><li>Sammenlæg – Brug udstrækningen af alle rastere til at bestemme behandlingsudstrækningen.</li><li>Sidste i – Brug udstrækningen i den sidste input-raster til at bestemme behandlingsudstrækningen.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Angiver det maksimale antal gentagelser, der skal udføres. Beregningen slutter, når denne værdi er nået, uanset <strong>Epsilon</strong>-indstillingen.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>Inputmultibånds-rastere.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>Inputrasteren repræsenterer den akkumulerede omkostningsafstand fra den første kilde.</p><p>Det skal være et akkumuleret omkostning/afstands-output fra <strong>Afstandsakkumulerings</strong>- eller<strong>Afstandsallokerings</strong>-funktionen.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>Inputrasteren repræsenterer den akkumulerede omkostningsafstand fra den anden kilde.</p><p>Det skal være et akkumuleret omkostning/afstands-output fra <strong>Afstandsakkumulerings</strong>- eller <strong>Afstandsallokerings</strong>-funktionen</p>.",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>Input-tilbageretningsrasteren fra den første kilde.</p><p>Dette er et rasterdatasæt, der identificerer retningen af den næste celle langs med den mindst omkostningskrævende vej tilbage til den første kilde. Dette er outputtet fra <strong>Afstandsakkumulerings</strong>- eller <strong>Afstandsallokerings</strong>-funktionen.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>Input-tilbageretningsrasteren fra den anden kilde.</p><p>Dette er et rasterdatasæt, der identificerer retningen af den næste celle langs med den mindst omkostningskrævende vej tilbage til den første kilde. Dette er outputtet fra <strong>Afstandsakkumulerings</strong>- eller <strong>Afstandsallokerings</strong>-funktionen.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>En procentvis eller akkumuleret omkostningstærskel, der afgør, om en given celle skal medtages i output-korridorrasteren.</p><p>Når <strong>Tærskelmetode</strong>-parameteren er indstillet til<strong>Procent for laveste omkostning</strong>, angiver den specificerede værdi den procentvise stigning, der skal anvendes fra minimumsværdien af de summerede akkumulerede omkostningsafstandsrastere. Når <strong>Tærskelmetode</strong>-parameteren er indstillet til <strong>Akkumuleret omkostning</strong>, angiver værdien celler, der har en summeret akkumuleret omkostning, der er lig med eller under den værdi, der vil blive inkluderet i korridoren.</p><p>Denne parameter er kun aktiv, hvis <strong>Tærskelmetode</strong>-parameteren er indstillet til <strong>Procent for laveste omkostning</strong> eller <strong>Akkumuleret omkostning</strong>.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Angiver, hvordan tærsklen skal defineres.</p><p></p><ul><li><strong>Ingen tærskel</strong>--Der vil ikke blive anvendt nogen tærskel, og den resulterende korridor vil dække den fulde udstrækning af inputrasterne. Dette er standardindstillingen.</li><li><strong>Procent for laveste omkostning</strong>--Tærsklen vil blive defineret som en procentdel af minimumsværdien af de summerede akkumulerede omkostningsafstandsrastere.</li><li><strong>Akkumuleret omkostning</strong>--Tærsklen defineres i enheder for akkumuleret omkostningsafstand.</li></ul>"
};
const helpTexts_da = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_da);


//# sourceMappingURL=help-texts.da-2dc7d010.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,