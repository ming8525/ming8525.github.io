"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-4736a7"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.nb-24786143.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.nb-24786143.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Abs_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Abs_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Abs_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Abs_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Abs_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Abs_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Abs_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Abs_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Abs_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Abs_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Abs_Raster_tag0@@": "Inndatarasteret som de absolutte verdiene skal beregnes for.",
	"@@ACos_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@ACos_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@ACos_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@ACos_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@ACos_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@ACos_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@ACos_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@ACos_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@ACos_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@ACos_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@ACos_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@ACos_Raster_tag0@@": "Inndataen som verdiene for invers cosinus skal beregnes for.",
	"@@ACosH_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@ACosH_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@ACosH_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@ACosH_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@ACosH_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@ACosH_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@ACosH_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@ACosH_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@ACosH_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@ACosH_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@ACosH_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@ACosH_Raster_tag0@@": "Inndataen som verdiene for inverse hyperbolsk cosinus skal beregnes for.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "Resultatene for funksjonen Synlig reflektans kan også uttrykkes som albedo, som er prosentandelen av den tilgjengelige energien som reflekteres av planetoverflaten. Albedodata brukes til kompleks modellering og tekniske fjernmålingsapplikasjoner.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Ikke avmerket – Funksjonen returnerer verdier for synlig reflektans. Dette er standardalternativet.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Valgt – Funksjonen returnerer 32-bits flyttallsverdier som vanligvis er i området 0,0 til 1,0. Ingen dataklipping utføres hvis dette alternativet er valgt.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Siden utdatatypen for albedo er flyttall, må du spesifikt angi foretrukket <strong>Output Pixel Type</strong> til enten 32 bit flyttall eller 64 bit dobbel. Parameteren <strong>Output Pixel Type</strong> finnes i <strong>Generelt</strong>-fanen i rasterfunksjonen <strong>Apparent Reflectance</strong>. Hvis <strong>Output Pixel Type</strong> ikke er angitt riktig for <strong>Albedo</strong>-alternativet, blir resulterende verdier ugyldige og gitt verdien 0.",
	"@@Apparent-Reflectance_Offset_tag0@@": "Den skalerte albedo-verdien kan eventuelt ha en forskyvningsverdi:",
	"@@Apparent-Reflectance_Offset_tag1@@": "For 16-bit-datatyper uten fortegn er standard skalaforskyvning 5 000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "For 8-bit-datatyper uten fortegn er standard skalaforskyvning 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "Ingen skalering brukes når utdata er albedo.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "Du kan angi eller redigere denne verdien manuelt for hvert bånd. Relevant informasjon kan leses ut av metadataene for inndatarasterproduktet.",
	"@@Apparent-Reflectance_Raster_tag0@@": "Rasterproduktet som synlig reflektans skal brukes på.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "Utdataverdien for synlig reflektans kan uttrykkes som et heltall. Skaleringsfaktoren multipliseres med albedo for å konvertere alle flyttallsverdier til heltallsverdier.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Hvis skaleringsfaktoren er ${0} eller ikke er angitt, brukes standard skalering avhengig av pikseltypen i inndataene:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "For 16-bit-datatyper uten fortegn er standard skaleringsfaktor 50 000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "For 8-bit-datatyper uten fortegn er standard skaleringsfaktor 255.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "Skaleringsfaktoren brukes alltid når utdataen er synlig reflektans. Ingen skalering brukes når utdata er albedo.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Dette er verdien for solhøyde uttrykt i grader. Denne fylles ut av systemet hvis nødvendig informasjon kan leses ut av metadataene. Du kan angi eller redigere denne verdien manuelt.",
	"@@ArgStatistics_Max_tag0@@": "Maksimumsverdien du angir er den høyeste verdien som er lik eller mindre enn slutten på varigheten.",
	"@@ArgStatistics_Max_tag1@@": "Disse inndataene gjelder kun når metoden er Varighet.",
	"@@ArgStatistics_Method_tag0@@": "Velg statistikkmetoden for å beregne:",
	"@@ArgStatistics_Method_tag1@@": "Arg max –  Argumentet for det maksimum som returnerer ${Band index} som den gitte pikselen oppnår sin maksimumsverdi fra alle båndene for. Alle rasterbånd fra alle inndataraster tilordnes en 0-basert trinnvis båndindeks som først sorteres etter inndatarasteret og deretter etter den relative båndrekkefølgen innenfor hvert inndataraster.",
	"@@ArgStatistics_Method_tag2@@": "Arg median – Argumentet for medianen som returnerer ${Band index} som den gitte pikselen oppnår sin medianverdi av verdiene fra alle båndene for.",
	"@@ArgStatistics_Method_tag3@@": "Arg min –  Argumentet for det minimum som returnerer ${Band index} som den gitte pikselen oppnår minimumsverdien fra alle båndene for.",
	"@@ArgStatistics_Method_tag4@@": "Varighet – metoden Varighet finner de lengste etterfølgende elementene i en matrise der hvert element har en verdi som er større enn eller lik <strong>Min</strong> og mindre eller lik <strong>Max</strong>, og returnerer deretter lengden.",
	"@@ArgStatistics_Min_tag0@@": "Minimumsverdien du angir er den laveste verdien som er lik eller større enn begynnelsen på varigheten.",
	"@@ArgStatistics_Min_tag1@@": "Disse inndataene gjelder kun når metoden er Varighet.",
	"@@ArgStatistics_Rasters_tag0@@": "Inndatarasteret som du vil utføre de ulike statistiske metodene på.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "En konstant inndataverdi som returneres når det ikke kan oppnås en definitiv maksimum, minimum eller median. Det mest vanlige scenarioet er når maksimums- eller minimumsverdien opptrer flere ganger blant verdier fra alle bånd. Standardverdien for den udefinerte konstanten er 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "Den udefinerte klassen gjelder kun når metoden er <strong>ArgMax</strong>, <strong>ArgMin</strong> eller <strong>ArgMedian</strong>.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Angir om NoData-verdier ignoreres i den statistiske beregningen.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Avmerket – Analysen inkluderer alle gyldige piksler i inndatarastrene og ignorerer eventuelle NoData-piksler.",
	"@@ArgStatistics_ignorenodata_tag2@@": "Ikke avmerket – Analysen resulterer i NoData hvis det finnes NoData-verdier for pikslene i inndatarastrene. Dette er standardalternativet.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Arithmetic_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Arithmetic_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Arithmetic_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Arithmetic_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Arithmetic_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Arithmetic_Operation_tag0@@": "Den aritmetiske operasjonen som skal utføres mellom de to inndatarastrene.",
	"@@Arithmetic_Operation_tag1@@": "Alternativene er som følger:",
	"@@Arithmetic_Operation_tag2@@": "<strong>Divide</strong> – Gir det delelige resultatet mellom de tilsvarende pikselverdiene for hvert raster.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Minus</strong> – Gir forskjellen mellom de tilsvarende pikselverdiene for hvert raster. Det kan brukes til å beregne endringsdeteksjon.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Mode</strong> – Gir pikselverdien for alle overlappende piksler som forekommer oftest. Hvis det for eksempel er seks bånd i et raster, er det seks overlappende piksler. For verdiene 4, 5, 6, 4, 7 og 9 er modusverdien 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Multiply</strong> – Gir produktet av de tilsvarende pikselverdiene for hvert raster. Dette kan brukes til å utføre enkelte kostnadsfunksjoner.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Plus</strong> – Gir summen av alle de tilsvarende pikselverdiene for hvert raster.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Power</strong> – Gir produktet av de tilsvarende pikselverdiene hevet til potensen av inndatarasteret eller -skalaren.",
	"@@Arithmetic_Raster_tag0@@": "Første inngående rasterdatasett.",
	"@@Arithmetic_Raster2_tag0@@": "Andre inngående rasterdatasett.",
	"@@ASin_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@ASin_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@ASin_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@ASin_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@ASin_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@ASin_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@ASin_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@ASin_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@ASin_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@ASin_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@ASin_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@ASin_Raster_tag0@@": "Inndataen som verdiene for invers sinus skal beregnes for.",
	"@@ASinH_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@ASinH_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@ASinH_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@ASinH_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@ASinH_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@ASinH_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@ASinH_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@ASinH_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@ASinH_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@ASinH_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@ASinH_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@ASinH_Raster_tag0@@": "Inndataen som verdiene for invers hyperbolsk sinus skal beregnes for.",
	"@@Aspect_Raster_tag0@@": "Inndata-DEM som brukes til å ut utlede aspektdatasettet.",
	"@@Aspect-Slope_Raster_tag0@@": "Inndata-DEM.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "En skaleringsfaktor som brukes til å konvertere høydeverdiene til følgende to formål:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "Konverter høydeenhetene (for eksempel meter eller fot) til de horisontale koordinatenhetene for datasettet, som kan være fot, meter eller grader.",
	"@@Aspect-Slope_Z-Factor_tag2@@": "Legg til vertikal overdrivelse for visuell effekt.",
	"@@ATan_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@ATan_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@ATan_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@ATan_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@ATan_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@ATan_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@ATan_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@ATan_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@ATan_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@ATan_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@ATan_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@ATan_Raster_tag0@@": "Inndataen som verdiene for invers tangens skal beregnes for.",
	"@@ATan2_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@ATan2_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@ATan2_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@ATan2_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@ATan2_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@ATan2_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@ATan2_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@ATan2_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@ATan2_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@ATan2_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@ATan2_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@ATan2_Raster_tag0@@": "Inndataen som angir telleren, eller y-verdien, som skal brukes ved beregning av invers tangens.",
	"@@ATan2_Raster2_tag0@@": "Inndataen som angir nevneren, eller x-verdien, som skal brukes ved beregning av invers tangens.",
	"@@ATanH_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@ATanH_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@ATanH_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@ATanH_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@ATanH_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@ATanH_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@ATanH_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@ATanH_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@ATanH_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@ATanH_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@ATanH_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@ATanH_Raster_tag0@@": "Inndataen som verdiene for invers hyperbolsk tangens skal beregnes for.",
	"@@Attribute-Table_Raster_tag0@@": "Inndatarasteret.",
	"@@Attribute-Table_Table-Type_tag0@@": "Inndatatabellen med attributter kan angis ved hjelp av <strong>Manual</strong>-typen, der du tilordner et klassenavn eller en farge til hver verdi, eller du kan henvise til en eksisterende tabell som hentes fra en ${.dbf}-fil.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Definer den aritmetiske formelen for bånd hvis du velger <strong>User Defined</strong> for <strong>Method</strong>.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "Hvis du velger en forhåndsdefinert indeks for <strong>Method</strong>, definerer du de korrekte båndene for inndatarastersettet som tilsvarer indeksen.",
	"@@Band-Arithmetic_Method_tag0@@": "Typen aritmetisk algoritme for bånd du vil implementere. Du kan angi en egendefinert algoritme, eller velge en forhåndsdefinert indeks.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong> – Burn Area Index",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>CIg</strong> – Chlorophyll Index – Green",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>CIre</strong> – Chlorophyll Index –Red Edge",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Leirmineraler</strong> – andel leirmineraler",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong> – Enhanced Vegetation Index",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Jernholdige mineraler</strong> –andel jernholdige mineraler",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong> – Global Environmental Monitoring Index",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong> – Green Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong> – Green Vegetation Index Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Iron Oxide</strong> –andel jernoksid",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong> – Modified Normalized Difference Water Index",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong> – Modified Triangulated Vegetation Index (second iteration)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>Modified SAVI</strong> – Modified Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong> – Normalized Burn Ratio Index",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong> – Normalized Difference Built-up Index",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong> – Normalized Difference Moisture Index",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong> – Normalized Difference Snow Index",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong> – Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong> – Red-Edge Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong> – Normalized Difference Water Index",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong> – Perpendicular Vegetation Index",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong> – Red-Edge Triangulated Vegetation Index",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong> – Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong> – Simple Ratio",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong> – Red-Edge Simple Ratio",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Sultan's Formula</strong> – Sultan's Formula",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>Transformed SAVI</strong> –Transformed Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>Brukerdefinert</strong> – Lar deg definere ditt eget båndaritmetiske uttrykk.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong> – Visible Atmospherically Resistant Index",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong> – Weighted Normalized Difference Water Index",
	"@@Band-Arithmetic_Raster_tag0@@": "Inndatarasteret.",
	"@@Binary-Thresholding_Raster_tag0@@": "Inndatarasteret.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Bitwise-And_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-And_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-And_Raster_tag0@@": "Første inndata som skal brukes i denne bitwise-operasjonen.",
	"@@Bitwise-And_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Bitwise-And_Raster2_tag0@@": "Andre inndata som skal brukes i denne bitwise-operasjonen.",
	"@@Bitwise-And_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "Inndata som forskyvningen skal utføres på.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "Inndata som definerer antall plasser bitene skal forskyves.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Not_Raster_tag0@@": "Inndatarasteret som  Bitwise Not (complement)-operasjonen skal utføres på.",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Or_Raster_tag0@@": "Første inndata som skal brukes i denne bitwise-operasjonen.",
	"@@Bitwise-Or_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Bitwise-Or_Raster2_tag0@@": "Andre inndata som skal brukes i denne bitwise-operasjonen.",
	"@@Bitwise-Or_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "Inndata som forskyvningen skal utføres på.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "Inndata som definerer antall plasser bitene skal forskyves.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Bitwise-Xor_Raster_tag0@@": "Første inndata som skal brukes i denne bitwise-operasjonen.",
	"@@Bitwise-Xor_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Bitwise-Xor_Raster2_tag0@@": "Andre inndata som skal brukes i denne bitwise-operasjonen.",
	"@@Bitwise-Xor_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Boolean-and_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Boolean-and_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Boolean-and_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Boolean-and_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Boolean-and_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Boolean-and_Raster_tag0@@": "Første inndata som skal brukes i denne boolske operasjonen.",
	"@@Boolean-and_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Boolean-and_Raster2_tag0@@": "Andre inndata som skal brukes i denne boolske operasjonen.",
	"@@Boolean-and_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Boolean-Not_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Boolean-Not_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Boolean-Not_Raster_tag0@@": "Første inndata som skal brukes i denne boolske operasjonen.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Boolean-Or_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Boolean-Or_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Boolean-Or_Raster_tag0@@": "Første inndata som skal brukes i denne boolske operasjonen.",
	"@@Boolean-Or_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Boolean-Or_Raster2_tag0@@": "Andre inndata som skal brukes i denne boolske operasjonen.",
	"@@Boolean-Or_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Boolean-Xor_Raster_tag0@@": "Første inndata som skal brukes i denne boolske operasjonen.",
	"@@Boolean-Xor_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Boolean-Xor_Raster2_tag0@@": "Andre inndata som skal brukes i denne boolske operasjonen.",
	"@@Boolean-Xor_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Buffered_Raster_tag0@@": "Inndatarasteret som skal lagres i minnet.",
	"@@Calculator_Cellsize-Type_tag0@@": "Cellestørrelsen som brukes til å opprette utdatarasteret.",
	"@@Calculator_Cellsize-Type_tag1@@": "Du kan velge blant følgende utdatacellestørrelser i rullegardinmenyen:",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>First of</strong> – Cellestørrelsen for den første rastervariabelen.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Min of</strong> – Den minste cellestørrelse for inndatarastrene.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Max of</strong> – Den største cellestørrelse for inndatarastrene.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Mean of</strong> – Den gjennomsnittlige cellestørrelsen for inndatarastrene.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Last of</strong> – Cellestørrelsen for den siste rastervariabelen.",
	"@@Calculator_Cellsize-Type_tag12@@": "Standardinnstillingen er <strong>Største av</strong>.",
	"@@Calculator_Expression_tag0@@": "Lag et algebraisk uttrykk for å utføre romlig analyse på inndatarasteret.",
	"@@Calculator_Expression_tag1@@": "Alle eksisterende matematiske funksjoner kan kalles for å opprette uttrykket. Tilgjengelige operatorer er oppført nedenfor.",
	"@@Calculator_Expression_tag2@@": "Aritmetiske operasjoner",
	"@@Calculator_Expression_tag3@@": "Addisjon: +",
	"@@Calculator_Expression_tag4@@": "Divisjon: /",
	"@@Calculator_Expression_tag5@@": "Modulo: %",
	"@@Calculator_Expression_tag6@@": "Multiplikasjon: *",
	"@@Calculator_Expression_tag7@@": "Potens: **",
	"@@Calculator_Expression_tag8@@": "Subtraksjon: -",
	"@@Calculator_Expression_tag9@@": "Boolske operasjoner",
	"@@Calculator_Expression_tag10@@": "Boolsk And: &&",
	"@@Calculator_Expression_tag11@@": "Boolsk Or: ||",
	"@@Calculator_Expression_tag12@@": "Relasjonsoperasjoner",
	"@@Calculator_Expression_tag13@@": "Lik: ==",
	"@@Calculator_Expression_tag14@@": "Større enn: >",
	"@@Calculator_Expression_tag15@@": "Større enn eller lik: >=",
	"@@Calculator_Expression_tag16@@": "Mindre enn: <",
	"@@Calculator_Expression_tag17@@": "Mindre enn eller lik: <=",
	"@@Calculator_Expression_tag18@@": "Ikke lik: !=",
	"@@Calculator_Expression_tag19@@": "Flere operasjoner",
	"@@Calculator_Expression_tag20@@": "Minimum to raster per piksel: min(a,b)",
	"@@Calculator_Expression_tag21@@": "Maksimum to raster per piksel: max(a,b)",
	"@@Calculator_Expression_tag22@@": "Eksempel på uttrykk:",
	"@@Calculator_Expression_tag23@@": "Enkel betinget setning: i et raster (betegnet T) finnes høydeverdier over 4 000 fot og disse områdene gis verdien 1 og alle andre områder gis verdien 0.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Nestet betinget setning: finn områder der helningen (betegnet b1)) er under 10 grader, og NDVI (betegnet b2) er over 0,5, og gi disse områdene verdien 1. For alle andre områder tilordne verdien 2 hvis helningen er over 10 grader og høyde (betegnet som b3) er over 2 500 fot. Alle andre områder tilordnes verdien 3.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Velg hvilket omfang som skal brukes i utdatarasteret:</p><ul><li><p>Først av – Bruk omfanget av det første inndatarasteret til å bestemme omfanget av behandlingen.</p></li><li>Skjæringspunkt av – Bruk omfanget av overlappende pikslene til å bestemme omfanget av behandlingen. Dette er standardalternativet.</li><li>Union av – Bruk omfanget av alle rasterne til å bestemme omfanget av behandlingene.</li><li>Sist av – Bruk omfanget av det siste inndatarasteret til å bestemme omfanget av behandlingen.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "Det brukerdefinerte variabelnavnet og inndatarasteret.",
	"@@Classify_Input-Definition-File_tag0@@": "Esri-definisjonsfilen for klassifisering (${.ecd}) som er inndata, inneholder statistikk og annen klassifiseringsinformasjon for det angitte datasettet, klassifisereren og valgte attributter.",
	"@@Classify_Raster_tag0@@": "Rasterdatasettet du vil klassifisere.",
	"@@Classify_Raster2_tag0@@": "Et valgfritt ekstra rasterdatasett som skal inkorporeres i klassifisereren, for eksempel et segmentert bilde, multispektralt bilde eller høydedata, som brukes til å generere en mer robust klassifiseringsdefinisjon til datasettet ditt. Rasterdatasettet for denne parameteren må samsvare med det som som er brukt til å opprette Esri-definisjonsfilen for klassifisering.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "Følgende kan brukes til å angi klipputstrekningen:",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Clipping Raster</strong> – Utstrekningen for klipperasteret.",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Custom Extent</strong> – X og Y minimums- og maksimumskoordinater.",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Current Map Extent</strong> – Utstrekningen for gjeldende kartvisning.",
	"@@Clip_Clipping-Raster_tag0@@": "Rasterlaget som brukes til klipping.",
	"@@Clip_Clipping-Type_tag0@@": "Angi om du vil beholde området innenfor eller utenfor klippgeometrien.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Clip Inside</strong> – Bilder innenfor klipputstrekningene blir fjernet.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Clip Outside</strong> – Bilder utenfor klipputstrekningene blir fjernet.",
	"@@Clip_Custom-Extent_tag0@@": "Angi de fire koordinatene som definerer utstrekningen for avgrensningsboksen som brukes til å klippe rasteret.",
	"@@Clip_Output-Extent_tag0@@": "X- og Y-koordinatene for gjeldende klipputstrekning.",
	"@@Clip_Output-Extent_tag1@@": "Knappen <strong>Capture Current Map Extent</strong> bruker visningsutstrekningen for det aktive kartet.",
	"@@Clip_Raster_tag0@@": "Inndatarasterlaget.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "Når det er valgt, klippes dataene i henhold til geometrien i den spesifiserte geoobjektklassen.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Ikke avmerket – Funksjonen bruker klippgeometrien spesifisert av <strong>Rectangle</strong>. Dette er standardalternativet.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Avmerket – Funksjonen bruker klippgeometrien definert av en geoobjektklasse.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "Typen fargekonvertering som skal utføres:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "HSV til RGB",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "RGB til HSV",
	"@@Color-Model-Conversion_Raster_tag0@@": "Inndatarasteret.",
	"@@Colormap_Color-Ramp_tag0@@": "Velg en eksisterende fargepalett.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Velg typen fargeskjema for opptegning av inndatarasteret",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Fargepalett – bruk en fargepalett.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Fargekart – bruk et eksisterende fargekart.",
	"@@Colormap_Colormap_tag0@@": "Følgende standard fargekart er tilgjengelige i rullegardinlisten:",
	"@@Colormap_Colormap_tag1@@": "Høyde – et fargekart som gradvis endres fra cyan til lilla til svart.",
	"@@Colormap_Colormap_tag2@@": "Grått – et fargekart som gradvis endres fra svart til hvitt.",
	"@@Colormap_Colormap_tag7@@": "Terrengskygge – Et gråtonefargekart til visualisering av en 3D-representasjon av terrengoverflaten, der solens relative posisjon tas i betraktning for skyggelegging av bildet.",
	"@@Colormap_Colormap_tag3@@": "NDVI – et fargekart for visualisering av vegetasjon. Verdier nær null er blå. Lave verdier er brune. Deretter endres fargene gradvis fra rødt til oransje, gult, grønt og svart etter hvert som vegetasjonsindeksen går fra lav til høy.",
	"@@Colormap_Colormap_tag4@@": "NDVI2 – et fargekart til visualisering av vegetasjon. Lave verdier går fra hvitt til grønt. Deretter går fargene fra grått til lilla, fiolett, mørkeblå og svart etter hvert som vegetasjonsindeksen går fra lav til høy.",
	"@@Colormap_Colormap_tag5@@": "NDVI3 – et fargekart til visualisering av vegetasjon. Verdier nær null er blå. Deretter endres fargene gradvis fra rødt til oransje, og grønt etter hvert som vegetasjonsindeksen går fra lav til høy.",
	"@@Colormap_Colormap_tag6@@": "Tilfeldig – et tilfeldig fargekart.",
	"@@Colormap_Raster_tag0@@": "Inndatarasteret.",
	"@@Colormap-To-RGB_Raster_tag0@@": "Inndatafargekartrasteret.",
	"@@Complex_Raster_tag0@@": "Inndatarasteret.",
	"@@Composite-Bands_Rasters_tag0@@": "Bruk rullegardinlisten eller <strong>Browse</strong>-knappen til å velge rasterinndataene.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Velg hvilken cellestørrelse som skal brukes i det resulterende rasteret. Hvis alle inndatacellene er like, gir alle alternativene samme resultat.</p><ul><li>Først av – Bruk den første cellestørrelsen i inndatarasterne.</li><li>Min. av – Bruk den minste cellestørrelsen i alle inndatarasterne.</li><li>Maks. av – Bruk den største cellestørrelsen i alle inndatarasterne. Dette er standardalternativet.</li><li>Gjennomsnitt av – Bruk gjennomsnittlig cellestørrelse i alle inndatarasterne.</li><li>Sist av – Bruk den siste cellestørrelsen i inndatarasterne.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Con-function_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Con-function_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Con-function_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Con-function_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Con-function_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Con_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Con_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Con_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Con_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Con_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Con_False-Raster_tag0@@": "Inndataene hvis verdier blir brukt som utdatapikselverdier hvis betingelsen er usann. Det kan være et heltall, et flyttallsraster eller en konstant verdi.",
	"@@Con_Raster_tag0@@": "Inndatarasteret som representerer det boolske resultatet av en logisk matematisk rasterfunksjon. Verdiene er enten 1 (sann) eller 0 (usann). Det kan være et heltall eller et flyttallsraster.",
	"@@Con_True-Raster_tag0@@": "Inndataene hvis verdier blir brukt som utdatapikselverdier hvis betingelsen er sann. Det kan være et heltall, et flyttallsraster eller en konstant verdi.",
	"@@Constant_Constant_tag0@@": "Verdien for konstanten som skal legges til det virtuelle rasteret.",
	"@@Constant_Raster-Info_tag0@@": "Bruk knappen <strong>Load template raster</strong> til å laste en mal fra en katalog eller portal.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "Hvor mye utjevning som skal brukes på konturlinjen. Standardverdien er 2,5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "En lavere verdi gir en konturlinje med mer kornethet og mindre utjevning, mens en høyere verdi gir en konturlinje med mer utjevning som vises mindre taggete.",
	"@@Contour_Contour-Interval_tag0@@": "Forskjellen i høyde mellom konturlinjer.",
	"@@Contour_Contour-Interval_tag1@@": "Et lite konturintervall brukes i relativt flate områder, men større konturintervaller brukes i områder med varierende eller fjellrikt terreng.",
	"@@Contour_Contour-Type_tag0@@": "Typen kontur som skal opprettes:",
	"@@Contour_Contour-Type_tag1@@": "<strong>Contour fill</strong> – Fyller området mellom hver konturlinje med den kvantifiserte høydeverdien.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Contour lines</strong> – Kobler sammen punkt med samme høyde for å lage en linje som representerer konstant høyde.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Smooth surface only</strong> – Jevner ut inndatahøydelaget, men produserer ikke høydekurver.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "Tellekurven som representeres av en uthevet linje.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "Standardverdien er 5, og hver femte konturlinje er uthevet.",
	"@@Contour_Number-Of-Contours_tag0@@": "Antallet høydekurver som skal genereres i visningen. Dette justerer konturintervallet dynamisk slik at det passer til terrenget i visningen, mens standardiserte intervaller som 1, 5, 10 og så videre, bevares.",
	"@@Contour_Raster_tag0@@": "Et enkeltbånd-høyderasterdatasett.",
	"@@Contour_Z-Base_tag0@@": "Grunnverdien for konturlinje. Konturer genereres over og under denne verdien etter behov for å dekke hele verdiområdet for inndatarasteret. Standardverdien er 0.",
	"@@Contour_Z-Base_tag1@@": "Verdien 0 representerer ofte middelvannstand, avhengig av kildehøydedatasettet.",
	"@@Contour_Z-Factor_tag0@@": "Enhetskonverteringsfaktoren som brukes til å generere høydekurver. Standardverdien er 1.",
	"@@Contour_Z-Factor_tag1@@": "Konturlinjer genereres basert på z-verdiene i inndatarasteret, som ofte måles i enhetene meter eller fot. Med standardverdien 1 vil høydekurvene være i de samme enhetene som z-verdiene for inndatarasteret. Hvis du vil opprette høydekurver i en annen enhet enn z-verdien, angir du en passende verdi for z-faktoren. Legg merke til at det ikke er nødvendig at grunnplanets x- og y-enheter og overflatens z-verdier er like i dette verktøyet.",
	"@@Contour_Z-Factor_tag2@@": "Hvis høydeverdiene i inndatarasteret ditt er i fot, men du vil at høydekurvene skal genereres i meter, angir du z-faktoren som til 0,3048 (siden 1 fot = 0,3048 meter).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Juster lysstyrken for rasterlaget.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "Du kan bruke glidebryteren til å endre lysstyrkeforskyvningen, eller du kan skrive inn en verdi.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Juster kontrasten for rasterlaget.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "Du kan bruke glidebryteren til å endre kontrastforskyvningen, eller du kan skrive inn en verdi.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "Inndatarasteret som lysstyrke og kontrast skal redigeres i.",
	"@@Convolution_kernel_tag0@@": "<p>Denne tabellen viser hvordan hver piksel vektes i filtreringsprosessen. Tabellen kan redigeres hvis du velger<strong>Brukerdefinert</strong>som<strong>Typen</strong>.</p>",
	"@@Convolution_Raster_tag0@@": "Datasettet for inndataraster.",
	"@@Convolution_Type_tag0@@": "Velg hvilken type filtrering du vil bruke. Det finnes alternativer for å gjøre skarpere, gjøre uskarp og registrere kanter, eller du kan definere ditt eget kjernebaserte filter",
	"@@Corridor_Distance-Raster-1_tag0@@": "Det første inndata-avstandsrasteret. Det skal være et akkumulert kostnadsavstandresultat fra Kostnadsavstand eller Ruteavstand.",
	"@@Corridor_Distance-Raster-2_tag0@@": "Det andre inndata-avstandsrasteret. Det skal være et akkumulert kostnadsavstandresultat fra Kostnadsavstand eller Ruteavstand.",
	"@@Cos_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Cos_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Cos_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Cos_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Cos_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Cos_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Cos_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Cos_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Cos_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Cos_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Cos_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Cos_Raster_tag0@@": "Inndataen som verdiene for cosinus skal beregnes for.",
	"@@CosH_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@CosH_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@CosH_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@CosH_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@CosH_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@CosH_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@CosH_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@CosH_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@CosH_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@CosH_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@CosH_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@CosH_Raster_tag0@@": "Inndataen som verdiene for hyperbolsk cosinus skal beregnes for.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Denne parameteren simulerer økningen i innsats for å klare kostnadene etter hvert som den akkumulerte kostnaden øker. Brukes til å modellere tretthet hos reisende. Den økende kumulative kostnaden ved å nå en celle multipliseres med motstandsgraden og legges til kostnaden med å bevege seg inn i den etterfølgende cellen.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Det er en modifisert versjon av en rentes rente-formel som brukes til å beregne de synlige kostnadene ved å bevege seg gjennom en celle. Etter hvert som verdien for rentes rente stiger, øker kostnaden for cellene som besøkes senere. Jo høyere motstandsgraden er, jo høyere er kostnadene ved å nå den neste cellen, som tilskrives for hver etterfølgende bevegelse. Siden motstandsgraden ligner på en rentes rente-formel, og de kumulerte kostnadsverdiene generelt er svært store, foreslås lave motstandsgrader som 0,005 og enda mindre, avhengig av de kumulerte kostnadsverdiene.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Cost-Allocation_Capacity_tag0@@": "Definerer kostnadskapasiteten for den reisende for en kilde. Kostnadsberegningene fortsetter for hver kilde til den angitte kapasiteten er nådd.",
	"@@Cost-Allocation_Capacity_tag1@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Cost-Allocation_Capacity_tag2@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "Et obligatorisk inndataraster som definerer kostnader eller impedans ved å bevege seg planimetrisk gjennom hver celle. Verdien ved hver celleplassering representerer kostnad-per-enhet-avstanden for bevegelse gjennom cellen. Hver celleplasseringsverdi multipliseres med celleoppløsningen og kompenserer også for diagonal bevegelse for å finne de totale kostnadene ved å passere gjennom cellen.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "Verdiene for <strong>Cost Raster</strong> kan være heltall eller flyttall, men de kan ikke være negative tall eller null.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "Terskelen som de kumulative kostnadsverdiene ikke kan overstige. Hvis en kumulativ kostnadsavstand overstiger denne verdien, blir utdataverdien for cellelokasjonen ${NoData}. Den maksimale avstanden definerer utstrekningen som de kumulative kostnadsavstandene beregnes for. Standardavstanden er til utstrekningen av utdatarasteret.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator som skal brukes på kostnadsverdiene.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Denne parameteren gjør det mulig å styre reisemåten eller størrelsen ved en kilde. Jo større multiplikator, jo større er kostnaden ved å bevege seg gjennom hver celle.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Verdiene må være større enn null. Standardverdien er 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Cost-Allocation_Source-Field_tag0@@": "Feltet som brukes til å tilordne verdier til kildelokasjonene. Det må være en heltallstype. Hvis <strong>Value Raster</strong> er angitt, vil verdiene i disse inndataene ha forrang over eventuelle innstillinger for <strong>Source Field</strong>.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "Obligatorisk inndataraster for kildelokasjoner.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Dette er et raster som identifiserer cellene eller lokasjonene som laveste akkumulerte kostnadsavstand fra hver utdatacellelokasjon beregnes fra.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "Hvis inndata <strong>Source Raster</strong> er et flyttall, må <strong>Value Raster</strong> angis og være et heltall. <strong>Value Raster</strong> får forrang over eventuelle innstillinger for <strong>Source Field</strong>.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "Startkostnaden som kostnadsberegningene skal ta utgangspunkt i. Med denne parameteren kan du spesifisere den faste kostnaden knyttet til en kilde. I stedet for å begynne med et kostnad på 0, begynner algoritmen med den verdien som er angitt.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "Verdien må være null eller større. Standardverdien er 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Definerer retningen for den reisende når kildens motstandsgrad og startkostnad brukes.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>From Source</strong> – Kildens motstandsgrad og startkostnad brukes fra inndatakilden og ut til ikke-kildecellene. Dette er standardalternativet.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>To Source</strong> – Kildens motstandsgrad og startkostnad brukes fra hver ikke-kildecelle og tilbake til inndatakilden.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Angi <strong>From Source</strong>- eller <strong>To Source</strong>-nøkkelordet som blir brukt på alle kilder, eller angi et felt i <strong>Source Raster</strong> som inneholder nøkkelordene for å identifisere reiseretning for hver kilde. Feltet må inneholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "Inndatarasteret med heltall som identifiserer soneverdiene som skal brukes for hver inndatakildelokasjon. For hver kildelokasjonscelle blir verdien definert av <strong>Value Raster</strong>  tilordnet alle celler som er tildelt kildelokasjonen for beregningen. <strong>Value Raster</strong> får forrang over eventuelle innstillinger for <strong>Source Field</strong>.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Denne parameteren simulerer økningen i innsats for å klare kostnadene etter hvert som den akkumulerte kostnaden øker. Brukes til å modellere tretthet hos reisende. Den økende kumulative kostnaden ved å nå en celle multipliseres med motstandsgraden og legges til kostnaden med å bevege seg inn i den etterfølgende cellen.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Det er en modifisert versjon av en rentes rente-formel som brukes til å beregne de synlige kostnadene ved å bevege seg gjennom en celle. Etter hvert som verdien for rentes rente stiger, øker kostnaden for cellene som besøkes senere. Jo høyere motstandsgraden er, jo høyere er kostnadene ved å nå den neste cellen, som tilskrives for hver etterfølgende bevegelse. Siden motstandsgraden ligner på en rentes rente-formel, og de kumulerte kostnadsverdiene generelt er svært store, foreslås lave motstandsgrader som 0,005 og enda mindre, avhengig av de kumulerte kostnadsverdiene.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Definerer kostnadskapasiteten for den reisende for en kilde. Kostnadsberegningene fortsetter for hver kilde til den angitte kapasiteten er nådd.",
	"@@Cost-Back-Link_Capacity_tag1@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Cost-Back-Link_Capacity_tag2@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "Et obligatorisk inndataraster som definerer kostnader eller impedans ved å bevege seg planimetrisk gjennom hver celle. Verdien ved hver celleplassering representerer kostnad-per-enhet-avstanden for bevegelse gjennom cellen. Hver celleplasseringsverdi multipliseres med celleoppløsningen og kompenserer også for diagonal bevegelse for å finne de totale kostnadene ved å passere gjennom cellen.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "Verdiene for <strong>Cost Raster</strong> kan være heltall eller flyttall, men de kan ikke være negative tall eller null.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "Terskelen som de kumulative kostnadsverdiene ikke kan overstige. Hvis en kumulativ kostnadsavstand overstiger denne verdien, blir utdataverdien for cellelokasjonen NoData. Den maksimale avstanden definerer utstrekningen som de kumulative kostnadsavstandene beregnes for. Standardavstanden er til utstrekningen av utdatarasteret.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator som skal brukes på kostnadsverdiene.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Denne parameteren gjør det mulig å styre reisemåten eller størrelsen ved en kilde. Jo større multiplikator, jo større er kostnaden ved å bevege seg gjennom hver celle.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Verdiene må være større enn null. Standardverdien er 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "Obligatorisk inndataraster for kildelokasjoner.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Dette er et raster som identifiserer cellene eller lokasjonene som laveste akkumulerte kostnadsavstand fra hver utdatacellelokasjon beregnes fra.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "Startkostnaden som kostnadsberegningene skal ta utgangspunkt i. Med denne parameteren kan du spesifisere den faste kostnaden knyttet til en kilde. I stedet for å begynne med et kostnad på 0, begynner algoritmen med den verdien som er angitt.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "Verdien må være null eller større. Standardverdien er 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Definerer retningen for den reisende når kildens motstandsgrad og startkostnad brukes.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>From Source</strong> – Kildens motstandsgrad og startkostnad brukes fra inndatakilden og ut til ikke-kildecellene. Dette er standardalternativet.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>To Source</strong> – Kildens motstandsgrad og startkostnad brukes fra hver ikke-kildecelle og tilbake til inndatakilden.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Angi <strong>From Source</strong>- eller <strong>To Source</strong> -nøkkelordet som blir brukt på alle kilder, eller angi et felt i <strong>Source Raster</strong> som inneholder nøkkelordene for å identifisere reiseretning for hver kilde.. Feltet må inneholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Denne parameteren simulerer økningen i innsats for å klare kostnadene etter hvert som den akkumulerte kostnaden øker. Brukes til å modellere tretthet hos reisende. Den økende kumulative kostnaden ved å nå en celle multipliseres med motstandsgraden og legges til kostnaden med å bevege seg inn i den etterfølgende cellen.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Det er en modifisert versjon av en rentes rente-formel som brukes til å beregne de synlige kostnadene ved å bevege seg gjennom en celle. Etter hvert som verdien for rentes rente stiger, øker kostnaden for cellene som besøkes senere. Jo høyere motstandsgraden er, jo høyere er kostnadene ved å nå den neste cellen, som tilskrives for hver etterfølgende bevegelse. Siden motstandsgraden ligner på en rentes rente-formel, og de kumulerte kostnadsverdiene generelt er svært store, foreslås lave motstandsgrader som 0,005 og enda mindre, avhengig av de kumulerte kostnadsverdiene.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Cost-Distance_Capacity_tag0@@": "Definerer kostnadskapasiteten for den reisende for en kilde. Kostnadsberegningene fortsetter for hver kilde til den angitte kapasiteten er nådd.",
	"@@Cost-Distance_Capacity_tag1@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Cost-Distance_Capacity_tag2@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "Et obligatorisk inndataraster som definerer kostnader eller impedans ved å bevege seg planimetrisk gjennom hver celle. Verdien ved hver celleplassering representerer kostnad-per-enhet-avstanden for bevegelse gjennom cellen. Hver celleplasseringsverdi multipliseres med celleoppløsningen og kompenserer også for diagonal bevegelse for å finne de totale kostnadene ved å passere gjennom cellen.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "Verdiene for <strong>Cost Raster</strong> kan være heltall eller flyttall, men de kan ikke være negative tall eller null.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "Terskelen som de kumulative kostnadsverdiene ikke kan overstige. Hvis en kumulativ kostnadsavstand overstiger denne verdien, blir utdataverdien for cellelokasjonen NoData. Den maksimale avstanden definerer utstrekningen som de kumulative kostnadsavstandene beregnes for. Standardavstanden er til utstrekningen av utdatarasteret.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator som skal brukes på kostnadsverdiene.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Denne parameteren gjør det mulig å styre reisemåten eller størrelsen ved en kilde. Jo større multiplikator, jo større er kostnaden ved å bevege seg gjennom hver celle.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Verdiene må være større enn null. Standardverdien er 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Cost-Distance_Source-Raster_tag0@@": "Obligatorisk inndataraster for kildelokasjoner.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Dette er et raster som identifiserer cellene eller lokasjonene som laveste akkumulerte kostnadsavstand fra hver utdatacellelokasjon beregnes fra.",
	"@@Cost-Distance_Start-Cost_tag0@@": "Startkostnaden som kostnadsberegningene skal ta utgangspunkt i. Med denne parameteren kan du spesifisere den faste kostnaden knyttet til en kilde. I stedet for å begynne med et kostnad på 0, begynner algoritmen med den verdien som er angitt.",
	"@@Cost-Distance_Start-Cost_tag1@@": "Verdien må være null eller større. Standardverdien er 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Definerer retningen for den reisende når kildens motstandsgrad og startkostnad brukes.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>From Source</strong> – Kildens motstandsgrad og startkostnad brukes fra inndatakilden og ut til ikke-kildecellene. Dette er standardalternativet.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>To Source</strong> – Kildens motstandsgrad og startkostnad brukes fra hver ikke-kildecelle og tilbake til inndatakilden.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Angi <strong>From Source</strong>- eller <strong>To Source</strong> -nøkkelordet som blir brukt på alle kilder, eller angi et felt i <strong>Source Raster</strong> som inneholder nøkkelordene for å identifisere reiseretning for hver kilde.. Feltet må inneholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Curvature_Curvature-Type_tag0@@": "Krumningstypen fremhever ulike aspekter av helningen. Det er tre krumningsalternativer:",
	"@@Curvature_Curvature-Type_tag1@@": "Planform – er vinkelrett på retningen for den maksimale helningen. Den påvirker strømmens konvergens og divergens over en overflate.",
	"@@Curvature_Curvature-Type_tag2@@": "Profil – er parallell med helningen og indikerer retningen for den maksimale helningen. Den påvirker strømmens akselerasjon og retardasjon over overflaten.",
	"@@Curvature_Curvature-Type_tag3@@": "Standard – Kombinerer både <strong>Profile</strong>- og <strong>Planform</strong>-krumningene.",
	"@@Curvature_DEM_tag0@@": "Digitalt høydemodellraster (DEM).",
	"@@Curvature_Z-Factor_tag0@@": "Z-faktoren justerer måleenhetene for z-enhetene når de er forskjellige fra x- og y-enhetene for inndataoverflaten. Hvis enhetene x, y og z er i samme måleenheter, skal z-faktoren settes til 1. Z-verdiene på inndataoverflaten multipliseres med z-faktoren ved beregning av den endelige utdataoverflaten. Hvis for eksempel z-enhetene er i fot og x- og y-enhetene er i meter, bruker du en z-faktor på 0,3048 for å konvertere z-enhetene fra fot til meter, siden 1 fot = 0,3048 meter.",
	"@@Divide_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Divide_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Divide_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Divide_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Divide_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Divide_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Divide_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Divide_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Divide_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Divide_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Divide_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Divide_Raster_tag0@@": "Inndataen hvis verdi divideres med den andre inndataen.",
	"@@Divide_Raster_tag1@@": "Det kan brukes et tall som inndata for denne parameteren, forutsatt at et raster er angitt for ${Raster2}.",
	"@@Divide_Raster2_tag0@@": "Inndataen hvis verdi den første inndataen skal divideres med.",
	"@@Divide_Raster2_tag1@@": "Det kan brukes et tall som inndata for denne parameteren, forutsatt at et raster er angitt for ${Raster}.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "Inndata-DEM.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "Den maksimale verdien for tomromsbredde brukes til å angi den største størrelsen på et tomrom du vil fylle. Hvis bredden eller høyden på avgrensningsboksen rundt tomrommet er større enn den maksimale verdien for tomromsbredde, fylles ikke tomrommet.  Enhetene for denne parameteren er de samme som enhetene som brukes i dataenes romlige referansesystem.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Hvis denne parameteren er tom eller har en verdi på ${0}, blir ingen maksimal bredde brukt og alle tomrom fylles. En verdi på ${-1} betyr at tomrom ikke fylles.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "Den maksimale søkeradiusen som brukes til fylling av tomrom. Et tomrom som er lenger unna fra en gyldig piksel enn denne terskelverdien, forblir et tomrom. Enhetene for denne parameteren er de samme som enhetene som brukes i dataenes romlige referansesystem.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Hvis verdien for denne parameteren ikke er angitt eller er ${0} eller ${-1}, brukes ikke denne parameteren.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Equal-to_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Equal-to_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Equal-to_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Equal-to_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Equal-to_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Equal-to_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Equal-to_Raster_tag0@@": "Inndataen som brukes til sammenligning av likhet av den andre inndataen.",
	"@@Equal-to_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Equal-to_Raster2_tag0@@": "Inndataen som brukes til sammenligning av likhet av den første inndataen.",
	"@@Equal-to_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "Cellestørrelsen som utdatarasteret blir opprettet med.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Hvis cellestørrelsen ble angitt eksplisitt i <strong>Analysis Environments</strong>, blir det standard cellestørrelse. Hvis den ikke ble angitt, blir utdatacellestørrelsen den samme som <strong>Source Raster</strong>.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Bestemmer om avstanden skal beregnes ved hjelp av en planmetode (flat jord) eller geodetisk metode (ellipsoide).",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Geodetisk – Den korteste linjen mellom to punkt på jordoverflaten på en sfæroide (ellipsoide). Det betyr at resultatene ikke endrer seg, uansett inndata- og utdataprojeksjon. En geodetisk linje kan for eksempel brukes når du vil bestemme den korteste avstanden mellom to byer for en flyrute. Dette er også kjent som en storsirkellinje hvis den er basert på en sfære i stedet for en ellipsoide.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Plan – planmålinger bruker 2D kartesisk matematikk til å beregne lengde og areal. Alternativet er kun tilgjengelig når det måles i et projisert koordinatsystem og 2D-planet for det koordinatsystemet brukes som basis for målingene.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Definerer den terskelavstanden som den nærmeste kilden blir bestemt innenfor. Hvis avstanden til nærmeste kilde overskrider denne, blir utdataene for den cellen ${NoData}.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "Standardavstanden er til utstrekningen av utdatarasteret.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "Rasteret som definerer hindringene.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "Datasettet må inneholde ${NoData} der det ikke finnes hindringer. Hindringer representeres av gyldige verdier, inkludert null.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "Hindringene kan defineres av et heltall eller et flyttallsraster.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "Feltet som brukes til å tilordne verdier til kildelokasjonene. Det må være en heltallstype. Hvis <strong>Value Raster</strong> er angitt, vil verdiene i disse inndataene ha forrang over eventuelle innstillinger for <strong>Source Field</strong>.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "Et obligatorisk inndataraster som identifiserer kildelokasjonene. Basert på euklidisk avstand bestemmes den nærmeste kilde for hver celle i utdataene",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "Inndatatypen kan være et heltall eller flyttall.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "Inndatarasteret med heltall som identifiserer soneverdiene som skal brukes for hver inndatakildelokasjon. For hver kildelokasjonscelle blir verdien definert av <strong>Value Raster</strong>  tilordnet alle celler som er tildelt kildelokasjonen for beregningen. <strong>Value Raster</strong> får forrang over eventuelle innstillinger for <strong>Source Field</strong>.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "Cellestørrelsen som utdatarasteret blir opprettet med.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Hvis cellestørrelsen ble angitt eksplisitt i <strong>Analysis Environments</strong>, blir det standard cellestørrelse. Hvis den ikke ble angitt, blir utdatacellestørrelsen den samme som <strong>Source Raster</strong>.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Bestemmer om avstanden skal beregnes ved hjelp av en planmetode (flat jord) eller geodetisk metode (ellipsoide).",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Geodetisk – Den korteste linjen mellom to punkt på jordoverflaten på en sfæroide (ellipsoide). Det betyr at resultatene ikke endrer seg, uansett inndata- og utdataprojeksjon. En geodetisk linje kan for eksempel brukes når du vil bestemme den korteste avstanden mellom to byer for en flyrute. Dette er også kjent som en storsirkellinje hvis den er basert på en sfære i stedet for en ellipsoide.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Plan – planmålinger bruker 2D kartesisk matematikk til å beregne lengde og areal. Alternativet er kun tilgjengelig når det måles i et projisert koordinatsystem og 2D-planet for det koordinatsystemet brukes som basis for målingene.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Definerer den terskelavstanden som retningen til nærmeste kilde beregnes innenfor. Hvis avstanden til nærmeste kilde overskrider denne, blir utdataene for den cellen ${NoData}.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "Standardavstanden er til utstrekningen av utdatarasteret.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "Rasteret som definerer hindringene.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "Datasettet må inneholde NoData der det ikke finnes hindringer. Hindringer representeres av gyldige verdier, inkludert null.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "Hindringene kan defineres av et heltall eller et flyttallsraster.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "Et obligatorisk inndataraster som identifiserer cellene eller lokasjonene som den euklidske retningen for hver udatacellelokasjon beregnes til.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "Inndatatypen kan være et heltall eller flyttall.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "Cellestørrelsen som utdatarasteret blir opprettet med.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Hvis cellestørrelsen ble angitt eksplisitt i <strong>Analysis Environments</strong>, blir det standard cellestørrelse. Hvis den ikke ble angitt, blir utdatacellestørrelsen den samme som <strong>Source Raster</strong>.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Bestemmer om avstanden skal beregnes ved hjelp av en planmetode (flat jord) eller geodetisk metode (ellipsoide).",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Geodetisk – Den korteste linjen mellom to punkt på jordoverflaten på en sfæroide (ellipsoide). Det betyr at resultatene ikke endrer seg, uansett inndata- og utdataprojeksjon. En geodetisk linje kan for eksempel brukes når du vil bestemme den korteste avstanden mellom to byer for en flyrute. Dette er også kjent som en storsirkellinje hvis den er basert på en sfære i stedet for en ellipsoide.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Plan – planmålinger bruker 2D kartesisk matematikk til å beregne lengde og areal. Alternativet er kun tilgjengelig når det måles i et projisert koordinatsystem og 2D-planet for det koordinatsystemet brukes som basis for målingene.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "Terskelen som de kumulative avstandsverdiene ikke kan overstige. Hvis en kumulativ euklidsk avstand overstiger denne verdien, blir utdataverdien for cellelokasjonen NoData.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "Standardavstanden er til utstrekningen av utdatarasteret.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "Rasteret som definerer hindringene.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "Datasettet må inneholde ${NoData} der det ikke finnes hindringer. Hindringer representeres av gyldige verdier, inkludert null.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "Hindringene kan defineres av et heltall eller et flyttallsraster.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "Det obligatoriske inndatarasteret som identifiserer cellene eller lokasjonene som den euklidske avstanden for hver utdatacellelokasjon beregnes til.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "Inndatatypen kan være et heltall eller flyttall.",
	"@@Exp_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Exp_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Exp_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Exp_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Exp_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Exp_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Exp_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Exp_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Exp_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Exp_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Exp_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Exp_Raster_tag0@@": "Inndataverdiene som  base e-eksponenten skal finnes for.",
	"@@Exp10_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Exp10_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Exp10_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Exp10_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Exp10_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Exp10_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Exp10_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Exp10_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Exp10_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Exp10_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Exp10_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Exp10_Raster_tag0@@": "Inndataverdiene som base 10-eksponenten skal finnes for.",
	"@@Exp2_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Exp2_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Exp2_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Exp2_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Exp2_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Exp2_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Exp2_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Exp2_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Exp2_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Exp2_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Exp2_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Exp2_Raster_tag0@@": "Inndataverdiene som base 2-eksponenten skal finnes for.",
	"@@Extract-Bands_Band_tag0@@": "Velg båndene som skal trekkes ut fra en liste basert på <strong>Method</strong>-parameteralternativet som er brukt.",
	"@@Extract-Bands_Combination_tag0@@": "Båndkombinasjonen eller båndrekkefølgen. Utvalgslisten er avhengig av <strong>Method</strong>-alternativet som er angitt. Hvis for eksempel <strong>Method</strong> er <strong>Band Names</strong>, kan du velge en kombinasjon av blått, grønt og rødt for å trekke ut et naturlig fargebilde.",
	"@@Extract-Bands_Method_tag0@@": "Velg én av følgende metoder til uttrekking av bånd:",
	"@@Extract-Bands_Method_tag1@@": "<strong>Band IDs</strong> – Båndets betegnelse eller nummer, som er unikt for hver sensor. Disse kan være identiske med <strong>Band Names</strong>.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Band Names</strong> – Bruker båndnavnet som representerer bølgelengdeintervallet på det elektromagnetiske spekteret (for eksempel rød, nær infrarød, termisk infrarød). Dette kan også betegnes båndnummer-ID.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Band Wavelengths</strong> – Bølgelengden på elektromagnetisk spektrum.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Angi handlingen som skal utføres når et bånd på uttrekkingslisten ikke er tilgjengelig.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Best Match</strong> – Finner beste tilgjengelige båndet basert på bølgelengde som skal brukes i stedet for båndet som mangler, slik at funksjonen ikke mislykkes.",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Fail</strong> – Hvis inndatasettet mangler bånd som er angitt i <strong>Band</strong>-parameteren, mislykkes funksjonen.",
	"@@Extract-Bands_Raster_tag0@@": "Rasterproduktet som båndet eller båndene trekkes ut fra.",
	"@@Fill_Raster_tag0@@": "Et enkeltbånd-høyderaster.",
	"@@Fill_Z-Limit_tag0@@": "Maksimal høydeforskjell mellom en forsenkning og utløpspunktet som skal fylles.",
	"@@Fill_Z-Limit_tag1@@": "Med mindre det er angitt en verdi for denne parameteren, fylles alle forsenkninger, uavhengig av dybde.",
	"@@Fill_Z-Limit_tag2@@": "Verdien for <strong>Z Limit</strong> må være større enn null.",
	"@@Float_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Float_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Float_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Float_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Float_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Float_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Float_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Float_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Float_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Float_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Float_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Float_Raster_tag0@@": "Inndatarasteret som skal konverteres til et flyttall.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "Inndatarasteret som viser strømningsretningen ut av hver enkelt celle.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "Strømningsretningsrasteret kan opprettes ved hjelp av <strong>Flow Direction</strong>-funksjonen.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Definerer typen inndataraster for strømningsretning.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong> – Strømningsretningsrasteret som er inndata, er av typen D8. Dette er standardalternativet.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> – Strømningsretningsrasteret som er inndata, er av typen DINF (D-Infinity).",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> – Strømningsretningsrasteret som er inndata, er av typen MDF (Multi Flow Direction).",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "Utdata-akkumuleringsraster kan være av typen heltall eller flyttall.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Float</strong> – Utdatarasteret vil være av typen flyttall. Dette er standardalternativet.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Integer</strong> – Utdatarasteret vil være av typen heltall.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "Et valgfritt inndataraster for å bruke en vekt på hver piksel.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Hvis det ikke er angitt et vektraster, brukes standardvekten 1 på hver piksel.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Definerer typen inndataraster for strømningsretning.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong> – Strømningsretningsrasteret som er inndata, er av typen D8. Dette er standardalternativet.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> – Strømningsretningsrasteret som er inndata, er av typen DINF (D-Infinity).",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> – Strømningsretningsrasteret som er inndata, er av typen MDF (Multi Flow Direction).",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Angir om kantpiksler alltid strømmer ut eller følger vanlige strømningsregler.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>No</strong> – Hvis det maksimale fallet på innsiden av en kantpiksel er større enn null, bestemmes strømningsretningen som vanlig. Hvis ikke vil strømningsretningen være ut mot kanten. Piksler som skal strømme fra kanten av overflaterasteret og innover, gjør det. Dette er standardalternativet.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Yes</strong> – Alle piksler ved kanten av overflaterasteret strømmer utover fra overflaterasteret.",
	"@@Flow-Direction_Raster_tag0@@": "Inndatarasteret representerer en sammenhengende høydeoverflate.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Bestemmer om den loddrette eller vannrette komponenten av strømningsdistansen bergenes.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Horizontal</strong> – Beregningene av strømningsavstand representerer den vannrette komponenten av strømningsavstanden fra hver piksel i domenet til de(n) pikselen(e) i strømmen som de strømmer inn i.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Vertical</strong> – Beregningene av strømningsavstand representerer den loddrette komponenten av strømningavstanden fra hver piksel i domenet til de(n) pikselen(e) i strømmen som de strømmer inn i. Dette er standardalternativet.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "Inndatarasteret som viser strømningsretningen ut av hver piksel.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "Når et strømningsretningsraster tilbys, vil retningen(e) for nedoverhellingen være begrenset til de som er definert av inndatastrømningsretningene.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "Strømningsretningsrasteret kan opprettes ved hjelp av Strømningsretning-funksjonen.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Definerer typen inndataraster for strømningsretning.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong> – Strømningsretningsrasteret som er inndata, er av typen D8. Dette er standardalternativet.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> – Strømningsretningsrasteret som er inndata, er av typen DINF (D-Infinity).",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> – Strømningsretningsrasteret som er inndata, er av typen MDF (Multi Flow Direction).",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Bestemmer statistikktypen som skal brukes til å beregne strømningsdistansen over flere strømningslinjer. Hvis det er kun en enkelt strømningslinje fra hver celle til en celle i strømmen, gir alle statistikktyper samme resultat.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Minimum</strong> – Når det finnes flere strømningslinjer, beregnes minste strømningsavstand. Dette er standardalternativet.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Weighted Mean</strong> – Når det finnes flere strømningslinjer, beregnes et vektet gjennomsnitt for strømningsavstand. Strømningdelen fra en celle til dens nedstrøms naboceller brukes som vekter for beregning av vektet middelverdi.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Maximum</strong> – Når det finnes flere strømningslinjer, beregnes største strømningavstand.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "Et inndata-elveraster som representerer et lineært elvenettverk.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "Inndatarasteret representerer en sammenhengende høydeoverflate.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "Måleretningen langs strømningslinjen.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong>Downstream</strong> – Beregner den nedadgående avstanden langs strømningslinjen fra hver celle til en forsenkning eller et utløp på kanten av rasteret.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>Upstream</strong> – Beregner lengste oppadgående avstanden langs strømningslinjen fra hver celle til toppen av dreneringsdelingen.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "Inndatarasteret som viser strømretningen ut av hver enkelt celle.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "Strømningsretningsrasteret kan opprettes ved hjelp av <strong>Flow Direction</strong>-funksjonen.",
	"@@Flow-Length_Weight-Raster_tag0@@": "Et valgfritt inndataraster for å bruke en vekt på hver celle.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Hvis det ikke er angitt et vektraster, brukes standardvekten 1 på hver celle.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Angir om ${NoData}-verdier ignoreres av den statistiske beregningen.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Checked</strong> – Angi at dersom det finnes en ${NoData}-verdi i et nabolag, vil ${NoData}-verdien bli ignorert. Kun de cellene i nabolaget som har dataverdier, blir brukt til å bestemme utdataverdien. Dette er standardalternativet.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Unchecked</strong> – Angir at dersom en celle i et nabolag har verdien ${NoData}, blir utdataene for behandlingscellen ${NoData}.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "Formen på området rundt hver celle som brukes til å beregne statistikken.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Hvert nabolag har tilleggsparametere som kan brukes til å definere formen.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Ring, indre radius, ytre radius",
	"@@Focal-Statistics_Neighborhood_tag3@@": "sirkel, radius",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Uregelmessig, bredde, høyde, nabolagverdier",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Rektangel, bredde, høyde",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Kile, radius, startvinkel, sluttvinkel",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Vekt, bredde, høyde, nabolagverdier",
	"@@Focal-Statistics_Neighborhood_tag8@@": "Med Uregelmessig nabolag kan du angi et nabolag med uregelmessig form rundt behandlingscellen. Bruk tabellen med nabolagverdier til å definere formen for nabolagskjernen. Verdien 0 for en celleposisjon angir at cellen ikke er en del av nabolaget og ikke vil bli brukt til behandling. Verdien 1 angir at tilsvarende celle (og verdi) er medlem av nabolaget.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "Nabolagstypen Vekt ligner på nabolagstypen Uregelmessig ved at det gir deg mulighet til å definere et uregelmessig nabolag rundt behandlingscellen, men det gir deg også mulighet til å bruke vekter på inndataverdiene. Verdiene i vektkjernen angir hvilke celleposisjoner som skal inkluderes i nabolaget og vektene de skal multipliseres med. Bruk verdien 0 for å ekskludere en celle fra behandlingen. Positive, negative og desimalverdier er alle gyldige alternativer som kan brukes som vekt. For nabolagstypen Vekt er det kun statistikkfunksjonene middelverdi, standardavvik og sum som støttes.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Angir hvilken persentil som skal beregnes når <strong>Percentile</strong> er valgt som statistikktype. Standardinnstillingen er 90 for den 90. persentilen.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "Verdiene kan gå fra 0 til 100. Den 0. persentil tilsvarer i all hovedsak Minimum-statistikken, og den 100. persentil tilsvarer Maksimum, bortsett fra at resultatet er flyttall. En verdi på på 50 vil stort sett gi samme resultat som median-statistikken.",
	"@@Focal-Statistics_Raster_tag0@@": "Obligatorisk inndataraster.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "Statistikktypen som skal beregnes.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Majority</strong> – Beregner majoriteten (verdien som forekommer oftest) av cellene i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Maximum</strong> – Beregner maksimum (høyeste verdi) av cellene i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Mean</strong> – Beregner gjennomsnittet (gjennomsnittsverdi) av cellene i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Median</strong> – Beregner median av cellene i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Minimum</strong> – Beregner minimum (minste verdi) av cellene i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Minority</strong> – Beregner minoriteten (verdien som forekommer sjeldnest) av cellene i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Percentile</strong> – Beregner en persentil for cellene i nabolaget. Du kan bestemme hvilken persentil som skal beregnes med <strong>Percentile Value</strong>-paramenteren.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Range</strong> – Beregner området (forskjellen mellom største og minste verdi) for cellene i området.",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Standard Deviation</strong> – Beregner standardavviket for cellene i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Sum</strong> – Beregner summen (totalen for alle verdier) for cellene i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Variety</strong> – Beregner variasjonen (antall unike verdier) for cellene i nabolaget.",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Hvis inndatarasteret er flyttall, er kun statistikktypene gjennomsnitt, maksimum, median, minimum, persentil, område, standardavvik og sum tilgjengelige.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "For gjennomsnitt, median, persentil og standardavvik er utdataene alltid flyttall.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "Gjennomsnitt er standard statistikktype.",
	"@@Geometric_Constant-Z_tag0@@": "Angi en konstant høyde som skal brukes til Geometrisk-funksjonen.",
	"@@Geometric_DEM_tag0@@": "Angi DEM som skal brukes til Geometri-funksjonen. Du kan bruke en DEM inkludert i mosaikkdatasettet som et rasterdatasett eller som et mosaikkdatasett hvis utdata er en DEM.",
	"@@Geometric_Geoid_tag0@@": "De fleste høydedatasett, som USGS NED eller ArcGIS Online World Elevation er ortometiske høyder, så det er nødvendig å velge geoide-korreksjon for kompatibilitet med satellitt-RPC-er som krever ellipsoidiske høyder. Merk av for <strong>Geoid</strong> for å bruke geoide-korreksjon (EGM96) på z-verdiene, med mindre DEM-en allerede er referert til ellipsoidiske høyder.",
	"@@Geometric_Method_tag0@@": "Velg høydemetoden for den geometriske funksjonen:",
	"@@Geometric_Method_tag1@@": "Bruk konstant Z – Angi en konstant høyde for å utføre Geometrisk-funksjonen.",
	"@@Geometric_Method_tag2@@": "Bruk DEM – Angi en DEM for å utføre Geometrisk-funksjonen.",
	"@@Geometric_Raster_tag0@@": "Inndatarasteret.",
	"@@Geometric_Z-Factor_tag0@@": "RPC-er (satellite rational polynomial coefficients) er skalert for høydedatasett med vertikale enheter i meter. Hvis høydemodellen bruker andre vertikale enheter, angir du en <strong>Z Factor</strong> for å omskalere til meter. Hvis for eksempel høydeenhetene dine er i fot, bruker du verdien 0,3048 til å konvertere høydeenhetene fra fot til meter.",
	"@@Geometric_Z-Offset_tag0@@": "Grunnverdien som skal legges til høydeverdien i DEM-en. Denne kan brukes til å forskyve høydeverdier som ikke starter ved havnivå.",
	"@@Geometric_Tolerance_tag0@@": "Angi maksimumsfeil som kan tolereres i den geometriske funksjonen, gitt i antall piksler. Standarden for rastertypen NITF (NCDRD) er to.",
	"@@Grayscale_Raster_tag0@@": "Inndatarasteret.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "Vektene for hvert av båndene som utgjør inndatarasteret.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Greater-Than_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Greater-Than_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Greater-Than_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Greater-Than_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Greater-Than_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Greater-Than_Raster_tag0@@": "Inndataen som testes for å fastslå om den er større enn den andre inndataen.",
	"@@Greater-Than_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Greater-Than_Raster2_tag0@@": "Inndataen som den første inndataen testes mot og er større enn.",
	"@@Greater-Than_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Greater-Than-Equal_Raster_tag0@@": "Inndataen som testes for å fastslå om den er større enn eller lik den andre inndataen.",
	"@@Greater-Than-Equal_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "Inndataen som den første inndataen testes mot og er større enn eller lik.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "Måleenheten knyttet til utdatarasteret. Tilgjengelige utdataenheter er celsius, fahrenheit og kelvin.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "Et enkeltbåndraster der pikselverdier representerer relativ fuktighet som en prosentverdi mellom 0 og 100.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "Et enkeltbåndraster der pikselverdiene representerer omgivelsestemperatur.",
	"@@Heat-Index_Temperature-Units_tag0@@": "Måleenheten knyttet til temperaturrasteret som er inndata. Tilgjengelige inndataenheter er celsius, fahrenheit og kelvin.",
	"@@Hillshade_Altitude_tag0@@": "Solhøyde er solens høydevinkel over horisonten og går fra 0 til 90 grader. En verdi på 0 grader angir at solen er i horisonten, det vil si på samme horisontalplan som referanserammen. En verdi på 90 grader angir at solen er rett over.",
	"@@Hillshade_Altitude_tag1@@": "Denne parameteren er kun gyldig når <strong>Hillshade Type</strong> er <strong>Traditional</strong> . Standardinnstillingen er 45 grader over horisonten.",
	"@@Hillshade_Azimuth_tag0@@": "Asimut er solenes relative posisjon langs horisonten (i grader). Posisjonen angis av solens vinkel målt med klokken fra rett nord. Asimut på 0 grader angir nord. Øst er 90 grader, sør er 180 grader og vest er 270 grader.",
	"@@Hillshade_Azimuth_tag1@@": "Denne parameteren er kun gyldig når <strong>Hillshade Type</strong> er <strong>Traditional</strong> . Standardinnstillingen er 315 grader, som er fra nordvest.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "Ved å bruke dette alternativet unngås eventuelle resamplingsartefakter som kan oppstå langs kantene på et raster. Utdatapikslene langs kanten på et raster eller ved siden av NoData-piksler, fylles med NoData. Derfor anbefales det at denne parameteren kun brukes med høydemosaikkdatasett som overlapper. Når det finnes overlappende piksler, vil NoData-områder vise de overlappende pikselverdiene i stedet for tomme piksler.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Ikke avmerket – Bilineær resampling brukes enhetlig for å resample terrengskyggen. Bruk dette alternativet når mosaikkdatasettet som inneholder høyderasterdataene dine, bindes sammen. Dette er standardalternativet.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Avmerket – Bilineær resampling brukes i terrengskyggen, unntatt langs kantene på rastrene eller ved siden av NoData-piksler. Disse pikslene fylles med NoData og viser de overlappende pikselverdiene og reduserer dermed effektene av eventuelle skarpe kanter som ellers kan forekomme. Bruk dette alternativet når mosaikkdatasettet som inneholder høyderasterdataene dine, består av overlappende elementer eller fliser.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "Funksjonen kan gi resultater som er dataavhengige. Hvis du ser artefakter i fliskantene i utdataene, merker du av for avmerkingsfeltets alternative tilstand.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Styrer lyskilden for skygge:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Tradisjonell – Beregner terrengskygge fra en enkelt lysretning. Dette er standardalternativet. Du kan angi <strong>Azimuth</strong> og <strong>Altitude</strong> for å kontrollere lyskildens plassering.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Flere retninger – Kombinerer lys fra flere kilder for å gi en forbedret visualisering av terrenget.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "Pikselstørrelsefaktor tar hensyn til skaleringsendringer når betrakteren zoomer inn og ut i kartvisningen. Den styrer den hastigheten som <strong>Z Factor</strong> endres med.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Denne parameteren er kun gyldig når <strong>Scaling</strong>-type er <strong>Adjusted</strong>. Standardverdien er 0,024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "Pikselstørrelseseffekt tar hensyn til høydeendringer (eller målestokk) når betrakteren zoomer inn eller ut i kartvisningen. Det er eksponenten som brukes til pikselstørrelsen i ligningen som styrer hastigheten som <strong>Z Factor</strong> endres med for å unngå betydelig tap av relieff.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Denne parameteren er kun gyldig når <strong>Scaling</strong>-type er <strong>Adjusted</strong>. Standardverdien er 0,664.",
	"@@Hillshade_Raster_tag0@@": "Høydedatasettet (inndata).",
	"@@Hillshade_Scaling_tag0@@": "Det skyggelagte resultatet skaleres dynamisk ved å justere z-faktoren ved hjelp av ett av to alternativer:",
	"@@Hillshade_Scaling_tag1@@": "Adjusted – Bruker en ikke-lineær justering ved hjelp av standardverdier for <strong>Pixel Size Power</strong> og <strong>Pixel Size Factor</strong> som tar hensyn til en rekke ulike høydeendringer (skala) når betrakteren zoomer inn og ut. Parameterinnstillingen <strong>Adjusted</strong> anbefales ved bruk av et verdensomspennende datasett.",
	"@@Hillshade_Scaling_tag8@@": "Ingen – Det brukes ingen skalering. Dette er velegnet til et enkelt rasterdatasett som dekker et lokalområde. Det anbefales ikke til verdensomspennende datasett med store variasjoner i høyde eller kart med flere målestokker siden det gir terrengrelieff med liten variasjon ved visning i mindre målestokker.",
	"@@Hillshade_Z-Factor_tag0@@": "Z-faktoren er en skaleringsfaktor som brukes til å omdanne høydeverdiene til to formål:",
	"@@Hillshade_Z-Factor_tag1@@": "Konverter høydeenhetene (for eksempel meter eller fot) til de horisontale koordinatenhetene for datasettet, som kan være fot, meter eller grader.",
	"@@Hillshade_Z-Factor_tag2@@": "Legg til vertikal overdrivelse for visuell effekt.",
	"@@Int_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Int_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Int_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Int_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Int_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Int_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Int_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Int_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Int_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Int_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Int_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Int_Raster_tag0@@": "Inndatarasteret som skal konverteres til heltall.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "Cellestørrelsen for utdatarasteret registreres automatisk. Du kan imidlertid endre dette. Selv om cellestørrelsen kan endres, forblir utstrekningen for rasterdatasettet den samme.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "Punktdata som utgjør inndataene.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Det finnes fire resamplingsmetoder for denne funksjonen:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Inverse Distance Weighted</strong> – Bestemmer celleverdier ved hjelp av en lineært vektet kombinasjon av et sett med eksempelpunkter eller -celler. Vekten er en funksjon av den inverse av avstanden fra de kjente punktene eller cellene.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>Linear Tinning</strong> – Bruker et triangulært irregulært nettverk fra midtpunktet i hver celle i det irregulære rasteret til å interpolere en overflate som deretter konverteres til et regulært raster.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Natural Neighbor</strong> – Finner nærmeste delsett med inndataeksempler til et spørringspunkt og bruker vekter på dem basert på forholdsmessige områder for å interpolere en verdi.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Nearest Neighbor</strong> – Beregner pikselverdi ved hjelp av nærmeste piksel. Hvis det ikke finnes en kildepiksel, kan det ikke opprettes en ny piksel i utdataene. Dette er standardalternativet.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Identifisere antallet piksler som skal inkluderes for den valgte resamplingsmetoden. Standardverdien er ${3} piksler.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Hvis du velger en punktgeoobjektklasse som inndata, må du identifisere feltet i attributtabellen med verdien for punktene",
	"@@Is-Null_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Is-Null_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Is-Null_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Is-Null_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Is-Null_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Is-Null_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Is-Null_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Is-Null_Raster_tag0@@": "Inndatarasteret som testes for å identifisere celler som er ${NoData} (null).",
	"@@Is-Null_Raster_tag1@@": "Inndata kan være heltall eller flyttall.",
	"@@Key-Metadata_Band-Names_tag0@@": "Dette brukes til å overstyre båndnavnene for et raster. Det er en kommadelt streng som representerer oppdaterte båndnavn.",
	"@@Key-Metadata_Band-Names_tag1@@": "Denne parameteren er valgfri.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "Nøkkelmetadata som skal settes inn i det utgående rasteret beskrevet som en JSON-streng som representerer en samling nøkkelverdipar. Følgene er et eksempel på en JSON-streng som kan brukes som inndata for denne funksjonen. Alle inndata for denne parameteren må følge samme format.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "JSON-streng som representerer nøkkelmetadata",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "Navnet på nøkkelegenskapen på datasettnivå som skal overstyres.",
	"@@Key-Metadata_Raster_tag0@@": "Rasteret eller mosaikkdatasettet som inneholder nøkkelmetadata som du vil sette inn eller overskrive.",
	"@@Key-Metadata_Value_tag0@@": "Overstyringsverdien for nøkkelegenskapen på datasettnivå som du vil angi.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Denne parameteren simulerer økningen i innsats for å klare kostnadene etter hvert som den akkumulerte kostnaden øker. Brukes til å modellere tretthet hos reisende. Den økende kumulative kostnaden ved å nå en celle multipliseres med motstandsgraden og legges til kostnaden med å bevege seg inn i den etterfølgende cellen.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "Det er en modifisert versjon av en rentes rente-formel som brukes til å beregne de synlige kostnadene ved å bevege seg gjennom en celle. Etter hvert som verdien for rentes rente stiger, øker kostnaden for cellene som besøkes senere. Jo høyere motstandsgraden er, jo høyere er kostnadene ved å nå den neste cellen, som tilskrives for hver etterfølgende bevegelse. Siden motstandsgraden ligner på en rentes rente-formel, og de kumulerte kostnadsverdiene generelt er svært store, foreslås lave motstandsgrader som 0,005 og enda mindre, avhengig av de kumulerte kostnadsverdiene.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Definerer kostnadskapasiteten for den reisende for en kilde. Kostnadsberegningene fortsetter for hver kilde til den angitte kapasiteten er nådd.",
	"@@Least-Cost-Path_Capacity_tag1@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "Et obligatorisk inndataraster som definerer kostnader eller impedans ved å bevege seg planimetrisk gjennom hver celle. Verdien ved hver celleplassering representerer kostnad-per-enhet-avstanden for bevegelse gjennom cellen. Hver celleplasseringsverdi multipliseres med celleoppløsningen og kompenserer også for diagonal bevegelse for å finne de totale kostnadene ved å passere gjennom cellen.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "Verdiene for <strong>Cost Raster</strong> kan være heltall eller flyttall, men de kan ikke være negative tall eller null.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "Feltet brukes til å hente verdier for destinasjonslokasjonene.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "Obligatorisk inndataraster som identifiserer pikslene som ruten med lavest kostnad til kilden med lavest kostnad bestemmes fra. Denne inndataen består av piksler som har gyldige verdier, og de gjenværende pikslene må tilordnes ${NoData}. Verdier på 0 er gyldig.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "Terskelen som de kumulative kostnadsverdiene ikke kan overstige. Hvis en kumulativ kostnadsavstand overstiger denne verdien, blir utdataverdien for cellelokasjonen ${NoData}. Den maksimale avstanden definerer utstrekningen som de kumulative kostnadsavstandene beregnes for. Standardavstanden er til utstrekningen av utdatarasteret.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Denne parameteren gjør det mulig å styre reisemåten eller størrelsen ved en kilde. Jo større multiplikator, jo større er kostnaden ved å bevege seg gjennom hver celle.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "Verdiene må være større enn null. Standardverdien er 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Et nøkkelord som definerer hvordan verdier og soner i destinasjonsinndataene blir tolket i beregningene av rutekostnader:",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Best Single</strong> – For alle piksler i destinasjonsinndataene utledes ruten med lavest kostnad fra cellen med minste antall lavkostnadsruter til kildecellene.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Each Cell</strong> – Ruten med laveste kostnad fastsettes for hver piksel med gyldige verdier i destinasjonsinndataene, og ruten lagres i utdatarasteret. Hver celle i destinasjonsinndataene behandles separat, og ruten med lavest kostnad fastsettes for hver Fra-celle.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Each Zone</strong> – Ruten med laveste kostnad fastsettes for hver sone i destinasjonsinndataene, og ruten lagres i utdatarasteret. Ruten med lavest kostnad begynner ved pikselen med den laveste kostnad-avstand-vektingen i sonen.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Dette er et obligatorisk inndataraster som identifiserer cellene eller lokasjonene som laveste akkumulerte kostnadsavstand fra hver utdatacellelokasjon beregnes fra.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "Startkostnaden som kostnadsberegningene skal ta utgangspunkt i. Med denne parameteren kan du spesifisere den faste kostnaden knyttet til en kilde. I stedet for å begynne med et kostnad på 0, begynner algoritmen med den verdien som er angitt.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "Verdien må være null eller større. Standardverdien er 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Definerer retningen for den reisende når kildens motstandsgrad og startkostnad brukes.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>From Source</strong> – Kildens motstandsgrad og startkostnad brukes fra inndatakilden og ut til ikke-kildecellene. Dette er standardalternativet.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>To Source</strong> – Kildens motstandsgrad og startkostnad brukes fra hver ikke-kildecelle og tilbake til inndatakilden.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Angi <strong>From Source</strong>- eller <strong>To Source</strong> -nøkkelordet som blir brukt på alle kilder, eller angi et felt i <strong>Source Raster</strong> som inneholder nøkkelordene for å identifisere reiseretning for hver kilde.. Feltet må inneholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Less-Than_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Less-Than_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Less-Than_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Less-Than_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Less-Than_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Less-Than_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Less-Than_Raster_tag0@@": "Inndataen som testes for å fastslå om den er mindre enn den andre inndataen.",
	"@@Less-Than_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Less-Than_Raster2_tag0@@": "Inndataen som den første inndataen testes mot og er mindre enn.",
	"@@Less-Than_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Less-Than-Equal_Raster_tag0@@": "Inndataen som testes for å fastslå om den er mindre enn eller lik den andre inndataen.",
	"@@Less-Than-Equal_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Less-Than-Equal_Raster2_tag0@@": "Inndataen som den første inndataen testes mot og er mindre enn eller lik.",
	"@@Less-Than-Equal_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Ln_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Ln_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Ln_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Ln_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Ln_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Ln_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Ln_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Ln_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Ln_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Ln_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Ln_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Ln_Raster_tag0@@": "Inndataverdier som den naturlige logaritmen (ln) skal finnes for.",
	"@@Log10_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Log10_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Log10_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Log10_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Log10_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Log10_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Log10_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Log10_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Log10_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Log10_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Log10_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Log10_Raster_tag0@@": "Inndataverdier som base 10-logaritmen skal finnes for.",
	"@@Log2_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Log2_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Log2_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Log2_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Log2_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Log2_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Log2_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Log2_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Log2_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Log2_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Log2_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Log2_Raster_tag0@@": "Inndataverdier som base 2-logaritmen skal finnes for.",
	"@@Lookup_Field_tag0@@": "Felt som inneholder de ønskede verdiene for det nye rasteret.",
	"@@Lookup_Field_tag1@@": "Det må være en numerisk verdi.",
	"@@Lookup_Raster_tag0@@": "Inndatarasteret som inneholder et felt det kan opprettes et nytt raster fra.",
	"@@Lookup_Raster_tag1@@": "Det kan enten være heltall eller flyttall.",
	"@@Mask_Included-Ranges_tag0@@": "De inkluderte områdene kan angis for hvert bånd ved å angi en en minimums- og maksimumsverdi. Alle verdier utenfor dette området returneres som ${NoData}. En piksel inkluderes hvis pikselens verdi faller innenfor et av de angitte område. Hvis bånd 1 har et område på 5–10 og bånd 2 har et område på 15–20 og pikselverdien for bånd 1 er 8, blir denne pikselen ikke maskert.",
	"@@Mask_NoData-Interpretation_tag0@@": "Dette refererer til hvordan <strong>${NoData}-verdier</strong> påvirker utdatabildet.",
	"@@Mask_NoData-Interpretation_tag3@@": "Du kan velge mellom følgende to alternativer:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Match All</strong> – ${NoData}-verdiene du angir for hvert bånd, må forekomme i samme piksel for at utdatabildet skal inneholde ${NoData}-pikselen.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Match Any</strong> – Hvis ${NoData}-verdien du angir, forekommer for en piksel i et angitt bånd, blir denne pikselen ${NoData} i utdatabildet. Dette er standardalternativet.",
	"@@Mask_NoData-Values_tag0@@": "NoData-verdiene kan angis for hvert bånd. Du kan spesifisere flere verdier ved å angi en mellomromdelt liste.",
	"@@Mask_Raster_tag0@@": "Inndatarasteret.",
	"@@Minus_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Minus_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Minus_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Minus_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Minus_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Minus_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Minus_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Minus_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Minus_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Minus_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Minus_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Minus_Raster_tag0@@": "Inndataen som verdien for den andre inndataen skal trekkes fra.",
	"@@Minus_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Minus_Raster2_tag0@@": "Inndataverdiene som skal trekkes fra verdiene for den første inndataen.",
	"@@Minus_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@ML-Classify_Raster_tag0@@": "Inndatarasteret som skal klassifiseres ved hjelp av klassifiseringsalgoritmen for maksimal sannsynlighet.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "Signaturfilen ${.gsg}.",
	"@@Mod_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Mod_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Mod_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Mod_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Mod_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Mod_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Mod_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Mod_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Mod_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Mod_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Mod_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Mod_Raster_tag0@@": "Telleren.",
	"@@Mod_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Mod_Raster2_tag0@@": "Nevner (inndata).",
	"@@Mod_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Løs eventuelle konflikter når du har deler av to eller flere bilder som overlapper. Alternativene omfatter følgende:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Blend</strong> – Beregn og vis et gjennomsnitt av de overlappende pikslene ved å vekte piksler som ligger nærmere nabobilder, høyere. Resultatet blir et jevnere bilde. Dette er standardalternativet.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>First</strong> – Vis pikslene fra det første bildet i listen av bilder som overlapper et gitt område.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Last</strong> – Vis pikslene fra det siste bildet i listen av bilder som overlapper et gitt område.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Max</strong> – Vis pikselen med den høyeste verdien i alle overlappende lag. Med dette alternativet er det ingen garanti for at det vises piksler fra et enkelt bilde i det overlappende området, men snarere en kombinasjon av alle potensielle lag.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Mean</strong> – Beregn og vis et gjennomsnitt av de overlappende pikslene.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Min</strong> – Vis pikselen med den laveste verdien i alle de overlappene lagene. Med dette alternativet er det ingen garanti for at det vises piksler fra et enkelt bilde i det overlappende området, men snarere en kombinasjon av alle potensielle lag.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Velg rastrene du vil sette sammen som en mosaikk til ett bilde.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Angir bånd-ID-en som representerer den nær-infrarøde delen av det elektromagnetiske spektret.",
	"@@NDVI_Raster_tag0@@": "Det multispektrale inndatarasteret.",
	"@@NDVI_Scientific-Output_tag0@@": "Utdataverdiene går fra -1,0 il 1,0, som brukes i mange vitenskapelige applikasjoner.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Angir bånd-ID-en som representerer den røde delen av det elektromagnetiske spektret.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Velg et forhåndsdefinert fargeskjema fra rullegardinlisten.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Velg hvilken type fargeskjema som skal brukes til å fargelegge NDVI-utdataene:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Fargekart – Velg et forhåndsdefinert fargekart fra rullegardinlisten. Alternativt kan du navigere til en varig fargekartfil.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Fargepalett – Velg et forhåndsdefinert fargeskjema fra rullegardinlisten.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Velg et forhåndsdefinert fargekart fra rullegardinlisten. Alternativt kan du navigere til en eksisterende fargekartfil.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Angir bånd-ID-en som representerer den nær-infrarøde delen av det elektromagnetiske spektret.",
	"@@NDVI-Colorized_Raster_tag0@@": "Det multispektrale inndatarasteret.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "Utdataverdiene går fra -1,0 il 1,0, som brukes i mange vitenskapelige applikasjoner.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Angir bånd-ID-en som representerer den røde delen av det elektromagnetiske spektret.",
	"@@Negate_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Negate_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Negate_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Negate_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Negate_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Negate_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Negate_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Negate_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Negate_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Negate_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Negate_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Negate_Raster_tag0@@": "Inndatarasteret som skal negeres (multipliseres med -1).",
	"@@Nibble_Mask-Raster_tag0@@": "Obligatorisk inndataraster som brukes som maske.",
	"@@Nibble_Mask-Raster_tag1@@": "Celler med NoData som verdi, blir \"nibblet\" i inndata-<strong>raster</strong>.",
	"@@Nibble_Mask-Raster_tag4@@": "Maskerasteret kan være et heltall eller flyttall.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Definerer om NoData-celler i inndatarasteret skal forbli NoData i utdatarasteret.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>No</strong> – Angir at NoData-celler i inndatarasteret skal forbli NoData i utdatarasteret. Dette er standardalternativet.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Yes</strong> – Angir at NoData-celler i inndatarasteret og innenfor masken kan \"nibbles\" til gyldige utdatacelleverdier.",
	"@@Nibble_Raster_tag0@@": "Det obligatorisk inndatarasteret som blir \"nibblet\".",
	"@@Nibble_Raster_tag1@@": "Inndatarasteret kan være et heltall eller flyttall.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Definerer om ${NoData}-verdier i inndatarasteret kan \"nibble\" inn i det området som er definert av maskerasteret.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Yes</strong> – Angir at den nærmeste naboverdien blir brukt uansett om den er ${NoData} eller en annen dataverdi i inndatarasteret. ${NoData}-verdier i inndatarasteret kan \"nibble\" inn i områdene definert i masken hvis de er nærmeste nabo. Dette er standardalternativet.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>No</strong> – Angir at kun dataverdier kan \"nibble\" inn i områder definert i maskerasteret. ${NoData}-verdier i inndatarasteret kan ikke \"nibble\" inn i områdene definert i maskerasteret selv om de er nærmeste nabo.",
	"@@Nibble_Zone-Raster_tag0@@": "Sonerasteret som er inndata.",
	"@@Nibble_Zone-Raster_tag1@@": "En sone er alle cellene i et raster som har samme verdi, om de er tilstøtende eller ikke. Inndatasonelaget definerer formen, verdiene og lokasjonene for sonene. Sonerasteret kan være av typen heltall eller flyttall.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Not-Equal_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Not-Equal_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Not-Equal_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Not-Equal_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Not-Equal_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Not-Equal_Raster_tag0@@": "Inndataen som brukes til sammenligning av ulikhet av den andre inndataen.",
	"@@Not-Equal_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Not-Equal_Raster2_tag0@@": "Inndataen som blir sammenlignet med den første inndataen for å finne ulikhet.",
	"@@Not-Equal_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Pansharpening_Multispectral_tag0@@": "Det multispektrale rasteret du vil gjøre skarpere ved hjelp av det pankromatiske båndet.",
	"@@Pansharpening_Panchromatic_tag0@@": "Enkeltbåndrasteret med høy oppløsning som skal brukes til pankromatisk oppskarping av det multispektrale rasteret med lavere oppløsning.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Velg ønsket algoritme for pankromatisk oppskarping.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey – Bruker Brovey-algoritmen basert på spektral modellering for datafusjon.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri – Bruker Esri-algoritmen basert på spektral modellering til datafusjon.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram-Schmidt – Bruker Gram-Schmidt spektral oppskarping-algoritmen til oppskarping av multispektrale data.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS – Bruker fargerommet intensitet, fargetone og metning til datafusjon.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Middelverdi – Bruker middelverdien mellom røde, grønne og blå verdier og den pankromatiske pikselverdien.",
	"@@Pansharpening_Weights_tag0@@": "Angi vektene for de røde, grønne, blå og infrarøde båndene. Alle verdier må være i området 0 til 1.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Denne parameteren simulerer økningen i innsats for å klare kostnadene etter hvert som den akkumulerte kostnaden øker. Brukes til å modellere tretthet hos reisende. Den økende kumulative kostnaden ved å nå en celle multipliseres med motstandsgraden og legges til kostnaden med å bevege seg inn i den etterfølgende cellen.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Det er en modifisert versjon av en rentes rente-formel som brukes til å beregne de synlige kostnadene ved å bevege seg gjennom en celle. Etter hvert som verdien for rentes rente stiger, øker kostnaden for cellene som besøkes senere. Jo høyere motstandsgraden er, jo høyere er kostnadene ved å nå den neste cellen, som tilskrives for hver etterfølgende bevegelse. Siden motstandsgraden ligner på en rentes rente-formel, og de kumulerte kostnadsverdiene generelt er svært store, foreslås lave motstandsgrader som 0,005 og enda mindre, avhengig av de kumulerte kostnadsverdiene.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Path-Distance_Capacity_tag0@@": "Definerer kostnadskapasiteten for den reisende for en kilde. Kostnadsberegningene fortsetter for hver kilde til den angitte kapasiteten er nådd.",
	"@@Path-Distance_Capacity_tag1@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Path-Distance_Cost-Raster_tag0@@": "Et obligatorisk inndataraster som definerer kostnader eller impedans ved å bevege seg planimetrisk gjennom hver celle. Verdien ved hver celleplassering representerer kostnad-per-enhet-avstanden for bevegelse gjennom cellen. Hver celleplasseringsverdi multipliseres med celleoppløsningen og kompenserer også for diagonal bevegelse for å finne de totale kostnadene ved å passere gjennom cellen.",
	"@@Path-Distance_Cost-Raster_tag1@@": "Verdiene for <strong>Cost Raster</strong> kan være heltall eller flyttall, men de kan ikke være negative tall eller null.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Definerer forholdet mellom den vannrette kostnadsfaktoren og den horisontale relative bevegelsesvinkelen (horizontal relative moving angle, HRMA).</p><p>Det er flere faktorer med modifikatorer som identifiserer en definert vertikal faktorgraf. I tillegg kan du bruke en tabell til å opprette en egendefinert graf. Grafene brukes til å identifisere den vertikale faktoren som brukes til å beregne den totale kostnaden ved å flytte inn i en nabocelle.</p><p>I forklaringene nedenfor brukes to akronymer: HF og HRMA. HF står for horisontal faktor som definerer horisontale problemer som forekommer når man beveger seg fra en celle til den neste. HRMA står for horisontal relativ bevegelig vinkel, som identifiserer vinkelen mellom horisontal retning fra en celle og bevegelig retning.</p><p><strong>Horisontale faktor</strong>-typer inkluderer følgende:</p><ul><li><strong>Binær</strong>--indikerer at hvis HRA er mindre enn kuttevinkelen, settes HF til verdien knyttet til nullfaktoren; ellers er det uendelig. </li><li><strong>Forward</strong>--Fastslår at kun bevegelse forover er tillatt. HRMA må være større enn eller lik 0 og mindre enn 90 grader (0&lt;= HRMA < 90). Hvis HRMA er større enn 0 og mindre enn 45 grader, settes HF for cellen til verdien som er knyttet til nullfaktoren. Hvis HRMA er større enn eller lik 45 grader, brukes modifikatorverdien for sideverdien. HF for enhver HRMA-verdi lik eller større enn 90 grader er satt til uendelig.</li><li><strong>Linear</strong>--Spesifiserer at HF er en lineær funksjon av HRMA.</li><li><strong>Inverse Linear</strong>--Spesifiserer at HF er en invers lineær funksjon av HRMA.</li><li><strong>Table</strong>--Identifiserer at en tabellfil vil bli brukt til å definere den horisontale faktorgrafen som brukes til å bestemme HF-ene </li></ul><p>Modifikatorer til de horisontale faktorene inkluderer følgende :</p><ul><li><strong>Null-faktor</strong>--Den horisontale faktoren som skal brukes når HRMA er null. Denne faktoren plasserer y-skjæringspunktet for en hvilken som helst av de horisontale faktorfunksjonene.</li><li><strong>Skjæringsvinkel</strong>--Definerer HRMA-vinkelen som HF-en vil bli satt til uendelig utenfor.</li><li><strong>Helning</strong>--Etablerer helningen til den rette linjen som brukes med horisontalfaktor-søkeordene<strong>Lineær</strong>og<strong>Invers lineær</strong>. Helningen er spesifisert som en brøkdel av stigning over løp (for eksempel er 45 prosent helning 1/45, som angis som 0,02222).</li><li><strong>Sideverdi</strong>--Etablerer HF når HRMA er større enn eller lik 45 grader og mindre enn 90 grader når<strong>Fremover</strong>horisontalfaktor søkeord spesifiseres.</li><li><strong>Tabellnavn</strong>--Identifiserer navnet på tabellen som definerer HF.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "Et raster som definerer den horisontale retningen i hver celle.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "Verdiene i rasteret må være heltall fra 0 til 360, der 0 grader er nord, eller mot toppen av skjermen og stigende med klokken. Flate områder skal ha verdien -1. Verdiene for hver lokasjon brukes i forbindelse med <strong>Horizontal factor</strong> til å fastsette den horisontale kostnaden ved å bevege seg fra en celle til naboceller.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "Terskelen som de kumulative kostnadsverdiene ikke kan overstige. Hvis en kumulativ kostnadsavstand overstiger denne verdien, blir utdataverdien for cellelokasjonen NoData. Den maksimale avstanden definerer utstrekningen som de kumulative kostnadsavstandene beregnes for. Standardavstanden er til utstrekningen av utdatarasteret.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator som skal brukes på kostnadsverdiene.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Denne parameteren gjør det mulig å styre reisemåten eller størrelsen ved en kilde. Jo større multiplikator, jo større er kostnaden ved å bevege seg gjennom hver celle.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Verdiene må være større enn null. Standardverdien er 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Path-Distance_Source-Raster_tag0@@": "Obligatorisk inndataraster for kildelokasjoner.",
	"@@Path-Distance_Source-Raster_tag1@@": "Dette er et raster som identifiserer cellene eller lokasjonene som laveste akkumulerte kostnadsavstand fra hver utdatacellelokasjon beregnes fra.",
	"@@Path-Distance_Source-Raster_tag2@@": "Det kan være et heltall eller flyttall.",
	"@@Path-Distance_Start-Cost_tag0@@": "Startkostnaden som kostnadsberegningene skal ta utgangspunkt i. Med denne parameteren kan du spesifisere den faste kostnaden knyttet til en kilde. I stedet for å begynne med et kostnad på 0, begynner algoritmen med den verdien som er angitt.",
	"@@Path-Distance_Start-Cost_tag1@@": "Verdien må være null eller større. Standardverdien er 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "Et raster som definerer høydeverdiene for hver cellelokasjon.",
	"@@Path-Distance_Surface-Raster_tag1@@": "Verdiene brukes til å beregne den faktiske overflatedistansen som tilbakelegges når man beveger seg mellom cellene.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Definerer retningen for den reisende når kildens motstandsgrad og startkostnad brukes.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>From Source</strong> – Kildens motstandsgrad og startkostnad brukes fra inndatakilden og ut til ikke-kildecellene. Dette er standardalternativet.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>To Source</strong> – Kildens motstandsgrad og startkostnad brukes fra hver ikke-kildecelle og tilbake til inndatakilden.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Angi <strong>From Source</strong>- eller <strong>To Source</strong> -nøkkelordet som blir brukt på alle kilder, eller angi et felt i <strong>Source Raster</strong> som inneholder nøkkelordene for å identifisere reiseretning for hver kilde.. Feltet må inneholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Definerer forholdet mellom den vannrette kostnadsfaktoren og den horisontale relative bevegelsesvinkelen (VRMA).</p><p>Det er flere faktorer med modifikatorer som identifiserer en definert vertikal faktorgraf. I tillegg kan du bruke en tabell til å opprette en egendefinert graf. Grafene brukes til å identifisere den vertikale faktoren som brukes til å beregne den totale kostnaden ved å flytte inn i en nabocelle.</p><p>I forklaringene nedenfor brukes to akronymer: VF og VRMA. VF står for vertikal faktor som definerer vertikale problemer som forekommer når man beveger seg fra en celle til den neste. VRMA står for vertikal relativ bevegelig vinkel, som identifiserer helningsvinkelen mellom FROM- eller prosesseringscellen og TIL-cellen.</p><p><strong> Vertikalfaktortyper</strong>inkluderer følgende:</p><ul><li><strong>Binær</strong>--Spesifiserer at hvis VRMA er større enn den lave skjæringsvinkelen og mindre enn den høye skjæringsvinkelen, settes VF til verdien knyttet til nullfaktoren; ellers er det uendelig.</li><li><strong>Lineær</strong>--Indikerer at VF er en lineær funksjon av VRMA.</li><li><strong>Symmetrisk lineær </strong>--Spesifiserer at VF er en lineær funksjon av VRMA i henholdsvis den negative eller positive siden av VRMA, og de to lineære funksjonene er symmetriske i forhold til VF (y) aksen.</li><li><strong>Invers lineær</strong>--Indikerer at VF er en invers lineær funksjon av VRMA.</li><li><strong>Symmetrisk invers lineær</strong>--Spesifiserer at VF er en invers lineær funksjon av VRMA i henholdsvis den negative eller positive siden av VRMA, og de to lineære funksjonene er symmetriske med hensyn til VF (y)-aksen.</li><li><strong>Cos</strong>--Identifiserer VF som den cosinusbaserte funksjonen til VRMA.</li><li><strong>Sec</strong>--Identifiserer VF som den sekantbaserte funksjonen til VRMA.</li><li><strong>Cos-Sec</strong>--Spesifiserer at VF er den cosinusbaserte funksjonen til VRMA når VRMA er negativ og den sekantbaserte funksjonen til VRMA når VRMA ikke er negativ.</li><li><strong>Sec-Cos</strong>--Spesifiserer at VF er den sekantbaserte funksjonen til VRMA når VRMA er negativ og den cosinusbaserte funksjonen til VRMA når VRMA ikke er negativ.</li><li><strong>Tabell</strong>--Identifiserer at en tabellfil vil bli brukt til å definere vertikalfaktorgrafen som brukes til å bestemme VF-ene.</li></ul><p>Modifikatorer for vertikale søkeord inkluderer følgende:</p><ul><li><strong>Zero factor</strong>--Etablerer den vertikale faktoren som brukes når VRMA er null. Denne faktoren plasserer y-skjæringspunktet for den angitte funksjonen. Nullfaktor kan per definisjon ikke brukes på trigonometriske vertikale funksjoner (COS, SEC, COS-SEC eller SEC-COS). Y-skjæringspunktet er definert av disse funksjonene.</li><li><strong>Lav skjæringsvinkel</strong>--Definerer VRMA-vinkelen som VF vil bli satt til uendelig under.</li><li><strong>Høy skjæringsvinkel</strong>--Definerer VRMA-vinkelen over som VF vil settes til uendelig.</li><li><strong>Helning</strong>--Etablerer helningen til den rette linjen som brukes med <strong>Lineær</strong>og<strong>invers lineær</strong>vertikalfaktor nøkkelord. Helningen er spesifisert som en brøkdel av stigning over løp (for eksempel er 45 prosent helning 1/45, som angis som 0,02222).</li><li><strong>Tabellnavn</strong>--Identifiserer navnet på tabellen som definerer VF.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Definerer forholdet mellom den loddrette kostnadsfaktoren og den loddrette relative bevegelsesvinkelen (vertical relative moving angle, VRMA).",
	"@@Path-Distance_Vertical-Raster_tag1@@": "Verdiene brukes til å beregne helningen som  brukes til å identifisere den vertikale faktoren ved å bevege se fra en celle til en annen.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Denne parameteren simulerer økningen i innsats for å klare kostnadene etter hvert som den akkumulerte kostnaden øker. Brukes til å modellere tretthet hos reisende. Den økende kumulative kostnaden ved å nå en celle multipliseres med motstandsgraden og legges til kostnaden med å bevege seg inn i den etterfølgende cellen.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Det er en modifisert versjon av en rentes rente-formel som brukes til å beregne de synlige kostnadene ved å bevege seg gjennom en celle. Etter hvert som verdien for rentes rente stiger, øker kostnaden for cellene som besøkes senere. Jo høyere motstandsgraden er, jo høyere er kostnadene ved å nå den neste cellen, som tilskrives for hver etterfølgende bevegelse. Siden motstandsgraden ligner på en rentes rente-formel, og de kumulerte kostnadsverdiene generelt er svært store, foreslås lave motstandsgrader som 0,005 og enda mindre, avhengig av de kumulerte kostnadsverdiene.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Definerer kostnadskapasiteten for den reisende for en kilde. Kostnadsberegningene fortsetter for hver kilde til den angitte kapasiteten er nådd.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "Et obligatorisk inndataraster som definerer kostnader eller impedans ved å bevege seg planimetrisk gjennom hver celle. Verdien ved hver celleplassering representerer kostnad-per-enhet-avstanden for bevegelse gjennom cellen. Hver celleplasseringsverdi multipliseres med celleoppløsningen og kompenserer også for diagonal bevegelse for å finne de totale kostnadene ved å passere gjennom cellen.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "Verdiene for <strong>Cost Raster</strong> kan være heltall eller flyttall, men de kan ikke være negative tall eller null.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Definerer forholdet mellom den vannrette kostnadsfaktoren og den horisontale relative bevegelsesvinkelen (horizontal relative moving angle, HRMA).</p><p>Det er flere faktorer med modifikatorer som identifiserer en definert vertikal faktorgraf. I tillegg kan du bruke en tabell til å opprette en egendefinert graf. Grafene brukes til å identifisere den vertikale faktoren som brukes til å beregne den totale kostnaden ved å flytte inn i en nabocelle.</p><p>I forklaringene nedenfor brukes to akronymer: HF og HRMA. HF står for horisontal faktor som definerer horisontale problemer som forekommer når man beveger seg fra en celle til den neste. HRMA står for horisontal relativ bevegelig vinkel, som identifiserer vinkelen mellom horisontal retning fra en celle og bevegelig retning.</p><p><strong>Horisontale faktor</strong>-typer inkluderer følgende:</p><ul><li><strong>Binær</strong>--indikerer at hvis HRA er mindre enn kuttevinkelen, settes HF til verdien knyttet til nullfaktoren; ellers er det uendelig. </li><li><strong>Forward</strong>--Fastslår at kun bevegelse forover er tillatt. HRMA må være større enn eller lik 0 og mindre enn 90 grader (0&lt;= HRMA < 90). Hvis HRMA er større enn 0 og mindre enn 45 grader, settes HF for cellen til verdien som er knyttet til nullfaktoren. Hvis HRMA er større enn eller lik 45 grader, brukes modifikatorverdien for sideverdien. HF for enhver HRMA-verdi lik eller større enn 90 grader er satt til uendelig.</li><li><strong>Linear</strong>--Spesifiserer at HF er en lineær funksjon av HRMA.</li><li><strong>Inverse Linear</strong>--Spesifiserer at HF er en invers lineær funksjon av HRMA.</li><li><strong>Table</strong>--Identifiserer at en tabellfil vil bli brukt til å definere den horisontale faktorgrafen som brukes til å bestemme HF-ene </li></ul><p>Modifikatorer til de horisontale faktorene inkluderer følgende :</p><ul><li><strong>Null-faktor</strong>--Den horisontale faktoren som skal brukes når HRMA er null. Denne faktoren plasserer y-skjæringspunktet for en hvilken som helst av de horisontale faktorfunksjonene.</li><li><strong>Skjæringsvinkel</strong>--Definerer HRMA-vinkelen som HF-en vil bli satt til uendelig utenfor.</li><li><strong>Helning</strong>--Etablerer helningen til den rette linjen som brukes med horisontalfaktor-søkeordene<strong>Lineær</strong>og<strong>Invers lineær</strong>. Helningen er spesifisert som en brøkdel av stigning over løp (for eksempel er 45 prosent helning 1/45, som angis som 0,02222).</li><li><strong>Sideverdi</strong>--Etablerer HF når HRMA er større enn eller lik 45 grader og mindre enn 90 grader når<strong>Fremover</strong>horisontalfaktor søkeord spesifiseres.</li><li><strong>Tabellnavn</strong>--Identifiserer navnet på tabellen som definerer HF.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "Et raster som definerer den horisontale retningen i hver celle.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "Verdiene i rasteret må være heltall fra 0 til 360, der 0 grader er nord, eller mot toppen av skjermen og stigende med klokken. Flate områder skal ha verdien -1. Verdiene for hver lokasjon brukes i forbindelse med <strong>Horizontal factor</strong> til å fastsette den horisontale kostnaden ved å bevege seg fra en celle til naboceller.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "Terskelen som de kumulative kostnadsverdiene ikke kan overstige. Hvis en kumulativ kostnadsavstand overstiger denne verdien, blir utdataverdien for cellelokasjonen NoData. Den maksimale avstanden definerer utstrekningen som de kumulative kostnadsavstandene beregnes for. Standardavstanden er til utstrekningen av utdatarasteret.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator som skal brukes på kostnadsverdiene.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Denne parameteren gjør det mulig å styre reisemåten eller størrelsen ved en kilde. Jo større multiplikator, jo større er kostnaden ved å bevege seg gjennom hver celle.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Verdiene må være større enn null. Standardverdien er 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "Feltet som brukes til å tilordne verdier til kildelokasjonene. Det må være en heltallstype. Hvis <strong>Value Raster</strong> er angitt, vil verdiene i disse inndataene ha forrang over eventuelle innstillinger for <strong>Source Field</strong>.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "Obligatorisk inndataraster for kildelokasjoner.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Dette er et raster som identifiserer cellene eller lokasjonene som laveste akkumulerte kostnadsavstand fra hver utdatacellelokasjon beregnes fra.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Det kan være et heltall eller flyttall.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "Startkostnaden som kostnadsberegningene skal ta utgangspunkt i. Med denne parameteren kan du spesifisere den faste kostnaden knyttet til en kilde. I stedet for å begynne med et kostnad på 0, begynner algoritmen med den verdien som er angitt.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "Verdien må være null eller større. Standardverdien er 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "Et raster som definerer høydeverdiene for hver cellelokasjon.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "Verdiene brukes til å beregne den faktiske overflatedistansen som tilbakelegges når man beveger seg mellom cellene.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Definerer retningen for den reisende når kildens motstandsgrad og startkostnad brukes.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>From Source</strong> – Kildens motstandsgrad og startkostnad brukes fra inndatakilden og ut til ikke-kildecellene. Dette er standardalternativet.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>To Source</strong> – Kildens motstandsgrad og startkostnad brukes fra hver ikke-kildecelle og tilbake til inndatakilden.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Angi <strong>From Source</strong>- eller <strong>To Source</strong> -nøkkelordet som blir brukt på alle kilder, eller angi et felt i <strong>Source Raster</strong> som inneholder nøkkelordene for å identifisere reiseretning for hver kilde.. Feltet må inneholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "Inndatarasteret med heltall som identifiserer soneverdiene som skal brukes for hver inndatakildelokasjon. For hver kildelokasjonscelle blir verdien definert av <strong>Value Raster</strong> tilordnet alle celler som er tildelt kildelokasjonen for beregningen. <strong>Value Raster</strong> får forrang over eventuelle innstillinger for <strong>Source Field</strong>.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Definerer forholdet mellom den vannrette kostnadsfaktoren og den horisontale relative bevegelsesvinkelen (VRMA).</p><p>Det er flere faktorer med modifikatorer som identifiserer en definert vertikal faktorgraf. I tillegg kan du bruke en tabell til å opprette en egendefinert graf. Grafene brukes til å identifisere den vertikale faktoren som brukes til å beregne den totale kostnaden ved å flytte inn i en nabocelle.</p><p>I forklaringene nedenfor brukes to akronymer: VF og VRMA. VF står for vertikal faktor som definerer vertikale problemer som forekommer når man beveger seg fra en celle til den neste. VRMA står for vertikal relativ bevegelig vinkel, som identifiserer helningsvinkelen mellom FROM- eller prosesseringscellen og TIL-cellen.</p><p><strong> Vertikalfaktortyper</strong>inkluderer følgende:</p><ul><li><strong>Binær</strong>--Spesifiserer at hvis VRMA er større enn den lave skjæringsvinkelen og mindre enn den høye skjæringsvinkelen, settes VF til verdien knyttet til nullfaktoren; ellers er det uendelig.</li><li><strong>Lineær</strong>--Indikerer at VF er en lineær funksjon av VRMA.</li><li><strong>Symmetrisk lineær </strong>--Spesifiserer at VF er en lineær funksjon av VRMA i henholdsvis den negative eller positive siden av VRMA, og de to lineære funksjonene er symmetriske i forhold til VF (y) aksen.</li><li><strong>Invers lineær</strong>--Indikerer at VF er en invers lineær funksjon av VRMA.</li><li><strong>Symmetrisk invers lineær</strong>--Spesifiserer at VF er en invers lineær funksjon av VRMA i henholdsvis den negative eller positive siden av VRMA, og de to lineære funksjonene er symmetriske med hensyn til VF (y)-aksen.</li><li><strong>Cos</strong>--Identifiserer VF som den cosinusbaserte funksjonen til VRMA.</li><li><strong>Sec</strong>--Identifiserer VF som den sekantbaserte funksjonen til VRMA.</li><li><strong>Cos-Sec</strong>--Spesifiserer at VF er den cosinusbaserte funksjonen til VRMA når VRMA er negativ og den sekantbaserte funksjonen til VRMA når VRMA ikke er negativ.</li><li><strong>Sec-Cos</strong>--Spesifiserer at VF er den sekantbaserte funksjonen til VRMA når VRMA er negativ og den cosinusbaserte funksjonen til VRMA når VRMA ikke er negativ.</li><li><strong>Tabell</strong>--Identifiserer at en tabellfil vil bli brukt til å definere vertikalfaktorgrafen som brukes til å bestemme VF-ene.</li></ul><p>Modifikatorer for vertikale søkeord inkluderer følgende:</p><ul><li><strong>Zero factor</strong>--Etablerer den vertikale faktoren som brukes når VRMA er null. Denne faktoren plasserer y-skjæringspunktet for den angitte funksjonen. Nullfaktor kan per definisjon ikke brukes på trigonometriske vertikale funksjoner (COS, SEC, COS-SEC eller SEC-COS). Y-skjæringspunktet er definert av disse funksjonene.</li><li><strong>Lav skjæringsvinkel</strong>--Definerer VRMA-vinkelen som VF vil bli satt til uendelig under.</li><li><strong>Høy skjæringsvinkel</strong>--Definerer VRMA-vinkelen over som VF vil settes til uendelig.</li><li><strong>Helning</strong>--Etablerer helningen til den rette linjen som brukes med <strong>Lineær</strong>og<strong>invers lineær</strong>vertikalfaktor nøkkelord. Helningen er spesifisert som en brøkdel av stigning over løp (for eksempel er 45 prosent helning 1/45, som angis som 0,02222).</li><li><strong>Tabellnavn</strong>--Identifiserer navnet på tabellen som definerer VF.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Definerer forholdet mellom den loddrette kostnadsfaktoren og den loddrette relative bevegelsesvinkelen (vertical relative moving angle, VRMA).",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "Verdiene brukes til å beregne helningen som  brukes til å identifisere den vertikale faktoren ved å bevege se fra en celle til en annen.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Denne parameteren simulerer økningen i innsats for å klare kostnadene etter hvert som den akkumulerte kostnaden øker. Brukes til å modellere tretthet hos reisende. Den økende kumulative kostnaden ved å nå en celle multipliseres med motstandsgraden og legges til kostnaden med å bevege seg inn i den etterfølgende cellen.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Det er en modifisert versjon av en rentes rente-formel som brukes til å beregne de synlige kostnadene ved å bevege seg gjennom en celle. Etter hvert som verdien for rentes rente stiger, øker kostnaden for cellene som besøkes senere. Jo høyere motstandsgraden er, jo høyere er kostnadene ved å nå den neste cellen, som tilskrives for hver etterfølgende bevegelse. Siden motstandsgraden ligner på en rentes rente-formel, og de kumulerte kostnadsverdiene generelt er svært store, foreslås lave motstandsgrader som 0,005 og enda mindre, avhengig av de kumulerte kostnadsverdiene.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Definerer kostnadskapasiteten for den reisende for en kilde. Kostnadsberegningene fortsetter for hver kilde til den angitte kapasiteten er nådd.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "Et obligatorisk inndataraster som definerer kostnader eller impedans ved å bevege seg planimetrisk gjennom hver celle. Verdien ved hver celleplassering representerer kostnad-per-enhet-avstanden for bevegelse gjennom cellen. Hver celleplasseringsverdi multipliseres med celleoppløsningen og kompenserer også for diagonal bevegelse for å finne de totale kostnadene ved å passere gjennom cellen.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "Verdiene for <strong>Cost Raster</strong> kan være heltall eller flyttall, men de kan ikke være negative tall eller null.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Definerer forholdet mellom den vannrette kostnadsfaktoren og den horisontale relative bevegelsesvinkelen (horizontal relative moving angle, HRMA).</p><p>Det er flere faktorer med modifikatorer som identifiserer en definert vertikal faktorgraf. I tillegg kan du bruke en tabell til å opprette en egendefinert graf. Grafene brukes til å identifisere den vertikale faktoren som brukes til å beregne den totale kostnaden ved å flytte inn i en nabocelle.</p><p>I forklaringene nedenfor brukes to akronymer: HF og HRMA. HF står for horisontal faktor som definerer horisontale problemer som forekommer når man beveger seg fra en celle til den neste. HRMA står for horisontal relativ bevegelig vinkel, som identifiserer vinkelen mellom horisontal retning fra en celle og bevegelig retning.</p><p><strong>Horisontale faktor</strong>-typer inkluderer følgende:</p><ul><li><strong>Binær</strong>--indikerer at hvis HRA er mindre enn kuttevinkelen, settes HF til verdien knyttet til nullfaktoren; ellers er det uendelig. </li><li><strong>Forward</strong>--Fastslår at kun bevegelse forover er tillatt. HRMA må være større enn eller lik 0 og mindre enn 90 grader (0&lt;= HRMA < 90). Hvis HRMA er større enn 0 og mindre enn 45 grader, settes HF for cellen til verdien som er knyttet til nullfaktoren. Hvis HRMA er større enn eller lik 45 grader, brukes modifikatorverdien for sideverdien. HF for enhver HRMA-verdi lik eller større enn 90 grader er satt til uendelig.</li><li><strong>Linear</strong>--Spesifiserer at HF er en lineær funksjon av HRMA.</li><li><strong>Inverse Linear</strong>--Spesifiserer at HF er en invers lineær funksjon av HRMA.</li><li><strong>Table</strong>--Identifiserer at en tabellfil vil bli brukt til å definere den horisontale faktorgrafen som brukes til å bestemme HF-ene </li></ul><p>Modifikatorer til de horisontale faktorene inkluderer følgende :</p><ul><li><strong>Null-faktor</strong>--Den horisontale faktoren som skal brukes når HRMA er null. Denne faktoren plasserer y-skjæringspunktet for en hvilken som helst av de horisontale faktorfunksjonene.</li><li><strong>Skjæringsvinkel</strong>--Definerer HRMA-vinkelen som HF-en vil bli satt til uendelig utenfor.</li><li><strong>Helning</strong>--Etablerer helningen til den rette linjen som brukes med horisontalfaktor-søkeordene<strong>Lineær</strong>og<strong>Invers lineær</strong>. Helningen er spesifisert som en brøkdel av stigning over løp (for eksempel er 45 prosent helning 1/45, som angis som 0,02222).</li><li><strong>Sideverdi</strong>--Etablerer HF når HRMA er større enn eller lik 45 grader og mindre enn 90 grader når<strong>Fremover</strong>horisontalfaktor søkeord spesifiseres.</li><li><strong>Tabellnavn</strong>--Identifiserer navnet på tabellen som definerer HF.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "Et raster som definerer den horisontale retningen i hver celle.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "Verdiene i rasteret må være heltall fra 0 til 360, der 0 grader er nord, eller mot toppen av skjermen og stigende med klokken. Flate områder skal ha verdien -1. Verdiene for hver lokasjon brukes i forbindelse med <strong>Horizontal factor</strong> til å fastsette den horisontale kostnaden ved å bevege seg fra en celle til naboceller.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "Terskelen som de kumulative kostnadsverdiene ikke kan overstige. Hvis en kumulativ kostnadsavstand overstiger denne verdien, blir utdataverdien for cellelokasjonen NoData. Den maksimale avstanden definerer utstrekningen som de kumulative kostnadsavstandene beregnes for. Standardavstanden er til utstrekningen av utdatarasteret.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "En multiplikator som skal brukes på kostnadsverdiene.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Denne parameteren gjør det mulig å styre reisemåten eller størrelsen ved en kilde. Jo større multiplikator, jo større er kostnaden ved å bevege seg gjennom hver celle.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Verdiene må være større enn null. Standardverdien er 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "Obligatorisk inndataraster for kildelokasjoner.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Dette er et raster som identifiserer cellene eller lokasjonene som laveste akkumulerte kostnadsavstand fra hver utdatacellelokasjon beregnes fra.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Det kan være et heltall eller flyttall.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "Startkostnaden som kostnadsberegningene skal ta utgangspunkt i. Med denne parameteren kan du spesifisere den faste kostnaden knyttet til en kilde. I stedet for å begynne med et kostnad på 0, begynner algoritmen med den verdien som er angitt.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "Verdien må være null eller større. Standardverdien er 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "Et raster som definerer høydeverdiene for hver cellelokasjon.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "Verdiene brukes til å beregne den faktiske overflatedistansen som tilbakelegges når man beveger seg mellom cellene.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Definerer retningen for den reisende når kildens motstandsgrad og startkostnad brukes.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>From Source</strong> – Kildens motstandsgrad og startkostnad brukes fra inndatakilden og ut til ikke-kildecellene. Dette er standardalternativet.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>To Source</strong> – Kildens motstandsgrad og startkostnad brukes fra hver ikke-kildecelle og tilbake til inndatakilden.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Angi <strong>From Source</strong>- eller <strong>To Source</strong> -nøkkelordet som blir brukt på alle kilder, eller angi et felt i <strong>Source Raster</strong> som inneholder nøkkelordene for å identifisere reiseretning for hver kilde.. Feltet må inneholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Definerer forholdet mellom den vannrette kostnadsfaktoren og den horisontale relative bevegelsesvinkelen (VRMA).</p><p>Det er flere faktorer med modifikatorer som identifiserer en definert vertikal faktorgraf. I tillegg kan du bruke en tabell til å opprette en egendefinert graf. Grafene brukes til å identifisere den vertikale faktoren som brukes til å beregne den totale kostnaden ved å flytte inn i en nabocelle.</p><p>I forklaringene nedenfor brukes to akronymer: VF og VRMA. VF står for vertikal faktor som definerer vertikale problemer som forekommer når man beveger seg fra en celle til den neste. VRMA står for vertikal relativ bevegelig vinkel, som identifiserer helningsvinkelen mellom FROM- eller prosesseringscellen og TIL-cellen.</p><p><strong> Vertikalfaktortyper</strong>inkluderer følgende:</p><ul><li><strong>Binær</strong>--Spesifiserer at hvis VRMA er større enn den lave skjæringsvinkelen og mindre enn den høye skjæringsvinkelen, settes VF til verdien knyttet til nullfaktoren; ellers er det uendelig.</li><li><strong>Lineær</strong>--Indikerer at VF er en lineær funksjon av VRMA.</li><li><strong>Symmetrisk lineær </strong>--Spesifiserer at VF er en lineær funksjon av VRMA i henholdsvis den negative eller positive siden av VRMA, og de to lineære funksjonene er symmetriske i forhold til VF (y) aksen.</li><li><strong>Invers lineær</strong>--Indikerer at VF er en invers lineær funksjon av VRMA.</li><li><strong>Symmetrisk invers lineær</strong>--Spesifiserer at VF er en invers lineær funksjon av VRMA i henholdsvis den negative eller positive siden av VRMA, og de to lineære funksjonene er symmetriske med hensyn til VF (y)-aksen.</li><li><strong>Cos</strong>--Identifiserer VF som den cosinusbaserte funksjonen til VRMA.</li><li><strong>Sec</strong>--Identifiserer VF som den sekantbaserte funksjonen til VRMA.</li><li><strong>Cos-Sec</strong>--Spesifiserer at VF er den cosinusbaserte funksjonen til VRMA når VRMA er negativ og den sekantbaserte funksjonen til VRMA når VRMA ikke er negativ.</li><li><strong>Sec-Cos</strong>--Spesifiserer at VF er den sekantbaserte funksjonen til VRMA når VRMA er negativ og den cosinusbaserte funksjonen til VRMA når VRMA ikke er negativ.</li><li><strong>Tabell</strong>--Identifiserer at en tabellfil vil bli brukt til å definere vertikalfaktorgrafen som brukes til å bestemme VF-ene.</li></ul><p>Modifikatorer for vertikale søkeord inkluderer følgende:</p><ul><li><strong>Zero factor</strong>--Etablerer den vertikale faktoren som brukes når VRMA er null. Denne faktoren plasserer y-skjæringspunktet for den angitte funksjonen. Nullfaktor kan per definisjon ikke brukes på trigonometriske vertikale funksjoner (COS, SEC, COS-SEC eller SEC-COS). Y-skjæringspunktet er definert av disse funksjonene.</li><li><strong>Lav skjæringsvinkel</strong>--Definerer VRMA-vinkelen som VF vil bli satt til uendelig under.</li><li><strong>Høy skjæringsvinkel</strong>--Definerer VRMA-vinkelen over som VF vil settes til uendelig.</li><li><strong>Helning</strong>--Etablerer helningen til den rette linjen som brukes med <strong>Lineær</strong>og<strong>invers lineær</strong>vertikalfaktor nøkkelord. Helningen er spesifisert som en brøkdel av stigning over løp (for eksempel er 45 prosent helning 1/45, som angis som 0,02222).</li><li><strong>Tabellnavn</strong>--Identifiserer navnet på tabellen som definerer VF.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Definerer forholdet mellom den loddrette kostnadsfaktoren og den loddrette relative bevegelsesvinkelen (vertical relative moving angle, VRMA).",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "Verdiene brukes til å beregne helningen som  brukes til å identifisere den vertikale faktoren ved å bevege se fra en celle til en annen.",
	"@@Plus_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Plus_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Plus_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Plus_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Plus_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Plus_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Plus_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Plus_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Plus_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Plus_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Plus_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Plus_Raster_tag0@@": "Inndataen hvis verdier legges til.",
	"@@Plus_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Plus_Raster2_tag0@@": "Inndataen hvis verdier legges til den første inndataen.",
	"@@Plus_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Local_Cellsize-Type_tag0@@": "Velg hvilken cellestørrelse som skal brukes i det resulterende rasteret. Hvis alle inndatacellene er like, gir alle alternativene samme resultat.",
	"@@Local_Cellsize-Type_tag1@@": "Først av: Bruk den første cellestørrelsen i inndatarasterne.",
	"@@Local_Cellsize-Type_tag2@@": "Sist av: Bruk den siste cellestørrelsen i inndatarasterne.",
	"@@Local_Cellsize-Type_tag3@@": "Maks. av: Bruk den største cellestørrelsen i alle inndatarasterne. Dette er standardalternativet.",
	"@@Local_Cellsize-Type_tag4@@": "Gjennomsnitt av: Bruk den gjennomsnittlige cellestørrelsen i alle inndatarasterne.",
	"@@Local_Cellsize-Type_tag5@@": "Min. av: Bruk den minste cellestørrelsen i alle inndatarasterne.",
	"@@Local_Extent-Type_tag0@@": "Velg hvilken utstrekning som skal brukes i det resulterende rasteret.",
	"@@Local_Extent-Type_tag1@@": "Først av: Bruk omfanget av det første inndatarasteret til å bestemme omfanget av behandlingen.",
	"@@Local_Extent-Type_tag2@@": "Skjæringspunkt av: Bruk omfanget av de overlappende pikslene til å bestemme omfanget av behandlingen. Dette er standardalternativet.",
	"@@Local_Extent-Type_tag3@@": "Sist av: Bruk omfanget av det siste inndatarasteret til å bestemme omfanget av behandlingen.",
	"@@Local_Extent-Type_tag4@@": "Union av: Bruk omfanget av alle rasterne til å bestemme omfanget av behandlingen.",
	"@@Local_Raster_tag0@@": "Inndataene som inneholder verdiene som skal legges til.",
	"@@Local_Raster_tag1@@": "En konstant verdi kan brukes som inndata for denne parameteren, forutsatt at et raster er angitt for den andre parameteren.",
	"@@Local_Raster2_tag0@@": "Inndataene som inneholder verdiene som skal legges til i de første inndataene.",
	"@@Local_Raster2_tag1@@": "En konstant verdi kan brukes som inndata for denne parameteren, forutsatt at et raster er angitt for den andre parameteren.",
	"@@Local_False-Raster_tag0@@": "Inndataene som inneholder verdiene som skal brukes som resulterende pikselverdier hvis vilkåret er usant. Det kan være et heltall, et flyttallraster eller en konstant verdi.",
	"@@Local_True-Raster_tag0@@": "Inndataene som inneholder verdiene som skal brukes som resulterende pikselverdier hvis vilkåret er sant. Det kan være et heltall, et flyttallraster eller en konstant verdi.",
	"@@Power_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Power_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Power_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Power_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Power_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Power_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Power_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Power_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Power_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Power_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Power_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Power_Raster_tag0@@": "Inndataverdiene som skal opphøyes i potensen definert av <strong>Raster2</strong>.",
	"@@Power_Raster_tag3@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Power_Raster2_tag0@@": "Inndataene som bestemmer potensen som verdiene for <strong>Raster</strong> skal opphøyes i.",
	"@@Power_Raster2_tag3@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "Typen kalibrering som skal utføres.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Beta-nought – Funksjonen returnerer radarrefleksjonen per enhetsområde i skråavstand. Dette er standard kalibreringstype.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Sigma-nought – Funksjonen returnerer radarrefleksjonen per enhetsområde i horisontalavstand. Resultatene er 32-bits flyttallsverdier som vanligvis er i området 0,0 til 1,0. Ingen dataklipping utføres hvis dette alternativet er valgt.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gamma – Funksjonen returnerer radarrefleksjonen per enhetsområde i planet vinkelrett på måleretningen.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Ingen",
	"@@Radar-Calibration_Raster_tag0@@": "Inndatarasteret.",
	"@@RasterInfo_Raster-Info_tag0@@": "Velg et rasterdatasett som skal brukes som mal",
	"@@RasterInfo_Raster_tag0@@": "Inndatarasteret.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "En liste over felt i <strong>Zonal Attributes Table</strong>, der hvert felt er atskilt med komma. Verdiene i hvert felt blir representert av et bånd i utdatarasteret.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "Den opprinnelige pikselverdien for utdatabåndene i et raster før den tilordnes på nytt.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Hvis en piksel ikke faller innenfor en sone, beholdes den som bakgrunnsverdi.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "Obligatorisk inndataraster.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "Inndata må være et enkeltbåndraster. Hvis det brukes et raser med flere bånd, brukes kun det første båndet.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "En valgfri tilleggsspørring brukes på <strong>Zonal Attributes Table</strong>.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "Hvis du brukte tabellen ovenfor som et eksempel, blir spørringen ${Variable1 = 'bare earth'}.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "Soneattributtene angitt som en bane til en lokal geoobjektklasse, banen til en tabell med URL-en til et geoobjekttjenestelag eller en JSON-streng.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "I JSON er det beskrevet som en samling av kartlegginger fra sone-ID-er til en rekke heltall. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "Feltnavnet som inneholder sone-ID-verdiene.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "Et valgfritt enkeltbåndsraster der hver piksel inneholder sone-ID-en som er tilknyttet lokasjonen. Sone-ID-en brukes til å søke i rader i soneattributtabellen for sonespesifikk behandling.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Hvis du kun vil importere attributtet, angir du ikke denne parameteren.",
	"@@Rasterize-Features_Field_tag0@@": "Velg feltet som skal brukes til å identifisere hvert geoobjekt.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Velg geoobjektklassen som skal konverteres til rasterformat.",
	"@@Rasterize-Features_Raster_tag0@@": "Velg et raster for å definere cellestørrelsen og utstrekningen for geoobjektkonverteringen.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Angi hvordan overlappende geoobjekter skal håndteres:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>First</strong> – De overlappende områdene blir tilordnet en verdi fra det første datasettet som er oppført.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Last</strong> – De overlappende områdene blir tilordnet en verdi fra det siste datasettet som er oppført.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Smallest</strong> – De overlappende områdene blir tilordnet en verdi fra det minste av geoobjektene.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Largest</strong> – De overlappende områdene blir tilordnet en verdi fra det største av geoobjektene.",
	"@@Recast_Overrides_tag0@@": "En tabell med variabelnavn og brukerdefinerte verdier som brukes til å endre et mosaikkdatasett.",
	"@@Recast_Raster_tag0@@": "Rasterproduktet som funksjonen Omarbeid skal brukes på.",
	"@@Region-Group_Add-Link_tag0@@": "Angir om et lenkefelt legges til utdatatabellen.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Add Link</strong> – Et ${LINK}-element blir lagt til tabellen for utdatarasteret.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>No Link</strong> – Attributtabellen for utdatarasteret vil kun inneholde elementene ${Value} og ${Count}.",
	"@@Region-Group_Excluded-Value_tag0@@": "Angir en verdi slik at hvis en cellelokasjon inneholder denne verdien, vil den romlige forbindelsen ikke blir evaluert, uansett hvordan antallet naboer er spesifisert (FIRE eller ÅTTE).",
	"@@Region-Group_Excluded-Value_tag1@@": "Celler med den ekskluderte verdien blir behandlet som NoData og elimineres fra beregninger. Cellelokasjoner som inneholder den ekskluderte verdien, vil få 0 i utdatarasteret.",
	"@@Region-Group_Excluded-Value_tag2@@": "Den ekskluderte verdien tilsvarer konseptet med bakgrunnsverdi eller det å bruke en maske. Det må angis en verdi for denne parameteren hvis parameteren <strong>${CROSS}</strong> er angitt.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "Antallet naboceller som skal brukes til å evaluere forbindelsen mellom cellene.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>FOUR</strong> – – Definerer forbindelsen mellom celler med samme verdi kun hvis cellene er direkte til venstre, høyre, over eller under hver av de fire nærmeste naboene. Dette er standardalternativet.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>EIGHT</strong> – Definerer forbindelsen mellom celler med samme verdi hvis de ligger umiddelbart innenfor et åttecellers nabolag fra hverandre. Dette omfatter celler til høyre, venstre, over eller diagonalt for hverandre.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Definerer hvilke celleverdier som skal vurderes ved testing av forbindelse.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>WITHIN</strong> – Tester forbindelsen mellom inndataverdier som er like innenfor samme sone. Dette er standardalternativet.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "De eneste cellene som kan grupperes, er celler fra samme sone (verdi) som oppfyller de romlige forbindelseskrav som er angitt av parameteren <strong>Number of neighbors</strong> (fireveis eller åtteveis).",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>CROSS</strong> – Tester forbindelsen ved de romlige kravene som er angitt av antallet naboparametere mellom cellene med verdier, med unntak av den verdien som det er bestemt skal ekskluderes av parameteren for ekskludert verdi.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "Når dette alternativet brukes, må det være angitt en verdi for <strong>Excluded value</strong>-parameteren.",
	"@@Region-Group_Zone-Raster_tag0@@": "Det obligatoriske inndatarasteret hvis unike tilkoblede områder vil bli identifisert.",
	"@@Region-Group_Zone-Raster_tag1@@": "Det må være av heltallstype.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "Feltet i attributtabellen som definerer fyllverdien for pikselgruppen. I et bånd med flere bånd blir samtlige bånd tilordnet denne verdien.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "Feltet i attributtabellen som definerer maksimal vekstradius i bildets romlige referanseenheter.",
	"@@Region-Grow_Raster_tag0@@": "Rasteret som du vil utføre denne funksjonen på.",
	"@@Region-Grow_Seed-Points_tag0@@": "En punktgeoobjektklasse som fungerer som opprinnelig seed for algoritmen. Hvert seed-punkt tilsvarer én oppføring i attributtabellen, som overfører informasjon om den maksimale vekstradiusen, terskelen for likhet og fyllverdi.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "Feltet i attributtabellen som definerer terskelen for likhet som den euklidske avstand i det spektrale rom.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Manglende verdier i reklassifiseringstabellen kan beholde verdien eller tilordnes verdien NoData.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Ikke avmerket – En piksel fra inndatarasteret som ikke reklassifiseres i en tabell for ny tilordning, beholder sin verdi og skrives for sin plassering til utdatarasteret. Dette er standardalternativet.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Avmerket – En piksel fra inndatarasteret som ikke blir reklassifisert i en tabell for ny tilordning, får verdien tilordnet på nytt til NoData for sin plassering til utdatarasteret.",
	"@@Remap_Input-Field_tag0@@": "Velg feltet som angir verdien for inndatapikselen som skal tilordnes ny verdi.",
	"@@Remap_Input-Field_tag1@@": "Hvis tabellen har et verdiområde, blir dette minimumsverdiområdet, og parameteren <strong>Input Max Field</strong> må også angis.",
	"@@Remap_Input-Max-Field_tag0@@": "Velg maksimumverdifeltet hvis tabellen din angir et verdiområde.",
	"@@Remap_List_tag0@@": "Angi kartverdiene og minste og største verdiområde samt verdiene som er tilordnet på nytt. Verdiområdet kan i tillegg angis som NoData-piksler.",
	"@@Remap_Output-Field_tag0@@": "Velg feltet som skal brukes som nytilordnet utdataverdi.",
	"@@Remap_Raster_tag0@@": "Inndatarasteret.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Velg alternativet du vil bruke til å angi verdier for ny tilordning:",
	"@@Remap_Remap-Definition-Type_tag1@@": "Liste – Angir et område med pikselverdier som skal tilordnes en ny pikselverdi i resultatet",
	"@@Remap_Remap-Table-Type_tag0@@": "Velg den tabelltypen du vil bruke til å tilordne inndatarasteret på nytt:",
	"@@Remap_Remap-Table-Type_tag1@@": "Simple – Bruker <strong>Remap Table</strong>-inndataene til å tilordne <strong>Input Field</strong>-pikselverdiene på nytt til den tilsvarende verdien i <strong>Output Field</strong>-parameteren. Denne metoden bufrer tabellen for ny tilordning for raskere ytelse.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dynamisk – Denne metoden bufrer ikke tabellen for ny tilordning og sender en spørring hver gang det kommer en forespørsel (panorer, zoom eller oppdater). Hvis tabellen endres, kan neste forespørsel foreta en tilsvarende dynamisk ny tilordning av verdiene.",
	"@@Remap_Remap-Table-Type_tag9@@": "Omfordeling – En bestemt tabell som brukes til reklassifiseringsprosessen, der hver rad i tabellen kun tilordnes på nytt på grunnlag av hver geoobjektgrense.",
	"@@Remap_Remap-Table_tag0@@": "Gå til tabellen som angir dine verdier for ny tilordning.",
	"@@Reproject_Raster_tag0@@": "Rasterdatasettet som skal reprojiseres eller resamples.",
	"@@Reproject_Spatial-Reference_tag0@@": "Koordinatsystemet brukt til å reprojisere dataene.",
	"@@Reproject_X-Cellsize_tag0@@": "X-dimensjonen som dataene skal resamples til. Dette er valgfritt. Hvis verdien er 0 eller mindre, beregnes utdata-omslutning (utstrekning og cellestørrelser) fra inndatarasteret.",
	"@@Reproject_X-Registration-Point_tag0@@": "X-koordinaten som brukes til å definere øvre venstre hjørne av datasettet. Koordinaten må være definert i enhetene for den nye romlige referansen. Hvis både <strong>X Cellsize</strong> og <strong>Y Cellsize</strong> er større enn 0, brukes de sammen med parametrene <strong>X Registration Point</strong> og <strong>Y Registration Point</strong> til å definere utdata-omslutning.",
	"@@Reproject_Y-Cellsize_tag0@@": "Y-dimensjonen som dataene skal resamples til. Dette er valgfritt. Hvis verdien er 0 eller mindre, beregnes utdata-omslutning (utstrekning og cellestørrelser) fra inndatarasteret.",
	"@@Reproject_Y-Registration-Point_tag0@@": "Y-koordinaten som brukes til å definere øvre venstre hjørne av datasettet. Koordinaten må være definert i enhetene for den nye romlige referansen. Hvis både <strong>X Cellsize</strong> og <strong>Y Cellsize</strong> er større enn 0, brukes de sammen med parametrene <strong>X Registration Point</strong> og <strong>Y Registration Point</strong> til å definere utdata-omslutning.",
	"@@Resample_Input-Cellsize_tag0@@": "Pikselcellestørrelsen i inndatarasteret.",
	"@@Resample_Output-Cellsize_tag0@@": "Søkeradiusen som tettheten beregnes innenfor. Cellestørrelsen kan endres, men utstrekningen for rasterdatasettet forblir lik. Resampling fra en brukerdefinert cellestørrelse kan ta mye lenger tid enn med systemstandarden siden systemets standardprosesser for resampling behandler minimum datamengde fra nærmeste mulige oppløsning.",
	"@@Resample_Raster_tag0@@": "Inndatarasteret som skal resamples.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>Nearest Neighbor</strong> – Beregner utdatapikselverdien ved hjelp av nærmeste inndatapiksel. NoData-piksler forblir uendret i resulterende rasterdatasett. Dette er standardinnstillingen.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Bilinear Interpolation</strong> – Beregner pikselverdien ved hjelp av den avstandsvektede verdien av de fire nærmeste pikslene. Dette er en effektiv beregningsmetode.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Cubic Convolution</strong> – Bestemmer den nye verdien for en piksel ved å tilpasse en jevn kurve gjennom de 16 nærmeste inndatapikselsentrene.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Majority</strong> – Beregner pikselverdien ved hjelp av majoritetspikselverdien i de 16 nærmeste pikslene. NoData-piksler forblir uendret i resulterende rasterdatasett.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Bilinear Interpolation Plus</strong> – Bruker <strong>Bilinear Interpolation</strong>, men pikslene langs kantene defineres som NoData og blir ikke replikert eller vurdert i beregningen. Bruke <strong>Bilinear Interpolation Plus</strong> for flisdata fordi kantene passer bedre.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Gauss Blur</strong> – Bruker en gaussisk konvolusjon på kilderasteret og beregner pikselverdien ved hjelp av den avstandsvektede verdien av de fire nærmeste pikslene fra det uskarpe rasteret. Egnet til å fjerne støy i data som er samplet på nytt, og til nedsampling til større pikselstørrelse.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Gauss Blur Plus</strong> – Bruker samme metode som <strong>Gauss Blur</strong>, men pikslene langs kantene defineres som NoData og blir ikke replikert eller vurdert i beregningen. Bruk <strong>Gauss Blur Plus</strong> for flisdata fordi kantene passer bedre.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Average</strong> – Beregner pikselverdier ved hjelp av gjennomsnittsverdien av alle overlappende piksler, for hver målpiksel.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Minimum</strong> – Beregner pikselverdien ved hjelp av minimumsverdien av alle overlappende piksler. NoData-piksler forblir uendret i resulterende rasterdatasett.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Maximum</strong> – Er velegnet til kontinuerlige data og gir et bedre utdatabilde enn metoden for resampling av nærmeste nabo.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Vector Average</strong> – Beregner vektorgjennomsnittet av størrelse-retning ved hjelp av alle involverte piksler. Denne metoden kan kun brukes til tobåndsraster som representerer størrelse og retning. Først konverterer den størrelse-retning til U-V, og deretter tar den det aritmetiske gjennomsnittet på tvers av alle involverte piksler for å få U-V for målpikselen og konverterer den tilbake til størrelse-retning.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Round-Down_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Round-Down_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Round-Down_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Round-Down_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Round-Down_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Round-Down_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Round-Down_Raster_tag0@@": "Inndataverdiene som skal avrundes ned.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Round-Up_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Round-Up_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Round-Up_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Round-Up_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Round-Up_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Round-Up_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Round-Up_Raster_tag0@@": "Inndataverdiene som skal avrundes opp.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "Minste segmentstørrelse målt i piksler. Verdien er relatert til minste kartleggingsenhet og filtrerer ut mindre blokker med piksler. Alle segmenter som er mindre enn den angitte verdien, vil slå sammen de mindre segmentene med deres best passende nabosegment.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "Inndatarasteret som skal segmenteres.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "Segmentgrensene tegnes som en svart konturlinje rundt hvert segment. Det gjør det enklere å skille tilgrensende segmenter som har lignende farger.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Ikke avmerket – Segmentgrensene vises ikke. Dette er standardalternativet.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Avmerket – Segmentgrensene vises med svarte konturlinjer rundt hvert segment.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "Den relative betydningen av å skille objekter basert på romlige egenskaper.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "Gyldige heltallsverdier er fra 1 til 20. Mindre verdier resulterer i brede klasser og mer tilpasning. En høyere verdi er egnet når du vil skille mellom geoobjekter som er romlig små og gruppert sammen. I en urban scene kan du for eksempel klassifisere generelt ugjennomtrengelige flategeoobjekter ved hjelp av færre romlige detaljer, eller du kan klassifisere bygninger og veier som separate klasser med flere romlige detaljer.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "Den relative betydningen av å skille objekter basert på fargeegenskaper.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "Gyldige flyttallsverdier er fra 1,0 til 20,0. Mindre verdier resulterer i brede klasser og mer tilpasning. En høyere verdi er egnet når du vil skille mellom geoobjekter som har ganske like spektrale egenskaper. Ved å bruke en høyere verdi for de spektrale detaljene i et skogsområde kan du for eksempel skjelne bedre mellom de ulike tresortene.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>Et segments maksimale størrelse. Segmenter som er større enn spesifisert størrelse vil bli delt. Bruk denne parameteren for å forhindre artefakter i utdatalaget som skyldes store segmenter. Standardverdien er -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Velg én av fire kalibreringstyper:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta nought</strong> – Produserer utdata som inneholder koeffisienten for radarlysstyrke.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma nought</strong> – Tilbakekastingen som returneres til antennen fra et enhetsområde på bakken, relatert til horisontalavstand.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gamma</strong> – måling av utsendt og returnert energi som kan brukes til å bestemme antennemønstre.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>None</strong> – Korrigering brukes ikke. Dette er standardalternativet.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "Sentinel-1 Level-1 GRD- eller SLC -inndatarasteret du vil behandle.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "Denne funksjonen bruker LUT-filen til å utføre støykorrigeringen eller fjerne korrigeringen, avhengig av innholdet i LUT.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "Sentinel-1-inndatarasteret du vil behandle.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "Denne funksjonen bruker LUT-filen til å utføre støykorrigeringen eller fjerne korrigeringen, avhengig av innholdet i LUT.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Set-Null_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Set-Null_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Set-Null_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Set-Null_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Set-Null_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Set-Null_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Set-Null_False-Raster_tag0@@": "Inndataene hvis verdier blir brukt som utdatapikselverdier hvis betingelsen er usann. Det kan være et heltall, et flyttallsraster eller en konstant verdi.",
	"@@Set-Null_Raster_tag0@@": "Inndatarasteret som representerer det boolske resultatet av en logisk matematisk rasterfunksjon. Verdiene er enten 1 (sann) eller 0 (usann). Det kan være et heltall eller et flyttallsraster.",
	"@@Shaded-Relief_Altitude_tag0@@": "Solhøyde er solens høydevinkel over horisonten og går fra 0 til 90 grader. En verdi på 0 grader angir at solen er i horisonten, det vil si på samme horisontalplan som referanserammen. En verdi på 90 grader angir at solen er rett over. Standardinnstillingen er 45 grader over horisonten.",
	"@@Shaded-Relief_Azimuth_tag0@@": "Asimut er solenes relative posisjon langs horisonten (i grader). Posisjonen angis av solens vinkel målt med klokken fra rett nord. Asimut på 0 grader angir nord. Øst er 90 grader, sør er 180 grader og vest er 270 grader.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Angi om det skal brukes en fargepalett eller et fargekart til å vise det skyggelagte relieffet.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Color Ramp</strong> – Når du velger <strong>Color Ramp</strong>, blir du bedt om å velge en passende fargepalett.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Colormap</strong> – Når du velger <strong>Colormap</strong>, blir du bedt om å angi fargekartfilen som skal brukes.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Angi om standard kantpikselinterpolasjon skal være deaktivert.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Ikke avmerket – Bilineær resampling brukes enhetlig for å resample det skyggelagte relieffet. Dette er standardalternativet.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Avmerket – Bilineær resampling brukes i det skyggelagte relieffet, unntatt langs kantene på rastrene eller ved siden av NoData-piksler. Disse pikslene fylles med NoData siden det vil redusere effektene av eventuelle skarpe kanter som kan forekomme.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Ved å bruke dette alternativet unngås eventuelle resamplingsartefakter som kan oppstå langs kantene på et raster. Utdatapikslene langs kanten på et raster eller ved siden av piksler uten en verdi, fylles med NoData. Det anbefales derfor at dette alternativet kun brukes når det finnes andre rastre med overlappende piksler. Når det finnes overlappende piksler, vil NoData-områder vise de overlappende pikselverdiene i stedet for tomme piksler.",
	"@@Shaded-Relief_Raster_tag0@@": "Høyderaster (inndata).",
	"@@Shaded-Relief_Scaling_tag0@@": "Det skyggelagte resultatet skaleres dynamisk ved å justere z-faktoren ved hjelp av ett av to alternativer:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>None</strong> – Det brukes ingen skalering. Dette er velegnet til et enkelt rasterdatasett som dekker et lokalområde. Det anbefales ikke til verdensomspennende datasett med store variasjoner i høyde eller kart , med flere målestokker siden det gir terrengrelieff med liten variasjon ved visning i mindre målestokker.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Adjusted</strong> – Det brukes en ikke-lineær justering ved hjelp av standardverdier for <strong>Pixel Size Power</strong> og <strong>Pixel Size Factor</strong> som tar hensyn til en rekke ulike høydeendringer (skala) når betrakteren zoomer inn og ut. Alternativet <strong>Adjusted</strong> anbefales ved bruk av et verdensomspennende datasett.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "Z-faktoren er en skaleringsfaktor som brukes til å omdanne høydeverdiene til følgende to formål:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "Konvertere høydeenhetene (for eksempel meter eller fot) til de horisontale koordinatenhetene for datasettet, som kan være fot, meter eller grader.",
	"@@Shaded-Relief_Z-Factor_tag2@@": "Legge til vertikal overdrivelse for å oppnå en visuell effekt",
	"@@Shaded-Relief_Z-Factor_tag3@@": "Det skyggelagte resultatet skaleres dynamisk ved å justere z-faktoren ved hjelp av ett av to alternativer:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>None</strong> – Det brukes ingen skalering. Dette er velegnet til et enkelt rasterdatasett som dekker et lokalområde. Det anbefales ikke til verdensomspennende datasett med store variasjoner i høyde eller kart , med flere målestokker siden det gir terrengrelieff med liten variasjon ved visning i mindre målestokker.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Adjusted</strong> – Det brukes en ikke-lineær justering ved hjelp av standardverdier for <strong>Pixel Size Power</strong> og <strong>Pixel Size Factor</strong> som tar hensyn til en rekke ulike høydeendringer (skala) når betrakteren zoomer inn og ut. Alternativet <strong>Adjusted</strong> anbefales ved bruk av et verdensomspennende datasett.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Styrer lyskilden for skygge.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Traditional</strong> – Beregner terrengskygge fra en enkelt lysretning. Du kan angi alternativene <strong>Azimuth</strong> og <strong>Altitude</strong> for å kontrollere lyskildens plassering. Dette er standardalternativet.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Multidirectional</strong> – Kombinerer lys fra flere kilder for å gi en forbedret visualisering av terrenget.",
	"@@Shaded-Relief_PSPower_tag0@@": "<strong>Pikselstørrelsens kraft</strong> gjør rede for endringene i høyde (eller målestokk) når det zoomes inn og ut på kartvisningen. Det er eksponenten som brukes på pikselstørrelsen i ligningen, som styrer hvor raskt <strong>Z-faktoren</strong> endres for å unngå betydelig tap av relieff.",
	"@@Shaded-Relief_PSPower_tag1@@": "Denne parameteren er gyldig bare når <strong>Skaleringstype</strong> er <strong>Justert</strong>. Standardverdien er 0,664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "<strong>Pikselstørrelsefaktor</strong> gjør rede for endringer i målestokk når det zoomes inn og ut på kartvisningen. Den styrer hvor raskt <strong>Z-faktoren</strong> endres.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Denne parameteren er gyldig bare når <strong>Skaleringstype</strong> er <strong>Justert</strong>. Standardverdien er 0,024.",
	"@@Sin_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Sin_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Sin_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Sin_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Sin_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Sin_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Sin_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Sin_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Sin_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Sin_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Sin_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Sin_Raster_tag0@@": "Inndataen som verdiene for sinus skal beregnes for.",
	"@@SinH_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@SinH_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@SinH_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@SinH_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@SinH_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@SinH_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@SinH_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@SinH_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@SinH_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@SinH_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@SinH_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@SinH_Raster_tag0@@": "Inndataen som verdiene for hyperbolsk sinus skal beregnes for.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "Inndatarasteret som viser strømretningen ut av hver enkelt celle.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "Strømningsretningsrasteret kan opprettes ved hjelp av <strong>Flow Direction</strong>-funksjonen.",
	"@@Slope_DEM_tag0@@": "Høyderaster (inndata).",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Ved å bruke dette alternativet unngås eventuelle resamplingsartefakter som kan oppstå langs kantene på et raster. Utdatapikslene langs kanten på et raster eller ved siden av piksler uten en verdi, fylles med NoData. Det anbefales derfor at dette alternativet kun brukes når det finnes andre rastre med overlappende piksler. Når det finnes overlappende piksler, vil NoData-områder vise de overlappende pikselverdiene i stedet for tomme piksler.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Ikke avmerket – Bilineær resampling brukes enhetlig for å resample helningen. Dette er standardalternativet.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Avmerket – Bilineær resampling brukes i helningen, unntatt langs kantene på rastrene eller ved siden av NoData-piksler. Disse pikslene fylles med NoData siden det vil redusere effektene av eventuelle skarpe kanter som kan forekomme.",
	"@@Slope_Scaling_tag0@@": "Helningsvinkelen kan utleses enten som en verdi i grader eller som en stigning i prosent. Det finnes tre alternativer for <strong>Scaling</strong>:",
	"@@Slope_Scaling_tag3@@": "<strong>Degree</strong> – Helningsvinkelen beregnes i grader. Verdiene går fra 0 til 90.",
	"@@Slope_Scaling_tag5@@": "<strong>Percent_Rise</strong> – Helningsvinkelen bergenes som prosentverdier. Verdiene går fra 0 til uendelig. En plan flate har en stigning på 0 prosent, mens en 45-graders flate er en stigning på 100 prosent. Etterhvert som flaten blir mer loddrett, blir den prosentvise stigningen stadig større.",
	"@@Slope_Scaling_tag7@@": "<strong>Scaled</strong> – Helningsvinkelen beregnes på samme måte som DEGREE, men z-faktoren justeres for skalering. Bruker verdiene for <strong>Pixel Size Power</strong> og <strong>Pixel Size Factor</strong> som tar høyde for endringer i oppløsning (skalering) når betrakteren zoomer inn og ut. Dette anbefales ved bruk av verdensomspennende datasett, særlig når helning brukes som en overflate for visualisering.",
	"@@Slope_Scaling_tag13@@": "Z-faktoren justeres ved hjelp av følgende ligning:",
	"@@Slope_Scaling_tag14@@": "Justert z-faktor = (z-faktor) + (pikselstørrelse)",
	"@@Slope_Scaling_tag15@@": "× (pikselstørrelsesfaktor)",
	"@@Slope_Scaling_tag16@@": "Pikselstørrelseseffekt",
	"@@Slope_Z-Factor_tag0@@": "<strong>Z Factor</strong> er en skaleringsfaktor som brukes til å konvertere høydeverdiene til følgende to formål:",
	"@@Slope_Z-Factor_tag3@@": "Konvertere høydeenhetene (for eksempel meter eller fot) til de horisontale koordinatenhetene for datasettet, som kan være fot, meter eller grader.",
	"@@Slope_Z-Factor_tag4@@": "Legge til vertikal overdrivelse for å oppnå en visuell effekt",
	"@@Slope_PSPower_tag0@@": "<strong>Pikselstørrelsens kraft</strong> gjør rede for endringene i høyde (eller målestokk) når det zoomes inn og ut på kartvisningen. Det er eksponenten som brukes på pikselstørrelsen i ligningen, som styrer hvor raskt <strong>Z-faktoren</strong> endres for å unngå betydelig tap av relieff.",
	"@@Slope_PSPower_tag1@@": "Denne parameteren er gyldig bare når <strong>Skaleringstype</strong> er <strong>Skalert</strong>. Standardverdien er 0,664.",
	"@@Slope_PSZFactor_tag0@@": "<strong>Pikselstørrelsefaktor</strong> gjør rede for endringer i målestokk når det zoomes inn og ut på kartvisningen. Den styrer hvor raskt <strong>Z-faktoren</strong> endres.",
	"@@Slope_PSZFactor_tag1@@": "Denne parameteren er gyldig bare når <strong>Skaleringstype</strong> er <strong>Skalert</strong>. Standardverdien er 0,024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "Inndatarasterlaget for strømningsakkumulering.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "Dette kan opprettes med <strong>Flow Accumulation</strong>-funksjonen.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "Feltet som brukes til å tilordne verdier til utløpspunktlokasjoner.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "Inngående utløpspunktlokasjoner som skal festes.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "For et inndatarasterlag blir alle celler som ikke er NoData (dvs. celler med en verdi), regnet som utløpspunkter og festet.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "Den maksimale avstanden, i kartenheter, for søking etter en celle med høyere akkumulert strømning.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Angir middelverdien for additiv støy. En høyere middelverdi for støy vil gi mindre utjevning, mens en lavere verdi gir mer utjevning.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Denne parameteren er kun gyldig når <strong>Filter Type</strong> er <strong>Lee Filter</strong> og  <strong>Noise Model</strong> er <strong>Additive Noise</strong> eller <strong>Additive and Multiplicative Noise</strong>. Standardverdien er 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Angir omfanget av eksponentiell dempingseffekt på filtrering. En høyere dempingsverdi beholder kantene bedre, men jevner ut mindre, mens en mindre verdi gir mer utjevning. En verdi på 0 gir samme resultat som et lavpassfilter.",
	"@@Speckle_Damping-Factor_tag1@@": "Denne parameteren er kun gyldig når <strong>Filter Type</strong> er <strong>Enhanced Lee Filter</strong> eller <strong>Frost Filter</strong>. Standardverdien er 1.",
	"@@Speckle_Filter-Size_tag0@@": "Angi størrelsen på pikselvinduet som brukes til å filtrere støy:",
	"@@Speckle_Filter-Size_tag1@@": "3 x 3",
	"@@Speckle_Filter-Size_tag2@@": "5 x 5",
	"@@Speckle_Filter-Size_tag3@@": "7 x 7",
	"@@Speckle_Filter-Size_tag4@@": "9 x 9",
	"@@Speckle_Filter-Size_tag5@@": "11 x 11",
	"@@Speckle_Filter-Type_tag0@@": "Angir filtertypen som skal brukes i utjevningalgoritmen for å fjerne specklestøy:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Lee Filter</strong> – Reduserer specklestøy ved å bruke et romlig filter på hver piksel i et bilde, som filtrerer dataene basert på lokal statistikk beregnet innenfor et kvadratisk vindu. Dette filteret et nyttig når du vil jevne ut speckledata som har en additiv eller multiplikativ komponent. Dette er standardalternativet.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Enhanced Lee Filter</strong> – En tilpasset versjon av Lee-filteret som inkluderer <strong>Damping Factor</strong> og <strong>Number of Looks</strong>. Dette filteret er nyttig når du vil redusere specklestøy og samtidig beholde teksturinformasjon.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Frost Filter</strong> – Reduserer specklestøy i et eksponentielt dempet, sirkulært symmetrisk filter som bruker lokal statistikk innenfor individuelle filtervinduer. Dette filteret er nyttig når du vil redusere specklestøy og samtidig beholde kantene i radarbilder.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Kuan Filter</strong> – På samme måte som Lee-filteret bruker dette filteret et romlig filter på hver piksel i et bilde og filtrerer dataene basert på lokal statistikk beregnet innenfor et kvadratisk vindu. Dette filteret er nyttig når du vil redusere specklestøy og samtidig beholde kantene i radarbilder.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Angir middelverdien for multiplikativ støy. En høyere middelverdi for støy vil gi mindre utjevning, mens en lavere verdi gir mer utjevning.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Denne parameteren er kun gyldig når <strong>Filter Type</strong> er <strong>Lee Filter</strong> og  <strong>Noise Model</strong> er <strong>Additive Noise</strong> eller <strong>Additive and Multiplicative Noise</strong>. Standardverdien er 1.",
	"@@Speckle_Noise-Model_tag0@@": "Spesifiserer typen støy som reduserer kvaliteten på radarbildet:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Multiplicative Noise</strong> – Vilkårlig signalstøy som multipliseres inn i det relevante signalet under opptak eller overføring",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Additive Noise</strong> – Vilkårlig signalstøy som legges til det relevante signalet under opptak eller overføring",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Additive and Multiplicative Noise</strong> – Begge støymodeller",
	"@@Speckle_Noise-Variance_tag0@@": "Angir støyvariansen i radarbildet.",
	"@@Speckle_Noise-Variance_tag1@@": "Denne parameteren er kun gyldig når <strong>Filter Type</strong> er <strong>Lee Filter</strong> og  <strong>Noise Model</strong> er <strong>Additive Noise</strong> eller <strong>Additive and Multiplicative Noise</strong>. Standardverdien er 0,25.",
	"@@Speckle_Number-of-Looks_tag0@@": "Angi antallet utseender for bildet, som styrer bildeutjevning og estimerer støyvarians. En lavere verdi gir mer utjevning, mens en høyere verdi bevarer flere bildeobjekter.",
	"@@Speckle_Number-of-Looks_tag1@@": "Denne parameteren er kun gyldig når <strong>Filter Type</strong> er <strong>Lee Filter</strong> og <strong>Noise Model</strong> er <strong>Multiplicative Noise</strong> , eller når <strong>Filter Type</strong> er <strong>Kuan Filter</strong>. Standardverdien er 1.",
	"@@Speckle_Raster_tag0@@": "Inndatarasteret.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "Matrisen som brukes til å konvertere inndatarasteret.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "Ligningen som brukes til å utføre denne konverteringen er:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "utdatabånd_R = vekt_P * bånd_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "der:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Bånd_R er et utdatabånd, der R et et tall fra 1 til antallet utdatabånd.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Vekt_P er en kommadelt liste med vekter, én for hvert inndatabånd. Summen av vekter for hvert bånd må være lik 1.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "Bånd_C er inndatabildet, der C er et tall fra 1 til antallet bånd i inndatabildet.",
	"@@Spectral-Conversion_Raster_tag0@@": "Inndatarasteret.",
	"@@Spectral-Conversion_Raster_tag1@@": "Dette kan være et rasterdatasett, et mosaikkdatasett eller en bildetjeneste.",
	"@@Spectral-Conversion_Size_tag0@@": "Antall rader og kolonner i <strong>Conversion Matrix</strong>.",
	"@@Square_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Square_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Square_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Square_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Square_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Square_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Square_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Square_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Square_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Square_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Square_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Square_Raster_tag0@@": "Inndataverdiene som skal kvadreres.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Square-Root_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Square-Root_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Square-Root_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Square-Root_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Square-Root_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Square-Root_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Square-Root_Raster_tag0@@": "Inndataverdiene som skal brukes til å finne kvadratroten.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Angi statistikkverdiene for hvert bånd.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "${Histogram}-kolonnen er et skrivebeskyttet felt som kan fylles ved hjelp av <strong>Import</strong>-parameteren. Hvis du importerer en histogramfil, merkes ${Histogram}-kolonnen som <strong>Defined</strong>.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Importer statistikk- og histograminformasjon fra et eksisterende raster eller XML-fil.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "Inndatarasteret som krever at statistikk og histogram er angitt.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Angi statistikkverdiene for hvert bånd.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "Inndatarasteret som viser strømretningen ut av hver enkelt celle.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "Strømningsretningsrasteret kan opprettes ved hjelp av <strong>Flow Direction</strong>-funksjonen.",
	"@@Stream-Link_Stream-Raster_tag0@@": "Inndatarasteret som representerer et lineært elvenettverk.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "Inndatarasteret som viser strømretningen ut av hver enkelt celle.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "Strømningsretningsrasteret kan opprettes ved hjelp av <strong>Flow Direction</strong>-funksjonen.",
	"@@Stream-Order_Order-Method_tag0@@": "Metoden som brukes til å tilordne elveorden.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLER</strong> – Metoden for å opprette en elveorden som ble foreslått av Strahler i 1952. Elveorden øker kun når elver på samme nivå i den hierarkisk ordningen krysser hverandre. Hvis en førsteprioritets- og annenprioritetslenke krysser hverandre, forblir det en annenprioritetslenke fremfor at det opprettes en tredjeprioritetslenke. Dette er standardalternativet.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong>– Metoden for systematisering av elvenettverket basert på størrelse som ble foreslått av Shreve i 1967. Alle lenker uten sideelver tilordnes størrelsen (ordenen) én. Ordensnummeret øker nedover i elvenettverket. Når to segmenter krysser, blir størrelsene deres lagt sammen og tilordnet til nedstrømsegmentet.",
	"@@Stream-Order_Stream-Raster_tag0@@": "Et inndata-elveraster som representerer et lineært elvenettverk.",
	"@@Stretch_Auto-Gamma_tag0@@": "Bruk <strong>Auto Gamma</strong> til å beregne gamma fra datasettets statistikk og histogram. Statistikken kan være beregnet statistikk fra selve funksjonen, eller statistikken kan være beregnet av programvaren hvis du velger et lag.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Merk av for <strong>Dynamic Range Adjustment</strong> hvis du vil at statistikken kun skal beregnes fra de pikslene som vises på skjermen. Dette alternativet brukes vanligvis når bildet skal publiseres og brukes i en webapp som ikke kan utføre denne typen strekking.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Merk av for <strong>Estimate Statistics</strong> hvis du vil beregne statistikken. Statistikken beregnes på grunnlag av en 1000 gange 1000 sampling fra sentrum av rasteret og brukes av strekkingen.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Hvis dette alternativet er valgt og rasteret har statistikk, eller du har angitt verdier i tabellen <strong>Statistics</strong>, blir disse brukt i stedet for beregningen, med mindre strekkingen krever et histogram. Hvis strekkingen krever et histogram som ikke finnes, beregnes det.",
	"@@Stretch_Gamma_tag0@@": "Bruk glidebryteren til å angi <strong>Gamma</strong>-verdien.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Angi n-verdien for antall standardavvik som skal brukes. Denne metoden brukes til å fremheve hvor mye geoobjektverdier avviker fra gjennomsnittsverdien. Fungerer best på normalt fordelte data.",
	"@@Stretch_Output-Maximum_tag0@@": "Angi den høyeste pikselverdien for histogrammet.",
	"@@Stretch_Output-Maximum_tag1@@": "<strong>Output Minimum</strong> og <strong>Output Maximum</strong> angir verdiområdet som deretter skal kontraststrekkes lineært.",
	"@@Stretch_Output-Minimum_tag0@@": "Angi den laveste pikselverdien for histogrammet.",
	"@@Stretch_Output-Minimum_tag1@@": "<strong>Output Minimum</strong> og <strong>Output Maximum</strong> angir verdiområdet som deretter skal kontraststrekkes lineært.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Angi prosentandelen av de høye verdiene som skal utelates fra strekkingen.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "Gyldige verdier er fra 0 til 99.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Angi prosentandelen av de lave verdiene som skal utelates fra strekkingen.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "Gyldige verdier er fra 0 til 99.",
	"@@Stretch_Raster_tag0@@": "Inndatarasteret som skal kontraststrekkes.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "<strong>Strength Level</strong> bestemmer hvor mye av sigmoid-funksjonen som skal brukes i strekkingen. En lav verdi, for eksempel 1, bruker kun den midtre delen av kurven, noe som gjerne gir matte og svake farger. En høy verdi, for eksempel 6, bruker hele kurven, noe som gjerne gir sterke og skarpe farger.",
	"@@Stretch_Statistics_tag0@@": "Du kan angi egen statistikk i dialogboksen. Statistikk hentes som standard fra dataene. Verdiene du angir i denne parameteren, blir imidlertid brukt i stedet.",
	"@@Stretch_Type_tag0@@": "Velg strekktypen:",
	"@@Stretch_Type_tag1@@": "Ingen – ingen kontraststrekking",
	"@@Stretch_Type_tag2@@": "StdDev – strekking med standardavvik",
	"@@Stretch_Type_tag3@@": "MinMax – minimum-maksimum-strekking",
	"@@Stretch_Type_tag4@@": "PercentMinMax – strekking med prosentklipp",
	"@@Stretch_Type_tag5@@": "Sigmoid – sigmoid-strekking",
	"@@Stretch_Use-Gamma_tag0@@": "Merk av for <strong>Use Gamma</strong> hvis du vil bruke gammastrekk.",
	"@@Swath_Cellsize_tag0@@": "Cellestørrelsen for utdatarasteret registreres automatisk. Du kan imidlertid endre dette hvis du vil. Cellestørrelsen kan endres, men utstrekningen for rasterdatasettet forblir lik.",
	"@@Swath_Interpolation-Method_tag0@@": "Det finnes fire resamplingsmetoder for denne funksjonen:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Nearest Neighbor</strong> – Beregner pikselverdi ved hjelp av nærmeste piksel. Hvis det ikke finnes en kildepiksel, kan det ikke opprettes en ny piksel i utdataene.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Bilinear</strong> – Beregner pikselverdi ved hjelp av den avstandsvektede verdien av de fire nærmeste pikslene.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>Linear Tinning</strong> – Bruker et triangulært irregulært nettverk fra midtpunktet i hver celle i det irregulære rasteret til å interpolere en overflate som deretter konverteres til et regulært raster.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Natural Neighbor</strong> – Utfører en tildeling av nærmeste nabo, som er den raskeste interpoleringsmetoden. Den brukes primært med diskrete data, som arealbruksklassifisering, siden den ikke endrer verdiene for cellene. Maksimal romlig feil vil være halvdelen av cellestørrelsen.",
	"@@Swath_Raster_tag0@@": "Rasteret med irregulært rutenett som skal samples på nytt.",
	"@@Tan_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Tan_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Tan_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Tan_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Tan_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Tan_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Tan_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Tan_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Tan_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Tan_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Tan_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Tan_Raster_tag0@@": "Inndataen som verdiene for tangens skal beregnes for.",
	"@@TanH_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@TanH_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@TanH_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@TanH_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@TanH_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@TanH_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@TanH_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@TanH_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@TanH_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@TanH_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@TanH_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@TanH_Raster_tag0@@": "Inndataen som verdiene for hyperbolsk tangens skal beregnes for.",
	"@@Tasseled-Cap_Raster_tag0@@": "Inndatarasteret som Tasseled Cap-transformasjonen skal utføres på.",
	"@@Times_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Times_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Times_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Times_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Times_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Times_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Times_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Times_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Times_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Times_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Times_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Times_Raster_tag0@@": "Inndataen som inneholder verdiene som skal multipliseres.",
	"@@Times_Raster_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Times_Raster2_tag0@@": "Inndataen som inneholder verdiene som den første inndataen multipliseres med.",
	"@@Times_Raster2_tag1@@": "Det kan brukes en konstant verdi som inndata for denne parameteren, forutsatt at det er angitt et raster for den andre parameteren.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Velg den type transponering som skal utføres, eller angi en egendefinert type:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8 cirrius",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8 sky",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8 skyskygge",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8 designert fyll",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8 utelatt ramme",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8 snø/is",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8 terrengokklusjon",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8 vegetasjon",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8 vann",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Brukerdefinert",
	"@@Transpose-Bits_Constant-Value_tag0@@": "En valgfri verdi som skal brukes til å fylle ut alle biter som ikke er involvert i transponeringen. Denne parameteren vises når parameteren <strong>Generate Fill Raster from Constant</strong> er satt til <strong>Yes</strong>.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Angi et rasterdatasett som skal brukes til å fylle ut alle biter som ikke er involvert i transponeringen. Denne parameteren vises når parameteren <strong>Generate Fill Raster from Constant</strong> er satt til <strong>Nei</strong>.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Generer et fyllraster ved hjelp av en konstant verdi:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Yes</strong> – Det genereres et raster ved hjelp av en konstant verdi for å fylle ut bitene som ikke er involvert i transponeringen. Dette er standardalternativet.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>No</strong> – Det genereres et raster ved hjelp av pikselverdier fra et eksisterende rasterdatasett for å fylle bitene som ikke er involvert i transponeringen.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "En skrivebeskyttet tabell som viser utdatabitene og inndataene som settes inn på deres plass.",
	"@@Transpose-Bits_Raster_tag0@@": "Inndatarasteret som skal pakkes ut og tilordnes på nytt.",
	"@@Unit-Conversion_From-Unit_tag0@@": "Pikslenes opprinnelige enhetstype.",
	"@@Unit-Conversion_Raster_tag0@@": "Inndatarasteret som vil inneholde de konverterte enhetene.",
	"@@Unit-Conversion_To-Unit_tag0@@": "Pikslenes konverterte enhetstype.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Angir hvordan retningskomponenten ble målt.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Geografisk – 0° peker rett nord, og 90° peker rett øst",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Aritmetisk – 0° peker rett øst, og 90° peker rett nord",
	"@@Vector-Field_Input-Data-Type_tag0@@": "Typen vektorfelt inndataene representerer.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Ukjent – Det er ukjent om inndataene representerer U-V eller størrelse-retning.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V – Inndataene representerer U- og V-komponenter.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Størrelse-retning – Inndataene representerer størrelse og retning.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Angir typen vektorfelt utdataene skal representere.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Størrelse-retning – Utdataene representerer størrelse og retning.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V – Utdataene representerer U- og V-komponenter.",
	"@@Vector-Field_Raster1_tag0@@": "Det første inndatarasteret.",
	"@@Vector-Field_Raster1_tag1@@": "Dette er enten U-verdien eller størrelsen.",
	"@@Vector-Field_Raster2_tag0@@": "Det andre inndatarasteret.",
	"@@Vector-Field_Raster2_tag1@@": "Dette er enten V-verdien eller størrelsen.",
	"@@Viewshed_Analysis-Method_tag0@@": "Velg metoden som skal brukes til å beregne synlighet. Med dette alternativet kan du redusere nøyaktigheten for å oppnå høyere ytelse.",
	"@@Viewshed_Analysis-Method_tag1@@": "Alle siktelinjer – En siktlinje utføres på hver piksel i rasteret for å fastsette synlige områder. Dette er standardmetoden.",
	"@@Viewshed_Analysis-Method_tag2@@": "Siktlinjer i utkanten – Siktlinjer utføres kun på pikslene i utkanten av de synlige områdene for å kunne fastsette synlighetsområder. Denne metoden har bedre ytelse enn <strong>All Sightlines</strong>-metoden siden det er færre siktlinjer med i beregningen.",
	"@@Viewshed_Analysis-Type_tag0@@": "Velg hvilken type synlighetsanalyse du vil utføre. Du kan enten fastsette hvor synlig hver celle er for observatørene, eller identifisere hvilke observatører som er synlige for hver overflatelokasjon.",
	"@@Viewshed_Analysis-Type_tag1@@": "Frekvens – Antall ganger som hver piksellokasjon i det inngående overflaterasteret kan sees av de inngående observasjonslokasjonene (som punkter eller knekkpunkter for polylinjebaserte observasjonsgeoobjekter). Dette er standardalternativet.",
	"@@Viewshed_Analysis-Type_tag2@@": "Observatører – Utdataene identifiserer nøyaktig hvilke observasjonspunkter som er synlige fra hver rasteroverflate-posisjon. Med denne analysetypen kan det angis opptil 32 observatører.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Denne verdien definerer sluttvinkelen for det horisontale skanneområdet. Verdien må angis i grader fra 0 til 360,0, der 0 er orientert mot nord. Standardverdien er 360,0.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Det kan være et felt i inndatasettet <strong>Observer Features</strong> eller en numerisk verdi. Hvis denne parameteren er satt til en verdi, brukes denne verdien for alle observatører. Hvis du vil angi forskjellige verdier for hver observatør, angir du denne parameteren til et felt i <strong>Observer Features</strong>-datasettet.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Denne verdien definerer startvinkelen for det horisontale skanneområdet. Verdien må angis i grader fra 0 til 360,0, der 0 er orientert mot nord. Standardverdien er 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Det kan være et felt i inndatasettet <strong>Observer Features</strong> eller en numerisk verdi. Hvis denne parameteren er satt til en verdi, brukes denne verdien for alle observatører. Hvis du vil angi forskjellige verdier for hver observatør, angir du denne parameteren til et felt i <strong>Observer Features</strong>-datasettet.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "Avstandstype for parameteren for indre radius.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Ikke valgt – <strong>Inner Radius</strong> skal tolkes som en 2D-avstand. Dette er standardalternativet.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Valgt – <strong>Inner Radius</strong> skal tolkes som 3D-avstand.",
	"@@Viewshed_Inner-Radius_tag0@@": "Denne verdien definerer startavstanden (minimumsavstanden) som synlighet bestemmes fra. Piksler som er nærmere enn denne avstanden, regnes som usynlige i utdataene, men kan likevel blokkere synligheten for piksler mellom <strong>Inner Radius</strong> og <strong>Outer Radius</strong>. Standardverdien er 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "Det kan være et felt i inndatasettet <strong>Observer Features</strong> eller en numerisk verdi. Hvis denne parameteren er satt til en verdi, brukes denne verdien for alle observatører. Hvis du vil angi forskjellige verdier for hver observatør, angir du denne parameteren til et felt i <strong>Observer Features</strong>-datasettet.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Denne verdien brukes til å definere overflatehøyden for observasjonspunktene eller knekkpunktene.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Det kan være et felt i inndatasettet <strong>Observer Features</strong> eller en numerisk verdi. Hvis denne parameteren ikke er angitt, hentes observatørhøyden fra overflaterasteret ved hjelp av bilineær interpolasjon. Hvis denne parameteren er satt til en verdi, så brukes denne verdien for alle observatører. Hvis du vil angi forskjellige verdier for hver observatør, angir du denne parameteren til et felt i <strong>Observer Features</strong>-datasettet.",
	"@@Viewshed_Observer-Features_tag0@@": "Obligatorisk inndatageoobjektklasse som identifiserer observatørlokasjonene. Det kan være punkt-, multipunkt- eller polylinjegeoobjekter.",
	"@@Viewshed_Observer-Features_tag1@@": "Inndatageoobjektklassen gjøres om til et 3D geosentrisk koordinatsystem under synlighetsberegningen. Observatører som er utenfor overflaterasterets utstrekning eller er plassert i NoData-celler, ignoreres i beregningen.",
	"@@Viewshed_Observer-Offset_tag0@@": "Denne verdien angir en vertikal avstand (i overflateenheter) som skal legges til observatørhøyde. Det må være et positivt helttall eller flyttallsverdi.",
	"@@Viewshed_Observer-Offset_tag1@@": "Det kan være et felt i inndatasettet <strong>Observer Features</strong> eller en numerisk verdi. Hvis denne parameteren er satt til en verdi, brukes denne verdien for alle observatører. Hvis du vil angi forskjellige verdier for hver observatør, angir du denne parameteren til et felt i <strong>Observer Features</strong>-datasettet.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Avstandstype for parameteren for ytre radius.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Ikke valgt – <strong>Outer Radius</strong> skal tolkes som en 2D-avstand. Dette er standardalternativet.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Valgt – <strong>Outer Radius</strong> skal tolkes som en 3D-avstand.",
	"@@Viewshed_Outer-Radius_tag0@@": "Denne verdien definerer maksimumsavstanden som synlighet bestemmes fra. Piksler utenfor denne avstanden utelates fra analysen.",
	"@@Viewshed_Outer-Radius_tag1@@": "Det kan være et felt i inndatasettet <strong>Observer Features</strong> eller en numerisk verdi. Hvis denne parameteren er satt til en verdi, brukes denne verdien for alle observatører. Hvis du vil angi forskjellige verdier for hver observatør, angir du denne parameteren til et felt i <strong>Observer Features</strong>-datasettet.",
	"@@Viewshed_Raster_tag0@@": "Obligatorisk overflateraster (inndata). Det kan være et heltall eller et flyttallsraster.",
	"@@Viewshed_Raster_tag1@@": "Inndataen gjøres om til et 3D geosentrisk koordinatsystem under synlighetsberegningen. NoData-celler i inndatarasteret blokkerer ikke beregningen av synlighet.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Koeffisient for brytning av synlig lys i luften.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "Standardverdien er 0,13.",
	"@@Viewshed_Surface-Offset_tag0@@": "Denne verdien angir en vertikale avstand (i overflateenheter) som skal legges til z-verdien for hver målpiksel, da den skal vurderes med tanke på synlighet. Det må være et positivt helttall eller flyttallsverdi.",
	"@@Viewshed_Surface-Offset_tag1@@": "Det kan være et felt i inndatasettet <strong>Observer Features</strong> eller en numerisk verdi. Hvis denne parameteren er satt til en verdi, brukes denne verdien for alle observatører. Hvis du vil angi forskjellige verdier for hver observatør, angir du denne parameteren til et felt i <strong>Observer Features</strong>-datasettet.",
	"@@Viewshed_Vertical-Error_tag0@@": "Mengden usikkerhet, målt som RMSE (root mean square error), i verdiene for overflatehøyde. Det er en flyttallverdi som representerer den forventede feil i verdiene for inndatahøyde. Når denne parameteren er tildelt en verdi som er større enn 0, blir det resulterende synlighetsrasteret et flyttall. I dette tilfellet representerer hver pikselverdi i det resulterende synlighetsrasteret summen av sannsynlighetene for at cellen er synlig for noen av observatørene.",
	"@@Viewshed_Vertical-Error_tag1@@": "Når <strong>Analysis Type</strong> er <strong>Observers</strong> eller <strong>Analysis Method</strong> er <strong>Perimeter Sightlines</strong>, er denne parameteren deaktivert.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Denne verdien definerer den nedre grensen for den vertikale skanningen under horisontalt plan. Verdien må angis i grader fra -90,0 til 0, som kan være et heltall eller flyttall. Standardverdien er -90,0.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Det kan være et felt i inndatasettet <strong>Observer Features</strong> eller en numerisk verdi. Hvis denne parameteren er satt til en verdi, brukes denne verdien for alle observatører. Hvis du vil angi forskjellige verdier for hver observatør, angir du denne parameteren til et felt i <strong>Observer Features</strong>-datasettet.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Denne verdien definerer den øvre grensen for den vertikale skanningen over horisontalt plan. Verdien må angis i grader fra 0 til 90,0, som kan være et heltall eller flyttall. Standardverdien er 90,0.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Det kan være et felt i inndatasettet <strong>Observer Features</strong> eller en numerisk verdi. Hvis denne parameteren er satt til en verdi, brukes denne verdien for alle observatører. Hvis du vil angi forskjellige verdier for hver observatør, angir du denne parameteren til et felt i <strong>Observer Features</strong>-datasettet.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "Inndatarasteret som viser strømretningen ut av hver enkelt celle.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "Strømningsretningsrasteret kan opprettes ved hjelp av <strong>Flow Direction</strong>-funksjonen.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "Plasseringen av innløpspunktene.",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Dette rasteret representerer celler som tilførselsområdet eller nedbørsfeltet bestemmes over. Alle celler som ikke er NoData, brukes som kildeceller.",
	"@@Watershed_Pour-Point-Field_tag0@@": "Feltet som brukes til å tilordne verdier til utløpspunktlokasjoner.",
	"@@Watershed_Pour-Point-Field_tag1@@": "Til et rasterdatasett for utløpspunkt brukes ${Value} som standard.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Weighted-Overlay_Scales_tag0@@": "Intervallet for de nye verdiene som skal brukes til å beregne de gamle verdiene på nytt.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "Den vektede overleggstabellen består av fire deler:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Lag – Alle inndatarastrene må være av typen heltall.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Påvirkning – Hvert inndataraster vektes i henhold til dets betydning, eller påvirkning, som en relativ prosent. Summen av de prosentvise påvirkningsvektene må være lik 100, og hver vekt må angis med heltallsverdier.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Felt – Et heltalls- eller strengfelt i inndatarasteret som skal brukes til vekting.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Tabell for ny tilordning – Hver verdi i et inndataraster tilordnes en ny skalaverdi basert på tabellen for ny tilordning. Skalaverdien kan være en gyldig verdi eller en NoData-verdi.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "Tabellen for vektet sum defineres av tre egenskaper:",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Lag – Rasteret som vektes.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Felt – Feltet i rasteret som brukes til vekting.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Vekt – Vektverdien som rasteret skal multipliseres med. Det kan være en positiv eller negativ desimalverdi.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "Et enkeltbåndraster der pikselverdiene representerer omgivelsestemperatur.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "Måleenheten knyttet til temperaturrasteret som er inndata. Tilgjengelige inndataenheter er celsius, fahrenheit og kelvin.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "Måleenheten knyttet til utdatarasteret. Tilgjengelige utdataenheter er celsius, fahrenheit og kelvin.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "Et enkeltbåndraster der pikselverdiene representerer vindhastighet.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Definerer målenheten for vindhastighetsrasteret:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Miles i timen (mph)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Kilometer i timen (km/t)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Meter per sekund (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Fot per sekund (ft/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Knop (kn)",
	"@@Zonal-Remap_Background-Value_tag0@@": "Den innledende pikselverdien i utdatarasteret før inndatapikslene tilordnes på nytt.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "Verdien som blir tilordnet til en piksel som ikke oppfyller noen av betingelsene som er angitt i <strong>Zonal Attributes Table</strong>.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "Dette vil også være verdien for utdatapikselen hvis parameteren <strong>Output Value Field Name</strong> ikke angis eller hvis utdataverdien for tilsvarende soneterskel ikke angis i <strong>Zonal Attributes Table</strong>.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "Feltnavnet inneholder en maksimumsverdi og en inndatapiksel som er under denne, blir tilordnet på nytt.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Hvis dette ikke angis, eller hvis feltverdien er null, testes ikke pikselverdiene for maksimum.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "Feltnavnet inneholder en maksimumsverdi og en inndatapiksel som er over denne, blir tilordnet på nytt.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Hvis dette ikke angis, eller hvis feltverdien er null, testes ikke pikselverdiene for minimum.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "Feltnavnet inneholder målverdien og en inndatapiksel tilordnes på nytt til denne.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Hvis dette ikke angis, eller hvis feltverdien er null, blir de nytilordnede pikselverdier satt til <strong>Default Output Value</strong>.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "Et obligatorisk enkeltbåndrasterinndata som inneholder pikselverdier som skal tilordnes på nytt.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "En valgfri spørring som brukes på <strong>Zonal Attributes Table</strong>.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "Hvis du brukte tabellen ovenfor som et eksempel, blir spørringen ${Variable1 = 'bare earth' AND Variable2 = 'California'}.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "En obligatorisk inndatatabell som inneholder minst tre felt. Den må ha en minimum terskelverdi, maksimum terskelverdi og målverdi. Målverdien er feltet som vil inneholde den verdien som er tilordnet på nytt.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "Filformatet kan være en geoobjektklasse, geoobjekttjeneste eller en tabelltype som ArcGIS støtter.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "Feltnavnet i <strong>Zonal Attributes Table</strong> som inneholder sone-ID-verdier.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "Sone-ID-verdiene er direkte knyttet til sone-ID-ene i sonerasteret. De gir et annet filtreringsnivå når de brukes i forbindelse med ny tilordning. Hvis det ikke er en sone-ID knyttet til en bestemt oppføring i tabellen, blir den ikke med i ny tilordning.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "Et enkeltbåndraster der hver piksel definerer soner knyttet til en bestemt lokasjon. En sone er definert som alle områder i inndataene som har samme verdi. Områdene behøver ikke være sammenhengende.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Angir metoden som skal brukes til å levere dimensjonsverdier for prediksjon.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>By Value</strong> – Prediksjonen beregnes for en enkelt dimensjonsverdi. Hvis du f.eks. ønsker å forutsi årlig nedbør for årene 2050, 2100 og 2150. Dette er standardalternativet.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>By Interval</strong> – Prediksjonen beregnes for et intervall av den dimensjonen som er definert med en start- og en sluttverdi. Hvis du f.eks. ønsker å forutsi årlig nedbør for hvert år mellom 2050 og 2150.",
	"@@Predict-Using-Trend_end_tag0@@": "Sluttdatoen, høyden eller dybden for dimesjonsintervallet som skal brukes i prediksjonen.",
	"@@Predict-Using-Trend_end_tag1@@": "Denne parameteren er obligatorisk når <strong>Dimension Definition</strong>-parameteren er satt til <strong>By Interval</strong>.",
	"@@Predict-Using-Trend_raster_tag0@@": "Det flerdimensjonale inndata-trendrasteret fra funksjonen <strong>Generate Trend</strong>.",
	"@@Predict-Using-Trend_start_tag0@@": "Startdatoen, høyden eller dybden for dimesjonsintervallet som skal brukes i prediksjonen.",
	"@@Predict-Using-Trend_start_tag1@@": "Denne parameteren er obligatorisk når <strong>Dimension Definition</strong>-parameteren er satt til <strong>By Interval</strong>.",
	"@@Predict-Using-Trend_unit_tag0@@": "Enheten som blir brukt for verdi-intervallet. Denne parameteren gjelder kun når analysens dimensjon er en tidsdimensjon.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Hours</strong> – Prediksjonen beregnes for hver time i tidsområdet som er angitt av <strong>Start</strong>-, <strong>End</strong>- og <strong>Value Interval</strong>-parameterne.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Days</strong> – Prediksjonen beregnes for hver dag i tidsområdet som er angitt av <strong>Start</strong>-, <strong>End</strong>- og <strong>Value Interval</strong>-parameterne.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Weeks</strong> – Prediksjonen beregnes for hver uke i tidsområdet som er angitt av <strong>Start</strong>-, <strong>End</strong>- og <strong>Value Interval</strong>-parameterne.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Months</strong> – Prediksjonen beregnes for hver måned i tidsområdet som er angitt av <strong>Start</strong>-, <strong>End</strong>- og <strong>Value Interval</strong>-parameterne.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Years</strong> – Prediksjonen beregnes for hvert år i tidsområdet som er angitt av <strong>Start</strong>-, <strong>End</strong>- og <strong>Value Interval</strong>-parameterne.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "Antallet trinn mellom to dimensjonsverdier som skal inkluderes i prediksjonen. Standardverdien er 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Denne parameteren er obligatorisk når <strong>Dimension Definition</strong>-parameteren er satt til <strong>By Interval</strong>.",
	"@@Predict-Using-Trend_values_tag0@@": "Dimensjonsverdien(e) som skal brukes i prediksjonen",
	"@@Predict-Using-Trend_values_tag1@@": "Formatet for tids-, dybde- og høydeverdier må samsvare med formatet for dimensjonsverdiene som brukes til å generere trendrasteret. Hvis trendrasteret ble generert for StdTime-dimensjonen, skal formatet være YYYY-MM-DDTHH:MM:SS, for eksempel 2050-01-01T00:00:00. Flere verdier skilles med semikolon.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Angi rasterfunksjonsmalen som brukes til å aggregere flere inndelinger til færre inndelinger eller én inndeling.",
	"@@Process-Raster-Collection_dimension_tag0@@": "Dimensjonen for aggregering. Dette er dimensjonen som variablene blir aggregert langs.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Angi rasterfunksjonsmalen som brukes til å behandle hver inndeling eller hvert element i inndatarastersamlingen.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Angir nøkkelordintervallet som brukes ved aggregering langs dimensjonen. Denne parameteren er nødvendig når <strong>Type</strong> er satt til <strong>Interval Keyword</strong> og aggregeringen skal skje over tid.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>Hourly</strong> – Dataverdiene blir aggregert i trinn på en time, og resultatet omfatter hver enkelt time i tidsseriene.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Daily</strong> – Dataverdiene blir aggregert i trinn på en dag, og resultatet omfatter hver enkelt dag i tidsseriene.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Weekly</strong> – Dataverdiene blir aggregert i trinn på en uke, og resultatet omfatter hver enkelt uke i tidsseriene.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>Dekadly</strong> – Dataverdiene aggregeres i 3 perioder på 10 dager hver. Den siste perioden kan inneholde flere eller færre enn 10 dager. Utdataene inneholder 3 inndelinger for hver måned.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>Pentadly</strong> – Dataverdiene  aggregeres i 6 perioder på 5 dager hver. Den siste perioden kan inneholde flere eller færre enn 5 dager. Utdataene inneholder 6 inndelinger for hver måned.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Monthly</strong> – Dataverdiene blir aggregert i trinn på en måned, og resultatet omfatter hver enkelt måned i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Quarterly</strong> – Dataverdiene blir aggregert i trinn på et kvartal, og resultatet omfatter hvert enkelt kvartal i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Yearly</strong> – Dataverdiene blir aggregert i trinn på et år, og resultatet omfatter hvert enkelt år i tidsserien.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Recurring daily</strong> – Dataverdiene blir aggregert i trinn på en dag, og resultatet omfatter én aggregert verdi per juliansk dag. Utdataene inneholder høyst 366 daglige tidsinndelinger.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Recurring weekly</strong> – Dataverdiene blir aggregert i trinn på en uke, og resultatet omfatter én aggregert verdi per uke. Utdataene inneholder høyst 53 ukentlige tidsinndelinger.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Recurring monthly</strong> – Dataverdiene blir aggregert i trinn på en måned, og resultatet omfatter én aggregert verdi per måned. Utdataene inneholder høyst 12 månedlige tidsinndelinger.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Recurring quarterly</strong> – Dataverdiene blir aggregert i trinn på et kvartal, og resultatet omfatter én aggregert verdi per kvartal. Utdataene inneholder høyst 4 kvartalsvise tidsinndelinger.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "Maksimumsverdien for et område.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Denne parameteren er obligatorisk når <strong>Type</strong>-parameteren er satt til <strong>Interval Ranges</strong>.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "Minimumsverdien for et område.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Denne parameteren er obligatorisk når <strong>Type</strong>-parameteren er satt til <strong>Interval Ranges</strong>.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Angi rasterfunksjonsmalen som brukes til å vise det behandlede rasterlaget.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "Det flerdimensjonale inndatarasteret, mosaikklaget eller mosaikkdatasettet.",
	"@@Process-Raster-Collection_type_tag0@@": "Angir dimensjonsintervallet som dataene aggregeres for.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>All</strong> – Dataverdiene aggregeres på tvers av alle inndelinger. Dette er standardalternativet.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Interval Keyword</strong> – De variable dataene aggregeres ved hjelp av et allment kjent intervall.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Interval Ranges</strong> –  De variable dataene aggregeres mellom angitte verdi- eller dato-par.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Interval Values</strong> – De variable dataene aggregeres ved hjelp av brukerdefinert intervall og enhet.",
	"@@Process-Raster-Collection_unit_tag0@@": "Enheten som blir brukt som intervallverdi. Denne parameteren er obligatorisk når <strong>Dimension</strong> er et tidsfelt og <strong>Type</strong>-parameteren er satt til <strong>Interval Value</strong>.",
	"@@Process-Raster-Collection_unit_tag1@@": "Hvis du aggregerer over noe annet enn tid, er denne innstillingen ikke tilgjengelig, og enheten for intervallverdien tilsvarer den variable enheten i de flerdimensjonale rasterdataene som er inndata.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Hours</strong> – Dataverdiene blir aggregert i tidsinndelinger på en time ved det angitte intervallet.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Days</strong> – Dataverdiene blir aggregert i tidsinndelinger på en dag ved det angitte intervallet.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Weeks</strong> – Dataverdiene blir aggregert i tidsinndelinger på en uke ved det angitte intervallet.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Months</strong> – Dataverdiene blir aggregert i tidsinndelinger på en måned ved det angitte intervallet.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Years</strong> – Dataverdiene blir aggregert i tidsinndelinger på et år ved det angitte intervallet.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "Størrelsen på intervallet som brukes til aggregeringen. Denne parameteren er obligatorisk når <strong>Type</strong>-parameteren er satt til <strong>Interval Value</strong>.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "Hvis du for eksempel vil aggregere 30 år med månedlige temperaturdata i intervaller på 5 år, angir du 5 for <strong>Value Interval</strong> og velger <strong>Years</strong> for <strong>Unit</strong>.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Angir alternativene for å definere utdatapikselverdier.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Valgt – Det er ingen negative utdataverdier.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Ikke valgt – Det kan være negative verdier for brøkdeler av arealdekke.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "Inndatarasteret.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "Inndatafil for spektralprofil",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "Spektralinformasjon for ulike arealdekkeklasser.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Spektralprofil</strong> – En definisjonsfil for klassifisering (${.ecd}) generert av verktøyet <strong><strong>Train Maximum Likelihood Classifier</strong></strong> eller en JavaScript Object Notation-fil (${.json}) som inneholder klassespektralprofiler.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Opplæringsfunksjon</strong> – Polygongeoobjekter eller et opplæringseksempel for geoobjektklasse generert fra <strong>Training Samples Manager</strong>.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Angir alternativene for å definere utdatapikselverdier.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Valgt – Klasseverdiene for hver piksel oppgis i desimalformat med summen av alle klasser lik 1. Eksempel: Class1 = 0,16, Class2 = 0,24 og Class3 = 0,60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Ikke valgt – Summen av alle klassene i en piksel kan overstige 1.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "Inndatafil for opplæringsfunksjon.",
	"@@Aggregate_aggregationtechnique_tag0@@": "Metoden som brukes til aggregering. Verdiene i inndatacellene innenfor de grovere utdatacellene aggregeres med en av følgende statistikker:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Sum</strong> – Totalen for inndatacellene. Dette er standardalternativet.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Maximum</strong> – Den største verdien for inndatacellene.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Mean</strong> – Gjennomsnittsverdi for inndatacellene.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Median</strong> – Medianverdien for inndatacellene.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Minimum</strong> – Den miste verdien for inndatacellene.",
	"@@Aggregate_cellfactor_tag0@@": "Faktoren som cellestørrelsen for inndatarasteret skal multipliseres med.",
	"@@Aggregate_cellfactor_tag1@@": "For eksempel vil en cellefaktorverdi på tre resultere i en utdatacellestørrelse som er tre ganger større enn inndatarasteret.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Definerer hvordan inndatarasterets grenser håndteres når rasterets rader og kolonner ikke er et multippel av cellefaktoren.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Avmerket – Utvider øvre eller høyre grenser i inndatarasteret slik at det totale antallet celler i en rad eller kolonne er et multippel av cellefaktoren. Med dette alternativet kan utdatarasteret dekke en større romlig utstrekning enn inndatarasteret. Dette er standardalternativet.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Ikke valgt – Reduserer antallet rader eller kolonner i utdatarasteret. Dette avkorter de resterende cellene i inndatarasterets øvre og høyre grense, noe som gjør antallet rader eller kolonner i inndatarasteret til en multippel av cellefaktoren. Med dette alternativet kan utdatarasteret dekke en mindre romlig utstrekning enn inndatarasteret.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Angir om ${NoData}-verdier ignoreres av den aggregerte beregningen.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Valgt – Angir at hvis det finnes ${NoData}-verdier for en av cellene som faller innenfor den romlige utstrekningen for en større celle i utdatarasteret, ignoreres ${NoData}-verdiene ved fastsettelse av verdien for utdatacellelokasjonene. Bare inndataceller innenfor utstrekningen for utdatacellen som har dataverdier, brukes i fastsettelsen av verdien for utdatacellen. Dette er standardalternativet.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Ikke valgt – Angir at hvis en celle som faller innenfor den romlige utstrekningen for en større celle i utdatarasteret, har en verdi på ${NoData}, blir verdien for denne utdatacellelokasjonen ${NoData}. Når dette alternativet brukes, forutsettes det at når celler innenfor en aggregering inneholder verdien ${NoData}, er det ikke tilstrekkelig informasjon til å utføre de angitte beregningene som er nødvendige for å bestemme en utdataverdi.",
	"@@Aggregate_raster_tag0@@": "Inndatarasteret som skal aggregeres.",
	"@@Expand_numberofcells_tag0@@": "Antall celler det skal utvides med.",
	"@@Expand_numberofcells_tag1@@": "Verdien må være et heltall og kan være 1 eller større.",
	"@@Expand_raster_tag0@@": "Inndatarasteret som de identifiserte sonene skal utvides for.",
	"@@Expand_raster_tag1@@": "Det må være av heltallstype.",
	"@@Expand_zonevalues_tag0@@": "Listen over soner som skal utvides.",
	"@@Expand_zonevalues_tag1@@": "Soneverdiene må være heltall, og de kan være i en hvilken som helst rekkefølge.",
	"@@Expand_zonevalues_tag2@@": "Hvis du vil angi flere soner, bruker du et mellomrom til å skille soneverdiene.",
	"@@Multidimensional-Filter_dimension_tag0@@": "Dimensjonen det skal trekkes ut variabler fra.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Angir metoden som skal brukes til inndeling av dimensjonen.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>All</strong> – Hele intervallet for hver dimensjon brukes. Dette er standardalternativet.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>By Values</strong> – Dimensjonen deles ved hjelp av en dimensjonsverdi eller liste med verdier.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>By Ranges</strong> – Dimensjonen deles ved hjelp av et område eller en liste med områder.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>By Iteration</strong> – Dimensjonen deles over en spesifisert intervallstørrelse.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "Slutten på det første intervallet. Dette intervallet brukes til gjentakelse i datasettet. Denne parameteren er obligatorisk når parameteren <strong>Dimension Definition</strong>er satt til <strong>By Iteration</strong>.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "Maksimumsverdien for området. Denne parameteren er obligatorisk når parameteren <strong>Dimension Definition</strong> er satt til <strong>By Ranges</strong>.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "Minimumsverdien for området. Denne parameteren er obligatorisk når parameteren <strong>Dimension Definition</strong> er satt til <strong>By Ranges</strong>.",
	"@@Multidimensional-Filter_raster_tag0@@": "Det flerdimensjonale inndatarasteret.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>Intervallområder som er angitt i en tabell, brukes til å aggregere grupper av verdier. Minimums- og maksimumsverdiene angir området som skal inkluderes.</p><p>Denne parameteren er obligatorisk når<strong>Type</strong>-parameteren er satt til<strong>Intervallområder</strong>.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "Starten på det første intervallet. Dette intervallet brukes til gjentakelse i datasettet. Denne parameteren er obligatorisk når parameteren <strong>Dimension Definition</strong>er satt til <strong>By Iteration</strong>.",
	"@@Multidimensional-Filter_step_tag0@@": "Frekvensen for inndeling av data. Denne parameteren er obligatorisk når parameteren <strong>Dimension Definition</strong> er satt til <strong>By Iteration</strong>. Standardverdien er 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Angir gjentakelsesenheten. Denne parameteren er obligatorisk når parameteren <strong>Dimension Definition</strong> er satt til <strong>By Iteration</strong> og <strong>Dimension</strong>-parameteren er satt til <strong>StdTime</strong>.",
	"@@Multidimensional-Filter_value_tag0@@": "Verdien for den angitte dimensjonen. Denne parameteren er obligatorisk når parameteren <strong>Dimension Definition</strong> er satt til <strong>By Values</strong>.",
	"@@Multidimensional-Filter_variables_tag0@@": "Variablene som inkluderes i det flerdimensjonale utdatarasteret. Hvis det ikke er angitt en variabel, brukes den første variabelen.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Angi om lages skal ha dimensjonsverdier. Dette alternativet er bare tilgjengelig når det er valgt en enkelt inndeling for å opprette et lag.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Valgt – Laget har ikke dimensjonsverdier.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Ikke valgt – Laget har en dimensjonsverdi. Dette er standardalternativet.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "Cellestørrelsen for det interpolerte rasteret. Standardverdien er ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "Resamplingsmetoden som brukes til å interpolere uregelmessige data.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>Nearest Neighbor</strong> – Beregner utdatapikselverdien ved hjelp av nærmeste inndatapiksel. Hvis det ikke finnes en kildepiksel, kan det ikke opprettes en ny piksel i utdataene. Dette er standardalternativet.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>Linear Tinning</strong> – Bruker et triangulært irregulært nettverk fra midtpunktet i hver piksel i det irregulære rasteret til å interpolere en overflate som deretter konverteres til et regulært raster.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Natural Neighbor</strong> – Finner nærmeste delsett med inndataeksempler til et spørringspunkt og bruker vekter på dem basert på forholdsmessige områder for å interpolere en verdi.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Inverse Distance Weighting</strong> – Bestemmer pikselverdier ved hjelp av en lineært vektet kombinasjon av et sett med eksempelpunkter eller -piksler. Vekten er en funksjon av den inverse av avstanden fra de kjente punktene eller pikslene.",
	"@@Multidimensional-Raster_raster_tag0@@": "Det flerdimensjonale inndatarasteret.",
	"@@Multidimensional-Raster_variables_tag0@@": "Variabelen eller variablene som skal inkluderes i det flerdimensjonale rasterlaget.",
	"@@Random_distribution_tag0@@": "Angi metoden for fordeling av tilfeldige tall som skal brukes.",
	"@@Random_distribution_tag1@@": "<strong>Uniform</strong> (minimum, maksimum) – En uniform fordeling med et definert område. Standardverdiene er 0 for minimum og 1 for maksimum. Dette er standardalternativet.",
	"@@Random_distribution_tag2@@": "<strong>Integer</strong> (minimum, maksimum) – En heltallsfordeling med et definert område. Standardverdiene er 1 for minimum og 10 for maksimum.",
	"@@Random_distribution_tag3@@": "<strong>Normal</strong> (middelavvik, standardavvik) – En normalfordeling med et definert gjennomsnitt og standardavvik. Standardverdiene er 0 for gjennomsnitt og 1 for standardavvik.",
	"@@Random_distribution_tag4@@": "<strong>Exponential</strong> (gjennomsnitt) – En eksponentialfordeling med definert gjennomsnitt. Standardverdien er 1.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (gjennomsnitt) – En Poisson-fordeling med et definert gjennomsnitt. Standardverdien er 1.",
	"@@Random_distribution_tag6@@": "<strong>Gamma</strong> (alfa, beta) – En gammafordeling med definert alfa og beta. Standardverdiene er 1 for alfa og 1 for beta.",
	"@@Random_distribution_tag7@@": "<strong>Binomial</strong> (N, sannsynlighet) – En binomialfordeling med definert N og sannsynlighet. Standardverdiene er 10 for N og 0,5 for sannsynlighet.",
	"@@Random_distribution_tag8@@": "<strong>Geometric</strong> (sannsynlighet) – En geometrisk fordeling med en definert sannsynlighet. Standardverdien er 0,5.",
	"@@Random_distribution_tag9@@": "<strong>Negative Binomial</strong> (r, sannsynlighet) – En Pascal fordeling med definert r og sannsynlighet. Standardverdiene er 10,0 for r og 0,5 for sannsynlighet.",
	"@@Random_randomnumbergenerator_tag0@@": "Spesifiser algoritmen for generering av tilfeldige tall som bruker utgangsverdi og fordeling til å produsere en sekvens av tilfeldige tall. Følgende alternativer er tilgjengelige:",
	"@@Random_randomnumbergenerator_tag1@@": "Standard C Rand",
	"@@Random_randomnumbergenerator_tag2@@": "ACM-innsamlet algoritme 599",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "Standardverdien er Mersenne Twister.",
	"@@Random_rasterinfo_tag0@@": "Bruk knappen <strong>Load template raster</strong> til å laste en mal fra en katalog eller portal.",
	"@@Random_seed_tag0@@": "Utgangsverdien er en heltallsverdi og brukes til å starte generatoren for tilfeldige tall. Standardverdien er 1.",
	"@@Shrink_numberofcells_tag0@@": "Antallet celler som hver spesifisert sone skal forminskes med.",
	"@@Shrink_numberofcells_tag1@@": "Verdien må være et heltall og kan være 1 eller større.",
	"@@Shrink_raster_tag0@@": "Inndatarasteret som de identifiserte sonene skal forminskes for.",
	"@@Shrink_raster_tag1@@": "Det må være av heltallstype.",
	"@@Shrink_zonevalues_tag0@@": "Listen over soner som skal forminskes.",
	"@@Shrink_zonevalues_tag1@@": "Soneverdiene må være heltall, og de kan være i en hvilken som helst rekkefølge.",
	"@@Shrink_zonevalues_tag2@@": "Hvis du vil angi flere soner, bruker du et mellomrom til å skille soneverdiene.",
	"@@Distance-Accumulation_costraster_tag0@@": "Et raster som definerer kostnad eller impedans ved planimetrisk bevegelse gjennom hver celle. Verdien ved hver celleplassering representerer kostnad-per-enhet-avstanden for bevegelse gjennom cellen. Hver celleplasseringsverdi multipliseres med celleoppløsningen og kompenserer også for diagonal bevegelse for å finne de totale kostnadene ved å passere gjennom cellen.",
	"@@Distance-Accumulation_costraster_tag1@@": "Verdiene for <strong>Cost Raster</strong> kan være heltall eller flyttall, men de kan ikke være negative tall eller null.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Bestemmer om avstanden skal beregnes ved hjelp av en planmetode (flat jord) eller geodetisk metode (ellipsoide).",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Plan – planmålinger bruker 2D kartesisk matematikk til å beregne lengde og areal. Alternativet er kun tilgjengelig når det måles i et projisert koordinatsystem og 2D-planet for det koordinatsystemet brukes som basis for målingene.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Geodetisk – Den korteste linjen mellom to punkt på jordoverflaten på en sfæroide (ellipsoide). Det betyr at resultatene ikke endrer seg, uansett inndata- og utdataprojeksjon.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Merk:</strong> En geodetisk linje kan for eksempel brukes når du vil bestemme den korteste avstanden mellom to byer for en flyrute. Dette er også kjent som en storsirkellinje hvis den er basert på en sfære i stedet for en ellipsoide.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Bestemmer om det bare opprettes et akkumuleringsraster for avstand eller et flerbåndsraster som består av både akkumuleringsrasteret for avstand og tilbakeretningsrasteret.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Ikke valgt – Resultatet er rasteret for avstandsakkumulering. Dette er et enkeltbåndresultat. Dette er standardalternativet.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Valgt – Det opprettes et flerbåndsresultat. Det første båndet er rasteret for avstandsakkumulering og det andre båndet er tilbakeretningsrasteret.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "Tilbakeretningsrasteret beregner retningen i grader for hver celle til  nabocellen langs den korteste veien tilbake til nærmeste kilde og unngår sperringer.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Definerer forholdet mellom den vannrette kostnadsfaktoren og den horisontale relative bevegelsesvinkelen (horizontal relative moving angle, HRMA).</p><p>Det er flere faktorer med modifikatorer som identifiserer en definert vertikal faktorgraf. I tillegg kan du bruke en tabell til å opprette en egendefinert graf. Grafene brukes til å identifisere den vertikale faktoren som brukes til å beregne den totale kostnaden ved å flytte inn i en nabocelle.</p><p>I forklaringene nedenfor brukes to akronymer: HF og HRMA. HF står for horisontal faktor som definerer horisontale problemer som forekommer når man beveger seg fra en celle til den neste. HRMA står for horisontal relativ bevegelig vinkel, som identifiserer vinkelen mellom horisontal retning fra en celle og bevegelig retning.</p><p><strong>Horisontale faktor</strong>-typer inkluderer følgende:</p><ul><li><strong>Binær</strong>--indikerer at hvis HRA er mindre enn kuttevinkelen, settes HF til verdien knyttet til nullfaktoren; ellers er det uendelig. </li><li><strong>Forward</strong>--Fastslår at kun bevegelse forover er tillatt. HRMA må være større enn eller lik 0 og mindre enn 90 grader (0&lt;= HRMA < 90). Hvis HRMA er større enn 0 og mindre enn 45 grader, settes HF for cellen til verdien som er knyttet til nullfaktoren. Hvis HRMA er større enn eller lik 45 grader, brukes modifikatorverdien for sideverdien. HF for enhver HRMA-verdi lik eller større enn 90 grader er satt til uendelig.</li><li><strong>Linear</strong>--Spesifiserer at HF er en lineær funksjon av HRMA.</li><li><strong>Inverse Linear</strong>--Spesifiserer at HF er en invers lineær funksjon av HRMA.</li><li><strong>Table</strong>--Identifiserer at en tabellfil vil bli brukt til å definere den horisontale faktorgrafen som brukes til å bestemme HF-ene </li></ul><p>Modifikatorer til de horisontale faktorene inkluderer følgende :</p><ul><li><strong>Null-faktor</strong>--Den horisontale faktoren som skal brukes når HRMA er null. Denne faktoren plasserer y-skjæringspunktet for en hvilken som helst av de horisontale faktorfunksjonene.</li><li><strong>Skjæringsvinkel</strong>--Definerer HRMA-vinkelen som HF-en vil bli satt til uendelig utenfor.</li><li><strong>Helning</strong>--Etablerer helningen til den rette linjen som brukes med horisontalfaktor-søkeordene<strong>Lineær</strong>og<strong>Invers lineær</strong>. Helningen er spesifisert som en brøkdel av stigning over løp (for eksempel er 45 prosent helning 1/45, som angis som 0,02222).</li><li><strong>Sideverdi</strong>--Etablerer HF når HRMA er større enn eller lik 45 grader og mindre enn 90 grader når<strong>Fremover</strong>horisontalfaktor søkeord spesifiseres.</li><li><strong>Tabellnavn</strong>--Identifiserer navnet på tabellen som definerer HF.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "Et raster som definerer den horisontale retningen i hver celle.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "Verdiene i rasteret må være heltall fra 0 til 360, der 0 grader er nord, eller mot toppen av skjermen og stigende med klokken. Flate områder skal ha verdien -1. Verdiene for hver lokasjon brukes i forbindelse med <strong>Horizontal factor</strong> til å fastsette den horisontale kostnaden ved å bevege seg fra en celle til naboceller.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "Den opprinnelige akkumulerte kostnaden for å starte kostnadsberegningen. Med denne parameteren kan du spesifisere den faste kostnaden knyttet til en kilde. I stedet for å begynne med et kostnad på 0, begynner algoritmen med den verdien som er angitt.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "Verdien må være null eller større. Standardverdien er 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Definerer den høyeste akkumulerte kostnaden for den reisende for en kilde. Kostnadsberegningene fortsetter for hver kilde til den angitte kapasiteten er nådd.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "En multiplikator som skal brukes på kostnadsverdiene.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Denne parameteren gjør det mulig å styre reisemåten eller størrelsen ved en kilde. Jo større multiplikator, jo større er kostnaden ved å bevege seg gjennom hver celle.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "Verdiene må være større enn null. Standardverdien er 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "Rasteret som definerer hindringene.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "Datasettet må inneholde NoData der det ikke finnes hindringer. Hindringer representeres av gyldige verdier, inkludert null.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "Hindringene kan defineres av et heltall eller et flyttallsraster.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "Kildelokasjonene som er inndata.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Dette er et rasterdatasett som identifiserer cellene eller lokasjonene som laveste akkumulerte kostnadsavstand fra hver utdatacellelokasjon beregnes fra.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Det kan være et heltall eller flyttall.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "Et raster som definerer høydeverdiene for hver cellelokasjon.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "Verdiene brukes til å beregne den faktiske overflatedistansen som tilbakelegges når man beveger seg mellom cellene.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Definerer retningen for den reisende når det brukes en vertikal faktor, horisontal faktor og kildens motstandsgrad.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>From Source</strong> – Den vertikale faktoren, horisontale faktoren og kildens motstandsgrad brukes fra inndatakilden og ut i ikke-kildecellene. Dette er standardalternativet.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>To Source</strong> – Den vertikale faktoren, horisontale faktoren og kildens motstandsgrad brukes fra hver ikke-kildecelle og tilbake til inndatakilden.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Angi <strong>From Source</strong>- eller <strong>To Source</strong> -nøkkelordet som blir brukt på alle kilder, eller angi et felt i <strong>Source Raster</strong> som inneholder nøkkelordene for å identifisere reiseretning for hver kilde.. Feltet må inneholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Definerer forholdet mellom den vannrette kostnadsfaktoren og den horisontale relative bevegelsesvinkelen (VRMA).</p><p>Det er flere faktorer med modifikatorer som identifiserer en definert vertikal faktorgraf. I tillegg kan du bruke en tabell til å opprette en egendefinert graf. Grafene brukes til å identifisere den vertikale faktoren som brukes til å beregne den totale kostnaden ved å flytte inn i en nabocelle.</p><p>I forklaringene nedenfor brukes to akronymer: VF og VRMA. VF står for vertikal faktor som definerer vertikale problemer som forekommer når man beveger seg fra en celle til den neste. VRMA står for vertikal relativ bevegelig vinkel, som identifiserer helningsvinkelen mellom FROM- eller prosesseringscellen og TIL-cellen.</p><p><strong> Vertikalfaktortyper</strong>inkluderer følgende:</p><ul><li><strong>Binær</strong>--Spesifiserer at hvis VRMA er større enn den lave skjæringsvinkelen og mindre enn den høye skjæringsvinkelen, settes VF til verdien knyttet til nullfaktoren; ellers er det uendelig.</li><li><strong>Lineær</strong>--Indikerer at VF er en lineær funksjon av VRMA.</li><li><strong>Symmetrisk lineær </strong>--Spesifiserer at VF er en lineær funksjon av VRMA i henholdsvis den negative eller positive siden av VRMA, og de to lineære funksjonene er symmetriske i forhold til VF (y) aksen.</li><li><strong>Invers lineær</strong>--Indikerer at VF er en invers lineær funksjon av VRMA.</li><li><strong>Symmetrisk invers lineær</strong>--Spesifiserer at VF er en invers lineær funksjon av VRMA i henholdsvis den negative eller positive siden av VRMA, og de to lineære funksjonene er symmetriske med hensyn til VF (y)-aksen.</li><li><strong>Cos</strong>--Identifiserer VF som den cosinusbaserte funksjonen til VRMA.</li><li><strong>Sec</strong>--Identifiserer VF som den sekantbaserte funksjonen til VRMA.</li><li><strong>Cos-Sec</strong>--Spesifiserer at VF er den cosinusbaserte funksjonen til VRMA når VRMA er negativ og den sekantbaserte funksjonen til VRMA når VRMA ikke er negativ.</li><li><strong>Sec-Cos</strong>--Spesifiserer at VF er den sekantbaserte funksjonen til VRMA når VRMA er negativ og den cosinusbaserte funksjonen til VRMA når VRMA ikke er negativ.</li><li><strong>Tabell</strong>--Identifiserer at en tabellfil vil bli brukt til å definere vertikalfaktorgrafen som brukes til å bestemme VF-ene.</li></ul><p>Modifikatorer for vertikale søkeord inkluderer følgende:</p><ul><li><strong>Zero factor</strong>--Etablerer den vertikale faktoren som brukes når VRMA er null. Denne faktoren plasserer y-skjæringspunktet for den angitte funksjonen. Nullfaktor kan per definisjon ikke brukes på trigonometriske vertikale funksjoner (COS, SEC, COS-SEC eller SEC-COS). Y-skjæringspunktet er definert av disse funksjonene.</li><li><strong>Lav skjæringsvinkel</strong>--Definerer VRMA-vinkelen som VF vil bli satt til uendelig under.</li><li><strong>Høy skjæringsvinkel</strong>--Definerer VRMA-vinkelen over som VF vil settes til uendelig.</li><li><strong>Helning</strong>--Etablerer helningen til den rette linjen som brukes med <strong>Lineær</strong>og<strong>invers lineær</strong>vertikalfaktor nøkkelord. Helningen er spesifisert som en brøkdel av stigning over løp (for eksempel er 45 prosent helning 1/45, som angis som 0,02222).</li><li><strong>Tabellnavn</strong>--Identifiserer navnet på tabellen som definerer VF.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Definerer forholdet mellom den loddrette kostnadsfaktoren og den loddrette relative bevegelsesvinkelen (vertical relative moving angle, VRMA).",
	"@@Distance-Accumulation_verticalraster_tag1@@": "Verdiene brukes til å beregne helningen som brukes til å identifisere den vertikale faktoren ved å bevege seg fra en celle til en annen.",
	"@@Distance-Allocation_costraster_tag0@@": "Et raster som definerer kostnad eller impedans ved planimetrisk bevegelse gjennom hver celle. Verdien ved hver celleplassering representerer kostnad-per-enhet-avstanden for bevegelse gjennom cellen. Hver celleplasseringsverdi multipliseres med celleoppløsningen og kompenserer også for diagonal bevegelse for å finne de totale kostnadene ved å passere gjennom cellen.",
	"@@Distance-Allocation_costraster_tag1@@": "Verdiene for <strong>Cost Raster</strong> kan være heltall eller flyttall, men de kan ikke være negative tall eller null.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Bestemmer om avstanden skal beregnes ved hjelp av en planmetode (flat jord) eller geodetisk metode (ellipsoide).",
	"@@Distance-Allocation_distancemethod_tag1@@": "Plan – planmålinger bruker 2D kartesisk matematikk til å beregne lengde og areal. Alternativet er kun tilgjengelig når det måles i et projisert koordinatsystem og 2D-planet for det koordinatsystemet brukes som basis for målingene.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Geodetisk – Den korteste linjen mellom to punkt på jordoverflaten på en sfæroide (ellipsoide). Det betyr at resultatene ikke endrer seg, uansett inndata- og utdataprojeksjon.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Merk:</strong> En geodetisk linje kan for eksempel brukes når du vil bestemme den korteste avstanden mellom to byer for en flyrute. Dette er også kjent som en storsirkellinje hvis den er basert på en sfære i stedet for en ellipsoide.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Definerer forholdet mellom den vannrette kostnadsfaktoren og den horisontale relative bevegelsesvinkelen (horizontal relative moving angle, HRMA).</p><p>Det er flere faktorer med modifikatorer som identifiserer en definert vertikal faktorgraf. I tillegg kan du bruke en tabell til å opprette en egendefinert graf. Grafene brukes til å identifisere den vertikale faktoren som brukes til å beregne den totale kostnaden ved å flytte inn i en nabocelle.</p><p>I forklaringene nedenfor brukes to akronymer: HF og HRMA. HF står for horisontal faktor som definerer horisontale problemer som forekommer når man beveger seg fra en celle til den neste. HRMA står for horisontal relativ bevegelig vinkel, som identifiserer vinkelen mellom horisontal retning fra en celle og bevegelig retning.</p><p><strong>Horisontale faktor</strong>-typer inkluderer følgende:</p><ul><li><strong>Binær</strong>--indikerer at hvis HRA er mindre enn kuttevinkelen, settes HF til verdien knyttet til nullfaktoren; ellers er det uendelig. </li><li><strong>Forward</strong>--Fastslår at kun bevegelse forover er tillatt. HRMA må være større enn eller lik 0 og mindre enn 90 grader (0&lt;= HRMA < 90). Hvis HRMA er større enn 0 og mindre enn 45 grader, settes HF for cellen til verdien som er knyttet til nullfaktoren. Hvis HRMA er større enn eller lik 45 grader, brukes modifikatorverdien for sideverdien. HF for enhver HRMA-verdi lik eller større enn 90 grader er satt til uendelig.</li><li><strong>Linear</strong>--Spesifiserer at HF er en lineær funksjon av HRMA.</li><li><strong>Inverse Linear</strong>--Spesifiserer at HF er en invers lineær funksjon av HRMA.</li><li><strong>Table</strong>--Identifiserer at en tabellfil vil bli brukt til å definere den horisontale faktorgrafen som brukes til å bestemme HF-ene </li></ul><p>Modifikatorer til de horisontale faktorene inkluderer følgende :</p><ul><li><strong>Null-faktor</strong>--Den horisontale faktoren som skal brukes når HRMA er null. Denne faktoren plasserer y-skjæringspunktet for en hvilken som helst av de horisontale faktorfunksjonene.</li><li><strong>Skjæringsvinkel</strong>--Definerer HRMA-vinkelen som HF-en vil bli satt til uendelig utenfor.</li><li><strong>Helning</strong>--Etablerer helningen til den rette linjen som brukes med horisontalfaktor-søkeordene<strong>Lineær</strong>og<strong>Invers lineær</strong>. Helningen er spesifisert som en brøkdel av stigning over løp (for eksempel er 45 prosent helning 1/45, som angis som 0,02222).</li><li><strong>Sideverdi</strong>--Etablerer HF når HRMA er større enn eller lik 45 grader og mindre enn 90 grader når<strong>Fremover</strong>horisontalfaktor søkeord spesifiseres.</li><li><strong>Tabellnavn</strong>--Identifiserer navnet på tabellen som definerer HF.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "Et raster som definerer den horisontale retningen i hver celle.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "Verdiene i rasteret må være heltall fra 0 til 360, der 0 grader er nord, eller mot toppen av skjermen og stigende med klokken. Flate områder skal ha verdien -1. Verdiene for hver lokasjon brukes i forbindelse med <strong>Horizontal factor</strong> til å fastsette den horisontale kostnaden ved å bevege seg fra en celle til naboceller.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "Den opprinnelige akkumulerte kostnaden for å starte kostnadsberegningen. Med denne parameteren kan du spesifisere den faste kostnaden knyttet til en kilde. I stedet for å begynne med et kostnad på 0, begynner algoritmen med den verdien som er angitt.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "Verdien må være null eller større. Standardverdien er 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Definerer den høyeste akkumulerte kostnaden for den reisende for en kilde. Kostnadsberegningene fortsetter for hver kilde til den angitte kapasiteten er nådd.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "Verdien må være større enn null. Standardkapasiteten er til kanten av utdatarasteret.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "En multiplikator som skal brukes på kostnadsverdiene.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Denne parameteren gjør det mulig å styre reisemåten eller størrelsen ved en kilde. Jo større multiplikator, jo større er kostnaden ved å bevege seg gjennom hver celle.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "Verdiene må være større enn null. Standardverdien er 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "En numerisk (dobbel) verdi eller et felt fra <strong>Source Raster</strong> kan brukes til denne parameteren.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "Rasteret som definerer hindringene.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "Datasettet må inneholde NoData der det ikke finnes hindringer. Hindringer representeres av gyldige verdier, inkludert null.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "Hindringene kan defineres av et heltall eller et flyttallsraster.",
	"@@Distance-Allocation_sourcefield_tag0@@": "Feltet som brukes til å tilordne verdier til kildelokasjonene. Det må være en heltallstype.",
	"@@Distance-Allocation_sourceraster_tag0@@": "Kildelokasjonene som er inndata.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Dette er et rasterdatasett som identifiserer cellene eller lokasjonene som laveste akkumulerte kostnadsavstand fra hver utdatacellelokasjon beregnes fra.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Bestemmer om det kun er tildelingsrasteret som opprettes eller om det opprettes et flerbåndsresultat.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Ikke valgt – Resultatet er avstandstildelingsrasteret. Dette er et enkeltbåndresultat. Dette er standardalternativet.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Valgt – Det opprettes et flerbåndsraster. Det første båndet er rasteret for avstandstildeling, det andre båndet inneholder en radindeks og det tredje båndet inneholder en kolonneindeks. Disse indeksene identifiserer lokasjonen for kildecellen som er minste akkumulerte kostnadsavstand fra.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "Et raster som definerer høydeverdiene for hver cellelokasjon.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "Verdiene brukes til å beregne den faktiske overflatedistansen som tilbakelegges når man beveger seg mellom cellene.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Definerer retningen for den reisende når det brukes en vertikal faktor, horisontal faktor og kildens motstandsgrad.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>From Source</strong> – Den vertikale faktoren, horisontale faktoren og kildens motstandsgrad brukes fra inndatakilden og ut i ikke-kildecellene. Dette er standardalternativet.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>To Source</strong> – Den vertikale faktoren, horisontale faktoren og kildens motstandsgrad brukes fra hver ikke-kildecelle og tilbake til inndatakilden.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Angi <strong>From Source</strong>- eller <strong>To Source</strong> -nøkkelordet som blir brukt på alle kilder, eller angi et felt i <strong>Source Raster</strong> som inneholder nøkkelordene for å identifisere reiseretning for hver kilde.. Feltet må inneholde strengen ${FROM_SOURCE} eller ${TO_SOURCE}.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Definerer forholdet mellom den vannrette kostnadsfaktoren og den horisontale relative bevegelsesvinkelen (VRMA).</p><p>Det er flere faktorer med modifikatorer som identifiserer en definert vertikal faktorgraf. I tillegg kan du bruke en tabell til å opprette en egendefinert graf. Grafene brukes til å identifisere den vertikale faktoren som brukes til å beregne den totale kostnaden ved å flytte inn i en nabocelle.</p><p>I forklaringene nedenfor brukes to akronymer: VF og VRMA. VF står for vertikal faktor som definerer vertikale problemer som forekommer når man beveger seg fra en celle til den neste. VRMA står for vertikal relativ bevegelig vinkel, som identifiserer helningsvinkelen mellom FROM- eller prosesseringscellen og TIL-cellen.</p><p><strong> Vertikalfaktortyper</strong>inkluderer følgende:</p><ul><li><strong>Binær</strong>--Spesifiserer at hvis VRMA er større enn den lave skjæringsvinkelen og mindre enn den høye skjæringsvinkelen, settes VF til verdien knyttet til nullfaktoren; ellers er det uendelig.</li><li><strong>Lineær</strong>--Indikerer at VF er en lineær funksjon av VRMA.</li><li><strong>Symmetrisk lineær </strong>--Spesifiserer at VF er en lineær funksjon av VRMA i henholdsvis den negative eller positive siden av VRMA, og de to lineære funksjonene er symmetriske i forhold til VF (y) aksen.</li><li><strong>Invers lineær</strong>--Indikerer at VF er en invers lineær funksjon av VRMA.</li><li><strong>Symmetrisk invers lineær</strong>--Spesifiserer at VF er en invers lineær funksjon av VRMA i henholdsvis den negative eller positive siden av VRMA, og de to lineære funksjonene er symmetriske med hensyn til VF (y)-aksen.</li><li><strong>Cos</strong>--Identifiserer VF som den cosinusbaserte funksjonen til VRMA.</li><li><strong>Sec</strong>--Identifiserer VF som den sekantbaserte funksjonen til VRMA.</li><li><strong>Cos-Sec</strong>--Spesifiserer at VF er den cosinusbaserte funksjonen til VRMA når VRMA er negativ og den sekantbaserte funksjonen til VRMA når VRMA ikke er negativ.</li><li><strong>Sec-Cos</strong>--Spesifiserer at VF er den sekantbaserte funksjonen til VRMA når VRMA er negativ og den cosinusbaserte funksjonen til VRMA når VRMA ikke er negativ.</li><li><strong>Tabell</strong>--Identifiserer at en tabellfil vil bli brukt til å definere vertikalfaktorgrafen som brukes til å bestemme VF-ene.</li></ul><p>Modifikatorer for vertikale søkeord inkluderer følgende:</p><ul><li><strong>Zero factor</strong>--Etablerer den vertikale faktoren som brukes når VRMA er null. Denne faktoren plasserer y-skjæringspunktet for den angitte funksjonen. Nullfaktor kan per definisjon ikke brukes på trigonometriske vertikale funksjoner (COS, SEC, COS-SEC eller SEC-COS). Y-skjæringspunktet er definert av disse funksjonene.</li><li><strong>Lav skjæringsvinkel</strong>--Definerer VRMA-vinkelen som VF vil bli satt til uendelig under.</li><li><strong>Høy skjæringsvinkel</strong>--Definerer VRMA-vinkelen over som VF vil settes til uendelig.</li><li><strong>Helning</strong>--Etablerer helningen til den rette linjen som brukes med <strong>Lineær</strong>og<strong>invers lineær</strong>vertikalfaktor nøkkelord. Helningen er spesifisert som en brøkdel av stigning over løp (for eksempel er 45 prosent helning 1/45, som angis som 0,02222).</li><li><strong>Tabellnavn</strong>--Identifiserer navnet på tabellen som definerer VF.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Definerer forholdet mellom den loddrette kostnadsfaktoren og den loddrette relative bevegelsesvinkelen (vertical relative moving angle, VRMA).",
	"@@Distance-Allocation_verticalraster_tag1@@": "Verdiene brukes til å beregne helningen som brukes til å identifisere den vertikale faktoren ved å bevege seg fra en celle til en annen.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "Cellestørrelsen som utdatarasteret blir opprettet med.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Hvis cellestørrelsen ble angitt eksplisitt i <strong>Environments</strong>, blir det standard cellestørrelse. Hvis den ikke ble angitt, blir utsdatacellestørrelsen den samme som <strong>Source Raster</strong>.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Bestemmer om avstanden skal beregnes ved hjelp av en planmetode (flat jord) eller geodetisk metode (ellipsoide).",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Plan – planmålinger bruker 2D kartesisk matematikk til å beregne lengde og areal. Alternativet er kun tilgjengelig når det måles i et projisert koordinatsystem og 2D-planet for det koordinatsystemet brukes som basis for målingene.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Geodetisk – Den korteste linjen mellom to punkt på jordoverflaten på en sfæroide (ellipsoide). Det betyr at resultatene ikke endrer seg, uansett inndata- og utdataprojeksjon.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Merk:</strong> En geodetisk linje kan for eksempel brukes når du vil bestemme den korteste avstanden mellom to byer for en flyrute. Dette er også kjent som en storsirkellinje hvis den er basert på en sfære i stedet for en ellipsoide.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Definerer den terskelavstanden som retningen til nærmeste kilde beregnes innenfor. Hvis avstanden til nærmeste kilde overskrider denne, blir utdataene for den cellen NoData.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "Standardavstanden er til utstrekningen av utdatarasteret.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "Rasteret som definerer hindringene.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "Datasettet må inneholde NoData der det ikke finnes hindringer. Hindringer representeres av gyldige verdier, inkludert null.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "Hindringene kan defineres av et heltall eller et flyttallsraster.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "Et rasterdatasett som identifiserer cellene eller lokasjonene som den euklidske retningen for hver utdatacellelokasjon beregnes til.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "Inndatatypen kan være et heltall eller flyttall.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "Navnet på et backlink-rasterlag for kostnad som brukes til å bestemme ruten tilbake til en kilde via ruten med lavest kostnad.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "For hver celle i backlink-rasteret identifiserer en verdi naboen som er den neste cellen på ruten med lavest akkumulert kostnad fra cellen til en enkelt kildecelle eller et sett med kildeceller.",
	"@@Cost-Path_costdistanceraster_tag0@@": "Navnet på et kostnadsavstandsraster som skal brukes til å finne ruten med lavest kostnad fra destinasjonslokasjonene til en kilde.",
	"@@Cost-Path_costdistanceraster_tag1@@": "Kostnadsavstandsrasteret opprettes vanligvis med funksjonen for kostnadsfordeling eller returkostnad. Rasterlaget for kostnadsavstand lagrer for hver celle minste akkumulerte kostnadsavstand over en kostnadsoverflate fra hver celle til et sett med kildeceller.",
	"@@Cost-Path_destinationfield_tag0@@": "Feltet brukes til å hente verdier for destinasjonslokasjonene. Inngående geoobjektdata må inneholde minst ett gyldig felt.",
	"@@Cost-Path_destinationraster_tag0@@": "Et rasterdatasettlag som identifiserer de cellene som ruten med lavest kostnad til kilden med lavest kostnad skal fastsettes fra.",
	"@@Cost-Path_destinationraster_tag1@@": "Inndatarasterlaget består av celler med gyldige verdier (null er en gyldig verdi), og de gjenværende cellene må tilordnes NoData.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Tvinger funksjonen til å behandle inndata backlink-rasteret som et strømningsretningsraster. Strømningsretningsraster kan ha heltall med verdier fra 0–255.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Ikke valgt – Hvis verdiene i det angitte backlink-rasteret er heltall i området 0–8, behandles datasettet som et backlink-raster for kostnad. Hvis verdiene er fra 0–255, behandles inndataene som et strømningsretningsraster. Hvis verdiene er fra 0–360, behandles inndataene som et tilbakeretningsraster.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Valgt – Rasteret som leveres for backlink-rasteret behandles som et  strømningsretningsraster Bruk dette alternativet dersom strømningsretningsrasteret har en maksimumsverdi på 8 eller mindre.",
	"@@Cost-Path_pathtype_tag0@@": "Et nøkkelord som definerer hvordan verdiene og sonene i destinasjonsinndataene blir tolket i beregningene av rutekostnader. Alternativene er som følger:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Each Cell</strong> – Ruten med lavest kostnad fastsettes for hver celle med gyldige verdier i destinasjonsinndataene, og ruten lagres i utdatarasteret. Med dette alternativet behandles hver celle i destinasjonsinndataene for seg, og ruten med lavest kostnad fastsettes for hver celle.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Each Zone</strong> – Ruten med lavest kostnad fastsettes for hver sone i destinasjonsinndataene, og den lagres til utdatarasteret. Med dette alternativet begynner ruten med lavest kostnad ved cellen med den laveste kostnad-avstand-vektingen i sonen.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Best Single</strong> – For alle celler i destinasjonsinndataene utledes ruten med lavest kostnad fra cellen med minste antall lavkostnadsruter til kildecellene.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Velg cellestørrelsen som skal brukes i utdatarasteret. Hvis alle inndatacellene har samme størrelse, gir alle alternativene de samme resultatene.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "Første av – Bruk den første cellestørrelsen i inndatarastrene.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Minste av – Bruk den miste cellestørrelsen i inndatarastrene.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Største av – Bruk den største cellestørrelsen i inndatarastrene. Dette er standardalternativet.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Gjennomsnitt av – Bruk den gjennomsnittlige cellestørrelsen i inndatarastrene.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Siste av – Bruk den siste cellestørrelsen i inndatarastrene.",
	"@@Cell-Statistics_extenttype_tag0@@": "Velg utstrekningen som skal brukes i utdatarasteret:",
	"@@Cell-Statistics_extenttype_tag1@@": "Første av – Bruk utstrekningen i det første inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Cell-Statistics_extenttype_tag2@@": "Kryssing mellom – Bruk utstrekningen for de overlappende pikslene til å bestemme behandlingsutstrekningen. Dette er standardalternativet.",
	"@@Cell-Statistics_extenttype_tag3@@": "Unionen av – Bruk utstrekningen for alle rastrene til å bestemme behandlingsutstrekningen.",
	"@@Cell-Statistics_extenttype_tag4@@": "Siste av – Bruk utstrekningen for det siste inndatarasteret til å bestemme behandlingsutstrekningen.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Bestemmer hvordan inndatarasterbåndene behandles.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Ikke valgt – Alle flerbåndsinndata behandles som enkeltbånd. Dette er standardalternativet.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Valgt – Alle flerbåndsinndata behandles som flerbånd.",
	"@@Cell-Statistics_rasters_tag0@@": "Listen over raster statistikk skal beregnes fra på piksel for piksel-basis.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Angir interpolasjonsmetoden som skal brukes når den angitte persentilverdien ligger mellom to inndatacelleverdier.</p><ul><li><strong>Automatisk identifisering</strong>--Hvis inngangsrastrene er av heltalls pikseltype, brukes<strong>Nærmest</strong>-metoden. Hvis inndataverdirasteret er av pikseltypen flyttall, brukes<strong>Lineær</strong>methoden. Dette er standardalternativet.</li><li><strong>Nærmeste</strong> –Den tilgjengelige verdien som er nærmest ønsket persentil, brukes. I dette tilfellet er utdatapikseltypen den samme som i inndataverdirasteret.</li><li><strong>Lineær</strong>--Det vektede gjennomsnittet av de to verdiene som omgir ønsket persentil, brukes. I dette tilfellet er utdatapikseltypen flyttall.</li></ul><p>Dette alternativet er bare tilgjengelig hvis<strong>operasjonstype</strong>parameter settes til<strong>median</strong>eller<strong>persentil</strong>.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>Persentilen som skal beregnes. Standardverdien er 90, for den 90. persentil.</p><p>Verdiområdet kan være fra 0 til og med 100. Den 0. persentilen tilsvarer i hovedsak minimumsstatistikken, og den 100. persentilen tilsvarer maksimum. En verdi på 50 gir i sin vesentlighet det samme resultatet som medianverdien.</p><p>Dette alternativet er bare tilgjengelig hvis<strong>operasjonstype</strong>parameter settes til<strong>persentil</strong>.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "Rasteret for tilbakeretning inneholder beregnede retninger i grader. Retningen identifiserer neste celle langs den optimale ruten tilbake til kilden med lavest akkumulert kostnad samtidig som hindringer unngås.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "Verdiområdet er fra 0 grader til 360 grader, med 0 reservert for kildecellene. Østlig retning (høyre) er 90 , og verdiene øker med urviseren (180 er sør, 270 er vest og 360 er nord).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "Feltet brukes til å hente verdier for destinasjonslokasjonene.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "Et rasterdatasettlag som identifiserer cellene som den optimal ruten til kilden med lavest kostnad skal fastsettes fra. Disse inndataene er obligatoriske.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "Inndatarasterlaget består av celler med gyldige verdier (null er en gyldig verdi), og de gjenværende cellene må tilordnes NoData.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "Rasteret for avstandsakkumulering brukes til å finne den optimale ruten fra destinasjonene til kildene. Rasteret for avstandsakkumulering opprettes vanligvis ved hjelp av <strong>Distance Accumulation</strong>-funksjonen. Hver celle i rasteret for avstandsakkumulering representerer minste akkumulerte kostnadsavstand over en kostnadsoverflate fra hver celle til et sett med kildeceller.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Spesifiserer et nøkkelord som definerer hvordan verdier og soner i destinasjonsinndataene blir tolket i beregninger av rutens kostnader.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Each Zone</strong> – Ruten med lavest kostnad fastsettes for hver sone i destinasjonsinndataene, og den lagres til utdatarasteret. Med dette alternativet begynner den optimale ruten for hver sone ved cellen med laveste vektingen av kostnadsavstand i sonen.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Best Single</strong> – For alle celler i destinasjonsinndataene blir den optimale ruten utledet fra cellen med minste antall lavkostnadsruter til kildecellene.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Each Cell</strong> – For hver celle med gyldige verdien i destinasjonsinndatene fastsettes det en optimal rute. Med dette alternativet behandles hver celle i destinasjonsinndataene for seg, og det fastesettes en optimal rute for hver celle.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "Bånd-ID-ene som skal brukes til endringsdeteksjon. Hvis det ikke er oppgitt bånd-ID-er, brukes alle båndene i rasterdatasettet med inndata.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "ID-verdier må være heltall atskilt med mellomrom.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "Bånd-ID-ene for de grønne båndet og SWIR-båndet som skal brukes til maskering for sky, skyskygge og snø. Hvis bånd-ID-er ikke er oppgitt, utføres det ikke maskering.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "ID-verdier må være heltall atskilt med mellomrom.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Denne parameteren angir båndene som skal brukes til maskering for sky, skyskygge og snø. Siden skyskygge og snø vises veldig mørkt i kortbølge IR-båndet (SWIR) og skyer og snø vises veldig lyst i det grønne båndet, anbefales det at båndindeksene for SWIR-båndet og det grønne båndet maskeres.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "Kjikvadrat terskel for endringssannsynlighet. Hvis en observasjon har en beregnet endringssannsynlighet som er over denne terskelen, flagges den som et avvik, som er en potensiell endringshendelse. Standardverdien er 0,99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "Minste antall etterfølgende avviksobservasjoner som må inntreffe før en hendelse regnes som en endring. En piksel må registreres som et avvik for det angitte antallet etterfølgende tidsinndelinger før det regnes som en reell endring. Standardverdien er 6.",
	"@@CCDC-Analysis_raster_tag0@@": "Det flerdimensjonale inndatarasterlaget.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "Frekvensen for oppdatering av tidsseriemodellen med nye observasjoner. Standardinnstillingen er å oppdatere modellen hvert år.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Denne parameteren definerer hvor ofte tidsseriemodellen oppdateres med nye observasjoner. Det kan være beregningskrevende å oppdatere modellen ofte og utbytte kan være minimalt. Hvis det for eksempel er 365 inndelinger eller tydelige observasjoner per år i det flerdimensjonale rasteret og oppdateringsfrekvensen er for hver observasjon, blir behandlingen 365 ganger mer behandlingskrevende sammenlignet med en årlig oppdatering, men nøyaktigheten er kanskje ikke høyere.",
	"@@Trend-To-RGB_modeltype_tag0@@": "Typen modellinformasjon som skal konverteres til RGB.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Linear – Lineær trendinformasjon konverteres til RGB. Dette er standardalternativet.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Harmonic – Harmonisk trendinformasjon konverteres til RGB.",
	"@@Trend-To-RGB_raster_tag0@@": "Inndatatrendrasteret.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>Beste modellproporsjonsverdi. Under prosessen med å velge modell beregner verktøyet p-verdien for hver modell og velger en modell som har flest knekkpunkter og samtidig beholder den laveste (mest signifikante) p-verdien basert på denne proporsjonsverdien. En verdi på 1 betyr at modellen har den laveste p-verdien, men kanskje ikke et stort antall knekkpunkter. Standardverdien er 1,25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>Det maksimale antallet segmenter som skal tilpasses tidsserien for hver piksel. Standardverdien er 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>Minimumsantallet gyldige observasjoner som kreves for å utføre tilpasning. Antallet år i det flerdimensjonale inndatasettet må være likt eller større enn denne verdien. Standardverdien er 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Angir hvorvidt andre bånd skal inkluderes i resultater.</p><ul><li>Avmerket – Andre bånd skal inkluderes i resultater. Informasjonen om segmentering og knekkpunkter fra det første segmenteringsbåndet som ble angitt i parameteren<strong>Behandlingsbånd</strong>, blir også tilpasset de gjenværende båndene i flerbåndsbildene. Modellresultatene inkluderer segmenteringsbåndet først og dernest de gjenværende båndene.</li><li>Ikke avmerket – Andre bånd inkluderes ikke. Dette er standardalternativet.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Angir om segmenter som viser ett års gjenoppretting, skal utelukkes.</p><ul><li>Avmerket – Segmenter som viser ett års gjenoppretting, utelukkes. Dette er standardalternativet.</li><li>Ikke avmerket – Segmenter som viser ett års gjenoppretting, utelukkes ikke.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>Båndet som skal brukes til segmentering av pikselverdikursen over tid. Velg båndet som best fanger opp endringene i geoobjektet du vil observere.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>P-verditerskelen for en modell som skal velges. Etter at knekkpunktene er påvist i den første fasen av modelltilpasningen, tilpasser verktøyet hvert segment og beregner p-verdien for å bestemme modellens signifikans. Ved neste gjentakelse reduserer modellen antallet segmenter med ett og beregner p-verdien på nytt. Slik fortsetter det, og hvis p-verdien er lavere enn verdien som er angitt i denne parameteren, blir modellen valgt og verktøyet slutter å søke etter en bedre modell. Hvis ingen slik modell blir valgt, velger verktøyet en modell med en p-verdi som er mindre enn den<strong>laveste p-verdien × beste modellproporsjonsverdi</strong>. Standardverdien er 0,01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>Det flerdimensjonale Landsat-rasterlaget.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Angir om gjenopprettingen har en stigende (positiv) trend.</p><ul><li>Avmerket – Gjenopprettingen har en stigende trend. Dette er standardverdien.</li><li>Ikke avmerket – Gjenopprettingen har en synkende trend.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>Terskelen for gjenoppretting, i år. Hvis et segment har en gjenopprettingstakt som er raskere enn<strong>1/terskel for gjenoppretting</strong>, forkastes segmentet og inkluderes ikke i tidsseriemodellen. Verdien må være mellom 0 og 1. Standardverdien er 0,25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>Datoen som brukes til å velge en sektor for hvert år i det flerdimensjonale inndatasettet. Sektoren med datoen nærmest festingsdatoen blir valgt. Denne parameteren er obligatorisk hvis inndatasettet inneholder data for mindre enn et år.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>Terskelen som skal brukes til demping av spisser eller avvik i pikselverdikursen. Verdien må være mellom 0 og 1, der 1 betyr ingen demping. Standardverdien er 0,9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>Antallet ekstra knekkpunkter utover<strong>maks_ant_segmenter + 1</strong>som kan brukes for å tilpasse modellen i første fase av knekkpunktidentifiseringen. Senere i modelleringsprosessen reduseres antallet ekstra knekkpunkter til<strong>maks_ant_segmenter + 1</strong>. Standardverdien er 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>Inndatarastersettene eller de flerdimensjonale rasterdatasettene som skal slås sammen.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Angir metoden som skal brukes for å løse overlappende piksler i de sammenslåtte datasettene.</p><ul><li><strong>Første</strong> – Pikselverdien i de overlappende områdene er verdien fra det første rasteret på listen over inndatarastere. Dette er standardalternativet.</li><li><strong>Siste</strong> – Pikselverdien i de overlappende områdene er verdien fra det siste rasteret på listen over inndatarastere.</li><li><strong>Min</strong> – Pikselverdien i de overlappende områdene er minimumsverdien til de overlappende pikslene.</li><li><strong>Maks</strong> – Pikselverdien i de overlappende områdene er maksimumsverdien til de overlappende pikslene</li><li><strong>Gjennomsnitt</strong> – Pikselverdien i de overlappende områdene er gjennomsnittet av de overlappende pikslene.</li><li><strong>Sum</strong>Pikselverdien i de overlappende områdene er den totale summen av de overlappende pikslene.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Angir tidsenheten som skal brukes på lengden av en harmonisk syklus.</p><ul><li><strong>Dager</strong> – Enheten for lengden av den harmoniske syklusen er dager.</li><li><strong>År</strong> – Enheten for lengden av den harmoniske syklusen er år. Dette er standardalternativet.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>Dimensjonen som en trend blir trukket ut langs, for variabelen eller variablene som velges i analysen.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>Frekvenstallet som skal brukes i trendtilpasningen. Denne parameteren angir frekvensen av sykluser i et år. Standardverdien er 1, eller én harmonisk syklus per år.</p><p>Denne parameteren er bare inkludert i trendanalysen for en harmonisk regresjon.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Angir hvorvidt NoData-verdier skal ignoreres i analysen.</p><ul><li>Avmerket – Analysen omfatter alle gyldige piksler langs en gitt dimensjon og ignorerer eventuelle NoData-piksler. Dette er standardalternativet.</li><li>Ikke avmerket – Analysen resulterer i NoData hvis det finnes NoData-verdier for pikslene langs den gitte dimensjonen.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>Lengden av periodisk variasjon som skal modelleres. Enheten er dager uansett hvilken tidsenhet som er brukt i inndataene. For eksempel har bladers grønnhet en sterk variasjonssyklus i løpet av ett år, så sykluslengden er 365,25 selv om inndataene er månedlig grønnhet. Timebaserte temperaturdata har en sterk variasjonssyklus i løpet av én dag, så sykluslengden er 1.</p><p>Standardlengden er 365,25 dager for data som varierer med en årlig syklus.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Angir om p-verdistatistikken for trendlinjens hellingskoeffisient skal beregnes.</p><ul><li>Avmerket – P-verdien beregnes og vises i detaljene når funksjonen er fullført.</li><li>Ikke avmerket – P-verdien beregnes ikke. Dette er standardalternativet.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>Den polynome tallrekkefølgen som skal brukes i trendtilpasningen. Denne parameteren angir polynomgraden. Standardverdien er 2, eller annengrads polynom.</p><p>Denne parameteren er bare inkludert i trendanalysen for en polynom regresjon.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Angir om determinantkoeffisienten for modellens godhet-statistikk for trendtilpasningslinjen skal beregnes.</p><ul><li>Avmerket – Determinantkoeffisienten beregnes og vises i detaljene når funksjonen er fullført.</li><li>Ikke avmerket – Determinantkoeffisienten beregnes ikke. Dette er standardalternativet.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>Det flerdimensjonale inndatarasteret.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Angir om kvadratroten av gjennomsnittet (RMSE) skal genereres for trendtilpasningslinjen.</p><ul><li>Avmerket – RMSE beregnes og vises i detaljene når funksjonen er fullført. Dette er standardalternativet.</li><li>Ikke avmerket –RMSE beregnes ikke.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Angir tidsenheten som skal brukes for lengden av en årstidsperiode når Seasonal-Kendall-testen utføres.</p><ul><li>Dager – Enheten for lengden av årstidsperioden er dager. Dette er standardalternativet.</li><li>Måneder – Enheten for lengden av årstidsperioden er måneder.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Angir linjetypen som skal brukes for å tilpasse pikselverdiene langs en dimensjon.</p><ul><li><strong>Lineær</strong> – Tilpasser pikselverdiene for en variabel langs en lineær trendlinje. Dette er standardalternativet.</li><li><strong>Harmonisk</strong> – Tilpasser pikselverdiene for en variabel langs en harmonisk trendlinje.</li><li><strong>Polynom</strong> – Tilpasser pikselverdiene for en variabel langs en annengrads polynom trendlinje.</li><li><strong>Mann-Kendall</strong> – Variable pikselverdier evalueres ved bruk av Mann-Kendall-trendtesten.</li><li><strong>Seasonal Kendall</strong> – Variable pikselverdier evalueres ved bruk av Seasonal-Kendall-trendtesten.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Velg hvilken cellestørrelse som skal brukes i det resulterende rasteret. Hvis alle inndatacellene er like, gir alle alternativene samme resultat.</p><ul><li>Først av – Bruk den første cellestørrelsen i inndatarasterne.</li><li>Min. av – Bruk den minste cellestørrelsen i alle inndatarasterne.</li><li>Maks. av – Bruk den største cellestørrelsen i alle inndatarasterne. Dette er standardalternativet.</li><li>Gjennomsnitt av – Bruk gjennomsnittlig cellestørrelse i alle inndatarasterne.</li><li>Sist av – Bruk den siste cellestørrelsen i inndatarasterne.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>Beregningsmetoden som brukes.</p><ul><li><strong>Differanse</strong> – Den matematiske differansen, eller subtraksjonen, mellom pikselverdiene i inndatarasterne beregnes. Dette er standarden.</li><li><strong>Relativ differanse</strong> – differansen i pikselverdier, som forklarer størrelsen på verdiene som sammenlignes, blir beregnet.</li><li><strong>Kategorisk differanse</strong> – Differansen mellom to kategoriske eller tematiske rastere blir beregnet, der resultatet inneholder klasseoverganger som fant sted mellom de to rasterne.</li><li><strong>Spektral euklidisk avstand</strong> – den euklidiske avstanden mellom pikselverdiene i to flerbåndsrastere blir beregnet.</li><li><strong>Spektralvinkeldifferanse</strong> – spektralvinkelen mellom pikselverdiene i to flerbåndsrastere blir beregnet. Utdataene er i radianer.</li><li><strong>Bånd med størst endring</strong>– båndet som gjør rede for den største endringen i hver piksel mellom to flerbåndsrastere, blir beregnet.</li></ul><p>Hvis<strong>Beregn endringsmetode</strong>settes til<strong>Kategorisk differanse</strong>og en av inndataene ikke er kategorisk, beregnes en enkel differanse.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Angi metoden som skal brukes for å symbolisere pikslene som har endret klasse.</p><ul><li><strong>Gjennomsnitt fra- og til-farger</strong> – Fargen på pikselen blir gjennomsnittet av fargen på den opprinnelige klassen og fargen på den endelige klassen.</li><li><strong>Bruk fra-farger</strong> – Fargen på pikselen blir fargen på den opprinnelige klassen.</li><li><strong>Bruk til-farger</strong> – Fargen på pikselen blir fargen på den endelige klassen.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Velg hvilket omfang som skal brukes i det resulterende rasteret:</p><ul><li>Først av – Bruk omfanget av det første inndatarasteret til å bestemme omfanget av behandlingen.</li><li>Snitt av – Bruk snittet av de overlappende pikslene til å bestemme omfanget av behandlingen. Dette er standardalternativet.</li><li>Union av – Bruk omfanget av alle rasterne til å bestemme omfanget av behandlingene.</li><li>Sist av – Bruk omfanget av det siste inndatarasteret til å bestemme omfanget av behandlingen.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Velg filtreringsmetode for beregning av kategorisk endring.</p><ul><li><strong>Behold alle</strong> – Alle klasser inkluderes i resultatet, og ingen filtrering finner sted. Velg dette alternativet for å se endring og persistens i ett enkelt datasett.</li><li><strong>Behold bare endrede piksler</strong> – Bare klassene som er endret fra en klassetype til en annen klassetype, inkluderes i resultatet. Velg dette alternativet hvis du bare er interessert i endring.</li><li><strong>Behold bare uendrede piksler</strong> – Bare klassene som ikke er endret, inkluderes i resultatet. Velg dette alternativet hvis du bare er interessert i persistens.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>Klasseverdiene fra<strong>Fra-rasteret</strong>som skal inkluderes i beregningen ved sammenligning av to kategoriske rastere. Dette er en mellomromdelt liste av heltallsverdier tilsvarende feltet<strong>ClassValue</strong> i inndatarasterdatasettet.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>Det første rasteret som skal brukes i beregningen. Sett inn tidspunkt 1-rasteret her for å evaluere endring fra tidspunkt 1 (tidligere) til tidspunkt 2 (senere).</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>Klasseverdiene fra<strong>Til-rasteret</strong>som skal inkluderes i beregningen ved sammenligning av to kategoriske rastere. Dette er en mellomromdelt liste av heltallsverdier tilsvarende feltet<strong>ClassValue</strong> i inndatarasterdatasettet.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>Det andre rasteret som skal brukes i beregningen. Sett inn tidspunkt 2-rasteret her for å evaluere endring fra tidspunkt 1 (tidligere) til tidspunkt 2 (senere).</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Angi metoden som skal brukes for å symbolisere pikslene som har endret klasse.</p><ul><li><strong>Gjennomsnitt fra- og til-farger</strong> – Fargen på pikselen blir gjennomsnittet av fargen på den opprinnelige klassen og fargen på den endelige klassen.</li><li><strong>Bruk fra-farger</strong> – Fargen på pikselen blir fargen på den opprinnelige klassen.</li><li><strong>Bruk til-farger</strong> – Fargen på pikselen blir fargen på den endelige klassen.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>Et felt som lagrer klassenavn i<strong>Fra rasterinput</strong>. Verktøyet søker automatisk etter<strong>klassenavn</strong>-felt eller<strong>klassenavn</strong>-felt å bruke.</p><p>Bruk dette alternativet hvis inndata ikke inneholder disse standard feltnavnene. .</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>Et felt som lagrer klassenavn i<strong>Til rasterinput</strong>. Verktøyet vil automatisk søke etter<strong>klassenavn</strong>-felt eller<strong>klassenavn</strong>-felt å bruke.</p><p>Bruk dette alternativet hvis inndata ikke inneholder disse standard feltnavnene.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>Antallet pikselkolonner som skal brukes i en fokalnabolagsdimensjon.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>Antallet pikselrader som skal brukes i en fokalnabolagsdimensjon.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Fyller ut NoData-opphold i resultatet. Dette er nyttig hvis det mangler linjer i bildene dine.</p>",
	"@@Statistics_raster_tag0@@": "<p>Inndatarasteret som fokalstatistikk skal utføres på.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>De følgende er de sju typene fokalstatistikkfunksjoner:</p><ul><li>Minimum – Beregner minimumsverdien av pikslene i nabolaget.</li><li>Maksimum – Beregner maksimumsverdien av pikslene i nabolaget.</li><li>Gjennomsnitt – Beregner gjennomsnittsverdien av pikslene i nabolaget. Dette er standardalternativet.</li><li>Standardavvik – Beregner standardavviksverdien av pikslene i nabolaget.</li><li>Median – Beregner medianverdien av pikslene i nabolaget.</li><li>Majoritet – Beregner majoritetsverdien, eller verdien som forekommer hyppigst, av pikslene i nabolaget.</li><li>Minoritet – Beregner minoritetsverdien, eller verdien som forekommer minst hyppig, av pikslene i nabolaget.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Angir retningen på endring som skal inkluderes i analysen.</p><p>Denne parameteren er tilgjengelig bare når endringsanalyserasteret som utgjør inndataene, er utdata fra LandTrendr-verktøyene.</p><ul><li><strong>Alle retninger</strong> – Alle endringsretninger inkluderes i resultatet. Dette er standardalternativet.</li><li><strong>Stigende</strong> – Bare endringer i den positive eller stigende retningen inkluderes i resultatet.</li><li><strong>Synkende</strong> – Bare endringer i den negative eller synkende retningen inkluderes i resultatet.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Angir endringsinformasjonen som skal beregnes.</p><ul><li><strong>Tidspunkt for siste endring</strong> – Hver piksel inneholder datoen for den nyligste endringen for den aktuelle pikselen i tidsserien. Dette er standardalternativet.</li><li><strong>Tidspunkt for tidligste endring</strong> – Hver piksel inneholder datoen for den tidligste endringen for den aktuelle pikselen i tidsserien.</li><li><strong>Tidspunkt for største endring</strong> – Hver piksel inneholder datoen for den mest signifikante endringen for den aktuelle pikselen i tidsserien.</li><li><strong>Antall endringer</strong> – Hver piksel inneholder det totale antallet ganger pikselen ble endret i tidsserien.</li><li><strong>Tidspunkt for lengste endring</strong> – Hver piksel inneholder datoen for endring på slutten av det lengste overgangssegmentet i tidsserien.</li><li><strong>Tidspunkt for korteste endring</strong> – Hver piksel inneholder datoen for endring på slutten av det korteste overgangssegmentet i tidsserien.</li><li><strong>Tidspunkt for raskeste endring</strong> –Hver piksel inneholder datoen for endring på slutten av overgangen som fant sted raskest.</li><li><strong>Tidspunkt for langsomste endring</strong> – Hver piksel inneholder datoen for endring på slutten av overgangen som fant sted langsomst.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Angir om det skal filtreres etter endringers varighet.</p><p></p><ul><li>Avmerket – Filtrer resultater etter varighet, slik at bare endringene som varte en viss tid, inkluderes i resultatet.</li><li>Ikke avmerket – Filtrer ikke resultater etter varighet. Dette er standardalternativet.</li></ul><p>Denne parameteren er tilgjengelig bare når endringsanalyserasteret som utgjør inndataene, er utdata fra LandTrendr-verktøyene.</p><p>Hvis denne parameteren er avmerket, må du sette parameterne<strong>Minimumsvarighet</strong>og<strong>Maksimumsvarighet</strong>til filtrering.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Angir om det skal filtreres etter endringsstørrelse.</p><ul><li>Avmerket – Filtrer resultater etter størrelse slik at bare endringer av en viss størrelse inkluderes i resultatet.</li><li>Ikke avmerket – Filtrer ikke resultater etter størrelse. Dette er standardalternativet.</li></ul><p>Denne parameteren er tilgjengelig bare når endringsanalyserasteret som utgjør inndataene, er utdata fra LandTrendr-verktøyene.</p><p>Hvis denne parameteren er avmerket, må du sette parameterne<strong>Minimumsstørrelse</strong>og<strong>Maksimumsstørrelse</strong>til filtrering.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Angir om resultatet skal avgrenses av et årsintervall.</p><ul><li>Avmerket – Filtrer resultater slik at bare endringer som fant sted innenfor et bestemt årsintervall, inkluderes i resultatet.</li><li>Ikke avmerket – Filtrer ikke resultater etter år. Dette er standardalternativet.</li></ul><p>Hvis denne parameteren er avmerket, må du sette parameterne<strong>Minimumsverdi</strong>og<strong>Maksimumsverdi</strong>til filtrering.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Filtrer resultater etter startverdi slik at kun endringene av en gitt startverdi er inkludert i utgangsdata.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Filtrer resultater etter slutttverdi slik at kun endringene av en gitt sluttverdi er inkludert i utgangsdata.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>Maksimalt antall endringer som skal beregnes per piksel. Tallet som oppgis, tilsvarer antallet bånd i det resulterende rasteret. Standardverdien er 1, hvilket betyr at bare én endringsdato beregnes, og det resulterende rasteret inneholder bare ett bånd.</p><p>Denne parameteren er ikke tilgjengelig når parameteren <strong>Endringstype</strong>er satt til<strong>Antall endringer</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>Endringsanalyserasteret som brukes som inndata.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Angir om datoen skal ekstraheres på begynnelsen av et endringssegment, eller på slutten.</p><p>Denne parameteren er tilgjengelig bare når endringsanalyserasteret som utgjør inndataene, er utdata fra LandTrendr-verktøyene.</p><ul><li><strong>Begynnelsen av et segment</strong> – Trekk ut datoen på begynnelsen av et endringssegment. Dette er standardalternativet.</li><li><strong>Slutten av et segment</strong> – Trekk ut datoen på slutten av et endringssegment.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>Områdeenhetene for de resulterende tetthetsverdiene.</p><ul><li>Kvadratkartenheter – For kvadratet av de lineære enhetene i den resulterende romlige referansen.</li><li>Kvadratmiles – For (amerikanske) miles.</li><li>Kvadratkilometer – For kilometer.</li><li>Acre – For (amerikanske) acre.</li><li>Hektar – For hektar.</li><li>Kvadratmeter – For meter.</li><li>Kvadratyard – For (amerikanske) yard.</li><li>Kvadratfot – For (amerikanske) fot.</li><li>Kvadrattommer – For (amerikanske) tommer.</li><li>Kvadratcentimeter – For centimeter.</li><li>Kvadratmillimeter – For millimeter.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>Pikselstørrelsen for det resulterende rasterdatasettet. Hvis verdien for<strong>Cellestørrelse</strong>er satt i geoprosesseringsmiljøer, er den standardverdien.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>Datasettet som definerer hindringene.</p><p>Hindringene kan være et geoobjektlag av polylinje- eller polygongeoobjekter.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>De angitte punkt- eller linjegeoobjektene som tettheten skal beregnes for.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Bestemmer om korteste bane skal brukes på en sfæroidmetode (geodetisk) eller flat jord-metode (plan).</p><ul><li><strong>Plan</strong> – Bruker plane avstander mellom geoobjekter. Dette er standardalternativet.</li><li><strong>Geodetisk</strong> –Bruker geodetiske avstander mellom geoobjekter. Denne metoden tar hensyn til sfæroidens kurvatur og behandler data nær polene og den internasjonale datolinjen på riktig måte.</li></ul><p>Du anbefales å bruke den<strong>geodetiske</strong>metoden på data som er lagret i et koordinatsystem som ikke egner seg for avstandsmålinger, og på all analyse som omfatter et stort geografisk område. For eksempel bør Web Mercator eller et hvilket som helst geografisk koordinatsystem bruke den<strong>geodetiske</strong>metoden.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Bestemmer hva verdiene i det resulterende rasteret representerer.</p><ul><li><strong>Tettheter</strong> – De resulterende verdiene representerer den predikerte tetthetsverdien. Dette er standardalternativet.</li><li><strong>Forventet antall</strong> – De resulterende verdiene representerer den predikerte mengden av fenomenet i hver piksel. Ettersom pikselverdien er koblet til den angitte verdien for<strong>cellestørrelse</strong>, kan det resulterende rasteret ikke skaleres til en annen pikselstørrelse og fremdeles representere mengden av det aktuelle fenomenet.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Felt som angir befolkningsverdier for hvert geoobjekt. Verdien i<strong>befolkningsfeltet</strong>er antallet eller mengden som skal fordeles utover landskapet for å skape en uavbrutt flate. Verdier i<strong>befolkningsfeltet</strong>kan være heltall eller flyttall.</p><p>Alternativer og standard virkemåter for feltet er oppført i prioritert rekkefølge nedenfor.</p><ul><li>Bruk<strong>Ingen</strong>hvis ingen elementer eller spesialverdier skal brukes, og hvert geoobjekt telles én gang.</li><li>Bruk<strong>Form</strong>hvis inndatageoobjektene inneholder Z.</li><li>Hvis ikke er standardfeltet<strong>BEFOLKNING</strong> eller en hvilken som helst akseptabel avledning av befolkning:<ul><li><strong>BEFOLKNINGxxxx</strong>der<strong>xxxx</strong>kan være et hvilket som helst gyldig tegn, for eksempel<strong>BEFOLKNING6</strong>,<strong>BEFOLKNING1974</strong> eller<strong>BEFOLKNINGVEITYPE</strong>.</li><li><strong>BEF</strong>.</li><li><strong>BEFxxxx</strong>.</li><li>Hvis ingen av tilfellene ovenfor er aktuelle, er standarden<strong>Ingen</strong>.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>Søkeradiusen som tetthet skal beregnes innenfor. Enheter baseres på projeksjonens lineære enhet.</p><p>Hvis enhetene for eksempel er i meter – og du vil inkludere alle geoobjekter innenfor et nabolag med radius på én mile – settes søkeradiusen lik 1609,344 (siden 1 mile er 1609,344 m).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Angir om<strong>NoData</strong>-verdier i<strong>verdirasteret</strong>påvirker resultatene for sonen de ligger innenfor.</p><ul><li><strong>Ja</strong> – Innenfor en gitt sone brukes bare piksler som har en verdi i<strong>verdirasteret</strong>, til å bestemme den resulterende verdien for den aktuelle sonen.<strong>NoData</strong>-piksler i<strong>verdirasteret</strong>ignoreres i den statistiske beregningen. Dette er standardalternativet.</li><li><strong>Nei</strong> – Hvis det innenfor en gitt sone finnes<strong>NoData</strong>-piksler i<strong>verdirasteret</strong>, anses det som at det er utilstrekkelig informasjon til å utføre statistiske beregninger for alle pikslene i den aktuelle sonen. Hele sonen får derfor verdien<strong>NoData</strong>i det resulterende rasteret.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Bestemmer metoden som skal brukes til interpolasjon av persentil når antall verdier fra inndatarasteret som skal beregnes, er partall.</p><ul><li><strong>Auto-detekter</strong> – Hvis inndataverdirasteret er av pikseltypen heltall, brukes<strong>Nærmeste</strong>-metoden. Hvis inndataverdirasteret er av pikseltypen flyttall, brukes <strong>Lineær</strong>-metoden. Dette er standardalternativet.</li><li><strong>Nærmeste</strong> –Den tilgjengelige verdien som er nærmest ønsket persentil, brukes. I dette tilfellet er den resulterende pikseltypen den samme som i inndataverdirasteret.</li><li><strong>Lineær</strong> –Det vektede gjennomsnittet av de to verdiene som omgir ønsket persentil, brukes. I dette tilfellet er den resulterende pikseltypen flyttall.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>Persentilen som skal beregnes. Standardverdien er 90, for den 90. persentil.</p><p>Verdiområdet kan være fra 0 til og med 100. 0. persentil er i det vesentlige lik minimumsverdien, og 100. persentil er lik maksimumsverdien. En verdi på 50 gir i det vesentlige samme resultat som medianverdien.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Bestemmer hvordan det flerdimensjonale inndataverdirasteret skal behandles.</p><ul><li><strong>Gjeldende sektor</strong> – Statistikk beregnes fra den gjeldende sektoren til et flerdimensjonalt datasett. Dette er standardalternativet.</li><li><strong>Alle sektorer</strong> –Statistikk beregnes for alle dimensjoner (som tid eller dybde) i et flerdimensjonalt datasett.</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>Statistikktypen som skal beregnes.</p><ul><li><strong>Gjennomsnitt</strong> – Beregner gjennomsnittet av alle piksler i<strong>verdirasteret</strong>som tilhører samme sone som den resulterende pikselen.</li><li><strong>Majoritet</strong> –Bestemmer verdien som forekommer hyppigst av alle pikslene i<strong>verdirasteret</strong>som tilhører samme sone som den resulterende pikselen.</li><li><strong>Maksimum</strong> – Bestemmer den høyeste verdien av alle pikslene i<strong>verdirasteret</strong>som tilhører samme sone som den resulterende pikselen.</li><li><strong>Median</strong> – Bestemmer medianverdien av alle pikslene i<strong>verdirasteret</strong>som tilhører samme sone som den resulterende pikselen.</li><li><strong>Minimum</strong> – Bestemmer den laveste verdien av alle pikslene i<strong>verdirasteret</strong>som tilhører samme sone som den resulterende pikselen.</li><li><strong>Minoritet</strong> – Bestemmer verdien som forekommer minst hyppig av alle pikslene i<strong>verdirasteret</strong>som tilhører samme sone som den resulterende pikselen.</li><li><strong>Persentil</strong> – Beregner en persentil av alle pikslene i<strong>verdirasteret</strong>som tilhører samme sone som den resulterende pikselen. Den 90. persentilen beregnes som standard. Du kan bestemme hvilken persentil som skal beregnes med parameteren<strong>Persentilverdi</strong>.</li><li><strong>Område</strong> – Beregner differansen mellom den største og den minste verdien av alle pikslene i<strong>verdirasteret</strong>som tilhører samme sone som den resulterende pikselen.</li><li><strong>Standardavvik</strong> – Beregner standardavviket for alle pikslene i<strong>verdirasteret</strong>som tilhører samme sone som den resulterende pikselen.</li><li><strong>Sum</strong> –Beregner den totale verdien av alle pikslene i<strong>verdirasteret</strong>som tilhører samme sone som den resulterende pikselen.</li><li><strong>Variasjon</strong> – Antallet unike verdier for alle pikslene i<strong>verdirasteret</strong>som tilhører samme sone som den resulterende pikselen.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Raster som inneholder verdiene det skal beregnes en statistikk for.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>Felt som inneholder verdiene som definerer hver av sonene. Det kan være et heltall eller et strengfelt i sonerasteret.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>Datasett som definerer sonene. Sonene kan defineres av et heltallsraster.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>Spesifiserer hvordan statistikktypen skal beregnes.</p><ul><li><strong>Aritmetisk</strong>–Beregner aritmetisk statistikk. Dette er standard.</li><li><strong>Sirkulær</strong> – Beregner sirkulær statistikk som egner seg til sykliske mengder, f.eks. kompassretninger i grader, dagtider og fraksjonsdeler av reelle tall.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>Den høyeste mulige verdien (øvre grense) i de sykliske dataene. Det er et positivt tall med en standardverdi på 360. Verdien representerer også den samme mengden som den laveste mulige verdien (nedre grense).</p><p>Denne parameteren er aktuell bare når det beregnes sirkulær statistikk.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>Inndatarasteret der grensen mellom sonene blir utjevnet.</p><p>Det må være av typen heltall.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Angir hvor mange ganger utjevningsprosessen skal foregå, to ganger eller én.</p><ul><li><p><strong>Avmerket</strong> –Utfører en utvidelses- og krympeoperasjon to ganger. Den første gangen utføres operasjonen i henhold til den angitte sorteringstypen. Deretter utføres en ytterligere utvidelses- og krympeoperasjon der prioriteten er reversert. Dette er standardalternativet.</p></li><li><p><strong>Ikke avmerket</strong> – Utfører utvidelses- og krympeoperasjonen én gang i henhold til sorteringstypen.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Angir hvilken sorteringstype som skal brukes i utjevningsprosessen. Sorteringen bestemmer ut fra hvilken prioritet celler kan utvides inn i naboceller.</p><p>Sorteringen kan baseres på soneverdi eller soneareal.</p><ul><li><p><strong>Ikke sorter</strong> – Sonene sorteres ikke etter størrelse. Soner med større verdier har høyere prioritet for å utvides inn i soner med mindre verdier i det utjevnede resultatet. Dette er standardalternativet.</p></li><li><p><strong>Synkende</strong> – Sorterer soner etter størrelse i synkende rekkefølge. Soner med større totalt areal har høyere prioritet for å utvides inn i soner med mindre totalt areal. Dette alternativet virker i retning av å eliminere eller redusere forekomsten av celler fra mindre soner i det utjevnede resultatet.</p></li><li><p><strong>Stigende</strong> – Sorterer soner etter størrelse i stigende rekkefølge. Soner med mindre totalt areal har høyere prioritet for å utvides inn i soner med større totalt areal. Dette alternativet virker i retning av å bevare eller øke forekomsten av celler fra mindre soner i det utjevnede resultatet.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>Dimensjonen for aggregering. Dette er dimensjonen som variablene blir aggregert langs.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Angir metoden som skal brukes til å filtrere de flerdimensjonale inndataene før aggregeringen utføres.</p><ul><li><strong>Alle</strong> – Hele området for hver dimensjon brukes. Dette er standardalternativet.</li><li><strong>Etter verdier</strong> – Dimensjonen blir inndelt ved bruk av en dimensjonsverdi eller liste over verdier.</li><li><strong>Etter områder</strong> – Dimensjonen blir inndelt ved bruk av en liste over områder.</li><li><strong>Etter gjentakelse</strong> – Dimensjonen blir inndelt etter en bestemt intervallstørrelse.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Parameterne for gjentakelsesdefinisjon gjør det mulig å definere dimensjonsverdiene som skal brukes til å filtrere de flerdimensjonale inndataene som skal analyseres, når parameteren<strong>Dimensjonsdefinisjon</strong>er satt til<strong>Etter gjentakelse</strong>.</p><ul><li><strong>Dimensjon</strong> – Dimensjonen som skal brukes til filtreringen.</li><li><strong>Start for første gjentakelse</strong> – Begynnelsen på første intervall. Dette intervallet brukes til gjentakelse gjennom datasettet.</li><li><strong>Slutt for første gjentakelse</strong> – Slutten på første intervall. Dette intervallet brukes til gjentakelse gjennom datasettet.</li><li><strong>Trinn</strong> – Frekvensen for inndeling av dataene.</li><li><strong>Enhet</strong> – Gjentakelsesenheten.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Angir nøkkelordintervallet som skal brukes ved aggregering langs dimensjonen.</p><p>Denne parameteren er obligatorisk når<strong>Type</strong>-parameteren er satt til<strong>Nøkkelord for intervall</strong>.</p><ul><li><strong>Hver time</strong> – Dataverdiene aggregeres i trinn på en time, og resultatet omfatter hver enkelt time i tidsserien. Dette er standardalternativet.</li><li><strong>Daglig</strong> –Dataverdiene aggregeres i trinn på en uke, og resultatet omfatter hver enkelt uke i tidsserien.</li><li><strong>Ukentlig</strong> – Dataverdiene aggregeres i trinn på en uke, og resultatet omfatter hver enkelt uke i tidsserien.</li><li><strong>Ti dager</strong> – Dataverdiene aggregres i 3 perioder på 10 dager hver. Den siste perioden kan inneholde flere eller færre dager enn 10. Resultatet inneholder 3 inndelinger for hver måned.</li><li><strong>Fem dager</strong> – Dataverdiene aggregeres i 6 perioder på 5 dager hver. Den siste perioden kan inneholde flere eller færre dager enn 5. Resultatet inneholder 6 inndelinger for hver måned.</li><li><strong>Månedlig</strong> – Dataverdiene aggregeres i trinn på en måned, og resultatet inkluderer hver måned i tidsserien.</li><li><strong>Kvartalsvis</strong> – Dataverdiene aggregeres i trinn på et kvartal, og resultatet inkluderer hvert kvartal i tidsserien.</li><li><strong>Årlig</strong> – Dataverdiene aggregeres i trinn på et år, og resultatet inkluderer hvert år i tidsserien.</li><li><strong>Gjentas daglig</strong> – Dataverdiene aggregeres i trinn på en dag, og resultatet inneholder én aggregert verdi per dag etter den julianske kalenderen. Resultatet inneholder maksimalt 366 daglige tidsinndelinger.</li><li><strong>Gjentas ukentlig</strong> – Dataverdiene aggregeres i trinn på en uke, og resultatet inneholder én aggregert verdi per uke. Resultatet inneholder maksimalt 53 ukentlige tidsinndelinger.</li><li><strong>Gjentas månedlig</strong> – Dataverdiene aggregeres i trinn på en måned, og resultatet inneholder én aggregert verdi per måned. Resultatet inneholder maksimalt 12 månedlige tidsinndelinger.</li><li><strong>Gjentas hvert kvartal</strong> – Dataverdiene aggregeres i trinn på et kvartal, og resultatet inneholder én aggregert verdi per kvartal. Resultatet inneholder maksimalt 4 kvartalsvise tidsinndelinger.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Angir den matematiske metoden som skal brukes til å sette sammen de aggregerte inndelingene i et intervall.</p><ul><li><strong>Majoritet</strong> – Pikselverdien som forekommer oftest på tvers av alle inndelingene i intervallet.</li><li><strong>Maksimum</strong> – Maksimumsverdien for en piksel beregnes på tvers av alle inndelingene i intervallet.</li><li><strong>Gjennomsnitt</strong> – Gjennomsnittet av en piksels verdier på tvers av alle inndelingene i intervallet. Dette er standardalternativet.</li><li><strong>Median</strong> –Medianverdien for en piksel beregnes på tvers av alle inndelingene i intervallet.</li><li><strong>Minimum</strong> –Minimumsverdien for en piksel beregnes på tvers av alle inndelingene i intervallet.</li><li><strong>Minoritet</strong> – Pikselverdien som forekommer sjeldnest for en piksel, beregnes på tvers av alle inndelingene i intervallet.</li><li><strong>Område</strong> – Verdiområdet for en piksel beregnes på tvers av alle inndelingene i intervallet.</li><li><strong>Standardavvik</strong> – standardavviket for en piksels verdier beregnes på tvers av alle inndelingene i intervallet.</li><li><strong>Sum</strong> – Summen av en piksels verdier beregnes på tvers av alle inndelingene i intervallet.</li><li><strong>Variant</strong> – Antall unike verdier for en piksel beregnes på tvers av alle inndelingene i intervallet.</li></ul><p>Alle alternativene har også en ekvivalent med et Ignore NoData-alternativ. Disse vil utføre den matematiske operasjonen på alle gyldige piksler langs dimensjonen og ignorere eventuelle NoData-piksler.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>Intervallområder som er angitt i en tabell, brukes til å aggregere grupper av verdier. Minimums- og maksimumsverdiene angir området som skal inkluderes.</p><p>Denne parameteren er obligatorisk når<strong>Type</strong>-parameteren er satt til<strong>Intervallområder</strong>.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>Det flerdimensjonale inndatarasteret.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Angir dimensjonsintervallet som dataene skal aggregeres for.</p><ul><li><strong>Alle</strong> – De variable dataene aggregeres på tvers av alle inndelinger. Dette er standardalternativet.</li><li><strong>Nøkkelord for intervall</strong> – De variable dataene aggregeres ved hjelp av et allment kjent intervall.</li><li><strong>Intervallverdi</strong> –De variable dataene aggregeres ved hjelp av brukerdefinert intervall og enhet.</li><li><strong>Intervallområder</strong> – De variable dataene aggregeres mellom angitte verdi- eller dato-par.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>Størrelsen på intervallet som ble brukt til aggregeringen.</p><p>Denne parameteren er obligatorisk når<strong>Type</strong>-parameteren er satt til<strong>Intervalverdi</strong>.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>Dimensjonsverdiene som skal brukes til å filtrere de flerdimensjonale inndataene for analyse. Denne parameteren er obligatorisk når parameteren<strong>Dimensjonsdefinisjon</strong>er satt til<strong>Etter verdier</strong>.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>Variabelen eller variablene som skal aggregeres langs den gitte dimensjonen.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>Inndataene Esri regresjonsdefinisjonsfil (<strong>.ecd</strong>) som inneholder statistikken og informasjonen for det spesielle datasettet, regresjonsmodellen og valgte attributter.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>Rasterdatasettet eller -datasettene som representerer prediktorvariablene. Det kan være et enkeltbåndsraster, flerbåndsraster, flerdimensjonalt raster, mosaikkdatasett eller en rastersamling.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>Typen statistisk beregning du vil utføre.</p><p>Den tilgjengelige statistikken er<strong>Flertall</strong>,<strong>Maksimum</strong>,<strong>Middels</strong>,<strong>Median</strong>,<strong>Minimum</strong>,<strong>Mindretall</strong>,<strong>Persentil</strong>,<strong>Område</strong>,<strong>Standard Avvik</strong>,<strong>Tilsammen</strong>, og<strong>Variasjon</strong>.</p><p>Standard er<strong>Middels</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>Farger tilordnes tilfeldig til piksler som ikke er inkludert i fargekartet.</p><ul><li>Umerket--Ikke-kartlagte piksler tilordnes ikke en farge. Dette er standarden.</li><li>Merket--Ikke-kartlagte piksler tilordnes en farge.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>Når Gram-Schmidt-algoritmen er valgt, kan du også spesifisere sensoren som samlet inn multiband-rasterinngangen. Ved å velge sensortype blir passende båndvekter angitt.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>Verdien av hvor mange stykker før eller over som skal tas med i det definerte vinduet. Verdien må være et positivt heltall fra 1 til 100. Standardverdien er 1.</p><p>Enheten for denne parameteren er stykke.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>Verdien som skal brukes til å runde av en lineær verdi til området for et gitt sirkulært gjennomsnitt.</p><p>Dens verdi må være positiv. Standardverdien er 360 grader.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>Navnet på dimensjonen som vinduet flyttes langs.</p><p>Standardverdien er den første dimensjonen foruten x, y som finnes i flerdimensjonal raster for inndata.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>Verdien av hvor mange stykker før eller over som skal tas med i det definerte vinduet. Verdien må være et positivt heltall fra 1 til 100. Standardverdien er 1.</p><p>Enheten for denne parameteren er stykke.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>Inndatarasteret kan bare være en flerdimensjonal raster i skyrasterformat(<strong>.crf</strong>fil).</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>Angir hvordan NoData-verdier skal håndteres av statistikkberegningen.</p><ul><li><strong>Data</strong>--NoData-verdier i verdiinndataene ignoreres i resultatene av det definerte vinduet de faller innenfor. Dette er standarden</li><li><strong>NoData</strong>--Utdataverdier vil være NoData hvis det finnes NoData-verdier i inndataene i det definerte vinduet.</li><li><strong>Fyll NoData</strong>--NoData celleverdier vil erstattes ved bruk av valgt statistikk innen det definerte vinduet.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Angir interpoleringsmetoden som skal brukes når persentilverdien faller mellom to celleverdier.</p><ul><li><strong>Automatisk gjenkjenning</strong>--Hvis inndata-rasteret er av typen heltallspiksel, vil<strong>nærmeste</strong>metode brukes. Hvis inndatarasteret er av typen flytpiksel<strong>vil</strong>lineærmetode bli brukt. Dette er standarden.</li><li><strong>Nærmeste</strong>--Nærmeste tilgjengelige verdi til persentilen vil bli brukt. I dette tilfellet vil utdatapikseltypen være den samme som for rasteret for inndataverdien.</li><li><strong>Lineær</strong>--Det vektede gjennomsnittet av de to omkringliggende verdiene fra persentilen vil bli brukt. I dette tilfellet vil utdatapikseltypen være flyttall.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>Persentilen som vil beregnes når<strong>Persentil</strong>er valgt som statistikktypen. Standardverdien er 90, for den 90. persentil.</p><p>Verdiområdet kan være fra 0 til og med 100. Den 0. persentilen tilsvarer i hovedsak minimumsstatistikken, og den 100. persentil tilsvarer den maksimale statistikken, med det unntak at resultatet blir flyttall. En verdi på 50 vil gi samme resultat som medianstatistikken.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Angir statistikktypen som skal beregnes.</p><p></p><ul><li><strong>Gjennomsnitt</strong>--Gjennomsnittsverdien for cellene i det definerte vinduet beregnes. Dette er standarden.</li><li><strong>Sirkulært gjennomsnitt</strong>--Den sirkulære middelverdien av cellene i det definerte vinduet vil bli beregnet. Når denne statistikktypen er valgt, blir<strong>sirkulær flytverdi</strong>parameter tilgjengelig.</li><li><strong>Flertall</strong>--Flertallet (verdien som forekommer oftest) av cellene i det definerte vinduet vil bli identifisert.</li><li><strong>Maksimum</strong>--Maksimum (størst verdi) av cellene i det definerte vinduet vil bli identifisert.</li><li><strong>Median</strong>--Medianen til cellene i nabolaget vil bli identifisert.</li><li><strong>Minimum</strong>--Minimum (minste verdi) av cellene i nabolaget vil bli identifisert.</li><li><strong>Persentil</strong>--En persentil av cellene i nabolaget vil bli beregnet. Når denne statistikktypen er valgt, blir<strong>parameterne</strong>persentilverdien<strong>og persentil</strong>interpolasjonstype tilgjengelige. Bruk disse nye parameterne til å angi persentilen som skal beregnes, og velg henholdsvis interpolasjonstypen som skal brukes.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>Dimensjonen som skal brukes for interpolering.</p><p>Denne parameteren kreves når<strong>Dimensjonsdefinisjon</strong>-parameteren er angitt som<strong>Etter intervall</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Spesifiserer metoden som skal brukes til å filtrere de flerdimensjonale inndataene før interpoleringen utføres.</p><ul><li><strong>Etter verdier</strong>--Dimensjonen vil bli oppdelt ved hjelp av en dimensjonsverdi eller liste over verdier.</li><li><strong>Etter intervall</strong>--Dimensjonen vil bli oppdelt ved hjelp av et område eller en liste over områder.</li><li><strong>Etter måltaster</strong>--Dimensjonen vil bli oppdelt ved hjelp av et spesifikt flerdimensjonalt målraster.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>Slutten av intervallet, som brukes til å iterere gjennom datasettet.</p><p>Denne parameteren kreves når parameteren<strong>dimensjonsdefinisjon</strong>er angitt til<strong>Etter intervall</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Angir om NoData-verdier skal ignoreres i analysen.</p><ul><li>Ikke avmerket--Analysen vil resultere i NoData hvis det finnes NoData-verdier i tilstøtende stykker. Dette er standarden.</li><li>Avmerket - Analysen bruker bare stykker som har gyldige bildepunkter, og ignorerer NoData-stykker.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Angir metoden som skal brukes til å interpolere rasteret.</p><ul><li><strong>Lineær</strong>--Utdataene interpoleres lineært ved hjelp av tilstøtende sektorer. Dette er standarden.</li><li><strong>Nærmeste nabo</strong>--Utdataene vil bruke nærmeste tilstøtende stykke.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>Det flerdimensjonale inndatarasteret.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>Begynnelsen av intervallet, som brukes til å gjenta gjennom datasettet.</p><p>Denne parameteren kreves når<strong>Dimensjondefinisjonens</strong>parameter er satt til<strong>Etter intervall</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>Hvor ofte dataene skal interpoleres.</p><p>Denne parameteren kreves når<strong>Dimensjondefinisjonens</strong>parameter er satt til<strong>Etter intervall</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>Målrastreret angitt av dimensjonsdefinisjonen.</p><p>Denne parameteren kreves når<strong>dimensjondefinisjonens</strong>parameter er satt til<strong>Etter målraster</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>Intervallenheten.</p><p>Denne parameteren kreves når<strong>dimensjondefinisjons</strong>parameter er satt til<strong>Etter intervall</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>Dimensjonsverdiene som skal brukes til å filtrere inndataene flerdimensjonale data for analyse.</p><p>Denne parameteren kreves når<strong>dimensjonsdefinisjons</strong>parameter er satt til<strong>Etter verdier</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>Variabelen eller variablene som skal interpoleres av dimensjonsdefinisjonen.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Angir om terrenget i utdataene er utflatet ved hjelp av<strong>Sigma null</strong>eller<strong>Gamma null</strong>.</p><ul><li><strong>Gamma null</strong> – beta null-tilbakespredningen normaliseres ved å bruke arealenheten til en flate som er lokalt i tangens med DEM, ofte omtalt som den lokale hendelsesvinkelen. Dette er standarden.</li><li><strong>Sigma null</strong> – beta null-tilbakespredningen normaliseres ved å bruke en DEM til å beregne arealet.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>Inndata-DEM.</p><p>DEM brukes til å estimere området med lokal belysning.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Spesifiserer om det vertikale referansesystemet til DEM-inndataene blir forvandlet til ellipsoidisk høyde. De fleste høydedatasett refereres etter ortometrisk høyde på havnivå, så det kreves i disse tilfellene en korrigering for å konvertere til ellipsoidisk høyde.</p><ul><li>Avmerket – en geoidekorrigering utføres for å konvertere ortometrisk høyde til ellipsoidisk høyde (basert på EGM96-geoiden). Dette er standarden.</li><li>Ikke avmerket – ingen geoidekorrigering blir utført. Bruk dette alternativet bare hvis DEM er uttrykt i ellipsoidisk høyde.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>Radarinndata.</p><p>Dette rasteret må først kalibreres radiometrisk til beta null.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>Beregningen tilordnet det tredje båndet</p><p>Et båndnavn, en bånd-ID eller et algebrauttrykk som bruker båndene.</p><p>Operatorene som støttes, er enhetlige: pluss (+), minus (-), multiplikasjon (*) og divisjon (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>Beregningen tilordnet det andre båndet.</p><p>Et båndnavn, en bånd-ID eller et algebrauttrykk som bruker båndene.</p><p>Operatorene som støttes, er enhetlige: pluss (+), minus (-), multiplikasjon (*) og divisjon (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>Flerbånds rasterdata som inndata.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Spesifiserer metoden som skal brukes til å trekke ut bånd.</p><ul><li>Båndnavn – båndnavnet som representerer bølgelengdeintervallet på det elektromagnetiske spektrumet (f.eks. rødt, nær infrarødt eller termisk infrarødt), eller polariseringen (f.eks. VH, VV, HH,or HV), blir brukt. Dette er standarden.</li><li>Bånd-ID-er – båndnummeret (f.eks. B1, B2 eller B3) blir brukt.</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>Beregningen tilordnet det tredje båndet.</p><p>Et båndnavn, en bånd-ID eller et algebrauttrykk som bruker båndene.</p><p>Operatorene som støttes, er enhetlige: pluss (+), minus (-), multiplikasjon (*) og divisjon (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Velg typen overflatefunksjon som skal tilpasses rundt målcellen.</p><ul><li>Kvadratisk – En kvadradisk overflatefunksjon blir tilpasset nabocellene. Dette er standardtypen.</li><li>Bikvadratisk – En bikvadratisk overflatefunksjon blir tilpasset nabocellene.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>Utdataene blir beregnet over denne avstanden fra målcellens sentrum. Det fastslår nabolagsstørrelsen. Standardverdien er angitt rastercellestørrelse, som fører til et 3 ganger 3 nabolag.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>Måleenheten (grader eller prosentandeler) som skal brukes til utgående hellingsraster. Denne parameteren er aktiv bare når <strong>Parametertype</strong> er <strong>Helling</strong>.</p><ul><li>Grader – hellingsgraden blir beregnet i grader. Dette er standard.</li><li>Prosent økning – Hellingsgraden blir beregnet som prosentvis økning, som også omtales som prosentvis helling.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Spesifiserer utgående overflateparametertype som skal beregnes.</p><ul><li>Helling – Andelen endring i høyde blir beregnet. Dette er standard.</li><li>Skråning – Den nedadgående retningen på den maksimale endringsverdeien for hver celle blir beregnet.</li><li>Gjennomsnittlig kurvatur – Den generelle kurvaturen på overflaten blir målt. Den beregnes som et gjennomsnitt av minimal og maksimal kurvatur. Denne kurvaturen beskriver den iboende konveksiteten eller konkaviteten i overflaten, uavhengig av retning tyngdekraftpåvirkning.</li><li>Tangentiell (normal kontur) kurvatur – Den geometriske normale kurvaturen vinkelrett på hellingen for jordlinjen, tangeringen på hellingslinjen blir målt. Kurvaturen blir vanligvis brukt for å karakterisere konvergensen eller divergensen av flyt langs overflaten.</li><li>Profilen (normal hellingslinje) kurvatur – Den geometriske, normale kurvaturen langs hellingslinjen blir målt. Kurvaturen blir vanligvis brukt for å karakterisere akselerasjonen og retardasjonen av flyt nedover langs overflaten.</li><li>Plan (projisert kontur) kurvatur – Kurvaturen langs konturlinjene blir målt.</li><li>Kontur geodesisk torsjon – Endringsgraden i hellingsvinkelen langs konturlinjene blir målt.</li><li>Gauss-kurvatur – Den generelle kurvaturen på overflaten blir målt. Den beregnes som produktet av minimal og maksimal kurvatur.</li><li>Casorati-kurvatur – Den generelle kurvaturen på overflaten blir målt. Den kan være null eller et annet positivt tall.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Spesifiserer om geodetiske asimutter blir projisert for å korrigere vinkelforvrengningen som forårsakes av den geografiske referansen for utdata. Denne parameteren er aktiv bare når <strong>Parametertype</strong> er <strong>Hellingsretning</strong>.</p><ul><li>Ikke avmerket – Geodesiske asimutter blir ikke projisert. Dette er standard.</li><li>Avmerket – Geodesiske asimutter blir projisert.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>Innlagt overflateraster. Det kan være et heltall- eller et flyttallraster.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Angir om nabolagsavstanden vil variere med endringer i landskapet (adaptiv). Den maksimale avstanden avgjøres av nabolagsavstanden. Den minste avstanden er størrelsen på den innlagte rastercellen.</p><ul><li>Ikke avmerket – En enkelt (fast) nabolagsavstand blir brukt på alle lokasjoner. Dette er standard.</li><li>Avmerket – En adaptiv nabolagsavstand blir brukt på alle lokasjoner.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Angir om hellingsretningen blir målt fra et punkt på ekvator eller fra nordpolen. Denne parameteren er aktiv bare når <strong>Parametertype</strong> er <strong>Hellingsretning</strong>.</p><ul><li>Ikke avmerket – Hellingsretningen blir målt fra nordpolen. Dette er standard.</li><li>Avmerket – Hellingsretningen blir målt fra et punkt på ekvator.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>Den lineære enheten for vertikale z-verdier.</p><p>Den defineres med et verikalt koordinatsystem hvis det finnes. Hvis et vertikalt koordinatsystem ikke finnes, bør z-enheten defineres fra enhetslisten for å sørge for korrekt geodesisk beregning.</p><ul><li>Tomme – Den lineære enheten vil være tommer.</li><li>Fot – Den lineære enheten vil være fot.</li><li>Yard – Den lineære enheten vil være yard.</li><li>Mile US – Den lineære enheten vil være miles.</li><li>Nautisk mil – Den lineære enheten vil være nautiske mil.</li><li>Millimeter – Den lineære enheten vil være millimeter.</li><li>Centimeter – Den lineære enheten vil være centimeter.</li><li>Meter – Den lineære enheten vil være meter. Dette er standard.</li><li>Kilometer – Den lineære enheten vil være kilometer.</li><li>Desimeter – Den lineære enheten vil være desimeter.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>Et raster som spesifiserer lokasjonene der analysen gjøres.</p><p>Rasteret kan være av typen heltall eller flyttall.</p><p>Alle celler med en gyldig verdi, inkludert null, vil danne masken. Celler som er NoData i maskeinndataene, blir NoData i utdataene.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Velg hvilken cellestørrelse som skal brukes i det resulterende rasteret. Hvis alle inndatacellene er like, gir alle alternativene samme resultat.</p><ul><li>Først av – Bruk den første cellestørrelsen i inndatarasterne.</li><li>Min. av – Bruk den minste cellestørrelsen i alle inndatarasterne.</li><li>Maks. av – Bruk den største cellestørrelsen i alle inndatarasterne. Dette er standardalternativet.</li><li>Gjennomsnitt av – Bruk gjennomsnittlig cellestørrelse i alle inndatarasterne.</li><li>Sist av – Bruk den siste cellestørrelsen i inndatarasterne.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>Spesifiserer konvergensverdien mellom to fortløpende interasjoner. Når epsilon er mindre enn eller lik den angitte verdien, stopper iterasjonen og resultatet fra den siste iterasjonen brukes.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Velg hvilket omfang som skal brukes i utdatarasteret:</p><ul><li><p>Først av – Bruk omfanget av det første inndatarasteret til å bestemme omfanget av behandlingen.</p></li><li>Skjæringspunkt av – Bruk omfanget av overlappende pikslene til å bestemme omfanget av behandlingen. Dette er standardalternativet.</li><li>Union av – Bruk omfanget av alle rasterne til å bestemme omfanget av behandlingene.</li><li>Sist av – Bruk omfanget av det siste inndatarasteret til å bestemme omfanget av behandlingen.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Angir maksimalt antall iterasjoner som skal fullføres. Beregningen avsluttes når denne verdien nås, uavhengig av <strong>Epsilon</strong>-innstillingen.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>Flerbåndsrastrene med inndata.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>Inndatarasteret som representerer kumulativ kostnadsavstand fra den første kilden.</p><p>Det skal være en akkumulert kostnadsavstand som er et resultat av funksjonen <strong>Avstandsakkumulering</strong> eller <strong>Avstandsallokering</strong>.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>Inndatarasteret som representerer kumulativ kostnadsavstand fra den andre kilden.</p><p>Det skal være en akkumulert kostnadsavstand som er et resultat av funksjonen <strong>Avstandsakkumulering</strong> eller <strong>Avstandsallokering</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>Inndataraster for motsatt retning fra den første kilden.</p><p>Dette er et rasterdatasett som angir retningen for neste celle langs ruten med minst kostnad tilbake til den første kilden. Dette er utdata fra funksjonen <strong>Avstandsakkumulering</strong> eller <strong>Avstandsallokering</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>Inndataraster for motsatt retning fra den andre kilden.</p><p>Dette er et rasterdatasett som angir retningen for neste celle langs ruten med minst kostnad tilbake til den første kilden. Dette er utdatae fra funksjonen <strong>Avstandsakkumulering</strong> eller <strong>Avstandsallokering</strong>.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>En prosent eller kumulativ kostnadsterskel som fastsetter om en gitt celle inkluderes i resulterende korridorraster.</p><p>Når parameteren <strong>Terskelmetode</strong> er satt til <strong>Prosent av minst kostnad</strong>, indikerer den spesifiserte verdiene prosentøkningen som skal brukes fra minimumsverdien av de summerte rastrene for kumulativ kostnadsavstand. Når parameteren <strong>Terskelmetode</strong> er satt til <strong>Kumulativ kostnad</strong>, angir verdien celler som har en summert kumulativ kostnad som er lik eller mindre enn verdien som blir inkludert i korridoren.</p><p>Denne parameteren er bare aktiv hvis parameteren <strong>Terskelmetode</strong> er satt til <strong>Prosent av minst kostnad</strong> eller <strong>Kumulativ kostnad</strong>.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Angir hvordan terskelen spesifiseres.</p><p></p><ul><li><strong>Ingen terskel</strong> – Ingen terskel brukes, og resulterende korridor vil dekke hele omfanget av inndatarastrene. Dette er standarden.</li><li><strong>Prosent av minst kostnad</strong> – Terskelen blir definert som en prosent av minimumsverdien av de summerte rastrene for kumulativ kostnadsavstand.</li><li><strong>Kumulativ kostnad</strong> – Terskelen defineres i kumulative kostnadsavstandsenheter.</li></ul>"
};
const helpTexts_nb = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_nb);


//# sourceMappingURL=help-texts.nb-24786143.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,