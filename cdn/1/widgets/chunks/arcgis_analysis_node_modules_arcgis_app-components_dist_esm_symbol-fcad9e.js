"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_symbol-fcad9e"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ buildOutlineVisVar),
/* harmony export */   b: () => (/* binding */ buildSizeAutoVisVar),
/* harmony export */   c: () => (/* binding */ createSimpleRenderer)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * Updates the layer with a Simple renderer with default settings
 * @param options: options
 */
function createSimpleRenderer(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    return modules.LocationCreator.createRenderer({
        layer,
        view: mapView,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : true,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : true,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
function buildOutlineVisVar() {
    var _a;
    // TODO - can we just get the visualVariable without a full renderer?
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    return modules.LocationCreator.createRenderer({
        layer,
        view: mapView,
        outlineOptimizationEnabled: true,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size", "outline");
        return Promise.resolve(sizeOutlineVisVar);
    });
}
function buildSizeAutoVisVar() {
    var _a;
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    return modules.LocationCreator.createRenderer({
        layer,
        view: mapView,
        outlineOptimizationEnabled: false,
        sizeOptimizationEnabled: true,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size", "auto");
        return Promise.resolve(sizeAutoVisVar);
    });
}



//# sourceMappingURL=location-e26b539f.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/symbolStyler-04635b2b.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/symbolStyler-04635b2b.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ buildSymbolStylerForChartValue),
/* harmony export */   b: () => (/* binding */ buildSymbolStylerForDotDensityValue),
/* harmony export */   c: () => (/* binding */ createSymbolStylerPopover),
/* harmony export */   d: () => (/* binding */ buildSymbolStylerForPredominanceValue),
/* harmony export */   e: () => (/* binding */ buildSymbolStylerForTypeGroup),
/* harmony export */   f: () => (/* binding */ buildSymbolStylerForTypeValue),
/* harmony export */   g: () => (/* binding */ buildSymbolStylerForClassed),
/* harmony export */   h: () => (/* binding */ getRangeValues),
/* harmony export */   i: () => (/* binding */ buildSymbolStylerForDefault),
/* harmony export */   j: () => (/* binding */ buildSymbolStylerForTypeRamp),
/* harmony export */   k: () => (/* binding */ buildSymbolStylerForChartRamp),
/* harmony export */   l: () => (/* binding */ buildSymbolStylerForColorSizeBelow),
/* harmony export */   m: () => (/* binding */ buildSymbolStylerForColorSizeAbove),
/* harmony export */   n: () => (/* binding */ buildSymbolStylerForPredominanceRamp),
/* harmony export */   o: () => (/* binding */ buildSymbolStylerForBackground),
/* harmony export */   p: () => (/* binding */ buildSymbolStylerForHeatmapRamp),
/* harmony export */   q: () => (/* binding */ buildSymbolStylerForDotDensityBackground),
/* harmony export */   r: () => (/* binding */ removeSymbolStylerPopover),
/* harmony export */   s: () => (/* binding */ setRangeValues),
/* harmony export */   t: () => (/* binding */ buildSymbolStylerForDotDensityRamp),
/* harmony export */   u: () => (/* binding */ buildSymbolStylerForGeoRSS),
/* harmony export */   v: () => (/* binding */ buildSymbolStylerForRelationshipRamp),
/* harmony export */   w: () => (/* binding */ buildSymbolStylerForColorRamp),
/* harmony export */   x: () => (/* binding */ buildSymbolStylerForSize),
/* harmony export */   y: () => (/* binding */ buildSymbolStylerForSimple)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _location_e26b539f_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./location-e26b539f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */






/**
 * Get low and high values of size range in current map scale (if applicable)
 */
function getRangeValues() {
    const { mapView, layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo;
    const infos = renderer.type === "class-breaks" ? renderer.classBreakInfos : renderer.uniqueValueInfos;
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
    const isNull = sizeVisVar ? !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_3__.i)(sizeVisVar.minSize) : false; // then we have stops (= fixed)
    const isNumber = sizeVisVar ? typeof sizeVisVar.minSize === "number" : false;
    const isAboveAndBelow = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) === "above-and-below";
    let lowValue = 2, highValue = 20;
    if (sizeVisVar) {
        if (isAboveAndBelow) {
            // 5 stops, center is smallest
            const stops = sizeVisVar.stops;
            [lowValue, highValue] = [stops[2].size, Math.max(stops[0].size, stops[4].size)];
        }
        else if (isNull) {
            const stops = sizeVisVar.stops;
            [lowValue, highValue] = [stops[0].size, stops[stops.length - 1].size];
        }
        else if (isNumber) {
            [lowValue, highValue] = [sizeVisVar.minSize, sizeVisVar.maxSize];
        }
        else {
            const mapScale = mapView.scale;
            const minStops = sizeVisVar.minSize.stops;
            const maxStops = sizeVisVar.maxSize.stops;
            [lowValue, highValue] = [minStops[minStops.length - 1].size, maxStops[maxStops.length - 1].size];
            for (let i = 0; i < minStops.length; i++) {
                const minStop = minStops[i];
                const maxStop = maxStops[i];
                if (mapScale <= minStop.value) {
                    if (i > 0) {
                        // interpolate to get correct sizes
                        let lastMinStop = minStops[i - 1];
                        let lastMaxStop = maxStops[i - 1];
                        const factor = (mapScale - lastMinStop.value) / (minStop.value - lastMinStop.value);
                        [lowValue, highValue] = [
                            lastMinStop.size + (minStop.size - lastMinStop.size) * factor,
                            lastMaxStop.size + (maxStop.size - lastMaxStop.size) * factor
                        ];
                    }
                    else {
                        // don't interpolate; use lowest sizes
                        [lowValue, highValue] = [minStops[0].size, maxStops[0].size];
                    }
                    break;
                }
            }
        }
    }
    else if (infos) {
        const minSym = infos[0].symbol;
        const maxSym = infos[infos.length - 1].symbol;
        [lowValue, highValue] = [(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(minSym), (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(maxSym)];
        if (lowValue > highValue) {
            [lowValue, highValue] = [highValue, lowValue];
        }
    } // else wrong renderer
    return [lowValue, highValue];
}
/**
 * Set new low and high values of size range in current map scale (if applicable)
 */
function setRangeValues(values) {
    const { mapView, layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer); // or any other renderer with sizeVisVar
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
    let newLowValue = values[0];
    let newHighValue = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_3__.i)(values[1]) ? values[1] : newLowValue;
    if (sizeVisVar) {
        const authInfo = renderer.authoringInfo;
        const isAboveAndBelow = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) === "above-and-below";
        const isNull = sizeVisVar ? !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_3__.i)(sizeVisVar.minSize) : false; // then we have stops (= fixed)
        const isNumber = sizeVisVar ? typeof sizeVisVar.minSize === "number" : false;
        let [lowValue, highValue] = getRangeValues();
        const isInverted = lowValue > highValue;
        if (!isInverted && newLowValue >= highValue) {
            newLowValue = highValue - 0.75;
        }
        else if (isInverted && newLowValue >= lowValue) {
            newLowValue = lowValue - 0.75;
        }
        if (!isInverted && lowValue >= newHighValue) {
            newHighValue = lowValue + 0.75;
        }
        else if (isInverted && highValue >= newHighValue) {
            newHighValue = highValue + 0.75;
        }
        if (isAboveAndBelow) {
            const stops = sizeVisVar.stops;
            /* stops[0].size = newHighValue;
            stops[1].size = Math.round((newHighValue + newLowValue) / 2);
            stops[2].size = newLowValue;
            stops[3].size = Math.round((newHighValue + newLowValue) / 2);
            stops[4].size = newHighValue; */
            const minSize = !isInverted ? values[0] : values[1];
            const maxSize = !isInverted ? values[1] : values[0];
            const maxValue = Math.max(...stops.map((stop) => stop.value));
            const midValue = stops[2].value; // assumes 5 stops
            const minValue = Math.min(...stops.map((stop) => stop.value));
            const upperRange = Math.abs(maxValue - midValue);
            const lowerRange = Math.abs(minValue - midValue);
            const maxRange = upperRange > lowerRange ? upperRange : lowerRange;
            const sizeRange = maxSize - minSize;
            stops.forEach((stop) => {
                const { value } = stop;
                stop.size = (Math.abs(value - midValue) / maxRange) * sizeRange + minSize;
            });
        }
        else if (isNull) {
            // need to remove stops
            const stops = sizeVisVar.stops;
            sizeVisVar.stops = null;
            sizeVisVar.minSize = newLowValue;
            sizeVisVar.maxSize = newHighValue;
            sizeVisVar.minDataValue = stops[0].value;
            sizeVisVar.maxDataValue = stops[stops.length - 1].value;
        }
        else if (isNumber) {
            // fixed
            if (!isInverted) {
                sizeVisVar.minSize = newLowValue;
                sizeVisVar.maxSize = newHighValue;
            }
            else {
                sizeVisVar.maxSize = newLowValue;
                sizeVisVar.minSize = newHighValue;
            }
        }
        else {
            // automatic
            const mapScale = mapView.scale;
            let minStops = modules.esriLang.clone(sizeVisVar.minSize.stops);
            let maxStops = modules.esriLang.clone(sizeVisVar.maxSize.stops);
            if (isInverted) {
                [minStops, maxStops] = [maxStops, minStops];
            }
            let minFactor = newLowValue / minStops[minStops.length - 1].size;
            let maxFactor = newHighValue / maxStops[maxStops.length - 1].size;
            // find factor
            for (let i = 0; i < minStops.length; i++) {
                const minStop = minStops[i];
                const maxStop = maxStops[i];
                if (mapScale <= minStop.value) {
                    if (i > 0) {
                        // interpolate to get correct sizes
                        let lastMinStop = minStops[i - 1];
                        let lastMaxStop = maxStops[i - 1];
                        const factor = (mapScale - lastMinStop.value) / (minStop.value - lastMinStop.value);
                        const [min, max] = [
                            lastMinStop.size + (minStop.size - lastMinStop.size) * factor,
                            lastMaxStop.size + (maxStop.size - lastMaxStop.size) * factor
                        ];
                        minFactor = newLowValue / min;
                        maxFactor = newHighValue / max;
                    }
                    else {
                        // don't interpolate; use lowest sizes
                        minFactor = newLowValue / minStops[0].size;
                        maxFactor = newHighValue / maxStops[0].size;
                    }
                    break;
                }
            }
            // apply to all scale ranges
            minStops.forEach((minStop) => (minStop.size = Math.round(minFactor * minStop.size * 10) / 10));
            maxStops.forEach((maxStop) => (maxStop.size = Math.round(maxFactor * maxStop.size * 10) / 10));
            if (isInverted) {
                [minStops, maxStops] = [maxStops, minStops];
            }
            sizeVisVar.minSize.stops = minStops;
            sizeVisVar.maxSize.stops = maxStops;
        }
    }
    else {
        const minSym = renderer.classBreakInfos[0].symbol;
        const maxSym = renderer.classBreakInfos[renderer.classBreakInfos.length - 1].symbol;
        let lowValue = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(minSym);
        let highValue = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(maxSym);
        let isInverted = false;
        if (lowValue > highValue) {
            [lowValue, highValue] = [highValue, lowValue];
            isInverted = true;
        }
        if (lowValue !== highValue && newLowValue > highValue) {
            newLowValue = highValue - 0.75;
        }
        lowValue = newLowValue;
        if (lowValue !== highValue && lowValue > newHighValue) {
            newHighValue = lowValue + 0.75;
        }
        highValue = newHighValue;
        const unit = renderer.classBreakInfos.length === 1
            ? 1
            : Math.max(highValue - lowValue, 10) / (renderer.classBreakInfos.length - 1);
        renderer.classBreakInfos.forEach((classBreakInfo, idx) => {
            const sym = classBreakInfo.symbol;
            if (isInverted) {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(sym, highValue - unit * idx);
            }
            else {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(sym, lowValue + unit * idx);
            }
        });
    }
}
function getSizeByScale(sizeAutoVisVar, scale) {
    const sizeStops = sizeAutoVisVar.stops;
    const stopsCount = sizeStops.length;
    const finalIndex = stopsCount - 1;
    const scaleMin = sizeStops[0].value;
    const scaleMax = sizeStops[finalIndex].value;
    if (scale <= scaleMin) {
        return sizeStops[0].size;
    }
    if (scale >= scaleMax) {
        return sizeStops[finalIndex].size;
    }
    for (let i = 0; i <= finalIndex; i++) {
        const currentStop = sizeStops[i];
        const nextStop = sizeStops[i + 1];
        if (scale >= currentStop.value && scale < nextStop.value) {
            const scaleRange = nextStop.value - currentStop.value;
            const sizeRange = currentStop.size - nextStop.size;
            const relativePosition = (scale - currentStop.value) / scaleRange;
            const effectiveSize = currentStop.size - sizeRange * relativePosition;
            return Math.round(effectiveSize * 100) / 100;
        }
    }
    return 1; // we really don't come here
}

let lastStylerSourceId;
const defaultGeometry = "polygon";
function getGreyColors() {
    const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    return [
        new modules.esriColor([255, 255, 255]),
        new modules.esriColor([178, 178, 178]),
        new modules.esriColor([128, 128, 128]),
        new modules.esriColor([92, 92, 92]),
        new modules.esriColor([77, 77, 77]),
        new modules.esriColor([51, 51, 51]),
        new modules.esriColor([26, 26, 26])
    ];
}
function getAllColors() {
    const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    return [
        new modules.esriColor("#ff4040"),
        new modules.esriColor("#ff8200"),
        new modules.esriColor("#faa83f"),
        new modules.esriColor("#ffd159"),
        new modules.esriColor("#74b566"),
        new modules.esriColor("#008977"),
        new modules.esriColor("#33e3c8"),
        new modules.esriColor("#43abeb"),
        new modules.esriColor("#4c64c9"),
        new modules.esriColor("#9868ed"),
        new modules.esriColor("#b155e6"),
        new modules.esriColor("#db5181"),
        new modules.esriColor("#e03b99"),
        new modules.esriColor("#2b2b2b"),
        new modules.esriColor("#bdbdbd"),
        new modules.esriColor("#ffffff")
    ];
}
function getAllColorsReversed() {
    const allColors = getAllColors();
    return allColors.reverse();
}
function createSymbolStylerPopover(props) {
    const { referenceElement, heading } = props;
    const popover = document.createElement("arcgis-smart-mapping-styler-popover");
    popover.referenceElement = referenceElement;
    popover.heading = heading;
    document.body.appendChild(popover);
    popover.open = true;
    popover.reposition();
    return popover;
}
function removeSymbolStylerPopover(popover) {
    var _a;
    if (popover === null || popover === void 0 ? void 0 : popover.parentNode) {
        popover.open = false;
        (_a = popover.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(popover);
    }
}
async function createSymbolStylerElement(popoverNode) {
    const symbolStyler = document.createElement("arcgis-symbol-styler");
    symbolStyler.initialSourceId = lastStylerSourceId;
    symbolStyler.style = "max-height: max(calc(100vh - 200px), 300px)"; // not the best, but easiest
    symbolStyler.popoverProps = {
        placement: "bottom-end",
        offsetDistance: 10,
        offsetSkidding: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s.isRTL ? 3 : -3,
        pointerDisabled: "true",
        popoverWidth: 315,
        //overlayPositioning: "fixed", -- buggy, offset issue
        refElement: await popoverNode.getPopoverRefElement()
    };
    symbolStyler.addEventListener("arcgisSymbolStylerSourceIdChange", ({ detail: activeSourceId }) => (lastStylerSourceId = activeSourceId));
    return symbolStyler;
}
function symbolStylerEdit(symbolStyler, symbol, props) {
    if (document.URL.indexOf("debug=true") > -1) {
        console.log("symbol", JSON.stringify(symbol, null, 2));
        console.log("props", JSON.stringify(Object.assign(Object.assign({}, props), { portal: "..." })));
    }
    return symbolStyler.edit(symbol, props);
}
function onStylerEditWrapper(onStylerEdit, event) {
    const { symbol, info: { marker, stroke, fill } } = event.detail;
    if (document.URL.indexOf("debug=true") > -1) {
        console.log("onStylerEdit - symbol:", JSON.stringify(symbol === null || symbol === void 0 ? void 0 : symbol.toJSON(), null, 2));
        console.log("onStylerEdit - info.marker:", JSON.stringify(marker));
        console.log("onStylerEdit - info.stroke:", JSON.stringify(stroke));
        console.log("onStylerEdit - info.fill:", JSON.stringify(fill));
    }
    onStylerEdit(event);
}
async function buildSymbolStylerForBackground(options) {
    const { layer, mapImageSublayer, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode } = options;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const isPolygon = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer);
    const isChart = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).type === "pie-chart";
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
    const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
    let symbol = renderer.backgroundFillSymbol;
    if (!symbol) {
        symbol = new modules.SimpleFillSymbol();
        symbol.color = null;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).backgroundFillSymbol = symbol;
        onChange();
    }
    const fillEnabled = !!symbol.color;
    const strokeEnabled = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a5)(symbol);
    const suggestedFillColors = getGreyColors();
    const suggestedStrokeColors = getGreyColors();
    const onStylerEdit = ({ detail: { symbol, info: { marker, stroke /* , fill */ } } }) => {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).backgroundFillSymbol = symbol;
        updateAutoVisVar(symbol, marker === null || marker === void 0 ? void 0 : marker.autoAdjusted, stroke === null || stroke === void 0 ? void 0 : stroke.autoAdjusted, symbolStyler, options);
    };
    let stroke;
    if (symbol.outline) {
        stroke = {
            color: symbol.outline.color ? symbol.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
            size: symbol.outline.width,
            style: symbol.outline.style,
            autoAdjusted: !!sizeOutlineVisVar
        };
    }
    else {
        stroke = {
            color: new modules.esriColor([0, 0, 0, 0.5]),
            size: 1,
            style: "solid",
            autoAdjusted: !!sizeOutlineVisVar
        };
    }
    if (!symbol.outline) {
        symbol.outline = new modules.SimpleLineSymbol();
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(symbol, new modules.esriColor([0, 0, 0, 0]));
    }
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    const edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
        portal,
        symbolFilter: "simple",
        sections: {
            fill: {
                type: "color",
                optional: true,
                open: true,
                suggestedColorsOpen: true,
                transparencyOpen: true,
                suggestedColors: suggestedFillColors
            },
            stroke: {
                type: "color",
                optional: true,
                suggestedColors: suggestedStrokeColors,
                extraParts: {
                    width: true,
                    autoStrokeAdjust: mapImageSublayer || (isPolygon && isChart && !sizeVisVar) ? false : "editable"
                }
            }
        },
        fill: {
            color: symbol.color ? symbol.color : new modules.esriColor([0, 0, 0, 0.5])
        },
        stroke,
        fillEnabled,
        strokeEnabled
    });
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
    return createWatchScaleHandle(symbol, symbolStyler);
}
async function buildSymbolStylerForDotDensityBackground(options) {
    var _a;
    const { layer, mapImageSublayer, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { /* onChange, */ popoverNode } = options;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
    const fillEnabled = !!renderer.backgroundColor;
    const strokeEnabled = !!((_a = renderer.outline) === null || _a === void 0 ? void 0 : _a.color);
    const suggestedFillColors = getGreyColors();
    const suggestedStrokeColors = getGreyColors();
    const onStylerEdit = ({ detail: { symbol, info: { marker, stroke /* , fill */ } } }) => {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).backgroundColor = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(symbol);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).outline = symbol.outline;
        updateAutoVisVar(symbol, marker === null || marker === void 0 ? void 0 : marker.autoAdjusted, stroke === null || stroke === void 0 ? void 0 : stroke.autoAdjusted, symbolStyler, options);
        //onChange();
    };
    let stroke;
    if (renderer.outline) {
        stroke = {
            color: renderer.outline.color ? renderer.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
            size: renderer.outline.width,
            style: renderer.outline.style,
            autoAdjusted: !!sizeOutlineVisVar
        };
    }
    else {
        stroke = {
            color: new modules.esriColor([0, 0, 0, 0.5]),
            size: 1,
            style: "solid",
            autoAdjusted: !!sizeOutlineVisVar
        };
    }
    const symbol = new modules.SimpleFillSymbol();
    symbol.color = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).backgroundColor;
    symbol.outline = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).outline;
    // TODO no CIMs
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    const edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
        portal,
        symbolFilter: "simple",
        sections: {
            fill: {
                type: "color",
                open: true,
                optional: true,
                suggestedColorsOpen: true,
                transparencyOpen: true,
                suggestedColors: suggestedFillColors
            },
            stroke: {
                type: "color",
                optional: true,
                suggestedColors: suggestedStrokeColors,
                extraParts: {
                    width: true,
                    autoStrokeAdjust: mapImageSublayer ? false : "editable"
                }
            }
        },
        fill: {
            color: renderer.backgroundColor ? renderer.backgroundColor : new modules.esriColor([0, 0, 0, 0.5])
        },
        stroke,
        fillEnabled,
        strokeEnabled
    });
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
    const sym = new modules.SimpleFillSymbol();
    sym.color = renderer.backgroundColor;
    sym.outline = renderer.outline;
    return createWatchScaleHandle(sym, symbolStyler);
}
async function buildSymbolStylerForDefault(options) {
    const { onChange, popoverNode } = options;
    const { layer, mapView, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const isPoint = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.A)(layer);
    const isLine = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.B)(layer);
    const isPolygon = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer);
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "auto");
    const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
    let defaultSymbol = renderer.defaultSymbol;
    if (!isSupportedSymbol(defaultSymbol)) {
        defaultSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    }
    const fillEnabled = defaultSymbol.type === "picture-marker" ? false : !!defaultSymbol.color;
    const strokeEnabled = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a5)(defaultSymbol);
    const isPointCIM = defaultSymbol.type === "cim" && defaultSymbol.data.symbol.type === "CIMPointSymbol";
    const suggestedFillColors = getGreyColors();
    const suggestedStrokeColors = getGreyColors();
    const onStylerEdit = ({ detail: { symbol /* ,
    info: { marker, stroke, fill } */ } }) => {
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        renderer.defaultSymbol = symbol;
        onChange();
    };
    let stroke;
    if (!defaultSymbol) {
        if (isPolygon) {
            defaultSymbol = new modules.SimpleFillSymbol();
        }
        else if (isLine) {
            defaultSymbol = new modules.SimpleLineSymbol();
        }
        else {
            defaultSymbol = new modules.SimpleMarkerSymbol();
        }
    }
    if (defaultSymbol.type === "simple-fill") {
        const symbol = defaultSymbol;
        if (symbol.outline) {
            const sym = symbol.outline;
            stroke = {
                color: sym.color ? sym.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.width,
                style: sym.style,
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1,
                style: "solid",
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
    }
    else if (defaultSymbol.type === "simple-line") {
        const sym = defaultSymbol;
        stroke = {
            color: sym.color ? sym.color : new modules.esriColor([0, 0, 0, 0.5]),
            size: sym.width,
            style: sym.style,
            marker: sym.marker
        };
    }
    else if (defaultSymbol.type === "simple-marker" && defaultSymbol.outline) {
        const sym = defaultSymbol.outline;
        stroke = {
            color: sym.color ? sym.color : new modules.esriColor([0, 0, 0, 0.5]),
            size: sym.width,
            style: sym.style
        };
    }
    else if (defaultSymbol.type === "cim") {
        stroke = getCimLineProps(defaultSymbol);
    }
    else {
        // picture-marker
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: 1
        };
    }
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    let edit;
    if (isLine) {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(defaultSymbol), {
            portal,
            symbolFilter: !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                stroke: {
                    type: "color",
                    open: true,
                    suggestedColorsOpen: true,
                    suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        width: !sizeAutoVisVar,
                        autoStrokeAdjust: false
                    }
                }
            },
            stroke
        });
    }
    else {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(defaultSymbol), {
            portal,
            symbolFilter: isPolygon && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                marker: isPointCIM || ["simple-marker", "picture-marker"].indexOf(defaultSymbol.type) > -1
                    ? {
                        open: true,
                        parts: {
                            size: !sizeAutoVisVar
                        },
                        symbolsOpen: true,
                        sizeOpen: true,
                        markerType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "all" : ["simple", "picture"]
                    }
                    : undefined,
                fill: {
                    type: "color",
                    open: true,
                    optional: true,
                    suggestedColorsOpen: true,
                    suggestedColors: suggestedFillColors
                },
                stroke: {
                    type: "color",
                    optional: true,
                    suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        style: ["simple-marker", "picture-marker", "cim"].indexOf(defaultSymbol.type) === -1,
                        width: true,
                        autoStrokeAdjust: false
                    }
                }
            },
            fill: {
                color: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(defaultSymbol) || new modules.esriColor([128, 128, 128])
            },
            marker: isPoint
                ? {
                    size: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(defaultSymbol)
                }
                : undefined,
            stroke,
            fillEnabled,
            strokeEnabled
        });
    }
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
}
async function buildSymbolStylerForClassed(options) {
    var _a, _b;
    const { layer, mapImageSublayer, mapView, classedSymbolSelectedIdx, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode } = options;
    const isPoint = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.A)(layer);
    const isLine = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.B)(layer);
    const isPolygon = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer);
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "auto");
    const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
    // it takes the first symbol as a reference
    let symbol = ((_a = renderer.classBreakInfos) === null || _a === void 0 ? void 0 : _a.length)
        ? modules.esriLang.clone(renderer.classBreakInfos[classedSymbolSelectedIdx].symbol)
        : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    if (!isSupportedSymbol(symbol)) {
        symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    }
    // ensure initial size is correct on the symbol styler
    if (sizeAutoVisVar) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, getSizeByScale(sizeAutoVisVar, mapView.scale));
    }
    const fillEnabled = symbol.type === "picture-marker" ? false : !!symbol.color;
    const strokeEnabled = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a5)(symbol);
    const isPointCIM = symbol.type === "cim" && symbol.data.symbol.type === "CIMPointSymbol";
    const suggestedFillColors = getAllColors();
    const suggestedStrokeColors = getAllColorsReversed();
    const onStylerEdit = ({ detail: { symbol, info: { marker, stroke /* , fill */ } } }) => {
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        const infos = renderer.classBreakInfos.slice();
        const info = infos[classedSymbolSelectedIdx];
        const size = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(info.symbol);
        info.symbol = symbol;
        renderer.classBreakInfos = infos;
        if (rendererType === "size") {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(info.symbol, size);
            onChange();
        }
        else {
            updateAutoVisVar(symbol, marker === null || marker === void 0 ? void 0 : marker.autoAdjusted, stroke === null || stroke === void 0 ? void 0 : stroke.autoAdjusted, symbolStyler, options);
        }
    };
    let stroke;
    if (symbol.type === "simple-fill") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width,
                style: sym.outline.style,
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1,
                style: "solid",
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
    }
    else if (symbol.type === "simple-marker") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1
            };
        }
    }
    else if (symbol.type === "cim") {
        stroke = getCimLineProps(symbol);
    }
    else if (symbol.type === "simple-line") {
        const sym = symbol;
        stroke = {
            size: sym.width,
            style: sym.style,
            marker: sym.marker,
            color: sym.color ? sym.color : new modules.esriColor([0, 0, 0, 0.5])
        };
    }
    else {
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: 1
        };
    }
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    let edit;
    if (isLine) {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                stroke: {
                    type: "color",
                    open: true,
                    suggestedColorsOpen: true,
                    suggestedColors: suggestedFillColors,
                    extraParts: {
                        style: symbol.type !== "cim",
                        arrow: symbol.type !== "cim",
                        width: rendererType !== "size",
                        autoStrokeAdjust: !mapImageSublayer && rendererType !== "size" ? "editable" : false
                    },
                    parts: {
                        extra: (rendererType !== "size" && !sizeAutoVisVar) || symbol.type !== "cim"
                    }
                }
            },
            stroke
        });
    }
    else {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: isPolygon && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                marker: isPointCIM || ["simple-marker", "picture-marker"].indexOf(symbol.type) > -1
                    ? {
                        open: true,
                        parts: {
                            size: rendererType !== "size" ? (mapImageSublayer ? true : { autoSizeAdjust: "editable" }) : false
                        },
                        symbolsOpen: true,
                        sizeOpen: rendererType !== "size",
                        markerType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "all" : ["simple", "picture"]
                    }
                    : undefined,
                fill: {
                    type: "color",
                    open: true,
                    optional: true,
                    suggestedColorsOpen: true,
                    transparencyOpen: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a6)(symbol),
                    suggestedColors: suggestedFillColors
                },
                stroke: {
                    type: "color",
                    optional: true,
                    suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        style: ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) === -1,
                        width: true,
                        autoStrokeAdjust: !mapImageSublayer && isPolygon && symbol.type !== "cim" && rendererType !== "size" ? "editable" : false
                    }
                }
            },
            fill: {
                color: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(symbol) || adjustAlpha(suggestedFillColors[1], 0.85)
            },
            marker: isPoint
                ? {
                    size: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol),
                    autoAdjusted: !!sizeAutoVisVar
                }
                : undefined,
            stroke,
            fillEnabled,
            strokeEnabled
        });
    }
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
    if (rendererType !== "size") {
        return createWatchScaleHandle(((_b = renderer.classBreakInfos) === null || _b === void 0 ? void 0 : _b.length) ? renderer.classBreakInfos[0].symbol : undefined, symbolStyler);
    }
}
async function buildSymbolStylerForColorSizeAbove(options) {
    await buildSymbolStylerForColorSize(Object.assign(Object.assign({}, options), { type: "above" }));
}
async function buildSymbolStylerForColorSizeBelow(options) {
    await buildSymbolStylerForColorSize(Object.assign(Object.assign({}, options), { type: "below" }));
}
async function buildSymbolStylerForColorSize(options) {
    var _a, _b;
    const { layer, mapView, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode } = options;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
    const isAbove = options.type === "above";
    let symbol = ((_b = (_a = renderer.classBreakInfos) === null || _a === void 0 ? void 0 : _a[isAbove ? 1 : 0]) === null || _b === void 0 ? void 0 : _b.symbol) || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, "color-size");
    if (!isSupportedSymbol(symbol)) {
        symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, "color-size");
    }
    const fillEnabled = symbol.type === "picture-marker" ? false : !!symbol.color;
    const strokeEnabled = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a5)(symbol);
    // TODO get current scheme
    const suggestedFillColors = getAllColors();
    const suggestedStrokeColors = symbol.type === "simple-line" ? getAllColors() : getAllColorsReversed();
    const onStylerEdit = ({ detail: { symbol /* ,
    info: { marker, stroke, fill } */ } }) => {
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        renderer.authoringInfo.univariateSymbolStyle = "custom";
        const infos = renderer.classBreakInfos.slice();
        const info = infos[isAbove ? 1 : 0];
        info.symbol = symbol;
        renderer.classBreakInfos = infos;
        onChange();
    };
    let stroke;
    if (symbol.type === "simple-marker") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1
            };
        }
    }
    else if (symbol.type === "simple-line") {
        const sym = symbol;
        stroke = {
            color: sym.color,
            size: sym.width,
            style: sym.style,
            marker: sym.marker
        };
    }
    else if (symbol.type === "cim") {
        stroke = getCimLineProps(symbol);
    }
    else {
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: 1
        };
    }
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    const edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
        portal,
        sections: {
            marker: colorVisVar && ["simple-marker", "cim"].indexOf(symbol.type) > -1
                ? {
                    open: true,
                    parts: {
                        size: false
                    },
                    symbolsOpen: true,
                    sizeOpen: false,
                    markerType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? ["simple", "cim:vector"] : ["simple"]
                }
                : !colorVisVar && ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) > -1
                    ? {
                        open: true,
                        parts: {
                            size: false
                        },
                        symbolsOpen: true,
                        sizeOpen: false
                    }
                    : undefined,
            fill: !colorVisVar
                ? {
                    type: "color",
                    open: true,
                    optional: true,
                    suggestedColorsOpen: true,
                    transparencyOpen: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a6)(symbol),
                    suggestedColors: suggestedFillColors
                }
                : undefined,
            stroke: !colorVisVar
                ? {
                    type: "color",
                    optional: true,
                    suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        style: ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) === -1,
                        width: true,
                        autoStrokeAdjust: false
                    }
                }
                : undefined
        },
        fill: !colorVisVar
            ? {
                color: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(symbol) || adjustAlpha(suggestedFillColors[1], 0.85)
            }
            : undefined,
        marker: {
            size: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol)
        },
        stroke,
        fillEnabled,
        strokeEnabled
    });
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
}
async function buildSymbolStylerForSimple(options) {
    const { layer, mapImageSublayer, mapView, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { /* onChange, */ popoverNode } = options;
    const isOGCLayer = layer.type === "ogc-feature";
    const isPoint = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.A)(layer);
    const isLine = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.B)(layer);
    const isPolygon = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer);
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "auto");
    const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
    let symbol = renderer.symbol;
    if (!isSupportedSymbol(symbol)) {
        symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView);
    }
    const fillEnabled = symbol.type === "picture-marker" ? false : !!symbol.color;
    const strokeEnabled = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a5)(symbol);
    const isPointCIM = symbol.type === "cim" && symbol.data.symbol.type === "CIMPointSymbol";
    const suggestedFillColors = getAllColors();
    const suggestedStrokeColors = symbol.type === "simple-line" ? getAllColors() : getAllColorsReversed();
    const onStylerEdit = ({ detail: { symbol, info: { marker, stroke /* , fill */ } } }) => {
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        renderer.symbol = symbol;
        updateAutoVisVar(symbol, marker === null || marker === void 0 ? void 0 : marker.autoAdjusted, stroke === null || stroke === void 0 ? void 0 : stroke.autoAdjusted, symbolStyler, options);
    };
    let stroke;
    if (symbol.type === "simple-fill") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width,
                style: sym.outline.style,
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1,
                style: "solid"
            };
        }
    }
    else if (symbol.type === "simple-marker") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1
            };
        }
    }
    else if (symbol.type === "simple-line") {
        const sym = symbol;
        stroke = {
            color: sym.color,
            size: sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : sym.width,
            style: sym.style,
            marker: sym.marker,
            autoAdjusted: !!sizeAutoVisVar
        };
    }
    else if (symbol.type === "cim") {
        stroke = getCimLineProps(symbol);
        if (isLine) {
            (stroke.size = sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : stroke.size),
                (stroke.autoAdjusted = !!sizeAutoVisVar);
            if (sizeAutoVisVar) {
                // adjusts symbol so all symbol layers fit
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, stroke.size);
            }
        }
    }
    else {
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: 1
        };
    }
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    let edit;
    if (isLine) {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                stroke: {
                    type: "color",
                    optional: symbol.type === "cim",
                    open: true,
                    suggestedColorsOpen: true,
                    suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        style: symbol.type !== "cim",
                        arrow: symbol.type !== "cim",
                        width: true,
                        autoStrokeAdjust: isOGCLayer || mapImageSublayer ? false : "editable"
                    }
                }
            },
            stroke
        });
    }
    else {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: isPolygon && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                marker: isPointCIM || ["simple-marker", "picture-marker"].indexOf(symbol.type) > -1
                    ? {
                        open: true,
                        symbolsOpen: true,
                        sizeOpen: true,
                        parts: {
                            size: { autoSizeAdjust: isOGCLayer || mapImageSublayer ? false : "editable" }
                        },
                        markerType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "all" : ["simple", "picture"]
                    }
                    : undefined,
                fill: {
                    type: "color",
                    optional: true,
                    open: true,
                    suggestedColorsOpen: true,
                    transparencyOpen: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a6)(symbol),
                    suggestedColors: suggestedFillColors
                },
                stroke: {
                    type: "color",
                    optional: true,
                    suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        style: ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) === -1,
                        width: true,
                        autoStrokeAdjust: !isOGCLayer && !mapImageSublayer && isPolygon && symbol.type !== "cim" ? "editable" : false
                    }
                }
            },
            fill: {
                color: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(symbol) || adjustAlpha(suggestedFillColors[1], 0.85)
            },
            marker: isPoint
                ? {
                    size: sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol),
                    autoAdjusted: !mapImageSublayer && !!sizeAutoVisVar
                }
                : undefined,
            stroke,
            fillEnabled,
            strokeEnabled
        });
    }
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
    return createWatchScaleHandle(renderer.symbol, symbolStyler);
}
async function buildSymbolStylerForGeoRSS(type, options) {
    const { layer, mapView, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode } = options;
    const geoRSSLayer = layer;
    const isPoint = type === "point";
    const isLine = type === "line";
    //const isPolygon = type === "polygon";
    let symbol = isPoint ? geoRSSLayer.pointSymbol : isLine ? geoRSSLayer.lineSymbol : geoRSSLayer.polygonSymbol;
    if (!isSupportedSymbol(symbol)) {
        symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ah)(mapView, type);
    }
    const fillEnabled = symbol.type === "picture-marker" ? false : !!symbol.color;
    const strokeEnabled = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a5)(symbol);
    const suggestedFillColors = getAllColors();
    const suggestedStrokeColors = symbol.type === "simple-line" ? getAllColors() : getAllColorsReversed();
    const onStylerEdit = ({ detail: { symbol /* ,
    info: { marker, stroke, fill } */ } }) => {
        if (isPoint) {
            geoRSSLayer.pointSymbol = symbol;
        }
        else if (isLine) {
            geoRSSLayer.lineSymbol = symbol;
        }
        else {
            geoRSSLayer.polygonSymbol = symbol;
        }
        onChange();
    };
    let stroke;
    if (symbol.type === "simple-fill") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width,
                style: sym.outline.style,
                autoAdjusted: false
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1,
                style: "solid"
            };
        }
    }
    else if (symbol.type === "simple-marker") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1
            };
        }
    }
    else if (symbol.type === "simple-line") {
        const sym = symbol;
        stroke = {
            color: sym.color,
            size: sym.width,
            style: sym.style,
            marker: sym.marker,
            autoAdjusted: false
        };
        //} else if (symbol.type === "cim") {
        //  stroke = getCimLineProps(symbol);
    }
    else {
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: 1
        };
    }
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    let edit;
    if (isLine) {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            sections: {
                stroke: {
                    type: "color",
                    open: true,
                    suggestedColorsOpen: true,
                    suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        width: true,
                        autoStrokeAdjust: false
                    }
                }
            },
            stroke
        });
    }
    else {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            sections: {
                marker: ["simple-marker", "picture-marker"].indexOf(symbol.type) > -1
                    ? {
                        open: true,
                        symbolsOpen: true,
                        sizeOpen: true,
                        markerType: ["simple", "picture"]
                    }
                    : undefined,
                fill: {
                    type: "color",
                    optional: true,
                    open: true,
                    suggestedColorsOpen: true,
                    transparencyOpen: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a6)(symbol),
                    suggestedColors: suggestedFillColors
                },
                stroke: {
                    type: "color",
                    optional: true,
                    suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        style: ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) === -1,
                        width: true,
                        autoStrokeAdjust: false
                    }
                }
            },
            fill: {
                color: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(symbol) || adjustAlpha(suggestedFillColors[1], 0.85)
            },
            marker: isPoint
                ? {
                    size: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol),
                    autoAdjusted: false
                }
                : undefined,
            stroke,
            fillEnabled,
            strokeEnabled
        });
    }
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
}
async function buildSymbolStylerForSize(options) {
    var _a, _b;
    const { layer, mapView, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode } = options;
    const isLine = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.B)(layer);
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
    const isBivariatRenderer = ["type-size", "type-size-age", "predominance-size", "relationship-size"].indexOf(rendererType) > -1;
    let symbol;
    if (isBivariatRenderer) {
        const uvRenderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        symbol = ((_a = uvRenderer.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a.length)
            ? uvRenderer.uniqueValueInfos[0].symbol
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    }
    else {
        symbol = ((_b = renderer.classBreakInfos) === null || _b === void 0 ? void 0 : _b.length)
            ? renderer.classBreakInfos[0].symbol
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    }
    if (!isSupportedSymbol(symbol)) {
        symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    }
    const fillEnabled = symbol.type === "picture-marker" ? false : !!symbol.color;
    const strokeEnabled = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a5)(symbol);
    const isPointCIM = symbol.type === "cim" && symbol.data.symbol.type === "CIMPointSymbol";
    // TODO get current scheme
    const suggestedFillColors = getAllColors();
    const suggestedStrokeColors = symbol.type === "simple-line" ? getAllColors() : getAllColorsReversed();
    const onStylerEdit = ({ detail: { symbol /* ,
    info: { marker, stroke, fill } */ } }) => {
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        if (renderer.classBreakInfos) {
            let infos = renderer.classBreakInfos;
            if (!infos || !infos.length) {
                // we have no place to save those changes
                return;
            }
            // make a copy so modules.esriLang.clone() works later
            infos = infos.slice();
            infos.forEach((info) => {
                const size = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(info.symbol);
                const color = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(info.symbol);
                info.symbol = symbol.clone();
                if (colorVisVar) {
                    // we want the only break symbol to always be grey
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(info.symbol, new modules.esriColor([0, 0, 0, 0.5]));
                }
                else if (renderer.uniqueValueInfos) {
                    // we want to keep the old color
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(info.symbol, color);
                }
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(info.symbol, size);
            });
            renderer.classBreakInfos = infos;
        }
        else {
            let groups = renderer.uniqueValueGroups;
            if (!groups || !groups.length || !groups[0].classes || !groups[0].classes.length) {
                // we have no place to save those changes
                return;
            }
            // make a copy so modules.esriLang.clone() works later
            groups = groups.slice();
            groups.forEach((group) => {
                group.classes.forEach((uniqueValueClass) => {
                    const size = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(uniqueValueClass.symbol);
                    const color = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(uniqueValueClass.symbol);
                    uniqueValueClass.symbol = symbol.clone();
                    if (colorVisVar) {
                        // we want the only break symbol to always be grey
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(uniqueValueClass.symbol, new modules.esriColor([0, 0, 0, 0.5]));
                    }
                    else {
                        // we want to keep the old color
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(uniqueValueClass.symbol, color);
                    }
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(uniqueValueClass.symbol, size);
                });
            });
            renderer.uniqueValueGroups = groups;
        }
        onChange();
    };
    let stroke;
    if (symbol.type === "simple-fill") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width,
                style: sym.outline.style
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1,
                style: "solid"
            };
        }
    }
    else if (symbol.type === "simple-marker") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1
            };
        }
    }
    else if (symbol.type === "simple-line") {
        const sym = symbol;
        stroke = {
            color: sym.color,
            size: sym.width,
            style: sym.style,
            marker: sym.marker
        };
    }
    else if (symbol.type === "cim") {
        stroke = getCimLineProps(symbol);
    }
    else {
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: 1
        };
    }
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    let edit;
    if ([
        "color-size",
        "color-age-size",
        "color-size-age",
        "type-size",
        "type-size-age",
        "predominance-size",
        "relationship-size"
    ].indexOf((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)()) > -1) {
        // no changes to color
        if (isLine) {
            // no changes to line width
            // TODO need to hide 2 color subsections
            edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
                portal,
                symbolFilter: !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
                sections: {
                    stroke: {
                        type: "color",
                        open: true,
                        extraOpen: true,
                        extraParts: {
                            style: symbol.type !== "cim",
                            arrow: symbol.type !== "cim",
                            width: false,
                            autoStrokeAdjust: false
                        },
                        suggestedColors: suggestedStrokeColors,
                        parts: {
                            suggestedColors: false,
                            customColor: false,
                            transparency: true,
                            extra: symbol.type !== "cim"
                        }
                    }
                },
                stroke
            });
        }
        else {
            edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
                portal,
                sections: {
                    marker: isPointCIM || ["simple-marker", "picture-marker"].indexOf(symbol.type) > -1
                        ? {
                            open: true,
                            parts: {
                                size: false
                            },
                            symbolsOpen: true,
                            sizeOpen: false,
                            markerType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? ["simple", "cim:vector"] : ["simple"]
                        }
                        : undefined,
                    stroke: {
                        type: "color",
                        open: true,
                        optional: true,
                        suggestedColors: suggestedStrokeColors,
                        extraParts: {
                            style: ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) === -1,
                            width: true,
                            autoStrokeAdjust: false
                        }
                    }
                },
                marker: {
                    size: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol)
                },
                stroke,
                strokeEnabled
            });
        }
    }
    else {
        if (isLine) {
            edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
                portal,
                symbolFilter: !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
                sections: {
                    stroke: {
                        type: "color",
                        open: true,
                        extraParts: {
                            style: symbol.type !== "cim",
                            arrow: symbol.type !== "cim",
                            width: false,
                            autoStrokeAdjust: false
                        },
                        suggestedColorsOpen: true,
                        suggestedColors: suggestedStrokeColors,
                        parts: {
                            extra: symbol.type !== "cim"
                        }
                    }
                },
                stroke
            });
        }
        else {
            // rendererType === "size"
            edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
                portal,
                sections: {
                    marker: isPointCIM || ["simple-marker", "picture-marker"].indexOf(symbol.type) > -1
                        ? {
                            open: true,
                            parts: {
                                size: false
                            },
                            symbolsOpen: true,
                            sizeOpen: false,
                            markerType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "all" : ["simple", "picture"]
                        }
                        : undefined,
                    fill: {
                        type: "color",
                        open: true,
                        optional: true,
                        suggestedColorsOpen: true,
                        transparencyOpen: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a6)(symbol),
                        suggestedColors: suggestedFillColors
                    },
                    stroke: {
                        type: "color",
                        optional: true,
                        suggestedColors: suggestedStrokeColors,
                        extraParts: {
                            style: ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) === -1,
                            width: true,
                            autoStrokeAdjust: false
                        }
                    }
                },
                fill: {
                    color: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(symbol) || adjustAlpha(suggestedFillColors[1], 0.85)
                },
                marker: {
                    size: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol)
                },
                stroke,
                fillEnabled,
                strokeEnabled
            });
        }
    }
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
}
async function buildSymbolStylerForColorRamp(options) {
    var _a, _b, _c, _d;
    const { layer, mapImageSublayer, mapView, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode } = options;
    const isPoint = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.A)(layer);
    const isLine = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.B)(layer);
    const isPolygon = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer);
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo;
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const isUnivariate = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.type) === "univariate-color-size";
    const isAboveAndBelow = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) === "above-and-below";
    // e.g. line layers don't support symbol pairs for univariate above-and-below
    const isAboveAndBelowSingle = isAboveAndBelow && !authInfo.univariateSymbolStyle;
    const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "color");
    const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "auto");
    const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
    const isColorSize = ["color-size", "color-age-size", "color-size-age"].indexOf(rendererType) > -1;
    const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "color");
    let currentColors = colorVisVar
        ? colorVisVar.stops.map((stop) => stop.color)
        : renderer.classBreakInfos.map((classBreakInfo) => { var _a; return ((_a = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(classBreakInfo.symbol)) === null || _a === void 0 ? void 0 : _a.clone()) || new modules.esriColor([0, 0, 0, 0]); });
    if (currentColors.length > 10) {
        // some ramps have only 10 colors
        currentColors = currentColors.slice(0, 10);
    }
    currentColors.reverse();
    let lastSymbol;
    let symbol = ((_a = renderer.classBreakInfos) === null || _a === void 0 ? void 0 : _a.length) ? renderer.classBreakInfos[0].symbol : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView);
    if (!isSupportedSymbol(symbol) || ((!isAboveAndBelow || isAboveAndBelowSingle) && !isColoredSymbol(symbol))) {
        const size = (_b = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol)) !== null && _b !== void 0 ? _b : symbol.width;
        symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, size);
    }
    const fillEnabled = isAboveAndBelow &&
        !colorVisVar &&
        symbol.type === "picture-marker" &&
        ((_c = renderer.classBreakInfos[1].symbol) === null || _c === void 0 ? void 0 : _c.type) === "picture-marker"
        ? false
        : true;
    const strokeEnabled = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a5)(symbol);
    const isPointCIM = symbol.type === "cim" && symbol.data.symbol.type === "CIMPointSymbol";
    const basemapTheme = (await modules.colorUtils.getBackgroundColorTheme(mapView));
    const schemes = modules.colorSchemes.getSchemes({
        basemapTheme,
        geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.D)(layer) || defaultGeometry,
        theme: (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) || (authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.theme) || "high-to-low"
    });
    if (!colorVisVar) {
        // classed
        const moreSchemes = modules.colorSchemes.getSchemes({
            basemap: mapView.map.basemap || "topo",
            geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.D)(layer) || defaultGeometry,
            theme: "above-and-below"
        });
        schemes.secondarySchemes.push(moreSchemes.primaryScheme);
        schemes.secondarySchemes = schemes.secondarySchemes.concat(moreSchemes.secondarySchemes);
    }
    // TODO get current scheme
    const num = colorVisVar ? 0 : renderer.classBreakInfos.length;
    let colorRampsAndSchemes = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a9)(schemes, num);
    // might happen for classed ramps
    colorRampsAndSchemes = colorRampsAndSchemes.filter((obj) => { var _a; return (_a = obj.colors) === null || _a === void 0 ? void 0 : _a.length; });
    const colorRamps = colorRampsAndSchemes.map((obj) => {
        // flip ramps
        return {
            stops: obj.colors.reverse(),
            tags: obj.scheme.tags,
            name: obj.scheme.name
        };
    });
    const suggestedStrokeColors = getAllColorsReversed();
    const onStylerEdit = ({ detail: { symbol, info: { marker, stroke, fill } } }) => {
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
        let colors = modules.esriLang.clone((fill || stroke).color);
        // currentColors could have more custom colors than the ramp from styler
        const color0 = currentColors[0];
        const hasColorRampChange = currentColors.length !== colors.length ||
            currentColors.some((color, idx) => color.r !== colors[idx].r || color.g !== colors[idx].g || color.b !== colors[idx].b) ||
            color0.r !== colors[0].r ||
            color0.g !== colors[0].g ||
            color0.b !== colors[0].b;
        const hasAlphaChange = color0.a !== colors[0].a;
        const newAlpha = colors[0].a;
        const symbolChangeInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.am)(symbol, lastSymbol);
        if (hasColorRampChange && !symbolChangeInfo.any) {
            symbolChangeInfo.any = true;
            symbolChangeInfo.color = true;
        }
        if (!isUnivariate || !isAboveAndBelow) {
            colors.reverse();
        }
        if (!isAboveAndBelow || isAboveAndBelowSingle) {
            if (symbolChangeInfo.any) {
                const infos = renderer.classBreakInfos.slice();
                infos.forEach((classBreakInfo, idx) => {
                    classBreakInfo.symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.an)(classBreakInfo.symbol, symbol, hasColorRampChange && !colorVisVar
                        ? colors[idx % colors.length]
                        : hasAlphaChange && !colorVisVar
                            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ao)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(classBreakInfo.symbol), newAlpha)
                            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(classBreakInfo.symbol) || new modules.esriColor([0, 0, 0, 0]), symbolChangeInfo);
                });
                renderer.classBreakInfos = infos;
            } // else maybe just an auto size change
        }
        else if (!colorVisVar) {
            // styler does not show marker options
            colors.reverse();
            const infos = renderer.classBreakInfos.slice();
            infos.forEach((classBreakInfo, idx) => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(classBreakInfo.symbol, colors[idx]);
            });
            renderer.classBreakInfos = infos;
        }
        if (colorVisVar) {
            if (currentColors.length !== colors.length && colors.length === 5) {
                // just pick 5 stops
                const len = colorVisVar.stops.length;
                const newStops = [];
                newStops[0] = colorVisVar.stops[0];
                newStops[1] = colorVisVar.stops[Math.floor(len / 4)];
                newStops[2] = colorVisVar.stops[Math.floor(len / 2)];
                newStops[3] = colorVisVar.stops[len - Math.ceil(len / 4)];
                newStops[4] = colorVisVar.stops[len - 1];
                colorVisVar.stops = newStops;
            }
            colorVisVar.stops.forEach((stop, idx) => {
                stop.color = colors[idx];
            });
            const infos = renderer.classBreakInfos.slice();
            // we want the only break symbol to always be grey
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(infos[0].symbol, new modules.esriColor([170, 170, 170, 1]));
            renderer.classBreakInfos = infos;
        }
        if (!isColorSize) {
            updateAutoVisVar(symbol, marker === null || marker === void 0 ? void 0 : marker.autoAdjusted, stroke === null || stroke === void 0 ? void 0 : stroke.autoAdjusted, symbolStyler, options);
        }
        else {
            onChange();
        }
        lastSymbol = symbol.clone();
        currentColors = colorVisVar
            ? colorVisVar.stops.map((stop) => stop.color)
            : renderer.classBreakInfos
                .map((classBreakInfo) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(classBreakInfo.symbol) || new modules.esriColor([0, 0, 0, 0]))
                .reverse();
    };
    let stroke;
    if (symbol.type === "simple-fill") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width,
                style: sym.outline.style,
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1,
                style: "solid",
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
    }
    else if (symbol.type === "simple-marker") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1
            };
        }
    }
    else if (symbol.type === "cim") {
        stroke = getCimLineProps(symbol);
        if (isLine) {
            (stroke.size = sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : stroke.size),
                (stroke.autoAdjusted = !!sizeAutoVisVar);
            if (sizeAutoVisVar) {
                // adjusts symbol so all symbol layers fit
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, stroke.size);
            }
        }
    }
    else if (symbol.type === "simple-line") {
        const sym = symbol;
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : sym.width,
            style: sym.style,
            marker: sym.marker,
            autoAdjusted: !!sizeAutoVisVar
        };
    }
    else {
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: 1
        };
    }
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    let edit;
    // apply a few settings to the symbol we pass to the styler
    // so when comparing changes it's correct
    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(symbol, currentColors[currentColors.length - 1]);
    if ((isColorSize || isPoint || isLine) && sizeAutoVisVar) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, getSizeByScale(sizeAutoVisVar, mapView.scale));
    }
    else if (isPolygon && sizeAutoVisVar && symbol.outline) {
        symbol.outline.width = getSizeByScale(sizeAutoVisVar, mapView.scale);
    }
    lastSymbol = symbol.clone();
    if (isLine) {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                stroke: {
                    type: "color-ramp",
                    style: colorVisVar ? "continuous" : "discrete",
                    colorRamps: colorRamps,
                    open: true,
                    colorRampsOpen: true,
                    extraParts: {
                        style: symbol.type !== "cim",
                        arrow: symbol.type !== "cim",
                        autoStrokeAdjust: !mapImageSublayer && !isColorSize ? "editable" : false,
                        width: !isColorSize
                    },
                    parts: {
                        extra: !isColorSize || symbol.type !== "cim"
                    }
                }
            },
            stroke: Object.assign(Object.assign({}, stroke), { color: currentColors })
        });
    }
    else {
        edit = symbolStylerEdit(symbolStyler, !isAboveAndBelow || isAboveAndBelowSingle /* && (isColorSize || isPoint) */
            ? modules.esriLang.clone(symbol)
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView), {
            portal,
            symbolFilter: isPolygon && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                marker: (!isAboveAndBelow || isAboveAndBelowSingle) &&
                    (isPointCIM || ["simple-marker", "picture-marker"].indexOf(symbol.type) > -1)
                    ? {
                        open: true,
                        parts: {
                            size: !isColorSize ? (mapImageSublayer ? true : { autoSizeAdjust: "editable" }) : false
                        },
                        symbolsOpen: true,
                        sizeOpen: !isColorSize,
                        markerType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? ["simple", "cim:vector"] : ["simple"]
                    }
                    : isAboveAndBelow && !isAboveAndBelowSingle
                        ? {
                            parts: {
                                preview: false,
                                rotation: false,
                                size: false
                            }
                        }
                        : undefined,
                fill: {
                    type: "color-ramp",
                    style: colorVisVar ? "continuous" : "discrete",
                    open: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ai)(symbol) ? false : true,
                    colorRampsOpen: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ai)(symbol) ? false : true,
                    colorRamps
                },
                stroke: !isAboveAndBelow || isAboveAndBelowSingle
                    ? {
                        type: "color",
                        optional: true,
                        open: false,
                        //open: isLineMarker(symbol) ? true : false, we need the ramps there...
                        suggestedColors: suggestedStrokeColors,
                        //suggestedColorsOpen: isLineMarker(symbol) ? true : false, we need the ramps there...
                        extraParts: {
                            style: ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) === -1,
                            width: true,
                            autoStrokeAdjust: !mapImageSublayer && isPolygon && symbol.type !== "cim" && !isColorSize ? "editable" : false
                        }
                    }
                    : undefined
            },
            fill: {
                color: currentColors
            },
            marker: (!isAboveAndBelow || isAboveAndBelowSingle) && (isColorSize || isPoint)
                ? {
                    size: sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol),
                    autoAdjusted: !!sizeAutoVisVar
                }
                : undefined,
            stroke,
            strokeEnabled,
            fillEnabled // if false it doesn't seem to do anything
        });
    }
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
    return createWatchScaleHandle(((_d = renderer.classBreakInfos) === null || _d === void 0 ? void 0 : _d.length) ? renderer.classBreakInfos[0].symbol : undefined, symbolStyler, (newSize) => {
        isPolygon && symbol.outline ? (symbol.outline.width = newSize) : !isPolygon && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, newSize);
        lastSymbol = symbol.clone();
    });
}
async function buildSymbolStylerForTypeRamp(options) {
    var _a, _b, _c, _d, _e;
    const { layer, mapImageSublayer, mapView, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode } = options;
    const isPoint = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.A)(layer);
    const isLine = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.B)(layer);
    const isPolygon = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer);
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const isTypeSize = ["type-size", "type-size-age"].indexOf(rendererType) > -1;
    const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "auto");
    const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
    const uniqueValueGroups = renderer.uniqueValueGroups;
    let lastSymbol;
    let currentColors = [];
    const lastGroup = uniqueValueGroups.length ? uniqueValueGroups[uniqueValueGroups.length - 1] : undefined;
    let alpha = (((_a = lastGroup === null || lastGroup === void 0 ? void 0 : lastGroup.classes) === null || _a === void 0 ? void 0 : _a.length) && ((_b = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(lastGroup.classes[lastGroup.classes.length - 1].symbol)) === null || _b === void 0 ? void 0 : _b.a)) || 1;
    uniqueValueGroups.forEach((group) => (currentColors = currentColors.concat(group.classes.map((uniqueValueClass) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(uniqueValueClass.symbol) || new modules.esriColor([0, 0, 0, alpha]) // TODO panel displays color from default ramp, not black
    ))));
    currentColors.reverse();
    if (currentColors.length > 10) {
        // some ramps have only 10 colors
        currentColors = currentColors.slice(0, 10);
    }
    const schemes = modules.typeSchemes.getSchemes({
        basemap: mapView.map.basemap,
        geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.D)(layer) || defaultGeometry
    });
    // it takes the first symbol as a reference
    let symbol = ((_c = renderer.uniqueValueGroups) === null || _c === void 0 ? void 0 : _c.length) && renderer.uniqueValueGroups[0].classes.length
        ? modules.esriLang.clone(renderer.uniqueValueGroups[0].classes[0].symbol)
        : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    if (!isColoredSymbol(symbol)) {
        const size = (_d = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol)) !== null && _d !== void 0 ? _d : symbol.width;
        symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, size);
    }
    const strokeEnabled = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a5)(symbol);
    const isPointCIM = symbol.type === "cim" && symbol.data.symbol.type === "CIMPointSymbol";
    // TODO get current scheme
    let numClasses = 0;
    uniqueValueGroups.forEach((group) => (numClasses += group.classes.length));
    const colorRampsAndSchemes = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a9)(schemes, Math.min(numClasses, 10));
    const colorRamps = colorRampsAndSchemes.map((obj) => {
        return {
            stops: obj.colors.reverse(),
            tags: obj.scheme.tags,
            name: obj.scheme.name
        };
    });
    const suggestedStrokeColors = getAllColorsReversed();
    const onStylerEdit = ({ detail: { symbol, info: { marker, stroke, fill } } }) => {
        const colors = modules.esriLang.clone((fill || stroke).color);
        // currentColors could have more custom colors than the ramp from styler
        const color0 = currentColors[0];
        const hasColorRampChange = currentColors.length !== colors.length ||
            currentColors.some((color, idx) => color.r !== colors[idx].r || color.g !== colors[idx].g || color.b !== colors[idx].b) ||
            color0.r !== colors[0].r ||
            color0.g !== colors[0].g ||
            color0.b !== colors[0].b;
        const hasAlphaChange = color0.a !== colors[0].a;
        const newAlpha = colors[0].a;
        colors.reverse();
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        const symbolChangeInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.am)(symbol, lastSymbol);
        if (hasColorRampChange && !symbolChangeInfo.any) {
            symbolChangeInfo.any = true;
            symbolChangeInfo.color = true;
        }
        if (symbolChangeInfo.any) {
            const groups = renderer.uniqueValueGroups.slice();
            let countPrevClasses = 0;
            groups.forEach((uniqueValueGroup) => {
                uniqueValueGroup.classes.forEach((uniqueValueClass, classIdx) => {
                    if (uniqueValueClass.symbol.type === "picture-marker" && (hasColorRampChange || hasAlphaChange)) {
                        uniqueValueClass.symbol = modules.esriLang.clone(symbol);
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(uniqueValueClass.symbol, colors[(countPrevClasses + classIdx) % colors.length]);
                    }
                    uniqueValueClass.symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.an)(uniqueValueClass.symbol, symbol, hasColorRampChange
                        ? colors[(countPrevClasses + classIdx) % colors.length]
                        : hasAlphaChange
                            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ao)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(uniqueValueClass.symbol), newAlpha)
                            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(uniqueValueClass.symbol) || new modules.esriColor([0, 0, 0, 0]), symbolChangeInfo);
                });
                countPrevClasses += uniqueValueGroup.classes.length;
            });
            renderer.uniqueValueGroups = groups;
        } // else maybe just an auto size change
        if (!isTypeSize) {
            updateAutoVisVar(symbol, marker === null || marker === void 0 ? void 0 : marker.autoAdjusted, stroke === null || stroke === void 0 ? void 0 : stroke.autoAdjusted, symbolStyler, options);
        }
        else {
            onChange();
        }
        lastSymbol = symbol.clone();
        if (hasColorRampChange) {
            currentColors = [];
            renderer.uniqueValueGroups.forEach((group) => (currentColors = currentColors.concat(group.classes.map((uniqueValueClass) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(uniqueValueClass.symbol) || new modules.esriColor([0, 0, 0, 0])))));
            currentColors.reverse();
            if (currentColors.length > 10) {
                // some ramps have only 10 colors
                currentColors = currentColors.slice(0, 10);
            }
        }
    };
    let stroke;
    if (symbol.type === "simple-fill") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width,
                style: sym.outline.style,
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1,
                style: "solid",
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
    }
    else if (symbol.type === "simple-marker") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1
            };
        }
    }
    else if (symbol.type === "cim") {
        stroke = getCimLineProps(symbol);
        if (isLine) {
            (stroke.size = sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : stroke.size),
                (stroke.autoAdjusted = !!sizeAutoVisVar);
            if (sizeAutoVisVar) {
                // adjusts symbol so all symbol layers fit
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, stroke.size);
            }
        }
    }
    else if (symbol.type === "simple-line") {
        const sym = symbol;
        stroke = {
            color: currentColors[currentColors.length - 1],
            size: sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : sym.width,
            style: sym.style,
            marker: sym.marker,
            autoAdjusted: !!sizeAutoVisVar
        };
    }
    else {
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: 1
        };
    }
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    let edit;
    // apply a few settings to the symbol we pass to the styler
    // so when comparing changes it's correct
    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(symbol, currentColors[currentColors.length - 1]);
    if ((isTypeSize || isPoint || isLine) && sizeAutoVisVar) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, getSizeByScale(sizeAutoVisVar, mapView.scale));
    }
    else if (isPolygon && sizeAutoVisVar && symbol.outline) {
        symbol.outline.width = getSizeByScale(sizeAutoVisVar, mapView.scale);
    }
    lastSymbol = symbol.clone();
    if (isLine) {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                stroke: {
                    type: "color-ramp",
                    style: "discrete",
                    open: true,
                    colorRampsOpen: true,
                    colorRamps,
                    //suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        style: symbol.type !== "cim",
                        arrow: symbol.type !== "cim",
                        autoStrokeAdjust: !mapImageSublayer && !isTypeSize ? "editable" : false,
                        width: !isTypeSize
                    },
                    parts: {
                        extra: !isTypeSize || symbol.type !== "cim"
                    }
                }
            },
            stroke: Object.assign(Object.assign({}, stroke), { color: currentColors })
        });
    }
    else {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: isPolygon && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                marker: isPointCIM || ["simple-marker", "picture-marker"].indexOf(symbol.type) > -1
                    ? {
                        open: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ai)(symbol) ? true : false,
                        parts: {
                            size: !isTypeSize ? (mapImageSublayer ? true : { autoSizeAdjust: "editable" }) : false
                        },
                        symbolsOpen: true,
                        sizeOpen: !isTypeSize,
                        markerType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? ["simple", "cim:vector"] : ["simple"]
                    }
                    : undefined,
                fill: {
                    type: "color-ramp",
                    style: "discrete",
                    open: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ai)(symbol) ? false : true,
                    colorRampsOpen: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ai)(symbol) ? false : true,
                    colorRamps
                },
                stroke: {
                    type: "color",
                    optional: true,
                    open: false,
                    suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        style: ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) === -1,
                        width: true,
                        autoStrokeAdjust: !mapImageSublayer && isPolygon && symbol.type !== "cim" && !isTypeSize ? "editable" : false
                    }
                }
            },
            fill: {
                color: currentColors
            },
            marker: isTypeSize || isPoint
                ? {
                    size: sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol),
                    autoAdjusted: !!sizeAutoVisVar
                }
                : undefined,
            stroke,
            strokeEnabled
        });
    }
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
    return createWatchScaleHandle(((_e = renderer.uniqueValueGroups) === null || _e === void 0 ? void 0 : _e.length) && renderer.uniqueValueGroups[0].classes.length
        ? renderer.uniqueValueGroups[0].classes[0].symbol
        : undefined, symbolStyler, (newSize) => {
        isPolygon && symbol.outline ? (symbol.outline.width = newSize) : !isPolygon && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, newSize);
        lastSymbol = symbol.clone();
    });
}
async function buildSymbolStylerForTypeGroup(options) {
    var _a;
    const { layer, mapView, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { groupIdx, onChange, popoverNode } = options;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const uniqueValueGroups = renderer.uniqueValueGroups;
    const group = uniqueValueGroups[groupIdx];
    let alpha = ((_a = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(group.classes[group.classes.length - 1].symbol)) === null || _a === void 0 ? void 0 : _a.a) || 1;
    let currentColors = group.classes.map((uniqueValueClass) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(uniqueValueClass.symbol) || new modules.esriColor([0, 0, 0, alpha]) // TODO panel displays color from default ramp, not black
    );
    currentColors.reverse();
    if (currentColors.length > 10) {
        // some ramps have only 10 colors
        currentColors = currentColors.slice(0, 10);
    }
    const basemapTheme = (await modules.colorUtils.getBackgroundColorTheme(mapView));
    const schemes = modules.typeSchemes.getSchemes({
        basemapTheme,
        geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.D)(layer) || defaultGeometry
    });
    const moreSchemes = modules.colorSchemes.getSchemes({
        basemapTheme,
        geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.D)(layer) || defaultGeometry,
        theme: "high-to-low"
    });
    // get moreScheme into the types format
    moreSchemes.primaryScheme.colors = moreSchemes.primaryScheme.colorsForClassBreaks[9].colors;
    moreSchemes.primaryScheme.colorsForClassBreaks = undefined;
    moreSchemes.secondarySchemes = moreSchemes.secondarySchemes.filter((scheme) => { var _a; return ((_a = scheme.colorsForClassBreaks) === null || _a === void 0 ? void 0 : _a.length) >= 10; });
    moreSchemes.secondarySchemes.forEach((scheme) => {
        scheme.colors = scheme.colorsForClassBreaks[9].colors;
        scheme.colorsForClassBreaks = undefined;
    });
    schemes.secondarySchemes.push(moreSchemes.primaryScheme);
    schemes.secondarySchemes = schemes.secondarySchemes.concat(moreSchemes.secondarySchemes);
    // TODO get current scheme
    let numClasses = group.classes.length;
    const colorRampsAndSchemes = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a9)(schemes, Math.min(numClasses, 10));
    const colorRamps = colorRampsAndSchemes.map((obj) => {
        return {
            stops: obj.colors.reverse(),
            tags: obj.scheme.tags,
            name: obj.scheme.name
        };
    });
    const onStylerEdit = ({ detail: { 
    //symbol,
    info: { fill } } }) => {
        const colors = modules.esriLang.clone(fill.color).reverse();
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
        const groups = renderer.uniqueValueGroups.slice();
        groups[groupIdx].classes.forEach((uniqueValueClass, classIdx) => {
            if (uniqueValueClass.symbol.type === "picture-marker") {
                // can't keep PMS
                uniqueValueClass.symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
            }
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(uniqueValueClass.symbol, colors[classIdx % colors.length]);
        });
        renderer.uniqueValueGroups = groups;
        onChange();
        currentColors = renderer.uniqueValueGroups[groupIdx].classes.map((uniqueValueClass) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(uniqueValueClass.symbol));
        currentColors.reverse();
        if (currentColors.length > 10) {
            // some ramps have only 10 colors
            currentColors = currentColors.slice(0, 10);
        }
    };
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    const edit = symbolStylerEdit(symbolStyler, new modules.SimpleFillSymbol(), {
        portal,
        sections: {
            marker: {
                parts: {
                    preview: false,
                    rotation: false,
                    size: false
                }
            },
            fill: {
                type: "color-ramp",
                style: "discrete",
                open: true,
                colorRampsOpen: true,
                colorRamps,
                parts: {
                    transparency: false
                }
            }
        },
        fill: {
            color: currentColors
        }
    });
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
}
async function buildSymbolStylerForTypeValue(options) {
    var _a, _b;
    const { layer, mapImageSublayer, mapView, lastDefault, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode, selectedValue } = options;
    const [groupIdx, classIdx] = !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.i)(layer) && selectedValue.split("/").map((value) => parseInt(value));
    const isPoint = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.A)(layer);
    const isLine = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.B)(layer);
    const isPolygon = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer);
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const isTypeSize = ["type-size", "type-size-age"].indexOf(rendererType) > -1;
    const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "auto");
    const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
    let symbol;
    if ((!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.i)(layer) && groupIdx === -1) || ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.i)(layer) && selectedValue === -1)) {
        symbol = renderer.defaultSymbol || lastDefault.defaultSymbol;
    }
    else {
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.i)(layer)) {
            symbol = renderer.uniqueValueInfos[selectedValue].symbol;
        }
        else {
            symbol = renderer.uniqueValueGroups[groupIdx].classes[classIdx].symbol;
        }
    }
    if (!isSupportedSymbol(symbol)) {
        symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.i)(layer) ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.aj)() : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
        if (((!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.i)(layer) && groupIdx === -1) || ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.i)(layer) && selectedValue === -1)) &&
            !renderer.defaultSymbol) {
            lastDefault.defaultSymbol = symbol;
        }
    }
    const fillEnabled = symbol.type === "picture-marker" ? false : !!symbol.color;
    const strokeEnabled = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a5)(symbol);
    const isPointCIM = symbol.type === "cim" && symbol.data.symbol.type === "CIMPointSymbol";
    let suggestedFillColors;
    if ((!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.i)(layer) && groupIdx === -1) || ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.i)(layer) && selectedValue === -1)) {
        suggestedFillColors = getGreyColors();
    }
    else {
        const schemes = modules.typeSchemes.getSchemes({
            basemap: mapView.map.basemap,
            geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.D)(layer) || defaultGeometry
        });
        suggestedFillColors = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a7)(schemes).slice(0, 16);
    }
    const suggestedStrokeColors = getAllColorsReversed();
    const onStylerEdit = ({ detail: { symbol, info: { marker, stroke /* , fill */ } } }) => {
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        if ((!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.i)(layer) && groupIdx === -1) || ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.i)(layer) && selectedValue === -1)) {
            renderer.defaultSymbol = symbol;
        }
        else {
            if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.i)(layer)) {
                const infos = renderer.uniqueValueInfos.slice();
                infos[selectedValue].symbol = symbol;
                renderer.uniqueValueInfos = infos;
            }
            else {
                const groups = renderer.uniqueValueGroups.slice();
                groups[groupIdx].classes[classIdx].symbol = symbol;
                renderer.uniqueValueGroups = groups;
            }
        }
        if (!isTypeSize) {
            updateAutoVisVar(symbol, marker === null || marker === void 0 ? void 0 : marker.autoAdjusted, stroke === null || stroke === void 0 ? void 0 : stroke.autoAdjusted, symbolStyler, options);
        }
        else {
            onChange();
        }
    };
    let stroke;
    if (symbol.type === "simple-fill") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width,
                style: sym.outline.style,
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1,
                style: "solid",
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
    }
    else if (symbol.type === "simple-marker") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1
            };
        }
    }
    else if (symbol.type === "cim") {
        stroke = getCimLineProps(symbol);
        if (isLine) {
            (stroke.size = sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : stroke.size),
                (stroke.autoAdjusted = !!sizeAutoVisVar);
            if (sizeAutoVisVar) {
                // adjusts symbol so all symbol layers fit
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, stroke.size);
            }
        }
    }
    else if (symbol.type === "simple-line") {
        const sym = symbol;
        stroke = {
            size: sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : sym.width,
            style: sym.style,
            marker: sym.marker,
            color: sym.color,
            autoAdjusted: !!sizeAutoVisVar
        };
    }
    else {
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: 1
        };
    }
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    let edit;
    if (isLine) {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                stroke: {
                    type: "color",
                    open: true,
                    suggestedColorsOpen: true,
                    suggestedColors: suggestedFillColors,
                    extraParts: {
                        style: symbol.type !== "cim",
                        arrow: symbol.type !== "cim",
                        autoStrokeAdjust: !mapImageSublayer && !isTypeSize ? "editable" : false,
                        width: !isTypeSize
                    },
                    parts: {
                        extra: !isTypeSize || symbol.type !== "cim"
                    }
                }
            },
            stroke
        });
    }
    else if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.i)(layer)) {
        // just need the fill option for raster layers. Other options doesnt make sense with the context
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: "simple",
            sections: {
                marker: {
                    parts: {
                        preview: false,
                        rotation: false,
                        size: false
                    }
                },
                fill: {
                    type: "color",
                    open: true,
                    optional: true,
                    suggestedColorsOpen: true,
                    suggestedColors: suggestedFillColors,
                    parts: {
                        transparency: false
                    }
                }
            },
            fill: {
                color: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(symbol) ||
                    (selectedValue === -1
                        ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.aj)().color
                        : adjustAlpha(suggestedFillColors[selectedValue % suggestedFillColors.length], 0.85))
            },
            stroke,
            fillEnabled
        });
    }
    else {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: isPolygon && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                marker: isPointCIM || ["simple-marker", "picture-marker"].indexOf(symbol.type) > -1
                    ? {
                        open: true,
                        parts: {
                            size: !isTypeSize ? (mapImageSublayer ? true : { autoSizeAdjust: "editable" }) : false
                        },
                        symbolsOpen: true,
                        sizeOpen: !isTypeSize,
                        markerType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "all" : ["simple", "picture"]
                    }
                    : undefined,
                fill: {
                    type: "color",
                    open: true,
                    optional: true,
                    suggestedColorsOpen: true,
                    transparencyOpen: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a6)(symbol),
                    suggestedColors: suggestedFillColors
                },
                stroke: {
                    type: "color",
                    optional: true,
                    suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        style: ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) === -1,
                        width: true,
                        autoStrokeAdjust: !mapImageSublayer && isPolygon && symbol.type !== "cim" && !isTypeSize ? "editable" : false
                    }
                }
            },
            fill: {
                color: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(symbol) || adjustAlpha(suggestedFillColors[classIdx % suggestedFillColors.length], 0.85)
            },
            marker: isTypeSize || isPoint
                ? {
                    size: sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol),
                    autoAdjusted: !!sizeAutoVisVar
                }
                : undefined,
            stroke,
            fillEnabled,
            strokeEnabled
        });
    }
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
    return createWatchScaleHandle((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.i)(layer)
        ? ((_a = renderer.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a.length)
            ? renderer.uniqueValueInfos[0].symbol
            : undefined
        : ((_b = renderer.uniqueValueGroups) === null || _b === void 0 ? void 0 : _b.length) && renderer.uniqueValueGroups[0].classes.length
            ? renderer.uniqueValueGroups[0].classes[0].symbol
            : undefined, symbolStyler);
}
async function buildSymbolStylerForRelationshipRamp(options) {
    var _a, _b, _c;
    const { layer, mapImageSublayer, mapView, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode } = options;
    const isPoint = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.A)(layer);
    const isLine = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.B)(layer);
    const isPolygon = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer);
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const isRelSize = rendererType === "relationship-size";
    const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "auto");
    const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
    const uniqueValueClasses = renderer.uniqueValueGroups[0].classes;
    const currentColors = uniqueValueClasses.map((uniqueValueClass) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(uniqueValueClass.symbol) || new modules.esriColor([0, 0, 0, 0]));
    const schemes = modules.relationshipSchemes.getSchemes({
        basemap: mapView.map.basemap || "topo",
        geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.D)(layer)
    });
    // TODO get current scheme
    // it takes the first symbol as a reference
    let symbol = ((_a = renderer.uniqueValueGroups[0].classes) === null || _a === void 0 ? void 0 : _a.length)
        ? modules.esriLang.clone(renderer.uniqueValueGroups[0].classes[0].symbol)
        : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    if (!isColoredSymbol(symbol)) {
        const size = (_b = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol)) !== null && _b !== void 0 ? _b : symbol.width;
        symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, size);
    }
    const strokeEnabled = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a5)(symbol);
    const isPointCIM = symbol.type === "cim" && symbol.data.symbol.type === "CIMPointSymbol";
    // TODO get current scheme
    const colorRamps = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a9)(schemes, Math.sqrt(uniqueValueClasses.length)).map(({ colors: stops, scheme: { tags, name } }) => ({
        stops: modules.relationshipSchemes.flatten2DArray(stops),
        tags,
        name
    }));
    const suggestedStrokeColors = getAllColorsReversed();
    const onStylerEdit = ({ detail: { symbol, info: { marker, stroke, fill } } }) => {
        const colors = modules.esriLang.clone((fill || stroke).color);
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        const classes = renderer.uniqueValueGroups[0].classes.slice();
        classes.forEach((uniqueValueClass, idx) => {
            uniqueValueClass.symbol = symbol.clone();
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(uniqueValueClass.symbol, colors[idx % colors.length]);
        });
        renderer.uniqueValueGroups[0].classes = classes;
        if (!isRelSize) {
            updateAutoVisVar(symbol, marker === null || marker === void 0 ? void 0 : marker.autoAdjusted, stroke === null || stroke === void 0 ? void 0 : stroke.autoAdjusted, symbolStyler, options);
        }
        else {
            onChange();
        }
    };
    let stroke;
    if (symbol.type === "simple-fill") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width,
                style: sym.outline.style,
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1,
                style: "solid",
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
    }
    else if (symbol.type === "simple-marker") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1
            };
        }
    }
    else if (symbol.type === "cim") {
        stroke = getCimLineProps(symbol);
        if (isLine) {
            (stroke.size = sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : stroke.size),
                (stroke.autoAdjusted = !!sizeAutoVisVar);
            if (sizeAutoVisVar) {
                // adjusts symbol so all symbol layers fit
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, stroke.size);
            }
        }
    }
    else if (symbol.type === "simple-line") {
        const sym = symbol;
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : sym.width,
            style: sym.style,
            marker: sym.marker,
            autoAdjusted: !!sizeAutoVisVar
        };
    }
    else {
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: 1
        };
    }
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    let edit;
    if (isLine) {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                stroke: {
                    type: "color-ramp",
                    style: "2d",
                    open: true,
                    colorRampsOpen: true,
                    colorRamps,
                    //suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        style: symbol.type !== "cim",
                        arrow: symbol.type !== "cim",
                        autoStrokeAdjust: !mapImageSublayer && !isRelSize ? "editable" : false,
                        width: !isRelSize
                    },
                    parts: {
                        extra: !isRelSize || symbol.type !== "cim"
                    }
                }
            },
            stroke: Object.assign(Object.assign({}, stroke), { color: currentColors })
        });
    }
    else {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: isPolygon && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                marker: isPointCIM || ["simple-marker", "picture-marker"].indexOf(symbol.type) > -1
                    ? {
                        open: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ai)(symbol) ? true : false,
                        parts: {
                            size: !isRelSize ? (mapImageSublayer ? true : { autoSizeAdjust: "editable" }) : false
                        },
                        symbolsOpen: true,
                        sizeOpen: !isRelSize,
                        markerType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? ["simple", "cim:vector"] : ["simple"]
                    }
                    : undefined,
                fill: {
                    type: "color-ramp",
                    style: "2d",
                    open: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ai)(symbol) ? false : true,
                    colorRampsOpen: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ai)(symbol) ? false : true,
                    colorRamps
                },
                stroke: {
                    type: "color",
                    optional: true,
                    open: false,
                    suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        style: ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) === -1,
                        width: true,
                        autoStrokeAdjust: !mapImageSublayer && isPolygon && symbol.type !== "cim" && !isRelSize ? "editable" : false
                    }
                }
            },
            fill: {
                color: currentColors
            },
            marker: isRelSize || isPoint
                ? {
                    size: sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol),
                    autoAdjusted: !!sizeAutoVisVar
                }
                : undefined,
            stroke,
            strokeEnabled
        });
    }
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
    return createWatchScaleHandle(((_c = renderer.uniqueValueGroups[0].classes) === null || _c === void 0 ? void 0 : _c.length) ? renderer.uniqueValueGroups[0].classes[0].symbol : undefined, symbolStyler);
}
async function buildSymbolStylerForPredominanceRamp(options) {
    var _a, _b, _c, _d;
    const { layer, mapImageSublayer, mapView, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode } = options;
    const isPoint = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.A)(layer);
    const isLine = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.B)(layer);
    const isPolygon = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer);
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const isPredomSize = rendererType === "predominance-size";
    const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "auto");
    const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
    const uniqueValueClasses = renderer.uniqueValueGroups[0].classes;
    let lastSymbol;
    let alpha = (uniqueValueClasses.length && ((_a = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(uniqueValueClasses[uniqueValueClasses.length - 1].symbol)) === null || _a === void 0 ? void 0 : _a.a)) || 1;
    let currentColors = uniqueValueClasses.map((uniqueValueClass) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(uniqueValueClass.symbol) || new modules.esriColor([0, 0, 0, alpha]));
    currentColors.reverse();
    const schemes = modules.predominanceSchemes.getSchemes({
        basemap: mapView.map.basemap,
        geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.D)(layer),
        numColors: uniqueValueClasses.length
    });
    // it takes the first symbol as a reference
    let symbol = ((_b = renderer.uniqueValueGroups[0].classes) === null || _b === void 0 ? void 0 : _b.length)
        ? modules.esriLang.clone(renderer.uniqueValueGroups[0].classes[0].symbol)
        : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    if (!isColoredSymbol(symbol)) {
        const size = (_c = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol)) !== null && _c !== void 0 ? _c : symbol.width;
        symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, size);
    }
    const strokeEnabled = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a5)(symbol);
    const isPointCIM = symbol.type === "cim" && symbol.data.symbol.type === "CIMPointSymbol";
    // TODO get current scheme
    const colorRampsAndSchemes = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a9)(schemes, uniqueValueClasses.length);
    const colorRamps = colorRampsAndSchemes.map((obj) => {
        return {
            stops: obj.colors.reverse(),
            tags: obj.scheme.tags,
            name: obj.scheme.name
        };
    });
    const suggestedStrokeColors = getAllColorsReversed();
    const onStylerEdit = ({ detail: { symbol, info: { marker, stroke, fill } } }) => {
        const colors = modules.esriLang.clone((fill || stroke).color);
        const color0 = currentColors[0];
        const hasColorRampChange = currentColors.length !== colors.length ||
            currentColors.some((color, idx) => color.r !== colors[idx].r || color.g !== colors[idx].g || color.b !== colors[idx].b) ||
            color0.r !== colors[0].r ||
            color0.g !== colors[0].g ||
            color0.b !== colors[0].b;
        const hasAlphaChange = color0.a !== colors[0].a;
        const newAlpha = colors[0].a;
        colors.reverse();
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        const symbolChangeInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.am)(symbol, lastSymbol);
        if (hasColorRampChange && !symbolChangeInfo.any) {
            symbolChangeInfo.any = true;
            symbolChangeInfo.color = true;
        }
        if (symbolChangeInfo.any) {
            const classes = renderer.uniqueValueGroups[0].classes.slice();
            classes.forEach((uniqueValueClass, idx) => {
                if (uniqueValueClass.symbol.type === "picture-marker" && (hasColorRampChange || hasAlphaChange)) {
                    uniqueValueClass.symbol = modules.esriLang.clone(symbol);
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(uniqueValueClass.symbol, colors[idx % colors.length]);
                }
                uniqueValueClass.symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.an)(uniqueValueClass.symbol, symbol, hasColorRampChange
                    ? colors[idx % colors.length]
                    : hasAlphaChange
                        ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ao)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(uniqueValueClass.symbol), newAlpha)
                        : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(uniqueValueClass.symbol) || new modules.esriColor([0, 0, 0, 0]), symbolChangeInfo);
            });
            renderer.uniqueValueGroups[0].classes = classes;
        } // else maybe just an auto size change
        if (!isPredomSize) {
            updateAutoVisVar(symbol, marker === null || marker === void 0 ? void 0 : marker.autoAdjusted, stroke === null || stroke === void 0 ? void 0 : stroke.autoAdjusted, symbolStyler, options);
        }
        else {
            onChange();
        }
        lastSymbol = symbol.clone();
        if (hasColorRampChange) {
            currentColors = renderer.uniqueValueGroups[0].classes.map((uniqueValueClass) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(uniqueValueClass.symbol) || new modules.esriColor([0, 0, 0, 0.5]));
            currentColors.reverse();
        }
    };
    let stroke;
    if (symbol.type === "simple-fill") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width,
                style: sym.outline.style,
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1,
                style: "solid",
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
    }
    else if (symbol.type === "simple-marker") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1
            };
        }
    }
    else if (symbol.type === "cim") {
        stroke = getCimLineProps(symbol);
        if (isLine) {
            (stroke.size = sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : stroke.size),
                (stroke.autoAdjusted = !!sizeAutoVisVar);
            if (sizeAutoVisVar) {
                // adjusts symbol so all symbol layers fit
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, stroke.size);
            }
        }
    }
    else if (symbol.type === "simple-line") {
        const sym = symbol;
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : sym.width,
            style: sym.style,
            marker: sym.marker,
            autoAdjusted: !!sizeAutoVisVar
        };
    }
    else {
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: 1
        };
    }
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    let edit;
    // apply a few settings to the symbol we pass to the styler
    // so when comparing changes it's correct
    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(symbol, currentColors[currentColors.length - 1]);
    if ((isPredomSize || isPoint || isLine) && sizeAutoVisVar) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, getSizeByScale(sizeAutoVisVar, mapView.scale));
    }
    else if (isPolygon && sizeAutoVisVar && symbol.outline) {
        symbol.outline.width = getSizeByScale(sizeAutoVisVar, mapView.scale);
    }
    lastSymbol = symbol.clone();
    if (isLine) {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                stroke: {
                    type: "color-ramp",
                    style: "discrete",
                    open: true,
                    colorRampsOpen: true,
                    colorRamps,
                    //suggestedColors: suggestedStrokeColors,
                    parts: {
                        //suggestedColors: false,
                        //customColor: false,
                        transparency: true,
                        extra: !isPredomSize || symbol.type !== "cim"
                    },
                    extraParts: {
                        style: symbol.type !== "cim",
                        arrow: symbol.type !== "cim",
                        autoStrokeAdjust: !mapImageSublayer && !isPredomSize ? "editable" : false,
                        width: !isPredomSize
                    }
                }
            },
            stroke: Object.assign(Object.assign({}, stroke), { color: currentColors })
        });
    }
    else {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: isPolygon && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                marker: isPointCIM || ["simple-marker", "picture-marker"].indexOf(symbol.type) > -1
                    ? {
                        open: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ai)(symbol) ? true : false,
                        parts: {
                            size: !isPredomSize ? (mapImageSublayer ? true : { autoSizeAdjust: "editable" }) : false
                        },
                        symbolsOpen: true,
                        sizeOpen: !isPredomSize,
                        markerType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? ["simple", "cim:vector"] : ["simple"]
                    }
                    : undefined,
                fill: {
                    type: "color-ramp",
                    style: "discrete",
                    open: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ai)(symbol) ? false : true,
                    colorRampsOpen: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ai)(symbol) ? false : true,
                    colorRamps
                },
                stroke: {
                    type: "color",
                    optional: true,
                    open: false,
                    suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        style: ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) === -1,
                        width: true,
                        autoStrokeAdjust: !mapImageSublayer && isPolygon && symbol.type !== "cim" && !isPredomSize ? "editable" : false
                    }
                }
            },
            fill: {
                color: currentColors
            },
            marker: isPredomSize || isPoint
                ? {
                    size: sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol),
                    autoAdjusted: !!sizeAutoVisVar
                }
                : undefined,
            stroke,
            strokeEnabled
        });
    }
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
    return createWatchScaleHandle(((_d = renderer.uniqueValueGroups[0].classes) === null || _d === void 0 ? void 0 : _d.length) ? renderer.uniqueValueGroups[0].classes[0].symbol : undefined, symbolStyler, (newSize) => {
        isPolygon && symbol.outline ? (symbol.outline.width = newSize) : !isPolygon && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, newSize);
        lastSymbol = symbol.clone();
    });
}
async function buildSymbolStylerForPredominanceValue(options) {
    var _a;
    const { layer, mapImageSublayer, mapView, selectedValue, lastDefault, portal, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode } = options;
    const isPoint = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.A)(layer);
    const isLine = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.B)(layer);
    const isPolygon = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer);
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const isPredomSize = rendererType === "predominance-size";
    const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "auto");
    const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
    let symbol;
    if (selectedValue === -1) {
        symbol = renderer.defaultSymbol || lastDefault.defaultSymbol;
    }
    else {
        symbol = renderer.uniqueValueGroups[0].classes[selectedValue].symbol;
    }
    if (!isSupportedSymbol(symbol)) {
        symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
        if (selectedValue === -1 && !renderer.defaultSymbol) {
            lastDefault.defaultSymbol = symbol;
        }
    }
    const fillEnabled = symbol.type === "picture-marker" ? false : !!symbol.color;
    const strokeEnabled = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a5)(symbol);
    const isPointCIM = symbol.type === "cim" && symbol.data.symbol.type === "CIMPointSymbol";
    let suggestedFillColors;
    if (selectedValue === -1) {
        suggestedFillColors = getGreyColors();
    }
    else {
        const schemes = modules.predominanceSchemes.getSchemes({
            basemap: mapView.map.basemap,
            geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.D)(layer),
            numColors: 10
        });
        suggestedFillColors = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a7)(schemes).slice(0, 16);
    }
    const suggestedStrokeColors = getAllColorsReversed();
    const onStylerEdit = ({ detail: { symbol, info: { marker, stroke /* , fill */ } } }) => {
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        if (selectedValue === -1) {
            renderer.defaultSymbol = symbol;
        }
        else {
            const infos = renderer.uniqueValueGroups[0].classes.slice();
            infos[selectedValue].symbol = symbol;
            renderer.uniqueValueGroups[0].classes = infos;
        }
        if (!isPredomSize) {
            updateAutoVisVar(symbol, marker === null || marker === void 0 ? void 0 : marker.autoAdjusted, stroke === null || stroke === void 0 ? void 0 : stroke.autoAdjusted, symbolStyler, options);
        }
        else {
            onChange();
        }
    };
    let stroke;
    if (symbol.type === "simple-fill") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width,
                style: sym.outline.style,
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1,
                style: "solid",
                autoAdjusted: !!sizeOutlineVisVar
            };
        }
    }
    else if (symbol.type === "simple-marker") {
        const sym = symbol;
        if (sym.outline) {
            stroke = {
                color: sym.outline.color ? sym.outline.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.outline.width
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1
            };
        }
    }
    else if (symbol.type === "cim") {
        stroke = getCimLineProps(symbol);
    }
    else if (symbol.type === "simple-line") {
        const sym = symbol;
        stroke = {
            size: sym.width,
            style: sym.style,
            marker: sym.marker,
            color: sym.color
        };
    }
    else {
        stroke = {
            color: new modules.esriColor([255, 255, 255, 0.5]),
            size: 1
        };
    }
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    let edit;
    if (isLine) {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                stroke: {
                    type: "color",
                    open: true,
                    suggestedColorsOpen: true,
                    suggestedColors: suggestedFillColors,
                    extraParts: {
                        style: symbol.type !== "cim",
                        arrow: symbol.type !== "cim",
                        autoStrokeAdjust: !mapImageSublayer && !isPredomSize ? "editable" : false,
                        width: !isPredomSize
                    },
                    parts: {
                        extra: !isPredomSize || symbol.type !== "cim"
                    }
                }
            },
            stroke
        });
    }
    else {
        edit = symbolStylerEdit(symbolStyler, modules.esriLang.clone(symbol), {
            portal,
            symbolFilter: isPolygon && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "simple" : undefined,
            sections: {
                marker: isPointCIM || ["simple-marker", "picture-marker"].indexOf(symbol.type) > -1
                    ? {
                        open: true,
                        parts: {
                            size: !isPredomSize ? (mapImageSublayer ? true : { autoSizeAdjust: "editable" }) : false
                        },
                        symbolsOpen: true,
                        sizeOpen: !isPredomSize,
                        markerType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a8)() ? "all" : ["simple", "picture"]
                    }
                    : undefined,
                fill: {
                    type: "color",
                    open: true,
                    optional: true,
                    suggestedColorsOpen: true,
                    transparencyOpen: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a6)(symbol),
                    suggestedColors: suggestedFillColors
                },
                stroke: {
                    type: "color",
                    optional: true,
                    suggestedColors: suggestedStrokeColors,
                    extraParts: {
                        style: ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) === -1,
                        width: true,
                        autoStrokeAdjust: !mapImageSublayer && isPolygon && symbol.type !== "cim" && !isPredomSize ? "editable" : false
                    }
                }
            },
            fill: {
                color: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(symbol) || adjustAlpha(suggestedFillColors[selectedValue], 0.85)
            },
            marker: isPredomSize || isPoint
                ? {
                    size: sizeAutoVisVar ? getSizeByScale(sizeAutoVisVar, mapView.scale) : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol),
                    autoAdjusted: !!sizeAutoVisVar
                }
                : undefined,
            stroke,
            fillEnabled,
            strokeEnabled
        });
    }
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
    return createWatchScaleHandle(((_a = renderer.uniqueValueGroups[0].classes) === null || _a === void 0 ? void 0 : _a.length) ? renderer.uniqueValueGroups[0].classes[0].symbol : undefined, symbolStyler);
}
async function buildSymbolStylerForChartRamp(options) {
    const { layer, mapView, portal, strings, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode } = options;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const attributes = renderer.attributes;
    const currentColors = attributes.map((attribute) => attribute.color);
    const schemes = modules.pieChartSchemes.getSchemes({
        basemap: mapView.map.basemap,
        geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.D)(layer) || defaultGeometry,
        numColors: attributes.length
    });
    const suggestedStrokeColors = getGreyColors();
    // TODO get current scheme
    const colorRampsAndSchemes = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a9)(schemes, attributes.length);
    const colorRamps = colorRampsAndSchemes.map((obj) => {
        return {
            stops: obj.colors.reverse(),
            tags: obj.scheme.tags,
            name: obj.scheme.name
        };
    });
    const onStylerEdit = ({ detail: { symbol, info: { /* marker, stroke, */ fill } } }) => {
        const colors = modules.esriLang.clone(fill.color);
        colors.reverse();
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).attributes.forEach((attribute, idx) => (attribute.color = colors[idx]));
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).outline = symbol.outline.clone();
        onChange();
    };
    const symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView);
    symbol.outline = renderer.outline;
    let stroke;
    if (symbol.type === "simple-fill") {
        if (symbol.outline) {
            const sym = symbol.outline;
            stroke = {
                color: sym.color ? sym.color : new modules.esriColor([0, 0, 0, 0.5]),
                size: sym.width,
                style: sym.style
            };
        }
        else {
            stroke = {
                color: new modules.esriColor([0, 0, 0, 0.5]),
                size: 1,
                style: "solid"
            };
        }
    }
    else if (symbol.type === "simple-marker" && symbol.outline) {
        const sym = symbol.outline;
        stroke = {
            color: sym.color ? sym.color : new modules.esriColor([0, 0, 0, 0.5]),
            size: sym.width,
            style: sym.style
        };
    }
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    const edit = symbolStylerEdit(symbolStyler, symbol, {
        portal,
        sections: {
            marker: {
                parts: {
                    preview: false,
                    rotation: false,
                    size: false
                }
            },
            fill: {
                type: "color-ramp",
                style: "discrete",
                open: true,
                colorRampsOpen: true,
                colorRamps
            },
            stroke: {
                type: "color",
                optional: true,
                suggestedColors: suggestedStrokeColors,
                extraParts: {
                    style: false,
                    width: true,
                    autoStrokeAdjust: false
                }
            }
        },
        fill: {
            color: currentColors.reverse()
        },
        stroke
    });
    symbolStyler.stringOverrides = {
        fillColor: strings.styler.color,
        fillTransparency: strings.styler.transparency
    };
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
}
async function buildSymbolStylerForChartValue(options) {
    var _a;
    const { layer, mapView, selectedAttribute, lastDefault, portal, strings, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode } = options;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const attributes = renderer.attributes;
    let color;
    if (selectedAttribute === -1) {
        color = ((_a = renderer.othersCategory) === null || _a === void 0 ? void 0 : _a.color) || (lastDefault === null || lastDefault === void 0 ? void 0 : lastDefault.otherColor) || new modules.esriColor([170, 170, 170, 1]);
    }
    else if (selectedAttribute === -2) {
        color = renderer.defaultColor || (lastDefault === null || lastDefault === void 0 ? void 0 : lastDefault.defaultColor) || new modules.esriColor([170, 170, 170, 1]);
    }
    else {
        color = attributes[selectedAttribute].color;
    }
    const schemes = modules.pieChartSchemes.getSchemes({
        basemap: mapView.map.basemap,
        geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.D)(layer) || defaultGeometry,
        numColors: attributes.length
    });
    const suggestedFillColors = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a7)(schemes).slice(0, 16);
    const onStylerEdit = ({ detail: { symbol /* ,
    info: { marker, stroke, fill } */ } }) => {
        var _a;
        if (selectedAttribute === -1) {
            if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).othersCategory) {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).othersCategory = {
                    color: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(symbol),
                    label: (lastDefault === null || lastDefault === void 0 ? void 0 : lastDefault.otherLabel) || strings.styler.other,
                    threshold: (_a = lastDefault === null || lastDefault === void 0 ? void 0 : lastDefault.threshold) !== null && _a !== void 0 ? _a : 0
                };
            }
            else {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).othersCategory.color = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(symbol);
            }
        }
        else if (selectedAttribute === -2) {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).defaultColor = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(symbol);
        }
        else {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).attributes[selectedAttribute].color = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(symbol);
        }
        onChange();
    };
    const symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView);
    symbol.outline = undefined;
    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(symbol, color);
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    const edit = symbolStylerEdit(symbolStyler, symbol, {
        portal,
        sections: {
            marker: {
                parts: {
                    preview: false,
                    rotation: false,
                    size: false
                }
            },
            fill: {
                type: "color",
                open: true,
                suggestedColorsOpen: true,
                suggestedColors: suggestedFillColors
            }
        },
        fill: {
            color
        }
    });
    symbolStyler.stringOverrides = {
        fillColor: strings.styler.color,
        fillTransparency: strings.styler.transparency
    };
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
}
async function buildSymbolStylerForDotDensityRamp(options) {
    const { layer, mapView, portal, strings, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode } = options;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const attributes = renderer.attributes;
    const currentColors = attributes.map((attribute) => attribute.color);
    const schemes = modules.dotDensitySchemes.getSchemes({
        basemap: mapView.map.basemap,
        numColors: attributes.length
    });
    // TODO get current scheme
    const colorRampsAndSchemes = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a9)(schemes, attributes.length);
    const colorRamps = colorRampsAndSchemes.map((obj) => {
        return {
            stops: obj.colors,
            tags: obj.scheme.tags,
            name: obj.scheme.name
        };
    });
    const onStylerEdit = ({ detail: { 
    //symbol,
    info: { /* marker, stroke, */ fill } } }) => {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).attributes.forEach((attribute, idx) => (attribute.color = fill.color[idx]));
        onChange();
    };
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    const edit = symbolStylerEdit(symbolStyler, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView), {
        portal,
        sections: {
            marker: {
                parts: {
                    preview: false,
                    rotation: false,
                    size: false
                }
            },
            fill: {
                type: "color-ramp",
                style: "discrete",
                open: true,
                colorRampsOpen: true,
                colorRamps
            }
        },
        fill: {
            color: currentColors
        }
    });
    symbolStyler.stringOverrides = {
        fillColor: strings.styler.dotColor,
        fillTransparency: strings.styler.dotTransparency
    };
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
}
async function buildSymbolStylerForDotDensityValue(options) {
    const { layer, mapView, portal, strings, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode, selectedAttribute } = options;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const attributes = renderer.attributes;
    const schemes = modules.dotDensitySchemes.getSchemes({
        basemap: mapView.map.basemap,
        numColors: attributes.length
    });
    const suggestedFillColors = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a7)(schemes).slice(0, 16);
    const onStylerEdit = ({ detail: { symbol /* ,
    info: { marker, stroke, fill } */ } }) => {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).attributes[selectedAttribute].color = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(symbol);
        onChange();
    };
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    const edit = symbolStylerEdit(symbolStyler, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView), {
        portal,
        sections: {
            marker: {
                parts: {
                    preview: false,
                    rotation: false,
                    size: false
                }
            },
            fill: {
                type: "color",
                open: true,
                suggestedColorsOpen: true,
                suggestedColors: suggestedFillColors
            }
        },
        fill: {
            color: attributes[selectedAttribute].color
        }
    });
    symbolStyler.stringOverrides = {
        fillColor: strings.styler.dotColor,
        fillTransparency: strings.styler.dotTransparency
    };
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
}
async function buildSymbolStylerForHeatmapRamp(options) {
    const { layer, mapView, portal, strings, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange, popoverNode } = options;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const colorStops = renderer.colorStops;
    const currentColors = colorStops
        .filter((__, idx) => idx >= 3)
        .map((colorStop) => colorStop.color);
    const basemapTheme = (await modules.colorUtils.getBackgroundColorTheme(mapView));
    const schemes = modules.heatmapSchemes.getSchemes({
        basemapTheme
    });
    // TODO get current scheme
    const colorRampsAndSchemes = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a9)(schemes, colorStops.length);
    const colorRamps = colorRampsAndSchemes.map((obj) => {
        return {
            stops: obj.colors.reverse(),
            tags: obj.scheme.tags,
            name: obj.scheme.name
        };
    });
    const onStylerEdit = ({ detail: { 
    //symbol,
    info: { /* marker, stroke, */ fill } } }) => {
        const colors = modules.esriLang.clone(fill.color);
        colors.reverse();
        const buf = Math.max(colorStops.length - colors.length, 0);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).colorStops.forEach((colorStop, idx) => {
            // keep alpha value because of fadeRatio
            const alpha = colorStop.color.a;
            if (idx <= buf - 2) {
                colorStop.color = modules.esriLang.clone(colors[0]);
            }
            else if (idx <= buf) {
                colorStop.color = modules.esriLang.clone(colors[0]);
            }
            else {
                colorStop.color = modules.esriLang.clone(colors[idx - buf]);
            }
            colorStop.color.a = alpha;
        });
        onChange();
    };
    const symbolStyler = await createSymbolStylerElement(popoverNode);
    const edit = symbolStylerEdit(symbolStyler, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView), {
        portal,
        sections: {
            marker: {
                parts: {
                    preview: false,
                    rotation: false,
                    size: false
                }
            },
            fill: {
                type: "color-ramp",
                style: "continuous",
                open: true,
                colorRampsOpen: true,
                colorRamps,
                parts: {
                    transparency: false // temp /arcgis-js-api/issues/27188
                }
            }
        },
        fill: {
            color: currentColors.reverse()
        }
    });
    symbolStyler.stringOverrides = {
        fillTransparency: strings.styler.transparency
    };
    symbolStyler.addEventListener("arcgisSymbolStylerEdit", onStylerEditWrapper.bind(null, onStylerEdit));
    popoverNode.addStyler(symbolStyler);
    await edit;
}
// --------------------------------------------------------------------------
//
//  utils
//
// --------------------------------------------------------------------------
function updateAutoVisVar(symbol, markerAutoAdjusted, strokeAutoAdjusted, symbolStyler, options) {
    const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const isPoint = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.A)(layer);
    const isLine = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.B)(layer);
    if (isPoint) {
        updateSizeAutoVisVar(markerAutoAdjusted, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol), symbol, symbolStyler, options);
    }
    else if (isLine) {
        updateSizeAutoVisVar(strokeAutoAdjusted, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol), symbol, symbolStyler, options);
    }
    else {
        updateOutlineAutoVisVar(strokeAutoAdjusted, symbol.type === "cim"
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ap)(symbol)
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol.outline || new modules.SimpleLineSymbol()), symbol, symbolStyler, options);
    }
}
function updateSizeAutoVisVar(autoAdjusted, newSize, symbol, symbolStyler, options) {
    const { layer, mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange } = options;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    newSize = Math.max(newSize, 0.1);
    const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "auto");
    if (autoAdjusted && !sizeAutoVisVar) {
        // need to create that visualVariable
        (0,_location_e26b539f_js__WEBPACK_IMPORTED_MODULE_4__.b)().then((sizeAutoVisVar) => {
            if (sizeAutoVisVar) {
                const rend = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
                rend.visualVariables = rend.visualVariables || [];
                rend.visualVariables.push(sizeAutoVisVar);
                if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ak)(symbol)) {
                    // update sizeAutoVisVar and use current symbol size
                    const oldSize = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(symbol);
                    const newSize = getSizeByScale(sizeAutoVisVar, mapView.scale);
                    const factor = oldSize / newSize;
                    updateAutoSizeStops(sizeAutoVisVar, factor);
                }
                // display new (default) size in SymbolStyler
                updateSymbolStylerWithSize(sizeAutoVisVar, mapView.scale, symbol, symbolStyler);
            }
            onChange();
        });
    }
    else if (!autoAdjusted && sizeAutoVisVar) {
        // remove visualVariable
        const visVars = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(renderer, "size", "auto");
        if (visVars === null || visVars === void 0 ? void 0 : visVars.length) {
            renderer.visualVariables = visVars;
        }
        else {
            renderer.visualVariables = undefined;
        }
        //symbolStyler.setSize(symbolType === "simple-line" ? "stroke" : "marker", newSize);
        onChange();
    }
    else {
        if (autoAdjusted) {
            adjustAutoSizeForSymbol(newSize);
        }
        onChange();
    }
}
function adjustAutoSizeForSymbol(newSize) {
    const { layer, mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const scale = mapView.scale;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "auto");
    const oldSize = getSizeByScale(sizeAutoVisVar, scale);
    const factor = newSize / oldSize;
    updateAutoSizeStops(sizeAutoVisVar, factor);
}
function updateOutlineAutoVisVar(autoAdjusted, newSize, symbol, symbolStyler, options) {
    const { layer, mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange } = options;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
    if (autoAdjusted && !sizeOutlineVisVar) {
        // need to create that visualVariable
        (0,_location_e26b539f_js__WEBPACK_IMPORTED_MODULE_4__.a)().then((sizeOutlineVisVar) => {
            if (sizeOutlineVisVar) {
                const rend = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
                rend.visualVariables = rend.visualVariables || [];
                rend.visualVariables.push(sizeOutlineVisVar);
                updateSymbolStylerWithSize(sizeOutlineVisVar, mapView.scale, symbol, symbolStyler);
            }
            onChange();
        });
    }
    else if (!autoAdjusted && sizeOutlineVisVar) {
        // remove visualVariable
        renderer.visualVariables = renderer.visualVariables.filter((visVar) => !(visVar.type === "size" && visVar.target === "outline"));
        if (renderer.visualVariables && !renderer.visualVariables.length) {
            renderer.visualVariables = undefined;
        }
        onChange();
    }
    else {
        if (autoAdjusted) {
            adjustAutoOutline(newSize, options);
        }
        onChange();
    }
}
function adjustAutoOutline(newSize, options) {
    const { layer, mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const { onChange } = options;
    const scale = mapView.scale;
    let renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
    /* console.log(
      "sizeAutoVisVar 1",
      sizeAutoVisVar.stops.map((s: any) => {
        return {
          size: s.size,
          sizePx: Math.round((s.size / 0.75) * 100) / 100,
          value: new Intl.NumberFormat().format(s.value)
        };
      })
    ); */
    const stops = sizeAutoVisVar.stops;
    if (newSize !== 0 && stops[stops.length - 2].size === 0) {
        // 2 or more stops have value zero; build new stops
        (0,_location_e26b539f_js__WEBPACK_IMPORTED_MODULE_4__.a)().then((sizeOutlineVisVar) => {
            if (sizeOutlineVisVar) {
                const oldSize = getSizeByScale(sizeOutlineVisVar, scale);
                const factor = (newSize === 0 ? Math.max(0.5, newSize) : newSize) / (oldSize === 0 ? Math.max(0.5, oldSize) : oldSize);
                updateAutoSizeStops(sizeOutlineVisVar, factor);
                const visVars = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "size", "outline") || [];
                visVars.push(sizeOutlineVisVar);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).visualVariables = visVars; // not renderer.visualVariables = visVars;
                onChange();
                setTimeout(() => { }, 2000);
            }
        });
    }
    else {
        const oldSize = getSizeByScale(sizeAutoVisVar, scale);
        const factor = (newSize === 0 ? Math.max(0.5, newSize) : newSize) / (oldSize === 0 ? Math.max(0.5, oldSize) : oldSize);
        updateAutoSizeStops(sizeAutoVisVar, factor);
        if (newSize === 0 || oldSize === 0) {
            // because we adjusted the factor...
            setSizeByScaleToValue(sizeAutoVisVar, scale, newSize);
            // prevent 2 stops with same size...
            sizeAutoVisVar.stops.forEach((s, idx) => {
                if (idx > 0) {
                    if (s.size === sizeAutoVisVar.stops[idx - 1].size) {
                        // we don't want twice the same size
                        if (idx === sizeAutoVisVar.stops.length - 1) {
                            if (idx > 1) {
                                sizeAutoVisVar.stops[idx - 1].size = (sizeAutoVisVar.stops[idx - 2].size + s.size) / 2;
                            } // else should not happen; then change nothing
                        }
                        else {
                            // take middle size
                            s.size = (sizeAutoVisVar.stops[idx + 1].size + sizeAutoVisVar.stops[idx - 1].size) / 2;
                        }
                    }
                }
            });
        }
    }
}
function setSizeByScaleToValue(sizeAutoVisVar, scale, value) {
    // figure out current stop considering map scale
    // then set that value and all the ones with a larger scale to 0
    const sizeStops = sizeAutoVisVar.stops;
    const stopsCount = sizeStops.length;
    const finalIndex = stopsCount - 1;
    const scaleMin = sizeStops[0].value;
    const scaleMax = sizeStops[finalIndex].value;
    if (scale <= scaleMin) {
        // everything set to value
        for (let i = 0; i <= finalIndex; i++) {
            sizeStops[i].size = value;
        }
        return;
    }
    if (scale >= scaleMax) {
        sizeStops[finalIndex].size = value;
        return;
    }
    for (let i = 0; i < finalIndex; i++) {
        const currentStop = sizeStops[i];
        const nextStop = sizeStops[i + 1];
        if (scale >= currentStop.value && scale < nextStop.value) {
            // set current stop and all with lower scale to value
            for (let k = i + 1; k <= finalIndex; k++) {
                sizeStops[k].size = value;
            }
            break;
        }
    }
}
function updateAutoSizeStops(sizeAutoVisVar, factor) {
    sizeAutoVisVar.stops.forEach((stop) => {
        stop.size *= factor;
    });
}
function createWatchScaleHandle(symbol, symbolStyler, onSizeChangeHandler) {
    const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    let oldScale;
    return modules.reactiveUtils.when(() => mapView.stationary, () => {
        const newScale = mapView.scale;
        if (oldScale !== newScale) {
            const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
            const sizeAutoVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", symbol.type === "simple-fill" ? "outline" : "auto");
            if (sizeAutoVisVar) {
                /* console.log(
                "scale",
                new Intl.NumberFormat().format(newScale),
                "size",
                getSizeByScale(sizeAutoVisVar, newScale),
                "sizePx",
                Math.round((getSizeByScale(sizeAutoVisVar, newScale) / 0.75) * 100) / 100
              ); */
                updateSymbolStylerWithSize(sizeAutoVisVar, newScale, symbol, symbolStyler, onSizeChangeHandler);
            }
            oldScale = newScale;
        }
    });
}
function updateSymbolStylerWithSize(sizeAutoVisVar, newScale, symbol, symbolStyler, onSizeChangeHandler) {
    const newSize = getSizeByScale(sizeAutoVisVar, newScale);
    const type = ["simple-line", "simple-fill"].indexOf(symbol.type) > -1 || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ak)(symbol) ? "stroke" : "marker";
    symbolStyler.setSize(type, newSize);
    onSizeChangeHandler === null || onSizeChangeHandler === void 0 ? void 0 : onSizeChangeHandler(newSize);
}
function adjustAlpha(color, alpha) {
    if (color) {
        color.a = alpha;
    }
    return color;
}
function getCimLineProps(sym) {
    var _a, _b, _c;
    // point: outline
    // line: main line
    // polygon: outline
    const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.ak)(sym)) {
        return {
            color: ((_a = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(sym)) === null || _a === void 0 ? void 0 : _a.clone()) || new modules.esriColor([255, 255, 255, 0.5]),
            size: (_b = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(sym)) !== null && _b !== void 0 ? _b : 1
        };
    }
    else {
        const outline = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.al)(sym);
        return {
            color: new modules.esriColor(outline === null || outline === void 0 ? void 0 : outline.color) || new modules.esriColor([255, 255, 255, 0.5]),
            size: (_c = outline === null || outline === void 0 ? void 0 : outline.width) !== null && _c !== void 0 ? _c : 1
        };
    }
}
function isSupportedSymbol(sym) {
    return ["simple-fill", "simple-marker", "simple-line", "picture-marker", "cim"].indexOf(sym === null || sym === void 0 ? void 0 : sym.type) > -1;
}
function isColoredSymbol(sym) {
    return ["simple-fill", "simple-marker", "simple-line", "cim"].indexOf(sym.type) > -1;
}
/* function printSymbolProps(text: string, sym: any) {
  console.log(
    text,
    sym.type,
    sym.type === "cim" ? cimSymbolUtils.getCIMSymbolSize(sym) : sym.size ?? sym.width,
    sym.type === "cim" ? cimSymbolUtils.getCIMSymbolColor(sym).toJSON() : sym.color.toJSON(),
    sym.type === "cim" ? getCimPointOutline(sym)?.color : sym.outline?.color?.toJSON(),
    sym.type === "cim" ? getCimPointOutline(sym)?.width : sym.outline?.width
  );
} */



//# sourceMappingURL=symbolStyler-04635b2b.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,