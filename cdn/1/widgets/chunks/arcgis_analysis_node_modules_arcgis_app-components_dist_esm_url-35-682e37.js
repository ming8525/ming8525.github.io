"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_url-35-682e37"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ags-eb458a03.js":
/*!*********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ags-eb458a03.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ agsServerMap),
/* harmony export */   i: () => (/* binding */ isAGS)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const agsServerMap = {
    FeatureServer: "Feature Service",
    GeocodeServer: "Geocoding Service",
    GeoDataServer: "Geodata Service",
    GeometryServer: "Geometry Service",
    GeoenrichmentServer: "Geoenrichment Service",
    GPServer: "Geoprocessing Service",
    GlobeServer: "Globe Service",
    ImageServer: "Image Service",
    MapServer: "Map Service",
    NAServer: "Network Analysis Service",
    ElevationServer: "Image Service",
    VectorTileServer: "Vector Tile Service",
    SceneServer: "Scene Service",
    StreamServer: "Stream Service",
    WMServer: "Workflow Manager Service",
    TiledImageServer: "Image Service",
    VideoServer: "Video Service"
};
const isAGS = (type) => !!Object.values(agsServerMap).includes(type);



//# sourceMappingURL=ags-eb458a03.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-0353a769.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-0353a769.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ setSessionStorageItem),
/* harmony export */   b: () => (/* binding */ getSessionStorageItem),
/* harmony export */   c: () => (/* binding */ getCookie),
/* harmony export */   d: () => (/* binding */ setCookie),
/* harmony export */   g: () => (/* binding */ getLocalStorageItem),
/* harmony export */   s: () => (/* binding */ setLocalStorageItem)
/* harmony export */ });
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


// import stringUtil from "./strings";
/**
 * Utility methods for dealing with storage of various forms (cookies, local storage, and session storage).
 */
function setCookie(name, cookie, properties, stringify) {
    writeCookie(name, stringify ? JSON.stringify(cookie) : cookie, properties);
}
function getCookie(name, parse) {
    const cookie = readCookie(name);
    return cookie && parse ? JSON.parse(cookie) : cookie;
}
function setLocalStorageItem(name, item, stringify) {
    window.localStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getLocalStorageItem(name, parse) {
    const item = window.localStorage.getItem(name);
    return item && parse ? JSON.parse(item) : item;
}
function setSessionStorageItem(name, item, stringify) {
    window.sessionStorage.setItem(name, stringify ? JSON.stringify(item) : item);
}
function getSessionStorageItem(name, parse) {
    const item = window.sessionStorage.getItem(name);
    return item && parse ? JSON.parse(item) : item;
}
function readCookie(name) {
    const cookie = document.cookie;
    const cookieNameRE = new RegExp(`(?:^|; )${(0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_0__.e)(name)}=([^;]*)`);
    const matchedCookies = cookie.match(cookieNameRE);
    return matchedCookies ? decodeURIComponent(matchedCookies[1]) : undefined;
}
function writeCookie(name, value, properties) {
    properties = properties || {};
    let expires = properties === null || properties === void 0 ? void 0 : properties.expires;
    if (typeof expires === "number") {
        const expirationDate = new Date();
        const daysFromTodayInMs = expires * 24 * 60 * 60 * 1000;
        expirationDate.setTime(Date.now() + daysFromTodayInMs);
        expires = properties.expires = expirationDate;
    }
    if (typeof expires !== "string" && (expires === null || expires === void 0 ? void 0 : expires.toUTCString)) {
        properties.expires = expires.toUTCString();
    }
    let cookie = `${name}=${encodeURIComponent(value)}`;
    let property;
    for (property in properties) {
        cookie += `; ${property}`;
        const propertyValue = properties[property];
        if (propertyValue !== true) {
            cookie += `=${propertyValue}`;
        }
    }
    document.cookie = cookie;
}



//# sourceMappingURL=storage-0353a769.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-35875a10.js":
/*!*********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-35875a10.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isHostedService),
/* harmony export */   b: () => (/* binding */ supportsHttps),
/* harmony export */   c: () => (/* binding */ urlToObject),
/* harmony export */   d: () => (/* binding */ formatGISUrl),
/* harmony export */   e: () => (/* binding */ checkProtocol),
/* harmony export */   f: () => (/* binding */ formatUrl),
/* harmony export */   g: () => (/* binding */ getUrlType),
/* harmony export */   i: () => (/* binding */ isHttp),
/* harmony export */   r: () => (/* binding */ removeTrailingSlash),
/* harmony export */   s: () => (/* binding */ supportsDirect),
/* harmony export */   u: () => (/* binding */ urlToTitle)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./storage-0353a769.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-0353a769.js");
/* harmony import */ var _ags_eb458a03_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ags-eb458a03.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ags-eb458a03.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */







function removeTrailingSlash(url) {
    if ((url === null || url === void 0 ? void 0 : url.slice(-1)) === "/") {
        // Remove the "/" from the end of the url
        return url.slice(0, url.length - 1);
    }
    return url;
}
// borrowed from arcgisonline.sharing.util
async function urlToObject(url) {
    var _a;
    const apiVersion = (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.api) !== null && _a !== void 0 ? _a : 4;
    const [urlUtils] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__.l)([apiVersion === 4 ? "esri/core/urlUtils" : "esri/urlUtils"]);
    let urlObj = urlUtils.urlToObject(url);
    urlObj.query = urlObj.query || {};
    for (let key in urlObj.query || {}) {
        if (urlObj.query.hasOwnProperty(key)) {
            // strip out some HTML (<,>,%3C,%3E,&lt;,&gt;)
            if (!Array.isArray(urlObj.query[key])) {
                urlObj.query[key] = urlObj.query[key].replace(/(&lt;|&gt;|<|>|%3C|%3E)/g, "");
            }
        }
    }
    return urlObj;
}
function urlToTitle(url) {
    return (url === null || url === void 0 ? void 0 : url.replace(/^.*\//, "").replace(/.[^.]*$/, "")) || "";
}
function supportsDirect(type) {
    // TODO: Set mapped AGSTypes to UrlType, then re-enable here
    const direct = ["WFS", "GeoJson", "CSV", "GeoRSS", "KML", "OGCFeatureServer", "WMS", "WMTS"];
    return direct.includes(type);
}
function supportsHttps(url) {
    const { config, portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c;
    let supportsHttps = false;
    if (!url) {
        return false;
    }
    (config.httpsDomains || []).forEach((domain) => {
        if (url.indexOf(`.${domain}/`) > -1 || url.indexOf(`/${domain}/`) > -1) {
            supportsHttps = true;
        }
    });
    if (!supportsHttps) {
        let portalHostname = portal.portalHostname;
        if (portalHostname.indexOf("/") > -1) {
            portalHostname = portalHostname.substring(0, portalHostname.indexOf("/"));
        }
        if (url.indexOf(portalHostname) > -1) {
            supportsHttps = true;
        }
    }
    return supportsHttps;
}
function isHostedService(url) {
    if (!url) {
        return false;
    }
    const { config, portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c;
    const restBaseUrl = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal);
    const hostname = new URL(restBaseUrl).hostname;
    const isSingleTenant = false === config.isMultiTenant;
    // only consider locally hosted if the restBaseUrl is on same domain as url
    // and esriGeowConfig.self.supportsHostedServices flag is enabled
    const isAGOL = url.indexOf(".arcgis.com/") !== -1;
    const isHostedServer = url.indexOf("//services") !== -1 ||
        url.indexOf("//tiles") !== -1 ||
        url.indexOf("//features") !== -1 ||
        url.indexOf("//locationservices") !== -1;
    const isLocallyHosted = portal.supportsHostedServices && url.indexOf(hostname) !== -1 && !isSingleTenant;
    return (isAGOL && isHostedServer) || (!isAGOL && isLocallyHosted);
}
function checkProtocol() {
    var _a;
    // For portal case, if adding a secure proxy, and page is http
    // we need to reload on https - IWS invalid case
    const protocol = window.location.protocol;
    if (protocol.toLowerCase().indexOf("https") === -1) {
        const cookie = (0,_storage_0353a769_js__WEBPACK_IMPORTED_MODULE_4__.c)("esri_auth", true);
        if (((_a = cookie === null || cookie === void 0 ? void 0 : cookie.auth_tier) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "web") {
            return false;
        }
        else {
            return true;
        }
    }
    else {
        return true;
    }
}
function formatGISUrl(url) {
    /*
       User  entered :
       http://sampleserver3.arcgisonline.com
       Software completes to :
       http://sampleserver3.arcgisonline.com/arcgis/rest/services
  
       User  entered :
       http://sampleserver3.arcgisonline.com/arcgis
       Software completes to:
       http://sampleserver3.arcgisonline.com/arcgis/rest/services
  
       User  entered :
       http://sampleserver3.arcgisonline.com/arcgis/rest/services
       Software completes to:
       http://sampleserver3.arcgisonline.com/arcgis/rest/services
  
       User entered a url to a folder in a server :
       http://sampleserver3.arcgisonline.com/arcgis/rest/services/petro
       Software completes to:
       http://sampleserver3.arcgisonline.com/arcgis/rest/services/petro
  
       User entered a url to a folder in a server :
       http://sampleserver3.arcgisonline.com/arcgis/rest/services/water/MapServer
       Software completes to:
       http://sampleserver3.arcgisonline.com/arcgis/rest/services/water/MapServer
       */
    let u = url.toLowerCase();
    // add http:// if it's missing
    if (u.indexOf("http://") == -1 && u.indexOf("https://") == -1) {
        url = "https://" + url;
        u = url.toLowerCase();
    }
    // find path part of URL
    let pathPos = u.indexOf("//");
    pathPos = u.indexOf("/", pathPos + 2);
    // just domain?
    if (pathPos == -1) {
        url += "/arcgis/rest/services";
        u = url.toLowerCase();
    }
    else if (pathPos == u.length - 1) {
        url += "arcgis/rest/services";
        u = url.toLowerCase();
    }
    // just arcgis path?
    let p0 = u.indexOf("/arcgis", pathPos);
    if (p0 == u.length - 7) {
        url += "/rest/services";
        u = url.toLowerCase();
    }
    else if (p0 == u.length - 8) {
        url += "rest/services";
        u = url.toLowerCase();
    }
    // just server path? (WebAdaptor)
    p0 = u.indexOf("/server", pathPos);
    if (u.endsWith("/server")) {
        url += "/rest/services";
        u = url.toLowerCase();
    }
    else if (u.endsWith("/server/")) {
        url += "rest/services";
        u = url.toLowerCase();
    }
    // replace SOAP end point or short REST end point with REST end point
    const p1 = u.indexOf("/rest/services", pathPos);
    const p2 = u.indexOf("/services", pathPos);
    const p3 = u.indexOf("/rest", pathPos);
    if (p1 == -1 && p2 > -1) {
        url = `${url.substring(0, p2)}/rest/services${url.substring(p2 + 9)}`;
        u = url.toLowerCase();
    }
    else if (p1 == -1 && p3 > -1) {
        url = `${url.substring(0, p3)}/rest/services${url.substring(p3 + 5)}`;
        u = url.toLowerCase();
    }
    // is it a REST end point?
    if (u.indexOf("/rest/services") == -1) ;
    return url;
}
const formatUrl = (url, allSSL = false) => {
    const protocolRegex = /(http|https|ftp):\/\/?/;
    url = removeTrailingSlash(url);
    if (!protocolRegex.exec(url)) {
        url = `https://${url}`;
    }
    if ((allSSL || location.protocol === "https:") && (isHostedService(url) || supportsHttps(url))) {
        url = url.replace("http:/", "https:/");
    }
    // Filter out dynamicLayer
    url = url.indexOf("/dynamicLayer?") > -1 ? url.substring(0, url.indexOf("/dynamicLayer?")) : url;
    return url;
};
/** Get type based on input url and also returns a fix if url is malformed
 */
const getUrlType = (url, isPortal = false) => {
    var _a, _b, _c;
    if (!url) {
        return { error: { code: "invalidUrl" } };
    }
    if (isHttp(url, isPortal)) {
        return { error: { code: "httpWarning" } };
    }
    const decodedUrl = decodeURIComponent(url);
    const kmlType = decodedUrl.replace(_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_1__.v, "").match(/((\.|\/)*(kml|kmz))/gi);
    const ogcType = decodedUrl.replace(_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_1__.v, "").match(/((\/|\=)(wmts|wms|wfs))/gi);
    const ogcFeatureType = decodedUrl.replace(_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_1__.v, "").match(/((\/|\=)(OGC|OGCFeatureServer))/gi);
    const rssType = decodedUrl.replace(_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_1__.v, "").match(/((\.|\/)*(rss))/gi);
    const serverType = (_a = decodedUrl.replace(_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_1__.v, "").match(_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_1__.r)) === null || _a === void 0 ? void 0 : _a[1];
    const containsAGS = decodedUrl.replace(_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_1__.v, "").match(_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_1__.c);
    const csvType = decodedUrl.replace(_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_1__.v, "").match(/((\.|\/)*(csv))/gi);
    const tileLayerType = decodedUrl
        .replace(_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_1__.v, "")
        .match(/(\.|\/)((\$?{(z|level)})\/*(\$?{(x|col)})\/*(\$?{(y|row)}))/gi);
    let type = null;
    if (decodedUrl.match(_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_1__.b)) {
        type = "GeoJson";
    }
    else if (ogcFeatureType && !ogcType && !serverType) {
        type = "OGCFeatureServer";
    }
    else if (serverType && !ogcType) {
        type = _ags_eb458a03_js__WEBPACK_IMPORTED_MODULE_5__.a[serverType];
    }
    else if (containsAGS) {
        // Assume URLS with /ags/ and no specified server are Map Services
        type = "Map Service";
    }
    else if (ogcType) {
        const symbol = (ogcType === null || ogcType === void 0 ? void 0 : ogcType[0].charAt(0)) === "/" ? "/" : "=";
        type = (_c = (_b = ogcType === null || ogcType === void 0 ? void 0 : ogcType[0]) === null || _b === void 0 ? void 0 : _b.split(symbol)[1]) === null || _c === void 0 ? void 0 : _c.toUpperCase();
    }
    else if (kmlType) {
        type = "KML";
    }
    else if (rssType) {
        type = "GeoRSS";
    }
    else if (csvType) {
        type = "CSV";
    }
    else if (tileLayerType) {
        type = "Tile Layer";
    }
    return { result: type };
};
/**
 * Checks if url includes http://
 * Not applicable to enterprise
 */
const isHttp = (url, isPortal) => {
    return !isPortal && url.includes("http://");
};



//# sourceMappingURL=url-35875a10.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,