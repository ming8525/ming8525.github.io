"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-c13757"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-schema-editor-category_2.entry.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-schema-editor-category_2.entry.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_schema_editor_category: () => (/* binding */ ArcgisSchemaEditorCategory),
/* harmony export */   arcgis_schema_editor_category_row: () => (/* binding */ ArcgisSchemaEditorCategoryRow)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _sortable_esm_7e785780_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sortable.esm-7e785780.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/sortable.esm-7e785780.js");
/* harmony import */ var _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./categories-ca134005.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js");
/* harmony import */ var _util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util-2a0e2f08.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/util-2a0e2f08.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */






const ARCGIS_SCHEMA_EDITOR_DRAG_HANDLE_CLASS = "arcgis-schema-editor-category-row__drag-handle";

const arcgisSchemaEditorCategoryCss = ".arcgis-schema-editor-category__category-container{list-style-type:none;margin-top:0px;margin-bottom:0px;margin-bottom:0.25rem;padding-inline-start:1rem;margin-inline-start:1rem;border-left:1px solid var(--calcite-color-border-2)}.arcgis-schema-editor-category__category-container--root{margin-left:0px;margin-right:0px;padding-left:0px;padding-right:0px;border-width:0px}.arcgis-schema-editor-category__category-container__hidden{display:none}.arcgis-schema-editor-category__add-category-btn--hide,.arcgis-schema-editor-category__new-category--hide{display:none}";

const ArcgisSchemaEditorCategory = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSchemaEditorInternalDeleteClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSchemaEditorInternalDeleteClick", 7);
        this.listOrderChanged = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "listOrderChanged", 7);
        this.itemRefs = {};
        this.isMaxDepth = false;
        this.isRoot = false;
        this.renderCategoryContainer = () => {
            const { category, canAddCategory, isRoot, isCollapsed, isAddingCategory, isBeingDragged, canEditCategory, saveNewTitle, saveNewCategory, maxDepth, i18n, isMoveValid, canDeleteCategory, newCategoryMode, isMaxDepth } = this;
            const path = category.path;
            const hideSubcategories = isCollapsed || isBeingDragged;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { class: {
                    "arcgis-schema-editor-category__category-container": true,
                    // Use css to hide so it doesn't flicker when expanding
                    "arcgis-schema-editor-category__category-container__hidden": hideSubcategories,
                    "arcgis-schema-editor-category__category-container--root": isRoot
                }, ref: (ele) => (this.dragContainerRef = ele) }, category.categories.map((subcategory) => {
                const categoryPath = subcategory.path;
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", { key: categoryPath }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-schema-editor-category", { category: subcategory, newCategoryMode: newCategoryMode, canAddCategory: canAddCategory, canDeleteCategory: canDeleteCategory, canEditCategory: canEditCategory, i18n: i18n, maxDepth: maxDepth, isMoveValid: isMoveValid, saveNewTitle: saveNewTitle, saveNewCategory: saveNewCategory, ref: (el) => (this.itemRefs[categoryPath] = el) })));
            }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-schema-editor-category-row", { class: {
                    // Can't just not render to prevent flicker animation
                    "arcgis-schema-editor-category__new-category--hide": !isAddingCategory
                }, category: {
                    categories: [],
                    count: 0,
                    path: (0,_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_2__.a)(path, { title: "new-category" }),
                    title: ""
                }, isCollapsible: false, isCollapsed: true, isNewCategory: true, canDeleteCategory: false, canEditCategory: () => true, i18n: i18n, onArcgisSchemaEditorInternalCancelClick: () => (this.isAddingCategory = false), saveNewTitle: async (event) => {
                    const doSave = await saveNewCategory(event);
                    if (doSave) {
                        this.isAddingCategory = false;
                    }
                    return doSave;
                }, ref: (ele) => (this.newCategoryRef = ele) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", kind: "neutral", onClick: () => (this.isAddingCategory = true), iconStart: "plus-circle", ref: (el) => (this.addCategoryButtonRef = el), class: {
                    "arcgis-schema-editor-category__add-category-btn--hide": isAddingCategory || isMaxDepth || isBeingDragged || !canAddCategory || isCollapsed
                } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: this.addCategoryButtonRef }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, isRoot ? i18n.categoryItem.addCategory : i18n.categoryItem.addSubcategory))));
        };
        this.category = undefined;
        this.canAddCategory = undefined;
        this.canDeleteCategory = undefined;
        this.newCategoryMode = undefined;
        this.showInputByDefault = false;
        this.canEditCategory = undefined;
        this.maxDepth = undefined;
        this.i18n = undefined;
        this.isMoveValid = undefined;
        this.saveNewTitle = undefined;
        this.saveNewCategory = undefined;
        this.isCollapsed = false;
        this.isBeingDragged = false;
        this.isAddingCategory = false;
        this.addCategoryButtonRef = undefined;
    }
    componentWillLoad() {
        const path = this.category.path;
        this.isRoot = path === null;
        this.isMaxDepth = this.isRoot ? false : (0,_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__.f)(path) > this.maxDepth;
        this.isCollapsed = this.newCategoryMode && !this.isRoot;
    }
    componentDidLoad() {
        // Have to do it here since this will trigger `@Watch("isAddingCategory") and `reset` depends on a ref
        //  which is only available after the first mount
        this.onShowInputByDefaultChange();
        new _sortable_esm_7e785780_js__WEBPACK_IMPORTED_MODULE_1__.S(this.dragContainerRef, {
            group: "arcgis-schema-editor",
            animation: 200,
            handle: `.${ARCGIS_SCHEMA_EDITOR_DRAG_HANDLE_CLASS}`,
            chosenClass: "arcgis-schema-editor-category-row--dragging",
            onSort: (event) => {
                const { from, to, oldIndex, newIndex, item } = event;
                const fromCategory = from.closest("arcgis-schema-editor-category").category;
                const toCategory = to.closest("arcgis-schema-editor-category").category;
                // `item` is the element being dragged, not the container so we need to look downward instead of upward
                const fromItemCategory = item.querySelector("arcgis-schema-editor-category").category;
                const payload = {
                    fromCategory,
                    toCategory,
                    fromItemCategory,
                    fromIndex: oldIndex,
                    toIndex: newIndex
                };
                const isValidMove = this.isMoveValid ? this.isMoveValid(payload) : true;
                if (isValidMove === null) {
                    // Duplicate event case, just ignore
                    return;
                }
                if (!isValidMove) {
                    // Revert the move
                    from.insertBefore(item, from.children[oldIndex > newIndex ? oldIndex + 1 : oldIndex]);
                    return;
                }
                this.listOrderChanged.emit(payload);
            },
            setData: (dataTransfer) => {
                // ! Required by Firefox in order to DnD work: https://stackoverflow.com/a/19055350/1411105
                // https://github.com/SortableJS/Sortable/issues/1267#issuecomment-494757862
                dataTransfer.setData("foo", "bar");
            }
        });
    }
    onShowInputByDefaultChange() {
        this.isAddingCategory = this.newCategoryMode && this.isRoot && this.showInputByDefault;
    }
    onIsAddingCategoryChange() {
        var _a;
        (_a = this.newCategoryRef) === null || _a === void 0 ? void 0 : _a.reset();
    }
    async expandOrCollapseAll(collapseAll) {
        if (!this.isRoot) {
            this.isCollapsed = collapseAll;
        }
        Object.values(this.itemRefs).forEach((item) => {
            // `?` because when collapsing, the child will be null
            item === null || item === void 0 ? void 0 : item.expandOrCollapseAll(collapseAll);
        });
    }
    async setIsBeingDragged(isBeingDragged) {
        const hasChildren = this.category.categories.length > 0;
        if (hasChildren) {
            this.isBeingDragged = isBeingDragged;
        }
    }
    render() {
        const { category, canDeleteCategory, canEditCategory, isRoot, isMaxDepth, isCollapsed, i18n, renderCategoryContainer, saveNewTitle, arcgisSchemaEditorInternalDeleteClick } = this;
        /**
         * In case of the root, we don't really have a root row
         *  so we just renders a category and its children, appropriately styled if nested
         */
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, !isRoot && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-schema-editor-category-row", { category: category, isCollapsible: !isMaxDepth, isCollapsed: isCollapsed, canDeleteCategory: canDeleteCategory, canEditCategory: (category) => canEditCategory({ category, parentCategory: this.category }), i18n: i18n, onArcgisSchemaEditorInternalDeleteClick: (event) => {
                event.stopPropagation();
                arcgisSchemaEditorInternalDeleteClick.emit(event.detail);
            }, onArcgisSchemaEditorInternalExpandClick: (event) => (this.isCollapsed = event.detail.isCollapsed), saveNewTitle: saveNewTitle })), renderCategoryContainer()));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "showInputByDefault": ["onShowInputByDefaultChange"],
        "isAddingCategory": ["onIsAddingCategoryChange"]
    }; }
};
ArcgisSchemaEditorCategory.style = arcgisSchemaEditorCategoryCss;

const arcgisSchemaEditorCategoryRowCss = ".arcgis-schema-editor-category-row{display:flex;align-items:center;background-color:var(--calcite-color-foreground-1);height:2.5rem;margin-bottom:0.25rem}.arcgis-schema-editor-category-row--editing{padding-left:0.5rem;padding-right:0.5rem}.arcgis-schema-editor-category-row__inline-input{font-size:0.875rem;width:100%}.arcgis-schema-editor-category-row__cta{display:flex;align-items:center;justify-content:center;height:100%;width:2.5rem}.arcgis-schema-editor-category-row__drag-handle{height:100%}.arcgis-schema-editor-category-row__btn-popover{white-space:nowrap;padding-left:0.5rem;padding-right:0.5rem;padding-top:0.25rem;padding-bottom:0.25rem}.arcgis-schema-editor-category-row__cant-edit-reason{--calcite-ui-icon-color:var(--calcite-color-status-warning)}.arcgis-schema-editor-category-row--dragging{opacity:0.25}";

const ArcgisSchemaEditorCategoryRow = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSchemaEditorInternalDeleteClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSchemaEditorInternalDeleteClick", 7);
        this.arcgisSchemaEditorInternalExpandClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSchemaEditorInternalExpandClick", 7);
        this.arcgisSchemaEditorInternalCancelClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSchemaEditorInternalCancelClick", 7);
        this.onCancelEdit = () => {
            const { arcgisSchemaEditorInternalCancelClick, isNewCategory } = this;
            if (!isNewCategory) {
                this.isEditing = false;
            }
            this.editedCategoryTitle = this.category.title;
            arcgisSchemaEditorInternalCancelClick.emit();
        };
        this.onSaveEdit = async () => {
            const { category, editInputRef, editedCategoryTitle, saveNewTitle, setInvalid, isNewCategory } = this;
            if (!editedCategoryTitle) {
                setInvalid();
                return false;
            }
            if (editedCategoryTitle === category.title && !isNewCategory) {
                this.isEditing = false;
                return true;
            }
            editInputRef.status = "idle";
            try {
                const saveResult = await saveNewTitle({
                    newTitle: editedCategoryTitle,
                    path: category.path,
                    categoryCount: category.count
                });
                if (!saveResult) {
                    setInvalid();
                    return false;
                }
                if (!isNewCategory) {
                    this.isEditing = false;
                }
                return true;
            }
            catch (error) {
                if (!isNewCategory) {
                    this.isEditing = false;
                }
                console.error(error);
                return false;
            }
        };
        this.setInvalid = () => {
            const { editInputRef } = this;
            editInputRef.status = "invalid";
            editInputRef.setFocus();
        };
        this.category = undefined;
        this.i18n = undefined;
        this.isNewCategory = false;
        this.canEditCategory = undefined;
        this.canDeleteCategory = undefined;
        this.isCollapsible = undefined;
        this.isCollapsed = undefined;
        this.saveNewTitle = undefined;
        this.isEditing = this.isNewCategory;
        this.editedCategoryTitle = this.category.title;
        this.expandCollapseButtonRef = undefined;
        this.deleteButtonRef = undefined;
        this.editInputRef = undefined;
        this.cantEditIconRef = undefined;
    }
    async reset() {
        const { isNewCategory, category, canEditReason } = this;
        if (isNewCategory && canEditReason === true) {
            this.editedCategoryTitle = category.title;
            this.editInputRef.status = "idle";
            /**
             * ! This is to handle the edge case where the `x` cta is clicked
             *  which cc-inline-editable will automatically go out of the edit mode
             * However, we don't want that in `isNewCategory` mode so we need to set it back to true
             *  after a bit to trigger the re-render
             */
            this.isEditing = false;
            await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(50);
            this.isEditing = true;
            this.editInputRef.setFocus();
        }
    }
    async setFocus() {
        this.editInputRef.setFocus();
    }
    componentWillLoad() {
        var _a, _b;
        this.canEditReason = (_b = (_a = this.canEditCategory) === null || _a === void 0 ? void 0 : _a.call(this, this.category)) !== null && _b !== void 0 ? _b : true;
    }
    render() {
        const { category, isCollapsed, isEditing, isCollapsible, canDeleteCategory, canEditReason, i18n, editedCategoryTitle, onCancelEdit, onSaveEdit, arcgisSchemaEditorInternalExpandClick, isNewCategory } = this;
        const count = category.count;
        const textContent = isEditing
            ? editedCategoryTitle
            : `${editedCategoryTitle} ${count ? `(${count})` : ""}`;
        const showEdit = canEditReason === true;
        const showDelete = showEdit && !isEditing && !isNewCategory && canDeleteCategory;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "arcgis-schema-editor-category-row" }, !isNewCategory && !isEditing && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", kind: "neutral", iconStart: "drag", class: ARCGIS_SCHEMA_EDITOR_DRAG_HANDLE_CLASS })), isCollapsible && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", kind: "neutral", onClick: () => arcgisSchemaEditorInternalExpandClick.emit({ isCollapsed: !isCollapsed }), iconStart: isCollapsed || isEditing ? "chevron-up" : "chevron-down", class: "cta", ref: (el) => (this.expandCollapseButtonRef = el) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: this.expandCollapseButtonRef }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "btn-popover" }, isCollapsed ? i18n.categoryItem.expand : i18n.categoryItem.collapse)))), showEdit ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-inline-editable", { class: "arcgis-schema-editor-category-row__inline-input", controls: true, editingEnabled: isEditing, afterConfirm: async () => {
                // ! Even though this trigger the loading state of the check CTA, the cancel CTA is still clickable
                // TODO: add a handle for when it's clicked when we're still loading
                const isValid = await onSaveEdit();
                if (isValid === false) {
                    // Throw to prevent getting out of edit mode
                    throw new Error();
                }
            }, onCalciteInlineEditableEditCancel: (event) => {
                event.stopPropagation();
                onCancelEdit();
            },
            // @ts-ignore --- we need to disable the trash can button on edit
            onCalciteInternalInlineEditableEnableEditingChange: () => (this.isEditing = true) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { value: textContent, onCalciteInputInput: (event) => (this.editedCategoryTitle = event.target.value), required: true, ref: (ele) => (this.editInputRef = ele) }))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "arcgis-schema-editor-category-row__inline-input" }, textContent), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { class: "arcgis-schema-editor-category-row__cant-edit-reason", icon: "exclamation-mark-triangle-f", appearance: "transparent", label: canEditReason, ref: (el) => (this.cantEditIconRef = el), text: "", textEnabled: false }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: this.cantEditIconRef }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "btn-popover" }, canEditReason)))), showDelete && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", kind: "danger", onClick: () => this.arcgisSchemaEditorInternalDeleteClick.emit({
                path: category.path,
                categoryCount: count
            }), iconStart: "trash", class: "cta", ref: (el) => (this.deleteButtonRef = el) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: this.deleteButtonRef }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "btn-popover" }, i18n.categoryItem.deleteCategory)))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSchemaEditorCategoryRow.style = arcgisSchemaEditorCategoryRowCss;



//# sourceMappingURL=arcgis-schema-editor-category_2.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CATEGORY_BASE_PATH),
/* harmony export */   U: () => (/* binding */ UPPER_CATEGORY_BASE_PATH),
/* harmony export */   a: () => (/* binding */ getCategoryUIPath),
/* harmony export */   g: () => (/* binding */ getRootCategoryPath)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const CATEGORY_BASE_PATH = "/categories";
const UPPER_CATEGORY_BASE_PATH = "/Categories";

// TODO: add unit tests
/**
 * Construct the path of the category based on the parent path and the category title
 */
const getCategoryUIPath = (parentPath, category, lowerCase = true) => {
    const basePath = parentPath !== null && parentPath !== void 0 ? parentPath : "";
    return `${basePath}${basePath.endsWith("/") ? "" : "/"}${lowerCase ? category.title.toLocaleLowerCase() : category.title}`;
};
/**
 * Find the root node title to use for categories
 */
function getRootCategoryPath(categories) {
    var _a;
    let categoryTitle = (_a = categories === null || categories === void 0 ? void 0 : categories[0]) === null || _a === void 0 ? void 0 : _a.title;
    if (categoryTitle && categoryTitle.charAt(0) !== "/") {
        categoryTitle = `/${categoryTitle}`;
    }
    return categoryTitle || UPPER_CATEGORY_BASE_PATH;
}



//# sourceMappingURL=categories-ca134005.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/util-2a0e2f08.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/util-2a0e2f08.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   M: () => (/* binding */ MAX_CATEGORY_NAME_LENGTH),
/* harmony export */   a: () => (/* binding */ getNewCategorySchemaFromDelete),
/* harmony export */   b: () => (/* binding */ getCategoryFromPath),
/* harmony export */   c: () => (/* binding */ checkNewCategoryTitleValid),
/* harmony export */   d: () => (/* binding */ getNewCategorySchemaFromTitleChange),
/* harmony export */   e: () => (/* binding */ getNewCategorySchemaFromCategoryAdd),
/* harmony export */   f: () => (/* binding */ getPathLength),
/* harmony export */   g: () => (/* binding */ getNewCategorySchemaFromMove),
/* harmony export */   h: () => (/* binding */ getUICategoryFromCategorySchema),
/* harmony export */   i: () => (/* binding */ countNumCategories)
/* harmony export */ });
/* harmony import */ var _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./categories-ca134005.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


// TODO: add unit tests
const getNewCategorySchemaFromMove = (category, { fromCategory: { path: fromPath }, toCategory: { path: toPath }, fromIndex, toIndex }) => {
    // Copy since this will be a destructive operation
    const uiCategory = structuredClone(category);
    const fromCategory = getCategoryFromPath(uiCategory, fromPath);
    let toCategory = fromCategory;
    if (fromPath !== toPath) {
        toCategory = getCategoryFromPath(uiCategory, toPath);
    }
    const [removed] = fromCategory.targetCategory.categories.splice(fromIndex, 1);
    toCategory.targetCategory.categories.splice(toIndex, 0, removed);
    return getCategorySchemaFromUICategory(uiCategory);
};
const getNewCategorySchemaFromTitleChange = (category, { newTitle, path }) => {
    const uiCategory = structuredClone(category);
    const categoryToChange = getCategoryFromPath(uiCategory, path);
    categoryToChange.targetCategory.title = newTitle;
    return getCategorySchemaFromUICategory(uiCategory);
};
const getNewCategorySchemaFromCategoryAdd = (category, { newTitle, path }) => {
    const uiCategory = structuredClone(category);
    // Remove the last part since it's just the placeholder
    // e.g. `/categories/category 1/new-input` -> `/categories/category 1`
    const containerPath = path.replace(/\/[^/]+$/, "");
    if (containerPath) {
        const { targetCategory } = getCategoryFromPath(uiCategory, containerPath);
        targetCategory.categories.push({ title: newTitle, categories: [], count: 0, path: null });
    }
    else {
        /**
         * This means we're adding a root level category when there is no category yet
         *
         * Can happens when we first set up the category schema
         */
        uiCategory.categories.push({ title: newTitle, categories: [], count: 0, path: null });
    }
    return getCategorySchemaFromUICategory(uiCategory);
};
const getNewCategorySchemaFromDelete = (category, { path }) => {
    const uiCategory = structuredClone(category);
    const { targetIndex, parentCategory } = getCategoryFromPath(uiCategory, path);
    parentCategory === null || parentCategory === void 0 ? void 0 : parentCategory.categories.splice(targetIndex, 1);
    return getCategorySchemaFromUICategory(uiCategory);
};
// * --- Utils
// Path we want to remove the base path since we count root as 0th level then also remove the beginning `/` to avoid empty string
const getPathLength = (path) => { var _a; return (_a = path === null || path === void 0 ? void 0 : path.replace(_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C, "").slice(1).split("/").length) !== null && _a !== void 0 ? _a : 0; };
/**
 * Get the category from schema based on the path
 */
const getCategoryFromPath = (uiCategory, path) => {
    if (path == null || path === _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C) {
        // Root level
        return { targetCategory: uiCategory, targetIndex: 1, parentCategory: null };
    }
    // Path starts with `/` so remove it
    const pathParts = path.slice(1).split("/");
    let curPath = path.indexOf(_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C) === 0 ? (0,_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.a)("", { title: pathParts.shift() }) : "";
    let parentCategory = null;
    let targetCategory = uiCategory;
    let targetIndex = 0;
    do {
        curPath = (0,_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.a)(curPath, { title: pathParts.shift() });
        parentCategory = targetCategory;
        targetIndex = targetCategory.categories.findIndex((subcategory) => subcategory.path === curPath);
        targetCategory = targetCategory.categories[targetIndex];
    } while (pathParts.length > 0 && targetCategory.categories.length);
    return { targetCategory, targetIndex, parentCategory };
};
/**
 * Create a nested category schema from the aggregated search result starting from root
 */
const getUICategoryFromCategorySchema = (categorySchema, categoryAggregationData) => {
    var _a, _b;
    return ({
        title: "",
        path: null,
        count: (_b = (_a = categoryAggregationData.fieldValues.find((fieldValue) => fieldValue.value === _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C)) === null || _a === void 0 ? void 0 : _a.count) !== null && _b !== void 0 ? _b : 0,
        categories: getUICategoryFromCategorySchemaRecursive(null, categorySchema, categoryAggregationData)
    });
};
const getCategorySchemaFromUICategory = (uiCategory) => uiCategory.categories.map(getCategoryFromUICategory);
const getCategoryFromUICategory = (uiCategory) => ({
    title: uiCategory.title,
    categories: uiCategory.categories.map(getCategoryFromUICategory)
});
const getUICategoryFromCategorySchemaRecursive = (parentPath, categorySchema, categoryAggregationData) => {
    return categorySchema.map((category) => {
        var _a, _b;
        const path = (0,_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.a)(parentPath !== null && parentPath !== void 0 ? parentPath : _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C, category);
        const categoryCount = (_a = categoryAggregationData.fieldValues.find((fieldValue) => fieldValue.value === path)) === null || _a === void 0 ? void 0 : _a.count;
        const subcategories = getUICategoryFromCategorySchemaRecursive(path, (_b = category.categories) !== null && _b !== void 0 ? _b : [], categoryAggregationData);
        return {
            title: category.title,
            path,
            count: categoryCount !== null && categoryCount !== void 0 ? categoryCount : 0,
            categories: subcategories
        };
    });
};
const countNumCategories = (categorySchema) => {
    // + 1 is itself
    return categorySchema.reduce((acc, cur) => { var _a; return acc + 1 + countNumCategories((_a = cur.categories) !== null && _a !== void 0 ? _a : []); }, 0);
};
const checkNewCategoryTitleValid = ({ targetCategory, targetParentCategory }) => {
    var _a;
    const categoryLowerCaseTitle = (_a = targetCategory.title.toLocaleLowerCase()) === null || _a === void 0 ? void 0 : _a.trim();
    if (!categoryLowerCaseTitle) {
        return "emptyTitle";
    }
    if (categoryLowerCaseTitle.length > MAX_CATEGORY_NAME_LENGTH) {
        return "maxCharacter";
    }
    // No duplicate category name on the same level
    if (targetParentCategory.categories.some((category) => category.title.toLowerCase() === categoryLowerCaseTitle && category.path !== targetCategory.path)) {
        return "destinationHasSameName";
    }
    return null;
};
const MAX_CATEGORY_NAME_LENGTH = 100;



//# sourceMappingURL=util-2a0e2f08.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,