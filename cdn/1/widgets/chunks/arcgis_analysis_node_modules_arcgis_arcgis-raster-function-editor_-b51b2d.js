"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-b51b2d"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.et-97fd9da7.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.et-97fd9da7.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "OK";
const cancel = "Loobu";
const enterURL = "Sisestage pilditeenuse URL";
const serviceURL = "Teenuse URL";
const selectRaster = "Vali raster";
const failedToLoadLayer = "Kihi laadimine nurjus";
const loadingLayer = "Kihi laadimine";
const selectFeature = "Valige objektikiht";
const enterFURL = "Sisestage objektiteenuse URL";
const addRaster = "Lisa rastri muutuja";
const addScalar = "Lisa konstant";
const raster = "Raster";
const scalar = "Skalaar";
const defaultModelName = "Rasterfunktsiooni mall";
const general = "Üldine";
const parameters = "Parameetrid";
const variables = "Muutujad";
const name = "Nimi";
const description = "Kirjeldus";
const parameter = "Parameeter";
const isPublic = "IsPublic";
const isDataset = "IsDataset";
const unknownPixelType = "Tundmatu";
const outputPixelType = "Väljundpiksli tüüp";
const u8PixelType = "8-bitine, allkirjastamata";
const s8PixelType = "8-bitine, allkirjastatud";
const u16PixelType = "16-bitine, allkirjastamata";
const s16PixelType = "16-bitine, allkirjastatud";
const u32PixelType = "32-bitine, allkirjastamata";
const s32PixelType = "32-bitine, allkirjastatud";
const f32PixelType = "32-bitine, ujuk";
const f64PixelType = "64-bitine, topelt";
const properties = "Omadused";
const multidimensionalRules = "Mitmemõõtmelised reeglid";
const matchVariables = "Sobita muutujad";
const unionDimensions = "Ühendi mõõtmed";
const rasterFunctionEditor = {
	invalidRFTMessage: "Rasterfunktsiooni mall ei sobi.",
	rfxArgsEditor: {
		outputRaster: "OutputRaster",
		raster: "Raster",
		unsupportedDataTypeWarning: "Järgmisi argumente ei kuvata, kuna neid praegu ei toetata.",
		unsupportedFunction: "Sisaldab praegu toetuseta rasterfunktsioone."
	},
	rfxRasterInput: {
		selectLayer: "Vali kiht",
		browseLayers: "Sirvi kihte",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Meetod",
		bandLabel: "Sagedusriba",
		combinationLabel: "Kombinatsioon"
	},
	rfxRemapGrid: {
		minimum: "Miinimum",
		maximum: "Maksimum",
		output: "Väljund",
		noData: "NoData",
		remapValuesLabel: "Leia uued väärtused"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Rastri muutujad",
		deleteSelectedVars: "Eemalda valitud muutujad"
	},
	rfxClippingGeometry: {
		clippingLayer: "Väljalõike kiht",
		clippingRaster: "Väljalõike raster",
		clippingGeometry: "Geomeetria lõige",
		customExtent: "Kohandatud ulatus",
		outputExtent: "Väljundi ulatus",
		currentExtent: "Kaardi praegune ulatus",
		drawLabel: "Joonista"
	},
	rfxCustomExtent: {
		top: "Üles",
		right: "Paremal",
		bottom: "Alumine",
		left: "Vasakul"
	},
	rfxRasterArrayEditor: {
		moveUp: "Liiguta ülespoole",
		moveDown: "Liiguta allapoole",
		remove: "Eemalda"
	},
	rfxStatisticsGrid: {
		stdDev: "Standard- hälve",
		min: "Min",
		max: "Max",
		mean: "Keskmine"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Kaalutud summa tabel",
		id: "ID",
		layer: "Kiht",
		field: "Väli",
		weight: "Kaal",
		value: "Väärtus",
		selectLayer: "Vali kiht"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Kaalutud ülekatte tabel",
		id: "ID",
		layer: "Kiht",
		field: "Väli",
		influence: "Mõju",
		sumOfInfluence: "Mõju summa",
		value: "Väärtus",
		remapTable: "Vastenduste tabel",
		scale: "Mõõtkava",
		scales: "Mõõtkavad",
		selectRaster: "Vali raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Sirvi objektikihte",
		addPointLayer: "Sirvi punktikihte"
	},
	rfxFieldSelect: {
		value: "Väärtus",
		count: "Koguarv"
	},
	rfxAttributeTable: {
		tableType: "Tabeli tüüp",
		manual: "Käsitsi",
		external: "Väline",
		minVal: "Miinimumväärtus",
		maxVal: "Maksimumväärtus",
		baseClassName: "Klassi baasnimi",
		colorScheme: "Värviskeem",
		defaultClassName: "Märgis_",
		generateTable: "Genereeri tabel",
		browseTable: "Sirvi tabelit",
		value: "Väärtus",
		classname: "ClassName",
		color: "Värv"
	},
	rfxFieldNumberSwitchable: {
		number: "Numbriline",
		field: "Väli",
		string: "Tekstistring",
		linearUnit: "Lineaarne mõõtühik"
	},
	rfxPropertySet: {
		name: "Nimi",
		value: "Väärtus"
	},
	rfxConversionGrid: {
		size: "Suurus"
	},
	rfxTransposeBit: {
		bitPattern: "Bitimuster",
		outputBit: "Väljundbitt",
		inputBit: "Sisendbitt"
	},
	rfxSpatialReference: {
		placeHolder: "Täpsusta märksõna järgi",
		coordinateSystem: "Koordinaatsüsteem",
		gcs: "Geograafiliste koordinaatide süsteem",
		pcs: "Tasapinnaliste ristkoordinaatide süsteem",
		vcs: "Vertikaalne koordinaatsüsteem"
	}
};
const rfxLicenseInfo = "Seda rastrifunktsiooni malli võib kasutada teie piltide töötlemiseks ArcGIS Image Serveris.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Arvutab rastris pikslite areakoosinuse.",
		aCosHDesc: "See funktsioon arvutab rastri pikslite areakoosinuse.",
		aCosName: "ACos",
		aCosSnip: "Arvutab rastri piksli pöördkoosinuse.",
		aCosDesc: "See rasterfunktsioon arvutab rastris pikslite pöördkoosinuse. Matemaatikas on kõigil trigonomeetrilistel funktsioonidel kehtivate sisendväärtuste kindlaks määratud vahemik, mida nimetatakse domeeniks. Iga funktsiooni väljundväärtustel on samuti ettenähtud vahemik. Selle tööriista puhul on domeen [-1, 1] ja vahemik [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Arvutab rastris pikslite areasiinuse.",
		aSinHDesc: "See funktsioon arvutab rastri pikslite areasiinuse.",
		aSinName: "ASin",
		aSinSnip: "Arvutab rastris pikslite siinuse pöördväärtuse.",
		aSinDesc: "See funktsioon arvutab rastri pikslite siinuse pöördväärtuse.",
		aTan2Name: "ATan2",
		aTan2Snip: "Arvutab rastris pikslite tangensi pöördväärtuse (x,y põhjal).",
		aTan2Desc: "See funktsioon arvutab rastri pikslite tangensi pöördväärtuse (x,y põhjal).",
		aTanHName: "ATanH",
		aTanHSnip: "Arvutab rastris pikslite areatangensi.",
		aTanHDesc: "See funktsioon arvutab rastri pikslite areatangensi.",
		aTanName: "ATan",
		aTanSnip: "Arvutab rastris pikslite tangensi pöördväärtuse.",
		aTanDesc: "See funktsioon arvutab rastri pikslite tangensi pöördväärtuse.",
		absName: "Abs",
		absSnip: "Arvutab rastris pikslite absoluutväärtuse.",
		absDesc: "Funktsioon Abs arvutab rastri pikslite absoluutväärtuse.",
		reflectanceName: "Näiv peegeldavus",
		reflectanceSnip: "Teisendab töötlemata pildid atmosfääri ülaosa (TOA) väärtusteks, võttes arvesse anduri omadusi, päikese asukohta ja jäädvustamise aega.",
		reflectanceDesc: "See funktsioon korrigeerib teatud satelliidiandurite korral kujutise heleduse digitaalskaala (DN) väärtused. Korrigeerimiste aluseks on päikese asukoht, kujutise jäädvustamise kuupäev ning anduri omadused iga spektraalriba võimenduse ja nihke määramiseks. Selle funktsiooni abil saab korrigeerida satelliitpiltide peegeldavuse või heleduse väärtusi, lähtudes stseeni valgustusest ja anduri võimenduse seadetest. Kujutisi korrigeeritakse vastavalt teoreetiliselt ühtsetele valgustusoludele, et eri kuupäevadel ja eri andurite abil jäädvustatud stseenide vahel oleks vähem variatsioone. See võib abiks olla näiteks piltide liigitamisel, värvustasakaalu korrigeerimisel ja mosaiikimisel. Seda funktsiooni saab kasutada ainult konkreetsete piltide korral. Sobivad andurid on Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 ja Pleiades.<div><br/>Funktsioon teeb kahte tüüpi korrektsioone. Esimene põhineb võimendussätetel. Algsed heledusväärtused luuakse kujutise väärtuste põhjal uuesti, kasutades selleks võimenduse tagasipööramise võrrandeid. Teine korrektsioon on seotud päikese asimuudi ja heleduse erinevustega. Algseid heleduse väärtusi korrigeeritakse vastavalt ühtsetele valgustusoludele, normaliseerides muutuvates valgusoludes jäädvustatud stseenid. Ehkki väljundkujutise andmetüüp on sama mis sisendkujutise andmetüüp, on väljundväärtused üldjuhul sisendväärtustest madalamad ja piiritletud kehtiva andmevahemikuga.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Arvutab argumendistatistika, sh Arg Max (argumendi maksimum), Arg Min (argumendi miinimum), Arg Median (argumentide keskmine) ja Duration (kestus).",
		argStatisticsDesc: "See funktsioon arvutab argumendistatistikat. Funktsioonis ArgStatistics on neli meetodit: ArgMax, ArgMin, ArgMedian ja Duration.",
		arithmeticName: "Aritmeetiline",
		arithmeticSnip: "Teeb aritmeetikatehte kahe rastri või rastri ja skalaari vahel.",
		arithmeticDesc: "Aritmeetiline funktsioon teeb aritmeetikatehte kahe rastri või rastri ja skalaari vahel ja vastupidi.",
		aspectSlopeName: "Aspekt-kalle",
		aspectSlopeSnip: "Loob rastri, millel kuvatakse nii pideva pinna aspekt (suund) kui ka kalle (järskus) digitaalse kõrgusmudelina.",
		aspectSlopeDesc: "Aspekti-kalde funktsioon loob rastrikihi, mis kuvab ühtaegu nii pinna kalde kui ka aspekti (suuna). Aspekt määrab iga piksli allasuunakalde maksimaalse väärtuse muutuse määra naaberpikslite suhtes. Aspekt on põhimõtteliselt kallaku suund. Väljundrastri väärtused on aspekti ilmakaar, mida tähistab värvitoon. Kalle näitab kõrguse muutumise määra iga digitaalse kõrgusmudeli (DEM) piksli kohta. Kalle tähistab pinna järskust ning on liigitatud kolmeks klassiks, mida kuvamisel eristab värviküllastus (eredus).<div><br/>Aspekti ja kalde väljundrastri piksliväärtused kajastavad aspekti ja kalde kombinatsiooni. Piksleid, mille väärtus jääb alla 20, käsitletakse tasandikuna ja need kuvatakse halli värviga. Aspekti ja kalde väärtused, mis on 21 või suuremad, kuvatakse erineva värviküllastusega: 21–30 —väikese kalde küllastus, 31–40—mõõduka kalde küllastus, 41 ja rohkem—suure kalde küllastus</div>",
		aspectName: "Aspekt",
		aspectSnip: "Näitab piksli suunda, kus 0 tähistab põhjakaart ja nurk suureneb päripäeva kuni 360 kraadini.",
		aspectDesc: "Aspekti funktsioon määrab iga piksli allapoole kallaku maksimaalse väärtuse muutuse määra naaberpikslite suhtes. Aspekt on põhimõtteliselt kallaku suund. Väljundrastri väärtused on aspekti kompassi suund.<div><br/>Selle funktsiooni sisend on sisendraster. Aspekti funktsiooni rakendatakse sageli digitaalsele kõrgusmudelile (DEM). Aspekt kuvatakse vaikimisi hallitoonides pildina. Värvikaardi funktsiooniga saate määrata konkreetse värviskeemi või lubada mosaiiki vaataval inimesel sümboleid oma värviskeemiga muuta.</div>",
		tableName: "Atribuuttabel",
		tableSnip: "Kasutab tabelit andmestiku väärtustele nimede ja sümbolite panekuks. Tabeli veerud on komaeraldusega: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "Atribuuttabeli funktsiooni abil saate määratleda atribuuttabeli, mis sümboliseerib üheribalist mosaiikandmestikku või rasterandmestikku. <div><br/>Sellest on abi näiteks juhul, kui soovite esitada kujutisi, mis on juba läbinud maakasutuse klassifikatsiooni ning on liigitatud näiteks metsamaaks, märgalaks, põllumaaks või linnamaastikuks. Kui teie tabel sisaldab punase, rohelise ja sinise värvi järgi nimetatud välju, kasutatakse nende väljade väärtusi pildi renderdamisel värvikaardina.</div>",
		bandArithmeticName: "Lainepikkuse aritmeetika",
		bandArithmeticSnip: "Arvutab indeksid valmisvalemeid või kasutaja määratletud avaldisi kasutades.",
		bandArithmeticDesc: "Lainepikkuse aritmeetika funktsioon teeb rasterandmestiku spektraalribadega aritmeetikatehte. Saate valida mõne valmisalgoritmi või ise üherealise valemi sisestada. Toetatud tehtemärgid on -,+,/,* ja unaarne -.",
		thresholdName: "Binaarne lävisegmentimine",
		thresholdSnip: "Pidevandmed korraldatakse ees- ja taustaandmeteks, minimeerides kahe klassi vahelise kovariatsiooni.",
		thresholdDesc: "Kui rasterandmestikul on bimodaalne jaotus, loob see funktsioon uue rastri, mis jaotab andmed kahte omaette klassi. See loob väikese väärtusega klassi, mis kuvatakse mustade pikslitega, ja suure väärtusega klassi, mis kuvatakse valgete pikslitega.",
		bitwiseAndName: "Bitwise And",
		bitwiseAndSnip: "Teeb kahe sisendrastri binaarväärtustega tehte Bitwise And.",
		bitwiseAndDesc: "Funktsioon Bitwise And teeb kahe sisendrastri binaarväärtustega tehte Bitwise And.",
		bitwiseLeftShiftName: "Bitwise Left Shift",
		bitwiseLeftShiftSnip: "Teeb kahe sisendrastri binaarväärtustega tehte Bitwise Left Shift.",
		bitwiseLeftShiftDesc: "Funktsioon Bitwise Left Shift teeb kahe sisendrastri binaarväärtustega tehte Bitwise Left Shift.",
		bitwiseNotName: "Bitwise Not",
		bitwiseNotSnip: "Teeb kahe sisendrastri binaarväärtustega täiendtehte Bitwise Not.",
		bitwiseNotDesc: "Funktsioon teeb sisendrastri binaarväärtusega täiendtehte Bitwise Not.",
		bitwiseOrName: "Bitwise Or",
		bitwiseOrSnip: "Teeb kahe sisendrastri binaarväärtustega tehte Bitwise Or.",
		bitwiseOrDesc: "Funktsioon teeb kahe sisendrastri binaarväärtustega tehte Bitwise Or. ",
		bitwiseRightShiftName: "Bitwise Right Shift",
		bitwiseRightShiftSnip: "Teeb kahe sisendrastri binaarväärtustega tehte Bitwise Right Shift.",
		bitwiseRightShiftDesc: "Funktsioon teeb kahe sisendrastri binaarväärtustega tehte Bitwise Right Shift.",
		bitwiseXorName: "Bitwise Xor",
		bitwiseXorSnip: "Teeb kahe sisendrastri binaarväärtustega tehte Bitwise eXclusive Or.",
		bitwiseXorDesc: "Funktsioon teeb kahe sisendrastri binaarväärtustega tehte Bitwise eXclusive Or.",
		booleanAndName: "Boolean And",
		booleanAndSnip: "Teeb kahe sisendrastri piksliväärtustega tehte Boolean And. Kui mõlemad sisendväärtused on tõesed (pole null), on väljundväärtus 1. Kui üks sisend või mõlemad sisendid on väärad (null), on väljund 0.",
		booleanAndDesc: "Funktsioon teeb kahe sisendi piksliväärtustega tehte Boolean And. Kui mõlemad sisendväärtused on tõesed (pole null), on väljundväärtus 1. Kui üks sisendväärtus või mõlemad sisendväärtused on väärad (null), on väljundväärtus 0. ",
		booleanNotName: "Boolean Not",
		booleanNotSnip: "Teeb sisendrastri piksliväärtustega täiendtehte Boolean Not. Kui sisendväärtused on tõesed (pole null), on väljundväärtus 0. Kui sisendväärtused on väärad (null), on väljund 1.",
		booleanNotDesc: "Funktsioon teeb sisendrastri piksliväärtustega täiendtehte Boolean Not. Kui sisendväärtused on tõesed (pole null), on väljundväärtus 0. Kui sisendväärtused on väärad (null), on väljundväärtus 1.",
		booleanOrName: "Boolean Or",
		booleanOrSnip: "Teeb kahe sisendrastri piksliväärtustega tehte Boolean Or. Kui üks sisendväärtus või mõlemad sisendväärtused on tõesed (pole null), on väljundväärtus 1. Kui mõlemad sisendväärtused on väärad (null), on väljund 0.",
		booleanOrDesc: "Funktsioon teeb kahe sisendrastri piksliväärtustega tehte Boolean Or. Kui üks sisendväärtus või mõlemad sisendväärtused on tõesed (pole null), on väljundväärtus 1. Kui mõlemad sisendväärtused on väärad (null), on väljundväärtus 0.",
		booleanXorName: "Boolean Xor",
		booleanXorSnip: "Teeb kahe sisendrastri piksliväärtustega tehte Boolean eXclusive Or. Kui üks sisendväärtus on tõene (pole null) ja teine väär (null), on väljund 1. Kui mõlemad sisendväärtused on tõesed või mõlemad on väärad, on väljund 0.",
		booleanXorDesc: "Funktsioon teeb kahe sisendrastri piksliväärtustega tehte Boolean eXclusive Or. Kui üks sisendväärtus on tõene (pole null) ja teine väärtus on väär (null), on väljundväärtus 1. Kui mõlemad sisendväärtused on tõesed või mõlemad on väärad, on väljundväärtus 0.",
		bufferedRasterName: "Puhverdatud",
		bufferedRasterSnip: "Puhverdab viimati vaadatud piksliploki.",
		bufferedRasterDesc: "Funktsiooni Puhverdatud kasutatakse keerukate funktsiooniahelate jõudluse optimeerimiseks. See funktsioon talletab väljundi selle funktsiooniahela osa mälus, mis sellele eelneb. <div><br/>Lisage funktsioon funktsiooniredaktoris kohta, kus soovite väljundi talletada.</div>",
		rasterCalculatorName: "Kalkulaator",
		rasterCalculatorSnip: "Arvutab rastri rastripõhisest matemaatikaavaldisest.",
		rasterCalculatorDesc: "Kalkulaatori funktsioon lubab teil avaldisi luua ja käivitada ning kaasata neid funktsiooniahelatesse.",
		cellStatisticsName: "Pikslistatistika",
		cellStatisticsSnip: "Arvutab mitme rastri pikslikohase statistika. Saadaolevad statistikud on: enamik, maksimum, aritmeetiline keskmine, mediaan, miinimum, vähemik, protsentiil, vahemik, standardhälve, summa ja muutkond.",
		cellStatisticsDesc: "See funktsioon arvutab mitme rastri statistika pikslipõhisel alusel. Saadaolevad statistikud on: enamus, maksimum, aritmeetiline keskmine, mediaan, miinimum, vähemus, vahemik, standardhälve, summa ja muutkond.",
		classifyName: "Rühmita",
		classifySnip: "Määrab igale pikslile kindla klassi. Kaasata saate ka lisaandmed, näiteks segmenditud pildi.",
		classifyDesc: "See rastrifunktsioon klassifitseerib rasterandmestiku Esri klassifitseerijadefinitsiooni (.ecd) faili ja rasterandmestiku sisendite alusel. Rühmitamisfunktsioonis kasutatav .ecd-fail sisaldab kogu teavet konkreetse andmestiku ja klassifitseerija kohta ning selle genereerivad klassifitseerimistreeningu tööriistad (nt tugivektormasina treenimise või otsustuspuu treenimise tööriistad).",
		clipName: "Piiritlus",
		clipSnip: "Määrab rastri ulatuse koordinaatide või muu andmestiku abil.",
		clipDesc: "See funktsioon piiritleb rastri ristkülikuga vastavalt määratletud ulatustele või sisestatud pindobjekti klassi kujundile. Piiritluse määratlemiseks kasutatav kujund võib piiritleda rastri ulatuse või kindla ala rastri sees.",
		colorspaceConversionName: "Värvimudeli teisendus",
		colorspaceConversionSnip: "Teisendab rastri RGB-st HSV-ks ja vastupidi.",
		colorspaceConversionDesc: "Värvimudeli teisenduse funktsioon teisendab pildi värvimudeli HSV (värvitoon-küllastusväärtus) värviruumist RGB (punane-roheline-sinine) värviruumi või vastupidi.<div><br/>Seda funktsiooni saab kasutada mosaiikandmestikus.</div>",
		colormapToRGBName: "Värvikaardist RGB-ks",
		colormapToRGBSnip: "Teisendab üheribalise värvikaardiga rastri kolmeribaliseks (punane, roheline ja sinine) rastriks.",
		colormapToRGBDesc: "See funktsioon teisendab üheribalise värvikaardiga rastri kolmeribaliseks (punane, roheline ja sinine) rastriks.<div><br/>See funktsioon on abiks näiteks siis, kui teil on vaja luua seostatud värvikaardiga üheribalise rastri põhjal kolmeribaline raster. Iga punase, rohelise ja sinise riba loomiseks kasutatakse värvikaardi väärtusi. Seda funktsiooni saab kasutada mosaiikandmestikus.</div>",
		colormapName: "Värvikaart",
		colormapSnip: "Muudab piksliväärtused rasterandmete kuvamiseks kas hallitoonides või RGB-pildina vastavalt värvikaardile või värviskaalale.",
		colormapDesc: "Värvikaardi funktsioon on üks rasterandmete renderduse tüüpe. See teisendab piksliväärtused rasterandmete kuvamiseks kas hallitoonides või RGB värvipildina lähtuvalt värviskeemist või konkreetsetest värvidest värvikaardifailis. Värvikaarti saate kasutada analüüsitud andmete (nt liigitatud pildi) kujutamiseks või topograafilise kaardi (või indekseeritud värviga skannitud pildi) kuvamiseks.<div><br/>Värvikaardid sisaldavad selliste värvidega seostatud väärtuste komplekti, mida kasutatakse üheribalise rastri järjepidevaks kuvamiseks samade värvidega. Iga piksliväärtus on seostatud värviga, mis on määratletud RGB-väärtuste komplektina. Värvikaardid toetavad iga rastrisügavust peale ujukoma. Samuti toetavad need nii positiivseid kui ka negatiivseid väärtuseid ning võivad sisaldada puuduvate värvidega vastendatud väärtuseid. Puuduvaid väärtusi sisaldava värvikaardiga andmestiku kuvamisel ei kuvata nende puuduvate väärtustega piksleid.</div>",
		complexName: "Kompleks",
		complexSnip: "Ekstraktib kompleksarvudest magnituudi.",
		complexDesc: "See funktsioon arvutab kompleksväärtuste põhjal magnituudi.<div><br/>Seda funktsiooni kasutatakse enamasti RADAR-i piltidega, millel on kompleksandmetüüp. Seda saab kasutada mosaiikandmestikus.</div>",
		compositeBandName: "Liitribad",
		compositeBandSnip: "Ühendab mitu andmestikku üheks mitmeribaliseks rastriks.",
		compositeBandDesc: "Liitribade funktsioon võimaldab teil rastrid mitmeribalise kujutise moodustamiseks ühendada.",
		conName: "Con",
		conSnip: "Teeb tingimusliku Kui, Siis, Muidu tehte. Con-tehte kasutamise korral on enamasti vaja vähemalt kahte kokku aheldatud funktsiooni, kus üks funktsioon määrab kriteeriumid ja teine funktsioon on Con-tehe, mis kasutab neid kriteeriumeid ning määrab tõesed ja väärad väljundid.",
		conDesc: "Funktsioon Con määrab väljundrastri pikslid iga sisendpiksli kuisiis hinnangu põhjal. Kui tingimuse arvutamise tulem on tõene (1), tagastatakse tõese rastri piksliväärtused; kui tingimuse arvutamise tulem on väär (0), tagastatakse väära rastri piksliväärtused. Kriteeriumid määratakse ära loogilise matemaatikafunktsiooni väljundiga, millest saab sisendraster.",
		constantName: "Konstantne",
		constantSnip: "Loob ühe piksliväärtusega virtuaalse rastri.",
		constantDesc: "See funktsioon loob ühe piksliväärtusega virtuaalse rastri, mida saab kasutada rasterfunktsioonide mallides ja mosaiikandmestiku töötlemiseks.<div><br/>Konstantväärtust kasutatakse rastri iga piksliväärtuse jaoks.</div>",
		contourName: "Kontuur",
		contourSnip: "Loob kontuurjooned.",
		contourDesc: "Kontuuri funktsioon genereerib kontuurjooned, ühendades omavahel rastri kõrgusandmestikus sama kõrgusega punktid. Kontuurid on visualiseerimiseks rastritena loodavad samakõrgusjooned. Selle funktsiooni muudavad võimsaks järgmised põhiomadused: kontuure saab kiiresti ja dünaamiliselt genereerida väga suurte andmestike põhjal (nt World Elevation); kontuure saab kaardil meeldivama ilme andmiseks tasandada, säilitades samas kontuuride täpsuse; kontuuride vahe üle on olemas dünaamiline kontroll; väljundivariantide seas on kontuurjooned, viitekontuurjooned ja täitekontuurjooned.<div><br/>Kontuurjoonte kihi loomine RPF-objektina on abiks paljude eesmärkide saavutamiseks, kuna kontuurjooned saab ülekattena kaardile paigutada ning need annavad maastiku kohta teavet ilma nende all olevaid andmeid varjamata. Muu hulgas on need kasulikud näiteks ehitustöö, põllumajanduse ja veemajandusega seotud valdkondades.</div>",
		contrastBrightnessName: "Kontrastsus ja heledus",
		contrastBrightnessSnip: "Reguleerib rastri kontrastsust ja heledust.",
		contrastBrightnessDesc: "Kontrastsuse ja heleduse funktsioon rikastab rastriandmete välimust, muutes kujutise heledust ja kontrastsust. Heledussätete abil saab pilti muuta heledamaks (tumedamaid toone heledamaks, heledaid valgemaks), kontrastsussätete abil aga reguleerida tumedamate ja heledamate värvide vahet.<div><br/>Selle funktsiooni kasutamine muudab pikslite väärtust. Seetõttu tuleks seda kasutada juhul, kui soovite andmeid selgemalt kujutada, mitte siis, kui soovite andmeid kasutada analüüsis, mille jaoks on vaja teada pikslite töötlemata väärtust. Funktsioonist on kasu näiteks siis, kui avaldate andmed pildina, mida kasutatakse rakendustes, kus ei saa kujutiste kontrastsust ja heledust muuta, või kui soovite tagada, et pilt kuvatakse teie eelistatud sätetega.</div>",
		convolutionName: "Ahendus",
		convolutionSnip: "Rakendab rastri ulatuses filtri, et pildile teravust lisada, pilti hägustada, servjooni tuvastada, pilti siledamaks muuta või astmiku rakendada.",
		convolutionDesc: "Ahenduse funktsioon rakendab kujutise piksliväärtustele filtrid. Seda funktsiooni saab kasutada pildile teravuse lisamiseks või pildi hägustamiseks, pildil servjoonte tuvastamiseks või muude tuumapõhiste täiustuste jaoks. Filtreid kasutatakse rasterpildi kvaliteedi parendamiseks, kuna need võimaldavad parasiitandmed elimineerida või andmetes teatud omadusi paremini esile tõsta. Ahendusfiltrid rakendatakse liikuvale, kattuvale tuumale (aken või naabrus), näiteks 3x3. Ahendusfiltrid arvutavad piksli väärtuse tema naabrite kaalu alusel.",
		corridorName: "Koridor",
		corridorSnip: "Arvutab kahe kumulatiivse kulu sisendrastri kumulatiivsete kulude summa.",
		corridorDesc: "Koridori funktsioon arvutab kahe kumulatiivse kulu sisendrastri kumulatiivsete kulude summa. Ehkki sisendina võib kasutada kahte suvalist rastrit, peaksid need tähendusliku tulemuse saamiseks olema töötlemata kumulatiivsete kulude väljundrastrid. Kahe sisendi järjestus pole oluline.",
		cosHName: "CosH",
		cosHSnip: "Arvutab rastris pikslite hüperboolse koosinuse.",
		cosHDesc: "See funktsioon arvutab rastri pikslite hüperboolse koosinuse.",
		cosName: "Cos",
		cosSnip: "Arvutab rastris piksli koosinuse.",
		cosDesc: "See funktsioon arvutab rastri pikslite koosinuse.",
		costAllocationName: "Kulujaotus",
		costAllocationSnip: "Arvutab iga piksli jaoks vähima kuluga allika, võttes aluseks vähima kumulatiivse kulu kulupinna ulatuses.",
		costAllocationDesc: "Kulujaotuse funktsioon arvutab iga piksli jaoks vähima kuluga allika, võttes aluseks vähima kumulatiivse kulu kulupinna ulatuses.",
		costBackLinkName: "Kulu tagasilink",
		costBackLinkSnip: "Määratleb naabri, mis on järgmine piksel vähima kumulatiivse kulu teel vähima kuluga allikani.",
		costBackLinkDesc: "Kulu tagasilingi funktsioon määratleb naabri, mis on järgmine piksel vähima kumulatiivse kulu teel vähima kuluga allikani.<div><br/>Tagasilingiraster sisaldab väärtusi nullist kaheksani, mis määratlevad suuna või määravad kindlaks järgmise naaberpiksli (teekonna järgmise piksli) vähima kumulatiivse kulu teel pikslist kuni selle vähima kuluga allikani. Kui tee läheb läbi parempoolse naabri, määratakse pikslile väärtus 1, diagonaalis alumise parempoolse piksli korral väärtus 2 ja päripäeva liikudes nii edasi. Väärtus 0 on reserveeritud lähtepikslitele.</div>",
		costDistanceName: "Kuluvahemaa",
		costDistanceSnip: "Arvutab iga piksli jaoks vähima kumulatiivse kuluga vahemaa vähima kuluga allikast või allikani kulupinna ulatuses.",
		costDistanceDesc: "Kuluvahemaa funktsioon arvutab iga piksli jaoks vähima kumulatiivse kuluga vahemaa vähima kuluga allikast või allikani kulupinna ulatuses.",
		costPathName: "Kulutee",
		costPathSnip: "Arvutab vähima kuluga tee allikast sihtkohta.",
		costPathDesc: "Globaalne kulutee funktsioon arvutab vähima kuluga tee allikast sihtkohta.<div><br/>See funktsioon koostab väljundrastri, mis registreerib vähima kuluga tee või teed valitud asukohtadest lähima kumulatiivse kulu pinnas määratletud lähtepikslini kuluvahemaa mõistes.</div>",
		curvatureName: "Kõverus",
		curvatureSnip: "Arvutab rasterpinna kõveruse; soovi korral saab kaasata ka profiili ja plaani kõveruse.",
		curvatureDesc: "Kõveruse funktsioon kuvab kallaku kuju või kõveruse. Osa pinnast võib olla kumer või nõgus; kõveruse väärtus annab sellest teile teada. Kõveruse arvutamiseks arvutatakse pinna teine tuletis.<div><br/>Kõverusfunktsiooni väljundit saab kasutada valgala füüsiliste omaduste kirjeldamiseks, et paremini mõista erosiooni- ja äravooluprotsesse. Kõveruse väärtuse abil saab leida nii pinnase erosiooni mustreid kui ka vee jaotust maal. Profiili kõverus mõjutab voolu kiirendust ja aeglustust ning seetõttu mõjutab see ühtlasi ka erosiooni ja sadestust. Plaani kõverus mõjutab voolu koonduvust ja lahknevust.</div>",
		divideName: "Jagamine",
		divideSnip: "Jagab kahe rastri väärtused pikslikohasel alusel.",
		divideDesc: "Jagamisfunktsioon jagab kahe rastri väärtused pikslikohasel alusel.",
		elevationVoidFillName: "Kõrgusandmete tühikutäide",
		elevationVoidFillSnip: "Loob pikslid kohtades, kus teie kõrgusandmetes on augud.",
		elevationVoidFillDesc: "Kõrgusandmete tühikutäite funktsiooni kasutatakse pikslite loomiseks kohtades, kus teie kõrgusandmetes on augud.<div><br/>Tühikud tekivad kohtades, kus tulemuseks saadud rastris pole piksliga kujutatud alas punktide kohta teavet kogutud. Tühikute põhjuseks on sageli veekogud, klassitüübi valik või välistamine. Enamasti kasutatakse tühikute täitmist maapinna genereerimisel.</div>",
		equalToName: "Võrdne",
		equalToSnip: "Teeb kahe sisendiga pikslikohasel alusel relatsioonilise võrdustehte. Pikslites, kus esimene raster võrdub teise rastriga, tagastatakse 1, ja pikslites, kus rastrite väärtused pole võrdsed, tagastatakse 0.",
		equalToDesc: "See funktsioon teeb kahes rastris pikslikohasel alusel võrdustehte. Pikslites, kus esimene raster võrdub teise rastriga, tagastatakse väärtus 1, ja pikslites, kus rastrite väärtused pole võrdsed, tagastatakse väärtus 0.",
		eucAllocationName: "Eukleidiline paigutus",
		eucAllocationSnip: "Arvutab iga piksli jaoks lähima allika, võttes aluseks eukleidilise kauguse.",
		eucAllocationDesc: "Eukleidilise paigutuse funktsioon arvutab iga piksli jaoks lähima allika, võttes aluseks eukleidilise kauguse.",
		eucDirectionName: "Eukleidiline suund",
		eucDirectionSnip: "Arvutab iga piksli jaoks suuna (kraadides) lähima allikani.",
		eucDirectionDesc: "Eukleidilise suuna funktsioon arvutab iga piksli jaoks suuna (kraadides) lähima allikani. <div><br/>Suund arvutatakse iga piksli keskpunktist sellele lähima lähtepiksli keskpunktini. Väärtuste vahemik on 0–360 kraadi (0 on reserveeritud lähtepikslite jaoks). Idasuuna väärtus (suund paremale) on 90 ning väärtused suurenevad päripäeva (lõuna on 180, lääs on 270 ja põhi on 360).</div>",
		eucDistanceName: "Eukleidiline kaugus",
		eucDistanceSnip: "Arvutab iga piksli jaoks eukleidilise kauguse lähima allikani.",
		eucDistanceDesc: "Eukleidilise kauguse funktsioon arvutab iga piksli jaoks eukleidilise kauguse lähima allikani.",
		exp10Name: "Exp10",
		exp10Snip: "Arvutab rastris pikslite eksponendi (alusel 10).",
		exp10Desc: "Funktsioon Exp 10 arvutab rastri pikslite eksponendi (alusel 10).",
		exp2Name: "Exp2",
		exp2Snip: "Arvutab rastris pikslite eksponendi (alusel 2).",
		exp2Desc: "See funktsioon arvutab rastri pikslite eksponendi (alusel 2).",
		expName: "Exp",
		expSnip: "Arvutab rastris pikslite eksponendi (alusel e).",
		expDesc: "See funktsioon arvutab rastri pikslite eksponendi (alusel e).",
		extractBandName: "Spektraalribade ekstraktimine",
		extractBandSnip: "Määrab, milliste ribadega mitmeribaliste andmestike kasutamisel töötada.",
		extractBandDesc: " Spektraalribade ekstraktimise funktsiooni abil saate mitmeribalises rasterandmestikus spektraalribad ümber järjestada või ühe või mitu riba ekstraktida.<div><br/>Spektraalribade ekstraktimise funktsiooni saate kasutada enne muid (nt aritmeetilisi) funktsioone selleks, et määrata, milliseid ribasid järgmises funktsioonis sisendina kasutatakse.</div>",
		fillName: "Täide",
		fillSnip: "Täidab pinnarastri süvendid, et eemaldada andmetes pisidefektid.",
		fillDesc: "Täitmise globaalfunktsioon otsib kõrguspinna rastris üles süvendid ja tipud ning täidab need, et eemaldada andmetes leiduvad pisidefektid. Funktsioon kasutab täitmiseks iteratsioonimeetodit ja kordab täitmist seni, kuni kõik süvendid on kuni määratud Z-limiidi piires täidetud.<div><br/>Kui kõrguspinna loomiseks kasutatakse ortokaartide tööriistu või muid vahendeid, on andmetes süvendite ja tippudena sageli väikseid, ent olulisi vigu. Inglise keeles kasutatakse nõgusate ja kõrgemate alade jaoks fotogramm-meetrias mitut nimetust, näiteks „sinks“ ja „peaks“ või „holes“ ja „spikes“. Kuna pinnaandmeid kasutatakse sageli modelleerimises (nt hüdroloogilise modelleerimise jaoks), tuleb need süvendite ja tippudega seotud vead parandada ümbritsevate andmetega ühtsel viisil.</div>",
		floatName: "Float",
		floatSnip: "Teisendab rastri iga piksliväärtuse ujukomakujule.",
		floatDesc: "Funktsioon Float teisendab rastri iga piksliväärtuse ujukomakujule.",
		flowAccumulationName: "Voo akumulatsioon",
		flowAccumulationSnip: "Loob igasse pikslisse suunduva akumuleeritud voolu rastri. Soovi korral saab rakendada kaaluteguri.",
		flowAccumulationDesc: "Voolu akumulatsiooni globaalfunktsioon koostab kõigi pikslite voolu akumulatsiooni rastri. Selle määratlemiseks akumuleeritakse kõigi igasse allasuunakaldega pikslisse voolavate pikslite kaal. Kui kaaluraster puudub, rakendatakse igale pikslile kaal 1 ning väljundrastri pikslite väärtus on igasse pikslisse voolavate pikslite arv.<div><br/>Suure vooluakumulatsiooniga väljundpikslid on kontsentreeritud vooluga alad, mida saab kasutada vooluveekanalite tuvastamiseks. Väljundpikslid, mille vooluakumulatsioon on null, on kohaliku topograafia kõrgemad punktid ning neid saab kasutada kõrgendike tuvastamiseks.</div>",
		flowDirectionName: "Voosuund",
		flowDirectionSnip: "Loob rastri, mis kujutab voolu suunda igast pikslist tema kõige järsema allasuunakaldega naabrisse.",
		flowDirectionDesc: "Pinna hüdroloogiliste omaduste tuletamise üks võtmekohti on võimalus määratleda voolu suund rastri igast pikslist. Voolu suuna rastrifunktsioon kasutab sisendina pinda ning loob rastri, mis kujutab voolu suunda igast pikslist tema kõige järsema allasuunakaldega naabrisse. Voolu suuna funktsioon kasutab kolme voolu modelleerimise meetodit: D8 (kaheksa suunda), Multi-Flow Direction (MFD) ja D-Infinity (DINF). ",
		flowDistanceName: "Voolukaugus",
		flowDistanceSnip: "Arvutab iga piksli minimaalse kallaku horisontaalse või vertikaalse kauguse selle jõe või oja piksliteni, kuhu need voolavad.",
		flowDistanceDesc: "Funktsioon arvutab iga piksli minimaalse kallaku horisontaalse või vertikaalse kauguse selle jõe või oja piksliteni, kuhu need voolavad. Kui esitatud on valikuline voolusuuna raster, on kallakute suunad piiratud nendega, mis on määratletud sisendvoolusuuna rastris. Väljund on voolukauguse raster.",
		focalName: "Fokaalstatistika",
		focalSnip: "Arvutab kujutise iga piksli fokaalstatistika lähtuvalt määratletud fokaalnaabrusest.",
		focalDesc: "Fokaalstatistika funktsioon arvutab kujutise iga piksli fokaalstatistika lähtuvalt määratletud fokaalnaabrusest.",
		geometricName: "Geomeetria",
		geometricSnip: "Suurendab kõrgusandmeid arvesse võttes andmestiku asukohatäpsust.",
		geometricDesc: "Geomeetriafunktsioon koostab anduri definitsiooni ja maastikumudeli põhjal ortokorrigeeritud kujutise. Andmestiku asukohatäpsuse suuurendamiseks võetakse arvesse kõrgusandmeid.",
		grayscaleName: "Hallitoonid",
		grayscaleSnip: "Teisendab mitmeribalise kujutise üheribaliseks hallitoonides pildiks.",
		grayscaleDesc: "See funktsioon teisendab mitmeribalise kujutise üheribaliseks hallitoonides pildiks.<div><br/>See funktsioon rakendab määratud kaalud igale sisendiribale ja normaliseerib väljundpildi. Kaalud rakendatakse sageli seetõttu, et mõne riba olulisus varieerub rakendusest olenevalt. Sinine riba näiteks sisaldab sageli teistest ribadest rohkem müra.</div>",
		greaterThanEqualName: "Suurem kui või võrdne",
		greaterThanEqualSnip: "Teeb kahe sisendiga pikslikohasel alusel relatsioonilise tehte „Suurem kui või võrdne“. Pikslite korral, kus esimene raster on teisest rastrist suurem või sellega võrdne, tagastatakse 1; muul juhul 0.",
		greaterThanEqualDesc: "See funktsioon teeb kahes sisendis pikslikohasel alusel relatsioonilise tehte „Suurem kui või võrdne“. Selliste pikslite korral, kus esimene raster on teisest rastrist suurem või sellega võrdne, tagastatakse väärtus 1; pikslite korral, kus esimene raster pole teisest rastrist suurem ega sellega võrdne, tagastatakse väärtus 0.",
		greaterThanName: "Suurem kui",
		greaterThanSnip: "Teeb kahe sisendiga pikslikohasel alusel relatsioonilise tehte „Suurem kui“. Pikslites, kus esimene raster on teisest rastrist suurem, tagastatakse 1, ja pikslites, kus pole nii, tagastatakse 0.",
		greaterThanDesc: "See funktsioon teeb kahes sisendis pikslikohasel alusel relatsioonilise tehte „Suurem kui“. Selliste pikslite korral, kus esimene raster on teisest rastrist suurem, tagastatakse väärtus 1; pikslite korral, kus esimene raster pole teisest rastrist suurem, tagastatakse väärtus 0.",
		heatIndexName: "Kuumusindeks",
		heatIndexSnip: "Tagastab ümbritseva õhu temperatuuri ja suhtelise õhuniiskuse alusel näiva temperatuuri.",
		heatIndexDesc: "See funktsioon arvutab ümbritseva õhu temperatuuri ja suhtelise õhuniiskuse alusel näiva temperatuuri. Näivat temperatuuri kirjeldatakse sageli selle järgi, kui soe see inimkeha jaoks tundub.<div><br/>Sellest indeksist võib abi olla meditsiiniliste probleemidega seotud ohtude arvutamiseks – näiteks lihaskrambid, vedelikupuudus, kuumast tingitud kurnatus või kuumarabandus kuuma ja niiske ilmaga. Kui suhteline õhuniiskus on suur, on inimkehast erituval higil raskem aurustuda ja seetõttu pole inimestel enda jahutamiseks ühtegi tõhusat loomulikku viisi. Kuuma ilmaga seotud hoiatuste kaartide loomiseks liigitatakse kuumaindeks sageli klassideks: mida suurem on indeksväärtus, seda suurema tõenäosusega antakse teadaande asemel välja hoiatus.</div>",
		hillshadeName: "Nõlvavarjutus",
		hillshadeSnip: "Koostab maapinnast ruumilise kujutise; pildi varjustamiseks võetakse arvesse päikese suhtelist asukohta.",
		hillshadeDesc: "Nõlvavarjutuse funktsioon koostab maapinnast hallitoonides ruumilise kujutise; pildi varjustamiseks võetakse arvesse päikese suhtelist asukohta. <div><br/>Nõlvavarjutuse tehnika võimaldab maapinda visualiseerida, võttes arvesse valgusallikat ning kõrguspinna kallakut ja kalde suunda. Tegemist on topograafia visualiseerimiseks kasutatava kvalitatiivse meetodiga, mis ei anna absoluutseid kõrgusväärtusi. </div>",
		intName: "Int",
		intSnip: "Teisendab rastri iga piksliväärtuse täisarvuks, kasutades kärpimist.",
		intDesc: "Funktsioon Int teisendab rastri iga piksliväärtuse täisarvuks, kasutades kärpimist.",
		interpolateIrregularDataName: "Ebaregulaarsete andmete interpoleerimine",
		interpolateIrregularDataSnip: "Interpoleerib punktipilvede või ebaregulaarsete ruudustike põhjal.",
		interpolateIrregularDataDesc: "Mõned netCDF- või HDF-andmestikud talletavad geoasukoha teabe ebaregulaarsete vahedega pikslite või punktandmete massiividena. Nende andmestike lisamisel mosaiikandmestikku võtab ebaregulaarsete andmete interpoleerimise funktsioon ebaregulaarse ruudustikuga andmed ja diskreedib need uuesti nii, et kõik pikslid oleksid ühtse suurusega ja kandilised.<div><br/>Kui lisada muutujad netCDF-ist või HDF-ist mosaiikandmestikku, kontrollitakse automaatselt, kas andmed on korraldatud regulaarsete massiividena. Kui see pole nii, saab ebaregulaarsete andmete interpoleerimise funktsiooni kasutada ebaregulaarsete andmete teisendamiseks regulaarse ruudustikuna korraldatud rastriks. Ebaregulaarsete andmete interpoleerimise rastrifunktsioonis kasutatavat interpoleerimismeetodit ja pikslisuurust saate muuta. Regulaarsete vahedega rastriandmete korral interpoleerimist ei rakendata ja andmed loetakse olemasoleval kujul.</div>",
		isNullName: "On tühiväärtus",
		isNullSnip: "Määratleb pikslipõhisel alusel, millised sisendrastri väärtused on NoData. Tagastab väärtuse 1, kui sisendväärtused on NoData, ja väärtuse 0 nende pikslite korral, kui see pole nii.",
		isNullDesc: "Funktsioon „On tühiväärtus“ määratleb pikslipõhisel alusel, millised sisendrastri väärtused on NoData. See tagastab väärtuse 1, kui sisendväärtus on NoData, ja väärtuse 0, kui pikslite sisendväärtus ei ole NoData.",
		kernelDensityName: "Tuuma tihedus",
		kernelDensitySnip: "Arvutab punkt- või murdjoonobjektidest ühikukohase magnituudi pindala, kasutades tuumafunktsiooni selleks, et sobitada sile koonusjas pind iga punkti või murdjoonega.",
		kernelDensityDesc: "See funktsioon arvutab punkt- või murdjoonobjektidest ühikukohase magnituudi pindala, kasutades tuumafunktsiooni selleks, et sobitada sile koonusjas pind iga punkti või murdjoonega.",
		keyMetadataName: "Põhilised metaandmed",
		keyMetadataSnip: "Alistab või lisab funktsiooniahelas rastri põhilised metaandmed.",
		keyMetadataDesc: "See funktsioon võimaldab teil rastri põhilised metaandmed lisada või alistada.<div><br/>Põhilistes metaandmetes sisalduv teave on rakendusele abiks andmete töötlemisel ja renderdamisel. Muu hulgas hõlmab see näiteks sellist kasulikku teavet nagu anduri nimi, spektraalribade nimed või piltidega seostatud pilvkate.</div>",
		shortestPathName: "Vähima kuluga tee",
		shortestPathSnip: "Teeb lähte- ja sihtkoha sisendeid kasutades kuluvahemaa analüüsi, mille põhjal määratletakse seejärel vähima kuluga tee lähtekohast sihtkohta.",
		shortestPathDesc: "Vähima kuluga tee funktsioon arvutab vähima kuluga tee allikast sihtkohta. Vähima kumulatiivse kuluga kaugus arvutatakse iga piksli jaoks kulupinna ulatuses kuni lähima allikani. See koostab väljundrastri, mis registreerib vähima kuluga tee või teed valitud asukohtadest lähimate kumulatiivse kulu pinnas määratletud lähtepiksliteni kuluvahemaa mõistes.<div><br/>Igale vähima kuluga teele määratakse skaneerimise käigus väärtus. Kulutee lähterastri lõpupiksel saab väärtuse 1. Esimene tee saab väärtuse 3, teine väärtuse 4 jne. Kui mitu teed ühinevad ja lähevad ülejäänud tee tagasi allikani sama marsruuti pidi, määratakse segmendile, kus kaks teed koos liiguvad, väärtus 2. Tee ühendatud osale ei saa määrata ühegi individuaalse tee väärtust, kuna ühendatud osa kuulub mõlemale marsruudile.</div>",
		lessThanEqualName: "Väiksem kui või võrdne",
		lessThanEqualSnip: "Teeb kahe sisendiga pikslikohasel alusel relatsioonilise tehte „Väiksem kui või võrdne“. Pikslite korral, kus esimene raster on teisest rastrist väiksem või sellega võrdne, tagastatakse 1; muul juhul 0.",
		lessThanEqualDesc: "See funktsioon teeb kahes sisendis pikslikohasel alusel relatsioonilise tehte „Väiksem kui või võrdne“. Selliste pikslite korral, kus esimene raster on teisest rastrist väiksem või sellega võrdne, tagastatakse väärtus 1; kui see pole teisest rastrist väiksem ega sellega võrdne, tagastatakse väärtus 0.",
		lessThanName: "Väiksem kui",
		lessThanSnip: "Teeb kahe sisendiga pikslikohasel alusel relatsioonilise tehte „Väiksem kui“. Pikslite korral, kus esimene raster on teisest rastrist väiksem, tagastatakse 1; muul juhul 0.",
		lessThanDesc: "See funktsioon teeb kahes sisendis pikslikohasel alusel relatsioonilise tehte „Väiksem kui“. Selliste pikslite korral, kus esimene raster on teisest rastrist väiksem, tagastatakse väärtus 1; kui see pole teisest rastrist väiksem, tagastatakse väärtus 0.",
		lnName: "Ln",
		lnSnip: "Arvutab rastris pikslite naturaallogaritmi (alus e).",
		lnDesc: "Funktsioon Ln arvutab rastri pikslite naturaallogaritmi (alus e).",
		log10Name: "Log10",
		log10Snip: "Arvutab rastris pikslite logaritmi (alusel 10).",
		log10Desc: "Funktsioon Log10 arvutab rastri pikslite logaritmi (alusel 10).",
		log2Name: "Log2",
		log2Snip: "Arvutab rastris pikslite logaritmi (alusel 2).",
		log2Desc: "Funktsioon Log2 arvutab rastri pikslite logaritmi (alusel 2).",
		lookupName: "Otsing",
		lookupSnip: "Loob uue rastri, otsides väärtused sisendrastri tabelis mõnelt muult väljalt.",
		lookupDesc: "See funktsioon loob uue rastri, otsides väärtused sisendrastri tabelis mõnelt muult väljalt.",
		mlClassifyName: "ML Classify",
		mlClassifySnip: "Pildid rühmitatakse pikslipõhise lähenemise alusel. Segapikslid määratakse objektile, kus on selles pikslis kõige suurem protsentuaalne osakaal.",
		mlClassifyDesc: "Funktsioon ML Classify võimaldab rasterandmestiku või mosaiikandmestiku peal teha järelevalvega rühmitamise suurima tõepära meetodit kasutava rühmitusalgoritmi abil. Selle funktsiooni kasutamiseks on vaja rühmitusallkirja faili.",
		maskName: "Mask",
		maskSnip: "Määrab väärtused, mida te ei soovi kuvada.",
		maskDesc: "See rastrifunktsioon määrab väärtused, mida te ei soovi oma rastris kuvada. Maskimisfunktsiooni abil saate määrata ühe või mitu NoData-väärtust või kehtivate piksliväärtuste vahemiku. ",
		minusName: "Miinus",
		minusSnip: "Lahutab teise sisendrastri väärtuse esimese sisendrastri väärtusest pikslipõhisel alusel.",
		minusDesc: "Miinuse funktsioon lahutab teise sisendrastri väärtuse esimese sisendrastri väärtusest pikslipõhisel alusel.",
		modName: "Mod",
		modSnip: "Leiab esimese rastri jäägi (mooduli järgi) teise rastriga jagamisel pikslipõhisel alusel.",
		modDesc: "Funktsioon Mod leiab esimese rastri jäägi (mooduli järgi) teise rastriga jagamisel pikslipõhisel alusel. Sisendite järjestus on oluline ja mõjutab väljundtulemust.",
		mosaicRastersName: "Mosaiikrastrid",
		mosaicRastersSnip: "Koostab rasterandmestiku komplekti põhjal ühe andmestiku.",
		mosaicRastersDesc: "Mosaiikrastrite funktsioon koostab mitme pildi põhjal mosaiikpildi. Piltide kattumise korral saate valida ühe mitmest meetodist, et määrata, millised pildid kuvatakse.",
		ndviColorizedName: "NDVI Colorized",
		ndviColorizedSnip: "Loob mitmeribalise andmestiku, mis kujutab taimestiku seisundit, võttes aluseks punase lainepikkuse ja infrapunalähedase lainepikkuse ribade erinevuse.",
		ndviColorizedDesc: "Funktsioon NDVI Colorized rakendab sisendpildile NDVI funktsiooni ja kasutab siis tulemuse kuvamiseks värvikaarti või värviskaalat.",
		ndviName: "NDVI",
		ndviSnip: "Arvutab taimkatte normaliseeritud vaheindeksi (NDVI).",
		ndviDesc: "NDVI funktsioon loob üheribalise andmestiku, mis kujutab taimestiku seisundit, võttes aluseks punase lainepikkuse ja infrapunalähedase lainepikkuse ribade erinevuse.<div><br/>NDVI on standardiseeritud indeks, millega saab luua pildi, mis näitab rohelust ehk suhtelist biomassi. See indeks kasutab mitmespektrilise rasterandmestiku kahe lainepikkuse karakteristikute kontrastsust: klorofüllipigmendi neelduvust punase lainepikkuse ribas ja taimse materjali kõrget peegelduvust infrapunalähedase lainepikkuse (NIR) ribas. Üliväikesed või negatiivsed NDVI väärtused tähistavad alasid, kus pole üldse taimestikku (nt pilved, vesi või lumi). Väga väikesed väärtused tähistavad alasid, kus taimestikku on vähe või kus see puudub täiesti (nt betoon, kivi või muld). Mõõdukad väärtused tähistavad rohumaad ja põõsastikku. Suured väärtused tähistavad metsa ja lopsaka taimestikuga alasid.</div>",
		negateName: "Eita",
		negateSnip: "Muudab pikslikohasel alusel sisendrastri piksliväärtuste märki (korrutab väärtusega -1).",
		negateDesc: "Eitusfunktsioon muudab piksli sisendrastri piksliväärtuste märki (korrutab väärtusega -1). ",
		nibbleName: "Näksimine",
		nibbleSnip: "Asendab rastri pikslid vastavalt maskile lähimate naabrite väärtustega.",
		nibbleDesc: "Näksimise globaalfunktsioon võimaldab rastri valitud aladele määrata nende lähima naabri väärtuse. See on abiks rastri selliste alade töötlemisel, kus andmed võivad olla vigased.",
		notEqualName: "Ei võrdu",
		notEqualSnip: "Teeb kahe sisendiga pikslikohasel alusel relatsioonilise tehte „Ei võrdu“. Pikslite korral, kus esimene raster ei võrdu teise rastriga, tagastatakse 1; võrdumise korral tagastatakse 0.",
		notEqualDesc: "See funktsioon teeb kahes sisendis pikslikohasel alusel relatsioonilise tehte „Ei võrdu“. Selliste pikslite korral, kus esimene raster ei võrdu teise rastriga, tagastatakse väärtus 1; pikslite korral, kus esimene raster on teise rastriga võrdne, tagastatakse väärtus 0.",
		pansharpeningName: "Pankromaatiline teravdamine",
		pansharpeningSnip: "Suurendab kunstlikult mitmeribalise pildi ruumilist resolutsiooni, ühendades selle suurema eraldusvõimega pankromaatilise pildiga.",
		pansharpeningDesc: "Pankromaatilise teravdamise funktsioon ühendab suurema eraldusvõimega pankromaatilise pildi või rastririba väiksema eraldusvõimega mitmeribalise rasterandmestikuga, et suurendada mitmeribalise pildi ruumilist resolutsiooni.<div><br/>Pankromaatilise teravdamise eesmärk on luua visuaalselt kvaliteetsem pilt. Kuna kasutatavad võtted muudavad mitmeribalise pildi radiomeetrilisi ja spektraalseid karakteristikuid, tuleb pankromaatiliselt teravdatud piltide kasutamisel analüütilise kaugseire jaoks olla ettevaatlik.</div>",
		pathAllocationName: "Teekauguse paigutus",
		pathAllocationSnip: "Arvutab iga piksli jaoks vähima kuluga allika, lähtudest vähimast kumulatiivsest kulust kulupinna ulatuses ja võttes arvesse pinna kauguse ning horisontaalse ja vertikaalse kulu tegureid.",
		pathAllocationDesc: "Teekauguse paigutuse funktsioon arvutab iga piksli jaoks lähima allika, lähtudes vähimast kumulatiivsest kulust kulupinna ulatuses ja võttes arvesse pinna kauguse ning horisontaalse ja vertikaalse kulu tegurid.",
		pathBackLinkName: "Teekauguse tagasilink",
		pathBackLinkSnip: "Teeb kindlaks naabri, mis on järgmine piksel vähima kumulatiivse kuluga teel vähima kuluga allikani, võttes arvesse pinna kauguse ning horisontaalse ja vertikaalse kulu tegureid.",
		pathBackLinkDesc: "Teekauguse tagasilingi funktsioon teeb kindlaks selle naabri suuna, mis on järgmine piksel vähima kumulatiivse kuluga teel lähima allikani, võttes arvesse nii pinna kauguse kui ka horisontaalse ja vertikaalse kulu tegurid.",
		pathDistanceName: "Tee kaugus",
		pathDistanceSnip: "Arvutab iga piksli jaoks vähima kumulatiivse kuluga kauguse vähima kuluga allikani või allikast, võttes arvesse pinna kauguse ning horisontaalse ja vertikaalse kulu tegurid.",
		pathDistanceDesc: "Teekauguse funktsioon arvutab iga piksli jaoks vähima kumulatiivse kuluga kauguse lähima allikani, võttes arvesse pinna kauguse ning horisontaalse ja vertikaalse kulu tegurid.",
		plusName: "Pluss",
		plusSnip: "Liidab kahe rastri väärtused pikslikohasel alusel.",
		plusDesc: "Liitmisfunktsioon Pluss liidab kahe rastri väärtused pikslikohasel alusel.",
		powerName: "Astendamine",
		powerSnip: "Tõstab rastri piksliväärtused teises rastris leiduvate väärtuste astmesse.",
		powerDesc: "Astendusfunktsioon tõstab rastri piksliväärtused teises rastris leiduvate väärtuste astmesse.",
		radarCalibrationName: "Radari kalibreerimine",
		radarCalibrationSnip: "Teisendab RADARSAT-2 tagasihajumise.",
		radarCalibrationDesc: "Selle funktsiooni abil saab kalibreerida RADARSAT-2 pildid mosaiikandmestikus või RPF-objektis. Radaripilte kalibreeritakse, et piksliväärtused oleksid radari tagasihajumise tõetruu esitus.",
		rasterInfoName: "Rastriteave",
		rasterInfoSnip: "Muudab rastri omadusi, näiteks rastrisügavust, NoData väärtust, pikslisuurust jne.",
		rasterInfoDesc: "Rastriteabe funktsioon avab dialoogiakna rasterandmestiku omadustega – veergude ja ridade arv, spektraalribade arv, piksli tüüp, ulatus, koordinaatsüsteem. Nende omaduste muutmiseks valige mallina kasutatav rasterandmestik. ",
		rasterizeAttributesName: "Atribuudipõhine rasteriseerimine",
		rasterizeAttributesSnip: "Rikastab rastrit välisest tabelist või objektiteenusest määratud atribuutide väärtustest tuletatud ribade abil.",
		rasterizeAttributesDesc: "Atribuudipõhise rasteriseerimise funktsioon rikastab rastrit, lisades välisest tabelist või objektiteenusest määratud atribuutide väärtustest tuletatud ribad. Soovi korral saate alapõhise otsingu lubamiseks määrata tsoonirastri ja seostuva tsooni ID atribuudi.",
		rasterizeFeatureClassName: "Objektide rasteriseerimine",
		rasterizeFeatureClassSnip: "Teisendab objektid rastriks.",
		rasterizeFeatureClassDesc: "See funktsioon teisendab hulknurk-, murdjoon- ja punktobjektide klassi andmed rastrikihiks.<div><br/>Objektidele määratakse piksliväärtused lähtuvalt objektide OBJECTID-st (vaikimisi). Soovi korral saab piksliväärtuste aluseks võtta kasutaja määratletud väärtuse välja sisendobjekti atribuuditabelis.</div>",
		recastName: "Uuesti esitamine",
		recastSnip: "Muudab funktsiooniahela parameetreid mosaiikandmestikus või pilditeenuses. Seda kasutatakse sageli LAS-andmestikes, et vältida vajadust luua maapinna erinevate esituste jaoks omaette mosaiikandmestikud.",
		recastDesc: "Uuesti esitamise funktsiooni kasutatakse mosaiikandmestikus või pilditeenuses kasutatud funktsiooniparameetri dünaamiliseks muutmiseks ilma neid muudatusi füüsiliselt alles hoidmata.",
		regionGroupName: "Piirkonnagrupp",
		regionGroupSnip: "Väljundi iga piksli kohta registreeritakse selle ühendatud piirkonna identiteet, kuhu see piksel kuulub. Igale piirkonnale määratakse kordumatu number.",
		regionGroupDesc: "Piirkonnagrupi globaalfunktsioon registreerib väljundi iga piksli kohta selle ühendatud piirkonna identiteedi, kuhu see piksel kuulub. Igale piirkonnale määratakse kordumatu number.<div><br/>Esimesena skannitud piirkond saab väärtuse 1, teine väärtuse 2 jne, kuni väärtus on määratud kõigile piirkondadele. Skannimine toimub vasakult paremale ja ülevalt alla. Väljunditsoonidele määratud väärtused põhinevad sellel, millal skannimise käigus nendeni jõutakse.</div>",
		regionGrowName: "Piirkonnakasv",
		regionGrowSnip: "Loob keskpunktide põhjal piirkonnad.",
		regionGrowDesc: "Piirkonnakasvu funktsioon koondab üksteisega piirnevad pikslid gruppidesse vastavalt keskpunktist määratud raadiusele. Pikslite grupile või objektile määratakse kindel täiteväärtus.",
		remapName: "Uuesti vastendamine",
		remapSnip: "Muudab piksliväärtusi, määrates piksliväärtuste vahemikele uued väärtused või kasutades välist tabelit.",
		remapDesc: "Uuesti vastendamise funktsiooniga saate rasterandmete piksliväärtusi muuta või ümber klassifitseerida. Selleks võib määrata väljundpiksli väärtusega vastendatavate piksliväärtuste vahemiku või kasutada piksliväärtuste väljundpiksli väärtusega vastendamiseks tabelit.",
		reprojectName: "Uuesti projitseerimine",
		reprojectSnip: "Muudab rasterandmestiku, mosaiikandmestiku või mosaiikandmestikus oleva rastriobjekti projektsiooni. Samuti võib see andmed uuele pikslisuurusele ümber diskreetida ja määratleda päritolu.",
		reprojectDesc: "Uuesti projitseerimise funktsioon muudab rasterandmestiku, mosaiikandmestiku või mosaiikandmestikus oleva rastriobjekti projektsiooni. Samuti võib see andmed uuele pikslisuurusele ümber diskreetida ja määratleda päritolu.<div><br/>Uuesti projitseerimise funktsiooni saab kasutada vahemälu loomisel sellistest raster- või mosaiikandmestikust, mida pole nõutavas projektsioonis. Näiteks sellise vahemällu salvestatud pilditeenuse loomisel, mida rakendused võivad integreerida muude vahemäluteenustega, on oluline, et kõik pilditeenused oleksid samas projektsioonis. Sageli on see Web Mercatori projektsioon. Kuna mosaiikandmestikku ei saa uuesti projitseerida, on teil kaks võimalust: saate oma mosaiikandmestikust luua viidatud mosaiikandmestiku vajalikus projektsioonis või lisada uuesti projitseerimise funktsiooni mosaiikandmestiku funktsiooniahelasse. Teine näide kasutab seda funktsiooni mosaiikandmestiku rastriobjekti jaoks. Vahemällu salvestatud rastri funktsiooni kasutamise korral võiksite lisada ka uuesti projitseerimise funktsiooni, et vahemälu loodaks uues projektsioonis. Mosaiikandmestiku rastriobjektid saab salvestada vahemällu, kui töötlemine on ressursinõudlik ning soovite avaldada kiiret pilditeenust ilma tervet pilditeenust vahemällu salvestamata.</div>",
		resampleName: "Uuesti diskreetimine",
		resampleSnip: "Muudab rastri pikslisuurust.",
		resampleDesc: "Uuesti diskreetimise funktsioon muudab piksli suurust, diskreetimistüüpi või mõlemat.<div><br/>Uuesti diskreetimise funktsiooni tuleks kasutada ainult kindlate andmetöötlusnõuete korral – näiteks juhul, kui arvutate tuule või hoovuse magnituudi ja suunda, mis nõuab lähteresolutsiooni põhjal uuesti diskreetimist.</div>",
		roundDownName: "Ümarda allapoole",
		roundDownSnip: "Tagastab rastri iga piksli kohta ujukomaväärtusena esitatud suuruselt järgmise väiksema täisarvulise väärtuse.",
		roundDownDesc: "Allapoole ümardamise funktsioon tagastab rastri iga piksli kohta suuruselt järgmise väiksema täisarvu ujukomaväärtusena.",
		roundUpName: "Ümarda ülespoole",
		roundUpSnip: "Tagastab rastri iga piksli kohta ujukomaväärtusena esitatud suuruselt järgmise suurema täisarvulise väärtuse.",
		roundUpDesc: "Ülespoole ümardamise funktsioon tagastab rastri iga piksli kohta suuruselt järgmise suurema täisarvu ujukomaväärtusena.",
		segmentMeanShiftName: "Segmendi intensiivsuspõhine nihe",
		segmentMeanShiftSnip: "Grupeerib sarnaste spektraalkarakteristikutega külgnevad pikslid segmentideks.",
		segmentMeanShiftDesc: "See funktsioon tuvastab teie piltidel objektid või segmendid, grupeerides külgnevad pikslid, millel on sarnased spektraal- ja ruumilised karakteristikud. Huvipakkuvate objektide tuletamiseks saate reguleerida ruumilise ja spektraalse silumise ulatust.",
		s1RadiometricCalibrationName: "Sentinel-1 radiomeetriline kalibreerimine",
		s1RadiometricCalibrationSnip: "Teeb Sentinel-1 andmetega mitmesugust tüüpi radiomeetrilisi korrigeerimisi.",
		s1RadiometricCalibrationDesc: "See rastrifunktsioon teeb Sentinel 1 andmestikega kolm erinevat kalibreerimist (sh beeta-null ja gamma) ning väljastab kalibreeritud andmestiku. SAR-kalibreerimise eesmärk on luua pildid, mille piksliväärtused saab otse seostada stseeni radari tagasihajumisega. Ehkki kalibreerimata SAR-pildid on kvalitatiivseks kasutusotstarbeks piisavad,on SAR-andmete kvantitatiivseks kasutamiseks kindlasti vaja kalibreeritud SAR-pilte.<div><br/>Tüüpiline SAR-andmete töötlemine, mis annab tulemuseks 1. taseme (Level-1) pildid, ei hõlma radiomeetrilisi korrektsioone ning samuti säilib oluline radiomeetriline nihe. Seetõttu tuleb SAR-piltidele rakendada radiomeetriline korrektsioon, nii et piltide piksliväärtused kajastaksid tõetruult peegeldava pinna radari tagasihajumist. Radiomeetriline korrektsioon on vajalik ka erinevate anduritega või sama anduriga, kuid erinevatel aegadel või erinevas režiimis jäädvustatud või erineva protsessoriga töödeldud SAR-piltide võrdlemiseks.</div>",
		s1ThermalNoiseRemovalName: "Sentinel-1 soojusmüra eemaldamine",
		s1ThermalNoiseRemovalSnip: "Eemaldab Sentinel-1 andmetest soojusmüra.",
		s1ThermalNoiseRemovalDesc: "Soojusmüra korrektsiooni saab rakendada nii Sentinel-1 Level-1 Single Look Complexi (SLC) toodetele kui ka Level-1 Ground Range Detectioni (GRD) toodetele, mida pole veel korrigeeritud. Operaator saab selle paranduse ka toote annotatsioonidest lähtuvalt eemaldada, et taastada algse toote loomiseks uuesti müra, mis varem eemaldati. Toote annotatsioonid uuendatakse vastavalt, et paranduse saaks uuesti rakendada. ",
		setNullName: "Nulli määramine",
		setNullSnip: "Nulli määramine määrab konkreetsete kriteeriumide põhjal tuvastatud piksliasukohtade väärtuseks NoData. Kui tingimuse arvutamise tulem on tõene, tagastatakse NoData; kui tulem on väär, tagastatakse mõnes teises rastris määratud väärtus.",
		setNullDesc: "Nulli määramise funktsioon määrab konkreetsete kriteeriumide põhjal tuvastatud pikslite väärtuseks NoData. Kui tingimuse arvutamise tulem on tõene (1), tagastatakse NoData; kui tingimuse arvutamise tulem on väär (0), tagastatakse vääras rastris määratud väärtus. Kriteeriumid määratakse ära loogilise matemaatikafunktsiooni väljundiga, millest saab sisendraster.",
		shadedReliefName: "Reljeefivarjutus",
		shadedReliefSnip: "Koostab maapinnast mitmeribalise värvkodeeritud ruumilise kujutise; pildi varjustamiseks võetakse arvesse päikese suhtelist asukohta.",
		shadedReliefDesc: "Reljeefivarjutuse funktsioon loob maapinnast värvilise ruumilise kujutise; lõpptulemuse saamiseks ühendatakse kõrgusandmete kodeeringuga ja nõlvavarjutuse meetodiga saadud pildid. See funktsioon kasutab päikese asukoha määramiseks kõrguse ja asimuudi atribuute.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Arvutab rastris pikslite hüperboolse siinuse.",
		sinHDesc: "See funktsioon arvutab rastri pikslite hüperboolse siinuse.",
		sinName: "Sin",
		sinSnip: "Arvutab rastris pikslite siinuse.",
		sinDesc: "See funktsioon arvutab rastri pikslite siinuse.",
		slopeName: "Kalle",
		slopeSnip: "Arvutab piksliväärtuse muutumise määra naabrite suhtes.",
		slopeDesc: "See rastrifunktsioon arvutab kallaku ehk kõrguse muutumise määra iga digitaalse kõrgusmudeli (DEM) piksli kohta. Tegemist on DEM-i esimese tuletisega.<div><br/>Funktsioon kasutab kiirendatud atan()-funktsiooni. See on kuus korda kiirem ja lähendusviga on alati väiksem kui 0,3 kraadi.</div>",
		speckleName: "Haavelmüra",
		speckleSnip: "Annab filtrid tehisavaradari andmestikest müra eemaldamiseks.",
		speckleDesc: "Haavelmüra on radariandmete kõrgsageduslik müra. Tehisavaradari (SAR) süsteemide genereeritud pildid on hajutatud signaalide töötlemise ning pindadelt või objektidelt hajutatud elektromagnetlainete häiringute tõttu haavelmüra suhtes väga tundlikud. Haavelmüra funktsioon filtreerib haavelmüraga radariandmestikku ning silub müra, säilitades samas pildil leiduvad servjooned või teravad objektid.",
		spectralConversionName: "Spektriteisendus",
		spectralConversionSnip: "Rakendab mitmeribalisele pildile maatriksi.",
		spectralConversionDesc: "Spektriteisenduse funktsioon rakendab mitmeribalisele pildile maatriksi, mis mõjutab väljundi värviväärtusi.<div><br/>Mõned andurid ei kogu sinise lainepikkuse ribade andmeid, kuna signaali ja müra suhe on madal. Seda saab kasutada näiteks tehisvärvilise infrapunapildi teisendamiseks pseudoloomulikuks värvipildiks.</div>",
		squareRootName: "Ruutjuur",
		squareRootSnip: "Arvutab rastris piksliväärtuste ruutjuure.",
		squareRootDesc: "Ruutjuure funktsioon arvutab rastri piksliväärtuste ruutjuure.",
		squareName: "Ruut",
		squareSnip: "Arvutab rastris piksliväärtuste ruudu.",
		squareDesc: "Ruudu funktsioon arvutab rastri piksliväärtuste ruudu.",
		statisticsHistogramName: "Statistika ja histogramm",
		statisticsHistogramSnip: "Saate määratleda või seostada statistika ja histogrammi.",
		statisticsHistogramDesc: "Statistika ja histogrammi funktsiooni kasutatakse rastri statistika ja histogrammi määratlemiseks. Selle funktsiooni saate lisada funktsiooniahela lõppu, et kirjeldada rastrifunktsiooni malli (RFT) statistikat ja histogrammi. Seda võib olla vaja töötlemistulemuse vaikekuva reguleerimiseks, eriti siis, kui on vaja määratleda paljusid funktsioone sisaldav funktsiooniahel.<div><br/>Statistika määratlemiseks võite väärtused tippida või importida rasterandmestikust või XML-failist. Histogrammid saab määratleda ainult faili importimise kaudu.</div>",
		statisticsName: "Statistika",
		statisticsSnip: "Arvutab kujutise iga piksli fokaalstatistika lähtuvalt määratletud fokaalnaabrusest.",
		statisticsDesc: "Statistika funktsioon arvutab kujutise iga piksli fokaalstatistika lähtuvalt määratletud fokaalnaabrusest.<div><br/>Samuti saab statistikafunktsiooni kasutada pildil puuduvate joonte täitmiseks. Puuduvad jooned on sageli põhjustatud anduriprobleemidest, mille korral andmeid ei koguta. Selline asi on juhtunud näiteks Landsat 7 Enhanced Thematic Mapper Plusi (ETM+) anduris. Puuduvad andmed põhjustavad probleeme nii analüüsimisel kui ka piltide vaatamisel. Piltide kasutamisel analüüsi jaoks ei saa selle probleemiga eriti midagi teha, ent kattuvate piltide olemasolu korral saab kattuvat pilti kasutada puuduva sisu asemel. Sama saab teha ka siis, kui pilte kasutatakse visualiseerimiseks. Siiski pole puuduva sisu täitmiseks alati kattuvat lisapilti võtta. Seetõttu tuleb puuduv sisu tuletada olemasolevate andmete põhjal.</div>",
		streamLinkName: "Vooluveelüli",
		streamLinkSnip: "Määrab rastri lineaarvõrgustiku lõikepunktide vahelistele lõikudele kordumatud väärtused.",
		streamLinkDesc: "Vooluveelüli globaalfunktsioon määrab rastri lineaarvõrgustiku lõikepunktide vahelistele lõikudele kordumatud väärtused.<div><br/>Lülid on vooluveekanali lõigud, mis ühendavad omavahel kahte järjestikust sõlmpunkti, sõlmpunkti ja väljalaskekohta või sõlmpunkti ja äravoolulahet. Neid vooluveesegmente võib nimetada lõikudeks. Sõlmpunkt on seotud valgumispunktiga ja aitab tuvastada valgala või äravoolu alamvesikonna piiri.</div>",
		stretchName: "Venita",
		stretchSnip: "Rikastab pilti, reguleerides kuvatavate väärtuste vahemikku. See toiming ei mõjuta tegelikke piksliväärtusi. Kui piksli väärtus jääb väljapoole määratud vahemikku, kuvatakse see kas miinimum- või maksimumväärtusena.",
		stretchDesc: "Venitusfunktsioon rikastab pilti, muutes selle omadusi (nt heledust, kontrastsust ja gammat) mitme venitustüübi kaudu. Kuna see funktsioon kasutab mosaiikandmestiku rastrite statistikat, peate selle funktsiooni kasutamise korral tagama, et statistika oleks arvutatud.<div><br/>Venitustüüp määratleb histogrammivenituse, mis rakendatakse rastritele nende ilme täiustamiseks. Venitamine parendab andmete ilmet, jaotades piksliväärtused nende rastrisügavuse põhjal määratletud miinimum- ja maksimumväärtuste järgi histogrammil ühtlasemalt. </div>",
		swathName: "Vaal",
		swathSnip: "Interpoleerib andmed ebaregulaarsetest ruudustikest või vaaluandmetest.",
		swathDesc: "Mõned netCDF- või HDF-andmestikud talletavad geoasukoha teabe ebaregulaarsete vahedega massiividena. Nende andmestike lisamisel mosaiikandmestikku võtab vaalufunktsioon ebaregulaarse ruudustikuga andmed ja diskreedib need uuesti nii, et kõik pikslid oleksid ühtse suurusega ja kandilised.<div><br/>Kui lisada muutujad netCDF-ist või HDF-ist mosaiikandmestikku, kontrollitakse automaatselt, kas andmed on korraldatud regulaarsete massiividena. Kui see pole nii, rakendatakse vaalufunktsioon automaatselt, et teisendada ebaregulaarne raster punktideks ja seejärel regulaarse ruudustikuga rastriks. Vaalu rastrifunktsioonis kasutatavat interpoleerimismeetodit ja pikslisuurust saate muuta. Regulaarsete vahedega rastriandmete korral interpoleerimist ei rakendata. Andmed loetakse olemasoleval kujul.</div>",
		tanHName: "TanH",
		tanHSnip: "Arvutab rastris pikslite hüperboolse tangensi.",
		tanHDesc: "See funktsioon arvutab rastri pikslite hüperboolse tangensi.",
		tanName: "Tan",
		tanSnip: "Arvutab rastris pikslite tangensi.",
		tanDesc: "See funktsioon arvutab rastri pikslite tangensi. ",
		tasseledCapName: "Kauth–Thomas (tutimüts)",
		tasseledCapSnip: "Arvutab taimestiku, niiskuse ja heleduse tasemed. See tehnika toetub koefitsientidele, mis tuleb arvutada konkreetse anduri jaoks.",
		tasseledCapDesc: "Kauthi–Thomase transformatsiooni abil analüüsitakse ja kaardistatakse mitmesuguste satelliitide andurisüsteemide tuvastatud taimestiku fenomenoloogiat ja linnastumise muudatusi. Andmete graafilise jaotuse kuju tõttu nimetatakse seda ka tutimütsi (Tasseled Cap) transformatsiooniks. See transformatsioon aitas selgitada Landsat MSS-i jäädvustatud põlluandmetes leitud mustreid teravilja elutsükli talitlusena. Põhimõtteliselt, kuna põllukultuurid kasvavad seemnest kuni küpsuse saavutamiseni, suureneb infrapuna lähedane peegeldus ja väheneb punase peegeldus mulla värvuse põhjal<div><br/>Kui alguses kasutati seda transformatsiooni üksnes viljapõldude seireks ning seejärel ka taimestiku analüüsimiseks ja kaardistamiseks, siis nüüd toetab see paljusid rakendusvaldkondi metsanduses, tööstuslikus taimestikuhalduses, ökosüsteemide kaardistamises ja halduses, süsihappegaasi sekvesteerimise ja krediidi jälgimises ja seires, linnaarenduses jpm. Samuti toetab see nüüd lisaks Landsat MSS-ile ka muid populaarseid satelliidisüsteeme, mille hulgas on näiteks Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 ja RapidEye multispektraalseid andureid.</div>",
		timesName: "Kellaajad",
		timesSnip: "Korrutab kahe rastri väärtused pikslikohasel alusel.",
		timesDesc: "Korrutamisfunktsioon korrutab kahe rastri väärtused pikslikohasel alusel.",
		transposeBitsName: "Bititransponeerimine",
		transposeBitsSnip: "Pakib sisendpiksli bitid lahti ja vastendab need väljundpikslis määratud bittidega. Selle funktsiooni otstarve on mitmest sisendist (nt Landsat 8 kvaliteediriba toodete) pärinevate bittide töötlemine.",
		transposeBitsDesc: "Bititransponeerimise funktsioon pakib sisendpiksli bitid lahti ja vastendab need väljundpikslis määratud bittidega. Selle funktsiooni otstarve on mitmest sisendist (nt Landsat 8 kvaliteediriba toodete) pärinevate bittide töötlemine.",
		unitConversionName: "Ühikuteisendus",
		unitConversionSnip: "Teisendab väärtused ühest mõõtühikust teise.",
		unitConversionDesc: "See funktsioon teisendab pikslid ühest ühikust teise. Funktsioon toetab kauguse, kiiruse ja temperatuuri teisendamist.",
		vectorFieldName: "Vektoriväli",
		vectorFieldSnip: "Kuvab andmestikud, kus nii suurus ehk magnituud (u) kui ka suund (v) on esitatud nooltena; magnituudi tähistab noole suurus ja suunale osutab noole nurk.",
		vectorFieldDesc: "Vektorivälja funktsiooni kasutatakse kahe rastri liitmiseks ja teisendamiseks kaheribaliseks rastriks, mille andmetüüp on kas Suurus-Suund või U-V.<div><br/>U-väärtust nimetatakse vahel tsoonipõhiseks kiiruseks ja V-väärtust nimetatakse vahel meridiaanipõhiseks kiiruseks.</div>",
		viewshed2Name: "Vaateväli",
		viewshed2Snip: "Määratleb rasterpinna asukohad, mis on nähtavad geodeetilisi meetodeid kasutavate vaatlejat tähistavate objektide komplektile.",
		viewshed2Desc: "Vaatevälja funktsioon määratleb rasterpinna asukohad, mis on nähtavad geodeetilisi meetodeid kasutavate vaatlejat tähistavate objektide komplektile<div><br/>Piksli iga keskpunkti nähtavuse määrab sihtpunkti ja vaatleja vahelise nähtavusjoone katse. Kui vaatleja näeb sihtmärki piksli keskpunktis, käsitletakse pikslit nähtavana. See tööriist võtab nähtavuse määratlemisel alati arvesse maakera kõverust.</div>",
		watershedName: "Valgala",
		watershedSnip: "Määrab mõjupiirkonna, mis paikneb rastris pikslikomplekti kohal.",
		watershedDesc: "Valgala globaalfunktsioon määrab mõjupiirkonna, mis paikneb rastris pikslikomplekti kohal. Valgalad tehakse kindlaks voolusuunarastri põhjal, mis tuvastab voolu suuna igast pikslist.",
		weightedOverlayName: "Kaalutud ülekate",
		weightedOverlaySnip: "See funktsioon võimaldab teil mitu rastrit ülekattena üksteise peale asetada, kasutades ühtset mõõteskaalat ja kaaludes iga rastrit vastavalt selle olulisusele.",
		weightedOverlayDesc: "See funktsioon võimaldab teil mitu rastrit ülekattena üksteise peale asetada, kasutades ühtset mõõteskaalat ja kaaludes iga rastrit vastavalt selle olulisusele.",
		weightedSumName: "Kaalutud summa",
		weightedSumSnip: "Kaalub ja liidab rastrite massiivi pikslipõhisel alusel.",
		weightedSumDesc: "Kaalutud summa funktsioon lubab teil mitu rastrit ülekattena üksteise peale asetada, korrutades iga rastri tema kaaluga ja liites siis kõik väärtused.",
		windchillName: "Tuulekülmus",
		windchillSnip: "Kombineerib tuulekülmuse teguri arvutamiseks ümbritseva õhu temperatuuri ja tuulekiiruse.",
		windchillDesc: "Tuulekülmuse funktsioon aitab tuvastada ohtlikke talveolusid, mis võivad külmas, niiskes ja tuulises õhus viibimise korral põhjustada külmakahjustusi või alajahtumist. Tuulekülmus võimaldab mõõta seda, kui külm ümbritsev õhk inimesele tundub, kui lisaks madalale temperatuurile võtta arvesse ka tuult. Mida tugevam on tuul, seda kiiremini keha jahtub ja seda külmem tunne inimesel on.",
		zonalRemapName: "Tsoonipõhine uuestivastendamine",
		zonalRemapSnip: "Võimaldab rastri pikslid uuesti vastendada teises rastris määratletud tsoonide ning tabelis määratletud tsoonipõhise väärtusevastenduse põhjal.",
		zonalRemapDesc: "See funktsioon võimaldab teil rastri pikslid uuesti vastendada teises rastris määratletud tsoonide ning tabelis määratletud tsoonipõhise väärtusevastenduse põhjal.",
		zonalStatisticsName: "Tsoonipõhine statistika",
		zonalStatisticsSnip: "Arvutab teise andmestiku tsoonides asuvate rastriväärtuste statistika.",
		zonalStatisticsDesc: "See funktsioon arvutab teise andmestiku tsoonides asuvate rastriväärtuste statistika. Tsoon on määratletud sisendi kõigi aladena, millel on sama väärtus. Need alad ei pea olema omavahel ühendatud. Kui tsooni- ja väärtusesisendid on sama resolutsiooniga rastrid, kasutatakse neid otse. Erinevate resolutsioonide korral rakendatakse sisene uuestidiskreetimine, et viia resolutsioonid enne tsoonipõhise toimingu tegemist omavahel vastavusse.",
		flowLengthName: "Voolu pikkus",
		flowLengthSnip: "See funktsioon arvutab piki iga piksli vooluteed üles- või allavoolu vahemaa või kaalutud vahemaa.",
		flowLengthDesc: "See on globaalne rasterfunktsioon. See funktsioon loob piki iga piksli vooluteed üles- või allavooluvahemaa või kaalutud vahemaa rasterkihi.<div><br/>Voolupikkuse funktsiooni peamine kasutusala on pikima voolutee pikkuse arvutamine konkreetses vesikonnas. Seda mõõtu kasutatakse sageli vesikonna kontsentratsiooni aja arvutamiseks. Seda saab teha valikuga Ülesvoolu. Funktsiooni abil saab ka luua hüpoteetiliste sademe- ja äravoolusündmuste vahemaa ja pindala diagrammide loomiseks, kasutades kaalurastrit kallakul liikumise takistusena.</div>",
		streamOrderName: "Voojärjestus",
		streamOrderSnip: "Määrab lineaarse võrgustiku harusid tähistavatele rastrisegmentidele järjekorranumbrid.",
		streamOrderDesc: "See on globaalne rasterfunktsioon. See funktsioon loob rasterkihi, mis määrab lineaarse võrgustiku harusid tähistavatele rastrisegmentidele järjekorranumbrid.<div><br/>Voojärjestuse funktsiooni väljund on kvaliteetsem kui sisendvoo rasterkiht ja sisendvoolusuuna rasterkiht on tuletatud samast pinnast. Kui vooraster on tuletatud rasterkujule teisendatud voogude andmestikust, ei pruugi väljund olla kasutatav, kuna suund ei vasta pikslipõhiselt voopikslite asukohale. Vooluakumulatsiooni funktsiooni tulemeid saab kasutada rastervoovõrgu loomiseks, rakendades suure akumuleeritud vooluga pikslite valimiseks läviväärtuse. Näiteks saab voovõrgu määratlemiseks kasutada piksleid, millesse voolab rohkem kui 100 pikslit. Kasutage funktsiooni Con või Set Null sellise voovõrgurastri loomiseks, kus vooluakumulatsiooni väärtused, mis on 100 või suuremad, lähevad üheks, ja ülejäänud paigutatakse taustale (NoData). Tulemuseks saadud voovõrku saab kasutada voojärjestuse funktsioonis. See funktsioon toetab ainult D8 sisendvoolusuuna rasterkihti. D8 voolusuundade loomiseks saab kasutada voolusuuna funktsiooni ja need töötavad vaikevoolusuuna tüübiga D8.</div>",
		snapPourPointName: "Väljavoolupunkti snäp",
		snapPourPointSnip: "Snäpib väljavoolupunktid suurima vooluakumulatsiooniga piksliga määratud vahemaa raadiuses.",
		snapPourPointDesc: "See on globaalne rasterfunktsioon. See funktsioon snäpib väljavoolupunktid suurima vooluakumulatsiooniga piksliga määratud vahemaa raadiuses.<div><br/>Väljavoolupunktide snäpi funktsiooni abil tagatakse suure akumuleeritud vooluga punktide valimine äravooluala tuvastamisel valgala funktsiooniga. Väljavoolupunktide snäpi funktsioon otsib määratud väljavoolupunktidest snäpivahemaa raadiuses suurima akumuleeritud vooluga pikslit ja viib väljavoolupunkti sellesse asukohta. Kui algsed väljavoolupunktide asukohad on snäpitud suurema akumuleeritud vooluga asukohtadele, on väljundiks täisarvuline rasterkiht.</div>",
		sinkName: "Neel",
		sinkSnip: "Loob rasterkihi, mis tuvastab kõik neelud või sisemise äravooluga alad",
		sinkDesc: "See on globaalne rasterfunktsioon. See funktsioon loob rasterkihi, mis tuvastab kõik neelud või sisemise äravooluga alad. Neel on selline piksel või ruumiliselt ühendatud pikslite komplekt, mille voolusuunale ei saa määrata ühte voolusuuna rastri kaheksast kehtivast väärtusest. See võib juhtuda näiteks siis, kui kõik naaberpikslid asuvad töödeldavast pikslist kõrgemal või kui kaks pikslit voolavad teineteisesse, luues kahest pikslist koosneva tsükli.<div><br/>Neelu funktsioon toetab ainult D8 sisendvoolusuuna rasterkihti. D8 voolusuundade loomiseks saab kasutada voolusuuna funktsiooni ja need töötavad vaikevoolusuuna tüübiga D8. Neelufunktsiooni väljund on täisarvuline raster, kus igale neelule on määratud kordumatu väärtus. Nende kordumatute väärtuste vahemik on ühest kuni neelude koguarvuni. Kui neelude koguarv on näiteks 1000, on kordumatute väärtuste vahemik 1 kuni 1000.</div>",
		aggregateName: "Agregeeri",
		aggregateSnip: "Loob rastri vähendatud resolutsiooniga versiooni.",
		aggregateDesc: "Agregeerimisfunktsioon diskreedib sisendrastri spetsiaalse agregeerimisstrateegia abil jämedama resolutsiooniga rastriks. Iga väljundraster sisaldab selle rastri ulatusse kuuluvate sisendrastrite summat, minimaalset ja maksimaalset väärtust, keskmist või mediaani.<div><br/>Tegur, millega korrutatakse sisendi rastri lahtri suurus. Näiteks annab lahtri teguri väärtus kolm väljundi lahtri suuruse, mis on sisendi rastrist kolm korda suurem. Saate määratleda väljundi ulatuse käsitsemise viisi, kui sisendi ridade või veergude arv ei ole lahtri teguri täpne kordne. Vaikimisi laiendatakse ülemist ja parempoolset piiri nii, et see kataks sisendrastrist suurema ruumilise ulatuse selleks, et tagada kõigi sisendlahtrite töötlemise. Alternatiivselt võib ülemist ja parempoolset piiri vähendada nii, et see hõlmaks väiksemat ulatust nii, et töödeldavate ridade ja veergude arv oleks lahtri teguri täpne kordne. Saate määratleda NoData pikslite käsitsemise viisi agregeerimisarvutuses. Vaikemehhanism on selline, et sisendi NoData lahtreid, mis langevad väljundi rastri suurema lahtri ruumilisse ulatusse, eiratakse selle väljundi lahtri väärtuse määramisel. Alternatiivselt saate määrata, et kui väljundlahtri ruumilise ulatuse piires on olemas kasvõi üks sisendi NoData lahter, siis see lahter on väljundi rastris NoData.</div>",
		ccdcName: "CCDC analüüs",
		ccdcSnip: "Hindab piksli väärtuste muudatusi aja jooksul, kasutades pideva muutmise tuvastamise ja klassifitseerimise (CCDC) algoritmi, ja genereerib mudeli tulemused.",
		ccdcDesc: "CCDC analüüsifunktsioon hindab piksli väärtuste muudatusi aja jooksul, kasutades pideva muutmise tuvastamise ja klassifitseerimise (CCDC) algoritmi, ja genereerib mitmemõõtmelise rastri, mis sisaldab mudeli tulemusi. Seda toetatakse ainult seoses muudatuse analüüsi abil muudatuse tuvastamise funktsiooniga rastrifunktsiooni mallis. Rastri väljundi saamiseks ühendage CCDC analüüsi funktsioon muudatuse analüüsi abil tuvastamise funktsiooniga, salvestage rastrifunktsiooni mallina ja käitage funktsioonimalli abil rastrianalüüs.<div><br/>See funktsioon kasutab pideva muutmise tuvastamise ja klassifitseerimise (CCDC) algoritmi, et hinnata pildikogumite jaoks aja jooksul muudatusi piksli väärtustes. Optiliste pildiandmete ajajadades või pildiandmete tuletistes (näiteks NDVI) võivad pikslite väärtused kõikuda mitmel põhjusel: 1. Hooajalised muudatused -- Piksli väärtuse muudatused peegeldavad taimestiku muutumist temperatuuri ja sademete hooajalise variatsiooni tõttu. Põhjapoolkeral eeldame näiteks, et rohelise taimestiku tihedus on suvel suurem kui talvel; 2. Pidevad muudatused -- Piksli väärtuse muudatused peegeldavad taimestiku või pinnavee trende tingituna kliima muutumisest või maaharimise pikaajalisest praktikast. Näiteks võib puhta pinnase pindala sademete pikaajalise vähenemise tõttu järk-järgult suureneda; ja 3. Äkiline muudatus -- Pikslite väärtuse muutused kajastavad pinnakatte muutusi, mis toimuvad ootamatult metsa raadamise, linnaarengu, loodusõnnetuste jne tõttu. CCDC algoritm tuvastab kõik kolm muudatuse tüüpi peamise eesmärgiga tuvastada äkilisi muudatusi. Hooajaliste ja järkjärguliste muutuste hindamiseks on andmetele lisatud harmooniline regressiooni- ja trendimudel ning järsud muutused näitavad äkilisi kõrvalekaldeid trendimudelitest.<div><br/>CCDC algoritm töötati algselt välja Landsat TM, Landsat ETM+ ja Landsat OLI pindpeegelduse andmete või heledustemperatuuri andmete käsitsemiseks. Muutuste tuvastamine muudatuste analüüsi abil koos selle funktsiooniga tuvastab mitmeribaliste kujutiste muutused siiski mis tahes toetatud anduri abil nagu ka üheribaliste kujutiste tuletised, näiteks ribade indeksid. Näiteks saate pidevate muudatuste tuvastamiseks kasutada taimkatte normaliseeritud vaheindeksi (NDVI) rastrit, sest NDVI äkilised muudatused võivad viidata metsa raadamisele.</div>",
		computeChangeName: "Muudatuse arvutamine",
		computeChangeSnip: "Arvutatakse kahe kategoorilise või pideva rasterandmestiku erinevus.",
		computeChangeDesc: "Funktsiooni Muudatuse arvutamine saab kasutada pinnakatte muutuse analüüsimisel kahe klassifitseeritud rastri erinevuste loetlemiseks või näiteks kõrguse, temperatuuri, varikatte jne muutuste uurimiseks kahe üheribalise pideva rastri vahel.",
		detectChangeName: "Muudatuse tuvastamine muutuse analüüsi teel",
		detectChangeSnip: "Genereerib rasterkihi, mis sisaldab piksli muutmise teavet, kasutades väljundi muutmise analüüsirastrit.",
		detectChangeDesc: "<div>Funktsioon Muudatuse tuvastamine muutuse analüüsi teel genereerib rasterkihi, mis sisaldab piksli muutmise teavet, kasutades väljundi muutmise analüüsirastrit. Muutuse analüüsi raster tuleb genereerida muudatuse analüüsi teel, kasutades CCDC tööriista, või muudatuste analüüsi teel, kasutades CCDC analüüsirastri funktsiooni või LandTrendri analüüsirastri funktsiooni.</div><br><div>Seda rastrifunktsiooni saab kombineerida CCDC analüüsi rasterfunktsiooniga rastrifunktsiooni mallis. Rastri püsiva väljundi saamiseks ühendage CCDC analüüsi või LandTrendri analüüsi funktsioon muudatuse analüüsi abil tuvastamise funktsiooniga, salvestage rastrifunktsiooni mallina ja käivitage rastrianalüüs.</div><br><div>Parameeter <strong>Tüübi muutmine</strong> näitab genereeritud teavet. Teave tuletatakse muudatuse analüüsi rastrist. Kui kasutate seda funktsiooni CCDC funktsiooni/tööriista väljundil, saate valida järgmise kahe suvandi vahel:</div><ul><li><strong>Viimase muudatuse aeg</strong>--Kõige hilisem kuupäev ja kellaaeg, mil piksel märgistati muudetuks.</li><li><strong>Varaseima muutmise aeg</strong>--Kõige varaseim kuupäev ja kellaaeg, mil piksel märgistati muudetuks.</li><li><strong>Suurima muudatuse aeg</strong>--Kuupäev ja aeg, mil arvutatud muudatus oli piksli jaoks kõige olulisem.</li><li> <strong>Muudatuste arv</strong>--Piksli muutumiste koguarv.</li></ul><div>Selle funktsiooni kasutamise korral LandTrendri funktsiooni/tööriista väljundil, on saadaval alljärgnevad täiendavad suvandid:</div><ul><li><strong>Pikima muudatuse aeg</strong>--Kuupäev, mil piksel märgistati muudetuks pikima muudatusperioodi alguses või lõpus.</li><li><strong>Lühima muudatuse aeg</strong>--Kuupäev, mil piksel märgistati muudetuks lühima muudatusperioodi alguses või lõpus.</li><li><strong>Kiireima muudatuse aeg</strong>--Kuupäev, mil piksel märgistati muudetuks kiireima muudatusperioodi alguses või lõpus.</li><li><strong>Aeglaseima muudatuse aeg</strong>--Kuupäev, mil piksel märgistati muudetuks aeglaseima muudatusperioodi alguses või lõpus.</li></ul><div>Väljundi raster on mitmemõõtmeline raster, kus iga riba sisaldab muudatusteavet olenevalt valitud muudatustüübist ja muudatuste määratud maksimaalse arvust. Kui näiteks parameeter <strong>Muudatuse tüüp</strong> on seatud väärtusele <strong>Varaseima muudatuse aeg</strong> ja parameeter <strong>Muudatuste maksimaalne arv</strong> on seatud väärtusele 2, arvutab funktsioon kaks varaseimat kuupäeva, mil muudatus esines iga piksli kogu ajaseerias. Tulemus on raster, milles iga riba sisaldab varaseima muudatuse kuupäevi piksli kohta, ja teine riba sisaldab järgmise varaseima muudatuse kuupäevi piksli kohta.</div><br><div>Selle funktsiooni rakendamisel LandTrendri tööriistade väljundile, saate valida, kas eraldada kuupäev, mis tähistab muudatuse algust või lõppu, kasutades parameetrit <strong>Segmendi kuupäev</strong>. Näiteks selle mõistmiseks, kuidas hiliseim muudatus ajaseerias algas, seadke parameeter <strong>Tüübi muutmine</strong> väärtusele <strong>Hiliseima muudatuse aeg</strong> ja parameeter <strong>Segmendi kuupäev</strong> väärtusele <strong>Segmendi algus</strong>.</div><br><div>Kasutage alljärgnevaid filtreerimisparameetreid, et eraldada oma muudatuste analüüsi rastrist muudatuse spetsiifilisemad kuupäevad:</div><ul><li><strong>Filtreeri aasta järgi</strong>--Tuvastage muudatused, mis toimusid teatud konkreetsel ajaperioodil, kui otsite näiteks muudatusi, mis toimusid maastikul viie aasta pikkuse põua ajal.</li><li><strong>Filtreeri kestuse järgi</strong>--Tuvastage muudatused, mis toimusid antud aastate vahemikus, kui otsite ainult äkilisi muudatusi, mis toimusid 1 või 2 aasta jooksul. Võite arvutada huvipakkuva kestuse, kasutades valemit <strong>lõpuaasta - algusaasta +1</strong>. Aegrea tühimikud kaasatakse.</li><li><strong>Filtreeri magnituudi järgi</strong>--Tuvastage antud magnituudiga muudatused, kui otsite näiteks ainult suuri muudatusi taimestikuindeksil NDVI. Magnituud on absoluutne väärtus. Seega minimaalne väärtus ja maksimaalne väärtus ei saa olla negatiivsed. Suunamuutuse määratlemiseks kasutage <strong>parameetrit </strong> Suunamuutus.</li></ul>",
		distanceAccumulationName: "Kauguse akumulatsioon",
		distanceAccumulationSnip: "Arvutab iga lahtri akumuleerunud kauguse allikateni, võimaldades kasutada sirgjoonelist kaugust, kulukaugust, tegelikku pinna kaugust, samuti vertikaalseid ja horisontaalseid kulutegureid.",
		distanceAccumulationDesc: "Kauguse akumulatsioon arvutab kauguse igale asukohale uuringu piirkonnas kuni lähima või kõige odavama allikani. Kui sisendina kasutatakse ainult allikaid, arvutatakse sirgjooneline kaugus iga asukohani uuringupiirkonnas. Kui sisendina kasutatakse nii allikaid kui takistusi, arvutab kauguse akumulatsioon sirgjoonelise kauguse ümber takistuste. Nii allika rastri kui takistuse rastri puhul peab taustaväärtus olema NoData, samal ajal kui allikad ja takistused esitatakse kehtivate lahtriväärtustega. Kehtivad väärtused sisaldavad nulli. <div><br/>Kui sisendina esitatakse pinnaraster, siis arvutatakse tegelik pinna kaugus lahtrite vahel. Kauguse akumulatsiooni kuluanalüüsi teostamiseks on vaja kulurastrit. Kui esitatakse kulupind, siis on tulemuseks akumuleeritud kulukauguse raster. Kui esitatakse horisontaalsed ja vertikaalsed tegurid, siis võetakse suunda arvesse kulu akumuleerimisel. Kasutada võib nelja lähteomadust. Neid omadusi, mis võivad olla kas allika omadused või allikast eemaldujate omadused, juhitakse spetsiifiliste parameetritega: 1. Algne akumulatsioon: seadistab algse kulu enne liikumise algust. 2. Maksimaalne akumulatsioon: määrab, kui suurt kulu allikas võib akumuleerida enne piirväärtuse saavutamist. 3. Kuludele rakendatav kordaja: määrab liikumisrežiimi või magnituudi allikal. 4. Liikumissuund: määrab, kas liikuja alustab allika juures ja liigub allikaga mitteseotud kohtadesse, või alustab allikaga mitteseotud kohast ja liigub tagasi allika juurde.<div><br/>Kauguse akumulatsiooni tulemus on vaikimisi üheribaline, mis on kauguse akumulatsiooni raster. Võib siiski luua ka teise riba, mis on tagasisuuna riba.  See riba näitab uuringuala igas kohas, millises suunas tuleb liikuda, et pääseda vähima kuluga allika juurde.  Uuringualas optimaalse tee määramiseks on vaja mõlemat riba. Tee genereerimiseks kasutage esmalt riba ekstraheerimise funktsiooni, et ekstraheerida kauguse akumulatsiooni raster ja tagasisuuna raster. Kasutage neid kihte kulutee funktsiooni sisendina. Selles funktsioonis kasutage kauguse akumulatsiooni rastrit kulutee rastri sisendina ja tagasisuuna rastrit kulu tagasilingi rastri sisendina.</div>",
		distanceAllocationName: "Kauguse paigutus",
		distanceAllocationSnip: "Arvutab iga lahtri kauguse paigutuse antud allikateni, võimaldades kasutada sirgjoonelist kaugust, kulukaugust, tegelikku pinna kaugust, samuti vertikaalseid ja horisontaalseid kulutegureid.",
		distanceAllocationDesc: "Kauguse paigutus arvutab, millisesse allikasse uuringuala iga asukoht paigutatakse. Kui sisendiks on ainult allikad, siis paigutatakse asukohad sirgjoonelise kauguse kaudu lähima allikani. Kui sisendina kasutatakse nii allikaid kui takistusi, arvutab kauguse paigutamine sirgjoonelise kauguse ümber takistuste, et määrata, millisesse allikasse on asukoht paigutatud. Nii allika rastri kui takistuse rastri puhul peab taustaväärtus olema NoData, samal ajal kui allikad ja takistused esitatakse kehtivate lahtriväärtustega. Kehtivad väärtused sisaldavad nulli.<div><br/>Kauguse paigutuse kuluanalüüsi teostamiseks on vaja kulupinda. Kui kulupind on olemas, siis on tulemuseks paigutusraster, mis põhineb akumulatiivsel kulul ja mitte sirgjoonelisel kaugusel. Kui esitatakse horisontaalsed ja vertikaalsed tegurid, siis võetakse suunda arvesse kulu akumuleerimisel. Kui sisendina esitatakse pinnaraster, siis arvutatakse tegelik läbitud pinna kaugus lahtrite vahel liikumise kohta siis, kui paigutus on määratud. Kasutada võib nelja lähteomadust. Neid omadusi, mis võivad olla kas allika omadused või allikast eemaldujate omadused, juhitakse spetsiifiliste parameetritega: 1. Algne akumulatsioon: seadistab algse kulu enne liikumise algust. 2. Maksimaalne akumulatsioon: määrab, kui suurt kulu allikas võib akumuleerida enne piirväärtuse saavutamist. 3. Kuludele rakendatav kordaja: määrab liikumisrežiimi või magnituudi allikal. 4. Liikumissuund: määrab, kas liikuja alustab allika juures ja liigub allikaga mitteseotud kohtadesse, või alustab allikaga mitteseotud kohast ja liigub tagasi allika juurde.<div><br/>Kauguse paigutamise tulemus on vaikimisi üheribaline, mis on kauguse paigutuse raster. Märkides ära Boole’i variandi Genereeri allika rida ja veerg lisaribana väljundil, on tulemuseks kolmest ribast koosnev mitmeribaline raster. Esimene riba on kauguse paigutamise raster, teine riba sisaldab rea indeksit ja kolmas riba sisaldab veeru indeksit. Need indeksid tuvastavad asukoha väikseima akumuleeritud kulukaugusega lähtelahtril. Allika rea indeksit ja allika veeru indeksit saab kasutada koos, et teostada intensiivsuse kaardistamist. Kui teete oma uuringualas päringu mis tahes asukoha kohta üle ribade kaks ja kolm, saate selle asukoha kohta teada kõige väiksema kuluga rea ja veeru kohta.</div>",
		eucBackDirectionName: "Eukleidiline tagasisuund",
		eucBackDirectionSnip: "Arvutab iga lahtri jaoks suuna kraadides naaberlahtrini piki lühimat teed tagasi lähima allika juurde, vältides takistusi.",
		eucBackDirectionDesc: "Eukleidilise tagasisuuna funktsiooni tulemus on pidev ujukomaraster, mis väljendab suunda kraadides tagasi lähima allika juurde, vältides takistusi, kui need on olemas.<div><br/>Eukleidilise tagasisuuna sisendid on allikas, mille järgi see suund arvutatakse. Valikuline sisend on raster, mis esindab uuringualas takistusi. Nii allika rastri kui takistuse rastri puhul peab taustaväärtus olema NoData, samal ajal kui allikad ja takistused esitatakse kehtivate väärtustega. Kehtivad väärtused sisaldavad nulli. Vaikimisi käsitleb arvutus allikate ja takistuste kombineeritud ulatust, pluss kaht rida ja veergu. Kui analüüs on vajalik vaid teatud kindlal kaugusel allikatest, siis võib kasutada maksimaalse kauguse parameetrit. Eukleidiline tagasisuund toetab arvutuses nii planaarset meetodit kui geodeetilist meetodit. Planaarne arvutusmeetod viiakse läbi projitseeritud tasapinnal, kasutades Cartesiuse 2D-koordinaatide süsteemi. Geodeetiline arvutusmeetod viiakse läbi ellipsoidil, mis tähendab, et tulemused ei muutu hoolimata sisendi või väljundi projektsioonist.<div><br/>Eukleidilist tagasisuuna funktsiooni võib kasutada seoses eukleidilise kauguse funktsiooni tulemusega, et määrata lühimad teed asukohtadest uuringuala piires allika juurde tagasi. Nii eukleidilise tagasisuuna tulemust kui eukleidilise kauguse tulemust kasutatakse kulutee funktsioonis koos sihtkohtadega, et genereerida lühimad teed.</div>",
		expandName: "Laienda",
		expandSnip: "Laiendab rastri valitud tsoone konkreetse lahtri arvuga tsoonide võrra.",
		expandDesc: "Laiendatud globaalfunktsiooni abil saate üldistada või lihtsustada rastreid, muutes konkreetsed tsoonid suuremaks. Saate muuta ka toimuva üldistuse määra.<div><br/>Teie valitavate tsoonide suurus suureneb muudesse tsoonidesse laienemise tõttu. Põhimõtteliselt saab valitud tsooniväärtusi käsitleda eeltsoonidena, samal ajal kui ülejäänud tsoonid jäävad taustatsoonideks. Eeltsoonid võivad laieneda taustatsoonideks.<div><br/>Üldistuse määra saab reguleerida lahtrite arvu parameetri abil. Vaikimisi on see väärtus 1, mis tähendab, et valitud tsoonid laienevad ühe lahtri suurusele vastava koguse võrra. Üldistuse määra suurendamiseks saate sellele parameetrile määrata suurema väärtuse. Põhimõtteliselt tähendab see tööriista käitamist määratud numbrile vastav arv korda, kusjuures eelmise käituse tulemused sisestatakse järgmisse iteratsiooni.</div>",
		trendAnalysisName: "Trendi loomine",
		trendAnalysisSnip: "Kalkuleerib iga piksli trendi piki ühe või mitme muutuja mõõdet mitmemõõtmelises rastris.",
		trendAnalysisDesc: "<div>Seda funktsiooni võib kasutada andmete sobitamiseks piki lineaarset, harmoonilist või polünoomset trendijoont või seda võib kasutada trendi tuvastamiseks, kasutades Mann-Kendalli või hooajalise Kendalli katset.</div><br><div>Selle funktsiooni abil genereeritud väljundtrendi rastrit kasutatakse sisendina funktsioonil <strong>Ennusta trendi abil</strong> .</div><br><div>Mann-Kendalli ja hooajalise Kendalli katseid kasutatakse selleks, et määrata, kas andmetel esineb monotoonne trend. Need on mitteparameetrilised, st ei eelda andmete spetsiifilist jaotust. Mann-Kendalli katse ei võta arvesse hooajaliste mõjude jadakorrelatsiooni. Kui andmed on hooajalised, sobib hooajaline Kendalli katse paremini.</div><br><div>Kui tööriista kasutatakse kas Mann-Kendalli katse või hooajalise Kendalli katse teostamiseks, on tulemuseks alljärgnev viieribaline raster:</div><ul><li>Riba 1 = Sen'i kalle</li><li>Riba 2 = p-väärtus</li><li>Riba3 = Mann-Kendalli skoor (S)</li><li>Riba 4 = S-variatsioon</li><li>Riba 4 = S-variatsioon</li><li>Riba 5 = Z-skoor</li></ul><div>Mann-Kendalli või hooajalise Kendalli katse tulemusi võib kasutada määramaks, millised pikslid teie mitmemõõtmelises aegreas omavad statistiliselt olulist trendi. Seda teavet saate kasutada koos lineaarse, harmoonilise või polünoomi trendianalüüsiga oma aegridade oluliste trendide väljatoomiseks: Võite genereerida maski, mis sisaldab oluliste p-väärtustega piksleid, rakendada maski mitmemõõtmelisele rastrile ja kasutada seda maskeeritud mitmemõõtmelist rastrit tööriista sisendina lineaarse, harmoonilise või polünoomi trendianalüüsi tegemiseks.</div><br><div>Trendi sobitamiseks muutuja väärtustega dimensiooni järgi on kolm trendijoont: lineaarne, polünoom ja harmooniline.</div><br><div>Lineaarse trendianalüüsi puhul on väljund alljärgnev kolmeribaline raster:</div><ul><li>Riba1 = kalle</li><li>Riba 2 = sirglõik</li><li>Riba 3 = juurkeskmise ruutviga või viga parima vastavusega joone ümber</li></ul><div>Polünoomide trendianalüüsi jaoks sõltub väljundis olevate ribade arv polünoomide järjekorrast. Teise järgu polünoomide liitmikuga saadakse neljaribaline raster järgmiselt:</div><ul><li>Riba 1 = Polünoom_2</li><li>Riba 2 = Polünoom_1</li><li>Riba 3 = Polünoom_0</li><li>Riba 4 = RMSE</li></ul><div>Kolmanda järgu polünoomi liitmik annab viieribalise rastri järgmiselt:</div><ul><li>Riba 1 = Polünoom_3</li><li>Riba 2 = Polünoom_2</li><li>Riba 3 = Polünoom_1</li><li>Riba 4 = Polünoom_0</li><li>Riba 5 = RMSE</li></ul><div>Harmooniliste trendide analüüsimiseks sõltub väljundis olevate ribade arv harmoonilisest sagedusest. Kui sagedus on seatud väärtusele 1, on väljund viieribaline raster järgmiselt:</div><ul><li>Riba 1 = Kalle</li><li>Riba 2 = Sirglõik</li><li>Riba 3 = Harmooniline_sin1</li><li>Riba 4 = Harmooniline_cos1</li><li>Riba 5 = RMSE</li></ul><div>Kui sagedus on seatud väärtusele 2, on väljund seitsmeribaline raster järgmiselt:</div><ul><li>Riba 1 = Kalle</li><li>Riba 2 = Sirglõik</li><li>Riba 3 = Harmooniline_sin1</li><li>Riba 4 = Harmooniline_cos1</li><li>Riba 5 = Harmooniline_sin2</li><li>Riba 6 = Harmooniline_cos2</li><li>Riba 7 = RMSE</li></ul><div>Harmoonilise trendianalüüsi parameetrit <strong>Tsükli pikkus</strong> kasutatakse selleks, et näidata tsüklite arvu ja pikkust, mida loodate oma andmetes näha kogu päeva või aasta jooksul. Kui eeldate näiteks, et teie andmed läbivad ühe aasta jooksul kaks variatsioonitsüklit, on tsükli pikkus 182,5 päeva või 0,5 aastat. Kui temperatuuriandmeid kogutakse iga kolme tunni järel ja päevas on üks variatsioonitsükkel, on tsükli pikkus üks päev.</div><br><div>Harmoonilise trendianalüüsi sageduse parameetrit <strong>Sagedus</strong> kasutatakse harmoonilise mudeli kirjeldamiseks, et see sobiks andmetega. Kui sageduseks on seatud 1, kasutatakse mudeli sobitamiseks lineaarse ja esimese järgu harmoonilise kõvera kombinatsiooni. Kui sagedus on 2, kasutatakse andmete sobitamiseks lineaarse, esimese järgu harmoonilise kõvera ja teise järgu harmoonilise kõvera kombinatsiooni. Kui sagedus on 3, kasutatakse andmete modelleerimiseks täiendavat kolmanda järgu harmoonilist kõverat jne.</div><br><div>Mudeli sobivuse statistika saab genereerida valikuliste väljunditena. Ruutkeskmise vea, R-ruudu ja trendi kalde p-väärtuse saab arvutada ja sümboliseerida. Sümboliseerige väljundtrendi rasterkiht <strong>RGB</strong> sümboolika abil ja määrake statistika punase, rohelise ja sinise ribana.</div><br>",
		spectralUnmixingName: "Lineaarne spektraalne eraldamine",
		spectralUnmixingSnip: "Teostab alampikslite klassifikatsiooni jaa arvutab üksikute pikslite jaoks erinevate maakattetüüpide fraktsioonilise rohkuse.",
		spectralUnmixingDesc: "Lineaarse spektraalse eraldamise funktsioon arvutab mitut maakattetüüpi sisaldavate üksikute pikslite fraktsioonilise katte. See loob mitmeribalise kihi, kus iga riba vastab maakatte iga klassi fraktsioonilisele rohkusele. Näiteks saate seda kasutada multispektrilisel pildil maakatte klassifitseerimiseks fotosünteetilise taimestiku, palja pinnase ja surnud või mittefotosünteetilise taimestiku tuvastamiseks.<div><br/>Väljundi mitmeribalise rastri järjekord järgib sisendi spektrilise profiili järjekorda. Klasside arv ei tohi ületada ribade arvu sisendi rastris. Näiteks ei ole 8-ribalisest rastrist  võimalik eraldada teavet rohkem kui 8 klassi.</div>",
		multidimensionalFilterName: "Mitmemõõtmeline filter",
		interpolateRasterByDimensionFunctionName: "Interpoleeri raster dimensiooni järgi",
		interpolateRasterByDimensionFunctionSnip: "Interpoleerib mitmemõõtmelise rastri määratud mõõtmete väärtustel külgnevate lõikude abil.",
		interpolateRasterByDimensionFunctionDesc: "<p>See funktsioon võimaldab hinnata mitmemõõtmelise rastri määratlemata mõõtmete lõigu piksliväärtusi. Näiteks kui teil on andmestik, mis sisaldab ookeani temperatuuri pinnatasandil ja 100 meetrit allpool merepinda ja soovite hinnata temperatuuri 50 meetrit allpool merepinda, saate seda funktsiooni kasutada selle sügavuse hinnangu saamiseks, kasutades käsku Autor Väärtuste dimensiooni määratlus.</p><p>Saate ka igakuise andmestiku allaproovi võtta igapäevaseks andmekogumiks, kasutades dimensiooni definitsiooni intervalli järgi ja määrates sammu parameetri väärtuseks 1 ja ühiku parameetri väärtuseks päevad.</p><p>Kasutage sihtrastri väärtuse hindamiseks mõõtme määratlust sihtrasteri järgi.</p>",
		multidimensionalFilterSnip: "Loob rasterkihi mitmemõõtmelisest rastri andmestikust või mitmemõõtmelise rastrikihi, jaotades andmeid määratletud muutujate ja mõõtmete järgi.",
		multidimensionalFilterDesc: "Mitmemõõtmeline filter loob mitmemõõtmelise rasterkihi, filtreerides ja eraldades muutujate alamhulga mitmemõõtmelisest rastrist. Näiteks juhul, kui teil on mitmemõõtmeline andmestik, mis sisaldab 30 aasta kohta igakuiseid sademete andmeid, ja soovite eraldada andmed iga jaanuarikuu kohta, et näha, kuidas sademed on sel kuul muutunud.<div><br/>Kasutage mõõtme määratlemise parameetrit, et jaotada mõõtmeid, kasutades intervalli, väärtust või väärtuste vahemikku. Kui teil on näiteks 10 aasta jooksul kogutud andmed ookeanivee soolsuse kohta, mida koguti kord kuus iga 2 meetri sügavuse kaupa kuni 500 m sügavuseni, võite kasutada erinevaid mõõtmete määratlemise suvandeid alljärgnevate stsenaariumide jaoks. 1. stsenaarium: jaanuarikuu soolsuse andmete eraldamine 10-aastase perioodi kohta. Valige suvand Väärtuste kaupa, seadistage mõõtmeks Standardne aeg ja väärtuseks Jaanuar. 2. stsenaarium: jaotage soolsuse andmed sügavusvahemikule 0 kuni 150 meetrit. Valige suvand Vahemike kaupa, seadistage mõõtmeks StdZ, minimaalseks väärtuseks -150 ja maksimaalseks väärtuseks 0. 3. stsenaarium: iga jaanuarikuu esimese 10 päeva soolsuse andmete eraldamine 10-aastase perioodi kohta. Valige suvand Iteratsiooni kaupa, seadistage mõõtmeks Standardne aeg, seadistage Esimese iteratsiooni algus ja Esimese iteratsiooni lõpp iteratsiooniperioodi algusele ja lõpule ning sammuks 1 ja ühikuks aasta.</div>",
		multidimensionalRasterName: "Mitmemõõtmeline raster",
		multidimensionalRasterSnip: "Lisab mitmemõõtmelised andmed kaardile mitmemõõtmelise rastrikihina.",
		multidimensionalRasterDesc: "Mitmemõõtmelise rastri funktsioon lisab mitmemõõtmelised andmed kaardile mitmemõõtmelise rastrikihina. See funktsioon on kasulik, kui rasteranalüüsi töövoogude teostamiseks kasutatakse funktsiooniahelat.<div><br/>Toetatud mitmemõõtmeliste rasterandmestike hulka kuulvad netCDF, GRIB, HDF ja Esri CRF. Toetatud on ka mitmemõõtmelised mosaiikandmestikud.</div>",
		optimalPathAsRasterName: "Optimaalne tee rastrina",
		optimalPathAsRasterSnip: "Arvutab vähima kuluga tee allikast sihtkohta.",
		optimalPathAsRasterDesc: "See globaalne funktsioon koostab väljundrastri, mis registreerib optimaalse tee või teed valitud asukohtadest lähima kumulatiivse kulu pinnas määratletud lähtepikslini kuluvahemaa mõistes.<div><br/>Üht või mitut kaalutud kulufunktsiooni (kauguse akumulatsioon või kauguse paigutamine) on üldiselt vaja käitada enne optimaalse tee kasutamist rasterfunktsioonina, et luua sisendi kauguse akumulatsiooni ja tagasisuuna rastrid. Need on kohustuslikud sisendrastri kihid optimaalse tee funktsiooni jaoks. Need väljundi optimaalsel teel paiknevad väärtused esindavad antud asukohas teede arvu. Paljudel juhtudel järgivad teed pärast allikast väljumist sama marsruuti, kuid kulgevad siis erinevate sihtkohtade suunas. Näiteks näitab väärtus üks, et antud asukohas on ainult üks optimaalne tee, samal ajal kui väärtus viis tähendab, et selles piirkonnas on viis optimaalset teed, mis läbivad uuringualas seda lahtrit.<div><br/>Sisendi sihtandmed peavad moodustama rastrikihi. Sihtlahtrite komplekt sisaldab siendrastri kõiki lahtreid, millel on kehtivad väärtused. NoData-väärtustega lahtrid ei kuulu komplekti. Väärtust null loetakse õiguspäraseks sihtkohaks. Sihtkoha rastri võib luua eraldustööriistade abil. Kui teil on sihtkoha või allika objektid, saate need teisendada rastriks objektide rasteriseerimise funktsiooni abil. Kasutage rasteriseerimise funktsiooni rastri sisendina kauguse akumulatsiooni või tagasisuuna rastrit. See tagab objekti rasteriseerimise lahtri sama suuruse, ulatuse ja koordinaatsüsteemi abil nagu muudel rastritel, mis liiguvad rastrifunktsioonina optimaalsele teele. Optimaalset teed saab rastrifunktsioonina kasutada ka, et tuletada vähima takistusega tee digitaalseks kõrgusmudeliks (DEM). Sel juhul kasutage sisendi kauguse akumulatsiooni rastrina DEM-i ja tagasisuuna rastrina voolusuuna funktsiooni väljundit.</div>",
		trendName: "Trendi abil prognoosimine",
		trendSnip: "Arvutab ennustatud mitmemõõtmelise rastri tööriista Trendi rastri loomine väljundi trendi rastri abil.",
		trendDesc: "Funktsioon Trendi abil prognoosimine arvutab ennustatud mitmemõõtmelise rastri funktsiooni Trendi rastri loomine või geotöötluse tööriista Loo trendi raster abil.",
		rasterCollectionName: "Rastri kogu töötlemine",
		rasterCollectionSnip: "Töötleb kõiki lõike mitmemõõtmelises rastris või iga üksust mosaiikrastris. Selle funktsiooniga saab ka agregeerida mitu lõiku üheks lõiguks.",
		rasterCollectionDesc: "Funktsioon Rastri kogu töötlemine töötleb kõiki lõike mitmemõõtmelises rastris või iga üksust mosaiikrastris. Selle funktsiooniga saab ka agregeerida mitu lõiku üheks lõiguks.<div><br/>See funktsioon töötleb kõiki lõike mitmemõõtmelises rastris või mosaiikrastrit, kasutades rastrifunktsiooni malli. See funktsioon toetab alljärgnevaid suvandeid: 1. Rastrifunktsiooni malli määramine üksuse funktsiooni jaoks. Kui teil on näiteks mosaiikandmestik, mis sisaldab 20 aasta jooksul kogutud Landsati pilte ja soovite arvutada NDVI iga aegrea stseeni jaoks. Üksuse funktsiooni jaoks määrake rastri funktsiooni mall, mis sisaldab NDVI rastri funktsiooni. 2. Määrake rastrifunktsiooni mall agregeerimise funktsiooni jaoks. Teil on näiteks mitmemõõtmeline raster, mis sisaldab 10 aasta jooksul iga päev kogutud andmeid temperatuuri kohta ja soovite igale aastale arvutada maksimaalse temperatuuri. Agregeerimise funktsiooni puhul määrake rastrifunktsiooni mall, mis sisaldab lahtri statistika funktsiooni, mille talitlus on seatud maksimumile. Agregeerimise määratlemiseks seadke mõõtmeks Standardne aeg, seadistage tüübiks Intervalli võtmesõna ja seadke võtmesõna intervalliks Kord aastas. Palun arvestage, et kui sisendi mosaiikandmestik ei ole mitmemõõtmeline, siis ei võta agregeerimise funktsioon arvesse agregeerimise määratlust. Agregeerimise funktsioon agregeerib kõik üksused või kõik grupid üheks, kui need on määratletud agregeerimise funktsiooni mallis. Lisateavet gruppide kasutamise kohta mosaiikandmestikus leiate jaotisest Mosaiikandmestiku üksuste kasutamine rasterfunktsiooni mallides. 3. Määrake rastrifunktsiooni mall töötlemisfunktsiooni jaoks. Selle malli funktsiooni või funktsiooniahelat kasutatakse uue töödeldud rastri kuvamiseks. Määrake näiteks rastrifunktsiooni mall, mis sisaldab Colormap-funktsiooni, et muuta töödeldud rastrikihi kuvamise viisi. Palun arvestage, et sisend on mitmemõõtmeline raster ja et töötlemisfunktsiooni rakendatakse parajasti kuvatavale lõigule. Kui sisend on mosaiikkiht või mosaiikandmestik, rakendatakse mosaiikrastrile töötlemisfunktsiooni, kasutades ülekatete lahendamiseks esimest meetodit. 3. Määrake mallid kolme funktsiooni igasuguse kombinatsiooni jaoks. Teil on näiteks mosaiikandmestik, mis sisaldab Landsat pildiandmete aegrida, ja soovite maksimaalse NDVI komposiitpilti. Üksuse funktsiooni jaoks määrake rastri funktsiooni mall, mis sisaldab NDVI rastri funktsiooni. Agregeerimise funktsiooni puhul määrake rastrifunktsiooni mall, mis sisaldab lahtri statistika funktsiooni, mille talitlus on seatud maksimumile. Töötlemise funktsiooni jaoks määrake rastri funktsiooni mall, mis sisaldab Colormap-funktsiooni. Palun arvestage, et funktsiooni töötlemise järjekord järgib sisendparameetrite järjekorda. Näiteks töödeldakse esimesena üksust Funktsioon.</div>",
		randomName: "Juhuslik",
		randomSnip: "Loob rastri juhuslike piksliväärtustega, mis joonestatakse pooljuhusliku jaotuse põhjal. Toetatakse mitut jaotust ja juhuslike arvude generaatorit.",
		randomDesc: "Juhuslik funktsioon loob rastri juhuslike piksliväärtustega, mida võib kasutada rastrifunktsiooni mallidena või mosaiikandmestikena.<div><br/>Kui mitu funktsiooni töötab ühe või mitme sisendi rastriga, ei vaja juhuslik funktsioon sisendi rastrit. See tähendab, et funktsioon toimib rohkem rastri andmestikuna kui funktsioonina. Seega tuleb funktsiooni lisamisel või selle funktsiooniahelast eemaldamisel olla ettevaatlik.</div>",
		shrinkName: "Kahandamine",
		shrinkSnip: "Kahandab valitud tsoone lahtrite määratud arvu kordselt, asendades need lahtri väärtusega, mida esineb ümbruses kõige sagedamini.",
		shrinkDesc: "Kahandamise globaalfunktsiooni abil saate üldistada või lihtsustada rastreid, muutes konkreetsed tsoonid väiksemaks. Saate muuta ka toimuva üldistuse määra.<div><br/>Valitavad tsoonid kahanevad ehk nende suurus väheneb, kui naabertsoonide lahtrid laienevad nende sisse. Põhimõtteliselt saab valitud tsooniväärtusi käsitleda eeltsoonidena, samal ajal kui ülejäänud tsoonid jäävad taustatsoonideks. Eeltsooni lahtreid saab asendada taustatsooni lahtritega. Vahetada saab ka tsooni siseseid õhukesi saarekesi, mida saab vaadelda tsooni jaotuspiiridena.<div><br/>Üldistuse määra saab reguleerida lahtrite arvu parameetri abil. Vaikimisi on see väärtus 1, mis tähendab, et valitud tsoonid kahanevad ühe lahtri suurusele vastava koguse võrra. Üldistuse määra suurendamiseks saate sellele parameetrile määrata suurema väärtuse. Põhimõtteliselt tähendab see tööriista käitamist määratud numbrile vastav arv korda, kusjuures eelmise käituse tulemused sisestatakse järgmisse iteratsiooni.</div>",
		trendToRGBName: "Trend RGB-sse",
		trendToRGBSnip: "Teisendab trendi rastri kolmeribaliseks (punane, roheline ja sinine) rastriks.",
		trendToRGBDesc: "Funktsioon Trend RGB-sse teisendab trendi rastri kolmeribaliseks (punane, roheline ja sinine) rastriks. Trendi raster luuakse funktsiooni Trendi rastri loomine või funktsiooni CCDC analüüsi raster abil.<div><br/>See funktsioon on kasulik selleks, et visualiseerida mudeli koefitsiendi andmeid funktsiooni Trendi loomine või funktsiooni CCDC analüüs abil. Mõlemad funktsioonid hindavad trende piksli muutuvate väärtustena, kuid funktsioonide tulemusi on raske otse tõlgendada.<div><br/>Nagu paljude rastri funktsioonide puhul võib selle funktsiooni tulemuste paremaks kuvamiseks olla vaja kasutada dünaamilise vahemiku reguleerimist (DRA).</div>",
		landTrendrName: "LandTrendri analüüs",
		landTrendrSnip: "Hindab piksliväärtuste muutusi ajas, kasutades Landsati-põhist häirete ja taastumise suundumuste tuvastamise (LandTrendr) meetodit ning genereerib mudeli tulemusi sisaldava muutusanalüüsi rastri.",
		landTrendrDesc: "Seda rasterfunktsiooni saab kasutada ainult sisendina rasterfunktsiooni Muudatuste tuvastamine muutusanalüüsi abil. Rastriväljundi genereerimiseks ühendage funktsioon LandTrendri analüüs rasterfunktsiooni malli funktsiooniga Muudatuste tuvastamine muutusanalüüsi abil ja kasutage malli sisendina geotöötlustööriista Rastri genereerimine rasterfunktsioonist. Tulemus on raster, mis sisaldab teavet piksli väärtuste muutmise aja kohta.<div><br>Selle rasterfunktsiooni eesmärk on välja tuua vaadeldava funktsiooni muutused nii, et ideaalsed sisestatud mitmemõõtmelised pildimaterjalid peaksid kogu selle aja jooksul salvestama järjepideva vaatluse andmeid, mis ei sisalda atmosfääri ega sensori häireid, pilvi ega pilvevarju. Parim tava on kasutada andmeid, mis on normaliseeritud ja mida saab maskeerida QA-riba abil, näiteks pilvemaski abil Landsat Collection 1 Surface Reflectance'i tooted.<div><br>Funktsioon analüüsib ühe pildi aastas ja iga-aastaste viilude arv peab olema võrdne või suurem kui parameeter <strong>Vaatluste minimaalne arv</strong>. On soovitatav omada vähemalt kuue aasta andmeid.<div><br>Kui teil on kuu-, nädala- või päevandmed, on soovitatav valida igal aastal mitu pilti (soovitavalt samast aastaajast), eemaldada pilved ja pilvevari ning kombineerida pildid, et luua üks pilt, mis vastab hästi vaatlusele. Kui sisestatud mitmemõõtmelise rastrina esitatakse kuu-, nädala- või päevandmed, tuvastab funktsioon analüüsi jaoks ühe viilu kuupäeval, mis on lähim parameetrile <strong>Snäppimise kuupäev</strong>.<div><br>Maastikul paikneva funktsiooni taastamiseks on vaja aega, näiteks metsatulekahju või putukatest tingitud nakkuse korral. Mudeli poolt tuvastatud taastumiskiiruse reguleerimiseks määrake parameeter Taastekünnis. Eraldatud segmendi taastemäär ei saa olla suurem kui 1 / taastekünnis.<div><br>Maastiku muutusest taastumine võib toimuda positiivses või negatiivses suunas. Kui maastikul on näiteks metsakadu, näitab taimestiku indeksi väärtuste aegrida indeksi väärtuste langust ja taastumine näitab taimestiku indeksi väärtuste järkjärgulist kasvu või positiivset taastumistrendi. Määrake taastumistrendi suund parameetriga <strong>Tõusva trendiga taastumine</strong>.",
		aggregateMultidimensionalName: "Agregeeri mitmemõõtmeline raster",
		aggregateMultidimensionalSnip: "Ühendab olemasoleva mitmemõõtmelise rasterandmestiku rastri muutujaid mööda dimensiooni.",
		aggregateMultidimensionalDesc: "Funktsioon Mitmemõõtmeline agregaat loob mitmemõõtmelise rasterkihi, ühendades olemasolevad mitmemõõtmelised rastermuutujad mööda dimensiooni.<div><br>Kasutage parameetrit <strong>Dimensiooni määratlus,</strong> et esmalt filtreerida välja sisendandmed, mida soovite agregeerida. Näiteks kui teil on 30 aastat iga kuu kohta andmed, kuid soovite luua ainult esimese 15 aasta jaoks koondkihi, võite kasutada parameetrit <strong>Dimensiooni määratlus</strong>, et määrata analüüsi kaasatavad aastad.<div><br><ul><li>Väljastage soolsuse andmed jaanuarikuu kohta 10-aastase perioodi vältel. Tehke valik <strong>Väärtuste kaupa</strong>, seadke parameeter <strong>Dimensioon</strong> väärtusele <strong>StdTime</strong> ja seadke parameeter <strong>Väärtused</strong> väärtusele <strong>Jaanuar</strong>.</li><li>Väljastage soolsusandmed sügavuse vahemikus 0 kuni 150 meetrit. Tehke valik <strong>Vahemike kaupa</strong>, seadke parameeter <strong>Dimensioon</strong> väärtusele <strong>StdZ</strong> ja seadke parameeter <strong>Minimaalne väärtus</strong> valikule <strong>-150</strong> ning parameeter <strong>Maksimaalne väärtus</strong> väärtusele <strong>0</strong>.</li><li>Väljastage 10-aastase ajavahemiku jooksul iga jaanuari esimese 10 päeva soolsuse andmed. Tehke valik <strong>Iteratsiooni kaupa</strong>, seadke parameeter <strong>Dimensioon</strong> väärtusele <strong>StdTime</strong>, seadke parameeter <strong>Esimese iteratsiooni algus</strong> ja parameeter <strong>Esimese iteratsiooni lõpp</strong> vastavale iteratsiooniperioodi algusele ja lõpule, seadke parameeter <strong>Samm</strong> väärtusele <strong>1</strong> ja parameeter <strong>Ühik</strong> väärtusele <strong>Aastad</strong><br>.</li></ul><div>Kasutage parameetrit <strong>Agregeerimise määratlus</strong>, et valida hinnatav dimensioon ja agregeerimise intervall, kasutades võtmesõna, väärtust või väärtuste vahemikku. Kui teil on näiteks 30 aastat merepinna temperatuuri andmeid, mida kogutakse iga päev 5 kuni 100 meetri sügavusel, saate järgmiste stsenaariumide jaoks kasutada erinevaid intervallivalikuid:<div><br><ul><li>Koondage igapäevased temperatuuriandmed kuude andmeteks, mille tulemuseks on 12 ajaviiluga mitmemõõtmeline raster ja iga viil on iga aasta kõigi kuude koondnäitaja. Valige <strong>Intervalli võtmesõna</strong> ja seadke võtmesõna väärtuseks <strong>Kordub iga kuu</strong>.</li><li>Koondage päevased temperatuuriandmed kuude andmeteks, mille tulemuseks on mitmemõõtmeline raster, millel on 360 viilu või 12 ajaviilu aastas (30 aastat x 12 kuud = 360 viilu). Valige <strong>Intervalli võtmesõna</strong> ja seadke võtmesõna väärtuseks <strong>Kord kuus</strong>.</li><li>Koondage igakuised temperatuuriandmed 4-kuuliste intervallidena. Valige <strong>Intervalli väärtus</strong>, seadke <strong>Väärtuse intervall</strong> väärtusele 4 ja seadke <strong>Ühik</strong> väärtusele <strong>Kuud</strong>.</li><li>Summeerige temperatuuriandmed sügavusel 0–25 meetrit, seejärel 25–50 meetrit ja lõpuks 50–100 meetrit. Valige <strong>Intervalli vahemikud</strong> ja määrake minimaalne ja maksimaalne sügavus <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Rastrite liitmine",
		mergeRastersSnip: "Kombineerib mitu rasterandmekogumit ruumiliselt või muutujate ja mõõtmete lõikes.",
		mergeRastersDesc: "See funktsioon koostab rastrite loendi põhjal liidetud rastri. Kui teil on näiteks mosaiikandmekogum, mis sisaldab 30 aasta sademete andmeid ja teine ​​andmekogum 10 aasta temperatuuriandmetega, saate need kombineerida mõlema muutujaga mitmemõõtmeliseks rastriks. <div><br>Kui sisestatud mitmemõõtmelised rastrid sisaldavad erinevaid muutujaid, sisaldab mitmemõõtmeline väljundraster kõiki muutujaid. <div><br>Kui sisestatud mitmemõõtmelised rastrid sisaldavad erinevaid mõõtmeid või mõõtmete väärtusi, sisaldab mitmemõõtmeline väljundraster kõiki mõõtmeid ja mõõtmete väärtusi. <div><br>Kui sisestatud mitmemõõtmelised rastrid sisaldavad samu mõõtmeid ja muutujaid, kuid erineva ruumilise ulatusega, sisaldab mitmemõõtmeline väljundraster muutujaid ja mõõtmeid ühendatud ruumilistes mõõtmetes.<div><br>Seda funktsiooni saab kasutada ka siis, kui teil on mitu rastrit, mida soovite käsitleda ühe üksusena, näiteks arvutate kõigi jaoks sama statistikat, või värvide tasakaalustamisel nii, et te ei pea iga pilti eraldi tasakaalustama. See on kasulik failide suuruse piirangute tõttu eraldi paanidena salvestatud piltidega töötamisel, sest sel viisil käsitletakse paane sama pildi osana.",
		boundaryCleanName: "Puhas piir",
		boundaryCleanSnip: "Silub tsoonide vahelise piiri.",
		boundaryCleanDesc: "<p>Funktsioon üldistab või lihtsustab rastreid, tasandades tsoonidevahelisi piire. Funktsioon pakub võimalusi kontrollida, kuidas sisendi tsoonide lahtrid mõjutavad silumist ja rakendatava silumise hulka. Iga sisendelementiu hinnatakse kaheksa lähinaabri abil.</p><p>Silumisprotsess sorteerib esmalt naaberelemendid konkreetse prioriteedi järgi. Prioriteet määrab, milline naaberelementide tsoon võib väljundis asendada töötleva lahtri väärtuse.</p><p>Prioriteet võib põhineda kas tsoonide väärtusel või tsoonide suurusel. Parameeter <strong>Sortimistüüp</strong> määrab kasutatava sortimistüübi. </p><p>Vaikesäte <strong>Ära sordi</strong> hindab prioriteeti tsoonide väärtuse põhjal. Suuremate väärtustega tsoonide elementidel on suurem prioriteet laieneda väiksemate väärtustega tsoonidesse.</p><p>Prioriteedi sortimiseks võib kasutada tsoonide suurust või üldpindala. Seadistuse <strong>Kahanev</strong> korral sorditakse tsoone kahanevas järjekorras. Suuremate üldpindaladega tsoonidel on eelisõigus laieneda väiksemate aladega tsoonideks. Seadistuse <strong>Tõusev</strong> korral on tõene vastupidine: Väiksemate üldpindaladega tsoonidel on eelisõigus laieneda suuremate üldpindaladega tsoonideks.</p><p>Silumise mahtu reguleerib parameeter <strong>Käivita laiendamine ja kahandamine kaks korda</strong>, mis määrab laiendamise ja kahandamise protsesside teostamise arvu.</p><p>Kui see seadistus on ära märkimata, toimub laiendamise ja kahandamise protsess üks kord. Äramärgitud seadistuse korral viiakse laiendamise ja kahandamise protsess läbi kaks korda, mille tulemuseks on tsooni piiride täiendav silumine.</p><p>Kui kõigi kaheksa naaberelemendi väärtused on samad kui töötleval elemendil, säilitab väljundelement sisendelemendi väärtuse.</p>",
		predictUsingRegressionName: "Regressiooni abil prognoosimine",
		predictUsingRegressionSnip: "Arvutab prognoositud rastri rastriandmete sisendite ja regressioonimudeli põhjal. Regressioonimudel on geotöötluse tööriista <strong>juhuslike puude õpetamise regressioonimudeli</strong>rastri väljund.",
		predictUsingRegressionDesc: "<p>Regressioonimudel on defineeritud Esri regressiooni definitsiooni (.ecd) failiga. See sisaldab kogu teavet konkreetse andmestiku või andmekogumite kohta ja regressioonimudelit ning selle genereerib <strong>juhuslike puude õpetamise regressioonimudeli</strong> rastri geotöötluse tööriist.</p><p>Sisend võib olla üks riba, mitmerealine või mitmemõõtmeline võrk või nende tüüpide loend. Sisendrastrite tüübid peavad olema sama tüüpi rastrid, mida on regressioonimudeli järgi õpetatud.</p><ul><li>Kui sisendiks on mitme ribaga raster, käsitletakse iga riba ennustava muutujana. Ribad peavad olema samas järjekorras kui regressioonimudeli õpetamise vahendi mitmerealine sisend.</li><li>Kui sisend on mitmemõõtmeline raster, käsitletakse iga muutujat ennustava muutujana ning muutuja peab olema ühe ribaga ja sellel peab olema ajaline mõõde. Muutujate järjekord ja nimed peavad olema samad, mis regressioonimudeli õpetamisel. Väljund on mitmemõõtmeline raster.</li><li>Sisend võib olla üksuste loend. Üksuste arv ja üksuste järjekord peavad vastama regressioonimudeli õpetamise sisendile.</li></ul>",
		dimensionalMovingStatisticsName: "Mõõtmeline liikuv statistika",
		dimensionalMovingStatisticsSnip: "Arvutab liikuva akna statistika mitmemõõtmeliste andmete kohta määratud mõõtmena.",
		dimensionalMovingStatisticsDesc: "<p>Dimensioonide liikuva statistika funktsioon arvutab eelmääratletud aknas erinevat statistika kõigi mõõtmete väärtuste jaoks. See funktsioon võtab sisendiks mitmemõõtmelise rasterkihi ja loob väljundina mitmemõõtmelise rasterkihi, mille mõõtmed on samad kui sisendkihil.</p><p>Saate määrata dimensiooni, mille mõõtmete väärtusi arvestatakse arvutamisel. Vaikimisi arvutab see esimese mitteruumilise mõõtme järgi. Saate määrata ka akna suuruse, määrates parameetrid Tahasuunaline aken ja Ettesuunaline aken.</p><p>Kui suvandi Statistika tüüp on seatud väärtusele Protsentiil, muutuvad kättesaadavaks parameetrid protsentiili väärtus ja protsentiili interpolatsiooni tüüp. Nende parameetrite abil saate määrata arvutatava protsentiili ja valida vastavalt kasutatava interpolatsiooni tüübi. Nende parameetrite abil saate määrata arvutatava protsentiili ja valida vastavalt kasutatava interpolatsiooni tüübi. Ringikujulise mähkimise väärtust kasutatakse lineaarse väärtuse teisendamiseks etteantud ringikujulise keskmise vahemikku.</p>",
		terrainFlattenFunctionName: "Maastiku tasandamine",
		terrainFlattenFunctionSnip: "Parandab sünteetilise ava radari (SAR) sisendandmeid topograafiast tingitud radiomeetriliste moonutuste suhtes.",
		terrainFlattenFunctionDesc: "<p>Maastiku tasandamise rasterfunktsioon korrigeerib sünteetilise ava radari (SAR) sisendandmeid topograafiast tingitud radiomeetriliste moonutuste suhtes.</p><p>Sisendradari andmed tuleb esmalt kalibreerida beetanulliks. Kasutage raadiomeetrilise kalibreerimise tööriista, et kalibreerida radari andmed beetanulliks.</p><p>Kui sisend-DEM ei hõlma kogu SAR-i andmestikku, väljastab tööriist gammanulli, sigmanulli, hajuvusala ja geomeetriliste moonutuste väljundite jaoks NoData-väärtused pikslite puhul, mis jäävad DEM-ulatusest välja. Geomeetrilise moonutuse maski väljundi jaoks väljastab tööriist määratlemata väärtused pikslitele väljaspool DEM-i ulatust.</p><p>Sisend-DEM peab olema WGS 1984 (EPSG:4326) geograafilises koordinaatsüsteemis.</p>",
		createColorCompositeFunctionName: "Värvikomposiidi loomine",
		createColorCompositeFunctionSnip: "Loob mitmeribalisest rastriandmestikust kolmeribalise rastri, milles iga riba puhul saab kasutada ribaalgebral põhinevat algebralist arvutust.",
		createColorCompositeFunctionDesc: "<p>Funktsioon Värvikomposiidi loomine loob mitmeribalisest rastriandmestikust kolmeribalise rastri, milles iga riba saab kasutada ribaalgebral põhinevat algebralist arvutust.</p><p>Riba-aritmeetilise algoritmi määratlemisel saate mitmeribalise väljundi loomiseks sisestada iga avaldise jaoks üherealise algebralise valemi. Toetatud operaatorid on unaarsed, pluss (+), miinus (-), kordaja (*) ja jagaja (/).</p><p>Kui kasutate avaldises riba ID-d, tuvastage riba, lisades riba numbri ette B või b.</p><p>Lineaarsetes ühikutes sünteetilise ava radari (SAR) jaoks kasutatav tavaline ribakombinatsioon on VV punase, VH rohelise ja VV/VH sinise jaoks. Kui sisendandmed on detsibellides, peaks sagedusribade kombinatsioon olema punase jaoks VV, rohelise jaoks VH ja sinise jaoks VV-VH.</p>",
		surfaceParametersName: "Pinna parameetrid",
		surfaceParametersSnip: "Määrab geodeetiliste meetodite abil sellised pinnarastri parameetrid nagu aspekt, kalle ja mitut tüüpi kõverused.",
		surfaceParametersDesc: "<p>Funktsioon Pinna parameetrid määrab geodeetiliste meetodite abil pinnarastri sellised parameetrid nagu aspekt, kalle ja mitut tüüpi kõverused.</p><p>Seda funktsiooni võib kasutada järgmistes rakendustes:</p><ul><li>Aspekti ja kalde arvutamine geodeetiliste meetodite abil.</li><li>Arvutab erinevat tüüpi kõverused sisendpinna rastrist, näiteks<strong>tangentsiaalse (normaalkontuuri) kõveruse,</strong> mis iseloomustab pinnapealse voolu topograafilist konvergentsi ja lahknemist.</li></ul>",
		leastCostCorridorName: "Vähima kulu koridor",
		leastCostCorridorSnip: "Arvutab kahe kumulatiivse kuluvahemaa rastri summa võimalusega rakendada protsendi või kumulatiivse kulu põhjal lävend.",
		leastCostCorridorDesc: "<p>Sisendrastrid peaksid olema vahemaa kumulatsiooni ja tagasisuuna rastri väljund funktsioonist <strong>Kauguse akumulatsioon</strong> või <strong>Kauguse paigutus</strong>. Need peavad põhinema kuluvahemaal ja igale allikale kihte luues tuleb kasutada samu parameetriseadeid. Nende rastrite loomisel ei tohiks kasutada parameetreid, mis sõltuvad suunalisusest (horisontaalne tegur, vertikaalne tegur ja sõidu suund).</p><p>Väljundkoridorirastris olevad väärtused moodustavad määratud asukohta jõudmise kumulatiivse kulu summa, millel on kumulatiivse kuluvahemaa sisendrastritega samad ühikud.</p><p>Kui määratud <strong>läviväärtus</strong> on kahe kauguse akumulatsiooni rastri summeerimisel suurem kui maksimaalne kumulatiivne kulu, katab väljundkoridoriraster sama ala nagu kumulatiivsed sisendrastrid.</p><p>Kui määratud läviväärtus on väiksem kui miinimumväärtus koridorirastris, esitatakse hoiatusteade ja väljundraster on tühi.</p><p>Väljundkoridoriraster võib sisaldada läviväärtusest veidi suuremate kumulatiivsete kuludega piksleid. See on pärit tagasisuunarastritest, mis kasutavad piksleid, millele on määratud lävendist veidi kõrgemad kulud, et ühendada ühendamata pikslid koridoriga.</p>",
		geometricMedianName: "Geomeetriline mediaan",
		geometricMedianSnip: "Geomeetrilise mediaani funktsioon arvutab pikslitevahelise geomeetrilise mediaani mitmeribaliste piltide aegreas.",
		geometricMedianDesc: "<p>See funktsioon vähendab aegrea piltides müra ja võõrväärtusi, arvutades geomeetrilise mediaani piksli pildivirna iga pikslimassiivi kohta. Algoritm haldab pikslispektrites ribadevahelisi spektriseoseid, et väljundit saaks kasutada analüüsis (nt taimestiku indeksid).</p><p>Pilved ja varjud tuleb enne selle funktsiooni rakendamist maskida andmestiku QA-riba abil.</p><p>Kui sisendpilt on ujukomaväärtus, nt pinna peegeldus väärtustega vahemikus 0–1, peaks epsilonväärtus 0,001 looma kvaliteetsed tulemused.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Värviskeemi tüüp",
		colormapName: "Värvikaart",
		colormapNameName: "Värvikaardi nimi",
		colorRampName: "Värviskaala",
		contrastOffsetName: "Kontrasti nihe",
		brightnessOffsetName: "Heleduse muutus",
		methodName: "Meetod",
		bandNamesName: "Sagedusriba nimetus",
		bandWavelengthsName: "Sagedusriba lainepikkused",
		bandIdsName: "Sagedusriba ID-d",
		missingBandActionName: "Puuduv sagedusriba toiming",
		conversionParametersName: "Teisenduse parameetrid",
		hillshadeTypeName: "Varjutuspildi tüüp",
		azimuthName: "Asimuut",
		altitudeName: "Kõrgus",
		slopeTypeName: "Skaleerimine",
		zFactorName: "Z-tegur",
		PSPowerName: "Väärtus Pixel Size Power",
		PSZFactorName: "Väärtus Pixel Size Factor",
		removeEdgeEffectName: "Keela servapiksli vaikimisi interpoleerimine",
		fromUnitName: "Üksusest",
		toUnitName: "Üksuseni",
		rasterTypeName: "Tüüp",
		minName: "Väljundi miinimum",
		maxName: "Väljundi maksimum",
		minPercentName: "Väljalõike miinimumi protsent",
		maxPercentName: "Väljalõike maksimumi protsent",
		numberOfStandardDeviationName: "Standardhälvete arv",
		sigmoidStrengthLevelName: "Sigmoidi tugevuse tase",
		estimateStatsHistogramName: "Hinnanguline statistika",
		DRAName: "Vahemiku dünaamiline korrigeerimine",
		statisticsName: "Statistika",
		histogramsName: "Histogrammid",
		statisticsHistogramName: "Määratle statistika ja histogramm",
		computeGammaName: "Auto gamma",
		useGammaName: "Kasuta gammat",
		gammaName: "Gamma",
		inputNamesName: "Nimed",
		expressionName: "Avaldis",
		cellsizeTypeName: "Piksli suuruse tüüp",
		extentTypeName: "Laienduse tüüp",
		classifierDefinitionFileName: "Sisendi määratluse fail",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Tõene raster",
		falseRasterName: "Väär raster",
		noDataInterpretationName: "NoData tõlgendus",
		noDataValuesName: "NoData väärtused",
		includedRangesName: "Kaasatud vahemikud",
		curvatureTypeName: "Kurvilisuse tüüp",
		rastersName: "Rastrid",
		attributeTableName: "Tabel",
		attributeTableTypeName: "Tabeli tüüp",
		rowsName: "Ridade arv",
		columnsName: "Veergude arv",
		kernelName: "Kernel",
		mirrorEdgesName: "Peegelduvad servad",
		influencesName: "Mõjud",
		fieldsName: "Väljad",
		remapsName: "Vastenduste tabel",
		evalFromName: "Hindamisskaala alates",
		evalToName: "Hindamisskaala kuni",
		weightsName: "Kaalud",
		DEMName: "digitaalne kõrgusmudel, DEM",
		shortRangeIDWRadiusName: "Lähitoime IDW-raadius",
		maxVoidWidthName: "Max kehtetu laius",
		sigmaGaussianName: "Kohandatud silumine",
		contourTypeName: "Kontuuri tüüp",
		zBaseName: "Z-baas",
		numberOfContoursName: "Kontuuride arv",
		contourIntervalName: "Kontuuride vahemik",
		nthContourLineInBoldName: "N-is ContourLine paksus kirjas",
		featureClassName: "Sisendobjektid",
		classIndexFieldName: "Välitöödele",
		resolveOverlapMethodName: "Lahenda ülekatte meetod",
		resamplingTypeName: "Resolutsiooni määratlemise tüüp",
		inputCellsizeName: "Sisendpiksli suurus",
		outputCellsizeName: "Väljundpiksli suurus",
		pointFeatureClassName: "Algpunktid",
		maxGrowthRadiusFieldName: "Max kasvu raadiuse väli",
		similarityThresholdFieldName: "Sarnasuslävendi väli",
		fillValueFieldName: "Täiteväärtuse väli",
		spectralDetailName: "Spektraalne detailsus [1..20]",
		spatialDetailName: "Ruumiline detailsus [1..20]",
		minNumPixelsPerSegmentName: "Segmendi miinimumsuurus pikslites",
		boundariesOnlyName: "Ainult segmendi piirid",
		statisticsTypeName: "Statistika tüüp",
		fillNoDataOnlyName: "Täida väärtustega ainult NoData pikslid",
		inputDataTypeName: "Sisendi andmetüüp",
		angleReferenceSystemName: "Nurga referentssüsteem",
		outputDataTypeName: "Väljundi andmetüüp",
		inputSamplePointFeatureClassName: "Sisendi näidised",
		valueFieldName: "Väärtuse väli",
		rasterInfoName: "Rastri info",
		interpolationMethodName: "Interpoleerimise meetod",
		radiusName: "Raadius",
		radianceGainValuesName: "Kiirgutiheduse suurenemine",
		radianceBiasValuesName: "Kiirgustiheduse lävi",
		reflectedGainValuesName: "Peegelduvuse suurenemine",
		reflectedBiasValuesName: "Peegelduvuse hälve",
		sunElevationName: "Päikese kõrgus (kraadides)",
		albedoName: "Albeedo",
		scaleFactorName: "Mõõtkavategur",
		offsetName: "Nihe",
		thresholdTypeName: "Lävendi  tüüp",
		thresholdsName: "Lävendid",
		undefinedClassName: "Määratlemata klass",
		minValueName: "Min",
		maxValueName: "Max",
		operationName: "Toiming",
		clippingTypeName: "Väljalõike tüüp",
		clippingGeometryName: "Lõikamise geomeetria/raster",
		extentName: "Väljundi ulatus",
		useInputFeatureGeometryName: "Kasuta väljalõike geomeetria sisestusfunktsioone",
		remapDefinitionTypeName: "Vastenduse määratluse tüüp",
		inputRangeName: "Sisendvahemikud",
		outputValuesName: "Väljundväärtused",
		noDataRangeName: "NoData vahemikud",
		inputFieldName: "Sisendi väli",
		outputFieldName: "Väljundväli",
		inputMaxFieldName: "Max sisendväli (valikuline)",
		remapTableTypeName: "Vastenduste tabeli tüüp",
		allowUnmatchedName: "Luba vastendamata piksliväärtused",
		changeMissingValuesToNoDataName: "Muuda puuduvad väärtused NoData-väärtusteks",
		visibleBandIDName: "Nähtava sagedusriba ID",
		infraredBandIDName: "Infrapuna-lainepikkuse ID",
		scientificOutputName: "Teaduslik väljund",
		bandIndexesName: "Sagedusriba indeks",
		constantName: "Konstantne",
		weightName: "Kaal",
		minimumName: "Miinimum",
		maximumName: "Maksimum",
		sourceDataName: "Lähteraster",
		sourceFieldName: "Lähteväli",
		costRasterName: "Kuluraster",
		maxDistanceName: "Maksimumkaugus",
		valueRasterName: "Väärtusraster",
		costMultiplierName: "Kuludele rakendatav kordaja",
		startCostName: "Algkulu",
		accumCostResistanceRateName: "Kumuleeruva kulu kindluse määr",
		capacityName: "Maht",
		travelDirectionName: "Sõidu suund",
		cellSizeName: "Piksli suurus",
		populationFieldName: "Populatsiooniväli",
		areaUnitsName: "Pindalaühikud",
		outputValueTypeName: "Väljundpiksli väärtused",
		barriersName: "Sisendi piirajad",
		destinationDataName: "Sihtraster",
		destinationFieldName: "Sihtväli",
		pathTypeName: "Tee tüüp",
		observerFeaturesName: "Vaatlejaobjektid",
		analysisMethodName: "Analüüsimeetod",
		analysisTypeName: "Analüüsitüüp",
		verticalErrorName: "Vertikaalne viga",
		refractivityCoefficientName: "Murdumise koefitsient",
		surfaceOffsetName: "Pinna nihe",
		observerElevationName: "Vaatleja kõrgus",
		observerOffsetName: "Vaatleja nihe",
		innerRadiusName: "Siseraadius",
		innerRadiusIs3DDistanceName: "Siseraadius 3D-kaugusena",
		outerRadiusName: "Välisraadius",
		outerRadiusIs3DDistanceName: "Välisraadius 3D-kaugusena",
		horizontalStartAngleName: "Horisontaalne algusnurk",
		horizontalEndAngleName: "Horisontaalne lõpunurk",
		verticalUpperAngleName: "Vertikaalne ülanurk",
		verticalLowerAngleName: "Vertikaalne alanurk",
		zoneDataName: "Tsooni raster",
		zoneFieldName: "Tsooni väli",
		ignoreNoDataName: "Eira arvutustes väärtust NoData",
		temperatureRasterName: "Temperatuuriraster",
		inTemperatureUnitsName: "Temperatuuriühikud",
		outHeatIndexTemperatureUnitsName: "Kuumusindeksi ühikud",
		relativeHumidityRasterName: "Suhtelise õhuniiskuse raster",
		outWindChillTemperatureUnitsName: "Tuulekülma ühikud",
		windSpeedRasterName: "Tuulekiiruse raster",
		inWindSpeedUnitsName: "Tuulekiiruse ühikud",
		valueName: "Väärtus",
		propertyName: "Atribuudi nimi",
		jsonName: "Metaandmete JSON",
		zoneTableName: "Tsooniatribuutide tabel",
		attributeFieldNames: "Atribuudi väljanimed",
		backgroundName: "Tausta väärtus",
		whereClauseName: "Where-klausel",
		minimumValueFieldName: "Miinimumväärtuse väljanimi",
		maximumValueFieldName: "Maksimumväärtuse väljanimi",
		outValueFieldName: "Väljundväärtuse väljanimi",
		defaultValueName: "Vaikimisi väljundi väärtus",
		conversionMatrixName: "Teisendusmaatriks",
		IsPseudoColorOutputName: "On pseudovärviväljund",
		unmappedAsRandomColorName: "Määra värv vastendamata pikslitele juhuvaliku alusel",
		distanceMethodName: "Vahemaa meetod",
		flowDirRasterName: "Voolusuuna raster",
		pourPointName: "Väljavoolupunktide raster",
		pourPointFieldName: "Väljavoolupunkti väli",
		constantZName: "Konstantne Z",
		zOffsetName: "Z-nihe",
		geoIdName: "Geoid",
		calibrationTypeName: "Kalibreerimise tüüp",
		filterTypeName: "Filtri tüüp",
		filterSizeName: "Filtri suurus",
		noiseModelName: "Müra mudel",
		noiseVarianceName: "Müra dispersioon",
		additiveNoiseMeanName: "Aditiivse müra keskmine",
		multiplicativeNoiseMeanName: "Multiplikatiivse müra keskmine",
		numberofLooksName: "Vaatamiste arv",
		dampingFactorName: "Summutustegur",
		maskRasterName: "Maski raster",
		nibbleValuesName: "Kasuta NoData-väärtusi, kui need on lähimad naabrid",
		nibbleNoDataName: "Näksi NoData-piksleid",
		zLimitName: "Z-piirang",
		flowDirectionTypeName: "Voosuuna tüüp",
		weightRasterName: "Kaalu raster",
		forceEdgeName: "Suuna kõik servapikslid väljapoole voolama",
		streamRasterName: "Voo raster",
		surfaceRasterName: "Pinna raster",
		conversionType: "Teisendamise tüüp",
		distanceRaster1: "Vahemaa raster 1",
		distanceRaster2: "Vahemaa raster 2",
		costDistanceRaster: "Kuluvahemaa raster",
		costBacklinkRaster: "Kulu tagasilingi raster",
		overridesName: "Alistamised",
		fieldName: "Väli",
		signatureFileOrUrl: "Allkirjafail või URL",
		redName: "Punane",
		greenName: "Roheline",
		blueName: "Sinine",
		infraredName: "Infrapunane",
		panchromaticName: "Pankromaatiline",
		multispectralName: "Multispektraalne",
		pansharpeningType: "Pankromaatilise teravdamise tüüp",
		sensorName: "Andur",
		spatialReferenceName: "Koordinaatsüsteem",
		xCellsizeName: "X-piksli suurus",
		yCellsizeName: "Y-piksli suurus",
		xOriginName: "X-registreerimispunkt",
		yOriginName: "Y-registreerimispunkt",
		percentileName: "Protsentuaalne väärtus",
		neighborhoodType: "Naabruse tüüp",
		widthName: "Laius",
		heightName: "Kõrgus",
		startAngleName: "Alustamise nurk",
		endAngleName: "Lõpunurk",
		neighborhoodValues: "Naabruse väärtused",
		horizontalRaster: "Horisontaalraster",
		horizontalFactor: "Horisontaaltegur",
		verticalRaster: "Vertikaalraster",
		verticalFactor: "Vertikaaltegur",
		streamRaster: "Voo raster",
		flowDirRaster: "Voolusuuna raster",
		numberNeighborCells: "Naaberpikslite arv",
		zoneConnectivity: "Tsooni ühenduvus",
		addLinkBehavior: "Lisa link",
		excludedValue: "Välistatud väärtus",
		constantFillCheck: "Genereeri täiteraster konstandi põhjal",
		fillRaster: "Täiteraster",
		constantFillValue: "Konstandi väärtus",
		inputBitPositions: "Sisendbitt",
		outputBitPositions: "Väljundbitt",
		distanceTypeName: "Vahemaa tüüp",
		barrierDataName: "Rastritõkked",
		pourPointDataName: "Valgumispunkti raster",
		accumulationRasterName: "Vooluakumulatsiooni raster",
		snapDistanceName: "Snäpi kaugus",
		orderMethodName: "Järjestamise meetod",
		directionMeasurementName: "Mõõtmissuund",
		processAsMultiband: "Töötle mitmeribalisena",
		processMultidimensional: "Töötle mitmemõõtmelisena",
		forceFlowDirectionConvention: "Sunni voolusuuna reegliks tagasilingi raster",
		initialAccumulation: "Algne akumulatsioon",
		maximumAccumulation: "Maksimaalne akumulatsioon",
		sourceLocationBands: "Loo lähterida ja -veerg väljundi lisaribadena",
		backDirectionBand: "Loo tagasisuund väljundi lisaribana",
		numberOfCells: "Lahtrite arv",
		zoneValues: "Tsooni väärtused",
		shrinkMethod: "Kahandamise meetod",
		expandMethod: "Laiendamise meetod",
		inputSpectralProfileType: "Spektraalne profiilitüüp",
		spectralProfileFileName: "Spektraalne profiil",
		trainingFeatureFileName: "Koolitusfunktsioon",
		nonNegative: "Mittenegatiivne",
		sumToOne: "Summa ühele",
		randomDistribution: "Jaotus",
		meanName: "Keskmine",
		probabilityName: "Tõenäosus",
		alphaName: "Alfa",
		betaName: "Beeta",
		rName: "r",
		nName: "Põhi",
		seed: "Seeme",
		randomNumberGenerator: "Juhusliku numbri generaator",
		cellFactor: "Lahtri tegur",
		aggregationType: "Agregeerimismeetod",
		extentHandling: "Vajaduse korral laienda ulatust",
		trendAnalysisDimensionName: "Mõõtme nimetus",
		trendAnalysisType: "Trendi tüüp",
		harmonicFrequency: "Harmooniline sagedus",
		polynomialOrder: "Polünoomi järjekord",
		cycleLengthName: "Tsükli pikkus",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R ruudus",
		trendAnalysisSlopePValue: "Kaldeteguri P-väärtus",
		trendAnalysisSeasonalPeriod: "Hooajaline periood",
		cycleUnitName: "Tsükli ühik",
		predictDimensionValues: "Väärtused",
		dimensionDefinitionType: "Mõõtme määratlus",
		predictDimensionStart: "Algus",
		predictDimensionEnd: "Lõpp",
		predictDimensionInterval: "Väärtuse vahemik",
		dimensionUnit: "Ühik",
		interpolationCellsizeName: "Lahtri suuruse interpoleerimine",
		variableName: "Muutujad",
		dimensionlessName: "Mõõtmeta",
		mdimDefinition: "Mõõtme määratlus",
		dimensionName: "Mõõde",
		iterationStart: "Esimese iteratsiooni algus",
		iterationEnd: "Esimese iteratsiooni lõpp",
		intervalStart: "Intervalli algus",
		intervalEnd: "Intervalli lõpp",
		stepName: "Samm",
		rangesName: "Vahemikud",
		minValue: "Miinimumväärtus",
		maxValue: "Maksimumväärtus",
		changeAnalysisRasterName: "Muuda analüüsirastrit",
		changeTypeName: "Muuda tüüpi",
		segmentDate: "Segmendi kuupäev",
		changeDirectionName: "Muuda suunda",
		maxNumChangesName: "Muudatuste maksimaalne arv",
		filterByYear: "Filtreeri aasta kaupa",
		minimumYear: "Miinimumväärtus",
		maximumYear: "Maksimumväärtus",
		filterByDuration: "Filtreeri kestuse järgi",
		minimumDuration: "Minimaalne kestus",
		maximumDuration: "Maksimaalne kestus",
		filterByMagnitude: "Filtreeri magnituudi järgi",
		minimumMagnitude: "Minimaalne magnituud",
		maximumMagnitude: "Maksimaalne magnituud",
		filterByStartValue: "Filtreeri algväärtuse alusel",
		minimumStartValue: "Minimaalne algväärtus",
		maximumStartValue: "Maksimaalne algväärtus",
		filterByEndValue: "Filtreeri lõppväärtuse alusel",
		minimumEndValue: "Minimaalne lõppväärtus",
		maximumEndValue: "Maksimaalne lõppväärtus",
		modelTypeName: "Mudeli tüüp",
		fromRasterName: "Rastrist",
		toRasterName: "Rastrile",
		computeChangeMethod: "Arvuta muudatuse meetod",
		fromClassValues: "Klassi väärtustelt (näiteks: 2 5)",
		toClassValues: "Klassi väärtustele (näiteks: 2 5)",
		keepMethod: "Filtreerimismeetod",
		useColorMethod: "Määrake üleminekuvärvid",
		detectChangeBands: "Tuvastusvahemiku ribad (alates 0-st)",
		tmaskBands: "Ajutise maskimise ribad (alates 0-st)",
		chiSquaredThreshold: "Tuvastatud muudatuse läviväärtuse hii-ruut",
		minAnomaly: "Minimaalse järjestikuse kõrvalekalde tähelepanekud",
		updatingFrequency: "Sobitussageduse värskendamine (aastates)",
		distanceAccumulationRasterName: "Kauguse akumulatsiooni raster",
		costBackdirectionRasterName: "Tagasisuund või voolusuuna raster",
		rasterCollectionName: "Rasterikogu",
		itemFunctionName: "Elemendi funktsioon",
		aggregationFunctionName: "Agregeerimisfunktsioon",
		processingFunctionName: "Töötlemisfunktsioon",
		aggregationDefinitionName: "Agregeerimismääratlus",
		queryGeometryName: "Päringu geomeetria",
		factorFunctionZeroFactor: "Nulltegur",
		factorFunctionCutAngle: "Lõikenurk",
		factorFunctionSideFactor: "Külgtegur",
		factorFunctionSlope: "Kalle",
		factorFunctionLowCutAngle: "Madal lõikenurk",
		factorFunctionHighCutAngle: "Kõrge lõikenurk",
		factorFunctionCosPower: "Koosinuse aste",
		factorFunctionSecPower: "Lõikaja aste",
		factorFunctionTablePath: "Tabeli tee",
		processingBand: "Riba töötlemine",
		processingBandName: "Töötlemisriba nimi",
		snappingDate: "Haakimise kuupäev",
		maxNumSegments: "Segmentide suurim arv",
		vertexCountOvershoot: "Käänupunktidest ülevoolamine",
		spikeThreshold: "Piigi läviväärtus",
		recoveryThreshold: "Taastamise läviväärtus",
		minNumObs: "Vaatluste minimaalne arv",
		pValueThreshold: "P-väärtuse lävend",
		bestModelProportion: "Mudeli parim proportsioon",
		preventOneYearRecovery: "Takista ühe aasta taastamist",
		recoveryIncreaseTrend: "Taastamine on kasvava trendiga",
		outputOtherBands: "Väljasta muud ribad",
		sortType: "Sortimise tüüp",
		numberOfRuns: "Käivita laiendamine ja kahandamine kaks korda",
		percentileValue: "Protsentuaalne väärtus",
		percentileInterpolationType: "Protsentiili interpoleerimise tüüp",
		rasterInfoProperty: "Kinnisvara",
		rasterInfoValue: "Väärtus",
		rasterInfoColumns: "Veerud",
		rasterInfoRows: "Read",
		rasterInfoBandCount: "Ribade arv",
		rasterInfoPixelSizeX: "Lahtri suurus X",
		rasterInfoPixelSizeY: "Lahtri suurus Y",
		rasterInfoPixelType: "Piksli tüüp",
		rasterExtentTop: "Üleval",
		rasterExtentBottom: "All",
		rasterExtentLeft: "Vasakul",
		rasterExtentRight: "Paremal",
		rasterStatisticsNotCalculated: "Statistikat pole arvutatud.",
		spatialReferenceProjection: "Projektsioon",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Eelmine WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Eelmine VCSWKID",
		spatialReferenceAuthority: "Volitus",
		spatialReferenceLinearUnit: "Lineaarne mõõtühik",
		spatialReferenceAngularUnit: "Nurga mõõtühik",
		spatialReferenceFalseEasting: "Idanihe",
		spatialReferenceFalseNorthing: "Põhjanihe",
		spatialReferenceCentralMeridian: "Telgmeridiaan",
		spatialReferencePrimeMeridian: "Nullmeridiaan",
		spatialReferenceStandardParallel1: "1. standardparalleel",
		spatialReferenceStandardParallel2: "2. standardparalleel",
		spatialReferenceLatitudeOfOrigin: "Lähtepunkti laius",
		spatialReferenceAuxiliarySphereType: "Auxiliary Sphere'i tüüp",
		spatialReferenceDatum: "Daatum",
		spatialReferenceSpheroid: "Sferoid",
		spatialReferenceSemimajorAxis: "Pikem pooltelg",
		spatialReferenceSemiminorAxis: "Lühem pooltelg",
		spatialReferenceInverseFlattening: "Pööratud elliptilisus",
		inputDefinitionFileName: "Sisendi määratluse fail",
		deleteName: "Kustuta",
		addVariableName: "Lisa muutuja",
		maxNumPixelsPerSegment: "Segmendi maksimaalne suurus pikslites",
		forwardWindowName: "Edasisuuna aken",
		backwardWindowName: "Tagasisuuna aken",
		noDataHandlingName: "NoData-väärtuse käsitsemine",
		circularWrapValueName: "Ringikujulise mähkimise väärtus",
		fromClassNameFieldName: "Väljanimi klassinimedele rastrist",
		toClassNameFieldName: "Väljanimi klassinimedele rastrisse",
		targetRasterName: "Sihtraster",
		circularWrapValue: "Ringikujulise mähkimise väärtus",
		bandIndexesR: "Punane avaldis",
		bandIndexesG: "Roheline avaldis",
		bandIndexesB: "Sinine avaldis",
		exampleName: "Näide",
		inputName: "Sisend",
		outputName: "Väljund",
		optionalName: "Valikuline",
		browseDefinitionFile: "Lehitsege määratluste faili",
		selectDefinitionFile: "Valige sisendi määratluse fail",
		inputDefinitionURL: "Sisendi määratluse faili URL",
		enterDefinitionFileURL: "Sisestage sisendi määratluse faili URL",
		browseXMLFile: "Sirvige XML-faili",
		selectStatsFile: "Valige statistika ja histogrammide fail",
		enterXMLFileURL: "Sisestage XML-faili URL",
		xmlFileURL: "XML-faili URL",
		circularCalculation: "Arvuta ringstatistika",
		localSurfaceType: "Kohaliku pinna tüüp",
		surfaceParameterType: "Parameetri tüüp",
		neighborhoodDistance: "Naabruskonna vahemaa",
		useAdaptiveNeighborhood: "Kasuta kohanduvat naabruskonda",
		outputSlopeType: "Väljundkalde mõõtmine",
		projectAzimuths: "Projekti geodeetilised asimuudid",
		useEquatorialAspect: "Kasuta ekvatoriaalset aspekti",
		zUnit: "Z-ühik",
		analysisMask: "Analüüsimask",
		stdDeviation: "Standardhälve",
		"true": "Tõene",
		"false": "Väär",
		costDistanceRaster1: "Sisesta kumulatiivse kuluvahemaa raster 1",
		costDistanceRaster2: "Sisesta kumulatiivse kuluvahemaa raster 2",
		threshold: "Lävend",
		thresholdMethod: "Lävendimeetod",
		directionRaster1: "Sisesta tagasisuuna raster 1",
		directionRaster2: "Sisesta tagasisuuna raster 2",
		maxIterations: "Iteratsioonide maksimaalne arv",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Käsitsi",
		attributeTableTypeExternal: "Väline",
		clrSchemeTypeColormap: "Värvikaart",
		clrSchemeTypeColorRamp: "Värvipass",
		colormapTypeElevation: "Kõrgused",
		colormapTypeGray: "Hall",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Juhuslik",
		none: "Puudub",
		slopeTypeAdjusted: "Kohandatud",
		slopeTypeDegree: "Kraad",
		slopeTypePercentRise: "PercentRise",
		slopeTypeScaled: "Skaleeritud",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "PercentMinMax",
		stretchTypeSigmoid: "Sigmoid",
		stretchTypeStdDev: "StdDev",
		hillshadeTypeSimple: "Traditsiooniline",
		hillshadeTypeMultidirectional: "Mitmesuunaline",
		bandComboByNames: "Sagedusriba nimetus",
		bandComboByWavelength: "Sagedusriba lainepikkused",
		bandComboByIDs: "Sagedusriba ID-d",
		missingBandActionBestMatch: "Parim vaste",
		missingBandActionFail: "Nurjus",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Sentimeetrit",
		unitTypeDecimeters: "Detsimeetrit",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "ft",
		unitTypeFeetPerSec: "Jalga sekundis (ft/s)",
		unitTypeInches: "tolli",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "km",
		unitTypeKmsPerHour: "Kilomeetrit tunnis (km/h)",
		unitTypeKnots: "Sõlme (kn)",
		unitTypeMeters: "m",
		unitTypeMetersPerSec: "Meetrit sekundis (m/s)",
		unitTypeMiles: "mi",
		unitTypeMilesPerHour: "Miili tunnis (mph)",
		unitTypeMillimeters: "Millimeetrid",
		unitTypeNauticalMiles: "meremiili",
		unitTypeYards: "jardi",
		unitTypeDecimalDegrees: "Kümnendkraadid",
		unitTypePoints: "Punktid",
		unitTypeUnknown: "Tundmatu",
		unitTypeSqMapUnits: "Kaardi ruutühikut",
		unitTypeSqMiles: "ruutmiili",
		unitTypeSqKms: "ruutkilomeetrit",
		unitTypeAcres: "aakrit",
		unitTypeHectares: "hektarit",
		unitTypeSqYards: "ruutjardi",
		unitTypeSqFt: "ruutjalga",
		unitTypeSqInches: "ruuttolli",
		unitTypeSqMts: "ruutmeetrit",
		unitTypeSqCms: "ruutsentimeetrit",
		unitTypeSqMms: "ruutmillimeetrit",
		cellsizeTypeFirst: "Esimene/",
		cellsizeTypeMin: "Min/",
		cellsizeTypeMax: "Max/",
		cellsizeTypeMean: "Keskmine/",
		cellsizeTypeLast: "Viimane/",
		extentTypeFirst: "Esimene/",
		extentTypeIntersection: "Ühisosa/",
		extentTypeUnion: "Ühend/",
		extentTypeLast: "Viimane/",
		noDataInterpretAny: "Vastenda mis tahes",
		noDataInterpretAll: "Vastenda kõik",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Profiil",
		curvatureTypePlanform: "Plaani kõverus",
		filterTypeLineDetectionHorizontal: "Joone tuvastamine (horisontaalne)",
		filterTypeLineDetectionVertical: "Joone tuvastamine (vertikaalne)",
		filterTypeLineDetectionLeftDiagonal: "Joone tuvastamine (vasakpoolne diagonaalne)",
		filterTypeLineDetectionRightDiagonal: "Joone tuvastamine (parempoolne diagonaalne)",
		filterTypeGradientNorth: "Kalle põhja",
		filterTypeGradientWest: "Kalle läände",
		filterTypeGradientEast: "Kalle itta",
		filterTypeGradientSouth: "Kalle lõunasse",
		filterTypeGradientNorthEast: "Kalle kirdesse",
		filterTypeGradientNorthWest: "Kalle loodesse",
		filterTypeSmoothArithmeticMean: "Silutud aritmeetiline keskmine",
		filterTypeSmoothing3x3: "Silumine 3×3",
		filterTypeSmoothing5x5: "Silumine 5×5",
		filterTypeSharpening3x3: "Teravdamine 3×3",
		filterTypeSharpening5x5: "Teravdamine 5×5",
		filterTypeLaplacian3x3: "Laplace 3×3",
		filterTypeLaplacian5x5: "Laplace 5×5",
		filterTypeSobelHorizontal: "Sobel (horisontaalne)",
		filterTypeSobelVertical: "Sobel (vertikaalne)",
		filterTypeSharpen: "Teravda",
		filterTypeSharpen2: "Lisa rohkem teravust",
		filterTypePointSpread: "Punktihajutus",
		userDefined: "Kasutaja määratud",
		ContourTypeLines: "Kontuurjooned",
		ContourTypeFill: "Kontuuritäide",
		ContourTypeSmoothOnly: "Ainult sile pind",
		rasterizeFirst: "Esimene",
		rasterizeLast: "Viimane",
		rasterizeSmallest: "Väikseim",
		rasterizeLargest: "Suurim",
		resamplingTypeNearest: "Lähim naaber",
		resamplingTypeBilinear: "Bilineaarne interpolatsioon",
		resamplingTypeCubic: "Kuupkonvolutsioon",
		resamplingTypeMajority: "Enamus",
		resamplingTypeBilinearPlus: "Bilineaarne interpolatsioon pluss",
		resamplingTypeGauss: "Gaussi hägu",
		resamplingTypeGaussPlus: "Gaussi hägu pluss",
		resamplingTypeAverage: "Keskmine",
		resamplingTypeMinimum: "Miinimum",
		resamplingTypeMaximum: "Maksimum",
		resamplingTypeVectorAvg: "Vektori keskmine",
		minimum: "Miinimum",
		maximum: "Maksimum",
		mean: "Keskmine",
		stdDeviation: "Standardhälve",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Suurus-Suund",
		unknown: "Tundmatu",
		angleRefSysGeographic: "Geograafiline",
		angleRefSysArithmetic: "Aritmeetiline",
		interpolateIrregularDataNearest: "Lähim naaber",
		interpolateIrregularDataBilinear: "Bilineaarne",
		interpolateIrregularDataTinningLinear: "Lineaarne säilitamine",
		interpolateIrregularDataTinningNaturalNeighbor: "Loomulik naaber",
		interpolateIrregularDataTinningIDW: "Kaalutud pöördkaugus",
		esriRasterThresholdTypeConstant: "Konstantne",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg Max",
		argStatsTypeMin: "Arg Min",
		argStatsTypeMedian: "Keskm. argum.",
		argStatsTypeDuration: "Kestus",
		arithmeticOpPlus: "Pluss",
		arithmeticOpMinus: "Miinus",
		arithmeticOpMultiply: "Korruta",
		arithmeticOpDivide: "Jaga",
		arithmeticOpPower: "Võimsus",
		arithmeticOpMode: "Režiim",
		clipTypeOutside: "Lõika väljast",
		clipTypeInside: "Lõika seest",
		yes: "Jah",
		no: "Ei",
		densities: "Tihedused",
		expectedCounts: "Eeldatavad arvud",
		planar: "Tasapinnaline",
		geodesic: "Geodeetiline",
		eachCell: "Iga piksel",
		eachZone: "Iga tsoon",
		bestSingle: "Parim üksik",
		allSightlines: "Kõik vaateväljad",
		perimeterSightlines: "Perimeetri vaateväljad",
		frequency: "Sagedus",
		observers: "Seisupunktid",
		majority: "Enamus",
		median: "Keskmine",
		minority: "Vähemus",
		percentile: "Protsentiil",
		range: "Ulatus",
		sum: "Summa",
		variety: "Variatsioon",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Transformeeritud SAVI",
		bandArithmeticMethodMSAVI: "Muudetud SAVI",
		bandArithmeticMethodSultan: "Sultani valem",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI (vee normaliseeritud vaheindeks)",
		evi: "EVI (täiustatud taimkatteindeks)",
		ironOxide: "Raudoksiid",
		ferrousMinerals: "Rauda sisaldavad mineraalid",
		clayMinerals: "Savimineraalid",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Ruutjuur",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Bitwise Not",
		localBooleanNot: "Boolean Not",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "On tühiväärtus",
		localFloat: "Float",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Eita",
		localRoundDown: "Ümarda allapoole",
		localRoundUp: "Ümarda ülespoole",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Pluss",
		localMinus: "Miinus",
		localTimes: "Kellaajad",
		localPower: "Võimsus",
		localBitwiseAnd: "Bitwise And",
		localBitwiseLeftShift: "Bitwise Left Shift",
		localBitwiseOr: "Bitwise Or",
		localBitwiseRightShift: "Bitwise Right Shift",
		localBitwiseXor: "Bitwise Xor",
		localBooleanAnd: "Boolean And",
		localBooleanOr: "Boolean Or",
		localBooleanXor: "Boolean Xor",
		localDivide: "Jaga",
		localEqualTo: "Võrdne",
		localGreaterThan: "Suurem kui",
		localGreaterThanEqual: "Suurem kui või võrdne",
		localLessThan: "Väiksem kui",
		localLessThanEqual: "Väiksem kui või võrdne",
		localMod: "Mod",
		localNotEqual: "Ei võrdu",
		localATan2: "ATan2",
		localSquare: "Ruut",
		localSetNull: "Nulli määramine",
		remapDefTypeList: "Loend",
		remapDefTypeTable: "Tabel",
		remapTableTypeSimple: "Lihtne",
		remapTableTypeDynamic: "Dünaamiline",
		remapTableTypeReassignment: "Ümber määramine",
		geomCorrectionByConstZ: "Kasuta konstantset Z-väärtust",
		geomCorrectionByDEM: "Kasuta DEM-i",
		radarCalibBetaNought: "Beeta null",
		radarCalibSigmaNought: "Sigma null",
		radarCalibGammaNought: "Gamma null",
		speckleFilterTypeLee: "Lee filter",
		speckleFilterTypeEnhancedLee: "Parendatud Lee filter",
		speckleFilterTypeFrost: "Mattfilter",
		speckleFilterTypeKuan: "Kuan-filter",
		speckleNoiseModelMul: "Multiplikatiivne müra",
		speckleNoiseModelAdd: "Aditiivne müra",
		speckleNoiseModelAddnMul: "Aditiivne ja multiplikatiivne müra",
		mosaicOpTypeFirst: "Esimene",
		mosaicOpTypeLast: "Viimane",
		mosaicOpTypeMin: "Min",
		mosaicOpTypeMax: "Max",
		mosaicOpTypeMean: "Keskmine",
		mosaicOpTypeBlend: "Segu",
		mosaicOpTypeSum: "Summa",
		integer: "Täisarv",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Vertikaalne",
		horizontal: "Horisontaalne",
		localCellStatisticsMajority: "Enamus",
		localCellStatisticsMax: "Maksimum",
		localCellStatisticsMean: "Keskmine",
		localCellStatisticsMedian: "Keskmine",
		localCellStatisticsMin: "Miinimum",
		localCellStatisticsMinority: "Vähemus",
		localCellStatisticsRange: "Ulatus",
		localCellStatisticsStdDev: "Standardhälve",
		localCellStatisticsSum: "Summa",
		localCellStatisticsVariety: "Variatsioon",
		localCellStatisticsMajorityIgnoreND: "Enamus (ignoreeri NoDatat)",
		localCellStatisticsMaxIgnoreND: "Maksimum (ignoreeri NoDatat)",
		localCellStatisticsMeanIgnoreND: "Keskmine (ignoreeri NoDatat)",
		localCellStatisticsMedianIgnoreND: "Mediaan (ignoreeri NoDatat)",
		localCellStatisticsMinIgnoreND: "Miinimum (ignoreeri NoDatat)",
		localCellStatisticsMinorityIgnoreND: "Vähemus (ignoreeri NoDatat)",
		localCellStatisticsRangeIgnoreND: "Vahemik (ignoreeri NoDatat)",
		localCellStatisticsStdDevIgnoreND: "Standardhälve (ignoreeri NoDatat)",
		localCellStatisticsSumIgnoreND: "Summa (ignoreeri NoDatat)",
		localCellStatisticsVarietyIgnoreND: "Muutkond (ignoreeri NoDatat)",
		localCellStatisticsTypePercentileIgnoreND: "Protsentiil (eira väärtust NoData)",
		fromSource: "Allikast",
		toSource: "Allikani",
		colorspaceConversionRgbToHsv: "RGB-st HSV-ks",
		colorspaceConversionHsvToRgb: "HSV-st RGB-ks",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Keskmine",
		pansharpenTypeGramSchmidt: "Gram–Schmidt",
		rectangleNeighborhood: "Nelinurk",
		circleNeighborhood: "Ring",
		annulusNeighborhood: "Rõngas",
		wedgeNeighborhood: "Kiil",
		irregularNeighborhood: "Ebaregulaarne",
		weightNeighborhood: "Kaal",
		four: "Neli",
		eight: "Kaheksa",
		within: "Vahemikus",
		cross: "Rist",
		addLink: "Lisa link",
		noLink: "Linki pole",
		weightedMean: "Kaalutud keskmine",
		ls8QCBitPatternCirrus: "Landsat 8 kiudpilv",
		ls8QCBitPatternCloud: "Landsat 8 pilv",
		ls8QCBitPatternCloudShadow: "Landsat 8 pilvevari",
		ls8QCBitPatternDesignatedFill: "Landsat 8 ettenähtud täide",
		ls8QCBitPatternDroppedFrame: "Landsat 8 langetatud raam",
		ls8QCBitPatternSnowIce: "Landsat 8 lumi/jää",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 maastiku varjamine",
		ls8QCBitPatternVegetation: "Landsat 8 taimestik",
		ls8QCBitPatternWater: "Landsat 8 vesi",
		downStream: "Allavoolu",
		upStream: "Ülesvoolu",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Praegune lõik",
		allSlices: "Kõik lõigud",
		expandDistance: "VAHEMAA",
		expandMorphological: "MORFOLOOGILINE",
		spectralProfileFile: "Spektraalne profiil",
		trainingFeatureFile: "Koolitusfunktsioon",
		randomDistributionTypeUniform: "Ühtne",
		randomDistributionTypeUniformInteger: "Täisarv",
		randomDistributionTypeNormal: "Tavaline",
		randomDistributionTypeExponential: "Eksponentsiaalne",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binoom",
		randomDistributionTypeGeometric: "Geomeetria",
		randomDistributionTypeNegativeBinomial: "Negatiivne binoom",
		randomGeneratorTypeStandardCRand: "Standardne C-ääris",
		randomGeneratorTypeAlgorithmACM599: "ACM kogutud algoritm 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Summa",
		medainName: "Keskmine",
		trendLinear: "Lineaarne",
		trendHarmonic: "Harmooniline",
		trendPolynomial: "Polünoomne",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Hooajaline Kendall",
		dimensionByValue: "Väärtuse järgi",
		dimensionByInterval: "Intervalli järgi",
		mdimDefTypeAll: "Kõik",
		mdimDefTypeByValues: "Väärtuste kaupa",
		mdimDefTypeByRanges: "Vahemike kaupa",
		mdimDefTypeByIteration: "Iteratsiooni kaupa",
		mdimDefTypeByInterval: "Intervalli järgi",
		mdimDefTypeByTargetRaster: "Sihtrastri järgi",
		esriTimeUnitsHours: "Tunnid",
		esriTimeUnitsDays: "Päeva",
		esriTimeUnitsWeeks: "Nädalat",
		esriTimeUnitsMonths: "Kuud",
		esriTimeUnitsYears: "Aastat",
		esriTimeIntervalKeywordHourly: "Kord tunnis",
		esriTimeIntervalKeywordDaily: "Iga päev",
		esriTimeIntervalKeywordWeekly: "Iga nädal",
		esriTimeIntervalKeywordDekadly: "Kord kümne päeva jooksul",
		esriTimeIntervalKeywordPentadly: "Kord viie päeva jooksul",
		esriTimeIntervalKeywordMonthly: "Iga kuu",
		esriTimeIntervalKeywordQuarterly: "Kord kvartalis",
		esriTimeIntervalKeywordYearly: "Kord aastas",
		esriTimeIntervalKeywordRecurringDaily: "Kordub kord päevas",
		esriTimeIntervalKeywordRecurringWeekly: "Kordub kord nädalas",
		esriTimeIntervalKeywordRecurringMonthly: "Kordub kord kuus",
		esriTimeIntervalKeywordRecurringQuarterly: "Kordub kord kvartalis",
		aggDefTypeAll: "Kõik",
		aggDefTypeIntervalKeyword: "Võtmesõna intervall",
		aggDefTypeIntervalValue: "Väärtuse intervall",
		aggDefTypeIntervalRanges: "Ulatuste intervall",
		latestChange: "Uusima muudatuse aeg",
		earliestChange: "Varaseima muudatuse aeg",
		largestChange: "Suurima muudatuse aeg",
		numberOfChanges: "Muudatuste arv",
		longestChange: "Pikima muutuse aeg",
		shortestChange: "Lühima muutuse aeg",
		fastestChange: "Kiireima muutuse aeg",
		slowestChange: "Aeglaseima muutuse aeg",
		allChanges: "Kõik",
		increaseChanges: "Suurenda",
		decreaseChanges: "Vähenda",
		segmentBeginning: "Segmendi algus",
		segmentEnd: "Segmendi lõpp",
		esriComputeChangeMethodDifference: "Erinevus",
		esriComputeChangeMethodRelativeDifference: "Suhteline vahe",
		esriComputeChangeMethodCategorical: "Kategooriline erinevus",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spektraalne eukleidiline kaugus",
		esriComputeChangeMethodMultispectralAngularDifference: "Spektrinurga erinevus",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Suurima muutusega riba",
		esriComputeChangeKeepAll: "Säilita kõik",
		esriComputeChangeKeepChangedOnly: "Säilita ainult muudetud pikslid",
		esriComputeChangeKeepUnchangedOnly: "Säilita ainult muutmata pikslid",
		esriComputeChangeUseColorAverage: "Keskmised \"kustkohast\" ja \"kuhu\" värvused",
		esriComputeChangeUseColorFrom: "Kasuta \"kustkohast\" värvusi",
		esriComputeChangeUseColorTo: "Kasuta \"kuhu\" värvusi",
		factorFunctionBinary: "Kahendandmed",
		factorFunctionForward: "Edasi",
		factorFunctionLinear: "Lineaarne",
		factorFunctionInvLinear: "Pöördsuunaline lineaar",
		factorFunctionTable: "Tabel",
		factorFunctionSymLinear: "Sümmeetriline lineaar",
		factorFunctionSymInvLinear: "Sümmeetriline pöördlineaar",
		factorFunctionCos: "Koosinus",
		factorFunctionSec: "Lõikaja",
		factorFunctionCosSec: "Koosinuse lõikaja",
		factorFunctionSecCos: "Lõikaja koosinus",
		noSort: "Ära sordi",
		ascend: "Tõusev",
		descend: "Kahanev",
		autoDetect: "Automaatne tuvastamine",
		nearest: "Lähim",
		linear: "Lineaarne",
		esriMonthJanuary: "Jaanuar",
		esriMonthFebruary: "Veebruar",
		esriMonthMarch: "Märts",
		esriMonthApril: "Aprill",
		esriMonthMay: "Mai",
		esriMonthJune: "Juuni",
		esriMonthJuly: "Juuli",
		esriMonthAugust: "August",
		esriMonthSeptember: "September",
		esriMonthOctober: "Oktoober",
		esriMonthNovember: "November",
		esriMonthDecember: "Detsember",
		dimensionalMovingIgnoreNoData: "Andmed",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "Täida NoData",
		circularMean: "Ringi keskväärtus",
		circularName: "Ringstatistika",
		arithmeticName: "Aritmeetiline",
		slopeName: "Kalle",
		aspectName: "Aspekt",
		meanCurvature: "Keskmine kõverus",
		profileCurvature: "Profiili (normaalne kaldejoon) kõverus",
		tangentialCurvature: "Tangentsiaalne (normaalne kontuur) kõverus",
		planCurvature: "Plaani (projitseeritud kontuur) kõverus",
		contourGeodesicTorsion: "Kontuuri geodeetiline vääne",
		gaussianCurvature: "Gaussi kõverus",
		casoratiCurvature: "Casorati kõverus",
		localSurfaceTypeQuadratic: "Ruut-",
		localSurfaceTypeBiquadratic: "Biruut-",
		thresholdNoThreshold: "Lävend puudub",
		thresholdPercentLeastCost: "Vähima kulu protsent",
		thresholdAccumulativeCost: "Kumulatiivne kulu",
		clrmapTypeHillshade: "Nõlvavarjutus"
	},
	categoryLabels: {
		sourceCharacteristics: "Allika omadused",
		neighborhoodSettings: "Ümbruskonna sätted",
		statistics: "Statistika",
		gamma: "Gamma",
		viewshedParameters: "Vaatevälja parameetrid",
		observerParameters: "Vaatleja parameetrid",
		irregularDataInterpolation: "Andmete ebaregulaarne interpoleerimine",
		modelStatistics: "Mudeli statistika",
		aggregationDef: "Agregeerimismääratlus",
		filterByAttributes: "Filtreeri atribuutide kaupa",
		percentileName: "Protsentiil",
		rasterInfo: "Rastri teave",
		extent: "Ulatus",
		spatialReference: "Koordinaatsüsteem"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Selle kihi nimi, mis luuakse ja lisatakse kaardile.</p>",
		resultType: "<p>Loodava väljundi tüüp. Väljundid võivad olla paanitud pildikihid või dünaamilised pildikihid.</p>",
		saveResultIn: "<p>Selle kausta nimi jaotises <b>Minu sisu</b>, kuhu tulemus salvestatakse.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Keskkonnaseaded analüüsimiseks Map Vieweris.</p>",
		outSR: "<p>Määrab analüüsi ja tulemuskihi jaoks koordinaatsüsteemi.</p>",
		extent: "<p>Määrab analüüsiks kasutatava ala.</p>",
		snapRaster: "<p>Reguleerib väljundi ulatust nii, et see vastaks määratud snäpirastri kihi pikslite joondusele.</p>",
		cellSize: "<p>Määrab piksli suuruse või resolutsiooni, mida kasutatakse analüüsiks ja väljundi rasterkihi loomiseks.</p>",
		mask: "<p>Määrab maskikihi, kus analüüsimiseks kasutatakse ainult maski piirkonnas asuvaid piksleid.</p>",
		resamplingMethod: "<p>Määrab, kuidas tuleb interpoleerida piksliväärtusi, kui sisend- ja väljundrastrid ei kattu.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Toetuseta tüüp",
		currentlyUnsupported: " Üksuse ${missingType} vaikeredaktor on ootel, kuid saabub peagi. Ajutise kohatäite tekstiväli stringipõhiste sisendite määramiseks.",
		unsupportedOverrideWarning: "Alistamisredaktori komponent, mis pakub paremat kasutuskogemust järgmiste parameetritega töötlemiseks, on ootel, kuid saabub peagi:",
		overrideWidgetMissing: "Alistamisredaktori komponent puudub!",
		uiIncomplete: "Töö edastamine nurjus. Funktsiooni ei saa käitada, kuna mõni nõutav väli ei ühildu või puudub kasutajaliidesest.",
		count: "Kogus",
		selectVariables: "Vali muutujad",
		selectFeature: "Objektikihi valimine",
		greaterThanErrorMessage: "Sisestatav arv peab olema suurem kui ${min}",
		lesserThanErrorMessage: "Sisestatav arv peab olema väiksem kui ${max}",
		greaterThanOrEqualErrorMessage: "Sisestatav arv peab olema suurem kui${min} või sellega võrdne",
		lesserThanOrEqualErrorMessage: "Sisestatav arv peab olema väiksem kui${max} või sellega võrdne",
		allowScalar: "Kihi valimine või konstandi sisestamine",
		selectField: "Valige väli",
		parameterRequired: "See parameeter on nõutav.",
		enterAValue: "Sisestage väärtus ...",
		invalidInput: "Sisestatud väärtus ei sobi.",
		itemNotFound: "Üksust pole või sellele ei pääse juurde.",
		itemPermissionDenied: "Teil pole sellele üksusele juurdepääsu õigust.",
		layerNotAvailable: "Kihi ${layerName} laadimine nurjus.",
		multipleLayersNotAvailable: "Kihi ${layerName} ja muude kihtide laadimine nurjus.",
		learnMoreLabel: "Lisateave",
		fieldNotAvailable: "Välja laadimine nurjus.",
		allowAnalysis: "Analüüs pole pilditeenuses lubatud.",
		allowAnalysisReason: "Ühte või mitut kaardilt pärit kihti pole siin loetletud, kuna need ei luba analüüsi.",
		learnMoreText: "Lisainfo",
		atLeastOneRasterInput: "Vähemalt üks sisendkiht peab olema rasterkiht.",
		browseAnalysisLayers: "Sirvi kihte",
		activeMapViewExtent: "Kasuta praegust kaardi ulatust",
		chooseRaster: "Vali väljalõike raster",
		chooseGeometry: "Vali väljalõike geomeetria",
		resultType: "Tulemuse tüüp",
		saveInFolder: "Salvesta kausta",
		outputName: "Väljundi nimi",
		outputLayerType: "Väljundkihi tüüp",
		dynamicImageryLayer: "Dünaamiline pildikiht",
		tiledImageryLayer: "Paanitud pildikiht",
		custom: "Kohandatud",
		loading: "Laadimine...",
		layerMissing: "Siin pole loetletud ühte või mitut kaardilt pärit kihti, kuna need ei luba analüüsi. Lisateave.",
		browseCoordinateSystems: "Sirvi koordinaatsüsteeme",
		unableToRepopulateOutSR: "Väljundkoordinaatsüsteemi ei saa andmetega täita.",
		defaultTitle: "Kuva rohkem",
		"ARC (equal arc-second)": "ARC (võrdne kaarsekund)",
		Africa: "Aafrika",
		Antarctica: "Antarktika",
		Argentina: "Argentina",
		Asia: "Aasia",
		"Asteroid Belt": "Asteroidide vöö",
		"Atlantic Ocean": "Atlandi ookean",
		Australia: "Austraalia",
		"Australia and New Zealand": "Austraalia ja Uus-Meremaa",
		Austria: "Austria",
		"BLM (US Feet)": "BLM (USA jalad)",
		Bangladesh: "Bangladesh",
		"Beijing 1954": "Peking 1954",
		Bhutan: "Bhutan",
		CGCS2000: "CGCS2000",
		Canada: "Kanada",
		Caribbean: "Kariibi meri",
		"Caribbean Sea": "Kariibi meri",
		"Central America": "Kesk-Ameerika",
		"Central and North America": "Kesk- ja Põhja-Ameerika",
		Colombia: "Colombia",
		Continental: "Kontinentaalne",
		"County Systems": "County Systems (Maakonnasüsteemid)",
		"Democratic Republic of the Congo": "Kongo Demokraatlik Vabariik",
		"EPSG Arctic": "EPSG Arktika",
		Earth: "Maa",
		"Ellipsoidal-based": "Ellipsoidipõhine",
		Europe: "Euroopa",
		Finland: "Soome",
		France: "Prantsusmaa",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss-Krüger",
		"Geographic Coordinate Systems": "Geograafilised koordinaatsüsteemid",
		Germany: "Saksamaa",
		"Gravity-related": "Gravitatsioonipõhine",
		"Greenwich-based": "Greenwichi-põhine",
		"Highways England": "Highways England",
		Illinois: "Illinois",
		"Indian Ocean": "India ookean",
		"Indian Subcontinent": "Ees-India",
		Indiana: "Indiana",
		Indonesia: "Indoneesia",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Iirimaa ja Ühendkuningriik",
		Italy: "Itaalia",
		Japan: "Jaapan",
		Jupiter: "Jupiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Liibüa",
		Malaysia: "Malaisia",
		"Malaysia and Singapore": "Malaisia ja Singapur",
		Mars: "Marss",
		Mercury: "Merkuur",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (USA jalad)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (rahvusvahelised jalad)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (meetrid)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (USA jalad)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (rahvusvahelised jalad)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (meetrid)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (USA jalad)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (rahvusvahelised jalad)",
		"NAD 1983 (Meters)": "NAD 1983 (meetrid)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (meetrid)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (USA jalad)",
		"NAD 1983 (US Feet)": "NAD 1983 (USA jalad)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (rahvusvahelised jalad)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (meetrid)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (USA jalad)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (rahvusvahelised jalad)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (meetrid)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (USA jalad)",
		"National Grids": "National Grids",
		Navajo: "Navajo",
		Neptune: "Neptuun",
		"New Beijing": "Uus Peking",
		"New Zealand": "Uus-Meremaa",
		"North America": "Põhja-Ameerika",
		"Northern Hemisphere": "Põhjapoolkera",
		Norway: "Norra",
		Oceans: "Ookeanid",
		Oregon: "Oregon",
		"Other GCS": "Muu GCS",
		"Pacific Ocean": "Vaikne ookean",
		Pluto: "Pluuto",
		Polar: "Polaarne",
		Portugal: "Portugal",
		"Projected Coordinate Systems": "Tasapinnaliste ristkoordinaatide süsteem",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Asendatud",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturn",
		"Solar System": "Päikesesüsteem",
		"South Africa": "Lõuna-Aafrika Vabariik",
		"South America": "Lõuna-Ameerika",
		"South Korea": "Lõuna-Korea",
		"Southern Hemisphere": "Lõunapoolkera",
		"Spheroid-based": "Sferoidipõhine",
		"State Plane": "State Plane (osariigi tasand)",
		"State Systems": "State Systems (Osariigisüsteemid)",
		Sweden: "Rootsi",
		"Switzerland and Liechtenstein": "Šveits ja Liechtenstein",
		Texas: "Texas",
		Tribal: "Tribal (Hõimualad)",
		Turkey: "Türgi",
		"US Feet": "USA jalad",
		"USA and territories": "USA ja territooriumid",
		UTM: "UTM",
		Ukraine: "Ukraina",
		"Unknown Height Systems": "Tundmatud kõrgussüsteemid",
		Uranus: "Uraan",
		Venus: "Veenus",
		"Vertical Coordinate Systems": "Vertikaalsed koordinaatsüsteemid",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Maailm",
		"World (Sphere-based)": "Maailm (sfääripõhine)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Valmis",
		noResults: "Tulemusi ei leitud",
		searchPlaceholder: "Nimi või WKID",
		browseTemplate: "Sirvi rasterfunktsioonide malle",
		saveTemplate: "Salvesta rasterfunktsiooni mall",
		preview: "Eelvaade",
		previewDescription: "Vaadake tulemust eelvaates enne analüüsi käitamist.",
		showPreview: "Kuva eelvaade",
		previewLayer: "Eelvaatekiht ${number}",
		newPreview: "Uus eelvaade",
		previewPopup: "Lubage analüüsitulemuste eelvaade sisendi parameetrite põhjal.",
		updatePreviewLayer: "Uuenda valitud eelvaatekihti",
		createPreviewLayer: "Loo uus eelvaatekiht",
		maximumPreviewAllowed: "Lubatud eelvaatekihtide maksimaalne arv: ${maxCount}",
		previewFailure: "See eelvaatekiht pole saadaval. Kontrollige sisendi parameetreid ja värskendage uuesti seda eelvaatekihti.",
		header: "Vali üksus",
		content: "Teil on salvestamata muudatusi mallis ${rftTitle}. Kui alustate uuesti uue malliga, lähevad need muudatused kaotsi.",
		dontSave: "Ära salvesta",
		"continue": "Jätka",
		stretch: "Sobita aknasse",
		pan: "Nihutamine",
		newTemplate: "Loo uus mall",
		openTemplate: "Ava mall",
		addFunction: "Lisa rasterfunktsioonid",
		addConstant: "Lisa konstant",
		addRaster: "Lisa rastri muutuja",
		move: "Teisalda",
		zoom: "Suumi",
		saveAs: "Salvesta nimega",
		clear: "Tühista",
		addRasterFunctionTitle: "Lisa rastri funktsioonid",
		templatePropertiesTitle: "Malli omadused",
		browseRFT: "Sirvi rasterfunktsioonide malle",
		defaultToolDescription: "Analüüsitööriist ${toolTitle}.",
		openToolText: "Ava tööriist",
		toolDropdownText: "Tööriista rippmenüü",
		addToMap: "Kinnita ja lisa kaardile",
		confirm: "Kinnita",
		select: "Vali",
		selectTask: "Valige toiming",
		unsupportedLayer: "See parameeter ei toeta järgmisi kihte: ${layerName}.",
		viewDetails: "Kuva üksuse kõik üksikasjad",
		rename: "Nimeta ümber",
		duplicate: "Dubleeri",
		launch: "Ava käitamiseks",
		templateEditor: "Malliredaktor",
		createItem: "Rasterfunktsiooni malli salvestamine",
		actionLabel: "Filtreeri",
		filterPopoverHeading: "Filtreeri funktsioone",
		defaultSearchPlaceholder: "Otsi nime järgi",
		settings: "Seaded",
		summary: "Kokkuvõte",
		definitionQuery: "Määratlusepäring",
		matchVariables: "Vastenda muutujad",
		unionDimension: "Ühendi mõõtmed",
		nameEditorPlaceholder: "Sisesta pealkiri",
		summaryEditorPlaceholder: "Sisestage lühikirjeldus.",
		definitionQueryPlaceholder: "Sisesta...",
		upload: "Laadi üles",
		chooseImage: "Klõpsake faili valimiseks",
		update: "Uuenda",
		thumbnailErrors: {
			wrongImageType: "Valitud on vale pilditüüp",
			notAvailable: "Pisipilt ei ole saadaval",
			loadError: "Pilti ei saanud laadida",
			chooseFile: "Klõpsake faili valimiseks"
		}
	}
};
const copy = "Kopeeri";
const save = "Salvesta";
const title = "Pealkiri";
const folder = "Kaust";
const tags = "Märksõnad";
const savingMessage = "Elemendi salvestuskoht";
const shareWith = "Jaga";
const share = "Jagamine";
const setSharingLevel = "Määra jagamise tase";
const setGroupSharing = "Määra grupi ühiskasutus";
const owner = "Omanik";
const organization = "Ettevõte";
const everyone = "Igaüks (avalik)";
const groups = "Grupid:";
const type = "Tüüp";
const mosaic = "Mosaiik";
const itemGroup = "Elemendigrupp";
const item = "Sisuüksus";
const definitionQuery = "Määratlusepäring";
const groupItemsBy = "Üksuste rühmitamise tunnus";
const groupFieldName = "Grupi väljanimi";
const tagFieldName = "Sildi väljanimi";
const noTitleTagErrorMsg = "Peate objektile lisama pealkirja ja märksõnad, et teie kaardi saaks otsingute kaudu leida.";
const noTitleErrorMsg = "Peate sisestama objekti nime.";
const noTagErrorMsg = "Peate lisama vähemalt ühe märksõna, et inimesed teie kaardi otsingute kaudu üles leiaksid.";
const error = "Viga";
const warning = "Hoiatus";
const success = "Edu";
const details = "Detailid:";
const tryAgain = "Proovige uuesti";
const toolModeler = {
	save: "Salvesta",
	editProperties: "Muuda atribuute",
	saveAs: "Salvesta nimega",
	savingNotification: "Elemendi muudatuste salvestamine...",
	savingTitle: "Salvestamine",
	saveFailedMessage: "Muudatusi ei saanud salvestada.",
	saveWithErrorsMessage: "Muudatused salvestati, kuid ilmnesid järgmised tõrked.",
	viewItemMessage: "Kuva salvestatud element",
	here: "siin.",
	itemCreatedMessage: "Uus üksus on loodud.",
	clickToViewItemMessage: "Üksuse üksikasjade lehe kuvamiseks klõpsake nuppu OK; jätkamiseks klõpsake nuppu Tühista.",
	readingFailed: "Valitud rasterfunktsiooni malli ei saanud laadida.",
	failedToLoadXML: "Valitud rasterfunktsiooni malli laadimine XML-vormingus nurjus.",
	learnMore: "Lisainfo",
	overwriteTitle: "Kinnita ülekirjutus",
	overwriteMessage: "Kas soovite olemasoleva üksuse üle kirjutada?",
	overwriteSuccessMessage: "Üksus on uuendatud."
};
const toolEditor = {
	run: "Käivita",
	save: "Salvesta",
	deleteSelected: "Kustuta valitud elemendid",
	addRaster: "Lisa raster",
	addScalar: "Lisa skalaar",
	layout: "Automaatne paigutus",
	errorTitle: "Viga",
	invalidToolMessage: "Rasterfunktsiooni mall ei sobi.",
	out: "Väljas",
	zoomIn: "Suumi sisse",
	zoomOut: "Suumi välja",
	zoomToFit: "Sobita aknasse",
	panOn: "Aktiveeri sirvimisvaade",
	panOff: "Lülita sirvimisvaade välja",
	defaultModelName: "Tööriista mudel",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Rasterfunktsiooni mall",
	defaultToolDescription: "Lisage rasterfunktsiooni kohta lühikokkuvõte.",
	defaultHelpText: "Abiteksti muutmiseks klõpsake abiteabe ikooni",
	editHelpTitle: "Redigeerimisspikker",
	saveLabel: "Salvesta",
	cancelLabel: "Loobu",
	thumbnail: {
		wrongImageType: "Valitud on vale pilditüüp",
		notAvailable: "Pisipilt ei ole saadaval",
		loadError: "Pilti ei saanud laadida",
		chooseFile: "Klõpsake faili valimiseks"
	}
};
const saveUtils = {
	thumbnail: "Pisipilt",
	sharing: "Jagamine"
};
const close = "Sule";
const unsavedWarningExisting = "Kas soovite elemendi <b>${itemTitle}</b> muudatused salvestada?";
const unsavedWarningNew = "Kas soovite muudatused salvestada?";
const saveAs = "Salvesta nimega";
const dontSave = "Ära salvesta";
const unsavedTitle = "Salvestamata muudatused";
const invalidRFTMessage = "Loodud rasterfunktsiooni mall ei sobi.";
const errorTitle = "Viga";
const breadcrumb = "Rasterfunktsioonide redaktor";
const breadcrumbEditor = "Sisu > Rasterfunktsioonide redaktor";
const viewerModeTitle = "Kirjutuskaitstud";
const viewerModeMessage = "Rastrifunktsiooni malli üksus on kirjutuskaitsega. Muudatusi ei saa salvestada.";
const userStartDirection = "Rasterfunktsiooni malli koostamiseks valige kõigepealt funktsioon.";
const selectFunction = "Lisa funktsioon";
const deselectFunction = "Eemalda funktsioon";
const dialogTitle = "Süsteem";
const category = "Kategooriad";
const search = "Rastrifunktsioonide otsimine";
const categoryNames = {
	analysis: "Küsitlus",
	appearance: "Välimus",
	classification: "Rühmitamine",
	conversion: "Teisendus",
	correction: "Parandus",
	dataManagement: "Andmehaldus",
	distance: "Vahemaa",
	distanceLegacy: "Kaugus (pärand)",
	hydrology: "Hüdroloogia",
	math: "Matemaatika",
	mathConditional: "Matemaatika: tingimuslik",
	mathLogical: "Matemaatika: loogika",
	mathTrigonometric: "Matemaatika: trigonomeetriline",
	reclass: "Ümberklassifitseerimine",
	statistical: "Statistiline",
	surface: "Pind"
};
const commonStrings_et = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_et);


//# sourceMappingURL=common-strings.et-97fd9da7.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,