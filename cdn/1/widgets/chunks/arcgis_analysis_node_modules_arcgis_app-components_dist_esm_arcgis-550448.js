"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-550448"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-schema-editor.entry.js":
/*!***********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-schema-editor.entry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_schema_editor: () => (/* binding */ ArcgisSchemaEditor)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./categories-ca134005.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util-2a0e2f08.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/util-2a0e2f08.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */








const arcgisSchemaEditorCss = ".expand-collapse-all{margin-bottom:1rem}";

const ArcgisSchemaEditor = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSchemaEditorListOrderChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSchemaEditorListOrderChange", 7);
        this.arcgisSchemaEditorDelete = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSchemaEditorDelete", 7);
        this.arcgisSchemaEditorInvalidMove = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSchemaEditorInvalidMove", 7);
        this.arcgisSchemaEditorTitleInvalid = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSchemaEditorTitleInvalid", 7);
        /**
         * When moving a category from one parent to another, the events will be emitted twice
         * (once for the old parent and once for the new parent).
         *
         * This is to avoid emitting the same events multiple times
         */
        this.prevChangeEventPayload = null;
        this.prevSchema = null;
        this.handleExpandCollapseAllClick = () => {
            this.isCollapsedAll = !this.isCollapsedAll;
            this.itemRef.expandOrCollapseAll(this.isCollapsedAll);
        };
        this.handleListOrderChange = (payload) => {
            const { categorySchema, arcgisSchemaEditorListOrderChange, uiCategory } = this;
            const newSchema = (0,_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__.g)(uiCategory, payload);
            arcgisSchemaEditorListOrderChange.emit(Object.assign(Object.assign({}, payload), { newSchema }));
            this.prevSchema = categorySchema;
        };
        this.handleDeleteClick = (payload) => {
            const { arcgisSchemaEditorDelete, uiCategory } = this;
            const newSchema = (0,_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__.a)(uiCategory, payload);
            arcgisSchemaEditorDelete.emit(Object.assign(Object.assign({}, payload), { newSchema }));
            this.prevSchema = this.categorySchema;
        };
        this.handleSaveNewTitle = async (payload) => {
            const { saveNewTitle, uiCategory, arcgisSchemaEditorTitleInvalid } = this;
            const path = payload.path;
            const titleErrorCode = (0,_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__.c)({
                targetParentCategory: (0,_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__.b)(uiCategory, path).parentCategory,
                targetCategory: { path, title: payload.newTitle }
            });
            if (titleErrorCode) {
                arcgisSchemaEditorTitleInvalid.emit(Object.assign(Object.assign({}, payload), { errorCode: titleErrorCode }));
                return false;
            }
            // Make a copy in case the consumers already mutated the schema
            const prevSchema = this.categorySchema;
            const newSchema = (0,_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__.d)(uiCategory, payload);
            const saveResult = await saveNewTitle(Object.assign(Object.assign({}, payload), { newSchema }));
            if (saveResult) {
                this.prevSchema = prevSchema;
                // Also optimistically update the UI
                const { targetCategory, parentCategory } = (0,_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__.b)(uiCategory, payload.path);
                targetCategory.title = payload.newTitle;
                targetCategory.path = (0,_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_1__.a)(parentCategory.path, targetCategory);
            }
            return saveResult;
        };
        this.handleSaveNewCategory = async (payload) => {
            const { saveNewCategory, uiCategory, arcgisSchemaEditorTitleInvalid } = this;
            const path = payload.path;
            const { parentCategory, targetCategory } = (0,_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__.b)(uiCategory, path);
            const titleErrorCode = (0,_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__.c)({
                targetParentCategory: targetCategory !== null && targetCategory !== void 0 ? targetCategory : parentCategory,
                targetCategory: { path, title: payload.newTitle }
            });
            if (titleErrorCode) {
                arcgisSchemaEditorTitleInvalid.emit(Object.assign(Object.assign({}, payload), { errorCode: titleErrorCode }));
                return false;
            }
            // Make a copy in case the consumers already mutated the schema
            const prevSchema = this.categorySchema;
            const newSchema = (0,_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__.e)(uiCategory, payload);
            const saveResult = await saveNewCategory(Object.assign(Object.assign({}, payload), { newSchema }));
            if (saveResult) {
                this.prevSchema = prevSchema;
            }
            return saveResult;
        };
        this.isMoveValid = (payload) => {
            const { maxDepth, arcgisSchemaEditorInvalidMove, prevChangeEventPayload } = this;
            const { fromCategory, toCategory, fromItemCategory } = payload;
            const { fromCategory: prevFromCategory, fromItemCategory: prevFromItemCategory, toCategory: prevToCategory, fromIndex: prevFromIndex, toIndex: prevToIndex } = prevChangeEventPayload !== null && prevChangeEventPayload !== void 0 ? prevChangeEventPayload : {};
            // Avoid emitting the same event multiple times
            if (prevChangeEventPayload &&
                prevFromCategory.path === fromCategory.path &&
                prevFromItemCategory.path === fromItemCategory.path &&
                prevToCategory.path === toCategory.path &&
                prevFromIndex === payload.fromIndex &&
                prevToIndex === payload.toIndex) {
                // `null` is reserved for duplicate event handling
                return null;
            }
            this.prevChangeEventPayload = payload;
            const { path: toPath } = toCategory;
            if (typeof maxDepth === "number" && toPath && (0,_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__.f)(toPath) > maxDepth) {
                // Can always move to the root
                arcgisSchemaEditorInvalidMove.emit(Object.assign(Object.assign({}, payload), { errorCode: "maxDepthExceeded" }));
                return false;
            }
            const titleErrorCode = (0,_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__.c)({
                targetParentCategory: toCategory,
                targetCategory: fromItemCategory
            });
            if (titleErrorCode) {
                arcgisSchemaEditorInvalidMove.emit(Object.assign(Object.assign({}, payload), { errorCode: titleErrorCode }));
                return false;
            }
            return true;
        };
        this.categorySchema = undefined;
        this.categoryAggregationData = undefined;
        this.showInputByDefault = false;
        this.newCategoryMode = undefined;
        this.maxDepth = 2;
        this.maxCategories = 900;
        this.canCollapseAll = true;
        this.canEditCategory = undefined;
        this.saveNewTitle = undefined;
        this.saveNewCategory = undefined;
        this.isCollapsedAll = false;
        this.uiCategory = undefined;
        this.canAddCategory = false;
        this.canDeleteCategory = false;
    }
    async componentWillLoad() {
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el);
        this.i18n = locale[0];
        this.categorySchemaChangeHandler();
    }
    /** Can be used in case erroring out on schema update */
    async revertSchema() {
        this.categorySchema = this.prevSchema;
    }
    categorySchemaChangeHandler() {
        const { categorySchema, categoryAggregationData } = this;
        this.uiCategory = (0,_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__.h)(categorySchema, categoryAggregationData);
        const numCategory = (0,_util_2a0e2f08_js__WEBPACK_IMPORTED_MODULE_3__.i)(categorySchema);
        this.canAddCategory = numCategory < this.maxCategories;
        // TODO: rethink this later if we want to allow deleting the root category
        this.canDeleteCategory = true;
    }
    render() {
        const { uiCategory, newCategoryMode, showInputByDefault, canAddCategory, canDeleteCategory, canEditCategory, canCollapseAll, i18n, isCollapsedAll, maxDepth, handleExpandCollapseAllClick, handleListOrderChange, handleSaveNewTitle, handleSaveNewCategory, isMoveValid } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, canCollapseAll && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { iconStart: isCollapsedAll ? "chevron-down" : "chevron-up", appearance: "transparent", onClick: handleExpandCollapseAllClick, class: "expand-collapse-all" }, isCollapsedAll ? i18n.expandAll : i18n.collapseAll)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-schema-editor-category", {
            // First level is just a placeholder to avoid repeating the same code
            category: uiCategory, newCategoryMode: newCategoryMode, showInputByDefault: showInputByDefault, canAddCategory: canAddCategory, canDeleteCategory: canDeleteCategory, canEditCategory: canEditCategory, i18n: i18n, maxDepth: maxDepth, isMoveValid: isMoveValid, onListOrderChanged: (event) => handleListOrderChange(event.detail), onArcgisSchemaEditorInternalDeleteClick: (event) => this.handleDeleteClick(event.detail), saveNewTitle: handleSaveNewTitle, saveNewCategory: handleSaveNewCategory, ref: (el) => (this.itemRef = el)
        })));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "categorySchema": ["categorySchemaChangeHandler"]
    }; }
};
ArcgisSchemaEditor.style = arcgisSchemaEditorCss;



//# sourceMappingURL=arcgis-schema-editor.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CATEGORY_BASE_PATH),
/* harmony export */   U: () => (/* binding */ UPPER_CATEGORY_BASE_PATH),
/* harmony export */   a: () => (/* binding */ getCategoryUIPath),
/* harmony export */   g: () => (/* binding */ getRootCategoryPath)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const CATEGORY_BASE_PATH = "/categories";
const UPPER_CATEGORY_BASE_PATH = "/Categories";

// TODO: add unit tests
/**
 * Construct the path of the category based on the parent path and the category title
 */
const getCategoryUIPath = (parentPath, category, lowerCase = true) => {
    const basePath = parentPath !== null && parentPath !== void 0 ? parentPath : "";
    return `${basePath}${basePath.endsWith("/") ? "" : "/"}${lowerCase ? category.title.toLocaleLowerCase() : category.title}`;
};
/**
 * Find the root node title to use for categories
 */
function getRootCategoryPath(categories) {
    var _a;
    let categoryTitle = (_a = categories === null || categories === void 0 ? void 0 : categories[0]) === null || _a === void 0 ? void 0 : _a.title;
    if (categoryTitle && categoryTitle.charAt(0) !== "/") {
        categoryTitle = `/${categoryTitle}`;
    }
    return categoryTitle || UPPER_CATEGORY_BASE_PATH;
}



//# sourceMappingURL=categories-ca134005.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/util-2a0e2f08.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/util-2a0e2f08.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   M: () => (/* binding */ MAX_CATEGORY_NAME_LENGTH),
/* harmony export */   a: () => (/* binding */ getNewCategorySchemaFromDelete),
/* harmony export */   b: () => (/* binding */ getCategoryFromPath),
/* harmony export */   c: () => (/* binding */ checkNewCategoryTitleValid),
/* harmony export */   d: () => (/* binding */ getNewCategorySchemaFromTitleChange),
/* harmony export */   e: () => (/* binding */ getNewCategorySchemaFromCategoryAdd),
/* harmony export */   f: () => (/* binding */ getPathLength),
/* harmony export */   g: () => (/* binding */ getNewCategorySchemaFromMove),
/* harmony export */   h: () => (/* binding */ getUICategoryFromCategorySchema),
/* harmony export */   i: () => (/* binding */ countNumCategories)
/* harmony export */ });
/* harmony import */ var _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./categories-ca134005.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


// TODO: add unit tests
const getNewCategorySchemaFromMove = (category, { fromCategory: { path: fromPath }, toCategory: { path: toPath }, fromIndex, toIndex }) => {
    // Copy since this will be a destructive operation
    const uiCategory = structuredClone(category);
    const fromCategory = getCategoryFromPath(uiCategory, fromPath);
    let toCategory = fromCategory;
    if (fromPath !== toPath) {
        toCategory = getCategoryFromPath(uiCategory, toPath);
    }
    const [removed] = fromCategory.targetCategory.categories.splice(fromIndex, 1);
    toCategory.targetCategory.categories.splice(toIndex, 0, removed);
    return getCategorySchemaFromUICategory(uiCategory);
};
const getNewCategorySchemaFromTitleChange = (category, { newTitle, path }) => {
    const uiCategory = structuredClone(category);
    const categoryToChange = getCategoryFromPath(uiCategory, path);
    categoryToChange.targetCategory.title = newTitle;
    return getCategorySchemaFromUICategory(uiCategory);
};
const getNewCategorySchemaFromCategoryAdd = (category, { newTitle, path }) => {
    const uiCategory = structuredClone(category);
    // Remove the last part since it's just the placeholder
    // e.g. `/categories/category 1/new-input` -> `/categories/category 1`
    const containerPath = path.replace(/\/[^/]+$/, "");
    if (containerPath) {
        const { targetCategory } = getCategoryFromPath(uiCategory, containerPath);
        targetCategory.categories.push({ title: newTitle, categories: [], count: 0, path: null });
    }
    else {
        /**
         * This means we're adding a root level category when there is no category yet
         *
         * Can happens when we first set up the category schema
         */
        uiCategory.categories.push({ title: newTitle, categories: [], count: 0, path: null });
    }
    return getCategorySchemaFromUICategory(uiCategory);
};
const getNewCategorySchemaFromDelete = (category, { path }) => {
    const uiCategory = structuredClone(category);
    const { targetIndex, parentCategory } = getCategoryFromPath(uiCategory, path);
    parentCategory === null || parentCategory === void 0 ? void 0 : parentCategory.categories.splice(targetIndex, 1);
    return getCategorySchemaFromUICategory(uiCategory);
};
// * --- Utils
// Path we want to remove the base path since we count root as 0th level then also remove the beginning `/` to avoid empty string
const getPathLength = (path) => { var _a; return (_a = path === null || path === void 0 ? void 0 : path.replace(_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C, "").slice(1).split("/").length) !== null && _a !== void 0 ? _a : 0; };
/**
 * Get the category from schema based on the path
 */
const getCategoryFromPath = (uiCategory, path) => {
    if (path == null || path === _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C) {
        // Root level
        return { targetCategory: uiCategory, targetIndex: 1, parentCategory: null };
    }
    // Path starts with `/` so remove it
    const pathParts = path.slice(1).split("/");
    let curPath = path.indexOf(_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C) === 0 ? (0,_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.a)("", { title: pathParts.shift() }) : "";
    let parentCategory = null;
    let targetCategory = uiCategory;
    let targetIndex = 0;
    do {
        curPath = (0,_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.a)(curPath, { title: pathParts.shift() });
        parentCategory = targetCategory;
        targetIndex = targetCategory.categories.findIndex((subcategory) => subcategory.path === curPath);
        targetCategory = targetCategory.categories[targetIndex];
    } while (pathParts.length > 0 && targetCategory.categories.length);
    return { targetCategory, targetIndex, parentCategory };
};
/**
 * Create a nested category schema from the aggregated search result starting from root
 */
const getUICategoryFromCategorySchema = (categorySchema, categoryAggregationData) => {
    var _a, _b;
    return ({
        title: "",
        path: null,
        count: (_b = (_a = categoryAggregationData.fieldValues.find((fieldValue) => fieldValue.value === _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C)) === null || _a === void 0 ? void 0 : _a.count) !== null && _b !== void 0 ? _b : 0,
        categories: getUICategoryFromCategorySchemaRecursive(null, categorySchema, categoryAggregationData)
    });
};
const getCategorySchemaFromUICategory = (uiCategory) => uiCategory.categories.map(getCategoryFromUICategory);
const getCategoryFromUICategory = (uiCategory) => ({
    title: uiCategory.title,
    categories: uiCategory.categories.map(getCategoryFromUICategory)
});
const getUICategoryFromCategorySchemaRecursive = (parentPath, categorySchema, categoryAggregationData) => {
    return categorySchema.map((category) => {
        var _a, _b;
        const path = (0,_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.a)(parentPath !== null && parentPath !== void 0 ? parentPath : _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_0__.C, category);
        const categoryCount = (_a = categoryAggregationData.fieldValues.find((fieldValue) => fieldValue.value === path)) === null || _a === void 0 ? void 0 : _a.count;
        const subcategories = getUICategoryFromCategorySchemaRecursive(path, (_b = category.categories) !== null && _b !== void 0 ? _b : [], categoryAggregationData);
        return {
            title: category.title,
            path,
            count: categoryCount !== null && categoryCount !== void 0 ? categoryCount : 0,
            categories: subcategories
        };
    });
};
const countNumCategories = (categorySchema) => {
    // + 1 is itself
    return categorySchema.reduce((acc, cur) => { var _a; return acc + 1 + countNumCategories((_a = cur.categories) !== null && _a !== void 0 ? _a : []); }, 0);
};
const checkNewCategoryTitleValid = ({ targetCategory, targetParentCategory }) => {
    var _a;
    const categoryLowerCaseTitle = (_a = targetCategory.title.toLocaleLowerCase()) === null || _a === void 0 ? void 0 : _a.trim();
    if (!categoryLowerCaseTitle) {
        return "emptyTitle";
    }
    if (categoryLowerCaseTitle.length > MAX_CATEGORY_NAME_LENGTH) {
        return "maxCharacter";
    }
    // No duplicate category name on the same level
    if (targetParentCategory.categories.some((category) => category.title.toLowerCase() === categoryLowerCaseTitle && category.path !== targetCategory.path)) {
        return "destinationHasSameName";
    }
    return null;
};
const MAX_CATEGORY_NAME_LENGTH = 100;



//# sourceMappingURL=util-2a0e2f08.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,