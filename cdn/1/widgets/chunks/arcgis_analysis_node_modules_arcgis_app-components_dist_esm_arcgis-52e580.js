"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-52e580"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-field-info.entry.js":
/*!********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-field-info.entry.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_field_info: () => (/* binding */ ArcgisFieldInfo)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */








const CSS = {
    container: "container",
    section: "section",
    title: "title",
    missing: "missing",
    data: "data",
    count: "count",
    statisticsRow: "statistics-row",
    statisticsRowTopValues: "statistics-row-top-values"
};

var status;
(function (status) {
    status["MISSING"] = "missing";
    status["IN_PROGRESS"] = "inProgress";
    status["SUCCESS"] = "success";
    status["FAILED"] = "failed";
})(status || (status = {}));
var simpleFieldTypes;
(function (simpleFieldTypes) {
    simpleFieldTypes["NUMBER"] = "number";
    simpleFieldTypes["STRING"] = "string";
    simpleFieldTypes["DATE"] = "date";
    simpleFieldTypes["DATE_ONLY"] = "date-only";
    simpleFieldTypes["TIME_ONLY"] = "time-only";
    simpleFieldTypes["TIMESTAMP_OFFSET"] = "timestamp-offset";
    simpleFieldTypes["OID"] = "oid";
    simpleFieldTypes["GUID"] = "guid";
    simpleFieldTypes["UNKNOWN"] = "unknown";
})(simpleFieldTypes || (simpleFieldTypes = {}));
/**
 * Returns true if the value is defined
 * @param value - value to check
 */
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Returns the URL used for queries.
 * E.g. SceneLayers need to use the FeatureLayer URL for queries.
 * @param value - value to check
 */
function getQueryURL(layer) {
    var _a;
    if (layer.type === "scene") {
        return (_a = layer.associatedLayer) === null || _a === void 0 ? void 0 : _a.url;
    }
    return layer.url;
}

/**
 * Returns additional field information from layer
 * @param props - properties containing layer and fieldName
 */
function getFieldInfo(props) {
    var _a;
    const { layer, fieldName } = props;
    let fieldInfo;
    const { popupTemplate } = layer;
    const popupFieldInfos = popupTemplate ? popupTemplate.fieldInfos : [];
    (layer.type === "imagery-tile"
        ? layer.rasterFields
        : layer.type === "imagery" && ((_a = layer.rasterFields) === null || _a === void 0 ? void 0 : _a.length)
            ? layer.rasterFields
            : layer.fields)
        .filter((layerField) => layerField.name === fieldName)
        .forEach((layerField) => {
        const list = popupFieldInfos
            ? popupFieldInfos.filter((fInfo) => fInfo.fieldName === layerField.name)
            : null;
        const label = (list === null || list === void 0 ? void 0 : list.length) ? list[0].label : null;
        if (/^raster.(item|service)pixelvalue/i.test(fieldName)) {
            // e.g. "Raster.ServicePixelValue" | "Raster.ItemPixelValue" | "Raster.ServicePixelValue.Raw"
            // layer.rasterFields reports them as type "string"
            layerField.type = "double";
        }
        const featureFilterField = {
            layerField: layerField,
            label: label || layerField.alias || layerField.name
        };
        featureFilterField.codedValues = getCodedValues(fieldName, props);
        _getSimpleFieldType(featureFilterField);
        if (featureFilterField.simpleFieldType) {
            fieldInfo = featureFilterField;
        } // else can't use field
    });
    return fieldInfo;
}
/**
 * Returns feature count in layer
 * @param props - properties containing layer and fieldName
 */
async function getFeatureCount(props) {
    props.statisticsStatus = status.IN_PROGRESS;
    const { layer, view } = props;
    if (layer.type === "imagery" || layer.type === "imagery-tile" || layer.type === "stream") {
        throw new Error("could not get feature count");
    }
    try {
        return await (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_3__.g)(layer, view);
    }
    catch (error) {
        return;
    }
}
/**
 * Returns summary statistics
 * @param props - properties containing layer and fieldName
 */
async function getStatistics(props) {
    const { layer, view, fieldName, fieldInfo } = props;
    if (layer.type === "imagery" || layer.type === "imagery-tile") {
        throw new Error("could not get statistics for ImageryLayer/ImageryTileLayer");
    }
    if (!fieldInfo ||
        fieldInfo.layerField.type === "oid" ||
        fieldInfo.layerField.type === "guid" ||
        fieldInfo.layerField.type === "global-id") {
        const count = await getFeatureCount(props);
        return Promise.resolve({ totalCount: count, nullcount: 0 });
    }
    try {
        const [summaryStatistics] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/smartMapping/statistics/summaryStatistics"]);
        const result = await summaryStatistics({
            layer,
            view,
            field: fieldName
        });
        if (!isDefined(result.count)) {
            // statistics is unusable
            throw new Error("could not get statistics");
        }
        // if we hit maxRecordCount other stats values are probably not correct either
        const hitMaxRecordCount = "sourceJSON" in layer && layer.sourceJSON.maxRecordCount === result.count;
        // count only contains features with a value (!= null)
        if (isDefined(result.nullcount) && !hitMaxRecordCount) {
            // we can add the feature count without null and the count of nulls
            const stats = Object.assign(Object.assign({}, result), { totalCount: result.count + result.nullcount });
            return stats;
        }
        else {
            // we want the total feature count
            // happens e.g. for SceneLayers with older stats cache
            const count = await getFeatureCount(props);
            const stats = Object.assign(Object.assign({}, result), { totalCount: count });
            return stats;
        }
    }
    catch (error) {
        throw new Error("could not get statistics");
    }
}
/**
 * Returns unique values
 * @param props - properties containing layer and fieldName
 */
async function getUniqueValues(props) {
    const { layer, view, fieldName } = props;
    if (layer.type === "imagery" || layer.type === "imagery-tile") {
        throw new Error("could not get unique values for ImageryLayer/ImageryTileLayer");
    }
    if (layer.type === "feature" && !layer.url) {
        layer.outFields = ["*"];
    }
    const [uniqueValues] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/smartMapping/statistics/uniqueValues"]);
    try {
        const result = await uniqueValues({
            layer,
            view,
            field: fieldName
        });
        return result;
    }
    catch (error) {
        throw new Error("could not get unique values");
    }
}
function _getSimpleFieldType(featureFilterField) {
    switch (featureFilterField.layerField.type) {
        case "string":
            featureFilterField.simpleFieldType = simpleFieldTypes.STRING;
            break;
        case "date":
            featureFilterField.simpleFieldType = simpleFieldTypes.DATE;
            break;
        case "timestamp-offset":
            featureFilterField.simpleFieldType = simpleFieldTypes.TIMESTAMP_OFFSET;
            break;
        case "date-only":
            featureFilterField.simpleFieldType = simpleFieldTypes.DATE_ONLY;
            break;
        case "time-only":
            featureFilterField.simpleFieldType = simpleFieldTypes.TIME_ONLY;
            break;
        case "oid":
            featureFilterField.simpleFieldType = simpleFieldTypes.OID;
            break;
        case "guid":
        case "global-id":
            featureFilterField.simpleFieldType = simpleFieldTypes.GUID;
            break;
        case "small-integer":
        case "big-integer":
        case "integer":
        case "single":
        case "double":
        case "long":
            featureFilterField.simpleFieldType = simpleFieldTypes.NUMBER;
            break;
    }
}
function getCodedValues(fieldName, props) {
    const { layer, modules } = props;
    if (layer.type !== "feature") {
        return;
    }
    const typeIdField = layer.typeIdField;
    const types = layer.types;
    let fieldDomains;
    const field = layer.fields.find((field) => field.name === fieldName);
    const fieldDomain = field.domain;
    if (typeIdField && types) {
        // layer has types
        if (typeIdField === fieldName) {
            // this is the field with the types
            fieldDomains = types.map((type) => {
                // fake coded Values
                return {
                    code: type.id,
                    name: type.name
                };
            });
        }
        else {
            // field does not have types; look farther inside the types
            fieldDomains = [];
            types.forEach((type) => {
                var _a, _b;
                if (!type.domains || !type.domains[fieldName] || type.domains[fieldName].type === "inherited") {
                    const domain = fieldDomain;
                    if (domain === null || domain === void 0 ? void 0 : domain.codedValues) {
                        domain.codedValues.forEach(async (codedValue) => {
                            let found = false;
                            fieldDomains.forEach((codedVal) => {
                                if (codedVal.code === codedValue.code) {
                                    found = true;
                                    if (`, ${codedVal.name},`.indexOf(`, ${codedValue.name},`) === -1) {
                                        codedVal.name += `, ${codedValue.name}`;
                                    }
                                }
                            });
                            if (!found) {
                                fieldDomains.push(modules.esriLang.clone(codedValue));
                            }
                        });
                    }
                }
                else if ((_b = (_a = type.domains) === null || _a === void 0 ? void 0 : _a[fieldName]) === null || _b === void 0 ? void 0 : _b.codedValues) {
                    type.domains[fieldName].codedValues.forEach(async (codedValue) => {
                        let found = false;
                        fieldDomains.forEach((codedVal) => {
                            if (codedVal.code === codedValue.code) {
                                found = true;
                                if (`, ${codedVal.name},`.indexOf(`, ${codedValue.name},`) === -1) {
                                    codedVal.name += `, ${codedValue.name}`;
                                }
                            }
                        });
                        if (!found) {
                            fieldDomains.push(modules.esriLang.clone(codedValue));
                        }
                    });
                }
            });
        }
        if (!(fieldDomains === null || fieldDomains === void 0 ? void 0 : fieldDomains.length) && (fieldDomain === null || fieldDomain === void 0 ? void 0 : fieldDomain.codedValues)) {
            fieldDomains = modules.esriLang.clone(fieldDomain.codedValues);
        }
    }
    else if (fieldDomain === null || fieldDomain === void 0 ? void 0 : fieldDomain.codedValues) {
        // domains directly on the layer field
        fieldDomains = field.domain.codedValues;
    }
    return (fieldDomains === null || fieldDomains === void 0 ? void 0 : fieldDomains.length) ? fieldDomains : null;
}

/**
 * Returns up to 5 features from the layer to get sample data
 * @param props - properties containing layer and view
 */
async function getOneFeature(props) {
    var _a, _b;
    const { view, layer } = props;
    if (layer.type === "imagery" || layer.type === "imagery-tile") {
        throw new Error("could not get feature");
    }
    if ((layer.type === "feature" && !layer.url) || layer.type === "wfs") {
        // feature collection or wfs
        const query = layer.createQuery();
        query.start = 0;
        query.num = 5;
        query.outFields = ["*"];
        const result = await layer.queryFeatures(query);
        if ((_a = result.features) === null || _a === void 0 ? void 0 : _a.length) {
            return result;
        }
        else {
            throw new Error("could not get feature");
        }
    }
    else {
        // service
        if (!view) {
            // get feature from service directly
            return _queryOneFeature(props);
        }
        const layerView = (await view.whenLayerView(layer));
        const hasAllFields = layerView.availableFields.length === layer.fields.length;
        if (hasAllFields || (["stream", "ogc-feature"].indexOf(layer.type) > -1 && layerView.availableFields.length > 0)) {
            // features on client have all fields
            // or we can't make a server query, so we take what we can get
            const query = layer.createQuery();
            query.start = 0;
            query.num = 5;
            query.outFields = ["*"];
            const result = await layerView.queryFeatures(query);
            if ((_b = result.features) === null || _b === void 0 ? void 0 : _b.length) {
                // client side features
                return result;
            }
            else {
                // get feature from service
                return _queryOneFeature(props);
            }
        }
        else {
            // get feature from service
            return _queryOneFeature(props);
        }
    }
}
async function _queryOneFeature(props) {
    const { layer } = props;
    if (["imagery", "imagery-tile", "stream", "ogc-feature"].indexOf(layer.type) > -1) {
        throw new Error("cannot get feature from service");
    }
    const [Query] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/rest/support/Query"]);
    const query = new Query({
        where: "1=1",
        outFields: ["*"],
        returnGeometry: false
    });
    return layer.queryFeatures(query);
}

const arcgisFieldInfoCss = ":host{height:100%}.container{padding:6px;background-color:white}.title{font-weight:bold;padding:5px 0}.missing{color:#a9a9a9}.data{color:#a9a9a9}.count{white-space:nowrap}.section{padding:6px 0}.statistics-row{border-top:1px solid #e0e0e0;padding:6px 0;display:flex;justify-content:space-between}.statistics-row-top-values{border-top:1px solid #e0e0e0;padding:20px 0 6px 0;display:flex;justify-content:space-between}";

const ArcgisFieldInfo = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisFieldInfoComplete = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisFieldInfoComplete", 7);
        this.view = undefined;
        this.layer = undefined;
        this.fieldName = undefined;
        this.hideStatistics = false;
        this.oneFeatureResponse = undefined;
        this.oneFeatureResponseStatus = status.MISSING;
        this.statistics = undefined;
        this.statisticsStatus = status.MISSING;
        this.uniqueValues = undefined;
        this.uniqueValuesStatus = status.MISSING;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        const [strings, currentLanguage, currentLanguageIntl] = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
        this.strings = strings;
        this.locale = currentLanguage;
        this.localIntl = currentLanguageIntl;
        const [esriLang, intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__.l)([
            "esri/core/lang",
            "esri/intl"
        ]);
        const { view, layer, fieldName, hideStatistics } = this;
        let sublayerFL;
        if (layer.declaredClass === "esri.layers.support.Sublayer") {
            // need to create a FeatureLayer
            const sublayer = layer;
            const [reactiveUtils] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/core/reactiveUtils"]);
            view && (await reactiveUtils.whenOnce(() => !view.updating));
            sublayerFL = await sublayer.createFeatureLayer();
            await sublayerFL.load();
        }
        this.props = {
            view,
            layer: sublayerFL || layer,
            fieldName,
            hideStatistics,
            modules: { esriLang, intl }
        };
        // required for initial load
        this.props.fieldInfo = getFieldInfo(this.props);
    }
    async componentDidLoad() {
        var _a;
        // once component is visible make other calls
        const { props, hideStatistics } = this;
        const { layer, modules } = props;
        modules.intl.setLocale(this.localIntl);
        // modules.intl.setLocale(this.locale) not returning the correct formatting for e.g. it-ch
        // we don't know if the SceneLayer has an associated FL
        // don't prompt for a login if it's not accessible
        if (layer.type === "scene") {
            const [esriConfig] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__.l)(["esri/config"]);
            esriConfig.request.interceptors.push({
                urls: getQueryURL(layer) + "/" + layer.layerId,
                before: function (params) {
                    params.requestOptions.authMode = "no-prompt";
                }
            });
        }
        this.oneFeatureResponseStatus = status.IN_PROGRESS;
        try {
            const result = await getOneFeature(this.props);
            this.oneFeatureResponse = result;
            this.oneFeatureResponseStatus = status.SUCCESS;
        }
        catch (error) {
            this.oneFeatureResponseStatus = status.FAILED;
        }
        if (layer.type === "stream") {
            this.uniqueValuesStatus = status.FAILED;
            this.statisticsStatus = status.FAILED;
            return;
        }
        if (hideStatistics) {
            this.uniqueValuesStatus = status.FAILED;
        }
        else {
            this.uniqueValuesStatus = status.IN_PROGRESS;
            try {
                const uniqueValues = await getUniqueValues(this.props);
                this.uniqueValues = uniqueValues;
                if ((_a = uniqueValues === null || uniqueValues === void 0 ? void 0 : uniqueValues.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a.length) {
                    this.uniqueValuesStatus = status.SUCCESS;
                }
                else {
                    this.uniqueValuesStatus = status.FAILED;
                }
            }
            catch (error) {
                this.uniqueValuesStatus = status.FAILED;
            }
        }
        if (hideStatistics) {
            this.statisticsStatus = status.FAILED;
        }
        else {
            this.statisticsStatus = status.IN_PROGRESS;
            try {
                const statistics = await getStatistics(this.props);
                if (!isDefined(statistics.totalCount) &&
                    isDefined(statistics.count) &&
                    this.uniqueValuesStatus === status.SUCCESS) {
                    // take null values count from unique values and add with non-null count from statistics
                    const infos = this.uniqueValues.uniqueValueInfos;
                    for (let i = 0; i < infos.length; i++) {
                        const info = infos[i];
                        if (info.value === null) {
                            statistics.totalCount = info.count + statistics.count;
                            break;
                        }
                    }
                    if (!isDefined(statistics.totalCount)) {
                        // no null values
                        statistics.totalCount = statistics.count;
                    }
                }
                this.statistics = statistics;
                this.statisticsStatus = status.SUCCESS;
            }
            catch (error) {
                this.statisticsStatus = status.FAILED;
            }
        }
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { props } = this;
        const { fieldInfo } = props;
        if (!fieldInfo) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.container }, this.renderFieldType(), this.renderFieldAlias(), this.renderFieldDescription(), this.renderFieldValueType(), this.renderFieldSampleValue(), this.renderFieldFormat(), this.renderFieldStatistics())));
    }
    renderFieldType() {
        const { strings, props } = this;
        const { fieldInfo } = props;
        const fieldType = this._getFieldTypeLabel(fieldInfo.layerField.type);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldType), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, fieldType)));
    }
    renderFieldAlias() {
        const { strings, props } = this;
        const { fieldInfo } = props;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldAlias), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, fieldInfo.label)));
    }
    renderFieldDescription() {
        const { strings, props } = this;
        const { layer } = props;
        if (layer.type !== "feature") {
            return null;
        }
        const { fieldInfo } = props;
        const description = fieldInfo.layerField.description;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldDescription), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                [CSS.missing]: !description
            } }, description || strings.fieldDescriptionNotSet)));
    }
    renderFieldValueType() {
        const { strings, props } = this;
        const { layer } = props;
        if (layer.type !== "feature") {
            return null;
        }
        const { fieldInfo } = props;
        const fieldValueType = this._getFieldValueTypeCamelCase(fieldInfo);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldValueType), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: !fieldValueType ? CSS.missing : null }, fieldValueType ? strings.fieldValueTypes[fieldValueType] : strings.fieldValueTypeNotSet)));
    }
    renderFieldSampleValue() {
        var _a, _b, _c, _d, _e;
        const { oneFeatureResponse, oneFeatureResponseStatus, statisticsStatus, statistics, uniqueValuesStatus, uniqueValues, strings, props } = this;
        const { layer, fieldName, fieldInfo } = props;
        const { statistics: statStrings } = strings;
        let value;
        if (["imagery", "imagery-tile"].indexOf(layer.type) > -1) {
            return;
        }
        if (layer.type !== "stream" &&
            [simpleFieldTypes.STRING, simpleFieldTypes.OID, simpleFieldTypes.GUID].indexOf(this._getStatisticsType(fieldInfo)) > -1 &&
            uniqueValuesStatus !== status.FAILED) {
            // we show top values
            return null;
        }
        if (oneFeatureResponseStatus === status.SUCCESS) {
            // find first valid value entry
            oneFeatureResponse.features.forEach((feature) => {
                if (value === undefined || (value === null && feature.attributes[fieldName] !== null)) {
                    value = feature.attributes[fieldName];
                }
            });
        }
        else if (statisticsStatus === status.SUCCESS) {
            // use statistics min value
            value = statistics.min;
        }
        else if (uniqueValuesStatus === status.SUCCESS) {
            // use a non-null value
            value =
                ((_b = (_a = uniqueValues.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.value) || ((_d = (_c = uniqueValues.uniqueValueInfos) === null || _c === void 0 ? void 0 : _c[1]) === null || _d === void 0 ? void 0 : _d.value);
        }
        const codedValues = fieldInfo.codedValues;
        if (isDefined(value)) {
            if (codedValues) {
                value = ((_e = codedValues.find((codedValue) => value === codedValue.code)) === null || _e === void 0 ? void 0 : _e.name) || value;
            }
            else {
                value = this._getDisplayString(value);
            }
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldSampleValue), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: (oneFeatureResponseStatus === status.FAILED &&
                statisticsStatus === status.FAILED &&
                uniqueValuesStatus === status.FAILED) ||
                !isDefined(value)
                ? CSS.missing
                : null }, oneFeatureResponseStatus === status.SUCCESS ||
            statisticsStatus === status.SUCCESS ||
            uniqueValuesStatus === status.SUCCESS
            ? !isDefined(value)
                ? statStrings.allNulls
                : `${value}`
            : oneFeatureResponseStatus === status.FAILED &&
                statisticsStatus === status.FAILED &&
                uniqueValuesStatus === status.FAILED
                ? strings.fieldSampleNotAvailable
                : strings.fieldSampleRetrieving)));
    }
    renderFieldFormat() {
        var _a, _b;
        const { strings, props } = this;
        const { fieldName, fieldInfo, layer } = props;
        if (["single", "double", "long"].indexOf(fieldInfo.layerField.type) === -1) {
            return null;
        }
        const popupTemplate = layer.popupTemplate;
        if (popupTemplate === null || popupTemplate === void 0 ? void 0 : popupTemplate.fieldInfos) {
            const popFieldInfos = (_a = popupTemplate.fieldInfos) === null || _a === void 0 ? void 0 : _a.filter((fieldInfo) => fieldInfo.fieldName === fieldName);
            if (popFieldInfos === null || popFieldInfos === void 0 ? void 0 : popFieldInfos.length) {
                const popFieldInfo = popFieldInfos[0];
                if (isDefined((_b = popFieldInfo === null || popFieldInfo === void 0 ? void 0 : popFieldInfo.format) === null || _b === void 0 ? void 0 : _b.places)) {
                    const num = popFieldInfo.format.places;
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldDecimalPlaces), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, strings.fieldNumDecimalPlaces.replace("${number}", num.toString()))));
                }
            }
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldDecimalPlaces), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.missing }, strings.fieldDecimalPlacesNotAvailable)));
    }
    renderFieldStatistics() {
        const { statisticsStatus, uniqueValuesStatus, hideStatistics, strings, props } = this;
        const { layer, fieldInfo } = props;
        if (hideStatistics) {
            this.arcgisFieldInfoComplete.emit();
            return null;
        }
        if (["stream", "imagery", "imagery-tile"].indexOf(layer.type) > -1 ||
            ["long"].indexOf(fieldInfo.layerField.type) > -1) {
            // can't get statistics
            this.arcgisFieldInfoComplete.emit();
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.section }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.title }, strings.fieldStatistics), !statisticsStatus ||
            statisticsStatus === status.MISSING ||
            statisticsStatus === status.IN_PROGRESS ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "field-info-statistics-content", class: CSS.missing }, strings.fieldStatisticsRetrieving)) : statisticsStatus === status.FAILED && uniqueValuesStatus !== status.SUCCESS ? (this.renderNoStatistics()) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "field-info-statistics-content", ref: () => this.arcgisFieldInfoComplete.emit() }, this.renderStatistics()))));
    }
    renderNoStatistics() {
        const { strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: "field-info-statistics-content", ref: () => this.arcgisFieldInfoComplete.emit(), class: CSS.missing }, strings.fieldStatisticsNotAvailable));
    }
    renderStatistics() {
        const { props } = this;
        const { fieldInfo } = props;
        switch (this._getStatisticsType(fieldInfo)) {
            case simpleFieldTypes.NUMBER:
                return this.renderNumberStatistics();
            case simpleFieldTypes.STRING:
            case simpleFieldTypes.OID:
            case simpleFieldTypes.GUID:
                return this.renderStringStatistics();
            case simpleFieldTypes.DATE:
            case simpleFieldTypes.DATE_ONLY:
            case simpleFieldTypes.TIME_ONLY:
            case simpleFieldTypes.TIMESTAMP_OFFSET:
                return this.renderDateStatistics();
            default:
                return null;
        }
    }
    renderNumberStatistics() {
        const { statistics, strings } = this;
        if (!statistics) {
            return this.renderNoStatistics();
        }
        const { statistics: statStrings } = strings;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.numberOfValues), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics.totalCount))), isDefined(statistics.sum) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.sumOfValues), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics.sum)))) : null, isDefined(statistics.min) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.minimum), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics.min)))) : null, isDefined(statistics.max) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.maximum), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics.max)))) : null, isDefined(statistics.avg) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.average), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics.avg)))) : null, isDefined(statistics.stddev) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.standardDeviation), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics.stddev)))) : null, this.renderNullValues()));
    }
    renderStringStatistics() {
        const { statistics, uniqueValuesStatus, strings } = this;
        const { statistics: statStrings } = strings;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.numberOfValues), uniqueValuesStatus !== status.SUCCESS ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.missing }, "--")) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics === null || statistics === void 0 ? void 0 : statistics.totalCount)))), this.renderNullValues(), this.renderTopValues()));
    }
    renderDateStatistics() {
        // TODO UTC offset
        const { statistics, view, props, strings } = this;
        const { fieldInfo } = props;
        if (!statistics) {
            return this.renderNoStatistics();
        }
        const { statistics: statStrings } = strings;
        const dateRange = statistics.max - statistics.min;
        const years = Math.floor(dateRange / 31536000000);
        let months = Math.floor((dateRange - years * 31536000000) / 2628000000);
        let days = Math.ceil((dateRange - months * 2628000000) / 86400000);
        if (days >= 30) {
            months += 1;
            days = 0;
        }
        let timeSpan = years === 1
            ? statStrings.timeSpanOptions.year
            : years > 1
                ? statStrings.timeSpanOptions.years.replace("${years}", years.toString())
                : "";
        timeSpan += years > 0 && (months > 0 || days > 0) ? ", " : "";
        timeSpan +=
            months === 1
                ? statStrings.timeSpanOptions.month
                : months > 1
                    ? statStrings.timeSpanOptions.months.replace("${months}", months.toString())
                    : "";
        timeSpan += months > 0 && days > 0 ? ", " : "";
        timeSpan +=
            days === 1
                ? statStrings.timeSpanOptions.day
                : days > 1
                    ? statStrings.timeSpanOptions.days.replace("${days}", days.toString())
                    : "";
        const showStats = fieldInfo.simpleFieldType !== simpleFieldTypes.TIMESTAMP_OFFSET ||
            !view ||
            view.timeZone !== "unknown";
        const isTimeOnly = fieldInfo.simpleFieldType === simpleFieldTypes.TIME_ONLY;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.numberOfValues), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, this._printNumValue(statistics === null || statistics === void 0 ? void 0 : statistics.totalCount))), showStats && isDefined(statistics.min) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, isTimeOnly ? statStrings.minimumTime : statStrings.minimumDate), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, `${this._getDisplayString(statistics.min)}`))) : null, showStats && isDefined(statistics.max) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, isTimeOnly ? statStrings.maximumTime : statStrings.maximumDate), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, `${this._getDisplayString(statistics.max)}`))) : null, showStats && isDefined(statistics.avg) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, isTimeOnly ? statStrings.averageTime : statStrings.averageDate), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, `${this._getDisplayString(statistics.avg)}`))) : null, showStats &&
            !isTimeOnly &&
            isDefined(statistics.min) &&
            isDefined(statistics.max) &&
            dateRange > 0 ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.timespan), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, timeSpan))) : null, this.renderNullValues()));
    }
    renderTopValues() {
        var _a;
        const { uniqueValues, uniqueValuesStatus, strings, props } = this;
        const { fieldInfo } = props;
        const { statistics: statStrings } = strings;
        if ((_a = uniqueValues === null || uniqueValues === void 0 ? void 0 : uniqueValues.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a.length) {
            const infos = uniqueValues.uniqueValueInfos;
            infos.sort((a, b) => (a.count < b.count ? 1 : a.count > b.count ? -1 : 0));
            const codedValues = fieldInfo.codedValues;
            const values = infos
                .filter((info) => info.value !== null)
                .filter((info, idx) => info && idx < 10)
                .map((info) => {
                let value = info.value;
                if (codedValues) {
                    codedValues.forEach((codeValue) => {
                        if (value === codeValue.code) {
                            value = codeValue.name;
                        }
                    });
                }
                else {
                    value = this._getDisplayString(value);
                }
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, `${value}`), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `${CSS.data} ${CSS.count}` }, this._printNumValue(info.count))));
            });
            if (!values.length) {
                return null;
            }
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRowTopValues }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, infos.length > 10 ? statStrings.topTenValues : statStrings.topValues), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.count)), values));
        }
        else {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRowTopValues }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.topValues), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.count)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.missing }, uniqueValuesStatus === status.FAILED
                ? strings.fieldUniqueValuesNotAvailable
                : strings.fieldSampleRetrieving))));
        }
    }
    renderNullValues() {
        const { statistics, uniqueValues, strings } = this;
        const { statistics: statStrings } = strings;
        let count = statistics === null || statistics === void 0 ? void 0 : statistics.nullcount;
        if (!isDefined(count) && uniqueValues) {
            const infos = uniqueValues.uniqueValueInfos;
            for (let i = 0; i < infos.length; i++) {
                const info = infos[i];
                if (info.value === null) {
                    count = info.count;
                    break;
                }
            }
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.statisticsRow }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, statStrings.numberOfNulls), !isDefined(count) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.missing }, "--")) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.data }, `${new Number(count).toLocaleString()}`))));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    _getFieldTypeLabel(fieldType) {
        const { strings } = this;
        const fieldTypes = strings.fieldTypes;
        switch (fieldType) {
            case "small-integer":
                return fieldTypes.smallInteger;
            case "big-integer":
                return fieldTypes.bigInteger;
            case "integer":
                return fieldTypes.integer;
            case "single":
                return fieldTypes.single;
            case "double":
                return fieldTypes.double;
            case "long":
                return fieldTypes.long;
            case "string":
                return fieldTypes.string;
            case "date":
                return fieldTypes.date;
            case "date-only":
                return fieldTypes.dateOnly;
            case "time-only":
                return fieldTypes.timeOnly;
            case "timestamp-offset":
                return fieldTypes.timestampOffset;
            case "oid":
                return fieldTypes.oid;
            case "guid":
                return fieldTypes.guid;
            case "global-id":
                return fieldTypes.globalId;
            default:
                return fieldTypes.string;
        }
    }
    _getStatisticsType(fieldInfo) {
        // "count-or-amount","percentage-or-ratio","measurement","unique-identifier","coordinate","binary"
        // "name-or-title","type-or-category","description","location-or-place-name","ordered-or-ranked","date-and-time"
        switch (fieldInfo.layerField.type) {
            case "small-integer":
            case "big-integer":
            case "integer":
            case "single":
            case "double": {
                if (fieldInfo.codedValues) {
                    return simpleFieldTypes.STRING;
                }
                switch (fieldInfo.layerField.valueType) {
                    case "name-or-title":
                    case "type-or-category":
                    case "description":
                    case "location-or-place-name":
                    case "ordered-or-ranked":
                    case "binary":
                        //case "date-and-time":
                        return simpleFieldTypes.STRING;
                    default:
                        return simpleFieldTypes.NUMBER;
                }
            }
            case "string":
                return simpleFieldTypes.STRING;
            case "date":
                return simpleFieldTypes.DATE;
            case "timestamp-offset":
                return simpleFieldTypes.TIMESTAMP_OFFSET;
            case "date-only":
                return simpleFieldTypes.DATE_ONLY;
            case "time-only":
                return simpleFieldTypes.TIME_ONLY;
            default:
                return simpleFieldTypes.STRING;
        }
    }
    _getFieldValueTypeCamelCase(field) {
        switch (field.layerField.valueType) {
            case "count-or-amount":
                return "countOrAmount";
            case "percentage-or-ratio":
                return "percentageOrRatio";
            case "unique-identifier":
                return "uniqueIdentifier";
            case "name-or-title":
                return "nameOrTitle";
            case "type-or-category":
                return "typeOrCategory";
            case "location-or-place-name":
                return "locationOrPlaceName";
            case "ordered-or-ranked":
                return "orderedOrRanked";
            case "date-and-time":
                return "dateAndTime";
            default:
                return field.layerField.valueType;
        }
    }
    _getDisplayString(value) {
        const { props } = this;
        const { fieldInfo } = props;
        switch (fieldInfo.simpleFieldType) {
            case simpleFieldTypes.DATE:
                return this._getDateString(value);
            case simpleFieldTypes.TIMESTAMP_OFFSET:
                return this._getTimestampOffsetString(value);
            case simpleFieldTypes.DATE_ONLY:
                return this._getDateOnlyString(value);
            case simpleFieldTypes.TIME_ONLY:
                return this._getTimeOnlyString(value);
            case simpleFieldTypes.NUMBER:
                return this._getNumberString(value);
            case simpleFieldTypes.GUID:
                return this._getGuidString(value);
            default:
                // string, oid, global-id
                return `${value}`;
        }
    }
    _getDateString(value) {
        const { modules, view } = this.props;
        if (view && view.timeZone === "unknown") {
            return modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions("short-date-short-time")), { timeZone: "utc", timeZoneName: "shortOffset" }));
        }
        else {
            // known issues with formatting it-CH
            return modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions("short-date-short-time")), { timeZone: (view === null || view === void 0 ? void 0 : view.timeZone) || "system" }));
        }
    }
    _getTimestampOffsetString(value) {
        /*
        const timestamp = "2023-03-19T16:00:00.123-01:00";
        console.log("timestamp", timestamp);
        console.log(
          "local Time",
          intl.formatTimestamp(timestamp, intl.convertDateFormatToIntlOptions("short-date-short-time"))
        );
        console.log(
          "mapView Time (except unknown)",
          intl.formatTimestamp(timestamp, {
            ...intl.convertDateFormatToIntlOptions("short-date-short-time"),
            timeZone: view.timeZone,
          })
        );
        console.log(
          "UTC Time (mapView time unknown)",
          intl.formatTimestamp(timestamp, {
            ...intl.convertDateFormatToIntlOptions("short-date-short-time"),
            timeZone: "utc",
            timeZoneName: "shortOffset"
          })
        );
        console.log(
          "Raw",
          intl.formatTimestamp(timestamp, {
            ...intl.convertDateFormatToIntlOptions("short-date-short-time"),
            timeZoneName: "shortOffset"
          })
        );
        */
        const { modules, view } = this.props;
        if (typeof value === "string") {
            // raw value from layer
            if (view && view.timeZone === "unknown") {
                return modules.intl.formatTimestamp(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions("short-date-short-time")), { timeZone: "utc", timeZoneName: "shortOffset" }));
            }
            else {
                return modules.intl.formatTimestamp(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions("short-date-short-time")), { timeZone: (view === null || view === void 0 ? void 0 : view.timeZone) || "system" }));
            }
        }
        else {
            // e.g. UNIX timestamp from statistics call
            return this._getDateString(value);
        }
    }
    _getDateOnlyString(value) {
        const { props } = this;
        const { modules } = props;
        return modules.intl.formatDateOnly(value, modules.intl.convertDateFormatToIntlOptions("short-date"));
    }
    _getTimeOnlyString(value) {
        const { props } = this;
        const { modules } = props;
        if (typeof value === "string") {
            return modules.intl.formatTimeOnly(value, modules.intl.convertDateFormatToIntlOptions("short-date-long-time"));
        }
        else {
            // UNIX timestamp
            return modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions("long-time")), { timeZone: "utc" }));
        }
    }
    _getGuidString(value) {
        return value.startsWith("{") ? value : `{${value}}`;
    }
    _getNumberString(value) {
        return this.props.modules.intl.formatNumber(value);
    }
    _printNumValue(value) {
        return isDefined(value) ? this._getNumberString(Math.round(value * 100) / 100) : `--`;
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisFieldInfo.style = arcgisFieldInfoCss;



//# sourceMappingURL=arcgis-field-info.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,