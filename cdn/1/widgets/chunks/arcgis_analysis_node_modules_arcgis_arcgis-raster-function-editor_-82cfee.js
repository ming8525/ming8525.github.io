"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-82cfee"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.sr-d6f475b9.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.sr-d6f475b9.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "OK";
const cancel = "Otkaži";
const enterURL = "Unesite URL adresu servisa slike";
const serviceURL = "URL servisa";
const selectRaster = "Izaberite raster";
const failedToLoadLayer = "Učitavanje sloja nije uspelo";
const loadingLayer = "Učitavanje sloja";
const selectFeature = "Selektujte sloj geoobjekata";
const enterFURL = "Unesite URL adresu servisa geoobjekata";
const addRaster = "Dodaj promenljivu rastera";
const addScalar = "Dodaj konstantu";
const raster = "Raster";
const scalar = "Skalar";
const defaultModelName = "Šablon rasterske funkcije";
const general = "Opšte";
const parameters = "Parametri";
const variables = "Promenljive";
const name = "Naziv";
const description = "Opis";
const parameter = "Parametar";
const isPublic = "IsPublic";
const isDataset = "IsDataset";
const unknownPixelType = "Nepoznato";
const outputPixelType = "Tip izlaznih piksela";
const u8PixelType = "8-bitni nepotpisani";
const s8PixelType = "8-bitni potpisani";
const u16PixelType = "16-bitni nepotpisani";
const s16PixelType = "16-bitni potpisani";
const u32PixelType = "32-bitni nepotpisani";
const s32PixelType = "32-bitni potpisani";
const f32PixelType = "32-bitni promenljivi";
const f64PixelType = "64-bitni dvostruki";
const properties = "Svojstva";
const multidimensionalRules = "Višedimenziona pravila";
const matchVariables = "Poklapanje promeljivih";
const unionDimensions = "Union dimenzije";
const rasterFunctionEditor = {
	invalidRFTMessage: "Šablon rasterske funkcije je nevažeći.",
	rfxArgsEditor: {
		outputRaster: "OutputRaster",
		raster: "Raster",
		unsupportedDataTypeWarning: "Sledeći argumenti nisu prikazani, jer nisu trenutno podržani.",
		unsupportedFunction: "Sadrži trenutno nepodržane rasterske funkcije."
	},
	rfxRasterInput: {
		selectLayer: "Izaberite sloj",
		browseLayers: "Pretraži slojeve",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Metod",
		bandLabel: "Opseg",
		combinationLabel: "Kombinacija"
	},
	rfxRemapGrid: {
		minimum: "Minimum",
		maximum: "Maksimum",
		output: "Izlaz",
		noData: "NoData",
		remapValuesLabel: "Ponovo mapiraj vrednosti"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Rasterske promenljive",
		deleteSelectedVars: "Ukloni izabrane promenljive"
	},
	rfxClippingGeometry: {
		clippingLayer: "Isecanje sloja",
		clippingRaster: "Raster isecanja",
		clippingGeometry: "Geometrija isecanja",
		customExtent: "Prilagođeni obuhvat",
		outputExtent: "Obuhvat izlaza",
		currentExtent: "Trenutni obuhvat mape",
		drawLabel: "Nacrtaj"
	},
	rfxCustomExtent: {
		top: "Vrh",
		right: "Desno",
		bottom: "Dno",
		left: "Levo"
	},
	rfxRasterArrayEditor: {
		moveUp: "Pomeri se nagore",
		moveDown: "Pomeri se na dole",
		remove: "Ukloni"
	},
	rfxStatisticsGrid: {
		stdDev: "Std. Odstupanje",
		min: "Minimum",
		max: "Maksimum",
		mean: "Sredina"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Tabela težinskog preklapanja",
		id: "ID",
		layer: "Sloj",
		field: "Polje",
		weight: "Debljina",
		value: "Vrednost",
		selectLayer: "Izaberite sloj"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Tabela težinskog preklapanja",
		id: "ID",
		layer: "Sloj",
		field: "Polje",
		influence: "Uticaj",
		sumOfInfluence: "Skup uticaja",
		value: "Vrednost",
		remapTable: "Tabela ponovnog mapiranja",
		scale: "Razmera",
		scales: "Vaga",
		selectRaster: "Izaberite raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Pretraži sloj geoobjekata",
		addPointLayer: "Pretraži sloj tačkasti geoobjekata"
	},
	rfxFieldSelect: {
		value: "Vrednost",
		count: "Brojač"
	},
	rfxAttributeTable: {
		tableType: "Tip tabele",
		manual: "Ručno",
		external: "Eksterno",
		minVal: "Minimalna vrednost",
		maxVal: "Maksimalna vrednost",
		baseClassName: "Osnovno ime klase",
		colorScheme: "Šema boja",
		defaultClassName: "Oznaka_",
		generateTable: "Generiši tabelu",
		browseTable: "Pregled tabele",
		value: "Vrednost",
		classname: "ClassName",
		color: "Boja"
	},
	rfxFieldNumberSwitchable: {
		number: "Brojčano",
		field: "Polje",
		string: "Niska",
		linearUnit: "Linearna jedinica"
	},
	rfxPropertySet: {
		name: "Naziv",
		value: "Vrednost"
	},
	rfxConversionGrid: {
		size: "Veličina"
	},
	rfxTransposeBit: {
		bitPattern: "Obrazac bitova",
		outputBit: "Izlazni bit",
		inputBit: "Ulazni bit"
	},
	rfxSpatialReference: {
		placeHolder: "Preciziraj po ključnoj reči",
		coordinateSystem: "Koordinatni sistem",
		gcs: "Geografski koordinatni sistem",
		pcs: "Projektovani koordinatni sistem",
		vcs: "Vertikalni koordinatni sistem"
	}
};
const rfxLicenseInfo = "Ovaj šablon rasterske funkcije može da se koristi za obradu vaših snimaka korišćenjem ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Izračunava inverzni kosinus hiperbolički ćelija u rasteru.",
		aCosHDesc: "Funkcija izračunava inverzni kosinus hiperbolički piksela u rasteru.",
		aCosName: "ACos",
		aCosSnip: "Izračunava inverzni kosinus piksela u rasteru.",
		aCosDesc: "Ova rasterska funkcija izračunava inverzni kosinus ćelija u rasteru. U matematici, sve trigonometrijske funkcije imaju definisani opseg validnih ulaznih vrednosti, pod nazivom domen. Izlazne vrednosti svake funkcije takođe imaju definisani opseg. Za ovu alatku, domen je [-1, 1], a opseg je [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Izračunava inverzni sinus hiperbolički ćelija u rasteru.",
		aSinHDesc: "Funkcija izračunava inverzni sinus hiperbolički piksela u rasteru.",
		aSinName: "ASin",
		aSinSnip: "Izračunava inverzni sinus ćelija u rasteru.",
		aSinDesc: "Funkcija izračunava inverzni sinus piksela u rasteru.",
		aTan2Name: "ATan2",
		aTan2Snip: "Izračunava inverzni tangens (na osnovu x,y) ćelija u rasteru.",
		aTan2Desc: "Funkcija izračunava inverzni tangens (na osnovu x,y) piksela u rasteru.",
		aTanHName: "ATanH",
		aTanHSnip: "Izračunava inverzni tangens hiperbolički ćelija u rasteru.",
		aTanHDesc: "Funkcija izračunava inverzni tangens hiperbolički piksela u rasteru.",
		aTanName: "ATan",
		aTanSnip: "Izračunava inverzni tangens ćelija u rasteru.",
		aTanDesc: "Funkcija izračunava inverzni tangens piksela u rasteru.",
		absName: "Abs",
		absSnip: "Izračunava apsolutnu vrednost ćelija u rasteru.",
		absDesc: "Funkcija Abs izračunava apsolutnu vrednost piksela u rasteru.",
		reflectanceName: "Očigledna reflektansa",
		reflectanceSnip: "Konvertuje neobrađene snimke u vrednosti vrha atmosfere uzimajući u obzir karakteristike senzora, položaj sunca i vreme akvizicije.",
		reflectanceDesc: "Ova funkcija podešava vrednosti za digitalni broj (DN) za osvetljenost slike za neke satelitske senzore. Podešavanja su zasnovana na elevaciji sunca, datumu akvizicije i svojstvima senzora za podešavanje porasta i odstupanja za svaki opseg. Ova funkcija se koristi za podešavanje reflektanse ili osvetljenosti, vrednosti nekih satelitskih snimaka na osnovu postavki osvetljenja scene i porasta senzora. Snimci se prilagođavaju teoretski zajedničkom stanju osvetljenja, kako bi bilo manje varijacija između scena iz različitih datuma i različitih senzora. To može biti korisno za klasifikaciju snimaka, balansiranje boja i izradu mozaika. Ova funkcija može da se koristi samo sa određenim snimcima. Primenljivi senzori su Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 i Pleiades.<div><br/>Funkcija vrši dve korekcije. Prva je zasnovana na postavkama porasta. Originalne vrednosti osvetljenosti se ponovo kreiraju iz vrednosti snimka obrtanjem redosleda jednačina porasta. Druga korekcija ima veze sa razlikama u uglu i sunca i osvetljenosti. Originalne vrednosti osvetljenosti se prilagođavaju zajedničkom uslovu osvetljenja normalizovanjem scena snimljenih pod promenljivim uslovima osvetljenja. Uopšteno, do je tip podataka izlaznog snima isti kao tip podataka ulaznog snimka, izlazne vrednosti su manje od ulaznih vrednosti i skraćene su na važeći opseg podataka.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Izračunava statistiku argumenata uključujući Maks. argument, Min. argument, Srednji argument i Trajanje.",
		argStatisticsDesc: "Funkcija izračunava statistiku argumenata. Postoje četiri metode u funkciji ArgStatistics: ArgMax, ArgMin, ArgMedian i Duration.",
		arithmeticName: "Aritmetički",
		arithmeticSnip: "Obavlja aritmetičku operaciju između dva rastera ili rastera i skalara.",
		arithmeticDesc: "Funkcija Arithmetic obavlja aritmetičku operaciju između dva rastera ili rastera i skalara i obratno.",
		aspectSlopeName: "Gledište-nagib",
		aspectSlopeSnip: "Kreira raster koji istovremeno prikazuje gledište (smer) i nagib (strmost) neprekidne površi, kao što je predstavljeno u digitalnom modelu elevacije.",
		aspectSlopeDesc: "Funkcija Arithmetic Slope kreira sloj rastera koji istovremeno prikazuje aspekt i nagib površi. Gledište identifikuje smer nizbrdo sa najvećom stopom promene u vrednosti od svakog piksela do njemu susednih. Gledište može da se posmatra kao smer nagiba. Vrednosti izlaznog rastera će biti smer kompasa u odnosu na gledište, predstavljen nijansom (bojom). Nagib predstavlja brzinu promene elevacije za svaki piksel digitalnog modela elevacije (DEM). Nagib predstavlja strmost površi i simbolizovan je u tri klase koje su prikazane pomoću zasićenosti bolje (osvetljenost).<div><br/>Vrednosti piksela u izlaznom rasteru gledište-nagib odražavaju kombinaciju gledišta i nagiba. Pikseli sa vrednostima manjim od 20 se smatraju ravnim i prikazuju se sivom bojom. Vrednosti za gledište-nagib od 21 i veće će se prikazati sa promenljivim zasićenostima na sledeći način: 21 do 30 —Mala zasićenost nagiba, 31 do 40—Srednja zasićenost nagiba, 41 i veće—Velika zasićenost nagiba</div>",
		aspectName: "Gledište (ekspozicija)",
		aspectSnip: "Prikazuje u kom smeru je okrenut piksel, gde 0 odgovara severu, a uglovi se povećavaju u smeru kretanja kazaljke na satu do 360.",
		aspectDesc: "Funkcija Aspect identifikuje smer nizbrdo sa najvećom stopom promene u vrednosti od svake ćelije do njoj susednih. Gledište može da se posmatra kao smer nagiba. Vrednosti izlaznog rastera će biti smer kompasa u odnosu na gledište.<div><br/>Ulaz za ovu funkciju je ulazni raster. Funkcija Aspect se često primenjuje na digitalni model elevacije (DEM). Podrazumevano, gledište se prikazuje kao snimak u sivim tonovima. Možete da dodate funkciju Colormap da biste naveli određenu šemu boja ili da dozvolite osobi prikazivanje mozaika radi izmene simbologije njihovom sopstvenom šemom boja.</div>",
		tableName: "Atributna tabela",
		tableSnip: "Koristi tabelu za imenovanje i simbolizovanje vrednosti u skupu podataka. Kolone za tabelu su razdvojene zarezima: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "Funkcija Attribute Table vam omogućava da definišete atributnu tabelu radi simbolizovanja mozaičkog ili rasterskog skupa podataka sa jednim opsegom. <div><br/>Ovo je korisno kada želite da predstavite snimke koji su prošli klasifikaciju prema primeni zemljišta, kao što je šumovito zemljište, močvare, obradivo i urbano zemljište. Osim toga, ako vaša tabela sadrži polja sa imenom crvena, zelena i plava, vrednosti iz tih polja će se koristiti u vidu mape boja prilikom prikazivanja snimka.</div>",
		bandArithmeticName: "Aritmetika opsega",
		bandArithmeticSnip: "Izračunava indekse pomoću unapred definisanih formula i izraza koji je definisao korisnik.",
		bandArithmeticDesc: "Funkcija Band Arithmetic obavlja aritmetičku operaciju na opsezima rasterskog skupa podataka. Možete da odaberete unapred definisane algoritme ili možete da unesete svoju formulu od jedne linije. Podržani operatori su -,+,/,*, i unarni -.",
		thresholdName: "Binarna segmentacija poređenjem sa pragom",
		thresholdSnip: "Organizuje neprekidne podatke u prednjem planu i pozadini smanjivanjem kovarijanse između dve klase.",
		thresholdDesc: "Kada rasterski skup podataka ima dvorežimsku distribuciju, ova funkcija kreira novi raster koji deli podatke u dve posebne klase. Kreira klasu malih vrednosti prikazanu pomoću crnih piksela, kao i klasu velikih vrednosti prikazanu pomoću belih piksela.",
		bitwiseAndName: "Konjukcija na nivou bita",
		bitwiseAndSnip: "Obavlja operaciju Konjukcije na nivou bita na binarnim vrednostima dva ulazna rastera.",
		bitwiseAndDesc: "Konjukcija na nivou bita obavlja operaciju Konjukcije na nivou bita na binarnim vrednostima dva ulazna rastera",
		bitwiseLeftShiftName: "Levi pomak na nivou bita",
		bitwiseLeftShiftSnip: "Obavlja operaciju Levog pomaka na nivou bita na binarnim vrednostima dva ulazna rastera.",
		bitwiseLeftShiftDesc: "Levi pomak na nivou bita obavlja operaciju Levog pomaka na nivou bita na binarnim vrednostima dva ulazna rastera",
		bitwiseNotName: "Negacija na nivou bita",
		bitwiseNotSnip: "Obavlja (komplementarnu) operaciju Negacije na nivou bita na binarnim vrednostima dva ulazna rastera.",
		bitwiseNotDesc: "Funkcija obavlja (komplementarnu) operaciju Negacije na nivou bita na binarnoj vrednosti ulaznog rastera.",
		bitwiseOrName: "Disjunkcija na nivou bita",
		bitwiseOrSnip: "Obavlja operaciju Disjunkcije na nivou bita na binarnim vrednostima dva ulazna rastera.",
		bitwiseOrDesc: "Funkcija obavlja operaciju Disjunkcije na nivou bita na binarnim vrednostima dva ulazna rastera. ",
		bitwiseRightShiftName: "Desni pomak na nivou bita",
		bitwiseRightShiftSnip: "Obavlja operaciju Desnog pomaka na nivou bita na binarnim vrednostima dva ulazna rastera.",
		bitwiseRightShiftDesc: "Funkcija obavlja operaciju Desnog pomaka na nivou bita na binarnim vrednostima dva ulazna rastera.",
		bitwiseXorName: "Ekskluzivna disjunkcija na nivou bita",
		bitwiseXorSnip: "Obavlja operaciju Ekskluzivne disjunkcije na nivou bita na binarnim vrednostima dva ulazna rastera.",
		bitwiseXorDesc: "Funkcija obavlja operaciju Ekskluzivne disjunkcije na nivou bita na binarnim vrednostima dva ulazna rastera",
		booleanAndName: "Logička konjukcija",
		booleanAndSnip: "Obavlja operaciju Logičke konjukcije na vrednostima ćelije dva ulazna rastera. Ako su obe ulazne vrednosti tačne (različite od nule), izlazna vrednost je 1. Ako su jedan ili oba ulaza netačni (nula), izlaz je 0.",
		booleanAndDesc: "Funkcija obavlja operaciju Logičke konjukcije na vrednostima piksela dva ulaza. Ako su obe ulazne vrednosti tačne (različite od nule), izlazna vrednost je 1. Ako su jedna ili obe ulazne vrednosti netačne (nula), izlazna vrednost je 0. ",
		booleanNotName: "Logička negacija",
		booleanNotSnip: "Obavlja (komplementarnu) operaciju Logičke negacije na vrednostima ćelije ulaznog rastera. Ako su ulazne vrednosti tačne (različite od nule), izlazna vrednost je 0. Ako su ulazne vrednosti netačne (nula), izlaz je 1.",
		booleanNotDesc: "Funkcija obavlja (komplementarnu) operaciju Logičke negacije na vrednostima piksela ulaznog rastera. Ako su ulazne vrednosti tačne (različite od nule), izlazna vrednost je 0. Ako su ulazne vrednosti netačne (nula), izlazna vrednost je 1.",
		booleanOrName: "Logička disjunkcija",
		booleanOrSnip: "Obavlja operaciju Logičke disjunkcije na vrednostima ćelije dva ulazna rastera. Ako su jedna ili obe ulazne vrednosti tačne (različite od nule), izlazna vrednost je 1. Ako su obe ulazne vrednosti netačne (nula), izlaz je 0.",
		booleanOrDesc: "Funkcija obavlja operaciju Logičke disjunkcije na vrednostima ćelija dva ulazna rastera. Ako su jedna ili obe ulazne vrednosti tačne (različite od nule), izlazna vrednost je 1. Ako su obe ulazne vrednosti netačne (nula), izlazna vrednost je 0.",
		booleanXorName: "Logička ekskluzivna disjunkcija",
		booleanXorSnip: "Obavlja operaciju Logičke ekskluzivne disjunkcije vrednostima ćelije dva ulazna rastera. Ako je jedna ulazna vrednost tačna (različita od nule), a druga netačna (nula), izlaz je 1. Ako su obe ulazne vrednosti tačne ili su obe netačne, izlaz je 0.",
		booleanXorDesc: "Funkcija obavlja operaciju Logičke ekskluzivne disjunkcije na vrednostima ćelija dva ulazna rastera. Ako je jedna ulazna vrednost tačna (različita od nule), a druga vrednost je netačna (nula), izlazna vrednost je 1. Ako su obe ulazne vrednosti tačne ili su obe netačne, izlazna vrednost je 0.",
		bufferedRasterName: "Buffered",
		bufferedRasterSnip: "Smešta u zonu bliskosti blok(ove) piksela kojem/kojima je poslednje pristupljeno.",
		bufferedRasterDesc: "Funkcija Buffered se koristi za optimizaciju performansi složenih lanaca funkcija. Ona čuva izlazni rezultat u memoriji dela lanca funkcija koji dolazi pre nje. <div><br/>Umetnite ovu funkciju u uređivač funkcija tamo gde želite da sačuvate izlazni rezultat.</div>",
		rasterCalculatorName: "Kalkulator",
		rasterCalculatorSnip: "Izračunava raster iz rastera na osnovu matematičkog izraza.",
		rasterCalculatorDesc: "Funkcija Calculator vam omogućava da kreirate i pokrećete izraze i da ih uključujete u lance funkcija.",
		cellStatisticsName: "Ćelijska statistika",
		cellStatisticsSnip: "Izračunava statistiku po ćeliji iz više rastera. Statistike koje su na raspolaganju su većina, maksimum, prosek, srednja vrednost, minimum, manjina, procenti, opseg, standardna devijacija, zbir i raznovrsnost.",
		cellStatisticsDesc: "Ova funkcija izračunava statistiku iz više rastera, na osnovu metode piksel-po-piksel. Statistike koje su na raspolaganju su većina, maksimum, prosek, srednja vrednost, minimum, manjina, opseg, standardna devijacija, zbir i raznovrsnost.",
		classifyName: "Klasifikuj",
		classifySnip: "Dodeljuje svaki piksel klasi. Uključite pomoćne podatke kao što je segmentirani snimak.",
		classifyDesc: "Ova rasterska funkcija klasifikuje rasterski skup podataka na osnovu datoteke Esri Classifier Definition (.ecd) i ulaza rasterskih skupova podataka. Datoteka .ecd koja se koristi u funkciji Classify sadrži sve informacije za određeni skup podataka i klasifikator i generiše se pomoću klasifikacionih alatki za obuku, kao što su alatke Obuka za mašinu sa vektorima podrške ili Obuka za nasumično drveće.",
		clipName: "Odsecanje",
		clipSnip: "Podešava obuhvat rastera pomoću koordinata ili drugog skupa podataka.",
		clipDesc: "Ova funkcija iseca raster pomoću pravougaonog oblika u skladu sa definisanim obuhvatima ili će iseći raster na oblik ulazne klase poligonalnih geoobjekata. Oblik koji definiše isecanje može da iseče obuhvat rastera ili da iseče oblast unutar rastera.",
		colorspaceConversionName: "Color Model Conversion",
		colorspaceConversionSnip: "Pretvara raster iz RGB u HSV i obratno.",
		colorspaceConversionDesc: "Funkcija Color Model Conversion pretvara model boje snimka iz prostora boje nijanse, zasićenosti i vrednosti (HSV) u crvenu, zelenu i plavu (RGB) ili obratno.<div><br/>Ova funkcija može da se koristi u mozaičkim skupovima podataka.</div>",
		colormapToRGBName: "Colormap u RGB",
		colormapToRGBSnip: "Pretvara raster sa jednim opsegom sa mapom boja u raster sa tri opsega (crvena, zelena i plava).",
		colormapToRGBDesc: "Ova funkcija pretvara raster sa jednim opsegom sa mapom boja u raster sa tri opsega (crvena, zelena i plava).<div><br/>Ova funkcija je korisna kada vam je potrebno da kreirate raster sa tri opsega iz rastera sa jednim opsegom sa povezanom mapom poja. Vrednosti u mapi boja će se koristiti za kreiranje svakog crvenog, zelenog i plavog opsega. Ova funkcija može da se koristi u mozaičkim skupovima podataka.</div>",
		colormapName: "Colormap",
		colormapSnip: "Menja vrednosti piksela radi prikazivanja rasterskih podataka u vidu snimka u sivim tonovima ili crveno, zeleno, plavog (RGB) snimka, na osnovu mape boja ili gradacije boja.",
		colormapDesc: "Funkcija Colormap je vrsta prikazivača rasterskih podataka. Ona transformiše vrednosti piksela za prikazivanje rasterskih podataka u vidu snimka u sivim tonovima ili RGB snimka na osnovu šeme boja ili određenih boja u datoteci mape boja. Možete da koristite mapu boja za predstavljanje analiziranih podataka, kao što je klasifikovani snimak ili prilikom prikazivanja topografske mape (ili snimkom skeniranim po boji indeksa).<div><br/>Mape boja sadrže skup vrednosti koje su povezane sa bojama koje se koriste za prikazivanje rastera sa jednim opsegom konzistentno sa istim bojama. Vrednost svakog piksela je povezana sa bojom, definisana kao skup RGB vrednosti. Mape boja su u stanju da podrže svaku dubinu boja osim pokretnog zareza. Takođe podržavaju pozitivne i negativne vrednosti i mogu da sadrže mapirane vrednosti boje koje nedostaju. Prilikom prikazivanja skupa podataka sa mapom boja koja sadrži vrednosti koje nedostaju, neće se prikazati pikseli sa tim vrednostima koje nedostaju.</div>",
		complexName: "Kompleksno",
		complexSnip: "Izdvaja jačinu iz složenih brojeva.",
		complexDesc: "Ova funkcija izračunava jačinu iz složenih vrednosti.<div><br/>Ova funkcija se uglavnom koristi sa RADAR snimcima sa složenim tipom podataka. Ona može da se koristi u mozaičkim skupovima podataka.</div>",
		compositeBandName: "Composite Bands",
		compositeBandSnip: "Kombinuje više skupova podataka u jedan raster sa više opsega.",
		compositeBandDesc: "Funkcija Composite Bands vam omogućava da kombinujete rastere da biste formirali snimak sa više opsega.",
		conName: "Con",
		conSnip: "Obavlja uslovne operacije If (ako), Then (onda), Else (inače). Kada se koristi Con operator, uglavnom je potrebno da postoje dve ili više funkcija spojenih u lanac, gde jedna funkcija navodi kriterijum, a druga funkcija je Con operator koji koristi kriterijum i naređuje koji bi trebalo da budu tačni i netačni izlazi.",
		conDesc: "Funkcija Con podešava piksele izlaznog rastera na osnovu akoinače procene svakog ulaznog piksela. Vraća vrednosti piksela iz Tačnog rastera ako je uslovna procena tačna (1) ili vraća vrednosti piksela iz Netačnog rastera ako je uslovna procena netačna (0). Ovaj kriterijum se navodi izlazom logičke matematičke funkcije, koja će biti ulazni raster.",
		constantName: "Konstantan",
		constantSnip: "Kreira virtuelni raster sa vrednošću jednog piksela.",
		constantDesc: "Ova funkcija kreira virtuelni raster sa vrednošću jednog piksela koja može da se koristi u šablonima rasterske funkcije i za obradu mozaičkog skupa podataka.<div><br/>Za vrednost svakog piksela u rasteru se koristi konstantna vrednost.</div>",
		contourName: "Kontura",
		contourSnip: "Kreira linije konture.",
		contourDesc: "Funkcija Contour generiše linije konture spajanjem tačaka sa istom elevacijom iz skupa podataka rasterske elevacije. Konture su izolinije kreirane u vidu rastera za vizuelizaciju. Sledeće ključne karakteristike čine ovu funkciju moćnom: konture se brzo i dinamički generišu na veoma velikim skupovima podataka, kao što je World Elevation; konture mogu da se poravnaju kako bi obezbedile prijatniji kartografski izgled, a da se pritom očuva preciznost kontura; dinamička kontrola nad intervalom kontura je obezbeđena; izlazne opcije uključuju linije kontura, indeksne konture i ispunjene konture.<div><br/>Kreiranje sloja kontura kao rasterskog proizvoda je vredno za širok spektar primena, jer konture mogu da se preklope na mapi i obezbede informacije u vezi sa terenom, bez prikrivanja pozadinskih podataka. One su korisne u primenama poput inženjeringa, poljoprivrede i vodoprivrede.</div>",
		contrastBrightnessName: "Kontrast i osvetljenost",
		contrastBrightnessSnip: "Prilagođava kontrast i osvetljenost rastera.",
		contrastBrightnessDesc: "Funkcija Contrast And Brightness poboljšava izgled rasterski podataka izmenom osvetljenost i kontrast unutar snimka. Osvetljenost povećava ukupnu svetlinu snimka—na primer, čineći tamne boje svetlijim, a svetle boje beljim—dok kontrast prilagođava razliku između najtamnijih i najsvetlijih boja.<div><br/>Korišćenje ove funkcije menja vrednosti piksela; stoga, ova funkcija bi trebalo da se koristi kada želite da poboljšate izgled podataka, a ne ako nameravate da podatke koristite kao deo analize koja bi zahtevala neobrađene vrednosti piksela. Ova funkcija je korisna prilikom objavljivanja podataka u vidu servisa snimka koji može da se koristi u aplikacijama bez mogućnosti za menjanje kontrasta i osvetljenosti snimaka, ili radi obezbeđivanja da se prikazuje korišćenjem vaših željenih postavki.</div>",
		convolutionName: "Konvolucija",
		convolutionSnip: "Primenjuje filter radi izoštravanja, zamućenja, otkrivanja ivica, poravnavanja ili gradijenta širom rastera.",
		convolutionDesc: "Funkcija Convolution vrši filtriranje na vrednostima piksela u snimku, što može da se koristi za izoštravanje snimka, zamućenje snimka, otkrivanje ivica u okviru snimka ili druga poboljšanja zasnovana na jezgru. Filteri se koriste za poboljšavanje kvaliteta rasterskog snimka uklanjanjem slučajnih podataka ili poboljšavanjem karakteristika u podacima. Ovi konvolucioni filteri se primenjuju na pokretnom, preklapajućem jezgru (prozor ili susedstvo), poput 3 sa 3. Konvolucioni filteri funkcionišu izračunavanjem vrednosti piksela na osnovu stepena važnosti njegovih suseda.",
		corridorName: "Corridor",
		corridorSnip: "Izračunava zbir akumulativnih troškova za dva ulazna akumulativna rastera.",
		corridorDesc: "Funkcija Corridor izračunava zbir akumulativnih troškova za dva ulazna rastera akumulativnog troška. Iako se bilo koji od dva rastera može koristiti za ulaz, za dobijanje smislenog rezultata bi trebalo da budu neizmenjeni izlazni rasteri akumulativnog troška. Redosled dva ulaza je nebitan.",
		cosHName: "CosH",
		cosHSnip: "Izračunava kosinus hiperbolički ćelija u rasteru.",
		cosHDesc: "Funkcija izračunava kosinus hiperbolički piksela u rasteru.",
		cosName: "Cos",
		cosSnip: "Izračunava kosinus ćelija u rasteru.",
		cosDesc: "Funkcija izračunava kosinus piksela u rasteru.",
		costAllocationName: "Cost Allocation",
		costAllocationSnip: "Izračunava izvor sa najmanjim troškovima za svaku ćeliju na osnovu najmanjeg akumulativnog troška preko površi troška.",
		costAllocationDesc: "Funkcija Cost Allocation za svaku ćeliju izračunava njen izvor sa najmanjim troškovima na osnovu najmanjeg akumulativnog troška preko površi troška.",
		costBackLinkName: "Cost Back Link",
		costBackLinkSnip: "Definiše suseda koji je sledeća ćelija na putanji sa najmanjim akumulativnim troškovima do izvora sa najmanjim troškovima.",
		costBackLinkDesc: "Funkcija Cost Back Link definiše suseda koji je sledeća ćelija na putanji sa najmanjim akumulativnim troškovima do izvora sa najmanjim troškovima.<div><br/>Raster povratne veze sadrži vrednosti od nula do osam, koje definišu smer ili identifikuju sledeću susednu ćeliju (naredna ćelija) duž putanje sa najmanjim akumulativnim troškovima od ćelije radi dosezanja njenog izvora sa najmanjim troškovima. Ako putanja treba da se prosledi desnom susedu, ćeliji će se dodeliti vrednost 1, 2 za ćeliju koja se nalazi dijagonalno dole desno i tako dalje u smeru kretanja kazaljke na satu. Vrednost 0 je rezervisana za ćelije izvora.</div>",
		costDistanceName: "Cost Distance",
		costDistanceSnip: "Izračunava rastojanje sa najmanjim akumulativnim troškovima za svaku ćeliju od ili do izvora sa najmanjim troškovima preko površi troška.",
		costDistanceDesc: "Funkcija Cost Distance izračunava rastojanje sa najmanjim akumulativnim troškovima za svaku ćeliju od ili do izvora sa najmanjim troškovima preko površi troška.",
		costPathName: "Cost Path",
		costPathSnip: "Izračunava putanju sa najmanjim troškovima od izvora do odredišta.",
		costPathDesc: "Globalna funkcija Cost Path izračunava putanju sa najmanjim troškovima od izvora do odredišta.<div><br/>Ova funkcija proizvodi izlazni raster koji beleži putanju ili putanje sa najmanjim troškovima od izabranih lokacija do najbliže ćelije izvora koja je definisana u okviru površi akumulativnog troška, u pogledu rastojanja troška.</div>",
		curvatureName: "Curvature",
		curvatureSnip: "Izračunava zakrivljenost rasterske površi, opciono uključujući zakrivljenost profila ili ravni.",
		curvatureDesc: "Funkcija Curvature prikazuje oblik zakrivljenosti nagiba. Deo površi može biti konkavna ili konveksna; to možete prepoznati posmatranjem vrednosti zakrivljenosti. Zakrivljenost se izračunava izračunavanjem drugog izvoda površi.<div><br/>Izlaz funkcije Curvature može da se koristi za opisivanje fizičkih karakteristika basena sliva u pokušaju razumevanja procesa erozije i oticanja. Vrednost zakrivljenosti može da se koristi za pronalaženje obrazaca erozije zemljišta, kao i za distribuciju vode na kopnu. Zakrivljenost profila utiče na ubrzavanje i usporavanje protoka, a time i na eroziju i taloženje. Zakrivljenost prikaza u ravni utiče na konvergenciju i divergenciju protoka.</div>",
		divideName: "Podeli",
		divideSnip: "Deli vrednosti dva rastera na osnovu metode ćelija-po-ćelija.",
		divideDesc: "Funkcija Divide deli vrednosti dva rastera na osnovu metode piksel-po-piksel.",
		elevationVoidFillName: "Elevation Void Fill",
		elevationVoidFillSnip: "Kreira piksele tamo gde postoje rupe u vašim podacima elevacije.",
		elevationVoidFillDesc: "Funkcija Elevation Void Fill se koristi za kreiranje piksela na mestima gde postoje rupe u vašoj elevaciji.<div><br/>Praznine se pojavljuju kada nema prikupljenih tačaka unutar oblasti koju predstavlja piksel u rezultujućem rasteru. Praznine često nastaju usled vodenih površina, izbora tipa klase ili izuzimanja. Popunjavanje praznina se najčešće koristi prilikom generisanja površine tla.</div>",
		equalToName: "Jednako",
		equalToSnip: "Obavlja relacionu operaciju „jednako“ na dva ulaza na osnovu metode ćelija-po-ćelija. Vraća 1 za ćelije gde je prvi raster jednak drugom rasteru, a 0 za ćelije gde nisu.",
		equalToDesc: "Funkcija obavlja operaciju „jednako“ na dva rastera na osnovu metode piksel-po-piksel. Vraća vrednost 1 za piksele gde je prvi raster jednak drugom rasteru, a vrednost 0 za piksele gde oni nisu jednaki.",
		eucAllocationName: "Euclidean Allocation",
		eucAllocationSnip: "Za svaku ćeliju izračunava najbliži izvor na osnovu euklidskog rastojanja.",
		eucAllocationDesc: "Funkcija Euclidean Allocation za svaku ćeliju izračunava najbliži izvor na osnovu euklidskog rastojanja.",
		eucDirectionName: "Euclidean Direction",
		eucDirectionSnip: "Za svaku ćeliju u stepenima izračunava smer do najbližeg izvora.",
		eucDirectionDesc: "Funkcija Euclidean Direction za svaku ćeliju u stepenima izračunava smer do najbližeg izvora. <div><br/>Smer se izračunava od centra svake ćelije do centra ćelije izvora koji joj je najbliži. Opseg vrednosti je od 0 do 360 stepeni, gde je 0 rezervisana za ćelije izvora. U pravcu istoka (desno) je 90 i vrednosti se povećavaju u smeru kretanja kazaljke na satu (180 je jug, 270 je zapad, a 360 je sever).</div>",
		eucDistanceName: "Euclidean Distance",
		eucDistanceSnip: "Za svaku ćeliju izračunava euklidsko rastojanje do najbližeg izvora.",
		eucDistanceDesc: "Funkcija Euclidean Distance za svaku ćeliju izračunava euklidsko rastojanje do najbližeg izvora.",
		exp10Name: "Exp10",
		exp10Snip: "Izračunava eksponencijalnu funkciju za osnovu 10 ćelija u rasteru.",
		exp10Desc: "Funkcija Exp 10 izračunava eksponencijalnu funkciju za osnovu 10 piksela u rasteru.",
		exp2Name: "Exp2",
		exp2Snip: "Izračunava eksponencijalnu funkciju za osnovu 2 ćelija u rasteru.",
		exp2Desc: "Ova funkcija izračunava eksponencijalnu funkciju za osnovu 2 piksela u rasteru.",
		expName: "Exp",
		expSnip: "Izračunava eksponencijalnu funkciju za osnovu e piksela u rasteru.",
		expDesc: "Ova funkcija izračunava eksponencijalnu funkciju za osnovu e piksela u rasteru.",
		extractBandName: "Extract Bands",
		extractBandSnip: "Navodi sa kojim opsezima treba raditi prilikom korišćenja skupova podataka sa više opsega.",
		extractBandDesc: " Funkcija Extract Bands vam omogućava da izdvojite jedan ili više opsega iz, ili preuređuje opsege u, skupu podataka rastera sa više opsega.<div><br/>Funkciju Extract Bands možete da koristite pre drugih funkcija, kao što je Arithmetic, za kontrolisanje koji opsezi će se koristiti kao ulaz u sledećoj funkciji.</div>",
		fillName: "Popuni",
		fillSnip: "Popunjava slivnike u rasteru površi radi uklanjanja malih nedostataka u podacima.",
		fillDesc: "Globalna funkcija Fill pronalazi i popunjava slivnike i vrhove u rasteru elevacione površi radi uklanjanja malih nedostataka u podacima. Funkcija će popunjavati u iterativnom procesu dok svi slivnici ne budu popunjeni u okviru navedenog Z ograničenja.<div><br/>Kada se elevaciona površ kreira pomoću Ortho Mapping alatki ili pomoću drugih sredstava, često postoje male, ali značajne greške u obliku slivnika i vrhova u podacima. U fotogrametriji, slivnici i vrhovi se često nazivaju rupe i šiljci. Pošto se podaci površi često koriste u modeliranju, poput hidrološkog modeliranja, važno da se ti slivnici i vrhovi isprave na način koji je dosledan sa okolnim podacima.</div>",
		floatName: "Pomerajući",
		floatSnip: "Pretvara vrednost svake ćelije u prikaz sa pokretnim zarezom.",
		floatDesc: "Funkcija Float pretvara vrednost svakog piksela u prikaz sa pokretnim zarezom.",
		flowAccumulationName: "Akumulacija toka",
		flowAccumulationSnip: "Kreira raster akumuliranog ulivanja u svaku ćeliju. Faktor pondera može opciono da se primeni.",
		flowAccumulationDesc: "Globalna funkcija Flow Accumulation kreira raster akumuliranog protoka u svaki piksel, kao što je određeno nagomilavanjem pondera za sve piksele koji se ulivaju u svaki piksel nizbrdo. Ako nije obezbeđen nijedan raster pondera, na svaki piksel se primenjuje ponder od 1, a vrednost piksela u izlaznom rasteru je broj piksela koji se ulivaju u svaki piksel.<div><br/>Izlazni pikseli sa velikom akumulacijom protoka su oblasti koncentrisanog protoka i mogu da se koriste za identifikaciju korita tokova. Izlazni pikseli sa akumulacijom protoka od nula su lokalni topografski vrhovi i mogu da se koriste za identifikaciju grebena.</div>",
		flowDirectionName: "Smer protoka",
		flowDirectionSnip: "Kreira raster smera protoka od svake ćelije do njenog komšije najstrmije nizbrdo.",
		flowDirectionDesc: "Jedna od ključnih stvari za izvođenje hidroloških karakteristika površi je mogućnost određivanja smera protoka od svakog piksela u rasteru. Rasterska funkcija Flow Direction uzima površ kao ulaz i kreira raster smera protoka od svakog piksela do njegovog komšije najstrmije nizbrdo. Funkcija Flow Direction podržava tri metode modeliranja protoka: D8 (osam smerova), Multi-Flow Direction (MFD), i D-Infinity (DINF). ",
		flowDistanceName: "Flow Distance",
		flowDistanceSnip: "Izračunava za svaku ćeliju minimalno horizontalno ili vertikalno rastojanje nizbrdo do ćelija na potoku ili reci u koju se ulivaju.",
		flowDistanceDesc: "Funkcija će za svaki piksel izračunati minimalno horizontalno ili vertikalno rastojanje nizbrdo do piksela na reci ili potoku u koji se ulivaju. Ako je obezbeđen opcioni raster smera protoka, smer(ovi) protoka nizbrdo će biti ograničen(i) na one koji su definisani rasterom ulaznog smera protoka. Izlaz je raster rastojanja protoka.",
		focalName: "Focal Statistics",
		focalSnip: "Izračunava žižnu statistiku za svaki piksel snimka na osnovu definisanog žižnog susedstva.",
		focalDesc: "Funkcija Focal Statistics izračunava žižnu statistiku za svaki piksel snimka na osnovu definisanog žižnog susedstva.",
		geometricName: "Geometric",
		geometricSnip: "Povećava položajnu preciznost skupa podataka uračunavanjem elevacije.",
		geometricDesc: "Funkcija Geometric proizvodi ortorektifikovani snimak na osnovu definicije senzora i modela terena. Ona povećava položajnu preciznost skupa podataka uračunavanjem elevacije.",
		grayscaleName: "Grayscale",
		grayscaleSnip: "Pretvara snimak sa više opsega u snimak u sivim tonovima sa jednim opsegom.",
		grayscaleDesc: "Ova funkcija pretvara snimak sa više opsega u snimak u sivim tonovima sa jednim opsegom.<div><br/>Ova funkcija primenjuje navedene pondere na svaki od ulaznih opsega i normalizuje izlazni snimak. Ponderi se često primenjuju jer neki opsezi imaju promenljivu važnost u zavisnosti od primene. Na primer, plavi opseg često sadrži više šuma od drugih opsega.</div>",
		greaterThanEqualName: "Veće od ili jednako",
		greaterThanEqualSnip: "Obavlja relacionu operaciju „veće od ili jednako“ na dva ulaza na osnovu metode ćelija-po-ćelija. Vraća 1 za ćelije gde je prvi raster veći od ili jednak drugom rasteru, a 0 ako nije.",
		greaterThanEqualDesc: "Funkcija obavlja relacionu operaciju „veće od ili jednako“ na dva ulaza na osnovu metode piksel-po-piksel. Vraća vrednost 1 za piksele gde je prvi raster veći od ili jednak drugom rasteru, a vrednost 0 za piksele gde prvi raster nije veći od ili jednak drugom rasteru.",
		greaterThanName: "Veće od",
		greaterThanSnip: "Obavlja relacionu operaciju „veće od“ na dva ulaza na osnovu metode ćelija-po-ćelija. Vraća 1 za ćelije gde je prvi raster veći od drugog rastera, a 0 za ćelije ako nije.",
		greaterThanDesc: "Funkcija obavlja relacionu operaciju „veće od“ na dva ulaza na osnovu metode piksel-po-piksel. Vraća vrednost 1 za piksele gde je prvi raster veći od drugog rastera, a vrednost 0 za piksele gde prvi raster nije veći od drugog rastera.",
		heatIndexName: "Toplotni indeks",
		heatIndexSnip: "Kombinuje ambijentalnu temperaturu vazduha i relativnu vlažnost radi vraćanja subjektivnog osećaja temperature.",
		heatIndexDesc: "Ova funkcija izračunava subjektivni osećaj temperature na osnovu ambijentalne temperature i relativne vlažnosti. Subjektivni osećaj temperature se često opisuje kao intenzitet toplote koji ljudsko telo oseća.<div><br/>Ovaj indeks može da bude koristan za izračunavanje opasnosti povezanih sa medicinskim problemima kao što su grčevi mišića, dehidratacija, toplotna iscrpljenost ili ozbiljniji toplotni udar tokom vrelih i vlažnih dana. Kada je relativna vlažnost visoka znoj sa tela sve teže isparava, čime pojedinci ostaju bez efikasnog prirodnog načina za rashlađivanje. Mape saveta ili upozorenja u vezi sa toplotom su često proizvod ponovnog klasifikovanja rezultata toplotnog indeksa u klase, gde što je veća vrednost indeksa, to je veća verovatnoća da to postane upozorenje, pre nego samo savet.</div>",
		hillshadeName: "Hillshade (senčenje brda)",
		hillshadeSnip: "Kreira 3D prikaz površi terena, sa uračunatim relativnim položajem sunca radi senčenja snimka",
		hillshadeDesc: "Funkcija Hillshade proizvodi 3D prikaz u sivim tonovima površi terena, sa uračunatim relativnim položajem sunca radi senčenja snimka. <div><br/>Senčenje brda je tehnika za vizuelizovanje terena koja je određena izvorom svetlosti i nagibom i gledištem površi elevacije. To je kvalitativna metoda za vizuelizovanje topografije i ne daje apsolutne vrednosti elevacije. </div>",
		intName: "Int",
		intSnip: "Pretvara vrednost svake ćelije rastera u ceo broj odsecanjem decimala.",
		intDesc: "Funkcija Int pretvara vrednost svakog piksela rastera u ceo broj odsecanjem decimala.",
		interpolateIrregularDataName: "Interpolate Irregular Data",
		interpolateIrregularDataSnip: "Interpolira iz oblaka tačaka ili nepravilnih mreža.",
		interpolateIrregularDataDesc: "Neki netCDF ili HDF skupovi podataka čuvaju njihovu geolokaciju kao nepravilno raspoređene nizove piksela ili podataka iz tačaka. Prilikom dodavanja ovih skupova podataka mozaičkom skupu podataka, funkcija za interpoliranje nepravilnih podataka uzima podatke koji su nepravilno raspoređeni u obliku mreže i ponovo ih uzorkuje tako da svaki piksel bude ujednačene veličine i kvadrat.<div><br/>Prilikom dodavanja promenljivih iz netCDF ili HDF u mozaički skup podataka, ona će automatski proveriti da li su podaci pravilno raspoređeni u niz. Ako nisu, funkcija za interpoliranje nepravilnih podataka može da se koristi za pretvaranje nepravilnih podataka u raster sa pravilno raspoređenom mrežom. Možete da promenite metod interpolacije i veličinu ćelije koji se koriste u rasterskoj funkciji za interpoliranje nepravilnih podataka. Za pravilno raspoređene rasterske podatke se neće primeniti nikakva interpolacija i podaci će se očitati u postojećem obliku.</div>",
		isNullName: "Je null",
		isNullSnip: "Određuje koje vrednosti iz ulaznih rastera su tipa NoData (bez podataka) na osnovu metode ćelija-po-ćelija. Vraća vrednost 1 ako je ulazna vrednost tipa NoData (bez podataka), a 0 za ćelije koje nisu.",
		isNullDesc: "Funkcija Is Null određuje koje vrednosti iz ulaznog rastera su tipa NoData (bez podataka) na osnovu metode piksel-po-piksel. Ona vraća vrednost 1 ako je ulazna vrednost tipa NoData (bez podataka), a vrednost 0 za piksele koji nisu tipa NoData (bez podataka).",
		kernelDensityName: "Kernel Density",
		kernelDensitySnip: "Izračunava površinu jačine po jedinici iz tačkastih ili polilinijskih geoobjekata pomoću funkcije jezgra radi uklapanja glatko zašiljene površi za svaku tačku ili poliliniju.",
		kernelDensityDesc: "Ova funkcija izračunava površinu jačine po jedinici iz tačkastih ili polilinijskih geoobjekata pomoću funkcije jezgra radi uklapanja glatko zašiljene površi za svaku tačku ili poliliniju.",
		keyMetadataName: "Key Metadata",
		keyMetadataSnip: "Zamenjuje ili umeće ključne metapodatke rastera u lanac funkcija.",
		keyMetadataDesc: "Ova funkcija vam omogućava da umetnete ili zamenite ključne metapodatke rastera.<div><br/>Informacije u ključnim metapodacima se koriste za pomoć aplikaciji pri nekom obrađivanju i prikazivanju, uključujući obezbeđivanje nekih korisnih informacija kao što je ime senzora, nazivi opsega ili pokrivenost oblacima povezanu sa snimcima.</div>",
		shortestPathName: "Least Cost Path",
		shortestPathSnip: "Obavlja analizu rastojanja troška koristeći ulaze izvora i odredišta, koja se zatim koristi za određivanje putanje sa najmanjim troškovima od izvora do odredišta.",
		shortestPathDesc: "Funkcija Least Cost Path izračunava putanju sa najmanjim troškovima od izvora do odredišta. Rastojanje sa najmanjim akumulativnim troškovima se izračunava za svaki piksel preko površi troškova, do najbližeg izvora. To proizvodi izlazni raster koji beleži putanju ili putanje sa najmanjim troškovima od izabranih lokacija do najbliže ćelije izvora koja je definisana u okviru površi akumulativnog troška, u pogledu rastojanja troška.<div><br/>Svakoj putanji sa najmanjim troškovima se dodeljuje vrednost kada se na nju naiđe u procesu skeniranja. Krajnji piksel na izvornom rasteru putanje troškova dobija vrednost 1. Prva putanja dobija vrednost 3, druga 4 itd. Kada se više putanja spoji i prati preostalo rastojanje nazad do izvora po istoj ruti, segmentu po kom se dve putanje kreću zajedno se dodeljuje vrednost 2. Spojenom delu staze ne može da se dodeli vrednost jedne od putanja, pošto spojeni deo pripada obema rutama.</div>",
		lessThanEqualName: "Manje od ili jednako",
		lessThanEqualSnip: "Obavlja relacionu operaciju „manje od ili jednako“ na dva ulaza na osnovu metode ćelija-po-ćelija. Vraća 1 za ćelije gde je prvi raster manji od ili jednak drugom rasteru, a 0 ako nije.",
		lessThanEqualDesc: "Funkcija obavlja relacionu operaciju „manje od ili jednako“ na dva ulaza na osnovu metode piksel-po-piksel. Vraća vrednost 1 za piksele gde je prvi raster manji od ili jednak drugom rasteru, a vrednost 0 gde nije manji od ili jednak drugom rasteru.",
		lessThanName: "Manje od",
		lessThanSnip: "Obavlja relacionu operaciju „manje od“ na dva ulaza na osnovu metode ćelija-po-ćelija. Vraća 1 za ćelije gde je prvi raster manji od drugog rastera, a 0 ako nije.",
		lessThanDesc: "Funkcija obavlja relacionu operaciju „manje od“ na dva ulaza na osnovu metode piksel-po-piksel. Vraća vrednost 1 za piksele gde je prvi raster manji od drugog rastera, a vrednost 0 ako nije manji od drugog rastera.",
		lnName: "Ln",
		lnSnip: "Izračunava prirodni logaritam (osnova e) ćelija u rasteru.",
		lnDesc: "Funkcija Ln izračunava prirodni logaritam (osnova e) svakog piksela u rasteru.",
		log10Name: "Log10",
		log10Snip: "Izračunava logaritam za osnovu 10 ćelija u rasteru.",
		log10Desc: "Funkcija Log10 izračunava logaritam za osnovu 10 svakog piksela u rasteru.",
		log2Name: "Log2",
		log2Snip: "Izračunava logaritam za osnovu 2 ćelija u rasteru.",
		log2Desc: "Funkcija Log2 izračunava logaritam za osnovu 2 svakog piksela u rasteru.",
		lookupName: "Lookup",
		lookupSnip: "Kreira novi raster pronalaženjem vrednosti koje se nalaze u drugom polju u tabeli ulaznog rastera.",
		lookupDesc: "Funkcija kreira novi raster pronalaženjem vrednosti koje se nalaze u drugom polju u tabeli ulaznog rastera.",
		mlClassifyName: "ML Classify",
		mlClassifySnip: "Klasifikuje snimke koristeći pristup po pikselu. Mešani pikseli se dodeljuju geoobjektu sa najvećim procentom u tom pikselu.",
		mlClassifyDesc: "Funkcija ML Classify vam omogućava da obavite klasifikaciju pod nadzorom, koristeći algoritam za klasifikaciju maksimalne verovatnoće, na rasterskom ili mozaičkom skupo podataka. Ova funkcija zahteva datoteku s potpisom za klasifikaciju.",
		maskName: "Mask",
		maskSnip: "Podešava vrednosti koje ne želite da prikažete.",
		maskDesc: "Ova rasterska funkcija podešava vrednosti koje ne želite da prikažete u svom rasteru. Pomoću funkcije Mask navešćete jednu ili više vrednosti tipa NoData (bez podataka) ili opseg važećih vrednosti piksela. ",
		minusName: "Minus",
		minusSnip: "Oduzima vrednost drugog ulaznog rastera od vrednosti prvog ulaznog rastera na osnovu metode ćelija-po-ćelija.",
		minusDesc: "Funkcija Minus oduzima vrednost drugog ulaznog rastera od vrednosti prvog ulaznog rastera na osnovu metode piksel-po-piksel.",
		modName: "Mod",
		modSnip: "Pronalazi ostatak (moduo) prvog rastera pri deljenju drugim rasterom na osnovu metode ćelija-po-ćelija.",
		modDesc: "Funkcija Mod pronalazi ostatak (moduo) prvog rastera pri deljenju drugim rasterom na osnovu metode piksel-po-piksel. Redosled ulaza je važan i utiče na izlazni rezultat.",
		mosaicRastersName: "Mosaic Rasters",
		mosaicRastersSnip: "Uklapa skup rasterskih skupova podataka zajedno radi kreiranja jednog skupa podataka.",
		mosaicRastersDesc: "Funkcija Mosaic Rasters kreira mozaički snimak iz više snimaka. Kada postoji preklapanje između snimaka, postoji nekoliko metoda koje možete da odaberete za određivanje snimaka koji će se prikazati.",
		ndviColorizedName: "NDVI Colorized",
		ndviColorizedSnip: "Kreira skup podataka sa više opsega koji predstavlja zdravlje vegetacije, na osnovu razlike između crvenog i skoro infracrvenog opsega.",
		ndviColorizedDesc: "Funkcija NDVI Colorized primenjuje funkciju NDVI na ulazni snimak, a zatim koristi mapu boja ili gradaciju boja za prikazivanje rezultata.",
		ndviName: "NDVI",
		ndviSnip: "Izračunava indeks normalizovane razlike vegetacije (NDVI).",
		ndviDesc: "Funkcija NDVI kreira skup podataka sa jednim opsegom koji predstavlja zdravlje vegetacije, na osnovu razlike između crvenog i skoro infracrvenog opsega.<div><br/>NDVI je standardizovan indeks koji vam omogućava da generišete snimak koji prikazuje zelenilo, poznato i kao relativna biomasa. Ovaj indeks koristi prednosti kontrasta karakteristika dva opsega iz multispektralnog rasterskog skupa podataka: apsorpcija pigmenta hlorofila u crvenom opsegu i velika reflektivnost materijala biljaka u blizu infracrvenom (NIR) opsegu. Izuzetno niske ili negativne NDVI vrednosti predstavljaju oblasti koje uopšte nemaju vegetacije, poput oblaka, vode ili snega. Veoma niske vrednosti predstavljaju oblasti imaju malo ili nemaju vegetacije, poput betona, kamena ili golog zemljišta. Umerene vrednosti predstavljaju oblasti grmlja i pašnjaka. Visoke vrednosti predstavljaju šumske oblasti i bujnu vegetaciju.</div>",
		negateName: "Negate",
		negateSnip: "Menja znak (množi sa -1) vrednosti ćelija ulaznog rastera na osnovu metode ćelija-po-ćelija.",
		negateDesc: "Funkcija Negate menja znak (množi sa -1) vrednosti piksela ulaznog rastera na pikselu ",
		nibbleName: "Nibble",
		nibbleSnip: "Zamenjuje ćelije rastera koje odgovaraju masci sa istim vrednostima najbližih suseda.",
		nibbleDesc: "Globalna funkcija Nibble omogućava da se izabranim oblastima rastera dodeli vrednost njihovog najbližeg suseda. To je korisno za uređivanje oblasti rastera u kojima podaci mogu biti pogrešni.",
		notEqualName: "Nije jednako",
		notEqualSnip: "Obavlja relacionu operaciju „nije jednako“ na dva ulaza na osnovu metode ćelija-po-ćelija. Vraća 1 za ćelije gde prvi raster nije jednak drugom rasteru i 0 gde je jednak.",
		notEqualDesc: "Funkcija obavlja relacionu operaciju „nije jednako“ na dva ulaza na osnovu metode piksel-po-piksel. Vraća vrednost 1 za piksele gde prvi raster nije jednak drugom rasteru, a vrednost 0 za piksele gde je prvi jednak drugom rasteru.",
		pansharpeningName: "Pansharpen",
		pansharpeningSnip: "Veštački povećava prostornu rezoluciju snimka sa više opsega spajajući ga sa panhromatskim snimkom veće rezolucije.",
		pansharpeningDesc: "Funkcija Pansharpening koristi panhromatski snimak veće rezolucije ili opseg rastera za spajanje sa rasterskim skupom podataka sa više opsega, manje rezolucije, radi povećavanja prostorne rezolucije snimka sa više opsega.<div><br/>Svrha pan-izoštravanja je kreiranje snimka većeg vizuelnog kvaliteta. Pošto tehnike menjaju radiometrijske i spektralne karakteristike snimaka sa više opsega, pan-izoštreni snimci treba da se koriste sa oprezom u analitičke svrhe daljinske detekcije.</div>",
		pathAllocationName: "Path Distance Allocation",
		pathAllocationSnip: "Izračunava izvor sa najmanjim troškovima za svaku ćeliju na osnovu najmanjeg akumulativnog troška preko površi troška, uz uračunavanje površinskog rastojanja zajedno sa horizontalnim i vertikalnim faktorima troškova.",
		pathAllocationDesc: "Funkcija Path Distance Allocation izračunava najbliži izvor za svaku ćeliju na osnovu najmanjeg akumulativnog troška preko površi troška, uz uračunavanje površinskog rastojanja i horizontalnih i vertikalnih faktora troškova.",
		pathBackLinkName: "Path Distance Back Link",
		pathBackLinkSnip: "Definiše suseda koji je sledeća ćelija na putanji sa najmanjim akumulativnim troškovima do izvora sa najmanjim troškovima, uz uračunavanje površinskog rastojanja zajedno sa horizontalnim i vertikalnim faktorima troškova.",
		pathBackLinkDesc: "Funkcija Path Distance Back Link identifikuje usmerenost suseda koji je sledeća ćelija na putanji sa najmanjim akumulativnim troškovima do najbližeg izvora, uz uračunavanje površinskog rastojanja i horizontalnih i vertikalnih faktora troškova.",
		pathDistanceName: "Path Distance",
		pathDistanceSnip: "Izračunava rastojanje sa najmanjim troškovima za svaku ćeliju od ili do izvora sa najmanjim troškovima, uz uračunavanje površinskog rastojanja zajedno sa horizontalnim i vertikalnim faktorima troškova.",
		pathDistanceDesc: "Funkcija Path Distance izračunava za svaku ćeliju rastojanje sa najmanjim akumulativnim troškovima do najbližeg izvora, uz uračunavanje površinskog rastojanja i horizontalnih i vertikalnih faktora troškova.",
		plusName: "Plus",
		plusSnip: "Dodaje (sabira) vrednosti dva rastera na osnovu metode ćelija-po-ćelija.",
		plusDesc: "Funkcija Plus dodaje (sabira) vrednosti dva rastera na osnovu metode piksel-po-piksel.",
		powerName: "Power",
		powerSnip: "Podiže vrednosti ćelija u rasteru na stepen vrednosti koja se nalazi u drugom rasteru.",
		powerDesc: "Funkcija Power podiže vrednosti piksela u rasteru na stepen vrednosti koja se nalazi u drugom rasteru.",
		radarCalibrationName: "Radar Calibration",
		radarCalibrationSnip: "Pretvara povratni signal RADARSAT-2 radara.",
		radarCalibrationDesc: "Ova funkcija moje da se koristi za kalibraciju RADARSAT-2 snimaka u mozaičkom skupu podataka ili kao rasterski proizvod. Kalibracija se vrši na radarskim snimcima, tako da vrednosti piksela predstavljaju pravi prikaz povratnog signala radara.",
		rasterInfoName: "RasterInfo",
		rasterInfoSnip: "Menja svojstva rastera, kao što je dubina boja, vrednost tipa NoData (bez podataka), veličina ćelija itd.",
		rasterInfoDesc: "Raster Info otvara dijalog sa svojstvima rasterskog skupa podataka, kao što je broj kolona i redova, broj opsega, tip piksela, obuhvat i prostorna referenca. Ova svojstva možete da izmenite izborom rasterskog skupa podataka koji ćete koristiti kao šablon. ",
		rasterizeAttributesName: "Rasterize Attributes",
		rasterizeAttributesSnip: "Poboljšava raster preko dodatnih opsega izvedenih iz vrednosti navedenih atributa spoljašnje tabele ili servisa geoobjekata.",
		rasterizeAttributesDesc: "Funkcija Rasterize Attribute poboljšava raster dodavanjem opsega izvedenih iz vrednosti navedenih atributa, iz spoljašnje tabele ili servisa geoobjekata. Možete opciono da navedete raster zone i ID atribut povezane zone da biste omogućili traženje na osnovu regiona.",
		rasterizeFeatureClassName: "Rasterize Features",
		rasterizeFeatureClassSnip: "Pretvara geoobjekat u raster.",
		rasterizeFeatureClassDesc: "Ova funkcija pretvara klasu podataka poligonalnih, polilinijskih i tačkastih geoobjekata u sloj rastera.<div><br/>Geoobjektima se dodeljuju vrednosti piksela na osnovu OBJECTID geoobjekata (podrazumevano). Opciono, vrednosti piksela mogu da se zasnivaju na polju vrednosti definisanom od strane korisnika u atributnoj tabeli ulaznog geoobjekta.</div>",
		recastName: "Recast",
		recastSnip: "Menja parametre lanca funkcija u mozaičkom skupu podataka ili servisu snimaka. Ovo se često koristi sa LAS skupovima podataka kako bi se izbeglo kreiranje zasebnog mozaičkog skupa podataka za različite prikaze terena.",
		recastDesc: "Funkcija Recast se koristi za dinamičku izmenu parametra funkcije koji se koristi u mozaičkom skupu podataka ili servisu snimaka bez fizičkog zadržavanja promena.",
		regionGroupName: "Region Group",
		regionGroupSnip: "Za svaku ćeliju u izlazu se beleži identitet povezanog regiona kojem ta ćelija pripada. Jedinstveni broj se dodeljuje svakom regionu.",
		regionGroupDesc: "Globalna funkcija Region Group za svaku ćeliju u izlazu beleži identitet povezanog regiona kojem ta ćelija pripada. Jedinstveni broj se dodeljuje svakom regionu.<div><br/>Region koji je prvi skeniran dobija vrednost jedan, drugi dva itd. dok se svim regionima ne dodeli vrednost. Skeniranje se pomera s leva na desno, od vrha ka dnu. Vrednosti dodeljene izlaznim zonama se zasnivaju na tome kada se na njih naiđe u procesu skeniranja.</div>",
		regionGrowName: "Region Grow",
		regionGrowSnip: "Uvećava regione od matičnih tačaka.",
		regionGrowDesc: "Funkcija Region Grow grupiše susedne piksele u grupe u zavisnosti od navedenog poluprečnika od matične tačke. Grupi piksela ili objektu se dodeljuje navedena vrednost za popunjavanje.",
		remapName: "Remap",
		remapSnip: "Menja vrednosti piksela dodeljivanjem novih vrednosti opsezima vrednosti piksela ili korišćenjem spoljašnje tabele.",
		remapDesc: "Funkcija Remap vam omogućava da promenite ili ponovo klasifikujete vrednosti piksela rasterskih podataka. To je moguće uraditi ili navođenjem opsega vrednosti piksela za mapiranje u izlaznu vrednost piksela ili korišćenjem tabele za mapiranje vrednosti piksela u izlaznu vrednost piksela.",
		reprojectName: "Reproject",
		reprojectSnip: "Menja projekciju rasterskog skupa podataka, mozaičkog skupa podataka ili rasterske stavke u mozaičkom skupu podataka. Takođe može da ponovo uzorkuje podatke na novu veličinu ćelije i da definiše poreklo.",
		reprojectDesc: "Funkcija Reproject menja projekciju rasterskog skupa podataka, mozaičkog skupa podataka ili rasterske stavke u mozaičkom skupu podataka. Takođe može da ponovo uzorkuje podatke na novu veličinu ćelije i da definiše poreklo.<div><br/>Funkcija Reproject može da se koristi prilikom kreiranja keša iz rasterskog ili mozaičkog skupa podataka koji nije u traženoj projekciji. Na primer, prilikom kreiranja keširanog servisa snimaka koji može biti integrisan preko aplikacija sa drugim keširanim servisima, važno je da svi budu u istoj projekciji. To je često Web Mercator projekcija. Pošto se mozaički skup podataka ne može ponovo projektovati, možete da uradite jednu od dve stvari—ili da kreirate referentni mozaički skup podataka iz vašeg mozaičkog skupa podataka u potrebnoj projekciji ili da dodate funkciju Reproject u lanac funkcija mozaičkog skupa podataka. Drugi primer koristi ovu funkciju na rasterskoj stavci u mozaičkom skupu podataka. Prilikom korišćenja funkcije Cached Raster ćete možda želeti da umetnete funkciju Reproject kako bi se keš kreirao u novoj projekciji. Rasterske stavke u mozaičkom skupu podataka mogu da se keširaju kada je obrada intenzivna, a vi pokušavate da objavite servis snimaka koji je brz, bez keširanja čitavog servisa snimaka.</div>",
		resampleName: "Resample",
		resampleSnip: "Menja veličinu ćelije rastera.",
		resampleDesc: "Funkcija Resample menja veličinu ćelije, tip ponovnog uzorkovanja ili oba.<div><br/>Funkcija Resample bi trebalo da se koristi samo sa određenim zahtevima za izračunavanje; na primer, kada izračunavate smer jačine vetra ili struje što zahteva ponovno uzorkovanje iz izvorne rezolucije.</div>",
		roundDownName: "Zaokruži naniže",
		roundDownSnip: "Vraća sledeći manji ceo broj, samo predstavljen kao vrednost sa pokretnim zarezom, za svaku ćeliju u rasteru.",
		roundDownDesc: "Funkcija Round Down vraća sledeći manji ceo broj, u vidu vrednosti sa pokretnim zarezom, za svaki piksel u rasteru.",
		roundUpName: "Zaokruži naviše",
		roundUpSnip: "Vraća sledeći veći ceo broj, samo predstavljen kao vrednost sa pokretnim zarezom, za svaku ćeliju u rasteru.",
		roundUpDesc: "Funkcija Round Up vraća sledeći veći ceo broj, u vidu vrednosti sa pokretnim zarezom, za svaki piksel u rasteru.",
		segmentMeanShiftName: "Segmentiraj pomak srednje vrednosti",
		segmentMeanShiftSnip: "Grupiše susedne piksele sa sličnim spektralnim karakteristikama u segmente.",
		segmentMeanShiftDesc: "Ova funkcija identifikuje objekte, geoobjekte ili segmente u vašim snimcima grupisanjem susednih piksela koji imaju slične spektralne i prostorne karakteristike. Možete da kontrolišete količinu prostornog i spektralnog poravnavanja kako biste pomogli u izvođenju geoobjekata od interesa.",
		s1RadiometricCalibrationName: "Sentinel-1 Radiometric Calibration",
		s1RadiometricCalibrationSnip: "Vrši različite tipove radiometrijske kalibracije na Sentinel-1 podacima.",
		s1RadiometricCalibrationDesc: "Ova rasterska funkcija vrši tri različite kalibracije za Sentinel 1 skupove podataka, uključujući beta nula i gama i kao izlaz daje kalibrisani skup podataka. Cilj SAR kalibracije je obezbeđivanje snimaka u kojima se vrednosti piksela mogu direktno povezati sa povratnim signalom radara scene. Iako su nekalibrisani SAR snimci dovoljni za kvalitativnu upotrebu, kalibrisani SAR snimci su neophodni za kvantitativnu upotrebu SAR podataka.<div><br/>Uobičajena obrada SAR podataka, koja proizvodi snimke nivoa 1, ne uključuje radiometrijske korekcije i značajne radiometrijske ostatke odstupanja. Stoga je neophodno da primenite radiometrijsku korekciju na SAR snimke kako bi vrednosti piksela snimaka zaista predstavljale povratni signal radara od reflektujuće površine. Radiometrijska korekcija je takođe neophodna za poređenje SAR snimaka dobijenih pomoću različitih senzora ili dobijenih pomoću istog senzora u različitim vremenima, u različitim režimima ili obrađenih različitim procesorima.</div>",
		s1ThermalNoiseRemovalName: "Sentinel-1 Thermal Noise Removal",
		s1ThermalNoiseRemovalSnip: "Uklanja termalni šum iz Sentinel-1 podataka.",
		s1ThermalNoiseRemovalDesc: "Korekcija termalnog šuma se može primeniti na proizvode Sentinel-1 Level-1 Single Look Complex (SLC), kao i proizvode Level-1 Ground Range Detection (GRD) koji nisu već bili ispravljeni. Operater takođe može da ukloni ovu korekciju na osnovu anotacija proizvoda kako bi ponovo uveo signal šuma koji je uklonjen radi dobijanja originalnog proizvoda. Anotacije proizvoda će biti ažurirane u skladu sa tim kako bi se omogućila ponovna primena korekcije. ",
		setNullName: "Podešavanje nule",
		setNullSnip: "Set Null podešava identifikovane lokacije ćelija na tip NoData (bez podataka) na osnovu navedenog kriterijuma. Vraća tip NoData (bez podataka) ako je uslovna procena tačna, a vraća vrednost navedenu u drugom rasteru ako je netačna.",
		setNullDesc: "Funkcija Set Null podešava identifikovane piksele na tip NoData (bez podataka), na osnovu određenog kriterijuma. Vraća tip NoData (bez podataka) ako je uslovna procena tačna (1) ili vraća vrednost navedenu u Netačnom rasteru ako je uslovna procena netačna (0). Ovaj kriterijum se navodi izlazom logičke matematičke funkcije, koja će biti ulazni raster.",
		shadedReliefName: "Shaded Relief",
		shadedReliefSnip: "Kreira 3D prikaz površi terena sa više opsega, kodiran bojama, sa uračunatim relativnim položajem sunca radi senčenja snimka.",
		shadedReliefDesc: "Funkcija Shaded Relief kreira 3D prikaz terena u boji koji se kreira spajanjem snimaka iz metoda kodiranih elevacijom i senčenjem brda. Ova funkcija koristi svojstva nadmorske visine i azimuta za navođenje položaja sunca.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Izračunava sinus hiperbolički ćelija u rasteru.",
		sinHDesc: "Funkcija izračunava sinus hiperbolički piksela u rasteru.",
		sinName: "Sin",
		sinSnip: "Izračunava sinus ćelija u rasteru.",
		sinDesc: "Funkcija izračunava sinus piksela u rasteru.",
		slopeName: "Nagib",
		slopeSnip: "Izračunava brzinu promene sa vrednosti jednog piksela na njegove susede.",
		slopeDesc: "Ova rasterska funkcija izračunava nagib koji predstavlja brzinu promene elevacije za svaku ćeliju digitalnog modela elevacije (DEM). To je prvi izvod od DEM.<div><br/>Ova funkcija koristi ubrzanu funkciju atan(). Šest puta je brža, a greška aproksimacije je uvek manja od 0,3 stepena.</div>",
		speckleName: "Speckle",
		speckleSnip: "Obezbeđuje filtere za uklanjanje šuma skupova podataka radara sa sintetičkom aperturom.",
		speckleDesc: "Granularni šum je šum visoke frekvencije na radarskim podacima. Snimci generisani sistemima radara sa sintetičkom aperturom (SAR) su veoma podložni efektima granulacije usled obrade raspršenih signala i interferencije elektromagnetnih talasa raspršenih od površi ili objekata. Funkcija Speckle filtrira granularni radarski skup podataka i poravnava šum, pritom zadržavajući ivice ili oštre geoobjekte na snimku.",
		spectralConversionName: "Spectral Conversion",
		spectralConversionSnip: "Primenjuje matricu na snimak sa više opsega.",
		spectralConversionDesc: "Funkcija Spectral Conversion primenjuje matricu na snimak sa više opsega radi uticaja na vrednosti boja izlaza.<div><br/>Neki senzori ne prikupljaju plave opsege zbog niskog odnosa signala i šuma. To može da se koristi npr. za pretvaranje lažnog infracrvenog snimka u boji u snimak sa pseudo prirodnom bojom.</div>",
		squareRootName: "Kvadratni koren",
		squareRootSnip: "Izračunava kvadratni koren vrednosti ćelija u rasteru.",
		squareRootDesc: "Funkcija Square Root izračunava kvadratni koren vrednosti piksela u rasteru.",
		squareName: "Kvadrat",
		squareSnip: "Izračunava kvadrat vrednosti ćelija u rasteru.",
		squareDesc: "Funkcija Square izračunava kvadrat vrednosti piksela u rasteru.",
		statisticsHistogramName: "Statistike i histogram",
		statisticsHistogramSnip: "Definišite ili povežite statistike i histogram.",
		statisticsHistogramDesc: "Funkcija Statistics and Histogram se koristi za definisanje statistike i histograma rastera. Možete da umetnete ovu funkciju na kraj lanca funkcija da biste opisali statistiku i histogram šablona rasterske funkcije (RFT). To može biti potrebno za kontrolu podrazumevanog prikaza rezultata obrade, naročito pir definisanju lanca funkcija koji sadrži mnogo funkcija.<div><br/>Možete da definišete statistiku unošenjem vrednosti ili uvoženjem iz rasterskog skupa podataka ili XML datoteke. Histogrami se mogu definisati samo uvoženjem datoteke.</div>",
		statisticsName: "Statistika",
		statisticsSnip: "Izračunava žižnu statistiku za svaki piksel snimka na osnovu definisanog žižnog susedstva.",
		statisticsDesc: "Funkcija Statistics izračunava žižnu statistiku za svaki piksel snimka na osnovu definisanog žižnog susedstva.<div><br/>Funkcija Statistics može da se koristi za popunjavanje ispuštenih linija u snimku. Ispuštene linije su često izazvane problemima u senzoru kada podaci nisu prikupljeni. To se dešava u senzorima kao što je Enhanced Thematic Mapper Plus (ETM+) satelita Landsat 7. Ovi podaci koji nedostaju izazivaju probleme za analizu i takođe prilikom gledanja snimaka. Malo toga se može uraditi prilikom korišćenja snimaka za analizu; međutim, ako postoji preklapajući snimak, moguće je koristiti njega umesto sadržaja koji nedostaje. Isto bi moglo da se uradi ako se snimci koriste za vizuelizaciju. Međutim, ne postoji uvek dodatni snimak za popunjavanje sadržaja koji nedostaje, te ga je potrebno izvesti iz postojećih podataka.</div>",
		streamLinkName: "Stream Link",
		streamLinkSnip: "Dodeljuje jedinstvene vrednosti odeljcima linearne mreže rastera između preseka.",
		streamLinkDesc: "Globalna funkcija Stream Link dodeljuje jedinstvene vrednosti odeljcima linearne mreže rastera između preseka.<div><br/>Spojnice su odeljci korita toka koji povezuju dva uzastopna spoja, spoj i izlaz ili spoj i razvođe. U hidrologiji, ovi segmenti toka se zovu deonice. Spoj se odnosi na tačku tečenja i pomaže u ocrtavanju vododelnice ili granice rečnog podsliva.</div>",
		stretchName: "Rastezanje",
		stretchSnip: "Poboljšava snimak podešavanjem prikazanog opsega vrednosti. To ne menja vrednosti pozadinskih piksela. Ako piksel ima vrednost van navedenog opsega, ona će se pojaviti kao minimalna ili maksimalna vrednost.",
		stretchDesc: "Funkcija Stretch poboljšava snimak menjanjem svojstava kao što su osvetljenost, kontrast i gama kroz više tipova razvlačenja. Ova funkcija koristi statistiku iz rastera unutar mozaičkog skupa podataka; stoga, ako koristite ovu funkciju, morate da se postarate da je statistika izračunata.<div><br/>Tip razvlačenja definiše razvlačenje histograma koje će se primeniti na rastere kako bi se poboljšao njihov izgled. Razvlačenje poboljšava izgled podataka distribuiranjem vrednosti piksela duž histograma od minimalnih i maksimalnih vrednosti definisanih njihovom dubinom boja. </div>",
		swathName: "Swath",
		swathSnip: "Interpolira iz nepravilnih mreža ili podataka odsečka.",
		swathDesc: "Neki netCDF ili HDF skupovi podataka čuvaju njihovu geolokaciju kao nepravilno raspoređene nizove. Prilikom dodavanja ovih skupova podataka mozaičkom skupu podataka, funkcija odsečka uzima podatke koji su nepravilno raspoređeni u obliku mreže i ponovo ih uzorkuje tako da svaki piksel bude ujednačene veličine i kvadrat.<div><br/>Prilikom dodavanja promenljivih iz netCDF ili HDF u mozaički skup podataka, ona će automatski proveriti da li su podaci pravilno raspoređeni u niz. Ako nisu, funkcija odsečka se primenjuje automatski radi pretvaranja nepravilnog rastera u tačke, a zatim u raster sa pravilno raspoređenom mrežom. Možete da promenite metod interpolacije i veličinu ćelije koji se koriste u rasterskoj funkciji odsečka. Za pravilno raspoređene rasterske podatke se neće primeniti nikakva interpolacija, podaci će se očitati u postojećem obliku.</div>",
		tanHName: "TanH",
		tanHSnip: "Izračunava tangens hiperbolički ćelija u rasteru.",
		tanHDesc: "Funkcija izračunava tangens hiperbolički piksela u rasteru.",
		tanName: "Tan",
		tanSnip: "Izračunava tangens ćelija u rasteru.",
		tanDesc: "Funkcija izračunava tangens piksela u rasteru. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Izračunava nivoe vegetacije, vlažnost i osvetljenost. Ova tehnika se oslanja na koeficijente koje je potrebno izračunati posebno za senzor.",
		tasseledCapDesc: "Tasseled Cap (Kauth-Thomas) transformacija je dizajnirana za analiziranje i mapiranje vegetacione fenomenologije i promena urbanog razvoja detektovanih od strane raznih sistema satelitskih senzora. Poznata je ka Tasseled Cap transformacija usled oblika grafičke raspodele podataka. Transformacija je obezbedila obrazloženje za obrasce koji se nalaze u Landsat MSS podacima poljoprivrednih polja kao funkciju životnog ciklusa useva. U suštini, kao što se usev razvija od semena do biljke, postoji neto povećanje u skoro infracrvenoj i smanjenje u crvenom odsjaju na osnovu boje zemljišta<div><br/>Upotreba ove transformacije proširila se od nadzora useva do analiziranja i mapiranja vegetacije za podršku različitim aplikacijama kao što je šumerstvo, industrijsko upravljanje vegetacijom, mapiranje ekosistema, inventarisanje i nadzor inventory and monitoring for izdvajanja i kreditiranja ugljenika, urbani razvoj i još puno toga. Takođe se proširila sa podrške za Landsat MSS radi uključivanja drugih popularnih satelitskih sistema kao što su Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 i RapidEye multispektralni senzori.</div>",
		timesName: "Vremena",
		timesSnip: "Množi vrednosti dva rastera na osnovu metode ćelija-po-ćelija.",
		timesDesc: "Funkcija Times množi vrednosti dva rastera na osnovu metode piksel-po-piksel.",
		transposeBitsName: "Transpose Bits",
		transposeBitsSnip: "Otpakuje bitove ulaznog piksela i mapira ih u navedene bitove u izlaznom pikselu. Svrha ove funkcije je manipulisanje bitovima iz nekoliko ulaza, poput Landsat 8 proizvoda kvalitetnog opsega.",
		transposeBitsDesc: "Funkcija Transpose Bit otpakuje bitove ulaznog piksela i mapira ih u navedene bitove u izlaznom pikselu. Svrha ove funkcije je manipulisanje bitovima iz nekoliko ulaza, kao što su Landsat 8 proizvodi kvalitetnog opsega.",
		unitConversionName: "Unit Conversion",
		unitConversionSnip: "Menja vrednosti iz jedne jedinice mere u drugu.",
		unitConversionDesc: "Ova funkcija konvertuje piksele iz jedne jedinice u drugu. Podržava konverziju rastojanja, brzine i temperature.",
		vectorFieldName: "Vektorsko polje",
		vectorFieldSnip: "Prikazuje skupove podataka sa jačinom (u) i smerom (v) u vidu strelica, gde je jačina predstavljena veličinom, a smer uglom strelice.",
		vectorFieldDesc: "Funkcija Vector Field se koristi za slaganje i pretvaranje dva rastera u raster sa dva opsega čiji je tip podataka ili Jačina-Smer ili U-V.<div><br/>U vrednost se ponekad naziva zonska brzina, a V vrednost se ponekad naziva meridijanska brzina.</div>",
		viewshed2Name: "Vidno polje",
		viewshed2Snip: "Određuje lokacije površi rastera vidljive skupu geoobjekata posmatrača, korišćenjem geodetskih metoda.",
		viewshed2Desc: "Viewshed funkcija određuje lokacije površine rastera koje su vidljive za podešavanje funkcija posmatrača pomoću geodetskih metoda<div><br/>Vidljivost svakog centra piksela određena je prema testu za liniju vida između cilja i svakog posmatrača. Ako posmatrač može da vidi cilj u centru piksela, piksel se smatra vidljivim. Ova alatka uvek uzima u obzir zakrivljenost zemlje pri određivanju vidljivosti.</div>",
		watershedName: "Vododelnica",
		watershedSnip: "Određuje drenažno područje iznad skupa ćelija u rasteru",
		watershedDesc: "Globalna funkcija Watershed određuje drenažno područje iznad skupa piksela u rasteru. Vododelnice se ocrtavaju iz rastera smera protoka koji identifikuje smer protoka iz svakog piksela.",
		weightedOverlayName: "Ponderisano preklapanje",
		weightedOverlaySnip: "Preklapa nekoliko rastera pomoću zajedničke skale za merenje i meri svaki u skladu sa njegovom važnošću.",
		weightedOverlayDesc: "Ova funkcija vam omogućava da preklopite nekoliko rastera pomoću zajedničke skale za merenje i da izmerite svaki u skladu sa njegovom važnošću.",
		weightedSumName: "Weighted Sum",
		weightedSumSnip: "Meri i dodaje niz rastera na osnovu metode ćelija-po-ćelija.",
		weightedSumDesc: "Funkcija Weighted Sum vam omogućava da preklopite nekoliko rastera, množeći svaki njihovim datim ponderom i sabirajući ih zajedno.",
		windchillName: "Wind Chill",
		windchillSnip: "Kombinuje ambijentalnu temperaturu vazduha i brzinu vetra radi izračunavanja faktora indeksa hlađenja.",
		windchillDesc: "Funkcija Wind Chill je korisna za identifikaciju opasnih zimskih uslova koji mogu da dovedu do promrzlina ili čak hipotermije, u zavisnosti od vremena izlaganja prirodnim silama. Indeks hlađenja je način za merenje subjektivnog osećaja hladnoće kada se uračuna i vetar sa već hladnim temperaturama. Što je veća brzina vetra, to će telo brže gubiti toplotu i osećaće se hladnije.",
		zonalRemapName: "Zonal Remap",
		zonalRemapSnip: "Ponovo mapirajte piksele u rasteru na osnovu zona definisanih u dugom rasteru i mapiranja vrednosti u zavisnosti od zone koje je definisano u tabeli.",
		zonalRemapDesc: "Ova funkcija vam omogućava da ponovo mapirate piksele u rasteru na osnovu zona definisanih u dugom rasteru i mapiranja vrednosti u zavisnosti od zone koje je definisano u tabeli.",
		zonalStatisticsName: "Zonal Statistics",
		zonalStatisticsSnip: "Izračunava statistiku na vrednostima rastera unutar zona drugog skupa podataka.",
		zonalStatisticsDesc: "Funkcija izračunava statistiku na vrednostima rastera unutar zona drugog skupa podataka. Zona je definisana kao sve oblasti u ulazu koje imaju istu vrednost. Te oblasti ne moraju da budu susedne. Kada su ulazi zone i vrednosti oba rasteri iste rezolucije, koristiće se neposredno. Ako se rezolucije razlikuju, primenjuje se unutrašnje ponovno uzorkovanje da bi se rezolucije podudarale pre izvršavanja zonske operacije.",
		flowLengthName: "Flow Length",
		flowLengthSnip: "Ova funkcija izračunava uzvodno ili nizvodno rastojanje, ili ponderisano rastojanje, duž putanje toka za svaku ćeliju.",
		flowLengthDesc: "Ovo je globalna rasterska funkcija. Ova funkcija kreira sloj rastera uzvodnog ili nizvodnog rastojanja, ili ponderisanog rastojanja, duž putanje toka za svaku ćeliju.<div><br/>Primarna upotreba funkcije Flow Length je da izračuna dužinu najduže putanje toka unutar određenog basena. Ovo merenje se često koristi da izračuna vreme koncentracije basena. To se radi korišćenjem opcije Upstream. Ova funkcija takođe može da se koristi za kreiranje dijagrama oblasti zasnovanih na udaljenosti za hipotetičke nivoe padavina i oticanja vode korišćenjem ponderisanog rastera kao impendance ka kretanju na dole.</div>",
		streamOrderName: "Stream Order",
		streamOrderSnip: "Dodeljuje numerički red segmentima ogranaka predstavljenih rasterom za linearnu mrežu",
		streamOrderDesc: "Ovo je globalna rasterska funkcija. Ova funkcija kreiraj sloj rastera koji dodeljuje numerički red segmentima ogranaka predstavljenih rasterom za linearnu mrežu.<div><br/>Izlazna vrednost funkcije Stream Order će biti višeg kvaliteta ako se ulazni sloj rastera strima i ulazni sloj rastera smera toka odnose na istu površinu. Ako je raster strima izveden iz skupa podataka rasterizovanog strima, izlaz možda neće biti upotrebljiv jer, na osnovu metode ćelija-po-ćelija, smer neće odgovarati lokaciji ćelija strima. Rezultatu funkcije Flow Accumulation mogu da se koriste za kreiranje mreže rastera strima primenjivanjem vrednosti praga za odabir ćelija koje imaju visoku akumulaciju toka. Na primer, ćelije koje imaju više od 100 ćelija koje se ulivaju u njih se koriste za definisanje mreže strima. Koristite funkciju Con or Set Null da biste kreirali mrežu strima rastera gde vrednosti toka akumulacije od 100 ili više idu u jednu ćeliju, a ostatak se stavlja u pozadinu (NoData). Rezultujuća mreža strima može da se koristi u funkciji Stream Order. Ova funkcija podržava samo D8 ulazni sloj rastera smera toka. D8 smerovi toka mogu da budu kreirani korišćenjem funkcije Flow Direction i da rade sa podrazumevanim tipom D8 smera toka.</div>",
		snapPourPointName: "Snap Pour Point",
		snapPourPointSnip: "Kači tačke tečenja na ćelije naviše akumulacije toka unutar određenog rastojanja",
		snapPourPointDesc: "Ovo je globalna rasterska funkcija. Ova funkcija kači tačke tečenja na ćelije naviše akumulacije toka unutar određenog rastojanja.<div><br/>Funkcija Snap Pour Point se koristi da osigura izbor tačaka toka sa visokom akumulacijom kada se ocrtava rečni sliv korišćenjem funkcije Watershed. Funkcija Snap Pour Points će vršiti pretragu unutar rastojanja kačenja oko navedenih tačaka tečenja za ćeliju sa najvišim akumuliranim tokom i pomeriće tačke tečenja na tu lokaciju. Izlazna vrednost je celobrojni sloj rastera kada se lokacije prvobitnih tačaka tečenja zakače na lokacije sa višom akumulacijom toka.</div>",
		sinkName: "Slivnik",
		sinkSnip: "Kreira raster koji prikazuje sve slivnike ili oblasti internog sliva",
		sinkDesc: "Ovo je globalna rasterska funkcija. Ova funkcija kreira sloj rastera koji prikazuje sve slivnike ili oblasti internog sliva. Slivnik je ćelija ili skup prostorno povezanih ćelija sa smerom toka kome se ne može dodeliti jedna od osam važećih vrednosti u rasteru smera toka. Ovo može da se desi kada su sve susedne ćelije sa višim vrednostima nego ćelija koja se obrađuje ili kada dve ćelije teku jedna u drugu, kreirajući pritom dvoćelijsku petlju.<div><br/>Funkcija Sink podržava samo D8 ulazni sloj rastera smera toka. D8 smerovi toka mogu da budu kreirani korišćenjem funkcije Flow Direction i da rade sa podrazumevanim tipom D8 smera toka. Izlazna vrednost Sink funkcije je celobrojni raster, gde je svakom slivniku dodeljena jedinstvena vrednost. Ove jedinstvene vrednosti su u opsegu između broja jedan i ukupnog broja slivnika. Na primer, ako je ukupan broj slivnika 1000, jedinstvene vrednosti su u opsegu od 1 do 1000.</div>",
		aggregateName: "Grupiši",
		aggregateSnip: "Kreira verziju rastera sa smanjenom rezolucijom.",
		aggregateDesc: "Funkcija Agregacije kreira ponovo ulazni raster za grublju rezoluciju na osnovu određene navedene strategije. Svaka izlazna ćelija sadrži zbir, minimum, maksimum, srednju ili središnju vrednost koje su usmerene prema opsegu te ćelije.<div><br/>Faktor kojim se množi veličina ćelije ulaznog rastera. Na primer, faktor vrednosti ćelije od tri doneo bi rezultat u odlaznoj ćeliji koji je tri puta veći od ulaznog rastera. Možete da definišete kako da rukujete opsegom izlaza ako broj redova ili kolona u ulazu nije tačan proizvod faktora ćelije. Podrazumevano, gornja i desna granica biće proširene da pokriju najveći spatijalni opseg koji je u ulaznom rasteru, da bi se osiguralo da su sve ulazne ćelije obrađene. Ili, gornja i desna granica mogu da se smanje da bi pokrile manji opseg, tako da broj redova i kolona koje su obrađene bude tačan proizvod faktora ćelije. Možete da definišete kako ćelije NoData treba obrađivati u agregatnoj kalkulaciji. Podrazumevani mehanizam je da će ulazne NoData ćelije koje potpadaju u spatijalni opseg ili veće ćelije u izlaznom rasteru biti ignorisane prilikom određivanja vrednosti te izlazne ćelije. Ili, možete da navedete ako postoji čak i jedna ulazna NoData ćelija u spatijalnom opsegu izlazne ćelije, ta ćelija će biti NoData u izlaznom rasteru.</div>",
		ccdcName: "CCDC analiza",
		ccdcSnip: "Procenjuje promene u vrednosti piksela tokom vremena korišćenjem algoritma za detekciju kontinualne promene i klasifikaciju (CCDC) i kreira rezultate modela.",
		ccdcDesc: "Funkcija CCDC analize procenjuje promene u vrednosti piksela tokom vremena korišćenjem algoritma za detekciju kontinualne promene i klasifikaciju (CCDC) i kreira multidimenzionalni raster koji sadrži rezultate modela. Podržano je samo u kombinaciji sa detekcijom promena korišćenjem funkcije analize u šablonu funkcije rastera. Da bi se kreirao izlazni raster, povežite CCDC funkciju analize sa detekcijom promene pomoću analize promene, sačuvajte kao šablon funkcije rastera i pokrenite analizu rastera sa šablonom funkcije.<div><br/>Ova funkcija koristi algoritam za kontinualnu detekciju i klasifikaciju promene (CCDC) za procenu promena u vrednostima piskela tokom vremena za grupu slika. U vremenskoj seriji optičkih snimaka ili derivata snimaka (na primer, NDVI), vredosti piksela mogu da se menjaju iz nekoliko razloga: 1. Sezonska promena -- Promene vrednosti piksela reflektuju promene u vegetaciji zbog sezonskih promena temperature i padavina. Na severnoj hemisferi, na primer, očekujemo da vidimo veću gustinu zelene vegetacije leti u odnosu na zimu; 2. Postepena promena -- Promene u vrednosti piksela prikazuju trendove u vegetaciji ili na površini vode zbog klimatskih promena ili dugoročnih postupaka za uređenje zemljišta. Na primer, golo zemljište može vremenom da povećava površinu zbog dugoročnog nedostatka padavina; i 3. Nagla promena -- Promene u vrednosti piksela prikazuju promene u pokrivaču zemljišta do kojih dolazi iznenada usled nestanka šuma, urbanog razvoja, prirodne katastrofe i slično. CCDC algoritam identifikuje sve tri vrste promene uz primarnu svrhu da identifikuje naglu promenu. Harmonska regresija i modeli trenda su usklađeni sa podacima za procenu sezonskih i postepenih promena, i iznenadnih devijacija od modela trenda koji ukazuju na nagle promene.<div><br/>CCDC algoritam je prvobitno dizajniran za Landsat TM, Landsat ETM+ i Landsat OLI podatke za refleksiju površine ili podatke za temperaturu osvetljivanja. HoIpak, funkcija detekcije promene korišćenjem analize promene u spoju sa ovom funkcijom detektovaće promenu za višestruki opseg snimaka sa bilo kog podržanog senzora, kao i sa snimka sa jednim opsegom dobijenog iz takvih opsega indeksa. Na primer, možete da obavite kontinualnu detekciju promene na indeksu normalne razlike vegetacije (NDVI) rastera, jer nagle promene u NDVI mogu da budu pokazatelj uklanjanja šuma.</div>",
		computeChangeName: "Compute Change",
		computeChangeSnip: "Izračunava razliku između dva kategorična ili kontinualna rasterska skupa podataka.",
		computeChangeDesc: "Funkcija Compute Change može se koristiti za nabrajanje razlika između dva klasifikovana rastera za analizu promene površine zemljišta ili se može koristiti za ispitivanje promena između dva jednopojasna kontinualna rastera, kao što su elevacija, temperatura, gornji deo pokrova i tako dalje.",
		detectChangeName: "Otkrivanje promena pomoću analize promena",
		detectChangeSnip: "Kreira sloj rastera koji sadrži informacije za promenu piksela korišćenjem rastera za analizu odlazne promene.",
		detectChangeDesc: "<div>Otkrivanje promena upotrebom funkcije analize promena kreira sloj rastera koji sadrži informacije za promenu piksela korišćenjem rastera za analizu promene. Da biste promenili raster za analizu morate generisati pomoću analize promena koristeći CCDC alatki ili analize promena koristeći LandTrendr alatki, ili CCDC funkcije analize rastera ili LandTrendr funkcije analize rastera.</div><br><div>Ova funkcija rastera može se kombinovati sa CCDC funkcije analize rastera ili LandTrendr funkcije analize rastera u šablonu rasterske funkcije. Za proizvodnju trajnog raster izlaza, povežite CCDC analizu ili LandTrendr funkciju analize izlaza na otkrivanje promena koristeći funkcije analize promena, sačuvati kao šablon rasterske funkcije i pokrenuti raster analizu sa šablonom.</div><br><div> <strong>Promena tipa</strong> parametra označava informacije koje se generišu. Informacije su izvučene iz rastera za analizu promena. Kada koristite ovu funkciju na izlazu iz CCDC funkcije/alatki, možete birati između sledećih opcija:</div><ul><li><strong>Vreme najnovije promene</strong>-- Najnoviji datum i vreme na kojoj je piksel bio označen kao promenjen.</li><li><strong>Vreme najranije promene</strong>--Najraniji datum i vreme na kojoj je piksel bio označen kao promenjen.</li><li><strong>Vreme najveće promene</strong>--Datum i vreme gde je izračunata promena je značajna za piksel.</li><li> <strong>Broj promena</strong>-- Ukupan zbir promena piksela.</li></ul><div> Kada koristite ovu funkciju na izlaz iz LandTrendr funkcije/alatki, sledeće dodatne opcije su dostupne: :</div><ul><li><strong> Vremne najduže promene</strong>--Datum na kojoj piksel je označen kao menja se, na početku ili kraju najdužeg perioda promene.</li><li><strong> Vreme najkraće promene</strong>-Datum na kojoj piksel je označen kao menja se, na početku ili kraju najkraćeg perioda promene.</li><li><strong>Vreme najbrže promene</strong>-- Datum na kojoj piksel je označen kao menja se, na početku ili kraju najbržeg perioda promene.</li><li><strong>Vreme najsporije promene</strong>-- Datum na kojoj piksel je označen kao menja se, na početku ili kraju najsporijeg perioda promene.</li></ul><div>Izlazni raster je raster višeg opsega na kojoj opseg sadrži promenjene informacije u zavisnosti označenog tipa promene i maksimalni broj navedenih promena. Na primer, ako<strong>promena tipa</strong> je podešen na<strong>Vreme najranije promene</strong> i <strong>Maksimalni broj promena</strong> je podešen na 2, ova funkcija izračunava dva najranija datuma promene koje su se desile za niz svakog piksela. Rezultat rastera u kome prvi opseg sadrži datume najranije promene po pikselu i drugi opseg sadrži datume druge najranije promene po pikselu.</div><br><div> Kada primenjujete ovu funkciju na izlazu iz LandTrendr alatki, možete da birate da izdvojite datume koje označavaju pocčetak ili kraj promene koristeći parametre<strong>Datum segmenta</strong>. Na primer, da biste razumeli najranije promene kada je serija počela, podesite<strong>Promena tipa</strong>u<strong>Vreme najskorije promene</strong> i <strong>Datum segmenta</strong> u <strong>Početak segmenta</strong>.</div><br><div> Koristeći sledeće parametre filtriranja da izdvojite određene datume promene iz promene rastarske analize:</div><ul><li><strong>Filtriraj po godini</strong>--Identifikujte promene koje su se dogodile u određenom vremenskom periodu, na primer, ako tražite promene koje su se dogodile u pejzažu tokom pet godina suše. .</li><li><strong>Filtriraj prema trajanju</strong>--Identifikujte promene koje su se dogodile tokom datog raspona godina, na primer, ako samo tražite nagle promene koje su se dogodile pre 1 ili 2 godine. Koristeći ovu formulu možete izračunati trajnost koje vas interesuje<strong> kraj godine - početak godine +1</strong>. Praznine u vreme serije biće uključene.</li><li><strong>Filtriraj prema jačini</strong>--Identifikujte promene date jačine, na primer, ako samo tražite velike promene indeks vegetacije NDVI. Veličina je apsolutna vrednost, tako da minimalna i maksimalna vrednost ne mogu biti negativne. Specifikovati promenu smera, koristite<strong>Change Direction(promena smera)</strong> trajno.</li></ul>",
		distanceAccumulationName: "Distance Accumulation",
		distanceAccumulationSnip: "Izračunava nagomilanu udaljenost svake ćelije do izvora, omogućavajući ravan pravac, razdaljinu troškova, stvarnu površinsku udaljenost, kao i vertikalne i horizontalne faktore troškova.",
		distanceAccumulationDesc: "Akumulacija udaljenosti izračunava udaljenost do svake lokacije u istraživanom području do najbližeg ili najmanje koštanog izvora. Ako su za unos predviđeni samo izvori, izračunava se pravolinijska udaljenost do svake lokacije u istraživanom području. Ako se i izvori i barijere koriste kao ulaz, tada akumulacija u daljini izračunava ravan pravac oko barijera. I za izvorni i za preprečni raster pozadinska vrednost treba da bude NoData, dok su izvori i barijere predstavljeni sa važećim vrednostima ćelije. Važeće vrednosti uključuju nulu. <div><br/> Kada se površinski raster unosi kao ulaz, tada se izračunava stvarna udaljenost površine između ćelija. Da biste izvršili analizu troškova koristeći akumulaciju na daljinu, potrebna je površina troškova. Ako se obezbedi površina troškova, rezultat je nagomilani rashod na udaljenosti od troškova. Kada se isporučuju horizontalni i vertikalni faktori, tada se usmerenost smatra nagomilanom troškom. Postoje četiri karakteristike izvora koje se mogu koristiti. Ove karakteristike, koje mogu biti izvori ili pokretači iz izvora, kontrolišu se posebnim parametrima: 1. Početna akumulacija: postavlja početni trošak pre nego što kretanje počne. 2 Maksimalna akumulacija: navodi koliko troškova jedan izvor može da akumulira pre nego što dosegne svoj limit. 3. Multiplikator koji se primenjuje na troškove: određuje način putovanja ili veličinu izvora. 4. Smer putovanja: potvrđuje da li pokretač počinje kod izvora i prelazi na lokacije koje nisu izvori, ili se pokreće na lokacijama koje nisu izvori i vraća se ka izvoru.<div><br/> Podrazumevano, rezultat akumulacije na daljinu je jedan opseg, što je rast akumulacije rastojanja. Međutim, može se stvoriti i drugi opseg, opseg povratnog smera. Ovaj opseg označava sa svake lokacije u studijskoj oblasti pravc u kom se ide kako bi se došlo do izvora sa najmanje troškova. Oba opsega biće potrebna za određivanje optimalnih putanja unutar područja ispitivanja. Da biste generisali putanju, prvo koristite funkciju Ektract Band da biste izdvojili rastvor akumulacije rastojanja i rastera u smeru nazad. Koristite ove slojeve kao ulaz za funkciju Cost Path. U funkciji koristite rast nagomilavanja rastojanja kao unos troška unosa rastera, a raster povratnog pravca kao unos povratnog linka troškova rastera.</div>",
		distanceAllocationName: "Raspoređivanje udaljenosti",
		distanceAllocationSnip: "Izračunava raspoređivanje udaljenosti za svaku ćeliju do dobijenih izvora na osnovu ravne linije, udaljenosti troškova, stvarne površinske udaljenosti, kao i vertikalnih i horizontalnih faktora troškova.",
		distanceAllocationDesc: "Raspoređivanje udaljenosti izračunava kom izvoru je dodeljena svaka lokacija u istraživanom području. Ako su za unos predviđeni samo izvori, onda se lokacije dodeljuju pravolinijskom udaljenošću do najbližeg izvora. Ako se i izvori i barijere koriste kao ulaz, tada raspoređivanje udaljenosti izračunava ravan pravac oko barijera kako bi odredio kojem izvoru se dodeljuje lokacija. I za izvorni i za preprečni raster pozadinska vrednost treba da bude NoData, dok su izvori i barijere predstavljeni sa važećim vrednostima ćelije. Važeće vrednosti uključuju nulu.<div><br/> Da biste izvršili analizu troškova pomoću raspodele udaljenosti, potrebna je površina troškova. Ako se obezbedi površina troškova, rezultat je raster raspodele na osnovu akumulativnog troška, a ne na pravolinijskoj udaljenosti. Kada se isporučuju horizontalni i vertikalni faktori, tada se usmerenost smatra nagomilanom troškom. Kada se površinski raster isporučuje kao ulaz, tada se računa stvarna udaljenost površine pređena između ćelija prilikom određivanja. Postoje četiri karakteristike izvora koje se mogu koristiti. Ove karakteristike, koje mogu biti izvori ili pokretači iz izvora, kontrolišu se posebnim parametrima: 1. Početna akumulacija: postavlja početni trošak pre nego što kretanje počne. 2 Maksimalna akumulacija: navodi koliko troškova jedan izvor može da akumulira pre nego što dosegne svoj limit. 3. Multiplikator koji se primenjuje na troškove: određuje način putovanja ili veličinu izvora. 4. Smer putovanja: potvrđuje da li pokretač počinje kod izvora i prelazi na lokacije koje nisu izvori, ili se pokreće na lokacijama koje nisu izvori i vraća se ka izvoru.<div><br/> Podrazumevano, rezultat raspoređivanja udaljenosti je jedan opseg, što je raster za raspoređivanje udaljenosti. Provera Buove opcije za generacijuizvornog reda i kolone kao dodatnih pojaseva u izlazu rezultiraće višepojasnim rasterom koji se sastoji od tri opsega. Prvi opseg je raster za alokaciju udaljenosti, drugi opseg sadrži indeks reda a treći opseg sadrži indeks kolone. Ova indeksiranja identifikuju lokaciju izvorne ćelije koja je najmanje akumulirani trošak za odlaznu udaljenost. Indeks izvornog reda i indeks izborne kolone može se koristiti zajedno za mapiranje intenziteta. Ako pitate bilo koju lokaciju u vašoj studijskoj oblasti u opsezima dva i tri, znaćete red i kolonu sa najmanje izvora troškova za tu lokaciju.</div>",
		eucBackDirectionName: "Euclidean Back Direction",
		eucBackDirectionSnip: "Proračunava, za svaku ćeliju, smer, u stepenima, za susednu ćeliju uz najkraću putanju nazad do najbližeg izvora uz izbegavanje barijera.",
		eucBackDirectionDesc: "Funkcija Euklidovog povratnom smeru donosi kontinualni raster sa plutajućom tačkom koji predstavlja pravac u stepenima najbliži prema izvoru, a pritom izbegava barijere ako su obezbeđene barijere.<div><br/> Ulazi u Euklidov povratni smer su izvor na koji će se izračunati pravac. Neobavezan unos je raster koji predstavlja barijere u području ispitivanja. I za izvorni i za raster barijere pozadinska vrednost treba da bude NoData, dok su izvori i barijere predstavljeni sa važećim vrednostima. Važeće vrednosti uključuju nulu. Prema zadatim postavkama, kalkulacija će se obraditi u kombinovanom obimu izvora i barijera, plus 2 reda i kolone. Ako je analiza potrebna samo na određenoj udaljenosti od izvora, tada se može koristiti parametar Maksimalna udaljenost. Euklidov povratni smer podržava i planarnu i geodetsku metodu u proračunu. Izračunavanje za planarni metod će se obaviti na projektovanoj ravni korišćenjem 2D Dekartovog koordinatnog sistema. Proračun geodezijske metode vrši se na elipsoidu, što znači da se, bez obzira na ulaznu ili izlaznu projekciju, rezultati ne menjaju.<div><br/> Rezultat funkcije Euklidovog povratnog smera može se upotrijebiti zajedno s rezultatom funkcije Euklidove udaljenosti za određivanje najkraćih staza od lokacija unutar područja proučavanja do izvora. I rezultat Euklidovog povratnog smera i rezultat Euklidove udaljenosti koriste se u funkciji troška puta zajedno sa destinacijama za generisanje najkraćih staza.</div>",
		expandName: "Proširi",
		expandSnip: "Proširi odabrane zone rastera po zonama za određeni broj ćelija.",
		expandDesc: "Pomoću globalne funkcije Proširi možete generalizovati ili pojednostaviti rastere povećavajući određene zone. Takođe možete da kontrolišete količinu generalizacije koja će se dogoditi.<div><br/>Zone koje odaberete će se povećavati u veličini širenjem u druge zone. Koncepcijski, odabrane vrednosti zona mogu se posmatrati kao prednje zone, dok ostale vrednosti ostaju pozadinske zone. Zone prednjeg plana mogu se proširiti u pozadinske zone.<div><br/> Količina generalizacije može se kontrolisati parametrom Broj ćelija. Podrazumevano je ova vrednost 1, što znači da će se odabrane zone proširiti za količinu koja odgovara veličini jedne ćelije. Da biste povećali stepen generalizacije, možete da odredite veću vrednost za ovaj parametar. U konceptualnom smislu ovo je kao pokretanje alata onoliko puta koliko je brojeva navedeno, a rezultati prethodnog izvođenja su ulaz u narednu iteraciju.</div>",
		trendAnalysisName: "Generate Trend",
		trendAnalysisSnip: "Procenjuje trend svakog piksela duž dimenzije za jednu ili više promenljivih u višedimenzionalnom rasteru.",
		trendAnalysisDesc: "<div>Ova funkcija može da se koristi za uklapanje podataka duž linearne, harmonične ili polinomske linije trenda, ili se možete koristiti za otkrivanje trendova pomoću Mann-Kendall ili Sezonski-Kendall test.</div><br><div>Izlaz rastera trenda generisana je ovom funkcijom koristi se kao ulaz u<strong>Predviđanja pomoću trenda</strong>funkciju.</div><br><div> Mann-Kendall i Sezonski-Kendall test se koriste da biste utvrdili da li posotji monotoni trend u podacima. Oni su neparametarski, što znači da oni ne pretpostavljaju određenu distribuciju podataka. Mann-Kendall test ne razmatra serijsku korelaciju ili sezonske efekte. Ako su podaci sezonski, Sezonski-Kendall test je prikladniji .</div><br><div>Ako se alatka koristi da izvede ili Mann-Kendall ili Sezonski-Kendall test, izlaz je peti-opseg rastera prateći :</div><ul><li>Opseg 1 = Sen nagib</li><li>Opseg 2 = p-vrednost </li><li>Opseg 3 = Mann-Kendall ocena(S)</li><li>Opseg 4= S</li><li> odstupanje</li><li>Opseg 5 = Z-odstupanje</li></ul><div>Izlaz iz Mann-Kendall ili Sezonski-Kendall test može se koristiti da odredi koji piksel u vaše višedimenzionalno vreme serije ima statistički značajan trend- Možete da koristite ove informacije kao veznik sa linearnom, harmooničnom ili polinomom analizom trenda da izdvojite značajne trendove u vreme vaše serije. Možete da generišete masku uključujući piksele sa značajnim p-vrednostima, primenite masku višedimenzionalnom rasteru i iskoristite maskiran višedimenzionalni raster kao ulaznu alatku da biste izvršili linearnu, harmoničnu ili polinomnu analizu trenda.</div><br><div>Postoje opcije linije trenda za prilagođavanje trenda promnljivim vrednostima duž dimenzije: linearna, polinomna i harmonična .</div><br><div> Za linearnu analizu trenda, izlaz je raster trećeg opsega prateži:</div><ul><li>Opseg 1 = Nagib</li><li>Opseg 2 = Prekid</li><li>Opseg 3 = Srednja kvadratna greška(RMSE) ili greška oko linije koja najbolje odgovara</li></ul><div> Za polinomnu analizu trenda, broj opsega u ulazu zavisi od reda ppolinoma. Drugi redosled polinomnog uklapanja daje raster četvrtog-opsega gde sledi:</div><ul><li>Opseg 1 = Polinom_2</li><li>Opseng 2 = Polinom_1</li><li>Opseg 3 = Polinom_0</li><li>Opseg 4 = RMSE</li></ul><div> Treći redosled polinomnog uklapanja daje peti-opseg rastera kao što sledi:</div><ul><li>Opseg 1 = Polinom_3</li><li>Opseg 2 = Polinom_2</li><li>Opseg 3 = Polinom_1</li><li>Opseg 4 = Polinom_0</li><li>Opseg 5 =RMSE</li></ul><div>Za harmonizovanu analizu trenda, broj opsega u izlazu zavise od harmonizovane učestalosti. Kada je učestalost podešena na 1, izlaz je raster petog-opsega koji sledi:</div><ul><li>Opseg 1 = Nagib</li><li>Opseg 2 = Prekid</li><li>Opseg 3 = Harmonični_sin1</li><li>Opseg 4 = Harmonični_cos1</li><li>Opseg 5 = RMSE</li></ul><div>Kada je učestalost podešena na 2, izlaz je raster sedmog-opsega koji sledi:</div><ul><li>Opseg 1 = Nagib</li><li>Opseg 2 = Prekid</li><li>Opseg 3 = Harmonični_sin1</li><li>pseg 4 = Harmonični_cos1</li><li>Opseg 5 = Harmonični_sin2</li><li>Opseg 6 = Harmonični_cos2</li><li>Opseg 7 = RMSE</li></ul><div> <strong>Dužina ciklusa</strong> parametar za harmončnu analizu trenda se koristi da pokaže broj i dužinu ciklusa podataka koju očekujete da vidite tokom dana ili godine. Na primer, ako očekujete da vaši podaci prođu kroz dve varijacije ciklusa za godinu dana, dužina ciklusa će biti 182.5 dana ili 0.5 godina. Ako imate podatke o temperaturi koja se prikuplja svaka tri sata i ima samo jedna varijacija ciklusa za dan, dužina ciklusa je jedan dan.</div><br><div> <strong>Učestalost</strong> parametra za harmonizovanu analizu trenda se koristi da opise harmonizovani model koji odgovara podacima. Ako je učestalost podešena na 1, kombinacija linearne i prvi red harmonizovane krive se koristi da uklopi model. Ako je učestalost na 2, kombinacija linearne, prvi red harmonizovane krive i drugi red harmonizovane krive se koristi da uklopi podatke. Ako je učestalost na 3, dodatni treći red harmonizovane krive će se koristiti za modelovanje podataka i tako dalje.</div><br><div>Statistike modela dobrog prilagođavanja mogu se generisati kao opcionalni rezultati. Koren srednje kvadratne greške(RMSE), R-kvadrat i nagib trenda p-vrednosti mogu se izračunati i simbolizovati. Simbolizujte izlazni sloj rastera koristeći<strong>RGB</strong> simbologiju i specifikovati statistiku kao opseg crvene, zelene i plave.</div><br>",
		spectralUnmixingName: "Linear Spectral Unmixing",
		spectralUnmixingSnip: "Obavlja klasifikaciju subpiksela i izračunava frakcijsko obilje različitih tipova pokrivača za pojedine piksele.",
		spectralUnmixingDesc: "Funkcija Linear Spectral Unmiking izračunava frakcijski pokrivač za pojedinačne piksele koji sadrže više vrsta pokrivača zemljišta. Stvara se višepojasni sloj, pri čemu svaki opseg odgovara frakcionom obilju svake klase pokrivača. Na primer, možete da ga upotrebite za klasifikaciju pokrivača zemljišta na multispektralnoj slici da biste identifikovali fotosintetičku vegetaciju, golo tlo i mrtvu ili nefosintetičku vegetaciju.<div><br/> Redosled izlaznog višepojasnog rastera sledi redosled profila ulaznog spektra. Broj časova ne može preći broj opsega u ulaznom rasteru. Na primer, ne možete da izvučete informacije o više od 8 klasa iz rastera sa 8 opsega.</div>",
		multidimensionalFilterName: "Višedimenzionalni filter",
		interpolateRasterByDimensionFunctionName: "Interpolacija rastera po dimenziji",
		interpolateRasterByDimensionFunctionSnip: "Interpolira višedimenzionalni raster na određenim vrednostima dimenzija koristeći susedne isečke.",
		interpolateRasterByDimensionFunctionDesc: "<p>Ova funkcija vam omogućava da procenite vrednosti piksela za nedefinisani isečak dimenzije u višedimenzionalnom rasteru. Na primer, ako imate skup podataka koji sadrži temperaturu okeana na površini i na 100 metara ispod nivoa mora i želite da procenite temperaturu na 50 metara ispod nivoa mora, možete da koristite ovu funkciju da biste dobili procenu na toj dubini koristeći definiciju dimenzije „Prema vrednostima“.</p><p>Takođe, možete da degradirate mesečni skup podataka u dnevni skup podataka koristeći definiciju dimenzije „Prema intervalu“ i navodeći vrednost parametra koraka kao 1 i vrednost parametra jedinice kao „Dani“.</p><p>Koristite definiciju dimenzije „Prema ciljnom rasteru“ da biste procenili vrednost za ciljni raster.</p>",
		multidimensionalFilterSnip: "Stvara rasterski sloj iz višedimenzionalnog rasterskog skupa podataka ili višedimenzionalnog sloja rastera presecanjem podataka duž definisanih varijabli i dimenzija.",
		multidimensionalFilterDesc: "Multidimenzionalni filter stvara višedimenzionalni rasterski sloj filtriranjem i ekstrakcijom podskupa promenljivih iz višedimenzionalnog rastera. Na primer, imate višedimenzionalni skup podataka koji sadrži 30 godina mesečnih podataka o padavinama i želite samo da izvučete podatke za svaki januar da biste videli kako su se padavine promenile za taj mesec.<div><br/> Upotrebite parametar Definicija dimenzije za isecanje dimenzija koristeći interval, vrednost ili raspon vrednosti. Na primer, ako imate 10 godina podataka o slanosti okeana, prikupljenih mesečno i na svaka 2 metra dubine do 500 metara, možda biste koristili različite opcije definicije dimenzija za sledeće scenarije. Scenario 1: Izdvojite podatke o slanosti za januar mesec tokom perioda od 10 godina. Izaberite Prema vrednostima, postavite Dimenziju na StdTime i postavite Vrednosti na januar. Scenario 2: Isecanje podataka o slanosti u dubini od 0 do 150 metara. Izaberite Prema rasponima, postavite Dimenziju na StdZ i postavite Minimalnu vrednost na -150, a maksimalnu vrednost na 0. Scenario 3: Izdvojite podatke o slanosti prvih 10 dana svakog januara u periodu od 10 godina. Izaberite Iteracijom, postavite Dimenziju na StdTime, postavite Početak prve iteracije i Kraj prve iteracije na odgovarajući početak i kraj perioda ponavljanja, postavite Korak na 1 i postavite Jedinicu na Godine.</div>",
		multidimensionalRasterName: "Multidimenzionalni raster",
		multidimensionalRasterSnip: "Dodaje višedimenzionalne podatke na mapu kao višedimenzionalni rasterski sloj.",
		multidimensionalRasterDesc: "Multidimenzionalna Rasterska funkcija dodaje višedimenzionalne podatke mapi kao višedimenzionalni rasterski sloj. Ova funkcija je korisna pri izvođenju radnih procesa analize rastera korišćenjem funkcijskog lanca.<div><br/> Podržani višedimenzionalni skupovi podataka o rasterima uključuju netCDF, GRIB, HDF i CRF kompanije Esri. Podržani su i višedimenzionalni skupovi podataka mozaika.</div>",
		optimalPathAsRasterName: "Optimal Path As Raster",
		optimalPathAsRasterSnip: "Izračunava putanju sa najmanjim troškovima od izvora do odredišta.",
		optimalPathAsRasterDesc: "Ova funkcija proizvodi izlazni raster koji beleži optimalnu putanju ili putanje od izabranih lokacija do najbliže ćelije izvora koja je definisana u okviru površi akumulativnog troška, u pogledu rastojanja troška.<div><br/> Jedna ili više ponderisanih troškovnih funkcija (Nakup udaljenost ili rastojanje na daljinu) obično se moraju izvesti pre pokretanja funkcije Optimal Path As Raster za kreiranje rastovanja nakupljanja ulaznog rastojanja i rastera u smeru nazad. Ovo su obavezni ulazni rasterski slojevi u funkciju Optimalni put. Vrednosti na izlaznom optimalnom putu predstavljaju broj staza na određenoj lokaciji. U mnogim slučajevima staze slede istu rutu, ostavljajući izvor i zatim odlaze na različite destinacije. Na primer, vrednost jedan ukazuje da postoji samo jedan optimalni put na određenoj lokaciji, dok vrednost pet znači da na toj lokaciji postoji pet optimalnih staza koje prolaze kroz tu ćeliju u području ispitivanja.<div><br/> Ulazni odredišni podaci moraju biti rasterski sloj. Skup odredišnih ćelija sastoji se od svih ćelija u ulaznom rasteru koje imaju validne vrednosti. Ćelije koje imaju NoData vrednosti nisu uključene u skup. Nulta vrednost smatra se legitimnim odredištem. Odredišni raster može se kreirati pomoću alata za ekstrakciju. Ako imate odredišne ili izvorne funkcije, možete ih pretvoriti u raster pomoću funkcije Rasterize Features Koristite akumulaciju razdaljine u povratni smer rastera, kao rasterski ulaz u funkciji rasterizacije. Ovo će osigurati da se funkcija rasterizuje korišćenjem iste veličine, stepena i prostorne reference ćelije kao i ostali rasteri koji idu u funkciju Optimal Path As Raster. Optimalna funkcija As Raster može se koristiti i za dobijanje puta najmanjeg otpora prema digitalnom modelu elevacije (DEM). U ovom slučaju koristite DEM za raster akumulacije ulaznog rastojanja i izlaz iz funkcije usmerenja protoka za povratni smer Rastera.</div>",
		trendName: "Predict Using Trend",
		trendSnip: "Izračunava prognozirani višedimenzionalni rasterski sloj koristeći izlazni raster trenda iz funkcije Generate Trend ili Generate Trend Raster alata za geoprocesiranje.",
		trendDesc: "Funkcija Predict Using Trend izračunava predviđeni višedimenzionalni rasterski sloj koristeći izlazni raster trenda iz funkcije Generate Trend ili Generate Trend Raster alata za geoprocesiranje.",
		rasterCollectionName: "Obrada kolekcije rastera",
		rasterCollectionSnip: "Obrađuje svaki isečak u višedimenzionalnom rasteru ili svaku stavku u mozaičnom rasteru. Ova funkcija takođe može da objedini više odsečaka u jednan odsečak.",
		rasterCollectionDesc: "Funkcija Process Raster Collection obrađuje svaki isečak u višedimenzionalnom rasteru ili svaku stavku u mozaičkom rasteru. Ova funkcija takođe može da objedini više odsečaka u jednan odsečak.<div><br/> Ova funkcija obrađuje svaki isečak u višedimenzionalnom rasterskom ili mozaičnom rasteru koristeći predložak rasterske funkcije. Ova funkcija podržava sledeće opcije: 1. Navedite predložak rasterske funkcije za funkciju predmeta. Na primer, imate mozaički skup podataka koji sadrži 20 godina Landsat snimaka i želite da izračunate NDVI za svaku scenu u vremenskoj seriji. Za stavku Funkcija odredite predložak rasterske funkcije koji sadrži rastersku funkciju NDVI. 2 Navedite predložak rasterske funkcije za Funkciju združivanja. Na primer, imate višedimenzionalni raster koji sadrži podatke o dnevnoj temperaturi od 10 godina i želite da izračunate maksimalnu temperaturu za svaku godinu. U funkciji združivanja odredite predložak rasterske funkcije koji sadrži funkciju ćelije za statistiku, a operacija je postavljena na maksimum. U odeljku Definicija agregacije postavite Dimension na StdTime, postavite Type to Interval Keivord i postavite Interval za ključnu reč na Godišnje. Imajte na umu da ako skup podataka ulaza mozaika nije višedimenzionalan, funkcija združivanja neće poštovati definiciju združivanja. Funkcija združivanja objediniće sve stavke ili svaku grupu u jednu ako su definisane u šablonu funkcije združivanja. Za više informacija o korišćenju grupa u skupu podataka o mozaicima pogledajte odeljak Korišćenje stavki skupa podataka Mozaik u šablonama Raster funkcije. 3. Navedite predložak rasterske funkcije za obradu funkcije. Funkcija ili funkcijski lanac u ovom šablonu koriste se za prikaz novog obrađenog rastera. Na primer, odredite predložak rasterske funkcije koji sadrži funkciju Colormap da biste promenili način na koji se prikazuje obrađeni rasterski sloj. Imajte na umu da ako je ulaz višedimenzionalni raster, funkcija obrade se primenjuje na trenutni isečak. Ako je ulaz sloj mozaika ili skup mozaika, funkcija obrade se primenjuje na mozaički raster pomoću Prve metode za rešavanje preklapanja. 3. Navedite predloške za bilo koju kombinaciju tri funkcije. Na primer, imate skup mozaika koji sadrži slike vremenske serije Landsat i želite da kerirate kompozitni snimak maksimalnog NDVI. Za stavku Funkcija odredite predložak rasterske funkcije koji sadrži rastersku funkciju NDVI. Za funkciju združivanja odredite predložak rasterske funkcije koji sadrži funkciju ćelije za statistiku, a operacija je postavljena na maksimum. Za funkciju obrade odredite predložak rasterske funkcije koji sadrži funkciju Colormap. Imajte na umu da redosled obrade funkcija sledi redoslijed ulaznih parametara. Na primer, funkcija stavke će se prvo obraditi.</div>",
		randomName: "Nasumično",
		randomSnip: "Stvara rastvor sa slučajnim vrednostima piksela izvučenim iz pseudo slučajne distribucije. Podržano je nekoliko distribucija i generatora slučajnih brojeva.",
		randomDesc: "Funkcija Random stvara raster sa vrednostima slučajnih piksela koji se može koristiti u šablonskim funkcijama rastera ili skupovima mozaika podataka.<div><br/> Iako mnoge funkcije rade na jednom ili više ulaznih rastera, funkcija Random ne zahteva ulazni raster. To znači da se ponaša više poput rasterskog skupa podataka nego funkcije, tako da morate posebno paziti kada ga dodate ili uklonite iz lanca funkcija.</div>",
		shrinkName: "Skupljanje",
		shrinkSnip: "Smanjuje izabrane zone na određeni broj ćelija zamenjujući ih vrednošću ćelije koja je najčešće u njenom okruženju.",
		shrinkDesc: "Pomoću globalne funkcije Shrink, možete generalizovati ili pojednostaviti rastere čineći pojedine zone manjim. Takođe možete da kontrolišete količinu generalizacije koja će se dogoditi.<div><br/> Zone koje odaberete smanjiće se ili će imati manju veličinu, tako što će se ćelije iz okolnih zona proširiti u njih. Koncepcijski, odabrane vrednosti zona mogu se posmatrati kao prednje zone, dok ostale vrednosti ostaju pozadinske zone. Ćelije u prednjem planu zone mogu se zameniti ćelijama u pozadinskim zonama. Tanki otoci unutar zone koji se mogu posmatrati kao deljenje granica sa zonom takođe se mogu zameniti.<div><br/> Količina generalizacije može se kontrolisati parametrom Broj ćelija. Podrazumevano je ova vrednost 1, što znači da će se odabrane zone smanjiti za količinu koja odgovara veličini jedne ćelije. Da biste povećali stepen generalizacije, možete da odredite veću vrednost za ovaj parametar. U konceptualnom smislu ovo je kao pokretanje alata onoliko puta koliko je brojeva navedeno, a rezultati prethodnog izvođenja su ulaz u narednu iteraciju.</div>",
		trendToRGBName: "Trend To RGB",
		trendToRGBSnip: "Pretvara trend rastera u raster sa tri opsega (crvena, zelena i plava).",
		trendToRGBDesc: "Funkcija Trend To RGB pretvara trend rastera u raster u tri opsega (crveni, zeleni i plavi). Raster trenda je generisan iz funkcije Generate Trend raster ili iz rastera funkcije CCDC analize.<div><br/> Ova funkcija je korisna za vizuelizaciju podataka o koeficijentima modela iz funkcije Generate Trend ili CCDC analize. Obe funkcije procenjuju trendove promene vrednosti piksela, ali je rezultate funkcija teško direktno protumačiti.<div><br/> Kao i mnoge rasterske funkcije, možda će biti potrebno da koristite prilagođavanje dinamičkog raspona (DRA) da biste bolje prikazali rezultate ove funkcije.</div>",
		landTrendrName: "LandTrendr analiza",
		landTrendrSnip: "Procenjuje promene vrednosti piksela tokom vremena koristeći Landsat metodu otkrivanja trendova poremećaja i oporavka (LandTrendr) i generiše raster za analizu promena koji sadrži rezultate modela.",
		landTrendrDesc: "Ova rasterska funkcija može da se koristi samo kao unos za rastersku funkciju otkrivanja promena pomoću analize promena. Da biste generisali rasterski izlaz, povežite funkciju LandTrendr analize sa funkcijom otkrivanja promena pomoću analize promena u šablonu rasterske funkcije i koristite šablon kao unos u alatki za geoprocesiranje koja se zove „Generisanje rastera iz rasterske funkcije“. Rezultat je raster koji sadrži informacije o vremenu u kojem su se vrednosti piksela promenile.<div><br>Svrha ove rasterske funkcije je da izdvoji promene u posmatranom geoobjektu, tako da idealni ulazni višedimenzionalni snimci sadrže dosledno posmatranje tokom vremena i ne uključuju atmosferske smetnje ili smetnje na senzorima, oblake ili senku oblaka. Najbolja praksa je korišćenje podataka koji su normalizovani i mogu da budu maskirani pomoću QA opsega, na primer proizvodi sa maskom za oblake iz Landsat kolekcije 1 - Površinska refleksija.<div><br>Ova funkcija vrši analizu na jednom snimku godišnje, a broj godišnjih isečaka mora da bude jednak ili veći od vrednosti navedene u parametru <strong>Minimalan broj opservacija</strong>. Preporučeno je da imate podatke za najmanje šest godina.<div><br>Ako imate podatke na mesečnom, sedmičnom ili dnevnom nivou, preporučuje se da selektujete nekoliko snimaka iz svake godine (po mogućnosti iz istog godišnjeg doba), uklonite oblake i senku oblaka i kombinujete snimke da biste generisali jedan snimak sa dobrom opservacijom. Ako su podaci na mesečnom, sedmičnom ili dnevnom nivou dostavljeni kao ulazni višedimenzionalni raster, funkcija će identifikovati jedan isečak za analizu na osnovu datuma koji je najbliži datumu navedenom u parametru <strong>Datum kačenja</strong>.<div><br>Uglavnom će biti potrebno neko vreme da se geoobjekat u predelu oporavi od trenutnih promena, kao što je šumski požar ili najezda insekata. Da biste kontrolisali brzinu oporavka koju prepoznaje ovaj model, podesite parametar za prag oporavka. Određeni segment ne može da ima brzinu oporavka koja je veća od 1/prag oporavka.<div><br>Oporavak od promene u predelu može da ide u pozitivnom ili negativnom smeru. Na primer, kada neki predeo zadesi gubitak šume, vremenska serija vrednosti indeksa vegetacije pokazuje pad vrednosti indeksa, dok oporavak pokazuje postepeno povećanje vrednosti indeksa vegetacije ili pozitivan trend oporavka. Navedite smer trenda oporavka pomoću parametra <strong>Oporavak ima trend povećanja</strong>.",
		aggregateMultidimensionalName: "Agregatna višedimenzionalna funkcija",
		aggregateMultidimensionalSnip: "Kombinuje podatke postojećih promenljivih višedimenzionalnog rastera duž dimenzije.",
		aggregateMultidimensionalDesc: "Agregatna višedimenzionalna funkcija kreira sloj višedimenzionalnog rastera kombinovanjem podataka postojećih promenljivih višedimenzionalnog rastera duž dimenzije.<div><br>Koristite parametar <strong>Definicija dimenzije</strong> da biste prvo filtrirali ulazne podatke koje želite da grupišete. Na primer, ako imate 30 godina u podacima na mesečnom nivou, a želite da kreirate agregatni sloj samo za prvih 15 godina, možete da koristite parametar <strong>Definicija dimenzije</strong> da biste naveli godine koje će biti uvrštene u analizu.<div><br><ul><li>Izdvojite podatke o salinitetu za mesec januar tokom desetogodišnjeg perioda. Odaberite <strong>Prema vrednostima</strong>, podesite <strong>Dimenziju</strong> na <strong>Standardno vreme</strong>, i <strong>Vrednosti</strong> na <strong>januar</strong>.</li><li>Uradite presek podataka o salinitetu u rasponu dubine od 0 do 150 metara. Odaberite <strong>Prema rasponu</strong>, podesite <strong>Dimenziju</strong> na <strong>StdZ</strong>, i podesite <strong>Minimalna vrednost</strong> na <strong>-150</strong> i <strong>Maksimalna vrednost</strong> na <strong>0</strong>.</li><li>Izdvojite podatke o salinitetu za mesec januar tokom desetogodišnjeg perioda. Odaberite <strong>Prema ponavljanju</strong>, podesite <strong>Dimenziju</strong> na <strong>Standardno vreme</strong>, podesite <strong>Početak prvog ponavljanja</strong> i <strong>Završetak prvog ponavljanja</strong> na odgovarajuće vreme početka i završetka perioda ponavljanja, podesitet <strong>Korak</strong> na <strong>1</strong>, i <strong>Jedinica</strong> na <strong>Godine</strong>.</li></ul><div><br>Koristite parametre za <strong>Definicija grupisanja</strong> da biste odabrali dimenziju za procenu i interval grupisanja pomoću ključne reči, vrednosti ili raspona vrednosti. Na primer, ako imate 30 godina u podacima o temperaturi površine mora koji su sakupljeni na svakih 5 metara dubine do 100 metara, možete da koristite različite opcije intervala za sledeće scenarije:<div><br><ul><li>Objedinite podatke o temperaturi na dnevnom nivou u mesečne podatke, pri čemu je rezultat višedimenzionalni raster sa 12 vremenskih isečaka, a svaki isečak predstavlja zbir svakog meseca tokom svih godina. Odaberite <strong>Ključna reč intervala</strong> i podesite ključnu reč na <strong>Mesečno ponavljanje</strong>.</li><li>Objedinite podatke o temperaturi na dnevnom nivou u mesečne podatke, pri čemu je rezultat višedimenzionalni raster sa 360 isečaka ili 12 vremenskih isečaka po godini (30 godina x 12 meseci = 360 isečaka). Odaberite <strong>Ključna reč intervala</strong> i podesite ključnu reč na <strong>Mesečno</strong>.</li><li>Objedinite podatke o temperaturi na mesečnom nivou u intervale od 4 meseca. Choose <strong>Vrednost intervala</strong>, podesite <strong>Interval vrednosti</strong> na 4, a <strong>Jedinicu</strong> na <strong>Meseci</strong>.</li><li>Objedinite podatke o temperaturi sa 0 do 25 metara, zatim sa 25 do 50 metara i sa 50 do 100 metara. Odaberite <strong>Rasponi intervala</strong> i navedite minimalnu i maksimalnu dubinu kao <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Objedinjavanje rastera",
		mergeRastersSnip: "Kombinuje više skupova rasterskih podataka prostorno ili između promenljivih i dimenzija.",
		mergeRastersDesc: "Ova funkcija kreira objedinjeni raster od liste rastera. Na primer, ako imate mozaični skup podataka koji sadrži 30 godina u podacima o padavinama na mesečnom nivou i skup podataka koji sadrži 10 godina podataka o temperaturi na mesečnom nivou, možete da kombinujete ta dva skupa u višedimenzionalni raster sa obe promenljive. <div><br>Ako ulazni višedimenzionalni rasteri sadrže različite promenljive, izlazni višedimenzionalni raster će sadržati sve promenljive. <div><br>Ako ulazni višedimenzionalni rasteri sadrže različite dimenzije ili vrednosti dimenzija, izlazni višedimenzionalni raster će sadržati sve dimenzije i vrednosti dimenzija. <div><br>Ako ulazni višedimenzionalni rasteri imaju iste dimenzije i promenljive, ali različite prostorne opsege, izlazni višedimenzionalni raster će sadržati promenljive i dimenzije duž objedinjenih prostornih opsega.<div><br>Ova funkcija takođe može da se koristi kada imate više rastera koje želite da tretirate kao jednu stavku, kao što je izračunavanje iste statistike za sve ili tokom balansiranja boja tako da ne morate da balansirate boju za svaki snimak pojedinačno. Ovo je korisno kada radite sa snimcima koji su uskladišteni kao odvojeni tajlovi zbog ograničenja veličine datoteka. Na taj način, tajlovi će biti tretirani kao deo istog snimka.",
		boundaryCleanName: "Granice bez grešaka",
		boundaryCleanSnip: "Poravnjivanje granice između zona.",
		boundaryCleanDesc: "<p>Funkcija generalizuje, ili olakšava, raster za poravnjivanje granice između zona. Ova funkcija pruža opcije kontrolisanja ćelija zona gde ulaz utiče na poravnjivanje i količinu poravljivanja koje že biti primenjene. Svaka ulazna ćelija se procenjuje pomoču svojih osam neposrednih suseda.</p><p>Proces poravnjivanja prvo sortira susedne ćelije određemim prioritetom. Prioritet određuje koje zone iz susednih ćelija mogu da zamene vrednost ćelije za obradu na izlazu.</p><p>Prioritet može biti baziran ili na vrednost zone ili veličine zone. Parametar </strong>Tip sortiranja<strong> određuje tip sortiranja koje će se koristiti. </p><p>Podrazumevano <strong>Nemojte sortirati</strong> podešavanja koja procenjuju prioritet na osnovu vrednosti zona. Ćelije iz zona sa veće vrednosti imaže veći prioritet za širenje u zone sa manjim vrednostima.</p><p>Veličina, ili ukupna površina zona može se koristiti za sortiranje prioriteta. Sa <strong>Opadajućom</strong> opcijom, zone su sortirane po veličini u opadajućem redu. Zone sa većim ukupnim površinama imaže prioritet da se prošire u zone sa manjim površinama. Sa<strong>Rastućom</strong> opcijom,suprotnost je istina: zone sa manjim ukupnim površinama imaće prioritet da se prošire u zone sa vom ukupnom površinom.</p>Ko<p>ličinom poravnjivanja upravlja parametar <strong>Pokretač ekspanzije i smanjivanje dva puta</strong> ,koja određuje koliko će puta izvršiti postupak proširenja i smanjenja.</p><p>Sa neproverenim podešavanjem, proces proširivanja i smanjivanja obavlja se jednom. Sa proverenim podešavanjem, proces proširivanja i smanjivanja se obavlja dva puta, što rezultira dodatnim stepenom poravnjivanja zone granica.</p><p>Ako vrednost svih osam susednih ćelija su iste kao ćelija za obradu, izlazna ćelija će zadržati vrednost ulazne ćelije.</p>",
		predictUsingRegressionName: "Predviđanje pomoću regresije",
		predictUsingRegressionSnip: "Izraćunava predviđeni raster zasnovan na ulaznim podacima i modelu regresije. Model regresije je izlaz iz <strong>Modela regresije Obuči nasumična stabla</strong> rastera alatke za geoprocesiranje.",
		predictUsingRegressionDesc: "<p>Model regresije je definisan u Esri definiciji za regresiju (.ecd) datoteci. Ona sadrži sve informacije za specifični skup podataka ili skup podataka i model regresije i generiše ga <strong>Model regresije Obuči nasumična stabla </strong> alatka rastera za geoprocesiranje.</p><p>Ulaz može biti samo jedan opseg, više opsega ili multidimezionalni raster, ili lista ovih tipova. Tipovi ulaznih rastera moraju biti istog tipa rastera koje obučava model za regresiju.</p><ul><li>Kada je ulaz višeopsežni, svaki opseg se tretira kao varijabla za predviđanje. Opsezi moraju biti poređani po istom redosledu kao i višeopsežni ulaz za alatku za obuku modela za rgresiju.</li><li>Kada je ulaz multidimenzionalni raster, svaka varijabla se tretira kao varijabla za previđanje i varijabla mora biti u jednom opsegu kao i da ima vremensku dimeziju. Redosled i nazivi imena varijabli moraju biti isti kao i u ulazu kada se obučava model za regresiju. Izlaz je multimimenzionalni raster.</li><li>Ulaz može biti i lista stavki. Broj i redosled stavki mora da odgovara ulazu pri obuci modela za regresiju.</li></ul>",
		dimensionalMovingStatisticsName: "Statistika dimenzionalnog pomeranja",
		dimensionalMovingStatisticsSnip: "Izračunava statistiku u pokretnom prozoru na višedimenzionalnim podacima duž određene dimenzije.",
		dimensionalMovingStatisticsDesc: "<p>Funkcija statistike pomeranja dimenzija izračunava različite statistike unutar unapred definisanog prozora za sve vrednosti dimenzija duž dimenzije. Ova funkcija uzima višedimenzionalni sloj rastera kao ulaz i kreira višedimenzionalni sloj rastera kao izlaz koji ima istu dimenzionalnu veličinu kao i ulazni sloj.</p><p>Možete navesti dimenziju za koju se vrednosti dimenzija uzimaju u obzir tokom izračunavanja. Podrazumevano, ona izračunava duž prve neprostorne dimenzije. Takođe, možete navesti veličinu prozora tako što ćete odrediti parametre „Prozor unazad“ i „Prozor napred“.</p><p>Kada je „Tip statistike“ postavljen na „Percentil“, parametri „Vrednost percentila“ i „Tip procentualne interpolacije“ postaju dostupni. Možete koristiti ove parametre da odredite percentil za izračunavanje i odaberete tip interpolacije koji će se koristiti. Kada je „Tip statistike“ postavljen na „Kružna srednja vrednost“, parametar „Kružna prelomna vrednost“ postaje dostupan. Kružna srednja vrednost se koristi za konvertovanje linearne vrednosti u opseg date kružne srednje vrednosti.</p>",
		terrainFlattenFunctionName: "Poravnati teren",
		terrainFlattenFunctionSnip: "Ispravlja ulazne podatke radara sa sintetičkom aperturom (SAR) radi radiometrijskih izobličenja usled topografije.",
		terrainFlattenFunctionDesc: "<p>Funkcija rastera Terrain Flatten ispravlja ulazne podatke radara sa sintetičkom aperturom (SAR) radi radiometrijskih izobličenja usled topografije.</p><p>Ulazni radarski podaci moraju se prvo kalibrisati na beta nulu. Koristite alatku Primeni radiometrijsku kalibraciju da kalibrišete radarske podatke na beta nulu.</p><p>Ako ulazni DEM ne obuhvata ceo SAR skup podataka, alatka će izbaciti vrednosti NoData za piksele izvan opsega DEM za izlaze gama nula, sigma nula, oblast rasturanja i geometrijska izobličenja. Za izlaz maske geometrijskih izobličenja, alatka će ispisati neodređene vrednosti za piksele izvan DEM opsega.</p><p>Ulaz DEM mora biti u geografskom koordinatnom sistemu WGS 1984 (EPSG:4326).</p>",
		createColorCompositeFunctionName: "Kreirajte kompozit boja",
		createColorCompositeFunctionSnip: "Kreira raster sa tri opsega iz skupa podataka rastera sa više opsega u kome svaki opseg može da koristi algebarski proračun zasnovan na algebri opsega.",
		createColorCompositeFunctionDesc: "<p>Rasterska funkcija Kreiraj kompozit boja kreira raster sa tri opsega iz skupa podataka sa više rastera u kojem svaki opseg može da koristi algebarski proračun zasnovan na algebri opsega.</p><p>Kada definišete algoritam aritmetike opsega, možete da unesete jednolinijsku algebarsku formulu za svaki izraz da biste kreirali izlaz sa više opsega. Podržani operatori su unarni, plus (+), minus (-), množenje (*) i deljenje (/).</p><p>Kada koristite ID opsega u izrazu, identifikujte opseg stavljanjem prefiksa B ili b na broj opsega.</p><p>Uobičajena kombinacija opsega koja se koristi za radar sa sintetičkom aperturom (SAR) u linearnim jedinicama je VV za crvenu, VH za zelenu i VV/VH za plavu. Ako su ulazni podaci u decibelima, kombinacija opsega treba da bude VV za crvenu, VH za zelenu i VV-VH za plavu.</p>",
		surfaceParametersName: "Parametri površine",
		surfaceParametersSnip: "Određuje parametre površinskog rastera kao što su izgled, nagib i nekoliko tipova krivina koristeći geodetske metode.",
		surfaceParametersDesc: "<p>Funkcija Surface Parameters određuje parametre površinskog rastera kao što su aspekt, nagib i nekoliko tipova krivina koristeći geodetske metode.</p><p>Ova funkcija se može koristiti za sledeće aplikacije:</p><ul><li>Izračunajte izgled i nagib geodetskim metodama.</li><li>Izračunajte različite tipove zakrivljenosti iz rastera ulazne površine, na primer, <strong>Tangencijalna (normalna kontura) kriva</strong> koji karakteriše topografsku konvergenciju i divergenciju toka preko površine.</li></ul>",
		leastCostCorridorName: "Najjeftiniji koridor",
		leastCostCorridorSnip: "Izračunava zbir dva rastra rastojanja akumuliranih troškova sa opcijom primene praga na osnovu procenta ili akumulativne cene.",
		leastCostCorridorDesc: "<p>Ulazni rasteri treba da budu na udaljenosti od akumulacije i rasteri u kontra smeru izlaze iz funkcije <strong>Distanca akumulacije</strong> ili <strong>Distanca alokacije</strong>. One bi trebalo da se zasnivaju na udaljenosti troškova, a iste postavke parametara treba da se koriste prilikom kreiranja slojeva za svaki izvor. Nijedan od parametara koji zavise od smera (horizontalni faktor, vertikalni faktor i smer kretanja) ne treba da se koriste u kreiranju ovih rastera.</p><p>Vrednosti u rasteru izlaznog koridora su zbir akumulativnih troškova za dostizanje date lokacije sa istim jedinicama kao i raster rastojanja ulaznih akumulativnih troškova.</p><p>Ako je određena <strong>granična</strong> vrednost veća od maksimalnog akumulativnog troška kada se zbroje dva rastra akumulacije rastojanja, raster izlaznog koridora će pokriti istu oblast kao i ulazni akumulativni rasteri.</p><p>Ako je navedena granična vrednost manja od minimalne vrednosti u rasteru koridora, vraća se poruka upozorenja, a izlazni raster će biti prazan.</p><p>Raster izlaznog koridora može da sadrži ćelije sa nešto većim akumulativnim troškovima od granične vrednosti. Ovo je iz rastera u kontra smeru koji koristi ćelije kojima su dodeljeni nešto veći troškovi od praga za povezivanje nepovezanih ćelija sa koridorom.</p>",
		geometricMedianName: "Geometrijski medijan",
		geometricMedianSnip: "Funkcija Geometrijska medijana izračunava geometrijsku medijanu preko piksela u vremenskoj seriji višepojasnih snimaka.",
		geometricMedianDesc: "<p>Ova funkcija smanjuje šum i odstupanja u snimcima vremenske serije tako što izračunava geometrijski srednji piksel za svaki niz piksela u nizu snimaka. Algoritam održava spektralne odnose između opsega u spektru piksela, tako da se izlaz može koristiti u analizi, kao što su indeksi vegetacije.</p><p>Oblaci i senke treba da budu maskirani korišćenjem QA opsega skupa podataka pre primene ove funkcije.</p><p>Ako je ulazni snimak sa pokretnim zarezom, kao što je refleksija površine sa vrednostima između 0 i 1, vrednost epsilon od 0,001 bi trebalo da daje kvalitetne rezultate.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Tip šeme boja",
		colormapName: "Colormap",
		colormapNameName: "Naziv za Colormap funkciju",
		colorRampName: "Gradacija boja",
		contrastOffsetName: "Pomak kontrasta",
		brightnessOffsetName: "Pomak osvetljenosti",
		methodName: "Metod",
		bandNamesName: "Nazivi opsega",
		bandWavelengthsName: "Talasne dužine opsega",
		bandIdsName: "ID-ovi opsega",
		missingBandActionName: "Nedostaje radnja opsega",
		conversionParametersName: "Parametri konverzije",
		hillshadeTypeName: "Tip Hillshade (senčenje brda) funkcije",
		azimuthName: "Azimut",
		altitudeName: "Nadmorska visina",
		slopeTypeName: "Razmera",
		zFactorName: "Z faktor",
		PSPowerName: "Stepen veličine piksela",
		PSZFactorName: "Faktor veličine piksela",
		removeEdgeEffectName: "Onemogući podrazumevanu interpolaciju piksela ivice",
		fromUnitName: "Od jedinice",
		toUnitName: "Do jedinice",
		rasterTypeName: "Tip",
		minName: "Minimalni izlaz",
		maxName: "Maksimalni izlaz",
		minPercentName: "Minimalni procenat isecanja",
		maxPercentName: "Maksimalni procenat isecanja",
		numberOfStandardDeviationName: "Broj standardnih devijacija",
		sigmoidStrengthLevelName: "Nivo jačine sigmoid krive",
		estimateStatsHistogramName: "Proceni statistiku",
		DRAName: "Prilagođavanje dinamičkog opsega",
		statisticsName: "Statistika",
		histogramsName: "Histogrami",
		statisticsHistogramName: "Definicija statistike i histograma",
		computeGammaName: "Automatska gama",
		useGammaName: "Koristi gamu",
		gammaName: "Gama",
		inputNamesName: "Nazivi",
		expressionName: "Izraz",
		cellsizeTypeName: "Tip veličine ćelije",
		extentTypeName: "Tip obuhvata",
		classifierDefinitionFileName: "Datoteka definicije ulaza",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Pravi raster",
		falseRasterName: "Lažni raster",
		noDataInterpretationName: "Interpretacija tipa NoData (bez podataka)",
		noDataValuesName: "Vrednosti tipa NoData (bez podataka)",
		includedRangesName: "Uključeni opsezi",
		curvatureTypeName: "Tip zakrivljenosti",
		rastersName: "Rasteri",
		attributeTableName: "Tabela",
		attributeTableTypeName: "Tip tabele",
		rowsName: "Broj redova",
		columnsName: "Broj kolona",
		kernelName: "Kernel",
		mirrorEdgesName: "Preslikaj rubove",
		influencesName: "Uticaji",
		fieldsName: "Polja",
		remapsName: "Tabela ponovnog mapiranja",
		evalFromName: "Skala za procenu od",
		evalToName: "Skala za procenu do",
		weightsName: "Težine",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "Kratak IDW prečnik opsega",
		maxVoidWidthName: "Maks. širina praznine",
		sigmaGaussianName: "Prilagodljivo poravnavanje",
		contourTypeName: "Tip konture",
		zBaseName: "Z pozadina",
		numberOfContoursName: "Broj kontura",
		contourIntervalName: "Interval kontura",
		nthContourLineInBoldName: "N-ta podebljana ContourLine",
		featureClassName: "Ulazni geoobjekti",
		classIndexFieldName: "Polje",
		resolveOverlapMethodName: "Razreši metod preklapanja",
		resamplingTypeName: "Tip promene veličine promenom broja piksela",
		inputCellsizeName: "Ulazna veličina ćelije",
		outputCellsizeName: "Izlazna veličina ćelije",
		pointFeatureClassName: "Matične tačke",
		maxGrowthRadiusFieldName: "Polje maksimalnog prečnika rasta",
		similarityThresholdFieldName: "Polje granice sličnosti",
		fillValueFieldName: "Polje vrednosti ispune",
		spectralDetailName: "Spektralni detalj [1..20]",
		spatialDetailName: "Prostorni detalj [1..20]",
		minNumPixelsPerSegmentName: "Minimalna veličina segmenta u pikselima",
		boundariesOnlyName: "Samo granice segmenta",
		statisticsTypeName: "Tip statistike",
		fillNoDataOnlyName: "Popuni samo NoData piksele",
		inputDataTypeName: "Tip ulaznih podataka",
		angleReferenceSystemName: "Referentni sistem ugla",
		outputDataTypeName: "Tip izlaznih podataka",
		inputSamplePointFeatureClassName: "Ulazni uzorci",
		valueFieldName: "Polje vrednosti",
		rasterInfoName: "Raster Info (informacije o rasteru)",
		interpolationMethodName: "Metod interpolacije",
		radiusName: "Poluprečnik",
		radianceGainValuesName: "Porast sjaja",
		radianceBiasValuesName: "Odstupanje sjaja",
		reflectedGainValuesName: "Porast reflektanse",
		reflectedBiasValuesName: "Odstupanje reflektanse",
		sunElevationName: "Elevacija sunca (stepeni)",
		albedoName: "Albedo",
		scaleFactorName: "Faktor razmere",
		offsetName: "Pomak",
		thresholdTypeName: "Tip granice",
		thresholdsName: "Granice",
		undefinedClassName: "Nedefinisana klasa",
		minValueName: "Minimum",
		maxValueName: "Maksimum",
		operationName: "Radnja",
		clippingTypeName: "Tip isecanja",
		clippingGeometryName: "Geometrija isecanja/Raster",
		extentName: "Opseg izlaza",
		useInputFeatureGeometryName: "Upotrebite ulazne funkcije za zakačenu geometriju",
		remapDefinitionTypeName: "Tip definicije ponovnog mapiranja",
		inputRangeName: "Ulazni opsezi",
		outputValuesName: "Izlazne vrednosti",
		noDataRangeName: "Opsezi tipa NoData (bez podataka)",
		inputFieldName: "Polje unosa",
		outputFieldName: "Izlazno polje",
		inputMaxFieldName: "Ulazno maks. polje (opciono)",
		remapTableTypeName: "Tip tabele ponovnog mapiranja",
		allowUnmatchedName: "Dozvoli nepodudarajuće vrednosti piksela",
		changeMissingValuesToNoDataName: "Promenite vrednosti koji nedostaju u NoData",
		visibleBandIDName: "ID vidljivog opsega",
		infraredBandIDName: "ID infracrvenog opsega",
		scientificOutputName: "Naučni izlaz",
		bandIndexesName: "Indeksi opsega",
		constantName: "Konstantan",
		weightName: "Debljina",
		minimumName: "Minimum",
		maximumName: "Maksimum",
		sourceDataName: "Izvorni raster",
		sourceFieldName: "Polje izvora",
		costRasterName: "Raster troškova",
		maxDistanceName: "Maksimalno rastojanje",
		valueRasterName: "Raster vrednosti",
		costMultiplierName: "Multiplikator za primenu troškova",
		startCostName: "Početni trošak",
		accumCostResistanceRateName: "Stopa otpora akumulativnog troška",
		capacityName: "Kapacitet",
		travelDirectionName: "Smer putovanja",
		cellSizeName: "Veličina ćelije",
		populationFieldName: "Polje populacije",
		areaUnitsName: "Jedinice površine",
		outputValueTypeName: "Izlazne vrednosti ćelije",
		barriersName: "Ulazne barijere",
		destinationDataName: "Raster destinacija",
		destinationFieldName: "Polje destinacije",
		pathTypeName: "Vrsta putanje",
		observerFeaturesName: "Geoobjekti posmatrača",
		analysisMethodName: "Metod analize",
		analysisTypeName: "Tip analize",
		verticalErrorName: "Vertikalna greška",
		refractivityCoefficientName: "Koeficijent refraktivnosti",
		surfaceOffsetName: "Površinski pomak",
		observerElevationName: "Elevacija posmatrača",
		observerOffsetName: "Pomak posmatrača",
		innerRadiusName: "Unutrašnji poluprečnik",
		innerRadiusIs3DDistanceName: "Unutrašnji prečnik je 3D udaljenost",
		outerRadiusName: "Spoljašnji poluprečnik",
		outerRadiusIs3DDistanceName: "Spoljašnji prečnik je 3D udaljenost",
		horizontalStartAngleName: "Horizontalni početni ugao",
		horizontalEndAngleName: "Horizontalni krajnji ugao",
		verticalUpperAngleName: "Vertikalni gornji ugao",
		verticalLowerAngleName: "Vertikalni donji ugao",
		zoneDataName: "Raster zone",
		zoneFieldName: "Polje zone",
		ignoreNoDataName: "Zanemari tip NoData (bez podataka) u izračunavanjima",
		temperatureRasterName: "Raster temperature",
		inTemperatureUnitsName: "Temperaturne jedinice",
		outHeatIndexTemperatureUnitsName: "Jedinice toplotnog indeksa",
		relativeHumidityRasterName: "Raster relativne vlažnosti",
		outWindChillTemperatureUnitsName: "Jedinice indeksa hlađenja",
		windSpeedRasterName: "Raster brzine vetra",
		inWindSpeedUnitsName: "Jedinice za brzinu vetra",
		valueName: "Vrednost",
		propertyName: "Ime svojstva",
		jsonName: "Metapodaci JSON",
		zoneTableName: "Tabela zonskih atributa",
		attributeFieldNames: "Imena polja atributa",
		backgroundName: "Pozadinska vrednost",
		whereClauseName: "Odredba gde",
		minimumValueFieldName: "Ime polja minimalne vrednosti",
		maximumValueFieldName: "Ime polja maksimalne vrednosti",
		outValueFieldName: "Ime polja izlazne vrednosti",
		defaultValueName: "Podrazumevana izlazna vrednost",
		conversionMatrixName: "Matrica konverzije",
		IsPseudoColorOutputName: "Je izlaz pseudo boja",
		unmappedAsRandomColorName: "Nasumično dodeljuj boje nemapiranim pikselima",
		distanceMethodName: "Metod razdaljine",
		flowDirRasterName: "Flow Direction raster",
		pourPointName: "Raster za tačke tečenja",
		pourPointFieldName: "Polje za tačku tečenja",
		constantZName: "Konstanta Z",
		zOffsetName: "Z odstupanje",
		geoIdName: "Geoid",
		calibrationTypeName: "Tip kalibracije",
		filterTypeName: "Tip filtera",
		filterSizeName: "Veličina filtera",
		noiseModelName: "Model šuma",
		noiseVarianceName: "Varijansa šuma",
		additiveNoiseMeanName: "Aditivna srednja vrednost šuma",
		multiplicativeNoiseMeanName: "Multiplikativna srednja vrednost šuma",
		numberofLooksName: "Broj pregleda",
		dampingFactorName: "Faktor ublažavanja",
		maskRasterName: "Maskiraj raster",
		nibbleValuesName: "Koristi NoData vrednosti ako su najbliži susedi",
		nibbleNoDataName: "Smanji NoData ćelije",
		zLimitName: "Z ograničenje",
		flowDirectionTypeName: "Flow Direction tip",
		weightRasterName: "Izmeri raster",
		forceEdgeName: "Nametni svim ivičnim ćelijama da idu ka spolja",
		streamRasterName: "Raster strima",
		surfaceRasterName: "Raster površine",
		conversionType: "Tip pretvaranja",
		distanceRaster1: "Raster rastojanja 1",
		distanceRaster2: "Raster rastojanja 2",
		costDistanceRaster: "Raster troškova",
		costBacklinkRaster: "Raster povratne veze troškova",
		overridesName: "Izmene",
		fieldName: "Polje",
		signatureFileOrUrl: "Datoteka ili URL potpisa",
		redName: "Crvena",
		greenName: "Zelena",
		blueName: "Plava",
		infraredName: "Infracrveno",
		panchromaticName: "Panhromatska",
		multispectralName: "Multispektralno",
		pansharpeningType: "Pansharpening tip",
		sensorName: "Senzor",
		spatialReferenceName: "Prostorna referenca",
		xCellsizeName: "Veličina X ćelije",
		yCellsizeName: "Veličina Y ćelije",
		xOriginName: "Tačka registracije X",
		yOriginName: "Tačka registracije Y",
		percentileName: "Percentilna vrednost",
		neighborhoodType: "Susedni tip",
		widthName: "Širina",
		heightName: "Visina",
		startAngleName: "Početni ugao",
		endAngleName: "Krajnji ugao",
		neighborhoodValues: "Susedne vrednosti",
		horizontalRaster: "Horizontalni raster",
		horizontalFactor: "Horizontalni faktor",
		verticalRaster: "Vertikalni raster",
		verticalFactor: "Vertikalni faktor",
		streamRaster: "Raster strima",
		flowDirRaster: "Flow Direction raster",
		numberNeighborCells: "Broj susednih ćelija",
		zoneConnectivity: "Povezivanje zona",
		addLinkBehavior: "Dodaj link",
		excludedValue: "Isključena vrednost",
		constantFillCheck: "Generiši raster popunjavanja od konstante",
		fillRaster: "Raster popunjavanja",
		constantFillValue: "Vrednost konstante",
		inputBitPositions: "Ulazni bit",
		outputBitPositions: "Izlazni bit",
		distanceTypeName: "Tip rastojanja",
		barrierDataName: "Rasterske barijere",
		pourPointDataName: "Raster za tačku tečenja",
		accumulationRasterName: "Flow Accumulation raster",
		snapDistanceName: "Razdaljina za kačenje",
		orderMethodName: "Metod poručivanja",
		directionMeasurementName: "Smer merenja",
		processAsMultiband: "Obradi kao više opsega",
		processMultidimensional: "Obradi kao više dimenzija",
		forceFlowDirectionConvention: "Postavite konvenciju za smer protoka prema rasteru pozadinske veze",
		initialAccumulation: "Početna akumulacija",
		maximumAccumulation: "Maksimalna akumulacija",
		sourceLocationBands: "Kreiranje reda izvora i kolone kao dodatnih opsega za izlaz",
		backDirectionBand: "Kreiranje povratnog smera kao dodatnog opsega za izlaz",
		numberOfCells: "Broj ćelija",
		zoneValues: "Vrednosti zone",
		shrinkMethod: "Metod smanjivanja",
		expandMethod: "Metod širenja",
		inputSpectralProfileType: "Tip spektralnog profila",
		spectralProfileFileName: "Spektralni profil",
		trainingFeatureFileName: "Funkcija za obuku",
		nonNegative: "Nije negativno",
		sumToOne: "Zbir do jedan",
		randomDistribution: "Distribucija",
		meanName: "Sredina",
		probabilityName: "Verovatnoća",
		alphaName: "Alpha",
		betaName: "Beta",
		rName: "R",
		nName: "S",
		seed: "Sejanje",
		randomNumberGenerator: "Generator nasumičnih brojeva",
		cellFactor: "Faktor ćelije",
		aggregationType: "Tehnika za agregaciju",
		extentHandling: "Proširenje obuhvata po potrebi",
		trendAnalysisDimensionName: "Naziv dimenzije",
		trendAnalysisType: "Tip trenda",
		harmonicFrequency: "Frekvencija harmonika",
		polynomialOrder: "Polinomijalni redosled",
		cycleLengthName: "Dužina ciklusa",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R-kvadratni",
		trendAnalysisSlopePValue: "P-vrednost ili koeficijent nagiba",
		trendAnalysisSeasonalPeriod: "Period godišnjeg doba",
		cycleUnitName: "Jedinica za cikliranje",
		predictDimensionValues: "Vrednosti",
		dimensionDefinitionType: "Definicija dimenzija",
		predictDimensionStart: "Start",
		predictDimensionEnd: "Kraj",
		predictDimensionInterval: "Interval vrednosti",
		dimensionUnit: "Jedinica",
		interpolationCellsizeName: "Veličina ćelije za interpolaciju",
		variableName: "Promenljive",
		dimensionlessName: "Bez dimenzija",
		mdimDefinition: "Definicija dimenzija",
		dimensionName: "Dimenzija",
		iterationStart: "Početak prve iteracije",
		iterationEnd: "Kraj prve iteracije",
		intervalStart: "Početak intervala",
		intervalEnd: "Kraj intervala",
		stepName: "Korak",
		rangesName: "Opsezi",
		minValue: "Minimalna vrednost",
		maxValue: "Maksimalna vrednost",
		changeAnalysisRasterName: "Promeni rastersku analizu",
		changeTypeName: "Promeni tip",
		segmentDate: "Datum segmenta",
		changeDirectionName: "Promeni smer",
		maxNumChangesName: "Maksimalan broj promena",
		filterByYear: "Flitriraj prema godini",
		minimumYear: "Minimalna vrednost",
		maximumYear: "Maksimalna vrednost",
		filterByDuration: "Filtriraj prema trajanju",
		minimumDuration: "Minimalno trajanje",
		maximumDuration: "Maksimalno trajanje",
		filterByMagnitude: "Filtriraj prema jačini",
		minimumMagnitude: "Minimalna jačina",
		maximumMagnitude: "Maksimalna jačina",
		filterByStartValue: "Filtriraj po početnoj vrednosti",
		minimumStartValue: "Minimalna početna vrednost",
		maximumStartValue: "Maksimalna početna vrednost",
		filterByEndValue: "Filtriraj po krajnjoj vrednosti",
		minimumEndValue: "Minimalna krajnja vrednost",
		maximumEndValue: "Maksimalna krajnja vrednost",
		modelTypeName: "Tip modela",
		fromRasterName: "Od rastera",
		toRasterName: "Do rastera",
		computeChangeMethod: "Metod proračuna promene",
		fromClassValues: "Od vrednosti klase (na primer: 2 5)",
		toClassValues: "Do vrednosti klase (na primer: 2 5)",
		keepMethod: "Metod filtriranja",
		useColorMethod: "Definišite boje prelaza",
		detectChangeBands: "Opsezi za detekciju promene (započinje sa 0)",
		tmaskBands: "Opsezi za temporalno maskiranje (započinje sa 0)",
		chiSquaredThreshold: "Či-kvadratna granica za detekciju promene",
		minAnomaly: "Minimalna uzasstopna zapažanja anomalija",
		updatingFrequency: "Ažiriranje učestalosti uklapanja (u godinama)",
		distanceAccumulationRasterName: "Raster akumulacije udaljenosti",
		costBackdirectionRasterName: "Povratni smer ili raster smera protoka",
		rasterCollectionName: "Kolekcija rastera",
		itemFunctionName: "Funkcija stavke",
		aggregationFunctionName: "Funkcija grupisanja",
		processingFunctionName: "Funkcija obrade",
		aggregationDefinitionName: "Definicija grupisanja",
		queryGeometryName: "Upit geometrije",
		factorFunctionZeroFactor: "Nulti faktor",
		factorFunctionCutAngle: "Ugao sečenja",
		factorFunctionSideFactor: "Bočni faktor",
		factorFunctionSlope: "Nagib",
		factorFunctionLowCutAngle: "Ugao niskog sečenja",
		factorFunctionHighCutAngle: "Ugao visokog sečenja",
		factorFunctionCosPower: "Snaga kosinusa",
		factorFunctionSecPower: "Snaga sekansa",
		factorFunctionTablePath: "Putanja tabele",
		processingBand: "Opseg za obradu",
		processingBandName: "Ime opsega za obradu",
		snappingDate: "Kačenje datuma",
		maxNumSegments: "Maksimalan broj segmenata",
		vertexCountOvershoot: "Prekoračenje broja temena",
		spikeThreshold: "Prag šiljaka",
		recoveryThreshold: "Prag oporavka",
		minNumObs: "Minimalan broj opservacija",
		pValueThreshold: "Prag P-vrednosti",
		bestModelProportion: "Proporcija najboljeg modela",
		preventOneYearRecovery: "Spreči oporavak za jednu godinu",
		recoveryIncreaseTrend: "Oporavak ima trend povećanja",
		outputOtherBands: "Izbaci druge opsege",
		sortType: "Tip sortiranja",
		numberOfRuns: "Pokrenuti proširenje i smanjivanje dva puta",
		percentileValue: "Percentilna vrednost",
		percentileInterpolationType: "Tip percentilne interpolacije",
		rasterInfoProperty: "Svojstvo",
		rasterInfoValue: "Vrednost",
		rasterInfoColumns: "Kolone",
		rasterInfoRows: "Redovi",
		rasterInfoBandCount: "Broj opsega",
		rasterInfoPixelSizeX: "X veličina ćelije",
		rasterInfoPixelSizeY: "Y veličina ćelije",
		rasterInfoPixelType: "Tip piksela",
		rasterExtentTop: "Vrh",
		rasterExtentBottom: "Dno",
		rasterExtentLeft: "Levo",
		rasterExtentRight: "Desno",
		rasterStatisticsNotCalculated: "Statistika nije proračunata.",
		spatialReferenceProjection: "Projekcija",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Prethodni WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Prethodni VCSWKID",
		spatialReferenceAuthority: "Institucija",
		spatialReferenceLinearUnit: "Linearna jedinica",
		spatialReferenceAngularUnit: "Linearna jedinica",
		spatialReferenceFalseEasting: "Lažni istok",
		spatialReferenceFalseNorthing: "Lažni sever",
		spatialReferenceCentralMeridian: "Centralni meridijan",
		spatialReferencePrimeMeridian: "Primarni meridijan",
		spatialReferenceStandardParallel1: "Standardna paralela 1",
		spatialReferenceStandardParallel2: "Standardna paralela 2",
		spatialReferenceLatitudeOfOrigin: "Geografska širina koordinatnog početka",
		spatialReferenceAuxiliarySphereType: "Tip pomoćne sfere",
		spatialReferenceDatum: "Datum",
		spatialReferenceSpheroid: "Sferoid",
		spatialReferenceSemimajorAxis: "Polu-glavna osa",
		spatialReferenceSemiminorAxis: "Polu-mala osa",
		spatialReferenceInverseFlattening: "Inverzno poravnanje",
		inputDefinitionFileName: "Datoteka definicije ulaza",
		deleteName: "Izbriši",
		addVariableName: "Dodaj promenljivu",
		maxNumPixelsPerSegment: "Maksimalna veličina segmenta u pikselima",
		forwardWindowName: "Prozor unapred",
		backwardWindowName: "Prozor unazad",
		noDataHandlingName: "Rukovanje NoData",
		circularWrapValueName: "Kružna prelomna vrednost",
		fromClassNameFieldName: "Naziv polja za nazive klasa u Iz rastera",
		toClassNameFieldName: "Naziv polja za nazive klasa u Do rastera",
		targetRasterName: "Ciljani raster",
		circularWrapValue: "Kružna prelomna vrednost",
		bandIndexesR: "Crveni izraz",
		bandIndexesG: "Zeleni izraz",
		bandIndexesB: "Plavi izraz",
		exampleName: "Primer",
		inputName: "Ulaz",
		outputName: "Izlaz",
		optionalName: "Opcionalno",
		browseDefinitionFile: "Pregledajte datoteku definicije",
		selectDefinitionFile: "Izaberite ulaznu datoteku definicije",
		inputDefinitionURL: "URL datoteke definicije unosa",
		enterDefinitionFileURL: "Unesite URL datoteke definicije",
		browseXMLFile: "Pregledajte XML datoteku",
		selectStatsFile: "Izaberite datoteku statistike i histograma",
		enterXMLFileURL: "Unesite URL XML datoteke",
		xmlFileURL: "URL XML datoteke",
		circularCalculation: "Izračunaj kružnu statistiku",
		localSurfaceType: "Tip lokalne površine",
		surfaceParameterType: "Tip parametra",
		neighborhoodDistance: "Rastojanje susedstva",
		useAdaptiveNeighborhood: "Koristite adaptivno susedstvo",
		outputSlopeType: "Merenje odlaznog nagiba",
		projectAzimuths: "Projektni geodetski azimuti",
		useEquatorialAspect: "Koristi ekvatorijalni aspekt",
		zUnit: "Z jedinica",
		analysisMask: "Maska za analizu",
		stdDeviation: "Standardna devijacija",
		"true": "Tačno",
		"false": "Netačno",
		costDistanceRaster1: "Unos akumulativne cene Raster udaljenosti 1",
		costDistanceRaster2: "Unos akumulativne cene Raster udaljenosti 2",
		threshold: "Prag",
		thresholdMethod: "Metod praga",
		directionRaster1: "Povratni pravac Rastera 1",
		directionRaster2: "Povratni pravac Rastera 2",
		maxIterations: "Maksimalan broj iteracija",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Ručno",
		attributeTableTypeExternal: "Eksterno",
		clrSchemeTypeColormap: "Colormap",
		clrSchemeTypeColorRamp: "Gradacija boja",
		colormapTypeElevation: "Elevacija",
		colormapTypeGray: "Gray",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Nasumično",
		none: "Ništa",
		slopeTypeAdjusted: "Korigovano",
		slopeTypeDegree: "Stepen",
		slopeTypePercentRise: "PercentRise",
		slopeTypeScaled: "Razmera podešena",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "PercentMinMax",
		stretchTypeSigmoid: "Sigmoid",
		stretchTypeStdDev: "Standardna devijacija",
		hillshadeTypeSimple: "Tradicionalno",
		hillshadeTypeMultidirectional: "Višesmerno",
		bandComboByNames: "Nazivi opsega",
		bandComboByWavelength: "Talasne dužine opsega",
		bandComboByIDs: "ID-ovi opsega",
		missingBandActionBestMatch: "Najbolje podudaranje",
		missingBandActionFail: "Neuspelo",
		unitTypeCelsius: "Celzijus",
		unitTypeCentimeters: "Centimetri",
		unitTypeDecimeters: "Decimetri",
		unitTypeFahrenheit: "Farenhajt",
		unitTypeFeet: "Stope",
		unitTypeFeetPerSec: "Stopa po sekundi (ft/s)",
		unitTypeInches: "Inči",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilometri",
		unitTypeKmsPerHour: "Kilometra po satu (km/h)",
		unitTypeKnots: "Čvorova (kn)",
		unitTypeMeters: "Metri",
		unitTypeMetersPerSec: "Metara po sekundi (ft/s)",
		unitTypeMiles: "Milje",
		unitTypeMilesPerHour: "Milja na sat (mph)",
		unitTypeMillimeters: "Milimetri",
		unitTypeNauticalMiles: "Nautičke milje",
		unitTypeYards: "Jardi",
		unitTypeDecimalDegrees: "Decimalni stepeni",
		unitTypePoints: "Tačke",
		unitTypeUnknown: "Nepoznato",
		unitTypeSqMapUnits: "Kvadratne jedinice mape",
		unitTypeSqMiles: "Kvadratne milje",
		unitTypeSqKms: "Kvadratni kilometri",
		unitTypeAcres: "Acres",
		unitTypeHectares: "Hektari",
		unitTypeSqYards: "Kvadratni jardi",
		unitTypeSqFt: "Kvadratne stope",
		unitTypeSqInches: "Kvadratni inč",
		unitTypeSqMts: "Kvadratni metri",
		unitTypeSqCms: "Kvadratni centimetri",
		unitTypeSqMms: "Kvadratnih milimetara",
		cellsizeTypeFirst: "Prvi od",
		cellsizeTypeMin: "Min. od",
		cellsizeTypeMax: "Maks. od",
		cellsizeTypeMean: "Sredina od",
		cellsizeTypeLast: "Poslednji od",
		extentTypeFirst: "Prvi od",
		extentTypeIntersection: "Presek",
		extentTypeUnion: "Unija",
		extentTypeLast: "Poslednji od",
		noDataInterpretAny: "Spari bilo koji",
		noDataInterpretAll: "Spari sve",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Profil",
		curvatureTypePlanform: "Planform",
		filterTypeLineDetectionHorizontal: "Horizontalno otkrivanje linije",
		filterTypeLineDetectionVertical: "Vertikalno otkrivanje linije",
		filterTypeLineDetectionLeftDiagonal: "Levo dijagonalno otkrivanje linije",
		filterTypeLineDetectionRightDiagonal: "Desno dijagonalno otkrivanje linije",
		filterTypeGradientNorth: "Severna kosina",
		filterTypeGradientWest: "Zapadna kosina",
		filterTypeGradientEast: "Istočna kosina",
		filterTypeGradientSouth: "Južna kosina",
		filterTypeGradientNorthEast: "Severoistočna kosina",
		filterTypeGradientNorthWest: "Severozapadna kosina",
		filterTypeSmoothArithmeticMean: "Poravnata aritmetička sredina",
		filterTypeSmoothing3x3: "Poravnavanje 3x3",
		filterTypeSmoothing5x5: "Poravnavanje 5x5",
		filterTypeSharpening3x3: "Izoštravanje 3x3",
		filterTypeSharpening5x5: "Izoštravanje 5x5",
		filterTypeLaplacian3x3: "Laplasov operator 3x3",
		filterTypeLaplacian5x5: "Laplasov operator 5x5",
		filterTypeSobelHorizontal: "Horizontalni Sobel operator",
		filterTypeSobelVertical: "Vertikalni Sobel operator",
		filterTypeSharpen: "Sharpen",
		filterTypeSharpen2: "Dodatno izoštri",
		filterTypePointSpread: "Distribuiranje iz tačke",
		userDefined: "Korisnički definisane",
		ContourTypeLines: "Linije konture",
		ContourTypeFill: "Ispuna konture",
		ContourTypeSmoothOnly: "Samo glatka površina",
		rasterizeFirst: "Prva",
		rasterizeLast: "Poslednje",
		rasterizeSmallest: "Najmanje",
		rasterizeLargest: "Najveće",
		resamplingTypeNearest: "Najbliži sused",
		resamplingTypeBilinear: "Bilinearna interpolacija",
		resamplingTypeCubic: "Kubna konvolucija",
		resamplingTypeMajority: "Većina",
		resamplingTypeBilinearPlus: "Bilinearna interpolacija plus",
		resamplingTypeGauss: "Gauss Blur",
		resamplingTypeGaussPlus: "Gauss Blur Plus",
		resamplingTypeAverage: "Prosečno",
		resamplingTypeMinimum: "Minimum",
		resamplingTypeMaximum: "Maksimum",
		resamplingTypeVectorAvg: "Prosečni vektor",
		minimum: "Minimum",
		maximum: "Maksimum",
		mean: "Sredina",
		stdDeviation: "Standardna devijacija",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Jačina-Smer",
		unknown: "Nepoznato",
		angleRefSysGeographic: "Geografski",
		angleRefSysArithmetic: "Aritmetički",
		interpolateIrregularDataNearest: "Najbliži sused",
		interpolateIrregularDataBilinear: "Bilinearna",
		interpolateIrregularDataTinningLinear: "Linearno konzerviranje",
		interpolateIrregularDataTinningNaturalNeighbor: "Prirodni sused",
		interpolateIrregularDataTinningIDW: "Inverzna ponderisana razdaljina",
		esriRasterThresholdTypeConstant: "Konstantan",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Maks. argument",
		argStatsTypeMin: "Min. argument",
		argStatsTypeMedian: "Srednji argument",
		argStatsTypeDuration: "Trajanje",
		arithmeticOpPlus: "Plus",
		arithmeticOpMinus: "Minus",
		arithmeticOpMultiply: "Pomnoži",
		arithmeticOpDivide: "Podeli",
		arithmeticOpPower: "Stepen",
		arithmeticOpMode: "Režim",
		clipTypeOutside: "Iseci spolja",
		clipTypeInside: "Iseci unutra",
		yes: "Da",
		no: "Ne",
		densities: "Gustine",
		expectedCounts: "Očekivani broj",
		planar: "Planarno",
		geodesic: "Geodetski",
		eachCell: "Svaka ćelija",
		eachZone: "Svaka zona",
		bestSingle: "Najbolja pojedinačna",
		allSightlines: "Sve linije vidokruga",
		perimeterSightlines: "Linije vidokruga na obimu",
		frequency: "Učestalost",
		observers: "Posmatrači",
		majority: "Većina",
		median: "Medijana",
		minority: "Manjina",
		percentile: "Percentil",
		range: "Opseg",
		sum: "Zbir",
		variety: "Varijetet",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Transformisani SAVI",
		bandArithmeticMethodMSAVI: "Izmenjeni SAVI",
		bandArithmeticMethodSultan: "Sultanova formula",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Gvožđe oksid",
		ferrousMinerals: "Ferozni minerali",
		clayMinerals: "Minerali gline",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Kvadratni koren",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Negacija na nivou bita",
		localBooleanNot: "Logička negacija",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "Je null",
		localFloat: "Plutaj",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Negiraj",
		localRoundDown: "Zaokruži naniže",
		localRoundUp: "Zaokruži naviše",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Plus",
		localMinus: "Minus",
		localTimes: "Vremena",
		localPower: "Stepen",
		localBitwiseAnd: "Konjukcija na nivou bita",
		localBitwiseLeftShift: "Levi pomak na nivou bita",
		localBitwiseOr: "Disjunkcija na nivou bita",
		localBitwiseRightShift: "Desni pomak na nivou bita",
		localBitwiseXor: "Ekskluzivna disjunkcija na nivou bita",
		localBooleanAnd: "Logička konjukcija",
		localBooleanOr: "Logička disjunkcija",
		localBooleanXor: "Logička ekskluzivna disjunkcija",
		localDivide: "Podeli",
		localEqualTo: "Jednako",
		localGreaterThan: "Veće od",
		localGreaterThanEqual: "Veće od ili jednako",
		localLessThan: "Manje od",
		localLessThanEqual: "Manje od ili jednako",
		localMod: "Mod",
		localNotEqual: "Nije jednako",
		localATan2: "ATan2",
		localSquare: "Kvadrat",
		localSetNull: "Podešavanje nule",
		remapDefTypeList: "Lista",
		remapDefTypeTable: "Tabela",
		remapTableTypeSimple: "Jednostavan",
		remapTableTypeDynamic: "Dinamički",
		remapTableTypeReassignment: "Ponovno dodeljivanje",
		geomCorrectionByConstZ: "Koristi konstantu Z",
		geomCorrectionByDEM: "Koristi DEM",
		radarCalibBetaNought: "Beta nula",
		radarCalibSigmaNought: "Sigma nula",
		radarCalibGammaNought: "Gamma nula",
		speckleFilterTypeLee: "Lee filter",
		speckleFilterTypeEnhancedLee: "Unapređeni Lee filter",
		speckleFilterTypeFrost: "Frost filter",
		speckleFilterTypeKuan: "Kuan filter",
		speckleNoiseModelMul: "Multiplikativni šum",
		speckleNoiseModelAdd: "Aditivni šum",
		speckleNoiseModelAddnMul: "Aditivni i multiplikativni šum",
		mosaicOpTypeFirst: "Prva",
		mosaicOpTypeLast: "Poslednje",
		mosaicOpTypeMin: "Minimum",
		mosaicOpTypeMax: "Maksimum",
		mosaicOpTypeMean: "Sredina",
		mosaicOpTypeBlend: "Spoj",
		mosaicOpTypeSum: "Zbir",
		integer: "Celi broj",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Vertikalno",
		horizontal: "Horizontalno",
		localCellStatisticsMajority: "Većina",
		localCellStatisticsMax: "Maksimum",
		localCellStatisticsMean: "Sredina",
		localCellStatisticsMedian: "Medijana",
		localCellStatisticsMin: "Minimum",
		localCellStatisticsMinority: "Manjina",
		localCellStatisticsRange: "Opseg",
		localCellStatisticsStdDev: "Standardna devijacija",
		localCellStatisticsSum: "Zbir",
		localCellStatisticsVariety: "Varijetet",
		localCellStatisticsMajorityIgnoreND: "Većina (ignoriši NoData)",
		localCellStatisticsMaxIgnoreND: "Maksimum (ignoriši NoData)",
		localCellStatisticsMeanIgnoreND: "Sredina (ignoriši NoData)",
		localCellStatisticsMedianIgnoreND: "Srednja vrednost (ignoriši NoData)",
		localCellStatisticsMinIgnoreND: "Minimum (ignoriši NoData)",
		localCellStatisticsMinorityIgnoreND: "Manjina (ignoriši NoData)",
		localCellStatisticsRangeIgnoreND: "Opseg (ignoriši NoData)",
		localCellStatisticsStdDevIgnoreND: "Standardno odstupanje (ignoriši NoData)",
		localCellStatisticsSumIgnoreND: "Zbir (ignoriši NoData)",
		localCellStatisticsVarietyIgnoreND: "Raznovrsnost (ignoriši NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Procenat (Ignoriši NoData)",
		fromSource: "Od izvora",
		toSource: "Za izvor",
		colorspaceConversionRgbToHsv: "RGB u HSV",
		colorspaceConversionHsvToRgb: "HSV u RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Sredina",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Pravougaonik",
		circleNeighborhood: "Krug",
		annulusNeighborhood: "Kružni venac",
		wedgeNeighborhood: "Klin",
		irregularNeighborhood: "Neredovno",
		weightNeighborhood: "Debljina",
		four: "Četiri",
		eight: "Osam",
		within: "Unutar",
		cross: "Krst",
		addLink: "Dodaj link",
		noLink: "Nema linka",
		weightedMean: "Srednja ponderisana vrednost",
		ls8QCBitPatternCirrus: "Landsat 8 Cirus",
		ls8QCBitPatternCloud: "Landsat 8 Oblak",
		ls8QCBitPatternCloudShadow: "Landsat 8 Senka oblaka",
		ls8QCBitPatternDesignatedFill: "Landsat 8 Navedena popuna",
		ls8QCBitPatternDroppedFrame: "Landsat 8 Ispušten okvir",
		ls8QCBitPatternSnowIce: "Landsat 8 Sneg/led",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 Okluzija terena",
		ls8QCBitPatternVegetation: "Landsat 8 Vegetacija",
		ls8QCBitPatternWater: "Landsat 8 Voda",
		downStream: "Nizvodni smer",
		upStream: "Uzvodni smer",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Trenutni isečak",
		allSlices: "Svi isečci",
		expandDistance: "RASTOJANJE",
		expandMorphological: "MORFOLOŠKI",
		spectralProfileFile: "Spektralni profil",
		trainingFeatureFile: "Funkcija za obuku",
		randomDistributionTypeUniform: "Jednobrazno",
		randomDistributionTypeUniformInteger: "Celi broj",
		randomDistributionTypeNormal: "Normalno",
		randomDistributionTypeExponential: "Eksponencijalno",
		randomDistributionTypePoisson: "Otrov",
		randomDistributionTypeGamma: "Gama",
		randomDistributionTypeBinomial: "Binomijalni",
		randomDistributionTypeGeometric: "Geometric",
		randomDistributionTypeNegativeBinomial: "Negativni binomijalni",
		randomGeneratorTypeStandardCRand: "Standardni C nasum.",
		randomGeneratorTypeAlgorithmACM599: "ACM prikupljeni algoritam 599",
		randomGeneratorTypeMersenneTwister: "Mersenin tvister",
		sumName: "Zbir",
		medainName: "Medijana",
		trendLinear: "Linearno",
		trendHarmonic: "Harmonički",
		trendPolynomial: "Polinomno",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Sezonski-Kendall",
		dimensionByValue: "Prema vrednosti",
		dimensionByInterval: "Prema intervalu",
		mdimDefTypeAll: "Sve",
		mdimDefTypeByValues: "Po vrednostima",
		mdimDefTypeByRanges: "Po opsezima",
		mdimDefTypeByIteration: "Po iteraciji",
		mdimDefTypeByInterval: "Prolazni interval",
		mdimDefTypeByTargetRaster: "Po ciljanom rasteru",
		esriTimeUnitsHours: "Sati",
		esriTimeUnitsDays: "Dani",
		esriTimeUnitsWeeks: "Sedmice",
		esriTimeUnitsMonths: "Meseci",
		esriTimeUnitsYears: "Godine",
		esriTimeIntervalKeywordHourly: "Svakog sata",
		esriTimeIntervalKeywordDaily: "Dnevno",
		esriTimeIntervalKeywordWeekly: "Sedmično",
		esriTimeIntervalKeywordDekadly: "Dekadno",
		esriTimeIntervalKeywordPentadly: "Pentadno",
		esriTimeIntervalKeywordMonthly: "Mesečno",
		esriTimeIntervalKeywordQuarterly: "Kvartalno",
		esriTimeIntervalKeywordYearly: "Godišnje",
		esriTimeIntervalKeywordRecurringDaily: "Ponavljanje svakog dana",
		esriTimeIntervalKeywordRecurringWeekly: "Ponavljanje svake nedelje",
		esriTimeIntervalKeywordRecurringMonthly: "Ponavljanje svakog meseca",
		esriTimeIntervalKeywordRecurringQuarterly: "Ponavljanje kvartalno",
		aggDefTypeAll: "Sve",
		aggDefTypeIntervalKeyword: "Ključna reč za interval",
		aggDefTypeIntervalValue: "Vrednost intervala",
		aggDefTypeIntervalRanges: "Opsezi intervala",
		latestChange: "Vreme najnovije promene",
		earliestChange: "Vreme najranije promene",
		largestChange: "Vreme najveće promene",
		numberOfChanges: "Broj promena",
		longestChange: "Vreme najduže promene",
		shortestChange: "Vreme najkraće promene",
		fastestChange: "Vreme najbrže promene",
		slowestChange: "Vreme najsporije promene",
		allChanges: "Sve",
		increaseChanges: "Povećanje",
		decreaseChanges: "Smanjenje",
		segmentBeginning: "Početak segmenta",
		segmentEnd: "Kraj segmenta",
		esriComputeChangeMethodDifference: "Razlika",
		esriComputeChangeMethodRelativeDifference: "Relativna razlika",
		esriComputeChangeMethodCategorical: "Kategorička razlika",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spektralno euklidsko rastojanje",
		esriComputeChangeMethodMultispectralAngularDifference: "Spektralna razlika ugla",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Opseg sa najviše promena",
		esriComputeChangeKeepAll: "Zadrži sve",
		esriComputeChangeKeepChangedOnly: "Zadži samo promenjene piksele",
		esriComputeChangeKeepUnchangedOnly: "Zadži samo nepromenjene piksele",
		esriComputeChangeUseColorAverage: "Boje za vrednosti od i do",
		esriComputeChangeUseColorFrom: "Koristi boje za vrednost od",
		esriComputeChangeUseColorTo: "Koristi boje za vrednost do",
		factorFunctionBinary: "Binarno",
		factorFunctionForward: "Unapred",
		factorFunctionLinear: "Linearno",
		factorFunctionInvLinear: "Inverzno linearno",
		factorFunctionTable: "Tabela",
		factorFunctionSymLinear: "Simetrično linearno",
		factorFunctionSymInvLinear: "Simetrično inverzno linearno",
		factorFunctionCos: "Kosinus",
		factorFunctionSec: "Sekans",
		factorFunctionCosSec: "Kosinus sekans",
		factorFunctionSecCos: "Sekans kosinus",
		noSort: "Nemojte sortirati",
		ascend: "Uzdizanje",
		descend: "Spuštanje",
		autoDetect: "Automatsko otkrivanje",
		nearest: "Najbliži",
		linear: "Linearno",
		esriMonthJanuary: "Januar",
		esriMonthFebruary: "Februar",
		esriMonthMarch: "Mart",
		esriMonthApril: "April",
		esriMonthMay: "Maj",
		esriMonthJune: "Jun",
		esriMonthJuly: "Jul",
		esriMonthAugust: "Avgust",
		esriMonthSeptember: "Septembar",
		esriMonthOctober: "Oktobar",
		esriMonthNovember: "Novembar",
		esriMonthDecember: "Decembar",
		dimensionalMovingIgnoreNoData: "Podaci",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "Popunite NoData",
		circularMean: "Srednji kružni luk",
		circularName: "Kružno",
		arithmeticName: "Aritmetički",
		slopeName: "Nagib",
		aspectName: "Gledište (ekspozicija)",
		meanCurvature: "Srednja zakrivljenost",
		profileCurvature: "Zakrivljenost profila (normalna linija nagiba)",
		tangentialCurvature: "Tangencijalna (normalna kontura) zakrivljenost",
		planCurvature: "Planska zakrivljenost (projektovana kontura)",
		contourGeodesicTorsion: "Konturna geodetska torzija",
		gaussianCurvature: "Gausova krivina",
		casoratiCurvature: "Kasoratijeva zakrivljenost",
		localSurfaceTypeQuadratic: "Kvadratni",
		localSurfaceTypeBiquadratic: "Dvokvadratni",
		thresholdNoThreshold: "Nema praga",
		thresholdPercentLeastCost: "Procenat najmanjeg troška",
		thresholdAccumulativeCost: "Akumulirani trošak",
		clrmapTypeHillshade: "Hillshade (senčenje brda)"
	},
	categoryLabels: {
		sourceCharacteristics: "Karakteristike izvora",
		neighborhoodSettings: "Postavke susedstva",
		statistics: "Statistika",
		gamma: "Gama",
		viewshedParameters: "Parametri vidnog polja",
		observerParameters: "Parametri posmatrača",
		irregularDataInterpolation: "Neregularna interpolacija podataka",
		modelStatistics: "Model statistike",
		aggregationDef: "Definicija grupisanja",
		filterByAttributes: "Filtriraj prema atributima",
		percentileName: "Percentil",
		rasterInfo: "Informacije za raster",
		extent: "Obuhvat",
		spatialReference: "Prostorna referenca"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Naziv sloja koji će biti kreiran i dodat mapi.</p>",
		resultType: "<p>Tip izlaza koji će biti kreiran. Izlazi mogu biti slojevi sa popločanim slikama ili slojevi dinamičkih slika.</p>",
		saveResultIn: "<p>Naziv foldera u <b>Moj Sadržaj</b> gde su sačuvani svi rezultati.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Podešavanja okoline za analizu u Map Viewer. </p>",
		outSR: "<p>Definište koordinantni sistem za analizu i rezultate sloja</p>",
		extent: "<p>Određuje oblast koja se koristi za analizu.</p>",
		snapRaster: "<p>Prilagođava opseg izlaza tako da se poklapa sa poravnanjem ćelija navedenog sloja rastera za kačenje.</p>",
		cellSize: "<p>Određuje veličinu ćelije ili rezoluciju koja će se koristiti za analizu i kreiranje izlaznog rasterskog sloja.</p>",
		mask: "<p>Određuje sloj maske u kojem će se za analizu koristiti samo ćelije koje spadaju u oblast maske.</p>",
		resamplingMethod: "<p>Određuje kako da se interpoliraju vrednosti piksela kada se ulazni i izlazni rasteri ne poklapaju.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Nepodržani tip",
		currentlyUnsupported: " Podrazumevani uređivač za ${missingType} je na čekanju ali uskoro stiže. Privremeni tekstualni okvir za čuvanje mesta za određivanje unosa zasnovanih na stringovima.",
		unsupportedOverrideWarning: "Komponenta za zamenu uređivača koja pruža bolji korisnički doživljaj za rad sa sledećim parametrima je na čekanju, ali uskoro dolazi:",
		overrideWidgetMissing: "Nedostaje komponenta uređivača zamene!",
		uiIncomplete: "Slanje posla nije uspelo. Funkcija ne može da se pokrene jer su neka od obaveznih polja nepotpuna ili nedostaju u korisničkom interfejsu.",
		count: "Broj",
		selectVariables: "Selektujte promenljive",
		selectFeature: "Selektujte sloj funkcija",
		greaterThanErrorMessage: "Ulazna vrednost mora da bude veća od ${min}",
		lesserThanErrorMessage: "Ulazna vrednost mora da bude manja od ${max}",
		greaterThanOrEqualErrorMessage: "Ulazna vrednost mora da bude veća od ili jednaka ${min}",
		lesserThanOrEqualErrorMessage: "Ulazna vrednost mora da bude veća ili jednaka od ${max}",
		allowScalar: "Odaberite sloj ili unesite konstantu",
		selectField: "Izaberite polje",
		parameterRequired: "Ovaj parametar je obavezan.",
		enterAValue: "Unesite vrednost...",
		invalidInput: "Uneta vrednost nije validna.",
		itemNotFound: "Stavka ne postoji ili je nedostupna.",
		itemPermissionDenied: "Nemate dozvole za pristupanje ovoj stavki.",
		layerNotAvailable: "Učitavanje sloja nije uspelo ${layerName}.",
		multipleLayersNotAvailable: "Učitavanje sloja nije uspelo ${layerName} i ostalo.",
		learnMoreLabel: "Saznaj više",
		fieldNotAvailable: "Neuspešno učitavanje polja.",
		allowAnalysis: "Analiza nije dozvoljena za uslugu slike",
		allowAnalysisReason: "Jedan ili više slojeva sa mape nisu navedeni ovde jer ne dozvoljavaju analizu.",
		learnMoreText: "Saznajte više",
		atLeastOneRasterInput: "Makar jedan sloj mora da bude rasterski sloj.",
		browseAnalysisLayers: "Pretraži slojeve",
		activeMapViewExtent: "Koristi trenutni obuhvat mape",
		chooseRaster: "Odaberite Raster isecanja",
		chooseGeometry: "Odaberite Geometriju isecanja",
		resultType: "Tip rezultata",
		saveInFolder: "Sačuvaj u fascikli",
		outputName: "Ime izlaza",
		outputLayerType: "Izlazni tip sloja",
		dynamicImageryLayer: "Dinamički sloj snimaka",
		tiledImageryLayer: "Sloj snimaka u pločicama",
		custom: "Prilagođeno",
		loading: "Učitavanje...",
		layerMissing: "Jedan ili više slojeva sa mape nisu navedeni ovde jer ne dozvoljavaju analizu. Saznajte više.",
		browseCoordinateSystems: "Pretraži koordinatne sisteme",
		unableToRepopulateOutSR: "Nije moguće popuniti izlazni koordinatni sistem.",
		defaultTitle: "Prikaži više",
		"ARC (equal arc-second)": "ARC (jednaka lu-sekunda)",
		Africa: "Afrika",
		Antarctica: "Antarktik",
		Argentina: "Argentina",
		Asia: "Azija",
		"Asteroid Belt": "Asteroidni pojas",
		"Atlantic Ocean": "Atlantski okean",
		Australia: "Australija",
		"Australia and New Zealand": "Australija i Novi Zeland",
		Austria: "Austrija",
		"BLM (US Feet)": "BLM (SAD stope)",
		Bangladesh: "Bangladeš",
		"Beijing 1954": "Peking 1954",
		Bhutan: "Butan",
		CGCS2000: "CGCS2000",
		Canada: "Kanada",
		Caribbean: "Karibi",
		"Caribbean Sea": "Karipsko more",
		"Central America": "Centralna Amerika",
		"Central and North America": "Centralna i Severna Amerika",
		Colombia: "Kolumbija",
		Continental: "Kontinentalno",
		"County Systems": "Sistemi oblasti",
		"Democratic Republic of the Congo": "Demokratska Republika Kongo",
		"EPSG Arctic": "EPSG arktički",
		Earth: "Zemlja",
		"Ellipsoidal-based": "Elipsoidna osnova",
		Europe: "Evropa",
		Finland: "Finska",
		France: "Francuska",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gaus Kruger",
		"Geographic Coordinate Systems": "Geografski koordinatni sistem",
		Germany: "Nemačka",
		"Gravity-related": "Povezano sa gravitacijom",
		"Greenwich-based": "Na osnovu Griniča",
		"Highways England": "Autoputevi Engleska",
		Illinois: "Ilinois",
		"Indian Ocean": "Indijski okean",
		"Indian Subcontinent": "Indijski podkontinent",
		Indiana: "Indijana",
		Indonesia: "Indonezija",
		Iowa: "Ajova",
		"Ireland and United Kingdom": "Irska i Ujedinjeno Kraljevstvo",
		Italy: "Italija",
		Japan: "Japan",
		Jupiter: "Jupiter",
		Kansas: "Kanzas",
		"Las Vegas": "Las Vegas",
		Libya: "Libija",
		Malaysia: "Malezija",
		"Malaysia and Singapore": "Malezija i Singapur",
		Mars: "Mars",
		Mercury: "Merkur",
		Minnesota: "Minesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (SAD stope)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (Međ. stope)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (metri)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (SAD stope)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (Meš. stope)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (metri)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (SAD stope)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (Međ. stope)",
		"NAD 1983 (Meters)": "NAD 1983 (metri)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (metri)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (SAD stope)",
		"NAD 1983 (US Feet)": "NAD 1983 (SAD stope)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (Međ. stope)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (metri)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (SAD stope)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (Međ. stope)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (metri)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (SAD stope)",
		"National Grids": "Nacionalne mreže",
		Navajo: "Navaho",
		Neptune: "Neptun",
		"New Beijing": "Novi Peking",
		"New Zealand": "Novi Zeland",
		"North America": "Severna Amerika",
		"Northern Hemisphere": "Severna hemisfera",
		Norway: "Norveška",
		Oceans: "Okeani",
		Oregon: "Oregon",
		"Other GCS": "Ostali GSC",
		"Pacific Ocean": "Tihi okean",
		Pluto: "Pluton",
		Polar: "Polarno",
		Portugal: "Portugalija",
		"Projected Coordinate Systems": "Projektovani koordinatni sistem",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Zamenjeno",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000S",
		Saturn: "Saturn",
		"Solar System": "Solarni sistem",
		"South Africa": "Južna Afrika",
		"South America": "Južna Amerika",
		"South Korea": "Južna Koreja",
		"Southern Hemisphere": "Južna hemisfera",
		"Spheroid-based": "Sferoidna osnova",
		"State Plane": "Državna ravan",
		"State Systems": "Državni sistemi",
		Sweden: "Švedska",
		"Switzerland and Liechtenstein": "Švajcarska i Lihtenštajn",
		Texas: "Teksas",
		Tribal: "Plemenski",
		Turkey: "Turska",
		"US Feet": "SAD stope",
		"USA and territories": "SAD i teritorije",
		UTM: "UTM",
		Ukraine: "Ukrajina",
		"Unknown Height Systems": "Sistemi nepoznate visine",
		Uranus: "Uran",
		Venus: "Venera",
		"Vertical Coordinate Systems": "Vertikalni koordinatni sistem",
		Vietnam: "Vijetnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Viskonsin",
		"Wisconsin CRS": "Viskonsin CRS",
		World: "Svet",
		"World (Sphere-based)": "Svet (Sferna osnova)",
		Wyoming: "Vajoming",
		"Xian 1980": "Ksian 1980",
		done: "Završeno",
		noResults: "Nije pronađen nijedan rezultat",
		searchPlaceholder: "Naziv ili WKID",
		browseTemplate: "Pregled šablona rasterske funkcije",
		saveTemplate: "Sačuvajte šablon rasterske funkcije",
		preview: "Pregled",
		previewDescription: "Pregledajte rezultat pre pokretanja analize.",
		showPreview: "Prikaži pregled",
		previewLayer: "Pregled sloja ${number}",
		newPreview: "Novi pregled",
		previewPopup: "Omogućite pregled rezultata analize na osnovu ulaznih parametara.",
		updatePreviewLayer: "Ažurirajte izabrani sloj za pregled",
		createPreviewLayer: "Kreirajte novi sloj za pregled",
		maximumPreviewAllowed: "Dozvoljen maksimalan broj slojeva za pregled: ${maxCount}",
		previewFailure: "Ovaj sloj za pregled nije dostupan. Proverite ulazne parametre i ponovo ažurirajte ovaj sloj za pregled.",
		header: "Selektujte stavku",
		content: "Imate promene koje nisu sačuvane u ${rftTitle}. Ako počnete ispočetka sa novim šablonom, te promene će biti izgubljene.",
		dontSave: "Ne čuvaj",
		"continue": "Nastavi",
		stretch: "Uklopi u prozor",
		pan: "Pomeri",
		newTemplate: "Kreirajte novi šablon",
		openTemplate: "Otvorite šablon",
		addFunction: "Dodajte rasterske funkcije",
		addConstant: "Dodajte konstantu",
		addRaster: "Dodajte promenljivu rastera",
		move: "Premesti",
		zoom: "Zumiranje",
		saveAs: "Sačuvaj kao",
		clear: "Obriši",
		addRasterFunctionTitle: "Dodajte rasterske funkcije",
		templatePropertiesTitle: "Svojstva šablona",
		browseRFT: "Pregled šablona rasterske funkcije",
		defaultToolDescription: "${toolTitle} alatka za analizu.",
		openToolText: "Otvori alatku",
		toolDropdownText: "Padajuća lista sa alatkama",
		addToMap: "Potvrdi i dodaj na mapu",
		confirm: "Potvrdi",
		select: "Selektujte",
		selectTask: "Izaberite zadatak",
		unsupportedLayer: "Ovaj parametar ne podržava sledeće slojeve: ${layerName}.",
		viewDetails: "Prikaži kompletne detalje stavke",
		rename: "Preimenuj",
		duplicate: "Dupliraj",
		launch: "Otvorite za pokretanje",
		templateEditor: "Uređivač šablona",
		createItem: "Sačuvajte šablon rasterske funkcije",
		actionLabel: "Filter",
		filterPopoverHeading: "Filtrirajte funkcije",
		defaultSearchPlaceholder: "Pretraži po imenu",
		settings: "Podešavanja",
		summary: "Rezime",
		definitionQuery: "Upit za definisanje",
		matchVariables: "Promenljive podudaranja",
		unionDimension: "Unija dimenzija",
		nameEditorPlaceholder: "Unesite naslov",
		summaryEditorPlaceholder: "Unesite kratak opis.",
		definitionQueryPlaceholder: "Unesi...",
		upload: "Otpremi",
		chooseImage: "Kliknite da biste izabrali datoteku",
		update: "Ažuriraj",
		thumbnailErrors: {
			wrongImageType: "Izabran je pogrešan tip snimka",
			notAvailable: "Sličica nije dostupna",
			loadError: "Nije moguće učitati snimak",
			chooseFile: "Kliknite da biste izabrali datoteku"
		}
	}
};
const copy = "Kopiraj";
const save = "Sačuvaj";
const title = "Naslov";
const folder = "Fascikla";
const tags = "Oznake";
const savingMessage = "Čuvanje stavke u";
const shareWith = "Deli sa";
const share = "Podeli";
const setSharingLevel = "Podesite nivo deljenja";
const setGroupSharing = "Podesite grupno deljenje";
const owner = "Vlasnik";
const organization = "Organizacija";
const everyone = "Svi (javno)";
const groups = "Grupe:";
const type = "Tip";
const mosaic = "Mozaik";
const itemGroup = "Grupa stavki";
const item = "Stavka";
const definitionQuery = "Upit za definisanje";
const groupItemsBy = "Grupiši stavke prema";
const groupFieldName = "Naziv polja grupe";
const tagFieldName = "Naziv polja oznake";
const noTitleTagErrorMsg = "Za stavku morate da unesete naslov i oznake koje će omogućiti pronalaženje mape putem pretraga.";
const noTitleErrorMsg = "Morate da unesete naslov za stavku.";
const noTagErrorMsg = "Morate da unesete najmanje jednu oznaku da biste pomogli ljudima da pronađu stavku putem pretraga.";
const error = "Greška";
const warning = "Upozorenje";
const success = "Uspešno";
const details = "Detalji:";
const tryAgain = "Pokušajte ponovo";
const toolModeler = {
	save: "Sačuvaj",
	editProperties: "Uredi svojstva",
	saveAs: "Sačuvaj kao",
	savingNotification: "Čuvanje promena stavke...",
	savingTitle: "Čuvanje",
	saveFailedMessage: "Čuvanje promena nije uspelo.",
	saveWithErrorsMessage: "Promene su sačuvane sa sledećim greškama.",
	viewItemMessage: "Pogledajte sačuvanu stavku",
	here: "ovde.",
	itemCreatedMessage: "Nova stavka je kreirana.",
	clickToViewItemMessage: "Kliknite na U redu da biste pogledali stranicu za detalje stavke; kliknite na Otkaži da nastavite.",
	readingFailed: "Nije uspelo učitavanje izabranog šablona rasterske funkcije.",
	failedToLoadXML: "Nije uspelo učitavanje izabranog šablona rasterske funkcije u XML formatu.",
	learnMore: "Saznajte više",
	overwriteTitle: "Potvrdite zamenu",
	overwriteMessage: "Da li želite da zamenite ovu stavku?",
	overwriteSuccessMessage: "Stavka je ažurirana."
};
const toolEditor = {
	run: "Pokreni",
	save: "Sačuvaj",
	deleteSelected: "Izbriši izabrane stavke",
	addRaster: "Dodaj raster",
	addScalar: "Dodaj skalar",
	layout: "Automatski raspored",
	errorTitle: "Greška",
	invalidToolMessage: "Šablon rasterske funkcije je nevažeći.",
	out: "Izlaz",
	zoomIn: "Uvećaj",
	zoomOut: "Umanji",
	zoomToFit: "Uklopi u prozor",
	panOn: "Promeni na režim pomeranja",
	panOff: "Isključi režim pomeranja",
	defaultModelName: "Model alatke",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Šablon rasterske funkcije",
	defaultToolDescription: "Dodajte kratak rezime u vezi sa rasterskom funkcijom.",
	defaultHelpText: "Kliknite na ikonu pomoći da biste izmenili tekst pomoći",
	editHelpTitle: "Izmeni pomoć",
	saveLabel: "Sačuvaj",
	cancelLabel: "Otkaži",
	thumbnail: {
		wrongImageType: "Izabran je pogrešan tip slike",
		notAvailable: "Sličica nije dostupna",
		loadError: "Nije moguće učitati sliku",
		chooseFile: "Kliknite da biste izabrali datoteku"
	}
};
const saveUtils = {
	thumbnail: "Sličica",
	sharing: "Deljenje"
};
const close = "Zatvori";
const unsavedWarningExisting = "Želite li da sačuvate promene stavke <b>${itemTitle}</b>?";
const unsavedWarningNew = "Želite li da sačuvate promene?";
const saveAs = "Sačuvaj kao";
const dontSave = "Ne čuvaj";
const unsavedTitle = "Nesačuvane izmene";
const invalidRFTMessage = "Kreirani šablon rasterske funkcije je nevažeći.";
const errorTitle = "Greška";
const breadcrumb = "Uređivanje funkcije rastera";
const breadcrumbEditor = "Sadržaj > Uređivač funkcije rastera";
const viewerModeTitle = "Samo za čitanje";
const viewerModeMessage = "Stavka šablona rasterske funkcije je samo za čitanje. Promene se ne mogu sačuvati.";
const userStartDirection = "Izaberite funkciju da biste počeli da pravite šablon rasterske funkcije.";
const selectFunction = "Dodaj funkciju";
const deselectFunction = "Ukloni funkciju";
const dialogTitle = "Sistem";
const category = "Kategorije";
const search = "Pretraži rasterske funkcije";
const categoryNames = {
	analysis: "Analiza",
	appearance: "Izgled",
	classification: "Klasifikacija",
	conversion: "Konverzija",
	correction: "Korekcija",
	dataManagement: "Upravljanje podacima",
	distance: "Rastojanje",
	distanceLegacy: "Udaljenost (Legacy)",
	hydrology: "Hidrologija",
	math: "Matematika",
	mathConditional: "Matematika: uslovna",
	mathLogical: "Matematika: logička",
	mathTrigonometric: "Matematika: trigonometrijska",
	reclass: "Preklasifikacija",
	statistical: "Statistička",
	surface: "Površ"
};
const commonStrings_sr = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_sr);


//# sourceMappingURL=common-strings.sr-d6f475b9.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,