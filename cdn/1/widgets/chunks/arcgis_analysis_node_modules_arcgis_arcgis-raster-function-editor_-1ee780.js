"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-1ee780"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.nl-63c7fa4f.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.nl-63c7fa4f.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het uitvoerraster. Als alle invoercelgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Abs_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de invoerrasters.",
	"@@Abs_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de invoerrasters.",
	"@@Abs_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle invoerrasters. Dit is de standaardinstelling.",
	"@@Abs_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Abs_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Abs_Extent-Type_tag0@@": "Kies welk extent gebruikt moet worden in het uitvoerraster:",
	"@@Abs_Extent-Type_tag1@@": "Eerste van--Gebruik het extent van het eerste invoerraster om de verwerkingsextent te bepalen.",
	"@@Abs_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Abs_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Abs_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Abs_Raster_tag0@@": "Het inputraster waarvoor de absolute waarden moeten worden berekend.",
	"@@ACos_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@ACos_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@ACos_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@ACos_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@ACos_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@ACos_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@ACos_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@ACos_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@ACos_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@ACos_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@ACos_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@ACos_Raster_tag0@@": "De input waarvoor de cosinuswaarden moeten worden berekend.",
	"@@ACosH_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@ACosH_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@ACosH_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@ACosH_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@ACosH_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@ACosH_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@ACosH_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@ACosH_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@ACosH_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@ACosH_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@ACosH_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@ACosH_Raster_tag0@@": "De input waarvoor de omgekeerde hyperbolische cosinuswaarden moeten worden berekend.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "De resultaten van de Schijnbare Reflectie-functie kan ook worden uitgedrukt als albedo, wat het percentage is van de beschikbare energie die gereflecteerd wordt door het planeetoppervlak. Albedo data wordt gebruikt door wetenschappelijke gebruikers voor complexe modellering en technische remote-sensing applicaties.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Niet aangevinkt--De functie stuurt schijnbare reflectiewaarden terug. Dit is de standaardinstelling.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Aangevinkt--De functie stuurt 32-bit kommagetalwaardes terug, die meestal binnen het bereik van 0.0 tot 1.0 zitten. Er wordt geen data clipping uitgevoerd als deze optie is geselecteerd.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Aangezien het uitvoergegevenstype voor albedo een kommagetal is, moet u expliciet de voorkeur instellen <strong>Output Pixel Type</strong> ofwel op 32 bits zwevend, of 64 bits dubbel. De parameter <strong>Uitvoerpixeltype</strong> is te vinden op het tabblad <strong>Algemeen<strong> in de rasterfunctie </strong>Schijnbare reflectie</strong>. Als het <strong>Uitvoerpixeltype niet correct</strong> is ingesteld voor de <strong>Albedo-</strong> optie, zijn de resulterende waarden ongeldig en krijgen ze een waarde van 0.",
	"@@Apparent-Reflectance_Offset_tag0@@": "De geschaalde albedowaarde kan eventueel een offsetwaarde hebben:",
	"@@Apparent-Reflectance_Offset_tag1@@": "Voor 16-bit niet-ondertekende datatypes is de standaard schaal offset 5.000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "Voor 8-bit niet-ondertekende datatypes is de standaard schaal offset 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "Er wordt geen schaling toegepast wanneer de output albedo is.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "U kunt deze waarde handmatig instellen of bewerken voor elke band. De juiste informatie kan in uit de metadata of het inputrasterproduct worden afgelezen.",
	"@@Apparent-Reflectance_Raster_tag0@@": "Het rasterproduct waarop de schijnbare reflectie zal worden uitgevoerd.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "De schijnbare reflectie outputwaarde kan worden uitgedrukt als geheel getal. De schaalfactor is vermenigvuldigd door de albedo om alle kommagetalwaardes naar gehele getalwaardes te converteren.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Als de schaalfactor ofwel ${0} is of niet gespecificeerd is, wordt standaard schaling toegepast, afhankelijk van het pixeltype van de input data:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "Voor 16-bit niet-ondertekende datatypes is de standaard schaalfactor 50.000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "Voor 8-bit niet-ondertekende datatypes is de standaard schaalfactor 255.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "De schaalfactor wordt altijd toegepast als de output schijnbare reflectie is. Er wordt geen schaling toegepast wanneer de output albedo is.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Dit is zonhoogte waarde, uitgedrukt in graden. Dit wordt ingevuld door het systeem als de juiste informatie afgelezen kan worden uit de metadata. U kunt deze waarde handmatig instellen of bewerken.",
	"@@ArgStatistics_Max_tag0@@": "De maximumwaarde die u instelt is de hoogste waarde die gelijk is aan of minder is dan het einde van de tijdsduur.",
	"@@ArgStatistics_Max_tag1@@": "Deze input is alleen toepasbaar als de methode Tijdsduur is.",
	"@@ArgStatistics_Method_tag0@@": "Selecteer de statistische methode om te berekenen:",
	"@@ArgStatistics_Method_tag1@@": "Arg Max--Het argument van het maximum, die de ${Band index} terugstuurt waarvoor de gegeven pixel zijn minimale waarde van alle banden verkrijgt. Alle rasterbanden uit elk inputraster krijgen een 0-gebaseerde incrementele band index toegewezen, die eerst gesorteerd wordt door de inputraster index, en daarna door de relatieve band order in elke inputraster.",
	"@@ArgStatistics_Method_tag2@@": "Arg Mediaan--Het argument van de mediaan, die de ${Band index} terugstuurt waarvoor de gegeven pixel zijn mediaanwaarde van alle banden verkrijgt.",
	"@@ArgStatistics_Method_tag3@@": "Arg Min--Het argument van het minimum, die de ${Band index} terugstuurt waarvoor de gegeven pixel zijn minimale waarde van alle banden verkrijgt.",
	"@@ArgStatistics_Method_tag4@@": "Duur--De Tijdsduurmethode zoekt de langste opvolgende elementen in de reeks, waarin elk element een waarde heeft die hoger is of gelijk aan <strong>Min</strong> en lager dan of gelijk aan <strong>Max</strong>, en retourneert vervolgens de lengte.",
	"@@ArgStatistics_Min_tag0@@": "De minimumwaarde die u instelt is de laagste waarde die gelijk is aan of hoger is dan het begin van de tijdsduur.",
	"@@ArgStatistics_Min_tag1@@": "Deze input is alleen toepasbaar als de methode Tijdsduur is.",
	"@@ArgStatistics_Rasters_tag0@@": "Het inputraster waarop u de verscheidene statistische methoden uitvoert.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "Een constante input die terug wordt gestuurd als er geen definitieve maximum, minimum of mediaan kan worden verkregen. Het meeste voorkomende scenario is wanneer de maximum- of minimumwaarde meer dan eens voorkomt in de waardes van alle banden. De standaardwaarde voor de ongedefinieerde constante is 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "De ongedefinieerde klasse is alleen van toepassing als de methode <strong>ArgMax</strong></strong>, <strong>ArgMin of <strong>ArgMedian is</strong>.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Geeft aan of NoData-waarden worden genegeerd in de statistische berekening.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Ingeschakeld - De analyse zal zich uitstrekken over alle geldige pixels in de invoerrasters en zal NoData-pixels negeren.",
	"@@ArgStatistics_ignorenodata_tag2@@": "Uitgeschakeld - De analyse zal in NoData resulteren als er NoData-waarden voorkomen bij de pixels in de invoerrasters. Dit is de standaardinstelling.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Arithmetic_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Arithmetic_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Arithmetic_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Arithmetic_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Arithmetic_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Arithmetic_Operation_tag0@@": "De rekenkundige operatie die uitgevoerd moet worden tussen de twee inputrasters.",
	"@@Arithmetic_Operation_tag1@@": "De opties zijn als volgt:",
	"@@Arithmetic_Operation_tag2@@": "<strong>Delen door</strong>--Geeft als output het deelbare resultaat tussen de corresponderende pixelwaardes voor elk raster.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Min</strong>--Geeft als output het verschil tussen de corresponderende pixelwaardes voor elk raster. Dit kan gebruikt worden om de veranderdetectie te berekenen.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Modus</strong>--Geeft als output de pixelwaarde van alle overlappende pixels die het meeste voorkomt. Bijvoorbeeld: als er zes banden in een raster zitten, zullen er zes overlappende pixels zijn. Voor de waardes 4, 5, 6, 4, 7, 9 is de moduswaarde 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Vermenigvuldigen</strong>--Geeft als output het product van de corresponderende pixelwaardes voor elk raster. Dit kan gebruikt worden om een aantal kostenfuncties uit te voeren.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Plus</strong>--Geeft als output het totaal van alle corresponderende pixelwaardes voor elk raster.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Vermogen</strong>--Geeft als output het product van de corresponderende pixelwaardes naar het vermogen van het inputraster of scalar.",
	"@@Arithmetic_Raster_tag0@@": "De eerste inputraster dataset.",
	"@@Arithmetic_Raster2_tag0@@": "De tweede inputraster dataset.",
	"@@ASin_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@ASin_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@ASin_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@ASin_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@ASin_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@ASin_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@ASin_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@ASin_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@ASin_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@ASin_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@ASin_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@ASin_Raster_tag0@@": "De input waarvoor de omgekeerde sinuswaardes moeten worden berekend.",
	"@@ASinH_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@ASinH_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@ASinH_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@ASinH_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@ASinH_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@ASinH_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@ASinH_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@ASinH_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@ASinH_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@ASinH_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@ASinH_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@ASinH_Raster_tag0@@": "De input waarvoor de omgekeerde hyperbolische sinuswaardes moeten worden berekend.",
	"@@Aspect_Raster_tag0@@": "De input DEM die gebruik wordt om de aspect dataset af te leiden.",
	"@@Aspect-Slope_Raster_tag0@@": "De input DEM.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "Een schaalfactor die wordt gebruikt om de hoogtewaarden om te zetten voor de volgende twee doeleinden:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "Converteren van de hoogte-eenheden (zoals meters of voet) naar horizontale coördinaateenheden van de dataset, die kunnen bestaan uit voet, meters of graden.",
	"@@Aspect-Slope_Z-Factor_tag2@@": "Verticale overdrijving toevoegen voor visueel effect.",
	"@@ATan_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@ATan_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@ATan_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@ATan_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@ATan_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@ATan_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@ATan_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@ATan_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@ATan_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@ATan_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@ATan_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@ATan_Raster_tag0@@": "De input waarvoor de omgekeerde tangenswaardes moeten worden berekend.",
	"@@ATan2_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@ATan2_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@ATan2_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@ATan2_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@ATan2_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@ATan2_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@ATan2_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@ATan2_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@ATan2_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@ATan2_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@ATan2_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@ATan2_Raster_tag0@@": "De input die de teller, of y-waarde, specificeert, te gebruiken bij het berekenen van de omgekeerde tangens.",
	"@@ATan2_Raster2_tag0@@": "De input die de noemer, of x-waarde, specificeert, te gebruiken bij het berekenen van de omgekeerde tangens.",
	"@@ATanH_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@ATanH_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@ATanH_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@ATanH_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@ATanH_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@ATanH_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@ATanH_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@ATanH_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@ATanH_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@ATanH_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@ATanH_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@ATanH_Raster_tag0@@": "De input waarvoor de omgekeerde hyperbolische tangenswaardes moeten worden berekend.",
	"@@Attribute-Table_Raster_tag0@@": "Het inputraster.",
	"@@Attribute-Table_Table-Type_tag0@@": "De input attribuuttabel kan ingevoerd worden met het <strong>Handmatig</strong> type waarin je een klassenaam en een kleur aan elke waarde toewijst, of je kunt naar een bestaande tabel verwijzen die uit een ${.dbf} bestand komt.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Definieer uw band rekenkundige formule als u kiest voor <strong>User Defined</strong> voor uw <strong>Methode</strong>.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "Als u een voorgedefinieerde index voor uw <strong>Methode</strong>kiest, definieer dan de juiste banden van uw input raster dataset die overeenkomen met de index.",
	"@@Band-Arithmetic_Method_tag0@@": "Het type band rekenkundig algoritme dat u wilt inzetten. U kunt het aangepaste algoritme definiëren, of een voorgedefinieerde index kiezen.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong>--Burn Area Index",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>CIg</strong>--Chlorofy index - Groen",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>CIre</strong>--Chlorofyl index - Rode Rand",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Klei-mineralen</strong>--Verhouding klei-mineralen",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong>--Enhanced Vegetation Index",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>IJzerhoudende mineralen</strong>--Verhouding ijzerhoudende mineralen",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong>--Global Environmental Monitoring Index",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong>--Green Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong>--Green Vegetation Index Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>IJzer-oxide</strong>--IJzer-oxideverhouding",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong>--Modified Normalized Difference Water Index",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong>--Modified Triangulated Vegetation Index (tweede iteratie)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>Modified SAVI</strong>--Modified Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong>--Normalized Burn Ratio Index",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong>--Normalized Difference Built-up Index",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong>--Normalized Difference Moisture Index",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong>--Normalized Difference Snow Index",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong>--Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong>--Red-Edge Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong>--Normalized Difference Water Index",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong>--Perpendicular Vegetation Index",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong>--Red-Edge Triangulated Vegetation Index",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong>--Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong>--Simple Ratio",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong>--Red-Edge Simple Ratio",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Sultan's Formula</strong>--Sultan's Formula",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>Transformed SAVI</strong>--Transformed Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>Gedefinieerd door gebruiker</strong>--Maakt het mogelijk om de op maat gemaakte rekenkundige uitdrukking van de band te definiëren.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong>--Visible Atmospherically Resistant Index",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong>--Weighted Normalized Difference Water Index",
	"@@Band-Arithmetic_Raster_tag0@@": "Het inputraster.",
	"@@Binary-Thresholding_Raster_tag0@@": "Het inputraster.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Bitwise-And_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Bitwise-And_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Bitwise-And_Raster_tag0@@": "De eerste input om te gebruiken in deze bitwise-operatie.",
	"@@Bitwise-And_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Bitwise-And_Raster2_tag0@@": "De tweede input om te gebruiken in deze bitwise-operatie.",
	"@@Bitwise-And_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "De input waarop de verschuiving moet worden uitgevoerd.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "De input die het aantal posities definieert om de bits te verschuiven.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Not_Raster_tag0@@": "Het inputraster waarop de Bitwise Niet (aanvullende) operatie moet worden uitgevoerd.",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Or_Raster_tag0@@": "De eerste input om te gebruiken in deze bitwise-operatie.",
	"@@Bitwise-Or_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Bitwise-Or_Raster2_tag0@@": "De tweede input om te gebruiken in deze bitwise-operatie.",
	"@@Bitwise-Or_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "De input waarop de verschuiving moet worden uitgevoerd.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "De input die het aantal posities definieert om de bits te verschuiven.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Bitwise-Xor_Raster_tag0@@": "De eerste input om te gebruiken in deze bitwise-operatie.",
	"@@Bitwise-Xor_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Bitwise-Xor_Raster2_tag0@@": "De tweede input om te gebruiken in deze bitwise-operatie.",
	"@@Bitwise-Xor_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Boolean-and_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Boolean-and_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Boolean-and_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Boolean-and_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Boolean-and_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Boolean-and_Raster_tag0@@": "De eerste input om te gebruiken in deze Booleaanse operatie.",
	"@@Boolean-and_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Boolean-and_Raster2_tag0@@": "De tweede input om te gebruiken in deze Booleaanse operatie.",
	"@@Boolean-and_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Boolean-Not_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Boolean-Not_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Boolean-Not_Raster_tag0@@": "De eerste input om te gebruiken in deze Booleaanse operatie.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Boolean-Or_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Boolean-Or_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Boolean-Or_Raster_tag0@@": "De eerste input om te gebruiken in deze Booleaanse operatie.",
	"@@Boolean-Or_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Boolean-Or_Raster2_tag0@@": "De tweede input om te gebruiken in deze Booleaanse operatie.",
	"@@Boolean-Or_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Boolean-Xor_Raster_tag0@@": "De eerste input om te gebruiken in deze Booleaanse operatie.",
	"@@Boolean-Xor_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Boolean-Xor_Raster2_tag0@@": "De tweede input om te gebruiken in deze Booleaanse operatie.",
	"@@Boolean-Xor_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Buffered_Raster_tag0@@": "Het inputraster om in het geheugen op te slaan.",
	"@@Calculator_Cellsize-Type_tag0@@": "De celgrootte die gebruikt is om het outputraster te creëren.",
	"@@Calculator_Cellsize-Type_tag1@@": "U kunt de output celgrootte kiezen uit de volgende opties in de keuzelijst:",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>Eerste van</strong>--De celgrootte van de eerste rastervariabele.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Min van</strong>--De minimale celgrootte van de inputrasters.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Max van</strong>--De maximale celgrootte van de inputrasters.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Gemiddelde van</strong>--De gemiddelde celgrootte van de inputrasters.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Laatste van</strong>--De celgrootte van de laatste rastervariabele.",
	"@@Calculator_Cellsize-Type_tag12@@": "De standaardselectie is <strong>Max van</strong>.",
	"@@Calculator_Expression_tag0@@": "Bouw een rekenkundige uitdrukking om ruimtelijke analyse uit te voeren op het inputraster.",
	"@@Calculator_Expression_tag1@@": "Alle bestaande wiskundige functies kunnen gebruikt worden om de uitdrukking te bouwen. De beschikbare operatoren staan in de lijst hieronder.",
	"@@Calculator_Expression_tag2@@": "Rekenkundige Operaties",
	"@@Calculator_Expression_tag3@@": "Optellen: +",
	"@@Calculator_Expression_tag4@@": "Delen: /",
	"@@Calculator_Expression_tag5@@": "Modulus: %",
	"@@Calculator_Expression_tag6@@": "Vermenigvuldigen: *",
	"@@Calculator_Expression_tag7@@": "Kracht: **",
	"@@Calculator_Expression_tag8@@": "Aftrekken: -",
	"@@Calculator_Expression_tag9@@": "Booleaanse Operaties",
	"@@Calculator_Expression_tag10@@": "Booleaans En: &&",
	"@@Calculator_Expression_tag11@@": "Booleaans Of: ||",
	"@@Calculator_Expression_tag12@@": "Relationele Operaties",
	"@@Calculator_Expression_tag13@@": "Gelijk aan: ==",
	"@@Calculator_Expression_tag14@@": "Groter dan: >",
	"@@Calculator_Expression_tag15@@": "Groter dan of Gelijk aan: >=",
	"@@Calculator_Expression_tag16@@": "Kleiner dan: <",
	"@@Calculator_Expression_tag17@@": "Kleiner dan of Gelijk aan: <=",
	"@@Calculator_Expression_tag18@@": "Niet Gelijk aan: !=",
	"@@Calculator_Expression_tag19@@": "Aanvullende Operaties",
	"@@Calculator_Expression_tag20@@": "Minimum van twee rasters op een per-pixel basis: min(a,b)",
	"@@Calculator_Expression_tag21@@": "Maximum van twee rasters op een per-pixel basis: max(a,b)",
	"@@Calculator_Expression_tag22@@": "Dit zijn een aantal voorbeelden van uitdrukkingen:",
	"@@Calculator_Expression_tag23@@": "Eenvoudige Voorwaardelijke Verklaring: vind in een raster (aangeduid met T) hoogtewaardes boven 4.000 voet en geef deze gebieden een waarde van 1 en alle andere gebieden een waarde van 0.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Ineengesloten Voorwaardelijke Verklaring: vind gebieden waar de helling (aangeduid met b1)) onder de 10 graden is en GVVI (aangeduid met b2) boven de 0,5 is, en geef deze gebieden een waarde van 1. Wijs een waarde van 2 toe voor alle andere gebieden als de helling boven de 10 graden is en de hoogte (aangeduid met b3) boven de 2.500 voet is. Alle andere gebieden krijgen een waarde van 3.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Kies welke extent moet worden gebruikt in het uitvoerraster:</p><ul><li><p>Eerste van - Gebruik de extent van het eerste invoerraster om de verwerkingsextent te bepalen.</p></li><li>Kruispunt van - gebruik de extent van de overlappende pixels om de verwerkingsextent te bepalen. Dit is de standaardinstelling.</li><li>Vereniging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.</li><li>Laatste van--Gebruik de omvang van het laatste invoerraster om de verwerkingsomvang te bepalen.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "De gebruikergedefinieerde variabele-naam en het inputraster.",
	"@@Classify_Input-Definition-File_tag0@@": "Het input Esri Classifier Definitie (${.ecd})-bestand dat de statistieken bevat en andere informatie over classificatie voor de specifieke dataset, classificeerder en gekozen kenmerken.",
	"@@Classify_Raster_tag0@@": "De rasterdataset die u wilt classificeren.",
	"@@Classify_Raster2_tag0@@": "Een optionele ondergeschikte rasterdataset om in de classificeerder op te nemen, zoals een gesegmenteerde afbeelding, multispectrale afbeelding of hoogtegegevens, die gebruikt worden om een robuustere classificatiedefinitie te genereren voor de dataset. De rasterdataset voor deze parameter moet overeenkomen met degene die gebruikt is om het input Esri Classificeerder-bestand te creëren.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "De volgende dingen kunnen gebruikt worden om de clippingomvang te specificeren:",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Raster bijsnijden</strong>--Omvang van het knipraster",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Aangepaste extent</strong>--X en Y minimum- en maximumcoördinaten",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Huidige kaartextent</strong>--Omvang van de huidige kaartweergave",
	"@@Clip_Clipping-Raster_tag0@@": "De rasterlaag die gebruikt wordt om bij te knippen.",
	"@@Clip_Clipping-Type_tag0@@": "Specificeer of u het gebied binnen of buiten de knipgeometrie wilt behouden.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Intern bijknippen</strong>--Satellietbeelden binnen de knipomvang worden verwijderd.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Extern bijknippen</strong>--Satellietbeelden buiten de knipomvangen worden verwijderd.",
	"@@Clip_Custom-Extent_tag0@@": "Specificeer de vier coördinaten die de omvang definiëren van het begrenzingsvak dat gebruikt wordt om het raster te knippen.",
	"@@Clip_Output-Extent_tag0@@": "De x- en y-coördinaten van de huidige knipomvang.",
	"@@Clip_Output-Extent_tag1@@": "De knop <strong>Huidige kaartomvang vastleggen</strong> gebruikt de displayomvang voor de actieve kaart.",
	"@@Clip_Raster_tag0@@": "De inputraster laag.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "Indien geselecteerd, wordt de data bijgeknipt volgens de geometrie van de gespecificeerde feature class.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Niet aangevinkt--De functie gebruikt de knipgeometrie die gespecificeerd is door <strong>Rechthoek</strong>. Dit is de standaardinstelling.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Aangevinkt--De functie gebruikt de knipgeometrie die gedefinieerd is door een featureklasse.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "Het kleurconversietype om uit te voeren:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "HSV naar RGB",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "RGB naar HSV",
	"@@Color-Model-Conversion_Raster_tag0@@": "Het inputraster.",
	"@@Colormap_Color-Ramp_tag0@@": "Kies een al bestaand kleurverloop.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Kies het type kleurschema om het inputraster mee te renderen",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Kleurverloop--Gebruik een kleurverloop.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Kleurenkaart--Gebruik een al bestaande kleurenkaart.",
	"@@Colormap_Colormap_tag0@@": "De volgende standaard kleurenkaarten zijn beschikbaar in de keuzelijst:",
	"@@Colormap_Colormap_tag1@@": "Hoogte--Een kleurenkaart die geleidelijk van cyaan naar paars naar zwart overloopt.",
	"@@Colormap_Colormap_tag2@@": "Grijs--Een kleurenkaart die geleidelijk van zwart naar wit overloopt.",
	"@@Colormap_Colormap_tag7@@": "Bergschaduw - Een kaart in grijstinten voor het visualiseren van een 3D-representatie van het terreinoppervlak, waarbij rekening wordt gehouden met de relatieve positie van de zon voor het aanbrengen van schaduweffectin in de afbeelding.",
	"@@Colormap_Colormap_tag3@@": "NDVI--Een kleurenkaart om vegetatie te visualiseren. Waardes in de buurt van nul zijn blauw. Lage waardes zijn bruin. Dan gaan de kleuren geleidelijk over van rood, naar oranje, naar geel, naar groen, en naar zwart als de vegetatie index van laag naar hoog gaat.",
	"@@Colormap_Colormap_tag4@@": "NDVI2--Een kleurenkaart om vegetatie te visualiseren. Lage waardes variëren van wit naar groen. Dan variëren de kleuren van grijs, naar paars, naar violet, naar donkerblauw, en naar zwart als de vegetatie index van laag naar hoog gaat.",
	"@@Colormap_Colormap_tag5@@": "NDVI3--Een kleurenkaart om vegetatie te visualiseren. Waardes in de buurt van nul zijn blauw. Dan gaan de kleuren geleidelijk over van rood, naar oranje, en naar groen als de vegetatie index van laag naar hoog gaat.",
	"@@Colormap_Colormap_tag6@@": "Willekeurig--Een willekeurige kleurenkaart.",
	"@@Colormap_Raster_tag0@@": "Het inputraster.",
	"@@Colormap-To-RGB_Raster_tag0@@": "Het input kleurenkaartraster.",
	"@@Complex_Raster_tag0@@": "Het inputraster.",
	"@@Composite-Bands_Rasters_tag0@@": "Gebruik de vervolgkeuzelijst of de knop <strong>Bladeren</strong> om de rasterinvoer te kiezen.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Kies welke celgrootte moet worden gebruikt in het uitvoerraster. Als alle ingevoerde celgroottes gelijk zijn, zullen alle opties hetzelfde resultaat opleveren.</p><ul><li>Eerste van--Gebruik de eerste celgrootte van de invoerrasters.</li><li>Min van--Gebruik de kleinste celgrootte van alle invoerrasters.</li><li>Max van--Gebruik de grootste celgrootte van alle ingevoerde rasters. Dit is de standaardinstelling.</li><li>Gemiddelde van--Gebruik de gemiddelde celgrootte van alle invoerrasters.</li><li>Laatste van--Gebruik de laatste celgrootte van de invoerrasters.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Con-function_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Con-function_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Con-function_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Con-function_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Con-function_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Con_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Con_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Con_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Con_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Con_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Con_False-Raster_tag0@@": "De input waarvan de waardes gebruikt worden als de output pixelwaardes als de conditie onjuist is. Het kan een geheel getal, een kommagetalraster, of een constante waarde zijn.",
	"@@Con_Raster_tag0@@": "Het inputraster dat een Booleaans resultaat representeert van een logische wiskundige rasterfunctie. De waardes zullen ofwel 1 (voor juist) ofwel 0 (voor onjuist) zijn. Het kan een geheel getal of een kommagetalraster zijn.",
	"@@Con_True-Raster_tag0@@": "De input waarvan de waardes gebruikt worden als de output pixelwaardes als de conditie juist is. Het kan een geheel getal, een kommagetal raster of een constante waarde zijn.",
	"@@Constant_Constant_tag0@@": "De waarde van de constante wordt toegevoegd aan het virtuele raster.",
	"@@Constant_Raster-Info_tag0@@": "Gebruik de knop <strong>Templateraster laden</strong> om een template van een directory of portaal te laden.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "De hoeveelheid glad maken om toe te passen op de contourlijn. De standaardwaarde is 2,5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "Een lagere waarde produceert een contourlijn met meer granulariteit en minder gladheid, terwijl een hogere waarde een contourlijn produceert met meer gladheid die er minder gekarteld uitziet.",
	"@@Contour_Contour-Interval_tag0@@": "Het verschil in hoogte tussen de contourlijnen.",
	"@@Contour_Contour-Interval_tag1@@": "Een kleine contourinterval wordt gebruikt in relatief platte gebieden, terwijl de grotere contourintervals gebruikt worden op variabel of bergachtig terrein.",
	"@@Contour_Contour-Type_tag0@@": "Het type contour om te creëren:",
	"@@Contour_Contour-Type_tag1@@": "<strong>Contourvulling</strong>--Vult het gebied tussen elke contourlijn met de gekwantificeerde hoogtewaarde.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Contourlijnen</strong>--Sluit punten van gelijke hoogte bij elkaar aan om een lijn te creëren die constante hoogte representeert.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Alleen glad oppervlak</strong>--Maakt de input hoogtelaag glad, maar produceert geen contours.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "De indexcontour, die gerepresenteerd wordt als een vette lijn.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "De standaardwaarde is 5; dus elke 5e contourlijn is vet.",
	"@@Contour_Number-Of-Contours_tag0@@": "Het aantal contouren om te genereren in de weergave. Dit past de contourinterval dynamisch aan aan het terrein in de weergave, terwijl de gestandaardiseerde intervallen zoals 1, 5, 10, enzovoorts worden behouden.",
	"@@Contour_Raster_tag0@@": "Een enkele band raster hoogte dataset.",
	"@@Contour_Z-Base_tag0@@": "De basis contourwaarde. Contours worden gegenereerd boven en beneden deze waarde als benodigd om het gehele waardebereik van het inputraster te dekken. De standaardwaarde is 0.",
	"@@Contour_Z-Base_tag1@@": "Een waarde van 0 representeert vaak gemiddeld zeeniveau, afhankelijk van de bronhoogte dataset.",
	"@@Contour_Z-Factor_tag0@@": "De eenheidsconversiefactor die gebruikt wordt bij het genereren van contouren. De standaardwaarde is 1.",
	"@@Contour_Z-Factor_tag1@@": "De contourlijnen worden gegenereerd op basis van de z-waardes in het inputraster, die vaak gemeten wordt in eenheden van meters of voet. Met de standaardwaarde van 1 zullen de contours in dezelfde eenheden zitten als de z-waardes van het inputraster. Om contouren te creëren in een andere eenheid dan die van de z-waardes, stelt u een geschikte waarde in voor de z-factor. Merk op dat het voor deze tool niet nodig is om een consistente grond x,y en oppervlak z-eenheden te hebben.",
	"@@Contour_Z-Factor_tag2@@": "Bijvoorbeeld, als de hoogtewaardes in het inputraster in voet zijn, maar u wilt de contours gegenereerd hebben in meters, dan stelt u de z-factor in op 0,3048 (want 1 voet = 0,3048 meter).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Pas de helderheid van de rasterlaag aan.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "U kunt de slider gebruiken om de helderheidscompensatie te veranderen, of u kunt een waarde typen.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Pas het contrast van de rasterlaag aan.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "U kunt de slider gebruiken om de contrastcompensatie te veranderen, of u kunt een waarde typen.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "Het inputraster waarop u de helderheid en het contrast kunt bewerken.",
	"@@Convolution_kernel_tag0@@": "<p>Deze tabel toont hoe elke pixel gewogen wordt in het filterproces. Deze tabel kan bewerkt worden als u<strong>Gebruiker gedefinieerd</strong>als het<strong>Type</strong> kiest.</p>",
	"@@Convolution_Raster_tag0@@": "De inputraster dataset.",
	"@@Convolution_Type_tag0@@": "Selecteer het type filteren dat u wilt uitvoeren. Er zijn opties voor verscherpen, vervagen en randdetectie, of u kunt uw eigen op kernel-gebaseerde filter definiëren",
	"@@Corridor_Distance-Raster-1_tag0@@": "Het eerste input afstandsraster. Het zou een opgebouwde kostenafstand output uit Kostenafstand of Padafstand moeten zijn.",
	"@@Corridor_Distance-Raster-2_tag0@@": "Het tweede input afstandsraster. Het zou een geaccumuleerde kostenafstand output uit Kostenafstand of Padafstand moeten zijn.",
	"@@Cos_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Cos_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Cos_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Cos_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Cos_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Cos_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Cos_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Cos_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Cos_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Cos_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Cos_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Cos_Raster_tag0@@": "De input waarvoor de cosinuswaarden moeten worden berekend.",
	"@@CosH_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@CosH_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@CosH_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@CosH_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@CosH_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@CosH_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@CosH_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@CosH_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@CosH_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@CosH_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@CosH_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@CosH_Raster_tag0@@": "De input waarvoor de hyperbolische cosinuswaarden moeten worden berekend.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Deze parameter simuleert de verhoogde inspanning om kosten te overkomen wanneer de opgebouwde kosten groeien. Het wordt gebruikt om de moeheid van de reiziger te modelleren. De groeiende opgebouwde kosten om een cel te bereiken zijn vermenigvuldigd met het weerstandsratio en toegevoegd aan de kosten om naar de volgende cel te bewegen.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Het is een gemodificeerde versie van een samengestelde rentevoetformule die gebruikt wordt om de schijnbare kosten te berekenen om door een cel te bewegen. Als de waarde van het weerstandstarief omhoog gaat, verhoogt het de kosten van de cellen die later bezocht worden. Hoe groter het weerstandstarief, hoe hoger de kosten om de volgende cel te bereiken, die samengesteld wordt door elke volgende beweging. Aangezien het weerstandstarief vergelijkbaar is met een samengesteld tarief en de accumulatieve kostwaardes over het algemeen erg groot zijn, worden kleine weerstandstarieven geadviseerd, zoals 0,005 of nog kleiner, afhankelijk van de accumulatieve kostwaardes.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Cost-Allocation_Capacity_tag0@@": "Definieert de kostcapaciteit voor de reiziger voor een bron. De kostenberekeningen gaan door voor elke bron totdat de gespecificeerde capaciteit is bereikt.",
	"@@Cost-Allocation_Capacity_tag1@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Cost-Allocation_Capacity_tag2@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "Een vereist inputraster dat de kosten of de impedantie definieert om planimetrisch door elke cel te bewegen. De waarde op elke cellocatie vertegenwoordigt de kosten per eenheid afstand voor het erdoorheen bewegen. Elke cellocatiewaarde wordt vermenigvuldigd met de celresolutie, en compenseert ook de diagonale beweging om de totale kosten van het passeren door de cel te verkrijgen.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "De waarden van het <strong>Kostenraster</strong> kunnen integer of float zijn, maar ze kunnen niet negatief of nul zijn.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "De drempel die de accumulatieve kostwaardes niet kunnen overschrijden. Als de accumulatieve kostenafstand deze waarde overschrijdt, is de outputwaarde voor de cellocatie ${NoData}. De maximale afstand definieert de omvang waarvoor de accumulatieve kostafstanden worden berekend. De standaardafstand komt tot de rand van het outputraster.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Een multiplier om op de kostwaardes toe te passen.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Deze parameter zorgt voor controle over de reismethode of de omvang bij de bron. Hoe groter de multiplier, hoe groter de kosten om door elke cel te bewegen.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "De waardes moeten groter zijn dan nul. De standaardwaarde is 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Cost-Allocation_Source-Field_tag0@@": "Het veld dat wordt gebruikt om waardes toe te wijzen aan de bronlocaties. Het moet een geheel getal type zijn. Als het <strong>Waarderaster</strong> ingesteld is, zullen de waardes in die input voorrang hebben op elke instelling voor het <strong>Bronveld</strong>.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "Het vereiste inputraster van bronlocaties.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Dit is een raster dat de cellen of locaties identificeert waarvan de minst geaccumuleerde kostenafstand voor elke output cellocatie berekend is.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "Als de invoer <strong>Bronraster</strong> een kommagetal is, moet het <strong>Waarderaster</strong> ingesteld zijn en een heel getal zijn. Het <strong>Waarderaster</strong> heeft voorrang op elke instelling van het <strong>Bronveld</strong>.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "De startkosten waarmee de kostenberekeningen beginnen. Deze parameter zorgt voor de specificatie van de vaste kosten die verbonden zijn met een bron. In plaats te beginnen met kosten van 0, begint het kostenalgoritme met de gespecificeerde waarde.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "De waarde moet nul of hoger zijn. De standaardwaarde is 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Definieert de richting van de reiziger wanneer het bronweerstandstarief en de bronstartkosten worden toegepast.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>Van bron</strong>--Het bronweerstandstarief en de bronstartkosten worden toegepast aan het begin van de inputbron en bewegen naar buiten naar de niet-broncellen. Dit is de standaardinstelling.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>Naar bron</strong>--Het bronweerstandstarief en de bronstartkosten worden toegepast aan het begin van elke niet-broncel en bewegen terug naar de inputbron.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Geef het trefwoord <strong>Van bron</strong> of <strong>Naar bron</strong> op dat op alle bronnen zal worden toegepast, of specificeer een veld in het <strong>Bronraster</strong> die de trefwoorden bevat om de reisrichting voor elke bron te identificeren. Dit veld moet de tekst ${FROM_SOURCE} of ${TO_SOURCE} bevatten.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "Het input geheel getal raster dat de zonewaardes identificeert die worden gebruikt voor elke inputbronlocatie. Voor elke bronlocatiecel wordt de waarde die gedefinieerd is door de <strong>Waarderaster</strong> toegewezen aan alle cellen die toegewezen zijn aan de bronlocatie voor de berekening. Het <strong>Waarderaster heeft</strong> voorrang op elke instelling voor het <strong>Bronveld</strong>.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Deze parameter simuleert de verhoogde inspanning om kosten te overkomen wanneer de accumulatieve kosten groeien. Het wordt gebruikt om de moeheid van de reiziger te modelleren. De groeiende accumulatieve kosten om een cel te bereiken zijn vermenigvuldigd met het weerstandstarief en toegevoegd aan de kosten om naar de volgende cel te bewegen.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Het is een gemodificeerde versie van een samengestelde rentevoetformule die gebruikt wordt om de schijnbare kosten te berekenen om door een cel te bewegen. Als de waarde van het weerstandstarief omhoog gaat, verhoogt het de kosten van de cellen die later bezocht worden. Hoe groter het weerstandstarief, hoe hoger de kosten om de volgende cel te bereiken, die samengesteld wordt door elke volgende beweging. Aangezien het weerstandstarief vergelijkbaar is met een samengesteld tarief en de accumulatieve kostwaardes over het algemeen erg groot zijn, worden kleine weerstandstarieven geadviseerd, zoals 0,005 of nog kleiner, afhankelijk van de accumulatieve kostwaardes.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Definieert de kostcapaciteit voor de reiziger voor een bron. De kostenberekeningen gaan door voor elke bron totdat de gespecificeerde capaciteit is bereikt.",
	"@@Cost-Back-Link_Capacity_tag1@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Cost-Back-Link_Capacity_tag2@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "Een vereist inputraster dat de kosten of de impedantie definieert om planimetrisch door elke cel te bewegen. De waarde op elke cellocatie vertegenwoordigt de kosten per eenheid afstand voor het erdoorheen bewegen. Elke cellocatiewaarde wordt vermenigvuldigd met de celresolutie, en compenseert ook de diagonale beweging om de totale kosten van het passeren door de cel te verkrijgen.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "De waarden van het <strong>Kostenraster</strong> kunnen integer of float zijn, maar ze kunnen niet negatief of nul zijn.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "De drempel die de accumulatieve kostwaardes niet kunnen overschrijden. Als een accumulatieve kostenafstand deze waarde overschrijdt, is de outputwaarde voor de cellocatie NoData. De maximale afstand definieert de omvang waarvoor de accumulatieve kostafstanden worden berekend. De standaardafstand komt tot de rand van het outputraster.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Een multiplier om op de kostwaardes toe te passen.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Deze parameter zorgt voor controle over de reismethode of de omvang bij de bron. Hoe groter de multiplier, hoe groter de kosten om door elke cel te bewegen.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "De waardes moeten groter zijn dan nul. De standaardwaarde is 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "Het vereiste inputraster van bronlocaties.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Dit is een raster dat de cellen of locaties identificeert waarvan de minst geaccumuleerde kostenafstand voor elke output cellocatie berekend is.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "De startkosten waarmee de kostenberekeningen beginnen. Deze parameter zorgt voor de specificatie van de vaste kosten die verbonden zijn met een bron. In plaats te beginnen met kosten van 0, begint het kostenalgoritme met de gespecificeerde waarde.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "De waarde moet nul of hoger zijn. De standaardwaarde is 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Definieert de richting van de reiziger wanneer het bronweerstandstarief en de bronstartkosten worden toegepast.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>Van bron</strong>--Het bronweerstandstarief en de bronstartkosten worden toegepast aan het begin van de inputbron en bewegen naar buiten naar de niet-broncellen. Dit is de standaardinstelling.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>Naar bron</strong>--Het bronweerstandstarief en de bronstartkosten worden toegepast aan het begin van elke niet-broncel en bewegen terug naar de inputbron.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Geef het trefwoord <strong>Van bron</strong> of <strong>Naar bron</strong> op dat op alle bronnen zal worden toegepast, of specificeer een veld in het <strong>Bronraster</strong> die de trefwoorden bevat om de reisrichting voor elke bron te identificeren. Dit veld moet de tekst ${FROM_SOURCE} of ${TO_SOURCE} bevatten.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Deze parameter simuleert de verhoogde inspanning om kosten te overkomen wanneer de accumulatieve kosten groeien. Het wordt gebruikt om de moeheid van de reiziger te modelleren. De groeiende accumulatieve kosten om een cel te bereiken zijn vermenigvuldigd met het weerstandstarief en toegevoegd aan de kosten om naar de volgende cel te bewegen.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Het is een gemodificeerde versie van een samengestelde rentevoet formule die gebruikt wordt om de schijnbare kosten te berekenen om door een cel te bewegen. Als de waarde van het weerstandstarief omhoog gaat, verhoogt het de kosten van de cellen die later bezocht worden. Hoe groter het weerstandstarief, hoe hoger de kosten om de volgende cel te bereiken, die samengesteld wordt door elke volgende beweging. Aangezien het weerstandstarief vergelijkbaar is met een samengesteld tarief en de accumulatieve kostwaardes over het algemeen erg groot zijn, worden kleine weerstandstarieven geadviseerd, zoals 0,005 of nog kleiner, afhankelijk van de accumulatieve kostwaardes.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Cost-Distance_Capacity_tag0@@": "Definieert de kostcapaciteit voor de reiziger voor een bron. De kostenberekeningen gaan door voor elke bron totdat de gespecificeerde capaciteit is bereikt.",
	"@@Cost-Distance_Capacity_tag1@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Cost-Distance_Capacity_tag2@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "Een vereist inputraster dat de kosten of de impedantie definieert om planimetrisch door elke cel te bewegen. De waarde op elke cellocatie vertegenwoordigt de kosten per eenheid afstand voor het erdoorheen bewegen. Elke cellocatiewaarde wordt vermenigvuldigd met de celresolutie, en compenseert ook de diagonale beweging om de totale kosten van het passeren door de cel te verkrijgen.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "De waarden van het <strong>Kostenraster</strong> kunnen integer of float zijn, maar ze kunnen niet negatief of nul zijn.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "De drempel die de accumulatieve kostwaardes niet kunnen overschrijden. Als een accumulatieve kostenafstand deze waarde overschrijdt, is de outputwaarde voor de cellocatie NoData. De maximale afstand definieert de omvang waarvoor de accumulatieve kostafstanden worden berekend. De standaardafstand komt tot de rand van het outputraster.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Een vermenigvuldiging om op de kostwaardes toe te passen.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Deze parameter zorgt voor controle over de reismethode of de omvang bij de bron. Hoe groter de multiplier, hoe groter de kosten om door elke cel te bewegen.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "De waardes moeten groter zijn dan nul. De standaardwaarde is 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Cost-Distance_Source-Raster_tag0@@": "Het vereiste inputraster van bronlocaties.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Dit is een raster dat de cellen of locaties identificeert waarvan de minst geaccumuleerde kostenafstand voor elke output cellocatie berekend is.",
	"@@Cost-Distance_Start-Cost_tag0@@": "De startkosten waarmee de kostenberekeningen beginnen. Deze parameter zorgt voor de specificatie van de vaste kosten die verbonden zijn met een bron. In plaats te beginnen met kosten van 0, begint het kostenalgoritme met de gespecificeerde waarde.",
	"@@Cost-Distance_Start-Cost_tag1@@": "De waarde moet nul of hoger zijn. De standaardwaarde is 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Definieert de richting van de reiziger wanneer het bronweerstandstarief en de bronstartkosten worden toegepast.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>Van bron</strong>--Het bronweerstandstarief en de bronstartkosten worden toegepast aan het begin van de inputbron en bewegen naar buiten naar de niet-broncellen. Dit is de standaardinstelling.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>Naar bron</strong>--Het bronweerstandstarief en de bronstartkosten worden toegepast aan het begin van elke niet-broncel en bewegen terug naar de inputbron.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Geef het trefwoord <strong>Van bron</strong> of <strong>Naar bron</strong> op dat op alle bronnen zal worden toegepast, of specificeer een veld in het <strong>Bronraster</strong> die de trefwoorden bevat om de reisrichting voor elke bron te identificeren. Dit veld moet de tekst ${FROM_SOURCE} of ${TO_SOURCE} bevatten.",
	"@@Curvature_Curvature-Type_tag0@@": "Het krommingstype accentueert verschillende aspecten van de helling. Er zijn drie krommingsopties:",
	"@@Curvature_Curvature-Type_tag1@@": "Planform--Is haaks op de richting van de maximale helling. Het beïnvloedt de convergentie en divergentie van de stroom over een oppervlak.",
	"@@Curvature_Curvature-Type_tag2@@": "Profiel--Is parallel aan de helling en geeft de richting van de maximumhelling aan. Het beïnvloedt de versnelling en vertraging van de stroom over het oppervlak.",
	"@@Curvature_Curvature-Type_tag3@@": "Standaard--Combineert zowel de <strong>profiel</strong> - als <strong>planform</strong> krommingen.",
	"@@Curvature_DEM_tag0@@": "Een digitaal hoogtemodel (DHM) raster.",
	"@@Curvature_Z-Factor_tag0@@": "De z-factor past de meeteenheden aan voor de z-eenheden wanneer ze verschillen van de x,y-eenheden van het inputoppervlak. Als de x,y-eenheden en z-eenheden in dezelfde meeteenheden staan, moet de z-factor ingesteld worden op 1. De z-waardes van het inputoppervlak worden vermenigvuldigd met de z-factor wanneer het laatste output oppervlak wordt berekend. Bijvoorbeeld, als de z-eenheden in voet worden weergegeven en uw x,y-eenheden in meters, zou u een z-factor van 0,3048 gebruiken om de z-eenheden van voet naar meters te converteren, want 1 voet = 0,3048 meter.",
	"@@Divide_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Divide_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Divide_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Divide_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Divide_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Divide_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Divide_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Divide_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Divide_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Divide_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Divide_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Divide_Raster_tag0@@": "De input waarvan de waarde wordt gedeeld door de tweede input.",
	"@@Divide_Raster_tag1@@": "Een nummer kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor ${Raster2}.",
	"@@Divide_Raster2_tag0@@": "De input waarvan de waarde degene is waar de eerste input door gedeeld wordt.",
	"@@Divide_Raster2_tag1@@": "Een nummer kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor ${Raster}.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "De input DEM.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "De maximale breedtewaarde van de leegte wordt gebruikt om de grootste maat van een leegte te specificeren die u wilt vullen. Als de breedte of hoogte van het begrenzingsvak om de leegte heen groter is dan de maximale breedtewaarde van de leegte, wordt de leegte niet gevuld. De eenheden van deze parameter zijn hetzelfde als de eenheden die gebruikt worden in het ruimtelijke referentiesysteem van de data.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Als deze parameter blanco is of een waarde heeft van ${0} wordt er geen maximumbreedte gebruikt, en alle leegtes worden gevuld. Een waarde van ${-1} betekent dat er geen opvulling van leegte zal plaatsvinden.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "De maximum zoekradius die wordt gebruikt voor opvullen van leegte. Een leegte die verder weg is van elke valide pixel dan deze drempelwaarde blijft een leegte. De eenheden van deze parameter zijn hetzelfde als de eenheden die gebruikt worden in het ruimtelijke referentiesysteem van de data.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Als de waarde van deze parameter blanco is, ${0}, of ${-1} zal deze parameter niet gebruikt worden.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Equal-to_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Equal-to_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Equal-to_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Equal-to_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Equal-to_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Equal-to_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Equal-to_Raster_tag0@@": "De input die gebruikt wordt voor vergelijking voor gelijkheid bij de tweede input.",
	"@@Equal-to_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Equal-to_Raster2_tag0@@": "De input die gebruikt wordt voor vergelijking voor gelijkheid bij de eerste input.",
	"@@Equal-to_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "De celgrootte waaronder het outputraster wordt gecreëerd.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Als de celgrootte expliciet is ingesteld in <strong>Analyse-omgevingen</strong>, dan is dat de standaard celgrootte. Als deze niet is ingesteld, zal de output celgrootte hetzelfde zijn als de <strong>Bronraster</strong>.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Bepaalt of de afstand wordt berekend met behulp van een vlakke (vlakke aarde) of een geodetische (ellipsvormige) methode.",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Geodetisch--De kortste lijn tussen twee punten op het aardoppervlak op een sferoïde (ellipsoïde). Daarom veranderen de resultaten niet, ongeacht de invoer- of uitvoerprojectie. Eén gebruik voor een geodetische lijn is als u de kortste afstand wilt bepalen tussen twee steden voor het vluchtpad van een vliegtuig. Dit wordt ook wel een ‘great circle line’ genoemd als het gebaseerd is op een bol in plaats van een ellipsoïde.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Vlakte--Vlaktemetingen maken gebruik van 2D Cartesiaanse wiskunde om lengte en gebied te berekenen. De optie is alleen beschikbaar bij het meten in een geprojecteerd coördinaatsysteem en het 2D-vlak van dat coördinaatsysteem wordt gebruikt als de basis voor de metingen.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Definieert de drempelafstand waarin de dichtstbijzijnde bron wordt bepaald. Als de afstand naar de dichtstbijzijnde bron dit overschrijdt is de output voor die cel ${NoData}.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "De standaardafstand komt tot de rand van het outputraster.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "Het raster dat de barrières definieert.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "De dataset moet ${NoData} bevatten als er geen barrières zijn. Barrières worden gerepresenteerd door valide waardes, waaronder nul.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "De barrières kunnen gedefinieerd worden door een geheel getal of een kommagetalraster.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "Het veld dat wordt gebruikt om waardes toe te wijzen aan de bronlocaties. Het moet een geheel getal type zijn. Als het <strong>Waarderaster</strong> ingesteld is, zullen de waardes in die input voorrang hebben op elke instelling voor het <strong>Bronveld</strong>.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "Een vereist inputraster dat de bronlocaties identificeert. Gebaseerd op Euclidische afstand wordt de dichtstbijzijnde bron bepaald voor elke cel in de output.",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "Het inputtype kan een geheel getal of een kommagetaltype zijn.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "Het input geheel getal raster dat de zonewaardes identificeert die worden gebruikt voor elke inputbronlocatie. Voor elke bronlocatiecel wordt de waarde die gedefinieerd is door de <strong>Waarderaster</strong> toegewezen aan alle cellen die toegewezen zijn aan de bronlocatie voor de berekening. Het <strong>Waarderaster heeft</strong> voorrang op elke instelling voor het <strong>Bronveld</strong>.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "De celgrootte waaronder het outputraster wordt gecreëerd.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Als de celgrootte expliciet is ingesteld in <strong>Analyse-omgevingen</strong>, dan is dat de standaard celgrootte. Als deze niet is ingesteld, zal de output celgrootte hetzelfde zijn als de <strong>Bronraster</strong>.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Bepaalt of de afstand wordt berekend met behulp van een vlakke (vlakke aarde) of een geodetische (ellipsvormige) methode.",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Geodetisch--De kortste lijn tussen twee punten op het aardoppervlak op een sferoïde (ellipsoïde). Daarom veranderen de resultaten niet, ongeacht de invoer- of uitvoerprojectie. Eén gebruik voor een geodetische lijn is als u de kortste afstand wilt bepalen tussen twee steden voor het vluchtpad van een vliegtuig. Dit wordt ook wel een ‘great circle line’ genoemd als het gebaseerd is op een bol in plaats van een ellipsoïde.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Vlakte--Vlaktemetingen maken gebruik van 2D Cartesiaanse wiskunde om lengte en gebied te berekenen. De optie is alleen beschikbaar bij het meten in een geprojecteerd coördinaatsysteem en het 2D-vlak van dat coördinaatsysteem wordt gebruikt als de basis voor de metingen.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Definieert de drempelafstand waarin de richting van de dichtstbijzijnde bron wordt berekend. Als de afstand naar de dichtstbijzijnde bron dit overschrijdt is de output voor die cel ${NoData}.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "De standaardafstand komt tot de rand van het outputraster.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "Het raster dat de barrières definieert.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "De dataset moet NoData bevatten als er geen barrières zijn. Barrières worden gerepresenteerd door valide waardes, waaronder nul.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "De barrières kunnen gedefinieerd worden door een geheel getal of een kommagetalraster.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "Een vereist inputraster dat de cellen of locaties identificeert waarvan de Euclidische richting voor elke output cellocatie berekend is.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "Het inputtype kan een geheel getal of kommagetaltype zijn.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "De celgrootte waaronder het outputraster wordt gecreëerd.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Als de celgrootte expliciet is ingesteld in <strong>Analyse-omgevingen</strong>, dan is dat de standaard celgrootte. Als deze niet is ingesteld, zal de output celgrootte hetzelfde zijn als de <strong>Bronraster</strong>.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Bepaalt of de afstand wordt berekend met behulp van een vlakke (vlakke aarde) of een geodetische (ellipsvormige) methode.",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Geodetisch--De kortste lijn tussen twee punten op het aardoppervlak op een sferoïde (ellipsoïde). Daarom veranderen de resultaten niet, ongeacht de invoer- of uitvoerprojectie. Eén gebruik voor een geodetische lijn is als u de kortste afstand wilt bepalen tussen twee steden voor het vluchtpad van een vliegtuig. Dit wordt ook wel een ‘great circle line’ genoemd als het gebaseerd is op een bol in plaats van een ellipsoïde.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Vlakte--Vlaktemetingen maken gebruik van 2D Cartesiaanse wiskunde om lengte en gebied te berekenen. De optie is alleen beschikbaar bij het meten in een geprojecteerd coördinaatsysteem en het 2D-vlak van dat coördinaatsysteem wordt gebruikt als de basis voor de metingen.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "De drempel die de accumulatieve afstandswaardes niet kunnen overschrijden. Als een accumulatieve Euclidische afstand deze waarde overschrijdt, is de outputwaarde voor de cellocatie NoData.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "De standaardafstand komt tot de rand van het outputraster.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "Het raster dat de barrières definieert.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "De dataset moet ${NoData} bevatten als er geen barrières zijn. Barrières worden gerepresenteerd door valide waardes, inclusief nul.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "De barrières kunnen gedefinieerd worden door een geheel getal of een kommagetalraster.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "Het vereiste inputraster dat de cellen of locaties identificeert waarvan de Euclidische afstand voor elke output cellocatie berekend is.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "Het inputtype kan een geheel getal of een kommagetaltype zijn.",
	"@@Exp_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Exp_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Exp_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Exp_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Exp_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Exp_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Exp_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Exp_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Exp_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Exp_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Exp_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Exp_Raster_tag0@@": "De inputwaardes waarvoor de basis e exponentieel gevonden moeten worden.",
	"@@Exp10_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Exp10_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Exp10_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Exp10_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Exp10_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Exp10_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Exp10_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Exp10_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Exp10_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Exp10_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Exp10_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Exp10_Raster_tag0@@": "De inputwaardes waarvoor de basis 10 exponentieel gevonden moeten worden.",
	"@@Exp2_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Exp2_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Exp2_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Exp2_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Exp2_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Exp2_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Exp2_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Exp2_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Exp2_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Exp2_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Exp2_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Exp2_Raster_tag0@@": "De inputwaardes waarvoor de basis 2 exponentieel gevonden moeten worden.",
	"@@Extract-Bands_Band_tag0@@": "Selecteer de banden om uit te pakken uit een lijst die gebaseerd is op de gebruikte parameteroptie <strong>Methode</strong>.",
	"@@Extract-Bands_Combination_tag0@@": "De bandcombinatie of bandvolgorde. De selectielijst is afhankelijk van de gespecificeerde optie <strong>Methode</strong>. Bijvoorbeeld als de <strong>Methode</strong> <strong>Bandnamen</strong> is, kunt u een Blauwe, Groene, en Rode combinatie selecteren om een natuurlijke kleurafbeelding uit te pakken.",
	"@@Extract-Bands_Method_tag0@@": "Selecteer een van de volgende methodes voor het uitpakken van banden:",
	"@@Extract-Bands_Method_tag1@@": "<strong>Band ID’s</strong>--De bandaanwijzing of het bandnummer, die uniek is voor elke sensor. Deze kunnen identiek zijn aan de <strong>Bandnamen</strong>.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Bandnamen</strong>--Gebruikt de bandnaam die de golflengte interval op het elektromagnetisch spectrum representeert (Rood, Nabij Infrarood, Thermische Infrarood, bijvoorbeeld). Dit kan ook aangeduid worden als een bandnummer ID.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Band golflengten</strong>--De golflengte op het elektromagnetisch spectrum.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Specificeer de actie die zal plaatsvinden als een band op de band uitpaklijst niet beschikbaar is.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Beste match</strong>--Zoekt de best beschikbare band om te gebruiken in plaats van de ontbrekende band, gebaseerd op golflengte, zodat de functie niet mislukt.",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Mislukt</strong>--Als de inputdataset een band mist die gespecificeerd is in de <strong>Band</strong>-parameter, zal de functie mislukken.",
	"@@Extract-Bands_Raster_tag0@@": "Het rasterproduct waaruit de band of banden worden uitgepakt.",
	"@@Fill_Raster_tag0@@": "Een enkele-band-hoogte-raster.",
	"@@Fill_Z-Limit_tag0@@": "Het maximale hoogteverschil tussen een inzinking en zijn gietpunt dat gevuld moet worden.",
	"@@Fill_Z-Limit_tag1@@": "Tenzij een waarde gespecificeerd is voor deze parameter, worden alle inzinkingen gevuld, ongeacht de diepte.",
	"@@Fill_Z-Limit_tag2@@": "De waarde voor <strong>Z-limiet</strong> moet groter zijn dan nul.",
	"@@Float_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Float_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Float_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Float_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Float_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Float_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Float_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Float_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Float_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Float_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Float_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Float_Raster_tag0@@": "Het inputraster om te converteren naar een kommagetal.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "Het invoerraster dat de richting van de stroom uit elke cel toont.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "Het stroomrichtingsraster kan gecreëerd worden met de <strong>Stroomrichting</strong> functie.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Definieert het type van de input stroomrichtingsraster.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--Het input stroomrichtingsraster is van het type D8. Dit is de standaardinstelling.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Het input stroomrichtingsraster is van het type D-Oneindig (DINF).",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Het input stroomrichtingsraster is van het type Multi Stroomrichting (MFD).",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "Het output accumulatieraster kan geheel getal type of kommagetaltype zijn.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Kommagetal</strong>--Het outputraster wordt kommagetaltype. Dit is de standaardinstelling.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Geheel getal</strong>--Het outputraster wordt geheel getal type.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "Een optioneel inputraster om een gewicht op elke pixel toe te passen.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Als er geen gewichtsraster gespecificeerd is, wordt een standaardgewicht van 1 toegepast op elke pixel.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Definieert het type van de input stroomrichtingsraster.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--Het input stroomrichtingsraster is van het type D8. Dit is de standaardinstelling.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Het input stroomrichtingsraster is van het type D-Oneindig (DINF).",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Het input stroomrichtingsraster is van het type Multi Stroomrichting (MFD).",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Specificeert of randpixels altijd naar buiten stromen of normale stroomregels volgen.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>Nee</strong>--Als de maximale daling binnen in een randpixel groter dan nul is, wordt de stroomrichting zoals gewoonlijk bepaald; anders is de stroomrichting naar de rand toe. Pixels die van de rand van het oppervlakraster naar binnen toe stromen zullen dit doen. Dit is de standaardinstelling.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Ja</strong>--Alle pixels op de rand van het oppervlakraster zullen naar buiten stromen vanaf het oppervlakraster.",
	"@@Flow-Direction_Raster_tag0@@": "Het inputraster dat een constant hoogteoppervlak representeert.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Bepaalt of het verticale of horizontale component van de stroomafstand wordt berekend.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Horizontaal</strong>--De stroomafstand berekeningen representeren het horizontale component van de stroomafstand van elke pixel in het domein tot de pixel(s) op de stroom waarop ze vloeien.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Verticaal</strong>--De stroomafstand berekeningen representeren het verticale component van de stroomafstand van elke pixel in het domein tot de pixel(s) op de stroom waarop ze vloeien. Dit is de standaardinstelling.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "Het inputraster dat de richting van de stroom uit elke pixel toont.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "Als er een stroomrichtingsraster is, wordt/worden de neerwaartse richting(en) beperkt tot diegene die worden gedefinieerd door de input stroomrichtingen.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "Het stroomrichtingsraster kan gecreëerd worden met de Stroomrichting functie.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Definieert het type van de input stroomrichtingsraster.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--Het input stroomrichtingsraster is van het type D8. Dit is de standaardinstelling.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Het input stroomrichtingsraster is van het type D-Oneindig (DINF).",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Het input stroomrichtingsraster is van het type Multi Stroomrichting (MFD).",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Bepaalt het statistiektype voor de berekening van de stroomafstand op meerdere stroompaden. Als er slechts een enkel stroompad is van elke cel tot een cel op de stroom, produceren alle statistiektypes hetzelfde resultaat.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Minimum</strong>--Als er meerdere stroompaden bestaan, wordt een minimale stroomafstand berekend. Dit is de standaardinstelling.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Gewogen gemiddelde</strong>--Als er meerdere stroompaden bestaan, wordt een gewogen gemiddelde van de stroomafstand berekend. Stroomproportie van een cel naar zijn stroomafwaartse buurcellen worden gebruikt als gewichten om een gewogen gemiddelde te berekenen.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Maximum</strong>--Als er meerdere stroompaden bestaan, wordt een minimale stroomafstand berekend.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "Een input stroomraster dat een lineair stroomnetwerk representeert.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "Het inputraster dat een constant hoogteoppervlak representeert.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "De richting van meting langs het stroompad.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong>Stroomafwaarts</strong>--Berekent de neerwaartse hellingsafstand langs het stroompad van elke cel naar een inzinking of uitgang op de rand van het raster.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>Stroomopwaarts</strong>--Berekent de langste opwaartse hellingsafstand langs het stroompad van elke cel naar de bovenkant van de afvoersplitsing.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "Het invoerraster dat de richting van de flow uit elke cel toont.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "Het stroomrichtingsraster kan gecreëerd worden met de <strong>Stroomrichting</strong> functie.",
	"@@Flow-Length_Weight-Raster_tag0@@": "Een optioneel inputraster om een gewicht op elke cel toe te passen.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Als er geen gewichtsraster gespecificeerd is, wordt een standaardgewicht van 1 toegepast op elke cel.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Geeft aan of ${NoData} waardes genegeerd worden door de statistische berekening.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Aangevinkt</strong>--Specificeert dat als een ${NoData} waarde bestaat in een buurt, de ${NoData} waarde genegeerd wordt. Alleen cellen in de buurt die datawaardes hebben, worden gebruikt bij het bepalen van de outputwaarde. Dit is de standaardinstelling.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Niet aangevinkt</strong>--Specificeert dat als een cel in een buurt een waarde heeft van ${NoData}, de output voor de verwerkingscel ${NoData} zal zijn.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "De vorm van het gebied rondom elke cel die gebruikt wordt om de statistieken te berekenen.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Elke buurt heeft toegevoegde parameters waarmee de vorm gedefinieerd wordt.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Annulus, Binnenste Radius, Buitenste Radius",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Cirkel, Radius",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Onregelmatig, Breedte, Hoogte, Buurtwaardes",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Rechthoek, Breedte, Hoogte",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Wig, Radius, Starthoek, Eindhoek",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Gewicht, Breedte, Hoogte, Buurtwaarden",
	"@@Focal-Statistics_Neighborhood_tag8@@": "De Onregelmatige buurt zorgt dat u een buurt met een onregelmatige vorm kunt specificeren rondom de verwerkingscel. Gebruik de Buurtwaardes tabel om de vorm van de buurtkernel te definiëren. Een waarde van 0 voor een celpositie geeft aan dat de cel geen deel uitmaakt van de buurt, en niet gebruikt wordt voor het verwerken. Een waarde van 1 geeft aan dat zijn corresponderende cel (en waarde) deel uitmaakt van de buurt.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "De Gewichtsbuurt is vergelijkbaar met het type van de onregelmatige buurt, aangezien deze zorgt dat u een onregelmatige buurt kunt definiëren rondom de verwerkingscel, maar daar komt bij dat deze zorgt dat u gewichten aan de inputwaardes kunt toevoegen. De waardes in de gewichtskernel specificeren welke celposities meegeteld moeten worden binnen de buurt alsook de gewichten waarmee ze vermenigvuldigd worden. Gebruik een waarde van 0 om een cel buiten te sluiten van verwerking. Positieve, negatieve en decimale waardes zijn allemaal valide opties om als een gewicht te gebruiken. Voor het type van de Gewichtsbuurt worden alleen de Gemiddelde, Standaardafwijking, of Opgetelde statistieken ondersteund.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Geeft aan welk percentiel moet worden berekend als <strong>Percentiel</strong> is geselecteerd als het statistiektype. De standaard is 90, naar het 90e percentiel.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "De waardes kunnen tussen de 0 en 100 liggen. Het 0e percentiel is in wezen equivalent aan de Minimumstatistiek, en het 100e percentiel is equivalent aan Maximum, met de uitzondering dat het resultaat een kommagetal is. Een waarde van 50 zal in wezen hetzelfde resultaat produceren als de Mediaanstatistiek.",
	"@@Focal-Statistics_Raster_tag0@@": "Het vereiste inputraster.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "Het statistiektype om te berekenen.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Meerderheid</strong>--Berekent de meerderheid (waarde die het vaakst voorkomt) van de cellen in de buurt.",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Maximum</strong>--Berekent het maximum (hoogste waarde) van de cellen in de buurt.",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Gemiddeld</strong>--Berekent het gemiddelde (gemiddelde waarde) van de cellen in de buurt.",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Mediaan</strong>--Berekent de mediaan van de cellen in de buurt.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Minimum</strong>--Berekent het minimum (laagste waarde) van de cellen in de buurt.",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Minderheid</strong>--Berekent de minderheid (waarde die het minst voorkomt) van de cellen in de buurt.",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Percentiel</strong>--Berekent een percentiel van de cellen in de buurt. U kunt het percentiel om te berekenen bepalen met de parameter <strong>Percentielwaarde</strong>.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Bereik</strong>--Berekent het bereik (verschil tussen de hoogste en laagste waarde) van de cellen in de buurt.",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Standaardafwijking</strong>--Berekent de standaardafwijking van de cellen in de buurt.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Som</strong>--Berekent de som (totaal van alle waardes) van de cellen in de buurt.",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Variëteit</strong>--Berekent de variatie (het aantal unieke waardes) van de cellen in de buurt.",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Als het inputraster kommagetal is, zijn alleen de Gemiddelde, Maximale, Mediaan, Minimale, Percentiele, Bereik, Standaardafwijking en Som statistiektypes beschikbaar.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "Voor Gemiddelde, Mediaan, Percentiel en Standaardafwijking is de output altijd kommagetal.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "Het standaard statistiektype is Gemiddelde.",
	"@@Geometric_Constant-Z_tag0@@": "Specificeer een constante hoogte om te gebruiken voor de Geometrische functie.",
	"@@Geometric_DEM_tag0@@": "Specificeer de DEM om te gebruiken voor de Geometrische functie. U kunt een DEM die ingeperkt is in de mozaïek dataset gebruiken als een rasterdataset of als een mozaïek dataset waarvan de output een DEM is.",
	"@@Geometric_Geoid_tag0@@": "De meeste hoogte datasets, zoals USGS NED of ArcGIS Online World Elevation, zijn orthometrische hoogtes, dus het is nodig om de Geoïdecorrectie te selecteren voor compatibiliteit met satelliet-RPCs, die ellipsoïdehoogtes vereisen. Vink het vakje <strong>Geoide</strong> aan om de geoïde (EGM96) correctie toe te passen op de z-waardes, tenzij de DEM al verwezen is naar ellipsoïde hoogtes.",
	"@@Geometric_Method_tag0@@": "Kies de hoogtemethode voor de geometrische functie:",
	"@@Geometric_Method_tag1@@": "Constante Z gebruiken--Specificeer een constante hoogte om te gebruiken voor de Geometrische functie.",
	"@@Geometric_Method_tag2@@": "DEM gebruiken--Specificeer een DEM om te gebruiken voor de Geometrische functie.",
	"@@Geometric_Raster_tag0@@": "Het inputraster.",
	"@@Geometric_Z-Factor_tag0@@": "Satelliet rationale polynomiale coëfficiënten (RPC's) zijn geschaald voor hoogte datasets met verticale eenheden in meters. Als uw hoogte andere verticale eenheden gebruikt, voert u een <strong>Z-factor in</strong> om op te schalen naar meter. Bijvoorbeeld, als de hoogte-eenheden in voet zijn, zou u een waarde van 0,3048 gebruiken om de hoogte-eenheden van voet naar meter te converteren.",
	"@@Geometric_Z-Offset_tag0@@": "De basiswaarde om toe te voegen aan de hoogtewaarde in de DEM. Dit kan gebruikt worden om hoogtewaardes die niet op zeeniveau beginnen te verschuiven.",
	"@@Geometric_Tolerance_tag0@@": "Geef de maximaal aanvaardbare fout in de geometrische functie op, aangeduid in het aantal pixels. De standaard voor het rastertype NITF (NCDRD) is twee.",
	"@@Grayscale_Raster_tag0@@": "Het inputraster.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "De gewichten voor elke band die het inputraster omvat.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Greater-Than_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Greater-Than_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Greater-Than_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Greater-Than_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Greater-Than_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Greater-Than_Raster_tag0@@": "De input die getest wordt om te bepalen of het groter is dan de tweede input.",
	"@@Greater-Than_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Greater-Than_Raster2_tag0@@": "De input waar de eerste input mee vergeleken wordt om te kijken of deze groter is.",
	"@@Greater-Than_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Greater-Than-Equal_Raster_tag0@@": "De input die getest wordt om te bepalen of deze groter dan of gelijk aan de tweede input is.",
	"@@Greater-Than-Equal_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "De input waar de eerste input mee vergeleken wordt om te kijken of deze groter of gelijk is.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "De meeteenheid die geassocieerd wordt met het outputraster. Beschikbare outputeenheden zijn Celsius, Fahrenheit en Kelvin.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "Een enkele band-raster waarin pixelwaardes relatieve vochtigheid representeren als een percentagewaarde tussen 0 en 100.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "Een enkele band-raster waarin pixelwaardes omgevingstemperatuur representeren.",
	"@@Heat-Index_Temperature-Units_tag0@@": "De meeteenheid die geassocieerd wordt met het input temperatuurraster. Beschikbare inputeenheden zijn Celsius, Fahrenheit en Kelvin.",
	"@@Hillshade_Altitude_tag0@@": "Hoogte is de elevatiehoek van de zon boven de horizon en deze ligt tussen de 0 en 90 graden. Een waarde van 0 graden geeft aan dat de zon zich op de horizon bevindt, ofwel op hetzelfde horizontale vlak als het referentiekader. Een waarde van 90 graden geeft aan dat de zon direct bovenaan staat.",
	"@@Hillshade_Altitude_tag1@@": "Deze parameter is alleen geldig als <strong>Hillshade Type <strong>Traditioneel</strong> is</strong> . De standaard is 45 graden boven de horizon.",
	"@@Hillshade_Azimuth_tag0@@": "Azimut is de relatieve positie van de zon langs de horizon (in graden). Deze positie wordt weergegeven door de hoek van de zon met de klok mee gemeten vanaf het noorden. Een azimut van 0 graden wijst naar het noorden, het oosten is 90 graden, het zuiden is 180 graden en het westen is 270 graden.",
	"@@Hillshade_Azimuth_tag1@@": "Deze parameter is alleen geldig als <strong>Hillshade Type <strong>Traditioneel</strong> is</strong> . De standaard is 315 graden, wat vanuit het noordwesten komt.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "Het gebruik van deze optie voorkomt het resamplen van artefacten die langs de randen van een raster voor kunnen komen. De output pixels langs de rand van een raster of naast NoData pixels worden bevolkt door NoData; daarom wordt geadviseerd om deze parameter alleen te gebruiken met hoogte mozaïek datasets die overlappen. Als overlappende pixels beschikbaar zijn, zullen de gebieden met NoData de overlappende pixelwaardes weergeven in plaats van blanco pixels.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Niet aangevinkt--Bilineaire resampling wordt uniform toegepast om de bergschaduwen te resamplen. Gebruik deze optie als de mozaïek dataset met de hoogte rasterdata bestaat uit overlappende items of tiles. Dit is de standaardinstelling.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Aangevinkt--Bilineaire resampling wordt gebruikt binnen de bergschaduwen, behalve langs de randen van de rasters of naast pixels met NoData. Deze pixels worden bevolkt met NoData en geven de overlappende pixelwaardes weer, waarmee scherpe rand effecten die anders zouden kunnen voorkomen verminderd worden. Gebruik deze optie als de mozaïek dataset met de hoogte rasterdata bestaat uit overlappende items of tegels.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "De resultaten uit de functie kunnen afhankelijk zijn van data. Als u tegelgrens artefacten in de output waarneemt, selecteer dan de alternatieve conditie van het selectievak.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Bestuurt de lichtbron voor de bergschaduwen:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Traditioneel--Berekent bergschaduwen vanuit een enkele lichtrichting. Dit is de standaardinstelling. U kunt de <strong>Azimuth</strong> en Altitude <strong>instellen</strong> om de locatie van de lichtbron te bepalen.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Multidirectioneel--Combineert licht vanuit verschillende bronnen om een verbeterde visualisatie van het terrein te representeren.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "Factor Pixelgrootte verantwoordt veranderingen in schaal als de viewer in- en uitzoomt op de kaartweergave. Het bestuurt de snelheid waarmee de <strong>Z-factor</strong> verandert.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Deze parameter is alleen geldig als het <strong>Scaling</strong> type <strong>Adjusted</strong> is. De standaardwaarde is 0,024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "Pixelgrootte Kracht verantwoordt veranderingen in hoogte als de viewer in- en uitzoomt op de kaartweergave. Het is de exponent toegepast op de pixelgrootte term in de vergelijking die de snelheid bestuurt waarmee de <strong>Z Factor</strong> verandert om aanzienlijk verlies van reliëf te vermijden.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Deze parameter is alleen geldig als het <strong>Scaling</strong> type <strong>Adjusted</strong> is. De standaardwaarde is 0,664.",
	"@@Hillshade_Raster_tag0@@": "De inputhoogte dataset.",
	"@@Hillshade_Scaling_tag0@@": "Het beschaduwde resultaat is dynamisch geschaald door de z-factor aan te passen met een van de twee opties:",
	"@@Hillshade_Scaling_tag1@@": "Aangepast--Dit past een niet-lineaire aanpassing toe met de standaard factor <strong>Macht voor <strong>pixelgrootte</strong> en pixelgrootte Factor</strong> waarden, die een grote verscheidenheid aan hoogtewijzigingen (schaal) mogelijk maakt als de viewer in- en uitzoomt. De parameterinstelling <strong>Aangepast</strong> wordt geadviseerd bij het gebruik van een wereldwijde dataset.",
	"@@Hillshade_Scaling_tag8@@": "Geen--Schaling wordt niet toegepast. Dit is ideaal voor een enkele rasterdataset over een lokaal gebied. Dit wordt niet geadviseerd voor wereldwijde datasets met grote variaties in hoogte of multiscale kaarten, aangezien dit terreinreliëf zal produceren met weinig variatie op kleine schaal.",
	"@@Hillshade_Z-Factor_tag0@@": "De z-factor is een schaalfactor die wordt gebruikt om de hoogtewaarden om te zetten voor twee doeleinden:",
	"@@Hillshade_Z-Factor_tag1@@": "Converteren van de hoogte-eenheden (zoals meters of voet) naar horizontale coördinaateenheden van de dataset, die kunnen bestaan uit voet, meters of graden.",
	"@@Hillshade_Z-Factor_tag2@@": "Verticale overdrijving toevoegen voor visueel effect.",
	"@@Int_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Int_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Int_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Int_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Int_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Int_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Int_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Int_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Int_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Int_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Int_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Int_Raster_tag0@@": "Het inputraster om te converteren naar Een geheel getal.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "De celgrootte voor het outputraster wordt automatisch gedetecteerd; u kunt dit echter veranderen. Hoewel de celgrootte veranderd kan worden, blijft de omvang van de rasterdataset hetzelfde.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "De input puntendata.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Er zijn vier resampling-methodes voor deze functie:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Omgekeerde afstand gewogen</strong>--Bepaalt de celwaardes met een lineair gewogen combinatie van een stel sample punten of cellen. Het gewicht is een functie van de omgekeerde afstand van de bekende punten of cellen.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>Lineaire verdunning</strong>--Gebruikt een triangulair onregelmatig netwerk van de middelpunten van elke cel in het onregelmatige raster om een oppervlak te interpoleren die vervolgens naar een regelmatig raster geconverteerd wordt.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Natuurlijke buren</strong>--Zoekt de dichtstbijzijnde subgroep van input samples tot een querypunt en past gewichten op ze toe gebaseerd op proportionele gebieden om een waarde te interpoleren.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Dichtstbijzijnde buur</strong>--Berekent pixelwaarde met de dichtstbijzijnde pixel. Als er geen bronpixel bestaat, kan er geen nieuwe pixel gecreëerd worden in de output. Dit is de standaardinstelling.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Identificeert het aantal pixels om mee te nemen in de geselecteerde resampling-methode. De standaardwaarde is ${3} pixels.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Als u een punt objectklasse selecteert als de input, moet u het veld identificeren in de attribuuttabel met de waarde van de punten.",
	"@@Is-Null_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Is-Null_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Is-Null_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Is-Null_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Is-Null_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Is-Null_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Is-Null_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Is-Null_Raster_tag0@@": "Het inputraster dat getest wordt om de cellen die ${NoData} (null) zijn te identificeren.",
	"@@Is-Null_Raster_tag1@@": "Het inputtype kan een geheel getal of een kommagetaltype zijn.",
	"@@Key-Metadata_Band-Names_tag0@@": "Dit wordt gebruikt om de bandnamen van een raster te overschrijden. Het is een door komma's gescheiden reeks die geüpdatet bandnamen representeert.",
	"@@Key-Metadata_Band-Names_tag1@@": "Deze parameter is optioneel.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "Belangrijke metadata om te injecteren in het uitgaande raster dat wordt beschreven als een JSON-reeks die een verzameling kernwaarde paren representeert. Het volgende is een voorbeeld van een JSON-reeks die gebruikt kan worden als een input in deze functie. Alle inputs voor deze parameter moeten dezelfde stijl volgen.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "JSON-reeks die belangrijke metadata representeert",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "De naam van de dataset-niveau kerneigenschap die overschreden moet worden.",
	"@@Key-Metadata_Raster_tag0@@": "De raster of mozaïek dataset met de belangrijke metadata die u wilt invoegen of overschrijven.",
	"@@Key-Metadata_Value_tag0@@": "De overschrijdende waarde van de dataset-niveau kerneigenschap die u wilt instellen.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Deze parameter simuleert de verhoogde inspanning om kosten te overkomen wanneer de accumulatieve kosten groeien. Het wordt gebruikt om de moeheid van de reiziger te modelleren. De groeiende accumulatieve kosten om een cel te bereiken zijn vermenigvuldigd met het weerstandstarief en toegevoegd aan de kosten om naar de volgende cel te bewegen.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "Het is een gemodificeerde versie van een samengestelde rentevoet formule die gebruikt wordt om de schijnbare kosten te berekenen om door een cel te bewegen. Als de waarde van het weerstandstarief omhoog gaat, verhoogt het de kosten van de cellen die later bezocht worden. Hoe groter het weerstandstarief, hoe hoger de kosten om de volgende cel te bereiken, die samengesteld wordt door elke volgende beweging. Aangezien het weerstandstarief vergelijkbaar is met een samengesteld tarief en de accumulatieve kostenwaardes over het algemeen erg groot zijn, worden kleine weerstandstarieven geadviseerd, zoals 0,005 of nog kleiner, afhankelijk van de accumulatieve kostenwaardes.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Definieert de kostencapaciteit voor de reiziger voor een bron. De kostenberekeningen gaan door voor elke bron totdat de gespecificeerde capaciteit is bereikt.",
	"@@Least-Cost-Path_Capacity_tag1@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "Een vereist inputraster dat de kosten of de impedantie definieert om planimetrisch door elke cel te bewegen. De waarde op elke cellocatie vertegenwoordigt de kosten per eenheid afstand voor het erdoorheen bewegen. Elke cellocatiewaarde wordt vermenigvuldigd met de celresolutie, en compenseert ook de diagonale beweging om de totale kosten van het passeren door de cel te verkrijgen.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "De waarden van het <strong>Kostenraster</strong> kunnen integer of float zijn, maar ze kunnen niet negatief of nul zijn.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "Het veld dat wordt gebruikt om waarden te krijgen voor de bestemmingslocaties.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "Een vereist inputraster dat de pixels identificeert van waaruit het goedkoopste pad naar de goedkoopste bron wordt bepaald. Deze input bestaat uit pixels die valide waardes hebben, en de overige pixels moeten ${NoData} toegewezen krijgen. Waardes van 0 zijn valide.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "De drempel die de accumulatieve kostenwaardes niet kunnen overschrijden. Als de accumulatieve kostenafstand deze waarde overschrijdt, is de outputwaarde voor de cellocatie ${NoData}. De maximale afstand definieert de omvang waarvoor de accumulatieve kostafstanden worden berekend. De standaardafstand is tot de rand van het outputraster.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Deze parameter zorgt voor controle over de reismethode of de omvang bij de bron. Hoe groter de multiplier, hoe groter de kosten om door elke cel te bewegen.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "De waardes moeten groter zijn dan nul. De standaardwaarde is 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Een trefwoord dat de manier definieert waarop de waardes en zones op de bestemmingsgegevens van de input worden geïnterpreteerd in de kostenpadberekeningen:",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Beste enkel</strong>--Voor alle pixels op de bestemmingsdata van de input wordt het goedkoopste pad afgeleid uit de pixel met het minimum van de goedkoopste paden naar de broncellen.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Elke cel</strong>--Het goedkoopste pad wordt bepaald voor elke pixel met valide waardes op de bestemmingsdata van de input, en opgeslagen op het outputraster. Elke cel van de bestemmingsdata van de input wordt afzonderlijk behandeld en voor elke cel wordt een goedkoopste pad bepaald.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Elke zone</strong>--Het goedkoopste pad wordt bepaald voor elke zone op de bestemmingsdata van de input, en opgeslagen op het outputraster. Het goedkoopste pad voor elke zone begint bij de pixel met de weging van de laagste kostenafstand in de zone.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Dit is een vereist inputraster dat de cellen of locaties identificeert waarvan de minst geaccumuleerde kostenafstand voor elke output cellocatie berekend is.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "De startkosten waarmee de kostenberekeningen beginnen. Deze parameter zorgt voor de specificatie van de vaste kosten die verbonden zijn met een bron. In plaats te beginnen met kosten van 0, begint het kostenalgoritme met de gespecificeerde waarde.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "De waarde moet nul of hoger zijn. De standaardwaarde is 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Definieert de richting van de reiziger wanneer het bronweerstandstarief en de bronstartkosten worden toegepast.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>Van bron</strong>--Het bronweerstandstarief en de bronstartkosten worden toegepast aan het begin van de inputbron en bewegen naar buiten naar de niet-broncellen. Dit is de standaardinstelling.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>Naar bron</strong>--Het bronweerstandstarief en de bronstartkosten worden toegepast aan het begin van elke niet-broncel en bewegen terug naar de inputbron.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Geef het trefwoord <strong>Van bron</strong> of <strong>Naar bron</strong> op dat op alle bronnen zal worden toegepast, of specificeer een veld in het <strong>Bronraster</strong> die de trefwoorden bevat om de reisrichting voor elke bron te identificeren. Dit veld moet de tekst ${FROM_SOURCE} of ${TO_SOURCE} bevatten.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Less-Than_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Less-Than_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Less-Than_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Less-Than_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Less-Than_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Less-Than_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Less-Than_Raster_tag0@@": "De input die getest wordt om te bepalen of het kleiner is dan de tweede input.",
	"@@Less-Than_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Less-Than_Raster2_tag0@@": "De input waar de eerste input mee vergeleken wordt om te kijken of deze minder is.",
	"@@Less-Than_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om te verwerken extent te bepalen.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Less-Than-Equal_Raster_tag0@@": "De input die getest wordt om te bepalen of deze kleiner dan of gelijk aan de tweede input is.",
	"@@Less-Than-Equal_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Less-Than-Equal_Raster2_tag0@@": "De input waar de eerste input mee vergeleken wordt om te kijken of deze kleiner of gelijk is.",
	"@@Less-Than-Equal_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Ln_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Ln_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Ln_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Ln_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Ln_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Ln_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Ln_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Ln_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Ln_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Ln_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Ln_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Ln_Raster_tag0@@": "Inputwaardes waarvoor de natuurlijke logaritme (Ln) gevonden moet worden.",
	"@@Log10_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Log10_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Log10_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Log10_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Log10_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Log10_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Log10_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Log10_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Log10_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Log10_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Log10_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Log10_Raster_tag0@@": "Inputwaardes waarvoor het basis 10 logaritme gevonden moeten worden.",
	"@@Log2_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Log2_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Log2_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Log2_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Log2_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Log2_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Log2_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Log2_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Log2_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Log2_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Log2_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Log2_Raster_tag0@@": "Inputwaardes waarvoor het basis 2 logaritme gevonden moeten worden.",
	"@@Lookup_Field_tag0@@": "Veld dat de gewenste waardes voor het nieuwe raster bevat.",
	"@@Lookup_Field_tag1@@": "Het moet een numeriek type zijn.",
	"@@Lookup_Raster_tag0@@": "Het inputraster dat een veld bevat van waaruit een nieuw raster gecreëerd wordt.",
	"@@Lookup_Raster_tag1@@": "Het kan een geheel getal of een kommagetaltype zijn.",
	"@@Mask_Included-Ranges_tag0@@": "De inclusieve rijkweidtes kunnen gespecificeerd worden voor elke band door een minimum en maximumwaarde te specificeren; waardes buiten het bereik worden teruggeleverd als ${NoData}. Een pixel wordt meegenomen als de waarde van de pixel binnen een van de gespecificeerde rijkweidtes valt. Als band 1 daarom een bereik heeft van 5-10 en band 2 een bereik heeft van 15-20, en de pixelwaarde voor band 1 is 8, dan zal deze pixel niet gemaskeerd worden.",
	"@@Mask_NoData-Interpretation_tag0@@": "Dit verwijst naar hoe <strong>${NoData} Waarden</strong> de uitvoerafbeelding zullen beïnvloeden.",
	"@@Mask_NoData-Interpretation_tag3@@": "U kunt uit de volgende twee opties selecteren:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Alles komt overeen</strong>--De ${NoData} waardes die u voor elke band specificeert moeten voorkomen in dezelfde pixel om de outputafbeelding de ${NoData} pixel te laten bevatten.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Komt overeen met</strong>--Als de ${NoData} waarde die u specificeert voorkomt voor een pixel in een gespecificeerde band, dan zal die pixel in de outputafbeelding ${NoData} zijn. Dit is de standaardinstelling.",
	"@@Mask_NoData-Values_tag0@@": "De NoData waardes kunnen gespecificeerd worden voor elke band. U kunt meer dan één waarde specificeren door een door spaties gescheiden lijst in te voeren.",
	"@@Mask_Raster_tag0@@": "Het inputraster.",
	"@@Minus_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Minus_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Minus_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Minus_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Minus_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Minus_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Minus_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Minus_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Minus_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Minus_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Minus_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Minus_Raster_tag0@@": "De input waar de waardes uit de tweede input van worden afgetrokken.",
	"@@Minus_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Minus_Raster2_tag0@@": "De inputwaardes die van de waardes uit de eerste input worden afgetrokken.",
	"@@Minus_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@ML-Classify_Raster_tag0@@": "Het inputraster om te classificeren met het maximale waarschijnlijkheid classificatie-algoritme.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "Het ${.gsg} signatuurbestand.",
	"@@Mod_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Mod_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Mod_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Mod_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Mod_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Mod_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Mod_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Mod_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Mod_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Mod_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Mod_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Mod_Raster_tag0@@": "De teller input.",
	"@@Mod_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Mod_Raster2_tag0@@": "De noemer input.",
	"@@Mod_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Los elk conflict op als u delen hebt van twee of meer afbeeldingen die overlappen. De opties omvatten het volgende:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Compositie</strong>--Bereken en toon een gemiddelde van de overlappende pixels door meer gewicht te geven aan pixels die dichterbij de naburige afbeeldingen staan zodat de output een meer gelijke afbeelding is. Dit is de standaardinstelling.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>Eerst</strong>--Geef de pixels weer uit de eerste afbeelding in de lijst van overlappende afbeeldingen in een gegeven gebied.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Laatst</strong>--Geef de pixels weer uit de laatste afbeelding in de lijst van overlappende afbeeldingen in een gegeven gebied.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Max</strong>--Geef de pixel weer met de hoogste waarde van alle overlappende lagen. Met deze optie heeft u geen garantie dat de pixels weergegeven worden van slechts één afbeelding in het overlappende gebied, maar eerder een combinatie van alle potentiële lagen.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Gemiddelde</strong>--Bereken en toon een gemiddelde van de overlappende pixels.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Min</strong>--Geef de pixel weer met de laagste waarde van alle overlappende lagen. Met deze optie heeft u geen garantie dat de pixels weergegeven worden van slechts één afbeelding in het overlappende gebied, maar eerder een combinatie van alle potentiële lagen.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Selecteer de rasters die u samen wilt voegen als mozaïek om samen één afbeelding te vormen.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Specificeert de band ID die het nabij-infrarode deel van het elektromagnetisch spectrum representeert.",
	"@@NDVI_Raster_tag0@@": "Het input multispectrale raster.",
	"@@NDVI_Scientific-Output_tag0@@": "De outputwaardes liggen tussen -1.0 en 1.0, wat gebruikt wordt in veel wetenschappelijke toepassingen.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Specificeert de band ID die het rode deel van het elektromagnetisch spectrum representeert.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Kies een vooraf gedefinieerd kleurenschema uit het keuzemenu.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Kies het type kleurenschema om de NDVI output mee te kleuren:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Kleurenkaart--Kies een vooraf gedefinieerde kleurenkaart uit het keuzemenu. U kunt ook naar een aanhoudend kleurenkaartbestand bladeren dat al bestaat.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Kleurverloop--Kies een vooraf gedefinieerd kleurenschema uit het keuzemenu.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Kies een vooraf gedefinieerde kleurenkaart uit het keuzemenu. U kunt ook naar een bestaand kleurenkaartbestand bladeren.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Specificeert de band ID die het nabij-infrarode deel van het elektromagnetisch spectrum representeert.",
	"@@NDVI-Colorized_Raster_tag0@@": "Het input multispectrale raster.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "De outputwaardes liggen tussen -1.0 en 1.0, wat gebruikt wordt in veel wetenschappelijke toepassingen.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Specificeert de band ID die het rode deel van het elektromagnetisch spectrum representeert.",
	"@@Negate_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Negate_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Negate_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Negate_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Negate_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Negate_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Negate_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Negate_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Negate_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Negate_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Negate_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Negate_Raster_tag0@@": "Het inputraster om teniet te doen (vermenigvuldigd met -1).",
	"@@Nibble_Mask-Raster_tag0@@": "Het vereiste inputraster dat gebruikt is als het masker.",
	"@@Nibble_Mask-Raster_tag1@@": "Cellen met NoData als waarde worden afgeknabbeld in de input <strong>Raster</strong>.",
	"@@Nibble_Mask-Raster_tag4@@": "Het masker raster kan een geheel getal of een kommagetaltype zijn.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Definieert of NoData cellen in het inputraster NoData blijven in het outputraster.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>Nee</strong>--Specificeert dat NoData cellen in het inputraster NoData blijven in de output. Dit is de standaardinstelling.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Ja</strong>--Specificeert dat NoData cellen in het inputraster en binnen het masker afgeknabbeld kunnen worden tot valide output celwaardes.",
	"@@Nibble_Raster_tag0@@": "Het vereiste inputraster dat afgeknabbeld wordt.",
	"@@Nibble_Raster_tag1@@": "Het inputraster kan een geheel getal of een kommagetaltype zijn.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Definieert of ${NoData} waardes in het inputraster in het gebied dat gedefinieerd wordt door het masker raster mogen knabbelen.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Ja</strong>--Specificeert dat de dichtstbijzijnde buurwaarde wordt gebruikt, of deze nu ${NoData} is of een andere datawaarde in het inputraster. ${NoData} waardes in het inputraster mogen aan gebieden knabbelen die gedefinieerd zijn in het masker als ze de dichtstbijzijnde buur zijn. Dit is de standaardinstelling.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>Nee</strong>--Specificeert dat alleen datawaardes aan gebieden die gedefinieerd zijn in het masker raster mogen knabbelen. ${NoData} waardes in het inputraster mogen niet aan gebieden knabbelen die gedefinieerd zijn in het masker zelfs als ze de dichtstbijzijnde buur zijn.",
	"@@Nibble_Zone-Raster_tag0@@": "Het input zoneraster.",
	"@@Nibble_Zone-Raster_tag1@@": "Een zone bestaat uit alle cellen in een raster die dezelfde waarde hebben, of ze nu wel of niet aangrenzend zijn. De input zonelaag definieert de vorm, waardes en locaties van de zones. Het zoneraster kan een geheel of een kommagetal zijn.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Not-Equal_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Not-Equal_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Not-Equal_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Not-Equal_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Not-Equal_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Not-Equal_Raster_tag0@@": "De input die gebruikt wordt voor vergelijking voor ongelijkheid bij de tweede input.",
	"@@Not-Equal_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Not-Equal_Raster2_tag0@@": "De input die vergeleken wordt met de eerste input voor ongelijkheid.",
	"@@Not-Equal_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Pansharpening_Multispectral_tag0@@": "Het multispectrale raster dat u wilt verscherpen met de panchromatische band.",
	"@@Pansharpening_Panchromatic_tag0@@": "Het enkele band raster met hoge resolutie dat gebruikt wordt om het multispectrale raster met lagere resolutie te panverscherpen.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Kies het panverscherpingsalgoritme dat u wilt gebruiken.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey--Gebruikt het Brovey algoritme gebaseerd op spectrale modellering voor datafusie.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri--Gebruikt het Esri algoritme gebaseerd op spectrale modellering voor datafusie.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram-Schmidt--Gebruikt het Gram-Schmidt spectrale verscherpingsalgoritme om multispectrale data te verscherpen.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "ITV--Gebruikt Intensiteit, Tint en Verzadiging kleurruimte voor datafusie.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Gemiddelde--Gebruikt de gemiddelde waarde tussen de rode, groene en blauwe waardes en de panchromatische pixelwaarde.",
	"@@Pansharpening_Weights_tag0@@": "Specificeer de gewichten voor de rode, groene, blauwe en infrarode banden. Alle waardes moeten binnen het bereik van 0 tot 1 liggen.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Deze parameter simuleert de verhoogde inspanning om kosten te overkomen wanneer de accumulatieve kosten groeien. Het wordt gebruikt om de moeheid van de reiziger te modelleren. De groeiende accumulatieve kosten om een cel te bereiken zijn vermenigvuldigd met het weerstandstarief en toegevoegd aan de kosten om naar de volgende cel te bewegen.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Het is een gemodificeerde versie van een samengestelde rentevoet formule die gebruikt wordt om de schijnbare kosten te berekenen om door een cel te bewegen. Als de waarde van het weerstandstarief omhoog gaat, verhoogt het de kosten van de cellen die later bezocht worden. Hoe groter het weerstandstarief, hoe hoger de kosten om de volgende cel te bereiken, die samengesteld wordt door elke volgende beweging. Aangezien het weerstandstarief vergelijkbaar is met een samengesteld tarief en de accumulatieve kostenwaardes over het algemeen erg groot zijn, worden kleine weerstandstarieven geadviseerd, zoals 0,005 of nog kleiner, afhankelijk van de accumulatieve kostenwaardes.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Path-Distance_Capacity_tag0@@": "Definieert de kostencapaciteit voor de reiziger voor een bron. De kostenberekeningen gaan door voor elke bron totdat de gespecificeerde capaciteit is bereikt.",
	"@@Path-Distance_Capacity_tag1@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Path-Distance_Cost-Raster_tag0@@": "Een verplicht inputraster dat de kosten of de impedantie definieert om planimetrisch door elke cel te bewegen. De waarde op elke cellocatie vertegenwoordigt de kosten per eenheid afstand voor het erdoorheen bewegen. Elke cellocatiewaarde wordt vermenigvuldigd met de celresolutie, en compenseert ook de diagonale beweging om de totale kosten van het passeren door de cel te verkrijgen.",
	"@@Path-Distance_Cost-Raster_tag1@@": "De waarden van het <strong>Kostenraster</strong> kunnen integer of float zijn, maar ze kunnen niet negatief of nul zijn.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Definieert de relatie tussen de horizontale kostenfactor en de horizontale relatieve bewegende hoek (HRBH).</p><p>Er zijn een aantal factoren met modifiers die u kunt selecteren die een gedefinieerde verticale factorgrafiek identificeren. Daarnaast kan er een tabel worden gebruikt om een aangepaste grafiek te maken. De grafieken worden gebruikt om de verticale factor te identificeren die gebruikt wordt bij de berekening van de totale kosten om naar een naburige cel te bewegen.</p><p>In de uitleg hieronder worden twee acroniemen gebruikt: HF en HRBH. HF staat voor horizontale factor, die de tegengekomen horizontale uitdaging definieert bij het bewegen van de ene cel naar de volgende. HRBH staat voor horizontale relatieve bewegingshoek, die de hoek tussen de horizontale richting van een cel en de bewegingsrichting identificeert.</p><p><strong>Horizontale factor</strong>types omvatten het volgende:</p><ul><li><strong>Binair</strong>—Geeft aan dat als de HRBH minder is dan de snijhoek, de HF ingesteld wordt op de waarde die geassocieerd wordt met de nulfactor; anders is deze oneindig.</li><li><strong>Voorwaarts</strong>—Alleen voorwaartse beweging is toegestaan. De HRBH moet groter of gelijk zijn aan 0 en minder dan 90 graden (0 &lt;= HRBH &lt; 90). Als de HRBH groter is dan 0 en minder dan 45 graden, wordt de HF voor de cel ingesteld op de waarde die geassocieerd wordt met de nulfactor. Als de HRBH groter of gelijk is aan 45 graden, wordt de zijwaartse modifier waarde gebruikt. De HF die voor een HRBH-waarde gelijk is aan of groter is dan 90 graden, wordt ingesteld op oneindig.</li><li><strong>Lineair</strong>--Specificeert dat de HF een lineaire functie is van de HRBH.</li><li><strong>Omgekeerd lineair</strong>--Specificeert dat de HF een omgekeerde lineaire functie is van de HRBH.</li><li><strong>Tabel</strong>--Identificeert dat een tabelbestand gebruikt wordt om de horizontale factorgrafiek te definiëren die gebruikt wordt om de HF's te bepalen.</li></ul><p>Modifiers van de horizontale factoren bevatten het volgende:</p><ul><li><strong>Nulfactor</strong>--De horizontale factor gebruikt als de HRBH 0 is. Deze factor positioneert de y-onderschepping voor elk van de horizontale factorfuncties.</li><li><strong>Snijhoek</strong>--Definieert de HRBH-hoek waarbuiten de HF ingesteld wordt op oneindig.</li><li><strong>Helling</strong>--Stelt de helling vast van de rechte lijn die gebruikt wordt met de<strong>Lineaire</strong>en<strong>Omgekeerde lineaire</strong>horizontale factortrefwoorden. De helling is gespecificeerd als een fractie van ‘rise over run’ (bijvoorbeeld, 45 procent helling is 1/45, wat ingevoerd wordt als 0.02222).</li><li><strong>Zijwaarde</strong>--Stelt de HF vast als de HRBH groter of gelijk is aan 45 graden en minder dan 90 graden als het<strong>Voorwaartse</strong>horizontale factortrefwoord wordt gespecificeerd.</li><li><strong>Tabelnaam</strong>--Identificeert de naam van de tabel die de HF definieert.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "Een raster dat de horizontale richting op elke cel definieert.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "De waardes op het raster moeten geheel getal zijn tussen de 0 en 360, waarbij 0 graden het noorden is, of naar de bovenkant van het scherm toe, en naarmate zo hoger worden, wordt er met de klok meegedraaid. Vlakke gebieden moeten een waarde van -1 krijgen. De waarden op elke locatie worden gebruikt in combinatie met de <strong>horizontale factor</strong> om de gemaakte kosten te bepalen bij het bewegen van een cel naar zijn buren.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "De drempel die de accumulatieve kostwaardes niet kunnen overschrijden. Als een accumulatieve kostenafstand deze waarde overschrijdt, is de outputwaarde voor de cellocatie NoData. De maximale afstand definieert de omvang waarvoor de accumulatieve kostafstanden worden berekend. De standaardafstand is tot de rand van het outputraster.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Een multiplier om op de kostenwaardes toe te passen.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Deze parameter zorgt voor controle over de reismethode of de omvang bij de bron. Hoe groter de multiplier, hoe groter de kosten om door elke cel te bewegen.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "De waardes moeten groter zijn dan nul. De standaardwaarde is 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Path-Distance_Source-Raster_tag0@@": "Het vereiste inputraster van bronlocaties.",
	"@@Path-Distance_Source-Raster_tag1@@": "Dit is een raster dat de cellen of locaties identificeert waarvan de minst geaccumuleerde kostenafstand voor elke output cellocatie berekend is.",
	"@@Path-Distance_Source-Raster_tag2@@": "Het kan een geheel getal of een kommagetal type zijn.",
	"@@Path-Distance_Start-Cost_tag0@@": "De startkosten waarmee de kostenberekeningen beginnen. Deze parameter zorgt voor de specificatie van de vaste kosten die verbonden zijn met een bron. In plaats te beginnen met kosten van 0, begint het kostenalgoritme met de gespecificeerde waarde.",
	"@@Path-Distance_Start-Cost_tag1@@": "De waarde moet nul of hoger zijn. De standaardwaarde is 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "Een raster dat de hoogtewaardes op elke cellocatie definieert.",
	"@@Path-Distance_Surface-Raster_tag1@@": "De waardes worden gebruikt om de daadwerkelijke oppervlakteafstand te berekenen die wordt afgelegd bij het voorbijgaan tussen cellen.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Definieert de richting van de reiziger wanneer het bronweerstandstarief en de bronstartkosten worden toegepast.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>Van bron</strong>--Het bronweerstandstarief en de bronstartkosten worden toegepast aan het begin van de inputbron en bewegen naar buiten naar de niet-broncellen. Dit is de standaardinstelling.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>Naar bron</strong>--Het bronweerstandstarief en de bronstartkosten worden toegepast aan het begin van elke niet-broncel en bewegen terug naar de inputbron.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Geef het trefwoord <strong>Van bron</strong> of <strong>Naar bron</strong> op dat op alle bronnen zal worden toegepast, of specificeer een veld in het <strong>Bronraster</strong> die de trefwoorden bevat om de reisrichting voor elke bron te identificeren. Dit veld moet de tekst ${FROM_SOURCE} of ${TO_SOURCE} bevatten.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Definieert de relatie tussen de verticale kostenfactor en de verticale relatieve bewegende hoek (VRBH).</p><p>Er zijn een aantal factoren met modifiers die u kunt selecteren die een gedefinieerde verticale factorgrafiek identificeren. Daarnaast kan er een tabel worden gebruikt om een aangepaste grafiek te maken. De grafieken worden gebruikt om de verticale factor te identificeren die gebruikt wordt bij de berekening van de totale kosten om naar een naburige cel te bewegen.</p><p>In de uitleg hieronder worden twee acroniemen gebruikt: VF en VRBH. VF staat voor verticale factor, die de tegengekomen verticale uitdaging definieert bij het bewegen van de ene cel naar de volgende. VRBH staat voor verticale relatieve bewegende hoek, die de hellingshoek definieert tussen de VANDAAN, of verwerkingscel en de NAARTOE-cel.</p><p><strong>Verticale factor</strong>types omvatten het volgende:</p><ul><li><strong>Binair</strong>--Geeft aan dat als de VRBH groter is dan de lage snijhoek en kleiner dan de hoge snijhoek, de VF ingesteld wordt op de waarde die geassocieerd wordt met de nulfactor; anders is deze oneindig.</li><li><strong>Lineair</strong>--Geeft aan dat de VF een lineaire functie is van de VRBH.</li><li><strong>Symmetrisch lineair</strong>--Specificeert dat de VF een lineaire functie is van de VRBH in ofwel de negatieve of positieve kant van de VRBH, respectievelijk, en de twee lineaire functies zijn symmetrisch wat betreft de VF (y)-as.</li><li><strong>Omgekeerd lineair</strong>--Geeft aan dat de VF een omgekeerde lineaire functie is van de VRBH.</li><li><strong>Symmetrisch omgekeerd lineair</strong>--Specificeert dat de VF een omgekeerde lineaire functie is van de VRBH in ofwel de negatieve of positieve kant van de VRBH, respectievelijk, en de twee lineaire functies zijn symmetrisch wat betreft de VF (y)-as.</li><li><strong>Cos</strong>--Identificeert de VF als de cosinusgebaseerde functie van de VRBH.</li><li><strong>Sec</strong>--Identificeert de VF als de snij-gebaseerde functie van de VRBH.</li><li><strong>Cos-Sec</strong>--Specificeert dat de VF de cosinusgebaseerde functie van de VRBH is als de VRBH negatief is, en de snij-gebaseerde functie van de VRBH als de VRBH niet negatief is.</li><li><strong>Sec-Cos</strong>--Specificeert dat de VF de cosinusgebaseerde functie van de VRBH is als de VRBH negatief is, en de snij-gebaseerde functie van de VRBH als de VRBH niet negatief is.</li><li><strong>Tabel</strong>--Identificeert dat een tabelbestand gebruikt wordt om de verticale factorgrafiek te definiëren die gebruikt wordt om de VF's te bepalen.</li></ul><p>Modifiers van de verticale trefwoorden bevatten het volgende:</p><ul><li><strong>Nulfactor</strong>--Stelt vast dat de verticale factor gebruikt wordt als de VRBH nul is. Deze factor positioneert de y-onderschepping van de gespecificeerde functie. De nulfactor is per definitie niet toepasbaar op de trigonometrische verticale functies (COS, SEC, COS-SEC of SEC-COS). De y-onderschepping wordt gedefinieerd door deze functies.</li><li><strong>Lage snijhoek</strong>--Definieert de VRBH-hoek waaronder de VF ingesteld wordt op oneindig.</li><li><strong>Hoge snijhoek</strong>--Definieert de VRBH-hoek waarboven de VF ingesteld wordt op oneindig.</li><li><strong>Helling</strong>--Stelt de helling vast van de rechte lijn die gebruikt wordt met de<strong>Lineaire</strong>en<strong>Omgekeerd lineaire</strong>verticale-factortrefwoorden. De helling is gespecificeerd als een fractie van ‘rise over run’ (bijvoorbeeld, 45 procent helling is 1/45, wat ingevoerd wordt als 0.02222).</li><li><strong>Tabelnaam</strong>--Identificeert de naam van de tabel die de VF definieert.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Definieert de relatie tussen de verticale kostenfactor en de verticale relatieve bewegende hoek (VRBH).",
	"@@Path-Distance_Vertical-Raster_tag1@@": "De waardes worden gebruikt om de helling te berekenen die gebruikt wordt om de verticale factor die oploopt bij het bewegen van de ene cel naar de andere te identificeren.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Deze parameter simuleert de verhoogde inspanning om kosten te overkomen wanneer de accumulatieve kosten groeien. Het wordt gebruikt om de moeheid van de reiziger te modelleren. De groeiende accumulatieve kosten om een cel te bereiken zijn vermenigvuldigd met het weerstandstarief en toegevoegd aan de kosten om naar de volgende cel te bewegen.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Het is een gemodificeerde versie van een samengestelde rentevoet formule die gebruikt wordt om de schijnbare kosten te berekenen om door een cel te bewegen. Als de waarde van het weerstandstarief omhoog gaat, verhoogt het de kosten van de cellen die later bezocht worden. Hoe groter het weerstandstarief, hoe hoger de kosten om de volgende cel te bereiken, die samengesteld wordt door elke volgende beweging. Aangezien het weerstandstarief vergelijkbaar is met een samengesteld tarief en de accumulatieve kostenwaardes over het algemeen erg groot zijn, worden kleine weerstandstarieven geadviseerd, zoals 0,005 of nog kleiner, afhankelijk van de accumulatieve kostenwaardes.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Definieert de kostencapaciteit voor de reiziger voor een bron. De kostenberekeningen gaan door voor elke bron totdat de gespecificeerde capaciteit is bereikt.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "Een vereist inputraster dat de kosten of de impedantie definieert om planimetrisch door elke cel te bewegen. De waarde op elke cellocatie vertegenwoordigt de kosten per eenheid afstand voor het erdoorheen bewegen. Elke cellocatiewaarde wordt vermenigvuldigd met de celresolutie, en compenseert ook de diagonale beweging om de totale kosten van het passeren door de cel te verkrijgen.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "De waarden van het <strong>Kostenraster</strong> kunnen integer of float zijn, maar ze kunnen niet negatief of nul zijn.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Definieert de relatie tussen de horizontale kostenfactor en de horizontale relatieve bewegende hoek (HRBH).</p><p>Er zijn een aantal factoren met modifiers die u kunt selecteren die een gedefinieerde verticale factorgrafiek identificeren. Daarnaast kan er een tabel worden gebruikt om een aangepaste grafiek te maken. De grafieken worden gebruikt om de verticale factor te identificeren die gebruikt wordt bij de berekening van de totale kosten om naar een naburige cel te bewegen.</p><p>In de uitleg hieronder worden twee acroniemen gebruikt: HF en HRBH. HF staat voor horizontale factor, die de tegengekomen horizontale uitdaging definieert bij het bewegen van de ene cel naar de volgende. HRBH staat voor horizontale relatieve bewegingshoek, die de hoek tussen de horizontale richting van een cel en de bewegingsrichting identificeert.</p><p><strong>Horizontale factor</strong>types omvatten het volgende:</p><ul><li><strong>Binair</strong>—Geeft aan dat als de HRBH minder is dan de snijhoek, de HF ingesteld wordt op de waarde die geassocieerd wordt met de nulfactor; anders is deze oneindig.</li><li><strong>Voorwaarts</strong>—Alleen voorwaartse beweging is toegestaan. De HRBH moet groter of gelijk zijn aan 0 en minder dan 90 graden (0 &lt;= HRBH &lt; 90). Als de HRBH groter is dan 0 en minder dan 45 graden, wordt de HF voor de cel ingesteld op de waarde die geassocieerd wordt met de nulfactor. Als de HRBH groter of gelijk is aan 45 graden, wordt de zijwaartse modifier waarde gebruikt. De HF die voor een HRBH-waarde gelijk is aan of groter is dan 90 graden, wordt ingesteld op oneindig.</li><li><strong>Lineair</strong>--Specificeert dat de HF een lineaire functie is van de HRBH.</li><li><strong>Omgekeerd lineair</strong>--Specificeert dat de HF een omgekeerde lineaire functie is van de HRBH.</li><li><strong>Tabel</strong>--Identificeert dat een tabelbestand gebruikt wordt om de horizontale factorgrafiek te definiëren die gebruikt wordt om de HF's te bepalen.</li></ul><p>Modifiers van de horizontale factoren bevatten het volgende:</p><ul><li><strong>Nulfactor</strong>--De horizontale factor gebruikt als de HRBH 0 is. Deze factor positioneert de y-onderschepping voor elk van de horizontale factorfuncties.</li><li><strong>Snijhoek</strong>--Definieert de HRBH-hoek waarbuiten de HF ingesteld wordt op oneindig.</li><li><strong>Helling</strong>--Stelt de helling vast van de rechte lijn die gebruikt wordt met de<strong>Lineaire</strong>en<strong>Omgekeerde lineaire</strong>horizontale factortrefwoorden. De helling is gespecificeerd als een fractie van ‘rise over run’ (bijvoorbeeld, 45 procent helling is 1/45, wat ingevoerd wordt als 0.02222).</li><li><strong>Zijwaarde</strong>--Stelt de HF vast als de HRBH groter of gelijk is aan 45 graden en minder dan 90 graden als het<strong>Voorwaartse</strong>horizontale factortrefwoord wordt gespecificeerd.</li><li><strong>Tabelnaam</strong>--Identificeert de naam van de tabel die de HF definieert.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "Een raster dat de horizontale richting op elke cel definieert.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "De waardes op het raster moeten geheel getal zijn tussen de 0 en 360, waarbij 0 graden het noorden is, of naar de bovenkant van het scherm toe, en naarmate zo hoger worden, wordt er met de klok meegedraaid. Vlakke gebieden moeten een waarde van -1 krijgen. De waarden op elke locatie worden gebruikt in combinatie met de <strong>horizontale factor</strong> om de gemaakte kosten te bepalen bij het bewegen van een cel naar zijn buren.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "De drempel die de accumulatieve kostwaardes niet kunnen overschrijden. Als een accumulatieve kostenafstand deze waarde overschrijdt, is de outputwaarde voor de cellocatie NoData. De maximale afstand definieert de omvang waarvoor de accumulatieve kostafstanden worden berekend. De standaardafstand is tot de rand van het outputraster.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Een multiplier om op de kostenwaardes toe te passen.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Deze parameter zorgt voor controle over de reismethode of de omvang bij de bron. Hoe groter de multiplier, hoe groter de kosten om door elke cel te bewegen.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "De waardes moeten groter zijn dan nul. De standaardwaarde is 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "Het veld dat wordt gebruikt om waardes toe te wijzen aan de bronlocaties. Het moet een geheel getal type zijn. Als het <strong>Waarderaster</strong> ingesteld is, zullen de waardes in die input voorrang hebben op elke instelling voor het <strong>Bronveld</strong>.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "Het vereiste inputraster van bronlocaties.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Dit is een raster dat de cellen of locaties identificeert waarvan de minst geaccumuleerde kostenafstand voor elke output cellocatie berekend is.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Het kan een geheel getal of een kommagetal type zijn.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "De startkosten waarmee de kostenberekeningen beginnen. Deze parameter zorgt voor de specificatie van de vaste kosten die verbonden zijn met een bron. In plaats te beginnen met kosten van 0, begint het kostenalgoritme met de gespecificeerde waarde.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "De waarde moet nul of hoger zijn. De standaardwaarde is 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "Een raster dat de hoogtewaardes op elke cellocatie definieert.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "De waardes worden gebruikt om de daadwerkelijke oppervlakteafstand te berekenen die wordt afgelegd bij het voorbijgaan tussen cellen.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Definieert de richting van de reiziger wanneer het bronweerstandstarief en de bronstartkosten worden toegepast.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>Van bron</strong>--Het bronweerstandstarief en de bronstartkosten worden toegepast aan het begin van de inputbron en bewegen naar buiten naar de niet-broncellen. Dit is de standaardinstelling.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>Naar bron</strong>--Het bronweerstandstarief en de bronstartkosten worden toegepast aan het begin van elke niet-broncel en bewegen terug naar de inputbron.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Geef het trefwoord <strong>Van bron</strong> of <strong>Naar bron</strong> op dat op alle bronnen zal worden toegepast, of specificeer een veld in het <strong>Bronraster</strong> die de trefwoorden bevat om de reisrichting voor elke bron te identificeren. Dit veld moet de tekst ${FROM_SOURCE} of ${TO_SOURCE} bevatten.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "Het input geheel getal raster dat de zonewaardes identificeert die worden gebruikt voor elke inputbronlocatie. Voor elke bronlocatiecel wordt de waarde die gedefinieerd is door de <strong>Waarderaster</strong> toegewezen aan alle cellen die toegewezen zijn aan de bronlocatie voor de berekening. Het <strong>Waarderaster heeft</strong> voorrang op elke instelling voor het <strong>Bronveld</strong>.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Definieert de relatie tussen de verticale kostenfactor en de verticale relatieve bewegende hoek (VRBH).</p><p>Er zijn een aantal factoren met modifiers die u kunt selecteren die een gedefinieerde verticale factorgrafiek identificeren. Daarnaast kan er een tabel worden gebruikt om een aangepaste grafiek te maken. De grafieken worden gebruikt om de verticale factor te identificeren die gebruikt wordt bij de berekening van de totale kosten om naar een naburige cel te bewegen.</p><p>In de uitleg hieronder worden twee acroniemen gebruikt: VF en VRBH. VF staat voor verticale factor, die de tegengekomen verticale uitdaging definieert bij het bewegen van de ene cel naar de volgende. VRBH staat voor verticale relatieve bewegende hoek, die de hellingshoek definieert tussen de VANDAAN, of verwerkingscel en de NAARTOE-cel.</p><p><strong>Verticale factor</strong>types omvatten het volgende:</p><ul><li><strong>Binair</strong>--Geeft aan dat als de VRBH groter is dan de lage snijhoek en kleiner dan de hoge snijhoek, de VF ingesteld wordt op de waarde die geassocieerd wordt met de nulfactor; anders is deze oneindig.</li><li><strong>Lineair</strong>--Geeft aan dat de VF een lineaire functie is van de VRBH.</li><li><strong>Symmetrisch lineair</strong>--Specificeert dat de VF een lineaire functie is van de VRBH in ofwel de negatieve of positieve kant van de VRBH, respectievelijk, en de twee lineaire functies zijn symmetrisch wat betreft de VF (y)-as.</li><li><strong>Omgekeerd lineair</strong>--Geeft aan dat de VF een omgekeerde lineaire functie is van de VRBH.</li><li><strong>Symmetrisch omgekeerd lineair</strong>--Specificeert dat de VF een omgekeerde lineaire functie is van de VRBH in ofwel de negatieve of positieve kant van de VRBH, respectievelijk, en de twee lineaire functies zijn symmetrisch wat betreft de VF (y)-as.</li><li><strong>Cos</strong>--Identificeert de VF als de cosinusgebaseerde functie van de VRBH.</li><li><strong>Sec</strong>--Identificeert de VF als de snij-gebaseerde functie van de VRBH.</li><li><strong>Cos-Sec</strong>--Specificeert dat de VF de cosinusgebaseerde functie van de VRBH is als de VRBH negatief is, en de snij-gebaseerde functie van de VRBH als de VRBH niet negatief is.</li><li><strong>Sec-Cos</strong>--Specificeert dat de VF de cosinusgebaseerde functie van de VRBH is als de VRBH negatief is, en de snij-gebaseerde functie van de VRBH als de VRBH niet negatief is.</li><li><strong>Tabel</strong>--Identificeert dat een tabelbestand gebruikt wordt om de verticale factorgrafiek te definiëren die gebruikt wordt om de VF's te bepalen.</li></ul><p>Modifiers van de verticale trefwoorden bevatten het volgende:</p><ul><li><strong>Nulfactor</strong>--Stelt vast dat de verticale factor gebruikt wordt als de VRBH nul is. Deze factor positioneert de y-onderschepping van de gespecificeerde functie. De nulfactor is per definitie niet toepasbaar op de trigonometrische verticale functies (COS, SEC, COS-SEC of SEC-COS). De y-onderschepping wordt gedefinieerd door deze functies.</li><li><strong>Lage snijhoek</strong>--Definieert de VRBH-hoek waaronder de VF ingesteld wordt op oneindig.</li><li><strong>Hoge snijhoek</strong>--Definieert de VRBH-hoek waarboven de VF ingesteld wordt op oneindig.</li><li><strong>Helling</strong>--Stelt de helling vast van de rechte lijn die gebruikt wordt met de<strong>Lineaire</strong>en<strong>Omgekeerd lineaire</strong>verticale-factortrefwoorden. De helling is gespecificeerd als een fractie van ‘rise over run’ (bijvoorbeeld, 45 procent helling is 1/45, wat ingevoerd wordt als 0.02222).</li><li><strong>Tabelnaam</strong>--Identificeert de naam van de tabel die de VF definieert.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Definieert de relatie tussen de verticale kostenfactor en de verticale relatieve bewegende hoek (VRBH).",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "De waardes worden gebruikt om de helling te berekenen die gebruikt wordt om de verticale factor die oploopt bij het bewegen van de ene cel naar de andere te identificeren.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Deze parameter simuleert de verhoogde inspanning om kosten te overkomen wanneer de accumulatieve kosten groeien. Het wordt gebruikt om de moeheid van de reiziger te modelleren. De groeiende accumulatieve kosten om een cel te bereiken zijn vermenigvuldigd met het weerstandstarief en toegevoegd aan de kosten om naar de volgende cel te bewegen.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Het is een gemodificeerde versie van een samengestelde rentevoet formule die gebruikt wordt om de schijnbare kosten te berekenen om door een cel te bewegen. Als de waarde van het weerstandstarief omhoog gaat, verhoogt het de kosten van de cellen die later bezocht worden. Hoe groter het weerstandstarief, hoe hoger de kosten om de volgende cel te bereiken, die samengesteld wordt door elke volgende beweging. Aangezien het weerstandstarief vergelijkbaar is met een samengesteld tarief en de accumulatieve kostenwaardes over het algemeen erg groot zijn, worden kleine weerstandstarieven geadviseerd, zoals 0,005 of nog kleiner, afhankelijk van de accumulatieve kostenwaardes.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Definieert de kostcapaciteit voor de reiziger voor een bron. De kostenberekeningen gaan door voor elke bron totdat de gespecificeerde capaciteit is bereikt.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "Een vereist inputraster dat de kosten of de impedantie definieert om planimetrisch door elke cel te bewegen. De waarde op elke cellocatie vertegenwoordigt de kosten per eenheid afstand voor het erdoorheen bewegen. Elke cellocatiewaarde wordt vermenigvuldigd met de celresolutie, en compenseert ook de diagonale beweging om de totale kosten van het passeren door de cel te verkrijgen.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "De waarden van het <strong>Kostenraster</strong> kunnen integer of float zijn, maar ze kunnen niet negatief of nul zijn.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Definieert de relatie tussen de horizontale kostenfactor en de horizontale relatieve bewegende hoek (HRBH).</p><p>Er zijn een aantal factoren met modifiers die u kunt selecteren die een gedefinieerde verticale factorgrafiek identificeren. Daarnaast kan er een tabel worden gebruikt om een aangepaste grafiek te maken. De grafieken worden gebruikt om de verticale factor te identificeren die gebruikt wordt bij de berekening van de totale kosten om naar een naburige cel te bewegen.</p><p>In de uitleg hieronder worden twee acroniemen gebruikt: HF en HRBH. HF staat voor horizontale factor, die de tegengekomen horizontale uitdaging definieert bij het bewegen van de ene cel naar de volgende. HRBH staat voor horizontale relatieve bewegingshoek, die de hoek tussen de horizontale richting van een cel en de bewegingsrichting identificeert.</p><p><strong>Horizontale factor</strong>types omvatten het volgende:</p><ul><li><strong>Binair</strong>—Geeft aan dat als de HRBH minder is dan de snijhoek, de HF ingesteld wordt op de waarde die geassocieerd wordt met de nulfactor; anders is deze oneindig.</li><li><strong>Voorwaarts</strong>—Alleen voorwaartse beweging is toegestaan. De HRBH moet groter of gelijk zijn aan 0 en minder dan 90 graden (0 &lt;= HRBH &lt; 90). Als de HRBH groter is dan 0 en minder dan 45 graden, wordt de HF voor de cel ingesteld op de waarde die geassocieerd wordt met de nulfactor. Als de HRBH groter of gelijk is aan 45 graden, wordt de zijwaartse modifier waarde gebruikt. De HF die voor een HRBH-waarde gelijk is aan of groter is dan 90 graden, wordt ingesteld op oneindig.</li><li><strong>Lineair</strong>--Specificeert dat de HF een lineaire functie is van de HRBH.</li><li><strong>Omgekeerd lineair</strong>--Specificeert dat de HF een omgekeerde lineaire functie is van de HRBH.</li><li><strong>Tabel</strong>--Identificeert dat een tabelbestand gebruikt wordt om de horizontale factorgrafiek te definiëren die gebruikt wordt om de HF's te bepalen.</li></ul><p>Modifiers van de horizontale factoren bevatten het volgende:</p><ul><li><strong>Nulfactor</strong>--De horizontale factor gebruikt als de HRBH 0 is. Deze factor positioneert de y-onderschepping voor elk van de horizontale factorfuncties.</li><li><strong>Snijhoek</strong>--Definieert de HRBH-hoek waarbuiten de HF ingesteld wordt op oneindig.</li><li><strong>Helling</strong>--Stelt de helling vast van de rechte lijn die gebruikt wordt met de<strong>Lineaire</strong>en<strong>Omgekeerde lineaire</strong>horizontale factortrefwoorden. De helling is gespecificeerd als een fractie van ‘rise over run’ (bijvoorbeeld, 45 procent helling is 1/45, wat ingevoerd wordt als 0.02222).</li><li><strong>Zijwaarde</strong>--Stelt de HF vast als de HRBH groter of gelijk is aan 45 graden en minder dan 90 graden als het<strong>Voorwaartse</strong>horizontale factortrefwoord wordt gespecificeerd.</li><li><strong>Tabelnaam</strong>--Identificeert de naam van de tabel die de HF definieert.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "Een raster dat de horizontale richting op elke cel definieert.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "De waardes op het raster moeten geheel getal zijn tussen de 0 en 360, waarbij 0 graden het noorden is, of naar de bovenkant van het scherm toe, en naarmate zo hoger worden, wordt er met de klok meegedraaid. Vlakke gebieden moeten een waarde van -1 krijgen. De waarden op elke locatie worden gebruikt in combinatie met de <strong>horizontale factor</strong> om de gemaakte kosten te bepalen bij het bewegen van een cel naar zijn buren.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "De drempel die de accumulatieve kostenwaardes niet kunnen overschrijden. Als een accumulatieve kostenafstand deze waarde overschrijdt, is de outputwaarde voor de cellocatie NoData. De maximale afstand definieert de omvang waarvoor de accumulatieve kostafstanden worden berekend. De standaardafstand komt tot de rand van het outputraster.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Een multiplier om op de kostenwaardes toe te passen.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Deze parameter zorgt voor controle over de reismethode of de omvang bij de bron. Hoe groter de multiplier, hoe groter de kosten om door elke cel te bewegen.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "De waardes moeten groter zijn dan nul. De standaardwaarde is 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "Het verplichte inputraster van bronlocaties.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Dit is een raster dat de cellen of locaties identificeert waarvan de minst geaccumuleerde kostenafstand voor elke output cellocatie berekend is.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Het kan een geheel getal of kommagetaltype zijn.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "De startkosten waarmee de kostenberekeningen beginnen. Deze parameter zorgt voor de specificatie van de vaste kosten die verbonden zijn met een bron. In plaats te beginnen met kosten van 0, begint het kostenalgoritme met de gespecificeerde waarde.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "De waarde moet nul of hoger zijn. De standaardwaarde is 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "Een raster dat de hoogtewaardes op elke cellocatie definieert.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "De waardes worden gebruikt om de daadwerkelijke oppervlakteafstand te berekenen die wordt afgelegd bij het voorbijgaan tussen cellen.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Definieert de richting van de reiziger wanneer het bronweerstandstarief en de bronstartkosten worden toegepast.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>Van bron</strong>--Het bronweerstandstarief en de bronstartkosten worden toegepast aan het begin van de inputbron en bewegen naar buiten naar de niet-broncellen. Dit is de standaardinstelling.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>Naar bron</strong>--Het bronweerstandstarief en de bronstartkosten worden toegepast aan het begin van elke niet-broncel en bewegen terug naar de inputbron.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Geef het trefwoord <strong>Van bron</strong> of <strong>Naar bron</strong> op dat op alle bronnen zal worden toegepast, of specificeer een veld in het <strong>Bronraster</strong> die de trefwoorden bevat om de reisrichting voor elke bron te identificeren. Dit veld moet de tekst ${FROM_SOURCE} of ${TO_SOURCE} bevatten.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Definieert de relatie tussen de verticale kostenfactor en de verticale relatieve bewegende hoek (VRBH).</p><p>Er zijn een aantal factoren met modifiers die u kunt selecteren die een gedefinieerde verticale factorgrafiek identificeren. Daarnaast kan er een tabel worden gebruikt om een aangepaste grafiek te maken. De grafieken worden gebruikt om de verticale factor te identificeren die gebruikt wordt bij de berekening van de totale kosten om naar een naburige cel te bewegen.</p><p>In de uitleg hieronder worden twee acroniemen gebruikt: VF en VRBH. VF staat voor verticale factor, die de tegengekomen verticale uitdaging definieert bij het bewegen van de ene cel naar de volgende. VRBH staat voor verticale relatieve bewegende hoek, die de hellingshoek definieert tussen de VANDAAN, of verwerkingscel en de NAARTOE-cel.</p><p><strong>Verticale factor</strong>types omvatten het volgende:</p><ul><li><strong>Binair</strong>--Geeft aan dat als de VRBH groter is dan de lage snijhoek en kleiner dan de hoge snijhoek, de VF ingesteld wordt op de waarde die geassocieerd wordt met de nulfactor; anders is deze oneindig.</li><li><strong>Lineair</strong>--Geeft aan dat de VF een lineaire functie is van de VRBH.</li><li><strong>Symmetrisch lineair</strong>--Specificeert dat de VF een lineaire functie is van de VRBH in ofwel de negatieve of positieve kant van de VRBH, respectievelijk, en de twee lineaire functies zijn symmetrisch wat betreft de VF (y)-as.</li><li><strong>Omgekeerd lineair</strong>--Geeft aan dat de VF een omgekeerde lineaire functie is van de VRBH.</li><li><strong>Symmetrisch omgekeerd lineair</strong>--Specificeert dat de VF een omgekeerde lineaire functie is van de VRBH in ofwel de negatieve of positieve kant van de VRBH, respectievelijk, en de twee lineaire functies zijn symmetrisch wat betreft de VF (y)-as.</li><li><strong>Cos</strong>--Identificeert de VF als de cosinusgebaseerde functie van de VRBH.</li><li><strong>Sec</strong>--Identificeert de VF als de snij-gebaseerde functie van de VRBH.</li><li><strong>Cos-Sec</strong>--Specificeert dat de VF de cosinusgebaseerde functie van de VRBH is als de VRBH negatief is, en de snij-gebaseerde functie van de VRBH als de VRBH niet negatief is.</li><li><strong>Sec-Cos</strong>--Specificeert dat de VF de cosinusgebaseerde functie van de VRBH is als de VRBH negatief is, en de snij-gebaseerde functie van de VRBH als de VRBH niet negatief is.</li><li><strong>Tabel</strong>--Identificeert dat een tabelbestand gebruikt wordt om de verticale factorgrafiek te definiëren die gebruikt wordt om de VF's te bepalen.</li></ul><p>Modifiers van de verticale trefwoorden bevatten het volgende:</p><ul><li><strong>Nulfactor</strong>--Stelt vast dat de verticale factor gebruikt wordt als de VRBH nul is. Deze factor positioneert de y-onderschepping van de gespecificeerde functie. De nulfactor is per definitie niet toepasbaar op de trigonometrische verticale functies (COS, SEC, COS-SEC of SEC-COS). De y-onderschepping wordt gedefinieerd door deze functies.</li><li><strong>Lage snijhoek</strong>--Definieert de VRBH-hoek waaronder de VF ingesteld wordt op oneindig.</li><li><strong>Hoge snijhoek</strong>--Definieert de VRBH-hoek waarboven de VF ingesteld wordt op oneindig.</li><li><strong>Helling</strong>--Stelt de helling vast van de rechte lijn die gebruikt wordt met de<strong>Lineaire</strong>en<strong>Omgekeerd lineaire</strong>verticale-factortrefwoorden. De helling is gespecificeerd als een fractie van ‘rise over run’ (bijvoorbeeld, 45 procent helling is 1/45, wat ingevoerd wordt als 0.02222).</li><li><strong>Tabelnaam</strong>--Identificeert de naam van de tabel die de VF definieert.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Definieert de relatie tussen de verticale kostenfactor en de verticale relatieve bewegende hoek (VRBH).",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "De waardes worden gebruikt om de helling te berekenen die gebruikt wordt om de verticale factor die oploopt bij het bewegen van de ene cel naar de andere te identificeren.",
	"@@Plus_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Plus_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Plus_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Plus_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Plus_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Plus_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Plus_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Plus_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Plus_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Plus_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Plus_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Plus_Raster_tag0@@": "De input waarvan aan de waardes toegevoegd zal worden.",
	"@@Plus_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Plus_Raster2_tag0@@": "De input waarvan de waardes zullen worden toegevoegd aan de eerste input.",
	"@@Plus_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Local_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het uitvoerraster. Als alle invoer-celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Local_Cellsize-Type_tag1@@": "Eerste van - Gebruik de eerste celgrootte van de invoerrasters.",
	"@@Local_Cellsize-Type_tag2@@": "Laatste van - Gebruik de laatste celgrootte van de invoerrasters.",
	"@@Local_Cellsize-Type_tag3@@": "Max van - Gebruik de grootste celgrootte van alle invoerrasters. Dit is de standaardinstelling.",
	"@@Local_Cellsize-Type_tag4@@": "Gemiddelde van - Gebruik de gemiddelde celgrootte van alle invoerrasters.",
	"@@Local_Cellsize-Type_tag5@@": "Min bruikbare de kleinste celgrootte van alle invoerrasters.",
	"@@Local_Extent-Type_tag0@@": "Kies welke extent moet worden gebruikt in het uitvoerraster:",
	"@@Local_Extent-Type_tag1@@": "Eerste van - Gebruik de extent van het eerste invoerraster om de verwerkingsextent te bepalen.",
	"@@Local_Extent-Type_tag2@@": "Kruising van - Gebruik de extent van de overlappende pixels om de verwerkingsextent te bepalen. Dit is de standaardinstelling.",
	"@@Local_Extent-Type_tag3@@": "Laatste van - Gebruik de extent van het laatste invoerraster om de verwerkingsextent te bepalen.",
	"@@Local_Extent-Type_tag4@@": "Samenvoeging van - Gebruik de extent van alle rasters om de verwerkingsextent te bepalen.",
	"@@Local_Raster_tag0@@": "De invoer waarvoor aan de waarden zal worden toegevoegd.",
	"@@Local_Raster_tag1@@": "Er kan voor de invoer van deze waarde een constante waarde worden gebruikt, vooropgesteld dat een raster is opgegeven voor de andere parameter.",
	"@@Local_Raster2_tag0@@": "De invoer waarvan de waarden aan de eerste invoer zullen worden toegevoegd.",
	"@@Local_Raster2_tag1@@": "Er kan voor de invoer van deze waarde een constante waarde worden gebruikt, vooropgesteld dat een raster is opgegeven voor de andere parameter.",
	"@@Local_False-Raster_tag0@@": "De invoer waarvan de waarden als uitvoer-pixelwaarden zullen worden gebruikt als de voorwaarde niet waar is. Dit kan een integer, een zwevende punt-raster of een constante waarde zijn.",
	"@@Local_True-Raster_tag0@@": "De invoer waarvan de waarden als uitvoer-pixelwaarden zullen worden gebruikt als de voorwaarde waar is. Dit kan een integer, een zwevende punt-raster of een constante waarde zijn.",
	"@@Power_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Power_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Power_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Power_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Power_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Power_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Power_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Power_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Power_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Power_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Power_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Power_Raster_tag0@@": "De inputwaardes die verheven zullen worden tot de macht die gedefinieerd wordt door <strong>Raster2</strong>.",
	"@@Power_Raster_tag3@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Power_Raster2_tag0@@": "De input die de macht bepaalt waartoe de waarden van <strong>Raster</strong> zullen worden verhoogd.",
	"@@Power_Raster2_tag3@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "Het type kalibratie om te uit te voeren.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Beta-nul--De functie geeft de radar reflectiviteit per eenheidsgebied aan in een zijdelings bereik. Dit is het standaard kalibratietype.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Sigma-nul--De functie geeft de radar reflectiviteit per eenheidsgebied aan in een grondbereik. Resultaten zijn 32-bit kommagetalwaardes, die meestal binnen het bereik van 0.0 tot 1.0 liggen. Er wordt geen data clipping uitgevoerd als deze optie is geselecteerd.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gamma--De functie geeft de radar reflectiviteit per eenheidsgebied aan in het vlak dat haaks staat op de richting van meting.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Geen",
	"@@Radar-Calibration_Raster_tag0@@": "Het inputraster.",
	"@@RasterInfo_Raster-Info_tag0@@": "Selecteer een rasterdataset om te gebruiken als een sjabloon.",
	"@@RasterInfo_Raster_tag0@@": "Het inputraster.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "Een lijst met velden in de tabel <strong>Zonale attributen</strong>, waar elk veld wordt gescheiden door een komma. Waardes in elk veld worden gerepresenteerd door een band in het outputraster.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "De eerste pixelwaarde van de outputbanden in een raster, voordat deze opnieuw wordt ingedeeld.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Als een pixel niet binnen de zone valt, blijft deze als de achtergrondwaarde.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "Het verplichte inputraster.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "De input moet een enkelbandraster zijn. Als een multibandraster gebruikt is, wordt alleen de eerste band gebruikt.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "Een optionele aanvullende query toegepast op de tabel <strong>Zonale attributen</strong>.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "Als u de tabel hierboven als een voorbeeld gebruikte, zou de bevraging ${Variable1 = 'bare earth'} zijn.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "De zone attributen die zijn gespecificeerd als een pad naar de lokale featureklasse, het pad naar een tabel, de URL naar een featureservicelaag, of een JSON reeks.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "In JSON wordt het omschreven als een verzameling van indelingen van zone ID's tot een reeks van hele getallen. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "De veldnaam die de zone Id-waardes bevat.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "Een optionele enkelbandraster waarin elke pixel de zone-ID bevat die wordt geassocieerd met de locatie. De zone-ID wordt gebruikt voor het opzoeken van rijen in de zoneattributen tabel voor zone-specifieke inname.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Laat deze parameter ongespecificeerd als u alleen het attribuut wilt importeren.",
	"@@Rasterize-Features_Field_tag0@@": "Selecteer het veld om te gebruiken om elke feature te identificeren.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Selecteer de featureklasse om naar rasterformaat te converteren.",
	"@@Rasterize-Features_Raster_tag0@@": "Selecteer een raster om de celgrootte en de omvang voor de featureconversie te definiëren.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Bepaal wat er moet gebeuren met features die overlappen:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>Eerst</strong>--De overlappende gebieden krijgen een waarde toegewezen uit de eerste dataset in de lijst.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Laatst</strong>--De overlappende gebieden krijgen een waarde toegewezen uit de laatste dataset in de lijst.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Kleinste</strong>--De overlappende gebieden krijgen een waarde toegewezen uit de kleinste van de features.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Grootste</strong>--De overlappende gebieden krijgen een waarde toegewezen uit de grootste van de features.",
	"@@Recast_Overrides_tag0@@": "Een tabel met variabele namen en waardes gedefinieerd door de gebruiker om een mozaïek dataset aan te passen.",
	"@@Recast_Raster_tag0@@": "Het rasterproduct waarop de Herschikking functie zal worden uitgevoerd.",
	"@@Region-Group_Add-Link_tag0@@": "Specificeert of een linkveld wordt toegevoegd aan de tabel van de output.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Voeg koppeling toe</strong>--Een item ${LINK} item wordt toegevoegd aan de tabel van het outputraster.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>Geen koppeling</strong>--De attribuuttabel voor het outputraster zal alleen de ${Value} en ${Count} items bevatten.",
	"@@Region-Group_Excluded-Value_tag0@@": "Identificeert een waarde op zo'n manier dat als een cellocatie de waarde bevat, er geen ruimtelijke connectiviteit zal worden geëvalueerd, ongeacht de manier waarop het aantal buren is gespecificeerd (VIER of ACHT).",
	"@@Region-Group_Excluded-Value_tag1@@": "Cellen met de uitgesloten waarde worden behandeld als NoData en worden verwijderd uit berekeningen. Cellocaties die de uitgesloten waarde bevatten krijgen 0 op het outputraster.",
	"@@Region-Group_Excluded-Value_tag2@@": "De uitgesloten waarde is vergelijkbaar met het concept van de achtergrondwaarde, of het hebben toegepast van een masker. Een waarde moet gespecificeerd zijn voor deze parameter als de <strong>${CROSS}</strong> parameter is gespecificeerd.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "Het aantal buurcellen om te gebruiken bij de evaluatie van connectiviteit tussen cellen.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>VIER</strong>--Definieert connectiviteit tussen cellen met dezelfde waarde alleen als de cellen zicht direct links, rechts, boven of onder elk van de vier dichtstbijzijnde buren bevinden. Dit is de standaardinstelling.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>ACHT</strong>--Definieert connectiviteit tussen cellen met dezelfde waarde als ze zich binnen de directe buurt van acht cellen van elkaar bevinden. Dit is naar rechts, links, boven of diagonaal van elkaar.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Definieert welke celwaardes moeten worden nagegaan bij het testen voor connectiviteit.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>BINNENIN</strong>--Test connectiviteit tussen inputwaardes die hetzelfde zijn binnen dezelfde zone. Dit is de standaardinstelling.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "De enige cellen die gegroepeerd kunnen worden zijn cellen uit dezelfde zone (waarde) die voldoen aan de ruimtelijke eisen van connectiviteit die gespecificeerd zijn door de <strong>Aantal buren</strong> parameter (in vier richtingen of acht richtingen).",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>KRUIS</strong>--Test connectiviteit met de ruimtelijke eisen die gespecificeerd zijn door de hoeveelheid buren parameter tussen cellen met waardes, behalve voor de waarde die geïdentificeerd is om uitgesloten te zijn door de uitgesloten waarde parameter.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "Als deze optie wordt gebruikt, moet een waarde voor de parameter <strong>Uitgesloten waarde</strong> worden opgegeven.",
	"@@Region-Group_Zone-Raster_tag0@@": "Het vereiste inputraster waarvan de unieke verbonden regio's worden geïdentificeerd.",
	"@@Region-Group_Zone-Raster_tag1@@": "Het moet een geheel getal type zijn.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "Het veld in de attribuuttabel die de vulwaarde definieert voor de groep pixels. In een multiband afbeelding krijgen alle banden deze waarde toegewezen.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "Het veld in de attribuuttabel dat de maximum groeiradius definieert, in de ruimtelijke referentie eenheden van de afbeelding.",
	"@@Region-Grow_Raster_tag0@@": "Het raster waarop u deze functie wilt uitvoeren.",
	"@@Region-Grow_Seed-Points_tag0@@": "Een punt featureklasse die als de eerste seed voor het algoritme fungeert. Elke seed point correspondeert met één invoer in de attribuuttabel, die de maximale groeiradius, vergelijkingsdrempel en vulwaarde informatie bij zich draagt.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "Het veld in de attribuuttabel die de vergelijkingsdrempel definieert, als Euclidische afstand in spectrale ruimte.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Ontbrekende waardes in de herclassificeringstabel kunnen hun waarde behouden of opnieuw ingedeeld worden als NoData.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Niet aangevinkt--Een pixel uit het inputraster dat niet geherclassificeerd wordt in een herindelingstabel behoudt zijn waarde en wordt voor zijn locatie op het outputraster geschreven. Dit is de standaardinstelling.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Aangevinkt--De waarde van een pixel uit het inputraster dat niet geherclassificeerd wordt in een indelingstabel wordt heringedeeld naar NoData voor zijn locatie op het outputraster.",
	"@@Remap_Input-Field_tag0@@": "Kies het veld dat de input pixelwaarde specificeert die opnieuw ingedeeld wordt.",
	"@@Remap_Input-Field_tag1@@": "Als uw tabel een waardebereik heeft, is dit het minimumwaardeveld en moet ook de <strong>Invoer Max Veld</strong> parameter gespecificeerd worden.",
	"@@Remap_Input-Max-Field_tag0@@": "Kies het maximale waardeveld als een waardebereik gespecificeerd wordt in de tabel.",
	"@@Remap_List_tag0@@": "Specificeer de indelingswaardes en specificeer het minimale en maximale waardebereik en de nieuwe indelingswaardes. Het waardebereik kan bovendien ingesteld worden op NoData-pixels.",
	"@@Remap_Output-Field_tag0@@": "Kies het veld dat gebruikt wordt als herindelingswaarde in de output.",
	"@@Remap_Raster_tag0@@": "Het inputraster.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Kies de optie die u wilt gebruiken om de herindelingswaardes in te stellen:",
	"@@Remap_Remap-Definition-Type_tag1@@": "Lijst--Specificeer een reeks pixelwaardes om te herindelen naar een output pixelwaarde",
	"@@Remap_Remap-Table-Type_tag0@@": "Kies het type tabel dat u wilt gebruiken om het inputraster te herindelen:",
	"@@Remap_Remap-Table-Type_tag1@@": "Eenvoudig--Gebruikt de invoer in de </strong>Indelingstabel</strong> om de pixelwaarden <strong>Invoervelden</strong> te herindelen naar de corresponderende waarde in de <strong>Uitvoerveld</strong> parameter. Deze methode slaat de herindelingstabel op in een buffer zodat deze sneller kan presteren.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dynamisch--Deze methode slaat de herindelingstabel niet op in een buffer en maakt een query elke keer dat er een verzoek komt (pan, zoom of verversen). Als de tabel verandert, kan het volgende verzoek de waardes dynamisch naar behoren herindelen.",
	"@@Remap_Remap-Table-Type_tag9@@": "Herschikking--Een specifieke tabel die wordt gebruikt voor het herclassificatieproces, waarbij elke rij in de tabel alleen heringedeeld wordt op basis van elke object-grens.",
	"@@Remap_Remap-Table_tag0@@": "Blader door de tabel die de herindelingswaardes instelt.",
	"@@Reproject_Raster_tag0@@": "De rasterdataset om opnieuw te projecteren of te resamplen.",
	"@@Reproject_Spatial-Reference_tag0@@": "Het coördinaatsysteem dat gebruikt wordt om de data opnieuw te projecteren.",
	"@@Reproject_X-Cellsize_tag0@@": "De x-dimensie waarop de data opnieuw gesampled moeten worden. Dit is optioneel. Als de waarde 0 of minder is, dan wordt het output-omhulsel (omvang en celgroottes) berekend uit het inputraster.",
	"@@Reproject_X-Registration-Point_tag0@@": "De x-coördinaat die gebruikt wordt om de linkerbovenhoek van de dataset te definiëren. Deze coördinaat moet gedefinieerd worden in de eenheden van de nieuwe ruimtelijke referentie. Als zowel de parameters <strong>X celgrootte</strong> als <strong>Y celgrootte</strong> groter dan 0 zijn, worden ze gebruikt samen met de <strong>X Registratiepunt</strong> en <strong>Y Registratiepunt</strong> parameters om het output-omhulsel te definiëren.",
	"@@Reproject_Y-Cellsize_tag0@@": "De y-dimensie waar de data opnieuw naar gesampled moeten worden. Dit is optioneel. Als de waarde 0 of minder is, dan wordt het output-omhulsel (omvang en celgroottes) berekend uit het inputraster.",
	"@@Reproject_Y-Registration-Point_tag0@@": "Het y-coördinaat dat gebruikt wordt om de linkerbovenhoek van de dataset te definiëren. Deze coördinaat moet gedefinieerd worden in de eenheden van de nieuwe ruimtelijke referentie. Als zowel de parameters <strong>X celgrootte</strong> als <strong>Y celgrootte</strong> groter dan 0 zijn, worden ze gebruikt samen met de <strong>X Registratiepunt</strong> en <strong>Y Registratiepunt</strong> parameters om het output-omhulsel te definiëren.",
	"@@Resample_Input-Cellsize_tag0@@": "De pixel celgrootte van het inputraster.",
	"@@Resample_Output-Cellsize_tag0@@": "De pixel celgrootte van het outputraster. De celgrootte kan veranderd worden, maar de omvang van de rasterdataset blijft hetzelfde. Opnieuw samplen van een door de gebruiker gedefinieerde celgrootte kan veel langzamer gaan dan de systeemstandaard, aangezien het opnieuw samplen van de systeemstandaard de minste data van de zo dichtbij mogelijke resolutie verwerkt.",
	"@@Resample_Raster_tag0@@": "Het inputraster om opnieuw te samplen.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>Dichtstbijzijnde buur</strong>--Berekent de output pixelwaarde met de dichtstbijzijnde inputpixel. NoData pixels blijven onveranderd in de outputrasterdataset. Dit is de standaard.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Bilineaire interpolatie</strong>--Berekent de pixelwaarde met de afstand-gewogen waarde van de vier dichtstbijzijnde pixels. Deze methode het meest efficiënt om te verwerken wat betreft rekenkracht.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Kubieke convolutie</strong>--Bepaalt de nieuwe waarde van een pixel op basis van het passen van een gladde curve door de 16 dichtstbijzijnde input pixelcentra.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Meerderheid<strong>--Berekent pixelwaarde met de meerderheid van de pixelwaardes in de 16 dichtstbijzijnde pixels. NoData pixels blijven onveranderd in de outputrasterdataset.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Bilineaire interpolatie Plus</strong>--Gebruikt <strong>Bilineaire interpolatie</strong>, met uitzondering van de pixels langs de randen die gedefinieerd zijn als NoData en niet gekopieerd zijn of in een berekening voorkomen. Gebruik <strong>Bilineaire Interpolatie Plus</strong> voor tiled data omdat de randen dan beter overeenkomen.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Gauss Vervagen</strong>--Past een Gaussiaanse convolutie toe op het bronraster en berekent pixelwaarde met de afstand-gewogen waarde van de vier dichtstbijzijnde pixels uit het vervaagde raster. Het is gepast voor het verwijderen van ruis in de opnieuw gesamplede data en voor down-sampling naar een grote pixelgrootte.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Gauss Vervagen Plus</strong>--Gebruikt dezelfde methode als <strong>Gauss Vervagen</strong>, met uitzondering van de pixels langs de randen die gedefinieerd zijn als NoData en niet gekopieerd zijn of in een berekening voorkomen. Gebruik <strong>Gauss Vervagen Plus</strong> voor tiled data omdat de randen dan beter overeenkomen.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Gemiddeld</strong>--Berekent pixelwaardes met de gemiddelde waarde van alle overlappende pixels, voor elke doelpixel.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Minimum</strong>--Berekent pixelwaarde met de minimale waarde van alle overlappende pixels. NoData pixels blijven onveranderd in de outputrasterdataset.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Maximum</strong>--Als gepast voor continue data, produceert het een gladder output-beeld dan de Nabije Buur Resampling-methode.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Vectorgemiddelde</strong>--Berekent vectorgemiddelde van omvang-richting met alle betrokken pixels. Deze methode is alleen toepasbaar voor twee bandrasters die omvang en richting representeren. Het converteert eerst omvang-richting naar U-V, en neemt vervolgens het rekenkundig gemiddelde van alle betrokken pixels om de U-V van de doelpixel te krijgen en deze terug te converteren naar omvang-richting.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Round-Down_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Round-Down_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Round-Down_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Round-Down_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Round-Down_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Round-Down_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Round-Down_Raster_tag0@@": "De inputwaardes om naar beneden af te ronden.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Round-Up_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Round-Up_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Round-Up_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Round-Up_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Round-Up_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Round-Up_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Round-Up_Raster_tag0@@": "De inputwaardes om naar boven af te ronden.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "De minimale segmentgrootte, gemeten in pixels. Deze waarde is gerelateerd aan de minimale indelingseenheid, en filtert kleinere blokken pixels uit. Alle segmenten die kleiner zijn dan de gespecificeerde waarde voegen de kleinere segmenten samen met hun best passende buursegment.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "Het inputraster om te segmenteren.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "De segmentgrenzen worden als een zwarte contourlijn rond elk segment getrokken. Dit is nuttig omdat u dan naburige segmenten met kleuren die op elkaar lijken van elkaar kunt onderscheiden.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Niet aangevinkt--De segmentgrenzen worden niet weergegeven. Dit is de standaardinstelling.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Aangevinkt--De segmentgrenzen worden met zwarte contourlijnen weergegeven rond elk segment.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "Het relatieve belang van het scheiden van objecten op basis van ruimtelijke eigenschappen.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "Valide geheel getal waardes variëren van 1 tot 20. Kleinere waardes resulteren in brede klassen en meer gladmaking. Een hogere waarde is gepast voor het maken van onderscheid tussen objecten die ruimtelijk klein en samen geclusterd zijn. In een stedelijke scène kunt u bijvoorbeeld algemene ondoordringbare oppervlak-objecten classificeren met een kleinere ruimtelijke detailwaarde, of u kunt gebouwen en wegen classificeren als gescheiden klassen met een hogere ruimtelijke detailwaarde.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "Het relatieve belang van het scheiden van objecten op basis van kleureigenschappen.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "Valide kommagetalwaardes variëren van 1,0 tot 20,0. Kleinere waardes resulteren in brede klassen en meer gladmaking. Een hogere waarde is gepast wanneer u onderscheid wilt maken tussen objecten met spectrale eigenschappen die ietwat op elkaar lijken. Het gebruik van een hogere spectrale detailwaarde in een bosrijke scène zorgt er bijvoorbeeld voor dat u de verschillende boomsoorten beter kunt onderscheiden.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>De maximale grootte van een segment. Segmenten die groter zijn dan de opgegeven grootte worden afgeleid. Gebruik deze parameter om artefacten te voorkomen in de uitvoerlaag afkomstig van grote segmenten. De standaardwaarde is -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Selecteer een van de vier kalibratietypes:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta nul</strong>--Produceert een output met de radarhelderheid-coëfficiënt.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma nul</strong>--de terugverstrooiing die terugkeert naar de antenne vanuit een eenheidsgebied op de grond, gerelateerd aan het grondbereik.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gamma</strong>--meting van uitgezonden en teruggekeerde energie nuttig voor het bepalen van antennepatronen.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>Geen</strong>--pas geen correctie toe. Dit is de standaardinstelling.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "Het Sentinel-1 Niveau-1 GRD of SLC inputraster dat u wilt verwerken.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "De functie gebruikt het LUT-bestand ofwel om de warmtecorrectie toe te passen of om de correctie te verwijderen, afhankelijk van de inhoud van de LUT.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "Het Sentinel-1 inputraster dat u wilt verwerken.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "De functie gebruikt het LUT-bestand ofwel om de warmtecorrectie toe te passen of om de correctie te verwijderen, afhankelijk van de inhoud van de LUT.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Set-Null_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Set-Null_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Set-Null_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Set-Null_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Set-Null_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Set-Null_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Set-Null_False-Raster_tag0@@": "De input waarvan de waardes gebruikt worden als de output pixelwaardes als de conditie onjuist is. Het kan een geheel getal, een kommagetalraster, of een constante waarde zijn.",
	"@@Set-Null_Raster_tag0@@": "Het inputraster dat een Booleaans resultaat representeert van een logische wiskundige rasterfunctie. De waardes zullen ofwel 1 (voor juist) ofwel 0 (voor onjuist) zijn. Het kan een geheel getal of kommagetalraster zijn.",
	"@@Shaded-Relief_Altitude_tag0@@": "Hoogte is de elevatiehoek van de zon boven de horizon en deze ligt tussen de 0 en 90 graden. Een waarde van 0 graden geeft aan dat de zon zich op de horizon bevindt, ofwel op hetzelfde horizontale vlak als het referentiekader. Een waarde van 90 graden geeft aan dat de zon direct bovenaan staat. De standaard is 45 graden boven de horizon.",
	"@@Shaded-Relief_Azimuth_tag0@@": "Azimut is de relatieve positie van de zon langs de horizon (in graden). Deze positie wordt weergegeven door de hoek van de zon met de klok mee gemeten vanaf het noorden. Een azimut van 0 graden wijst naar het noorden, het oosten is 90 graden, het zuiden is 180 graden en het westen is 270 graden.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Specificeer of een kleurverloop of een kleurenkaart gebruikt wordt om het shaduwreliëf weer te geven.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Kleurverloop</strong>--Als u <strong>Kleurverloop</strong> kiest, wordt u gevraagd om het juiste kleurverloop te selecteren.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Kleurenkaart</strong>--Als u <strong>Kleurenkaart</strong> kiest, wordt u gevraagd om het kleurenkaartbestand om te gebruiken te specificeren.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Specificeer of de standaard randpixel-interpolatie wordt uitgeschakeld.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Niet aangevinkt--Bilineaire resampling wordt uniform toegepast om het schaduwreliëf te resamplen. Dit is de standaardinstelling.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Aangevinkt--Bilineaire resampling wordt gebruikt binnen het schaduwreliëf, behalve langs de randen aan de rasters of naast pixels met NoData. Deze pixels worden bevolkt met NoData, aangezien dit scherpe randeffecten die kunnen voorkomen reduceert.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Het gebruik van deze optie vermijdt resampling artefacten die kunnen voorkomen langs de randen van een raster. De output pixels langs de rand van een raster of naast pixels zonder waarde worden bevolkt met NoData; daarom wordt er aangeraden om deze optie alleen te gebruiken als er andere rasters met overlappende pixels beschikbaar zijn. Als overlappende pixels beschikbaar zijn, geven deze gebieden met NoData de overlappende pixelwaardes weer in plaats van blanco te zijn.",
	"@@Shaded-Relief_Raster_tag0@@": "Het input-hoogteraster.",
	"@@Shaded-Relief_Scaling_tag0@@": "Het beschaduwde resultaat is dynamisch geschaald door de z-factor aan te passen met een van de twee opties:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>Geen</strong>--Schaling wordt niet toegepast. Dit is ideaal voor een enkele rasterdataset over een lokaal gebied. Dit wordt niet geadviseerd voor wereldwijde datasets met grote variaties in hoogte of multiscale kaarten, aangezien dit terreinreliëf produceert met weinig variatie op kleine schaal.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Aangepast</strong>--Dit past een niet-lineaire aanpassing toe met de standaard factor <strong>Macht voor pixelgrootte</strong> en <strong>pixelgrootte Factor</strong> waarden, die een grote verscheidenheid aan hoogtewijzigingen (schaal) mogelijk maakt als de viewer in- en uitzoomt. De optie <strong>Aangepast</strong> wordt geadviseerd bij het gebruik van een wereldwijde dataset.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "De z-factor is een schaalfactor die wordt gebruikt om de hoogtewaarden om te zetten voor twee doeleinden:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "Om de hoogte-eenheden (zoals meters of voet) te converteren naar de horizontale coördinaateenheden van de dataset, die voet, meter of graden kan zijn",
	"@@Shaded-Relief_Z-Factor_tag2@@": "Om verticale overdrijving toe te voegen voor visueel effect",
	"@@Shaded-Relief_Z-Factor_tag3@@": "Het beschaduwde resultaat is dynamisch geschaald door de z-factor aan te passen met een van de twee opties:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>Geen</strong>--Schaling wordt niet toegepast. Dit is ideaal voor een enkele rasterdataset over een lokaal gebied. Dit wordt niet geadviseerd voor wereldwijde datasets met grote variaties in hoogte of multiscale kaarten, aangezien dit terreinreliëf produceert met weinig variatie op kleine schaal.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Aangepast</strong>--Dit past een niet-lineaire aanpassing toe met de standaard factor <strong>Macht voor pixelgrootte</strong> en <strong>pixelgrootte Factor</strong> waarden, die een grote verscheidenheid aan hoogtewijzigingen (schaal) mogelijk maakt als de viewer in- en uitzoomt. De optie <strong>Aangepast</strong> wordt geadviseerd bij het gebruik van een wereldwijde dataset.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Bestuurt de lichtbron voor de bergschaduwen.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Traditioneel</strong>--Berekent bergschaduwen vanuit een enkele lichtrichting. U kunt de <strong>Azimuth</strong> en Altitude <strong>instellen</strong> OPTIES om de locatie van de lichtbron te bepalen. Dit is de standaardinstelling.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Multidirectioneel</strong>--Combineert licht vanuit verschillende bronnen om een verbeterde visualisatie van het terrein te representeren.",
	"@@Shaded-Relief_PSPower_tag0@@": "<strong>Pixelgrootte Kracht</strong> houdt rekening met de veranderingen in hoogte (of schaal) wanneer de viewer in- en uitzoomt op de kaartweergave. Het is de exponent die wordt toegepast op de pixelgrootteterm in de vergelijking die de mate beheerst waarmee de <strong>Z-factor</strong> verandert om significant verlies van reliëf te vermijden.",
	"@@Shaded-Relief_PSPower_tag1@@": "Deze parameter is alleen geldig wanneer het type <strong>Schaling</strong> <strong>Aangepast</strong> is. De standaardwaarde is 0,664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "<strong>Factor Pixelgrootte</strong> houdt rekening met veranderingen in schaal als de viewer in- en uitzoomt op de kaartweergave. Het beheerst de mate waarmee de <strong>Z-factor</strong> verandert.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Deze parameter is alleen geldig wanneer het type <strong>Schaling</strong> <strong>Aangepast</strong> is. De standaardwaarde is 0,024.",
	"@@Sin_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Sin_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Sin_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Sin_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Sin_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Sin_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Sin_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Sin_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Sin_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Sin_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Sin_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Sin_Raster_tag0@@": "De input waarvoor de sinuswaardes berekend moeten worden.",
	"@@SinH_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@SinH_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@SinH_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@SinH_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@SinH_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@SinH_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@SinH_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@SinH_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@SinH_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@SinH_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@SinH_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@SinH_Raster_tag0@@": "De input waarvoor de hyperbolische sinuswaardes berekend moeten worden.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "Het invoerraster dat de richting van de flow uit elke cel toont.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "Het stroomrichtingsraster kan gecreëerd worden met de <strong>Stroomrichting</strong> functie.",
	"@@Slope_DEM_tag0@@": "Het input-hoogteraster.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Het gebruik van deze optie vermijdt resampling artefacten die kunnen voorkomen langs de randen van een raster. De output pixels langs de rand van een raster of naast pixels zonder waarde worden bevolkt met NoData; daarom wordt er aangeraden om deze optie alleen te gebruiken als er andere rasters met overlappende pixels beschikbaar zijn. Als overlappende pixels beschikbaar zijn, geven deze gebieden met NoData de overlappende pixelwaardes weer in plaats van blanco te zijn.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Niet aangevinkt--Bilineaire resampling wordt uniform toegepast om de helling te resamplen. Dit is de standaardinstelling.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Aangevinkt--Bilineaire resampling wordt gebruikt binnen de helling, behalve langs de randen van de rasters of naast pixels met NoData. Deze pixels worden bevolkt met NoData, aangezien dit scherpe randeffecten die kunnen voorkomen reduceert.",
	"@@Slope_Scaling_tag0@@": "De hoek van de helling kan uitgevoerd worden als een waarde in graden of als rijzing in procenten. Er zijn drie opties voor de <strong>Schaal</strong>:",
	"@@Slope_Scaling_tag3@@": "<strong>Graad</strong>--De hoek van de helling wordt berekend in graden. De waardes variëren van 0 tot 90.",
	"@@Slope_Scaling_tag5@@": "<strong>Procent_Stijging</strong>--De hoek van de helling wordt berekend als procentwaardes. De waardes variëren van 0 tot oneindig. Een plat oppervlak is heeft een rijzing van 0 procent, maar een oppervlak van 45 graden heeft een rijzing van 100 procent. Naarmate het oppervlak verticaler wordt, wordt de rijzing in procenten steeds groter.",
	"@@Slope_Scaling_tag7@@": "<strong>Schaal</strong>--De hoek van de helling wordt berekend op dezelfde manier als DEGREE, maar de z-factor wordt aangepast naar schaal. Het gebruikt de waarden <strong>Vermogen pixelgrootte</strong> en <strong>Factor pixelgrootte</strong> die de veranderingen in resolutie (schaal) verantwoorden als de viewer in- en uitzoomt. Dit wordt aangeraden bij het gebruik van wereldwijde datasets--vooral bij het gebruik van helling als een oppervlak voor visualisatie.",
	"@@Slope_Scaling_tag13@@": "De z-factor wordt aangepast met de volgende vergelijking:",
	"@@Slope_Scaling_tag14@@": "Aangepaste Z Factor = (Z Factor) + (Pixelgrootte)",
	"@@Slope_Scaling_tag15@@": "× (Factor pixelgrootte)",
	"@@Slope_Scaling_tag16@@": "Vermogen pixelgrootte",
	"@@Slope_Z-Factor_tag0@@": "De <strong>z-factor</strong> is een schaalfactor die wordt gebruikt om de hoogtewaarden om te zetten voor twee doeleinden:",
	"@@Slope_Z-Factor_tag3@@": "Om de hoogte-eenheden (zoals meters of voet) te converteren naar de horizontale coördinaateenheden van de dataset, die voet, meter of graden kan zijn",
	"@@Slope_Z-Factor_tag4@@": "Om verticale overdrijving toe te voegen voor visueel effect",
	"@@Slope_PSPower_tag0@@": "<strong>Pixelgrootte Kracht</strong> houdt rekening met de veranderingen in hoogte (of schaal) wanneer de viewer in- en uitzoomt op de kaartweergave. Het is de exponent die wordt toegepast op de pixelgrootteterm in de vergelijking die de mate beheerst waarmee de <strong>Z-factor</strong> verandert om significant verlies van reliëf te vermijden.",
	"@@Slope_PSPower_tag1@@": "Deze parameter is alleen dan geldig als het type <strong>Schaling</strong> <strong>Geschaald</strong> is. De standaardwaarde is 0,664.",
	"@@Slope_PSZFactor_tag0@@": "<strong>Factor Pixelgrootte</strong> houdt rekening met veranderingen in schaal als de viewer in- en uitzoomt op de kaartweergave. Het beheerst de mate waarmee de <strong>Z-factor</strong> verandert.",
	"@@Slope_PSZFactor_tag1@@": "Deze parameter is alleen dan geldig als het type <strong>Schaling</strong> <strong>Geschaald</strong> is. De standaardwaarde is 0,024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "De input flow accumulatie rasterlaag.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "Dit kan gecreëerd worden met de functie </strong>Stroomaccumulatie<strong>.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "Veld dat gebruikt wordt om waardes toe te wijzen aan de gietpunt locaties.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "De input gietpunt locaties om af te breken.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "Voor een inputrasterlaag worden alle cellen die NoData zijn (oftewel een waarde hebben) beschouwd als gietpunten en worden afgebroken.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "De maximale afstand, in kaarteenheden, om te zoeken naar een cel van een hogere geaccumuleerde flow.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Specificeert de gemiddelde waarde van toegevoegde ruis. Een grotere gemiddelde ruiswaarde maakt minder glad, terwijl een kleinere waarde meer glad maakt.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Deze parameter is alleen geldig als het <strong>Filtertype <strong>Lee Filter</strong> is</strong> en het <strong>Noisemodel Additieve noise</strong> <strong></strong> of Additieve <strong>en Multiplicatieve noise is</strong>. De standaardwaarde is 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Specificeert de omvang van exponentieel dempingseffect op filtering. Een grotere dempingswaarde behoudt de randen beter maar maakt minder glad, terwijl een kleinere waarde meer glad maakt. Een waarde van 0 resulteert in dezelfde output als een laagdoorlaatfilter.",
	"@@Speckle_Damping-Factor_tag1@@": "Deze parameter is alleen valide als het <strong>Filtertype</strong> <strong>Verbeterde Lee Filter</strong> of <strong>Frost-filter</strong> is. De standaardwaarde is 1.",
	"@@Speckle_Filter-Size_tag0@@": "Specificeert de grootte van het pixelvenster dat gebruikt wordt om ruis te filteren:",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "Specificeert het filtertype om te gebruiken in het glad maak-algoritme om spikkelruis te verwijderen:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Lee Filter</strong>--Reduceert de spikkelruis door het toepassen van een ruimtelijk filter op elke pixel in een beeld, wat de data filtert op basis van lokale statistieken die berekend zijn binnen een vierkant venster. Dit filter is nuttig als u spikkeldata dat een toegevoegde of vermenigvuldigende component heeft glad wil maken. Dit is de standaardinstelling.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Verbeterde Lee Filter</strong>--Een aangepaste versie van het Lee filter met <strong>Damping Factor</strong> en <strong>Aantal looks</strong>. Dit filter is nuttig als u spikkel wilt reduceren maar textuurinformatie wilt behouden.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Frost Filter</strong>--Reduceert spikkelruis met een exponentieel gedempt circulair symmetrisch filter dat lokale statistieken gebruikt binnen individuele filtervensters. Dit filter is nuttig als u spikkel wilt reduceren maar randen in radarbeelden wilt behouden.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Kuan Filter</strong>--Vergelijkbaar met het Lee filter past dit filter een ruimtelijk filter toe op elke pixel in een beeld en filtert de data op basis van lokale statistieken die berekend zijn binnen een vierkant venster. Dit filter is nuttig als u spikkel wilt reduceren maar randen in radarbeelden wilt behouden.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Specificeert de gemiddelde waarde van vermenigvuldigende ruis. Een grotere gemiddelde ruiswaarde maakt minder glad, terwijl een kleinere waarde meer glad maakt.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Deze parameter is alleen geldig als het <strong>Filtertype <strong>Lee Filter</strong> is</strong> en het <strong>Noisemodel Additieve noise</strong> <strong></strong> of Additieve <strong>en Multiplicatieve noise is</strong>. De standaardwaarde is 1.",
	"@@Speckle_Noise-Model_tag0@@": "Specificeert het type ruis dat de kwaliteit van het radarbeeld reduceert:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Vermenigvuldigde noise</strong>--Willekeurige signaalruis dat vermenigvuldigd wordt naar het relevante signaal tijdens ontvangen of uitzenden",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Toegevoegde noise</strong>--Willekeurige signaalruis die wordt toegevoegd aan het relevante signaal tijdens ontvangen of uitzenden",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Toegevoegde en vermenigvuldigde noise</strong>--Beide ruismodellen",
	"@@Speckle_Noise-Variance_tag0@@": "Specificeert de ruisvariantie van het radarbeeld.",
	"@@Speckle_Noise-Variance_tag1@@": "Deze parameter is alleen geldig als het <strong>Filtertype <strong>Lee Filter</strong> is</strong> en het <strong>Noisemodel Additieve noise</strong> <strong></strong> of Additieve <strong>en Multiplicatieve noise is</strong>. De standaardwaarde is 0,25.",
	"@@Speckle_Number-of-Looks_tag0@@": "Specificeert het aantal weergaven van het beeld, wat het glad maken van het beeld controleert en ruisvariantie inschat. Een kleinere waarde resulteert in meer glad maken, terwijl een grotere waarde meer beeldobjecten behoudt.",
	"@@Speckle_Number-of-Looks_tag1@@": "Deze parameter is alleen geldig als het <strong>Filtertype <strong>Lee Filter</strong> is</strong> en <strong>het noisemodel</strong> <strong>Vermenigvuldigde noise</strong> of als het <strong>Filtertype <strong>Kuan Filter</strong> is</strong>. De standaardwaarde is 1.",
	"@@Speckle_Raster_tag0@@": "Het inputraster.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "De matrix die is gebruikt om het inputraster te converteren.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "De vergelijking die gebruikt wordt om deze conversie uit te voeren is:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Output Band_R = Gewicht_P * Band_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "waar:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Band_R een outputband is, waarbij R een aantal van 1 tot het aantal van de outputbanden is.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Gewicht_P is een door komma's gescheiden lijst van gewichten, 1 voor elke inputband. De som van de gewichten voor elke band moet gelijk zijn aan 1.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "Band_C is het inputbeeld, waarbij C een aantal is van 1 tot het aantal banden van het inputbeeld.",
	"@@Spectral-Conversion_Raster_tag0@@": "Het inputraster.",
	"@@Spectral-Conversion_Raster_tag1@@": "Dit kan een rasterdataset zijn, een mozaïek dataset of een beeld service.",
	"@@Spectral-Conversion_Size_tag0@@": "Het aantal rijen en kolommen in de <strong>Conversiematrix</strong>.",
	"@@Square_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Square_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Square_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Square_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Square_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Square_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Square_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Square_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Square_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Square_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Square_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Square_Raster_tag0@@": "De inputwaardes om te kwadrateren.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Square-Root_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Square-Root_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Square-Root_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Square-Root_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Square-Root_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Square-Root_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Square-Root_Raster_tag0@@": "De inputwaardes die gebruikt worden om de vierkantswortel te vinden.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Stel de statistische waardes in voor elke band.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "De ${Histogram} kolom is een alleen lezen-veld dat bevolkt kan worden met de parameter <strong>Importeren</strong>. Als u een histogram-bestand importeert, wordt de ${Histogram} kolom gemarkeerd als <strong>Gedefinieerd</strong>.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Importeer de statistische en histogram informatie vanuit een bestaand raster of XML-bestand.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "Het inputraster dat vereist dat de statistieken en histogram ingesteld worden.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Stel de statistische waardes in voor elke band.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "Het invoerraster dat de richting van de flow uit elke cel toont.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "Het stroomrichtingsraster kan gecreëerd worden met de <strong>Stroomrichting</strong> functie.",
	"@@Stream-Link_Stream-Raster_tag0@@": "Het inputraster dat een lineair stroomnetwerk representeert.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "Het invoerraster dat de richting van de flow uit elke cel toont.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "Het stroomrichtingsraster kan gecreëerd worden met de <strong>Stroomrichting</strong> functie.",
	"@@Stream-Order_Order-Method_tag0@@": "De methode die gebruikt wordt voor het toewijzen van de stroomordening.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLER</strong>--De methode van stroomordening die voorgesteld werd door Strahler in 1952. Stroomordening verhoogd alleen maar als stromen van dezelfde orde elkaar kruisen. Het kruispunt van een link tussen een eerste orde en een tweede orde blijft een link van de tweede orde. Er wordt dus geen link van een derde orde gecreëerd. Dit is de standaardinstelling.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong>--De methode van stroomordening op omvang, voorgesteld door Shreve in 1967. Alle links zonder zijrivieren krijgen een omvang (orde) van één toegewezen. Omvangen zijn toegevoegde bergafwaartse hellingen. Als twee links elkaar kruisen, wordt hun omvang bij elkaar opgeteld en toegewezen aan de link met de bergafwaartse helling.",
	"@@Stream-Order_Stream-Raster_tag0@@": "Een input stroomraster dat een lineair stroomnetwerk representeert.",
	"@@Stretch_Auto-Gamma_tag0@@": "Gebruik <strong>Auto Gamma</strong> om gamma te berekenen uit de statistieken en histogram van de dataset. De statistieken kunnen geschatte statistieken zijn bij de functie zelf, of de statistieken kunnen geschat worden door de software als u voor een laag gekozen heeft.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Vink het <strong>Aanpassing van het dynamisch bereik</strong> vakje aan als u de statistieken van alleen de pixels weergegeven op het scherm berekend wilt hebben. Deze optie wordt over het algemeen toegepast als het beeld gepubliceerd wordt en gebruikt in een webapp die dit type stretch niet kan uitvoeren.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Vink het <strong>Statistieken schatten</strong> vakje aan als u de statistieken wilt inschatten. De ingeschatte statistieken worden berekend vanuit een 1000 bij 1000 sampling van het midden van het raster en wordt gebruikt door de stretch.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Als dit is aangevinkt en het raster statistieken heeft, of u hebt waarden ingevoerd in de tabel <strong>Statistieken</strong>, worden ze gebruikt in plaats van te schatten, tenzij de stretch een histogram vereist. Als de stretch een histogram vereist dat niet bestaat, wordt deze geschat.",
	"@@Stretch_Gamma_tag0@@": "Gebruik de schuifbalk om handmatig de waarde <strong>Gamma</strong> in te stellen.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Specificeer de n-waarde voor het aantal standaardafwijkingen om te gebruiken. Deze methode wordt gebruikt om nadruk te leggen op hoeveel de objectwaardes van de gemiddelde waarde kunnen afwijken; het is het beste om deze te gebruiken op normaal gedistribueerde data.",
	"@@Stretch_Output-Maximum_tag0@@": "Stel de hoogste pixelwaarde in voor het histogram.",
	"@@Stretch_Output-Maximum_tag1@@": "De <strong>Minimum uitvoer</strong> en <strong>Maximum uitvoer</strong> stelt het bereik van de waarden in waarop een lineaire contraststretch op wordt uitgevoerd.",
	"@@Stretch_Output-Minimum_tag0@@": "Stel de laagste pixelwaarde in voor het histogram.",
	"@@Stretch_Output-Minimum_tag1@@": "De <strong>Minimum uitvoer</strong> en <strong>Maximum uitvoer</strong> stelt het bereik van de waarden in waarop een lineaire contraststretch op wordt uitgevoerd.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Specificeer het percentage van de hoge waardes om uit te sluiten van de stretch.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "Geldige waarden variëren van 0 tot 99.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Specificeer het percentage van de lage waardes om uit te sluiten van de stretch.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "Geldige waarden variëren van 0 tot 99.",
	"@@Stretch_Raster_tag0@@": "Het inputraster om contraststretch op uit te voeren.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "Het <strong>Sterkteniveau</strong> bepaalt hoeveel van de sigmoidal-functie gebruikt wordt in de stretch. Een lage waarde als 1 gebruikt alleen de middenportie van de curve, wat meestal matte en doffe kleuren produceert. Een hoge waarde als 6 gebruikt de gehele curve, wat meestal felle en heldere kleuren produceert.",
	"@@Stretch_Statistics_tag0@@": "U kunt uw eigen statistieken invoeren in het dialoogvenster. De statistieken worden standaard opgehaald uit de data; waardes die u invoert in deze parameter zullen echter in plaats daarvan gebruikt worden.",
	"@@Stretch_Type_tag0@@": "Kies de methode voor het stretchtype:",
	"@@Stretch_Type_tag1@@": "Geen--Geen contraststretch",
	"@@Stretch_Type_tag2@@": "StdDev--Standaardafwijking stretch",
	"@@Stretch_Type_tag3@@": "MinMax--Minimum-Maximum stretch",
	"@@Stretch_Type_tag4@@": "PercentMinMax--Percentage knipstretch",
	"@@Stretch_Type_tag5@@": "Sigmoid--Sigmoide stretch",
	"@@Stretch_Use-Gamma_tag0@@": "Vink het hokje <strong>Gamma gebruiken</strong> aan als u een gamma stretch wilt toepassen.",
	"@@Swath_Cellsize_tag0@@": "De celgrootte voor het outputraster wordt automatisch gedetecteerd; u kunt dit echter veranderen als u wilt. De celgrootte kan veranderd worden, maar de omvang van de rasterdataset blijft hetzelfde.",
	"@@Swath_Interpolation-Method_tag0@@": "Er zijn vier resampling-methodes voor deze functie:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Dichtstbijzijnde buur</strong>--Berekent pixelwaarde met de dichtstbijzijnde pixel. Als er geen bronpixel bestaat, kan er geen nieuwe pixel gecreëerd worden in de output.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Bilineair</strong>--Berekent pixelwaarde met de afstand-gewogen waarde van de vier dichtstbijzijnde pixels.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>Lineaire verdunning</strong>--Gebruikt een triangulair onregelmatig netwerk van de middelpunten van elke cel in het onregelmatige raster om een oppervlak te interpoleren die vervolgens naar een regelmatig raster geconverteerd wordt.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Natuurlijke buren</strong>--Voert een dichtstbijzijnde buur-taak uit, is de snelste van de interpolatiemethodes. Het wordt voornamelijk gebruikt voor discrete data, zoals een ruimtelijke ordening-classificatie, aangezien het de waardes van de cellen niet verandert. De maximale ruimtelijke fout is de helft van de celgrootte.",
	"@@Swath_Raster_tag0@@": "Het onregelmatige raster om te resamplen.",
	"@@Tan_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Tan_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Tan_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Tan_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Tan_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Tan_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Tan_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Tan_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Tan_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Tan_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Tan_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Tan_Raster_tag0@@": "De input waarvoor de tangenswaardes berekend moeten worden.",
	"@@TanH_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@TanH_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@TanH_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@TanH_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@TanH_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@TanH_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@TanH_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@TanH_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@TanH_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@TanH_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@TanH_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@TanH_Raster_tag0@@": "De input waarvoor de hyperbolische tangenswaardes berekend moeten worden.",
	"@@Tasseled-Cap_Raster_tag0@@": "Het inputraster waarop de Tasseled Cap-transformatie uitgevoerd moet worden.",
	"@@Times_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Times_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Times_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Times_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Times_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Times_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Times_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Times_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Times_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Times_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Times_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Times_Raster_tag0@@": "De input die de waardes bevat die vermenigvuldigd moeten worden.",
	"@@Times_Raster_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Times_Raster2_tag0@@": "De input die de waardes bevat waarmee de eerste input vermenigvuldigd wordt.",
	"@@Times_Raster2_tag1@@": "Een constante waarde kan worden gebruikt als een input voor deze parameter, op voorwaarde dat een raster gespecificeerd is voor de andere parameter.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Kies het type omzetting om uit te voeren of specificeer een aangepaste omzetting:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8 Cirrus",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8 Cloud",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8 Cloud Shadow",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8 Designated Fill",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8 Dropped Frame",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8 Snow/Ice",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8 Terrain Occlusion",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8 Vegetation",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8 Water",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Gebruikergedefinieerd",
	"@@Transpose-Bits_Constant-Value_tag0@@": "Een optionele waarde die wordt gebruikt om alle delen op te vullen die niet betrokken zijn bij de omzetting. Deze parameter wordt getoond als de parameter <strong>Vulraster genereren van constant</strong> is ingesteld op <strong>Ja</strong>.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Specificeer een rasterdataset om te gebruiken om alle delen op te vullen die niet betrokken zijn bij de omzetting. Deze parameter wordt getoond als de  parameter <strong>Vulraster genereren van constant</strong> is ingesteld op <strong>Nee</strong>.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Genereer een vullingsraster met gebruik van een constante waarde:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Ja</strong>--Een raster wordt gegenereerd met gebruik van een constante waarde om de delen op te vullen die niet betrokken zijn bij de omzetting. Dit is de standaardinstelling.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>Nee</strong>--Een raster wordt gegenereerd met gebruik van pixelwaardes uit een bestaande rasterdataset om de delen op te vullen die niet betrokken zijn bij de omzetting.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "Een alleen lezen-tabel die de output delen toont en de input die hun plaats zullen innemen.",
	"@@Transpose-Bits_Raster_tag0@@": "Het inputraster om uit te pakken en te herindelen.",
	"@@Unit-Conversion_From-Unit_tag0@@": "Het originele eenheidstype van de pixels.",
	"@@Unit-Conversion_Raster_tag0@@": "Het inputraster dat de geconverteerde eenheden bevat.",
	"@@Unit-Conversion_To-Unit_tag0@@": "Het geconverteerde eenheidstype van de pixels.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Specificeert hoe het richtingscomponent gemeten is.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Geografisch--0° wijst naar het noorden en 90° wijst naar het oosten",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Rekenkundig--0° wijst naar het oosten en 90° wijst naar het noorden",
	"@@Vector-Field_Input-Data-Type_tag0@@": "Het type vectorveld dat de input representeert.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Onbekend--Het is onbekend of de input U-V of Omvang-Richting representeert.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V--Input data representeert U en V componenten.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Omvang-Richting--Input data representeert omvang en richting.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Specificeert heet type vectorveld dat de output representeert.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Omvang-Richting--Uitvoergegevens representeert omvang en richting.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V--Uitvoergegevens representeert U en V componenten.",
	"@@Vector-Field_Raster1_tag0@@": "Het eerste inputraster.",
	"@@Vector-Field_Raster1_tag1@@": "Dit is ofwel de U-waarde of de omvang.",
	"@@Vector-Field_Raster2_tag0@@": "Het tweede inputraster.",
	"@@Vector-Field_Raster2_tag1@@": "Dit is ofwel de V-waarde of de richting.",
	"@@Viewshed_Analysis-Method_tag0@@": "Kies de methode waarmee de zichtbaarheid berekend wordt. Met deze optie kunt u wat nauwkeurigheid verruilen voor verhoogde performance.",
	"@@Viewshed_Analysis-Method_tag1@@": "Alle Zichtlijnen--Een zichtlijn wordt uitgevoerd op elke pixel in het raster om zichtbare gebieden vast te stellen. Dit is de standaardmethode.",
	"@@Viewshed_Analysis-Method_tag2@@": "Omtrek Zichtlijnen--Zichtlijnen worden alleen uitgevoerd op de pixels langs de omtrek van de zichtbare gebieden om zichtbaarheidsgebieden vast te stellen. Deze methode heeft een betere performance dan de methode <strong>Alle zichtlijnen</strong> aangezien er minder zichtlijnen in de berekening zitten.",
	"@@Viewshed_Analysis-Type_tag0@@": "Kies welk type zichtbaarheidsanalyse u wilt uitvoeren, ofwel om te bepalen hoe zichtbaar elke cel is voor waarnemers, of om voor elke oppervlaklocatie te identificeren welke waarnemers zichtbaar zijn.",
	"@@Viewshed_Analysis-Type_tag1@@": "Frequentie--Het aantal keren dat elke pixellocatie in het input oppervlakraster gezien kan worden door de input observatie locaties (als punten of als hoekpunten voor polylijnwaarnemer-objecten). Dit is de standaardinstelling.",
	"@@Viewshed_Analysis-Type_tag2@@": "Waarnemers--De output identificeert precies welke waarnemerspunten zichtbaar zijn vanaf elke locatie op het rasteroppervlak. Het toegestane maximum aantal inputwaarnemers is 32 met dit analysetype.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Deze waarde definieert de eindhoek van het horizontale scanbereik. De waarde moet gespecificeerd zijn in graden van 0 tot 360,0, waarbij 0 naar het noorden wijst. De standaardwaarde is 360,0.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Het kan een veld zijn in de input <strong>Observeerderobjecten</strong> dataset of een numerieke waarde. Als deze parameter ingesteld is op een waarde, wordt deze waarde toegepast op alle waarnemers. Om verschillende waardes voor elke waarnemer te specificeren, stelt u deze parameter in op een veld in de dataset <strong>Observeerderobjecten</strong>.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Deze waarde definieert de starthoek van het horizontale scanbereik. De waarde moet gespecificeerd zijn in graden van 0 tot 360,0, waarbij 0 naar het noorden wijst. De standaardwaarde is 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Het kan een veld zijn in de input <strong>Observeerderobjecten</strong> dataset of een numerieke waarde. Als deze parameter ingesteld is op een waarde, wordt deze waarde toegepast op alle waarnemers. Om verschillende waardes voor elke waarnemer te specificeren, stelt u deze parameter in op een veld in de dataset <strong>Observeerderobjecten</strong>.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "Type afstand voor de binnenste radiusparameter.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Niet aangevinkt-- <strong>Binnenste straal</strong> wordt geïnterpreteerd als een 2D-afstand. Dit is de standaardinstelling.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Aangevinkt-- <strong>Binnenste straal</strong> wordt geïnterpreteerd als een 3D-afstand.",
	"@@Viewshed_Inner-Radius_tag0@@": "Deze waarde definieert de start (minimum) afstand waarvandaan zichtbaarheid wordt vastgesteld. Pixels die dichterbij zijn dan deze afstand worden beschouwd als niet zichtbaar in de output, maar kunnen nog steeds zichtbaarheid blokkeren van de pixels tussen de <strong>Binnenste straal</strong> en de <strong>Buitenste straal</strong>. De standaardwaarde is 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "Het kan een veld zijn in de input <strong>Observeerderobjecten</strong> dataset of een numerieke waarde. Als deze parameter ingesteld is op een waarde, wordt deze waarde toegepast op alle waarnemers. Om verschillende waardes voor elke waarnemer te specificeren, stelt u deze parameter in op een veld in de dataset <strong>Observeerderobjecten</strong>.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Deze waarde wordt gebruikt om de oppervlakhoogte van de waarnemerspunten of hoekpunten te definiëren.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Het kan een veld zijn in de input <strong>Observeerderobjecten</strong> dataset of een numerieke waarde. Als deze parameter niet gespecificeerd is, wordt de waarnemershoogte verkregen uit het oppervlakraster met bilineaire interpolatie. Als deze parameter ingesteld is op een waarde, dan wordt deze waarde toegepast op alle waarnemers. Om verschillende waardes voor elke waarnemer te specificeren, stelt u deze parameter in op een veld in de dataset <strong>Observeerderobjecten</strong>.",
	"@@Viewshed_Observer-Features_tag0@@": "De vereiste input-objectklasse die de waarnemerslocaties identificeert. Het kunnen punt-, multipunt-, of polylijnobjecten zijn.",
	"@@Viewshed_Observer-Features_tag1@@": "De input-objectklasse is getransformeerd naar een 3D-geocentrisch coördinatensysteem tijdens de zichtbaarheidsberekening. Waarnemers buiten de omvang van het oppervlakraster, of geplaatst op NoData cellen, worden genegeerd in de berekening.",
	"@@Viewshed_Observer-Offset_tag0@@": "Deze waarde wijst op een verticale afstand (in oppervlakeenheden) om toe te voegen aan waarnemerhoogte. Het moet een positief geheel getal of kommagetal-waarde zijn.",
	"@@Viewshed_Observer-Offset_tag1@@": "Het kan een veld zijn in de input <strong>Observeerderobjecten</strong> dataset of een numerieke waarde. Als deze parameter ingesteld is op een waarde, wordt deze waarde toegepast op alle waarnemers. Om verschillende waardes voor elke waarnemer te specificeren, stelt u deze parameter in op een veld in de dataset <strong>Observeerderobjecten</strong>.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Type afstand voor de buitenste radiusparameter.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Niet aangevinkt--<strong>Buitenste straal</strong> wordt geïnterpreteerd als een 2D-afstand. Dit is de standaardinstelling.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Aangevinkt--<strong>Buitenste straal</strong> wordt geïnterpreteerd als een 3D-afstand.",
	"@@Viewshed_Outer-Radius_tag0@@": "Deze waarde definieert de maximale afstand waarvandaan zichtbaarheid wordt vastgesteld. Pixels buiten deze afstand worden uitgesloten van de analyse.",
	"@@Viewshed_Outer-Radius_tag1@@": "Het kan een veld zijn in de input <strong>Observeerderobjecten</strong> dataset of een numerieke waarde. Als deze parameter ingesteld is op een waarde, wordt deze waarde toegepast op alle waarnemers. Om verschillende waardes voor elke waarnemer te specificeren, stelt u deze parameter in op een veld in de dataset <strong>Observeerderobjecten</strong>.",
	"@@Viewshed_Raster_tag0@@": "Het vereiste input-oppervlakraster. Het kan een geheel getal of een kommagetalraster zijn.",
	"@@Viewshed_Raster_tag1@@": "De input is getransformeerd naar een 3D-geocentrisch coördinatensysteem tijdens de zichtbaarheidsberekening. NoData cellen op het inputraster blokkeren de zichtbaarheidsbepaling niet.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Coëfficiënt van de refractie van zichtbaar licht in lucht.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "De standaardwaarde is 0,13.",
	"@@Viewshed_Surface-Offset_tag0@@": "Deze waarde wijst op een verticale afstand (in oppervlakeenheden) om toe te voegen aan de z-waarde van elke doelpixel terwijl deze in overweging wordt genomen voor zichtbaarheid. Het moet een positief geheel getal of kommagetal-waarde zijn.",
	"@@Viewshed_Surface-Offset_tag1@@": "Het kan een veld zijn in de input <strong>Observeerderobjecten</strong> dataset of een numerieke waarde. Als deze parameter ingesteld is op een waarde, wordt deze waarde toegepast op alle waarnemers. Om verschillende waardes voor elke waarnemer te specificeren, stelt u deze parameter in op een veld in de dataset <strong>Observeerderobjecten</strong>.",
	"@@Viewshed_Vertical-Error_tag0@@": "De hoeveelheid onzekerheid, gemeten als ‘Root Mean Square’-fout (RMSE), in de oppervlak hoogtewaardes. Het is een kommagetalwaarde die de verwachte fout van de input hoogtewaardes representeert. Als deze parameter toegewezen is aan een waarde groter dan 0, wordt het output-zichtbaarheidsraster een kommagetal. In dit geval representeert elke pixelwaarde op het output-zichtbaarheidsraster de som van de kansen dat de cel zichtbaar is voor tenminste een van de waarnemers.",
	"@@Viewshed_Vertical-Error_tag1@@": "Als het <strong>Analysetype</strong> <strong>Observeerders</strong> is of de <strong>Analysemethode</strong> <strong>Omtrek zichtlijnen</strong> is, is deze parameter uitgeschakeld.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Deze waarde definieert de lagere verticale hoeklimiet van de scan onder een horizontaal vlak. De waarde moet gespecificeerd zijn in graden van -90,0 tot 0, die een geheel getal of kommagetal kunnen zijn. De standaardwaarde is -90,0.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Het kan een veld zijn in de input <strong>Observeerderobjecten</strong> dataset of een numerieke waarde. Als deze parameter ingesteld is op een waarde, wordt deze waarde toegepast op alle waarnemers. Om verschillende waardes voor elke waarnemer te specificeren, stelt u deze parameter in op een veld in de dataset <strong>Observeerderobjecten</strong>.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Deze waarde definieert de bovenste verticale hoeklimiet van de scan boven een horizontaal vlak. De waarde moet gespecificeerd zijn in graden van 0 tot 90,0, die een geheel getal of een kommagetal kunnen zijn. De standaardwaarde is 90,0.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Het kan een veld zijn in de input <strong>Observeerderobjecten</strong> dataset of een numerieke waarde. Als deze parameter ingesteld is op een waarde, wordt deze waarde toegepast op alle waarnemers. Om verschillende waardes voor elke waarnemer te specificeren, stelt u deze parameter in op een veld in de dataset <strong>Observeerderobjecten</strong>.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "Het invoerraster dat de richting van de flow uit elke cel toont.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "Het stroomrichtingsraster kan gecreëerd worden met de <strong>Stroomrichting</strong> functie.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "De locaties van het ingangsstortpunt",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Dit raster representeert cellen waarboven het gebied dat bijdraagt, of stroomgebied, bepaald wordt. Alle cellen die geen NoData zijn, worden gebruikt als broncellen.",
	"@@Watershed_Pour-Point-Field_tag0@@": "Veld dat gebruikt wordt om waardes toe te wijzen aan de gietpunt locaties.",
	"@@Watershed_Pour-Point-Field_tag1@@": "Voor een raster gietpunt-dataset wordt ${Value} standaard gebruikt.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Weighted-Overlay_Scales_tag0@@": "Het bereik voor de nieuwe waardes waarmee de oude waardes opnieuw worden ingedeeld.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "De gewogen overlay-tabel bestaat uit vier delen:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Laag--Alle inputrasters moeten van het type geheel getal zijn.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Invloed--elk inputraster is gewogen volgens zijn belang, of zijn invloed, als een relatief percentage. De som van de percentage invloedgewichten moet gelijk zijn aan 100, en elk gewicht moet gespecificeerd zijn door geheel getal waardes.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Veld--Een geheel getal of tekstveld op het inputraster om te gebruiken voor weging.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Herindelingstabel--Elke waarde in het inputraster krijgt een nieuwe schaalwaarde toegewezen op basis van de herindelingstabel. De schaalwaarde kan een valide waarde of een NoData waarde zijn.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Kies welke celgrootte u wilt gebruiken in het outputraster. Als alle input celgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de inputrasters.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Laatste van--Gebruik de laatste celgrootte van de inputrasters.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Max van--Gebruik de grootste celgrootte van alle inputrasters. Dit is de standaardinstelling.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Kies welke omvang gebruikt moet worden in het outputraster:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "Eerste van--Gebruik de omvang van het eerste inputraster om de verwerkingsomvang te bepalen.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "De gewogen somtabel wordt gedefinieerd door drie eigenschappen:",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Laag--Het raster dat gewogen wordt.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Veld--Het veld of het raster om te gebruiken voor wegen.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Gewicht--De gewichtswaarde waarmee het raster vermenigvuldigd wordt. Het kan elke positieve of negatieve decimale waarde zijn.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "Een enkele band-raster waarin pixelwaardes omgevingstemperatuur representeren.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "De meeteenheid die geassocieerd wordt met het input temperatuurraster. Beschikbare inputeenheden zijn Celsius, Fahrenheit en Kelvin.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "De meeteenheid die geassocieerd wordt met het outputraster. Beschikbare outputeenheden zijn Celsius, Fahrenheit en Kelvin.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "Een enkele band-raster waarbij pixelwaardes windsnelheid representeren.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Definieert de meeteenheid voor het windsnelheidsraster:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Mijl per uur (mpu)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Kilometer per uur (km/u)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Meter per seconde (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Voet per seconde (ft/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Knopen (kn)",
	"@@Zonal-Remap_Background-Value_tag0@@": "De oorspronkelijke pixelwaarde van het outputraster, voordat de inputpixels opnieuw worden ingedeeld.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "De waarde die wordt toegewezen aan een pixel die voldoet aan geen van de condities die zijn ingesteld in de <strong>Zonale attribuuttabel</strong>.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "Dit wordt ook de waarde van de output pixel als de <strong>Uitvoerwaarde van veldnaam</strong> parameter ongespecificeerd is of de outputwaarde van de corresponderende zonedrempel niet gespecificeerd is in de <strong>Zonale attribuuttabel</strong>.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "De veldnaam die de maximumwaarde bevat waar onder een input-pixel opnieuw wordt ingedeeld.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Als dit niet gespecificeerd is, of als de veldwaarde nul is, worden pixelwaardes niet getest voor maximum.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "De veldnaam die de minimumwaarde bevat waarboven een input-pixel opnieuw wordt ingedeeld.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Als dit niet gespecificeerd is, of als de veldwaarde nul is, worden pixelwaardes niet getest voor minimum.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "De veldnaam die de doelwaarde bevat waarbij een input-pixel opnieuw wordt ingedeeld.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Als dit niet gespecificeerd is, of als de veldwaarde nul is, worden opnieuw ingedeelde pixelwaardes ingesteld op <strong>Standaarduitvoerwaarde</strong>.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "Een vereiste enkele band-raster input die de pixelwaardes bevat die heringedeeld moeten worden.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "Een optionele query toegepast op de <strong>Zonale attribuuttabel</strong>.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "Als u de tabel hierboven als voorbeeld gebruikte, zou de query ${Variable1 = 'bare earth' AND Variable2 = 'California'} zijn.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "Een vereiste inputtabel die tenminste drie velden bevat. Het moet een minimale drempelwaarde, maximale drempelwaarde en doelwaarde hebben. De doelwaarde is het veld dat de opnieuw ingedeelde waarde bevat.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "Het formaat van het bestand kan een feature class, feature service of elk tabeltype zijn dat ArcGIS ondersteunt.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "De veldnaam in de <strong>Zonale attribuuttabel</strong> die de zone ID-waardes bevat.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "De zone ID-waardes zijn direct verbonden met de zone ID's in het zoneraster. Zij zorgen voor een ander niveau van filtering bij het herindelen. Als er geen zone ID geassocieerd wordt met een bepaalde vermelding in de tabel, doet deze niet mee aan de herindeling.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "Een enkele band-raster waarbij elke pixel zones definieert die geassocieerd worden met een bepaalde locatie. Een zone is gedefinieerd als alle gebieden in de invoer die dezelfde waarde hebben. De gebieden hoeven niet aaneengesloten te zijn.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Specificeert de methode die wordt gebruikt om voorspellingsdimensiewaarden te bieden.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>Op waarde</strong>--De voorspelling wordt berekend voor een enkele afmetingswaarde . U wilt bijvoorbeeld jaarlijkse neerslag voorspellen voor de jaren 2050, 2100 en 2150. Dit is de standaardinstelling.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>Op interval</strong>--De voorspelling wordt berekend voor een interval van de afmeting gedefinieerd door een start- en een eindwaarde. Bijvoorbeeld, u wilt jaarlijkse neerslag voorspellen voor elk jaar tussen 2050 en 2150.",
	"@@Predict-Using-Trend_end_tag0@@": "De einddatum, hoogte of diepte van het dimensie-interval dat in de voorspelling moet worden gebruikt.",
	"@@Predict-Using-Trend_end_tag1@@": "Deze parameter is vereist als de parameter <strong>Dimensiedefinitie</strong> is ingesteld <strong>Op interval</strong>.",
	"@@Predict-Using-Trend_raster_tag0@@": "Het input multidimensionale trendraster van de functie <strong>Trend genereren</strong>.",
	"@@Predict-Using-Trend_start_tag0@@": "De startdatum, hoogte of diepte van het dimensie-interval om te gebruiken in de voorspelling.",
	"@@Predict-Using-Trend_start_tag1@@": "Deze parameter is vereist als de parameter <strong>Dimensiedefinitie</strong> is ingesteld <strong>Op interval</strong>.",
	"@@Predict-Using-Trend_unit_tag0@@": "De eenheid die wordt gebruikt voor de waarde-interval. Deze parameter is alleen van toepassing als de dimensie van de analyse een tijdsafmeting is.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Uren</strong>--De voorspelling wordt berekend voor elk uur binnen het tijdsbestek beschreven door de parameters <strong>Start</strong>, <strong>Einde</strong> en <strong>Waarde-interval</strong>.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Dagen</strong>--De voorspelling wordt berekend voor elke dag binnen het tijdsbestek dat wordt beschreven door de parameters <strong>Start</strong>, <strong>Einde</strong> en <strong>Waarde-interval</strong>.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Weken</strong>--De voorspelling wordt voor elke week berekend binnen het tijdsbestek dat wordt beschreven door de parameters <strong>Start</strong>, <strong>Einde</strong> en <strong>Waarde-interval</strong>.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Maanden</strong>--De voorspelling wordt berekend voor elke maand binnen het tijdsbestek beschreven door de parameters <strong>Start</strong>, <strong>Einde</strong> en <strong>Waarde-interval</strong>.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Jaren</strong>--De voorspelling wordt berekend voor elk jaar binnen het tijdsbestek dat wordt beschreven door de parameters <strong>Start</strong>, <strong>Einde</strong> en <strong>Waarde-interval</strong>.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "Het aantal stappen tussen twee afmetingswaarden die in de voorspelling moeten worden opgenomen. De standaardwaarde is 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Deze parameter is vereist als de parameter <strong>Dimensiedefinitie</strong> is ingesteld <strong>Op interval</strong>.",
	"@@Predict-Using-Trend_values_tag0@@": "De afmetingswaarde of waarden om te gebruiken in de voorspelling.",
	"@@Predict-Using-Trend_values_tag1@@": "Het formaat van de tijd-, diepte- en hoogtewaarden moet overeenkomen met het formaat van de afmetingswaarden die worden gebruikt om het trendraster te genereren. Als het trendraster is gegenereerd voor de StdTime-afmeting, moet het formaat JJJJ-MM-ddThh:MM:SS zijn, bijvoorbeeld, 2050-01-01T00:00:00. Meerdere waarden worden gescheiden door een puntkomma.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Geef de rasterfunctietemplate op die wordt gebruikt om meerdere stukken te aggregeren in minder stukken of een enkel deel.",
	"@@Process-Raster-Collection_dimension_tag0@@": "De aggregatie-afmeting. Dit is de afmeting waarmee de variabelen worden geaggregeerd.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Geef de rasterfunctietemplate op die wordt gebruikt om elke doorsnede of elk item in de inputrastercollectie te verwerken.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Specificeert de trefwoordinterval die wordt gebruikt tijdens het aggregeren over de afmeting. Deze invoer is vereist wanneer <strong>Type</strong> is ingesteld op <strong>Interval trefwoord</strong> en de aggregatie moet over een tijdsperiode zijn.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>Uur</strong>-- De gegevenswaarden worden geaggregeerd in tijdsstappen per uur en het resultaat bevat elk uur in de tijdsreeks.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Dagelijks</strong>-- De gegevenswaarden worden geaggregeerd in dagelijkse tijdsstappen en het resultaat bevat elke dag in de tijdsreeks.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Week</strong>-- De gegevenswaarden worden geaggregeerd in wekelijkse tijdsstappen en het resultaat bevat elke week in de tijdsreeks.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>Dekadly</strong>--De gegevenswaarden worden geaggregeerd in 3 perioden van elk 10 dagen. De laatste periode bevat mogelijk meer of minder dan 10 dagen. De uitvoer bevat 3 stukken voor elke maand.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>Pentadly</strong>--De gegevenswaarden worden geaggregeerd in 6 perioden van elk 5 dagen. De laatste periode bevat mogelijk meer of minder dan 5 dagen. De uitvoer bevat 6 stukken voor elke maand.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Maandelijks</strong>-- De gegevenswaarden worden geaggregeerd in maandelijkse tijdsstappen en het resultaat bevat elke maand in de tijdsreeks.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Kwartaal</strong>-- De gegevenswaarden worden geaggregeerd in tijdsstappen per kwartaal en het resultaat bevat elk kwartaal in de tijdsreeks.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Jaar</strong>-- De gegevenswaarden worden geaggregeerd in jaarlijkse tijdsstappen en het resultaat bevat elk jaar in de tijdsreeks.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Dagelijks terugkerend</strong>-- De gegevenswaarden worden geaggregeerd in dagelijkse tijdsstappen en het resultaat bevat een geaggregeerde waarde per Juliaanse dag. De uitvoer bevat hooguit 366 dagelijkse tijdsstukken.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Wekelijks terugkerend</strong>--De gegevenswaarden worden geaggregeerd in wekelijkse tijdsstappen en het resultaat bevat een geaggregeerde waarde per week. De uitvoer bevat hooguit 53 wekelijkse tijdsstukken.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Maandelijks terugkerend</strong>--De gegevenswaarden worden geaggregeerd in wekelijkse tijdsstappen en het resultaat bevat een geaggregeerde waarde per maand. De uitvoer bevat hooguit 12 maandelijkse tijdsstukken.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Driemaandelijks terugkerend</strong>--De gegevenswaarden worden geaggregeerd in wekelijkse tijdsstappen en het resultaat bevat een geaggregeerde waarde per kwartaal. De uitvoer bevat hooguit 4 tijdsstukken van een kwartaal.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "De maximumwaarde voor een bereik.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Deze parameter is vereist als de parameter <strong>Type</strong> is ingesteld op <strong>Intervalbereiken</strong>.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "De minimumwaarde voor een bereik.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Deze parameter is vereist als de parameter <strong>Type</strong> is ingesteld op <strong>Intervalbereiken</strong>.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Specificeer de rasterfunctietemplate gebruikte om de verwerkte rasterlaag weer te geven.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "De ingevoerde multidimensionale raster, mozaïeklaag of mozaïekdataset.",
	"@@Process-Raster-Collection_type_tag0@@": "Specificeert de afmetingsinterval waarvoor de gegevens worden geaggregeerd.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>Alle</strong>--De gegevenswaarden worden geaggregeerd over alle stukken. Dit is de standaardinstelling.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Intervaltrefwoord</strong>--De variabele gegevens worden geaggregeerd met behulp van een bekende interval.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Intervalbereiken</strong>--De variabele gegevens worden geaggregeerd tussen gespecificeerde paren van waarden of data.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Intervalwaarden</strong>--De variabele gegevens worden geaggregeerd met behulp van een gebruikers-gespecificeerde interval en eenheid.",
	"@@Process-Raster-Collection_unit_tag0@@": "De eenheid die wordt gebruikt voor de intervalwaarde. Deze parameter is vereist als de <strong>Afmeting</strong> een tijdveld is en de parameter <strong>Type</strong> is ingesteld op <strong>Intervalwaarde</strong>.",
	"@@Process-Raster-Collection_unit_tag1@@": "Als u over iets anders dan tijd aggregeert, is deze optie niet beschikbaar en de eenheid voor de intervalwaarde komt overeen met de variabele eenheid van de ingevoerde multidimensionale rastergegevens.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Uur</strong>--De gegevenswaarden worden geaggregeerd in tijdsperioden van uren op de geboden interval.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Dagen</strong>--De gegevenswaarden worden geaggregeerd in tijdsperioden van dagen op de geboden interval.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Weken</strong>--De gegevenswaarden worden geaggregeerd in tijdsperioden van weken op de geboden interval.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Maanden</strong>--De gegevenswaarden worden geaggregeerd in tijdsperioden van maanden op de geboden interval.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Jaren</strong>--De gegevenswaarden worden geaggregeerd in tijdsperioden van jaren op de geboden interval.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "De grootte van het interval dat wordt gebruikt voor de aggregatie. Deze parameter is vereist als de parameter <strong>Type</strong> is ingesteld op <strong>Intervalwaarde</strong>.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "Om bijvoorbeeld 30 jaar aan maandelijkse temperatuurgegevens in toenames van 5 jaar te aggregeren, voert u 5 in als de <strong>Waarde-interval</strong> en specificeert u de <strong>Eenheid</strong> als <strong>Jaren</strong>.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Specificeert de opties om de uitvoerpixelwaarden te definiëren.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Aangevinkt--Er zijn geen negatieve uitvoerwaarden.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Niet aangevinkt--Er kunnen negatieve waarden zijn van gedeeltelijke landbedekking.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "Het inputraster.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "Het invoer spectrale profielbestand.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "De spectrale informatie voor de verschillende landbedekkingsklassen.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Spectraal profiel</strong>--Een classificatiedefinitiebestand (${.ecd}), gegenereerd uit de tool <strong><strong>Train Maximum Likelihood Classifier</strong></strong> of een JavaScript Object Notation-bestand (${.json}) die de klasse spectrale profielen bevat.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Trainingsobject</strong>--Polygone objecten of een trainingsvoorbeeldobjectklasse, gegenereerd vanuit <strong>Trainingsvoorbeeldbeheer</strong>.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Specificeert de opties om de uitvoerpixelwaarden te definiëren.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Aangevinkt--Klassewaarden voor elke pixel worden opgegeven in decimale indeling met de som van alle klassen gelijk aan 1. Bijvoorbeeld klasse1 = 0.16; klasse2 = 0.24; klasse3 = 0.60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Niet aangevinkt--De som van alle klassen in een pixel mag groter zijn dan 1.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "Het invoertrainingobjectbestand",
	"@@Aggregate_aggregationtechnique_tag0@@": "De methode die wordt gebruikt voor aggregatie. De waarden van de invoercellen die door de grovere uitvoercellen zijn opgenomen, worden geaggregeerd door een van de volgende statistieken:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Som</strong>--Het totaal van de invoercellen. Dit is de standaardinstelling.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Maximum</strong>--De grootste waarde van de invoercellen.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Gemiddelde</strong>--De gemiddelde waarde van de invoercellen.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Mediaan</strong>--De mediaanwaarde van de invoercellen.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Minimum</strong>--De kleinste waarde van de invoercellen.",
	"@@Aggregate_cellfactor_tag0@@": "De factor waarmee de celgrootte van het inputraster vermenigvuldigd moet worden.",
	"@@Aggregate_cellfactor_tag1@@": "Bijvoorbeeld, een celfactorwaarde van drie zou resulteren in een uitvoercelgrootte drie keer groter dan die van het invoerraster.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Definieert hoe u de grenzen van het invoerraster moet behandelen als de rijen of kolommen geen veelvoud van de celfactor zijn.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Aangevinkt--Ontvouwt de boven- of rechtergrenzen van het invoerraster zodat het totale aantal cellen in een rij of kolom een veelvoud van de celfactor is. Met deze optie kan het uitvoerraster een grotere ruimtelijke extent dekken dan het invoerraster. Dit is de standaardinstelling.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Niet aangevinkt--Reduceert het aantal rijen of kolommen in het uitvoerraster. Deze splitst de resterende cellen aan de boven- of rechterkant van het invoerraster, waardoor het aantal rijen of kolommen in het invoerraster een veelvoud van de celfactor wordt. Met deze optie kan het uitvoerraster een kleinere ruimtelijke extent dekken dan het invoerraster.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Geeft aan of ${NoData} waardes genegeerd worden door de aggregatieberekening.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Aangevinkt--Specificeert dat als ${NoData} waarden bestaan voor een van de cellen die binnen de ruimtelijke extent van een grotere cel op het uitvoerraster vallen, de ${NoData} waarden genegeerd worden bij het bepalen van de waarde voor uitvoercellocaties. Alleen invoercellen in de extent van de uitvoercel die datawaardes hebben, worden gebruikt bij het bepalen van de waarde van de uitvoercel. Dit is de standaardinstelling.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Niet aangevinkt--Specificeert dat als een cel die binnen de ruimtelijke extent van een grotere cel op het uitvoerraster valt, een waarde heeft van ${NoData}, de waarde voor die uitvoercellocatie ${NoData} zal zijn. Als deze optie wordt gebruikt, wordt geïmpliceerd dat wanneer cellen binnen een aggregatie de ${NoData} waarde bevatten, er onvoldoende informatie is om de gespecificeerde berekeningen uit te voeren die nodig zijn om een uitvoerwaarde te bepalen.",
	"@@Aggregate_raster_tag0@@": "Het invoerraster om te aggregeren.",
	"@@Expand_numberofcells_tag0@@": "Het aantal cellen om mee uit te breiden.",
	"@@Expand_numberofcells_tag1@@": "De waarde moet integer zijn en kan 1 of groter zijn.",
	"@@Expand_raster_tag0@@": "Het invoerraster waarvoor de geïdentificeerde zones moeten worden uitgebreid.",
	"@@Expand_raster_tag1@@": "Het moet een geheel getal type zijn.",
	"@@Expand_zonevalues_tag0@@": "De lijst met uit te breiden zones.",
	"@@Expand_zonevalues_tag1@@": "De zonewaarden moeten integer zijn en ze kunnen in elke volgorde zijn.",
	"@@Expand_zonevalues_tag2@@": "Om meerdere zones op te geven, gebruikt u een spatie om de zonewaarden te scheiden.",
	"@@Multidimensional-Filter_dimension_tag0@@": "De afmeting om variabelen uit te extraheren.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Specificeert de methode die wordt gebruikt om de afmeting te splitsen.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>Alle</strong>--Het volledige bereik voor elke afmeting wordt gebruikt. Dit is de standaardinstelling.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>Op waarden</strong>--De afmeting wordt gesplitst met behulp van een afmetingswaarde of lijst met waarden.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>Op bereik</strong>--De afmeting wordt gesplitst met behulp van een bereik of een lijst met reeksen.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>Op iteratie</strong>--De afmeting wordt verdeeld over een opgegeven intervalgrootte.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "Het einde van de eerste interval. Dit interval wordt gebruikt om te itereren door de dataset.Deze parameter is vereist als de <strong>Dimensiedefinitie</strong> parameter is ingesteld op <strong>Op iteratie</strong>.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "De maximumwaarde voor het bereik. Deze parameter is vereist als de parameter <strong>Dimensiedefinitie</strong> is ingesteld <strong>Op bereik</strong>.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "De minimumwaarde voor het bereik. Deze parameter is vereist als de parameter <strong>Dimensiedefinitie</strong> is ingesteld <strong>Op bereik</strong>.",
	"@@Multidimensional-Filter_raster_tag0@@": "De ingevoerde multidimensionale raster.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>Intervalbereiken die in een tabel worden gespecificeerd worden gebruikt om groepen van waarden te aggregeren. De minimale en maximale waarden bepalen het bereik dat wordt inbegrepen.</p><p>Deze parameter is vereist wanneer de <strong>Type</strong>-parameter is ingesteld op <strong>Intervalbereiken</strong>.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "Het begin van de eerste interval. Dit interval wordt gebruikt om te itereren door de dataset.Deze parameter is vereist als de <strong>Dimensiedefinitie</strong> parameter is ingesteld op <strong>Op iteratie</strong>.",
	"@@Multidimensional-Filter_step_tag0@@": "De frequentie waarmee de gegevens worden gesplitst.Deze parameter is vereist als de <strong>Dimensiedefinitie</strong> parameter is ingesteld op <strong>Op iteratie</strong>. De standaard is 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Specificeert de iteratie-eenheid. Deze parameter is vereist als de parameter <strong>Dimensiedefinitie</strong> is ingesteld op <strong>Op iteratie</strong> en de parameter <strong>Dimensie</strong> is ingesteld op <strong>StdTijd</strong>.",
	"@@Multidimensional-Filter_value_tag0@@": "De waarde voor de gespecificeerde dimensie. Deze parameter is vereist als de parameter <strong>Dimensiedefinitie</strong> is ingesteld <strong>Op waarden</strong>.",
	"@@Multidimensional-Filter_variables_tag0@@": "De variabelen die zullen worden opgenomen in de uitvoer multidimensionale rasterlaag. Als er geen variabele gespecificeerd is, wordt de eerste variabele gebruikt.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Geeft aan of de laag dimensiewaarden moet hebben. Deze optie is alleen beschikbaar als een enkele plak is geselecteerd om een laag te maken.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Aangevinkt--De laag zal geen dimensiewaarden hebben.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Niet aangevinkt--De laag zal een dimensiewaarde hebben. Dit is de standaardinstelling.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "De celgrootte van het geinterpoleerde raster. De standaardwaarde is ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "De resampling-methode die wordt gebruikt om onregelmatige gegevens te interpoleren.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>Dichtstbijzijnde buur</strong>--Berekent de output pixelwaarde met de dichtstbijzijnde inputpixel. Als er geen bronpixel bestaat, kan er geen nieuwe pixel gecreëerd worden in de output. Dit is de standaardinstelling.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>Lineaire verdunning</strong>--Gebruikt een triangulair onregelmatig netwerk van de middelpunten van elke cel in het onregelmatige raster om een oppervlak te interpoleren die vervolgens naar een regelmatig raster geconverteerd wordt.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Natuurlijke buren</strong>--Zoekt de dichtstbijzijnde subgroep van input samples tot een querypunt en past gewichten op ze toe gebaseerd op proportionele gebieden om een waarde te interpoleren.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Omgekeerde afstand gewogen</strong>--Bepaalt de pixelwaardes met een lineair gewogen combinatie van een stel sample punten of pixels. Het gewicht is een functie van de omgekeerde afstand van de bekende punten of pixels.",
	"@@Multidimensional-Raster_raster_tag0@@": "De ingevoerde multidimensionale raster.",
	"@@Multidimensional-Raster_variables_tag0@@": "De variabele of variabelen om op te nemen in de multidimensionale rasterlaag.",
	"@@Random_distribution_tag0@@": "Geef de methode voor de willekeurige verdeling van de waarde op om te gebruiken.",
	"@@Random_distribution_tag1@@": "<strong>Uniform</strong> (Minimum, Maximum)--Een uniforme verdeling met een gedefinieerd bereik. De standaardwaarden zijn 0 voor Minimum en 1 voor Maximum. Dit is de standaardinstelling.",
	"@@Random_distribution_tag2@@": "<strong>Integer</strong> (Minimum, Maximum)--Een integere distributie met een gedefinieerd bereik. De standaardwaarden zijn 1 voor Minimum en 10 voor Maximum.",
	"@@Random_distribution_tag3@@": "<strong>Normaal</strong> (Gemiddelde, Standaardafwijking)--Een normale verdeling met een gedefinieerd gemiddelde en standaardafwijking. De standaardwaarden zijn 0 voor Gemiddelde en 1 voor Standaardafwijking.",
	"@@Random_distribution_tag4@@": "<strong>Exponentiële</strong> (Gemiddelde)--Een exponentiële verdeling met een gedefinieerd gemiddelde. De standaardwaarde is 1.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (Gemiddelde)--A Poisson distributie met een gedefinieerd gemiddelde. De standaardwaarde is 1.",
	"@@Random_distribution_tag6@@": "<strong>Gamma</strong> (Alfa, Beta)--Een gammadistributie met een gedefinieerde alfa en bèta. De standaardwaarden zijn 1 voor Alfa en 1 voor Beta.",
	"@@Random_distribution_tag7@@": "<strong>Binomiale</strong> (N, Kans)--Een binomiale verdeling met een gedefinieerde N en kans. De standaardwaarden zijn 10 voor N en 0.5 voor kans.",
	"@@Random_distribution_tag8@@": "<strong>Geometrisch</strong> (Kans)--Een geometrische verdeling met een bepaalde kans. De standaardwaarde is 0.5.",
	"@@Random_distribution_tag9@@": "<strong>Negatieve Binomiale</strong> (r, kans)--A Pascale verdeling met een gedefinieerde r en kans. De standaardwaarden zijn 10.0 voor r en 0.5 voor kans.",
	"@@Random_randomnumbergenerator_tag0@@": "Specificeer het willekeurige generatoralgoritme dat het begin en de distributie gebruikt om een reeks willekeurige nummers te produceren. De beschikbare opties zijn als volgt:",
	"@@Random_randomnumbergenerator_tag1@@": "Standaard C Rand",
	"@@Random_randomnumbergenerator_tag2@@": "ACM verzameld algoritme 599",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "De standaardwaarde is Mersenne Twister.",
	"@@Random_rasterinfo_tag0@@": "Gebruik de knop <strong>Templateraster laden</strong> om een template van een directory of portaal te laden.",
	"@@Random_seed_tag0@@": "Het begin is een integere waarde en wordt gebruikt om de willekeurige getalgenerator te initiëren. De standaardwaarde is 1.",
	"@@Shrink_numberofcells_tag0@@": "Het aantal cellen waarmee elke gespecificeerde zone moet krimpen.",
	"@@Shrink_numberofcells_tag1@@": "De waarde moet integer zijn en kan 1 of groter zijn.",
	"@@Shrink_raster_tag0@@": "Het invoerraster waarvoor de geïdentificeerde zones moeten worden ingekrompen.",
	"@@Shrink_raster_tag1@@": "Het moet een geheel getal type zijn.",
	"@@Shrink_zonevalues_tag0@@": "De lijst met te krimpen zones.",
	"@@Shrink_zonevalues_tag1@@": "De zonewaarden moeten integer zijn en ze kunnen in elke volgorde zijn.",
	"@@Shrink_zonevalues_tag2@@": "Om meerdere zones op te geven, gebruikt u een spatie om de zonewaarden te scheiden.",
	"@@Distance-Accumulation_costraster_tag0@@": "Een raster dat de kosten of de impedantie definieert om planimetrisch door elke cel te bewegen. De waarde op elke cellocatie vertegenwoordigt de kosten per eenheid afstand voor het erdoorheen bewegen. Elke cellocatiewaarde wordt vermenigvuldigd met de celresolutie, en compenseert ook de diagonale beweging om de totale kosten van het passeren door de cel te verkrijgen.",
	"@@Distance-Accumulation_costraster_tag1@@": "De waarden van het <strong>Kostenraster</strong> kunnen integer of float zijn, maar ze kunnen niet negatief of nul zijn.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Bepaalt of de afstand wordt berekend met behulp van een vlakke (vlakke aarde) of een geodetische (ellipsvormige) methode.",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Vlakte--Vlaktemetingen maken gebruik van 2D Cartesiaanse wiskunde om lengte en gebied te berekenen. De optie is alleen beschikbaar bij het meten in een geprojecteerd coördinaatsysteem en het 2D-vlak van dat coördinaatsysteem wordt gebruikt als de basis voor de metingen.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Geodetisch--De kortste lijn tussen twee punten op het aardoppervlak op een sferoïde (ellipsoïde). Daarom veranderen de resultaten niet, ongeacht de invoer- of uitvoerprojectie.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Opmerking:</strong> Eén gebruik voor een geodetische lijn is als u de kortste afstand wilt bepalen tussen twee steden voor het vluchtpad van een vliegtuig. Dit wordt ook wel een ‘great circle line’ genoemd als het gebaseerd is op een bol in plaats van een ellipsoïde.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Bepaalt of alleen het afstandaccumulatieraster wordt gemaakt of een multiband raster bestaande uit zowel de afstandaccumulatieraster en de terugrichting raster wordt gemaakt.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Niet aangevinkt--Het resultaat is het afstandaccumulatieraster. Dit is een enkelbandresultaat. Dit is de standaardinstelling.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Aangevinkt--Een multiband resultaat wordt gemaakt. De eerste band is het afstandaccumulatieraster en de tweede band is het raster voor de terugrichting.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "Het richtingsraster berekent voor elke cel de richting, in graden, naar de naburige cel langs het kortste pad terug naar de dichtstbijzijnde bron, terwijl barrières worden voorkomen.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Definieert de relatie tussen de horizontale kostenfactor en de horizontale relatieve bewegende hoek (HRBH).</p><p>Er zijn een aantal factoren met modifiers die u kunt selecteren die een gedefinieerde verticale factorgrafiek identificeren. Daarnaast kan er een tabel worden gebruikt om een aangepaste grafiek te maken. De grafieken worden gebruikt om de verticale factor te identificeren die gebruikt wordt bij de berekening van de totale kosten om naar een naburige cel te bewegen.</p><p>In de uitleg hieronder worden twee acroniemen gebruikt: HF en HRBH. HF staat voor horizontale factor, die de tegengekomen horizontale uitdaging definieert bij het bewegen van de ene cel naar de volgende. HRBH staat voor horizontale relatieve bewegingshoek, die de hoek tussen de horizontale richting van een cel en de bewegingsrichting identificeert.</p><p><strong>Horizontale factor</strong>types omvatten het volgende:</p><ul><li><strong>Binair</strong>—Geeft aan dat als de HRBH minder is dan de snijhoek, de HF ingesteld wordt op de waarde die geassocieerd wordt met de nulfactor; anders is deze oneindig.</li><li><strong>Voorwaarts</strong>—Alleen voorwaartse beweging is toegestaan. De HRBH moet groter of gelijk zijn aan 0 en minder dan 90 graden (0 &lt;= HRBH &lt; 90). Als de HRBH groter is dan 0 en minder dan 45 graden, wordt de HF voor de cel ingesteld op de waarde die geassocieerd wordt met de nulfactor. Als de HRBH groter of gelijk is aan 45 graden, wordt de zijwaartse modifier waarde gebruikt. De HF die voor een HRBH-waarde gelijk is aan of groter is dan 90 graden, wordt ingesteld op oneindig.</li><li><strong>Lineair</strong>--Specificeert dat de HF een lineaire functie is van de HRBH.</li><li><strong>Omgekeerd lineair</strong>--Specificeert dat de HF een omgekeerde lineaire functie is van de HRBH.</li><li><strong>Tabel</strong>--Identificeert dat een tabelbestand gebruikt wordt om de horizontale factorgrafiek te definiëren die gebruikt wordt om de HF's te bepalen.</li></ul><p>Modifiers van de horizontale factoren bevatten het volgende:</p><ul><li><strong>Nulfactor</strong>--De horizontale factor gebruikt als de HRBH 0 is. Deze factor positioneert de y-onderschepping voor elk van de horizontale factorfuncties.</li><li><strong>Snijhoek</strong>--Definieert de HRBH-hoek waarbuiten de HF ingesteld wordt op oneindig.</li><li><strong>Helling</strong>--Stelt de helling vast van de rechte lijn die gebruikt wordt met de<strong>Lineaire</strong>en<strong>Omgekeerde lineaire</strong>horizontale factortrefwoorden. De helling is gespecificeerd als een fractie van ‘rise over run’ (bijvoorbeeld, 45 procent helling is 1/45, wat ingevoerd wordt als 0.02222).</li><li><strong>Zijwaarde</strong>--Stelt de HF vast als de HRBH groter of gelijk is aan 45 graden en minder dan 90 graden als het<strong>Voorwaartse</strong>horizontale factortrefwoord wordt gespecificeerd.</li><li><strong>Tabelnaam</strong>--Identificeert de naam van de tabel die de HF definieert.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "Een raster dat de horizontale richting op elke cel definieert.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "De waardes op het raster moeten geheel getal zijn tussen de 0 en 360, waarbij 0 graden het noorden is, of naar de bovenkant van het scherm toe, en naarmate zo hoger worden, wordt er met de klok meegedraaid. Vlakke gebieden moeten een waarde van -1 krijgen. De waarden op elke locatie worden gebruikt in combinatie met de <strong>horizontale factor</strong> om de gemaakte kosten te bepalen bij het bewegen van een cel naar zijn buren.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "De initiële accumulatieve kosten om de kostenberekening te starten. Deze parameter zorgt voor de specificatie van de vaste kosten die verbonden zijn met een bron. In plaats te beginnen met kosten van 0, begint het kostenalgoritme met de gespecificeerde waarde.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "De waarde moet nul of hoger zijn. De standaardwaarde is 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Definieert de maximale accumulatieve kosten voor de reiziger voor een bron. De kostenberekeningen gaan door voor elke bron totdat de gespecificeerde capaciteit is bereikt.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "Een multiplier om op de kostenwaardes toe te passen.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Deze parameter zorgt voor controle over de reismethode of de omvang bij de bron. Hoe groter de multiplier, hoe groter de kosten om door elke cel te bewegen.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "De waardes moeten groter zijn dan nul. De standaardwaarde is 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "Het raster dat de barrières definieert.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "De dataset moet NoData bevatten als er geen barrières zijn. Barrières worden gerepresenteerd door valide waardes, inclusief nul.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "De barrières kunnen gedefinieerd worden door een geheel getal of een kommagetalraster.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "De invoerbronlocaties.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Dit is een raster dataset dat de cellen of locaties identificeert waarvan de minst geaccumuleerde kostenafstand voor elke output cellocatie berekend is.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Het kan een geheel getal of een kommagetal type zijn.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "Een raster dat de hoogtewaardes op elke cellocatie definieert.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "De waardes worden gebruikt om de daadwerkelijke oppervlakteafstand te berekenen die wordt afgelegd bij het voorbijgaan tussen cellen.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Definieert de richting van de reiziger bij het toepassen van verticale factor, horizontale factor en de bronweerstandssnelheid.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>Van bron</strong>--De verticale factor, horizontale factor en het bronweerstandstarief worden toegepast aan het begin van de inputbron en bewegen naar buiten naar de niet-broncellen. Dit is de standaardinstelling.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>Naar bron</strong>--De verticale factor, horizontale factor en het bronweerstandstarief worden toegepast aan het begin van elke niet-broncel en bewegen terug naar de inputbron.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Geef het trefwoord <strong>Van bron</strong> of <strong>Naar bron</strong> op dat op alle bronnen zal worden toegepast, of specificeer een veld in het <strong>Bronraster</strong> die de trefwoorden bevat om de reisrichting voor elke bron te identificeren. Dit veld moet de tekst ${FROM_SOURCE} of ${TO_SOURCE} bevatten.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Definieert de relatie tussen de verticale kostenfactor en de verticale relatieve bewegende hoek (VRBH).</p><p>Er zijn een aantal factoren met modifiers die u kunt selecteren die een gedefinieerde verticale factorgrafiek identificeren. Daarnaast kan er een tabel worden gebruikt om een aangepaste grafiek te maken. De grafieken worden gebruikt om de verticale factor te identificeren die gebruikt wordt bij de berekening van de totale kosten om naar een naburige cel te bewegen.</p><p>In de uitleg hieronder worden twee acroniemen gebruikt: VF en VRBH. VF staat voor verticale factor, die de tegengekomen verticale uitdaging definieert bij het bewegen van de ene cel naar de volgende. VRBH staat voor verticale relatieve bewegende hoek, die de hellingshoek definieert tussen de VANDAAN, of verwerkingscel en de NAARTOE-cel.</p><p><strong>Verticale factor</strong>types omvatten het volgende:</p><ul><li><strong>Binair</strong>--Geeft aan dat als de VRBH groter is dan de lage snijhoek en kleiner dan de hoge snijhoek, de VF ingesteld wordt op de waarde die geassocieerd wordt met de nulfactor; anders is deze oneindig.</li><li><strong>Lineair</strong>--Geeft aan dat de VF een lineaire functie is van de VRBH.</li><li><strong>Symmetrisch lineair</strong>--Specificeert dat de VF een lineaire functie is van de VRBH in ofwel de negatieve of positieve kant van de VRBH, respectievelijk, en de twee lineaire functies zijn symmetrisch wat betreft de VF (y)-as.</li><li><strong>Omgekeerd lineair</strong>--Geeft aan dat de VF een omgekeerde lineaire functie is van de VRBH.</li><li><strong>Symmetrisch omgekeerd lineair</strong>--Specificeert dat de VF een omgekeerde lineaire functie is van de VRBH in ofwel de negatieve of positieve kant van de VRBH, respectievelijk, en de twee lineaire functies zijn symmetrisch wat betreft de VF (y)-as.</li><li><strong>Cos</strong>--Identificeert de VF als de cosinusgebaseerde functie van de VRBH.</li><li><strong>Sec</strong>--Identificeert de VF als de snij-gebaseerde functie van de VRBH.</li><li><strong>Cos-Sec</strong>--Specificeert dat de VF de cosinusgebaseerde functie van de VRBH is als de VRBH negatief is, en de snij-gebaseerde functie van de VRBH als de VRBH niet negatief is.</li><li><strong>Sec-Cos</strong>--Specificeert dat de VF de cosinusgebaseerde functie van de VRBH is als de VRBH negatief is, en de snij-gebaseerde functie van de VRBH als de VRBH niet negatief is.</li><li><strong>Tabel</strong>--Identificeert dat een tabelbestand gebruikt wordt om de verticale factorgrafiek te definiëren die gebruikt wordt om de VF's te bepalen.</li></ul><p>Modifiers van de verticale trefwoorden bevatten het volgende:</p><ul><li><strong>Nulfactor</strong>--Stelt vast dat de verticale factor gebruikt wordt als de VRBH nul is. Deze factor positioneert de y-onderschepping van de gespecificeerde functie. De nulfactor is per definitie niet toepasbaar op de trigonometrische verticale functies (COS, SEC, COS-SEC of SEC-COS). De y-onderschepping wordt gedefinieerd door deze functies.</li><li><strong>Lage snijhoek</strong>--Definieert de VRBH-hoek waaronder de VF ingesteld wordt op oneindig.</li><li><strong>Hoge snijhoek</strong>--Definieert de VRBH-hoek waarboven de VF ingesteld wordt op oneindig.</li><li><strong>Helling</strong>--Stelt de helling vast van de rechte lijn die gebruikt wordt met de<strong>Lineaire</strong>en<strong>Omgekeerd lineaire</strong>verticale-factortrefwoorden. De helling is gespecificeerd als een fractie van ‘rise over run’ (bijvoorbeeld, 45 procent helling is 1/45, wat ingevoerd wordt als 0.02222).</li><li><strong>Tabelnaam</strong>--Identificeert de naam van de tabel die de VF definieert.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Definieert de relatie tussen de verticale kostenfactor en de verticale relatieve bewegende hoek (VRBH).",
	"@@Distance-Accumulation_verticalraster_tag1@@": "De waardes worden gebruikt om de helling te berekenen die gebruikt wordt om de verticale factor die oploopt bij het bewegen van de ene cel naar de andere te identificeren.",
	"@@Distance-Allocation_costraster_tag0@@": "Een raster dat de kosten of de impedantie definieert om planimetrisch door elke cel te bewegen. De waarde op elke cellocatie vertegenwoordigt de kosten per eenheid afstand voor het erdoorheen bewegen. Elke cellocatiewaarde wordt vermenigvuldigd met de celresolutie, en compenseert ook de diagonale beweging om de totale kosten van het passeren door de cel te verkrijgen.",
	"@@Distance-Allocation_costraster_tag1@@": "De waarden van het <strong>Kostenraster</strong> kunnen integer of float zijn, maar ze kunnen niet negatief of nul zijn.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Bepaalt of de afstand wordt berekend met behulp van een vlakke (vlakke aarde) of een geodetische (ellipsvormige) methode.",
	"@@Distance-Allocation_distancemethod_tag1@@": "Vlakte--Vlaktemetingen maken gebruik van 2D Cartesiaanse wiskunde om lengte en gebied te berekenen. De optie is alleen beschikbaar bij het meten in een geprojecteerd coördinaatsysteem en het 2D-vlak van dat coördinaatsysteem wordt gebruikt als de basis voor de metingen.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Geodetisch--De kortste lijn tussen twee punten op het aardoppervlak op een sferoïde (ellipsoïde). Daarom veranderen de resultaten niet, ongeacht de invoer- of uitvoerprojectie.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Opmerking:</strong> Eén gebruik voor een geodetische lijn is als u de kortste afstand wilt bepalen tussen twee steden voor het vluchtpad van een vliegtuig. Dit wordt ook wel een ‘great circle line’ genoemd als het gebaseerd is op een bol in plaats van een ellipsoïde.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Definieert de relatie tussen de horizontale kostenfactor en de horizontale relatieve bewegende hoek (HRBH).</p><p>Er zijn een aantal factoren met modifiers die u kunt selecteren die een gedefinieerde verticale factorgrafiek identificeren. Daarnaast kan er een tabel worden gebruikt om een aangepaste grafiek te maken. De grafieken worden gebruikt om de verticale factor te identificeren die gebruikt wordt bij de berekening van de totale kosten om naar een naburige cel te bewegen.</p><p>In de uitleg hieronder worden twee acroniemen gebruikt: HF en HRBH. HF staat voor horizontale factor, die de tegengekomen horizontale uitdaging definieert bij het bewegen van de ene cel naar de volgende. HRBH staat voor horizontale relatieve bewegingshoek, die de hoek tussen de horizontale richting van een cel en de bewegingsrichting identificeert.</p><p><strong>Horizontale factor</strong>types omvatten het volgende:</p><ul><li><strong>Binair</strong>—Geeft aan dat als de HRBH minder is dan de snijhoek, de HF ingesteld wordt op de waarde die geassocieerd wordt met de nulfactor; anders is deze oneindig.</li><li><strong>Voorwaarts</strong>—Alleen voorwaartse beweging is toegestaan. De HRBH moet groter of gelijk zijn aan 0 en minder dan 90 graden (0 &lt;= HRBH &lt; 90). Als de HRBH groter is dan 0 en minder dan 45 graden, wordt de HF voor de cel ingesteld op de waarde die geassocieerd wordt met de nulfactor. Als de HRBH groter of gelijk is aan 45 graden, wordt de zijwaartse modifier waarde gebruikt. De HF die voor een HRBH-waarde gelijk is aan of groter is dan 90 graden, wordt ingesteld op oneindig.</li><li><strong>Lineair</strong>--Specificeert dat de HF een lineaire functie is van de HRBH.</li><li><strong>Omgekeerd lineair</strong>--Specificeert dat de HF een omgekeerde lineaire functie is van de HRBH.</li><li><strong>Tabel</strong>--Identificeert dat een tabelbestand gebruikt wordt om de horizontale factorgrafiek te definiëren die gebruikt wordt om de HF's te bepalen.</li></ul><p>Modifiers van de horizontale factoren bevatten het volgende:</p><ul><li><strong>Nulfactor</strong>--De horizontale factor gebruikt als de HRBH 0 is. Deze factor positioneert de y-onderschepping voor elk van de horizontale factorfuncties.</li><li><strong>Snijhoek</strong>--Definieert de HRBH-hoek waarbuiten de HF ingesteld wordt op oneindig.</li><li><strong>Helling</strong>--Stelt de helling vast van de rechte lijn die gebruikt wordt met de<strong>Lineaire</strong>en<strong>Omgekeerde lineaire</strong>horizontale factortrefwoorden. De helling is gespecificeerd als een fractie van ‘rise over run’ (bijvoorbeeld, 45 procent helling is 1/45, wat ingevoerd wordt als 0.02222).</li><li><strong>Zijwaarde</strong>--Stelt de HF vast als de HRBH groter of gelijk is aan 45 graden en minder dan 90 graden als het<strong>Voorwaartse</strong>horizontale factortrefwoord wordt gespecificeerd.</li><li><strong>Tabelnaam</strong>--Identificeert de naam van de tabel die de HF definieert.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "Een raster dat de horizontale richting op elke cel definieert.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "De waardes op het raster moeten geheel getal zijn tussen de 0 en 360, waarbij 0 graden het noorden is, of naar de bovenkant van het scherm toe, en naarmate zo hoger worden, wordt er met de klok meegedraaid. Vlakke gebieden moeten een waarde van -1 krijgen. De waarden op elke locatie worden gebruikt in combinatie met de <strong>horizontale factor</strong> om de gemaakte kosten te bepalen bij het bewegen van een cel naar zijn buren.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "De initiële accumulatieve kosten om de kostenberekening te starten. Deze parameter zorgt voor de specificatie van de vaste kosten die verbonden zijn met een bron. In plaats te beginnen met kosten van 0, begint het kostenalgoritme met de gespecificeerde waarde.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "De waarde moet nul of hoger zijn. De standaardwaarde is 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Definieert de maximale accumulatieve kosten voor de reiziger voor een bron. De kostenberekeningen gaan door voor elke bron totdat de gespecificeerde capaciteit is bereikt.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "De waarde moet groter zijn dan nul. De standaardcapaciteit is tot de rand van het outputraster.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "Een multiplier om op de kostenwaardes toe te passen.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Deze parameter zorgt voor controle over de reismethode of de omvang bij de bron. Hoe groter de multiplier, hoe groter de kosten om door elke cel te bewegen.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "De waardes moeten groter zijn dan nul. De standaardwaarde is 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "Een numerieke (dubbele) waarde of een veld van het <strong>Bronraster</strong> kan gebruikt worden voor deze parameter.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "Het raster dat de barrières definieert.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "De dataset moet NoData bevatten als er geen barrières zijn. Barrières worden gerepresenteerd door valide waardes, inclusief nul.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "De barrières kunnen gedefinieerd worden door een geheel getal of een kommagetalraster.",
	"@@Distance-Allocation_sourcefield_tag0@@": "Het veld dat wordt gebruikt om waardes toe te wijzen aan de bronlocaties. Het moet een geheel getal type zijn.",
	"@@Distance-Allocation_sourceraster_tag0@@": "De invoerbronlocaties.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Dit is een raster dataset dat de cellen of locaties identificeert waarvan de minst geaccumuleerde kostenafstand voor elke output cellocatie berekend is.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Bepaalt of alleen het toewijzingsraster wordt gemaakt of dat er een multiband-resultaat wordt gemaakt.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Niet aangevinkt--Het resultaat is het afstandstoewijzingsraster. Dit is een enkelbandresultaat. Dit is de standaardinstelling.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Aangevinkt--Een multibandraster wordt gemaakt. De eerste band is het afstandstoewijzingsraster, de tweede band bevat een rijindex en de derde band bevat een kolomindex. Deze indexen identificeren de locatie van de broncel die de minst geaccumuleerde kostenafstand is.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "Een raster dat de hoogtewaardes op elke cellocatie definieert.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "De waardes worden gebruikt om de daadwerkelijke oppervlakteafstand te berekenen die wordt afgelegd bij het voorbijgaan tussen cellen.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Definieert de richting van de reiziger bij het toepassen van verticale factor, horizontale factor en de bronweerstandssnelheid.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>Van bron</strong>--De verticale factor, horizontale factor en het bronweerstandstarief worden toegepast aan het begin van de inputbron en bewegen naar buiten naar de niet-broncellen. Dit is de standaardinstelling.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>Naar bron</strong>--De verticale factor, horizontale factor en het bronweerstandstarief worden toegepast aan het begin van elke niet-broncel en bewegen terug naar de inputbron.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Geef het trefwoord <strong>Van bron</strong> of <strong>Naar bron</strong> op dat op alle bronnen zal worden toegepast, of specificeer een veld in het <strong>Bronraster</strong> die de trefwoorden bevat om de reisrichting voor elke bron te identificeren. Dit veld moet de tekst ${FROM_SOURCE} of ${TO_SOURCE} bevatten.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Definieert de relatie tussen de verticale kostenfactor en de verticale relatieve bewegende hoek (VRBH).</p><p>Er zijn een aantal factoren met modifiers die u kunt selecteren die een gedefinieerde verticale factorgrafiek identificeren. Daarnaast kan er een tabel worden gebruikt om een aangepaste grafiek te maken. De grafieken worden gebruikt om de verticale factor te identificeren die gebruikt wordt bij de berekening van de totale kosten om naar een naburige cel te bewegen.</p><p>In de uitleg hieronder worden twee acroniemen gebruikt: VF en VRBH. VF staat voor verticale factor, die de tegengekomen verticale uitdaging definieert bij het bewegen van de ene cel naar de volgende. VRBH staat voor verticale relatieve bewegende hoek, die de hellingshoek definieert tussen de VANDAAN, of verwerkingscel en de NAARTOE-cel.</p><p><strong>Verticale factor</strong>types omvatten het volgende:</p><ul><li><strong>Binair</strong>--Geeft aan dat als de VRBH groter is dan de lage snijhoek en kleiner dan de hoge snijhoek, de VF ingesteld wordt op de waarde die geassocieerd wordt met de nulfactor; anders is deze oneindig.</li><li><strong>Lineair</strong>--Geeft aan dat de VF een lineaire functie is van de VRBH.</li><li><strong>Symmetrisch lineair</strong>--Specificeert dat de VF een lineaire functie is van de VRBH in ofwel de negatieve of positieve kant van de VRBH, respectievelijk, en de twee lineaire functies zijn symmetrisch wat betreft de VF (y)-as.</li><li><strong>Omgekeerd lineair</strong>--Geeft aan dat de VF een omgekeerde lineaire functie is van de VRBH.</li><li><strong>Symmetrisch omgekeerd lineair</strong>--Specificeert dat de VF een omgekeerde lineaire functie is van de VRBH in ofwel de negatieve of positieve kant van de VRBH, respectievelijk, en de twee lineaire functies zijn symmetrisch wat betreft de VF (y)-as.</li><li><strong>Cos</strong>--Identificeert de VF als de cosinusgebaseerde functie van de VRBH.</li><li><strong>Sec</strong>--Identificeert de VF als de snij-gebaseerde functie van de VRBH.</li><li><strong>Cos-Sec</strong>--Specificeert dat de VF de cosinusgebaseerde functie van de VRBH is als de VRBH negatief is, en de snij-gebaseerde functie van de VRBH als de VRBH niet negatief is.</li><li><strong>Sec-Cos</strong>--Specificeert dat de VF de cosinusgebaseerde functie van de VRBH is als de VRBH negatief is, en de snij-gebaseerde functie van de VRBH als de VRBH niet negatief is.</li><li><strong>Tabel</strong>--Identificeert dat een tabelbestand gebruikt wordt om de verticale factorgrafiek te definiëren die gebruikt wordt om de VF's te bepalen.</li></ul><p>Modifiers van de verticale trefwoorden bevatten het volgende:</p><ul><li><strong>Nulfactor</strong>--Stelt vast dat de verticale factor gebruikt wordt als de VRBH nul is. Deze factor positioneert de y-onderschepping van de gespecificeerde functie. De nulfactor is per definitie niet toepasbaar op de trigonometrische verticale functies (COS, SEC, COS-SEC of SEC-COS). De y-onderschepping wordt gedefinieerd door deze functies.</li><li><strong>Lage snijhoek</strong>--Definieert de VRBH-hoek waaronder de VF ingesteld wordt op oneindig.</li><li><strong>Hoge snijhoek</strong>--Definieert de VRBH-hoek waarboven de VF ingesteld wordt op oneindig.</li><li><strong>Helling</strong>--Stelt de helling vast van de rechte lijn die gebruikt wordt met de<strong>Lineaire</strong>en<strong>Omgekeerd lineaire</strong>verticale-factortrefwoorden. De helling is gespecificeerd als een fractie van ‘rise over run’ (bijvoorbeeld, 45 procent helling is 1/45, wat ingevoerd wordt als 0.02222).</li><li><strong>Tabelnaam</strong>--Identificeert de naam van de tabel die de VF definieert.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Definieert de relatie tussen de verticale kostenfactor en de verticale relatieve bewegende hoek (VRBH).",
	"@@Distance-Allocation_verticalraster_tag1@@": "De waardes worden gebruikt om de helling te berekenen die gebruikt wordt om de verticale factor die oploopt bij het bewegen van de ene cel naar de andere te identificeren.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "De celgrootte waaronder het outputraster wordt gecreëerd.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Als de celgrootte expliciet is ingesteld in <strong>Omgevingen</strong>, dan is dat de standaardcelgrootte. Als deze niet is ingesteld, zal de output celgrootte hetzelfde zijn als de <strong>Bronraster</strong>.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Bepaalt of de afstand wordt berekend met behulp van een vlakke (vlakke aarde) of een geodetische (ellipsvormige) methode.",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Vlakte--Vlaktemetingen maken gebruik van 2D Cartesiaanse wiskunde om lengte en gebied te berekenen. De optie is alleen beschikbaar bij het meten in een geprojecteerd coördinaatsysteem en het 2D-vlak van dat coördinaatsysteem wordt gebruikt als de basis voor de metingen.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Geodetisch--De kortste lijn tussen twee punten op het aardoppervlak op een sferoïde (ellipsoïde). Daarom veranderen de resultaten niet, ongeacht de invoer- of uitvoerprojectie.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Opmerking:</strong> Eén gebruik voor een geodetische lijn is als u de kortste afstand wilt bepalen tussen twee steden voor het vluchtpad van een vliegtuig. Dit wordt ook wel een ‘great circle line’ genoemd als het gebaseerd is op een bol in plaats van een ellipsoïde.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Definieert de drempelafstand waarin de richting van de dichtstbijzijnde bron wordt berekend. Als de afstand naar de dichtstbijzijnde bron dit overschrijdt, is de output voor die cel NoData.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "De standaardafstand is tot de rand van het outputraster.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "Het raster dat de barrières definieert.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "De dataset moet NoData bevatten als er geen barrières zijn. Barrières worden gerepresenteerd door valide waardes, inclusief nul.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "De barrières kunnen gedefinieerd worden door een geheel getal of een kommagetalraster.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "Een rasterdataset die de cellen of locaties identificeert waarvan de Euclidische richting voor elke uitvoercellocatie berekend is.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "Het inputtype kan een geheel getal of kommagetaltype zijn.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "De naam van een kosten backlink-rasterlaag die gebruikt wordt om het pad te bepalen om terug te keren naar een bron via het goedkoopste pad.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "Voor elke cel in het backlink-raster is er een waarde die de buur identificeert. Dit is de volgende cel op het minst accumulatieve kostenpad van de cel naar een enkele broncel of set van broncellen.",
	"@@Cost-Path_costdistanceraster_tag0@@": "De naam van een kostenafstandraster die gebruikt wordt om het goedkoopste pad te bepalen van de bestemmingslocaties naar een bron.",
	"@@Cost-Path_costdistanceraster_tag1@@": "Het kostenafstandraster is meestal gecreëerd met de Kostenafstand, Kostentoewijzing, of Kosten backlink-functie. De kostenafstandrasterlaag bewaart, voor elke cel, de minimum accumulatieve kostenafstand over een kostenoppervlak van elke cel tot een stel broncellen.",
	"@@Cost-Path_destinationfield_tag0@@": "Het veld dat wordt gebruikt om waarden te krijgen voor de bestemmingslocaties. Input objectdata moet tenminste één valide veld bevatten.",
	"@@Cost-Path_destinationraster_tag0@@": "Een rasterdatasetlaag die de cellen identificeert van waaruit het goedkoopste pad naar de goedkoopste bron wordt bepaald.",
	"@@Cost-Path_destinationraster_tag1@@": "De inputrasterlaag bestaat uit cellen die geldige waarden hebben (nul is een geldige waarde) en aan de resterende cellen moeten NoData worden toegewezen.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Dwingt de functie om de invoerbacklinkraster te behandelen als een stroomrichtingsraster. Stroomrichtingsrasters kunnen gehele waarden hebben tussen 0-255.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Niet aangevinkt--Als de waarden van het gespecificeerde backlinkraster gehele getallen zijn in het bereik van 0-8, wordt de dataset behandeld als een kostenbacklinkraster. Als de waarden tussen 0-255 zijn, wordt de invoer behandeld als een stroomrichtingraster. Als de waarden tussen 0-360 en kommagetal zijn, wordt de invoer behandeld als een backdirectionraster.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Aangevinkt--Het raster dat wordt geleverd voor het backlinkraster wordt behandeld als een stroomrichtingraster. Gebruik deze optie als het stroomrichtingraster toevallig een maximumwaarde van 8 of minder heeft.",
	"@@Cost-Path_pathtype_tag0@@": "Een trefwoord die de manier bepaalt waarop de waarden en zones op de bestemmingsgegevens van de input worden geïnterpreteerd in de kostenpadberekeningen. De opties zijn als volgt:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Elke cel</strong>--Voor elke cel met geldige waarden op de bestemmingsdata van de input wordt een goedkoopste pad bepaald en opgeslagen op het outputraster. Met deze optie wordt elke cel van de bestemmingsdata van de input afzonderlijk behandeld en wordt voor elke cel een goedkoopste pad bepaald.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Elke zone</strong>--Voor elke zone op de bestemmingsdata van de input wordt een goedkoopste pad bepaald en opgeslagen op het outputraster. Met deze optie begint het goedkoopste pad voor elke zone op de cel met de weging van de laagste kostenafstand in de zone.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Beste enkel</strong>--Voor alle cellen op de bestemmingsdata van de input wordt het goedkoopste pad afgeleid uit de cel met het minimum van de goedkoopste paden naar de broncellen.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Kies welke celgrootte u wilt gebruiken in het uitvoerraster. Als alle invoercelgroottes hetzelfde zijn, zullen alle opties dezelfde resultaten geven.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "Eerste van--Gebruik de eerste celgrootte van de invoerrasters.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Min van--Gebruik de kleinste celgrootte van alle inputrasters.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Max van--Gebruik de grootste celgrootte van alle invoerrasters. Dit is de standaardinstelling.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Gemiddelde van--Gebruik de gemiddelde celgrootte van alle inputrasters.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Laatste van--Gebruik de laatste celgrootte van de invoerrasters.",
	"@@Cell-Statistics_extenttype_tag0@@": "Kies welk extent gebruikt moet worden in het uitvoerraster:",
	"@@Cell-Statistics_extenttype_tag1@@": "Eerste van--Gebruik het extent van het eerste invoerraster om de verwerkingsextent te bepalen.",
	"@@Cell-Statistics_extenttype_tag2@@": "Kruising van--Gebruik de omvang van de overlappende pixels om de verwerkingsomvang te bepalen. Dit is de standaardinstelling.",
	"@@Cell-Statistics_extenttype_tag3@@": "Samenvoeging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.",
	"@@Cell-Statistics_extenttype_tag4@@": "Laatste van--Gebruik de omvang van het laatste inputraster om de verwerkingsomvang te bepalen.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Bepaalt hoe de invoerrasterbanden worden verwerkt.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Niet aangevinkt--Alle multiband-invoer wordt verwerkt als enkele banden. Dit is de standaardinstelling.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Aangevinkt--Alle multiband-invoer wordt verwerkt als multiband.",
	"@@Cell-Statistics_rasters_tag0@@": "De lijst met rasters waaruit statistieken worden berekend, op een pixel-voor-pixel-basis.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Specificeert de methode van interpolatie die moet worden gebruikt als de opgegeven percentielwaarde tussen twee invoercelwaarden ligt.</p><ul><li><strong>Auto-detect</strong>--Als de invoerrasters van het gehele pixeltype zijn, dan wordt de methode<strong>Dichtstbijzijnde</strong>gebruikt. Als het invoerwaarde raster van het type zwevend puntpixel is, dan wordt de<strong>Lineaire</strong>methode gebruikt. Dit is de standaardinstelling.</li><li><strong>Dichtstbijzijnde</strong>-De dichtstbijzijnde beschikbare waarde bij het gewenste percentiel wordt gebruikt. In dit geval is het type uitvoerpixel hetzelfde als dat van het invoerwaarderaster.</li><li><strong>Lineair</strong>--Het gewogen gemiddelde van de twee omringende waarden van het gewenste percentiel wordt gebruikt. In dit geval is het uitvoerpixeltype het zwevende punt.</li></ul><p>Deze optie is alleen beschikbaar als het parametertype<strong>Bediening</strong>is ingesteld op<strong>Mediaan</strong>of<strong>Percentiel</strong>.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>Het te berekenen percentiel. De standaardwaarde is 90, voor het 90e percentiel.</p><p>De waarden kunnen variëren van 0 tot 100. Het 0de percentiel is in wezen gelijk aan de minimumstatistiek en het 100ste percentiel is gelijk aan het maximum. Een waarde van 50 zal in wezen hetzelfde resultaat produceren als de Mediaanstatistiek.</p><p>Deze optie is alleen beschikbaar als de parameter<strong>Bediening</strong>is ingesteld op<strong>Percentiel</strong>.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "Het raster terugweg bevat berekende richtingen in graden. De richting identificeert de volgende cel langs de optimale weg terug naar de minst geaccumuleerde kostenbron en vermijdt tegelijkertijd barrières.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "Het bereik van de waarden loopt van 0 graden tot 360 graden, met 0 gereserveerd voor de broncellen. Oost (rechts) is 90 en de waarden lopen rechtsom (180 is zuid, 270 is west en 360 is noord).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "Het veld dat wordt gebruikt om waarden te krijgen voor de bestemmingslocaties.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "Een rasterdatasetlaag die de cellen identificeert van waaruit het optimale pad naar de goedkoopste bron wordt bepaald. Deze invoer is vereist.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "De inputrasterlaag bestaat uit cellen die geldige waarden hebben (nul is een geldige waarde) en aan de resterende cellen moeten NoData worden toegewezen.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "Het raster afstandsaccumulatie wordt gebruikt om het optimale pad van de bestemmingen naar de bronnen te bepalen. Het raster afstandsaccumulatie wordt meestal gecreëerd met de functie <strong>Afstandsaccumulatie</strong>. Elke cel in het raster afstandaccumulatie vertegenwoordigt de minimum accumulatieve kostenafstand over een oppervlak van elke cel tot een stel broncellen.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Een trefwoord dat de manier definieert waarop de waardes en zones op de bestemmingsgegevens van de input worden geïnterpreteerd in de kostenpadberekeningen.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Elke zone</strong>--Voor elke zone op de bestemmingsdata van de input wordt een goedkoopste pad bepaald en opgeslagen op het outputraster. Met deze optie begint het optimale pad voor elke zone op de cel met de weging van de laagste kostenafstand in de zone.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Beste enkel</strong>--Voor alle cellen op de bestemmingsdata van de input wordt het optimale pad afgeleid uit de cel met het minimum van de goedkoopste paden naar de broncellen.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Elke cel</strong>--Voor elke cel met geldige waarden op de bestemmingsdata van de input wordt een optimaal pad bepaald. Met deze optie wordt elke cel van de bestemmingsdata van de input afzonderlijk behandeld en wordt voor elke cel een optimale pad bepaald.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "De te gebruiken band-ID's voor de detectie van veranderingen. Als er geen band-ID's worden verstrekt, worden alle banden van de invoerrasterdataset gebruikt.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "De ID-waarden moeten hele getallen zijn gescheiden door spaties.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "De band-ID's van de groene band en de SWIR-band, te gebruiken om te maskeren voor wolken, wolkenschaduw en sneeuw. Als er geen band-ID's worden verstrekt, zal er geen sprake zijn van maskering.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "De ID-waarden moeten hele getallen zijn gescheiden door spaties.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Deze parameter specificeert de banden die gebruikt moeten worden voor wolken, wolkenschaduw en sneeuwmaskers. Omdat wolkenschaduw en sneeuw in de kortegolf-infraroodband (SWIR) zeer donker zijn en wolken en sneeuw in de groene band zeer helder zijn, is het aan te bevelen om de bandindexen voor de SWIR- en groene banden te maskeren.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "De drempel voor de waarschijnlijke wijzigingen van het chi-kwadraat. Als een observatie een berekende veranderingskans heeft die boven deze drempel ligt, wordt deze gemarkeerd als een anomalie, wat een potentiële veranderingsgebeurtenis is. De standaardwaarde is 0.99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "Het minimum aantal opeenvolgende anomalie-observaties dat moet plaatsvinden voordat een gebeurtenis als een verandering wordt beschouwd. Een pixel moet worden gemarkeerd als een anomalie voor het opgegeven aantal opeenvolgende tijdstukjes voordat het als een echte verandering wordt beschouwd. De standaardwaarde is 6.",
	"@@CCDC-Analysis_raster_tag0@@": "De ingevoerde multidimensionale rasterlaag.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "De frequentie waarmee het tijdreeksmodel wordt bijgewerkt met nieuwe observaties. De standaardinstelling is om het model elke 1 jaar bij te werken.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Deze parameter bepaalt hoe vaak het tijdreeksmodel wordt bijgewerkt met nieuwe observaties. Het regelmatig bijwerken van een model kan rekentechnisch kostbaar zijn en het voordeel kan minimaal zijn. Bijvoorbeeld, als er 365 stukjes of duidelijke observaties per jaar zijn in het multidimensionale raster, en de updatefrequentie is voor elke observatie, dan zal de verwerking 365 keer duurder zijn in vergelijking met het updaten van een keer per jaar, maar de nauwkeurigheid mag niet hoger zijn.",
	"@@Trend-To-RGB_modeltype_tag0@@": "Het type modelinformatie dat naar RGB moet worden omgezet.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Lineaire--Lineaire trendinformatie zal worden geconverteerd naar RGB. Dit is de standaardinstelling.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Harmonisch--Harmonische trendinformatie zal worden omgezet naar RGB.",
	"@@Trend-To-RGB_raster_tag0@@": "De ingevoerde trendraster.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>De beste waarde voor de verhouding van het model. Tijdens de modelselectie berekent de tool de p-waarde voor elk model en selecteert een model dat de meeste hoekpunten heeft met behoud van de kleinste (meest significante) p-waarde op basis van deze proportiewaarde. Een waarde van 1 betekent dat het model de laagste p-waarde heeft, maar geen hoog aantal hoekpunten. De standaardwaarde is 1,25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>Het maximum aantal segmenten dat aan de tijdreeksen voor elke pixel kan worden aangepast. De standaardwaarde is 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>Het minimum aantal geldige waarnemingen dat nodig is om de aanpassing uit te voeren. Het aantal jaren in de input multidimensionale dataset moet gelijk zijn aan of groter zijn dan deze waarde. De standaardwaarde is 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Geeft aan of andere banden in de resultaten worden opgenomen.</p><ul><li>Aangevinkt--Andere banden worden in de resultaten opgenomen. De informatie over de segmentatie en de hoekpunten van de initiële segmentatieband die in de parameter<strong>Processing Band</strong>is gespecificeerd, zal ook worden aangepast aan de resterende banden in de multibandbeelden. De modelresultaten zullen eerst de segmentatieband bevatten, daarna de overige banden.</li><li>Niet aangevinkt--Andere banden zullen niet worden opgenomen. Dit is de standaardinstelling.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Geeft aan of segmenten met een herstelperiode van één jaar worden uitgesloten.</p><ul><li>Aangevinkt--Segmenten die een jaar recuperatie vertonen worden uitgesloten. Dit is de standaardinstelling.</li><li>Niet aangevinkt--Segmenten die een jaar lang herstel vertonen, worden niet uitgesloten.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>De band om te gebruiken voor het segmenteren van de pixelwaardetrajecten in de tijd. Kies de band die het best de veranderingen in het object dat u wilt observeren vastlegt.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>De p-waardedrempel voor een te kiezen model. Nadat de hoekpunten zijn gedetecteerd in de beginfase van de modelaanpassing, zal de tool op elk segment passen en de p-waarde berekenen om de betekenis van het model te bepalen. Bij de volgende iteratie zal het model het aantal segmenten met één verminderen en de p-waarde herberekenen. Dit zal doorgaan en als de p-waarde kleiner is dan de waarde die in deze parameter is opgegeven, zal het model worden geselecteerd en zal de tool stoppen met het zoeken naar een beter model. Als een dergelijk model niet is geselecteerd, zal de tool een model selecteren met een p-waarde die kleiner is dan de<strong>laagste p-waarde x beste model proportionele waarde</strong>. De standaardwaarde is 0,01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>De ingevoerde Landsat multidimensionale rasterlaag.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Geeft aan of het herstel een stijgende (positieve) trend heeft.</p><ul><li>Aangevinkt--Het herstel heeft een stijgende trend. Dit is de standaard.</li><li>Niet aangevinkt--Het herstel heeft een dalende trend.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>De hersteldrempelwaarde, in jaren. Als een segment een herstelpercentage heeft dat sneller is dan<strong>1/hersteldrempel</strong>, wordt het segment weggegooid en niet opgenomen in het tijdreeksmodel. De waarde moet tussen 0 en 1 liggen De standaardwaarde is 0,25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>De datum die wordt gebruikt om voor elk jaar een stuk te selecteren in de multidimensionale invoerdataset. De plak met de datum die het dichtst bij de snappingdatum ligt, wordt geselecteerd. Deze parameter is nodig als de ingevoerde dataset subjaarlijkse gegevens bevat</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>De drempel om te gebruiken voor het dempen van pieken of afwijkingen in het traject van de pixelwaarde. De waarde moet tussen 0 en 1 liggen, waarbij 1 geen demping betekent. De standaardwaarde is 0,9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>Het aantal extra hoekpunten boven<strong>max_num_segments + 1</strong>dat kan worden gebruikt om het model in de eerste fase van het identificeren van hoekpunten te passen. Later in het modelleringsproces zal het aantal extra hoekpunten worden teruggebracht tot<strong>max_num_segments + 1</strong>. De standaardwaarde is 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>De invoerrasterdatasets of multidimensionale rasterdatasets om samen te voegen</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Specificeert de methode die moet worden gebruikt om overlappende pixels in de gecombineerde datasets op te lossen.</p><ul><li><strong>Eerst</strong>-De pixelwaarde in de overlappende gebieden is de waarde van het eerste raster in de lijst met invoerrasters. Dit is de standaardwaarde.</li><li><strong>Laatste</strong>-De pixelwaarde in de overlappende gebieden is de waarde van het laatste raster in de lijst met invoerrasters.</li><li><strong>Min</strong>-De pixelwaarde in de overlappende gebieden is de minimale waarde van de overlappende pixels.</li><li><strong>Max</strong>-De pixelwaarde in de overlappende gebieden is de maximale waarde van de overlappende pixels.</li><li><strong>Gemiddelde</strong>-De pixelwaarde in de overlappende gebieden is het gemiddelde van de overlappende pixels.</li><li><strong>Som</strong>-De pixelwaarde in de overlappende gebieden is de totale som van de overlappende pixels</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Specificeert de tijdseenheid die moet worden gebruikt voor de lengte van een harmonische cyclus.</p><ul><li><strong>Dagen</strong>-De eenheid voor de lengte van de harmonische cyclus is dagen.</li><li><strong>Jaar</strong>-De eenheid voor de lengte van de harmonische cyclus is jaren. Dit is de standaardinstelling.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>De afmeting waarmee een trend wordt geëxtraheerd voor de variabele of variabelen die in de analyse zijn geselecteerd.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>Het frequentienummer om te gebruiken in de trendaanpassing. Deze parameter geeft de frequentie van de cycli in een jaar aan. De standaardwaarde is 1, oftewel één harmonische cyclus per jaar.</p><p>Deze parameter is alleen opgenomen in de trendanalyse voor een harmonische regressie.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Specificeert of NoData waarden worden genegeerd in de analyse.</p><ul><li>Aangevinkt--De analyse zal alle geldige pixels langs een bepaalde dimensie bevatten en eventuele NoData-pixels negeren. Dit is de standaardinstelling.</li><li>Niet aangevinkt—De analyse zal resulteren in NoData als er NoData-waarden zijn voor de pixels in de gegeven afmeting.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>De lengte van de periodieke variatie voor het model. De eenheid is dagen, ongeacht de tijdseenheid van de invoergegevens. Zo heeft bladgroenheid vaak één sterke variatiecyclus in één jaar, zodat de cycluslengte 365,25 is, zelfs als de invoergegevens maandelijks groen zijn. Uurlijkse temperatuurgegevens hebben één sterke variatiecyclus gedurende één dag, dus de lengte van de cyclus is 1.</p><p>De standaardlengte is 365,25 dagen voor gegevens die variëren op een jaarlijkse cyclus</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Geeft aan of de p-waarde statistiek voor de hellingscoëfficiënt van de trendlijn moet worden berekend.</p><ul><li>Aangevinkt--De p-waarde wordt berekend en in de details weergegeven wanneer de functie voltooid is.</li><li>Niet aangevinkt--De p-waarde wordt niet berekend. Dit is de standaardinstelling.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>Het polynomiale ordenummer om te gebruiken in de trendaanpassing. Deze parameter geeft de polynomiale orde aan. De standaardwaarde is 2, of tweede-orde polynoom.</p><p>Deze parameter is alleen opgenomen in de trendanalyse voor een polynoomregressie.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Geeft aan of de R-kwadraat goodness-of-fit statistiek voor de trendlijn moet worden berekend.</p><ul><li>Aangevinkt--De R-kwadraat zal worden berekend en in de details worden weergegeven wanneer de functie is voltooid.</li><li>Niet aangevinkt--De R-kwadraat zal niet worden berekend. Dit is de standaardinstelling.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>De ingevoerde multidimensionale raster.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Geeft aan of de RMSE de root mean square error (RMSE) van de trendformule moet genereren.</p><ul><li>Aangevinkt--De RMSE wordt berekend en in de details weergegeven wanneer de functie is voltooid. Dit is de standaardinstelling.</li><li>Niet aangevinkt--De RMSE wordt niet berekend</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Specificeert de tijdseenheid die moet worden gebruikt voor de lengte van een seizoensperiode bij het uitvoeren van de Seasonall-Kendall-test.</p><ul><li>Dag--De eenheid voor de lengte van de seizoensperiode is dagen. Dit is de standaardinstelling.</li><li>Maanden--De eenheid voor de lengte van de seizoensperiode is maanden.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Specificeert het type lijn dat moet worden gebruikt om te passen bij de pixelwaarden langs een dimensie.</p><ul><li><strong>Lineair</strong>-Passen de pixelwaarden voor een variabele langs een lineaire trendlijn. Dit is de standaardinstelling.</li><li><strong>Harmonisch</strong>--Passend de pixelwaarden voor een variabele langs een harmonische trendlijn.</li><li><strong>Polynomiaal</strong>--Passend de pixelwaarden voor een variabele langs een polynomiale trendlijn van de tweede orde.</li><li><strong>Mann-Kendall</strong>--Variabele pixelwaarden worden geëvalueerd met behulp van de Mann-Kendall trendtoets.</li><li><strong>Seasonal Kendall</strong>--Variabele pixelwaarden worden geëvalueerd met behulp van de Seasonal-Kendall trendtest.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Kies welke celgrootte u wilt gebruiken in het uitvoerraster. Als alle ingevoerde celgroottes gelijk zijn, zullen alle opties dezelfde resultaten opleveren.</p><ul><li>Eerste van--Gebruik de eerste celgrootte van de invoerrasters.</li><li>Min van--Gebruik de kleinste celgrootte van alle invoerrasters.</li><li>Max van--Gebruik de grootste celgrootte van alle invoerrasters. Dit is de standaardinstelling.</li><li>Gemiddelde van--Gebruik de gemiddelde celgrootte van alle invoerrasters.</li><li>Laatste van--Gebruik de laatste celgrootte van de invoerrasters.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>De methode die wordt gebruikt voor de berekening.</p><ul><li><strong>Verschil</strong>-Het wiskundige verschil, of de aftrekking, tussen de pixelwaarden in de invoerrasters wordt berekend. Dit is de standaardwaarde.</li><li><strong>Relatief verschil</strong>--Het verschil in pixelwaarden zal worden berekend, rekening houdend met de magnitudes van de waarden die worden vergeleken.</li><li><strong>Categorisch verschil</strong>--Het verschil tussen twee categorische of thematische rasters zal worden berekend, waarbij de uitvoer klassetransities bevat die zich tussen de twee rasters hebben voorgedaan.</li><li><strong>Spectrale Euclidische Afstand</strong>--De Euclidische afstand tussen de pixelwaarden van twee multibandrasters zal worden berekend.</li><li><strong>Spectraal hoekverschil</strong>--De spectrale hoek tussen de pixelwaarden van twee multibandrasters zal worden berekend. De uitvoer is in radialen.</li><li><strong>Band met de meeste veranderingen</strong>--De band die de grootste verandering in elke pixel veroorzaakt tussen twee multibandrasters zal worden berekend.</li></ul><p>Als <strong>Veranderingsmethode berekenen</strong> is ingesteld op <strong>Categorisch verschil</strong> en een van de invoerwaarden niet categorisch is, zal een eenvoudig verschil worden berekend.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Geef de methode aan die gebruikt moet worden om de pixels te symboliseren die van klasse zijn veranderd.</p><ul><li><strong>Average From And To Colors</strong>-De kleur van de pixel zal het gemiddelde zijn van de kleur van zijn oorspronkelijke klasse en de kleur van zijn uiteindelijke klasse.</li><li><strong>Use From Colors</strong>-De kleur van de pixel zal de kleur zijn van zijn oorspronkelijke klasse.</li><li><strong>Use To Colors</strong>-De kleur van de pixel zal de kleur zijn van zijn uiteindelijke klasse</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Kies welke mate in het uitvoerraster moet worden gebruikt:</p><ul><li>Eerste van--Gebruik de omvang van het eerste invoerraster om de verwerkingsgraad te bepalen.</li><li>Kruispunt van--Gebruik de omvang van de overlappende pixels om de verwerkingsgraad te bepalen. Dit is de standaardinstelling.</li><li>Vereniging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.</li><li>Laatste van--Gebruik de omvang van het laatste invoerraster om de verwerkingsomvang te bepalen.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Kies de filtermethode voor de categoriale wijzigingsberekening.</p><ul><li><strong>Houd alle</strong>--Alle klassen zijn inbegrepen in de uitvoer en er wordt niet gefilterd. Kies deze optie om verandering en persistentie in een enkele dataset te zien.</li><li><strong>Alleen gewijzigde pixels houden</strong>--Alleen de klassen die zijn veranderd van het ene klassentype naar een ander klassentype zijn opgenomen in de uitvoer. Kies deze optie als u alleen geïnteresseerd bent in verandering.</li><li><strong>Houd alleen ongewijzigde Pixels</strong>-Alleen de klassen die niet zijn veranderd zijn opgenomen in de uitvoer. Kies deze optie als u alleen geïnteresseerd bent in behoud.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>De klassewaarden van de<strong>Van Raster</strong>worden in de berekening opgenomen, indien twee categorische rasters met elkaar worden vergeleken. Dit is een lijst met gehele getallen die overeenkomt met het veld<strong>ClassValue</strong>in uw invoerraster dataset.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>Het eerste raster dat in de berekening wordt gebruikt. Om de verandering van tijd 1 (eerder) naar tijd 2 (later) te evalueren, voert u hier de tijd 1 raster in.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>De klassewaarden van de<strong>Naar raster</strong>worden in de berekening opgenomen, indien twee categorische rasters met elkaar worden vergeleken. Dit is een lijst met gehele getallen die overeenkomt met het veld<strong>ClassValue</strong>in uw invoerraster dataset.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>Het tweede raster dat in de berekening wordt gebruikt. Om de verandering van tijd 1 (eerder) naar tijd 2 (later) te evalueren, voert u het tijd 2 raster in.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Geef de methode aan die gebruikt moet worden om de pixels te symboliseren die van klasse zijn veranderd.</p><ul><li><strong>Gemiddelde van en naar kleuren</strong>--De kleur van de pixel zal het gemiddelde zijn van de kleur van zijn oorspronkelijke klasse en de kleur van zijn uiteindelijke klasse.</li><li><strong>Gebruik van kleuren</strong>--De kleur van de pixel zal de kleur zijn van zijn oorspronkelijke klasse.</li><li><strong>Gebruik naar kleuren</strong>--De kleur van de pixel zal de kleur zijn van zijn uiteindelijke klasse.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>Een veld dat klassenamen opslaat in de invoer<strong>Van raster</strong>. De tool zoekt automatisch naar het veld<strong>Klassenaam</strong>of<strong>Klasse_naam</strong>veld om dit te gebruiken.</p><p>Gebruik deze optie als de invoer deze standaardveldnamen niet bevat.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>Een veld dat klassenamen opslaat in de invoer<strong>Naar raster</strong>. De tool zoekt automatisch naar het veld<strong>Klassenaam</strong>of<strong>Klasse_naam</strong>veld om dit te gebruiken.</p><p>Gebruik deze optie als de invoer deze standaardveldnamen niet bevat.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>Het aantal pixelkolommen om te gebruiken in de focale buurtafmeting.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>Het aantal pixelrijen om te gebruiken in de focale buurtafmeting.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Vult gaten in NoData in de uitvoer. Dit is nuttig wanneer uw beeldmateriaal mogelijk is weggevallen.</p>",
	"@@Statistics_raster_tag0@@": "<p>Het invoerraster om focale statistieken op uit te voeren.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>Het volgende zijn de zeven soorten centrale statistische functies:</p><ul><li>Minimum--Berekent de minimumwaarde van de pixels in de buurt.</li><li>Maximum--Berekent de maximumwaarde van de pixels in de buurt.</li><li>Gemiddelde--Berekent de gemiddelde waarde van de pixels in de buurt. Dit is de standaardinstelling.</li><li>Standaardafwijkin--Berekent de standaardafwijkingswaarde van de pixels in de buurt.</li><li>Mediaan--Berekent de mediaanwaarde van de pixels in de buurt.</li><li>Meerderheid--Berekent de meerderheidswaarde, of de waarde die het vaakst voorkomt, van de pixels in de buurt.</li><li>Minderheid--Berekent de minderheidswaarde, of de waarde die het minst vaak voorkomt, van de pixels in de buurt</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Specificeert de richting van de verandering die in de analyse moet worden opgenomen.</p><p>Deze parameter is alleen beschikbaar wanneer het raster voor de analyse van de invoerverandering de uitvoer van de LandTrendr tools is.</p><ul><li><strong>Alle richtingen</strong>--Alle wijzigingsrichtingen zijn opgenomen in de uitvoer. Dit is de standaardinstelling.</li><li><strong>Toenemend</strong>--Enige verandering in de positieve of toenemende richting is opgenomen in de uitvoer.</li><li><strong>Afnemend</strong>--Enige verandering in de negatieve of afnemende richting is opgenomen in de uitvoer.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Specificeert de te berekenen wijzigingsinformatie.</p><ul><li><strong>Tijd laatste verandering</strong>--Elke pixel bevat de datum van de meest recente verandering voor die pixel in de tijdreeks. Dit is de standaardinstelling.</li><li><strong>Tijd vroegste verandering</strong>--Elke pixel bevat de datum van de vroegste verandering voor die pixel in de tijdreeks.</li><li><strong>Tijd laatste verandering</strong>--Elke pixel bevat de datum van de meest significante verandering voor die pixel in de tijdreeks.</li><li><strong>Aantal veranderingen</strong>--Elke pixel bevat het totale aantal keren dat de pixel in de tijdreeks is veranderd.</li><li><strong>Tijd langste verandering</strong>--Elke pixel bevat de datum van verandering aan het eind van het langste overgangssegment in de tijdreeks.</li><li><strong>Tijd kortste verandering</strong>--Elk pixel bevat de datum van verandering aan het einde van het kortste overgangssegment in de tijdreeks.</li><li><strong>Tijd snelste verandering</strong>--Elke pixel bevat de datum van verandering aan het einde van de overgang die het snelst heeft plaatsgevonden.</li><li><strong>Tijd langzaamste verandering</strong>--Elke pixel bevat de datum van verandering aan het einde van de overgang die het langzaamst heeft plaatsgevonden.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Geeft aan of er gefilterd moet worden op de wijzigingsduur.</p><p></p><ul><li>Aangevinkt--Filter de resultaten op duur, zodat alleen de wijzigingen die een bepaalde tijd hebben geduurd in de uitvoer worden opgenomen.</li><li>Niet aangevinkt--Filter de resultaten niet op duur. Dit is de standaardinstelling.</li></ul><p>Deze parameter is alleen beschikbaar als het analyseraster voor invoerwijzigingen de uitvoer van de LandTrendr tools is.</p><p>Als deze parameter wordt gecontroleerd, moet u de<strong>Minimale duur</strong>en<strong>Maximale duur</strong>parameters voor het filteren instellen.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Geeft aan of er gefilterd moet worden op wijzigingsmagnitude.</p><ul><li>Aangevinkt--Filter de resultaten op magnitude zodat alleen de wijzigingen van een bepaalde magnitude in de uitvoer worden opgenomen.</li><li>Niet aangevinkt--Filter de resultaten niet op magnitude. Dit is de standaardinstelling.</li></ul><p>Deze parameter is alleen beschikbaar als het analyse raster voor invoerwijzigingen de uitvoer van de LandTrendr tools is.</p><p>Als deze parameter is aangevinkt, moet u de parameters<strong>Minimum Magnitude</strong>en<strong>Maximum Magnitude</strong>instellen voor het filteren.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Geeft aan of de output moet worden beperkt met een reeks van jaren.</p><ul><li>Aangevinkt--Filter resultaten zodat alleen veranderingen die binnen een bepaalde reeks van jaren zijn opgetreden in de output worden opgenomen.</li><li>Niet aangevinkt---Filter resultaten niet op jaarbasis. Dit is de standaardinstelling.</li></ul><p>Als deze parameter is aangevinkt, moet u de parameters<strong>Minimumwaarde</strong>en<strong>Maximumwaarde</strong>instellen voor het filteren.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Filter de resultaten op startwaarde zodat alleen de wijzigingen van een gegeven startwaarde worden opgenomen in de uitvoer.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Filter de resultaten op eindwaarde zodat alleen de wijzigingen van een gegeven eindwaarde worden opgenomen in de uitvoer.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>Het maximaal te berekenen aantal wijzigingen per pixel. Het ingevoerde aantal komt overeen met het aantal banden in het uitvoerraster. De standaardinstelling is 1, wat betekent dat er slechts één wijzigingsdatum wordt berekend en dat het uitvoerraster slechts één band bevat.</p><p>Deze parameter is niet beschikbaar wanneer de parameter<strong>Type Wijzigen</strong>is ingesteld op<strong>Aantal wijzigingen</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>Het raster analyse invoerwijziging.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Geeft aan of de datum aan het begin van een wijzigingssegment moet worden geëxtraheerd, of het einde.</p><p>Deze parameter is alleen beschikbaar als het invoeranalyse-raster voor wijzigingen de uitvoer van de LandTrendr-tools is.</p><ul><li><strong>Begin van het segment</strong>--Extraheer de datum aan het begin van een wijzigingssegment. Dit is de standaardinstelling.</li><li><strong>Einde van het segment</strong>--Extracteer de datum aan het einde van een wijzigingssegment</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>De oppervlakte-eenheden van de outputdichtheidswaarden.</p><ul><li>Square Map Units--Voor het kwadraat van de lineaire eenheden van de output ruimtelijke referentie.</li><li>Square Miles--Voor (VS) miles.</li><li>Square Kilometers--Voor kilometers.</li><li>Acres--Voor (VS) acres.</li><li>Hectares--Voor hectares.</li><li>Vierkante meters--Voor meters.</li><li>Vierkante meters--Voor (V.S.) meter.</li><li>Vierkante meters--Voor (V.S.) meter.</li><li>Vierkante meters--Voor (V.S.) centimeter.</li><li>Vierkante meters--Voor centimeter.</li><li>Vierkante meters--Voor millimeter</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>De pixelgrootte voor de outputraster dataset. Als de <strong>Celgrootte</strong> ingesteld is in de geoprocessingomgevingen, zal dit de standaard zijn.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>De dataset die de barrières definieert.</p><p>De barrières kunnen een objectlaag van polylijn- of veelhoekige kenmerken zijn.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>Het invoerpunt of lijnobjecten waarvoor de dichtheid moet worden berekend.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Bepaalt of er een kortste pad op een sferoïde (geodetisch) of een platte aarde (vlak) methode wordt gebruikt.</p><ul><li><strong>Plenair</strong>--Gebruikt vlakke afstanden tussen objecten. Dit is de standaardinstelling.</li><li><strong>Geodetische</strong>--Deze geodetische afstanden tussen de functies worden gebruikt. Deze methode houdt rekening met de kromming van de sferoïde en behandelt de gegevens in de buurt van de polen en de internationale datalijn op de juiste manier.</li></ul><p>Het is aan te bevelen de<strong>Geodetische</strong>methode te gebruiken met gegevens die zijn opgeslagen in een coördinatensysteem dat niet geschikt is voor afstandsmetingen en elke analyse die een groot geografisch gebied omspant. Bijvoorbeeld, Web Mercator of een geografisch coördinaatsysteem zou gebruik moeten maken van de methode <strong>Geodetisch</strong>.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Bepaalt wat de waarden in het uitvoerraster vertegenwoordigen.</p><ul><li><strong>Dichtheden</strong>-De uitvoerwaarden vertegenwoordigen de voorspelde dichtheidswaarde. Dit is de standaardinstelling.</li><li><strong>Verwachte tellingen</strong>--De uitvoerwaardes representeren de voorspelde hoeveelheid van het fenomeen binnen elke pixel. Aangezien de pixelwaarde verbonden is aan de <strong>Celgrootte</strong> waarde, kan het resulterende raster niet geresampled worden op een andere pixelgrootte en nog steeds de hoeveelheid van het fenomeen representeren.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Velden die bevolkingswaarden aangeven voor elk object. De waarde <strong>Bevolkingsveld</strong> is de hoeveelheid of kwantiteit om over het landschap te verspreiden om een constant oppervlak te creëren. Waarden in het<strong>Bevolkingsveld</strong>kunnen integer of floating point zijn.</p><p>De opties en standaardgedragingen voor het veld staan hieronder vermeld in de volgorde van prioriteit.</p><ul><li>Gebruik<strong>Geen</strong>als er geen item of speciale waarde wordt gebruikt en elke functie wordt één keer geteld.</li><li>Gebruik<strong>Vorm</strong>als de invoerkenmerken Z bevatten.</li><li>Anders is het standaardveld<strong>POPULATIE</strong>, of een aanvaardbaar derivaat van de populatie:<ul><li><strong>POPULATIExxxx</strong>waar<strong>xxxx</strong>een geldig teken kan zijn, zoals<strong>POPULATIE6</strong>,<strong>POPULATIE1974</strong>, of<strong>POPULATIONROADTYPE</strong>.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>Als geen van bovenstaande van toepassing is, is de standaardwaarde<strong>Geen</strong></li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>De zoekradius waarbinnen dichtheid berekend wordt. Eenheden zijn gebaseerd op de lineaire eenheid van de projectie.</p><p>Bijvoorbeeld, als de eenheden in meters zijn--om alle objecten binnen een buurt van één mijl mee te nemen--stel de zoekradius in op 1609,344 (want 1 mijl is 1609,344 meter).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Geeft aan of<strong>NoData</strong>waarden in de<strong>Waarde Raster</strong>de resultaten zullen beïnvloeden van de zone waarin ze vallen.</p><ul><li><strong>Ja</strong>--In een bepaalde zone zullen alleen pixels die een waarde hebben in de<strong>Waarde Raster</strong>worden gebruikt bij het bepalen van de uitvoerwaarde voor die zone.<strong>NoData</strong>pixels in de<strong>Waarde Raster</strong>zullen worden genegeerd in de statistische berekening. Dit is de standaardinstelling.</li><li><strong>Nee</strong>--Binnen een specifieke zone, als er<strong>NoData</strong>pixels bestaan in het<strong>Waarderaster</strong>, wordt geoordeeld dat er onvoldoende informatie is om statistische berekeningen uit te voeren voor alle pixels in die zone; daarom zal de gehele zone de <strong>NoData</strong>waarde op het outputraster ontvangen.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Bepaalt de methode van percentielinterpolatie die moet worden gebruikt wanneer het aantal te berekenen waarden uit het invoerraster gelijk is.</p><ul><li><strong>Auto-detectie</strong>-- Als het invoerwaarderaster van het type gehele pixel is, wordt de methode<strong>Dichtstbijzijnde</strong>gebruikt. Als het invoerwaarde raster van het type zwevend puntpixel is, dan wordt de<strong>Lineaire</strong>methode gebruikt. Dit is de standaardinstelling.</li><li><strong>Dichtstbijzijnde</strong>-De dichtstbijzijnde beschikbare waarde bij het gewenste percentiel wordt gebruikt. In dit geval is het type uitvoerpixel hetzelfde als dat van het invoerwaarderaster.</li><li><strong>Lineair</strong>--Het gewogen gemiddelde van de twee omringende waarden van het gewenste percentiel wordt gebruikt. In dit geval is het uitvoerpixeltype zwevend punt.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>Het te berekenen percentiel. De standaardwaarde is 90, voor het 90e percentiel.</p><p>De waarden kunnen variëren van 0 tot 100. Het 0e percentiel is in wezen gelijk aan de minimumstatistiek en het 100e percentiel is gelijk aan de maximumstatistiek. Een waarde van 50 zal in wezen hetzelfde resultaat produceren als de Mediaanstatistiek.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Bepaalt hoe de invoer multidimensionale waarde raster wordt verwerkt.</p><ul><li><strong>Huidige doorsnede</strong>--Statistieken worden berekend op basis van de huidige doorsnede van een multidimensionale dataset. Dit is de standaardinstelling.</li><li><strong>Alle doorsnedes</strong>--Statistieken worden berekend voor alle afmetingen (zoals tijd of diepte) van een multidimensionale dataset.</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>Statistisch type te berekenen.</p><ul><li><strong>Gemiddelde</strong>--Berekent het gemiddelde van alle pixels in het<strong>Waarderaster</strong>die tot dezelfde zone behoren als de uitvoerpixel.</li><li><strong>Meerderheid</strong>--Bepaalt de waarde die het vaakst voorkomt van alle pixels in het<strong>Waarderaster</strong>die tot dezelfde zone behoren als de uitvoerpixel.</li><li><strong>Maximaal</strong>--Bepaalt de grootste waarde van alle pixels in het<strong>Waarderaster</strong>die tot dezelfde zone behoren als de uitvoerpixel.</li><li><strong>Mediaan</strong>--Bepaalt de mediaanwaarde van alle pixels in het<strong>Waarderaster</strong>die tot dezelfde zone behoren als de uitvoerpixel.</li><li><strong>Minimum</strong>--Bepaalt de kleinste waarde van alle pixels in het<strong>Waarderaster</strong>die tot dezelfde zone behoren als de uitvoerpixel.</li><li><strong>Minderheid</strong>--Bepaalt de waarde die het minst vaak voorkomt van alle pixels in het<strong>Waarderaster</strong>die tot dezelfde zone behoren als de uitvoerpixel.</li><li><strong>Percentiel</strong>--Bepaalt een percentiel van alle pixels in het<strong>Waarderaster</strong>die tot dezelfde zone behoren als de uitvoerpixel. Het 90e percentiel wordt standaard berekend. U kunt bepalen welk percentiel u moet berekenen met de parameter<strong>Percentielwaarde</strong>.</li><li><strong>Bereik</strong>--Berekent het verschil tussen de grootste en de kleinste waarde van alle pixels in het<strong>Waarderaster</strong>die tot dezelfde zone behoren als de uitgangspixel.</li><li><strong>Standaardafwijking</strong>--Berekent de standaardafwijking van alle pixels in de<strong>Waarderaster</strong>die tot dezelfde zone behoren als de uitgangspixel.</li><li><strong>Som</strong>--Berekent de totale waarde van alle pixels in het<strong>Waarderaster</strong>die tot dezelfde zone behoren als de uitvoerpixel.</li><li><strong>Afwijking</strong>--Berekent het aantal unieke waarden voor alle pixels in het<strong>Waarderaster</strong>die tot dezelfde zone behoren als de uitvoerpixel</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Raster dat de waardes bevat waarop een statistiek berekend moet worden.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>Veld dat de waardes bevat die elke zone definiëren. Het kan een geheel getal of een tekstveld van het zoneraster zijn.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>Dataset die de zones definieert. De zones kunnen gedefinieerd worden door een geheel getal raster.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>Geeft aan hoe het type statistiek wordt berekend.</p><ul><li><strong>Rekenkundig</strong>--Berekent rekenkundige statistieken. Dit is de standaardinstelling.</li><li><strong>Circulair</strong>--Berekent circulaire statistieken die geschikt zijn voor cyclische grootheden, zoals kompasrichting in graden, dagtijden en fractionele delen van reële getallen.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>De hoogst mogelijke waarde (bovengrens) in de cyclische gegevens. Het is een positief getal, met een standaardwaarde van 360. Deze waarde vertegenwoordigt ook dezelfde hoeveelheid als de laagst mogelijke waarde (ondergrens).</p><p>Deze parameter is alleen van toepassing wanneer circulaire statistieken worden berekend.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>Het invoerraster waarvoor de grens tussen de zones wordt afgevlakt.</p><p>Het moet van het type \"integer\" zijn.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Specificeert het aantal keren dat het afvlakkingproces zal plaatsvinden, twee of één keer.</p><ul><li><p><strong>Aangevinkt</strong>--Voert twee keer een expansie- en krimpbewerking uit. Voor de eerste keer wordt de bewerking uitgevoerd volgens het opgegeven sorteertype. Vervolgens wordt een extra expansie- en krimpbewerking uitgevoerd met de prioriteit omgekeerd. Dit is de standaardinstelling.</p></li><li><p><strong>Onaangevinkt</strong>--Voert de expansie- en krimpwerking eenmaal uit volgens het sorteertype.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Specificeert het type sortering dat gebruikt moet worden in het gladmakingsproces. De sortering bepaalt de prioriteit waarmee cellen kunnen uitbreiden naar hun buren.</p><p>De sortering kan gebeuren op basis van de zonewaarde of het zone-gebied.</p><ul><li><p><strong>Niet sorteren</strong>--De zones zijn niet gesorteerd op grootte. Zones met grotere waarden hebben een hogere prioriteit om uit te breiden naar zones met kleinere waarden in de afgevlakte uitvoer. Dit is de standaardinstelling.</p></li><li><p><strong>Aflopend</strong>--Sorteer zones in aflopende volgorde op grootte. Zones met grotere totale oppervlakten hebben een hogere prioriteit om uit te breiden naar zones met kleinere totale oppervlakten. Deze optie heeft de neiging om de prevalentie van cellen uit kleinere zones in de afgevlakte uitvoer te elimineren of te verminderen.</p></li><li><p><strong>Oplopend</strong>--Soorten zones in oplopende volgorde van grootte. Zones met kleinere totale oppervlakten hebben een hogere prioriteit om uit te breiden naar zones met grotere totale oppervlakten. Deze optie heeft de neiging om de prevalentie van cellen uit kleinere zones in de afgevlakte output te behouden of te verhogen.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>De aggregatie-afmeting. Dit is de afmeting waarmee de variabelen worden geaggregeerd.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Specificeert de methode die wordt gebruikt om de ingevoerde multidimensionale gegevens te filteren voordat de aggregatie wordt uitgevoerd.</p><ul><li><strong>Alle</strong>--Het volledige bereik voor elke afmeting wordt gebruikt. Dit is de standaardinstelling.</li><li><strong>Met waarden</strong>--De afmeting wordt verdeeld aan de hand van een afmetingswaarde of lijst met waarden.</li><li><strong>Met bereik</strong>--De afmeting wordt verdeeld aan de hand van een bereik of een lijst met bereiken.</li><li><strong>Met iteratie</strong>--De afmeting wordt verdeeld over een gespecificeerde intervalgrootte.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Met de parameters voor iteratiedefinitie kunt u definiëren welke afmetingswaarden er gebruikt worden om de ingevoerde multidimensionale gegevens te filteren voor analyse wanneer de parameter <strong>Afmetingsdefinitie</strong>is ingesteld op<strong>Met iteratie</strong>.</p><ul><li><strong>Afmeting</strong>--De afmeting die voor het filteren wordt gebruikt.</li><li><strong>Begin van eerste iteratie</strong>--Het begin van het eerste interval. Dit interval wordt gebruikt om door de gegevensset te itereren.</li><li><strong>Einde eerste iteratie.</strong>--Het einde van het eerste interval. Dit interval wordt gebruikt om door de gegevensset te itereren.</li><li><strong>Stap</strong>--De frequentie waarmee de gegevens worden verdeeld.</li><li><strong>Unit</strong>--De iteratie-unit.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Specificeert het trefwoordinterval dat wordt gebruikt bij het aggregeren langs de afmeting.</p><p>Deze parameter is vereist wanneer het<strong>Type</strong>parameter is ingesteld op<strong>Intervaltrefwoord</strong>.</p><ul><li><strong>Per uur</strong>--De gegevenswaarden worden geaggregeerd in uurlijkse tijdsstappen en het resultaat includeert elk uur in de tijdserie. Dit is de standaardinstelling.</li><li><strong>Dagelijks</strong>--De gegevenswaarden worden geaggregeerd in dagelijkse tijdsstappen en het resultaat includeert elke dag in de tijdserie.</li><li><strong>Wekelijks</strong>--De gegevenswaarden worden geaggregeerd in wekelijkse tijdsstappen en het resultaat includeert elke week in de tijdserie.</li><li><strong>Per tien dagen</strong>--De gegevenswaarden worden geaggregeerd in 3 perioden van ieder 10 dagen. De laatste periode kan meer of minder dan 10 dagen bevatten. De uitvoer omvat 3 delen voor iedere maand.</li><li><strong>Per vijf dagen</strong>--De gegevenswaarden worden geaggregeerd in 6 perioden van ieder 5 dagen. De laatste periode kan meer of minder dan 5 dagen bevatten. De uitvoer omvat 6 delen voor iedere maand.</li><li><strong>Maandelijks</strong>--De gegevenssets worden geaggregeerd in maandelijkse tijdsstappen en het resultaat includeert elke maand in de tijdserie.</li><li><strong>Driemaandelijks</strong>--De gegevenssets worden geaggregeerd in driemaandelijkse tijdsstappen en het resultaat includeert elke drie maanden in de tijdserie.</li><li><strong>Jaarlijks</strong>--De gegevenssets worden geaggregeerd in jaarlijkse tijdsstappen en het resultaat includeert elk jaar in de tijdserie.</li><li><strong>Dagelijks terugkerend</strong>--De gegevenssets worden geaggregeerd in dagelijkse tijdsstappen en het resultaat includeert één geaggregeerde waarde per Juliaanse dag. De uitvoer omvat hooguit 366 dagelijkse tijdsdelen.</li><li><strong>Wekelijks terugkerend</strong>--De gegevenswaarden worden geaggregeerd in wekelijkse tijdsstappen en het resultaat bevat één geaggregeerde waarde per week. De uitvoer omvat hooguit 53 wekelijkse tijdsdelen.</li><li><strong>Maandelijks terugkerend</strong>--De gegevenswaarden worden geaggregeerd in maandelijkse tijdsstappen en het resultaat bevat één geaggregeerde waarde per maand. De uitvoer omvat hooguit 12 maandelijkse tijdsdelen.</li><li><strong>Driemaandelijks terugkerend</strong>--De gegevenswaarden worden geaggregeerd in driemaandelijkse tijdsstappen en het resultaat bevat één geaggregeerde waarde per drie maanden. De uitvoer bevat hooguit 4 tijdsstukken van drie maanden.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Specificeert de wiskundige methode die wordt gebruikt om de geaggregeerde delen in een interval te combineren.</p><ul><li><strong>Meerderheid</strong>--De pixelwaarde die het vaakst voorkwam wordt berekend voor alle delen in het interval.</li><li><strong>Maximum</strong>--De maximale waarde van een pixel wordt berekend voor alle delen in het interval.</li><li><strong>Gemiddelde</strong>--Het gemiddelde van de pixelwaarde wordt berekend voor alle delen in het interval. Dit is de standaardinstelling.</li><li><strong>Mediaan</strong>--De mediaanwaarde van een pixel wordt berekend voor alle delen in het interval.</li><li><strong>Minimum</strong>--De minimale waarde van een pixel wordt berekend voor alle delen in het interval.</li><li><strong>Minderheid</strong>--De pixelwaarde die het minst voorkwam wordt berekend voor alle delen in het interval.</li><li><strong>Bereik</strong>--Het bereik van de waardes voor een pixel wordt berekend voor alle delen in het interval.</li><li><strong>Standaardafwijking</strong>--De standaardafwijking van de waarden van een pixel wordt berekend voor alle delen in het interval.</li><li><strong>Som</strong>--De som van de waarden van een pixel worden berekend voor alle delen in het interval.</li><li><strong>Diversiteit</strong>--Het aantal unieke pixelwaarden word berekend voor alle delen in het interval.</li></ul><p>Alle opties hebben ook een equivalent met een 'Ignore NoData'-optie (GeenData negeren). Deze voeren de wiskundige taak uit voor alle geldige pixels in de afmeting en negeren alle GeenData-pixels.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>Intervalbereiken die in een tabel worden gespecificeerd worden gebruikt om groepen van waarden te aggregeren. De minimale en maximale waarden bepalen het bereik dat wordt inbegrepen.</p><p>Deze parameter is vereist wanneer de <strong>Type</strong>-parameter is ingesteld op <strong>Intervalbereiken</strong>.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>De ingevoerde multidimensionale raster.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Specificeert de afmetingsinterval waarvoor de gegevens worden geaggregeerd.</p><ul><li><strong>Alle</strong>--De variabele gegevens worden geaggregeerd voor alle delen. Dit is de standaardinstelling.</li><li><strong>Intervaltrefwoord</strong>--De variabele gegevens worden geaggregeerd met behulp van een bekende interval.</li><li><strong>Intervalwaarde</strong>--De variabele gegevens worden geaggregeerd met behulp van een interval en unit die door de gebruiker zijn gespecifieerd.</li><li><strong>Intervalbereiken</strong>De variabele gegevens worden geaggregeerd tussen gespecificeerde paren van waarden of data.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>Het formaat van het interval dat voor de aggregatie wordt gebruikt.</p><p>Deze parameter is vereist wanneer de<strong>Type</strong>parameter is ingesteld op<strong>Intervalwaarde.</strong>.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>De afmetingswaarden die worden gebruikt om de ingevoerde multidimensionale gegevens te filteren voor analyse. Deze parameter is vereist wanneer de parameter<strong>Afmetingsdefinitie</strong>is ingesteld op<strong>Met waarden</strong>.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>De variabele of variabelen die wordt/worden geaggregeerd in de gegeven afmeting.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>Het input Esri regressiedefinitiebestand (<strong>.ecd</strong>) dat de statistieken en informatie voor de specifieke gegevensset, regressiemodel en gekozen attributen bevat.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>De rastergegevensset of gegevenssets die de variabelen van de voorspeller voorstellen. Dat kan een raster met een enkele band, met meerdere banden, een multidimensionaal raster, een mozaïekgegevensset of een rasterverzameling zijn.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>Het type statistische berekening dat u wilt uitvoeren</p><p>De beschikbare statistieken zijn<strong>Meerderheid</strong>,<strong>Maximum</strong>,<strong>Gemiddelde</strong>,<strong>Mediaan</strong>,<strong>Minimum</strong>,<strong>Minderheid</strong>,<strong>Percentiel</strong>,<strong>Bereik</strong>,<strong>Standaardafwijking</strong>,<strong>Som</strong> en <strong>Verscheidenheid</strong>.</p><p>De standaardwaarde is<strong>Gemiddeld</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>Kleuren worden willekeurig toegewezen aan pixels die niet in de kleurenkaart zijn opgenomen.</p><ul><li>Ongecontroleerd--er wordt geen kleur toegewezen aan niet-toegewezen pixels. Dit is de standaardwaarde.</li><li>Gecontroleerd--er wordt een kleur toegewezen aan niet-toegewezen pixels.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>Als het Gram-Schmidt algoritme is gekozen, kunt u ook de sensor specificeren die de multiband-rasterinvoer heeft verzameld. Het kiezen van het sensortype stelt gepaste bandgewichten in.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>De waarde van het aantal slices voor of boven dat in het gedefinieerde venster moet worden opgenomen. De waarde moet een positief geheel getal zijn tussen 1 en 100. De standaardwaarde is 1.</p><p>De eenheid van deze parameter is slice.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>De waarde die zal worden gebruikt om een lineaire waarde af te ronden tot het bereik van een opgegeven circulair gemiddelde.</p><p>De waarde hiervan moet positief zijn. De standaardwaarde is 360 graden.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>De naam van de dimensie waarlangs het venster zal bewegen.</p><p>De standaardwaarde is de eerste dimensie die niet x, y is en die in het multidimensionale raster voor invoer wordt gevonden.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>De waarde van het aantal slices na of onder dat in het gedefinieerde venster moet worden opgenomen. De waarde moet een positief geheel getal zijn tussen 1 en 100. De standaardwaarde is 1.</p><p>De eenheid van deze parameter is slice.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>Het invoerraster kan alleen een multidimensionaal raster in Cloud Raster Format (<strong>.crf</strong>-bestand) zijn.</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>Specificeert hoe NoData-waarden zullen worden afgehandeld door de statistiekberekening.</p><ul><li><strong>Data</strong>--NoData-waarden in de waarde-invoer zullen worden genegeerd in de resultaten van het gedefinieerde venster waarin ze vallen Dit is de standaard.</li><li><strong>NoData</strong>--Uitvoerwaarden zullen NoData zijn als er NoData-waarden voorkomen in de invoer binnen het gedefinieerde venster.</li><li><strong>Opvullen NoData</strong>--NoData-celwaarden worden vervangen met behulp van de geselecteerde statistiek binnen het gedefinieerde venster.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Geeft de interpolatiemethode op die zal worden gebruikt wanneer de percentielwaarde tussen twee celwaarden valt.</p><ul><li><strong>Auto-detect</strong>--Als het invoerraster van het type geheel getal pixel is, wordt de methode <strong>Dichtstbijzijnd</strong> gebruikt. Als het invoerraster van het type zwevende pixel is, wordt de methode <strong>Lineair</strong> gebruikt. Dit is de standaardwaarde.</li><li><strong>Dichtstbijzijnd</strong>--De beschikbare waarde die het dichtst bij het percentiel ligt, wordt gebruikt. In dit geval zal het type uitvoerpixel hetzelfde zijn als dat van het invoerwaarderaster.</li><li><strong>Lineair</strong>--Het gewogen gemiddelde van de twee omringende waarden van het percentiel worden gebruikt. In dit geval zal de uitvoerpixel een zwevend punt zijn.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>Het percentiel dat zal worden berekend wanneer<strong>Percentiel</strong>als statistiektype is geselecteerd. De standaardwaarde is 90, voor het 90e percentiel.</p><p>De waarden kunnen variëren van 0 tot 100. Het 0de percentiel is in wezen equivalent aan de minimumstatistiek en het 100ste percentiel is equivalent aan de maximumstatistiek, met die uitzondering dat het resultaat een zwevend punt zal zijn. Een waarde van 50 zal hetzelfde resultaat produceren als de mediaanstatistiek.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Specificeert het statistiektype dat moet worden berekend.</p><p></p><ul><li><strong>Gemiddeld</strong>--Het gemiddelde (de gemiddelde waarde) van de cellen in het gedefinieerde venster zal worden berekend. Dit is de standaardwaarde.</li><li><strong>Circulair gemiddelde</strong>--Het circulaire gemiddelde van de cellen in het gedefinieerde venster zal worden berekend. Wanneer dit statistiektype is geselecteerd, wordt de parameter <strong>Circular Wrap Value</strong>beschikbaar.</li><li><strong>Meerderheid</strong>--De meerderheid (de waarde die het vaakst voorkomt) van de cellen in het gedefinieerde venster zal worden geïdentificeerd.</li><li><strong>Maximum</strong>--Het maximum (de hoogste waarde) van de cellen in het gedefinieerde venster zal worden geïdentificeerd.</li><li><strong>Mediaan</strong>--De mediaan van de nabijgelegen cellen zal worden geïdentificeerd.</li><li><strong>Minimum</strong>--Het minimum (de laagste waarde) van de nabijgelegen cellen zal worden geïdentificeerd.</li><li><strong>Percentiel</strong>--Een percentiel van de nabijgelegen cellen zal worden berekend. Wanneer het statistiektype is geselecteerd, worden de parameters <strong>Percentile Value</strong> en <strong>Percentile Interpolation Type</strong> beschikbaar. Gebruik deze nieuwe parameters respectievelijk om het percentiel aan te wijzen dat moet worden berekend en om het te gebruiken interpolatietype te kiezen.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>De dimensie die voor interpolatie moet worden gebruikt.</p><p>Deze parameter is vereist wanneer de <strong>dimensiedefinieparameter</strong> is ingesteld op <strong>Op interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Specificeert de methode die zal worden gebruikt om de multidimensionale invoergegevens te filteren voordat de interpolatie wordt uitgevoerd.</p><ul><li><strong>Op waarden</strong>--De dimensie zal worden verdeeld met behulp van een dimensiewaarde of een lijst met waarden.</li><li><strong>Op interval</strong>--De dimensie zal worden verdeeld met behulp van een bereik of een lijst met bereiken.</li><li><strong>Op doelraster</strong>--De dimensie zal worden verdeeld met behulp van een specifiek multidimensionaal doelraster.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>Het einde van de interval, dat wordt gebruikt om de hele gegevensset te doorlopen.</p><p>Deze parameter is vereist wanneer de parameter <strong>Dimensiedefinitie</strong> wordt ingesteld op<strong>Op interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Specificeert of NoData-waarden zullen worden genegeerd in de analyse.</p><ul><li>Ongecontroleerd--De Analyse zal in NoData resulteren als er NoData-waarden zijn in aangrenzende slices. Dit is de standaardwaarde.</li><li>Gecontroleerd--De analyse zal alleen slices gebruiken die geldige pixels bevatten en zal NoData-slices negeren.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Specificeert de methode die zal worden gebruikt om het raster te interpoleren.</p><ul><li><strong>Lineair</strong>--De uitvoer zal lineair worden geïnterpoleerd met behulp van de aangrenzende slices. Dit is de standaardwaarde.</li><li><strong>Dichtstbijzijnde</strong>--De uitvoer zal gebruik maken van de dichtstbijzijnde aangrenzende slice.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>Het multidimensionale invoerraster.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>De start van de interval, dat wordt gebruikt om de hele gegevensset te doorlopen.</p><p>Deze parameter is vereist wanneer de parameter <strong>Dimensiedefinitie</strong> wordt ingesteld op<strong>Op interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>De frequentie waarmee gegevens worden geïnterpoleerd.</p><p>Deze parameter is vereist wanneer de parameter<strong>Dimensiedefinitie</strong> is ingesteld op<strong>Op interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>Het doelraster dat door de dimensiedefinieit is opgegeven.</p><p>Deze parameter is vereist wanneer de parameter<strong>Dimensiedefinitie</strong> is ingesteld op <strong>Op doelraster</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>De intervaleenheid.</p><p>Deze parameter is vereist wanneer de parameter<strong>Dimensiedefinitie</strong> is ingesteld op <strong>Op interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>De dimensionale waarden die worden gebruikt om de multidimensionale invoergegevens te filteren voor analyse.</p><p>Deze parameter is vereist wanneer de parameter<strong>Dimensiedefinitie</strong> is ingesteld op<strong>Op waarden</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>De variabele of variabelen die zullen worden geïnterpoleerd door de dimensiedefinitie.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Specificeert of voor de uitvoer terreineffening zal worden uitgevoerd met <strong>Sigma nul</strong>of<strong>Gamma nul</strong>.</p><ul><li><strong>Gamma nul</strong>--De beta nul-terugverstrooiing zal worden genormaliseerd met het eenheidsgebied van een vlak dat een lokaal raakvlak heeft met de DEM, ook wel bekend als de lokale invalshoek. Dit is de standaardwaarde.</li><li><strong>Sigma nul</strong>--De beta nul-terugvertrooiing zal worden genormaliseerd met een DEM om het oppervlak te berekenen.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>De invoer-DEM.</p><p>De DEM wordt gebruikt om het lokale verlichte gebied in te schatten.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Specificeert of het verticale referentiesysteem van de invoer-DEM zal worden omgezet in ellipsoïde hoogte. De meeste hoogte-datasets zijn gerelateerd aan de orthometrische hoogte op zeeniveau; er is dus een correctie nodig in deze gevallen om te converteren naar ellipsoïde hoogte.</p><ul><li>Gecontroleerd--Er zal een geoïdecorrectie worden toegepast om de orthometrische hoogte om te zetten in ellipsoïdale hoogte (gebaseerd op EGM96-geoïde). Dit is de standaardwaarde.</li><li>Ongecontroleerd--Er zal geen geoïdecorrectie worden toegepast. Gebruik deze optie alleen als de DEM wordt uitgedrukt als een ellipsoïdale hoogte.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>De invoer-radargegevens.</p><p>Dit raster moet eerst radiometrisch worden gekalibreerd op beta nul.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>De berekening die aan de derde band s toegewezen.</p><p>Een bandnaam, band-id of een algebraïsche uitdrukking die gebruik maakt van de banden.</p><p>De ondersteunde operators zijn unair: plus (+), min (-), vermenigvuldigen (*) en delen (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>De berekening die aan de tweede band is toegewezen.</p><p>Een bandnaam, band-id of een algebraïsche uitdrukking die gebruik maakt van de banden.</p><p>De ondersteunde operators zijn unair: plus (+), minus (-), vermenigvuldigen (*) en delen (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>De ingevoerde multiband-rastergegevens.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Specificeert de methode die zal worden gebruikt om banden te extraheren.</p><ul><li>Bandnamen--Er zal gebruik worden gemaakt van de bandnaam die de golflengteinterval in het elektromagnetische spectrum vertegenwoordigt (zoals Rood, Bijna infrarood of Thermisch infrarood) of die de polarisatie vertegenwoordigt (zoals VH, VV, HH of HV) Dit is de standaardwaarde.</li><li>Band-ids--Er zal gebruik worden gemaakt van het bandnummer (zoals B1, B2 of B3).</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>De berekening die aan de derde band s toegewezen.</p><p>Een bandnaam, band-id of een algebraïsche uitdrukking die gebruik maakt van de banden.</p><p>De ondersteunde operators zijn unair: plus (+), min (-), vermenigvuldigen (*) en delen (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Kies het type oppervlaktefunctie dat rond de doelcel zal worden aangebracht.</p><ul><li>Kwadratisch--Een kwadratische oppervlaktefunctie wordt toegepast op de buurtcellen. Dit is het standaardtype.</li><li>Biquadratisch--Een biquadratische oppervlaktefunctie wordt toegepast op de buurtcellen.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>De uitvoer wordt berekend over deze afstand van het centrum van de doelcel. Het bepaalt de buurtgrootte. De standaardwaarde is de grootte van de invoerrastercel, wat resulteert in een buurt van 3 bij 3.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>De meeteenheden (graden of percentages) die zullen worden gebruikt voor het uitvoerhellingraster. Deze parameter is alleen actief wanneer<strong>Parametertype</strong>is<strong>Helling</strong>.</p><ul><li>Helling - De helling van de helling wordt berekend in graden. Dit is de standaardinstelling.</li><li>Procentuele stijging - De helling van de helling wordt berekend als procentuele stijging, ook wel procentuele helling genoemd.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Specificeert het type uitvoeroppervlakteparameter dat zal worden berekend.</p><ul><li>Helling--De mate van verandering in hoogte zal worden berekend. Dit is de standaardinstelling.</li><li>Aspect--De dalende richting van de maximale verandering voor elke cel wordt berekend.</li><li>Gemiddelde kromming--De totale kromming van het oppervlak wordt gemeten. Deze wordt berekend als het gemiddelde van de minimale en maximale kromming. Deze kromming beschrijft de intrinsieke convexiteit of concaafheid van het oppervlak, onafhankelijk van de richting of de invloed van de zwaartekracht.</li><li>Tangentiële (normale contour) kromming--De geometrische normale kromming loodrecht op de hellinglijn, rakend aan de contourlijn zal worden gemeten. Deze kromming wordt gewoonlijk toegepast om de convergentie of divergentie van de stroming over het oppervlak te karakteriseren.</li><li>Profiel (normale hellingslijn) kromming--De geometrische normale kromming langs de hellingslijn wordt gemeten. Deze kromming wordt gewoonlijk toegepast om de versnelling en vertraging van de stroming langs het oppervlak te karakteriseren.</li><li>Plan (geprojecteerde contour) Kromming--De kromming langs contourlijnen wordt gemeten.</li><li>Contour Geodetische Torsie--De snelheid van verandering in hellingshoek langs contourlijnen wordt gemeten.</li><li>Gaussische kromming--De totale kromming van het oppervlak wordt gemeten. Deze wordt berekend als het product van de minimale en maximale kromming.</li><li>Casorati kromming--De algemene kromming van het oppervlak wordt gemeten. Het kan nul zijn of een ander positief getal.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Geeft aan of geodetische azimuths zullen worden geprojecteerd om de hoekvervorming veroorzaakt door de ruimtelijke referentie-uitvoer te corrigeren. Deze parameter is enkel actief wanneer<strong>Parametertype</strong>is<strong>Aspect</strong>.</p><ul><li>Niet aangevinkt - Geodetische azimutsen worden niet geprojecteerd. Dit is de standaardinstelling.</li><li>Aangevinkt--Geodetische azimuths worden geprojecteerd.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>Het ingevoerde oppervlakteraster. Het kan een integer of een floating-point raster zijn.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Geeft aan of de buurtafstand varieert met landschapsveranderingen (adaptief). De maximale afstand wordt bepaald door de buurtafstand. De minimale afstand is de grootte van de ingevoerde rastercel.</p><ul><li>Niet aangevinkt - Op alle locaties wordt één (vaste) buurtafstand gebruikt. Dit is de standaardinstelling.</li><li>Aangevinkt - Op alle locaties wordt een adaptieve buurtafstand gebruikt.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Deze parameter is alleen actief wanneer<strong>Parametertype</strong>is<strong>Aspect</strong>.</p><ul><li>Niet aangevinkt - Aspect wordt gemeten vanaf de noordpool. Dit is de standaardinstelling.</li><li>Aangevinkt - Het perspectief wordt gemeten vanaf een punt op de evenaar.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>De lineaire eenheid van verticale z-waarden.</p><p>Zij wordt gedefinieerd door een verticaal coördinatenstelsel als dat bestaat. Indien er geen verticaal coördinatenstelsel bestaat, moet de z-eenheid gedefinieerd worden uit de eenheidslijst, om een correcte geodetische berekening te verzekeren.</p><ul><li>Inch--De lineaire eenheid is inches.</li><li>Foot--De lineaire eenheid is feet.</li><li>Yard--De lineaire eenheid is yards.</li><li>Mijl US--De lineaire eenheid is miles.</li><li>Nautische mijl--De lineaire eenheid is nautische mijl.</li><li>Millimeter--De lineaire eenheid is millimeter.</li><li>Centimeter--De lineaire eenheid is centimeter.</li><li>Meter--De lineaire eenheid is meter. Dit is de standaard.</li><li>Kilometer--De lineaire eenheid is kilometer.</li><li>Decimeter--De lineaire eenheid is decimeter.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>Een raster dat de locaties specificeert waar de analyse zal plaatsvinden.</p><p>Het raster kan het type integer of zwevende punt hebben.</p><p>Het masker zal worden samengesteld met alle cellen met een geldige waarde, inclusief nul. Cellen in de maskerinvoer die NoData hebben, zullen NoData zijn in de uitvoer.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Kies welke celgrootte u wilt gebruiken in het uitvoerraster. Als alle ingevoerde celgroottes gelijk zijn, zullen alle opties dezelfde resultaten opleveren.</p><ul><li>Eerste van--Gebruik de eerste celgrootte van de invoerrasters.</li><li>Min van--Gebruik de kleinste celgrootte van alle invoerrasters.</li><li>Max van--Gebruik de grootste celgrootte van alle invoerrasters. Dit is de standaardinstelling.</li><li>Gemiddelde van--Gebruik de gemiddelde celgrootte van alle invoerrasters.</li><li>Laatste van--Gebruik de laatste celgrootte van de invoerrasters.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>Specificeert de convergentiewaarde tussen twee opeenvolgende iteraties. Wanneer epsilon kleiner dan of gelijk is aan de opgegeven waarde, stopt de iteratie en worden de resultaten van de laatste iteratie gebruikt.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Kies welke extent moet worden gebruikt in het uitvoerraster:</p><ul><li><p>Eerste van - Gebruik de extent van het eerste invoerraster om de verwerkingsextent te bepalen.</p></li><li>Kruispunt van - gebruik de extent van de overlappende pixels om de verwerkingsextent te bepalen. Dit is de standaardinstelling.</li><li>Vereniging van--Gebruik de omvang van alle rasters om de verwerkingsomvang te bepalen.</li><li>Laatste van--Gebruik de omvang van het laatste invoerraster om de verwerkingsomvang te bepalen.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Specificeert het maximumaantal uit te voeren iteraties. De berekening eindigt wanneer deze waarde wordt bereikt, ongeacht de instelling voor <strong>Epsilon</strong>.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>De ingevoerde multibandrasters.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>Het invoerraster dat cumulatieve kostenafstand vanaf de eerste bron vertegenwoordigt.</p><p>Dit moet een cumulatieve kostenafstanduitvoer uit de functie <strong>Afstandsaccumulatie</strong> of <strong>Afstandstoewijzing</strong> zijn.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>Het invoerraster dat cumulatieve kostenafstand vanaf de tweede bron vertegenwoordigt.</p><p>Dit moet een cumulatieve kostenafstanduitvoer uit de functie <strong>Afstandsaccumulatie</strong> of <strong>Afstandstoewijzing</strong> zijn.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>Het invoerterugwegraster uit de eerste bron.</p><p>Dit is een rastergegevensset die zowel de richting van de volgende cel identificeert als het pad met de laagste kosten terug naar de eerste bron. Dit is uitvoer uit de functie <strong>Afstandsaccumulatie</strong> of <strong>Afstandstoewijzing</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>Het invoerterugwegraster uit de tweede bron.</p><p>Dit is een rastergegevensset die zowel de richting van de volgende cel identificeert als het pad met de laagste kosten terug naar de eerste bron. Dit is uitvoer uit de functie <strong>Afstandsaccumulatie</strong> of <strong>Afstandstoewijzing</strong>.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>Een percentuele of cumulatieve kostendrempel die zal bepalen of een gegeven cel zal worden opgenomen in het uitvoercorridorraster.</p><p>Wanneer de parameter <strong>Drempelmethode</strong> is ingesteld op <strong>Percentage van goedkoopste</strong>, geeft de opgegeven waarde de percentuele toename aan die moet worden toegepast aan de hand van de minimumwaarde van de opgetelde cumulatieve kostenafstandrasters. Wanneer de parameter <strong>Drempelmethode</strong> is ingesteld op <strong>Cumulatieve kosten</strong>, geeft de waarde cellen aan die opgetelde cumulatieve kosten bevatten die gelijk is aan of lager is dan de waarde die in de corridor zal worden opgenomen.</p><p>Deze parameter is alleen actief als de parameter <strong>Drempelmethode</strong> is ingesteld op <strong>Percentage van goedkoopste</strong> of <strong>Cumulatieve kosten</strong>.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Specificeert hoe de drempel zal worden gedefinieerd.</p><p></p><ul><li><strong>Geen drempel</strong> - Er zal geen drempel worden toegepast en de resulterende corridor zal de volledige extent van de invoerrasters omvatten. Dit is de standaardwaarde.</li><li><strong>Percentage van goedkoopste</strong> - De drempel zal worden gedefinieerd als een percentage van de minimumwaarde van de opgetelde cumulatieve kostenafstandrasters.</li><li><strong>Cumulatieve kosten</strong> - De drempel zal worden gedefinieerd in eenheden voor cumulatieve kostenafstand.</li></ul>"
};
const helpTexts_nl = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_nl);


//# sourceMappingURL=help-texts.nl-63c7fa4f.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,