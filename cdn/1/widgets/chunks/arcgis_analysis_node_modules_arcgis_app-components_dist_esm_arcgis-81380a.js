"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-81380a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-item-classification.entry.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-item-classification.entry.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_item_classification: () => (/* binding */ ArcgisItemClassification)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _classification_7bcadbab_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./classification-7bcadbab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/classification-7bcadbab.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */












const arcgisItemClassificationCss = ".portal-item-classification-viewer{--calcite-modal-content-padding:0}.saveIndicator{display:inline-flex;width:100%;align-items:center;justify-content:center}.savingIndicator{margin:0 10px}.classification-info-tip{margin-left:3px;cursor:pointer}";

const ArcgisItemClassification = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.orgClassificationType = null;
        this.orgItemClassificationValue = null;
        this.retrieveClassificationSchema = async () => {
            var _a, _b;
            try {
                const url = `${this.config.restBaseUrl}portals/self/ClassificationSchema`;
                const response = await (0,_classification_7bcadbab_js__WEBPACK_IMPORTED_MODULE_2__.r)(url);
                this.classificationSchema = response;
                this.classificationCategoryArr = (_a = response.classifications) === null || _a === void 0 ? void 0 : _a.map((classification) => {
                    return {
                        id: classification.id,
                        value: classification.label,
                        label: classification.label,
                        color: classification.color
                    };
                });
                this.setAttributeCategory((_b = response.attributeCategories) === null || _b === void 0 ? void 0 : _b[0]);
            }
            catch (error) {
                console.log("error: ", error);
                this.handleDisplayNotificationModal({
                    alertIndicatorActive: true,
                    alertIndicatorType: "danger",
                    alertIndicatorIcon: "exclamation-mark-triangle",
                    alertIndicatorInfo: error === null || error === void 0 ? void 0 : error.message
                });
            }
        };
        this.retrieveItemClassificationValue = async () => {
            var _a;
            try {
                const url = `${this.config.restBaseUrl}content/users/${this.userName}/items/${this.itemId}`;
                const response = await (0,_classification_7bcadbab_js__WEBPACK_IMPORTED_MODULE_2__.a)(url);
                const itemClassification = (_a = response.item) === null || _a === void 0 ? void 0 : _a.classification;
                this.itemClassificationValue = !!itemClassification
                    ? JSON.parse(itemClassification)
                    : { classification: this.classificationSchema.classifications[0].label };
                this.orgItemClassificationValue = structuredClone(this.itemClassificationValue);
                this.classificationType = this.convertClassificationType(this.retrieveClassificationType(!!itemClassification
                    ? { label: JSON.parse(itemClassification).classification }
                    : this.classificationSchema.classifications[0]));
                this.orgClassificationType = structuredClone(this.itemClassificationValue);
                this.displayClassificationVal(this.itemClassificationValue);
                if (!!itemClassification) {
                    this.doesValidate = this.validateClassificationVal(JSON.parse(itemClassification));
                }
            }
            catch (error) {
                console.log("error: ", error);
                this.handleDisplayNotificationModal({
                    alertIndicatorActive: true,
                    alertIndicatorType: "danger",
                    alertIndicatorIcon: "exclamation-mark-triangle",
                    alertIndicatorInfo: error === null || error === void 0 ? void 0 : error.message
                });
            }
        };
        this.hasNonexistingAttribute = (classificationPropertyArr) => {
            let propRes = classificationPropertyArr.find((property) => !this.classificationSchema.attributes[property]);
            return !!propRes;
        };
        this.hasDisabledAttribute = (classificationPropertyArr, itemClassification) => {
            const check = async () => {
                for (const index in classificationPropertyArr) {
                    const property = classificationPropertyArr[index];
                    try {
                        const isEnabled = await (0,_classification_7bcadbab_js__WEBPACK_IMPORTED_MODULE_2__.i)(property, this.classificationSchema, JSON.stringify(itemClassification));
                        if (!isEnabled) {
                            hasDisabledAtt = true;
                            break;
                        }
                    }
                    catch (error) {
                        hasDisabledAtt = true;
                        break;
                    }
                }
            };
            let hasDisabledAtt = false;
            check();
            return hasDisabledAtt;
        };
        this.hasUpdatedAttributeValues = (classificationPropertyArr, itemClassification) => {
            const check = async () => {
                for (const index in classificationPropertyArr) {
                    const property = classificationPropertyArr[index];
                    const propertyValues = itemClassification[property];
                    const layoutElement = this.classificationSchema.layoutElements[property] || "text";
                    if (layoutElement.includes("-select")) {
                        try {
                            const valueExpressionResult = await (0,_classification_7bcadbab_js__WEBPACK_IMPORTED_MODULE_2__.e)(property, this.classificationSchema, JSON.stringify(this.itemClassificationValue));
                            propertyValues.forEach((propertyVal) => {
                                if (valueExpressionResult.find((result) => result.label !== propertyVal)) {
                                    hasUnmatch = true;
                                    return;
                                }
                            });
                        }
                        catch (error) {
                            hasUnmatch = true;
                            return;
                        }
                    }
                }
            };
            let hasUnmatch = false;
            check();
            return hasUnmatch;
        };
        this.validateClassificationVal = (itemClassification) => {
            var _a;
            const classificationPropertyArr = (_a = Object.keys(itemClassification)) === null || _a === void 0 ? void 0 : _a.filter((key) => key !== "classification");
            // item classification is empty
            if (classificationPropertyArr.length === 0) {
                return true;
            }
            // loop for any non-existing attribute in the classification schema
            if (this.hasNonexistingAttribute(classificationPropertyArr)) {
                return false;
            }
            // loop for any non-enabled attribute in the classification schema
            if (this.hasDisabledAttribute(classificationPropertyArr, itemClassification)) {
                return false;
            }
            // loop for any updated attribute in the classification schema
            if (this.hasUpdatedAttributeValues(classificationPropertyArr, itemClassification)) {
                return false;
            }
            return true;
        };
        this.saveItemClassificationValue = async () => {
            try {
                this.isSaving = true;
                const url = `${this.config.restBaseUrl}content/users/${this.userName}/items/${this.itemId}/update`;
                const response = await (0,_classification_7bcadbab_js__WEBPACK_IMPORTED_MODULE_2__.s)(url, this.itemClassificationValue);
                if (response.success) {
                    this.isSaving = false;
                    this.handleDisplayNotificationModal({
                        alertIndicatorActive: true,
                        alertIndicatorType: "success",
                        alertIndicatorIcon: "check-circle",
                        alertIndicatorInfo: this.i18n.classificationValueSaved
                    });
                    this.closeClassificationEditModal("save");
                    // pull data again
                    this.retrieveClassificationSchema();
                    this.retrieveItemClassificationValue();
                }
            }
            catch (error) {
                console.log("error: ", error);
                this.isSaving = false;
                this.handleDisplayNotificationModal({
                    alertIndicatorActive: true,
                    alertIndicatorType: "danger",
                    alertIndicatorIcon: "exclamation-mark-triangle",
                    alertIndicatorInfo: error === null || error === void 0 ? void 0 : error.message
                });
            }
        };
        // Open notification modal
        this.handleDisplayNotificationModal = (alertIndicator) => {
            this.alertIndicator = alertIndicator;
            this.isNotificationModalActive = true;
        };
        // Close notification modal
        this.handleCloseNotificationModal = () => (this.isNotificationModalActive = false);
        this.itemId = undefined;
        this.userName = undefined;
        this.config = undefined;
        this.isDisplayModal = undefined;
        this.setIsDisplayModal = undefined;
        this.displayClassificationVal = undefined;
        this.api = undefined;
        this.classificationSchema = null;
        this.classificationCategoryArr = [];
        this.classificationType = null;
        this.itemClassificationValue = null;
        this.attributeCategory = "General";
        this.doesValidate = true;
        this.isSaving = false;
        this.isResetting = false;
        this.isNotificationModalActive = false;
        this.alertIndicator = {
            alertIndicatorActive: false,
            alertIndicatorType: "danger",
            alertIndicatorIcon: "exclamation-mark-triangle",
            alertIndicatorInfo: ""
        };
    }
    async componentWillLoad() {
        var _a;
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el);
        this.i18n = locale[0];
        this.retrieveClassificationSchema();
        this.retrieveItemClassificationValue();
        (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c.api) !== null && _a !== void 0 ? _a : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_3__.c.api = this.api);
    }
    retrieveClassificationType(classification) {
        var _a;
        return (_a = this.classificationSchema) === null || _a === void 0 ? void 0 : _a.classifications.find((classificationItem) => classificationItem.label === classification.label);
    }
    convertClassificationType(classification) {
        return {
            id: classification.id,
            color: classification.color,
            value: classification.label,
            label: classification.label
        };
    }
    setClassificationType(newType) {
        this.classificationType = newType;
    }
    setItemClassificationValue(newValue) {
        this.itemClassificationValue = newValue;
    }
    setAttributeCategory(category) {
        this.attributeCategory = category;
    }
    openClassificationEditModal() {
        this.setIsDisplayModal(true);
        if (!this.doesValidate) {
            this.handleDisplayNotificationModal({
                alertIndicatorActive: true,
                alertIndicatorType: "danger",
                alertIndicatorIcon: "exclamation-mark-triangle",
                alertIndicatorInfo: this.i18n.itemClassificationValidateError
            });
        }
    }
    closeClassificationEditModal(action) {
        if (action === "cancel") {
            this.classificationType = this.orgClassificationType;
            this.itemClassificationValue = this.orgItemClassificationValue;
        }
        this.setIsDisplayModal(false);
    }
    resetClassificationValue() {
        this.setClassificationType(this.convertClassificationType(this.retrieveClassificationType(Object.assign({}, this.classificationSchema.classifications[0]))));
        this.setItemClassificationValue({
            classification: this.classificationSchema.classifications[0].label
        });
    }
    displayIntoTip() {
        console.log("test");
    }
    renderHeader() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", { slot: "header" }, this.i18n.itemClassificationEditLabel, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { class: "classification-info-tip", scale: "s", icon: "information", onClick: this.displayIntoTip })));
    }
    renderContent() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content", class: "portal-item-classification-content" }, 
        /* Current Selection */
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("item-classification-info", { i18n: this.i18n, itemClassificationValue: this.itemClassificationValue, classificationSchema: this.classificationSchema }), 
        /* classification category */
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("item-classification-category", { i18n: this.i18n, classificationCategoryArr: this.classificationCategoryArr, classificationType: this.classificationType, setClassificationType: this.setClassificationType.bind(this), setItemClassificationValue: this.setItemClassificationValue.bind(this) }), 
        /* classification content */
        !!this.classificationSchema && !!this.itemClassificationValue && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("item-classification-content", { itemClassificationValue: this.itemClassificationValue, classificationSchema: this.classificationSchema, attributeCategory: this.attributeCategory, setAttributeCategory: this.setAttributeCategory.bind(this), setItemClassificationValue: this.setItemClassificationValue.bind(this), onArcgisItemClassificationContentDisplayNotification: (e) => this.handleDisplayNotificationModal(e.detail), isSaving: this.isSaving }))));
    }
    renderFooter() {
        const { i18n } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { "aria-label": i18n.reset, scale: "l", slot: "back", width: "full", appearance: "outline", disabled: this.isSaving, onClick: () => this.resetClassificationValue() }, this.isResetting ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "resetIndicator" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: "resettingClassification", scale: "m", inline: true }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "resetIndicator" }, i18n.resetting))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, i18n.reset))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { "aria-label": i18n.save, scale: "l", slot: "primary", width: "full", onClick: () => this.saveItemClassificationValue() }, this.isSaving ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "saveIndicator" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: "savingClassification", scale: "m", inline: true }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "savingIndicator" }, i18n.saving))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, i18n.save))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { "aria-label": i18n.cancel, scale: "l", slot: "secondary", width: "full", appearance: "outline", onClick: () => this.closeClassificationEditModal("cancel"), disabled: this.isSaving }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, i18n.cancel))));
    }
    renderModal() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, this.renderHeader(), this.renderContent(), this.renderFooter()));
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { onClick: () => this.openClassificationEditModal() }, this.i18n.openModal), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { class: "portal-item-classification-viewer", open: this.isDisplayModal, scale: "m", widthScale: "m", outsideCloseDisabled: true, onCalciteModalClose: () => this.closeClassificationEditModal("cancel") }, this.renderModal()), 
        /* Show notification indicator */
        this.isNotificationModalActive && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("item-classification-notification", { i18n: this.i18n, alertIndicator: this.alertIndicator, onArcgisItemClassificationNotificationClose: () => {
                this.handleCloseNotificationModal();
            } }))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisItemClassification.style = arcgisItemClassificationCss;



//# sourceMappingURL=arcgis-item-classification.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/classification-7bcadbab.js":
/*!********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/classification-7bcadbab.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ requestItemClassificationValue),
/* harmony export */   e: () => (/* binding */ evaluateValueExpression),
/* harmony export */   i: () => (/* binding */ isAttributeEnabled),
/* harmony export */   r: () => (/* binding */ requestClassificationSchema),
/* harmony export */   s: () => (/* binding */ submitItemClassificationValue)
/* harmony export */ });
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




function requestItemClassificationValue(url) {
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_2__.r)(url);
}
function requestClassificationSchema(url) {
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_2__.r)(url);
}
function submitItemClassificationValue(url, classificationValue) {
    const data = { classification: JSON.stringify(classificationValue) };
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_2__.r)(url, data, {}, "post");
}
async function isAttributeEnabled(attributeId, classificationSchema, valueJson) {
    var _a;
    const attributeIdVal = (_a = classificationSchema === null || classificationSchema === void 0 ? void 0 : classificationSchema.attributes) === null || _a === void 0 ? void 0 : _a[attributeId];
    const isAttributeEnabled = attributeIdVal === null || attributeIdVal === void 0 ? void 0 : attributeIdVal.isAttributeEnabled;
    if (!attributeIdVal) {
        return false;
    }
    if (!isAttributeEnabled) {
        return true;
    }
    const arcadeInput = {
        schemaJsonString: JSON.stringify(classificationSchema),
        valueJsonString: valueJson,
        attributeId: attributeId
    };
    const arcadeScriptExecutor = await getExecutor(isAttributeEnabled);
    return arcadeScriptExecutor.execute(arcadeInput);
}
async function evaluateValueExpression(attributeId, classificationSchema, valueJson) {
    var _a, _b;
    const attributeIdVal = (_a = classificationSchema === null || classificationSchema === void 0 ? void 0 : classificationSchema.attributes) === null || _a === void 0 ? void 0 : _a[attributeId];
    const valueExpression = attributeIdVal === null || attributeIdVal === void 0 ? void 0 : attributeIdVal.valueExpression;
    const validValues = attributeIdVal === null || attributeIdVal === void 0 ? void 0 : attributeIdVal.validValues;
    const validValuesMap = attributeIdVal === null || attributeIdVal === void 0 ? void 0 : attributeIdVal.validValuesMap;
    if (!attributeIdVal) {
        return null;
    }
    if (!!(validValues === null || validValues === void 0 ? void 0 : validValues.length)) {
        return validValues;
    }
    if (!!validValuesMap && !!((_b = Object.keys(validValuesMap)) === null || _b === void 0 ? void 0 : _b.length)) {
        return validValuesMap;
    }
    if (!valueExpression) {
        return null;
    }
    const arcadeInput = {
        schemaJsonString: JSON.stringify(classificationSchema),
        valueJsonString: valueJson,
        attributeId: attributeId
    };
    const arcadeScriptExecutor = await getExecutor(valueExpression);
    return arcadeScriptExecutor.execute(arcadeInput);
}
async function getExecutor(arcadeExpressionInput) {
    if ((_config_75adf962_js__WEBPACK_IMPORTED_MODULE_0__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_0__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_0__.c.api) === 3) {
        return getExecutor3x(arcadeExpressionInput);
    }
    const [arcade] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__.l)(["esri/arcade"]);
    return arcade.createArcadeExecutor(arcadeExpressionInput, {
        variables: [
            {
                name: "schemaJsonString",
                type: "text"
            },
            {
                name: "valueJsonString",
                type: "text"
            },
            {
                name: "attributeId",
                type: "text"
            }
        ]
    });
}
async function getExecutor3x(arcadeExpressionInput) {
    const [visualizationProfile] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__.l)(["esri/arcadeProfiles/visualizationProfile"]);
    /* const profile = */ await visualizationProfile.initialize([arcadeExpressionInput]);
    // TODO: implement working executor in 3.x here
    return {
        execute: () => false
    };
}



//# sourceMappingURL=classification-7bcadbab.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,