"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-2a3893"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-type_3.entry.js":
/*!*************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-type_3.entry.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_panels_type: () => (/* binding */ ArcgisSmartMappingPanelsType),
/* harmony export */   arcgis_smart_mapping_type_actions_popover: () => (/* binding */ ArcgisSmartMappingTypeActionsPopover),
/* harmony export */   arcgis_smart_mapping_type_add_value: () => (/* binding */ ArcgisSmartMappingTypeAddValue)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./symbolStyler-04635b2b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/symbolStyler-04635b2b.js");
/* harmony import */ var _type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./type-0ace5d2e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/type-0ace5d2e.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _sortable_esm_7e785780_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sortable.esm-7e785780.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/sortable.esm-7e785780.js");
/* harmony import */ var _date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./date-79c7d93c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _location_e26b539f_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./location-e26b539f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */















const arcgisSmartMappingPanelsTypeCss = ":host{width:100%}.flow-item{height:100%}.hidden{display:none}.type-block{overflow-x:hidden}.check-placeholder{width:32px;height:24px}.type-panel-msg{font-size:80%;margin:5px}.toggle-button{margin-top:2px}.toggle-div{padding-top:6px}.top-padding{padding-top:10px}.symbol-selector{background-color:rgb(255, 255, 255);display:flex;padding:9px 9px;justify-content:space-between;align-items:center;border-radius:3px;cursor:pointer;transition:box-shadow 250ms ease-in-out;box-shadow:0 0 0 1px #e0e0e0}.symbol-selector :last-child{margin-bottom:0}.symbol-selector :last-child svg{fill:#c0c0c0}.symbol-selector :hover{box-shadow:0 0 0 1px #c0c0c0}.symbol-selector :hover svg{fill:#404040}.symbol-selector--selected,.symbol-selector--selected:hover{outline:1px solid var(--calcite-color-brand)}.symbol-selector--selected svg,.symbol-selector--selected:hover svg{fill:#404040}.symbol-is-white{background-color:#f3f3f3}.symbol-icon{min-width:26px;display:flex}.symbol-icon div{margin:auto}.symbol-icon.transparent{height:15px;width:100%}.symbol-icon.transparent svg{height:15px;width:95%;stroke:#e0e0e0;stroke-width:1px}.group-header{display:flex;padding:6px 0;justify-content:space-between;align-items:center;border-bottom:1px solid #e0e0e0}.group-heading{font-weight:bold}.no-group-heading{color:rgba(50, 50, 50, 0.4);font-style:italic}.group{border:1px solid #e0e0e0;margin:5px 0}.group-text{padding:3px 9px 0 9px;word-break:break-all}.group-text-active{cursor:pointer}.group-count{padding-top:7px}.group-count-no-menu{padding-right:3px}.values-items-only{padding:6px 6px}.value{display:flex;padding:6px 0;justify-content:space-between;align-items:center}.value-part1{display:flex;width:-webkit-fill-available;width:-moz-available;align-items:center;margin:0 5px}.value-part2{display:flex}.group-handle,.class-handle{color:rgba(50, 50, 50, 0.4);cursor:grab;width:16px;display:flex}.group-handle-disabled,.class-handle-disabled{color:#e0e0e0;width:16px;display:flex}.value-symbol{margin:0 5px;padding:4px;cursor:pointer}.value-text{padding:0 9px;word-break:break-all;cursor:pointer}.value-count{padding:3px 3px 0 3px}.menu-placeholder{width:32px}.value-handle-placeholder{min-width:16px}.other{border:1px solid #e0e0e0}.default-value{border-bottom:1px solid #e0e0e0}.other-value-text{cursor:default}.symbol-styler-panel{width:328px;min-height:300px}.symbol-styler-div{width:100%}.avatar{background-color:#f0efef}.value-text:focus,.group-text:focus,.symbol:focus{outline:2px solid var(--calcite-color-brand)}";

const ArcgisSmartMappingPanelsType = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsTypeBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsTypeBackClick", 7);
        this.arcgisSmartMappingPanelsTypeClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsTypeClose", 7);
        this.arcgisSmartMappingPanelsTypeClusterRequiresUpdate = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsTypeClusterRequiresUpdate", 7);
        this.arcgisSmartMappingPanelsTypeError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsTypeError", 7);
        this.groupMenuNodes = [];
        this.groupInputNodes = [];
        this.groupTextNodes = [];
        this.valueInputNodes = [];
        this.valueTextNodes = [];
        this.symbolNodes = [];
        this.checkedClasses = [];
        this.classSortable = [];
        this.groupSortable = undefined;
        this.otherSortable = undefined;
        this.maxCountOtherValues = 200;
        this.symbolStylerOpen = false;
        this.dragRenderToggle = true;
        this.hideRotation = false;
        this.hideTransparency = false;
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //-------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //-------------------------------------------------------------------
    async componentWillLoad() {
        var _a;
        const { layer: smLayer, mapView, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.lastDefault = {
            defaultSymbol: renderer.defaultSymbol || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView),
            defaultLabel: renderer.defaultLabel || strings.panels.type.other
        };
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
        this.originalOrderBy = layer.orderBy;
        // get all unique values
        try {
            const result = await (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.c)({
                fieldInfos: [
                    {
                        field: renderer.field,
                        expression: renderer.valueExpression,
                        expressionTitle: renderer.valueExpressionTitle
                    }
                ],
                typeScheme: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__._)()
            });
            if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.q)(layer) && rendererType === "type-size") {
                // need to convert fill symbols to marker symbols
                let refSymbol = ((_a = renderer.uniqueValueInfos) === null || _a === void 0 ? void 0 : _a.length)
                    ? renderer.uniqueValueInfos[0].symbol
                    : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView);
                if (refSymbol.type !== "simple-marker") {
                    // might be a picture marker
                    refSymbol = new modules.SimpleMarkerSymbol();
                }
                result.uniqueValueInfos.map((info) => {
                    const newSymbol = modules.esriLang.clone(refSymbol);
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.r)(newSymbol, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(info.symbol));
                    info.symbol = newSymbol;
                });
            }
            _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.allUniqueValues = result.uniqueValueInfos;
            return Promise.resolve(result);
        }
        catch (error) {
            this.arcgisSmartMappingPanelsTypeError.emit({
                message: error,
                type: "error"
            });
            return Promise.reject(error);
        }
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    disconnectedCallback() {
        this.closePopovers();
    }
    //-------------------------------------------------------------------
    //
    //  Render Methods
    //
    //-------------------------------------------------------------------
    render() {
        var _a;
        const { hideLayerTitle, isRTL, layer, mapImageSublayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const title = hideLayerTitle ? undefined : (_a = mapImageSublayer === null || mapImageSublayer === void 0 ? void 0 : mapImageSublayer.title) !== null && _a !== void 0 ? _a : layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.C.rtl]: isRTL
            }, heading: strings.panels.type.styleOptions, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, description: title, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsTypeBackClick.emit(), ref: (node) => (this.flowItemNode = node) }, this.renderVisualizationContent(), this.renderTransparency(), this.renderRotation(), this.renderDoneButton(), this.renderCancelButton())));
    }
    renderVisualizationContent() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const hasOtherBlocks = !this.hideTransparency || !this.hideRotation;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(renderer.field);
        const isDate = (field === null || field === void 0 ? void 0 : field.simpleFieldType) === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE ||
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.z)(field === null || field === void 0 ? void 0 : field.layerField) === "date-only";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "type-block", heading: isDate ? strings.panels.type.typeStyleDate : strings.panels.type.typeStyle, collapsible: hasOtherBlocks, open: true }, this.renderTypesSymbol(), this.renderDrawingOrder(), this.renderGroups(), this.renderBackgroundStyle()));
    }
    renderTypesSymbol() {
        var _a;
        const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = renderer.uniqueValueGroups;
        if (!(groups === null || groups === void 0 ? void 0 : groups.length) || !((_a = groups[0].classes) === null || _a === void 0 ? void 0 : _a.length)) {
            return null;
        }
        const allClasses = [];
        groups.forEach((group) => group.classes.forEach((uvClass) => allClasses.push(uvClass)));
        const schemes = modules.typeSchemes.getSchemes({
            basemap: mapView.map.basemap,
            geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.D)(layer)
        });
        const colorRampsAndSchemes = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a9)(schemes, Math.min(allClasses.length, 10));
        const defaultColors = colorRampsAndSchemes[0].colors;
        let colors = (allClasses === null || allClasses === void 0 ? void 0 : allClasses.length)
            ? allClasses
                .slice(0, 10)
                .map((uvClass, idx) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(uvClass.symbol) ||
                new modules.esriColor(defaultColors[idx % defaultColors.length]))
            : [];
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { rampType: "discrete", colors: colors, type: "type-ramp", onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
            } }));
    }
    renderDrawingOrder() {
        const { layer, mapImageSublayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (mapImageSublayer) {
            return null;
        }
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "toggle-div", layout: "inline-space-between" }, strings.panels.type.drawingOrder, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { class: "toggle-button", scale: "s", checked: renderer.orderByClassesEnabled, onCalciteSwitchChange: (event) => {
                const node = event.target;
                this.handleDrawingOrderToggle(node.checked);
            } })));
    }
    renderGroups() {
        var _a, _b;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const hasNoGroup = !((_a = renderer.uniqueValueGroups) === null || _a === void 0 ? void 0 : _a.length);
        const fieldName = renderer.field
            ? (_b = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(renderer.field)) === null || _b === void 0 ? void 0 : _b.label
            : renderer.valueExpressionTitle || strings.expression;
        const typeGroups = hasNoGroup
            ? [this.renderNoGroup()]
            : renderer.uniqueValueGroups.map((uniqueValueGroup, groupIdx) => this.renderGroup(uniqueValueGroup, groupIdx));
        const otherValues = this.renderOtherValues();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "top-padding" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, fieldName), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: renderer.uniqueValueGroups.length, ref: (node) => {
                var _a;
                if (node) {
                    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                    if (renderer.uniqueValueGroups.length) {
                        (_a = this.groupSortable) === null || _a === void 0 ? void 0 : _a.destroy();
                        this.groupSortable = _sortable_esm_7e785780_js__WEBPACK_IMPORTED_MODULE_7__.S.create(node, {
                            group: { name: "shared", pull: true, put: false },
                            dataIdAttr: "group-sort-values",
                            ghostClass: "avatar",
                            onSort: () => this.handleSortGroups(),
                            handle: `.group-handle`
                        });
                    }
                }
            } }, typeGroups), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "other", key: `${otherValues.length}${this.dragRenderToggle}` }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: typeGroups.length ? "" : "values-items-only" }, this.renderDefaultValue()), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (node) => {
                var _a;
                if (node) {
                    (_a = this.otherSortable) === null || _a === void 0 ? void 0 : _a.destroy();
                    this.otherSortable = _sortable_esm_7e785780_js__WEBPACK_IMPORTED_MODULE_7__.S.create(node, {
                        group: { name: "shared", pull: false, put: true },
                        filter: ".nodrag",
                        sort: false
                    });
                }
            } }, otherValues, this.renderMsg()))));
    }
    renderNoGroup() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-header" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value-part1" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-handle-disabled", "aria-hidden": "true" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "drag" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-text no-group-heading", role: "button", tabIndex: 0, "aria-label": strings.panels.type.accessibility.editLabelFor.replace("${value}", strings.panels.type.groupNameHint) }, strings.panels.type.groupNameHint)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value-part2" }, this.renderGroupMenuNode(-2))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, "\u00A0")));
    }
    renderGroup(uniqueValueGroup, groupIdx) {
        const classValues = uniqueValueGroup.classes.map((uniqueValueClass, classIdx) => this.renderValue(uniqueValueClass, groupIdx, classIdx));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: uniqueValueGroup.toJSON(), class: "group", "group-sort-values": `${groupIdx}` }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-header" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value-part1" }, this.renderGroupHandleNode(groupIdx), this.renderGroupTextNode(uniqueValueGroup, groupIdx)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value-part2" }, this.renderGroupCountNode(uniqueValueGroup), this.renderGroupMenuNode(groupIdx, uniqueValueGroup))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (node) => {
                var _a, _b;
                if (node) {
                    (_b = (_a = this.classSortable) === null || _a === void 0 ? void 0 : _a[groupIdx]) === null || _b === void 0 ? void 0 : _b.destroy();
                    this.classSortable[groupIdx] = _sortable_esm_7e785780_js__WEBPACK_IMPORTED_MODULE_7__.S.create(node, {
                        group: { name: "nested", pull: true, put: ["nested"] },
                        dataIdAttr: "class-sort-values",
                        ghostClass: "avatar",
                        onSort: () => this.handleSortClasses(groupIdx),
                        handle: `.class-handle`
                    });
                }
            } }, classValues)));
    }
    renderGroupHandleNode(groupIdx) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const isShowingInput = this.selectedValueText === `${groupIdx}`;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: isShowingInput ? "group-handle-disabled" : "group-handle", "aria-hidden": "true", onMouseOver: (event) => {
                const referenceNode = event.target;
                !isShowingInput &&
                    this.onMouseOver(`values-${groupIdx}-handle-tooltip`, referenceNode, strings.panels.type.tooltips.dragGroup);
            }, onMouseOut: () => this.onMouseOut(`values-${groupIdx}-handle-tooltip`) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "drag" })));
    }
    renderGroupTextNode(uniqueValueGroup, groupIdx) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        let eventHandled = false; // to prevent duplicate handling and unnecessary updates from the same user event
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { class: "hidden", value: uniqueValueGroup.heading || "", onKeyDown: (event) => {
                if (event.key === "Escape" || event.key === "Enter") {
                    if (!eventHandled) {
                        event.preventDefault();
                        event.stopPropagation();
                        eventHandled = true;
                        const node = event.target;
                        this.handleGroupTextChange(groupIdx, node.value);
                    }
                }
            }, onFocusout: (event) => {
                if (!eventHandled) {
                    eventHandled = true;
                    const node = event.target;
                    this.handleGroupTextChange(groupIdx, node.value);
                }
            }, ref: (node) => {
                if (node) {
                    this.groupInputNodes[groupIdx] = node;
                }
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `group-text group-text-active ${uniqueValueGroup.heading ? "group-heading" : "no-group-heading"}`, role: "button", tabIndex: 0, "aria-label": strings.panels.type.accessibility.editLabelFor.replace("${value}", uniqueValueGroup.heading || strings.panels.type.groupNameHint), onClick: () => {
                this.onMouseOut(`group-${groupIdx}-text-tooltip`);
                this.handleGroupTextClick(groupIdx);
            }, onMouseOver: (event) => {
                const referenceNode = event.target;
                this.onMouseOver(`group-${groupIdx}-text-tooltip`, referenceNode, strings.panels.type.tooltips.renameGroup);
            }, onMouseOut: () => this.onMouseOut(`group-${groupIdx}-text-tooltip`), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.handleGroupTextClick(groupIdx);
                }
            }, ref: (node) => {
                if (node) {
                    this.groupTextNodes[groupIdx] = node;
                }
            } }, uniqueValueGroup.heading || strings.panels.type.groupNameHint)));
    }
    renderValue(uniqueValueClass, groupIdx, classIdx) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: `values-${uniqueValueClass.label}`, class: "value", "class-sort-values": `${groupIdx}/${classIdx}` }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value-part1" }, this.renderHandleNode(groupIdx, classIdx), this.renderCheckNode(groupIdx, classIdx), this.renderSymbolNode(uniqueValueClass, groupIdx, classIdx), this.renderTextNode(uniqueValueClass, groupIdx, classIdx)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value-part2" }, this.renderCountNode(uniqueValueClass))));
    }
    renderHandleNode(groupIdx, classIdx) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const isShowingInput = this.selectedValueText === `${groupIdx}/${classIdx}`;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: isShowingInput ? "class-handle-disabled" : "class-handle", "aria-hidden": "true", onMouseOver: (event) => {
                const referenceNode = event.target;
                this.onMouseOver(`values-${groupIdx}-${classIdx}-handle-tooltip`, referenceNode, strings.panels.type.tooltips.dragType);
            }, onMouseOut: () => this.onMouseOut(`values-${groupIdx}-${classIdx}-handle-tooltip`) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "drag" })));
    }
    renderCheckNode(groupIdx, classIdx, last) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const isChecked = this.checkedClasses.find((info) => info.groupIdx === groupIdx && info.classIdx === classIdx);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { scale: "s", icon: isChecked ? "check-square" : "square", text: strings.panels.type.checkValue, appearance: "transparent", onClick: (event) => {
                const node = event.currentTarget;
                this.handleCheck(groupIdx, classIdx, node);
            }, onKeyDown: (event) => {
                var _a;
                if (groupIdx === -1 && last && !event.shiftKey && event.key === "Tab") {
                    // send focus to the actions popover
                    (_a = this.actionsPopoverNode) === null || _a === void 0 ? void 0 : _a.focusActionPad();
                }
            }, ref: (node) => {
                if (groupIdx === -1 && last) {
                    this.lastOtherValueCheckNode = node;
                }
            } }));
    }
    renderSymbolNode(uniqueValueClass, groupIdx, classIdx) {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const symbolNodeClasses = {
            "value-symbol": true,
            "symbol-is-white": (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aq)(uniqueValueClass.symbol)
        };
        const symbolClasses = {
            "symbol": true,
            [(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.D)(layer)]: true,
            "symbol-selector--selected": this.selectedValue === `${groupIdx}/${classIdx}`
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: symbolNodeClasses, onClick: () => this.handleValueSymbolClick(groupIdx, classIdx), role: "button", "aria-label": strings.panels.type.accessibility.editSymbolFor.replace("${value}", uniqueValueClass.label), "aria-haspopup": "true", "aria-expanded": this.selectedValue === `${groupIdx}/${classIdx}`, onMouseOver: (event) => {
                const referenceNode = event.target;
                this.onMouseOver(`values-${groupIdx}-${classIdx}-icon-tooltip`, referenceNode, strings.panels.type.tooltips.changeSymbol);
            }, onMouseOut: () => this.onMouseOut(`values-${groupIdx}-${classIdx}-icon-tooltip`), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.handleValueSymbolClick(groupIdx, classIdx);
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: symbolClasses, tabIndex: 0, ref: (node) => {
                if (node) {
                    if (!this.symbolNodes[groupIdx]) {
                        this.symbolNodes[groupIdx] = [];
                    }
                    this.symbolNodes[groupIdx][classIdx] = node;
                    this.afterCreateValueSymbol(groupIdx, classIdx, node);
                }
            }, "aria-hidden": "true" })));
    }
    renderTextNode(uniqueValueClass, groupIdx, classIdx) {
        var _a;
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        let eventHandled = false; // to prevent duplicate handling and unnecessary updates from the same user event
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { class: "hidden", value: uniqueValueClass.label, onKeyDown: (event) => {
                if (event.key === "Escape" || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    if (!eventHandled) {
                        eventHandled = true;
                        const node = event.target;
                        this.handleValueTextChange(groupIdx, classIdx, node.value);
                    }
                }
            }, onFocusout: (event) => {
                if (!eventHandled) {
                    eventHandled = true;
                    const node = event.target;
                    this.handleValueTextChange(groupIdx, classIdx, node.value);
                }
            }, ref: (node) => {
                if (node) {
                    if (!this.valueInputNodes[groupIdx]) {
                        this.valueInputNodes[groupIdx] = [];
                    }
                    this.valueInputNodes[groupIdx][classIdx] = node;
                }
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value-text", role: "button", tabIndex: 0, "aria-label": strings.panels.type.accessibility.editLabelFor.replace("${value}", uniqueValueClass.label), onClick: () => {
                this.onMouseOut(`value-${groupIdx}-${classIdx}-text-tooltip`);
                this.handleValueTextClick(groupIdx, classIdx);
            }, onMouseOver: (event) => {
                const referenceNode = event.target;
                this.onMouseOver(`value-${groupIdx}-${classIdx}-text-tooltip`, referenceNode, strings.panels.type.tooltips.renameType);
            }, onMouseOut: () => this.onMouseOut(`value-${groupIdx}-${classIdx}-text-tooltip`), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.handleValueTextClick(groupIdx, classIdx);
                }
                else if (!event.shiftKey && event.key === "Tab" && groupIdx === -1) {
                    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
                    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                    const otherUniqueValueInfos = (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.g)();
                    let rendererClassCount = 0;
                    renderer.uniqueValueGroups.forEach((uniqueValueGroup) => (rendererClassCount += uniqueValueGroup.classes.length));
                    const hasOtherValues = !!(otherUniqueValueInfos === null || otherUniqueValueInfos === void 0 ? void 0 : otherUniqueValueInfos.length) &&
                        !(otherUniqueValueInfos.length === 1 && !otherUniqueValueInfos[0].value) &&
                        rendererClassCount < 200;
                    if (!hasOtherValues) {
                        // send focus to the actions popover
                        this.actionsPopoverNode.focusActionPad();
                    }
                }
            }, ref: (node) => {
                if (node) {
                    if (groupIdx === -1 && classIdx === -1) {
                        this.otherTextNode = node;
                    }
                    else {
                        if (!this.valueTextNodes[groupIdx]) {
                            this.valueTextNodes[groupIdx] = [];
                        }
                        this.valueTextNodes[groupIdx][classIdx] = node;
                    }
                }
            } }, ((_a = uniqueValueClass.label) === null || _a === void 0 ? void 0 : _a.trim().length)
            ? uniqueValueClass.label
            : // adding nbsp elements if label contains only whitespace to ensure user can select
                "\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0")));
    }
    renderCountNode(uniqueValueClass) {
        const { allUniqueValues, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (!(allUniqueValues === null || allUniqueValues === void 0 ? void 0 : allUniqueValues.length)) {
            return;
        }
        let count = undefined;
        if (uniqueValueClass.values.length > 1) {
            count = uniqueValueClass.values.reduce((mergedCount, value) => {
                var _a;
                return mergedCount + ((_a = this.getUniqueValue(value.value)) === null || _a === void 0 ? void 0 : _a.count) || 0;
            }, 0);
        }
        else {
            const value = uniqueValueClass.values[0].value;
            const info = this.getUniqueValue(value);
            if (info && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(info.count)) {
                return null;
            }
            else if (!info && (allUniqueValues === null || allUniqueValues === void 0 ? void 0 : allUniqueValues.length)) {
                // if !info must be a user added value; display 0 if other values have a count
                const firstInfo = this.getUniqueValue(allUniqueValues[0].value);
                if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(firstInfo === null || firstInfo === void 0 ? void 0 : firstInfo.count)) {
                    return null;
                }
            }
            count = !info ? 0 : info.count;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value-count", "aria-label": strings.panels.type.accessibility.countFor.replace("${value}", uniqueValueClass.label) }, `${count}`));
    }
    renderGroupCountNode(uniqueValueGroup) {
        const { allUniqueValues, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (!(allUniqueValues === null || allUniqueValues === void 0 ? void 0 : allUniqueValues.length)) {
            return;
        }
        let totalCount = 0;
        uniqueValueGroup.classes.forEach((uniqueValueClass) => {
            uniqueValueClass.values.forEach((value) => {
                var _a;
                const info = this.getUniqueValue(value.value);
                if (info && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(info.count)) {
                    return;
                }
                else if (!info && (allUniqueValues === null || allUniqueValues === void 0 ? void 0 : allUniqueValues.length)) {
                    // if !info must be a user added value; display 0 if other values have a count
                    const firstInfo = this.getUniqueValue(allUniqueValues[0].value);
                    if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(firstInfo === null || firstInfo === void 0 ? void 0 : firstInfo.count)) {
                        return;
                    }
                }
                totalCount += (_a = info === null || info === void 0 ? void 0 : info.count) !== null && _a !== void 0 ? _a : 0;
            });
        });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-count", "aria-label": strings.panels.type.accessibility.countFor.replace("${value}", uniqueValueGroup.heading) }, `${!allUniqueValues ? "" : totalCount}`));
    }
    renderGroupMenuNode(groupIdx, uniqueValueGroup) {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = renderer.uniqueValueGroups;
        let canSelect = false;
        let hasMergedValues = false;
        let otherValueClasses;
        if (groupIdx === -1) {
            otherValueClasses = (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.b)();
            // don't show more than 200 values total
            let countCurrentClasses = 0;
            renderer.uniqueValueGroups.forEach((uniqueValueGroup) => { var _a, _b; return (countCurrentClasses += (_b = (_a = uniqueValueGroup.classes) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); });
            if (countCurrentClasses + otherValueClasses.length > 200) {
                otherValueClasses = otherValueClasses.slice(0, 200 - countCurrentClasses);
            }
            canSelect = !!otherValueClasses.find((_, idx) => !this.checkedClasses.find((info) => info.groupIdx === -1 && info.classIdx === idx));
        }
        else {
            canSelect = !!(uniqueValueGroup === null || uniqueValueGroup === void 0 ? void 0 : uniqueValueGroup.classes.find((_, idx) => !this.checkedClasses.find((info) => info.groupIdx === groupIdx && info.classIdx === idx)));
            hasMergedValues = !!(uniqueValueGroup === null || uniqueValueGroup === void 0 ? void 0 : uniqueValueGroup.classes.find((uvClass) => uvClass.values.length > 1));
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { placement: "bottom-end", scale: "s", overlayPositioning: "absolute", ref: (node) => {
                if (node) {
                    this.groupMenuNodes[groupIdx] = node;
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "trigger", scale: "s", text: strings.panels.type.tooltips.options }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "ellipsis" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { "selection-mode": "none" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { "icon-start": "pin-plus", label: strings.panels.type.addValue, onClick: () => this.handleAddValue(groupIdx), onKeyDown: (event) => {
                event.stopPropagation();
                if (event.key === " " || event.key === "Enter") {
                    this.handleAddValue(groupIdx);
                }
            } }, strings.panels.type.addValue), groups.length > 0 && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { "icon-start": "palette", label: strings.panels.type.changeColors, onClick: () => this.openSymbolStylerForGroup(groupIdx), onKeyDown: (event) => {
                event.stopPropagation();
                if (event.key === " " || event.key === "Enter") {
                    this.openSymbolStylerForGroup(groupIdx);
                }
            } }, strings.panels.type.changeColors))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { "selection-mode": "none" }, canSelect && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { "icon-start": "check-circle", label: strings.panels.type.selectAllValues, onClick: () => this.handleSelectAllValues(groupIdx), onKeyDown: (event) => {
                event.stopPropagation();
                if (event.key === " " || event.key === "Enter") {
                    this.handleSelectAllValues(groupIdx);
                }
            } }, strings.panels.type.selectAllValues)), hasMergedValues && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { "icon-start": "group-x", label: strings.panels.type.separateValues, onClick: () => this.handleSeparateValues(groupIdx), onKeyDown: (event) => {
                event.stopPropagation();
                if (event.key === " " || event.key === "Enter") {
                    this.handleSeparateValues(groupIdx);
                }
            } }, strings.panels.type.separateValues)), groupIdx > 0 && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { "icon-start": "arrow-bold-up", label: strings.panels.type.moveUp, onClick: () => this.handleGroupMoveUp(groupIdx), onKeyDown: (event) => {
                event.stopPropagation();
                if (event.key === " " || event.key === "Enter") {
                    this.handleGroupMoveUp(groupIdx);
                }
            } }, strings.panels.type.moveUp)), groups.length > 0 && groupIdx < groups.length - 1 && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { "icon-start": "arrow-bold-down", label: strings.panels.type.moveDown, onClick: () => this.handleGroupMoveDown(groupIdx), onKeyDown: (event) => {
                event.stopPropagation();
                if (event.key === " " || event.key === "Enter") {
                    this.handleGroupMoveDown(groupIdx);
                }
            } }, strings.panels.type.moveDown)))));
    }
    renderDefaultValue() {
        const { layer, lastDefault, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const defaultSymbol = renderer.defaultSymbol || lastDefault.defaultSymbol;
        const defaultLabel = renderer.defaultLabel || lastDefault.defaultLabel;
        const otherUniqueValueInfos = (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.g)();
        const otherCount = otherUniqueValueInfos ? this.getOtherCount(otherUniqueValueInfos) : -1;
        let rendererClassCount = 0;
        renderer.uniqueValueGroups.forEach((uniqueValueGroup) => (rendererClassCount += uniqueValueGroup.classes.length));
        const hasOtherValues = !!(otherUniqueValueInfos === null || otherUniqueValueInfos === void 0 ? void 0 : otherUniqueValueInfos.length) && rendererClassCount < 200;
        const hasOnlyNullValue = hasOtherValues && otherUniqueValueInfos.length === 1 && !otherUniqueValueInfos[0].value;
        const symbolNodeClasses = {
            "value-symbol": true,
            "symbol-is-white": (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aq)(defaultSymbol)
        };
        const symbolClasses = {
            "symbol": true,
            [(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.D)(layer)]: true,
            "symbol-selector--selected": this.selectedValue === `-1`
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `value ${hasOtherValues ? "default-value" : ""}` }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value-part1" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { scale: "s", checked: !!renderer.defaultSymbol, onMouseOver: (event) => {
                const referenceNode = event.target;
                this.onMouseOver("default-value-checkbox-tooltip", referenceNode, strings.panels.type.tooltips.otherTooltip);
            }, onMouseOut: () => this.onMouseOut("default-value-checkbox-tooltip"), onClick: () => this.handleDefaultCheckChange() }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: symbolNodeClasses, onClick: () => this.handleValueSymbolClick(-1, 0), role: "button", "aria-haspopup": "true", "aria-expanded": this.selectedValue === `-1/0`, "aria-label": strings.panels.type.accessibility.editSymbolFor.replace("${fieldName}", defaultLabel), onMouseOver: (event) => {
                const referenceNode = event.target;
                this.onMouseOver("default-value-symbol-tooltip", referenceNode, strings.panels.type.tooltips.changeSymbol);
            }, onMouseOut: () => this.onMouseOut("default-value-symbol-tooltip"), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.handleValueSymbolClick(-1, 0);
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: symbolClasses, tabIndex: 0, ref: (node) => {
                if (node) {
                    if (!this.symbolNodes[-1]) {
                        this.symbolNodes[-1] = [];
                    }
                    this.symbolNodes[-1][0] = node;
                    this.afterCreateValueSymbol(-1, 0, node);
                }
            }, "aria-hidden": "true" })), this.renderTextNode({
            symbol: defaultSymbol,
            label: defaultLabel
        }, -1, -1)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value-part2" }, otherCount > -1 ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `group-count ${(!hasOtherValues || hasOnlyNullValue) && "group-count-no-menu"}`, "aria-label": strings.panels.type.accessibility.countFor.replace("${value}", defaultLabel) }, `${otherCount}`)) : null, hasOtherValues && !hasOnlyNullValue && this.renderDefaultMenuNode())));
    }
    renderDefaultMenuNode() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const otherUniqueValueClasses = (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.b)();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { placement: "bottom-end", scale: "s", overlayPositioning: "absolute", ref: (node) => {
                if (node) {
                    this.groupMenuNodes[-1] = node;
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "trigger", scale: "s", text: strings.panels.type.tooltips.options }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "ellipsis" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { "selection-mode": "none" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { "icon-start": "arrow-bold-up", label: strings.panels.type.moveUp, onClick: () => this.handleMoveUpAll(otherUniqueValueClasses), onKeyDown: (event) => {
                event.stopPropagation();
                if (event.key === " " || event.key === "Enter") {
                    this.handleMoveUpAll(otherUniqueValueClasses);
                }
            } }, strings.panels.type.moveUp))));
    }
    renderOtherValues() {
        const { allUniqueValues, layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        if (!allUniqueValues || !allUniqueValues.length) {
            return null;
        }
        let otherValueClasses = (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.b)();
        // don't show more than 200 values total
        let countCurrentClasses = 0;
        renderer.uniqueValueGroups.forEach((uniqueValueGroup) => { var _a, _b; return (countCurrentClasses += (_b = (_a = uniqueValueGroup.classes) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); });
        if (countCurrentClasses + otherValueClasses.length > 200) {
            otherValueClasses = otherValueClasses.slice(0, 200 - countCurrentClasses);
        }
        const otherValueNodes = otherValueClasses.map((otherValueClass, idx) => this.renderOtherValue(otherValueClass, idx, idx === otherValueClasses.length - 1));
        return otherValueNodes;
    }
    renderOtherValue(uniqueValueClass, idx, last) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value nodrag", key: uniqueValueClass.toJSON() }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value-part1" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value-handle-placeholder" }, "\u00A0"), uniqueValueClass.values[0].value ? (this.renderCheckNode(-1, idx, last)) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "check-placeholder" }, "\u00A0")), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value-text other-value-text", "aria-label": uniqueValueClass.label }, uniqueValueClass.values[0].value === null
            ? strings.panels.type.noData
            : uniqueValueClass.label)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "value-part2" }, this.renderCountNode(uniqueValueClass))));
    }
    renderMsg() {
        const { allUniqueValues, layer, lastDefault, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        // TODO estimatedValuesMsg
        if (allUniqueValues && allUniqueValues.length > this.maxCountOtherValues) {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "type-panel-msg" }, strings.panels.type.errors.tooManyValues.replace("${count}", this.maxCountOtherValues.toString())));
        }
        else if (!renderer.uniqueValueInfos.length && !(allUniqueValues === null || allUniqueValues === void 0 ? void 0 : allUniqueValues.length)) {
            // only otherCategory
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "type-panel-msg" }, strings.panels.type.errors.noFeatures.replace("${other}", lastDefault.defaultLabel)));
        }
        else {
            return null;
        }
    }
    renderBackgroundStyle() {
        const { mapImageSublayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)() !== "type-size" || mapImageSublayer) {
            return null;
        }
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-background-symbol", null);
    }
    renderTransparency() {
        if (this.hideTransparency) {
            return null;
        }
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), "opacity");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-transparency", { open: !!opacityVisVar, onArcgisSmartMappingSymbolTransparencyError: ({ detail }) => this.arcgisSmartMappingPanelsTypeError.emit(detail), onKeyDown: (event) => {
                const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
                if (rendererType === "type" && event.shiftKey && event.key === "Tab") {
                    this.actionsPopoverNode.focusLastAction();
                }
            }, ref: (node) => {
                if (node) {
                    this.transparencyNode = node;
                }
            } }));
    }
    renderRotation() {
        if (this.hideRotation) {
            return null;
        }
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), "opacity");
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), "rotation");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-rotation", { open: !opacityVisVar && !!rotationVisVar, onArcgisSmartMappingRotationError: ({ detail }) => this.arcgisSmartMappingPanelsTypeError.emit(detail), ref: (node) => (this.rotationNode = node) }));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: () => this.arcgisSmartMappingPanelsTypeClose.emit("save"), appearance: "solid", width: "half", onKeyDown: (event) => {
                const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
                if (rendererType === "type-size" && event.shiftKey && event.key === "Tab") {
                    this.actionsPopoverNode.focusLastAction();
                }
            }, ref: (node) => (this.doneButtonNode = node) }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: () => {
                const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
                const layer = smLayer;
                const { originalRendererJSON, originalFeatureReduction, originalOrderBy } = this;
                this.closePopovers();
                layer.orderBy = originalOrderBy;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.j)(originalRendererJSON, originalFeatureReduction);
                this.arcgisSmartMappingPanelsTypeClose.emit("cancel");
            }, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    //-------------------------------------------------------------------
    //
    //  Private Methods
    //
    //-------------------------------------------------------------------
    addActionsPopover() {
        this.closePopovers();
        this.actionsPopoverNode = document.createElement("arcgis-smart-mapping-type-actions-popover");
        this.actionsPopoverNode.referenceNode = this.flowItemNode;
        this.actionsPopoverNode.checkedClasses = this.checkedClasses;
        this.actionsPopoverNode.groupMenuNodes = this.groupMenuNodes;
        this.actionsPopoverNode.addEventListener("arcgisSmartMappingTypeActionsPopoverChange", (event) => {
            var _a;
            if ((_a = event.detail) === null || _a === void 0 ? void 0 : _a.checkedClasses) {
                this.checkedClasses = event.detail.checkedClasses;
            }
            this.removeActionsPopover();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            this.checkCluster();
        });
        this.actionsPopoverNode.addEventListener("arcgisSmartMappingTypeActionsPopoverFocusExit", (event) => {
            var _a, _b;
            if (event.detail === "bottom") {
                const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
                if (rendererType === "type") {
                    (_a = this.transparencyNode) === null || _a === void 0 ? void 0 : _a.setFocus();
                }
                else {
                    // type-size
                    (_b = this.doneButtonNode) === null || _b === void 0 ? void 0 : _b.setFocus();
                }
            }
            else if (event.detail === "top") {
                this.lastOtherValueCheckNode
                    ? this.lastOtherValueCheckNode.setFocus()
                    : this.otherTextNode.focus();
            }
        });
        document.body.appendChild(this.actionsPopoverNode);
    }
    afterCreateValueSymbol(groupIdx, classIdx, node) {
        var _a;
        const { layer, lastDefault, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        let symbol;
        if (groupIdx === -1) {
            symbol = renderer.defaultSymbol || lastDefault.defaultSymbol;
        }
        else {
            symbol = renderer.uniqueValueGroups[groupIdx].classes[classIdx].symbol.clone();
        }
        // remove old symbol if there is one
        while ((_a = node === null || node === void 0 ? void 0 : node.childNodes) === null || _a === void 0 ? void 0 : _a.length) {
            node.removeChild(node.childNodes[0]);
        }
        if (symbol) {
            // add new symbol
            modules.symbolUtils
                .renderPreviewHTML(symbol, {
                size: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ar)(symbol),
                symbolConfig: 
                //symbol.type === "simple-fill" || ... while CIMs have that shape
                symbol.type === "cim" && symbol.data.symbol.type === "CIMPolygonSymbol"
                    ? { isSquareFill: true }
                    : undefined
            })
                .then((symbolNode) => node.appendChild(symbolNode));
        }
    }
    checkCluster() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        "featureReduction" in layer &&
            layer.featureReduction &&
            this.arcgisSmartMappingPanelsTypeClusterRequiresUpdate.emit();
    }
    closePopovers() {
        this.removeActionsPopover();
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
    }
    getOtherCount(otherInfos) {
        let totalCount = 0;
        otherInfos.map((info) => (totalCount += info.count));
        return otherInfos.length ? totalCount : -1;
    }
    getUniqueValue(value) {
        const { allUniqueValues } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (!allUniqueValues) {
            return null;
        }
        // no exact match!
        const infos = allUniqueValues.filter((info) => info.value == value);
        return infos.length ? infos[0] : null;
    }
    handleAddValue(groupIdx) {
        const addValuePopover = document.createElement("arcgis-smart-mapping-type-add-value");
        addValuePopover.groupIdx = groupIdx;
        addValuePopover.flowItemNode = this.flowItemNode;
        addValuePopover.referenceNode = this.groupMenuNodes[groupIdx];
        addValuePopover.addEventListener("arcgisSmartMappingTypeAddValuePopoverClose", () => {
            setTimeout(() => this.groupMenuNodes[groupIdx].setFocus(), 300);
            addValuePopover === null || addValuePopover === void 0 ? void 0 : addValuePopover.parentElement.removeChild(addValuePopover);
        });
        addValuePopover.addEventListener("arcgisSmartMappingTypeAddValuePopoverNewValue", () => {
            this.updateRendererAndUI();
            this.checkCluster();
            setTimeout(() => this.groupMenuNodes[groupIdx].setFocus(), 300);
            addValuePopover === null || addValuePopover === void 0 ? void 0 : addValuePopover.parentElement.removeChild(addValuePopover);
        });
        document.body.appendChild(addValuePopover);
    }
    handleCheck(groupIdx, classIdx, node) {
        const idx = this.checkedClasses.findIndex((info) => info.groupIdx === groupIdx && info.classIdx === classIdx);
        if (idx > -1) {
            // item is already checked, user clicks again to uncheck
            this.checkedClasses.splice(idx, 1);
            node.icon = "square";
            this.actionsPopoverNode.checkedClasses = this.checkedClasses;
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.actionsPopoverNode);
            if (!this.checkedClasses.length) {
                this.removeActionsPopover();
            }
        }
        else {
            this.checkedClasses = [...this.checkedClasses, { groupIdx: groupIdx, classIdx: classIdx }];
            node.icon = "check-square";
            if (this.actionsPopoverNode) {
                this.actionsPopoverNode.checkedClasses = this.checkedClasses;
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.actionsPopoverNode);
            }
            else {
                this.addActionsPopover();
            }
        }
    }
    handleDefaultCheckChange() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        if (renderer.defaultSymbol) {
            renderer.defaultSymbol = undefined;
            renderer.defaultLabel = undefined;
        }
        else {
            const { lastDefault } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
            renderer.defaultSymbol = lastDefault.defaultSymbol;
            renderer.defaultLabel = lastDefault.defaultLabel;
        }
        this.updateRendererAndUI();
    }
    handleDrawingOrderToggle(checked) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        renderer.orderByClassesEnabled = checked;
        if (checked) {
            layer.orderBy = null;
        }
        else {
            layer.orderBy = this.originalOrderBy;
        }
        this.updateRendererAndUI();
    }
    handleGroupMoveUp(groupIdx) {
        this.closePopovers();
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        if (groupIdx > 0) {
            const uvRenderer = renderer;
            const groups = uvRenderer.uniqueValueGroups;
            const group = groups.splice(groupIdx, 1)[0];
            groups.splice(groupIdx - 1, 0, group);
            uvRenderer.uniqueValueGroups = groups;
            this.checkedClasses = [];
            this.updateRendererAndUI();
            this.checkCluster();
            // if we do this too early the enter key executes on the focused div
            setTimeout(() => { var _a; return (_a = this.groupMenuNodes[groupIdx - 1]) === null || _a === void 0 ? void 0 : _a.setFocus(); }, 300);
        }
    }
    handleGroupMoveDown(groupIdx) {
        this.closePopovers();
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = renderer.uniqueValueGroups;
        if (groupIdx < groups.length - 1) {
            const uvRenderer = renderer;
            const groups = uvRenderer.uniqueValueGroups;
            const group = groups.splice(groupIdx, 1)[0];
            groups.splice(groupIdx + 1, 0, group);
            uvRenderer.uniqueValueGroups = groups;
            this.checkedClasses = [];
            this.updateRendererAndUI();
            this.checkCluster();
            // if we do this too early the enter key executes on the focused div
            setTimeout(() => { var _a; return (_a = this.groupMenuNodes[groupIdx + 1]) === null || _a === void 0 ? void 0 : _a.setFocus(); }, 300);
        }
    }
    handleGroupTextChange(groupIdx, label) {
        var _a;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = renderer.uniqueValueGroups;
        this.groupInputNodes[groupIdx].classList.add("hidden");
        if (!(label === null || label === void 0 ? void 0 : label.length)) {
            if ((_a = renderer.uniqueValueGroups[groupIdx].heading) === null || _a === void 0 ? void 0 : _a.length) {
                label = renderer.uniqueValueGroups[groupIdx].heading;
            }
        }
        groups[groupIdx].heading = label;
        renderer.uniqueValueGroups = groups;
        this.selectedValueText = undefined;
        this.updateRendererAndUI();
        this.groupTextNodes[groupIdx].classList.remove("hidden");
        setTimeout(() => this.groupTextNodes[groupIdx].focus(), 300);
    }
    handleGroupTextClick(groupIdx) {
        this.selectedValueText = `${groupIdx}`;
        this.groupTextNodes[groupIdx].classList.add("hidden");
        this.groupInputNodes[groupIdx].classList.remove("hidden");
        this.groupInputNodes[groupIdx].setFocus();
    }
    handleMoveUpAll(uniqueValueClasses) {
        uniqueValueClasses = uniqueValueClasses.filter((uvClass) => uvClass.values[0].value !== null);
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        this.selectedValue = undefined;
        this.selectedValueText = undefined;
        this.closePopovers();
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = renderer.uniqueValueGroups;
        // don't show more than 200 values total
        let currentLength = 0;
        groups.forEach((uniqueValueGroup) => { var _a, _b; return (currentLength += (_b = (_a = uniqueValueGroup.classes) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); });
        if (currentLength + uniqueValueClasses.length > 200) {
            // don't add all classes
            uniqueValueClasses.length = 200 - currentLength;
        }
        if (groups.length === 1 && !groups[0].heading) {
            // add to existing group
            groups[0].classes = groups[0].classes.concat(uniqueValueClasses);
        }
        else {
            // add all to a new group
            const newGroup = new modules.UniqueValueGroup({
                heading: (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.d)(groups),
                classes: uniqueValueClasses
            });
            groups.push(newGroup);
        }
        renderer.uniqueValueGroups = groups;
        this.updateRendererAndUI();
        this.checkCluster();
    }
    handleSelectAllValues(groupIdx) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const uvRenderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = uvRenderer.uniqueValueGroups;
        groups[groupIdx].classes.forEach((_, idx) => {
            if (!this.checkedClasses.find((info) => info.groupIdx === groupIdx && info.classIdx === idx)) {
                this.checkedClasses.push({ groupIdx, classIdx: idx });
            }
        });
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        if (this.actionsPopoverNode) {
            this.actionsPopoverNode.checkedClasses = this.checkedClasses;
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.actionsPopoverNode);
        }
        else {
            this.addActionsPopover();
        }
    }
    handleSeparateValues(groupIdx) {
        this.closePopovers();
        this.separateGroupValues(groupIdx);
        this.updateRendererAndUI();
        this.checkCluster();
    }
    handleSortClasses(groupIdx) {
        var _a;
        const groupIdxClassIds = ((_a = this.classSortable) === null || _a === void 0 ? void 0 : _a[groupIdx].toArray()) || [];
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        this.closePopovers();
        const beforeOtherValuesLength = (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.b)().length;
        let beforeLength = 0;
        renderer.uniqueValueGroups.forEach((uniqueValueGroup) => { var _a, _b; return (beforeLength += (_b = (_a = uniqueValueGroup.classes) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); });
        const uvRenderer = renderer;
        const oldGroups = uvRenderer.clone().uniqueValueGroups;
        const newGroups = [];
        oldGroups.forEach((group, idx) => {
            if (idx === groupIdx) {
                const newGroup = new modules.UniqueValueGroup({ heading: group.heading, classes: [] });
                groupIdxClassIds.forEach((groupIdxClassIds) => {
                    const [groupIdx, classIdx] = groupIdxClassIds
                        .split("/")
                        .map((value) => parseInt(value));
                    newGroup.classes.push(oldGroups[groupIdx].classes[classIdx]);
                });
                newGroups.push(newGroup);
            }
            else {
                newGroups.push(oldGroups[idx]);
            }
        });
        // remove groups with no classes
        renderer.uniqueValueGroups = newGroups.filter((group) => !!group.classes.length);
        const afterOtherValuesLength = (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.b)().length;
        this.selectedValue = undefined;
        this.selectedValueText = undefined;
        this.checkedClasses = [];
        if (beforeOtherValuesLength === afterOtherValuesLength) {
            // update dragRenderToggle flag to force rerender if a newly created value was dragged into the 'Other' group
            this.dragRenderToggle = !this.dragRenderToggle;
        }
        setTimeout(() => this.updateRendererAndUI(), 300);
        this.checkCluster();
        let afterLength = 0;
        renderer.uniqueValueGroups.forEach((uniqueValueGroup) => { var _a, _b; return (afterLength += (_b = (_a = uniqueValueGroup.classes) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); });
        beforeLength !== afterLength ? this.checkCluster() : null;
    }
    handleSortGroups() {
        const groupIdxs = this.groupSortable ? this.groupSortable.toArray() : [];
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        this.closePopovers();
        const oldGroups = renderer.uniqueValueGroups;
        const newGroups = [];
        groupIdxs.forEach((groupIdx) => {
            newGroups.push(oldGroups[parseInt(groupIdx)]);
        });
        renderer.uniqueValueGroups = newGroups;
        this.selectedValue = undefined;
        this.selectedValueText = undefined;
        this.checkedClasses = [];
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    handleValueSymbolClick(groupIdx, classIdx) {
        this.symbolNodes[groupIdx][classIdx].classList.remove("symbol-selector--selected");
        if (this.symbolStylerOpen) {
            this.selectedValue = undefined;
            this.selectedValueText = undefined;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
            this.symbolStylerOpen = false;
        }
        else {
            const selectedValue = `${groupIdx}/${classIdx}`;
            this.selectedValue = this.selectedValue !== selectedValue ? selectedValue : undefined;
            this.selectedValueText = undefined;
            if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(this.selectedValue)) {
                this.openSymbolStylerForValue(groupIdx, classIdx);
            }
            else {
                this.symbolNodes[groupIdx][classIdx].classList.remove("symbol-selector--selected");
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
                this.symbolStylerOpen = false;
            }
        }
    }
    handleValueTextChange(groupIdx, classIdx, label) {
        var _a;
        const { allUniqueValues, lastDefault, layer: smLayer, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = renderer.uniqueValueGroups;
        this.valueInputNodes[groupIdx][classIdx].classList.add("hidden");
        // only update if new value is different
        if (((_a = groups[groupIdx]) === null || _a === void 0 ? void 0 : _a.classes[classIdx].label) !== label) {
            // if user cleared out label entirely, set back to default
            if (!(label === null || label === void 0 ? void 0 : label.length)) {
                if (groupIdx === -1) {
                    label = this.originalRendererJSON.defaultLabel || strings.panels.type.other;
                }
                else {
                    let matchingInfo = allUniqueValues.find((value) => value.value === renderer.uniqueValueGroups[groupIdx].classes[classIdx].values[0].value);
                    label =
                        (matchingInfo === null || matchingInfo === void 0 ? void 0 : matchingInfo.label) || renderer.uniqueValueGroups[groupIdx].classes[classIdx].label;
                }
            }
            if (groupIdx === -1 && !renderer.defaultSymbol) {
                lastDefault.defaultLabel = label;
            }
            if (groupIdx === -1) {
                if (renderer.defaultSymbol) {
                    renderer.defaultLabel = label || lastDefault.defaultLabel;
                }
            }
            else {
                const groups = renderer.uniqueValueGroups;
                const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(renderer.field);
                if (label) {
                    groups[groupIdx].classes[classIdx].label = label;
                }
                else {
                    // re-create default label
                    const defaultLabels = groups[groupIdx].classes[classIdx].values.map((uniqueValue) => {
                        var _a;
                        const value = uniqueValue.value;
                        const defaultLabel = (_a = allUniqueValues === null || allUniqueValues === void 0 ? void 0 : allUniqueValues.find((uv) => uv.value === value)) === null || _a === void 0 ? void 0 : _a.label;
                        if (defaultLabel) {
                            return defaultLabel;
                        }
                        else if ((field === null || field === void 0 ? void 0 : field.simpleFieldType) === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE ||
                            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.z)(field === null || field === void 0 ? void 0 : field.layerField) === "date-only") {
                            return (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.e)(value, field);
                        }
                        else if ((field === null || field === void 0 ? void 0 : field.simpleFieldType) === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER) {
                            return modules.intl.formatNumber(value);
                        }
                        else {
                            // string
                            return value;
                        }
                    });
                    groups[groupIdx].classes[classIdx].label = defaultLabels.join(", ");
                }
                renderer.uniqueValueGroups = groups;
            }
        }
        this.selectedValueText = undefined;
        this.updateRendererAndUI();
        setTimeout(() => {
            const textNode = groupIdx === -1 && classIdx === -1
                ? this.otherTextNode
                : this.valueTextNodes[groupIdx][classIdx];
            textNode.classList.remove("hidden");
            textNode.focus(), 300;
        });
    }
    handleValueTextClick(groupIdx, classIdx) {
        var _a, _b;
        this.selectedValueText = `${groupIdx}/${classIdx}`;
        const textNode = groupIdx === -1 && classIdx === -1
            ? this.otherTextNode
            : this.valueTextNodes[groupIdx][classIdx];
        textNode.classList.add("hidden");
        (_a = this.valueInputNodes[groupIdx][classIdx]) === null || _a === void 0 ? void 0 : _a.classList.remove("hidden");
        (_b = this.valueInputNodes[groupIdx][classIdx]) === null || _b === void 0 ? void 0 : _b.setFocus();
    }
    onMouseOver(id, referenceNode, label) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ae)();
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aF)(referenceNode, label, id);
    }
    onMouseOut(id) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aG)(id);
    }
    openSymbolStylerForGroup(groupIdx) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        const popoverNode = (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_4__.c)({
            referenceElement: this.flowItemNode,
            heading: strings.panels.type.symbolStyle
        });
        popoverNode.addEventListener("arcgisSmartMappingStylerPopoverClose", () => {
            (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_4__.r)(popoverNode);
            this.selectedValue = undefined;
            this.selectedValueText = undefined;
            // if we do this too early the enter key executes on the focused div
            setTimeout(() => { var _a; return (_a = this.groupMenuNodes[groupIdx]) === null || _a === void 0 ? void 0 : _a.setFocus(); }, 300);
        });
        popoverNode.addEventListener("arcgisSmartMappingStylerPopoverDisconnected", () => {
            this.selectedValue = undefined;
            this.selectedValueText = undefined;
            (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_4__.r)(popoverNode);
            // if we do this too early the enter key executes on the focused div
            setTimeout(() => { var _a; return (_a = this.groupMenuNodes[groupIdx]) === null || _a === void 0 ? void 0 : _a.setFocus(); }, 300);
        });
        (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_4__.e)({
            groupIdx,
            popoverNode,
            onChange: () => {
                this.updateRendererAndUI();
            }
        });
    }
    openSymbolStylerForValue(groupIdx, classIdx) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        const popoverNode = (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_4__.c)({
            referenceElement: this.flowItemNode,
            heading: strings.panels.type.symbolStyle
        });
        popoverNode.addEventListener("arcgisSmartMappingStylerPopoverClose", () => {
            let symbolNode = this.symbolNodes[groupIdx][classIdx];
            this.selectedValue = undefined;
            this.selectedValueText = undefined;
            (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_4__.r)(popoverNode);
            // if we do this too early the enter key executes on the focused div
            setTimeout(() => {
                symbolNode.classList.remove("symbol-selector--selected");
                this.symbolStylerOpen = false;
                symbolNode.focus();
            }, 300);
        });
        popoverNode.addEventListener("arcgisSmartMappingStylerPopoverDisconnected", () => {
            let symbolNode = this.symbolNodes[groupIdx][classIdx];
            this.selectedValue = undefined;
            this.selectedValueText = undefined;
            (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_4__.r)(popoverNode);
            // if we do this too early the enter key executes on the focused div
            setTimeout(() => {
                symbolNode.classList.remove("symbol-selector--selected");
                this.symbolStylerOpen = false;
                symbolNode.focus();
            }, 300);
        });
        (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_4__.f)({
            selectedValue: this.selectedValue,
            popoverNode,
            onChange: () => {
                this.updateRendererAndUI();
                this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
            }
        });
        this.symbolStylerOpen = true;
        this.symbolNodes[groupIdx][classIdx].classList.add("symbol-selector--selected");
    }
    removeActionsPopover() {
        var _a, _b;
        (_b = (_a = this.actionsPopoverNode) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this.actionsPopoverNode);
        this.actionsPopoverNode = null;
    }
    separateGroupValues(groupIdx) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = renderer.uniqueValueGroups;
        (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.f)(groups[groupIdx]);
        this.checkedClasses = [];
    }
    updateRendererAndUI() {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsType.style = arcgisSmartMappingPanelsTypeCss;

const ArcgisSmartMappingTypeActionsPopover = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingTypeActionsPopoverChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingTypeActionsPopoverChange", 7);
        this.arcgisSmartMappingTypeActionsPopoverFocusExit = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingTypeActionsPopoverFocusExit", 7);
        this.checkedClasses = undefined;
        this.groupMenuNodes = undefined;
        this.referenceNode = undefined;
        this.showMoveToGroup = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        this.topActionHandler = (event) => {
            // send focus back to the panel
            if (event.shiftKey && event.key === "Tab") {
                this.arcgisSmartMappingTypeActionsPopoverFocusExit.emit("top");
            }
        };
    }
    componentDidRender() {
        var _a, _b;
        const topAction = (!((_a = this.moveUpNode) === null || _a === void 0 ? void 0 : _a.disabled) ? this.moveUpNode : undefined) ||
            (!((_b = this.moveDownNode) === null || _b === void 0 ? void 0 : _b.disabled) ? this.moveDownNode : undefined) ||
            this.mergeNode ||
            this.separateNode ||
            this.moveToGroupNode;
        topAction === null || topAction === void 0 ? void 0 : topAction.removeEventListener("keydown", this.topActionHandler);
        topAction.addEventListener("keydown", this.topActionHandler);
    }
    //--------------------------------------------------------------------------
    //
    //  Public methods
    //
    //--------------------------------------------------------------------------
    async focusActionPad() {
        var _a;
        (_a = this.actionPadNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    async focusLastAction() {
        if (this.actionPadNode) {
            let actionNodes = Array.from(this.actionPadNode.querySelectorAll("calcite-action"));
            let enabledActionNodes = actionNodes.filter((node) => node.disabled === false);
            enabledActionNodes[enabledActionNodes.length - 1].setFocus();
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        var _a, _b;
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (!((_a = this.checkedClasses) === null || _a === void 0 ? void 0 : _a.length)) {
            return null;
        }
        const rect = (_b = this.referenceNode) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { class: "js-app-flyout", placement: "leading-start", offsetDistance: 10, offsetSkidding: (rect.height - 120) / 4 + 70, pointerDisabled: true, label: strings.panels.type.typeActions, triggerDisabled: true, referenceElement: this.referenceNode, open: true, ref: (node) => (this.popoverNode = node) }, this.showMoveToGroup ? this.renderMoveToGroup() : this.renderActions())));
    }
    renderActions() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-pad", { layout: "vertical", position: "start", expanded: true, expandDisabled: true, ref: (node) => {
                if (node) {
                    this.actionPadNode = node;
                }
            } }, this.renderGroup1(), this.renderGroup2(), this.renderGroup3()));
    }
    renderMoveToGroup() {
        if (!this.showMoveToGroup) {
            return null;
        }
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = renderer.uniqueValueGroups;
        const multipleGroups = !!this.checkedClasses.find((checkedClass) => checkedClass.groupIdx !== this.checkedClasses[0].groupIdx);
        const disableGroupIdx = !multipleGroups && this.checkedClasses[0].groupIdx;
        const listItems = groups.map((group, idx) => {
            return this.renderMoveToGroupListItem(group, idx);
        });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: strings.panels.type.moveToGroup, closable: true, onCalcitePanelClose: () => {
                this.showMoveToGroup = false;
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                setTimeout(() => this.moveToGroupNode.setFocus(), 300);
            }, ref: (node) => node === null || node === void 0 ? void 0 : node.setFocus() }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { filterEnabled: groups.length >= 10, filterPlaceholder: strings.panels.type.searchGroups, label: strings.panels.type.selectGroup, selectionMode: "single" }, listItems, !renderer.uniqueValueGroups.length && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { label: strings.panels.type.untitledGroup, onCalciteListItemSelect: () => this.moveToNewGroup(true) })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { label: renderer.defaultLabel || strings.panels.type.other, value: -1, disabled: disableGroupIdx === -1, onCalciteListItemSelect: () => {
                this.checkedClasses.sort((a, b) => b.groupIdx - a.groupIdx === 0 ? b.classIdx - a.classIdx : b.groupIdx - a.groupIdx);
                this.checkedClasses.forEach((checkedClass) => {
                    if (checkedClass.groupIdx !== -1) {
                        groups[checkedClass.groupIdx].classes.splice(checkedClass.classIdx, 1);
                        if (!groups[checkedClass.groupIdx].classes.length) {
                            groups.splice(checkedClass.groupIdx, 1);
                        }
                    }
                });
                this.checkedClasses = [];
                renderer.uniqueValueGroups = groups;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                this.popoverNode.open = false;
                this.arcgisSmartMappingTypeActionsPopoverChange.emit({
                    checkedClasses: this.checkedClasses
                });
                // if we do this too early the enter key executes on the focused div
                setTimeout(() => { var _a; return (_a = this.groupMenuNodes[-1]) === null || _a === void 0 ? void 0 : _a.setFocus(); }, 300);
            } })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline", label: strings.cancel, innerHTML: strings.cancel, width: "full", slot: "footer", onClick: () => {
                this.showMoveToGroup = false;
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                setTimeout(() => this.moveToGroupNode.setFocus(), 300);
            } })));
    }
    renderMoveToGroupListItem(group, idx) {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = renderer.uniqueValueGroups;
        const multipleGroups = !!this.checkedClasses.find((checkedClass) => checkedClass.groupIdx !== this.checkedClasses[0].groupIdx);
        const disableGroupIdx = !multipleGroups && this.checkedClasses[0].groupIdx;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { label: group.heading || strings.panels.type.untitledGroup, value: idx, disabled: disableGroupIdx === idx, onCalciteListItemSelect: (event) => {
                const node = event.target;
                const idx = node.value;
                let uniqueValueClasses = this.checkedClasses
                    .filter((checkedClass) => checkedClass.groupIdx !== -1)
                    .map((checkedClass) => groups[checkedClass.groupIdx].classes[checkedClass.classIdx]);
                const otherUniqueValueClasses = (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.b)();
                uniqueValueClasses = uniqueValueClasses.concat(this.checkedClasses
                    .filter((checkedClass) => checkedClass.groupIdx === -1)
                    .map((checkedClass) => otherUniqueValueClasses[checkedClass.classIdx]));
                const group = groups[idx];
                group.classes = group.classes.concat(uniqueValueClasses);
                // remove from old position
                this.checkedClasses.sort((a, b) => b.groupIdx - a.groupIdx === 0 ? b.classIdx - a.classIdx : b.groupIdx - a.groupIdx);
                this.checkedClasses.forEach((checkedClass) => {
                    if (checkedClass.groupIdx !== -1) {
                        groups[checkedClass.groupIdx].classes.splice(checkedClass.classIdx, 1);
                        if (!groups[checkedClass.groupIdx].classes.length) {
                            groups.splice(checkedClass.groupIdx, 1);
                        }
                    }
                });
                this.checkedClasses = [];
                renderer.uniqueValueGroups = groups;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                this.popoverNode.open = false;
                this.arcgisSmartMappingTypeActionsPopoverChange.emit({
                    checkedClasses: this.checkedClasses
                });
                // if we do this too early the enter key executes on the focused div
                setTimeout(() => { var _a; return (_a = this.groupMenuNodes[idx]) === null || _a === void 0 ? void 0 : _a.setFocus(); }, 300);
            } }));
    }
    renderGroup1() {
        var _a;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = renderer.uniqueValueGroups;
        const classIdxs = this.checkedClasses.map((checkedClass) => checkedClass.classIdx);
        const len = classIdxs.length;
        const grpClsLen = (_a = groups[this.checkedClasses[0].groupIdx]) === null || _a === void 0 ? void 0 : _a.classes.length;
        classIdxs.sort((a, b) => a - b);
        const canMoveUp = classIdxs[0] > 0 ||
            !!classIdxs.find((classIdx, idx) => idx > 0 && classIdx - 1 > classIdxs[idx - 1]);
        const canMoveDown = classIdxs[len - 1] < grpClsLen - 1 ||
            !!classIdxs.find((classIdx, idx) => idx < len - 1 && classIdx + 1 < classIdxs[idx + 1]);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-group", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.panels.type.moveUp, textEnabled: true, disabled: !canMoveUp, icon: "arrow-bold-up", onClick: () => this.moveUp(), ref: (node) => (this.moveUpNode = node) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.panels.type.moveDown, textEnabled: true, disabled: !canMoveDown, icon: "arrow-bold-down", onClick: () => this.moveDown(), ref: (node) => (this.moveDownNode = node) })));
    }
    renderGroup2() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = renderer.uniqueValueGroups;
        const multipleGroups = !!this.checkedClasses.find((checkedClass) => checkedClass.groupIdx !== this.checkedClasses[0].groupIdx);
        const canMerge = !!this.checkedClasses.find((info) => info.groupIdx !== -1) &&
            this.checkedClasses.length > 1;
        const canSeparate = !!this.checkedClasses.find((info) => info.groupIdx !== -1 && groups[info.groupIdx].classes[info.classIdx].values.length > 1);
        const disabled = !multipleGroups &&
            this.checkedClasses[0].groupIdx !== -1 &&
            this.checkedClasses.length === groups[this.checkedClasses[0].groupIdx].classes.length;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-group", null, canMerge && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.panels.type.mergeValues, textEnabled: true, onClick: () => this.mergeValues(), ref: (node) => (this.mergeNode = node) })), canSeparate && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.panels.type.separateValues, textEnabled: true, onClick: () => this.separateSelectedValues(), ref: (node) => (this.separateNode = node) })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.panels.type.moveToGroup, textEnabled: true, onClick: () => this.moveToGroup(), ref: (node) => {
                if (node) {
                    this.moveToGroupNode = node;
                }
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.panels.type.newGroup, textEnabled: true, disabled: disabled, onClick: () => this.moveToNewGroup(), ref: (node) => (this.moveToNewGroupNode = node) })));
    }
    renderGroup3() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-group", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.panels.type.clearSelection, textEnabled: true, onClick: () => this.clearSelection(), onKeyDown: (event) => {
                if (!event.shiftKey && event.key === "Tab") {
                    this.arcgisSmartMappingTypeActionsPopoverFocusExit.emit("bottom");
                }
            } })));
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    clearSelection() {
        let minGroup = -1;
        this.checkedClasses.forEach((checkedClass) => (minGroup =
            checkedClass.groupIdx === -1
                ? minGroup
                : minGroup === -1
                    ? checkedClass.groupIdx
                    : Math.min(minGroup, checkedClass.groupIdx)));
        this.checkedClasses = [];
        this.popoverNode.open = false;
        this.arcgisSmartMappingTypeActionsPopoverChange.emit({ checkedClasses: this.checkedClasses });
        // if we do this too early the enter key executes on the focused div
        setTimeout(() => { var _a; return (_a = this.groupMenuNodes[minGroup]) === null || _a === void 0 ? void 0 : _a.setFocus(); }, 300);
    }
    mergeValues() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = renderer.uniqueValueGroups;
        this.checkedClasses.sort((a, b) => a.groupIdx - b.groupIdx === 0
            ? a.classIdx - b.classIdx
            : a.groupIdx === -1 || b.groupIdx === -1
                ? b.groupIdx - a.groupIdx
                : a.groupIdx - b.groupIdx);
        const mergedClass = groups[this.checkedClasses[0].groupIdx].classes[this.checkedClasses[0].classIdx];
        const otherUniqueValueClasses = (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.b)();
        this.checkedClasses.forEach((info, idx) => {
            // merge all values to this.checkedClasses[0]
            if (idx > 0) {
                const uvClass = info.groupIdx === -1
                    ? otherUniqueValueClasses[info.classIdx]
                    : groups[info.groupIdx].classes[info.classIdx];
                mergedClass.values = mergedClass.values.concat(uvClass.values);
                mergedClass.label += `, ${uvClass.label}`;
            }
        });
        const newGroups = [];
        groups.forEach((group, groupIdx) => {
            const newClasses = [];
            group.classes.forEach((uvClass, classIdx) => {
                if (this.checkedClasses[0].groupIdx === groupIdx &&
                    this.checkedClasses[0].classIdx === classIdx) {
                    // replace with the merged class
                    newClasses.push(mergedClass);
                }
                else if (!this.checkedClasses.find((info) => info.groupIdx === groupIdx && info.classIdx === classIdx)) {
                    // keep as is
                    newClasses.push(uvClass);
                } // else remove
            });
            if (newClasses.length) {
                group.classes = newClasses;
                newGroups.push(group);
            }
        });
        renderer.uniqueValueGroups = newGroups;
        this.checkedClasses = [];
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        this.popoverNode.open = false;
        this.arcgisSmartMappingTypeActionsPopoverChange.emit({ checkedClasses: this.checkedClasses });
    }
    moveDown() {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const uvRenderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = uvRenderer.uniqueValueGroups;
        const group = groups[this.checkedClasses[0].groupIdx];
        this.checkedClasses.sort((a, b) => b.groupIdx - a.groupIdx === 0 ? b.classIdx - a.classIdx : b.groupIdx - a.groupIdx);
        const newCheckedClasses = modules.esriLang.clone(this.checkedClasses);
        this.checkedClasses.forEach((checkedClass, idx) => {
            if (checkedClass.classIdx < group.classes.length - 1 &&
                (idx === 0 ||
                    (idx > 0 && newCheckedClasses[idx - 1].classIdx !== checkedClass.classIdx + 1))) {
                const uniqueClass = group.classes.splice(checkedClass.classIdx, 1)[0];
                group.classes.splice(checkedClass.classIdx + 1, 0, uniqueClass);
                newCheckedClasses[idx].classIdx = checkedClass.classIdx + 1;
            }
        });
        this.checkedClasses = newCheckedClasses;
        uvRenderer.uniqueValueGroups = groups;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        this.arcgisSmartMappingTypeActionsPopoverChange.emit({ checkedClasses: this.checkedClasses });
        setTimeout(() => {
            this.moveDownNode.disabled ? this.moveUpNode.setFocus() : this.moveDownNode.setFocus();
        }, 300);
    }
    moveToGroup() {
        this.showMoveToGroup = true;
    }
    moveToNewGroup(untitled = false) {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = renderer.uniqueValueGroups;
        let uniqueValueClasses = this.checkedClasses
            .filter((checkedClass) => checkedClass.groupIdx !== -1)
            .map((checkedClass) => groups[checkedClass.groupIdx].classes[checkedClass.classIdx]);
        const otherUniqueValueClasses = (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.b)();
        uniqueValueClasses = uniqueValueClasses.concat(this.checkedClasses
            .filter((checkedClass) => checkedClass.groupIdx === -1)
            .map((checkedClass) => otherUniqueValueClasses[checkedClass.classIdx]));
        const newGroup = new modules.UniqueValueGroup({
            heading: untitled ? null : (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.d)(groups),
            classes: uniqueValueClasses
        });
        groups.push(newGroup);
        this.checkedClasses.sort((a, b) => b.groupIdx - a.groupIdx === 0 ? b.classIdx - a.classIdx : b.groupIdx - a.groupIdx);
        this.checkedClasses.forEach((checkedClass) => {
            if (checkedClass.groupIdx !== -1) {
                groups[checkedClass.groupIdx].classes.splice(checkedClass.classIdx, 1);
                if (!groups[checkedClass.groupIdx].classes.length) {
                    groups.splice(checkedClass.groupIdx, 1);
                }
            }
        });
        this.checkedClasses = [];
        renderer.uniqueValueGroups = groups;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        this.popoverNode.open = false;
        this.arcgisSmartMappingTypeActionsPopoverChange.emit({ checkedClasses: this.checkedClasses });
        // if we do this too early the enter key executes on the focused div
        setTimeout(() => { var _a; return (_a = this.groupMenuNodes[groups.length - 1]) === null || _a === void 0 ? void 0 : _a.setFocus(); }, 300);
    }
    moveUp() {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const uvRenderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = uvRenderer.uniqueValueGroups;
        const group = groups[this.checkedClasses[0].groupIdx];
        this.checkedClasses.sort((a, b) => a.groupIdx - b.groupIdx === 0 ? a.classIdx - b.classIdx : a.groupIdx - b.groupIdx);
        const newCheckedClasses = modules.esriLang.clone(this.checkedClasses);
        this.checkedClasses.forEach((checkedClass, idx) => {
            if (checkedClass.classIdx > 0 &&
                (idx === 0 ||
                    (idx > 0 && newCheckedClasses[idx - 1].classIdx !== checkedClass.classIdx - 1))) {
                const uniqueClass = group.classes.splice(checkedClass.classIdx, 1)[0];
                group.classes.splice(checkedClass.classIdx - 1, 0, uniqueClass);
                newCheckedClasses[idx].classIdx = checkedClass.classIdx - 1;
            }
        });
        this.checkedClasses = newCheckedClasses;
        uvRenderer.uniqueValueGroups = groups;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        this.arcgisSmartMappingTypeActionsPopoverChange.emit({ checkedClasses: this.checkedClasses });
        setTimeout(() => {
            this.moveUpNode.disabled ? this.moveDownNode.setFocus() : this.moveUpNode.setFocus();
        }, 300);
    }
    separateSelectedValues() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const groups = renderer.uniqueValueGroups;
        this.checkedClasses.sort((a, b) => a.groupIdx - b.groupIdx === 0 ? a.classIdx - b.classIdx : a.groupIdx - b.groupIdx);
        const groupInfos = [];
        let lastGroupIdx = -2;
        let classIdxs = [];
        this.checkedClasses.forEach((info) => {
            if (info.groupIdx !== -1) {
                if (lastGroupIdx !== info.groupIdx) {
                    if (lastGroupIdx !== -2) {
                        groupInfos.push({ groupIdx: lastGroupIdx, classIdxs });
                    }
                    lastGroupIdx = info.groupIdx;
                    classIdxs = [info.classIdx];
                }
                else {
                    classIdxs.push(info.classIdx);
                }
            }
        });
        if (lastGroupIdx !== -2) {
            groupInfos.push({ groupIdx: lastGroupIdx, classIdxs });
        }
        groupInfos.forEach((info) => (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.f)(groups[info.groupIdx], info.classIdxs));
        this.checkedClasses = [];
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        this.popoverNode.open = false;
        this.arcgisSmartMappingTypeActionsPopoverChange.emit({ checkedClasses: this.checkedClasses });
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisSmartMappingTypeAddValue = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingTypeAddValuePopoverClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingTypeAddValuePopoverClose", 7);
        this.arcgisSmartMappingTypeAddValuePopoverNewValue = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingTypeAddValuePopoverNewValue", 7);
        this.userTouchedLabel = false;
        this.flowItemNode = undefined;
        this.referenceNode = undefined;
        this.groupIdx = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        var _a, _b;
        const { allUniqueValues, layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        // gather all unique values of layer
        this.allValues = allUniqueValues === null || allUniqueValues === void 0 ? void 0 : allUniqueValues.map((uniqueValueInfo) => "" + uniqueValueInfo.value);
        // add the custom added values to the list
        renderer.uniqueValueGroups.forEach((uniqueValueGroup) => {
            uniqueValueGroup.classes.forEach((uniqueValueClass) => {
                var _a;
                const value = (_a = uniqueValueClass.values) === null || _a === void 0 ? void 0 : _a[0].value;
                if (this.allValues.indexOf("" + value) === -1) {
                    this.allValues.push("" + value);
                }
            });
        });
        this.field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(renderer.field);
        this.isDate = ((_a = this.field) === null || _a === void 0 ? void 0 : _a.simpleFieldType) === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE;
        this.isNumber = ((_b = this.field) === null || _b === void 0 ? void 0 : _b.simpleFieldType) === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER;
        this.isInt =
            this.field &&
                ["small-integer", "integer", "long"].indexOf((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.z)(this.field.layerField)) > -1;
    }
    componentDidLoad() {
        var _a;
        (_a = this.panelNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { referenceElement: this.referenceNode, placement: "bottom-end", offsetDistance: 0, offsetSkidding: 0, label: strings.panels.type.addValue, open: true, ref: (node) => (this.popoverNode = node) }, this.renderContent())));
    }
    renderContent() {
        var _a;
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const nodeWidth = (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: strings.panels.type.addValue, closable: true, onCalcitePanelClose: () => this.arcgisSmartMappingTypeAddValuePopoverClose.emit(), ref: (node) => (this.panelNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (node) => {
                if (node) {
                    node.style.padding = "15px";
                    node.style.width = `${nodeWidth ? nodeWidth + 20 : 280}px`;
                }
            } }, this.renderValueInput(), this.renderLabelInput()), this.renderDoneButton()));
    }
    renderValueInput() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const { isDate, isInt, isNumber } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, strings.panels.type.value, 
        // date
        isDate ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-date-picker", { scale: "s", overlayPositioning: "fixed", onCalciteInputDatePickerChange: (event) => {
                const node = event.target;
                this.handleAddDate(node.value);
            } })) : // number
            isNumber ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { step: isInt ? 1 : "any", scale: "s", label: strings.panels.type.value, placeholder: strings.panels.type.storedValue, onCalciteInputNumberInput: (event) => {
                    const node = event.target;
                    this.handleAddNumber(node.value);
                } })) : (
            // string
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { scale: "s", label: strings.panels.type.value, placeholder: strings.panels.type.storedValue, onCalciteInputInput: () => this.handleAddString(this.valueInputNode.value), ref: (node) => {
                    if (node) {
                        this.valueInputNode = node;
                    }
                } })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-message", { hidden: true, icon: "exclamation-mark-triangle", status: "invalid", ref: (node) => (this.valueInputMessageNode = node) }, strings.panels.type.valueNotUnique)));
    }
    renderLabelInput() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, strings.panels.type.label, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", value: "", scale: "s", placeholder: strings.panels.type.displayedValue, label: strings.panels.type.label, onCalciteInputInput: () => {
                this.userTouchedLabel = true;
            }, ref: (node) => (this.labelInputNode = node) })));
    }
    renderDoneButton() {
        const { locale, mapView, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const { field, isDate, isInt, isNumber } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "solid", label: strings.done, width: "full", slot: "footer", disabled: true, onClick: () => {
                this.popoverNode.open = false;
                const value = this.valueInputNode.value;
                let newLabel;
                let newValue;
                if (isDate) {
                    // value for date returns a string like this 2022-08-01, which is UTC time
                    // the date value must be UTC, but the label must be local time
                    newValue = (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_8__.d)(value, mapView.timeZone);
                    modules.intl.setLocale(locale);
                    newLabel = this.labelInputNode.value || (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.e)(newValue, field);
                }
                else if (isNumber) {
                    newValue = isInt ? parseInt(value) : parseFloat(value);
                    newLabel = this.labelInputNode.value || modules.intl.formatNumber(newValue);
                }
                else {
                    // string
                    newLabel = this.labelInputNode.value || value;
                    newValue = value;
                }
                this.addValue(newLabel, newValue);
            }, ref: (node) => (this.doneButtonNode = node) }, strings.done));
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    addValue(label, value) {
        var _a;
        const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const symbol = modules.esriLang.clone(((_a = renderer.uniqueValueInfos.find((uniqueValueInfo) => {
            var _a;
            return ["simple-marker", "simple-line", "simple-fill", "cim"].indexOf((_a = uniqueValueInfo.symbol) === null || _a === void 0 ? void 0 : _a.type) > -1;
        })) === null || _a === void 0 ? void 0 : _a.symbol) || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)()));
        const scheme = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__._)();
        if (scheme) {
            const color = scheme.colors[renderer.uniqueValueInfos.length % scheme.colors.length];
            color && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.r)(symbol, color);
        }
        else {
            // just pick some colors from the primary scheme
            const primaryRampColors = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.$)().colors;
            const color = new modules.esriColor(primaryRampColors[renderer.uniqueValueInfos.length % 10]);
            color && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.r)(symbol, color);
        }
        let groups = renderer.uniqueValueGroups;
        if (this.groupIdx === -2) {
            // there are no groups yet
            groups = [new modules.UniqueValueGroup({ heading: undefined, classes: [] })];
            this.groupIdx = 0;
        }
        groups[this.groupIdx].classes.push(new modules.UniqueValueClass({
            values: [new modules.UniqueValue({ value })],
            label: label,
            symbol
        }));
        renderer.uniqueValueGroups = groups;
        this.arcgisSmartMappingTypeAddValuePopoverNewValue.emit();
    }
    handleAddDate(value) {
        const { allUniqueValues, mapView, layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        // gather all unique values of layer
        const allValues = allUniqueValues === null || allUniqueValues === void 0 ? void 0 : allUniqueValues.map((uniqueValueInfo) => "" + uniqueValueInfo.value);
        // add the custom added values to the list
        renderer.uniqueValueGroups.forEach((uniqueValueGroup) => {
            uniqueValueGroup.classes.forEach((uniqueValueClass) => {
                var _a;
                const value = (_a = uniqueValueClass.values) === null || _a === void 0 ? void 0 : _a[0].value;
                if (allValues.indexOf("" + value) === -1) {
                    allValues.push("" + value);
                }
            });
        });
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(renderer.field);
        if (!this.userTouchedLabel) {
            // value for date returns a string like this 2022-08-01
            // the date value must be stored in UTC
            const newValue = (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_8__.d)(value, mapView.timeZone);
            this.labelInputNode.value = (0,_type_0ace5d2e_js__WEBPACK_IMPORTED_MODULE_5__.e)(newValue, field);
        }
        this.valueInputMessageNode.hidden = allValues.indexOf(value) === -1;
        this.doneButtonNode.disabled = !value.length || allValues.indexOf(value) > -1;
    }
    handleAddNumber(value) {
        const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (value.length && this.isInt) {
            let strValue = "" + Math.round(parseFloat(value));
            if (strValue.indexOf(".") > -1) {
                strValue = strValue.substring(0, strValue.indexOf("."));
            }
            if (strValue !== value) {
                value = strValue;
            }
        }
        if (!this.userTouchedLabel) {
            const newValue = this.isInt ? parseInt(value) : parseFloat(value);
            this.labelInputNode.value = modules.intl.formatNumber(newValue);
        }
        this.valueInputMessageNode.hidden = this.allValues.indexOf(value) === -1;
        this.doneButtonNode.disabled = !value.length || this.allValues.indexOf(value) > -1;
    }
    handleAddString(value) {
        if (!this.userTouchedLabel) {
            this.labelInputNode.value = value;
        }
        this.valueInputMessageNode.hidden = this.allValues.indexOf(value) === -1;
        this.doneButtonNode.disabled = !value.length || this.allValues.indexOf(value) > -1;
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};



//# sourceMappingURL=arcgis-smart-mapping-panels-type_3.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addDateFormatFunctions),
/* harmony export */   b: () => (/* binding */ utcToTimePicker),
/* harmony export */   d: () => (/* binding */ datePickerToUTC),
/* harmony export */   u: () => (/* binding */ utcToDatePicker)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




function addDateFormatFunctions(config, timeZone) {
    config.labelFormatFunction = (value) => {
        return getDateDisplayString(value, timeZone, "short-date");
    };
    config.inputFormatFunction = (value) => {
        return getDateDisplayString(value, timeZone, "short-date");
    };
    config.inputParseFunction = (value) => {
        return mapTZToUTC(Date.parse(value), timeZone);
    };
}
function utcToDatePicker(value, timeZone) {
    // date is in UTC
    // we need a map timezone
    let str;
    if (!timeZone || timeZone === "system") {
        const diff = new Date().getTimezoneOffset();
        str = new Date(value - diff * 60000).toISOString();
    }
    else if (timeZone === "unknown") {
        str = new Date(value).toISOString();
    }
    else {
        const diff = new Date().getTimezoneOffset();
        const mapDateStr = new Date(value).toLocaleString("en-US", { timeZone });
        str = new Date(new Date(mapDateStr).getTime() - diff * 60000).toISOString();
    }
    // console.log("utcToDatePicker", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}
function utcToTimePicker(value, timeZone, addSeconds) {
    // date is in UTC
    // we need a map timezone
    let str;
    if (!timeZone || timeZone === "system") {
        const diff = new Date().getTimezoneOffset();
        str = new Date(value - diff * 60000).toISOString();
    }
    else if (timeZone === "unknown") {
        str = new Date(value).toISOString();
    }
    else {
        const diff = new Date().getTimezoneOffset();
        const mapDateStr = new Date(value).toLocaleString("en-US", { timeZone });
        str = new Date(new Date(mapDateStr).getTime() - diff * 60000).toISOString();
    }
    // str = "2023-09-20T13:06:00.000Z"
    str = addSeconds ? str.substring(11, 19) : str.substring(11, 16);
    // console.log("utcToTimePicker", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}
function datePickerToUTC(dateString, timeZone) {
    // date is in map timezone
    // we need a UTC UNIX timestamp
    let date = new Date(dateString);
    // this is read as current time; toISOString() would reaturn UTC time (e.g. +7 hours from pacific)
    // fix the offset
    date = new Date(date.getTime() - date.getTimezoneOffset() * 60000);
    // date now contains the user's entered time
    let value;
    if (!timeZone || timeZone === "system") {
        // add difference between local time and UTC
        value = date.getTime() + date.getTimezoneOffset() * 60000;
    }
    else if (timeZone === "unknown") {
        // take what you get
        value = date.getTime();
    }
    else {
        // add difference between map time and UTC
        const diff = new Date(date.toLocaleString("en-US", { timeZone: "utc" })).getTime() -
            new Date(date.toLocaleString("en-US", { timeZone })).getTime();
        value = date.getTime() + diff;
    }
    // console.log("datePickerToUTC", date.toISOString(), " -> ", new Date(value).toISOString());
    return value;
}
function mapTZToUTC(value, timeZone) {
    if (!value) {
        return value;
    }
    // value is in map timezone
    // we need a UTC timestamp
    let newValue;
    if (!timeZone || timeZone === "system") {
        // add difference between local time and UTC
        const date = new Date();
        newValue = value + date.getTimezoneOffset() * 60000;
    }
    else if (timeZone === "unknown") {
        // take what you get
        newValue = value;
    }
    else {
        // add difference between map time and UTC
        const date = new Date();
        const diff = new Date(date.toLocaleString("en-US", { timeZone: "utc" })).getTime() -
            new Date(date.toLocaleString("en-US", { timeZone })).getTime();
        newValue = value + diff;
    }
    console.log("mapTZToUTC", value, " - ", new Date(value).toISOString(), " - ", new Date(newValue).toISOString());
    return newValue;
}
function getDateDisplayString(value, timeZone, dateFormat) {
    const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    let str;
    if (timeZone === "unknown") {
        str = modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions(dateFormat || "short-date-short-time")), { timeZone: "utc", timeZoneName: "shortOffset" }));
    }
    else {
        // known issues with formatting it-CH
        str = modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions(dateFormat || "short-date-short-time")), { timeZone }));
    }
    // console.log("getDateDisplayString", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}



//# sourceMappingURL=date-79c7d93c.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,