"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-a7f161"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-dbbe2f57.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-dbbe2f57.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addItemState),
/* harmony export */   b: () => (/* binding */ addItemUrlState),
/* harmony export */   c: () => (/* binding */ addItemRequestState),
/* harmony export */   d: () => (/* binding */ addItemStore)
/* harmony export */ });
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const addItemStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__.c)({
    typeKeywords: [],
    customParameters: [],
    analyzedLocationTypes: [],
    allowStoredAuth: true,
    isSecured: null,
    checkAuth: false
});
// Entire add item state object
const addItemState = addItemStore.state;
// Subsets of add item state
const addItemRequestState = addItemStore.state;
const addItemUrlState = addItemStore.state;



//# sourceMappingURL=add-item-dbbe2f57.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-csv-location-fields.entry.js":
/*!********************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-csv-location-fields.entry.js ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_new_item_pages_csv_location_fields: () => (/* binding */ ArcgisNewItemPagesCsvLocationFields)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _analyze_69ec08c8_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./analyze-69ec08c8.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/analyze-69ec08c8.js");
/* harmony import */ var _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./add-item-dbbe2f57.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-dbbe2f57.js");
/* harmony import */ var _ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui-bca7bcd1.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-bca7bcd1.js");
/* harmony import */ var _geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./geocode-64e0b0d3.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/geocode-64e0b0d3.js");
/* harmony import */ var _item_types_586f0301_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./item-types-586f0301.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-586f0301.js");
/* harmony import */ var _privileges_74639dae_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./privileges-74639dae.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-74639dae.js");
/* harmony import */ var _privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./privileges-5c382f61.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _basic_6db7ebd7_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./basic-6db7ebd7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/basic-6db7ebd7.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _append_4e11032c_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./append-4e11032c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/append-4e11032c.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./item-types-2029b06b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-2029b06b.js");
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */






















const arcgisNewItemPagesCsvLocationFieldsCss = ".wrapper{padding-bottom:2rem}.table{margin-bottom:1.5rem}.row{display:flex;align-items:center;padding-left:0px;padding-right:0px;padding-top:0.5rem;padding-bottom:0.5rem;box-shadow:0px -1px 0px #eaeaea}.row--header{box-shadow:none}.cell{box-sizing:border-box;width:50%;padding:0.5rem;font-size:0.875rem;font-weight:500;color:var(--calcite-color-text-1)}.cell--header{font-weight:400}.advanced{margin-top:1rem;margin-bottom:2rem;background-color:var(--calcite-color-foreground-2)}.advanced__toggle{margin:0px;box-sizing:border-box;display:flex;width:100%;cursor:pointer;align-items:center;border-radius:0;border-style:none;padding:1.25rem;font-size:0.875rem;font-weight:500;color:var(--calcite-color-text-2);background-color:transparent;transition:all 150ms ease-in-out;outline-offset:0px;outline-color:transparent;font-family:inherit}.advanced__toggle:focus{outline:2px solid var(--calcite-color-brand);outline-offset:-2px}.advanced__icon{margin-inline-end:1rem;transform:rotate(90deg);transition-duration:150ms;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1)}.arcgis--rtl{transform:rotate(-90deg)}.advanced__icon--open{transform:rotate(180deg)}.advanced__content{padding-left:1.25rem;padding-right:1.25rem;padding-top:0.5rem;padding-bottom:0.5rem}.two-up{margin-bottom:0.75rem;display:flex;justify-content:space-between}.column{width:calc(50% - 6px)}.header{margin:0px;margin-bottom:0.5rem;padding:0px;font-size:1rem;font-weight:500;color:var(--calcite-color-text-1)}.description{margin:0px;margin-bottom:1.5rem;padding:0px;font-size:1rem;color:var(--calcite-color-text-3)}.enrich-layer-container{background-color:var(--calcite-color-foreground-1);border:1px solid var(--calcite-color-border-input);padding:15px 15px 0px 15px}.enrich-switch{display:flex;justify-content:space-between}.enrich-title{display:flex;color:var(--calcite-color-text-1)}.enrich-radio-text{color:var(--calcite-color-text-3)}.radio{margin-bottom:0.75rem}.asterisk{color:var(--calcite-color-status-danger)}.notice{margin-top:0.5rem}.loader-overlay{overflow:hidden}.enrich-description{margin-bottom:0.75rem;margin-top:0px}";

const ArcgisNewItemPagesCsvLocationFields = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.newItemUpdatePage = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "newItemUpdatePage", 7);
        this.workflowComplete = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "workflowComplete", 7);
        this.newItemToggleNavigationEnabled = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "newItemToggleNavigationEnabled", 7);
        this.newItemDisableCloseButtons = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "newItemDisableCloseButtons", 7);
        this.userHasAssignedCredits = false;
        this.orgIsRestricted = false;
        this.showTotalCredits = false;
        this.isAppendWorkflow = false;
        // Telemetry: Log changes user made to fields
        this.logCSVLocationFieldsChanges = () => {
            const telemetry = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.telemetry;
            const payload = {
                eventType: "other",
                pageName: "my content",
                category: "new item csv location settings",
                label: this.currentLocationType
            };
            // Handle properties unique to address location type
            if (this.currentLocationType === "address place names") {
                if (this.displayEnrichLayerSettings) {
                    payload.action =
                        this.selectedCandidateFieldsType === "GeometryOnly"
                            ? "enrich with some fields"
                            : "enrich with all fields";
                }
                else {
                    payload.action = "enrich with no fields";
                }
                payload.facetValue =
                    this.selectedLocationFieldSelectionType === "Multiple" ? "multi" : "single line address";
                payload.details =
                    this.initialLocator === _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.geocodeServiceUrl
                        ? "default locator"
                        : "locator changed";
                payload.attribute =
                    this.initialRegion === _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.sourceCountry ? "default region" : "region changed";
            }
            telemetry === null || telemetry === void 0 ? void 0 : telemetry.logEvent(payload);
        };
        this.selectedLocationType = "none";
        this.advancedExpanded = false;
        this.selectedCandidateFieldsType = "GeometryOnly";
        this.displayEnrichLayerSettings = false;
        this.selectedLocationFieldSelectionType = "Single";
        this.error = undefined;
        this.i18n = undefined;
    }
    async handleNext() {
        var _a;
        if ((this.orgIsRestricted || this.userHasAssignedCredits) && this.hasInsufficientCredits()) {
            this.error = this.i18n.errors.insufficientCredits;
            (_a = this.estimate) === null || _a === void 0 ? void 0 : _a.scrollIntoView();
            return;
        }
        const error = this.validateFields();
        if (error) {
            this.error = error;
        }
        else {
            this.error = null;
            if (this.isAppendWorkflow &&
                (_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.addAppendSelectOption === "add" ||
                    _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.addAppendSelectOption === "upsert")) {
                if (_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType === "none" &&
                    _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.sourceDataLayer.geometryType === "esriGeometryPoint") {
                    this.error = this.i18n.errors.noLocationTypeForAppend;
                    return;
                }
            }
            const analyzeResults = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.analyzeResults;
            const publishParameters = (0,_geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_6__.e)(this.selectedLocationFieldSelectionType, this.isAppendWorkflow);
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.analyzeResults = Object.assign(Object.assign({}, analyzeResults), { publishParameters });
            if (this.isAppendWorkflow) {
                const { name } = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.dataLayer;
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.dataLayer = publishParameters; //update dataLayer for append
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.dataLayer.name = name;
            }
            this.logCSVLocationFieldsChanges();
            let nextPage = "itemProperties";
            if (this.isAddToMapTerminalPage()) {
                this.workflowComplete.emit({
                    type: _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.type,
                    url: encodeURI(_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.url),
                    customParameters: _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.customParameters,
                    results: {
                        analyzeResults: _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.analyzeResults,
                        fields: _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.selectedFields
                    }
                });
            }
            else {
                if (this.isAppendWorkflow) {
                    if (_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.addAppendSelectOption === "add" &&
                        (!_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.backupLayerFields.some((field) => field.type === "esriFieldTypeDate") ||
                            this.isEnterprise)) {
                        nextPage = "appendMatchFields";
                    }
                    else {
                        nextPage = "appendKeyPairSelect";
                    }
                }
                this.newItemUpdatePage.emit(nextPage);
            }
        }
    }
    hasInsufficientCredits() {
        return (this.selectedLocationType === "address" &&
            (0,_geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_6__.i)(_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.geocodeServiceUrl) &&
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.geocodeCost &&
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.geocodeCost.transactionCreditCost > _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.geocodeCost.availableCredits);
    }
    showUnrestrictedOrgCreditsNotice() {
        return !(this.orgIsRestricted || this.userHasAssignedCredits) && this.hasInsufficientCredits();
    }
    isAddToMapTerminalPage() {
        return (_ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_5__.u.workflow === "map" &&
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.newItemMode === "url" &&
            !_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.enablePublishing);
    }
    async analyze() {
        var _a;
        const { file, url, existingItem, id: itemid, cloudProviderResource, type } = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a;
        const { portal, user, config, lang } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
        return (0,_analyze_69ec08c8_js__WEBPACK_IMPORTED_MODULE_3__.a)({
            analyzeArgs: (!!existingItem || !!cloudProviderResource || (0,_item_types_586f0301_js__WEBPACK_IMPORTED_MODULE_7__.a)((_a = file === null || file === void 0 ? void 0 : file.size) !== null && _a !== void 0 ? _a : 0)) && !!itemid
                ? { type: "item", itemid }
                : file
                    ? { type: "file", file }
                    : { type: "url", sourceUrl: url },
            itemArgs: { itemType: type },
            configArgs: { portal, user, config, lang }
        });
    }
    async componentWillLoad() {
        var _a, _b, _c, _d, _e, _f;
        const { analyzeResults, type, selectedSheet, standardizedFieldNames, enablePublishing, cloudProviderResource, geocodeServiceUrl } = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a;
        const { portal, user, config, lang } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
        const info = (0,_geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_6__.a)();
        this.isAppendWorkflow = _ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_5__.u.workflow === "append";
        this.subscriptionInfo = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.subscriptionInfo;
        this.isEnterprise = portal.isPortal;
        const appendInEnterprise = this.isAppendWorkflow && config.self.isPortal;
        const userAssignedCredits = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.api === 4 ? (_a = user.sourceJSON) === null || _a === void 0 ? void 0 : _a.assignedCredits : user.assignedCredits;
        this.userHasAssignedCredits = userAssignedCredits > 0;
        this.orgIsRestricted = ((_b = this.subscriptionInfo) === null || _b === void 0 ? void 0 : _b.state) === "restricted";
        this.i18n = _ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_5__.u.i18n.csvLocationFields;
        if (this.isAddToMapTerminalPage()) {
            _ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_5__.u.nextText = "addToMap";
        }
        let types = appendInEnterprise
            ? ["coordinates", "none"]
            : ["coordinates", "address", "none", "mgrs", "usng"];
        const showAddress = (0,_privileges_74639dae_js__WEBPACK_IMPORTED_MODULE_8__.m)(user) &&
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.geocodeServers &&
            (_ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_5__.u.workflow !== "map" || enablePublishing);
        const isDev = (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.i)(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.subscriptionInfo);
        this.showTotalCredits = (0,_privileges_74639dae_js__WEBPACK_IMPORTED_MODULE_8__.o)(user, portal);
        const { selectedLocationFieldSelectionType } = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a;
        this.selectedLocationFieldSelectionType = selectedLocationFieldSelectionType !== null && selectedLocationFieldSelectionType !== void 0 ? selectedLocationFieldSelectionType : "Single";
        const isAddDirectToMap = _ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_5__.u.workflow === "map" && !enablePublishing;
        this.locationTypes = types
            .map((key) => ({
            optionTitle: this.i18n.locationTypes[key].title,
            description: isDev && key === "address"
                ? this.i18n.locationTypes.address.descriptionDeveloper
                : this.i18n.locationTypes[key].description.replace("${type}", (cloudProviderResource === null || cloudProviderResource === void 0 ? void 0 : cloudProviderResource.cloudFileType) === "googlesheets" ? "Google Sheet" : type),
            value: key,
            badge: key === "address" && !_config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.isPortal && !isDev
                ? { label: this.i18n.consumesCredits, icon: "credits" }
                : null,
            icon: key === "none" ? "table" : "layer-points"
        }))
            .filter(({ value }) => 
        // https://devtopia.esri.com/WebGIS/arcgis-app-components/issues/2605
        (value !== "address" || showAddress) &&
            // https://devtopia.esri.com/WebGIS/arcgis-app-components/issues/2766
            (value === "coordinates" || !isAddDirectToMap));
        // on first load, if coordinates are detected, use those instead of addresses
        const publishParameters = analyzeResults === null || analyzeResults === void 0 ? void 0 : analyzeResults.publishParameters;
        if (publishParameters) {
            const isExcel = type === "Microsoft Excel";
            const params = isExcel
                ? (_d = (_c = publishParameters === null || publishParameters === void 0 ? void 0 : publishParameters.layers) === null || _c === void 0 ? void 0 : _c[selectedSheet]) !== null && _d !== void 0 ? _d : (_e = publishParameters === null || publishParameters === void 0 ? void 0 : publishParameters.layers) === null || _e === void 0 ? void 0 : _e[0]
                : analyzeResults === null || analyzeResults === void 0 ? void 0 : analyzeResults.publishParameters;
            if (params.latitudeFieldName || params.longitudeFieldName) {
                this.selectedLocationType = "coordinates";
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType = "coordinates";
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.coordinateFieldType = "LatitudeAndLongitude";
            }
            if (publishParameters.locationType === "coordinates" &&
                publishParameters.coordinateFieldType) {
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType = "coordinates";
                switch (publishParameters.coordinateFieldType) {
                    case "MGRS":
                        this.selectedLocationType = "mgrs";
                        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.coordinateFieldType = "MGRS";
                        break;
                    case "USNG":
                        this.selectedLocationType = "usng";
                        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.coordinateFieldType = "USNG";
                        break;
                    default:
                        this.selectedLocationType = "coordinates";
                        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.coordinateFieldType = "LatitudeAndLongitude";
                        break;
                }
            }
            else if (params.locationType === "address" && showAddress) {
                this.selectedLocationType = "address";
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType = "address";
            }
            (_f = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType) !== null && _f !== void 0 ? _f : (_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType = "none");
        }
        if (this.locationTypes.length === 1) {
            const locationType = this.locationTypes[0].value;
            this.selectedLocationType = locationType;
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType =
                locationType === "mgrs" || locationType === "usng" ? "coordinates" : locationType;
        }
        // if user can't geocode, and we're on address, swap to coordinates
        if (!showAddress && this.selectedLocationType === "address") {
            this.selectedLocationType = "coordinates";
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType = "coordinates";
        }
        // update analyze to use address if we have no address fields on first load
        if (this.selectedLocationType === "address" && !info.addressFields) {
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType = "address";
        }
        // if on first load the field names have not been set
        if (!standardizedFieldNames) {
            await (0,_analyze_69ec08c8_js__WEBPACK_IMPORTED_MODULE_3__.s)({
                geocodeServiceUrl,
                // ! We set the location type above so we can't just use the destructed value
                // TODO: refactor that into a local variable
                locationType: _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType,
                lang
            });
        }
        if (appendInEnterprise) {
            this.selectedLocationType = "coordinates";
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType = "coordinates";
        }
        // Telemetry: Capture initial values to compare against
        this.initialLocator = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.geocodeServiceUrl;
        this.initialRegion = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.sourceCountry;
        this.setLocationTypeTelemetry(this.selectedLocationType);
    }
    validateFields() {
        const { standardizedFieldNames, selectedFields, backupLayerFields } = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a;
        const fields = !this.isAppendWorkflow ? Object.values(selectedFields) : backupLayerFields;
        const noFieldSelected = !fields.find(({ locationType }) => {
            const matchesLocationType = (locationType === null || locationType === void 0 ? void 0 : locationType.toLowerCase()) === this.selectedLocationType.toLowerCase();
            const matchesStandardizedField = !!(standardizedFieldNames === null || standardizedFieldNames === void 0 ? void 0 : standardizedFieldNames[locationType]);
            return matchesLocationType || matchesStandardizedField;
        });
        switch (this.selectedLocationType) {
            case "usng":
            case "mgrs":
                // check if at least one field has location type usng
                if (noFieldSelected) {
                    return this.i18n.errors.noFieldSelected;
                }
                break;
            case "address":
                if (this.selectedLocationFieldSelectionType === "Single" && noFieldSelected) {
                    return this.i18n.errors.noFieldSelected;
                }
                else if (this.selectedLocationFieldSelectionType === "Multiple") {
                    const hasLocationField = fields.find((field) => field.locationType && field.locationType !== "unknown");
                    if (!hasLocationField) {
                        return this.i18n.errors.noFieldSelected;
                    }
                }
                break;
            case "coordinates":
                // check if latitude _and_ longitude are selected;
                const matching = fields.filter(({ locationType }) => locationType === "latitude" || locationType === "longitude");
                if (matching.length < 2) {
                    return this.i18n.errors.coordinate;
                }
                break;
        }
        return;
    }
    async updateLocationType(type, reanalyze) {
        this.selectedLocationType = type;
        if (type === "none") {
            _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType = "none";
            this.currentLocationType = "none";
            return;
        }
        switch (type) {
            case "mgrs":
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.coordinateFieldType = "MGRS";
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType = "coordinates";
                break;
            case "coordinates":
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.coordinateFieldType = "LatitudeAndLongitude";
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType = "coordinates";
                break;
            case "usng":
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.coordinateFieldType = "USNG";
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType = "coordinates";
                break;
            case "address":
                _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.locationType = "address";
                break;
        }
        if (reanalyze) {
            await this.analyze();
        }
        this.setLocationTypeTelemetry(type);
    }
    // Telemetry: Map location type to teletry label
    setLocationTypeTelemetry(type) {
        switch (type) {
            case "mgrs":
                this.currentLocationType = "mgrs coordinates";
                break;
            case "coordinates":
                this.currentLocationType = "lat lon";
                break;
            case "usng":
                this.currentLocationType = "usng coordinates";
                break;
            case "address":
                this.currentLocationType = "address place names";
                break;
            case "none":
                this.currentLocationType = "none";
                break;
        }
    }
    async updateGeocodeServer(url) {
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.geocodeServiceUrl = url;
        // TODO: update addItemState.isAgoWorldGeocodeServer here (https://devtopia.esri.com/WebGIS/arcgis-app-components/pull/1657)
        await this.analyze();
    }
    async updateRegion(region) {
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.sourceCountry = region;
        await this.analyze();
    }
    handleEnrichLayerSwitchChange(event) {
        const checked = event.target.checked;
        this.displayEnrichLayerSettings = checked;
        this.updateCandidateFields(checked ? "Minimal" : "GeometryOnly");
    }
    updateCandidateFields(value) {
        this.selectedCandidateFieldsType = value;
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.candidateFieldsType = value;
    }
    renderLocationFields() {
        const { standardizedFieldNames } = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a;
        const locationRows = {
            address: standardizedFieldNames,
            coordinates: { latitude: this.i18n.latitude, longitude: this.i18n.longitude },
            mgrs: { mgrs: "MGRS" },
            usng: { usng: "USNG" }
        };
        const rows = locationRows[this.selectedLocationType];
        if (this.selectedLocationFieldSelectionType === "Single" &&
            this.selectedLocationType === "address" &&
            rows) {
            const key = Object.keys(rows)[0];
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "row", role: "row" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cell", role: "cell" }, rows[key]), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cell", role: "cell" }, this.renderFieldSelect(key, rows[key]))));
        }
        else {
            return (rows &&
                Object.keys(rows).map((key) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "row", role: "row" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cell", role: "cell" }, rows[key]), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cell", role: "cell" }, this.renderFieldSelect(key, rows[key]))))));
        }
    }
    updateFieldLocationType(fieldName, addressKey) {
        const fields = !this.isAppendWorkflow
            ? Object.values(_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.selectedFields)
            : _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.backupLayerFields;
        fields.forEach((field) => {
            if (field.name === fieldName) {
                field.locationType = addressKey;
            }
            else if (field.locationType === addressKey) {
                field.locationType = "unknown";
            }
        });
    }
    handleLocationFieldSelectionChange(newType) {
        this.selectedLocationFieldSelectionType = newType;
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.selectedLocationFieldSelectionType = newType;
    }
    renderFieldSelect(addressKey, label) {
        const selectedFields = !this.isAppendWorkflow
            ? _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.selectedFields
            : _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a.backupLayerFields;
        const fields = Object.keys(selectedFields).map((key) => selectedFields[key]);
        const useDefault = !fields.some((field) => {
            return field.locationType === addressKey;
        });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: label, role: "cell", onCalciteSelectChange: (e) => this.updateFieldLocationType(e.currentTarget.selectedOption.value, addressKey) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "unknown", selected: useDefault }, this.i18n.unknown), fields.map((field) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: field.name, selected: field.locationType === addressKey }, field.alias || field.name)))));
    }
    render() {
        var _a, _b, _c, _d, _e;
        const { geocodeServiceUrl, geocodeServers, geocodeCost, sourceCountry, countryCodes } = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_4__.a;
        const { config } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
        const recordCount = (_b = (_a = (0,_geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_6__.a)()) === null || _a === void 0 ? void 0 : _a.estimatedRecordCount) !== null && _b !== void 0 ? _b : 0;
        const { helpMap, helpBase } = config;
        const dir = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.el);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-select", { class: "label--top", selectedOption: this.selectedLocationType, options: this.locationTypes, label: this.i18n.locationSettings, labelDescription: this.i18n.locationSettingsDescription, onArcgisOptionChange: (e) => this.updateLocationType(e.detail, true) }), this.selectedLocationType !== "none" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.selectedLocationType === "address" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "advanced" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "advanced__toggle", "aria-expanded": this.advancedExpanded.toString(), "aria-controls": "advanced__content", onClick: () => (this.advancedExpanded = !this.advancedExpanded) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "chevron-up", scale: "s", class: {
                advanced__icon: true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.C.rtl]: dir === "rtl",
                "advanced__icon--open": this.advancedExpanded
            } }), this.i18n.advancedSettings), this.advancedExpanded && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "advanced__content", id: "advanced__content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "two-up" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "column" }, this.i18n.locator, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: "", onCalciteSelectChange: (e) => this.updateGeocodeServer(e.currentTarget.selectedOption.value) }, geocodeServers === null || geocodeServers === void 0 ? void 0 : geocodeServers.map((server) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: server.url, selected: server.url === geocodeServiceUrl }, server.name))))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "column" }, this.i18n.region, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: "", onCalciteSelectChange: (e) => this.updateRegion(e.currentTarget.selectedOption.value) }, countryCodes === null || countryCodes === void 0 ? void 0 : countryCodes.map((country) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: country.value, selected: country.value.toLowerCase() === sourceCountry.toLowerCase() }, this.i18n.countryCodes[country.value.toUpperCase()] || country.label)))))), !_config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.isPortal && !this.isAppendWorkflow && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "enrich-layer-container" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "enrich-title" }, this.i18n.enrich, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-information", { label: (_c = _ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_5__.u.i18n) === null || _c === void 0 ? void 0 : _c.moreInfo, placement: "top-start", paddedContent: true }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "enrich-description" }, this.i18n.enrichLayerDescription), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", {
            /*@ts-ignore*/
            target: "_blank", href: `${helpBase}${helpMap["120002541"]}`
        }, this.i18n.enrichLayerLink))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { checked: this.displayEnrichLayerSettings, onCalciteSwitchChange: this.handleEnrichLayerSwitchChange.bind(this) })), this.displayEnrichLayerSettings ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button-group", { layout: "vertical", name: "enrich-group", onCalciteRadioButtonGroupChange: (event) => this.updateCandidateFields(event.target.selectedItem.value) }, ["Minimal", "AllFields"].map((type) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline", key: type }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { checked: this.selectedCandidateFieldsType === type, value: type }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "enrich-radio-text" }, this.i18n.candidateFieldsTypes[type].description)))))) : null)))))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", { class: "header" }, this.i18n.locationFields, " ", (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "asterisk" }, "*")), this.selectedLocationType === "address" ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button-group", { name: "location-field-selection-group", layout: "vertical", onCalciteRadioButtonGroupChange: (event) => this.handleLocationFieldSelectionChange(event.target.selectedItem.value) }, ["Single", "Multiple"].map((type) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline", key: type }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { checked: this.selectedLocationFieldSelectionType === type, value: type }), this.i18n[type === "Single" ? "locationFieldSingle" : "locationFieldMultiple"]))))) : null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { role: "table", class: "table" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "row row--header", role: "row" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cell cell--header", role: "columnheader", "aria-sort": "none" }, this.i18n.locationType), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cell cell--header", role: "columnheader", "aria-sort": "none" }, this.i18n.field)), this.renderLocationFields()))), this.selectedLocationType === "address" &&
            geocodeCost &&
            !_config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.isPortal &&
            (0,_geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_6__.i)(geocodeServiceUrl) && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.i)(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.subscriptionInfo) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { scale: "m", width: "full", open: true, icon: "information" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, this.i18n.recordCount.replace("${num}", `${recordCount}`))))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-credit-estimate", { transactionCreditCost: geocodeCost.transactionCreditCost, availableCredits: geocodeCost.availableCredits, showTotal: this.showTotalCredits, class: "credit-estimate", api: _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.api, ref: (el) => (this.estimate = el) })), this.showUnrestrictedOrgCreditsNotice() && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { class: "notice", kind: "brand", icon: "information", open: true }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "title" }, this.i18n.unrestrictedOrgCredits.title), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, this.i18n.unrestrictedOrgCredits.description))))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-alert", { heading: (_d = this.error) === null || _d === void 0 ? void 0 : _d.title, description: (_e = this.error) === null || _e === void 0 ? void 0 : _e.description, active: !!this.error, onAlertDismiss: () => (this.error = null) })));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisNewItemPagesCsvLocationFields.style = arcgisNewItemPagesCsvLocationFieldsCss;



//# sourceMappingURL=arcgis-new-item-pages-csv-location-fields.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isSubscriber),
/* harmony export */   b: () => (/* binding */ isPremium),
/* harmony export */   c: () => (/* binding */ canUpdateItem),
/* harmony export */   d: () => (/* binding */ itemsBelongToUserOrg),
/* harmony export */   g: () => (/* binding */ getItemHomeAppUrl),
/* harmony export */   i: () => (/* binding */ isOwner),
/* harmony export */   u: () => (/* binding */ userIsItemAdmin)
/* harmony export */ });
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


function isEsri(item) {
    var _a;
    return !!((_a = item.owner) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes("esri"));
}
function isPremium(item) {
    var _a;
    return isEsri(item) && !!((_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("Requires Credits"));
}
function isSubscriber(item) {
    var _a;
    return isEsri(item) && !!((_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("Requires Subscription"));
}
function isOwner(item, user) {
    return item.owner === user.username;
}
/**
 * Can the user update the item
 */
function canUpdateItem(item, user) {
    return userIsItemAdmin(item, user) || item.itemControl === "update";
}
/**
 * Is the user either an owner or admin of the item
 */
function userIsItemAdmin(item, user) {
    return isOwner(item, user) || isItemAdmin(item, user);
}
/**
 * Does the user have admin capabilities on this item
 */
function isItemAdmin(item, user) {
    var _a;
    // if this flag is already set (probably home app), use it
    if (item.isAdmin != null) {
        return !!item.isAdmin;
    }
    const itemOwner = item.owner;
    const itemControlAdmin = item.itemControl === "admin";
    const esriUsers = ["esri_livingatlas", "esri_demographics", "esri_boundaries"];
    if (((_a = item.portal) === null || _a === void 0 ? void 0 : _a.isPortal) &&
        !isOwner(item, user) &&
        itemControlAdmin &&
        itemOwner.includes("esri_") &&
        // portal incorrectly returns "itemControl="admin" for esri owned items
        !esriUsers.includes(itemOwner)) {
        return false;
    }
    return itemControlAdmin;
}
const itemsBelongToUserOrg = (items, user) => {
    return !!user.orgId && items.every((item) => item.isOrgItem);
};
const getItemHomeAppUrl = (itemId, baseUrl) => `${(0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_0__.a)(baseUrl)}item.html?id=${itemId}`;



//# sourceMappingURL=item-3535552d.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-586f0301.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-586f0301.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isLargeCSV),
/* harmony export */   f: () => (/* binding */ findPossibleItemTypesByExtension),
/* harmony export */   i: () => (/* binding */ isLargeGeoJSON),
/* harmony export */   m: () => (/* binding */ mapItemTypesToFileExtensions)
/* harmony export */ });
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./item-types-2029b06b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-2029b06b.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



function findPossibleItemTypesByExtension(extension, validationTypes) {
    // Search item types extensions for the one imported
    let itemTypes;
    if (validationTypes) {
        itemTypes = validationTypes.map((value) => {
            return value.type;
        });
    }
    else {
        itemTypes = Object.keys(_item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_1__.a);
    }
    let possibleItemTypes = [];
    itemTypes.forEach((type) => {
        var _a;
        if (((_a = _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_1__.a[type].fileExt) === null || _a === void 0 ? void 0 : _a.indexOf(extension)) >= 0) {
            possibleItemTypes.push(_item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_1__.a[type]);
        }
    });
    return possibleItemTypes;
}
function mapItemTypesToFileExtensions(types) {
    if (!types) {
        return null;
    }
    return (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_0__.b)(types.flatMap((type) => { var _a; return (_a = _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_1__.a[type]) === null || _a === void 0 ? void 0 : _a.fileExt; }).filter((valid) => !!valid));
}
const isLargeGeoJSON = (sizeInBytes) => {
    const sizeInMB = sizeInBytes / 1024 / 1024;
    // https://devtopia.esri.com/WebGIS/arcgis-app-components/issues/2553#issuecomment-3645404
    return sizeInMB > 50; // 50MB
};
const isLargeCSV = (sizeInBytes) => {
    const sizeInMB = sizeInBytes / 1024 / 1024;
    // https://devtopia.esri.com/WebGIS/arcgis-app-components/issues/2875#issuecomment-3748913
    return sizeInMB > 20; // 20MB
};



//# sourceMappingURL=item-types-586f0301.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-bca7bcd1.js":
/*!********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-bca7bcd1.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ uiStore),
/* harmony export */   u: () => (/* binding */ uiStoreState)
/* harmony export */ });
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const uiStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__.c)({
    nextText: "next",
    workflow: "content",
    scale: "m",
    disableScroll: false,
    featureFlags: {}
});
const uiStoreState = uiStore.state;



//# sourceMappingURL=ui-bca7bcd1.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,