"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-2ec2a9"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.tr-215d1c70.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.tr-215d1c70.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Abs_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Abs_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Abs_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Abs_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Abs_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Abs_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Abs_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Abs_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Abs_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Abs_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Abs_Raster_tag0@@": "Mutlak değerlerin hesaplanacağı girdi rasterı.",
	"@@ACos_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@ACos_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@ACos_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@ACos_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@ACos_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@ACos_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@ACos_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@ACos_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@ACos_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@ACos_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@ACos_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@ACos_Raster_tag0@@": "Ters kosinüs değerlerinin hesaplanacağı girdi.",
	"@@ACosH_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@ACosH_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@ACosH_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@ACosH_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@ACosH_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@ACosH_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@ACosH_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@ACosH_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@ACosH_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@ACosH_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@ACosH_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@ACosH_Raster_tag0@@": "Ters hiperbolik kosinüs değerlerinin hesaplanacağı girdi.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "Belirgin Yansıma fonksiyonunun sonuçları, gezegensel yüzey tarafından yansıtılan mevcut enerjinin yüzdesi olan albedo olarak da ifade edilebilir. Albedo verileri, karmaşık modelleme ve teknik uzaktan algılama uygulamaları için bilimsel kullanıcılar tarafından kullanılır.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "İşaretli değil--Bu fonksiyon, belirgin yansıma değerlerini getirir. Varsayılan değerdir.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "İşaretli--Bu fonksiyon, en yaygın 0,0 ile 1,0 arasında olan 32 bit kayan noktalı değerleri getirir. Bu seçenek seçili olduğunda, hiçbir veri kesme işlemi gerçekleştirilmez.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Albedo için çıktı veri türü kayan nokta olduğundan, tercih edilen <strong>Çıktı Piksel Türünü</strong> açıkça 32 bit kayan veya 64 bit çift olarak ayarlamalısınız. <strong>Çıktı Piksel Türü</strong> parametresi <strong>Belirgin Yansıma</strong> raster işlevinin <strong>Genel</strong> sekmesinde bulunur. <strong>Çıktı Piksel Türü</strong> <strong>Albedo</strong> seçeneği için doğru olarak ayarlanmamışsa, sonuç değer geçersiz olur ve 0 değerini verir.",
	"@@Apparent-Reflectance_Offset_tag0@@": "Ölçeklendirilmiş albedo değeriniz isteğe bağlı olarak öteleme değerine sahip olabilir:",
	"@@Apparent-Reflectance_Offset_tag1@@": "16 bit işaretli olmayan veri türleri için, varsayılan ölçek öteleme 5.000'dir.",
	"@@Apparent-Reflectance_Offset_tag2@@": "8 bit işaretli olmayan veri türleri için, varsayılan ölçek öteleme 0'dır.",
	"@@Apparent-Reflectance_Offset_tag3@@": "Çıktı albedo olduğunda ölçeklendirme yapılmaz.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "Her bant için bu değeri manuel olarak ayarlayabilir veya düzenleyebilirsiniz. Uygun bilgi, girdi rasterı ürününün meta verilerinden okunabilir.",
	"@@Apparent-Reflectance_Raster_tag0@@": "Belirgin yansımanın uygulanacağı raster ürün.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "Belirgin yansıma çıktı değeriniz bir tamsayı olarak ifade edilebilir. Tüm kayan noktalı değerleri tam sayı değerlere dönüştürmek için ölçek katsayısı albedo ile çarpılır.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Ölçek katsayısı ${0} ise veya belirtilmemişse, girdi verilerinin piksel türüne bağlı olarak varsayılan ölçeklendirme uygulanır:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "16 bit işaretli olmayan veri türleri için, varsayılan ölçek katsayısı 50.000'dır.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "8 bit işaretli olmayan veri türleri için, varsayılan ölçek katsayısı 255'tir.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "Ölçek katsayısı her zaman, çıktı belirgin bir yansıma olduğunda uygulanır. Çıktı albedo olduğunda ölçeklendirme yapılmaz.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Bu, güneşin derece cinsinden ifade edilen yükselti değeridir. Meta verilerden uygun bilgiler okunabildiğinde bu değer sistem tarafından doldurulur. Bu değeri manuel olarak ayarlayabilir veya düzenleyebilirsiniz.",
	"@@ArgStatistics_Max_tag0@@": "Belirlediğiniz maksimum değer, sürenin bitimine eşit veya daha az olan en yüksek değerdir.",
	"@@ArgStatistics_Max_tag1@@": "Bu girdi yalnızca yöntem Süre olduğunda geçerlidir.",
	"@@ArgStatistics_Method_tag0@@": "Hesaplamada kullanılacak istatistik yöntemini seçin:",
	"@@ArgStatistics_Method_tag1@@": "Arg Maks--Verilen pikselin tüm bantlardan minimum değerini aldığı ${Band index} değerini getiren maksimum değerin bağımsız değişkenidir. Her girdi rasterından gelen tüm raster bantlarına, ilk önce girdi rasterı indeksi tarafından ve daha sonra her girdi rasterındaki göreceli bant sırası tarafından sipariş edilen 0 tabanlı bir artımlı bant indeksi atanır.",
	"@@ArgStatistics_Method_tag2@@": "Arg Ortanca--Verilen pikselin tüm bantlardan ortanca değerini aldığı ${Band index} değerini getiren ortanca değerin bağımsız değişkenidir.",
	"@@ArgStatistics_Method_tag3@@": "Arg Min--Verilen pikselin tüm bantlardan minimum değerini aldığı ${Band index} değerini getiren minimum değerin bağımsız değişkenidir.",
	"@@ArgStatistics_Method_tag4@@": "Süre--Süre yöntemi, dizideki, her bir ögenin <strong>Min</strong> değere eşit veya büyük veya <strong>Maks</strong> değerden küçük veya eşit olduğu en uzun ardışık ögeleri bulur ve bunların uzunluğunu getirir.",
	"@@ArgStatistics_Min_tag0@@": "Belirlediğiniz minimum değer, sürenin başlangıcına eşit veya daha büyük olan en düşük değerdir.",
	"@@ArgStatistics_Min_tag1@@": "Bu girdi yalnızca yöntem Süre olduğunda geçerlidir.",
	"@@ArgStatistics_Rasters_tag0@@": "Üzerine çeşitli istatistiksel yöntemleri uygulayacağınız girdi rasterı.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "Kesin bir maksimum, minimum veya ortancaya ulaşılamadığında getirilecek sabit bir girdi. En yaygın senaryo, maksimum veya minimum değerin, tüm bantların değerleri arasında birden fazla kez meydana gelmesidir. Tanımsız sabit için varsayılan değer 100'dür.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "Tanımsız sınıf sadece yöntem <strong>ArgMax</strong>, <strong>ArgMin</strong> veya <strong>ArgMedian</strong> olduğunda geçerlidir.",
	"@@ArgStatistics_ignorenodata_tag0@@": "NoData değerlerinin istatistik hesaplama tarafından göz ardı edilip edilmediğini belirtir.",
	"@@ArgStatistics_ignorenodata_tag1@@": "İşaretli--Analizde girdi rasterlardaki tüm geçerli pikseller yer alır ancak NoData pikselleri dikkate alınmaz.",
	"@@ArgStatistics_ignorenodata_tag2@@": "İşaretli değil--Girdi rasterlardaki pikseller için herhangi bir NoData değeri varsa, analiz NoData ile sonuçlanır. Varsayılan budur.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Arithmetic_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Arithmetic_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Arithmetic_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Arithmetic_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Arithmetic_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Arithmetic_Operation_tag0@@": "İki girdi rasterı arasında gerçekleştirilecek aritmetik işlem.",
	"@@Arithmetic_Operation_tag1@@": "Seçenekler şu şekildedir:",
	"@@Arithmetic_Operation_tag2@@": "<strong>Böl</strong>--Her raster için karşılık gelen piksel değerleri arasında bölünebilir sonucu verir.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Çıkar</strong>--Her raster için karşılık gelen piksel değerleri arasındaki farkı verir. Bu değişim tespitini hesaplamak için kullanılabilir.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Mod</strong>--En çok meydana gelen çakışmaya sahip tüm piksellerin piksel değerlerini verir. Örneğin, rasterda altı bant varsa, çakışan altı piksel olacaktır. 4, 5, 6, 4, 7, 9 değerleri için mod değeri 4'tür.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Çarp</strong>--Her raster için karşılık gelen piksel değerlerinin ürününü getirir. Bu bazı maliyet fonksiyonlarını yerine getirmek için kullanılabilir.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Topla</strong>--Her raster için karşılık gelen tüm piksel değerlerinin toplamını getirir.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Kuvvet</strong>--Girdi rasterının veya skaların gücüne yükseltilen karşılık gelen piksel değerlerinin ürününü getirir.",
	"@@Arithmetic_Raster_tag0@@": "İlk girdi rasterı veri kümesi.",
	"@@Arithmetic_Raster2_tag0@@": "İkinci girdi rasterı veri kümesi.",
	"@@ASin_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@ASin_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@ASin_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@ASin_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@ASin_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@ASin_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@ASin_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@ASin_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@ASin_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@ASin_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@ASin_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@ASin_Raster_tag0@@": "Ters sinüs değerlerinin hesaplanacağı girdi.",
	"@@ASinH_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@ASinH_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@ASinH_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@ASinH_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@ASinH_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@ASinH_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@ASinH_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@ASinH_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@ASinH_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@ASinH_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@ASinH_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@ASinH_Raster_tag0@@": "Ters hiperbolik sinüs değerlerinin hesaplanacağı girdi.",
	"@@Aspect_Raster_tag0@@": "Bakı veri kümesini türetmek için kullanılan girdi DEM.",
	"@@Aspect-Slope_Raster_tag0@@": "Girdi DEM.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "Yükselti değerlerini dönüştürmek için aşağıdaki iki amaç için kullanılan bir ölçeklendirme faktörüdür:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "Yükselti birimlerini (metre ya da fit gibi); fit, metre veya derece gibi veri kümesi yatay koordinat birimlerine dönüştürmek.",
	"@@Aspect-Slope_Z-Factor_tag2@@": "Görsel efekt amacıyla dikey büyütme eklemek.",
	"@@ATan_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@ATan_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@ATan_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@ATan_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@ATan_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@ATan_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@ATan_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@ATan_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@ATan_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@ATan_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@ATan_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@ATan_Raster_tag0@@": "Ters tanjant değerlerinin hesaplanacağı girdi.",
	"@@ATan2_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@ATan2_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@ATan2_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@ATan2_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@ATan2_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@ATan2_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@ATan2_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@ATan2_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@ATan2_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@ATan2_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@ATan2_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@ATan2_Raster_tag0@@": "Ters tanjant hesaplanırken kullanılacak pay veya y değerini belirten girdi.",
	"@@ATan2_Raster2_tag0@@": "Ters tanjant hesaplanırken kullanılacak payda veya x değerini belirten girdi.",
	"@@ATanH_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@ATanH_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@ATanH_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@ATanH_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@ATanH_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@ATanH_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@ATanH_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@ATanH_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@ATanH_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@ATanH_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@ATanH_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@ATanH_Raster_tag0@@": "Ters hiperbolik tanjant değerlerinin hesaplanacağı girdi.",
	"@@Attribute-Table_Raster_tag0@@": "Girdi rasterı.",
	"@@Attribute-Table_Table-Type_tag0@@": "Girdi özniteliği tablosu, her bir değere bir sınıf adı ve renk atadığınız <strong>Manuel</strong> tür kullanılarak girilebilir veya ${.dbf} dosyasından gelen mevcut bir tabloya başvurabilirsiniz.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "<strong>Yöntem</strong> için <strong>Kullanıcı Tanımlı</strong> seçtiyseniz, bant aritmetiği formülünü tanımlayın.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "<strong>Yöntem</strong> için önceden tanımlanmış bir indeks seçtiyseniz, girdi rasterı veri kümenizin indekse karşılık gelen uygun bantlarını tanımlayın.",
	"@@Band-Arithmetic_Method_tag0@@": "Dağıtmak istediğiniz bant aritmetiği algoritmasının türü. Özel bir algoritma tanımlayabilir veya önceden tanımlanmış bir indeks seçebilirsiniz.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong>--Yanan Alan İndeksi",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>CIg</strong>--Klorofil İndeksi - Yeşil",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>CIre</strong>--Klorofil İndeksi - Kırmızı Kenar",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Kil İçeren Madenler</strong>--Kil İçeren Madenler Oranı",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong>--Geliştirilmiş Bitki Örtüsü İndeksi",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Demir İçeren Madenler</strong>--Demir İçeren Madenler",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong>--Küresel Çevre İzleme İndeksi",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong>--Yeşil Normalize Edilmiş Fark Bitki Örtüsü İndeksi",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong>--Yeşil Bitki Örtüsü İndeksi Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Demir Oksit</strong>--Demir Oksit Oranı",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong>--Değiştirilmiş Normalize Edilmiş Fark Su İndeksi",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong>--Değiştirilmiş Üçgen Bitki Örtüsü İndeksi (ikinci yineleme)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>Değiştirilmiş SAVI</strong>--Değiştirilmiş Toprağa Göre Ayarlı Bitki Örtüsü İndeksi",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong>--Normalleştirilmiş Yanma Oranı İndeksi",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong>--Normalleştirilmiş Fark Oluşma İndeksi",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong>--Normalleştirilmiş Fark Nem İndeksi",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong>--Normalleştirilmiş Fark Kar İndeksi",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong>--Normalleştirilmiş Fark Bitki Örtüsü İndeksi",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong>--Kırmızı Kenar Normalleştirilmiş Fark Bitki Örtüsü İndeksi",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong>--Normalleştirilmiş Fark Su İndeksi",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong>--Dikey Bitki Örtüsü İndeksi",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong>--Kırmızı Kenar Üçgen Bitki Örtüsü İndeksi",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong>--Toprağa Göre Ayarlı Bitki Örtüsü İndeksi",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong>--Basit Oran",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong>--Kırmızı Kenar Basit Oran",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Sultan'ın Formülü</strong>--Sultan'ın Formülü",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>Dönüştürülmüş SAVI</strong>--Dönüştürülmüş Toprağa Göre Ayarlı Bitki Örtüsü İndeksi",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>Kullanıcı Tanımlı</strong>--Özel bant aritmetiği ifadenizi tanımlamanızı sağlar.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong>--Görünür Atmosferik Olarak Dirençli İndeks",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong>--Ağırlıklı Normalleştirilmiş Fark Su İndeksi",
	"@@Band-Arithmetic_Raster_tag0@@": "Girdi rasterı.",
	"@@Binary-Thresholding_Raster_tag0@@": "Girdi rasterı.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Bitwise-And_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Bitwise-And_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Bitwise-And_Raster_tag0@@": "Bu Bitwise işleminde kullanılacak ilk girdi.",
	"@@Bitwise-And_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Bitwise-And_Raster2_tag0@@": "Bu Bitwise işleminde kullanılacak ikinci girdi.",
	"@@Bitwise-And_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "Kaydırmanın üzerinde uygulanacağı girdi.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "Bitleri kaydırmak için konum sayısını tanımlayan girdi.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Bitwise-Not_Raster_tag0@@": "Bitwise Not (tamamlayıcı) işleminin üzerinde gerçekleştirileceği girdi rasterı.",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Bitwise-Or_Raster_tag0@@": "Bu Bitwise işleminde kullanılacak ilk girdi.",
	"@@Bitwise-Or_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Bitwise-Or_Raster2_tag0@@": "Bu Bitwise işleminde kullanılacak ikinci girdi.",
	"@@Bitwise-Or_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "Kaydırmanın üzerinde uygulanacağı girdi.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "Bitleri kaydırmak için konum sayısını tanımlayan girdi.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Bitwise-Xor_Raster_tag0@@": "Bu Bitwise işleminde kullanılacak ilk girdi.",
	"@@Bitwise-Xor_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Bitwise-Xor_Raster2_tag0@@": "Bu Bitwise işleminde kullanılacak ikinci girdi.",
	"@@Bitwise-Xor_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Boolean-and_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Boolean-and_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Boolean-and_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Boolean-and_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Boolean-and_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Boolean-and_Raster_tag0@@": "Bu Boole işleminde kullanılacak ilk girdi.",
	"@@Boolean-and_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Boolean-and_Raster2_tag0@@": "Bu Boolean işleminde kullanılacak ikinci girdi.",
	"@@Boolean-and_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Boolean-Not_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Boolean-Not_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Boolean-Not_Raster_tag0@@": "Bu Boole işleminde kullanılacak ilk girdi.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Boolean-Or_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Boolean-Or_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Boolean-Or_Raster_tag0@@": "Bu Boole işleminde kullanılacak ilk girdi.",
	"@@Boolean-Or_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Boolean-Or_Raster2_tag0@@": "Bu Boolean işleminde kullanılacak ikinci girdi.",
	"@@Boolean-Or_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Boolean-Xor_Raster_tag0@@": "Bu Boole işleminde kullanılacak ilk girdi.",
	"@@Boolean-Xor_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Boolean-Xor_Raster2_tag0@@": "Bu Boolean işleminde kullanılacak ikinci girdi.",
	"@@Boolean-Xor_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Buffered_Raster_tag0@@": "Belleğe kaydedilecek olan girdi rasterı.",
	"@@Calculator_Cellsize-Type_tag0@@": "Çıktı rasterını oluşturmak için kullanılan hücre boyutu.",
	"@@Calculator_Cellsize-Type_tag1@@": "Çıktı hücre boyutunu, aşağıdaki açılır liste seçeneklerinden seçebilirsiniz:",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>İlki</strong>--İlk raster değişkeninin hücre boyutu.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Minimumu</strong>--Girdi rasterlarının minimum hücre boyutu.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Maksimumu</strong>--Girdi rasterlarının maksimum hücre boyutu.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Ortalaması</strong>--Girdi rasterlarının ortalama hücre boyutu.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Sonuncusu</strong>--Son raster değişkeninin hücre boyutu.",
	"@@Calculator_Cellsize-Type_tag12@@": "Varsayılan seçim <strong>Maksimumu</strong>’dur.",
	"@@Calculator_Expression_tag0@@": "Girdi rasterında mekansal analiz yapmak için bir cebirsel ifade oluşturun.",
	"@@Calculator_Expression_tag1@@": "İfadeyi oluşturmak için varolan tüm matematik fonksiyonları çağrılabilir. Mevcut işleçler aşağıda listelenmiştir.",
	"@@Calculator_Expression_tag2@@": "Aritmetik işlemler",
	"@@Calculator_Expression_tag3@@": "Ekleme: +",
	"@@Calculator_Expression_tag4@@": "Bölme: /",
	"@@Calculator_Expression_tag5@@": "Modulo: %",
	"@@Calculator_Expression_tag6@@": "Çarpma: *",
	"@@Calculator_Expression_tag7@@": "Üs: **",
	"@@Calculator_Expression_tag8@@": "Çıkarma: -",
	"@@Calculator_Expression_tag9@@": "Boole İşlemleri",
	"@@Calculator_Expression_tag10@@": "Boole Ve: &&",
	"@@Calculator_Expression_tag11@@": "Boole Veya: ||",
	"@@Calculator_Expression_tag12@@": "İlişkisel İşlemler",
	"@@Calculator_Expression_tag13@@": "Eşittir: ==",
	"@@Calculator_Expression_tag14@@": "Büyüktür: >",
	"@@Calculator_Expression_tag15@@": "Büyüktür veya Eşittir: >=",
	"@@Calculator_Expression_tag16@@": "Küçüktür: <",
	"@@Calculator_Expression_tag17@@": "Küçüktür veya Eşittir: <=",
	"@@Calculator_Expression_tag18@@": "Eşit Değil: !=",
	"@@Calculator_Expression_tag19@@": "Ek İşlemler",
	"@@Calculator_Expression_tag20@@": "Piksel bazında en az iki raster: min(a,b)",
	"@@Calculator_Expression_tag21@@": "Piksel bazında en fazla iki raster: max(a,b)",
	"@@Calculator_Expression_tag22@@": "İfadelere ilişkin bazı örnekler şunlardır:",
	"@@Calculator_Expression_tag23@@": "Basit Koşullu İfade: Bir rasterda (T ile gösterilir) 4.000 fitin üzerinde olan yükselti değerlerini bulun ve bu alanlara 1 ve diğer tüm alanlara 0 değeri verin.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "İç İçe Koşullu İfade: eğimin (b1 ile gösterilir) 10 derecenin altında olduğu ve NDVI’nın (b2 ile gösterilir) 0,5'in üzerinde olduğu alanları bulun ve bu alanlara 1 değeri verin. Eğimin 10 derecenin üzerinde ve yükseltinin (b3 ile gösterilir) 2.500 fitin üzerinde olduğu diğer tüm alanlara 2 değerini atayın. Diğer tüm alanlara 3 değeri verilir.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Çıktı rasterında hangi yayılımın kullanılacağını seçin:</p><ul><li><p>Birincisi--İşleme yayılımını belirlemek için ilk girdi rasterının yayılımını kullanın.</p></li><li>Kesişimi--İşleme yayılımını belirlemek için çakışan piksellerin yayılımını kullanın. Varsayılan budur.</li><li>Birleşimi--İşleme yayılımını belirlemek için tüm rasterların yayılımını kullanın.</li><li>Sonuncusu--İşleme yayılımını belirlemek için son girdi rasterının yayılımını kullanın.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "Kullanıcı tanımlı değişken adı ve girdi rasterı.",
	"@@Classify_Input-Definition-File_tag0@@": "Belirli veri kümesi, sınıflandırıcı ve seçilen öznitelikler için istatistikleri ve diğer sınıflandırma bilgilerini içeren girdi Esri Sınıflandırıcı Tanımı (${.ecd}) dosyası.",
	"@@Classify_Raster_tag0@@": "Sınıflandırmak istediğiniz raster veri kümesi.",
	"@@Classify_Raster2_tag0@@": "Veri kümeniz için daha sağlam bir sınıflandırma tanımı oluşturmak için segmentlenmiş görüntü, çoklu spektral görüntü veya yükselti verileri gibi sınıflandırıcıya dahil etmek için kullanılan isteğe bağlı yardımcı bir raster veri kümesi. Bu parametre için raster veri kümesi, girdi Esri Sınıflandırıcı Tanımı dosyasını oluşturmak için kullanılanla aynı olmalıdır.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "Kesme yayılımını belirlemek için aşağıdakiler kullanılabilir:",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Kesme Rasterı</strong>--Kesme rasterının yayılımı",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Özel Yayılım</strong>--X ve Y minimum ve maksimum koordinatları",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Mevcut Harita Yayılımı</strong>--Mevcut harita görüntüsünün yayılımı",
	"@@Clip_Clipping-Raster_tag0@@": "Kesmek için kullanılan raster katmanı.",
	"@@Clip_Clipping-Type_tag0@@": "Kesme geometrinizin içinde veya dışında kalan alanı tutmak isteyip istemediğinizi belirtin.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>İçeri Kırp</strong>--Kırpma yayılımlarının içindeki görüntüler kaldırılacaktır.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Dışarı Kırp</strong>--Kırpma yayılımlarının dışındaki görüntüler kaldırılacaktır.",
	"@@Clip_Custom-Extent_tag0@@": "Rasterı kırpmak için kullanılan sınırlayıcı kutunun yayılımını tanımlayan dört koordinatı belirtin.",
	"@@Clip_Output-Extent_tag0@@": "Geçerli kırpma yayılımının x ve y koordinatları.",
	"@@Clip_Output-Extent_tag1@@": "<strong>Mevcut Harita Yayılımını Yakala</strong> butonu, aktif harita için görüntü yayılımını kullanır.",
	"@@Clip_Raster_tag0@@": "Girdi rasterı katmanı.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "Seçildiğinde, veriler belirtilen detay sınıfının geometrisine göre kırpılır.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "İşaretli değil--Bu işlev, <strong>Dikdörtgen</strong> ile belirtilen kırpma geometrisini kullanır. Varsayılan değerdir.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "İşaretli--Bu fonksiyon, bir detay sınıfı tarafından tanımlanan kırpma geometrisini kullanır.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "Gerçekleştirilecek renk dönüştürme türü:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "HSV > RGB",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "RGB > HSV",
	"@@Color-Model-Conversion_Raster_tag0@@": "Girdi rasterı.",
	"@@Colormap_Color-Ramp_tag0@@": "Önceden varolan bir renk tayfı seçin.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Girdi rasterınızı oluşturmak için renk düzeninin türünü seçin",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Renk Tayfı: Bir renk tayfı kullanın.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Renk Haritası: Önceden var olan bir renk haritası kullanın.",
	"@@Colormap_Colormap_tag0@@": "Aşağıdaki varsayılan renk haritaları açılır listeden seçilebilir:",
	"@@Colormap_Colormap_tag1@@": "Yükselti: Rengi yavaş yavaş cam göbeğinden mora ve siyaha değişen renk haritası.",
	"@@Colormap_Colormap_tag2@@": "Gri: Rengi yavaş yavaş siyahtan beyaza değişen renk haritası.",
	"@@Colormap_Colormap_tag7@@": "Kabartma--Görüntünün gölgelendirilmesinde güneşin göreceli konumunu dikkate alarak arazi yüzeyinin 3B gösterimini oluşturan gri tonlamalı bir renk haritası.",
	"@@Colormap_Colormap_tag3@@": "NDVI: Bitki örtüsünü görselleştirmeye yarayan renk haritası. Sıfıra yakın olan değerler mavidir. Düşük değerler kahverengidir. Ardından renkler, bitki örtüsü indeksi düşükten yükseğe doğru çıktıkça yavaş yavaş kırmızıdan turuncuya, sarıya, yeşile ve siyaha doğru değişir.",
	"@@Colormap_Colormap_tag4@@": "NDVI2: Bitki örtüsünü görselleştirmeye yarayan renk haritası. Düşük değerler beyazdan yeşile doğru değişir. Ardından renkler, bitki örtüsü indeksi düşükten yükseğe doğru çıktıkça griden mora, menekşeye, koyu maviye ve siyaha doğru değişir.",
	"@@Colormap_Colormap_tag5@@": "NDVI3: Bitki örtüsünü görselleştirmeye yarayan renk haritası. Sıfıra yakın olan değerler mavidir. Ardından renkler, bitki örtüsü indeksi düşükten yükseğe doğru çıktıkça yavaş yavaş kırmızıdan turuncuya ve yeşile doğru değişir.",
	"@@Colormap_Colormap_tag6@@": "Rastgele: Rastgele bir renk haritası.",
	"@@Colormap_Raster_tag0@@": "Girdi rasterı.",
	"@@Colormap-To-RGB_Raster_tag0@@": "Girdi renk haritası rasterı.",
	"@@Complex_Raster_tag0@@": "Girdi rasterı.",
	"@@Composite-Bands_Rasters_tag0@@": "Raster girdilerini seçmek için açılır listeyi veya <strong>Göz at</strong> butonunu kullanın.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücresi boyutları aynıysa, tüm seçenekler aynı sonuçları verir.</p><ul><li>Birincisi--Girdi rasterların birinci hücre boyutunu kullanır.</li><li>Minimumu--Tüm girdi rasterların en küçük hücre boyutunu kullanır.</li><li>Maksimumu--Tüm girdi rasterların en büyük hücre boyutunu kullanır. Varsayılan budur.</li><li>Ortalaması--Tüm girdi rasterların ortalama hücre boyutunu kullanır.</li><li>Sonuncusu--Tüm girdi rasterların son hücre boyutunu kullanır.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Con-function_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Con-function_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Con-function_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Con-function_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Con-function_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Con_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Con_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Con_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Con_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Con_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Con_False-Raster_tag0@@": "Koşul yanlış olduğunda (false), değerleri çıktı piksel değerleri olarak kullanılacak olan girdi. Bir tamsayı, kayan nokta raster veya sabit bir değer olabilir.",
	"@@Con_Raster_tag0@@": "Mantıksal bir matematik raster fonksiyonunun Boole sonucunu temsil eden girdi rasterı. Değerler 1 (doğru için) veya 0 (yanlış için) olacaktır. Bir tam sayı ya da bir kayan nokta rasterı olabilir.",
	"@@Con_True-Raster_tag0@@": "Koşul doğru olduğunda (true), değerleri çıktı piksel değerleri olarak kullanılacak olan girdi. Bir tamsayı, kayan nokta raster veya sabit bir değer olabilir.",
	"@@Constant_Constant_tag0@@": "Sanal rastera eklenecek sabitin değeri.",
	"@@Constant_Raster-Info_tag0@@": "Bir dizinden veya portaldan şablon yüklemek için <strong>Şablon rasterı yükle</strong> butonunu kullanın.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "Kontur çizgisine uygulanacak yumuşatma miktarı. Varsayılan değer 2,5'tir.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "Daha düşük bir değer daha çok ayrıntı düzeyi ve daha az yumuşatılmış bir kontur çizgisi oluştururken, daha yüksek bir değer daha az pürüzlü görünen daha fazla yumuşatılmış bir kontur çizgisi oluşturur.",
	"@@Contour_Contour-Interval_tag0@@": "Kontur çizgileri arasındaki yükseklik farkı.",
	"@@Contour_Contour-Interval_tag1@@": "Nispeten düz alanlarda küçük bir kontur aralığı kullanılırken, değişken veya dağlık arazide daha geniş kontur aralıkları kullanılır.",
	"@@Contour_Contour-Type_tag0@@": "Oluşturulacak kontur türü:",
	"@@Contour_Contour-Type_tag1@@": "<strong>Kontur dolgusu</strong>--Her kontur çizgisi arasındaki alanı nicemlenmiş yükselti değeriyle doldurur.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Kontur çizgileri</strong>--Sabit yükseltiyi temsil eden bir çizgi oluşturmak için eşit yükselti noktalarını birleştirir.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Yalnızca yüzeyi düzelt</strong>--Girdi yükselti katmanını yumuşatır ancak kontur üretmez.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "Kalın çizgi olarak gösterilen indeks kontur.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "Varsayılan değer 5’tir; bu nedenle her 5. kontur çizgisi koyu renklidir.",
	"@@Contour_Number-Of-Contours_tag0@@": "Görüntüde oluşturulacak kontur sayısı. Bu, kontur aralığını, 1, 5, 10 gibi standart aralıkları koruyarak, görüntüdeki araziye sığacak şekilde dinamik olarak ayarlar.",
	"@@Contour_Raster_tag0@@": "Tek bantlı raster yükselti veri kümesi.",
	"@@Contour_Z-Base_tag0@@": "Taban kontur değeri. Konturlar, girdi rasterının tüm değer aralığını kapsayacak şekilde bu değerin altında ve üstünde oluşturulur. Varsayılan değer 0'dir.",
	"@@Contour_Z-Base_tag1@@": "0 değeri, kaynağın yükselti veri kümesine bağlı olarak genellikle ortalama deniz seviyesini gösterir.",
	"@@Contour_Z-Factor_tag0@@": "Kontur oluştururken kullanılan birim dönüştürme faktörü. Varsayılan değer 1'dır.",
	"@@Contour_Z-Factor_tag1@@": "Kontur çizgileri, girdi rasterındaki z değerleri baz alınarak oluşturulur; bunlar da genellikle metre veya fit cinsinden ölçülür. Varsayılan değeri 1 olan konturlar, girdi rasterının z değerleri ile aynı birimde olacaktır. Konturları z değerlerinden farklı bir birimde oluşturmak için, z faktörü için uygun bir değer belirtin. Bu araç için zemin x,y ve yüzey z-birimlerinin tutarlı olması gerekmediğine dikkat edin.",
	"@@Contour_Z-Factor_tag2@@": "Örneğin, girdi rasterınızdaki yükselti değerleri fit ise, ancak konturların metre birimine göre oluşturulmasını istiyorsanız, z faktörünü 0,3048 (1 fut = 0,3048 metre olduğundan) olarak ayarlayın.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Raster katmanının parlaklığını ayarla.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "Parlaklık ofsetini değiştirmek için kaydırıcıyı kullanabilir veya bir değer yazabilirsiniz.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Raster katmanının kontrastını ayarla.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "Kontrast ofsetini değiştirmek için kaydırıcıyı kullanabilir veya bir değer yazabilirsiniz.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "Parlaklığı ve kontrastı düzenlenen girdi rasterı.",
	"@@Convolution_kernel_tag0@@": "<p>Bu tablo, her pikselin filtreleme işleminde nasıl ağırlıklandırılacağını gösterir. Bu tablo, <strong>Tür</strong> olarak <strong>Kullanıcı Tanımlı</strong> seçerseniz düzenlenebilir.</p>",
	"@@Convolution_Raster_tag0@@": "Girdi rasterı veri kümesi.",
	"@@Convolution_Type_tag0@@": "Gerçekleştirmek istediğiniz filtreleme türünü seçin. Kenarları keskinleştirmek, bulanıklaştırmak ve algılamak için seçenekler bulunur ya da kendi çekirdek tabanlı filtrenizi tanımlayabilirsiniz",
	"@@Corridor_Distance-Raster-1_tag0@@": "İlk girdi mesafe rasterı. Maliyet Mesafesi veya Yol Mesafesinden birikimli bir maliyet mesafesi çıktısı olmalıdır.",
	"@@Corridor_Distance-Raster-2_tag0@@": "İkinci girdi mesafe rasterı. Maliyet Mesafesi veya Yol Mesafesinden birikimli bir maliyet mesafesi çıktısı olmalıdır.",
	"@@Cos_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Cos_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Cos_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Cos_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Cos_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Cos_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Cos_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Cos_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Cos_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Cos_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Cos_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Cos_Raster_tag0@@": "Kosinüs değerlerinin hesaplanacağı girdi.",
	"@@CosH_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@CosH_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@CosH_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@CosH_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@CosH_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@CosH_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@CosH_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@CosH_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@CosH_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@CosH_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@CosH_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@CosH_Raster_tag0@@": "Hiperbolik kosinüs değerlerinin hesaplanacağı girdi.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Bu parametre, biriken maliyet arttıkça maliyetlerin üstesinden gelme çabasındaki artışı simüle eder. Yolcunun yorgunluğunu modellemek için kullanılır. Bir hücreye ulaşmak için artan biriken maliyet, direnç oranı ile çarpılır ve bir sonraki hücreye geçme maliyetine eklenir.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Bir hücre içinde hareket etmenin görünür maliyetini hesaplamak için kullanılan bir bileşik faiz oranı formülünün değiştirilmiş bir versiyonudur. Direnç oranının değeri arttıkça, daha sonra ziyaret edilen hücrelerin maliyetini de arttırır. Direnç oranı arttıkça, bir sonraki hücreye ulaşma maliyeti de artar, çünkü sonraki her hareket için birleştirilir. Direnç oranı bileşik bir orana benzer olduğu ve genel olarak biriken maliyet değerleri çok büyük olduğu için, biriken maliyet değerlerine bağlı olarak 0,005 veya daha düşük direnç oranları önerilir.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Cost-Allocation_Capacity_tag0@@": "Bir kaynak için yolcunun maliyet kapasitesini tanımlar. Maliyet hesaplamaları, belirtilen kapasiteye ulaşılana kadar her kaynak için devam eder.",
	"@@Cost-Allocation_Capacity_tag1@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Cost-Allocation_Capacity_tag2@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "Her bir hücre içinde planimetrik olarak hareket etmenin maliyetini veya empedansını tanımlayan gerekli bir girdi rasterı. Her hücre konumundaki değer, hücre içinde hareket etmek için birim başına maliyet mesafesini temsil eder. Her hücre konumu değeri hücre çözünürlüğü ile çarpılırken, aynı zamanda hücre içinden geçmenin toplam maliyetini elde etmek için çapraz (diyagonal) hareketi dengeler.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "<strong>Maliyet Rasterı</strong>’nın değerleri tamsayı veya kayan nokta olabilir, ancak negatif veya sıfır olamaz.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "Birikmiş maliyet değerlerinin aşamadığı eşik değeri. Birikmiş maliyet mesafesi bu değeri aştığında, hücre konumu için çıktı değeri ${NoData} olacaktır. Maksimum mesafe, toplam maliyet mesafelerinin hesaplanma yayılımını belirler. Varsayılan mesafe, çıktı rasterının yayılımına kadardır.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Maliyet değerlerine uygulanacak bir çarpan.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Bu parametre bir seyahat modunun veya bir kaynaktaki büyüklüğün kontrolünü sağlar. Çarpan ne kadar büyükse, her bir hücreye geçmenin maliyeti o kadar artar.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Değerler sıfırdan büyük olmalıdır. Varsayılan değer 1'dir.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Cost-Allocation_Source-Field_tag0@@": "Bu alan, kaynak konumlarına değer atamak için kullanılır. Bir tamsayı türü olmalıdır. <strong>Değer Rasterı</strong> ayarlanmışsa, bu girdideki değerler <strong>Kaynak Alan</strong> için herhangi bir değere göre öncelikli olacaktır.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "Kaynak konumlar için gerekli girdi rasterı.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Bu, her çıktı hücresi konumu için en az birikmiş maliyet mesafesinin hesaplandığı hücreleri veya konumları tanımlayan bir rasterdır.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "<strong>Kaynak Raster</strong> girdisi kayan nokta ise, <strong>Değer Rasterı</strong> ayarlanmalı ve bir tam sayı olmalıdır. <strong>Değer Rasterı</strong> herhangi bir <strong>Kaynak Alan</strong> ayarına göre öncelikli olacaktır.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "Maliyet hesaplamalarının başlatılacağı başlangıç maliyeti. Bu parametre, bir kaynakla ilişkili sabit maliyetin belirtilmesi için kullanılır. 0 maliyetiyle başlamak yerine, maliyet algoritması belirtilen değerle başlar.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "Değer sıfır veya daha büyük olmalıdır. Varsayılan değer 0'dir.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Kaynak direnç oranını ve kaynak başlangıç maliyetini uygulama sırasında yolcunun yönünü tanımlar.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>Kaynaktan</strong>--Kaynak direnç oranı ve kaynak başlangıç maliyetinin uygulaması girdi kaynağından başlayarak kaynak olmayan hücrelere taşınır. Varsayılan değerdir.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>Kaynağa</strong>--Kaynak direnç oranı ve kaynak başlangıç maliyetinin uygulaması kaynak olmayan hücrelerden başlayarak yeniden girdi kaynağına taşınır.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Tüm kaynaklara uygulanacak <strong>Kaynaktan</strong> veya <strong>Kaynağa</strong> anahtar sözcüğünü belirtin veya <strong>Kaynak Raster</strong>'da her kaynağın seyahat yönünü tanımlayan anahtar sözcükleri içeren bir alan belirtin. Bu alanda ${FROM_SOURCE} veya ${TO_SOURCE} dizisi bulunmalıdır.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "Her bir girdi kaynak konumu için kullanılacak bölge değerlerini tanımlayan girdi tamsayı rasterı. Her kaynak konum hücresi için <strong>Değer Rasterı</strong> ile tanımlanan değer, hesaplama için kaynak konuma tahsis edilen tüm hücrelere atanır. <strong>Değer Rasterı</strong> herhangi bir <strong>Kaynak Alan</strong> ayarına göre öncelikli olacaktır.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Bu parametre, biriken maliyet arttıkça maliyetlerin üstesinden gelme çabasındaki artışı simüle eder. Yolcunun yorgunluğunu modellemek için kullanılır. Bir hücreye ulaşmak için artan biriken maliyet, direnç oranı ile çarpılır ve bir sonraki hücreye geçme maliyetine eklenir.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Bir hücre içinde hareket etmenin görünür maliyetini hesaplamak için kullanılan bir bileşik faiz oranı formülünün değiştirilmiş bir versiyonudur. Direnç oranının değeri arttıkça, daha sonra ziyaret edilen hücrelerin maliyetini de arttırır. Direnç oranı arttıkça, bir sonraki hücreye ulaşma maliyeti de artar, çünkü sonraki her hareket için birleştirilir. Direnç oranı bileşik bir orana benzer olduğu ve genel olarak biriken maliyet değerleri çok büyük olduğu için, biriken maliyet değerlerine bağlı olarak 0,005 veya daha düşük direnç oranları önerilir.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Bir kaynak için yolcunun maliyet kapasitesini tanımlar. Maliyet hesaplamaları, belirtilen kapasiteye ulaşılana kadar her kaynak için devam eder.",
	"@@Cost-Back-Link_Capacity_tag1@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Cost-Back-Link_Capacity_tag2@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "Her bir hücre içinde planimetrik olarak hareket etmenin maliyetini veya empedansını tanımlayan gerekli bir girdi rasterı. Her hücre konumundaki değer, hücre içinde hareket etmek için birim başına maliyet mesafesini temsil eder. Her hücre konumu değeri hücre çözünürlüğü ile çarpılırken, aynı zamanda hücre içinden geçmenin toplam maliyetini elde etmek için çapraz (diyagonal) hareketi dengeler.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "<strong>Maliyet Rasterı</strong>’nın değerleri tamsayı veya kayan nokta olabilir, ancak negatif veya sıfır olamaz.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "Birikmiş maliyet değerlerinin aşamadığı eşik değeri. Birikmiş maliyet mesafesi bu değeri aştığında, hücre konumu için çıktı değeri NoData olacaktır. Maksimum mesafe, toplam maliyet mesafelerinin hesaplanma yayılımını belirler. Varsayılan mesafe, çıktı rasterının yayılımına kadardır.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Maliyet değerlerine uygulanacak bir çarpan.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Bu parametre bir seyahat modunun veya bir kaynaktaki büyüklüğün kontrolünü sağlar. Çarpan ne kadar büyükse, her bir hücreye geçmenin maliyeti o kadar artar.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Değerler sıfırdan büyük olmalıdır. Varsayılan değer 1'dir.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "Kaynak konumlar için gerekli girdi rasterı.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Bu, her çıktı hücresi konumu için en az birikmiş maliyet mesafesinin hesaplandığı hücreleri veya konumları tanımlayan bir rasterdır.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "Maliyet hesaplamalarının başlatılacağı başlangıç maliyeti. Bu parametre, bir kaynakla ilişkili sabit maliyetin belirtilmesi için kullanılır. 0 maliyetiyle başlamak yerine, maliyet algoritması belirtilen değerle başlar.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "Değer sıfır veya daha büyük olmalıdır. Varsayılan değer 0'dir.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Kaynak direnç oranını ve kaynak başlangıç maliyetini uygulama sırasında yolcunun yönünü tanımlar.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>Kaynaktan</strong>--Kaynak direnç oranı ve kaynak başlangıç maliyetinin uygulaması girdi kaynağından başlayarak kaynak olmayan hücrelere taşınır. Varsayılan değerdir.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>Kaynağa</strong>--Kaynak direnç oranı ve kaynak başlangıç maliyetinin uygulaması kaynak olmayan hücrelerden başlayarak yeniden girdi kaynağına taşınır.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Tüm kaynaklara uygulanacak <strong>Kaynaktan</strong> veya <strong>Kaynağa</strong> anahtar sözcüğünü belirtin veya <strong>Kaynak Raster</strong>'da her kaynağın seyahat yönünü tanımlayan anahtar sözcükleri içeren bir alan belirtin. Bu alanda ${FROM_SOURCE} veya ${TO_SOURCE} dizisi bulunmalıdır.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Bu parametre, biriken maliyet arttıkça maliyetlerin üstesinden gelme çabasındaki artışı simüle eder. Yolcunun yorgunluğunu modellemek için kullanılır. Bir hücreye ulaşmak için artan biriken maliyet, direnç oranı ile çarpılır ve bir sonraki hücreye geçme maliyetine eklenir.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Bir hücre içinde hareket etmenin görünür maliyetini hesaplamak için kullanılan bir bileşik faiz oranı formülünün değiştirilmiş bir versiyonudur. Direnç oranının değeri arttıkça, daha sonra ziyaret edilen hücrelerin maliyetini de arttırır. Direnç oranı arttıkça, bir sonraki hücreye ulaşma maliyeti de artar, çünkü sonraki her hareket için birleştirilir. Direnç oranı bileşik bir orana benzer olduğu ve genel olarak biriken maliyet değerleri çok büyük olduğu için, biriken maliyet değerlerine bağlı olarak 0,005 veya daha düşük direnç oranları önerilir.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Cost-Distance_Capacity_tag0@@": "Bir kaynak için yolcunun maliyet kapasitesini tanımlar. Maliyet hesaplamaları, belirtilen kapasiteye ulaşılana kadar her kaynak için devam eder.",
	"@@Cost-Distance_Capacity_tag1@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Cost-Distance_Capacity_tag2@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "Her bir hücre içinde planimetrik olarak hareket etmenin maliyetini veya empedansını tanımlayan gerekli bir girdi rasterı. Her hücre konumundaki değer, hücre içinde hareket etmek için birim başına maliyet mesafesini temsil eder. Her hücre konumu değeri hücre çözünürlüğü ile çarpılırken, aynı zamanda hücre içinden geçmenin toplam maliyetini elde etmek için çapraz (diyagonal) hareketi dengeler.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "<strong>Maliyet Rasterı</strong>’nın değerleri tamsayı veya kayan nokta olabilir, ancak negatif veya sıfır olamaz.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "Birikmiş maliyet değerlerinin aşamadığı eşik değeri. Birikmiş maliyet mesafesi bu değeri aştığında, hücre konumu için çıktı değeri NoData olacaktır. Maksimum mesafe, toplam maliyet mesafelerinin hesaplanma yayılımını belirler. Varsayılan mesafe, çıktı rasterının yayılımına kadardır.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Maliyet değerlerine uygulanacak bir çarpan.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Bu parametre bir seyahat modunun veya bir kaynaktaki büyüklüğün kontrolünü sağlar. Çarpan ne kadar büyükse, her bir hücreye geçmenin maliyeti o kadar artar.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Değerler sıfırdan büyük olmalıdır. Varsayılan değer 1'dir.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Cost-Distance_Source-Raster_tag0@@": "Kaynak konumlar için gerekli girdi rasterı.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Bu, her çıktı hücresi konumu için en az birikmiş maliyet mesafesinin hesaplandığı hücreleri veya konumları tanımlayan bir rasterdır.",
	"@@Cost-Distance_Start-Cost_tag0@@": "Maliyet hesaplamalarının başlatılacağı başlangıç maliyeti. Bu parametre, bir kaynakla ilişkili sabit maliyetin belirtilmesi için kullanılır. 0 maliyetiyle başlamak yerine, maliyet algoritması belirtilen değerle başlar.",
	"@@Cost-Distance_Start-Cost_tag1@@": "Değer sıfır veya daha büyük olmalıdır. Varsayılan değer 0'dir.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Kaynak direnç oranını ve kaynak başlangıç maliyetini uygulama sırasında yolcunun yönünü tanımlar.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>Kaynaktan</strong>--Kaynak direnç oranı ve kaynak başlangıç maliyetinin uygulaması girdi kaynağından başlayarak kaynak olmayan hücrelere taşınır. Varsayılan değerdir.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>Kaynağa</strong>--Kaynak direnç oranı ve kaynak başlangıç maliyetinin uygulaması kaynak olmayan hücrelerden başlayarak yeniden girdi kaynağına taşınır.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Tüm kaynaklara uygulanacak <strong>Kaynaktan</strong> veya <strong>Kaynağa</strong> anahtar sözcüğünü belirtin veya <strong>Kaynak Raster</strong>'da her kaynağın seyahat yönünü tanımlayan anahtar sözcükleri içeren bir alan belirtin. Bu alanda ${FROM_SOURCE} veya ${TO_SOURCE} dizisi bulunmalıdır.",
	"@@Curvature_Curvature-Type_tag0@@": "Eğrilik türü, eğimin farklı yönlerini vurgular. Üç eğrilik seçeneği vardır:",
	"@@Curvature_Curvature-Type_tag1@@": "Planform: Maksimum eğimin yönüne diktir. Bir akışın yüzey boyunca olan yakınlaşmasını ve uzaklaşmasını etkiler.",
	"@@Curvature_Curvature-Type_tag2@@": "Profil: Eğime paraleldir ve maksimum eğimin yönünü gösterir. Bir akışın yüzey boyunca olan hızlanmasını ve yavaşlamasını etkiler.",
	"@@Curvature_Curvature-Type_tag3@@": "Standart--Hem <strong>Profil</strong> hem de <strong>Platform</strong> eğrilerini birleştirir.",
	"@@Curvature_DEM_tag0@@": "Bir sayısal yükselti modeli (DEM) rasterı.",
	"@@Curvature_Z-Factor_tag0@@": "Z faktörü, girdi yüzeyinin x, y birimlerinden farklı olan z birimlerinin ölçü birimlerini ayarlar. X, y birimleri ve z birimleri aynı ölçü birimlerindeyse, z faktörü 1 olarak ayarlanmalıdır. Nihai çıktı yüzeyini hesaplarken, girdi yüzeyinin z değerleri z faktörü ile çarpılır. Örneğin, eğer z birimleriniz fit ve x, y birimleriniz metre cinsinden ise, z birimlerinizi fitten metreye dönüştürmek için z faktörü 0,3048’i kullanırsınız, çünkü 1 fut = 0,3048 metredir.",
	"@@Divide_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Divide_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Divide_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Divide_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Divide_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Divide_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Divide_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Divide_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Divide_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Divide_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Divide_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Divide_Raster_tag0@@": "Değeri ikinci girdiye bölünecek olan girdi.",
	"@@Divide_Raster_tag1@@": "${Raster2} için bir raster belirtilmişse, bu parametre için bir girdi olarak bir sayı kullanılabilir.",
	"@@Divide_Raster2_tag0@@": "Değeri ile ilk girdinin bölüneceği girdi.",
	"@@Divide_Raster2_tag1@@": "${Raster} için bir raster belirtilmişse, bu parametre için bir girdi olarak bir sayı kullanılabilir.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "Girdi DEM.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "Maksimum boşluk genişliği değeri, doldurmak istediğiniz boşluğun en büyük boyutunu belirtmek için kullanılır. Boşluk çevresindeki sınırlayıcı kutunun genişliği veya yüksekliği, maksimum boşluk genişliği değerinden daha büyükse, boşluk doldurulmaz. Bu parametrenin birimleri, verilerinizin mekansal referans sisteminde kullanılan birimlerle aynıdır.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Bu parametre boşsa veya ${0} değerine sahipse, maksimum bir genişlik kullanılmaz ve tüm boşluklar doldurulur. ${-1} değeri, hiçbir boşluk dolgusunun gerçekleşmeyeceği anlamına gelir.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "Boşluk dolgusu için kullanılacak maksimum arama yarıçapı. Bu eşik değerinden, herhangi bir geçerli piksele göre daha fazla uzakta olan bir boşluk, boşluk olarak kalır. Bu parametrenin birimleri, verilerinizin mekansal referans sisteminde kullanılan birimlerle aynıdır.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Bu parametrenin değeri boş, ${0} veya ${-1} ise bu parametre kullanılmaz.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Equal-to_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Equal-to_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Equal-to_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Equal-to_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Equal-to_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Equal-to_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Equal-to_Raster_tag0@@": "İkinci girdiyle eşitlik karşılaştırması için kullanılacak girdi.",
	"@@Equal-to_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Equal-to_Raster2_tag0@@": "İlk girdiyle eşitlik karşılaştırması için kullanılacak girdi.",
	"@@Equal-to_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "Çıktı rasterının oluşturulacağı hücre boyutu.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Hücre boyutu <strong>Analiz Ortamları</strong>’nda açıkça belirtilmişse, varsayılan hücre boyutu bu olur. Ayarlanmadığında, çıktı hücre boyutu <strong>Kaynak Raster</strong> ile aynı olur.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Mesafenin bir düzlem (düz dünya) ya da bir jeodezik (elipsoid) yöntemi kullanarak hesaplanacağını belirler.",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Jeodezik: Bir küre (elips) üzerinde dünya yüzeyindeki iki nokta arasındaki en kısa çizgi. Bu nedenle girdi veya çıktı izdüşümünden bağımsız olarak sonuçlar değişmez. Bir jeodezik çizgiyi, bir uçağın uçuş yolu için iki şehir arasındaki en kısa mesafeyi belirlemek istediğiniz zaman kullanabilirsiniz. Bu, bir elipsten ziyade bir küreyi baz alıyorsa büyük bir çember hattı olarak da bilinir.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Düzlemsel: Düzlemsel ölçümler uzunluk ve alanı hesaplamak için 2B Kartezyen matematiğini kullanır. Bu seçenek yalnızca izdüşümlendirilen bir koordinat sisteminde ölçüm yaparken kullanılabilir ve bu koordinat sisteminin 2B düzlemi ölçümler için temel olarak alınır.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "İçinde kalan en yakın kaynağın belirleneceği eşik mesafesini tanımlar. En yakın kaynağa olan mesafe bunu aşarsa, bu hücrenin çıktısı ${NoData} olur.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "Varsayılan mesafe, çıktı rasterının yayılımına kadardır.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "Engelleri tanımlayan raster.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "Veri kümesi hiçbir engel bulunmadığında ${NoData} değerini içermelidir. Engeller, sıfır dahil geçerli değerler ile temsil edilir.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "Engeller bir tamsayı veya kayan noktalı raster ile tanımlanabilir.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "Bu alan, kaynak konumlarına değer atamak için kullanılır. Bir tamsayı türü olmalıdır. <strong>Değer Rasterı</strong> ayarlanmışsa, bu girdideki değerler <strong>Kaynak Alan</strong> için herhangi bir değere göre öncelikli olacaktır.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "Kaynak konumlarını tanımlayan gerekli bir girdi rasterı. Öklid mesafesine bağlı olarak, çıktıdaki her hücre için en yakın kaynak belirlenir",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "Girdi türü bir tamsayı veya kayan noktalı tür olabilir.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "Her bir girdi kaynak konumu için kullanılacak bölge değerlerini tanımlayan girdi tamsayı rasterı. Her kaynak konum hücresi için <strong>Değer Rasterı</strong> ile tanımlanan değer, hesaplama için kaynak konuma tahsis edilen tüm hücrelere atanır. <strong>Değer Rasterı</strong> herhangi bir <strong>Kaynak Alan</strong> ayarına göre öncelikli olacaktır.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "Çıktı rasterının oluşturulacağı hücre boyutu.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Hücre boyutu <strong>Analiz Ortamları</strong>’nda açıkça belirtilmişse, varsayılan hücre boyutu bu olur. Ayarlanmadığında, çıktı hücre boyutu <strong>Kaynak Raster</strong> ile aynı olur.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Mesafenin bir düzlem (düz dünya) ya da bir jeodezik (elipsoid) yöntemi kullanarak hesaplanacağını belirler.",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Jeodezik: Bir küre (elips) üzerinde dünya yüzeyindeki iki nokta arasındaki en kısa çizgi. Bu nedenle girdi veya çıktı izdüşümünden bağımsız olarak sonuçlar değişmez. Bir jeodezik çizgiyi, bir uçağın uçuş yolu için iki şehir arasındaki en kısa mesafeyi belirlemek istediğiniz zaman kullanabilirsiniz. Bu, bir elipsten ziyade bir küreyi baz alıyorsa büyük bir çember hattı olarak da bilinir.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Düzlemsel: Düzlemsel ölçümler uzunluk ve alanı hesaplamak için 2B Kartezyen matematiğini kullanır. Bu seçenek yalnızca izdüşümlendirilen bir koordinat sisteminde ölçüm yaparken kullanılabilir ve bu koordinat sisteminin 2B düzlemi ölçümler için temel olarak alınır.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "İçinde kalan en yakın kaynağa giden yönün hesaplanacağı eşik mesafesini tanımlar. En yakın kaynağa olan mesafe bunu aşarsa, bu hücrenin çıktısı ${NoData} olur.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "Varsayılan mesafe, çıktı rasterının yayılımına kadardır.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "Engelleri tanımlayan raster.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "Veri kümesi hiçbir engel bulunmadığında NoData değerini içermelidir. Engeller, sıfır dahil geçerli değerler ile temsil edilir.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "Engeller bir tamsayı veya kayan noktalı raster ile tanımlanabilir.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "Her çıktı hücresi konumu için Öklid yönünün hesaplandığı hücreleri veya konumları tanımlayan gerekli bir girdi rasterı.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "Girdi türü bir tamsayı veya kayan noktalı tür olabilir.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "Çıktı rasterının oluşturulacağı hücre boyutu.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Hücre boyutu <strong>Analiz Ortamları</strong>’nda açıkça belirtilmişse, varsayılan hücre boyutu bu olur. Ayarlanmadığında, çıktı hücre boyutu <strong>Kaynak Raster</strong> ile aynı olur.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Mesafenin bir düzlem (düz dünya) ya da bir jeodezik (elipsoid) yöntemi kullanarak hesaplanacağını belirler.",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Jeodezik: Bir küre (elips) üzerinde dünya yüzeyindeki iki nokta arasındaki en kısa çizgi. Bu nedenle girdi veya çıktı izdüşümünden bağımsız olarak sonuçlar değişmez. Bir jeodezik çizgiyi, bir uçağın uçuş yolu için iki şehir arasındaki en kısa mesafeyi belirlemek istediğiniz zaman kullanabilirsiniz. Bu, bir elipsten ziyade bir küreyi baz alıyorsa büyük bir çember hattı olarak da bilinir.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Düzlemsel: Düzlemsel ölçümler uzunluk ve alanı hesaplamak için 2B Kartezyen matematiğini kullanır. Bu seçenek yalnızca izdüşümlendirilen bir koordinat sisteminde ölçüm yaparken kullanılabilir ve bu koordinat sisteminin 2B düzlemi ölçümler için temel olarak alınır.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "Birikmiş mesafe değerlerinin aşamadığı eşik değeri. Birikmiş Öklid mesafesi bu değeri aştığında, hücre konumu için çıktı değeri NoData olacaktır.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "Varsayılan mesafe, çıktı rasterının yayılımına kadardır.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "Engelleri tanımlayan raster.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "Veri kümesi hiçbir engel bulunmadığında ${NoData} değerini içermelidir. Engeller, sıfır dahil geçerli değerler ile temsil edilir.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "Engeller bir tamsayı veya kayan noktalı raster ile tanımlanabilir.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "Her çıktı hücresi konumu için Öklid mesafesinin hesaplandığı hücreleri veya konumları tanımlayan gerekli girdi rasterı.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "Girdi türü bir tamsayı veya kayan noktalı tür olabilir.",
	"@@Exp_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Exp_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Exp_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Exp_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Exp_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Exp_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Exp_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Exp_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Exp_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Exp_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Exp_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Exp_Raster_tag0@@": "E üs değerini bulmak için kullanılan girdi değerleri.",
	"@@Exp10_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Exp10_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Exp10_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Exp10_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Exp10_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Exp10_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Exp10_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Exp10_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Exp10_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Exp10_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Exp10_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Exp10_Raster_tag0@@": "10 üs değerini bulmak için kullanılan girdi değerleri.",
	"@@Exp2_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Exp2_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Exp2_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Exp2_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Exp2_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Exp2_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Exp2_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Exp2_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Exp2_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Exp2_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Exp2_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Exp2_Raster_tag0@@": "2 üs değerini bulmak için kullanılan girdi değerleri.",
	"@@Extract-Bands_Band_tag0@@": "Kullanılan <strong>Yöntem</strong> parametresi seçeneğini temel alarak listeden çıkarılacak bantları seçin.",
	"@@Extract-Bands_Combination_tag0@@": "Bant kombinasyonu veya bant sırası. Seçim listesi belirtilen <strong>Yöntem</strong> seçeneğine bağlıdır. Örneğin, <strong>Yöntem</strong> <strong>Bant Adları</strong> ise, doğal renkli bir görüntü elde etmek için Mavi, Yeşil ve Kırmızı kombinasyonlarını seçebilirsiniz.",
	"@@Extract-Bands_Method_tag0@@": "Bantları çıkarmak için aşağıdaki yöntemlerden birini seçin:",
	"@@Extract-Bands_Method_tag1@@": "<strong>Bant Kimlikleri</strong>--Her sensör için benzersiz olan bant tanımı veya numarası. Bunlar <strong>Bant Adları</strong> ile aynı olabilir.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Bant Adları</strong>--Elektromanyetik spektrumdaki dalga boyu aralığını temsil eden bant adını kullanır (örneğin, Kırmızı, Yakın Kızılötesi, Termal Kızılötesi). Bu aynı zamanda bir bant numarası kimliği olarak da tanımlanabilir.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Bant Dalga Boyları</strong>--Elektromanyetik spektrumdaki dalga boyu.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Çıkarma grubu listesindeki bir bant kullanılamadığında gerçekleşecek eylemi belirtin.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>En İyi Eşleşme</strong>--Kayıp bant yerine, dalga boyuna göre kullanılacak en uygun bandı bulur, böylece işlev başarısız olmaz",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Başarısız</strong>--Girdi veri kümesinde <strong>Bant</strong> parametresinde belirtilen herhangi bir bant bulunmuyorsa, bu işlev başarısız olur.",
	"@@Extract-Bands_Raster_tag0@@": "Bant veya bantların çıkarılacağı raster ürünü.",
	"@@Fill_Raster_tag0@@": "Tek bantlı yükselti rasterı.",
	"@@Fill_Z-Limit_tag0@@": "Bir havuz ile dökülme noktası arasındaki maksimum yükselti farkı.",
	"@@Fill_Z-Limit_tag1@@": "Bu parametre için bir değer belirtilmediği sürece, tüm havuzlar derinlikten bağımsız olarak doldurulur.",
	"@@Fill_Z-Limit_tag2@@": "<strong>Z Sınırı</strong> değeri sıfırdan büyük olmalıdır.",
	"@@Float_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Float_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Float_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Float_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Float_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Float_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Float_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Float_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Float_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Float_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Float_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Float_Raster_tag0@@": "Kayan noktaya dönüştürülecek girdi rasterı.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "Her hücrenin akış yönünü gösteren girdi rasterıdır.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "Akış yönü rasterı, <strong>Akış Yönü</strong> işlevi çalıştırılarak oluşturulabilir.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Girdi akış yönü rasterının türünü tanımlar.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--Girdi akış yönü rasterı D8 türündedir. Varsayılan değerdir.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Girdi akış yönü rasterı D-Infinity (DINF) türündedir.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Girdi akış yönü rasterı Çoklu Akış Yönü (MFD) türündedir.",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "Çıktı biriktirme rasterı tamsayı veya kayan nokta türünde olabilir.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Kayan</strong>--Çıktı rasterı kayan nokta türünde olur. Varsayılan değerdir.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Tamsayı</strong>--Çıktı rasterı tamsayı türünde olur.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "Her piksele ağırlık uygulamak için kullanılan isteğe bağlı bir girdi rasterı.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Ağırlık rasterı belirtilmemişse, her piksele varsayılan ağırlık olarak 1 uygulanır.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Girdi akış yönü rasterının türünü tanımlar.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--Girdi akış yönü rasterı D8 türündedir. Varsayılan değerdir.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Girdi akış yönü rasterı D-Infinity (DINF) türündedir.",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Girdi akış yönü rasterı Çoklu Akış Yönü (MFD) türündedir.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Kenar piksellerinin her zaman dışarı doğru mu akacağını yoksa normal akış kurallarına mı uyacağını belirtir.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>Hayır</strong>--Bir kenar pikselinin içindeki maksimum düşüş sıfırdan büyükse, akış yönü her zamanki gibi belirlenir. Aksi takdirde, akış yönü kenara doğru olacaktır. Yüzey rasterının kenarından içe doğru akması gereken pikseller böyle yapar. Varsayılan değerdir.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Evet</strong>--Yüzey rasterının kenarındaki tüm pikseller yüzey rasterından dışa doğru akacaktır.",
	"@@Flow-Direction_Raster_tag0@@": "Sürekli bir yükselti yüzeyini temsil eden girdi rasterı.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Akış mesafesinin dikey mi yoksa yatay bileşeninin mi hesaplandığını belirler.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Yatay</strong>--Akış mesafesi hesaplamaları, domaindeki her pikselden aktıkları akıştaki piksellere kadar olan akış mesafesinin yatay bileşenini temsil eder.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Dikey</strong>--Akış mesafesi hesaplamaları, domaindeki her pikselden aktıkları akıştaki piksellere kadar olan akış mesafesinin dikey bileşenini temsil eder. Varsayılan değerdir.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "Her pikselin akış yönünü gösteren girdi rasterıdır.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "Bir akış yönü rasterı verilirse, aşağı eğim doğrultusu girdi akış doğrultuları tarafından tanımlananla sınırlandırılır.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "Akış yönü rasterı, Akış Yönü fonksiyonu kullanılarak oluşturulabilir.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Girdi akış yönü rasterının türünü tanımlar.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--Girdi akış yönü rasterı D8 türündedir. Varsayılan değerdir.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Girdi akış yönü rasterı D-Infinity (DINF) türündedir.",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Girdi akış yönü rasterı Çoklu Akış Yönü (MFD) türündedir.",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Birden fazla akış yolu üzerinde akış mesafesini hesaplamak için kullanılan istatistik türünü belirler. Her hücreden akıştaki bir hücreye yalnızca tek bir akış yolu varsa, tüm istatistik türleri aynı sonucu verir.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Minimum</strong>--Birden fazla akış yolunun olduğu yerlerde, hesaplanan minimum akış mesafesi. Varsayılan değerdir.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Ağırlıklı Ortalama</strong>--Birden fazla akış yolunun olduğu yerlerde, akış mesafesinin ağırlıklı ortalaması hesaplanır. Bir hücreden aşağı akım komşu hücrelere olan akış oranı, ağırlıklı ortalamayı hesaplamak için ağırlık olarak kullanılır.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Maksimum</strong>--Birden fazla akış yolu olduğu zaman, maksimum akış mesafesi hesaplanır.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "Lineer bir akış ağını temsil eden bir girdi akış rasterı.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "Sürekli bir yükselti yüzeyini temsil eden girdi rasterı.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "Akış yolu boyunca ölçüm yönü.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong>Aşağı Akım</strong>--Akış yolu boyunca, her bir hücreden rasterın kenarındaki bir havuza veya çıkışa giden aşağı iniş mesafesini hesaplar.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>Yukarı Akım</strong>--Akış yolu boyunca, her bir hücreden drenaj bölmesinin tepesine kadar olan en uzun yukarı çıkış mesafesini hesaplar.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "Her hücrenin akış yönünü gösteren girdi rasterıdır.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "Akış yönü rasterı, <strong>Akış Yönü</strong> işlevi çalıştırılarak oluşturulabilir.",
	"@@Flow-Length_Weight-Raster_tag0@@": "Her hücreye ağırlık uygulamak için kullanılan isteğe bağlı bir girdi rasterı.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Ağırlık rasterı belirtilmemişse, her hücreye varsayılan ağırlık olarak 1 uygulanır.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "${NoData} değerlerinin istatistik hesaplama tarafından göz ardı edilip edilmediğini belirtir.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>İşaretli</strong>--Bir komşu alan içinde bir ${NoData} değeri varsa, ${NoData} değerinin göz ardı edileceğini belirtir. Çıktı değerinin belirlenmesinde sadece komşu alan içindeki veri değeri olan hücreler kullanılır. Varsayılan değerdir.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>İşaretli değil</strong>--Bir komşu alandaki herhangi bir hücrenin ${NoData} değerine sahip olması durumunda, işleme hücresinin çıktısının ${NoData} olacağını belirtir.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "Her hücrenin etrafında bulunan ve istatistikleri hesaplamak için kullanılan alanın şeklidir.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Her komşu alanda, şekli tanımlayacak ek parametreler bulunur.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Anülus, İç Yarıçap, Dış Yarıçap",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Daire, Yarıçap",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Düzensiz, Genişlik, Yükseklik, Komşuluk değerleri",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Dikdörtgen, Genişlik, Yükseklik",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Kama, Yarıçap, Başlangıç açısı, Bitiş açısı",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Ağırlık, Genişlik, Yükseklik, Komşuluk değerleri",
	"@@Focal-Statistics_Neighborhood_tag8@@": "Düzensiz komşuluk, işleme hücresi etrafında düzensiz şekle sahip bir komşu alan belirlemenizi sağlar. Komşu alan çekirdeğinin şeklini tanımlamak için Komşuluk değerleri tablosunu kullanın. Bir hücre konumu için 0 değeri, hücrenin komşu alanın bir parçası olmadığını ve işleme için kullanılmayacağını belirtir. 1 değeri, karşılık gelen hücrenin (ve değerin) komşu alanın bir üyesi olduğunu gösterir.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "Ağırlık komşu alanı, işleme hücresi etrafında düzensiz bir komşu alan tanımlamanızı olanaklı kılması nedeniyle düzensiz komşuluk türüne benzer, ancak ek olarak girdi değerlerine ağırlık uygulamanıza izin verir. Ağırlık çekirdeğindeki değerler, hangi hücre konumlarının komşu alana dahil edilmesi gerektiğini ve bunların çarpılacağı ağırlıkları belirtir. Bir hücreyi işlemden çıkarmak için 0 değerini kullanın. Pozitif, negatif ve ondalık değerlerin tümü ağırlık olarak kullanmak için geçerli seçeneklerdir. Ağırlık komşuluk türü için, yalnızca Ortalama, Standart Sapma veya Toplam istatistikleri desteklenir.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "<strong>Yüzdeli</strong> seçildiğinde istatistik türü olarak hangi yüzdeliğin hesaplanacağını gösterir. Yüzde 90 için varsayılan 90’dır.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "Değerler 0 ile 100 arasında değişebilir. Yüzde 0, sonucun kayan nokta olması haricinde, esasen Minimum istatistiğe ve yüzde 100 Maksimum istatistiğe eşittir. 50 değeri temelde Ortanca istatistiğiyle aynı sonucu üretir.",
	"@@Focal-Statistics_Raster_tag0@@": "Gerekli girdi rasterı.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "Hesaplanacak istatistik türü.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Çoğunluk</strong>--Komşu alandaki hücrelerin çoğunluk (en sık görülen) değerini hesaplar.",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Maksimum</strong>--Komşu alandaki hücrelerin maksimum (en büyük) değerini hesaplar.",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Ortalama</strong>--Komşu alandaki hücrelerin ortalama değerini hesaplar.",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Ortanca</strong>--Komşu alandaki hücrelerin ortanca değerini hesaplar.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Minimum</strong>--Komşu alandaki hücrelerin minimum (en küçük) değerini hesaplar.",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Azınlık</strong>--Komşu alandaki hücrelerin azınlık (en az görülen) değerini hesaplar.",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Yüzdelik</strong>--Komşu alandaki hücrelerin yüzdelik değerini hesaplar. <strong>Yüzdelik Değer</strong> parametresi ile hangi yüzdeliğin hesaplanacağını belirleyebilirsiniz.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Aralık</strong>--Komşu alandaki hücrelerin aralığını (en büyük ve en küçük değer arasındaki fark) hesaplar.",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Standart Sapma</strong>--Komşu alandaki hücrelerin standart sapma değerini hesaplar.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Toplam</strong>--Komşu alandaki hücrelerin toplam (tüm değerlerin toplamı) değerini hesaplar.",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Çeşitlilik</strong>--Komşu alandaki hücrelerin çeşitliliğini (benzersiz değerlerin sayısı) hesaplar.",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Girdi rasterı kayan nokta olduğunda yalnızca Ortalama, Maksimum, Ortanca, Minimum, Yüzde, Aralık, Standart Sapma ve Toplam istatistik türleri kullanılabilir.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "Ortalama, Ortanca, Yüzde ve Standart Sapma için, çıktı daima kayan nokta olur.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "Varsayılan istatistik türü Ortalama'dır.",
	"@@Geometric_Constant-Z_tag0@@": "Geometrik fonksiyon için kullanılacak sabit bir yükselti belirtin.",
	"@@Geometric_DEM_tag0@@": "Geometrik fonksiyon için kullanılacak DEM’i belirtin. Mozaik veri kümesinde bulunan bir DEM'i, raster veri kümesi olarak veya çıktısı bir DEM olan mozaik veri kümesi olarak kullanabilirsiniz.",
	"@@Geometric_Geoid_tag0@@": "USGS NED veya ArcGIS Online World Elevation gibi çoğu yükselti veri kümesi ortometrik yüksekliklerdir; bu nedenle elipsoit yükseklik gerektiren uydu RPC'leriyle uyumluluk için Geoit düzeltmenin seçilmesi gerekir. DEM’niz zaten elipsoit yüksekliklerden referans almıyorsa, geoit (EGM96) düzeltmesini z değerlerine uygulamak için <strong>Geoit</strong> onay kutusunu işaretleyin.",
	"@@Geometric_Method_tag0@@": "Geometrik fonksiyon için yükselti yöntemini seçin:",
	"@@Geometric_Method_tag1@@": "Sabit Z Kullan: Geometrik fonksiyonu gerçekleştirmek için sabit bir yükselti belirleyin.",
	"@@Geometric_Method_tag2@@": "DEM Kullan: Geometrik fonksiyonu gerçekleştirmek için bir DEM belirtin.",
	"@@Geometric_Raster_tag0@@": "Girdi rasterı.",
	"@@Geometric_Z-Factor_tag0@@": "Uydu rasyonel polinom katsayıları (RPC'ler), metre cinsinden dikey birimleri olan yükselti veri kümeleri için ölçeklendirilir. Yükseltinizde diğer dikey birimler kullanılıyorsa, metre cinsinden ölçeklendirmek için bir <strong>Z Faktörü</strong> girin. Örneğin, yükselti birimleriniz fit olarak belirtilmişse, yükselti birimlerinizi fit cinsinden metreye dönüştürmek için 0,3048 değerini kullanmalısınız.",
	"@@Geometric_Z-Offset_tag0@@": "DEM'deki yükselti değerine eklenecek taban değer. Bu deniz seviyesinde başlamayan yükselti değerlerini ötelemek için kullanılabilir.",
	"@@Geometric_Tolerance_tag0@@": "Geometrik fonksiyonda maksimum tolere edilebilir hatayı piksel sayısı olarak belirtin. NITF (NCDRD) raster tipi için varsayılan değer ikidir.",
	"@@Grayscale_Raster_tag0@@": "Girdi rasterı.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "Girdi rasterını oluşturan bantların her biri için ağırlıklar.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Greater-Than_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Greater-Than_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Greater-Than_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Greater-Than_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Greater-Than_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Greater-Than_Raster_tag0@@": "İkinci girdiden daha büyük olup olmadığını belirlemek için girdi test edilir.",
	"@@Greater-Than_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Greater-Than_Raster2_tag0@@": "İlk girdinin daha büyük olduğunun test edildiği girdi.",
	"@@Greater-Than_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Greater-Than-Equal_Raster_tag0@@": "İkinci girdiden daha büyük ya da eşit olup olmadığını belirlemek için girdi test edilir.",
	"@@Greater-Than-Equal_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "İlk girdinin daha büyük ya da eşit olduğunun test edildiği girdi.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "Çıktı rasterı ile ilişkilendirilen ölçü birimi. Kullanılabilir çıktı birimleri, Santigrat, Fahrenhayt ve Kelvin'dir.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "Piksel değerlerinin bağıl nemi 0 ile 100 arasında bir yüzde değeri olarak temsil ettiği tek bantlı bir raster.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "Piksel değerlerinin ortam hava sıcaklığını temsil ettiği tek bantlı bir raster.",
	"@@Heat-Index_Temperature-Units_tag0@@": "Girdi sıcaklık rasterı ile ilişkilendirilen ölçü birimi. Kullanılabilir girdi birimleri, Santigrat, Fahrenhayt ve Kelvin'dir.",
	"@@Hillshade_Altitude_tag0@@": "Yükseklik, güneşin ufkun üzerindeki yükseltisidir ve 0 ile 90 derece arasında değişir. 0 derece değeri, güneşin ufukta, yani referans çerçevesiyle aynı yatay düzlemde olduğunu gösterir. 90 derece değeri, güneşin doğrudan tepede olduğunu gösterir.",
	"@@Hillshade_Altitude_tag1@@": "Bu parametre sadece <strong>Kabartma Türü</strong> <strong>Klasik</strong> ise geçerlidir. Varsayılan değer, ufkun 45 derece üzerindedir.",
	"@@Hillshade_Azimuth_tag0@@": "Azimut, güneşin ufuk boyunca göreceli (derece cinsinden) konumudur. Bu pozisyon, güneşin kuzeyden itibaren saat yönünde ölçülen açısı ile gösterilir. 0 derece değerinde bir azimut kuzeyi, 90 derece doğuyu, 180 derece güneyi ve 270 derece batıyı gösterir.",
	"@@Hillshade_Azimuth_tag1@@": "Bu parametre sadece <strong>Kabartma Türü</strong> <strong>Klasik</strong> ise geçerlidir. Varsayılan değer, kuzeybatıdan 315 derecedir.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "Bu seçeneğin kullanılması, bir rasterın kenarları boyunca oluşabilecek yeniden örnekleme hatalarını önler. Bir rasterın kenarı boyunca veya NoData pikselinin yanında bulunan çıktı pikselleri NoData ile doldurulur; bu nedenle, bu parametrenin yalnızca örtüşen yükselti mozaik veri kümeleriyle kullanılması önerilir. Örtüşen pikseller varsa, NoData alanları boş pikseller yerine örtüşen piksel değerlerini görüntüler.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "İşaretli değil: Kabartmanızı yeniden örneklemek için İki çizgili yeniden örnekleme eşit oranda uygulanır. Yükselti rasterı verilerinizi içeren mozaik veri kümesi birbirine eklendiğinde bu seçeneği kullanın. Varsayılan değerdir.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "İşaretli: İki çizgili yeniden örnekleme, rasterların kenarları veya NoData'nın yanındaki pikseller dışında kabartma içinde kullanılır. Bu pikseller NoData ile doldurulur ve örtüşen piksel değerleri görüntülenir, böylece aksi takdirde oluşabilecek keskin kenar efektleri azaltılır. Yükselti rasterı verilerinizi içeren mozaik veri kümesi örtüşen ögelerden veya döşemelerden oluştuğunda bu seçeneği kullanın.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "Fonksiyonun sonuçları verilere bağlı olabilir. Çıktınızda döşeme sınır hataları olduğunu gözlemlerseniz, onay kutusunun alternatif koşulunu seçin.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Kabartma için aydınlatma kaynağını kontrol eder:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Geleneksel: Kabartmayı tek bir ışıklandırma yönünden hesaplar. Varsayılan değerdir. Işık kaynağının konumunu kontrol etmek için <strong>Azimut</strong> ve <strong>Yükseklik</strong> değerlerini ayarlayabilirsiniz.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Çok yönlü: Arazinin gelişmiş bir görselleştirmesini temsil etmek için birden fazla kaynaktan gelen ışığı birleştirir.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "Piksel Boyut Faktörü, izleyici harita ekranını yakınlaştırıp uzaklaştırırken ölçek değişikliklerini hesaba katar. <strong>Z Faktörü</strong>’nün değişme hızını kontrol eder.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Bu parametre sadece <strong>Ölçek</strong> türü <strong>Ayarlanmış</strong> ise geçerlidir. Varsayılan değer 0,024'tir.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "Piksel Boyut Gücü, izleyici harita ekranını yakınlaştırıp uzaklaştırırken yükseklik (veya) ölçek değişikliklerini hesaba katar. Önemli bir kabartma kaybını önlemek için <strong>Z Faktörü</strong>’nün değişim hızını kontrol eden denklemdeki piksel boyutu terimine uygulanan üstel ögedir.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Bu parametre sadece <strong>Ölçek</strong> türü <strong>Ayarlanmış</strong> ise geçerlidir. Varsayılan değer 0,664'tir.",
	"@@Hillshade_Raster_tag0@@": "Girdi yükselti veri kümesi.",
	"@@Hillshade_Scaling_tag0@@": "Gölgeli sonuç, aşağıdaki iki seçenekten biri ile z faktörünü ayarlayarak dinamik olarak ölçeklendirilir:",
	"@@Hillshade_Scaling_tag1@@": "Ayarlanmış--Bu, izleyici yakınlaştırma ve uzaklaştırma yaparken, çok çeşitli yükseklik değişikliklerini (ölçek) barındıran varsayılan <strong>Piksel Boyut Kuvveti</strong> ve <strong>Piksel Boyut Faktörü</strong> değerleri kullanarak lineer olmayan bir ayar uygular. <strong>Ayarlanmış</strong> parametre ayarı, dünya çapında veri kümesi kullanılırken tavsiye edilir.",
	"@@Hillshade_Scaling_tag8@@": "Hiçbiri: Ölçeklendirme uygulanmaz. Bu, yerel bir alanı kapsayan tek bir raster veri kümesi için idealdir. Bu, küçük ölçeklerde çok az değişkenlik gösteren arazi kabartması üreteceğinden, yükselti veya çok ölçekli haritalarda büyük farklılıklar gösteren dünya çapında veri kümeleri için önerilmez.",
	"@@Hillshade_Z-Factor_tag0@@": "Z faktörü yükselti değerlerini dönüştürmek için iki amaçlı olarak kullanılan bir ölçeklendirme faktörüdür:",
	"@@Hillshade_Z-Factor_tag1@@": "Yükselti birimlerini (metre ya da fit gibi); fit, metre veya derece gibi veri kümesi yatay koordinat birimlerine dönüştürmek.",
	"@@Hillshade_Z-Factor_tag2@@": "Görsel efekt amacıyla dikey büyütme eklemek.",
	"@@Int_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Int_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Int_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Int_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Int_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Int_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Int_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Int_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Int_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Int_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Int_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Int_Raster_tag0@@": "Tamsayıya dönüştürülecek girdi rasterı.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "Çıktı rasterının hücre boyutu otomatik olarak algılanır; ancak, bunu değiştirebilirsiniz. Hücre boyutu değiştirilebilir olsa da, raster veri kümesinin yayılımı aynı kalacaktır.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "Girdi verileri gösterir.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Bu fonksiyon için dört adet yeniden örnekleme yöntemi vardır:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Ters Mesafe Ağırlıklı</strong>--Bir dizi örnek nokta veya hücrenin lineer ağırlıklı bir kombinasyonunu kullanarak hücre değerlerini belirler. Ağırlık, bilinen noktalardan veya hücrelerden olan mesafenin ters fonksiyonudur.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>Lineer Üçgenleme</strong>--Düzensiz rasterdaki her bir hücrenin merkez noktalarından, daha sonra düzenli bir raster haline dönüştürülen bir yüzey enterpolasyonu yapmak için üçgenlenmiş düzensiz bir ağ kullanır.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Doğal Komşuluk</strong>--Girdi örneklerinin bir sorgu noktasına en yakın alt kümesini bulur ve bir değeri ara değerlemek için orantılı alanlara göre ağırlıklar uygular.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>En Yakın Komşu</strong>--En yakın pikseli kullanarak piksel değerini hesaplar. Hiçbir kaynak pikseli yoksa, çıktıda yeni bir piksel oluşturulamaz. Varsayılan değerdir.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Seçilen yeniden örnekleme yöntemi için dahil edilecek piksel sayısını tanımlar. Varsayılan değer ${3} pikseldir.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Girdi olarak bir nokta detay sınıfı seçerseniz, öznitelik tablosundaki alanı noktaların değeriyle tanımlamanız gerekir",
	"@@Is-Null_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Is-Null_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Is-Null_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Is-Null_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Is-Null_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Is-Null_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Is-Null_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Is-Null_Raster_tag0@@": "${NoData} (boş) olan hücreleri tanımlamak için test edilen girdi rasterı.",
	"@@Is-Null_Raster_tag1@@": "Girdi, bir tamsayı veya kayan noktalı tür olabilir.",
	"@@Key-Metadata_Band-Names_tag0@@": "Bu, rasterın bant adlarının üzerine yazmak için kullanılır. Güncellenen bant adlarını temsil eden virgülle ayrılmış bir dizidir.",
	"@@Key-Metadata_Band-Names_tag1@@": "Bu parametre isteğe bağlıdır.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "Bir önemli değer çiftleri koleksiyonunu temsil eden bir JSON dizisi olarak tanımlanan giden rasterın içine enjekte edilecek önemli meta veriler. Aşağıdaki, bu fonksiyona girdi olarak kullanılabilecek bir JSON dizisi örneğidir. Bu parametre için tüm girdiler aynı biçimde olmalıdır.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "Önemli meta verileri gösteren JSON dizisi",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "Üzerine yazılacak veri kümesi seviyesinde anahtar özelliklerin adı.",
	"@@Key-Metadata_Raster_tag0@@": "Eklemek veya üzerine yazmak istediğiniz önemli meta verileri içeren raster veya mozaik veri kümesi.",
	"@@Key-Metadata_Value_tag0@@": "Ayarlamak istediğiniz veri kümesi düzeyinde anahtar özelliğinin üzerine yazma değeri.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Bu parametre, biriken maliyet arttıkça maliyetlerin üstesinden gelme çabasındaki artışı simüle eder. Yolcunun yorgunluğunu modellemek için kullanılır. Bir hücreye ulaşmak için artan biriken maliyet, direnç oranı ile çarpılır ve bir sonraki hücreye geçme maliyetine eklenir.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "Bir hücre içinde hareket etmenin görünür maliyetini hesaplamak için kullanılan bir bileşik faiz oranı formülünün değiştirilmiş bir versiyonudur. Direnç oranının değeri arttıkça, daha sonra ziyaret edilen hücrelerin maliyetini de arttırır. Direnç oranı arttıkça, bir sonraki hücreye ulaşma maliyeti de artar, çünkü sonraki her hareket için birleştirilir. Direnç oranı bileşik bir orana benzer olduğu ve genel olarak biriken maliyet değerleri çok büyük olduğu için, biriken maliyet değerlerine bağlı olarak 0,005 veya daha düşük direnç oranları önerilir.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Bir kaynak için yolcunun maliyet kapasitesini tanımlar. Maliyet hesaplamaları, belirtilen kapasiteye ulaşılana kadar her kaynak için devam eder.",
	"@@Least-Cost-Path_Capacity_tag1@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "Her bir hücre içinde planimetrik olarak hareket etmenin maliyetini veya empedansını tanımlayan gerekli bir girdi rasterı. Her hücre konumundaki değer, hücre içinde hareket etmek için birim başına maliyet mesafesini temsil eder. Her hücre konumu değeri hücre çözünürlüğü ile çarpılırken, aynı zamanda hücre içinden geçmenin toplam maliyetini elde etmek için çapraz (diyagonal) hareketi dengeler.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "<strong>Maliyet Rasterı</strong>’nın değerleri tamsayı veya kayan nokta olabilir, ancak negatif veya sıfır olamaz.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "Hedef konum değerleri almak için kullanılan alan.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "En az maliyetli kaynağa en az maliyetli yolun belirlendiği pikselleri tanımlayan gerekli bir girdi rasterı. Bu girdi geçerli değerlere sahip piksellerden oluşur ve kalan piksellere ${NoData} değeri atanmalıdır. 0 değerleri geçerlidir.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "Birikmiş maliyet değerlerinin aşamadığı eşik değeri. Birikmiş maliyet mesafesi bu değeri aştığında, hücre konumu için çıktı değeri ${NoData} olacaktır. Maksimum mesafe, toplam maliyet mesafelerinin hesaplanma yayılımını belirler. Varsayılan mesafe, çıktı rasterının yayılımına kadardır.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Bu parametre bir seyahat modunun veya bir kaynaktaki büyüklüğün kontrolünü sağlar. Çarpan ne kadar büyükse, her bir hücreye geçmenin maliyeti o kadar artar.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "Değerler sıfırdan büyük olmalıdır. Varsayılan değer 1'dir.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Girdi hedef verisindeki değerler ve bölgelerin maliyet yolu hesaplamalarında nasıl yorumlanacağını tanımlayan anahtar sözcük:",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>En İyi Tek</strong>--Girdi hedef verilerindeki tüm pikseller için en düşük maliyetli yol, kaynak hücrelere giden en düşük maliyetli yolun minimum olanına sahip pikselden türetilir.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Her Hücre</strong>--Girdi hedef verilerindeki geçerli değerleri olan her piksel için en düşük maliyetli bir yol belirlenir ve çıktı rasterına kaydedilir. Girdi hedef verilerinin her bir hücresi ayrı ayrı ele alınır ve her hücre için en az maliyetli yol belirlenir.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Her Bölge</strong>--Girdi hedef verilerindeki her bölge için en düşük maliyetli bir yol belirlenir ve çıktı rasterına kaydedilir. Her bölge için en düşük maliyetli yol, bölgedeki en düşük maliyetli mesafe ağırlıklandırmasına sahip pikselde başlar.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Bu, her çıktı hücresi konumu için en az birikmiş maliyet mesafesinin hesaplandığı hücreleri veya konumları tanımlayan gerekli bir girdi rasterıdır.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "Maliyet hesaplamalarının başlatılacağı başlangıç maliyeti. Bu parametre, bir kaynakla ilişkili sabit maliyetin belirtilmesi için kullanılır. 0 maliyetiyle başlamak yerine, maliyet algoritması belirtilen değerle başlar.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "Değer sıfır veya daha büyük olmalıdır. Varsayılan değer 0'dir.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Kaynak direnç oranını ve kaynak başlangıç maliyetini uygulama sırasında yolcunun yönünü tanımlar.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>Kaynaktan</strong>--Kaynak direnç oranı ve kaynak başlangıç maliyetinin uygulaması girdi kaynağından başlayarak kaynak olmayan hücrelere taşınır. Varsayılan değerdir.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>Kaynağa</strong>--Kaynak direnç oranı ve kaynak başlangıç maliyetinin uygulaması kaynak olmayan hücrelerden başlayarak yeniden girdi kaynağına taşınır.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Tüm kaynaklara uygulanacak <strong>Kaynaktan</strong> veya <strong>Kaynağa</strong> anahtar sözcüğünü belirtin veya <strong>Kaynak Raster</strong>'da her kaynağın seyahat yönünü tanımlayan anahtar sözcükleri içeren bir alan belirtin. Bu alanda ${FROM_SOURCE} veya ${TO_SOURCE} dizisi bulunmalıdır.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Less-Than_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Less-Than_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Less-Than_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Less-Than_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Less-Than_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Less-Than_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Less-Than_Raster_tag0@@": "İkinci girdiden daha küçük olup olmadığını belirlemek için girdi test edilir.",
	"@@Less-Than_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Less-Than_Raster2_tag0@@": "İlk girdinin daha küçük olduğunun test edildiği girdi.",
	"@@Less-Than_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Less-Than-Equal_Raster_tag0@@": "İkinci girdiden daha küçük ya da eşit olup olmadığını belirlemek için girdi test edilir.",
	"@@Less-Than-Equal_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Less-Than-Equal_Raster2_tag0@@": "İlk girdinin daha küçük ya da eşit olduğunun test edildiği girdi.",
	"@@Less-Than-Equal_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Ln_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Ln_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Ln_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Ln_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Ln_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Ln_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Ln_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Ln_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Ln_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Ln_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Ln_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Ln_Raster_tag0@@": "Doğal logaritma değerini (Ln) bulmak için kullanılan girdi değerleri.",
	"@@Log10_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Log10_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Log10_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Log10_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Log10_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Log10_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Log10_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Log10_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Log10_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Log10_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Log10_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Log10_Raster_tag0@@": "10 logaritma değerini bulmak için kullanılan girdi değerleri.",
	"@@Log2_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Log2_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Log2_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Log2_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Log2_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Log2_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Log2_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Log2_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Log2_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Log2_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Log2_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Log2_Raster_tag0@@": "2 logaritma değerini bulmak için kullanılan girdi değerleri.",
	"@@Lookup_Field_tag0@@": "Yeni raster için istenen değerleri içeren alan.",
	"@@Lookup_Field_tag1@@": "Sayısal olmalıdır.",
	"@@Lookup_Raster_tag0@@": "Yeni bir rasterın oluşturulacağı bir alanı içeren girdi rasterı.",
	"@@Lookup_Raster_tag1@@": "Bu, bir tamsayı veya kayan noktalı tür olabilir.",
	"@@Mask_Included-Ranges_tag0@@": "Eklenen aralıklar, her bir bant için minimum ve maksimum bir değer belirtilerek belirlenebilir; aralık dışındaki herhangi bir değer ${NoData} olarak döner. Bir piksel, piksel değeri belirtilen aralıkların içine düştüğünde eklenir. Bu nedenle, bant 1 5-10 aralığındaysa ve bant 2 15-20 aralığındaysa ve bant 1 için piksel değeri 8 ise, bu piksel maskelenmez.",
	"@@Mask_NoData-Interpretation_tag0@@": "Bu, <strong>${NoData} Değerlerinin</strong> çıktı görüntüsünü nasıl etkileyeceğini ifade eder.",
	"@@Mask_NoData-Interpretation_tag3@@": "Aşağıdaki iki seçenek arasından seçim yapabilirsiniz:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Tümünü Eşleştir</strong>--Her bir bant için belirlediğiniz ${NoData} değerleri, çıktı görüntüsünün ${NoData} pikselini içermesi için aynı pikselde gerçekleşmelidir.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Herhangi Birini Eşleştir</strong>--Belirlediğiniz ${NoData} değeri, belirtilen bir banttaki bir piksel için gerçekleşirse, çıktı görüntüsündeki o piksel ${NoData} olacaktır. Varsayılan değerdir.",
	"@@Mask_NoData-Values_tag0@@": "NoData değerleri her bant için belirtilebilir. Boşlukla ayrılmış bir liste ile birden fazla değer belirleyebilirsiniz.",
	"@@Mask_Raster_tag0@@": "Girdi rasterı.",
	"@@Minus_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Minus_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Minus_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Minus_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Minus_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Minus_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Minus_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Minus_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Minus_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Minus_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Minus_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Minus_Raster_tag0@@": "İkinci girdi değerlerinin çıkarılacağı girdi.",
	"@@Minus_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Minus_Raster2_tag0@@": "İlk girdi değerlerinden çıkarılacak girdi değerleri.",
	"@@Minus_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@ML-Classify_Raster_tag0@@": "Girdi rasterı, maksimum benzerlik sınıflaması algoritmasını kullanarak sınıflandırır.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "${.gsg} imza dosyası.",
	"@@Mod_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Mod_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Mod_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Mod_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Mod_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Mod_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Mod_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Mod_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Mod_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Mod_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Mod_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Mod_Raster_tag0@@": "Pay girdisi.",
	"@@Mod_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Mod_Raster2_tag0@@": "Payda girdisi.",
	"@@Mod_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Mosaic-Rasters_Operation_tag0@@": "İki veya daha fazla görüntünün örtüşen bazı kısımları olduğunda, tüm çakışmaları giderir. Seçenekler şunları içerir:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Karıştır</strong>--Daha yumuşak bir çıktı görüntüsü için komşu görüntülere daha yakın olan piksellere daha fazla ağırlık vererek çakışan piksellerin ortalamasını hesaplar ve görüntüler. Varsayılan değerdir.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>İlk</strong>--Belirli bir alanda çakışan görüntüler listesinde ilk görüntüdeki pikselleri görüntüler.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Son</strong>--Belirli bir alanda çakışan görüntüler listesinde son görüntüdeki pikselleri görüntüler.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Maks</strong>--Çakışan tüm katmanların en yüksek değerli pikselini görüntüler. Bu seçenekte, örtüşen alanda yalnızca bir görüntünün piksellerini görüntüleme garantisi yoktur. Bunun yerine, tüm potansiyel katmanların bir birleşimi görüntülenir.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Ortalama</strong>--Çakışan piksellerin ortalamasını hesaplar ve görüntüler.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Min</strong>--Çakışan tüm katmanların en düşük değerli pikselini görüntüler. Bu seçenekte, örtüşen alanda yalnızca bir görüntünün piksellerini görüntüleme garantisi yoktur. Bunun yerine, tüm potansiyel katmanların bir birleşimi görüntülenir.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Tek bir görüntü oluşturmak için birlikte mozaiklemek istediğiniz rasterları seçin.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Elektromanyetik spektrumun yakın kızılötesi kısmını temsil eden bant kimliğini belirtir.",
	"@@NDVI_Raster_tag0@@": "Çoklu spektral girdi rasterı.",
	"@@NDVI_Scientific-Output_tag0@@": "Çıktı değerleri, birçok bilimsel uygulamada olduğu gibi -1,0 ile 1,0 değerleri arasında değişecektir.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Elektromanyetik spektrumun kırmızı kısmını temsil eden bant kimliğini belirtir.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Açılır listeden önceden tanımlanmış bir renk düzeni seçin.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "NDVI çıktısını renklendirmek için kullanılacak renk düzenini seçin:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Ren Haritası: Açılır listeden önceden tanımlanmış bir renk haritası seçin. Alternatif olarak, mevcut bir kalıcı renk haritası dosyasına göz atabilirsiniz.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Renk Tayfı: Açılır listeden önceden tanımlanmış bir renk düzeni seçin.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Açılır listeden önceden tanımlanmış bir renk haritası seçin. Alternatif olarak, mevcut bir renk haritası dosyasına göz atabilirsiniz.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Elektromanyetik spektrumun yakın kızılötesi kısmını temsil eden bant kimliğini belirtir.",
	"@@NDVI-Colorized_Raster_tag0@@": "Çoklu spektral girdi rasterı.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "Çıktı değerleri, birçok bilimsel uygulamada olduğu gibi -1,0 ile 1,0 değerleri arasında değişecektir.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Elektromanyetik spektrumun kırmızı kısmını temsil eden bant kimliğini belirtir.",
	"@@Negate_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Negate_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Negate_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Negate_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Negate_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Negate_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Negate_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Negate_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Negate_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Negate_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Negate_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Negate_Raster_tag0@@": "İhmal edilecek girdi rasterı (-1 ile çarpılır).",
	"@@Nibble_Mask-Raster_tag0@@": "Maske olarak kullanılan gerekli girdi rasterı.",
	"@@Nibble_Mask-Raster_tag1@@": "NoData değerine sahip hücrelerin değerleri girdi <strong>Raster</strong> içinde bölünür.",
	"@@Nibble_Mask-Raster_tag4@@": "Maske rasterı, bir tamsayı veya kayan noktalı tür olabilir.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Girdi rasterındaki NoData hücrelerinin çıktı rasterında NoData olarak kalıp kalmayacağını tanımlar.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>Hayır</strong>--Girdi rasterındaki NoData hücrelerinin çıktıda NoData olarak kalıp kalmayacağını belirtir. Varsayılan değerdir.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Evet</strong>--Girdi rasterındaki ve maske içindeki NoData hücrelerinin geçerli çıktı hücresi değerlerine bölünüp bölünemeyeceğini belirtir.",
	"@@Nibble_Raster_tag0@@": "Bölünecek gerekli girdi rasterı.",
	"@@Nibble_Raster_tag1@@": "Girdi rasterı, bir tamsayı veya kayan noktalı tür olabilir.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Girdi rasterındaki ${NoData} değerlerinin maske rasterı tarafından tanımlanan alana bölünmesine izin verilip verilmeyeceğini belirtir.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Evet</strong>--İster ${NoData} olsun ister girdi rasterında başka bir veri değeri olsun, en yakın komşu değerinin kullanılacağını belirtir. Girdi rasterındaki ${NoData} değerleri en yakın komşuysa maskede tanımlanan alanlara bölünmekte serbesttir. Varsayılan değerdir.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>Hayır</strong>--Yalnızca veri değerlerinin maske rasterında tanımlanan alanlara bölünmekte serbest olduğunu belirtir. Girdi rasterındaki ${NoData} değerleri en yakın komşu olsalar da maske rasterında tanımlanan alanlara bölünmelerine izin verilmez.",
	"@@Nibble_Zone-Raster_tag0@@": "Girdi bölge rasterı.",
	"@@Nibble_Zone-Raster_tag1@@": "Bir bölge, rasterdaki, bitişik olsun olmasın, aynı değere sahip tüm hücrelerdir. Girdi bölge katmanı, bölgelerin şeklini, değerlerini ve konumlarını tanımlar. Bölge rasterı, bir tamsayı veya kayan noktalı tür olabilir.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Not-Equal_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Not-Equal_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Not-Equal_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Not-Equal_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Not-Equal_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Not-Equal_Raster_tag0@@": "İkinci girdiyle eşitsizlik karşılaştırması için kullanılacak girdi.",
	"@@Not-Equal_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Not-Equal_Raster2_tag0@@": "İlk girdiyle eşitsizlik bakımından karşılaştırılacak girdi.",
	"@@Not-Equal_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Pansharpening_Multispectral_tag0@@": "Pankromatik bandı kullanarak keskinleştirmek istediğiniz çoklu spektral raster.",
	"@@Pansharpening_Panchromatic_tag0@@": "Düşük çözünürlüklü çoklu spektral raster görüntülerini keskinleştirmek için kullanılacak yüksek çözünürlüklü tek bantlı raster.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Kullanmak istediğiniz görüntü keskinleştirme algoritmasını seçin.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey: Veri tümleştirme için spektral modellemeye dayanan Brovey algoritmasını kullanır.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri: Veri tümleştirme için spektral modellemeye dayanan Esri algoritmasını kullanır.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram-Schmidt: Çoklu spektral verileri netleştirmek için Gram-Schmidt spektral-keskinleştirme algoritmasını kullanır.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS: Veri tümleştirme için Yoğunluk, Renk Tonu ve Doygunluk renk alanını kullanır.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Ortalama: Kırmızı, yeşil ve mavi değerler ile pankromatik piksel değeri arasındaki ortalama değeri kullanır.",
	"@@Pansharpening_Weights_tag0@@": "Kırmızı, yeşil, mavi ve kızılötesi bantların ağırlıklarını belirtin. Tüm değerler 0 - 1 aralığında olmalıdır.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Bu parametre, biriken maliyet arttıkça maliyetlerin üstesinden gelme çabasındaki artışı simüle eder. Yolcunun yorgunluğunu modellemek için kullanılır. Bir hücreye ulaşmak için artan biriken maliyet, direnç oranı ile çarpılır ve bir sonraki hücreye geçme maliyetine eklenir.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Bir hücre içinde hareket etmenin görünür maliyetini hesaplamak için kullanılan bir bileşik faiz oranı formülünün değiştirilmiş bir versiyonudur. Direnç oranının değeri arttıkça, daha sonra ziyaret edilen hücrelerin maliyetini de arttırır. Direnç oranı arttıkça, bir sonraki hücreye ulaşma maliyeti de artar, çünkü sonraki her hareket için birleştirilir. Direnç oranı bileşik bir orana benzer olduğu ve genel olarak biriken maliyet değerleri çok büyük olduğu için, biriken maliyet değerlerine bağlı olarak 0,005 veya daha düşük direnç oranları önerilir.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Path-Distance_Capacity_tag0@@": "Bir kaynak için yolcunun maliyet kapasitesini tanımlar. Maliyet hesaplamaları, belirtilen kapasiteye ulaşılana kadar her kaynak için devam eder.",
	"@@Path-Distance_Capacity_tag1@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Path-Distance_Cost-Raster_tag0@@": "Her bir hücre içinde planimetrik olarak hareket etmenin maliyetini veya empedansını tanımlayan gerekli bir girdi rasterı. Her hücre konumundaki değer, hücre içinde hareket etmek için birim başına maliyet mesafesini temsil eder. Her hücre konumu değeri hücre çözünürlüğü ile çarpılırken, aynı zamanda hücre içinden geçmenin toplam maliyetini elde etmek için çapraz (diyagonal) hareketi dengeler.",
	"@@Path-Distance_Cost-Raster_tag1@@": "<strong>Maliyet Rasterı</strong>’nın değerleri tamsayı veya kayan nokta olabilir, ancak negatif veya sıfır olamaz.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Yatay maliyet faktörü ve yatay bağıl hareket açısı (HRMA) arasındaki ilişkiyi tanımlar.</p><p>Tanımlanmış bir dikey faktör grafiğini tanımlayan değiştiricili birkaç faktör bulunur. Ek olarak, özel bir grafik oluşturmak için bir tablo kullanılabilir. Grafikler, komşu bir hücreye taşınmanın toplam maliyetinin hesaplanmasında kullanılan dikey faktörü tanımlamak için kullanılır.</p><p>Aşağıdaki açıklamalarda, iki kısaltma kullanılmıştır: HF ve HRMA. HF, bir hücreden diğerine geçerken karşılaşılan yatay zorluğu tanımlayan yatay faktördür. HRMA, bir hücreden yatay yön ile hareket yönü arasındaki açıyı belirleyen yatay bağıl hareket açısıdır.</p><p><strong>Yatay faktör</strong>türler şunları içerir:</p><ul><li><strong>İkili</strong>--HRMA'nın kesme açısından küçük olması durumunda, HF’nin sıfır faktörüyle ilişkili değere ayarlandığını belirtir; aksi takdirde sonsuzdur.</li><li><strong>İleri</strong>--Sadece ileri harekete izin verildiğini belirler. HRMA, 0’a eşit veya büyük ve 90 dereceden küçük olmalıdır (0 &lt;= HRMA &lt; 90). HRMA 0'dan büyük ve 45 dereceden düşükse, hücrenin HF'si sıfır faktörüyle ilişkili değere ayarlanır. HRMA, 45 dereceden büyük veya eşitse, yan değer değiştirici değeri kullanılır. 90 dereceye eşit veya daha büyük herhangi bir HRMA değeri için HF sonsuz olarak ayarlanır.</li><li><strong>Lineer</strong>--HF'nin HRMA'nın lineer bir fonksiyon olduğunu belirtir.</li><li><strong>Ters Lineer</strong>--HF'nin HRMA'nın ters doğrusal bir fonksiyonu olduğunu belirtir.</li><li><strong>Tablo</strong>--HF'leri belirlemek için kullanılan yatay faktör grafiğini tanımlamak için bir tablo dosyasının kullanılacağını belirtir.</li></ul><p>Yatay faktör değiştiricileri aşağıdakileri içerir:</p><ul><li><strong>Sıfır faktörü</strong>--HRMA 0 olduğu zaman kullanılan yatay faktördür. Bu faktör, y-kesimini yatay faktör fonksiyonlarından herhangi biri için konumlandırır.</li><li><strong>Kesme açısı</strong>--HF'nin ötesinde kalanlar için sonsuz olarak ayarlanacağı HRMA açısını tanımlar.</li><li><strong>Eğim</strong>--<strong>Lineer</strong>ve<strong>Ters Lineer</strong>yatay faktör anahtar sözcükleriyle birlikte kullanılan düz çizginin eğimini belirler. Eğim, uzunluk boyunca yükselmenin bir kesri olarak belirtilir (örneğin, yüzde 45 eğim 1/45'tir, bu da 0,02222 olarak girilir).</li><li><strong>Yan değer</strong>--HRMA 45 dereceye eşit veya daha büyük ve 90 dereceden düşük olduğunda ve<strong>İleri</strong>yatay faktör anahtar sözcüğü belirtildiğinde HF’yi belirler.</li><li><strong>Tablo adı</strong>--HF'yi tanımlayan tablonun adını belirtir.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "Her hücredeki yatay yönü tanımlayan bir raster.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "Rasterdaki değerlerin 0 ile 360 arasında değişen, 0 derece kuzeyde veya ekranın üstünde bulunan bir tam sayı olması ve saat yönünde artması gerekir. Düz alanlara -1 değeri verilmelidir. Her bir konumdaki değerler, bir hücreden komşusu olan hücrelere geçerken ortaya çıkan yatay maliyeti belirlemek için <strong>Yatay faktör</strong> ile birlikte kullanılır.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "Birikmiş maliyet değerlerinin aşamadığı eşik değeri. Birikmiş maliyet mesafesi bu değeri aştığında, hücre konumu için çıktı değeri NoData olacaktır. Maksimum mesafe, toplam maliyet mesafelerinin hesaplanma yayılımını belirler. Varsayılan mesafe, çıktı rasterının yayılımına kadardır.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Maliyet değerlerine uygulanacak bir çarpan.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Bu parametre bir seyahat modunun veya bir kaynaktaki büyüklüğün kontrolünü sağlar. Çarpan ne kadar büyükse, her bir hücreye geçmenin maliyeti o kadar artar.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Değerler sıfırdan büyük olmalıdır. Varsayılan değer 1'dir.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Path-Distance_Source-Raster_tag0@@": "Kaynak konumlar için gerekli girdi rasterı.",
	"@@Path-Distance_Source-Raster_tag1@@": "Bu, her çıktı hücresi konumu için en az birikmiş maliyet mesafesinin hesaplandığı hücreleri veya konumları tanımlayan bir rasterdır.",
	"@@Path-Distance_Source-Raster_tag2@@": "Bu, bir tamsayı veya kayan noktalı tür olabilir.",
	"@@Path-Distance_Start-Cost_tag0@@": "Maliyet hesaplamalarının başlatılacağı başlangıç maliyeti. Bu parametre, bir kaynakla ilişkili sabit maliyetin belirtilmesi için kullanılır. 0 maliyetiyle başlamak yerine, maliyet algoritması belirtilen değerle başlar.",
	"@@Path-Distance_Start-Cost_tag1@@": "Değer sıfır veya daha büyük olmalıdır. Varsayılan değer 0'dir.",
	"@@Path-Distance_Surface-Raster_tag0@@": "Her hücre konumundaki yükselti değerlerini tanımlayan bir raster.",
	"@@Path-Distance_Surface-Raster_tag1@@": "Değerler, hücreler arasında geçerken kapsanan gerçek yüzey mesafesini hesaplamak için kullanılır.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Kaynak direnç oranını ve kaynak başlangıç maliyetini uygulama sırasında yolcunun yönünü tanımlar.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>Kaynaktan</strong>--Kaynak direnç oranı ve kaynak başlangıç maliyetinin uygulaması girdi kaynağından başlayarak kaynak olmayan hücrelere taşınır. Varsayılan değerdir.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>Kaynağa</strong>--Kaynak direnç oranı ve kaynak başlangıç maliyetinin uygulaması kaynak olmayan hücrelerden başlayarak yeniden girdi kaynağına taşınır.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Tüm kaynaklara uygulanacak <strong>Kaynaktan</strong> veya <strong>Kaynağa</strong> anahtar sözcüğünü belirtin veya <strong>Kaynak Raster</strong>'da her kaynağın seyahat yönünü tanımlayan anahtar sözcükleri içeren bir alan belirtin. Bu alanda ${FROM_SOURCE} veya ${TO_SOURCE} dizisi bulunmalıdır.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Dikey maliyet faktörü ve dikey bağıl hareket açısı (VRMA) arasındaki ilişkiyi tanımlar.</p><p>Tanımlanmış bir dikey faktör grafiğini tanımlayan değiştiricili birkaç faktör bulunur. Ek olarak, özel bir grafik oluşturmak için bir tablo kullanılabilir. Grafikler, komşu bir hücreye taşınmanın toplam maliyetinin hesaplanmasında kullanılan dikey faktörü tanımlamak için kullanılır.</p><p>Aşağıdaki açıklamalarda, iki kısaltma kullanılmıştır: VF ve VRMA. VF, bir hücreden diğerine geçerken karşılaşılan dikey zorluğu tanımlayan dikey faktördür. VRMA, FROM (nereden) veya işleme, hücre ve TO (nereye) hücresi arasındaki eğim açısını tanımlayan dikey bağıl hareket açısıdır.</p><p><strong>Dikey faktör</strong>türleri şunları içerir:</p><ul><li><strong>İkili</strong>--VRMA'nın düşük kesme açısından daha büyük ve yüksek kesme açısından daha küçük olması durumunda, VF’nin sıfır faktörüyle ilişkili değere ayarlandığını belirtir; aksi takdirde sonsuzdur.</li><li><strong>Lineer</strong>--VF'nin VRMA'nın lineer bir fonksiyon olduğunu belirtir.</li><li><strong>Simetrik Lineer</strong>--VF'nin, VRMA'nın sırasıyla VRMA'nın negatif veya pozitif tarafında lineer bir fonksiyon olduğunu ve iki lineer fonksiyonun VF (y) eksenine göre simetrik olduğunu belirtir.</li><li><strong>Ters Lineer</strong>--VF'nin VRMA'nın ters doğrusal bir fonksiyonu olduğunu gösterir.</li><li><strong>Simetrik Ters Lineer</strong>--VF'nin, sırasıyla VRMA'nın negatif veya pozitif tarafında VRMA'nın ters doğrusal bir fonksiyonu olduğunu ve iki doğrusal fonksiyonun VF (y) eksenine göre simetrik olduğunu belirtir.</li><li><strong>Cos</strong>--VF'yi VRMA'nın kosinüs temelli fonksiyonu olarak tanımlar.</li><li><strong>Sek</strong>--VF'yi VRMA'nın sekant temelli fonksiyonu olarak tanımlar.</li><li><strong>Kos-Sek</strong>--VF'nin, VRMA negatifken VRMA'nın kosinüs temelli fonksiyonu ve VRMA negatif olmadığında VRMA'nın sekant temelli fonksiyonu olduğunu belirtir.</li><li><strong>Sek-Kos</strong>--VF'nin, VRMA negatifken VRMA'nın kosinüs temelli fonksiyonu ve VRMA negatif olmadığında VRMA'nın sekant temelli fonksiyonu olduğunu belirtir.</li><li><strong>Tablo</strong>--VF'leri belirlemek için kullanılan dikey faktör grafiğini tanımlamak için bir tablo dosyasının kullanılacağını belirtir.</li></ul><p>Dikey anahtar sözcük değiştiricileri aşağıdakileri içerir:</p><ul><li><strong>Sıfır faktörü</strong>--VRMA sıfır olduğunda kullanılacak dikey faktörü belirler. Bu faktör, belirtilen fonksiyonun y-kesimini konumlandırır. Tanım olarak, sıfır faktörü, trigonometrik dikey fonksiyonların hiçbirine uygulanamaz (KOS, SEK, KOS-SEK veya SEK-KOS). Y-kesimi bu fonksiyonlarla tanımlanır.</li><li><strong>Düşük Kesim açısı</strong>--VF'nin altında kalanların sonsuz olarak ayarlanacağı VRMA açısını tanımlar.</li><li><strong>Yüksek Kesim açısı</strong>--VF'nin üstünde kalanların sonsuz olarak ayarlanacağı VRMA açısını tanımlar.</li><li><strong>Eğim</strong>--<strong>Lineer</strong>ve<strong>Ters Lineer</strong>dikey faktör anahtar sözcükleriyle kullanılan düz çizginin eğimini belirler. Eğim, uzunluk boyunca yükselmenin bir kesri olarak belirtilir (örneğin, yüzde 45 eğim 1/45'tir, bu da 0,02222 olarak girilir).</li><li><strong>Tablo adı</strong>--VF'yi tanımlayan tablonun adını belirtir.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Yatay maliyet faktörü ve dikey bağıl hareket açısı (VRMA) arasındaki ilişkiyi tanımlar.",
	"@@Path-Distance_Vertical-Raster_tag1@@": "Bu değerler, bir hücreden diğerine geçerken oluşan dikey faktörü tanımlamak için kullanılan eğimi hesaplamak için kullanılır.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Bu parametre, biriken maliyet arttıkça maliyetlerin üstesinden gelme çabasındaki artışı simüle eder. Yolcunun yorgunluğunu modellemek için kullanılır. Bir hücreye ulaşmak için artan biriken maliyet, direnç oranı ile çarpılır ve bir sonraki hücreye geçme maliyetine eklenir.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Bir hücre içinde hareket etmenin görünür maliyetini hesaplamak için kullanılan bir bileşik faiz oranı formülünün değiştirilmiş bir versiyonudur. Direnç oranının değeri arttıkça, daha sonra ziyaret edilen hücrelerin maliyetini de arttırır. Direnç oranı arttıkça, bir sonraki hücreye ulaşma maliyeti de artar, çünkü sonraki her hareket için birleştirilir. Direnç oranı bileşik bir orana benzer olduğu ve genel olarak biriken maliyet değerleri çok büyük olduğu için, biriken maliyet değerlerine bağlı olarak 0,005 veya daha düşük direnç oranları önerilir.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Bir kaynak için yolcunun maliyet kapasitesini tanımlar. Maliyet hesaplamaları, belirtilen kapasiteye ulaşılana kadar her kaynak için devam eder.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "Her bir hücre içinde planimetrik olarak hareket etmenin maliyetini veya empedansını tanımlayan gerekli bir girdi rasterı. Her hücre konumundaki değer, hücre içinde hareket etmek için birim başına maliyet mesafesini temsil eder. Her hücre konumu değeri hücre çözünürlüğü ile çarpılırken, aynı zamanda hücre içinden geçmenin toplam maliyetini elde etmek için çapraz (diyagonal) hareketi dengeler.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "<strong>Maliyet Rasterı</strong>’nın değerleri tamsayı veya kayan nokta olabilir, ancak negatif veya sıfır olamaz.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Yatay maliyet faktörü ve yatay bağıl hareket açısı (HRMA) arasındaki ilişkiyi tanımlar.</p><p>Tanımlanmış bir dikey faktör grafiğini tanımlayan değiştiricili birkaç faktör bulunur. Ek olarak, özel bir grafik oluşturmak için bir tablo kullanılabilir. Grafikler, komşu bir hücreye taşınmanın toplam maliyetinin hesaplanmasında kullanılan dikey faktörü tanımlamak için kullanılır.</p><p>Aşağıdaki açıklamalarda, iki kısaltma kullanılmıştır: HF ve HRMA. HF, bir hücreden diğerine geçerken karşılaşılan yatay zorluğu tanımlayan yatay faktördür. HRMA, bir hücreden yatay yön ile hareket yönü arasındaki açıyı belirleyen yatay bağıl hareket açısıdır.</p><p><strong>Yatay faktör</strong>türler şunları içerir:</p><ul><li><strong>İkili</strong>--HRMA'nın kesme açısından küçük olması durumunda, HF’nin sıfır faktörüyle ilişkili değere ayarlandığını belirtir; aksi takdirde sonsuzdur.</li><li><strong>İleri</strong>--Sadece ileri harekete izin verildiğini belirler. HRMA, 0’a eşit veya büyük ve 90 dereceden küçük olmalıdır (0 &lt;= HRMA &lt; 90). HRMA 0'dan büyük ve 45 dereceden düşükse, hücrenin HF'si sıfır faktörüyle ilişkili değere ayarlanır. HRMA, 45 dereceden büyük veya eşitse, yan değer değiştirici değeri kullanılır. 90 dereceye eşit veya daha büyük herhangi bir HRMA değeri için HF sonsuz olarak ayarlanır.</li><li><strong>Lineer</strong>--HF'nin HRMA'nın lineer bir fonksiyon olduğunu belirtir.</li><li><strong>Ters Lineer</strong>--HF'nin HRMA'nın ters doğrusal bir fonksiyonu olduğunu belirtir.</li><li><strong>Tablo</strong>--HF'leri belirlemek için kullanılan yatay faktör grafiğini tanımlamak için bir tablo dosyasının kullanılacağını belirtir.</li></ul><p>Yatay faktör değiştiricileri aşağıdakileri içerir:</p><ul><li><strong>Sıfır faktörü</strong>--HRMA 0 olduğu zaman kullanılan yatay faktördür. Bu faktör, y-kesimini yatay faktör fonksiyonlarından herhangi biri için konumlandırır.</li><li><strong>Kesme açısı</strong>--HF'nin ötesinde kalanlar için sonsuz olarak ayarlanacağı HRMA açısını tanımlar.</li><li><strong>Eğim</strong>--<strong>Lineer</strong>ve<strong>Ters Lineer</strong>yatay faktör anahtar sözcükleriyle birlikte kullanılan düz çizginin eğimini belirler. Eğim, uzunluk boyunca yükselmenin bir kesri olarak belirtilir (örneğin, yüzde 45 eğim 1/45'tir, bu da 0,02222 olarak girilir).</li><li><strong>Yan değer</strong>--HRMA 45 dereceye eşit veya daha büyük ve 90 dereceden düşük olduğunda ve<strong>İleri</strong>yatay faktör anahtar sözcüğü belirtildiğinde HF’yi belirler.</li><li><strong>Tablo adı</strong>--HF'yi tanımlayan tablonun adını belirtir.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "Her hücredeki yatay yönü tanımlayan bir raster.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "Rasterdaki değerlerin 0 ile 360 arasında değişen, 0 derece kuzeyde veya ekranın üstünde bulunan bir tam sayı olması ve saat yönünde artması gerekir. Düz alanlara -1 değeri verilmelidir. Her bir konumdaki değerler, bir hücreden komşusu olan hücrelere geçerken ortaya çıkan yatay maliyeti belirlemek için <strong>Yatay faktör</strong> ile birlikte kullanılır.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "Birikmiş maliyet değerlerinin aşamadığı eşik değeri. Birikmiş maliyet mesafesi bu değeri aştığında, hücre konumu için çıktı değeri NoData olacaktır. Maksimum mesafe, toplam maliyet mesafelerinin hesaplanma yayılımını belirler. Varsayılan mesafe, çıktı rasterının yayılımına kadardır.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Maliyet değerlerine uygulanacak bir çarpan.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Bu parametre bir seyahat modunun veya bir kaynaktaki büyüklüğün kontrolünü sağlar. Çarpan ne kadar büyükse, her bir hücreye geçmenin maliyeti o kadar artar.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Değerler sıfırdan büyük olmalıdır. Varsayılan değer 1'dir.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "Bu alan, kaynak konumlarına değer atamak için kullanılır. Bir tamsayı türü olmalıdır. <strong>Değer Rasterı</strong> ayarlanmışsa, bu girdideki değerler <strong>Kaynak Alan</strong> için herhangi bir değere göre öncelikli olacaktır.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "Kaynak konumlar için gerekli girdi rasterı.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Bu, her çıktı hücresi konumu için en az birikmiş maliyet mesafesinin hesaplandığı hücreleri veya konumları tanımlayan bir rasterdır.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Bu, bir tamsayı veya kayan noktalı tür olabilir.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "Maliyet hesaplamalarının başlatılacağı başlangıç maliyeti. Bu parametre, bir kaynakla ilişkili sabit maliyetin belirtilmesi için kullanılır. 0 maliyetiyle başlamak yerine, maliyet algoritması belirtilen değerle başlar.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "Değer sıfır veya daha büyük olmalıdır. Varsayılan değer 0'dir.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "Her hücre konumundaki yükselti değerlerini tanımlayan bir raster.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "Değerler, hücreler arasında geçerken kapsanan gerçek yüzey mesafesini hesaplamak için kullanılır.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Kaynak direnç oranını ve kaynak başlangıç maliyetini uygulama sırasında yolcunun yönünü tanımlar.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>Kaynaktan</strong>--Kaynak direnç oranı ve kaynak başlangıç maliyetinin uygulaması girdi kaynağından başlayarak kaynak olmayan hücrelere taşınır. Varsayılan değerdir.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>Kaynağa</strong>--Kaynak direnç oranı ve kaynak başlangıç maliyetinin uygulaması kaynak olmayan hücrelerden başlayarak yeniden girdi kaynağına taşınır.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Tüm kaynaklara uygulanacak <strong>Kaynaktan</strong> veya <strong>Kaynağa</strong> anahtar sözcüğünü belirtin veya <strong>Kaynak Raster</strong>'da her kaynağın seyahat yönünü tanımlayan anahtar sözcükleri içeren bir alan belirtin. Bu alanda ${FROM_SOURCE} veya ${TO_SOURCE} dizisi bulunmalıdır.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "Her bir girdi kaynak konumu için kullanılacak bölge değerlerini tanımlayan girdi tamsayı rasterı. Her kaynak konum hücresi için <strong>Değer Rasterı</strong> ile tanımlanan değer, hesaplama için kaynak konuma tahsis edilen tüm hücrelere atanır. <strong>Değer Rasterı</strong> herhangi bir <strong>Kaynak Alan</strong> ayarına göre öncelikli olacaktır.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Dikey maliyet faktörü ve dikey bağıl hareket açısı (VRMA) arasındaki ilişkiyi tanımlar.</p><p>Tanımlanmış bir dikey faktör grafiğini tanımlayan değiştiricili birkaç faktör bulunur. Ek olarak, özel bir grafik oluşturmak için bir tablo kullanılabilir. Grafikler, komşu bir hücreye taşınmanın toplam maliyetinin hesaplanmasında kullanılan dikey faktörü tanımlamak için kullanılır.</p><p>Aşağıdaki açıklamalarda, iki kısaltma kullanılmıştır: VF ve VRMA. VF, bir hücreden diğerine geçerken karşılaşılan dikey zorluğu tanımlayan dikey faktördür. VRMA, FROM (nereden) veya işleme, hücre ve TO (nereye) hücresi arasındaki eğim açısını tanımlayan dikey bağıl hareket açısıdır.</p><p><strong>Dikey faktör</strong>türleri şunları içerir:</p><ul><li><strong>İkili</strong>--VRMA'nın düşük kesme açısından daha büyük ve yüksek kesme açısından daha küçük olması durumunda, VF’nin sıfır faktörüyle ilişkili değere ayarlandığını belirtir; aksi takdirde sonsuzdur.</li><li><strong>Lineer</strong>--VF'nin VRMA'nın lineer bir fonksiyon olduğunu belirtir.</li><li><strong>Simetrik Lineer</strong>--VF'nin, VRMA'nın sırasıyla VRMA'nın negatif veya pozitif tarafında lineer bir fonksiyon olduğunu ve iki lineer fonksiyonun VF (y) eksenine göre simetrik olduğunu belirtir.</li><li><strong>Ters Lineer</strong>--VF'nin VRMA'nın ters doğrusal bir fonksiyonu olduğunu gösterir.</li><li><strong>Simetrik Ters Lineer</strong>--VF'nin, sırasıyla VRMA'nın negatif veya pozitif tarafında VRMA'nın ters doğrusal bir fonksiyonu olduğunu ve iki doğrusal fonksiyonun VF (y) eksenine göre simetrik olduğunu belirtir.</li><li><strong>Cos</strong>--VF'yi VRMA'nın kosinüs temelli fonksiyonu olarak tanımlar.</li><li><strong>Sek</strong>--VF'yi VRMA'nın sekant temelli fonksiyonu olarak tanımlar.</li><li><strong>Kos-Sek</strong>--VF'nin, VRMA negatifken VRMA'nın kosinüs temelli fonksiyonu ve VRMA negatif olmadığında VRMA'nın sekant temelli fonksiyonu olduğunu belirtir.</li><li><strong>Sek-Kos</strong>--VF'nin, VRMA negatifken VRMA'nın kosinüs temelli fonksiyonu ve VRMA negatif olmadığında VRMA'nın sekant temelli fonksiyonu olduğunu belirtir.</li><li><strong>Tablo</strong>--VF'leri belirlemek için kullanılan dikey faktör grafiğini tanımlamak için bir tablo dosyasının kullanılacağını belirtir.</li></ul><p>Dikey anahtar sözcük değiştiricileri aşağıdakileri içerir:</p><ul><li><strong>Sıfır faktörü</strong>--VRMA sıfır olduğunda kullanılacak dikey faktörü belirler. Bu faktör, belirtilen fonksiyonun y-kesimini konumlandırır. Tanım olarak, sıfır faktörü, trigonometrik dikey fonksiyonların hiçbirine uygulanamaz (KOS, SEK, KOS-SEK veya SEK-KOS). Y-kesimi bu fonksiyonlarla tanımlanır.</li><li><strong>Düşük Kesim açısı</strong>--VF'nin altında kalanların sonsuz olarak ayarlanacağı VRMA açısını tanımlar.</li><li><strong>Yüksek Kesim açısı</strong>--VF'nin üstünde kalanların sonsuz olarak ayarlanacağı VRMA açısını tanımlar.</li><li><strong>Eğim</strong>--<strong>Lineer</strong>ve<strong>Ters Lineer</strong>dikey faktör anahtar sözcükleriyle kullanılan düz çizginin eğimini belirler. Eğim, uzunluk boyunca yükselmenin bir kesri olarak belirtilir (örneğin, yüzde 45 eğim 1/45'tir, bu da 0,02222 olarak girilir).</li><li><strong>Tablo adı</strong>--VF'yi tanımlayan tablonun adını belirtir.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Yatay maliyet faktörü ve dikey bağıl hareket açısı (VRMA) arasındaki ilişkiyi tanımlar.",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "Bu değerler, bir hücreden diğerine geçerken oluşan dikey faktörü tanımlamak için kullanılan eğimi hesaplamak için kullanılır.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Bu parametre, biriken maliyet arttıkça maliyetlerin üstesinden gelme çabasındaki artışı simüle eder. Yolcunun yorgunluğunu modellemek için kullanılır. Bir hücreye ulaşmak için artan biriken maliyet, direnç oranı ile çarpılır ve bir sonraki hücreye geçme maliyetine eklenir.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Bir hücre içinde hareket etmenin görünür maliyetini hesaplamak için kullanılan bir bileşik faiz oranı formülünün değiştirilmiş bir versiyonudur. Direnç oranının değeri arttıkça, daha sonra ziyaret edilen hücrelerin maliyetini de arttırır. Direnç oranı arttıkça, bir sonraki hücreye ulaşma maliyeti de artar, çünkü sonraki her hareket için birleştirilir. Direnç oranı bileşik bir orana benzer olduğu ve genel olarak biriken maliyet değerleri çok büyük olduğu için, biriken maliyet değerlerine bağlı olarak 0,005 veya daha düşük direnç oranları önerilir.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Bir kaynak için yolcunun maliyet kapasitesini tanımlar. Maliyet hesaplamaları, belirtilen kapasiteye ulaşılana kadar her kaynak için devam eder.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "Her bir hücre içinde planimetrik olarak hareket etmenin maliyetini veya empedansını tanımlayan gerekli bir girdi rasterı. Her hücre konumundaki değer, hücre içinde hareket etmek için birim başına maliyet mesafesini temsil eder. Her hücre konumu değeri hücre çözünürlüğü ile çarpılırken, aynı zamanda hücre içinden geçmenin toplam maliyetini elde etmek için çapraz (diyagonal) hareketi dengeler.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "<strong>Maliyet Rasterı</strong>’nın değerleri tamsayı veya kayan nokta olabilir, ancak negatif veya sıfır olamaz.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Yatay maliyet faktörü ve yatay bağıl hareket açısı (HRMA) arasındaki ilişkiyi tanımlar.</p><p>Tanımlanmış bir dikey faktör grafiğini tanımlayan değiştiricili birkaç faktör bulunur. Ek olarak, özel bir grafik oluşturmak için bir tablo kullanılabilir. Grafikler, komşu bir hücreye taşınmanın toplam maliyetinin hesaplanmasında kullanılan dikey faktörü tanımlamak için kullanılır.</p><p>Aşağıdaki açıklamalarda, iki kısaltma kullanılmıştır: HF ve HRMA. HF, bir hücreden diğerine geçerken karşılaşılan yatay zorluğu tanımlayan yatay faktördür. HRMA, bir hücreden yatay yön ile hareket yönü arasındaki açıyı belirleyen yatay bağıl hareket açısıdır.</p><p><strong>Yatay faktör</strong>türler şunları içerir:</p><ul><li><strong>İkili</strong>--HRMA'nın kesme açısından küçük olması durumunda, HF’nin sıfır faktörüyle ilişkili değere ayarlandığını belirtir; aksi takdirde sonsuzdur.</li><li><strong>İleri</strong>--Sadece ileri harekete izin verildiğini belirler. HRMA, 0’a eşit veya büyük ve 90 dereceden küçük olmalıdır (0 &lt;= HRMA &lt; 90). HRMA 0'dan büyük ve 45 dereceden düşükse, hücrenin HF'si sıfır faktörüyle ilişkili değere ayarlanır. HRMA, 45 dereceden büyük veya eşitse, yan değer değiştirici değeri kullanılır. 90 dereceye eşit veya daha büyük herhangi bir HRMA değeri için HF sonsuz olarak ayarlanır.</li><li><strong>Lineer</strong>--HF'nin HRMA'nın lineer bir fonksiyon olduğunu belirtir.</li><li><strong>Ters Lineer</strong>--HF'nin HRMA'nın ters doğrusal bir fonksiyonu olduğunu belirtir.</li><li><strong>Tablo</strong>--HF'leri belirlemek için kullanılan yatay faktör grafiğini tanımlamak için bir tablo dosyasının kullanılacağını belirtir.</li></ul><p>Yatay faktör değiştiricileri aşağıdakileri içerir:</p><ul><li><strong>Sıfır faktörü</strong>--HRMA 0 olduğu zaman kullanılan yatay faktördür. Bu faktör, y-kesimini yatay faktör fonksiyonlarından herhangi biri için konumlandırır.</li><li><strong>Kesme açısı</strong>--HF'nin ötesinde kalanlar için sonsuz olarak ayarlanacağı HRMA açısını tanımlar.</li><li><strong>Eğim</strong>--<strong>Lineer</strong>ve<strong>Ters Lineer</strong>yatay faktör anahtar sözcükleriyle birlikte kullanılan düz çizginin eğimini belirler. Eğim, uzunluk boyunca yükselmenin bir kesri olarak belirtilir (örneğin, yüzde 45 eğim 1/45'tir, bu da 0,02222 olarak girilir).</li><li><strong>Yan değer</strong>--HRMA 45 dereceye eşit veya daha büyük ve 90 dereceden düşük olduğunda ve<strong>İleri</strong>yatay faktör anahtar sözcüğü belirtildiğinde HF’yi belirler.</li><li><strong>Tablo adı</strong>--HF'yi tanımlayan tablonun adını belirtir.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "Her hücredeki yatay yönü tanımlayan bir raster.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "Rasterdaki değerlerin 0 ile 360 arasında değişen, 0 derece kuzeyde veya ekranın üstünde bulunan bir tam sayı olması ve saat yönünde artması gerekir. Düz alanlara -1 değeri verilmelidir. Her bir konumdaki değerler, bir hücreden komşusu olan hücrelere geçerken ortaya çıkan yatay maliyeti belirlemek için <strong>Yatay faktör</strong> ile birlikte kullanılır.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "Birikmiş maliyet değerlerinin aşamadığı eşik değeri. Birikmiş maliyet mesafesi bu değeri aştığında, hücre konumu için çıktı değeri NoData olacaktır. Maksimum mesafe, toplam maliyet mesafelerinin hesaplanma yayılımını belirler. Varsayılan mesafe, çıktı rasterının yayılımına kadardır.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Maliyet değerlerine uygulanacak bir çarpan.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Bu parametre bir seyahat modunun veya bir kaynaktaki büyüklüğün kontrolünü sağlar. Çarpan ne kadar büyükse, her bir hücreye geçmenin maliyeti o kadar artar.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Değerler sıfırdan büyük olmalıdır. Varsayılan değer 1'dir.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "Kaynak konumlar için gerekli girdi rasterı.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Bu, her çıktı hücresi konumu için en az birikmiş maliyet mesafesinin hesaplandığı hücreleri veya konumları tanımlayan bir rasterdır.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Bu, bir tamsayı veya kayan noktalı tür olabilir.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "Maliyet hesaplamalarının başlatılacağı başlangıç maliyeti. Bu parametre, bir kaynakla ilişkili sabit maliyetin belirtilmesi için kullanılır. 0 maliyetiyle başlamak yerine, maliyet algoritması belirtilen değerle başlar.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "Değer sıfır veya daha büyük olmalıdır. Varsayılan değer 0'dir.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "Her hücre konumundaki yükselti değerlerini tanımlayan bir raster.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "Değerler, hücreler arasında geçerken kapsanan gerçek yüzey mesafesini hesaplamak için kullanılır.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Kaynak direnç oranını ve kaynak başlangıç maliyetini uygulama sırasında yolcunun yönünü tanımlar.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>Kaynaktan</strong>--Kaynak direnç oranı ve kaynak başlangıç maliyetinin uygulaması girdi kaynağından başlayarak kaynak olmayan hücrelere taşınır. Varsayılan değerdir.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>Kaynağa</strong>--Kaynak direnç oranı ve kaynak başlangıç maliyetinin uygulaması kaynak olmayan hücrelerden başlayarak yeniden girdi kaynağına taşınır.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Tüm kaynaklara uygulanacak <strong>Kaynaktan</strong> veya <strong>Kaynağa</strong> anahtar sözcüğünü belirtin veya <strong>Kaynak Raster</strong>'da her kaynağın seyahat yönünü tanımlayan anahtar sözcükleri içeren bir alan belirtin. Bu alanda ${FROM_SOURCE} veya ${TO_SOURCE} dizisi bulunmalıdır.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Dikey maliyet faktörü ve dikey bağıl hareket açısı (VRMA) arasındaki ilişkiyi tanımlar.</p><p>Tanımlanmış bir dikey faktör grafiğini tanımlayan değiştiricili birkaç faktör bulunur. Ek olarak, özel bir grafik oluşturmak için bir tablo kullanılabilir. Grafikler, komşu bir hücreye taşınmanın toplam maliyetinin hesaplanmasında kullanılan dikey faktörü tanımlamak için kullanılır.</p><p>Aşağıdaki açıklamalarda, iki kısaltma kullanılmıştır: VF ve VRMA. VF, bir hücreden diğerine geçerken karşılaşılan dikey zorluğu tanımlayan dikey faktördür. VRMA, FROM (nereden) veya işleme, hücre ve TO (nereye) hücresi arasındaki eğim açısını tanımlayan dikey bağıl hareket açısıdır.</p><p><strong>Dikey faktör</strong>türleri şunları içerir:</p><ul><li><strong>İkili</strong>--VRMA'nın düşük kesme açısından daha büyük ve yüksek kesme açısından daha küçük olması durumunda, VF’nin sıfır faktörüyle ilişkili değere ayarlandığını belirtir; aksi takdirde sonsuzdur.</li><li><strong>Lineer</strong>--VF'nin VRMA'nın lineer bir fonksiyon olduğunu belirtir.</li><li><strong>Simetrik Lineer</strong>--VF'nin, VRMA'nın sırasıyla VRMA'nın negatif veya pozitif tarafında lineer bir fonksiyon olduğunu ve iki lineer fonksiyonun VF (y) eksenine göre simetrik olduğunu belirtir.</li><li><strong>Ters Lineer</strong>--VF'nin VRMA'nın ters doğrusal bir fonksiyonu olduğunu gösterir.</li><li><strong>Simetrik Ters Lineer</strong>--VF'nin, sırasıyla VRMA'nın negatif veya pozitif tarafında VRMA'nın ters doğrusal bir fonksiyonu olduğunu ve iki doğrusal fonksiyonun VF (y) eksenine göre simetrik olduğunu belirtir.</li><li><strong>Cos</strong>--VF'yi VRMA'nın kosinüs temelli fonksiyonu olarak tanımlar.</li><li><strong>Sek</strong>--VF'yi VRMA'nın sekant temelli fonksiyonu olarak tanımlar.</li><li><strong>Kos-Sek</strong>--VF'nin, VRMA negatifken VRMA'nın kosinüs temelli fonksiyonu ve VRMA negatif olmadığında VRMA'nın sekant temelli fonksiyonu olduğunu belirtir.</li><li><strong>Sek-Kos</strong>--VF'nin, VRMA negatifken VRMA'nın kosinüs temelli fonksiyonu ve VRMA negatif olmadığında VRMA'nın sekant temelli fonksiyonu olduğunu belirtir.</li><li><strong>Tablo</strong>--VF'leri belirlemek için kullanılan dikey faktör grafiğini tanımlamak için bir tablo dosyasının kullanılacağını belirtir.</li></ul><p>Dikey anahtar sözcük değiştiricileri aşağıdakileri içerir:</p><ul><li><strong>Sıfır faktörü</strong>--VRMA sıfır olduğunda kullanılacak dikey faktörü belirler. Bu faktör, belirtilen fonksiyonun y-kesimini konumlandırır. Tanım olarak, sıfır faktörü, trigonometrik dikey fonksiyonların hiçbirine uygulanamaz (KOS, SEK, KOS-SEK veya SEK-KOS). Y-kesimi bu fonksiyonlarla tanımlanır.</li><li><strong>Düşük Kesim açısı</strong>--VF'nin altında kalanların sonsuz olarak ayarlanacağı VRMA açısını tanımlar.</li><li><strong>Yüksek Kesim açısı</strong>--VF'nin üstünde kalanların sonsuz olarak ayarlanacağı VRMA açısını tanımlar.</li><li><strong>Eğim</strong>--<strong>Lineer</strong>ve<strong>Ters Lineer</strong>dikey faktör anahtar sözcükleriyle kullanılan düz çizginin eğimini belirler. Eğim, uzunluk boyunca yükselmenin bir kesri olarak belirtilir (örneğin, yüzde 45 eğim 1/45'tir, bu da 0,02222 olarak girilir).</li><li><strong>Tablo adı</strong>--VF'yi tanımlayan tablonun adını belirtir.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Yatay maliyet faktörü ve dikey bağıl hareket açısı (VRMA) arasındaki ilişkiyi tanımlar.",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "Bu değerler, bir hücreden diğerine geçerken oluşan dikey faktörü tanımlamak için kullanılan eğimi hesaplamak için kullanılır.",
	"@@Plus_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Plus_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Plus_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Plus_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Plus_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Plus_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Plus_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Plus_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Plus_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Plus_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Plus_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Plus_Raster_tag0@@": "Değerleri eklenecek olan girdi.",
	"@@Plus_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Plus_Raster2_tag0@@": "Değerleri ilk girdiye eklenecek olan girdi.",
	"@@Plus_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Local_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Local_Cellsize-Type_tag1@@": "İlki -- Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Local_Cellsize-Type_tag2@@": "Sonuncusu -- Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Local_Cellsize-Type_tag3@@": "Maksimumu -- Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan budur.",
	"@@Local_Cellsize-Type_tag4@@": "Ortalaması -- Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Local_Cellsize-Type_tag5@@": "Minimumu -- Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Local_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Local_Extent-Type_tag1@@": "İlki -- İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Local_Extent-Type_tag2@@": "Kesişimi -- İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan budur.",
	"@@Local_Extent-Type_tag3@@": "Sonuncusu -- İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Local_Extent-Type_tag4@@": "Birleşimi -- İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Local_Raster_tag0@@": "Değerleri eklenecek olan girdi.",
	"@@Local_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Local_Raster2_tag0@@": "Değerleri ilk girdiye eklenecek olan girdi.",
	"@@Local_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Local_False-Raster_tag0@@": "Koşul false olduğunda, değerleri çıktı piksel değerleri olarak kullanılacak olan girdi. Bir tamsayı, kayan nokta raster veya sabit bir değer olabilir.",
	"@@Local_True-Raster_tag0@@": "Koşul true olduğunda, değerleri çıktı piksel değerleri olarak kullanılacak olan girdi. Bir tamsayı, kayan nokta raster veya sabit bir değer olabilir.",
	"@@Power_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Power_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Power_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Power_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Power_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Power_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Power_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Power_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Power_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Power_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Power_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Power_Raster_tag0@@": "<strong>Raster2</strong> ile tanımlanan kuvvete yükseltilecek girdi değerleri.",
	"@@Power_Raster_tag3@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Power_Raster2_tag0@@": "<strong>Raster</strong> değerlerinin yükseltileceği kuvveti tanımlayan girdi.",
	"@@Power_Raster2_tag3@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "Gerçekleştirilecek kalibrasyon türü.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Beta-nought: Bu fonksiyon, eğik mesafedeki birim alan başına radar yansıtırlığını getirir. Bu varsayılan kalibrasyon türüdür.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Sigma-nought: Bu fonksiyon, zemin aralığındaki birim alan başına radar yansıtırlığını getirir. Sonuçlar, yaygın olarak 0,0 ile 1,0 arasında olan 32 bit kayan noktalı değerlerdir. Bu seçenek seçili olduğunda, hiçbir veri kesme işlemi gerçekleştirilmez.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gama: Bu fonksiyon, ölçüm yönüne dik düzlemde birim alan başına radar yansıtırlığını getirir.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Yok",
	"@@Radar-Calibration_Raster_tag0@@": "Girdi rasterı.",
	"@@RasterInfo_Raster-Info_tag0@@": "Şablon olarak kullanmak için bir raster veri kümesi seçin",
	"@@RasterInfo_Raster_tag0@@": "Girdi rasterı.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "<strong>Bölgesel Öznitelik Tablosu</strong>’nda her alanın virgülle ayrıldığı alan listesi. Her alandaki değerler, çıktı rasterında bir bantla temsil edilir.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "Bir rasterdaki çıktı bantlarının yeniden haritalamadan önceki başlangıç piksel değeri.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Bir piksel bir bölgeye düşmüyorsa, arka plan değeri olarak kalır.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "Gerekli girdi rasterı.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "Girdi, tek bantlı bir raster olmalıdır. Çok bantlı bir raster kullanıldığında, yalnızca ilk bant kullanılır.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "<strong>Bölgesel Öznitelik Tablosu</strong>’na uygulanan isteğe bağlı ek sorgu.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "Yukarıdaki tabloyu örnek olarak kullanıyorsanız, sorgu ${Variable1 = 'bare earth'} olacaktır.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "Bir yerel detay sınıfına giden yol, tabloya giden yol, bir detay servisi katmanının URL'si veya bir JSON dizisi olarak belirtilen bölgesel öznitelikler.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "Bu JSON'da, bölge kimliklerinden bir tamsayı dizisine haritalama koleksiyonu olarak tanımlanır. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "Bölge kimliği değerlerini içeren alan adı.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "Her pikselin konumla ilişkili bölge kimliğini içerdiği isteğe bağlı tek bantlı raster. Bölge Kimliği, bölgeye özgü alım için bölgeye ait öznitelik tablosundaki satırları aramak için kullanılır.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Yalnızca özniteliği içe aktarmak istiyorsanız bu parametreyi belirtilmeden bırakın.",
	"@@Rasterize-Features_Field_tag0@@": "Her detayı tanımlamak için kullanılacak alanı seçin.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Raster biçimine dönüştürülecek detay sınıfını seçin.",
	"@@Rasterize-Features_Raster_tag0@@": "Detay dönüştürme için hücre boyutunu ve yayılımını tanımlamada kullanılacak bir raster seçin.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Örtüşen detayların nasıl yönetileceğini belirleyin:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>İlk</strong>--Çakışan alanlara, listelenen ilk veri kümesinden bir değer atanır.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Son</strong>--Çakışan alanlara, listelenen son veri kümesinden bir değer atanır.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>En Küçük</strong>--Çakışan alanlara, detayların küçüğünden bir değer atanır.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>En Büyük</strong>--Çakışan alanlara, detayların büyüğünden bir değer atanır.",
	"@@Recast_Overrides_tag0@@": "Bir mozaik veri kümesini değiştirmek için kullanılan değişken isimleri ve kullanıcı tanımlı değerler tablosu.",
	"@@Recast_Raster_tag0@@": "Yeniden Biçimlendir fonksiyonunun uygulanacağı raster ürün.",
	"@@Region-Group_Add-Link_tag0@@": "Bir bağlantı alanının çıktı tablosuna eklenip eklenmeyeceğini belirtir.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Bağlantı Ekle</strong>--Çıktı rasterı tablosuna bir ${LINK} ögesi eklenir.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>Bağlantı Yok</strong>--Çıktı rasterının öznitelik tablosu yalnızca ${Value} ve ${Count} ögelerini içerir.",
	"@@Region-Group_Excluded-Value_tag0@@": "Bir hücre konumu bu değeri içeriyorsa, komşuların sayısının nasıl belirtildiğine bakılmaksızın (DÖRT veya SEKİZ) hiçbir mekansal bağlantının değerlendirilmeyeceği bir değeri tanımlar.",
	"@@Region-Group_Excluded-Value_tag1@@": "Hariç tutulan değerlere sahip hücreler NoData olarak kabul edilir ve hesaplamalardan çıkarılır. Hariç tutulan değerleri içeren hücre konumları, çıktı rasterında 0 değerini alır.",
	"@@Region-Group_Excluded-Value_tag2@@": "Hariç tutulan değer, arka plan değeri kavramına veya maske uygulandığı zamankine benzerdir. <strong>${CROSS}</strong> parametresi belirtilmişse, bu parametre için bir değer belirtilmelidir.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "Hücreler arasındaki bağlantının değerlendirilmesinde kullanılacak komşu hücrelerin sayısı.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>DÖRT</strong>--Aynı değerdeki hücreler arasındaki bağlantıyı, ancak hücreler en yakın dört komşunun her birinin doğrudan soluna, sağına, üstüne veya altına olması durumunda tanımlar. Varsayılan değerdir.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>SEKİZ</strong>--Aynı değerdeki hücreler arasındaki bağlantıyı, birbirlerinin en yakınındaki sekiz hücre komşuluğunda ise tanımlar. Bu, sağa, sola, üste veya birbirlerine diyagonal olanları içerir.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Bağlantı testinde hangi hücre değerlerinin dikkate alınması gerektiğini tanımlar.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>İÇİNDE</strong>--Aynı bölge içinde aynı olan girdi değerleri arasındaki bağlantıyı test eder. Varsayılan değerdir.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "Gruplandırılabilen tek hücreler, <strong>Komşu sayısı</strong> parametresi (dört yönlü veya sekiz yönlü) tarafından belirtilen mekansal bağlantı gereksinimlerini karşılayan aynı bölgedeki (değer) hücrelerdir.",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>ÇAPRAZ</strong>--Hariç tutulan değer parametresi tarafından hariç tutulduğu tespit edilen değer hariç, herhangi bir değere sahip hücreler arasındaki komşu parametresi sayısı tarafından belirtilen mekansal gereksinimlerle bağlantıyı test eder.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "Bu seçenek kullanıldığında, <strong>Hariç tutulan değer</strong> parametresi için bir değer belirtilmelidir.",
	"@@Region-Group_Zone-Raster_tag0@@": "Benzersiz bağlı bölgelerinin tanımlanacağı gerekli girdi rasterı.",
	"@@Region-Group_Zone-Raster_tag1@@": "Bir tamsayı türü olmalıdır.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "Öznitelik tablosundaki, piksel grubunun dolgu değerini tanımlayan alan. Çok bantlı bir görüntüde, tüm bantlara bu değer atanır.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "Öznitelik tablosunda maksimum büyüme yarıçapını görüntünün mekansal referans birimlerinde tanımlayan alan.",
	"@@Region-Grow_Raster_tag0@@": "Üzerinde bu fonksiyonu gerçekleştirmek istediğiniz raster.",
	"@@Region-Grow_Seed-Points_tag0@@": "Algoritma için ilk çekirdek görevi gören bir nokta detay sınıfı. Her bir çekirdek noktası, öznitelik tablosunda, maksimum büyüme yarıçapı, benzerlik eşiği ve doldu değeri bilgisini taşıyan bir girdiye karşılık gelir.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "Öznitelik tablosundaki benzerlik eşiğini spektral alanda Öklid mesafesi olarak tanımlayan alan.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Yeniden sınıflandırma tablosundaki eksik değerler kendi değerlerini koruyabilir veya NoData olarak yeniden eşlenebilir.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "İşaretli değil: Bir yeniden haritalama tablosunda yeniden sınıflandırılmayan girdi rasterından gelen herhangi bir piksel, kendi değerini korur ve konumu için çıktı rasterına yazılır. Varsayılan değerdir.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "İşaretli: Bir yeniden haritalama tablosunda yeniden sınıflandırılmayan girdi rasterından gelen herhangi bir pikselin değeri çıktı rasterındaki konumu için NoData olarak yeniden eşleştirilir.",
	"@@Remap_Input-Field_tag0@@": "Yeniden haritalandırılacak olan girdi pikseli değerini belirten alanı seçin.",
	"@@Remap_Input-Field_tag1@@": "Tablonuzda bir değer aralığı varsa, bu minimum değer alanı olur ve <strong>Girdi Maks Alanı</strong> parametresinin de belirtilmesi gerekir.",
	"@@Remap_Input-Max-Field_tag0@@": "Tablonuz bir değer aralığı belirtiyorsa, maksimum değer alanını seçin.",
	"@@Remap_List_tag0@@": "Harita değerlerini belirtin ve minimum ve maksimum değer aralığını ve yeni yeniden haritalama değerlerini belirtin. Ek olarak, değer aralığı NoData piksel olarak ayarlanabilir.",
	"@@Remap_Output-Field_tag0@@": "Çıktı yeniden haritalama değeri olarak kullanılacak alanı seçin.",
	"@@Remap_Raster_tag0@@": "Girdi rasterı.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Yeniden haritalama değerlerini ayarlamak için kullanmak istediğiniz seçeneği seçin:",
	"@@Remap_Remap-Definition-Type_tag1@@": "Liste: Çıktı piksel değerine eşlenecek piksel değeri aralığını belirtin",
	"@@Remap_Remap-Table-Type_tag0@@": "Girdi rasterınızı yeniden haritalandırmak için kullanacağınız tablo türünü seçin:",
	"@@Remap_Remap-Table-Type_tag1@@": "Basit--<strong>Girdi Alanı</strong> pikselini <strong>Çıktı Alanı</strong> parametresinde karşılık gelen değere yeniden haritalamak için <strong>Yeniden Haritalama Tablosu</strong> girdisini kullanır. Bu yöntem yeniden haritalama tablosunu daha hızlı çalışması için önbelleğe alır.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dinamik: Bu yöntem yeniden haritalama tablosunu önbelleğe almaz ve bir isteğin yapıldığı her seferinde (kaydırma, yakınlaştırma veya yenileme) bir sorgulama yapar. Tablo değişirse, bir sonraki istek değerleri buna göre dinamik olarak yeniden eşleyebilir.",
	"@@Remap_Remap-Table-Type_tag9@@": "Yeniden Atama: Yeniden sınıflandırma işlemi için kullanılan, tablodaki her satırın yalnızca her detay sınırına göre yeniden eşleştirileceği belirli bir tablo.",
	"@@Remap_Remap-Table_tag0@@": "Yeniden haritalama değerlerinizi ayarlayan tabloya göz atın.",
	"@@Reproject_Raster_tag0@@": "Yeniden izdüşümlendirilecek veya yeniden örneklenecek raster veri kümesi.",
	"@@Reproject_Spatial-Reference_tag0@@": "Verileri yeniden izdüşümlendirmek için kullanılan koordinat sistemi.",
	"@@Reproject_X-Cellsize_tag0@@": "Verilerin yeniden örneklenmesi gereken x boyutu. Opsiyoneldir. Değer 0 veya daha küçükse, çıktı zarfı (yayılım ve hücre boyutları) girdi rasterından hesaplanır.",
	"@@Reproject_X-Registration-Point_tag0@@": "Veri kümesinin sol üst köşesini tanımlamak için kullanılan x koordinatı. Bu koordinat yeni mekansal referansın birimlerinde tanımlanmalıdır. Hem <strong>X Hücre boyutu</strong> hem de <strong>Y Hücre boyutu</strong> parametreleri 0’dan büyükse, çıktı zarfını tanımlamak için <strong>X Kayıt Noktası</strong> ve <strong>Y Kayıt Noktası</strong> parametreleri ile birlikte kullanılır.",
	"@@Reproject_Y-Cellsize_tag0@@": "Verilerin yeniden örneklenmesi gereken y boyutu. Opsiyoneldir. Değer 0 veya daha küçükse, çıktı zarfı (yayılım ve hücre boyutları) girdi rasterından hesaplanır.",
	"@@Reproject_Y-Registration-Point_tag0@@": "Veri kümesinin sol üst köşesini tanımlamak için kullanılan y koordinatı. Bu koordinat yeni mekansal referansın birimlerinde tanımlanmalıdır. Hem <strong>X Hücre boyutu</strong> hem de <strong>Y Hücre boyutu</strong> parametreleri 0’dan büyükse, çıktı zarfını tanımlamak için <strong>X Kayıt Noktası</strong> ve <strong>Y Kayıt Noktası</strong> parametreleri ile birlikte kullanılır.",
	"@@Resample_Input-Cellsize_tag0@@": "Girdi rasterının piksel hücre boyutu.",
	"@@Resample_Output-Cellsize_tag0@@": "Çıktı rasterının piksel hücre boyutu. Hücre boyutu değiştirilebilir, ancak raster veri kümesinin yayılımı aynı kalacaktır. Kullanıcı tanımlı bir hücre boyutundan yeniden örnekleme, sistem varsayılanından çok daha yavaş olabilir, çünkü sistemin varsayılan yeniden örneklemesi, mümkün olan en yakın çözünürlükten minimum miktarda veri işler.",
	"@@Resample_Raster_tag0@@": "Yeniden örneklenecek girdi rasterı.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>En Yakın Komşu</strong>--En yakın girdi pikseli kullanarak çıktı piksel değerini hesaplar. NoData pikselleri çıktı raster veri kümesinde değişmeden kalır. Varsayılan değerdir.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Çift Doğrusal Enterpolasyon</strong>--Piksel değerini, en yakın dört pikselin mesafe ağırlıklı değerini kullanarak hesaplar. Bu yöntem işlem için hesaplama açısından verimlidir.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Kübik Konvolüsyon</strong>--Bir pikselin yeni değerini en yakın 16 girdi pikseli merkezinden düzgün bir eğri geçirerek belirler.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Çoğunluk</strong>--Piksel değerini, en yakın 16 pikselin çoğunluk piksel değerini kullanarak hesaplar. NoData pikselleri çıktı raster veri kümesinde değişmeden kalır.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>İkili Enterpolasyon Plus</strong>--Kenarlar boyunca pikselleri NoData olarak tanımlanması ve hesaplamada çoğaltılmaması veya dikkate alınmaması hariç <strong>İkili Enterpolasyon</strong> kullanır. Döşemeli veriler için <strong>İkili Enterpolasyon Plus</strong> kullanın; bu şekilde kenarları daha iyi eşleşecektir.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Gauss Bulanıklığı</strong>--Kaynak rasterına bir Gauss konvolüsyonu uygular ve piksel değerini bulanık rasterdan en yakın dört pikselin mesafe ağırlıklı değerini kullanarak hesaplar. Yeniden örneklenen verilerdeki kirliliği ortadan kaldırmak ve daha büyük bir piksel boyutuna altörnekleme yapmak için uygundur.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Gauss Bulanıklığı Plus</strong>--Kenarlar boyunca pikselleri NoData olarak tanımlanması ve hesaplamada çoğaltılmaması veya dikkate alınmaması hariç <strong>Gauss Bulanıklığı</strong> ile aynı yöntemi kullanır. Döşemeli veriler için <strong>Gauss Bulanıklığı Plus</strong> kullanın; bu şekilde kenarları daha iyi eşleşecektir.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Ortalama</strong>--Piksel değerlerini, her hedef piksel için çakışan tüm piksellerin ortalama değerini kullanarak hesaplar.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Minimum</strong>--Piksel değerini, çakışan tüm piksellerin minimum değerini kullanarak hesaplar. NoData pikselleri çıktı raster veri kümesinde değişmeden kalır.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Maksimum</strong>--Sürekli veriye uygun olarak, En Yakın Komşu örneklemesi yönteminden daha yumuşak bir çıktı görüntüsü üretir.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Vektör Ortalaması</strong>--Dahil edilen tüm pikselleri kullanarak büyüklük yönünün vektör ortalamasını hesaplar. Bu yöntem yalnızca büyüklüğü ve yönü temsil eden iki bantlı rasterlar için geçerlidir. Önce büyüklük yönünü U-V'ye dönüştürür, sonra hedef pikselin U-V'sini elde etmek için tüm dahil edilen pikseller arasında aritmetik ortalamayı alır ve tekrar büyüklük yönüne dönüştürür.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Round-Down_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Round-Down_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Round-Down_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Round-Down_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Round-Down_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Round-Down_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Round-Down_Raster_tag0@@": "Aşağı yuvarlanacak girdi değerleri.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Round-Up_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Round-Up_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Round-Up_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Round-Up_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Round-Up_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Round-Up_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Round-Up_Raster_tag0@@": "Yukarı yuvarlanacak girdi değerleri.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "Piksel cinsinden ölçülen minimum segment boyutu. Bu değer, minimum haritalama biriminizle ilişkilidir ve daha küçük piksel bloklarını filtreler. Belirtilen değerden daha küçük olan tüm segmentler, küçük segmentleri en uygun komşu segmentlerle birleştirir.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "Segmentlenecek girdi rasterı.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "Segment sınırları, her segmentin etrafına siyah bir kontür çizgisi olarak çizilir. Böylece benzer renklere sahip bitişik segmentleri ayırt edebilirsiniz.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "İşaretli değil: Segment sınırları gösterilmez. Varsayılan değerdir.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "İşaretli: Segment sınırları, her segmentin etrafına çizilen siyah bir kontür çizgisi olarak gösterilir.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "Nesneleri mekansal özelliklere göre ayırmanın göreceli önemi.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "Geçerli tamsayı değerleri 1 ile 20 arasında değişebilir. Daha küçük değerler, geniş sınıflara ve daha fazla yumuşatmaya neden olur. Mekansal olarak küçük ve birlikte kümelenmiş detayları birbirinden ayırmak için daha büyük bir değer uygundur. Örneğin, bir kent sahnesinde, genel geçirgen olmayan yüzey detaylarını daha küçük bir mekansal ayrıntı değeri kullanarak sınıflandırabilir veya binaları ve yolları, daha yüksek bir mekansal ayrıntı değeri kullanarak ayrı olarak sınıflandırabilirsiniz.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "Nesneleri renk özelliklerine göre ayırmanın göreceli önemi.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "Geçerli kayan nokta değerleri 1,0 ile 20,0 arasında değişebilir. Daha küçük değerler, geniş sınıflara ve daha fazla yumuşatmaya neden olur. Benzer spektral özelliklere sahip olan detaylar arasında ayrım yapmak istediğinizde daha yüksek bir değer kullanılması uygundur. Örneğin, bir orman sahnesinde daha yüksek bir spektral ayrıntı değeri kullanmak, farklı ağaç türlerini daha iyi ayırt etmenizi sağlar.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>Bir segmentin maksimum boyutu. Belirtilen boyuttan daha büyük olan segmentler bölünecektir. Çıktı katmanında büyük segmentlerden kaynaklanan yapaylıkları önlemek için bu parametreyi kullanın. Varsayılan -1'dir.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Dört kalibrasyon türünden birini seçin:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta-nought</strong>--radar parlaklık katsayısını içeren bir çıktı üretir.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma-nought</strong>--zemine bağlı olarak, yer üstündeki bir birim alandan antene geri dönen geri saçılma.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gamma</strong>--anten örüntülerinin belirlenmesinde yararlı olan yayılan ve geri gönderilen enerjinin ölçümü.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>Hiçbiri</strong>--düzeltme uygulamayın. Varsayılan değerdir.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "İşlem yapmak istediğiniz Sentinel-1 Seviye-1 GRD veya SLC girdi rasterı.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "Bu fonksiyon, LUT dosyasının içeriğine bağlı olarak termal düzeltmeyi uygulamak veya düzeltmeyi kaldırmak için LUT dosyasını kullanır.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "İşlem yapmak istediğiniz Sentinel-1 girdi rasterı.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "Bu fonksiyon, LUT dosyasının içeriğine bağlı olarak termal düzeltmeyi uygulamak veya düzeltmeyi kaldırmak için LUT dosyasını kullanır.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Set-Null_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Set-Null_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Set-Null_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Set-Null_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Set-Null_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Set-Null_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Set-Null_False-Raster_tag0@@": "Koşul yanlış olduğunda (false), değerleri çıktı piksel değerleri olarak kullanılacak olan girdi. Bir tamsayı, kayan nokta raster veya sabit bir değer olabilir.",
	"@@Set-Null_Raster_tag0@@": "Mantıksal bir matematik raster fonksiyonunun Boole sonucunu temsil eden girdi rasterı. Değerler 1 (doğru için) veya 0 (yanlış için) olacaktır. Bir tam sayı ya da bir kayan nokta rasterı olabilir.",
	"@@Shaded-Relief_Altitude_tag0@@": "Yükseklik, güneşin ufkun üzerindeki yükseltisidir ve 0 ile 90 derece arasında değişir. 0 derece değeri, güneşin ufukta, yani referans çerçevesiyle aynı yatay düzlemde olduğunu gösterir. 90 derece değeri, güneşin doğrudan tepede olduğunu gösterir. Varsayılan değer, ufkun 45 derece üzerindedir.",
	"@@Shaded-Relief_Azimuth_tag0@@": "Azimut, güneşin ufuk boyunca göreceli (derece cinsinden) konumudur. Bu pozisyon, güneşin kuzeyden itibaren saat yönünde ölçülen açısı ile gösterilir. 0 derece değerinde bir azimut kuzeyi, 90 derece doğuyu, 180 derece güneyi ve 270 derece batıyı gösterir.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Gölgeli kabartmayı görüntülemek için bir renk tayfı mı yoksa bir renk haritasının mı kullanılacağını belirtin.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Renk Paleti</strong>--<strong>Renk Paleti</strong>’ni seçtiğinizde, uygun bir renk tayfı seçmeniz istenir.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Renk Haritası</strong>--<strong>Renk Haritası</strong>’nı seçtiğinizde, kullanılacak renk haritası dosyasını belirtmeniz istenir.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Varsayılan kenar piksel enterpolasyonunun devre dışı bırakılıp bırakılmayacağını belirtin.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "İşaretli değil: Gölgeli kabartmanızı yeniden örneklemek için İki çizgili yeniden örnekleme eşit oranda uygulanır. Varsayılan değerdir.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "İşaretli: İki çizgili yeniden örnekleme, rasterların kenarları veya NoData'nın yanındaki pikseller dışında gölgeli kabartma içinde kullanılır. Bu pikseller NoData ile doldurulur, böylece oluşabilecek keskin kenar efektleri azaltılır.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Bu seçeneğin kullanılması, bir rasterın kenarları boyunca oluşabilecek yeniden örnekleme hatalarını önler. Bir rasterın kenarı boyunca veya değer içermeyen piksellerin yanında bulunan çıktı pikselleri NoData ile doldurulur; bu nedenle, bu seçeneğin yalnızca örtüşen piksellerin bulunduğu başka rasterlar olduğunda kullanılması önerilir. Örtüşen pikseller varsa, NoData alanları boş pikseller yerine örtüşen piksel değerlerini görüntüler.",
	"@@Shaded-Relief_Raster_tag0@@": "Girdi yükselti rasterı.",
	"@@Shaded-Relief_Scaling_tag0@@": "Gölgeli sonuç, aşağıdaki iki seçenekten biri ile z faktörünü ayarlayarak dinamik olarak ölçeklendirilir:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>Hiçbiri</strong>--Ölçeklendirme uygulanmaz. Bu, yerel bir alanı kapsayan tek bir raster veri kümesi için idealdir. Bu, küçük ölçeklerde çok az değişkenlik gösteren arazi kabartması üreteceğinden, yükselti veya çok ölçekli haritalarda büyük farklılıklar gösteren dünya çapında veri kümeleri için önerilmez.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Ayarlanmış</strong>--İzleyici yakınlaştırma ve uzaklaştırma yaparken, çok çeşitli yükseklik değişikliklerini (ölçek) barındıran varsayılan <strong>Piksel Boyut Kuvveti</strong> ve <strong>Piksel Boyut Faktörü</strong> değerleri kullanılarak lineer olmayan bir ayar uygulanır. <strong>Ayarlanmış</strong> seçeneği, dünya çapında veri kümesi kullanılırken tavsiye edilir.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "Z faktörü yükselti değerlerini dönüştürmek için iki amaçlı olarak kullanılan bir ölçeklendirme faktörüdür:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "Yükselti birimlerini (metre ya da fit gibi); fit, metre veya derece gibi veri kümesi yatay koordinat birimlerine dönüştürmek",
	"@@Shaded-Relief_Z-Factor_tag2@@": "Görsel efekt amacıyla dikey büyütme eklemek",
	"@@Shaded-Relief_Z-Factor_tag3@@": "Gölgeli sonuç, aşağıdaki iki seçenekten biri ile z faktörünü ayarlayarak dinamik olarak ölçeklendirilir:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>Hiçbiri</strong>--Ölçeklendirme uygulanmaz. Bu, yerel bir alanı kapsayan tek bir raster veri kümesi için idealdir. Bu, küçük ölçeklerde çok az değişkenlik gösteren arazi kabartması üreteceğinden, yükselti veya çok ölçekli haritalarda büyük farklılıklar gösteren dünya çapında veri kümeleri için önerilmez.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Ayarlanmış</strong>--İzleyici yakınlaştırma ve uzaklaştırma yaparken, çok çeşitli yükseklik değişikliklerini (ölçek) barındıran varsayılan <strong>Piksel Boyut Kuvveti</strong> ve <strong>Piksel Boyut Faktörü</strong> değerleri kullanılarak lineer olmayan bir ayar uygulanır. <strong>Ayarlanmış</strong> seçeneği, dünya çapında veri kümesi kullanılırken tavsiye edilir.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Kabartma için aydınlatma kaynağını kontrol eder.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Geleneksel</strong>--Kabartmayı tek bir ışıklandırma yönünden hesaplar. Işık kaynağının konumunu kontrol etmek için <strong>Azimut</strong> ve <strong>Yükseklik</strong> seçeneklerini ayarlayabilirsiniz. Varsayılan değerdir.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Çok yönlü</strong>--Arazinin gelişmiş bir görselleştirmesini temsil etmek için birden fazla kaynaktan gelen ışığı birleştirir.",
	"@@Shaded-Relief_PSPower_tag0@@": "<strong>Piksel Boyut Gücü</strong>, izleyici harita ekranını yakınlaştırıp uzaklaştırırken yükseklik (veya) ölçek değişikliklerini hesaba katar. Önemli bir kabartma kaybını önlemek için <strong>Z Faktörü</strong>’nün değişim hızını kontrol eden denklemdeki piksel boyutu terimine uygulanan üstel ögedir.",
	"@@Shaded-Relief_PSPower_tag1@@": "Bu parametre sadece <strong>Ölçek</strong> türü <strong>Ayarlanmış</strong> ise geçerlidir. Varsayılan değer 0,664'tür.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "<strong>Piksel Boyut Faktörü</strong>, izleyici harita ekranını yakınlaştırıp uzaklaştırırken ölçek değişikliklerini hesaba katar. <strong>Z Faktörü</strong>’nün değişme hızını kontrol eder.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Bu parametre sadece <strong>Ölçek</strong> türü <strong>Ayarlanmış</strong> ise geçerlidir. Varsayılan değer 0,024'tür.",
	"@@Sin_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Sin_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Sin_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Sin_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Sin_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Sin_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Sin_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Sin_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Sin_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Sin_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Sin_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Sin_Raster_tag0@@": "Sinüs değerlerinin hesaplanacağı girdi.",
	"@@SinH_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@SinH_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@SinH_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@SinH_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@SinH_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@SinH_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@SinH_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@SinH_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@SinH_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@SinH_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@SinH_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@SinH_Raster_tag0@@": "Hiperbolik sinüs değerlerinin hesaplanacağı girdi.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "Her hücrenin akış yönünü gösteren girdi rasterıdır.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "Akış yönü rasterı, <strong>Akış Yönü</strong> işlevi çalıştırılarak oluşturulabilir.",
	"@@Slope_DEM_tag0@@": "Girdi yükselti rasterı.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Bu seçeneğin kullanılması, bir rasterın kenarları boyunca oluşabilecek yeniden örnekleme hatalarını önler. Bir rasterın kenarı boyunca veya değer içermeyen piksellerin yanında bulunan çıktı pikselleri NoData ile doldurulur; bu nedenle, bu seçeneğin yalnızca örtüşen piksellerin bulunduğu başka rasterlar olduğunda kullanılması önerilir. Örtüşen pikseller varsa, NoData alanları boş pikseller yerine örtüşen piksel değerlerini görüntüler.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "İşaretli değil: Eğiminizi yeniden örneklemek için İki çizgili yeniden örnekleme eşit oranda uygulanır. Varsayılan değerdir.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "İşaretli: İki çizgili yeniden örnekleme, rasterların kenarları veya NoData'nın yanındaki pikseller dışında eğim içinde kullanılır. Bu pikseller NoData ile doldurulur, böylece oluşabilecek keskin kenar efektleri azaltılır.",
	"@@Slope_Scaling_tag0@@": "Eğimin meyili, derece cinsinden bir değer veya yüzde artışı olarak çıkarılabilir. <strong>Ölçekleme</strong> için üç seçenek bulunur:",
	"@@Slope_Scaling_tag3@@": "<strong>Derece</strong>--Eğimin meyili derece cinsinden hesaplanır. Değerler 0 ile 90 arasında değişebilir.",
	"@@Slope_Scaling_tag5@@": "<strong>Yüzde_Artışı</strong>--Eğimin meyili derece cinsinden hesaplanır. Değerler 0 ile sonsuz arasında değişebilir. Düz yüzey yüzde 0, 45 derecelik bir yüzey yüzde 100 değerine sahiptir. Yüzey daha dikey hale geldikçe, yüzde artışı gittikçe artar.",
	"@@Slope_Scaling_tag7@@": "<strong>Ölçeklendirilmiş</strong>--Eğimin meyili, DERECE ile aynı olarak hesaplanır, ancak z faktörü ölçek için ayarlanır. İzleyici yakınlaştırma ve uzaklaştırma yaparken çözünürlük değişikliklerini dikkate alan <strong>Piksel Boyut Kuvveti</strong> ve <strong>Piksel Boyut Faktörü</strong> değerlerini kullanır. Bu, dünya çapında veri kümeleri ile çalışırken, özellikle görselleştirme için bir yüzey olarak eğim ile çalışırken tavsiye edilir.",
	"@@Slope_Scaling_tag13@@": "Z faktörü, aşağıdaki denklem ile düzeltilir:",
	"@@Slope_Scaling_tag14@@": "Düzeltilmiş Z Faktörü = (Z Faktörü) + (Piksel Boyutu)",
	"@@Slope_Scaling_tag15@@": "× (Piksel Boyut Faktörü)",
	"@@Slope_Scaling_tag16@@": "Piksel Boyut Gücü",
	"@@Slope_Z-Factor_tag0@@": "<strong>Z Faktörü</strong> yükselti değerlerini iki amaç için dönüştürmekte kullanılan bir ölçeklendirme faktörüdür:",
	"@@Slope_Z-Factor_tag3@@": "Yükselti birimlerini (metre ya da fit gibi); fit, metre veya derece gibi veri kümesi yatay koordinat birimlerine dönüştürmek",
	"@@Slope_Z-Factor_tag4@@": "Görsel efekt amacıyla dikey büyütme eklemek",
	"@@Slope_PSPower_tag0@@": "<strong>Piksel Boyut Gücü</strong>, izleyici harita ekranını yakınlaştırıp uzaklaştırırken yükseklik (veya) ölçek değişikliklerini hesaba katar. Önemli bir kabartma kaybını önlemek için <strong>Z Faktörü</strong>’nün değişim hızını kontrol eden denklemdeki piksel boyutu terimine uygulanan üstel ögedir.",
	"@@Slope_PSPower_tag1@@": "Bu parametre sadece <strong>Ölçek</strong> türü <strong>Ölçekli</strong> ise geçerlidir. Varsayılan değer 0,664'tür.",
	"@@Slope_PSZFactor_tag0@@": "<strong>Piksel Boyut Faktörü</strong>, izleyici harita ekranını yakınlaştırıp uzaklaştırırken ölçek değişikliklerini hesaba katar. <strong>Z Faktörü</strong>’nün değişme hızını kontrol eder.",
	"@@Slope_PSZFactor_tag1@@": "Bu parametre sadece <strong>Ölçek</strong> türü <strong>Ölçekli</strong> ise geçerlidir. Varsayılan değer 0,024'tür.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "Girdi akış birikimi raster katmanı.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "Bu, <strong>Akış Birikimi</strong> işleviyle oluşturulabilir.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "Bu alan, dökme noktası konumlarına değer atamak için kullanılır.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "Yakalanacak girdi dökme noktası konumları.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "Bir girdi raster katmanı için, NoData olmayan (yani bir değeri olan) tüm hücreler, dökme noktaları olarak kabul edilir ve yakalanır.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "Daha yüksek birikmiş akışlı bir hücreyi aramak için harita birimleri cinsinden maksimum mesafe.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Bağımlı gürültünün ortalama değerini belirtir. Daha büyük bir gürültü ortalama değeri daha az yumuşatma sağlarken, daha küçük bir değer daha çok yumuşatma sağlar.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Bu parametre sadece <strong>Filtre Türü</strong> <strong>Lee Filtresi</strong> ve <strong>Gürültü Modeli</strong> <strong>Toplanır Gürültü</strong> veya <strong>Toplanır ve Çarpımsal Gürültü</strong> ise geçerlidir. Varsayılan değer 0'dır.",
	"@@Speckle_Damping-Factor_tag0@@": "Üstel sönümleme etkisinin filtrelemedeki yayılımını belirtir. Daha büyük bir sönümleme değeri kenarları daha iyi korur ancak daha az yumuşatır, daha küçük bir değer ise daha fazla yumuşatma sağlar. 0 değeri, bir alçak geçiş filtresiyle aynı çıktıyı verir.",
	"@@Speckle_Damping-Factor_tag1@@": "Bu parametre sadece <strong>Filtre Türü</strong> <strong>Gelişmiş Lee Filtresi</strong> veya <strong>Frost Filtresi</strong> ise geçerlidir. Varsayılan değer 1'dır.",
	"@@Speckle_Filter-Size_tag0@@": "Gürültüyü filtrelemek için kullanılan piksel penceresinin boyutunu belirtir:",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "Benek gürültüsünü gidermek için yumuşatma algoritmasında kullanılacak filtre türünü belirtir:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Lee Filtresi</strong>--Görüntüdeki her piksele mekansal bir filtre uygulayarak benek gürültüsünü azaltır ve verileri bir kare pencerede hesaplanan yerel istatistiklere göre filtreler. Bu filtre, bağımlı veya artan bir bileşene sahip benekli verileri yumuşatmak istediğinizde kullanışlıdır. Varsayılan değerdir.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Gelişmiş Lee Filtresi</strong>--Lee filtresinin <strong>Sönümleme Faktörü</strong> ve <strong>Bakış Sayısı</strong> içeren uyarlanmış bir versiyonudur. Bu filtre, doku bilgilerini korurken benekleri azaltmak istediğinizde kullanışlıdır.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Frost Filtresi</strong>--Ayrı filtre pencerelerinde yerel istatistikleri kullanan üssel olarak sönümlü dairesel simetrik bir filtre ile benek gürültüsünü azaltır. Bu filtre, radar görsellerinin kenarlarını korurken benekleri azaltmak istediğinizde kullanışlıdır.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Kuan Filtresi</strong>--Lee filtresine benzer bir şekilde görüntüdeki her piksele mekansal bir filtre uygular ve verileri bir kare pencerede hesaplanan yerel istatistiklere göre filtreler. Bu filtre, radar görsellerinin kenarlarını korurken benekleri azaltmak istediğinizde kullanışlıdır.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Artan gürültünün ortalama değerini belirtir. Daha büyük bir gürültü ortalama değeri daha az yumuşatma sağlarken, daha küçük bir değer daha çok yumuşatma sağlar.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Bu parametre sadece <strong>Filtre Türü</strong> <strong>Lee Filtresi</strong> ve <strong>Gürültü Modeli</strong> <strong>Toplanır Gürültü</strong> veya <strong>Toplanır ve Çarpımsal Gürültü</strong> ise geçerlidir. Varsayılan değer 1'dır.",
	"@@Speckle_Noise-Model_tag0@@": "Radar görüntüsünün kalitesini düşüren gürültü türünü belirtir:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Çarpımsal Gürültü</strong>--Yakalama veya aktarma sırasında ilgili sinyale eklenen rastgele sinyal gürültüsü",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Toplanır Gürültü</strong>--Yakalama veya aktarma sırasında ilgili sinyale eklenen rastgele sinyal gürültüsü",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Toplanır ve Çarpımsal Gürültü</strong>--Her iki gürültü modeli",
	"@@Speckle_Noise-Variance_tag0@@": "Radar görüntüsünün gürültü varyansını belirtir.",
	"@@Speckle_Noise-Variance_tag1@@": "Bu parametre sadece <strong>Filtre Türü</strong> <strong>Lee Filtresi</strong> ve <strong>Gürültü Modeli</strong> <strong>Toplanır Gürültü</strong> veya <strong>Toplanır ve Çarpımsal Gürültü</strong> ise geçerlidir. Varsayılan değer 0,25'tir.",
	"@@Speckle_Number-of-Looks_tag0@@": "Görüntü yumuşatmayı kontrol eden ve gürültü varyansını tahmin edecek şekilde görüntünün bakış sayısını belirtir. Daha küçük bir değer daha düzgün bir sonuç verirken, daha büyük bir değer daha fazla görüntü detayı sağlar.",
	"@@Speckle_Number-of-Looks_tag1@@": "Bu parametre sadece <strong>Filtre Türü</strong> <strong>Lee Filtresi</strong> ve <strong>Gürültü Modeli</strong> <strong>Çarpımsal Gürültü</strong> veya <strong>Filtre Türü</strong> <strong>Kuan Filtresi</strong> olduğunda geçerlidir. Varsayılan değer 1'dır.",
	"@@Speckle_Raster_tag0@@": "Girdi rasterı.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "Girdi rasterını dönüştürmek için kullanılan matris.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "Bu dönüştürme için kullanılan denklem:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Çıktı Bant_R = Ağırlık_P * Bant_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "burada:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Bant_R, bir çıktı bandıdır; burada R, 1'den başlayarak çıktı bandı sayısına kadar olan bir sayıdır.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Ağırlık_P, her girdi bandı için 1 adet virgülle ayrılmış ağırlık listesidir. Her bant için ağırlıkların toplamı 1'e eşit olmalıdır.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "Bant_C girdi görüntüsüdür; burada C, 1'den başlayarak girdi görüntüsünün bant sayısına kadar olan bir sayıdır.",
	"@@Spectral-Conversion_Raster_tag0@@": "Girdi rasterı.",
	"@@Spectral-Conversion_Raster_tag1@@": "Bu bir raster veri kümesi, bir mozaik veri kümesi veya bir görüntü servisi olabilir.",
	"@@Spectral-Conversion_Size_tag0@@": "<strong>Dönüşüm Matrisi</strong>’ndeki satır ve sütun sayısı.",
	"@@Square_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Square_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Square_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Square_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Square_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Square_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Square_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Square_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Square_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Square_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Square_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Square_Raster_tag0@@": "Karesi alınacak girdi değerleri.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Square-Root_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Square-Root_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Square-Root_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Square-Root_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Square-Root_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Square-Root_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Square-Root_Raster_tag0@@": "Kare kökü bulmak için kullanılan girdi değerleri.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Her bant için istatistik değerlerini ayarlayın.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "${Histogram} sütunu, <strong>İçe Aktar</strong> parametresi kullanılarak doldurulabilen salt okunur bir alandır. Bir histogram dosyasını içe aktarırsanız, ${Histogram} sütunu <strong>Tanımlı</strong> olarak işaretlenir.",
	"@@Statistics-and-Histogram_Import_tag0@@": "İstatistikleri ve histogram bilgilerini mevcut bir raster veya XML dosyasından içe aktarır.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "Bu girdi rasterı için istatistiklerin ve histogramın ayarlanması gerekir.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Her bant için istatistik değerlerini ayarlayın.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "Her hücrenin akış yönünü gösteren girdi rasterıdır.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "Akış yönü rasterı, <strong>Akış Yönü</strong> işlevi çalıştırılarak oluşturulabilir.",
	"@@Stream-Link_Stream-Raster_tag0@@": "Lineer bir akış ağını temsil eden bir girdi rasterı.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "Her hücrenin akış yönünü gösteren girdi rasterıdır.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "Akış yönü rasterı, <strong>Akış Yönü</strong> işlevi çalıştırılarak oluşturulabilir.",
	"@@Stream-Order_Order-Method_tag0@@": "Akış düzeni atamak için kullanılan yöntem.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLER</strong>--1952 yılında Strahler tarafından önerilen, akış derecelendirme yöntemi. Akış derecesi, akış derecesi yalnızca aynı olan akışlar kesiştiğinde artar. Birinci dereceden ve ikinci dereceden bir bağlantının kesişimi, üçüncü dereceden bir bağlantı oluşturmak yerine, ikinci dereceden bir bağlantı olarak kalır. Varsayılan değerdir.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong>--1967 yılında Shreve tarafından önerilen, büyüklüğe göre akım derecelendirme yöntemi. Kolları olmayan tüm bağlantılara büyüklük (derece) olarak bir atanır. Büyüklükler, bağımlı aşağı eğimdir. İki bağlantı kesiştiğinde, büyüklükleri eklenir ve aşağı iniş bağlantısına atanır.",
	"@@Stream-Order_Stream-Raster_tag0@@": "Lineer bir akış ağını temsil eden bir girdi akış rasterı.",
	"@@Stretch_Auto-Gamma_tag0@@": "İstatistikler ve veri kümesi histogramından gamma hesaplarken <strong>Otomatik Gamma</strong> kullanın. İstatistikler, fonksiyonun kendisi tarafından tahmin edilen istatistikler olabilir veya bir katman seçtiyseniz, istatistikler yazılım tarafından tahmin edilebilir.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "İstatistiklerin yalnızca ekranınızda görüntülenen piksellerden hesaplanmasını istiyorsanız <strong>Dinamik Aralık Ayarlama</strong> onay kutusunu işaretleyin. Bu seçenek genellikle, görüntü bu tür bir genişletme gerçekleştiremeyen bir web uygulamasında yayınlandığında ve kullanıldığında uygulanır.",
	"@@Stretch_Estimate-Statistics_tag0@@": "İstatistiklerinizi tahmin etmek istiyorsanız <strong>İstatistikleri Tahmin Et</strong> onay kutusunu işaretleyin. Tahmini istatistikler, rasterın merkezinden 1000’e 1000 örnekleme ile hesaplanır ve genişletme tarafından kullanılır.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Bu işaretlendiyse ve rasterda istatistikler varsa veya <strong>İstatistikler</strong> tablosuna değerler girdiyseniz, uzatma için bir histogram gerekmedikçe, tahmini istatistikler yerine bunlar kullanılır. Genişletme için mevcut olmayan bir histogram gerekiyorsa, tahmin yapılır.",
	"@@Stretch_Gamma_tag0@@": "<strong>Gamma</strong> değerini manuel olarak ayarlamak için kaydırma çubuğunu kullanın.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Kullanılacak standart sapma sayısı için n değerini belirtin. Bu yöntem, detay değerlerinin ortalama değerden ne kadar farklı olduğunu vurgulamak için kullanılır; normal dağıtılmış verilerde kullanıldığında en iyi sonucu verir.",
	"@@Stretch_Output-Maximum_tag0@@": "Histogram için en yüksek piksel değerini ayarlayın.",
	"@@Stretch_Output-Maximum_tag1@@": "<strong>Çıktı Minimumu</strong> ve <strong>Çıktı Maksimumu</strong> değer aralığını ayarlar ve bunlar için daha sonra lineer olarak karşıtlık genişletme yapılır.",
	"@@Stretch_Output-Minimum_tag0@@": "Histogram için en düşük piksel değerini ayarlayın.",
	"@@Stretch_Output-Minimum_tag1@@": "<strong>Çıktı Minimumu</strong> ve <strong>Çıktı Maksimumu</strong> değer aralığını ayarlar ve bunlar için daha sonra lineer olarak karşıtlık genişletme yapılır.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Genişletmeden hariç tutulacak yüksek değerlerin yüzdesini belirtin.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "Geçerli değerler 0 ile 99 arasında değişebilir.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Genişletmeden hariç tutulacak düşük değerlerin yüzdesini belirtin.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "Geçerli değerler 0 ile 99 arasında değişebilir.",
	"@@Stretch_Raster_tag0@@": "Karşıtlık genişletme için girdi rasterı.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "<strong>Güç Seviyesi</strong> genişletmede s biçimli işlevin ne kadarının kullanılacağını belirler. 1 gibi düşük bir değer, eğrinin donuk ve soluk renkler üretme eğiliminde olan yalnızca orta kısmını kullanır. 6 gibi yüksek bir değer, eğrinin koyu ve keskin renkler üretme eğiliminde olan tamamını kullanır.",
	"@@Stretch_Statistics_tag0@@": "İletişim kutusuna kendi istatistiklerinizi girebilirsiniz. Varsayılan olarak, istatistikler verilerden alınır; ancak, bu parametreye girdiğiniz değerler bunun yerine kullanılacaktır.",
	"@@Stretch_Type_tag0@@": "Genişletme türü yöntemini seçin:",
	"@@Stretch_Type_tag1@@": "Hiçbiri: Karşıtlık genişletme yok",
	"@@Stretch_Type_tag2@@": "StdSap--Standart sapma genişletme",
	"@@Stretch_Type_tag3@@": "MinMaks--Minimum-Maksimum genişletme",
	"@@Stretch_Type_tag4@@": "YüzdeMinMaks--Kırpma yüzdesi genişletme",
	"@@Stretch_Type_tag5@@": "Sigmoid--S biçimli genişletme",
	"@@Stretch_Use-Gamma_tag0@@": "Gamma genişletme uygulamak istiyorsanız <strong>Gamma Kullan</strong> onay kutusunu işaretleyin.",
	"@@Swath_Cellsize_tag0@@": "Çıktı rasterının hücre boyutu otomatik olarak algılanır; ancak isterseniz bunu değiştirebilirsiniz. Hücre boyutu değiştirilebilir, ancak raster veri kümesinin yayılımı aynı kalacaktır.",
	"@@Swath_Interpolation-Method_tag0@@": "Bu fonksiyon için dört adet yeniden örnekleme yöntemi vardır:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>En Yakın Komşu</strong>--En yakın pikseli kullanarak piksel değerini hesaplar. Hiçbir kaynak pikseli yoksa, çıktıda yeni bir piksel oluşturulamaz.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Çift doğrusal</strong>--Piksel değerini, en yakın piksellerin mesafe ağırlıklı değerini kullanarak hesaplar.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>Lineer Üçgenleme</strong>--Düzensiz rasterdaki her bir hücrenin merkez noktalarından, daha sonra düzenli bir raster haline dönüştürülen bir yüzey enterpolasyonu yapmak için üçgenlenmiş düzensiz bir ağ kullanır.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Doğal Komşuluk</strong>--Bir en yakın komşu ataması gerçekleştirir, hesaplama yöntemleri içinde en hızlısıdır. Öncelikle arazi kullanımı sınıflandırması gibi kesikli veriler için kullanılır, çünkü hücre değerlerini değiştirmez. Maksimum mekansal hata hücre boyutunun yarısı kadardır.",
	"@@Swath_Raster_tag0@@": "Yeniden örneklenecek düzensiz gridli raster.",
	"@@Tan_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Tan_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Tan_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Tan_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Tan_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Tan_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Tan_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Tan_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Tan_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Tan_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Tan_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Tan_Raster_tag0@@": "Tanjant değerlerinin hesaplanacağı girdi.",
	"@@TanH_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@TanH_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@TanH_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@TanH_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@TanH_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@TanH_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@TanH_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@TanH_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@TanH_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@TanH_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@TanH_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@TanH_Raster_tag0@@": "Hiperbolik tanjant değerlerinin hesaplanacağı girdi.",
	"@@Tasseled-Cap_Raster_tag0@@": "Üzerinde Püsküllü Kapak dönüşümünün gerçekleştirileceği girdi rasterı.",
	"@@Times_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Times_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Times_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Times_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Times_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Times_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Times_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Times_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Times_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Times_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Times_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Times_Raster_tag0@@": "Çarpılacak değerleri içeren girdi.",
	"@@Times_Raster_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Times_Raster2_tag0@@": "İlk girdinin çarpılacağı değerleri içeren girdi.",
	"@@Times_Raster2_tag1@@": "Diğer parametre için bir raster belirtilmişse, bu parametre için bir girdi olarak sabit bir değer kullanılabilir.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Gerçekleştirilecek transpoze türünü seçin veya özel bir tane tanımlayın:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8 Sirrus",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8 Bulut",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8 Bulut Gölgesi",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8 Atanmış Dolgu",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8 Düşürülmüş Kare",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8 Kar/Buz",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8 Arazi Oklüzyonu",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8 Bitki Örtüsü",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8 Su",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Kullanıcı Tanımlı",
	"@@Transpose-Bits_Constant-Value_tag0@@": "Transpozeye dahil olmayan tüm bitleri doldurmak için kullanılacak isteğe bağlı bir değer. Bu parametre, <strong>Sabitten Dolgu Rasterı Üret</strong> parametresi <strong>Evet</strong> olarak ayarlandığında açılır.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Transpozeye dahil olmayan tüm bitleri doldurmak için kullanılacak bir raster veri kümesi belirtin. Bu parametre, <strong>Sabitten Dolgu Rasterı Üret</strong> parametresi <strong>Hayır</strong> olarak ayarlandığında açılır.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Sabit bir değer kullanarak bir dolgu rasterı oluşturun:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Evet</strong>--Transpozisyona dahil edilmeyen bitleri doldurmak için sabit bir değer kullanılarak bir raster üretilir. Varsayılan değerdir.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>Hayır</strong>--Transpozisyona dahil edilmeyen bitleri doldurmak için mevcut bir raster veri kümesinden piksel değerleri kullanılarak bir raster üretilir.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "Çıktı bitlerini ve bunların yerinde olacak girdileri gösteren salt okunur bir tablo.",
	"@@Transpose-Bits_Raster_tag0@@": "Paketi açmak ve yeniden haritalamak için kullanılacak girdi rasterı.",
	"@@Unit-Conversion_From-Unit_tag0@@": "Piksellerin orijinal birim türü.",
	"@@Unit-Conversion_Raster_tag0@@": "Dönüştürülen birimleri içerecek olan girdi rasterı.",
	"@@Unit-Conversion_To-Unit_tag0@@": "Piksellerin dönüştürülmüş birim türü.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Yön bileşeninin nasıl ölçüldüğünü belirtir.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Coğrafi-0° nokta kuzeye, 90° nokta doğuya",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Aritmetik: 0° nokta doğuya, 90° nokta kuzeye",
	"@@Vector-Field_Input-Data-Type_tag0@@": "Girdilerinizin temsil ettiği vektör alanı türü.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Bilinmiyor: Girdilerin U-V’yi mi yoksa Büyüklük-Yönü mü temsil edip etmediği bilinmiyor.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V: Girdi verileri U ve V bileşenlerini temsil eder.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Büyüklük-Yön: Girdi verileri, büyüklüğü ve yönü gösterir.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Çıktılarınızın temsil ettiği vektör alanı türünü belirtir.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Büyüklük-Yön: Çıktı verileri, büyüklüğü ve yönü gösterir.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V: Çıktı verileri U ve V bileşenlerini temsil eder.",
	"@@Vector-Field_Raster1_tag0@@": "İlk girdi rasterı.",
	"@@Vector-Field_Raster1_tag1@@": "Bu, U değeri veya büyüklüğü olacaktır.",
	"@@Vector-Field_Raster2_tag0@@": "İkinci girdi rasterı.",
	"@@Vector-Field_Raster2_tag1@@": "Bu, V değeri veya doğrultusu olacaktır.",
	"@@Viewshed_Analysis-Method_tag0@@": "Görünürlüğün hesaplanacağı yöntemi seçin. Bu seçenek doğruluktan azaltarak daha fazla performans elde etmenizi sağlar.",
	"@@Viewshed_Analysis-Method_tag1@@": "Tüm Görüş Çizgileri: Görünür alanlar oluşturmak için rasterdaki her piksel üzerinde bir görüş çizgisi gerçekleştirilir. Bu varsayılan yöntemdir.",
	"@@Viewshed_Analysis-Method_tag2@@": "Çevre Görüş Çizgileri: Görüş çizgileri, görünürlük alanları oluşturmak için yalnızca görünen alanın çevresindeki piksellere uygulanır. Bu yöntem, <strong>Tüm Görüş Çizgileri</strong> yönteminden daha iyi bir performansa sahiptir, çünkü hesaplamada daha az görüş çizgisi yer alır.",
	"@@Viewshed_Analysis-Type_tag0@@": "Her hücrenin gözlemcilere nasıl görünür olacağını belirleyerek ya da gözlemcilerin görünür olacağı her yüzey konumunu tanımlayarak hangi tür görünürlük analizini gerçekleştirmek istediğinizi seçin.",
	"@@Viewshed_Analysis-Type_tag1@@": "Sıklık: Girdi yüzey rasterdaki her piksel konumunun girdi gözlemci konumları tarafından görülebildiği sayı (noktalar veya çoklu çizgi gözlemci detayları için köşeler olarak). Varsayılan değerdir.",
	"@@Viewshed_Analysis-Type_tag2@@": "Gözlemciler: Çıktı, her raster yüzeyi konumundan tam olarak hangi gözlemci noktalarının görülebildiğini tanımlar. Girdi gözlemcileri için izin verilen maksimum sayı, bu analiz türünde 32'dir.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Bu değer, yatay tarama aralığının bitiş açısını tanımlar. Bu değer, 0'ın kuzeye yönlendiği 0 ile 360,0 arasında derece cinsinden belirtilmelidir. Varsayılan değer 360,0'dır.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Girdi <strong>Gözlemci Detayları</strong> veri kümesinde bir alan veya sayısal bir değer olabilir. Bu parametre bir değere ayarlanırsa, bu değer tüm gözlemcilere uygulanır. Her gözlemci için farklı değerler belirlemek için bu parametreyi <strong>Gözlemci Detayları</strong> veri kümesindeki alana ayarlayın.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Bu değer, yatay tarama aralığının başlangıç açısını tanımlar. Bu değer, 0'ın kuzeye yönlendiği 0 ile 360,0 arasında derece cinsinden belirtilmelidir. Varsayılan değer 0'dır.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Girdi <strong>Gözlemci Detayları</strong> veri kümesinde bir alan veya sayısal bir değer olabilir. Bu parametre bir değere ayarlanırsa, bu değer tüm gözlemcilere uygulanır. Her gözlemci için farklı değerler belirlemek için bu parametreyi <strong>Gözlemci Detayları</strong> veri kümesindeki alana ayarlayın.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "İç yarı çap parametresi için mesafe türü.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "İşaretli değil--<strong>İç Yarıçap</strong> 2B mesafe olarak yorumlanır. Varsayılan değerdir.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "İşaretli--<strong>İç Yarıçap</strong> 3B mesafe olarak yorumlanır.",
	"@@Viewshed_Inner-Radius_tag0@@": "Bu değer, görünürlüğün belirlendiği (minimum) başlangıç mesafesini tanımlar. Bu mesafeden daha yakın olan piksellerin çıktıda görünür olmadığı kabul edilir ancak yine de <strong>İç Yarıçap</strong> ve <strong>Dış Yarıçap</strong> arasındaki piksellerin görünürlüğünü engelleyebilir. Varsayılan değer 0'dır.",
	"@@Viewshed_Inner-Radius_tag5@@": "Girdi <strong>Gözlemci Detayları</strong> veri kümesinde bir alan veya sayısal bir değer olabilir. Bu parametre bir değere ayarlanırsa, bu değer tüm gözlemcilere uygulanır. Her gözlemci için farklı değerler belirlemek için bu parametreyi <strong>Gözlemci Detayları</strong> veri kümesindeki alana ayarlayın.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Bu değer gözlemci noktalarının ya da vertislerin yüzey yükseltilerini tanımlamak için kullanılır.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Girdi <strong>Gözlemci Detayları</strong> veri kümesinde bir alan veya sayısal bir değer olabilir. Bu parametre belirtilmediğinde, gözlemci yükseltisi ikili enterpolasyon kullanılarak yüzey rasterından elde edilir. Bu parametre bir değere ayarlanırsa, bu değer tüm gözlemcilere uygulanır. Her gözlemci için farklı değerler belirlemek için bu parametreyi <strong>Gözlemci Detayları</strong> veri kümesindeki alana ayarlayın.",
	"@@Viewshed_Observer-Features_tag0@@": "Gözlemci konumlarını tanımlayan gerekli girdi detay sınıfı. Nokta, çoklu nokta ya da çoklu çizgi detayları olabilir.",
	"@@Viewshed_Observer-Features_tag1@@": "Girdi detay sınıfı, görünürlük hesaplaması sırasında 3B bir yermerkezli koordinat sistemine dönüştürülür. Yüzey rasterı yayılımı dışındaki veya NoData hücrelerde bulunan gözlemciler hesaplamada göz ardı edilir.",
	"@@Viewshed_Observer-Offset_tag0@@": "Bu değer gözlemci yükseltisine eklenecek dikey bir mesafeyi (yüzey birimleri cinsinden) gösterir. Bu bir pozitif tam sayı ya da kayan nokta değeri olmalıdır.",
	"@@Viewshed_Observer-Offset_tag1@@": "Girdi <strong>Gözlemci Detayları</strong> veri kümesinde bir alan veya sayısal bir değer olabilir. Bu parametre bir değere ayarlanırsa, bu değer tüm gözlemcilere uygulanır. Her gözlemci için farklı değerler belirlemek için bu parametreyi <strong>Gözlemci Detayları</strong> veri kümesindeki alana ayarlayın.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Dış yarı çap parametresi için mesafe türü.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "İşaretli değil--<strong>Dış Yarıçap</strong> 2B mesafe olarak yorumlanır. Varsayılan değerdir.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "İşaretli--<strong>Dış Yarıçap</strong> 3B mesafe olarak yorumlanır.",
	"@@Viewshed_Outer-Radius_tag0@@": "Bu değer, görünürlüğün belirlendiği maksimum mesafeyi tanımlar. Bu mesafenin ötesindeki pikseller analizden hariç tutulur.",
	"@@Viewshed_Outer-Radius_tag1@@": "Girdi <strong>Gözlemci Detayları</strong> veri kümesinde bir alan veya sayısal bir değer olabilir. Bu parametre bir değere ayarlanırsa, bu değer tüm gözlemcilere uygulanır. Her gözlemci için farklı değerler belirlemek için bu parametreyi <strong>Gözlemci Detayları</strong> veri kümesindeki alana ayarlayın.",
	"@@Viewshed_Raster_tag0@@": "Gerekli girdi yüzey rasterı. Bir tam sayı ya da bir kayan nokta rasterı olabilir.",
	"@@Viewshed_Raster_tag1@@": "Girdi, görünürlük hesaplaması sırasında 3B bir yermerkezli koordinat sistemine dönüştürülür. Girdi rasterı hakkındaki NoData hücreleri görünürlük tayinini engellemez.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Görünür ışığın havadaki kırılma katsayısı.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "Varsayılan değer 0,13'tür.",
	"@@Viewshed_Surface-Offset_tag0@@": "Bu değer, görünürlük için dikkate alındığı gibi, her hedef pikselin z değerine eklenecek dikey bir mesafeyi (yüzey birimlerinde) gösterir. Bu bir pozitif tam sayı ya da kayan nokta değeri olmalıdır.",
	"@@Viewshed_Surface-Offset_tag1@@": "Girdi <strong>Gözlemci Detayları</strong> veri kümesinde bir alan veya sayısal bir değer olabilir. Bu parametre bir değere ayarlanırsa, bu değer tüm gözlemcilere uygulanır. Her gözlemci için farklı değerler belirlemek için bu parametreyi <strong>Gözlemci Detayları</strong> veri kümesindeki alana ayarlayın.",
	"@@Viewshed_Vertical-Error_tag0@@": "Yüzey yükselti değerlerinde Ortalama Kare Kökü Hatası (RMSE) olarak ölçülen belirsizlik miktarı. Girdi yükselti değerlerinin beklenen hatasını temsil eden bir kayan nokta değeridir. Bu parametreye 0'dan büyük bir değer atandığında, çıktı görünürlük rasterı kayan nokta olacaktır. Bu durumda, çıktı görünürlüğü rasterındaki her piksel değeri, hücrenin gözlemcilerin herhangi biri tarafından görülebildiği olasılıkların toplamını temsil eder.",
	"@@Viewshed_Vertical-Error_tag1@@": "<strong>Analiz Türü</strong> <strong>Gözlemciler</strong> veya <strong>Analiz Yöntemi</strong> <strong>Çevre Görüş Çizgileri</strong> olduğunda, bu parametre devre dışı bırakılır.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Bu değer, taramanın yatay bir düzlem altındaki alt dikey açı sınırını tanımlar. Bu değer, tamsayı veya kayan nokta olabilen -90,0 ile 0 derece arasında belirtilmelidir. Varsayılan değer -90,0'dır.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Girdi <strong>Gözlemci Detayları</strong> veri kümesinde bir alan veya sayısal bir değer olabilir. Bu parametre bir değere ayarlanırsa, bu değer tüm gözlemcilere uygulanır. Her gözlemci için farklı değerler belirlemek için bu parametreyi <strong>Gözlemci Detayları</strong> veri kümesindeki alana ayarlayın.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Bu değer, taramanın yatay bir düzlem üzerindeki üst dikey açı sınırını tanımlar. Bu değer, tamsayı veya kayan nokta olabilen 0 ile 90,0 derece arasında belirtilmelidir. Varsayılan değer 90,0'dır.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Girdi <strong>Gözlemci Detayları</strong> veri kümesinde bir alan veya sayısal bir değer olabilir. Bu parametre bir değere ayarlanırsa, bu değer tüm gözlemcilere uygulanır. Her gözlemci için farklı değerler belirlemek için bu parametreyi <strong>Gözlemci Detayları</strong> veri kümesindeki alana ayarlayın.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "Her hücrenin akış yönünü gösteren girdi rasterıdır.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "Akış yönü rasterı, <strong>Akış Yönü</strong> işlevi çalıştırılarak oluşturulabilir.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "Girdi dökme noktası konumları.",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Bu raster, katkıda bulunan alanın veya havzanın belirleneceği yukarıdaki hücreleri temsil eder. NoData (Verisiz) olmayan tüm hücreler, kaynak hücreler olarak kullanılacaktır.",
	"@@Watershed_Pour-Point-Field_tag0@@": "Bu alan, dökme noktası konumlarına değer atamak için kullanılır.",
	"@@Watershed_Pour-Point-Field_tag1@@": "Bir raster dökme noktası veri kümesi için, ${Value} değeri varsayılan olarak kullanılır.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Weighted-Overlay_Scales_tag0@@": "Eski değerlerin yeniden haritalanacağı yeni değerlerin aralığı.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "Ağırlıklı bindirme tablosu dört bölümden oluşur:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Katman: Tüm girdi rasterları tamsayı tipinde olmalıdır.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Etki: Her girdi rasterı göreceli bir yüzde olarak önemine veya etkisine ağırlıklandırılır. Yüzde etki ağırlıklarının toplamı 100'e eşit olmalı ve her ağırlık tamsayı değerleri ile belirtilmelidir.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Alan: Ağırlıklandırma için kullanılacak, girdi rasterındaki bir tamsayı veya dizi alanı.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Yeniden Haritalama Tablosu: Bir girdi rasterındaki her değere, yeniden haritalama tablosuna dayalı olarak yeni bir ölçek değeri atanır. Ölçek değeri geçerli bir değer veya bir NoData değeri olabilir.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "Ağırlıklı toplam tablosu üç özellik tarafından tanımlanır:",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Katman: Ağırlıklandırılan raster.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Alan: Rasterın ağırlıklandırma için kullanacağı alan.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Ağırlık: Rasterın çarpılacağı ağırlık değeri. Herhangi bir pozitif veya negatif ondalık değer olabilir.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "Piksel değerlerinin ortam hava sıcaklığını temsil ettiği tek bantlı bir raster.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "Girdi sıcaklık rasterı ile ilişkilendirilen ölçü birimi. Kullanılabilir girdi birimleri, Santigrat, Fahrenhayt ve Kelvin'dir.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "Çıktı rasterı ile ilişkilendirilen ölçü birimi. Kullanılabilir çıktı birimleri, Santigrat, Fahrenhayt ve Kelvin'dir.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "Piksel değerlerinin rüzgar hızını temsil ettiği tek bantlı bir raster.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Rüzgar hızı rasterının ölçüm birimini tanımlar:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Mil / Saat (m/sa)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Kilometre / Saat (km/sa)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Metre / Saniye (m/sn)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Fit / Saniye (fit/sn)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Knot (kn)",
	"@@Zonal-Remap_Background-Value_tag0@@": "Girdi pikseller yeniden haritalamadan önce, çıktı rasterının başlangıç piksel değeri.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "<strong>Bölgeye Ait Öznitelik Tablosu</strong>’nda ayarlanan koşullardan hiçbirini karşılamayan bir piksele atanacak değer.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "<strong>Çıktı Değeri Alan Adı</strong> parametresi belirtilmemiş olarak bırakılırsa veya karşılık gelen bölgesel eşiğin çıktı değeri <strong>Bölgeye Ait Öznitelik Tablosu</strong>’nda belirtilmemiş olarak bırakılırsa bu, çıkış pikseli değeri olacaktır.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "Bir girdi pikselin tekrar haritalandığı değerin altında kalan maksimum değeri içeren alan adı.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Belirtilmemişse veya alan değeri boş ise, piksel değerleri maksimum için test edilmez.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "Bir girdi pikselin tekrar haritalandığı değerin üstünde kalan minimum değeri içeren alan adı.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Belirtilmemişse veya alan değeri boş ise, piksel değerleri minimum için test edilmez.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "Bir girdi pikselin tekrar haritalandığı hedef değeri içeren alan adı.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Belirtilmemiş olarak bırakılırsa veya alan değeri boş ise, yeniden haritalanan piksel değerleri <strong>Varsayılan Çıktı Değeri</strong> olarak ayarlanır.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "Yeniden haritalanacak piksel değerlerini içeren gerekli tek bantlı raster girdi.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "<strong>Bölgeye Ait Öznitelik Tablosu</strong>’na uygulanan isteğe bağlı sorgu.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "Yukarıdaki tabloyu örnek olarak kullanıyorsanız, sorgu ${Variable1 = 'bare earth' AND Variable2 = 'California'} olacaktır.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "En az üç alan içeren gerekli bir girdi tablosu. Burada minimum eşik değer, maksimum eşik değe ve hedef değer bulunmalıdır. Hedef değer, yeniden haritalanan değeri içerecek alandır.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "Dosyanın biçimi bir detay sınıfı, detay servisi veya ArcGIS'in desteklediği herhangi bir tablo türü olabilir.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "<strong>Bölgeye Ait Öznitelik Tablosu</strong>’nda bölge kimliği değerlerini içeren alanın adı.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "Bölge kimliği değerleri bölge rasterınızdaki bölge kimlikleriyle doğrudan ilişkilendirilir. Bunlar, yeniden haritalama sırasında başka bir filtreleme seviyesi sağlar. Tablodaki belirli bir kayıtla ilişkili bölge kimliği yoksa, yeniden haritalamaya katılmaz.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "Her pikselin belirli bir konumla ilişkili bölgeleri tanımladığı tek bantlı bir raster. Bir bölge, girdi içinde aynı değere sahip olan tüm konumlar tarafından tanımlanır. Alanların sürekli olması gerekmez.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Tahmin boyutu değerleri sağlamak için kullanılan yöntemi belirtir.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>Değere Göre</strong>--Tahmin tek bir boyut değeri için hesaplanacaktır. Örneğin, 2050, 2100 ve 2150 yılları için yıllık yağış miktarını tahmin etmek istiyorsunuz. Varsayılan değerdir.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>Aralığa Göre</strong>--Tahmin, başlangıç ve bitiş değerleri ile tanımlanan boyutun bir aralığı için hesaplanır. Örneğin, 2050 ve 2150 arasındaki her yıl için yıllık yağış miktarını tahmin etmek istiyorsunuz.",
	"@@Predict-Using-Trend_end_tag0@@": "Tahminde kullanılacak boyut aralığının bitiş tarihi, yüksekliği veya derinliği.",
	"@@Predict-Using-Trend_end_tag1@@": "Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Aralığa Göre</strong> olarak ayarlanırsa gereklidir.",
	"@@Predict-Using-Trend_raster_tag0@@": "<strong>Trend Oluştur</strong> işlevinden girdi çok boyutlu trend rasterı.",
	"@@Predict-Using-Trend_start_tag0@@": "Tahminde kullanılacak boyut aralığının başlangıç tarihi, yüksekliği veya derinliği.",
	"@@Predict-Using-Trend_start_tag1@@": "Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Aralığa Göre</strong> olarak ayarlanırsa gereklidir.",
	"@@Predict-Using-Trend_unit_tag0@@": "Değer aralığı için kullanılacak birim. Bu parametre sadece analiz boyutu bir zaman boyutu olduğunda geçerlidir.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Saatler</strong>--Tahmin, <strong>Başlangıç</strong>, <strong>Bitiş</strong> ve <strong>Değer Aralığı</strong> parametreleriyle tanımlanan zaman aralığındaki her saat için hesaplanır.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Günler</strong>--Tahmin, <strong>Başlangıç</strong>, <strong>Bitiş</strong> ve <strong>Değer Aralığı</strong> parametreleriyle tanımlanan zaman aralığındaki her gün için hesaplanır.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Haftalar</strong>--Tahmin, <strong>Başlangıç</strong>, <strong>Bitiş</strong> ve <strong>Değer Aralığı</strong> parametreleriyle tanımlanan zaman aralığındaki her hafta için hesaplanır.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Aylar</strong>--Tahmin, <strong>Başlangıç</strong>, <strong>Bitiş</strong> ve <strong>Değer Aralığı</strong> parametreleriyle tanımlanan zaman aralığındaki her ay için hesaplanır.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Yıllar</strong>--Tahmin, <strong>Başlangıç</strong>, <strong>Bitiş</strong> ve <strong>Değer Aralığı</strong> parametreleriyle tanımlanan zaman aralığındaki her yıl için hesaplanır.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "Tahmine dahil edilecek iki boyut değeri arasındaki adım sayısı. Varsayılan değer 1'dır.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Aralığa Göre</strong> olarak ayarlanırsa gereklidir.",
	"@@Predict-Using-Trend_values_tag0@@": "Tahminde kullanılacak boyut değeri veya değerleri.",
	"@@Predict-Using-Trend_values_tag1@@": "Zaman, derinlik ve yükseklik değerlerinin biçimi, trend rasterını oluşturmak için kullanılan boyut değerlerinin biçimiyle eşleşmelidir. StdTime boyutu için trend rasterı oluşturulmuşsa, biçim YYYY-MM-DDTHH:MM:SS, örneğin, 2050-01-01T00:00:00 şeklinde olmalıdır. Birden çok değer noktalı virgülle ayrılır.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Birden çok dilimi daha az dilime veya tek bir dilime kümelemek için kullanılan raster işlevi şablonunu belirtin.",
	"@@Process-Raster-Collection_dimension_tag0@@": "Toplama boyutu. Bu, değişkenlerin toplanacağı boyuttur.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Girdi raster koleksiyonundaki her bir dilim veya ögeyi işlemek için kullanılan raster işlevi şablonunu belirtin.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Boyut boyunca toplama yapılırken kullanılacak anahtar sözcük aralığını belirtir. <strong>Tür</strong> <strong>Aralık Anahtar Sözcüğü</strong> olarak ayarlanırsa bu parametre gereklidir ve kümeleme zamana göre yapılmalıdır.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>Saatlik</strong>--Veri değerleri saatlik zaman adımlarında kümelenir ve sonuç zaman serisindeki her saati içerir.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Günlük</strong>--Veri değerleri günlük zaman adımlarında kümelenir ve sonuç zaman serisindeki her günü içerir.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Haftalık</strong>--Veri değerleri haftalık zaman adımlarında kümelenir ve sonuç zaman serisindeki her haftayı içerir.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>On günlük</strong>--Veri değerleri, her biri 10 günlük 3 dönemde kümelenir. Son dönem 10 günden az veya daha fazla gün içerebilir. Çıktı, her ay için 3 dilim içerir.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>Beş günlük</strong>--Veri değerleri, her biri 5 günlük 6 dönemde kümelenir. Son dönem 5 günden az veya daha fazla gün içerebilir. Çıktı, her ay için 6 dilim içerir.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Aylık</strong>--Veri değerleri aylık zaman adımlarında kümelenir ve sonuç zaman serisindeki her ayı içerir.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Üç Aylık</strong>--Veri değerleri üç aylık zaman adımlarında kümelenir ve sonuç zaman serisindeki her üç ayı içerir.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Yıllık</strong>--Veri değerleri yıllık zaman adımlarında kümelenir ve sonuç zaman serisindeki her yılı içerir.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Günlük olarak tekrarlanır</strong>--Veri değerleri günlük zaman adımlarında kümelenir ve sonuç her Jülyen günü için bir toplam değer içerir. Çıktı en fazla 366 günlük zaman dilimini içerir.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Haftalık tekrarlanır</strong>--Veri değerleri haftalık zaman adımlarında kümelenir ve sonuç her hafta için bir toplam değer içerir. Çıktı en fazla 53 haftalık zaman dilimini içerir.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Aylık tekrarlanır</strong>-- Veri değerleri Ay zaman adımlarında kümelenir ve sonuç her ay için bir toplam değer içerir. Çıktı en fazla 12 aylık zaman dilimini içerir.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Üç aylık olarak tekrarlanır</strong>--Veri değerleri üç aylık zaman adımlarında kümelenir ve sonuç her üç ay için bir toplam değer içerir. Çıktı en fazla 4 üç aylık zaman dilimini içerir.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "Bir aralık için maksimum değer.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Bu parametre, <strong>Tür</strong> parametresi <strong>Aralık Aralıkları</strong> olarak ayarlanırsa gereklidir.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "Bir aralık için minimum değer.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Bu parametre, <strong>Tür</strong> parametresi <strong>Aralık Aralıkları</strong> olarak ayarlanırsa gereklidir.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "İşlenen raster katmanını görüntülemek için raster işlevi şablonunu belirtin.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "Girdi çok boyutlu rasterı, mozaik katmanı veya mozaik veri kümesi.",
	"@@Process-Raster-Collection_type_tag0@@": "Verilerin toplanacağı boyut aralığını belirtir.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>Tümü</strong>--Tüm dilimlerdeki veri değerleri kümelenir. Varsayılan değerdir.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Aralık Anahtar Sözcüğü</strong>--Değişken verileri, genel olarak bilinen bir aralık kullanılarak kümelenir.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Aralık Aralıkları</strong>--Belirtilen değer çiftleri veya tarihler arasındaki değişken verileri kümelenir.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Aralık Değerleri</strong>--Değişken verileri, kullanıcı tarafından belirlenen bir aralık ve birim kullanılarak kümelenir.",
	"@@Process-Raster-Collection_unit_tag0@@": "Aralık değeri için kullanılacak birim. <strong>Boyut</strong> bir zaman alanı olduğunda ve <strong>Tür</strong> parametresi <strong>Aralık Değeri</strong> olarak ayarlanırsa bu parametre gereklidir.",
	"@@Process-Raster-Collection_unit_tag1@@": "Zaman dışında herhangi bir şey üzerinde toplama yapıyorsanız, bu seçenek kullanılamaz ve aralık değeri birimi girdi çok boyutlu raster verisinin değişken birimi ile eşleşir.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Saatler</strong>--Veri değerleri, sağlanan aralıklarla saatlik zaman dilimleri içinde kümelenir.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Günler</strong>--Veri değerleri, sağlanan aralıklarla günlük zaman dilimleri içinde kümelenir.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Haftalar</strong>--Veri değerleri, sağlanan aralıklarla haftalık zaman dilimleri içinde kümelenir.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Aylar</strong>--Veri değerleri, sağlanan aralıklarla aylık zaman dilimleri içinde kümelenir.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Yıllar</strong>--Veri değerleri, sağlanan aralıklarla yıllık zaman dilimleri içinde kümelenir.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "Toplama için kullanılacak aralık boyutu. Bu parametre, <strong>Tür</strong> parametresi <strong>Aralık Değeri</strong> olarak ayarlanırsa gereklidir.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "Örneğin, 30 yıllık aylık sıcaklık verilerini 5 yıllık artışlarla toplamak için <strong>Değer Aralığı</strong>’na 5 değerini girin ve <strong>Birim</strong>’i <strong>Yıllar</strong> olarak belirtin.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Çıktı piksel değerlerini tanımlamak için seçenekleri belirtir.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "İşaretli--Negatif çıktı değeri olmaz.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "İşaretli değil--Kesirli arazi örtüsünün negatif değerleri olabilir.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "Girdi rasterı.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "Girdi spektral profil dosyası.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "Farklı arazi örtüsü sınıfları için spektral bilgisi.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Spektral Profil</strong>-- <strong><strong>Maksimum Benzerlik Sınıflandırıcısını Eğit</strong></strong> aracından oluşturulan bir sınıflandırıcı tanım dosyası (${.ecd}) veya sınıf spektral profillerini içeren bir JavaScript Nesne Gösterim dosyası (${.json}).",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Eğitim Detayı</strong>--<strong>Eğitim Örnekleri Yöneticisi</strong>'nden oluşturulan çokgen detayları veya eğitim örneği detay sınıfı.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Çıktı piksel değerlerini tanımlamak için seçenekleri belirtir.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "İşaretli--Her piksel için sınıf değerleri, tüm sınıfların toplamı 1'e eşit olacak şekilde ondalık biçimde sağlanır. Örneğin, Sınıf1 = 0,16; Sınıf2 = 0,24; Sınıf3 = 0,60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "İşaretli değil--Bir pikseldeki tüm sınıfların toplamı 1’i geçebilir.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "Girdi eğitim detayı dosyası.",
	"@@Aggregate_aggregationtechnique_tag0@@": "Toplama için kullanılan yöntem. Daha kalın çıktı hücreleri tarafından kapsanan girdi hücrelerinin değerleri, aşağıdaki istatistiklerden biri ile kümelenir:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Toplam</strong>--Girdi hücrelerinin toplamı. Varsayılan değerdir.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Maksimum</strong>--Girdi hücrelerinin en büyük değeri.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Ortalama</strong>--Girdi hücrelerinin ortalama değeri.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Ortanca</strong>--Girdi hücrelerinin ortanca değeri.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Minimum</strong>--Girdi hücrelerinin en küçük değeri.",
	"@@Aggregate_cellfactor_tag0@@": "Girdi rasterının hücre boyutunun çarpılacağı faktör.",
	"@@Aggregate_cellfactor_tag1@@": "Örneğin, üç hücre katsayısı değeri, girdi raster değerinden üç kat daha büyük bir çıktı hücresi boyutuyla sonuçlanır.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Satırları veya sütunları hücre katsayısının bir katı olmadığında girdi rasterının sınırlarının nasıl işleneceğini tanımlar.",
	"@@Aggregate_expandextentifneeded_tag1@@": "İşaretli--Girdi rasterının üst veya sağ sınırlarını genişletir; böylece bir satır veya sütundaki toplam hücre sayısı hücre katsayısının bir katı olur. Bu seçenek ile çıktı rasterı girdi rasterından daha geniş bir mekansal yayılımı kaplayabilir. Varsayılan değerdir.",
	"@@Aggregate_expandextentifneeded_tag2@@": "İşaretli değil--Çıktı rasterındaki satır veya sütun sayısını azaltır. Bu, girdi rasterının üst veya sağ sınırlarında kalan hücreleri keserek girdi rasterındaki satır veya sütun sayısını hücre katsayısının bir katı haline getirir. Bu seçenek ile çıktı rasterı girdi rasterından daha küçük bir mekansal yayılımı kaplayabilir.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "${NoData} değerlerinin toplama hesaplaması tarafından göz ardı edilip edilmediğini belirtir.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "İşaretli--Çıktı rasterında daha büyük bir hücrenin mekansal kapsamına giren hücreler için ${NoData} değerleri varsa, çıktı hücresi konumları için değer belirlenirken ${NoData} değerlerinin yok sayılacağını belirtir. Çıktı değerinin belirlenmesinde sadece veri değeri olan çıktı hücrelerinin yayılımı içindeki girdi hücreleri kullanılır. Varsayılan değerdir.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "İşaretli değil--Çıktı rasterındaki daha büyük bir hücrenin mekansal kapsamına giren herhangi bir hücrenin değeri ${NoData} ise, o çıktı hücresi konumu için değerin ${NoData} olacağını belirtir. Bu seçenek kullanıldığında, bir kümeleme içindeki hücreler ${NoData} değerini içerdiğinde, bir çıktı değerini belirlemek için gerekli belirtilen hesaplamaları gerçekleştirmek için yeterli bilgi olmadığı anlamına gelir.",
	"@@Aggregate_raster_tag0@@": "Kümelenecek girdi rasterı.",
	"@@Expand_numberofcells_tag0@@": "Genişletilecek hücre sayısı.",
	"@@Expand_numberofcells_tag1@@": "Değer tamsayı olmalıdır ve 1 veya daha büyük olabilir.",
	"@@Expand_raster_tag0@@": "Tanımlanan bölgelerin genişletileceği girdi rasterı.",
	"@@Expand_raster_tag1@@": "Bir tamsayı türü olmalıdır.",
	"@@Expand_zonevalues_tag0@@": "Genişletilecek bölgeler listesi.",
	"@@Expand_zonevalues_tag1@@": "Bölge değerleri tamsayı olmalıdır ve herhangi bir sırada olabilir.",
	"@@Expand_zonevalues_tag2@@": "Birden fazla bölge tanımlarken bölge değerlerini ayırmak için boşluk kullanın.",
	"@@Multidimensional-Filter_dimension_tag0@@": "Değişkenlerin çıkartılacağı boyut.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Boyutu dilimlerken kullanılacak yöntemi belirtir.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>Tümü</strong>--Kullanılacak her boyut için tam aralık. Varsayılan değerdir.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>Değerlere Göre</strong>--Boyut bir boyut değeri veya değerler listesi kullanılarak dilimlenir.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>Aralıklara Göre</strong>--Boyut bir aralık veya aralıklar listesi kullanılarak dilimlenir.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>Yinelemeye Göre</strong>--Boyut belirtilen bir aralık boyutunda dilimlenir.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "İlk aralığın sonu. Bu aralık, veri kümesi boyunca yineleme yapmak için kullanılır. Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Yinelemeye Göre</strong> olarak ayarlandığında gereklidir.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "Aralık için maksimum değer. Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Aralıklara Göre</strong> olarak ayarlandığında gereklidir.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "Aralık için minimum değer. Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Aralıklara Göre</strong> olarak ayarlandığında gereklidir.",
	"@@Multidimensional-Filter_raster_tag0@@": "Girdi çok boyutlu rasterı.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>Tabloda belirtilen aralık aralıkları, değer gruplarını kümelemek için kullanılır. Minimum ve maksimum değerler dahil edilecek aralığı belirtir.</p><p><strong>Tür</strong>parametresi <strong>Aralık Aralıkları</strong> olarak ayarlanırsa bu parametre gereklidir.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "İlk aralığın başlangıcı. Bu aralık, veri kümesi boyunca yineleme yapmak için kullanılır. Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Yinelemeye Göre</strong> olarak ayarlandığında gereklidir.",
	"@@Multidimensional-Filter_step_tag0@@": "Verilerin dilimleneceği frekans. Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Yinelemeye Göre</strong> olarak ayarlandığında gereklidir. Varsayılan değer 3'tür.",
	"@@Multidimensional-Filter_unit_tag0@@": "Yineleme birimini belirtir. Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Yinelemeye Göre</strong> ve <strong>Boyut</strong> parametresi <strong>StdTime</strong> olarak ayarlandığında gereklidir.",
	"@@Multidimensional-Filter_value_tag0@@": "Belirtilen boyutun değeri. Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Değerlere Göre</strong> olarak ayarlandığında gereklidir.",
	"@@Multidimensional-Filter_variables_tag0@@": "Çıktı çok boyutlu raster katmanına dahil edilecek değişkenler. Herhangi bir değişken belirtilmezse, ilk değişken kullanılır.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Katmanda boyut değerleri olup olmayacağını belirtir. Bu seçenek sadece, bir katman oluşturmak için tek bir dilim seçildiğinde kullanılabilir.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "İşaretli--Katmanın boyut değerleri olmaz.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "İşaretli değil--Katmanın bir boyut değeri olur. Varsayılan değerdir.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "Enterpole edilen rasterın hücre boyutu. Varsayılan değer ${1}'dir.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "Düzensiz verileri enterpole etmek için kullanılacak yeniden örnekleme yöntemi.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>En Yakın Komşu</strong>--En yakın girdi pikseli kullanarak çıktı piksel değerini hesaplar. Hiçbir kaynak pikseli yoksa, çıktıda yeni bir piksel oluşturulamaz. Varsayılan değerdir.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>Lineer Üçgenleme</strong>--Düzensiz rasterdaki her bir pikselin merkez noktasından, daha sonra düzenli bir raster haline dönüştürülen bir yüzey enterpolasyonu yapmak için üçgenlenmiş düzensiz bir ağ kullanır.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Doğal Komşuluk</strong>--Girdi örneklerinin bir sorgu noktasına en yakın alt kümesini bulur ve bir değeri ara değerlemek için orantılı alanlara göre ağırlıklar uygular.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Ters Mesafe Ağırlıklama</strong>--Bir dizi örnek nokta veya pikselin lineer ağırlıklı bir kombinasyonunu kullanarak piksel değerlerini belirler. Ağırlık, bilinen noktalardan veya piksellerden olan mesafenin ters fonksiyonudur.",
	"@@Multidimensional-Raster_raster_tag0@@": "Girdi çok boyutlu rasterı.",
	"@@Multidimensional-Raster_variables_tag0@@": "Çok boyutlu raster katmanına dahil edilecek değişken veya değişkenler.",
	"@@Random_distribution_tag0@@": "Kullanılacak rastgele değer dağıtımı yöntemini belirtin.",
	"@@Random_distribution_tag1@@": "<strong>Tek biçimli</strong> (Minimum, Maksimum)--Tanımlı bir aralıkla tek biçimli dağıtım. Varsayılan değerler Minimum için 0 ve Maksimum için 1’dir. Varsayılan değerdir.",
	"@@Random_distribution_tag2@@": "<strong>Tam sayı</strong> (Minimum, Maksimum)--Tanımlı bir aralıkla tam sayılı dağıtım. Varsayılan değerler Minimum için 1 ve Maksimum için 10’dur.",
	"@@Random_distribution_tag3@@": "<strong>Normal</strong> (Ortalama, Standart Sapma)--Tanımlı bir ortalama ve standart sapma ile normal dağıtım. Varsayılan değerler Ortalama için 0 ve Standart Sapma için 1’dir.",
	"@@Random_distribution_tag4@@": "<strong>Üstel</strong> (Ortalama)--Tanımlı bir ortalama ile üstel dağıtım. Varsayılan değer 1'dır.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (Ortalama)--Tanımlı bir ortalama ile Poisson dağıtımı. Varsayılan değer 1'dır.",
	"@@Random_distribution_tag6@@": "<strong>Gamma</strong> (Alfa, Beta)--Tanımlı bir alfa ve beta ile gamma dağıtımı. Varsayılan değerler Alfa için 1 ve Beta için 1’dir.",
	"@@Random_distribution_tag7@@": "<strong>İki terimli</strong> (N, Olasılık)--Tanımlı bir N ve olasılık ile iki terimli dağıtım. Varsayılan değerler N için 10 ve Olasılık için 0,5’tir.",
	"@@Random_distribution_tag8@@": "<strong>Geometrik</strong> (Olasılık)--Tanımlı bir olasılık ile geometrik dağıtım. Varsayılan değer 0,5'tir.",
	"@@Random_distribution_tag9@@": "<strong>Negatif iki terimli</strong> (r, Olasılık)--Tanımlı bir r ve olasılık ile Pascal dağıtımı. Varsayılan değerler r için 10,0 ve Olasılık için 0,5’tir.",
	"@@Random_randomnumbergenerator_tag0@@": "Bir dizi rastgele sayı oluşturmak için çekirdek ve dağıtım kullanan rastgele sayı oluşturucu algoritmasını belirtin. Mevcut seçenekler aşağıdakilerdir:",
	"@@Random_randomnumbergenerator_tag1@@": "Standard C Rand",
	"@@Random_randomnumbergenerator_tag2@@": "ACM toplamalı algoritm 599",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "Varsayılan değer Mersenne Twister’dır.",
	"@@Random_rasterinfo_tag0@@": "Bir dizinden veya portaldan şablon yüklemek için <strong>Şablon rasterı yükle</strong> butonunu kullanın.",
	"@@Random_seed_tag0@@": "Çekirdek bir tamsayıdır ve rastgele sayı oluşturucunun ilk değerini vermek için kullanılır. Varsayılan değer 1'dır.",
	"@@Shrink_numberofcells_tag0@@": "Belirtilen her bölgenin küçültüleceği hücre sayısı.",
	"@@Shrink_numberofcells_tag1@@": "Değer tamsayı olmalıdır ve 1 veya daha büyük olabilir.",
	"@@Shrink_raster_tag0@@": "Tanımlanan bölgelerin küçültüleceği girdi rasterı.",
	"@@Shrink_raster_tag1@@": "Bir tamsayı türü olmalıdır.",
	"@@Shrink_zonevalues_tag0@@": "Küçültülecek bölgeler listesi.",
	"@@Shrink_zonevalues_tag1@@": "Bölge değerleri tamsayı olmalıdır ve herhangi bir sırada olabilir.",
	"@@Shrink_zonevalues_tag2@@": "Birden fazla bölge tanımlarken bölge değerlerini ayırmak için boşluk kullanın.",
	"@@Distance-Accumulation_costraster_tag0@@": "Her bir hücre içinde planimetrik olarak hareket etmenin maliyetini veya empedansını tanımlayan bir raster. Her hücre konumundaki değer, hücre içinde hareket etmek için birim başına maliyet mesafesini temsil eder. Her hücre konumu değeri hücre çözünürlüğü ile çarpılırken, aynı zamanda hücre içinden geçmenin toplam maliyetini elde etmek için çapraz (diyagonal) hareketi dengeler.",
	"@@Distance-Accumulation_costraster_tag1@@": "<strong>Maliyet Rasterı</strong>’nın değerleri tamsayı veya kayan nokta olabilir, ancak negatif veya sıfır olamaz.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Mesafenin bir düzlem (düz dünya) ya da bir jeodezik (elipsoid) yöntemi kullanarak hesaplanacağını belirler.",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Düzlemsel: Düzlemsel ölçümler uzunluk ve alanı hesaplamak için 2B Kartezyen matematiğini kullanır. Bu seçenek yalnızca izdüşümlendirilen bir koordinat sisteminde ölçüm yaparken kullanılabilir ve bu koordinat sisteminin 2B düzlemi ölçümler için temel olarak alınır.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Jeodezik: Bir küre (elips) üzerinde dünya yüzeyindeki iki nokta arasındaki en kısa çizgi. Bu nedenle girdi veya çıktı izdüşümünden bağımsız olarak sonuçlar değişmez.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Not:</strong> Bir jeodezik çizgiyi, bir uçağın uçuş yolu için iki şehir arasındaki en kısa mesafeyi belirlemek istediğiniz zaman kullanabilirsiniz. Bu, bir elipsten ziyade bir küreyi baz alıyorsa büyük bir çember hattı olarak da bilinir.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Yalnızca mesafe birikim rasterının mı oluşturulacağını yoksa hem mesafe birikim rasterı hem de arka yön rasterından oluşan çok bantlı bir raster mı oluşturulacağını belirler.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "İşaretli değil--Sonuç mesafe birikim rasterıdır. Bu, tek bantlı bir sonuçtur. Varsayılan değerdir.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "işaretli--Bir çok bantlı sonuç oluşturulur. İlk bant mesafe birikim rasterıdır ve ikinci bant arka yön rasterıdır.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "Arka yön rasterı, en yakın kaynağa giden en kısa yol boyunca komşu hücrenin yönünü engellerden kaçınarak, her hücre için derece cinsinden hesaplar.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Yatay maliyet faktörü ve yatay bağıl hareket açısı (HRMA) arasındaki ilişkiyi tanımlar.</p><p>Tanımlanmış bir dikey faktör grafiğini tanımlayan değiştiricili birkaç faktör bulunur. Ek olarak, özel bir grafik oluşturmak için bir tablo kullanılabilir. Grafikler, komşu bir hücreye taşınmanın toplam maliyetinin hesaplanmasında kullanılan dikey faktörü tanımlamak için kullanılır.</p><p>Aşağıdaki açıklamalarda, iki kısaltma kullanılmıştır: HF ve HRMA. HF, bir hücreden diğerine geçerken karşılaşılan yatay zorluğu tanımlayan yatay faktördür. HRMA, bir hücreden yatay yön ile hareket yönü arasındaki açıyı belirleyen yatay bağıl hareket açısıdır.</p><p><strong>Yatay faktör</strong>türler şunları içerir:</p><ul><li><strong>İkili</strong>--HRMA'nın kesme açısından küçük olması durumunda, HF’nin sıfır faktörüyle ilişkili değere ayarlandığını belirtir; aksi takdirde sonsuzdur.</li><li><strong>İleri</strong>--Sadece ileri harekete izin verildiğini belirler. HRMA, 0’a eşit veya büyük ve 90 dereceden küçük olmalıdır (0 &lt;= HRMA &lt; 90). HRMA 0'dan büyük ve 45 dereceden düşükse, hücrenin HF'si sıfır faktörüyle ilişkili değere ayarlanır. HRMA, 45 dereceden büyük veya eşitse, yan değer değiştirici değeri kullanılır. 90 dereceye eşit veya daha büyük herhangi bir HRMA değeri için HF sonsuz olarak ayarlanır.</li><li><strong>Lineer</strong>--HF'nin HRMA'nın lineer bir fonksiyon olduğunu belirtir.</li><li><strong>Ters Lineer</strong>--HF'nin HRMA'nın ters doğrusal bir fonksiyonu olduğunu belirtir.</li><li><strong>Tablo</strong>--HF'leri belirlemek için kullanılan yatay faktör grafiğini tanımlamak için bir tablo dosyasının kullanılacağını belirtir.</li></ul><p>Yatay faktör değiştiricileri aşağıdakileri içerir:</p><ul><li><strong>Sıfır faktörü</strong>--HRMA 0 olduğu zaman kullanılan yatay faktördür. Bu faktör, y-kesimini yatay faktör fonksiyonlarından herhangi biri için konumlandırır.</li><li><strong>Kesme açısı</strong>--HF'nin ötesinde kalanlar için sonsuz olarak ayarlanacağı HRMA açısını tanımlar.</li><li><strong>Eğim</strong>--<strong>Lineer</strong>ve<strong>Ters Lineer</strong>yatay faktör anahtar sözcükleriyle birlikte kullanılan düz çizginin eğimini belirler. Eğim, uzunluk boyunca yükselmenin bir kesri olarak belirtilir (örneğin, yüzde 45 eğim 1/45'tir, bu da 0,02222 olarak girilir).</li><li><strong>Yan değer</strong>--HRMA 45 dereceye eşit veya daha büyük ve 90 dereceden düşük olduğunda ve<strong>İleri</strong>yatay faktör anahtar sözcüğü belirtildiğinde HF’yi belirler.</li><li><strong>Tablo adı</strong>--HF'yi tanımlayan tablonun adını belirtir.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "Her hücredeki yatay yönü tanımlayan bir raster.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "Rasterdaki değerlerin 0 ile 360 arasında değişen, 0 derece kuzeyde veya ekranın üstünde bulunan bir tam sayı olması ve saat yönünde artması gerekir. Düz alanlara -1 değeri verilmelidir. Her bir konumdaki değerler, bir hücreden komşusu olan hücrelere geçerken ortaya çıkan yatay maliyeti belirlemek için <strong>Yatay faktör</strong> ile birlikte kullanılır.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "Maliyet hesaplamasına başlamak için başlangıç birikimli maliyeti. Bu parametre, bir kaynakla ilişkili sabit maliyetin belirtilmesi için kullanılır. 0 maliyetiyle başlamak yerine, maliyet algoritması belirtilen değerle başlar.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "Değer sıfır veya daha büyük olmalıdır. Varsayılan değer 0'dir.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Bir kaynak için yolcunun maksimum birikimli maliyetini tanımlar. Maliyet hesaplamaları, belirtilen kapasiteye ulaşılana kadar her kaynak için devam eder.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "Maliyet değerlerine uygulanacak bir çarpan.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Bu parametre bir seyahat modunun veya bir kaynaktaki büyüklüğün kontrolünü sağlar. Çarpan ne kadar büyükse, her bir hücreye geçmenin maliyeti o kadar artar.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "Değerler sıfırdan büyük olmalıdır. Varsayılan değer 1'dir.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "Engelleri tanımlayan raster.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "Veri kümesi hiçbir engel bulunmadığında NoData değerini içermelidir. Engeller, sıfır dahil geçerli değerler ile temsil edilir.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "Engeller bir tamsayı veya kayan noktalı raster ile tanımlanabilir.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "Girdi kaynak konumları.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Bu, her çıktı hücresi konumu için en az birikmiş maliyet mesafesinin hesaplandığı hücreleri veya konumları tanımlayan bir raster veri kümesidir.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Bu, bir tamsayı veya kayan noktalı tür olabilir.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "Her hücre konumundaki yükselti değerlerini tanımlayan bir raster.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "Değerler, hücreler arasında geçerken kapsanan gerçek yüzey mesafesini hesaplamak için kullanılır.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Dikey faktör, yatay faktör ve kaynak direnç oranını uygulama sırasında yolcunun yönünü tanımlar.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>Kaynaktan</strong>--Dikey faktör, yatay faktör ve kaynak direnç oranı, girdi kaynağından başlayıp kaynak olmayan hücrelere doğru giderek uygulanır. Varsayılan değerdir.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>Kaynağa</strong>--Dikey faktör, yatay faktör ve kaynak direnç oranı, kaynak olmayan hücrelerden başlayıp girdi kaynağına geri dönerek uygulanır.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Tüm kaynaklara uygulanacak <strong>Kaynaktan</strong> veya <strong>Kaynağa</strong> anahtar sözcüğünü belirtin veya <strong>Kaynak Raster</strong>'da her kaynağın seyahat yönünü tanımlayan anahtar sözcükleri içeren bir alan belirtin. Bu alanda ${FROM_SOURCE} veya ${TO_SOURCE} dizisi bulunmalıdır.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Dikey maliyet faktörü ve dikey bağıl hareket açısı (VRMA) arasındaki ilişkiyi tanımlar.</p><p>Tanımlanmış bir dikey faktör grafiğini tanımlayan değiştiricili birkaç faktör bulunur. Ek olarak, özel bir grafik oluşturmak için bir tablo kullanılabilir. Grafikler, komşu bir hücreye taşınmanın toplam maliyetinin hesaplanmasında kullanılan dikey faktörü tanımlamak için kullanılır.</p><p>Aşağıdaki açıklamalarda, iki kısaltma kullanılmıştır: VF ve VRMA. VF, bir hücreden diğerine geçerken karşılaşılan dikey zorluğu tanımlayan dikey faktördür. VRMA, FROM (nereden) veya işleme, hücre ve TO (nereye) hücresi arasındaki eğim açısını tanımlayan dikey bağıl hareket açısıdır.</p><p><strong>Dikey faktör</strong>türleri şunları içerir:</p><ul><li><strong>İkili</strong>--VRMA'nın düşük kesme açısından daha büyük ve yüksek kesme açısından daha küçük olması durumunda, VF’nin sıfır faktörüyle ilişkili değere ayarlandığını belirtir; aksi takdirde sonsuzdur.</li><li><strong>Lineer</strong>--VF'nin VRMA'nın lineer bir fonksiyon olduğunu belirtir.</li><li><strong>Simetrik Lineer</strong>--VF'nin, VRMA'nın sırasıyla VRMA'nın negatif veya pozitif tarafında lineer bir fonksiyon olduğunu ve iki lineer fonksiyonun VF (y) eksenine göre simetrik olduğunu belirtir.</li><li><strong>Ters Lineer</strong>--VF'nin VRMA'nın ters doğrusal bir fonksiyonu olduğunu gösterir.</li><li><strong>Simetrik Ters Lineer</strong>--VF'nin, sırasıyla VRMA'nın negatif veya pozitif tarafında VRMA'nın ters doğrusal bir fonksiyonu olduğunu ve iki doğrusal fonksiyonun VF (y) eksenine göre simetrik olduğunu belirtir.</li><li><strong>Cos</strong>--VF'yi VRMA'nın kosinüs temelli fonksiyonu olarak tanımlar.</li><li><strong>Sek</strong>--VF'yi VRMA'nın sekant temelli fonksiyonu olarak tanımlar.</li><li><strong>Kos-Sek</strong>--VF'nin, VRMA negatifken VRMA'nın kosinüs temelli fonksiyonu ve VRMA negatif olmadığında VRMA'nın sekant temelli fonksiyonu olduğunu belirtir.</li><li><strong>Sek-Kos</strong>--VF'nin, VRMA negatifken VRMA'nın kosinüs temelli fonksiyonu ve VRMA negatif olmadığında VRMA'nın sekant temelli fonksiyonu olduğunu belirtir.</li><li><strong>Tablo</strong>--VF'leri belirlemek için kullanılan dikey faktör grafiğini tanımlamak için bir tablo dosyasının kullanılacağını belirtir.</li></ul><p>Dikey anahtar sözcük değiştiricileri aşağıdakileri içerir:</p><ul><li><strong>Sıfır faktörü</strong>--VRMA sıfır olduğunda kullanılacak dikey faktörü belirler. Bu faktör, belirtilen fonksiyonun y-kesimini konumlandırır. Tanım olarak, sıfır faktörü, trigonometrik dikey fonksiyonların hiçbirine uygulanamaz (KOS, SEK, KOS-SEK veya SEK-KOS). Y-kesimi bu fonksiyonlarla tanımlanır.</li><li><strong>Düşük Kesim açısı</strong>--VF'nin altında kalanların sonsuz olarak ayarlanacağı VRMA açısını tanımlar.</li><li><strong>Yüksek Kesim açısı</strong>--VF'nin üstünde kalanların sonsuz olarak ayarlanacağı VRMA açısını tanımlar.</li><li><strong>Eğim</strong>--<strong>Lineer</strong>ve<strong>Ters Lineer</strong>dikey faktör anahtar sözcükleriyle kullanılan düz çizginin eğimini belirler. Eğim, uzunluk boyunca yükselmenin bir kesri olarak belirtilir (örneğin, yüzde 45 eğim 1/45'tir, bu da 0,02222 olarak girilir).</li><li><strong>Tablo adı</strong>--VF'yi tanımlayan tablonun adını belirtir.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Yatay maliyet faktörü ve dikey bağıl hareket açısı (VRMA) arasındaki ilişkiyi tanımlar.",
	"@@Distance-Accumulation_verticalraster_tag1@@": "Bu değerler, bir hücreden diğerine geçerken oluşan dikey faktörü tanımlamak için kullanılan eğimi hesaplamak için kullanılır.",
	"@@Distance-Allocation_costraster_tag0@@": "Her bir hücre içinde planimetrik olarak hareket etmenin maliyetini veya empedansını tanımlayan bir raster. Her hücre konumundaki değer, hücre içinde hareket etmek için birim başına maliyet mesafesini temsil eder. Her hücre konumu değeri hücre çözünürlüğü ile çarpılırken, aynı zamanda hücre içinden geçmenin toplam maliyetini elde etmek için çapraz (diyagonal) hareketi dengeler.",
	"@@Distance-Allocation_costraster_tag1@@": "<strong>Maliyet Rasterı</strong>’nın değerleri tamsayı veya kayan nokta olabilir, ancak negatif veya sıfır olamaz.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Mesafenin bir düzlem (düz dünya) ya da bir jeodezik (elipsoid) yöntemi kullanarak hesaplanacağını belirler.",
	"@@Distance-Allocation_distancemethod_tag1@@": "Düzlemsel: Düzlemsel ölçümler uzunluk ve alanı hesaplamak için 2B Kartezyen matematiğini kullanır. Bu seçenek yalnızca izdüşümlendirilen bir koordinat sisteminde ölçüm yaparken kullanılabilir ve bu koordinat sisteminin 2B düzlemi ölçümler için temel olarak alınır.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Jeodezik: Bir küre (elips) üzerinde dünya yüzeyindeki iki nokta arasındaki en kısa çizgi. Bu nedenle girdi veya çıktı izdüşümünden bağımsız olarak sonuçlar değişmez.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Not:</strong> Bir jeodezik çizgiyi, bir uçağın uçuş yolu için iki şehir arasındaki en kısa mesafeyi belirlemek istediğiniz zaman kullanabilirsiniz. Bu, bir elipsten ziyade bir küreyi baz alıyorsa büyük bir çember hattı olarak da bilinir.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Yatay maliyet faktörü ve yatay bağıl hareket açısı (HRMA) arasındaki ilişkiyi tanımlar.</p><p>Tanımlanmış bir dikey faktör grafiğini tanımlayan değiştiricili birkaç faktör bulunur. Ek olarak, özel bir grafik oluşturmak için bir tablo kullanılabilir. Grafikler, komşu bir hücreye taşınmanın toplam maliyetinin hesaplanmasında kullanılan dikey faktörü tanımlamak için kullanılır.</p><p>Aşağıdaki açıklamalarda, iki kısaltma kullanılmıştır: HF ve HRMA. HF, bir hücreden diğerine geçerken karşılaşılan yatay zorluğu tanımlayan yatay faktördür. HRMA, bir hücreden yatay yön ile hareket yönü arasındaki açıyı belirleyen yatay bağıl hareket açısıdır.</p><p><strong>Yatay faktör</strong>türler şunları içerir:</p><ul><li><strong>İkili</strong>--HRMA'nın kesme açısından küçük olması durumunda, HF’nin sıfır faktörüyle ilişkili değere ayarlandığını belirtir; aksi takdirde sonsuzdur.</li><li><strong>İleri</strong>--Sadece ileri harekete izin verildiğini belirler. HRMA, 0’a eşit veya büyük ve 90 dereceden küçük olmalıdır (0 &lt;= HRMA &lt; 90). HRMA 0'dan büyük ve 45 dereceden düşükse, hücrenin HF'si sıfır faktörüyle ilişkili değere ayarlanır. HRMA, 45 dereceden büyük veya eşitse, yan değer değiştirici değeri kullanılır. 90 dereceye eşit veya daha büyük herhangi bir HRMA değeri için HF sonsuz olarak ayarlanır.</li><li><strong>Lineer</strong>--HF'nin HRMA'nın lineer bir fonksiyon olduğunu belirtir.</li><li><strong>Ters Lineer</strong>--HF'nin HRMA'nın ters doğrusal bir fonksiyonu olduğunu belirtir.</li><li><strong>Tablo</strong>--HF'leri belirlemek için kullanılan yatay faktör grafiğini tanımlamak için bir tablo dosyasının kullanılacağını belirtir.</li></ul><p>Yatay faktör değiştiricileri aşağıdakileri içerir:</p><ul><li><strong>Sıfır faktörü</strong>--HRMA 0 olduğu zaman kullanılan yatay faktördür. Bu faktör, y-kesimini yatay faktör fonksiyonlarından herhangi biri için konumlandırır.</li><li><strong>Kesme açısı</strong>--HF'nin ötesinde kalanlar için sonsuz olarak ayarlanacağı HRMA açısını tanımlar.</li><li><strong>Eğim</strong>--<strong>Lineer</strong>ve<strong>Ters Lineer</strong>yatay faktör anahtar sözcükleriyle birlikte kullanılan düz çizginin eğimini belirler. Eğim, uzunluk boyunca yükselmenin bir kesri olarak belirtilir (örneğin, yüzde 45 eğim 1/45'tir, bu da 0,02222 olarak girilir).</li><li><strong>Yan değer</strong>--HRMA 45 dereceye eşit veya daha büyük ve 90 dereceden düşük olduğunda ve<strong>İleri</strong>yatay faktör anahtar sözcüğü belirtildiğinde HF’yi belirler.</li><li><strong>Tablo adı</strong>--HF'yi tanımlayan tablonun adını belirtir.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "Her hücredeki yatay yönü tanımlayan bir raster.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "Rasterdaki değerlerin 0 ile 360 arasında değişen, 0 derece kuzeyde veya ekranın üstünde bulunan bir tam sayı olması ve saat yönünde artması gerekir. Düz alanlara -1 değeri verilmelidir. Her bir konumdaki değerler, bir hücreden komşusu olan hücrelere geçerken ortaya çıkan yatay maliyeti belirlemek için <strong>Yatay faktör</strong> ile birlikte kullanılır.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "Maliyet hesaplamasına başlamak için başlangıç birikimli maliyeti. Bu parametre, bir kaynakla ilişkili sabit maliyetin belirtilmesi için kullanılır. 0 maliyetiyle başlamak yerine, maliyet algoritması belirtilen değerle başlar.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "Değer sıfır veya daha büyük olmalıdır. Varsayılan değer 0'dir.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Bir kaynak için yolcunun maksimum birikimli maliyetini tanımlar. Maliyet hesaplamaları, belirtilen kapasiteye ulaşılana kadar her kaynak için devam eder.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "Değer sıfırdan büyük olmalıdır. Varsayılan kapasite, çıktı rasterının kenarına kadardır.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "Maliyet değerlerine uygulanacak bir çarpan.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Bu parametre bir seyahat modunun veya bir kaynaktaki büyüklüğün kontrolünü sağlar. Çarpan ne kadar büyükse, her bir hücreye geçmenin maliyeti o kadar artar.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "Değerler sıfırdan büyük olmalıdır. Varsayılan değer 1'dir.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "Bu parametre için bir sayısal (çift) değer veya <strong>Kaynak Raster</strong>’dan bir alan kullanılabilir.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "Engelleri tanımlayan raster.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "Veri kümesi hiçbir engel bulunmadığında NoData değerini içermelidir. Engeller, sıfır dahil geçerli değerler ile temsil edilir.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "Engeller bir tamsayı veya kayan noktalı raster ile tanımlanabilir.",
	"@@Distance-Allocation_sourcefield_tag0@@": "Bu alan, kaynak konumlarına değer atamak için kullanılır. Bir tamsayı türü olmalıdır.",
	"@@Distance-Allocation_sourceraster_tag0@@": "Girdi kaynak konumları.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Bu, her çıktı hücresi konumu için en az birikmiş maliyet mesafesinin hesaplandığı hücreleri veya konumları tanımlayan bir raster veri kümesidir.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Sadece tahsis rasterının mı yoksa çok bantlı bir sonucun mu oluşturulacağını belirler.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "İşaretli değil--Sonuç mesafe tahsis rasterıdır. Bu, tek bantlı bir sonuçtur. Varsayılan değerdir.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "İşaretli--Bir çok bantlı raster oluşturulur. İlk bant mesafe tahsis rasterıdır, ikinci bant bir sıra indeksi içerir ve üçüncü bant bir sütun indeksi içerir. Bu indeksler, kaynak hücresinin en az birikmiş maliyet mesafesi olan konumunu belirler.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "Her hücre konumundaki yükselti değerlerini tanımlayan bir raster.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "Değerler, hücreler arasında geçerken kapsanan gerçek yüzey mesafesini hesaplamak için kullanılır.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Dikey faktör, yatay faktör ve kaynak direnç oranını uygulama sırasında yolcunun yönünü tanımlar.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>Kaynaktan</strong>--Dikey faktör, yatay faktör ve kaynak direnç oranı, girdi kaynağından başlayıp kaynak olmayan hücrelere doğru giderek uygulanır. Varsayılan değerdir.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>Kaynağa</strong>--Dikey faktör, yatay faktör ve kaynak direnç oranı, kaynak olmayan hücrelerden başlayıp girdi kaynağına geri dönerek uygulanır.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Tüm kaynaklara uygulanacak <strong>Kaynaktan</strong> veya <strong>Kaynağa</strong> anahtar sözcüğünü belirtin veya <strong>Kaynak Raster</strong>'da her kaynağın seyahat yönünü tanımlayan anahtar sözcükleri içeren bir alan belirtin. Bu alanda ${FROM_SOURCE} veya ${TO_SOURCE} dizisi bulunmalıdır.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Dikey maliyet faktörü ve dikey bağıl hareket açısı (VRMA) arasındaki ilişkiyi tanımlar.</p><p>Tanımlanmış bir dikey faktör grafiğini tanımlayan değiştiricili birkaç faktör bulunur. Ek olarak, özel bir grafik oluşturmak için bir tablo kullanılabilir. Grafikler, komşu bir hücreye taşınmanın toplam maliyetinin hesaplanmasında kullanılan dikey faktörü tanımlamak için kullanılır.</p><p>Aşağıdaki açıklamalarda, iki kısaltma kullanılmıştır: VF ve VRMA. VF, bir hücreden diğerine geçerken karşılaşılan dikey zorluğu tanımlayan dikey faktördür. VRMA, FROM (nereden) veya işleme, hücre ve TO (nereye) hücresi arasındaki eğim açısını tanımlayan dikey bağıl hareket açısıdır.</p><p><strong>Dikey faktör</strong>türleri şunları içerir:</p><ul><li><strong>İkili</strong>--VRMA'nın düşük kesme açısından daha büyük ve yüksek kesme açısından daha küçük olması durumunda, VF’nin sıfır faktörüyle ilişkili değere ayarlandığını belirtir; aksi takdirde sonsuzdur.</li><li><strong>Lineer</strong>--VF'nin VRMA'nın lineer bir fonksiyon olduğunu belirtir.</li><li><strong>Simetrik Lineer</strong>--VF'nin, VRMA'nın sırasıyla VRMA'nın negatif veya pozitif tarafında lineer bir fonksiyon olduğunu ve iki lineer fonksiyonun VF (y) eksenine göre simetrik olduğunu belirtir.</li><li><strong>Ters Lineer</strong>--VF'nin VRMA'nın ters doğrusal bir fonksiyonu olduğunu gösterir.</li><li><strong>Simetrik Ters Lineer</strong>--VF'nin, sırasıyla VRMA'nın negatif veya pozitif tarafında VRMA'nın ters doğrusal bir fonksiyonu olduğunu ve iki doğrusal fonksiyonun VF (y) eksenine göre simetrik olduğunu belirtir.</li><li><strong>Cos</strong>--VF'yi VRMA'nın kosinüs temelli fonksiyonu olarak tanımlar.</li><li><strong>Sek</strong>--VF'yi VRMA'nın sekant temelli fonksiyonu olarak tanımlar.</li><li><strong>Kos-Sek</strong>--VF'nin, VRMA negatifken VRMA'nın kosinüs temelli fonksiyonu ve VRMA negatif olmadığında VRMA'nın sekant temelli fonksiyonu olduğunu belirtir.</li><li><strong>Sek-Kos</strong>--VF'nin, VRMA negatifken VRMA'nın kosinüs temelli fonksiyonu ve VRMA negatif olmadığında VRMA'nın sekant temelli fonksiyonu olduğunu belirtir.</li><li><strong>Tablo</strong>--VF'leri belirlemek için kullanılan dikey faktör grafiğini tanımlamak için bir tablo dosyasının kullanılacağını belirtir.</li></ul><p>Dikey anahtar sözcük değiştiricileri aşağıdakileri içerir:</p><ul><li><strong>Sıfır faktörü</strong>--VRMA sıfır olduğunda kullanılacak dikey faktörü belirler. Bu faktör, belirtilen fonksiyonun y-kesimini konumlandırır. Tanım olarak, sıfır faktörü, trigonometrik dikey fonksiyonların hiçbirine uygulanamaz (KOS, SEK, KOS-SEK veya SEK-KOS). Y-kesimi bu fonksiyonlarla tanımlanır.</li><li><strong>Düşük Kesim açısı</strong>--VF'nin altında kalanların sonsuz olarak ayarlanacağı VRMA açısını tanımlar.</li><li><strong>Yüksek Kesim açısı</strong>--VF'nin üstünde kalanların sonsuz olarak ayarlanacağı VRMA açısını tanımlar.</li><li><strong>Eğim</strong>--<strong>Lineer</strong>ve<strong>Ters Lineer</strong>dikey faktör anahtar sözcükleriyle kullanılan düz çizginin eğimini belirler. Eğim, uzunluk boyunca yükselmenin bir kesri olarak belirtilir (örneğin, yüzde 45 eğim 1/45'tir, bu da 0,02222 olarak girilir).</li><li><strong>Tablo adı</strong>--VF'yi tanımlayan tablonun adını belirtir.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Yatay maliyet faktörü ve dikey bağıl hareket açısı (VRMA) arasındaki ilişkiyi tanımlar.",
	"@@Distance-Allocation_verticalraster_tag1@@": "Bu değerler, bir hücreden diğerine geçerken oluşan dikey faktörü tanımlamak için kullanılan eğimi hesaplamak için kullanılır.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "Çıktı rasterının oluşturulacağı hücre boyutu.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Hücre boyutu <strong>Ortamlar</strong>’da açıkça belirtilmişse, varsayılan hücre boyutu olur. Ayarlanmadığında, çıktı hücre boyutu <strong>Kaynak Raster</strong> ile aynı olur.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Mesafenin bir düzlem (düz dünya) ya da bir jeodezik (elipsoid) yöntemi kullanarak hesaplanacağını belirler.",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Düzlemsel: Düzlemsel ölçümler uzunluk ve alanı hesaplamak için 2B Kartezyen matematiğini kullanır. Bu seçenek yalnızca izdüşümlendirilen bir koordinat sisteminde ölçüm yaparken kullanılabilir ve bu koordinat sisteminin 2B düzlemi ölçümler için temel olarak alınır.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Jeodezik: Bir küre (elips) üzerinde dünya yüzeyindeki iki nokta arasındaki en kısa çizgi. Bu nedenle girdi veya çıktı izdüşümünden bağımsız olarak sonuçlar değişmez.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Not:</strong> Bir jeodezik çizgiyi, bir uçağın uçuş yolu için iki şehir arasındaki en kısa mesafeyi belirlemek istediğiniz zaman kullanabilirsiniz. Bu, bir elipsten ziyade bir küreyi baz alıyorsa büyük bir çember hattı olarak da bilinir.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "İçinde kalan en yakın kaynağa giden yönün hesaplanacağı eşik mesafesini tanımlar. En yakın kaynağa olan mesafe bunu aşarsa, bu hücrenin çıktısı NoData olur.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "Varsayılan mesafe, çıktı rasterının yayılımına kadardır.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "Engelleri tanımlayan raster.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "Veri kümesi hiçbir engel bulunmadığında NoData değerini içermelidir. Engeller, sıfır dahil geçerli değerler ile temsil edilir.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "Engeller bir tamsayı veya kayan noktalı raster ile tanımlanabilir.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "Her çıktı hücresi konumu için Öklid yönünün hesaplandığı hücreleri veya konumları tanımlayan bir raster veri kümesi.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "Girdi türü bir tamsayı veya kayan noktalı tür olabilir.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "En düşük maliyetli yol aracılığıyla bir kaynağa geri dönüş yolunu belirlemek için kullanılan bir maliyet geri bağlantı rasterı katmanının adı.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "Geri bağlantı rasterındaki her hücre için bir değer, hücreden tek bir kaynak hücreye veya bir dizi kaynak hücreye giden en az birikmiş maliyet yolundaki bir sonraki hücre olan komşuyu tanımlar.",
	"@@Cost-Path_costdistanceraster_tag0@@": "Hedef konumlardan bir kaynağa en düşük maliyetli yolu belirlemek için kullanılacak maliyet mesafe rasterının adı.",
	"@@Cost-Path_costdistanceraster_tag1@@": "Maliyet mesafe rasterı, genellikle Maliyet Mesafesi, Maliyet Atama veya Düşük Maliyetli Hat fonksiyonu ile oluşturulur. Maliyet mesafe rasterı katmanında, her bir hücre için, bir maliyet yüzeyindeki her bir hücreden bir dizi kaynak hücreye giden en az birikmiş maliyet mesafesi saklanır.",
	"@@Cost-Path_destinationfield_tag0@@": "Hedef konum değerleri almak için kullanılan alan. Girdi detay verisi en az bir geçerli alan içermelidir.",
	"@@Cost-Path_destinationraster_tag0@@": "En az maliyetli kaynağa en az maliyetli yolun belirlendiği hücreleri tanımlayan bir raster veri kümesi katmanı.",
	"@@Cost-Path_destinationraster_tag1@@": "Girdi rasterı katmanı geçerli değerlere sahip olan hücrelerden oluşur (sıfır geçerli bir değerdir) ve kalan hücreler NoData (Verisiz) olarak belirlenmelidir.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "İşlevi, girdi geri bağlantı rasterını bir akış yönü rasterı olarak değerlendirmeye zorlar. Akış yönü rasterlarında 0-255 arasında bir değerde tamsayılar olabilir.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "İşaretli değil--Belirtilen geri bağlantı rasterının değerleri 0-8 aralığında tamsayılarsa, veri kümesi bir maliyet geri bağlantı rasterı olarak değerlendirilir. Değerler 0-255 arasındaysa, girdi bir akış yönü rasterı olarak değerlendirilir. Değerler 0-360 arasında ve kayan noktaysa, girdi bir arka yön rasterı olarak değerlendirilir.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "İşaretli--Geri bağlantı rasterı için sağlanan raster, bir akış yönü rasterı olarak değerlendirilir. Akış yönü rasterının değeri maksimum 8 veya daha düşükse bu seçeneği kullanın.",
	"@@Cost-Path_pathtype_tag0@@": "Girdi hedef verisindeki değerler ve bölgelerin maliyet yolu hesaplamalarında nasıl yorumlanacağını tanımlayan anahtar sözcük. Seçenekler şu şekildedir:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Her Hücre</strong>--Girdi hedef verilerinde geçerli değerlere sahip her hücre için en az maliyetli yol belirlenir ve çıktı rasterında kaydedilir. Bu seçenekle, girdi hedef verilerinin her bir hücresi ayrı ayrı ele alınır ve her hücre için en az maliyetli yol belirlenir.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Her Bölge</strong>--Girdi hedef verilerindeki her bölge için en az maliyetli yol belirlenir ve çıktı rasterında kaydedilir. Bu seçenekle, her bölge için en düşük maliyetli yol, bölgedeki en düşük maliyetli mesafe ağırlıklandırmasına sahip hücrede başlar.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>En İyi Tek</strong>--Girdi hedef verilerindeki tüm hücreler için en düşük maliyetli yol, kaynak hücrelere giden en düşük maliyetli yolun minimum olanına sahip hücreden türetilir.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücre boyutları aynıysa, tüm seçenekler aynı sonuçları verecektir.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "İlki--Girdi rasterlarının ilk hücre boyutunu kullanır.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Minimumu--Girdi rasterlarının en küçük hücre boyutunu kullanır.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Maksimumu--Girdi rasterlarının en büyük hücre boyutunu kullanır. Varsayılan değerdir.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Ortalaması--Girdi rasterlarının ortalama hücre boyutunu kullanır.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Sonuncusu--Girdi rasterlarının son hücre boyutunu kullanır.",
	"@@Cell-Statistics_extenttype_tag0@@": "Çıktı rasterında hangi yayılımı kullanacağınızı seçin:",
	"@@Cell-Statistics_extenttype_tag1@@": "İlki--İşlem yayılımını belirlemek için ilk girdi rasterının yayılımını kullanır.",
	"@@Cell-Statistics_extenttype_tag2@@": "Kesişimi--İşlem yayılımını belirlemek için çakışan piksellerin yayılımını kullanır. Varsayılan değerdir.",
	"@@Cell-Statistics_extenttype_tag3@@": "Birleşimi--İşlem yayılımını belirlemek için tüm rasterların yayılımını kullanır.",
	"@@Cell-Statistics_extenttype_tag4@@": "Sonuncusu--İşlem yayılımını belirlemek için son girdi rasterının yayılımını kullanır.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Girdi rasterı bantlarının nasıl işleneceğini belirler.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "İşaretli değil--Tüm çok bantlı girdiler tekli bantlar olarak işlenir. Varsayılan değerdir.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "İşaretli--Tüm çok bantlı girdiler çok bantlı olarak işlenir.",
	"@@Cell-Statistics_rasters_tag0@@": "İstatistikleri hesaplamak için kullanılan rasterların piksel-piksel tabanında listesi.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Belirtilen yüzdelik değer iki girdi hücresi değeri arasında olduğunda kullanılacak enterpolasyon yöntemini belirtir.</p><ul><li><strong>Otomatik algılama</strong>--Girdi rasterlar tamsayı piksel türüyse, <strong>En Yakın</strong>yöntemi kullanılır. Girdi rasterı kayan noktalı piksel türündeyse, <strong>Lineer</strong>yöntemi kullanılır. Varsayılan budur.</li><li><strong>En yakın</strong>--İstenilen yüzdeye en yakın mevcut değer kullanılır. Bu durumda çıktı piksel türü, girdi değer rasterının türü ile aynıdır.</li><li><strong>Lineer</strong>--İstenilen yüzdelik dilimden iki çevreleyen değerin ağırlıklı ortalaması kullanılır. Bu durumda çıktı piksel türü, kayan noktadır.</li></ul><p>Bu seçenek yalnızca <strong>İşlem</strong>türü parametre <strong>Ortanca</strong>veya<strong>Yüzde</strong> olarak ayarlanmışsa kullanılabilir.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>Hesaplanacak olan yüzde. Yüzde 90 için varsayılan 90’dır.</p><p>Değerler 0 ile 100 arasında değişebilir. Yüzde 0, temelde minimum istatistiğe ve yüzde 100, maksimum istatistiğe eşittir. 50 değeri, temelde ortanca istatistiğiyle aynı sonucu üretir.</p><p>Bu seçenek yalnızca <strong>İşlem</strong>parametresi <strong>Yüzde</strong> olarak ayarlanmışsa kullanılabilir.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "Geri yönü rasterı derece cinsinden hesaplanmış yönler içerir. Yön, engellerden kaçınırken en az birikimli maliyet kaynağına en uygun yol boyunca bir sonraki hücreyi tanımlar.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "Değer aralığı 0 derece 360 derece arasıdır ve kaynak hücreler için 0 ayrılmıştır. Doğu (sağ) 90’dır ve değerler saat yönünde artar (180 güney, 270 batı ve 360 kuzey).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "Hedef konum değerleri almak için kullanılan alan.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "En az maliyetli kaynağa en uygun yolun belirlendiği hücreleri tanımlayan bir raster veri kümesi katmanı. Bu girdi gereklidir.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "Girdi rasterı katmanı geçerli değerlere sahip olan hücrelerden oluşur (sıfır geçerli bir değerdir) ve kalan hücreler NoData (Verisiz) olarak belirlenmelidir.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "Mesafe birikim rasterı, hedeflerden kaynaklara en uygun yolu belirlemek için kullanılır. Mesafe birikim rasterı genellikle <strong>Mesafe Birikim</strong> fonksiyonu ile oluşturulur. Mesafe birikim rasterındaki her hücre, hücrelerden kaynak hücre kümesine bir yüzey üzerinde en az birikmiş maliyet mesafesini temsil eder.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Girdi hedef verisindeki değerler ve bölgelerin maliyet yolu hesaplamalarında nasıl yorumlanacağını tanımlayan anahtar sözcüğü belirtir.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Her Bölge</strong>--Girdi hedef verilerindeki her bölge için en az maliyetli yol belirlenir ve çıktı rasterında kaydedilir. Bu seçenekle, her bölge için en uygun yol, bölgedeki en düşük maliyetli mesafe ağırlıklandırmasına sahip hücrede başlar.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>En İyi Tek</strong>--Girdi hedef verilerindeki tüm hücreler için en uygun yol, kaynak hücrelere giden en düşük maliyetli yolun minimum olanına sahip hücreden türetilir.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Her Hücre</strong>--Girdi hedef verilerinde geçerli değerlere sahip her hücre için en uygun yol belirlenir. Bu seçenekle, girdi hedef verilerinin her bir hücresi ayrı ayrı ele alınır ve her hücre için en uygun yol belirlenir.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "Değişiklik algılama için kullanılacak bant kimlikleri. Herhangi bir bant kimliği verilmemişse, girdi rasterı veri kümesinden tüm bantlar kullanılır.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "Kimlik değerleri boşluklarla ayrılmış tamsayılar olmalıdır.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "Bulut, bulut gölgesi ve kar maskelemek için kullanılacak yeşil bant ve SWIR bandının bant kimlikleri. Herhangi bir bant kimliği verilmezse, maskeleme gerçekleşmez.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "Kimlik değerleri boşluklarla ayrılmış tamsayılar olmalıdır.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Bu parametre bulut, bulut gölgesi ve kar maskelemek için kullanılacak bantları belirtir. Bulut gölgesi ve kar, kısa dalga kızılötesi (SWIR) bantta çok karanlık göründüğünden ve bulutlar ve kar yeşil bantta çok parlak göründüğünden, SWIR ve yeşil bantlar için bant indekslerinin maskelenmesi önerilir.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "Ki-kare değişiklik olasılığı eşiği. Bir gözlemde bu eşiğin üzerinde hesaplanmış bir değişiklik olasılığı varsa, bir anomali olarak işaretlenir, bu da olası bir değişiklik olayıdır. Varsayılan değer 0,99'dur.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "Bir olaydan önce meydana gelmesi gereken minimum ardışık anomali gözlemlerinin sayısı bir değişiklik olarak kabul edilir. Bir piksel, gerçek bir değişiklik olarak kabul edilmeden önce, belirtilen sayıda ardışık zaman dilimi için bir anomali olarak işaretlenmelidir. Varsayılan değer 6'dır.",
	"@@CCDC-Analysis_raster_tag0@@": "Girdi çok boyutlu raster katmanı.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "Zaman serisi modelini yeni gözlemlerle güncelleme sıklığı. Varsayılan, modeli yılda 1 güncellemektir.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Bu parametre, zaman serisi modelinin yeni gözlemlerle ne sıklıkta güncelleneceğini tanımlar. Bir modeli sık güncellemek hesaplama açısından maliyetli olabilir ve gerektiği kadar faydalı olmayabilir. Örneğin, çok boyutlu rasterda her yıl için 365 dilim veya net gözlemler varsa ve güncelleme sıklığı her gözlem içinse işlem, yılda bir kez güncellenmeye kıyasla 365 kat daha pahalı olacaktır ancak doğruluğu daha yüksek olmayabilir.",
	"@@Trend-To-RGB_modeltype_tag0@@": "RGB’ye dönüştürülecek model bilgilerinin türü.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Lineer--Lineer trend bilgisi RGB’ye dönüştürülür. Varsayılan değerdir.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Harmonik--Harmonik trend bilgisi RGB’ye dönüştürülür.",
	"@@Trend-To-RGB_raster_tag0@@": "Girdi trend rasterı.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>En iyi model oranı değeri. Model seçim işlemi sırasında araç, her model için p değerini hesaplar ve bu oran değerine göre en küçük (en önemli) p değerini korurken en çok köşeye sahip modeli seçer. 1 değeri, modelin en düşük p değerine sahip olduğu ancak yüksek sayıda köşeye sahip olmayabileceği anlamına gelir. Varsayılan değer 1,25'tir.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>Her piksel için zaman serisine sığdırılacak maksimum segment sayısı. Varsayılan değer 5'tir.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>Sığdırma için gerekli minimum geçerli gözlem sayısı. Girdi çok boyutlu veri kümesindeki yıl sayısı bu değere eşit veya daha büyük olmalıdır. Varsayılan değer 6'dır.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Diğer bantların sonuçlara dahil edilip edilmeyeceğini belirtir.</p><ul><li>İşaretli--Diğer bantlar sonuçlara dahil edilir. <strong>İşleme Bandı</strong> parametresinde belirtilen ilk kesimleme bandından gelen kesimleme ve köşe bilgileri, çok bantlı görüntülerde kalan bantlara da sığdırılır. Model sonuçlarına önce kesimleme bandı, ardından kalan bantlar dahil edilir.</li><li>İşaretlenmeyen diğer bantlar dahil edilmez. Varsayılan budur.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Bir yıllık kurtarmalı segmentlerin dışarıda tutulup tutulmayacağını belirtir.</p><ul><li>Bir yıllık kurtarmalı işaretli segmentler dışarıda tutulur. Varsayılan budur.</li><li>Bir yıllık kurtarmalı işaretlenmemiş segmentler dışarıda tutulmaz.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>Zaman içinde piksel değeri yörüngelerini kesimlemek için kullanılacak bant. Gözlemlemek istediğiniz detaydaki değişiklikleri en iyi yakalayacak bandı seçin.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>Seçilecek model için p değeri eşiği. Model sığdırmanın ilk aşamasında köşeler tespit edildikten sonra araç, her segmenti sığdıracak ve p değerini hesaplayarak modelin önemini belirleyecektir. Bir sonraki yinelemede model, segment sayısını bir azaltır ve p değerini yeniden hesaplar. Bu devam eder ve p değeri bu parametrede belirtilen değerden daha küçükse, model seçilir ve araç daha iyi bir model aramayı bırakır. Böyle bir model seçilmezse araç, p değeri <strong>en düşük p değeri × en iyi model oran değerinden daha küçük olan bir model seçer</strong>. Varsayılan 0,01'dir.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>Girdi Landsat çok boyutlu raster katmanı.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Kurtarmanın artan (pozitif) bir trend olup olmadığını belirtir.</p><ul><li>İşaretli--Kurtarmanın artan bir trendi vardır. Varsayılan budur.</li><li>İşaretli değil--Kurtarmanın azalan bir trendi vardır.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>Yıl cinsinden kurtarma eşik değeri. Bir segmentin kurtarma oranı <strong>1/kurtarma eşiğinden</strong> daha hızlıysa, segment atılır ve zaman serisi modeline dahil edilmez. Değer 0 ile 1 arasında olmalıdır. Varsayılan 0,25'tir.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>Girdi çok boyutlu veri kümesinde her yıl için bir dilim seçmek için kullanılan tarih. Yakalama tarihine en yakın tarihli dilim seçilir. Girdi veri kümesi alt yıllık veriler içeriyorsa, bu parametre gereklidir.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>Piksel değeri yörüngesindeki artışları veya anormallikleri azaltmak için kullanılacak eşik. Değer 0 ila 1 arasında olmalıdır; 1, azaltma olmadığı anlamına gelir. Varsayılan 0,9'dur.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>Köşelerin tanımlanmasının ilk aşamasında modeli sığdırmak için kullanılabilecek <strong>max_num_segments + 1</strong>'in ötesindeki ek köşe sayısı. Daha sonra modelleme işleminde ek köşe sayısı <strong>max_num_segments + 1</strong>'e indirilir. Varsayılan 2'dir.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>Birleştirilecek girdi raster veri kümeleri veya çok boyutlu raster veri kümeleri.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Birleştirilmiş veri kümelerinde çakışan pikselleri çözmek için kullanılacak yöntemi belirtir.</p><ul><li><strong>Birinci</strong>--Çakışan alanlardaki piksel değeri, girdi rasterları listesindeki ilk rasterdan alınan değerdir. Varsayılan budur.</li><li><strong>Son</strong>--Çakışan alanlardaki piksel değeri, girdi rasterlar listesindeki son rasterdan gelen değerdir.</li><li><strong>Min</strong>--Çakışan alanlardaki piksel değeri, çakışan piksellerin minimum değeridir.</li><li><strong>Maks</strong>--Çakışan alanlardaki piksel değeri, çakışan piksellerin maksimum değeridir.</li><li><strong>Ortalama</strong>--Çakışan alanlardaki piksel değeri, çakışan piksellerin ortalamasıdır.</li><li><strong>Toplam</strong>--Çakışan alanlardaki piksel değeri, çakışan piksellerin toplamıdır.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Harmonik döngünün uzunluğu boyunca kullanılacak zaman birimini belirtir.</p><ul><li><strong>Günler</strong>--Harmonik döngünün uzunluk birimi günlerdir.</li><li><strong>Yıllar</strong>--Harmonik döngünün uzunluk birimi yıllardır. Varsayılan budur.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>Analizde seçilen değişken veya değişkenler için bir trendin çıkarılacağı boyut.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>Sığdırılan trendde kullanılacak sıklık sayısı. Bu parametre bir yıl içindeki döngü sıklığını belirtir. Varsayılan değer 1 veya yılda bir harmonik döngüdür.</p><p>Bu parametre trend analizine sadece harmonik regresyon için dahil edilir.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>NoData değerlerin analizde göz ardı edilip edilmeyeceğini belirtir.</p><ul><li>İşaretli—Analizde verilen bir boyut boyunca geçerli olan tüm pikseller yer alır ancak NoData pikselleri dikkate alınmaz. Varsayılan budur.</li><li>İşaretli değil—Verilen boyut boyunca pikseller için herhangi bir NoData değeri varsa, analiz NoData ile sonuçlanır.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>Modellenecek dönemsel varyasyonun uzunluğu. Birim, girdi verilerinin zaman biriminden bağımsız olarak gündür. Örneğin, yaprak yeşilliği genellikle, tek bir yıl içinde güçlü bir değişim döngüsüne sahiptir; bu nedenle girdi verileri aylık yeşillik olsa bile döngü uzunluğu 365,25'tir. Saatlik sıcaklık verilerinin bir gün boyunca güçlü bir varyasyon döngüsü vardır; bu nedenle döngü uzunluğu 1 gündür.</p><p>Yıllık döngüde değişim gösteren veriler için varsayılan uzunluk 365,25'tir.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Trend çizgisinin eğim katsayısı için p değeri istatistiğinin hesaplanıp hesaplanmayacağını belirtir.</p><ul><li>İşaretli—İşlev tamamlandığında p değeri hesaplanır ve ayrıntılarda görüntülenir.</li><li>İşaretli değil—P değeri hesaplanmaz. Varsayılan budur.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>Sığan trendde kullanılacak üstel sıra sayısı. Bu parametre üstel sırayı belirtir. Varsayılan değer 2 veya ikinci dereceden polinomdur.</p><p>Bu parametre trend analizine sadece polinom regresyon için dahil edilir.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Trend sığdırma çizgisi için R kare uygunluk istatistiğinin hesaplanıp hesaplanmayacağını belirtir.</p><ul><li>İşaretli--İşlev tamamlandığında R-kare hesaplanır ve ayrıntılarda görüntülenir.</li><li>İşaretli değil--R kare hesaplanmaz. Varsayılan budur.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>Girdi çok boyutlu rasterı.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Trend sığdırma çizgisinin ortalama karekök hatasının (RMSE) oluşturulup oluşturulmayacağını belirtir.</p><ul><li>İşaretli--Fonksiyon tamamlandığında RMSE hesaplanır ve ayrıntılarda görüntülenir. Varsayılan budur.</li><li>İşaretli değil--RMSE hesaplanmaz.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Mevsimsel-Kendall testi yapılırken bir mevsimsel dönem uzunluğu için kullanılacak zaman birimini belirtir.</p><ul><li>Günler--Mevsimsel dönemin uzunluk birimi günlerdir. Varsayılan budur.</li><li>Aylar--Mevsimsel dönemin uzunluk birimi aylardır.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Bir boyut boyunca piksel değerlerini sığdırmak için kullanılacak çizginin türünü belirtir.</p><ul><li><strong>Lineer</strong>--Bir lineer trend çizgisi boyunca bir değişken için piksel değerlerini sığdırır. Varsayılan budur.</li><li><strong>Harmonik</strong>--Harmonik trend çizgisi boyunca bir değişkenin piksel değerlerine sığar.</li><li><strong>Polinom</strong>--İkinci dereceden bir polinom trend çizgisi boyunca bir değişkenin piksel değerlerine sığar.</li><li><strong>Mann-Kendall</strong>--Değişken piksel değerleri Mann-Kendall trend testi kullanılarak değerlendirilir.</li><li><strong>Mevsimsel Kendall</strong>--Değişken piksel değerleri, Mevsimsel-Kendall trend testi kullanılarak değerlendirilir.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücresi boyutları aynıysa, tüm seçenekler aynı sonuçları verir.</p><ul><li>Birincisi--Girdi rasterların birinci hücre boyutunu kullanır.</li><li>Minimumu--Tüm girdi rasterların en küçük hücre boyutunu kullanır.</li><li>Maksimumu--Tüm girdi rasterların en büyük hücre boyutunu kullanır. Varsayılan budur.</li><li>Ortalaması--Tüm girdi rasterların ortalama hücre boyutunu kullanır.</li><li>Sonuncusu--Tüm girdi rasterların son hücre boyutunu kullanır.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>Hesaplama yöntemi.</p><ul><li><strong>Fark</strong>--Girdi rasterlarında piksel değerleri arasındaki matematiksel fark veya çıkarma hesaplanır. Varsayılan budur.</li><li><strong>Göreli Fark</strong>--Karşılaştırılan değerlerin büyüklüklerine karşılık gelen piksel değerleri arasındaki fark hesaplanır.</li><li><strong>Kategorik Fark</strong>--İki kategorik veya tematik raster arasındaki fark hesaplanır; burada çıktı iki raster arasında meydana gelen sınıf geçişlerini içerir.</li><li><strong>Spektral Öklidyen Mesafe</strong>--İki çok bantlı rasterın piksel değerleri arasındaki Öklidyen mesafe hesaplanır.</li><li><strong>Spektral Açık Farkı</strong>--İki çok bantlı rasterın piksel değerleri arasındaki spektral açı hesaplanır. Çıktı radyan cinsindendir.</li><li><strong>En Fazla Değişikliği İçeren Bant</strong>--İki çok bantlı raster arasındaki her pikselde en fazla değişikliğe karşılık gelen bant hesaplanır.</li></ul><p>Eğer<strong>Değişikliği Hesapla Yöntemi</strong> <strong>Kategorik Fark</strong> olarak ayarlanırsa ve girdilerden biri kategorik değilse, basit fark hesaplanır.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Sınıfları değiştirmiş pikselleri sembolize etmek için kullanılacak yöntemi belirtin.</p><ul><li><strong>Renklerden ve Renklere Ortalama</strong>--Pikselin rengi, orijinal sınıfının renginin ve son sınıfının renginin ortalaması olur.</li><li><strong>Renklerden Kullan</strong>--Pikselin rengi orijinal sınıfının rengi olur.</li><li><strong>Renklere Kullan</strong>--Pikselin rengi son sınıfının rengi olur.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Çıktı rasterında hangi yayılımın kullanılacağını seçin:</p><ul><li>Birincisi--İşleme yayılımını belirlemek için ilk girdi rasterının yayılımını kullanın.</li><li>Kesişimi--İşleme yayılımını belirlemek için çakışan piksellerin yayılımını kullanın. Varsayılan budur.</li><li>Birleşimi--İşleme yayılımını belirlemek için tüm rasterların yayılımını kullanın.</li><li>Sonuncusu--İşleme yayılımını belirlemek için son girdi rasterının yayılımını kullanın.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Kategorik değişiklik hesaplaması için filtreleme yöntemini seçin.</p><ul><li><strong>Tümünü Tut</strong>--Tüm sınıflar çıktıya dahil edilir ve filtreleme yapılmaz. Tek veri kümesinde değişim ve sürekliliği görmek için bu seçeneği işaretleyin.</li><li><strong>Sadece Değiştirilen Pikselleri Tut</strong>--Sadece bir sınıf türünden başka bir sınıf türüne değişen sınıflar çıktıya dahil edilir. Sadece değişimle ilgileniyorsanız bu seçeneği işaretleyin.</li><li><strong>Sadece Değiştirilmeyen Pikselleri Tut</strong>--Sadece değiştirilmeyen sınıflar çıktıya dahil edilir. Sadece süreklilikle ilgileniyorsanız bu seçeneği işaretleyin.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>İki kategorik raster karşılaştırılıyorsa, hesaplamaya dahil edilecek <strong>Rasterdan</strong> sınıf değerleri. Bu, girdi rasterı veri kümenizdeki <strong>SınıfDeğeri</strong> alanına karşılık gelen, boşlukla sınırlandırılmış bir tamsayı değerleri listesidir.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>Hesaplamada kullanılacak birinci raster. Zaman 1'den (önceki) zaman 2'ye (daha sonra) değişimi değerlendirmek için zaman 1 rasterını buraya girin.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>İki kategorik raster karşılaştırılıyorsa, hesaplamaya dahil edilecek <strong>Rastera</strong> sınıf değerleri. Bu, girdi rasterı veri kümenizdeki <strong>SınıfDeğeri</strong> alanına karşılık gelen, boşlukla sınırlandırılmış bir tamsayı değerleri listesidir.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>Hesaplamada kullanılacak ikinci raster. Zaman 1'den (önceki) zaman 2'ye (daha sonra) değişimi değerlendirmek için zaman 2 rasterını girin.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Sınıfları değiştirmiş pikselleri sembolize etmek için kullanılacak yöntemi belirtin.</p><ul><li><strong>Renklerden ve Renklere Ortalama</strong>--Pikselin rengi, orijinal sınıfının renginin ve son sınıfının renginin ortalaması olur.</li><li><strong>Renklerden Kullan</strong>--Pikselin rengi orijinal sınıfının rengi olur.</li><li><strong>Renklere Kullan</strong>--Pikselin rengi son sınıfının rengi olur.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p><strong>Kaynak Raster</strong>girdisindeki sınıf adlarını depolayan bir alandır. Araç, kullanılacak <strong>SınıfAdı</strong>alanı veya<strong>Sınıf_Adı</strong>alanını otomatik olarak arar.</p><p>Bu seçeneği, girdi bu standart alan adlarını içermiyorsa kullanın.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p><strong>Hedef Raster</strong>girdisindeki sınıf adlarını depolayan bir alandır. Araç, kullanılacak <strong>SınıfAdı</strong>alanı veya<strong>Sınıf_Adı</strong>alanını otomatik olarak arar.</p><p>Bu seçeneği, girdi bu standart alan adlarını içermiyorsa kullanın.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>Odak komşuluk boyutunda kullanılacak piksel sütunları sayısı.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>Odak komşuluk boyutunda kullanılacak piksel satırları sayısı.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Çıktıdaki NoData boşluklarını doldurur. Görüntünüzde düşürülmüş çizgiler varsa, bu kullanışlıdır.</p>",
	"@@Statistics_raster_tag0@@": "<p>Üzerinde odak istatistiklerinin gerçekleştirileceği girdi rasterı.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>Aşağıdakiler, odak istatistik işlevlerinin yedi çeşididir:</p><ul><li>Minimum--Komşuluk içindeki piksellerin minimum değerini hesaplar.</li><li>Maksimum--Komşuluk içindeki piksellerin maksimum değerini hesaplar.</li><li>Ortalama-Komşuluk içindeki piksellerin ortalama değerini hesaplar Varsayılan budur.</li><li>Standart Sapma--Mahalle içindeki piksellerin standart sapma değerini hesaplar.</li><li>Ortanca--Komşuluk içindeki piksellerin ortanca değerini hesaplar.</li><li>Çoğunluk--Komşuluk içindeki piksellerin çoğunluk değerini veya en sık ortaya çıkan değeri hesaplar.</li><li>Azınlık--Komşuluktaki piksellerin azınlık değerini veya en az ortaya çıkan değeri hesaplar.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Analize dahil edilecek değişikliğin yönünü belirtir.</p><p>Bu parametre sadece, girdi değişiklik analizi rasterı, LandTrendr araçlarının çıktısı olduğunda kullanılabilir.</p><ul><li><strong>Tüm yönler</strong>--Tüm yönler çıktıya dahil edilir. Varsayılan budur.</li><li><strong>Artan</strong>--Çıktıya sadece pozitif veya artan yöndeki değişiklik dahil edilir.</li><li><strong>Azalan</strong>--Çıktıya sadece negatif veya azalan yöndeki değişiklik dahil edilir.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Hesaplanacak değişiklik bilgisini belirtir.</p><ul><li><strong>Son Değişiklik Tarihi</strong>--Her piksel, zaman serisindeki pikselin en son değişikliğinin tarihini içerir. Varsayılan budur.</li><li><strong>İlk Değişiklik Tarihi</strong>--Her piksel, zaman serisindeki o piksel için ilk değişikliğin tarihini içerir.</li><li><strong>En Büyük Değişiklik Tarihi</strong>--Her piksel, zaman serisindeki o piksel için en önemli değişikliğin tarihini içerir.</li><li><strong>Değiştirme Sayısı</strong>--Her piksel, zaman serisinde pikselin toplam değiştirilme sayısını içerir.</li><li><strong>En Uzun Değişiklik Tarihi</strong>--Her piksel, zaman serisindeki en uzun geçiş segmentinin sonundaki değişim tarihini içerir.</li><li><strong>En Kısa Değişiklik Tarihi</strong>--Her piksel, zaman serisindeki en kısa geçiş segmentinin sonundaki değişim tarihini içerir.</li><li><strong>En Hızlı Değişikliğin Tarihi</strong>--Her piksel, en hızlı gerçekleşen geçişin sonundaki değişim tarihini içerir.</li><li><strong>En Yavaş Değişikliğin Tarihi</strong>--Her piksel, en yavaş gerçekleşen geçişin sonundaki değişim tarihini içerir.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Değişiklik süresinin filtrelenip filtrelenmeyeceğini belirtir.</p><p></p><ul><li>İşaretli--Çıktıya sadece belirli bir süre devam eden değişikliklerin dahil edilmesi için sonuçları süreye göre filtreleyin.</li><li>İşaretli değil--Sonuçları süreye göre filtrelemeyin. Varsayılan budur.</li></ul><p>Bu parametre sadece, girdi değişiklik analizi rasterı, LandTrendr araçlarının çıktısı olduğunda kullanılabilir.</p><p>Bu parametre işaretlenirse, filtreleme için <strong>Minimum Süre</strong> ve <strong>Maksimum Süre</strong> parametrelerini ayarlamalısınız.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Değişikliğin büyüklüğü ile filtrelenip filtrelenmeyeceğini belirtir.</p><ul><li>İşaretli--Çıktıya sadece belirli büyüklükteki değişikliklerin dahil edilmesi için sonuçları büyüklüğe göre filtreleyin.</li><li>İşaretli değil--Sonuçları büyüklüğüne göre filtrelemeyin. Varsayılan budur.</li></ul><p>Bu parametre sadece, girdi değişiklik analizi rasterı, LandTrendr araçlarının çıktısı olduğunda kullanılabilir.</p><p>Bu parametre işaretlenirse, filtreleme için <strong>Minimum Büyüklük</strong> ve <strong>Maksimum Büyüklük</strong> parametrelerini ayarlamalısınız.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Çıktının yıl aralığına göre sınırlandırılıp sınırlandırılmayacağını belirtir.</p><ul><li>İşaretli--Sadece belirli bir yıl aralığında meydana gelen değişikliklerin çıktıya dahil edilmesi için sonuçları filtreleyin.</li><li>İşaretli değil--Sonuçları yıla göre filtrelemeyin. Varsayılan budur.</li></ul><p>Bu parametre işaretlenirse, filtreleme için <strong>Minimum Değer</strong> ve <strong>Maksimum Değer</strong> parametrelerini ayarlamalısınız.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Sonuçları, yalnızca belirli bir başlangıç değerindeki değişikliklerin çıktıya dahil edilmesi için başlangıç değerine göre filtreleyin.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Sonuçları, yalnızca belirli bir bitiş değerindeki değişikliklerin çıktıya dahil edilmesi için bitiş değerine göre filtreleyin.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>Hesaplanacak piksel başına maksimum değişiklik sayısı. Girilen sayı çıktı rasterındaki bant sayısına karşılık gelir. Varsayılan 1'dir; yani, sadece bir değişiklik tarihi hesaplanır ve çıktı rasterı sadece bir bant içerir.</p><p>Bu parametre, <strong>Değişiklik Türü</strong> parametresi <strong>Değişiklik sayısı</strong> olarak ayarlandığında kullanılamaz.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>Girdi değişiklik analizi rasterı.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Tarihin değişiklik segmentinin başında mı yoksa sonunda mı çıkarılacağını belirtir.</p><p>Bu parametre sadece, girdi değişiklik analizi rasterı, LandTrendr araçlarının çıktısı olduğunda kullanılabilir.</p><ul><li><strong>Segmentin başlangıcı</strong>--Bir değişiklik segmentinin başındaki tarihi çıkarır. Varsayılan budur.</li><li><strong>Segmentin sonu</strong>--Bir değişiklik segmentinin sonundaki tarihi çıkarır.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>Çıktı yoğunluğu değerlerinin alan birimleri.</p><ul><li>Kare Harita Birimleri--Çıktı mekansal referansının lineer birimlerinin karesi için.</li><li>Mil Kare--(ABD) mil için.</li><li>Kilometre Kare--Kilometre için.</li><li>Akre--(ABD) akre için.</li><li>Hektar--Hektar için.</li><li>Metre Kare--Metre için.</li><li>Yard Kare--(ABD) yard için.</li><li>Feet Kare--(ABD) feet için.</li><li>İnç Kare--(ABD) inç için.</li><li>Santimetre Kare--Santimetre için.</li><li>Milimetre Kare--Milimetre için.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>Çıktı rasterı veri kümesi için piksel boyutu. <strong>Hücre Boyutu</strong> değeri coğrafi işlem ortamlarında ayarlanmışsa, varsayılandır.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>Engelleri tanımlayan veri kümesi.</p><p>Engeller, çoklu çizgi veya çokgen detaylar içeren bir detay katmanı olabilir.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>Yoğunluğu hesaplamak için girdi noktası veya çizgi detayları.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Bir sferoid üzerinde bir en yakın yol (jeodezik) ya da bir düz arazi (düzlemsel) yöntemi kullanılıp kullanılmayacağını belirler.</p><ul><li><strong>Düzlem</strong>--Detaylar arasındaki düzlemsel mesafeleri kullanır. Varsayılan budur.</li><li><strong>Jeodezik</strong>--Detaylar arasındaki jeodezik mesafeleri kullanır. Bu yöntem, kürenin eğriliğini hesaba katar ve kutuplara ve Uluslararası tarih çizgisine yakın verileri doğru şekilde işler.</li></ul><p><strong>Jeodezik</strong> yönteminin, mesafe ölçümleri için uygun olmayan koordinat sisteminde depolanan verilerle ve geniş bir coğrafi alana yayılan analizler için kullanılması önerilir. Örneğin, Web Mercator veya herhangi bir coğrafi koordinat sistemi <strong>Jeodezik</strong> yöntemini kullanmalıdır.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Çıktı rasterındaki değerlerin neyi temsil ettiğini belirler.</p><ul><li><strong>Yoğunluklar</strong>--Çıktı değerleri, öngörülen yoğunluk değerini temsil eder. Varsayılan budur.</li><li><strong>Beklenen Sayılar</strong>--Çıktı değerleri, her bir piksel içindeki öngörülen olay miktarını temsil eder. Piksel değeri belirtilen <strong>Hücre Boyutu</strong>'na bağlı olduğundan, elde edilen raster farklı bir piksel boyutuna örneklenemez ve hala öngörülen olay miktarını temsil eder.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Her detay için nüfus değerlerini gösteren alan. <strong>Nüfus Alanı</strong> değeri, kesintisiz bir yüzey oluşturmak için araziye yayılacak sayı veya miktardır. <strong>Nüfus Alanı</strong>'ndaki değerler tam sayı veya kayan noktalı olabilir.</p><p>Alan için seçenekler ve varsayılan davranışlar, aşağıda öncelik sırasına göre listelenmiştir.</p><ul><li>Herhangi bir öge veya özel değer kullanılmayacaksa <strong>Hiçbiri</strong>'ni seçin; her detay bir kez sayılacaktır.</li><li>Girdi detayları Z içeriyorsa <strong>Biçim</strong>'i kullanın.</li><li>Aksi halde, varsayılan alan <strong>POPULATION</strong> veya nüfusun herhangi bir kabul edilebilir türevi olur:<ul><li><strong>POPULATIONxxxx</strong>'te <strong>xxxx</strong>, <strong>POPULATION6</strong>, <strong>POPULATION1974</strong> veya <strong>POPULATIONROADTYPE</strong> gibi herhangi bir geçerli karakter olabilir.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>Yukarıdakilerden hiçbiri geçerli değilse, varsayılan <strong>Hiçbiri</strong> olur.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>İçindeki yoğunluğun hesaplanacağı arama yarıçapı. Birimler, izdüşümünün lineer birimini temel alır.</p><p>Örneğin, birimler metre cinsindeyse, bir mil büyüklüğüne sahip komşuluktaki tüm detayları dahil etmek için, arama yarıçapını 1609,344'e eşit olarak ayarlayın (1 mil, 1609,344 metre olduğu için).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p><strong>Değer Rasterı</strong>'ndaki <strong>NoData</strong> değerlerinin, içinde bulundukları bölgenin sonuçlarını etkileyip etkilemeyeceğini belirtir.</p><ul><li><strong>Evet</strong>--Herhangi bir belirli bölge içinde sadece <strong>Değer Rasterı</strong>'nda bir değere sahip olan pikseller, o bölgenin çıktı değerini belirlemede kullanılır.<strong>Değer Rasterı</strong>'ndaki <strong>NoData</strong> pikselleri, istatistik hesaplamasında dikkate alınmaz. Varsayılan budur.</li><li><strong>Hayır</strong>--Belirli bir bölgede <strong>Değer Rasterı</strong> içinde <strong>NoData</strong> pikseller varsa, o bölgedeki tüm piksellerin istatistiksel hesaplamalar yapmak için yeterli bilgi olmadığı kabul edilir; bu nedenle tüm bölge çıktı rasterında <strong>NoData</strong> değerini alır.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Hesaplanacak girdi rasterından gelen değerlerin sayısı çift olduğunda kullanılacak yüzdelik enterpolasyon yöntemini belirler.</p><ul><li><strong>Otomatik algıla</strong>--Girdi değer rasterı tamsayı piksel türü ise, <strong>En yakın</strong> yöntemi kullanılır. Girdi değer rasterı kayan noktalı piksel türündeyse, <strong>Lineer yöntemi</strong> kullanılır. Varsayılan budur.</li><li><strong>En yakın</strong>--İstenilen yüzdeye en yakın mevcut değer kullanılır. Bu durumda çıktı piksel türü, girdi değer rasterının türü ile aynıdır.</li><li><strong>Lineer</strong>--İstenilen yüzdelik dilimden iki çevreleyen değerin ağırlıklı ortalaması kullanılır. Bu durumda çıktı piksel türü, kayan noktadır.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>Hesaplanacak olan yüzde. Yüzde 90 için varsayılan 90’dır.</p><p>Değerler 0 ile 100 arasında değişebilir. Yüzde 0, temelde Minimum istatistiğe ve yüzde 100, Maksimum istatistiğe eşittir. 50 değeri, temelde Ortanca istatistiğiyle aynı sonucu üretir.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Girdi çok boyutlu değer rasterının nasıl işleneceğini belirler.</p><ul><li><strong>Geçerli Dilim</strong>--İstatistikler bir çok boyutlu veri kümesinin geçerli diliminden hesaplanır. Varsayılan budur.</li><li><strong>Tüm Dilimler</strong>--İstatistikler bir çok boyutlu veri kümesinin tüm boyutlarından (zaman ve derinlik gibi) hesaplanır.</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>Hesaplanacak istatistik türü.</p><ul><li><strong>Ortalama</strong>--Çıktı pikseliyle aynı bölgeye ait <strong>Değer Rasterı</strong>'ndaki tüm piksellerin ortalamasını hesaplar.</li><li><strong>Çoğunluk</strong>--Çıktı pikseli ile aynı bölgeye ait <strong>Değer Rasterı</strong>'ndaki tüm piksellerde en sık meydana gelen değeri belirler.</li><li><strong>Maksimum</strong>--Çıktı pikseliyle aynı bölgeye ait <strong>Değer Rasterı</strong>'ndaki tüm piksellerin en büyük değerini belirler.</li><li><strong>Ortanca</strong>--Çıktı pikseliyle aynı bölgeye ait <strong>Değer Rasterı</strong>'ndaki tüm piksellerin ortanca değerini belirler.</li><li><strong>Minimum</strong>--Çıktı pikseliyle aynı bölgeye ait <strong>Değer Rasterı</strong>'ndaki tüm piksellerin en küçük değerini belirler.</li><li><strong>Azınlık</strong>--Çıktı pikseli ile aynı bölgeye ait <strong>Değer Rasterı</strong>'ndaki tüm piksellerde en az ortaya çıkan değeri belirler.</li><li><strong>Yüzde</strong>--Çıktı pikseliyle aynı bölgeye ait <strong>Değer Rasterı</strong>'ndaki tüm piksellerin bir yüzdesini hesaplar. Yüzde 90 varsayılan olarak hesaplanır. <strong>Yüzde Değeri</strong> parametresi ile hangi yüzdeyi hesaplayacağınızı belirleyebilirsiniz.</li><li><strong>Aralık</strong>--Çıktı pikseli ile aynı bölgeye ait <strong>Değer Rasterı'</strong>ndaki tüm piksellerin en büyük ve en küçük değeri arasındaki farkı hesaplar.</li><li><strong>Standart Sapma</strong>--Çıktı pikseli ile aynı bölgeye ait <strong>Değer Rasterı</strong>'ndaki tüm piksellerin standart sapmasını hesaplar.</li><li><strong>Toplam</strong>--Çıktı pikseliyle aynı bölgeye ait <strong>Değer Rasterı</strong>'ndaki tüm piksellerin toplam değerini hesaplar.</li><li><strong>Çeşitli</strong>--Çıktı pikseliyle aynı bölgeye ait <strong>Değer Rasterı</strong>'ndaki tüm pikseller için benzersiz değerlerin sayısını hesaplar.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Bir istatistiğin hesaplanacağı değerleri içeren raster.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>Her bir bölgeyi tanımlayan değerleri bulunduran alan. Bölge rasterının bir tamsayı veya bir dizi alanı olabilir.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>Bölgeleri tanımlayan veri kümesi. Bölgeler bir tamsayı rasterı ile tanımlanabilir.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>İstatistik türünün nasıl hesaplanacağını belirtir.</p><ul><li><strong>Aritmetik</strong>--Aritmetik istatistiklerini hesaplar. Bu, varsayılandır.</li><li><strong>Dairesel</strong>--Derece cinsinden pusula yönü, gündüz süresi ve gerçek sayıların kesirli kısımları gibi döngüsel miktarlara uygun dairesel istatistikleri hesaplar.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>Döngüsel verilerde en yüksek olası değer (en üst sınır). 360 varsayılan değeriyle pozitif bir sayıdır. Bu değer aynı zamanda mümkün olan en düşük değerle (alt sınır) aynı miktarı temsil eder.</p><p>Bu parametre yalnızca dairesel istatistikler hesaplandığında geçerlidir.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>Bölgeler arasındaki sınırı düzleştirilecek girdi rasterı.</p><p>Tamsayı türünde olmalıdır.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Düzleştirme işleminin kaç kez yapılacağını belirtir; bir veya iki kez.</p><ul><li><p><strong>İşaretli</strong>--Bir genişletme veya daraltma işlemini iki kez yapar. İlk seferinde, belirtilen sıralama türüne göre işlem yapılır. Ardından, öncelik tersine çevrilerek ek bir genişletme ve daraltma işlemi yapılır. Varsayılan budur.</p></li><li><p><strong>İşaretli değil</strong>--Sıralama türüne göre genişletme ve daraltma işlemini bir kez yapar.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Düzleştirme işleminde kullanılacak sıralama türünü belirtir. Sıralama, hücrelerin komşularına genişleme önceliğini belirler.</p><p>Sıralama işlemi bölge değeri veya bölge alanı temel alınarak yapılabilir.</p><ul><li><p><strong>Sıralama</strong>--Bölgeler boyuta göre sıralanmaz. Değerleri daha büyük olan bölgeler, düzleştirilen çıktıda daha küçük değerlere sahip bölgelere genişlemede daha yüksek önceliğe sahiptir. Varsayılan budur.</p></li><li><p><strong>Azalan</strong>--Bölgeleri boyutlarına göre azalan sırada sıralar. Toplam alanları daha büyük olan bölgeler, alanları daha küçük olan bölgelere genişleme önceliğine sahip olacaktır. Bu seçenek, düzleştirilen çıktıda küçük bölgelerdeki hücrelerin yaygınlığını ortadan kaldırma veya azaltma eğilimindedir.</p></li><li><p><strong>Artan</strong>--Bölgeleri boyutlarına göre artan sırada sıralar. Toplam alanları daha küçük olan bölgeler, alanları daha büyük olan bölgelere genişleme önceliğine sahip olacaktır. Bu seçenek, düzleştirilen çıktıda küçük bölgelerdeki hücrelerin yaygınlığını koruma veya artırma eğilimindedir.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>Kümeleme boyutu. Bu, değişkenlerin kümeleneceği boyuttur.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Kümeleme yapmadan önce girdi çok boyutlu verileri filtrelemek için kullanılacak yöntemi belirtir.</p><ul><li><strong>Tümü</strong>--Her boyut için tam aralık kullanılır. Bu, varsayılandır.</li><li><strong>Değerlere Göre</strong>--Boyut bir boyut değeri veya değer listesi kullanılarak dilimlenir.</li><li><strong>Aralıklara Göre</strong>--Boyut bir aralık veya aralık listesi kullanılarak dilimlenir.</li><li><strong>Yinelemeye Göre</strong>--Boyut belirli bir aralık boyutu üzerinde dilimlenir.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Yineleme Tanımı parametreleri, <strong>Boyut Tanımı</strong> parametresi <strong>Yinelemeye Göre</strong> olarak ayarlandığında analizde girdi çok boyutlu verilerini filtrelemek için kullanılacak boyut değerlerini tanımlamanıza olanak tanır.</p><ul><li><strong>Boyut</strong>--Filtreleme için kullanılacak boyut.</li><li><strong>İlk yinelemenin başlangıcı</strong>--İlk aralığın başlangıcı. Bu aralık veri kümesi boyunca yineleme için kullanılır.</li><li><strong>İlk yinelemenin sonu</strong>--İlk aralığın sonu. Bu aralık veri kümesi boyunca yineleme için kullanılır.</li><li><strong>Adım</strong>--Verilerin dilimlenme sıklığı.</li><li><strong>Birim</strong>--Yineleme birimi.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Boyut boyunca kümelerken kullanılacak anahtar sözcük aralığını belirtir.</p><p>Bu parametre <strong>Tür</strong> parametresi <strong>Aralık Anahtar Sözcüğü</strong> olarak ayarlandığında gereklidir.</p><ul><li><strong>Saatlik</strong>--Veri değerleri saatlik zaman adımları olarak kümelenir ve sonuç, zaman serisindeki her saati içerir. Bu varsayılandır.</li><li><strong>Günlük</strong>--Veri değerleri günlük zaman adımları olarak kümelenir ve sonuç, zaman serisindeki her günü içerir.</li><li><strong>Haftalık</strong>--Veri değerleri haftalık zaman adımları olarak kümelenir ve sonuç, zaman serisindeki her haftayı içerir.</li><li><strong>On günlük</strong>--Veri değerleri her biri 10 günden oluşan 3 dönemde kümelenir. Son dönem 10 günden az veya daha fazla gün içerebilir. Çıktı, her ay için 3 dilim içerir.</li><li><strong>Beş günlük</strong>--Veri değerleri her biri 5 günden oluşan 6 dönemde kümelenir. Son dönem 5 günden az veya daha fazla gün içerebilir. Çıktı her ay için 6 dilim içerir.</li><li><strong>Aylık</strong>--Veri değerleri aylık zaman adımlarında kümelenir ve sonuç, zaman serilerindeki her ayı içerir.</li><li><strong>Üç aylık</strong>--Veri değerleri, üç aylık zaman adımlarında kümelenir ve sonuç, zaman serisindeki her üç aylık dönemi içerir.</li><li><strong>Yıllık</strong>--Veri değerleri yıllık zaman adımlarında kümelenir ve sonuç, zaman serilerindeki her yılı içerir.</li><li><strong>Günlük olarak tekrarlanır</strong>--Veri değerleri günlük zaman adımlarında kümelenir ve sonuç, Jülyen günü başına bir toplam değer içerir. Çıktı, en çok 366 günlük zaman dilimleri içerir.</li><li><strong>Haftalık tekrarlanır</strong>--Veri değerleri haftalık zaman adımlarında kümelenir ve sonuç, her hafta için bir toplam değer içerir. Çıktı, en çok 53 haftalık zaman dilimleri içerir.</li><li><strong>Aylık tekrarlanır</strong>--Veri değerleri aylık zaman adımlarında kümelenir ve sonuç, her ay için bir toplam değer içerir. Çıktı, en çok 12 aylık zaman dilimleri içerir.</li><li><strong>Üç ayda bir tekrarlanır</strong>--Veri değerleri üç aylık zaman adımlarında kümelenir ve sonuç, her üç ay için bir toplam değer içerir. Çıktı en fazla 4 üç aylık zaman dilimini içerir.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Bir aralıkta kümelenen dilimleri birleştirmek için kullanılacak matematiksel yöntemi belirtir.</p><ul><li><strong>Çoğunluk</strong>--En sık meydana gelen piksel değeri, aralıktaki tüm dilimlerde hesaplanır.</li><li><strong>Maksimum</strong>--Aralıktaki tüm dilimlerde bir pikselin maksimum değeri hesaplanır.</li><li><strong>Ortalama</strong>--Bir pikselin değerlerinin ortalaması, aralıktaki tüm dilimlerde hesaplanır. Bu varsayılandır.</li><li><strong>Ortanca</strong>--Bir pikselin ortanca değeri aralıktaki tüm dilimlerde hesaplanır.</li><li><strong>Minimum</strong>--Bir pikselin minimum değeri, aralıktaki tüm dilimlerde hesaplanır.</li><li><strong>Azınlık</strong>--En az meydana gelen piksel değeri, aralıktaki tüm dilimlerde hesaplanır.</li><li><strong>Aralık</strong>--Bir piksel için değer aralığı, aralıktaki tüm dilimlerde hesaplanır.</li><li><strong>Standart Sapma</strong>--Piksel değerlerinin standart sapması, aralıktaki tüm dilimlerde hesaplanır.</li><li><strong>Toplam</strong>--Piksel değerlerinin toplamı, aralıktaki tüm dilimlerde hesaplanır.</li><li><strong>Çeşitlilik</strong>--Aralıktaki tüm dilimlerde benzersiz piksel değerlerinin sayısı hesaplanır.</li></ul><p>Tüm seçeneklerin NoData'yı Yoksay seçeneği ile bir eşdeğeri vardır. Bunlar, boyut boyunca tüm geçerli piksellerde matematiksel işlem gerçekleştirecek ve tüm NoData piksellerini yok sayacaktır.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>Tabloda belirtilen aralık aralıkları, değer gruplarını kümelemek için kullanılır. Minimum ve maksimum değerler dahil edilecek aralığı belirtir.</p><p><strong>Tür</strong>parametresi <strong>Aralık Aralıkları</strong> olarak ayarlanırsa bu parametre gereklidir.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>Girdi çok boyutlu rasterı.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Verilerin kümeleneceği boyut aralığını belirtir.</p><ul><li><strong>Tüm</strong>--Tüm dilimlerdeki değişken veri değerleri kümelenir. Bu varsayılandır.</li><li><strong>Aralık Anahtar Sözcüğü</strong>--Değişken veriler, yaygın olarak bilinen bir aralık kullanılarak kümelenecektir.</li><li><strong>Aralık Değeri</strong>--Değişken veriler, kullanıcı tanımlı bir aralık ve birim kullanılarak kümelenecektir.</li><li><strong>Aralık Aralıkları</strong>--Değişken veriler, belirtilen değer çiftleri veya tarihler arasında kümelenecektir.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>Kümeleme için kullanılan aralığın boyutu.</p><p>Bu parametre <strong>Tür</strong> parametresi <strong>Aralık Değeri</strong> olarak ayarlandığında gereklidir.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>Analiz için girdi çok boyutlu verilerini filtrelemek için kullanılacak boyut değerleri. Bu parametre <strong>Boyut Tanımı</strong> parametresi <strong>Değerlere Göre</strong> olarak ayarlandığında gereklidir.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>Verilen boyut boyunca kümelenecek değişken veya değişkenler.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>Belirli veri kümesi, regresyon modeli ve seçili öznitelikler için istatistikleri ve bilgileri içeren girdi Esri regresyon tanımı (<strong>.ecd</strong>) dosyası.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>Öngörme değişkenlerini temsil eden raster veri kümesi veya veri kümeleri. Tek bantlı raster, çok bantlı raster, çok boyutlu raster, mozaik veri kümesi veya raster koleksiyonu olabilir.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>Yapmak istediğiniz istatistiksel hesaplamanın türü.</p><p>The available statistics are<strong>Çoğunluk</strong>,<strong>Maksimum</strong>,<strong>Ortalama</strong>,<strong>Ortanca</strong>,<strong>Minimum</strong>,<strong>Azınlık</strong>,<strong>Yüzde</strong>,<strong>Aralık</strong>,<strong>Standart Sapma</strong>,<strong>Toplam</strong> ve<strong>Çeşitlilik</strong>.</p><p>Varsayılan <strong>Ortalama</strong>'dır.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>Renkler, renk haritasına dahil olmayan piksellere rastgele atanır.</p><ul><li>İşaretlenmemiş-Eşlenmemiş piksellere bir renk atanmaz. Varsayılan budur.</li><li>İşaretli-Eşlenmiş piksellere bir renk atanır.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>Gram-Schmidt algoritması seçildiğinde, çoklu bant raster girdisini toplayan sensörü de belirleyebilirsiniz. Sensör türünü seçmek uygun bant ağırlıklarını ayarlayacaktır.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>Tanımlanan pencereye öncesinde veya üzerinde kaç dilimin dahil edileceğinin değeridir. Değer, 1 - 100 arasında bir pozitif tamsayı olmalıdır. Varsayılan değer 1'dir.</p><p>Bu parametre birimi dilimdir.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>Lineer bir değeri belirli bir dairesel ortalama aralığına yuvarlamak için kullanılacak değerdir.</p><p>Değeri pozitif olmalıdır. Varsayılan değer 360 derecedir.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>Pencerenin hareket edeceği boyutun adı.</p><p>Varsayılan değer, girdi çok boyutlu rasterında bulunan x, y dışındaki ilk boyuttur.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>Tanımlanan pencereye sonrasında veya altında kaç dilimin dahil edileceğinin değeridir. Değer, 1 - 100 arasında bir pozitif tamsayı olmalıdır. Varsayılan değer 1'dir.</p><p>Bu parametre birimi dilimdir.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>Girdi raster yalnızca Bulut Raster Biçiminde çok boyutlu bir raster olabilir (<strong>.crf</strong>dosyası).</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>NoData değerlerinin istatistik hesaplamasında nasıl işleneceğini belirtir.</p><ul><li><strong>Veri</strong>--Değer girdisindeki NoData değerleri, içinde bulundukları tanımlı pencerenin sonuçları içinde yok sayılır. Varsayılan budur.</li><li><strong>NoData</strong>--Tanımlı pencere içindeki girdide herhangi bir NoData değeri varsa, çıktı değerleri NoData olacaktır.</li><li><strong>NoData Doldur</strong>--NoData hücre değerleri, tanımlı pencere içinde seçilen istatistik kullanılarak değiştirilir.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Yüzdelik değer iki hücre değeri arasında olduğunda kullanılacak enterpolasyon yöntemini belirtir.</p><ul><li><strong>Otomatik algılama</strong>--Girdi raster tamsayı piksel türündeyse, <strong>En Yakın</strong> yöntemi kullanılır. Girdi raster kayan piksel türündeyse, <strong>Lineer</strong> yöntemi kullanılır. Varsayılan budur.</li><li><strong>En yakın</strong>--Yüzdeye en yakın mevcut değer kullanılır. Bu durumda çıktı piksel türü, girdi değer rasterının türü ile aynıdır.</li><li><strong>Lineer</strong>-Yüzdelik dilimden iki çevreleyen değerin ağırlıklı ortalaması kullanılır. Bu durumda çıktı piksel türü, kayan noktadır.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>İstatistik türü olarak <strong>Yüzdeli</strong> seçildiğinde hesaplanacak olan yüzdeliktir. Yüzde 90 için varsayılan 90’dır.</p><p>Değerler 0 ile 100 arasında değişebilir. Yüzde 0, temelde minimum istatistiğe ve sonucun kayan nokta olması haricinde yüzde 100, maksimum istatistiğe eşittir. 50 değeri, ortanca istatistiğiyle aynı sonucu üretir.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Hesaplanacak olan istatistik türünü belirtir.</p><p></p><ul><li><strong>Ortalama</strong>--Tanımlanan penceredeki hücrelerin ortalaması (ortalama değeri) hesaplanır. Varsayılan budur.</li><li><strong>Dairesel Ortalama</strong>--Tanımlanan penceredeki hücrelerin dairesel ortalaması hesaplanır. Bu istatistik türü seçildiğinde, <strong>Dairesel Sarma Değeri</strong> parametresi kullanılabilir olur.</li><li><strong>Çoğunluk</strong>--Tanımlanan penceredeki hücrelerin çoğunluğu (en sık meydana gelen değer) tanımlanır.</li><li><strong>Maksimum</strong>--Tanımlanan penceredeki hücrelerin maksimumu (en büyük değer) tanımlanır.</li><li><strong>Ortanca</strong>--Komşuluktaki hücrelerin ortancası tanımlanır.</li><li><strong>Minimum</strong>--Komşuluktaki hücrelerin minimumu (en küçük değer) tanımlanır.</li><li><strong>Yüzdelik</strong>--Komşuluktaki hücrelerin bir yüzdesi hesaplanır. Bu istatistik türü seçildiğinde, <strong>Yüzdelik Değeri</strong> ve <strong>Yüzdelik Enterpolasyon Türü</strong> parametreleri kullanılabilir olur. Sırasıyla, hesaplanacak yüzdelik dilimini atamak ve kullanılacak enterpolasyon türünü seçmek için bu yeni parametreleri kullanın.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>Enterpolasyon için kullanılacak boyuttur.</p><p>Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Aralığa Göre</strong> olarak ayarlandığında gereklidir.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Enterpolasyonu gerçekleştirmeden önce girdi çok boyutlu verilerini filtrelemek için kullanılacak yöntemi belirtir.</p><ul><li><strong>Değerlere Göre</strong>--Boyut bir boyut değeri veya değer listesi kullanılarak dilimlenir.</li><li><strong>Aralığa Göre</strong>--Boyut bir aralık veya aralık listesi kullanılarak dilimlenir.</li><li><strong>Hedef Rastera Göre</strong>--Boyut, belirli bir hedef çok boyutlu raster kullanılarak dilimlenir.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>Veri kümesini yinelemek için kullanılan aralığın sonu.</p><p>Bu parametre <strong>Boyut Tanımı</strong> parametresi <strong>Aralığa Göre</strong> olarak ayarlandığında gereklidir.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>NoData değerlerin analizde göz ardı edilip edilmeyeceğini belirtir.</p><ul><li>İşaretlenmemiş-Bitişik dilimlerde NoData değerleri varsa, analiz NoData olarak sonuçlanır. Varsayılan budur.</li><li>İşaretli-Analizde yalnızca geçerli piksellere sahip dilimler kullanılır ve NoData dilimleri yok sayılır.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Rasterı enterpole etmek için kullanılacak yöntemi belirtir.</p><ul><li><strong>Lineer</strong>--Çıktı, bitişik dilimler kullanılarak lineer olarak enterpole edilir. Varsayılan budur.</li><li><strong>En Yakın Komşu</strong>--Çıktıda en yakın bitişik dilim kullanılır.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>Girdi çok boyutlu rasterı.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>Veri kümesini yinelemek için kullanılan aralığın başlangıcı.</p><p>Bu parametre <strong>Boyut Tanımı</strong> parametresi <strong>Aralığa Göre</strong> olarak ayarlandığında gereklidir.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>Verilerin enterpole edilme sıklığıdır.</p><p>Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Aralığa Göre</strong> olarak ayarlandığında gereklidir.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>Boyut tanımı tarafından belirtilen hedef rasterdır.</p><p>Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Hedef Rastera Göre</strong> olarak ayarlandığında gereklidir.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>Aralık birimi.</p><p>Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Aralığa Göre</strong> olarak ayarlandığında gereklidir.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>Analiz için girdi çok boyutlu verilerini filtrelemede kullanılacak boyut değerleridir.</p><p>Bu parametre, <strong>Boyut Tanımı</strong> parametresi <strong>Değerlere Göre</strong> olarak ayarlandığında gereklidir.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>Boyut tanımı tarafından enterpole edilecek değişken veya değişkenler.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Çıktıda <strong>Sigma sıfır ayarı</strong>veya<strong>Gama sıfır ayarı</strong> kullanılarak arazi düzleştirme gerçekleştirileceğini belirtir.</p><ul><li><strong>Gamma sıfır ayarı</strong>--Beta sıfır ayarı geri saçılması, genelde yerel geliş açısı olarak da bilinen, DEM'e yerel olarak teğet geçen bir düzlemin birim alanı kullanılarak normalleştirilecektir. Varsayılan budur.</li><li><strong>Sigma sıfır ayarı</strong>--Beta sıfır ayarı geri saçılması, alanı hesaplamak için bir DEM kullanılarak normalleştirilecektir.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>Girdi DEM.</p><p>DEM, yerel aydınlatmalı alanı tahmin etmek için kullanılır.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Girdi DEM'in dikey referans sisteminin elipsoidal yüksekliğe dönüştürülüp dönüştürülmeyeceğini belirtir. Birçok yükselti veri kümesi, deniz seviyesi ortometrik yüksekliğini referans alır; bu nedenle, elipsoidal yüksekliğe dönüştürmek için bu durumlarda bir düzeltme yapmak gerekir.</p><ul><li>İşaretli--Ortometrik yüksekliği elipsoidal yüksekliğe dönüştürmek için (EGM96 jeoidine dayanan) bir jeoid düzeltmesi yapılacaktır. Varsayılan budur.</li><li>İşaretsiz--Jeoid düzeltmesi yapılmayacak. Bu seçeneği sadece DEM elipsoidal yükseklik olarak ifade edilmişse kullanın.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>Girdi radar verileri.</p><p>Bu raster önce beta sıfır ayarına radyometrik olarak kalibre edilmelidir.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>Üçüncü banda atanmış hesaplama.</p><p>Bir bant adı, bant kimliği veya bantları kullanan cebirsel bir ifade.</p><p>Desteklenen operatörler, tek bileşenlidir: artı (+), eksi (-), çarpma (*) ve bölme (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>İkinci banda atanmış hesaplama.</p><p>Bir bant adı, bant kimliği veya bantları kullanan cebirsel bir ifade.</p><p>Desteklenen operatörler, tek bileşenlidir: artı (+), eksi (-), çarpma (*) ve bölme (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>Girdi çok bantlı raster verileri.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Bantları ayıklamak için kullanılacak yöntemi belirtir.</p><ul><li>Bant Adları--Elektromanyetik spektrumdaki dalga boyu aralığını (örneğin, Kırmızı, Yakın Kızılötesi, Termal Kızılötesi) veya kutupsallaştırmayı (örneğin, VH, VV, HH veya HV) temsil eden bant adını kullanır. Varsayılan budur.</li><li>Bant Kimlikleri--Bant numarası (örneğin, B1, B2 veya B3) kullanılacaktır.</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>Birinci banda atanmış hesaplama.</p><p>Bir bant adı, bant kimliği veya bantları kullanan cebirsel bir ifade.</p><p>Desteklenen operatörler, tek bileşenlidir: artı (+), eksi (-), çarpma (*) ve bölme (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Hedef hücrenin etrafına yerleştirilecek yüzey işlevinin türünü seçin.</p><ul><li>İkinci Derece--Komşu hücrelere ikinci dereceden bir yüzey işlevi yerleştirilir. Bu, varsayılan türdür.</li><li>Dördüncü Derece--Komşu hücrelere dördüncü dereceden bir yüzey işlevi yerleştirilir.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>Çıktı, hedef hücre merkezinden bu mesafe üzerinden hesaplanır. Komşuluk boyutunu belirler. Varsayılan değer, 3'e 3 komşuluk ile sonuçlanan girdi raster hücre boyutudur.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>Çıktı eğim rasterı için kullanılacak ölçüm birimleri (derece veya yüzdeler). Bu parametre yalnızca <strong>Parametre türü</strong> <strong>Eğim</strong> olduğunda etkindir.</p><ul><li>Derece--Eğimin eğilimini derece cinsinden hesaplar. Bu varsayılandır.</li><li>Yüzde artışı--Eğimin eğilimi, yüzde eğim olarak da adlandırılan yüzde artışı olarak hesaplanır.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Hesaplanacak çıktı yüzeyi parametre türünü belirtir.</p><ul><li>Eğim--Yükseltideki değişim oranı hesaplanır. Bu, varsayılandır.</li><li>Bakı--Her hücre için maksimum değişim oranının aşağı eğim yönü hesaplanır.</li><li>Ortalama Eğrilik--Yüzeyin toplam eğriliği ölçülür. Minimum ve maksimum eğriliğin ortalaması olarak hesaplanır. Bu eğrilik, yön veya yerçekimi etkisinden bağımsız olarak yüzeyin içsel dışbükeyliğini veya içbükeyliğini tanımlar.</li><li>Tanjant (normal kontur) Eğrilik--Eğim çizgisine dik, kontur çizgisine teğet olan geometrik normal eğrilik ölçülür. Bu eğrilik tipik olarak yüzey boyunca akışın yakınsaması veya ıraksamasını karakterize etmek için uygulanır.</li><li>Profil (normal eğim çizgisi) Eğriliği--Eğim çizgisi boyunca geometrik normal eğrilik ölçülür. Bu eğrilik tipik olarak yüzeyden aşağı akışın hızlanmasını ve yavaşlamasını karakterize etmek için uygulanır.</li><li>Plan (izdüşümlendirilen kontur) Eğriliği--Kontur çizgileri boyunca eğrilik ölçülür.</li><li>Kontur Jeodezik Bükme--Kontur çizgileri boyunca eğim açısındaki değişim oranı ölçülür.</li><li>Gaussian Eğriliği--Yüzeyin toplam eğriliği ölçülür. Minimum ve maksimum eğriliğin ürünü olarak hesaplanır.</li><li>Casorati Eğriliği--Yüzeyin genel eğriliği ölçülür. Sıfır veya başka bir pozitif sayı olabilir.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Çıktı mekansal referansının neden olduğu açı bozulmasını düzeltmek için jeodezik azimutların yansıtılıp yansıtılmayacağını belirtir. Bu parametre yalnızca <strong>Parametre türü</strong> <strong>Bakı</strong> olduğunda etkindir.</p><ul><li>İşaretli değil--Jeodezik azimutlar izdüşümlendirilmez. Bu, varsayılandır.</li><li>İşaretli--Jeodezik azimutlar izdüşümlendirilir.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>Girdi yüzey rasterı. Bir tam sayı ya da bir kayan nokta rasterı olabilir.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Komşuluk mesafesinin peyzaj değişiklikleriyle (uyarlanabilir) değişip değişmeyeceğini belirtir. Maksimum mesafe komşuluk mesafesi ile belirlenir. Minimum mesafe girdi raster hücre boyutudur.</p><ul><li>İşaretli değil--Tüm konumlarda tek (sabit) komşuluk mesafesi kullanılır. Bu, varsayılandır.</li><li>İşaretli--Tüm konumlarda uyarlanabilir bir komşuluk mesafesi kullanılır.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Bakının ekvatordaki bir noktadan mı yoksa kuzey kutbundan mı ölçüleceğini belirtir. Bu parametre yalnızca <strong>Parametre türü</strong> <strong>Bakı</strong> olduğunda etkindir.</p><ul><li>İşaretli değil--Bakı kuzey kutbundan ölçülür. Bu, varsayılandır.</li><li>İşaretli--Bakı, ekvatordaki bir noktadan ölçülür.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>Dikey z değerlerinin lineer birimi.</p><p>Varsa, bir dikey koordinat sistemi tarafından belirlenir. Dikey koordinat sistemi yoksa, doğru jeodezik hesaplama yapmak için z-birimi birim listesinden belirlenmelidir.</p><ul><li>İnç--Linear birim inç olacaktır.</li><li>Fit--Lineer birim fit olur.</li><li>Yarda--Lineer birim yarda olur.</li><li>ABD Mili--Lineer birim mil olur.</li><li>Deniz mili--Lineer birim deniz mili olur.</li><li>Millimetre--Lineer birim milimetre olur.</li><li>Santimetre--Lineer birim santimetre olur.</li><li>Metre--Lineer birim metre olur. Bu, varsayılandır.</li><li>Kilometre--Lineer birim kilometre olur.</li><li>Desimetre--Lineer birim desimetre olur.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>Analizin gerçekleşeceği konumları belirten bir raster.</p><p>Raster tamsayı veya kayan nokta türünde olabilir.</p><p>Sıfır da dahil olmak üzere geçerli bir değere sahip tüm hücreler maskeyi oluşturacaktır. Maske girdisinde değeri NoData olan hücrelerin çıktıdaki değeri de NoData olur.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Çıktı rasterında hangi hücre boyutunu kullanacağınızı seçin. Tüm girdi hücresi boyutları aynıysa, tüm seçenekler aynı sonuçları verir.</p><ul><li>Birincisi--Girdi rasterların birinci hücre boyutunu kullanır.</li><li>Minimumu--Tüm girdi rasterların en küçük hücre boyutunu kullanır.</li><li>Maksimumu--Tüm girdi rasterların en büyük hücre boyutunu kullanır. Varsayılan budur.</li><li>Ortalaması--Tüm girdi rasterların ortalama hücre boyutunu kullanır.</li><li>Sonuncusu--Tüm girdi rasterların son hücre boyutunu kullanır.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>İki ardışık yineleme arasındaki yakınsama değerini belirtir. Epsilon belirtilen değerden küçük veya eşit olduğunda yineleme durur ve son yinelemenin sonucu kullanılır.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Çıktı rasterında hangi yayılımın kullanılacağını seçin:</p><ul><li><p>Birincisi--İşleme yayılımını belirlemek için ilk girdi rasterının yayılımını kullanın.</p></li><li>Kesişimi--İşleme yayılımını belirlemek için çakışan piksellerin yayılımını kullanın. Varsayılan budur.</li><li>Birleşimi--İşleme yayılımını belirlemek için tüm rasterların yayılımını kullanın.</li><li>Sonuncusu--İşleme yayılımını belirlemek için son girdi rasterının yayılımını kullanın.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Tamamlanacak maksimum yineleme sayısını belirtir. Hesaplama, <strong>Epsilon</strong>ayarına bakılmaksızın bu değere ulaşıldığında sona erer.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>Girdi çoklu bant rasterları.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>İlk kaynaktan birikimli maliyet mesafesini temsil eden girdi raster.</p><p><strong>Mesafe Birikimi</strong>veya<strong>Mesafe tahsisi</strong>işlevinden birikimli bir maliyet mesafesi çıktısı olmalıdır.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>İkinci kaynaktan birikimli maliyet mesafesini temsil eden girdi raster.</p><p><strong>Mesafe Birikimi</strong>veya<strong>Mesafe Tahsisi</strong>işlevinden birikimli bir maliyet mesafesi çıktısı olmalıdır.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>Birinci kaynaktan girdi geri yön rasterı.</p><p>Bu, ilk kaynağa geri dönen en düşük maliyetli yol boyunca bir sonraki hücrenin yönünü tanımlayan bir raster veri kümesidir. Bu, <strong>Mesafe Birikimi</strong>veya<strong>Mesafe Tahsisi</strong>işlevinden çıktıdır.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>İkinci kaynaktan girdi geri yön rasterı.</p><p>Bu, ilk kaynağa geri dönen en düşük maliyetli yol boyunca bir sonraki hücrenin yönünü tanımlayan bir raster veri kümesidir. Bu, <strong>Mesafe Birikimi</strong>veya<strong>Mesafe Tahsisi</strong>işlevinden çıktıdır.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>Belirli bir hücrenin çıktı koridor rasterına dahil edilip edilmeyeceğini belirleyen yüzde veya birikimli maliyet eşiği.</p><p><strong>Eşik yöntemi</strong>parametresi <strong>En düşük maliyet yüzdesi</strong> olarak ayarlandığında belirtilen değer, toplu birikimli maliyet mesafesi rasterlarının minimum değerinden uygulanacak yüzde artışını gösterir. <strong>Eşik yöntemi</strong>parametresi <strong>Birikimli maliyet</strong> olarak ayarlandığında değer, toplam birikimli maliyeti koridora dahil edilecek değere eşit veya bu değerin altında olan hücreleri gösterir.</p><p>Bu parametre yalnızca <strong>Eşik yöntemi</strong>parametresi <strong>En düşük maliyet yüzdesi</strong>veya<strong>Birikimli maliyet</strong> olarak ayarlandığında etkindir.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Eşiğin nasıl tanımlanacağını belirtir.</p><p></p><ul><li><strong>Eşik Yok</strong>--Herhangi bir eşik uygulanmaz ve elde edilen koridor, girdi rasterların tam yayılımını kapsar. Bu, varsayılandır.</li><li><strong>En Düşük Maliyet Yüzdesi</strong>--Eşik, toplu birikimli maliyet mesafesi rasterlarının minimum değerinin bir yüzdesi olarak tanımlanır.</li><li><strong>Birikimli Maliyet</strong>--Eşik, birikimli maliyet mesafesi birimleri cinsinden tanımlanır.</li></ul>"
};
const helpTexts_tr = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_tr);


//# sourceMappingURL=help-texts.tr-215d1c70.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,