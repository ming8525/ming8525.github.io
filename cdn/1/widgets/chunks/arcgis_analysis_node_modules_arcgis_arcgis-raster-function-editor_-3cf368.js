"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-3cf368"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.pt-PT-8f1cba9a.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.pt-PT-8f1cba9a.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "Ok";
const cancel = "Cancelar";
const enterURL = "Introduzir URL de serviço de imagem";
const serviceURL = "URL de Serviço";
const selectRaster = "Selecionar Raster";
const failedToLoadLayer = "Falha ao carregar a Camada";
const loadingLayer = "A carregar camada";
const selectFeature = "Selecionar Camada de Elementos";
const enterFURL = "Introduzir URL de Serviço de Elementos";
const addRaster = "Adicionar variável raster";
const addScalar = "Adicionar constante";
const raster = "Raster";
const scalar = "Escalar";
const defaultModelName = "Modelo de Função Raster";
const general = "Geral";
const parameters = "Parâmetros";
const variables = "Variáveis";
const name = "Nome";
const description = "Descrição";
const parameter = "Parâmetro";
const isPublic = "IsPublic";
const isDataset = "IsDataset";
const unknownPixelType = "Desconhecido";
const outputPixelType = "Tipo de pixel de saída";
const u8PixelType = "8 Bit não registado";
const s8PixelType = "8 Bit registado";
const u16PixelType = "16 Bit não registado";
const s16PixelType = "16 Bit registado";
const u32PixelType = "32 Bit não registado";
const s32PixelType = "32 Bit registado";
const f32PixelType = "32 Bit flutuante";
const f64PixelType = "64 Bit duplo";
const properties = "Propriedades";
const multidimensionalRules = "Regras Multidimensionais";
const matchVariables = "Corresponder Variáveis";
const unionDimensions = "Dimensões da União";
const rasterFunctionEditor = {
	invalidRFTMessage: "O Modelo de Função Raster não é válido.",
	rfxArgsEditor: {
		outputRaster: "OutputRaster",
		raster: "Raster",
		unsupportedDataTypeWarning: "Os seguintes argumentos não são exibidos, já que não são atualmente suportados.",
		unsupportedFunction: "Contém uma ou mais funções raster atualmente não suportadas."
	},
	rfxRasterInput: {
		selectLayer: "Selecionar Camada",
		browseLayers: "Procurar Camadas",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Método",
		bandLabel: "Banda",
		combinationLabel: "Combinação"
	},
	rfxRemapGrid: {
		minimum: "Mínimo",
		maximum: "Máximo",
		output: "Saída",
		noData: "NoData",
		remapValuesLabel: "Voltar a Cartografar Valores"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Variáveis Raster",
		deleteSelectedVars: "Remover variáveis selecionadas"
	},
	rfxClippingGeometry: {
		clippingLayer: "Camada de Recorte",
		clippingRaster: "Recortar Raster",
		clippingGeometry: "Geometria de Recorte",
		customExtent: "Extensão personalizada",
		outputExtent: "Extensão de Saída",
		currentExtent: "Extensão mapa atual",
		drawLabel: "Desenhar"
	},
	rfxCustomExtent: {
		top: "Superior",
		right: "Direita",
		bottom: "Inferior",
		left: "Esquerda"
	},
	rfxRasterArrayEditor: {
		moveUp: "Mover para cima",
		moveDown: "Mover para baixo",
		remove: "Remover"
	},
	rfxStatisticsGrid: {
		stdDev: "Desvio Dev",
		min: "Mín.",
		max: "Máx.",
		mean: "Média"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Tabela de Soma Ponderada",
		id: "ID",
		layer: "Camada",
		field: "Campo",
		weight: "Peso",
		value: "Valor",
		selectLayer: "Selecionar Camada"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Tabela de Sobreposição Ponderada",
		id: "ID",
		layer: "Camada",
		field: "Campo",
		influence: "Influência",
		sumOfInfluence: "Soma de influência",
		value: "Valor",
		remapTable: "Voltar a Cartografar Tabela",
		scale: "Escala",
		scales: "Escalas",
		selectRaster: "Selecionar Raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Procurar uma camada de elementos",
		addPointLayer: "Procurar uma camada de pontos"
	},
	rfxFieldSelect: {
		value: "Valor",
		count: "Contagem"
	},
	rfxAttributeTable: {
		tableType: "Tipo de Tabela",
		manual: "Manual",
		external: "Externo",
		minVal: "Valor Mínimo",
		maxVal: "Valor Máximo",
		baseClassName: "Nome Base da Classe",
		colorScheme: "Esquema de Cores",
		defaultClassName: "Rótulo_",
		generateTable: "Criar tabela",
		browseTable: "Pesquisar Tabela",
		value: "Valor",
		classname: "ClassName",
		color: "Cor"
	},
	rfxFieldNumberSwitchable: {
		number: "Numérico",
		field: "Campo",
		string: "Texto",
		linearUnit: "Unidade Linear"
	},
	rfxPropertySet: {
		name: "Nome",
		value: "Valor"
	},
	rfxConversionGrid: {
		size: "Tamanho"
	},
	rfxTransposeBit: {
		bitPattern: "Padrão de Bits",
		outputBit: "Bit saída",
		inputBit: "Bit entrada"
	},
	rfxSpatialReference: {
		placeHolder: "Refine por Palavra-chave",
		coordinateSystem: "Sistema de Coordenadas",
		gcs: "Sistema de Coordenadas Geográficas",
		pcs: "Sistema de Coordenadas Projectadas",
		vcs: "Coordenar Sistema Vertical"
	}
};
const rfxLicenseInfo = "Este modelo de função raster pode ser utilizado para processar as suas imagens ao usar o ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Calcula o cosseno hiperbólico inverso das células num raster.",
		aCosHDesc: "A função calcula o cosseno hiperbólico inverso dos píxeis num raster.",
		aCosName: "ACos",
		aCosSnip: "Calcula o cosseno inverso de píxeis num raster.",
		aCosDesc: "Esta função raster calcula o cosseno inverso das células num raster. Em matemática, todas as funções trigonométricas têm um intervalo definido de valores de entrada válidos, chamado domínio. Os valores de saída de cada função têm também um intervalo definido. Para esta ferramenta, o domínio é [-1, 1], e o intervalo é [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Calcula o seno hiperbólico inverso das células num raster.",
		aSinHDesc: "A função calcula o seno hiperbólico inverso dos píxeis num raster.",
		aSinName: "ASin",
		aSinSnip: "Calcula o seno inverso das células num raster.",
		aSinDesc: "A função calcula o seno inverso dos píxeis num raster.",
		aTan2Name: "ATan2",
		aTan2Snip: "Calcula a tangente inversa (baseada em x,y) das células num raster.",
		aTan2Desc: "A função calcula a tangente inversa (baseada em x,y) dos píxeis num raster.",
		aTanHName: "ATanH",
		aTanHSnip: "Calcula a tangente hiperbólica inversa das células num raster.",
		aTanHDesc: "A função calcula a tangente hiperbólica inversa dos píxeis num raster.",
		aTanName: "ATan",
		aTanSnip: "Calcula a tangente inversa das células num raster.",
		aTanDesc: "A função calcula a tangente inversa dos píxeis num raster.",
		absName: "Abs",
		absSnip: "Calcula o valor absoluto dos píxeis num raster.",
		absDesc: "A função Abs calcula o valor absoluto dos píxeis num raster.",
		reflectanceName: "Refletância Aparente",
		reflectanceSnip: "Converte imagens brutas em valores de Topo da Atmosfera levando em consideração as características do sensor da conta, a posição do sol e a hora da aquisição.",
		reflectanceDesc: "Esta função ajusta os valores referentes ao número digital (DN) do brilho da imagem para alguns sensores satélite. Os ajustes são baseados na elevação do sol, data da aquisição e propriedades do sensor para definir o ganho e a tendência para cada banda. Esta função é utilizada para ajustar os valores de reflexão e brilho de algumas imagens de satélite baseadas na iluminação da cena e das configurações de ganho do sensor. As imagens são ajustadas a uma condição de iluminação comum teórica, o que significa que deverá haver menos variação entre cenas de diferentes datas e diferentes sensores. Isto pode ser útil para a classificação de imagens, balanceamento de cores e construção de mosaicos. Esta função apenas pode ser utilizada com imagens específicas. Os sensores aplicáveis são o Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6, e Pleiades.<div><br/>A função efetua duas correções. A primeira é baseada nas configurações do ganho. Os valores de brilho originais são recriados a partir dos valores da imagem invertendo as equações do ganho. A segunda correção está relacionada com diferenças no ângulo do sol e no brilho. Os valores de brilho originais são ajustados a uma condição de iluminação comum através de cenas normalizantes capturadas sob condições de iluminação variáveis. No geral, enquanto o tipo de dados de saída da imagem é o mesmo que o tipo de dados de entrada da imagem, os valores de saída são inferiores aos valores de entrada e estão contidos no intervalo de dados válidos.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Calcula estatística arg incluindo Arg Max, Arg Min, Arg Median, e Duração.",
		argStatisticsDesc: "A função calcula estatística arg. Existem quatro métodos na função ArgStatistics: ArgMax, ArgMin, ArgMedian, e Duração.",
		arithmeticName: "Aritméticos",
		arithmeticSnip: "Executa uma operação aritmética entre dois rasters ou um raster e um escalar.",
		arithmeticDesc: "A função Aritmética executa uma operação aritmética entre dois rasters ou um raster e um escalar e vice-versa.",
		aspectSlopeName: "Aspeto-Inclinação",
		aspectSlopeSnip: "Cria um raster, que simultaneamente exibe o aspeto (direção) e a inclinação (declive) de uma superfície contínua, tal como é representado num modelo de elevação digital.",
		aspectSlopeDesc: "A função Aspeto Inclinação cria uma camada raster, que simultaneamente exibe o aspeto e a inclinação de uma superfície. O Aspeto identifica a direção de inclinação da taxa de variação máxima em valor entre cada píxel e os seus vizinhos. O aspeto pode ser visto como a direção da inclinação. Os valores do raster de saída serão a direção da bússola do aspeto, representado por uma tonalidade (cor). A inclinação representa a taxa de variação da elevação para cada píxel modelo de elevação digital (DEM). A inclinação representa o declive da superfície e é simbolizada através de três classes que são exibidas utilizando a saturação da cor (brilho).<div><br/>Os valores de píxeis no raster de aspeto-inclinação de saída refletem uma combinação de aspeto e inclinação. Píxeis com valores inferiores a 20 são considerados planos e são exibidos a cinzento. Os valores de aspeto-inclinação iguais e superiores a 21 serão apresentados com saturações variáveis da seguinte forma: 21 a 30 —Baixa saturação de inclinação, 31 a 40—Saturação de inclinação moderada, igual e superior a 41—Alta saturação de inclinação</div>",
		aspectName: "Aspeto",
		aspectSnip: "Mostra em que direção um píxel está orientado, onde 0 é para norte e os ângulos aumentam até 360 no sentido dos ponteiros do relógio.",
		aspectDesc: "A função Aspeto identifica a direção de inclinação da taxa de variação máxima em valor entre cada célula e os seus vizinhos. O aspeto pode ser visto como a direção da inclinação. Os valores do raster de saída serão a direção da bússola do aspeto.<div><br/>A entrada desta função é Raster de Entrada. A função Aspeto é muitas vezes aplicada a um modelo de elevação digital (DEM). Por defeito o aspeto aparece como uma escala de cinzentos. É possível adicionar a função Mapa de Cores para especificar um esquema de cores particular ou permitir que a pessoa que está a visualizar o mosaico possa modificar a simbologia com o seu próprio esquema de cores.</div>",
		tableName: "Tabela de Atributos",
		tableSnip: "Utiliza uma tabela para designar e simbolizar os valores num conjunto de dados. As colunas da tabela são delimitadas por vírgulas: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "A função Tabela de Atributos permite definir uma tabela de atributos para simbolizar um conjunto de dados em mosaico de banda-única ou um conjunto de dados de um raster. <div><br/>Isto é útil quando pretende apresentar imagens que tenham sido submetidas a uma classificação de uso do solo, tal como terreno florestal, zonas húmidas, terras de cultivo e urbano. Adicionalmente, se a tabela contiver campos designados de vermelho, verde e azul, ao reproduzir a imagem, os valores dentro destes campos serão utilizados como um mapa de cores.</div>",
		bandArithmeticName: "Aritmética da Banda",
		bandArithmeticSnip: "Calcula índices utilizando fórmulas predefinidas ou expressões definidas pelo utilizador.",
		bandArithmeticDesc: "A função Banda Aritmética executa uma operação aritmética nas bandas do conjunto de dados de um raster. O utilizador pode escolher algoritmos predefinidos ou introduzir a sua própria fórmula de uma linha. Os operadores suportados são -,+,/,* e unário -.",
		thresholdName: "Limite Binário",
		thresholdSnip: "Organiza os dados contínuos entre primeiro plano e fundo minimizando a covariância entre as duas classes.",
		thresholdDesc: "Quando um conjunto de dados raster tem uma distribuição bimodal, esta função cria um novo raster, que divide os dados em duas classes diferentes. Cria uma classe de valores baixos exibida com píxeis pretos e uma classe de valores elevados exibida com píxeis brancos.",
		bitwiseAndName: "Bitwise E",
		bitwiseAndSnip: "Executa uma operação Bitwise E nos valores binários de dois rasters de entrada.",
		bitwiseAndDesc: "Bitwise E executa uma operação Bitwise E nos valores binários de dois rasters de entrada",
		bitwiseLeftShiftName: "Bitwise Esquerda Shift",
		bitwiseLeftShiftSnip: "Executa uma operação Bitwise Deslocamento à Esquerda nos valores binários de dois rasters de entrada.",
		bitwiseLeftShiftDesc: "A Bitwise Deslocamento à Esquerda executa uma operação Bitwise Deslocamento à Esquerda nos valores binários de dois rasters de entrada",
		bitwiseNotName: "Bitwise Não",
		bitwiseNotSnip: "Executa uma operação Bitwise Não nos valores binários de dois rasters de entrada.",
		bitwiseNotDesc: "A função executa uma operação Bitwise Não (complemento) nos valores binários de um raster de entrada.",
		bitwiseOrName: "Bitwise Ou",
		bitwiseOrSnip: "Executa uma operação Bitwise Ou nos valores binários de dois rasters de entrada.",
		bitwiseOrDesc: "A função executa uma operação Bitwise Ou nos valores binários de dois rasters de entrada. ",
		bitwiseRightShiftName: "Bitwise Direita Shift",
		bitwiseRightShiftSnip: "Executa uma operação Bitwise Deslocamento à Direita nos valores binários de dois rasters de entrada.",
		bitwiseRightShiftDesc: "A função executa uma operação Bitwise Deslocamento à Direita nos valores binários de dois rasters de entrada.",
		bitwiseXorName: "Bitwise Xou",
		bitwiseXorSnip: "Executa uma operação Bitwise Ou eXclusivo nos valores binários de dois rasters de entrada.",
		bitwiseXorDesc: "A função executa uma operação Bitwise Ou eXclusivo nos valores binários de dois rasters de entrada",
		booleanAndName: "Booleano E",
		booleanAndSnip: "Executa uma operação booleana E nos valores das células de dois rasters de entrada. Se ambos os valores de entrada forem verdadeiros (diferentes de zero), então, o valor de saída é 1. Se algum ou ambos as entradas forem falsos (zero), então, a saída é 0.",
		booleanAndDesc: "A função executa uma operação booleana E nos valores de píxel de duas entradas. Se ambos os valores de entrada forem verdadeiros (diferentes de zero), então, o valor de saída é 1. Se algum ou ambos os valores de entrada forem falsos (zero), então, o valor de saída é 0. ",
		booleanNotName: "Booleano Não",
		booleanNotSnip: "Executa uma operação booleana Não (complemento) nos valores das células do raster de entrada. Se os valores de entrada forem verdadeiros (diferentes de zero), então, o valor de saída é 0. Se algum ou ambos os valores de entrada forem falsos (zero), então, o valor de saída é 1.",
		booleanNotDesc: "A função executa uma operação booleana Não (complemento) nos valores de píxel do raster de entrada. Se os valores de entrada forem verdadeiros (diferentes de zero), então, o valor de saída é 0. Se algum ou ambos os valores de entrada forem falsos (zero), então, o valor de saída é 1.",
		booleanOrName: "Booleano Ou",
		booleanOrSnip: "Executa uma operação booleana Ou nos valores das células de dois rasters de entrada. Se algum ou ambos os valores de entrada forem verdadeiros (diferentes de zero), então, o valor de saída é 1. Se ambos os valores de entrada forem falsos (zero), então, o valor de saída é 0.",
		booleanOrDesc: "A função executa uma operação booleana Ou nos valores das células de dois rasters de entrada. Se algum ou ambos os valores de entrada forem verdadeiros (diferentes de zero), então, o valor de saída é 1. Se ambos os valores de entrada forem falsos (zero), então, o valor de saída é 0.",
		booleanXorName: "Booleano Xor",
		booleanXorSnip: "Executa uma operação booleana Ou eXclusivo nos valores das células de dois rasters de entrada. Se um valor de entrada for verdadeiro (diferente de zero) e o outro for falso (zero), então, o valor de saída é 1. Se ambos os valores de entrada forem verdadeiros ou ambos falsos, então, o valor de saída é 0.",
		booleanXorDesc: "A função executa uma operação booleana Ou eXclusivo nos valores das células de dois rasters de entrada. Se um valor de entrada for verdadeiro (diferente de zero) e o outro for falso (zero), então, o valor de saída é 1. Se ambos os valores de entrada forem verdadeiros ou ambos falsos, então, o valor de saída é 0.",
		bufferedRasterName: "Amortecido",
		bufferedRasterSnip: "Amortece o último bloco(s) de píxel acedido.",
		bufferedRasterDesc: "A função Amortecimento é utilizada para otimizar a performance de cadeias de funções complexas. Guarda a saída na memória da parte da cadeia da função que vem anteriormente. <div><br/>Insira esta função no Editor de Funções onde pretender armazenar a saída.</div>",
		rasterCalculatorName: "Calculadora",
		rasterCalculatorSnip: "Calcula um raster a partir de uma expressão matemática baseada num raster.",
		rasterCalculatorDesc: "A função Calculadora permite criar e correr expressões e incorporá-las nas cadeias de funções.",
		cellStatisticsName: "Estatística Celular",
		cellStatisticsSnip: "Calcula estatísticas de múltiplos rasters por célula. As estatísticas disponíveis são Maioria, Máximo, Média, Mediana, Mínimo, Minoria, Percentil, Intervalo, Desvio Padrão, Soma e Variedade.",
		cellStatisticsDesc: "Esta função executa cálculos de Estatística de múltiplos rasters, numa base de píxel a píxel. As estatísticas disponíveis são a maioria, máximo, média, mediana, mínimo, minoria, intervalo, desvio padrão, soma e variedade.",
		classifyName: "Classificar",
		classifySnip: "Atribui cada píxel a uma classe. Incorpora dados auxiliares, tais como uma imagem segmentada.",
		classifyDesc: "Esta função raster classifica um conjunto de dados raster baseado num ficheiro Esri Classifier Definition (.ecd) e num conjunto de dados raster de valores de entrada. O ficheiro .ecd utilizado na função Classificação contém toda a informação para um conjunto de dados específico e classificador e é gerado pelas ferramentas de treino de classificação, tais como o Train Support Vector Machine ou as ferramentas Train Random Trees.",
		clipName: "Recortar",
		clipSnip: "Define as medidas de um raster utilizando coordenadas ou outro conjunto de dados.",
		clipDesc: "Esta função recorta um raster utilizando uma forma retangular segundo as medidas definidas ou, então, vai recortar um raster segundo a forma da classe de caraterísticas de um polígono de entrada. A forma que define o recorte pode recortar as medidas do raster ou recortar uma área dentro do raster.",
		colorspaceConversionName: "Conversão do Modelo de Cores",
		colorspaceConversionSnip: "Converte um raster de RGB para HSV e vice-versa.",
		colorspaceConversionDesc: "A função Conversão de Modelo de Cores converte o modelo de cores de uma imagem de tonalidade, saturação e valor (HSV) de espaço cor para vermelho, verde e azul (RGB) ou vice-versa.<div><br/>Esta função pode ser utilizada num conjunto de dados de mosaico.</div>",
		colormapToRGBName: "Mapa de Cores para RGB",
		colormapToRGBSnip: "Converte um raster de banda-única com um mapa de cores num raster de três bandas (vermelho, verde e azul).",
		colormapToRGBDesc: "Esta função converte um raster de banda-única com um mapa de cores para um raster de três bandas (vermelho, verde e azul).<div><br/>Esta função é útil quando necessitar de criar um raster de três bandas a partir de um raster de banda única com um mapa de cor associado. Os valores no mapa de cores serão utilizados para criar cada banda vermelha, verde e azul. Esta função pode ser utilizada num conjunto de dados em mosaico.</div>",
		colormapName: "Mapa de Cores",
		colormapSnip: "Modifica os valores dos píxeis para exibir os dados raster ou como uma escala de cinzentos ou como uma imagem vermelha, verde e azul (RGB) baseada num mapa ou numa rampa de cores.",
		colormapDesc: "A função Mapa de Cores é um tipo de renderizador de dados raster. Transforma os valores do píxel para exibir os dados do raster como uma imagem na escala de cinzentos ou como uma imagem RGB baseada num esquema de cores ou num ficheiro de mapa de cores. É possível utilizar um mapa de cores para representar dados analisados, tal como uma imagem classificada ou ao exibir um mapa topográfico (ou o índice de uma imagem de cor digitalizada).<div><br/>Os mapas de cor contêm um conjunto de valores que estão associados a cores utilizadas para exibir um raster de banda única consistentemente com as mesmas cores. Cada valor de píxel está associado a uma cor definida como um conjunto de valores RGB. Os mapas de cores são capazes de suportar qualquer profundidade de bit com a exceção de ponto flutuante. Igualmente, suportam valores positivos e negativos e podem conter valores em falta de mapa de cores. Ao exibir um conjunto de dados com um mapa de cores contendo valores em falta, os píxeis com esses valores em falta não serão exibidos.</div>",
		complexName: "Complexo",
		complexSnip: "Extrai a magnitude de números complexos.",
		complexDesc: "Esta função calcula a magnitude de valores complexos.<div><br/>Esta função é tipicamente utilizada com imagens RADAR que têm um tipo de dados complexo. Pode ser utilizada num conjunto de dados em mosaico.</div>",
		compositeBandName: "Bandas Compostas",
		compositeBandSnip: "Combina múltiplos conjuntos de dados para um raster multibanda.",
		compositeBandDesc: "A função Bandas Compostas permite combinar rasters para formar uma imagem multibanda.",
		conName: "Con",
		conSnip: "Executa uma operação condicional If, Then, Else. Quando é utilizado um operador Con, costuma ser necessário existirem duas ou mais funções encadeadas, onde uma função dita o critério e a segunda é o operador Con, que utiliza o critério e dita quais deverão ser os valores de saída verdadeiros e falsos.",
		conDesc: "A função Con define os píxeis do raster de saída com base numa avaliação do if\\else de cada píxel de entrada. Devolve valores de píxel do Raster Verdadeiro no caso da avaliação condicional ser verdadeira (1) ou, então, valores de píxel do Raster Falso caso a avaliação condicional seja falsa (0). Este critério é definido pelo valor de saída de uma função matemática lógica, que será o Raster de entrada.",
		constantName: "Constante",
		constantSnip: "Cria um raster virtual com um único valor de píxel.",
		constantDesc: "Esta função cria um raster virtual com o valor de um único píxel, que pode ser utilizado em modelos de funções raster e para processar um conjunto de dados em mosaico.<div><br/>O valor da constante é utilizado para cada valor de píxel no raster.</div>",
		contourName: "Contorno",
		contourSnip: "Cria linhas de contorno.",
		contourDesc: "A função Contorno gera linhas de contorno juntando pontos com a mesma elevação de um conjunto de dados de elevação de raster. Os contornos são isolinhas criadas como rasters para visualização. As seguintes caraterísticas chave tornam esta função poderosa: os contornos são gerados de um modo rápido e dinâmico a partir de conjuntos de dados muito grandes, tal como a Elevação Mundial; os contornos podem ser suavizados para gerar uma aparência cartográfica mais apelativa mantendo, no entanto, a precisão do contorno; é fornecido controlo dinâmico sobre o intervalo de contorno; as opções de saída incluem linhas de contorno, contornos indexados e contornos preenchidos.<div><br/>A criação de uma camada de contorno como produto raster é valiosa para uma vasta gama de aplicações, uma vez que os contornos podem ser sobrepostos num mapa e fornecer informações sobre o terreno sem obscurecer os dados subjacentes. São úteis em aplicações como a engenharia, agricultura e a gestão de água.</div>",
		contrastBrightnessName: "Contraste e o Brilho",
		contrastBrightnessSnip: "Ajusta o contraste e o brilho de um raster.",
		contrastBrightnessDesc: "A função de Contraste e Brilho realça a aparência de dados raster modificando o brilho e o contraste dentro da imagem. O brilho aumenta a claridade geral da imagem — tornando as cores escuras mais claras e as e as cores claras mais brancas, por exemplo. —O contraste ajusta a diferença entre as cores mais escuras e as mais claras.<div><br/>A utilização desta função altera os valores de píxeis; portanto, deve ser utilizada quando se pretende melhorar a aparência dos dados e não se pretender utilizar os dados como parte de uma análise que requeira os valores de píxeis em bruto. Esta função é útil ao publicar os dados como um serviço de imagem, que pode ser utilizado em aplicações sem a capacidade de alterar o contraste e o brilho das imagens, ou para garantir que as exibe recorrendo às suas configurações preferidas.</div>",
		convolutionName: "Convolução",
		convolutionSnip: "Aplica um filtro para ajustar a nitidez, desfocar, detetar extremidades, uniformizar ou um gradiente ao longo de um raster.",
		convolutionDesc: "A função Convolução executa a filtragem dos valores de píxel numa imagem, que poderá ser utilizada para ajustar a nitidez de uma imagem, desfocar uma imagem, detetar as extremidades de uma imagem ou outras melhorias baseadas num kernel. Os filtros são utilizados para melhorar a qualidade da imagem raster ao eliminar dados artificiais ou aumentar as funcionalidades nos dados. Os filtros de convolução são aplicados num kernel em movimento e sobreposto (janela ou vizinhos), como um 3 por 3. Os filtros de convolução funcionam através do cálculo do valor de píxel com base nos pesos dos seus vizinhos.",
		corridorName: "Corredor",
		corridorSnip: "Calcula a soma de custos acumulados para os dois rasters acumulados de entrada.",
		corridorDesc: "A função de Corredor calcula a soma dos custos acumulados para dois rasters de custo acumulado de entrada. Apesar de qualquer par de rasters poder ser utilizado para a entrada, para obter um resultado significativo, deverão existir rasters de saída de custos acumulados inalterados. A ordem das duas entradas é irrelevante.",
		cosHName: "CosH",
		cosHSnip: "Calcula a cosseno hiperbólico das células num raster.",
		cosHDesc: "A função calcula o cosseno hiperbólico dos píxeis num raster.",
		cosName: "Cos",
		cosSnip: "Calcula o cosseno de uma célula num raster.",
		cosDesc: "A função calcula o cosseno dos píxeis num raster.",
		costAllocationName: "Atribuição de custos",
		costAllocationSnip: "Calcula, para cada célula, a sua origem mais económica com base no menor custo acumulado ao longo de uma superfície de custo.",
		costAllocationDesc: "A função de Atribuição de custos calcula, para cada célula, a sua origem mais económica com base no menor custo acumulado ao longo de uma superfície de custo.",
		costBackLinkName: "Ligação de Menor Custo",
		costBackLinkSnip: "Define o vizinho que é a célula seguinte no percurso de menor custo acumulado até à origem com menor custo.",
		costBackLinkDesc: "A função Ligação de Menor Custo define o vizinho que é a célula seguinte no percurso de menor custo acumulado até à origem com menor custo.<div><br/>O raster de ligação inversa contém valores de zero a oito, que definem a direção ou identificam a célula vizinha seguinte (a célula seguinte) ao longo do percurso de menor custo acumulado a partir de uma célula para atingir a sua origem de menor custo. Caso o percurso deva atravessar o vizinho direito, à célula deverá ser atribuído o valor 1, 2 para a célula diagonal inferior direita e por aí adiante no sentido dos ponteiros do relógio. O valor 0 é reservado para células de origem.</div>",
		costDistanceName: "Custo de distância",
		costDistanceSnip: "Calcula a distância com menor custo acumulado para cada célula a partir de, ou até à origem de menor custo ao longo de uma superfície de custo.",
		costDistanceDesc: "A Função de Custo de Distância calcula a distância com menor custo acumulado para cada célula a partir de, ou até à origem de menor custo ao longo de uma superfície de custo.",
		costPathName: "Percurso de custo",
		costPathSnip: "Calcula o percurso de menor custo a partir de uma origem até um destino.",
		costPathDesc: "A função de Percurso de custo global calcula o percurso de menor custo a partir de uma origem até um destino.<div><br/>Esta função produz um raster de saída que regista o percurso ou percursos de menor custo a partir de locais selecionados até à célula de origem mais próxima definida dentro da superfície de custo acumulado, em termos de distância de custo.</div>",
		curvatureName: "Curvatura",
		curvatureSnip: "Calcula a curvatura de uma superfície raster, opcionalmente incluindo a curvatura de plano e de perfil.",
		curvatureDesc: "A função de Curvatura exibe a forma ou curvatura do declive. Uma parte da superfície poderá ser côncava ou convexa; poderá saber ao observar o valor da curvatura. A curvatura é calculada através do cálculo da segunda derivada da superfície.<div><br/>A saída da função de Curvatura pode ser utilizada para descrever as características físicas de uma bacia de drenagem num esforço para compreender os processos de erosão e escoamento. O valor da curvatura poderá ser utilizado para descobrir padrões de erosão do solo assim como a distribuição de água pelos terrenos. A curvatura de perfil afeta a aceleração e desaceleração do fluxo e, como tal, influencia a erosão e a deposição. A curvatura da plataforma influencia a convergência e divergência do fluxo.</div>",
		divideName: "Dividir",
		divideSnip: "Divide os valores de dois rasters numa base célula a célula.",
		divideDesc: "A função de Divisão divide os valores de dois rasters numa base píxel a píxel.",
		elevationVoidFillName: "Preenchimento de vazio da elevação",
		elevationVoidFillSnip: "Cria píxeis onde existem buracos nos seus dados da elevação.",
		elevationVoidFillDesc: "A função de Preenchimento de Vazio da Elevação é utilizada para criar píxeis onde existem buracos na sua elevação.<div><br/>Os vazios ocorrem quando não há pontos recolhidos dentro da área representada por um píxel no raster resultante. Os vazios são muitas vezes provocados por corpos de água, seleção do tipo de classe ou exclusão. O preenchimento de vazio é normalmente utilizado durante a geração de uma superfície de solo.</div>",
		equalToName: "Igual A:",
		equalToSnip: "Realiza uma operação igual-a relacional em duas entradas numa base célula a célula. Devolve o valor 1 para células nas quais o primeiro raster iguala o segundo raster e 0 para células nas quais isso não acontece.",
		equalToDesc: "A função realiza uma operação de igual-a em dois rasters numa base píxel a píxel. Devolve o valor 1 para píxeis nos quais o primeiro raster iguala o segundo raster e o valor 0 para píxeis que não são iguais.",
		eucAllocationName: "Atribuição Euclidiana",
		eucAllocationSnip: "Calcula, para cada célula, a origem mais próxima com base na distância Euclidiana.",
		eucAllocationDesc: "A função de Atribuição Euclidiana calcula, para cada célula, a origem mais próxima com base na distância Euclidiana.",
		eucDirectionName: "Direção Euclidiana",
		eucDirectionSnip: "Calcula, para cada célula, a direção, em graus, para a origem mais próxima.",
		eucDirectionDesc: "A função de Direção Euclidiana calcula, para cada célula, a direção, em graus, para a origem mais próxima. <div><br/>A direção é calculada a partir de cada centro da célula até ao centro da célula de origem que lhe está mais próxima. O intervalo de valores vai dos 0 graus até aos 360 graus, com o 0 reservado para as células de origem. Para este (direita) está o valor 90 e os mesmos aumentam no sentido dos ponteiros do relógio (180 é sul, 270 é oeste e 360 é norte).</div>",
		eucDistanceName: "Distância Euclidiana",
		eucDistanceSnip: "Calcula, para cada célula, a distância Euclidiana até à origem mais próxima.",
		eucDistanceDesc: "A função de Distância Euclidiana calcula, para cada célula, a distância Euclidiana até à origem mais próxima.",
		exp10Name: "Exp10",
		exp10Snip: "Calcula o exponencial em base 10 das células num raster.",
		exp10Desc: "A função Exp 10 calcula o exponencial em base 10 dos píxeis num raster.",
		exp2Name: "Exp2",
		exp2Snip: "Calcula o exponencial em base 2 das células num raster.",
		exp2Desc: "Esta função calcula o exponencial em base 2 dos píxeis num raster.",
		expName: "Exp",
		expSnip: "Calcula o exponencial em base e das células num raster.",
		expDesc: "Esta função calcula o exponencial em base e dos píxeis num raster.",
		extractBandName: "Extrair Bandas",
		extractBandSnip: "Especifica que bandas utilizar, quando se utilizam conjuntos de dados multibanda.",
		extractBandDesc: " A função Extrair Bandas permite-lhe extrair uma ou mais bandas a partir de, ou reordena as bandas, um conjunto de dados de raster multibanda.<div><br/>Pode utilizar a função Extrair Bandas antes de outras funções, tais como Aritmética, para controlar quais as bandas que são utilizadas como entrada na função seguinte.</div>",
		fillName: "Preenchimento",
		fillSnip: "Preenche sumidouros num raster de superfície para remover pequenas imperfeições nos dados.",
		fillDesc: "A função de Preenchimento global localiza e preenche sumidouros e picos num raster de superfície de elevação para remover pequenas imperfeições nos dados. A função preencherá num processo iterativo até que todos os sumidouros estejam preenchidos dentro do limite Z especificado.<div><br/>Quando uma superfície de elevação é criada com ferramentas Ortocartografia ou por outros meios, existem frequentemente erros pequenos, mas significativos na forma de coletores e picos nos dados. Em fotogrametria, sumidouros e picos são muitas vezes referidos como buracos e estacas. Uma vez que os dados de superfície são muitas vezes utilizados na criação de modelos, como modelos hidrológicos, é importante corrigir estes erros de sumidouro e de pico de uma forma consistente com os dados das redondezas.</div>",
		floatName: "Flutuar",
		floatSnip: "Converte cada valor de célula de um raster numa representação de um ponto de flutuação.",
		floatDesc: "A função de Flutuação converte cada valor de píxel de um raster numa representação de um ponto de flutuação.",
		flowAccumulationName: "Acumulação de fluxo",
		flowAccumulationSnip: "Cria um raster de fluxo acumulado em cada célula. Pode ser opcionalmente um fator de peso.",
		flowAccumulationDesc: "A função global de Acumulação de Fluxo cria um raster de fluxo acumulado em cada píxel, conforme determinado pela acumulação de peso para todos os píxeis que fluem para cada píxel descendente. Caso não seja fornecido qualquer raster de peso, é aplicado um peso de 1 a cada píxel e o valor de píxeis no raster de saída é o número de píxeis que fluem para cada píxel.<div><br/>Os píxeis de saída com uma alta acumulação de fluxo são áreas de fluxo concentrado e podem ser utilizados para identificar canais de fluxo. Os píxeis de saída com uma acumulação de fluxo de zero são altos topográficos locais e podem ser utilizados para identificar cordilheiras.</div>",
		flowDirectionName: "Direção do Fluxo",
		flowDirectionSnip: "Cria um raster de direção de fluxo a partir de cada célula até ao seu vizinho com maior inclinação descendente.",
		flowDirectionDesc: "Uma dos principais elementos para a derivação de características hidrológicas de uma superfície consiste na capacidade de determinar a direção de cada píxel no raster. A função de raster da Direção do Fluxo utiliza uma superfície como entrada e cria um raster de direção de fluxo a partir de cada píxel até ao seu vizinho com maior inclinação descendente. A função de Direção do Fluxo suporta três métodos de criação de modelos de fluxo: o D8 (oito direções), Direção de Múltiplos Fluxos (MFD) e D-Infinity (DINF). ",
		flowDistanceName: "Distância do Fluxo",
		flowDistanceSnip: "Calcula para cada célula, a distância mínima horizontal ou vertical descendente até às células num rio ou corrente para o qual fluem.",
		flowDistanceDesc: "Para cada píxel, a função irá calcular a distância mínima horizontal ou vertical descendente até ao(s) píxel(eis) num rio ou corrente para o qual fluem. Caso seja fornecido um raster de direção de fluxo opcional, as direções descendentes serão limitadas às definidas pelo raster de direção do fluxo de entrada. A saída é um raster de distância de fluxo.",
		focalName: "Estatísticas Focalizadas",
		focalSnip: "Calcula as estatísticas focalizadas para cada píxel de uma imagem com base numa vizinhança focalizada definida.",
		focalDesc: "A função de Estatísticas Focalizadas calcula as estatísticas focalizadas para cada píxel de uma imagem com base numa vizinhança focalizada definida.",
		geometricName: "Geométrica",
		geometricSnip: "Aumenta a precisão posicional de um conjunto de dados tendo em conta a elevação.",
		geometricDesc: "A função Geométrica produz uma imagem ortorretificada baseada numa definição de um sensor e num modelo de terreno. Aumenta a precisão posicional de um conjunto de dados tendo em conta a elevação.",
		grayscaleName: "Escala de cinzentos",
		grayscaleSnip: "Converte uma imagem multibanda numa imagem em escala de cinzentos de banda única.",
		grayscaleDesc: "Esta função converte uma imagem multibanda numa imagem em escala de cinzentos de banda única.<div><br/>Esta função aplica os pesos especificados a cada uma das bandas de entrada e normaliza a imagem de saída. Os pesos são por vezes aplicados devido ao facto de algumas bandas terem uma importância variável dependendo da aplicação. Por exemplo, a banda azul contém muitas vezes mais ruído do que as outras bandas.</div>",
		greaterThanEqualName: "Maior Igual",
		greaterThanEqualSnip: "Realiza uma operação maior-que-igual-a Relacional em duas entradas numa base célula a célula. Devolve 1 para células nas quais o primeiro raster é maior ou igual ao segundo raster e 0 caso isso não aconteça.",
		greaterThanEqualDesc: "A função realiza uma operação maior-que-ou-igual-a Relacional em duas entradas numa base píxel a píxel. Devolve um valor de 1 para píxeis nos quais o primeiro raster é maior ou igual que o segundo raster e um valor de 0 para píxeis nos quais o primeiro raster não é maior ou igual que o segundo raster.",
		greaterThanName: "Maior do Que",
		greaterThanSnip: "Realiza uma operação maior-que Relacional em duas entradas numa base célula a célula. Devolve 1 para células nas quais o primeiro raster é maior que o segundo raster e 0 caso isso não aconteça.",
		greaterThanDesc: "A função realiza uma operação Relacional maior do que a operação em duas entradas numa base de píxel a píxel. Devolve um valor de 1 para píxeis nos quais o primeiro raster é maior que o segundo raster e um valor de 0 para píxeis nos quais o primeiro raster não é maior que o segundo raster.",
		heatIndexName: "Índice de Calor",
		heatIndexSnip: "Combine a temperatura ambiente e a humidade relativa para devolver a temperatura aparente.",
		heatIndexDesc: "Esta função calcula a temperatura aparente com base na temperatura ambiente e humidade relativa. A temperatura aparente é muitas vezes descrita como a sensação térmica do corpo humano.<div><br/>Este índice pode ser útil para calcular os perigos relacionados com questões médicas como cãibras musculares, desidratação, exaustão do calor ou a insolação mais grave em dias quentes e húmidos. Quando a humidade relativa é elevada, torna-se cada vez mais difícil a evaporação do suor do corpo, deixando os indivíduos sem uma forma natural e eficaz de se arrefecerem. Mapas de avisos ou de informação de calor são muitas vezes um produto de uma nova classificação do resultado do indicador de calor em classes, nas quais, quanto maior o valor indicador, mais provável é que se torne num aviso em vez de apenas uma informação.</div>",
		hillshadeName: "Sombreamento",
		hillshadeSnip: "Cria uma representação 3D da superfície, com a posição relativa do sol tida em conta para sombrear a imagem",
		hillshadeDesc: "A função Hillshade produz uma representação 3D à escala de cinzentos da superfície do terreno, com a posição relativa do sol tida em conta para sombrear a imagem. <div><br/>O sombreamento é uma técnica de visualização do terreno determinada por uma fonte de luz e pela inclinação e aspeto da superfície da elevação. É um método qualitativo para a visualização topográfica e não oferece valores absolutos de elevação. </div>",
		intName: "Int",
		intSnip: "Converte cada valor de célula de um raster num número inteiro por truncagem.",
		intDesc: "A função Int converte cada valor de píxel de um raster num número inteiro por truncagem.",
		interpolateIrregularDataName: "Interpolar Dados Irregulares",
		interpolateIrregularDataSnip: "Interpola a partir de nuvens de pontos ou grelhas irregulares.",
		interpolateIrregularDataDesc: "Alguns conjuntos de dados netCDF ou HDF armazenam a sua geolocalização como disposições de espaçamento irregular de píxeis ou dados de ponto. Ao adicionar estes conjuntos de dados a um conjunto de dados de mosaico, a função de interpolação de dados irregulares toma os dados irregularmente organizados e cria uma nova amostra de forma a que cada píxel seja quadrado e de uma dimensão uniforme.<div><br/>Ao adicionar variáveis de netCDF ou HDF a um conjunto de dados em mosaico, verificará automaticamente se os dados estão ordenados regularmente. Caso não estejam, a função de interpolação de dados irregulares pode ser utilizada para converter os dados irregulares num raster organizado de forma regular. Poderá alterar o método de interpolação e a célula utilizada na função de interpolação do raster de dados irregulares. Para dados de raster de espaçamento regular, não será aplicada qualquer interpolação e os dados serão lidos conforme estão.</div>",
		isNullName: "É Nulo",
		isNullSnip: "Determina quais valores dos rasters de entrada são NoData numa base célula a célula. Devolve um valor de 1 caso os valores de entrada sejam NoData e 0 para células que não são.",
		isNullDesc: "A Função É Nulo determina quais valores do raster de entrada são NoData numa base píxel a píxel. Devolve um valor de 1 caso o valor de entrada seja NoData e um valor de 0 para píxeis que são NoData.",
		kernelDensityName: "Densidade Kernel",
		kernelDensitySnip: "Calcula uma área de magnitude-por-unidade a partir de características de um ponto ou polilinhas utilizando uma função kernel para encaixar uma superfície suavemente esticada até cada ponto ou polilinha.",
		kernelDensityDesc: "Esta função calcula uma área de magnitude-por-unidade a partir de características de um ponto ou polilinhas utilizando uma função kernel para encaixar uma superfície suavemente esticada até cada ponto ou polilinha.",
		keyMetadataName: "Metadados chave",
		keyMetadataSnip: "Substitui ou introduz metadados chave de um raster numa cadeia de funções.",
		keyMetadataDesc: "Esta função permite-lhe introduzir ou substituir metadados chave de um raster.<div><br/>A informação nos metadados chave é utilizada para ajudar a aplicação com algum processamento e renderização, incluindo o fornecimento de algumas informações úteis, como o nome do sensor, nomes das bandas ou a nebulosidade associada às imagens.</div>",
		shortestPathName: "Percurso de Menor Custo",
		shortestPathSnip: "Executa uma análise de distância do custo utilizando as entradas de origem e destino que é então utilizada para determinar o percurso de menor custo a partir de uma origem até um destino.",
		shortestPathDesc: "A função de Percurso de Menor Custo calcula o percurso de menor custo a partir de uma origem até um destino. A distância com menor custo acumulado é calculada para cada píxel ao longo de uma superfície de custo, até à origem mais próxima. Isto produz um raster de saída que regista o percurso ou percursos de menor custo a partir de locais selecionados até aos píxeis de origem mais próximos definidos dentro da superfície de custo acumulado, em termos de custo de distância.<div><br/>A cada percurso de menor custo é atribuído um valor quando encontrado no processo de digitalização. O píxel final na Raster de Origem de percurso de custo recebe o valor de 1. O primeiro percurso recebe um valor de 3, o segundo 4 e por aí adiante. Quando múltiplos percursos se fundem e seguem a distância restante de volta a uma origem pelo mesmo percurso, ao segmento no qual os dois percursos viajam juntos é atribuído o valor de 2. A porção fundida do percurso não pode ser receber o valor de um dos percursos, uma vez que a porção unidade pertence a ambos os percursos.</div>",
		lessThanEqualName: "Menor Igual",
		lessThanEqualSnip: "Realiza uma operação menor-que-ou igual-que Relacional em duas entradas numa base célula a célula. Devolve 1 para células nas quais o primeiro raster é menor ou igual ao segundo raster e 0 caso isso não aconteça.",
		lessThanEqualDesc: "A função realiza uma operação menor-que-ou-igual-a Relacional em duas entradas numa base píxel a píxel. Devolve um valor de 1 para píxeis nos quais o primeiro raster é menor ou igual que o segundo raster e um valor de 0 quando não é menor que ou igual que o segundo raster.",
		lessThanName: "Menor do que",
		lessThanSnip: "Realiza uma operação menor-que Relacional em duas entradas numa base célula a célula. Devolve 1 para células nas quais o primeiro raster é menor que o segundo raster e 0 caso isso não aconteça.",
		lessThanDesc: "A função realiza uma operação menor-que Relacional em duas entradas numa base píxel a píxel. Devolve um valor de 1 para píxeis nos quais o primeiro raster é menor que o segundo raster e um valor de 0 quando não é menor que o segundo raster.",
		lnName: "Ln",
		lnSnip: "Calcula o logaritmo natural (base e) de células num raster.",
		lnDesc: "A função Ln calcula o logaritmo natural (base e) de cada píxel num raster.",
		log10Name: "Log10",
		log10Snip: "Calcula o logaritmo em base 10 de células num raster.",
		log10Desc: "A função Log10 calcula o logaritmo em base 10 de cada píxel num raster.",
		log2Name: "Log2",
		log2Snip: "Calcula o logaritmo em base 2 de células num raster.",
		log2Desc: "A função Log2 calcula o logaritmo em base 2 de cada píxel num raster.",
		lookupName: "Procura",
		lookupSnip: "Cria um novo raster ao buscar valores encontrados noutro campo na tabela do raster de entrada.",
		lookupDesc: "A função cria um novo raster ao buscar valores encontrados noutro campo na tabela do raster de entrada.",
		mlClassifyName: "Classificar ML",
		mlClassifySnip: "Classifica imagens utilizando uma abordagem píxel a píxel. Os píxeis misturados são atribuídos à característica com maior percentagem nesse píxel.",
		mlClassifyDesc: "A função Classificar ML permite-lhe realizar uma classificação supervisionada, utilizando o algoritmo de classificação de probabilidade máxima, num conjunto de dados de raster ou conjunto de dados de mosaico. Esta função necessita de um ficheiro de assinatura de classificação.",
		maskName: "Máscara",
		maskSnip: "Define valores que não deseja exibir no seu raster.",
		maskDesc: "Esta função de raster define valores que não deseja exibir no seu raster. Utilizando a função de Máscara, especificará um ou mais valores NoData ou um intervalo de valores de píxel válidos. ",
		minusName: "Menos",
		minusSnip: "Subtrai o valor do segundo raster de entrada a partir do valor do primeiro raster de entrada numa base célula a célula.",
		minusDesc: "A função Menos subtrai o valor do segundo raster de entrada a partir do valor do primeiro raster de entrada numa base píxel a píxel.",
		modName: "Mod",
		modSnip: "Encontra o resto (módulo) do primeiro raster quando dividido pelo segundo raster numa base célula a célula.",
		modDesc: "A função Mod encontra o resto (módulo) do primeiro raster quando dividido pelo segundo raster numa base píxel a píxel. A ordem das duas entradas é importante e afeta o resultado de saída.",
		mosaicRastersName: "Rasters de Mosaico",
		mosaicRastersSnip: "Cola um grupo de conjuntos de dados raster para criar um conjunto de dados.",
		mosaicRastersDesc: "A função de Rasters de Mosaico cria uma imagem de mosaico a partir de múltiplas imagens. Quando existe uma sobreposição entre imagens, existem vários métodos entre os quais poderá escolher para determinar quais imagens são apresentadas.",
		ndviColorizedName: "NDVI Colorizado",
		ndviColorizedSnip: "Cria um conjunto de dados multibanda que representa a saúde da vegetação, baseado na diferença entre as bandas vermelhas e quase infravermelhas.",
		ndviColorizedDesc: "A função NDVI Colorizado aplica a função NDVI na imagem de entrada e utilização então um mapa de cores ou rampa de cores para apresentar o resultado.",
		ndviName: "NDVI",
		ndviSnip: "Calcula o Índice de Vegetação por Diferença Normalizada (NDVI).",
		ndviDesc: "A função NDVI cria um conjunto de dados de banda única que representa a saúde da vegetação, baseado na diferença entre as bandas vermelhas e quase infravermelhas.<div><br/>NDVI é um índice padronizado que lhe permite gerar uma imagem que apresenta verdor, também conhecido como biomassa relativa. Este índice tira partido do contraste de características entre duas bandas a partir de um conjunto de dados de raster multiespectrais: a absorção do pigmento de clorofila na banda vermelha e elevada refletividade de material vegetal na banda quase infravermelha (NIR). Valores NDVI extremamente baixos ou negativos representam áreas sem qualquer vegetação, como uma nuvem, água ou neve. Valores muito baixos representam áreas de pouca a nenhuma vegetação, como cimento, rocha, ou solo descoberto. Os valores moderados representam áreas de arbustos ou relva. Os valores elevados representam áreas de floresta e vegetação frondosa.</div>",
		negateName: "Negar",
		negateSnip: "Altera o sinal (multiplica por -1) dos valores de célula do raster de entrada numa base célula a célula.",
		negateDesc: "A função Negar altera o sinal (multiplica por -1) dos valores de píxel do raster de entrada num píxel ",
		nibbleName: "Nibble",
		nibbleSnip: "Substitui células de um raster que corresponde a uma máscara com os valores dos vizinhos mais próximos.",
		nibbleDesc: "A função global Nibble permite a atribuição do valor do seu vizinho mais próximo a áreas selecionadas de um raster. Isto é útil para a edição de áreas de um raster no qual os dados poderão ser erróneos.",
		notEqualName: "Não Igual",
		notEqualSnip: "Realiza uma operação diferente-de relacional em duas entradas numa base célula a célula. Devolve 1 para células nas quais o primeiro raster é diferente-de ao segundo raster e 0 caso seja igual.",
		notEqualDesc: "A função realiza uma operação de diferente-de Relacional em duas entradas numa base píxel a píxel. Devolve um valor de 1 para píxeis nos quais o primeiro raster é diferente do segundo raster e um valor de 0 para píxeis quando é igual ao segundo raster.",
		pansharpeningName: "Nitidez pancromática",
		pansharpeningSnip: "Melhora artificialmente a resolução espacial de uma imagem multibanda fundindo-a com uma imagem pancromática de maior resolução.",
		pansharpeningDesc: "A função Pansharpening utiliza uma imagem pancromática de alta resolução ou banda de raster para que se funda com uma resolução mais baixa, conjunto de dados de raster multibanda para aumentar a resolução espacial da imagem multibanda.<div><br/>O objetivo do ajuste da nitidez é criar uma imagem visual de maior qualidade. Uma vez que as técnicas alteram a radiometria e características espectrais das imagens multibanda, as imagens \"pan sharpened\" necessitam de ser utilizadas com cuidado para fins de deteção remota analítica.</div>",
		pathAllocationName: "Atribuição de Distância de Percurso",
		pathAllocationSnip: "Calcula a origem de menor custo para cada célula com base no menor custo acumulado ao longo de uma superfície de custo, tendo em conta a distância da superfície e fatores de custo horizontal e vertical.",
		pathAllocationDesc: "A função de Atribuição de Distância de Percurso calcula a origem mais próxima para cada célula com base no menor custo acumulado ao longo de uma superfície de custo, tendo em conta a distância da superfície e fatores de custo horizontal e vertical.",
		pathBackLinkName: "Ligação de Menor Distância de Percurso",
		pathBackLinkSnip: "Define o vizinho que é a célula seguinte no percurso de menor custo acumulado até à origem com menor custo, tendo em conta a distância da superfície juntamente com os fatores de custo horizontal e vertical.",
		pathBackLinkDesc: "A função Ligação de Menor Distância de Percurso identifica a direcionalidade do vizinho que é a célula seguinte no percurso de menor custo acumulado até à origem mais próxima, tendo em conta a distância da superfície e fatores de custo horizontal e vertical.",
		pathDistanceName: "Distância de Percurso",
		pathDistanceSnip: "Calcula, para cada célula, a distância com menor custo acumulado desde ou para a origem com menor custo, tendo em conta a distância da superfície juntamente com os fatores de custo horizontal e vertical.",
		pathDistanceDesc: "A função Distância de Percurso calcula, para cada célula, a distância com menor custo acumulado para a origem mais próxima, tendo em conta a distância da superfície e fatores de custo horizontal e vertical.",
		plusName: "Mais",
		plusSnip: "Adiciona (soma) os valores de dois rasters numa base célula a célula.",
		plusDesc: "A função Soma adiciona (soma) os valores de dois rasters numa base píxel a píxel.",
		powerName: "Potência",
		powerSnip: "Eleva os valores das células num raster à potência dos valores encontrados noutro raster.",
		powerDesc: "A função Potência eleva os valores de píxel num raster à potência dos valores encontrados noutro raster.",
		radarCalibrationName: "Calibração de Radar",
		radarCalibrationSnip: "Converte a retrodifusão do RADARSAT-2.",
		radarCalibrationDesc: "Esta função pode ser utilizada para calibrar imagens do RADARSAT-2 num conjunto de dados em mosaico ou como um produto raster. A calibragem é realizada nas imagens de radar de forma a que os valores dos píxeis sejam uma representação verdadeira da retrodifusão do radar.",
		rasterInfoName: "Informação de Raster",
		rasterInfoSnip: "Modifica propriedades do raster, tais como a profundidade do bit, um valor NoData, o tamanho da célula, etc.",
		rasterInfoDesc: "A Informação de Raster abre uma caixa de diálogo com propriedades do conjunto de dados raster, tais como o número de colunas e linhas, o número de bandas, o tipo de píxel, a extensão e a referência espacial. Pode editar estas propriedades selecionando um conjunto de dados raster para utilizar como modelo. ",
		rasterizeAttributesName: "Rasterizar Atributos",
		rasterizeAttributesSnip: "Potencia um raster através de bandas adicionais derivadas de valores de atributos especificados de uma tabela externa ou de um serviço de funcionalidade.",
		rasterizeAttributesDesc: "A função Rasterizar Atributo potencia um raster adicionando bandas derivadas de valores de atributos especificados, de uma tabela externa ou de um serviço de funcionalidade. Pode opcionalmente especificar um raster de zona e o atributo de identificação de zona associado para permitir consultas baseadas em regiões.",
		rasterizeFeatureClassName: "Rasterizar Funcionalidades",
		rasterizeFeatureClassSnip: "Converte funcionalidades num raster.",
		rasterizeFeatureClassDesc: "Esta função converte dados de classes de funcionalidade de polígonos, polilinhas e pontos numa camada raster.<div><br/>São atribuídos valores de píxeis aos elementos com base em OBJECTID dos elementos (padrão). Opcionalmente, os valores de píxeis podem ser baseados num campo de valor definido pelo utilizador na tabela de atributos de funcionalidades de entrada.</div>",
		recastName: "Reformular",
		recastSnip: "Modifica os parâmetros de uma cadeia de funções num conjunto de dados em mosaico ou num serviço de imagens. Isto é frequentemente utilizado com conjuntos de dados LAS para evitar ter de se criar um conjunto de dados em mosaico separado para diferentes representações do terreno.",
		recastDesc: "A função Reformular é utilizada para modificar dinamicamente o parâmetro de função utilizado num conjunto de dados em mosaico ou num serviço de imagens sem que as alterações persistam fisicamente.",
		regionGroupName: "Grupo de Regiões",
		regionGroupSnip: "Para cada célula na saída, é registada a identidade da região ligada à qual essa célula pertence. Um único número é atribuído a cada região.",
		regionGroupDesc: "A função global Grupo de Regiões regista, para cada célula na saída, a identidade da região ligada à qual essa célula pertence. Um único número é atribuído a cada região.<div><br/>A primeira região lida recebe o valor de um, a segunda de dois, e assim sucessivamente, até que seja atribuído um valor a todas as regiões. A leitura vai da esquerda para a direita, de cima para baixo. Os valores atribuídos às zonas de saída têm por base o momento em que são encontrados no processo de leitura.</div>",
		regionGrowName: "Crescimento de Região",
		regionGrowSnip: "Desenvolve regiões a partir de pontos iniciais.",
		regionGrowDesc: "A função Crescimento de Região agrupa píxeis adjacentes em grupos, dependendo do raio especificado a partir do ponto inicial. É atribuído ao grupo de píxeis ou ao objeto um valor de preenchimento especificado.",
		remapName: "Remapear",
		remapSnip: "Altera os valores de píxeis atribuindo novos valores a intervalos de valores de píxeis ou utilizando uma tabela externa.",
		remapDesc: "A função Remapear permite-lhe alterar ou reclassificar os valores dos píxeis dos dados de raster. Isto pode ser feito quer especificando um intervalo de valores de píxeis para mapear para um valor de píxel de saída, quer utilizando uma tabela para mapear os valores de píxeis para o valor de píxel de saída.",
		reprojectName: "Reprojetar",
		reprojectSnip: "Modifica a projeção de um conjunto de dados raster, conjunto de dados em mosaico, ou item raster num conjunto de dados em mosaico. Também consegue gerar uma nova amostra dos dados para um novo tamanho da célula e definir uma origem.",
		reprojectDesc: "A função Reprojetar modifica a projeção de um conjunto de dados raster, conjunto de dados em mosaico, ou item raster num conjunto de dados em mosaico. Também consegue gerar uma nova amostra dos dados para um novo tamanho da célula e definir uma origem.<div><br/>A função Reprojetar pode ser utilizada quando se cria uma cache a partir de um conjunto de dados raster ou mosaico que não se encontra na projeção requerida. Por exemplo, ao criar um serviço de imagens em cache que pode ser integrado por aplicações com outros serviços em cache, é importante que todos estejam na mesma projeção. Isto é frequentemente uma projeção Web Mercator. Uma vez que o conjunto de dados em mosaico não pode ser reprojetado, pode fazer uma de duas coisas — criar um conjunto de dados em mosaico referenciado a partir do seu conjunto de dados em mosaico na projeção necessária, ou adicionar a função Reprojetar à cadeia de funções do conjunto de dados em mosaico. Outro exemplo utiliza esta função no item raster num conjunto de dados em mosaico. Ao utilizar a função Raster em Cache, pode querer inserir a função Reprojetar para que a cache seja criada na nova projeção. Os itens raster num conjunto de dados em mosaico podem ser armazenados em cache quando o processamento é intenso e está a tentar publicar um serviço de imagens que é rápido, sem armazenar em cache todo o serviço de imagens.</div>",
		resampleName: "Reamostragem",
		resampleSnip: "Altera o tamanho da célula de um raster.",
		resampleDesc: "A função Reamostragem altera o tamanho da célula, o tipo de reamostragem, ou ambos.<div><br/>A função Reamostragem só deve ser utilizada com requisitos de cálculo específicos; por exemplo, quando se está a calcular o vento ou a direção de magnitude atual que requer a reamostragem a partir da resolução da fonte.</div>",
		roundDownName: "Arredondar para Baixo",
		roundDownSnip: "Devolve o valor inteiro imediatamente inferior, representado simplesmente como um valor de vírgula flutuante, para cada célula num raster.",
		roundDownDesc: "A função Arredondar para Baixo devolve o inteiro imediatamente inferior, como um valor de vírgula flutuante, para cada píxel num raster.",
		roundUpName: "Arredondar para Cima",
		roundUpSnip: "Devolve o valor inteiro imediatamente superior, representado simplesmente como um valor de vírgula flutuante, para cada célula num raster.",
		roundUpDesc: "Arredondar para Cima devolve o inteiro imediatamente superior, como um valor de vírgula flutuante, para cada píxel num raster.",
		segmentMeanShiftName: "Deslocação média de segmentação",
		segmentMeanShiftSnip: "Agrupa píxeis adjacentes com características espetrais similares em segmentos.",
		segmentMeanShiftDesc: "Esta função identifica objetos, funcionalidades, ou segmentos nas suas imagens, agrupando píxeis adjacentes que têm características espetrais e espaciais similares. Pode controlar a medida de suavização espacial e espetral para ajudar a obter funcionalidades de interesse.",
		s1RadiometricCalibrationName: "Calibração Radiométrica Sentinel-1",
		s1RadiometricCalibrationSnip: "Executa diferentes tipos de calibragem radiométrica em dados Sentinel-1.",
		s1RadiometricCalibrationDesc: "Esta função raster realiza três calibragens diferentes para conjuntos de dados Sentinel 1, incluindo beta zero e gama, e gera o conjunto de dados calibrado. O objetivo da calibragem SAR é o de proporcionar imagens nas quais os valores dos píxeis possam ser diretamente relacionados com a retrodifusão de radar da cena. Embora as imagens SAR não calibradas sejam suficientes para uma utilização qualitativa, as imagens SAR calibradas são essenciais para a utilização quantitativa dos dados SAR.<div><br/>O processamento de dados SAR típicos, que produz imagens de Nível 1, não inclui correções radiométricas e permanece um desvio radiométrico significativo. Portanto, é necessário aplicar correção radiométrica às imagens SAR para que os valores dos píxeis das imagens representem verdadeiramente a retrodifusão de radar da superfície refletora. A correção radiométrica também é necessária para a comparação de imagens SAR obtidas com diferentes sensores, ou obtidas a partir do mesmo sensor em diferentes momentos, em diferentes modos, ou processadas por diferentes processadores.</div>",
		s1ThermalNoiseRemovalName: "Eliminação de Ruído Térmico de Sentinel-1",
		s1ThermalNoiseRemovalSnip: "Elimina o ruído térmico de dados Sentinel-1.",
		s1ThermalNoiseRemovalDesc: "A correção de ruído térmico pode ser aplicada a produtos Single Look Complex (SLC) de Nível 1, bem como a produtos Ground Range Detection (GRD) de Nível 1, de Sentinel-1, que ainda não tenham sido corrigidos. O operador também pode eliminar esta correção com base nas anotações do produto para reintroduzir o sinal de ruído que foi eliminado para produzir o produto original. As anotações do produto serão atualizadas em conformidade para permitir a reaplicação da correção. ",
		setNullName: "Definir Nulo",
		setNullSnip: "Definir Nulo define locais de células identificados como NoData com base num critério específico. Devolve NoData caso uma avaliação condicional seja verdadeira e devolve o valor especificado por outro raster caso seja falso.",
		setNullDesc: "A função Definir Nulo define os píxeis identificados como NoData, com base nos critérios específicos. Devolve NoData se uma avaliação condicional for verdadeira (1) e devolve o valor especificado no Raster Falso se uma avaliação condicional for falsa (0). Este critério é definido pelo valor de saída de uma função matemática lógica, que será o Raster de entrada.",
		shadedReliefName: "Relevo Sombreado",
		shadedReliefSnip: "Cria uma representação multibanda, codificada por cores e 3D da superfície, com a posição relativa do sol tida em conta para sombrear a imagem.",
		shadedReliefDesc: "A função de Relevo sombreado cria uma representação 3D a cores do terreno é criada através da fusão de imagens dos métodos de Hillshade e código-elevação. Esta função utiliza as propriedades de altitude e azimute para especificar a posição do sol.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Calcula o seno hiperbólico das células num raster.",
		sinHDesc: "A função calcula o seno hiperbólico dos píxeis num raster.",
		sinName: "Sin",
		sinSnip: "Calcula o seno das células num raster.",
		sinDesc: "A função calcula o seno dos píxeis num raster.",
		slopeName: "Inclinação",
		slopeSnip: "Calcula a taxa de variação do valor de um píxel para os seus vizinhos.",
		slopeDesc: "Esta função raster calcula a inclinação, que é a taxa de variação da elevação de cada célula do modelo de elevação digital (DEM). É a primeira derivada de um DEM.<div><br/>Esta função utiliza uma função atan() acelerada. É seis vezes mais rápida e o erro de aproximação é sempre inferior a 0,3 graus.</div>",
		speckleName: "Ruído",
		speckleSnip: "Fornece filtros para reduzir o ruído de conjuntos de dados de radares de abertura sintética.",
		speckleDesc: "Ruído é o ruído de alta-frequência em dados de um radar. As imagens geradas pelos sistemas de radar de abertura sintética (SAR) são altamente sujeitas a efeitos do ruído devido ao processamento de sinais dispersos e à interferência de ondas eletromagnéticas dispersas das superfícies ou objetos. Esta função de ruído filtra o conjunto de dados de radar com ruído e suaviza o ruído enquanto retém as arestas ou entidades precisas na imagem.",
		spectralConversionName: "Conversão Espectral",
		spectralConversionSnip: "Aplica uma matriz a uma imagem multibanda.",
		spectralConversionDesc: "A função Conversão Espectral aplica uma matriz a uma imagem multibanda para afetar os valores de cor da saída.<div><br/>Alguns sensores não recolhem bandas azuis devido a uma baixa relação sinal-ruído. Isto pode ser utilizado, por exemplo, para converter uma imagem infravermelha de cor falsa para uma imagem de cor pseudo natural.</div>",
		squareRootName: "Raiz Quadrada",
		squareRootSnip: "Calcula a raiz quadrada dos valores de célula num raster.",
		squareRootDesc: "A função Raiz Quadrada calcula a raiz quadrada dos valores de píxel num raster.",
		squareName: "Quadrado",
		squareSnip: "Calcula o quadrado dos valores de célula num raster.",
		squareDesc: "Quadrada calcula a raiz quadrada dos valores de píxel num raster.",
		statisticsHistogramName: "Estatísticas e Histograma",
		statisticsHistogramSnip: "Definir estatísticas ou histogramas associados.",
		statisticsHistogramDesc: "A função de Estatísticas e Histograma é utilizada para definir as estatísticas e o histograma de um raster. Poderá introduzir esta função no final da cadeia de funções para descrever as estatísticas e histograma de um modelo de função de raster (RFT). Isto poderá ser necessário para controlar a apresentação predefinida do resultado de processamento, especialmente durante a definição de uma cadeia de funções que contenha muitas funções.<div><br/>Pode definir estatísticas, digitando os valores ou importando de um conjunto de dados raster ou de um ficheiro XML. Os histogramas apenas podem ser definidos através da importação de um ficheiro.</div>",
		statisticsName: "Estatísticas",
		statisticsSnip: "Calcula as estatísticas focalizadas para cada píxel de uma imagem com base numa vizinhança focalizada definida.",
		statisticsDesc: "A função de Estatísticas calcula as estatísticas focalizadas para cada píxel de uma imagem com base numa vizinhança focalizada definida.<div><br/>A função de Estatísticas pode ser utilizada para preencher linhas não contínuas numa imagem. As linhas não contínuas são muitas vezes provocadas por problemas no sensor no qual dados não são recolhidos. Isto aconteceu em sensores como o Enhanced Thematic Mapper Plus (ETM+) da Landsat 7. Estes dados em falta provocam problemas para a análise e também durante a visualização das imagens. Pouco pode ser feito durante a utilização de imagens para análise; no entanto, caso existisse uma imagem sobreposta, esta poderá ser utilizada na vez de um conteúdo em falta. O mesmo poderá ser feito caso as imagens estejam a ser utilizadas para visualização. No entanto, não existe sempre uma imagem extra para preencher o conteúdo em falta e como tal este deverá ser derivado de dados existentes.</div>",
		streamLinkName: "Ligação de corrente",
		streamLinkSnip: "Atribui valores exclusivos a secções de uma rede linear raster entre interseções.",
		streamLinkDesc: "A função de Ligação de Corrente global atribui valores exclusivos a secções de uma rede linear raster entre interseções.<div><br/>As ligações são as secções de um canal de fluxo que liga duas junções sucessivas, uma junção e a saída, ou uma junção e a divisão da drenagem. Em hidrologia, estes segmentos de corrente chamam-se rios. Um cruzamento está relacionado com um ponto de despejo e ajuda a delinear uma área de separação de águas ou os limites de uma bacia de drenagem secundária.</div>",
		stretchName: "Esticar",
		stretchSnip: "Melhora uma imagem ao ajustar o intervalo de valores apresentado. Isto não altera os valores de píxel subjacentes. Se um píxel tiver um valor fora do intervalo especificado, ele aparecerá como o valor mínimo ou máximo.",
		stretchDesc: "A função Esticar melhora uma imagem ao alterar propriedades como o brilho, contraste e gamma através de múltiplos tipos de extensão. Esta função utiliza as estatísticas dos rasters dentro do conjunto de dados do mosaico; como tal, caso utilize esta função, deverá assegurar-se de que as estatísticas foram calculadas.<div><br/>O tipo de extensão define um histograma de extensão que será aplicado aos rasters para melhorar a sua aparência. A extensão melhora a aparência dos dados ao espalhar os valores de píxel ao longo de um histograma a partir dos valores mínimos e máximos definidos através da respetiva profundidade de bit. </div>",
		swathName: "Faixa",
		swathSnip: "Há interpolação de organizações irregulares ou dados de faixa.",
		swathDesc: "Alguns conjuntos de dados netCDF ou HDF armazenam a sua geolocalização como disposições de espaçamento irregular. Ao adicionar estes conjuntos de dados a um conjunto de dados de mosaico, a função de faixa toma dados irregularmente organizados e cria uma nova amostra de forma a que cada píxel seja quadrado e de uma dimensão uniforme.<div><br/>Ao adicionar variáveis de netCDF ou HDF a um conjunto de dados em mosaico, verificará automaticamente se os dados estão ordenados regularmente. Caso não estejam, a função de faixa é automaticamente aplicada para converter o raster irregular em pontos e depois num raster regularmente organizado. Poderá alterar o método de interpolação e a célula utilizada na função de raster de faixa. Para dados de raster de espaçamento regular, não será aplicada qualquer interpolação, os dados serão lidos conforme estão.</div>",
		tanHName: "TanH",
		tanHSnip: "Calcula a tangente hiperbólica das células num raster.",
		tanHDesc: "Esta função calcula a tangente hiperbólica dos píxeis num raster.",
		tanName: "Tan",
		tanSnip: "Calcula a tangente das células num raster.",
		tanDesc: "Esta função calcula a tangente dos píxeis num raster. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Calcula níveis de vegetação, humidade e brilho. Esta técnica depende de coeficientes, que têm que ser calculados especificamente para cada sensor.",
		tasseledCapDesc: "A transformação Tasseled Cap (Kauth-Thomas) está desenhada para analisar e representar mudanças de vegetação e de desenvolvimento urbano detetadas por diversos sistemas de sensor de satélite. É conhecida como a transformação Tasseled Cap devido à forma da distribuição gráfica dos dados. A transformação fornece uma razão para os padrões encontrados nos dados do Landsat MSS de campos agrícolas como uma função do ciclo de vida da plantação. Essencialmente, à medida que as culturas crescem desde a semente até à maturidade, há um aumento líquido de infravermelho próximo e uma diminuição da refletância vermelha com base na cor do solo<div><br/>A utilidade desta transformação expandiu-se da monitorização das culturas para a análise e cartografia da vegetação para apoiar uma grande variedade de aplicações como a silvicultura, gestão da vegetação industrial, cartografia e gestão dos ecossistemas, inventário e monitorização para sequestro e créditos de carbono, desenvolvimento urbano, e muito mais. Também se expandiu de suportar o Landsat MSS para incluir outros sistemas de satélites populares tais como o Landsat TM, o Landsat ETM+, o Landsat 8, o IKONOS, o QuickBird, o WorldView-2 e sensores multiespectrais RapidEye.</div>",
		timesName: "Tempos",
		timesSnip: "Multiplica os valores de dois rasters numa base de célula a célula.",
		timesDesc: "A função Tempos multiplica os valores de dois rasters numa base de píxel a píxel.",
		transposeBitsName: "Transpor Bits",
		transposeBitsSnip: "Desempacota os bits do píxel de entrada e atribui-os a bits específicos no píxel de saída. O objetivo desta função é o de manipular bits de um par de entradas, tais como os produtos de banda de qualidade do Landsat 8.",
		transposeBitsDesc: "A função Transpor Bit desempacota os bits do píxel de entrada e atribui-os a bits específicos no píxel de saída. O objetivo desta função é o de manipular bits de um par de entradas, tais como os produtos de banda de qualidade do Landsat 8.",
		unitConversionName: "Conversão de Unidades",
		unitConversionSnip: "Altera valores de uma unidade de medição para outra.",
		unitConversionDesc: "Esta função converte píxeis de uma unidade para outra. Suporta a conversão de distância, velocidade e temperatura.",
		vectorFieldName: "Campo Vetorial",
		vectorFieldSnip: "Exibe conjuntos de dados em que tanto a magnitude (u) como a direção (v) são setas, onde a magnitude é representada pelo tamanho da seta e a direção pelo ângulo da mesma.",
		vectorFieldDesc: "A função Campo Vetorial é utilizada para combinar e converter dois rasters num raster de duas bandas, que seja do tipo Magnitude-Direção ou do tipo de dados U-V.<div><br/>O valor U é por vezes referido como a velocidade zonal, e o valor V é por vezes referido como a velocidade meridional.</div>",
		viewshed2Name: "Área Visível",
		viewshed2Snip: "Determina as localizações da superfície do raster que são visíveis a um grupo de funcionalidades do observador utilizando métodos geodésicos.",
		viewshed2Desc: "A função Área Visível determina as localizações da superfície raster visíveis a um conjunto de elementos de observador utilizando métodos geodésicos<div><br/>A visibilidade de cada centro de píxel é determinada por um teste de linha de visão entre o alvo e cada observador. Se um observador puder ver o alvo no centro do píxel, então, este píxel é considerado visível. Esta ferramenta considera sempre a curvatura da Terra, quando a visibilidade é determinada.</div>",
		watershedName: "Área de Separação de Águas",
		watershedSnip: "Determina a área que contribui por cima de um grupo de células num raster",
		watershedDesc: "A função Área de Separação de Águas global determina a área que contribui por cima de um grupo de píxeis num raster. Áreas de Separação de Águas são delineadas a partir de um raster de direção do fluxo, que identifica a direção do fluxo de cada píxel.",
		weightedOverlayName: "Sobreposição ponderada",
		weightedOverlaySnip: "Sobrepõe diversos rasters utilizando uma escala de medição comum e pondera cada um de acordo com a sua importância.",
		weightedOverlayDesc: "Esta função permite sobrepor diversos rasters utilizando uma escala de medição comum e ponderar cada um de acordo com a sua importância.",
		weightedSumName: "Soma Ponderada",
		weightedSumSnip: "Pondera e soma uma série de rasters numa base célula-a-célula.",
		weightedSumDesc: "A função Soma Ponderada permite sobrepor diversos rasters, multiplicando cada um pelo seu respetivo peso e somando-os a todos.",
		windchillName: "Vento Frio",
		windchillSnip: "Combina a temperatura ambiente do ar e a velocidade do vento para calcular o fator vento frio.",
		windchillDesc: "A função Vento Frio é útil para identificar condições de inverno perigosas que, dependendo dos tempos de exposição aos elementos, podem resultar em queimaduras de frio e hipotermia. Vento frio é um modo de calcular quanto frio um indivíduo sente, quando se leva o vento em consideração com temperaturas já elas frias. Quanto mais elevada a velocidade do vento, mais rapidamente o corpo vai perder calor e mais frio se vai sentir.",
		zonalRemapName: "Remapear Zonal",
		zonalRemapSnip: "Remapear píxeis num raster baseado em zonas definidas noutro raster e no mapear de valores dependentes da zona definidos numa tabela.",
		zonalRemapDesc: "Esta função permite remapear píxeis num raster baseado em zonas definidas noutro raster e no mapear de valores dependentes da zona definidos numa tabela.",
		zonalStatisticsName: "Estatística Zonal",
		zonalStatisticsSnip: "Calcula estatísticas nos valores de um raster dentro das zonas de outro conjunto de dados.",
		zonalStatisticsDesc: "A função calcula estatísticas sobre os valores de um raster dentro das zonas de outro conjunto de dados. Uma zona é definida como sendo todas as áreas na entrada que possuem o mesmo valor. Estas áreas não têm que ser contíguas. Quando as entradas zonal e de valores forem ambas rasters com a mesma resolução, então, serão utilizadas diretamente. Se as resoluções forem diferentes é aplicada uma reamostragem interna para equilibrar as resoluções antes de ser executada uma operação zonal.",
		flowLengthName: "Comprimento do Fluxo",
		flowLengthSnip: "Calcula a distância a montante ou jusante, ou distância ponderada, ao longo de um percurso do fluxo para cada célula.",
		flowLengthDesc: "Esta é uma função raster global. Esta função cria uma camada de raster da distância a montante ou jusante, ou distância ponderada, ao longo de um percurso do fluxo para cada célula.<div><br/>Uma das principais utilizações da função Comprimento do Fluxo é calcular o comprimento do percurso mais longo do fluxo numa determinada bacia. Esta medida é muitas vezes utilizada para calcular o tempo de concentração de uma bacia. Isto é efetuado com a opção A Montante. A função também pode ser utilizada para criar diagramas de distância/área de hipotéticos eventos de precipitação e escoamento utilizando o raster de peso como impedância para um movimento descendente.</div>",
		streamOrderName: "Ordem Stream",
		streamOrderSnip: "Atribui uma ordem numérica a segmentos de um raster que representam as secções de uma rede linear",
		streamOrderDesc: "Esta é uma função raster global. Esta função cria uma camada de raster que atribui uma ordem numérica a segmentos de um raster que representam as secções de uma rede linear.<div><br/>A saída da função Ordem Stream será de melhor qualidade se a camada de raster de stream de entrada e a camada de raster de direção do fluxo de entrada tiverem origem na mesma superfície. Se o raster de stream tiver origem num conjunto de dados de stream rasterizados, é possível que o resultado não possa ser utilizado numa base de célula a célula, e a direção não irá corresponder à localização das células de stream. Os resultados da função Acumulação de Fluxo podem ser utilizados para criar uma rede de raster de stream através da aplicação de um valor limite para selecionar células com um fluxo acumulado elevado. Por exemplo, as células com mais de 100 células a desembocarem nelas são utilizadas para definir a rede de stream. Utilize a função Con ou Definir Nulo para criar um raster de rede stream no qual os valores de acumulação de fluxo iguais ou superiores a 100 vão para um deles e os restantes são colocados em segundo plano (NoData). A rede de stream resultante pode ser utilizada na função Ordem Stream. Esta função apenas suporta uma camada de raster de direção de fluxo de entrada D8. As direções de fluxo D8 podem ser criadas com a função Direção do Fluxo e executadas com o tipo de direção do fluxo padrão D8.</div>",
		snapPourPointName: "Ajustar Ponto de Escoamento",
		snapPourPointSnip: "Ajusta pontos de escoamento para a célula com maior acumulação de fluxo numa distância especificada",
		snapPourPointDesc: "Esta é uma função raster global. Esta função ajusta pontos de escoamento para a célula com maior acumulação de fluxo numa distância especificada.<div><br/>A função Ajustar Ponto de Escoamento é utilizada para garantir a seleção de pontos com fluxo acumulado elevado ao delinear bacias de drenagem com a função Bacia Hidrográfica. A função Ajustar Ponto de Escoamento irá procurar dentro de uma distância de ajuste em torno dos pontos de escoamento especificados para a célula com o maior fluxo acumulado e mover o ponto de escoamento para essa localização. O resultado é uma camada de raster inteira quando as localizações dos pontos de escoamento originais tiverem sido ajustadas para localizações com maior fluxo acumulado.</div>",
		sinkName: "Coletor",
		sinkSnip: "Cria um raster que identifica todos os coletores ou áreas de drenagem interna",
		sinkDesc: "Esta é uma função raster global. Esta função cria uma camada de raster que identifica todos os coletores ou áreas de drenagem interna. Um coletor é uma célula ou um conjunto de células espacialmente ligadas com uma direção de fluxo à qual não pode ser atribuído um dos oito valores válidos num raster de direção do fluxo. Isto pode ocorrer quando todas as células vizinhas são maiores do que a célula de processamento ou quando duas células desembocam uma na outra, criando um ciclo de duas células.<div><br/>A função Coletor apenas suporta uma camada de raster de direção de fluxo de entrada D8. As direções de fluxo D8 podem ser criadas com a função Direção do Fluxo e executadas com tipo de direção do fluxo padrão D8. O resultado da função Coletor é um raster inteiro, e cada coletor tem um valor único atribuído. Estes valores únicos situam-se entre um e o número total de coletores. Por exemplo, se o número total for 1000, os valores únicos vão de 1 a 1000.</div>",
		aggregateName: "Agregar",
		aggregateSnip: "Gera uma versão de resolução reduzida de um raster.",
		aggregateDesc: "A função Agregar faz a reamostragem de uma imagem raster de entrada a uma resolução menos precisa com base numa estratégia de agregação especificada. Cada célula de saída contém a Soma, o Mínimo, o Máximo, a Média ou a Mediana das células de entrada que são englobadas pela extensão dessa célula.<div><br/>Pode especificar o fator pelo qual se pode multiplicar o tamanho da célula do raster de entrada. Por exemplo, um valor do fator de célula de três resultaria numa saída em que o tamanho de célula é três vezes maior do que o do raster de entrada. Pode definir como tratar a extensão da saída se o número de linhas ou colunas na entrada não for um múltiplo exato do fator da célula. Por predefinição, os limites superior e direito serão expandidos para cobrir uma extensão espacial maior do que a do raster de entrada, a fim de garantir que todas as células de entrada sejam processadas. Em alternativa, os limites superior e direito podem ser reduzidos para cobrir uma extensão menor, de modo a que o número de linhas e colunas processadas seja um múltiplo exato do fator da célula. Pode definir como as células NoData devem ser tratadas pelo cálculo de agregação. O mecanismo padrão é que as células NoData de entrada que se encontrem na extensão espacial de uma célula maior no raster de saída serão ignoradas ao determinar o valor dessa célula de saída. Em alternativa, pode especificar que, se existir uma única célula NoData de entrada dentro da extensão espacial de uma célula de saída, essa célula será NoData no raster de saída.</div>",
		ccdcName: "Análise CCDC",
		ccdcSnip: "Avalia alterações nos valores de píxeis ao longo do tempo utilizando o algoritmo de Deteção e Classificação de Alterações Contínuas (CCDC) e gera resultados de modelos.",
		ccdcDesc: "A função Análise CCDC avalia as alterações nos valores de píxeis ao longo do tempo utilizando o algoritmo de Deteção e Classificação de Alterações Contínuas (CCDC) e gera um raster multidimensional com os resultados do modelo. Só é suportada em conjunto com a função Detetar Alterações Através da Análise de Alterações num modelo de função raster. Para produzir uma saída de raster, associe a função Análise CCDC à função Detetar Alterações Através da Análise de Alterações, guarde como um modelo de função raster e execute a Análise Raster com o modelo de função.<div><br/>Esta função utiliza o algoritmo de Deteção e Classificação de Alterações Contínuas (CCDC) para avaliar as alterações nos valores de píxel ao longo do tempo para uma pilha de imagens. Numa série temporal de imagens óticas ou derivados de imagens (por exemplo, NDVI), os valores de píxeis podem flutuar por várias razões: 1. Alteração sazonal -- As alterações no valor dos píxeis refletem alterações na vegetação devido à variabilidade sazonal da temperatura e da precipitação. No Hemisfério Norte, por exemplo, esperamos ver uma maior densidade de vegetação verde no verão em comparação com o inverno; 2. Alteração gradual -- As alterações no valor de píxeis refletem as tendências da vegetação ou das águas superficiais devido à variabilidade climática ou às práticas de gestão do solo a longo prazo. Por exemplo, os solos descobertos podem aumentar gradualmente em área devido à diminuição da precipitação a longo prazo; e 3. Alteração abrupta -- As alterações no valor dos píxeis refletem as alterações na cobertura do solo que ocorrem subitamente devido à desflorestação, desenvolvimento urbano, catástrofes naturais, etc. O algoritmo CCDC identifica os três tipos de alterações com o objetivo principal de identificar alterações abruptas. Os modelos de regressão harmónica e de tendência são ajustados aos dados para estimar as alterações sazonais e graduais, e os desvios bruscos em relação aos modelos de tendência são indicações de alterações abruptas.<div><br/>O algoritmo CCDC foi originalmente concebido para dados de Refletância de Superfície ou Temperatura de Brilho de dados Landsat TM, Landsat ETM+ e Landsat OLI. No entanto, a função Detetar Alterações Através da Análise de Alterações em conjunto com esta função irá detetar alterações para imagens multibanda a partir de qualquer sensor suportado, bem como derivados de imagens de banda única, tais como índices de banda. Por exemplo, é possível realizar a deteção de alterações contínuas num raster de Índice de Vegetação de Diferença Normalizada (NDVI), porque alterações abruptas no NDVI podem ser indicativas de desflorestação.</div>",
		computeChangeName: "Calcular Alteração",
		computeChangeSnip: "Calcula a diferença entre dois conjuntos de dados raster categóricos ou contínuos.",
		computeChangeDesc: "A função Calcular Alteração pode ser utilizada para enumerar as diferenças entre dois rasters classificados para análise da alteração da cobertura do solo, ou pode ser utilizada para examinar as alterações entre dois rasters contínuos de banda única, como a elevação, temperatura, coberto florestal, etc.",
		detectChangeName: "Detetar Alterações Através da Análise de Alterações",
		detectChangeSnip: "Gera uma camada raster que contém informações sobre alterações de píxeis utilizando o raster de análise de alterações de saída.",
		detectChangeDesc: "<div>A função Detetar Mudanças Através da Análise de Alterações gera uma camada raster que contém informações sobre a data de alteração de píxeis utilizando o raster de análise de alterações. O raster de análise de alterações tem de ser gerado pela ferramenta Analisar Alterações Através de CCDC ou Analisar Alterações Através de LandTrendr ou a função raster Análise CCDC ou raster Análise LandTrendr.</div><br><div>Esta função raster pode ser combinada com a função raster Análise CCDC ou raster Análise LandTrendr num modelo de função raster. Para produzir uma saída de raster, associe a função Análise CCDC ou Análise LandTrendr à função Detetar Alterações Através da Análise de Alterações, guarde como um modelo de função raster e execute a Análise Raster com o modelo de função.</div><br><div>O parâmetro <strong>Tipo de Alteração</strong> indica as informações que são geradas. As informações são extraídas do raster de análise de alterações. Ao executar esta função na saída da função/ferramenta CCDC, pode escolher entre as seguintes opções:</div><ul><li><strong>Hora da última alteração</strong> - a data e hora mais recentes em que um píxel foi sinalizado como alterado.</li><li><strong>Hora da alteração mais antiga</strong> - a primeira data e hora em que um píxel foi sinalizado como alterado.</li><li><strong>Hora da maior alteração</strong> - a data e hora em que a alteração calculada foi a mais significativa para um píxel.</li><li> <strong>Número de alterações</strong> - o número total de vezes que o píxel foi alterado.</li></ul><div>Ao executar esta função na saída da função/ferramenta LandTrendr, as seguintes opções adicionais estão disponíveis:</div><ul><li><strong>Hora da maior alteração</strong> - a data em que um píxel foi sinalizado como alterado, no início ou no final do período mais longo de alterações.</li><li><strong>Hora da menor alteração</strong> - a data em que um píxel foi sinalizado como alterado, no início ou no final do período mais curto de alterações.</li><li><strong>Hora da alteração mais rápida</strong> - a data em que um píxel foi sinalizado como alterado, no início ou no final do período de alterações mais rápido.</li><li><strong>Hora da alteração mais lenta</strong> - a data em que um píxel foi sinalizado como alterado, no início ou no final do período mais lento de alterações.</li></ul><div>O raster de saída é um raster multibanda em que cada banda contém informações de alteração consoante o tipo de alteração selecionado e o número máximo de alterações especificado. Por exemplo, se o parâmetro <strong>Tipo de Alteração</strong> estiver definido para <strong>Hora da Alteração mais Antiga</strong> e o <strong>Número Máximo de Alterações</strong> estiver definido para 2, a função calcula as duas primeiras datas mais antigas em que a alteração ocorreu ao longo da série temporal para cada píxel. O resultado é um raster em que a primeira banda contém as datas da primeira alteração mais antiga por píxel e a segunda banda contém as datas da segunda alteração mais antiga por píxel.</div><br><div>Ao aplicar esta função na saída das ferramentas LandTrendr, pode escolher se pretende extrair a data que marca o início de uma alteração ou o fim de uma alteração com o parâmetro <strong>Data do Segmento</strong>. Por exemplo, para compreender como a alteração mais recente na série temporal começou, defina o parâmetro <strong>Tipo de Alteração</strong> para <strong>Hora da última alteração</strong> e <strong>Data do Segmento</strong> para <strong>Início do segmento</strong>.</div><br><div>Use os seguintes parâmetros de filtragem para extrair datas mais específicas de alterações do seu raster de análise de alterações:</div><ul><li><strong>Filtrar por ano</strong> - identifique as alterações que ocorreram num período de tempo específico, por exemplo, se estiver à procura de alterações que ocorreram numa paisagem durante cinco anos de seca.</li><li><strong>Filtrar por duração</strong> - identifique as alterações que ocorreram ao longo de um determinado intervalo de anos, por exemplo, se estiver apenas à procura de alterações abruptas que ocorreram ao longo de 1 ou 2 anos. Pode calcular a duração que pretende ao usar a fórmula <strong>ano final - ano inicial +1</strong>. As lacunas na série temporal serão incluídas.</li><li><strong>Filtrar por magnitude</strong> - identifique alterações de uma determinada magnitude, por exemplo, se estiver apenas à procura de grandes alterações no índice de vegetação NDVI. A magnitude é um valor absoluto, por isso, os valores mínimos e máximos não podem ser negativos. Para especificar a alteração direcional, use o parâmetro <strong>Direção da Alteração</strong>.</li></ul>",
		distanceAccumulationName: "Acumulação de Distância",
		distanceAccumulationSnip: "Calcula a distância acumulada para cada célula até às origens, permitindo a distância em linha reta, distância de custo, distância de superfície verdadeira, bem como fatores de custo verticais e horizontais.",
		distanceAccumulationDesc: "A acumulação de distância calcula a distância a cada local da área de estudo até à origem mais próxima ou de menor custo. Se apenas forem fornecidas as origens para entrada, é calculada uma distância em linha reta para cada local na área de estudo. Se tanto as origens como as barreiras forem utilizadas como entrada, então a Acumulação de Distância calcula a distância em linha reta em torno das barreiras. Tanto para o raster de origem como para o raster de barreira, o valor de fundo deve ser NoData, enquanto as origens e barreiras são representadas com valores válidos de células. Os valores válidos incluem zero. <div><br/>Quando um raster de superfície é fornecido como entrada, é calculada a distância real da superfície entre células. Para realizar a análise de custos utilizando a Acumulação de Distância, é necessária uma superfície de custo. Se for fornecida uma superfície de custo, o resultado será um raster de distância de custo acumulado. Quando são fornecidos fatores horizontais e verticais, a direcionalidade é considerada como custo acumulado. Existem quatro características da origem que podem ser utilizadas. Estas características, que podem ser tanto da origem como dos motores da origem, são controladas por parâmetros específicos: 1. A acumulação inicial: define o custo inicial antes do início do movimento. 2. A acumulação máxima: especifica o custo que uma origem pode acumular antes de atingir o seu limite. 3. O multiplicador a aplicar aos custos: especifica o modo de deslocação ou a magnitude na origem. 4. A direção da viagem: identifica se o motor está a começar numa origem e a deslocar-se para locais não de origem, ou se está a começar em locais não de origem e a deslocar-se de volta para uma origem.<div><br/>Por predefinição, o resultado da Acumulação de Distância é uma banda única, que é o raster de acumulação de distância. No entanto, também pode ser criada uma segunda banda, a banda de direção de retorno. Esta banda indica, a partir de cada local na área de estudo, qual a direção a seguir para chegar à origem de menor custo. Ambas as bandas serão necessárias para determinar os melhores percursos dentro da área de estudo. Para gerar um percurso, utilize primeiro a função Extrair Banda para extrair o raster de acumulação de distância e o raster de direção de retorno. Utilize estas camadas como entrada para a função Percurso de Custos. Na função, utilize o raster de acumulação de distância como entrada de Raster de Custo de Distância e o raster de direção de retorno como entrada de Raster de Ligação Inversa de Custo.</div>",
		distanceAllocationName: "Atribuição de Distância",
		distanceAllocationSnip: "Calcula a atribuição de distâncias para cada célula até às origens fornecidas com base na distância em linha reta, distância de custo, distância de superfície verdadeira, bem como em fatores de custo verticais e horizontais.",
		distanceAllocationDesc: "A Atribuição de Distância calcula a que origem é atribuída cada localização na área de estudo. Se apenas forem fornecidas as origens para entrada, as localizações são atribuídas utilizando uma distância em linha reta até à origem mais próxima. Se tanto as origens como as barreiras forem utilizadas como entrada, então a Atribuição de Distância calcula a distância em linha reta em torno das barreiras para determinar a que origem a localização é atribuída. Tanto para o raster de origem como para o raster de barreira, o valor de fundo deve ser NoData, enquanto as origens e barreiras são representadas com valores válidos de células. Os valores válidos incluem zero.<div><br/>Para realizar uma análise de custos utilizando a Atribuição de Distância, é necessária uma superfície de custo. Se for fornecida uma superfície de custo, o resultado será um raster de atribuição baseado no custo acumulado e não na distância em linha reta. Quando são fornecidos fatores horizontais e verticais, a direcionalidade é considerada como custo acumulado. Quando um raster de superfície é fornecido como entrada, é calculada a distância de superfície real coberta ao passar entre células quando a atribuição é determinada. Existem quatro características da origem que podem ser utilizadas. Estas características, que podem ser tanto da origem como dos motores da origem, são controladas por parâmetros específicos: 1. A Acumulação Inicial: define o custo inicial antes do início do movimento. 2. A Acumulação Máxima: especifica o custo que uma origem pode acumular antes de atingir o seu limite. 3. O multiplicador a aplicar aos custos: especifica o modo de deslocação ou a magnitude na origem. 4. A direção da viagem: identifica se o motor está a começar numa origem e a deslocar-se para locais não de origem, ou se está a começar em locais não de origem e a deslocar-se de volta para uma origem.<div><br/>Por predefinição, o resultado da Atribuição de Distância é uma banda única, que é o raster de atribuição de distância. Assinalar a opção Booleana Gerar linha e coluna de origem como bandas adicionais na saída, resultará num raster multibanda composto por três bandas. A primeira banda é a banda de atribuição de distância, a segunda banda contém um índice de linhas e a terceira banda contém um índice de colunas. Estes índices identificam a localização da célula de origem que se encontra a menor distância de custo acumulado. O índice de linhas da origem e o índice de colunas da origem podem ser utilizados conjuntamente para efetuar a cartografia da intensidade. Se consultar qualquer localização na sua área de estudo através das bandas dois e três, ficará a saber qual a linha e a coluna da origem de menor custo para essa localização.</div>",
		eucBackDirectionName: "Direção de Retorno Euclidiana",
		eucBackDirectionSnip: "Calcula, para cada célula, a direção, em graus, para a célula vizinha ao longo do percurso mais curto de volta até à origem mais próxima, evitando ao mesmo tempo as barreiras.",
		eucBackDirectionDesc: "A função Direção de Retorno Euclidiana resulta num raster de ponto flutuante contínuo que representa a direção, em graus, de volta à origem mais próxima, evitando ao mesmo tempo as barreiras, caso estas sejam fornecidas.<div><br/>As entradas para a função Direção de Retorno Euclidiana são a origem para a qual a direção será calculada. Uma entrada opcional é um raster que representa as barreiras dentro da área de estudo. Tanto para o raster de origem como para o raster de barreira, o valor de fundo deve ser NoData, enquanto as origens e barreiras são representadas com valores válidos. Os valores válidos incluem zero. Por predefinição, o cálculo irá processar-se na extensão combinada das origens e das barreiras, mais 2 linhas e colunas. Se a análise só for necessária a uma distância especificada das origens, pode ser utilizado o parâmetro Distância Máxima. A Direção de Retorno Euclidiana suporta tanto um método Planar como um método Geodésico no cálculo. O cálculo do método Planar será efetuado numa superfície plana projetada utilizando um sistema de coordenadas cartesiano em 2D. O cálculo do método Geodésico será efetuado na elipsoide, o que significa que, independentemente da projeção de entrada ou saída, os resultados não se alteram.<div><br/>O resultado da função Direção de Retorno Euclidiana pode ser utilizado em conjunto com o resultado da função Distância Euclidiana para determinar os percursos mais curtos a partir de localizações dentro da área de estudo até de volta à origem. Tanto o resultado da Direção de Retorno Euclidiana como o resultado da Distância Euclidiana são utilizados na função Percurso de Custo juntamente com os destinos para gerar os percursos mais curtos.</div>",
		expandName: "Expandir",
		expandSnip: "Expande zonas selecionadas de um raster por zonas por um número especificado de células.",
		expandDesc: "Com a função global Expandir, pode generalizar ou simplificar os rasters, tornando zonas específicas maiores. Pode também controlar a quantidade de generalização que irá ocorrer.<div><br/>As zonas que selecionar irão aumentar de tamanho expandindo-se para outras zonas. Conceptualmente, os Valores de Zona selecionados podem ser vistos como zonas de primeiro plano, enquanto os outros valores permanecem como zonas de segundo plano. As zonas de primeiro plano podem expandir-se para as zonas de segundo plano.<div><br/>A quantidade de generalização pode ser controlada com o parâmetro Número de Células. Por predefinição, este valor é 1, o que significa que as zonas selecionadas irão expandir-se pela quantidade correspondente ao tamanho de uma célula. Para aumentar o grau de generalização, pode especificar um valor maior para este parâmetro. Conceptualmente, isto é como executar a ferramenta tantas vezes quanto o número especificado, com os resultados da execução anterior a ser a entrada para a iteração seguinte.</div>",
		trendAnalysisName: "Gerar Tendência",
		trendAnalysisSnip: "Estima a tendência para cada píxel ao longo de uma dimensão para uma ou mais variáveis num raster multidimensional.",
		trendAnalysisDesc: "<div>Esta função pode ser usada para ajustar dados ao longo de uma linha de tendência linear, harmónica ou polinomial ou pode ser usada para realizar a deteção de tendências com o teste Mann-Kendall ou Sazonal-Kendall.</div><br><div>O raster de tendência de saída gerado com esta função é usado como entrada para a função <strong>Prever Através de Tendência</strong>.</div><br><div>Os testes de Mann-Kendall e Seasonal-Kendall são usados para determinar se existe uma tendência monotónica nos dados. Não são paramétricos, o que significa que não admitem uma distribuição específica dos dados. O teste de Mann-Kendall não considera a correlação de série ou efeitos sazonais. Se os dados forem sazonais, o teste de Sazonal-Kendall é o mais adequado.</div><br><div>Se a ferramenta for usada para realizar o teste de Mann-Kendall ou Seasonal-Kendall, a saída é um raster de cinco bandas como apresentado a seguir:</div><ul><li>Banda 1 = Inclinação de Sen</li><li>Banda 2 = Valor P</li><li>Banda 3 = Pontuação Mann-Kendall (S)</li><li>Banda 4 = Variação S</li><li>Banda 4 = Variação S</li><li>Banda 5 = Valor Z</li></ul><div>As saídas do teste Mann-Kendall ou Seasonal-Kendall podem ser usadas para determinar que píxeis na sua série temporal multidimensional têm uma tendência estatisticamente significativa. Pode usar estas informações em conjunto com a análise de tendência linear, harmónica ou polinomial para extrair tendências significativas na sua série temporal. Pode gerar uma máscara incluindo píxeis com valores p significativos, aplicar a máscara ao raster multidimensional e usar este raster multidimensional mascarado como entrada para a ferramenta para realizar análises de tendências lineares, harmónicas ou polinomiais.</div><br><div>Existem três opções de linha de tendência para ajustar uma tendência aos valores das variáveis ao longo de uma dimensão: linear, polinomial e harmónica.</div><br><div>Para uma análise de tendência linear, a saída é um raster de três bandas como apresentado a seguir:</div><ul><li>Banda 1 = Inclinação</li><li>Banda 2 = Interceção</li><li>Banda 3 = Erro Médio Quadrático (RMSE) ou o erro em torno da linha de melhor ajuste</li></ul><div>Para uma análise de tendência polinomial, o número de bandas na saída depende da ordem polinomial. O ajuste polinomial de segunda ordem produz um raster de quatro bandas como apresentado a seguir:</div><ul><li>Banda 1 = Polynomial_2</li><li>Banda 2 = Polynomial_1</li><li>Banda 3 = Polinomial_0</li><li>Banda 4 = RMSE</li></ul><div>O ajuste polinomial de terceira ordem produz um raster de cinco bandas como apresentado a seguir:</div><ul><li>Banda 1 = Polinomial_3</li><li>Banda 2 = Polinomial_2</li><li>Banda 3 = Polinomial_1</li><li>Banda 4 = Polinomial_0</li><li>Banda 5 = RMSE</li></ul><div>Para uma análise de tendência harmónica, o número de bandas na saída depende da frequência harmónica. Quando a frequência é definida como 1, a saída é um raster de cinco bandas como apresentado a seguir:</div><ul><li>Banda 1 = Inclinação</li><li>Banda 2 = Interceção</li><li>Banda 3 = Harmónica_sin1</li><li>Banda 4 = Harmónica_cos1</li><li>Banda 5 = RMSE</li></ul><div>Quando a frequência é definida como 2, a saída é um raster de sete bandas como apresentado a seguir:</div><ul><li>Banda 1 = Inclinação</li><li>Banda 2 = Interceção</li><li>Banda 3 = Harmónica_sin1</li><li>Banda 4 = Harmónica_cos1</li><li>Banda 5 = Harmónica_sin2</li><li>Banda 6 = Harmónica_cos2</li><li>Banda 7 = RMSE</li></ul><div>O parâmetro <strong>Duração do Ciclo</strong> para a análise de tendência harmónica é usado para indicar o número e a duração dos ciclos que espera ver nos seus dados ao longo de um dia ou ano. Por exemplo, se espera que os seus dados passem por dois ciclos de variação num ano, a duração do ciclo será de 182,5 dias ou 0,5 anos. Se tiver dados de temperatura recolhidos a cada três horas e existir um ciclo de variação por dia, a duração do ciclo é de um dia.</div><br><div>O parâmetro <strong>Frequência</strong> para a análise de tendência harmónica é usado para descrever o modelo harmónico a ajustar-se aos dados. Se a frequência for definida como 1, uma combinação de curva linear e de curva harmónica de primeira ordem será usada para se ajustar ao modelo. Se a frequência for 2, uma combinação de curva harmónica linear de primeira ordem e de curva harmónica de segunda ordem será usada para se ajustar aos dados. Se a frequência for 3, uma curva harmónica de terceira ordem adicional será usada para modelar os dados e assim por diante.</div><br><div>As estatísticas de ajustamento do modelo podem ser geradas como saídas opcionais. O erro médio quadrático (RMSE), R-quadrado e o valor p da inclinação da tendência podem ser calculados e simbolizados. Simbolize a camada raster de tendência de saída com a simbologia <strong>RGB</strong> e especifique as estatísticas como as bandas vermelha, verde e azul.</div><br>",
		spectralUnmixingName: "Desmistura Espetral Linear",
		spectralUnmixingSnip: "Efetua a classificação por subpíxeis e calcula a abundância fracionada dos diferentes tipos de cobertura do solo para píxeis individuais.",
		spectralUnmixingDesc: "A função Desmistura Espetral Linear calcula a cobertura fracionada de píxeis individuais que contêm vários tipos de cobertura do solo. Gera uma camada multibanda, em que cada banda corresponde à abundância fracionária de cada classe de cobertura do solo. Por exemplo, pode utilizá-la para realizar a classificação da cobertura do solo numa imagem multiespectral para identificar vegetação fotossintética, solo descoberto e vegetação morta ou não fotossintética.<div><br/>A ordem do raster multibanda de saída segue a ordem do perfil espetral de entrada. O número de classes não pode exceder o número de bandas no raster de entrada. Por exemplo, não se pode extrair informações sobre mais de 8 classes a partir de um raster de 8 bandas.</div>",
		multidimensionalFilterName: "Filtro Multidimensional",
		interpolateRasterByDimensionFunctionName: "Interpolar Raster por Dimensão",
		interpolateRasterByDimensionFunctionSnip: "Interpola um raster multidimensional em valores de dimensão especificados com secções adjacentes.",
		interpolateRasterByDimensionFunctionDesc: "<p>Esta função permite estimar valores de píxel para uma secção de dimensão indefinida num raster multidimensional. Por exemplo, se tiver um conjunto de dados com a temperatura do oceano ao nível da superfície e a 100 metros abaixo do nível do mar e pretender estimar a temperatura a 50 metros abaixo do nível do mar, pode usar esta função para obter uma estimativa a essa profundidade com a definição de dimensão Por Valores.</p><p>Também pode subamostrar um conjunto de dados mensal num conjunto de dados diário com a definição de dimensão Por Intervalo e ao especificar o valor de parâmetro Etapa como 1 e o valor de parâmetro Unidade como Dias.</p><p>Use a definição de dimensão Por Raster de Destino para estimar o valor do Raster de Destino.</p>",
		multidimensionalFilterSnip: "Cria uma camada raster a partir de um conjunto de dados raster multidimensional ou de uma camada raster multidimensional, seccionando os dados ao longo de variáveis e dimensões definidas.",
		multidimensionalFilterDesc: "O Filtro Multidimensional cria uma camada raster multidimensional através da filtragem e extração de um subconjunto de variáveis a partir de um raster multidimensional. Por exemplo, tem um conjunto de dados multidimensional que contém 30 anos de dados mensais sobre precipitação e só quer extrair dados para cada mês de janeiro para ver como a precipitação mudou para esse mês.<div><br/>Utilize o parâmetro Definição de Dimensão para seccionar dimensões utilizando um intervalo, um valor, ou um intervalo de valores. Por exemplo, se tiver 10 anos de dados relativos à salinidade dos oceanos recolhidos mensalmente e a cada 2 metros de profundidade até 500 metros, pode utilizar as diferentes opções de definição de dimensão para os cenários seguintes. Cenário 1: extrair dados relativos à salinidade para o mês de janeiro durante o período de 10 anos. Escolha Por Valores, defina Dimensão para StdTime e defina Valores para Janeiro. Cenário 2: seccionar os dados relativos à salinidade num intervalo de profundidade de 0 a 150 metros. Escolha Por Intervalos, defina Dimensão para StdZ e defina Valor Mínimo para -150 e Valor Máximo para 0. Cenário 3: extrair dados relativos à salinidade para os primeiros 10 dias de cada mês de janeiro durante um período de 10 anos. Escolha Por Iteração, defina Dimensão para StdTime, defina Início da primeira iteração e Fim da primeira iteração para os respetivos início e fim do período de iteração, defina Passo para 1, e defina Unidade para Anos.</div>",
		multidimensionalRasterName: "Raster Multidimensional",
		multidimensionalRasterSnip: "Adiciona dados multidimensionais a um mapa como uma camada raster multidimensional.",
		multidimensionalRasterDesc: "A função Raster Multidimensional adiciona dados multidimensionais a um mapa como uma camada raster multidimensional. Esta função é útil ao realizar fluxos de trabalho de análise raster utilizando uma cadeia de funções.<div><br/>Os conjuntos de dados raster multidimensionais incluem netCDF, GRIB, HDF e CRF da Esri. Os conjuntos de dados de mosaico multidimensionais também são suportados.</div>",
		optimalPathAsRasterName: "Melhor Percurso Como Raster",
		optimalPathAsRasterSnip: "Calcula o percurso de menor custo a partir de uma origem até um destino.",
		optimalPathAsRasterDesc: "Esta função global produz um raster de saída que regista o(s) melhor(es) percurso(s) a partir de locais selecionados até à célula de origem mais próxima definida dentro da superfície de custo acumulado, em termos de distância de custo.<div><br/>Uma ou mais das funções de custo ponderado (Acumulação ou Atribuição de Distância) devem geralmente ser executadas antes da função Melhor Percurso Como Raster para criar a acumulação de distância de entrada e os rasters de direção de retorno. Estas são camadas raster de entrada obrigatórias para a função Melhor Percurso. Os valores no melhor percurso de saída representam o número de percursos num determinado local. Em muitos casos, os percursos seguem o mesmo itinerário, deixando uma origem e divergindo depois para destinos diferentes. Por exemplo, um valor de um indica que existe apenas um melhor percurso num determinado local, enquanto um valor de cinco significa que, nesse local, existem cinco melhores percursos que atravessam essa célula na área de estudo.<div><br/>Os dados de destino de entrada devem ser uma camada raster. O conjunto de células de destino é composto por todas as células do raster de entrada com valores válidos. As células que têm valores NoData não estão incluídas no conjunto. O valor zero é considerado um destino legítimo. Pode ser criado um raster de destino utilizando as ferramentas de extração. Se tiver elementos de destino ou de origem, pode convertê-los para um raster utilizando a função Rasterizar Elementos. Utilize a acumulação de distância ou o raster de direção de retorno como entrada Raster para a função de rasterização. Isto irá assegurar que o elemento é rasterizado utilizando o mesmo tamanho de célula, extensão e referência espacial que os outros rasters que vão para a função Melhor Percurso Como Raster. A função Melhor Percurso Como Raster também pode ser utilizada para derivar o percurso de menor resistência até um modelo de elevação digital (DEM). Neste caso, utilize o DEM para o raster de acumulação de distância de entrada e a saída da função Direção do Fluxo para o Raster de direção de retorno.</div>",
		trendName: "Prever através de Tendência",
		trendSnip: "Calcula uma camada raster multidimensional prevista utilizando o raster de tendência de saída da função Gerar Tendência ou da ferramenta de geoprocessamento Gerar Raster de Tendência.",
		trendDesc: "A função Prever através de Tendência calcula uma camada raster multidimensional prevista utilizando o raster de tendência de saída da função Gerar Tendência ou da ferramenta de geoprocessamento Gerar Raster de Tendência.",
		rasterCollectionName: "Processar Coleção de Rasters",
		rasterCollectionSnip: "Processa cada secção num raster multidimensional ou cada item num raster em mosaico. Esta função pode também agregar várias secções numa única secção.",
		rasterCollectionDesc: "A função Processar Coleção de Rasters processa cada secção num raster multidimensional ou cada item num raster em mosaico. Esta função pode também agregar várias secções numa única secção.<div><br/>Esta função processa cada secção num raster multidimensional ou raster em mosaico utilizando um modelo de função raster. Esta função suporta as seguintes opções: 1. Especifique um modelo de função raster para a Função de Item. Por exemplo, tem um conjunto de dados em mosaico que contém 20 anos de imagens Landsat e pretende calcular o NDVI para cada cena da série temporal. Para a Função de Item, especifique um modelo de função raster que contenha a função raster NDVI. 2. Especifique um modelo de função raster para a Função de Agregação. Por exemplo, tem um raster multidimensional que contém 10 anos de dados relativos à temperatura diária e pretende calcular a temperatura máxima para cada ano. Na Função de Agregação, especifique um modelo de função raster que contenha a função Estatísticas de Células, com a operação definida como Máxima. Em Definição de Agregação, defina Dimensão para StdTime, Tipo para Palavra-chave de Intervalo e Palavra-chave de Intervalo para Anualmente. Note que se o conjunto de dados do mosaico de entrada não for multidimensional, a função de agregação não irá respeitar a definição de agregação. A função de agregação agregará todos os itens ou cada grupo num só se estes estiverem definidos no modelo da função de agregação. Para mais informações sobre a utilização de grupos num conjunto de dados de mosaico, consulte Utilizar Itens do Conjunto de Dados de Mosaico em Modelos da Função Raster. 3. Especifique um modelo de função raster para a Função de Processamento. A função ou cadeia de funções neste modelo é utilizada para exibir o novo raster processado. Por exemplo, especifique um modelo de função raster que contenha a função Mapa de Cor para alterar a forma como a camada raster processada é exibida. Tenha em conta que se a entrada for um raster multidimensional, a função de processamento é aplicada à secção de exibição atual. Se a entrada for uma camada de mosaico ou um conjunto de dados em mosaico, a função de processamento é aplicada ao raster de mosaico utilizando o Primeiro método para resolver sobreposições. 3. Especifique os modelos para qualquer combinação das três funções. Por exemplo, tem um conjunto de dados em mosaico que contém imagens da série temporal Landsat e pretende gerar uma imagem composta do NDVI máximo. Para a Função de Item, especifique um modelo de função raster que contenha a função raster NDVI. Para a Função de Agregação, especifique um modelo de função raster que contenha a função Estatísticas de Células, com a operação definida para Máximo. Para a Função de Processamento, especifique um modelo de função raster que contenha a função Mapa de Cor. Tenha em conta que a ordem de processamento da função segue a ordem dos parâmetros de entrada. Por exemplo, a Função de Item será processada em primeiro lugar.</div>",
		randomName: "Aleatório",
		randomSnip: "Cria um raster com valores de píxeis aleatórios desenhados de uma distribuição pseudoaleatória. São suportadas várias distribuições e geradores de números aleatórios.",
		randomDesc: "A função Aleatório cria um raster com valores de píxeis aleatórios que podem ser utilizados em modelos de funções raster ou conjuntos de dados em mosaico.<div><br/>Embora muitas funções funcionem num ou vários rasters de entrada, a função Aleatório não requer um raster de entrada. Isto significa que se comporta mais como um conjunto de dados raster do que como uma função, pelo que é necessário ter um cuidado especial ao adicioná-la ou removê-la da cadeia de funções.</div>",
		shrinkName: "Reduzir",
		shrinkSnip: "Reduz as zonas selecionadas por um número especificado de células, substituindo-as pelo valor da célula que é mais frequente na sua vizinhança.",
		shrinkDesc: "Com a função global Reduzir, pode generalizar ou simplificar os rasters, tornando as zonas específicas mais pequenas. Pode também controlar a quantidade de generalização que irá ocorrer.<div><br/>As zonas que selecionar irão encolher, ou reduzir em tamanho, tendo células das zonas circundantes a expandir-se para elas. Conceptualmente, os Valores de Zona selecionados podem ser vistos como zonas de primeiro plano, enquanto os outros valores permanecem como zonas de segundo plano. As células nas zonas de primeiro plano podem ser substituídas por células nas zonas de segundo plano. As ilhas finas dentro de uma zona, que podem ser vistas como partilhando limites com a zona, também podem ser substituídas.<div><br/>A quantidade de generalização pode ser controlada com o parâmetro Número de Células. Por predefinição, este valor é 1, o que significa que as zonas selecionadas irão reduzir-se pela quantidade correspondente ao tamanho de uma célula. Para aumentar o grau de generalização, pode especificar um valor maior para este parâmetro. Conceptualmente, isto é como executar a ferramenta tantas vezes quanto o número especificado, com os resultados da execução anterior a ser a entrada para a iteração seguinte.</div>",
		trendToRGBName: "Tendência para RGB",
		trendToRGBSnip: "Converte um raster de tendência num raster de três bandas (vermelho, verde e azul).",
		trendToRGBDesc: "A função Tendência para RGB converte um raster de tendência num raster de três bandas (vermelho, verde e azul). O raster de tendência é gerado a partir da função raster Gerar Tendência ou da função raster Análise CCDC.<div><br/>Esta função é útil para visualizar dados do coeficiente do modelo da função Gerar Tendência ou da função Análise CCDC. Ambas as funções estimam tendências em valores de píxeis variáveis, mas os resultados das funções são difíceis de interpretar diretamente.<div><br/>Tal como muitas funções raster, pode ter de utilizar o Ajuste de Intervalo Dinâmico (DRA) para visualizar melhor os resultados desta função.</div>",
		landTrendrName: "Análise LandTrendr",
		landTrendrSnip: "Avalia as alterações nos valores de píxeis ao longo do tempo com o método Landsat de deteção de tendências de perturbação e recuperação (LandTrendr) e gera um raster de análise de alterações com os resultados do modelo.",
		landTrendrDesc: "Esta função raster só pode ser usada como entrada para a função raster Detetar Alterações Através da Análise de Alterações. Para gerar uma saída raster, associe a função Análise LandTrendr à função Alterações Através da Análise de Alterações num modelo de função raster, e utilize o modelo como entrada na ferramenta de geoprocessamento Gerar Raster a partir da Função Raster. O resultado é um raster que contém informações relativas ao tempo em que os valores de píxel se alteraram.<div><br>O objetivo desta função raster é extrair alterações num elemento observado, pelo que as imagem multidimensionais de entrada ideais devem capturar uma observação consistente ao longo do tempo e não devem incluir interferência atmosférica ou de sensor, nuvens, ou sombra de nuvem. A melhor prática é utilizar dados que tenham sido normalizados e possam ser mascarados utilizando uma banda de QA, por ex., de Refletância de Superfície Landsat Coleção 1 com uma máscara de nuvem.<div><br>A função efetua análises numa imagem por ano, e o número de secções anuais deve ser igual ou superior ao valor especificado no parâmetro <strong>Número Mínimo de Observações</strong>. Recomenda-se que tenha pelo menos seis anos de dados.<div><br>Se tiver dados mensais, semanais ou diários, recomenda-se que selecione várias imagens de cada ano (de preferência, da mesma estação), remova as nuvens e a sombra das nuvens, e combine as imagens para gerar uma única imagem que capte bem a observação. Se forem fornecidos dados mensais, semanais, ou diários como raster de dados multidimensional, a função identificará uma secção para análise com base na data mais próxima da fornecida no parâmetro <strong>Ajuste da Data</strong>.<div><br>Um elemento numa paisagem levará frequentemente tempo a recuperar de uma alteração não permanente como um incêndio florestal ou uma infestação de insetos. Para controlar a taxa de recuperação reconhecida pelo modelo, defina o parâmetro Limiar de Recuperação. Um segmento distinto não pode ter uma taxa de recuperação mais rápida do que 1/limiar de recuperação.<div><br>A recuperação de uma alteração na paisagem pode ocorrer na direção positiva ou negativa. Por exemplo, quando uma paisagem experimenta uma perda florestal, uma série temporal de valores do índice de vegetação apresenta uma queda nos valores do índice, e a recuperação mostra um aumento gradual nos valores do índice de vegetação, ou uma tendência positiva de recuperação. Especificar a direção da tendência de recuperação com o parâmetro <strong>Recuperação com Tendência Crescente</strong>.",
		aggregateMultidimensionalName: "Agregar Multidimensional",
		aggregateMultidimensionalSnip: "Combina dados variáveis raster multidimensionais existentes ao longo de uma dimensão.",
		aggregateMultidimensionalDesc: "A função Agregar Multidimensional cria uma camada raster multidimensional ao combinar dados existentes de variáveis raster multidimensionais ao longo de uma dimensão.<div><br>Use o parâmetro <strong>Definição da Dimensão</strong> para filtrar primeiro os dados de entrada que pretende agregar. Por exemplo, se tiver 30 anos de dados mensais, mas apenas quiser criar uma camada agregada durante os primeiros 15 anos, pode usar o parâmetro <strong>Definição da Dimensão</strong> para especificar os anos a incluir na análise.<div><br><ul><li>Extrair dados relativos à salinidade para o mês de janeiro durante o período de 10 anos. Selecione <strong>Por Valores</strong>, defina <strong>Dimensão</strong> para <strong>StdTime</strong> e defina <strong>Valores</strong> para <strong>Janeiro</strong>.</li><li>Seccione os dados relativos à salinidade num intervalo de profundidade de 0 a 150 metros. Selecione <strong>Por Intervalos</strong>, defina <strong>Dimensão</strong> para <strong>StdZ</strong> e defina <strong>Valor Mínimo</strong> para <strong>-150</strong> e <strong>Valor Máximo</strong> para <strong>0</strong>.</li><li>Extraia dados relativos à salinidade para os primeiros 10 dias de cada mês de janeiro durante um período de 10 anos. Selecione <strong>Por Iteração</strong>, defina <strong>Dimensão</strong> para <strong>StdTime</strong>, defina <strong>Início da primeira iteração</strong> e <strong>Fim da primeira iteração</strong> para o início e fim correspondentes do período de iteração, defina <strong>Passo</strong> para <strong>1</strong> e defina <strong>Unidade</strong> para <strong>Anos</strong>.</li></ul><div><br>Use os parâmetros <strong>Definição de Agregação</strong> para selecionar a dimensão a avaliar e o intervalo de agregação usando uma palavra-chave, um valor ou um intervalo de valores. Por exemplo, se tiver 30 anos de dados de temperatura à superfície do mar, recolhidos diariamente e a cada 5 metros de profundidade até 100 metros, pode utilizar as diferentes opções de intervalo para os seguintes cenários:<div><br><ul><li>Agregar dados diários de temperatura em dados mensais, onde o resultado é um raster multidimensional com 12 secções de tempo, e cada secção é o agregado de cada mês ao longo de todos os anos. Selecione <strong>Palavra-chave de Intervalo</strong> e defina a palavra-chave para <strong>Mensal Recorrente</strong>.</li><li>Agregue dados diários de temperatura em dados mensais, onde o resultado é um raster multidimensional com 360 secções ou 12 secções de tempo por ano (30 anos x 12 meses = 360 secções). Selecione <strong>Palavra-chave de Intervalo</strong> e defina a palavra-chave para <strong>Mensal</strong>.</li><li>Agregue os dados de temperatura mensais em intervalos de 4 meses. Selecione <strong>Valor de Intervalo</strong>, defina <strong>Intervalo de Valor</strong> para 4 e defina <strong>Unidade</strong> para <strong>Meses</strong>.</li><li>Agregue os dados de temperatura de 0 a 25 metros, e depois de 25 a 50 metros, e de 50 a 100 metros. Selecione <strong>Intervalos</strong> e especifique as profundidades mínima e máxima como <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Intercalar Rasters",
		mergeRastersSnip: "Combina múltiplos conjuntos de dados raster espacialmente ou através de variáveis e dimensões.",
		mergeRastersDesc: "Esta função cria um raster intercalado a partir de uma lista de rasters. Por exemplo, se tiver um conjunto de dados em mosaico que contenha 30 anos de dados mensais de precipitação e outro conjunto de dados com 10 anos de dados mensais de temperatura, pode combiná-los num raster multidimensional com ambas as variáveis. <div><br>Se os rasters multidimensionais de entrada contiverem variáveis diferentes, o raster multidimensional de saída conterá todas as variáveis. <div><br>Se os rasters multidimensionais de entrada contiverem diferentes dimensões ou valores dimensionais, o raster multidimensional de saída incluirá todas as dimensões e valores dimensionais. <div><br>Se os rasters multidimensionais de entrada contiverem as mesmas dimensões e variáveis, mas extensões espaciais diferentes, o raster multidimensional de saída incluirá as variáveis e dimensões em todas as extensões espaciais intercaladas.<div><br>Esta função também pode ser usada quando se tem vários rasters que se pretende tratar como um único item, tal como calcular as mesmas estatísticas para todos, ou quando se faz o balanço de cor para que não seja necessário fazer o balanço de cor de cada imagem separadamente. Isto é útil quando se trabalha com imagens armazenadas como mosaicos separados devido a restrições de tamanho de ficheiro; desta forma, os mosaicos serão tratados como parte da mesma imagem.",
		boundaryCleanName: "Limpeza de Limites",
		boundaryCleanSnip: "Suaviza o limite entre as zonas.",
		boundaryCleanDesc: "<p>A função generaliza ou simplifica rasters ao suavizar os limites entre as zonas. A função fornece opções para controlar como as células das zonas na entrada influenciam a suavização e a quantidade de suavização que será aplicada. Cada célula de entrada é avaliada usando os oito vizinhos imediatos correspondentes.</p><p>O processo de suavização primeiro classifica as células vizinhas por uma prioridade particular. A prioridade determina que zona das células vizinhas pode substituir o valor da célula de processamento na saída.</p><p>A prioridade pode ser baseada no valor das zonas ou no tamanho das zonas. O parâmetro <strong>Tipo de Ordenação</strong> determina o tipo de ordenação a ser usado. </p><p>A predefinição <strong>Não ordenar</strong> avalia a prioridade com base no valor das zonas. As células de zonas com valores maiores terão uma prioridade mais alta para se expandirem para zonas com valores menores.</p><p>O tamanho/área total das zonas pode ser usado para classificar a prioridade. Com a definição <strong>Decrescente</strong>, as zonas são classificadas por tamanho em ordem decrescente. As zonas com áreas totais maiores terão prioridade de expansão para zonas com áreas menores. Com a definição <strong>Crescente</strong>, o oposto é verdadeiro: zonas com áreas totais menores terão prioridade de se expandirem para zonas com áreas totais maiores.</p><p>A quantidade de suavização é controlada pelo parâmetro <strong>Executar expansão e redução duas vezes</strong>, que determina o número de vezes que o processo de expansão e redução será realizado.</p><p>Com a definição não selecionada, o processo de expansão e redução é executado uma vez. Com a definição selecionada, o processo de expansão e redução é realizado duas vezes, resultando num grau adicional de suavização dos limites da zona.</p><p>Se os valores de todas as oito células vizinhas forem iguais aos da célula de processamento, a célula de saída manterá o valor da célula de entrada.</p>",
		predictUsingRegressionName: "Prever Com Regressão",
		predictUsingRegressionSnip: "Calcula um raster previsto com base em entradas de dados raster e num modelo de regressão. O modelo de regressão é a saída da ferramenta de geoprocessamento raster <strong>Modelo de Regressão Train Random Trees (Preparar Árvores Aleatórias)</strong>.",
		predictUsingRegressionDesc: "<p>O modelo de regressão é definido num ficheiro de definição de regressão Esri (.ecd). Contém todas as informações para um conjunto de dados específico ou conjunto de conjuntos de dados e o modelo de regressão e é gerado pela ferramenta de geoprocessamento raster <strong>Modelo de Regressão Train Random Trees (Preparar Árvores Aleatórias)</strong>.</p><p>A entrada pode ser uma única banda, uma multibanda ou um raster multidimensional ou uma lista destes tipos. Os tipos de rasters de entrada têm de ser do mesmo tipo de raster formado pelo modelo de regressão.</p><ul><li>Quando a entrada é um raster multibanda, cada banda é tratada como uma variável de previsão. As bandas têm de estar na mesma ordem que a entrada multibanda para a ferramenta de formação do modelo de regressão.</li><li>Quando a entrada é um raster multidimensional, cada variável é tratada como uma variável de previsão e a variável tem de ser de banda única e ter uma dimensão de tempo. A ordem e os nomes das variáveis têm de ser iguais aos da entrada quando o modelo de regressão foi formado. A saída é um raster multidimensional.</li><li>A entrada pode ser uma lista de itens. O número e a ordem dos itens têm de corresponder à entrada quando o modelo de regressão foi formado.</li></ul>",
		dimensionalMovingStatisticsName: "Estatísticas de Movimento Dimensional",
		dimensionalMovingStatisticsSnip: "Calcula estatísticas durante uma janela em movimento em dados multidimensionais ao longo de uma dimensão especificada.",
		dimensionalMovingStatisticsDesc: "<p>A função Estatísticas de Movimento Dimensional calcula várias estatísticas numa janela predefinida para todos os valores de dimensão ao longo de uma dimensão. Esta função recebe uma camada raster multidimensional como entrada e cria uma camada raster multidimensional como saída com o mesmo tamanho dimensional da camada de entrada.</p><p>Pode especificar uma dimensão para a qual os valores de dimensão são considerados durante o cálculo. Por predefinição, a função calcula ao longo da primeira dimensão não espacial. Também pode especificar um tamanho de janela ao especificar os parâmetros Janela Anterior e Janela Posterior.</p><p>Quando o Tipo de Estatística é definido como Percentil, os parâmetros Valor de Percentil e Tipo de Interpolação de Percentil ficam disponíveis. Pode usar estes parâmetros para especificar o percentil a ser calculado e escolher o tipo de interpolação a ser usado, respetivamente. Quando o Tipo de Estatística é definido como Média Circular, o parâmetro Valor de Moldagem Circular fica disponível. O valor de moldagem circular é usado para converter um valor linear no intervalo de uma determinada média circular.</p>",
		terrainFlattenFunctionName: "Aplanamento de Terreno",
		terrainFlattenFunctionSnip: "Corrige os dados de entrada do radar de abertura sintética (SAR) para distorções radiométricas devidas à topografia.",
		terrainFlattenFunctionDesc: "<p>A função raster Aplanamento de Terreno corrige os dados de entrada do radar de abertura sintética (SAR) para distorções radiométricas devidas à topografia.</p><p>Os dados de entrada do radar têm de ser primeiro calibrados para beta-zero. Utilize a ferramenta Aplicar Calibração Radiométrica para calibrar os dados de radar para beta-zero.</p><p>Se a entrada de DEM não abranger o conjunto de dados SAR completo, a ferramenta irá produzir valores NoData para os píxeis fora da extensão de DEM para beta-zero, sigma-zero, área de dispersão e saídas de distorção geométrica. Para a saída da máscara de distorção geométrica, a ferramenta irá produzir valores indeterminados para os píxeis fora da extensão de DEM.</p><p>A entrada de DEM tem de estar no sistema de coordenadas geográficas WGS 1984 (EPSG:4326).</p>",
		createColorCompositeFunctionName: "Criar Composição de Cores",
		createColorCompositeFunctionSnip: "Cria um raster de três bandas a partir de um conjunto de dados raster multibanda no qual cada banda pode utilizar um cálculo algébrico baseado em álgebra de banda.",
		createColorCompositeFunctionDesc: "<p>A função raster Criar Composição de Cores cria um raster de três bandas a partir de um conjunto de dados raster multibanda no qual cada banda pode utilizar um cálculo algébrico baseado em álgebra de banda.</p><p>Ao definir um algoritmo aritmético de banda, pode introduzir uma fórmula algébrica de uma linha para cada expressão para criar uma saída multibanda. Os operadores suportados são unários: mais (+), menos (-), multiplicação (*) e divisão (/).</p><p>Ao utilizar um ID de banda numa expressão, identifique a banda através do prefixo B ou b para o número de banda.</p><p>Uma combinação de banda comum utilizada para o radar de abertura sintética (SAR) em unidades lineares é VV para vermelho, VH para verde e VV/VH para azul. Se os dados de entrada estiverem em decibéis, a combinação de bandas deve ser VV para vermelho, VH para verde e VV-VH para azul.</p>",
		surfaceParametersName: "Parâmetros de Superfície",
		surfaceParametersSnip: "Determina parâmetros de um raster de superfície como aspeto, inclinação e vários tipos de curvaturas através de métodos geodésicos.",
		surfaceParametersDesc: "<p>A função Parâmetros de Superfície determina parâmetros de um raster de superfície como aspeto, inclinação e vários tipos de curvaturas através de métodos geodésicos.</p><p>Esta função pode ser utilizada para as seguintes aplicações:</p><ul><li>Calcular aspeto e inclinação através de métodos geodésicos.</li><li>Calcular diferentes tipos de curvaturas a partir de um raster de superfície de entrada, por exemplo, <strong>Curvatura tangencial (contorno normal)</strong> que caracteriza a convergência topográfica e a divergência do fluxo na superfície.</li></ul>",
		leastCostCorridorName: "Corredor de Menor Custo",
		leastCostCorridorSnip: "Calcula a soma de dois rasters de distância de custo acumulado com a opção de aplicar um limiar baseado na percentagem ou no custo acumulado.",
		leastCostCorridorDesc: "<p>Os rasters de entrada devem ser rasters de acumulação de distância e rasters de direção de retorno resultantes da função <strong>Acumulação de Distância</strong> ou <strong>Atribuição de Distância</strong>. Estes devem basear-se na distância de custo e devem ser utilizados os mesmos parâmetros ao criar as camadas para cada fonte. Nenhum parâmetro que dependa da direcionalidade (fator horizontal, fator vertical e direção de viagem) deve ser utilizado na criação destes raster.</p><p>Os valores no raster de corredor de saída são a soma do custo acumulado para alcançar uma determinada localização com as mesmas unidades que os rasters de distância de custo acumulado de entrada.</p><p>Se um valor de <strong>Limiar</strong> especificado for superior ao custo acumulado máximo quando os dois rasters de acumulação de distância são somados, o raster de corredor de saída irá cobrir a mesma área que os rasters de acumulação de entrada.</p><p>Se um valor de limiar especificado for inferior ao valor mínimo no raster de corredor, é devolvida uma mensagem de aviso e o raster de saída estará vazio.</p><p>O raster de corredor de saída pode conter células com custos acumulados ligeiramente superiores ao valor limite. Isto deve-se ao facto de os rasters de direção de retorno utilizarem células às quais foram atribuídos custos ligeiramente superiores ao limiar para ligar células desconectadas ao corredor.</p>",
		geometricMedianName: "Mediana Geométrica",
		geometricMedianSnip: "A função Mediana Geométrica calcula a mediana geométrica dos píxeis numa série temporal de imagens multibanda.",
		geometricMedianDesc: "<p>Esta função reduz o ruído e os valores atípicos em imagens de séries temporais, calculando um píxel mediano geométrico para cada conjunto de píxeis na pilha de imagens. O algoritmo mantém as relações espectrais entre as bandas nos espectros de píxeis, pelo que o resultado pode ser utilizado em análises, tais como índices de vegetação.</p><p>As nuvens e sombras devem ser mascaradas com a banda QA do conjunto de dados antes de aplicar esta função.</p><p>Se a imagem de entrada for de ponto flutuante, tal como a refletância de superfície com valores entre 0 e 1, um valor epsilon de 0,001 deverá produzir resultados de qualidade.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Tipo de Esquema de Cores",
		colormapName: "Mapa de Cores",
		colormapNameName: "Nome do Mapa de Cores",
		colorRampName: "Rampa de Cores",
		contrastOffsetName: "Desvio de Contraste",
		brightnessOffsetName: "Desvio de Luminosidade",
		methodName: "Método",
		bandNamesName: "Nomes de Bandas",
		bandWavelengthsName: "Comprimentos de Onda de Bandas",
		bandIdsName: "Ids de Bandas",
		missingBandActionName: "Ação de Banda em Falta",
		conversionParametersName: "Parâmetros e Conversão",
		hillshadeTypeName: "Tipo de Sombra",
		azimuthName: "Azimute",
		altitudeName: "Altitude:",
		slopeTypeName: "Dimensionar",
		zFactorName: "Fator Z",
		PSPowerName: "Potência Tamanho de Pixeis",
		PSZFactorName: "Fator Tamanho de Pixeis",
		removeEdgeEffectName: "Desativar interpolação edge pixel predefinida",
		fromUnitName: "A partir de Unidade",
		toUnitName: "Para Unidade",
		rasterTypeName: "Tipo",
		minName: "Mínimo de Saída",
		maxName: "Máximo de Saída",
		minPercentName: "Percentagem de Recorte Mínima",
		maxPercentName: "Percentagem de Recorte Máxima",
		numberOfStandardDeviationName: "Número de desvios padrão",
		sigmoidStrengthLevelName: "Nível de Força de Sigmóide",
		estimateStatsHistogramName: "Estimar Estatísticas",
		DRAName: "Ajustamento de Intervalo Dinâmico",
		statisticsName: "Estatísticas",
		histogramsName: "Histogramas",
		statisticsHistogramName: "Definir Estatísticas e Histograma",
		computeGammaName: "Gama Automática",
		useGammaName: "Utilizar Gama",
		gammaName: "Gama",
		inputNamesName: "Nomes",
		expressionName: "Expressão",
		cellsizeTypeName: "Tipo de Tamanho de Célula",
		extentTypeName: "Tipo de Extensão",
		classifierDefinitionFileName: "Ficheiro de Definição d Entrada",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Raster Verdadeiro",
		falseRasterName: "Raster Falso",
		noDataInterpretationName: "Interpretação NoData",
		noDataValuesName: "Valores NoData",
		includedRangesName: "Intervalos Incluídos",
		curvatureTypeName: "Tipo de Curvatura",
		rastersName: "Rasters",
		attributeTableName: "Tabela",
		attributeTableTypeName: "Tipo de Tabela",
		rowsName: "Número de Linhas",
		columnsName: "Número de Colunas",
		kernelName: "Kernel",
		mirrorEdgesName: "Margens em Espelho",
		influencesName: "Influências",
		fieldsName: "Campos",
		remapsName: "Voltar a Cartografar Tabela",
		evalFromName: "Escala de Avaliação Desde",
		evalToName: "Escala de Avaliação Até",
		weightsName: "Pesos",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "Rádio IDW de Curto Alcance",
		maxVoidWidthName: "Largura Máxima Void",
		sigmaGaussianName: "Suavização Adaptável",
		contourTypeName: "Tipo de Contorno",
		zBaseName: "Base Z",
		numberOfContoursName: "Número de contornos",
		contourIntervalName: "Intervalo de contornos",
		nthContourLineInBoldName: "Nth ContourLine A Negrito",
		featureClassName: "Elementos de Entrada:",
		classIndexFieldName: "Campo",
		resolveOverlapMethodName: "Resolver Método de Sobreposição",
		resamplingTypeName: "Tipo de Resampling",
		inputCellsizeName: "Tamanho de Células de Entrada",
		outputCellsizeName: "Tamanho de Células de Saída",
		pointFeatureClassName: "Pontos Seed",
		maxGrowthRadiusFieldName: "Campo de Raio de Crescimento Máximo",
		similarityThresholdFieldName: "Campo de Limiar de Semelhança",
		fillValueFieldName: "Campo Valor de Preenchimento",
		spectralDetailName: "Detalhe Espectral [1..20]",
		spatialDetailName: "Detalhe Espacial [1..20]",
		minNumPixelsPerSegmentName: "Tamanho de Segmento Mínimo em Pixeis",
		boundariesOnlyName: "Apenas limites de segmentos",
		statisticsTypeName: "Tipo de Estatística",
		fillNoDataOnlyName: "Preencher apenas píxeis NoData",
		inputDataTypeName: "Tipo de Dados de Entrada",
		angleReferenceSystemName: "Sistema de Referência de Ângulo",
		outputDataTypeName: "Tipo de Dados de Saída",
		inputSamplePointFeatureClassName: "Amostras de Entrada",
		valueFieldName: "Campo Valor",
		rasterInfoName: "Info. de Raster",
		interpolationMethodName: "Método de Interpolação",
		radiusName: "Raio",
		radianceGainValuesName: "Ganho de Luminosidade",
		radianceBiasValuesName: "Tendência de Luminosidade",
		reflectedGainValuesName: "Ganho de Refletância",
		reflectedBiasValuesName: "Tendência de Refletância",
		sunElevationName: "Elevação do Sol (graus)",
		albedoName: "Albedo",
		scaleFactorName: "Fator de Escala",
		offsetName: "Desvio",
		thresholdTypeName: "Tipo de Limiar",
		thresholdsName: "Limiares",
		undefinedClassName: "Classe Indefinida",
		minValueName: "Mín.",
		maxValueName: "Máx.",
		operationName: "Operação",
		clippingTypeName: "Tipo de Recorte",
		clippingGeometryName: "Recortar Geometria / Raster",
		extentName: "Extensão de Saída",
		useInputFeatureGeometryName: "Utilizar elementos de entrada para recortar geometria",
		remapDefinitionTypeName: "Tipo de Definição Voltar a Cartografar",
		inputRangeName: "Intervalos de Entrada",
		outputValuesName: "Valores de Saída",
		noDataRangeName: "Intervalos NoData",
		inputFieldName: "Introduzir Campo",
		outputFieldName: "Campo de Saída",
		inputMaxFieldName: "Campo Máx de Entrada (opcional)",
		remapTableTypeName: "Tipo de Tabela Voltar a Cartografar",
		allowUnmatchedName: "Permitir valores de pixéis sem correspondência",
		changeMissingValuesToNoDataName: "Alterar valores em falta para NoData",
		visibleBandIDName: "ID de Banda Visível",
		infraredBandIDName: "ID de Banda de Infravermelhos",
		scientificOutputName: "Saída Científica",
		bandIndexesName: "Índices de Bandas",
		constantName: "Constante",
		weightName: "Peso",
		minimumName: "Mínimo",
		maximumName: "Máximo",
		sourceDataName: "Raster de Origem",
		sourceFieldName: "Campo de Origem",
		costRasterName: "Raster de Custo",
		maxDistanceName: "Distância Máxima",
		valueRasterName: "Raster de Valor",
		costMultiplierName: "Multiplicador para aplicar a Custos",
		startCostName: "Custo Inicial",
		accumCostResistanceRateName: "Taxa de Resistência Custo Acumulativo",
		capacityName: "Capacidade",
		travelDirectionName: "Direção de Viagem",
		cellSizeName: "Cellsize",
		populationFieldName: "Campo População",
		areaUnitsName: "Unidades de Área",
		outputValueTypeName: "Valores de Células de Saída",
		barriersName: "Barreiras de Introdução",
		destinationDataName: "Raster de Destino",
		destinationFieldName: "Campo Destino",
		pathTypeName: "Tipo de Caminho",
		observerFeaturesName: "Elementos de Observadores",
		analysisMethodName: "Método de Análise",
		analysisTypeName: "Tipo de Análise",
		verticalErrorName: "Erro Vertical",
		refractivityCoefficientName: "Coeficiente de Refratividade",
		surfaceOffsetName: "Desvio de Superfície",
		observerElevationName: "Elevação de Observador",
		observerOffsetName: "Desvio de Observador",
		innerRadiusName: "Raio Interior",
		innerRadiusIs3DDistanceName: "O Raio Interior é uma Distância 3D",
		outerRadiusName: "Raior Exterior",
		outerRadiusIs3DDistanceName: "O Raio Exterior é uma Distância 3D",
		horizontalStartAngleName: "Ângulo de Início Horizontal",
		horizontalEndAngleName: "Ângulo de Fim Horizontal",
		verticalUpperAngleName: "Ângulo Superior Vertical",
		verticalLowerAngleName: "Ângulo Inferior Vertical",
		zoneDataName: "Raster de Zona",
		zoneFieldName: "Campo de Zona",
		ignoreNoDataName: "Ignorar NoData em cálculos",
		temperatureRasterName: "Raster de Temperatura",
		inTemperatureUnitsName: "Unidades de Temperatura",
		outHeatIndexTemperatureUnitsName: "Unidades de Índice de Aquecimento",
		relativeHumidityRasterName: "Raster de Humidade Relativa",
		outWindChillTemperatureUnitsName: "Unidades de Arrefecimento pelo Vento",
		windSpeedRasterName: "Raster de Velocidade do Vento",
		inWindSpeedUnitsName: "Unidades de Velocidade do Vento",
		valueName: "Valor",
		propertyName: "Nome de Propriedade",
		jsonName: "Metadados JSON",
		zoneTableName: "Tabela de Atributos Zonais",
		attributeFieldNames: "Nomes de Campo de Atributo",
		backgroundName: "Valor de Fundo",
		whereClauseName: "Cláusula Onde",
		minimumValueFieldName: "Nome de Campo de Valor Mínimo",
		maximumValueFieldName: "Nome de Campo de Valor Máximo",
		outValueFieldName: "Nome de Campo de Valor de Saída",
		defaultValueName: "Valor de Saída Padrão",
		conversionMatrixName: "Matriz de Conversão",
		IsPseudoColorOutputName: "É uma pseudo saída de cor",
		unmappedAsRandomColorName: "Atribuir aleatoriamente cor a píxeis não mapeados",
		distanceMethodName: "Método de distância",
		flowDirRasterName: "Raster de direção do fluxo",
		pourPointName: "Deitar Raster ponto(s)",
		pourPointFieldName: "Deixar campo ponto",
		constantZName: "Constante Z",
		zOffsetName: "Offset Z",
		geoIdName: "Geóide",
		calibrationTypeName: "Tipo de caibragem",
		filterTypeName: "Tipo de filtro",
		filterSizeName: "Tamanho do filtro",
		noiseModelName: "Modelo de ruído",
		noiseVarianceName: "Variação de ruído",
		additiveNoiseMeanName: "Média de ruído aditivo",
		multiplicativeNoiseMeanName: "Média de ruído multiplicativo",
		numberofLooksName: "Número de feições",
		dampingFactorName: "Fator de amortecimento",
		maskRasterName: "Raster máscara",
		nibbleValuesName: "Utilizar valores NoData se estes forem o vizinho mais próximo",
		nibbleNoDataName: "Células NoData vibração",
		zLimitName: "Limite Z",
		flowDirectionTypeName: "Tipo de direção do fluxo",
		weightRasterName: "Raster peso",
		forceEdgeName: "Forçar todas as células de bordas a fluir para fora",
		streamRasterName: "Raster de stream",
		surfaceRasterName: "Raster de superfície",
		conversionType: "Tipo de conversão",
		distanceRaster1: "Raster de distância 1",
		distanceRaster2: "Raster de distância 2",
		costDistanceRaster: "Raster de distância custo",
		costBacklinkRaster: "Raster de backlink custo",
		overridesName: "Substitui",
		fieldName: "Campo",
		signatureFileOrUrl: "Ficheiro de assinatura ou URL",
		redName: "Vermelho",
		greenName: "Verde",
		blueName: "Azul",
		infraredName: "Infravermelhos",
		panchromaticName: "Pancromático",
		multispectralName: "Multiespectral",
		pansharpeningType: "Tipo pansharpening",
		sensorName: "Sensor",
		spatialReferenceName: "Referência Espacial",
		xCellsizeName: "Tamanho da célula X",
		yCellsizeName: "Tamanho da célula Y",
		xOriginName: "Ponto de registo X",
		yOriginName: "Ponto de registo Y",
		percentileName: "Valor de Percentil",
		neighborhoodType: "Tipo vizinhança",
		widthName: "Largura",
		heightName: "Altura",
		startAngleName: "Ângulo de Início",
		endAngleName: "Ângulo de fim",
		neighborhoodValues: "Valores vizinhança",
		horizontalRaster: "Raster horizontal",
		horizontalFactor: "Fator horizontal",
		verticalRaster: "Raster vertical",
		verticalFactor: "Fator vertical",
		streamRaster: "Raster de stream",
		flowDirRaster: "Raster de direção do fluxo",
		numberNeighborCells: "Número de células vizinhas",
		zoneConnectivity: "Conectividade de zona",
		addLinkBehavior: "Adicionar Ligação",
		excludedValue: "Valor excluído",
		constantFillCheck: "Criar Raster enchimento a partir de constante",
		fillRaster: "Raster de enchimento",
		constantFillValue: "Valor Constante",
		inputBitPositions: "Bit entrada",
		outputBitPositions: "Bit saída",
		distanceTypeName: "Tipo de Distância",
		barrierDataName: "Barreiras de Raster",
		pourPointDataName: "Raster de Ponto de Escoamento",
		accumulationRasterName: "Raster de Acumulação do Fluxo",
		snapDistanceName: "Distância de Encaixe",
		orderMethodName: "Método de Ordenação",
		directionMeasurementName: "Direção da Medição",
		processAsMultiband: "Processar como Multibanda",
		processMultidimensional: "Processar como multidimensional",
		forceFlowDirectionConvention: "Forçar convenção de direção do fluxo para raster de backlink custo",
		initialAccumulation: "Acumulação Inicial",
		maximumAccumulation: "Acumulação Máxima",
		sourceLocationBands: "Gerar linha e coluna de origem como bandas adicionais na saída",
		backDirectionBand: "Gerar direção de retorno como banda adicional na saída",
		numberOfCells: "Número de Células",
		zoneValues: "Valores de Zona",
		shrinkMethod: "Reduzir Método",
		expandMethod: "Expandir Método",
		inputSpectralProfileType: "Tipo de Perfil Espetral",
		spectralProfileFileName: "Perfil Espetral",
		trainingFeatureFileName: "Elemento de Formação",
		nonNegative: "Não negativo",
		sumToOne: "Somar a Um",
		randomDistribution: "Distribuição",
		meanName: "Média",
		probabilityName: "Probabilidade",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "N",
		seed: "Seed",
		randomNumberGenerator: "Gerador de Número Aleatório",
		cellFactor: "Fator de Célula",
		aggregationType: "Técnica de agregação",
		extentHandling: "Expandir extensão se necessário",
		trendAnalysisDimensionName: "Nome da Dimensão",
		trendAnalysisType: "Tipo de Tendência",
		harmonicFrequency: "Frequência Harmónica",
		polynomialOrder: "Ordem Polinomial",
		cycleLengthName: "Duração do Ciclo",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R-quadrado",
		trendAnalysisSlopePValue: "Valor P do Coeficiente de Inclinação",
		trendAnalysisSeasonalPeriod: "Período Sazonal",
		cycleUnitName: "Unidade de Ciclo",
		predictDimensionValues: "Valores",
		dimensionDefinitionType: "Definição de Dimensão",
		predictDimensionStart: "Iniciar",
		predictDimensionEnd: "Final",
		predictDimensionInterval: "Intervalo de valor",
		dimensionUnit: "Unidade",
		interpolationCellsizeName: "Tamanho de Célula de Interpolação",
		variableName: "Variáveis",
		dimensionlessName: "Sem Dimensão",
		mdimDefinition: "Definição de Dimensão",
		dimensionName: "Dimensão",
		iterationStart: "Início da primeira iteração",
		iterationEnd: "Fim da primeira iteração",
		intervalStart: "Início do Intervalo",
		intervalEnd: "Fim do Intervalo",
		stepName: "Passo",
		rangesName: "Faixas",
		minValue: "Valor Mínimo",
		maxValue: "Valor Máximo",
		changeAnalysisRasterName: "Raster de Análise de Alterações",
		changeTypeName: "Alterar Tipo",
		segmentDate: "Data do Segmento",
		changeDirectionName: "Alterar Direção",
		maxNumChangesName: "Número Máximo de Alterações",
		filterByYear: "Filtrar por Ano",
		minimumYear: "Valor Mínimo",
		maximumYear: "Valor Máximo",
		filterByDuration: "Filtrar por Duração",
		minimumDuration: "Duração Mínima",
		maximumDuration: "Duração Máxima",
		filterByMagnitude: "Filtrar por Magnitude",
		minimumMagnitude: "Magnitude Mínima",
		maximumMagnitude: "Magnitude Máxima",
		filterByStartValue: "Filtrar Por Valor Inicial",
		minimumStartValue: "Valor Inicial Mínimo",
		maximumStartValue: "Valor Inicial Máximo",
		filterByEndValue: "Filtrar Por Valor Final",
		minimumEndValue: "Valor Final Mínimo",
		maximumEndValue: "Valor Final Máximo",
		modelTypeName: "Tipo de Modelo",
		fromRasterName: "Do Raster",
		toRasterName: "Para o Raster",
		computeChangeMethod: "Método de Calcular Alteração",
		fromClassValues: "De Valores de Classe (Exemplo: 2 5)",
		toClassValues: "Para Valores de Classe (Exemplo: 2 5)",
		keepMethod: "Filtrar Método",
		useColorMethod: "Definir Cores de Transição",
		detectChangeBands: "Bandas para Deteção de Alterações (começa no 0)",
		tmaskBands: "Bandas para Máscara Temporal (começa no 0)",
		chiSquaredThreshold: "Limiar de Chi-quadrado para Detetar Alterações",
		minAnomaly: "Observações de Anomalias Mínimas Consecutivas",
		updatingFrequency: "Atualização da Frequência de Ajuste (em anos)",
		distanceAccumulationRasterName: "Raster de Acumulação de Distância",
		costBackdirectionRasterName: "Raster de Direção de Retorno ou de Direção do Fluxo",
		rasterCollectionName: "Coleção de Raster",
		itemFunctionName: "Função do Item",
		aggregationFunctionName: "Função de Agregação",
		processingFunctionName: "Função de Processamento",
		aggregationDefinitionName: "Definição de Agregação",
		queryGeometryName: "Consultar geometria",
		factorFunctionZeroFactor: "Fator Zero",
		factorFunctionCutAngle: "Ângulo de Corte",
		factorFunctionSideFactor: "Fator Lateral",
		factorFunctionSlope: "Inclinação",
		factorFunctionLowCutAngle: "Ângulo de Corte Baixo",
		factorFunctionHighCutAngle: "Ângulo de Corte Alto",
		factorFunctionCosPower: "Potência do Cosseno",
		factorFunctionSecPower: "Potência da Secante",
		factorFunctionTablePath: "Caminho da Tabela",
		processingBand: "Banda de Processamento",
		processingBandName: "Nome da Banda de Processamento",
		snappingDate: "Ajustar Data",
		maxNumSegments: "Número Máximo de Segmentos",
		vertexCountOvershoot: "Overshoot de Contagem de Vértices",
		spikeThreshold: "Limiar de Spike",
		recoveryThreshold: "Limiar de Recuperação",
		minNumObs: "Número Mínimo de Observações",
		pValueThreshold: "Limiar de Valor P",
		bestModelProportion: "Melhor Proporção de Modelo",
		preventOneYearRecovery: "Prevenir Recuperação de Um Ano",
		recoveryIncreaseTrend: "Recuperação com Tendência Crescente",
		outputOtherBands: "Saída de Outras Bandas",
		sortType: "Tipo de Ordenação",
		numberOfRuns: "Executar expansão e redução duas vezes",
		percentileValue: "Valor de Percentil",
		percentileInterpolationType: "Tipo de interpolação de percentil",
		rasterInfoProperty: "Propriedade",
		rasterInfoValue: "Valor",
		rasterInfoColumns: "Colunas",
		rasterInfoRows: "Linhas",
		rasterInfoBandCount: "Número de Bandas",
		rasterInfoPixelSizeX: "Tamanho da Célula X",
		rasterInfoPixelSizeY: "Tamanho da Célula Y",
		rasterInfoPixelType: "Tipo de Píxel",
		rasterExtentTop: "Superior",
		rasterExtentBottom: "Inferior",
		rasterExtentLeft: "Esquerda",
		rasterExtentRight: "Direita",
		rasterStatisticsNotCalculated: "As estatísticas não foram calculadas.",
		spatialReferenceProjection: "Projeção",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "WKID anterior",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "VCSWKID anterior",
		spatialReferenceAuthority: "Autoridade",
		spatialReferenceLinearUnit: "Unidade Linear",
		spatialReferenceAngularUnit: "Unidade Angular",
		spatialReferenceFalseEasting: "Falso Avanço para Este",
		spatialReferenceFalseNorthing: "Falso Avanço para Norte",
		spatialReferenceCentralMeridian: "Meridiano Central",
		spatialReferencePrimeMeridian: "Meridiano Principal",
		spatialReferenceStandardParallel1: "Paralela Standard 1",
		spatialReferenceStandardParallel2: "Paralela Standard 2",
		spatialReferenceLatitudeOfOrigin: "Latitude da Origem",
		spatialReferenceAuxiliarySphereType: "Tipo de Esfera Auxiliar",
		spatialReferenceDatum: "Datum",
		spatialReferenceSpheroid: "Esferoide",
		spatialReferenceSemimajorAxis: "Eixo Semi-Maior",
		spatialReferenceSemiminorAxis: "Eixo Semi-Menor",
		spatialReferenceInverseFlattening: "Achatamento Inverso",
		inputDefinitionFileName: "Ficheiro de Definição de Entrada",
		deleteName: "Eliminar",
		addVariableName: "Adicionar variável",
		maxNumPixelsPerSegment: "Tamanho de Segmento Máximo em Píxeis",
		forwardWindowName: "Janela Posterior",
		backwardWindowName: "Janela Anterior",
		noDataHandlingName: "Gestão de NoData",
		circularWrapValueName: "Valor de Moldagem Circular",
		fromClassNameFieldName: "Nome do Campo Para Nomes de Classes De Raster",
		toClassNameFieldName: "Nome do Campo Para Nomes de Classes Para o Raster",
		targetRasterName: "Raster de Destino",
		circularWrapValue: "Valor de Moldagem Circular",
		bandIndexesR: "Expressão Vermelha",
		bandIndexesG: "Expressão Verde",
		bandIndexesB: "Expressão Azul",
		exampleName: "Exemplo",
		inputName: "Introdução",
		outputName: "Saída",
		optionalName: "Opcional",
		browseDefinitionFile: "Procurar Ficheiro de Definição",
		selectDefinitionFile: "Selecionar Ficheiro de Definição de Entrada",
		inputDefinitionURL: "URL de Ficheiro de Definição de Entrada",
		enterDefinitionFileURL: "Introduzir URL de Ficheiro de Definição",
		browseXMLFile: "Procurar Ficheiro XML",
		selectStatsFile: "Selecionar Ficheiro de Estatísticas e Histogramas",
		enterXMLFileURL: "Introduzir URL de Ficheiro XML",
		xmlFileURL: "URL de Ficheiro XML",
		circularCalculation: "Calcular Estatísticas Circulares",
		localSurfaceType: "Tipo de Superfície Local",
		surfaceParameterType: "Tipo de Parâmetro",
		neighborhoodDistance: "Distância de Vizinhança",
		useAdaptiveNeighborhood: "Usar Vizinhança Adaptativa",
		outputSlopeType: "Medição de Declive de Saída",
		projectAzimuths: "Azimutes Geodésicos do Projeto",
		useEquatorialAspect: "Usar Aspeto Equatorial",
		zUnit: "Unidade Z",
		analysisMask: "Máscara de Análise",
		stdDeviation: "Desvio Padrão",
		"true": "Verdadeiro",
		"false": "Falso",
		costDistanceRaster1: "Raster de Distância de Custo Acumulativo de Entrada 1",
		costDistanceRaster2: "Raster de Distância de Custo Acumulativo de Entrada 2",
		threshold: "Limiar",
		thresholdMethod: "Método de Limiar",
		directionRaster1: "Raster de Direção de Retorno de Entrada 1",
		directionRaster2: "Raster de Direção de Retorno de Entrada 2",
		maxIterations: "Número Máximo de Iterações",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Manual",
		attributeTableTypeExternal: "Externo",
		clrSchemeTypeColormap: "Mapa de Cores",
		clrSchemeTypeColorRamp: "Rampa de Cores",
		colormapTypeElevation: "Elevação",
		colormapTypeGray: "Cinza",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Aleatório",
		none: "Nenhum",
		slopeTypeAdjusted: "Ajustado",
		slopeTypeDegree: "Grau",
		slopeTypePercentRise: "PercentRise",
		slopeTypeScaled: "Dimensionado",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "PercentMinMax",
		stretchTypeSigmoid: "Sigmóide",
		stretchTypeStdDev: "StdDev",
		hillshadeTypeSimple: "Tradicional",
		hillshadeTypeMultidirectional: "Multidirecional",
		bandComboByNames: "Nomes de Bandas",
		bandComboByWavelength: "Comprimentos de Onda de Bandas",
		bandComboByIDs: "Ids de Bandas",
		missingBandActionBestMatch: "Melhor Correspondência",
		missingBandActionFail: "Falha",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Centímetros",
		unitTypeDecimeters: "Decímetros",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Pés",
		unitTypeFeetPerSec: "Pés Por Segundo (pés/s)",
		unitTypeInches: "Polegadas",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Quilómetros",
		unitTypeKmsPerHour: "Quilómetros Por Hora (km/h)",
		unitTypeKnots: "Nós (kn)",
		unitTypeMeters: "Metros",
		unitTypeMetersPerSec: "Metros Por Segundo (m/s)",
		unitTypeMiles: "Milhas",
		unitTypeMilesPerHour: "Milhas Por Hora (mph)",
		unitTypeMillimeters: "Milímetros",
		unitTypeNauticalMiles: "Milhas Náuticas",
		unitTypeYards: "Jardas",
		unitTypeDecimalDegrees: "Graus decimais",
		unitTypePoints: "Pontos",
		unitTypeUnknown: "Desconhecido",
		unitTypeSqMapUnits: "Unidades Quadradas de Mapa",
		unitTypeSqMiles: "Milhas Quadradas",
		unitTypeSqKms: "Quilómetros Quadrados",
		unitTypeAcres: "Acres",
		unitTypeHectares: "Hectares",
		unitTypeSqYards: "Jardas Quadradas",
		unitTypeSqFt: "Pés Quadrados",
		unitTypeSqInches: "Polegadas Quadradas",
		unitTypeSqMts: "Metros Quadrados",
		unitTypeSqCms: "Centimetros Quadrados",
		unitTypeSqMms: "Milimetros Quadrados",
		cellsizeTypeFirst: "Primeiro De",
		cellsizeTypeMin: "Mín. De",
		cellsizeTypeMax: "Máx. De",
		cellsizeTypeMean: "Média De",
		cellsizeTypeLast: "Último De",
		extentTypeFirst: "Primeiro De",
		extentTypeIntersection: "Intersecção De",
		extentTypeUnion: "União De",
		extentTypeLast: "Último De",
		noDataInterpretAny: "Corresponder Qualquer",
		noDataInterpretAll: "Corresponder Todos",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Perfil",
		curvatureTypePlanform: "Asa",
		filterTypeLineDetectionHorizontal: "Deteção de Linha Horizontal",
		filterTypeLineDetectionVertical: "Deteção de Linha Vertical",
		filterTypeLineDetectionLeftDiagonal: "Deteção de Linha Diagonal Esquerda",
		filterTypeLineDetectionRightDiagonal: "Deteção de Linha Diagonal Direita",
		filterTypeGradientNorth: "Gradiente Norte",
		filterTypeGradientWest: "Gradiente Oeste",
		filterTypeGradientEast: "Gradiente Este",
		filterTypeGradientSouth: "Gradiente Sul",
		filterTypeGradientNorthEast: "Gradiente Nordeste",
		filterTypeGradientNorthWest: "Gradiente Noroeste",
		filterTypeSmoothArithmeticMean: "Média Aritmética Uniforme",
		filterTypeSmoothing3x3: "A uniformizar 3x3",
		filterTypeSmoothing5x5: "A uniformizar 5x5",
		filterTypeSharpening3x3: "A aperfeiçoar 3x3",
		filterTypeSharpening5x5: "A aperfeiçoar 5x5",
		filterTypeLaplacian3x3: "Laplaciano 3x3",
		filterTypeLaplacian5x5: "Laplaciano 5x5",
		filterTypeSobelHorizontal: "Sobel Horizontal",
		filterTypeSobelVertical: "Sobel Vertical",
		filterTypeSharpen: "Aperfeiçoar",
		filterTypeSharpen2: "Acentuar mais",
		filterTypePointSpread: "Dispersão de Pontos",
		userDefined: "Definido por Utilizador",
		ContourTypeLines: "Linhas de Contorno",
		ContourTypeFill: "Preenchimento de Contorno",
		ContourTypeSmoothOnly: "Apenas Superfície Suave",
		rasterizeFirst: "Primeiro",
		rasterizeLast: "Último",
		rasterizeSmallest: "Menor",
		rasterizeLargest: "Maior",
		resamplingTypeNearest: "Vizinho mais próximo",
		resamplingTypeBilinear: "Interpolação Bilinear",
		resamplingTypeCubic: "Convolução Cúbica",
		resamplingTypeMajority: "Maioria",
		resamplingTypeBilinearPlus: "Interpolação Bilinear Plus",
		resamplingTypeGauss: "Gauss Blur",
		resamplingTypeGaussPlus: "Gauss Blur Plus",
		resamplingTypeAverage: "Média",
		resamplingTypeMinimum: "Mínimo",
		resamplingTypeMaximum: "Máximo",
		resamplingTypeVectorAvg: "Média de Vetores",
		minimum: "Mínimo",
		maximum: "Máximo",
		mean: "Média",
		stdDeviation: "Desvio Padrão",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Magnitude-Direção",
		unknown: "Desconhecido",
		angleRefSysGeographic: "Geográficos",
		angleRefSysArithmetic: "Aritméticos",
		interpolateIrregularDataNearest: "Vizinho mais próximo",
		interpolateIrregularDataBilinear: "Bilinear",
		interpolateIrregularDataTinningLinear: "Estanhagem linear",
		interpolateIrregularDataTinningNaturalNeighbor: "Vizinho natural",
		interpolateIrregularDataTinningIDW: "Distância inversa pesada",
		esriRasterThresholdTypeConstant: "Constante",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Máx. Arg",
		argStatsTypeMin: "Mín Arg",
		argStatsTypeMedian: "Mediana Arg",
		argStatsTypeDuration: "Duração",
		arithmeticOpPlus: "Mais",
		arithmeticOpMinus: "Menos",
		arithmeticOpMultiply: "Multiplicar",
		arithmeticOpDivide: "Dividir",
		arithmeticOpPower: "Potência",
		arithmeticOpMode: "Modo",
		clipTypeOutside: "Recortar Fora",
		clipTypeInside: "Recortar Dentro",
		yes: "Sim",
		no: "Não",
		densities: "Densidades",
		expectedCounts: "Contagens Expectáveis",
		planar: "planar",
		geodesic: "Geodésica",
		eachCell: "Cada Célula",
		eachZone: "Cada Zona",
		bestSingle: "Melhor Único",
		allSightlines: "Todas as Linhas de Visão",
		perimeterSightlines: "Linhas de visão do Perímetro",
		frequency: "Frequência",
		observers: "Observadores",
		majority: "Maioria",
		median: "Mediana",
		minority: "Minoria",
		percentile: "Percentil",
		range: "Intervalo",
		sum: "Soma",
		variety: "Variedade",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "SAVI Transformado",
		bandArithmeticMethodMSAVI: "SAVI Modificado",
		bandArithmeticMethodSultan: "Fórmula de Sultan",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Óxido de Ferro",
		ferrousMinerals: "Minerais Ferrosos",
		clayMinerals: "Minerais de Argila",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Raiz Quadrada",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Bitwise Não",
		localBooleanNot: "Booleano Não",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "É Nulo",
		localFloat: "Flutuar",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Negar",
		localRoundDown: "Arredondar para Baixo",
		localRoundUp: "Arredondar para Cima",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Mais",
		localMinus: "Menos",
		localTimes: "Tempos",
		localPower: "Potência",
		localBitwiseAnd: "Bitwise E",
		localBitwiseLeftShift: "Bitwise Esquerda Shift",
		localBitwiseOr: "Bitwise Ou",
		localBitwiseRightShift: "Bitwise Direita Shift",
		localBitwiseXor: "Bitwise Xor",
		localBooleanAnd: "Booleano E",
		localBooleanOr: "Booleano Ou",
		localBooleanXor: "Booleano Xor",
		localDivide: "Dividir",
		localEqualTo: "Igual A:",
		localGreaterThan: "Maior do Que",
		localGreaterThanEqual: "Maior Igual",
		localLessThan: "Menor do que",
		localLessThanEqual: "Menor Igual",
		localMod: "Mod",
		localNotEqual: "Não Igual",
		localATan2: "ATan2",
		localSquare: "Quadrado",
		localSetNull: "Definir Nulo",
		remapDefTypeList: "Lista",
		remapDefTypeTable: "Tabela",
		remapTableTypeSimple: "Simples",
		remapTableTypeDynamic: "Dinâmico",
		remapTableTypeReassignment: "Reatribuição",
		geomCorrectionByConstZ: "Utilizar constante Z",
		geomCorrectionByDEM: "Utilizar DEM",
		radarCalibBetaNought: "Beta-zero",
		radarCalibSigmaNought: "Sigma-zero",
		radarCalibGammaNought: "Gama-zero",
		speckleFilterTypeLee: "Filtro Lee",
		speckleFilterTypeEnhancedLee: "Filtro Lee melhorado",
		speckleFilterTypeFrost: "Filtro Frost",
		speckleFilterTypeKuan: "Filtro Kuan",
		speckleNoiseModelMul: "Ruído multiplicativo",
		speckleNoiseModelAdd: "Ruído aditivo",
		speckleNoiseModelAddnMul: "Ruído aditivo e multiplicativo",
		mosaicOpTypeFirst: "Primeiro",
		mosaicOpTypeLast: "Último",
		mosaicOpTypeMin: "Mín.",
		mosaicOpTypeMax: "Máx.",
		mosaicOpTypeMean: "Média",
		mosaicOpTypeBlend: "Blend",
		mosaicOpTypeSum: "Soma",
		integer: "Inteiro",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Vertical",
		horizontal: "Horizontal",
		localCellStatisticsMajority: "Maioria",
		localCellStatisticsMax: "Máximo",
		localCellStatisticsMean: "Média",
		localCellStatisticsMedian: "Mediana",
		localCellStatisticsMin: "Mínimo",
		localCellStatisticsMinority: "Minoria",
		localCellStatisticsRange: "Intervalo",
		localCellStatisticsStdDev: "Desvio Padrão",
		localCellStatisticsSum: "Soma",
		localCellStatisticsVariety: "Variedade",
		localCellStatisticsMajorityIgnoreND: "Maioria (Ignorar NoData)",
		localCellStatisticsMaxIgnoreND: "Máximo (Ignorar NoData)",
		localCellStatisticsMeanIgnoreND: "Média (Ignorar NoData)",
		localCellStatisticsMedianIgnoreND: "Mediana (Ignorar NoData)",
		localCellStatisticsMinIgnoreND: "Mínimo (Ignorar NoData)",
		localCellStatisticsMinorityIgnoreND: "Minoria (Ignorar NoData)",
		localCellStatisticsRangeIgnoreND: "Intervalo (Ignorar NoData)",
		localCellStatisticsStdDevIgnoreND: "Desvio padrão (Ignorar NoData)",
		localCellStatisticsSumIgnoreND: "Soma (Ignorar NoData)",
		localCellStatisticsVarietyIgnoreND: "Variedade (Ignorar NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Percentil (Ignorar NoData)",
		fromSource: "De fonte",
		toSource: "Para fonte",
		colorspaceConversionRgbToHsv: "RGB para HSV",
		colorspaceConversionHsvToRgb: "HSV para RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Média",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Retângulo",
		circleNeighborhood: "Círculo",
		annulusNeighborhood: "Anel",
		wedgeNeighborhood: "Calço",
		irregularNeighborhood: "Irregular",
		weightNeighborhood: "Peso",
		four: "Quatro",
		eight: "Oito",
		within: "Incluído",
		cross: "Cruz",
		addLink: "Adicionar Ligação",
		noLink: "Sem ligação",
		weightedMean: "Média Ponderada",
		ls8QCBitPatternCirrus: "Landsat 8: Cirro",
		ls8QCBitPatternCloud: "Landsat 8: Nuvem",
		ls8QCBitPatternCloudShadow: "Landsat 8: Sombra de Nuvem",
		ls8QCBitPatternDesignatedFill: "Landsat 8: Preenchimento Designado",
		ls8QCBitPatternDroppedFrame: "Landsat 8: Perda de Frame",
		ls8QCBitPatternSnowIce: "Landsat 8: Neve/Gelo",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8: Oclusão do Terreno",
		ls8QCBitPatternVegetation: "Landsat 8: Vegetação",
		ls8QCBitPatternWater: "Landsat 8: Água",
		downStream: "A jusante",
		upStream: "A montante",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Secção Atual",
		allSlices: "Todas as Secções",
		expandDistance: "DISTÂNCIA",
		expandMorphological: "MORFOLÓGICO",
		spectralProfileFile: "Perfil Espetral",
		trainingFeatureFile: "Elemento de Formação",
		randomDistributionTypeUniform: "Uniforme",
		randomDistributionTypeUniformInteger: "Inteiro",
		randomDistributionTypeNormal: "Normal",
		randomDistributionTypeExponential: "Exponencial",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gama",
		randomDistributionTypeBinomial: "Binomial",
		randomDistributionTypeGeometric: "Geométrica",
		randomDistributionTypeNegativeBinomial: "Binomial Negativo",
		randomGeneratorTypeStandardCRand: "Standard C Rand",
		randomGeneratorTypeAlgorithmACM599: "ACM collected algorithm 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Soma",
		medainName: "Mediana",
		trendLinear: "Linear",
		trendHarmonic: "Harmónica",
		trendPolynomial: "Polinomial",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Kendall Sazonal",
		dimensionByValue: "Por Valor",
		dimensionByInterval: "Por Intervalo",
		mdimDefTypeAll: "Todos",
		mdimDefTypeByValues: "Por Valores",
		mdimDefTypeByRanges: "Por Intervalos",
		mdimDefTypeByIteration: "Por Iteração",
		mdimDefTypeByInterval: "Por Intervalo",
		mdimDefTypeByTargetRaster: "Por Raster de Destino",
		esriTimeUnitsHours: "Horas",
		esriTimeUnitsDays: "Dias",
		esriTimeUnitsWeeks: "Semanas",
		esriTimeUnitsMonths: "Meses",
		esriTimeUnitsYears: "Anos",
		esriTimeIntervalKeywordHourly: "A cada hora",
		esriTimeIntervalKeywordDaily: "Diariamente",
		esriTimeIntervalKeywordWeekly: "Semanalmente",
		esriTimeIntervalKeywordDekadly: "A cada 10 anos",
		esriTimeIntervalKeywordPentadly: "A cada 5 anos",
		esriTimeIntervalKeywordMonthly: "Mensalmente",
		esriTimeIntervalKeywordQuarterly: "Trimestral",
		esriTimeIntervalKeywordYearly: "Anualmente",
		esriTimeIntervalKeywordRecurringDaily: "Recorrente diariamente",
		esriTimeIntervalKeywordRecurringWeekly: "Recorrente semanalmente",
		esriTimeIntervalKeywordRecurringMonthly: "Recorrente mensalmente",
		esriTimeIntervalKeywordRecurringQuarterly: "Recorrente trimestralmente",
		aggDefTypeAll: "Tudo",
		aggDefTypeIntervalKeyword: "Palavra-chave de Intervalo",
		aggDefTypeIntervalValue: "Valor de Intervalo",
		aggDefTypeIntervalRanges: "Intervalos",
		latestChange: "Hora da Última Alteração",
		earliestChange: "Hora da Primeira Alteração",
		largestChange: "Hora da Maior Alteração",
		numberOfChanges: "Número de Alterações",
		longestChange: "Hora da Maior Alteração",
		shortestChange: "Hora da Menor Alteração",
		fastestChange: "Hora da Alteração Mais Rápida",
		slowestChange: "Hora da Alteração Mais Lenta",
		allChanges: "Tudo",
		increaseChanges: "Aumentar",
		decreaseChanges: "Reduzir",
		segmentBeginning: "Início do segmento",
		segmentEnd: "Fim do segmento",
		esriComputeChangeMethodDifference: "Diferença",
		esriComputeChangeMethodRelativeDifference: "Diferença Relativa",
		esriComputeChangeMethodCategorical: "Diferença Categórica",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Distância Euclidiana Espectral",
		esriComputeChangeMethodMultispectralAngularDifference: "Diferença Angular Espectral",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Banda Com Mais Alterações",
		esriComputeChangeKeepAll: "Manter Tudo",
		esriComputeChangeKeepChangedOnly: "Manter Apenas Píxeis Alterados",
		esriComputeChangeKeepUnchangedOnly: "Manter Apenas Píxeis Inalterados",
		esriComputeChangeUseColorAverage: "De e Para Cores Médias",
		esriComputeChangeUseColorFrom: "Usar De Cores",
		esriComputeChangeUseColorTo: "Utilizar Para Cores",
		factorFunctionBinary: "Binário",
		factorFunctionForward: "Para a frente",
		factorFunctionLinear: "Linear",
		factorFunctionInvLinear: "Linear Inverso",
		factorFunctionTable: "Tabela",
		factorFunctionSymLinear: "Linear Simétrico",
		factorFunctionSymInvLinear: "Linear Simétrico Inverso",
		factorFunctionCos: "Cosseno",
		factorFunctionSec: "Secante",
		factorFunctionCosSec: "Cosseno Secante",
		factorFunctionSecCos: "Secante Cosseno",
		noSort: "Não Ordenar",
		ascend: "Crescente",
		descend: "Decrescente",
		autoDetect: "Detetar automaticamente",
		nearest: "Mais Próximo",
		linear: "Linear",
		esriMonthJanuary: "janeiro",
		esriMonthFebruary: "fevereiro",
		esriMonthMarch: "março",
		esriMonthApril: "abril",
		esriMonthMay: "maio",
		esriMonthJune: "junho",
		esriMonthJuly: "julho",
		esriMonthAugust: "agosto",
		esriMonthSeptember: "setembro",
		esriMonthOctober: "outubro",
		esriMonthNovember: "novembro",
		esriMonthDecember: "dezembro",
		dimensionalMovingIgnoreNoData: "Dados",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "Preencher NoData",
		circularMean: "Média Circular",
		circularName: "Circular",
		arithmeticName: "Aritméticos",
		slopeName: "Declive",
		aspectName: "Aspeto",
		meanCurvature: "Curvatura média",
		profileCurvature: "Curvatura do perfil (linha de declive normal)",
		tangentialCurvature: "Curvatura tangencial (contorno normal)",
		planCurvature: "Curvatura do plano (contorno projetado)",
		contourGeodesicTorsion: "Torção geodésica de contorno",
		gaussianCurvature: "Curvatura gaussiana",
		casoratiCurvature: "Curvas de Casorati",
		localSurfaceTypeQuadratic: "Quadrática",
		localSurfaceTypeBiquadratic: "Biquadrática",
		thresholdNoThreshold: "Sem Limiar",
		thresholdPercentLeastCost: "Percentagem de Menor Custo",
		thresholdAccumulativeCost: "Custo Acumulativo",
		clrmapTypeHillshade: "Sombreado"
	},
	categoryLabels: {
		sourceCharacteristics: "Características da Fonte",
		neighborhoodSettings: "Definições de Vizinhança",
		statistics: "Estatísticas",
		gamma: "Gama",
		viewshedParameters: "Parâmetros de Área Visível",
		observerParameters: "Parâmetros de Observador",
		irregularDataInterpolation: "Interpolação de Dados Irregular",
		modelStatistics: "Estatísticas do Modelo",
		aggregationDef: "Definição de Agregação",
		filterByAttributes: "Filtrar Por Atributos",
		percentileName: "Percentil",
		rasterInfo: "Informações do Raster",
		extent: "Estender",
		spatialReference: "Referência Espacial"
	},
	outputRasterHelpTexts: {
		outputName: "<p>O nome da camada que será criada e adicionada ao mapa.</p>",
		resultType: "<p>O tipo de saída que será criado. As saídas podem ser camadas de imagens em mosaico ou camadas de imagens dinâmicas.</p>",
		saveResultIn: "<p>O nome da pasta em <b>O Meu Conteúdo</b> onde o resultado será guardado.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Definições de ambiente para análise no Map Viewer. </p>",
		outSR: "<p>Especifica o sistema de coordenadas para análise e a camada de resultados.</p>",
		extent: "<p>Especifica a área a ser utilizada para análise.</p>",
		snapRaster: "<p>Ajusta a extensão da saída para que corresponda ao alinhamento da célula da camada raster de ajuste especificada.</p>",
		cellSize: "<p>Especifica o tamanho da célula ou resolução que será utilizado para análise e criar a camada de raster de saída.</p>",
		mask: "<p>Especifica uma camada de máscara na qual apenas as células que se enquadrarem na área de máscara serão utilizadas para análise.</p>",
		resamplingMethod: "<p>Especifica como interpolar valores de píxeis quando os rasters de entrada e saída não se alinham.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Tipo não suportado",
		currentlyUnsupported: " Um editor predefinido para o tipo ${missingType} está pendente, mas está para breve. Caixa de texto temporária de espaço reservado para especificar entradas baseadas em cadeias de caracteres.",
		unsupportedOverrideWarning: "Está pendente, mas para breve, um componente do editor de substituições que proporciona uma melhor experiência de utilizador para trabalhar com os seguintes parâmetros:",
		overrideWidgetMissing: "Componente do editor de substituições em falta!",
		uiIncomplete: "O envio da tarefa falhou. A função não pode ser executada porque alguns dos campos obrigatórios estão incompletos ou em falta na IU.",
		count: "Contagem",
		selectVariables: "Selecionar variáveis",
		selectFeature: "Selecione uma camada de elementos",
		greaterThanErrorMessage: "O número de entrada tem de ser maior que ${min}",
		lesserThanErrorMessage: "O número de entrada tem de ser menor que ${max}",
		greaterThanOrEqualErrorMessage: "O número de entrada tem de ser maior ou igual a ${min}",
		lesserThanOrEqualErrorMessage: "O número de entrada tem de ser menor ou igual a ${max}",
		allowScalar: "Selecione uma camada ou introduza uma constante",
		selectField: "Selecionar campo",
		parameterRequired: "Este parâmetro é obrigatório.",
		enterAValue: "Introduza um valor...",
		invalidInput: "O valor introduzido não é válido.",
		itemNotFound: "O item não existe ou não está acessível.",
		itemPermissionDenied: "Não tem permissões para aceder a este item.",
		layerNotAvailable: "Falha ao carregar a camada ${layerName}.",
		multipleLayersNotAvailable: "Falha ao carregar a camada ${layerName} e outras.",
		learnMoreLabel: "Saber Mais",
		fieldNotAvailable: "Falha ao carregar o campo.",
		allowAnalysis: "A análise não é permitida no serviço de imagens.",
		allowAnalysisReason: "Uma ou mais camadas do mapa não estão indicadas aqui porque não permitem análises.",
		learnMoreText: "Saiba mais",
		atLeastOneRasterInput: "Pelo menos uma camada de entrada deve ser uma camada raster.",
		browseAnalysisLayers: "Procurar camadas",
		activeMapViewExtent: "Usar Extensão de Mapa Atual",
		chooseRaster: "Selecionar Recortar Raster",
		chooseGeometry: "Selecionar Recortar Geometria",
		resultType: "Tipo de resultado",
		saveInFolder: "Guardar numa pasta",
		outputName: "Nome de saída",
		outputLayerType: "Tipo de camada de saída",
		dynamicImageryLayer: "Camada de imagens dinâmica",
		tiledImageryLayer: "Camada de imagens em mosaico",
		custom: "Personalizar",
		loading: "A carregar...",
		layerMissing: "Uma ou mais camadas do mapa não estão indicadas aqui porque não permitem análises. Saiba mais.",
		browseCoordinateSystems: "Procurar sistemas de coordenadas",
		unableToRepopulateOutSR: "Não é possível preencher o sistema de coordenadas de saída.",
		defaultTitle: "Ver mais",
		"ARC (equal arc-second)": "ARC (arco-segundo igual)",
		Africa: "África",
		Antarctica: "Antártica",
		Argentina: "Argentina",
		Asia: "Ásia",
		"Asteroid Belt": "Cintura de Asteroides",
		"Atlantic Ocean": "Oceano Atlântico",
		Australia: "Austrália",
		"Australia and New Zealand": "Austrália e Nova Zelândia",
		Austria: "Áustria",
		"BLM (US Feet)": "BLM (Pés EUA)",
		Bangladesh: "Bangladesh",
		"Beijing 1954": "Beijing 1954",
		Bhutan: "Butão",
		CGCS2000: "CGCS2000",
		Canada: "Canadá",
		Caribbean: "Caraíbas",
		"Caribbean Sea": "Mar das Caraíbas",
		"Central America": "América Central",
		"Central and North America": "América Central e do Norte",
		Colombia: "Colômbia",
		Continental: "Continental",
		"County Systems": "Sistemas de Condados",
		"Democratic Republic of the Congo": "República Democrática do Congo",
		"EPSG Arctic": "Ártico EPSG",
		Earth: "Terra",
		"Ellipsoidal-based": "Baseado em elipsoidal",
		Europe: "Europa",
		Finland: "Finlândia",
		France: "França",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss Kruger",
		"Geographic Coordinate Systems": "Sistemas de Coordenadas Geográficas",
		Germany: "Alemanha",
		"Gravity-related": "Relacionado com gravidade",
		"Greenwich-based": "Baseado em Greenwich",
		"Highways England": "Autoestradas de Inglaterra",
		Illinois: "Illinois",
		"Indian Ocean": "Oceano Índico",
		"Indian Subcontinent": "Subcontinente Indiano",
		Indiana: "Indiana",
		Indonesia: "Indonésia",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irlanda e Reino Unido",
		Italy: "Itália",
		Japan: "Japão",
		Jupiter: "Júpiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Líbia",
		Malaysia: "Malásia",
		"Malaysia and Singapore": "Malásia e Singapura",
		Mars: "Marte",
		Mercury: "Mercúrio",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (Pés EUA)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (Pés Int.)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (Metros)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (Pés EUA)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (Pés Int.)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (Metros)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (Pés EUA)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (Pés Int.)",
		"NAD 1983 (Meters)": "NAD 1983 (Metros)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (Metros)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (Pés EUA)",
		"NAD 1983 (US Feet)": "NAD 1983 (Pés EUA)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (Pés Int.)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (Metros)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (Pés EUA)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (Pés Int.)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (Metros)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (Pés EUA)",
		"National Grids": "Grelhas Nacionais",
		Navajo: "Navajo",
		Neptune: "Neptuno",
		"New Beijing": "Novo Pequim",
		"New Zealand": "Nova Zelândia",
		"North America": "América do Norte",
		"Northern Hemisphere": "Hemisfério Norte",
		Norway: "Noruega",
		Oceans: "Oceanos",
		Oregon: "Oregon",
		"Other GCS": "Outro GCS",
		"Pacific Ocean": "Oceano Pacífico",
		Pluto: "Plutão",
		Polar: "Polar",
		Portugal: "Portugal",
		"Projected Coordinate Systems": "Sistemas de Coordenadas Projetadas",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Substituído",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturno",
		"Solar System": "Sistema Solar",
		"South Africa": "África do Sul",
		"South America": "América do Sul",
		"South Korea": "Coreia do Sul",
		"Southern Hemisphere": "Hemisfério Sul",
		"Spheroid-based": "Baseado em esferóides",
		"State Plane": "Plano Estatal",
		"State Systems": "Sistemas de Estados",
		Sweden: "Suécia",
		"Switzerland and Liechtenstein": "Suíça e Liechtenstein",
		Texas: "Texas",
		Tribal: "Tribal",
		Turkey: "Turquia",
		"US Feet": "Pés EUA",
		"USA and territories": "EUA e territórios",
		UTM: "UTM",
		Ukraine: "Ucrânia",
		"Unknown Height Systems": "Sistemas de Altura Desconhecidos",
		Uranus: "Úrano",
		Venus: "Vénus",
		"Vertical Coordinate Systems": "Sistemas de Coordenadas Verticais",
		Vietnam: "Vietname",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Mundo",
		"World (Sphere-based)": "Mundo (Baseado em esferas)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Concluído",
		noResults: "Nenhum resultado encontrado",
		searchPlaceholder: "Nome ou WKID",
		browseTemplate: "Procurar templates de função raster",
		saveTemplate: "Guardar template de função raster",
		preview: "Pré-visualizar",
		previewDescription: "Pré-visualize o resultado antes de efetuar a análise.",
		showPreview: "Exibir pré-visualização",
		previewLayer: "Pré-visualizar camada ${number}",
		newPreview: "Nova pré-visualização",
		previewPopup: "Ative a pré-visualização dos resultados da análise com base nos parâmetros de entrada.",
		updatePreviewLayer: "Atualizar a camada de pré-visualização selecionada",
		createPreviewLayer: "Criar nova camada de pré-visualização",
		maximumPreviewAllowed: "Número máximo de camadas de pré-visualização permitido: ${maxCount}",
		previewFailure: "Esta camada de pré-visualização não está disponível. Verifique os parâmetros de entrada e atualize novamente esta camada de pré-visualização.",
		header: "Selecionar item",
		content: "Tem alterações não guardadas em ${rftTitle}. Se começar novamente com um novo template, essas alterações perder-se-ão.",
		dontSave: "Não guardar",
		"continue": "Continuar",
		stretch: "Ajustar à janela",
		pan: "Mover",
		newTemplate: "Criar novo template",
		openTemplate: "Abrir template",
		addFunction: "Adicionar funções raster",
		addConstant: "Adicionar constante",
		addRaster: "Adicionar variável raster",
		move: "Mover",
		zoom: "Zoom",
		saveAs: "Guardar como",
		clear: "Limpar",
		addRasterFunctionTitle: "Adicionar funções raster",
		templatePropertiesTitle: "Propriedades do template",
		browseRFT: "Procurar templates de função raster",
		defaultToolDescription: "Ferramenta de análise ${toolTitle}.",
		openToolText: "Abrir Ferramenta",
		toolDropdownText: "Lista Pendente da Ferramenta",
		addToMap: "Confirmar e adicionar ao mapa",
		confirm: "Confirmar",
		select: "Selecionar",
		selectTask: "Selecionar tarefa",
		unsupportedLayer: "Este parâmetro não suporta as seguintes camadas: ${layerName}.",
		viewDetails: "Ver detalhes completos do item",
		rename: "Alterar o nome",
		duplicate: "Duplicar",
		launch: "Abrir para execução",
		templateEditor: "Editor de Templates",
		createItem: "Guardar Template de Função Raster",
		actionLabel: "Filtrar",
		filterPopoverHeading: "Filtrar as funções",
		defaultSearchPlaceholder: "Pesquisar por nome",
		settings: "Definições",
		summary: "Resumo",
		definitionQuery: "Consulta de definição",
		matchVariables: "Corresponder variáveis",
		unionDimension: "Dimensão de união",
		nameEditorPlaceholder: "Introduzir título",
		summaryEditorPlaceholder: "Introduza uma breve descrição.",
		definitionQueryPlaceholder: "Introduza...",
		upload: "Carregar",
		chooseImage: "Clique para selecionar um ficheiro",
		update: "Atualizar",
		thumbnailErrors: {
			wrongImageType: "Tipo de imagem errado selecionado",
			notAvailable: "Imagem miniatura indisponível",
			loadError: "Não foi possível carregar a imagem",
			chooseFile: "Clique para selecionar ficheiro"
		}
	}
};
const copy = "Copiar";
const save = "Guardar";
const title = "Título";
const folder = "Pasta";
const tags = "Etiquetas";
const savingMessage = "Guardar item para";
const shareWith = "Partilhar Com";
const share = "Partilhar";
const setSharingLevel = "Definir Nível de Partilha";
const setGroupSharing = "Definir Partilha de Grupo";
const owner = "Proprietário";
const organization = "Organização";
const everyone = "Todos (público)";
const groups = "Grupos:";
const type = "Tipo";
const mosaic = "Mosaico";
const itemGroup = "Grupo de item";
const item = "Item";
const definitionQuery = "Consulta de definição";
const groupItemsBy = "Agrupar Itens Por";
const groupFieldName = "Agrupar Nome de Campo";
const tagFieldName = "Identificar Nome de Campo";
const noTitleTagErrorMsg = "Deve fornecer um título para o seu item e etiquetas para permitir que o seu mapa seja encontrado através de pesquisas.";
const noTitleErrorMsg = "Deve fornecer um título para o item.";
const noTagErrorMsg = "Deve fornecer pelo menos uma etiqueta para ajudar as pessoas a encontrar o seu item através de pesquisas.";
const error = "Erro";
const warning = "Aviso";
const success = "Realizado com Sucesso";
const details = "Detalhes:";
const tryAgain = "Tente novamente";
const toolModeler = {
	save: "Guardar",
	editProperties: "Editar Propriedades",
	saveAs: "Guardar Como",
	savingNotification: "Guardar alterações no item...",
	savingTitle: "A Guardar",
	saveFailedMessage: "Não foi possível guardar alterações.",
	saveWithErrorsMessage: "As alterações foram guardadas com os seguintes erros.",
	viewItemMessage: "Ver item guardado",
	here: "aqui.",
	itemCreatedMessage: "Foi criado um novo item.",
	clickToViewItemMessage: "Clique em OK para ver a página de detalhes do item. Clique em Cancelar para continuar.",
	readingFailed: "Falha ao carregar o modelo de funcionamento de raster selecionado.",
	failedToLoadXML: "Falha ao carregar o template da função raster selecionado no formato XML.",
	learnMore: "Saiba mais",
	overwriteTitle: "Confirmar substituição",
	overwriteMessage: "Pretende substituir o item existente?",
	overwriteSuccessMessage: "O item foi atualizado."
};
const toolEditor = {
	run: "Executar",
	save: "Guardar",
	deleteSelected: "Eliminar itens selecionados",
	addRaster: "Adicionar Raster",
	addScalar: "Adicionar Escalar",
	layout: "Layout Auto",
	errorTitle: "Erro",
	invalidToolMessage: "O modelo de funcionamento Raster não é válido.",
	out: "Fora",
	zoomIn: "Aumentar Zoom",
	zoomOut: "Reduzir Zoom",
	zoomToFit: "Ajustar à janela",
	panOn: "Mudar para modo de mover",
	panOff: "Desligar modo de mover",
	defaultModelName: "Modelo ferramenta",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Modelo de Função Raster",
	defaultToolDescription: "Adicione um breve resumo acerca da função raster.",
	defaultHelpText: "Clique no ícone ajuda para editar o texto de ajuda",
	editHelpTitle: "Editar Ajuda",
	saveLabel: "Guardar",
	cancelLabel: "Cancelar",
	thumbnail: {
		wrongImageType: "Tipo de imagem errado selecionado",
		notAvailable: "Imagem miniatura indisponível",
		loadError: "Impossível carregar a imagem",
		chooseFile: "Clique para selecionar ficheiro"
	}
};
const saveUtils = {
	thumbnail: "Miniatura",
	sharing: "A Partilhar"
};
const close = "Fechar";
const unsavedWarningExisting = "Pretende guardar as alterações realizadas ao item <b>${itemTitle}</b>?";
const unsavedWarningNew = "Pretende guardar as suas alterações?";
const saveAs = "Guardar Como";
const dontSave = "Não Guardar";
const unsavedTitle = "Alterações Não-Guardadas";
const invalidRFTMessage = "O modelo de função raster criado não é válido.";
const errorTitle = "Erro";
const breadcrumb = "Editor de Funções Raster";
const breadcrumbEditor = "Conteúdo > Editor de Funções Raster";
const viewerModeTitle = "Só de Leitura";
const viewerModeMessage = "O item do modelo de função raster é só de leitura. Não é possível guardar as alterações.";
const userStartDirection = "Selecione uma função para começar a construir um modelo de função raster.";
const selectFunction = "Adicionar função";
const deselectFunction = "Remover função";
const dialogTitle = "Sistema";
const category = "Categorias";
const search = "Pesquisar Funções Raster";
const categoryNames = {
	analysis: "Análise",
	appearance: "Aspeto",
	classification: "Classificação",
	conversion: "Conversão",
	correction: "Correção",
	dataManagement: "Gestão de Dados",
	distance: "Distância",
	distanceLegacy: "Distância (Legado)",
	hydrology: "Hidrologia",
	math: "Matemática",
	mathConditional: "Mat: Condicional",
	mathLogical: "Mat: Lógica",
	mathTrigonometric: "Matemática: Trigonometria",
	reclass: "Reclassificar",
	statistical: "Estatística",
	surface: "Superfície"
};
const commonStrings_ptPT = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_ptPT);


//# sourceMappingURL=common-strings.pt-PT-8f1cba9a.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,