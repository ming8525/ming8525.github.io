"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-3195c3"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-relationship_3.entry.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-relationship_3.entry.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_panels_relationship: () => (/* binding */ ArcgisSmartMappingPanelsRelationship),
/* harmony export */   arcgis_smart_mapping_relationship_color_slider: () => (/* binding */ ArcgisSmartMappingRelationshipColorSlider),
/* harmony export */   arcgis_smart_mapping_relationship_legend: () => (/* binding */ ArcgisSmartMappingRelationshipLegend)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loading-69139907.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _relationship_b72d7d97_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./relationship-b72d7d97.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/relationship-b72d7d97.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _precision_06a73672_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./precision-06a73672.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/precision-06a73672.js");
/* harmony import */ var _slider_e162e136_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./slider-e162e136.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/slider-e162e136.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */














const arcgisSmartMappingPanelsRelationshipCss = ":host{width:100%}.flow-item{height:100%}.relationship-block{overflow-x:hidden}.attribute-name{word-break:break-all}.block-section-padding{padding-top:6px}";

const ArcgisSmartMappingPanelsRelationship = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsRelationshipClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRelationshipClose", 7);
        this.arcgisSmartMappingPanelsRelationshipBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRelationshipBackClick", 7);
        this.arcgisSmartMappingPanelsRelationshipError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRelationshipError", 7);
        this.colorSliderNodes = [];
        this.hideTransparency = false;
        this.hideRotation = false;
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
        this.visualizationOpen = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        this.visualizationOpen = true;
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        // save original renderer
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
        /* window.onresize = () => {
            // for transparency inputs
            forceUpdate(this.hostElement);
          }; */
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    disconnectedCallback() {
        //window.onresize = null;
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        var _a;
        const { layer, hideLayerTitle, isRTL, mapImageSublayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const title = hideLayerTitle ? undefined : (_a = mapImageSublayer === null || mapImageSublayer === void 0 ? void 0 : mapImageSublayer.title) !== null && _a !== void 0 ? _a : layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.styleOptions, description: title, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: () => this.handleDone(), onCalciteFlowItemBack: () => {
                this.arcgisSmartMappingPanelsRelationshipBackClick.emit();
            }, ref: (node) => {
                if (node) {
                    this.flowItemNode = node;
                }
            } }, this.renderDoneButton(), this.renderCancelButton(), this.renderVisualization(), this.renderLegend(), this.renderTransparency(), this.renderRotation())));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: () => this.handleDone(), appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: () => this.handleCancel(), appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    renderVisualization() {
        const { visualizationOpen, hideTransparency, hideRotation } = this;
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "relationship-block", heading: strings.panels.relationship.relationshipStyle, collapsible: !hideTransparency || !hideRotation, open: visualizationOpen, onCalciteBlockOpen: () => (this.visualizationOpen = true), onCalciteBlockClose: () => (this.visualizationOpen = false) }, this.renderSymbol(), this.renderGridSize(), this.renderMethod(), this.renderField1(), this.renderField2(), this.renderBackgroundStyle(), this.renderDefaultSymbol()));
    }
    renderSymbol() {
        const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const uniqueValueInfos = renderer.uniqueValueInfos;
        if (!uniqueValueInfos.length) {
            return null;
        }
        const schemes = modules.relationshipSchemes.getSchemes({
            basemap: mapView.map.basemap,
            geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.D)(layer)
        });
        const colorRampsAndSchemes = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a9)(schemes, Math.min(uniqueValueInfos.length, 10));
        const defaultColors = colorRampsAndSchemes[0].colors;
        let colors = ((uniqueValueInfos === null || uniqueValueInfos === void 0 ? void 0 : uniqueValueInfos.length)
            ? uniqueValueInfos
                .filter((_, idx) => idx < 10)
                .map((uniqueValueInfo, idx) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(uniqueValueInfo.symbol) ||
                new modules.esriColor(defaultColors[idx % defaultColors.length]))
            : []).reverse();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { colors: colors, type: "relationship-ramp", rampType: "discrete", onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.colorSliderNodes[0] && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.colorSliderNodes[0]);
                this.colorSliderNodes[1] && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.colorSliderNodes[1]);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.legendNode);
                this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
            } }));
    }
    renderGridSize() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const authInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer).authoringInfo;
        const gridSize = authInfo.numClasses;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.relationship.gridSize, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: strings.panels.relationship.gridSize, onCalciteSelectChange: (event) => {
                const node = event.target;
                this.handleGridSizeChange(parseFloat(node.value));
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "2", selected: 2 === gridSize }, strings.panels.relationship.gridsize2), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "3", selected: 3 === gridSize }, strings.panels.relationship.gridsize3), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "4", selected: 4 === gridSize }, strings.panels.relationship.gridsize4))));
    }
    renderMethod() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-method-button", { onArcgisSmartMappingMethodButtonBeforeOpen: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)(), onArcgisSmartMappingMethodButtonChange: (event) => {
                const node = event.target;
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                if (event.detail === "manual") {
                    renderer.authoringInfo.classificationMethod = "manual";
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                }
                else {
                    (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_relationship_b72d7d97_js__WEBPACK_IMPORTED_MODULE_5__.a)({ classificationMethod: event.detail }), this.flowItemNode).then((result) => {
                        if (["relationship-size"].indexOf(rendererType) > -1) {
                            // Keep size variable
                            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
                            result.renderer.visualVariables = result.renderer.visualVariables || [];
                            result.renderer.visualVariables.push(sizeVisVar);
                            const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
                            result.renderer.authoringInfo =
                                result.renderer.authoringInfo || {};
                            result.renderer.authoringInfo.visualVariables =
                                result.renderer.authoringInfo.visualVariables || [];
                            result.renderer.authoringInfo.visualVariables.push(authSizeVisVar);
                        }
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(node);
                    }, (error) => {
                        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(node);
                        this.arcgisSmartMappingPanelsRelationshipError.emit(error);
                    });
                }
            }, ref: (node) => (this.methodButtonNode = node) }));
    }
    renderField1() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authField = renderer.authoringInfo.field1;
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(authField.field);
        const fieldName = field.layerField.alias || field.layerField.name;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { text: fieldName }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "block-section-padding" }, this.renderDividedBy(0), this.renderColorSlider(0))));
    }
    renderField2() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authField = renderer.authoringInfo.field2;
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(authField.field);
        const fieldName = field.layerField.alias || field.layerField.name;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { text: fieldName }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "block-section-padding" }, this.renderDividedBy(1), this.renderColorSlider(1))));
    }
    renderDividedBy(fieldPos) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const authField = fieldPos === 0 ? authInfo.field1 : authInfo.field2;
        const normalizationField = authField.normalizationField;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-divided-by", { rendererSubtype: "relationship", fieldPos: fieldPos, normalizationField: normalizationField, onArcgisSmartMappingDividedByChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.colorSliderNodes[fieldPos] && this.colorSliderNodes[fieldPos].updateStatistics();
            } }));
    }
    renderColorSlider(fieldPos) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-relationship-color-slider", { fieldPos: fieldPos, ref: (node) => (this.colorSliderNodes[fieldPos] = node), onArcgisSmartMappingRelationshipColorSliderChange: () => this.methodButtonNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.methodButtonNode) }));
    }
    renderBackgroundStyle() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.q)(layer) || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)() !== "relationship-size") {
            return null;
        }
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-background-symbol", null);
    }
    renderDefaultSymbol() {
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-default-symbol", null);
    }
    renderLegend() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-relationship-legend", { onArcgisSmartMappingRelationshipLegendFocusChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } // to update symbol styler
            ,
            ref: (node) => (this.legendNode = node) }));
    }
    renderTransparency() {
        const { hideTransparency } = this;
        if (hideTransparency) {
            return;
        }
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-transparency", { open: !!opacityVisVar, onArcgisSmartMappingSymbolTransparencyError: ({ detail }) => this.arcgisSmartMappingPanelsRelationshipError.emit(detail) }));
    }
    renderRotation() {
        if (this.hideRotation) {
            return;
        }
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "rotation");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-rotation", { open: !opacityVisVar && !!rotationVisVar, ref: (node) => (this.rotationNode = node), onArcgisSmartMappingRotationError: ({ detail }) => this.arcgisSmartMappingPanelsRelationshipError.emit(detail) }));
    }
    //--------------------------------------------------------------------------
    //
    //  Private methods
    //
    //--------------------------------------------------------------------------
    handleDone() {
        // keep the current settings on the layer
        this.arcgisSmartMappingPanelsRelationshipClose.emit("save");
    }
    handleCancel() {
        const { originalRendererJSON, originalFeatureReduction } = this;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.j)(originalRendererJSON, originalFeatureReduction);
        this.arcgisSmartMappingPanelsRelationshipClose.emit("cancel");
    }
    handleGridSizeChange(gridSize) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_relationship_b72d7d97_js__WEBPACK_IMPORTED_MODULE_5__.a)({
            numClasses: gridSize
        }), this.flowItemNode).then((result) => {
            if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)() === "relationship-size") {
                // keep size variable
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
                result.renderer.visualVariables = result.renderer.visualVariables || [];
                result.renderer.visualVariables.push(sizeVisVar);
                const sizeAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "size");
                result.renderer.authoringInfo.visualVariables =
                    result.renderer.authoringInfo.visualVariables || [];
                result.renderer.authoringInfo.visualVariables.push(sizeAuthVisVar);
            }
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            this.colorSliderNodes[0] && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.colorSliderNodes[0]);
            this.colorSliderNodes[1] && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.colorSliderNodes[1]);
        });
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsRelationship.style = arcgisSmartMappingPanelsRelationshipCss;

const arcgisSmartMappingRelationshipColorSliderCss = ".slider-box{height:310px;margin-top:6px}.esri-classed-color-slider{min-width:200px}.esri-classed-color-slider__histogram-container{width:70px}.esri-classed-color-slider .esri-slider .esri-slider__content{height:200px}.esri-classed-color-slider .esri-slider .esri-slider__label,.esri-classed-color-slider .esri-slider .esri-slider__min,.esri-classed-color-slider .esri-slider .esri-slider__max{text-decoration:underline}.esri-classed-color-slider .esri-slider .esri-slider__label:hover,.esri-classed-color-slider .esri-slider .esri-slider__min:hover,.esri-classed-color-slider .esri-slider .esri-slider__max:hover{border:1px solid #bbb;background-color:#f3f3f3;text-decoration:none;z-index:1}";

const ArcgisSmartMappingRelationshipColorSlider = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingRelationshipColorSliderChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingRelationshipColorSliderChange", 7);
        this.arcgisSmartMappingRelationshipColorSliderError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingRelationshipColorSliderError", 7);
        this.currentBreakValues = [];
        this.fieldPos = undefined;
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
    }
    // -------------------------------------------------------------------
    //
    // Public Methods
    //
    // -------------------------------------------------------------------
    async updateStatistics() {
        var _a;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.statistics = null;
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.histogram = null;
        (_a = this.colorSlider) === null || _a === void 0 ? void 0 : _a.destroy();
        this.colorSlider = undefined;
        this.getStatistics();
    }
    // -------------------------------------------------------------------
    //
    // Lifecycle
    //
    // -------------------------------------------------------------------
    componentWillLoad() {
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
        this.getStatistics();
    }
    componentDidLoad() {
        const { config } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        this.hostElement.shadowRoot.firstElementChild.insertAdjacentHTML("beforebegin", `<link rel="stylesheet" href="${config.jsapiUrl}/themes/light/main.css" />`);
    }
    // -------------------------------------------------------------------
    //
    //  Render Methods
    //
    // -------------------------------------------------------------------
    render() {
        var _a;
        const { statisticsStatus } = this;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        if (statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED || statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING) {
            (_a = this.colorSlider) === null || _a === void 0 ? void 0 : _a.destroy();
            this.colorSlider = undefined;
        }
        else if (this.statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS ||
            (this.histogramStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS && !this.colorSlider)) {
            return this.renderColorSliderLoading();
        }
        else {
            const ok = this.prepareColorSlider();
            const infos = this.fieldPos === 0 ? authInfo.field1.classBreakInfos : authInfo.field2.classBreakInfos;
            this.currentBreakValues = infos.map((info) => ({
                min: info.minValue,
                max: info.maxValue
            }));
            if (ok || this.colorSlider) {
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.relationship.dataRange), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (node) => {
                        if (node) {
                            this.afterColorSliderCreate(node);
                        }
                    } })));
            }
            else {
                return this.renderColorSliderLoading();
            }
        }
    }
    renderColorSliderLoading() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: strings.loading })));
    }
    // -------------------------------------------------------------------
    //
    //  Private methods
    //
    // -------------------------------------------------------------------
    afterColorSliderCreate(node) {
        if (!this.colorSlider.container) {
            const divNode = document.createElement("div");
            node.appendChild(divNode);
            this.colorSlider.container = divNode;
        }
    }
    createColorSliderChangeEvents() {
        if (!this.colorSlider) {
            return;
        }
        this.colorSlider.on("min-change", (info) => {
            if (info.value > this.currentBreakValues[0].max) {
                this.onMinMaxChange(this.currentBreakValues[0].max, this.colorSlider.slider.max);
            }
            else {
                this.onMinMaxChange(info.value, this.colorSlider.slider.max);
            }
        });
        this.colorSlider.on("max-change", (info) => {
            if (info.value < this.currentBreakValues[this.currentBreakValues.length - 1].min) {
                this.onMinMaxChange(this.colorSlider.slider.min, this.currentBreakValues[this.currentBreakValues.length - 1].min);
            }
            else {
                this.onMinMaxChange(this.colorSlider.slider.min, info.value);
            }
        });
        this.colorSlider.on("thumb-change", () => {
            this.updateRendererBreaks(this.colorSlider.breaks);
        });
        this.colorSlider.on("thumb-drag", () => {
            this.updateRendererBreaks(this.colorSlider.breaks);
        });
    }
    getClassBreaksColors() {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const infos = this.fieldPos === 0 ? authInfo.field1.classBreakInfos : authInfo.field2.classBreakInfos;
        const breakInfos = infos.map((classBreakInfo) => {
            return {
                min: classBreakInfo.minValue,
                max: classBreakInfo.maxValue
            };
        });
        // add grey colors
        let color = new modules.esriColor([0, 0, 0, 1]);
        let color2 = new modules.esriColor([0, 0, 0, 1]);
        renderer.uniqueValueGroups[0].classes.forEach((uvClass) => {
            if (uvClass.values[0].value === "HH") {
                color = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(uvClass.symbol);
            }
            else if (uvClass.values[0].value === "LL") {
                color2 = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(uvClass.symbol);
            }
        });
        let value = (color.r + color.g + color.b) / 3;
        const value2 = (color2.r + color2.g + color2.b) / 3;
        if (breakInfos.length === 2) {
            breakInfos[1].color = new modules.esriColor([value, value, value, 1]);
            breakInfos[0].color = new modules.esriColor([value2, value2, value2, 1]);
        }
        else if (breakInfos.length === 3) {
            breakInfos[2].color = new modules.esriColor([value, value, value, 1]);
            value = (value + value2) / 2;
            breakInfos[1].color = new modules.esriColor([value, value, value, 1]);
            breakInfos[0].color = new modules.esriColor([value2, value2, value2, 1]);
        }
        else {
            breakInfos[3].color = new modules.esriColor([value, value, value, 1]);
            let value3 = value + (value2 - value) / 3;
            breakInfos[2].color = new modules.esriColor([value3, value3, value3, 1]);
            value3 = value + ((value2 - value) * 2) / 3;
            breakInfos[1].color = new modules.esriColor([value3, value3, value3, 1]);
            breakInfos[0].color = new modules.esriColor([value2, value2, value2, 1]);
        }
        return breakInfos;
    }
    getHistogram(fieldInfo, normalizationField, statistics, min, max) {
        var _a;
        const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        statistics = statistics || this.statistics;
        if (!statistics || statistics.count === 0) {
            return;
        }
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS;
        modules
            .histogram({
            layer,
            view: mapView,
            field: fieldInfo.field,
            numBins: 50,
            minValue: min !== null && min !== void 0 ? min : statistics.min,
            maxValue: max !== null && max !== void 0 ? max : statistics.max,
            normalizationField,
            forBinning: "featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
        })
            .then((histogram) => {
            this.histogram = histogram;
            this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
        }, (error) => {
            console.log("error-histogram", error);
            this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
        });
    }
    getStatistics() {
        var _a;
        const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const field = this.fieldPos === 0 ? authInfo.field1 : authInfo.field2;
        const infos = field.classBreakInfos;
        if (!infos || this.statistics) {
            return;
        }
        const fieldInfo = {
            field: field.field,
            simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        };
        const normalizationField = field.normalizationField;
        let min = infos[0].minValue;
        let max = infos[infos.length - 1].maxValue;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS;
        modules
            .summaryStatistics({
            layer,
            view: mapView,
            field: field.field,
            normalizationField,
            forBinning: "featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
        })
            .then((statistics) => {
            if (statistics.count === 0) {
                // field has no values
                // make up some basic statistics so we can show a slider
                statistics.min = 0;
                statistics.max = 100;
                statistics.avg = (max + min) / 2;
            }
            else if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(statistics.avg) ||
                !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(statistics.min) ||
                !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(statistics.max)) {
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
                return;
            }
            statistics = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ad)(statistics);
            min = min !== null && min !== void 0 ? min : statistics.min;
            max = max !== null && max !== void 0 ? max : statistics.max;
            this.statistics = statistics;
            this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
            this.getHistogram(fieldInfo, normalizationField, statistics, min, max);
        }, (error) => {
            console.log("error-summaryStatistics", error);
            this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
        });
    }
    onMinMaxChange(min, max) {
        const { statistics } = this;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const field = this.fieldPos === 0 ? authInfo.field1 : authInfo.field2;
        const normalizationField = field.normalizationField;
        const fieldInfo = {
            field: field.field,
            simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        };
        const infos = this.fieldPos === 0 ? authInfo.field1.classBreakInfos : authInfo.field2.classBreakInfos;
        infos[0].minValue = min;
        infos[infos.length - 1].maxValue = max;
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_relationship_b72d7d97_js__WEBPACK_IMPORTED_MODULE_5__.u)(), this.flowItemNode).then((updatedRenderer) => {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(updatedRenderer, layer);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            this.getHistogram(fieldInfo, normalizationField, statistics, min, max);
            (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_8__.u)(this.colorSlider, this.colorSliderBars, this.getClassBreaksColors(), this.histogram);
        });
        renderer.authoringInfo.classificationMethod = "manual";
        this.arcgisSmartMappingRelationshipColorSliderChange.emit();
    }
    prepareColorSlider() {
        var _a, _b;
        const { statistics, histogram, histogramStatus } = this;
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const infos = this.fieldPos === 0 ? authInfo.field1.classBreakInfos : authInfo.field2.classBreakInfos;
        if (!infos || histogramStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS) {
            return false;
        }
        let min = infos[0].minValue;
        let max = infos[infos.length - 1].maxValue;
        ({ min, max } = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ad)({ min, max }));
        if (!this.colorSlider) {
            const breaks = this.getClassBreaksColors();
            const config = {
                histogramConfig: {
                    bins: (_a = this.histogram) === null || _a === void 0 ? void 0 : _a.bins,
                    average: Math.round(this.statistics.avg * 10) / 10,
                    standardDeviation: this.statistics.stddev,
                    standardDeviationCount: 1
                },
                min: min !== null && min !== void 0 ? min : this.statistics.min,
                max: max !== null && max !== void 0 ? max : this.statistics.max,
                breaks
            };
            this.colorSliderBars = [];
            config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_7__.g)(config.breaks);
            config.histogramConfig.barCreatedFunction =
                this.histogram &&
                    _slider_e162e136_js__WEBPACK_IMPORTED_MODULE_8__.b.bind(this, config.breaks, this.histogram, this.colorSliderBars);
            (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_8__.u)(this.colorSlider, this.colorSliderBars, config.breaks, this.histogram);
            this.colorSlider = new modules.ClassedColorSlider(config);
            this.createColorSliderChangeEvents();
        }
        else {
            const slider = this.colorSlider;
            if (((_b = slider.slider) === null || _b === void 0 ? void 0 : _b.state) === "dragging") {
                return true;
            }
            const config = {
                histogramConfig: {
                    bins: histogram === null || histogram === void 0 ? void 0 : histogram.bins,
                    average: Math.round(statistics.avg * 10) / 10,
                    standardDeviation: statistics.stddev,
                    standardDeviationCount: 1
                },
                min: min !== null && min !== void 0 ? min : statistics.min,
                max: max !== null && max !== void 0 ? max : statistics.max
            };
            config.breaks = this.getClassBreaksColors();
            config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_7__.g)(config.breaks);
            config.histogramConfig.barCreatedFunction =
                histogram && _slider_e162e136_js__WEBPACK_IMPORTED_MODULE_8__.b.bind(this, config.breaks, histogram, this.colorSliderBars);
            (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_8__.u)(slider, this.colorSliderBars, config.breaks, histogram);
            this.colorSlider.set(config);
        }
        return (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(this.colorSlider);
    }
    updateRendererBreaks(breaks) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const field = this.fieldPos === 0 ? authInfo.field1 : authInfo.field2;
        authInfo.classificationMethod = "manual";
        if (!field.classBreakInfos) {
            return;
        }
        field.classBreakInfos.forEach((classBreakInfo, idx) => {
            if (classBreakInfo.minValue !== breaks[idx].min ||
                classBreakInfo.maxValue !== breaks[idx].max) {
                field.classBreakInfos[idx].minValue = breaks[idx].min;
                field.classBreakInfos[idx].maxValue = breaks[idx].max;
                this.currentBreakValues[idx].min = breaks[idx].min;
                this.currentBreakValues[idx].max = breaks[idx].max;
            }
        });
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_relationship_b72d7d97_js__WEBPACK_IMPORTED_MODULE_5__.u)(), this.flowItemNode).then((updatedRenderer) => {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(updatedRenderer, layer);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_8__.u)(this.colorSlider, this.colorSliderBars, this.getClassBreaksColors(), this.histogram);
        });
        this.arcgisSmartMappingRelationshipColorSliderChange.emit();
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingRelationshipColorSlider.style = arcgisSmartMappingRelationshipColorSliderCss;

var ICONS;
(function (ICONS) {
    ICONS["focusUp16"] = "M8,0.29 L0.29,8 L8,15.71 L15.71,8 L8,0.29 Z M1.71,8 L5.93,3.78 L8,5.85 L10.07,3.78 L14.29,8 L8,14.29 L1.71,8 Z";
    ICONS["focusRight16"] = "M8,0.29 L0.29,8 L8,15.71 L15.71,8 L8,0.29 Z M1.71,8 L8,1.71 L12.22,5.93 L10.15,8 L12.22,10.07 L8,14.29 L1.71,8 Z";
    ICONS["focusLeft16"] = "M8,0.29 L0.29,8 L8,15.71 L15.71,8 L8,0.29 Z M3.78,10.07 L5.85,8 L3.78,5.93 L8,1.71 L14.29,8 L8,14.29 L3.78,10.07 Z";
    ICONS["focusDown16"] = "M8,0.29 L0.29,8 L8,15.71 L15.71,8 L8,0.29 Z M8,1.71 L14.29,8 L10.07,12.22 L8,10.15 L5.93,12.22 L1.71,8 L8,1.71 Z";
    ICONS["code16"] = "M6.865 13.965l-.957-.29 3.213-10.62.957.29zM15.19 8.45l-3.837-3.805-.704.71 3.131 3.104-3.135 3.19.712.702zm-9.833 3.2L2.221 8.458l3.13-3.104-.703-.71L.811 8.45l3.833 3.9z";
    ICONS["fields16"] = "M10.578 1A2.425 2.425 0 0 1 13 3.422V6c0 .552.448 1 1 1v1c-.552 0-1 .448-1 1v2.578A2.425 2.425 0 0 1 10.578 14H10v-1h.578c.785 0 1.421-.637 1.422-1.422V9c0-.574.247-1.121.679-1.5A1.995 1.995 0 0 1 12 6V3.422c0-.785-.637-1.421-1.422-1.422H10V1h.578zM6 1v1h-.578C4.637 2 4.001 2.637 4 3.422V6c0 .574-.247 1.121-.679 1.5.432.379.68.926.679 1.5v2.578c0 .785.637 1.421 1.422 1.422H6v1h-.578A2.425 2.425 0 0 1 3 11.578V9c0-.552-.448-1-1-1V7c.552 0 1-.448 1-1V3.422A2.425 2.425 0 0 1 5.422 1H6z";
})(ICONS || (ICONS = {}));

const arcgisSmartMappingRelationshipLegendCss = ".attribute{display:flex;padding-bottom:6px}.attributes{margin:12px 0}.attribute-name{padding:0 10px;width:calc(100% - 45px);word-break:break-all}.attribute-color-icon{width:45px;height:16px;overflow:hidden;border-radius:3px;display:flex;align-self:center}.attribute-color-icon-selection{height:16px;display:inline-block}.label{display:flex;padding:6px 0;align-items:center}.label div{display:flex}.label-icon{color:rgba(50, 50, 50, 0.4);display:flex;flex-direction:column;justify-content:center;cursor:default}.label-icon .rotate-45{transform:rotate(45deg)}";

const ArcgisSmartMappingRelationshipLegend = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingRelationshipLegendFocusChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingRelationshipLegendFocusChange", 7);
        this.arcgisSmartMappingRelationshipLegendError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingRelationshipLegendError", 7);
        this.valueTextNodes = [];
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle Methods
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { open: true, heading: strings.relationshipLegend.legend, collapsible: true }, this.renderContent()));
    }
    renderContent() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "attributes" }, this.renderAttribute(0), this.renderAttribute(1)), this.renderFocus(), this.renderLabels()));
    }
    renderAttribute(pos) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const authField = pos === 0 ? authInfo.field1 : authInfo.field2;
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(authField.field);
        let colorOrder = this.getColorOrder(pos);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "attribute" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "attribute-color-icon", "aria-hidden": "true" }, colorOrder.map((_, idx) => this.getSwatch(colorOrder[idx]))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "attribute-name" }, field.label)));
    }
    renderFocus() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-relationship-focus-button", { flowItemNode: this.flowItemNode, onArcgisSmartMappingRelationshipFocusButtonBeforeOpen: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)(), onArcgisSmartMappingRelationshipFocusButtonChange: () => {
                this.arcgisSmartMappingRelationshipLegendFocusChange.emit();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }, onArcgisSmartMappingRelationshipFocusButtonError: ({ detail }) => this.arcgisSmartMappingRelationshipLegendError.emit(detail) }));
    }
    renderLabels() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const nc = authInfo.numClasses;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.relationshipLegend.labels, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", null, this.renderLabel(0), this.renderLabel(nc - 1), this.renderLabel(nc * nc - nc), this.renderLabel(nc * nc - 1))));
    }
    renderLabel(idx) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const nc = authInfo.numClasses;
        const fo = authInfo.focus;
        const iconName = idx === 0
            ? ICONS.focusUp16
            : idx === (fo === "LH" || fo === "HL" ? nc * nc - nc : nc - 1)
                ? ICONS.focusLeft16
                : idx === (fo === "LH" || fo === "HL" ? nc - 1 : nc * nc - nc)
                    ? ICONS.focusRight16
                    : ICONS.focusDown16;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", null, this.renderIconNode(iconName), this.renderTextNode(idx)));
    }
    renderIconNode(iconName) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const isNone = !authInfo.focus;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "actions-start", class: "label-icon" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", width: "16", height: "16", class: `${isNone ? "rotate-45" : ""}` }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { d: iconName }))));
    }
    renderTextNode(idx) {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const nc = authInfo.numClasses;
        const fo = authInfo.focus;
        const infos = renderer.uniqueValueInfos;
        const info = infos[idx];
        const ariaLabel = idx === 0
            ? strings.relationshipLegend.accessibility.editLabelForTop
            : idx === (fo === "LH" || fo === "HL" ? nc * nc - nc : nc - 1)
                ? strings.relationshipLegend.accessibility.editLabelForLeft
                : idx === (fo === "LH" || fo === "HL" ? nc - 1 : nc * nc - nc)
                    ? strings.relationshipLegend.accessibility.editLabelForRight
                    : strings.relationshipLegend.accessibility.editLabelForBottom;
        if (this.selectedLabelText === idx) {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { slot: "content", scale: "s", value: info.label, onFocusout: (event) => {
                    const node = event.target;
                    this.handleLabelTextChange(idx, node.value);
                }, onKeyUp: (event) => {
                    if (event.key === "Escape" || event.key === "Enter") {
                        const node = event.target;
                        this.handleLabelTextChange(idx, node.value);
                    }
                }, ref: (node) => node === null || node === void 0 ? void 0 : node.setFocus() }));
        }
        else {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "label", slot: "content", tabIndex: 0, "aria-label": ariaLabel, onClick: () => this.handleLabelTextClick(idx), onKeyUp: (event) => {
                    if (event.key === " " || event.key === "Enter") {
                        this.handleLabelTextClick(idx);
                    }
                }, ref: (node) => (this.valueTextNodes[idx] = node) }, info.label));
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    getColorOrder(pos) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo || {};
        let colorOrder = [];
        if (authInfo.numClasses === 2) {
            switch (authInfo.focus) {
                case "HH":
                    colorOrder = pos === 0 ? [3, 1] : [3, 2];
                    break;
                case "HL":
                    colorOrder = pos === 0 ? [2, 0] : [2, 3];
                    break;
                case "LH":
                    colorOrder = pos === 0 ? [1, 3] : [1, 0];
                    break;
                case "LL":
                    colorOrder = pos === 0 ? [0, 2] : [0, 1];
                    break;
                default:
                    colorOrder = pos === 0 ? [3, 1] : [3, 2];
            }
        }
        else if (authInfo.numClasses === 3) {
            switch (authInfo.focus) {
                case "HH":
                    colorOrder = pos === 0 ? [8, 5, 2] : [8, 7, 6];
                    break;
                case "HL":
                    colorOrder = pos === 0 ? [6, 3, 0] : [6, 7, 8];
                    break;
                case "LH":
                    colorOrder = pos === 0 ? [2, 5, 8] : [2, 1, 0];
                    break;
                case "LL":
                    colorOrder = pos === 0 ? [0, 3, 6] : [0, 1, 2];
                    break;
                default:
                    colorOrder = pos === 0 ? [8, 5, 2] : [8, 7, 6];
            }
        }
        else {
            // 4
            switch (authInfo.focus) {
                case "HH":
                    colorOrder = pos === 0 ? [15, 11, 7, 3] : [15, 14, 13, 12];
                    break;
                case "HL":
                    colorOrder = pos === 0 ? [12, 8, 4, 0] : [12, 13, 14, 15];
                    break;
                case "LH":
                    colorOrder = pos === 0 ? [3, 7, 11, 15] : [3, 2, 1, 0];
                    break;
                case "LL":
                    colorOrder = pos === 0 ? [0, 4, 8, 12] : [0, 1, 2, 3];
                    break;
                default:
                    colorOrder = pos === 0 ? [15, 11, 7, 3] : [15, 14, 13, 12];
            }
        }
        return colorOrder;
    }
    getSwatch(idx) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "attribute-color-icon-selection", ref: (node) => {
                if (node) {
                    const color = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(renderer.uniqueValueInfos[idx].symbol);
                    node.style.width = `${100 / renderer.authoringInfo.numClasses}px`;
                    node.style.backgroundColor = (color === null || color === void 0 ? void 0 : color.toHex()) || "#ffffff";
                }
            } }));
    }
    handleLabelTextClick(idx) {
        this.selectedLabelText = idx;
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    handleLabelTextChange(idx, label) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        renderer.uniqueValueGroups[0].classes[idx].label = label;
        this.selectedLabelText = undefined;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        setTimeout(() => { var _a; return (_a = this.valueTextNodes[idx]) === null || _a === void 0 ? void 0 : _a.focus(); }, 300);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingRelationshipLegend.style = arcgisSmartMappingRelationshipLegendCss;



//# sourceMappingURL=arcgis-smart-mapping-panels-relationship_3.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   r: () => (/* binding */ requestWrapper)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
let _loadingTimer;
let _requestCancelled;
function startLoading(node) {
    node.loading = true;
    _requestCancelled = false;
    if (_loadingTimer) {
        clearTimeout(_loadingTimer);
    }
    _loadingTimer = setTimeout(() => {
        // took too long
        endLoading(node);
        _requestCancelled = true;
    }, 60000);
}
function endLoading(node) {
    node.loading = false;
}
function requestWrapper(request, node) {
    startLoading(node);
    return request
        .then((result) => {
        endLoading(node);
        if (!_requestCancelled) {
            return Promise.resolve(result);
        }
        else {
            return Promise.reject(new Error("timeout"));
        }
    })
        .catch((error) => {
        endLoading(node);
        return Promise.reject(error);
    });
}



//# sourceMappingURL=loading-69139907.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/relationship-b72d7d97.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/relationship-b72d7d97.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createRelationshipRendererFromExisting),
/* harmony export */   c: () => (/* binding */ createRelationshipRenderer),
/* harmony export */   u: () => (/* binding */ updateRelationshipRenderer)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * Updates the layer with a Color renderer with default settings
 * @param options: options
 */
function createRelationshipRenderer(options) {
    var _a, _b;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    let relationshipScheme = options.relationshipScheme;
    if (!relationshipScheme && ["relationship", "relationship-size"].indexOf(rendererType) > -1) {
        relationshipScheme = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a0)();
    }
    options = options || {};
    if (rendererType === "relationship-size") {
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).clone();
        const authInfo = renderer.authoringInfo;
        if (authInfo &&
            ((_a = options.fieldInfos) === null || _a === void 0 ? void 0 : _a.length) > 1 &&
            options.fieldInfos[0].field == authInfo.field1.field &&
            options.fieldInfos[1].field == authInfo.field2.field) {
            // re-use relationship renderer; remove size
            renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(renderer, "size");
            renderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.o)(renderer, "size");
            if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer)) {
                // switch markers to polygons
                const polygonSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView);
                const infos = renderer.uniqueValueInfos.slice();
                infos.map((valueInfo) => {
                    const color = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(valueInfo.symbol);
                    valueInfo.symbol = polygonSymbol.clone();
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(valueInfo.symbol, color);
                });
                renderer.uniqueValueInfos = infos;
            }
            return Promise.resolve({ renderer });
        }
    }
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    const config = {
        layer,
        view: mapView,
        field1: { field: options.fieldInfos[0].field },
        field2: { field: options.fieldInfos[1].field },
        classificationMethod: "quantile",
        numClasses: 3,
        focus: "HH",
        relationshipScheme,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : true,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : true,
        legendOptions: options.legendOptions,
        defaultSymbolEnabled: false,
        forBinning: ((_b = layer.featureReduction) === null || _b === void 0 ? void 0 : _b.type) === "binning"
    };
    //console.log("createRelationshipRenderer", config);
    return modules.RelationshipCreator.createRenderer(config).then((result) => {
        //console.log("createRelationshipRenderer-success", result);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Relationship renderer with settings from current renderer
 */
function createRelationshipRendererFromExisting(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const authInfo = renderer.authoringInfo;
    // are we coming from a relationship-size renderer?
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
    if (options.fieldInfos &&
        options.fieldInfos.length > 1 &&
        options.fieldInfos[0].field == authInfo.field1.field &&
        options.normalizationField1 === authInfo.field1.normalizationField &&
        options.fieldInfos[1].field == authInfo.field2.field &&
        options.normalizationField2 === authInfo.field2.normalizationField) {
        // no changes to fields
        delete options.fieldInfos;
        delete options.normalizationField1;
        delete options.normalizationField2;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.R)(options) && !sizeVisVar) {
            // nothing really changes
            return Promise.resolve({ renderer: renderer.clone() });
        }
    }
    let relationshipScheme = options.relationshipScheme;
    if (!relationshipScheme && ["relationship", "relationship-size"].indexOf(rendererType) > -1) {
        relationshipScheme = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a0)();
    }
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)(renderer);
    let fieldInfo1 = options.fieldInfos
        ? options.fieldInfos[0]
        : {
            field: authInfo.field1.field,
            simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
        };
    let fieldInfo2 = options.fieldInfos
        ? options.fieldInfos[1]
        : {
            field: authInfo.field2.field,
            simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
        };
    const normalizationField1 = options.normalizationField1 !== undefined // null is used as a value
        ? options.normalizationField1
        : authInfo.field1.normalizationField;
    const normalizationField2 = options.normalizationField2 !== undefined // null is used as a value
        ? options.normalizationField2
        : authInfo.field2.normalizationField;
    const symbol = renderer.uniqueValueInfos && renderer.uniqueValueInfos.length ? renderer.uniqueValueInfos[0].symbol : null;
    const defaultSymbol = renderer.defaultSymbol;
    const defaultLabel = renderer.defaultLabel;
    const numClasses = options.numClasses ? options.numClasses : authInfo.numClasses;
    // TODO need to keep ramp
    return modules.RelationshipCreator.createRenderer({
        layer,
        view: mapView,
        field1: {
            field: fieldInfo1 ? fieldInfo1.field : renderer.field,
            normalizationField: normalizationField1
        },
        field2: {
            field: fieldInfo2 ? fieldInfo2.field : renderer.field,
            normalizationField: normalizationField2
        },
        classificationMethod: options.classificationMethod
            ? options.classificationMethod
            : authInfo.classificationMethod !== "manual"
                ? authInfo.classificationMethod
                : "quantile",
        numClasses,
        focus: options.focus ? options.focus : authInfo.focus,
        relationshipScheme,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : !!extras.sizeOutlineVisVar,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : !!extras.sizeAutoVisVar,
        legendOptions: options.legendOptions ? options.legendOptions : renderer.legendOptions,
        defaultSymbolEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.defaultSymbolEnabled)
            ? options.defaultSymbolEnabled
            : !!renderer.defaultSymbol,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        //console.log("RelationshipCreator.createRenderer", result);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        if (symbol) {
            const infos = result.renderer.uniqueValueInfos;
            infos.forEach((info) => {
                // keep the same symbol style, not the color
                const sym = symbol.clone();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(sym, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(info.symbol));
                info.symbol = sym;
            });
        }
        // keep old labels
        if (!options.numClasses || options.numClasses === authInfo.numClasses) {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).uniqueValueInfos.forEach((oldInfo) => {
                result.renderer.uniqueValueInfos.forEach((newInfo) => {
                    if (oldInfo.value === newInfo.value) {
                        newInfo.label = oldInfo.label;
                    }
                });
            });
        }
        if (defaultSymbol) {
            result.renderer.defaultSymbol = defaultSymbol;
            result.renderer.defaultLabel = defaultLabel;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Updates a relationship renderer after changes to slider breaks, focus, color ramp
 */
function updateRelationshipRenderer(options) {
    const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo;
    return modules.RelationshipCreator.updateRenderer({
        field1: authInfo.field1,
        field2: authInfo.field2,
        numClasses: options.numClasses ? options.numClasses : authInfo.numClasses,
        focus: options.focus ? (options.focus === "none" ? null : options.focus) : authInfo.focus,
        colors: options.colors,
        renderer
    });
}



//# sourceMappingURL=relationship-b72d7d97.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/slider-e162e136.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/slider-e162e136.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ barCreatedFunction),
/* harmony export */   u: () => (/* binding */ updateHistogramColors)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




function barCreatedFunction(colorVisVarOrBreaks, histogram, sliderBars, idx, element) {
    const color = (colorVisVarOrBreaks === null || colorVisVarOrBreaks === void 0 ? void 0 : colorVisVarOrBreaks.length)
        ? getColorForValueClassed(colorVisVarOrBreaks, histogram.bins[idx])
        : getColorForValue(colorVisVarOrBreaks.stops, histogram.bins[idx]);
    color && element.setAttribute("fill", color.toHex());
    color && element.setAttribute("opacity", `${Math.max(color.a, 0.2)}`);
    sliderBars.push(element);
}
function updateHistogramColors(slider, sliderBars, colorVisVarOrBreaks, histogram) {
    sliderBars === null || sliderBars === void 0 ? void 0 : sliderBars.forEach((element, index) => {
        const bin = (histogram || slider.histogramConfig).bins[index];
        const color = slider.breaks
            ? getColorForValueClassed(colorVisVarOrBreaks || slider.breaks, bin)
            : getColorForValue((colorVisVarOrBreaks || slider)
                .stops, bin);
        color && element.setAttribute("fill", color.toHex());
        color && element.setAttribute("opacity", `${Math.max(color.a, 0.2)}`);
    });
}
function getColorForValue(stops, bin) {
    // infers the color for a given value
    // based on the stops from a ColorVariable
    const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    if (!bin) {
        return;
    }
    const value = (bin.maxValue - bin.minValue) / 2 + bin.minValue;
    let minStop = stops[0];
    let maxStop = stops[stops.length - 1];
    const minStopValue = minStop.value;
    const maxStopValue = maxStop.value;
    if (value < minStopValue) {
        return minStop.color;
    }
    if (value > maxStopValue) {
        return maxStop.color;
    }
    const exactMatches = stops.filter((stop) => stop.value === value);
    if (exactMatches.length > 0) {
        return exactMatches[0].color;
    }
    minStop = null;
    maxStop = null;
    stops.forEach((stop, i) => {
        if (!minStop && !maxStop && stop.value >= value) {
            minStop = stops[i - 1];
            maxStop = stop;
        }
    });
    const weightedPosition = (value - minStop.value) / (maxStop.value - minStop.value);
    return modules.esriColor.blendColors(minStop.color, maxStop.color, weightedPosition);
}
function getColorForValueClassed(breaks, bin) {
    // infers the color for a given value
    // based on the classBreakInfo
    if (!bin) {
        return;
    }
    const value = (bin.maxValue - bin.minValue) / 2 + bin.minValue;
    let minBreak = breaks[0];
    let maxBreak = breaks[breaks.length - 1];
    if (value < minBreak.min || value > maxBreak.max) {
        return undefined;
    }
    const exactMatches = breaks.filter((b) => b.min === value);
    if (exactMatches.length > 0) {
        return exactMatches[0].color;
    }
    minBreak = breaks[breaks.length - 1];
    maxBreak = null;
    breaks.forEach((b, i) => {
        if (!maxBreak && b.min >= value) {
            minBreak = breaks[i - 1];
            maxBreak = b;
        }
    });
    return minBreak.color;
}



//# sourceMappingURL=slider-e162e136.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLTMxOTVjMy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDK0g7QUFDa1Y7QUFDclo7QUFDekI7QUFDQTtBQUN1RjtBQUM1RDtBQUNFO0FBQzJCO0FBQzdEO0FBQ0g7QUFDRTtBQUNVOztBQUV2Qyx1REFBdUQsV0FBVyxXQUFXLFlBQVksb0JBQW9CLGtCQUFrQixnQkFBZ0IscUJBQXFCLHVCQUF1QixnQkFBZ0I7O0FBRTNNO0FBQ0E7QUFDQSxRQUFRLHFEQUFnQjtBQUN4Qix5REFBeUQscURBQVc7QUFDcEUsNkRBQTZELHFEQUFXO0FBQ3hFLHlEQUF5RCxxREFBVztBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaUJBQWlCLEVBQUUsK0RBQWlCO0FBQ3BEO0FBQ0EseUJBQXlCLG1FQUFXO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLHNDQUFzQyxRQUFRLHFGQUFxRjtBQUNuSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBEQUEwRCxFQUFFLCtEQUFpQjtBQUM3RjtBQUNBLGdCQUFnQixxREFBQyxDQUFDLGlEQUFJLElBQUksK0JBQStCLEVBQUUscURBQUMsd0JBQXdCO0FBQ3BGO0FBQ0EsaUJBQWlCLHdEQUFXO0FBQzVCLGFBQWEsWUFBWSxvRUFBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtB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LG1FQUFXO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRXlIOztBQUV6SDs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeE5BO0FBQ0E7QUFDQTtBQUNBO0FBQzJFO0FBQ3hDO0FBQ0E7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsdUJBQXVCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELHVCQUF1QjtBQUMzRSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFVBQVUsRUFBRSwrREFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUUrRDs7QUFFL0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9hcmNnaXMtc21hcnQtbWFwcGluZy1wYW5lbHMtcmVsYXRpb25zaGlwXzMuZW50cnkuanMiLCJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vbG9hZGluZy02OTEzOTkwNy5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9yZWxhdGlvbnNoaXAtYjcyZDdkOTcuanMiLCJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vc2xpZGVyLWUxNjJlMTM2LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHY0LjAuNThcbiAqL1xuaW1wb3J0IHsgciBhcyByZWdpc3Rlckluc3RhbmNlLCBjIGFzIGNyZWF0ZUV2ZW50LCBoLCBIIGFzIEhvc3QsIGYgYXMgZm9yY2VVcGRhdGUsIGQgYXMgZ2V0RWxlbWVudCB9IGZyb20gJy4vaW5kZXgtZTNiZjdkYTcuanMnO1xuaW1wb3J0IHsgYWEgYXMgaXNUb3BGbG93SXRlbSwgRCBhcyBnZXRHZW9tZXRyeVR5cGUsIHQgYXMgZ2V0U3ltYm9sQ29sb3IsIGcgYXMgZ2V0UmVuZGVyZXJUeXBlLCB1IGFzIGdldEZpZWxkLCBxIGFzIGlzUG9seWdvblR5cGUsIGEgYXMgZ2V0VmlzVmFyLCBqIGFzIGFwcGx5UmVuZGVyZXJUb0FsbCwgRSBhcyBjbG9zZVBvcG92ZXJzLCBwIGFzIGdldEF1dGhWaXNWYXIsIGUgYXMgYXBwbHlSZW5kZXJlciwgYWIgYXMgdXBkYXRlUmVuZGVyZXIsIHMgYXMgc21hcnRNYXBwaW5nU3RhdGUsIGggYXMgZ2V0UmVuZGVyZXIsIGE5IGFzIGdldENvbG9yUmFtcHNXaXRoU2NoZW1lcywgYiBhcyBzdGF0dXMsIEYgYXMgZmluZFBhcmVudE5vZGUsIGFjIGFzIGlzRGVmaW5lZCwgYWQgYXMgdmFsaWRhdGVNaW5NYXgsIHcgYXMgc2ltcGxlRmllbGRUeXBlcyB9IGZyb20gJy4vcmFzdGVyLXVuaXF1ZS12YWx1ZS0wOTc2ZWM3Zi5qcyc7XG5pbXBvcnQgeyByIGFzIHJlcXVlc3RXcmFwcGVyIH0gZnJvbSAnLi9sb2FkaW5nLTY5MTM5OTA3LmpzJztcbmltcG9ydCAnLi9sb2FkTW9kdWxlcy1iNGFjMTI0Ny5qcyc7XG5pbXBvcnQgJy4vY29tbW9uRW51bXMtZmNmMTM2NjEuanMnO1xuaW1wb3J0IHsgYSBhcyBjcmVhdGVSZWxhdGlvbnNoaXBSZW5kZXJlckZyb21FeGlzdGluZywgdSBhcyB1cGRhdGVSZWxhdGlvbnNoaXBSZW5kZXJlciB9IGZyb20gJy4vcmVsYXRpb25zaGlwLWI3MmQ3ZDk3LmpzJztcbmltcG9ydCB7IEMgYXMgQ1NTX1VUSUxJVFkgfSBmcm9tICcuL2xhbmd1YWdlVXRpbC1lZjBlNTRiMi5qcyc7XG5pbXBvcnQgeyBnIGFzIGdldFN0b3BQcmVjaXNpb24gfSBmcm9tICcuL3ByZWNpc2lvbi0wNmE3MzY3Mi5qcyc7XG5pbXBvcnQgeyB1IGFzIHVwZGF0ZUhpc3RvZ3JhbUNvbG9ycywgYiBhcyBiYXJDcmVhdGVkRnVuY3Rpb24gfSBmcm9tICcuL3NsaWRlci1lMTYyZTEzNi5qcyc7XG5pbXBvcnQgJy4vbG9jYWxlLTA1MGI2ZGI5LmpzJztcbmltcG9ydCAnLi9kb20tNGQzNjc2NzcuanMnO1xuaW1wb3J0ICcuL2luZGV4LTA1OTU2Y2FiLmpzJztcbmltcG9ydCAnLi9jb21tb25GdW5jdGlvbnMtYjA4MzBlOWUuanMnO1xuXG5jb25zdCBhcmNnaXNTbWFydE1hcHBpbmdQYW5lbHNSZWxhdGlvbnNoaXBDc3MgPSBcIjpob3N0e3dpZHRoOjEwMCV9LmZsb3ctaXRlbXtoZWlnaHQ6MTAwJX0ucmVsYXRpb25zaGlwLWJsb2Nre292ZXJmbG93LXg6aGlkZGVufS5hdHRyaWJ1dGUtbmFtZXt3b3JkLWJyZWFrOmJyZWFrLWFsbH0uYmxvY2stc2VjdGlvbi1wYWRkaW5ne3BhZGRpbmctdG9wOjZweH1cIjtcblxuY29uc3QgQXJjZ2lzU21hcnRNYXBwaW5nUGFuZWxzUmVsYXRpb25zaGlwID0gY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICAgICAgdGhpcy5hcmNnaXNTbWFydE1hcHBpbmdQYW5lbHNSZWxhdGlvbnNoaXBDbG9zZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzU21hcnRNYXBwaW5nUGFuZWxzUmVsYXRpb25zaGlwQ2xvc2VcIiwgNyk7XG4gICAgICAgIHRoaXMuYXJjZ2lzU21hcnRNYXBwaW5nUGFuZWxzUmVsYXRpb25zaGlwQmFja0NsaWNrID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNTbWFydE1hcHBpbmdQYW5lbHNSZWxhdGlvbnNoaXBCYWNrQ2xpY2tcIiwgNyk7XG4gICAgICAgIHRoaXMuYXJjZ2lzU21hcnRNYXBwaW5nUGFuZWxzUmVsYXRpb25zaGlwRXJyb3IgPSBjcmVhdGVFdmVudCh0aGlzLCBcImFyY2dpc1NtYXJ0TWFwcGluZ1BhbmVsc1JlbGF0aW9uc2hpcEVycm9yXCIsIDcpO1xuICAgICAgICB0aGlzLmNvbG9yU2xpZGVyTm9kZXMgPSBbXTtcbiAgICAgICAgdGhpcy5oaWRlVHJhbnNwYXJlbmN5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGlkZVJvdGF0aW9uID0gZmFsc2U7XG4gICAgICAgIHRoaXMubWVudU9wZW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2hvd0JhY2tCdXR0b24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYmVmb3JlQmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy52aXN1YWxpemF0aW9uT3BlbiA9IGZhbHNlO1xuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgUHVibGljIE1ldGhvZHNcbiAgICAvL1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBhc3luYyBzZXRGb2N1cygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLmZsb3dJdGVtTm9kZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEZvY3VzKCk7XG4gICAgfVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBMaWZlY3ljbGVcbiAgICAvL1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBhc3luYyBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICAgICAgdGhpcy52aXN1YWxpemF0aW9uT3BlbiA9IHRydWU7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIG1vZHVsZXMgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICAvLyBzYXZlIG9yaWdpbmFsIHJlbmRlcmVyXG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gZ2V0UmVuZGVyZXIobGF5ZXIpO1xuICAgICAgICB0aGlzLm9yaWdpbmFsUmVuZGVyZXJKU09OID0gcmVuZGVyZXIudG9KU09OKCk7XG4gICAgICAgIHRoaXMub3JpZ2luYWxGZWF0dXJlUmVkdWN0aW9uID1cbiAgICAgICAgICAgIFwiZmVhdHVyZVJlZHVjdGlvblwiIGluIGxheWVyICYmIGxheWVyLmZlYXR1cmVSZWR1Y3Rpb25cbiAgICAgICAgICAgICAgICA/IG1vZHVsZXMuZXNyaUxhbmcuY2xvbmUobGF5ZXIuZmVhdHVyZVJlZHVjdGlvbilcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgLyogd2luZG93Lm9ucmVzaXplID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gZm9yIHRyYW5zcGFyZW5jeSBpbnB1dHNcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgICAgICAgIH07ICovXG4gICAgfVxuICAgIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IHRoaXMuZmxvd0l0ZW1Ob2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0Rm9jdXMoKTsgfSk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAvL3dpbmRvdy5vbnJlc2l6ZSA9IG51bGw7XG4gICAgfVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBSZW5kZXIgTWV0aG9kc1xuICAgIC8vXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB7IGxheWVyLCBoaWRlTGF5ZXJUaXRsZSwgaXNSVEwsIG1hcEltYWdlU3VibGF5ZXIsIHN0cmluZ3MgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCB0aXRsZSA9IGhpZGVMYXllclRpdGxlID8gdW5kZWZpbmVkIDogKF9hID0gbWFwSW1hZ2VTdWJsYXllciA9PT0gbnVsbCB8fCBtYXBJbWFnZVN1YmxheWVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtYXBJbWFnZVN1YmxheWVyLnRpdGxlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBsYXllci50aXRsZTtcbiAgICAgICAgcmV0dXJuIChoKEhvc3QsIHsgY2xhc3M6IFwiY2FsY2l0ZS1tYXRjaC1oZWlnaHRcIiB9LCBoKFwiY2FsY2l0ZS1mbG93LWl0ZW1cIiwgeyBoZWFkaW5nOiBzdHJpbmdzLnBhbmVscy5zdHlsZU9wdGlvbnMsIGRlc2NyaXB0aW9uOiB0aXRsZSwgY2xhc3M6IHtcbiAgICAgICAgICAgICAgICBcImZsb3ctaXRlbVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFtDU1NfVVRJTElUWS5ydGxdOiBpc1JUTFxuICAgICAgICAgICAgfSwgY2xvc2FibGU6IGlzVG9wRmxvd0l0ZW0odGhpcy5ob3N0RWxlbWVudCksIG1lbnVPcGVuOiB0aGlzLm1lbnVPcGVuLCBiZWZvcmVCYWNrOiB0aGlzLmJlZm9yZUJhY2ssXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBzaG93QmFja0J1dHRvbjogdGhpcy5zaG93QmFja0J1dHRvbiwgb25DYWxjaXRlRmxvd0l0ZW1DbG9zZTogKCkgPT4gdGhpcy5oYW5kbGVEb25lKCksIG9uQ2FsY2l0ZUZsb3dJdGVtQmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXJjZ2lzU21hcnRNYXBwaW5nUGFuZWxzUmVsYXRpb25zaGlwQmFja0NsaWNrLmVtaXQoKTtcbiAgICAgICAgICAgIH0sIHJlZjogKG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZsb3dJdGVtTm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB9LCB0aGlzLnJlbmRlckRvbmVCdXR0b24oKSwgdGhpcy5yZW5kZXJDYW5jZWxCdXR0b24oKSwgdGhpcy5yZW5kZXJWaXN1YWxpemF0aW9uKCksIHRoaXMucmVuZGVyTGVnZW5kKCksIHRoaXMucmVuZGVyVHJhbnNwYXJlbmN5KCksIHRoaXMucmVuZGVyUm90YXRpb24oKSkpKTtcbiAgICB9XG4gICAgcmVuZGVyRG9uZUJ1dHRvbigpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzIH0gPSBzbWFydE1hcHBpbmdTdGF0ZTtcbiAgICAgICAgcmV0dXJuIChoKFwiY2FsY2l0ZS1idXR0b25cIiwgeyBzbG90OiBcImZvb3RlclwiLCBsYWJlbDogc3RyaW5ncy5kb25lLCBvbkNsaWNrOiAoKSA9PiB0aGlzLmhhbmRsZURvbmUoKSwgYXBwZWFyYW5jZTogXCJzb2xpZFwiLCB3aWR0aDogXCJoYWxmXCIgfSwgc3RyaW5ncy5kb25lKSk7XG4gICAgfVxuICAgIHJlbmRlckNhbmNlbEJ1dHRvbigpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzIH0gPSBzbWFydE1hcHBpbmdTdGF0ZTtcbiAgICAgICAgcmV0dXJuIChoKFwiY2FsY2l0ZS1idXR0b25cIiwgeyBzbG90OiBcImZvb3RlclwiLCBsYWJlbDogc3RyaW5ncy5jYW5jZWwsIG9uQ2xpY2s6ICgpID0+IHRoaXMuaGFuZGxlQ2FuY2VsKCksIGFwcGVhcmFuY2U6IFwib3V0bGluZS1maWxsXCIsIHdpZHRoOiBcImhhbGZcIiB9LCBzdHJpbmdzLmNhbmNlbCkpO1xuICAgIH1cbiAgICByZW5kZXJWaXN1YWxpemF0aW9uKCkge1xuICAgICAgICBjb25zdCB7IHZpc3VhbGl6YXRpb25PcGVuLCBoaWRlVHJhbnNwYXJlbmN5LCBoaWRlUm90YXRpb24gfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgc3RyaW5ncyB9ID0gc21hcnRNYXBwaW5nU3RhdGU7XG4gICAgICAgIHJldHVybiAoaChcImNhbGNpdGUtYmxvY2tcIiwgeyBjbGFzczogXCJyZWxhdGlvbnNoaXAtYmxvY2tcIiwgaGVhZGluZzogc3RyaW5ncy5wYW5lbHMucmVsYXRpb25zaGlwLnJlbGF0aW9uc2hpcFN0eWxlLCBjb2xsYXBzaWJsZTogIWhpZGVUcmFuc3BhcmVuY3kgfHwgIWhpZGVSb3RhdGlvbiwgb3BlbjogdmlzdWFsaXphdGlvbk9wZW4sIG9uQ2FsY2l0ZUJsb2NrT3BlbjogKCkgPT4gKHRoaXMudmlzdWFsaXphdGlvbk9wZW4gPSB0cnVlKSwgb25DYWxjaXRlQmxvY2tDbG9zZTogKCkgPT4gKHRoaXMudmlzdWFsaXphdGlvbk9wZW4gPSBmYWxzZSkgfSwgdGhpcy5yZW5kZXJTeW1ib2woKSwgdGhpcy5yZW5kZXJHcmlkU2l6ZSgpLCB0aGlzLnJlbmRlck1ldGhvZCgpLCB0aGlzLnJlbmRlckZpZWxkMSgpLCB0aGlzLnJlbmRlckZpZWxkMigpLCB0aGlzLnJlbmRlckJhY2tncm91bmRTdHlsZSgpLCB0aGlzLnJlbmRlckRlZmF1bHRTeW1ib2woKSkpO1xuICAgIH1cbiAgICByZW5kZXJTeW1ib2woKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIG1hcFZpZXcsIG1vZHVsZXMgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGxheWVyKTtcbiAgICAgICAgY29uc3QgdW5pcXVlVmFsdWVJbmZvcyA9IHJlbmRlcmVyLnVuaXF1ZVZhbHVlSW5mb3M7XG4gICAgICAgIGlmICghdW5pcXVlVmFsdWVJbmZvcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjaGVtZXMgPSBtb2R1bGVzLnJlbGF0aW9uc2hpcFNjaGVtZXMuZ2V0U2NoZW1lcyh7XG4gICAgICAgICAgICBiYXNlbWFwOiBtYXBWaWV3Lm1hcC5iYXNlbWFwLFxuICAgICAgICAgICAgZ2VvbWV0cnlUeXBlOiBnZXRHZW9tZXRyeVR5cGUobGF5ZXIpXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjb2xvclJhbXBzQW5kU2NoZW1lcyA9IGdldENvbG9yUmFtcHNXaXRoU2NoZW1lcyhzY2hlbWVzLCBNYXRoLm1pbih1bmlxdWVWYWx1ZUluZm9zLmxlbmd0aCwgMTApKTtcbiAgICAgICAgY29uc3QgZGVmYXVsdENvbG9ycyA9IGNvbG9yUmFtcHNBbmRTY2hlbWVzWzBdLmNvbG9ycztcbiAgICAgICAgbGV0IGNvbG9ycyA9ICgodW5pcXVlVmFsdWVJbmZvcyA9PT0gbnVsbCB8fCB1bmlxdWVWYWx1ZUluZm9zID09PSB2b2lkIDAgPyB2b2lkIDAgOiB1bmlxdWVWYWx1ZUluZm9zLmxlbmd0aClcbiAgICAgICAgICAgID8gdW5pcXVlVmFsdWVJbmZvc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoKF8sIGlkeCkgPT4gaWR4IDwgMTApXG4gICAgICAgICAgICAgICAgLm1hcCgodW5pcXVlVmFsdWVJbmZvLCBpZHgpID0+IGdldFN5bWJvbENvbG9yKHVuaXF1ZVZhbHVlSW5mby5zeW1ib2wpIHx8XG4gICAgICAgICAgICAgICAgbmV3IG1vZHVsZXMuZXNyaUNvbG9yKGRlZmF1bHRDb2xvcnNbaWR4ICUgZGVmYXVsdENvbG9ycy5sZW5ndGhdKSlcbiAgICAgICAgICAgIDogW10pLnJldmVyc2UoKTtcbiAgICAgICAgcmV0dXJuIChoKFwiYXJjZ2lzLXNtYXJ0LW1hcHBpbmctc3ltYm9sLWJ1dHRvblwiLCB7IGNvbG9yczogY29sb3JzLCB0eXBlOiBcInJlbGF0aW9uc2hpcC1yYW1wXCIsIHJhbXBUeXBlOiBcImRpc2NyZXRlXCIsIG9uQXJjZ2lzU21hcnRNYXBwaW5nU3ltYm9sQnV0dG9uU3ltYm9sQ2hhbmdlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yY2VVcGRhdGUodGhpcy5ob3N0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvclNsaWRlck5vZGVzWzBdICYmIGZvcmNlVXBkYXRlKHRoaXMuY29sb3JTbGlkZXJOb2Rlc1swXSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvclNsaWRlck5vZGVzWzFdICYmIGZvcmNlVXBkYXRlKHRoaXMuY29sb3JTbGlkZXJOb2Rlc1sxXSk7XG4gICAgICAgICAgICAgICAgZm9yY2VVcGRhdGUodGhpcy5sZWdlbmROb2RlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdGF0aW9uTm9kZSAmJiBmb3JjZVVwZGF0ZSh0aGlzLnJvdGF0aW9uTm9kZSk7XG4gICAgICAgICAgICB9IH0pKTtcbiAgICB9XG4gICAgcmVuZGVyR3JpZFNpemUoKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIHN0cmluZ3MgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCBhdXRoSW5mbyA9IGdldFJlbmRlcmVyKGxheWVyKS5hdXRob3JpbmdJbmZvO1xuICAgICAgICBjb25zdCBncmlkU2l6ZSA9IGF1dGhJbmZvLm51bUNsYXNzZXM7XG4gICAgICAgIHJldHVybiAoaChcImNhbGNpdGUtbGFiZWxcIiwgbnVsbCwgc3RyaW5ncy5wYW5lbHMucmVsYXRpb25zaGlwLmdyaWRTaXplLCBoKFwiY2FsY2l0ZS1zZWxlY3RcIiwgeyBsYWJlbDogc3RyaW5ncy5wYW5lbHMucmVsYXRpb25zaGlwLmdyaWRTaXplLCBvbkNhbGNpdGVTZWxlY3RDaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVHcmlkU2l6ZUNoYW5nZShwYXJzZUZsb2F0KG5vZGUudmFsdWUpKTtcbiAgICAgICAgICAgIH0gfSwgaChcImNhbGNpdGUtb3B0aW9uXCIsIHsgdmFsdWU6IFwiMlwiLCBzZWxlY3RlZDogMiA9PT0gZ3JpZFNpemUgfSwgc3RyaW5ncy5wYW5lbHMucmVsYXRpb25zaGlwLmdyaWRzaXplMiksIGgoXCJjYWxjaXRlLW9wdGlvblwiLCB7IHZhbHVlOiBcIjNcIiwgc2VsZWN0ZWQ6IDMgPT09IGdyaWRTaXplIH0sIHN0cmluZ3MucGFuZWxzLnJlbGF0aW9uc2hpcC5ncmlkc2l6ZTMpLCBoKFwiY2FsY2l0ZS1vcHRpb25cIiwgeyB2YWx1ZTogXCI0XCIsIHNlbGVjdGVkOiA0ID09PSBncmlkU2l6ZSB9LCBzdHJpbmdzLnBhbmVscy5yZWxhdGlvbnNoaXAuZ3JpZHNpemU0KSkpKTtcbiAgICB9XG4gICAgcmVuZGVyTWV0aG9kKCkge1xuICAgICAgICBjb25zdCB7IGxheWVyIH0gPSBzbWFydE1hcHBpbmdTdGF0ZTtcbiAgICAgICAgY29uc3QgcmVuZGVyZXJUeXBlID0gZ2V0UmVuZGVyZXJUeXBlKCk7XG4gICAgICAgIHJldHVybiAoaChcImFyY2dpcy1zbWFydC1tYXBwaW5nLW1ldGhvZC1idXR0b25cIiwgeyBvbkFyY2dpc1NtYXJ0TWFwcGluZ01ldGhvZEJ1dHRvbkJlZm9yZU9wZW46ICgpID0+IGNsb3NlUG9wb3ZlcnMoKSwgb25BcmNnaXNTbWFydE1hcHBpbmdNZXRob2RCdXR0b25DaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBnZXRSZW5kZXJlcihsYXllcik7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmRldGFpbCA9PT0gXCJtYW51YWxcIikge1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJlci5hdXRob3JpbmdJbmZvLmNsYXNzaWZpY2F0aW9uTWV0aG9kID0gXCJtYW51YWxcIjtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmVuZGVyZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yY2VVcGRhdGUodGhpcy5ob3N0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0V3JhcHBlcihjcmVhdGVSZWxhdGlvbnNoaXBSZW5kZXJlckZyb21FeGlzdGluZyh7IGNsYXNzaWZpY2F0aW9uTWV0aG9kOiBldmVudC5kZXRhaWwgfSksIHRoaXMuZmxvd0l0ZW1Ob2RlKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbXCJyZWxhdGlvbnNoaXAtc2l6ZVwiXS5pbmRleE9mKHJlbmRlcmVyVHlwZSkgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEtlZXAgc2l6ZSB2YXJpYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNpemVWaXNWYXIgPSBnZXRWaXNWYXIocmVuZGVyZXIsIFwic2l6ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucmVuZGVyZXIudmlzdWFsVmFyaWFibGVzID0gcmVzdWx0LnJlbmRlcmVyLnZpc3VhbFZhcmlhYmxlcyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucmVuZGVyZXIudmlzdWFsVmFyaWFibGVzLnB1c2goc2l6ZVZpc1Zhcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXV0aFNpemVWaXNWYXIgPSBnZXRBdXRoVmlzVmFyKHJlbmRlcmVyLCBcInNpemVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnJlbmRlcmVyLmF1dGhvcmluZ0luZm8gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucmVuZGVyZXIuYXV0aG9yaW5nSW5mbyB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucmVuZGVyZXIuYXV0aG9yaW5nSW5mby52aXN1YWxWYXJpYWJsZXMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucmVuZGVyZXIuYXV0aG9yaW5nSW5mby52aXN1YWxWYXJpYWJsZXMgfHwgW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnJlbmRlcmVyLmF1dGhvcmluZ0luZm8udmlzdWFsVmFyaWFibGVzLnB1c2goYXV0aFNpemVWaXNWYXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwbHlSZW5kZXJlcihyZXN1bHQucmVuZGVyZXIsIGxheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVJlbmRlcmVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JjZVVwZGF0ZSh0aGlzLmhvc3RFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlVXBkYXRlKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlVXBkYXRlKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcmNnaXNTbWFydE1hcHBpbmdQYW5lbHNSZWxhdGlvbnNoaXBFcnJvci5lbWl0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVmOiAobm9kZSkgPT4gKHRoaXMubWV0aG9kQnV0dG9uTm9kZSA9IG5vZGUpIH0pKTtcbiAgICB9XG4gICAgcmVuZGVyRmllbGQxKCkge1xuICAgICAgICBjb25zdCB7IGxheWVyIH0gPSBzbWFydE1hcHBpbmdTdGF0ZTtcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBnZXRSZW5kZXJlcihsYXllcik7XG4gICAgICAgIGNvbnN0IGF1dGhGaWVsZCA9IHJlbmRlcmVyLmF1dGhvcmluZ0luZm8uZmllbGQxO1xuICAgICAgICBjb25zdCBmaWVsZCA9IGdldEZpZWxkKGF1dGhGaWVsZC5maWVsZCk7XG4gICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGZpZWxkLmxheWVyRmllbGQuYWxpYXMgfHwgZmllbGQubGF5ZXJGaWVsZC5uYW1lO1xuICAgICAgICByZXR1cm4gKGgoXCJjYWxjaXRlLWJsb2NrLXNlY3Rpb25cIiwgeyB0ZXh0OiBmaWVsZE5hbWUgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImJsb2NrLXNlY3Rpb24tcGFkZGluZ1wiIH0sIHRoaXMucmVuZGVyRGl2aWRlZEJ5KDApLCB0aGlzLnJlbmRlckNvbG9yU2xpZGVyKDApKSkpO1xuICAgIH1cbiAgICByZW5kZXJGaWVsZDIoKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGxheWVyKTtcbiAgICAgICAgY29uc3QgYXV0aEZpZWxkID0gcmVuZGVyZXIuYXV0aG9yaW5nSW5mby5maWVsZDI7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0RmllbGQoYXV0aEZpZWxkLmZpZWxkKTtcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gZmllbGQubGF5ZXJGaWVsZC5hbGlhcyB8fCBmaWVsZC5sYXllckZpZWxkLm5hbWU7XG4gICAgICAgIHJldHVybiAoaChcImNhbGNpdGUtYmxvY2stc2VjdGlvblwiLCB7IHRleHQ6IGZpZWxkTmFtZSB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiYmxvY2stc2VjdGlvbi1wYWRkaW5nXCIgfSwgdGhpcy5yZW5kZXJEaXZpZGVkQnkoMSksIHRoaXMucmVuZGVyQ29sb3JTbGlkZXIoMSkpKSk7XG4gICAgfVxuICAgIHJlbmRlckRpdmlkZWRCeShmaWVsZFBvcykge1xuICAgICAgICBjb25zdCB7IGxheWVyIH0gPSBzbWFydE1hcHBpbmdTdGF0ZTtcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBnZXRSZW5kZXJlcihsYXllcik7XG4gICAgICAgIGNvbnN0IGF1dGhJbmZvID0gcmVuZGVyZXIuYXV0aG9yaW5nSW5mbztcbiAgICAgICAgY29uc3QgYXV0aEZpZWxkID0gZmllbGRQb3MgPT09IDAgPyBhdXRoSW5mby5maWVsZDEgOiBhdXRoSW5mby5maWVsZDI7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6YXRpb25GaWVsZCA9IGF1dGhGaWVsZC5ub3JtYWxpemF0aW9uRmllbGQ7XG4gICAgICAgIHJldHVybiAoaChcImFyY2dpcy1zbWFydC1tYXBwaW5nLWRpdmlkZWQtYnlcIiwgeyByZW5kZXJlclN1YnR5cGU6IFwicmVsYXRpb25zaGlwXCIsIGZpZWxkUG9zOiBmaWVsZFBvcywgbm9ybWFsaXphdGlvbkZpZWxkOiBub3JtYWxpemF0aW9uRmllbGQsIG9uQXJjZ2lzU21hcnRNYXBwaW5nRGl2aWRlZEJ5Q2hhbmdlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yY2VVcGRhdGUodGhpcy5ob3N0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvclNsaWRlck5vZGVzW2ZpZWxkUG9zXSAmJiB0aGlzLmNvbG9yU2xpZGVyTm9kZXNbZmllbGRQb3NdLnVwZGF0ZVN0YXRpc3RpY3MoKTtcbiAgICAgICAgICAgIH0gfSkpO1xuICAgIH1cbiAgICByZW5kZXJDb2xvclNsaWRlcihmaWVsZFBvcykge1xuICAgICAgICByZXR1cm4gKGgoXCJhcmNnaXMtc21hcnQtbWFwcGluZy1yZWxhdGlvbnNoaXAtY29sb3Itc2xpZGVyXCIsIHsgZmllbGRQb3M6IGZpZWxkUG9zLCByZWY6IChub2RlKSA9PiAodGhpcy5jb2xvclNsaWRlck5vZGVzW2ZpZWxkUG9zXSA9IG5vZGUpLCBvbkFyY2dpc1NtYXJ0TWFwcGluZ1JlbGF0aW9uc2hpcENvbG9yU2xpZGVyQ2hhbmdlOiAoKSA9PiB0aGlzLm1ldGhvZEJ1dHRvbk5vZGUgJiYgZm9yY2VVcGRhdGUodGhpcy5tZXRob2RCdXR0b25Ob2RlKSB9KSk7XG4gICAgfVxuICAgIHJlbmRlckJhY2tncm91bmRTdHlsZSgpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciB9ID0gc21hcnRNYXBwaW5nU3RhdGU7XG4gICAgICAgIGlmICghaXNQb2x5Z29uVHlwZShsYXllcikgfHwgZ2V0UmVuZGVyZXJUeXBlKCkgIT09IFwicmVsYXRpb25zaGlwLXNpemVcIikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGgoXCJhcmNnaXMtc21hcnQtbWFwcGluZy1iYWNrZ3JvdW5kLXN5bWJvbFwiLCBudWxsKTtcbiAgICB9XG4gICAgcmVuZGVyRGVmYXVsdFN5bWJvbCgpIHtcbiAgICAgICAgcmV0dXJuIGgoXCJhcmNnaXMtc21hcnQtbWFwcGluZy1kZWZhdWx0LXN5bWJvbFwiLCBudWxsKTtcbiAgICB9XG4gICAgcmVuZGVyTGVnZW5kKCkge1xuICAgICAgICByZXR1cm4gKGgoXCJhcmNnaXMtc21hcnQtbWFwcGluZy1yZWxhdGlvbnNoaXAtbGVnZW5kXCIsIHsgb25BcmNnaXNTbWFydE1hcHBpbmdSZWxhdGlvbnNoaXBMZWdlbmRGb2N1c0NoYW5nZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGZvcmNlVXBkYXRlKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgICAgICAgICAgfSAvLyB0byB1cGRhdGUgc3ltYm9sIHN0eWxlclxuICAgICAgICAgICAgLFxuICAgICAgICAgICAgcmVmOiAobm9kZSkgPT4gKHRoaXMubGVnZW5kTm9kZSA9IG5vZGUpIH0pKTtcbiAgICB9XG4gICAgcmVuZGVyVHJhbnNwYXJlbmN5KCkge1xuICAgICAgICBjb25zdCB7IGhpZGVUcmFuc3BhcmVuY3kgfSA9IHRoaXM7XG4gICAgICAgIGlmIChoaWRlVHJhbnNwYXJlbmN5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBsYXllciB9ID0gc21hcnRNYXBwaW5nU3RhdGU7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gZ2V0UmVuZGVyZXIobGF5ZXIpO1xuICAgICAgICBjb25zdCBvcGFjaXR5VmlzVmFyID0gZ2V0VmlzVmFyKHJlbmRlcmVyLCBcIm9wYWNpdHlcIik7XG4gICAgICAgIHJldHVybiAoaChcImFyY2dpcy1zbWFydC1tYXBwaW5nLXRyYW5zcGFyZW5jeVwiLCB7IG9wZW46ICEhb3BhY2l0eVZpc1Zhciwgb25BcmNnaXNTbWFydE1hcHBpbmdTeW1ib2xUcmFuc3BhcmVuY3lFcnJvcjogKHsgZGV0YWlsIH0pID0+IHRoaXMuYXJjZ2lzU21hcnRNYXBwaW5nUGFuZWxzUmVsYXRpb25zaGlwRXJyb3IuZW1pdChkZXRhaWwpIH0pKTtcbiAgICB9XG4gICAgcmVuZGVyUm90YXRpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmhpZGVSb3RhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGxheWVyKTtcbiAgICAgICAgY29uc3Qgb3BhY2l0eVZpc1ZhciA9IGdldFZpc1ZhcihyZW5kZXJlciwgXCJvcGFjaXR5XCIpO1xuICAgICAgICBjb25zdCByb3RhdGlvblZpc1ZhciA9IGdldFZpc1ZhcihyZW5kZXJlciwgXCJyb3RhdGlvblwiKTtcbiAgICAgICAgcmV0dXJuIChoKFwiYXJjZ2lzLXNtYXJ0LW1hcHBpbmctcm90YXRpb25cIiwgeyBvcGVuOiAhb3BhY2l0eVZpc1ZhciAmJiAhIXJvdGF0aW9uVmlzVmFyLCByZWY6IChub2RlKSA9PiAodGhpcy5yb3RhdGlvbk5vZGUgPSBub2RlKSwgb25BcmNnaXNTbWFydE1hcHBpbmdSb3RhdGlvbkVycm9yOiAoeyBkZXRhaWwgfSkgPT4gdGhpcy5hcmNnaXNTbWFydE1hcHBpbmdQYW5lbHNSZWxhdGlvbnNoaXBFcnJvci5lbWl0KGRldGFpbCkgfSkpO1xuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgUHJpdmF0ZSBtZXRob2RzXG4gICAgLy9cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgaGFuZGxlRG9uZSgpIHtcbiAgICAgICAgLy8ga2VlcCB0aGUgY3VycmVudCBzZXR0aW5ncyBvbiB0aGUgbGF5ZXJcbiAgICAgICAgdGhpcy5hcmNnaXNTbWFydE1hcHBpbmdQYW5lbHNSZWxhdGlvbnNoaXBDbG9zZS5lbWl0KFwic2F2ZVwiKTtcbiAgICB9XG4gICAgaGFuZGxlQ2FuY2VsKCkge1xuICAgICAgICBjb25zdCB7IG9yaWdpbmFsUmVuZGVyZXJKU09OLCBvcmlnaW5hbEZlYXR1cmVSZWR1Y3Rpb24gfSA9IHRoaXM7XG4gICAgICAgIGFwcGx5UmVuZGVyZXJUb0FsbChvcmlnaW5hbFJlbmRlcmVySlNPTiwgb3JpZ2luYWxGZWF0dXJlUmVkdWN0aW9uKTtcbiAgICAgICAgdGhpcy5hcmNnaXNTbWFydE1hcHBpbmdQYW5lbHNSZWxhdGlvbnNoaXBDbG9zZS5lbWl0KFwiY2FuY2VsXCIpO1xuICAgIH1cbiAgICBoYW5kbGVHcmlkU2l6ZUNoYW5nZShncmlkU2l6ZSkge1xuICAgICAgICBjb25zdCB7IGxheWVyIH0gPSBzbWFydE1hcHBpbmdTdGF0ZTtcbiAgICAgICAgY2xvc2VQb3BvdmVycygpO1xuICAgICAgICByZXF1ZXN0V3JhcHBlcihjcmVhdGVSZWxhdGlvbnNoaXBSZW5kZXJlckZyb21FeGlzdGluZyh7XG4gICAgICAgICAgICBudW1DbGFzc2VzOiBncmlkU2l6ZVxuICAgICAgICB9KSwgdGhpcy5mbG93SXRlbU5vZGUpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKGdldFJlbmRlcmVyVHlwZSgpID09PSBcInJlbGF0aW9uc2hpcC1zaXplXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBrZWVwIHNpemUgdmFyaWFibGVcbiAgICAgICAgICAgICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGxheWVyKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzaXplVmlzVmFyID0gZ2V0VmlzVmFyKHJlbmRlcmVyLCBcInNpemVcIik7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnJlbmRlcmVyLnZpc3VhbFZhcmlhYmxlcyA9IHJlc3VsdC5yZW5kZXJlci52aXN1YWxWYXJpYWJsZXMgfHwgW107XG4gICAgICAgICAgICAgICAgcmVzdWx0LnJlbmRlcmVyLnZpc3VhbFZhcmlhYmxlcy5wdXNoKHNpemVWaXNWYXIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpemVBdXRoVmlzVmFyID0gZ2V0QXV0aFZpc1ZhcihyZW5kZXJlciwgXCJzaXplXCIpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5yZW5kZXJlci5hdXRob3JpbmdJbmZvLnZpc3VhbFZhcmlhYmxlcyA9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5yZW5kZXJlci5hdXRob3JpbmdJbmZvLnZpc3VhbFZhcmlhYmxlcyB8fCBbXTtcbiAgICAgICAgICAgICAgICByZXN1bHQucmVuZGVyZXIuYXV0aG9yaW5nSW5mby52aXN1YWxWYXJpYWJsZXMucHVzaChzaXplQXV0aFZpc1Zhcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcHBseVJlbmRlcmVyKHJlc3VsdC5yZW5kZXJlciwgbGF5ZXIpO1xuICAgICAgICAgICAgdXBkYXRlUmVuZGVyZXIoKTtcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5jb2xvclNsaWRlck5vZGVzWzBdICYmIGZvcmNlVXBkYXRlKHRoaXMuY29sb3JTbGlkZXJOb2Rlc1swXSk7XG4gICAgICAgICAgICB0aGlzLmNvbG9yU2xpZGVyTm9kZXNbMV0gJiYgZm9yY2VVcGRhdGUodGhpcy5jb2xvclNsaWRlck5vZGVzWzFdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBob3N0RWxlbWVudCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5BcmNnaXNTbWFydE1hcHBpbmdQYW5lbHNSZWxhdGlvbnNoaXAuc3R5bGUgPSBhcmNnaXNTbWFydE1hcHBpbmdQYW5lbHNSZWxhdGlvbnNoaXBDc3M7XG5cbmNvbnN0IGFyY2dpc1NtYXJ0TWFwcGluZ1JlbGF0aW9uc2hpcENvbG9yU2xpZGVyQ3NzID0gXCIuc2xpZGVyLWJveHtoZWlnaHQ6MzEwcHg7bWFyZ2luLXRvcDo2cHh9LmVzcmktY2xhc3NlZC1jb2xvci1zbGlkZXJ7bWluLXdpZHRoOjIwMHB4fS5lc3JpLWNsYXNzZWQtY29sb3Itc2xpZGVyX19oaXN0b2dyYW0tY29udGFpbmVye3dpZHRoOjcwcHh9LmVzcmktY2xhc3NlZC1jb2xvci1zbGlkZXIgLmVzcmktc2xpZGVyIC5lc3JpLXNsaWRlcl9fY29udGVudHtoZWlnaHQ6MjAwcHh9LmVzcmktY2xhc3NlZC1jb2xvci1zbGlkZXIgLmVzcmktc2xpZGVyIC5lc3JpLXNsaWRlcl9fbGFiZWwsLmVzcmktY2xhc3NlZC1jb2xvci1zbGlkZXIgLmVzcmktc2xpZGVyIC5lc3JpLXNsaWRlcl9fbWluLC5lc3JpLWNsYXNzZWQtY29sb3Itc2xpZGVyIC5lc3JpLXNsaWRlciAuZXNyaS1zbGlkZXJfX21heHt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lfS5lc3JpLWNsYXNzZWQtY29sb3Itc2xpZGVyIC5lc3JpLXNsaWRlciAuZXNyaS1zbGlkZXJfX2xhYmVsOmhvdmVyLC5lc3JpLWNsYXNzZWQtY29sb3Itc2xpZGVyIC5lc3JpLXNsaWRlciAuZXNyaS1zbGlkZXJfX21pbjpob3ZlciwuZXNyaS1jbGFzc2VkLWNvbG9yLXNsaWRlciAuZXNyaS1zbGlkZXIgLmVzcmktc2xpZGVyX19tYXg6aG92ZXJ7Ym9yZGVyOjFweCBzb2xpZCAjYmJiO2JhY2tncm91bmQtY29sb3I6I2YzZjNmMzt0ZXh0LWRlY29yYXRpb246bm9uZTt6LWluZGV4OjF9XCI7XG5cbmNvbnN0IEFyY2dpc1NtYXJ0TWFwcGluZ1JlbGF0aW9uc2hpcENvbG9yU2xpZGVyID0gY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICAgICAgdGhpcy5hcmNnaXNTbWFydE1hcHBpbmdSZWxhdGlvbnNoaXBDb2xvclNsaWRlckNoYW5nZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzU21hcnRNYXBwaW5nUmVsYXRpb25zaGlwQ29sb3JTbGlkZXJDaGFuZ2VcIiwgNyk7XG4gICAgICAgIHRoaXMuYXJjZ2lzU21hcnRNYXBwaW5nUmVsYXRpb25zaGlwQ29sb3JTbGlkZXJFcnJvciA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzU21hcnRNYXBwaW5nUmVsYXRpb25zaGlwQ29sb3JTbGlkZXJFcnJvclwiLCA3KTtcbiAgICAgICAgdGhpcy5jdXJyZW50QnJlYWtWYWx1ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5maWVsZFBvcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oaXN0b2dyYW1TdGF0dXMgPSBzdGF0dXMuTUlTU0lORztcbiAgICAgICAgdGhpcy5zdGF0aXN0aWNzU3RhdHVzID0gc3RhdHVzLk1JU1NJTkc7XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vIFB1YmxpYyBNZXRob2RzXG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgYXN5bmMgdXBkYXRlU3RhdGlzdGljcygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLnN0YXRpc3RpY3NTdGF0dXMgPSBzdGF0dXMuTUlTU0lORztcbiAgICAgICAgdGhpcy5zdGF0aXN0aWNzID0gbnVsbDtcbiAgICAgICAgdGhpcy5oaXN0b2dyYW1TdGF0dXMgPSBzdGF0dXMuTUlTU0lORztcbiAgICAgICAgdGhpcy5oaXN0b2dyYW0gPSBudWxsO1xuICAgICAgICAoX2EgPSB0aGlzLmNvbG9yU2xpZGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmNvbG9yU2xpZGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmdldFN0YXRpc3RpY3MoKTtcbiAgICB9XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gTGlmZWN5Y2xlXG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgICAgIHRoaXMuZmxvd0l0ZW1Ob2RlID0gZmluZFBhcmVudE5vZGUodGhpcy5ob3N0RWxlbWVudCwgXCJjYWxjaXRlLWZsb3ctaXRlbVwiKTtcbiAgICAgICAgdGhpcy5nZXRTdGF0aXN0aWNzKCk7XG4gICAgfVxuICAgIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgICAgIGNvbnN0IHsgY29uZmlnIH0gPSBzbWFydE1hcHBpbmdTdGF0ZTtcbiAgICAgICAgdGhpcy5ob3N0RWxlbWVudC5zaGFkb3dSb290LmZpcnN0RWxlbWVudENoaWxkLmluc2VydEFkamFjZW50SFRNTChcImJlZm9yZWJlZ2luXCIsIGA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cIiR7Y29uZmlnLmpzYXBpVXJsfS90aGVtZXMvbGlnaHQvbWFpbi5jc3NcIiAvPmApO1xuICAgIH1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgUmVuZGVyIE1ldGhvZHNcbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgeyBzdGF0aXN0aWNzU3RhdHVzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGxheWVyLCBzdHJpbmdzIH0gPSBzbWFydE1hcHBpbmdTdGF0ZTtcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBnZXRSZW5kZXJlcihsYXllcik7XG4gICAgICAgIGNvbnN0IGF1dGhJbmZvID0gcmVuZGVyZXIuYXV0aG9yaW5nSW5mbztcbiAgICAgICAgaWYgKHN0YXRpc3RpY3NTdGF0dXMgPT09IHN0YXR1cy5GQUlMRUQgfHwgc3RhdGlzdGljc1N0YXR1cyA9PT0gc3RhdHVzLk1JU1NJTkcpIHtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuY29sb3JTbGlkZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmNvbG9yU2xpZGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhdGlzdGljc1N0YXR1cyA9PT0gc3RhdHVzLklOX1BST0dSRVNTIHx8XG4gICAgICAgICAgICAodGhpcy5oaXN0b2dyYW1TdGF0dXMgPT09IHN0YXR1cy5JTl9QUk9HUkVTUyAmJiAhdGhpcy5jb2xvclNsaWRlcikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlckNvbG9yU2xpZGVyTG9hZGluZygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgb2sgPSB0aGlzLnByZXBhcmVDb2xvclNsaWRlcigpO1xuICAgICAgICAgICAgY29uc3QgaW5mb3MgPSB0aGlzLmZpZWxkUG9zID09PSAwID8gYXV0aEluZm8uZmllbGQxLmNsYXNzQnJlYWtJbmZvcyA6IGF1dGhJbmZvLmZpZWxkMi5jbGFzc0JyZWFrSW5mb3M7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRCcmVha1ZhbHVlcyA9IGluZm9zLm1hcCgoaW5mbykgPT4gKHtcbiAgICAgICAgICAgICAgICBtaW46IGluZm8ubWluVmFsdWUsXG4gICAgICAgICAgICAgICAgbWF4OiBpbmZvLm1heFZhbHVlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBpZiAob2sgfHwgdGhpcy5jb2xvclNsaWRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcInNsaWRlci1ib3hcIiB9LCBoKFwiY2FsY2l0ZS1sYWJlbFwiLCBudWxsLCBzdHJpbmdzLnBhbmVscy5yZWxhdGlvbnNoaXAuZGF0YVJhbmdlKSwgaChcImRpdlwiLCB7IHJlZjogKG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZnRlckNvbG9yU2xpZGVyQ3JlYXRlKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IH0pKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJDb2xvclNsaWRlckxvYWRpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXJDb2xvclNsaWRlckxvYWRpbmcoKSB7XG4gICAgICAgIGNvbnN0IHsgc3RyaW5ncyB9ID0gc21hcnRNYXBwaW5nU3RhdGU7XG4gICAgICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcInNsaWRlci1ib3hcIiB9LCBoKFwiY2FsY2l0ZS1sb2FkZXJcIiwgeyBsYWJlbDogc3RyaW5ncy5sb2FkaW5nIH0pKSk7XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBQcml2YXRlIG1ldGhvZHNcbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBhZnRlckNvbG9yU2xpZGVyQ3JlYXRlKG5vZGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbG9yU2xpZGVyLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgY29uc3QgZGl2Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKGRpdk5vZGUpO1xuICAgICAgICAgICAgdGhpcy5jb2xvclNsaWRlci5jb250YWluZXIgPSBkaXZOb2RlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZUNvbG9yU2xpZGVyQ2hhbmdlRXZlbnRzKCkge1xuICAgICAgICBpZiAoIXRoaXMuY29sb3JTbGlkZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbG9yU2xpZGVyLm9uKFwibWluLWNoYW5nZVwiLCAoaW5mbykgPT4ge1xuICAgICAgICAgICAgaWYgKGluZm8udmFsdWUgPiB0aGlzLmN1cnJlbnRCcmVha1ZhbHVlc1swXS5tYXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uTWluTWF4Q2hhbmdlKHRoaXMuY3VycmVudEJyZWFrVmFsdWVzWzBdLm1heCwgdGhpcy5jb2xvclNsaWRlci5zbGlkZXIubWF4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub25NaW5NYXhDaGFuZ2UoaW5mby52YWx1ZSwgdGhpcy5jb2xvclNsaWRlci5zbGlkZXIubWF4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29sb3JTbGlkZXIub24oXCJtYXgtY2hhbmdlXCIsIChpbmZvKSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5mby52YWx1ZSA8IHRoaXMuY3VycmVudEJyZWFrVmFsdWVzW3RoaXMuY3VycmVudEJyZWFrVmFsdWVzLmxlbmd0aCAtIDFdLm1pbikge1xuICAgICAgICAgICAgICAgIHRoaXMub25NaW5NYXhDaGFuZ2UodGhpcy5jb2xvclNsaWRlci5zbGlkZXIubWluLCB0aGlzLmN1cnJlbnRCcmVha1ZhbHVlc1t0aGlzLmN1cnJlbnRCcmVha1ZhbHVlcy5sZW5ndGggLSAxXS5taW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbk1pbk1heENoYW5nZSh0aGlzLmNvbG9yU2xpZGVyLnNsaWRlci5taW4sIGluZm8udmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jb2xvclNsaWRlci5vbihcInRodW1iLWNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVJlbmRlcmVyQnJlYWtzKHRoaXMuY29sb3JTbGlkZXIuYnJlYWtzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29sb3JTbGlkZXIub24oXCJ0aHVtYi1kcmFnXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmVuZGVyZXJCcmVha3ModGhpcy5jb2xvclNsaWRlci5icmVha3MpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0Q2xhc3NCcmVha3NDb2xvcnMoKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIG1vZHVsZXMgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGxheWVyKTtcbiAgICAgICAgY29uc3QgYXV0aEluZm8gPSByZW5kZXJlci5hdXRob3JpbmdJbmZvO1xuICAgICAgICBjb25zdCBpbmZvcyA9IHRoaXMuZmllbGRQb3MgPT09IDAgPyBhdXRoSW5mby5maWVsZDEuY2xhc3NCcmVha0luZm9zIDogYXV0aEluZm8uZmllbGQyLmNsYXNzQnJlYWtJbmZvcztcbiAgICAgICAgY29uc3QgYnJlYWtJbmZvcyA9IGluZm9zLm1hcCgoY2xhc3NCcmVha0luZm8pID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbWluOiBjbGFzc0JyZWFrSW5mby5taW5WYWx1ZSxcbiAgICAgICAgICAgICAgICBtYXg6IGNsYXNzQnJlYWtJbmZvLm1heFZhbHVlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gYWRkIGdyZXkgY29sb3JzXG4gICAgICAgIGxldCBjb2xvciA9IG5ldyBtb2R1bGVzLmVzcmlDb2xvcihbMCwgMCwgMCwgMV0pO1xuICAgICAgICBsZXQgY29sb3IyID0gbmV3IG1vZHVsZXMuZXNyaUNvbG9yKFswLCAwLCAwLCAxXSk7XG4gICAgICAgIHJlbmRlcmVyLnVuaXF1ZVZhbHVlR3JvdXBzWzBdLmNsYXNzZXMuZm9yRWFjaCgodXZDbGFzcykgPT4ge1xuICAgICAgICAgICAgaWYgKHV2Q2xhc3MudmFsdWVzWzBdLnZhbHVlID09PSBcIkhIXCIpIHtcbiAgICAgICAgICAgICAgICBjb2xvciA9IGdldFN5bWJvbENvbG9yKHV2Q2xhc3Muc3ltYm9sKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHV2Q2xhc3MudmFsdWVzWzBdLnZhbHVlID09PSBcIkxMXCIpIHtcbiAgICAgICAgICAgICAgICBjb2xvcjIgPSBnZXRTeW1ib2xDb2xvcih1dkNsYXNzLnN5bWJvbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdmFsdWUgPSAoY29sb3IuciArIGNvbG9yLmcgKyBjb2xvci5iKSAvIDM7XG4gICAgICAgIGNvbnN0IHZhbHVlMiA9IChjb2xvcjIuciArIGNvbG9yMi5nICsgY29sb3IyLmIpIC8gMztcbiAgICAgICAgaWYgKGJyZWFrSW5mb3MubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICBicmVha0luZm9zWzFdLmNvbG9yID0gbmV3IG1vZHVsZXMuZXNyaUNvbG9yKFt2YWx1ZSwgdmFsdWUsIHZhbHVlLCAxXSk7XG4gICAgICAgICAgICBicmVha0luZm9zWzBdLmNvbG9yID0gbmV3IG1vZHVsZXMuZXNyaUNvbG9yKFt2YWx1ZTIsIHZhbHVlMiwgdmFsdWUyLCAxXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYnJlYWtJbmZvcy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgIGJyZWFrSW5mb3NbMl0uY29sb3IgPSBuZXcgbW9kdWxlcy5lc3JpQ29sb3IoW3ZhbHVlLCB2YWx1ZSwgdmFsdWUsIDFdKTtcbiAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlICsgdmFsdWUyKSAvIDI7XG4gICAgICAgICAgICBicmVha0luZm9zWzFdLmNvbG9yID0gbmV3IG1vZHVsZXMuZXNyaUNvbG9yKFt2YWx1ZSwgdmFsdWUsIHZhbHVlLCAxXSk7XG4gICAgICAgICAgICBicmVha0luZm9zWzBdLmNvbG9yID0gbmV3IG1vZHVsZXMuZXNyaUNvbG9yKFt2YWx1ZTIsIHZhbHVlMiwgdmFsdWUyLCAxXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBicmVha0luZm9zWzNdLmNvbG9yID0gbmV3IG1vZHVsZXMuZXNyaUNvbG9yKFt2YWx1ZSwgdmFsdWUsIHZhbHVlLCAxXSk7XG4gICAgICAgICAgICBsZXQgdmFsdWUzID0gdmFsdWUgKyAodmFsdWUyIC0gdmFsdWUpIC8gMztcbiAgICAgICAgICAgIGJyZWFrSW5mb3NbMl0uY29sb3IgPSBuZXcgbW9kdWxlcy5lc3JpQ29sb3IoW3ZhbHVlMywgdmFsdWUzLCB2YWx1ZTMsIDFdKTtcbiAgICAgICAgICAgIHZhbHVlMyA9IHZhbHVlICsgKCh2YWx1ZTIgLSB2YWx1ZSkgKiAyKSAvIDM7XG4gICAgICAgICAgICBicmVha0luZm9zWzFdLmNvbG9yID0gbmV3IG1vZHVsZXMuZXNyaUNvbG9yKFt2YWx1ZTMsIHZhbHVlMywgdmFsdWUzLCAxXSk7XG4gICAgICAgICAgICBicmVha0luZm9zWzBdLmNvbG9yID0gbmV3IG1vZHVsZXMuZXNyaUNvbG9yKFt2YWx1ZTIsIHZhbHVlMiwgdmFsdWUyLCAxXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJyZWFrSW5mb3M7XG4gICAgfVxuICAgIGdldEhpc3RvZ3JhbShmaWVsZEluZm8sIG5vcm1hbGl6YXRpb25GaWVsZCwgc3RhdGlzdGljcywgbWluLCBtYXgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB7IGxheWVyOiBzbUxheWVyLCBtYXBWaWV3LCBtb2R1bGVzIH0gPSBzbWFydE1hcHBpbmdTdGF0ZTtcbiAgICAgICAgY29uc3QgbGF5ZXIgPSBzbUxheWVyO1xuICAgICAgICBzdGF0aXN0aWNzID0gc3RhdGlzdGljcyB8fCB0aGlzLnN0YXRpc3RpY3M7XG4gICAgICAgIGlmICghc3RhdGlzdGljcyB8fCBzdGF0aXN0aWNzLmNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oaXN0b2dyYW1TdGF0dXMgPSBzdGF0dXMuSU5fUFJPR1JFU1M7XG4gICAgICAgIG1vZHVsZXNcbiAgICAgICAgICAgIC5oaXN0b2dyYW0oe1xuICAgICAgICAgICAgbGF5ZXIsXG4gICAgICAgICAgICB2aWV3OiBtYXBWaWV3LFxuICAgICAgICAgICAgZmllbGQ6IGZpZWxkSW5mby5maWVsZCxcbiAgICAgICAgICAgIG51bUJpbnM6IDUwLFxuICAgICAgICAgICAgbWluVmFsdWU6IG1pbiAhPT0gbnVsbCAmJiBtaW4gIT09IHZvaWQgMCA/IG1pbiA6IHN0YXRpc3RpY3MubWluLFxuICAgICAgICAgICAgbWF4VmFsdWU6IG1heCAhPT0gbnVsbCAmJiBtYXggIT09IHZvaWQgMCA/IG1heCA6IHN0YXRpc3RpY3MubWF4LFxuICAgICAgICAgICAgbm9ybWFsaXphdGlvbkZpZWxkLFxuICAgICAgICAgICAgZm9yQmlubmluZzogXCJmZWF0dXJlUmVkdWN0aW9uXCIgaW4gbGF5ZXIgJiYgKChfYSA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50eXBlKSA9PT0gXCJiaW5uaW5nXCJcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChoaXN0b2dyYW0pID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGlzdG9ncmFtID0gaGlzdG9ncmFtO1xuICAgICAgICAgICAgdGhpcy5oaXN0b2dyYW1TdGF0dXMgPSBzdGF0dXMuU1VDQ0VTUztcbiAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yLWhpc3RvZ3JhbVwiLCBlcnJvcik7XG4gICAgICAgICAgICB0aGlzLmhpc3RvZ3JhbVN0YXR1cyA9IHN0YXR1cy5GQUlMRUQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRTdGF0aXN0aWNzKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXI6IHNtTGF5ZXIsIG1hcFZpZXcsIG1vZHVsZXMgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCBsYXllciA9IHNtTGF5ZXI7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gZ2V0UmVuZGVyZXIobGF5ZXIpO1xuICAgICAgICBjb25zdCBhdXRoSW5mbyA9IHJlbmRlcmVyLmF1dGhvcmluZ0luZm87XG4gICAgICAgIGNvbnN0IGZpZWxkID0gdGhpcy5maWVsZFBvcyA9PT0gMCA/IGF1dGhJbmZvLmZpZWxkMSA6IGF1dGhJbmZvLmZpZWxkMjtcbiAgICAgICAgY29uc3QgaW5mb3MgPSBmaWVsZC5jbGFzc0JyZWFrSW5mb3M7XG4gICAgICAgIGlmICghaW5mb3MgfHwgdGhpcy5zdGF0aXN0aWNzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmllbGRJbmZvID0ge1xuICAgICAgICAgICAgZmllbGQ6IGZpZWxkLmZpZWxkLFxuICAgICAgICAgICAgc2ltcGxlRmllbGRUeXBlOiBzaW1wbGVGaWVsZFR5cGVzLk5VTUJFUlxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBub3JtYWxpemF0aW9uRmllbGQgPSBmaWVsZC5ub3JtYWxpemF0aW9uRmllbGQ7XG4gICAgICAgIGxldCBtaW4gPSBpbmZvc1swXS5taW5WYWx1ZTtcbiAgICAgICAgbGV0IG1heCA9IGluZm9zW2luZm9zLmxlbmd0aCAtIDFdLm1heFZhbHVlO1xuICAgICAgICB0aGlzLnN0YXRpc3RpY3NTdGF0dXMgPSBzdGF0dXMuSU5fUFJPR1JFU1M7XG4gICAgICAgIG1vZHVsZXNcbiAgICAgICAgICAgIC5zdW1tYXJ5U3RhdGlzdGljcyh7XG4gICAgICAgICAgICBsYXllcixcbiAgICAgICAgICAgIHZpZXc6IG1hcFZpZXcsXG4gICAgICAgICAgICBmaWVsZDogZmllbGQuZmllbGQsXG4gICAgICAgICAgICBub3JtYWxpemF0aW9uRmllbGQsXG4gICAgICAgICAgICBmb3JCaW5uaW5nOiBcImZlYXR1cmVSZWR1Y3Rpb25cIiBpbiBsYXllciAmJiAoKF9hID0gbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnR5cGUpID09PSBcImJpbm5pbmdcIlxuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKHN0YXRpc3RpY3MpID0+IHtcbiAgICAgICAgICAgIGlmIChzdGF0aXN0aWNzLmNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gZmllbGQgaGFzIG5vIHZhbHVlc1xuICAgICAgICAgICAgICAgIC8vIG1ha2UgdXAgc29tZSBiYXNpYyBzdGF0aXN0aWNzIHNvIHdlIGNhbiBzaG93IGEgc2xpZGVyXG4gICAgICAgICAgICAgICAgc3RhdGlzdGljcy5taW4gPSAwO1xuICAgICAgICAgICAgICAgIHN0YXRpc3RpY3MubWF4ID0gMTAwO1xuICAgICAgICAgICAgICAgIHN0YXRpc3RpY3MuYXZnID0gKG1heCArIG1pbikgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWlzRGVmaW5lZChzdGF0aXN0aWNzLmF2ZykgfHxcbiAgICAgICAgICAgICAgICAhaXNEZWZpbmVkKHN0YXRpc3RpY3MubWluKSB8fFxuICAgICAgICAgICAgICAgICFpc0RlZmluZWQoc3RhdGlzdGljcy5tYXgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0aXN0aWNzU3RhdHVzID0gc3RhdHVzLkZBSUxFRDtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0aXN0aWNzID0gdmFsaWRhdGVNaW5NYXgoc3RhdGlzdGljcyk7XG4gICAgICAgICAgICBtaW4gPSBtaW4gIT09IG51bGwgJiYgbWluICE9PSB2b2lkIDAgPyBtaW4gOiBzdGF0aXN0aWNzLm1pbjtcbiAgICAgICAgICAgIG1heCA9IG1heCAhPT0gbnVsbCAmJiBtYXggIT09IHZvaWQgMCA/IG1heCA6IHN0YXRpc3RpY3MubWF4O1xuICAgICAgICAgICAgdGhpcy5zdGF0aXN0aWNzID0gc3RhdGlzdGljcztcbiAgICAgICAgICAgIHRoaXMuc3RhdGlzdGljc1N0YXR1cyA9IHN0YXR1cy5TVUNDRVNTO1xuICAgICAgICAgICAgdGhpcy5nZXRIaXN0b2dyYW0oZmllbGRJbmZvLCBub3JtYWxpemF0aW9uRmllbGQsIHN0YXRpc3RpY3MsIG1pbiwgbWF4KTtcbiAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yLXN1bW1hcnlTdGF0aXN0aWNzXCIsIGVycm9yKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGlzdGljc1N0YXR1cyA9IHN0YXR1cy5GQUlMRUQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbk1pbk1heENoYW5nZShtaW4sIG1heCkge1xuICAgICAgICBjb25zdCB7IHN0YXRpc3RpY3MgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGxheWVyKTtcbiAgICAgICAgY29uc3QgYXV0aEluZm8gPSByZW5kZXJlci5hdXRob3JpbmdJbmZvO1xuICAgICAgICBjb25zdCBmaWVsZCA9IHRoaXMuZmllbGRQb3MgPT09IDAgPyBhdXRoSW5mby5maWVsZDEgOiBhdXRoSW5mby5maWVsZDI7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6YXRpb25GaWVsZCA9IGZpZWxkLm5vcm1hbGl6YXRpb25GaWVsZDtcbiAgICAgICAgY29uc3QgZmllbGRJbmZvID0ge1xuICAgICAgICAgICAgZmllbGQ6IGZpZWxkLmZpZWxkLFxuICAgICAgICAgICAgc2ltcGxlRmllbGRUeXBlOiBzaW1wbGVGaWVsZFR5cGVzLk5VTUJFUlxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBpbmZvcyA9IHRoaXMuZmllbGRQb3MgPT09IDAgPyBhdXRoSW5mby5maWVsZDEuY2xhc3NCcmVha0luZm9zIDogYXV0aEluZm8uZmllbGQyLmNsYXNzQnJlYWtJbmZvcztcbiAgICAgICAgaW5mb3NbMF0ubWluVmFsdWUgPSBtaW47XG4gICAgICAgIGluZm9zW2luZm9zLmxlbmd0aCAtIDFdLm1heFZhbHVlID0gbWF4O1xuICAgICAgICByZXF1ZXN0V3JhcHBlcih1cGRhdGVSZWxhdGlvbnNoaXBSZW5kZXJlcigpLCB0aGlzLmZsb3dJdGVtTm9kZSkudGhlbigodXBkYXRlZFJlbmRlcmVyKSA9PiB7XG4gICAgICAgICAgICBhcHBseVJlbmRlcmVyKHVwZGF0ZWRSZW5kZXJlciwgbGF5ZXIpO1xuICAgICAgICAgICAgdXBkYXRlUmVuZGVyZXIoKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0SGlzdG9ncmFtKGZpZWxkSW5mbywgbm9ybWFsaXphdGlvbkZpZWxkLCBzdGF0aXN0aWNzLCBtaW4sIG1heCk7XG4gICAgICAgICAgICB1cGRhdGVIaXN0b2dyYW1Db2xvcnModGhpcy5jb2xvclNsaWRlciwgdGhpcy5jb2xvclNsaWRlckJhcnMsIHRoaXMuZ2V0Q2xhc3NCcmVha3NDb2xvcnMoKSwgdGhpcy5oaXN0b2dyYW0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVuZGVyZXIuYXV0aG9yaW5nSW5mby5jbGFzc2lmaWNhdGlvbk1ldGhvZCA9IFwibWFudWFsXCI7XG4gICAgICAgIHRoaXMuYXJjZ2lzU21hcnRNYXBwaW5nUmVsYXRpb25zaGlwQ29sb3JTbGlkZXJDaGFuZ2UuZW1pdCgpO1xuICAgIH1cbiAgICBwcmVwYXJlQ29sb3JTbGlkZXIoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IHsgc3RhdGlzdGljcywgaGlzdG9ncmFtLCBoaXN0b2dyYW1TdGF0dXMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIG1vZHVsZXMgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGxheWVyKTtcbiAgICAgICAgY29uc3QgYXV0aEluZm8gPSByZW5kZXJlci5hdXRob3JpbmdJbmZvO1xuICAgICAgICBjb25zdCBpbmZvcyA9IHRoaXMuZmllbGRQb3MgPT09IDAgPyBhdXRoSW5mby5maWVsZDEuY2xhc3NCcmVha0luZm9zIDogYXV0aEluZm8uZmllbGQyLmNsYXNzQnJlYWtJbmZvcztcbiAgICAgICAgaWYgKCFpbmZvcyB8fCBoaXN0b2dyYW1TdGF0dXMgPT09IHN0YXR1cy5JTl9QUk9HUkVTUykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtaW4gPSBpbmZvc1swXS5taW5WYWx1ZTtcbiAgICAgICAgbGV0IG1heCA9IGluZm9zW2luZm9zLmxlbmd0aCAtIDFdLm1heFZhbHVlO1xuICAgICAgICAoeyBtaW4sIG1heCB9ID0gdmFsaWRhdGVNaW5NYXgoeyBtaW4sIG1heCB9KSk7XG4gICAgICAgIGlmICghdGhpcy5jb2xvclNsaWRlcikge1xuICAgICAgICAgICAgY29uc3QgYnJlYWtzID0gdGhpcy5nZXRDbGFzc0JyZWFrc0NvbG9ycygpO1xuICAgICAgICAgICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICAgICAgICAgIGhpc3RvZ3JhbUNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICBiaW5zOiAoX2EgPSB0aGlzLmhpc3RvZ3JhbSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmJpbnMsXG4gICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2U6IE1hdGgucm91bmQodGhpcy5zdGF0aXN0aWNzLmF2ZyAqIDEwKSAvIDEwLFxuICAgICAgICAgICAgICAgICAgICBzdGFuZGFyZERldmlhdGlvbjogdGhpcy5zdGF0aXN0aWNzLnN0ZGRldixcbiAgICAgICAgICAgICAgICAgICAgc3RhbmRhcmREZXZpYXRpb25Db3VudDogMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWluOiBtaW4gIT09IG51bGwgJiYgbWluICE9PSB2b2lkIDAgPyBtaW4gOiB0aGlzLnN0YXRpc3RpY3MubWluLFxuICAgICAgICAgICAgICAgIG1heDogbWF4ICE9PSBudWxsICYmIG1heCAhPT0gdm9pZCAwID8gbWF4IDogdGhpcy5zdGF0aXN0aWNzLm1heCxcbiAgICAgICAgICAgICAgICBicmVha3NcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmNvbG9yU2xpZGVyQmFycyA9IFtdO1xuICAgICAgICAgICAgY29uZmlnLnByZWNpc2lvbiA9IGdldFN0b3BQcmVjaXNpb24oY29uZmlnLmJyZWFrcyk7XG4gICAgICAgICAgICBjb25maWcuaGlzdG9ncmFtQ29uZmlnLmJhckNyZWF0ZWRGdW5jdGlvbiA9XG4gICAgICAgICAgICAgICAgdGhpcy5oaXN0b2dyYW0gJiZcbiAgICAgICAgICAgICAgICAgICAgYmFyQ3JlYXRlZEZ1bmN0aW9uLmJpbmQodGhpcywgY29uZmlnLmJyZWFrcywgdGhpcy5oaXN0b2dyYW0sIHRoaXMuY29sb3JTbGlkZXJCYXJzKTtcbiAgICAgICAgICAgIHVwZGF0ZUhpc3RvZ3JhbUNvbG9ycyh0aGlzLmNvbG9yU2xpZGVyLCB0aGlzLmNvbG9yU2xpZGVyQmFycywgY29uZmlnLmJyZWFrcywgdGhpcy5oaXN0b2dyYW0pO1xuICAgICAgICAgICAgdGhpcy5jb2xvclNsaWRlciA9IG5ldyBtb2R1bGVzLkNsYXNzZWRDb2xvclNsaWRlcihjb25maWcpO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb2xvclNsaWRlckNoYW5nZUV2ZW50cygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc2xpZGVyID0gdGhpcy5jb2xvclNsaWRlcjtcbiAgICAgICAgICAgIGlmICgoKF9iID0gc2xpZGVyLnNsaWRlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnN0YXRlKSA9PT0gXCJkcmFnZ2luZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgaGlzdG9ncmFtQ29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIGJpbnM6IGhpc3RvZ3JhbSA9PT0gbnVsbCB8fCBoaXN0b2dyYW0gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGhpc3RvZ3JhbS5iaW5zLFxuICAgICAgICAgICAgICAgICAgICBhdmVyYWdlOiBNYXRoLnJvdW5kKHN0YXRpc3RpY3MuYXZnICogMTApIC8gMTAsXG4gICAgICAgICAgICAgICAgICAgIHN0YW5kYXJkRGV2aWF0aW9uOiBzdGF0aXN0aWNzLnN0ZGRldixcbiAgICAgICAgICAgICAgICAgICAgc3RhbmRhcmREZXZpYXRpb25Db3VudDogMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWluOiBtaW4gIT09IG51bGwgJiYgbWluICE9PSB2b2lkIDAgPyBtaW4gOiBzdGF0aXN0aWNzLm1pbixcbiAgICAgICAgICAgICAgICBtYXg6IG1heCAhPT0gbnVsbCAmJiBtYXggIT09IHZvaWQgMCA/IG1heCA6IHN0YXRpc3RpY3MubWF4XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uZmlnLmJyZWFrcyA9IHRoaXMuZ2V0Q2xhc3NCcmVha3NDb2xvcnMoKTtcbiAgICAgICAgICAgIGNvbmZpZy5wcmVjaXNpb24gPSBnZXRTdG9wUHJlY2lzaW9uKGNvbmZpZy5icmVha3MpO1xuICAgICAgICAgICAgY29uZmlnLmhpc3RvZ3JhbUNvbmZpZy5iYXJDcmVhdGVkRnVuY3Rpb24gPVxuICAgICAgICAgICAgICAgIGhpc3RvZ3JhbSAmJiBiYXJDcmVhdGVkRnVuY3Rpb24uYmluZCh0aGlzLCBjb25maWcuYnJlYWtzLCBoaXN0b2dyYW0sIHRoaXMuY29sb3JTbGlkZXJCYXJzKTtcbiAgICAgICAgICAgIHVwZGF0ZUhpc3RvZ3JhbUNvbG9ycyhzbGlkZXIsIHRoaXMuY29sb3JTbGlkZXJCYXJzLCBjb25maWcuYnJlYWtzLCBoaXN0b2dyYW0pO1xuICAgICAgICAgICAgdGhpcy5jb2xvclNsaWRlci5zZXQoY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNEZWZpbmVkKHRoaXMuY29sb3JTbGlkZXIpO1xuICAgIH1cbiAgICB1cGRhdGVSZW5kZXJlckJyZWFrcyhicmVha3MpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciB9ID0gc21hcnRNYXBwaW5nU3RhdGU7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gZ2V0UmVuZGVyZXIobGF5ZXIpO1xuICAgICAgICBjb25zdCBhdXRoSW5mbyA9IHJlbmRlcmVyLmF1dGhvcmluZ0luZm87XG4gICAgICAgIGNvbnN0IGZpZWxkID0gdGhpcy5maWVsZFBvcyA9PT0gMCA/IGF1dGhJbmZvLmZpZWxkMSA6IGF1dGhJbmZvLmZpZWxkMjtcbiAgICAgICAgYXV0aEluZm8uY2xhc3NpZmljYXRpb25NZXRob2QgPSBcIm1hbnVhbFwiO1xuICAgICAgICBpZiAoIWZpZWxkLmNsYXNzQnJlYWtJbmZvcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZpZWxkLmNsYXNzQnJlYWtJbmZvcy5mb3JFYWNoKChjbGFzc0JyZWFrSW5mbywgaWR4KSA9PiB7XG4gICAgICAgICAgICBpZiAoY2xhc3NCcmVha0luZm8ubWluVmFsdWUgIT09IGJyZWFrc1tpZHhdLm1pbiB8fFxuICAgICAgICAgICAgICAgIGNsYXNzQnJlYWtJbmZvLm1heFZhbHVlICE9PSBicmVha3NbaWR4XS5tYXgpIHtcbiAgICAgICAgICAgICAgICBmaWVsZC5jbGFzc0JyZWFrSW5mb3NbaWR4XS5taW5WYWx1ZSA9IGJyZWFrc1tpZHhdLm1pbjtcbiAgICAgICAgICAgICAgICBmaWVsZC5jbGFzc0JyZWFrSW5mb3NbaWR4XS5tYXhWYWx1ZSA9IGJyZWFrc1tpZHhdLm1heDtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRCcmVha1ZhbHVlc1tpZHhdLm1pbiA9IGJyZWFrc1tpZHhdLm1pbjtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRCcmVha1ZhbHVlc1tpZHhdLm1heCA9IGJyZWFrc1tpZHhdLm1heDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlcXVlc3RXcmFwcGVyKHVwZGF0ZVJlbGF0aW9uc2hpcFJlbmRlcmVyKCksIHRoaXMuZmxvd0l0ZW1Ob2RlKS50aGVuKCh1cGRhdGVkUmVuZGVyZXIpID0+IHtcbiAgICAgICAgICAgIGFwcGx5UmVuZGVyZXIodXBkYXRlZFJlbmRlcmVyLCBsYXllcik7XG4gICAgICAgICAgICB1cGRhdGVSZW5kZXJlcigpO1xuICAgICAgICAgICAgdXBkYXRlSGlzdG9ncmFtQ29sb3JzKHRoaXMuY29sb3JTbGlkZXIsIHRoaXMuY29sb3JTbGlkZXJCYXJzLCB0aGlzLmdldENsYXNzQnJlYWtzQ29sb3JzKCksIHRoaXMuaGlzdG9ncmFtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYXJjZ2lzU21hcnRNYXBwaW5nUmVsYXRpb25zaGlwQ29sb3JTbGlkZXJDaGFuZ2UuZW1pdCgpO1xuICAgIH1cbiAgICBnZXQgaG9zdEVsZW1lbnQoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG59O1xuQXJjZ2lzU21hcnRNYXBwaW5nUmVsYXRpb25zaGlwQ29sb3JTbGlkZXIuc3R5bGUgPSBhcmNnaXNTbWFydE1hcHBpbmdSZWxhdGlvbnNoaXBDb2xvclNsaWRlckNzcztcblxudmFyIElDT05TO1xuKGZ1bmN0aW9uIChJQ09OUykge1xuICAgIElDT05TW1wiZm9jdXNVcDE2XCJdID0gXCJNOCwwLjI5IEwwLjI5LDggTDgsMTUuNzEgTDE1LjcxLDggTDgsMC4yOSBaIE0xLjcxLDggTDUuOTMsMy43OCBMOCw1Ljg1IEwxMC4wNywzLjc4IEwxNC4yOSw4IEw4LDE0LjI5IEwxLjcxLDggWlwiO1xuICAgIElDT05TW1wiZm9jdXNSaWdodDE2XCJdID0gXCJNOCwwLjI5IEwwLjI5LDggTDgsMTUuNzEgTDE1LjcxLDggTDgsMC4yOSBaIE0xLjcxLDggTDgsMS43MSBMMTIuMjIsNS45MyBMMTAuMTUsOCBMMTIuMjIsMTAuMDcgTDgsMTQuMjkgTDEuNzEsOCBaXCI7XG4gICAgSUNPTlNbXCJmb2N1c0xlZnQxNlwiXSA9IFwiTTgsMC4yOSBMMC4yOSw4IEw4LDE1LjcxIEwxNS43MSw4IEw4LDAuMjkgWiBNMy43OCwxMC4wNyBMNS44NSw4IEwzLjc4LDUuOTMgTDgsMS43MSBMMTQuMjksOCBMOCwxNC4yOSBMMy43OCwxMC4wNyBaXCI7XG4gICAgSUNPTlNbXCJmb2N1c0Rvd24xNlwiXSA9IFwiTTgsMC4yOSBMMC4yOSw4IEw4LDE1LjcxIEwxNS43MSw4IEw4LDAuMjkgWiBNOCwxLjcxIEwxNC4yOSw4IEwxMC4wNywxMi4yMiBMOCwxMC4xNSBMNS45MywxMi4yMiBMMS43MSw4IEw4LDEuNzEgWlwiO1xuICAgIElDT05TW1wiY29kZTE2XCJdID0gXCJNNi44NjUgMTMuOTY1bC0uOTU3LS4yOSAzLjIxMy0xMC42Mi45NTcuMjl6TTE1LjE5IDguNDVsLTMuODM3LTMuODA1LS43MDQuNzEgMy4xMzEgMy4xMDQtMy4xMzUgMy4xOS43MTIuNzAyem0tOS44MzMgMy4yTDIuMjIxIDguNDU4bDMuMTMtMy4xMDQtLjcwMy0uNzFMLjgxMSA4LjQ1bDMuODMzIDMuOXpcIjtcbiAgICBJQ09OU1tcImZpZWxkczE2XCJdID0gXCJNMTAuNTc4IDFBMi40MjUgMi40MjUgMCAwIDEgMTMgMy40MjJWNmMwIC41NTIuNDQ4IDEgMSAxdjFjLS41NTIgMC0xIC40NDgtMSAxdjIuNTc4QTIuNDI1IDIuNDI1IDAgMCAxIDEwLjU3OCAxNEgxMHYtMWguNTc4Yy43ODUgMCAxLjQyMS0uNjM3IDEuNDIyLTEuNDIyVjljMC0uNTc0LjI0Ny0xLjEyMS42NzktMS41QTEuOTk1IDEuOTk1IDAgMCAxIDEyIDZWMy40MjJjMC0uNzg1LS42MzctMS40MjEtMS40MjItMS40MjJIMTBWMWguNTc4ek02IDF2MWgtLjU3OEM0LjYzNyAyIDQuMDAxIDIuNjM3IDQgMy40MjJWNmMwIC41NzQtLjI0NyAxLjEyMS0uNjc5IDEuNS40MzIuMzc5LjY4LjkyNi42NzkgMS41djIuNTc4YzAgLjc4NS42MzcgMS40MjEgMS40MjIgMS40MjJINnYxaC0uNTc4QTIuNDI1IDIuNDI1IDAgMCAxIDMgMTEuNTc4VjljMC0uNTUyLS40NDgtMS0xLTFWN2MuNTUyIDAgMS0uNDQ4IDEtMVYzLjQyMkEyLjQyNSAyLjQyNSAwIDAgMSA1LjQyMiAxSDZ6XCI7XG59KShJQ09OUyB8fCAoSUNPTlMgPSB7fSkpO1xuXG5jb25zdCBhcmNnaXNTbWFydE1hcHBpbmdSZWxhdGlvbnNoaXBMZWdlbmRDc3MgPSBcIi5hdHRyaWJ1dGV7ZGlzcGxheTpmbGV4O3BhZGRpbmctYm90dG9tOjZweH0uYXR0cmlidXRlc3ttYXJnaW46MTJweCAwfS5hdHRyaWJ1dGUtbmFtZXtwYWRkaW5nOjAgMTBweDt3aWR0aDpjYWxjKDEwMCUgLSA0NXB4KTt3b3JkLWJyZWFrOmJyZWFrLWFsbH0uYXR0cmlidXRlLWNvbG9yLWljb257d2lkdGg6NDVweDtoZWlnaHQ6MTZweDtvdmVyZmxvdzpoaWRkZW47Ym9yZGVyLXJhZGl1czozcHg7ZGlzcGxheTpmbGV4O2FsaWduLXNlbGY6Y2VudGVyfS5hdHRyaWJ1dGUtY29sb3ItaWNvbi1zZWxlY3Rpb257aGVpZ2h0OjE2cHg7ZGlzcGxheTppbmxpbmUtYmxvY2t9LmxhYmVse2Rpc3BsYXk6ZmxleDtwYWRkaW5nOjZweCAwO2FsaWduLWl0ZW1zOmNlbnRlcn0ubGFiZWwgZGl2e2Rpc3BsYXk6ZmxleH0ubGFiZWwtaWNvbntjb2xvcjpyZ2JhKDUwLCA1MCwgNTAsIDAuNCk7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2N1cnNvcjpkZWZhdWx0fS5sYWJlbC1pY29uIC5yb3RhdGUtNDV7dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyl9XCI7XG5cbmNvbnN0IEFyY2dpc1NtYXJ0TWFwcGluZ1JlbGF0aW9uc2hpcExlZ2VuZCA9IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgICAgIHRoaXMuYXJjZ2lzU21hcnRNYXBwaW5nUmVsYXRpb25zaGlwTGVnZW5kRm9jdXNDaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImFyY2dpc1NtYXJ0TWFwcGluZ1JlbGF0aW9uc2hpcExlZ2VuZEZvY3VzQ2hhbmdlXCIsIDcpO1xuICAgICAgICB0aGlzLmFyY2dpc1NtYXJ0TWFwcGluZ1JlbGF0aW9uc2hpcExlZ2VuZEVycm9yID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNTbWFydE1hcHBpbmdSZWxhdGlvbnNoaXBMZWdlbmRFcnJvclwiLCA3KTtcbiAgICAgICAgdGhpcy52YWx1ZVRleHROb2RlcyA9IFtdO1xuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgTGlmZWN5Y2xlIE1ldGhvZHNcbiAgICAvL1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICAgICAgdGhpcy5mbG93SXRlbU5vZGUgPSBmaW5kUGFyZW50Tm9kZSh0aGlzLmhvc3RFbGVtZW50LCBcImNhbGNpdGUtZmxvdy1pdGVtXCIpO1xuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgUmVuZGVyIE1ldGhvZHNcbiAgICAvL1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgc3RyaW5ncyB9ID0gc21hcnRNYXBwaW5nU3RhdGU7XG4gICAgICAgIHJldHVybiAoaChcImNhbGNpdGUtYmxvY2tcIiwgeyBvcGVuOiB0cnVlLCBoZWFkaW5nOiBzdHJpbmdzLnJlbGF0aW9uc2hpcExlZ2VuZC5sZWdlbmQsIGNvbGxhcHNpYmxlOiB0cnVlIH0sIHRoaXMucmVuZGVyQ29udGVudCgpKSk7XG4gICAgfVxuICAgIHJlbmRlckNvbnRlbnQoKSB7XG4gICAgICAgIHJldHVybiAoaChcImRpdlwiLCBudWxsLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiYXR0cmlidXRlc1wiIH0sIHRoaXMucmVuZGVyQXR0cmlidXRlKDApLCB0aGlzLnJlbmRlckF0dHJpYnV0ZSgxKSksIHRoaXMucmVuZGVyRm9jdXMoKSwgdGhpcy5yZW5kZXJMYWJlbHMoKSkpO1xuICAgIH1cbiAgICByZW5kZXJBdHRyaWJ1dGUocG9zKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGxheWVyKTtcbiAgICAgICAgY29uc3QgYXV0aEluZm8gPSByZW5kZXJlci5hdXRob3JpbmdJbmZvO1xuICAgICAgICBjb25zdCBhdXRoRmllbGQgPSBwb3MgPT09IDAgPyBhdXRoSW5mby5maWVsZDEgOiBhdXRoSW5mby5maWVsZDI7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0RmllbGQoYXV0aEZpZWxkLmZpZWxkKTtcbiAgICAgICAgbGV0IGNvbG9yT3JkZXIgPSB0aGlzLmdldENvbG9yT3JkZXIocG9zKTtcbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiYXR0cmlidXRlXCIgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImF0dHJpYnV0ZS1jb2xvci1pY29uXCIsIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIgfSwgY29sb3JPcmRlci5tYXAoKF8sIGlkeCkgPT4gdGhpcy5nZXRTd2F0Y2goY29sb3JPcmRlcltpZHhdKSkpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiYXR0cmlidXRlLW5hbWVcIiB9LCBmaWVsZC5sYWJlbCkpKTtcbiAgICB9XG4gICAgcmVuZGVyRm9jdXMoKSB7XG4gICAgICAgIHJldHVybiAoaChcImFyY2dpcy1zbWFydC1tYXBwaW5nLXJlbGF0aW9uc2hpcC1mb2N1cy1idXR0b25cIiwgeyBmbG93SXRlbU5vZGU6IHRoaXMuZmxvd0l0ZW1Ob2RlLCBvbkFyY2dpc1NtYXJ0TWFwcGluZ1JlbGF0aW9uc2hpcEZvY3VzQnV0dG9uQmVmb3JlT3BlbjogKCkgPT4gY2xvc2VQb3BvdmVycygpLCBvbkFyY2dpc1NtYXJ0TWFwcGluZ1JlbGF0aW9uc2hpcEZvY3VzQnV0dG9uQ2hhbmdlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcmNnaXNTbWFydE1hcHBpbmdSZWxhdGlvbnNoaXBMZWdlbmRGb2N1c0NoYW5nZS5lbWl0KCk7XG4gICAgICAgICAgICAgICAgZm9yY2VVcGRhdGUodGhpcy5ob3N0RWxlbWVudCk7XG4gICAgICAgICAgICB9LCBvbkFyY2dpc1NtYXJ0TWFwcGluZ1JlbGF0aW9uc2hpcEZvY3VzQnV0dG9uRXJyb3I6ICh7IGRldGFpbCB9KSA9PiB0aGlzLmFyY2dpc1NtYXJ0TWFwcGluZ1JlbGF0aW9uc2hpcExlZ2VuZEVycm9yLmVtaXQoZGV0YWlsKSB9KSk7XG4gICAgfVxuICAgIHJlbmRlckxhYmVscygpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciwgc3RyaW5ncyB9ID0gc21hcnRNYXBwaW5nU3RhdGU7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gZ2V0UmVuZGVyZXIobGF5ZXIpO1xuICAgICAgICBjb25zdCBhdXRoSW5mbyA9IHJlbmRlcmVyLmF1dGhvcmluZ0luZm87XG4gICAgICAgIGNvbnN0IG5jID0gYXV0aEluZm8ubnVtQ2xhc3NlcztcbiAgICAgICAgcmV0dXJuIChoKFwiY2FsY2l0ZS1sYWJlbFwiLCBudWxsLCBzdHJpbmdzLnJlbGF0aW9uc2hpcExlZ2VuZC5sYWJlbHMsIGgoXCJjYWxjaXRlLWxpc3RcIiwgbnVsbCwgdGhpcy5yZW5kZXJMYWJlbCgwKSwgdGhpcy5yZW5kZXJMYWJlbChuYyAtIDEpLCB0aGlzLnJlbmRlckxhYmVsKG5jICogbmMgLSBuYyksIHRoaXMucmVuZGVyTGFiZWwobmMgKiBuYyAtIDEpKSkpO1xuICAgIH1cbiAgICByZW5kZXJMYWJlbChpZHgpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciB9ID0gc21hcnRNYXBwaW5nU3RhdGU7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gZ2V0UmVuZGVyZXIobGF5ZXIpO1xuICAgICAgICBjb25zdCBhdXRoSW5mbyA9IHJlbmRlcmVyLmF1dGhvcmluZ0luZm87XG4gICAgICAgIGNvbnN0IG5jID0gYXV0aEluZm8ubnVtQ2xhc3NlcztcbiAgICAgICAgY29uc3QgZm8gPSBhdXRoSW5mby5mb2N1cztcbiAgICAgICAgY29uc3QgaWNvbk5hbWUgPSBpZHggPT09IDBcbiAgICAgICAgICAgID8gSUNPTlMuZm9jdXNVcDE2XG4gICAgICAgICAgICA6IGlkeCA9PT0gKGZvID09PSBcIkxIXCIgfHwgZm8gPT09IFwiSExcIiA/IG5jICogbmMgLSBuYyA6IG5jIC0gMSlcbiAgICAgICAgICAgICAgICA/IElDT05TLmZvY3VzTGVmdDE2XG4gICAgICAgICAgICAgICAgOiBpZHggPT09IChmbyA9PT0gXCJMSFwiIHx8IGZvID09PSBcIkhMXCIgPyBuYyAtIDEgOiBuYyAqIG5jIC0gbmMpXG4gICAgICAgICAgICAgICAgICAgID8gSUNPTlMuZm9jdXNSaWdodDE2XG4gICAgICAgICAgICAgICAgICAgIDogSUNPTlMuZm9jdXNEb3duMTY7XG4gICAgICAgIHJldHVybiAoaChcImNhbGNpdGUtbGlzdC1pdGVtXCIsIG51bGwsIHRoaXMucmVuZGVySWNvbk5vZGUoaWNvbk5hbWUpLCB0aGlzLnJlbmRlclRleHROb2RlKGlkeCkpKTtcbiAgICB9XG4gICAgcmVuZGVySWNvbk5vZGUoaWNvbk5hbWUpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciB9ID0gc21hcnRNYXBwaW5nU3RhdGU7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gZ2V0UmVuZGVyZXIobGF5ZXIpO1xuICAgICAgICBjb25zdCBhdXRoSW5mbyA9IHJlbmRlcmVyLmF1dGhvcmluZ0luZm87XG4gICAgICAgIGNvbnN0IGlzTm9uZSA9ICFhdXRoSW5mby5mb2N1cztcbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgc2xvdDogXCJhY3Rpb25zLXN0YXJ0XCIsIGNsYXNzOiBcImxhYmVsLWljb25cIiB9LCBoKFwic3ZnXCIsIHsgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgdmlld0JveDogXCIwIDAgMTYgMTZcIiwgd2lkdGg6IFwiMTZcIiwgaGVpZ2h0OiBcIjE2XCIsIGNsYXNzOiBgJHtpc05vbmUgPyBcInJvdGF0ZS00NVwiIDogXCJcIn1gIH0sIGgoXCJwYXRoXCIsIHsgZDogaWNvbk5hbWUgfSkpKSk7XG4gICAgfVxuICAgIHJlbmRlclRleHROb2RlKGlkeCkge1xuICAgICAgICBjb25zdCB7IGxheWVyLCBzdHJpbmdzIH0gPSBzbWFydE1hcHBpbmdTdGF0ZTtcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBnZXRSZW5kZXJlcihsYXllcik7XG4gICAgICAgIGNvbnN0IGF1dGhJbmZvID0gcmVuZGVyZXIuYXV0aG9yaW5nSW5mbztcbiAgICAgICAgY29uc3QgbmMgPSBhdXRoSW5mby5udW1DbGFzc2VzO1xuICAgICAgICBjb25zdCBmbyA9IGF1dGhJbmZvLmZvY3VzO1xuICAgICAgICBjb25zdCBpbmZvcyA9IHJlbmRlcmVyLnVuaXF1ZVZhbHVlSW5mb3M7XG4gICAgICAgIGNvbnN0IGluZm8gPSBpbmZvc1tpZHhdO1xuICAgICAgICBjb25zdCBhcmlhTGFiZWwgPSBpZHggPT09IDBcbiAgICAgICAgICAgID8gc3RyaW5ncy5yZWxhdGlvbnNoaXBMZWdlbmQuYWNjZXNzaWJpbGl0eS5lZGl0TGFiZWxGb3JUb3BcbiAgICAgICAgICAgIDogaWR4ID09PSAoZm8gPT09IFwiTEhcIiB8fCBmbyA9PT0gXCJITFwiID8gbmMgKiBuYyAtIG5jIDogbmMgLSAxKVxuICAgICAgICAgICAgICAgID8gc3RyaW5ncy5yZWxhdGlvbnNoaXBMZWdlbmQuYWNjZXNzaWJpbGl0eS5lZGl0TGFiZWxGb3JMZWZ0XG4gICAgICAgICAgICAgICAgOiBpZHggPT09IChmbyA9PT0gXCJMSFwiIHx8IGZvID09PSBcIkhMXCIgPyBuYyAtIDEgOiBuYyAqIG5jIC0gbmMpXG4gICAgICAgICAgICAgICAgICAgID8gc3RyaW5ncy5yZWxhdGlvbnNoaXBMZWdlbmQuYWNjZXNzaWJpbGl0eS5lZGl0TGFiZWxGb3JSaWdodFxuICAgICAgICAgICAgICAgICAgICA6IHN0cmluZ3MucmVsYXRpb25zaGlwTGVnZW5kLmFjY2Vzc2liaWxpdHkuZWRpdExhYmVsRm9yQm90dG9tO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZExhYmVsVGV4dCA9PT0gaWR4KSB7XG4gICAgICAgICAgICByZXR1cm4gKGgoXCJjYWxjaXRlLWlucHV0XCIsIHsgc2xvdDogXCJjb250ZW50XCIsIHNjYWxlOiBcInNcIiwgdmFsdWU6IGluZm8ubGFiZWwsIG9uRm9jdXNvdXQ6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUxhYmVsVGV4dENoYW5nZShpZHgsIG5vZGUudmFsdWUpO1xuICAgICAgICAgICAgICAgIH0sIG9uS2V5VXA6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiIHx8IGV2ZW50LmtleSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVMYWJlbFRleHRDaGFuZ2UoaWR4LCBub2RlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHJlZjogKG5vZGUpID0+IG5vZGUgPT09IG51bGwgfHwgbm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm9kZS5zZXRGb2N1cygpIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImxhYmVsXCIsIHNsb3Q6IFwiY29udGVudFwiLCB0YWJJbmRleDogMCwgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCwgb25DbGljazogKCkgPT4gdGhpcy5oYW5kbGVMYWJlbFRleHRDbGljayhpZHgpLCBvbktleVVwOiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gXCIgXCIgfHwgZXZlbnQua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlTGFiZWxUZXh0Q2xpY2soaWR4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHJlZjogKG5vZGUpID0+ICh0aGlzLnZhbHVlVGV4dE5vZGVzW2lkeF0gPSBub2RlKSB9LCBpbmZvLmxhYmVsKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gIFByaXZhdGUgTWV0aG9kc1xuICAgIC8vXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGdldENvbG9yT3JkZXIocG9zKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGxheWVyKTtcbiAgICAgICAgY29uc3QgYXV0aEluZm8gPSByZW5kZXJlci5hdXRob3JpbmdJbmZvIHx8IHt9O1xuICAgICAgICBsZXQgY29sb3JPcmRlciA9IFtdO1xuICAgICAgICBpZiAoYXV0aEluZm8ubnVtQ2xhc3NlcyA9PT0gMikge1xuICAgICAgICAgICAgc3dpdGNoIChhdXRoSW5mby5mb2N1cykge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJISFwiOlxuICAgICAgICAgICAgICAgICAgICBjb2xvck9yZGVyID0gcG9zID09PSAwID8gWzMsIDFdIDogWzMsIDJdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiSExcIjpcbiAgICAgICAgICAgICAgICAgICAgY29sb3JPcmRlciA9IHBvcyA9PT0gMCA/IFsyLCAwXSA6IFsyLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIkxIXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yT3JkZXIgPSBwb3MgPT09IDAgPyBbMSwgM10gOiBbMSwgMF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJMTFwiOlxuICAgICAgICAgICAgICAgICAgICBjb2xvck9yZGVyID0gcG9zID09PSAwID8gWzAsIDJdIDogWzAsIDFdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBjb2xvck9yZGVyID0gcG9zID09PSAwID8gWzMsIDFdIDogWzMsIDJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGF1dGhJbmZvLm51bUNsYXNzZXMgPT09IDMpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoYXV0aEluZm8uZm9jdXMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiSEhcIjpcbiAgICAgICAgICAgICAgICAgICAgY29sb3JPcmRlciA9IHBvcyA9PT0gMCA/IFs4LCA1LCAyXSA6IFs4LCA3LCA2XTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIkhMXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yT3JkZXIgPSBwb3MgPT09IDAgPyBbNiwgMywgMF0gOiBbNiwgNywgOF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJMSFwiOlxuICAgICAgICAgICAgICAgICAgICBjb2xvck9yZGVyID0gcG9zID09PSAwID8gWzIsIDUsIDhdIDogWzIsIDEsIDBdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiTExcIjpcbiAgICAgICAgICAgICAgICAgICAgY29sb3JPcmRlciA9IHBvcyA9PT0gMCA/IFswLCAzLCA2XSA6IFswLCAxLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgY29sb3JPcmRlciA9IHBvcyA9PT0gMCA/IFs4LCA1LCAyXSA6IFs4LCA3LCA2XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIDRcbiAgICAgICAgICAgIHN3aXRjaCAoYXV0aEluZm8uZm9jdXMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiSEhcIjpcbiAgICAgICAgICAgICAgICAgICAgY29sb3JPcmRlciA9IHBvcyA9PT0gMCA/IFsxNSwgMTEsIDcsIDNdIDogWzE1LCAxNCwgMTMsIDEyXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIkhMXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yT3JkZXIgPSBwb3MgPT09IDAgPyBbMTIsIDgsIDQsIDBdIDogWzEyLCAxMywgMTQsIDE1XTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIkxIXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yT3JkZXIgPSBwb3MgPT09IDAgPyBbMywgNywgMTEsIDE1XSA6IFszLCAyLCAxLCAwXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIkxMXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yT3JkZXIgPSBwb3MgPT09IDAgPyBbMCwgNCwgOCwgMTJdIDogWzAsIDEsIDIsIDNdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBjb2xvck9yZGVyID0gcG9zID09PSAwID8gWzE1LCAxMSwgNywgM10gOiBbMTUsIDE0LCAxMywgMTJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xvck9yZGVyO1xuICAgIH1cbiAgICBnZXRTd2F0Y2goaWR4KSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGxheWVyKTtcbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiYXR0cmlidXRlLWNvbG9yLWljb24tc2VsZWN0aW9uXCIsIHJlZjogKG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2xvciA9IGdldFN5bWJvbENvbG9yKHJlbmRlcmVyLnVuaXF1ZVZhbHVlSW5mb3NbaWR4XS5zeW1ib2wpO1xuICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLndpZHRoID0gYCR7MTAwIC8gcmVuZGVyZXIuYXV0aG9yaW5nSW5mby5udW1DbGFzc2VzfXB4YDtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAoY29sb3IgPT09IG51bGwgfHwgY29sb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbG9yLnRvSGV4KCkpIHx8IFwiI2ZmZmZmZlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gfSkpO1xuICAgIH1cbiAgICBoYW5kbGVMYWJlbFRleHRDbGljayhpZHgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZExhYmVsVGV4dCA9IGlkeDtcbiAgICAgICAgZm9yY2VVcGRhdGUodGhpcy5ob3N0RWxlbWVudCk7XG4gICAgfVxuICAgIGhhbmRsZUxhYmVsVGV4dENoYW5nZShpZHgsIGxhYmVsKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGxheWVyKTtcbiAgICAgICAgcmVuZGVyZXIudW5pcXVlVmFsdWVHcm91cHNbMF0uY2xhc3Nlc1tpZHhdLmxhYmVsID0gbGFiZWw7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRMYWJlbFRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHVwZGF0ZVJlbmRlcmVyKCk7XG4gICAgICAgIGZvcmNlVXBkYXRlKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgdmFyIF9hOyByZXR1cm4gKF9hID0gdGhpcy52YWx1ZVRleHROb2Rlc1tpZHhdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9jdXMoKTsgfSwgMzAwKTtcbiAgICB9XG4gICAgZ2V0IGhvc3RFbGVtZW50KCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbkFyY2dpc1NtYXJ0TWFwcGluZ1JlbGF0aW9uc2hpcExlZ2VuZC5zdHlsZSA9IGFyY2dpc1NtYXJ0TWFwcGluZ1JlbGF0aW9uc2hpcExlZ2VuZENzcztcblxuZXhwb3J0IHsgQXJjZ2lzU21hcnRNYXBwaW5nUGFuZWxzUmVsYXRpb25zaGlwIGFzIGFyY2dpc19zbWFydF9tYXBwaW5nX3BhbmVsc19yZWxhdGlvbnNoaXAsIEFyY2dpc1NtYXJ0TWFwcGluZ1JlbGF0aW9uc2hpcENvbG9yU2xpZGVyIGFzIGFyY2dpc19zbWFydF9tYXBwaW5nX3JlbGF0aW9uc2hpcF9jb2xvcl9zbGlkZXIsIEFyY2dpc1NtYXJ0TWFwcGluZ1JlbGF0aW9uc2hpcExlZ2VuZCBhcyBhcmNnaXNfc21hcnRfbWFwcGluZ19yZWxhdGlvbnNoaXBfbGVnZW5kIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyY2dpcy1zbWFydC1tYXBwaW5nLXBhbmVscy1yZWxhdGlvbnNoaXBfMy5lbnRyeS5qcy5tYXAiLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2NC4wLjU4XG4gKi9cbmxldCBfbG9hZGluZ1RpbWVyO1xubGV0IF9yZXF1ZXN0Q2FuY2VsbGVkO1xuZnVuY3Rpb24gc3RhcnRMb2FkaW5nKG5vZGUpIHtcbiAgICBub2RlLmxvYWRpbmcgPSB0cnVlO1xuICAgIF9yZXF1ZXN0Q2FuY2VsbGVkID0gZmFsc2U7XG4gICAgaWYgKF9sb2FkaW5nVGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KF9sb2FkaW5nVGltZXIpO1xuICAgIH1cbiAgICBfbG9hZGluZ1RpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIC8vIHRvb2sgdG9vIGxvbmdcbiAgICAgICAgZW5kTG9hZGluZyhub2RlKTtcbiAgICAgICAgX3JlcXVlc3RDYW5jZWxsZWQgPSB0cnVlO1xuICAgIH0sIDYwMDAwKTtcbn1cbmZ1bmN0aW9uIGVuZExvYWRpbmcobm9kZSkge1xuICAgIG5vZGUubG9hZGluZyA9IGZhbHNlO1xufVxuZnVuY3Rpb24gcmVxdWVzdFdyYXBwZXIocmVxdWVzdCwgbm9kZSkge1xuICAgIHN0YXJ0TG9hZGluZyhub2RlKTtcbiAgICByZXR1cm4gcmVxdWVzdFxuICAgICAgICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIGVuZExvYWRpbmcobm9kZSk7XG4gICAgICAgIGlmICghX3JlcXVlc3RDYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJ0aW1lb3V0XCIpKTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgZW5kTG9hZGluZyhub2RlKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IHsgcmVxdWVzdFdyYXBwZXIgYXMgciB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2FkaW5nLTY5MTM5OTA3LmpzLm1hcCIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHY0LjAuNThcbiAqL1xuaW1wb3J0IHsgaCBhcyBnZXRSZW5kZXJlciwgZyBhcyBnZXRSZW5kZXJlclR5cGUsIGEgYXMgZ2V0VmlzVmFyLCBSIGFzIGlzRW1wdHksIGEwIGFzIGZpbmRSZWxhdGlvbnNoaXBTY2hlbWUsIG0gYXMgc2F2ZUV4dHJhVmlzVmFycywgbCBhcyBhcHBseUV4dHJhVmlzVmFycywgciBhcyBhcHBseVN5bWJvbENvbG9yLCB0IGFzIGdldFN5bWJvbENvbG9yLCBzIGFzIHNtYXJ0TWFwcGluZ1N0YXRlLCBuIGFzIGdldFZpc1ZhcnNFeGNlcHQsIG8gYXMgZ2V0QXV0aFZpc1ZhcnNFeGNlcHQsIHEgYXMgaXNQb2x5Z29uVHlwZSwgUyBhcyBnZXREZWZhdWx0U3ltYm9sLCB3IGFzIHNpbXBsZUZpZWxkVHlwZXMgfSBmcm9tICcuL3Jhc3Rlci11bmlxdWUtdmFsdWUtMDk3NmVjN2YuanMnO1xuaW1wb3J0ICcuL2xvYWRNb2R1bGVzLWI0YWMxMjQ3LmpzJztcbmltcG9ydCB7IGkgYXMgaXNEZWZpbmVkIH0gZnJvbSAnLi9jb21tb25GdW5jdGlvbnMtYjA4MzBlOWUuanMnO1xuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIGxheWVyIHdpdGggYSBDb2xvciByZW5kZXJlciB3aXRoIGRlZmF1bHQgc2V0dGluZ3NcbiAqIEBwYXJhbSBvcHRpb25zOiBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJlbGF0aW9uc2hpcFJlbmRlcmVyKG9wdGlvbnMpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IHsgbGF5ZXI6IHNtTGF5ZXIsIG1hcEltYWdlU3VibGF5ZXIsIG1hcFZpZXcsIG1vZHVsZXMgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgIGNvbnN0IGxheWVyID0gc21MYXllcjtcbiAgICBjb25zdCByZW5kZXJlclR5cGUgPSBnZXRSZW5kZXJlclR5cGUoKTtcbiAgICBsZXQgcmVsYXRpb25zaGlwU2NoZW1lID0gb3B0aW9ucy5yZWxhdGlvbnNoaXBTY2hlbWU7XG4gICAgaWYgKCFyZWxhdGlvbnNoaXBTY2hlbWUgJiYgW1wicmVsYXRpb25zaGlwXCIsIFwicmVsYXRpb25zaGlwLXNpemVcIl0uaW5kZXhPZihyZW5kZXJlclR5cGUpID4gLTEpIHtcbiAgICAgICAgcmVsYXRpb25zaGlwU2NoZW1lID0gZmluZFJlbGF0aW9uc2hpcFNjaGVtZSgpO1xuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBpZiAocmVuZGVyZXJUeXBlID09PSBcInJlbGF0aW9uc2hpcC1zaXplXCIpIHtcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBnZXRSZW5kZXJlcihsYXllcikuY2xvbmUoKTtcbiAgICAgICAgY29uc3QgYXV0aEluZm8gPSByZW5kZXJlci5hdXRob3JpbmdJbmZvO1xuICAgICAgICBpZiAoYXV0aEluZm8gJiZcbiAgICAgICAgICAgICgoX2EgPSBvcHRpb25zLmZpZWxkSW5mb3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpID4gMSAmJlxuICAgICAgICAgICAgb3B0aW9ucy5maWVsZEluZm9zWzBdLmZpZWxkID09IGF1dGhJbmZvLmZpZWxkMS5maWVsZCAmJlxuICAgICAgICAgICAgb3B0aW9ucy5maWVsZEluZm9zWzFdLmZpZWxkID09IGF1dGhJbmZvLmZpZWxkMi5maWVsZCkge1xuICAgICAgICAgICAgLy8gcmUtdXNlIHJlbGF0aW9uc2hpcCByZW5kZXJlcjsgcmVtb3ZlIHNpemVcbiAgICAgICAgICAgIHJlbmRlcmVyLnZpc3VhbFZhcmlhYmxlcyA9IGdldFZpc1ZhcnNFeGNlcHQocmVuZGVyZXIsIFwic2l6ZVwiKTtcbiAgICAgICAgICAgIHJlbmRlcmVyLmF1dGhvcmluZ0luZm8udmlzdWFsVmFyaWFibGVzID0gZ2V0QXV0aFZpc1ZhcnNFeGNlcHQocmVuZGVyZXIsIFwic2l6ZVwiKTtcbiAgICAgICAgICAgIGlmIChpc1BvbHlnb25UeXBlKGxheWVyKSkge1xuICAgICAgICAgICAgICAgIC8vIHN3aXRjaCBtYXJrZXJzIHRvIHBvbHlnb25zXG4gICAgICAgICAgICAgICAgY29uc3QgcG9seWdvblN5bWJvbCA9IGdldERlZmF1bHRTeW1ib2wobGF5ZXIsIG1hcFZpZXcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZm9zID0gcmVuZGVyZXIudW5pcXVlVmFsdWVJbmZvcy5zbGljZSgpO1xuICAgICAgICAgICAgICAgIGluZm9zLm1hcCgodmFsdWVJbmZvKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gZ2V0U3ltYm9sQ29sb3IodmFsdWVJbmZvLnN5bWJvbCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlSW5mby5zeW1ib2wgPSBwb2x5Z29uU3ltYm9sLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgIGFwcGx5U3ltYm9sQ29sb3IodmFsdWVJbmZvLnN5bWJvbCwgY29sb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJlbmRlcmVyLnVuaXF1ZVZhbHVlSW5mb3MgPSBpbmZvcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyByZW5kZXJlciB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBleHRyYXMgPSBzYXZlRXh0cmFWaXNWYXJzKGdldFJlbmRlcmVyKGxheWVyKSk7XG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICBsYXllcixcbiAgICAgICAgdmlldzogbWFwVmlldyxcbiAgICAgICAgZmllbGQxOiB7IGZpZWxkOiBvcHRpb25zLmZpZWxkSW5mb3NbMF0uZmllbGQgfSxcbiAgICAgICAgZmllbGQyOiB7IGZpZWxkOiBvcHRpb25zLmZpZWxkSW5mb3NbMV0uZmllbGQgfSxcbiAgICAgICAgY2xhc3NpZmljYXRpb25NZXRob2Q6IFwicXVhbnRpbGVcIixcbiAgICAgICAgbnVtQ2xhc3NlczogMyxcbiAgICAgICAgZm9jdXM6IFwiSEhcIixcbiAgICAgICAgcmVsYXRpb25zaGlwU2NoZW1lLFxuICAgICAgICBvdXRsaW5lT3B0aW1pemF0aW9uRW5hYmxlZDogbWFwSW1hZ2VTdWJsYXllclxuICAgICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgICAgOiBpc0RlZmluZWQob3B0aW9ucy5vdXRsaW5lT3B0aW1pemF0aW9uRW5hYmxlZClcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMub3V0bGluZU9wdGltaXphdGlvbkVuYWJsZWRcbiAgICAgICAgICAgICAgICA6IHRydWUsXG4gICAgICAgIHNpemVPcHRpbWl6YXRpb25FbmFibGVkOiBtYXBJbWFnZVN1YmxheWVyXG4gICAgICAgICAgICA/IGZhbHNlXG4gICAgICAgICAgICA6IGlzRGVmaW5lZChvcHRpb25zLnNpemVPcHRpbWl6YXRpb25FbmFibGVkKVxuICAgICAgICAgICAgICAgID8gb3B0aW9ucy5zaXplT3B0aW1pemF0aW9uRW5hYmxlZFxuICAgICAgICAgICAgICAgIDogdHJ1ZSxcbiAgICAgICAgbGVnZW5kT3B0aW9uczogb3B0aW9ucy5sZWdlbmRPcHRpb25zLFxuICAgICAgICBkZWZhdWx0U3ltYm9sRW5hYmxlZDogZmFsc2UsXG4gICAgICAgIGZvckJpbm5pbmc6ICgoX2IgPSBsYXllci5mZWF0dXJlUmVkdWN0aW9uKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudHlwZSkgPT09IFwiYmlubmluZ1wiXG4gICAgfTtcbiAgICAvL2NvbnNvbGUubG9nKFwiY3JlYXRlUmVsYXRpb25zaGlwUmVuZGVyZXJcIiwgY29uZmlnKTtcbiAgICByZXR1cm4gbW9kdWxlcy5SZWxhdGlvbnNoaXBDcmVhdG9yLmNyZWF0ZVJlbmRlcmVyKGNvbmZpZykudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJjcmVhdGVSZWxhdGlvbnNoaXBSZW5kZXJlci1zdWNjZXNzXCIsIHJlc3VsdCk7XG4gICAgICAgIGFwcGx5RXh0cmFWaXNWYXJzKGV4dHJhcywgcmVzdWx0LnJlbmRlcmVyKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgIH0sIChlcnJvcikgPT4gUHJvbWlzZS5yZWplY3QoZXJyb3IpKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFJlbGF0aW9uc2hpcCByZW5kZXJlciB3aXRoIHNldHRpbmdzIGZyb20gY3VycmVudCByZW5kZXJlclxuICovXG5mdW5jdGlvbiBjcmVhdGVSZWxhdGlvbnNoaXBSZW5kZXJlckZyb21FeGlzdGluZyhvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHsgbGF5ZXI6IHNtTGF5ZXIsIG1hcEltYWdlU3VibGF5ZXIsIG1hcFZpZXcsIG1vZHVsZXMgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgIGNvbnN0IGxheWVyID0gc21MYXllcjtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGxheWVyKTtcbiAgICBjb25zdCByZW5kZXJlclR5cGUgPSBnZXRSZW5kZXJlclR5cGUoKTtcbiAgICBjb25zdCBhdXRoSW5mbyA9IHJlbmRlcmVyLmF1dGhvcmluZ0luZm87XG4gICAgLy8gYXJlIHdlIGNvbWluZyBmcm9tIGEgcmVsYXRpb25zaGlwLXNpemUgcmVuZGVyZXI/XG4gICAgY29uc3Qgc2l6ZVZpc1ZhciA9IGdldFZpc1ZhcihyZW5kZXJlciwgXCJzaXplXCIpO1xuICAgIGlmIChvcHRpb25zLmZpZWxkSW5mb3MgJiZcbiAgICAgICAgb3B0aW9ucy5maWVsZEluZm9zLmxlbmd0aCA+IDEgJiZcbiAgICAgICAgb3B0aW9ucy5maWVsZEluZm9zWzBdLmZpZWxkID09IGF1dGhJbmZvLmZpZWxkMS5maWVsZCAmJlxuICAgICAgICBvcHRpb25zLm5vcm1hbGl6YXRpb25GaWVsZDEgPT09IGF1dGhJbmZvLmZpZWxkMS5ub3JtYWxpemF0aW9uRmllbGQgJiZcbiAgICAgICAgb3B0aW9ucy5maWVsZEluZm9zWzFdLmZpZWxkID09IGF1dGhJbmZvLmZpZWxkMi5maWVsZCAmJlxuICAgICAgICBvcHRpb25zLm5vcm1hbGl6YXRpb25GaWVsZDIgPT09IGF1dGhJbmZvLmZpZWxkMi5ub3JtYWxpemF0aW9uRmllbGQpIHtcbiAgICAgICAgLy8gbm8gY2hhbmdlcyB0byBmaWVsZHNcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMuZmllbGRJbmZvcztcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMubm9ybWFsaXphdGlvbkZpZWxkMTtcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMubm9ybWFsaXphdGlvbkZpZWxkMjtcbiAgICAgICAgaWYgKGlzRW1wdHkob3B0aW9ucykgJiYgIXNpemVWaXNWYXIpIHtcbiAgICAgICAgICAgIC8vIG5vdGhpbmcgcmVhbGx5IGNoYW5nZXNcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyByZW5kZXJlcjogcmVuZGVyZXIuY2xvbmUoKSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgcmVsYXRpb25zaGlwU2NoZW1lID0gb3B0aW9ucy5yZWxhdGlvbnNoaXBTY2hlbWU7XG4gICAgaWYgKCFyZWxhdGlvbnNoaXBTY2hlbWUgJiYgW1wicmVsYXRpb25zaGlwXCIsIFwicmVsYXRpb25zaGlwLXNpemVcIl0uaW5kZXhPZihyZW5kZXJlclR5cGUpID4gLTEpIHtcbiAgICAgICAgcmVsYXRpb25zaGlwU2NoZW1lID0gZmluZFJlbGF0aW9uc2hpcFNjaGVtZSgpO1xuICAgIH1cbiAgICBjb25zdCBleHRyYXMgPSBzYXZlRXh0cmFWaXNWYXJzKHJlbmRlcmVyKTtcbiAgICBsZXQgZmllbGRJbmZvMSA9IG9wdGlvbnMuZmllbGRJbmZvc1xuICAgICAgICA/IG9wdGlvbnMuZmllbGRJbmZvc1swXVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIGZpZWxkOiBhdXRoSW5mby5maWVsZDEuZmllbGQsXG4gICAgICAgICAgICBzaW1wbGVGaWVsZFR5cGU6IHNpbXBsZUZpZWxkVHlwZXMuTlVNQkVSXG4gICAgICAgIH07XG4gICAgbGV0IGZpZWxkSW5mbzIgPSBvcHRpb25zLmZpZWxkSW5mb3NcbiAgICAgICAgPyBvcHRpb25zLmZpZWxkSW5mb3NbMV1cbiAgICAgICAgOiB7XG4gICAgICAgICAgICBmaWVsZDogYXV0aEluZm8uZmllbGQyLmZpZWxkLFxuICAgICAgICAgICAgc2ltcGxlRmllbGRUeXBlOiBzaW1wbGVGaWVsZFR5cGVzLk5VTUJFUlxuICAgICAgICB9O1xuICAgIGNvbnN0IG5vcm1hbGl6YXRpb25GaWVsZDEgPSBvcHRpb25zLm5vcm1hbGl6YXRpb25GaWVsZDEgIT09IHVuZGVmaW5lZCAvLyBudWxsIGlzIHVzZWQgYXMgYSB2YWx1ZVxuICAgICAgICA/IG9wdGlvbnMubm9ybWFsaXphdGlvbkZpZWxkMVxuICAgICAgICA6IGF1dGhJbmZvLmZpZWxkMS5ub3JtYWxpemF0aW9uRmllbGQ7XG4gICAgY29uc3Qgbm9ybWFsaXphdGlvbkZpZWxkMiA9IG9wdGlvbnMubm9ybWFsaXphdGlvbkZpZWxkMiAhPT0gdW5kZWZpbmVkIC8vIG51bGwgaXMgdXNlZCBhcyBhIHZhbHVlXG4gICAgICAgID8gb3B0aW9ucy5ub3JtYWxpemF0aW9uRmllbGQyXG4gICAgICAgIDogYXV0aEluZm8uZmllbGQyLm5vcm1hbGl6YXRpb25GaWVsZDtcbiAgICBjb25zdCBzeW1ib2wgPSByZW5kZXJlci51bmlxdWVWYWx1ZUluZm9zICYmIHJlbmRlcmVyLnVuaXF1ZVZhbHVlSW5mb3MubGVuZ3RoID8gcmVuZGVyZXIudW5pcXVlVmFsdWVJbmZvc1swXS5zeW1ib2wgOiBudWxsO1xuICAgIGNvbnN0IGRlZmF1bHRTeW1ib2wgPSByZW5kZXJlci5kZWZhdWx0U3ltYm9sO1xuICAgIGNvbnN0IGRlZmF1bHRMYWJlbCA9IHJlbmRlcmVyLmRlZmF1bHRMYWJlbDtcbiAgICBjb25zdCBudW1DbGFzc2VzID0gb3B0aW9ucy5udW1DbGFzc2VzID8gb3B0aW9ucy5udW1DbGFzc2VzIDogYXV0aEluZm8ubnVtQ2xhc3NlcztcbiAgICAvLyBUT0RPIG5lZWQgdG8ga2VlcCByYW1wXG4gICAgcmV0dXJuIG1vZHVsZXMuUmVsYXRpb25zaGlwQ3JlYXRvci5jcmVhdGVSZW5kZXJlcih7XG4gICAgICAgIGxheWVyLFxuICAgICAgICB2aWV3OiBtYXBWaWV3LFxuICAgICAgICBmaWVsZDE6IHtcbiAgICAgICAgICAgIGZpZWxkOiBmaWVsZEluZm8xID8gZmllbGRJbmZvMS5maWVsZCA6IHJlbmRlcmVyLmZpZWxkLFxuICAgICAgICAgICAgbm9ybWFsaXphdGlvbkZpZWxkOiBub3JtYWxpemF0aW9uRmllbGQxXG4gICAgICAgIH0sXG4gICAgICAgIGZpZWxkMjoge1xuICAgICAgICAgICAgZmllbGQ6IGZpZWxkSW5mbzIgPyBmaWVsZEluZm8yLmZpZWxkIDogcmVuZGVyZXIuZmllbGQsXG4gICAgICAgICAgICBub3JtYWxpemF0aW9uRmllbGQ6IG5vcm1hbGl6YXRpb25GaWVsZDJcbiAgICAgICAgfSxcbiAgICAgICAgY2xhc3NpZmljYXRpb25NZXRob2Q6IG9wdGlvbnMuY2xhc3NpZmljYXRpb25NZXRob2RcbiAgICAgICAgICAgID8gb3B0aW9ucy5jbGFzc2lmaWNhdGlvbk1ldGhvZFxuICAgICAgICAgICAgOiBhdXRoSW5mby5jbGFzc2lmaWNhdGlvbk1ldGhvZCAhPT0gXCJtYW51YWxcIlxuICAgICAgICAgICAgICAgID8gYXV0aEluZm8uY2xhc3NpZmljYXRpb25NZXRob2RcbiAgICAgICAgICAgICAgICA6IFwicXVhbnRpbGVcIixcbiAgICAgICAgbnVtQ2xhc3NlcyxcbiAgICAgICAgZm9jdXM6IG9wdGlvbnMuZm9jdXMgPyBvcHRpb25zLmZvY3VzIDogYXV0aEluZm8uZm9jdXMsXG4gICAgICAgIHJlbGF0aW9uc2hpcFNjaGVtZSxcbiAgICAgICAgb3V0bGluZU9wdGltaXphdGlvbkVuYWJsZWQ6IG1hcEltYWdlU3VibGF5ZXJcbiAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgIDogaXNEZWZpbmVkKG9wdGlvbnMub3V0bGluZU9wdGltaXphdGlvbkVuYWJsZWQpXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLm91dGxpbmVPcHRpbWl6YXRpb25FbmFibGVkXG4gICAgICAgICAgICAgICAgOiAhIWV4dHJhcy5zaXplT3V0bGluZVZpc1ZhcixcbiAgICAgICAgc2l6ZU9wdGltaXphdGlvbkVuYWJsZWQ6IG1hcEltYWdlU3VibGF5ZXJcbiAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgIDogaXNEZWZpbmVkKG9wdGlvbnMuc2l6ZU9wdGltaXphdGlvbkVuYWJsZWQpXG4gICAgICAgICAgICAgICAgPyBvcHRpb25zLnNpemVPcHRpbWl6YXRpb25FbmFibGVkXG4gICAgICAgICAgICAgICAgOiAhIWV4dHJhcy5zaXplQXV0b1Zpc1ZhcixcbiAgICAgICAgbGVnZW5kT3B0aW9uczogb3B0aW9ucy5sZWdlbmRPcHRpb25zID8gb3B0aW9ucy5sZWdlbmRPcHRpb25zIDogcmVuZGVyZXIubGVnZW5kT3B0aW9ucyxcbiAgICAgICAgZGVmYXVsdFN5bWJvbEVuYWJsZWQ6IGlzRGVmaW5lZChvcHRpb25zLmRlZmF1bHRTeW1ib2xFbmFibGVkKVxuICAgICAgICAgICAgPyBvcHRpb25zLmRlZmF1bHRTeW1ib2xFbmFibGVkXG4gICAgICAgICAgICA6ICEhcmVuZGVyZXIuZGVmYXVsdFN5bWJvbCxcbiAgICAgICAgZm9yQmlubmluZzogKChfYSA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50eXBlKSA9PT0gXCJiaW5uaW5nXCJcbiAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIlJlbGF0aW9uc2hpcENyZWF0b3IuY3JlYXRlUmVuZGVyZXJcIiwgcmVzdWx0KTtcbiAgICAgICAgYXBwbHlFeHRyYVZpc1ZhcnMoZXh0cmFzLCByZXN1bHQucmVuZGVyZXIpO1xuICAgICAgICBpZiAoc3ltYm9sKSB7XG4gICAgICAgICAgICBjb25zdCBpbmZvcyA9IHJlc3VsdC5yZW5kZXJlci51bmlxdWVWYWx1ZUluZm9zO1xuICAgICAgICAgICAgaW5mb3MuZm9yRWFjaCgoaW5mbykgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGtlZXAgdGhlIHNhbWUgc3ltYm9sIHN0eWxlLCBub3QgdGhlIGNvbG9yXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ltID0gc3ltYm9sLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgYXBwbHlTeW1ib2xDb2xvcihzeW0sIGdldFN5bWJvbENvbG9yKGluZm8uc3ltYm9sKSk7XG4gICAgICAgICAgICAgICAgaW5mby5zeW1ib2wgPSBzeW07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBrZWVwIG9sZCBsYWJlbHNcbiAgICAgICAgaWYgKCFvcHRpb25zLm51bUNsYXNzZXMgfHwgb3B0aW9ucy5udW1DbGFzc2VzID09PSBhdXRoSW5mby5udW1DbGFzc2VzKSB7XG4gICAgICAgICAgICBnZXRSZW5kZXJlcihsYXllcikudW5pcXVlVmFsdWVJbmZvcy5mb3JFYWNoKChvbGRJbmZvKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnJlbmRlcmVyLnVuaXF1ZVZhbHVlSW5mb3MuZm9yRWFjaCgobmV3SW5mbykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkSW5mby52YWx1ZSA9PT0gbmV3SW5mby52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5mby5sYWJlbCA9IG9sZEluZm8ubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZhdWx0U3ltYm9sKSB7XG4gICAgICAgICAgICByZXN1bHQucmVuZGVyZXIuZGVmYXVsdFN5bWJvbCA9IGRlZmF1bHRTeW1ib2w7XG4gICAgICAgICAgICByZXN1bHQucmVuZGVyZXIuZGVmYXVsdExhYmVsID0gZGVmYXVsdExhYmVsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbiAgICB9LCAoZXJyb3IpID0+IFByb21pc2UucmVqZWN0KGVycm9yKSk7XG59XG4vKipcbiAqIFVwZGF0ZXMgYSByZWxhdGlvbnNoaXAgcmVuZGVyZXIgYWZ0ZXIgY2hhbmdlcyB0byBzbGlkZXIgYnJlYWtzLCBmb2N1cywgY29sb3IgcmFtcFxuICovXG5mdW5jdGlvbiB1cGRhdGVSZWxhdGlvbnNoaXBSZW5kZXJlcihvcHRpb25zKSB7XG4gICAgY29uc3QgeyBsYXllciwgbW9kdWxlcyB9ID0gc21hcnRNYXBwaW5nU3RhdGU7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgY29uc3QgcmVuZGVyZXIgPSBnZXRSZW5kZXJlcihsYXllcik7XG4gICAgY29uc3QgYXV0aEluZm8gPSByZW5kZXJlci5hdXRob3JpbmdJbmZvO1xuICAgIHJldHVybiBtb2R1bGVzLlJlbGF0aW9uc2hpcENyZWF0b3IudXBkYXRlUmVuZGVyZXIoe1xuICAgICAgICBmaWVsZDE6IGF1dGhJbmZvLmZpZWxkMSxcbiAgICAgICAgZmllbGQyOiBhdXRoSW5mby5maWVsZDIsXG4gICAgICAgIG51bUNsYXNzZXM6IG9wdGlvbnMubnVtQ2xhc3NlcyA/IG9wdGlvbnMubnVtQ2xhc3NlcyA6IGF1dGhJbmZvLm51bUNsYXNzZXMsXG4gICAgICAgIGZvY3VzOiBvcHRpb25zLmZvY3VzID8gKG9wdGlvbnMuZm9jdXMgPT09IFwibm9uZVwiID8gbnVsbCA6IG9wdGlvbnMuZm9jdXMpIDogYXV0aEluZm8uZm9jdXMsXG4gICAgICAgIGNvbG9yczogb3B0aW9ucy5jb2xvcnMsXG4gICAgICAgIHJlbmRlcmVyXG4gICAgfSk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVJlbGF0aW9uc2hpcFJlbmRlcmVyRnJvbUV4aXN0aW5nIGFzIGEsIGNyZWF0ZVJlbGF0aW9uc2hpcFJlbmRlcmVyIGFzIGMsIHVwZGF0ZVJlbGF0aW9uc2hpcFJlbmRlcmVyIGFzIHUgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVsYXRpb25zaGlwLWI3MmQ3ZDk3LmpzLm1hcCIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHY0LjAuNThcbiAqL1xuaW1wb3J0IHsgcyBhcyBzbWFydE1hcHBpbmdTdGF0ZSB9IGZyb20gJy4vcmFzdGVyLXVuaXF1ZS12YWx1ZS0wOTc2ZWM3Zi5qcyc7XG5pbXBvcnQgJy4vbG9hZE1vZHVsZXMtYjRhYzEyNDcuanMnO1xuaW1wb3J0ICcuL2NvbW1vbkVudW1zLWZjZjEzNjYxLmpzJztcblxuZnVuY3Rpb24gYmFyQ3JlYXRlZEZ1bmN0aW9uKGNvbG9yVmlzVmFyT3JCcmVha3MsIGhpc3RvZ3JhbSwgc2xpZGVyQmFycywgaWR4LCBlbGVtZW50KSB7XG4gICAgY29uc3QgY29sb3IgPSAoY29sb3JWaXNWYXJPckJyZWFrcyA9PT0gbnVsbCB8fCBjb2xvclZpc1Zhck9yQnJlYWtzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb2xvclZpc1Zhck9yQnJlYWtzLmxlbmd0aClcbiAgICAgICAgPyBnZXRDb2xvckZvclZhbHVlQ2xhc3NlZChjb2xvclZpc1Zhck9yQnJlYWtzLCBoaXN0b2dyYW0uYmluc1tpZHhdKVxuICAgICAgICA6IGdldENvbG9yRm9yVmFsdWUoY29sb3JWaXNWYXJPckJyZWFrcy5zdG9wcywgaGlzdG9ncmFtLmJpbnNbaWR4XSk7XG4gICAgY29sb3IgJiYgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIGNvbG9yLnRvSGV4KCkpO1xuICAgIGNvbG9yICYmIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwib3BhY2l0eVwiLCBgJHtNYXRoLm1heChjb2xvci5hLCAwLjIpfWApO1xuICAgIHNsaWRlckJhcnMucHVzaChlbGVtZW50KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUhpc3RvZ3JhbUNvbG9ycyhzbGlkZXIsIHNsaWRlckJhcnMsIGNvbG9yVmlzVmFyT3JCcmVha3MsIGhpc3RvZ3JhbSkge1xuICAgIHNsaWRlckJhcnMgPT09IG51bGwgfHwgc2xpZGVyQmFycyA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2xpZGVyQmFycy5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBiaW4gPSAoaGlzdG9ncmFtIHx8IHNsaWRlci5oaXN0b2dyYW1Db25maWcpLmJpbnNbaW5kZXhdO1xuICAgICAgICBjb25zdCBjb2xvciA9IHNsaWRlci5icmVha3NcbiAgICAgICAgICAgID8gZ2V0Q29sb3JGb3JWYWx1ZUNsYXNzZWQoY29sb3JWaXNWYXJPckJyZWFrcyB8fCBzbGlkZXIuYnJlYWtzLCBiaW4pXG4gICAgICAgICAgICA6IGdldENvbG9yRm9yVmFsdWUoKGNvbG9yVmlzVmFyT3JCcmVha3MgfHwgc2xpZGVyKVxuICAgICAgICAgICAgICAgIC5zdG9wcywgYmluKTtcbiAgICAgICAgY29sb3IgJiYgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIGNvbG9yLnRvSGV4KCkpO1xuICAgICAgICBjb2xvciAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZShcIm9wYWNpdHlcIiwgYCR7TWF0aC5tYXgoY29sb3IuYSwgMC4yKX1gKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldENvbG9yRm9yVmFsdWUoc3RvcHMsIGJpbikge1xuICAgIC8vIGluZmVycyB0aGUgY29sb3IgZm9yIGEgZ2l2ZW4gdmFsdWVcbiAgICAvLyBiYXNlZCBvbiB0aGUgc3RvcHMgZnJvbSBhIENvbG9yVmFyaWFibGVcbiAgICBjb25zdCB7IG1vZHVsZXMgfSA9IHNtYXJ0TWFwcGluZ1N0YXRlO1xuICAgIGlmICghYmluKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSAoYmluLm1heFZhbHVlIC0gYmluLm1pblZhbHVlKSAvIDIgKyBiaW4ubWluVmFsdWU7XG4gICAgbGV0IG1pblN0b3AgPSBzdG9wc1swXTtcbiAgICBsZXQgbWF4U3RvcCA9IHN0b3BzW3N0b3BzLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IG1pblN0b3BWYWx1ZSA9IG1pblN0b3AudmFsdWU7XG4gICAgY29uc3QgbWF4U3RvcFZhbHVlID0gbWF4U3RvcC52YWx1ZTtcbiAgICBpZiAodmFsdWUgPCBtaW5TdG9wVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG1pblN0b3AuY29sb3I7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA+IG1heFN0b3BWYWx1ZSkge1xuICAgICAgICByZXR1cm4gbWF4U3RvcC5jb2xvcjtcbiAgICB9XG4gICAgY29uc3QgZXhhY3RNYXRjaGVzID0gc3RvcHMuZmlsdGVyKChzdG9wKSA9PiBzdG9wLnZhbHVlID09PSB2YWx1ZSk7XG4gICAgaWYgKGV4YWN0TWF0Y2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBleGFjdE1hdGNoZXNbMF0uY29sb3I7XG4gICAgfVxuICAgIG1pblN0b3AgPSBudWxsO1xuICAgIG1heFN0b3AgPSBudWxsO1xuICAgIHN0b3BzLmZvckVhY2goKHN0b3AsIGkpID0+IHtcbiAgICAgICAgaWYgKCFtaW5TdG9wICYmICFtYXhTdG9wICYmIHN0b3AudmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pblN0b3AgPSBzdG9wc1tpIC0gMV07XG4gICAgICAgICAgICBtYXhTdG9wID0gc3RvcDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHdlaWdodGVkUG9zaXRpb24gPSAodmFsdWUgLSBtaW5TdG9wLnZhbHVlKSAvIChtYXhTdG9wLnZhbHVlIC0gbWluU3RvcC52YWx1ZSk7XG4gICAgcmV0dXJuIG1vZHVsZXMuZXNyaUNvbG9yLmJsZW5kQ29sb3JzKG1pblN0b3AuY29sb3IsIG1heFN0b3AuY29sb3IsIHdlaWdodGVkUG9zaXRpb24pO1xufVxuZnVuY3Rpb24gZ2V0Q29sb3JGb3JWYWx1ZUNsYXNzZWQoYnJlYWtzLCBiaW4pIHtcbiAgICAvLyBpbmZlcnMgdGhlIGNvbG9yIGZvciBhIGdpdmVuIHZhbHVlXG4gICAgLy8gYmFzZWQgb24gdGhlIGNsYXNzQnJlYWtJbmZvXG4gICAgaWYgKCFiaW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IChiaW4ubWF4VmFsdWUgLSBiaW4ubWluVmFsdWUpIC8gMiArIGJpbi5taW5WYWx1ZTtcbiAgICBsZXQgbWluQnJlYWsgPSBicmVha3NbMF07XG4gICAgbGV0IG1heEJyZWFrID0gYnJlYWtzW2JyZWFrcy5sZW5ndGggLSAxXTtcbiAgICBpZiAodmFsdWUgPCBtaW5CcmVhay5taW4gfHwgdmFsdWUgPiBtYXhCcmVhay5tYXgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgZXhhY3RNYXRjaGVzID0gYnJlYWtzLmZpbHRlcigoYikgPT4gYi5taW4gPT09IHZhbHVlKTtcbiAgICBpZiAoZXhhY3RNYXRjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGV4YWN0TWF0Y2hlc1swXS5jb2xvcjtcbiAgICB9XG4gICAgbWluQnJlYWsgPSBicmVha3NbYnJlYWtzLmxlbmd0aCAtIDFdO1xuICAgIG1heEJyZWFrID0gbnVsbDtcbiAgICBicmVha3MuZm9yRWFjaCgoYiwgaSkgPT4ge1xuICAgICAgICBpZiAoIW1heEJyZWFrICYmIGIubWluID49IHZhbHVlKSB7XG4gICAgICAgICAgICBtaW5CcmVhayA9IGJyZWFrc1tpIC0gMV07XG4gICAgICAgICAgICBtYXhCcmVhayA9IGI7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbWluQnJlYWsuY29sb3I7XG59XG5cbmV4cG9ydCB7IGJhckNyZWF0ZWRGdW5jdGlvbiBhcyBiLCB1cGRhdGVIaXN0b2dyYW1Db2xvcnMgYXMgdSB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zbGlkZXItZTE2MmUxMzYuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9