"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-lazy-lo-5b7d4e"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-lazy-loading-select.entry.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-lazy-loading-select.entry.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_lazy_loading_select: () => (/* binding */ ArcgisLazyLoadingSelect)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const arcgisLazyLoadingSelectCss = ":host{width:100%;overflow:hidden}.lazy-select-button{--calcite-color-foreground-3:var(--calcite-color-border-input)}";

const ArcgisLazyLoadingSelect = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisLazyLoadingSelectChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisLazyLoadingSelectChange", 7);
        this.handleOutsideClick = (event) => {
            if (!this.open) {
                return;
            }
            // when list has single item, simply close
            if (this.list.length > 1) {
                const paths = event.composedPath();
                if (paths.includes(this.hostElement) || paths.includes(this.menuPopOver)) {
                    return;
                }
            }
            this.closeMenuPopOverAndDisconnectHandles();
        };
        this.handleResize = () => this.open && this.closeMenuPopOverAndDisconnectHandles();
        this.list = undefined;
        this.selectedIndex = 0;
        this.containerTop = 0;
        this.containerBottom = undefined;
        this.pageSize = 500;
        this.accumulatePages = true;
        this.strings = undefined;
        this.ariaLabeledBy = undefined;
        this.showFilterLength = 20;
        this.pageId = 0;
        this.open = false;
    }
    watchSelectedIndex(newValue) {
        if (this.menuPopOver) {
            this.menuPopOver.selectedIndex = newValue;
        }
    }
    watchPageSize(newValue) {
        if (this.menuPopOver) {
            this.menuPopOver.pageSize = newValue;
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    disconnectedCallback() {
        this.closeMenuPopOverAndDisconnectHandles();
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        var _a;
        const { selectedIndex, list } = this;
        const selected = selectedIndex >= list.length ? list[0] : list[selectedIndex];
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { scale: "s", width: "full", appearance: "outline-fill", kind: this.open ? "brand" : "neutral", class: this.open ? undefined : "lazy-select-button", alignment: "icon-end-space-between", iconEnd: this.open ? "chevron-up" : "chevron-down", "aria-haspopup": "true", "aria-expanded": this.open ? "true" : "false", "aria-label": this.ariaLabeledBy ? undefined : (_a = this.strings) === null || _a === void 0 ? void 0 : _a.selectLabel, "aria-labelledby": this.ariaLabeledBy || undefined, onClick: () => this.renderSelectMenu(), ref: (node) => (this.refNode = node) }, selected.label));
    }
    renderSelectMenu() {
        if (this.menuPopOver) {
            this.closeMenuPopOverAndDisconnectHandles();
            return;
        }
        this.open = true;
        document.addEventListener("pointerdown", this.handleOutsideClick);
        window.addEventListener("resize", this.handleOutsideClick);
        const menuPopOver = document.createElement("arcgis-lazy-loading-list");
        const { height: hostHeight, top: hostTop } = this.hostElement.getBoundingClientRect();
        const { width, left, bottom, top, height: triggerHeight } = this.refNode.getBoundingClientRect();
        const height = hostHeight - triggerHeight - (bottom - hostTop);
        menuPopOver.popoverProps = {
            width,
            left,
            top,
            bottom,
            height,
            containerTop: this.containerTop,
            containerBottom: this.containerBottom
        };
        // fly out to the root container is good when the list requires container wider element that goes beyond select's controller,
        // it's visible without horizontal scrolling, similar to browser's native select control.
        menuPopOver.flyOut = true;
        menuPopOver.strings = this.strings;
        menuPopOver.showFilter = this.list.length >= this.showFilterLength;
        menuPopOver.pageSize = this.pageSize;
        menuPopOver.accumulatePages = this.accumulatePages;
        this.menuPopOver = menuPopOver;
        menuPopOver.addEventListener("arcgisLazyLoadingListChange", (evt) => {
            this.selectedIndex = evt.detail.selectedIndex;
            this.arcgisLazyLoadingSelectChange.emit(evt.detail);
            this.closeMenuPopOverAndDisconnectHandles();
        });
        document.body.appendChild(menuPopOver);
        this.menuPopOver.list = this.list;
        this.menuPopOver.selectedIndex = this.selectedIndex;
        this.setupMarginObservers();
    }
    // --------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    closeMenuPopOverAndDisconnectHandles() {
        this.disconnectObservers();
        document.removeEventListener("pointerdown", this.handleOutsideClick);
        window.removeEventListener("resize", this.handleOutsideClick);
        if (this.menuPopOver) {
            setTimeout(() => {
                document.body.removeChild(this.menuPopOver);
                this.menuPopOver = null;
            }, 100);
        }
        this.open = false;
    }
    setupMarginObservers() {
        const { top: selectTop, bottom: selectBottom } = this.refNode.getBoundingClientRect();
        const { clientHeight } = document.body;
        this.disconnectObservers();
        const rootMarginForTop = `0px 0px ${selectBottom - clientHeight}px 0px`;
        this.topObserver = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (!entry.isIntersecting) {
                    this.closeMenuPopOverAndDisconnectHandles();
                }
            });
        }, { rootMargin: rootMarginForTop });
        const rootMarginForBottom = `${-selectTop}px 0px 0px 0px`;
        this.bottomObserver = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (!entry.isIntersecting) {
                    this.closeMenuPopOverAndDisconnectHandles();
                }
            });
        }, { rootMargin: rootMarginForBottom });
        this.topObserver.observe(this.refNode);
        this.bottomObserver.observe(this.refNode);
    }
    disconnectObservers() {
        var _a, _b;
        (_a = this.topObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
        (_b = this.bottomObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
        this.topObserver = null;
        this.bottomObserver = null;
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "selectedIndex": ["watchSelectedIndex"],
        "pageSize": ["watchPageSize"]
    }; }
};
ArcgisLazyLoadingSelect.style = arcgisLazyLoadingSelectCss;



//# sourceMappingURL=arcgis-lazy-loading-select.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,