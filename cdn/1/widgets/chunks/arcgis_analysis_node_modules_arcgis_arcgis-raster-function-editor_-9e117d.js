"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-9e117d"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-clipping-geometry-acac287a.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-clipping-geometry-acac287a.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: () => (/* binding */ RFxClippingGeometry)
/* harmony export */ });
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
/* harmony import */ var _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui-utils-928a4096.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js");
/* harmony import */ var _layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./layer-helper-3867eef7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/layer-helper-3867eef7.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");














const HelpClickHandlerKeys = {
    clippingGeometryOrRasterHelpClickHandler: "clippingGeometryOrRasterHelpClickHandler",
    useinputFeaturesHelpClickHandler: "useinputFeaturesHelpClickHandler",
    outputExtentHelpClickHandler: "outputExtentHelpClickHandler"
};

const clippingGeometryTypes = {
    clippingRaster: "clippingRaster",
    clippingGeometry: "clippingGeometry",
    currentExtent: "currentExtent"
};
const RFxClippingGeometry = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        /**
         * holds values of raster-input and feature-select for persistence
         * @private
         */
        this.rasterOrGeometryValueMapper = {
            geometryValue: undefined,
            rasterValue: undefined
        };
        /**
         * holds extents so we do not have to recalcute on each render
         * Updated only when -> input raster, clipping raster, clipping geometry is changed
         * @private
         */
        this.extentMapper = {
            mapExtent: undefined,
            inputRasterExtent: undefined,
            clippingRasterGeometryExtent: undefined,
            clippingFeatureGeometryExtent: undefined,
            useInputFeatureGeometryExtent: undefined
        };
        /**
         * Stores event handlers for help action click, stored in connected callback to avoid
         * fetching function on each render ( to avoid common bad practice )
         */
        this.helpActionClickEventHandlers = new Map();
        this.inituseInputFeatureGeometry = (el) => {
            this.useInputFeatureGeometryRfxArg = el;
            const { triggerArgs } = this.widgetArgs;
            const useInputFeatureGeometryRfxArg = triggerArgs.UseInputFeatureGeometry;
            useInputFeatureGeometryRfxArg.input = this.useInputFeatureGeometryRfxArg;
            this.useInputFeatureGeometryRfxArg?.addEventListener("calciteCheckboxChange", (e) => {
                const element = e.target;
                const value = element.checked;
                this.useInputFeatureGeometryRfxArgValue = value;
                this.widgetArgs.triggerArgs.UseInputFeatureGeometry.value = value;
                this.widgetArgs.inputArgs.ClippingGeometry.value = this.useInputFeatureGeometryRfxArgValue
                    ? this.extentMapper.useInputFeatureGeometryExtent
                    : this.extentMapper.clippingFeatureGeometryExtent;
                // {useInputFeatureGeometryRfxArgValue} State change -> componentWillRender will handle UI update
            });
        };
        this.initExtent = (el) => {
            this.extentWidget = el;
            const { inputArgs } = this.widgetArgs;
            const extentRfxArg = inputArgs.Extent;
            extentRfxArg.input = this.extentWidget;
        };
        this.handleClippingGeometryTypesChange = (e) => {
            e.stopPropagation();
            const element = e.target;
            this.clippingGeometryTypeSelected = element.value;
            // Following is done to unset the value of other fields, and helps persistence
            switch (this.clippingGeometryTypeSelected) {
                case clippingGeometryTypes.currentExtent:
                    this.extentMapper.mapExtent = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_5__.j)(this.map?.extent);
                    this.widgetArgs.inputArgs.ClippingRaster.value = undefined;
                    this.widgetArgs.inputArgs.ClippingGeometry.value = undefined;
                    break;
                case clippingGeometryTypes.clippingRaster:
                    this.widgetArgs.inputArgs.ClippingGeometry.value = undefined;
                    break;
                case clippingGeometryTypes.clippingGeometry:
                    this.widgetArgs.inputArgs.ClippingRaster.value = undefined;
                    break;
            }
            // {clippingGeometryTypeSelected} State change -> componentWillRender will handle UI update
        };
        this.setMapExtent = () => {
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(this.map)) {
                return;
            }
            this.extentMapper.mapExtent = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_5__.j)(this.map?.extent);
            this.renderFlag = !this.renderFlag;
            // {renderFlag} State change -> componentWillRender will handle UI update
        };
        this.renderUpdateActiveMapExtentButton = () => {
            return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "center", appearance: "outline", kind: "neutral", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, type: "button", width: "full", onClick: this.setMapExtent }, this.strings.currentMapExtent));
        };
        this.handleClippingGeometryRasterChange = async ({ detail: { value } }) => {
            // Done only for persistence
            this.rasterOrGeometryValueMapper.rasterValue = value;
            const layer = await this.clippingGeometryRasterArg?.getSelectedLayer?.();
            const layerExtent = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_5__.j)(layer);
            this.widgetArgs.inputArgs.ClippingRaster.value = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_5__.d)(layer);
            this.extentMapper.clippingRasterGeometryExtent = layerExtent;
            this.renderFlag = !this.renderFlag;
            // {renderFlag} State change -> componentWillRender will handle UI update
        };
        this.handleClippingGeometryFeatureChange = async ({ detail: { value } }) => {
            // Done only for persistence
            this.rasterOrGeometryValueMapper.geometryValue = value;
            const layer = await this.clippingGeometryFeatureArg?.getSelectedLayer?.();
            const layerExtent = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_5__.j)(layer);
            this.extentMapper.clippingFeatureGeometryExtent = layerExtent;
            const geometries = await (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_5__.k)(layer);
            let geometriesExtent = {};
            // Essentially avoids "point" type geometries.
            if (layer.geometryType === "polygon") {
                geometriesExtent = {
                    // geometries: geometries?.map((geometry) => ({ rings: geometry.toJSON().rings })),
                    rings: geometries?.map((geometry) => geometry?.toJSON().rings?.[0]),
                    spatialReference: geometries?.[0]?.toJSON().spatialReference
                };
            }
            else if (layer.geometryType === "point") {
                geometriesExtent = {
                    geometries: geometries?.map((geometry) => {
                        const toJSON = geometry.toJSON();
                        return {
                            x: toJSON.x,
                            y: toJSON.y
                        };
                    }),
                    spatialReference: geometries?.[0]?.toJSON().spatialReference
                };
            }
            else {
                geometriesExtent = layerExtent;
            }
            this.extentMapper.useInputFeatureGeometryExtent = geometriesExtent;
            this.widgetArgs.inputArgs.ClippingGeometry.value = this.useInputFeatureGeometryRfxArgValue
                ? geometriesExtent
                : layerExtent;
            this.renderFlag = !this.renderFlag;
            // {renderFlag} State change -> componentWillRender will handle UI update
        };
        this.widgetArgs = undefined;
        this.clippingGeometryTypeSelected = undefined;
        this.clippingTypeRfxArgValue = undefined;
        this.useInputFeatureGeometryRfxArgValue = false;
        this.extentvalue = undefined;
        this.renderFlag = false;
    }
    onWidgetArgsChange(widgetArgs) {
        this.processWidgetArgs(widgetArgs);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        this.processWidgetArgs(this.widgetArgs);
    }
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.direction } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_1__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
        await this.setInitialState(this.widgetArgs);
    }
    componentWillRender() {
        // 1 -> Clip Outside , 2 -> Clip Inside
        const clippingType = this.clippingTypeRfxArgValue;
        // If Raster is set find the extent of raster and populate custom extent UI
        const clipInsideHandler = () => {
            return this.extentMapper.inputRasterExtent;
        };
        // Identify whether Raster or Geometry is set
        // find the extent of either and populate custom extent UI
        const clipOutsideHandler = () => {
            const clippingLayerMode = this.clippingGeometryTypeSelected;
            switch (clippingLayerMode) {
                case clippingGeometryTypes.currentExtent:
                    return this.extentMapper.mapExtent;
                case clippingGeometryTypes.clippingRaster:
                    return this.extentMapper.clippingRasterGeometryExtent;
                case clippingGeometryTypes.clippingGeometry:
                    return this.extentMapper.clippingFeatureGeometryExtent;
            }
        };
        const clippingTypeChangeHandler = {
            "1": clipOutsideHandler,
            "2": clipInsideHandler
        };
        const extent = clippingTypeChangeHandler[clippingType].bind(this)();
        this.extentvalue = extent;
    }
    componentDidLoad() {
        this.attachHelpClickEventHandlers();
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    /**
     * All validation logic of widgetArgs -> mainly the inputArgs and triggerAttributes
     * goes here
     */
    processWidgetArgs({ browseProperties, triggerArgs }) {
        this.map = browseProperties.map;
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(triggerArgs) ||
            (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(triggerArgs.Raster) ||
            (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(triggerArgs.ClippingType) ||
            (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(triggerArgs.UseInputFeatureGeometry)) {
            console.error("Invalid Schema: TriggerArgs is incorrect!");
        }
        const rasterRfxArg = triggerArgs.Raster;
        this.rasterArg = rasterRfxArg;
        rasterRfxArg.input?.addEventListener("rfxArgumentChange", this.handleRasterChange.bind(this));
        const clippingTypeRfxArg = triggerArgs.ClippingType;
        this.clippingTypeRfxArg = clippingTypeRfxArg;
        clippingTypeRfxArg.input?.addEventListener("rfxArgumentChange", ({ detail: { value } }) => {
            this.clippingTypeRfxArgValue = value;
            // {clippingTypeRfxArgValue} State change -> componentWillRender will handle UI update
        });
    }
    attachHelpClickEventHandlers() {
        const clippingGeometryOrRasterHelpClickHandler = this.widgetArgs.onHelpActionClick({
            heading: this.widgetArgs.inputArgs.ClippingGeometry.displayName,
            referenceElement: this.clippingGeometryOrRasterContainer,
            helpTextID: this.widgetArgs.helpTextIDs?.clip_clippinggeometryorraster
        });
        const outputExtentHelpClickHandler = this.widgetArgs.onHelpActionClick({
            heading: this.widgetArgs.inputArgs.Extent.displayName,
            referenceElement: this.extentContainer,
            helpTextID: this.widgetArgs.helpTextIDs?.clip_outputextent
        });
        this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.clippingGeometryOrRasterHelpClickHandler, clippingGeometryOrRasterHelpClickHandler);
        this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.outputExtentHelpClickHandler, outputExtentHelpClickHandler);
    }
    async setInitialState({ inputArgs, triggerArgs }) {
        const rasterRfxArg = triggerArgs.Raster;
        const rasterInput = rasterRfxArg?.input;
        const inputRasterLayer = await rasterInput?.getSelectedLayer?.();
        this.extentMapper.inputRasterExtent = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_5__.j)(inputRasterLayer);
        const clippingTypeRfxArg = triggerArgs.ClippingType;
        this.clippingTypeRfxArgValue = clippingTypeRfxArg.value;
        const useInputFeatureGeometryRfxArg = triggerArgs.UseInputFeatureGeometry;
        this.useInputFeatureGeometryRfxArgValue = useInputFeatureGeometryRfxArg.value ? true : false;
        const extentRfxArg = inputArgs.Extent;
        this.extentvalue = extentRfxArg.value;
        this.extentMapper.mapExtent = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_5__.j)(this.map?.extent);
        // Persistence of clipping type
        const isClippingRasterPresent = !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(inputArgs.ClippingRaster?.value);
        const isClippingGeometryPresent = !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(inputArgs.ClippingGeometry?.value);
        const isActiveMapExtent = !isClippingRasterPresent && !isClippingGeometryPresent;
        const isClipOutsideSelected = this.clippingTypeRfxArgValue === 1;
        if (isClippingRasterPresent && isClipOutsideSelected) {
            this.extentMapper.clippingRasterGeometryExtent = this.extentvalue;
        }
        if (isClippingGeometryPresent && isClipOutsideSelected) {
            this.extentMapper.clippingFeatureGeometryExtent = this.extentvalue;
        }
        this.clippingGeometryTypeSelected = isActiveMapExtent
            ? clippingGeometryTypes.currentExtent
            : isClippingRasterPresent
                ? clippingGeometryTypes.clippingRaster
                : clippingGeometryTypes.clippingGeometry;
    }
    async handleRasterChange() {
        const rasterInput = this.rasterArg?.input;
        const layer = await rasterInput?.getSelectedLayer?.();
        const inputRasterExtent = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_5__.j)(layer);
        this.extentMapper.inputRasterExtent = inputRasterExtent;
    }
    renderClippingGeometryTypes() {
        const clippingGeometryTypesOptions = [
            { key: clippingGeometryTypes.currentExtent, label: this.strings.activeMapViewExtent },
            {
                key: clippingGeometryTypes.clippingRaster,
                label: this.strings.chooseRaster
            },
            { key: clippingGeometryTypes.clippingGeometry, label: this.strings.chooseGeometry }
        ];
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: clippingGeometryTypesOptions, value: this.clippingGeometryTypeSelected, onRfxArgumentChange: this.handleClippingGeometryTypesChange }));
    }
    renderClippingGeometryRaster() {
        const { inputLayers } = this.widgetArgs;
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dte-raster-input", { ref: (el) => (this.clippingGeometryRasterArg = el), inputLayers: inputLayers, value: this.rasterOrGeometryValueMapper.rasterValue, onRfxArgumentChange: this.handleClippingGeometryRasterChange, rfxBrowseLayerClick: this.widgetArgs.onRfxBrowseLayerClick }));
    }
    renderClippingGeometryFeature() {
        const { featureLayers } = this.widgetArgs;
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dte-feature-select", { ref: (el) => (this.clippingGeometryFeatureArg = el), inputLayers: featureLayers, value: this.rasterOrGeometryValueMapper.geometryValue, onRfxArgumentChange: this.handleClippingGeometryFeatureChange, rfxBrowseLayerClick: this.widgetArgs.onRfxBrowseLayerClick }));
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.clippingGeometryOrRasterContainer = e;
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.widgetArgs.inputArgs.ClippingGeometry.displayName, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.clippingGeometryOrRasterHelpClickHandler)() }), this.renderClippingGeometryTypes(), this.clippingGeometryTypeSelected === clippingGeometryTypes.currentExtent
            ? this.renderUpdateActiveMapExtentButton()
            : null, this.clippingGeometryTypeSelected === clippingGeometryTypes.clippingRaster
            ? this.renderClippingGeometryRaster()
            : null, this.clippingGeometryTypeSelected === clippingGeometryTypes.clippingGeometry
            ? this.renderClippingGeometryFeature()
            : null), this.clippingGeometryTypeSelected === clippingGeometryTypes.clippingGeometry ? ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "inline-space-between", ref: (e) => {
                this.useInputFeatureGeometryContainer = e;
                const useinputFeaturesHelpClickHandler = this.widgetArgs.onHelpActionClick({
                    heading: this.widgetArgs.triggerArgs.UseInputFeatureGeometry.displayName,
                    referenceElement: this.useInputFeatureGeometryContainer,
                    helpTextID: this.widgetArgs.helpTextIDs?.clip_useinputfeaturesforclippinggeometry
                });
                this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.useinputFeaturesHelpClickHandler, useinputFeaturesHelpClickHandler);
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { checked: this.useInputFeatureGeometryRfxArgValue, ref: this.inituseInputFeatureGeometry }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.widgetArgs.triggerArgs.UseInputFeatureGeometry.displayName, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.useinputFeaturesHelpClickHandler)() }))) : null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, layout: "default", ref: (e) => {
                this.extentContainer = e;
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.widgetArgs.inputArgs.Extent.displayName, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.outputExtentHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dte-extent", { ref: this.initExtent, value: this.extentvalue }))));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
    static get watchers() { return {
        "widgetArgs": ["onWidgetArgsChange"]
    }; }
};



//# sourceMappingURL=rfx-cte-clipping-geometry-acac287a.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-clipping-geometry.entry.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-clipping-geometry.entry.js ***!
  \*******************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rfx_cte_clipping_geometry: () => (/* reexport safe */ _rfx_cte_clipping_geometry_acac287a_js__WEBPACK_IMPORTED_MODULE_0__.R)
/* harmony export */ });
/* harmony import */ var _rfx_cte_clipping_geometry_acac287a_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rfx-cte-clipping-geometry-acac287a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-clipping-geometry-acac287a.js");
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
/* harmony import */ var _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_getTag-96af029d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_getTag-96af029d.js");
/* harmony import */ var _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui-utils-928a4096.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js");
/* harmony import */ var _layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./layer-helper-3867eef7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/layer-helper-3867eef7.js");
/* harmony import */ var _arcgis_core_identity_IdentityManager_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @arcgis/core/identity/IdentityManager.js */ "@arcgis/core/identity/IdentityManager.js");
/* harmony import */ var _arcgis_core_core_urlUtils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @arcgis/core/core/urlUtils.js */ "@arcgis/core/core/urlUtils.js");
/* harmony import */ var _arcgis_core_layers_Layer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @arcgis/core/layers/Layer.js */ "@arcgis/core/layers/Layer.js");
/* harmony import */ var _arcgis_core_layers_ImageryLayer_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @arcgis/core/layers/ImageryLayer.js */ "@arcgis/core/layers/ImageryLayer.js");
/* harmony import */ var _arcgis_core_smartMapping_raster_renderers_stretch_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @arcgis/core/smartMapping/raster/renderers/stretch.js */ "@arcgis/core/smartMapping/raster/renderers/stretch.js");
/* harmony import */ var _common_fda1462e_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./common-fda1462e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-fda1462e.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./_Uint8Array-68e1e3f9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_Uint8Array-68e1e3f9.js");
/* harmony import */ var _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./interfaces-d0c68944.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/interfaces-d0c68944.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");
























//# sourceMappingURL=rfx-cte-clipping-geometry.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CalciteScale),
/* harmony export */   U: () => (/* binding */ UIDefaults),
/* harmony export */   a: () => (/* binding */ CalciteOverlayPositioning)
/* harmony export */ });
const UIDefaults = {
    Scale: "s",
    PopoverTimer: 60
};
const CalciteScale = {
    s: "s",
    m: "m"
};
const CalciteOverlayPositioning = {
    absolute: "absolute",
    fixed: "fixed"
};



//# sourceMappingURL=ui-utils-928a4096.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,