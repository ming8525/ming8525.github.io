"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-7505ec"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.de-f549d45d.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.de-f549d45d.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Abs_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Abs_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Abs_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Abs_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Abs_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Abs_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Abs_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Abs_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Abs_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Abs_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Abs_Raster_tag0@@": "Das Eingabe-Raster, für das die absoluten Werte berechnet werden sollen.",
	"@@ACos_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@ACos_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@ACos_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@ACos_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@ACos_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@ACos_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@ACos_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@ACos_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@ACos_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@ACos_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@ACos_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@ACos_Raster_tag0@@": "Die Eingabe, für die die Arkuskosinuswerte berechnet werden sollen.",
	"@@ACosH_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@ACosH_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@ACosH_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@ACosH_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@ACosH_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@ACosH_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@ACosH_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@ACosH_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@ACosH_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@ACosH_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@ACosH_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@ACosH_Raster_tag0@@": "Die Eingabe, für die die Areakosinus-Hyperbolicus-Werte berechnet werden sollen.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "Die Ergebnisse der Funktion \"Sichtbare Reflexion\" können auch als Albedo ausgedrückt werden. Dabei handelt es sich um den Prozentsatz der verfügbaren Energie, der von der Planetenoberfläche reflektiert wird. Albedo-Daten werden von wissenschaftlichen Benutzern für die komplexe Modellierung und technische Fernerkundungsanwendungen verwendet.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Deaktiviert: Die Funktion gibt die Werte der sichtbaren Reflexion zurück. Dies ist die Standardeinstellung.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Aktiviert: Die Funktion gibt 32-Bit-Gleitkommadaten zurück, normalerweise im Bereich zwischen 0,0 und 1,0. Bei Auswahl dieser Option werden keine Daten abgeschnitten.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Da der Ausgabe-Datentyp für Albedo ein Gleitkommawert ist, müssen Sie als gewünschten <strong>Ausgabepixeltyp</strong> explizit entweder 32-Bit-Gleitkommazahlen oder 64 Bit mit doppelter Genauigkeit festlegen. Der Parameter <strong>Ausgabepixeltyp</strong> befindet sich im Menü der Rasterfunktion <strong>Sichtbare Reflexion</strong> auf der Registerkarte <strong>Allgemein</strong>. Wenn der <strong>Ausgabepixeltyp</strong> für die <strong>Albedo</strong>-Option nicht richtig festgelegt wird, sind die Ergebniswerte ungültig und haben den Wert 0.",
	"@@Apparent-Reflectance_Offset_tag0@@": "Der skalierte Albedo-Wert kann optional über einen Versatzwert verfügen:",
	"@@Apparent-Reflectance_Offset_tag1@@": "Bei 16-Bit-Datentypen ohne Vorzeichen beträgt der Standardskalierungsversatz 5.000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "Bei 8-Bit-Datentypen ohne Vorzeichen beträgt der Standardskalierungsversatz 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "Wenn die Ausgabe Albedo ist, wird keine Skalierung angewendet.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "Sie können diesen Wert für jedes Band manuell festlegen oder ändern. Die entsprechenden Informationen finden Sie in den Metadaten des Eingabe-Raster-Produkts.",
	"@@Apparent-Reflectance_Raster_tag0@@": "Das Raster-Produkt, auf das die sichtbare Reflexion angewendet wird.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "Der Ausgabewert für sichtbare Reflexion kann als ganzzahliger Wert ausgedrückt werden. Der Skalierungsfaktor wird mit Albedo multipliziert, um alle Gleitkommawerte in ganzzahlige Werte umzuwandeln.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Wenn der Skalierungsfaktor ${0} beträgt oder nicht festgelegt wurde, wird in Abhängigkeit vom Pixeltyp der Eingabedaten der Standardskalierungsfaktor angewendet:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "Bei 16-Bit-Datentypen ohne Vorzeichen beträgt der Standardskalierungsfaktor 50.000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "Bei 8-Bit-Datentypen ohne Vorzeichen beträgt der Standardskalierungsfaktor 255.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "Der Skalierungsfaktor wird immer dann angewendet, wenn es sich bei der Ausgabe um sichtbare Reflexion handelt. Wenn die Ausgabe Albedo ist, wird keine Skalierung angewendet.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Dies ist der Höhenwert, der in Grad ausgedrückt wird. Dieser wird vom System gefüllt, wenn die entsprechenden Informationen aus den Metadaten gelesen werden können.  Sie können diesen Wert manuell festlegen oder ändern.",
	"@@ArgStatistics_Max_tag0@@": "Der von Ihnen festgelegte Maximalwert ist der höchste Wert, der vom Ende der Dauer nicht überschritten werden darf.",
	"@@ArgStatistics_Max_tag1@@": "Diese Eingabe ist nur bei der Dauer-Methode anwendbar.",
	"@@ArgStatistics_Method_tag0@@": "Auswahl der Statistikmethode für die Berechnung:",
	"@@ArgStatistics_Method_tag1@@": "ArgMax: Das Argument des Maximums. Es gibt den ${Band index} zurück, für den das jeweilige Pixel seinen Maximalwert aus allen Bändern erreicht. Allen Raster-Bändern aus jedem Eingabe-Raster wird ein mit 0 beginnender inkrementeller Bandindex zugewiesen. Die Sortierung erfolgt zuerst nach dem Eingabe-Raster-Index und dann nach der relativen Bandreihenfolge in den Eingabe-Rastern.",
	"@@ArgStatistics_Method_tag2@@": "ArgMedian: Das Argument des Medians. Es gibt den ${Band index} zurück, für den das jeweilige Pixel den Medianwert der Werte aus allen Bändern erreicht.",
	"@@ArgStatistics_Method_tag3@@": "ArgMin: Das Argument des Minimums. Es gibt den ${Band index} zurück, für den das jeweilige Pixel seinen Minimalwert aus allen Bändern erreicht.",
	"@@ArgStatistics_Method_tag4@@": "Dauer: Die Dauer-Methode sucht nach den längsten aufeinanderfolgenden Elementen im Array, wobei jedes Element einen Wert größer als oder gleich <strong>Min</strong> und kleiner als oder gleich <strong>Max</strong> aufweist. Die Methode gibt dann die Länge zurück.",
	"@@ArgStatistics_Min_tag0@@": "Der von Ihnen festgelegte Minimalwert ist der niedrigste Wert und darf vom Beginn der Dauer nicht unterschritten werden.",
	"@@ArgStatistics_Min_tag1@@": "Diese Eingabe ist nur bei der Dauer-Methode anwendbar.",
	"@@ArgStatistics_Rasters_tag0@@": "Das Eingabe-Raster, für das Sie die verschiedenen statistischen Methoden ausführen.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "Eine Konstanten-Eingabe, die zurückgegeben wird, wenn kein definitiver Maximum-, Minimum- oder Median-Wert erhalten werden kann. Das häufigste Szenario dafür ist das, bei dem der Maximum- oder Minimum-Wert in den Werten aus allen Bändern mehrfach auftritt. Der Standardwert für die nicht definierte Konstante beträgt 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "Die nicht definierte Klasse ist nur anwendbar, wenn die Methode <strong>ArgMax</strong>, <strong>ArgMin</strong> oder <strong>ArgMedian</strong> ist.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Gibt an, ob NoData-Werte bei der statistischen Berechnung ignoriert werden.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Aktiviert: Bei der Analyse werden alle gültigen Pixel in den Eingabe-Rastern einbezogen und alle NoData-Pixel ignoriert.",
	"@@ArgStatistics_ignorenodata_tag2@@": "Deaktiviert: Wenn NoData-Werte für die Pixel in den Eingabe-Rastern vorhanden sind, wird bei der Analyse \"NoData\" zurückgegeben. Dies ist die Standardeinstellung.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Arithmetic_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Arithmetic_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Arithmetic_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Arithmetic_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Arithmetic_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Arithmetic_Operation_tag0@@": "Die arithmetische Operation, die zwischen zwei Eingabe-Rastern ausgeführt werden soll.",
	"@@Arithmetic_Operation_tag1@@": "Die folgenden Optionen sind verfügbar:",
	"@@Arithmetic_Operation_tag2@@": "<strong>Divide</strong>: Gibt das teilbare Ergebnis aus den entsprechenden Pixelwerten für jedes Raster aus.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Minus</strong>: Gibt die Differenz zwischen den entsprechenden Pixelwerten für jedes Raster aus. Dies kann verwendet werden, um die Veränderungsdetektion zu berechnen.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Modus</strong>: Gibt den Pixelwert aller überlappenden Pixel aus, der am häufigsten auftritt. Wenn es beispielsweise sechs Bänder in einem Raster gibt, gibt es sechs überlappende Pixel. Für die Werte 4, 5, 6, 4, 7, 9 beträgt der Moduswert 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Multiply</strong>: Gibt das Produkt der entsprechenden Pixelwerte für jedes Raster aus. Dies kann verwendet werden, um einige Kostenfunktionen auszuführen.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Plus</strong>: Gibt die Summe aller entsprechenden Pixelwerte für jedes Raster aus.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Power</strong>: Gibt das Produkt der entsprechenden Pixelwerte potenziert mit dem Eingabe-Raster oder dem Skalar aus.",
	"@@Arithmetic_Raster_tag0@@": "Das erste Eingabe-Raster-Dataset.",
	"@@Arithmetic_Raster2_tag0@@": "Das zweite Eingabe-Raster-Dataset.",
	"@@ASin_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@ASin_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@ASin_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@ASin_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@ASin_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@ASin_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@ASin_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@ASin_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@ASin_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@ASin_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@ASin_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@ASin_Raster_tag0@@": "Die Eingabe, für die die Arkussinuswerte berechnet werden sollen.",
	"@@ASinH_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@ASinH_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@ASinH_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@ASinH_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@ASinH_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@ASinH_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@ASinH_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@ASinH_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@ASinH_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@ASinH_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@ASinH_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@ASinH_Raster_tag0@@": "Die Eingabe, für die die Areasinuswerte berechnet werden sollen.",
	"@@Aspect_Raster_tag0@@": "Das Eingabe-DEM, das zum Ableiten des Ausrichtungs-Datasets verwendet wird.",
	"@@Aspect-Slope_Raster_tag0@@": "Das Eingabe-DEM.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "Skalierungsfaktor, der zum Konvertieren der Höhenwerte für die folgenden beiden Zwecke verwendet wird:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "Konvertiert die Höhenwerte (z. B. Meter oder Fuß) in die horizontalen Koordinateneinheiten des Datasets, die in Fuß, Metern oder Grad vorliegen können.",
	"@@Aspect-Slope_Z-Factor_tag2@@": "Fügt vertikale Überhöhung als visuellen Effekt hinzu.",
	"@@ATan_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@ATan_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@ATan_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@ATan_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@ATan_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@ATan_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@ATan_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@ATan_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@ATan_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@ATan_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@ATan_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@ATan_Raster_tag0@@": "Die Eingabe, für die die Arkustangenswerte berechnet werden sollen.",
	"@@ATan2_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@ATan2_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@ATan2_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@ATan2_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@ATan2_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@ATan2_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@ATan2_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@ATan2_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@ATan2_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@ATan2_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@ATan2_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@ATan2_Raster_tag0@@": "Die Eingabe, die den Zähler oder Y-Wert angibt und beim Berechnen des Arkustangens verwendet werden soll.",
	"@@ATan2_Raster2_tag0@@": "Die Eingabe, die den Nenner oder X-Wert angibt und beim Berechnen des Arkustangens verwendet werden soll.",
	"@@ATanH_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@ATanH_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@ATanH_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@ATanH_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@ATanH_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@ATanH_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@ATanH_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@ATanH_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@ATanH_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@ATanH_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@ATanH_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@ATanH_Raster_tag0@@": "Die Eingabe, für die die Areatangenswerte berechnet werden sollen.",
	"@@Attribute-Table_Raster_tag0@@": "Das Eingabe-Raster.",
	"@@Attribute-Table_Table-Type_tag0@@": "Die Eingabe in die Eingabe-Attributtabelle kann mit dem Typ <strong>Manuell</strong> erfolgen, wobei Sie jedem Wert einen Klassennamen und eine Farbe zuweisen. Sie können auch eine vorhandene Tabelle referenzieren, die aus einer ${.dbf}-Datei stammen kann.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Definieren Sie die Bandarithmetikformel, wenn Sie <strong>Benutzerdefiniert</strong> als <strong>Methode</strong> auswählen.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "Wenn Sie einen vordefinierten Index als <strong>Methode</strong> auswählen, definieren Sie die richtigen Bänder des Eingabe-Raster-Datasets gemäß dem jeweiligen Index.",
	"@@Band-Arithmetic_Method_tag0@@": "Der Typ des Bandarithmetikalgorithmus, den Sie bereitstellen möchten. Sie können einen benutzerdefinierten Algorithmus definieren oder einen vordefinierten Index auswählen.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong>: Burn Area Index, Brandflächenindex",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>CIg</strong>: Chlorophyll Index – Green",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>Clre</strong>: Chlorophyll Index – Red Edge",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Tonmineralien</strong>: Tonmineralienverhältnis",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong>: Erweiterter Vegetationsindex",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Eisenmineralien</strong>: Verhältnis von Eisenmineralien",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong>: Global Environmental Monitoring Index",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong>: Green Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong>: Green Vegetation Index Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Eisenoxid</strong>: Eisenoxidverhältnis",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong>: Modified Normalized Difference Water Index",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong>: Modified Triangulated Vegetation Index (zweite Iteration)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>Modified SAVI</strong>: Modified Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong>: Normalized Burn Ratio Index",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong>: Normalized Difference Built-up Index",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong>: Normalized Difference Moisture Index",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong>: Normalized Difference Snow Index",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong>: Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong>: Red-Edge Normalized Difference Vegetation Index",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong>: Normalized Difference Water Index",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong>: Perpendicular Vegetation Index",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong>: Red Edge Triangulated Vegetation Index",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong>: Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong>: Simple Ratio",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong>: Red-Edge Simple Ratio",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Sultan-Formel</strong>: Sultan-Formel",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>Transformierter SAVI</strong>: Transformed Soil Adjusted Vegetation Index",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>Benutzerdefiniert</strong>: Ermöglicht die Definition eines benutzerdefinierten Bandarithmetikausdrucks.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong>: Visible Atmospherically Resistant Index",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong>: Weighted Normalized Difference Water Index",
	"@@Band-Arithmetic_Raster_tag0@@": "Das Eingabe-Raster.",
	"@@Binary-Thresholding_Raster_tag0@@": "Das Eingabe-Raster.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Bitwise-And_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Bitwise-And_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Bitwise-And_Raster_tag0@@": "Die erste Eingabe, die bei dieser bitweisen Operation verwendet werden soll.",
	"@@Bitwise-And_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Bitwise-And_Raster2_tag0@@": "Die zweite Eingabe, die bei dieser bitweisen Operation verwendet werden soll.",
	"@@Bitwise-And_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "Die Eingabe, auf die die Verschiebung angewendet werden soll.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "Die Eingabe, die die Anzahl der Positionen definiert, um die die Bits verschoben werden.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Bitwise-Not_Raster_tag0@@": "Das Eingabe-Raster, für das die Operation mit \"Bitwise Not\" (Komplementoperation) ausgeführt werden soll.",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Bitwise-Or_Raster_tag0@@": "Die erste Eingabe, die bei dieser bitweisen Operation verwendet werden soll.",
	"@@Bitwise-Or_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Bitwise-Or_Raster2_tag0@@": "Die zweite Eingabe, die bei dieser bitweisen Operation verwendet werden soll.",
	"@@Bitwise-Or_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "Die Eingabe, auf die die Verschiebung angewendet werden soll.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "Die Eingabe, die die Anzahl der Positionen definiert, um die die Bits verschoben werden.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Bitwise-Xor_Raster_tag0@@": "Die erste Eingabe, die bei dieser bitweisen Operation verwendet werden soll.",
	"@@Bitwise-Xor_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Bitwise-Xor_Raster2_tag0@@": "Die zweite Eingabe, die bei dieser bitweisen Operation verwendet werden soll.",
	"@@Bitwise-Xor_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Boolean-and_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Boolean-and_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Boolean-and_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Boolean-and_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Boolean-and_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Boolean-and_Raster_tag0@@": "Die erste Eingabe, die bei dieser booleschen Operation verwendet werden soll.",
	"@@Boolean-and_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Boolean-and_Raster2_tag0@@": "Die zweite Eingabe, die bei dieser booleschen Operation verwendet werden soll.",
	"@@Boolean-and_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Boolean-Not_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Boolean-Not_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Boolean-Not_Raster_tag0@@": "Die erste Eingabe, die bei dieser booleschen Operation verwendet werden soll.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Boolean-Or_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Boolean-Or_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Boolean-Or_Raster_tag0@@": "Die erste Eingabe, die bei dieser booleschen Operation verwendet werden soll.",
	"@@Boolean-Or_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Boolean-Or_Raster2_tag0@@": "Die zweite Eingabe, die bei dieser booleschen Operation verwendet werden soll.",
	"@@Boolean-Or_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Boolean-Xor_Raster_tag0@@": "Die erste Eingabe, die bei dieser booleschen Operation verwendet werden soll.",
	"@@Boolean-Xor_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Boolean-Xor_Raster2_tag0@@": "Die zweite Eingabe, die bei dieser booleschen Operation verwendet werden soll.",
	"@@Boolean-Xor_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Buffered_Raster_tag0@@": "Das Eingabe-Raster muss lokal gespeichert werden.",
	"@@Calculator_Cellsize-Type_tag0@@": "Die Zellengröße, mit der das Ausgabe-Raster erstellt wird.",
	"@@Calculator_Cellsize-Type_tag1@@": "Für die Ausgabezellengröße stehen Ihnen in der Dropdown-Liste folgende Optionen zur Auswahl:",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>Erste von</strong>: Die Zellengröße der ersten Raster-Variable.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Min. von</strong>: Die minimale Zellengröße der Eingabe-Raster.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Max. von</strong>: Die maximale Zellengröße der Eingabe-Raster.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Mittelwert von</strong>: Die durchschnittliche Zellengröße der Eingabe-Raster.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Letzte von</strong>: Die Zellengröße der letzten Raster-Variable.",
	"@@Calculator_Cellsize-Type_tag12@@": "Die Standardauswahl lautet <strong>Max. von</strong>.",
	"@@Calculator_Expression_tag0@@": "Erstellen Sie einen algebraischen Ausdruck, um eine räumliche Analyse für das Eingabe-Raster auszuführen.",
	"@@Calculator_Expression_tag1@@": "Bei der Erstellung eines Ausdrucks können alle vorhandenen mathematischen Funktionen aufgerufen werden. Die verfügbaren Operatoren sind nachstehend aufgeführt.",
	"@@Calculator_Expression_tag2@@": "Arithmetische Operationen",
	"@@Calculator_Expression_tag3@@": "Addition: +",
	"@@Calculator_Expression_tag4@@": "Division: /",
	"@@Calculator_Expression_tag5@@": "Modulo: %",
	"@@Calculator_Expression_tag6@@": "Multiplikation: *",
	"@@Calculator_Expression_tag7@@": "Potenz: **",
	"@@Calculator_Expression_tag8@@": "Subtraktion: -",
	"@@Calculator_Expression_tag9@@": "Boolesche Operationen",
	"@@Calculator_Expression_tag10@@": "Boolean And: &&",
	"@@Calculator_Expression_tag11@@": "Boolean Or: ||",
	"@@Calculator_Expression_tag12@@": "Verhältnisoperationen",
	"@@Calculator_Expression_tag13@@": "Gleich: ==",
	"@@Calculator_Expression_tag14@@": "Größer als: >",
	"@@Calculator_Expression_tag15@@": "Größer als oder gleich: >=",
	"@@Calculator_Expression_tag16@@": "Kleiner als: <",
	"@@Calculator_Expression_tag17@@": "Kleiner als oder gleich: <=",
	"@@Calculator_Expression_tag18@@": "Ungleich: !=",
	"@@Calculator_Expression_tag19@@": "Zusätzliche Operationen",
	"@@Calculator_Expression_tag20@@": "Mindestens zwei Raster pro Pixel: min(a,b)",
	"@@Calculator_Expression_tag21@@": "Maximal zwei Raster pro Pixel: max(a,b)",
	"@@Calculator_Expression_tag22@@": "Hier einige Beispiele für Ausdrücke:",
	"@@Calculator_Expression_tag23@@": "Einfache Bedingungsanweisung: In einem Raster (angegeben mit \"T\") werden Höhenwerte über 4.000 Fuß gesucht. Anschließend wird diesen Flächen ein Wert von 1 und allen anderen Flächen ein Wert von 0 zugewiesen.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Geschachtelte Bedingungsanweisung: Es werden Flächen mit einer Neigung (angegeben mit \"b1\") von weniger als 10 Grad und einem NDVI (angegeben mit \"b2\") größer 0,5 gesucht. Diesen Flächen wird dann ein Wert von 1 zugewiesen. Den restlichen Bereichen, bei denen die Neigung mehr als 10 Grad und die Höhe (angegeben mit \"b3\") mehr als 2.500 Fuß beträgt, wird der Wert 2 zugewiesen. Allen anderen Bereichen wird der Wert 3 zugewiesen.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Die Ausdehnung für das Ausgabe-Raster auswählen:</p><ul><li><p>Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.</p></li><li>Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.</li><li>Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.</li><li>Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "Der benutzerdefinierte Variablenname und das Eingabe-Raster.",
	"@@Classify_Input-Definition-File_tag0@@": "Die eingegebene Esri Classifier Definition-Datei (${.ecd}), die die Statistiken und weitere Klassifizierungsinformationen für das Dataset, den Klassifikator und die ausgewählten Attribute enthält.",
	"@@Classify_Raster_tag0@@": "Das Raster-Dataset, das klassifiziert werden soll.",
	"@@Classify_Raster2_tag0@@": "Ein optionales Zusatz-Raster-Dataset, das in den Klassifikator integriert werden soll, z. B. ein segmentiertes Bild, ein Multispektralbild oder Höhendaten, mit denen eine stabilere Klassifizierungsdefinition für das Dataset generiert wird. Das Raster-Dataset für diesen Parameter muss mit dem zum Erstellen der eingegebenen Esri Classifier Definition-Datei verwendeten Raster-Dataset übereinstimmen.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "Die Ausschneideausdehnung kann mit folgenden Optionen angegeben werden:",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Raster zum Ausschneiden</strong>: Ausdehnung des Rasters zum Ausschneiden",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Benutzerdefinierte Ausdehnung</strong>: Minimale und maximale X- und Y-Koordinaten",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Aktuelle Kartenausdehnung</strong>: Aktuelle Ausdehnung der Kartenanzeige",
	"@@Clip_Clipping-Raster_tag0@@": "Der zum Ausschneiden verwendete Raster-Layer.",
	"@@Clip_Clipping-Type_tag0@@": "Geben Sie an, ob Sie die Fläche innerhalb oder außerhalb der ausgeschnittenen Geometrie beibehalten möchten.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Innerhalb ausschneiden</strong>: Bilddaten innerhalb der Ausschneideausdehnung werden entfernt.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Außerhalb ausschneiden</strong>: Bilddaten außerhalb der Ausschneideausdehnung werden entfernt.",
	"@@Clip_Custom-Extent_tag0@@": "Geben Sie die vier Koordinaten an, die die Ausdehnung des Rahmens zum Ausschneiden des Rasters definieren.",
	"@@Clip_Output-Extent_tag0@@": "Die X- und Y-Koordinaten der aktuellen Ausschneideausdehnung.",
	"@@Clip_Output-Extent_tag1@@": "Die Schaltfläche <strong>Aktuelle Kartenausdehnung erfassen</strong> verwendet die Kartenausdehnung für die aktive Karte.",
	"@@Clip_Raster_tag0@@": "Der Eingabe-Raster-Layer.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "Wenn dieser Parameter ausgewählt ist, werden die Daten gemäß der Geometrie der angegebenen Feature-Class ausgeschnitten.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Deaktiviert: Die Funktion verwendet die von <strong>Rechteck</strong> angegebene ausgeschnittene Geometrie. Dies ist die Standardeinstellung.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Aktiviert: Die Funktion verwendet die von einer Feature-Class definierte ausgeschnittene Geometrie.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "Der Typ der durchzuführenden Farbkonvertierung:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "HSV in RGB",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "RGB in HSV",
	"@@Color-Model-Conversion_Raster_tag0@@": "Das Eingabe-Raster.",
	"@@Colormap_Color-Ramp_tag0@@": "Wählen Sie einen vorhandenen Farbverlauf aus.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Auswählen des Farbschematyps zum Rendern des Eingabe-Rasters",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Farbverlauf: Einen Farbverlauf verwenden.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Colormap: Eine vorhandene Colormap verwenden.",
	"@@Colormap_Colormap_tag0@@": "Die folgenden Standard-Colormaps sind über die Dropdown-Liste verfügbar:",
	"@@Colormap_Colormap_tag1@@": "Höhe: Eine Colormap, die allmählich von Zyan über Violett in Schwarz übergeht.",
	"@@Colormap_Colormap_tag2@@": "Grau: Eine Colormap, die allmählich von Schwarz in Weiß übergeht.",
	"@@Colormap_Colormap_tag7@@": "Schummerung: Eine Graustufen-Colormap zur 3D-Darstellung der Terrain-Oberfläche, wobei die relative Position der Sonne bei der Schummerung des Bildes berücksichtigt wird.",
	"@@Colormap_Colormap_tag3@@": "NDVI: Eine Colormap zum Visualisieren von Vegetation. Werte um Null sind blau. Niedrige Werte sind braun. Dann gehen die Farben allmählich von Rot über Orange, Gelb, Grün bis in Schwarz über, da der Vegetationsindex von niedrig nach hoch verläuft.",
	"@@Colormap_Colormap_tag4@@": "NDVI2: Eine Colormap zum Visualisieren von Vegetation. Niedrige Werte reichen von Weiß bis Grün. Die Farbpalette reicht von Grau über Lila, Violett, Dunkelblau bis hin zu Schwarz, da der Vegetationsindex von niedrig nach hoch verläuft.",
	"@@Colormap_Colormap_tag5@@": "NDVI3: Eine Colormap zum Visualisieren von Vegetation. Werte um Null sind blau. Dann ändern sich die Farben allmählich von Rot über Orange bis hin zu Grün, da der Vegetationsindex von niedrig nach hoch verläuft.",
	"@@Colormap_Colormap_tag6@@": "Zufällig: Eine zufällige Colormap.",
	"@@Colormap_Raster_tag0@@": "Das Eingabe-Raster.",
	"@@Colormap-To-RGB_Raster_tag0@@": "Das Eingabe-Raster der Colormap.",
	"@@Complex_Raster_tag0@@": "Das Eingabe-Raster.",
	"@@Composite-Bands_Rasters_tag0@@": "Verwenden Sie die Dropdown-Liste oder die Schaltfläche <strong>Durchsuchen</strong>, um die Raster-Eingaben auszuwählen.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.</p><ul><li>Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.</li><li>Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.</li><li>Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.</li><li>Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.</li><li>Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Con-function_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Con-function_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Con-function_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Con-function_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Con-function_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Con_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Con_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Con_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Con_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Con_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Con_False-Raster_tag0@@": "Die Eingabe, deren Werte als Ausgabepixelwerte verwendet werden, wenn die Bedingung falsch (false) ist. Es kann ein Raster mit ganzzahligen Werten oder mit Gleitkommas oder ein konstanter Wert sein.",
	"@@Con_Raster_tag0@@": "Das Eingabe-Raster stellt das boolesche Ergebnis einer logischen mathematischen Raster-Funktion dar. Die Werte sind 1 (für TRUE) oder 0 (für FALSE). Das Raster kann ein ganzzahliges oder ein Gleitkomma-Raster sein.",
	"@@Con_True-Raster_tag0@@": "Die Eingabe, deren Werte als Ausgabepixelwerte verwendet werden, wenn die Bedingung wahr (true) ist. Es kann ein Raster mit ganzzahligen Werten oder mit Gleitkommas oder ein konstanter Wert sein.",
	"@@Constant_Constant_tag0@@": "Der Wert der Konstanten, die dem virtuellen Raster hinzugefügt werden soll.",
	"@@Constant_Raster-Info_tag0@@": "Verwenden Sie die Schaltfläche <strong>Vorlagen-Raster laden</strong>, um eine Vorlage aus einem Verzeichnis oder Portal zu laden.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "Die Stärke der auf die Konturlinie anzuwendende Glättung. Der Standardwert ist 2,5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "Ein niedrigerer Wert erzeugt eine Konturlinie mit höherer Granularität und geringerer Glättung, während ein höherer Wert eine Konturlinie mit stärkerer Glättung erzeugt, die weniger stufig aussieht.",
	"@@Contour_Contour-Interval_tag0@@": "Der Höhenunterschied zwischen Konturlinien.",
	"@@Contour_Contour-Interval_tag1@@": "Ein kleines Konturlinienintervall auf relativ ebenen Flächen, wobei größere Konturlinienintervalle in variablem oder bergigem Terrain verwendet werden.",
	"@@Contour_Contour-Type_tag0@@": "Der Typ der Konturlinie, die erstellt werden soll:",
	"@@Contour_Contour-Type_tag1@@": "<strong>Konturlinienfüllung</strong>: Füllt die Fläche jeder Konturlinie mit dem quantisierten Höhenwert.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Konturlinien</strong>: Verbindet Punkte mit gleicher Höhe, um eine Linie zu erstellen, die eine konstante Höhe darstellt.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Nur Oberfläche glätten</strong>: Glättet den Eingabe-Höhen-Layer, erzeugt jedoch keine Konturlinien.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "Die Indexkonturlinie, die als fett formatierte Linie dargestellt wird.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "Der Standardwert ist 5, daher ist jede 5. Konturlinie fett formatiert.",
	"@@Contour_Number-Of-Contours_tag0@@": "Die Anzahl der Konturlinien, die in der Anzeige erstellt werden sollen.  Hiermit wird das Konturlinienintervall dynamisch angepasst, damit das Terrain in die Anzeige passt, wobei standardisierte Intervalle wie 1, 5, 10 usw. beibehalten werden.",
	"@@Contour_Raster_tag0@@": "Ein einzelnes Band-Raster-Höhen-Dataset.",
	"@@Contour_Z-Base_tag0@@": "Der Basiskonturlinienwert. Konturlinien werden ober- und unterhalb dieses Wertes den Anforderungen entsprechend erstellt, um den gesamten Wertebereich des Eingabe-Rasters abzudecken. Die Standardeinstellung ist 0.",
	"@@Contour_Z-Base_tag1@@": "Der Wert 0 stellt je nach Quellhöhen-Dataset häufig die mittlere Meeresspiegelhöhe dar.",
	"@@Contour_Z-Factor_tag0@@": "Der Einheit-Konvertierungsfaktor, der beim Erstellen von Konturlinien verwendet wird. Der Standardwert ist 1.",
	"@@Contour_Z-Factor_tag1@@": "Die Konturlinien werden basierend auf den Z-Werten im Eingabe-Raster erstellt, die oft in den Maßeinheiten Meter oder Fuß gemessen werden. Mit dem Standardwert 1 werden die Konturlinien in den gleichen Einheiten wie die Z-Werte im Eingabe-Raster angegeben. Um Konturlinien in einer anderen Einheit als derjenigen der Z-Werte zu erstellen, legen Sie den entsprechenden Wert für den Z-Faktor fest. Beachten Sie, dass für dieses Werkzeug die XY-Geländeeinheiten und die Z-Oberflächeneinheit nicht einheitlich sein müssen.",
	"@@Contour_Z-Factor_tag2@@": "Wenn die Höhenwerte in Ihrem Eingabe-Raster beispielsweise in Fuß vorliegen, die Konturlinien jedoch basierend auf der Einheit Meter erstellt werden sollen, legen Sie den Z-Faktor auf 0,3048 fest (da 1 Fuß = 0,3048 Meter entspricht).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Passen Sie die Helligkeit des Raster-Layers an.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "Sie können den Helligkeitversatz mit dem Schieberegler ändern oder einen Wert eingeben.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Passen Sie den Kontrast des Raster-Layers an.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "Sie können den Kontrastversatz mit dem Schieberegler ändern oder einen Wert eingeben.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "Das Eingabe-Raster, für das Helligkeit und Kontrast bearbeitet werden sollen.",
	"@@Convolution_kernel_tag0@@": "<p>Diese Tabelle zeigt, wie die einzelnen Pixel bei der Filterung gewichtet werden. Diese Tabelle kann bearbeitet werden, wenn Sie <strong>Benutzerdefiniert</strong> als <strong>Typ</strong> auswählen.</p>",
	"@@Convolution_Raster_tag0@@": "Das Eingabe-Raster-Dataset.",
	"@@Convolution_Type_tag0@@": "Wählen Sie den Filtertyp aus, den Sie durchführen möchten. Es sind Optionen zum Scharf- und Weichzeichnen sowie zum Erkennen von Kanten verfügbar; außerdem können Sie eigene Kerne-basierte Filter festlegen.",
	"@@Corridor_Distance-Raster-1_tag0@@": "Das erste Eingabe-Entfernungs-Raster Es sollte sich um eine akkumulierte Kostenentfernungsausgabe aus \"Kostenentfernung\" oder \"Pfadentfernung\" handeln.",
	"@@Corridor_Distance-Raster-2_tag0@@": "Das zweite Eingabe-Entfernungs-Raster Es sollte sich um eine akkumulierte Kostenentfernungsausgabe aus \"Kostenentfernung\" oder \"Pfadentfernung\" handeln.",
	"@@Cos_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Cos_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Cos_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Cos_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Cos_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Cos_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Cos_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Cos_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Cos_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Cos_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Cos_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Cos_Raster_tag0@@": "Die Eingabe, für die die Kosinuswerte berechnet werden sollen.",
	"@@CosH_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@CosH_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@CosH_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@CosH_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@CosH_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@CosH_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@CosH_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@CosH_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@CosH_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@CosH_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@CosH_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@CosH_Raster_tag0@@": "Die Eingabe, für die die Werte des Cosinus Hyperbolicus berechnet werden sollen.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Dieser Parameter simuliert den steigenden Aufwand zur Vermeidung von Kosten bei steigenden akkumulativen Kosten. Dies dient zur Modellierung der Müdigkeit des Reisenden. Die zunehmenden akkumulativen Kosten zur Erreichung einer Zelle werden mit der Resistenzrate multipliziert und den Kosten für die Bewegung in die nachfolgende Zelle hinzugefügt.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Dies ist die geänderte Version einer zusammengesetzten Formel zur Berechnung des Zinssatzes, anhand derer die offensichtlichen Kosten beim Reisen durch eine Zelle berechnet werden. Mit steigendem Wert der Resistenzrate erhöhen sich auch die Kosten der später besuchten Zellen. Je höher die Resistenzrate, desto höher sind die zusätzlichen Kosten zur Erreichung der nächsten Zelle, die für jede nachfolgende Bewegung zusammengefasst werden. Da die Resistenzrate mit der Gesamtrate vergleichbar ist und die akkumulativen Kostenwerte im Allgemeinen sehr hoch sind, werden je nach akkumulativen Kostenwerten geringe Resistenzraten wie 0,005 oder noch kleiner vorgeschlagen.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Cost-Allocation_Capacity_tag0@@": "Definiert die Kostenkapazität für den Reisenden für eine Quelle. Die Kostenberechnungen werden für jede Quelle fortgesetzt, bis die angegebene Kapazität erreicht ist.",
	"@@Cost-Allocation_Capacity_tag1@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Cost-Allocation_Capacity_tag2@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "Ein erforderliches Eingabe-Raster, das die Kosten oder Impedanz für eine planimetrische Bewegung durch jede Zelle definiert. Der Wert an jeder Zellenposition stellt die Kosten pro Einheitenentfernung für die Bewegung durch die Zelle dar. Jeder Zellenpositionswert wird mit der Zellenauflösung multipliziert. Gleichzeitig werden diagonale Bewegungen ausgeglichen, um die Gesamtkosten für die Bewegung durch die Zelle zu erhalten.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "Die Werte im <strong>Kosten-Raster</strong> können ganzzahlige oder Gleitkommawerte sein, sie dürfen jedoch nicht negativ oder 0 sein (negative oder keine Kosten sind nicht zulässig).",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "Der Schwellenwert, den die akkumulativen Kostenwerte nicht überschreiten dürfen. Wenn eine akkumulative Kostenentfernung diesen Wert überschreitet, lautet der Ausgabewert für die Zellenposition ${NoData}. Die maximale Entfernung definiert die Ausdehnung, für die akkumulative Kostenentfernungen berechnet werden. Die Standardentfernung ist die Ausdehnung des Ausgabe-Rasters.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Ein Multiplikator zum Anwenden der Kostenwerte.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Dieser Parameter ermöglicht die Steuerung des Reisemodus oder der Magnitude an einer Quelle. Je größer der Multiplikator, desto höher sind die Kosten, um sich von einer Zelle zur anderen zu bewegen.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Die Werte müssen größer als Null sein. Die Standardeinstellung ist 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Cost-Allocation_Source-Field_tag0@@": "Das Feld für die Zuweisung von Werten zu den Quellenpositionen. Die Eingabe muss ein ganzzahliger Wert sein. Wenn <strong>Werte-Raster</strong> festgelegt wurde, haben die Werte in dieser Eingabe Vorrang gegenüber allen Einstellungen in <strong>Quellfeld</strong>.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "Das erforderliche Eingabe-Raster mit Quellenpositionen.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Dies ist ein Raster zum Festlegen der Zellen oder Positionen, von denen die Entfernung mit den geringsten akkumulativen Kosten für jede Ausgabezellenposition berechnet wird.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "Wenn das <strong>Quell-Raster</strong> ein Gleitkomma ist, muss das <strong>Werte-Raster</strong> festgelegt werden und ein ganzzahliger Wert sein. Das <strong>Werte-Raster</strong> hat Vorrang gegenüber einer beliebigen Einstellung im <strong>Quellfeld</strong>.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "Die Startkosten, mit denen die Kostenberechnungen beginnen. Dieser Parameter ermöglicht die Festlegung der Fixkosten, die mit einer Quelle verknüpft sind. Der Kostenalgorithmus beginnt mit dem hier angegebenen Wert statt mit dem Kostenwert 0.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "Der Wert muss größer gleich 0 sein. Die Standardeinstellung ist 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Definiert die Richtung des Reisenden bei Anwendung der Quellresistenzrate und der Quellstartkosten.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>Aus Quelle</strong>: Die Quellresistenzrate und die Quellstartkosten werden an der Eingabequelle beginnend und in Richtung Nicht-Quellenzellen angewendet. Dies ist die Standardeinstellung.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>Zur Quelle</strong>: Die Quellresistenzrate und die Quellstartkosten werden an jeder Nicht-Quellenzelle beginnend und zurück zur Eingabequelle angewendet.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Geben Sie das Schlüsselwort <strong>Aus Quelle</strong> bzw. <strong>Zur Quelle</strong> ein, das auf alle Quellen angewendet wird, oder legen Sie ein Feld im <strong>Quell-Raster</strong> fest, das die Schlüsselwörter enthält, um die Reiserichtung für jede Quelle zu identifizieren. Dieses Feld muss die Zeichenfolgen ${FROM_SOURCE} oder ${TO_SOURCE} enthalten.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "Das ganzzahlige Eingabe-Raster, das die Zonenwerte identifiziert, die für jede Eingabequellenposition verwendet werden sollen. Für jede Quellenpositionszelle wird der vom <strong>Werte-Raster</strong> definierte Wert allen Zellen zugewiesen, die der Quellenposition für die Berechnung zugeordnet sind. Das <strong>Werte-Raster</strong> hat Vorrang gegenüber einer beliebigen Einstellung für das <strong>Quellfeld</strong>.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Dieser Parameter simuliert den steigenden Aufwand zur Vermeidung von Kosten bei steigenden akkumulativen Kosten. Dies dient zur Modellierung der Müdigkeit des Reisenden. Die zunehmenden akkumulativen Kosten zur Erreichung einer Zelle werden mit der Resistenzrate multipliziert und den Kosten für die Bewegung in die nachfolgende Zelle hinzugefügt.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Dies ist die geänderte Version einer zusammengesetzten Formel zur Berechnung des Zinssatzes, anhand derer die offensichtlichen Kosten beim Reisen durch eine Zelle berechnet werden. Mit steigendem Wert der Resistenzrate erhöhen sich auch die Kosten der später besuchten Zellen. Je höher die Resistenzrate, desto höher sind die zusätzlichen Kosten zur Erreichung der nächsten Zelle, die für jede nachfolgende Bewegung zusammengefasst werden. Da die Resistenzrate mit der Gesamtrate vergleichbar ist und die akkumulativen Kostenwerte im Allgemeinen sehr hoch sind, werden je nach akkumulativen Kostenwerten geringe Resistenzraten wie 0,005 oder noch kleiner vorgeschlagen.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Definiert die Kostenkapazität für den Reisenden für eine Quelle. Die Kostenberechnungen werden für jede Quelle fortgesetzt, bis die angegebene Kapazität erreicht ist.",
	"@@Cost-Back-Link_Capacity_tag1@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Cost-Back-Link_Capacity_tag2@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "Ein erforderliches Eingabe-Raster, das die Kosten oder Impedanz für eine planimetrische Bewegung durch jede Zelle definiert. Der Wert an jeder Zellenposition stellt die Kosten pro Einheitenentfernung für die Bewegung durch die Zelle dar. Jeder Zellenpositionswert wird mit der Zellenauflösung multipliziert. Gleichzeitig werden diagonale Bewegungen ausgeglichen, um die Gesamtkosten für die Bewegung durch die Zelle zu erhalten.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "Die Werte im <strong>Kosten-Raster</strong> können ganzzahlige oder Gleitkommawerte sein, sie dürfen jedoch nicht negativ oder 0 sein (negative oder keine Kosten sind nicht zulässig).",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "Der Schwellenwert, den die akkumulativen Kostenwerte nicht überschreiten dürfen. Wenn eine akkumulative Kostenentfernung diesen Wert überschreitet, lautet der Ausgabewert für die Zellenposition \"NoData\". Die maximale Entfernung definiert die Ausdehnung, für die akkumulative Kostenentfernungen berechnet werden. Die Standardentfernung ist die Ausdehnung des Ausgabe-Rasters.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Ein Multiplikator zum Anwenden der Kostenwerte.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Dieser Parameter ermöglicht die Steuerung des Reisemodus oder der Magnitude an einer Quelle. Je größer der Multiplikator, desto höher sind die Kosten, um sich von einer Zelle zur anderen zu bewegen.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Die Werte müssen größer als Null sein. Die Standardeinstellung ist 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "Das erforderliche Eingabe-Raster mit Quellenpositionen.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Dies ist ein Raster zum Festlegen der Zellen oder Positionen, von denen die Entfernung mit den geringsten akkumulativen Kosten für jede Ausgabezellenposition berechnet wird.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "Die Startkosten, mit denen die Kostenberechnungen beginnen. Dieser Parameter ermöglicht die Festlegung der Fixkosten, die mit einer Quelle verknüpft sind. Der Kostenalgorithmus beginnt mit dem hier angegebenen Wert statt mit dem Kostenwert 0.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "Der Wert muss größer gleich 0 sein. Die Standardeinstellung ist 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Definiert die Richtung des Reisenden bei Anwendung der Quellresistenzrate und der Quellstartkosten.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>Aus Quelle</strong>: Die Quellresistenzrate und die Quellstartkosten werden an der Eingabequelle beginnend und in Richtung Nicht-Quellenzellen angewendet. Dies ist die Standardeinstellung.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>Zur Quelle</strong>: Die Quellresistenzrate und die Quellstartkosten werden an jeder Nicht-Quellenzelle beginnend und zurück zur Eingabequelle angewendet.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Geben Sie das Schlüsselwort <strong>Aus Quelle</strong> bzw. <strong>Zur Quelle</strong> ein, das auf alle Quellen angewendet wird, oder legen Sie ein Feld im <strong>Quell-Raster</strong> fest, das die Schlüsselwörter enthält, um die Reiserichtung für jede Quelle zu identifizieren. Dieses Feld muss die Zeichenfolgen ${FROM_SOURCE} oder ${TO_SOURCE} enthalten.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Dieser Parameter simuliert den steigenden Aufwand zur Vermeidung von Kosten bei steigenden akkumulativen Kosten. Dies dient zur Modellierung der Müdigkeit des Reisenden. Die zunehmenden akkumulativen Kosten zur Erreichung einer Zelle werden mit der Resistenzrate multipliziert und den Kosten für die Bewegung in die nachfolgende Zelle hinzugefügt.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Dies ist die geänderte Version einer zusammengesetzten Formel zur Berechnung des Zinssatzes, anhand derer die offensichtlichen Kosten beim Reisen durch eine Zelle berechnet werden. Mit steigendem Wert der Resistenzrate erhöhen sich auch die Kosten der später besuchten Zellen. Je höher die Resistenzrate, desto höher sind die zusätzlichen Kosten zur Erreichung der nächsten Zelle, die für jede nachfolgende Bewegung zusammengefasst werden. Da die Resistenzrate mit der Gesamtrate vergleichbar ist und die akkumulativen Kostenwerte im Allgemeinen sehr hoch sind, werden je nach akkumulativen Kostenwerten geringe Resistenzraten wie 0,005 oder noch kleiner vorgeschlagen.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Cost-Distance_Capacity_tag0@@": "Definiert die Kostenkapazität für den Reisenden für eine Quelle. Die Kostenberechnungen werden für jede Quelle fortgesetzt, bis die angegebene Kapazität erreicht ist.",
	"@@Cost-Distance_Capacity_tag1@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Cost-Distance_Capacity_tag2@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "Ein erforderliches Eingabe-Raster, das die Kosten oder Impedanz für eine planimetrische Bewegung durch jede Zelle definiert. Der Wert an jeder Zellenposition stellt die Kosten pro Einheitenentfernung für die Bewegung durch die Zelle dar. Jeder Zellenpositionswert wird mit der Zellenauflösung multipliziert. Gleichzeitig werden diagonale Bewegungen ausgeglichen, um die Gesamtkosten für die Bewegung durch die Zelle zu erhalten.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "Die Werte im <strong>Kosten-Raster</strong> können ganzzahlige oder Gleitkommawerte sein, sie dürfen jedoch nicht negativ oder 0 sein (negative oder keine Kosten sind nicht zulässig).",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "Der Schwellenwert, den die akkumulativen Kostenwerte nicht überschreiten dürfen. Wenn eine akkumulative Kostenentfernung diesen Wert überschreitet, lautet der Ausgabewert für die Zellenposition \"NoData\". Die maximale Entfernung definiert die Ausdehnung, für die akkumulative Kostenentfernungen berechnet werden. Die Standardentfernung ist die Ausdehnung des Ausgabe-Rasters.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Ein Multiplikator zum Anwenden der Kostenwerte.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Dieser Parameter ermöglicht die Steuerung des Reisemodus oder der Magnitude an einer Quelle. Je größer der Multiplikator, desto höher sind die Kosten, um sich von einer Zelle zur anderen zu bewegen.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Die Werte müssen größer als Null sein. Die Standardeinstellung ist 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Cost-Distance_Source-Raster_tag0@@": "Das erforderliche Eingabe-Raster mit Quellenpositionen.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Dies ist ein Raster zum Festlegen der Zellen oder Positionen, von denen die Entfernung mit den geringsten akkumulativen Kosten für jede Ausgabezellenposition berechnet wird.",
	"@@Cost-Distance_Start-Cost_tag0@@": "Die Startkosten, mit denen die Kostenberechnungen beginnen. Dieser Parameter ermöglicht die Festlegung der Fixkosten, die mit einer Quelle verknüpft sind. Der Kostenalgorithmus beginnt mit dem hier angegebenen Wert statt mit dem Kostenwert 0.",
	"@@Cost-Distance_Start-Cost_tag1@@": "Der Wert muss größer gleich 0 sein. Die Standardeinstellung ist 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Definiert die Richtung des Reisenden bei Anwendung der Quellresistenzrate und der Quellstartkosten.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>Aus Quelle</strong>: Die Quellresistenzrate und die Quellstartkosten werden an der Eingabequelle beginnend und in Richtung Nicht-Quellenzellen angewendet. Dies ist die Standardeinstellung.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>Zur Quelle</strong>: Die Quellresistenzrate und die Quellstartkosten werden an jeder Nicht-Quellenzelle beginnend und zurück zur Eingabequelle angewendet.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Geben Sie das Schlüsselwort <strong>Aus Quelle</strong> bzw. <strong>Zur Quelle</strong> ein, das auf alle Quellen angewendet wird, oder legen Sie ein Feld im <strong>Quell-Raster</strong> fest, das die Schlüsselwörter enthält, um die Reiserichtung für jede Quelle zu identifizieren. Dieses Feld muss die Zeichenfolgen ${FROM_SOURCE} oder ${TO_SOURCE} enthalten.",
	"@@Curvature_Curvature-Type_tag0@@": "Krümmungstyp akzentuiert verschiedene Aspekte der Neigung. Es stehen drei Krümmungstypen zur Verfügung:",
	"@@Curvature_Curvature-Type_tag1@@": "Horizontal: Ist lotrecht zur Richtung der maximalen Neigung. Sie wirkt sich auf die Fließbeschleunigung und -verlangsamung auf einer Oberfläche aus.",
	"@@Curvature_Curvature-Type_tag2@@": "Profil: Ist parallel zur Neigung und gibt die Richtung der maximalen Neigung an. Sie wirkt sich auf die Fließbeschleunigung und -verlangsamung auf der Oberfläche aus.",
	"@@Curvature_Curvature-Type_tag3@@": "Standard: Eine Kombination aus den Krümmungen <strong>Profil</strong> und <strong>Horizontal</strong>.",
	"@@Curvature_DEM_tag0@@": "Ein Raster mit einem digitalen Höhenmodell (DEM).",
	"@@Curvature_Z-Factor_tag0@@": "Durch den Z-Faktor werden die Maßeinheiten der Z-Einheiten angepasst, falls sie sich von den XY-Einheiten der Eingabe-Oberfläche unterscheiden. Falls die XY-Einheiten und die Z-Einheiten in denselben Maßeinheiten ausgedrückt sind, sollte der Z-Faktor auf 1 gesetzt werden. Die Z-Werte der Eingabe-Oberfläche werden bei der Berechnung der endgültigen Ausgabe-Oberfläche mit dem Z-Faktor multipliziert. Wenn beispielsweise die Z-Einheiten in Fuß und die XY-Einheiten in Metern angegeben sind, müssen Sie den Z-Faktor 0,3048 wählen, um die Z-Einheiten von Fuß in Meter umzurechnen (1 Fuß = 0,3048 Meter).",
	"@@Divide_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Divide_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Divide_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Divide_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Divide_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Divide_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Divide_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Divide_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Divide_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Divide_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Divide_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Divide_Raster_tag0@@": "Die Eingabe, deren Wert durch die zweite Eingabe dividiert werden.",
	"@@Divide_Raster_tag1@@": "Für diesen Parameter kann eine Zahl als Eingabe verwendet werden, vorausgesetzt für ${Raster2} wird ein Raster angegeben.",
	"@@Divide_Raster2_tag0@@": "Die Eingabe, durch deren Wert die erste Eingabe dividiert werden muss.",
	"@@Divide_Raster2_tag1@@": "Für diesen Parameter kann eine Zahl als Eingabe verwendet werden, vorausgesetzt für ${Raster} wird ein Raster angegeben.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "Das Eingabe-DEM.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "Der Wert der maximalen Lückenbreite wird verwendet, um die größte Größe einer Lücke anzugeben, die Sie füllen möchten. Wenn die Breite oder die Höhe des Rahmens um die Lücke größer als die maximale Lückenbreite ist, wird die Lücke nicht ausgefüllt. Die Einheiten für diesen Parameter sind die gleichen wie für das Raumbezugssystem der Daten.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Wenn dieser Parameter leer ist oder den Wert ${0} hat, kann keine maximale Breite verwendet werden, sodass alle Lücken gefüllt werden. Der Wert ${-1} bedeutet, dass keine Lückenfüllung vorgenommen wird.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "Der maximale Suchradius, der als Lückenfüllungsmethode verwendet wird. Ein Zwischenraum, der weiter von jedem gültigen Pixel entfernt ist als dieser Schwellenwert, wird als Zwischenraum beibehalten. Die Einheiten für diesen Parameter sind die gleichen wie für das Raumbezugssystem der Daten.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Wenn der Wert dieses Parameters leer ist bzw. ${0} oder ${-1} beträgt, wird dieser Parameter nicht verwendet.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Equal-to_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Equal-to_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Equal-to_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Equal-to_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Equal-to_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Equal-to_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Equal-to_Raster_tag0@@": "Die Eingabe, die mit der zweiten Eingabe auf Gleichheit verglichen wird.",
	"@@Equal-to_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Equal-to_Raster2_tag0@@": "Die Eingabe, die mit der ersten Eingabe auf Gleichheit verglichen wird.",
	"@@Equal-to_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "Die Zellengröße im zu erstellenden Ausgabe-Raster.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Wenn die Zellengröße explizit in den <strong>Analyseumgebungen</strong> festgelegt wurde, ist dies die Standardzellengröße. Wurde sie nicht festgelegt, ist die Ausgabezellengröße mit dem <strong>Quell-Raster</strong> identisch.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Gibt an, ob die Entfernung mithilfe einer planaren (flache Erde) oder geodätischen (Ellipsoid) Methode berechnet werden soll.",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Geodätisch: Die kürzeste Linie zwischen zwei Punkten auf der Erdoberfläche auf einem Sphäroid (Ellipsoid). Deshalb ändern sich die Ergebnisse unabhängig von der Eingabe- oder Ausgabeprojektion nicht. Eine Verwendung für eine geodätische Linie ist die Ermittlung der kürzesten Entfernung zwischen zwei Städten für eine Flugroute. Dies ist auch als Großkreislinie bekannt, wenn eine Kugel anstelle einer Ellipse als Basis dient.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Planar: Bei planaren Messungen werden Entfernungen und Flächen mithilfe der zweidimensionalen kartesischen Mathematik berechnet. Diese Option ist nur bei Messungen in einem projizierten Koordinatensystem verfügbar und die zweidimensionale Ebene dieses Koordinatensystems wird als Basis für die Messungen verwendet.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Definiert den Entfernungsschwellenwert für die Entfernung, innerhalb derer die nächstgelegene Quelle bestimmt wird. Wenn die Entfernung zur nächstgelegenen Quelle den Schwellenwert überschreitet, lautet die Ausgabe für die Zelle ${NoData}.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "Die Standardentfernung ist die Ausdehnung des Ausgabe-Rasters.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "Das Raster, das die Barrieren definiert.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "Das Dataset muss für Bereiche ohne Barrieren ${NoData} enthalten. Barrieren werden von gültigen Werten dargestellt, einschließlich Null.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "Die Barrieren können durch ein Ganzzahl- oder Gleitkomma-Raster definiert sein.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "Das Feld für die Zuweisung von Werten zu den Quellenpositionen. Die Eingabe muss ein ganzzahliger Wert sein. Wenn <strong>Werte-Raster</strong> festgelegt wurde, haben die Werte in dieser Eingabe Vorrang gegenüber allen Einstellungen in <strong>Quellfeld</strong>.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "Ein Raster-Dataset, das die Quellenpositionen bestimmt. Basierend auf einer euklidischen Entfernung wird für jede Zelle in der Ausgabe die nächstgelegene Quelle bestimmt.",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "Der Eingabetyp kann ein ganzzahliger oder ein Gleitkommawert sein.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "Das ganzzahlige Eingabe-Raster, das die Zonenwerte identifiziert, die für jede Eingabequellenposition verwendet werden sollen. Für jede Quellenpositionszelle wird der vom <strong>Werte-Raster</strong> definierte Wert allen Zellen zugewiesen, die der Quellenposition für die Berechnung zugeordnet sind. Das <strong>Werte-Raster</strong> hat Vorrang gegenüber einer beliebigen Einstellung für das <strong>Quellfeld</strong>.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "Die Zellengröße im zu erstellenden Ausgabe-Raster.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Wenn die Zellengröße explizit in den <strong>Analyseumgebungen</strong> festgelegt wurde, ist dies die Standardzellengröße. Wurde sie nicht festgelegt, ist die Ausgabezellengröße mit dem <strong>Quell-Raster</strong> identisch.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Gibt an, ob die Entfernung mithilfe einer planaren (flache Erde) oder geodätischen (Ellipsoid) Methode berechnet werden soll.",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Geodätisch: Die kürzeste Linie zwischen zwei Punkten auf der Erdoberfläche auf einem Sphäroid (Ellipsoid). Deshalb ändern sich die Ergebnisse unabhängig von der Eingabe- oder Ausgabeprojektion nicht. Eine Verwendung für eine geodätische Linie ist die Ermittlung der kürzesten Entfernung zwischen zwei Städten für eine Flugroute. Dies ist auch als Großkreislinie bekannt, wenn eine Kugel anstelle einer Ellipse als Basis dient.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Planar: Bei planaren Messungen werden Entfernungen und Flächen mithilfe der zweidimensionalen kartesischen Mathematik berechnet. Diese Option ist nur bei Messungen in einem projizierten Koordinatensystem verfügbar und die zweidimensionale Ebene dieses Koordinatensystems wird als Basis für die Messungen verwendet.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Definiert den Entfernungsschwellenwert für die Entfernung, innerhalb derer die Richtung zur nächstgelegenen Quelle berechnet wird. Wenn die Entfernung zur nächstgelegenen Quelle den Schwellenwert überschreitet, lautet die Ausgabe für die Zelle ${NoData}.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "Die Standardentfernung ist die Ausdehnung des Ausgabe-Rasters.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "Das Raster, das die Barrieren definiert.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "Das Dataset muss \"NoData\" enthalten, wo keine Barrieren vorhanden sind. Barrieren werden von gültigen Werten dargestellt, einschließlich Null.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "Die Barrieren können durch ein Ganzzahl- oder Gleitkomma-Raster definiert sein.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "Das Eingabe-Raster, das die Zellen oder Positionen bestimmt, für die die euklidische Richtung jeder Ausgabezellenposition berechnet wird.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "Der Eingabetyp kann ein ganzzahliger oder ein Gleitkommawert sein.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "Die Zellengröße im zu erstellenden Ausgabe-Raster.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Wenn die Zellengröße explizit in den <strong>Analyseumgebungen</strong> festgelegt wurde, ist dies die Standardzellengröße. Wurde sie nicht festgelegt, ist die Ausgabezellengröße mit dem <strong>Quell-Raster</strong> identisch.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Gibt an, ob die Entfernung mithilfe einer planaren (flache Erde) oder geodätischen (Ellipsoid) Methode berechnet werden soll.",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Geodätisch: Die kürzeste Linie zwischen zwei Punkten auf der Erdoberfläche auf einem Sphäroid (Ellipsoid). Deshalb ändern sich die Ergebnisse unabhängig von der Eingabe- oder Ausgabeprojektion nicht. Eine Verwendung für eine geodätische Linie ist die Ermittlung der kürzesten Entfernung zwischen zwei Städten für eine Flugroute. Dies ist auch als Großkreislinie bekannt, wenn eine Kugel anstelle einer Ellipse als Basis dient.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Planar: Bei planaren Messungen werden Entfernungen und Flächen mithilfe der zweidimensionalen kartesischen Mathematik berechnet. Diese Option ist nur bei Messungen in einem projizierten Koordinatensystem verfügbar und die zweidimensionale Ebene dieses Koordinatensystems wird als Basis für die Messungen verwendet.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "Der Schwellenwert, den die akkumulativen Entfernungswerte nicht überschreiten dürfen. Wenn eine akkumulative euklidische Entfernung diesen Wert überschreitet, lautet der Ausgabewert für die Zellenposition \"NoData\".",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "Die Standardentfernung ist die Ausdehnung des Ausgabe-Rasters.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "Das Raster, das die Barrieren definiert.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "Das Dataset muss für Bereiche ohne Barrieren ${NoData} enthalten. Barrieren werden von gültigen Werten dargestellt, einschließlich Null.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "Die Barrieren können durch ein Ganzzahl- oder Gleitkomma-Raster definiert sein.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "Das erforderliche Eingabe-Raster, das die Zellen oder Positionen bestimmt, für die die euklidische Entfernung jeder Ausgabezellenposition berechnet wird.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "Der Eingabetyp kann ein ganzzahliger oder ein Gleitkommawert sein.",
	"@@Exp_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Exp_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Exp_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Exp_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Exp_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Exp_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Exp_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Exp_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Exp_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Exp_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Exp_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Exp_Raster_tag0@@": "Die Eingabewerte, für die die Exponentialfunktion zur Basis e ermittelt werden soll.",
	"@@Exp10_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Exp10_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Exp10_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Exp10_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Exp10_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Exp10_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Exp10_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Exp10_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Exp10_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Exp10_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Exp10_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Exp10_Raster_tag0@@": "Die Eingabewerte, für die die Exponentialfunktion zur Basis 10 ermittelt werden soll.",
	"@@Exp2_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Exp2_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Exp2_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Exp2_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Exp2_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Exp2_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Exp2_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Exp2_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Exp2_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Exp2_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Exp2_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Exp2_Raster_tag0@@": "Die Eingabewerte, für die die Exponentialfunktion zur Basis 2 ermittelt werden soll.",
	"@@Extract-Bands_Band_tag0@@": "Wählen Sie die zu extrahierenden Bänder basierend auf der verwendeten Parameteroption für <strong>Methode</strong> aus einer Liste aus.",
	"@@Extract-Bands_Combination_tag0@@": "Die Bandkombination oder Bandreihenfolge. Die Auswahlliste hängt von der angegebenen Option für <strong>Methode</strong> ab. Beispiel: Wenn für <strong>Methode</strong> die Option <strong>Bandnamen</strong> angegeben ist, können Sie eine Kombination aus Blau, Grün und Rot auswählen, um ein Bild in natürlichen Farben zu extrahieren.",
	"@@Extract-Bands_Method_tag0@@": "Wählen Sie zum Extrahieren von Bändern eine der folgenden Methoden aus:",
	"@@Extract-Bands_Method_tag1@@": "<strong>Band-IDs</strong>: Die Bandbezeichnung oder -nummer, die für jeden Sensor eindeutig ist. Sie kann mit den <strong>Bandnamen</strong> identisch sein.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Bandnamen</strong>: Verwendet den Bandnamen, der das Wellenlängenintervall im elektromagnetischen Spektrum darstellt (z. B. Rot, Nahinfrarot, Wärmeinfrarot). Dies kann auch als Bandnummern-ID bezeichnet werden.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Bandwellenlängen</strong>: Die Wellenlänge des elektromagnetischen Spektrums.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Geben Sie die Aktion an, die durchgeführt wird, wenn ein Band innerhalb der Liste der extrahierten Bänder nicht verfügbar ist.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Höchste Übereinstimmung</strong>: Sucht basierend auf der Wellenlänge das beste verfügbare Band, das anstelle des fehlenden verwendet werden soll, damit die Funktion nicht fehlschlägt.",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Fehlgeschlagen</strong>: Wenn im Eingabe-Dataset ein Band fehlt, das im Parameter <strong>Band</strong> angegeben ist, schlägt die Funktion fehl.",
	"@@Extract-Bands_Raster_tag0@@": "Das Raster-Produkt, aus dem das Band oder die Bänder extrahiert werden.",
	"@@Fill_Raster_tag0@@": "Ein Einzelband-Höhen-Raster.",
	"@@Fill_Z-Limit_tag0@@": "Der maximale Höhenunterschied zwischen einer Senke und ihrem Abflusspunkt, der gefüllt werden soll.",
	"@@Fill_Z-Limit_tag1@@": "Alle Senken werden unabhängig von der jeweiligen Tiefe gefüllt, vorausgesetzt, es wird ein Wert für diesen Parameter angegeben.",
	"@@Fill_Z-Limit_tag2@@": "Der Wert für <strong>Z-Limit</strong> muss größer als 0 sein.",
	"@@Float_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Float_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Float_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Float_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Float_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Float_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Float_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Float_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Float_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Float_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Float_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Float_Raster_tag0@@": "Das Eingabe-Raster, das in einen Gleitkommawert konvertiert werden soll.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "Das Eingabe-Raster, das die Fließrichtung aus jeder Zelle anzeigt.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "Das Fließrichtungs-Raster kann mit der Funktion <strong>Fließrichtung</strong> erstellt werden.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Definiert den Typ des Eingabe-Fließrichtungs-Rasters.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong>: Das Eingabe-Fließrichtungs-Raster weist den Typ D8 auf. Dies ist die Standardeinstellung.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>: Das Eingabe-Fließrichtungs-Raster weist den Typ D-Infinity (DINF) auf.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>: Das Eingabe-Fließrichtungs-Raster weist den Typ Multi Flow Direction (MFD) auf.",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "Das Ausgabe-Akkumulations-Raster kann ganzzahlig oder ein Gleitkomma-Raster sein.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Gleitkomma</strong>: Das Ausgabe-Raster ist ein Gleitkomma-Raster. Dies ist die Standardeinstellung.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Ganzzahl</strong>: Das Ausgabe-Raster ist ganzzahlig.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "Ein optionales Eingabe-Raster zum Anwenden einer Gewichtung auf jedes Pixel.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Wenn kein Gewichtungs-Raster angegeben wird, wird eine Standardgewichtung von 1 auf jedes Pixel angewendet.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Definiert den Typ des Eingabe-Fließrichtungs-Rasters.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong>: Das Eingabe-Fließrichtungs-Raster weist den Typ D8 auf. Dies ist die Standardeinstellung.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>: Das Eingabe-Fließrichtungs-Raster weist den Typ D-Infinity (DINF) auf.",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>: Das Eingabe-Fließrichtungs-Raster weist den Typ Multi Flow Direction (MFD) auf.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Gibt an, ob Randpixel immer nach außen fließen oder den normalen Fließregeln folgen.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>Nein</strong>: Wenn die maximale Absenkung auf der Innenseite eines Randpixels größer als 0 ist, wird die Fließrichtung wie üblich bestimmt; andernfalls geht die Fließrichtung in Richtung Rand. Für Pixel, bei denen der Fluss vom Rand des Oberflächen-Rasters nach innen erfolgen sollte, wird tatsächlich diese Fließrichtung verwendet. Dies ist die Standardeinstellung.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Ja</strong>: Bei allen Pixeln am Rand des Oberflächen-Rasters erfolgt der Fluss vom Oberflächen-Raster nach außen.",
	"@@Flow-Direction_Raster_tag0@@": "Das Eingabe-Raster, das eine kontinuierliche Höhenoberfläche darstellt.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Legt fest, ob die vertikale oder die horizontale Komponente der Fließentfernung berechnet wird.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Horizontal</strong>: Die Fließentfernungsberechnungen ermitteln die horizontale Komponente der Fließentfernung von jedem Pixel in der Domäne zu Pixeln des Wasserlaufs, in die sie fließen.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Vertikal</strong>: Die Fließentfernungsberechnungen ermitteln die vertikale Komponente der Fließentfernung von jedem Pixel in der Domäne zu Pixeln des Wasserlaufs, in die sie fließen. Dies ist die Standardeinstellung.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "Das Eingabe-Raster, das die Fließrichtung aus jedem Pixel anzeigt.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "Wenn ein Fließrichtungs-Raster angegeben wird, werden nur die Neigungsrichtungen berücksichtigt, die durch die Eingabe-Fließrichtungen definiert werden.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "Das Fließrichtungs-Raster kann mit der Funktion \"Fließrichtung\" erstellt werden.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Definiert den Typ des Eingabe-Fließrichtungs-Rasters.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong>: Das Eingabe-Fließrichtungs-Raster weist den Typ D8 auf. Dies ist die Standardeinstellung.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>: Das Eingabe-Fließrichtungs-Raster weist den Typ D-Infinity (DINF) auf.",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>: Das Eingabe-Fließrichtungs-Raster weist den Typ Multi Flow Direction (MFD) auf.",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Gibt den Statistiktyp an, der zum Berechnen der Fließentfernung über mehrere Fließpfade hinweg verwendet wird. Wenn auf dem Weg von den einzelnen Zellen zu einer Zelle im Strom nur ein Fließpfad vorhanden ist, ergeben alle Statistiktypen dasselbe Ergebnis.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Minimum</strong>: Wenn mehrere Fließpfade vorhanden sind, wird die minimale Fließentfernung berechnet. Dies ist die Standardeinstellung.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Gewichteter Mittelwert</strong>: Wenn mehrere Fließpfade vorhanden sind, wird ein gewichteter Mittelwert der Fließentfernung berechnet. Der Teil des Abflusses aus einer Zelle zu den flussabwärts gelegenen Nachbarzellen wird jeweils als Gewichtung für die Berechnung des gewichteten Mittelwerts verwendet.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Maximum</strong>: Wenn mehrere Fließpfade vorhanden sind, wird die maximale Fließentfernung berechnet.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "Ein Eingabe-Wasserlauf-Raster, das ein lineares Wasserlaufnetz darstellt.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "Das Eingabe-Raster, das eine kontinuierliche Höhenoberfläche darstellt.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "Die Messrichtung entlang des Fließpfades.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong>Flussabwärts</strong>: Berechnet die Abstiegsentfernung entlang des Fließpfades von jeder Zelle zu einer Senke bzw. einem Abfluss am Rand des Rasters.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>Flussaufwärts</strong>: Berechnet die längste Aufstiegsentfernung entlang des Fließpfades von jeder Zelle bis zur Spitze der Wasserscheide.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "Das Eingabe-Raster, das die Fließrichtung aus jeder Zelle anzeigt.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "Das Fließrichtungs-Raster kann mit der Funktion <strong>Fließrichtung</strong> erstellt werden.",
	"@@Flow-Length_Weight-Raster_tag0@@": "Ein optionales Eingabe-Raster zum Anwenden einer Gewichtung auf jede Zelle.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Wenn kein Gewichtungs-Raster angegeben wird, wird eine Standardgewichtung von 1 auf jede Zelle angewendet.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Gibt an, ob ${NoData}-Werte bei der Statistikberechnung ignoriert werden.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Aktiviert</strong>: Gibt an, dass ein ${NoData}-Wert innerhalb einer Nachbarschaft ignoriert wird, falls vorhanden. Nur Zellen innerhalb der Nachbarschaft, die Datenwerte aufweisen, werden bei der Ermittlung des Ausgabewertes verwendet. Dies ist die Standardeinstellung.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Nicht aktiviert</strong>: Wenn eine Zelle in der Nachbarschaft den Wert ${NoData} aufweist, erhält auch die Ausgabe für die bearbeitete Zelle den Wert ${NoData}.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "Die Form der Fläche um jede Zelle, die zum Berechnen der Statistik verwendet wird.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Jede Nachbarschaft hat zusätzliche Parameter zur Definition der Form.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Kreisring, innerer Radius, äußerer Radius",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Kreis, Radius",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Nachbarschaftswerte: Unregelmäßig, Breite, Höhe",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Rechteck, Breite, Höhe",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Keil, Radius, Anfangswinkel, Endwinkel",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Nachbarschaftswerte: Gewichtung, Breite, Höhe",
	"@@Focal-Statistics_Neighborhood_tag8@@": "Eine Nachbarschaft vom Typ \"Unregelmäßig\" ermöglicht Ihnen, eine unregelmäßig gestaltete Nachbarschaft um die bearbeitete Zelle anzugeben. Verwenden Sie die Tabelle mit den Nachbarschaftswerten, um die Form des Nachbarschaftskerns zu definieren. Der Wert 0 für eine Zellenposition gibt an, dass die Zelle kein Element der Nachbarschaft ist und nicht zur Verarbeitung verwendet wird. Der Wert 1 gibt an, dass seine entsprechende Zelle (und der Wert) ein Element der Nachbarschaft ist.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "Ähnlich wie beim unregelmäßigen Nachbarschaftstyp können Sie anhand der Gewichtungs-Nachbarschaft eine unregelmäßige Nachbarschaft um die bearbeitete Zelle definieren und außerdem Gewichtungen auf die Eingabewerte anwenden. Die Werte in der Gewichtungs-Kernel-Datei geben an, welche Zellenpositionen in die Nachbarschaft eingeschlossen sein sollen und mit welchen Gewichtungen sie multipliziert werden. Verwenden Sie den Wert 0, um eine Zelle von der Verarbeitung ausschließen. Positive, negative und Dezimalwerte sind alle gültige Optionen, die als Gewichtung verwendet werden können. Als Gewichtungs-Nachbarschaftstyp werden nur die Statistiktypen \"Gewichtung\", \"Standardabweichung\" und \"Summe\" unterstützt.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Gibt an, welches Perzentil berechnet werden soll, wenn <strong>Perzentil</strong> als Statistiktyp ausgewählt ist. Der Standardwert ist 90 für das 90. Perzentil.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "Zulässige Werte können zwischen 0 und 100 liegen. Grundsätzlich entspricht der Perzentilwert 0 statistisch gesehen dem Minimum und der Perzentilwert 100 dem Maximum, mit der Ausnahme, dass das Ergebnis ein Gleitkommawert ist. Der Wert 50 ergibt im Wesentlichen dasselbe Ergebnis wie der Medianwert der Statistik.",
	"@@Focal-Statistics_Raster_tag0@@": "Das erforderliche Eingabe-Raster.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "Der zu berechnende Statistiktyp.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Mehrheit</strong>: Berechnet die Mehrheit (den am häufigsten auftretenden Wert) der Zellen innerhalb der Nachbarschaft.",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Maximum</strong>: Berechnet den Maximalwert (den höchsten Wert) der Zellen innerhalb der Nachbarschaft.",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Mittelwert</strong>: Berechnet den Mittelwert (den Durchschnittswert) der Zellen innerhalb der Nachbarschaft.",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Medianwert</strong>: Berechnet den Medianwert der Zellen innerhalb der Nachbarschaft.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Minimum</strong>: Berechnet den Minimalwert (den kleinsten Wert) der Zellen innerhalb der Nachbarschaft.",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Minderheit</strong>: Berechnet die Minderheit (den am seltensten auftretenden Wert) der Zellen innerhalb der Nachbarschaft.",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Perzentil</strong>: Berechnet ein Perzentil der Zellen innerhalb der Nachbarschaft. Mit dem Parameter <strong>Perzentilwert</strong> können Sie bestimmen, welches Perzentil berechnet werden soll.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Bereich</strong>: Berechnet den Bereich (Differenz zwischen größtem und kleinstem Wert) der Zellen innerhalb der Nachbarschaft.",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Standardabweichung</strong>: Berechnet die Standardabweichung der Zellen innerhalb der Nachbarschaft.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Summe</strong>: Berechnet die Summe (Summe aller Werte) der Zellen innerhalb der Nachbarschaft.",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Varianz</strong>: Berechnet die Varianz (die Anzahl der Einzelwerte) der Zellen innerhalb der Nachbarschaft.",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Wenn das Eingabe-Raster ein Gleitkomma-Raster ist, sind nur die Statistiktypen Mittelwert, Maximum, Medianwert, Minimum, Perzentil, Bereich, Standardabweichung und Summe verfügbar.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "Die Ausgabe für Mittelwert, Medianwert, Perzentil und Standardabweichung ist immer ein Gleitkommawert.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "Der Standardstatistiktyp ist \"Mittelwert\".",
	"@@Geometric_Constant-Z_tag0@@": "Legen Sie eine konstante Höhe zur Verwendung der Funktion \"Geometrisch\" fest.",
	"@@Geometric_DEM_tag0@@": "Legen Sie das für die Funktion \"Geometrisch\" zu verwendende DEM fest. Sie können ein im Mosaik-Dataset enthaltenes DEM als Raster-Dataset oder als Mosaik-Dataset verwenden, dessen Ausgabe ein DEM ist.",
	"@@Geometric_Geoid_tag0@@": "Bei den meisten Höhen-Datasets wie USGS NED und ArcGIS Online World Elevation handelt es sich um orthometrische Höhen. Deshalb ist es erforderlich, die Geoid-Korrektur zu aktivieren, um die Kompatibilität mit Satelliten-RPCs, die ellipsoidförmige Höhen verlangen, sicherzustellen. Aktivieren Sie das Kontrollkästchen <strong>Geoid</strong>, um die Geoid-Korrektur (EGM96) auf die Z-Werte anzuwenden, es sei denn, Ihr DEM ist bereits auf ellipsoidförmige Höhen referenziert.",
	"@@Geometric_Method_tag0@@": "Wählen Sie die Höhenmethode für die Funktion \"Geometrisch\" aus:",
	"@@Geometric_Method_tag1@@": "Konstantes Z verwenden: Gibt eine konstante Höhe zur Ausführung der Funktion \"Geometrisch\" an.",
	"@@Geometric_Method_tag2@@": "DEM verwenden: Gibt ein DEM zur Ausführung der Funktion \"Geometrisch\" an.",
	"@@Geometric_Raster_tag0@@": "Das Eingabe-Raster.",
	"@@Geometric_Z-Factor_tag0@@": "Rationale Polynomkoeffizienten (RPC) von Satelliten werden für Höhen-Datasets mit vertikalen Einheiten in Meter skaliert. Wenn Ihre Höhe von Meter abweichende vertikale Einheiten verwendet, müssen Sie einen <strong>Z-Faktor</strong> eingeben, um Ihre Einheiten wieder auf Meter zu skalieren. Beispiel: Wenn Ihre Höheneinheiten in Fuß vorliegen, müssen Sie einen Wert von 0,3048 verwenden, um Ihre Höheneinheiten von Fuß in Meter umzurechnen.",
	"@@Geometric_Z-Offset_tag0@@": "Der dem Höhenwert im DEM hinzuzufügende Basiswert. Er kann verwendet werden, um einen Versatz für Höhenwerte zu verwenden, die nicht auf Meeresspiegelniveau beginnen.",
	"@@Geometric_Tolerance_tag0@@": "Legen Sie den maximal tolerierbaren Fehler in der Funktion \"Geometrisch\" als Anzahl der Pixel fest. Der Standardwert für den Raster-Typ \"NITF (NCDRD)\" lautet 2.",
	"@@Grayscale_Raster_tag0@@": "Das Eingabe-Raster.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "Die Gewichtungen der einzelnen Bänder, die das Eingabe-Raster enthalten.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Greater-Than_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Greater-Than_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Greater-Than_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Greater-Than_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Greater-Than_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Greater-Than_Raster_tag0@@": "Die Eingabe, die getestet wird, um zu bestimmen, ob sie größer ist als die zweite Eingabe.",
	"@@Greater-Than_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Greater-Than_Raster2_tag0@@": "Die Eingabe, mit der die erste Eingabe daraufhin getestet wird, ob sie größer ist als die andere Eingabe.",
	"@@Greater-Than_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Greater-Than-Equal_Raster_tag0@@": "Die Eingabe, die getestet wird, um zu bestimmen, ob sie größer als oder gleich der zweiten Eingabe ist.",
	"@@Greater-Than-Equal_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "Die Eingabe, mit der die erste Eingabe daraufhin getestet wird, ob sie größer als oder gleich ist.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "Die mit dem Ausgabe-Raster verknüpfte Maßeinheit. Die verfügbaren Ausgabeeinheiten lauten Celsius, Fahrenheit und Kelvin.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "Ein Einzelband-Raster, in dem Pixelwerte die Umgebungslufttemperatur als Prozentsatz zwischen 0 und 100 darstellen.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "Ein Einzelband-Raster, in dem Pixelwerte die Umgebungslufttemperatur darstellen.",
	"@@Heat-Index_Temperature-Units_tag0@@": "Die mit dem Eingabe-Temperatur-Raster verknüpfte Maßeinheit. Die verfügbaren Eingabeeinheiten lauten Celsius, Fahrenheit und Kelvin.",
	"@@Hillshade_Altitude_tag0@@": "Die Höhe ist der Höhenwinkel der Sonne über dem Horizont und liegt in einem Bereich von 0 bis 90 Grad. Der Wert 0 Grad gibt an, dass die Sonne sich am Horizont befindet, also auf der gleichen horizontalen Ebene wie der Referenzrahmen. Der Wert 90 Grad gibt an, dass die Sonne direkt im Zenit steht.",
	"@@Hillshade_Altitude_tag1@@": "Dieser Parameter ist nur gültig, wenn der <strong>Schummerungstyp</strong> <strong>Herkömmlich</strong> lautet. Der Standardwert ist 45 Grad über dem Horizont.",
	"@@Hillshade_Azimuth_tag0@@": "Das Azimut ist die relative Position der Sonne am Horizont (in Grad). Diese Position wird vom Winkel der Sonne angegeben, der im Uhrzeigersinn aus \"genau Nord\" gemessen wird. Ein Azimut von 0 Grad steht für Norden, 90 Grad steht für Osten, 180 Grad steht für Süden und 270 Grad steht für Westen.",
	"@@Hillshade_Azimuth_tag1@@": "Dieser Parameter ist nur gültig, wenn der <strong>Schummerungstyp</strong> <strong>Herkömmlich</strong> lautet. Der Standardwert ist 315 Grad, von Nordwesten.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "Mit dieser Option können Sie alle Resampling-Artefakte vermeiden, die entlang der Kanten eines Rasters auftreten können. Die Ausgabe-Pixel entlang der Kante eines Rasters oder neben NoData-Pixeln werden mit \"NoData\" aufgefüllt. Daher wird empfohlen, diesen Parameter nur mit überlappenden Höhenmosaik-Datasets zu verwenden. Wenn überlappende Pixel verfügbar sind, zeigen die NoData-Flächen die überlappenden Pixelwerte anstelle der leeren Pixelwerte an.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Deaktiviert: Bilineares Resampling wird gleichmäßig für das Resampling der Schummerung angewendet. Verwenden Sie diese Option, wenn das Mosaik-Dataset mit ihren Höhen-Raster-Daten an seinen Stümpfen verbunden sind. Dies ist die Standardeinstellung.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Aktiviert: Bilineares Resampling wird innerhalb der Schummerung verwendet, außer entlang der Kanten der Raster oder neben NoData-Pixeln. Diese Pixel werden mit \"NoData\" aufgefüllt und zeigen die überlappenden Pixelwerte an, wodurch alle Effekte scharfer Kanten reduziert werden, die auftreten können. Verwenden Sie diese Option, wenn das Mosaik-Dataset mit ihren Höhen-Raster-Daten aus überlappenden Elementen oder Kacheln besteht.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "Die Ergebnisse aus der Funktion können datenabhängig sein. Wenn Sie Kachelgrenzen-Artefakte in Ihrer Ausgabe beobachten, wählen Sie die alternative Bedingung des Kontrollkästchens aus.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Steuert die Beleuchtungsquelle für die Schummerung:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Herkömmlich: Berechnet die Schummerung aus einer einzelnen Beleuchtungsrichtung. Dies ist die Standardeinstellung. Sie können den <strong>Azimut</strong> und die <strong>Höhe</strong> festlegen, um die Position der Lichtquelle zu steuern.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Multidirektional: Mit dieser Option wird Licht aus mehreren Quellen kombiniert, um eine verbesserte Visualisierung des Terrains darzustellen.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "Die Pixelgrößenfaktor berücksichtigt die Maßstabsänderungen, wenn die Vieweransicht vergrößert und verkleinert wird. Sie steuert die Rate, mit der sich der <strong>Z-Faktor</strong> ändert.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Dieser Parameter ist nur gültig, wenn der <strong>Skalierungstyp</strong> <strong>Angepasst</strong> lautet. Der Standardwert ist 0,024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "Die Pixelgrößen-Potenz berücksichtigt die Höhenänderungen (Maßstab), wenn die Vieweransicht vergrößert und verkleinert wird. Die Rate, mit der sich der <strong>Z-Faktor</strong> ändert, um einen erheblichen Reliefverlust zu vermeiden, wird durch den Exponenten gesteuert, der auf den Pixelgrößen-Term in der Gleichung angewendet wird.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Dieser Parameter ist nur gültig, wenn der <strong>Skalierungstyp</strong> <strong>Angepasst</strong> lautet. Der Standardwert ist 0,664.",
	"@@Hillshade_Raster_tag0@@": "Das Eingabe-Höhen-Dataset.",
	"@@Hillshade_Scaling_tag0@@": "Das geschummerte Ergebnis wird dynamisch skaliert, indem der Z-Faktor mit einer der folgenden beiden Optionen angepasst wird:",
	"@@Hillshade_Scaling_tag1@@": "Angepasst: Dies ist für nicht-lineare Anpassungen mit den Standardwerten für <strong>Pixelgrößen-Potenz</strong> und <strong>Pixelgrößenfaktor </strong>vorgesehen, die verschiedenste Höhenänderungen (Skala) beim Vergrößern und Verkleinern der Viewer-Ansicht beinhalten. Die Einstellung des Parameters <strong>Angepasst</strong> wird bei Verwendung eines weltweiten Datasets empfohlen.",
	"@@Hillshade_Scaling_tag8@@": "Keine: Es wird keine Skalierung angewendet. Dies eignet sich ideal für einzelne Raster-Datasets für ein lokales Gebiet. Dies wird für weltweite Datasets mit großen Höhenabweichungen oder Karten mit mehreren Maßstäben nicht empfohlen, da bei kleinen Maßstäben Terrain-Relief mit geringen Abweichungen erzeugt wird.",
	"@@Hillshade_Z-Factor_tag0@@": "Der Z-Faktor ist ein Skalierungsfaktor, der zum Konvertieren der Höhenwerte für zwei Zwecke verwendet wird:",
	"@@Hillshade_Z-Factor_tag1@@": "Konvertiert die Höhenwerte (z. B. Meter oder Fuß) in die horizontalen Koordinateneinheiten des Datasets, die in Fuß, Metern oder Grad vorliegen können.",
	"@@Hillshade_Z-Factor_tag2@@": "Fügt vertikale Überhöhung als visuellen Effekt hinzu.",
	"@@Int_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Int_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Int_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Int_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Int_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Int_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Int_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Int_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Int_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Int_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Int_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Int_Raster_tag0@@": "Das in einen ganzzahligen Wert zu konvertierende Eingabe-Raster",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "Die Zellengröße für das Ausgabe-Raster wird automatisch erkannt, kann jedoch geändert werden. Die Zellengröße kann zwar geändert werden, die Ausdehnung des Raster-Datasets bleibt jedoch gleich.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "Die Eingabe-Punktdaten.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Für diese Funktion stehen vier Resampling-Methoden zur Verfügung:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Inverse Distance Weighted</strong>: Die Zellenwerte werden mit einer linear gewichteten Kombination verschiedener Referenzpunkte oder Zellen ermittelt. Die Gewichtung ist eine Funktion des Kehrwerts der Entfernung von den bekannten Punkten oder Zellen.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>Lineares TIN</strong>: Mithilfe eines unregelmäßigen Dreiecksnetzes, das aus den Mittelpunkten der einzelnen Zellen im unregelmäßigen Raster berechnet wurde, wird eine Fläche interpoliert und danach in ein regelmäßiges Raster umgewandelt.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Natürlicher Nachbar</strong>: Sucht nach der nächstgelegenen Teilmenge von Eingabemessungen zu einem Abfragepunkt und weist diesen Daten proportional zur Fläche eine Gewichtung zu, um einen Wert zu interpolieren.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Nächster Nachbar</strong>: Berechnet den Pixelwert mithilfe des nächstgelegenen Pixels. Wenn kein Quellpixel vorhanden ist, kann in der Ausgabe kein neues Pixel erstellt werden. Dies ist die Standardeinstellung.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Bestimmt die Anzahl der Pixel, die in die ausgewählte Resampling-Methode einbezogen werden sollen. Der Standardwert ist ${3} Pixel.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Wenn Sie eine Point-Feature-Class als Eingabe wählen, müssen Sie das Feld in der Attributtabelle mit dem Wert der Punkte identifizieren.",
	"@@Is-Null_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Is-Null_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Is-Null_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Is-Null_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Is-Null_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Is-Null_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Is-Null_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Is-Null_Raster_tag0@@": "Das Eingabe-Raster, das getestet wird, um die Zellen zu identifizieren, die den Wert ${NoData} (NULL) aufweisen.",
	"@@Is-Null_Raster_tag1@@": "Die Eingabe kann ein ganzzahliger oder ein Gleitkommawert sein.",
	"@@Key-Metadata_Band-Names_tag0@@": "Dies wird zum Überschreiben der Bandnamen eines Rasters verwendet. Es handelt sich um eine kommagetrennte Zeichenfolge, die aktualisierte Bandnamen darstellt.",
	"@@Key-Metadata_Band-Names_tag1@@": "Dieser Parameter ist optional.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "In das ausgehende Raster einzuschleusende Schlüsselmetadaten, die als eine JSON-Zeichenfolge beschrieben werden, die eine Sammlung von Schlüsselwertpaaren darstellt. Im Folgenden finden Sie ein Beispiel für eine JSON-Zeichenfolge, die als Eingabe in diese Funktion verwendet werden kann. Alle Eingaben für diesen Parameter sollten das gleiche Format haben.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "JSON-Zeichenfolge, die Schlüsselmetadaten darstellt",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "Der Name der zu überschreibenden Schlüsseleigenschaft auf Dataset-Ebene.",
	"@@Key-Metadata_Raster_tag0@@": "Das Raster oder Mosaik-Dataset mit Schlüsselmetadaten, die Sie einfügen oder überschreiben möchten.",
	"@@Key-Metadata_Value_tag0@@": "Der überschreibende Wert der Schlüsseleigenschaft auf auf Dataset-Ebene, die Sie festlegen möchten.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Dieser Parameter simuliert den steigenden Aufwand zur Vermeidung von Kosten bei steigenden akkumulativen Kosten. Dies dient zur Modellierung der Müdigkeit des Reisenden. Die zunehmenden akkumulativen Kosten zur Erreichung einer Zelle werden mit der Resistenzrate multipliziert und den Kosten für die Bewegung in die nachfolgende Zelle hinzugefügt.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "Dies ist die geänderte Version einer zusammengesetzten Formel zur Berechnung des Zinssatzes, anhand derer die offensichtlichen Kosten beim Reisen durch eine Zelle berechnet werden. Mit steigendem Wert der Resistenzrate erhöhen sich auch die Kosten der später besuchten Zellen. Je höher die Resistenzrate, desto höher sind die zusätzlichen Kosten zur Erreichung der nächsten Zelle, die für jede nachfolgende Bewegung zusammengefasst werden. Da die Resistenzrate mit der Gesamtrate vergleichbar ist und die akkumulativen Kostenwerte im Allgemeinen sehr hoch sind, werden je nach akkumulativen Kostenwerten geringe Resistenzraten wie 0,005 oder noch kleiner vorgeschlagen.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Definiert die Kostenkapazität für den Reisenden für eine Quelle. Die Kostenberechnungen werden für jede Quelle fortgesetzt, bis die angegebene Kapazität erreicht ist.",
	"@@Least-Cost-Path_Capacity_tag1@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "Ein erforderliches Eingabe-Raster, das die Kosten oder Impedanz für eine planimetrische Bewegung durch jede Zelle definiert. Der Wert an jeder Zellenposition stellt die Kosten pro Einheitenentfernung für die Bewegung durch die Zelle dar. Jeder Zellenpositionswert wird mit der Zellenauflösung multipliziert. Gleichzeitig werden diagonale Bewegungen ausgeglichen, um die Gesamtkosten für die Bewegung durch die Zelle zu erhalten.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "Die Werte im <strong>Kosten-Raster</strong> können ganzzahlige oder Gleitkommawerte sein, sie dürfen jedoch nicht negativ oder 0 sein (negative oder keine Kosten sind nicht zulässig).",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "Das Feld, das verwendet wird, um Werte für die Zielpositionen zu erhalten.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "Ein erforderliches Eingabe-Raster, in dem die Pixel festgelegt werden, von denen die kostengünstigste Route zur am wenigsten kostspieligen Quelle ermittelt wird. Diese Eingabe besteht aus Pixeln mit gültigen Werten; den verbleibenden Pixeln muss ${NoData} zugewiesen sein. Nullwerte sind gültig.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "Der Schwellenwert, den die akkumulativen Kostenwerte nicht überschreiten dürfen. Wenn eine akkumulative Kostenentfernung diesen Wert überschreitet, lautet der Ausgabewert für die Zellenposition ${NoData}. Die maximale Entfernung definiert die Ausdehnung, für die akkumulative Kostenentfernungen berechnet werden. Die Standardentfernung ist die Ausdehnung des Ausgabe-Rasters.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Dieser Parameter ermöglicht die Steuerung des Reisemodus oder der Magnitude an einer Quelle. Je größer der Multiplikator, desto höher sind die Kosten, um sich von einer Zelle zur anderen zu bewegen.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "Die Werte müssen größer als Null sein. Die Standardeinstellung ist 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Ein Schlüsselwort, das definiert, wie die Werte und Zonen der Eingabezieldaten in den Kostenpfadberechnungen interpretiert werden:",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Der Beste</strong>: Für alle Pixel in den Eingabezieldaten wird die kostengünstigste Route aus dem Pixel mit dem Minimum der kostengünstigsten Routen zu Quellenzellen abgeleitet.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Jede Zelle</strong>: Für jede Zelle mit gültigen Werten in den Eingabezieldaten wird eine kostengünstigste Route ermittelt und im Ausgabe-Raster gespeichert. Für jede Zelle mit gültigen Werten zu den Eingabezieldaten wird eine kostengünstigste Route ermittelt und im Ausgabe-Raster gespeichert.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Jede Zone</strong>: Für jede Zone in den Eingabezieldaten wird eine kostengünstigste Route ermittelt und im Ausgabe-Raster gespeichert. Die kostengünstigste Route für jede Zone beginnt bei dem Pixel mit der niedrigsten Kostenentfernungsgewichtung in der Zone.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Dies ist ein erforderliches Eingabe-Raster zum Festlegen der Zellen oder Positionen, von denen die Entfernung mit den geringsten akkumulativen Kosten jeder Ausgabezellenposition berechnet wird.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "Die Startkosten, mit denen die Kostenberechnungen beginnen. Dieser Parameter ermöglicht die Festlegung der Fixkosten, die mit einer Quelle verknüpft sind. Der Kostenalgorithmus beginnt mit dem hier angegebenen Wert statt mit dem Kostenwert 0.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "Der Wert muss größer gleich 0 sein. Die Standardeinstellung ist 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Definiert die Richtung des Reisenden bei Anwendung der Quellresistenzrate und der Quellstartkosten.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>Aus Quelle</strong>: Die Quellresistenzrate und die Quellstartkosten werden an der Eingabequelle beginnend und in Richtung Nicht-Quellenzellen angewendet. Dies ist die Standardeinstellung.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>Zur Quelle</strong>: Die Quellresistenzrate und die Quellstartkosten werden an jeder Nicht-Quellenzelle beginnend und zurück zur Eingabequelle angewendet.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Geben Sie das Schlüsselwort <strong>Aus Quelle</strong> bzw. <strong>Zur Quelle</strong> ein, das auf alle Quellen angewendet wird, oder legen Sie ein Feld im <strong>Quell-Raster</strong> fest, das die Schlüsselwörter enthält, um die Reiserichtung für jede Quelle zu identifizieren. Dieses Feld muss die Zeichenfolgen ${FROM_SOURCE} oder ${TO_SOURCE} enthalten.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Less-Than_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Less-Than_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Less-Than_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Less-Than_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Less-Than_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Less-Than_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Less-Than_Raster_tag0@@": "Die Eingabe, die getestet wird, um zu bestimmen, ob sie kleiner ist als die zweite Eingabe.",
	"@@Less-Than_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Less-Than_Raster2_tag0@@": "Die Eingabe, mit der die erste Eingabe daraufhin getestet wird, ob sie kleiner ist als die andere Eingabe.",
	"@@Less-Than_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Less-Than-Equal_Raster_tag0@@": "Die Eingabe, die getestet wird, um zu bestimmen, ob sie kleiner als oder gleich der zweiten Eingabe ist.",
	"@@Less-Than-Equal_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Less-Than-Equal_Raster2_tag0@@": "Die Eingabe, mit der die erste Eingabe daraufhin getestet wird, ob sie kleiner als oder gleich ist.",
	"@@Less-Than-Equal_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Ln_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Ln_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Ln_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Ln_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Ln_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Ln_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Ln_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Ln_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Ln_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Ln_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Ln_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Ln_Raster_tag0@@": "Eingabewerte, für die der natürliche Logarithmus (Ln) ermittelt werden soll.",
	"@@Log10_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Log10_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Log10_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Log10_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Log10_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Log10_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Log10_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Log10_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Log10_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Log10_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Log10_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Log10_Raster_tag0@@": "Eingabewerte, für die die der Logarithmus zur Basis 10 ermittelt werden soll.",
	"@@Log2_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Log2_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Log2_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Log2_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Log2_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Log2_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Log2_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Log2_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Log2_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Log2_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Log2_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Log2_Raster_tag0@@": "Eingabewerte, für die die der Logarithmus zur Basis 2 ermittelt werden soll.",
	"@@Lookup_Field_tag0@@": "Das Feld mit den gewünschten Werten für das neue Raster.",
	"@@Lookup_Field_tag1@@": "Der Datentyp muss numerisch sein.",
	"@@Lookup_Raster_tag0@@": "Das Eingabe-Raster mit dem Feld, aus dem ein neues Raster erstellt werden soll.",
	"@@Lookup_Raster_tag1@@": "Dies kann ein ganzzahliges oder ein Gleitkomma-Raster sein.",
	"@@Mask_Included-Ranges_tag0@@": "Der eingeschlossene Bereich kann für jedes Band angegeben werden, indem Sie einen Minimal- und Maximalwert festlegen. Alle Werte außerhalb des angegebenen Bereichs werden als ${NoData} zurückgegeben. Ein Pixel ist eingeschlossen, wenn der Wert des Pixels innerhalb eines der angegebenen Bereiche fällt. Wenn Band 1 daher einen Bereich von 5 bis 10 hat, Band 2 einen Bereich von 15 bis 20 und der Pixelwert für Band 1 8 beträgt, wird dieses Pixel nicht maskiert.",
	"@@Mask_NoData-Interpretation_tag0@@": "Bezieht sich darauf, wie sich die <strong>${NoData}-Werte</strong> auf das Ausgabebild auswirken.",
	"@@Mask_NoData-Interpretation_tag3@@": "Sie können zwischen den folgenden beiden Optionen auswählen:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Mit allen übereinstimmen</strong>: Die ${NoData}-Werte, die Sie für jedes Band angeben, müssen sich im selben Pixel befinden, damit das Ausgabebild das ${NoData}-Pixel enthält.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Mit irgendeinem übereinstimmen</strong>: Wenn der ${NoData}-Wert, den Sie angeben, für ein Pixel in einem angegebenen Band auftritt, dann ist dieses Pixel im Ausgabebild \"${NoData}\". Dies ist die Standardeinstellung.",
	"@@Mask_NoData-Values_tag0@@": "Die NoData-Werte können für jedes Band angegeben werden. Sie können mehr als einen Wert angeben, indem Sie eine durch Leerzeichen getrennte Liste eingeben.",
	"@@Mask_Raster_tag0@@": "Das Eingabe-Raster.",
	"@@Minus_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Minus_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Minus_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Minus_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Minus_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Minus_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Minus_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Minus_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Minus_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Minus_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Minus_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Minus_Raster_tag0@@": "Die Eingabe, von der die Werte der zweiten Eingabe subtrahiert werden.",
	"@@Minus_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Minus_Raster2_tag0@@": "Die Eingabewerte, die von den Werten in der ersten Eingabe subtrahiert werden.",
	"@@Minus_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@ML-Classify_Raster_tag0@@": "Das mit Maximum-Likelihood-Klassifizierung zu klassifizierende Eingabe-Raster.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "Die ${.gsg}-Signaturdatei.",
	"@@Mod_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Mod_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Mod_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Mod_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Mod_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Mod_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Mod_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Mod_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Mod_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Mod_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Mod_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Mod_Raster_tag0@@": "Die Zählereingabe.",
	"@@Mod_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Mod_Raster2_tag0@@": "Die Nennereingabe.",
	"@@Mod_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Löst Konflikte, wenn sich Teile von zwei oder mehr Bildern überlappen. Sie können zwischen folgenden Optionen wählen:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Verschmelzen</strong>: Berechnet den Durchschnitt der überlappenden Pixel und zeigt diesen an, indem Pixel, die näher an benachbarten Bildern liegen, mehr Gewicht verliehen wird, sodass ein glatteres Bild ausgegeben wird. Dies ist die Standardeinstellung.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>Erste</strong>: Zeigt die Pixel aus dem ersten Bild der Bilderliste, die einen angegebenen Bereich überlappen.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Letzte</strong>: Zeigt die Pixel aus dem letzten Bild der Bilderliste, die einen angegebenen Bereich überlappen.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Max</strong>: Zeigt das Pixel mit dem höchsten Wert aller überlappenden Layer an. Mit dieser Option können Sie sich nicht darauf verlassen, dass Sie die Pixel von nur einem Bild in der überlappenden Fläche sehen, sondern eher eine Kombination aller potenziellen Layer.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Mittelwert</strong>: Berechnet den Durchschnitt der überlappenden Pixel und zeigt diesen an.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Min</strong>: Zeigt das Pixel mit dem niedrigsten Wert aller überlappenden Layer an. Mit dieser Option können Sie sich nicht darauf verlassen, dass Sie die Pixel von nur einem Bild in der überlappenden Fläche sehen, sondern eher eine Kombination aller potenziellen Layer.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Wählen Sie die Raster aus, die Sie mosaikartig zu einem Bild zusammenfügen möchten.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Gibt die ID des Bandes an, das den Nahinfrarotbereich des elektromagnetischen Spektrums darstellt.",
	"@@NDVI_Raster_tag0@@": "Das multispektrale Eingabe-Raster.",
	"@@NDVI_Scientific-Output_tag0@@": "Die Ausgabewerte reichen von -1,0 bis 1,0. Dieser Bereich wird in vielen wissenschaftlichen Anwendungen verwendet.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Gibt die ID des Bandes an, das den roten Teil des elektromagnetischen Spektrums darstellt.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Wählen Sie ein vordefiniertes Farbschema aus der Dropdown-Liste aus.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Wählen Sie den Farbschematyp zum Einfärben der NDVI-Ausgabe:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Colormap: Wählen Sie eine vordefinierte Colormap aus der Dropdown-Liste aus. Alternativ können Sie zu einer bereits gespeicherten Colormap navigieren.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Farbverlauf: Wählen Sie ein vordefiniertes Farbschema aus der Dropdown-Liste aus.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Wählen Sie eine vordefinierte Colormap aus der Dropdown-Liste aus. Alternativ können Sie zu einer bereits vorhandenen Colormap-Datei navigieren.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Gibt die ID des Bandes an, das den Nahinfrarotbereich des elektromagnetischen Spektrums darstellt.",
	"@@NDVI-Colorized_Raster_tag0@@": "Das multispektrale Eingabe-Raster.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "Die Ausgabewerte reichen von -1,0 bis 1,0. Dieser Bereich wird in vielen wissenschaftlichen Anwendungen verwendet.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Gibt die ID des Bandes an, das den roten Teil des elektromagnetischen Spektrums darstellt.",
	"@@Negate_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Negate_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Negate_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Negate_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Negate_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Negate_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Negate_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Negate_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Negate_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Negate_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Negate_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Negate_Raster_tag0@@": "Das zu negierende (Multiplikation mit -1) Eingabe-Raster.",
	"@@Nibble_Mask-Raster_tag0@@": "Das erforderliche, als Maske verwendete Raster.",
	"@@Nibble_Mask-Raster_tag1@@": "Auf Zellen mit dem Wert \"NoData\" wird im Eingabe-<strong>Raster</strong> die Nibble-Funktion angewendet.",
	"@@Nibble_Mask-Raster_tag4@@": "Das Masken-Raster kann ein ganzzahliges oder Gleitkomma-Raster sein.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Definiert, ob \"NoData\"-Zellen im Eingabe-Raster auch \"NoData\"-Zellen im Ausgabe-Raster bleiben.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>Nein</strong>: Gibt an, dass NoData-Zellen im Eingabe-Raster auch NoData-Zellen im Ausgabe-Raster bleiben. Dies ist die Standardeinstellung.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Ja</strong>: Gibt an, dass NoData-Zellen im Eingabe-Raster und in der Maske mit Nibble in gültige Ausgabezellenwerte umgewandelt werden können.",
	"@@Nibble_Raster_tag0@@": "Das erforderliche Eingabe-Raster, auf das die Nibble-Funktion angewendet wird.",
	"@@Nibble_Raster_tag1@@": "Das Eingabe-Raster kann ein ganzzahliges oder Gleitkomma-Raster sein.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Gibt an, ob ${NoData}-Werte im Eingabe-Raster durch die Nibble-Funktion auf Flächen ausgeweitet werden können, die im Maskierungs-Raster definiert sind.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Ja</strong>: Gibt an, dass der Wert des nächsten Nachbarn verwendet wird, unabhängig davon, ob es sich dabei im Eingabe-Raster um einen ${NoData}-Wert oder einen anderen Wert handelt. ${NoData}-Werte im Eingabe-Raster können durch die Nibble-Funktion auf Flächen ausgeweitet werden, die in der Maske definiert sind, sofern es sich dabei um den nächsten Nachbarn handelt. Dies ist die Standardeinstellung.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>Nein</strong>: Gibt an, dass nur Datenwerte durch die Nibble-Funktion auf im Maskierungs-Raster definierte Flächen ausgeweitet werden können. ${NoData}-Werte im Eingabe-Raster dürfen nicht durch die Nibble-Funktion auf Flächen ausgeweitet werden, die im Maskierungs-Raster definiert sind, selbst wenn es sich dabei um den nächsten Nachbarn handelt.",
	"@@Nibble_Zone-Raster_tag0@@": "Das Eingabe-Zonen-Raster.",
	"@@Nibble_Zone-Raster_tag1@@": "Alle Zellen in einem Raster, die denselben Wert haben, ungeachtet dessen, ob sie aneinander grenzen oder nicht, sind eine Zone. Der Eingabezonen-Layer definiert die Form, Werte und Positionen der Zonen. Das Zonen-Raster kann ein Ganzzahl- oder ein Gleitkommawert sein.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Not-Equal_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Not-Equal_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Not-Equal_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Not-Equal_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Not-Equal_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Not-Equal_Raster_tag0@@": "Die Eingabe, die mit der zweiten Eingabe auf Ungleichheit verglichen wird.",
	"@@Not-Equal_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Not-Equal_Raster2_tag0@@": "Die Eingabe, die mit der ersten Eingabe auf Ungleichheit verglichen wird.",
	"@@Not-Equal_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Pansharpening_Multispectral_tag0@@": "Das multispektrale Raster, das mit dem panchromatischen Band geschärft werden soll.",
	"@@Pansharpening_Panchromatic_tag0@@": "Das Einzelband-Raster mit hoher Auflösung, das zum panchromatischen Schärfen des multispektralen Rasters mit niedrigerer Auflösung verwendet wird.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Wählen Sie den Pan-Sharpening-Algorithmus aus, der verwendet werden soll.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey: Verwendet den auf Spektralmodellierung basierenden Brovey-Algorithmus für die Datenfusion.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri: Verwendet den auf Spektralmodellierung basierenden Esri Algorithmus für die Datenfusion.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram-Schmidt: Verwendet den Gram-Schmidt-Algorithmus zur spektralen Schärfung von multispektralen Daten.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS: Verwendet Intensität, Farbton und Sättigung für die Datenfusion.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Mittelwert: Verwendet den Mittelwert aus den Werten für Rot, Grün und Blau sowie dem panchromatischen Pixelwert.",
	"@@Pansharpening_Weights_tag0@@": "Geben Sie Gewichtungswerte für die Bänder Rot, Grün, Blau und Infrarot an. Alle Werte müssen im Bereich von 0 bis 1 liegen.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Dieser Parameter simuliert den steigenden Aufwand zur Vermeidung von Kosten bei steigenden akkumulativen Kosten. Dies dient zur Modellierung der Müdigkeit des Reisenden. Die zunehmenden akkumulativen Kosten zur Erreichung einer Zelle werden mit der Resistenzrate multipliziert und den Kosten für die Bewegung in die nachfolgende Zelle hinzugefügt.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Dies ist die geänderte Version einer zusammengesetzten Formel zur Berechnung des Zinssatzes, anhand derer die offensichtlichen Kosten beim Reisen durch eine Zelle berechnet werden. Mit steigendem Wert der Resistenzrate erhöhen sich auch die Kosten der später besuchten Zellen. Je höher die Resistenzrate, desto höher sind die zusätzlichen Kosten zur Erreichung der nächsten Zelle, die für jede nachfolgende Bewegung zusammengefasst werden. Da die Resistenzrate mit der Gesamtrate vergleichbar ist und die akkumulativen Kostenwerte im Allgemeinen sehr hoch sind, werden je nach akkumulativen Kostenwerten geringe Resistenzraten wie 0,005 oder noch kleiner vorgeschlagen.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Path-Distance_Capacity_tag0@@": "Definiert die Kostenkapazität für den Reisenden für eine Quelle. Die Kostenberechnungen werden für jede Quelle fortgesetzt, bis die angegebene Kapazität erreicht ist.",
	"@@Path-Distance_Capacity_tag1@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Path-Distance_Cost-Raster_tag0@@": "Ein erforderliches Eingabe-Raster, das die Kosten oder Impedanz für eine planimetrische Bewegung durch jede Zelle definiert. Der Wert an jeder Zellenposition stellt die Kosten pro Einheitenentfernung für die Bewegung durch die Zelle dar. Jeder Zellenpositionswert wird mit der Zellenauflösung multipliziert. Gleichzeitig werden diagonale Bewegungen ausgeglichen, um die Gesamtkosten für die Bewegung durch die Zelle zu erhalten.",
	"@@Path-Distance_Cost-Raster_tag1@@": "Die Werte im <strong>Kosten-Raster</strong> können ganzzahlige oder Gleitkommawerte sein, sie dürfen jedoch nicht negativ oder 0 sein (negative oder keine Kosten sind nicht zulässig).",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Definiert die Beziehung zwischen dem horizontalen Kostenfaktor und dem HRMA (Horizontal Relative Moving Angle).</p><p>Es stehen mehrere Faktoren mit Modifikatoren zur Auswahl, durch die ein definiertes Diagramm für den vertikalen Faktor festgelegt wird. Darüber hinaus kann mithilfe einer Tabelle ein benutzerdefiniertes Diagramm erstellt werden. Die Diagramme identifizieren den vertikalen Faktor, der zum Berechnen der Gesamtkosten für die Bewegung in eine benachbarte Zelle verwendet wird.</p><p>In den folgenden Erläuterungen werden die beiden Akronyme HF und HRMA verwendet. HF steht für \"horizontaler Faktor\", d. h. für die horizontalen Hindernisse bei der Bewegung von einer Zelle zur nächsten. HRMA steht für \"horizontaler relativer Bewegungswinkel\", d. h. für den Winkel zwischen der horizontalen Richtung von einer Zelle und der Bewegungsrichtung.</p><p><strong>Horizontaler Faktor</strong>umfasst die folgenden Typen:</p><ul><li><strong>Binär</strong>: Wenn der HRMA kleiner ist als der Schnittwinkel, wird für den HF der dem Null-Faktor zugewiesene Wert festgelegt. Andernfalls ist dieser unendlich.</li><li><strong>Vorwärts</strong>: Legt fest, dass nur Vorwärtsbewegungen zulässig sind. Der HRMA muss größer als oder gleich 0 Grad und kleiner als 90 Grad sein (0 &lt;= HRMA &lt; 90). Wenn der HRMA größer als 0 und kleiner als 45 Grad ist, wird als HF für die Zelle der dem Null-Faktor zugewiesene Wert festgelegt. Wenn der HRMA größer als oder gleich 45 Grad ist, wird der Wert des Seitenwert-Modifikators verwendet. Der HF für einen HRMA-Wert, der größer als oder gleich 90 Grad ist, wird auf unendlich festgelegt.</li><li><strong>Linear</strong>: Gibt an, dass der HF eine lineare Funktion des HRMA ist.</li><li><strong>Invers linear</strong>: Gibt an, dass der HF eine invers lineare Funktion des HRMA ist.</li><li><strong>Tabelle</strong>: Gibt an, dass zum Definieren des Diagramms für den horizontalen Faktor und damit zum Bestimmen der HF eine Tabellendatei verwendet wird.</li></ul><p>Die Modifikatoren für die Schlüsselwörter der horizontalen Faktoren lauten wie folgt:</p><ul><li><strong>Null-Faktor</strong>: Legt den horizontalen Faktor fest, der verwendet wird, wenn der HRMA 0 ist. Dieser Faktor positioniert den Y-Schnittpunkt für alle Funktionen für den horizontalen Faktor.</li><li><strong>Schnittwinkel</strong>: Definiert den HRMA, ab dem der HF auf unendlich festgelegt wird.</li><li><strong>Neigung</strong>: Legt die Neigung der Geraden fest, die mit den Schlüsselwörtern <strong>Linear</strong>und <strong>Invers linear</strong> für den horizontalen Faktor verwendet wird. Die Neigung wird als Verhältnis von Höhendifferenz zu horizontaler Distanz angegeben (z. B. ist eine 45-Grad-Neigung 1/45 und wird als 0,02222 eingegeben).</li><li><strong>Seitenfaktor</strong>: Legt den HF fest, wenn der HRMA größer als oder gleich 45 Grad und kleiner als 90 Grad ist und wenn das Schlüsselwort <strong>Vorwärts</strong> für den horizontalen Faktor angegeben wird.</li><li><strong>Tabellenname</strong>: Gibt den Namen der Tabelle an, die den HF definiert.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "Ein Raster, das die horizontale Richtung an jeder Zelle definiert.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "Die Werte in dem Raster müssen ganzzahlige Werte zwischen 0 und 360 Grad sein. Dabei steht 0 Grad für Norden (am Bildschirm oben), und der Winkel nimmt im Uhrzeigersinn zu. Ebenen Flächen sollte der Wert -1 zugewiesen werden. Beim Übergang von einer Zelle zu einer benachbarten Zelle werden die Werte an jeder Position zusammen mit dem <strong>horizontalen Faktor</strong> verwendet, um die anfallenden horizontalen Kosten zu bestimmen.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "Der Schwellenwert, den die akkumulativen Kostenwerte nicht überschreiten dürfen. Wenn eine akkumulative Kostenentfernung diesen Wert überschreitet, lautet der Ausgabewert für die Zellenposition \"NoData\". Die maximale Entfernung definiert die Ausdehnung, für die akkumulative Kostenentfernungen berechnet werden. Die Standardentfernung ist die Ausdehnung des Ausgabe-Rasters.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Ein Multiplikator zum Anwenden der Kostenwerte.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Dieser Parameter ermöglicht die Steuerung des Reisemodus oder der Magnitude an einer Quelle. Je größer der Multiplikator, desto höher sind die Kosten, um sich von einer Zelle zur anderen zu bewegen.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Die Werte müssen größer als Null sein. Die Standardeinstellung ist 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Path-Distance_Source-Raster_tag0@@": "Das erforderliche Eingabe-Raster mit Quellenpositionen.",
	"@@Path-Distance_Source-Raster_tag1@@": "Dies ist ein Raster zum Festlegen der Zellen oder Positionen, von denen die Entfernung mit den geringsten akkumulativen Kosten für jede Ausgabezellenposition berechnet wird.",
	"@@Path-Distance_Source-Raster_tag2@@": "Dies kann ein ganzzahliges oder ein Gleitkomma-Raster sein.",
	"@@Path-Distance_Start-Cost_tag0@@": "Die Startkosten, mit denen die Kostenberechnungen beginnen. Dieser Parameter ermöglicht die Festlegung der Fixkosten, die mit einer Quelle verknüpft sind. Der Kostenalgorithmus beginnt mit dem hier angegebenen Wert statt mit dem Kostenwert 0.",
	"@@Path-Distance_Start-Cost_tag1@@": "Der Wert muss größer gleich 0 sein. Die Standardeinstellung ist 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "Ein Raster, das die Höhenwerte an jeder Zellenposition definiert.",
	"@@Path-Distance_Surface-Raster_tag1@@": "Beim Übergang zwischen Zellen werden die Werte verwendet, um die tatsächliche Oberflächenentfernung zu berechnen.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Definiert die Richtung des Reisenden bei Anwendung der Quellresistenzrate und der Quellstartkosten.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>Aus Quelle</strong>: Die Quellresistenzrate und die Quellstartkosten werden an der Eingabequelle beginnend und in Richtung Nicht-Quellenzellen angewendet. Dies ist die Standardeinstellung.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>Zur Quelle</strong>: Die Quellresistenzrate und die Quellstartkosten werden an jeder Nicht-Quellenzelle beginnend und zurück zur Eingabequelle angewendet.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Geben Sie das Schlüsselwort <strong>Aus Quelle</strong> bzw. <strong>Zur Quelle</strong> ein, das auf alle Quellen angewendet wird, oder legen Sie ein Feld im <strong>Quell-Raster</strong> fest, das die Schlüsselwörter enthält, um die Reiserichtung für jede Quelle zu identifizieren. Dieses Feld muss die Zeichenfolgen ${FROM_SOURCE} oder ${TO_SOURCE} enthalten.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Definiert die Beziehung zwischen dem vertikalen Kostenfaktor und dem HVMA (Vertical Relative Moving Angle).</p><p>Es stehen mehrere Faktoren mit Modifikatoren zur Auswahl, durch die ein definiertes Diagramm für den vertikalen Faktor festgelegt wird. Darüber hinaus kann mithilfe einer Tabelle ein benutzerdefiniertes Diagramm erstellt werden. Die Diagramme identifizieren den vertikalen Faktor, der zum Berechnen der Gesamtkosten für die Bewegung in eine benachbarte Zelle verwendet wird.</p><p>In den folgenden Erläuterungen werden die beiden Akronyme VF und VRMA verwendet. VF steht für \"vertikaler Faktor\", d. h. für die vertikalen Hindernisse bei der Bewegung von einer Zelle zur nächsten. VRMA steht für vertikaler relativer Bewegungswinkel, d. h. für den Neigungswinkel zwischen der Ausgangs- oder Verarbeitungszelle (FROM) und der Zielzelle (TO).</p><p><strong>Vertikaler Faktor umfasst </strong>die folgenden Typen:</p><ul><li><strong>Binär</strong> – Wenn der VRMA größer als der untere Schnittwinkel und kleiner als der obere Schnittwinkel ist, wird für den VF der dem Null-Faktor zugewiesene Wert festgelegt. Andernfalls ist dieser unendlich.</li><li><strong>Linear</strong> – Gibt an, dass der VF eine lineare Funktion des VRMA ist.</li><li><strong>Symmetrisch linear</strong> – Gibt an, dass der VF eine lineare Funktion des VRMA auf der negativen oder positiven Seite des VRMA ist und dass die beiden linearen Funktionen hinsichtlich der VF-Achse bzw. Y-Achse symmetrisch sind.</li><li><strong>Invers linear</strong> – Gibt an, dass der VF eine invers lineare Funktion des VRMA ist.</li><li><strong>Symmetrisch invers linear</strong> – Gibt an, dass der VF eine invers lineare Funktion des VRMA auf der negativen oder positiven Seite des VRMA ist und dass die beiden linearen Funktionen hinsichtlich der VF-Achse bzw. Y-Achse symmetrisch sind.</li><li><strong>Cos</strong> – Identifiziert den VF als kosinusbasierte Funktion des VRMA.</li><li><strong>Sec</strong> –Identifiziert den VF als sekansbasierte Funktion des VRMA.</li><li><strong>Cos-Sec</strong> – Gibt an, dass der VF bei einem negativen VRMA die kosinusbasierte Funktion des VRMA und bei einem positiven VRMA die sekantenbasierte Funktion des VRMA ist.</li><li><strong>Sec-Cos</strong> – Gibt an, dass der VF bei einem negativen VRMA die sekantenbasierte Funktion des VRMA und bei einem positiven VRMA die kosinusbasierte Funktion des VRMA ist.</li><li><strong>Tabelle</strong> – Gibt an, dass zum Definieren des Diagramms für den vertikalen Faktor und damit zum Bestimmen der VFs eine Tabellendatei verwendet wird.</li></ul><p>Die Modifikatoren für die Schlüsselwörter des vertikalen Faktors lauten wie folgt:</p><ul><li><strong>Null-Faktor</strong> – Legt den vertikalen Faktor fest, der verwendet wird, wenn der VRMA 0 ist. Dieser Faktor positioniert den Y-Schnittpunkt der angegebenen Funktion. Laut Definition ist der Null-Faktor nicht auf trigonometrische vertikale Funktionen (COS, SEC, COS-SEC oder SEC-COS) anwendbar. Der Y-Schnittpunkt wird von diesen Funktionen definiert.</li><li><strong>Niedriger Schnittwinkel</strong> – Definiert den VRMA, unterhalb dessen der VF auf unendlich festgelegt wird.</li><li><strong>Hoher Schnittwinkel</strong> – Definiert den VRMA, oberhalb dessen der VF auf unendlich festgelegt wird.</li><li><strong>Neigung</strong> – Legt die Neigung der Geraden fest, die mit den Schlüsselwörtern <strong>Linear</strong>und <strong>Invers linear</strong> für den horizontalen Faktor verwendet wird. Die Neigung wird als Verhältnis von Höhendifferenz zu horizontaler Distanz angegeben (z. B. ist eine 45-Grad-Neigung 1/45 und wird als 0,02222 eingegeben).</li><li><strong>Tabellenname</strong> – Gibt den Namen der Tabelle an, die den VF definiert.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Definiert die Beziehung zwischen dem vertikalen Kostenfaktor und dem VRMA (Vertical Relative Moving Angle).",
	"@@Path-Distance_Vertical-Raster_tag1@@": "Die Werte werden zum Berechnen der Neigung verwendet, die zum Identifizieren des vertikalen Faktors beim Übergang von einer Zelle zur anderen dient.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Dieser Parameter simuliert den steigenden Aufwand zur Vermeidung von Kosten bei steigenden akkumulativen Kosten. Dies dient zur Modellierung der Müdigkeit des Reisenden. Die zunehmenden akkumulativen Kosten zur Erreichung einer Zelle werden mit der Resistenzrate multipliziert und den Kosten für die Bewegung in die nachfolgende Zelle hinzugefügt.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Dies ist die geänderte Version einer zusammengesetzten Formel zur Berechnung des Zinssatzes, anhand derer die offensichtlichen Kosten beim Reisen durch eine Zelle berechnet werden. Mit steigendem Wert der Resistenzrate erhöhen sich auch die Kosten der später besuchten Zellen. Je höher die Resistenzrate, desto höher sind die zusätzlichen Kosten zur Erreichung der nächsten Zelle, die für jede nachfolgende Bewegung zusammengefasst werden. Da die Resistenzrate mit der Gesamtrate vergleichbar ist und die akkumulativen Kostenwerte im Allgemeinen sehr hoch sind, werden je nach akkumulativen Kostenwerten geringe Resistenzraten wie 0,005 oder noch kleiner vorgeschlagen.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Definiert die Kostenkapazität für den Reisenden für eine Quelle. Die Kostenberechnungen werden für jede Quelle fortgesetzt, bis die angegebene Kapazität erreicht ist.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "Ein erforderliches Eingabe-Raster, das die Kosten oder Impedanz für eine planimetrische Bewegung durch jede Zelle definiert. Der Wert an jeder Zellenposition stellt die Kosten pro Einheitenentfernung für die Bewegung durch die Zelle dar. Jeder Zellenpositionswert wird mit der Zellenauflösung multipliziert. Gleichzeitig werden diagonale Bewegungen ausgeglichen, um die Gesamtkosten für die Bewegung durch die Zelle zu erhalten.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "Die Werte im <strong>Kosten-Raster</strong> können ganzzahlige oder Gleitkommawerte sein, sie dürfen jedoch nicht negativ oder 0 sein (negative oder keine Kosten sind nicht zulässig).",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Definiert die Beziehung zwischen dem horizontalen Kostenfaktor und dem HRMA (Horizontal Relative Moving Angle).</p><p>Es stehen mehrere Faktoren mit Modifikatoren zur Auswahl, durch die ein definiertes Diagramm für den vertikalen Faktor festgelegt wird. Darüber hinaus kann mithilfe einer Tabelle ein benutzerdefiniertes Diagramm erstellt werden. Die Diagramme identifizieren den vertikalen Faktor, der zum Berechnen der Gesamtkosten für die Bewegung in eine benachbarte Zelle verwendet wird.</p><p>In den folgenden Erläuterungen werden die beiden Akronyme HF und HRMA verwendet. HF steht für horizontaler Faktor, d. h. für die horizontalen Hindernisse bei der Bewegung von einer Zelle zur nächsten. HRMA steht für horizontaler relativer Bewegungswinkel, d. h. für den Winkel zwischen der horizontalen Richtung von einer Zelle und der Bewegungsrichtung.</p><p><strong>Horizontaler Faktor</strong>umfasst die folgenden Typen:</p><ul><li><strong>Binär</strong> – Wenn der HRMA kleiner ist als der Schnittwinkel, wird für den HF der dem Null-Faktor zugewiesene Wert festgelegt. Andernfalls ist dieser unendlich.</li><li><strong>Vorwärts</strong> – Legt fest, dass nur Vorwärtsbewegungen zulässig sind. Der HRMA muss größer als oder gleich 0 Grad und kleiner als 90 Grad sein (0 &lt;= HRMA &lt; 90). Wenn der HRMA größer als 0 und kleiner als 45 Grad ist, wird als HF für die Zelle der dem Null-Faktor zugewiesene Wert festgelegt. Wenn der HRMA größer als oder gleich 45 Grad ist, wird der Wert des Seitenwert-Modifikators verwendet. Der HF für einen HRMA-Wert, der größer als oder gleich 90 Grad ist, wird auf unendlich festgelegt.</li><li><strong>Linear</strong> – Gibt an, dass der HF eine lineare Funktion des HRMA ist.</li><li><strong>Invers linear</strong> – Gibt an, dass der HF eine invers lineare Funktion des HRMA ist.</li><li><strong>Tabelle</strong> – Gibt an, dass zum Definieren des Diagramms für den horizontalen Faktor und damit zum Bestimmen der HF eine Tabellendatei verwendet wird.</li></ul><p>Die Modifikatoren für die Schlüsselwörter der horizontalen Faktoren lauten wie folgt:</p><ul><li><strong>Null-Faktor</strong> – Legt den horizontalen Faktor fest, der verwendet wird, wenn der HRMA 0 ist. Dieser Faktor positioniert den Y-Schnittpunkt für alle Funktionen für den horizontalen Faktor.</li><li><strong>Schnittwinkel</strong> – Definiert den HRMA, ab dem der HF auf unendlich festgelegt wird.</li><li><strong>Neigung</strong> – Legt die Neigung der Geraden fest, die mit den Schlüsselwörtern <strong>Linear</strong>und <strong>Invers linear</strong> für den horizontalen Faktor verwendet wird. Die Neigung wird als Verhältnis von Höhendifferenz zu horizontaler Distanz angegeben (z. B. ist eine 45-Grad-Neigung 1/45 und wird als 0,02222 eingegeben).</li><li><strong>Seitenfaktor</strong> – Legt den HF fest, wenn der HRMA größer als oder gleich 45 Grad und kleiner als 90 Grad ist und wenn das Schlüsselwort <strong>Vorwärts</strong> für den horizontalen Faktor angegeben wird.</li><li><strong>Tabellenname</strong> – Gibt den Namen der Tabelle an, die den HF definiert.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "Ein Raster, das die horizontale Richtung an jeder Zelle definiert.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "Die Werte in dem Raster müssen ganzzahlige Werte zwischen 0 und 360 Grad sein. Dabei steht 0 Grad für Norden (am Bildschirm oben), und der Winkel nimmt im Uhrzeigersinn zu. Ebenen Flächen sollte der Wert -1 zugewiesen werden. Beim Übergang von einer Zelle zu einer benachbarten Zelle werden die Werte an jeder Position zusammen mit dem <strong>horizontalen Faktor</strong> verwendet, um die anfallenden horizontalen Kosten zu bestimmen.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "Der Schwellenwert, den die akkumulativen Kostenwerte nicht überschreiten dürfen. Wenn eine akkumulative Kostenentfernung diesen Wert überschreitet, lautet der Ausgabewert für die Zellenposition \"NoData\". Die maximale Entfernung definiert die Ausdehnung, für die akkumulative Kostenentfernungen berechnet werden. Die Standardentfernung ist die Ausdehnung des Ausgabe-Rasters.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Ein Multiplikator zum Anwenden der Kostenwerte.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Dieser Parameter ermöglicht die Steuerung des Reisemodus oder der Magnitude an einer Quelle. Je größer der Multiplikator, desto höher sind die Kosten, um sich von einer Zelle zur anderen zu bewegen.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Die Werte müssen größer als Null sein. Die Standardeinstellung ist 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "Das Feld für die Zuweisung von Werten zu den Quellenpositionen. Die Eingabe muss ein ganzzahliger Wert sein. Wenn <strong>Werte-Raster</strong> festgelegt wurde, haben die Werte in dieser Eingabe Vorrang gegenüber allen Einstellungen in <strong>Quellfeld</strong>.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "Das erforderliche Eingabe-Raster mit Quellenpositionen.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Dies ist ein Raster zum Festlegen der Zellen oder Positionen, von denen die Entfernung mit den geringsten akkumulativen Kosten für jede Ausgabezellenposition berechnet wird.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Dies kann ein ganzzahliges oder ein Gleitkomma-Raster sein.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "Die Startkosten, mit denen die Kostenberechnungen beginnen. Dieser Parameter ermöglicht die Festlegung der Fixkosten, die mit einer Quelle verknüpft sind. Der Kostenalgorithmus beginnt mit dem hier angegebenen Wert statt mit dem Kostenwert 0.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "Der Wert muss größer gleich 0 sein. Die Standardeinstellung ist 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "Ein Raster, das die Höhenwerte an jeder Zellenposition definiert.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "Beim Übergang zwischen Zellen werden die Werte verwendet, um die tatsächliche Oberflächenentfernung zu berechnen.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Definiert die Richtung des Reisenden bei Anwendung der Quellresistenzrate und der Quellstartkosten.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>Aus Quelle</strong>: Die Quellresistenzrate und die Quellstartkosten werden an der Eingabequelle beginnend und in Richtung Nicht-Quellenzellen angewendet. Dies ist die Standardeinstellung.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>Zur Quelle</strong>: Die Quellresistenzrate und die Quellstartkosten werden an jeder Nicht-Quellenzelle beginnend und zurück zur Eingabequelle angewendet.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Geben Sie das Schlüsselwort <strong>Aus Quelle</strong> bzw. <strong>Zur Quelle</strong> ein, das auf alle Quellen angewendet wird, oder legen Sie ein Feld im <strong>Quell-Raster</strong> fest, das die Schlüsselwörter enthält, um die Reiserichtung für jede Quelle zu identifizieren. Dieses Feld muss die Zeichenfolgen ${FROM_SOURCE} oder ${TO_SOURCE} enthalten.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "Das ganzzahlige Eingabe-Raster, das die Zonenwerte identifiziert, die für jede Eingabequellenposition verwendet werden sollen. Für jede Quellenpositionszelle wird der vom <strong>Werte-Raster</strong> definierte Wert allen Zellen zugewiesen, die der Quellenposition für die Berechnung zugeordnet sind. Das <strong>Werte-Raster</strong> hat Vorrang gegenüber einer beliebigen Einstellung für das <strong>Quellfeld</strong>.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Definiert die Beziehung zwischen dem vertikalen Kostenfaktor und dem HVMA (Vertical Relative Moving Angle).</p><p>Es stehen mehrere Faktoren mit Modifikatoren zur Auswahl, durch die ein definiertes Diagramm für den vertikalen Faktor festgelegt wird. Darüber hinaus kann mithilfe einer Tabelle ein benutzerdefiniertes Diagramm erstellt werden. Die Diagramme identifizieren den vertikalen Faktor, der zum Berechnen der Gesamtkosten für die Bewegung in eine benachbarte Zelle verwendet wird.</p><p>In den folgenden Erläuterungen werden die beiden Akronyme VF und VRMA verwendet. VF steht für vertikaler Faktor, d. h. für die vertikalen Hindernisse bei der Bewegung von einer Zelle zur nächsten. VRMA steht für vertikaler relativer Bewegungswinkel, d. h. für den Neigungswinkel zwischen der Ausgangs- oder Verarbeitungszelle (FROM) und der Zielzelle (TO).</p><p><strong>Vertikaler Faktor umfasst </strong>die folgenden Typen:</p><ul><li><strong>Binär</strong> – Wenn der VRMA größer als der untere Schnittwinkel und kleiner als der obere Schnittwinkel ist, wird für den VF der dem Null-Faktor zugewiesene Wert festgelegt. Andernfalls ist dieser unendlich.</li><li><strong>Linear</strong> – Gibt an, dass der VF eine lineare Funktion des VRMA ist.</li><li><strong>Symmetrisch linear</strong> – Gibt an, dass der VF eine lineare Funktion des VRMA auf der negativen oder positiven Seite des VRMA ist und dass die beiden linearen Funktionen hinsichtlich der VF-Achse bzw. Y-Achse symmetrisch sind.</li><li><strong>Invers linear</strong> – Gibt an, dass der VF eine invers lineare Funktion des VRMA ist.</li><li><strong>Symmetrisch invers linear</strong> – Gibt an, dass der VF eine invers lineare Funktion des VRMA auf der negativen oder positiven Seite des VRMA ist und dass die beiden linearen Funktionen hinsichtlich der VF-Achse bzw. Y-Achse symmetrisch sind.</li><li><strong>Cos</strong> – Identifiziert den VF als kosinusbasierte Funktion des VRMA.</li><li><strong>Sec</strong> –Identifiziert den VF als sekansbasierte Funktion des VRMA.</li><li><strong>Cos-Sec</strong> – Gibt an, dass der VF bei einem negativen VRMA die kosinusbasierte Funktion des VRMA und bei einem positiven VRMA die sekantenbasierte Funktion des VRMA ist.</li><li><strong>Sec-Cos</strong> – Gibt an, dass der VF bei einem negativen VRMA die sekantenbasierte Funktion des VRMA und bei einem positiven VRMA die kosinusbasierte Funktion des VRMA ist.</li><li><strong>Tabelle</strong> – Gibt an, dass zum Definieren des Diagramms für den vertikalen Faktor und damit zum Bestimmen der VFs eine Tabellendatei verwendet wird.</li></ul><p>Die Modifikatoren für die Schlüsselwörter des vertikalen Faktors lauten wie folgt:</p><ul><li><strong>Null-Faktor</strong> – Legt den vertikalen Faktor fest, der verwendet wird, wenn der VRMA 0 ist. Dieser Faktor positioniert den Y-Schnittpunkt der angegebenen Funktion. Laut Definition ist der Null-Faktor nicht auf trigonometrische vertikale Funktionen (COS, SEC, COS-SEC oder SEC-COS) anwendbar. Der Y-Schnittpunkt wird von diesen Funktionen definiert.</li><li><strong>Niedriger Schnittwinkel</strong> – Definiert den VRMA, unterhalb dessen der VF auf unendlich festgelegt wird.</li><li><strong>Hoher Schnittwinkel</strong> – Definiert den VRMA, oberhalb dessen der VF auf unendlich festgelegt wird.</li><li><strong>Neigung</strong> – Legt die Neigung der Geraden fest, die mit den Schlüsselwörtern <strong>Linear</strong>und <strong>Invers linear</strong> für den horizontalen Faktor verwendet wird. Die Neigung wird als Verhältnis von Höhendifferenz zu horizontaler Distanz angegeben (z. B. ist eine 45-Grad-Neigung 1/45 und wird als 0,02222 eingegeben).</li><li><strong>Tabellenname</strong> – Gibt den Namen der Tabelle an, die den VF definiert.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Definiert die Beziehung zwischen dem vertikalen Kostenfaktor und dem VRMA (Vertical Relative Moving Angle).",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "Die Werte werden zum Berechnen der Neigung verwendet, die zum Identifizieren des vertikalen Faktors beim Übergang von einer Zelle zur anderen dient.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Dieser Parameter simuliert den steigenden Aufwand zur Vermeidung von Kosten bei steigenden akkumulativen Kosten. Dies dient zur Modellierung der Müdigkeit des Reisenden. Die zunehmenden akkumulativen Kosten zur Erreichung einer Zelle werden mit der Resistenzrate multipliziert und den Kosten für die Bewegung in die nachfolgende Zelle hinzugefügt.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Dies ist die geänderte Version einer zusammengesetzten Formel zur Berechnung des Zinssatzes, anhand derer die offensichtlichen Kosten beim Reisen durch eine Zelle berechnet werden. Mit steigendem Wert der Resistenzrate erhöhen sich auch die Kosten der später besuchten Zellen. Je höher die Resistenzrate, desto höher sind die zusätzlichen Kosten zur Erreichung der nächsten Zelle, die für jede nachfolgende Bewegung zusammengefasst werden. Da die Resistenzrate mit der Gesamtrate vergleichbar ist und die akkumulativen Kostenwerte im Allgemeinen sehr hoch sind, werden je nach akkumulativen Kostenwerten geringe Resistenzraten wie 0,005 oder noch kleiner vorgeschlagen.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Definiert die Kostenkapazität für den Reisenden für eine Quelle. Die Kostenberechnungen werden für jede Quelle fortgesetzt, bis die angegebene Kapazität erreicht ist.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "Ein erforderliches Eingabe-Raster, das die Kosten oder Impedanz für eine planimetrische Bewegung durch jede Zelle definiert. Der Wert an jeder Zellenposition stellt die Kosten pro Einheitenentfernung für die Bewegung durch die Zelle dar. Jeder Zellenpositionswert wird mit der Zellenauflösung multipliziert. Gleichzeitig werden diagonale Bewegungen ausgeglichen, um die Gesamtkosten für die Bewegung durch die Zelle zu erhalten.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "Die Werte im <strong>Kosten-Raster</strong> können ganzzahlige oder Gleitkommawerte sein, sie dürfen jedoch nicht negativ oder 0 sein (negative oder keine Kosten sind nicht zulässig).",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Definiert die Beziehung zwischen dem horizontalen Kostenfaktor und dem HRMA (Horizontal Relative Moving Angle).</p><p>Es stehen mehrere Faktoren mit Modifikatoren zur Auswahl, durch die ein definiertes Diagramm für den vertikalen Faktor festgelegt wird. Darüber hinaus kann mithilfe einer Tabelle ein benutzerdefiniertes Diagramm erstellt werden. Die Diagramme identifizieren den vertikalen Faktor, der zum Berechnen der Gesamtkosten für die Bewegung in eine benachbarte Zelle verwendet wird.</p><p>In den folgenden Erläuterungen werden die beiden Akronyme HF und HRMA verwendet. HF steht für horizontaler Faktor, d. h. für die horizontalen Hindernisse bei der Bewegung von einer Zelle zur nächsten. HRMA steht für horizontaler relativer Bewegungswinkel, d. h. für den Winkel zwischen der horizontalen Richtung von einer Zelle und der Bewegungsrichtung.</p><p><strong>Horizontaler Faktor</strong>umfasst die folgenden Typen:</p><ul><li><strong>Binär</strong> – Wenn der HRMA kleiner ist als der Schnittwinkel, wird für den HF der dem Null-Faktor zugewiesene Wert festgelegt. Andernfalls ist dieser unendlich.</li><li><strong>Vorwärts</strong> – Legt fest, dass nur Vorwärtsbewegungen zulässig sind. Der HRMA muss größer als oder gleich 0 Grad und kleiner als 90 Grad sein (0 &lt;= HRMA &lt; 90). Wenn der HRMA größer als 0 und kleiner als 45 Grad ist, wird als HF für die Zelle der dem Null-Faktor zugewiesene Wert festgelegt. Wenn der HRMA größer als oder gleich 45 Grad ist, wird der Wert des Seitenwert-Modifikators verwendet. Der HF für einen HRMA-Wert, der größer als oder gleich 90 Grad ist, wird auf unendlich festgelegt.</li><li><strong>Linear</strong> – Gibt an, dass der HF eine lineare Funktion des HRMA ist.</li><li><strong>Invers linear</strong> – Gibt an, dass der HF eine invers lineare Funktion des HRMA ist.</li><li><strong>Tabelle</strong> – Gibt an, dass zum Definieren des Diagramms für den horizontalen Faktor und damit zum Bestimmen der HF eine Tabellendatei verwendet wird.</li></ul><p>Die Modifikatoren für die Schlüsselwörter der horizontalen Faktoren lauten wie folgt:</p><ul><li><strong>Null-Faktor</strong> – Legt den horizontalen Faktor fest, der verwendet wird, wenn der HRMA 0 ist. Dieser Faktor positioniert den Y-Schnittpunkt für alle Funktionen für den horizontalen Faktor.</li><li><strong>Schnittwinkel</strong> – Definiert den HRMA, ab dem der HF auf unendlich festgelegt wird.</li><li><strong>Neigung</strong> – Legt die Neigung der Geraden fest, die mit den Schlüsselwörtern <strong>Linear</strong>und <strong>Invers linear</strong> für den horizontalen Faktor verwendet wird. Die Neigung wird als Verhältnis von Höhendifferenz zu horizontaler Distanz angegeben (z. B. ist eine 45-Grad-Neigung 1/45 und wird als 0,02222 eingegeben).</li><li><strong>Seitenfaktor</strong> – Legt den HF fest, wenn der HRMA größer als oder gleich 45 Grad und kleiner als 90 Grad ist und wenn das Schlüsselwort <strong>Vorwärts</strong> für den horizontalen Faktor angegeben wird.</li><li><strong>Tabellenname</strong> – Gibt den Namen der Tabelle an, die den HF definiert.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "Ein Raster, das die horizontale Richtung an jeder Zelle definiert.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "Die Werte in dem Raster müssen ganzzahlige Werte zwischen 0 und 360 Grad sein. Dabei steht 0 Grad für Norden (am Bildschirm oben), und der Winkel nimmt im Uhrzeigersinn zu. Ebenen Flächen sollte der Wert -1 zugewiesen werden. Beim Übergang von einer Zelle zu einer benachbarten Zelle werden die Werte an jeder Position zusammen mit dem <strong>horizontalen Faktor</strong> verwendet, um die anfallenden horizontalen Kosten zu bestimmen.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "Der Schwellenwert, den die akkumulativen Kostenwerte nicht überschreiten dürfen. Wenn eine akkumulative Kostenentfernung diesen Wert überschreitet, lautet der Ausgabewert für die Zellenposition \"NoData\". Die maximale Entfernung definiert die Ausdehnung, für die akkumulative Kostenentfernungen berechnet werden. Die Standardentfernung ist die Ausdehnung des Ausgabe-Rasters.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Ein Multiplikator zum Anwenden der Kostenwerte.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Dieser Parameter ermöglicht die Steuerung des Reisemodus oder der Magnitude an einer Quelle. Je größer der Multiplikator, desto höher sind die Kosten, um sich von einer Zelle zur anderen zu bewegen.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Die Werte müssen größer als Null sein. Die Standardeinstellung ist 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "Das erforderliche Eingabe-Raster mit Quellenpositionen.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Dies ist ein Raster zum Festlegen der Zellen oder Positionen, von denen die Entfernung mit den geringsten akkumulativen Kosten für jede Ausgabezellenposition berechnet wird.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Dies kann ein ganzzahliges oder ein Gleitkomma-Raster sein.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "Die Startkosten, mit denen die Kostenberechnungen beginnen. Dieser Parameter ermöglicht die Festlegung der Fixkosten, die mit einer Quelle verknüpft sind. Der Kostenalgorithmus beginnt mit dem hier angegebenen Wert statt mit dem Kostenwert 0.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "Der Wert muss größer gleich 0 sein. Die Standardeinstellung ist 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "Ein Raster, das die Höhenwerte an jeder Zellenposition definiert.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "Beim Übergang zwischen Zellen werden die Werte verwendet, um die tatsächliche Oberflächenentfernung zu berechnen.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Definiert die Richtung des Reisenden bei Anwendung der Quellresistenzrate und der Quellstartkosten.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>Aus Quelle</strong>: Die Quellresistenzrate und die Quellstartkosten werden an der Eingabequelle beginnend und in Richtung Nicht-Quellenzellen angewendet. Dies ist die Standardeinstellung.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>Zur Quelle</strong>: Die Quellresistenzrate und die Quellstartkosten werden an jeder Nicht-Quellenzelle beginnend und zurück zur Eingabequelle angewendet.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Geben Sie das Schlüsselwort <strong>Aus Quelle</strong> bzw. <strong>Zur Quelle</strong> ein, das auf alle Quellen angewendet wird, oder legen Sie ein Feld im <strong>Quell-Raster</strong> fest, das die Schlüsselwörter enthält, um die Reiserichtung für jede Quelle zu identifizieren. Dieses Feld muss die Zeichenfolgen ${FROM_SOURCE} oder ${TO_SOURCE} enthalten.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Definiert die Beziehung zwischen dem vertikalen Kostenfaktor und dem HVMA (Vertical Relative Moving Angle).</p><p>Es stehen mehrere Faktoren mit Modifikatoren zur Auswahl, durch die ein definiertes Diagramm für den vertikalen Faktor festgelegt wird. Darüber hinaus kann mithilfe einer Tabelle ein benutzerdefiniertes Diagramm erstellt werden. Die Diagramme identifizieren den vertikalen Faktor, der zum Berechnen der Gesamtkosten für die Bewegung in eine benachbarte Zelle verwendet wird.</p><p>In den folgenden Erläuterungen werden die beiden Akronyme VF und VRMA verwendet. VF steht für vertikaler Faktor, d. h. für die vertikalen Hindernisse bei der Bewegung von einer Zelle zur nächsten. VRMA steht für vertikaler relativer Bewegungswinkel, d. h. für den Neigungswinkel zwischen der Ausgangs- oder Verarbeitungszelle (FROM) und der Zielzelle (TO).</p><p><strong>Vertikaler Faktor umfasst </strong>die folgenden Typen:</p><ul><li><strong>Binär</strong> – Wenn der VRMA größer als der untere Schnittwinkel und kleiner als der obere Schnittwinkel ist, wird für den VF der dem Null-Faktor zugewiesene Wert festgelegt. Andernfalls ist dieser unendlich.</li><li><strong>Linear</strong> – Gibt an, dass der VF eine lineare Funktion des VRMA ist.</li><li><strong>Symmetrisch linear</strong> – Gibt an, dass der VF eine lineare Funktion des VRMA auf der negativen oder positiven Seite des VRMA ist und dass die beiden linearen Funktionen hinsichtlich der VF-Achse bzw. Y-Achse symmetrisch sind.</li><li><strong>Invers linear</strong> – Gibt an, dass der VF eine invers lineare Funktion des VRMA ist.</li><li><strong>Symmetrisch invers linear</strong> – Gibt an, dass der VF eine invers lineare Funktion des VRMA auf der negativen oder positiven Seite des VRMA ist und dass die beiden linearen Funktionen hinsichtlich der VF-Achse bzw. Y-Achse symmetrisch sind.</li><li><strong>Cos</strong> – Identifiziert den VF als kosinusbasierte Funktion des VRMA.</li><li><strong>Sec</strong> –Identifiziert den VF als sekansbasierte Funktion des VRMA.</li><li><strong>Cos-Sec</strong> – Gibt an, dass der VF bei einem negativen VRMA die kosinusbasierte Funktion des VRMA und bei einem positiven VRMA die sekantenbasierte Funktion des VRMA ist.</li><li><strong>Sec-Cos</strong> – Gibt an, dass der VF bei einem negativen VRMA die sekantenbasierte Funktion des VRMA und bei einem positiven VRMA die kosinusbasierte Funktion des VRMA ist.</li><li><strong>Tabelle</strong> – Gibt an, dass zum Definieren des Diagramms für den vertikalen Faktor und damit zum Bestimmen der VFs eine Tabellendatei verwendet wird.</li></ul><p>Die Modifikatoren für die Schlüsselwörter des vertikalen Faktors lauten wie folgt:</p><ul><li><strong>Null-Faktor</strong> – Legt den vertikalen Faktor fest, der verwendet wird, wenn der VRMA 0 ist. Dieser Faktor positioniert den Y-Schnittpunkt der angegebenen Funktion. Laut Definition ist der Null-Faktor nicht auf trigonometrische vertikale Funktionen (COS, SEC, COS-SEC oder SEC-COS) anwendbar. Der Y-Schnittpunkt wird von diesen Funktionen definiert.</li><li><strong>Niedriger Schnittwinkel</strong> – Definiert den VRMA, unterhalb dessen der VF auf unendlich festgelegt wird.</li><li><strong>Hoher Schnittwinkel</strong> – Definiert den VRMA, oberhalb dessen der VF auf unendlich festgelegt wird.</li><li><strong>Neigung</strong> – Legt die Neigung der Geraden fest, die mit den Schlüsselwörtern <strong>Linear</strong>und <strong>Invers linear</strong> für den horizontalen Faktor verwendet wird. Die Neigung wird als Verhältnis von Höhendifferenz zu horizontaler Distanz angegeben (z. B. ist eine 45-Grad-Neigung 1/45 und wird als 0,02222 eingegeben).</li><li><strong>Tabellenname</strong> – Gibt den Namen der Tabelle an, die den VF definiert.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Definiert die Beziehung zwischen dem vertikalen Kostenfaktor und dem VRMA (Vertical Relative Moving Angle).",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "Die Werte werden zum Berechnen der Neigung verwendet, die zum Identifizieren des vertikalen Faktors beim Übergang von einer Zelle zur anderen dient.",
	"@@Plus_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Plus_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Plus_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Plus_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Plus_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Plus_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Plus_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Plus_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Plus_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Plus_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Plus_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Plus_Raster_tag0@@": "Die Eingabe, zu deren Werten etwas addiert wird.",
	"@@Plus_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Plus_Raster2_tag0@@": "Die Eingabe, deren Werte zur ersten Eingabe addiert werden.",
	"@@Plus_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Local_Cellsize-Type_tag0@@": "Die Zellengröße für das Ausgabe-Raster auswählen. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Local_Cellsize-Type_tag1@@": "Erste von: Verwenden Sie die erste Zellengröße der Eingabe-Raster.",
	"@@Local_Cellsize-Type_tag2@@": "Letzte von: Verwenden Sie die letzte Zellengröße der Eingabe-Raster.",
	"@@Local_Cellsize-Type_tag3@@": "Max. von: Verwenden Sie die größte Zellengröße aller Eingabe-Raster. Dies ist die Standardeinstellung.",
	"@@Local_Cellsize-Type_tag4@@": "Mittelwert von: Verwenden Sie die mittlere Zellengröße aller Eingabe-Raster.",
	"@@Local_Cellsize-Type_tag5@@": "Min. von: Verwenden Sie die kleinste Zellengröße aller Eingabe-Raster.",
	"@@Local_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Local_Extent-Type_tag1@@": "Erstes von: Legen Sie die Verarbeitungsausdehnung anhand der Ausdehnung des ersten Eingabe-Rasters fest.",
	"@@Local_Extent-Type_tag2@@": "Schnittpunkt von: Legen Sie die Verarbeitungsausdehnung anhand der Ausdehnung der überlappenden Pixel fest. Dies ist die Standardeinstellung.",
	"@@Local_Extent-Type_tag3@@": "Letztes von: Legen Sie die Verarbeitungsausdehnung anhand der Ausdehnung des letzten Eingabe-Rasters fest.",
	"@@Local_Extent-Type_tag4@@": "Vereinigung von: Legen Sie die Verarbeitungsausdehnung anhand der Ausdehnung aller Raster fest.",
	"@@Local_Raster_tag0@@": "Die Eingabe, zu deren Werten etwas addiert wird.",
	"@@Local_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Local_Raster2_tag0@@": "Die Eingabe, deren Werte zur ersten Eingabe addiert werden.",
	"@@Local_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Local_False-Raster_tag0@@": "Die Eingabe, deren Werte als Ausgabepixelwerte verwendet werden, wenn die Bedingung falsch (false) ist. Es kann ein Raster mit ganzzahligen Werten oder mit Gleitkommas oder ein konstanter Wert sein.",
	"@@Local_True-Raster_tag0@@": "Die Eingabe, deren Werte als Ausgabepixelwerte verwendet werden, wenn die Bedingung wahr (true) ist. Es kann ein Raster mit ganzzahligen Werten oder mit Gleitkommas oder ein konstanter Wert sein.",
	"@@Power_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Power_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Power_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Power_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Power_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Power_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Power_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Power_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Power_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Power_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Power_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Power_Raster_tag0@@": "Die Eingabewerte, die mit <strong>Raster2</strong> potenziert werden sollen.",
	"@@Power_Raster_tag3@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Power_Raster2_tag0@@": "Die Eingabe, die bestimmt, mit welchen Werten des <strong>Rasters</strong> potenziert werden soll.",
	"@@Power_Raster2_tag3@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "Der Typ der durchzuführenden Kalibrierung.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Beta-Nought: Die Funktion gibt die Radarreflexion pro Flächeneinheit in einer Schrägentfernung zurück. Dies ist der Standardkalibrierungstyp.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Sigma-Nought: Die Funktion gibt die Radarreflexion pro Flächeneinheit in Bodenreichweite zurück. Die Ergebnisse sind 32-Bit-Gleitkommawerte, normalerweise im Bereich zwischen 0,0 und 1,0. Bei Auswahl dieser Option werden keine Daten abgeschnitten.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gamma: Die Funktion gibt die Radarreflexion pro Flächeneinheit in der im rechten Winkel zur Messrichtung stehenden Ebene zurück.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Keiner",
	"@@Radar-Calibration_Raster_tag0@@": "Das Eingabe-Raster.",
	"@@RasterInfo_Raster-Info_tag0@@": "Wählen Sie ein Raster-Dataset aus, das als Vorlage verwendet werden soll.",
	"@@RasterInfo_Raster_tag0@@": "Das Eingabe-Raster.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "Eine Liste der Felder in der <strong>Tabelle mit zonalen Attributen</strong>, wobei jedes Feld durch ein Komma getrennt ist. Die Werte in jedem Feld werden durch ein Band im Ausgabe-Raster dargestellt.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "Der ursprüngliche Pixelwert der Ausgabe-Bänder in einem Raster, bevor sie neu zugeordnet werden.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Wenn ein Pixel nicht in eine Zone fällt, bleibt es als Hintergrundwert erhalten.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "Das erforderliche Eingabe-Raster.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "Als Eingabe sollte nur ein Einzelband-Raster verwendet werden. Wird ein Multiband-Raster angegeben, wird nur das erste Band verwendet.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "Eine optionale zusätzliche Abfrage, die auf die <strong>Tabelle mit zonalen Attributen</strong> angewendet wird.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "Wenn Sie die Tabelle oben als Beispiel heranziehen, lautet die Abfrage ${Variable1 = 'bare earth'}.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "Die zonalen Attribute, die als Pfad zu einer lokalen Feature-Class angegeben wurden, der Pfad zu einer Tabelle, die URL zu einem Feature-Service-Layer oder eine JSON-Zeichenfolge.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "In JSON wird sie als Sammlung von Zuordnungen aus Zonen-IDs zu einem Array an ganzen Zahlen beschrieben: ${{ zoneId:[f1,f2,...,fn], ... } }.",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "Das Feldname mit den Zonen-ID-Werten.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "Ein optionales Einzelband-Raster, in dem jeder Pixel die mit der Position verknüpfte Zonen-ID enthält. Die Zonen-ID wird für das Suchen von Zeilen in der Tabelle mit zonalen Attributen für die zonenspezifische Einfütterung verwendet.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Geben Sie diesen Parameter nicht an, wenn Sie nur das Attribut importieren möchten.",
	"@@Rasterize-Features_Field_tag0@@": "Wählen Sie das Feld aus, anhand dessen das jeweilige Feature identifiziert werden soll.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Wählen Sie die Feature-Class aus, die in das Raster-Format konvertiert werden soll.",
	"@@Rasterize-Features_Raster_tag0@@": "Wählen Sie ein Raster aus, mit dem Zellengröße und Ausdehnung für die Feature-Konvertierung definiert werden.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Legen Sie fest, wie überlappende Features verwaltet werden sollen:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>Erste</strong>: Dem überlappenden Bereich wird ein Wert aus dem zuerst aufgeführten Dataset zugewiesen.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Letzte</strong>: Dem überlappenden Bereich wird ein Wert aus dem zuletzt aufgeführten Dataset zugewiesen.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Kleinste</strong>: Den überlappenden Bereichen wird ein Wert aus dem kleineren der Features zugewiesen.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Größte</strong>: Den überlappenden Bereichen wird ein Wert aus dem größeren der Features zugewiesen.",
	"@@Recast_Overrides_tag0@@": "Eine Tabelle der Variablennamen und benutzerdefinierten Werte, mit denen ein Mosaik-Dataset geändert wird.",
	"@@Recast_Raster_tag0@@": "Das Raster-Produkt, auf das die Funktion \"Überarbeiten\" angewendet wird.",
	"@@Region-Group_Add-Link_tag0@@": "Gibt an, ob der Tabelle der Ausgabe ein Link-Feld hinzugefügt wird.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Link hinzufügen</strong>: Der Tabelle des Ausgabe-Rasters wird ein ${LINK}-Element hinzugefügt.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>Kein Link</strong>: Die Attributtabelle für das Ausgabe-Raster enthält nur die Elemente ${Value} und ${Count}.",
	"@@Region-Group_Excluded-Value_tag0@@": "Ermittelt einen Wert so, dass, wenn eine Zellenposition den Wert enthält, keine räumliche Konnektivität ausgewertet wird, egal wie die Anzahl der Nachbarn angegeben wurde (\"FOUR\" oder \"EIGHT\").",
	"@@Region-Group_Excluded-Value_tag1@@": "Zellen mit dem ausgeschlossenen Wert werden als NoData-Werte behandelt und aus Berechnungen entfernt. Zellenpositionen, die den ausgeschlossenen Wert enthalten, erhalten den Wert \"0\" im Ausgabe-Raster.",
	"@@Region-Group_Excluded-Value_tag2@@": "Der ausgeschlossene Wert ähnelt dem Konzept eines Hintergrundwertes bzw. einer angewendeten Maske. Für diesen Parameter muss ein Wert angegeben werden, wenn der Parameter <strong>${CROSS}</strong> angegeben wird.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "Die Anzahl der benachbarten Zellen, die bei der Auswertung der Konnektivität zwischen Zellen verwendet werden sollen.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>FOUR</strong>: Definiert die Konnektivität zwischen Zellen desselben Wertes nur, wenn sich die Zellen unmittelbar links, rechts, über oder unter einem der vier nächstgelegenen Nachbarn befinden. Dies ist die Standardeinstellung.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>EIGHT</strong>: Definiert die Konnektivität zwischen Zellen mit demselben Wert, wenn sie innerhalb der unmittelbaren Acht-Zellen-Nachbarschaft zueinander liegen. Dazu gehört die Lage rechts, links, über oder diagonal zueinander.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Definiert, welche Zellenwerte beim Testen der Konnektivität berücksichtigt werden.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>WITHIN</strong>: Testet die Konnektivität zwischen gleichen Eingabewerten innerhalb einer Zone. Dies ist die Standardeinstellung.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "Es können nur Zellen aus der gleichen Zone (Wert) gruppiert werden, die die räumlichen Anforderungen hinsichtlich der Konnektivität erfüllen, die durch den Parameter <strong>Anzahl der Nachbarn</strong> (vier oder acht Nachbarn) festgelegt sind.",
	"@@Region-Group_Zone-Connectivity_tag6@@": "</strong>CROSS</strong>: Testet die Konnektivität zwischen Zellen mit beliebigen Werten anhand der räumlichen Anforderungen, die durch den Parameter \"Anzahl der Nachbarn\" angegeben werden, wobei der durch den Parameter \"Ausgeschlossener Wert\" angegebene Wert ausgeschlossen wird.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "Wenn diese Option verwendet wird, muss ein Wert für den Parameter <strong>Ausgeschlossener Wert</strong> angegeben werden.",
	"@@Region-Group_Zone-Raster_tag0@@": "Das erforderliche Eingabe-Raster, dessen eindeutige verbundene Regionen ermittelt werden.",
	"@@Region-Group_Zone-Raster_tag1@@": "Die Eingabe muss den Typ \"Ganzzahl\" aufweisen.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "Das Feld in der Attributtabelle, das den Füllwert für die Pixelgruppe definiert. In einem Multibandbild wird dieser Wert allen Bändern zugewiesen.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "Das Feld in der Attributtabelle, das den maximalen Wachstumsradius in der Raumbezugseinheit des Bildes definiert.",
	"@@Region-Grow_Raster_tag0@@": "Das Raster, für das diese Funktion ausgeführt werden soll.",
	"@@Region-Grow_Seed-Points_tag0@@": "Eine Point-Feature-Class, die als anfängliche Ursprünge für den Algorithmus dient. Jeder Ausgangspunkt entspricht einem Eintrag in der Attributtabelle, die den maximalen Wachstumsradius, den Ähnlichkeitsschwellenwert und die Füllwertinformationen enthält.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "Das Feld in der Attributtabelle, das den Ähnlichkeitsschwellenwert als euklidische Entfernung im spektralen Raum definiert.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Fehlende Werte in der Reklassifizierungstabelle können entweder so bleiben oder zu \"NoData\" neu zugeordnet werden.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Deaktiviert – Jedes Pixel im Eingabe-Raster, das nicht in einer Remap-Tabelle reklassifiziert wird, behält seinen Wert und wird für diese Position in das Ausgabe-Raster geschrieben. Dies ist die Standardeinstellung.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Aktiviert – Die Werte der Pixel im Eingabe-Raster, die nicht in einer Remap-Tabelle reklassifiziert werden, werden für ihre Position im Ausgabe-Raster neu zu \"NoData\" zugeordnet.",
	"@@Remap_Input-Field_tag0@@": "Wählen Sie das Feld mit dem Eingabepixelwert aus, der neu zugeordnet werden soll.",
	"@@Remap_Input-Field_tag1@@": "Weist Ihre Tabelle einen Wertebereich auf, ist dies das Feld mit dem Minimalwert, und der Parameter <strong>Eingabe-Maximumfeld</strong> muss dann ebenfalls angegeben werden.",
	"@@Remap_Input-Max-Field_tag0@@": "Wählen Sie das Maximumfeld aus, wenn Ihre Tabelle einen Wertebereich aufweist.",
	"@@Remap_List_tag0@@": "Geben Sie die Zuordnungswerte, den Minimal- und Maximalwert und die neuen Neuzuordnungswerte an. Der Wertebereich kann außerdem als \"NoData\"-Pixel festgelegt werden.",
	"@@Remap_Output-Field_tag0@@": "Wählen Sie das Feld aus, das als Ausgabefeld für den neu zugeordneten Wert dienen soll.",
	"@@Remap_Raster_tag0@@": "Das Eingabe-Raster.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Wählen Sie aus, wie die Neuzuordnung erfolgen soll:",
	"@@Remap_Remap-Definition-Type_tag1@@": "Liste: Geben Sie einen Pixelwertebereich zur Zuordnung zu Ausgabepixelwerten an.",
	"@@Remap_Remap-Table-Type_tag0@@": "Wählen Sie den Tabellentyp aus, den Sie zum Neuzuordnen des Eingaberasters verwenden möchten:",
	"@@Remap_Remap-Table-Type_tag1@@": "<strong>Einfach</strong>: Eine <strong>Remap-Tabelle</strong> wird zum Neuzuordnen der Pixelwerte im <strong>Eingabefeld</strong> zu den entsprechenden Werten im Parameter <strong>Ausgabefeld</strong> eingesetzt. Hierbei wird die Remap-Tabelle gecacht, um die Performance zu erhöhen.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dynamisch: Hierbei wird die Remap-Tabelle nicht gecacht und jedes Mal eine Abfrage ausgeführt, wenn eine Anforderung eingeht (Schwenken, Zoomen oder Aktualisieren). Ändert sich die Tabelle, können bei der nächsten Anforderung die Werte dynamisch neu zugeordnet werden.",
	"@@Remap_Remap-Table-Type_tag9@@": "Neuzuweisung: Eine spezifische Tabelle für den Reklassifizierungsprozess, wobei die Neuzuordnung jeder Zeile nur auf Grundlage der einzelnen Feature-Grenzen erfolgt.",
	"@@Remap_Remap-Table_tag0@@": "Navigieren Sie zu der Tabelle, mit der die Werte neu zugeordnet werden sollen.",
	"@@Reproject_Raster_tag0@@": "Das Raster-Dataset, für das Resampling durchgeführt werden muss.",
	"@@Reproject_Spatial-Reference_tag0@@": "Das Koordinatensystem, das verwendet wird, um die Daten neu zu projizieren.",
	"@@Reproject_X-Cellsize_tag0@@": "Die X-Dimension für das Resampling der Daten. Diese Angabe ist optional. Wenn der Wert 0 oder kleiner ist, wird der Ausgabe-Envelope (Ausdehnung und Zellengrößen) aus dem Eingabe-Raster berechnet.",
	"@@Reproject_X-Registration-Point_tag0@@": "Die zum Definieren der oberen linken Ecke des Datasets verwendete X-Koordinate. Diese Koordinate muss in den Einheiten des neuen Raumbezugs definiert werden. Wenn die beiden Parameter <strong>X-Zellengröße</strong> und <strong>Y-Zellengröße</strong> größer als 0 sind, werden sie zusammen mit den Parametern <strong>X-Registrierungspunkt</strong> und <strong>Y-Registrierungspunkt</strong> verwendet, um den Ausgabe-Envelope zu definieren.",
	"@@Reproject_Y-Cellsize_tag0@@": "Die Y-Dimension für das Resampling der Daten. Diese Angabe ist optional. Wenn der Wert 0 oder kleiner ist, wird der Ausgabe-Envelope (Ausdehnung und Zellengrößen) aus dem Eingabe-Raster berechnet.",
	"@@Reproject_Y-Registration-Point_tag0@@": "Die zum Definieren der oberen linken Ecke des Datasets verwendete Y-Koordinate. Diese Koordinate muss in den Einheiten des neuen Raumbezugs definiert werden. Wenn die beiden Parameter <strong>X-Zellengröße</strong> und <strong>Y-Zellengröße</strong> größer als 0 sind, werden sie zusammen mit den Parametern <strong>X-Registrierungspunkt</strong> und <strong>Y-Registrierungspunkt</strong> verwendet, um den Ausgabe-Envelope zu definieren.",
	"@@Resample_Input-Cellsize_tag0@@": "Die Pixelzellengröße des Eingabe-Rasters.",
	"@@Resample_Output-Cellsize_tag0@@": "Die Pixelzellengröße des Ausgabe-Rasters. Die Zellengröße kann zwar geändert werden, die Ausdehnung des Raster-Datasets bleibt jedoch gleich. Das Resampling aus einer benutzerdefinierten Zellengröße kann viel langsamer sein als im Systemstandard, weil der Systemstandard-Resampling-Prozess die minimale Datenmenge aus der nächstmöglichen Auflösung verarbeitet.",
	"@@Resample_Raster_tag0@@": "Das Eingabe-Raster, für das Resampling durchgeführt wird.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>Nächster Nachbar</strong>: Berechnet den Ausgabepixelwert mithilfe des nächstgelegenen Eingabepixels. NoData-Pixel werden im Ausgabe-Raster-Dataset unverändert beibehalten. Dies ist die Standardeinstellung.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Bilineare Interpolation</strong>: Berechnet den Pixelwert mithilfe des entfernungsgewichteten Wertes der vier nächstgelegenen Pixel. Diese Methode wird recheneffizient verarbeitet.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Kubische Faltung</strong>: Bestimmt den neuen Wert eines Pixels, indem eine geglättete Kurve durch die Mittelpunkte der 16 nächstgelegenen Eingabepixel geführt wird.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Mehrheit</strong>: Berechnet den Pixelwert mithilfe des häufigsten Pixelwertes in den 16 nächstgelegenen Pixeln. NoData-Pixel werden im Ausgabe-Raster-Dataset unverändert beibehalten.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Bilineare Interpolation Plus</strong>: Verwendet <strong>Bilineare Interpolation</strong>, jedoch werden die Pixel entlang den Kanten nicht repliziert oder in der Berechnung berücksichtigt, da sie als NoData definiert sind. Verwenden Sie <strong>Bilineare Interpolation Plus</strong> für gekachelte Daten, da hierdurch die Kanten besser aufeinander abgestimmt werden.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Gauss Blur</strong>: Wendet eine Gauß'sche Faltung auf das Quell-Raster an und berechnet die Pixelwerte mithilfe des entfernungsgewichteten Wertes der vier nächstgelegenen Pixel aus dem Raster mit Weichzeichnung. Damit kann Rauschen aus Resampling-Daten entfernt sowie ein Downsampling auf eine größere Pixelgröße durchgeführt werden.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Gauss Blur Plus</strong>: Verwendet dieselbe Methode wie <strong>Gauss Blur</strong>, jedoch werden die Pixel entlang den Kanten nicht repliziert oder in der Berechnung berücksichtigt, da sie als NoData definiert sind. Verwenden Sie <strong>Gauss Blur Plus</strong> für gekachelte Daten, da hierdurch die Kanten besser aufeinander abgestimmt werden.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Durchschnitt</strong>: Berechnet für jedes Zielpixel die Pixelwerte mithilfe des Durchschnittswertes aller überlappenden Pixel.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Minimum</strong>: Berechnet den Pixelwert mithilfe des Minimalwertes aller überlappenden Pixel. NoData-Pixel werden im Ausgabe-Raster-Dataset unverändert beibehalten.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Maximum</strong>: Eignet sich für kontinuierliche Daten. Es wird ein glatteres Ausgabebild als bei der Resampling-Methode \"Nächster Nachbar\" erstellt.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Vektordurchschnitt</strong>: Berechnet den Vektordurchschnitt von Magnituden-Richtung unter Verwendung aller beteiligten Pixel. Diese Methode ist nur auf zweibändige Raster anwendbar, die Magnitude und Richtung repräsentieren. Sie konvertiert zunächst Magnitude-Richtung in U-V, nimmt dann den arithmetischen Durchschnitt aller beteiligten Pixel, um den U-V-Wert des Zielpixels zu erhalten, und konvertiert dann wieder zurück in Magnitude-Richtung.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Round-Down_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Round-Down_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Round-Down_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Round-Down_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Round-Down_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Round-Down_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Round-Down_Raster_tag0@@": "Die abzurundenden Eingabewerte.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Round-Up_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Round-Up_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Round-Up_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Round-Up_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Round-Up_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Round-Up_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Round-Up_Raster_tag0@@": "Die aufzurundenden Eingabewerte.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "Die minimale Segmentgröße gemessen in Pixel. Dieser Wert bezieht sich auf die minimale Kartenerstellungseinheit und filtert kleinere Pixelblöcke heraus. Alle Segmente, die kleiner sind als der angegebene Wert, werden dann mit dem am besten passenden Nachbarschaftssegment zusammengeführt.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "Das zu segmentierende Eingabe-Raster.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "Die Segmentgrenzen werden als schwarze Konturlinie um jedes Segment dargestellt. Das ist praktisch, um benachbarte Segmente voneinander zu unterscheiden, die gleiche Farben haben.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Deaktiviert: Die Segmentgrenzen werden nicht angezeigt. Dies ist die Standardeinstellung.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Aktiviert: Die Segmentgrenzen werden als schwarze Konturlinien um jedes Segment angezeigt.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "Die relative Gewichtung der Trennung von Objekten basierend auf räumlichen Merkmalen.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "Zulässig sind ganzzahlige Werte im Bereich von 1 bis 20. Kleinere Werte führen zu umfassenderen Klassen und zu mehr Glättung. Ein höherer Wert ist geeignet, um zwischen Features zu unterscheiden, die räumlich klein und gruppiert sind. In einer städtischen Szene können Sie beispielsweise Features für allgemeine undurchlässige Oberflächen mit einem kleineren räumlichen Detailwert klassifizieren, oder Sie können Gebäude und Straßen als getrennte Klassen mit einem höheren räumlichen Detailwert klassifizieren.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "Die relative Gewichtung der Trennung von Objekten basierend auf Farbmerkmalen.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "Gültige Gleitkommawerte liegen zwischen 1,0 und 20,0 Grad. Kleinere Werte führen zu umfassenderen Klassen und zu mehr Glättung. Ein höherer Wert ist geeignet, wenn Sie zwischen Features unterscheiden möchten, die ähnliche Spektraleigenschaften aufweisen. Detailliertere spektrale Werte für eine Waldszene ermöglichen Ihnen beispielsweise eine bessere Unterscheidung der verschiedenen Baumarten.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>Die maximale Größe eines Segments. Segmente, die größer als die angegebene Größe sind, werden geteilt. Verwenden Sie diesen Parameter, um Artefakte im Ausgabe-Layer zu verhindern, die sich durch große Segmente ergeben. Der Standardwert ist -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Es stehen vier Kalibrierungstypen zur Auswahl:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta-Nought</strong>: Erzeugt eine Ausgabe, die den Radar-Helligkeitskoeffizienten enthält.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma-Nought</strong>: Die Rückstreuung, die von einer Einheitsfläche am Boden an die Antenne zurückgegeben wird, bezogen auf die Bodenreichweite.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gamma</strong>: Messung der abgestrahlten und zurückgegebenen Energie, die für die Bestimmung von Antennenmustern nützlich ist.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>Keine</strong>: Keine Korrektur anwenden. Dies ist die Standardeinstellung.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "Das Sentinel-1 Level-1 GRD- oder SLC-Eingabe-Raster, das Sie verarbeiten möchten.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "Die Funktion verwendet die LUT-Datei entweder zum Anwenden der thermischen Korrektur oder zum Entfernen der Korrektur, je nach Inhalt der LUT.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "Das Sentinel-1-Eingabe-Raster, das Sie verarbeiten möchten.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "Die Funktion verwendet die LUT-Datei entweder zum Anwenden der thermischen Korrektur oder zum Entfernen der Korrektur, je nach Inhalt der LUT.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Set-Null_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Set-Null_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Set-Null_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Set-Null_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Set-Null_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Set-Null_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Set-Null_False-Raster_tag0@@": "Die Eingabe, deren Werte als Ausgabepixelwerte verwendet werden, wenn die Bedingung falsch (false) ist. Es kann ein Raster mit ganzzahligen Werten oder mit Gleitkommas oder ein konstanter Wert sein.",
	"@@Set-Null_Raster_tag0@@": "Das Eingabe-Raster stellt das boolesche Ergebnis einer logischen mathematischen Raster-Funktion dar. Die Werte sind 1 (für TRUE) oder 0 (für FALSE). Das Raster kann ein ganzzahliges oder ein Gleitkomma-Raster sein.",
	"@@Shaded-Relief_Altitude_tag0@@": "Die Höhe ist der Höhenwinkel der Sonne über dem Horizont und liegt in einem Bereich von 0 bis 90 Grad. Der Wert 0 Grad gibt an, dass die Sonne sich am Horizont befindet, also auf der gleichen horizontalen Ebene wie der Referenzrahmen. Der Wert 90 Grad gibt an, dass die Sonne direkt im Zenit steht. Der Standardwert ist 45 Grad über dem Horizont.",
	"@@Shaded-Relief_Azimuth_tag0@@": "Das Azimut ist die relative Position der Sonne am Horizont (in Grad). Diese Position wird vom Winkel der Sonne angegeben, der im Uhrzeigersinn aus \"genau Nord\" gemessen wird. Ein Azimut von 0 Grad steht für Norden, 90 Grad steht für Osten, 180 Grad steht für Süden und 270 Grad steht für Westen.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Geben Sie an, ob ein Farbverlauf oder eine Colormap für die Anzeige des geschummerten Reliefs verwendet wird.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Farbverlauf</strong>: Wenn Sie <strong>Farbverlauf</strong> auswählen, müssen Sie einen geeigneten Farbverlauf auswählen.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Colormap</strong>: Wenn Sie <strong>Colormap</strong> auswählen, müssen Sie die zu verwendende Colormap-Datei angeben.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Geben Sie an, ob die Standardinterpolation für Kantenpixel deaktiviert wird.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Deaktiviert: Bilineares Resampling wird gleichmäßig für das Resampling des geschummerten Reliefs angewendet. Dies ist die Standardeinstellung.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Aktiviert: Bilineares Resampling wird innerhalb des geschummerten Reliefs verwendet, außer entlang der Kanten der Raster oder neben NoData-Pixeln. Diese Pixel werden mit \"NoData\" aufgefüllt, da alle Effekte scharfer Kanten reduziert werden, die auftreten können.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Mit dieser Option können Sie alle Resampling-Artefakte vermeiden, die entlang der Kanten eines Rasters auftreten können. Die Ausgabe-Pixel entlang der Kante eines Rasters oder neben Pixeln ohne einen Wert werden mit \"NoData\" aufgefüllt. Daher wird empfohlen, diese Option nur dann zu verwenden, wenn andere Raster mit überlappenden Pixeln verfügbar sind. Wenn überlappende Pixel verfügbar sind, zeigen diese Flächen mit \"NoData\" die überlappenden Pixel an und sind nicht leer.",
	"@@Shaded-Relief_Raster_tag0@@": "Das Eingabe-Höhenraster.",
	"@@Shaded-Relief_Scaling_tag0@@": "Das geschummerte Ergebnis wird dynamisch skaliert, indem der Z-Faktor mit einer der folgenden beiden Optionen angepasst wird:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>Keine</strong>: Es wird keine Skalierung angewendet.. Dies eignet sich ideal für einzelne Raster-Datasets für ein lokales Gebiet. Dies wird für weltweite Datasets mit großen Höhenabweichungen oder Karten mit mehreren Maßstäben nicht empfohlen, da bei kleinen Maßstäben Terrain-Relief mit geringen Abweichungen erzeugt wird.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Angepasst</strong>: Eine nicht-lineare Anpassung wird mit den Standardwerten für <strong>Pixelgrößen-Potenz</strong> und <strong>Pixelgrößenfaktor</strong> angewendet, die verschiedenste Höhenänderungen (Skala) beim Vergrößern und Verkleinern der Viewer-Ansicht beinhalten. Die Option <strong>Angepasst</strong> wird bei Verwendung eines weltweiten Datasets empfohlen.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "Der Z-Faktor ist ein Skalierungsfaktor, der zum Konvertieren der Höhenwerte für zwei Zwecke verwendet wird:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "Zum Konvertieren der Höhenwerte (z. B. Meter oder Fuß) in die horizontalen Koordinateneinheiten des Datasets, die in Fuß, Metern oder Grad vorliegen können",
	"@@Shaded-Relief_Z-Factor_tag2@@": "Zum Hinzufügen der vertikalen Überhöhung als visuellem Effekt",
	"@@Shaded-Relief_Z-Factor_tag3@@": "Das geschummerte Ergebnis wird dynamisch skaliert, indem der Z-Faktor mit einer der folgenden beiden Optionen angepasst wird:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>Keine</strong>: Es wird keine Skalierung angewendet.. Dies eignet sich ideal für einzelne Raster-Datasets für ein lokales Gebiet. Dies wird für weltweite Datasets mit großen Höhenabweichungen oder Karten mit mehreren Maßstäben nicht empfohlen, da bei kleinen Maßstäben Terrain-Relief mit geringen Abweichungen erzeugt wird.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Angepasst</strong>: Eine nicht-lineare Anpassung wird mit den Standardwerten für <strong>Pixelgrößen-Potenz</strong> und <strong>Pixelgrößenfaktor</strong> angewendet, die verschiedenste Höhenänderungen (Skala) beim Vergrößern und Verkleinern der Viewer-Ansicht beinhalten. Die Option <strong>Angepasst</strong> wird bei Verwendung eines weltweiten Datasets empfohlen.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Steuert die Beleuchtungsquelle für die Schummerung.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Herkömmlich</strong>: Berechnet die Schummerung aus einer einzelnen Beleuchtungsrichtung. Sie können die Optionen <strong>Azimut</strong> und <strong>Höhe</strong> festlegen, um die Position der Lichtquelle zu steuern. Dies ist die Standardeinstellung.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Multidirektional</strong>: Mit dieser Option wird Licht aus mehreren Quellen kombiniert, um eine verbesserte Visualisierung des Terrains darzustellen.",
	"@@Shaded-Relief_PSPower_tag0@@": "Die <strong>Pixelgrößen-Potenz</strong> berücksichtigt die Höhenänderungen (Maßstab), wenn die Kartenanzeige vergrößert und verkleinert wird. Es handelt sich um den Exponenten, der auf den Pixelgrößen-Term in der Gleichung angewendet wird. Damit wird die Rate gesteuert, mit der sich der <strong>Z-Faktor</strong> ändert, um einen signifikanten Reliefverlust zu vermeiden.",
	"@@Shaded-Relief_PSPower_tag1@@": "Dieser Parameter ist nur gültig, wenn <strong>Skalierung</strong> auf <strong>Angepasst</strong> festgelegt ist. Der Standardwert ist 0,664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "Der <strong>Pixelgrößenfaktor</strong> berücksichtigt die Maßstabsänderungen, wenn die Kartenanzeige vergrößert und verkleinert wird. Sie steuert die Rate, mit der sich der <strong>Z-Faktor</strong> ändert.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Dieser Parameter ist nur gültig, wenn <strong>Skalierung</strong> auf <strong>Angepasst</strong> festgelegt ist. Der Standardwert ist 0,024.",
	"@@Sin_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Sin_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Sin_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Sin_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Sin_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Sin_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Sin_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Sin_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Sin_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Sin_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Sin_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Sin_Raster_tag0@@": "Die Eingabe, für die die Sinuswerte berechnet werden sollen.",
	"@@SinH_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@SinH_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@SinH_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@SinH_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@SinH_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@SinH_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@SinH_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@SinH_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@SinH_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@SinH_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@SinH_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@SinH_Raster_tag0@@": "Die Eingabe, für die die Werte des Sinus Hyperbolicus berechnet werden sollen.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "Das Eingabe-Raster, das die Fließrichtung aus jeder Zelle anzeigt.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "Das Fließrichtungs-Raster kann mit der Funktion <strong>Fließrichtung</strong> erstellt werden.",
	"@@Slope_DEM_tag0@@": "Das Eingabe-Höhenraster.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Mit dieser Option können Sie alle Resampling-Artefakte vermeiden, die entlang der Kanten eines Rasters auftreten können. Die Ausgabe-Pixel entlang der Kante eines Rasters oder neben Pixeln ohne einen Wert werden mit \"NoData\" aufgefüllt. Daher wird empfohlen, diese Option nur dann zu verwenden, wenn andere Raster mit überlappenden Pixeln verfügbar sind. Wenn überlappende Pixel verfügbar sind, zeigen diese Flächen mit \"NoData\" die überlappenden Pixel an und sind nicht leer.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Deaktiviert: Bilineares Resampling wird gleichmäßig für das Resampling der Neigung angewendet. Dies ist die Standardeinstellung.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Aktiviert: Bilineares Resampling wird innerhalb der Neigung verwendet, außer entlang der Kanten der Raster oder neben NoData-Pixeln. Diese Pixel werden mit \"NoData\" aufgefüllt, da alle Effekte scharfer Kanten reduziert werden, die auftreten können.",
	"@@Slope_Scaling_tag0@@": "Die Neigungswinkel kann als Wert in Grad oder Prozent ausgegeben werden. Für <strong>Skalierung</strong> sind drei Optionen verfügbar:",
	"@@Slope_Scaling_tag3@@": "<strong>Grad</strong>: Der Neigungswinkel wird in Grad berechnet. Die Werte liegen zwischen 0 und 90.",
	"@@Slope_Scaling_tag5@@": "<strong>Percent_Rise</strong>: Der Neigungswinkel wird in Form von Prozentwerten berechnet. Die Werte liegen zwischen 0 und unendlich. Eine flache Oberfläche entspricht einem Anstieg von 0 Prozent, und eine 45-Grad-Oberfläche entspricht einem Anstieg von 100 Prozent. Wenn die Oberfläche vertikaler wird, wird der Prozentanstieg zunehmend größer.",
	"@@Slope_Scaling_tag7@@": "<strong>Skaliert</strong>: Der Neigungswinkel wird auf die gleiche Weise wie bei GRAD berechnet, der Z-Faktor wird jedoch an den Maßstab angepasst. Es werden die Werte für <strong>Pixelgrößen-Potenz</strong> und <strong>Pixelgrößenfaktor</strong> verwendet, wodurch die Auflösungsänderungen (Maßstab) beim Vergrößern und Verkleinern der Viewer-Ansicht berücksichtigt werden. Dies wird beim Einsatz von weltweiten Datasets empfohlen – insbesondere bei Verwendung der Neigung als Oberfläche für die Visualisierung.",
	"@@Slope_Scaling_tag13@@": "Der Z-Faktor wird mithilfe der folgenden Gleichung angepasst:",
	"@@Slope_Scaling_tag14@@": "Angepasster Z-Faktor = (Z-Faktor) + (Pixelgröße)",
	"@@Slope_Scaling_tag15@@": "× (Pixelgrößenfaktor)",
	"@@Slope_Scaling_tag16@@": "Pixelgrößen-Potenz",
	"@@Slope_Z-Factor_tag0@@": "Der <strong>Z-Faktor</strong> ist ein Skalierungsfaktor, der zum Konvertieren der Höhenwerte für folgende zwei Zwecke verwendet wird:",
	"@@Slope_Z-Factor_tag3@@": "Zum Konvertieren der Höhenwerte (z. B. Meter oder Fuß) in die horizontalen Koordinateneinheiten des Datasets, die in Fuß, Metern oder Grad vorliegen können",
	"@@Slope_Z-Factor_tag4@@": "Zum Hinzufügen der vertikalen Überhöhung als visuellem Effekt",
	"@@Slope_PSPower_tag0@@": "Die <strong>Pixelgrößen-Potenz</strong> berücksichtigt die Höhenänderungen (Maßstab), wenn die Kartenanzeige vergrößert und verkleinert wird. Es handelt sich um den Exponenten, der auf den Pixelgrößen-Term in der Gleichung angewendet wird. Damit wird die Rate gesteuert, mit der sich der <strong>Z-Faktor</strong> ändert, um einen signifikanten Reliefverlust zu vermeiden.",
	"@@Slope_PSPower_tag1@@": "Dieser Parameter ist nur gültig, wenn <strong>Skalierung</strong> auf <strong>Skaliert</strong> festgelegt ist. Der Standardwert ist 0,664.",
	"@@Slope_PSZFactor_tag0@@": "Der <strong>Pixelgrößenfaktor</strong> berücksichtigt die Maßstabsänderungen, wenn die Kartenanzeige vergrößert und verkleinert wird. Sie steuert die Rate, mit der sich der <strong>Z-Faktor</strong> ändert.",
	"@@Slope_PSZFactor_tag1@@": "Dieser Parameter ist nur gültig, wenn <strong>Skalierung</strong> auf <strong>Skaliert</strong> festgelegt ist. Der Standardwert ist 0,024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "Der Eingabe-Raster-Layer für die Abflussakkumulation.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "Kann mit der Funktion <strong>Abflussakkumulation</strong> erstellt werden.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "Feld für die Zuweisung von Werten zu den Abflusspunktpositionen.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "Die Abflusspunktpositionen der Eingabe, die gefangen werden sollen.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "Bei einem Eingabe-Raster-Layer werden alle Zellen, bei denen sich nicht um NoData-Zellen handelt (die also einen Wert aufweisen), als Abflusspunkte angesehen und gefangen.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "Die maximale Entfernung (in Karteneinheiten), in der nach einer Zelle mit höherer Abflussakkumulation gesucht werden soll.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Gibt den Mittelwert des additiven Rauschens an. Ein größerer Rauschmittelwert erzeugt eine geringere Glättung, während ein kleinerer Wert zu einer umfassenderen Glättung führt.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Dieser Parameter ist nur gültig, wenn für <strong>Filtertyp</strong> der <strong>Lee-Filter</strong> angegeben wurde und das <strong>Rauschmodell</strong> entweder <strong>Additives Rauschen</strong> oder <strong>Additives und multiplikatives Rauschen</strong> ist. Der Standardwert ist 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Gibt den Grad des exponentiellen Dämpfungseffekts auf die Filterung an. Ein größerer Dämpfungswert behält Kanten in größerem Maß bei und führt zu einer geringeren Glättung, während ein kleinerer Wert eine umfassendere Glättung erzeugt. Der Wert 0 führt zur selben Ausgabe wie ein Tiefpass-Filter.",
	"@@Speckle_Damping-Factor_tag1@@": "Dieser Parameter ist nur gültig, wenn für <strong>Filtertyp</strong> entweder <strong>Erweiterter Lee-Filter</strong> oder <strong>Frost-Filter</strong> ausgewählt wurde. Der Standardwert ist 1.",
	"@@Speckle_Filter-Size_tag0@@": "Gibt die Größe des Pixelfensters für das Filtern von Rauschen an:",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "Gibt den Filtertyp an, der im Glättungsalgorithmus verwendet wird, um Speckle-Rauschen zu entfernen:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Lee-Filter</strong>: Reduziert das Rauschen durch Speckle, indem ein räumlicher Filter auf die einzelnen Pixel in einem Bild angewendet wird. Damit werden die Daten auf Grundlage von lokalen Statistiken gefiltert, die innerhalb eines quadratischen Fensters berechnet werden. Dieser Filter ist hilfreich, wenn Sie Daten mit Speckle sowie einer additiven oder multiplikativen Komponente glätten möchten. Dies ist die Standardeinstellung.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Erweiterter Lee-Filter</strong>: Eine überarbeitete Version des Lee-Filters mit <strong>Dämpfungsfaktor</strong> und <strong>Anzahl von Looks</strong>. Dieser Filter ist hilfreich, wenn Sie Speckle reduzieren und gleichzeitig Informationen zur Textur beibehalten möchten.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Frost-Filter</strong>: Reduziert Speckle-Rauschen mit einem exponentiell gedämpften, kreisförmig-symmetrischen Filter, der lokale Statistiken in einzelnen Filterfenstern verwendet. Dieser Filter ist hilfreich, wenn Sie Speckle reduzieren und gleichzeitig Kanten in Radarbildern beibehalten möchten.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Kuan-Filter</strong>: Ähnlich wie beim Lee-Filter wird von diesem Filter ein räumlicher Filter auf die einzelnen Pixel in einem Bild angewendet. Damit werden die Daten auf Grundlage von lokalen Statistiken gefiltert, die innerhalb eines quadratischen Fensters berechnet werden. Dieser Filter ist hilfreich, wenn Sie Speckle reduzieren und gleichzeitig Kanten in Radarbildern beibehalten möchten.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Gibt den Mittelwert des multiplikativen Rauschens an. Ein größerer Rauschmittelwert erzeugt eine geringere Glättung, während ein kleinerer Wert zu einer umfassenderen Glättung führt.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Dieser Parameter ist nur gültig, wenn für <strong>Filtertyp</strong> der <strong>Lee-Filter</strong> angegeben wurde und das <strong>Rauschmodell</strong> entweder <strong>Additives Rauschen</strong> oder <strong>Additives und multiplikatives Rauschen</strong> ist. Der Standardwert ist 1.",
	"@@Speckle_Noise-Model_tag0@@": "Gibt den Typ des Rauschens an, durch das die Qualität des Radarbildes beeinträchtigt wird:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Multiplikatives Rauschen</strong>: Zufallssignalrauschen, das während der Erfassung oder Übertragung in das relevante Signal multipliziert wird.",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Additives Rauschen</strong>: Zufallssignalrauschen, das während der Erfassung oder Übertragung in das relevante Signal addiert wird.",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Additives und multiplikatives Rauschen</strong>: Beide Rauschmodelle.",
	"@@Speckle_Noise-Variance_tag0@@": "Gibt die Rauschvarianz des Radarbildes an.",
	"@@Speckle_Noise-Variance_tag1@@": "Dieser Parameter ist nur gültig, wenn für <strong>Filtertyp</strong> der <strong>Lee-Filter</strong> angegeben wurde und das <strong>Rauschmodell</strong> entweder <strong>Additives Rauschen</strong> oder <strong>Additives und multiplikatives Rauschen</strong> ist. Der Standardwert ist 0,25.",
	"@@Speckle_Number-of-Looks_tag0@@": "Gibt die Anzahl von Looks des Bildes an, wodurch die Bildglättung gesteuert und die Rauschvarianz geschätzt wird. Ein kleinerer Wert erzeugt eine stärkere Glättung, während bei einem größeren Wert mehr Bild-Features beibehalten werden.",
	"@@Speckle_Number-of-Looks_tag1@@": "Dieser Parameter ist nur gültig, wenn für <strong>Filtertyp</strong> der <strong>Lee-Filter</strong> und für <strong>Rauschmodell</strong> die Option <strong>Multiplikatives Rauschen</strong> ausgewählt wurde oder wenn der <strong>Filtertyp</strong> <strong>Kuan-Filter</strong> ist. Der Standardwert ist 1.",
	"@@Speckle_Raster_tag0@@": "Das Eingabe-Raster.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "Die Matrix, die zum Konvertieren des Eingabe-Rasters verwendet wird.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "Die Gleichung, die verwendet wird, um diese Konvertierung auszuführen, lautet:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Output Band_R = Weight_P * Band_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "Dabei gilt:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Band_R ist ein Ausgabeband, wobei R eine Zahl von 1 bis zur Anzahl der Ausgabebänder ist.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Weight_P ist eine durch Kommas getrennte Liste von Gewichtungen, 1 für jedes Eingabeband. Die Summe aller Gewichtungen für jedes Band sollte 1 entsprechen.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "Band_C ist das Eingabebild, wobei C eine Zahl von 1 bis zur Zahl der Bänder des Eingabebildes ist.",
	"@@Spectral-Conversion_Raster_tag0@@": "Das Eingabe-Raster.",
	"@@Spectral-Conversion_Raster_tag1@@": "Dies kann ein Raster-Dataset, ein Mosaik-Dataset oder ein Image-Service sein.",
	"@@Spectral-Conversion_Size_tag0@@": "Die Anzahl an Zeilen und Spalten in der <strong>Konvertierungsmatrix</strong>.",
	"@@Square_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Square_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Square_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Square_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Square_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Square_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Square_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Square_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Square_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Square_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Square_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Square_Raster_tag0@@": "Die Eingabewerte, deren Quadrat ermittelt werden soll.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Square-Root_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Square-Root_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Square-Root_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Square-Root_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Square-Root_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Square-Root_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Square-Root_Raster_tag0@@": "Die Eingabewerte, deren Quadratwurzel ermittelt werden sollen.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Legen Sie für jedes Band die Statistikwerte fest.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "Die Spalte ${Histogram} ist ein schreibgeschütztes Feld, das mithilfe des Parameters <strong>Importieren</strong> gefüllt werden kann. Wenn Sie eine Histogrammdatei importieren, wird die Spalte \"${Histogram}\" als <strong>Definiert</strong> markiert.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Importieren Sie die Statistik- und Histogramminformationen aus einer vorhanden Raster- oder XML-Datei.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "Das Eingabe-Raster, das zum Festlegen der Statistik und des Histogramms erforderlich ist.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Legen Sie für jedes Band die Statistikwerte fest.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "Das Eingabe-Raster, das die Fließrichtung aus jeder Zelle anzeigt.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "Das Fließrichtungs-Raster kann mit der Funktion <strong>Fließrichtung</strong> erstellt werden.",
	"@@Stream-Link_Stream-Raster_tag0@@": "Das Eingabe-Raster, das ein lineares Wasserlaufnetz darstellt.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "Das Eingabe-Raster, das die Fließrichtung aus jeder Zelle anzeigt.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "Das Fließrichtungs-Raster kann mit der Funktion <strong>Fließrichtung</strong> erstellt werden.",
	"@@Stream-Order_Order-Method_tag0@@": "Die zum Zuweisen der Wasserlauf-Ordnung verwendete Methode.",
	"@@Stream-Order_Order-Method_tag1@@": "</strong>STRAHLER</strong>: Die von Strahler im Jahr 1952 vorgeschlagene Methode zur Wasserlauf-Ordnung. Die Wasserlauf-Ordnung erhöht sich nur, wenn sich Wasserläufe der gleichen Ordnung überschneiden. Der Schnittpunkt eines Links der ersten Ordnung und der zweiten Ordnung bleibt ein Link zweiter Ordnung, und es wird kein Link dritter Ordnung erstellt. Dies ist die Standardeinstellung.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong>: Die von Shreve im Jahr 1967 vorgeschlagene Methode der Wasserlauf-Ordnung nach Magnitude. Allen Links ohne Nebenflüssen wird die Magnitude (Ordnung) 1 zugewiesen. Die Magnituden addieren sich im tiefer gelegenen Bereich. Wenn sich zwei Links überschneiden, werden ihre Magnituden addiert und dem tiefer gelegenen Link zugewiesen.",
	"@@Stream-Order_Stream-Raster_tag0@@": "Ein Eingabe-Wasserlauf-Raster, das ein lineares Wasserlaufnetz darstellt.",
	"@@Stretch_Auto-Gamma_tag0@@": "Verwenden Sie <strong>Automatische Gammafunktion</strong>, um den Gamma-Wert aus der Statistik und dem Histogramm des Datasets zu berechnen. Bei der Statistik kann es sich um die von der Funktion geschätzte oder um die von der Software geschätzte Statistik handeln, wenn Sie einen Layer auswählen.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Aktivieren Sie das Kontrollkästchen <strong>Dynamische Bereichsanpassung</strong>, wenn nur Statistiken von den Pixeln in der Anzeigeausdehnung berechnet werden sollen. Diese Option wird in der Regel angewendet, wenn das Bild veröffentlicht und in einer Web-App verwendet wird, die diesen Typ der Streckung nicht ausführen kann.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Aktivieren Sie das Kontrollkästchen <strong>Statistiken schätzen</strong>, wenn Sie Ihre Statistiken schätzen möchten. Die geschätzten Statistiken werden mit einer 1000 x 1000-Stichprobe vom Mittelpunkt des Rasters berechnet und von der Streckung verwendet.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Wenn diese Option aktiviert ist und das Raster Statistiken aufweist oder Sie Werte in der Tabelle <strong>Statistiken</strong> eingegeben haben, werden diese anstelle eines Schätzwertes verwendet, außer wenn für die Streckung ein Histogramm erforderlich ist. Wenn für die Streckung ein Histogramm erforderlich ist, das aber nicht vorhanden ist, findet eine Schätzung statt.",
	"@@Stretch_Gamma_tag0@@": "Legen Sie den Wert für <strong>Gamma</strong> mithilfe des Schiebereglers fest.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Legen Sie den n-Wert zur Anzahl der zu verwendenden Standardabweichungen fest. Diese Methode wird verwendet, um hervorzuheben, wie viele Feature-Werte vom Mittelwert abweichen; sie wird am besten auf normalverteilte Daten angewendet.",
	"@@Stretch_Output-Maximum_tag0@@": "Legen Sie den höchsten Pixelwert für das Histogramm fest.",
	"@@Stretch_Output-Maximum_tag1@@": "Mit <strong>Ausgabe-Minimum</strong> und <strong>Ausgabe-Maximum</strong> wird der Wertebereich festgelegt, für den anschließend eine lineare Kontraststreckung ausgeführt wird.",
	"@@Stretch_Output-Minimum_tag0@@": "Legen Sie den niedrigsten Pixelwert für das Histogramm fest.",
	"@@Stretch_Output-Minimum_tag1@@": "Mit <strong>Ausgabe-Minimum</strong> und <strong>Ausgabe-Maximum</strong> wird der Wertebereich festgelegt, für den anschließend eine lineare Kontraststreckung ausgeführt wird.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Legt den Prozentsatz der hohen Werte fest, die von der Streckung ausgeschlossen werden sollen.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "Zulässig sind Werte im Bereich von 0 bis 99.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Legt den Prozentsatz der niedrigen Werte fest, die von der Streckung ausgeschlossen werden sollen.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "Zulässig sind Werte im Bereich von 0 bis 99.",
	"@@Stretch_Raster_tag0@@": "Das Eingabe-Raster für Kontraststreckung.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "Die </strong>Stärkestufe</strong> bestimmt, welcher Teil der Sigmoidfunktion in der Streckung verwendet wird. Bei einem niedrigen Wert wie 1 wird nur der mittlere Teil der Kurve verwendet, wodurch meist stumpfe, blasse Farben erzeugt werden. Bei einem hohen Wert wie 6 wird die gesamte Kurve verwendet, wodurch kräftige, intensive Farben entstehen.",
	"@@Stretch_Statistics_tag0@@": "Sie können im Dialogfeld eigene Statistik eingeben. Standardmäßig wird die Statistik aus den Daten gewonnen. Wenn Sie in diesem Parameter allerdings Werte eingeben, werden stattdessen diese verwendet.",
	"@@Stretch_Type_tag0@@": "Wählen Sie die Streckungstypmethode aus:",
	"@@Stretch_Type_tag1@@": "Keine: Keine Kontraststreckung",
	"@@Stretch_Type_tag2@@": "StdAbw: Streckung mit Standardabweichung",
	"@@Stretch_Type_tag3@@": "MinMax: Minimum-Maximum-Streckung",
	"@@Stretch_Type_tag4@@": "PercentMinMax: Streckung mit prozentualer Eingrenzung",
	"@@Stretch_Type_tag5@@": "Sigmoid: Sigmoid-Streckung",
	"@@Stretch_Use-Gamma_tag0@@": "Aktivieren Sie das Kontrollkästchen <strong>Gamma verwenden</strong>, wenn Sie eine Gamma-Streckung verwenden möchten.",
	"@@Swath_Cellsize_tag0@@": "Die Zellengröße für das Ausgabe-Raster wird automatisch erkannt, kann jedoch noch geändert werden. Die Zellengröße kann zwar geändert werden, die Ausdehnung des Raster-Datasets bleibt jedoch gleich.",
	"@@Swath_Interpolation-Method_tag0@@": "Für diese Funktion stehen vier Resampling-Methoden zur Verfügung:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Nächster Nachbar</strong>: Berechnet den Pixelwert mithilfe des nächstgelegenen Pixels. Wenn kein Quellpixel vorhanden ist, kann in der Ausgabe kein neues Pixel erstellt werden.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Bilinear</strong>: Berechnet den Pixelwert mithilfe des entfernungsgewichteten Wertes der vier nächstgelegenen Pixel.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>Lineares TIN</strong>: Mithilfe eines unregelmäßigen Dreiecksnetzes, das aus den Mittelpunkten der einzelnen Zellen im unregelmäßigen Raster berechnet wurde, wird eine Fläche interpoliert und danach in ein regelmäßiges Raster umgewandelt.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Natürlicher Nachbar</strong>: Es erfolgt eine Zuweisung des nächsten Nachbarn. Dies ist die schnellste der Interpolationsmethoden. Sie wird vorwiegend für diskontinuierliche Daten verwendet (beispielsweise für eine Klassifizierung der Landnutzung), weil die Zellenwerte nicht geändert werden. Der maximale räumliche Fehler entspricht der Hälfte der Zellengröße.",
	"@@Swath_Raster_tag0@@": "Das unregelmäßige Gitter-Raster, für das das Resampling durchgeführt werden muss.",
	"@@Tan_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Tan_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Tan_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Tan_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Tan_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Tan_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Tan_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Tan_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Tan_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Tan_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Tan_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Tan_Raster_tag0@@": "Die Eingabe, für die die Tangenswerte berechnet werden sollen.",
	"@@TanH_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@TanH_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@TanH_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@TanH_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@TanH_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@TanH_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@TanH_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@TanH_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@TanH_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@TanH_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@TanH_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@TanH_Raster_tag0@@": "Die Eingabe, für die die Werte des Tangens Hyperbolicus berechnet werden sollen.",
	"@@Tasseled-Cap_Raster_tag0@@": "Das Eingabe-Raster, für das die Tasseled-Cap-Transformation durchgeführt wird.",
	"@@Times_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Times_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Times_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Times_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Times_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Times_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Times_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Times_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Times_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Times_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Times_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Times_Raster_tag0@@": "Die Eingabe, die die zu multiplizierenden Werte enthält.",
	"@@Times_Raster_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Times_Raster2_tag0@@": "Die Eingabe, die die Werte enthält, die mit der ersten Eingabe multipliziert werden.",
	"@@Times_Raster2_tag1@@": "Für diesen Parameter kann ein konstanter Wert als Eingabe verwendet werden, vorausgesetzt für den anderen Parameter wird ein Raster angegeben.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Wählen Sie den Typ des durchzuführenden Versatzes aus, oder geben Sie ein benutzerdefiniertes Muster an:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8 Cirrus",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8 Cloud",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8 Cloud Shadow",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8 Designated Fill",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8 Dropped Frame",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8 Snow/Ice",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8 Terrain Occlusion",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8 Vegetation",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8 Water",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Benutzerdefiniert",
	"@@Transpose-Bits_Constant-Value_tag0@@": "Ein optionaler Wert, mit dem alle Bits gefüllt werden, die nicht am Versatz beteiligt sind. Dieser Parameter wird angezeigt, wenn der Parameter <strong>Raster aus Konstanten erstellen</strong> auf <strong>Ja</strong> festgelegt ist.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Geben Sie ein Raster-Dataset an, mit dem alle Bits gefüllt werden, die nicht am Versatz beteiligt sind. Dieser Parameter wird angezeigt, wenn der Parameter <strong>Raster aus Konstanten erstellen</strong> auf <strong>Nein</strong> festgelegt ist.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Füllraster mit einem konstanten Wert genieren:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Ja</strong>: Ein Raster wird mit einem konstanten Wert generiert, um die nicht am Versatz beteiligten Bits zu füllen. Dies ist die Standardeinstellung.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>Nein</strong>: Ein Raster wird mit Pixelwerten aus einem vorhandenen Raster-Dataset generiert, um die nicht am Versatz beteiligten Bits zu füllen.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "Eine schreibgeschützte Tabelle mit den Ausgabebits und den Eingaben, die deren Platz einnehmen.",
	"@@Transpose-Bits_Raster_tag0@@": "Das Eingabe-Raster, das entpackt und neu zugeordnet wird.",
	"@@Unit-Conversion_From-Unit_tag0@@": "Der ursprüngliche Einheiten-Typ der Pixel.",
	"@@Unit-Conversion_Raster_tag0@@": "Das Eingabe-Raster, für das die konvertierten Einheiten bestimmt sind.",
	"@@Unit-Conversion_To-Unit_tag0@@": "Der konvertierte Einheiten-Typ der Pixel.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Gibt an, wie die Richtungskomponente gemessen wurde.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Geographisch: 0°-Punkte nach Norden und 90°-Punkte nach Osten",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Arithmetisch: 0°-Punkte nach Osten und 90°-Punkte nach Norden",
	"@@Vector-Field_Input-Data-Type_tag0@@": "Der Typ des Vektorfeldes für Ihre Eingaben.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Unbekannt: Es ist unbekannt, ob die Eingaben für \"U-V\" oder \"Magnituden-Richtung\" stehen.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V: Die Eingabedaten stellen U- und V-Komponenten dar.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Magnituden-Richtung: Die Eingabedaten stellen Magnitude und Richtung dar.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Gibt den Typ des Vektorfeldes für Ihre Ausgaben an.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Magnituden-Richtung: Die Ausgabedaten stellen Magnitude und Richtung dar.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V: Die Ausgabedaten stellen U- und V-Komponenten dar.",
	"@@Vector-Field_Raster1_tag0@@": "Das erste Eingabe-Raster.",
	"@@Vector-Field_Raster1_tag1@@": "Dies ist entweder der U-Wert oder die Magnitude.",
	"@@Vector-Field_Raster2_tag0@@": "Das zweite Eingabe-Raster.",
	"@@Vector-Field_Raster2_tag1@@": "Dies ist entweder der V-Wert oder die Richtung.",
	"@@Viewshed_Analysis-Method_tag0@@": "Legen Sie fest, mit welcher Methode die Sichtbarkeit berechnet wird. Mit dieser Option tauschen Sie ein wenig Genauigkeit gegen eine erhöhte Performance ein.",
	"@@Viewshed_Analysis-Method_tag1@@": "Alle Sichtlinien: Sichtlinien werden für jedes Pixel im Raster ausgeführt, um sichtbare Bereiche zu erstellen. Dies ist das Standardverfahren.",
	"@@Viewshed_Analysis-Method_tag2@@": "Sichtlinien aus Umfang: Sichtlinien werden nur für die Pixel des Umfangs der sichtbaren Bereiche ausgeführt, um sichtbare Bereiche zu erstellen. Diese Methode zeichnet sich im Vergleich zu der Methode <strong>Alle Sichtlinien</strong> durch eine bessere Performance aus, da weniger Sichtlinien in der Berechnung enthalten sind.",
	"@@Viewshed_Analysis-Type_tag0@@": "Wählen Sie aus, welcher Typ von Sichtbarkeitsanalyse durchgeführt werden soll, indem Sie festlegen, wie sichtbar jede Zelle für die Beobachter ist, oder indem Sie für jede Oberflächenposition ermitteln, welche Beobachter sichtbar sind.",
	"@@Viewshed_Analysis-Type_tag1@@": "Frequenz: Die Häufigkeit, mit der jede Pixelposition im Eingabe-Oberflächen-Raster für die Eingabe-Beobachterpositionen (z. B. Punkte oder Stützpunkte für Polylinien-Beobachter-Features) sichtbar ist. Dies ist die Standardeinstellung.",
	"@@Viewshed_Analysis-Type_tag2@@": "Beobachter: In der Ausgabe wird genau ermittelt, welche Beobachterpunkte von den einzelnen Positionen auf der Raster-Oberfläche sichtbar sind. Die für diesen Analysetyp maximal zulässige Anzahl der Eingabe-Beobachter beträgt 32.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Dieser Wert definiert den Endwinkel des horizontalen Abtastbereichs. Der Wert sollte in Grad von 0 bis 360.0 angegeben werden (0 = Norden). Der Standardwert ist 360.0.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Dabei kann es sich um ein Feld im Eingabe-Dataset für <strong>Beobachter-Features</strong> oder um einen numerischen Wert handeln. Ist dieser Parameter auf einen Wert festgelegt, wird dieser Wert auf alle Beobachter angewendet. Um für jeden Beobachter unterschiedliche Werte anzugeben, legen Sie diesen Parameter auf ein Feld im Dataset für <strong>Beobachter-Features</strong> fest.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Dieser Wert definiert den Anfangswinkel des horizontalen Abtastbereichs. Der Wert sollte in Grad von 0 bis 360.0 angegeben werden (0 = Norden). Der Standardwert ist 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Dabei kann es sich um ein Feld im Eingabe-Dataset für <strong>Beobachter-Features</strong> oder um einen numerischen Wert handeln. Ist dieser Parameter auf einen Wert festgelegt, wird dieser Wert auf alle Beobachter angewendet. Um für jeden Beobachter unterschiedliche Werte anzugeben, legen Sie diesen Parameter auf ein Feld im Dataset für <strong>Beobachter-Features</strong> fest.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "Entfernungstyp für den Parameter \"Innerer Radius\"",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Deaktiviert: <strong>Innerer Radius</strong> ist als 2D-Entfernung zu interpretieren. Dies ist die Standardeinstellung.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Aktiviert: <strong>Innerer Radius</strong> ist als 3D-Entfernung zu interpretieren.",
	"@@Viewshed_Inner-Radius_tag0@@": "Dieser Wert definiert die Anfangsentfernung (minimal), von der aus die Sichtbarkeit bestimmt wird. Pixel mit einem Wert unter dieser Entfernung werden in der Ausgabe als nicht sichtbar betrachtet, können aber dennoch die Sichtbarkeit der Pixel zwischen dem <strong>inneren Radius</strong> und dem <strong>äußeren Radius</strong> behindern. Der Standardwert ist 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "Dabei kann es sich um ein Feld im Eingabe-Dataset für <strong>Beobachter-Features</strong> oder um einen numerischen Wert handeln. Ist dieser Parameter auf einen Wert festgelegt, wird dieser Wert auf alle Beobachter angewendet. Um für jeden Beobachter unterschiedliche Werte anzugeben, legen Sie diesen Parameter auf ein Feld im Dataset für <strong>Beobachter-Features</strong> fest.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Dieser Wert wird herangezogen, um die Oberflächenhöhen der Beobachterpunkte oder Stützpunkte zu definieren.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Dabei kann es sich um ein Feld im Eingabe-Dataset für <strong>Beobachter-Features</strong> oder um einen numerischen Wert handeln. Wird für den Parameter kein Wert angegeben, wird die Beobachterhöhe mittels bilinearer Interpolation dem Oberflächen-Raster entnommen. Ist dieser Parameter auf einen Wert festgelegt, wird dieser Wert auf alle Beobachter angewendet. Um für jeden Beobachter unterschiedliche Werte anzugeben, legen Sie diesen Parameter auf ein Feld im Dataset für <strong>Beobachter-Features</strong> fest.",
	"@@Viewshed_Observer-Features_tag0@@": "Die erforderliche Eingabe-Feature-Class, die die Beobachterpositionen bestimmt. Dabei kann es sich um Punkt-, Multipoint- oder Polylinien-Features handeln.",
	"@@Viewshed_Observer-Features_tag1@@": "Im Zuge der Sichtbarkeitsberechnung wird die Eingabe-Feature-Class in ein geozentrisches 3D-Koordinatensystem umgewandelt. Beobachter, die sich außerhalb der Ausdehnung des Oberflächen-Rasters oder auf NoData-Zellen befinden, werden bei der Berechnung ignoriert.",
	"@@Viewshed_Observer-Offset_tag0@@": "Dieser Wert gibt eine vertikale Entfernung (in Oberflächeneinheiten) an, die der Beobachterhöhe hinzugefügt werden soll. Er sollte als positive Ganzzahl oder als Gleitkommawert vorliegen.",
	"@@Viewshed_Observer-Offset_tag1@@": "Dabei kann es sich um ein Feld im Eingabe-Dataset für <strong>Beobachter-Features</strong> oder um einen numerischen Wert handeln. Ist dieser Parameter auf einen Wert festgelegt, wird dieser Wert auf alle Beobachter angewendet. Um für jeden Beobachter unterschiedliche Werte anzugeben, legen Sie diesen Parameter auf ein Feld im Dataset für <strong>Beobachter-Features</strong> fest.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Entfernungstyp für den Parameter \"Äußerer Radius\"",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Deaktiviert: <strong>Äußerer Radius</strong> ist als 2D-Entfernung zu interpretieren. Dies ist die Standardeinstellung.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Aktiviert: <strong>Äußerer Radius</strong> ist als 3D-Entfernung zu interpretieren.",
	"@@Viewshed_Outer-Radius_tag0@@": "Dieser Wert definiert die maximale Entfernung, von der aus die Sichtbarkeit bestimmt wird. Pixel außerhalb dieser Entfernung werden von der Analyse ausgeschlossen.",
	"@@Viewshed_Outer-Radius_tag1@@": "Dabei kann es sich um ein Feld im Eingabe-Dataset für <strong>Beobachter-Features</strong> oder um einen numerischen Wert handeln. Ist dieser Parameter auf einen Wert festgelegt, wird dieser Wert auf alle Beobachter angewendet. Um für jeden Beobachter unterschiedliche Werte anzugeben, legen Sie diesen Parameter auf ein Feld im Dataset für <strong>Beobachter-Features</strong> fest.",
	"@@Viewshed_Raster_tag0@@": "Das erforderliche Eingabe-Oberflächen-Raster. Das Raster kann ein ganzzahliges oder ein Gleitkomma-Raster sein.",
	"@@Viewshed_Raster_tag1@@": "Die Eingabe wird im Zuge der Sichtbarkeitsberechnung in ein geozentrisches 3D-Koordinatensystem umgewandelt. Die Bestimmung der Sichtbarkeit wird durch NoData-Zellen im Eingabe-Raster nicht versperrt.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Koeffizient der Brechung sichtbaren Lichts in der Atmosphäre.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "Der Standardwert ist 0,13.",
	"@@Viewshed_Surface-Offset_tag0@@": "Dieser Wert gibt eine vertikale Entfernung (in Oberflächeneinheiten) an, die dem Z-Wert jedes Zielpixels hinzugefügt wird, wenn dieser für die Sichtbarkeit berücksichtigt wird. Er sollte als positive Ganzzahl oder als Gleitkommawert vorliegen.",
	"@@Viewshed_Surface-Offset_tag1@@": "Dabei kann es sich um ein Feld im Eingabe-Dataset für <strong>Beobachter-Features</strong> oder um einen numerischen Wert handeln. Ist dieser Parameter auf einen Wert festgelegt, wird dieser Wert auf alle Beobachter angewendet. Um für jeden Beobachter unterschiedliche Werte anzugeben, legen Sie diesen Parameter auf ein Feld im Dataset für <strong>Beobachter-Features</strong> fest.",
	"@@Viewshed_Vertical-Error_tag0@@": "Der Unsicherheitsfaktor, gemessen als Root-Mean-Square Error (RMSE), in den Oberflächenhöhenwerten. Der erwartete Fehler der Eingabe-Höhenwerte wird durch einen Gleitkommawert dargestellt. Wird diesem Parameter ein Wert größer 0 zugewiesen, ist das Ausgabe-Sichtbarkeitsraster ein Gleitkommawert. In diesem Fall stellt jeder Pixelwert des Ausgabe-Sichtbarkeitsrasters die Summe der Wahrscheinlichkeiten dar, mit der die Zelle für einen der Beobachter sichtbar ist.",
	"@@Viewshed_Vertical-Error_tag1@@": "Lautet der <strong>Analysetyp</strong> <strong>Beobachter</strong> oder die <strong>Analysemethode</strong> <strong>Sichtlinien aus Umfang</strong>, wird dieser Parameter deaktiviert.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Dieser Wert definiert die untere vertikale Winkelgrenze des Scanbereichs unter einer horizontalen Ebene. Der Wert sollte in Grad von -90.0 bis 0, als Ganzzahl- oder Gleitkommawert, angegeben werden. Der Standardwert ist -90,0.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Dabei kann es sich um ein Feld im Eingabe-Dataset für <strong>Beobachter-Features</strong> oder um einen numerischen Wert handeln. Ist dieser Parameter auf einen Wert festgelegt, wird dieser Wert auf alle Beobachter angewendet. Um für jeden Beobachter unterschiedliche Werte anzugeben, legen Sie diesen Parameter auf ein Feld im Dataset für <strong>Beobachter-Features</strong> fest.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Dieser Wert definiert die obere vertikale Winkelgrenze des Scanbereichs über einer horizontalen Ebene. Der Wert sollte in Grad von 0 bis 90.0, als Ganzzahl- oder Gleitkommawert, angegeben werden. Der Standardwert ist 90.0.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Dabei kann es sich um ein Feld im Eingabe-Dataset für <strong>Beobachter-Features</strong> oder um einen numerischen Wert handeln. Ist dieser Parameter auf einen Wert festgelegt, wird dieser Wert auf alle Beobachter angewendet. Um für jeden Beobachter unterschiedliche Werte anzugeben, legen Sie diesen Parameter auf ein Feld im Dataset für <strong>Beobachter-Features</strong> fest.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "Das Eingabe-Raster, das die Fließrichtung aus jeder Zelle anzeigt.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "Das Fließrichtungs-Raster kann mit der Funktion <strong>Fließrichtung</strong> erstellt werden.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "Die Abflusspunktpositionen der Eingabe.",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Dieses Raster stellt Zellen dar, über denen die beteiligte Fläche bzw. das Reservoir ermittelt wird. Alle Zellen, die keine NoData-Zellen sind, werden als Quellenzellen verwendet.",
	"@@Watershed_Pour-Point-Field_tag0@@": "Feld für die Zuweisung von Werten zu den Abflusspunktpositionen.",
	"@@Watershed_Pour-Point-Field_tag1@@": "Für ein Raster-Abflusspunkt-Dataset wird standardmäßig ${Value} verwendet.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Weighted-Overlay_Scales_tag0@@": "Der Bereich für die neuen Werte, anhand derer die alten Werte neu zugeordnet werden sollen.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "Die Gewichtungsüberlagerungstabelle besteht aus vier Teilen:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Layer: Alle Eingabe-Raster müssen ganzzahlig sein.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Einfluss: Jedes Eingabe-Raster wird nach seiner Wichtigkeit bzw. seinem Einfluss als relativer Prozentsatz gewichtet. Die Summe der prozentualen Einflussgewichtungen muss 100 ergeben und jede Gewichtung muss durch ganzzahlige Werte angegeben werden.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Feld: Ein ganzzahliges oder Zeichenfolgenfeld im Eingabe-Raster, das für die Gewichtung verwendet wird.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Remap-Tabelle: Jedem Wert in einem Eingabe-Raster wird basierend auf der Remap-Tabelle ein neuer Maßstabswert zugewiesen. Der Maßstabswert kann ein gültiger Wert oder ein NoData-Wert sein.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "Die Tabelle der gewichteten Summe wird durch drei Eigenschaften definiert:",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Layer: Das zu gewichtende Raster.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Feld: Das Raster-Feld, das für die Gewichtung verwendet wird.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Gewichtung: Der Gewichtungswert, mit dem das Raster multipliziert werden soll. Alle positiven oder negativen Dezimalwerte kommen in Frage.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "Ein Einzelband-Raster, in dem Pixelwerte die Umgebungslufttemperatur darstellen.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "Die mit dem Eingabe-Temperatur-Raster verknüpfte Maßeinheit. Die verfügbaren Eingabeeinheiten lauten Celsius, Fahrenheit und Kelvin.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "Die mit dem Ausgabe-Raster verknüpfte Maßeinheit. Die verfügbaren Ausgabeeinheiten lauten Celsius, Fahrenheit und Kelvin.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "Ein Einzelband-Raster, in dem Pixelwerte die Windgeschwindigkeit darstellen.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Legt die Maßeinheit für das Windgeschwindigkeits-Raster fest:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Meilen pro Stunde (mph)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Kilometer pro Stunde (km/h)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Meter pro Sekunde (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Fuß pro Sekunde (ft/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Knoten (kn)",
	"@@Zonal-Remap_Background-Value_tag0@@": "Der ursprüngliche Pixelwert des Ausgabe-Rasters, bevor Eingabe-Raster neu zugeordnet werden.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "Der Wert, der einem Pixel zugewiesen wird, das keine der in der <strong>Tabelle mit zonalen Attributen</strong> festgelegten Bedingungen erfüllt.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "Dies ist auch der Wert des Ausgabe-Pixels, wenn entweder der Parameter <strong>Ausgabewert-Feldname</strong> oder der Ausgabewert des entsprechenden zonalen Schwellenwertes in der <strong>Tabelle mit zonalen Attributen</strong> nicht angegeben wird.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "Der Feldname, der den Maximalwert enthält, unterhalb dessen ein Eingabepixel neu zugeordnet wird.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Wenn hierbei keine Angabe erfolgt oder der Feldwert null ist, werden Pixelwerte nicht auf das Maximum getestet.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "Der Feldname, der den Minimalwert enthält, oberhalb dessen ein Eingabepixel neu zugeordnet wird.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Wird er nicht angegeben oder ist der Feldwert null, werden Pixelwerte nicht auf das Minimum getestet.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "Der Feldname, der den Zielwert enthält, auf den ein Eingabepixel neu zugeordnet wird.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Wenn hier keine Angabe gemacht wird oder der Feldwert NULL ist, werden neu zugeordnete Pixelwerte auf den <strong>Standard-Ausgabewert</strong> festgelegt.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "Eine erforderliche Einzelband-Raster-Eingabe, die Pixelwerte für die Neuzuordnung enthält.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "Eine optionale Abfrage, die auf die <strong>Tabelle mit zonalen Attributen</strong> angewendet wird.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "Wenn Sie die Tabelle oben als Beispiel heranziehen, lautet die Abfrage ${Variable1 = 'bare earth' AND Variable2 = 'California'}.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "Eine erforderliche Eingabetabelle, die mindestens drei Felder enthält. Sie muss einen Minimal-Schwellenwert, einen Maximal-Schwellenwert und einen Zielwert enthalten. Der Zielwert ist das Feld mit dem neu zugeordneten Wert.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "Das Format der Datei kann eine Feature-Class, ein Feature-Service und ein beliebiger, von ArcGIS unterstützter Tabellentyp sein.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "Der Feldname in der <strong>Tabelle mit zonalen Attributen</strong>, die die Zonen-ID-Werte enthält.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "Die Zonen-ID-Werte sind direkt mit den Zonen-IDs in Ihrem zonalen Raster verbunden. Sie bieten beim Neuzuordnen eine andere Ebene des Filterns. Wenn keine Zonen-ID einem bestimmten Datensatz in der Tabelle zugeordnet ist, ist sie nicht an der Neuzuordnung beteiligt.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "Ein Einzelband-Raster, in dem jedes Pixel Zonen definiert, die einer bestimmten Position zugeordnet sind. Eine Zone wird durch alle Flächen in der Eingabe definiert, die den gleichen Wert aufweisen. Die Flächen müssen nicht zusammenhängend sein.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Gibt die Methode an, die zum Bereitstellen von Vorhersagedimensionswerten verwendet wird.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>Nach Wert</strong>: Die Vorhersage wird für einen einzelnen Dimensionswert berechnet. Dies ist der Fall, wenn Sie beispielsweise die jährlichen Niederschläge für die Jahre 2050, 2100 und 2150 vorhersagen möchten. Dies ist die Standardeinstellung.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>Nach Intervall</strong>: Die Vorhersage wird für ein Intervall der Dimension berechnet, die durch einen Anfangs- und einen Endwert definiert ist. Dies ist der Fall, wenn Sie beispielsweise die jährlichen Niederschläge für alle Jahre zwischen 2050 und 2150 vorhersagen möchten.",
	"@@Predict-Using-Trend_end_tag0@@": "Die Werte für Enddatum, Höhe oder Tiefe des Dimensionsintervalls, die in der Vorhersage verwendet werden sollen.",
	"@@Predict-Using-Trend_end_tag1@@": "Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Intervall</strong> festgelegt wurde.",
	"@@Predict-Using-Trend_raster_tag0@@": "Das multidimensionale Eingabe-Trend-Raster aus der Funktion <strong>Trend generieren</strong>.",
	"@@Predict-Using-Trend_start_tag0@@": "Die Werte für Startdatum, Höhe oder Tiefe des Dimensionsintervalls, die in der Vorhersage verwendet werden sollen.",
	"@@Predict-Using-Trend_start_tag1@@": "Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Intervall</strong> festgelegt wurde.",
	"@@Predict-Using-Trend_unit_tag0@@": "Die für das Wertintervall verwendete Einheit. Dieser Parameter wird nur angewendet, wenn es sich bei der Analysedimension um eine Zeitdimension handelt.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Stunden</strong>: Die Vorhersage wird für jede Stunde im dem durch die Parameter <strong>Start</strong>, <strong>Ende</strong> und <strong>Wertintervall</strong> definierten Zeitraum berechnet.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Tage</strong>: Die Vorhersage wird für jeden Tag im dem durch die Parameter <strong>Start</strong>, <strong>Ende</strong> und <strong>Wertintervall</strong> definierten Zeitraum berechnet.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Wochen</strong>: Die Vorhersage wird für jede Woche im dem durch die die Parameter <strong>Start</strong>, <strong>Ende</strong> und <strong>Wertintervall</strong> definierten Zeitraum berechnet.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Monate</strong>: Die Vorhersage wird für jeden Monat im dem durch die Parameter <strong>Start</strong>, <strong>Ende</strong> und <strong>Wertintervall</strong> definierten Zeitraum berechnet.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Jahre</strong>: Die Vorhersage wird für jedes Jahr im dem durch die Parameter <strong>Start</strong>, <strong>Ende</strong> und <strong>Wertintervall</strong> definierten Zeitraum berechnet.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "Die Anzahl der Schritte zwischen zwei Dimensionswerten, die in die Vorhersage einbezogen werden sollen. Der Standardwert ist 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Intervall</strong> festgelegt wurde.",
	"@@Predict-Using-Trend_values_tag0@@": "Der Dimensionswert, der in der Vorhersage verwendet werden soll.",
	"@@Predict-Using-Trend_values_tag1@@": "Das Format der Werte für Uhrzeit, Tiefe und Höhe muss mit dem Format der Dimensionswerte übereinstimmen, die zum Generieren des Trend-Rasters verwendet wurden. Wenn das Trend-Raster für die Dimension \"StdTime\" generiert wurde, muss das Format JJJJ-MM-TTThh:mm:ss, also z. B. 2050-01-01T00:00:00, verwendet werden. Mehrere Werte werden durch Semikolons getrennt angegeben.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Geben Sie die Raster-Funktionsvorlage an, die zur Aggregation mehrerer Ausschnitte in wenige oder einen einzelnen Ausschnitt verwendet wird.",
	"@@Process-Raster-Collection_dimension_tag0@@": "Die Aggregationsdimension. Dies ist die Dimension, an der entlang die Variablen aggregiert werden.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Geben Sie die Raster-Funktionsvorlage an, die zur Verarbeitung der Ausschnitte oder Elemente der Eingabe-Raster-Sammlung verwendet wird.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Gibt das Schlüsselwortintervall für die Aggregation entlang einer Dimension an. Dieser Parameter ist erforderlich, wenn für den <strong>Typ</strong> die Option <strong>Intervallschlüsselwort</strong> festgelegt wurde und die Aggregation über eine bestimmte Zeit erfolgen muss.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>Stündlich</strong>: Die Datenwerte werden in stündliche Zeitintervalle aggregiert, und das Ergebnis enthält jede Stunde der Zeitserie.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Täglich</strong>: Die Datenwerte werden in tägliche Zeitintervalle aggregiert, und das Ergebnis enthält jeden Tag der Zeitserie.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Wöchentlich</strong>: Die Datenwerte werden in wöchentliche Zeitintervalle aggregiert, und das Ergebnis enthält jede Woche der Zeitserie.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>Zehntägig</strong>: Die Datenwerte werden in 3 Zeiträume von je 10 Tagen aggregiert. Der letzte Zeitraum kann mehr oder weniger als 10 Tage umfassen. Es werden 3 Zeitintervalle für jeden Monat ausgegeben.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>Fünftägig</strong>: Die Datenwerte werden in 6 Zeiträume von je 5 Tagen aggregiert. Der letzte Zeitraum kann mehr oder weniger als 5 Tage umfassen. Es werden 6 Zeitintervalle für jeden Monat ausgegeben.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Monatlich</strong>: Die Datenwerte werden in monatliche Zeitintervalle aggregiert, und das Ergebnis enthält jeden Monat der Zeitserie.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Vierteljährlich</strong>: Die Datenwerte werden in vierteljährliche Zeitintervalle aggregiert, und das Ergebnis enthält jedes Quartal der Zeitserie.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Jährlich</strong>: Die Datenwerte werden in jährliche Zeitintervalle aggregiert, und das Ergebnis enthält jedes Jahr der Zeitserie.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Täglich wiederkehrend</strong>: Die Datenwerte werden in tägliche Zeitintervalle aggregiert, und das Ergebnis enthält einen aggregierten Wert pro julianischem Tag. Es werden maximal 366 Tages-Zeitintervalle ausgegeben.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Wöchentlich wiederkehrend</strong>: Die Datenwerte werden in wöchentliche Zeitintervalle aggregiert, und das Ergebnis enthält einen aggregierten Wert pro Woche. Es werden maximal 53 Wochen-Zeitintervalle ausgegeben.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Monatlich wiederkehrend</strong>: Die Datenwerte werden in monatliche Zeitintervalle aggregiert, und das Ergebnis enthält einen aggregierten Wert pro Monat. Es werden maximal 12 Monats-Zeitintervalle ausgegeben.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Quartalsweise wiederkehrend</strong>: Die Datenwerte werden in vierteljährliche Zeitintervalle aggregiert, und das Ergebnis enthält einen aggregierten Wert pro Quartal. Es werden maximal 4 Quartals-Zeitintervalle ausgegeben.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "Der Maximalwert eines Bereichs.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Typ</strong> die Option <strong>Intervallbereiche</strong> festgelegt wurde.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "Der Minimalwert eines Bereichs.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Typ</strong> die Option <strong>Intervallbereiche</strong> festgelegt wurde.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Geben Sie die Raster-Funktionsvorlage an, die zur Anzeige des verarbeiteten Raster-Layers verwendet wird.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "Das multidimensionale Eingabe-Raster, der Mosaik-Layer oder das Mosaik-Dataset.",
	"@@Process-Raster-Collection_type_tag0@@": "Gibt das Dimensionsintervall an, für das die Daten aggregiert werden.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>Alle</strong>: Die Datenwerte aller Abschnitte werden aggregiert. Dies ist die Standardeinstellung.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Intervallschlüsselwort</strong>: Die Variablendaten werden in einem allgemein bekannten Intervall aggregiert.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Intervallbereiche</strong>: Die Variablendaten werden zwischen bestimmten Wert- oder Datumspaaren aggregiert.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Intervallwerte</strong>: Die Variablendaten werden in einem benutzerdefinierten Intervall und in einer benutzerdefinierten Einheit aggregiert.",
	"@@Process-Raster-Collection_unit_tag0@@": "Die für den Intervallwert verwendete Einheit. Dieser Parameter ist erforderlich, wenn es sich bei der <strong>Dimension</strong> um ein Zeitfeld handelt und für den Parameter <strong>Typ</strong> die Option <strong>Intervallwert</strong> festgelegt wurde.",
	"@@Process-Raster-Collection_unit_tag1@@": "Wenn die Aggregation über eine andere Dimension als die Zeit erfolgt, ist diese Option nicht verfügbar, und die Einheit des Intervallwertes entspricht der Variableneinheit der multidimensionalen Eingabe-Raster-Daten.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Stunden</strong>: Die Datenwerte werden in stündliche Zeitabschnitte im angegebenen Intervall aggregiert.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Tage</strong>: Die Datenwerte werden in tägliche Zeitabschnitte im angegebenen Intervall aggregiert.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Wochen</strong>: Die Datenwerte werden in wöchentliche Zeitabschnitte im angegebenen Intervall aggregiert.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Monate</strong>: Die Datenwerte werden in monatliche Zeitabschnitte im angegebenen Intervall aggregiert.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Jahre</strong>: Die Datenwerte werden in jährliche Zeitabschnitte im angegebenen Intervall aggregiert.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "Die Größe des Intervalls, in dem aggregiert wird. Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Typ</strong> die Option <strong>Intervallwert</strong> festgelegt wurde.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "Wenn beispielsweise die monatlichen Temperaturdaten von 30 Jahren in 5-Jahres-Abschnitte aggregiert werden sollen, geben Sie für <strong>Wertintervall</strong> die Zahl 5 und für <strong>Einheit</strong> die Option <strong>Jahre</strong> ein.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Gibt die Optionen zur Definition der Ausgabepixelwerte an.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Aktiviert: Es gibt keine negativen Ausgabewerte.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Deaktiviert: Der Anteil der Landbedeckung kann negative Werte annehmen.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "Das Eingabe-Raster.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "Eingabe-Spektralprofil-Datei",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "Spektralinformationen der verschiedenen Landbedeckungsklassen.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Spektralprofil</strong>: Eine Klassifikatordefinitionsdatei (${.ecd}), die mit dem Werkzeug <strong><strong>Maximum-Likelihood-Klassifikator trainieren</strong></strong> generiert wurde oder als JavaScript Object Notation-Datei (${.json}), die die Spektralprofile der Klasse enthält, bereitgestellt wird.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Trainings-Feature</strong>: Polygon-Features oder Trainingsgebiet-Feature-Class, die mit dem <strong>Trainingsgebiet-Manager</strong> erstellt werden.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Gibt die Optionen zur Definition der Ausgabepixelwerte an.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Aktiviert: Die Klassenwerte für die einzelnen Pixel werden im Dezimalformat ausgegeben, wobei die Summe aller Klassen 1 ergibt. Beispiel: Klasse 1 = 0,16; Klasse 2 = 0,24; Klasse 3 = 0,60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Deaktiviert: Die Summe aller Klassen in einem Pixel darf größer sein als 1.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "Eingabe-Trainings-Feature-Datei",
	"@@Aggregate_aggregationtechnique_tag0@@": "Die für die Aggregation verwendete Methode. Die Werte der Eingabezellen, die von den gröberen Ausgabezellen umfasst werden, werden mit einer der folgenden Statistiken aggregiert:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Summe</strong>: Die Summe der Eingabezellen. Dies ist die Standardeinstellung.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Maximum</strong>: Der größte Wert der Eingabezellen.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Durchschnitt</strong>: Der Durchschnittswert der Eingabezellen.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Medianwert</strong>: Der Medianwert der Eingabezellen.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Minimum</strong>: Der kleinste Wert der Eingabezellen.",
	"@@Aggregate_cellfactor_tag0@@": "Der Faktor für die Multiplikation der Zellengröße des Eingabe-Rasters.",
	"@@Aggregate_cellfactor_tag1@@": "Der Zellenfaktorwert 3 würde z. B. zu einer Ausgabe-Zellengröße führen, die dreimal so groß ist wie die des Eingabe-Rasters.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Definiert, wie die Grenzen zum Eingabe-Raster behandelt werden, wenn seine Zeilen oder Spalten kein Vielfaches des Zellenfaktors sind.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Aktiviert: Erweitert die obere oder rechte Begrenzung des Eingabe-Rasters so, dass die Gesamtzahl der Zellen in einer Zeile oder Spalte ein Vielfaches des Zellenfaktors ist. Mit dieser Option ist es möglich, dass das Ausgabe-Raster eine größere räumliche Ausdehnung abdeckt als das Eingabe-Raster. Dies ist die Standardeinstellung.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Deaktiviert: Reduziert die Anzahl der Zeilen oder Spalten im Ausgabe-Raster. Dadurch werden die verbleibenden Zellen an der oberen oder rechten Begrenzung des Eingabe-Rasters abgeschnitten, wodurch die Anzahl der Zeilen oder Spalten im Eingabe-Raster zu einem Vielfachen des Zellenfaktors wird. Mit dieser Option ist es möglich, dass das Ausgabe-Raster eine kleinere räumliche Ausdehnung abdeckt als das Eingabe-Raster.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Gibt an, ob ${NoData}-Werte bei der Aggregationsberechnung ignoriert werden.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Aktiviert: Gibt an, dass die ${NoData}-Werte beim Bestimmen des Wertes der Ausgabezellenpositionen ignoriert werden, wenn ${NoData}-Werte für irgendeine der Zellen vorhanden sind, die in die räumliche Ausdehnung einer größeren Zelle im Ausgabe-Raster fallen. Nur Eingabezellen innerhalb der Ausdehnung der Ausgabezelle, die auch Datenwerte aufweisen, werden beim Bestimmen des Wertes der Ausgabezelle verwendet. Dies ist die Standardeinstellung.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Deaktiviert: Gibt an, dass der Wert für die Position der Ausgabezelle \"${NoData}\" ist, wenn eine Zelle, die in die räumliche Ausdehnung einer größeren Zelle im Ausgabe-Raster fällt, den Wert \"${NoData}\" aufweist. Bei Verwendung dieser Option gilt: Wenn Zellen in einer Aggregation den Wert \"${NoData}\" enthalten, liegen nicht genügend Informationen vor, um die angegebenen Berechnungen durchzuführen, die zur Bestimmung eines Ausgabewertes erforderlich sind.",
	"@@Aggregate_raster_tag0@@": "Das zu aggregierende Eingabe-Raster.",
	"@@Expand_numberofcells_tag0@@": "Die Anzahl der Zellen, um die erweitert werden soll.",
	"@@Expand_numberofcells_tag1@@": "Der Wert muss eine ganze Zahl sein und kann mindestens 1 sein.",
	"@@Expand_raster_tag0@@": "Das Eingabe-Raster, für das die identifizierten Zonen erweitert werden sollen.",
	"@@Expand_raster_tag1@@": "Die Eingabe muss den Typ \"Ganzzahl\" aufweisen.",
	"@@Expand_zonevalues_tag0@@": "Die Liste der zu erweiternden Zonen.",
	"@@Expand_zonevalues_tag1@@": "Die Zonenwerte müssen ganze Zahlen sein. Die Reihenfolge ist beliebig.",
	"@@Expand_zonevalues_tag2@@": "Um mehrere Zonen anzugeben, verwenden Sie ein Leerzeichen zum Trennen der Zonenwerte.",
	"@@Multidimensional-Filter_dimension_tag0@@": "Die Dimension, aus der Variablen extrahiert werden.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Gibt die Methode an, die zum Aufteilen der Dimension verwendet wird.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>Alle</strong>: Für jede Dimension wird der volle Bereich verwendet. Dies ist die Standardeinstellung.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>Nach Werten</strong>: Die Dimension wird anhand eines Dimensionswertes oder einer Werteliste aufgeteilt.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>Nach Bereichen</strong>: Die Dimension wird anhand eines Bereichs oder einer Liste von Bereichen aufgeteilt.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>Nach Iteration</strong>: Die Dimension wird über eine angegebene Intervallgröße aufgeteilt.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "Das Ende des ersten Intervalls. Die Iteration durch das Dataset erfolgt anhand dieses Intervalls. Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Iteration</strong> festgelegt wurde.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "Der Maximalwert des Bereichs. Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Bereichen</strong> festgelegt wurde.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "Der Minimalwert des Bereichs. Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Bereichen</strong> festgelegt wurde.",
	"@@Multidimensional-Filter_raster_tag0@@": "Das als Eingabe verwendete multidimensionale Raster.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>Wertegruppen werden anhand der in einer Tabelle angegebenen Intervallbereiche aggregiert. Mit den Minimal- und Maximalwerten geben Sie den einzubeziehenden Bereich an.</p><p>Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Typ</strong> die Option <strong>Intervallbereiche</strong> festgelegt wurde.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "Der Beginn des ersten Intervalls. Die Iteration durch das Dataset erfolgt anhand dieses Intervalls. Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Iteration</strong> festgelegt wurde.",
	"@@Multidimensional-Filter_step_tag0@@": "Die Häufigkeit, in der die Daten aufgeteilt werden. Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Iteration</strong> festgelegt wurde. Der Standardwert ist 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Gibt die Iterationseinheit an. Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Iteration</strong> und für den Parameter <strong>Dimension</strong> der Wert <strong>StdTime</strong> festgelegt wurde.",
	"@@Multidimensional-Filter_value_tag0@@": "Der Wert für die angegebene Dimension. Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Durch Werte</strong> festgelegt wurde.",
	"@@Multidimensional-Filter_variables_tag0@@": "Die Variablen, die in den multidimensionalen Ausgabe-Raster-Layer aufgenommen werden. Wenn keine Variable angegeben ist, wird die erste Variable verwendet.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Gibt an, ob der Layer Dimensionswerte enthalten soll. Diese Option ist nur verfügbar, wenn ein einzelner Ausschnitt zur Erstellung eines Layers gewählt wird.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Aktiviert: Der Layer enthält keine Dimensionswerte.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Deaktiviert: Der Layer enthält Dimensionswerte. Dies ist die Standardeinstellung.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "Die Zellengröße des interpolierten Rasters. Der Standardwert ist ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "Die Resampling-Methode für die Interpolation von unregelmäßigen Daten.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>Nächster Nachbar</strong>: Berechnet den Ausgabepixelwert mithilfe des nächstgelegenen Eingabepixels. Wenn kein Quellpixel vorhanden ist, kann in der Ausgabe kein neues Pixel erstellt werden. Dies ist die Standardeinstellung.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>Lineares TIN</strong>: Mithilfe eines unregelmäßigen Dreiecksnetzes, das aus den Mittelpunkten der einzelnen Pixel im unregelmäßigen Raster berechnet wurde, wird eine Fläche interpoliert und danach in ein regelmäßiges Raster umgewandelt.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Natürlicher Nachbar</strong>: Sucht nach der nächstgelegenen Teilmenge von Eingabemessungen zu einem Abfragepunkt und weist diesen Daten proportional zur Fläche eine Gewichtung zu, um einen Wert zu interpolieren.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Inverse Distance Weighting</strong>: Die Pixelwerte werden mit einer linear gewichteten Kombination verschiedener Referenzpunkte oder Pixel ermittelt. Diese Gewichtung ist eine Funktion des Kehrwertes der Entfernung von den bekannten Punkten oder Pixeln.",
	"@@Multidimensional-Raster_raster_tag0@@": "Das als Eingabe verwendete multidimensionale Raster.",
	"@@Multidimensional-Raster_variables_tag0@@": "Die Variablen, die in den multidimensionalen Raster-Layer aufgenommen werden.",
	"@@Random_distribution_tag0@@": "Legen Sie die Methode zur Verteilung von Zufallswerten fest.",
	"@@Random_distribution_tag1@@": "<strong>Uniform</strong> (Minimum, Maximum): Eine Gleichverteilung mit einem definierten Bereich. Die Standardwerte sind 0 für \"Minimum\" und 1 für \"Maximum\". Dies ist die Standardeinstellung.",
	"@@Random_distribution_tag2@@": "<strong>Integer</strong> (Minimum, Maximum): Eine Ganzzahlverteilung mit einem definierten Bereich. Die Standardwerte sind 1 für \"Minimum\" und 10 für \"Maximum\".",
	"@@Random_distribution_tag3@@": "<strong>Normal</strong> (Mittelwert, Standardabweichung): Eine Normalverteilung mit definiertem Mittelwert und definierter Standardabweichung. Die Standardwerte sind 0 für \"Mittelwert\" und 1 für \"Standardabweichung\".",
	"@@Random_distribution_tag4@@": "<strong>Exponential</strong> (Mittelwert): Eine Exponentialverteilung mit definiertem Mittelwert. Der Standardwert ist 1.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (Mittelwert): Eine Poisson-Verteilung mit definiertem Mittelwert. Der Standardwert ist 1.",
	"@@Random_distribution_tag6@@": "<strong>Gamma</strong> (Alpha, Beta): Eine Gamma-Verteilung mit definiertem \"Alpha\" und \"Beta\". Die Standardwerte sind 1 für \"Alpha\" und 1 für \"Beta\".",
	"@@Random_distribution_tag7@@": "<strong>Binomial</strong> (N, Wahrscheinlichkeit): Eine Binomialverteilung mit definiertem N und definierter Wahrscheinlichkeit. Die Standardwerte sind 10 für \"N\" und 0,5 für \"Wahrscheinlichkeit\".",
	"@@Random_distribution_tag8@@": "<strong>Geometrisch</strong> (Wahrscheinlichkeit): Eine geometrische Verteilung mit definierter Wahrscheinlichkeit. Der Standardwert ist 0,5.",
	"@@Random_distribution_tag9@@": "<strong>Negativ binomial</strong> (r, Wahrscheinlichkeit): Eine Pascal-Verteilung mit definiertem r und definierter Wahrscheinlichkeit. Die Standardwerte sind 10,0 für \"r\" und 0,5 für \"Wahrscheinlichkeit\".",
	"@@Random_randomnumbergenerator_tag0@@": "Geben Sie den Algorithmus für den Zufallsgenerator an, der anhand von Ursprung und Verteilung eine Reihe von Zufallszahlen erzeugt. Die folgenden Shape-Optionen sind verfügbar:",
	"@@Random_randomnumbergenerator_tag1@@": "Standard C Rand",
	"@@Random_randomnumbergenerator_tag2@@": "ACM599 – Sammelalgorithmus",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "Der Standardwert lautet Mersenne Twister.",
	"@@Random_rasterinfo_tag0@@": "Verwenden Sie die Schaltfläche <strong>Vorlagen-Raster laden</strong>, um eine Vorlage aus einem Verzeichnis oder Portal zu laden.",
	"@@Random_seed_tag0@@": "Der Startwert ist ein ganzzahliger Wert, mit dem der Zufallszahlengenerator gestartet wird. Der Standardwert ist 1.",
	"@@Shrink_numberofcells_tag0@@": "Die Anzahl der Zellen, um die jede angegebene Zone verkleinert werden soll.",
	"@@Shrink_numberofcells_tag1@@": "Der Wert muss eine ganze Zahl sein und kann mindestens 1 sein.",
	"@@Shrink_raster_tag0@@": "Das Eingabe-Raster, für das die identifizierten Zonen verkleinert werden sollen.",
	"@@Shrink_raster_tag1@@": "Die Eingabe muss den Typ \"Ganzzahl\" aufweisen.",
	"@@Shrink_zonevalues_tag0@@": "Die Liste der zu verkleinernden Zonen.",
	"@@Shrink_zonevalues_tag1@@": "Die Zonenwerte müssen ganze Zahlen sein. Die Reihenfolge ist beliebig.",
	"@@Shrink_zonevalues_tag2@@": "Um mehrere Zonen anzugeben, verwenden Sie ein Leerzeichen zum Trennen der Zonenwerte.",
	"@@Distance-Accumulation_costraster_tag0@@": "Ein Raster, das die Kosten oder Impedanz für eine planimetrische Bewegung durch jede Zelle definiert. Der Wert an jeder Zellenposition stellt die Kosten pro Einheitenentfernung für die Bewegung durch die Zelle dar. Jeder Zellenpositionswert wird mit der Zellenauflösung multipliziert. Gleichzeitig werden diagonale Bewegungen ausgeglichen, um die Gesamtkosten für die Bewegung durch die Zelle zu erhalten.",
	"@@Distance-Accumulation_costraster_tag1@@": "Die Werte im <strong>Kosten-Raster</strong> können ganzzahlige oder Gleitkommawerte sein, sie dürfen jedoch nicht negativ oder 0 sein (negative oder keine Kosten sind nicht zulässig).",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Gibt an, ob die Entfernung mithilfe einer planaren (flache Erde) oder geodätischen (Ellipsoid) Methode berechnet werden soll.",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Planar: Bei planaren Messungen werden Entfernungen und Flächen mithilfe der zweidimensionalen kartesischen Mathematik berechnet. Diese Option ist nur bei Messungen in einem projizierten Koordinatensystem verfügbar und die zweidimensionale Ebene dieses Koordinatensystems wird als Basis für die Messungen verwendet.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Geodätisch: Die kürzeste Linie zwischen zwei Punkten auf der Erdoberfläche auf einem Sphäroid (Ellipsoid). Deshalb ändern sich die Ergebnisse unabhängig von der Eingabe- oder Ausgabeprojektion nicht.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Hinweis:</strong>Eine Verwendung für eine geodätische Linie ist die Ermittlung der kürzesten Entfernung zwischen zwei Städten für eine Flugroute. Dies ist auch als Großkreislinie bekannt, wenn eine Kugel anstelle einer Ellipse als Basis dient.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Gibt an, ob nur das Entfernungsakkumulations-Raster oder ein Multiband-Raster, bestehend aus Entfernungsakkumulations- und Gegenrichtungs-Raster, erstellt wird.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Deaktiviert: Das Ergebnis ist das Entfernungsakkumulations-Raster. Es handelt sich um ein Einzelband. Dies ist die Standardeinstellung.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Aktiviert: Es wird ein Multiband erstellt. Das erste Band ist das Akkumulations-Raster, das zweite das Gegenrichtungs-Raster.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "Im Gegenrichtungs-Raster wird für jede Zelle die Richtung zur benachbarten Zelle entlang der kürzesten Route zurück zur nächstgelegenen Quelle in Grad berechnet, wobei Barrieren vermieden werden.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Definiert die Beziehung zwischen dem horizontalen Kostenfaktor und dem HRMA (Horizontal Relative Moving Angle).</p><p>Es stehen mehrere Faktoren mit Modifikatoren zur Auswahl, durch die ein definiertes Diagramm für den vertikalen Faktor festgelegt wird. Darüber hinaus kann mithilfe einer Tabelle ein benutzerdefiniertes Diagramm erstellt werden. Die Diagramme identifizieren den vertikalen Faktor, der zum Berechnen der Gesamtkosten für die Bewegung in eine benachbarte Zelle verwendet wird.</p><p>In den folgenden Erläuterungen werden die beiden Akronyme HF und HRMA verwendet. HF steht für horizontaler Faktor, d. h. für die horizontalen Hindernisse bei der Bewegung von einer Zelle zur nächsten. HRMA steht für horizontaler relativer Bewegungswinkel, d. h. für den Winkel zwischen der horizontalen Richtung von einer Zelle und der Bewegungsrichtung.</p><p><strong>Horizontaler Faktor</strong>umfasst die folgenden Typen:</p><ul><li><strong>Binär</strong> – Wenn der HRMA kleiner ist als der Schnittwinkel, wird für den HF der dem Null-Faktor zugewiesene Wert festgelegt. Andernfalls ist dieser unendlich.</li><li><strong>Vorwärts</strong> – Legt fest, dass nur Vorwärtsbewegungen zulässig sind. Der HRMA muss größer als oder gleich 0 Grad und kleiner als 90 Grad sein (0 &lt;= HRMA &lt; 90). Wenn der HRMA größer als 0 und kleiner als 45 Grad ist, wird als HF für die Zelle der dem Null-Faktor zugewiesene Wert festgelegt. Wenn der HRMA größer als oder gleich 45 Grad ist, wird der Wert des Seitenwert-Modifikators verwendet. Der HF für einen HRMA-Wert, der größer als oder gleich 90 Grad ist, wird auf unendlich festgelegt.</li><li><strong>Linear</strong> – Gibt an, dass der HF eine lineare Funktion des HRMA ist.</li><li><strong>Invers linear</strong> – Gibt an, dass der HF eine invers lineare Funktion des HRMA ist.</li><li><strong>Tabelle</strong> – Gibt an, dass zum Definieren des Diagramms für den horizontalen Faktor und damit zum Bestimmen der HF eine Tabellendatei verwendet wird.</li></ul><p>Die Modifikatoren für die Schlüsselwörter der horizontalen Faktoren lauten wie folgt:</p><ul><li><strong>Null-Faktor</strong> – Legt den horizontalen Faktor fest, der verwendet wird, wenn der HRMA 0 ist. Dieser Faktor positioniert den Y-Schnittpunkt für alle Funktionen für den horizontalen Faktor.</li><li><strong>Schnittwinkel</strong> – Definiert den HRMA, ab dem der HF auf unendlich festgelegt wird.</li><li><strong>Neigung</strong> – Legt die Neigung der Geraden fest, die mit den Schlüsselwörtern <strong>Linear</strong>und <strong>Invers linear</strong> für den horizontalen Faktor verwendet wird. Die Neigung wird als Verhältnis von Höhendifferenz zu horizontaler Distanz angegeben (z. B. ist eine 45-Grad-Neigung 1/45 und wird als 0,02222 eingegeben).</li><li><strong>Seitenfaktor</strong> – Legt den HF fest, wenn der HRMA größer als oder gleich 45 Grad und kleiner als 90 Grad ist und wenn das Schlüsselwort <strong>Vorwärts</strong> für den horizontalen Faktor angegeben wird.</li><li><strong>Tabellenname</strong> – Gibt den Namen der Tabelle an, die den HF definiert.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "Ein Raster, das die horizontale Richtung an jeder Zelle definiert.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "Die Werte in dem Raster müssen ganzzahlige Werte zwischen 0 und 360 Grad sein. Dabei steht 0 Grad für Norden (am Bildschirm oben), und der Winkel nimmt im Uhrzeigersinn zu. Ebenen Flächen sollte der Wert -1 zugewiesen werden. Beim Übergang von einer Zelle zu einer benachbarten Zelle werden die Werte an jeder Position zusammen mit dem <strong>horizontalen Faktor</strong> verwendet, um die anfallenden horizontalen Kosten zu bestimmen.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "Die anfänglichen akkumulativen Kosten zum Beginn der Kostenberechnung. Dieser Parameter ermöglicht die Festlegung der Fixkosten, die mit einer Quelle verknüpft sind. Der Kostenalgorithmus beginnt mit dem hier angegebenen Wert statt mit dem Kostenwert 0.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "Der Wert muss größer gleich 0 sein. Die Standardeinstellung ist 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Definiert die maximalen akkumulativen Kosten für den Reisenden für eine Quelle. Die Kostenberechnungen werden für jede Quelle fortgesetzt, bis die angegebene Kapazität erreicht ist.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "Ein Multiplikator zum Anwenden der Kostenwerte.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Dieser Parameter ermöglicht die Steuerung des Reisemodus oder der Magnitude an einer Quelle. Je größer der Multiplikator, desto höher sind die Kosten, um sich von einer Zelle zur anderen zu bewegen.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "Die Werte müssen größer als Null sein. Die Standardeinstellung ist 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "Das Raster, das die Barrieren definiert.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "Das Dataset muss \"NoData\" enthalten, wo keine Barrieren vorhanden sind. Barrieren werden von gültigen Werten dargestellt, einschließlich Null.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "Die Barrieren können durch ein Ganzzahl- oder Gleitkomma-Raster definiert sein.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "Die Eingabequellenpositionen.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Dies ist ein Raster-Dataset zum Ermitteln der Zellen oder Positionen, von denen die Entfernung mit den geringsten akkumulativen Kosten jeder Ausgabezellenposition berechnet wird.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Dies kann ein ganzzahliges oder ein Gleitkomma-Raster sein.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "Ein Raster, das die Höhenwerte an jeder Zellenposition definiert.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "Beim Übergang zwischen Zellen werden die Werte verwendet, um die tatsächliche Oberflächenentfernung zu berechnen.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Definiert die Richtung des Reisenden bei Anwendung von vertikalen und horizontalen Faktoren und der Quellresistenzrate an.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>Aus Quelle</strong>: Vertikaler Faktor, horizontaler Faktor und Quellresistenzrate werden an der Eingabequelle beginnend und in Richtung Nicht-Quellenzellen angewendet. Dies ist die Standardeinstellung.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>Zur Quelle</strong>: Vertikaler Faktor, horizontaler Faktor und Quellresistenzrate werden an jeder Nicht-Quellenzelle beginnend und zurück zur Eingabequelle angewendet.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Geben Sie das Schlüsselwort <strong>Aus Quelle</strong> bzw. <strong>Zur Quelle</strong> ein, das auf alle Quellen angewendet wird, oder legen Sie ein Feld im <strong>Quell-Raster</strong> fest, das die Schlüsselwörter enthält, um die Reiserichtung für jede Quelle zu identifizieren. Dieses Feld muss die Zeichenfolgen ${FROM_SOURCE} oder ${TO_SOURCE} enthalten.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Definiert die Beziehung zwischen dem vertikalen Kostenfaktor und dem HVMA (Vertical Relative Moving Angle).</p><p>Es stehen mehrere Faktoren mit Modifikatoren zur Auswahl, durch die ein definiertes Diagramm für den vertikalen Faktor festgelegt wird. Darüber hinaus kann mithilfe einer Tabelle ein benutzerdefiniertes Diagramm erstellt werden. Die Diagramme identifizieren den vertikalen Faktor, der zum Berechnen der Gesamtkosten für die Bewegung in eine benachbarte Zelle verwendet wird.</p><p>In den folgenden Erläuterungen werden die beiden Akronyme VF und VRMA verwendet. VF steht für vertikaler Faktor, d. h. für die vertikalen Hindernisse bei der Bewegung von einer Zelle zur nächsten. VRMA steht für vertikaler relativer Bewegungswinkel, d. h. für den Neigungswinkel zwischen der Ausgangs- oder Verarbeitungszelle (FROM) und der Zielzelle (TO).</p><p><strong>Vertikaler Faktor umfasst </strong>die folgenden Typen:</p><ul><li><strong>Binär</strong> – Wenn der VRMA größer als der untere Schnittwinkel und kleiner als der obere Schnittwinkel ist, wird für den VF der dem Null-Faktor zugewiesene Wert festgelegt. Andernfalls ist dieser unendlich.</li><li><strong>Linear</strong> – Gibt an, dass der VF eine lineare Funktion des VRMA ist.</li><li><strong>Symmetrisch linear</strong> – Gibt an, dass der VF eine lineare Funktion des VRMA auf der negativen oder positiven Seite des VRMA ist und dass die beiden linearen Funktionen hinsichtlich der VF-Achse bzw. Y-Achse symmetrisch sind.</li><li><strong>Invers linear</strong> – Gibt an, dass der VF eine invers lineare Funktion des VRMA ist.</li><li><strong>Symmetrisch invers linear</strong> – Gibt an, dass der VF eine invers lineare Funktion des VRMA auf der negativen oder positiven Seite des VRMA ist und dass die beiden linearen Funktionen hinsichtlich der VF-Achse bzw. Y-Achse symmetrisch sind.</li><li><strong>Cos</strong> – Identifiziert den VF als kosinusbasierte Funktion des VRMA.</li><li><strong>Sec</strong> –Identifiziert den VF als sekansbasierte Funktion des VRMA.</li><li><strong>Cos-Sec</strong> – Gibt an, dass der VF bei einem negativen VRMA die kosinusbasierte Funktion des VRMA und bei einem positiven VRMA die sekantenbasierte Funktion des VRMA ist.</li><li><strong>Sec-Cos</strong> – Gibt an, dass der VF bei einem negativen VRMA die sekantenbasierte Funktion des VRMA und bei einem positiven VRMA die kosinusbasierte Funktion des VRMA ist.</li><li><strong>Tabelle</strong> – Gibt an, dass zum Definieren des Diagramms für den vertikalen Faktor und damit zum Bestimmen der VFs eine Tabellendatei verwendet wird.</li></ul><p>Die Modifikatoren für die Schlüsselwörter des vertikalen Faktors lauten wie folgt:</p><ul><li><strong>Null-Faktor</strong> – Legt den vertikalen Faktor fest, der verwendet wird, wenn der VRMA 0 ist. Dieser Faktor positioniert den Y-Schnittpunkt der angegebenen Funktion. Laut Definition ist der Null-Faktor nicht auf trigonometrische vertikale Funktionen (COS, SEC, COS-SEC oder SEC-COS) anwendbar. Der Y-Schnittpunkt wird von diesen Funktionen definiert.</li><li><strong>Niedriger Schnittwinkel</strong> – Definiert den VRMA, unterhalb dessen der VF auf unendlich festgelegt wird.</li><li><strong>Hoher Schnittwinkel</strong> – Definiert den VRMA, oberhalb dessen der VF auf unendlich festgelegt wird.</li><li><strong>Neigung</strong> – Legt die Neigung der Geraden fest, die mit den Schlüsselwörtern <strong>Linear</strong>und <strong>Invers linear</strong> für den horizontalen Faktor verwendet wird. Die Neigung wird als Verhältnis von Höhendifferenz zu horizontaler Distanz angegeben (z. B. ist eine 45-Grad-Neigung 1/45 und wird als 0,02222 eingegeben).</li><li><strong>Tabellenname</strong> – Gibt den Namen der Tabelle an, die den VF definiert.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Definiert die Beziehung zwischen dem vertikalen Kostenfaktor und dem VRMA (Vertical Relative Moving Angle).",
	"@@Distance-Accumulation_verticalraster_tag1@@": "Die Werte werden zum Berechnen der Neigung verwendet, die zum Identifizieren des vertikalen Faktors beim Übergang von einer Zelle zur anderen dient.",
	"@@Distance-Allocation_costraster_tag0@@": "Ein Raster, das die Kosten oder Impedanz für eine planimetrische Bewegung durch jede Zelle definiert. Der Wert an jeder Zellenposition stellt die Kosten pro Einheitenentfernung für die Bewegung durch die Zelle dar. Jeder Zellenpositionswert wird mit der Zellenauflösung multipliziert. Gleichzeitig werden diagonale Bewegungen ausgeglichen, um die Gesamtkosten für die Bewegung durch die Zelle zu erhalten.",
	"@@Distance-Allocation_costraster_tag1@@": "Die Werte im <strong>Kosten-Raster</strong> können ganzzahlige oder Gleitkommawerte sein, sie dürfen jedoch nicht negativ oder 0 sein (negative oder keine Kosten sind nicht zulässig).",
	"@@Distance-Allocation_distancemethod_tag0@@": "Gibt an, ob die Entfernung mithilfe einer planaren (flache Erde) oder geodätischen (Ellipsoid) Methode berechnet werden soll.",
	"@@Distance-Allocation_distancemethod_tag1@@": "Planar: Bei planaren Messungen werden Entfernungen und Flächen mithilfe der zweidimensionalen kartesischen Mathematik berechnet. Diese Option ist nur bei Messungen in einem projizierten Koordinatensystem verfügbar und die zweidimensionale Ebene dieses Koordinatensystems wird als Basis für die Messungen verwendet.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Geodätisch: Die kürzeste Linie zwischen zwei Punkten auf der Erdoberfläche auf einem Sphäroid (Ellipsoid). Deshalb ändern sich die Ergebnisse unabhängig von der Eingabe- oder Ausgabeprojektion nicht.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Hinweis:</strong>Eine Verwendung für eine geodätische Linie ist die Ermittlung der kürzesten Entfernung zwischen zwei Städten für eine Flugroute. Dies ist auch als Großkreislinie bekannt, wenn eine Kugel anstelle einer Ellipse als Basis dient.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Definiert die Beziehung zwischen dem horizontalen Kostenfaktor und dem HRMA (Horizontal Relative Moving Angle).</p><p>Es stehen mehrere Faktoren mit Modifikatoren zur Auswahl, durch die ein definiertes Diagramm für den vertikalen Faktor festgelegt wird. Darüber hinaus kann mithilfe einer Tabelle ein benutzerdefiniertes Diagramm erstellt werden. Die Diagramme identifizieren den vertikalen Faktor, der zum Berechnen der Gesamtkosten für die Bewegung in eine benachbarte Zelle verwendet wird.</p><p>In den folgenden Erläuterungen werden die beiden Akronyme HF und HRMA verwendet. HF steht für horizontaler Faktor, d. h. für die horizontalen Hindernisse bei der Bewegung von einer Zelle zur nächsten. HRMA steht für horizontaler relativer Bewegungswinkel, d. h. für den Winkel zwischen der horizontalen Richtung von einer Zelle und der Bewegungsrichtung.</p><p><strong>Horizontaler Faktor</strong>umfasst die folgenden Typen:</p><ul><li><strong>Binär</strong> – Wenn der HRMA kleiner ist als der Schnittwinkel, wird für den HF der dem Null-Faktor zugewiesene Wert festgelegt. Andernfalls ist dieser unendlich.</li><li><strong>Vorwärts</strong> – Legt fest, dass nur Vorwärtsbewegungen zulässig sind. Der HRMA muss größer als oder gleich 0 Grad und kleiner als 90 Grad sein (0 &lt;= HRMA &lt; 90). Wenn der HRMA größer als 0 und kleiner als 45 Grad ist, wird als HF für die Zelle der dem Null-Faktor zugewiesene Wert festgelegt. Wenn der HRMA größer als oder gleich 45 Grad ist, wird der Wert des Seitenwert-Modifikators verwendet. Der HF für einen HRMA-Wert, der größer als oder gleich 90 Grad ist, wird auf unendlich festgelegt.</li><li><strong>Linear</strong> – Gibt an, dass der HF eine lineare Funktion des HRMA ist.</li><li><strong>Invers linear</strong> – Gibt an, dass der HF eine invers lineare Funktion des HRMA ist.</li><li><strong>Tabelle</strong> – Gibt an, dass zum Definieren des Diagramms für den horizontalen Faktor und damit zum Bestimmen der HF eine Tabellendatei verwendet wird.</li></ul><p>Die Modifikatoren für die Schlüsselwörter der horizontalen Faktoren lauten wie folgt:</p><ul><li><strong>Null-Faktor</strong> – Legt den horizontalen Faktor fest, der verwendet wird, wenn der HRMA 0 ist. Dieser Faktor positioniert den Y-Schnittpunkt für alle Funktionen für den horizontalen Faktor.</li><li><strong>Schnittwinkel</strong> – Definiert den HRMA, ab dem der HF auf unendlich festgelegt wird.</li><li><strong>Neigung</strong> – Legt die Neigung der Geraden fest, die mit den Schlüsselwörtern <strong>Linear</strong>und <strong>Invers linear</strong> für den horizontalen Faktor verwendet wird. Die Neigung wird als Verhältnis von Höhendifferenz zu horizontaler Distanz angegeben (z. B. ist eine 45-Grad-Neigung 1/45 und wird als 0,02222 eingegeben).</li><li><strong>Seitenfaktor</strong> – Legt den HF fest, wenn der HRMA größer als oder gleich 45 Grad und kleiner als 90 Grad ist und wenn das Schlüsselwort <strong>Vorwärts</strong> für den horizontalen Faktor angegeben wird.</li><li><strong>Tabellenname</strong> – Gibt den Namen der Tabelle an, die den HF definiert.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "Ein Raster, das die horizontale Richtung an jeder Zelle definiert.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "Die Werte in dem Raster müssen ganzzahlige Werte zwischen 0 und 360 Grad sein. Dabei steht 0 Grad für Norden (am Bildschirm oben), und der Winkel nimmt im Uhrzeigersinn zu. Ebenen Flächen sollte der Wert -1 zugewiesen werden. Beim Übergang von einer Zelle zu einer benachbarten Zelle werden die Werte an jeder Position zusammen mit dem <strong>horizontalen Faktor</strong> verwendet, um die anfallenden horizontalen Kosten zu bestimmen.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "Die anfänglichen akkumulativen Kosten zum Beginn der Kostenberechnung. Dieser Parameter ermöglicht die Festlegung der Fixkosten, die mit einer Quelle verknüpft sind. Der Kostenalgorithmus beginnt mit dem hier angegebenen Wert statt mit dem Kostenwert 0.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "Der Wert muss größer gleich 0 sein. Die Standardeinstellung ist 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Definiert die maximalen akkumulativen Kosten für den Reisenden für eine Quelle. Die Kostenberechnungen werden für jede Quelle fortgesetzt, bis die angegebene Kapazität erreicht ist.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "Der Wert muss größer 0 sein. Die Standardkapazität reicht bis zur Kante des Ausgabe-Rasters.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "Ein Multiplikator zum Anwenden der Kostenwerte.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Dieser Parameter ermöglicht die Steuerung des Reisemodus oder der Magnitude an einer Quelle. Je größer der Multiplikator, desto höher sind die Kosten, um sich von einer Zelle zur anderen zu bewegen.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "Die Werte müssen größer als Null sein. Die Standardeinstellung ist 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "Für diesen Parameter kann ein numerischer Wert (double) oder ein Feld aus dem <strong>Quell-Raster</strong> verwendet werden.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "Das Raster, das die Barrieren definiert.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "Das Dataset muss \"NoData\" enthalten, wo keine Barrieren vorhanden sind. Barrieren werden von gültigen Werten dargestellt, einschließlich Null.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "Die Barrieren können durch ein Ganzzahl- oder Gleitkomma-Raster definiert sein.",
	"@@Distance-Allocation_sourcefield_tag0@@": "Das Feld für die Zuweisung von Werten zu den Quellenpositionen. Die Eingabe muss ein ganzzahliger Wert sein.",
	"@@Distance-Allocation_sourceraster_tag0@@": "Die Eingabequellenpositionen.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Dies ist ein Raster-Dataset zum Ermitteln der Zellen oder Positionen, von denen die Entfernung mit den geringsten akkumulativen Kosten jeder Ausgabezellenposition berechnet wird.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Gibt an, ob mit einem Multiband-Raster nur das Zuordnungs-Raster erstellt wird.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Deaktiviert: Das Ergebnis ist das Entfernungs-Zuordnungs-Raster. Es handelt sich um ein Einzelband. Dies ist die Standardeinstellung.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Aktiviert: Es wird ein Multiband-Raster erstellt. Das erste Band ist das Entfernungs-Allokations-Raster, das zweite enthält einen Zeilenindex und das dritte einen Spaltenindex. Diese Indizes geben die Position der Quellenzelle an, deren Entfernung die geringsten akkumulativen Kosten aufweist.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "Ein Raster, das die Höhenwerte an jeder Zellenposition definiert.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "Beim Übergang zwischen Zellen werden die Werte verwendet, um die tatsächliche Oberflächenentfernung zu berechnen.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Definiert die Richtung des Reisenden bei Anwendung von vertikalen und horizontalen Faktoren und der Quellresistenzrate an.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>Aus Quelle</strong>: Vertikaler Faktor, horizontaler Faktor und Quellresistenzrate werden an der Eingabequelle beginnend und in Richtung Nicht-Quellenzellen angewendet. Dies ist die Standardeinstellung.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>Zur Quelle</strong>: Vertikaler Faktor, horizontaler Faktor und Quellresistenzrate werden an jeder Nicht-Quellenzelle beginnend und zurück zur Eingabequelle angewendet.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Geben Sie das Schlüsselwort <strong>Aus Quelle</strong> bzw. <strong>Zur Quelle</strong> ein, das auf alle Quellen angewendet wird, oder legen Sie ein Feld im <strong>Quell-Raster</strong> fest, das die Schlüsselwörter enthält, um die Reiserichtung für jede Quelle zu identifizieren. Dieses Feld muss die Zeichenfolgen ${FROM_SOURCE} oder ${TO_SOURCE} enthalten.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Definiert die Beziehung zwischen dem vertikalen Kostenfaktor und dem HVMA (Vertical Relative Moving Angle).</p><p>Es stehen mehrere Faktoren mit Modifikatoren zur Auswahl, durch die ein definiertes Diagramm für den vertikalen Faktor festgelegt wird. Darüber hinaus kann mithilfe einer Tabelle ein benutzerdefiniertes Diagramm erstellt werden. Die Diagramme identifizieren den vertikalen Faktor, der zum Berechnen der Gesamtkosten für die Bewegung in eine benachbarte Zelle verwendet wird.</p><p>In den folgenden Erläuterungen werden die beiden Akronyme VF und VRMA verwendet. VF steht für vertikaler Faktor, d. h. für die vertikalen Hindernisse bei der Bewegung von einer Zelle zur nächsten. VRMA steht für vertikaler relativer Bewegungswinkel, d. h. für den Neigungswinkel zwischen der Ausgangs- oder Verarbeitungszelle (FROM) und der Zielzelle (TO).</p><p><strong>Vertikaler Faktor umfasst </strong>die folgenden Typen:</p><ul><li><strong>Binär</strong> – Wenn der VRMA größer als der untere Schnittwinkel und kleiner als der obere Schnittwinkel ist, wird für den VF der dem Null-Faktor zugewiesene Wert festgelegt. Andernfalls ist dieser unendlich.</li><li><strong>Linear</strong> – Gibt an, dass der VF eine lineare Funktion des VRMA ist.</li><li><strong>Symmetrisch linear</strong> – Gibt an, dass der VF eine lineare Funktion des VRMA auf der negativen oder positiven Seite des VRMA ist und dass die beiden linearen Funktionen hinsichtlich der VF-Achse bzw. Y-Achse symmetrisch sind.</li><li><strong>Invers linear</strong> – Gibt an, dass der VF eine invers lineare Funktion des VRMA ist.</li><li><strong>Symmetrisch invers linear</strong> – Gibt an, dass der VF eine invers lineare Funktion des VRMA auf der negativen oder positiven Seite des VRMA ist und dass die beiden linearen Funktionen hinsichtlich der VF-Achse bzw. Y-Achse symmetrisch sind.</li><li><strong>Cos</strong> – Identifiziert den VF als kosinusbasierte Funktion des VRMA.</li><li><strong>Sec</strong> –Identifiziert den VF als sekansbasierte Funktion des VRMA.</li><li><strong>Cos-Sec</strong> – Gibt an, dass der VF bei einem negativen VRMA die kosinusbasierte Funktion des VRMA und bei einem positiven VRMA die sekantenbasierte Funktion des VRMA ist.</li><li><strong>Sec-Cos</strong> – Gibt an, dass der VF bei einem negativen VRMA die sekantenbasierte Funktion des VRMA und bei einem positiven VRMA die kosinusbasierte Funktion des VRMA ist.</li><li><strong>Tabelle</strong> – Gibt an, dass zum Definieren des Diagramms für den vertikalen Faktor und damit zum Bestimmen der VFs eine Tabellendatei verwendet wird.</li></ul><p>Die Modifikatoren für die Schlüsselwörter des vertikalen Faktors lauten wie folgt:</p><ul><li><strong>Null-Faktor</strong> – Legt den vertikalen Faktor fest, der verwendet wird, wenn der VRMA 0 ist. Dieser Faktor positioniert den Y-Schnittpunkt der angegebenen Funktion. Laut Definition ist der Null-Faktor nicht auf trigonometrische vertikale Funktionen (COS, SEC, COS-SEC oder SEC-COS) anwendbar. Der Y-Schnittpunkt wird von diesen Funktionen definiert.</li><li><strong>Niedriger Schnittwinkel</strong> – Definiert den VRMA, unterhalb dessen der VF auf unendlich festgelegt wird.</li><li><strong>Hoher Schnittwinkel</strong> – Definiert den VRMA, oberhalb dessen der VF auf unendlich festgelegt wird.</li><li><strong>Neigung</strong> – Legt die Neigung der Geraden fest, die mit den Schlüsselwörtern <strong>Linear</strong>und <strong>Invers linear</strong> für den horizontalen Faktor verwendet wird. Die Neigung wird als Verhältnis von Höhendifferenz zu horizontaler Distanz angegeben (z. B. ist eine 45-Grad-Neigung 1/45 und wird als 0,02222 eingegeben).</li><li><strong>Tabellenname</strong> – Gibt den Namen der Tabelle an, die den VF definiert.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Definiert die Beziehung zwischen dem vertikalen Kostenfaktor und dem VRMA (Vertical Relative Moving Angle).",
	"@@Distance-Allocation_verticalraster_tag1@@": "Die Werte werden zum Berechnen der Neigung verwendet, die zum Identifizieren des vertikalen Faktors beim Übergang von einer Zelle zur anderen dient.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "Die Zellengröße im zu erstellenden Ausgabe-Raster.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Wenn die Zellengröße explizit in den <strong>Umgebungen</strong> festgelegt wurde, ist dies die Standardzellengröße. Wurde sie nicht festgelegt, ist die Ausgabezellengröße mit dem <strong>Quell-Raster</strong> identisch.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Gibt an, ob die Entfernung mithilfe einer planaren (flache Erde) oder geodätischen (Ellipsoid) Methode berechnet werden soll.",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Planar: Bei planaren Messungen werden Entfernungen und Flächen mithilfe der zweidimensionalen kartesischen Mathematik berechnet. Diese Option ist nur bei Messungen in einem projizierten Koordinatensystem verfügbar und die zweidimensionale Ebene dieses Koordinatensystems wird als Basis für die Messungen verwendet.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Geodätisch: Die kürzeste Linie zwischen zwei Punkten auf der Erdoberfläche auf einem Sphäroid (Ellipsoid). Deshalb ändern sich die Ergebnisse unabhängig von der Eingabe- oder Ausgabeprojektion nicht.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Hinweis:</strong>Eine Verwendung für eine geodätische Linie ist die Ermittlung der kürzesten Entfernung zwischen zwei Städten für eine Flugroute. Dies ist auch als Großkreislinie bekannt, wenn eine Kugel anstelle einer Ellipse als Basis dient.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Definiert den Entfernungsschwellenwert für die Entfernung, innerhalb derer die Richtung zur nächstgelegenen Quelle berechnet wird. Wenn die Entfernung zur nächstgelegenen Quelle den Schwellenwert überschreitet, lautet die Ausgabe für die Zelle \"NoData\".",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "Die Standardentfernung ist die Ausdehnung des Ausgabe-Rasters.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "Das Raster, das die Barrieren definiert.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "Das Dataset muss \"NoData\" enthalten, wo keine Barrieren vorhanden sind. Barrieren werden von gültigen Werten dargestellt, einschließlich Null.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "Die Barrieren können durch ein Ganzzahl- oder Gleitkomma-Raster definiert sein.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "Ein Raster-Dataset, das die Zellen oder Positionen identifiziert, für die die euklidische Richtung für jede Ausgabezellenposition berechnet wird.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "Der Eingabetyp kann ein ganzzahliger oder ein Gleitkommawert sein.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "Der Name eines Kosten-Rückverknüpfungs-Raster-Layers, der verwendet wird, um die Route zur Rückkehr zu einer Quelle über die kostengünstigste Route zu ermitteln.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "Für jede Zelle im Rückverknüpfungs-Raster gibt ein Wert den Nachbarn an, d. h. die nächste Zelle auf der Route mit den geringsten akkumulativen Kosten von der Zelle zu einer einzelnen Quellenzelle oder einer Menge von Quellenzellen.",
	"@@Cost-Path_costdistanceraster_tag0@@": "Der Name eines Kostenentfernungs-Rasters, das verwendet werden soll, um die kostengünstigste Route von den Zielpositionen zu einer Quelle zu ermitteln.",
	"@@Cost-Path_costdistanceraster_tag1@@": "Das Kostenentfernungs-Raster wird normalerweise mit der Funktion \"Kostenentfernung\", \"Kostenzuordnung\" oder \"Kostenrückverknüpfung\" erstellt. Im Kostenentfernungs-Raster-Layer wird für jede Zelle die minimale akkumulative Kostenentfernung auf einer Kostenoberfläche von jeder Zelle zu einer Menge von Quellenzellen gespeichert.",
	"@@Cost-Path_destinationfield_tag0@@": "Das Feld, das verwendet wird, um Werte für die Zielpositionen zu erhalten. Eingabe-Feature-Daten müssen mindestens ein gültiges Feld enthalten.",
	"@@Cost-Path_destinationraster_tag0@@": "Ein Raster-Dataset-Layer, der diejenigen Zellen identifiziert, von denen die kostengünstigste Route zur am wenigsten kostspieligen Quelle ermittelt wird.",
	"@@Cost-Path_destinationraster_tag1@@": "Der Eingabe-Raster-Layer besteht aus Zellen mit gültigen Werten (0 ist ein gültiger Wert), und den restlichen Zellen muss \"NoData\" zugewiesen werden.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Zwingt die Funktion, das Eingabe-Rückverknüpfungs-Raster als Fließrichtungs-Raster zu behandeln. Fließrichtungs-Raster können ganze Zahlen mit Werten zwischen 0 und 255 enthalten.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Deaktiviert: Wenn die Werte des angegebenen Rückverknüpfungs-Rasters ganze Zahlen zwischen 0 und 8 sind, wird das Dataset als Kosten-Rückverknüpfungs-Raster behandelt. Wenn die Werte zwischen 0 und 255 liegen, wird die Eingabe als Fließrichtungs-Raster behandelt. Für den Wertebereich zwischen 0 und 360 sowie für Gleitkommawerte wird die Eingabe als Gegenrichtungs-Raster behandelt.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Aktiviert: Das für das Rückverknüpfungs-Raster angegebene Raster wird als Fließrichtungs-Raster behandelt. Verwenden Sie diese Option, wenn das Fließrichtungs-Raster einen Höchstwert von 8 oder einen geringeren Wert aufweist.",
	"@@Cost-Path_pathtype_tag0@@": "Ein Schlüsselwort, das die Art und Weise definiert, in der die Werte und Zonen der Eingabezieldaten in den Kostenpfadberechnungen interpretiert werden. Die folgenden Optionen sind verfügbar:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Jede Zelle</strong>: Für jede Zelle mit gültigen Werten in den Eingabezieldaten wird eine kostengünstigste Route ermittelt und im Ausgabe-Raster gespeichert. Mit dieser Option wird jede Zelle der Eingabezieldaten separat behandelt und eine kostengünstigste Route für jede Zelle ermittelt.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Jede Zone</strong>: Für jede Zone in den Eingabezieldaten wird eine kostengünstigste Route ermittelt und im Ausgabe-Raster gespeichert. Bei dieser Option beginnt die kostengünstigste Route für jede Zone bei der Zelle mit der niedrigsten Kostenentfernungsgewichtung in der Zone.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Der Beste</strong>: Für alle Zellen in den Eingabezieldaten wird die kostengünstigste Route aus der Zelle mit dem Minimum der kostengünstigsten Routen zu Quellenzellen abgeleitet.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.",
	"@@Cell-Statistics_extenttype_tag0@@": "Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:",
	"@@Cell-Statistics_extenttype_tag1@@": "Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.",
	"@@Cell-Statistics_extenttype_tag2@@": "Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.",
	"@@Cell-Statistics_extenttype_tag3@@": "Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.",
	"@@Cell-Statistics_extenttype_tag4@@": "Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Legt fest, wie die Eingabe-Raster-Bänder verarbeitet werden.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Deaktiviert: Alle Multiband-Eingaben werden als einfache Bänder verarbeitet. Dies ist die Standardeinstellung.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Aktiviert: Alle Multiband-Eingaben werden als Multiband verarbeitet.",
	"@@Cell-Statistics_rasters_tag0@@": "Die Liste der Raster, über die Statistiken auf Pixelbasis berechnet werden sollen.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Gibt die Interpolationsmethode an, die verwendet werden muss, wenn der angegebene Perzentilwert zwischen zwei Eingabezellenwerten liegt.</p><ul><li><strong>Automatisch erkennen</strong>: Wenn die Eingabe-Raster einen ganzzahligen Pixeltyp aufweisen, wird die Methode <strong>Nächster Nachbar</strong> verwendet. Weist das Eingabe-Raster einen Gleitkomma-Pixeltyp auf, wird die Methode <strong>Linear</strong> verwendet. Dies ist die Standardeinstellung.</li><li><strong>Nächster</strong>: Es wird der dem gewünschten Perzentil am nächsten liegende verfügbare Wert verwendet. In diesem Fall entspricht der Ausgabepixeltyp dem der Eingabe-Werte-Raster.</li><li><strong>Linear</strong> – Es wird der gewichtete Durchschnitt der beiden umgebenden Werte aus dem gewünschten Perzentil verwendet. In diesem Fall ist der Ausgabepixeltyp \"Gleitkomma\".</li></ul><p>Diese Option ist nur verfügbar, wenn für den Parameter <strong>Operation</strong> die Option <strong>Median</strong> oder <strong>Perzentil</strong> festgelegt wurde.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>Das zu berechnende Perzentil. Der Standardwert ist 90 für das 90. Perzentil.</p><p>Die Werte können im Bereich von 0 bis 100 liegen. Grundsätzlich entspricht der Perzentilwert 0 statistisch gesehen dem Minimum und der Perzentilwert 100 dem Maximum. Der Wert 50 ergibt im Wesentlichen dasselbe Ergebnis wie der Medianwert der Statistik.</p><p>Diese Option ist nur verfügbar, wenn für den Parameter <strong>Operation</strong>die Option <strong>Perzentil</strong> festgelegt wurde.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "Das Gegenrichtungs-Raster enthält berechnete Richtungen in Grad. Die Richtung identifiziert die nächste Zelle entlang dem optimalen Pfad zurück zur Quelle mit den geringsten akkumulativen Kosten, wobei Barrieren vermieden werden.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "Der Wertebereich reicht von 0 Grad bis 360 Grad, wobei 0 Grad für die Quellenzellen reserviert ist. In östlicher Richtung (rechts) befindet sich der 90-Grad-Winkel, und die Werte nehmen im Uhrzeigersinn zu (180 Grad ist Süden, 270 Grad ist Westen und 360 Grad ist Norden).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "Das Feld, das verwendet wird, um Werte für die Zielpositionen zu erhalten.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "Ein Raster-Dataset-Layer, der diejenigen Zellen identifiziert, von denen der optimale Pfad zur am wenigsten kostspieligen Quelle ermittelt wird. Diese Eingabe ist erforderlich.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "Der Eingabe-Raster-Layer besteht aus Zellen mit gültigen Werten (0 ist ein gültiger Wert), und den restlichen Zellen muss \"NoData\" zugewiesen werden.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "Mit dem Entfernungsakkumulations-Raster wird der optimale Pfad von den Zielen zu den Quellen ermittelt. Das Entfernungsakkumulations-Raster wird normalerweise mit der Funktion <strong>Entfernungsakkumulation</strong> erstellt. Jede Zelle im Entfernungsakkumulations-Raster stellt die minimale akkumulative Kostenentfernung über eine Oberfläche von jeder Zelle zu einer Menge von Quellenzellen dar.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Gibt ein Schlüsselwort an, das die Art und Weise definiert, in der die Werte und Zonen der Eingabezieldaten in den Kostenpfadberechnungen interpretiert werden:",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Jede Zone</strong>: Für jede Zone in den Eingabezieldaten wird der kostengünstigste Pfad ermittelt und im Ausgabe-Raster gespeichert. Bei dieser Option beginnt der optimale Pfad für jede Zone bei der Zelle mit der niedrigsten Kostenentfernungsgewichtung in der Zone.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Der Beste</strong>: Für alle Zellen in den Eingabezieldaten wird der optimale Pfad aus der Zelle mit dem Minimum der kostengünstigsten Pfade zu Quellenzellen abgeleitet.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Jede Zelle</strong>: Für jede Zelle mit gültigen Werten in den Eingabezieldaten wird ein optimaler Pfad ermittelt. Mit dieser Option wird jede Zelle der Eingabezieldaten separat behandelt und ein optimaler Pfad für jede Zelle ermittelt.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "Die für die Änderungserkennung zu verwendenden Band-IDs. Wenn keine Band-IDs angegeben werden, werden alle Bänder aus dem Eingabe-Raster-Dataset verwendet.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "ID-Werte können ganze Zahlen sein, die durch Leerzeichen getrennt werden.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "Die Band-IDs des grünen Bandes und SWIR-Bandes, die zur Maskierung von Wolken, Wolkenschatten und Schnee dienen. Wenn keine Band-IDs angegeben werden, erfolgt keine Maskierung.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "ID-Werte können ganze Zahlen sein, die durch Leerzeichen getrennt werden.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Mit diesem Parameter werden die zu verwendenden Bänder für Wolken-, Wolkenschatten- und Schneemaskierung angegeben. Da Wolkenschatten und Schnee im Kurzwelleninfrarotband (SWIR) sehr dunkel dargestellt werden und Wolken und Schnee im grünen Band sehr hell sind, empfiehlt es sich, die Bandindizes für die SWIR- und grünen Bänder zu maskieren.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "Der Schwellenwert für die Chi-Quadrat-Veränderungswahrscheinlichkeit. Wenn eine Beobachtung eine berechnete Veränderungswahrscheinlichkeit über diesem Schwellenwert aufweist, wird sie als Abweichung gekennzeichnet und stellt ein mögliches Veränderungsereignis dar. Der Standardwert ist 0,99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "Die minimale Anzahl der aufeinanderfolgenden beobachteten Abweichungen, die eingetreten sein muss, bevor ein Ereignis als Veränderung angesehen wird. Ein Pixel muss für die angegeben Anzahl von aufeinanderfolgenden Zeitintervallen als Abweichung gekennzeichnet werden, bevor es als wahre Veränderung betrachtet wird. Der Standardwert ist 6.",
	"@@CCDC-Analysis_raster_tag0@@": "Der als Eingabe verwendete multidimensionale Raster-Layer.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "Die Häufigkeit, mit der das Zeitserienmodell mit neuen Beobachtungen aktualisiert werden soll. Standardmäßig wird das Modell nach jeweils einem Jahr aktualisiert.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Mit dem Parameter wird definiert, wie häufig das Zeitserienmodell mit neuen Beobachtungen aktualisiert wird. Eine häufige Aktualisierung eines Modells kann rechenintensiv sein, während der Nutzen nur minimal ist. Beispiel: Wenn es im multidimensionalen Raster 365 Ausschnitte oder eindeutige Beobachtungen pro Jahr gibt und die Aktualisierungshäufigkeit pro Beobachtung festgelegt ist, ist die Verarbeitung 365 Mal rechenintensiver als eine einmalige Aktualisierung pro Jahr, aber die Genauigkeit ist möglicherweise nicht höher.",
	"@@Trend-To-RGB_modeltype_tag0@@": "Der Typ der Modellinformationen, der in RGB konvertiert werden soll.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Linear: Lineare Trendinformationen werden in RGB konvertiert. Dies ist die Standardeinstellung.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Harmonisch: Harmonische Trendinformationen werden in RGB konvertiert.",
	"@@Trend-To-RGB_raster_tag0@@": "Das als Eingabe verwendete Trend-Raster.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>Der beste Proportionswert des Modells. Während der Modellauswahl berechnet das Werkzeug den p-Wert für jedes Modell und wählt ein Modell aus, das die meisten Stützpunkte enthält, wobei gleichzeitig der kleinste (signifikanteste) p-Wert basierend auf diesem Proportionswert beibehalten wird. Der Wert 1 bedeutet, dass das Modell den niedrigsten p-Wert aufweist, aber möglicherweise nicht viele Stützpunkte enthält. Der Standardwert ist 1,25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>Die maximale Anzahl von Segmenten, die für jedes Pixel an die Zeitreihe anzupassen sind. Der Standardwert ist 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>Die Mindestanzahl gültiger Beobachtungen, die zur Durchführung der Anpassung erforderlich ist. Die Anzahl an Jahren im multidimensionalen Eingabe-Dataset muss gleich oder größer als dieser Wert sein. Der Standardwert ist 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Gibt an, ob andere Bänder in die Ergebnisse einbezogen werden.</p><ul><li>Aktiviert: Andere Bänder werden in die Ergebnisse einbezogen. Die Segmentierungs- und Stützpunktinformationen aus dem ersten Segmentierungsband, das im Parameter <strong>Verarbeitungsband</strong> angegeben wurde, werden auch an die verbleibenden Bänder in den Multiband-Bildern angepasst. Zuerst wird das Segmentierungsband in die Modellergebnisse einbezogen und dann die verbleibenden Bänder.</li><li>Deaktiviert: Andere Bänder werden nicht einbezogen. Dies ist die Standardeinstellung.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Gibt an, ob Segmente, die eine einjährige Regeneration aufweisen, ausgeschlossen werden.</p><ul><li>Aktiviert: Segmente, die eine einjährige Regeneration aufweisen, werden ausgeschlossen. Dies ist die Standardeinstellung.</li><li>Deaktiviert: Segmente, die eine einjährige Regeneration aufweisen, werden nicht ausgeschlossen.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>Das Band, das für die Segmentierung der Pixelwertverläufe im Zeitverlauf verwendet werden muss. Wählen Sie das Band aus, das die Veränderungen des zu beobachtenden Features am besten erfasst.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>Der Schwellenwert für p-Werte, bei dem ein Modell ausgewählt werden kann. Nachdem die Stützpunkte in der ersten Phase der Modellanpassung erkannt wurden, passt das Werkzeug jedes Segment an und berechnet den p-Wert, um die Signifikanz des Modells zu ermitteln. Bei der nächsten Iteration verringert das Modell die Anzahl der Segmente um eins und berechnet den p-Wert neu. Diese Vorgehensweise wird fortgesetzt. Wenn der p-Wert kleiner ist als der in diesem Parameter angegebene Wert, wird das Modell ausgewählt, und das Werkzeug hört auf, nach einem besseren Modell zu suchen. Falls kein solches Modell ausgewählt wird, wählt das Werkzeug ein Modell mit einem p-Wert aus, der kleiner ist als der <strong>niedrigste p-Wert × Proportion des besten Modells</strong>. Der Standardwert ist 0,01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>Der als Eingabe verwendete multidimensionale Landsat-Raster-Layer.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Gibt an, ob die Regeneration einen zunehmenden (positiven) Trend aufweist.</p><ul><li>Aktiviert: Die Regeneration weist einen zunehmenden Trend auf. Dies ist die Standardeinstellung.</li><li>Deaktiviert: Die Regeneration weist einen abnehmenden Trend auf.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>Der Regenerations-Schwellenwert in Jahren. Wenn ein Segment eine schnellere Regenerationsrate als <strong>1/Regenerations-Schwellenwert</strong> aufweist, wird das Segment verworfen und nicht in das Zeitserienmodell aufgenommen. Der Wert muss zwischen 0 und 1 liegen. Der Standardwert ist 0,25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>Das Datum, das zur Auswahl eines Abschnitts für jedes Jahr im multidimensionalen Eingabe-Dataset verwendet wird. Es wird der Abschnitt mit dem Datum ausgewählt, das dem Fangdatum am nächsten liegt. Dieser Parameter ist erforderlich, wenn das Eingabe-Dataset Daten für kleinere Zeitabschnitte als Jahre enthält.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>Der Schwellenwert, der zum Dämpfen von Spikes oder Abweichungen im Pixelwertverlauf verwendet wird. Der Wert muss im Bereich von 0 bis 1 liegen, wobei 1 angibt, dass keine Dämpfung erfolgt. Der Standardwert ist 0,9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>Die Anzahl der zusätzlichen Stützpunkte, die über <strong>max_num_segments + 1</strong> hinausgehen und während der ersten Phase der Identifizierung von Stützpunkten zur Anpassung an das Modell verwendet werden können. Zu einem späteren Zeitpunkt im Modellierungsprozess wird die Anzahl der zusätzlichen Stützpunkte auf <strong>max_num_segments + 1</strong> reduziert. Der Standardwert ist 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>Die Eingabe-Raster-Datasets oder die multidimensionalen Raster-Datasets, die zusammengeführt werden sollen.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Gibt an, welche Methode zum Auflösen überlappender Pixel in den kombinierten Datasets verwendet werden soll.</p><ul><li><strong>Erste(r)</strong>: Als Pixelwert in den Überlappungsbereichen wird der Wert aus dem ersten Raster in der Liste der Eingabe-Raster verwendet. Dies ist die Standardeinstellung.</li><li><strong>Letzte(r)</strong>: Als Pixelwert in den Überlappungsbereichen wird der Wert aus dem letzten Raster in der Liste der Eingabe-Raster verwendet.</li><li><strong>Min</strong>: Als Pixelwert in den Überlappungsbereichen wird der Minimalwert der überlappenden Pixel verwendet.</li><li><strong>Max</strong>: Als Pixelwert in den Überlappungsbereichen wird der Maximalwert der überlappenden Pixel verwendet.</li><li><strong>Mittelwert</strong>: Als Pixelwert in den Überlappungsbereichen wird der Durchschnittswert der überlappenden Pixel verwendet.</li><li><strong>Summe</strong>: Als Pixelwert in den Überlappungsbereichen wird die Gesamtsumme der überlappenden Pixel verwendet.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Gibt die Zeiteinheit für die Länge eines harmonischen Zyklus an.</p><ul><li><strong>Tage</strong>: Die Einheit für die Länge des harmonischen Zyklus ist ein Tag.</li><li><strong>Jahre</strong>: Die Einheit für die Länge des harmonischen Zyklus ist ein Jahr. Dies ist die Standardeinstellung.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>Die Dimension, für die anhand der in der Analyse ausgewählte(n) Variable(n) Trenddaten gewonnen werden sollen.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>Die für die Trendanpassung verwendete Frequenz. Dieser Parameter gibt die Frequenz als Zyklen pro Jahr an. Der Standardwert ist 1, das entspricht einem harmonischen Zyklus pro Jahr.</p><p>Dieser Parameter ist nur bei harmonischer Regression in der Trendanalyse enthalten.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Gibt an, ob NoData-Werte bei der Analyse ignoriert werden.</p><ul><li>Aktiviert: Bei der Analyse werden alle gültigen Pixel entlang einer angegebenen Dimension einbezogen und alle NoData-Pixel ignoriert. Dies ist die Standardeinstellung.</li><li>Deaktiviert: Wenn NoData-Werte für die Pixel entlang einer angegebenen Dimension vorhanden sind, wird bei der Analyse \"NoData\" zurückgegeben.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>Die Länge der zu modellierenden periodischen Variation. Die Einheit ist stets Tage; die Zeiteinheit der Eingabedaten ist unerheblich. Der Grünanteil bei Blättern beispielsweise weist pro Jahr einen starken Variationszyklus auf, sodass die Zykluslänge 365,25 beträgt, obwohl die Eingabedaten als monatlich erfasster Grünanteil vorliegen. Stündlich erfasste Temperaturdaten weisen pro Tag einen starken Variationszyklus auf, sodass die Zykluslänge 1 Tag beträgt.</p><p>Für Daten, die eine Variation auf Grundlage eines Jahreszyklus aufweisen, beträgt die Standardlänge 365,25 Tage.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Gibt an, ob die p-Wertstatistik für den Neigungskoeffizienten der Trendlinie berechnet wird.</p><ul><li>Aktiviert: Der p-Wert wird bei Abschluss der Funktion berechnet und in den Details angezeigt.</li><li>Deaktiviert: Der p-Wert wird nicht berechnet. Dies ist die Standardeinstellung.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>Die für die Trendanpassung verwendete Polynom-Ordnung. Dieser Parameter gibt die Polynom-Ordnung an. Der Standardwert ist 2, das entspricht einem Polynom zweiter Ordnung.</p><p>Dieser Parameter ist nur bei polynomischer Regression in der Trendanalyse enthalten.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Gibt an, ob für die angepasste Trendlinie eine Statistik zur Qualität der Übereinstimmung von R-Squared erstellt wird.</p><ul><li>Aktiviert: R-Squared wird bei Abschluss der Funktion berechnet und in den Details angezeigt.</li><li>Deaktiviert: R-Squared wird nicht berechnet. Dies ist die Standardeinstellung.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>Das als Eingabe verwendete multidimensionale Raster.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Gibt an, ob der RMS-Fehler (Root Mean Square, quadratisches Mittel) der angepassten Trendlinie erstellt wird.</p><ul><li>Aktiviert: Der RMS-Fehler wird bei Abschluss der Funktion berechnet und in den Details angezeigt. Dies ist die Standardeinstellung.</li><li>Deaktiviert: Der RMS-Fehler wird nicht berechnet.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Gibt an, welche Zeiteinheit bei Durchführung des saisonalen Kendall-Tests für die Länge des saisonalen Zeitraums verwendet wird.</p><ul><li>Tage: Die Einheit für die Länge des saisonalen Zeitraums ist ein Tag. Dies ist die Standardeinstellung.</li><li>Monate: Die Einheit für die Länge des saisonalen Zeitraums ist ein Monat.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Gibt den Linientyp für die Anpassung an die Pixelwerte in einer Dimension an.</p><ul><li><strong>Linear</strong>: Passt die Pixelwerte für eine Variable entlang einer linearen Trendlinie an. Dies ist die Standardeinstellung.</li><li><strong>Harmonisch</strong>: Passt die Pixelwerte für eine Variable entlang einer harmonischen Trendlinie an.</li><li><strong>Polynomisch</strong>: Passt die Pixelwerte für eine Variable entlang einer polynomischen Trendlinie zweiter Ordnung an.</li><li><strong>Mann-Kendall</strong>: Variable Pixelwerte werden mit dem Mann-Kendall-Trendtest ausgewertet.</li><li><strong>Saisonal Kendall</strong>: Variable Pixelwerte werden mit dem saisonalen Kendall-Trendtest ausgewertet.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Wählen Sie die Zellengröße für das Ausgabe-Raster aus. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.</p><ul><li>Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.</li><li>Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.</li><li>Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.</li><li>Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.</li><li>Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>Die für die Berechnung verwendete Methode.</p><ul><li><strong>Differenz</strong>: Die mathematische Differenz zwischen den Pixelwerten in den Eingabe-Rastern wird berechnet (Subtraktion). Dies ist die Standardeinstellung.</li><li><strong>Relative Differenz</strong>: Der Unterschied zwischen den Pixelwerten wird berechnet, wobei die Beträge der Werte verglichen werden.</li><li><strong>Kategorischer Unterschied</strong>: Der Unterschied zwischen zwei Kategorie- oder thematischen Rastern wird berechnet, wobei die Ausgabe Klassenübergänge enthält, die zwischen den beiden Rastern vorliegen.</li><li><strong>Spektrale euklidische Entfernung</strong>: Die euklidische Entfernung zwischen den Pixelwerten von zwei Multiband-Rastern wird berechnet.</li><li><strong>Spektrale Winkeldifferenz</strong>: Der Spektralwinkel zwischen den Pixelwerten von zwei Multiband-Rastern wird berechnet. Die Ausgabe erfolgt in Radiant.</li><li><strong>Band mit größter Veränderung</strong>: Das Band, das zwischen zwei Multiband-Rastern die größere Änderung in jedem Pixel verursacht, wird berechnet.</li></ul><p>Wenn unter <strong>Änderungsmethode berechnen</strong> die Option <strong>Kategorischer Unterschied</strong> festgelegt wird und eine der Eingaben nicht kategorisiert ist, wird der einfache Unterschied berechnet.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Geben Sie die Methode an, die für die Symbolisierung der Pixel verwendet wird, deren Klassen sich geändert haben.</p><ul><li><strong>Durchschnitt der Von- und Bis-Farben</strong>: Die Farbe eines Pixels ist der Durchschnitt der Farbe seiner ursprünglichen und seiner endgültigen Klasse.</li><li><strong>Von-Farben verwenden</strong>: Ein Pixel hat die Farbe seiner ursprünglichen Klasse.</li><li><strong>Bis-Farben verwenden</strong>: Ein Pixel hat die Farbe seiner endgültigen Klasse.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Wählen Sie die Ausdehnung für das Ausgabe-Raster aus:</p><ul><li>Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.</li><li>Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.</li><li>Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.</li><li>Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Wählen Sie die Filtermethode für die Berechnung von Kategorieänderungen aus.</p><ul><li><strong>Alle beibehalten</strong>: Alle Klassen werden in die Ausgabe einbezogen, und es erfolgt keine Filterung. Wählen Sie diese Option aus, um Änderungen und Persistenz in einem einzelnen Dataset anzuzeigen.</li><li><strong>Nur geänderte Pixel beibehalten</strong>: Die Ausgabe enthält nur die Klassen, deren Klassentyp sich geändert hat. Wählen Sie diese Option aus, wenn Sie nur Änderungen ermitteln möchten.</li><li><strong>Nur unveränderte Pixel beibehalten</strong>: Die Ausgabe enthält nur die Klassen, die sich nicht geändert haben. Wählen Sie diese Option aus, wenn Sie nur Persistenz ermitteln möchten.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>Die Klassenwerte aus <strong>Von Raster</strong>, die beim Vergleich zweier kategorisierter Raster in die Berechnung aufgenommen werden müssen. Hierbei handelt es sich um eine durch Leerzeichen getrennte Liste von ganzzahligen Werten, die dem Feld <strong>ClassValue</strong> in Ihrem Eingabe-Raster-Dataset entsprechen.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>Das erste Raster zur Verwendung in der Berechnung. Geben Sie das Raster des 1. Zeitpunkts hier ein, um die Veränderung zwischen Zeit 1 (früher) und Zeit 2 (später) auszuwerten.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>Die Klassenwerte aus <strong>In Raster</strong>, die beim Vergleich zweier kategorisierter Raster in die Berechnung aufgenommen werden müssen. Hierbei handelt es sich um eine durch Leerzeichen getrennte Liste von ganzzahligen Werten, die dem Feld <strong>ClassValue</strong> in Ihrem Eingabe-Raster-Dataset entsprechen.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>Das zweite Raster zur Verwendung in der Berechnung. Geben Sie das Raster des 2. Zeitpunkts hier ein, um die Veränderung zwischen Zeit 1 (früher) und Zeit 2 (später) auszuwerten.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Geben Sie die Methode an, die für die Symbolisierung der Pixel verwendet wird, deren Klassen sich geändert haben.</p><ul><li><strong>Durchschnitt der Von- und Bis-Farben</strong>: Die Farbe eines Pixels ist der Durchschnitt der Farbe seiner ursprünglichen und seiner endgültigen Klasse.</li><li><strong>Von-Farben verwenden</strong>: Ein Pixel hat die Farbe seiner ursprünglichen Klasse.</li><li><strong>Bis-Farben verwenden</strong>: Ein Pixel hat die Farbe seiner endgültigen Klasse.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>Ein Feld, in dem Klassennamen in der Eingabe für <strong>Von Raster</strong> gespeichert werden. Es wird automatisch nach dem zu verwendenden Feld <strong>ClassName</strong> oder <strong>Class_Name</strong> gesucht.</p><p>Verwenden Sie diese Option, wenn diese Standardfeldnamen nicht in der Eingabe enthalten sind.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>Ein Feld, in dem Klassennamen in der Eingabe für <strong>In Raster</strong> gespeichert werden. Es wird automatisch nach dem zu verwendenden Feld <strong>ClassName</strong> oder <strong>Class_Name</strong> gesucht.</p><p>Verwenden Sie diese Option, wenn diese Standardfeldnamen nicht in der Eingabe enthalten sind.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>Die Anzahl der Pixelspalten, die in einer Fokusnachbarschaftsdimension verwendet werden sollen.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>Die Anzahl der Pixelzeilen, die in einer Fokusnachbarschaftsdimension verwendet werden sollen.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Füllt NoData-Lücken in der Ausgabe. Das ist nützlich, wenn in Bilddaten Zeilen gelöscht wurden.</p>",
	"@@Statistics_raster_tag0@@": "<p>Das Eingabe-Raster, für das \"Focal Statistics\" ausgeführt wird.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>Es gibt die folgenden sieben Typen von Focal-Statistics-Funktionen:</p><ul><li>Minimum: Berechnet den Minimalwert der Pixel innerhalb der Nachbarschaft.</li><li>Maximum: Berechnet den Maximalwert der Pixel innerhalb der Nachbarschaft.</li><li>Mittelwert: Berechnet den Durchschnittswert der Pixel innerhalb der Nachbarschaft. Dies ist der Standardwert.</li><li>Standardabweichung: Berechnet die Standardabweichung der Pixel innerhalb der Nachbarschaft.</li><li>Medianwert: Berechnet den Medianwert der Pixel innerhalb der Nachbarschaft.</li><li>Mehrheit: Berechnet den Mehrheitswert oder den am häufigsten auftretenden Wert der Pixel innerhalb der Nachbarschaft.</li><li>Minderheit: Berechnet den Minderheitswert oder den am seltensten auftretenden Wert der Pixel innerhalb der Nachbarschaft.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Gibt die Richtung der Veränderung an, die in die Analyse einbezogen werden soll.</p><p>Dieser Parameter ist nur verfügbar, wenn das als Eingabe verwendete Veränderungsanalyse-Raster die Ausgabe der LandTrendr-Werkzeuge ist.</p><ul><li><strong>Alle Richtungen</strong>: Alle Veränderungsrichtungen werden in die Ausgabe aufgenommen. Dies ist die Standardeinstellung.</li><li><strong>Erhöhung</strong>: In der Ausgabe sind nur Veränderungen in der positiven Richtung bzw. der Richtung der Erhöhung enthalten.</li><li><strong>Verringerung</strong>: In der Ausgabe sind nur Veränderungen in der negativen Richtung bzw. der Richtung der Verringerung enthalten.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Gibt an, welche Änderungsdaten berechnet werden sollen.</p><ul><li><strong>Zeit der letzten Änderung</strong>: Die einzelnen Pixel enthalten das Datum der letzten Änderung des Pixels in der Zeitserie. Dies ist die Standardeinstellung.</li><li><strong>Zeit der ersten Änderung</strong>: Die einzelnen Pixel enthalten das Datum der ersten Änderung des Pixels in der Zeitserie.</li><li><strong>Zeit der größten Änderung</strong>: Die einzelnen Pixel enthalten das Datum der größten Änderung des Pixels in der Zeitserie.</li><li><strong>Anzahl an Änderungen</strong>: Die einzelnen Pixel enthalten die Gesamtzahl an Änderungen des Pixels in der Zeitserie.</li><li><strong>Zeit der längsten Änderung</strong>: Jedes Pixel enthält das Datum der Änderung am Ende des längsten Übergangssegments in der Zeitserie.</li><li><strong>Zeit der kürzesten Änderung</strong>: Jedes Pixel enthält das Datum der Änderung am Ende des kürzesten Übergangssegments in der Zeitserie.</li><li><strong>Zeit der schnellsten Änderung</strong>: Jedes Pixel enthält das Datum der Veränderung am Ende des Übergangs, der am schnellsten erfolgt ist.</li><li><strong>Zeit der langsamsten Änderung</strong>: Jedes Pixel enthält das Datum der Veränderung am Ende des Übergangs, der am langsamsten erfolgt ist.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Gibt an, dass nach der Dauer der Veränderung gefiltert werden soll.</p><p></p><ul><li>Aktiviert: Ergebnisse werden nach Dauer gefiltert, sodass nur Veränderungen, die eine bestimmte Zeit andauerten, in die Ausgabe aufgenommen werden.</li><li>Nicht aktiviert: Ergebnisse werden nicht nach Dauer gefiltert. Dies ist die Standardeinstellung.</li></ul><p>Dieser Parameter ist nur verfügbar, wenn das als Eingabe verwendete Veränderungsanalyse-Raster die Ausgabe der LandTrendr-Werkzeuge ist.</p><p>Wenn dieser Parameter aktiviert ist, müssen Sie die Parameter <strong>Minimalwert</strong> und <strong>Maximalwert</strong> für den Filtervorgang festlegen.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Gibt an, dass nach der Magnitude der Veränderung gefiltert werden soll.</p><ul><li>Aktiviert: Ergebnisse werden nach Magnitude gefiltert, sodass nur Veränderungen einer bestimmten Magnitude in die Ausgabe aufgenommen werden.</li><li>Nicht aktiviert: Ergebnisse werden nicht nach Magnitude gefiltert. Dies ist die Standardeinstellung.</li></ul><p>Dieser Parameter ist nur verfügbar, wenn das als Eingabe verwendete Veränderungsanalyse-Raster die Ausgabe der LandTrendr-Werkzeuge ist.</p><p>Wenn dieser Parameter aktiviert ist, müssen Sie die Parameter <strong>Minimalmagnitude</strong> und <strong>Maximalmagnitude</strong> für den Filtervorgang festlegen.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Gibt an, dass die Ausgabe auf einen bestimmten Zeitraum von mehreren Jahren beschränkt werden soll.</p><ul><li>Aktiviert: Ergebnisse werden so gefiltert, dass nur Veränderungen innerhalb eines bestimmten Zeitraums von mehreren Jahren in die Ausgabe aufgenommen werden.</li><li>Nicht aktiviert: Ergebnisse werden nicht nach Jahr gefiltert. Dies ist die Standardeinstellung.</li></ul><p>Wenn der Parameter aktiviert ist, müssen Sie die Parameter <strong>Minimalwert</strong> und <strong>Maximalwert</strong> für den Filtervorgang festlegen.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Die Ergebnisse werden nach Startwert gefiltert, sodass nur die Veränderungen eines bestimmten Startwerts in die Ausgabe aufgenommen werden.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Die Ergebnisse werden nach Endwert gefiltert, sodass nur die Veränderungen eines bestimmten Endwerts in die Ausgabe aufgenommen werden.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>Die zu berechnende maximale Anzahl von Veränderungen pro Pixel. Die eingegebene Anzahl entspricht der Anzahl an Bändern im Ausgabe-Raster. Der Standardwert ist 1, wobei ein Änderungsdatum berechnet wird und das Ausgabe-Raster nur ein Band enthält.</p><p>Dieser Parameter ist nicht verfügbar, wenn der Parameter <strong>Art der Änderung</strong> auf <strong>Anzahl an Änderungen</strong> festgelegt wurde.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>Das als Eingabe verwendete Veränderungsanalyse-Raster.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Gibt an, ob das Datum am Anfang oder am Ende eines Veränderungssegments extrahiert werden soll.</p><p>Dieser Parameter ist nur verfügbar, wenn das als Eingabe verwendete Veränderungsanalyse-Raster die Ausgabe der LandTrendr-Werkzeuge ist.</p><ul><li><strong>Anfang des Segments</strong>: Extrahiert das Datum am Anfang eines Veränderungssegments. Dies ist die Standardeinstellung.</li><li><strong>Ende des Segments</strong>: Extrahiert das Datum am Ende eines Veränderungssegments.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>Die Flächeneinheiten für die Ausgabedichtewerte.</p><ul><li>Quadrat-Karteneinheiten: Für das Quadrat der linearen Einheiten des Ausgaberaumbezugs.</li><li>Quadratmeilen: Für Meilen (US).</li><li>Quadratkilometer: Für Kilometer.</li><li>Acres: Für Acres (US).</li><li>Hektar: Für Hektar.</li><li>Quadratmeter: Für Meter.</li><li>Quadratyards: Für Yards (US).</li><li>Quadratfuß: Für Fuß (US).</li><li>Quadratinches: Für Inch (US).</li><li>Quadratzentimeter: Für Zentimeter.</li><li>Quadratmillimeter: Für Millimeter.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>Die Pixelgröße für das Ausgabe-Raster-Dataset. Wenn der Wert <strong>Zellengröße</strong> in den Geoverarbeitungsumgebungen festgelegt wurde, wird der Standardwert verwendet.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>Das Dataset, das die Barrieren definiert.</p><p>Die Barrieren können Feature-Layer von Polylinien- oder Polygon-Features sein.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>Die Eingabepunkt- oder Linien-Features, deren Dichte berechnet werden soll.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Bestimmt, ob der kürzeste Pfad für einen Sphäroiden (geodätisch) oder eine Ebene (planar) verwendet werden soll.</p><ul><li><strong>Planar</strong>: Verwendet planare Entfernungen zwischen den Features. Dies ist die Standardeinstellung.</li><li><strong>Geodätisch</strong>: Verwendet geodätische Entfernungen zwischen den Features. Bei dieser Methode wird die Krümmung des Sphäroiden berücksichtigt, und die Daten in der Nähe der Pole und der internationalen Datumsgrenze werden richtig verarbeitet.</li></ul><p>Es wird empfohlen, für Daten, die in einem nicht für Entfernungsmesswerte geeigneten Koordinatensystem gespeichert sind, und für Analysen, die einen großen geographischen Bereich umfassen, die Methode <strong>Geodätisch</strong> zu verwenden. Beispielsweise sollten Web Mercator oder alle geographischen Koordinatensysteme die Methode <strong>Geodätisch</strong> nutzen.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Legt fest, wofür die Werte im Ausgabe-Raster stehen.</p><ul><li><strong>Dichten</strong>: Die Ausgabewerte stellen den prognostizierten Dichtewert dar. Dies ist die Standardeinstellung.</li><li><strong>Erwartete Anzahl</strong>: Die Ausgabewerte stellen das prognostizierte Aufkommen des Phänomens in jedem Pixel dar. Da der Pixelwert sich auf den angegebenen Wert <strong>Zellengröße</strong> bezieht, ist ein Resampling des ausgegebenen Rasters bei einer anderen Pixelgröße für eine korrekte Angabe des zahlenmäßigen Aufkommens des Phänomens nicht möglich.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Feld, das die Gesamtheitswerte für die einzelnen Features angibt. Der Wert <strong>Feld mit Grundgesamtheit</strong> ist die Anzahl oder Menge, die über die Landschaft verteilt werden soll, um eine kontinuierliche Oberfläche zu erstellen. Werte im <strong>Feld mit Grundgesamtheit</strong> können sowohl Ganzzahl- als auch Gleitkommawerte enthalten.</p><p>Die Optionen und das Standardverhalten des Feldes werden weiter unten nach Priorität aufgeführt.</p><ul><li>Wählen Sie <strong>None</strong> aus, wenn kein Element oder Sonderwert verwendet und jedes Feature einmal gezählt wird.</li><li>Verwenden Sie <strong>Shape</strong>, wenn die Eingabe-Features Z-Werte enthalten.</li><li>Andernfalls lautet das Standardfeld <strong>POPULATION</strong> oder eine gültige Ableitung von Bevölkerung:<ul><li><strong>POPULATIONxxxx</strong>, wobei <strong>xxxx</strong> ein beliebiges gültiges Zeichen darstellen kann, z. B. <strong>POPULATION6</strong>, <strong>POPULATION1974</strong> oder <strong>POPULATIONROADTYPE</strong>.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>Falls keine der oben stehenden Optionen zutreffend ist, lautet die Standardeinstellung <strong>None</strong>.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>Der Suchradius, innerhalb dessen die Dichte berechnet wird. Einheiten basieren auf der linearen Einheit der Projektion.</p><p>Wenn beispielsweise als Einheit Meter verwendet wird und Sie alle Features innerhalb eines Umkreises von einer Meile einschließen möchten, legen Sie einen Suchradius von 1609,344 fest (da 1 Meile = 1609,344 Meter).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Gibt an, ob sich <strong>NoData</strong>-Werte im <strong>Werte-Raster</strong> auf die Ergebnisse der Zone auswirken, in der sie liegen.</p><ul><li><strong>Ja</strong>: Innerhalb einer bestimmten Zone werden nur Pixel verwendet, die im <strong>Werte-Raster</strong> einen Wert aufweisen, um den Ausgabewert für diese Zone zu bestimmen.<strong>NoData</strong>-Pixel im <strong>Werte-Raster</strong> werden bei der Statistikberechnung ignoriert. Dies ist die Standardeinstellung.</li><li><strong>Nein</strong>: Wenn innerhalb einer bestimmten Zone <strong>NoData</strong>-Pixel im <strong>Werte-Raster</strong> vorhanden sind, wird davon ausgegangen, dass nicht genügend Informationen vorhanden sind, um statistische Berechnungen für alle Pixel in dieser Zone durchzuführen. Aus diesem Grund erhält die gesamte Zone im Ausgabe-Raster den Wert <strong>NoData</strong>.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Legt die Perzentil-Interpolationsmethode fest, die verwendet werden soll, wenn die Anzahl der Werte aus dem zu berechnenden Eingabe-Raster gerade ist.</p><ul><li><strong>Automatisch erkennen</strong>: Weist das Eingabe-Werte-Raster einen ganzzahligen Pixeltyp auf, wird die Methode <strong>Nächster</strong> verwendet. Weist das Eingabe-Werte-Raster einen Gleitkomma-Pixeltyp auf, wird die Methode <strong>Linear</strong> verwendet. Dies ist die Standardeinstellung.</li><li><strong>Nächster</strong>: Es wird der dem gewünschten Perzentil am nächsten liegende verfügbare Wert verwendet. In diesem Fall entspricht der Ausgabepixeltyp dem des Eingabe-Werte-Rasters.</li><li><strong>Linear</strong>: Es wird der gewichtete Durchschnitt der beiden umgebenden Werte aus dem gewünschten Perzentil verwendet. In diesem Fall ist der Ausgabepixeltyp \"Gleitkomma\".</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>Das zu berechnende Perzentil. Der Standardwert ist 90 für das 90. Perzentil.</p><p>Die Werte können im Bereich von 0 bis 100 liegen. Grundsätzlich entspricht der Perzentilwert 0 statistisch gesehen dem Minimum und der Perzentilwert 100 dem Maximum. Der Wert 50 ergibt im Wesentlichen dasselbe Ergebnis wie der Medianwert der Statistik.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Gibt an, wie das multidimensionale Eingabe-Wert-Raster verarbeitet wird.</p><ul><li><strong>Aktueller Ausschnitt</strong>: Statistiken werden anhand des aktuellen Ausschnitts eines mehrdimensionalen Datasets berechnet. Dies ist die Standardeinstellung.</li><li><strong>Alle Ausschnitte</strong>: Statistiken werden für alle Dimensionen (z. B. Zeit oder Tiefe) eines mehrdimensionalen Datasets berechnet.</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>Zu berechnender Statistiktyp.</p><ul><li><strong>Mittelwert</strong>: Berechnet den Durchschnitt aller Pixel im <strong>Werte-Raster</strong>, die zur selben Zone wie das Ausgabepixel gehören.</li><li><strong>Mehrheit</strong>: Ermittelt den am häufigsten vorkommenden Wert aus allen Pixeln im <strong>Werte-Raster</strong>, die zur selben Zone gehören wie das Ausgabepixel.</li><li><strong>Maximum</strong>: Ermittelt den größten Wert aus allen Pixeln im <strong>Werte-Raster</strong>, die zur selben Zone gehören wie das Ausgabepixel.</li><li><strong>Medianwert</strong>: Ermittelt den Medianwert aus allen Pixeln im <strong>Werte-Raster</strong>, die zur selben Zone gehören wie das Ausgabepixel.</li><li><strong>Minimum</strong>: Ermittelt den kleinsten Wert aus allen Pixeln im <strong>Werte-Raster</strong>, die zur selben Zone gehören wie das Ausgabepixel.</li><li><strong>Minderheit</strong>: Ermittelt den am seltensten vorkommenden Wert aller Pixel im <strong>Werte-Raster</strong>, die zur selben Zone gehören wie das Ausgabepixel.</li><li><strong>Perzentil</strong>: Berechnet das Perzentil aller Pixel im <strong>Werte-Raster</strong>, die zur selben Zone gehören wie das Ausgabepixel. Standardmäßig wird das 90. Perzentil berechnet. Mit dem Parameter <strong>Perzentilwert</strong> können Sie bestimmen, welches Perzentil berechnet werden soll.</li><li><strong>Bereich</strong>: Berechnet die Differenz zwischen dem größten und kleinsten Wert aus allen Pixeln im <strong>Werte-Raster</strong>, die zur selben Zone gehören wie das Ausgabepixel.</li><li><strong>Standardabweichung</strong>: Berechnet die Standardabweichung aller Pixel im <strong>Werte-Raster</strong>, die zur selben Zone gehören wie das Ausgabepixel.</li><li><strong>Summe</strong>: Berechnet den Gesamtwert aller Pixel im <strong>Werte-Raster</strong>, die zur selben Zone gehören wie das Ausgabepixel.</li><li><strong>Varianz</strong>: Berechnet die Anzahl der Einzelwerte für alle Pixel im <strong>Werte-Raster</strong>, die zur selben Zone gehören wie das Ausgabepixel.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Raster, das die Werte für die Berechnung der Statistik enthält.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>Feld mit den Werten, die jede Zone definieren. Es kann sich dabei um ein Feld mit einem ganzzahligen Wert oder einer Zeichenfolge aus dem Zonen-Raster handeln.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>Das Dataset, das die Zonen definiert. Die Zonen können durch ein Integer-Raster festgelegt werden.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>Gibt an, wie der Statistiktyp berechnet wird.</p><ul><li><strong>Arithmetisch</strong>: Berechnet arithmetische Statistiken. Dies ist die Standardeinstellung.</li><li><strong>Kreisförmig</strong>: Berechnet zirkuläre Statistiken, die für zyklische Größen, wie etwa die Himmelsrichtung in Grad, Tageszeiten oder Bruchteile von reellen Zahlen, geeignet sind.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>Der höchstmögliche Wert (Maximum) in den zyklischen Daten. Es ist eine positive Zahl mit dem Standardwert 360. Dieser Wert stellt auch dieselbe Größe als kleinstmöglichen Wert (Minimum) dar.</p><p>Der Parameter ist nur anwendbar, wenn zirkuläre Statistiken berechnet werden.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>Das Eingabe-Raster, für das die Grenze zwischen Zonen geglättet wird.</p><p>Die Eingabe muss den Typ \"Ganzzahl\" aufweisen.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Gibt an, wie oft der Glättungsprozess stattfinden soll: zweimal oder einmal.</p><ul><li><p><strong>Aktiviert</strong>: Der Ausdehnungs- und Verkleinerungsvorgang wird zweimal durchgeführt. Beim ersten Mal wird der Vorgang gemäß dem angegebenen Sortiertyp ausgeführt. Anschließend wird mit umgekehrter Priorität ein weiterer Ausdehnungs- und Verkleinerungsvorgang ausgeführt. Dies ist die Standardeinstellung.</p></li><li><p><strong>Nicht aktiviert</strong>: Führt den Ausdehnungs- und Verkleinerungsvorgang einmal gemäß dem Sortiertyp aus.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Gibt den Typ der Sortierung an, der im Glättungsprozess verwendet werden soll. Die Sortierung bestimmt die Priorität, durch die Zellen sich in ihre Nachbarn ausdehnen können.</p><p>Die Sortierung kann auf der Grundlage des Zonenwertes oder der Zonenfläche erfolgen.</p><ul><li><p><strong>Nicht sortieren</strong>: Zonen werden nicht nach Größe sortiert. Zonen mit größeren Werten haben für die Ausdehnung in Zonen mit kleineren Werten in der geglätteten Ausgabe eine höhere Priorität. Dies ist die Standardeinstellung.</p></li><li><p><strong>Absteigend</strong>: Sortiert Zonen in absteigender Reihenfolge der Größe nach. Zonen mit größeren Gesamtflächen haben für die Ausdehnung in Zonen mit kleineren Gesamtflächen eine höhere Priorität. Durch diese Option wird die Verbreitung von Zellen aus kleineren Zonen in der geglätteten Ausgabe eliminiert oder reduziert.</p></li><li><p><strong>Aufsteigend</strong>: Sortiert Zonen in aufsteigender Reihenfolge der Größe nach. Zonen mit kleineren Gesamtflächen haben für die Ausdehnung in Zonen mit größeren Gesamtflächen eine höhere Priorität. Durch diese Option wird die Verbreitung von Zellen aus kleineren Zonen in der geglätteten Ausgabe beibehalten oder erhöht.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>Die Aggregationsdimension. Dies ist die Dimension, an der entlang die Variablen aggregiert werden.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Gibt die Methode an, mit der die multidimensionalen Eingabedaten vor Durchführung der Aggregation gefiltert werden sollen.</p><ul><li><strong>Alle</strong>: Für jede Dimension wird der gesamte Bereich verwendet. Dies ist die Standardeinstellung.</li><li><strong>Nach Werten</strong>: Die Dimension wird anhand eines Dimensionswertes oder einer Werteliste aufgeteilt.</li><li><strong>Nach Bereichen</strong>: Die Dimension wird anhand eines Bereichs oder einer Liste von Bereichen aufgeteilt.</li><li><strong>Nach Iteration</strong>: Die Dimension wird anhand einer angegebenen Intervallgröße aufgeteilt.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Mit den Iterationsdefinitions-Parametern können Sie die Dimensionswerte definieren, die zum Filtern der multidimensionalen Eingabedaten für die Analyse verwendet werden sollen, wenn der Parameter <strong>Dimensionsdefinition</strong> auf <strong>Nach Iteration</strong> festgelegt ist.</p><ul><li><strong>Dimension</strong>: Die zum Filtern zu verwendende Dimension.</li><li><strong>Beginn der ersten Iteration</strong>: Der Beginn des ersten Intervalls. Die Iteration durch das Dataset erfolgt anhand dieses Intervalls.</li><li><strong>Ende der ersten Iteration</strong>: Das Ende des ersten Intervalls. Die Iteration durch das Dataset erfolgt anhand dieses Intervalls.</li><li><strong>Schritt</strong>: Die Häufigkeit, in der die Daten aufgeteilt werden.</li><li><strong>Einheit</strong>: Die Iterationseinheit.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Gibt das Schlüsselwortintervall für die Aggregation entlang einer Dimension an.</p><p>Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Typ</strong> die Option <strong>Intervallschlüsselwort</strong> festgelegt wurde.</p><ul><li><strong>Stündlich</strong>: Die Datenwerte werden in stündliche Zeitintervalle aggregiert, und das Ergebnis enthält jede Stunde der Zeitserie. Dies ist die Standardeinstellung.</li><li><strong>Täglich</strong>: Die Datenwerte werden in tägliche Zeitintervalle aggregiert, und das Ergebnis enthält jeden Tag der Zeitserie.</li><li><strong>Wöchentlich</strong>: Die Datenwerte werden in wöchentliche Zeitintervalle aggregiert, und das Ergebnis enthält jede Woche der Zeitserie.</li><li><strong>Zehntägig</strong>: Die Datenwerte werden in 3 Zeiträume von je 10 Tagen aggregiert. Der letzte Zeitraum kann mehr oder weniger als 10 Tage umfassen. Es werden 3 Zeitintervalle für jeden Monat ausgegeben.</li><li><strong>Fünftägig</strong>: Die Datenwerte werden in 6 Zeiträume von je 5 Tagen aggregiert. Der letzte Zeitraum kann mehr oder weniger als 5 Tage umfassen. Es werden 6 Zeitintervalle für jeden Monat ausgegeben.</li><li><strong>Monatlich</strong>: Die Datenwerte werden in monatliche Zeitintervalle aggregiert, und das Ergebnis enthält jeden Monat der Zeitserie.</li><li><strong>Vierteljährlich</strong>: Die Datenwerte werden in vierteljährliche Zeitintervalle aggregiert, und das Ergebnis enthält jedes Quartal der Zeitserie.</li><li><strong>Jährlich</strong>: Die Datenwerte werden in jährliche Zeitintervalle aggregiert, und das Ergebnis enthält jedes Jahr der Zeitserie.</li><li><strong>Täglich wiederkehrend</strong>: Die Datenwerte werden in tägliche Zeitintervalle aggregiert, und das Ergebnis enthält einen aggregierten Wert pro julianischem Tag. Es werden maximal 366 Tages-Zeitintervalle ausgegeben.</li><li><strong>Wöchentlich wiederkehrend</strong>: Die Datenwerte werden in wöchentliche Zeitintervalle aggregiert, und das Ergebnis enthält einen aggregierten Wert pro Woche. Es werden maximal 53 Wochen-Zeitintervalle ausgegeben.</li><li><strong>Monatlich wiederkehrend</strong>: Die Datenwerte werden in monatliche Zeitintervalle aggregiert, und das Ergebnis enthält einen aggregierten Wert pro Monat. Es werden maximal 12 Monats-Zeitintervalle ausgegeben.</li><li><strong>Quartalsweise wiederkehrend</strong>: Die Datenwerte werden in vierteljährliche Zeitintervalle aggregiert, und das Ergebnis enthält einen aggregierten Wert pro Quartal. Es werden maximal 4 Quartals-Zeitintervalle ausgegeben.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Gibt die mathematische Methode an, nach der die aggregierten Abschnitte in einem Intervall kombiniert werden.</p><ul><li><strong>Mehrheit</strong>: Der am häufigsten vorkommende Pixelwert wird in allen Abschnitten im Intervall berechnet.</li><li><strong>Maximum</strong>: Der Maximalwert eines Pixels wird für alle Abschnitte im Intervall berechnet.</li><li><strong>Mittelwert</strong>: Der Mittelwert der Werte eines Pixels wird für alle Abschnitte im Intervall berechnet. Dies ist die Standardeinstellung.</li><li><strong>Medianwert</strong>: Der Medianwert eines Pixels wird für alle Abschnitte im Intervall berechnet.</li><li><strong>Minimum</strong>: Der Minimalwert eines Pixels wird für alle Abschnitte im Intervall berechnet.</li><li><strong>Minderheit</strong>: Der am seltensten vorkommende Pixelwert wird in allen Abschnitten im Intervall berechnet.</li><li><strong>Bereich</strong>: Der Wertebereich eines Pixels wird für alle Abschnitte im Intervall berechnet.</li><li><strong>Standardabweichung</strong>: Die Standardabweichung der Werte eines Pixels wird für alle Abschnitte im Intervall berechnet.</li><li><strong>Summe</strong>: Die Summe der Werte eines Pixels wird für alle Abschnitte im Intervall berechnet.</li><li><strong>Varianz</strong>: Die Anzahl der Einzelwerte eines Pixels wird für alle Abschnitte im Intervall berechnet.</li></ul><p>Zu allen Optionen gibt es zudem eine Entsprechung mit der Option \"NoData ignorieren\". Damit wird die mathematische Operation an allen gültigen Pixeln entlang der Dimension durchgeführt, während alle NoData-Pixel ignoriert werden.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>Wertegruppen werden anhand der in einer Tabelle angegebenen Intervallbereiche aggregiert. Mit den Minimal- und Maximalwerten geben Sie den einzubeziehenden Bereich an.</p><p>Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Typ</strong> die Option <strong>Intervallbereiche</strong> festgelegt wurde.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>Das als Eingabe verwendete multidimensionale Raster.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Gibt das Dimensionsintervall an, für das die Daten aggregiert werden.</p><ul><li><strong>Alle</strong>: Die Variablendaten aller Abschnitte werden aggregiert. Dies ist die Standardeinstellung.</li><li><strong>Intervallschlüsselwort</strong>: Die Variablendaten werden in einem allgemein bekannten Intervall aggregiert.</li><li><strong>Intervallwert</strong>: Die Variablendaten werden in einem benutzerdefinierten Intervall und in einer benutzerdefinierten Einheit aggregiert.</li><li><strong>Intervallbereiche</strong>: Die Variablendaten werden zwischen bestimmten Wert- oder Datumspaaren aggregiert.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>Die Größe des Intervalls, in dem aggregiert wird.</p><p>Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Typ</strong> die Option <strong>Intervallwert</strong> festgelegt wurde.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>Die Dimensionswerte, die zum Filtern der multidimensionalen Eingabedaten für die Analyse verwendet werden sollen. Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Werten</strong> festgelegt wurde.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>Eine oder mehrere Variablen, die entlang der angegebenen Dimension aggregiert werden.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>Die als Eingabe verwendete Esri Regressionsdefinitionsdatei (<strong>.ecd</strong>), die die Statistiken und Informationen für das Dataset, das Regressionsmodell und die ausgewählten Attribute enthält.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>Das Raster-Dataset oder die Datasets, die als Einflussvariablen verwendet werden sollen. Dies kann ein Einzelband-Raster, ein Multiband-Raster, ein multidimensionales Raster, ein Mosaik-Dataset oder eine Raster-Sammlung sein.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>Der Typ der Statistikberechnung, der ausgeführt werden soll.</p><p>Die verfügbaren Statistiken sind: <strong>Mehrheit</strong>, <strong>Maximum</strong>, <strong>Mittelwert</strong>, <strong>Medianwert</strong>, <strong>Minimum</strong>, <strong>Minderheit</strong>, <strong>Perzentil</strong>, <strong>Bereich</strong>, <strong>Standardabweichung</strong>, <strong>Summe</strong> und <strong>Varianz</strong>.</p><p>Der Standardwert ist <strong>Mittelwert</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>Pixeln, die nicht in der Colormap enthalten sind, werden nach dem Zufallsprinzip Farben zugewiesen.</p><ul><li>Deaktiviert: Nicht in der Colormap enthaltenen Pixeln wird keine Farbe zugewiesen. Dies ist die Standardeinstellung.</li><li>Aktiviert: Nicht in der Colormap enthaltenen Pixeln wird eine Farbe zugewiesen.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>Wenn der Gram-Schmidt-Algorithmus ausgewählt wird, können Sie auch den Sensor angeben, von dem die Multiband-Raster-Eingabe erfasst wurde. Durch die Auswahl des Sensortyps werden die entsprechenden Bandgewichtungen festgelegt.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>Die Anzahl der vorausgehenden oder höheren Ausschnitte, die im definierten Fenster berücksichtigt werden sollen. Der Wert muss ein positiver Ganzzahlwert zwischen 1 und 100 sein. Der Standardwert ist 1.</p><p>Als Einheit für diesen Parameter wird \"Ausschnitt\" verwendet.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>Der Wert, der verwendet wird, um einen linearen Wert auf den Bereich eines bestimmten zirkulären Mittelwertes zu runden.</p><p>Der Wert muss positiv sein. Der Standardwert beträgt 360 Grad.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>Der Name der Dimension, an der das Fenster entlanggleitet.</p><p>Der Standardwert ist die erste Dimension im multidimensionalen Eingabe-Raster, die nicht XY ist.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>Die Anzahl der nachfolgenden oder niedrigeren Ausschnitte, die im definierten Fenster berücksichtigt werden sollen. Der Wert muss ein positiver Ganzzahlwert zwischen 1 und 100 sein. Der Standardwert ist 1.</p><p>Als Einheit für diesen Parameter wird \"Ausschnitt\" verwendet.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>Das Eingabe-Raster muss ein multidimensionales Raster im Cloud-Raster-Format (<strong>CRF</strong>-Datei) sein.</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>Gibt an, wie NoData-Werte bei der Statistikberechnung behandelt werden.</p><ul><li><strong>Daten</strong>: NoData-Werte in der Werteingabe werden in den Ergebnissen des definierten Fensters, in dem sie sich befinden, ignoriert. Dies ist die Standardeinstellung.</li><li><strong>NoData</strong>: Ausgabewerte sind NoData-Werte, wenn in der Eingabe im definierten Fenster NoData-Werte vorhanden sind.</li><li><strong>NoData-Werte füllen</strong>: NoData-Zellenwerte werden durch die ausgewählte Statistik im definierten Fenster ersetzt.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Gibt die Interpolationsmethode an, die verwendet wird, wenn der Perzentilwert zwischen zwei Zellenwerten liegt.</p><ul><li><strong>Automatisch erkennen</strong>: Wenn das Eingabe-Raster einen ganzzahligen Pixeltyp aufweist, wird die Methode <strong>Nächster Nachbar</strong> verwendet. Weist das Eingabe-Werte-Raster einen Gleitkomma-Pixeltyp auf, wird die Methode <strong>Linear</strong> verwendet. Dies ist die Standardeinstellung.</li><li><strong>Nächster</strong>: Es wird der dem Perzentil am nächsten liegende verfügbare Wert verwendet. In diesem Fall entspricht der Ausgabepixeltyp dem des Eingabe-Werte-Rasters.</li><li><strong>Linear</strong>: Es wird der gewichtete Durchschnitt der beiden umgebenden Werte aus dem Perzentil verwendet. In diesem Fall ist der Ausgabepixeltyp \"Gleitkomma\".</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>Das Perzentil, das berechnet wird, wenn <strong>Perzentil</strong> als Statistiktyp ausgewählt ist. Der Standardwert ist 90 für das 90. Perzentil.</p><p>Die Werte können im Bereich von 0 bis 100 liegen. Grundsätzlich entspricht der Perzentilwert 0 statistisch gesehen dem Minimum und der Perzentilwert 100 dem Maximum, mit der Ausnahme, dass das Ergebnis ein Gleitkommawert ist. Der Wert 50 ergibt dasselbe Ergebnis wie der Statistiktyp \"Medianwert\".</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Gibt den zu berechnenden Statistiktyp an.</p><p></p><ul><li><strong>Mittelwert</strong>: Der Mittelwert (Durchschnittswert) der Zellen in dem definierten Fenster wird berechnet. Dies ist die Standardeinstellun.</li><li><strong>Zirkulärer Mittelwert</strong>: Der zirkuläre Mittelwert der Zellen in dem definierten Fenster wird berechnet. Wenn dieser Statistiktyp ausgewählt ist, wird der Parameter <strong>Umbruchwert für Verteilung auf Einheitskreis</strong> verfügbar.</li><li><strong>Mehrheit</strong>: Die Mehrheit (der am häufigsten auftretende Wert) in dem definierten Fenster wird identifiziert.</li><li><strong>Maximum</strong>: Der Maximalwert (der höchste Wert) in dem definierten Fenster wird identifiziert.</li><li><strong>Medianwert</strong>: Der Medianwert der Zellen innerhalb der Nachbarschaft wird identifiziert.</li><li><strong>Minimum</strong>: Der Minimalwert (der kleinste Wert) der Zellen innerhalb der Nachbarschaft wird identifiziert.</li><li><strong>Perzentil</strong>: Ein Perzentil der Zellen innerhalb der Nachbarschaft wird berechnet. Wenn dieser Statistiktyp ausgewählt ist, werden die Parameter <strong>Perzentilwert</strong> und <strong>Perzentil-Interpolationstyp</strong> verfügbar. Verwenden Sie diese neuen Parameter, um das zu berechnende Perzentil festzulegen bzw. den zu verwendenden Interpolationstyp auszuwählen.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>Die für die Interpolation verwendete Dimension.</p><p>Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Intervall</strong> festgelegt wurde.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Gibt die Methode an, mit der die multidimensionalen Eingabedaten vor Durchführung der Interpolation gefiltert werden sollen.</p><ul><li><strong>Nach Werten</strong>: Die Dimension wird anhand eines Dimensionswerts oder eine Werteliste aufgeteilt.</li><li><strong>Nach Intervall</strong>: Die Dimension wird anhand eines Bereichs oder einer Liste von Bereichen aufgeteilt.</li><li><strong>Nach Ziel-Raster</strong>: Die Dimension wird mithilfe eines bestimmten multidimensionalen Ziel-Rasters aufgeteilt.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>Das Ende des Intervalls, das zum Durchlaufen des Datasets verwendet wird.</p><p>Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Intervall</strong> festgelegt wurde.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Gibt an, ob NoData-Werte in der Analyse ignoriert werden.</p><ul><li>Deaktiviert: Wenn in benachbarten Ausschnitten NoData-Werte vorhanden sind, wird bei der Analyse \"NoData\" zurückgegeben. Dies ist die Standardeinstellung.</li><li>Aktiviert: Für die Analyse werden nur Ausschnitte mit gültigen Pixeln verwendet, und NoData-Ausschnitte werden ignoriert.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Gibt die Methode an, die zum Interpolieren des Rasters verwendet wird.</p><ul><li><strong>Linear</strong>: Die Ausgabe wird mithilfe der benachbarten Ausschnitte linear interpoliert. Dies ist die Standardeinstellung.</li><li><strong>Nächster Nachbar</strong>: Für die Ausgabe wird der nächstgelegene Ausschnitt verwendet.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>Das als Eingabe verwendete multidimensionale Raster.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>Der Beginn des Intervalls, das zum Durchlaufen des Datasets verwendet wird.</p><p>Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Intervall</strong> festgelegt wurde.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>Die Häufigkeit, in der die Daten interpoliert werden.</p><p>Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Intervall</strong> festgelegt wurde.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>Das mit der Dimensionsdefinition angegebene Ziel-Raster.</p><p>Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Ziel-Raster</strong> festgelegt wurde.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>Die Intervalleinheit.</p><p>Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Intervall</strong> festgelegt wurde.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>Die Dimensionswerte, die zum Filtern der multidimensionalen Eingabedaten für die Analyse verwendet werden sollen.</p><p>Dieser Parameter ist erforderlich, wenn für den Parameter <strong>Dimensionsdefinition</strong> die Option <strong>Nach Werten</strong> festgelegt wurde.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>Ein oder mehrere Variablen, die durch die Dimensionsdefinition interpoliert werden.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Gibt an, ob die Terrain-Abplattung der Ausgabe mit <strong>Sigma-Nought</strong> oder <strong>Gamma-Nought</strong> durchgeführt wird.</p><ul><li><strong>Gamma-Nought</strong>: Die Beta-Nought-Rückstreuung wird mit der Flächeneinheit einer Ebene, die lokal tangential zum DEM verläuft, normalisiert. Dies wird allgemein als lokaler Einfallswinkel bezeichnet. Dies ist die Standardeinstellung.</li><li><strong>Sigma-Nought</strong>: Die Beta-Nought-Rückstreuung wird mit einem DEM normalisiert, um die Fläche zu berechnen.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>Das Eingabe-DEM.</p><p>Anhand des DEM wird die lokale beleuchtete Fläche geschätzt.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Gibt an, ob das vertikale Bezugssystem des Eingabe-DEM in ellipsoidförmige Höhe transformiert wird. Die meisten Höhen-Datasets werden auf orthometrische Höhe über dem Meeresspiegel referenziert. In diesen Fällen ist daher für die Konvertierung in ellipsoidförmige Höhe eine Korrektur erforderlich.</p><ul><li>Aktiviert: Eine Geoid-Korrektur wird durchgeführt, um orthometrische Höhe in ellipsoidförmige Höhe (basierend auf dem Geoid EGM96) zu konvertieren. Dies ist die Standardeinstellung.</li><li>Deaktiviert: Es wird keine Geoid-Korrektur vorgenommen. Verwenden Sie diese Option nur, wenn das DEM in ellipsoidförmiger Höhe ausgedrückt ist.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>Die Eingaberadardaten.</p><p>Dieses Raster muss zuerst radiometrisch auf Beta-Nought kalibriert werden.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>Die Berechnung, die dem dritten Band zugeordnet ist.</p><p>Ein Bandname, eine Band-ID oder ein algebraischer Ausdruck unter Verwendung der Bänder.</p><p>Unterstützt werden unäre Operatoren: Plus (+), Minus (-), Multiplizieren (*) und Dividieren (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>Die Berechnung, die dem zweiten Band zugeordnet ist.</p><p>Ein Bandname, eine Band-ID oder ein algebraischer Ausdruck unter Verwendung der Bänder.</p><p>Unterstützt werden unäre Operatoren: Plus (+), Minus (-), Multiplizieren (*) und Dividieren (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>Die Eingabe-Multiband-Raster-Daten.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Gibt die Methode an, die zum Extrahieren von Bändern verwendet wird.</p><ul><li>Bandnamen: Der Bandname, der das Wellenlängenintervall im elektromagnetischen Spektrum (z. B. Rot, Nahinfrarot oder Wärmeinfrarot) bzw. die Polarisierung (z. B. VH, VV, HH oder HV) darstellt, wird verwendet. Dies ist die Standardeinstellung.</li><li>Band-IDs: Die Bandnummer (z. B. B1, B2 oder B3) wird verwendet.</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>Die Berechnung, die dem ersten Band zugeordnet ist.</p><p>Ein Bandname, eine Band-ID oder ein algebraischer Ausdruck unter Verwendung der Bänder.</p><p>Unterstützt werden unäre Operatoren: Plus (+), Minus (-), Multiplizieren (*) und Dividieren (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Wählen Sie den Typ der Oberflächenfunktion aus, die um die Zielzelle angewendet wird.</p><ul><li>Quadratisch: Eine quadratische Oberflächenfunktion wird auf die benachbarten Zellen angewendet. Dies ist der Standardtyp.</li><li>Biquadratisch: Eine biquadratische Oberflächenfunktion wird auf die benachbarten Zellen angewendet.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>Die Ausgabe wird über diese Entfernung ab dem Mittelpunkt der Zielzelle berechnet. Sie bestimmt die Nachbarschaftsgröße. Der Standardwert ist die Eingabe-Raster-Zellengröße. Das Ergebnis ist eine 3 x 3-Nachbarschaft.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>Die Maßeinheiten (Grad oder Prozent), die für das Ausgabe-Neigungs-Raster verwendet werden. Dieser Parameter ist nur aktiv, wenn<strong>Parametertyp</strong>auf<strong>Neigung</strong> festgelegt ist.</p><ul><li>Grad: Der Neigungswinkel wird in Grad berechnet. Dies ist die Standardeinstellung.</li><li>Prozentanstieg: Der Neigungswinkel wird als Prozentanstieg berechnet, der auch als prozentuale Neigung bezeichnet wird.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Gibt den Parametertyp der Ausgabe-Oberfläche an, der berechnet wird.</p><ul><li>Neigung: Die Änderungsrate der Höhe wird berechnet. Dies ist die Standardeinstellung.</li><li>Ausrichtung: Die Neigungsrichtung der maximalen Änderungsrate wird für jede Zelle berechnet.</li><li>Mittlere Krümmung: Die Gesamtkrümmung der Oberfläche wird gemessen. Sie wird als Mittelwert der minimalen und maximalen Krümmung berechnet. Diese Krümmung beschreibt die intrinsische Konvexität oder Konkavität der Oberfläche unabhängig von der Richtung oder den Gravitationskräften.</li><li>Tangentialkrümmung (Normalkontur): Die geometrische Normalkrümmung senkrecht zur Neigungslinie, tangential zur Konturlinie wird gemessen. Diese Krümmung wird i. d. R. angewendet, um die Konvergenz oder Divergenz eines Flusses auf der Oberfläche zu beschreiben.</li><li>Profilkrümmung (Normalneigungslinie): Die geometrische Normalkrümmung entlang der Neigungslinie wird gemessen. Diese Krümmung wird i. d. R. angewendet, um die Fließbeschleunigung oder -verlangsamung auf der Oberfläche zu beschreiben.</li><li>Plankrümmung (projizierte Kontur): Die Krümmung entlang der Konturlinien wird gemessen.</li><li>Geodätische Torsion der Kontur: Die Änderungsrate des Neigungswinkels entlang der Konturlinien wird gemessen.</li><li>Gauß'sche Krümmung: Die Gesamtkrümmung der Oberfläche wird gemessen. Sie wird als Produkt der minimalen und maximalen Krümmung berechnet.</li><li>Casorati-Krümmung: Die allgemeine Krümmung der Oberfläche wird gemessen. Sie kann Null oder eine beliebige positive Zahl sein.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Legt fest, ob geodätische Azimute projiziert werden, um die durch den Ausgabe-Raumbezug verursachte Winkelverzerrung zu korrigieren. Dieser Parameter ist nur aktiv, wenn <strong>Parametertyp</strong>auf<strong>Ausrichtung</strong> festgelegt ist.</p><ul><li>Deaktiviert: Geodätische Azimute werden nicht projiziert. Dies ist die Standardeinstellung.</li><li>Aktiviert: Geodätische Azimute werden projiziert.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>Eingabe-Oberflächen-Raster. Kann ein Ganzzahl- oder Gleitkomma-Raster sein.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Gibt an, ob sich die Nachbarschaftsentfernung mit Landschaftsänderungen (adaptiv) ändert. Die maximale Entfernung wird durch die Nachbarschaftsentfernung bestimmt. Die minimale Entfernung ist die Eingabe-Raster-Zellengröße.</p><ul><li>Deaktiviert: An allen Positionen wird eine einzelne (feste) Nachbarschaftsentfernung verwendet. Dies ist die Standardeinstellung.</li><li>Aktiviert: An allen Positionen wird eine adaptive Nachbarschaftsentfernung verwendet.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Gibt an, ob die Ausrichtung von einem Punkt am Äquator oder vom Nordpol gemessen wird. Dieser Parameter ist nur aktiv, wenn<strong>Parametertyp</strong>auf<strong>Ausrichtung</strong> festgelegt ist.</p><ul><li>Deaktiviert: Die Ausrichtung wird vom Nordpol gemessen. Dies ist die Standardeinstellung.</li><li>Aktiviert: Die Ausrichtung wird von einem Punkt am Äquator gemessen.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>Die lineare Einheit vertikaler Z-Werte.</p><p>Sie wird durch ein vertikales Koordinatensystem definiert, sofern eines vorhanden ist. Falls kein vertikales Koordinatensystem vorhanden ist, sollte die Z-Einheit mithilfe der Einheitenliste festgelegt werden, um eine korrekte geodätische Berechnung sicherzustellen.</p><ul><li>Zoll: Die lineare Einheit ist Zoll.</li><li>Fuß: Die lineare Einheit ist Fuß.</li><li>Yard: Die lineare Einheit ist Yard.</li><li>Meilen (US): Die lineare Einheit ist Meilen.</li><li>Seemeile: Die lineare Einheit ist Seemeilen.</li><li>Millimeter: Die lineare Einheit ist Millimeter.</li><li>Zentimeter: Die lineare Einheit ist Zentimeter.</li><li>Meter: Die lineare Einheit ist Meter. Dies ist die Standardeinstellung.</li><li>Kilometer: Die lineare Einheit ist Kilometer.</li><li>Dezimeter: Die lineare Einheit ist Dezimeter.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>Ein Raster, das die Positionen für die Analyse angibt.</p><p>Das Raster kann ein Integer- oder Gleitkomma-Raster sein.</p><p>Alle Zellen mit gültigem Wert, einschließlich Null, bilden die Maske. Zellen, die in der Maskeneingabe einen NoData-Wert aufweisen, weisen in der Ausgabe ebenfalls einen NoData-Wert auf.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Die Zellengröße für das Ausgabe-Raster auswählen. Wenn alle Eingabe-Zellengrößen identisch sind, führen alle Optionen zum selben Ergebnis.</p><ul><li>Erste(r) von: Die erste Zellengröße der Eingabe-Raster wird verwendet.</li><li>Min. von: Die kleinste Zellengröße aller Eingabe-Raster wird verwendet.</li><li>Max. von: Die größte Zellengröße aller Eingabe-Raster wird verwendet. Dies ist die Standardeinstellung.</li><li>Mittelwert von: Die mittlere Zellengröße aller Eingabe-Raster wird verwendet.</li><li>Letzte(r) von: Die letzte Zellengröße der Eingabe-Raster wird verwendet.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>Gibt den Konvergenzwert zwischen zwei aufeinanderfolgenden Iterationen an. Wenn Epsilon weniger als oder gleich dem angegebenen Wert ist, wird die Iteration beendet und das Ergebnis der letzten Iteration verwendet.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Die Ausdehnung für das Ausgabe-Raster auswählen:</p><ul><li><p>Erste(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des ersten Eingabe-Rasters festgelegt.</p></li><li>Schnittpunkt von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung der überlappenden Pixel festgelegt. Dies ist die Standardeinstellung.</li><li>Vereinigung von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung aller Raster festgelegt.</li><li>Letzte(r) von: Die Verarbeitungsausdehnung wird anhand der Ausdehnung des letzten Eingabe-Rasters festgelegt.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Gibt die maximale Anzahl der zu durchlaufenden Iterationen an. Die Berechnung wird unabhängig von der Einstellung <strong>Epsilon</strong> beendet, sobald dieser Wert erreicht wird.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>Die Eingabe-Multiband-Raster.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>Das Eingabe-Raster, das die akkumulative Kostenentfernung von der ersten Quelle darstellt.</p><p>Es muss sich um eine akkumulierte Kostenentfernungsausgabe aus der Funktion <strong>Entfernungsakkumulation</strong> oder <strong>Entfernungsallokation</strong> handeln.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>Das Eingabe-Raster, das die akkumulative Kostenentfernung von der zweiten Quelle darstellt.</p><p>Es muss sich um eine akkumulierte Kostenentfernungsausgabe aus der Funktion <strong>Entfernungsakkumulation</strong> oder <strong>Entfernungsallokation</strong> handeln.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>Das Eingabe-Gegenrichtungs-Raster von der ersten Quelle.</p><p>Dies ist ein Raster-Dataset, das die Richtung der nächsten Zelle entlang des kostengünstigsten Pfades zurück zur ersten Quelle angibt. Dies ist eine Ausgabe aus der Funktion <strong>Entfernungsakkumulation</strong> oder <strong>Entfernungsallokation</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>Das Eingabe-Gegenrichtungs-Raster von der zweiten Quelle.</p><p>Dies ist ein Raster-Dataset, das die Richtung der nächsten Zelle entlang des kostengünstigsten Pfades zurück zur Quelle angibt. Dies ist eine Ausgabe aus der Funktion <strong>Entfernungsakkumulation</strong> oder <strong>Entfernungsallokation</strong>.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>Ein prozentualer Schwellenwert oder ein Schwellenwert der akkumulativen Kosten, der festlegt, ob eine bestimmte Zelle in das Ausgabe-Korridor-Raster aufgenommen wird.</p><p>Wenn der Parameter <strong>Schwellenwertmethode</strong> auf <strong>Prozentsatz der Minimalkosten</strong> festgelegt ist, kennzeichnet der angegebene Wert die anzuwendende prozentuale Zunahme vom Minimalwert der summierten Raster für die akkumulative Kostenentfernung. Wenn der Parameter <strong>Schwellenwertmethode</strong> auf <strong>Akkumulative Kosten</strong> festgelegt ist, kennzeichnet der Wert, dass Zellen mit summierten akkumulativen Kosten gleich oder unterhalb des Wertes in den Korridor aufgenommen werden.</p><p>Dieser Parameter ist nur aktiv, wenn der Parameter <strong>Schwellenwertmethode</strong> auf <strong>Prozentsatz der Minimalkosten</strong> oder <strong>Akkumulative Kosten</strong> festgelegt ist.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Gibt an, wie der Schwellenwert definiert wird.</p><p></p><ul><li><strong>Kein Schwellenwert</strong>: Es wird kein Schwellenwert angewendet, und der resultierende Korridor deckt die volle Ausdehnung des Eingabe-Rasters ab. Dies ist die Standardeinstellung.</li><li><strong>Prozentsatz der Minimalkosten</strong>: Der Schwellenwert wird als Prozentsatz des Minimalwertes der summierten Raster für die akkumulative Kostenentfernung definiert.</li><li><strong>Akkumulative Kosten</strong>: Der Schwellenwert wird in Einheiten der akkumulativen Kostenentfernung definiert.</li></ul>"
};
const helpTexts_de = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_de);


//# sourceMappingURL=help-texts.de-f549d45d.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,