"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-01fbb1"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-color-picker_5.entry.js":
/*!************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-color-picker_5.entry.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rfx_color_picker: () => (/* binding */ RFxColorPicker),
/* harmony export */   rfx_dte_raster_input: () => (/* binding */ RFxRasterInput),
/* harmony export */   rfx_dtex_common_select: () => (/* binding */ RFxCommonSelect),
/* harmony export */   rfx_dtex_field_select: () => (/* binding */ RFxFieldSelect),
/* harmony export */   rfx_grid: () => (/* binding */ RFxGrid)
/* harmony export */ });
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui-utils-928a4096.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js");
/* harmony import */ var _arcgis_core_identity_IdentityManager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @arcgis/core/identity/IdentityManager.js */ "@arcgis/core/identity/IdentityManager.js");
/* harmony import */ var _arcgis_core_core_urlUtils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @arcgis/core/core/urlUtils.js */ "@arcgis/core/core/urlUtils.js");
/* harmony import */ var _arcgis_core_layers_Layer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @arcgis/core/layers/Layer.js */ "@arcgis/core/layers/Layer.js");
/* harmony import */ var _arcgis_core_layers_ImageryLayer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @arcgis/core/layers/ImageryLayer.js */ "@arcgis/core/layers/ImageryLayer.js");
/* harmony import */ var _arcgis_core_smartMapping_raster_renderers_stretch_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @arcgis/core/smartMapping/raster/renderers/stretch.js */ "@arcgis/core/smartMapping/raster/renderers/stretch.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
/* harmony import */ var _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./rfx-args-helper-ab401543.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-args-helper-ab401543.js");
/* harmony import */ var _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./interfaces-d0c68944.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/interfaces-d0c68944.js");
/* harmony import */ var _layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./layer-helper-3867eef7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/layer-helper-3867eef7.js");
/* harmony import */ var _common_fda1462e_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./common-fda1462e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-fda1462e.js");
/* harmony import */ var _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./_getTag-96af029d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_getTag-96af029d.js");
/* harmony import */ var _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./resources-27c66f5c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/resources-27c66f5c.js");
/* harmony import */ var _functions_f1f2dffd_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./functions-f1f2dffd.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/functions-f1f2dffd.js");
/* harmony import */ var _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./_Uint8Array-68e1e3f9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_Uint8Array-68e1e3f9.js");


























const RFxColorPicker = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxColorPickerValueChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxColorPickerValueChange", 7);
        /**
         * called on color swatch click.
         * creates a popover element with color picker
         * @param e
         */
        this.onColorSwatchClick = (e) => {
            const color = e.target.value;
            this.popoverElememt.open = false;
            this.value = new _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_1__["default"](color).toRgba();
            this.rfxColorPickerValueChange.emit({ value: this.value });
        };
        this.value = [0, 0, 0, 255];
    }
    /**
     * Public method
     * @returns HTMLRfxColorPickerElement
     */
    render() {
        const color = new _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_1__["default"](this.value).toHex();
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-color-picker-swatch", { active: false, color: color, id: "color-picker-swatch", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.U.Scale,
            // onClick={this.onColorSwatchClick}
            ref: (e) => {
            } }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { autoClose: true, pointerDisabled: true, referenceElement: "color-picker-swatch", placement: "auto", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.U.Scale, label: "color-picker-popover", ref: (e) => {
                this.popoverElememt = e;
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-color-picker", { scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.U.Scale, value: color, format: "auto", onCalciteColorPickerInput: this.onColorSwatchClick }))));
    }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};

const rfxDteRasterInputCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.browse-layer{--calcite-ui-text-1:var(--calcite-color-text-link);--calcite-ui-text-3:var(--calcite-color-text-link)}";

const RFxRasterInput = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        /**
         * save the processed scalar value
         */
        this.scalarValues = [];
        /**
         * flag indicating whether the widget is loaded.
         * flag is set to true once processValueLayer is completed
         */
        this.loaded = false;
        this.inputLayers = undefined;
        this.value = undefined;
        this.allowScalar = false;
        this.overlayPositioning = _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.a.absolute;
        this.rfxVariable = undefined;
        this.mode = undefined;
        this.rfxBrowseLayerClick = undefined;
    }
    onRFxVariableChange(variableData) {
        if (variableData.value) {
            this.value = variableData.value;
            return;
        }
        this.argRFT = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_17__.b)(variableData);
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async connectedCallback() {
        // load function is moved to connectedCallback as the function only deals with processing props;
        // Props should be processed in connectedCallback, to load data asynchronously and to setup the state componentWillLoad
        await this.load();
        this.loaded = true;
        return Promise.resolve();
    }
    async componentWillLoad() {
        ({ strings: this.strings } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_15__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
    }
    /**
     * @categeory Public
     * @returns Promise<SupportedImageryLayerTypes>
     * returns the selected layer object
     */
    async getSelectedLayer() {
        // getSelectedLayer exposed method would be called before the connected callback is completed
        // hence a flag is used to make sure widget is initialized properly.
        if (this.loaded === false) {
            await this.load();
        }
        if (this.value !== undefined) {
            if (typeof this.value == "object") {
                return this._getSelectedLayer(this.value.url);
            }
        }
        return Promise.resolve(undefined);
    }
    /**
     * used to process the browsed layer
     * @param layers
     * @returns
     */
    async updateBrowsedLayer(layers) {
        layers.forEach((layer) => {
            //push to inputput layers if it does not exist
            const browsedLayer = this.inputLayers.filter((inputLayer) => layer.url === inputLayer.url);
            if (browsedLayer.length === 0) {
                this.inputLayers.push(layer);
            }
            this.value = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_19__.d)(layer);
            this.rfxArgumentChange.emit({ value: this.value });
        });
        return Promise.resolve(undefined);
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    async load() {
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(this.rfxVariable)) {
            this.onRFxVariableChange(this.rfxVariable);
        }
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(this.value)) {
            await this.processValueLayer();
        }
    }
    async processValueLayer() {
        if (this.value.type?.toLowerCase() === "scalar") {
            //if its scalar add to scalar values
            this.scalarValues.push(this.value);
            return;
        }
        const valueLayerUrl = this.value?.url;
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(valueLayerUrl)) {
            return;
        }
        const selectedLayerId = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_19__.e)(this.value, this.inputLayers);
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(selectedLayerId)) {
            // if the value is not present in the input layers we need to add it
            const arcGISImageServiceLayerObject = await (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_19__.f)(this.value);
            if (arcGISImageServiceLayerObject !== undefined) {
                this.inputLayers = [...this.inputLayers, arcGISImageServiceLayerObject];
            }
        }
        // regenerate token for layer url
        const selectedLayer = await this._getSelectedLayer((0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_19__.g)(valueLayerUrl));
        if (selectedLayer !== undefined) {
            this.value = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_19__.d)(selectedLayer);
        }
        // FIXME : temp solution to layer duplication, ideally expose "startup" method (similar to dojo)
        // for components that expose public methods, and call startup immediately after widget creation.
        this.inputLayers = (0,_common_fda1462e_js__WEBPACK_IMPORTED_MODULE_20__.a)(this.inputLayers, "url");
    }
    async _handleComboBoxChange(e) {
        const selectedItem = e.target.value;
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(selectedItem)) {
            this.value = undefined;
        }
        else if (selectedItem === "browse") {
            this.value = undefined;
            this.rfxBrowseLayerClick({ referenceElement: this.hostElement });
            return;
        }
        else {
            const selectedLayer = await this._getSelectedLayer(selectedItem);
            if (selectedLayer !== undefined) {
                this.value = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_19__.d)(selectedLayer);
            }
            else if (this.allowScalar == true) {
                this.value = {
                    type: "Scalar",
                    value: selectedItem
                };
            }
        }
        this.rfxArgumentChange.emit({ value: this.value });
    }
    async _getSelectedLayer(url) {
        url = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_19__.g)(url);
        const selectedLayer = this.inputLayers.find((layer) => layer.url === url);
        if (selectedLayer) {
            await selectedLayer.load();
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.l)(selectedLayer)) {
                // calculate necessary info and add to the ImageryLayerArg for other widgets to use
                try {
                    // use ImageryLayer.rasterFunction instead of renderingRule as it is deprecated since 4.27
                    selectedLayer.rasterInfo = await selectedLayer.generateRasterInfo(selectedLayer.rasterFunction);
                }
                catch (error) {
                    console.error(error);
                }
            }
        }
        return selectedLayer;
    }
    getFormattedValueFromVariable() {
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(this.argRFT)) {
            const functionName = this.argRFT.function?.name;
            return `<${functionName}.${this.strings.outputRaster}>`;
        }
        return this.mode === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.a.ANALYSIS
            ? this.getDefaultPlaceHolder()
            : `<${this.strings.rfxVariable}: ${this.rfxVariable.name}>`;
    }
    getDefaultPlaceHolder() {
        if (this.allowScalar) {
            return this.strings.allowScalar;
        }
        else {
            return this.strings.selectLayer;
        }
    }
    getPlaceHolderText() {
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(this.rfxVariable)) {
            return this.getFormattedValueFromVariable();
        }
        else {
            return this.getDefaultPlaceHolder();
        }
    }
    renderInputOptions(value) {
        let options = [];
        if (this.inputLayers && Array.isArray(this.inputLayers)) {
            options = this.inputLayers.map((layer, index) => {
                if (layer?.url !== undefined) {
                    return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item", { key: `layer-item-${index}`, value: layer.url, selected: layer.url === value, textLabel: layer.title, icon: layer.type === "imagery" ? "image-layer" : "tiled-imagery-layer", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.U.Scale }));
                }
            });
        }
        if (this.scalarValues?.length !== 0) {
            // if the value is scalar show it as selected
            this.scalarValues.forEach((scalarValue) => {
                options.push((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item", { key: `layer-item-${this.inputLayers.length + 1}`, value: scalarValue.value, textLabel: scalarValue.value, selected: true, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.U.Scale }));
            });
        }
        return options;
    }
    render() {
        const layerUrl = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_19__.g)(this.value?.url);
        const value = (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(this.value)
            ? this.value
            : this.value?.type === "Scalar"
                ? this.value.value
                : layerUrl;
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "esriRFxRasterInput" }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox", { label: "rfx-dte-raster-input-combobox", placeholder: this.getPlaceHolderText(), selectionMode: "single", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.U.Scale, maxItems: 0, disabled: this.argRFT !== undefined, allowCustomValues: this.allowScalar, value: value, onCalciteComboboxChange: (e) => this._handleComboBoxChange(e), overlayPositioning: this.overlayPositioning, clearDisabled: true }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item", { class: "browse-layer", key: "layer-item-browse", value: "browse", textLabel: this.strings.browseLayer, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.U.Scale, icon: "search", filterDisabled: true }), ...this.renderInputOptions(value)))));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
    static get watchers() { return {
        "rfxVariable": ["onRFxVariableChange"]
    }; }
};
RFxRasterInput.style = rfxDteRasterInputCss;

const RFxCommonSelect = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this.handleComboBoxChange = (e) => {
            const value = e.target.value;
            if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(value)) {
                this.value = value;
                this.rfxArgumentChange.emit({ value: this.value });
            }
        };
        this.options = [];
        this.value = "";
        this.allowCustomValues = false;
        this.placeHolderText = undefined;
        this.isInGrid = false;
        this.isNullable = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentDidRender() {
        if (this.isNullable !== true) {
            // workaround suggested by calcite team https://github.com/Esri/calcite-components/issues/4738#issuecomment-1564799076
            const combobox = this.hostElement.shadowRoot.querySelector("calcite-combobox");
            combobox.addEventListener("click", (event) => {
                const target = event.target;
                if (target.tagName === "CALCITE-COMBOBOX-ITEM" && combobox.value === target.value) {
                    event.stopPropagation();
                }
            }, { capture: true });
        }
    }
    render() {
        let selectOptions = [];
        if (this.options && Array.isArray(this.options)) {
            selectOptions = this.options.map((option, index) => {
                return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item", { key: `common-select-item-${index}-${option.key}`, value: option.key, textLabel: option.label, selected: option.key === this.value, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.U.Scale }));
            });
        }
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox", { selectionMode: "single", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.U.Scale, maxItems: 0, label: "rfx-dtex-common-select-combobox", placeholder: this.placeHolderText, allowCustomValues: this.allowCustomValues, clearDisabled: !this.isNullable, overlayPositioning: this.isInGrid ? "fixed" : "absolute", onCalciteComboboxChange: (e) => this.handleComboBoxChange(e) }, ...selectOptions)));
    }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};

const RFxFieldSelect = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        this.rfxFieldOptionsLoaded = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxFieldOptionsLoaded", 7);
        this.handleFieldSelectChange = (e) => {
            const element = e.target;
            this.value = element.value;
            this.rfxArgumentChange.emit({ value: this.value });
        };
        this.layerArg = undefined;
        this.rasterInputVariable = undefined;
        this.otherOptions = undefined;
        this.value = undefined;
        this.options = undefined;
        this.fieldType = undefined;
        this.isInGrid = false;
        this.inputLayers = undefined;
        this.showDefaultFields = true;
    }
    onrasterInputVariableChange() {
        this.processLayerArg();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        ({ strings: this.strings } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_15__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
        await this.processLayerArg();
        this.processDefaultValue();
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { isInGrid: this.isInGrid, options: this.options, value: this.value, placeHolderText: this.strings.selectField, onRfxArgumentChange: this.handleFieldSelectChange })));
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    async getSelectedRasterLayer(url) {
        url = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_19__.g)(url);
        const selectedLayer = this.inputLayers.find((layer) => layer.url === url);
        if (selectedLayer) {
            await selectedLayer.load();
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.l)(selectedLayer)) {
                try {
                    // use ImageryLayer.rasterFunction instead of renderingRule as it is deprecated since 4.27
                    selectedLayer.rasterInfo = await selectedLayer.generateRasterInfo(selectedLayer.rasterFunction);
                }
                catch (error) {
                    console.error(error);
                }
            }
        }
        return selectedLayer;
    }
    async processLayerArg() {
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(this.rasterInputVariable)) {
            // for case where field-select is in rfx-grid row
            await this.updateFields();
        }
        else if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(this.layerArg)) {
            const input = this.layerArg.input;
            if (input) {
                await this.updateFields();
                // listen to layer input change and update fields upon change event
                input.addEventListener("rfxArgumentChange", async () => {
                    await this.updateFields();
                });
            }
            else {
                // set default field options if no layer input
                this.setDefaultFieldOptions();
            }
        }
        else {
            // set default field options if no selected layer obj and no input layer arg
            this.setDefaultFieldOptions();
        }
        this.rfxFieldOptionsLoaded.emit();
    }
    async updateFields() {
        let layer;
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(this.rasterInputVariable?.value)) {
            layer = await this.getSelectedRasterLayer(this.rasterInputVariable?.value?.url);
        }
        else if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(this.layerArg)) {
            const layerInput = this.layerArg.input;
            layer =
                typeof layerInput.getSelectedLayer === "function"
                    ? await layerInput.getSelectedLayer()
                    : undefined;
        }
        if (!layer) {
            this.setDefaultFieldOptions();
        }
        else if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.h)(layer)) {
            this.options = this.convertFieldsToOptions(layer.fields);
            if (this.otherOptions) {
                this.addOtherOptions();
            }
        }
        else if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.l)(layer) || (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.m)(layer)) {
            if (layer.sourceJSON?.hasRasterAttributeTable) {
                // Since 4.14
                // hasRasterAttributeTable moved under layer.sourceJSON
                const rat = (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.l)(layer)
                    ? layer.serviceRasterInfo.attributeTable
                    : layer.rasterInfo.attributeTable;
                if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(rat?.fields)) {
                    // set field options according to fields from raster attribute table
                    this.setFieldOptions(rat.fields);
                }
                else {
                    // set default fields if no fields data on RAT
                    this.setDefaultFieldOptions();
                }
            }
            else {
                // set default fields if raster layer has no RAT
                this.setDefaultFieldOptions();
            }
        }
        this.processDefaultValue();
    }
    addOtherOptions() {
        const extraOptions = [], currentOptions = this.options;
        const otherOptions = this.otherOptions;
        Object.keys(otherOptions).forEach(function (key) {
            const option = {
                key: key,
                label: otherOptions[key]
            };
            extraOptions.push(option);
        });
        if (currentOptions && currentOptions.length > 0) {
            extraOptions.forEach(function (extraOption) {
                if (!currentOptions.some(function (currentOption) {
                    if (currentOption.key === extraOption.key) {
                        return true;
                    }
                })) {
                    currentOptions.push(extraOption);
                }
            });
            this.options = currentOptions;
        }
        else {
            this.options = extraOptions;
        }
    }
    setFieldOptions(fields) {
        const numFieldTypes = [
            "esriFieldTypeSmallInteger",
            "esriFieldTypeInteger",
            "esriFieldTypeSingle",
            "esriFieldTypeDouble"
        ];
        const stringFieldTypes = ["esriFieldTypeString"];
        const validFieldTypes = numFieldTypes.concat(stringFieldTypes);
        const fieldType = this.fieldType;
        if (fields?.length > 0) {
            // Since js-api 4.12, fields on RAT no longer in JSON format
            fields = JSON.parse(JSON.stringify(fields));
            const filteredFields = fields.filter((field) => {
                if (fieldType === "list") {
                    return stringFieldTypes.indexOf(field.type) > -1;
                }
                else {
                    return validFieldTypes.indexOf(field.type) > -1;
                }
            });
            this.options = this.convertFieldsToOptions(filteredFields);
        }
        else {
            this.setDefaultFieldOptions();
        }
    }
    setDefaultFieldOptions() {
        if (this.showDefaultFields === true) {
            // if widget is in grid, only show 'VALUE' as default
            // otherwise show "VALUE" and "COUNT" as default
            this.options = this.isInGrid
                ? [
                    {
                        key: "VALUE",
                        label: this.strings.value
                    }
                ]
                : [
                    {
                        key: "VALUE",
                        label: this.strings.value
                    },
                    {
                        key: "COUNT",
                        label: this.strings.count
                    }
                ];
        }
    }
    convertFieldsToOptions(fields) {
        const options = [];
        fields.map((field) => {
            options.push({ key: field.name, label: field.alias });
        });
        return options;
    }
    processDefaultValue() {
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(this.options) || this.options?.length < 1) {
            return;
        }
        if (this.value === undefined ||
            this.value === null ||
            !this.options.some((option) => option.key === this.value)) {
            this.value = this.options[0].key;
        }
        if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(this.rasterInputVariable) || !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(this.layerArg)) {
            this.rfxArgumentChange.emit({ value: this.value });
        }
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
    static get watchers() { return {
        "rasterInputVariable": ["onrasterInputVariableChange"]
    }; }
};

const component = "rfx-grid";
const HTMLClasses = {
    gridContainer: `${component}__grid-container`,
    border: "border",
    stacked: "stacked"
};

const rfxGridCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-grid__grid-container{width:100%;border-collapse:collapse}.rfx-grid__grid-container div{box-sizing:border-box}.rfx-grid__grid-container body{width:100%;height:100%;margin:0;padding:0}.rfx-grid__grid-container td{padding:0.5em;text-align:center}.rfx-grid__grid-container th{background:var(--calcite-color-foreground-2);padding:0.5em;border:1px solid var(--calcite-color-foreground-3);text-align:center;font-weight:normal}.rfx-grid__grid-container.border td{border:1px solid var(--calcite-color-foreground-3)}.rfx-grid__grid-container.stacked td,.rfx-grid__grid-container.stacked th{text-align:inherit;display:block;width:auto}";

const RFxGrid = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxGridOptionChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxGridOptionChange", 7);
        this.rfxGridRowClick = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxGridRowClick", 7);
        /**
         * called when change happens in the editable colum inside grid
         * @param event
         */
        this.gridValueChange = (event) => {
            event.stopImmediatePropagation();
            const eventType = event.type;
            const element = event.target;
            let value, updatedValue;
            switch (eventType) {
                case "calciteCheckboxChange":
                case "calciteSwitchChange":
                    value = element.checked;
                    break;
                default:
                    value = element.value;
                    break;
            }
            if (element?.tagName === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.A.RFX_DTE_RASTER_INPUT &&
                value?.hasOwnProperty("url")) {
                // if value is in the format of RasterJSON, convert it to RFxVariable
                const rasterRFxVariable = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_19__.a)();
                rasterRFxVariable.value = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_19__.c)(value);
                updatedValue = rasterRFxVariable;
            }
            const [columnName, id] = element.id.split("-");
            let rowIndex;
            this.gridOptions = this.gridOptions.map((gridOption, index) => {
                if (gridOption.id === Number.parseInt(id, 10)) {
                    if (element.id.indexOf(columnName) > -1) {
                        const columnLayout = this.gridLayout[columnName];
                        const uiType = columnLayout.uiType;
                        if (uiType === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.G.select) {
                            gridOption[columnName].value = updatedValue ?? value;
                        }
                        else {
                            gridOption[columnName] = updatedValue ?? value;
                        }
                    }
                    rowIndex = index;
                }
                return gridOption;
            });
            if (this.canAdd) {
                this.addRow();
            }
            this.rfxGridOptionChange.emit({ gridOptions: this.gridOptions, rowIndex: rowIndex });
        };
        /**
         * called when remove button is clicked
         * @param event
         */
        this.onRemoveClick = (event) => {
            const key = event.target.id.split("-")[1];
            const rowIndex = this.gridOptions.findIndex((gridOption) => gridOption.id === Number.parseInt(key, 10));
            this.gridOptions = this.gridOptions.filter((gridOption) => gridOption.id !== Number.parseInt(key, 10));
            this.rfxGridOptionChange.emit({ gridOptions: this.gridOptions, rowIndex: rowIndex });
            if (this.gridOptions.length === 0) {
                this.gridOptions = [
                    {
                        id: this.gridOptions.length
                    }
                ];
            }
        };
        /**
         * called when a grid row is clicked
         * @param event
         */
        this.onGridRowClick = (event) => {
            event.stopPropagation();
            const key = event.currentTarget.id.split("_")[2];
            const rowIndex = this.gridOptions.findIndex((gridOption) => gridOption.id === Number.parseInt(key, 10));
            this.rfxGridRowClick.emit({ gridOptions: this.gridOptions, rowIndex: rowIndex });
        };
        this.gridOptions = [];
        this.inputLayers = undefined;
        this.canAdd = true;
        this.canRemove = true;
        this.hasHeader = true;
        this.isStacked = false;
        this.gridLayout = undefined;
        this.hasIdColumn = true;
        this.hasBorder = false;
        this.rfxBrowseLayerClick = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        ({ strings: this.strings } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_15__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(`.`)));
    }
    /**
     * function to correct the ids in the options, before adding a new one.
     *  We need the becuse in between ids can be removed and adding one id equal to array length doesnt work
     */
    adjustValueListItemIds() {
        this.gridOptions.forEach((option, idx) => {
            option.id = idx;
        });
    }
    /**
     * To check all the columns in a row is empty
     * @param lastOption
     * @returns
     */
    isLastRowEmpty(lastOption) {
        return !Object.keys(this.gridLayout).some((key) => {
            const fieldLayout = this.gridLayout[key];
            const isSelectLayout = fieldLayout.uiType === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.G.select;
            const lastOptionValue = isSelectLayout ? lastOption[key].value : lastOption[key];
            return !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_16__.i)(lastOptionValue);
        });
    }
    /**
     * called to add a new row to the grid.
     * adding a row is automated and will add when last row change occurs
     */
    addRow() {
        const lastOption = this.gridOptions[this.gridOptions.length - 1];
        const shouldAddNewRow = !this.isLastRowEmpty(lastOption);
        if (!shouldAddNewRow) {
            return;
        }
        this.adjustValueListItemIds();
        const newGridItem = {
            id: this.gridOptions.length
        };
        // In case the layout has any field of type "select"
        // We need to provide options for the new row
        for (const fieldName in this.gridLayout) {
            if (this.gridLayout.hasOwnProperty(fieldName)) {
                const fieldLayout = this.gridLayout[fieldName];
                const isSelectLayout = fieldLayout.uiType === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.G.select;
                const defaultOptions = this.gridOptions[0][fieldName];
                if (isSelectLayout) {
                    newGridItem[fieldName] = {
                        ...defaultOptions,
                        value: undefined
                    };
                }
            }
        }
        this.gridOptions.push(newGridItem);
    }
    /**
     * render columns in row based on the schema type
     * @param gridOption
     * @param index
     * @returns
     */
    renderGridRow(gridOption, index) {
        const id = Number.parseInt(index, 10) + 1;
        const rowElements = Object.keys(this.gridLayout).map((columnName) => {
            const columnLayout = this.gridLayout[columnName];
            const uiType = columnLayout.uiType;
            switch (uiType) {
                case _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.G.textInput:
                    return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-text", { class: columnLayout.style, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.U.Scale, key: `${columnName}-${gridOption.id}`, id: `${columnName}-${gridOption.id}`, value: gridOption[columnName], onCalciteInputTextChange: this.gridValueChange, title: gridOption[columnName] })));
                case _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.G.text:
                    return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", { key: `${columnName}_${gridOption.id}` }, columnLayout.constValue || gridOption[columnName]));
                case _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.G.raster:
                    return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dte-raster-input", { class: columnLayout.style, key: `${columnName}-${gridOption.id}`, id: `${columnName}-${gridOption.id}`, inputLayers: this.inputLayers, allowScalar: columnLayout.allowScalar, rfxVariable: gridOption.rasterElement, value: gridOption[columnName]?.value, overlayPositioning: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.a.fixed, onRfxArgumentChange: this.gridValueChange, rfxBrowseLayerClick: this.rfxBrowseLayerClick })));
                case _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.G.number:
                    return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { key: `${columnName}-${gridOption.id}`, id: `${columnName}-${gridOption.id}`, value: gridOption[columnName], onCalciteInputNumberChange: this.gridValueChange, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.U.Scale, numberButtonType: "none", title: gridOption[columnName] })));
                case _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.G.boolean:
                    return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { key: `${columnName}-${gridOption.id}`, id: `${columnName}-${gridOption.id}`, checked: gridOption[columnName], onCalciteCheckboxChange: this.gridValueChange })));
                case _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.G.switch:
                    return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { key: `${columnName}-${gridOption.id}`, id: `${columnName}-${gridOption.id}`, checked: gridOption[columnName], onCalciteSwitchChange: this.gridValueChange })));
                case _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.G.field:
                    return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-field-select", { class: columnLayout.style, key: `${columnName}-${gridOption.id}`, id: `${columnName}-${gridOption.id}`, inputLayers: this.inputLayers, isInGrid: true, rasterInputVariable: gridOption.layer, value: gridOption[columnName], onRfxArgumentChange: this.gridValueChange })));
                case _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.G.color:
                    return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-color-picker", { key: `${columnName}-${gridOption.id}`, id: `${columnName}-${gridOption.id}`, value: gridOption[columnName], onRfxColorPickerValueChange: this.gridValueChange })));
                case _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.G.select:
                    return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { class: columnLayout.style, key: `${columnName}-${gridOption.id}`, id: `${columnName}-${gridOption.id}`, options: gridOption[columnName].options, value: gridOption[columnName].value, allowCustomValues: columnLayout.allowCustomValues, isInGrid: true, onRfxArgumentChange: this.gridValueChange })));
                case _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_18__.G.icon:
                    return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", null, gridOption[columnName] ? ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { key: `${columnName}-${gridOption.id}`, id: `${columnName}-${gridOption.id}`, icon: columnLayout.icon, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.C.s, textLabel: columnLayout.label })) : null));
            }
        });
        //if hasId column is true creates a number column at the begining
        if (this.hasIdColumn === true) {
            rowElements.unshift((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { key: `idColumn_${gridOption.id}` }, id)));
        }
        // if canRemove is true adds a remove button at the end. Also for the last row, this button action is disabled
        if (this.canRemove === true) {
            rowElements.push((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("td", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { id: `remove-${gridOption.id}`, key: `remove-${gridOption.id}`, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_3__.U.Scale, icon: "x", onClick: id === this.gridOptions.length ? undefined : this.onRemoveClick })));
        }
        return rowElements;
    }
    /**
     * to render the header
     * @returns
     */
    renderHeader() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("thead", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("tr", null, this.hasIdColumn === true && (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("th", null, this.strings.id), Object.keys(this.gridLayout).map((layout) => {
            const columnLayout = this.gridLayout[layout];
            return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("th", { class: `${columnLayout.style}` }, columnLayout.label);
        }), this.canRemove === true && (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("th", null, " "))));
    }
    /**
     * to render each row in the grid
     * @returns Vnode[]
     */
    renderGridOptions() {
        return this.gridOptions.map((gridOption, index) => {
            return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("tr", { id: `grid_row_${gridOption.id}`, key: `grid_row_${gridOption.id}`, onClick: index === this.gridOptions.length - 1 ? undefined : this.onGridRowClick }, this.renderGridRow(gridOption, index)));
        });
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("table", { class: `${HTMLClasses.gridContainer} ${this.hasBorder ? HTMLClasses.border : ""} ${this.isStacked ? HTMLClasses.stacked : ""}` }, this.hasHeader && this.renderHeader(), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("tbody", null, ...this.renderGridOptions()))));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxGrid.style = rfxGridCss;



//# sourceMappingURL=rfx-color-picker_5.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CalciteScale),
/* harmony export */   U: () => (/* binding */ UIDefaults),
/* harmony export */   a: () => (/* binding */ CalciteOverlayPositioning)
/* harmony export */ });
const UIDefaults = {
    Scale: "s",
    PopoverTimer: 60
};
const CalciteScale = {
    s: "s",
    m: "m"
};
const CalciteOverlayPositioning = {
    absolute: "absolute",
    fixed: "fixed"
};



//# sourceMappingURL=ui-utils-928a4096.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,