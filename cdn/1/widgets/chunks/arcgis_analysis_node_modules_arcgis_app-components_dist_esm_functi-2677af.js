"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_functi-2677af"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/previewPopup-2acb9488.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/previewPopup-2acb9488.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ generateMasterFieldInfo),
/* harmony export */   p: () => (/* binding */ previewPopup)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




async function generatefieldInfo(layer, popupTemplate) {
    return new Promise((resolve, reject) => {
        (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/popup/FieldInfo"]).then(async ([FieldInfo]) => {
            var _a, _b, _c;
            const masterFieldInfo = [];
            // map original fieldinfo
            const fieldInfoMap = new Map((_a = popupTemplate === null || popupTemplate === void 0 ? void 0 : popupTemplate.fieldInfos) === null || _a === void 0 ? void 0 : _a.map((fieldInfo) => [
                fieldInfo.fieldName,
                fieldInfo
            ]));
            // map fields from service
            const layerFieldsMap = 
            /* getServiceType(layer) !== serviceTypeEnum.imageryTile ? */ await (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.d)(layer); /* : null */
            // loop over popup fieldinfo first to maintain field order, than add new fields
            if (layerFieldsMap === null || layerFieldsMap === void 0 ? void 0 : layerFieldsMap.size) {
                fieldInfoMap.forEach((fieldInfo) => {
                    if (layerFieldsMap.has(fieldInfo.fieldName)) {
                        masterFieldInfo.push(fieldInfo);
                        // wont use layerFields anymore, so remove them here
                        layerFieldsMap.delete(fieldInfo.fieldName);
                    }
                });
                // remaining fields are new fields in the service
                layerFieldsMap.forEach((field) => {
                    if (["geometry"].indexOf(field.type) === -1) {
                        const tempFieldInfo = new FieldInfo();
                        tempFieldInfo.fieldName = field.name;
                        tempFieldInfo.label = field.alias;
                        tempFieldInfo.visible = false;
                        masterFieldInfo.push(tempFieldInfo);
                    }
                });
                layerFieldsMap.clear();
            }
            // expressions
            if (popupTemplate === null || popupTemplate === void 0 ? void 0 : popupTemplate.expressionInfos) {
                (_b = popupTemplate.expressionInfos) === null || _b === void 0 ? void 0 : _b.forEach((expression) => {
                    const expressionNameWithPrefix = `${_commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.f.expression}${expression.name}`;
                    if (fieldInfoMap.has(expressionNameWithPrefix)) {
                        masterFieldInfo.push(fieldInfoMap.get(expressionNameWithPrefix));
                    }
                    else {
                        const tempFieldInfo = new FieldInfo();
                        tempFieldInfo.fieldName = expressionNameWithPrefix;
                        tempFieldInfo.visible = false;
                        masterFieldInfo.push(tempFieldInfo);
                    }
                });
            }
            // relationships: todo
            (_c = popupTemplate === null || popupTemplate === void 0 ? void 0 : popupTemplate.fieldInfos) === null || _c === void 0 ? void 0 : _c.forEach((field) => {
                // raster fields get returned via generateLayerFieldsMap now
                if (field.fieldName.indexOf(_commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.f.relationship) !== -1 /*||
                field.fieldName.indexOf(fieldInfoPrefixEnum.raster) !== -1 */) {
                    masterFieldInfo.push(field);
                }
            });
            resolve(masterFieldInfo);
        }, (error) => {
            reject(error);
        });
    });
}
const generateMasterFieldInfo = (layer, popupTemplate) => generatefieldInfo(layer, popupTemplate);

const previewPopup = async (mapView, layer, previewPopupController) => {
    var _a, _b;
    mapView.closePopup();
    let singleFeature = null;
    const serviceType = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.c)(layer);
    // if scene layer, check for associated FS, else do regular preview popup
    if (serviceType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.s.scene && !(layer === null || layer === void 0 ? void 0 : layer.associatedLayer)) {
        // to do
        // singleFeature = await getSingleSceneFeatureToDisplay(mapView, layer as __esri.SceneLayer, previewPopupController);
        return;
    }
    else {
        singleFeature = await getSingleFeatureToDisplay(mapView, layer, previewPopupController, serviceType);
    }
    if (singleFeature) {
        if ("dockEnabled" in mapView.popup) {
            mapView.popup.dockEnabled = true;
        }
        mapView.openPopup({
            features: [singleFeature],
            location: ((_b = (_a = singleFeature.geometry) === null || _a === void 0 ? void 0 : _a.extent) === null || _b === void 0 ? void 0 : _b.center) || singleFeature.geometry
        });
        return singleFeature;
    }
};
const getSingleFeatureToDisplay = async (mapView, layer, previewPopupController, serviceType) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    try {
        let currentLayer = null;
        let popupFeature;
        if (serviceType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.s.ogcFeature) {
            currentLayer = (await mapView.whenLayerView(layer));
            // wait for features to load, else layerview queries dont return anything
            const [reactiveUtils] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/core/reactiveUtils"]);
            await reactiveUtils.whenOnce(() => !currentLayer.updating);
        }
        else if (serviceType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.s.stream) {
            currentLayer = (await mapView.whenLayerView(layer));
            // wait for features to load, else layerview queries dont return anything
            const [reactiveUtils] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/core/reactiveUtils"]);
            await reactiveUtils.whenOnce(() => !currentLayer.updating);
        }
        else {
            currentLayer = layer;
        }
        // imagery tile layer cannot use query operation
        if (serviceType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.s.imageryTile) {
            const layerView = mapView.allLayerViews.find((view) => view.layer.id === layer.id);
            const features = await layerView.fetchPopupFeatures(layer.fullExtent.center);
            return features === null || features === void 0 ? void 0 : features[0];
        }
        // if sublayer supports identity, return the 1st feature for popup preview.
        if (serviceType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.s.mapImage &&
            layer.layer.version >= 10.5 &&
            !((_b = (_a = layer.layer.capabilities) === null || _a === void 0 ? void 0 : _a.operations) === null || _b === void 0 ? void 0 : _b.supportsQuery) &&
            ((_d = (_c = layer.layer.capabilities) === null || _c === void 0 ? void 0 : _c.operations) === null || _d === void 0 ? void 0 : _d.supportsIdentify)) {
            const currFeature = await (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.f)(layer, mapView);
            // attaching source layer is needed for popup to display
            if (currFeature) {
                currFeature.sourceLayer = layer;
            }
            return currFeature;
        }
        const isTable = "isTable" in layer && layer.isTable;
        // query center
        const centerQueryParams = currentLayer.createQuery();
        if (!isTable) {
            centerQueryParams.geometry = mapView.center;
            centerQueryParams.distance = mapView.resolution;
        }
        centerQueryParams.outFields = ["*"];
        const featureSetCenter = await currentLayer.queryFeatures(centerQueryParams, {
            signal: previewPopupController.signal
        });
        if (((_e = featureSetCenter === null || featureSetCenter === void 0 ? void 0 : featureSetCenter.features) === null || _e === void 0 ? void 0 : _e.length) === 0) {
            // feature by extent
            const extentQueryParams = currentLayer.createQuery();
            extentQueryParams.geometry = mapView.extent;
            extentQueryParams.outFields = ["*"];
            const featureSetExtent = await currentLayer.queryFeatures(extentQueryParams, {
                signal: previewPopupController.signal
            });
            if (((_f = featureSetExtent === null || featureSetExtent === void 0 ? void 0 : featureSetExtent.features) === null || _f === void 0 ? void 0 : _f.length) > 0) {
                // get closest to center
                popupFeature = await getClosestToCenter(featureSetExtent, mapView, layer);
            }
            else {
                // get any feature
                const singleFeatureQueryParams = currentLayer.createQuery();
                singleFeatureQueryParams.where =
                    currentLayer.definitionExpression || "1=1";
                singleFeatureQueryParams.outFields = ["*"];
                if (((_h = (_g = layer.sourceJSON) === null || _g === void 0 ? void 0 : _g.advancedQueryCapabilities) === null || _h === void 0 ? void 0 : _h.supportsPagination) ||
                    serviceType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.s.ogcFeature) {
                    singleFeatureQueryParams.start = 0;
                    singleFeatureQueryParams.num = 1;
                }
                singleFeatureQueryParams.outSpatialReference = mapView.spatialReference;
                popupFeature = (_k = (_j = (await currentLayer.queryFeatures(singleFeatureQueryParams, { signal: previewPopupController.signal }))) === null || _j === void 0 ? void 0 : _j.features) === null || _k === void 0 ? void 0 : _k[0];
            }
        }
        else {
            popupFeature = (_l = featureSetCenter === null || featureSetCenter === void 0 ? void 0 : featureSetCenter.features) === null || _l === void 0 ? void 0 : _l[0];
        }
        if (popupFeature && serviceType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.s.imagery) {
            popupFeature = await getSingleFeatureToDisplayForImagery(layer, popupFeature);
        }
        return popupFeature;
    }
    catch (error) {
        // abort error
        console.log(error);
    }
};
const getSingleFeatureToDisplayForImagery = async (layer, defaultGraphic) => {
    var _a;
    const query = layer.createQuery();
    // in api, "*" is a special keyword for query only. pseudo raster fields must be appended explicitly.
    // this could be revisited, e.g. introduce an additional option.
    query.outFields = ["*"].concat(layer.rasterFields.map((field) => field.name).filter((name) => name.startsWith("Raster.")));
    query.geometry = defaultGraphic.geometry;
    query.outSpatialReference = defaultGraphic.geometry.spatialReference;
    const features = await layer.queryVisibleRasters(query, {
        returnTopmostRaster: true,
        returnDomainValues: true
    });
    return (_a = features === null || features === void 0 ? void 0 : features[0]) !== null && _a !== void 0 ? _a : defaultGraphic;
};
const getClosestToCenter = async (featureSet, mapView, layer) => {
    const geometryType = await (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
    // point based on point distance
    if (geometryType === "point") {
        let featureAndDistance = null;
        for (let x = 0; x < featureSet.features.length; x++) {
            const pointDistance = featureSet.features[x].geometry.distance(mapView.center);
            if (x === 0 || (featureAndDistance === null || featureAndDistance === void 0 ? void 0 : featureAndDistance[1]) > pointDistance) {
                featureAndDistance = [featureSet.features[x], pointDistance];
            }
        }
        return featureAndDistance[0];
    }
    // polyline with grate
    else if (geometryType === "polyline") {
        let featureAndDistance = null;
        const [geometryEngine] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/geometry/geometryEngine"]);
        for (let x = 0; x < featureSet.features.length; x++) {
            const lineDistance = geometryEngine.nearestVertex(featureSet.features[x].geometry, mapView.center).distance;
            if (x === 0 || (featureAndDistance === null || featureAndDistance === void 0 ? void 0 : featureAndDistance[1]) > lineDistance) {
                featureAndDistance = [featureSet.features[x], lineDistance];
            }
        }
        return featureAndDistance[0];
    }
    // polygon based on centroid distance
    else if (geometryType === "polygon" || (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.c)(layer) === "imagery") {
        let featureAndDistance = null;
        for (let x = 0; x < featureSet.features.length; x++) {
            const centroidDistance = featureSet.features[x].geometry.centroid.distance(mapView.center);
            if (x === 0 || (featureAndDistance === null || featureAndDistance === void 0 ? void 0 : featureAndDistance[1]) > centroidDistance) {
                featureAndDistance = [featureSet.features[x], centroidDistance];
            }
        }
        return featureAndDistance[0];
    }
    // table, any other use case, send the 1st one
    else {
        return featureSet.features[0];
    }
};
// const getSingleSceneFeatureToDisplay = async (
//   mapView: __esri.MapView,
//   layer: __esri.SceneLayer,
//   previewPopupController: AbortController
// ): Promise<__esri.Graphic> => {
//   try {
//     const layerView = await mapView.whenLayerView(layer);
//     const query = layer.createQuery();
//     query.start = 0;
//     query.num = 1;
//     query.outFields = ["*"];
//     const tempResult = await layerView.queryFeatures(query, { signal: previewPopupController.signal });
//     return tempResult.features?.[0];
//   } catch (error) {
//     // abort error
//     return null;
//   }
// };



//# sourceMappingURL=previewPopup-2acb9488.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,