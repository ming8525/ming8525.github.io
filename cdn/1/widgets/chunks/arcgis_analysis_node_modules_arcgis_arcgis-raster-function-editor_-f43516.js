"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-f43516"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.lv-5affdc35.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.lv-5affdc35.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rāda vienus un tos pašus rezultātus.",
	"@@Abs_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Abs_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Abs_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Abs_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Abs_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Abs_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Abs_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Abs_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Abs_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Abs_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Abs_Raster_tag0@@": "Ievades rastrs, kam tiek aprēķinātas absolūtās vērtības.",
	"@@ACos_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@ACos_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@ACos_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@ACos_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@ACos_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@ACos_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@ACos_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@ACos_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ACos_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@ACos_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ACos_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ACos_Raster_tag0@@": "Ievade, kurai tiek aprēķinātas inverso kosinusu vērtības.",
	"@@ACosH_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@ACosH_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@ACosH_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@ACosH_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@ACosH_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@ACosH_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@ACosH_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@ACosH_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ACosH_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@ACosH_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ACosH_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ACosH_Raster_tag0@@": "Ievade, kurai tiek aprēķinātas inverso hiperbolisko kosinusu vērtības.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "Funkcijas Šķietamā atstarošanās rezultātus var arī izteikt kā albedo, kas ir planetārās virsmas atstarotās pieejamās enerģijas procenti. Albedo datus izmanto zinātniskie lietotāji sarežģītu modeļu izveidei un tehniskajai tālizpētei.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Nav atzīmēta--Funkcija atgriež šķietamās atstarošanās vērtības. Tā ir noklusējuma vērtība.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Atzīmēta--Funkcija atgriež 32 bitu vērtības ar peldošo punktu, kuras visbiežāk ir diapazonā no 0,0 līdz 1,0. Ja šī opcija ir izvēlēta, netiek veikta nekāda datu izgriešana.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Tā kā albedo izvades datu veids ir peldošais punkts, jums skaidri jāiestata vēlamais <strong>izvades pikseļa veids</strong> vai nu uz 32 bitu vērtību ar peldošo punktu vai 64 bitu dubulto vērtību ar peldošo punktu. <strong>Izvades pikseļa veida</strong> parametru var atrast rastra funkcijas <strong>Šķietamā atstarošanās</strong> cilnē <strong>Vispārīgi</strong>. Ja <strong>Albedo</strong> opcijai <strong>izvades pikseļa veids</strong> nav pareizi iestatīts, rezultāta vērtības nebūs derīgas, un tiks uzrādīta nulles vērtība.",
	"@@Apparent-Reflectance_Offset_tag0@@": "Ja vēlaties, albedo vērtībai var būt nobīde:",
	"@@Apparent-Reflectance_Offset_tag1@@": "16 bitu datu tipam bez zīmes mēroga noklusējuma nobīde ir 5000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "8 bitu datu tipam bez zīmes mēroga noklusējuma nobīde ir 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "Kad izvade ir albedo, netiek veikta nekāda mērogošana.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "Šo vērtību var manuāli iestatīt vai rediģēt katrai joslai. Atbilstošo informāciju var nolasīt no ievades rastra rezultātu metadatiem.",
	"@@Apparent-Reflectance_Raster_tag0@@": "Rastra rezultāts, kam tiks piemērota šķietamā atstarošanās.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "Šķietamās atstarošanās izvades vērtību var izteikt kā veselu skaitli. Mērogošanas koeficients tiek pareizināts ar albedo, lai pārvērstu visas vērtības ar peldošo punktu par veselām vērtībām.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Ja mēroga koeficients ir ${0} vai nav norādīts, tiek piemērota noklusējuma mērogošana atkarībā no ievades datu pikseļu tipa:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "16 bitu datu tipam bez zīmes mēroga noklusējuma koeficients ir 50 000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "8 bitu datu tipam bez zīmes mēroga noklusējuma koeficients ir 255.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "Mērogošanas koeficients vienmēr tiek piemērots, kad izvade ir šķietamā atstarošanās. Kad izvade ir albedo, netiek veikta nekāda mērogošana.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Šī ir saullēkta vērtība, kas ir izteikta grādos. To izmanto sistēma, ja atbilstošu informāciju var nolasīt no metadatiem. Šo vērtību var manuāli iestatīt vai rediģēt.",
	"@@ArgStatistics_Max_tag0@@": "Maksimālā iestatāma vērtība ir visaugstākā vērtība, kas ir vienāda ar vai mazāka par ilguma beigām.",
	"@@ArgStatistics_Max_tag1@@": "Šī ievade ir piemērojama tikai tad, kad metode ir Ilgums.",
	"@@ArgStatistics_Method_tag0@@": "Izvēlieties statistikas metodi aprēķiniem:",
	"@@ArgStatistics_Method_tag1@@": "Maks. arg.--Maksimālās vērtības arguments, kas atgriež vērtību ${Band index}, ar kuru norādītais pikselis iegūst tās maksimāli vērtību no visām joslām. Visām rastru joslām no ikviena ievades rastra tiek piešķirts uz 0 bāzēts inkrementāls joslu indekss, kas vispirms tiek sakārtots, izmantojot ievades rastra indeksu un pēc tam relatīvo joslas secību katrā ievades rastrā.",
	"@@ArgStatistics_Method_tag2@@": "Mediānas arg.--Mediānas arguments, kas atgriež vērtību ${Band index}, ar kuru norādītais pikselis iegūst mediānas vērtību no visām joslu vērtībām.",
	"@@ArgStatistics_Method_tag3@@": "Min. arg.--Minimālās vērtības arguments, kas atgriež vērtību ${Band index}, ar kuru norādītais pikselis iegūst tās minimālo vērtība no visām joslām.",
	"@@ArgStatistics_Method_tag4@@": "Ilgums — ilguma metode atrod garākos secīgos elementus masīvā, kur katram elementam ir vērtība, kas lielāka vai vienāda ar <strong>min.</strong> vērtību un mazāka vai vienāda ar <strong>maks.</strong> vērtību un tad uzrāda tās garumu.",
	"@@ArgStatistics_Min_tag0@@": "Minimālā iestatāmā vērtība ir viszemākā vērtība, kas ir vienāda ar vai lielāka par ilguma beigām.",
	"@@ArgStatistics_Min_tag1@@": "Šī ievade ir piemērojama tikai tad, kad metode ir Ilgums.",
	"@@ArgStatistics_Rasters_tag0@@": "Ievades rastrs, kam tiks izpildītas dažādās statistiskās metodes.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "Ievadāma konstante, kas tiks atgriezta, kad nevar iegūt galīgu maksimālo, minimālo vai mediānas vērtību. Visbiežāk sastopamais scenārijs ir, kad maksimālā un minimālā vērtība rodas vairāk nekā vienreiz no visu joslu vērtībām. Nedefinētas konstantes noklusējuma vērtība ir 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "Nedefinētā klase ir izmantojama tikai tad, ja metode ir <strong>ArgMax</strong>, <strong>ArgMin</strong> vai <strong>ArgMedian</strong>.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Norāda, vai statistikas aprēķinos tiek ignorētas NoData vērtības.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Atzīmēts -- analīzē tiks iekļauti visi derīgie pikseļi ievades rastros un ignorēti NoData pikseļi.",
	"@@ArgStatistics_ignorenodata_tag2@@": "Neatzīmēts -- ja ievades rastros ir pikseļu NoData vērtības, analīzes rezultāts būs NoData. Tā ir noklusējuma vērtība.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Arithmetic_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Arithmetic_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Arithmetic_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Arithmetic_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Arithmetic_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Arithmetic_Operation_tag0@@": "Aritmētiskā operācija, kas jāveic, izmantojot divus ievades rastrus.",
	"@@Arithmetic_Operation_tag1@@": "Opcijas ir šādas:",
	"@@Arithmetic_Operation_tag2@@": "<strong>Dalīšana</strong> — izvada dalīšanas vērtību starp katra rastra attiecīgo pikseļu vērtībām.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Atņemšana</strong> — izvada starpību starp katra rastra attiecīgo pikseļu vērtībām. To var izmantot, lai aprēķinātu izmaiņu noteikšanas vērtības.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Moda</strong> — izvada visvairāk atkārtoto pikseļu vērtību no pikseļiem, kas pārklājas. Piemēram, ja rastrā ir sešas joslas, būs seši pārklājušies pikseļi. Ar vērtībām 4, 5, 6, 4, 7, 9, modas vērtība ir 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Reizināt</strong> — izvada katra rasta attiecīgo pikseļu vērtību rezultātu. To var izmantot, lai izpildītu dažas izmaksu funkcijas.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Summa</strong> — izvada katra rasta visu attiecīgo pikseļu vērtību summu.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Pakāpe</strong> — izvada ievades rastra vai skalāro kāpināto attiecīgo pikseļu vērtību rezultātu.",
	"@@Arithmetic_Raster_tag0@@": "Pirmā ievades rastra datu kopa.",
	"@@Arithmetic_Raster2_tag0@@": "Otrā ievades rastra datu kopa.",
	"@@ASin_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@ASin_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@ASin_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@ASin_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@ASin_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@ASin_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@ASin_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@ASin_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ASin_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@ASin_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ASin_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ASin_Raster_tag0@@": "Ievade, kurai tiek aprēķinātas inverso sinusu vērtības.",
	"@@ASinH_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@ASinH_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@ASinH_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@ASinH_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@ASinH_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@ASinH_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@ASinH_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@ASinH_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ASinH_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@ASinH_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ASinH_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ASinH_Raster_tag0@@": "Ievade, kurai tiek aprēķinātas inverso hiperbolisko sinusu vērtības.",
	"@@Aspect_Raster_tag0@@": "Ievadītais digitālā augstuma modelis, kas tiek izmantots, lai atvasinātu aspektu datu kopu.",
	"@@Aspect-Slope_Raster_tag0@@": "Ievadītais digitālā augstuma modelis.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "Mērogošanas koeficients, kas tiek izmantots, lai konvertētu augstuma vērtības šādiem mērķiem:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "lai konvertētu augstuma mērvienības (piemēram, metrus vai pēdas) par datu kopas horizontālajām koordinātu mērvienībām, kas var būt pēdas, metri vai grādi;",
	"@@Aspect-Slope_Z-Factor_tag2@@": "lai pievienotu vertikālo pārspīlējumu vizuāla iespaida radīšanai.",
	"@@ATan_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@ATan_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@ATan_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@ATan_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@ATan_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@ATan_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@ATan_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@ATan_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ATan_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@ATan_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ATan_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ATan_Raster_tag0@@": "Ievade, kurai tiek aprēķinātas inverso tangentu vērtības.",
	"@@ATan2_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@ATan2_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@ATan2_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@ATan2_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@ATan2_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@ATan2_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@ATan2_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@ATan2_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ATan2_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@ATan2_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ATan2_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ATan2_Raster_tag0@@": "Ievade, ar kuru tiek norādīts skaitītājs vai y vērtība, kas tiek izmantota aprēķinot inverso tangentu.",
	"@@ATan2_Raster2_tag0@@": "Ievade, ar kuru tiek norādīts saucējs vai vērtība x, kas tiek izmantota aprēķinot inverso tangentu.",
	"@@ATanH_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@ATanH_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@ATanH_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@ATanH_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@ATanH_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@ATanH_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@ATanH_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@ATanH_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ATanH_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@ATanH_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ATanH_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@ATanH_Raster_tag0@@": "Ievade, kurai tiek aprēķinātas inverso hiperbolisko tangentu vērtības.",
	"@@Attribute-Table_Raster_tag0@@": "Ievades rastrs.",
	"@@Attribute-Table_Table-Type_tag0@@": "Ievades atribūtu tabulu var ievadīt, izmantojot tipu <strong>Manuāli</strong>, kurā varat piešķirt klases nosaukumu un krāsu katrai vērtībai, vai arī lietot atsauci uz jau esošo tabulu, ko var iegūt no faila ${.dbf}.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Definējiet savu joslas aritmētikas formulu, izvēloties parametru <strong>Lietotāja definēts</strong> savai <strong>metodei</strong>.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "Izvēloties iepriekš definētu indeksu savai opcijai <strong>Metode</strong>, definējiet pareizas joslas ievades rastra datu kopai, kas atbilst indeksam.",
	"@@Band-Arithmetic_Method_tag0@@": "Tā joslu aritmētikas algoritma veids, ko vēlaties ieviest. Varat definēt savu pielāgotu algoritmu vai izvēlēties iepriekš definētu indeksu.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong> — izdegušo teritoriju indekss",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>CIg</strong> — hlorofila indekss — zaļš",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>CIre</strong>— hlorofila indekss —sarkanā robeža",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Mālu saturoši minerāli</strong> — mālu saturošu minerālu koeficients",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong> — uzlabotas veģetācijas indekss",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Dzelzi saturoši minerāli</strong> — dzelzi saturošu minerālu koeficients",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong> — globālās vides pārraudzības indekss",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong> — zaļās veģetācijas atšķirību standartizētais indekss",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong> — zaļās veģetācijas indekss Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Dzelzs oksīds</strong> — dzelzs oksīda koeficients",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong> — ūdens atšķirību pārveidots standartizētais indekss",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong> — modificēts triangulēts veģetācijas indekss (otrā iterācija)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>Pārveidots SAVI</strong> — pārveidotas augsnes pielāgotas veģetācijas indekss",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong> — izdegumu standartizētais koeficienta indekss",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong> — apbūves atšķirību standartizētais indekss",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong> — mitruma atšķirību standartizētais indekss",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong> — sniega atšķirību standartizētais indekss",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong> — veģetācijas atšķirību standartizētais indekss",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong> — sarkanās malas veģetācijas atšķirību standartizētais indekss",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong> — ūdens atšķirību standartizētais indekss",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong> — perpendikulārās veģetācijas indekss",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong> — sarkanās malas triangulēts veģetācijas indekss",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong> — augsnei pielāgotas veģetācijas indekss",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong> — parasts koeficients",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong> — sarkanās malas parasts koeficients",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Sultāna formula</strong> — Sultāna formula",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>Pārveidots SAVI</strong> — pārveidots augsnei pielāgots veģetācijas indekss",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>Lietotājā definēts</strong> — ļauj definēt jūsu pielāgoto joslas aritmētisko izteiksmi.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong> — redzamās pret atmosfēru izturīgās veģetācijas indekss",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong> — ūdens atšķirību standartizētais svērtais indekss",
	"@@Band-Arithmetic_Raster_tag0@@": "Ievades rastrs.",
	"@@Binary-Thresholding_Raster_tag0@@": "Ievades rastrs.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Bitwise-And_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-And_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-And_Raster_tag0@@": "Pirmā ievade, kas jāizmanto šajā bitu operācijā.",
	"@@Bitwise-And_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Bitwise-And_Raster2_tag0@@": "Otrā ievade, kas jāizmanto šajā bitu operācijā.",
	"@@Bitwise-And_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "Ievade, kurai jāveic pārbīde.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "Ievade, ar kuru tiek definēts bitu pārbīdīšanas pozīciju skaits.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Not_Raster_tag0@@": "Ievades rastrs, kuram jāveic bitu operāciju “Ne” (papildinājums).",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Or_Raster_tag0@@": "Pirmā ievade, kas jāizmanto šajā bitu operācijā.",
	"@@Bitwise-Or_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Bitwise-Or_Raster2_tag0@@": "Otrā ievade, kas jāizmanto šajā bitu operācijā.",
	"@@Bitwise-Or_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "Ievade, kurai jāveic pārbīde.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "Ievade, ar kuru tiek definēts bitu pārbīdīšanas pozīciju skaits.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Bitwise-Xor_Raster_tag0@@": "Pirmā ievade, kas jāizmanto šajā bitu operācijā.",
	"@@Bitwise-Xor_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Bitwise-Xor_Raster2_tag0@@": "Otrā ievade, kas jāizmanto šajā bitu operācijā.",
	"@@Bitwise-Xor_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Boolean-and_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Boolean-and_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Boolean-and_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Boolean-and_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Boolean-and_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Boolean-and_Raster_tag0@@": "Pirmā ievade, kas jāizmanto šajā Būla operācijā.",
	"@@Boolean-and_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Boolean-and_Raster2_tag0@@": "Otrā ievade, kas jāizmanto šajā Būla operācijā.",
	"@@Boolean-and_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Boolean-Not_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Boolean-Not_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Boolean-Not_Raster_tag0@@": "Pirmā ievade, kas jāizmanto šajā Būla operācijā.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Boolean-Or_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Boolean-Or_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Boolean-Or_Raster_tag0@@": "Pirmā ievade, kas jāizmanto šajā Būla operācijā.",
	"@@Boolean-Or_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Boolean-Or_Raster2_tag0@@": "Otrā ievade, kas jāizmanto šajā Būla operācijā.",
	"@@Boolean-Or_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Boolean-Xor_Raster_tag0@@": "Pirmā ievade, kas jāizmanto šajā Būla operācijā.",
	"@@Boolean-Xor_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Boolean-Xor_Raster2_tag0@@": "Otrā ievade, kas jāizmanto šajā Būla operācijā.",
	"@@Boolean-Xor_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Buffered_Raster_tag0@@": "Ievades rastrs, kas jāsaglabā atmiņā.",
	"@@Calculator_Cellsize-Type_tag0@@": "Šūnu izmēri, kas jāizmanto, lai izveidotu izvades rastru.",
	"@@Calculator_Cellsize-Type_tag1@@": "Izvades šūnu izmērus varat izvēlēties, izmantojot tālāk norādītās opcijas nolaižamajā sarakstā.",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>Pirmais no</strong> — pirmā rastra mainīgā šūnu izmēri.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Min. no</strong> — ievades rastru minimālie šūnu izmēri.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Maks. no</strong> — ievades rastru maksimālie šūnu izmēri.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Vidējais no</strong> — ievades rastru vidējie šūnu izmēri.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Pēdējais no</strong> — pēdējā rastra mainīgā šūnu izmēri.",
	"@@Calculator_Cellsize-Type_tag12@@": "Noklusējuma atlase ir <strong>Maks. no</strong>.",
	"@@Calculator_Expression_tag0@@": "Veidojiet algebrisku izteiksmi, lai veiktu ievades rastra telpisko analīzi.",
	"@@Calculator_Expression_tag1@@": "Izteiksmes izveidei var izmantot visas esošās matemātiskās funkcijas. Pieejamie operatori ir uzskatīti tālāk tekstā.",
	"@@Calculator_Expression_tag2@@": "Aritmētiskās operācijas",
	"@@Calculator_Expression_tag3@@": "Saskaitīšana: +",
	"@@Calculator_Expression_tag4@@": "Dalīšana: /",
	"@@Calculator_Expression_tag5@@": "Dalījuma atlikums: %",
	"@@Calculator_Expression_tag6@@": "Reizināšana: *",
	"@@Calculator_Expression_tag7@@": "Pakāpe: **",
	"@@Calculator_Expression_tag8@@": "Atņemšana: -",
	"@@Calculator_Expression_tag9@@": "Būla operācijas",
	"@@Calculator_Expression_tag10@@": "Būla UN: &&",
	"@@Calculator_Expression_tag11@@": "Būla VAI: ||",
	"@@Calculator_Expression_tag12@@": "Salīdzināšanas operācijas",
	"@@Calculator_Expression_tag13@@": "Vienāds ar: ==",
	"@@Calculator_Expression_tag14@@": "Lielāks nekā: >",
	"@@Calculator_Expression_tag15@@": "Lielāks nekā vai vienāds ar: >=",
	"@@Calculator_Expression_tag16@@": "Mazāks kā: <",
	"@@Calculator_Expression_tag17@@": "Mazāks nekā vai vienāds ar: <=",
	"@@Calculator_Expression_tag18@@": "Nav vienāds ar: !=",
	"@@Calculator_Expression_tag19@@": "Papildu operācijas",
	"@@Calculator_Expression_tag20@@": "Minimums divi rastri uz katra pikseļa bāzes: min(a,b)",
	"@@Calculator_Expression_tag21@@": "Maksimums divi rastri uz katra pikseļa bāzes: min(a,b)",
	"@@Calculator_Expression_tag22@@": "Tālāk ir daži izteiksmju piemēri.",
	"@@Calculator_Expression_tag23@@": "Vienkāršs nosacījuma priekšraksts: rastrā (apzīmēts ar T) atrodiet augstuma vērtības virs 4000 pēdām un piešķiriet šīm teritorijām vērtību 1, bet visām citām teritorijām — vērtību 0.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Ligzdots nosacījuma priekšraksts: atrodiet teritorijas, kurās slīpums (apzīmēts ar b1) ir mazāks par 10 grādiem un NDVI (apzīmēts ar b2) ir virs 0,5, un piešķiriet šīm teritorijām vērtību 1. Visām citām teritorijām piešķiriet vērtību 2, ja slīpums ir lielāks par 10 grādiem un augstums (apzīmēts ar b3) ir lielāks par 2500 pēdām. Visām citām teritorijām tiek piešķirta vērtība 3.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Izvēlieties, kāds apjoms jāizmanto izvades rastrā:</p><ul><li><p>Pirmais -- lai noteiktu apstrādes apjomu, izmantojiet pirmā ievades rastra apjomu.</p></li><li>Pārklājums -- lai noteiktu apstrādes apjomu, izmantojiet pikseļus, kas pārklājas. Tas ir noklusējuma iestatījums.</li><li>Apvienojums -- apstrādes apjomu noteikšanai izmantojiet visu rastru apjomu.</li><li>Pēdējais -- lai noteiktu apstrādes apjomu, izmantojiet pēdējās ievades rastra apjomu.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "Lietotāja definēts mainīgā nosaukums un ievades rastrs.",
	"@@Classify_Input-Definition-File_tag0@@": "Ievades Esri klasifikatora definīcijas fails (${.ecd}), kurā ir statistikas un cita klasifikācijas informācija noteiktām datu kopām, klasifikatoriem un izvēlētiem atribūtiem.",
	"@@Classify_Raster_tag0@@": "Rastra datu kopa, ko vēlaties klasificēt.",
	"@@Classify_Raster2_tag0@@": "Papildu izvēles rastra datu kopa, ko var iekļaut klasifikatorā, piemēram, kā segmentētu vai multispektrālu attēlu vai augstuma datus, kas tiek lietoti, lai ģenerētu jaudīgāku definīciju savai datu kopai. Rastra datu kopai šim parametram ir jāatbilst tai, kas tiek lietota, lai izveidotu ievades Esri klasifikatora definīcijas failu.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "Lai norādītu izgriezumu pārklājumu, var izmantot tālāk minēto.",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Izgriezumu rastrs</strong> — izgriezumu rastru pārklājums",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Pielāgots pārklājums</strong> — X un Y minimālās un maksimālās koordinātas",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Pašreizējais kartes pārklājums</strong> — pašreiz redzamās kartes pārklājums",
	"@@Clip_Clipping-Raster_tag0@@": "Rastra slānis, kas tiek izmantots izgriešanai.",
	"@@Clip_Clipping-Type_tag0@@": "Norādiet, vai vēlaties saglabāt teritoriju izgriezuma ģeometrijā vai ārpus tās.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Izgriezt iekšpusē</strong> — tiks noņemti attēli izgriezuma pārklājumā.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Izgriezt ārpusē</strong> — tiks noņemti attēli ārpus izgriezuma pārklājuma.",
	"@@Clip_Custom-Extent_tag0@@": "Norādiet četras koordinātas, ar kurām tiek definēts rastra izgriešanai izmantotā robežu lodziņa pārklājums.",
	"@@Clip_Output-Extent_tag0@@": "Pašreiz izgriežamā pārklājuma x un y koordinātas.",
	"@@Clip_Output-Extent_tag1@@": "Poga <strong>Tvert pašreizējo kartes pārklājumu</strong> izmanto redzamo pārklājumu aktīvajā kartē.",
	"@@Clip_Raster_tag0@@": "Ievades rastra slānis.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "Kad tas ir izvēlēts, dati tiek izgriezti saskaņā ar norādītās elementu klases ģeometriju.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Nav atzīmēta — funkcija lieto izgriešanas ģeometriju, kas norādīta, izmantojot <strong>Taisnstūri</strong>. Tā ir noklusējuma vērtība.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Atzīmēta--Funkcija izmanto izgriešanas ģeometriju, kas ir norādīta, izmantojot elementu klasi.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "Veicamās krāsu konvertēšanas veids:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "no HSV uz RGB;",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "no RGB uz HSV.",
	"@@Color-Model-Conversion_Raster_tag0@@": "Ievades rastrs.",
	"@@Colormap_Color-Ramp_tag0@@": "Izvēlieties esošu krāsu rampu.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Izvēlieties krāsu shēmas tipu, lai atveidotu ievades rastru",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Krāsu rampa--Izmantojiet krāsu rampu.",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Krāsu karte--Lietojiet jau iepriekš eksistējošu krāsu karti.",
	"@@Colormap_Colormap_tag0@@": "Nolaižamajā sarakstā ir pieejamas tālāk minētās noklusējuma krāsu kartes.",
	"@@Colormap_Colormap_tag1@@": "Augstums--Krāsu karte, kas pakāpeniski nomainās no ciāna līdz violetai un tad līdz melnai.",
	"@@Colormap_Colormap_tag2@@": "Pelēka--Krāsu karte, kas pakāpeniski nomainās no melnas uz baltu.",
	"@@Colormap_Colormap_tag7@@": "Reljefa ēnojuma funkcija -- pelēktoņu krāsu karte, lai vizualizētu reljefa virsmas trīsdimensiju attēlojumu, attēla ēnošanai ņemot vērā saules relatīvo novietojumu.",
	"@@Colormap_Colormap_tag3@@": "NDVI--Krāsu karte, kas vizuāli ataino veģetāciju. Vērtības ap nulli ir zilā krāsā. Zemas vērtības ir brūnā krāsā. Pēc tam krāsas pakāpeniski nomainās no sarkanas uz oranžu, dzeltenu, zaļu un melnu atkarībā no tā, kā veģetācijas indekss nomainās no zema uz augstu.",
	"@@Colormap_Colormap_tag4@@": "NDVI2--Krāsu karte, kas vizuāli ataino veģetāciju. Zemas vērtības ir diapazonā no baltas līdz zaļai krāsai. Pēc tam krāsas nomainās no pelēkas uz violetu, tumši zilu un melnu atkarībā no tā, kā veģetācijas indekss nomainās no zema uz augstu.",
	"@@Colormap_Colormap_tag5@@": "NDVI3--Krāsu karte, kas vizuāli ataino veģetāciju. Vērtības ap nulli ir zilā krāsā. Pēc tam krāsas pakāpeniski nomainās no sarkanas uz oranžu un zaļu atkarībā no tā, kā veģetācijas indekss nomainās no zema uz augstu.",
	"@@Colormap_Colormap_tag6@@": "Nejauša secība--Karte ar nejaušas secības krāsām.",
	"@@Colormap_Raster_tag0@@": "Ievades rastrs.",
	"@@Colormap-To-RGB_Raster_tag0@@": "Ievades krāsu kartes rastrs.",
	"@@Complex_Raster_tag0@@": "Ievades rastrs.",
	"@@Composite-Bands_Rasters_tag0@@": "Izmantojiet nolaižamo sarakstu vai pogu <strong>Pārlūkot</strong>, lai izvēlētos rastra ievades.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Izvēlieties, kuru šūnas izmēru izmantot rezultāta rastrā. Ja visi ievades šūnu izmēri ir vienādi, visas opcijas uzrādīs vienus un tos pašus rezultātus.</p><ul><li>Pirmais -- izmantojiet pirmo ievades rastru šūnas izmēru.</li><li>Min. -- tiek izmantots mazāko visu ievades rastru šūnas izmērs.</li><li>Maks. -- tiek izmantots lielāko visu ievades rastru šūnas izmērs. Tas ir noklusējuma iestatījums.</li><li>Vidējais -- tiek izmantots vidējais visu ievades rastru šūnas izmērs.</li><li>Pēdējais -- tiek izmantots pēdējais visu ievades rastru šūnas izmērs.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Con-function_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Con-function_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Con-function_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Con-function_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Con-function_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Con_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Con_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Con_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Con_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Con_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Con_False-Raster_tag0@@": "Ievade, kuras vērtības tiek izmantotas kā ievades pikseļu vērtības, ja nosacījums ir aplams. Tā var būt vesels skaitlis, skaitlis ar peldošo punktu vai konstante.",
	"@@Con_Raster_tag0@@": "Ievades rastrs, kas ataino loģiskās matemātiskās rastra funkcijas Būla rezultātu. Vērtības būs 1 (patiess) vai 0 (aplams). Tas var būt vesels skaitlis vai rastrs ar peldošo punktu.",
	"@@Con_True-Raster_tag0@@": "Ievade, kuras vērtības tiek izmantotas kā izvades pikseļu vērtības, ja nosacījums ir patiess. Tā var būt vesels skaitlis, skaitlis ar peldošo punktu vai konstante.",
	"@@Constant_Constant_tag0@@": "Konstantes vērtība, kas jāpievieno virtuālajam rastram.",
	"@@Constant_Raster-Info_tag0@@": "Izmantojiet pogu <strong>Ielādēt veidnes rastru</strong>, lai ielādētu veidni no direktorija vai portāla.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "Izlīdzināšanas apmērs, kas jāpiemēro kontūrlīnijai. Noklusējuma vērtība ir 2,5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "Zemāka vērtība rada horizontāli ar lielāku granulitāti un mazāku izlīdzinājumu, kamēr augstāka vērtība veido izlīdzinātāku horizontāli, kas izskatās mazāk robaina.",
	"@@Contour_Contour-Interval_tag0@@": "Horizontāļu augstuma starpība.",
	"@@Contour_Contour-Interval_tag1@@": "Relatīvi plakanās teritorijās tiek izmantots mazs horizontāļu intervāls, kamēr mainīgam vai kalnainam reljefam tiek lietoti lielāki horizontāļu intervāli.",
	"@@Contour_Contour-Type_tag0@@": "Izveidojamo kontūru tipi:",
	"@@Contour_Contour-Type_tag1@@": "<strong>Kontūras pildījums</strong> — aizpilda teritoriju starp katru no horizontālēm ar kvantētu augstuma vērtību.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Horizontāles</strong> — apvieno punktus ar vienādu augstumu, lai izveidotu līniju, kas parāda konstantu augstumu.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Tikai izlīdzināta virsma</strong> — izlīdzina ievades augstuma slāni, taču neveido horizontāles.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "Indeksa horizontāle, kas tiek attēlota kā trekna līnija.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "Noklusējuma vērtība ir 5, tādēļ katra 5. horizontāle ir bieza.",
	"@@Contour_Number-Of-Contours_tag0@@": "Attēlojumā ģenerējamo horizontāļu skaits. Tas dinamiski pielāgo horizontāļu intervālu, lai tas atbilstu redzamajam reljefam, vienlaikus uzturot standartizētus intervālus, piemēram, 1, 5, 10 un tā tālāk.",
	"@@Contour_Raster_tag0@@": "Vienas joslas rastra augstuma datu kopa.",
	"@@Contour_Z-Base_tag0@@": "Bāzes horizontāles vērtība. Horizontāles pēc vajadzības tiek ģenerētas virs un zem šīs vērtības, lai nosegtu ievades rastra visu vērtību diapazonu. Noklusējuma vērtība ir 0.",
	"@@Contour_Z-Base_tag1@@": "Atkarībā no avota augstuma datu kopas ar vērtību 0 bieži vien tiek attēlots vidējais jūras līmenis.",
	"@@Contour_Z-Factor_tag0@@": "Mērvienību konvertēšanas koeficients, kas tiek lietots, ģenerējot horizontāles. Noklusējuma vērtība ir 1.",
	"@@Contour_Z-Factor_tag1@@": "Horizontāles tiek ģenerētas, pamatojoties uz ievades rastra z vērtībām, kas bieži vien tiek mērītas tādās mērvienībās kā metri vai pēdas. Izmantojot noklusējuma vērtību 1, horizontāles būs tajās pašās mērvienībās kā ievades rastra z vērtības. Lai izveidotu horizontāles ar citām mērvienībām, kas atšķiras no z vērtībām, iestatiet attiecīgo vērtību z koeficientam. Ņemiet vērā, ka šim rīkam virsmas x,y un virsmas z mērvienībām nav jābūt konsekventām.",
	"@@Contour_Z-Factor_tag2@@": "Piemēram, ja ievades rastrā augstuma vērtības ir pēdas, bet jūs vēlaties ģenerēt horizontāles, pamatojoties uz metriskajām mērvienībām, iestatiet z koeficientu 0,3048 (jo 1 pēda = 0,3048 metri).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Pielāgojiet rastra slāņa spilgtumu.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "Varat izmantot slīdni, lai mainītu spilgtuma nobīdi, vai ievadīt vērtību.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Pielāgojiet rastra slāņa kontrastu.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "Varat izmantot slīdni, lai mainītu kontrasta nobīdi, vai ievadīt vērtību.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "Ievades rastrs, kuram var rediģēt spilgtumu un kontrastu.",
	"@@Convolution_kernel_tag0@@": "<p>Šajā tabulā ir parādīts, kā katrs pikselis tiek novērtēts filtrēšanas procesa laikā. Šo tabulu var rediģēt, ja izvēlaties parametru<strong>Lietotāja definēts</strong>kā<strong>veidu</strong>.</p>",
	"@@Convolution_Raster_tag0@@": "Ievades rastra datu kopa.",
	"@@Convolution_Type_tag0@@": "Izvēlieties, kāda veida filtrēšanu vēlaties veikt. Ir pieejamas asuma palielināšanas, izplūšanas un malu noteikšanas opcijas vai var definēt savu personīgo uz kodolu balstīto filtru.",
	"@@Corridor_Distance-Raster-1_tag0@@": "Pirmais ievades attāluma rastrs. Tai jābūt uzkrāto izmaksu attāluma izvadei no opcijas Izmaksu attālums vai Ceļa attālums.",
	"@@Corridor_Distance-Raster-2_tag0@@": "Otrais ievades attāluma rastrs. Tai jābūt uzkrāto izmaksu attāluma izvadei no opcijas Izmaksu attālums vai Ceļa attālums.",
	"@@Cos_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Cos_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Cos_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Cos_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Cos_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Cos_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Cos_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Cos_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Cos_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Cos_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Cos_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Cos_Raster_tag0@@": "Ievade, kurai tiek aprēķinātas kosinusu vērtības.",
	"@@CosH_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@CosH_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@CosH_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@CosH_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@CosH_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@CosH_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@CosH_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@CosH_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@CosH_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@CosH_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@CosH_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@CosH_Raster_tag0@@": "Ievade, kurai tiek aprēķinātas hiperbolisko kosinusu vērtības.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Šis parametrs simulē piepūles palielinājumu, lai tiktu galā ar izmaksām, kad kumulatīvās izmaksas palielinās. Tas tiek izmantots, lai veidotu ceļotāja noguruma modeli. Pieaugošās kumulatīvās izmaksas, kas nepieciešamas, lai sasniegtu šūnu, tiek reizinātas ar pretestības koeficientu un pieskaitītas izmaksām, kas nepieciešamas, lai nokļūtu nākošajā šūnā.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Tā ir saliktās procentu likmes formulas modificētā versija, kas tiek izmantota, lai aprēķinātu domājamās izmaksas par pārvietošanos cauri šūnai. Tā kā pretestības koeficienta vērtība palielinās, tā palielina vēlāk apmeklēto šūnu izmaksas. Jo lielāks ir pretestības koeficients, jo lielākas ir izmaksas, kas nepieciešamas, lai sasniegtu nākamo šūnu, un tiek saskaitītas katram nākošajam pārvietošanās gadījumam. Tā kā pretestības koeficients ir līdzīgs saliktajai likmei un parasti kumulatīvo izmaksu vērtības ir ļoti lielas, atkarībā no kumulatīvo izmaksu vērtībām ieteicams izmantot mazus pretestības koeficientus, piemēram, 0,005 vai pat mazākus.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Cost-Allocation_Capacity_tag0@@": "Nosaka ceļotāja izmaksu kapacitāti avotam. Izmaksu aprēķini tiek turpināti katram avotam, līdz ir sasniegta norādītā kapacitāte.",
	"@@Cost-Allocation_Capacity_tag1@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Cost-Allocation_Capacity_tag2@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "Nepieciešamais ievades rastrs, kas nosaka pretestību vai izmaksas, lai planimetriski pārvietotos caur katru šūnu. Vērtība katras šūnas izvietojumā raksturo attālumu izmaksām uz vienu vienību, pārvietojoties cauri tai. Katra šūnas izvietojuma vērtība tiek reizināta ar šūnas izšķirtspēju un arī kompensē diagonālo pārvietošanos, lai iegūtu kopējās šūnas šķērsošanas izmaksas.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "<strong>Izmaksu rastra</strong> vērtības var būt vesels skaitlis vai peldošais punkts, taču nevar būt negatīvas vai ar nulles vērtību.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "Slieksnis, ko nevar pārsniegt kumulatīvo izmaksu vērtības. Ja kumulatīvo izmaksu attālums pārsniedz šo vērtību, šūnas izvietojuma izvades vērtība ir ${NoData}. Maksimālais attālums nosaka pārklājumu, kuram tiek aprēķināti kumulatīvo izdevumu attālumi. Noklusējuma attālums ir vienāds ar izvades rastra pārklājumu.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Reizinātājs, kas tiek piemērots izmaksu vērtībām.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Šis parametrs ļauj kontrolēt ceļojumu vai lielumu avota vietā. Jo lielāks ir reizinātājs, jo lielākas ir izmaksas par pārvietošanas cauri katrai šūnai.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Vērtībām ir jābūt lielākām par nulli. Noklusējuma vērtība ir 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Cost-Allocation_Source-Field_tag0@@": "Lauks, kas tiek lietots, lai piešķirtu vērtības avota novietojumiem. Tam ir jābūt veselam skaitlim. Ja ir iestatīta opcija <strong>Vērtības rastrs</strong>, šīs ievades vērtībām būs lielāka prioritāte nekā jebkādiem opcijas <strong>Avota lauks</strong> iestatījumiem.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "Nepieciešamais avotu izvietojumu ievades rastrs.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Šis ir rastrs, kas nosaka šūnas vai izvietojumus, no kuriem tiek aprēķināts vismazāk uzkrāto izmaksu attālums katram izvades šūnas izvietojumam.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "Ja ievade <strong>Avota rastrs</strong> ir peldošais punkts, jāiestata <strong>Vērtības rastrs</strong>, un tam ir jābūt veselam skaitlim. <strong>Vērtības rastram</strong> ir lielāka prioritāte nekā jebkuram opcijas <strong>Avota lauks</strong> iestatījumam.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "Sākotnējās izmaksas, ar kurām sākas izmaksu aprēķini. Šis parametrs ļauj norādīt ar avotu saistītās fiksētās izmaksas. Tā vietā, lai sāktu ar izmaksām 0, aprēķinu algoritms sāks aprēķinus ar norādīto vērtību.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "Vērtībai ir jābūt vienādai ar nulli vai lielākai. Noklusējuma vērtība ir 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Nosaka ceļotāja virzienu, kad tiek piemērotas avota pretestības koeficients un sākotnējās izmaksas.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>No avota</strong> — avota pretestības koeficients un sākotnējās izmaksas vispirms tiek piemērotas ievades avotam un pēc tam virzienā uz šūnām, kas nav avota šūnas. Tā ir noklusējuma vērtība.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>Uz avotu</strong> — avota pretestības koeficients un sākotnējās izmaksas vispirms tiek piemērotas katrai šūnai, kas nav avots, un pēc tam virzienā atpakaļ uz ievades avotu.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Vai nu norādiet opcijas <strong>No avota</strong> vai <strong>Uz avotu</strong> atslēgvārdu, kas tiks piemērots visiem avotiem, vai norādiet lauku funkcijā <strong>Avota rastrs</strong>, kas satur atslēgvārdus pārvietošanās virziena parādīšanai katrā avotā. Laukā jābūt virknei ${FROM_SOURCE} vai ${TO_SOURCE}.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "Ievades rastrs ar veseliem skaitļiem, kas norāda zonas vērtības, kuras jāizmanto katram ievades avota novietojumam. Aprēķiniem visām šūnām, kas atrodas avota novietojumā, tiks piešķirta vērtība, kas katrai avota novietojuma šūnai definēta <strong>Vērtības rastrs</strong>. <strong>Vērtības rastram</strong> ir lielāka prioritāte nekā jebkuram opcijas <strong>Avota lauks</strong> iestatījumam.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Šis parametrs simulē piepūles palielinājumu, lai tiktu galā ar izmaksām, kad kumulatīvās izmaksas palielinās. Tas tiek izmantots, lai veidotu ceļotāja noguruma modeli. Pieaugošās kumulatīvās izmaksas, kas nepieciešamas, lai sasniegtu šūnu, tiek reizinātas ar pretestības koeficientu un pieskaitītas izmaksām, kas nepieciešamas, lai nokļūtu nākošajā šūnā.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Tā ir saliktās procentu likmes formulas modificētā versija, kas tiek izmantota, lai aprēķinātu domājamās izmaksas par pārvietošanos cauri šūnai. Tā kā pretestības koeficienta vērtība palielinās, tā palielina vēlāk apmeklēto šūnu izmaksas. Jo lielāks ir pretestības koeficients, jo lielākas ir izmaksas, kas nepieciešamas, lai sasniegtu nākamo šūnu, un tiek saskaitītas katram nākošajam pārvietošanās gadījumam. Tā kā pretestības koeficients ir līdzīgs saliktajai likmei un parasti kumulatīvo izmaksu vērtības ir ļoti lielas, atkarībā no kumulatīvo izmaksu vērtībām ieteicams izmantot mazus pretestības koeficientus, piemēram, 0,005 vai pat mazākus.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Nosaka ceļotāja izmaksu kapacitāti avotam. Izmaksu aprēķini tiek turpināti katram avotam, līdz ir sasniegta norādītā kapacitāte.",
	"@@Cost-Back-Link_Capacity_tag1@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Cost-Back-Link_Capacity_tag2@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "Nepieciešamais ievades rastrs, kas nosaka pretestību vai izmaksas, lai planimetriski pārvietotos caur katru šūnu. Vērtība katras šūnas izvietojumā raksturo attālumu izmaksām uz vienu vienību, pārvietojoties cauri tai. Katra šūnas izvietojuma vērtība tiek reizināta ar šūnas izšķirtspēju un arī kompensē diagonālo pārvietošanos, lai iegūtu kopējās šūnas šķērsošanas izmaksas.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "<strong>Izmaksu rastra</strong> vērtības var būt vesels skaitlis vai peldošais punkts, taču nevar būt negatīvas vai ar nulles vērtību.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "Slieksnis, ko nevar pārsniegt kumulatīvo izmaksu vērtības. Ja kumulatīvo izmaksu attālums pārsniedz šo vērtību, šūnas izvietojuma izvades vērtība ir NoData. Maksimālais attālums nosaka pārklājumu, kuram tiek aprēķināti kumulatīvo izdevumu attālumi. Noklusējuma attālums ir vienāds ar izvades rastra pārklājumu.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Reizinātājs, kas tiek piemērots izmaksu vērtībām.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Šis parametrs ļauj kontrolēt ceļojumu vai lielumu avota vietā. Jo lielāks ir reizinātājs, jo lielākas ir izmaksas par pārvietošanas cauri katrai šūnai.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Vērtībām ir jābūt lielākām par nulli. Noklusējuma vērtība ir 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "Nepieciešamais avotu izvietojumu ievades rastrs.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Šis ir rastrs, kas nosaka šūnas vai izvietojumus, no kuriem tiek aprēķināts vismazāk uzkrāto izmaksu attālums katram izvades šūnas izvietojumam.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "Sākotnējās izmaksas, ar kurām sākas izmaksu aprēķini. Šis parametrs ļauj norādīt ar avotu saistītās fiksētās izmaksas. Tā vietā, lai sāktu ar izmaksām 0, aprēķinu algoritms sāks aprēķinus ar norādīto vērtību.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "Vērtībai ir jābūt vienādai ar nulli vai lielākai. Noklusējuma vērtība ir 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Nosaka ceļotāja virzienu, kad tiek piemērotas avota pretestības koeficients un sākotnējās izmaksas.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>No avota</strong> — avota pretestības koeficients un sākotnējās izmaksas vispirms tiek piemērotas ievades avotam un pēc tam virzienā uz šūnām, kas nav avota šūnas. Tā ir noklusējuma vērtība.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>Uz avotu</strong> — avota pretestības koeficients un sākotnējās izmaksas vispirms tiek piemērotas katrai šūnai, kas nav avots, un pēc tam virzienā atpakaļ uz ievades avotu.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Vai nu norādiet opcijas <strong>No avota</strong> vai <strong>Uz avotu</strong> atslēgvārdu, kas tiks piemērots visiem avotiem, vai norādiet lauku funkcijā <strong>Avota rastrs</strong>, kas satur atslēgvārdus ceļojuma virziena parādīšanai katrā avotā. Laukā jābūt virknei ${FROM_SOURCE} vai ${TO_SOURCE}.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Šis parametrs simulē piepūles palielinājumu, lai tiktu galā ar izmaksām, kad kumulatīvās izmaksas palielinās. Tas tiek izmantots, lai veidotu ceļotāja noguruma modeli. Pieaugošās kumulatīvās izmaksas, kas nepieciešamas, lai sasniegtu šūnu, tiek reizinātas ar pretestības koeficientu un pieskaitītas izmaksām, kas nepieciešamas, lai nokļūtu nākošajā šūnā.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Tā ir saliktās procentu likmes formulas modificētā versija, kas tiek izmantota, lai aprēķinātu domājamās izmaksas par pārvietošanos cauri šūnai. Tā kā pretestības koeficienta vērtība palielinās, tā palielina vēlāk apmeklēto šūnu izmaksas. Jo lielāks ir pretestības koeficients, jo lielākas ir izmaksas, kas nepieciešamas, lai sasniegtu nākamo šūnu, un tiek saskaitītas katram nākošajam pārvietošanās gadījumam. Tā kā pretestības koeficients ir līdzīgs saliktajai likmei un parasti kumulatīvo izmaksu vērtības ir ļoti lielas, atkarībā no kumulatīvo izmaksu vērtībām ieteicams izmantot mazus pretestības koeficientus, piemēram, 0,005 vai pat mazākus.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Cost-Distance_Capacity_tag0@@": "Nosaka ceļotāja izmaksu kapacitāti avotam. Izmaksu aprēķini tiek turpināti katram avotam, līdz ir sasniegta norādītā kapacitāte.",
	"@@Cost-Distance_Capacity_tag1@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Cost-Distance_Capacity_tag2@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "Nepieciešamais ievades rastrs, kas nosaka pretestību vai izmaksas, lai planimetriski pārvietotos caur katru šūnu. Vērtība katras šūnas izvietojumā raksturo attālumu izmaksām uz vienu vienību, pārvietojoties cauri tai. Katra šūnas izvietojuma vērtība tiek reizināta ar šūnas izšķirtspēju un arī kompensē diagonālo pārvietošanos, lai iegūtu kopējās šūnas šķērsošanas izmaksas.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "<strong>Izmaksu rastra</strong> vērtības var būt vesels skaitlis vai peldošais punkts, taču nevar būt negatīvas vai ar nulles vērtību.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "Slieksnis, ko nevar pārsniegt kumulatīvo izmaksu vērtības. Ja kumulatīvo izmaksu attālums pārsniedz šo vērtību, šūnas izvietojuma izvades vērtība ir NoData. Maksimālais attālums nosaka pārklājumu, kuram tiek aprēķināti kumulatīvo izdevumu attālumi. Noklusējuma attālums ir vienāds ar izvades rastra pārklājumu.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Reizinātājs, kas tiek piemērots izmaksu vērtībām.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Šis parametrs ļauj kontrolēt ceļojumu vai lielumu avota vietā. Jo lielāks ir reizinātājs, jo lielākas ir izmaksas par pārvietošanas cauri katrai šūnai.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Vērtībām ir jābūt lielākām par nulli. Noklusējuma vērtība ir 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Cost-Distance_Source-Raster_tag0@@": "Nepieciešamais avotu izvietojumu ievades rastrs.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Šis ir rastrs, kas nosaka šūnas vai izvietojumus, no kuriem tiek aprēķināts vismazāk uzkrāto izmaksu attālums katram izvades šūnas izvietojumam.",
	"@@Cost-Distance_Start-Cost_tag0@@": "Sākotnējās izmaksas, ar kurām sākas izmaksu aprēķini. Šis parametrs ļauj norādīt ar avotu saistītās fiksētās izmaksas. Tā vietā, lai sāktu ar izmaksām 0, aprēķinu algoritms sāks aprēķinus ar norādīto vērtību.",
	"@@Cost-Distance_Start-Cost_tag1@@": "Vērtībai ir jābūt vienādai ar nulli vai lielākai. Noklusējuma vērtība ir 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Nosaka ceļotāja virzienu, kad tiek piemērotas avota pretestības koeficients un sākotnējās izmaksas.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>No avota</strong> — avota pretestības koeficients un sākotnējās izmaksas vispirms tiek piemērotas ievades avotam un pēc tam virzienā uz šūnām, kas nav avota šūnas. Tā ir noklusējuma vērtība.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>Uz avotu</strong> — avota pretestības koeficients un sākotnējās izmaksas vispirms tiek piemērotas katrai šūnai, kas nav avots, un pēc tam virzienā atpakaļ uz ievades avotu.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Vai nu norādiet opcijas <strong>No avota</strong> vai <strong>Uz avotu</strong> atslēgvārdu, kas tiks piemērots visiem avotiem, vai norādiet lauku funkcijā <strong>Avota rastrs</strong>, kas satur atslēgvārdus ceļojuma virziena parādīšanai katrā avotā. Laukā jābūt virknei ${FROM_SOURCE} vai ${TO_SOURCE}.",
	"@@Curvature_Curvature-Type_tag0@@": "Izliekuma veids, kas izceļ slīpuma dažādos aspektus. Pastāv trīs izliekumu opcijas:",
	"@@Curvature_Curvature-Type_tag1@@": "Formas izliekums plānā--Tas ir perpendikulārs maksimālā slīpuma virzienam. Tā atspoguļo plūsmas konverģenci un diverģenci uz virsmas.",
	"@@Curvature_Curvature-Type_tag2@@": "Profila izliekums--Tas ir paralēls slīpumam un norāda maksimālā slīpuma virzienu. Tas ietekmē plūsmas paātrinājumu un palēninājumu uz virsmas.",
	"@@Curvature_Curvature-Type_tag3@@": "Standarta — apvieno <strong>Profils</strong> un <strong>Formas izliekums plānā</strong> izliekumus.",
	"@@Curvature_DEM_tag0@@": "Digitālā augstuma modeļa (DEM) rastrs.",
	"@@Curvature_Z-Factor_tag0@@": "Z koeficients pielāgo z vienību mērvienības, kad tās atšķiras no x,y vienībām uz ievades virsmas. Ja x,y un z vienībām ir vienādas mērvienības, z koeficients ir jāiestata kā 1. Aprēķinot gala izvades virsmu, ievades virsmas z vērtības tiek reizinātas ar z koeficientu. Piemēram, ja z vienības ir izteiktas pēdās un x,y vienības metros, jums jāizmanto z koeficients 0,3048, lai pārvērstu z vienības no pēdām uz metriem, jo 1 pēda = 0,3048 metri.",
	"@@Divide_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Divide_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Divide_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Divide_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Divide_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Divide_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Divide_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Divide_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Divide_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Divide_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Divide_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Divide_Raster_tag0@@": "Ievade, kuras vērtība tiks dalīta ar otrās ievades vērtību.",
	"@@Divide_Raster_tag1@@": "Šim parametram var ievadīt skaitli ar nosacījumu, ka parametrā ${Raster2} ir norādīts rastrs.",
	"@@Divide_Raster2_tag0@@": "Ievade, ar kuras vērtību tiks dalīta pirmās ievades vērtība.",
	"@@Divide_Raster2_tag1@@": "Šim parametram var ievadīt skaitli ar nosacījumu, ka parametrā ${Raster} ir norādīts rastrs.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "Ievadītais digitālā augstuma modelis.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "Maksimālā tukšuma platuma vērtība tiek lietota, lai norādītu aizpildāmā tukšumu lielāko izmēru. Ja ap tukšumu esošā robežu lodziņa platums vai augstums ir lielāks par maksimālo tukšuma platuma vērtību, tad tukšums netiek aizpildīts. Šī parametra mērvienības ir tādas pašas kā tās, kas tiek izmantotas jūsu datu telpiskās atskaites sistēmā.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Ja šis parametrs ir tukšs vai tā vērtība ir ${0}, maksimālais platums netiek lietots un visi tukšumi tiek aizpildīti. Vērtība ${-1} nozīmē to, ka tukšumu aizpildīšana netiek veikta.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "Tukšumu aizpildīšanai izmantotais maksimālais meklēšanas rādiuss. Tukšums, kas atrodas tālāk par šo sliekšņa vērtību no jebkura derīga pikseļa, paliek par tukšumu. Šī parametra mērvienības ir tādas pašas kā tās, kas tiek izmantotas jūsu datu telpiskās atskaites sistēmā.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Ja šī parametra vērtība ir tukšums, ${0} vai ${-1}, šis parametrs netiek izmantots.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Equal-to_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Equal-to_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Equal-to_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Equal-to_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Equal-to_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Equal-to_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Equal-to_Raster_tag0@@": "Ievade, kas tiek izmantota vienādības salīdzinājumam ar otro ievadi.",
	"@@Equal-to_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Equal-to_Raster2_tag0@@": "Ievade, kas tiek izmantota vienādības salīdzinājumam ar pirmo ievadi.",
	"@@Equal-to_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "Šūnas izmērs, pie kura tiek izveidots izvades rastrs.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Ja šūnas izmērs ir skaidri iestatīts parametrā <strong>Analīzes darba vides</strong>, tas būs šūnas noklusējuma izmērs. Ja tas nav iestatīts, izvades šūnas izmērs ir tāds pats kā parametrā <strong>Avota rastrs</strong>.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Nosaka, vai aprēķināt attālumu, izmantojot plaknes (plakana zeme) vai ģeodēzisko (elipsoīda) metodi.",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Ģeodēziskā--Īsākā līnija starp diviem punktiem uz zemes virsmas elipsoīdā. Tādēļ neatkarīgi no ievades vai izvades projekcijas, rezultāti nemainās. Viens no ģeodēziskās līnijas izmantošanas veidiem ir, kad vēlaties noteikt īsāko attālumu starp divām pilsētām pa lidmašīnas lidojuma ceļu. Tas ir pazīstams arī kā ortodromas līnija, ja ir bāzēts uz sfēru, nevis elipsoīdu.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Planārā--Planārajiem mērījumiem tiek izmantota divdimensionālā Dekarta matemātika, lai aprēķinātu garumu un laukumu. Šī opcija ir pieejama tikai tad, kad tiek mērīta projicētā koordinātu sistēma un šādas sistēmas divdimensionālā plakne tiek izmantota kā mērījumu pamats.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Nosaka sliekšņa attālumu, kurā tiek noteikts tuvākais avots. Ja attālums līdz tuvākajam avotam ir lielāks par to, izvade šai šūnai ir ${NoData}.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "Noklusējuma attālums ir vienāds ar izvades rastra pārklājumu.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "Rastrs, kas nosaka barjeras.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "Kur nav barjeru, datu kopai jāsatur vērtību ${NoData}. Barjeras tiek atspoguļotas ar derīgām vērtībām, tostarp arī nulli.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "Barjeras var tikt definētas, izmantojot veselu skaitli vai rastru ar peldošo punktu.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "Lauks, kas tiek lietots, lai piešķirtu vērtības avota novietojumiem. Tam ir jābūt veselam skaitlim. Ja ir iestatīta opcija <strong>Vērtības rastrs</strong>, šīs ievades vērtībām būs lielāka prioritāte nekā jebkādiem opcijas <strong>Avota lauks</strong> iestatījumiem.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "Nepieciešamais ievades rastrs, kas nosaka avota izvietojumu. Pamatojoties uz Eiklīda attālumu, tuvākais avots tiek noteikts katrai šūnai izvadē",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "Ievades veids var būt vesels skaitlis vai skaitlis ar peldošo punktu.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "Ievades rastrs ar veseliem skaitļiem, kas norāda zonas vērtības, kuras jāizmanto katram ievades avota novietojumam. Aprēķiniem visām šūnām, kas atrodas avota novietojumā, tiks piešķirta vērtība, kas katrai avota novietojuma šūnai definēta <strong>Vērtības rastrs</strong>. <strong>Vērtības rastram</strong> ir lielāka prioritāte nekā jebkuram opcijas <strong>Avota lauks</strong> iestatījumam.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "Šūnas izmērs, pie kura tiek izveidots izvades rastrs.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Ja šūnas izmērs ir skaidri iestatīts parametrā <strong>Analīzes darba vides</strong>, tas ir šūnas noklusējuma izmērs. Ja tas nav iestatīts, izvades šūnas izmērs ir tāds pats kā parametrā <strong>Avota rastrs</strong>.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Nosaka, vai aprēķināt attālumu, izmantojot plaknes (plakana zeme) vai ģeodēzisko (elipses) metodi.",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Ģeodēziskā--Īsākā līnija starp diviem punktiem uz zemes virsmas elipsoīdā. Tādēļ neatkarīgi no ievades vai izvades projekcijas rezultāti nemainās. Viens no ģeodēziskās līnijas izmantošanas veidiem ir, kad vēlaties noteikt īsāko attālumu starp divām pilsētām pa lidmašīnas lidojuma ceļu. Tas ir pazīstams arī kā ortodromas līnija, ja ir bāzēts uz sfēru, nevis elipsoīdu.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Planārā--Planārajiem mērījumiem tiek izmantota divdimensionālā Dekarta matemātika, lai aprēķinātu garumu un laukumu. Šī opcija ir pieejama tikai tad, kad tiek mērīta projicētā koordinātu sistēma un šādas sistēmas divdimensionālā plakne tiek izmantota kā mērījumu pamats.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Nosaka sliekšņa attālumu, kurā tiek aprēķināts tuvākā avota virziens. Ja attālums līdz tuvākajam avotam ir lielāks par to, izvade šai šūnai ir ${NoData}.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "Noklusējuma attālums ir vienāds ar izvades rastra pārklājumu.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "Rastrs, kas nosaka barjeras.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "Kur nav barjeru, datu kopai jāsatur vērtību NoData. Barjeras tiek atspoguļotas ar derīgām vērtībām, tostarp arī nulli.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "Barjeras var tikt definētas, izmantojot veselu skaitli vai rastru ar peldošo punktu.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "Nepieciešamais ievades rastrs, kas nosaka šūnas vai izvietojumus, līdz kuriem tiek aprēķināts Eiklīda virziens katram no izvades šūnas izvietojumiem.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "Ievades veids var būt vesels skaitlis vai skaitlis ar peldošo punktu.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "Šūnas izmērs, pie kura tiek izveidots izvades rastrs.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Ja šūnas izmērs ir skaidri iestatīts parametrā <strong>Analīzes darba vides</strong>, tas ir šūnas noklusējuma izmērs. Ja tas nav iestatīts, izvades šūnas izmērs ir tāds pats kā parametrā <strong>Avota rastrs</strong>.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Nosaka, vai aprēķināt attālumu, izmantojot plaknes (plakana zeme) vai ģeodēzisko (elipses) metodi.",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Ģeodēziskā--Īsākā līnija starp diviem punktiem uz zemes virsmas elipsoīdā. Tādēļ neatkarīgi no ievades vai izvades projekcijas rezultāti nemainās. Viens no ģeodēziskās līnijas izmantošanas veidiem ir, kad vēlaties noteikt īsāko attālumu starp divām pilsētām pa lidmašīnas lidojuma ceļu. Tas ir pazīstams arī kā ortodromas līnija, ja ir bāzēts uz sfēru, nevis elipsoīdu.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Planārā--Planārajiem mērījumiem tiek izmantota divdimensionālā Dekarta matemātika, lai aprēķinātu garumu un laukumu. Šī opcija ir pieejama tikai tad, kad tiek mērīta projicētā koordinātu sistēma un šādas sistēmas divdimensionālā plakne tiek izmantota kā mērījumu pamats.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "Slieksnis, ko nevar pārsniegt kumulatīvo attālumu vērtības. Ja kumulatīvais Eiklīda attālums pārsniedz šo vērtību, šūnas izvietojuma izvades vērtība ir NoData.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "Noklusējuma attālums ir vienāds ar izvades rastra pārklājumu.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "Rastrs, kas nosaka barjeras.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "Kur nav barjeru, datu kopai jāsatur vērtību ${NoData}. Barjeras tiek atspoguļotas ar derīgām vērtībām, tostarp arī nulli.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "Barjeras var tikt definētas, izmantojot veselu skaitli vai rastru ar peldošo punktu.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "Nepieciešamais ievades rastrs, kas nosaka šūnas vai izvietojumus, līdz kuriem tiek aprēķināts Eiklīda attālums katram no izvades šūnas izvietojumiem.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "Ievades veids var būt vesels skaitlis vai skaitlis ar peldošo punktu.",
	"@@Exp_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Exp_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Exp_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Exp_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Exp_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Exp_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Exp_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Exp_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Exp_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Exp_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Exp_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Exp_Raster_tag0@@": "Ievades vērtības, kurām jāatrod eksponenciālais pieaugums ar bāzi e.",
	"@@Exp10_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Exp10_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Exp10_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Exp10_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Exp10_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Exp10_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Exp10_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Exp10_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Exp10_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Exp10_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Exp10_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Exp10_Raster_tag0@@": "Ievades vērtības, kurām jāatrod eksponenciālais pieaugums ar bāzi 10.",
	"@@Exp2_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Exp2_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Exp2_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Exp2_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Exp2_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Exp2_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Exp2_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Exp2_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Exp2_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Exp2_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Exp2_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Exp2_Raster_tag0@@": "Ievades vērtības, kurām jāatrod eksponenciālais pieaugums ar bāzi 2.",
	"@@Extract-Bands_Band_tag0@@": "Izvēlieties joslas, kas jāizgūst no saraksta, pamatojoties uz izmantojamo parametra opciju <strong>Metode</strong>.",
	"@@Extract-Bands_Combination_tag0@@": "Joslu kombinācija vai secība. Izvēles saraksts ir atkarīgs no norādītās opcijas <strong>Metode</strong>. Piemēram: ja opcijas <strong>Metode</strong> iestatījums ir <strong>Joslu nosaukumi</strong>, varat izvēlēties kombināciju Zils, Zaļš un Sarkans, lai izgūtu dabisko krāsu attēlu.",
	"@@Extract-Bands_Method_tag0@@": "Izvēlieties vienu no tālāk minētajām joslu izvilkšanas metodēm.",
	"@@Extract-Bands_Method_tag1@@": "<strong>Joslas ID</strong> — joslas apzīmējums vai numurs, kas ir unikāls katram sensoram. Šie ID var būt identiski <strong>Joslas nosaukumiem</strong>.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Joslu nosaukumi</strong> — izmanto joslas nosaukumu, kas parāda viļņa garuma intervālu elektromagnētiskajā spektrā (piemēram, sarkanās krāsas, tuvā infrasarkanā starojuma, termiskā infrasarkanā starojuma). Tas var būt apzīmēts arī ar joslas numura ID.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Joslas viļņu garumi</strong> — elektromagnētiskā spektra viļņa garums.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Norādiet darbību, kas tiek veikta, kad nav pieejama izvilkšanas joslu sarakstā.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Labākā atbilstība</strong> — pamatojoties uz viļņa garumu, atrod labāko pieejamo joslu, ko izmantot trūkstošās vietā tā, lai funkcijas darbībā nerastos kļūmes.",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Kļūme</strong> — ja ievades datu kopā trūks kāda josla, kas norādīta parametrā <strong>Josla</strong>, funkcija nedarbosies.",
	"@@Extract-Bands_Raster_tag0@@": "Rastra rezultāts, no kura tiks izvilkta josla vai joslas.",
	"@@Fill_Raster_tag0@@": "Vienas joslas augstuma rastrs.",
	"@@Fill_Z-Limit_tag0@@": "Maksimālā augstuma starpība starp ieteku un tās aizpildāmo izteku.",
	"@@Fill_Z-Limit_tag1@@": "Ja šim parametram nav norādīta vērtība, visas ietekas tiek aizpildītas neatkarīgi no dziļuma.",
	"@@Fill_Z-Limit_tag2@@": "<strong>Z ierobežojuma</strong> vērtībai jābūt lielākai par nulli.",
	"@@Float_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Float_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Float_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Float_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Float_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Float_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Float_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Float_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Float_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Float_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Float_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Float_Raster_tag0@@": "Ievades rastrs, kas ir jāpārvērš par skaitli ar peldošo punktu.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "Ievades rastrs, kas rāda plūsmas virzienu no katras šūnas.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "Plūsmas virziena rastru var izveidot, lietojot funkciju <strong>Plūsmas virziens</strong>.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Definē ievades plūsmas virziena rastra tipu.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong> — ievades plūsmas virziena rastrs ir D8. Tā ir noklusējuma vērtība.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> — ievades plūsmas virziena rastrs ir D-Infinity (DINF).",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> — ievades plūsmas virziena rastrs ir Multi Flow Direction (MFD).",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "Izvades kumulatīvais rastrs var būt vesels skaitlis vai skaitlis ar peldošo punktu.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Peldošais</strong> — izvades rastra veids būs peldošais punkts. Tā ir noklusējuma vērtība.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Vesels skaitlis</strong> — izvades kumulatīvais rastrs būs vesels skaitlis.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "Papildu izvēles ievades rasts, lai piešķirtu svaru katram pikselim.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Ja svara rastrs nav norādīts, katram pikselim tiek piešķirts svars 1.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Definē ievades plūsmas virziena rastra tipu.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong> — ievades plūsmas virziena rastrs ir D8. Tā ir noklusējuma vērtība.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> — ievades plūsmas virziena rastrs ir D-Infinity (DINF).",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> — ievades plūsmas virziena rastrs ir Multi Flow Direction (MFD).",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Norāda, vai malas pikseļiem plūsma vienmēr būs uz āru vai tiks ievēroti normāli plūsmas likumi.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>Nē</strong> — ja maksimālais kritums malas pikseļa iekšējā pusē ir lielāks par nulli, plūsmas virziens tiek noteikts kā parasti; pretējā gadījumā plūsmas virziens ir malas virzienā. Tā tas tiek darīts pikseļiem, kuros plūsma ir no virsmas rastra malas uz iekšpusi. Tā ir noklusējuma vērtība.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Jā</strong> — visiem pikseļiem pie virsmas rastra malas plūsma ir uz ārējo pusi no virsmas rastra.",
	"@@Flow-Direction_Raster_tag0@@": "Ievades rastrs atspoguļo nepārtraukti paaugstinošos virsmu.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Nosaka, vai tiek aprēķināts plūsmas attāluma vertikālais vai horizontālais komponents.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Horizontāli</strong> — plūsmas attāluma aprēķini parāda plūsmas attāluma horizontālo komponentu no katra pikseļa domēnā līdz pikselim(-ļiem) straumē, kurā(-os) no tiem nonāk plūsma.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Vertikāli</strong> — plūsmas attāluma aprēķini parāda plūsmas attāluma vertikālo komponentu no katra pikseļa domēnā līdz pikselim(-ļiem) straumē, kurā(-os) no tiem nonāk plūsma. Tā ir noklusējuma vērtība.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "Ievades rastrs, kas rāda plūsmas virzienu no katra pikseļa.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "Ja tiek nodrošināts plūsmas virziena rastrs, tiks izmantots(-i) tikai lejupējā slīpuma virziens(-i), kas ir definēti, izmantojot ievades plūsmas virzienus.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "Plūsmas virziena rastru var izveidot, lietojot funkciju Plūsmas virziens.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Definē ievades plūsmas virziena rastra tipu.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong> — ievades plūsmas virziena rastrs ir D8. Tā ir noklusējuma vērtība.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong> — ievades plūsmas virziena rastrs ir D-Infinity (DINF).",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong> — ievades plūsmas virziena rastrs ir Multi Flow Direction (MFD).",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Nosaka statistikas veidu, kas tiek lietots, lai aprēķinātu plūsmas attālumu vairākiem plūsmas ceļiem. Ja ir tikai viens plūsmas ceļš no katras šūnas līdz šūnai straumē, visi statistikas veidi dod vienu un to pašu rezultātu.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Minimums</strong> — ja pastāv vairāki plūsmu ceļi, tiek aprēķināts minimālais plūsmas attālums. Tā ir noklusējuma vērtība.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Svērtais vidējais aritmētiskais</strong> — ja pastāv vairāki plūsmu ceļi, tiek aprēķināts plūsmas attāluma svērtais vidējais. Plūsmas proporcija no šūnas līdz tai blakus esošajām šūnām lejup pa straumi tiek izmantota kā svars svērtā vidējā aprēķināšanai.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Maksimums</strong> — ja pastāv vairāki plūsmu ceļi, tiek aprēķināts maksimālais plūsmas attālums.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "Ievades straumes rastrs, kas atspoguļo lineāro straumju tīklu.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "Ievades rastrs atspoguļo nepārtraukti paaugstinošos virsmu.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "Mērījumu virziens pa plūsmas ceļu.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong>Lejup</strong> — aprēķina lejupvērstā slīpuma attālumu pa plūsmas ceļu no katras šūnas līdz ievadei vai izvadei rastra malā.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>Augšup</strong> — aprēķina lielāko attālumu pa plūsmas ceļu augšupvērstā slīpumā no katras šūnas līdz noteces dalījuma augšai.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "Ievades rastrs, kas rāda plūsmas virzienu no katras šūnas.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "Plūsmas virziena rastru var izveidot, lietojot funkciju <strong>Plūsmas virziens</strong>.",
	"@@Flow-Length_Weight-Raster_tag0@@": "Papildu izvēles ievades rasts, lai piešķirtu svaru katrai šūnai.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Ja svara rastrs nav norādīts, katrai šūnai tiek piešķirts svars 1.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Norāda, vai statistiskie aprēķini ignorē vērtības ${NoData}.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Atzīmēta</strong> — norāda, ka vērtība ${NoData} tiek ignorēta, ja līdzās pastāv vērtība ${NoData}. Izvades vērtības noteikšanai tiek lietotas tikai tās apkārtnē esošās šūnas, kurām ir datu vērtības. Tā ir noklusējuma vērtība.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Nav atzīmēta</strong> — norāda, ka apstrādātās šūnas izvade ir ${NoData}, ja jebkurai līdzās esošajai šūnai ir vērtība ${NoData}.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "Teritorijas forma ap katru šūnu, ko izmanto statistikas aprēķināšanai.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Katrai apkārtnē esošajai šūnai ir papildu parametri, ar kuriem var definēt formu.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Gredzens, Iekšējais rādiuss, Ārējais rādiuss",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Aplis, Rādiuss",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Neregulāra, Platums, Augstums, Apkārtnes vērtības",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Taisnstūris, Platums, Augstums",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Ķīlis, Rādiuss, Sākuma leņķis, Beigu leņķis",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Svars, Platums, Augstums, Apkārtnes vērtības",
	"@@Focal-Statistics_Neighborhood_tag8@@": "Neregulāra apkārtne ļauj jums norādīt neregulāras formas apkārtni ap apstrādājamo šūnu. Lietojiet tabulu Apkārtnes vērtības, lai norādītu apkārtnes kodola formu. Šūnas pozīcijas vērtība 0 norāda, ka šī šūna nav daļa no apkārtnes un netiek izmantota apstrādei. Vērtība 1 norāda, ka attiecīgā šūna (un vērtība) ir daļa no apkārtnes.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "Svērtā apkārtne ir līdzīga neregulārai apkārtnei tajā ziņā, ka tā ļauj jums definēt neregulāru apkārtni ap apstrādājamo šūnu, taču papildus ļauj piemērot svarus ievades vērtībām. Vērtības svaru kodolā norāda, kuras šūnu pozīcijas jāiekļauj apkārtnē un ar kādiem svariem tās ir jāreizina. Lietojiet vērtību 0, lai neļautu apstrādāt šūnu. Kā svarus var lietot pozitīvās, negatīvās un decimālās vērtības. Svērtajai apkārtnei tiek atbalstītas tikai statistikas Vidējais aritmētiskais, Standartnovirze vai Summa.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Norāda, kuru procentili jāaprēķina, kad parametrs <strong>Procentile</strong> ir izvēlēts kā statistikas veids. Deviņdesmitajai procentilei noklusējuma vērtība ir 90.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "Vērtības var būt diapazonā no 0 līdz 100. 0. procentile ir būtiski vienāda ar statistiku Minimālā vērtība, un 100. procentile ir vienāda ar statistiku Maksimālā vērtība ar izņēmumu, kad rezultāts ir ar peldošo punktu. Vērtība 50 būtiski sniegs tādu pašu rezultātu kā statistika Mediāna.",
	"@@Focal-Statistics_Raster_tag0@@": "Nepieciešamais ievades rastrs.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "Aprēķināmās statistikas veids.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Vairākums</strong> — aprēķina visbiežāk sastopamo vērtību (vērtība, kas atkārtojas visbiežāk) apkārt esošajās šūnās.",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Maksimums</strong> — aprēķina apkārt esošo šūnu maksimālo vērtību (vislielāko).",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Vidējais aritmētiskais</strong> — aprēķina apkārt esošo šūnu vidējo aritmētisko vērtību.",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Mediānas vērtība</strong> — aprēķina apkārt esošo šūnu mediānas vērtību.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Minimums</strong> — aprēķina apkārt esošo šūnu minimālo vērtību (vismazāko).",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Mazākums</strong> — aprēķina apkārt esošo šūnu mazāk sastopamo vērtību (tādu, kas vismazāk atkārtojas).",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Procentile</strong> — aprēķina apkārt esošo šūnu procentili. Kuru procentili aprēķināt, var noteikt, izmantojot parametru <strong>Procentiles vērtība</strong>.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Diapazons</strong> — aprēķina apkārt esošo šūnu diapazonu (starpību starp vislielāko un vismazāko vērtību).",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Standartnovirze</strong> — aprēķina standartnovirzi apkārt esošajās šūnās.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Summa</strong> — aprēķina apkārt esošo šūnu summu (visu vērtību kopsummu).",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Varietāte</strong> — aprēķina apkārt esošo šūnu varietāti (unikālo vērtību skaitu).",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Ja ievades rastrs ir ar peldošo punktu, ir pieejami tikai statistikas veidi Vidējais aritmētiskais, Maksimāla vērtība, Mediāna, Minimālā vērtība, Procentile, Diapazons, Standartnovirze un Summa.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "Statistikām Vidējais aritmētiskais, Mediāna, Procentile un Standartnovirze izvade vienmēr ir ar peldošo punktu.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "Statistikas noklusējuma veids ir Vidējais aritmētiskais.",
	"@@Geometric_Constant-Z_tag0@@": "Norādiet konstantu augstumu, kas tiek izmantots ģeometriskajai funkcijai.",
	"@@Geometric_DEM_tag0@@": "Norādiet digitālā augstuma modeli, kas tiek izmantots ģeometriskajai funkcijai. Mozaīkas datu kopā esošo digitālā augstuma modeli var lietot kā rastra datu kopu vai mozaīkas datu kopu, kuras izvade ir digitālā augstuma modelis.",
	"@@Geometric_Geoid_tag0@@": "Lielākā daļa no augstuma datu kopām, piemēram, USGS NED vai ArcGIS Online World Elevation, ir ortometriski augstumi, tāpēc ir jāizvēlas opcija Ģeoīda korekcija, lai nodrošinātu saderību ar satelīta racionālajiem polinomajiem koeficientiem (RPC), kuri pieprasa elipsoīda augstuma vērtības. Atzīmējiet izvēles rūtiņu <strong>Ģeoīds</strong>, lai piemērotu ģeoīda (EGM96) korekcijas z vērtības, ja vien jūsu digitālā augstuma modelim jau nav norādītas elipsoīda augstuma vērtības.",
	"@@Geometric_Method_tag0@@": "Izvēlieties augstuma noteikšanas metodi ģeometriskajai funkcijai:",
	"@@Geometric_Method_tag1@@": "Lietot konstanti Z--Norādiet konstantu augstumu ģeometriskās funkcijas izpildei.",
	"@@Geometric_Method_tag2@@": "Lietot DEM--Norādiet digitālo augstuma modeli ģeometriskās funkcijas izpildei.",
	"@@Geometric_Raster_tag0@@": "Ievades rastrs.",
	"@@Geometric_Z-Factor_tag0@@": "Satelīta racionālie polinomie koeficienti (RPC) tiek mērogoti augstuma datu kopās, izmantojot metros izteiktas vertikālās mērvienības. Ja jūsu augstumam tiek lietotas citas vertikālās mērvienības, ievadiet vērtību <strong>Z koeficients</strong>, lai pārveidotu metros. Piemēram, ja augstuma mērvienības ir pēdas, jāizmanto vērtība 0,3048, lai no pēdām pārvērstu tās metros.",
	"@@Geometric_Z-Offset_tag0@@": "Pamatvērtība, kas jāpievieno augstuma vērtībām digitālā augstuma modelī. To var izmantot kā nobīdi augstuma vērtībām, kas nesākas jūras līmeņa augstumā.",
	"@@Geometric_Tolerance_tag0@@": "Norādiet maksimālo pieļaujamo kļūdu ģeometriskajā funkcijā, kas norādīta pikseļu skaitā. NITF (NCDRD) rastra tipa noklusējums ir divi.",
	"@@Grayscale_Raster_tag0@@": "Ievades rastrs.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "Svars katrai no joslām, kas veido ievades rastru.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Greater-Than_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Greater-Than_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Greater-Than_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Greater-Than_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Greater-Than_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Greater-Than_Raster_tag0@@": "Ievades vērtība tiek pārbaudīta, lai noteiktu, vai tā ir lielāka par otrās ievades vērtību.",
	"@@Greater-Than_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Greater-Than_Raster2_tag0@@": "Ievades vērtība, ar kuru tiek salīdzināta pirmās ievades vērtība, lai noteiktu, vai pirmās ievades vērtība ir lielāka par to.",
	"@@Greater-Than_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Greater-Than-Equal_Raster_tag0@@": "Ievades vērtība tiek pārbaudīta, lai noteiktu, vai tā ir lielāka par otrās ievades vērtību vai vienāda ar to.",
	"@@Greater-Than-Equal_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "Ievades vērtība, ar kuru tiek salīdzināta pirmās ievades vērtība, lai noteiktu, vai pirmās ievades vērtība ir lielāka par to vai vienāda ar to.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "Mērījumu mērvienības tiek sasaistītas ar izvades rastru. Pieejamās izvades mērvienības ir Celsija, Fārenheita un Kelvina grādi.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "Vienas joslas rastrs, kurā pikseļu vērtības atspoguļo relatīvo mitrumu kā procentuālu vērtību starp 0 un 100.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "Vienas joslas rastrs, kura pikseļu vērtības atspoguļo apkārtējā gaisa temperatūru.",
	"@@Heat-Index_Temperature-Units_tag0@@": "Mērījumu mērvienības tiek sasaistītas ar ievades temperatūras rastru. Pieejamās ievades mērvienības ir Celsija, Fārenheita un Kelvina grādi.",
	"@@Hillshade_Altitude_tag0@@": "Augstums ir saules augstuma leņķis virs horizonta diapazonā no 0 līdz 90 grādiem. 0 grādu vērtība norāda, ka saule ir uz horizonta — t.i. tādā pašā horizontālā plaknē kā atskaites sistēma. 90 grādu vērtība norāda, ka saule ir tieši virs galvas.",
	"@@Hillshade_Altitude_tag1@@": "Šis parametrs ir derīgs tikai tad, ja opcijas <strong>Reljefa ēnojums</strong> iestatījums ir <strong>Tradicionāls</strong>. Noklusējuma vērtība ir 45 grādi virs horizonta.",
	"@@Hillshade_Azimuth_tag0@@": "Azimuts ir saules relatīvā pozīcija uz horizonta (grādos). Šo pozīciju norāda saules leņķis, kas tiek mērīts pretēji pulksteņrādītāju kustības virzienam tieši no ziemeļiem. 0 grādu azimuts norāda ziemeļus, austrumi ir 90 grādi, dienvidi — 180 grādi, rietumi — 270 grādi.",
	"@@Hillshade_Azimuth_tag1@@": "Šis parametrs ir derīgs tikai tad, ja opcijas <strong>Reljefa ēnojums</strong> iestatījums ir <strong>Tradicionāls</strong>. Noklusējuma vērtība ir 315 grādi, kas atbilst ziemeļrietumiem.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "Izmantojot šo opciju, var izvairīties no jebkādas pārģenerācijas artefaktiem, kas var rasties gar rastra malām. Izvades pikseļiem gar rastra malu vai blakus NoData pikseļiem tiks piešķirta vērtība NoData; tāpēc ir ieteicams, ka šis parametrs tiek izmantots tikai ar augstuma mozaīkas datu kopām, kam ir pārklājums. Ja ir pieejami pārklājošies pikseļi, NoData teritorijas tiek atainotas ar pārklājošos pikseļu vērtībām, nevis tukšiem pikseļiem.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Nav atzīmēta--Vienmērīgi tiek veikta bilineāra pārģenerēšana, lai pārģenerētu reljefa ēnojumu. Lietojiet šo opciju, kad mozaīkas datu kopa, kas satur jūsu augstuma rastra datus, ir savienota tā, ka nav pārklājumu. Tā ir noklusējuma vērtība.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Atzīmēta--Reljefa ēnojumam tiek veikta bilineāra pārģenerēšana gar rastru malām vai blakus NoData pikseļiem. Šiem pikseļiem tiek piešķirta vērtība NoData un parādītas pārklājošos pikseļu vērtības, tādā veidā samazinot jebkādus aso malu efektus, kas pretējā gadījumā varētu rasties. Lietojiet šo opciju, kad mozaīkas datu kopa, kas satur jūsu augstuma rastra datus sastāv no vienībā vai mozaīkām, kas pārklājas.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "Šīs funkcijas rezultāti var būt atkarīgi no datiem. Ja izvadē novērojat mozaīku robežu artefaktus, atlasiet izvēles rūtiņas alternatīvo nosacījumu.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Vada reljefa ēnojuma apgaismojuma avotu:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Tradicionāls — aprēķina reljefa ēnojumu no viena apgaismojuma avota. Tā ir noklusējuma vērtība. Jūs varat iestatīt parametru <strong>Azimuts</strong> un <strong>Augstums v.j.l.</strong>, lai kontrolētu apgaismojuma avota novietojumu.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Vairāki virzieni--Apvieno apgaismojumu no vairākiem avotiem, lai iegūtu reljefa uzlabotu vizualizāciju.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "Pikseļu izmēra faktors ir atbildīgs par mēroga izmaiņām, kad skatītājs tuvina un tālina redzamo karti. Tas nosaka ātrumu, kādā mainās <strong>Z koeficients</strong>.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Šis parametrs ir derīgs tikai tad, ja opcijas <strong>Mērogošana</strong> iestatījums ir <strong>Pielāgots</strong>. Noklusējuma vērtība ir 0,024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "Opcija “Pikseļu izmērs, pakāpe” nodrošina augstuma (vai mēroga) izmaiņas, kad skatītājs tuvina un tālina redzamo karti. Tas ir eksponents, kas tiek piemērots pikseļu izmēram vienādojumā, kas kontrolē ātrumu, kādā parametrs <strong>Z koeficients</strong> mainās, lai izvairītos no ievērojamiem reljefa zudumiem.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Šis parametrs ir derīgs tikai tad, ja opcijas <strong>Mērogošana</strong> iestatījums ir <strong>Pielāgots</strong>. Noklusējuma vērtība ir 0,664.",
	"@@Hillshade_Raster_tag0@@": "Ievades augstuma datu kopa.",
	"@@Hillshade_Scaling_tag0@@": "Ieēnotais rezultāts tiek dinamiski mērogots, pielāgojot z koeficientu, kas tiek veikts, izmantojot vienu no divām opcijām:",
	"@@Hillshade_Scaling_tag1@@": "Pielāgots — šī opcija veic nelineāru pielāgošanu, izmantojot noklusējuma vērtības <strong>Pikseļu izmēra pakāpe</strong> un <strong>Pikseļu izmēra faktors</strong>, kas ļauj pielāgot augstuma izmaiņas (mērogu), kad skatītājs pietuvinās vai attālinās. Parametru <strong>Pielāgots</strong> ieteicams izmantot, kad lietojat pasaules mēroga datu kopu.",
	"@@Hillshade_Scaling_tag8@@": "Nav--Mērogošana netiek veikta. Tā ir ideāli piemērota vienai rastra datu kopai, kas nosedz lokālo teritoriju. To nav ieteicams izmantot vispasaules datu kopām ar plašu augstuma variāciju klāstu vai vairāku mērogu kartēm, jo mazā mērogā tas var izraisīt apkārtnes reljefu ar nelielām variācijām.",
	"@@Hillshade_Z-Factor_tag0@@": "Z koeficients ir mērogošanas koeficients, kas tiek izmantots, lai konvertētu augstuma vērtības diviem mērķiem:",
	"@@Hillshade_Z-Factor_tag1@@": "lai konvertētu augstuma mērvienības (piemēram, metrus vai pēdas) par datu kopas horizontālajām koordinātu mērvienībām, kas var būt pēdas, metri vai grādi;",
	"@@Hillshade_Z-Factor_tag2@@": "lai pievienotu vertikālo pārspīlējumu vizuāla iespaida radīšanai.",
	"@@Int_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Int_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Int_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Int_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Int_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Int_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Int_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Int_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Int_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Int_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Int_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Int_Raster_tag0@@": "Ievades rastrs, kas ir jāpārvērš par veselu skaitli.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "Izvades rastra šūnu izmēri tiks noteikti automātiski; taču to var mainīt. Lai gan šūnu izmērus var mainīt, rastra datu kopas pārklājums paliek nemainīgs.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "Ievade norāda datus.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Šai funkcijai ir četras pārģenerēšanas metodes:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Apgrieztā attāluma svērtā vērtība</strong> — nosaka šūnu vērtības, izmantojot paraugu punktu vai šūnu lineāro svērto kombināciju. Svars ir attāluma apgrieztā vērtība no zināmajiem punktiem vai šūnām.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>Lineāra retināšana</strong> — izmanto trīsstūrveida neregulāru tīklu no katras šūnas centra punktiem neregulārā rastrā, lai interpolētu virsmu, kas pēc tam tiek pārvērsta par regulāru rastru.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Dabiskais kaimiņš</strong> — sameklē to ievades paraugu apakškopu, kura ir vistuvāk vaicājuma punktam, un piemēro tiem svaru atkarībā no vērtības interpolācijai nepieciešamajām proporcionālajām zonām.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Tuvākais kaimiņš</strong> — aprēķina pikseļa vērtību, izmantojot tuvāko pikseli. Ja avota pikseļi neeksistē, izvadei nevar izveidot nevienu jaunu pikseli. Tā ir noklusējuma vērtība.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Identificē to pikseļu skaitu, kuri ir jāiekļauj izvēlētajā pārģenerēšanas metodē. Noklusējuma vērtība ir ${3} pikseļi.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Ja ievadei izvēlaties punktu elementu klasi, atribūtu tabulā jādefinē lauks ar punktu vērtību",
	"@@Is-Null_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Is-Null_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Is-Null_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Is-Null_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Is-Null_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Is-Null_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Is-Null_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Is-Null_Raster_tag0@@": "Ievades rastrs, kas tiek pārbaudīts, lai identificētu šūnas, kuras nav ${NoData} (bez vērtējuma).",
	"@@Is-Null_Raster_tag1@@": "Ievade var būt vesels skaitlis vai skaitlis ar peldošo punktu.",
	"@@Key-Metadata_Band-Names_tag0@@": "Tas tiek izmantots, lai ignorētu rastra joslu nosaukumus. Tie ir ar komatiem atdalītas virknes, kas ataino atjauninātos joslu nosaukumus.",
	"@@Key-Metadata_Band-Names_tag1@@": "Šis ir izvēles parametrs.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "Atslēgas metadati, kas ir jāievieš izejošā rastrā un ir aprakstīti kā JSON virkne, kas pārstāv atslēgas vērtību pāru kolekciju. Tālāk ir redzams JSON virknes piemērs, ko var ievadīt šajā funkcijā. Šim parametram visām ievadēm jābūt vienā un tajā pašā formātā.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "JSON virkne, kas ataino atslēgas metadatus",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "Datu kopas līmeņa atslēgas ignorējamā rekvizīta nosaukums.",
	"@@Key-Metadata_Raster_tag0@@": "Rastrs vai mozaīkas datu kopa, kas satur atslēgas metadatus, ko varat vēlēties ievietot vai pārrakstīt.",
	"@@Key-Metadata_Value_tag0@@": "Datu kopas līmeņa atslēgas rekvizīta ignorēšanas vērtība, ko vēlaties iestatīt.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Šis parametrs simulē piepūles palielinājumu, lai tiktu galā ar izmaksām, kad kumulatīvās izmaksas palielinās. Tas tiek izmantots, lai veidotu ceļotāja noguruma modeli. Pieaugošās kumulatīvās izmaksas, kas nepieciešamas, lai sasniegtu šūnu, tiek reizinātas ar pretestības koeficientu un pieskaitītas izmaksām, kas nepieciešamas, lai nokļūtu nākošajā šūnā.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "Tā ir saliktās procentu likmes formulas modificētā versija, kas tiek izmantota, lai aprēķinātu domājamās izmaksas par pārvietošanos cauri šūnai. Tā kā pretestības koeficienta vērtība palielinās, tā palielina vēlāk apmeklēto šūnu izmaksas. Jo lielāks ir pretestības koeficients, jo lielākas ir izmaksas, kas nepieciešamas, lai sasniegtu nākamo šūnu, un tiek saskaitītas katram nākošajam pārvietošanās gadījumam. Tā kā pretestības koeficients ir līdzīgs saliktajai likmei un parasti kumulatīvo izmaksu vērtības ir ļoti lielas, atkarībā no kumulatīvo izmaksu vērtībām ieteicams izmantot mazus pretestības koeficientus, piemēram, 0,005 vai pat mazākus.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Nosaka ceļotāja izmaksu kapacitāti avotam. Izmaksu aprēķini tiek turpināti katram avotam, līdz ir sasniegta norādītā kapacitāte.",
	"@@Least-Cost-Path_Capacity_tag1@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "Nepieciešamais ievades rastrs, kas nosaka pretestību vai izmaksas, lai planimetriski pārvietotos caur katru šūnu. Vērtība katras šūnas izvietojumā raksturo attālumu izmaksām uz vienu vienību, pārvietojoties cauri tai. Katra šūnas izvietojuma vērtība tiek reizināta ar šūnas izšķirtspēju un arī kompensē diagonālo pārvietošanos, lai iegūtu kopējās šūnas šķērsošanas izmaksas.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "<strong>Izmaksu rastra</strong> vērtības var būt vesels skaitlis vai peldošais punkts, taču nevar būt negatīvas vai ar nulles vērtību.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "Lauks, ko izmanto, lai iegūtu galamērķa atrašanās vietas vērtības.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "Nepieciešamais ievades rastrs, ar ko tiek identificēti tie pikseļi, no kuriem tiek noteikts zemāko izmaksu ceļš līdz avotam ar vismazākajām izmaksām. Šī ievade sastāv no pikseļiem, kam ir derīgas vērtības, un pārējiem pikseļiem jāpiešķir vērtība ${NoData}. Vērtība 0 ir derīga.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "Slieksnis, ko nevar pārsniegt kumulatīvo izmaksu vērtības. Ja kumulatīvo izmaksu attālums pārsniedz šo vērtību, šūnas izvietojuma izvades vērtība ir ${NoData}. Maksimālais attālums nosaka pārklājumu, kuram tiek aprēķināti kumulatīvo izdevumu attālumi. Noklusējuma attālums ir vienāds ar izvades rastra pārklājumu.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Šis parametrs ļauj kontrolēt ceļojumu vai lielumu avota vietā. Jo lielāks ir reizinātājs, jo lielākas ir izmaksas par pārvietošanas cauri katrai šūnai.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "Vērtībām ir jābūt lielākām par nulli. Noklusējuma vērtība ir 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Atslēgvārds nosaka veidu, kādā izmaksu ceļu aprēķinos tiks interpretētas ievades galamērķa datu vērtības un zonas.",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Viens labākais</strong> — visiem ievades galamērķa datu pikseļiem minimālo izmaksu ceļš tiek atvasināts no pikseļa ar zemāko izmaksu ceļu minimālo skaitu līdz avota šūnām.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Katra šūna</strong> — zemāko izmaksu ceļš tiek noteikts katram pikselim ar derīgām vērtībām ievades galamērķa datos un saglabāts izvades rastrā. Katra no ievades galamērķa datu šūnām tiek apstrādāta atsevišķi, un katrai tiek noteikts zemāko izmaksu ceļš.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Katra zona</strong> — zemāko izmaksu ceļš tiek noteikts katrai zonai ievades galamērķa datos un saglabāts izvades rastrā. Zemāko izmaksu ceļš katrai zonai sākas pikselī ar viszemāko izmaksu attāluma svaru šajā zonā.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Šis ir nepieciešamais ievades rastrs, kas nosaka šūnas vai izvietojumus, no kuriem tiek aprēķināts vismazāk uzkrāto izmaksu attālums katram izvades šūnas izvietojumam.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "Sākotnējās izmaksas, ar kurām sākas izmaksu aprēķini. Šis parametrs ļauj norādīt ar avotu saistītās fiksētās izmaksas. Tā vietā, lai sāktu ar izmaksām 0, aprēķinu algoritms sāks aprēķinus ar norādīto vērtību.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "Vērtībai ir jābūt vienādai ar nulli vai lielākai. Noklusējuma vērtība ir 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Nosaka ceļotāja virzienu, kad tiek piemērotas avota pretestības koeficients un sākotnējās izmaksas.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>No avota</strong> — avota pretestības koeficients un sākotnējās izmaksas vispirms tiek piemērotas ievades avotam un pēc tam virzienā uz šūnām, kas nav avota šūnas. Tā ir noklusējuma vērtība.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>Uz avotu</strong> — avota pretestības koeficients un sākotnējās izmaksas vispirms tiek piemērotas katrai šūnai, kas nav avots, un pēc tam virzienā atpakaļ uz ievades avotu.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Vai nu norādiet opcijas <strong>No avota</strong> vai <strong>Uz avotu</strong> atslēgvārdu, kas tiks piemērots visiem avotiem, vai norādiet lauku funkcijā <strong>Avota rastrs</strong>, kas satur atslēgvārdus ceļojuma virziena parādīšanai katrā avotā. Laukā jābūt virknei ${FROM_SOURCE} vai ${TO_SOURCE}.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Less-Than_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Less-Than_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Less-Than_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Less-Than_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Less-Than_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Less-Than_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Less-Than_Raster_tag0@@": "Ievades vērtība tiek pārbaudīta, lai noteiktu, vai tā ir mazāka par otrās ievades vērtību.",
	"@@Less-Than_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Less-Than_Raster2_tag0@@": "Ievades vērtība, ar kuru tiek salīdzināta pirmās ievades vērtība, lai noteiktu, vai pirmās ievades vērtība ir mazāka par to.",
	"@@Less-Than_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Less-Than-Equal_Raster_tag0@@": "Ievades vērtība tiek pārbaudīta, lai noteiktu, vai tā ir mazāka par otrās ievades vērtību vai vienāda ar to.",
	"@@Less-Than-Equal_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Less-Than-Equal_Raster2_tag0@@": "Ievades vērtība, ar kuru tiek salīdzināta pirmās ievades vērtība, lai noteiktu, vai pirmās ievades vērtība ir mazāka par to vai vienāda ar to.",
	"@@Less-Than-Equal_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Ln_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Ln_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Ln_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Ln_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Ln_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Ln_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Ln_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Ln_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Ln_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Ln_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Ln_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Ln_Raster_tag0@@": "Ievades vērtības, kurām jāatrod naturālais logaritms (Ln).",
	"@@Log10_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Log10_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Log10_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Log10_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Log10_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Log10_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Log10_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Log10_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Log10_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Log10_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Log10_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Log10_Raster_tag0@@": "Ievades vērtības, kurām jāatrod logaritms ar bāzi 10.",
	"@@Log2_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Log2_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Log2_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Log2_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Log2_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Log2_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Log2_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Log2_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Log2_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Log2_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Log2_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Log2_Raster_tag0@@": "Ievades vērtības, kurām jāatrod logaritms ar bāzi 2.",
	"@@Lookup_Field_tag0@@": "Lauks, kas satur jaunā rastra vēlamās vērtības.",
	"@@Lookup_Field_tag1@@": "Tam ir jābūt skaitliskam.",
	"@@Lookup_Raster_tag0@@": "Ievades rastrs, kas satur lauku, no kura tiek izveidots jaunais rastrs.",
	"@@Lookup_Raster_tag1@@": "Tas var būt vesels skaitlis vai skaitlis ar peldošo punktu.",
	"@@Mask_Included-Ranges_tag0@@": "Iekļautos diapazonus var norādīt katrai joslai, norādot minimālo un maksimālo vērtību jebkuras vērtības ārpus diapazona tiek atgrieztas kā ${NoData}. Pikselis tiek iekļauts, ka tā vērtība ir jebkurā no norādītajiem diapazoniem. Tāpēc, ja joslai 1 ir diapazons 5-10, joslai 2 ir diapazons 15-20 un pikseļa vērtība joslai 1 ir 8, tad šis pikselis netiek maskēts.",
	"@@Mask_NoData-Interpretation_tag0@@": "Tas attiecas uz to, kā parametrs <strong>${NoData} vērtības</strong> ietekmē izvades attēlu.",
	"@@Mask_NoData-Interpretation_tag3@@": "Var izvēlēties kādu no divām opcijām:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Atbilst visam</strong> — lai izvades attēlā būtu ${NoData} pikselis, vērtībām ${NoData}, kas ir norādītas katrai joslai, jāparādās vienā un tajā pašā pikselī.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Atbilst jebkam</strong> — ja jūsu norādītā vērtība ${NoData} parādās kādā norādītās joslas pikselī, šim pikselim izvades attēlā ir vērtība ${NoData}. Tā ir noklusējuma vērtība.",
	"@@Mask_NoData-Values_tag0@@": "Vērtības NoData var norādīt katrai joslai. Var norādīt vairāk nekā vienu vērtību, ievadot ar sarakstu, kurā vērtības ir atdalītas ar atstarpi.",
	"@@Mask_Raster_tag0@@": "Ievades rastrs.",
	"@@Minus_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Minus_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Minus_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Minus_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Minus_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Minus_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Minus_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Minus_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Minus_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Minus_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Minus_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Minus_Raster_tag0@@": "Ievade, no kuras tiek atņemtas otrās ievades vērtības.",
	"@@Minus_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Minus_Raster2_tag0@@": "Ievades vērtības, kas tiek atņemtas no pirmās ievades vērtībām.",
	"@@Minus_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@ML-Classify_Raster_tag0@@": "Klasificējamais ievades rastrs, izmantojot maksimālās varbūtības klasifikācijas algoritmu.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "Paraksta fails ${.gsg}.",
	"@@Mod_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Mod_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Mod_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Mod_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Mod_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Mod_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Mod_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Mod_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Mod_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Mod_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Mod_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Mod_Raster_tag0@@": "Skaitītāja ievade.",
	"@@Mod_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Mod_Raster2_tag0@@": "Saucēja ievade.",
	"@@Mod_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Atrisiniet jebkādu konfliktu, kad jums ir daļas vai divi vai vairāk attēli, kas pārklājas. Pieejamās opcijas ietver šādas iespējas:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Sapludināt</strong> — aprēķina un parāda pārklājošos pikseļu vidējo, piešķirot lielāku svaru tiem pikseļiem, kuri ir tuvāk blakus esošajiem attēliem, lai izvadē būtu izlīdzinātāks attēls. Tā ir noklusējuma vērtība.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>Pirmais</strong> — parāda to attēlu saraksta pirmā attēla pikseļus, kuri pārklājas ar norādīto teritoriju.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Pēdējais</strong> — parāda to attēlu saraksta pēdējā attēla pikseļus, kuri pārklājas ar norādīto teritoriju.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Maks.</strong> — parāda pikseli ar augstāko vērtību no visiem pārklātajiem slāņiem. Lietojot šo opciju, nav nekādas garantijas, ka pārklāšanās teritorijā tiks parādīti tikai viena attēla pikseļi — to vietā drīzāk būs redzama visu iespējamo slāņu kombinācija.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Vidējais aritmētiskais</strong> — aprēķina un parāda pārklājošos pikseļu vidējo aritmētisko vērtību.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Min.</strong> — parāda visu pārklājošos slāņu pikseli ar vismazāko vērtību. Lietojot šo opciju, nav nekādas garantijas, ka pārklāšanās teritorijā tiks parādīti tikai viena attēla pikseļi — to vietā drīzāk būs redzama visu iespējamo slāņu kombinācija.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Izvēlieties rastrus, ko vēlaties apvienot mozaīkā, lai izveidotu vienu attēlu.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Norādiet tās joslas ID, kura ataino elektromagnētiskā spektra tuvā infrasarkanā starojuma daļu.",
	"@@NDVI_Raster_tag0@@": "Ievades multispektrālais rastrs.",
	"@@NDVI_Scientific-Output_tag0@@": "Izvades vērtības ir diapazonā no -1,0 līdz 1.0, kas tiek izmantots daudzās zinātniskās programmās.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Norādiet tās joslas ID, kura ataino elektromagnētiskā spektra sarkanā krāsas daļu.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Nolaižamajā sarakstā izvēlieties iepriekš definētu krāsu shēmu.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Izvēlieties, ar kura veida krāsu shēmu iekrāsot NDVI izvadi:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Krāsu karte--Nolaižamajā sarakstā izvēlieties iepriekš definētu krāsu karti. Tāpat varat arī pārlūkot, lai atrastu jau esošu krāsu kartes failu.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Krāsu rampa--Nolaižamajā sarakstā izvēlieties iepriekš definētu krāsu shēmu.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Nolaižamajā sarakstā izvēlieties iepriekš definētu krāsu karti. Tāpat varat arī pārlūkot, lai atrastu jau esošu krāsu kartes failu.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Norādiet tās joslas ID, kura ataino elektromagnētiskā spektra tuvā infrasarkanā starojuma daļu.",
	"@@NDVI-Colorized_Raster_tag0@@": "Ievades multispektrālais rastrs.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "Izvades vērtības ir diapazonā no -1,0 līdz 1.0, kas tiek izmantots daudzās zinātniskās programmās.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Norādiet tās joslas ID, kura ataino elektromagnētiskā spektra sarkanā krāsas daļu.",
	"@@Negate_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Negate_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Negate_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Negate_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Negate_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Negate_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Negate_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Negate_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Negate_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Negate_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Negate_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Negate_Raster_tag0@@": "Ievades rastrs, kas jāpārvērš par negatīvu vērtību (jāpareizina ar -1).",
	"@@Nibble_Mask-Raster_tag0@@": "Nepieciešamais ievades rastrs, kas tiek izmantots kā maska.",
	"@@Nibble_Mask-Raster_tag1@@": "Šūnas ar vērtību NoData tiks atdalītas ievadē <strong>Rastrs</strong>.",
	"@@Nibble_Mask-Raster_tag4@@": "Maskas rastrs var būt vesels skaitlis vai skaitlis ar peldošo punktu.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Nosaka, vai ievades rastra NoData šūnas paliks kā NoData šūnas izvades rastrā.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>Nē</strong> — norāda, ka ievades rastra NoData šūnas paliks kā NoData šūnas izvadē. Tā ir noklusējuma vērtība.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Jā</strong> — norāda, ka ievades rastra un maskas NoData šūnas var būt derīgās izvades šūnu vērtībās.",
	"@@Nibble_Raster_tag0@@": "Nepieciešamais ievades rastrs, kas tiks atdarināts.",
	"@@Nibble_Raster_tag1@@": "Ievades rastrs var būt vesels skaitlis vai skaitlis ar peldošo punktu.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Nosaka, vai ievades rastra vērtības ${NoData} ir atļauts atdarināt teritoriju, kas ir definēta ar maskas rastru.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Jā</strong> — norāda, ka tiks izmantota tuvākā blakusesošā vērtība neatkarīgi no tā, vai tā ir ${NoData} vai cita datu vērtība ievades rastrā. Ievades rastra vērtības ${NoData} var brīvi iekļūt maskā definētajās teritorijās, ja tās ir tuvākais kaimiņš. Tā ir noklusējuma vērtība.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>Nē</strong> — norāda, ka tikai datu vērtības var brīvi iekļaut maskas rastrā noteiktās teritorijās. Ievades rastra vērtības ${NoData} nav atļauts atdarināt kā maskas rastrā definētas teritorijas pat tad, ja tās ir tuvākā kaimiņa vērtības.",
	"@@Nibble_Zone-Raster_tag0@@": "Ievades zonas rastrs.",
	"@@Nibble_Zone-Raster_tag1@@": "Zona ir visas šūnas rastrā, kurām ir viena un tā pati vērtību neatkarīgi no tā, vai tās ir pieguļošas vai nav. Ievades zonas slānis definē zonu formu, vērtības un izvietojumu. Zonas rastrs var būt vesels skaitlis vai skaitlis ar peldošo punktu.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Not-Equal_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Not-Equal_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Not-Equal_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Not-Equal_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Not-Equal_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Not-Equal_Raster_tag0@@": "Ievade, kas tiek izmantota nevienādības salīdzinājumam ar otro ievadi.",
	"@@Not-Equal_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Not-Equal_Raster2_tag0@@": "Ievade, kas izmantota nevienādības salīdzinājumam ar pirmo ievadi.",
	"@@Not-Equal_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Pansharpening_Multispectral_tag0@@": "Multispektrāls rastrs, kuram vēlaties palielināt asumu, izmantojot panahromatisko joslu.",
	"@@Pansharpening_Panchromatic_tag0@@": "Augstas izšķirstpējas vienas joslas rastrs, kas tiks izmantots, lai panahromatiski palielinātu asumu zemas izšķirstpējas multispektrālajam rastram.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Izvēlieties panahromatiskās asuma palielināšanas algoritmu, ko vēlaties lietot.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovija--Izmanto Brovija algoritmu, pamatojoties uz datu apvienošanas spektrālo modelēšanu.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri--Izmanto Esri algoritmu, pamatojoties uz datu apvienošanas spektrālo modelēšanu.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Grama-Šmita--Izmanto Grama-Šmita spektrālo asuma palielināšanas algoritmu, lai palielinātu multispektrālo datu asumu.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS--Datu apvienošanai izmanto opcijas Intensitāti, Nokrāsa un Piesātinājums.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Vidējais aritmētiskais--Izmanto panahromātiskās pikseļa vērtības, kā arī sarkanās, zaļās un zilās krāsas vērtību vidējo.",
	"@@Pansharpening_Weights_tag0@@": "Norādiet svarus sarkanās, zaļās, zilās krāsas un infrasarkanā starojuma joslām. Visām vērtībām jābūt diapazonā no 0 līdz 1.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Šis parametrs simulē piepūles palielinājumu, lai tiktu galā ar izmaksām, kad kumulatīvās izmaksas palielinās. Tas tiek izmantots, lai veidotu ceļotāja noguruma modeli. Pieaugošās kumulatīvās izmaksas, kas nepieciešamas, lai sasniegtu šūnu, tiek reizinātas ar pretestības koeficientu un pieskaitītas izmaksām, kas nepieciešamas, lai nokļūtu nākošajā šūnā.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Tā ir saliktās procentu likmes formulas modificētā versija, kas tiek izmantota, lai aprēķinātu domājamās izmaksas par pārvietošanos cauri šūnai. Tā kā pretestības koeficienta vērtība palielinās, tā palielina vēlāk apmeklēto šūnu izmaksas. Jo lielāks ir pretestības koeficients, jo lielākas ir izmaksas, kas nepieciešamas, lai sasniegtu nākamo šūnu, un tiek saskaitītas katram nākošajam pārvietošanās gadījumam. Tā kā pretestības koeficients ir līdzīgs saliktajai likmei un parasti kumulatīvo izmaksu vērtības ir ļoti lielas, atkarībā no kumulatīvo izmaksu vērtībām ieteicams izmantot mazus pretestības koeficientus, piemēram, 0,005 vai pat mazākus.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Path-Distance_Capacity_tag0@@": "Nosaka ceļotāja izmaksu kapacitāti avotam. Izmaksu aprēķini tiek turpināti katram avotam, līdz ir sasniegta norādītā kapacitāte.",
	"@@Path-Distance_Capacity_tag1@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Path-Distance_Cost-Raster_tag0@@": "Nepieciešamais ievades rastrs, kas nosaka pretestību vai izmaksas, lai planimetriski pārvietotos caur katru šūnu. Vērtība katras šūnas izvietojumā raksturo attālumu izmaksām uz vienu vienību, pārvietojoties cauri tai. Katra šūnas izvietojuma vērtība tiek reizināta ar šūnas izšķirtspēju un arī kompensē diagonālo pārvietošanos, lai iegūtu kopējās šūnas šķērsošanas izmaksas.",
	"@@Path-Distance_Cost-Raster_tag1@@": "<strong>Izmaksu rastra</strong> vērtības var būt vesels skaitlis vai peldošais punkts, taču nevar būt negatīvas vai ar nulles vērtību.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Nosaka saistību starp horizontālo izmaksu koeficientu un horizontālo relatīvo pārvietošanās leņķi (Horizontal relative moving angle — HRMA).</p><p>Ir vairāki koeficienti ar modifikatoriem, kuri identificē noteiktā vertikālā koeficienta grafiku. Turklāt var izmantot arī tabulu, lai izveidotu pielāgotu grafiku. Grafiki tiek lietoti, lai identificētu vertikālo koeficientu, kas tiek izmantots, lai aprēķinātu kopējās izmaksas par pārvietošanos uz blakus esošo šūnu.</p><p>Tālāk minētajos paskaidrojumos tiek izmantoti divi akronīmi: HF un HRMA. Ar HF tiek apzīmēts horizontālais koeficients, kas nosaka horizontālos apgrūtinājumus, ar kuriem var sastapties, pārvietojoties no vienas šūnas uz otru. Ar HRMA tiek apzīmēts horizontālais relatīvās pārvietošanās leņķis, kas nosaka leņķi starp horizontālo virzienu no šūnas un pārvietošanās virzienu.</p><p><strong>Horizontālā koeficienta</strong>veidi ietver šādus:</p><ul><li><strong>Binārs</strong> — norāda, ka HF tiek iestatīta ar nulles koeficientu saistīta vērtība, ja HRMA ir mazāks nekā griezuma leņķis; pretējā gadījumā tā ir bezgalība.</li><li><strong>Uz priekšu</strong> — nosaka, ka ir atļauta tikai kustība uz priekšu. HRMA jābūt lielākam par 0 vai vienādam ar to un mazākam par 90 grādiem (0 &lt;= HRMA &lt; 90). Ja HRMA ir lielāks par 0 un mazāks nekā 45 grādi, šūnas HF tiek iestatīta ar nulles koeficientu saistīta vērtība. Ja HRMA ir lielāks par 45 grādiem vai vienāds ar tiem, tiek lietota sānu vērtības modifikatora vērtība. Jebkurai HRMA vērtībai, kas ir vienāda vai lielāka par 90 grādiem, HF tiek iestatīta bezgalība.</li><li><strong>Lineārais</strong> — norāda, ka HF ir HRMA lineāra funkcija.</li><li><strong>Apgrieztais lineārais</strong> — norāda, ka HF ir HRMA apgriezta lineāra funkcija.</li><li><strong>Tabula</strong> — norāda, ka horizontālā koeficienta grafika noteikšanai, ko lieto, lai noteiktu HF, tiek izmantots tabulas fails.</li></ul><p>Horizontālo koeficientu modifikatori ietver:</p><ul><li><strong>Nulles koeficients</strong> — izveido horizontālo koeficientu, kas tiek lietots, kad HRMA ir nulle. Šis koeficients nosaka y ass krustpunktu jebkurai no horizontālā koeficienta funkcijām.</li><li><strong>Griezuma leņķis</strong> – norāda HRMA leņķi, virs kura HF tiek iestatīta bezgalība.</li><li><strong>Slīpums</strong> – nosaka taisnas līnijas slīpumu, kas tiek lietots kopā ar horizontālā koeficienta atslēgvārdiem<strong>Lineārais</strong>un<strong>Apgrieztais lineārais</strong>. Slīpums tiek norādīts kā daļskaitlis, kas norāda paaugstinājumu virs virsmas (piemēram, 45 grādu slīpums ir 1/45, kad tiek ievadīts kā 0,02222).</li><li><strong>Sānu vērtība</strong> – izveido HF, ja HRMA ir 45 grādi vai lielāks un mazāks nekā 90 grādi, kad ir norādīts horizontālā koeficienta atslēgvārds<strong>Uz priekšu</strong>.</li><li><strong>Tabulas nosaukums</strong> – norāda tās tabulas nosaukumu, kura nosaka HF.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "Rastrs, kas nosaka horizontālo virzienu katrā šūnā.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "Rastra vērtībām jābūt veseliem skaitļiem no 0 līdz 360, kur 0 grādi ir ziemeļi vai ekrāna augšdaļa un vērtības palielinās pulksteņrādītāja kustības virzienā. Plakanām teritorijām jāpiešķir vērtība -1. Katra novietojuma vērtības tiek izmantotas kopā ar parametru <strong>Horizontālais koeficients</strong>, lai noteiktu horizontālās izmaksas, kas rodas, pārvietojoties no šūnas uz tai blakus esošajām šūnām.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "Slieksnis, ko nevar pārsniegt kumulatīvo izmaksu vērtības. Ja kumulatīvo izmaksu attālums pārsniedz šo vērtību, šūnas izvietojuma izvades vērtība ir NoData. Maksimālais attālums nosaka pārklājumu, kuram tiek aprēķināti kumulatīvo izdevumu attālumi. Noklusējuma attālums ir vienāds ar izvades rastra pārklājumu.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Reizinātājs, kas tiek piemērots izmaksu vērtībām.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Šis parametrs ļauj kontrolēt ceļojumu vai lielumu avota vietā. Jo lielāks ir reizinātājs, jo lielākas ir izmaksas par pārvietošanas cauri katrai šūnai.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Vērtībām ir jābūt lielākām par nulli. Noklusējuma vērtība ir 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Path-Distance_Source-Raster_tag0@@": "Nepieciešamais avotu izvietojumu ievades rastrs.",
	"@@Path-Distance_Source-Raster_tag1@@": "Šis ir rastrs, kas nosaka šūnas vai izvietojumus, no kuriem tiek aprēķināts vismazāk uzkrāto izmaksu attālums katram izvades šūnas izvietojumam.",
	"@@Path-Distance_Source-Raster_tag2@@": "Tas var būt vesels skaitlis vai skaitlis ar peldošo punktu.",
	"@@Path-Distance_Start-Cost_tag0@@": "Sākotnējās izmaksas, ar kurām sākas izmaksu aprēķini. Šis parametrs ļauj norādīt ar avotu saistītās fiksētās izmaksas. Tā vietā, lai sāktu ar izmaksām 0, aprēķinu algoritms sāks aprēķinus ar norādīto vērtību.",
	"@@Path-Distance_Start-Cost_tag1@@": "Vērtībai ir jābūt vienādai ar nulli vai lielākai. Noklusējuma vērtība ir 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "Rastrs, kas nosaka augstuma vērtības katrā šūnas izvietojumā.",
	"@@Path-Distance_Surface-Raster_tag1@@": "Vērtības tiek lietotas, lai aprēķinātu faktisko virsmas attālumu, kas tiek pārvarēts, pārvietojoties starp šūnām.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Nosaka ceļotāja virzienu, kad tiek piemērotas avota pretestības koeficients un sākotnējās izmaksas.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>No avota</strong> — avota pretestības koeficients un sākotnējās izmaksas vispirms tiek piemērotas ievades avotam un pēc tam virzienā uz šūnām, kas nav avota šūnas. Tā ir noklusējuma vērtība.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>Uz avotu</strong> — avota pretestības koeficients un sākotnējās izmaksas vispirms tiek piemērotas katrai šūnai, kas nav avots, un pēc tam virzienā atpakaļ uz ievades avotu.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Vai nu norādiet opcijas <strong>No avota</strong> vai <strong>Uz avotu</strong> atslēgvārdu, kas tiks piemērots visiem avotiem, vai norādiet lauku funkcijā <strong>Avota rastrs</strong>, kas satur atslēgvārdus ceļojuma virziena parādīšanai katrā avotā. Laukā jābūt virknei ${FROM_SOURCE} vai ${TO_SOURCE}.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Nosaka saistību starp vertikālo izmaksu koeficientu un vertikālo relatīvo pārvietošanās leņķi (Vetrtical relative moving angle — VRMA).</p><p>Ir vairāki koeficienti ar modifikatoriem, kuri identificē noteiktā vertikālā koeficienta grafiku. Turklāt var izmantot arī tabulu, lai izveidotu pielāgotu grafiku. Grafiki tiek lietoti, lai identificētu vertikālo koeficientu, kas tiek izmantots, lai aprēķinātu kopējās izmaksas par pārvietošanos uz blakus esošo šūnu.</p><p>Tālāk minētajos paskaidrojumos tiek izmantoti divi akronīmi: VF un VRMA. Ar VF tiek apzīmēts vertikālais koeficients, kas nosaka vertikālos apgrūtinājumus, ar kuriem var sastapties, pārvietojoties no vienas šūnas uz otru. Ar VRMA tiek apzīmēts vertikālais relatīvās pārvietošanās leņķis, kas nosaka slīpuma leņķi starp šūnu NO (apstrādājamā) un šūnu UZ.</p><p><strong>Vertikālā koeficienta</strong>veidi ietver šādus:</p><ul><li><strong>Binārais</strong> — norāda, ka VF tiek iestatīta ar nulles koeficientu saistīta vērtība, ja VRMA ir lielāks par zema griezuma leņķi un mazāks nekā augsta griezuma leņķis; pretējā gadījumā tā ir bezgalība.</li><li><strong>Lineārais</strong> — norāda, ka VF ir VRMA lineāra funkcija.</li><li><strong>Simetriskais lineārais</strong> – norāda, ka VF ir VRMA lineāra funkcija attiecīgi VRMA negatīvajā vai pozitīvajā pusē un abas lineārās funkcijas ir simetriskas attiecībā pret VF (y) asi.</li><li><strong>Apgrieztais lineārais</strong> — norāda, ka VF ir VRMA apgriezta lineāra funkcija.</li><li><strong>Simetriskais apgrieztais lineārais</strong> – norāda, ka VF ir VRMA apgriezta lineāra funkcija attiecīgi VRMA negatīvajā vai pozitīvajā pusē un abas lineārās funkcijas ir simetriskas attiecībā pret VF (y) asi.</li><li><strong>Cos</strong> – norāda, ka VF ir uz kosinusu pamatota VRMA funkcija.</li><li><strong>Sec</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija.</li><li><strong>Cos-Sec</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija, kad VRMA ir negatīvs, un VRMA uz kosinusu pamatota funkcija, kad VRMA nav negatīvs.</li><li><strong>Sec-Cos</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija, kad VRMA ir negatīvs, un VRMA uz kosinusu pamatota funkcija, kad VRMA nav negatīvs.</li><li><strong>Tabula</strong> – norāda, ka vertikālā koeficienta grafika noteikšanai, ko lieto, lai noteiktu VF, tiek izmantots tabulas fails.</li></ul><p>Vertikālo atslēgvārdu modifikatori ietver:</p><ul><li><strong>Nulles koeficients</strong> – izveido vertikālo koeficientu, kas tiek lietots, kad VRMA ir nulle. Šis koeficients nosaka y ass krustpunktu norādītajai funkcijai. Būtība nulles koeficients nav piemērojams jebkurai no trigonometriskajām vertikālajām funkcijām (KOSINUSS, SEKANTE, KOSINUSS-SEKANTE vai SEKANTE-KOSINUSS). Y ass krustpunkts tiek definēts, izmantojot šīs funkcijas.</li><li><strong>Zems griezuma leņķis</strong> – norāda VRMA leņķi, zem kura VF tiek iestatīta bezgalība.</li><li><strong>Augsts griezuma leņķis</strong> – norāda VRMA leņķi, virs kura VF tiek iestatīta bezgalība.</li><li><strong>Slīpums</strong> – izveido taisnas līnijas slīpumu, kas tiek lietots kopā ar vertikālā koeficienta atslēgvārdiem <strong>Lineārais</strong>un<strong>Apgrieztais lineārais</strong>. Slīpums tiek norādīts kā daļskaitlis, kas norāda paaugstinājumu virs virsmas (piemēram, 45 grādu slīpums ir 1/45, kad tiek ievadīts kā 0,02222).</li><li><strong>Tabulas nosaukums</strong> – norāda tās tabulas nosaukumu, kura nosaka VF.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Nosaka saistību starp vertikālo izmaksu koeficientu un vertikālo relatīvo pārvietošanās leņķi (Vertical relative moving angle — VRMA).",
	"@@Path-Distance_Vertical-Raster_tag1@@": "Šīs vērtības tiek lietotas, lai aprēķinātu slīpumu, kas tiek izmantots, lai noteiktu vertikālo koeficientu, kas tiek piemērots, pārvietojoties no vienas šūnas uz citu.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Šis parametrs simulē piepūles palielinājumu, lai tiktu galā ar izmaksām, kad kumulatīvās izmaksas palielinās. Tas tiek izmantots, lai veidotu ceļotāja noguruma modeli. Pieaugošās kumulatīvās izmaksas, kas nepieciešamas, lai sasniegtu šūnu, tiek reizinātas ar pretestības koeficientu un pieskaitītas izmaksām, kas nepieciešamas, lai nokļūtu nākošajā šūnā.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Tā ir saliktās procentu likmes formulas modificētā versija, kas tiek izmantota, lai aprēķinātu domājamās izmaksas par pārvietošanos cauri šūnai. Tā kā pretestības koeficienta vērtība palielinās, tā palielina vēlāk apmeklēto šūnu izmaksas. Jo lielāks ir pretestības koeficients, jo lielākas ir izmaksas, kas nepieciešamas, lai sasniegtu nākamo šūnu, un tiek saskaitītas katram nākošajam pārvietošanās gadījumam. Tā kā pretestības koeficients ir līdzīgs saliktajai likmei un parasti kumulatīvo izmaksu vērtības ir ļoti lielas, atkarībā no kumulatīvo izmaksu vērtībām ieteicams izmantot mazus pretestības koeficientus, piemēram, 0,005 vai pat mazākus.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Nosaka ceļotāja izmaksu kapacitāti avotam. Izmaksu aprēķini tiek turpināti katram avotam, līdz ir sasniegta norādītā kapacitāte.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "Nepieciešamais ievades rastrs, kas nosaka pretestību vai izmaksas, lai planimetriski pārvietotos caur katru šūnu. Vērtība katras šūnas izvietojumā raksturo attālumu izmaksām uz vienu vienību, pārvietojoties cauri tai. Katra šūnas izvietojuma vērtība tiek reizināta ar šūnas izšķirtspēju un arī kompensē diagonālo pārvietošanos, lai iegūtu kopējās šūnas šķērsošanas izmaksas.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "<strong>Izmaksu rastra</strong> vērtības var būt vesels skaitlis vai peldošais punkts, taču nevar būt negatīvas vai ar nulles vērtību.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Nosaka saistību starp horizontālo izmaksu koeficientu un horizontālo relatīvo pārvietošanās leņķi (Horizontal relative moving angle — HRMA).</p><p>Ir vairāki koeficienti ar modifikatoriem, kuri identificē noteiktā vertikālā koeficienta grafiku. Turklāt var izmantot arī tabulu, lai izveidotu pielāgotu grafiku. Grafiki tiek lietoti, lai identificētu vertikālo koeficientu, kas tiek izmantots, lai aprēķinātu kopējās izmaksas par pārvietošanos uz blakus esošo šūnu.</p><p>Tālāk minētajos paskaidrojumos tiek izmantoti divi akronīmi: HF un HRMA. Ar HF tiek apzīmēts horizontālais koeficients, kas nosaka horizontālos apgrūtinājumus, ar kuriem var sastapties, pārvietojoties no vienas šūnas uz otru. Ar HRMA tiek apzīmēts horizontālais relatīvās pārvietošanās leņķis, kas nosaka leņķi starp horizontālo virzienu no šūnas un pārvietošanās virzienu.</p><p><strong>Horizontālā koeficienta</strong>veidi ietver šādus:</p><ul><li><strong>Binārs</strong> — norāda, ka HF tiek iestatīta ar nulles koeficientu saistīta vērtība, ja HRMA ir mazāks nekā griezuma leņķis; pretējā gadījumā tā ir bezgalība.</li><li><strong>Uz priekšu</strong> — nosaka, ka ir atļauta tikai kustība uz priekšu. HRMA jābūt lielākam par 0 vai vienādam ar to un mazākam par 90 grādiem (0 &lt;= HRMA &lt; 90). Ja HRMA ir lielāks par 0 un mazāks nekā 45 grādi, šūnas HF tiek iestatīta ar nulles koeficientu saistīta vērtība. Ja HRMA ir lielāks par 45 grādiem vai vienāds ar tiem, tiek lietota sānu vērtības modifikatora vērtība. Jebkurai HRMA vērtībai, kas ir vienāda vai lielāka par 90 grādiem, HF tiek iestatīta bezgalība.</li><li><strong>Lineārais</strong> — norāda, ka HF ir HRMA lineāra funkcija.</li><li><strong>Apgrieztais lineārais</strong> — norāda, ka HF ir HRMA apgriezta lineāra funkcija.</li><li><strong>Tabula</strong> — norāda, ka horizontālā koeficienta grafika noteikšanai, ko lieto, lai noteiktu HF, tiek izmantots tabulas fails.</li></ul><p>Horizontālo koeficientu modifikatori ietver:</p><ul><li><strong>Nulles koeficients</strong> — izveido horizontālo koeficientu, kas tiek lietots, kad HRMA ir nulle. Šis koeficients nosaka y ass krustpunktu jebkurai no horizontālā koeficienta funkcijām.</li><li><strong>Griezuma leņķis</strong> – norāda HRMA leņķi, virs kura HF tiek iestatīta bezgalība.</li><li><strong>Slīpums</strong> – nosaka taisnas līnijas slīpumu, kas tiek lietots kopā ar horizontālā koeficienta atslēgvārdiem<strong>Lineārais</strong>un<strong>Apgrieztais lineārais</strong>. Slīpums tiek norādīts kā daļskaitlis, kas norāda paaugstinājumu virs virsmas (piemēram, 45 grādu slīpums ir 1/45, kad tiek ievadīts kā 0,02222).</li><li><strong>Sānu vērtība</strong> – izveido HF, ja HRMA ir 45 grādi vai lielāks un mazāks nekā 90 grādi, kad ir norādīts horizontālā koeficienta atslēgvārds<strong>Uz priekšu</strong>.</li><li><strong>Tabulas nosaukums</strong> – norāda tās tabulas nosaukumu, kura nosaka HF.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "Rastrs, kas nosaka horizontālo virzienu katrā šūnā.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "Rastra vērtībām jābūt veseliem skaitļiem no 0 līdz 360, kur 0 grādi ir ziemeļi vai ekrāna augšdaļa un vērtības palielinās pulksteņrādītāja kustības virzienā. Plakanām teritorijām jāpiešķir vērtība -1. Katra novietojuma vērtības tiek izmantotas kopā ar parametru <strong>Horizontālais faktors</strong>, lai noteiktu horizontālās izmaksas, kas rodas, pārvietojoties no šūnas uz tai blakus esošajām šūnām.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "Slieksnis, ko nevar pārsniegt kumulatīvo izmaksu vērtības. Ja kumulatīvo izmaksu attālums pārsniedz šo vērtību, šūnas izvietojuma izvades vērtība ir NoData. Maksimālais attālums nosaka pārklājumu, kuram tiek aprēķināti kumulatīvo izdevumu attālumi. Noklusējuma attālums ir vienāds ar izvades rastra pārklājumu.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Reizinātājs, kas tiek piemērots izmaksu vērtībām.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Šis parametrs ļauj kontrolēt ceļojumu vai lielumu avota vietā. Jo lielāks ir reizinātājs, jo lielākas ir izmaksas par pārvietošanas cauri katrai šūnai.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Vērtībām ir jābūt lielākām par nulli. Noklusējuma vērtība ir 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "Lauks, kas tiek lietots, lai piešķirtu vērtības avota novietojumiem. Tam ir jābūt veselam skaitlim. Ja ir iestatīta opcija <strong>Vērtības rastrs</strong>, šīs ievades vērtībām būs lielāka prioritāte nekā jebkādiem opcijas <strong>Avota lauks</strong> iestatījumiem.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "Nepieciešamais avotu izvietojumu ievades rastrs.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Šis ir rastrs, kas nosaka šūnas vai izvietojumus, no kuriem tiek aprēķināts vismazāk uzkrāto izmaksu attālums katram izvades šūnas izvietojumam.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Tas var būt vesels skaitlis vai skaitlis ar peldošo punktu.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "Sākotnējās izmaksas, ar kurām sākas izmaksu aprēķini. Šis parametrs ļauj norādīt ar avotu saistītās fiksētās izmaksas. Tā vietā, lai sāktu ar izmaksām 0, aprēķinu algoritms sāks aprēķinus ar norādīto vērtību.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "Vērtībai ir jābūt vienādai ar nulli vai lielākai. Noklusējuma vērtība ir 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "Rastrs, kas nosaka augstuma vērtības katrā šūnas izvietojumā.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "Vērtības tiek lietotas, lai aprēķinātu faktisko virsmas attālumu, kas tiek pārvarēts, pārvietojoties starp šūnām.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Nosaka ceļotāja virzienu, kad tiek piemērotas avota pretestības koeficients un sākotnējās izmaksas.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>No avota</strong> — avota pretestības koeficients un sākotnējās izmaksas vispirms tiek piemērotas ievades avotam un pēc tam virzienā uz šūnām, kas nav avota šūnas. Tā ir noklusējuma vērtība.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>Uz avotu</strong> — avota pretestības koeficients un sākotnējās izmaksas vispirms tiek piemērotas katrai šūnai, kas nav avots, un pēc tam virzienā atpakaļ uz ievades avotu.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Vai nu norādiet opcijas <strong>No avota</strong> vai <strong>Uz avotu</strong> atslēgvārdu, kas tiks piemērots visiem avotiem, vai norādiet lauku funkcijā <strong>Avota rastrs</strong>, kas satur atslēgvārdus ceļojuma virziena parādīšanai katrā avotā. Laukā jābūt virknei ${FROM_SOURCE} vai ${TO_SOURCE}.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "Ievades rastrs ar veseliem skaitļiem, kas norāda zonas vērtības, kuras jāizmanto katram ievades avota novietojumam. Aprēķiniem visām šūnām, kas atrodas avota novietojumā, tiks piešķirta vērtība, kas katrai avota novietojuma šūnai definēta <strong>Vērtības rastrs</strong>. <strong>Vērtības rastram</strong> ir lielāka prioritāte nekā jebkuram opcijas <strong>Avota lauks</strong> iestatījumam.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Nosaka saistību starp vertikālo izmaksu koeficientu un vertikālo relatīvo pārvietošanās leņķi (Vetrtical relative moving angle — VRMA).</p><p>Ir vairāki koeficienti ar modifikatoriem, kuri identificē noteiktā vertikālā koeficienta grafiku. Turklāt var izmantot arī tabulu, lai izveidotu pielāgotu grafiku. Grafiki tiek lietoti, lai identificētu vertikālo koeficientu, kas tiek izmantots, lai aprēķinātu kopējās izmaksas par pārvietošanos uz blakus esošo šūnu.</p><p>Tālāk minētajos paskaidrojumos tiek izmantoti divi akronīmi: VF un VRMA. Ar VF tiek apzīmēts vertikālais koeficients, kas nosaka vertikālos apgrūtinājumus, ar kuriem var sastapties, pārvietojoties no vienas šūnas uz otru. Ar VRMA tiek apzīmēts vertikālais relatīvās pārvietošanās leņķis, kas nosaka slīpuma leņķi starp šūnu NO (apstrādājamā) un šūnu UZ.</p><p><strong>Vertikālā koeficienta</strong>veidi ietver šādus:</p><ul><li><strong>Binārais</strong> — norāda, ka VF tiek iestatīta ar nulles koeficientu saistīta vērtība, ja VRMA ir lielāks par zema griezuma leņķi un mazāks nekā augsta griezuma leņķis; pretējā gadījumā tā ir bezgalība.</li><li><strong>Lineārais</strong> — norāda, ka VF ir VRMA lineāra funkcija.</li><li><strong>Simetriskais lineārais</strong> – norāda, ka VF ir VRMA lineāra funkcija attiecīgi VRMA negatīvajā vai pozitīvajā pusē un abas lineārās funkcijas ir simetriskas attiecībā pret VF (y) asi.</li><li><strong>Apgrieztais lineārais</strong> — norāda, ka VF ir VRMA apgriezta lineāra funkcija.</li><li><strong>Simetriskais apgrieztais lineārais</strong> – norāda, ka VF ir VRMA apgriezta lineāra funkcija attiecīgi VRMA negatīvajā vai pozitīvajā pusē un abas lineārās funkcijas ir simetriskas attiecībā pret VF (y) asi.</li><li><strong>Cos</strong> – norāda, ka VF ir uz kosinusu pamatota VRMA funkcija.</li><li><strong>Sec</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija.</li><li><strong>Cos-Sec</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija, kad VRMA ir negatīvs, un VRMA uz kosinusu pamatota funkcija, kad VRMA nav negatīvs.</li><li><strong>Sec-Cos</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija, kad VRMA ir negatīvs, un VRMA uz kosinusu pamatota funkcija, kad VRMA nav negatīvs.</li><li><strong>Tabula</strong> – norāda, ka vertikālā koeficienta grafika noteikšanai, ko lieto, lai noteiktu VF, tiek izmantots tabulas fails.</li></ul><p>Vertikālo atslēgvārdu modifikatori ietver:</p><ul><li><strong>Nulles koeficients</strong> – izveido vertikālo koeficientu, kas tiek lietots, kad VRMA ir nulle. Šis koeficients nosaka y ass krustpunktu norādītajai funkcijai. Būtība nulles koeficients nav piemērojams jebkurai no trigonometriskajām vertikālajām funkcijām (KOSINUSS, SEKANTE, KOSINUSS-SEKANTE vai SEKANTE-KOSINUSS). Y ass krustpunkts tiek definēts, izmantojot šīs funkcijas.</li><li><strong>Zems griezuma leņķis</strong> – norāda VRMA leņķi, zem kura VF tiek iestatīta bezgalība.</li><li><strong>Augsts griezuma leņķis</strong> – norāda VRMA leņķi, virs kura VF tiek iestatīta bezgalība.</li><li><strong>Slīpums</strong> – izveido taisnas līnijas slīpumu, kas tiek lietots kopā ar vertikālā koeficienta atslēgvārdiem <strong>Lineārais</strong>un<strong>Apgrieztais lineārais</strong>. Slīpums tiek norādīts kā daļskaitlis, kas norāda paaugstinājumu virs virsmas (piemēram, 45 grādu slīpums ir 1/45, kad tiek ievadīts kā 0,02222).</li><li><strong>Tabulas nosaukums</strong> – norāda tās tabulas nosaukumu, kura nosaka VF.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Nosaka saistību starp vertikālo izmaksu koeficientu un vertikālo relatīvo pārvietošanās leņķi (Vertical relative moving angle — VRMA).",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "Šīs vērtības tiek lietotas, lai aprēķinātu slīpumu, kas tiek izmantots, lai noteiktu vertikālo koeficientu, kas tiek piemērots, pārvietojoties no vienas šūnas uz citu.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Šis parametrs simulē piepūles palielinājumu, lai tiktu galā ar izmaksām, kad kumulatīvās izmaksas palielinās. Tas tiek izmantots, lai veidotu ceļotāja noguruma modeli. Pieaugošās kumulatīvās izmaksas, kas nepieciešamas, lai sasniegtu šūnu, tiek reizinātas ar pretestības koeficientu un pieskaitītas izmaksām, kas nepieciešamas, lai nokļūtu nākošajā šūnā.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Tā ir saliktās procentu likmes formulas modificētā versija, kas tiek izmantota, lai aprēķinātu domājamās izmaksas par pārvietošanos cauri šūnai. Tā kā pretestības koeficienta vērtība palielinās, tā palielina vēlāk apmeklēto šūnu izmaksas. Jo lielāks ir pretestības koeficients, jo lielākas ir izmaksas, kas nepieciešamas, lai sasniegtu nākamo šūnu, un tiek saskaitītas katram nākošajam pārvietošanās gadījumam. Tā kā pretestības koeficients ir līdzīgs saliktajai likmei un parasti kumulatīvo izmaksu vērtības ir ļoti lielas, atkarībā no kumulatīvo izmaksu vērtībām ieteicams izmantot mazus pretestības koeficientus, piemēram, 0,005 vai pat mazākus.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Nosaka ceļotāja izmaksu kapacitāti avotam. Izmaksu aprēķini tiek turpināti katram avotam, līdz ir sasniegta norādītā kapacitāte.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "Nepieciešamais ievades rastrs, kas nosaka pretestību vai izmaksas, lai planimetriski pārvietotos caur katru šūnu. Vērtība katras šūnas izvietojumā raksturo attālumu izmaksām uz vienu vienību, pārvietojoties cauri tai. Katra šūnas izvietojuma vērtība tiek reizināta ar šūnas izšķirtspēju un arī kompensē diagonālo pārvietošanos, lai iegūtu kopējās šūnas šķērsošanas izmaksas.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "<strong>Izmaksu rastra</strong> vērtības var būt vesels skaitlis vai peldošais punkts, taču nevar būt negatīvas vai ar nulles vērtību.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Nosaka saistību starp horizontālo izmaksu koeficientu un horizontālo relatīvo pārvietošanās leņķi (Horizontal relative moving angle — HRMA).</p><p>Ir vairāki koeficienti ar modifikatoriem, kuri identificē noteiktā vertikālā koeficienta grafiku. Turklāt var izmantot arī tabulu, lai izveidotu pielāgotu grafiku. Grafiki tiek lietoti, lai identificētu vertikālo koeficientu, kas tiek izmantots, lai aprēķinātu kopējās izmaksas par pārvietošanos uz blakus esošo šūnu.</p><p>Tālāk minētajos paskaidrojumos tiek izmantoti divi akronīmi: HF un HRMA. Ar HF tiek apzīmēts horizontālais koeficients, kas nosaka horizontālos apgrūtinājumus, ar kuriem var sastapties, pārvietojoties no vienas šūnas uz otru. Ar HRMA tiek apzīmēts horizontālais relatīvās pārvietošanās leņķis, kas nosaka leņķi starp horizontālo virzienu no šūnas un pārvietošanās virzienu.</p><p><strong>Horizontālā koeficienta</strong>veidi ietver šādus:</p><ul><li><strong>Binārs</strong> — norāda, ka HF tiek iestatīta ar nulles koeficientu saistīta vērtība, ja HRMA ir mazāks nekā griezuma leņķis; pretējā gadījumā tā ir bezgalība.</li><li><strong>Uz priekšu</strong> — nosaka, ka ir atļauta tikai kustība uz priekšu. HRMA jābūt lielākam par 0 vai vienādam ar to un mazākam par 90 grādiem (0 &lt;= HRMA &lt; 90). Ja HRMA ir lielāks par 0 un mazāks nekā 45 grādi, šūnas HF tiek iestatīta ar nulles koeficientu saistīta vērtība. Ja HRMA ir lielāks par 45 grādiem vai vienāds ar tiem, tiek lietota sānu vērtības modifikatora vērtība. Jebkurai HRMA vērtībai, kas ir vienāda vai lielāka par 90 grādiem, HF tiek iestatīta bezgalība.</li><li><strong>Lineārais</strong> — norāda, ka HF ir HRMA lineāra funkcija.</li><li><strong>Apgrieztais lineārais</strong> — norāda, ka HF ir HRMA apgriezta lineāra funkcija.</li><li><strong>Tabula</strong> — norāda, ka horizontālā koeficienta grafika noteikšanai, ko lieto, lai noteiktu HF, tiek izmantots tabulas fails.</li></ul><p>Horizontālo koeficientu modifikatori ietver:</p><ul><li><strong>Nulles koeficients</strong> — izveido horizontālo koeficientu, kas tiek lietots, kad HRMA ir nulle. Šis koeficients nosaka y ass krustpunktu jebkurai no horizontālā koeficienta funkcijām.</li><li><strong>Griezuma leņķis</strong> – norāda HRMA leņķi, virs kura HF tiek iestatīta bezgalība.</li><li><strong>Slīpums</strong> – nosaka taisnas līnijas slīpumu, kas tiek lietots kopā ar horizontālā koeficienta atslēgvārdiem<strong>Lineārais</strong>un<strong>Apgrieztais lineārais</strong>. Slīpums tiek norādīts kā daļskaitlis, kas norāda paaugstinājumu virs virsmas (piemēram, 45 grādu slīpums ir 1/45, kad tiek ievadīts kā 0,02222).</li><li><strong>Sānu vērtība</strong> – izveido HF, ja HRMA ir 45 grādi vai lielāks un mazāks nekā 90 grādi, kad ir norādīts horizontālā koeficienta atslēgvārds<strong>Uz priekšu</strong>.</li><li><strong>Tabulas nosaukums</strong> – norāda tās tabulas nosaukumu, kura nosaka HF.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "Rastrs, kas nosaka horizontālo virzienu katrā šūnā.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "Rastra vērtībām jābūt veseliem skaitļiem no 0 līdz 360, kur 0 grādi ir ziemeļi vai ekrāna augšdaļa un vērtības palielinās pulksteņrādītāja kustības virzienā. Plakanām teritorijām jāpiešķir vērtība -1. Katra novietojuma vērtības tiek izmantotas kopā ar parametru <strong>Horizontālais faktors</strong>, lai noteiktu horizontālās izmaksas, kas rodas, pārvietojoties no šūnas uz tai blakus esošajām šūnām.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "Slieksnis, ko nevar pārsniegt kumulatīvo izmaksu vērtības. Ja kumulatīvo izmaksu attālums pārsniedz šo vērtību, šūnas izvietojuma izvades vērtība ir NoData. Maksimālais attālums nosaka pārklājumu, kuram tiek aprēķināti kumulatīvo izdevumu attālumi. Noklusējuma attālums ir vienāds ar izvades rastra pārklājumu.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Reizinātājs, kas tiek piemērots izmaksu vērtībām.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Šis parametrs ļauj kontrolēt ceļojumu vai lielumu avota vietā. Jo lielāks ir reizinātājs, jo lielākas ir izmaksas par pārvietošanas cauri katrai šūnai.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Vērtībām ir jābūt lielākām par nulli. Noklusējuma vērtība ir 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "Nepieciešamais avotu izvietojumu ievades rastrs.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Šis ir rastrs, kas nosaka šūnas vai izvietojumus, no kuriem tiek aprēķināts vismazāk uzkrāto izmaksu attālums katram izvades šūnas izvietojumam.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Tas var būt vesels skaitlis vai skaitlis ar peldošo punktu.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "Sākotnējās izmaksas, ar kurām sākas izmaksu aprēķini. Šis parametrs ļauj norādīt ar avotu saistītās fiksētās izmaksas. Tā vietā, lai sāktu ar izmaksām 0, aprēķinu algoritms sāks aprēķinus ar norādīto vērtību.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "Vērtībai ir jābūt vienādai ar nulli vai lielākai. Noklusējuma vērtība ir 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "Rastrs, kas nosaka augstuma vērtības katrā šūnas izvietojumā.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "Vērtības tiek lietotas, lai aprēķinātu faktisko virsmas attālumu, kas tiek pārvarēts, pārvietojoties starp šūnām.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Nosaka ceļotāja virzienu, kad tiek piemērotas avota pretestības koeficients un sākotnējās izmaksas.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>No avota</strong> — avota pretestības koeficients un sākotnējās izmaksas vispirms tiek piemērotas ievades avotam un pēc tam virzienā uz šūnām, kas nav avota šūnas. Tā ir noklusējuma vērtība.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>Uz avotu</strong> — avota pretestības koeficients un sākotnējās izmaksas vispirms tiek piemērotas katrai šūnai, kas nav avots, un pēc tam virzienā atpakaļ uz ievades avotu.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Vai nu norādiet opcijas <strong>No avota</strong> vai <strong>Uz avotu</strong> atslēgvārdu, kas tiks piemērots visiem avotiem, vai norādiet lauku funkcijā <strong>Avota rastrs</strong>, kas satur atslēgvārdus ceļojuma virziena parādīšanai katrā avotā. Laukā jābūt virknei ${FROM_SOURCE} vai ${TO_SOURCE}.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Nosaka saistību starp vertikālo izmaksu koeficientu un vertikālo relatīvo pārvietošanās leņķi (Vetrtical relative moving angle — VRMA).</p><p>Ir vairāki koeficienti ar modifikatoriem, kuri identificē noteiktā vertikālā koeficienta grafiku. Turklāt var izmantot arī tabulu, lai izveidotu pielāgotu grafiku. Grafiki tiek lietoti, lai identificētu vertikālo koeficientu, kas tiek izmantots, lai aprēķinātu kopējās izmaksas par pārvietošanos uz blakus esošo šūnu.</p><p>Tālāk minētajos paskaidrojumos tiek izmantoti divi akronīmi: VF un VRMA. Ar VF tiek apzīmēts vertikālais koeficients, kas nosaka vertikālos apgrūtinājumus, ar kuriem var sastapties, pārvietojoties no vienas šūnas uz otru. Ar VRMA tiek apzīmēts vertikālais relatīvās pārvietošanās leņķis, kas nosaka slīpuma leņķi starp šūnu NO (apstrādājamā) un šūnu UZ.</p><p><strong>Vertikālā koeficienta</strong>veidi ietver šādus:</p><ul><li><strong>Binārais</strong> — norāda, ka VF tiek iestatīta ar nulles koeficientu saistīta vērtība, ja VRMA ir lielāks par zema griezuma leņķi un mazāks nekā augsta griezuma leņķis; pretējā gadījumā tā ir bezgalība.</li><li><strong>Lineārais</strong> — norāda, ka VF ir VRMA lineāra funkcija.</li><li><strong>Simetriskais lineārais</strong> – norāda, ka VF ir VRMA lineāra funkcija attiecīgi VRMA negatīvajā vai pozitīvajā pusē un abas lineārās funkcijas ir simetriskas attiecībā pret VF (y) asi.</li><li><strong>Apgrieztais lineārais</strong> — norāda, ka VF ir VRMA apgriezta lineāra funkcija.</li><li><strong>Simetriskais apgrieztais lineārais</strong> – norāda, ka VF ir VRMA apgriezta lineāra funkcija attiecīgi VRMA negatīvajā vai pozitīvajā pusē un abas lineārās funkcijas ir simetriskas attiecībā pret VF (y) asi.</li><li><strong>Cos</strong> – norāda, ka VF ir uz kosinusu pamatota VRMA funkcija.</li><li><strong>Sec</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija.</li><li><strong>Cos-Sec</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija, kad VRMA ir negatīvs, un VRMA uz kosinusu pamatota funkcija, kad VRMA nav negatīvs.</li><li><strong>Sec-Cos</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija, kad VRMA ir negatīvs, un VRMA uz kosinusu pamatota funkcija, kad VRMA nav negatīvs.</li><li><strong>Tabula</strong> – norāda, ka vertikālā koeficienta grafika noteikšanai, ko lieto, lai noteiktu VF, tiek izmantots tabulas fails.</li></ul><p>Vertikālo atslēgvārdu modifikatori ietver:</p><ul><li><strong>Nulles koeficients</strong> – izveido vertikālo koeficientu, kas tiek lietots, kad VRMA ir nulle. Šis koeficients nosaka y ass krustpunktu norādītajai funkcijai. Būtība nulles koeficients nav piemērojams jebkurai no trigonometriskajām vertikālajām funkcijām (KOSINUSS, SEKANTE, KOSINUSS-SEKANTE vai SEKANTE-KOSINUSS). Y ass krustpunkts tiek definēts, izmantojot šīs funkcijas.</li><li><strong>Zems griezuma leņķis</strong> – norāda VRMA leņķi, zem kura VF tiek iestatīta bezgalība.</li><li><strong>Augsts griezuma leņķis</strong> – norāda VRMA leņķi, virs kura VF tiek iestatīta bezgalība.</li><li><strong>Slīpums</strong> – izveido taisnas līnijas slīpumu, kas tiek lietots kopā ar vertikālā koeficienta atslēgvārdiem <strong>Lineārais</strong>un<strong>Apgrieztais lineārais</strong>. Slīpums tiek norādīts kā daļskaitlis, kas norāda paaugstinājumu virs virsmas (piemēram, 45 grādu slīpums ir 1/45, kad tiek ievadīts kā 0,02222).</li><li><strong>Tabulas nosaukums</strong> – norāda tās tabulas nosaukumu, kura nosaka VF.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Nosaka saistību starp vertikālo izmaksu koeficientu un vertikālo relatīvo pārvietošanās leņķi (Vertical relative moving angle — VRMA).",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "Šīs vērtības tiek lietotas, lai aprēķinātu slīpumu, kas tiek izmantots, lai noteiktu vertikālo koeficientu, kas tiek piemērots, pārvietojoties no vienas šūnas uz citu.",
	"@@Plus_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Plus_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Plus_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Plus_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Plus_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Plus_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Plus_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Plus_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Plus_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Plus_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Plus_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Plus_Raster_tag0@@": "ievade, kuras vērtības tiks pievienotas.",
	"@@Plus_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Plus_Raster2_tag0@@": "Ievade, kuras vērtība tiks pievienotas pirmajai ievadei.",
	"@@Plus_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Local_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rāda vienus un tos pašus rezultātus.",
	"@@Local_Cellsize-Type_tag1@@": "Pirmais no -- izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Local_Cellsize-Type_tag2@@": "Pēdējais no -- izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Local_Cellsize-Type_tag3@@": "Maksimālais no -- izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Local_Cellsize-Type_tag4@@": "Vidējais no -- izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Local_Cellsize-Type_tag5@@": "Minimālais no -- izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Local_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Local_Extent-Type_tag1@@": "Pirmais no -- izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Local_Extent-Type_tag2@@": "Krustpunkts no -- izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Local_Extent-Type_tag3@@": "Pēdējais no -- izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Local_Extent-Type_tag4@@": "Apvienojums no -- izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Local_Raster_tag0@@": "Ievade, kuras vērtības tiks pievienotas.",
	"@@Local_Raster_tag1@@": "Šim parametram var ievadīt nemainīgu vērtību ar nosacījumu, ka otram parametram ir norādīts rastrs.",
	"@@Local_Raster2_tag0@@": "Ievade, kuras vērtības tiks pievienotas pirmajai ievadei.",
	"@@Local_Raster2_tag1@@": "Šim parametram var ievadīt nemainīgu vērtību ar nosacījumu, ka otram parametram ir norādīts rastrs.",
	"@@Local_False-Raster_tag0@@": "Ievade, kuras vērtības tiks izmantotas kā ievades pikseļu vērtības, ja nosacījums ir aplams. Tas var būt vesels skaitlis, skaitlis ar peldošo punktu vai konstante.",
	"@@Local_True-Raster_tag0@@": "Ievade, kuras vērtības tiek izmantotas kā izvades pikseļu vērtības, ja nosacījums ir patiess. Tas var būt vesels skaitlis, skaitlis ar peldošo punktu vai konstante.",
	"@@Power_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Power_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Power_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Power_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Power_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Power_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Power_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Power_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Power_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Power_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Power_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Power_Raster_tag0@@": "Ievades vērtības, kas tiek kāpinātas pakāpē, ko definē parametrs <strong>2. rastrs</strong>.",
	"@@Power_Raster_tag3@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Power_Raster2_tag0@@": "Ievade, kas nosaka, kādā pakāpē tiks kāpinātas parametra <strong>Rastrs</strong> vērtības.",
	"@@Power_Raster2_tag3@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "Veicamās kalibrēšanas veidi:",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Beta-nought--Šī funkcija atgriež radiolokatora atstarošanas vērtību laukuma vienībai slīpuma diapazonā. Šis kalibrēšanas noklusējuma veids.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Sigma-nought--Šī funkcija atgriež radiolokatora atstarošanas vērtību laukuma vienībai zemes virsmas diapazonā. Rezultāti ir 32 bitu vērtības ar peldošo punktu, kuras parasti ir diapazonā no 0,0 līdz 1,0. Ja šī opcija ir izvēlēta, netiek veikta nekāda datu izgriešana.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gamma--Šī funkcija atgriež radiolokatora atstarošanas vērtību katras laukuma vienībai plaknē, kas ir perpendikulāra mērījumu virzienam.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Neviens",
	"@@Radar-Calibration_Raster_tag0@@": "Ievades rastrs.",
	"@@RasterInfo_Raster-Info_tag0@@": "Izvēlieties rastra datu kopu, kas tiks izmantota kā veidne",
	"@@RasterInfo_Raster_tag0@@": "Ievades rastrs.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "Lauku saraksts opcijā <strong>Zonas atribūtu tabula</strong>, kur katrs lauks ir atdalīts ar komatu. Katra lauka vērtības atspoguļo attiecīga josla izvades rastrā.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "Rastra izvades joslu sākotnējā pikseļu vērtība pirms pārkartēšanas.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Ja pikselis neietilpst zonā, tas paliek kā fona vērtība.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "Nepieciešamais ievades rastrs.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "Ievadei jābūt vienas joslas rastram. Ja tiek lietots vairāku joslu rastrs, tiek izmantota tikai pirmā josla.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "Papildu izvēles vaicājums, kas tiek piemērots parametram <strong>Zonas atribūtu tabula</strong>.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "Ja kā piemēru lietojāt iepriekš minēto tabulu, vaicājums būtu ${Variable1 = 'bare earth'}.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "Zonu atribūti, kas tiek norādīti kā ceļš līdz lokālai elementu klasei, ceļš līdz tabulai, vietrādis URL, kas norāda elementu pakalpojuma slāni, vai JSON virkne.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "JSON virknē tā ir aprakstīta kā kartēšanas kolekcija ar zonas ID un veselu skaitļu masīvu. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "Lauka nosaukums, kas satur zonas ID vērtības.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "Papildu izvēles vienas joslas rasts, kurā katrs no pikseļiem satur zonas ID, kas saistīts ar izvietojumu. ID tiek izmantots, lai zonas atribūtu tabulā atrastu rindas, kas lietojamas konkrētā zonā.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Ja vēlaties tikai importēt atribūtu, atstājiet šo parametru nenorādītu.",
	"@@Rasterize-Features_Field_tag0@@": "Izvēlieties lauku, kas tiek lietots, lai norādītu katru no elementiem.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Izvēlieties elementu klasi, kas tiek pārvērsta rastra formātā.",
	"@@Rasterize-Features_Raster_tag0@@": "Izvēlieties rastru, lai definētu šūnas izmērus un elementu konvertācijas apjomus.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Nosakiet, ka pārvaldīt elementus, kas pārklājas:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>Pirmais</strong> — teritorijām, kas pārklājas, tiek piešķirta vērtība no pirmās sarakstā uzskaitītās datu kopas.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Pēdējais</strong> — teritorijām, kas pārklājas, tiek piešķirta vērtība no pēdējās sarakstā uzskaitītās datu kopas.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Vismazākais</strong> — teritorijām, kas pārklājas, tiek piešķirta vērtība no vismazākā elementa.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Vislielākais</strong> — teritorijām, kas pārklājas, tiek piešķirta vērtība no vislielākā elementa.",
	"@@Recast_Overrides_tag0@@": "Mainīgo nosaukumu un lietotāja definēto vērtību tabula, kas tiek lietota, lai modificētu mozaīkas datu kopu.",
	"@@Recast_Raster_tag0@@": "Rastra rezultāts, kam tiks piemērota funkcija Pārveidošana.",
	"@@Region-Group_Add-Link_tag0@@": "Norāda, vai izvadē tabulai tiek pievienots saites lauks.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Pievienot saiti</strong> — izvades rastra tabulai tiks pievienots vienums ${LINK}.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>Nav saites</strong> — izvades rastra atribūtu tabulā būs tikai vienumi ${Value} un ${Count}.",
	"@@Region-Group_Excluded-Value_tag0@@": "Identificē vērtību tā, ka, ja šūnas izvietojums satur vērtību, netiek novērtēta nekāda telpiskā savienojamība neatkarīgi no tā, kā ir norādīts blakus esošo šūnu skaits (ČETRAS vai ASTOŅAS).",
	"@@Region-Group_Excluded-Value_tag1@@": "Šūnas, kam nav iekļauta vērtība, tiek apstrādātas kā NoData šūnas un izslēgtas no aprēķiniem. To šūnu izvietojumiem, kurām nav iekļauta vērtība, izvades rastrā iegūst vērtību 0.",
	"@@Region-Group_Excluded-Value_tag2@@": "Neiekļautās vērtības princips ir līdzīgs fona vērtības koncepcijai vai maskas piemērošanai. Šim parametram ir jānorāda vērtība, ja ir norādīts parametrs <strong>${CROSS}</strong>.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "Blakus esošo šūnu skaits, kas tiek izmantots šūnu savstarpējās savienojamības novērtēšanai.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>ČETRAS</strong> — nosaka savienojamību starp vienas vērtības šūnām tikai tad, ja šūnas ir tieši pa kreisi, pa labi, uz augšu vai uz leju no katras no četrām vistuvāk blakus esošajām šūnām. Tā ir noklusējuma vērtība.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>ASTOŅAS</strong> — norāda savienojamību starp vienas vērtības šūnām, ja tās ir tiešā astoņu šūnu tuvumā cita citai. Tas attiecas arī uz šūnām, kas atrodas pa labi, pa kreisi, uz augšu, uz leju vai pa diagonāli viena no otras.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Norāda, kuru šūnu vērtības ir jāņem vērā, kad tiek pārbaudīta savienojamība.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>IEKŠPUSĒ</strong> — pārbauda savienojamību starp ievades vērtībām, kas ir vienā un tajā pašā zonā. Tā ir noklusējuma vērtība.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "Vienīgās šūnas, ko var grupēt, ir tās pašas zonas (vērtības) šūnas, kas atbilst savienojamības telpiskajām prasībām, kuras norāda, izmantojot parametru <strong>Kaimiņu skaits</strong> (četras vai astoņas puses).",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>KRUSTOJUMS</strong> — pārbauda savienojamību pēc telpiskām prasībām, kas norādītas kaimiņu skaita parametrā, starp šūnām ar jebkādām vērtībām, izņemot vērtību, kura kā izslēgta norādīta parametrā Izslēgtā vērtība.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "Kad tiek lietota šī opcija, parametram <strong>Neiekļautā vērtība</strong> jānorāda vērtība.",
	"@@Region-Group_Zone-Raster_tag0@@": "Nepieciešamais ievades rastrs, kura unikālie savienotie reģioni tiks noteikti.",
	"@@Region-Group_Zone-Raster_tag1@@": "Tam ir jābūt veselam skaitlim.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "Lauks atribūtu tabula, kas nosaka pikseļu grupas aizpildīšanas vērtību. Vairāku joslu attēlā visām joslām tiek piešķirta šī vērtība.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "Lauk atribūtu tabulā, kas nosaka maksimālo izaugsmes rādiusu attēla telpiskās atskaites mērvienībās.",
	"@@Region-Grow_Raster_tag0@@": "Rastrs, kuram vēlaties izpildīt šo funkciju.",
	"@@Region-Grow_Seed-Points_tag0@@": "Punkta elementu klase, kas tiek izmantota kā sākotnējais izcelsmes punkts algoritmam. Katrs sākotnējais punkts atbilst vienam ierakstam atribūtu tabulā, kurš saturs maksimālo izaugsmes rādiusu, līdzības slieksni un aizpildījuma vērtības informāciju.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "Lauks atribūtu tabulā, kas nosaka līdzības slieksni kā Eiklīda attālumu spektrālā telpā.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Trūkstošās vērtības pārklasificēšanas tabulā var saglabāt to vērtību vai tikt pārkartētas par NoData vērtībām.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Nav atzīmēta – jebkuram ievades rastra pikselim, kas netiek pārklasificēts pārkartēšanas tabulā, tiek saglabāta tā vērtība un tas tiek ierakstīts izvades rastrā savā izvietojumā. Tā ir noklusējuma vērtība.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Atzīmēta – jebkuram ievades rastra pikselim, kas netiek pārklasificēts pārkartēšanas tabulā, tiek saglabāta tā vērtība un tas tiek ierakstīts izvades rastrā savā izvietojumā.",
	"@@Remap_Input-Field_tag0@@": "Izvēlieties lauku, kurā tiek norādīta pārkartējamā ievades pikseļa vērtība.",
	"@@Remap_Input-Field_tag1@@": "Ja jūsu tabulai ir vērtību diapazons, šis ir minimālās vērtības lauks un jānorāda arī parametrs <strong>Maksimālās ievades lauks</strong>.",
	"@@Remap_Input-Max-Field_tag0@@": "Izvēlieties maksimālās vērtības lauku, ja jūsu tabulai ir norādīts vērtību diapazons.",
	"@@Remap_List_tag0@@": "Norādiet kartes vērtības, minimālās un maksimālās vērtības diapazonu, kā arī jaunās pārkartēšanas vērtības. Turklāt vērtību diapazonu var iestatīt arī kā NoData pikseļus.",
	"@@Remap_Output-Field_tag0@@": "Izvēlēties lauku, kas tiks izmantots kā izvades pārkartēšanas vērtība.",
	"@@Remap_Raster_tag0@@": "Ievades rastrs.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Izvēlieties opciju, ko vēlaties lietot, lai iestatītu pārkartēšanas vērtības:",
	"@@Remap_Remap-Definition-Type_tag1@@": "Saraksts--Norāda pikseļu vērtību diapazonu, kas jākartē izvades pikseļu vērtībām.",
	"@@Remap_Remap-Table-Type_tag0@@": "Izvēlieties tabulas veidu, ko lietosit, lai pārkartētu savu ievades rastru:",
	"@@Remap_Remap-Table-Type_tag1@@": "Vienkāršs — izmanto ievadi <strong>Pārkartēt tabulu</strong>, lai pārkartētu parametra <strong>Ievades lauks</strong> pikseļu vērtības par atbilstošām vērtībām parametrā <strong>Izvades lauks</strong>. Šī metode saglabā kešatmiņā pārkartēšanas tabulu, lai to varētu ātrāk izmantot.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dinamiska--Šī metode nesaglabā kešatmiņā pārkartēšanas tabulu un veic vaicājumu katru reizi, kad tiek veikts pieprasījums (panoramēšana, tālummaiņa vai atsvaidzināšana). Ja tabula mainās, nākamais pieprasījums var attiecīgi dinamiski pārkartēt vērtības.",
	"@@Remap_Remap-Table-Type_tag9@@": "Atkārtota piešķiršana--Īpaša tabula, kas tiek izmantota pārklasificēšanas procesam, kurā katra rinda tabulā tiek pārkartēta, tikai pamatojoties uz katra elementa robežām.",
	"@@Remap_Remap-Table_tag0@@": "Pārlūkojiet tabulu, ar kuru tiek iestatītas pārkartēšanas vērtības.",
	"@@Reproject_Raster_tag0@@": "Pārprojicējamā vai pārģenerējamā rastra datu kopa.",
	"@@Reproject_Spatial-Reference_tag0@@": "Koordinātu sistēma, kas tiek izmantot datu pārprojicēšanai.",
	"@@Reproject_X-Cellsize_tag0@@": "X dimensija, kurā dati ir jāpārģenerē. Šī ir papildu izvēles opcija. Ja vērtība ir 0 vai mazāka, ievades ietvērums (pārklājums un šūnu izmēri) tiek aprēķināts, izmantojot ievades rastru.",
	"@@Reproject_X-Registration-Point_tag0@@": "X koordināta, kas tiek lietota, lai definētu datu kopas augšējo kreiso stūri. Šo koordinātu ir jānorāda ar jaunās telpiskās atskaites mērvienībām. Ja gan parametrs <strong>X šūnas izmērs</strong>, gan <strong>Y šūnas izmērs</strong> ir lielāks par 0, tie tiek izmantoti kopā ar parametriem <strong>X reģistrācijas punkts</strong> un <strong>Y reģistrācijas punkts</strong>, lai definētu izvades ietvērumu.",
	"@@Reproject_Y-Cellsize_tag0@@": "Y dimensija, kurā dati ir jāpārģenerē. Šī ir papildu izvēles opcija. Ja vērtība ir 0 vai mazāka, ievades ietvērums (pārklājums un šūnu izmēri) tiek aprēķināts, izmantojot ievades rastru.",
	"@@Reproject_Y-Registration-Point_tag0@@": "Y koordināta, kas tiek lietota, lai definētu datu kopas augšējo kreiso stūri. Šo koordinātu ir jānorāda ar jaunās telpiskās atskaites mērvienībām. Ja gan parametrs <strong>X šūnas izmērs</strong>, gan <strong>Y šūnas izmērs</strong> ir lielāks par 0, tie tiek izmantoti kopā ar parametriem <strong>X reģistrācijas punkts</strong> un <strong>Y reģistrācijas punkts</strong>, lai definētu izvades ietvērumu.",
	"@@Resample_Input-Cellsize_tag0@@": "Ievades rastra pikseļu šūnu izmērs.",
	"@@Resample_Output-Cellsize_tag0@@": "Izvades rastra pikseļu šūnu izmērs. Šūnu izmērus var mainīt, taču rastra datu kopas pārklājums paliek nemainīgs. Pārģenerēšana no lietotāja definēta šūnu izmēra var būt daudz lēnāka nekā sistēmas noklusējuma izmantošana, jo sistēmas noklusējuma pārģenerēšana apstrādā minimālu daudzumu tuvākās iespējamās izšķirtspējas datu.",
	"@@Resample_Raster_tag0@@": "Pārģenerējamais ievades rastrs.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>Tuvākais kaimiņš</strong> — aprēķina izvades pikseļa vērtību, izmantojot tuvāko ievades pikseli. NoData pikseļi izvades rastra datu kopā paliek nemainīti. Tā ir noklusējuma vērtība.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Bilineārā interpolācija</strong> — aprēķina pikseļa vērtību, izmantojot četru vistuvāko pikseļu attāluma svērto vērtību. Šīs metodes izpilde ir skaitļošanas ziņā efektīva.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Kubiska konvolūcija</strong> — nosaka pikseļa jauno vērtību, pamatojoties uz lēzenu līkni, kas iet caur 16 vistuvāko ievades pikseļu centriem.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Vairākums</strong> — aprēķina pikseļa vērtību, izmantojot 16 vistuvāk esošo pikseļu visbiežāk sastopamo vērtību. NoData pikseļi izvades rastra datu kopā paliek nemainīti.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Bilineārā interpolācija Plus</strong> — izmanto parametru <strong>Bilineārā interpolācija</strong>, izņemot to, ka gar malām esošie pikseļi tiek definēti kā NoData un netiek replicēti vai ņemti vērā aprēķinos. Izmantojiet parametru <strong>Bilineārā interpolācija Plus</strong> mozaīkas datiem, jo šādi malas būs labāk saskaņotas.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Gausa izplūdums</strong> — piemēro Gausa konvolūciju avota rastram un aprēķina pikseļa vērtību, izmantojot četru vistuvāko pikseļu svērto vērtību atkarībā no attāluma no izplūdušā rastra. Tā ir piemērota trokšņa noņemšanai pārģenerētajos datos vai tad, kad tiek veikta pārģenerēšana uz lielāku pikseļu izmēru.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Gausa izplūdums Plus</strong> — izmanto parametru <strong>Gausa izplūdums</strong>, izņemot to, ka gar malām esošie pikseļi tiek definēti kā NoData un netiek replicēti vai ņemti vērā aprēķinos. Izmantojiet parametru <strong>Gausa izplūdums Plus</strong> mozaīkas datiem, jo šādi malas būs labāk saskaņotas.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Vidējā vērtība</strong> — aprēķina pikseļu vērtības, izmantojot pārklājošos pikseļu vidējo vērtību katram mērķa pikselim.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Minimums</strong> — aprēķina pikseļa vērtību, izmantojot visu pārklājošos pikseļu minimālo vērtību. NoData pikseļi izvades rastra datu kopā paliek nemainīti.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Maksimums</strong> — piemērota vienlaidu datiem; tā nodrošina izlīdzinātāku izvades attēlu nekā tuvākā kaimiņa pārģenerēšanas metode.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Vektoru vidējais</strong> — aprēķina intensitātes-virziena vektora vidējo vērtību, izmantojot visus iesaistītos pikseļus. Šī metode ir piemērojama tikai divu joslu rastriem, kas attēlo intensitāti un virzienu. Vispirms tā konvertē intensitāti-virzienu par U-V un pēc tam iegūst aritmētisko vidējo no visiem iesaistītajiem pikseļiem, lai iegūtu mērķa pikseļa U-V un pārveido to atpakaļ par intensitāti-virzienu.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Round-Down_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Round-Down_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Round-Down_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Round-Down_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Round-Down_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Round-Down_Extent-Type_tag4@@": "Saaudzējums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Round-Down_Raster_tag0@@": "Uz leju noapaļojamās ievades vērtības.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Round-Up_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Round-Up_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Round-Up_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Round-Up_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Round-Up_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Round-Up_Extent-Type_tag4@@": "Saaudzējums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Round-Up_Raster_tag0@@": "Uz augšu noapaļojamās ievades vērtības.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "Minimālais segmenta izmērs, izmērīts pikseļos. Šī vērtībai ir saistīta ar jūsu minimālo kartēšanas vienību un izfiltrē mazākus pikseļu blokus. Visi segmenti, kas ir mazāki par norādīto vērtību, izraisīs mazāko segmentu sapludināšanu ar to vislabāk pielāgotajiem kaimiņu segmentiem.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "Segmentējamais ievades rastrs.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "Segmenta robežas, kas ir uzzīmētas kā melna kontūrlīnija ap katru no segmentiem. Tas ir noderīgi, lai varētu atšķirt blakus esošos segmentus, kam ir līdzīga krāsa.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Nav atzīmēta--Segmentu robežas netiek rādītas. Tā ir noklusējuma vērtība.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Atzīmēta--Segmenta robežas tiek rādītas ar melnu kontūrlīniju ap katru no segmentiem.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "Objektu atdalīšanas relatīvais svarīgums, pamatojoties uz telpiskajām īpašībām.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "Derīgās veselo skaitļu vērtības ir no 1 līdz 20. Mazākas vērtības nodrošina plašākas klases un lielāku izlīdzināšanu. Augstāka vērtība ir piemērota, lai atšķirtu elementus, kas ir telpiski mazi un sagrupēti kopā. Piemēram, pilsētas ainā var klasificēt vispārējus necaurlaidīgas virsmas elementus, izmantojot mazāku telpisko detaļu vērtību, vai var klasificēt ēkas un ceļus kā atsevišķas klases, izmantojot augstāku telpisko detaļu vērtību.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "Objekti atdalīšanas relatīvais svarīgums, pamatojoties uz krāsu īpašībām.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "Derīgās skaitļu ar peldošo punktu vērtības ir diapazonā no 1,0 līdz 20,0. Mazākas vērtības nodrošina plašākas klases un lielāku izlīdzināšanu. Augstāka vērtība ir piemērota, kad vēlaties atšķirt elementus, kam ir daļēji līdzīgas spektrālās īpašības. Piemēra, izmantojot augstāku spektrālo detaļu vērtību mežainā ainā, varat labāk atšķirt dažādas kokus sugas.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>Segmenta maksimālais lielums. Segmenti, kas ir lielāki par norādītajiem izmēriem, tiks sadalīti. Izmantojiet šo parametru, lai novērstu artefaktus izvades slānī, kas rodas lielos segmentos. Noklusējuma vērtība ir -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Izvēlieties vienu no četriem kalibrēšanas veidiem:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta nulle</strong> — rada izvadi, kas satur radara spilgtuma koeficientu.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma nulle</strong> — atstarotais starojums, kas tiek atgriezts uz antenu no laukuma vienības uz zemes un ir saistīts ar zemes virsmas diapazonu.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gamma</strong> — izstarotās un atgrieztās enerģijas mērījumus, kas ir noderīgs, lai noteiktu antenas virziena shēmu.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>Nav</strong> — korekcija netiek izmantota. Tā ir noklusējuma vērtība.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "Sentinel-1 1. līmeņa GRD vai SLC ievades rastrs, ko vēlaties apstrādāt.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "Šī funkcija izmanto LUT failu, lai veiktu termālo korekciju vai noņemtu korekciju atkarībā no LUT satura.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "Sentinel-1 ievades rastrs, ko vēlaties apstrādāt.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "Šī funkcija izmanto LUT failu, lai veiktu termālo korekciju vai noņemtu korekciju atkarībā no LUT satura.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Set-Null_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Set-Null_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Set-Null_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Set-Null_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Set-Null_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Set-Null_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Set-Null_False-Raster_tag0@@": "Ievade, kuras vērtības tiks izmantotas kā ievades pikseļu vērtības, ja nosacījums ir aplams. Tā var būt vesels skaitlis, skaitlis ar peldošo punktu vai konstante.",
	"@@Set-Null_Raster_tag0@@": "Ievades rastrs, kas ataino loģiskās matemātiskās rastra funkcijas Būla rezultātu. Vērtības būs 1 (patiess) vai 0 (aplams). Tas var būt vesels skaitlis vai rastrs ar peldošo punktu.",
	"@@Shaded-Relief_Altitude_tag0@@": "Augstums ir saules augstuma leņķis virs horizonta diapazonā no 0 līdz 90 grādiem. 0 grādu vērtība norāda, ka saule ir uz horizonta — t.i. tādā pašā horizontālā plaknē kā atskaites sistēma. 90 grādu vērtība norāda, ka saule ir tieši virs galvas. Noklusējuma vērtība ir 45 grādi virs horizonta.",
	"@@Shaded-Relief_Azimuth_tag0@@": "Azimuts ir saules relatīvā pozīcija uz horizonta (grādos). Šo pozīciju norāda saules leņķis, kas tiek mērīts pretēji pulksteņrādītāju kustības virzienam tieši no ziemeļiem. 0 grādu azimuts norāda ziemeļus, austrumi ir 90 grādi, dienvidi — 180 grādi, rietumi — 270 grādi.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Norādiet, vai tiks izmantota krāsu rampa vai krāsu karte, lai parādītu reljefa ēnojumu.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Krāsu</strong> — kad atlasāt parametru <strong>Krāsu</strong>, tiek piedāvāts izvēlēties piemērotu krāsu.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Krāsu karte</strong> — kad izvēlaties parametru <strong>Krāsu karte</strong>, tiek piedāvāts norādīt izmantojamo krāsu kartes failu.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Norāda, vai ir deaktivizēta malas pikseļu noklusējuma interpolācija.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Nav atzīmēta--Vienmērīgi tiek veikta bilineāra pārģenerēšana, lai pārģenerētu reljefa ēnojumu. Tā ir noklusējuma vērtība.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Atzīmēta--Reljefa ēnojumam tiek veikta bilineāra pārģenerēšana, izņemot ēnojumu gar rastru malām vai blakus NoData pikseļiem. Šiem pikseļiem tiek piešķirta vērtība NoData, jo tas samazina jebkādus aso malu efektus, kas varētu rasties.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Izmantojot šo opciju, var izvairīties no jebkādas pārģenerācijas artefaktiem, kas var rasties gar rastra malām. Izvades pikseļiem gar rastra malu vai blakus pikseļiem bez vērtības tiek piešķirta vērtība NoData; tāpēc ir ieteicams, ka šī opija tiek izmantota tikai tad, kad ir pieejami citi rastri ar pikseļiem, kas pārklājas. Ja ir pieejami pārklājošies pikseļi, šīs NoData teritorijas tiek atainotas ar pārklājošos pikseļu vērtībām, nevis tukšiem pikseļiem.",
	"@@Shaded-Relief_Raster_tag0@@": "Ievades augstuma rastrs.",
	"@@Shaded-Relief_Scaling_tag0@@": "Ieēnotais rezultāts tiek dinamiski mērogots, pielāgojot z koeficientu, kas tiek veikts, izmantojot vienu no divām opcijām:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>Nav</strong> — mērogošana netiek veikta. Tā ir ideāli piemērota vienai rastra datu kopai, kas nosedz lokālo teritoriju. To nav ieteicams izmantot vispasaules datu kopām ar plašu augstuma variāciju klāstu vai vairāku mērogu kartēm, jo mazā mērogā tas var izraisīt apkārtnes reljefu ar nelielām variācijām.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Pielāgots</strong> — tiek veikta nelineāra pielāgošana, izmantojot noklusējuma vērtības <strong>Pikseļu izmērs, pakāpe</strong> un <strong>Pikseļu izmērs, koeficients</strong>, kas ļauj pielāgot daudzas dažādas augstuma izmaiņas (mērogu), kad skatītājs tuvina vai tālina. Opciju <strong>Pielāgots</strong> ieteicams izmantot, kad lietojat pasaules mēroga datu kopu.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "Z koeficients ir mērogošanas koeficients, kas tiek izmantots, lai konvertētu augstuma vērtības diviem mērķiem:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "Lai konvertētu augstuma mērvienības (piemēram, metrus vai pēdas) par datu kopas horizontālajām koordinātu mērvienībām, kas var būt pēdas, metri vai grādi",
	"@@Shaded-Relief_Z-Factor_tag2@@": "Lai pievienotu vertikālo pārspīlējumu vizuāla iespaida radīšanai",
	"@@Shaded-Relief_Z-Factor_tag3@@": "Ieēnotais rezultāts tiek dinamiski mērogots, pielāgojot z koeficientu, kas tiek veikts, izmantojot vienu no divām opcijām:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>Nav</strong> — mērogošana netiek veikta. Tā ir ideāli piemērota vienai rastra datu kopai, kas nosedz lokālo teritoriju. To nav ieteicams izmantot vispasaules datu kopām ar plašu augstuma variāciju klāstu vai vairāku mērogu kartēm, jo mazā mērogā tas var izraisīt apkārtnes reljefu ar nelielām variācijām.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Pielāgots</strong> — tiek veikta nelineāra pielāgošana, izmantojot noklusējuma vērtības <strong>Pikseļu izmērs, pakāpe</strong> un <strong>Pikseļu izmērs, koeficients</strong>, kas ļauj pielāgot daudzas dažādas augstuma izmaiņas (mērogu), kad skatītājs tuvina vai tālina. Opciju <strong>Pielāgots</strong> ieteicams izmantot, kad lietojat pasaules mēroga datu kopu.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Vada reljefa ēnojuma apgaismojuma avotu.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Tradicionāls</strong> — aprēķina reljefa ēnojumu no viena apgaismojuma avota. Jūs varat iestatīt opciju <strong>Azimuts</strong> un <strong>Augstums v.j.l.</strong>, lai kontrolētu apgaismojuma avota novietojumu. Tā ir noklusējuma vērtība.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Vairāki virzieni</strong> — apvieno apgaismojumu no vairākiem avotiem, lai iegūtu uzlabotu reljefa vizualizāciju.",
	"@@Shaded-Relief_PSPower_tag0@@": "Opcija <strong>Pikseļu izmērs, pakāpe</strong> nodrošina augstuma (vai mēroga) izmaiņas, kad skatītājs tuvina un tālina redzamo karti. Tas ir eksponents, kas tiek piemērots pikseļu izmēram vienādojumā, kas kontrolē ātrumu, kādā parametrs <strong>Z koeficients</strong> mainās, lai izvairītos no ievērojamiem reljefa zudumiem.",
	"@@Shaded-Relief_PSPower_tag1@@": "Šis parametrs ir derīgs tikai tad, ja opcijas <strong>Mērogošana</strong> iestatījums ir <strong>Pielāgots</strong>. Noklusējuma vērtība ir 0,664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "Opcija <strong>Pikseļu izmērs, koeficients</strong> nodrošina mēroga izmaiņas, kad skatītājs tuvina un tālina redzamo karti. Tas nosaka ātrumu, kādā mainās <strong>Z koeficients</strong>.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Šis parametrs ir derīgs tikai tad, ja opcijas <strong>Mērogošana</strong> iestatījums ir <strong>Pielāgots</strong>. Noklusējuma vērtība ir 0,024.",
	"@@Sin_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Sin_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Sin_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Sin_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Sin_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Sin_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Sin_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Sin_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Sin_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Sin_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Sin_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Sin_Raster_tag0@@": "Ievade, kurai tiek aprēķinātas sinusu vērtības.",
	"@@SinH_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@SinH_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@SinH_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@SinH_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@SinH_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@SinH_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@SinH_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@SinH_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@SinH_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@SinH_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@SinH_Extent-Type_tag4@@": "Saaudzējums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@SinH_Raster_tag0@@": "Ievade, kurai tiek aprēķinātas hiperbolisko sinusu vērtības.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "Ievades rastrs, kas rāda plūsmas virzienu no katras šūnas.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "Plūsmas virziena rastru var izveidot, lietojot funkciju <strong>Plūsmas virziens</strong>.",
	"@@Slope_DEM_tag0@@": "Ievades augstuma rastrs.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Izmantojot šo opciju, var izvairīties no jebkādas pārģenerācijas artefaktiem, kas var rasties gar rastra malām. Izvades pikseļiem gar rastra malu vai blakus pikseļiem bez vērtības tiek piešķirta vērtība NoData; tāpēc ir ieteicams, ka šī opija tiek izmantota tikai tad, kad ir pieejami citi rastri ar pikseļiem, kas pārklājas. Ja ir pieejami pārklājošies pikseļi, šīs NoData teritorijas tiek atainotas ar pārklājošos pikseļu vērtībām, nevis tukšiem pikseļiem.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Nav atzīmēta--Vienmērīgi tiek veikta bilineāra pārģenerēšana, lai pārģenerētu slīpumu. Tā ir noklusējuma vērtība.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Atzīmēta--Slīpumam tiek veikta bilineāra pārģenerēšana gar rastru malām vai blakus NoData pikseļiem. Šiem pikseļiem tiek piešķirta vērtība NoData, jo tas samazina jebkādus aso malu efektus, kas varētu rasties.",
	"@@Slope_Scaling_tag0@@": "Nogāzes slīpums var tikt izvadīts kā grādu vai procentuālā paaugstinājuma vērtība. Ir pieejamas trīs parametra <strong>Mērogošana</strong> opcijas:",
	"@@Slope_Scaling_tag3@@": "<strong>Grādi</strong> — nogāzes slīpums tiek aprēķināts grādos. Vērtības ir diapazonā no 0 līdz 90.",
	"@@Slope_Scaling_tag5@@": "<strong>Procentuālais_paaugstinājums</strong> — nogāzes slīpums tiek aprēķināts kā procentuāla vērtība. Vērtības ir diapazonā no 0 līdz bezgalībai. Horizontālai virsmai ir 0 procentu paaugstinājums, savukārt 45 grādu virsmai ir 100 procentu paaugstinājums. Kad virsma kļūst vertikālāka, procentuālais paaugstinājums kļūst arvien lielāks.",
	"@@Slope_Scaling_tag7@@": "<strong>Mērogots</strong> — nogāzes slīpums tiek aprēķināts tāpat kā izmantojot opciju GRĀDI, taču mērogam tiek pielāgots z koeficients. Šī opcija izmanto parametra <strong>Pikseļu izmērs, pakāpe</strong> un <strong>Pikseļu izmērs, koeficients</strong> vērtības, kas aprēķina izšķirtspējas izmaiņas (mērogu), kad skatītājs tuvina vai tālina. Tā ir ieteicama, kad izmantojat vispasaules datu kopas, it īpaši tad, kad lietojat slīpumu kā vizualizācijas virsmu.",
	"@@Slope_Scaling_tag13@@": "Z koeficients tiek pielāgots izmantojot tālāk šādu vienādojumu:",
	"@@Slope_Scaling_tag14@@": "Pielāgots Z koeficients = (Z koeficients) + (pikseļa izmērs)",
	"@@Slope_Scaling_tag15@@": "× (pikseļa izmēra koeficients)",
	"@@Slope_Scaling_tag16@@": "Pikseļu izmērs, pakāpe",
	"@@Slope_Z-Factor_tag0@@": "Parametrs <strong>Z koeficients</strong> ir mērogošanas koeficients, kas tiek izmantots, lai pārvērstu augstuma vērtības diviem mērķiem:",
	"@@Slope_Z-Factor_tag3@@": "Lai konvertētu augstuma mērvienības (piemēram, metrus vai pēdas) par datu kopas horizontālajām koordinātu mērvienībām, kas var būt pēdas, metri vai grādi;",
	"@@Slope_Z-Factor_tag4@@": "Lai pievienotu vertikālo pārspīlējumu vizuāla iespaida radīšanai",
	"@@Slope_PSPower_tag0@@": "Opcija <strong>Pikseļu izmērs, pakāpe</strong> nodrošina augstuma (vai mēroga) izmaiņas, kad skatītājs tuvina un tālina redzamo karti. Tas ir eksponents, kas tiek piemērots pikseļu izmēram vienādojumā, kas kontrolē ātrumu, kādā parametrs <strong>Z koeficients</strong> mainās, lai izvairītos no ievērojamiem reljefa zudumiem.",
	"@@Slope_PSPower_tag1@@": "Šis parametrs ir derīgs tikai tad, ja opcijas <strong>Mērogošana</strong> iestatījums ir <strong>Mērogots</strong>. Noklusējuma vērtība ir 0,664.",
	"@@Slope_PSZFactor_tag0@@": "Opcija <strong>Pikseļu izmērs, koeficients</strong> nodrošina mēroga izmaiņas, kad skatītājs tuvina un tālina redzamo karti. Tas nosaka ātrumu, kādā mainās <strong>Z koeficients</strong>.",
	"@@Slope_PSZFactor_tag1@@": "Šis parametrs ir derīgs tikai tad, ja opcijas <strong>Mērogošana</strong> iestatījums ir <strong>Mērogots</strong>. Noklusējuma vērtība ir 0,024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "Ievades plūsmas akumulācijas rastra slānis.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "To var izveidot, izmantojot funkciju <strong>Plūsmas akumulācija</strong>.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "Lauks, kas tiek lietots, lai piešķirtu vērtības izteku izvietojumiem.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "Izteku izvietojumi, kas ir jāpielipina.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "Ievades rastra slānim visas šūnas, kas nav NoData (t.i. tām ir vērtība) tiek uzskatītas par iztekas vietām un tiek pielipinātas.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "Maksimālais attālums kartes mērvienībās, kurā tiek meklēta šūna ar augstāku akumulēto plūsmu.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Norāda pieskaitīšanas traucējumu vidējo vērtību. Lielāka traucējumu vidējā vērtība ļauj veikt mazāku izlīdzināšanu, kamēr mazāka vērtība nodrošina lielāka izlīdzināšanu.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Šis parametrs ir derīgs tikai tad, ja opcijas <strong>Filtra veids</strong> iestatījums ir <strong>Lee filtrs</strong> un <strong>Traucējumu modelis</strong> iestatījums ir <strong>Pieskaitīšanas traucējums</strong> vai <strong>Pieskaitīšanas un reizināšanas traucējums</strong>. Noklusējuma vērtība ir 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Norāda eksponenciālās slāpēšanas ietekmi uz filtrēšanu. Lielāka slāpēšanas vērtība labāk saglabā malas, kamēr mazāka vērtība nodrošina lielāku izlīdzināšanu. Vērtība 0 dod tādu pašu izvadi kā zemo frekvenču filtrs.",
	"@@Speckle_Damping-Factor_tag1@@": "Šis parametrs ir derīgs tikai tad, ja opcijas <strong>Filtra veids</strong> iestatījums ir <strong>Uzlabots Lee filtrs</strong> vai <strong>Frost filtrs</strong>. Noklusējuma vērtība ir 1.",
	"@@Speckle_Filter-Size_tag0@@": "Norāda tā pikseļu loga izmērus, kurš tiek lietos traucējumu filtrēšanai:",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "Norāda tā filtra veidu, kas tiek lietots izlīdzināšanas algoritmā, lai noņemtu plankumveida traucējumus:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Lee filtrs</strong> — samazina plankumveida traucējumus, piemērojot telpisko filtru katram pikselim attēlā, kurš filtrē datus, pamatojoties uz lokālo statistiku, kas tiek parēķināta kvadrātveida logā. Šis filtrs ir noderīgs, kad vēlaties izlīdzināt plankumveida datus, kuriem ir pieskaitāms vai reizināms komponents. Tā ir noklusējuma vērtība.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Uzlabots Lee filtrs</strong> — pielāgota Lee filtra versija, kas ietver parametru <strong>Slāpēšanas koeficients</strong> un <strong>Izskata veidu skaits</strong>. Šis filtrs ir noderīgs, kad vēlaties samazināt plankumu, vienlaikus saglabājot tekstūras informāciju.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Frost filtrs</strong> — samazina plankumveida traucējumus ar eksponenciāli slāpētu simetrisku lokveida filtru, kas izmanto lokālo statistiku individuālos filtra logos. Šis filtrs ir noderīgs, kad vēlaties samazināt plankumu, vienlaikus saglabājot malas radiolokatora attēlos.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Kuan filtrs</strong> — līdzīgi kā Lee filtrs šis filtrs piemēro telpisko filtru katram pikselim attēlā un filtrē datus, pamatojoties uz lokālo statistiku, kas tiek parēķināta kvadrātveida logā. Šis filtrs ir noderīgs, kad vēlaties samazināt plankumu, vienlaikus saglabājot malas radiolokatora attēlos.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Norāda reizināšanas traucējumu vidējo vērtību. Lielāka traucējumu vidējā vērtība ļauj veikt mazāku izlīdzināšanu, kamēr mazāka vērtība nodrošina lielāka izlīdzināšanu.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Šis parametrs ir derīgs tikai tad, ja opcijas <strong>Filtra veids</strong> iestatījums ir <strong>Lee filtrs</strong> un <strong>Traucējumu modelis</strong> iestatījums ir <strong>Pieskaitīšanas traucējums</strong> vai <strong>Pieskaitīšanas un reizināšanas traucējums</strong>. Noklusējuma vērtība ir 1.",
	"@@Speckle_Noise-Model_tag0@@": "Norādiet to traucējumu veidu, kas samazina radiolokatora attēla kvalitāti:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Reizināšanas traucējums</strong> — nejaušs signāla traucējums, kas tiek reizināts, lai iegūtu sagaidāmo signālu uztveršanas vai pārraides laikā.",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Pieskaitīšanas traucējums</strong> — nejaušs signāla traucējums, kas tiek pieskaitīts, lai iegūtu sagaidāmo signālu uztveršanas vai pārraides laikā.",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Pieskaitīšanas un reizināšanas traucējums</strong> — abi traucējumu modeļi.",
	"@@Speckle_Noise-Variance_tag0@@": "Norāda radiolokatora attēla traucējumu novirzi.",
	"@@Speckle_Noise-Variance_tag1@@": "Šis parametrs ir derīgs tikai tad, ja opcijas <strong>Filtra veids</strong> iestatījums ir <strong>Lee filtrs</strong> un <strong>Traucējumu modelis</strong> iestatījums ir <strong>Pieskaitīšanas traucējums</strong> vai <strong>Pieskaitīšanas un reizināšanas traucējums</strong>. Noklusējuma vērtība ir 0,25.",
	"@@Speckle_Number-of-Looks_tag0@@": "Norāda to attēla izskatu veidu skaitu, kuri ietekmē attēla izlīdzināšanu un ļauj novērtēt traucējumu novirzi. Mazāka vērtība nodrošina lielāku izlīdzināšanu, kamēr lielāka vērtība ļauj saglabāt vairāk attēlu elementu.",
	"@@Speckle_Number-of-Looks_tag1@@": "Šis parametrs ir derīgs tikai tad, ja opcijas <strong>Filtra veids</strong> iestatījums ir <strong>Lee filtrs</strong> un <strong>Traucējumu modelis</strong> iestatījums ir <strong>Reizināšanas traucējums</strong> vai opcijas <strong>Filtra veids</strong> iestatījums ir <strong>Kuan filtrs</strong>. Noklusējuma vērtība ir 1.",
	"@@Speckle_Raster_tag0@@": "Ievades rastrs.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "Matrica, kas tiek lietota, lai konvertētu ievades rastru.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "Vienādojums, ko izmanto, lai veiktu šo konvertāciju, ir šāds:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Izvades Josla_R = Svars_P * Josla_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "kur:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Josla_R ir izvades josla, kur R ir skaitlis no 1 līdz izvades joslu skaitam.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Svars_P ir ar komatiem atdalītu svaru saraksts — 1 katrai ievades joslai. Katras joslas svaru summai jābūt vienādai ar 1.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "Josla_C ir ievades attēls, kur C skaitlis no 1 līdz joslu skaitam izvades attēlā.",
	"@@Spectral-Conversion_Raster_tag0@@": "Ievades rastrs.",
	"@@Spectral-Conversion_Raster_tag1@@": "Tas var būt rastra datu kopa, mozaīkas datu kopa vai attēlu pakalpojums.",
	"@@Spectral-Conversion_Size_tag0@@": "Rindu un kolonnu skaits parametrā <strong>Pārvēršanas matrica</strong>.",
	"@@Square_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Square_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Square_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Square_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Square_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Square_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Square_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Square_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Square_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Square_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Square_Extent-Type_tag4@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Square_Raster_tag0@@": "Kvadrātā ceļamās ievades vērtības.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Square-Root_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Square-Root_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Square-Root_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Square-Root_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Square-Root_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Square-Root_Extent-Type_tag4@@": "Saaudzējums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Square-Root_Raster_tag0@@": "Ievades vērtības, kas tiek lietotas, lai atrastu kvadrātsakni.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Ļauj iestatīt statistikas vērtības katrai joslai.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "Kolonna ${Histogram} ir tikai lasāms lauks, kuram var piešķirt vērtību, izmantojot parametru <strong>Importēt</strong>. Ja importējat histogrammas failu, kolonna ${Histogram} tiek atzīmēta kā <strong>Definēta</strong>.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Importē statistikas un histogrammas informāciju no jau esoša rastra vai XML faila.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "Ievades rastrs, kam jāiestata statistika vai histogramma.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Ļauj iestatīt statistikas vērtības katrai joslai.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "Ievades rastrs, kas rāda plūsmas virzienu no katras šūnas.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "Plūsmas virziena rastru var izveidot, lietojot funkciju <strong>Plūsmas virziens</strong>.",
	"@@Stream-Link_Stream-Raster_tag0@@": "Ievades rastrs, kas atspoguļo lineāro straumju tīklu.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "Ievades rastrs, kas rāda plūsmas virzienu no katras šūnas.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "Plūsmas virziena rastru var izveidot, lietojot funkciju <strong>Plūsmas virziens</strong>.",
	"@@Stream-Order_Order-Method_tag0@@": "Metode, kas tiek lietota, lai piešķirtu ūdensteču kārtu.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLER</strong> — ūdensteču kārtošanas metode, ko 1952. gada piedāvāja Štrālers. Ūdensteču kārta palielinās tikai tad, kad vienas un tas pašas kārtas ūdensteces saplūst kopā. Saplūstot pirmās un otrās kārtas ūdenstecēm turpmākā ūdenstece joprojām paliek otrās kārtas, nevis veidojas trešās kārtas ūdenstece. Tā ir noklusējuma vērtība.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong> — ūdensteču kārtošanas metode pēc intensitātes, ko 1967. gada piedāvāja Šrīvs. Visām ūdenstecēm bez pietekām tiek piešķirta intensitāte (kārta) viens. Intensitāte summējas lejup pa nogāzi. Kad divas ūdensteces saplūst, to intensitāte summējas un tiek piešķirta lejup pa nogāzi esošajai ūdenstecei.",
	"@@Stream-Order_Stream-Raster_tag0@@": "Ievades straumes rastrs, kas atspoguļo lineāro straumju tīklu.",
	"@@Stretch_Auto-Gamma_tag0@@": "Izmantojiet parametru <strong>Automātiska gamma</strong>, lai aprēķinātu gammu no datu kopas statistikas un histogrammas. Statistika var būt pašas funkcijas aprēķināti statistiskie dati vai arī statistiku var aprēķināt programmatūra, ja jūs izvēlaties slāni.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Atzīmējiet izvēles rūtiņu <strong>Dinamiska diapazona pielāgošana</strong>, ja vēlaties, lai statistika tiktu aprēķināta tikai no ekrānā redzamajiem pikseļiem. Šī funkcija parasti tiek piemērota, kad attēls tiek publicēts un izmantots tīmekļa lietotnē, kas nevar veikt šāda veida izstiepšanu.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Atzīmējiet izvēles rūtiņu <strong>Aprēķināt statistiku</strong>, ja vēlaties aprēķināt savu statistiku. Aprēķinātā statistika tiek iegūta no 1000 reiz 1000 paraugiem rastra centrā un izmantota izstiepšanai.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Ja šī rūtiņa ir atzīmēta un rastrā ir statistika, vai esat ievadījuši vērtības tabulā <strong>Statistika</strong>, tās tiks izmantotas aprēķināto vērtību vietā, ja vien izstiepšanai nav nepieciešama histogramma. Ja izstiepšanai ir nepieciešama histogramma, kas neeksistē, tā tiek aprēķināta.",
	"@@Stretch_Gamma_tag0@@": "Izmantojiet slīdņa joslu, lai iestatītu vērtību <strong>Gamma</strong>.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Norādiet izmantojamā standartnoviržu skaita vērtību n. Šī metode tiek lietota, lai uzsvērtu, cik ļoti elementu vērtības atšķiras atkarībā no vidējās vērtības; to vislabāk ir izmantot ar normāli dalītiem datiem.",
	"@@Stretch_Output-Maximum_tag0@@": "Iestata histogrammai vislielāko pikseļu vērtību.",
	"@@Stretch_Output-Maximum_tag1@@": "Parametrs <strong>Izvades minimums</strong> un <strong>Izvades maksimums</strong> iestata vērtību diapazonu, kam pēc tam tiek veikta lineāra kontrasta izstiepšana.",
	"@@Stretch_Output-Minimum_tag0@@": "Iestata histogrammai vismazāko pikseļu vērtību.",
	"@@Stretch_Output-Minimum_tag1@@": "Parametrs <strong>Izvades minimums</strong> un <strong>Izvades maksimums</strong> iestata vērtību diapazonu, kam pēc tam tiek veikta lineāra kontrasta izstiepšana.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Norādiet to augsto vērtību procentuālo daļu, kas ir jāizslēdz no izstiepšanas.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "Derīgās vērtības ir diapazonā no 0 līdz 99.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Norādiet to zemo vērtību procentuālo daļu, kas ir jāizslēdz no izstiepšanas.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "Derīgās vērtības ir diapazonā no 0 līdz 99.",
	"@@Stretch_Raster_tag0@@": "Ievades rastrs, kam ir jāveic kontrasta izplešana.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "Parametrs <strong>Stipruma līmenis</strong> nosaka, cik daudz izstiepšanā tiek izmantota sigmoidālā funkcija. Zema vērtība, piemēram, 1, tiek lietota tikai līknes vidējā daļā — tādēļ ir tendence rasties blāvām un izplūdušām krāsām. Augsta vērtība, piemēram, 6, tiek lietota visai līknei — tādēļ ir tendence rasties izteiktām un asām krāsām.",
	"@@Stretch_Statistics_tag0@@": "Dialoglodziņā varat ievadīt savu statistiku. Pēc noklusējuma statistikas vērtības tiek izgūtas no datiem, taču jebkuras šajā parametrā ievadītās vērtības tiek lietotas to vietā.",
	"@@Stretch_Type_tag0@@": "Izvēlieties izstiepšanas veida metodi:",
	"@@Stretch_Type_tag1@@": "Nav--Kontrasta izstiepšana netiek veikta",
	"@@Stretch_Type_tag2@@": "Standartnovirze--Izstiepšana, izmantojot standartnovirzi",
	"@@Stretch_Type_tag3@@": "Minimālās un maksimālās vērtības--Izstiepšana, izmantojot minimālās, maksimālās vērtības",
	"@@Stretch_Type_tag4@@": "Procentuālas minimālās un maksimālās vērtības--Izstiepšana, izmantojot procentuālu izgriezumu",
	"@@Stretch_Type_tag5@@": "Sigmoidāla--Sigmoidāla izstiepšana",
	"@@Stretch_Use-Gamma_tag0@@": "Atzīmējiet izvēles rūtiņu <strong>Izmantot gamma</strong>, ja vēlaties izmantot gamma izstiepšanu.",
	"@@Swath_Cellsize_tag0@@": "Izvades rastra šūnu izmēri tiek noteikti automātiski; taču to var mainīt, ja vēlaties. Šūnu izmērus var mainīt, taču rastra datu kopas pārklājums paliek nemainīgs.",
	"@@Swath_Interpolation-Method_tag0@@": "Šai funkcijai ir četras pārģenerēšanas metodes:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Tuvākais kaimiņš</strong> — aprēķina pikseļa vērtību, izmantojot tuvāko pikseli. Ja avota pikseļi neeksistē, izvadei nevar izveidot nevienu jaunu pikseli.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Bilineāri</strong> — aprēķina pikseļa vērtību, izmantojot četru vistuvāko pikseļu svērto vērtību atkarībā no attāluma.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>Lineāra retināšana</strong> — izmanto trīsstūrveida neregulāru tīklu no katras šūnas centra punktiem neregulārā rastrā, lai interpolētu virsmu, kas pēc tam tiek pārvērsta par regulāru rastru.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Dabiskais kaimiņš</strong> — veic tuvākā kaimiņa piešķiršanu; tā ir visātrākā no interpolācijas metodēm. Tā tiek galvenokārt lietota nošķirtiem datiem, piemēram, zemes izmantošanas klasifikācijai, jo tā nemaina šūnu vērtības. Maksimāla telpiskā kļūda ir viena puse no šūnas izmēra.",
	"@@Swath_Raster_tag0@@": "Pārģenerējamais neregulāri izkārtotais rastrs.",
	"@@Tan_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Tan_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Tan_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Tan_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Tan_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Tan_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Tan_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Tan_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Tan_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Tan_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Tan_Extent-Type_tag4@@": "Saaudzējums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Tan_Raster_tag0@@": "Ievade, kurai tiek aprēķinātas tangentu vērtības.",
	"@@TanH_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@TanH_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@TanH_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@TanH_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@TanH_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@TanH_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@TanH_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@TanH_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@TanH_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@TanH_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@TanH_Extent-Type_tag4@@": "Saaudzējums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@TanH_Raster_tag0@@": "Ievade, kurai tiek aprēķinātas hiperbolisko tangentu vērtības.",
	"@@Tasseled-Cap_Raster_tag0@@": "Ievades rastrs, kam tiek veikta “cepures ar pušķīti” transformācija.",
	"@@Times_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Times_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Times_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Times_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Times_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Times_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Times_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Times_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Times_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Times_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Times_Extent-Type_tag4@@": "Saaudzējums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Times_Raster_tag0@@": "Ievade, kas satur reizināmās vērtības.",
	"@@Times_Raster_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Times_Raster2_tag0@@": "Ievade, kas satur vērtības, ar kurām tiek reizināta pirmā ievade.",
	"@@Times_Raster2_tag1@@": "Šim parametram var ievadīt konstantu vērtību ar nosacījumu, ka otrā parametrā ir norādīts rastrs.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Izvēlieties transponēšanas veidu, lai veiktu vai norādītu pielāgoto vērtību:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8 Cirrus",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8 mākonis",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8 mākoņēna",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8 paredzētais aizpildījums",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8 neizmantojamais rāmis",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8 sniegs/ledus",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8 reljefa oklūzija",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8 veģetācija",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8 ūdens",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Lietotāja definēts",
	"@@Transpose-Bits_Constant-Value_tag0@@": "Papildu izvēles vērtība, kas tiek lietota, lai aizpildītu bitus, kas nav iesaistīti transponēšanas procesā. Šis parametrs tiek parādīts tad, kad parametra <strong>Ģenerēt aizpildījuma rastru no konstantes</strong> iestatījums ir <strong>Jā</strong>.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Norāda rastra datu kopu, kas tiek lietota, lai aizpildītu bitus, kas nav iesaistīti transponēšanā. Šis parametrs tiek parādīts tad, kad parametra <strong>Ģenerēt aizpildījuma rastru no konstantes</strong> iestatījums ir <strong>Nē</strong>.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Ģenerē aizpildījuma rastru, izmantojot konstantes vērtību:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Jā</strong> — tiek ģenerēts rastrs, izmantojot konstantes vērtību, lai aizpildītu bitus, kas nav iesaistīti transponēšanā. Tā ir noklusējuma vērtība.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>Nē</strong> — tiek ģenerēts rastrs, izmantojot pikseļu vērtības no jau esošas rastra datu kopas, lai aizpildītu bitus, kas nav iesaistīti transponēšanā.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "Tikai lasāma tabula, kurā ir redzami izvades biti un ievades, kas tos aizstās.",
	"@@Transpose-Bits_Raster_tag0@@": "Izpakojamais un pārkartējamais ievades rastrs.",
	"@@Unit-Conversion_From-Unit_tag0@@": "Pikseļu sākotnējo mērvienību veids.",
	"@@Unit-Conversion_Raster_tag0@@": "Ievades rastrs, kas satur konvertētas mērvienības.",
	"@@Unit-Conversion_To-Unit_tag0@@": "Pikseļu konvertēto mērvienību veids.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Norāda, kā tika mērīts virziena komponents.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Ģeogrāfiski--0° norāda uz ziemeļiem un 90° — uz austrumiem",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Aritmētiski--0° norāda uz austrumiem un 90° — uz ziemeļiem",
	"@@Vector-Field_Input-Data-Type_tag0@@": "Tā vektoru lauka veids, kurš attēlo jūsu ievades.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Nezināms--Nav zināms vai ievades attēlo U-V vai intensitāti-virzienu.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V--Ievades datu attēlo U un V komponentus.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Intensitāte-virziens--Ievades dati attēlo intensitāti un virzienu.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Norāda tā vektoru lauka veidu, kurš attēlo jūsu izvadi.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Intensitāte-virziens--Izvades dati attēlo intensitāti un virzienu.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V--Izvades datu attēlo U un V komponentus.",
	"@@Vector-Field_Raster1_tag0@@": "Pirmais ievades rastrs.",
	"@@Vector-Field_Raster1_tag1@@": "Tajā ir U vērtība vai intensitāte.",
	"@@Vector-Field_Raster2_tag0@@": "Otrais ievades rastrs.",
	"@@Vector-Field_Raster2_tag1@@": "Tajā ir V vērtība vai virziens.",
	"@@Viewshed_Analysis-Method_tag0@@": "Izvēlēties metodi, ar kuru tiks aprēķināta redzamība Šī opcija ļauj ziedot mazliet precizitātes, lai iegūtu palielinātu veiktspēju.",
	"@@Viewshed_Analysis-Method_tag1@@": "Visas skata līnijas--Skata līnija tiek veidota katram pikselim rastrā, lai radītu redzamās teritorijas. Tā ir noklusējuma metode.",
	"@@Viewshed_Analysis-Method_tag2@@": "Perimetra skata līnijas — skata līnijas tiek veidotas tikai redzamo teritoriju perimetra pikseļiem, lai radītu redzamības teritorijas. Šai metodei ir labāka veiktspēja nekā metodei <strong>Visas skata līnijas</strong>, jo tiek aprēķināts mazāks skata līniju skaits.",
	"@@Viewshed_Analysis-Type_tag0@@": "Izvēlieties, kāda veida redzamības analīzi vēlaties veikt — noteikt, cik redzama ir katra šūna vērotājiem, vai katras virsmas izvietojumam identificēt, kuri vērotāji ir redzami.",
	"@@Viewshed_Analysis-Type_tag1@@": "Frekvence--Reižu skaits, cik katra pikseļa izvietojums ievades virsmas rastrā var būt redzams no ievades vērošanas vietām (kā punkti vai virsotnes lauztu līniju elementu vērotājiem). Tā ir noklusējuma vērtība.",
	"@@Viewshed_Analysis-Type_tag2@@": "Vērotāji--Izvadei tiek precīzi identificēti, kuri vērotāju punkti ir redzami no katra rastra virsmas izvietojuma. Šim analīzes veidam atļautais ievades vērotāju maksimālais skaits ir 32.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Šī vērtība nosaka horizontālas skenēšanas diapazona beigu leņķi. Vērtība jānorāda grādos no 0 līdz 360,0, kur 0 ir orientēta uz ziemeļiem. Noklusējuma vērtība ir 360,0.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Tas var būt lauks ievades datu kopā <strong>Vērotāja elementi</strong> vai skaitliska vērtība. Ja šim parametram ir iestatīta vērtība, tā tiek piemērota visiem vērotājiem. Lai katram vērotājam norādītu atšķirīgu vērtību, iestatiet šo parametru datu kopas laukā <strong>Vērotāja elementi</strong>.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Šī vērtība nosaka horizontālas skenēšanas diapazona sākuma leņķi. Vērtība jānorāda grādos no 0 līdz 360,0, kur 0 ir orientēta uz ziemeļiem. Noklusējuma vērtība ir 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Tas var būt lauks ievades datu kopā <strong>Vērotāja elementi</strong> vai skaitliska vērtība. Ja šim parametram ir iestatīta vērtība, tā tiek piemērota visiem vērotājiem. Lai katram vērotājam norādītu atšķirīgu vērtību, iestatiet šo parametru datu kopas laukā <strong>Vērotāja elementi</strong>.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "Iekšējā rādiusa parametru attāluma veids.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Neatzīmēts — parametrs <strong>Iekšējais rādiuss</strong> tiek interpretēts kā 2D attālums. Tā ir noklusējuma vērtība.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Atzīmēts — parametrs <strong>Iekšējais rādiuss</strong> tiek interpretēts kā 3D attālums.",
	"@@Viewshed_Inner-Radius_tag0@@": "Šī vērtība nosaka sākuma (minimālo) attālumu, no kura tiek noteikta redzamība. Pikseļi, kas atrodas tuvāk par šo attālumu, tiek uzskatīti par neredzamiem izvadē, taču joprojām var aizsegt to pikseļu redzamību, kas ir starp <strong>iekšējo rādiusu</strong> un <strong>ārējo rādiusu</strong>. Noklusējuma vērtība ir 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "Tas var būt lauks ievades datu kopā <strong>Vērotāja elementi</strong> vai skaitliska vērtība. Ja šim parametram ir iestatīta vērtība, tā tiek piemērota visiem vērotājiem. Lai katram vērotājam norādītu atšķirīgu vērtību, iestatiet šo parametru datu kopas laukā <strong>Vērotāja elementi</strong>.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Šī vērtība tiek lietota, lai definētu vērotāju punktu vai virsotņu virsmas augstumu.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Tas var būt lauks ievades datu kopā <strong>Vērotāja elementi</strong> vai skaitliska vērtība. Ja šis parametrs nav norādīts, vērotāja augstums tiek iegūts no virsmas rastra, izmantojot bilineāru interpolāciju. Ja šim parametram ir iestatīta vērtība, tad tā tiek piemērota visiem vērotājiem. Lai katram vērotājam norādītu atšķirīgu vērtību, iestatiet šo parametru datu kopas laukā <strong>Vērotāja elementi</strong>.",
	"@@Viewshed_Observer-Features_tag0@@": "Nepieciešamā ievades rastra klase, kas nosaka vērotāju izvietojumu. Tas var būt punkts, vairāki punkti vai lauztas līnijas elementi.",
	"@@Viewshed_Observer-Features_tag1@@": "Redzamības aprēķinu laikā ievades elementu klase tiek transformēta 3D ģeocentriskā koordinātu sistēmā. Aprēķins ignorē vērotājus, kas atrodas ārpus virsmas rastra pārklājuma vai ir izvietoti uz NoData šūnām.",
	"@@Viewshed_Observer-Offset_tag0@@": "Šī vērtība norāda vertikālo attālumu (virsmas mērvienībās), kas jāpievieno vērotāja augstumam. Tam jābūt pozitīvam veselam skaitlim vai skaitlim ar peldošo punktu.",
	"@@Viewshed_Observer-Offset_tag1@@": "Tas var būt lauks ievades datu kopā <strong>Vērotāja elementi</strong> vai skaitliska vērtība. Ja šim parametram ir iestatīta vērtība, tā tiek piemērota visiem vērotājiem. Lai katram vērotājam norādītu atšķirīgu vērtību, iestatiet šo parametru datu kopas laukā <strong>Vērotāja elementi</strong>.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Ārējā rādiusa parametru attāluma veids.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Neatzīmēts — parametrs <strong>Ārējais rādiuss</strong> tiek interpretēts kā 2D attālums. Tā ir noklusējuma vērtība.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Atzīmēts — parametrs <strong>Ārējais rādiuss</strong> tiek interpretēts kā 3D attālums.",
	"@@Viewshed_Outer-Radius_tag0@@": "Šī vērtība nosaka maksimālo attālumu, no kura tiek noteikta redzamība. Tālāk par šo attālumu esošie pikseļi tiek izslēgti no analīzes.",
	"@@Viewshed_Outer-Radius_tag1@@": "Tas var būt lauks ievades datu kopā <strong>Vērotāja elementi</strong> vai skaitliska vērtība. Ja šim parametram ir iestatīta vērtība, tā tiek piemērota visiem vērotājiem. Lai katram vērotājam norādītu atšķirīgu vērtību, iestatiet šo parametru datu kopas laukā <strong>Vērotāja elementi</strong>.",
	"@@Viewshed_Raster_tag0@@": "Nepieciešamais ievades virsmas rastrs. Tas var būt vesels skaitlis vai rastrs ar peldošo punktu.",
	"@@Viewshed_Raster_tag1@@": "Redzamības aprēķinu laikā ievades tiek transformēta 3D ģeocentriskā koordinātu sistēmā. Ievades rastra NoData šūnas nebloķē redzamības noteikšanu.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Redzamās gaismas refrakcijas koeficients gaisā.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "Noklusējuma vērtība ir 0,13.",
	"@@Viewshed_Surface-Offset_tag0@@": "Šī vērtība norāda vertikālo attālumu (virsmas mērvienībās), kas jāpievieno katra mērķa pikseļa z vērtībai, kad tam tiek novērtēta redzamība. Tam jābūt pozitīvam veselam skaitlim vai skaitlim ar peldošo punktu.",
	"@@Viewshed_Surface-Offset_tag1@@": "Tas var būt lauks ievades datu kopā <strong>Vērotāja elementi</strong> vai skaitliska vērtība. Ja šim parametram ir iestatīta vērtība, tā tiek piemērota visiem vērotājiem. Lai katram vērotājam norādītu atšķirīgu vērtību, iestatiet šo parametru datu kopas laukā <strong>Vērotāja elementi</strong>.",
	"@@Viewshed_Vertical-Error_tag0@@": "Nenoteiktības daudzums, kas tiek mērīts kā vidējā kvadrātiskā kļūda (RMSE) virsmas augstuma vērtībās. Tā ir vērtība ar peldošo punktu, kas atspoguļo ievades augstuma vērtību sagaidāmo kļūdu. Kad šim parametram tiek piešķirta vērtība, kas ir lielāka par 0, izvades redzamības rastrs ir skaitlis ar peldošo punktu. Šādā gadījumā katra pikseļa vērtība izvades redzamības rastrā ataino varbūtību summu, ka šī šūna ir redzama jebkuram no vērotājiem.",
	"@@Viewshed_Vertical-Error_tag1@@": "Ja parametra <strong>Analīzes veids</strong> iestatījums ir <strong>Vērotāji</strong> vai parametra <strong>Analīzes metode</strong> iestatījums ir <strong>Perimetra skata līnijas</strong>, šis parametrs tiek atspējots.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Šī vērtība nosaka skenēšanas vertikālā apakšējā leņķa robežvērtību zem horizontālās plaknes. Vērtība jānorāda grādos no -90,0 līdz 0 un var būt gan vesels skaitlis, gan skaitlis ar peldošo punktu. Noklusējuma vērtība ir -90,0.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Tas var būt lauks ievades datu kopā <strong>Vērotāja elementi</strong> vai skaitliska vērtība. Ja šim parametram ir iestatīta vērtība, tā tiek piemērota visiem vērotājiem. Lai katram vērotājam norādītu atšķirīgu vērtību, iestatiet šo parametru datu kopas laukā <strong>Vērotāja elementi</strong>.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Šī vērtība nosaka skenēšanas vertikālā augšējā leņķa robežvērtību zem virs plaknes. Vērtība jānorāda grādos no 0 līdz 90,0 un var būt gan vesels skaitlis, gan skaitlis ar peldošo punktu. Noklusējuma vērtība ir 90,0.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Tas var būt lauks ievades datu kopā <strong>Vērotāja elementi</strong> vai skaitliska vērtība. Ja šim parametram ir iestatīta vērtība, tā tiek piemērota visiem vērotājiem. Lai katram vērotājam norādītu atšķirīgu vērtību, iestatiet šo parametru datu kopas laukā <strong>Vērotāja elementi</strong>.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "Ievades rastrs, kas rāda plūsmas virzienu no katras šūnas.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "Plūsmas virziena rastru var izveidot, lietojot funkciju <strong>Plūsmas virziens</strong>.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "Ievades izteku izvietojumi.",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Šis rastrs attēlo šūnas, virs kurām tiek noteikta atbilstošā teritorija vai satece. Visas šūnas, kuru veids nav NoData, tiek izmantotas kā avota šūnas.",
	"@@Watershed_Pour-Point-Field_tag0@@": "Lauks, kas tiek lietots, lai piešķirtu vērtības izteku izvietojumiem.",
	"@@Watershed_Pour-Point-Field_tag1@@": "Rastra izteku datu kopai pēc noklusējuma tiek lietota vērtība ${Value}.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "Saaudzējums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Weighted-Overlay_Scales_tag0@@": "Jauno vērtību diapazons, saskaņā ar kuru jāpārkartē vecās vērtības.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "Svērtās pārklāšanās tabula sastāv no četrām daļām:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Slānis--Visiem ievades rastriem jābūt veseliem skaitļiem.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Ietekme--Katrs ievades rastrs tiek vērtēts pēc tā svarīguma vai ietekmes, kas tiek izteikts kā relatīvie procenti. Procentuālās ietekmes svaru summai jābūt vienādai ar 100 un katram svaram jābūt norādītam izmantojot veselu skaitļu vērtības.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Lauks--Vesela skaitļa vai virknes lauks ievades rastrā, kas tiek izmantots vērtēšanai.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Pārkartēšanas tabula--Katrai vērtībai ievades rastrā tiek piešķirta jauna mēroga vērtība, pamatojoties uz pārkartēšanas tabulu. Mēroga vērtība var būt derīga vērtība vai NoData vērtība.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "Saaudzējums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "Svērto summu tabulu nosaka trīs rekvizīti:",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Slānis--Vērtējamais rastrs.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Lauks--Lauks vai rastrs, kas tiek lietots vērtēšanai.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Svars--Svērtā vērtība, ar kuru tiek reizināts rastrs. Tā var būt jebkāda pozitīva vai negatīva decimāldaļskaitļa vērtība.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "Vienas joslas rastrs, kura pikseļu vērtības atspoguļo apkārtējā gaisa temperatūru.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "Mērījumu mērvienības tiek sasaistītas ar ievades temperatūras rastru. Pieejamās ievades mērvienības ir Celsija, Fārenheita un Kelvina grādi.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "Mērījumu mērvienības tiek sasaistītas ar izvades rastru. Pieejamās izvades mērvienības ir Celsija, Fārenheita un Kelvina grādi.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "Vienas joslas rastrs, kura pikseļu vērtības atspoguļo vēja ātrumu.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Nosaka mērījumu mērvienības vēja ātruma rastram:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Jūdzes stundā (mph)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Kilometri stundā (km/h)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Metri sekundē (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Pēdas sekundē (ft/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Mezgli (kn)",
	"@@Zonal-Remap_Background-Value_tag0@@": "Izvades rastra sākotnējā pikseļu vērtība pirms ievades pikseļu pārkartēšanas.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "Vērtība, kas tiks piešķirta pikselim, kurš neapmierina nevienu no nosacījumiem, kas iestatīti opcijā <strong>Zonas atribūtu tabula</strong>.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "Tā ir arī izvades pikseļu vērtība, ja nav norādīts parametrs <strong>Izvades vērtības lauka nosaukums</strong> vai attiecīgā zonālā sliekšņa izvades vērtība nav norādīta opcijā <strong>Zonas atribūtu tabula</strong>.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "Lauka nosaukums, kas satur maksimālo vērtību, zem kuras tiek pārkartēts ievades pikselis.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Ja tā vērtība nav norādīta vai ir nulle, pikseļu vērtības netiek salīdzinātas ar maksimālo vērtību.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "Lauka nosaukums, kas satur minimālo vērtību, virs kuras tiek pārkartēts ievads pikselis.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Ja tā vērtība nav norādīta vai ir nulle, pikseļu vērtības netiek salīdzinātas ar minimālo vērtību.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "Lauka nosaukums, kas satur mērķa vērtību, uz kuru tiek pārkartēts ievads pikselis.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Ja lauka vērtība nav norādīta vai ir nulle, pārkartēto pikseļu vērtības tiek iestatītas kā <strong>noklusējuma izvades vērtības</strong>.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "Nepieciešamā vienas joslas rastra ievade, kas satur pārkartējamās pikseļu vērtības.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "Papildu izvēles vaicājums, kas tiek piemērots parametram <strong>Zonas atribūtu tabula</strong>.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "Ja kā piemēru lietojāt iepriekš minēto tabulu, vaicājums būtu ${Variable1 = 'bare earth' AND Variable2 = 'California'}.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "Nepieciešamā ievades tabula, kas satur vismaz trīs laukus. Tajā jābūt minimālajai sliekšņa vērtībai, maksimālajai sliekšņa vērtībai un mērķa vērtībai. Mērķa vērtība ir lauks, kas satur pārkartētās vērtības.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "Faila formāts var būt elementu klase, elementu pakalpojums vai jebkura veida tabula, ko atbalsta ArcGIS.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "Opcijas <strong>Zonas atribūtu tabula</strong> lauka nosaukums, kas satur ID vērtības.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "Zonas ID vērtības tiek tieši piesaistītas zonas ID jūsu zonālajā rastrā. Tās nodrošina papildu filtrēšanas līmeni pārkartēšanas laikā. Ja nav neviena zonas ID, kas būtu saistīts ar konkrēto ierakstu tabulā, tas netiek izmantota pārkartēšanā.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "Vienas joslas rastrs, kurā katrs pikselis definē zonas, kas ir saistītas ar konkrētu izvietojumu. Zona ir visas ievades teritorijas ar vienādu vērtību. Teritorijām nav jābūt nepārtrauktām.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Norāda metodi, kas izmantojama, lai nodrošinātu dimensijas prognožu vērtības.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>Pēc vērtības</strong> — prognoze tiks aprēķināta vienai dimensijas vērtībai. Piemēram: jūs vēlaties veikt ikgadēju nokrišņu prognozi 2050., 2100. un 2150. gadam. Tā ir noklusējuma vērtība.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>Pēc intervāla</strong> — prognoze tiks aprēķināta sākuma un beigu vērtības noteiktam (ierobežotam) dimensijas intervālam. Piemēram: jūs vēlaties veikt ikgadēju nokrišņu prognozi laika posmā no 2050. līdz 2150. gadam.",
	"@@Predict-Using-Trend_end_tag0@@": "Dimensijas intervāla beigu datums, augstums vai dziļums, kas jāizmanto prognozē.",
	"@@Predict-Using-Trend_end_tag1@@": "Šis parametrs ir nepieciešams tad, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc intervāla</strong>.",
	"@@Predict-Using-Trend_raster_tag0@@": "Ievades daudzdimensiju tendences rastrs no funkcijas <strong>Ģenerēt tendenci</strong>.",
	"@@Predict-Using-Trend_start_tag0@@": "Dimensijas intervāla sākuma datums, augstums vai dziļums, kas jāizmanto prognozē.",
	"@@Predict-Using-Trend_start_tag1@@": "Šis parametrs ir nepieciešams tad, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc intervāla</strong>.",
	"@@Predict-Using-Trend_unit_tag0@@": "Mērvienība, kas tiks izmantota intervāla vērtībai. Šis parametrs tiek piemērots tikai tad, ja analīzes dimensija ir laika dimensija.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Stundas</strong> — prognoze tiks aprēķināta katrai stundai laika diapazonā, ko apraksta parametrs <strong>Sākums</strong>, <strong>Beigas</strong> un <strong>Vērtības intervāls</strong>.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Dienas</strong> — prognoze tiks aprēķināta katrai dienai laika diapazonā, ko apraksta parametrs <strong>Sākums</strong>, <strong>Beigas</strong> un <strong>Vērtības intervāls</strong>.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Nedēļas</strong> — prognoze tiks aprēķināta katrai nedēļai laika diapazonā, ko apraksta parametrs <strong>Sākums</strong>, <strong>Beigas</strong> un <strong>Vērtības intervāls</strong>.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Mēneši</strong> — prognoze tiks aprēķināta katram mēnesim laika diapazonā, ko apraksta parametrs <strong>Sākums</strong>, <strong>Beigas</strong> un <strong>Vērtības intervāls</strong>.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Gadi</strong> — prognoze tiks aprēķināta katram gadam laika diapazonā, ko apraksta parametri <strong>Sākums</strong>, <strong>Beigas</strong> un <strong>Vērtības intervāls</strong>.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "Darbību skaits starp divām dimensijas vērtībām, kas jāiekļauj prognozē. Noklusējuma vērtība ir 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Šis parametrs ir nepieciešams tad, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc intervāla</strong>.",
	"@@Predict-Using-Trend_values_tag0@@": "Dimensijas vērtība vai vērtības, kas jāizmanto prognozē.",
	"@@Predict-Using-Trend_values_tag1@@": "Laika, dziļuma un augstuma vērtību formātam jāatbilst tam dimensijas vērtību formātam, kas izmantots tendenču rastra ģenerēšanai. Ja tendenču rastrs tika ģenerēts StdTime dimensijai, formātam jābūt GGGG-MM-DDTHH:MM:SS, piemēram, 2050-01-01T00:00:00. Vairākas vērtības tiek atdalītas ar semikolu.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Norādiet rastra funkcijas veidni, kas jāizmanto, lai apkopotu vairākus sektorus mazākā sektoru skaitā vai vienā sektorā.",
	"@@Process-Raster-Collection_dimension_tag0@@": "Apkopošanas dimensija. Tā ir dimensija, kurā tiks apkopoti mainīgie.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Norādiet rastra funkcijas veidni, kas jāizmanto, lai apstrādātu katru sektoru vai vienību ievades rastra kolekcijā.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Norāda atslēgas vārda intervālu, kas tiks izmantots, veicot apkopošanu dimensijā. Šis parametrs ir nepieciešams tad, ja parametra <strong>veids</strong> iestatījums ir <strong>Intervāla atslēgas vārds</strong> un apkopošana ir jāveic laika gaitā.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>Katru stundu</strong> — datu vērtības tiks apkopotas stundas laika soļos, un rezultāts ietvers katru stundu laika sērijā.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Katru dienu</strong> — datu vērtības tiks apkopotas dienas laika soļos, un rezultāts ietvers katru dienu norādītajā laika sērijā.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Katru nedēļu</strong> — datu vērtības tiks apkopotas nedēļas laika soļos, un rezultāts ietvers katru laika virknes nedēļu.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>Reizi dekādē</strong> — datu vērtības tiks apkopotas 3 periodos ar 10 dienu ilgumu katram. Pēdējais periods var būt vairāk vai mazāk kā 10 dienas ilgs. Izvade ietvers 3 sektorus katram mēnesim.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>Reizi piecās dienās</strong> — datu vērtības tiks apkopotas 6 periodos ar 5 dienu ilgumu katram. Pēdējais periods var būt vairāk vai mazāk kā 5 dienas ilgs. Izvade ietvers 6 sektorus katram mēnesim.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Katru mēnesi</strong> — datu vērtības tiks apkopotas mēneša laika soļos, un rezultāts ietvers katru laika virknes mēnesi.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Katru ceturksni</strong> — datu vērtības tiks apkopotas ceturkšņa laika soļos, un rezultāts ietvers katru laika virknes ceturksni.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Katru gadu</strong> — datu vērtības tiks apkopotas gada laika soļos, un rezultāts ietvers katru laika virknes gadu.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Periodiski katru dienu</strong> — datu vērtības tiks apkopotas dienas laika soļos, un rezultāts ietvers vienu apkopoto vērtību uz vienu Jūlija kalendāra dienu. Izvade ietvers ne vairāk kā 366 dienu laiku sektorus.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Periodiski katru nedēļu</strong> — datu vērtības tiks apkopotas nedēļas laika soļos, un rezultāts ietvers vienu apkopoto vērtību nedēļā. Izvade ietvers ne vairāk kā 53 nedēļas laika sektorus.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Periodiski katru mēnesi</strong> — datu vērtības tiks apkopotas mēneša laika soļos, un rezultāts ietvers vienu apkopoto vērtību mēnesī. Izvade ietvers ne vairāk kā 12 mēnešu laika sektorus.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Periodiski katru ceturksni</strong> — datu vērtības tiks apkopotas ceturkšņa laika soļos, un rezultāts ietvers vienu apkopoto vērtību ceturksnī. Izvade ietvers ne vairāk kā 4 ceturkšņa laika sektorus.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "Maksimālā vērtība diapazonam.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Šis parametrs ir nepieciešams tad, ja parametra <strong>veids</strong> iestatījums ir <strong>Intervāla diapazoni</strong>.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "Minimālā vērtība diapazonam.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Šis parametrs ir nepieciešams tad, ja parametra <strong>veids</strong> iestatījums ir <strong>Intervāla diapazoni</strong>.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Norādiet rastra funkcijas veidni, kas jāizmanto, lai parādītu apstrādāto rastra slāni.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "Ievades daudzdimensiju rastrs, mozaīkas slānis vai mozaīkas datu kopa.",
	"@@Process-Raster-Collection_type_tag0@@": "Norāda dimensijas intervālu, kuram tiks apkopoti dati.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>Visi</strong> — datu vērtības tiks apkopotas visos sektoros. Tā ir noklusējuma vērtība.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Intervāla atslēgas vārds</strong> — Mainīgie dati tiks apkopoti, izmantojot vispārzināmu intervālu.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Intervāla diapazoni</strong> — mainīgie dati tiks apkopoti starp norādītajiem vērtību vai datumu pāriem.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Intervāla vērtības</strong> — mainīgie dati tiks apkopoti, izmantojot lietotāja norādīto intervālu un mērvienību.",
	"@@Process-Raster-Collection_unit_tag0@@": "Mērvienība, kas tiks izmantota intervāla vērtībai. Šis parametrs ir nepieciešams tad, ja parametrs <strong>Dimensija</strong> ir laika lauks un parametra <strong>veids</strong> iestatījums ir <strong>Intervāla vērtība</strong>.",
	"@@Process-Raster-Collection_unit_tag1@@": "Ja apkopojat pēc cita parametra, nevis laika, šī opcija nebūs pieejama un intervāla vērtības vienība atbildīs ievades daudzdimensiju rastra datu mainīgajai vienībai.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Stundas</strong> — datu vērtības dotajā intervālā tiks apkopotas stundas laika sektoros.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Dienas</strong> — datu vērtības dotajā intervālā tiks apkopotas dienu laika sektoros.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Nedēļas</strong> — datu vērtības dotajā intervālā tiks apkopotas nedēļas laika sektoros.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Mēneši</strong> — datu vērtības dotajā intervālā tiks apkopotas mēneša laika sektoros.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Gadi</strong> — datu vērtības dotajā intervālā tiks apkopotas gada laika sektoros.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "Intervāla izmērs, kas tiks izmantots apkopošanai. Šis parametrs ir nepieciešams tad, ja parametra <strong>veids</strong> iestatījums ir <strong>Intervāla vērtība</strong>.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "Piemēram, lai apkopotu 30 gadu gaitā fiksētus mēneša temperatūras datus ar 5 gadu palielinājumiem, ievadiet 5 kā <strong>vērtības intervālu</strong>, un norādiet <strong>mērvienību</strong> kā <strong>Gadi</strong>.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Norāda opcijas izvades pikseļu vērtību definēšanai.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Atzīmēts — nebūs nevienas negatīvas izvades vērtības.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Neatzīmēts — var būt negatīvas daļējas zemsedzes vērtības.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "Ievades rastrs.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "Ievades spektra profila fails.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "Spektra informācija dažādām zemsedzes klasēm.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Spektra profils</strong> — klasifikatora definīcijas fails (${.ecd}), kas ģenerēts no rīka <strong><strong>Trenēt maksimālās iespējamības klasifikatoru</strong></strong>, vai JavaScript objekta notācijas faila (${.json}), kurā ir klases spektra profili.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Trenējamais elements</strong> — laukumveida elementi vai treniņu parauga elementu klase, kas ģenerēta no rīka <strong>Trenējamo paraugu pārvaldnieks</strong>.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Norāda opcijas izvades pikseļu vērtību definēšanai.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Atzīmēts — klases vērtības katram pikselim tiek norādītas decimāldaļu formātā, ja visu klašu summa ir 1. Piemēram: 1. klase = 0,16; 2. klase = 0,24; 3. klase = 0,60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Neatzīmēts — visu klašu summa pikselī var pārsniegt 1.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "Ievades treniņu elementa fails.",
	"@@Aggregate_aggregationtechnique_tag0@@": "Apkopošanai izmantojama metode. Ievades šūnu vērtības, ko ietver aptuvenu vērtību izvades šūnas, tiek apkopotas kādā no šiem statistikas veidiem:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Summa</strong> — ievades šūnu kopsumma. Tā ir noklusējuma vērtība.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Maksimums</strong> — lielākā ievades šūnu vērtība.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Vidējā vērtība</strong> — ievades šūnu vidējā vērtība.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Mediānas vērtība</strong> — ievades šūnu mediānas vērtība.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Minimums</strong> — vismazākā ievades šūnu vērtība.",
	"@@Aggregate_cellfactor_tag0@@": "Koeficients, ar kuru reizināt ievades rastra šūnas izmēru.",
	"@@Aggregate_cellfactor_tag1@@": "Piemēram: šūnas koeficienta vērtība 3 uzrādīs trīs reizes lielāku šūnas izmēru nekā ievades rastā.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Norāda, kā izmantot ievades rastra robežas, kad rastra rindas un kolonnas nav šūnu koeficienta reizinājums.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Atzīmēts — izvērš ievades rastra augšējās vai labās puses robežas tā, lai šūnu kopskaits rindā vai kolonnā ir šūnu koeficienta reizinājums. Izmantojot šo opciju, izvades rastrs var iekļaut lielāku telpisko pārklājumu nekā ievades rastrs. Tā ir noklusējuma vērtība.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Neatzīmēts — samazina rindu un kolonnu skaitu izvades rastrā. Šādi tiek noņemtas atlikušās šūnas ievades rastra augšējā vai labās puses malā, padarot ievades rastra rindu un kolonnu skaitu par šūnu koeficienta reizinājumu. Izmantojot šo opciju, izvades rastrs var ietvert mazāku telpisko pārklājumu nekā ievades rastrs.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Norāda, vai apkopošanas aprēķini ignorē vērtības ${NoData}.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Atzīmēts — norāda, ja ${NoData} vērtības pastāv jebkurām šūnām, kas iekļaujas izvades lielākas rastra šūnas telpiskajā pārklājumā; ${NoData} vērtības tiks ignorētas, nosakot izvades šūnu novietojuma vērtību. Izvades šūnas vērtības noteikšanai tiek izmantotas tikai tās ievades šūnas izvades šūnas pārklājumā, kurām ir datu vērtības. Tā ir noklusējuma vērtība.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Neatzīmēts — norāda, ka gadījumā, ja jebkura šūnai, kas iekļaujas lielākas izvades rastra šūnas telpiskajā pārklājumā, ir ${NoData} ir vērtība; šīs izvades šūnas novietojuma vērtība tad būs ${NoData}. Ja tiek izmantota šī opcija, tas nozīmē, ka, ja šūnas apkopojumā satur ${NoData} vērtību, nepietiek informācijas, lai veiktu norādītos aprēķinus, kas nepieciešami izvades vērtības noteikšanai.",
	"@@Aggregate_raster_tag0@@": "Apkopojamais ievades rastrs.",
	"@@Expand_numberofcells_tag0@@": "Izvēršamo šūnu skaits.",
	"@@Expand_numberofcells_tag1@@": "Vērtībai jābūt veselam skaitlim, un tas var būt 1 vai lielāks.",
	"@@Expand_raster_tag0@@": "Ievades rastrs, kuram jāizvērš identificētās zonas.",
	"@@Expand_raster_tag1@@": "Tam ir jābūt veselam skaitlim.",
	"@@Expand_zonevalues_tag0@@": "Izvēršamo zonu saraksts.",
	"@@Expand_zonevalues_tag1@@": "Zonas vērtībām jābūt veseliem skaitļiem, un tie var būt jebkādā secībā.",
	"@@Expand_zonevalues_tag2@@": "Lai norādītu vairākas zonas, zonu vērtību atdalīšanai izmantojiet atstarpi.",
	"@@Multidimensional-Filter_dimension_tag0@@": "Dimensija, no kura izgūt mainīgos.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Norāda metodi, kas tiks izmantota, lai dimensiju sadalītu sektoros.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>Visi</strong> — tiks izmantots pilns katras dimensijas diapazons. Tā ir noklusējuma vērtība.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>Pēc vērtības</strong> — dimensija tiks sadalīta sektoros, izmantojot dimensijas vērtību vai vērtību sarakstu.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>Pēc diapazoniem</strong> — dimensija tiks sadalīta sektoros, izmantojot diapazonu vai diapazonu sarakstu.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>Pēc iterācijas</strong> — dimensija tiks sadalīta sektoros, atbilstoši norādītajam intervāla izmēram.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "Pirmā intervāla beigas. Šo intervālu izmanto, lai veiktu iterāciju datu kopās. Šis parametrs ir nepieciešams tad, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc iterācijas</strong>.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "Maksimālā vērtība diapazonam. Šis parametrs ir nepieciešams tad, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc diapazoniem</strong>.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "Minimālā vērtība diapazonam. Šis parametrs ir nepieciešams tad, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc diapazoniem</strong>.",
	"@@Multidimensional-Filter_raster_tag0@@": "Ievades daudzdimensiju rastrs.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>Tabulā norādītie intervāla diapazoni tiks izmantoti, lai apkopotu vērtību grupas. Minimālās un maksimālās vērtības norāda iekļaujamo diapazonu.</p><p>Šis parametrs ir nepieciešams, ja parametra <strong>Veids</strong> iestatījums ir <strong>Intervāla diapazoni</strong>.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "Pirmā intervāla sākums. Šo intervālu izmanto, lai veiktu iterāciju datu kopās. Šis parametrs ir nepieciešams tad, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc iterācijas</strong>.",
	"@@Multidimensional-Filter_step_tag0@@": "Frekvence, kādā dati tiks sadalīti sektoros. Šo intervālu izmanto, lai veiktu iterāciju datu kopās. Šis parametrs ir nepieciešams tad, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc iterācijas</strong>. Noklusējuma vērtība ir 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Norāda iterācijas mērvienību. Šis parametrs ir nepieciešams tad, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc iterācijas</strong> un parametra <strong>Dimensija</strong> iestatījums ir <strong>StdTime</strong>.",
	"@@Multidimensional-Filter_value_tag0@@": "Norādītā dimensijas vērtība. Šis parametrs ir nepieciešams tad, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc vērtības</strong>.",
	"@@Multidimensional-Filter_variables_tag0@@": "Mainīgie, kas tiks iekļauti izvades daudzdimensiju rastra slānī. Ja nav norādīts neviens mainīgais, tiks izmantots pirmais mainīgais.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Norāda, vai slānim jābūt dimensijas vērtībām. Šī opcija ir pieejama tikai tad, ja slāņa izveidei ir atlasīta viena sadaļa.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Atzīmēts — slānim nebūs dimensijas vērtību.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Neatzīmēts — slānim būs dimensijas vērtība. Tā ir noklusējuma vērtība.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "Interpolētā rastra šūnu izmērs. Noklusējuma vērtība ir ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "Neregulāru datu interpolācijai izmantojama atkārtotas iztveršanas metode.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>Tuvākais kaimiņš</strong> — aprēķina izvades pikseļa vērtību, izmantojot tuvāko ievades pikseli. Ja avota pikseļi neeksistē, izvadei nevar izveidot nevienu jaunu pikseli. Tā ir noklusējuma vērtība.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>Lineāra retināšana</strong> — izmanto trīsstūrveida neregulāru tīklu no katras pikseļa centra punkta neregulārā rastrā, lai interpolētu virsmu, kas pēc tam tiek pārvērsta par regulāru rastru.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Dabiskais kaimiņš</strong> — sameklē to ievades paraugu apakškopu, kura ir vistuvāk vaicājuma punktam, un piemēro tiem svaru atkarībā no vērtības interpolācijai nepieciešamajām proporcionālajām zonām.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Apgrieztā attāluma svērtā vērtība</strong> — nosaka pikseļu vērtības, izmantojot paraugu punktu vai pikseļu lineāro svērto kombināciju. Svars ir attāluma apgrieztā vērtība no zināmajiem punktiem vai pikseļiem.",
	"@@Multidimensional-Raster_raster_tag0@@": "Ievades daudzdimensiju rastrs.",
	"@@Multidimensional-Raster_variables_tag0@@": "Mainīgais vai mainīgie, kas jāiekļauj izvades daudzdimensiju rastra slānī.",
	"@@Random_distribution_tag0@@": "Norādiet izmantojamo nejaušu vērtību sadalījuma metodi.",
	"@@Random_distribution_tag1@@": "<strong>Viendabīga</strong> (minimums, maksimums) — viendabīgs sadalījums ar norādītu diapazonu. Noklusējuma vērtības: 0 minimumam un 1 maksimumam. Tā ir noklusējuma vērtība.",
	"@@Random_distribution_tag2@@": "<strong>Vesels skaitlis</strong> (minimums, maksimums) — vesela skaitļa sadalījums ar definētu diapazonu. Noklusējuma vērtības: 1 minimumam un 10 maksimumam.",
	"@@Random_distribution_tag3@@": "<strong>Normāls</strong> (vidējā vērtība, standarta novirze) — normālais sadalījums ar definētu vidējo vērtību un standarta novirzi. Noklusējuma vērtības: 0 vidējai vērtībai un 1 standarta novirzei.",
	"@@Random_distribution_tag4@@": "<strong>Eksponenciāls</strong> (vidējā vērtība) — eksponenciāls sadalījums ar definētu vidējo vērtību. Noklusējuma vērtība ir 1.",
	"@@Random_distribution_tag5@@": "<strong>Puasons</strong> (vidējā vērtība) — Puasona sadalījums ar definētu vidējo vērtību. Noklusējuma vērtība ir 1.",
	"@@Random_distribution_tag6@@": "<strong>Gamma</strong> (alfa, beta) — gamma sadalījums ar norādītu alfa un beta vērtību. Noklusējuma vērtības: 1 alfai un 1 betai.",
	"@@Random_distribution_tag7@@": "<strong>Binomāls</strong> (N, varbūtība) — binomāls sadalījums ar definētu N un varbūtību. Noklusējuma vērtības: 10 N un 0,5 varbūtībai.",
	"@@Random_distribution_tag8@@": "<strong>Ģeometrisks</strong> (varbūtība) — ģeometrisks sadalījums ar definētu varbūtību. Noklusējuma vērtība ir 0,5.",
	"@@Random_distribution_tag9@@": "<strong>Negatīvs binomāls</strong> (r, varbūtība) — Paskāla sadalījums ar definētu r un varbūtības vērtību. Noklusējuma vērtības: 10,0 r un 0,5 varbūtībai.",
	"@@Random_randomnumbergenerator_tag0@@": "Norādiet nejauša ģeneratora algoritmu, kas izmanto sākotnējo vērtību un sadalījumu, lai izveidotu nejaušu skaitļu secību. Pieejamās opcijas ir šādas:",
	"@@Random_randomnumbergenerator_tag1@@": "Randa C standarts",
	"@@Random_randomnumbergenerator_tag2@@": "ACM apkopotais algoritms 599",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenna vērtību ģenerators",
	"@@Random_randomnumbergenerator_tag4@@": "Noklusējuma vērtība ir Mersenna vērtību ģenerators.",
	"@@Random_rasterinfo_tag0@@": "Izmantojiet pogu <strong>Ielādēt veidnes rastru</strong>, lai ielādētu veidni no direktorija vai portāla.",
	"@@Random_seed_tag0@@": "Sākotnējā vērtība ir vesels skaitlis un to izmanto, lai aktivizētu nejaušu skaitļu ģeneratoru. Noklusējuma vērtība ir 1.",
	"@@Shrink_numberofcells_tag0@@": "Šūnu skaits, par kuru sašaurināt katru norādīto zonu.",
	"@@Shrink_numberofcells_tag1@@": "Vērtībai jābūt veselam skaitlim, un tas var būt 1 vai lielāks.",
	"@@Shrink_raster_tag0@@": "Ievades rastrs, kuram jāsašaurina identificētās zonas.",
	"@@Shrink_raster_tag1@@": "Tam ir jābūt veselam skaitlim.",
	"@@Shrink_zonevalues_tag0@@": "Sašaurināmo zonu saraksts.",
	"@@Shrink_zonevalues_tag1@@": "Zonas vērtībām jābūt veseliem skaitļiem, un tie var būt jebkādā secībā.",
	"@@Shrink_zonevalues_tag2@@": "Lai norādītu vairākas zonas, zonu vērtību atdalīšanai izmantojiet atstarpi.",
	"@@Distance-Accumulation_costraster_tag0@@": "Ievades rastrs, kas norāda izmaksas vai pretestību, lai planimetriski pārvietotos pa katru šūnu. Vērtība katras šūnas novietojumā raksturo attālumu izmaksām uz vienu vienību, pārvietojoties tai cauri. Katra šūnas novietojuma vērtība tiek reizināta ar šūnas izšķirtspēju, kā arī kompensē diagonālo pārvietošanos, lai iegūtu kopējās šūnas šķērsošanas izmaksas.",
	"@@Distance-Accumulation_costraster_tag1@@": "<strong>Izmaksu rastra</strong> vērtības var būt vesels skaitlis vai peldošais punkts, taču nevar būt negatīvas vai ar nulles vērtību.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Nosaka, vai aprēķināt attālumu, izmantojot planāro (plakana zeme) vai ģeodēzisko (elipsoīda) metodi.",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Planārā--Planārajiem mērījumiem tiek izmantota divdimensionālā Dekarta matemātika, lai aprēķinātu garumu un laukumu. Šī opcija ir pieejama tikai tad, kad tiek mērīta projicētā koordinātu sistēma un mērījumu pamatā tiek izmantota šādas sistēmas divdimensionālā plakne.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Ģeodēziskā--Īsākā līnija starp diviem punktiem uz zemes virsmas kā elipsoīda. Tādēļ neatkarīgi no ievades vai izvades projekcijas rezultāti nemainās.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Piezīme:</strong>Viens no ģeodēziskās līnijas izmantošanas veidiem ir, kad vēlaties noteikt īsāko attālumu starp divām pilsētām pa lidmašīnas lidojuma ceļu. Tas ir pazīstams arī kā ortodromas līnija, ja ir bāzēts uz sfēru, nevis elipsoīdu.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Nosaka, vai tiks izveidots tikai attāluma akumulācijas rastrs vai vairāku joslu rastrs, ko veido gan attāluma akumulācijas rastrs, gan atpakaļvirziena rastrs.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Neatzīmēts — rezultāts ir attāluma akumulācijas rastrs. Tas ir vienas joslas rezultāts. Tā ir noklusējuma vērtība.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Atzīmēts — tiek izveidots vairāku joslu rezultāts. Pirmā josla ir attāluma akumulācijas rastrs, un otrā josla ir atpakaļvirziena rastrs.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "Atpakaļvirziena rastrs aprēķina katrai šūnai virzienu grādu vērtībās uz blakus esošo šūnu pa īsāko ceļu, kas ved atpakaļ uz tuvāko avotu, izvairoties no barjerām.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Nosaka saistību starp horizontālo izmaksu koeficientu un horizontālo relatīvo pārvietošanās leņķi (Horizontal relative moving angle — HRMA).</p><p>Ir vairāki koeficienti ar modifikatoriem, kuri identificē noteiktā vertikālā koeficienta grafiku. Turklāt var izmantot arī tabulu, lai izveidotu pielāgotu grafiku. Grafiki tiek lietoti, lai identificētu vertikālo koeficientu, kas tiek izmantots, lai aprēķinātu kopējās izmaksas par pārvietošanos uz blakus esošo šūnu.</p><p>Tālāk minētajos paskaidrojumos tiek izmantoti divi akronīmi: HF un HRMA. Ar HF tiek apzīmēts horizontālais koeficients, kas nosaka horizontālos apgrūtinājumus, ar kuriem var sastapties, pārvietojoties no vienas šūnas uz otru. Ar HRMA tiek apzīmēts horizontālais relatīvās pārvietošanās leņķis, kas nosaka leņķi starp horizontālo virzienu no šūnas un pārvietošanās virzienu.</p><p><strong>Horizontālā koeficienta</strong>veidi ietver šādus:</p><ul><li><strong>Binārs</strong> — norāda, ka HF tiek iestatīta ar nulles koeficientu saistīta vērtība, ja HRMA ir mazāks nekā griezuma leņķis; pretējā gadījumā tā ir bezgalība.</li><li><strong>Uz priekšu</strong> — nosaka, ka ir atļauta tikai kustība uz priekšu. HRMA jābūt lielākam par 0 vai vienādam ar to un mazākam par 90 grādiem (0 &lt;= HRMA &lt; 90). Ja HRMA ir lielāks par 0 un mazāks nekā 45 grādi, šūnas HF tiek iestatīta ar nulles koeficientu saistīta vērtība. Ja HRMA ir lielāks par 45 grādiem vai vienāds ar tiem, tiek lietota sānu vērtības modifikatora vērtība. Jebkurai HRMA vērtībai, kas ir vienāda vai lielāka par 90 grādiem, HF tiek iestatīta bezgalība.</li><li><strong>Lineārais</strong> — norāda, ka HF ir HRMA lineāra funkcija.</li><li><strong>Apgrieztais lineārais</strong> — norāda, ka HF ir HRMA apgriezta lineāra funkcija.</li><li><strong>Tabula</strong> — norāda, ka horizontālā koeficienta grafika noteikšanai, ko lieto, lai noteiktu HF, tiek izmantots tabulas fails.</li></ul><p>Horizontālo koeficientu modifikatori ietver:</p><ul><li><strong>Nulles koeficients</strong> — izveido horizontālo koeficientu, kas tiek lietots, kad HRMA ir nulle. Šis koeficients nosaka y ass krustpunktu jebkurai no horizontālā koeficienta funkcijām.</li><li><strong>Griezuma leņķis</strong> – norāda HRMA leņķi, virs kura HF tiek iestatīta bezgalība.</li><li><strong>Slīpums</strong> – nosaka taisnas līnijas slīpumu, kas tiek lietots kopā ar horizontālā koeficienta atslēgvārdiem<strong>Lineārais</strong>un<strong>Apgrieztais lineārais</strong>. Slīpums tiek norādīts kā daļskaitlis, kas norāda paaugstinājumu virs virsmas (piemēram, 45 grādu slīpums ir 1/45, kad tiek ievadīts kā 0,02222).</li><li><strong>Sānu vērtība</strong> – izveido HF, ja HRMA ir 45 grādi vai lielāks un mazāks nekā 90 grādi, kad ir norādīts horizontālā koeficienta atslēgvārds<strong>Uz priekšu</strong>.</li><li><strong>Tabulas nosaukums</strong> – norāda tās tabulas nosaukumu, kura nosaka HF.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "Rastrs, kas nosaka horizontālo virzienu katrā šūnā.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "Rastra vērtībām jābūt veseliem skaitļiem no 0 līdz 360, kur 0 grādi ir ziemeļi vai ekrāna augšdaļa un vērtības palielinās pulksteņrādītāja kustības virzienā. Plakanām teritorijām jāpiešķir vērtība -1. Katra novietojuma vērtības tiek izmantotas kopā ar parametru <strong>Horizontālais koeficients</strong>, lai noteiktu horizontālās izmaksas, kas rodas, pārvietojoties no šūnas uz tai blakus esošajām šūnām.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "Sākotnējās akumulatīvās izmaksas, lai sāktu izmaksu aprēķinu. Šis parametrs ļauj norādīt ar avotu saistītās fiksētās izmaksas. Tā vietā, lai sāktu ar izmaksām 0, aprēķinu algoritms sāks aprēķinus ar norādīto vērtību.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "Vērtībai ir jābūt vienādai ar nulli vai lielākai. Noklusējuma vērtība ir 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Norāda avota maksimālās akumulatīvās izmaksas ceļotājam.Izmaksu aprēķini tiek turpināti katram avotam, līdz ir sasniegta norādītā kapacitāte.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "Reizinātājs, kas tiek piemērots izmaksu vērtībām.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Šis parametrs avotā ļauj kontrolēt pārvietojuma veidu vai magnitūdu. Jo lielāks ir reizinātājs, jo lielākas ir izmaksas par pārvietošanas cauri katrai šūnai.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "Vērtībām ir jābūt lielākām par nulli. Noklusējuma vērtība ir 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "Rastrs, kas nosaka barjeras.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "Kur nav barjeru, datu kopai jāsatur vērtību NoData. Barjeras tiek atspoguļotas ar derīgām vērtībām, tostarp arī nulli.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "Barjeras var tikt definētas, izmantojot veselu skaitli vai peldošā punkta rastru.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "Ievades avota novietojumi.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Šī ir rastra datu kopa, kas nosaka šūnas vai novietojumus, no kuriem tiek aprēķināts vismazāk akumulēto izmaksu attālums katram izvades šūnas novietojumam.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Tas var būt vesels skaitlis vai skaitlis ar peldošo punktu.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "Rastrs, kas nosaka augstuma vērtības katrā šūnas novietojumā.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "Vērtības tiek lietotas, lai aprēķinātu faktisko virsmas attālumu, kas tiek pārvarēts, pārvietojoties starp šūnām.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Norāda ceļotāja virzienu, kad tiek piemērots vertikālais koeficients, horizontālais koeficients un avota pretestības koeficients.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>No avota</strong> — vertikālais koeficients, horizontālais koeficients un avota pretestības koeficients tiek piemērots, sākot ar ievades avotu un virzoties uz šūnām, kas nav avota šūnas. Tā ir noklusējuma vērtība.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>Uz avotu</strong> — vertikālais koeficients, horizontālais koeficients un avota pretestības koeficients tiek piemērots, sākot ar katru šūnu, kas nav avota šūna, un virzoties atpakaļ uz ievades avotu.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Vai nu norādiet opcijas <strong>No avota</strong> vai <strong>Uz avotu</strong> atslēgvārdu, kas tiks piemērots visiem avotiem, vai norādiet lauku funkcijā <strong>Avota rastrs</strong>, kas satur atslēgvārdus ceļojuma virziena parādīšanai katrā avotā. Laukā jābūt virknei ${FROM_SOURCE} vai ${TO_SOURCE}.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Nosaka saistību starp vertikālo izmaksu koeficientu un vertikālo relatīvo pārvietošanās leņķi (Vetrtical relative moving angle — VRMA).</p><p>Ir vairāki koeficienti ar modifikatoriem, kuri identificē noteiktā vertikālā koeficienta grafiku. Turklāt var izmantot arī tabulu, lai izveidotu pielāgotu grafiku. Grafiki tiek lietoti, lai identificētu vertikālo koeficientu, kas tiek izmantots, lai aprēķinātu kopējās izmaksas par pārvietošanos uz blakus esošo šūnu.</p><p>Tālāk minētajos paskaidrojumos tiek izmantoti divi akronīmi: VF un VRMA. Ar VF tiek apzīmēts vertikālais koeficients, kas nosaka vertikālos apgrūtinājumus, ar kuriem var sastapties, pārvietojoties no vienas šūnas uz otru. Ar VRMA tiek apzīmēts vertikālais relatīvās pārvietošanās leņķis, kas nosaka slīpuma leņķi starp šūnu NO (apstrādājamā) un šūnu UZ.</p><p><strong>Vertikālā koeficienta</strong>veidi ietver šādus:</p><ul><li><strong>Binārais</strong> — norāda, ka VF tiek iestatīta ar nulles koeficientu saistīta vērtība, ja VRMA ir lielāks par zema griezuma leņķi un mazāks nekā augsta griezuma leņķis; pretējā gadījumā tā ir bezgalība.</li><li><strong>Lineārais</strong> — norāda, ka VF ir VRMA lineāra funkcija.</li><li><strong>Simetriskais lineārais</strong> – norāda, ka VF ir VRMA lineāra funkcija attiecīgi VRMA negatīvajā vai pozitīvajā pusē un abas lineārās funkcijas ir simetriskas attiecībā pret VF (y) asi.</li><li><strong>Apgrieztais lineārais</strong> — norāda, ka VF ir VRMA apgriezta lineāra funkcija.</li><li><strong>Simetriskais apgrieztais lineārais</strong> – norāda, ka VF ir VRMA apgriezta lineāra funkcija attiecīgi VRMA negatīvajā vai pozitīvajā pusē un abas lineārās funkcijas ir simetriskas attiecībā pret VF (y) asi.</li><li><strong>Cos</strong> – norāda, ka VF ir uz kosinusu pamatota VRMA funkcija.</li><li><strong>Sec</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija.</li><li><strong>Cos-Sec</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija, kad VRMA ir negatīvs, un VRMA uz kosinusu pamatota funkcija, kad VRMA nav negatīvs.</li><li><strong>Sec-Cos</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija, kad VRMA ir negatīvs, un VRMA uz kosinusu pamatota funkcija, kad VRMA nav negatīvs.</li><li><strong>Tabula</strong> – norāda, ka vertikālā koeficienta grafika noteikšanai, ko lieto, lai noteiktu VF, tiek izmantots tabulas fails.</li></ul><p>Vertikālo atslēgvārdu modifikatori ietver:</p><ul><li><strong>Nulles koeficients</strong> – izveido vertikālo koeficientu, kas tiek lietots, kad VRMA ir nulle. Šis koeficients nosaka y ass krustpunktu norādītajai funkcijai. Būtība nulles koeficients nav piemērojams jebkurai no trigonometriskajām vertikālajām funkcijām (KOSINUSS, SEKANTE, KOSINUSS-SEKANTE vai SEKANTE-KOSINUSS). Y ass krustpunkts tiek definēts, izmantojot šīs funkcijas.</li><li><strong>Zems griezuma leņķis</strong> – norāda VRMA leņķi, zem kura VF tiek iestatīta bezgalība.</li><li><strong>Augsts griezuma leņķis</strong> – norāda VRMA leņķi, virs kura VF tiek iestatīta bezgalība.</li><li><strong>Slīpums</strong> – izveido taisnas līnijas slīpumu, kas tiek lietots kopā ar vertikālā koeficienta atslēgvārdiem <strong>Lineārais</strong>un<strong>Apgrieztais lineārais</strong>. Slīpums tiek norādīts kā daļskaitlis, kas norāda paaugstinājumu virs virsmas (piemēram, 45 grādu slīpums ir 1/45, kad tiek ievadīts kā 0,02222).</li><li><strong>Tabulas nosaukums</strong> – norāda tās tabulas nosaukumu, kura nosaka VF.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Nosaka saistību starp vertikālo izmaksu koeficientu un vertikālo relatīvo pārvietošanās leņķi (Vertical relative moving angle — VRMA).",
	"@@Distance-Accumulation_verticalraster_tag1@@": "Šīs vērtības tiek lietotas, lai aprēķinātu slīpumu, kas tiek izmantots, lai noteiktu vertikālo koeficientu, kas tiek piemērots, pārvietojoties no vienas šūnas uz citu.",
	"@@Distance-Allocation_costraster_tag0@@": "Ievades rastrs, kas norāda izmaksas vai pretestību, lai planimetriski pārvietotos pa katru šūnu. Vērtība katras šūnas novietojumā raksturo attālumu izmaksām uz vienu vienību, pārvietojoties cauri tai. Katra šūnas novietojuma vērtība tiek reizināta ar šūnas izšķirtspēju, kā arī kompensē diagonālo pārvietošanos, lai iegūtu kopējās šūnas šķērsošanas izmaksas.",
	"@@Distance-Allocation_costraster_tag1@@": "<strong>Izmaksu rastra</strong> vērtības var būt vesels skaitlis vai peldošais punkts, taču nevar būt negatīvas vai ar nulles vērtību.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Nosaka, vai aprēķināt attālumu, izmantojot planāro (plakana zeme) vai ģeodēzisko (elipsoīda) metodi.",
	"@@Distance-Allocation_distancemethod_tag1@@": "Planārā--Planārajiem mērījumiem tiek izmantota divdimensionālā Dekarta matemātika, lai aprēķinātu garumu un laukumu. Šī opcija ir pieejama tikai tad, kad tiek mērīta projicētā koordinātu sistēma un mērījumu pamatā tiek izmantota šādas sistēmas divdimensionālā plakne.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Ģeodēziskā--Īsākā līnija starp diviem punktiem uz zemes virsmas elipsoīdā. Tādēļ neatkarīgi no ievades vai izvades projekcijas rezultāti nemainās.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Piezīme.</strong>Viens no ģeodēziskās līnijas izmantošanas veidiem ir, kad vēlaties noteikt īsāko attālumu starp divām pilsētām pa lidmašīnas lidojuma ceļu. Tas ir pazīstams arī kā ortodromas līnija, ja ir bāzēts uz sfēru, nevis elipsoīdu.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Nosaka saistību starp horizontālo izmaksu koeficientu un horizontālo relatīvo pārvietošanās leņķi (Horizontal relative moving angle — HRMA).</p><p>Ir vairāki koeficienti ar modifikatoriem, kuri identificē noteiktā vertikālā koeficienta grafiku. Turklāt var izmantot arī tabulu, lai izveidotu pielāgotu grafiku. Grafiki tiek lietoti, lai identificētu vertikālo koeficientu, kas tiek izmantots, lai aprēķinātu kopējās izmaksas par pārvietošanos uz blakus esošo šūnu.</p><p>Tālāk minētajos paskaidrojumos tiek izmantoti divi akronīmi: HF un HRMA. Ar HF tiek apzīmēts horizontālais koeficients, kas nosaka horizontālos apgrūtinājumus, ar kuriem var sastapties, pārvietojoties no vienas šūnas uz otru. Ar HRMA tiek apzīmēts horizontālais relatīvās pārvietošanās leņķis, kas nosaka leņķi starp horizontālo virzienu no šūnas un pārvietošanās virzienu.</p><p><strong>Horizontālā koeficienta</strong>veidi ietver šādus:</p><ul><li><strong>Binārs</strong> — norāda, ka HF tiek iestatīta ar nulles koeficientu saistīta vērtība, ja HRMA ir mazāks nekā griezuma leņķis; pretējā gadījumā tā ir bezgalība.</li><li><strong>Uz priekšu</strong> — nosaka, ka ir atļauta tikai kustība uz priekšu. HRMA jābūt lielākam par 0 vai vienādam ar to un mazākam par 90 grādiem (0 &lt;= HRMA &lt; 90). Ja HRMA ir lielāks par 0 un mazāks nekā 45 grādi, šūnas HF tiek iestatīta ar nulles koeficientu saistīta vērtība. Ja HRMA ir lielāks par 45 grādiem vai vienāds ar tiem, tiek lietota sānu vērtības modifikatora vērtība. Jebkurai HRMA vērtībai, kas ir vienāda vai lielāka par 90 grādiem, HF tiek iestatīta bezgalība.</li><li><strong>Lineārais</strong> — norāda, ka HF ir HRMA lineāra funkcija.</li><li><strong>Apgrieztais lineārais</strong> — norāda, ka HF ir HRMA apgriezta lineāra funkcija.</li><li><strong>Tabula</strong> — norāda, ka horizontālā koeficienta grafika noteikšanai, ko lieto, lai noteiktu HF, tiek izmantots tabulas fails.</li></ul><p>Horizontālo koeficientu modifikatori ietver:</p><ul><li><strong>Nulles koeficients</strong> — izveido horizontālo koeficientu, kas tiek lietots, kad HRMA ir nulle. Šis koeficients nosaka y ass krustpunktu jebkurai no horizontālā koeficienta funkcijām.</li><li><strong>Griezuma leņķis</strong> – norāda HRMA leņķi, virs kura HF tiek iestatīta bezgalība.</li><li><strong>Slīpums</strong> – nosaka taisnas līnijas slīpumu, kas tiek lietots kopā ar horizontālā koeficienta atslēgvārdiem<strong>Lineārais</strong>un<strong>Apgrieztais lineārais</strong>. Slīpums tiek norādīts kā daļskaitlis, kas norāda paaugstinājumu virs virsmas (piemēram, 45 grādu slīpums ir 1/45, kad tiek ievadīts kā 0,02222).</li><li><strong>Sānu vērtība</strong> – izveido HF, ja HRMA ir 45 grādi vai lielāks un mazāks nekā 90 grādi, kad ir norādīts horizontālā koeficienta atslēgvārds<strong>Uz priekšu</strong>.</li><li><strong>Tabulas nosaukums</strong> – norāda tās tabulas nosaukumu, kura nosaka HF.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "Rastrs, kas nosaka horizontālo virzienu katrā šūnā.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "Rastra vērtībām jābūt veseliem skaitļiem no 0 līdz 360, kur 0 grādi ir ziemeļi vai ekrāna augšdaļa un vērtības palielinās pulksteņrādītāja kustības virzienā. Plakanām teritorijām jāpiešķir vērtība -1. Katra novietojuma vērtības tiek izmantotas kopā ar parametru <strong>Horizontālais faktors</strong>, lai noteiktu horizontālās izmaksas, kas rodas, pārvietojoties no šūnas uz tai blakus esošajām šūnām.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "Sākotnējās akumulējošās izmaksas, lai sāktu izmaksu aprēķinu. Šis parametrs ļauj norādīt ar avotu saistītās fiksētās izmaksas. Tā vietā, lai sāktu ar izmaksām 0, aprēķinu algoritms sāks aprēķinus ar norādīto vērtību.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "Vērtībai ir jābūt vienādai ar nulli vai lielākai. Noklusējuma vērtība ir 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Norāda ceļotāja maksimālās akumulējošās izmaksas avotam. Izmaksu aprēķini tiek turpināti katram avotam, līdz ir sasniegta norādītā kapacitāte.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "Vērtībai ir jābūt lielākai par nulli. Noklusējuma kapacitāte ir līdz izvades rastra malai.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "Reizinātājs, kas tiek piemērots izmaksu vērtībām.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Šis parametrs avotā ļauj kontrolēt pārvietojuma veidu vai magnitūdu. Jo lielāks ir reizinātājs, jo lielākas ir izmaksas par pārvietošanas cauri katrai šūnai.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "Vērtībām ir jābūt lielākām par nulli. Noklusējuma vērtība ir 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "Skaitliska (dubulta) vērtība vai lauks no <strong>Avota rastra</strong> var tikt izmantots šim parametram.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "Rastrs, kas nosaka barjeras.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "Kur nav barjeru, datu kopai jāsatur vērtību NoData. Barjeras tiek atspoguļotas ar derīgām vērtībām, tostarp arī nulli.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "Barjeras var tikt definētas, izmantojot veselu skaitli vai peldošā punkta rastru.",
	"@@Distance-Allocation_sourcefield_tag0@@": "Lauks, kas tiek lietots, lai piešķirtu vērtības avota novietojumiem. Tam ir jābūt veselam skaitlim.",
	"@@Distance-Allocation_sourceraster_tag0@@": "Ievades avota novietojumi.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Šī ir rastra datu kopa, kas nosaka šūnas vai novietojumus, no kuriem tiek aprēķināts vismazāk akumulēto izmaksu attālums katram izvades šūnas novietojumam.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Norāda, vai tiek izveidots tikai piešķires rastrs vai tiek izveidots vairāku joslu rezultāts.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Neatzīmēts — rezultāts ir attāluma piešķires rastrs. Tas ir vienas joslas rezultāts. Tā ir noklusējuma vērtība.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Atzīmēts — tiek izveidots vairāku joslu rastrs. Pirmā josla ir attāluma piešķires rastrs, otrā josla ietver rindas rādītāju, bet trešā josla ietver kolonnas rādītāju. Šie rādītāji norāda tās avota šūnas novietojumu, kura atrodas vismazākajā uzkrāto izmaksu attālumā.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "Rastrs, kas nosaka augstuma vērtības katrā šūnas novietojumā.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "Vērtības tiek lietotas, lai aprēķinātu faktisko virsmas attālumu, kas tiek pārvarēts, pārvietojoties starp šūnām.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Norāda ceļotāja virzienu, kad tiek piemērots vertikālais koeficients, horizontālais koeficients un avota pretestības koeficients.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>No avota</strong> — vertikālais koeficients, horizontālais koeficients un avota pretestības koeficients tiek piemērots, sākot ar ievades avotu un virzoties uz šūnām, kas nav avota šūnas. Tā ir noklusējuma vērtība.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>Uz avotu</strong> — vertikālais koeficients, horizontālais koeficients un avota pretestības koeficients tiek piemērots, sākot ar katru šūnu, kas nav avota šūna, un virzoties atpakaļ uz ievades avotu.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Vai nu norādiet opcijas <strong>No avota</strong> vai <strong>Uz avotu</strong> atslēgvārdu, kas tiks piemērots visiem avotiem, vai norādiet lauku funkcijā <strong>Avota rastrs</strong>, kas satur atslēgvārdus ceļojuma virziena parādīšanai katrā avotā. Laukā jābūt virknei ${FROM_SOURCE} vai ${TO_SOURCE}.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Nosaka saistību starp vertikālo izmaksu koeficientu un vertikālo relatīvo pārvietošanās leņķi (Vetrtical relative moving angle — VRMA).</p><p>Ir vairāki koeficienti ar modifikatoriem, kuri identificē noteiktā vertikālā koeficienta grafiku. Turklāt var izmantot arī tabulu, lai izveidotu pielāgotu grafiku. Grafiki tiek lietoti, lai identificētu vertikālo koeficientu, kas tiek izmantots, lai aprēķinātu kopējās izmaksas par pārvietošanos uz blakus esošo šūnu.</p><p>Tālāk minētajos paskaidrojumos tiek izmantoti divi akronīmi: VF un VRMA. Ar VF tiek apzīmēts vertikālais koeficients, kas nosaka vertikālos apgrūtinājumus, ar kuriem var sastapties, pārvietojoties no vienas šūnas uz otru. Ar VRMA tiek apzīmēts vertikālais relatīvās pārvietošanās leņķis, kas nosaka slīpuma leņķi starp šūnu NO (apstrādājamā) un šūnu UZ.</p><p><strong>Vertikālā koeficienta</strong>veidi ietver šādus:</p><ul><li><strong>Binārais</strong> — norāda, ka VF tiek iestatīta ar nulles koeficientu saistīta vērtība, ja VRMA ir lielāks par zema griezuma leņķi un mazāks nekā augsta griezuma leņķis; pretējā gadījumā tā ir bezgalība.</li><li><strong>Lineārais</strong> — norāda, ka VF ir VRMA lineāra funkcija.</li><li><strong>Simetriskais lineārais</strong> – norāda, ka VF ir VRMA lineāra funkcija attiecīgi VRMA negatīvajā vai pozitīvajā pusē un abas lineārās funkcijas ir simetriskas attiecībā pret VF (y) asi.</li><li><strong>Apgrieztais lineārais</strong> — norāda, ka VF ir VRMA apgriezta lineāra funkcija.</li><li><strong>Simetriskais apgrieztais lineārais</strong> – norāda, ka VF ir VRMA apgriezta lineāra funkcija attiecīgi VRMA negatīvajā vai pozitīvajā pusē un abas lineārās funkcijas ir simetriskas attiecībā pret VF (y) asi.</li><li><strong>Cos</strong> – norāda, ka VF ir uz kosinusu pamatota VRMA funkcija.</li><li><strong>Sec</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija.</li><li><strong>Cos-Sec</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija, kad VRMA ir negatīvs, un VRMA uz kosinusu pamatota funkcija, kad VRMA nav negatīvs.</li><li><strong>Sec-Cos</strong> – norāda, ka VF ir VRMA uz sekanti pamatota funkcija, kad VRMA ir negatīvs, un VRMA uz kosinusu pamatota funkcija, kad VRMA nav negatīvs.</li><li><strong>Tabula</strong> – norāda, ka vertikālā koeficienta grafika noteikšanai, ko lieto, lai noteiktu VF, tiek izmantots tabulas fails.</li></ul><p>Vertikālo atslēgvārdu modifikatori ietver:</p><ul><li><strong>Nulles koeficients</strong> – izveido vertikālo koeficientu, kas tiek lietots, kad VRMA ir nulle. Šis koeficients nosaka y ass krustpunktu norādītajai funkcijai. Būtība nulles koeficients nav piemērojams jebkurai no trigonometriskajām vertikālajām funkcijām (KOSINUSS, SEKANTE, KOSINUSS-SEKANTE vai SEKANTE-KOSINUSS). Y ass krustpunkts tiek definēts, izmantojot šīs funkcijas.</li><li><strong>Zems griezuma leņķis</strong> – norāda VRMA leņķi, zem kura VF tiek iestatīta bezgalība.</li><li><strong>Augsts griezuma leņķis</strong> – norāda VRMA leņķi, virs kura VF tiek iestatīta bezgalība.</li><li><strong>Slīpums</strong> – izveido taisnas līnijas slīpumu, kas tiek lietots kopā ar vertikālā koeficienta atslēgvārdiem <strong>Lineārais</strong>un<strong>Apgrieztais lineārais</strong>. Slīpums tiek norādīts kā daļskaitlis, kas norāda paaugstinājumu virs virsmas (piemēram, 45 grādu slīpums ir 1/45, kad tiek ievadīts kā 0,02222).</li><li><strong>Tabulas nosaukums</strong> – norāda tās tabulas nosaukumu, kura nosaka VF.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Nosaka saistību starp vertikālo izmaksu koeficientu un vertikālo relatīvo pārvietošanās leņķi (Vertical relative moving angle — VRMA).",
	"@@Distance-Allocation_verticalraster_tag1@@": "Šīs vērtības tiek lietotas, lai aprēķinātu slīpumu, kas tiek izmantots, lai noteiktu vertikālo koeficientu, kas tiek piemērots, pārvietojoties no vienas šūnas uz citu.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "Šūnas izmērs, pie kura tiek izveidots izvades rastrs.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Ja šūnas izmērs ir skaidri iestatīts parametrā <strong>Darba vides</strong>, tas ir šūnas noklusējuma izmērs. Ja tas nav iestatīts, izvades šūnas izmērs ir tāds pats kā parametrā <strong>Avota rastrs</strong>.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Nosaka, vai aprēķināt attālumu, izmantojot planāro (plakana zeme) vai ģeodēzisko (elipsoīda) metodi.",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Planārā--Planārajiem mērījumiem tiek izmantota divdimensionālā Dekarta matemātika, lai aprēķinātu garumu un laukumu. Šī opcija ir pieejama tikai tad, kad tiek mērīta projicētā koordinātu sistēma un mērījumu pamatā tiek izmantota šādas sistēmas divdimensionālā plakne.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Ģeodēziskā--Īsākā līnija starp diviem punktiem uz zemes virsmas elipsoīdā. Tādēļ neatkarīgi no ievades vai izvades projekcijas rezultāti nemainās.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Piezīme.</strong>Viens no ģeodēziskās līnijas izmantošanas veidiem ir, kad vēlaties noteikt īsāko attālumu starp divām pilsētām pa lidmašīnas lidojuma ceļu. Tas ir pazīstams arī kā ortodromas līnija, ja ir bāzēts uz sfēru, nevis elipsoīdu.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Nosaka sliekšņa attālumu, kurā tiek aprēķināts tuvākā avota virziens. Ja attālums līdz tuvākajam avotam ir lielāks par to, izvade šai šūnai būs NoData.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "Noklusējuma attālums ir vienāds ar izvades rastra pārklājumu.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "Rastrs, kas nosaka barjeras.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "Kur nav barjeru, datu kopai jāsatur vērtību NoData. Barjeras tiek atspoguļotas ar derīgām vērtībām, tostarp arī nulli.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "Barjeras var tikt definētas, izmantojot veselu skaitli vai peldošā punkta rastru.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "Rastra datu kopa, kas nosaka šūnas vai novietojumus, līdz kuriem tiek aprēķināts Eiklīda virziens katram no izvades šūnas novietojumiem.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "Ievades veids var būt vesels skaitlis vai peldošais punkts.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "Izmaksu izsekošanas rastra slāņa nosaukums, kas tiek lietots, lai noteiktu ceļu, pa kuru var atgriezties avotā, izmantojot zemāko izmaksu ceļu.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "Katrai šūnai izsekošanas rastrā vērtība norāda kaimiņu, kas ir nākamā šūna vismazāko kumulatīvo izmaksu ceļā no šūnas uz vienu avota šūnu vai avota šūnu kopu.",
	"@@Cost-Path_costdistanceraster_tag0@@": "Izmaksu attāluma rastra nosaukums, kas tiek izmantots, lai noteiktu zemāko izmaksu ceļu no galamērķa novietojumiem līdz avotam.",
	"@@Cost-Path_costdistanceraster_tag1@@": "Izmaksu attāluma rastrs parasti tiek veidots, lietojot funkcijas Izmaksu attālums, Izmaksu sadalījums vai Izmaksu izsekošana. Izmaksu attāluma rastra slānī katrai šūnai tiek saglabāts minimālo kumulatīvo izmaksu attālums pa izmaksu virsmu no katras šūnas līdz avota šūnu kopai.",
	"@@Cost-Path_destinationfield_tag0@@": "Lauks, ko izmanto, lai iegūtu galamērķa novietojuma vērtības. Ievades elementa datos jābūt vismaz vienam derīgam laukam.",
	"@@Cost-Path_destinationraster_tag0@@": "Rastra datu kopa, ar ko tiek identificētas tās šūnas, no kurām tiek noteikts zemāko izmaksu ceļš līdz avotam ar vismazākajām izmaksām.",
	"@@Cost-Path_destinationraster_tag1@@": "Ievades rastra slānis sastāv no šūnām ar derīgām vērtībām (nulle ir derīga vērtība), un atlikušajām šūnām jābūt piešķirtai vērtībai NoData.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Liek funkcijai apstrādāt ievades atpakaļsaites rastru kā plūsmas virziena rastru. Plūsmas virziena rastram vērtības var būt veselie skaitļi ar vērtībām no 0 līdz 255.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Neatzīmēts — ja norādītās atpakaļsaites rastra vērtības ir veseli skaitļi diapazonā no 0 līdz 8, datu kopa tiks apstrādāta kā izmaksu atpakaļsaites rastrs. Ja vērtības ir diapazonā no 0 līdz 255, ievade tiks apstrādāta kā plūsmas virziena rastrs. Ja vērtības ir diapazonā no 0 līdz 360 un ar peldošo punktu, ievade tiks apstrādāta kā atpakaļvirziena rastrs.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Atzīmēts — rastrs, kas norādīts kā atpakaļsaites rastrs, tiks apstrādāts kā plūsmas virziena rastrs. Izmantojiet šo opciju, ja plūsmas virziena rastra maksimālā vērtība ir līdz 8.",
	"@@Cost-Path_pathtype_tag0@@": "Atslēgvārds nosaka veidu, kādā tiks interpretētas ievades galamērķa datu vērtības un zonas izmaksu ceļu aprēķinos. Opcijas ir šādas:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Katra šūna</strong> — katrai šūnai ar derīgām ievades galamērķa vērtībām zemāko izmaksu ceļš tiek noteikts un saglabāts izvades rastrā. Izmantojot šo opciju, katra no ievades galamērķa datu šūnām tiek apstrādāta atsevišķi, un katrai tiek noteikts zemāko izmaksu ceļš.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Katra zona</strong> — katrai ievades galamērķa datu zonai zemāko izmaksu ceļš tiek noteikts un saglabāts izvades rastrā. Izmantojot šo opciju, zemāko izmaksu ceļš katrai zonai sākas šūnā ar viszemāko izmaksu attāluma svaru šajā zonā.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Viens labākais</strong> — visām ievades galamērķa datu šūnām minimālo izmaksu ceļš tiek atvasināts no šūnas ar zemāko izmaksu ceļu minimālo skaitu līdz avota šūnām.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visu ievades šūnu izmēri ir vienādi, visas opcijas rādīs vienus un tos pašus rezultātus.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "Pirmais no--Izmantojiet ievades rastru pirmo šūnu izmēru.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Minimālais no--Izmantojiet ievades rastru minimālo šūnu izmēru.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Maksimālais no--Izmantojiet ievades rastru maksimālo šūnu izmēru. Tā ir noklusējuma vērtība.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Vidējais no--Izmantojiet ievades rastru vidējo šūnu izmēru.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Pēdējais no--Izmantojiet ievades rastru pēdējo šūnu izmēru.",
	"@@Cell-Statistics_extenttype_tag0@@": "Izvēlieties, kāds pārklājums jālieto izvades rastrā:",
	"@@Cell-Statistics_extenttype_tag1@@": "Pirmais no--Izmantojiet pirmā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Cell-Statistics_extenttype_tag2@@": "Krustpunkts no--Izmantojiet pārklājošos pikseļu pārklājumu, lai noteiktu apstrādes apjomu. Tā ir noklusējuma vērtība.",
	"@@Cell-Statistics_extenttype_tag3@@": "Apvienojums no--Izmantojiet visu rastru pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Cell-Statistics_extenttype_tag4@@": "Pēdējais no--Izmantojiet pēdējā ievades rastra pārklājumu, lai noteiktu apstrādes apjomu.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Nosaka, kā tiek apstrādātas ievades rastra joslas.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Neatzīmēts — visas vairāku joslu ievades tiks apstrādātas kā atsevišķas joslas. Tā ir noklusējuma vērtība.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Atzīmēts — visas vairāku joslu ievades tiks apstrādātas kā vairākas joslas.",
	"@@Cell-Statistics_rasters_tag0@@": "To rastru saraksts, no kuriem tiek aprēķināta statistika pikseli pa pikselim.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Norāda interpolācijas metodi, kas jāizmanto, ja norādītā procentiles vērtība atrodas starp divām ievades šūnu vērtībām.</p><ul><li><strong>Automātiska noteikšana</strong> – ja ievades rastri ir vesela skaitļa pikseļu veida, tiek izmantota metode <strong>Vistuvākā</strong>. Ja ievades rasts ir peldošā punkta pikseļu veida rastrs, tiek izmantota metode <strong>Lineārs</strong>. Tas ir noklusējuma iestatījums.</li><li><strong>Vistuvākā</strong> -- tiek izmantota vēlamā procentilei tuvākā pieejamā vērtība. Šajā gadījumā izvades pikseļu veids ir tāds pats kā ievades vērtības rastra veids. Metode</li><li><strong>Lineārs</strong> – tiek izmantota abu apkārtējo vērtību vidējā svērtā vērtība no vēlamās procentiles. Šajā gadījumā izvades pikseļu veids ir peldošais punkts.</li></ul><p>Šī opcija ir pieejama tikai tad, ja parametrs<strong>Operācija</strong>ir iestatīts kā<strong>Mediāna</strong>vai<strong>Percentile</strong>.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>Aprēķināmā procentile Noklusējuma vērtība 90. procentilei ir 90.</p><p>Vērtības var būt diapazonā no 0 līdz 100. 0. procentile būtībā ir līdzvērtīga minimālajai statistikai, un 100. procentile ir līdzvērtīga maksimālajai vērtībai. Vērtība 50 būtiski sniegs tādu pašu rezultātu kā vidējais statistiskais.</p><p>Šī opcija ir pieejama tikai tad, ja parametrs <strong>Operācija</strong> ir iestatīts kā <strong>Procentile</strong>.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "Atpakaļvirziena rastrā ir aprēķināti virzieni grādos. Virziens norāda nākamo šūnu optimālajā atpakaļceļā uz mazāko akumulēto izmaksu avotu, izvairoties no šķēršļiem.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "Vērtību diapazons ir no 0 grādiem līdz 360 grādiem. 0 apzīmē avota šūnas. Austrumu virzienu (pa labi) apzīmē 90, un vērtības pieaug pulksteņrādītāju kustības virzienā (180 apzīmē dienvidus, 270 — rietumus, 360 — ziemeļus).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "Lauks, ko izmanto, lai iegūtu galamērķa atrašanās vietas vērtības.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "Rastra datu kopa, ar ko tiek identificētas tās šūnas, no kurām tiek noteikts optimālais ceļš līdz zemāko izmaksu avotam. Šis ievade obligāta.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "Ievades rastra slānis sastāv no šūnām ar derīgām vērtībām (nulle ir derīga vērtība), un atlikušajām šūnām jābūt piešķirtai vērtībai NoData.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "Attāluma akumulācijas rastru izmanto, lai noteiktu optimālu ceļu no galamērķiem līdz avotiem. Attāluma akumulācijas rastrs parasti tiek izveidots, izmantojot funkciju <strong>Attāluma akumulācija</strong>. Katra šūna attāluma akumulācijas rastrā parāda minimālo akumulēto izmaksu attālumu virsmā no katras šūnas līdz avota šūnu kopai.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Norāda atslēgvārdu, kas nosaka veidu, kādā izmaksu ceļu aprēķinos tiks interpretētas ievades galamērķa datu vērtības un zonas.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Katra zona</strong> — katrai ievades galamērķa datu zonai zemāko izmaksu ceļš tiek noteikts un saglabāts izvades rastrā. Izmantojot šo opciju, optimālais ceļš katrai zonai sākas šūnā ar viszemāko izmaksu attāluma svaru šajā zonā.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Viens labākais</strong> — visām ievades galamērķa datu šūnām optimālais ceļš tiek atvasināts no šūnas ar zemāko izmaksu ceļu minimālo skaitu līdz avota šūnām.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Katra šūna</strong> — katrai šūnai ar derīgām ievades galamērķa vērtībām tiek noteikts optimālais ceļš. Izmantojot šo opciju, katra no ievades galamērķa datu šūnām tiek apstrādāta atsevišķi, un katrai šūnai tiek noteikts optimālais ceļš.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "Izmaiņu noteikšanai izmantojamais joslas ID. Ja nav norādīts neviens joslas ID, tiks izmantotas visas ievades rastra datu kopu joslas.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "ID vērtībām jābūt veseliem skaitļiem, kas atdalīti ar atstarpēm.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "Zaļās joslas un SWIR joslas ID, kas jāizmanto, lai maskētu mākoni, mākoņa ēnu un sniegu. Ja nav norādīts neviens joslas ID, maskēšana nenotiks.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "ID vērtībām jābūt veseliem skaitļiem, kas atdalīti ar atstarpēm.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Šis parametrs norāda joslas, kas jāizmanto mākoņu, mākoņu ēnu un sniega maskēšanai. Tā kā mākoņu ēnas un sniegs īsviļņu infrasarkano staru (SWIR) joslā ir ļoti tumšs un mākoņi un sniegs zaļajā joslā ir ļoti spilgts, ieteicams maskēt SWIR un zaļo joslu joslas indeksus.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "Hī kvadrāta izmaiņu iespējamības slieksnis. Ja novērojumā ir aprēķinātas vērtības iespējamība, kas pārsniedz šo slieksni, tas tiks atzīmēts kā neatbilstība, kas ir potenciāls izmaiņu gadījums. Noklusējuma vērtība ir 0,99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "Minimālais secīgu neatbilstību novērojumu skaits, kuram jāizveidojas, pirms gadījums tiek uzskatīts par izmaiņām. Pikselis jāatzīmē kā anomālija norādītajam secīgu laika sadaļu daudzumam, pirms tas tiek uzskatīts par reālām izmaiņām. Noklusējuma vērtība ir 6.",
	"@@CCDC-Analysis_raster_tag0@@": "Ievades daudzdimensiju rastra slānis.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "Biežums, ar kādu atjaunināt laika sērijas modeli ar jauniem novērojumiem. Noklusējums: atjaunināt modeli ik pēc gada.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Šis parametrs nosaka, cik bieži laika sērijas modelis tiks atjaunināts ar jauniem novērojumiem. Modeļa bieža atjaunināšana var būt dārga, un ieguvums minimāls. Piemēram: ja daudzdimensiju rastrā gada laikā ir 365 sadaļas, vai skaidri novērojumi un biežuma atjaunināšana attiecas uz katru novērojumu, apstrāde var būt 365 reizes dārgāka skaitļošanā salīdzinājumā ar atjaunināšanu reizi gadā, bet precizitāte var nebūt augstāka.",
	"@@Trend-To-RGB_modeltype_tag0@@": "Modeļa informācijas veids pārvēršanai par RGB.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Lineārā — lineārās tendences informācija tiks pārvērsta par RGB. Tā ir noklusējuma vērtība.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Harmoniskā — harmoniskās tendences informācija tiks pārvērsta par RGB.",
	"@@Trend-To-RGB_raster_tag0@@": "Ievades tendenču rastrs.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>Labākā modeļa proporcijas vērtība. Modeļu atlases laikā rīks aprēķinās katra modeļa p-vērtību un atlasīs modeli, kuram ir visvairāk virsotņu, saglabājot mazāko (visnozīmīgāko) p-vērtību, pamatojoties uz šo proporcijas vērtību. Vērtība 1 nozīmē, ka modelim ir viszemākā p-vērtība, bet tam var nebūt liels virsotņu skaits. Noklusējuma vērtība ir 1,25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>Maksimālais segmentu skaits, kas jāpielāgo laika sērijā katram pikselim. Noklusējuma vērtība ir 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>Minimālais derīgo novērojumu skaits, kas nepieciešams pielāgošanai. Gadu skaitam ievades daudzdimensiju datu kopā jābūt vienādam ar šo vērtību vai lielākam par to. Noklusējuma vērtība ir 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Norāda, vai rezultātos tiks iekļautas citas joslas.</p><ul><li>Atzīmēts -- rezultātos tiks iekļautas citas joslas. Segmentācijas un virsotņu informācija no sākotnējās segmentācijas joslas, kas norādīta parametrā <strong>Apstrādes josla</strong>, tiks pielāgota arī atlikušajām joslām vairāku joslu attēlos. Modeļa rezultātos vispirms tiks iekļauta segmentācijas josla, tad pārējās.</li><li>Nav atzīmēts -- pārējās joslas netiks iekļautas. Tas ir noklusējuma iestatījums.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Norāda, vai netiks iekļauti segmenti, kuros notiek viena gada atgūšanās.</p><ul><li>Atzīmēts -- netiks iekļauti segmenti, kuros novērojama viena gada atgūšanās. Tas ir noklusējuma iestatījums.</li><li>Nav atzīmēts -- netiks izslēgti segmenti, kuros novērojama viena gada atgūšanās.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>Josla, ko izmanto pikseļu vērtību trajektoriju segmentēšanai laika gaitā. Izvēlieties joslu, kas vislabāk attēlos izmaiņas, kuras vēlaties novērot.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>Atlasāmā modeļa sliekšņa p-vērtība. Pēc tam, kad modeļa pielāgošanas sākotnējā posmā ir noteiktas virsotnes, rīks būs piemērots katram segmentam un aprēķinās p-vērtību, lai noteiktu modeļa nozīmīgumu. Nākamajā iterācijā modelis samazinās segmentu skaitu par vienu un pārrēķinās p-vērtību. Šis process turpināsies, un, ja p-vērtība ir mazāka par šajā parametrā norādīto vērtību, modelis tiks atlasīts, un rīks pārstās meklēt labāku modeli. Ja šāds modelis nav atlasīts, rīks izvēlas modeli, kura p-vērtība ir mazāka nekā<strong>mazākā p-vērtība × — labākā modeļa proporcijas vērtība</strong>. Noklusējuma vērtība ir 0,01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>Ievades Landsat daudzdimensiju rastra slānis.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Norāda, vai atkopšanās ir pieaugoša (pozitīva) tendence.</p><ul><li>Atzīmēts -- atkopšanās ir pieaugoša tendence. Tas ir noklusējuma iestatījums.</li><li>Nav atzīmēts -- atkopšanās parametram ir tendence samazināties.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>Atkopšanās tendences sliekšņa vērtība, gados. Ja segmentam ir atkopšanās ātrums, kas pārsniedz <strong>1/atkopšanās slieksni</strong>, segments tiek atmests un netiek iekļauts laika sērijas modelī. Vērtībai jābūt diapazonā no 0 līdz 1. Noklusējuma vērtība ir 0,25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>Datums, ko izmanto, lai atlasītu slāni katram gadam ievades daudzdimensiju datu kopā. Tiks atlasīts slānis ar datumu, kas ir vistuvāk pieskaņošanas datumam. Šis parametrs ir nepieciešams, ja ievades datu kopā ir nepilna gada dati.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>Slieksnis, kas jāizmanto, lai ierobežotu maksimumu vai anomālijas pikseļu vērtības trajektorijā. Vērtībai jābūt diapazonā no 0 līdz 1, kur 1 nozīmē, ka ierobežošana netiek veikta. Noklusējuma vērtība ir 0,9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>To papildu vērtību skaits, kas pārsniedz<strong>max_num_segments + 1</strong>un ko var izmantot, lai pielāgotu modeli sākotnējās virsotnes noteikšanas posmā. Vēlāk modelēšanas procesā papildu vislielāko vērtību skaits samazināsies līdz<strong>max_num_segments + 1</strong>. Noklusējuma vērtība ir 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>Ievades rastra datu kopas vai daudzdimensiju rastra datu kopas sapludināšanai.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Norāda metodi, kas jāizmanto, lai kombinētajās datu kopās izšķirtu pikseļus, kas pārklājas.</p><ul><li><strong>Pirmā</strong>-- pikseļu vērtība teritorijās, kas pārklājas, ir vērtība no pirmā rastra ievades rastru sarakstā. Tā ir noklusējuma vērtība.</li><li><strong>Pēdējā</strong>-- pikseļu vērtība teritorijās, kas pārklājas, ir vērtība no pēdējā rastra ievades rastru sarakstā</li><li><strong>Min.</strong>-- pikseļu vērtība teritorijās, kas pārklājas, ir pārklājošos pikseļu minimālā vērtība.</li><li><strong>Maks.</strong>-- pikseļu vērtība teritorijās, kas pārklājas, ir pārklājošos pikseļu maksimālā vērtība.</li><li><strong>Vidējā vērtība</strong>-- pikseļu vērtība teritorijās, kas pārklājas, ir vidējā pārklājošos pikseļu vērtība.</li><li><strong>Summa</strong>-- pikseļu vērtība teritorijās, kas pārklājas, ir pārklājošos pikseļu kopsumma.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Norāda laika vienību, kas jāizmanto kā harmoniskā cikla garums.</p><ul><li><strong>Dienas</strong>-- harmoniskā cikla garuma mērvienība ir dienas.</li><li><strong>Gadi</strong>-- harmoniskā cikla garuma mērvienība ir gadi. Tas ir noklusējuma iestatījums.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>Dimensija (koordinātu ass), pa kuru tiks izgūta tendence mainīgajam vai mainīgajiem, kas atlasīti analīzē.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>Biežuma skaitlis, kas jāizmanto tendenču pielāgošanā. Šis parametrs norāda ciklu biežumu gadā. Noklusējuma vērtība ir 1 vai viens harmonisks cikls gadā.</p><p>Šis parametrs ir iekļauts tikai harmoniskas regresijas tendenču analīzē.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Norāda, vai analīzē tiek ignorētas NoData vērtības.</p><ul><li>Atzīmēts -- analīzē tiks iekļauti visi derīgie pikseļi pie norādītā izmēra un ignorēti visi NoData pikseļi. Tas ir noklusējuma iestatījums.</li><li>Nav atzīmēts -- analīze uzrādīs NoData, ja konkrētajā dimensijā pikseļiem ir kāda NoData vērtība.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>Modeļa perioda variācijas ilgums. Mērvienība ir dienas neatkarīgi no ievadīto datu laika mērvienības. Piemēram: lapu zaļumam bieži ir viens izteiktas variācijas cikls gadā, tādēļ cikla ilgums ir 365,25 pat, ja ievades dati ir ikmēneša lapu zaļuma daudzums. Stundas temperatūras datiem ir viens izteikts variācijas cikls vienas dienas laikā, tāpēc cikla ilgums ir 1.</p><p>Noklusējuma ilgums ir 365,25 dienas datiem, kas mainās gada ciklā.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Norāda, vai aprēķināt p-vērtības statistiku tendences līnijas slīpuma koeficientam.</p><ul><li>Atzīmēts -- tad p-vērtība tiks aprēķināta un parādīta detalizētajā informācijā, kad funkcija būs pabeigta.</li><li>Nav atzīmēts -- tad p-vērtība netiks aprēķināta. Tas ir noklusējuma iestatījums.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>Polinoma pakāpes skaitlis, kas jāizmanto tendenču pielāgošanā. Šis parametrs norāda polinoma pakāpi. Noklusējuma vērtība ir 2 vai otrās pakāpes polinoms.</p><p>Šis parametrs ir iekļauts tikai polinoma regresijas tendenču analīzē.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Norāda, vai tendenču pielāgošanas līnijai aprēķināt R kvadrātā pielāgošanas statistikas datus.</p><ul><li>Atzīmēts -- R kvadrātā tiek aprēķināts un parādīts detalizētajā informācijā, kad funkcija ir pabeigta.</li><li>Nav atzīmēts -- R kvadrātā netiks aprēķināts Tas ir noklusējuma iestatījums.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>Ievades daudzdimensiju rastrs.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Norāda, vai ģenerēt tendences pielāgošanas līnijas saknes vidējo kvadrāta kļūdu (RMSE).(RMSE).</p><ul><li>Atzīmēts -- kad funkcija ir pabeigta, RMSE tiek aprēķināta un parādīta detalizētajā informācijā. Tas ir noklusējuma iestatījums.</li><li>Nav atzīmēts -- RMSE netiks aprēķināts.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Norāda laika mērvienību, kas jāizmanto kā sezonas perioda ilgums, veicot Sezonas-Kendela testu.</p><ul><li>Dienas -- sezonas perioda ilguma mērvienība ir dienas. Tas ir noklusējuma iestatījums.</li><li>Mēneši -- sezonas perioda ilguma mērvienība ir mēneši.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Norāda tās līnijas veidu, kurai jāpielāgo pikseļu vērtības kādam izmēram.</p><ul><li><strong>Lineāri</strong> -- pielāgo pikseļu vērtības mainīgajam uz lineārās tendences līnijas. Tas ir noklusējuma iestatījums.</li><li><strong>Harmonisks</strong> -- pielāgo pikseļu vērtības mainīgajam uz harmoniskās tendences līnijas.</li><li><strong>Polinoms</strong> -- pielāgo pikseļu vērtības mainīgajam uz otrās pakāpes polinoma tendences līnijas.</li><li><strong>Pēc Manna-Kendala</strong> -- mainīgās pikseļu vērtības tiks izvērtētas, izmantojot Manna-Kendela tendences testu.</li><li><strong>Pēc Sezonas-Kendela</strong> -- mainīgās pikseļu vērtības tiks izvērtētas, izmantojot Sezonas-Kendela tendences testu.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visi ievades šūnu izmēri ir vienādi, visas opcijas uzrādīs vienus un tos pašus rezultātus.</p><ul><li>Pirmais -- izmantojiet pirmo ievades rastru šūnas izmēru.</li><li>Min. -- tiek izmantots mazāko visu ievades rastru šūnas izmērs.</li><li>Maks. -- tiek izmantots lielāko visu ievades rastru šūnas izmērs. Tas ir noklusējuma iestatījums.</li><li>Vidējais -- tiek izmantots vidējais visu ievades rastru šūnas izmērs.</li><li>Pēdējais -- tiek izmantots pēdējais visu ievades rastru šūnas izmērs.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>Aprēķina metode.</p><ul><li><strong>Starpība</strong> -- tiks aprēķināta matemātiskā starpība vai atņemšana starp ievades rastru pikseļu vērtībām. Šis ir noklusējums.</li><li><strong>Relatīvā atšķirība</strong>– tiks aprēķināta pikseļu vērtību atšķirība, ņemot vērā salīdzināmo vērtību lielumus.</li><li><strong>Kategoriskā atšķirība</strong>– tiks aprēķināta divu kategorisku vai tematisku rastu starpība, kur izvadē ir klases pārejas, kas notikušas starp abiem rastriem.</li><li><strong>Spekrtrālais Eiklīda attālums</strong>– tiks aprēķināts Eiklīda attālums starp divu vairākjoslu rastru pikseļu vērtībām.</li><li><strong>Spektrālā leņķa atšķirības</strong>– tiks aprēķināts spektrālais leņķis starp divu vairākjoslu rastru pikseļu vērtībām. Izvade ir radiānos.</li><li><strong>Josla ar lielākajām izmaiņām</strong>– tiks aprēķināta josla, kas veido lielākās izmaiņas katrā pikselī starp diviem vairākjoslu rastriem.</li></ul><p>Ja opcijas<strong>Aprēķināt izmaiņu metodi</strong>iestatījums ir<strong>Kategoriskā atšķirība</strong>un viena no ievadēm nav kategorija, tiks aprēķināta vienkārša atšķirība.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Norādiet metodi, kas jāizmanto, lai piešķirtu simbolus pikseļiem, kas mainījuši klases.</p><ul><li><strong>Vidējais no un uz krāsām</strong> -- pikseļa krāsa būs tā oriģinālās klases un tā gala klases krāsas vidējā vērtība.</li><li><strong>Izmantot no krāsām</strong> -- pikseļu krāsa būs tā oriģinālās klases krāsa.</li><li><strong>Izmantot uz krāsām</strong> -- pikseļu krāsa būs tā beigu klases krāsa.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Izvēlieties, kāds apjoms jāizmanto izvades rastrā:</p><ul><li>Pirmais -- lai noteiktu apstrādes apjomu, izmantojiet pirmā ievades rastra apjomu</li><li>Pārklājums -- lai noteiktu apstrādes apjomu, izmantojiet pikseļus, kas pārklājas. Tas ir noklusējuma iestatījums.</li><li>Apvienojums -- apstrādes apjomu noteikšanai izmantojiet visu rastru apjomu.</li><li>Pēdējais -- lai noteiktu apstrādes apjomu, izmantojiet pēdējās ievades rastra apjomu.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Izvēlieties filtra metodi kategorisku izmaiņu aprēķināšanai.</p><ul><li><strong>Paturēt visu</strong> -- izvadē tiek iekļautas visas klases, un filtrēšana nenotiks. Izvēlieties šo opciju, lai redzētu izmaiņas un noturību vienā datu kopā.</li><li><strong>Paturēt tikai mainītos pikseļus</strong> -- izvadē tiek iekļautas tikai tās klases, kas mainītas no viena klases veida uz citu. Izvēlieties šo opciju, ja jums nepieciešamas tikai izmaiņas.</li><li><strong>Paturēt tikai nemainītos pikseļus</strong> -- izvadē tiek iekļautas tikai tās klases, kuras nav mainītas. Izvēlieties šo opciju, ja jums nepieciešama tikai noturība.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>Klases vērtības no sadaļas<strong>No rastra</strong>, kas jāiekļauj aprēķinā, ja salīdzina divus kategoriju rastrus. Šis ir ar atstarpēm norobežots veselo skaitļu vērtību saraksts, kas atbilst ievades rastra datu kopas laukam <strong>Klases vērtība</strong>.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>Pirmais rastrs, kas jāizmanto aprēķinā. Lai izvērtētu izmaiņas no laika 1 (iepriekš) uz laiku 2 (vēlāk), šeit ievadiet laika 1 rastru.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>Klases vērtības no sadaļas<strong>Uz rastru</strong>, kas jāiekļauj aprēķinā, ja salīdzina divus kategoriju rastrus. Šis ir ar atstarpēm norobežots veselo skaitļu vērtību saraksts, kas atbilst ievades rastra datu kopas laukam <strong>Klases vērtība</strong>.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>Otrais rastrs, kas jāizmanto aprēķinā. Lai izvērtētu izmaiņas no laika 1 (iepriekš) uz laiku 2 (vēlāk), šeit ievadiet laika 2 rastru.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Norādiet metodi, kas jāizmanto, lai piešķirtu simbolus pikseļiem, kas maina klases.</p><ul><li><strong>Vidējais no un uz krāsām</strong> -- pikseļa krāsa būs tā oriģinālās klases un tā gala klases krāsas vidējā vērtība.</li><li><strong>Izmantot no krāsām</strong> -- pikseļu krāsa būs tā oriģinālās klases krāsa.</li><li><strong>Izmantot uz krāsām</strong> -- pikseļu krāsa būs tā beigu klases krāsa.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>Lauks, kurā tiek glabāti klašu nosaukumi ievadē <strong>No rastra</strong>. Rīks automātiski meklē lietojamo lauku<strong>KlasesNosaukums</strong>vai lauku<strong>Klases_Nosaukums</strong>.</p><p>Izmantojiet šo opciju, ja ievadē nav šo standarta lauku nosaukumu.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>Lauks, kurā tiek glabāti klašu nosaukumi ievadē <strong>Uz rastru</strong>. Rīks automātiski meklē lietojamo lauku<strong>KlasesNosaukums</strong>vai lauku<strong>Klases_Nosaukums</strong>.</p><p>Izmantojiet šo opciju, ja ievadē nav šo standarta lauku nosaukumu.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>To pikseļu kolonnu skaits, kas jāizmanto fokālā kaimiņa dimensijā.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>To pikseļu rindu skaits, kas jāizmanto fokālā kaimiņa dimensijā.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Izvadē aizpilda NoData spraugas. Tas ir noderīgi, ja attēlos trūkst līniju.</p>",
	"@@Statistics_raster_tag0@@": "<p>Ievades rastrs, kam jāveic fokālā statistika.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>Pastāv šādas septiņas fokālās statistikas funkcijas:</p><ul><li>Minimums -- aprēķina blakus esošo pikseļu minimālo vērtību.</li><li>Maksimums -- aprēķina blakus esošo pikseļu maksimālo vērtību.</li><li>Vidējais -- aprēķina blakus esošo pikseļu vidējo vērtību. Tas ir noklusējuma iestatījums.</li><li>Standartnovirze -- aprēķina blakus esošo pikseļu standartnovirzes vērtību.</li><li>Mediāna -- aprēķina blakus esošo pikseļu mediānas vērtību.</li><li>Vairākums -- aprēķina blakus esošo pikseļu vairākuma jeb visbiežāk sastopamo vērtību.</li><li>Mazākums -- aprēķina blakus esošo pikseļu mazākuma jeb visretāk sastopamo vērtību.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Norāda analīzē iekļaujamo izmaiņu virzienu.</p><p>Šis parametrs ir pieejams tikai tad, ja ievades izmaiņu analīzes rastrs ir LandTrendr rīku izvade.</p><ul><li><strong>Visi virzieni</strong> -- izvadē ir iekļauti visi izmaiņu virzieni. Tas ir noklusējuma iestatījums.</li><li><strong>Pieaugošs</strong> -- izvadē iekļauj tikai izmaiņas pozitīvajā vai pieaugošajā virzienā.</li><li><strong>Sarūkošs</strong> -- izvadē iekļauj tikai izmaiņas negatīvajā vai samazināšanās virzienā.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Norāda aprēķināmo izmaiņu informāciju.</p><ul><li><strong>Nesenāko izmaiņu laiks</strong> -- katrā pikselī ir pēdējo izmaiņu datums šim pikselim laika sērijā. Tas ir noklusējuma iestatījums.</li><li><strong>Agrāko izmaiņu laiks</strong> -- katrā pikselī ir agrāko izmaiņu datums šim pikselim laika sērijā.</li><li><strong>Lielāko izmaiņu laiks</strong> -- katrā pikselī ir būtiskāko izmaiņu datums šim pikselim laika sērijā.</li><li><strong>Izmaiņu skaits</strong> -- katrā pikselī ir kopējais šī pikseļa izmaiņu skaits laika sērijā.</li><li><strong>Ilgāko izmaiņu laiks</strong> -- katrā pikselī ir izmaiņu datums ilgākās pārejas segmenta beigās laika sērijā.</li><li><strong>Īsāko izmaiņu laiks</strong> -- katrā pikselī ir izmaiņu datums īsākās pārejas segmenta beigās laika sērijā.</li><li><strong>Ātrāko izmaiņu laiks</strong> -- katrā pikselī ir izmaiņu datums tās pārejas beigās, kas notika visātrāk.</li><li><strong>Lēnāko izmaiņu laiks</strong>-- katrā pikselī ir izmaiņu datums tās pārejas beigās, kas notika vislēnāk.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Norāda, vai filtrēt pēc izmaiņu ilguma.</p><p></p><ul><li>Atzīmēts -- filtrējiet rezultātus pēc ilguma, lai izvadē tiktu iekļautas tikai tās izmaiņas, kas ilga konkrētu laika periodu.</li><li>Nav atzīmēts -- nefiltrēt rezultātus pēc ilguma. Tas ir noklusējuma iestatījums.</li></ul><p>Šis parametrs ir pieejams tikai tad, ja ievades izmaiņu analīzes rastrs ir LandTrendr rīku izvade.</p><p>Ja šis parametrs ir atzīmēts, filtrēšanai ir jāiestata parametrs<strong>Minimālais ilgums</strong>un<strong>Maksimālais ilgums</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Norāda, vai filtrēt pēc izmaiņu apjoma.</p><ul><li>Atzīmēts --filtrējiet rezultātus pēc apjoma tā, lai izvadē tiktu iekļautas tikai norādītā apjoma izmaiņas.</li><li>Nav atzīmēts --nefiltrēt rezultātus pēc apjoma. Tas ir noklusējuma iestatījums.</li></ul><p>Šis parametrs ir pieejams tikai tad, ja ievades izmaiņu analīzes rastrs ir LandTrendr rīku izvade.</p><p>Ja šis parametrs ir atzīmēts, filtrēšanai ir jāiestata parametrs<strong>Minimālais apjoms</strong>un<strong>Maksimālais apjoms</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Norāda, vai ierobežot izvadi pēc gadu diapazona.</p><ul><li>Atzīmēts -- filtrējiet rezultātus tā, lai izvadē tiktu iekļautas tikai tās izmaiņas, kas notikušas konkrētā gadu diapazonā.</li><li>Nav atzīmēts -- nefiltrēt rezultātus pēc gada. Tas ir noklusējuma iestatījums.</li></ul><p>Ja šis parametrs ir atzīmēts, filtrēšanai ir jāiestata parametrs<strong>Minimālā vērtība</strong>un<strong>Maksimālā vērtība</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Filtrēt rezultātus pēc sākuma vērtības tā, lai izvadē tiktu iekļautas tikai norādītās sākuma vērtības izmaiņas.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Filtrēt rezultātus pēc beigu vērtības tā, lai izvadē tiktu iekļautas tikai norādītās beigu vērtības izmaiņas.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>Maksimālais aprēķināmo izmaiņu skaits uz vienu pikseli. Ievadītais skaitlis atbilst izvades rastra joslu skaitam. Noklusējums ir 1, kas nozīmē, ka tiek aprēķināts tikai viens izmaiņu datums, un izvades rastrā ir tikai viena josla.</p><p>Šis parametrs nav pieejams, ja parametrs<strong>Mainīt veidu</strong> ir iestatīts uz<strong>Izmaiņu skaits</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>Ievades izmaiņu analīzes rastrs.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Norāda, vai izgūt datumu izmaiņu segmenta sākumā vai beigās.</p><p>Šis parametrs ir pieejams tikai tad, ja ievades izmaiņu analīzes rastrs ir izvade no LandTrendr rīkiem.</p><ul><li><strong>Segmenta sākums</strong> -- izgūst datumu izmaiņu segmenta sākumā. Tas ir noklusējuma iestatījums.</li><li><strong>Segmenta beigas</strong>-- izgūst datumu izmaiņu segmenta beigās.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>Izvades blīvuma vērtību laukuma mērvienības.</p><ul><li>Kvadrāta kartes mērvienības -- izvades telpiskās atsauces lineārās laukuma mērvienības.</li><li>Kvadrātjūdzes -- (ASV) jūdzēm.</li><li>Kvadrātkilometri -- kilometriem..</li><li>Akri -- (ASV) akriem.</li><li>Hektāri -- hektāriem.</li><li>Kvadrātmetri -- metriem.</li><li>Kvadrātjardi -- (ASV) jardiem.</li><li>Kvadrātpēdas -- (ASV) pēdām.</li><li>Kvadrātcollas -- (ASV) collām.</li><li>Kvadrātcentimetri -- centimetriem.</li><li>Kvadrātmilimetri -- milimetriem.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>Izvades rastra datu kopas pikseļu izmēri. Ja ģeoapstrādes vidēs ir iestatīts parametrs<strong>Šūnas izmērs</strong>, tas būs noklusējuma iestatījums.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>Datu kopa, kas nosaka ierobežojumus.</p><p>Ierobežojumi var būt lauztas līnijas elementu slānis vai daudzstūra elementi.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>Ievades punkts vai līnijas elements, kam jāaprēķina blīvums.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Nosaka, vai lietot īsāko ceļu, izmantojot sfēras (ģeodēzisko) vai plakanās zemes (plaknes) metodi.</p><ul><li><strong>Plakne</strong> -- izmanto planāros attālumus starp elementiem. Tas ir noklusējuma iestatījums.</li><li><strong>Ģeodēziski</strong> -- izmanto ģeodēziskus attālumus starp elementiem. Šajā metodē ņem vērā sfēras izliekumu un tā pareizi apstrādā datus pie poliem un starptautiskām datumu maiņas līnijām.</li></ul><p>Ieteicams izmantot<strong>Ģeodēzisko</strong>metodi ar datiem, kas glabājas koordinātu sistēmā, kura nav piemērota attāluma mērījumiem un jebkādai analīzei, kas aptver lielu ģeogrāfisko apgabalu. Piemēram, Web Mercator vai jebkurai ģeogrāfisko koordinātu sistēmai jālieto <strong>Ģeodēzisko</strong> metodi.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Nosaka, ko izvades rastra vērtības attēlo.</p><ul><li><strong>Blīvumi</strong> -- izvades vērtības norāda prognozēto blīvuma vērtību. Tas ir noklusējuma iestatījums.</li><li><strong>Paredzētais skaits</strong> -- izvades vērtības parāda prognozēto parādību daudzumu katrā pikselī. Tā kā pikseļu vērtība ir saistīta ar norādīto parametru<strong>Šūnas izmērs</strong>, iegūto rastru nevar pārģenerēt uz citu pikseļu izmēru, un tas joprojām uzrāda parādību daudzumu.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Lauki, kas norāda katra elementa aizpildījuma vērtības. Vērtība<strong>Populācijas lauks</strong>ir skaits vai daudzums, kas jāizvieto ainavā, lai izveidotu nepārtrauktu virsmu. Vērtības<strong>aizpildījuma laukā</strong>var būt vesels skaitlis vai peldošs punkts.</p><p>Lauka opcijas un noklusējuma darbība ir norādīta zemāk prioritāšu secībā.</p><ul><li>Izmantojiet<strong>Nav</strong>, ja netiks izmantota neviena vienība vai īpaša vērtība un katrs elements tiks saskaitīts vienu reizi.</li><li>Izmantojiet<strong>Forma</strong>, ja ievades elementi satur Z.</li><li>Pretējā gadījumā noklusējuma lauks ir<strong>AIZPILDĪJUMS</strong> vai jebkurš pieņemams aizpildījuma atvasinājums:<ul><li><strong>POPULATIONxxxx</strong>, kur<strong>xxxx</strong>var būt jebkura derīga rakstzīme, piemēram,<strong>POPULATION6</strong>,<strong>POPULATION1974</strong> vai<strong>POPULATIONROADTYPE</strong>.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>Ja neviens no iepriekš minētajiem variantiem netiek lietots, noklusējums ir<strong>Nav</strong>.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>Meklēšanas rādiuss, kurā jāaprēķina blīvums. Mērvienību pamatā ir projekcijas lineārā mērvienība.</p><p>Piemēram: ja mērvienības ir metros -- lai iekļautu visus elementus vienas jūdzes apkaimē -- iestatiet meklēšanas rādiusu 1609,344 (jo 1 jūdze ir 1609,344 metri).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Norāda, vai<strong>NoData</strong>vērtības<strong>vērtību rastrā</strong>ietekmēs tās zonas rezultātus, kurā tās iekļautas.</p><ul><li><strong>Jā</strong> -- jebkurā noteiktā zonā, nosakot šīs zonas izvades vērtību, tiks izmantoti tikai tie pikseļi, kuriem ir vērtība<strong>vērtību rastrā</strong>.<strong>NoData</strong>pikseļi<strong>vērtību rastrā</strong>tiks ignorēti statistikas aprēķinā. Tas ir noklusējuma iestatījums.</li><li><strong>Nē</strong> -- jebkurā konkrētā zonā, ja opcijā<strong>Vērtību rastrs</strong>pastāv jebkādi<strong>NoData</strong>pikseļi, tiek uzskatīts, ka nav pietiekami daudz informācijas, lai veiktu statistikas aprēķinus visiem pikseļiem šajā zonā; tāpēc visa zona iegūst<strong>NoData</strong>vērtību izvades rastrā.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Nosaka procentiles interpolācijas metodi, kas jāizmanto, ja vērtību skaits no aprēķināmā ievades rastra ir vienāds.</p><ul><li><strong>Noteikt automātiski</strong> -- ja ievades vērtības rastrs ir vesels pikselis, tiek izmantota metode <strong>Tuvākais</strong>. Ja ievades vērtības rasts ir peldošā punkta pikseļu veida rastrs, tiek izmantota metode<strong>Lineārs</strong>. Tas ir noklusējuma iestatījums.</li><li><strong>Vistuvākā</strong> -- tiek izmantota vēlamā procentilei tuvākā pieejamā vērtība. Šajā gadījumā izvades pikseļu veids ir tāds pats kā ievades vērtības rastra veids. Metode</li><li><strong>Lineārs</strong> -- tiek izmantota abu apkārtējo vērtību vidējā svērtā vērtība no vēlamās procentiles. Šajā gadījumā izvades pikseļu veids ir peldošais punkts.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>Aprēķināmā procentile Noklusējuma vērtība 90. procentilei ir 90.</p><p>Vērtības var būt diapazonā no 0 līdz 100. 0. procentile būtībā ir līdzvērtīga minimālajai statistikai, un 100. procentile ir līdzvērtīga maksimālajai statistikai. Vērtība 50 uzrādīs tādu pašu rezultātu kā mediānas statistika.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Nosaka, kā tiek apstrādāts ievades daudzdimensiju vērtības rastrs.</p><ul><li><strong>Pašreizējais sektors</strong> -- statistika tiks aprēķināta no daudzdimensiju datu kopas pašreizējā sektora. Tas ir noklusējuma iestatījums.</li><li><strong>Visi sektori</strong> -- statistika tiks aprēķināta visām daudzdimensiju datu kopas dimensijām (piemēram, laiks vai dziļums).</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>Aprēķināmais statistikas tips.</p><ul><li><strong>Vidējā</strong> -- aprēķina visu pikseļu vidējo vērtību<strong>vērtību rastrā</strong>, kas pieder tai pašai zonai kā izvades pikselis.</li><li><strong>Vairākums</strong> -- nosaka vērtību, kas visbiežāk rodas visos<strong>vērtību rastra</strong>pikseļos, kas pieder tai pašai zonai, kurā atrodas izvades pikselis.</li><li><strong>Maksimums</strong> -- nosaka lielāko vērtību visiem pikseļiem<strong>vērtību rastrā</strong>, kas pieder tai pašai zonai kā izvades pikselis.</li><li><strong>Mediāna</strong> -- nosaka mediānas vērtību visiem pikseļiem<strong>vērtību rastrā</strong>, kas pieder tai pašai zonai kā izvades pikselis.</li><li><strong>Minimums</strong> -- nosaka vērtību, kas visretāk sastopama visiem pikseļiem <strong>vērtību rastrā</strong>, kas pieder tai pašai zonai kā izvades pikselis.</li><li><strong>Mazākums</strong> -- nosaka vērtību, kas visbiežāk sastopama visiem <strong>vērtību rastra</strong> pikseļiem tajā pašā zonā, kurā atrodas izvades pikselis.</li><li><strong>Procentile</strong> -- aprēķina visu pikseļu procentili <strong>vērtību rastrā</strong>, kas pieder tai pašai zonai kā izvades pikselis. 90. procentile tiek aprēķināta pēc noklusējuma. Jūs varat noteikt, kuru procentili aprēķināt, izmantojot parametru<strong>Procentiles vērtība</strong>.</li><strong><li>Diapazons</strong> -- aprēķina starpību starp lielāko un mazāko visu pikseļu vērtību<strong>vērtību rastrā</strong>, kas pieder tai pašai zonai kā izvades pikselis.</li><li><strong>Standartnovirze</strong> -- aprēķina visu pikseļu standartnovirzi<strong>vērtību rastrā</strong>, kas pieder tai pašai zonai kā izvades pikselis.</li><li><strong>Summa</strong> -- aprēķina visu pikseļu kopējo vērtību<strong>vērtību rastrā</strong>, kas pieder tai pašai zonai kā izvades pikselis.</li><li><strong>Varietāte</strong>-- aprēķina unikālu vērtību skaitu visiem pikseļiem<strong>vērtību rastrā</strong>, kas pieder tai pašai zonai kā izvades pikselis.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Rastrs, kas satur vērtības, no kurām tiek aprēķināta statistika.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>Lauks, kas satur vērtības, kuras definē katru zonu. Tās var būt vesels skaitlis vai zonas rastra virknes lauks.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>Datu kopa, kas definē zonas. Zonas var definēt, izmantojot veselu skaitļu rastru.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>Norāda, kā tiks aprēķināts statistikas tips.</p><ul><li><strong>Aritmētiski</strong>-- aprēķina aritmētisko statistiku. Tas ir noklusējuma iestatījums.</li><li><strong>Aplis</strong>-- aprēķina apļa statistiku, kas ir piemērota cikliskiem daudzumiem, piemēram, kompasa virzienam grādos, dienām un faktisko skaitļu frakcionētām daļām.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>Augstākā iespējamā vērtība (augšējā robeža) cikliskajos datos. Tas ir pozitīvs skaitlis, kura noklusējuma vērtība ir 360. Šī vērtība norāda arī to pašu daudzumu kā mazākā iespējamā vērtība (zemākā robeža).</p><p>Šis parametrs ir lietojams tikai tad, ja tiek aprēķināta apļa statistika.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>Ievades rastrs, kuram tiks izlīdzināta robeža starp zonām.</p><p>Tā veidam ir jābūt veselam skaitlim.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Norāda, cik reižu notiks izlīdzināšana: divas reizes vai vienu.</p><ul><li><p><strong>Atzīmēts</strong>-- divas reizes veic izvēršanu un sašaurināšanu. Pirmo reizi darbība tiek veikta atbilstoši norādītajam kārtošanas veidam. Pēc tam tiek veikta papildu izvēršanas un samazināšanās darbība ar apgrieztu prioritāti. Tas ir noklusējuma iestatījums.</p></li><li><p><strong>Nav atzīmēts</strong> -- veic izvēršanas un samazināšanās darbību vienu reizi atbilstoši kārtošanas veidam.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Norāda kārtošanas veidu, kas jāizmanto izlīdzināšanā. Kārtošana nosaka prioritāti, pēc kuras šūnas var izvērst apkārtnē.</p><p>Kārtošanu var veikt, pamatojoties uz zonas vērtību vai zonu apgabalu.</p><ul><li><p><strong>Nekārtot</strong>-- zonas netiek kārtotas pēc izmēra. Zonām ar lielākām vērtībām ir augstāka prioritāte paplašināties zonās ar mazākām vērtībām izlīdzinātajā izvadē. Tas ir noklusējuma iestatījums.</p></li><li><p><strong>Dilstošā secībā</strong> -- kārto zonas dilstošā secībā pēc lieluma. Zonām ar lielāku kopējo platību ir lielāka prioritāte tikt izvērstām zonās ar mazākiem kopējiem apgabaliem. Šī opcija tiecas novērst vai samazināt mazāku zonu šūnu dominēšanu izlīdzinātajā izvadē.</p></li><li><p><strong>Pieaugošā secībā</strong> -- kārto zonas pieaugošā secībā pēc lieluma. Zonām ar mazāku kopējo platību ir lielāka prioritāte tikt izvērstām zonās ar lielāku kopējo platību. Šī iespēja tiecas saglabāt vai palielināt mazāku zonu šūnu dominanci izlīdzinātajā izvadē.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>Apkopošanas dimensija. Tā ir dimensija, kurā tiks apkopoti mainīgie.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Norāda metodi, kas jāizmanto, lai pirms apkopošanas filtrētu ievadītos daudzdimensiju datus.</p><ul><li><strong>Viss</strong> — tiks izmantots pilns katras dimensijas diapazons. Tas ir noklusējuma iestatījums.</li><li><strong>Pēc vērtībām</strong> — dimensija tiks sadalīta, izmantojot dimensijas vērtību vai vērtību sarakstu.</li><li><strong>Pēc diapazoniem</strong> — dimensija tiks sadalīta, izmantojot diapazonu vai diapazonu sarakstu.</li><li><strong>Pēc iterācijas</strong> — dimensija tiks sadalīta norādītajā intervāla izmērā.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Iterācijas definīcijas parametri ļauj norādīt dimensiju vērtības, kas jāizmanto, lai filtrētu ievadītos daudzdimensiju datus analīzei, kad parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc iterācijas</strong>.</p><ul><li><strong>Dimensija</strong> — filtrēšanai izmantojamā dimensija.</li><li><strong>Pirmās iterācijas sākums</strong> — pirmā intervāla sākums. Šis intervāls tiek izmantots, lai veiktu iterāciju datu kopā.</li><li><strong>Pirmās iterācijas beigas</strong> — pirmā intervāla beigas. Šis intervāls tiek izmantots, lai veiktu iterāciju datu kopā.</li><li><strong>Solis</strong> — biežums, ar kādu dati tiks sadalīti.</li><li><strong>Vienība</strong> — iterācijas vienība.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Norāda atslēgvārdu intervālu, kas tiks izmantots, veicot apkopošanu dimensijā.</p><p>Šis parametrs ir nepieciešams, ka parametra <strong>Veida</strong> iestatījums ir <strong>Atslēgvārdu intervāls</strong>.</p><ul><li><strong>Ik stundu</strong> — datu vērtības tiks apkopotas stundas laika soļos, un rezultāts ietvers katru stundu laika sērijā. Tas ir noklusējuma iestatījums.</li><li><strong>Katru dienu</strong> — datu vērtības tiks apkopotas dienas laika posmos, un rezultāts ietvers katru dienu laika sērijā.</li><li><strong>Katru nedēļu</strong> — datu vērtības tiks apkopotas nedēļas laika posmos, un rezultāts ietvers katru nedēļu laika sērijā.</li><li><strong>Katru dekādi</strong> — datu vērtības tiks apkopotas 3 periodos pa 10 dienām katrā. Pēdējā periodā var būt vairāk vai mazāk par 10 dienām. Izvade ietver 3 sektorus katram mēnesim.</li><li><strong>Piecu dienu cikls</strong> — datu vērtības tiks apkopotas 6 periodos pa 5 dienām katrā. Pēdējā periodā var būt vairāk vai mazāk par 5 dienām. Izvade ietver 6 sektorus katram mēnesim.</li><li><strong>Katru mēnesi</strong> — datu vērtības tiks apkopotas mēneša laika posmos, un rezultāts ietvers katru mēnesi laika sērijā.</li><li><strong>Katru ceturksni</strong> — datu vērtības tiks apkopotas ceturkšņa laika posmos, un rezultāts ietvers katru laika sērijas ceturksni.</li><li><strong>Katru gadu</strong> — datu vērtības tiks apkopotas gada laika posmos, un rezultāts ietvers katru laika sērijas gadu.</li><li><strong>Atkārtoti ik dienu</strong> — datu vērtības tiks apkopotas dienas laika posmos, un rezultātā tiks iekļauta viena apkopotā vērtība katrai Juliāna dienai. Izvade ietver ne vairāk kā 366 dienu laiku sektorus.</li><li><strong>Periodiski katru nedēļu</strong> — datu vērtības tiks apkopotas nedēļas laika posmos un rezultāts ietvers vienu apkopotu vērtību nedēļā. Izvade ietver ne vairāk kā 53 nedēļas laika sektorus.</li><li><strong>Periodiski katru mēnesi</strong> — datu vērtības tiks apkopotas mēneša laika posmos, un rezultāts ietvers vienu apkopotu vērtību mēnesī. Izvade ietver ne vairāk kā 12 mēnešu laika sektorus.</li><li><strong>Periodiski katru ceturksni</strong> — datu vērtības tiks apkopotas katra ceturkšņa laika posmos un rezultāts ietvers vienu apkopotu vērtību ceturksnī. Izvadē ir ne vairāk kā 4 ceturkšņa laika sektori.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Norāda matemātisko metodi, kas tiks izmantota, sektoru apvienošanai intervālā.</p><ul><li><strong>Vairākums</strong> — aprēķina visbiežāko pikseļa vērtību visos sektoros intervālā.</li><li><strong>Maksimums</strong> — aprēķina pikseļa lielāko vērtību starp visiem sektoriem intervālā.</li><li><strong>Vidējais lielums</strong> — aprēķina pikseļa vērtības vidējo aritmētisko starp visiem sektoriem intervālā. Tas ir noklusējuma iestatījums.</li><li><strong>Mediāna</strong> — pikseļu mediānas vērtība tiks aprēķināta visos intervāla sektoros.</li><li><strong>Minimums</strong> — pikseļu minimālā vērtība tiks aprēķināta visos intervāla sektoros.</li><li><strong>Mazākums</strong> — pikseļu vērtība, ko uzrāda visretāk, tiks aprēķināta visos intervāla sektoros.</li><li><strong>Diapazons</strong> — pikseļa vērtību diapazons tiks aprēķināts visos intervāla sektoros.</li><li><strong>Standartnovirze</strong> — pikseļa vērtību standartnovirze tiks aprēķināta visos intervāla sektoros.</li><li><strong>Summa</strong> — pikseļu vērtību summa tiks aprēķināta visos intervāla sektoros.</li><li><strong>Varietāte</strong> — unikālu pikseļu vērtību skaits tiks aprēķināts visos intervāla sektoros.</li></ul><p>Visām opcijām ir arī ekvivalents opcijai Ignorēt NoData. Tiks veikta matemātiska darbība visos derīgajos pikseļos dimensijā un tiks ignorēti visi NoData pikseļi.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>Tabulā norādītos intervāla diapazonus izmanto vērtību grupu apkopošanai. Minimālās un maksimālās vērtības norāda iekļaujamo diapazonu.</p><p>Šis parametrs ir nepieciešams, ja parametra <strong>Veida</strong> iestatījums ir <strong>Intervāla diapazoni</strong>.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>Ievades daudzdimensiju rastrs.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Norāda dimensijas intervālu, kuram tiks apkopoti dati.</p><ul><li><strong>Visi</strong> — mainīgā lieluma dati tiks apkopoti visos sektoros. Tas ir noklusējuma iestatījums.</li><li><strong>Intervāla atslēgvārds</strong> — mainīgie dati tiks apkopoti, izmantojot vispārzināmu intervālu.</li><li><strong>Intervāla vērtība</strong> — mainīgie dati tiks apkopoti, izmantojot lietotāja norādītu intervālu un mērvienību.</li><li><strong>Intervāla diapazoni</strong> — mainīgie dati tiks apkopoti starp norādītajiem vērtību vai datumu pāriem.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>Apkopošanai izmantotā intervāla lielums.</p><p>Šis parametrs ir nepieciešams, ja parametra <strong>Veida</strong> iestatījums ir <strong>Intervāla vērtība</strong>.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>Dimensiju vērtības, kas jāizmanto, lai filtrētu ievadītos daudzdimensiju datus analīzei. Šis parametrs ir nepieciešams, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc vērtībām</strong>.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>Mainīgais lielums vai lielumi, kas tiks apkopoti dotajā dimensijā.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>Ievades Esri regresijas definīcijas (<strong>.ecd</strong>) fails, kas satur statistiku un informāciju par konkrēto datu kopu, regresijas modeli un izvēlētajiem atribūtiem.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>Rastra datu kopa vai datu kopas, kas parāda prognozētāja mainīgos. Tā var būt vienjoslas rastrs, daudzjoslu rastrs, daudzdimensiju rastrs, mozaīkas datu kopa vai rastru kolekcija.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>Veicamā statistiskā aprēķina veids.</p><p>Pieejamie statistikas veidi ir šādi: <strong>Vairākums</strong>,<strong>Maksimums</strong>,<strong>Vidējā vērtība</strong>,<strong>Mediāna</strong>,<strong>Minimums</strong>,<strong>Mazākums</strong>,<strong>Procentile</strong>,<strong>Diapazons</strong>,<strong>Standarta novirze</strong>,<strong>Summa</strong> un<strong>Dažādība</strong>.</p><p>Noklusējuma veids ir<strong>Vidējā vērtība</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>Krāsas pēc nejaušības principa tiek piešķirtas pikseļiem, kas nav iekļauti krāsu kartē.</p><ul><li>Neatzīmēts — nekartētiem pikseļiem netiek piešķirta krāsa. Šis ir noklusējuma iestatījums.</li><li>Atzīmēts — nekartētie pikseļi tiek piešķirti krāsai.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>Kad ir izvēlēts Grama-Šmita algoritms, var arī norādīt sensoru, kas ieguva vairāku joslu rastra ievades datus. Izvēloties s ensora veidu, tiek iestatīti pareizie joslas parametri.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>Vērtība, cik slāņu pirms vai virs jāiekļauj definētajā logā. Vērtībai jābūt pozitīvam veselam skaitlim no 1 līdz 100. Noklusējuma vērtība ir 1.</p><p>Šī parametra vienība ir sektors.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>Vērtība, kas tiks izmantota, lai noapaļotu lineāru vērtību dotā riņķveida vidējā diapazonā.</p><p>Tā vērtībai jābūt pozitīvai. Noklusējuma vērtība ir 360 grādi.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>Dimensijas nosaukums, pa kuru logs pārvietosies.</p><p>Noklusējuma vērtība ir pirmā dimensija, kas nav x, y, kas atrodama ievades daudzdimensiju rastrā.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>Vērtība, cik slāņu pēc vai zem jāiekļauj definētajā logā. Vērtībai jābūt pozitīvam veselam skaitlim no 1 līdz 100. Noklusējuma vērtība ir 1.</p><p>Šī parametra vienība ir sektors.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>Ievades rastrs var būt tikai daudzdimensiju rastrs mākoņrastra formātā (<strong>.crf</strong>file).</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>Norāda, kā statistikas aprēķins apstrādās NoData vērtības.</p><ul><li><strong>Dati</strong> -- NoData vērtības vērtību ievadē tiks ignorētas definētā loga rezultātos, kuros tās iekļautas. Tas ir noklusējuma iestatījums.</li><li><strong>NoData</strong> -- izvades vērtības ir NoData, ja norādītajā logā ievadē ir NoData vērtības.</li><li><strong>Aizpildīt NoData</strong> -- NoData šūnu vērtības tiks aizstātas, izmantojot atlasīto statistiku definētajā logā.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Norāda interpolācijas metodi, kas jāizmanto, ja procentiles vērtība atrodas starp divām šūnu vērtībām.</p><ul><li><strong>Automātiska noteikšana</strong> -- ja ievades rastrs ir vesela skaitļa pikseļu veids, tiek izmantota metode <strong>Vistuvākā</strong>. Ja ievades rasts ir peldošā pikseļa veida rastrs, tiks izmantota metode <strong>Lineārs</strong>. Tas ir noklusējuma iestatījums.</li><li><strong>Vistuvākā</strong> -- tiks izmantota procentilei tuvākā pieejamā vērtība. Šajā gadījumā izvades pikseļu veids būs tāds pats kā ievades vērtības rastra veids.</li><li><strong>Lineārs</strong> -- tiks izmantota abu apkārtējo vērtību vidējā svērtā vērtība no procentiles. Šajā gadījumā izvades pikseļu veids būs peldošais punkts.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>Procentile, kas tiks aprēķināta, kad <strong>Procentile</strong> tiks atlasīta kā statistikas veids. Noklusējuma vērtība 90. procentilei ir 90.</p><p>Vērtības var būt diapazonā no 0 līdz 100. 0. procentile ir būtiski vienāda ar minimuma statistiku, un 100. procentile ir vienāda ar maksimuma statistiku ar izņēmumu, ja rezultāts būs peldošais punkts. Vērtība 50 uzrādīs tādu pašu rezultātu kā mediānas statistika.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Norāda aprēķināmo statistikas veidu.</p><p></p><ul><li><strong>Vidējais</strong> -- tiks aprēķināts definētā loga šūnu vidējais (vidējā vērtība). Tas ir noklusējuma iestatījums.</li><li><strong>Apļveida vidējais</strong> -- tiks aprēķināts definētā loga šūnu vidējais apļveida lielums. Ja ir atlasīts šis statistikas veids, kļūst pieejams parametrs <strong>Apļveida aplaušanas vērtība</strong>.</li><li><strong>Vairākums</strong> -- tiks identificēta definētā loga šūnu lielākā daļa (visbiežāk tā ir vērtība).</li><li><strong>Maksimums</strong> -- definētajā logā tiks identificēts šūnu maksimums (lielākā vērtība).</li><li><strong>Mediāna</strong> -- tiks noteikta tuvākā apgabala šūnu mediāna.</li><li><strong>Minimums</strong> --tiks noteikts apgabala šūnu minimums (mazākā vērtība).</li><li><strong>Procentile</strong> -- tiks aprēķināta apgabala šūnu procentile. Atlasot šo statistikas veidu, kļūst pieejams parametrs <strong>Percentiles vērtība</strong>un<strong>Procentiles interpolācijas veids</strong>. Izmantojiet šos jaunos parametrus, lai norādītu procentili, pēc kuras aprēķināt un izvēlēties izmantojamo interpolācijas veidu.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>Interpolācijai izmantojamā dimensija.</p><p>Šis parametrs ir nepieciešams, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc intervāla</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Norāda metodi, kas tiks izmantota, lai pirms interpolācijas filtrētu ievadītos daudzdimensiju datus.</p><ul><li><strong>Pēc vērtībām</strong> -- dimensija tiks apgriezta, izmantojot dimensijas vērtību vai vērtību sarakstu.</li><li><strong>Pēc intervāla</strong> -- dimensija tiks apgriezta, izmantojot diapazonu vai diapazonu sarakstu.</li><li><strong>Pēc mērķa rastra</strong> -- Dimensija tiks sadalīta sektoros, izmantojot īpašu mērķa daudzdimensiju rastru.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>Intervāla beigas, ko izmanto, lai atkārtotos caur datu kopu.</p><p>Šis parametrs ir nepieciešams, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc intervāla</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Norāda, vai analīzē tiks ignorētas NoData vērtības.</p><ul><li>Neatzīmēts -- ja blakus esošajos sektoros ir NoData vērtības, analīzes rezultātā būs NoData. Tas ir noklusējuma iestatījums.</li><li>Atzīmēts -- analīzē tiks izmantoti tikai sektori, kuriem ir derīgi pikseļi un kuri ignorēs NoData sektorus.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Norāda metodi, kas tiks izmantota rastra interpolēšanai.</p><ul><li><strong>Lineāra</strong> -- izvade tiks interpolēta lineāri, izmantojot blakus esošos slāņus. Tas ir noklusējuma iestatījums.</li><li><strong>Vistuvākais apgabals</strong> -- izvadē tiks izmantots tuvākais blakus esošais sektors.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>Ievades daudzdimensiju rastrs.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>Intervāla sākums, ko izmanto, lai atkārtotos caur datu kopu.</p><p>Šis parametrs ir nepieciešams, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc intervāla</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>Datu interpolācijas biežums.</p><p>Šis parametrs ir nepieciešams, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc intervāla</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>Mērķa rastrs, kas norādīts dimensijas definīcijā.</p><p>Šis parametrs ir nepieciešams, ja parametrs <strong>Dimensijas definīcijas</strong> iestatījums ir <strong>Pēc mērķa rastra</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>Intervāla mērvienība.</p><p>Šis parametrs ir nepieciešams, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc intervāla</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>Dimensiju vērtības, ko izmanto ievadīto daudzdimensiju datu filtrēšanai analīzei.</p><p>Šis parametrs ir nepieciešams, ja parametra <strong>Dimensijas definīcija</strong> iestatījums ir <strong>Pēc vērtībām</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>Mainīgais lielums vai mainīgie lielumi, kas tiks interpolēti atbilstoši dimensijas definīcijai.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Norāda, vai izvade būs ar saplacinātu reljefu, izmantojot<strong>Sigma0</strong>vai<strong>Gamma0</strong>.</p><ul><li><strong>Gamma0</strong>–Beta0 atstarotais starojums tiks normalizēts, izmantojot plaknes vienības platību, kas lokāli pieskaras DEM, ko parasti dēvē par lokālo krišanas leņķi. Šis ir noklusējums.</li><li><strong>Sigma0</strong>– Beta0 atstarotais starojums tiks normalizēts, izmantojot DEM, lai aprēķinātu platību.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>Ievades DEM.</p><p>DEM izmanto, lai novērtētu lokālo apgaismoto platību.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Norāda, vai ievades DEM vertikālā atskaites sistēma tiks pārveidota par elipsoidālo augstumu. Lielākā daļa augstuma datu kopu ir saistītas ar jūras līmeņa ortometrisko augstumu, tāpēc šajos gadījumos ir nepieciešama korekcija, lai pārvērstu par elipsoidālo augstumu.</p><ul><li>Atzīmēts – tiks veikta ģeoīda korekcija, lai pārvērstu ortometrisko augstumu par elipsoidālu augstumu (ņemot vērā EGM96 ģeoīdu). Šis ir noklusējums.</li><li>Nav atzīmēts – ģeoīda korekcija netiks veikta. Izmantojiet šo opciju tikai tad, ja DEM ir izteikts elipsoidālā augstumā.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>Ievades radara dati.</p><p>Šis rasts vispirms radiometriski jākalibrē līdz Beta0.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>Trešajai joslai piešķirtais aprēķins.</p><p>Joslas nosaukums, joslas ID vai algebriska izteiksme, izmantojot joslas.</p><p>Atbalstītie operatori ir unāri, pluss (+), mīnuss (-), reizināšana (*) un dalīšana (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>Otrajai joslai piešķirtais aprēķins.</p><p>Joslas nosaukums, joslas ID vai algebriska izteiksme, izmantojot joslas.</p><p>Atbalstītie operatori ir unāri, pluss (+), mīnuss (-), reizināšana (*) un dalīšana (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>Ievades vairākjoslu rastra dati.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Norāda metodi, kas tiks izmantota, lai izvilktu joslas.</p><ul><li>Joslu nosaukumi — izmanto joslas nosaukumu, kas parāda viļņa garuma intervālu elektromagnētiskajā spektrā (piemēram, sarkanās krāsas, tuvā infrasarkanā starojuma, termiskā infrasarkanā starojuma) vai polarizāciju (piemēram, VH, VV, HH vai HV). Šis ir noklusējums.</li><li>Joslas ID – izmanto joslas numuru (piemēram, B1, B2 vai B3).</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>Pirmajai joslai piešķirtais aprēķins.</p><p>Joslas nosaukums, joslas ID vai algebriska izteiksme, izmantojot joslas.</p><p>Atbalstītie operatori ir unāri, pluss (+), mīnuss (-), reizināšana (*) un dalīšana (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Izvēlieties virsmas funkcijas veidu, kas tiks izvietota ap mērķa šūnu.</p><ul><li>Kvadrāts -- apkaimes šūnām tiks lietota kvadrātiska virsmas funkcija. Tas ir noklusējuma vieds.</li><li>Divi kvadrāti -- tuvākā apgabala šūnām tiks uzstādīta divkvadrātiskā virsmas funkcija.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>Rezultāts tiks aprēķināts šajā attālumā no mērķa šūnas centra. Tas nosaka tuvākā apgabala lielumu. Noklusējuma vērtība ir ievades rastra šūnas lielums, kā rezultātā tiek izveidots tuvākais 3 × 3 apgabals.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>Mērvienības (grādi vai procenti), ko izmantos rezultāta slīpuma rastrā. Šis parametrs ir aktīvs tikai tad, ja <strong>parametra veids</strong>ir<strong>Slīpums</strong>.</p><ul><li>Grādi -- slīpums stāvums tiks aprēķināts grādos. Tas ir noklusējuma iestatījums.</li><li>Procentu kāpums -- slīpuma stāvums tiek aprēķināts kā procentu kāpums, ko dēvē arī par procentuālo slīpumu.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Norāda aprēķināmā rezultāta virsmas parametra veidu.</p><ul><li>Slīpums -- tiks aprēķināts pacēluma izmaiņu ātrums. Tas ir noklusējuma iestatījums.</li><li>Proporcija -- tiks aprēķināts katras šūnas maksimālā izmaiņu ātruma samazinājuma virziens.</li><li>Vidējais izliekums -- tiks izmērīts izmēra virsmas kopējais izliekums. To aprēķina kā minimālā un maksimālā izliekuma vidējo vērtību. Šis izliekums apraksta virsmas raksturīgo konveksitāti vai konkavitāti neatkarīgi no virziena vai smaguma ietekmes.</li><li>Tangenciāls (parastā kontūra) izliekums -- tiks mērīts ģeometriski normāls izliekums perpendikulāri slīpuma līnijai, tangenciāli kontūras līnijai. Šo izliekumu parasti izmanto, lai raksturotu plūsmas konverģenci vai novirzīšanos pa virsmu.</li><li>Profila (parastā slīpuma līnija) izliekums -- tiks mērīts ģeometriskais normālais izliekums pa slīpuma līniju. Šo izliekumu parasti izmanto, lai raksturotu plūsmas paātrinājumu un palēninājumu pa virsmu.</li><li>Plāna (projicētās kontūras) izliekums -- tiks mērīts izliekums pa kontūras līnijām.</li><li>Kontūras ģeodēziskā kustība -- tiks mērīts slīpuma leņķa izmaiņu ātrums pa kontūras līnijām.</li><li>Gausa izliekums -- tiks mērīts virsmas kopējais izliekums. To aprēķina kā minimālā un maksimālā izliekuma reizinājumu.</li><li>Kasorati izliekums  -- tiks mērīts virsmas vispārējais izliekums. Tas var būt nulle vai kāds cits pozitīvs skaitlis.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Norāda, vai ģeodēziskie azimuti tiks prognozēti tā, lai koriģētu leņķa kropļojumu, ko rada rezultāta telpiskā atsauce. Šis parametrs ir aktīvs tikai tad, ja<strong>parametra veids</strong>ir<strong>Proporcija</strong>.</p><ul><li>Neatzīmēts -- ģeodēziskie azimuti netiks projicēti. Tas ir noklusējuma iestatījums.</li><li>Atzīmēts -- tiks projicēti ģeodēziskie azimuti.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>Ievades virsmas rastrs. Tas var būt vesels skaitlis vai rastrs ar peldošo punktu.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Norāda, vai tuvā apgabala attālums atšķirsies atkarībā no ainavas izmaiņām (adaptīvi). Maksimālo attālumu nosaka tuvā apgabala attālums. Minimālais attālums ir ievades rastra šūnas lielums.</p><ul><li>Neatzīmēts -- visās vietās tiks izmantots viens (fiksēts) tuvā apgabala attālums. Tas ir noklusējuma iestatījums.</li><li>Atzīmēts -- visās vietās tiks izmantota adaptīvs tuvā apgabala attālums</li></ul>.",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Norāda, vai proporcija tiks mērīta no punkta uz ekvatora vai no ziemeļu pola. Šis parametrs ir aktīvs tikai tad, ja<strong>parametra veids</strong>ir<strong>Proporcija</strong>.</p><ul><li>Neatzīmēts -- proporcija tiks mērīta no ziemeļu pola. Tas ir noklusējuma iestatījums.</li><li>Atzīmēts -- proporcija tiks mērīta no punkta uz ekvatora.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>Vertikālo z vērtību lineārā mērvienība.</p><p>To definē ar vertikālu koordinātu sistēmu, ja tāda pastāv. Ja vertikālās koordinātu sistēmas nav, z vienība jādefinē no mērvienību saraksta, lai nodrošinātu pareizu ģeodēzisko aprēķinu.</p><ul><li>Colla -- lineārā mērvienība būs collās.</li><li>Pēda -- lineārā mērvienība būs pēdās.</li><li>Jards -- lineārā mērvienība būs jardos</li><li>ASV jūdze -- lineārā mērvienība būs jūdzēs</li><li>Jūras jūdze -- lineārā mērvienība būs jūras jūdzēs.</li><li>Milimetrs -- lineārā mērvienība būs milimetros.</li><li>Centimetrs -- lineārā mērvienība būs centimetros.</li><li>Metrs -- lineārā mērvienība būs metros. Tas ir noklusējuma iestatījums.</li><li>Kilometrs -- lineārā mērvienība būs kilometros.</li><li>Decimetrs -- lineārā mērvienība būs decimetros.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>Rastrs, kas norāda analīzes norises vietas.</p><p>Rastrs var būt vesels skaitlis vai peldošā punkta tips.</p><p>Masku veidos visas šūnas ar derīgu vērtību, ieskaitot nulli. Šūnas, kas maskas ievadē ir NoData, izvadē būs NoData.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Izvēlieties, kādi šūnu izmēri tiks izmantoti izvades rastrā. Ja visi ievades šūnu izmēri ir vienādi, visas opcijas uzrādīs vienus un tos pašus rezultātus.</p><ul><li>Pirmais -- izmantojiet pirmo ievades rastru šūnas izmēru.</li><li>Min. -- tiek izmantots mazāko visu ievades rastru šūnas izmērs.</li><li>Maks. -- tiek izmantots lielāko visu ievades rastru šūnas izmērs. Tas ir noklusējuma iestatījums.</li><li>Vidējais -- tiek izmantots vidējais visu ievades rastru šūnas izmērs.</li><li>Pēdējais -- tiek izmantots pēdējais visu ievades rastru šūnas izmērs.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>Norāda konverģences vērtību starp divām secīgām iterācijām. Ja epsilons ir mazāks vai vienāds ar norādīto vērtību, iterācija tiek pārtraukta un tiek izmantots pēdējās iterācijas rezultāts.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Izvēlieties, kāds apjoms jāizmanto izvades rastrā:</p><ul><li><p>Pirmais -- lai noteiktu apstrādes apjomu, izmantojiet pirmā ievades rastra apjomu.</p></li><li>Pārklājums -- lai noteiktu apstrādes apjomu, izmantojiet pikseļus, kas pārklājas. Tas ir noklusējuma iestatījums.</li><li>Apvienojums -- apstrādes apjomu noteikšanai izmantojiet visu rastru apjomu.</li><li>Pēdējais -- lai noteiktu apstrādes apjomu, izmantojiet pēdējās ievades rastra apjomu.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Norāda maksimālo veicamo iterāciju skaitu. Aprēķins beidzas, kad šī vērtība ir sasniegta, neatkarīgi no iestatījuma <strong>Epsilons</strong>.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>Ievades vairākjoslu rastri.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>Ievades rastrs, kas atspoguļo uzkrājošo izmaksu attālumu no pirmā avota.</p><p>Tai jābūt uzkrātajai izmaksu attāluma izvadei no funkcijas <strong>Attāluma uzkrāšana</strong> vai <strong>Attāluma piešķiršana</strong>.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>Ievades rastrs, kas atspoguļo uzkrājošo izmaksu attālumu no otrā avota.</p><p>Tai jābūt uzkrātajai izmaksu attāluma izvadei no funkcijas <strong>Attāluma uzkrāšana</strong> vai <strong>Attāluma piešķiršana</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>Ievades atpakaļvirziena rastrs no pirmā avota.</p><p>Šī ir rastra datu kopa, kas identificē nākamās šūnas virzienu pa vislētāko ceļu atpakaļ uz pirmo avotu. Tā ir izvade no funkcijas <strong>Attāluma uzkrāšana</strong> vai <strong>Attāluma piešķiršana</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>Ievades atpakaļvirziena rastrs no otrā avota.</p><p>Šī ir rastra datu kopa, kas identificē nākamās šūnas virzienu pa vislētāko ceļu atpakaļ uz pirmo avotu. Tā ir izvade no funkcijas <strong>Attāluma uzkrāšana</strong> vai <strong>Attāluma piešķiršana</strong>.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>Procentu vai uzkrājošo izmaksu slieksnis, kas noteiks, vai konkrētā šūna tiks iekļauta izvades koridora rastrā.</p><p>Ja parametrs <strong>Sliekšņa metode</strong> ir iestatīts kā <strong>Procenti no mazākajām izmaksām</strong>, norādītā vērtība norāda procentuālo palielinājumu, kas jāpiemēro no summēto uzkrājošo izmaksu attāluma rastru minimālās vērtības. Ja parametrs <strong>Sliekšņa metode</strong> ir iestatīts uz <strong>Uzkrāšanas izmaksas</strong>, vērtība norāda šūnas, kuru summētās uzkrāšanas izmaksas ir vienādas ar vai zemākas par koridorā iekļaujamo vērtību.</p><p>Šis parametrs darbojas tikai tad, ja parametrs <strong>Sliekšņa metode</strong> ir iestatīts uz <strong>Procenti no mazākajām izmaksām</strong> vai <strong>Uzkrājošās izmaksas</strong>.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Norāda, kā tiks definēts slieksnis.</p><p></p><ul><li><strong>Bez sliekšņa </strong>-- slieksnis netiks piemērots, un rezultātā izveidotais koridors ietvers visu ievades rastru apjomu. Tas ir noklusējuma iestatījums.</li><li><strong>Procenti no mazākajām izmaksām </strong>-- slieksni nosaka procentos no summēto uzkrājošo izmaksu attāluma rastru minimālās vērtības.</li><li><strong>Uzkrājošās izmaksas </strong>-- slieksni noteiks uzkrājošo izmaksu attāluma vienībās.</li></ul>"
};
const helpTexts_lv = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_lv);


//# sourceMappingURL=help-texts.lv-5affdc35.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,