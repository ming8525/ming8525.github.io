"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_guid-a-a32c89"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/api-2e3a136f.js":
/*!*********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/api-2e3a136f.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getAppSwitcherConfig),
/* harmony export */   b: () => (/* binding */ getMarketPlaceProvisionedListings),
/* harmony export */   c: () => (/* binding */ getUserProperties),
/* harmony export */   d: () => (/* binding */ getApprovedApps),
/* harmony export */   e: () => (/* binding */ getOrgCapabilities),
/* harmony export */   f: () => (/* binding */ getSigninSettings),
/* harmony export */   g: () => (/* binding */ getShowInAppLauncher),
/* harmony export */   h: () => (/* binding */ getBlockableApps),
/* harmony export */   i: () => (/* binding */ getServers),
/* harmony export */   j: () => (/* binding */ getPortalSettings),
/* harmony export */   k: () => (/* binding */ fetchAllResources),
/* harmony export */   q: () => (/* binding */ queryAppItemsForChanges),
/* harmony export */   u: () => (/* binding */ updateUserProperties)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const appSwitcherConfigItemQuery = `owner:"esri" AND title:"AppSwitcher Config" AND type: "Application Configuration"`;
async function getPortalSettings(portal) {
    const portalUrl = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal);
    if (!portalUrl) {
        return;
    }
    const url = `${portalUrl}portals/self/settings`;
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(() => request(url), "portalSettings", portalUrl);
}
async function getShowInAppLauncher() {
    var _a;
    const settings = await getPortalSettings();
    return ((_a = settings === null || settings === void 0 ? void 0 : settings.portalConfigProperties) === null || _a === void 0 ? void 0 : _a.showInAppLauncher) || [];
}
async function getAppSwitcherConfigItem() {
    const portalUrl = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    if (!portalUrl) {
        return;
    }
    const url = `${portalUrl}search`;
    return request(url, {
        num: 1,
        start: 0,
        sortField: "title",
        sortOrder: "asc",
        q: appSwitcherConfigItemQuery
    });
}
async function getConfigData(itemId) {
    const portalUrl = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    if (!portalUrl || !itemId) {
        return;
    }
    const url = `${portalUrl}content/items/${itemId}/data`;
    return request(url);
}
async function getAppSwitcherConfig() {
    var _a;
    const { portal, user } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
    if (!(portal === null || portal === void 0 ? void 0 : portal.id) || !user) {
        return;
    }
    const result = await getAppSwitcherConfigItem();
    const item = (_a = result === null || result === void 0 ? void 0 : result.results) === null || _a === void 0 ? void 0 : _a[0];
    if (!item) {
        return;
    }
    const itemId = item.id;
    const data = await getConfigData(itemId);
    return data;
}
async function getUserProperties() {
    const { user } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}community/users/${user.username}/properties`;
    return request(url);
}
async function getApprovedApps() {
    const { portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}portals/${portal.id}/approvedApps`;
    return request(url, { returnAllApps: false });
}
async function fetchAllResources(url, content, resourceKey = "results") {
    const max = 100;
    let start = 1;
    let resources = [];
    let totalLeft;
    let numRequests;
    let promises;
    let i;
    content.start = start;
    if (!content.num) {
        content.num = max;
    }
    try {
        const result = await request(url, content);
        if (!(result === null || result === void 0 ? void 0 : result[resourceKey])) {
            return resources;
        }
        resources = [...resources, ...result[resourceKey]];
        // calculate whether further batches are needed
        start = result.nextStart;
        totalLeft = result.total - resources.length;
        numRequests = Math.ceil(totalLeft / max);
        promises = [];
        // request each necessary batch
        for (i = 0; i < numRequests; i++) {
            content.start = start + i * max;
            promises.push(request(url, content));
        }
        try {
            const results = await Promise.all(promises);
            results.forEach((r) => {
                resources = [...resources, ...r[resourceKey]];
            });
            return resources;
        }
        catch (_a) {
            return resources;
        }
    }
    catch (_b) {
        return resources;
    }
}
async function getMarketPlaceProvisionedListings() {
    const { user } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}community/users/${user.username}/provisionedListings`;
    return fetchAllResources(url, { returnAppClientIds: true, returnAllProvisions: true }, "provisionedListings");
}
async function getOrgCapabilities() {
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}portals/self/subscriptionInfo`;
    try {
        const response = await request(url);
        return (response === null || response === void 0 ? void 0 : response.orgCapabilities) || [];
    }
    catch (_a) {
        return [];
    }
}
async function queryAppItemsForChanges(approvedApps, runQuery) {
    if (!runQuery || !(approvedApps === null || approvedApps === void 0 ? void 0 : approvedApps.length)) {
        return;
    }
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}search`;
    return request(url, {
        num: 100,
        q: `id:(${approvedApps.map((a) => `"${a.itemId}"`).join(" OR ")})`
    });
}
const blockedAppsConfigItemQuery = `owner:"esri" AND title:"BlockedApps Config" AND type: "Application Configuration"`;
async function getBlockableApps() {
    var _a, _b;
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}search`;
    try {
        const response = await request(url, {
            num: 10,
            start: 0,
            sortField: "title",
            sortOrder: "asc",
            q: blockedAppsConfigItemQuery
        });
        if (!response) {
            return [];
        }
        const itemId = ((_b = (_a = response.results) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.id) || "";
        const data = await getConfigData(itemId);
        return (data === null || data === void 0 ? void 0 : data.blockedApps) || [];
    }
    catch (_c) {
        return [];
    }
}
async function getServers() {
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}portals/self/servers`;
    const response = await request(url);
    return (response === null || response === void 0 ? void 0 : response.servers) || [];
}
async function getSigninSettings() {
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}portals/self/signinSettings`;
    const response = await request(url);
    return response;
}
function getUrl(path) {
    let portalUrl = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    if (portalUrl.slice(-1) !== "/") {
        portalUrl += "/";
    }
    return `${portalUrl}${path}`;
}
async function request(url, params) {
    if (!params) {
        params = {};
    }
    params.f = "json";
    const token = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.e)();
    if (token) {
        params.token = token;
    }
    const urlObj = new URL(url);
    Object.keys(params).forEach((key) => urlObj.searchParams.append(key, params[key]));
    const response = await fetch(urlObj);
    const responseData = await response.json();
    return responseData;
}
async function postRequest(url, data) {
    data.append("f", "json");
    const token = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.e)();
    if (token) {
        data.append("token", token);
    }
    fetch(url, { method: "POST", body: data });
}
async function updateUserProperties(properties) {
    const { user } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
    const url = getUrl(`community/users/${user.username}/setProperties`);
    const data = new FormData();
    data.append("properties", JSON.stringify(properties));
    return postRequest(url, data);
}



//# sourceMappingURL=api-2e3a136f.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-aeaed84d.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-aeaed84d.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ guid)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
function generateId(counts) {
    return counts
        .map((count) => {
        let out = "";
        for (let i = 0; i < count; i++) {
            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return out;
    })
        .join("-");
}
const guid = () => generateId([2, 1, 1, 1, 3]);



//# sourceMappingURL=guid-aeaed84d.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-c58ffced.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-c58ffced.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getHydratedItem),
/* harmony export */   b: () => (/* binding */ getItemDataUrl),
/* harmony export */   c: () => (/* binding */ getItem),
/* harmony export */   d: () => (/* binding */ getItemGroups),
/* harmony export */   g: () => (/* binding */ getItemData),
/* harmony export */   i: () => (/* binding */ isEditableItem)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./service-8c2c4241.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/service-8c2c4241.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




const getHydratedItem = async (itemId, portal) => {
    try {
        const item = await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_1__.r)(getItemUrl(itemId, portal), portal);
        // TODO: check if we still need to do this
        // if (isHostedService(item.typeKeywords, item.type)) {
        //   const itemData = getItemData(item.id, portal);
        //   return { result: { ...item, ...itemInfo, ...itemData } };
        // }
        return { result: item };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
const getItemDataUrl = (itemId, portal) => `${getItemUrl(itemId, portal)}/data`;
const getItemData = async (itemId, portal) => {
    return (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_1__.r)(getItemDataUrl(itemId, portal), portal);
};
// TODO: remove these once we figure out how to efficiently disable the toast on the Home App
const getItemUrl = (itemId, portal) => `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}content/items/${itemId}`;
const getItem = async (itemId, portal, requestOptions) => {
    try {
        const url = getItemUrl(itemId, portal);
        return await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_1__.r)(url, portal, requestOptions);
    }
    catch (error) {
        console.warn(error);
    }
};
const getItemGroups = async (itemId, portal) => {
    try {
        const url = `${getItemUrl(itemId, portal)}/groups`;
        return { result: await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_1__.r)(url, portal) };
    }
    catch (error) {
        // TODO: handle error
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
const isEditableItem = async (item, portal) => {
    let isEditable = false;
    if ((0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_1__.i)(item.typeKeywords, item.type)) {
        isEditable = await hasEditingCapability(item.url, portal);
    }
    return isEditable;
};
const hasEditingCapability = async (layerUrl, portal, requiredNoToken = false) => {
    var _a, _b, _c;
    if (layerUrl) {
        try {
            const result = await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_1__.r)(`${(_a = (0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_2__.p)(layerUrl)) === null || _a === void 0 ? void 0 : _a.baseServerUrl}/layers`, portal, { addTokenManually: !requiredNoToken });
            return (_b = result === null || result === void 0 ? void 0 : result.layers) === null || _b === void 0 ? void 0 : _b.reduce((memo, layer) => memo || (layer === null || layer === void 0 ? void 0 : layer.capabilities.includes("Editing")), false);
        }
        catch (error) {
            if ((_c = error === null || error === void 0 ? void 0 : error.message) === null || _c === void 0 ? void 0 : _c.toLowerCase().includes("token required")) {
                return hasEditingCapability(layerUrl, portal, true);
            }
        }
    }
    return false;
};



//# sourceMappingURL=item-c58ffced.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/query-d62660d4.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/query-d62660d4.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   H: () => (/* binding */ HIDDEN_ITEMS_QUERY)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const HIDDEN_ITEMS_QUERY = `-type:"Code Attachment" -type:"Featured Items" -type:"Symbol Set" -type:"Color Set" -type:"Windows Viewer Add In" -type:"Windows Viewer Configuration" -type:"Map Area" -typekeywords:"MapAreaPackage" -type:"Indoors Map Configuration" -typekeywords:"SMX"`;



//# sourceMappingURL=query-d62660d4.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/service-8c2c4241.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/service-8c2c4241.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getServiceUrlResponse),
/* harmony export */   g: () => (/* binding */ getRelatedItems),
/* harmony export */   i: () => (/* binding */ isHostedService),
/* harmony export */   r: () => (/* binding */ requestFetch)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



/** Work-around since using `request` directly will trigger unwanted toast on the Home App if the layer is unavailable */
const requestFetch = async (url, portal, options = {}) => {
    const { body, usePost, addTokenManually, api = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.api, customToken } = options;
    const data = new URLSearchParams();
    if (body) {
        Object.entries(body).forEach(([key, value]) => {
            if (value !== undefined) {
                data.append(key, value);
            }
        });
    }
    const urlToSend = new URL(url);
    urlToSend.searchParams.append("f", "json");
    if (customToken) {
        urlToSend.searchParams.append("token", customToken);
    }
    else {
        const token = addTokenManually === false ? null : await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.h)(portal, api);
        if (token) {
            urlToSend.searchParams.append("token", token);
        }
    }
    const response = await fetch(urlToSend.toString(), {
        body: usePost ? data : undefined,
        method: usePost ? "POST" : "GET"
    });
    const result = await response.json();
    const error = result.error;
    if (error) {
        throw typeof error === "string" ? new Error(error) : error;
    }
    return result;
};

/**
 * Send a request to get data for `url`. This request will not include a token to avoid token leak
 */
const getServiceUrlResponse = async (url, portal) => {
    var _a;
    try {
        return { result: await requestFetch(url, portal, { addTokenManually: false }) };
    }
    catch (error) {
        const tokenRequiredMessage = "token required";
        if ((_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(tokenRequiredMessage)) {
            return { error: { code: "tokenRequired" } };
        }
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
async function getRelatedItems(itemId, portal, { relationshipType, direction }) {
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}content/items/${itemId}/relatedItems`;
    return await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, { relationshipType, direction });
}

const isHostedService = (typeKeywords, type) => type === "Feature Service" && typeKeywords.includes("Hosted Service");



//# sourceMappingURL=service-8c2c4241.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/string-58a5fef3.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/string-58a5fef3.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ cleanSearchTerm)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


function cleanSearchTerm(term = "") {
    // sanitize input if it contains html
    const sanitizedSearchTerm = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.s)(term);
    // escape question marks, angle brackets, square brackets, etc
    const escapedTerm = sanitizedSearchTerm.replace(/[<>\/\\[\]\?]/g, "\\$&");
    return escapedTerm.trim();
}



//# sourceMappingURL=string-58a5fef3.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/thumbnail-bcb89e69.js":
/*!***************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/thumbnail-bcb89e69.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getTags),
/* harmony export */   b: () => (/* binding */ getHighlights),
/* harmony export */   c: () => (/* binding */ cleanFilters),
/* harmony export */   d: () => (/* binding */ defaultGeometries),
/* harmony export */   e: () => (/* binding */ getProvisionedListings),
/* harmony export */   f: () => (/* binding */ getDefaultThumbnail),
/* harmony export */   g: () => (/* binding */ getItemThumbnail),
/* harmony export */   h: () => (/* binding */ getAdjustedThumbnail),
/* harmony export */   i: () => (/* binding */ isPortalViewingArcGISOnline),
/* harmony export */   j: () => (/* binding */ isBlankImage),
/* harmony export */   k: () => (/* binding */ fetchPreviewItem),
/* harmony export */   q: () => (/* binding */ queryItems)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./service-8c2c4241.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/service-8c2c4241.js");
/* harmony import */ var _user_3ea69c3a_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./user-3ea69c3a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-3ea69c3a.js");
/* harmony import */ var _query_d62660d4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./query-d62660d4.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/query-d62660d4.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./api-2e3a136f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/api-2e3a136f.js");
/* harmony import */ var _string_58a5fef3_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./string-58a5fef3.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/string-58a5fef3.js");
/* harmony import */ var _item_c58ffced_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./item-c58ffced.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-c58ffced.js");
/* harmony import */ var _server_item_8d384796_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./server-item-8d384796.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/server-item-8d384796.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */











const defaultGeometries = ["nonspatial", "point", "polygon", "multipoint", "polyline"];
let abortController;
function getTags(response, knownTags, activeTags) {
    var _a;
    const tagCounts = {};
    (_a = response.results) === null || _a === void 0 ? void 0 : _a.forEach((item) => {
        item.tags.forEach((tag) => {
            if (tag) {
                tagCounts[tag] = (tagCounts[tag] || 0) + 1;
            }
        });
    });
    const newTags = Object.entries(tagCounts)
        .sort((a, b) => b[1] - a[1])
        .map(([tag]) => tag);
    return (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_5__.b)([...(knownTags || []), ...(newTags || []), ...(activeTags || [])]);
}
async function queryItems({ portal, query, user, store, config, allowedSubscriptionContentTypes, groupId }) {
    var _a, _b, _c, _d, _e, _f, _g;
    let restBase = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.g)(portal);
    let options = {};
    const { num, start, sortOrder, sortField, filters, baseQuery, baseFilter, searchTerm, bucket, allowedGeometries } = query;
    // if a recycle bin request is in flight, cancel it
    if (abortController === null || abortController === void 0 ? void 0 : abortController.signal) {
        abortController.abort();
    }
    if (store.state.recycleBin) {
        abortController = new AbortController();
        return bucket === "my"
            ? fetchUserRecycleBinContent({ query, portal, user })
            : fetchOrgRecycleBinContent({ query, portal });
    }
    // TODO: set the groupId(s) in the store outside of the following called functions
    // https://devtopia.esri.com/WebGIS/arcgis-app-components/pull/4731#discussion_r1039570
    const group = groupId ||
        (bucket === "group" && ((_a = filters === null || filters === void 0 ? void 0 : filters.group) === null || _a === void 0 ? void 0 : _a.id) && ((_b = filters === null || filters === void 0 ? void 0 : filters.group) === null || _b === void 0 ? void 0 : _b.group) !== "all" && ((_c = filters === null || filters === void 0 ? void 0 : filters.group) === null || _c === void 0 ? void 0 : _c.group)) ||
        (bucket === "living atlas" && ((_d = store === null || store === void 0 ? void 0 : store.state.livingAtlasGroupId) !== null && _d !== void 0 ? _d : (await getLivingAtlasGroupId(portal, store)))) ||
        (bucket === "living atlas analysis" &&
            ((_e = store === null || store === void 0 ? void 0 : store.state.livingAtlasAnalysisGroupId) !== null && _e !== void 0 ? _e : (await getLivingAtlasAnalysisGroupId(portal, store))));
    if (bucket === "subscription content") {
        return getSubscriptionContent(portal, user, allowedSubscriptionContentTypes);
    }
    // if the portal allows it, and we're looking at the "online" bucket, use the online search endpoint
    if (await isPortalViewingArcGISOnline(portal, bucket)) {
        restBase = "https://www.arcgis.com/sharing/rest/";
        options.addTokenManually = false;
    }
    const groupPath = group ? `content/groups/${group}/` : "";
    const url = `${restBase}${groupPath}search`;
    const geometryType = getGeometryQuery(allowedGeometries, portal);
    const filterIds = Object.keys(filters || {});
    const contentArea = bucket ? await getBucketQuery({ bucket, user, portal, store, filters }) : "";
    const term = searchTerm ? `(${(0,_string_58a5fef3_js__WEBPACK_IMPORTED_MODULE_7__.c)(searchTerm)}) ` : "";
    const enriched = !!((config === null || config === void 0 ? void 0 : config.semanticSearchEnabled) && ((_f = portal === null || portal === void 0 ? void 0 : portal.portalProperties) === null || _f === void 0 ? void 0 : _f.semanticSearchEnabled)) || (user && !user.orgId);
    const baseParams = Object.assign(Object.assign(Object.assign({}, (baseFilter ? { filter: `${baseFilter}` } : {})), (enriched ? { enriched: true } : {})), { q: `${baseQuery || ""} ${geometryType} ${contentArea} ${term} ${_query_d62660d4_js__WEBPACK_IMPORTED_MODULE_4__.H}`, displaySublayers: true, displayHighlights: true });
    const categories = [];
    const queryParams = filterIds.reduce((params, key) => {
        const { param, value, additionalParams } = filters[key];
        // discard filters from hidden buckets
        if ((bucket && key === "group" && bucket !== "group") ||
            // if we're using the group endpoint, don't also use the group id filter
            (key === "group" && groupPath) ||
            (key === "folder" && bucket !== "my") ||
            (key === "region" && !["living atlas", "living atlas analysis"].includes(bucket))) {
            return params;
        }
        if (key === "categories" && value) {
            categories.push(filters[key].category);
        }
        if (key === "region" && value) {
            categories.push(filters[key].categoryValue);
        }
        const filterParam = param === "categories" ? {} : { [param]: `${params[param] || ""} ${value}` };
        return Object.assign(Object.assign(Object.assign({}, params), filterParam), (additionalParams !== null && additionalParams !== void 0 ? additionalParams : {}));
    }, baseParams);
    const params = Object.assign(Object.assign({ num,
        start }, (sortField === "relevance"
        ? {}
        : {
            sortField,
            sortOrder
        })), (queryParams || {}));
    const categoryParam = categories.length
        ? categories.map((category) => `categories=${JSON.stringify([category])}`).join("&")
        : "";
    const divider = categories.length ? "?" : "";
    try {
        const response = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.r)(`${url}${divider}${categoryParam}`, params, options);
        return Object.assign(Object.assign({}, response), { queryParams: params });
    }
    catch (error) {
        // really what we should do is completely remove the token from our request function
        // it's not needed and causes a lot of things to not work.
        // for a patch, though, instead we'll check for the error that should trigger the log in
        // and just disable adding the token so the jsapi will call getCredential
        if (((_g = error === null || error === void 0 ? void 0 : error.details) === null || _g === void 0 ? void 0 : _g.httpStatus) === 498 && (error === null || error === void 0 ? void 0 : error.message) === "Invalid token.") {
            const response = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.r)(`${url}${divider}${categoryParam}`, params, Object.assign(Object.assign({}, options), { addTokenManually: false }));
            return Object.assign(Object.assign({}, response), { queryParams: params });
        }
    }
}
function getGeometryQuery(geometries, portal) {
    // if undeclared or we're using all of them, no need to query,
    // additionally, enterprise does not support sublayer indexing
    if (!geometries || geometries.length === (defaultGeometries === null || defaultGeometries === void 0 ? void 0 : defaultGeometries.length) || (portal === null || portal === void 0 ? void 0 : portal.isPortal)) {
        return "";
    }
    const types = geometries.map((geometry) => `"${geometry}"`).join(" OR ");
    return `((-typekeywords:"Hosted Service") OR (typekeywords:"Hosted Service" AND geometrytype:(${types})))`;
}
function getHighlights(response, config) {
    if (!config.deepLayerSearchEnabled) {
        return {};
    }
    const highlights = {};
    (response.highlights || []).forEach((highlight) => {
        var _a;
        const item = (_a = response.results) === null || _a === void 0 ? void 0 : _a.find((item) => item.id === highlight.id);
        if (!(item === null || item === void 0 ? void 0 : item.sublayers)) {
            return;
        }
        const highlightedFields = Object.keys(highlight)
            .filter((key) => key !== "id" && key.includes("sublayers."))
            .reduce((acc, key) => {
            acc[key.replace("sublayers.", "")] = highlight[key].map((value) => value.replaceAll("<em>", "").replaceAll("</em>", ""));
            return acc;
        }, {});
        const sublayers = item.sublayers
            .filter((sublayer) => {
            return Object.keys(sublayer).some((key) => {
                var _a;
                return (_a = highlightedFields[key]) === null || _a === void 0 ? void 0 : _a.some((value) => sublayer[key].includes(value));
            });
        })
            .map((sublayer) => sublayer.id);
        highlights[highlight.id] = Object.assign(Object.assign({}, highlight), { sublayers });
    });
    return highlights;
}
async function getLivingAtlasGroupId(portal, store) {
    var _a, _b;
    const response = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.q)(
    // We must set sort here to make sure the correct living atlas group comes first in case of multiple
    // @ts-ignore - this does exist on 4.x Portals, their types are wrong
    { q: portal.livingAtlasGroupQuery, num: 1, sortField: "title", sortOrder: "asc" }, portal);
    const id = ((_b = (_a = response.results) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.id) || "";
    // TODO: Move to set outside function to avoid side-effects / argument mutation & combine functions
    if (store) {
        store.state.livingAtlasGroupId = id;
    }
    return id;
}
async function getLivingAtlasAnalysisGroupId(portal, store) {
    var _a, _b;
    const response = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.q)({
        q: getLivingAtlasAnalysisGroupQuery(portal),
        num: 1,
        sortField: "title",
        sortOrder: "asc"
    }, portal);
    const id = ((_b = (_a = response.results) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.id) || "";
    // TODO: Move to set outside function to avoid side-effects / argument mutation & combine functions
    if (store) {
        store.state.livingAtlasAnalysisGroupId = id;
    }
    return id;
}
/**
 * Formats the correct analysis living atlas query based on portal configuration
 * @param {Portal} portal
 * @returns {string}
 */
function getLivingAtlasAnalysisGroupQuery(portal) {
    // Use `esri_livingatlas` in enterprise and `esri` in online
    const groupOwner = portal.isPortal === true ? "esri_livingatlas" : "esri";
    return `title:"Living Atlas Analysis Layers" AND owner:${groupOwner}`;
}
async function getBucketQuery({ bucket, user, portal, filters }) {
    switch (bucket) {
        case "my":
            return `owner: ${user.username}`;
        case "org":
            return `orgid:${portal.id} ${portal.isPortal ? `-owner:esri_apps` : ""}`;
        case "favorites":
            const favoritesGroupId = await (0,_user_3ea69c3a_js__WEBPACK_IMPORTED_MODULE_3__.e)();
            return `group: ${favoritesGroupId}`;
        case "group":
            if (!(filters === null || filters === void 0 ? void 0 : filters.group) || (filters === null || filters === void 0 ? void 0 : filters.group.group) === "all") {
                const groups = await (0,_user_3ea69c3a_js__WEBPACK_IMPORTED_MODULE_3__.d)();
                return `group:(${groups === null || groups === void 0 ? void 0 : groups.map(({ id }) => id).join(" OR ")})`;
            }
        default:
            return "";
    }
}
async function isPortalViewingArcGISOnline(portal, bucket) {
    var _a;
    if ((portal === null || portal === void 0 ? void 0 : portal.isPortal) && bucket === "all") {
        const settings = await (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_6__.j)(portal);
        if ((_a = settings === null || settings === void 0 ? void 0 : settings.portalConfigProperties) === null || _a === void 0 ? void 0 : _a.searchArcGISOnlineEnabled) {
            return true;
        }
    }
    return false;
}
async function getProvisionedListings(user, portal) {
    if (!user || !portal) {
        return [];
    }
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.f)(async () => {
        const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.g)(portal)}community/users/${user.username}/provisionedListings`;
        return (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_6__.k)(url, {}, "provisionedListings");
    }, "provisionedListings", `${portal.id}-${user.username}`);
}
async function unwrapRelatedItems(id, portal) {
    var _a;
    const response = await (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_2__.g)(id, portal, {
        relationshipType: "Listed2ImplicitlyListed",
        direction: "forward"
    });
    return (_a = response.relatedItems) !== null && _a !== void 0 ? _a : [];
}
function filterSubscriptionContent(item, allowedSubscriptionContentTypes) {
    // by default, user will see just layers (the set used in the map viewer)
    allowedSubscriptionContentTypes !== null && allowedSubscriptionContentTypes !== void 0 ? allowedSubscriptionContentTypes : (allowedSubscriptionContentTypes = [
        "Map Service",
        "Image Service",
        "Feature Service",
        "Stream Service",
        "Vector Tile Service",
        "WMS",
        "WFS",
        "WMTS",
        "KML",
        "Feature Collection",
        "Feed"
    ]);
    return allowedSubscriptionContentTypes.includes(item.type);
}
async function getSubscriptionContent(portal, user, allowedItemTypes) {
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.f)(async () => {
        const listings = await getProvisionedListings(user, portal);
        if (!(listings === null || listings === void 0 ? void 0 : listings.length)) {
            return { total: 0, results: [], start: -1, num: 100, nextStart: 0 };
        }
        const ids = listings === null || listings === void 0 ? void 0 : listings.map((listing) => listing.itemId);
        const items = await Promise.all(ids.map((id) => (0,_item_c58ffced_js__WEBPACK_IMPORTED_MODULE_8__.c)(id, portal)));
        const relatedItemsArrays = await Promise.all(ids === null || ids === void 0 ? void 0 : ids.map((id) => unwrapRelatedItems(id, portal)));
        const allItems = relatedItemsArrays
            .reduce((all, relatedItems) => {
            return all.concat(relatedItems);
        }, items)
            .filter((item) => filterSubscriptionContent(item, allowedItemTypes));
        return {
            total: allItems.length,
            results: allItems,
            start: allItems.length ? 1 : 0,
            num: 100,
            nextStart: 0
        };
    }, "subscriptionContent", `${portal.id}-${user.username}`);
}
async function fetchRecycleBinContent(query, url) {
    return new Promise(async (resolve, reject) => {
        var _a;
        (_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.addEventListener("abort", () => {
            reject(new DOMException("Aborted", "AbortError"));
        });
        const { start, num, sortField, sortOrder } = query;
        const response = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.r)(url, {
            foldersContent: true,
            inRecycleBin: true,
            start,
            num,
            sortField,
            sortOrder
        });
        return resolve(Object.assign(Object.assign({}, response), { results: response.items, queryParams: query }));
    });
}
async function fetchUserRecycleBinContent({ query, portal, user }) {
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.g)(portal)}content/users/${user.username}/`;
    return fetchRecycleBinContent(query, url);
}
async function fetchOrgRecycleBinContent({ query, portal }) {
    const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.g)(portal)}content/portals/${portal.id}/`;
    return fetchRecycleBinContent(query, url);
}
async function fetchPreviewItem(item, portal, user, store) {
    var _a;
    const portalToOnline = await isPortalViewingArcGISOnline(portal, store.state.bucket);
    const url = portalToOnline
        ? `https://www.arcgis.com/sharing/rest/content/items/${item.id}`
        : (0,_server_item_8d384796_js__WEBPACK_IMPORTED_MODULE_9__.g)(item.id, portal);
    const options = portalToOnline || !user ? { disableIdentityLookup: true, addTokenManually: false } : {};
    try {
        return { result: await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.r)(url, {}, options) };
    }
    catch (error) {
        if (((_a = error === null || error === void 0 ? void 0 : error.details) === null || _a === void 0 ? void 0 : _a.messageCode) === "SB_0005") {
            return { error: { code: "disabledSubscription" } };
        }
    }
    return { error: { code: "unhandledError" } };
}
function cleanFilters(filters, bucket) {
    const cleanFilters = Object.assign({}, filters);
    if (bucket !== "my") {
        delete cleanFilters.folder;
    }
    if (bucket !== "group") {
        delete cleanFilters.group;
    }
    return cleanFilters;
}

function getItemThumbnail(portal, item, restBase, noToken) {
    restBase !== null && restBase !== void 0 ? restBase : (restBase = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.g)(portal));
    const token = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.e)(portal);
    const tokenParam = token && !noToken ? `token=${token}` : "";
    const itemUrl = `${restBase}content/items/${item.id}`;
    // @ts-ignore - the 4.x api _does_ include this property
    if (item.thumbnail) {
        // 4.x items have a thumbnail url which includes the token, so just use that
        if (item.thumbnailUrl) {
            return item.thumbnailUrl;
        }
        return `${itemUrl}/info/${item.thumbnail}?w=400${token ? "&" : ""}${tokenParam}`;
    }
    else if (item.type === "Image" && !noToken) {
        return `${itemUrl}/data?${tokenParam}`;
    }
    return getDefaultThumbnail(item);
}
/** This is just like getItemThumbnail but it will use an arcgis.com base in certain portal conditions */
async function getAdjustedThumbnail(portal, item, bucket) {
    if (await isPortalViewingArcGISOnline(portal, bucket)) {
        return getItemThumbnail(portal, item, "https://www.arcgis.com/sharing/rest/", true);
    }
    return getItemThumbnail(portal, item);
}
function getDefaultThumbnail(item) {
    var _a;
    const fileName = ((_a = item.type) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== "notebook" ? "default_thumb.png" : "notebook-thumb.png";
    return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/arcgis-item-browser-card-thumbnail/${fileName}`);
}
/**
 * Checks if the given image is blank.
 * Drawing the image on canvas, get the image data,
 * generate a hash and compare this against a known blank hash.
 */
function isBlankImage(image) {
    if (!image) {
        return true;
    }
    const canvas = document.createElement("canvas");
    const context = canvas.getContext("2d");
    canvas.height = image.naturalHeight;
    canvas.width = image.naturalWidth;
    context.fillStyle = "#ffffff";
    context.fillRect(0, 0, image.naturalWidth, image.naturalHeight);
    const blank = canvas.toDataURL("image/jpeg");
    context.drawImage(image, 0, 0);
    return blank === canvas.toDataURL("image/jpeg");
}



//# sourceMappingURL=thumbnail-bcb89e69.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-3ea69c3a.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-3ea69c3a.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getFolderFromId),
/* harmony export */   b: () => (/* binding */ getHomeFolderForUser),
/* harmony export */   c: () => (/* binding */ createFolder),
/* harmony export */   d: () => (/* binding */ getSignedInUsersGroups),
/* harmony export */   e: () => (/* binding */ getSignedInUsersFavoritesGroup),
/* harmony export */   f: () => (/* binding */ fetchUser),
/* harmony export */   g: () => (/* binding */ getFolders),
/* harmony export */   u: () => (/* binding */ updateFolder)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



async function fetchUser(username, portal) {
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}/community/users/${username}`);
}
async function fetchSelf() {
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}/community/self`);
}
async function getSignedInUsersGroups() {
    var _a;
    const user = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user;
    if (!user) {
        return [];
    }
    const self = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(() => fetchSelf(), "communitySelf", user.username);
    return (_a = self === null || self === void 0 ? void 0 : self.groups) !== null && _a !== void 0 ? _a : [];
}
async function getSignedInUsersFavoritesGroup() {
    const user = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user;
    if (!user) {
        return null;
    }
    const self = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(() => fetchSelf(), "communitySelf", user.username);
    return self.favGroupId;
}
function getUserContentUrl(user, portal) {
    var _a;
    return (_a = user === null || user === void 0 ? void 0 : user.userContentUrl) !== null && _a !== void 0 ? _a : `${portal === null || portal === void 0 ? void 0 : portal.restUrl}/content/users/${user.username}`;
}
async function getUserContent(portalUser) {
    var _a;
    const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user) !== null && _a !== void 0 ? _a : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.user;
    const portal = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal;
    const url = getUserContentUrl(user, portal);
    const response = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, { num: 1 });
    return Promise.resolve(response);
}
async function getFolders(portalUser) {
    var _a;
    const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user) !== null && _a !== void 0 ? _a : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.user;
    const { folders } = await getUserContent(user);
    const { username } = user;
    const sortedFolders = folders.sort((a, b) => a.title.localeCompare(b.title));
    // add the home folder as if it's in the list
    return [{ username, id: username, title: username, created: "now" }, ...sortedFolders];
}
async function getFolderFromId(folderId, portalUser) {
    var _a;
    const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user) !== null && _a !== void 0 ? _a : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.user;
    const folders = await getFolders(user);
    return folders.find((folder) => folder.id === folderId);
}
function getHomeFolderForUser(username) {
    return { username, id: username, title: username, created: "now" };
}
async function createFolder(folderName, portalUser) {
    var _a;
    const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user) !== null && _a !== void 0 ? _a : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.user;
    const url = `${getUserContentUrl(user, _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal)}/createFolder`;
    const folderResponse = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, { title: folderName }, {}, "post");
    return folderResponse;
}
async function updateFolder(id, newTitle, portalUser) {
    var _a;
    const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user) !== null && _a !== void 0 ? _a : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.user;
    const url = `${getUserContentUrl(user, _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal)}/${id}/updateFolder`;
    try {
        const result = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, { newTitle }, {}, "post");
        return { result };
    }
    catch (error) {
        return { error: { code: "unhandledError" } };
    }
}



//# sourceMappingURL=user-3ea69c3a.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,