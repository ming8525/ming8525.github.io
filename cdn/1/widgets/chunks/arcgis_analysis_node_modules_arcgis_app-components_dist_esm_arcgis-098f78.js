"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-098f78"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-image-display-order.entry.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-image-display-order.entry.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_image_display_order: () => (/* binding */ ArcgisImageDisplayOrder)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */







const defaultMosaicMethods = [
    "center",
    "northwest",
    "lock-raster",
    "attribute",
    "nadir",
    "viewpoint",
    "seamline",
    "none"
];
const defaultMosaicOperators = ["first", "last", "min", "max", "mean", "blend", "sum"];
const allowedFieldTypeList = [
    "double",
    "single",
    "long",
    "integer",
    "small-integer",
    "oid",
    "date",
    "big-integer",
    "date-only"
];

const mosaicMethodMapping = (method) => {
    method = method.toLowerCase();
    switch (method) {
        case "lockraster":
        case "lock-raster":
            return "lock-raster";
        case "byattribute":
            return "attribute";
        default:
            return method;
    }
};
const mosaicMethodToOperatorsMapping = (mosaicMethod) => {
    switch (mosaicMethod) {
        case "seamline":
            return ["first", "blend"];
        default:
            return defaultMosaicOperators;
    }
};

const arcgisImageDisplayOrderCss = ":host{display:flex;height:100%}.image-display-order-lock-input{margin-top:var(--arcgis-app-cap-spacing-half)}";

const ArcgisImageDisplayOrder = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisImageDisplayOrderClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisImageDisplayOrderClose", 7);
        this.mosaicMethodList = defaultMosaicMethods;
        this.attributeFieldList = [];
        this.handleMosaicMethodChange = (event) => {
            var _a, _b, _c;
            const target = event.target;
            const updatedMethod = (_a = target.selectedOption) === null || _a === void 0 ? void 0 : _a.value;
            const { lockRasterIds: activeLockRasterIds, operation: activeOperation } = this.activeMosaicRule;
            const updatedSortField = updatedMethod === "attribute" ? (_c = (_b = this.attributeFieldList) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.name : null;
            const updatedLockRasterIds = updatedMethod !== "lock-raster" ? null : activeLockRasterIds;
            const updatedAscending = updatedMethod === "seamline" ? null : true;
            const seamlineOperators = mosaicMethodToOperatorsMapping("seamline");
            const updatedOperation = updatedMethod === "seamline" && seamlineOperators.includes(activeOperation)
                ? activeOperation
                : "first";
            this.activeMosaicRule.method = updatedMethod;
            this.activeMosaicRule.sortField = updatedSortField;
            this.activeMosaicRule.sortValue = null;
            this.activeMosaicRule.lockRasterIds = updatedLockRasterIds;
            this.activeMosaicRule.ascending = updatedAscending;
            this.activeMosaicRule.operation = updatedOperation;
            this.updateActiveMosaicRule();
        };
        this.handleAttributeFieldChange = (event) => {
            var _a;
            const target = event.target;
            const updatedSortField = (_a = target.selectedOption) === null || _a === void 0 ? void 0 : _a.value;
            this.activeMosaicRule.sortField = updatedSortField;
            this.updateActiveMosaicRule();
        };
        this.debouncedHandleAttributeValueChange = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__.d)((sortValue) => {
            this.activeMosaicRule.sortValue = sortValue;
            this.updateActiveMosaicRule();
        }, 300);
        this.handleDateAttributeValueChange = (event) => {
            const target = event.target;
            const targetValue = target === null || target === void 0 ? void 0 : target.value;
            const updatedSortValue = targetValue.replace(/\-/g, "/");
            this.debouncedHandleAttributeValueChange(updatedSortValue);
        };
        this.handleAttributeValueChange = (event) => {
            const target = event.target;
            const targetValue = target === null || target === void 0 ? void 0 : target.value;
            const updatedSortValue = +targetValue;
            this.debouncedHandleAttributeValueChange(updatedSortValue);
        };
        this.debouncedHandleRasterIDsChange = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__.d)((rasterIds) => {
            this.activeMosaicRule.lockRasterIds = rasterIds;
            this.updateActiveMosaicRule();
        }, 300);
        this.handleRasterIDsChange = (event) => {
            const target = event.target;
            const updatedRasterIds = target === null || target === void 0 ? void 0 : target.value;
            const commaSeparatedNumRegExp = /^[0-9]+(,[0-9]+)*$/;
            if (!commaSeparatedNumRegExp.test(updatedRasterIds)) {
                return;
            }
            const updatedLockRasterIds = updatedRasterIds
                .split(",")
                .map((rasterId) => parseInt(rasterId, 10));
            this.debouncedHandleRasterIDsChange(updatedLockRasterIds);
        };
        this.debouncedHandleReverseOrderChange = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_1__.d)((reverseOrder) => {
            this.activeMosaicRule.ascending = !reverseOrder;
            this.updateActiveMosaicRule();
        }, 300);
        this.handleReverseOrderChange = (event) => {
            const target = event.target;
            const updatedReverseOrder = target === null || target === void 0 ? void 0 : target.checked;
            this.debouncedHandleReverseOrderChange(updatedReverseOrder);
        };
        this.handleMosaicOperatorChange = (event) => {
            var _a;
            const target = event.target;
            const updatedOperator = (_a = target.selectedOption) === null || _a === void 0 ? void 0 : _a.value;
            this.activeMosaicRule.operation = updatedOperator;
            this.updateActiveMosaicRule();
        };
        this.handleDone = () => {
            this.arcgisImageDisplayOrderClose.emit("save");
        };
        this.handleCancel = () => {
            this.layer.mosaicRule = this.originalMosaicRule;
            this.activeMosaicRule = this.originalMosaicRule.clone();
            this.arcgisImageDisplayOrderClose.emit("cancel");
            return;
        };
        this.layer = undefined;
        this.dismissible = false;
        this.activeMosaicRule = null;
    }
    watchStateHandler(newMosaicRule, oldMosaicRule) {
        if (!newMosaicRule || !oldMosaicRule) {
            return;
        }
        this.layer.mosaicRule = newMosaicRule;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        const [strings] = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement);
        this.strings = strings;
        this.init();
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.hostElement) === "rtl";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: this.strings.imageDisplayOrder, closable: this.dismissible, loading: !this.activeMosaicRule, onCalcitePanelClose: this.handleCancel, class: {
                panel: true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_3__.C.rtl]: rtl
            } }, this.renderMosaicRule(), this.renderFooterActions())));
    }
    renderMosaicRule() {
        if (!this.activeMosaicRule) {
            return null;
        }
        const activeMosaicMethod = this.activeMosaicRule.method;
        const shouldRenderAttributeFilter = activeMosaicMethod === "attribute";
        const shouldRenderRasterIds = activeMosaicMethod === "lock-raster";
        const shouldRenderReverseOrder = activeMosaicMethod !== "seamline";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: "", open: true }, this.renderMosaicMethodSelection(), shouldRenderAttributeFilter && this.renderAttributeFilter(), shouldRenderRasterIds && this.renderRasterId(), shouldRenderReverseOrder && this.renderReverseOrder(), this.renderMosaicOperatorSelection()));
    }
    renderMosaicMethodSelection() {
        const { method: activeMethod } = this.activeMosaicRule;
        const { mosaicMethod, componentLabel, mosaicMethodLabel } = this.strings;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mosaicMethod, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: componentLabel["methodSelect"], onCalciteSelectChange: this.handleMosaicMethodChange }, this.mosaicMethodList.map((method) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { key: method, value: method, label: mosaicMethodLabel[method], selected: method === activeMethod }))))));
    }
    renderAttributeFilter() {
        var _a;
        const { sortField } = this.activeMosaicRule;
        const currentSortFieldType = (_a = this.attributeFieldList.find(({ name }) => name === sortField)) === null || _a === void 0 ? void 0 : _a.type;
        const shouldRenderDateAttributeFilter = currentSortFieldType === "date" || currentSortFieldType === "date-only";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderAttributeMethodSelection(), shouldRenderDateAttributeFilter
            ? this.renderAttributeDatePicker()
            : this.renderAttributeSortValue()));
    }
    renderAttributeMethodSelection() {
        const { sortField: activeSortField } = this.activeMosaicRule;
        const { attribute, componentLabel } = this.strings;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, attribute, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: componentLabel["attributeFieldSelect"], onCalciteSelectChange: this.handleAttributeFieldChange }, this.attributeFieldList.map(({ name, alias }) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { key: name, value: name, label: alias, selected: name === activeSortField }))))));
    }
    renderAttributeDatePicker() {
        const { sortValue } = this.activeMosaicRule;
        const { highestPriorityValue } = this.strings;
        const datePickerValue = (sortValue === null || sortValue === void 0 ? void 0 : sortValue.toString().indexOf("/")) > -1 ? sortValue.replace(/\//g, "-") : "";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, highestPriorityValue, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-date-picker", { placement: "bottom-end", "overlay-positioning": "fixed", value: datePickerValue, onCalciteInputDatePickerChange: this.handleDateAttributeValueChange })));
    }
    renderAttributeSortValue() {
        const { sortValue } = this.activeMosaicRule;
        const { highestPriorityValue } = this.strings;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, highestPriorityValue, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "number", step: 0.001, value: sortValue === null || sortValue === void 0 ? void 0 : sortValue.toString(), onCalciteInputInput: this.handleAttributeValueChange })));
    }
    renderRasterId() {
        const { lockRasterIds } = this.activeMosaicRule;
        const rasterIdsString = lockRasterIds === null || lockRasterIds === void 0 ? void 0 : lockRasterIds.join(",");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.imageIDs, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { class: "image-display-order-lock-input", placeholder: this.strings.useCommaDelimiter, value: rasterIdsString, onCalciteInputInput: this.handleRasterIDsChange })));
    }
    renderReverseOrder() {
        const { ascending } = this.activeMosaicRule;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between" }, this.strings.reverserOrder, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { checked: !ascending, onCalciteSwitchChange: this.handleReverseOrderChange })));
    }
    renderMosaicOperatorSelection() {
        const { method, operation: activeOperator } = this.activeMosaicRule;
        const mosaicOperatorList = mosaicMethodToOperatorsMapping(method);
        const { mosaicOperator, componentLabel, mosaicOperatorLabel } = this.strings;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, mosaicOperator, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: componentLabel["operatorSelect"], onCalciteSelectChange: this.handleMosaicOperatorChange }, mosaicOperatorList.map((operator) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { key: operator, value: operator, label: mosaicOperatorLabel[operator], selected: operator === activeOperator }))))));
    }
    renderFooterActions() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, this.renderDoneButton(), this.renderCancelButton()));
    }
    renderDoneButton() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", appearance: "solid", color: "blue", width: "half", disabled: !this.activeMosaicRule, onClick: this.handleDone }, this.strings.done));
    }
    renderCancelButton() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", appearance: "outline-fill", width: "half", disabled: !this.activeMosaicRule, onClick: this.handleCancel }, this.strings.cancel));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    async init() {
        await this.layer.load();
        this.originalMosaicRule = this.getOriginalMosaicRule();
        this.activeMosaicRule = this.originalMosaicRule.clone();
        this.mosaicMethodList = this.getMosaicMethodList();
        this.attributeFieldList = this.getAttributeFieldList();
    }
    updateActiveMosaicRule() {
        this.activeMosaicRule = this.activeMosaicRule.clone();
    }
    getOriginalMosaicRule() {
        const { mosaicRule, defaultMosaicRule } = this.layer;
        return mosaicRule !== null && mosaicRule !== void 0 ? mosaicRule : defaultMosaicRule;
    }
    getAllowedAttributeFieldList() {
        const { fields: layerFields, sourceJSON } = this.layer;
        const allowedFieldList = layerFields.filter(({ type }) => allowedFieldTypeList.includes(type));
        allowedFieldList.sort((a, b) => a.alias.localeCompare(b.alias));
        const { sortableFields } = sourceJSON || {};
        if (!(sortableFields === null || sortableFields === void 0 ? void 0 : sortableFields.length)) {
            return allowedFieldList;
        }
        const sourceJSONSortableFields = sortableFields === null || sortableFields === void 0 ? void 0 : sortableFields.split(",").map((field) => field.toLowerCase());
        const fieldList = allowedFieldList.filter((layerField) => sourceJSONSortableFields.includes(layerField.name.toLocaleLowerCase()));
        return fieldList;
    }
    filterAttributeFieldList(attributeFieldList) {
        var _a, _b;
        const shouldFilterCategory = ((_b = (_a = this.layer.sourceJSON) === null || _a === void 0 ? void 0 : _a.sortField) === null || _b === void 0 ? void 0 : _b.toLowerCase()) !== "category";
        if (!shouldFilterCategory) {
            return attributeFieldList;
        }
        return attributeFieldList.filter((layerField) => layerField.name.toLocaleLowerCase() !== "category");
    }
    getAttributeFieldList() {
        const allowedAttributeFieldList = this.getAllowedAttributeFieldList();
        const filteredAttributeFieldList = this.filterAttributeFieldList(allowedAttributeFieldList);
        return filteredAttributeFieldList;
    }
    getAllowedMosaicMethodList() {
        const { sourceJSON } = this.layer;
        if (!sourceJSON) {
            return defaultMosaicMethods;
        }
        const { currentVersion, allowedMosaicMethods: sourceJSONAllowedMosaicMethods } = sourceJSON;
        const isValidVersion = currentVersion && currentVersion >= 10.1;
        const hasAllowedMosaciMethods = (sourceJSONAllowedMosaicMethods === null || sourceJSONAllowedMosaicMethods === void 0 ? void 0 : sourceJSONAllowedMosaicMethods.length) > 1;
        if (!isValidVersion || !hasAllowedMosaciMethods) {
            return defaultMosaicMethods;
        }
        const allowedMosaicMethodList = sourceJSONAllowedMosaicMethods
            .split(",")
            .map((method) => mosaicMethodMapping(method.toLowerCase()));
        const noneMosaicMethod = "none";
        if (!allowedMosaicMethodList.includes(noneMosaicMethod)) {
            allowedMosaicMethodList.push(noneMosaicMethod);
        }
        return allowedMosaicMethodList;
    }
    filteredMosaicMethodList(mosaicMethodList) {
        const viewpointMosaicMethod = "viewpoint";
        return mosaicMethodList.filter((method) => method !== viewpointMosaicMethod);
    }
    getMosaicMethodList() {
        const allowedMosaicMethods = this.getAllowedMosaicMethodList();
        const filteredMosaicMethods = this.filteredMosaicMethodList(allowedMosaicMethods);
        return filteredMosaicMethods;
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "activeMosaicRule": ["watchStateHandler"]
    }; }
};
ArcgisImageDisplayOrder.style = arcgisImageDisplayOrderCss;



//# sourceMappingURL=arcgis-image-display-order.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,