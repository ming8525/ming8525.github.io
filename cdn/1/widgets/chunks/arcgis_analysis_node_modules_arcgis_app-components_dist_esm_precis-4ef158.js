"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_precis-4ef158"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/precision-06a73672.js":
/*!***************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/precision-06a73672.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getCurrentPrecisionValue),
/* harmony export */   b: () => (/* binding */ buildPrecisionsList),
/* harmony export */   g: () => (/* binding */ getStopPrecision),
/* harmony export */   u: () => (/* binding */ updateValuesWithPrecision)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




function updateValuesWithPrecision(precision) {
    const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const infos = modules.esriLang.clone(renderer.classBreakInfos);
    renderer.classBreakInfos = [];
    infos.forEach((info, idx) => {
        info = _updateMinMax(info, precision, idx, idx === 0 ? "first" : idx === infos.length - 1 ? "last" : undefined);
        //renderer.removeClassBreakInfo(info.minValue, info.maxValue);
        renderer.addClassBreakInfo({
            minValue: info.minValue,
            maxValue: info.maxValue,
            symbol: info.symbol,
            label: info.label
        });
    });
}
function buildPrecisionsList(decimalPlaces) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const infos = renderer.classBreakInfos;
    let places = decimalPlaces;
    let minInfoRange = Infinity;
    infos.forEach((info) => {
        if (!places) {
            places = Math.max(_getDecimalPrecision(info.minValue), _getDecimalPrecision(info.maxValue));
        }
        minInfoRange = Math.min(minInfoRange, info.maxValue - info.minValue);
    });
    const values = [];
    if (minInfoRange > 10000000) {
        values.push(10000000);
        values.push(1000000);
        values.push(100000);
        values.push(10000);
        values.push(1000);
        values.push(100);
        values.push(10);
        if (places > 0) {
            values.push(1);
        }
        if (places > 1) {
            values.push(0.1);
        }
        if (places > 2) {
            values.push(0.01);
        }
    }
    else if (minInfoRange > 1000000) {
        values.push(1000000);
        values.push(100000);
        values.push(10000);
        values.push(1000);
        values.push(100);
        values.push(10);
        if (places > 0) {
            values.push(1);
        }
        if (places > 1) {
            values.push(0.1);
        }
        if (places > 2) {
            values.push(0.01);
        }
    }
    else if (minInfoRange > 100000) {
        values.push(100000);
        values.push(10000);
        values.push(1000);
        values.push(100);
        values.push(10);
        if (places > 0) {
            values.push(1);
        }
        if (places > 1) {
            values.push(0.1);
        }
        if (places > 2) {
            values.push(0.01);
        }
    }
    else if (minInfoRange > 10000) {
        values.push(10000);
        values.push(1000);
        values.push(100);
        values.push(10);
        if (places > 0) {
            values.push(1);
        }
        if (places > 1) {
            values.push(0.1);
        }
        if (places > 2) {
            values.push(0.01);
        }
    }
    else if (minInfoRange > 1000) {
        values.push(1000);
        values.push(100);
        values.push(10);
        if (places > 0) {
            values.push(1);
        }
        if (places > 1) {
            values.push(0.1);
        }
        if (places > 2) {
            values.push(0.01);
        }
        if (places > 3) {
            values.push(0.001);
        }
    }
    else if (minInfoRange > 100) {
        values.push(100);
        values.push(10);
        if (places > 0) {
            values.push(1);
        }
        if (places > 1) {
            values.push(0.1);
        }
        if (places > 2) {
            values.push(0.01);
        }
        if (places > 3) {
            values.push(0.001);
        }
        if (places > 4) {
            values.push(0.0001);
        }
        if (places > 5) {
            values.push(0.00001);
        }
    }
    else if (minInfoRange > 10) {
        values.push(10);
        if (places > 0) {
            values.push(1);
        }
        if (places > 1) {
            values.push(0.1);
        }
        if (places > 2) {
            values.push(0.01);
        }
        if (places > 3) {
            values.push(0.001);
        }
        if (places > 4) {
            values.push(0.0001);
        }
        if (places > 5) {
            values.push(0.00001);
        }
        if (places > 6) {
            values.push(0.000001);
        }
    }
    else if (minInfoRange > 1) {
        if (places > 0) {
            values.push(1);
        }
        if (places > 1) {
            values.push(0.1);
        }
        if (places > 2) {
            values.push(0.01);
        }
        if (places > 3) {
            values.push(0.001);
        }
        if (places > 4) {
            values.push(0.0001);
        }
        if (places > 5) {
            values.push(0.00001);
        }
        if (places > 6) {
            values.push(0.000001);
        }
    }
    else if (minInfoRange > 0.1) {
        if (places > 1) {
            values.push(0.1);
        }
        if (places > 2) {
            values.push(0.01);
        }
        if (places > 3) {
            values.push(0.001);
        }
        if (places > 4) {
            values.push(0.0001);
        }
        if (places > 5) {
            values.push(0.00001);
        }
        if (places > 6) {
            values.push(0.000001);
        }
    }
    else if (minInfoRange > 0.01) {
        if (places > 2) {
            values.push(0.01);
        }
        if (places > 3) {
            values.push(0.001);
        }
        if (places > 4) {
            values.push(0.0001);
        }
        if (places > 5) {
            values.push(0.00001);
        }
        if (places > 6) {
            values.push(0.000001);
        }
    }
    else if (minInfoRange > 0.001) {
        if (places > 3) {
            values.push(0.001);
        }
        if (places > 4) {
            values.push(0.0001);
        }
        if (places > 5) {
            values.push(0.00001);
        }
        if (places > 6) {
            values.push(0.000001);
        }
        if (places > 7) {
            values.push(0.0000001);
        }
    }
    else if (minInfoRange > 0.0001) {
        if (places > 4) {
            values.push(0.0001);
        }
        if (places > 5) {
            values.push(0.00001);
        }
        if (places > 6) {
            values.push(0.000001);
        }
        if (places > 7) {
            values.push(0.0000001);
        }
        if (places > 8) {
            values.push(0.00000001);
        }
    }
    else if (minInfoRange > 0.00001) {
        if (places > 5) {
            values.push(0.00001);
        }
        if (places > 6) {
            values.push(0.000001);
        }
        if (places > 7) {
            values.push(0.0000001);
        }
        if (places > 8) {
            values.push(0.00000001);
        }
        if (places > 9) {
            values.push(0.000000001);
        }
    }
    return values;
}
function getCurrentPrecisionValue() {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    let precisionValue = 10000000000;
    renderer.classBreakInfos.forEach((info) => {
        precisionValue = Math.min(precisionValue, _getValuePrecision(info.minValue));
        precisionValue = Math.min(precisionValue, _getValuePrecision(info.maxValue));
    });
    return precisionValue;
}
function _updateMinMax(info, precision, pos, type) {
    // type: ["first"|"last"|undefined]
    if ((0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(precision)) {
        /*
        if (renderer.normalizationType === "percent-of-total") {
          if (precision === 0) {
    
          } else if (precision < 1) {
            // to prevent rounding issues
            var divider = Math.round(1/precision);
            if (type === "first") {
              info.minValue = Math.floor(info.minValue/precision)/divider;
            } else {
              info.minValue = Math.round(info.minValue/precision)/divider;
            }
            if (type === "last") {
              info.maxValue = Math.ceil(info.maxValue/precision)/divider;
            } else {
              info.maxValue = Math.round(info.maxValue/precision)/divider;
            }
            info.label = ((pos > 0) ? "> " : "") + String.substitute(this.i18n.percentValue,{num: number.format(info.minValue, {pattern: this.pattern})}) + " " + this.i18n.to + " " + string.substitute(this.i18n.percentValue,{num: number.format(info.maxValue, {pattern: this.pattern})});
          } else {
            if (type === "first") {
              info.minValue = Math.floor(info.minValue/precision)*precision;
            } else {
              info.minValue = Math.round(info.minValue/precision)*precision;
            }
            if (type === "last") {
              info.maxValue = Math.ceil(info.maxValue/precision)*precision;
            } else {
              info.maxValue = Math.round(info.maxValue/precision)*precision;
            }
            info.label = ((pos > 0) ? "> " : "") + string.substitute(this.i18n.percentValue,{num: number.format(info.minValue, {pattern: this.pattern})}) + " " + this.i18n.to + " " + string.substitute(this.i18n.percentValue,{num: number.format(info.maxValue, {pattern: this.pattern})});
          }
        } else {
      */
        if (precision === 0) ;
        else if (precision < 1) {
            // to prevent rounding issues
            const divider = Math.round(1 / precision);
            if (type === "first") {
                info.minValue = Math.floor(info.minValue / precision) / divider;
            }
            else {
                info.minValue = Math.round(info.minValue / precision) / divider;
            }
            if (type === "last") {
                info.maxValue = Math.ceil(info.maxValue / precision) / divider;
            }
            else {
                info.maxValue = Math.round(info.maxValue / precision) / divider;
            }
            info.label = `${pos > 0 ? "> " : ""}${info.minValue.toLocaleString(_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s.fullLocale, {
                maximumSignificantDigits: 15
            })} - ${info.maxValue.toLocaleString(_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s.fullLocale, {
                maximumSignificantDigits: 15
            })}`;
        }
        else {
            if (type === "first") {
                info.minValue = Math.floor(info.minValue / precision) * precision;
            }
            else {
                info.minValue = Math.round(info.minValue / precision) * precision;
            }
            if (type === "last") {
                info.maxValue = Math.ceil(info.maxValue / precision) * precision;
            }
            else {
                info.maxValue = Math.round(info.maxValue / precision) * precision;
            }
            info.label = (pos > 0 ? "> " : "") + info.minValue.toLocaleString() + " - " + info.maxValue.toLocaleString();
        }
        //}
    }
    return info;
}
/*
function disableOptionsBelow(select, val) {

  array.forEach(select.options, function(option) {
    var item = option.item;
    if (item.type[0] !== "select" && parseFloat(item.name[0]) < val) {
      option.disabled = true;
    }
  });
  select.startup();
}

function enableAllOptions(select) {

  array.forEach(select.options, function(option) {
    delete option.disabled;
  });
  select.startup();
},
*/
function _getDecimalPrecision(value) {
    let e = 1;
    while (Math.round(value * e) / e !== value)
        e *= 10;
    return Math.log(e) / Math.LN10;
}
function _getValuePrecision(value) {
    let precision = 0.00000001;
    while (_fixNumber(Math.round(value / precision) * precision) === value) {
        precision *= 10;
    }
    return precision / 10;
}
function _fixNumber(number) {
    // 0.00009999999999999999 -> 0.0001
    // 3.4000000000000004 -> 3.4
    return parseFloat(number.toPrecision(12));
}
function getStopPrecision(stops) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    let precision = 0;
    stops.forEach((info) => {
        if ((0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(info.value)) {
            precision = Math.max(_getDecimalPrecision(_fixNumber(info.value)), precision);
        }
        else {
            if ((0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(info.minValue)) {
                precision = Math.max(_getDecimalPrecision(_fixNumber(info.minValue)), precision);
            }
            if ((0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(info.maxValue)) {
                precision = Math.max(_getDecimalPrecision(_fixNumber(info.maxValue)), precision);
            }
            if ((0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(info.min)) {
                precision = Math.max(_getDecimalPrecision(_fixNumber(info.min)), precision);
            }
            if ((0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(info.max)) {
                precision = Math.max(_getDecimalPrecision(_fixNumber(info.max)), precision);
            }
        }
    });
    // never show more than 3 decimals on slider, unless <see below>
    precision = Math.min(precision, 3);
    // make sure precision fits to range of values
    const first = stops[0];
    const last = stops[stops.length - 1];
    const min = Math.min((_b = (_a = first.minValue) !== null && _a !== void 0 ? _a : first.min) !== null && _b !== void 0 ? _b : first.value, (_d = (_c = last.minValue) !== null && _c !== void 0 ? _c : last.min) !== null && _d !== void 0 ? _d : last.value);
    const max = Math.max((_f = (_e = first.maxValue) !== null && _e !== void 0 ? _e : first.max) !== null && _f !== void 0 ? _f : first.value, (_h = (_g = last.maxValue) !== null && _g !== void 0 ? _g : last.max) !== null && _h !== void 0 ? _h : last.value);
    const range = max - min;
    if (range / stops.length < 0.0000002) {
        precision = 8;
    }
    else if (range / stops.length < 0.000002) {
        precision = 7;
    }
    else if (range / stops.length < 0.00002) {
        precision = 6;
    }
    else if (range / stops.length < 0.0002) {
        precision = 5;
    }
    else if (range / stops.length < 0.002) {
        precision = 4;
    }
    else if (range / stops.length < 0.02) {
        precision = 3;
    }
    else if (range / stops.length < 0.2) {
        precision = Math.max(precision, 2);
    }
    else if (range / stops.length < 2) {
        precision = Math.max(precision, 1);
    }
    return Math.round(precision);
}



//# sourceMappingURL=precision-06a73672.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,