"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-224140"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-drag-and-drop.entry.js":
/*!***********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-drag-and-drop.entry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_drag_and_drop: () => (/* binding */ ArcgisDragAndDrop)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _file_bf8ab90f_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./file-bf8ab90f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/file-bf8ab90f.js");
/* harmony import */ var _privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./privileges-5c382f61.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js");
/* harmony import */ var _item_types_586f0301_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./item-types-586f0301.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-586f0301.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./item-types-2029b06b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-2029b06b.js");
/* harmony import */ var _guid_aeaed84d_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./guid-aeaed84d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-aeaed84d.js");
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */














const helpMapNumbers = {
    append: 120001300,
    default: 120000456
};
function validateAddedFile(files, isFolder, user, fileConstraints, uiInfo) {
    var _a, _b;
    // Check if unzipped shapefile, then
    // Check if multiple files uploaded, then
    // Check if file extension is supported
    // If it passes all those tests, update the page
    const { helpBase, helpMap, i18n, helpIdType } = uiInfo;
    const { extension } = (0,_file_bf8ab90f_js__WEBPACK_IMPORTED_MODULE_2__.s)(files[0]);
    const { maxFileSize, allowedExtensions } = fileConstraints;
    let valid = false;
    let errorMessage;
    const validExtension = (_a = allowedExtensions === null || allowedExtensions === void 0 ? void 0 : allowedExtensions.includes(extension)) !== null && _a !== void 0 ? _a : true;
    const foundShapefile = Object.keys(files).some((key) => {
        const { extension } = (0,_file_bf8ab90f_js__WEBPACK_IMPORTED_MODULE_2__.s)(files[key]);
        const shapefileExtensions = ["shp", "shx", "dbf", "prj"];
        return shapefileExtensions.includes(extension);
    });
    const validationTypes = (_b = fileConstraints.validationTypes) !== null && _b !== void 0 ? _b : null;
    const possibleType = (0,_item_types_586f0301_js__WEBPACK_IMPORTED_MODULE_4__.f)((0,_file_bf8ab90f_js__WEBPACK_IMPORTED_MODULE_2__.s)(files[0]).extension, validationTypes)[0];
    const validFileType = possibleType &&
        (possibleType.appendUploadFormat || possibleType.allowAddDirect || !possibleType.orgOnly || !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_3__.a)(user));
    if (foundShapefile) {
        errorMessage = {
            title: i18n.error.shapefileErrorTitle,
            message: i18n.error.shapefileErrorMessage,
            link: {
                text: i18n.error.shapefileErrorLink,
                path: `${helpBase}${helpMap["120002804"]}`
            }
        };
    }
    else if (files.length > 1) {
        errorMessage = {
            title: i18n.error.multipleFilesErrorTitle,
            message: i18n.error.multipleFilesErrorMessage
        };
    }
    else if (maxFileSize != null && files[0].size > maxFileSize) {
        const sizeInMB = maxFileSize / 1000000;
        errorMessage = { message: i18n.error.maxSize.replace("${size}", sizeInMB.toString()) };
    }
    else if (!validFileType || !validExtension) {
        const helpMapNumber = helpMapNumbers[helpIdType];
        isFolder
            ? (errorMessage = {
                message: i18n.error.folderError
            })
            : (errorMessage = {
                title: i18n.error.unsupportedFileTypeTitle,
                link: {
                    text: i18n.error.unsupportedFileTypeMessage,
                    path: `${helpBase}${helpMap[helpMapNumber]}`
                }
            });
    }
    else {
        valid = true;
    }
    return { success: valid, errorMessage };
}

const arcgisDragAndDropCss = ".drag-and-drop-well{position:relative}.drag-and-drop-well ::slotted(*){transition:all 200ms ease-in-out;position:relative;border:2px dashed transparent}.drag-and-drop-well ::slotted(*):before{content:\"\";position:absolute;top:0;right:0;bottom:0;left:0;background-color:rgba(0, 121, 193, 0) !important;pointer-events:none;transition:background-color 200ms ease-in-out !important;z-index:2}.dragging ::slotted(*){border-color:#007ac2 !important}.dragging ::slotted(*):before{border-color:#007ac2 !important;background-color:rgba(0, 121, 193, 0.05) !important}.notice-container{display:flex;align-items:center;justify-content:center;position:absolute;top:0px;left:0px;right:0px;pointer-events:none;z-index:10}.alert__message{display:block;line-height:1.375}.alert__link{display:inline}.full-height{height:100%}";

const ArcgisDragAndDrop = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisDropSuccess = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisDropSuccess", 7);
        this.arcgisAlertActive = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAlertActive", 7);
        this.arcgisDragOver = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisDragOver", 7);
        this.config = undefined;
        this.user = undefined;
        this.active = true;
        this.alertMessage = { title: "" };
        this.alertActive = false;
        this.error = false;
        this.files = undefined;
        this.allowedExtensions = null;
        this.validTypes = null;
        this.dragOverNoticeMessage = undefined;
        this.insideModal = undefined;
        this.fullHeight = undefined;
        this.showHelpLinkOnError = true;
        this.maxFileSize = undefined;
        this.helpIdType = "default";
        this.isFolder = false;
        this.dragOver = undefined;
    }
    handleAlertChange() {
        var _a, _b;
        const { alertActive } = this;
        if (alertActive) {
            window.dispatchEvent(new CustomEvent("calciteInternalAlertSync", { detail: { queue: [] } }));
            (_a = this.el.shadowRoot.querySelector("#new-item-alert")) === null || _a === void 0 ? void 0 : _a.setAttribute("active", "");
        }
        else {
            (_b = this.el.shadowRoot.querySelector("#new-item-alert")) === null || _b === void 0 ? void 0 : _b.removeAttribute("active");
        }
        this.arcgisAlertActive.emit(alertActive);
    }
    handleFileUpdate() {
        const { files, i18n, isFolder, user, config, validTypes, helpIdType } = this;
        const { success, errorMessage } = validateAddedFile(files, isFolder, user, {
            allowedExtensions: this.allowedExtensions,
            maxFileSize: this.maxFileSize,
            validationTypes: validTypes
        }, { helpIdType, i18n, helpBase: config.helpBase, helpMap: config.helpMap });
        if (success) {
            this.arcgisDropSuccess.emit(files[0]);
        }
        else {
            this.alertMessage = errorMessage;
            this.alertActive = true;
        }
    }
    handleDragOver(e) {
        if (e.dataTransfer.types.includes("Files")) {
            if (this.wellRef) {
                // * Make sure the notice is visible on screen
                const windowHeight = window.innerHeight;
                const { y: wellOffsetTop, bottom } = this.wellRef.getBoundingClientRect();
                const topBoundary = Math.max(wellOffsetTop, 0);
                const bottomBoundary = Math.min(windowHeight, bottom);
                this.noticeRef.style.height = `${bottomBoundary - topBoundary}px`;
                // -Math.min(0, wellOffsetTop) because:
                //  --- when the well's top is NOT visible, we'll have wellOffsetTop < 0
                //  => we'll offset `top` of the notice's container by that amount
                //  --- when the well's top is visible, we'll have wellOffsetTop > 0
                //  => we'll use 0 for the top of the notice's container
                const relativeTop = -Math.min(0, wellOffsetTop);
                this.noticeRef.style.top = `${relativeTop}px`;
            }
            e.preventDefault();
            this.dragOver = true;
            this.arcgisDragOver.emit(this.dragOver);
        }
        return false;
    }
    async componentWillLoad() {
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.el);
        this.i18n = locale[0];
    }
    render() {
        const { title, message, link } = this.alertMessage;
        const { text, path } = Object.assign({}, link);
        const { active, dragOverNoticeMessage, dragOver, insideModal, fullHeight, showHelpLinkOnError } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (ele) => (this.wellRef = ele), class: {
                hide: !active,
                "drag-and-drop-well": true,
                dragging: this.dragOver,
                "full-height": fullHeight
            }, onDragOver: active && this.handleDragOver.bind(this), onDragLeave: () => {
                this.dragOver = false;
            }, onDrop: (e) => {
                var _a, _b, _c, _d;
                if (!active) {
                    return;
                }
                e.preventDefault();
                this.alertActive = false;
                this.dragOver = false;
                const { files, items } = e.dataTransfer;
                const item = items === null || items === void 0 ? void 0 : items[0];
                this.isFolder =
                    ((_d = ((_b = (_a = item.webkitGetAsEntry) === null || _a === void 0 ? void 0 : _a.call(item)) !== null && _b !== void 0 ? _b : (_c = item === null || item === void 0 ? void 0 : item.getAsEntry) === null || _c === void 0 ? void 0 : _c.call(item))) === null || _d === void 0 ? void 0 : _d.isDirectory) || false;
                this.files = files;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null), insideModal ? (
        // TODO: consider having this component return an error code rather than a full alert
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-alert", { id: "new-item-alert", kind: "danger", onAlertDismiss: () => {
                this.alertActive = false;
            }, active: !!this.alertActive, heading: title, description: message, link: { href: link === null || link === void 0 ? void 0 : link.path, title: link === null || link === void 0 ? void 0 : link.text } })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-alert", { label: "", id: "new-item-alert", icon: true, kind: "danger", onCalciteAlertClose: () => {
                this.alertActive = false;
            }, open: !!this.alertActive, tabIndex: !this.alertActive ? -1 : null, ref: (el) => {
                // here, we hide the queue as it takes up too much room on mobile and we're not using it
                const queue = el.shadowRoot.querySelector(".alert-queue-count");
                if (queue) {
                    queue.style.display = "none";
                }
            } }, title && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "title" }, title), message && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message", class: "alert__message" }, message)), showHelpLinkOnError && link && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { slot: "link", target: "_blank", href: path, class: "alert__link" }, text)))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "notice-container", ref: (ele) => (this.noticeRef = ele) }, dragOverNoticeMessage && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { icon: "upload-to", open: dragOver, scale: "m", width: "auto" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, dragOverNoticeMessage))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "alertActive": ["handleAlertChange"],
        "files": ["handleFileUpdate"]
    }; }
};
ArcgisDragAndDrop.style = arcgisDragAndDropCss;



//# sourceMappingURL=arcgis-drag-and-drop.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/file-bf8ab90f.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/file-bf8ab90f.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ sanitizeFileName),
/* harmony export */   f: () => (/* binding */ formatFileSize),
/* harmony export */   g: () => (/* binding */ getItemInfoByType),
/* harmony export */   s: () => (/* binding */ sanitizeFileInput),
/* harmony export */   v: () => (/* binding */ validateOverwriteFileName)
/* harmony export */ });
/* harmony import */ var _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item-types-2029b06b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-2029b06b.js");
/* harmony import */ var _guid_aeaed84d_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./guid-aeaed84d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-aeaed84d.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



function sanitizeFileName(name, addGUID) {
    //TODO: add new param to spec file.
    const expression = /(?:\.([^.]+))?$/;
    const invalidTitleCharacters = /\.|-/g;
    let fileName = name.replace(/^.*(\\|\/|:)/, "");
    let extension = (fileName && expression.exec(fileName)[1] ? expression.exec(fileName)[1].toLowerCase() : "");
    let title = "";
    if (fileName.indexOf(".rft.") > -1) {
        const [name, suffix] = fileName.split(".rft.");
        extension = `rft.${suffix}`;
        title = name;
    }
    if (fileName && !title) {
        title = fileName.lastIndexOf(".") === -1 ? fileName : fileName.substring(0, fileName.lastIndexOf("."));
    }
    // Replace any invalid characters with an underscore
    title = title.replace(invalidTitleCharacters, "_");
    // Allow file upload of existing item's file name // currently used in append
    if (addGUID) {
        title = makeUniqueFileName(title);
        fileName = `${title}.${extension}`;
    }
    return { title, fileName, extension };
}
// Helper method that takes in a file & returns the cleaned up file name as is and in title form, and the detected file extension
function sanitizeFileInput(file, addGUID) {
    return sanitizeFileName(file.name, !!addGUID);
}
function makeUniqueFileName(name) {
    return `${name}_${(0,_guid_aeaed84d_js__WEBPACK_IMPORTED_MODULE_1__.g)()}`;
}
function validateOverwriteFileName(uploadedFileName, sourceFileName) {
    let fileName = uploadedFileName;
    const position = uploadedFileName.lastIndexOf("\\");
    if (position > -1) {
        fileName = fileName.substring(position + 1, fileName.length);
    }
    return fileName.replace(/\ /g, "_") === sourceFileName.replace(/\ /g, "_");
}
function getItemInfoByType(type) {
    if (_item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_0__.a[type]) {
        return _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_0__.a[type];
    }
    else {
        return _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_0__.a[Object.keys(_item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_0__.a).find((fileType) => _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_0__.a[fileType].type === type)];
    }
}
function formatFileSize(size) {
    if (!size) {
        return "0 B";
    }
    const i = Math.floor(Math.log(size) / Math.log(1024));
    const adjustedSize = Math.round(size / Math.pow(1024, i));
    const unit = ["B", "KB", "MB", "GB", "TB"][i];
    return `${adjustedSize} ${unit}`;
}



//# sourceMappingURL=file-bf8ab90f.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-aeaed84d.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-aeaed84d.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ guid)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
function generateId(counts) {
    return counts
        .map((count) => {
        let out = "";
        for (let i = 0; i < count; i++) {
            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return out;
    })
        .join("-");
}
const guid = () => generateId([2, 1, 1, 1, 3]);



//# sourceMappingURL=guid-aeaed84d.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isSubscriber),
/* harmony export */   b: () => (/* binding */ isPremium),
/* harmony export */   c: () => (/* binding */ canUpdateItem),
/* harmony export */   d: () => (/* binding */ itemsBelongToUserOrg),
/* harmony export */   g: () => (/* binding */ getItemHomeAppUrl),
/* harmony export */   i: () => (/* binding */ isOwner),
/* harmony export */   u: () => (/* binding */ userIsItemAdmin)
/* harmony export */ });
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


function isEsri(item) {
    var _a;
    return !!((_a = item.owner) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes("esri"));
}
function isPremium(item) {
    var _a;
    return isEsri(item) && !!((_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("Requires Credits"));
}
function isSubscriber(item) {
    var _a;
    return isEsri(item) && !!((_a = item.typeKeywords) === null || _a === void 0 ? void 0 : _a.includes("Requires Subscription"));
}
function isOwner(item, user) {
    return item.owner === user.username;
}
/**
 * Can the user update the item
 */
function canUpdateItem(item, user) {
    return userIsItemAdmin(item, user) || item.itemControl === "update";
}
/**
 * Is the user either an owner or admin of the item
 */
function userIsItemAdmin(item, user) {
    return isOwner(item, user) || isItemAdmin(item, user);
}
/**
 * Does the user have admin capabilities on this item
 */
function isItemAdmin(item, user) {
    var _a;
    // if this flag is already set (probably home app), use it
    if (item.isAdmin != null) {
        return !!item.isAdmin;
    }
    const itemOwner = item.owner;
    const itemControlAdmin = item.itemControl === "admin";
    const esriUsers = ["esri_livingatlas", "esri_demographics", "esri_boundaries"];
    if (((_a = item.portal) === null || _a === void 0 ? void 0 : _a.isPortal) &&
        !isOwner(item, user) &&
        itemControlAdmin &&
        itemOwner.includes("esri_") &&
        // portal incorrectly returns "itemControl="admin" for esri owned items
        !esriUsers.includes(itemOwner)) {
        return false;
    }
    return itemControlAdmin;
}
const itemsBelongToUserOrg = (items, user) => {
    return !!user.orgId && items.every((item) => item.isOrgItem);
};
const getItemHomeAppUrl = (itemId, baseUrl) => `${(0,_url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_0__.a)(baseUrl)}item.html?id=${itemId}`;



//# sourceMappingURL=item-3535552d.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-586f0301.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-586f0301.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isLargeCSV),
/* harmony export */   f: () => (/* binding */ findPossibleItemTypesByExtension),
/* harmony export */   i: () => (/* binding */ isLargeGeoJSON),
/* harmony export */   m: () => (/* binding */ mapItemTypesToFileExtensions)
/* harmony export */ });
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./item-types-2029b06b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-2029b06b.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



function findPossibleItemTypesByExtension(extension, validationTypes) {
    // Search item types extensions for the one imported
    let itemTypes;
    if (validationTypes) {
        itemTypes = validationTypes.map((value) => {
            return value.type;
        });
    }
    else {
        itemTypes = Object.keys(_item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_1__.a);
    }
    let possibleItemTypes = [];
    itemTypes.forEach((type) => {
        var _a;
        if (((_a = _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_1__.a[type].fileExt) === null || _a === void 0 ? void 0 : _a.indexOf(extension)) >= 0) {
            possibleItemTypes.push(_item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_1__.a[type]);
        }
    });
    return possibleItemTypes;
}
function mapItemTypesToFileExtensions(types) {
    if (!types) {
        return null;
    }
    return (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_0__.b)(types.flatMap((type) => { var _a; return (_a = _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_1__.a[type]) === null || _a === void 0 ? void 0 : _a.fileExt; }).filter((valid) => !!valid));
}
const isLargeGeoJSON = (sizeInBytes) => {
    const sizeInMB = sizeInBytes / 1024 / 1024;
    // https://devtopia.esri.com/WebGIS/arcgis-app-components/issues/2553#issuecomment-3645404
    return sizeInMB > 50; // 50MB
};
const isLargeCSV = (sizeInBytes) => {
    const sizeInMB = sizeInBytes / 1024 / 1024;
    // https://devtopia.esri.com/WebGIS/arcgis-app-components/issues/2875#issuecomment-3748913
    return sizeInMB > 20; // 20MB
};



//# sourceMappingURL=item-types-586f0301.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ isPublicUser),
/* harmony export */   b: () => (/* binding */ isOrgAdmin),
/* harmony export */   c: () => (/* binding */ isHostedPortal),
/* harmony export */   d: () => (/* binding */ isCustomRole),
/* harmony export */   e: () => (/* binding */ canUpdateOrgGroups),
/* harmony export */   f: () => (/* binding */ canUpdateItemCategories),
/* harmony export */   g: () => (/* binding */ canManageCollaborations),
/* harmony export */   h: () => (/* binding */ isOrgUser),
/* harmony export */   i: () => (/* binding */ isDeveloper),
/* harmony export */   j: () => (/* binding */ canShareItemToGroup),
/* harmony export */   k: () => (/* binding */ canShareItemToOrg),
/* harmony export */   l: () => (/* binding */ adminCanShareOthersItemToGroup),
/* harmony export */   m: () => (/* binding */ canShareOthersItemsToOrg),
/* harmony export */   n: () => (/* binding */ canShareItemToPublic),
/* harmony export */   o: () => (/* binding */ canShareOthersItemsToPublic),
/* harmony export */   p: () => (/* binding */ hasAdminSharePrivilege),
/* harmony export */   q: () => (/* binding */ canViewOthersOrgItems)
/* harmony export */ });
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const getUserRole = (user) => {
    var _a, _b, _c;
    return typeof (user === null || user === void 0 ? void 0 : user.role) === "string" && !!(user === null || user === void 0 ? void 0 : user.role)
        ? user === null || user === void 0 ? void 0 : user.role
        : (_b = (_a = user === null || user === void 0 ? void 0 : user.roleId) !== null && _a !== void 0 ? _a : user === null || user === void 0 ? void 0 : user.id) !== null && _b !== void 0 ? _b : (_c = user === null || user === void 0 ? void 0 : user.sourceJSON) === null || _c === void 0 ? void 0 : _c.id;
};
function isPublicUser(user) {
    return user && !user.orgId;
}
function isHostedPortal(portal) {
    return !portal.isPortal || !!portal.isBackedBySDS;
}
function isDeveloper(subscriptionInfo) {
    const devSubscriptionTypes = ["Trial Developer", "Developer", "Developer Subscription"];
    return devSubscriptionTypes.includes(subscriptionInfo === null || subscriptionInfo === void 0 ? void 0 : subscriptionInfo.type);
}
function isOrgAdmin(user) {
    return getUserRole(user) === "org_admin" || getUserRole(user) === "account_admin";
}
function isOrgUser(user) {
    return getUserRole(user) === "org_user" || getUserRole(user) === "account_user";
}
function isCustomRole(user) {
    // The Home App collapse the `roleId` and `role` into a single `id` property, that's why
    //  https://devtopia.esri.com/WebGIS/arcgis-portal-app/blob/master/src/js/arcgisonline/sharing/dijit/Role.ts#L469 works
    // In practice, we only need to check if `roleId` exist
    //  https://devtopia.esri.com/WebGIS/arcgis-portal-app/issues/44682#issuecomment-4146866
    return !!(user === null || user === void 0 ? void 0 : user.roleId) && user.roleId.length > 0;
}
/**
 * Checks whether the privilege "portal:admin:updateItemCategorySchema" is granted.
 */
function canUpdateItemCategories(user) {
    var _a;
    return !!((_a = user === null || user === void 0 ? void 0 : user.privileges) === null || _a === void 0 ? void 0 : _a.includes("portal:admin:updateItemCategorySchema"));
}
/**
 * Checks whether the privilege "portal:admin:updateGroups" is granted.
 */
function canUpdateOrgGroups(user) {
    var _a;
    return !!((_a = user === null || user === void 0 ? void 0 : user.privileges) === null || _a === void 0 ? void 0 : _a.includes("portal:admin:updateGroups"));
}
/**
 * Checks whether the user is allowed to update other user's items in their organization.
 */
function canUpdateOrgItems(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:updateItems");
}
/**
 * Checks to ensure the portal is an organization portal
 */
function isOrgPortal(portal) {
    return !!(portal.urlKey && portal.customBaseUrl) || !!portal.isPortal;
}
/**
 * Checks whether the user is allowed to share their item to groups
 */
function canShareItemToGroup(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToGroup");
}
/**
 * Checks whether the user can share an item on a given portal
 */
function canShare(user, portal) {
    return (!isOrgPortal(portal) ||
        canShareItemToGroup(user) ||
        canShareItemToOrg(user) ||
        (!!portal.canSharePublic && canShareItemToPublic(user)));
}
/**
 * Checks whether the user is allowed to share their item ot the organization.
 */
function canShareItemToOrg(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToOrg");
}
/**
 * Checks whether the user is allowed to share their item to public
 */
function canShareItemToPublic(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:user:shareToPublic");
}
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItemsToOrg(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToOrg");
}
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItemsToPublic(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToPublic");
}
/**
 * Checks whether the user can share other user's items
 */
function adminCanShareOthersItemToGroup(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:shareToGroup");
}
/**
 * Checks whether the user is in an allowed organization and has the power to manage collaborations
 */
function canManageCollaborations(config, user, portal, subscriptionInfo) {
    const excludedOrgTypes = ["Trial", "Trial Press", "Trial Developer", "Developer Subscription", "Evaluation"];
    const isValidOrgType = subscriptionInfo && !excludedOrgTypes.includes(subscriptionInfo.type);
    const hasPrivilege = ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:manageCollaborations");
    return !!((config === null || config === void 0 ? void 0 : config.collaborationsEnabled) &&
        user &&
        (isOrgAdmin(user) || hasPrivilege) &&
        ((portal === null || portal === void 0 ? void 0 : portal.isPortal) || isValidOrgType));
}
/**
 * Checks whether the user can view other organization users' items
 */
function canViewOrgItems(user) {
    return ((user === null || user === void 0 ? void 0 : user.privileges) || []).includes("portal:admin:viewItems");
}
/**
 * Checks whether the user can view other organization users' items
 */
function canViewOthersOrgItems(user) {
    return !!user && (!isCustomRole(user) || (isCustomRole(user) && canViewOrgItems(user)));
}
// TODO: add unit tests
const hasAdminSharePrivilege = ({ items, user, portal }) => {
    const item = items[0];
    // enterprise incorrectly returns items owned by "esri_" as item control admin (WebGIS/arcgis-portal-app#38695)
    const owner = item.owner;
    const whitelistOwner = ["esri_livingatlas"];
    if (portal.isPortal && owner !== user.username && owner.includes("esri_") && !whitelistOwner.includes(owner)) {
        return false;
    }
    const isOwnerOrAdmin = (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.u)(item, user);
    const isCustom = isCustomRole(user);
    const canShareOrgItems = canShareOthersItems(user);
    const canUpdateAndShare = (0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.c)(item, user) &&
        canUpdateOrgItems(user) &&
        !isCustom &&
        (canShare(user, portal) || canShareOthersItems(user));
    // if it's the item owner or admin, or custom admin who can share
    return isOwnerOrAdmin || canUpdateAndShare || ((0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.d)(items, user) && canShareOrgItems);
};
/**
 * Checks whether the user can share other user's items
 */
function canShareOthersItems(user) {
    return adminCanShareOthersItemToGroup(user) || canShareOthersItemsToOrg(user) || canShareOthersItemsToPublic(user);
}



//# sourceMappingURL=privileges-5c382f61.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js":
/*!*********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addTrailingSlashIfMissing),
/* harmony export */   b: () => (/* binding */ geoJsonRegExp),
/* harmony export */   c: () => (/* binding */ agsRegExp),
/* harmony export */   g: () => (/* binding */ getRestUrlFromUrl),
/* harmony export */   p: () => (/* binding */ parseAGSServerInfo),
/* harmony export */   r: () => (/* binding */ regexServerType),
/* harmony export */   s: () => (/* binding */ specialCharactersRegExp),
/* harmony export */   v: () => (/* binding */ validArcgisRestServicePath)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const specialCharactersRegExp = /\+|\?|\/|\(|\)|\\|\!|\#|\"|\||\*|\:|<|>|\%|\$|\@|\'|\^|\[|\]|\,|\=|\;/gi;
const geoJsonRegExp = /(\.|outputFormat=)json|geojson$/i;
const agsRegExp = /\/ags\//gi;

const serverTypes = "MapServer|GeocodeServer|GPServer|GeometryServer|ImageServer|NAServer|FeatureServer|GeoDataServer|GlobeServer|MobileServer|WMServer|SceneServer|VectorTileServer|StreamServer|WorkspaceServer|GeoenrichmentServer|VideoServer";
const regexServerType = new RegExp(`http.+\/(${serverTypes})`);
const validArcgisRestServicePath = `\/arcgis\/rest\/services|\/rest\/services|\/arcgis\/services|\/arcgis\/rest`;
const serverInfoExp = `(?<server>http.+(?:${validArcgisRestServicePath})(?:\/?.*\/(?<name>.*)\/(?<type>${serverTypes})))(?!.*\/${serverTypes})\/?(?<soe>\\d+)?.*`;
/** Returns an array containing the input url, base server url, server name, server type, and layer index (if entered).
 * Example: [
 * "https://sampleserver6.arcgisonline.com/arcgis/rest/services/FeatureServer/500",
 * "https://sampleserver6.arcgisonline.com/arcgis/rest/services/TestService/FeatureServer",
 * "TestService",
 * "FeatureServer",
 * "500"
 * ]  */
const regexServerInfo = new RegExp(serverInfoExp, "i");

const parseAGSServerInfo = (url) => {
    const extractedInfo = url.match(regexServerInfo);
    if (!extractedInfo) {
        const containsAGS = url.match(agsRegExp);
        // Type is always MapServer for /ags/ services
        return containsAGS ? { baseServerUrl: url, serverName: null, serverType: "MapServer", index: null } : null;
    }
    const [, baseServerUrl, serverName, serverType, indexStr] = extractedInfo;
    const index = parseInt(indexStr);
    return { baseServerUrl, serverName, serverType, index: isNaN(index) ? null : index };
};
const getRestUrlFromUrl = (url) => {
    if (!url) {
        return null;
    }
    const extractedInfo = url.match(validArcgisRestServicePath);
    if (!extractedInfo) {
        return null;
    }
    const urlParts = url.split("/rest");
    return urlParts.length < 2 ? null : `${urlParts[0]}/rest/`;
};
const addTrailingSlashIfMissing = (url) => url && url.charAt(url.length - 1) !== "/" ? `${url}/` : url;



//# sourceMappingURL=url-4c3ae54c.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,