"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-652b0b"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.fr-f066cbe6.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.fr-f066cbe6.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "OK";
const cancel = "Annuler";
const enterURL = "Saisir l’URL du service d’imagerie";
const serviceURL = "URL du service";
const selectRaster = "Sélectionner un raster";
const failedToLoadLayer = "Échec du chargement de la couche";
const loadingLayer = "Chargement de la couche";
const selectFeature = "Sélectionner une couche d’entités";
const enterFURL = "Saisir l’URL du service d’entités";
const addRaster = "Ajouter une variable raster";
const addScalar = "Ajouter une constante";
const raster = "Raster";
const scalar = "Scalaire";
const defaultModelName = "Modèle de fonction raster";
const general = "Généralités";
const parameters = "Paramètres";
const variables = "Variables";
const name = "Nom";
const description = "Description";
const parameter = "Paramètre";
const isPublic = "EstPublic";
const isDataset = "Jeu de données";
const unknownPixelType = "Inconnu";
const outputPixelType = "Type de pixel en sortie";
const u8PixelType = "Non signé 8 bits";
const s8PixelType = "Signé 8 bits";
const u16PixelType = "Non signé 16 bits";
const s16PixelType = "Signé 16 bits";
const u32PixelType = "Non signé 32 bits";
const s32PixelType = "Signé 32 bits";
const f32PixelType = "Flottant 32 bits";
const f64PixelType = "Double 64 bits";
const properties = "Propriétés";
const multidimensionalRules = "Règles multidimensionnelles";
const matchVariables = "Apparier les variables";
const unionDimensions = "Union des dimensions";
const rasterFunctionEditor = {
	invalidRFTMessage: "Le modèle de fonction raster n’est pas valide.",
	rfxArgsEditor: {
		outputRaster: "Raster en sortie",
		raster: "Raster",
		unsupportedDataTypeWarning: "Les arguments suivants ne sont pas affichés parce qu’ils ne sont pas pris en charge actuellement.",
		unsupportedFunction: "Contient une ou plusieurs fonctions raster actuellement non prises en charge."
	},
	rfxRasterInput: {
		selectLayer: "Sélectionner une couche",
		browseLayers: "Parcourir les couches",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Méthode",
		bandLabel: "Bande",
		combinationLabel: "Combinaison"
	},
	rfxRemapGrid: {
		minimum: "Minimal",
		maximum: "Maximum",
		output: "Sortie",
		noData: "NoData",
		remapValuesLabel: "Valeurs de classification"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Variables raster",
		deleteSelectedVars: "Supprimer les variables sélectionnées"
	},
	rfxClippingGeometry: {
		clippingLayer: "Couche de découpage",
		clippingRaster: "Découpage du raster",
		clippingGeometry: "Géométrie de découpage",
		customExtent: "Etendue personnalisée",
		outputExtent: "Étendue en sortie",
		currentExtent: "Etendue actuelle de la carte",
		drawLabel: "Dessin"
	},
	rfxCustomExtent: {
		top: "Haut",
		right: "Droite",
		bottom: "Bas",
		left: "Gauche"
	},
	rfxRasterArrayEditor: {
		moveUp: "Monter",
		moveDown: "Descendre",
		remove: "Retirer"
	},
	rfxStatisticsGrid: {
		stdDev: "Écart type",
		min: "Min",
		max: "Max",
		mean: "Moyenne"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Table de somme pondérée",
		id: "ID",
		layer: "Couche",
		field: "Terrain",
		weight: "Pondération",
		value: "Valeur",
		selectLayer: "Sélectionner une couche"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Table de superposition pondérée",
		id: "ID",
		layer: "Couche",
		field: "Terrain",
		influence: "Influence",
		sumOfInfluence: "Somme des influences",
		value: "Valeur",
		remapTable: "Table de classification",
		scale: "Echelle",
		scales: "Échelles",
		selectRaster: "Sélectionner un raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Rechercher une couche d’entités",
		addPointLayer: "Rechercher une couche de points"
	},
	rfxFieldSelect: {
		value: "Valeur",
		count: "Total"
	},
	rfxAttributeTable: {
		tableType: "Type de table",
		manual: "Manuelle",
		external: "Externe",
		minVal: "Valeur minimale",
		maxVal: "Valeur maximale",
		baseClassName: "Nom de base de classe",
		colorScheme: "Combinaison de couleurs",
		defaultClassName: "Etiquette_",
		generateTable: "Générer une table",
		browseTable: "Parcourir la table",
		value: "Valeur",
		classname: "ClassName",
		color: "Couleur"
	},
	rfxFieldNumberSwitchable: {
		number: "Numérique",
		field: "Terrain",
		string: "Chaîne",
		linearUnit: "Unité linéaire"
	},
	rfxPropertySet: {
		name: "Nom",
		value: "Valeur"
	},
	rfxConversionGrid: {
		size: "Taille"
	},
	rfxTransposeBit: {
		bitPattern: "Modèle de bit",
		outputBit: "Bit en sortie",
		inputBit: "Bit en entrée"
	},
	rfxSpatialReference: {
		placeHolder: "Affiner par mot-clé",
		coordinateSystem: "Système de coordonnées",
		gcs: "Système de coordonnées géographiques",
		pcs: "Système de coordonnées projetées",
		vcs: "Système de coordonnées verticales"
	}
};
const rfxLicenseInfo = "Vous pouvez utiliser ce modèle de fonction raster pour traiter votre imagerie à l’aide d’ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Calcule le cosinus hyperbolique inverse des cellules d’un raster.",
		aCosHDesc: "La fonction calcule le cosinus hyperbolique inverse des pixels dans un raster.",
		aCosName: "ACos",
		aCosSnip: "Calcule le cosinus inverse des pixels dans un raster.",
		aCosDesc: "Cette fonction raster calcule le cosinus inverse des cellules d’un raster. En mathématiques, toutes les fonctions trigonométriques présentent une plage définie de valeurs en entrée valides, appelée \"domaine\". Les valeurs en sortie de chaque fonction présentent également une plage définie. Pour cet outil, le domaine est [-1, 1] et la plage [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Calcule le sinus hyperbolique inverse des cellules d’un raster.",
		aSinHDesc: "La fonction calcule le sinus hyperbolique inverse des pixels dans un raster.",
		aSinName: "ASin",
		aSinSnip: "Calcule le sinus inverse des cellules d’un raster.",
		aSinDesc: "La fonction calcule le sinus inverse des pixels dans un raster.",
		aTan2Name: "ATan2",
		aTan2Snip: "Calcule la tangente inverse (selon x,y) des cellules d’un raster.",
		aTan2Desc: "La fonction calcule la tangente inverse (selon x,y) des pixels dans un raster.",
		aTanHName: "ATanH",
		aTanHSnip: "Calcule la tangente hyperbolique inverse des cellules d’un raster.",
		aTanHDesc: "La fonction calcule la tangente hyperbolique inverse des pixels dans un raster.",
		aTanName: "ATan",
		aTanSnip: "Calcule la tangente inverse des cellules d’un raster.",
		aTanDesc: "La fonction calcule la tangente inverse des pixels dans un raster.",
		absName: "Abs",
		absSnip: "Calcule la valeur absolue des cellules d’un raster.",
		absDesc: "La fonction Abs calcule la valeur absolue des pixels dans un raster.",
		reflectanceName: "Réflectance apparente",
		reflectanceSnip: "Convertit les images brutes en valeurs de réflectance au sommet de l’atmosphère (TOA, Top of Atmosphere) en tenant compte des caractéristiques du capteur, de la position du soleil et de l’heure d’acquisition.",
		reflectanceDesc: "Cette fonction permet d’ajuster les valeurs de luminosité de l’image pour certains capteurs satellitaires. Les réglages dépendent de l’élévation du soleil, de la date d’acquisition et des propriétés du capteur pour définir le gain et le biais de chaque bande. Cette fonction permet d’ajuster les valeurs de réflectance, ou de luminosité, de certaines images satellite en fonction des paramètres d’éclairage de la scène et de gain du capteur. Les images sont ajustées selon un critère d’éclairage théorique commun en vue de réduire les variations entre les scènes présentant des dates différentes et produites par des capteurs différents. Cela est utile pour la classification des images, l’équilibrage des couleurs et le mosaïquage. Cette fonction peut être utilisée uniquement avec des images spécifiques. Les capteurs Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 et Pleiades sont pris en charge.<div><br/>La fonction effectue deux corrections. La première est basée sur les paramètres de gain. Les valeurs de luminosité d’origine sont recréées à partir des valeurs d’image en inversant les équations de gain. La deuxième correction est liée aux différences d’angle du soleil et de luminosité. Les valeurs de luminosité d’origine sont ajustées selon un critère d’éclairage commun en normalisant les scènes capturées dans des conditions d’éclairage variables. En général, bien que le type de données d’image en sortie soit identique au type de données d’image en entrée, les valeurs en sortie sont inférieures aux valeurs en entrée et sont découpées selon la plage de données valide.</div>",
		argStatisticsName: "Statistiques d’argument",
		argStatisticsSnip: "Calcule des statistiques d’argument, dont ArgMax, ArgMin, ArgMedian et Duration.",
		argStatisticsDesc: "La fonction calcule les statistiques d’argument. Quatre méthodes composent la fonction Statistiques d’argument : ArgMax, ArgMin, ArgMedian et Duration.",
		arithmeticName: "Arithmétique",
		arithmeticSnip: "Effectue une opération arithmétique entre deux rasters ou entre un raster et une valeur scalaire.",
		arithmeticDesc: "La fonction Arithmétique effectue une opération arithmétique entre deux rasters ou entre un raster et un scalaire et inversement.",
		aspectSlopeName: "Exposition-Pente",
		aspectSlopeSnip: "Crée un raster qui affiche simultanément l’exposition (direction) et la pente (déclivité) d’une surface continue, comme représenté dans un modèle numérique d’élévation.",
		aspectSlopeDesc: "La fonction Exposition-Pente crée une couche raster qui affiche simultanément l’exposition et la pente d’une surface. L’exposition identifie la direction de pente descendante du taux de variation maximal des valeurs de chaque pixel par rapport aux pixels voisins. L’exposition peut être assimilée à la direction de la pente. Les valeurs du raster en sortie sont la direction au compas de l’exposition, représentées par une teinte (couleur). La pente représente le taux de variation d’élévation pour chaque pixel du modèle numérique d’élévation (MNE). La pente représente la déclivité de la surface et est symbolisée dans trois classes affichées à l’aide de la saturation des couleurs (luminosité).<div><br/>Les valeurs de pixels dans le raster exposition-pente en sortie reflètent une combinaison de l’exposition et de la pente. Les pixels dont les valeurs sont inférieures à 20 sont considérés comme plats et s’affichent en gris. Les valeurs d’exposition-pente égales ou supérieures à 21 s’affichent avec différentes saturations comme suit : de 21 à 30 —Saturation de pente faible, de 31 à 40—Saturation de pente modérée, 41 et valeurs supérieures —Saturation de pente élevée</div>",
		aspectName: "Exposition",
		aspectSnip: "Indique la direction d’un pixel, 0 étant plein nord et les angles augmentant dans le sens horaire jusqu’à 360.",
		aspectDesc: "La fonction Exposition identifie la direction de pente descendante du taux de variation maximal des valeurs de chaque cellule par rapport aux cellules voisines. L’exposition peut être assimilée à la direction de la pente. Les valeurs du raster en sortie sont la direction au compas de l’exposition.<div><br/>L’entrée de cette fonction correspond au raster en entrée. La fonction Exposition est souvent appliquée à un modèle numérique d’élévation (MNE). Par défaut, l’exposition apparaît sous forme d’image en nuances de gris. Vous pouvez ajouter la fonction Palette de couleurs pour spécifier une combinaison de couleurs en particulier ou permettre à l’utilisateur de la mosaïque de modifier la symbologie avec sa propre combinaison de couleurs.</div>",
		tableName: "Table attributaire",
		tableSnip: "Utilise une table pour nommer et symboliser les valeurs dans un jeu de données. Les colonnes de la table sont séparées par des virgules : PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "La fonction Table attributaire vous permet de définir une table attributaire pour symboliser une mosaïque monobande ou un jeu de données raster. <div><br/>Ceci est utile lorsque vous souhaitez présenter des images classées en fonction de l’utilisation du sol, par exemple des forêts, des marécages, des terres cultivables et des zones urbaines. En outre, si votre table contient des champs nommés red (rouge), green (vert) et blue (bleu), les valeurs de ces champs sont utilisées comme une palette de couleurs lors de l’affichage de l’image.</div>",
		bandArithmeticName: "Arithmétique de bande",
		bandArithmeticSnip: "Calcule des indices à l’aide de formules prédéfinies ou d’une expression définie par l’utilisateur.",
		bandArithmeticDesc: "La fonction Arithmétique de bande réalise une opération arithmétique sur les bandes d’un jeu de données raster. Vous pouvez choisir des algorithmes prédéfinis ou saisir votre propre formule uniligne. Les opérateurs pris en charge sont -,+,/,* et - unaire.",
		thresholdName: "Définition d’un seuil binaire",
		thresholdSnip: "Organise les données continues en faisant la distinction entre premier plan et arrière-plan en réduisant la covariance entre les deux classes.",
		thresholdDesc: "Lorsque vous utilisez un jeu de données raster doté d’une distribution bimodale, cette fonction crée un nouveau raster qui divise les données en deux classes distinctes. Elle crée une classe à faible valeur, affichée avec des pixels noirs, et une classe à forte valeur, affichée avec des pixels blancs.",
		bitwiseAndName: "Et bit à bit",
		bitwiseAndSnip: "Effectue une opération Et bit à bit sur les valeurs binaires de deux rasters en entrée.",
		bitwiseAndDesc: "La fonction Et bit à bit effectue une opération Et bit à bit sur les valeurs binaires de deux rasters en entrée.",
		bitwiseLeftShiftName: "Décalage à gauche bit à bit",
		bitwiseLeftShiftSnip: "Effectue une opération de décalage à gauche bit à bit sur les valeurs binaires de deux rasters en entrée.",
		bitwiseLeftShiftDesc: "La fonction Décalage à gauche bit à bit effectue une opération de décalage à gauche bit à bit sur les valeurs binaires de deux rasters en entrée.",
		bitwiseNotName: "Non bit à bit",
		bitwiseNotSnip: "Effectue une opération de complément Non bit à bit sur les valeurs binaires de deux rasters en entrée.",
		bitwiseNotDesc: "La fonction effectue une opération Non bit à bit (de complément) sur la valeur binaire d’un raster en entrée.",
		bitwiseOrName: "Ou bit à bit",
		bitwiseOrSnip: "Effectue une opération Ou bit à bit sur les valeurs binaires de deux rasters en entrée.",
		bitwiseOrDesc: "La fonction effectue une opération Ou bit à bit sur les valeurs binaires de deux rasters en entrée. ",
		bitwiseRightShiftName: "Décalage à droite bit à bit",
		bitwiseRightShiftSnip: "Effectue une opération de décalage à droite bit à bit sur les valeurs binaires de deux rasters en entrée.",
		bitwiseRightShiftDesc: "La fonction effectue une opération Décalage à droite bit à bit sur les valeurs binaires de deux rasters en entrée.",
		bitwiseXorName: "Ou exclusif bit à bit",
		bitwiseXorSnip: "Effectue une opération Ou exclusif bit à bit sur les valeurs binaires de deux rasters en entrée.",
		bitwiseXorDesc: "La fonction effectue une opération Ou exclusif bit à bit sur les valeurs binaires de deux rasters en entrée.",
		booleanAndName: "Et booléen",
		booleanAndSnip: "Effectue une opération Et booléen sur les valeurs de cellules de deux rasters en entrée. Si les deux valeurs en entrée sont vraies (différentes de zéro), la valeur en sortie est égale à 1. Si l’une des valeurs en entrée, ou les deux, sont fausses (égales à zéro), la sortie est égale à 0.",
		booleanAndDesc: "La fonction effectue une opération Et booléen sur les valeurs de pixels de deux entrées. Si les deux valeurs en entrée sont vraies (différentes de zéro), la valeur en sortie est égale à 1. Si l’une des valeurs en entrée, ou les deux, sont fausses (égales à zéro), la valeur en sortie est égale à 0. ",
		booleanNotName: "Non booléen",
		booleanNotSnip: "Effectue une opération de complément Non booléen sur les valeurs de cellules du raster en entrée. Si les valeurs en entrée sont vraies (différentes de zéro), la valeur en sortie est égale à 0. Si les valeurs en entrée sont fausses (égales à zéro), la sortie est égale à 1.",
		booleanNotDesc: "La fonction effectue une opération de complément Non booléen sur les valeurs de pixels du raster en entrée. Si les valeurs en entrée sont vraies (différentes de zéro), la valeur en sortie est égale à 0. Si les valeurs en entrée sont fausses (égales à zéro), la valeur en sortie est égale à 1.",
		booleanOrName: "Ou booléen",
		booleanOrSnip: "Effectue une opération Ou booléen sur les valeurs de cellules des deux rasters en entrée. Si l’une des valeurs en entrée, ou les deux, sont vraies (différentes de zéro), la valeur en sortie est égale à 1. Si les deux valeurs en entrée sont fausses (zéro), la sortie est égale à 0.",
		booleanOrDesc: "La fonction effectue une opération Ou booléen sur les valeurs de cellules de deux rasters en entrée. Si l’une des valeurs en entrée, ou les deux, sont vraies (différentes de zéro), la valeur en sortie est égale à 1. Si les deux valeurs en entrée sont fausses (égales à zéro), la valeur en sortie est égale à 0.",
		booleanXorName: "Ou exclusif booléen",
		booleanXorSnip: "Effectue une opération Ou exclusif booléen sur les valeurs de cellules de deux rasters en entrée. Si une valeur en entrée est vraie (différente de zéro) et que l’autre est fausse (égale à 0), la sortie est égale à 1. Si les deux valeurs en entrée sont vraies ou fausses, la sortie est égale à 0.",
		booleanXorDesc: "La fonction effectue une opération Ou exclusif booléen sur les valeurs de cellule de deux rasters en entrée. Si une valeur en entrée est vraie (différente de zéro) et que l’autre est fausse (égale à 0), la valeur en sortie est égale à 1. Si les deux valeurs en entrée sont vraies ou fausses, la valeur en sortie est égale à 0.",
		bufferedRasterName: "Bufférisé",
		bufferedRasterSnip: "Bufférise les derniers blocs de pixels utilisés.",
		bufferedRasterDesc: "La fonction Bufférisé permet d’optimiser les performances des chaînes de fonctions complexes. Elle stocke la sortie en mémoire de la partie de la chaîne de fonctions qui la précède. <div><br/>Insérez cette fonction dans l’éditeur de fonctions où vous voulez stocker la sortie.</div>",
		rasterCalculatorName: "Calculatrice",
		rasterCalculatorSnip: "Calcule un raster à partir d’une expression mathématique de type raster.",
		rasterCalculatorDesc: "La fonction Calculatrice permet de créer et d’exécuter des expressions afin de les incorporer dans des chaînes de fonctions.",
		cellStatisticsName: "Statistiques de cellule",
		cellStatisticsSnip: "Calcule des statistiques par cellule à partir de plusieurs rasters. Les statistiques disponibles sont les suivantes : Majorité, Maximum, Moyenne, Médiane, Minimum, Minorité, Centile, Plage, Écart type, Somme et Variété.",
		cellStatisticsDesc: "Cette fonction calcule les statistiques de plusieurs rasters, pixel par pixel. Les statistiques disponibles sont les suivantes : majorité, maximum, moyenne, médiane, minimum, minorité, plage, écart type, somme et variété.",
		classifyName: "Classer",
		classifySnip: "Attribue chaque pixel à une classe. Incorporez les données auxiliaires, telles qu’une image segmentée.",
		classifyDesc: "Cette fonction raster classe un jeu de données raster en fonction d’un fichier de définition de classificateur Esri (.ecd) et de jeux de données raster en entrée. Le fichier .ecd utilisé dans la fonction Classifier contient toutes les informations pour un jeu de données et un classificateur spécifiques, et est généré par les outils d’entraînement de classification, tels que Préparer le classificateur de machines à vecteurs de support ou Préparer le classificateur d’arbres aléatoires.",
		clipName: "Découper",
		clipSnip: "Définit l’étendue d’un raster à l’aide de coordonnées ou d’un autre jeu de données.",
		clipDesc: "Cette fonction découpe un raster à l’aide d’une forme rectangulaire selon les étendues définies ou découpe un raster selon la forme d’une classe d’entités surfaciques en entrée. La forme qui définit le découpage peut découper l’étendue du raster ou découper une zone au sein du raster.",
		colorspaceConversionName: "Conversion du modèle de couleur",
		colorspaceConversionSnip: "Convertit un raster de RGB en TSL et inversement.",
		colorspaceConversionDesc: "La fonction de conversion du modèle de couleur convertit le modèle de couleur d’une image de l’espace de couleur TSL (teinte, saturation et luminosité) en RVB (rouge, vert, bleu), ou inversement.<div><br/>Cette fonction peut être utilisée dans un jeu de données mosaïque.</div>",
		colormapToRGBName: "Palette de couleurs vers RVB",
		colormapToRGBSnip: "Convertit un raster monobande en raster à trois bandes (rouge, vert, bleu) à l’aide d’une palette de couleurs.",
		colormapToRGBDesc: "Cette fonction convertit un raster monobande associé à une palette de couleurs en raster à trois bandes (rouge, vert, bleu).<div><br/>Cette fonction est utile pour créer un raster à trois bandes à partir d’un raster monobande à l’aide d’une palette de couleurs associée. Les valeurs de la palette de couleurs serviront à créer chaque bande rouge, verte et bleue. Cette fonction peut être utilisée dans un jeu de données mosaïque.</div>",
		colormapName: "Palette de couleurs",
		colormapSnip: "Modifie les valeurs de pixels pour afficher les données raster soit sous forme d’une image en nuances de gris, soit sous forme d’une image RVB (rouge, vert, bleu), d’après une palette de couleurs ou un dégradé de couleurs.",
		colormapDesc: "La fonction Palette de couleurs est un type de moteur de rendu de données raster. Elle transforme les valeurs de pixels pour afficher les données raster soit sous forme d’une image en nuances de gris, soit sous forme d’une image en couleurs (RVB), en fonction d’une combinaison de couleurs ou des couleurs spécifiques d’un fichier de palette de couleurs. L’utilisation d’une palette de couleurs permet la représentation des données analysées, comme une image classée, ou l’affichage d’une carte topographique (ou d’une image numérisée par couleurs d’index).<div><br/>Les palettes de couleurs contiennent un ensemble de valeurs associées aux couleurs permettant d’afficher de manière cohérente un raster monobande avec ces mêmes couleurs. Chaque valeur de pixel est associée à une couleur, définie comme un ensemble de valeurs RVB (rouge, vert, bleu). Les palettes de couleurs peuvent prendre en charge n’importe quelle valeur de profondeur de couleur, à l’exception des nombres à virgule flottante. Elles prennent également en charge des valeurs positives et négatives et peuvent contenir des valeurs appariées de couleurs manquantes. Lors de l’affichage d’un jeu de données avec une palette de couleurs à laquelle il manque des valeurs, les valeurs manquantes ne sont pas affichées.</div>",
		complexName: "Complexe",
		complexSnip: "Extrait la grandeur de nombres complexes.",
		complexDesc: "Cette fonction calcule une grandeur à partir de valeurs complexes.<div><br/>Cette fonction est généralement utilisée avec l’imagerie RADAR dont le type de données est complexe. Elle peut être utilisée dans un jeu de données mosaïque.</div>",
		compositeBandName: "Bandes composites",
		compositeBandSnip: "Combine plusieurs jeux de données en un seul raster multibande.",
		compositeBandDesc: "La fonction Bandes composites permet de combiner des rasters pour former une image multibande.",
		conName: "Con",
		conSnip: "Effectue une opération conditionnelle If, Then ou Else. Lorsqu’un opérateur Con est utilisé, il doit généralement y avoir deux ou plusieurs fonctions enchaînées ensemble, où une fonction stipule les critères et la seconde fonction est l’opérateur Con qui utilise les critères et dicte quelles sont les sorties vraies ou fausses.",
		conDesc: "La fonction Con définit les pixels dans le raster en sortie en fonction d’une évaluation if\\else de chaque pixel en entrée. Elle renvoie les valeurs de pixels du raster vrai si l’évaluation conditionnelle est vraie (1) ou renvoie les valeurs de pixels du raster faux si l’évaluation conditionnelle est fausse (0). Ce critère est spécifié par la sortie d’une fonction mathématique logique, qui sera le raster en entrée.",
		constantName: "Constante",
		constantSnip: "Crée un raster virtuel avec une seule valeur de pixel.",
		constantDesc: "Cette fonction crée un raster virtuel avec une seule valeur de pixel pouvant être utilisée dans des modèles de fonctions raster et pour traiter un jeu de données mosaïque.<div><br/>La valeur constante est utilisée pour chaque valeur de pixel du raster.</div>",
		contourName: "Isoligne",
		contourSnip: "Crée des isolignes.",
		contourDesc: "La fonction Isoligne génère des isolignes en reliant des points de même élévation à partir d’un jeu de données raster d’élévation. Les isolignes sont créées en tant que rasters pour la visualisation. Les fonctionnalités clés suivantes optimisent la fonction : les isolignes sont générées rapidement et dynamiquement sur des jeux de données très volumineux, tels que World Elevation (élévation mondiale). Les isolignes peuvent être lissées pour offrir une apparence plus satisfaisante sur le plan cartographique tout en conservant leur précision. L’intervalle des isolignes est contrôlé dynamiquement, les options en sortie sont notamment les isolignes, les isolignes d’index et les isolignes remplies.<div><br/>La création d’une couche d’isolignes en tant que produit raster est utile pour une vaste gamme d’applications, car les isolignes peuvent se superposer sur une carte et offrent des informations sur le MNT sans masquer les données sous-jacentes. Elles sont utiles dans de nombreuses applications, telles que le génie civil, l’agriculture et la gestion de l’eau.</div>",
		contrastBrightnessName: "Contraste et luminosité",
		contrastBrightnessSnip: "Ajuste le contraste et la luminosité d’un raster.",
		contrastBrightnessDesc: "La fonction Contraste et luminosité améliore l’apparence des données raster en modifiant la luminosité et le contraste au sein de l’image. La luminosité améliore la clarté globale de l’image—par exemple, pour rendre plus claires des couleurs sombres et pour rendre plus pâles des couleurs claires—tandis que le contraste ajuste la différence entre les couleurs les plus sombres et les couleurs les plus claires.<div><br/>Cette fonction modifie les valeurs des pixels. Utilisez-la lorsque vous souhaitez améliorer l’apparence des données, mais pas si vous souhaitez utiliser les données dans le cadre d’une analyse qui nécessiterait les valeurs de pixels brutes. Cette fonction est utile lorsque vous publiez les données sous la forme d’un service d’imagerie pouvant être utilisé dans des applications sans possibilité de modifier le contraste et la luminosité des images, ou pour vous assurer qu’elles s’affichent avec les paramètres que vous préférez.</div>",
		convolutionName: "Convolution",
		convolutionSnip: "Applique un filtre pour affiner, brouiller, détecter les bords, lisser, ou appliquer un dégradé sur un raster.",
		convolutionDesc: "La fonction Convolution exécute un filtrage sur les valeurs de pixels d’une image, permettant d’affiner une image, de brouiller une image, de détecter des contours dans une image ou d’effectuer d’autres améliorations basées sur le noyau. Les filtres permettent de renforcer la qualité de l’image raster en éliminant des données fictives ou en améliorant la représentation des entités présentes dans les données. Ces filtres de convolution s’appliquent à un noyau superposé en mouvement (fenêtre ou voisinage), par exemple 3 par 3. Les filtres de convolution fonctionnent en calculant la valeur du pixel en fonction de la pondération des pixels voisins.",
		corridorName: "Couloir",
		corridorSnip: "Calcule la somme des coûts cumulés pour deux rasters de coûts cumulés en entrée.",
		corridorDesc: "La fonction Couloir calcule la somme des coûts cumulés pour deux rasters de coûts cumulés en entrée. Vous pouvez employer les deux rasters en entrée, mais si vous souhaitez obtenir un résultat significatif, vous devez utiliser des rasters de coûts cumulés en sortie qui n’ont pas été modifiés. L’ordre des deux entrées n’a pas d’importance.",
		cosHName: "CosH",
		cosHSnip: "Calcule le cosinus hyperbolique des cellules d’un raster.",
		cosHDesc: "La fonction calcule le cosinus hyperbolique des pixels dans un raster.",
		cosName: "Cos",
		cosSnip: "Calcule le cosinus d’une cellule dans un raster.",
		cosDesc: "La fonction calcule le cosinus des pixels dans un raster.",
		costAllocationName: "Allocation de coût",
		costAllocationSnip: "Calcule, pour chaque cellule, sa source de moindre coût à partir du plus faible coût cumulé sur une surface de coût.",
		costAllocationDesc: "La fonction Allocation de coût calcule, pour chaque cellule, sa source de moindre coût à partir du plus faible coût cumulé sur une surface de coût.",
		costBackLinkName: "Antécédence de coût",
		costBackLinkSnip: "Définit le voisin, à savoir la cellule suivante sur le chemin de moindre coût cumulé vers la source de moindre coût.",
		costBackLinkDesc: "La fonction Antécédence de coût définit le voisin, à savoir la cellule suivante sur le chemin de moindre coût cumulé vers la source de moindre coût.<div><br/>Le raster d’antécédence contient des valeurs de zéro à huit qui définissent la direction ou identifient la cellule voisine suivante (la cellule suivante) le long du chemin de moindre coût cumulé à partir d’une cellule pour atteindre sa source de moindre coût. Si le chemin doit passer à l’intérieur du voisin de droite, la cellule se voit attribuer la valeur 1, 2 pour la cellule dans la diagonale inférieure droite, et ainsi de suite dans le sens horaire. La valeur 0 est réservée aux cellules sources.</div>",
		costDistanceName: "Distance de coût",
		costDistanceSnip: "Calcule, pour chaque cellule, la distance de moindre coût cumulé depuis ou vers la source de moindre coût sur une surface de coût.",
		costDistanceDesc: "La fonction Distance de coût calcule la distance de moindre coût cumulé pour chaque cellule depuis ou vers la source de moindre coût sur une surface de coût.",
		costPathName: "Chemin de coût",
		costPathSnip: "Calcule le chemin de moindre coût entre une source et une destination.",
		costPathDesc: "La fonction Chemin de coût calcule le chemin de moindre coût entre une source et une destination.<div><br/>Cette fonction permet d’obtenir un raster en sortie qui enregistre le ou les chemins de moindre coût à partir des emplacements sélectionnés vers la cellule source la plus proche telle que définie dans la surface de coût cumulé (en tenant compte des distances de coût).</div>",
		curvatureName: "Courbure",
		curvatureSnip: "Calcule la courbure d’une surface raster, en incluant éventuellement la courbure longitudinale et transversale.",
		curvatureDesc: "La fonction Courbure affiche la forme ou la courbure de la pente. Une partie d’une surface peut être concave ou convexe. Il est possible de le savoir en consultant la valeur de courbure. La courbure est obtenue en calculant la dérivée seconde de la surface.<div><br/>La sortie générée par la fonction Courbure permet de décrire les caractéristiques physiques d’un bassin de drainage afin de comprendre les processus d’érosion et d’écoulement. La valeur de courbure permet de rechercher les motifs d’érosion du sol, ainsi que la distribution de l’eau sur les terres. La courbure longitudinale affecte l’accélération et la décélération du flux, ce qui influence l’érosion et la sédimentation. La courbure planiforme influence la convergence et la divergence du flux.</div>",
		divideName: "Division",
		divideSnip: "Divise les valeurs de deux rasters, cellule par cellule.",
		divideDesc: "La fonction Division divise les valeurs de deux rasters, pixel par pixel.",
		elevationVoidFillName: "Remplissage des vides d’élévation",
		elevationVoidFillSnip: "Crée des pixels dans les zones comportant des discontinuités dans vos données d’élévation.",
		elevationVoidFillDesc: "La fonction de remplissage des vides d’élévation permet de créer des pixels lorsque des discontinuités sont présentes dans vos données d’élévation.<div><br/>Les vides se produisent lorsqu’aucun point n’est collecté dans la surface représentée par un pixel dans le raster résultant. Les vides sont souvent provoqués par la présence de plans d’eau, ou par la sélection ou l’exclusion de types de classes. Le remplissage des vides est utilisé le plus souvent lors de la génération d’une surface au sol.</div>",
		equalToName: "Égal à",
		equalToSnip: "Effectue une opération relationnelle Égal à sur deux entrées, cellule par cellule. Renvoie la valeur 1 pour les cellules pour lesquelles le premier raster est égal au second raster, et la valeur 0 dans le cas contraire.",
		equalToDesc: "La fonction effectue une opération Égal à sur deux rasters, pixel par pixel. Elle renvoie la valeur 1 pour les pixels pour lesquels le premier raster est égal au second raster, et la valeur 0 dans le cas contraire.",
		eucAllocationName: "Allocation euclidienne",
		eucAllocationSnip: "Calcule, pour chaque cellule, la source la plus proche en fonction de la distance euclidienne.",
		eucAllocationDesc: "La fonction Allocation euclidienne calcule, pour chaque cellule, la source la plus proche en fonction de la distance euclidienne.",
		eucDirectionName: "Direction euclidienne",
		eucDirectionSnip: "Calcule, pour chaque cellule, la direction en degrés par rapport à la source la plus proche.",
		eucDirectionDesc: "La fonction Direction euclidienne calcule, pour chaque cellule, la direction en degrés par rapport à la source la plus proche. <div><br/>La direction est calculée à partir du centre de chaque cellule vers le centre de la cellule source la plus proche. La plage de valeurs s’étend de 0 à 360 degrés, 0 étant réservé aux cellules source. La direction plein est (droite) correspond à 90 et les valeurs augmentent dans le sens horaire (180 correspond au sud, 270 à l’ouest et 360 au nord).</div>",
		eucDistanceName: "Distance euclidienne",
		eucDistanceSnip: "Calcule, pour chaque cellule, la distance euclidienne par rapport à la source la plus proche.",
		eucDistanceDesc: "La fonction Distance euclidienne calcule, pour chaque cellule, la distance euclidienne par rapport à la source la plus proche.",
		exp10Name: "Exp10",
		exp10Snip: "Calcule l’exponentielle de base 10 des cellules d’un raster.",
		exp10Desc: "La fonction Exp 10 calcule l’exponentielle de base 10 des pixels dans un raster.",
		exp2Name: "Exp2",
		exp2Snip: "Calcule l’exponentielle de base 2 des cellules d’un raster.",
		exp2Desc: "Cette fonction calcule l’exponentielle de base 2 des pixels dans un raster.",
		expName: "Exp",
		expSnip: "Calcule l’exponentielle de base e des cellules d’un raster.",
		expDesc: "Cette fonction calcule l’exponentielle de base e des pixels dans un raster.",
		extractBandName: "Extraire les bandes",
		extractBandSnip: "Spécifie les bandes avec lesquelles travailler lors de l’utilisation de jeux de données multibandes.",
		extractBandDesc: " La fonction Extraire les bandes permet d’extraire une ou plusieurs bandes, ou de réorganiser les bandes dans un jeu de données raster multibande.<div><br/>Vous pouvez utiliser la fonction Extraire les bandes avant que d’autres fonctions soient appliquées (Arithmétique, par exemple), pour contrôler les bandes qui sont utilisées en entrée dans la prochaine fonction.</div>",
		fillName: "Remplissage",
		fillSnip: "Remplit les cuvettes d’une surface raster pour supprimer de légères imperfections dans les données.",
		fillDesc: "La fonction globale Remplissage localise et remplit les cuvettes et les pics dans un raster de surface d’élévation afin de supprimer les petites imperfections dans les données. La fonction effectue le remplissage de manière itérative jusqu’à ce que toutes les cuvettes soient remplies dans la limite Z spécifiée.<div><br/>Lorsqu’une surface d’élévation est créée avec des outils d’orthocartographie ou par d’autres moyens, des erreurs (petites, mais notables) apparaissent souvent sous la forme de cuvettes et de pics dans les données. En photogrammétrie, les cuvettes et les pics sont souvent nommés trous et pointes. Comme les données de surface sont souvent utilisées en modélisation (la modélisation hydrologique, par exemple), il est important de corriger ces cuvettes et pics de manière cohérente par rapport aux données environnantes.</div>",
		floatName: "Flottant",
		floatSnip: "Convertit chaque valeur de cellule d’un raster en une représentation en virgule flottante.",
		floatDesc: "La fonction Flottant convertit chaque valeur de pixel d’un raster en une représentation en virgule flottante.",
		flowAccumulationName: "Accumulation de flux",
		flowAccumulationSnip: "Crée un raster de flux cumulé dans chaque cellule. Si besoin, vous pouvez utiliser un facteur de pondération.",
		flowAccumulationDesc: "La fonction globale Accumulation de flux génère un raster de flux cumulé dans chaque pixel, conformément à l’accumulation des pondérations de tous les pixels qui s’écoulent dans les cellules en pente descendante. Si aucun raster de pondération n’est fourni, une pondération de 1 est attribuée à chacun des pixels, et la valeur des pixels du raster en sortie correspond au nombre de pixels qui s’écoulent vers chaque pixel.<div><br/>Les pixels en sortie présentant une accumulation de flux élevée sont des zones de flux concentré qui peuvent être utilisées pour identifier des canaux d’écoulement. Les pixels en sortie présentant une accumulation de flux nulle sont des zones topographiques locales élevées qui peuvent être utilisées pour identifier des crêtes.</div>",
		flowDirectionName: "Direction de flux",
		flowDirectionSnip: "Crée un raster de direction de flux à partir de chaque cellule vers son voisin de plus grande pente descendante.",
		flowDirectionDesc: "L’un des principaux aspects de la dérivation des caractéristiques hydrologiques d’une surface est la capacité à déterminer la direction du flux de chaque pixel d’un raster. La fonction raster Direction de flux prend une surface en entrée et crée un raster de direction de flux à partir de chaque pixel vers son voisin de plus grande pente descendante. La fonction Direction de flux prend en charge trois méthodes de modélisation de flux : D8 (huit directions), MFD (Multiple Flow Direction) et DINF (D-Infinity). ",
		flowDistanceName: "Distance d’écoulement",
		flowDistanceSnip: "Calcule, pour chaque cellule, la distance de pente descendante verticale ou horizontale minimale vers les cellules dans un cours d’eau ou une rivière dans lesquelles elles transitent.",
		flowDistanceDesc: "Pour chaque pixel, la fonction calcule la distance de pente descendante verticale ou horizontale minimale vers le ou les pixels dans un cours d’eau ou une rivière dans lesquels ils transitent. Si un raster de direction de flux facultatif est fourni, les directions de pente descendante seront limitées à celles définies par le raster de direction de flux en entrée. La sortie est un raster de distance d’écoulement.",
		focalName: "Statistiques focales",
		focalSnip: "Calcule les statistiques focales de chaque pixel d’une image en fonction d’un voisinage focal défini.",
		focalDesc: "La fonction Statistiques focales calcule des statistiques focales pour chaque pixel d’une image en fonction d’un voisinage focal défini.",
		geometricName: "Géométrique",
		geometricSnip: "Augmente la précision de position d’un jeu de données en tenant compte de l’élévation.",
		geometricDesc: "La fonction Géométrique produit une image orthorectifiée à partir d’une définition de capteur et d’un MNT. Elle augmente la précision de position d’un jeu de données en tenant compte de l’élévation.",
		grayscaleName: "Nuances de gris",
		grayscaleSnip: "Convertit une image multibande en image monobande en nuances de gris.",
		grayscaleDesc: "Cette fonction convertit une image multibande en image monobande en nuances de gris.<div><br/>Cette fonction applique des pondérations spécifiées à chaque bande en entrée et normalise l’image en sortie. Les pondérations sont souvent appliquées car certaines bandes ont une importance variable en fonction de l’application. Ainsi, la bande bleue contient davantage de bruit que les autres bandes.</div>",
		greaterThanEqualName: "Supérieur ou égal à",
		greaterThanEqualSnip: "Effectue une opération relationnelle Supérieur ou égal à sur deux entrées, cellule par cellule. Renvoie la valeur 1 pour les cellules pour lesquelles le premier raster est supérieur ou égal au second raster, et la valeur 0 dans le cas contraire.",
		greaterThanEqualDesc: "La fonction effectue une opération relationnelle Supérieur ou égal à sur deux entrées, pixel par pixel. Elle renvoie une valeur de 1 pour les pixels pour lesquels le premier raster est supérieur ou égal au second raster, et une valeur de 0 pour les pixels pour lesquels le premier raster n’est pas supérieur ou égal au second raster.",
		greaterThanName: "Supérieur à",
		greaterThanSnip: "Effectue une opération relationnelle Supérieur à sur deux entrées, cellule par cellule. Renvoie la valeur 1 pour les cellules pour lesquelles le premier raster est supérieur au second raster, et la valeur 0 dans le cas contraire.",
		greaterThanDesc: "La fonction effectue une opération relationnelle Supérieur à sur deux entrées, pixel par pixel. Renvoie une valeur de 1 pour les pixels pour lesquels le premier raster est supérieur au second raster, et une valeur de 0 pour les pixels pour lesquels le premier raster n’est pas supérieur au second raster.",
		heatIndexName: "Indice de chaleur",
		heatIndexSnip: "Combine la température ambiante et l’humidité relative pour renvoyer la température apparente.",
		heatIndexDesc: "Cette fonction calcule la température apparente d’après la température ambiante et l’humidité relative. La température apparente est souvent décrite comme la chaleur ressentie par le corps humain.<div><br/>Cet indice peut être utile pour prévoir les problèmes médicaux, tels que les crampes musculaires, la déshydratation, les insolations ou les coups de chaleur plus graves par temps chaud et humide. Lorsque l’humidité relative est élevée, la transpiration corporelle a de plus en plus de mal à s’évaporer, ce qui prive les personnes d’un mode de rafraîchissement naturel. Les cartes des avertissements ou avis de chaleur proviennent souvent de la reclassification de l’indice de chaleur en classes. Plus la valeur de l’indice est élevée et plus il est probable qu’un avertissement soit publié au lieu d’un avis.</div>",
		hillshadeName: "Ombrage",
		hillshadeSnip: "Crée une représentation 3D de la surface qui tient compte de la position relative du soleil pour l’ombrage de l’image.",
		hillshadeDesc: "La fonction Ombrage génère une représentation 3D en nuances de gris de la surface du terrain, avec prise en compte de la position relative du soleil pour l’ombrage de l’image. <div><br/>L’ombrage est une technique de visualisation du MNT déterminée par une source d’éclairage, ainsi que par la pente et l’exposition de la surface d’élévation. Il s’agit d’une méthode qualitative de visualisation de la topographie qui ne génère pas de valeurs d’élévation absolues. </div>",
		intName: "Entier",
		intSnip: "Convertit chaque valeur de cellule d’un raster en nombre entier, par troncation.",
		intDesc: "La fonction Entier convertit chaque valeur de pixel d’un raster en nombre entier, par troncation.",
		interpolateIrregularDataName: "Interpoler les données irrégulières",
		interpolateIrregularDataSnip: "Interpole à partir de nuages de points ou de grilles irrégulières.",
		interpolateIrregularDataDesc: "Certains jeux de données netCDF ou HDF stockent leur géolocalisation sous forme de tableaux irrégulièrement espacés de pixels ou de données ponctuelles. Lors de l’ajout de ces jeux de données à un jeu de données mosaïque, la fonction Interpoler les données irrégulières utilise les données quadrillées de façon irrégulière et les rééchantillonne afin que chaque pixel soit carré et de taille uniforme.<div><br/>Lorsque vous ajoutez les variables d’un fichier netCDF ou HDF à un jeu de données mosaïque, la fonction vérifie automatiquement si les données sont organisées de façon régulière. Si ce n’est pas le cas, la fonction Interpoler les données irrégulières peut servir à convertir les données irrégulières en raster régulier. Vous pouvez changer la méthode d’interpolation et la taille de cellule utilisées dans la fonction raster Interpoler les données irrégulières. Pour les données raster régulièrement espacées, aucune interpolation n’est appliquée et les données sont lues telles quelles.</div>",
		isNullName: "Est nul",
		isNullSnip: "Détermine les valeurs des rasters en entrée qui sont NoData, cellule par cellule. Renvoie la valeur 1 si les valeurs en entrée sont NoData, et la valeur 0 si ce n’est pas le cas.",
		isNullDesc: "La fonction Est nul détermine les valeurs du raster en entrée qui sont NoData, pixel par pixel. Elle renvoie une valeur de 1 si la valeur en entrée est NoData, et une valeur de 0 pour les pixels qui ne sont pas NoData.",
		kernelDensityName: "Densité de noyau",
		kernelDensitySnip: "Calcule une grandeur par unité de carte à partir d’entités ponctuelles ou polylignes à l’aide d’une fonction de noyau pour ajuster une surface régulièrement effilée à chaque point ou polyligne.",
		kernelDensityDesc: "Cette fonction calcule une grandeur par unité de carte à partir d’entités ponctuelles ou polylignes à l’aide d’une fonction de noyau pour ajuster une surface régulièrement effilée à chaque point ou polyligne.",
		keyMetadataName: "Métadonnées clés",
		keyMetadataSnip: "Remplace ou insère les métadonnées clés d’un raster dans une chaîne de fonctions.",
		keyMetadataDesc: "Cette fonction vous permet d’insérer ou de remplacer les métadonnées clés d’un raster.<div><br/>Les informations dans les métadonnées clés permettent de simplifier certaines tâches de traitement et d’affichage de l’application, notamment grâce à certaines informations utiles telles que le nom du capteur, les noms de bandes ou la couverture nuageuse associés à l’image.</div>",
		shortestPathName: "Chemin de moindre coût",
		shortestPathSnip: "Effectue une analyse de distance de coût à l’aide d’une source et d’une destination en entrée. Cette analyse est ensuite utilisée pour déterminer le chemin de moindre coût entre une source et une destination.",
		shortestPathDesc: "La fonction Chemin de moindre coût calcule le chemin de moindre coût entre une source et une destination. Pour chaque pixel, la distance de moindre coût cumulé est calculée vers la source la plus proche sur une surface de coût. Ceci permet d’obtenir un raster en sortie qui enregistre le ou les chemins de moindre coût à partir des emplacements sélectionnés vers les pixels sources les plus proches tels que définis dans la surface de coût cumulé (en tenant compte des distances de coût).<div><br/>Chaque chemin de moindre coût se voit attribuer une valeur issue du processus de numérisation. Le pixel de fin dans le raster source d’un chemin de coût reçoit la valeur 1. Le premier chemin reçoit la valeur 3, le deuxième chemin la valeur 4, et ainsi de suite. Lorsque plusieurs chemins se rejoignent et poursuivent sur la distance restante en revenant vers une source sur le même trajet, le segment sur lequel les deux chemins sont combinés se voit attribuer la valeur 2. Vous ne pouvez pas attribuer la partie combinée du chemin à la valeur de l’un des chemins, car la partie combinée dépend des deux itinéraires.</div>",
		lessThanEqualName: "Inférieur ou égal à",
		lessThanEqualSnip: "Effectue une opération relationnelle Inférieur ou égal à sur deux entrées, cellule par cellule. Renvoie la valeur 1 pour les cellules pour lesquelles le premier raster est inférieur ou égal au second raster, et la valeur 0 dans le cas contraire.",
		lessThanEqualDesc: "La fonction effectue une opération relationnelle Inférieur ou égal à sur deux entrées, pixel par pixel. Elle renvoie une valeur de 1 pour les pixels pour lesquels le premier raster est inférieur ou égal au second raster, et une valeur de 0 si le premier raster n’est pas inférieur ou égal au second raster.",
		lessThanName: "Inférieur à",
		lessThanSnip: "Effectue une opération relationnelle Inférieur à sur deux entrées, cellule par cellule. Renvoie 1 pour les cellules pour lesquelles le premier raster est inférieur au deuxième raster, et 0 dans le cas contraire.",
		lessThanDesc: "La fonction effectue une opération relationnelle Inférieur à sur deux entrées, pixel par pixel. Elle renvoie une valeur de 1 pour les pixels pour lesquels le premier raster est inférieur au deuxième, et une valeur de 0 s’il n’est pas inférieur au deuxième.",
		lnName: "Ln",
		lnSnip: "Calcule le logarithme naturel (base e) des cellules d'un raster.",
		lnDesc: "La fonction Ln calcule le logarithme naturel (base e) de chaque pixel dans un raster.",
		log10Name: "Log10",
		log10Snip: "Calcule le logarithme base 10 des cellules d'un raster.",
		log10Desc: "La fonction Log10 calcule le logarithme de base 10 de chaque pixel dans un raster.",
		log2Name: "Log2",
		log2Snip: "Calcule le logarithme base 2 des cellules d'un raster.",
		log2Desc: "La fonction Log2 calcule le logarithme de base 2 de chaque pixel dans un raster.",
		lookupName: "Correspondance",
		lookupSnip: "Crée un nouveau raster par correspondance des valeurs trouvées dans un autre champ de la table du raster en entrée.",
		lookupDesc: "La fonction crée un nouveau raster par correspondance des valeurs trouvées dans un autre champ de la table du raster en entrée.",
		mlClassifyName: "Classification ML",
		mlClassifySnip: "Classe l’imagerie pixel par pixel. Les pixels mélangés sont attribués à l’entité possédant le pourcentage le plus élevé dans ce pixel.",
		mlClassifyDesc: "La fonction de classification ML vous permet d'effectuer une classification supervisée, à l'aide d'un algorithme de classification de vraisemblance maximale, sur un jeu de données raster ou une mosaïque. Cette fonction nécessite un fichier de signatures de classification.",
		maskName: "Masque",
		maskSnip: "Définit les valeurs que vous ne souhaitez pas afficher.",
		maskDesc: "Cette fonction raster définit les valeurs que vous ne souhaitez pas afficher dans votre raster. La fonction Masque permet de spécifier une ou plusieurs valeurs NoData ou une plage de valeurs de pixels valides. ",
		minusName: "Soustraction",
		minusSnip: "Soustraie la valeur du deuxième raster en entrée de la valeur du premier raster en entrée, cellule par cellule.",
		minusDesc: "La valeur Soustraction soustraie la valeur du deuxième raster en entrée de la valeur du premier raster en entrée, pixel par pixel.",
		modName: "Mod",
		modSnip: "Détermine le reste (modulo) du premier raster après division par le deuxième raster, cellule par cellule.",
		modDesc: "La fonction Mod détermine le reste (modulo) du premier raster après division par le deuxième raster, pixel par pixel. L’ordre des entrées est important et affecte le résultat en sortie.",
		mosaicRastersName: "Mosaïquage de rasters",
		mosaicRastersSnip: "Assemble un jeu de données raster afin de créer un seul jeu de données.",
		mosaicRastersDesc: "La fonction Mosaïquage de rasters crée une image de mosaïque à partir de plusieurs images. Lorsque les images se superposent, plusieurs méthodes permettent de déterminer les images à afficher.",
		ndviColorizedName: "NDVI colorisé",
		ndviColorizedSnip: "Crée un jeu de données monocal représentant l'état sanitaire de la végétation en s'appuyant sur la différence entre les canaux rouge et proche infrarouge.",
		ndviColorizedDesc: "La fonction NDVI colorisé applique la fonction NDVI à l’image en entrée, puis utilise une palette de couleurs ou un dégradé de couleurs pour afficher le résultat.",
		ndviName: "NDVI",
		ndviSnip: "Calcule l’indice de végétation par différence normalisée (NDVI).",
		ndviDesc: "La fonction NDVI crée un jeu de données monocal représentant l’état sanitaire de la végétation en s’appuyant sur la différence entre les canaux rouge et proche infrarouge.<div><br/>NDVI est un indice normalisé qui vous permet de générer une image illustrant la couverture végétale, également connue sous le nom de biomasse relative. Cet indice tire parti du contraste des caractéristiques de deux canaux d’un jeu de données raster multispectral : l’absorption de pigments chlorophylliens dans le canal rouge et la réflectivité élevée des matières végétales dans le canal proche infrarouge (NIR). Les valeurs NDVI négatives ou extrêmement faibles représentent des zones dépourvues de végétation, telles que les nuages, l’eau ou la neige. Les valeurs très faibles représentent des zones sans ou avec peu de végétation, comme le béton, les rochers ou le sol nu. Les valeurs modérées représentent des zones comportant des arbustes et des pâturages. Les valeurs élevées représentent des zones de forêt et une végétation luxuriante.</div>",
		negateName: "Opposé",
		negateSnip: "Change le signe (multiplie par -1) des valeurs de cellules du raster en entrée, cellule par cellule.",
		negateDesc: "La fonction Opposé change le signe (multiplie par -1) des valeurs de pixels du raster en entrée, pixel par pixel. ",
		nibbleName: "Grignotage",
		nibbleSnip: "Remplace les cellules d’un raster correspondant à un masque par les valeurs des voisins les plus proches.",
		nibbleDesc: "La fonction globale Grignotage permet aux zones sélectionnées d’un raster de se voir attribuer la valeur du voisin le plus proche. Cela est utile pour mettre à jour les zones d’un raster pour lequel les données peuvent être erronées.",
		notEqualName: "Différent de",
		notEqualSnip: "Effectue une opération relationnelle Différent de sur deux entrées, cellule par cellule. Renvoie 1 pour les cellules pour lesquelles le premier raster n'est pas égal au deuxième raster et 0 dans le cas contraire.",
		notEqualDesc: "La fonction effectue une opération relationnelle Différent de sur deux entrées, pixel par pixel. Elle renvoie une valeur de 1 pour les pixels pour lesquels le premier raster n’est pas égal au deuxième, et une valeur de 0 pour les pixels pour lesquels il est égal au deuxième.",
		pansharpeningName: "Affinage panchromatique",
		pansharpeningSnip: "Améliore artificiellement la résolution spatiale d’une image multicanal en la fusionnant avec une image panchromatique haute résolution.",
		pansharpeningDesc: "La fonction Affinage panchromatique permet de fusionner une image panchromatique (ou canal raster) de résolution supérieure avec un jeu de données raster multicanal de résolution inférieure afin d’optimiser la résolution spatiale de l’image multicanal.<div><br/>L’objectif de l’amélioration de la netteté panchromatique est de générer une image d’une qualité visuelle supérieure. Comme les techniques utilisées modifient la radiométrie et les caractéristiques spectrales de l’imagerie multicanal, il est recommandé d’utiliser ces images améliorées avec prudence dans les analyses de télédétection.</div>",
		pathAllocationName: "Allocation de distance de chemin",
		pathAllocationSnip: "Calcule la source de moindre coût pour chaque cellule, en fonction du coût cumulé le moins important sur une surface de coût, tout en tenant compte de la distance de surface et des facteurs de coût horizontaux et verticaux.",
		pathAllocationDesc: "La fonction Allocation de distance de chemin calcule pour chaque cellule la source la plus proche en fonction du plus faible coût cumulé sur une surface de coût, tout en tenant compte la distance à la surface et les facteurs de coût horizontaux et verticaux.",
		pathBackLinkName: "Antécédence de distance de chemin",
		pathBackLinkSnip: "Définit le voisin qui est la cellule suivante sur le chemin de plus faible coût cumulé menant à la source de moindre coût, tout en tenant compte de la distance de surface et des facteurs de coût horizontaux et verticaux.",
		pathBackLinkDesc: "La fonction Antécédence de distance de chemin identifie la direction du voisin qui est la cellule suivante sur le chemin de plus faible coût cumulé menant à la source la plus proche, tout en tenant compte de la distance de surface et des facteurs de coût horizontaux et verticaux.",
		pathDistanceName: "Distance de chemin",
		pathDistanceSnip: "Calcule, pour chaque cellule, la distance de plus faible coût cumulé depuis ou vers la source de moindre coût, tout en tenant compte de la distance de surface et des facteurs de coût horizontaux et verticaux.",
		pathDistanceDesc: "La fonction Distance de chemin calcule, pour chaque cellule, la distance de plus faible coût cumulé jusqu’à la source la plus proche, tout en tenant compte de la distance de surface et des facteurs de coût horizontaux et verticaux.",
		plusName: "Plus",
		plusSnip: "Additionne (fait la somme) les valeurs de deux rasters, cellule par cellule.",
		plusDesc: "La fonction Addition ajoute (fait la somme) les valeurs de deux rasters, pixel par pixel.",
		powerName: "Puissance",
		powerSnip: "Elève les valeurs des cellules d’un raster à la puissance des valeurs d’un autre raster.",
		powerDesc: "La fonction Puissance élève les valeurs de pixels d’un raster à la puissance des valeurs d’un autre raster.",
		radarCalibrationName: "Calibrage de radar",
		radarCalibrationSnip: "Convertit des données RADARSAT-2 en données de rétrodiffusion radar.",
		radarCalibrationDesc: "Cette fonction permet de calibrer l’imagerie RADARSAT-2 dans un jeu de données mosaïque ou en tant que produit raster. Le calibrage est exécuté sur les images radar, de telle sorte que les valeurs de pixels sont une véritable représentation de la rétrodiffusion radar.",
		rasterInfoName: "Informations raster",
		rasterInfoSnip: "Modifie les propriétés du raster, telles que la profondeur de couleur, la valeur NoData, la taille de cellule, l'étendue, etc.",
		rasterInfoDesc: "La fonction Informations raster permet d’ouvrir une boîte de dialogue affichant les propriétés du jeu de données raster, telles que le nombre de colonnes et de lignes, le nombre de canaux, le type de pixel, l'étendue et la référence spatiale. Vous pouvez mettre à jour ces propriétés en sélectionnant un jeu de données raster à utiliser comme modèle. ",
		rasterizeAttributesName: "Rastériser les attributs",
		rasterizeAttributesSnip: "Enrichit un raster via des canaux supplémentaires dérivés de valeurs de certains attributs d’une table externe ou d’un service d’entités.",
		rasterizeAttributesDesc: "La fonction Rastériser les attributs raster enrichit un raster en ajoutant des canaux dérivés de valeurs d’attributs spécifiés, à partir d’une table externe ou d’un service d’entités. Vous pouvez spécifier un raster de zones et l’attribut ID de zone associé pour activer la recherche régionale.",
		rasterizeFeatureClassName: "Rasteriser les entités",
		rasterizeFeatureClassSnip: "Convertit les entités en raster.",
		rasterizeFeatureClassDesc: "Cette fonction convertit des données de classes d’entités surfaciques, polylignes et points en couche raster.<div><br/>Des valeurs de pixels sont attribuées aux entités en fonction de l’OBJECTID des entités (par défaut). Les valeurs de pixels peuvent également reposer sur un champ de valeurs définies par l’utilisateur dans la table attributaire des entités en entrée.</div>",
		recastName: "Redéfinir",
		recastSnip: "Modifie les paramètres d’une chaîne de fonctions dans un jeu de données mosaïque ou un service d’imagerie. Cette option est souvent utilisée avec les jeux de données LAS afin d’éviter de créer un jeu de données mosaïque séparé pour différentes représentations d’un terrain.",
		recastDesc: "La fonction Redéfinir est utilisée pour modifier dynamiquement le paramètre de fonction utilisé dans une mosaïque ou un service d'imagerie sans conserver physiquement les modifications.",
		regionGroupName: "Groupes par régions",
		regionGroupSnip: "Pour chaque cellule en sortie, l'identité de la région connectée à laquelle appartient la cellule est enregistrée. Un numéro unique est attribué à chaque région.",
		regionGroupDesc: "La fonction globale Groupes par régions enregistre, pour chaque cellule en sortie, l’identité de la région connectée à laquelle cette cellule appartient. Un numéro unique est attribué à chaque région.<div><br/>La première région analysée reçoit la valeur un, la deuxième, la valeur deux, etc., jusqu’à ce qu’une valeur soit affectée à toutes les régions. Le balayage s'effectue de gauche à droite, de haut en bas. Les valeurs affectées aux zones en sortie dépendent du moment où elles sont détectées par le processus de numérisation.</div>",
		regionGrowName: "Étendre la région",
		regionGrowSnip: "Etend les régions à partir de points d'origine.",
		regionGrowDesc: "La fonction Étendre la région regroupe les pixels voisins en fonction du rayon spécifié par rapport au point d’origine. Une valeur de remplissage spécifique est attribuée au groupe de pixels, ou objet.",
		remapName: "Classification",
		remapSnip: "Change les valeurs des pixels en attribuant de nouvelles valeurs à des plages de valeurs de pixel ou en utilisant une table externe.",
		remapDesc: "La fonction Classification vous permet de modifier ou de reclasser les valeurs des pixels des données raster. Cette opération peut s’effectuer en spécifiant une plage de valeurs de pixels à apparier à une valeur de pixel en sortie ou en utilisant une table pour apparier les valeurs de pixels à une valeur de pixel en sortie.",
		reprojectName: "Reprojeter",
		reprojectSnip: "Modifie la projection d'un jeu de données raster, d'une mosaïque ou d'un élément raster dans une mosaïque. Elle permet également de rééchantillonner les données pour définir une nouvelle taille de cellule et une origine.",
		reprojectDesc: "La fonction de reprojection modifie la projection d’un jeu de données raster, d’un jeu de données mosaïque ou d’un élément raster dans un jeu de données mosaïque. Elle permet également de rééchantillonner les données pour définir une nouvelle taille de cellule et une origine.<div><br/>La fonction Reprojeter peut servir lors de la création d’un cache à partir d’un jeu de données raster ou d’un de données mosaïque qui ne figure pas dans la projection requise. Par exemple, lorsque vous créez un service d’imagerie en cache que des applications peuvent intégrer à d’autres services en cache, il est important qu’ils figurent tous dans la même projection. Il s’agit souvent d’une projection Web Mercator. Comme le jeu de données mosaïque ne peut pas être reprojeté, vous pouvez procéder de l’une des manières suivantes—créez un jeu de données référencé à partir de votre jeu de données mosaïque dans la projection requise ou ajoutez la fonction Reprojeter à la chaîne de fonctions du jeu de données mosaïque. Un autre exemple utilise cette fonction sur l'élément raster d'un jeu de données mosaïque. Lorsque vous faites appel à la fonction Raster mis en cache, vous pouvez insérer la fonction Reprojeter pour créer le cache dans la nouvelle projection. Les éléments raster d'une mosaïque peuvent être mis en cache lorsque le traitement est intense et que vous essayez de publier un service d'imagerie qui est rapide, sans le mettre totalement en cache.</div>",
		resampleName: "Ré-échantillonner",
		resampleSnip: "Modifie la taille de cellule d'un raster.",
		resampleDesc: "La fonction Ré-échantillonner modifie la taille de cellule, le type de rééchantillonnage ou les deux.<div><br/>Elle doit être utilisée uniquement avec des besoins en calcul spécifiques. Par exemple, si vous calculez la grandeur-direction du vent ou du courant qui nécessite un rééchantillonnage à partir de la résolution source.</div>",
		roundDownName: "Arrondi inférieur",
		roundDownSnip: "Renvoie la prochaine valeur entière inférieure, simplement représentée en tant que virgule flottante, pour chaque cellule d’un raster.",
		roundDownDesc: "La fonction Arrondi inférieur renvoie le prochain entier inférieur, en tant que valeur de virgule flottante, pour chaque pixel d’un raster.",
		roundUpName: "Arrondi supérieur",
		roundUpSnip: "Renvoie la prochaine valeur entière supérieure, simplement représentée en tant que virgule flottante, pour chaque cellule d’un raster.",
		roundUpDesc: "La fonction Arrondi supérieur renvoie le prochain entier supérieur, en tant que valeur de virgule flottante, pour chaque pixel d’un raster.",
		segmentMeanShiftName: "Décalage moyen de segment",
		segmentMeanShiftSnip: "Regroupe les pixels adjacents qui présentent des caractéristiques spectrales similaires en segments.",
		segmentMeanShiftDesc: "Cette fonction identifie les objets, entités ou segments dans votre imagerie en regroupant les pixels adjacents qui présentent des caractéristiques spectrales et spatiales similaires. Vous pouvez contrôler la quantité de lissage spatial et spectral pour définir des entités qui vous intéressent.",
		s1RadiometricCalibrationName: "Calibrage radiométrique Sentinel-1",
		s1RadiometricCalibrationSnip: "Effectue différents types de calibrage radiométrique sur les données de Sentinel-1.",
		s1RadiometricCalibrationDesc: "Cette fonction raster effectue trois calibrages différents pour les jeux de données Sentinel 1, notamment Bêta zéro et Gamma, et génère le jeu de données calibré. L’objectif du calibrage SAR est de fournir l’imagerie dans laquelle les valeurs de pixels peuvent être directement associées à la rétrodiffusion radar de la scène. Bien que l’imagerie SAR non calibrée soit suffisante en termes de qualité, les images SAR calibrées sont essentielles à l’utilisation quantitative des données SAR.<div><br/>Le traitement standard des données SAR, qui produit des images de niveau 1, n’inclut pas les corrections radiométriques et il demeure une déformation radiométrique significative. Il est par conséquent nécessaire d’appliquer une correction radiométrique aux images SAR afin que les valeurs de pixels des images représentent réellement la rétrodiffusion radar de la surface réfléchissante. La correction radiométrique est également nécessaire pour comparer des images SAR acquises avec différents capteurs, ou acquises à partir du même capteur mais à différents moments, dans différents modes ou traitées par différents capteurs.</div>",
		s1ThermalNoiseRemovalName: "Suppression de bruit thermique Sentinel-1",
		s1ThermalNoiseRemovalSnip: "Supprime le bruit thermique des données de Sentinel-1.",
		s1ThermalNoiseRemovalDesc: "La correction de bruit thermique peut être appliquée aux produits SLC (Single Look Complex) Sentinel-1 de niveau 1 et GRD (Ground Range Detection) de niveau 1 n’ayant pas déjà été corrigés. L’opérateur peut également éliminer cette correction en fonction des annotations de produit afin de réintroduire le signal de bruit ayant été supprimé pour générer le produit d’origine. Les annotations de produit seront mises à jour conformément pour permettre une nouvelle application de la correction. ",
		setNullName: "SetNull",
		setNullSnip: "L’outil SetNull définit les emplacements de cellule identifiés sur la valeur NoData en fonction des critères indiqués. Il renvoie une valeur NoData si une évaluation conditionnelle est vraie et renvoie la valeur spécifiée par un autre raster si celle-ci est fausse.",
		setNullDesc: "La fonction SetNull définit les pixels identifiés sur la valeur NoData en fonction des critères indiqués. Elle renvoie une valeur NoData si une évaluation conditionnelle est vraie (1) et renvoie la valeur spécifiée dans le raster faux si une évaluation conditionnelle est fausse (0). Ce critère est spécifié par la sortie d’une fonction mathématique logique, qui sera le raster en entrée.",
		shadedReliefName: "Relief ombré",
		shadedReliefSnip: "Crée une représentation 3D multicanal, codée par couleur, de la surface, en tenant compte de la position relative du soleil pour ombrer l'image.",
		shadedReliefDesc: "La fonction Relief ombré crée une représentation 3D en couleur du terrain en combinant les images des méthodes Précodé par altitude et Ombrage. Cette fonction utilise les propriétés d'altitude et d'azimut pour spécifier la position du soleil.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Calcule le sinus hyperbolique des cellules d’un raster.",
		sinHDesc: "La fonction calcule le sinus hyperbolique des pixels dans un raster.",
		sinName: "Sin",
		sinSnip: "Calcule le sinus des cellules d’un raster.",
		sinDesc: "La fonction calcule le sinus des pixels dans un raster.",
		slopeName: "Pente",
		slopeSnip: "Calcule le taux de modification entre la valeur d'un pixel et des pixels adjacents.",
		slopeDesc: "Cette fonction raster calcule la pente, qui correspond au taux de changement d’altitude pour chaque cellule du modèle numérique de terrain (MNE). C'est la première dérivée d'un DME.<div><br/>Cette fonction utilise une fonction atan() accélérée. Elle est six fois plus rapide, et l'erreur d'approximation est toujours inférieure à 0,3 degré.</div>",
		speckleName: "Granularité",
		speckleSnip: "Propose des filtres destinés à réduire le bruit des jeux de données de radar à ouverture synthétique.",
		speckleDesc: "La granularité correspond au bruit haute fréquence des données radar. Les images générées par les systèmes radar d’ouverture synthétique (SAR, Synthetic Aperture Radar) sont fréquemment sujettes aux effets de granularité en raison du traitement des signaux dispersés et de l’interférence des ondes électromagnétiques dispersées à partir des surfaces ou des objets. Cette fonction Granularité filtre le jeu de données radar pour atténuer le bruit tout en conservant les tronçons ou les entités pointues de l’image.",
		spectralConversionName: "Conversion spectrale",
		spectralConversionSnip: "Applique une matrice à une image multicanal.",
		spectralConversionDesc: "La fonction Conversion spectrale applique une matrice à une image multicanal pour affecter les couleurs de la sortie.<div><br/>Certains capteurs ne collectent pas les canaux bleus en raison de la faiblesse du rapport signal/bruit. Elle permet, par exemple, de convertir une image infrarouge de couleurs fausses en une image de couleurs pseudo naturelles.</div>",
		squareRootName: "Racine carrée",
		squareRootSnip: "Calcule la racine carrée des valeurs de cellules d’un raster.",
		squareRootDesc: "La fonction Racine carrée calcule la racine carrée des valeurs de pixels dans un raster.",
		squareName: "Carré",
		squareSnip: "Calcule le carré des valeurs de cellule d’un raster.",
		squareDesc: "La fonction Carré calcule le carré des valeurs de pixels dans un raster.",
		statisticsHistogramName: "Statistiques et histogramme",
		statisticsHistogramSnip: "Définit ou associe des statistiques et un histogramme.",
		statisticsHistogramDesc: "La fonction Statistiques et histogramme permet de définir les statistiques et l'histogramme d'un raster. Vous pouvez insérer cette fonction à la fin de la chaîne de fonctions pour décrire les statistiques et l’histogramme d’un modèle de fonction raster. Cela peut s'avérer nécessaire pour contrôler l'affichage par défaut du résultat du traitement, plus particulièrement lorsque vous définissez une chaîne de fonctions contenant de nombreuses fonctions.<div><br/>Vous pouvez définir les statistiques en saisissant les valeurs ou en les important d’un jeu de données raster ou d’un fichier XML. Les histogrammes peuvent uniquement être définis en important un fichier.</div>",
		statisticsName: "Statistiques",
		statisticsSnip: "Calcule les statistiques focales de chaque pixel d’une image en fonction d’un voisinage focal défini.",
		statisticsDesc: "La fonction Statistiques calcule des statistiques focales pour chaque pixel d'une image, en fonction d'un voisinage focal défini.<div><br/>La fonction Statistique peut être utilisée pour remplir les lignes supprimées dans une image. Les lignes supprimées sont souvent dues à des problèmes de capteur où les données ne sont pas collectées. Cela s’est déjà produit avec le capteur Enhanced Thematic Mapper Plus (ETM+) de Landsat 7, par exemple. Ces données manquantes engendrent des problèmes d'analyse mais aussi d'affichage des images. Il semble qu'il y ait peu de solutions lorsque vous utilisez des images pour analyse ; toutefois, une image superposée peut servir à remplacer le contenu manquant. Vous pouvez procéder de la même manière si l'image est utilisée à des fins de visualisation. Cependant, comme vous ne disposez pas toujours d'une image supplémentaire pour remplir le contenu manquant, vous devez l'obtenir à partir des données existantes.</div>",
		streamLinkName: "Liaison d’écoulement",
		streamLinkSnip: "Attribue des valeurs uniques aux sections d'un réseau linéaire raster entre les intersections.",
		streamLinkDesc: "La fonction globale Liaison d’écoulement attribue des valeurs uniques aux sections d’un réseau linéaire raster entre les intersections.<div><br/>Les liaisons sont des sections d’un canal d’écoulement reliant deux jonctions successives, une jonction et l’orifice ou une jonction et la ligne de partage des eaux. En hydrologie, ces segments de cours d’eau se nomment des sections. Une jonction est liée à un point d’écoulement et permet de délimiter un bassin versant ou un sous-bassin de drainage.</div>",
		stretchName: "Étirer",
		stretchSnip: "Améliore une image en ajustant la plage des valeurs affichées. Cela ne modifie en rien les valeurs de pixels sous-jacentes. Si la valeur d’un pixel ne figure pas dans la plage spécifiée, il apparaît comme la valeur minimale ou maximale.",
		stretchDesc: "La fonction Étirer améliore une image en changeant ses propriétés, telles que la luminosité, le contraste et la valeur gamma par l’intermédiaire de différents types d’étirement. Cette fonction utilise les statistiques des rasters dans le jeu de données mosaïque. Par conséquent, si vous utilisez cette fonction, vous devez vous assurer que les statistiques ont été calculées.<div><br/>Le type d’étirement définit un étirement de l’histogramme à appliquer aux rasters pour améliorer leur apparence. L'étirement améliore l'apparence des données en répartissant les valeurs de pixel le long d'un histogramme à partir des valeurs maximale et minimale définies par leur profondeur de couleur. </div>",
		swathName: "Envelopper",
		swathSnip: "Interpole à partir de grilles irrégulières ou de données d'enveloppe.",
		swathDesc: "Certains jeux de données netCDF ou HDF stockent leur géolocalisation sous forme de tableaux irrégulièrement espacés. Lors de l’ajout de ces jeux de données à un jeu de données mosaïque, la fonction Envelopper utilise les données quadrillées de façon irrégulière pour les rééchantillonner afin que chaque pixel soit carré et de taille uniforme.<div><br/>Lorsque vous ajoutez les variables d’un fichier netCDF ou HDF à un jeu de données mosaïque, la fonction vérifie automatiquement si les données sont organisées de façon régulière. Si ce n'est pas le cas, la fonction Envelopper est appliquée automatiquement pour convertir le raster irrégulier en points, puis en raster quadrillé régulièrement. Vous pouvez changer la méthode d'interpolation et la taille des cellules utilisées dans la fonction raster Envelopper. Pour les données raster régulièrement espacées, aucune interpolation n'est appliquée et les données sont lues telles quelles.</div>",
		tanHName: "TanH",
		tanHSnip: "Calcule la tangente hyperbolique des cellules d'un raster.",
		tanHDesc: "La fonction calcule la tangente hyperbolique des pixels dans un raster.",
		tanName: "Tan",
		tanSnip: "Calcule la tangente des cellules d'un raster.",
		tanDesc: "La fonction calcule la tangente des pixels dans un raster. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Calcule les niveaux de végétation, d’humidité et de luminosité. Cette technique s’appuie sur des coefficients qui doivent être calculés spécifiquement pour un capteur.",
		tasseledCapDesc: "La transformation Tasseled Cap (Kauth-Thomas) est conçue pour analyser et apparier les modifications liées au développement urbain et à la phénoménologie de la végétation détectées par différents capteurs satellitaires. On parle de transformation Tasseled Cap pour faire référence à la forme que prend la répartition graphique des données. Cette transformation a fourni la raison d'être des motifs détectés dans les données Landsat MSS des champs agricoles, en tant que fonction du cycle de vie d'une culture. La tendance principale est la suivante : lors de la croissance d’une plante, du stade de graine jusqu’à sa maturité, on note une augmentation importante des infrarouges proches et une diminution de la réflectance des infrarouges, selon la couleur du sol.<div><br/>L’utilité de cette transformation ne se limite plus à la surveillance des cultures ; on l’applique désormais à l’analyse et à la cartographie de la végétation afin qu’il soit possible de prendre en charge diverses applications (foresterie, gestion des sites industriels, cartographie et gestion de l’écosystème, création d’inventaire et surveillance du stockage de carbone et des crédits, développement urbain, etc.). Elle a également permis d’étendre la prise en charge, qui inclut Landsat MSS ainsi que d’autres systèmes satellite connus, comme les capteurs multispectraux Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 et RapidEye.</div>",
		timesName: "Multiplier",
		timesSnip: "Multiplie les valeurs de deux rasters cellule par cellule.",
		timesDesc: "La fonction Multiplication multiplie la valeur de deux rasters, pixel par pixel.",
		transposeBitsName: "Transposer des bits",
		transposeBitsSnip: "Décompresse les bits du pixel en entrée et les apparie à des bits spécifiés dans le pixel en sortie. L’objectif de cette fonction est de manipuler les bits provenant de certaines entrées, telles que les produits de canaux de qualité Landsat 8.",
		transposeBitsDesc: "La fonction Transposer des bits décompresse les bits du pixel en entrée et les apparie à des bits spécifiés dans le pixel en sortie. L'objectif de cette fonction est de manipuler les bits provenant de certaine entrées, telles que les produits de canaux de qualité Landsat 8.",
		unitConversionName: "Conversion des unités",
		unitConversionSnip: "Modifie les valeurs d'une unité de mesure en une autre.",
		unitConversionDesc: "Cette fonction convertit les pixels d’une unité en une autre. Elle prend en charge la conversion de distances, vitesses et températures.",
		vectorFieldName: "Champ vectoriel",
		vectorFieldSnip: "Affiche les jeux de données avec la grandeur (u) et la direction (v) représentées sous forme de flèches, où la grandeur est représentée par la taille et la direction par l'angle de la flèche.",
		vectorFieldDesc: "La fonction Champ vectoriel permet d’intégrer et de convertir deux rasters dans un raster à deux canaux dont le type de données est Magnitude-Direction ou U-V.<div><br/>La valeur U est parfois appelée vitesse zonale et la valeur V, vitesse méridionale.</div>",
		viewshed2Name: "Viewshed (Champ de vision)",
		viewshed2Snip: "Détermine les emplacements de surfaces raster visibles pour un ensemble d'entités d'observation, à l'aide de méthodes géodésiques.",
		viewshed2Desc: "La fonction Champ de vision détermine les emplacements des surfaces raster visibles pour un ensemble d’entités d’observation, à l’aide de méthodes géodésiques.<div><br/>La visibilité du centre de chaque pixel est déterminée par un test de ligne de visée entre la cible et chaque point d’observation. Si un point d'observation peut voir la cible au centre du pixel, celui-ci est considéré comme visible. Cet outil tient toujours compte de la courbure de la Terre pour déterminer la visibilité.</div>",
		watershedName: "Bassins versants",
		watershedSnip: "Détermine la surface de captation au-dessus d’un ensemble de cellules dans un raster.",
		watershedDesc: "La fonction globale Bassins versants détermine la surface de captation au-dessus d’un ensemble de cellules dans un raster. Les bassins versants sont délimités à partir d’un raster de direction de flux qui identifie la direction de flux à partir de chaque pixel.",
		weightedOverlayName: "Superposition pondérée",
		weightedOverlaySnip: "Superpose plusieurs rasters en utilisant une échelle de mesure commune et les pondère en fonction de leur importance.",
		weightedOverlayDesc: "Cette fonction permet de superposer plusieurs rasters à l'aide d’une échelle de mesure commune et de les pondérer selon leur importance.",
		weightedSumName: "Somme pondérée",
		weightedSumSnip: "Pondère et ajoute une matrice de rasters, cellule par cellule.",
		weightedSumDesc: "La fonction Somme pondérée vous permet de superposer plusieurs rasters, en multipliant chacun par sa pondération donnée et en les additionnant.",
		windchillName: "Température ressentie",
		windchillSnip: "Combine la température de l'air ambiant et la vitesse du vent pour calculer le facteur de température ressentie.",
		windchillDesc: "La fonction de température ressentie est utile pour identifier les conditions hivernales dangereuses qui, selon la durée d’exposition aux éléments, peuvent entraîner des engelures ou même une hypothermie. La température ressentie mesure le niveau de froid ressenti par un individu lorsque le vent est pris en compte avec des températures déjà basses. Plus la vitesse du vent est élevée, plus la chaleur corporelle baisse rapidement et plus le froid est ressenti.",
		zonalRemapName: "Classification zonale",
		zonalRemapSnip: "Classez les pixels dans un raster en fonction des zones définies dans un autre raster et de l'appariement des valeurs dépendant des zones, qui est défini dans une table.",
		zonalRemapDesc: "Cette fonction permet de classer les pixels dans un raster en fonction des zones définies dans un autre raster et de l'appariement des valeurs dépendant des zones, qui est défini dans une table.",
		zonalStatisticsName: "Statistiques zonales",
		zonalStatisticsSnip: "Calcule les statistiques des valeurs d’un raster dans chaque zone d’un autre jeu de données.",
		zonalStatisticsDesc: "La fonction calcule des statistiques sur les valeurs d’un raster dans les zones d’un autre jeu de données. Une zone est définie comme l’ensemble des surfaces en entrée ayant la même valeur. Ces surfaces ne sont pas nécessairement contiguës. Lorsque la zone et la valeur en entrée sont toutes les deux des rasters de même résolution, elles sont utilisées directement. Si les résolutions sont différentes, un rééchantillonnage interne est appliqué pour les faire correspondre avant que l'opération zonale soit effectuée.",
		flowLengthName: "Longueur de l'écoulement",
		flowLengthSnip: "Permet de calculer la distance en amont ou en aval, ou la distance pondérée, le long du chemin de flux pour chaque cellule.",
		flowLengthDesc: "Il s’agit d’une fonction raster globale. Cette fonction crée une couche raster de distance en amont ou en aval, ou de distance pondérée, le long du chemin de flux pour chaque cellule.<div><br/>La fonction Longueur d’écoulement permet essentiellement de calculer la longueur du chemin de flux dans un bassin donné. Cette mesure permet souvent de calculer le temps de concentration d'un bassin. Ceci est effectué à l’aide de l’option Upstream (En amont). Vous pouvez également employer cette fonction pour créer des diagrammes représentant les distances-surfaces relatives aux précipitations et aux écoulements prévisionnels, à l’aide d’un raster de pondération sous la forme d’une impédance en rapport avec le mouvement en aval.</div>",
		streamOrderName: "Ordre d'écoulement",
		streamOrderSnip: "Attribue un ordre numérique aux segments d’un raster représentant les branches d’un réseau linéaire",
		streamOrderDesc: "Il s’agit d’une fonction raster globale. Cette fonction crée une couche raster qui attribue un ordre numérique aux segments d’un raster représentant les branches d’un réseau linéaire.<div><br/>La sortie de l’outil Ordre d’écoulement sera de meilleure qualité si la couche de raster d’écoulement en entrée et la couche de raster de direction de flux en entrée sont dérivées de la même surface. Si le raster d'écoulement est dérivé d'un jeu de données de flux rasterisé, la sortie peut ne pas être utilisable du fait que, cellule par cellule, la direction ne correspondra pas à la localisation des cellules de flux. Les résultats obtenus avec la fonction Accumulation de flux peuvent être utilisés pour créer un raster de réseau hydrographique en fixant un seuil pour sélectionner les cellules avec une accumulation de flux élevée. Par exemple, les cellules dans lesquelles plus de 100 cellules s’écoulent sont utilisées pour définir le réseau hydrographique. Utilisez la fonction Con ou SetNull pour créer un raster de réseau hydrographique où des valeurs d’accumulation de flux de 100 ou plus passent à 1, et le reste est mis à l’arrière-plan (NoData). Le réseau hydrographique obtenu peut être utilisé dans l’outil Ordre d’écoulement. Cette fonction prend uniquement en charge une couche raster de direction de flux en entrée D8. Les directions de flux D8 peuvent être créées à l’aide de la fonction Direction de flux et exécutées avec la direction de flux par défaut de type D8.</div>",
		snapPourPointName: "Capture des points d’écoulement",
		snapPourPointSnip: "Capture les points d’écoulement dans la cellule d’accumulation de flux la plus élevée, selon une distance donnée",
		snapPourPointDesc: "Il s’agit d’une fonction raster globale. Cette fonction capture les points d’écoulement dans la cellule d’accumulation de flux la plus élevée, selon une distance donnée.<div><br/>L’outil Capture des points d’écoulement permet d’établir une sélection de points d’accumulation de flux élevée lorsque vous délimitez des bassins de drainage à l’aide de l’outil Bassins versants. L’outil Capture des points d’écoulement recherche, au sein d’un périmètre de capture autour des points d’écoulement spécifiés, la cellule qui présente l’accumulation de flux la plus élevée et déplace le point d’écoulement à cet endroit. La sortie est une couche raster d’entiers lorsque les localisations de point d’écoulement originales ont été accrochées aux lieux d’accumulation de flux la plus élevée.</div>",
		sinkName: "Cuvettes",
		sinkSnip: "Crée un raster identifiant toutes les cuvettes ou zones de drainage interne",
		sinkDesc: "Il s’agit d’une fonction raster globale. Cette fonction crée une couche raster identifiant toutes les cuvettes ou zones de drainage interne. Une cuvette est une cellule ou un ensemble de cellules limitrophes dont la direction de flux ne peut pas se voir attribuer l'une des huit valeurs valides dans un raster de direction de flux. Cela peut survenir lorsque toutes les cellules voisines sont plus élevées que la cellule de traitement ou lorsque deux cellules s'écoulent en boucle l’une dans l’autre.<div><br/>La fonction Cuvette prend uniquement en charge une couche raster de direction de flux en entrée D8. Les directions de flux D8 peuvent être créées à l’aide de la fonction Direction de flux et exécutées avec le type de direction de flux par défaut D8. La sortie de la fonction Cuvette est un raster d’entiers dans lequel chaque cuvette se voit attribuer une valeur unique. Ces valeurs uniques ont une plage comprise entre un et le nombre total de cuvettes. Par exemple, si le nombre total de cuvettes est 1 000, la plage de valeurs uniques est comprise entre 1 et 1 000.</div>",
		aggregateName: "Agréger",
		aggregateSnip: "Génère une version du raster à une résolution inférieure.",
		aggregateDesc: "L’outil Agréger rééchantillonne un raster en entrée avec une résolution plus grossière s’appuyant sur une stratégie d’agrégation spécifique. Chaque cellule en sortie contient la somme, le minimum, le maximum, la moyenne ou la médiane des cellules en entrée qui figurent dans l'étendue de cette cellule.<div><br/>Vous pouvez spécifiez le facteur de multiplication de la taille de cellule du raster en entrée. Par exemple, une valeur de facteur de cellule de 3 entraîne une taille de cellule en sortie trois fois supérieure à celle du raster en entrée. Vous pouvez définir la manière de traiter l’étendue de la sortie si le nombre de lignes ou de colonnes en entrée n’est pas un multiple du facteur de cellule. Par défaut, les limites supérieure et droite seront repoussées pour couvrir une étendue spatiale plus large que celle du raster en entrée de sorte que toutes les cellules en entrée soient traitées. Les limites supérieure et de droite peuvent également être rapprochées pour couvrir une étendue plus réduite, de sorte que le nombre de lignes ou de colonnes traitées corresponde exactement à un multiple du facteur de cellule. Vous pouvez définir la manière dont les cellules NoData doivent être traitées par le calcul d’agrégation. Le mécanisme par défaut est le suivant : les cellules NoData en entrée comprises dans l’étendue spatiale d’une cellule plus grande dans le raster en sortie seront ignorées lors de la détermination de la valeur de cette cellule en sortie. Vous pouvez également préciser que si une seule cellule NoData est incluse dans l’étendue spatiale d’une cellule en sortie, la valeur de cette cellule dans le raster en sortie est NoData.</div>",
		ccdcName: "Analyse CCDC",
		ccdcSnip: "Évalue les modifications dans les valeurs de pixels au fil du temps à l’aide de l’algorithme CCDC (Continuous Change Detection and Classification) et génère les résultats du modèle.",
		ccdcDesc: "La fonction CCDC évalue les modifications dans les valeurs de pixels au fil du temps à l’aide de l’algorithme CCDC (Continuous Change Detection and Classification) et génère un raster multidimensionnel contenant les résultats du modèle. Elle est prise en charge uniquement avec la fonction de détection des modifications à l’aide du raster d’analyse des changements dans un modèle de fonction raster. Pour produire un raster en sortie, connectez la fonction d’analyse CCDC à la fonction de détection des modifications à l’aide de l’analyse des changements, enregistrez un modèle de fonction raster et exécutez l’analyse raster avec le modèle de fonction.<div><br/>Cette fonction utilise l’algorithme CCDC (Continuous Change Detection and Classification) pour évaluer les modifications dans les valeurs de pixels au fil du temps pour une pile d’images. Dans une série chronologique d’images optiques ou dérivées (NDVI, par exemple), les valeurs de pixels peuvent fluctuer pour diverses raisons : 1. Modifications saisonnières -- Les modifications des valeurs de pixels reflètent les modifications de la végétation liées à la variabilité saisonnière des températures et des précipitations. Dans l’hémisphère Nord, par exemple, il faut s’attendre à observer une densité de végétation verte plus forte pendant l’été par rapport à l’hiver ; 2. Modifications graduelles -- Les modifications des valeurs de pixels reflètent les tendances de la végétation ou de la surface de l’eau liées à la variabilité climatique ou aux pratiques à long terme de la gestion des sols. Ainsi, la superficie d’un sol nu peut augmenter progressivement en raison du déclin à long terme des précipitations ; et 3. Changements abrupts -- Les modifications des valeurs de pixels reflètent des changements de l’occupation du sol liés à des événements soudains, tels que la déforestation, le développement urbain, les catastrophes naturelles, etc. L’algorithme CCDC identifie les trois types de modifications dans le but principal d’identifier des changements abrupts. La régression harmonique et les modèles de tendance sont ajustés aux données pour estimer les modifications saisonnières et les modifications graduelles tandis que les déviations soudaines par rapport aux modèles de tendance sont des indications d’un changement abrupt.<div><br/>À l’origine, l’algorithme CCDC a été conçu pour les données Landsat TM, Landsat ETM+ et Landsat OLI relatives à la réflectance des surfaces ou à la température de brillance. Toutefois, la fonction de détection des modifications à l’aide du raster d’analyse des changements conjuguée à cette fonction détecte les modifications d’images multicanaux à partir de n’importe quel capteur pris en charge, ainsi que les images dérivées monocanales telles que les indices de canaux. Par exemple, vous pouvez effectuer une détection continue des modifications sur un raster d’indice de végétation par différence normalisée (NDVI), car les changements abrupts dans le NDVI peuvent être le signe d’une déforestation.</div>",
		computeChangeName: "Calculer les modifications",
		computeChangeSnip: "Calcule la différence entre deux jeux de données raster catégoriels ou continus.",
		computeChangeDesc: "La fonction Calculer les modifications permet d’énumérer les différences entre deux rasters classifiés en matière d’analyse des modifications de l’occupation du sol ; il permet également d’examiner les modifications entre deux rasters continus monocanaux tels que l’élévation, la température, le couvert forestier, etc.",
		detectChangeName: "Détecter les modifications à l’aide de l’analyse des changements",
		detectChangeSnip: "Génère une couche raster contenant des informations sur les modifications de pixels à l’aide du raster d’analyse des changements en sortie.",
		detectChangeDesc: "<div>La fonction Détecter les changements à l’aide de l’analyse des changements génère une couche raster contenant des informations relatives aux dates de changement des pixels avec le raster d’analyse des changements. Le raster d’analyse des changements doit être généré par l’outil Analyser les modifications avec l’algorithme CCDC ou l’outil Analyser les modifications avec l’algorithme LandTrendr, ou avec la fonction raster Analyse CCDC ou la fonction raster Analyse LandTrendr.</div><br><div>Cette fonction raster peut être associée à la fonction raster Analyse CCDC ou à la fonction raster Analyse LandTrendr dans un modèle de fonction raster. Pour produire une sortie raster permanente, connectez la sortie de la fonction Analyse CCDC ou Analyse LandTrendr à la fonction Détecter les modifications à l’aide du raster d’analyse des changements, enregistrez-les dans un modèle de fonction raster, puis exécutez l’analyse raster avec le modèle.</div><br><div>Le paramètre <strong>Type de changement</strong> indique les informations générées. Les informations sont extraites du raster d’analyse des changements. Lorsque vous exécutez cette fonction sur la sortie de la fonction/l’outil CCDC, vous avez le choix entre les options suivantes :</div><ul><li><strong>Heure du changement le plus récent</strong> : date et heure les plus récentes auxquelles un pixel a été marqué comme modifié.</li><li><strong>Heure du premier changement</strong> : date et heure les plus anciennes auxquelles un pixel a été marqué comme modifié.</li><li><strong>Heure du plus grand changement</strong> : date et heure auxquelles le changement calculé était le plus important pour un pixel.</li><li> <strong>Nombre de changements</strong> : nombre total de fois où le pixel a été modifié.</li></ul><div>Lorsque vous exécutez cette fonction sur la sortie de la fonction/l’outil LandTrendr, les options suivantes supplémentaires sont disponibles :</div><ul><li><strong>Heure du plus long changement</strong> : date à laquelle un pixel a été marqué comme modifié, au début ou à la fin de la plus longue période de changement.</li><li><strong>Heure du plus court changement</strong> : date à laquelle un pixel a été marqué comme modifié, au début ou à la fin de la plus courte période de changement.</li><li><strong>Heure du changement le plus rapide</strong> : date à laquelle un pixel a été marqué comme modifié, au début ou à la fin de la période de changement la plus rapide.</li><li><strong>Heure du changement le plus lent</strong> : date à laquelle un pixel a été marqué comme modifié, au début ou à la fin de la période de changement la plus lente.</li></ul><div>Le raster en sortie est un raster multicanal dans lequel chaque canal contient des informations sur les changements selon le type de changement sélectionné et le nombre maximal de changements spécifié. Par exemple, si <strong>Type de changement</strong> est défini sur <strong>Heure du premier changement</strong> et si <strong>Nombre maximal de changements</strong> est défini sur 2, la fonction calcule les deux dates les plus anciennes du changement tout au long de la série chronologique pour chaque pixel. Le résultat est un raster dans lequel le premier canal contient les dates du premier changement par pixel et le deuxième canal contient les dates du deuxième changement par pixel.</div><br><div>Lors de l’application de cette fonction sur la sortie des outils LandTrendr, vous pouvez choisir d’extraire la date marquant le début d’un changement ou la fin d’un changement à l’aide du paramètre <strong>Date de segment</strong>. Par exemple, pour comprendre comment a débuté le plus récent changement dans la série chronologique, définissez <strong>Type de changement</strong> sur <strong>Heure du changement le plus récent</strong> et <strong>Date du segment</strong> sur <strong>Début du segment</strong>.</div><br><div>Utilisez les paramètres de filtrage suivants pour extraire d’autres dates de changement spécifiques de votre raster d’analyse des changements :</div><ul><li><strong>Filtrer par année</strong> : identifiez les changements survenus au cours d’une période spécifique ; par exemple, lorsque vous recherchez les changements survenus dans un paysage au cours de 5 années de sécheresse.</li><li><strong>Filtrer par durée</strong> : identifiez les changements survenus sur un nombre d’années spécifique ; par exemple, lorsque vous recherchez uniquement les changements soudains survenus sur un ou deux ans. Vous pouvez calculer la durée qui vous intéresse à l’aide de la formule suivante : <strong>année de fin - année de début +1</strong>. Si la série chronologique comporte des discontinuités, elles seront incluses.</li><li><strong>Filtrer par magnitude</strong> : identifiez les changements d’une magnitude donnée ; par exemple, lorsque vous recherchez uniquement des changements importants dans l’indice de végétation NDVI. La magnitude étant une valeur absolue, les valeurs minimale et maximale ne peuvent pas être négatives. Pour spécifier le changement directionnel, utilisez le paramètre <strong>Changer de direction</strong>.</li></ul>",
		distanceAccumulationName: "Accumulation de distance",
		distanceAccumulationSnip: "Calcule la distance accumulée de chaque cellule vers les sources, pour permettre les facteurs de distance en ligne droite, distance de coût et distance de surface véritable, ainsi que les facteurs horizontaux et verticaux de coût.",
		distanceAccumulationDesc: "L’accumulation de distance calcule la distance séparant chaque emplacement de la zone d’étude vers la source la plus proche ou de moindre coût. Si seules les sources sont fournies en entrée, une distance en ligne droite est calculée vers chaque emplacement de la zone d’étude. Si les sources et les interruptions sont utilisées en entrée, l’accumulation de distance calcule la distance en ligne droite au niveau des interruptions. Pour le raster source et le raster d’interruption, la valeur d’arrière-plan doit être NoData, et les sources et les interruptions sont représentées par des valeurs de cellule valides. Zéro figure parmi les valeurs valides. <div><br/>Lorsqu’un raster de surface est spécifié en entrée, la distance de surface réelle entre les cellules est calculée. Pour effectuer une analyse de coût à l’aide de la fonction Accumulation de distance, une surface de coût est nécessaire. Si une surface de coût est indiquée, le résultat est un raster de distance de coût cumulée. Lorsque les facteurs horizontaux et verticaux sont spécifiés, la direction considérée comme un coût est cumulée. Quatre caractéristiques de la source peuvent être utilisées. Ces caractéristiques qui peuvent être soit la source, soit les sujets s’éloignant de la source sont contrôlées par des paramètres spécifiques : 1. Accumulation initiale : définit le coût initial avant le début du déplacement. 2. Accumulation maximale : spécifie le coût qu’une source peut cumuler avant d’atteindre sa limite. 3. Multiplicateur à appliquer aux coûts : spécifie le mode de déplacement ou la magnitude à la source. 4. Sens de déplacement : identifie si le sujet part d’une source et se déplace vers des emplacements non source ou s’il part des emplacements non source et retourne vers une source.<div><br/>Par défaut, le résultat de l’accumulation de distance est un canal unique qui correspond au raster d’accumulation de distance. Toutefois, il est possible de créer un deuxième canal, le canal de direction arrière. Ce canal indique, pour chaque emplacement figurant dans la zone d’étude, la direction à prendre pour parvenir à la source de moindre coût. Les deux canaux seront nécessaires pour déterminer les chemins optimaux au sein de la zone d’étude. Pour générer un chemin, utilisez d’abord la fonction Extraire les canaux pour extraire le raster d’accumulation de distance et le raster de direction arrière. Utilisez ces couches en entrée de la fonction Chemin de moindre coût. Dans la fonction, utilisez le raster d’accumulation de distance comme entrée du raster de distance de coût et le raster de direction arrière comme entrée du raster d’antécédence de coût.</div>",
		distanceAllocationName: "Allocation de distance",
		distanceAllocationSnip: "Calcule l’allocation de distance de chaque cellule vers les sources fournies en fonction des facteurs de distance en ligne droite, distance de coût et distance de surface véritable, ainsi que les facteurs horizontaux et verticaux de coût.",
		distanceAllocationDesc: "L’allocation de distance calcule la source à laquelle chaque emplacement de la zone d’étude est alloué. Si seules les sources sont fournies en entrée, les emplacements sont alloués selon la distance en ligne droite vers la source la plus proche. Si les sources et les interruptions sont utilisées en entrée, l’allocation de distance calcule la distance en ligne droite au niveau des interruptions pour déterminer la source à laquelle l’emplacement est alloué. Pour le raster source et le raster d’interruption, la valeur d’arrière-plan doit être NoData, et les sources et les interruptions sont représentées par des valeurs de cellule valides. Zéro figure parmi les valeurs valides.<div><br/>Pour effectuer une analyse de coût à l’aide de la fonction Allocation de distance, une surface de coût est nécessaire. Si une surface de coût est spécifiée, le résultat désigne un raster d’allocation basé sur un coût cumulé et non une distance en ligne droite. Lorsque les facteurs horizontaux et verticaux sont spécifiés, la direction considérée comme un coût est cumulée. Lorsqu’un raster de surface est spécifié en entrée, la distance de surface réelle couverte par le passage entre les cellules est calculée au moment où l’allocation est déterminée. Quatre caractéristiques de la source peuvent être utilisées. Ces caractéristiques qui peuvent être soit la source, soit les sujets s’éloignant de la source sont contrôlées par des paramètres spécifiques : 1. Accumulation initiale : définit le coût initial avant le début du déplacement. 2. Accumulation maximale : spécifie le coût qu’une source peut cumuler avant d’atteindre sa limite. 3. Multiplicateur à appliquer aux coûts : spécifie le mode de déplacement ou la magnitude à la source. 4. Sens de déplacement : identifie si le sujet part d’une source et se déplace vers des emplacements non source ou s’il part des emplacements non source et retourne vers une source.<div><br/>Par défaut, le résultat de l’allocation de distance est un canal unique qui correspond au raster d’allocation de distance. Cocher l’option booléenne Generate source row and column as additional bands in output (Générer une ligne et une colonne source en tant que canaux supplémentaires en sortie) produira un raster multicanal composé de trois canaux. Le premier canal est le canal d’allocation de distance, le second contient un index de lignes, et le troisième canal un index de colonnes. Ces index identifient l’emplacement de la cellule source qui se trouve à la distance de plus faible coût cumulé. L’index de lignes source et l’index de colonnes source peuvent être utilisés ensemble pour réaliser une cartographie d’intensité. Effectuez une requête sur un emplacement de votre zone d’étude à travers les canaux deux et trois, pour connaître la ligne et la colonne de la source de moindre coût pour cet emplacement.</div>",
		eucBackDirectionName: "Direction arrière euclidienne",
		eucBackDirectionSnip: "Calcule pour chaque cellule la direction (en degrés) vers la cellule voisine le long du chemin le plus court pour revenir à la source la plus proche en évitant les interruptions.",
		eucBackDirectionDesc: "La fonction Direction arrière euclidienne génère un raster continu à virgule flottante représentant la direction en degrés vers la source la plus proche tout en évitant les interruptions, le cas échéant.<div><br/>Les entrées de la fonction Direction arrière euclidienne sont la source dans laquelle la direction sera calculée. Un raster représentant les interruptions dans la zone d’étude est une entrée facultative. Pour le raster source et le raster d’interruption, la valeur d’arrière-plan doit être NoData, et les sources et les interruptions sont représentées par des valeurs valides. Zéro figure parmi les valeurs valides. Par défaut, le calcul effectue le traitement jusqu’à l’étendue combinée des sources et des interruptions, plus 2 lignes et colonnes. Si l’analyse est seulement nécessaire au sein d’une distance spécifiée à partir des sources, le paramètre Distance maximale peut être utilisé. La fonction Direction arrière euclidienne prend en charge une méthode planaire et une méthode géodésique lors du calcul. Le calcul de la méthode planaire est effectué sur une surface plane projetée à l’aide d’un système de coordonnées cartésiennes 2D. Le calcul de la méthode géodésique est effectué sur l’ellipsoïde. En d’autres termes, quelle que soit la projection en entrée ou en sortie, les résultats ne changent pas.<div><br/>Les résultats de la fonction Direction arrière euclidienne peuvent être utilisés avec les résultats de la fonction Distance euclidienne afin de déterminer les chemins les plus courts à partir des emplacements qui se trouvent dans la zone d’étude jusqu’à la source. Les résultats de la direction arrière euclidienne et de la distance euclidienne peuvent être utilisés dans la fonction Chemin de moindre coût ainsi que les destinations pour déterminer les chemins les plus courts.</div>",
		expandName: "Étendre",
		expandSnip: "Étend d’un nombre défini de cellules les zones sélectionnées d’un raster par zones.",
		expandDesc: "Avec la fonction globale Développer, vous pouvez généraliser ou simplifier les rasters en agrandissant des zones particulières. Vous pouvez également contrôler le niveau de généralisation qui aura lieu.<div><br/>La taille des zones sélectionnées augmente en se développant dans d’autres zones. En théorie, les valeurs de zone sélectionnées peuvent être vues comme des zones de premier plan, les autres valeurs restant des zones d’arrière-plan. Les zones de premier plan peuvent être étendues jusqu’aux zones d’arrière-plan.<div><br/>Le niveau de généralisation peut être contrôlé à l’aide du paramètre Number of Cells (Nombre de cellules). Par défaut, ce paramètre a une valeur égale à 1, ce qui signifie que les zones sélectionnées s’agrandiront du volume correspondant à la taille d’une cellule. Pour augmenter le degré de généralisation, vous pouvez spécifier une valeur supérieure pour ce paramètre. Cela revient à utiliser l’outil un nombre de fois équivalant au nombre spécifié, les résultats de l’exécution précédente formant l’entrée de l’itération suivante.</div>",
		trendAnalysisName: "Générer une tendance",
		trendAnalysisSnip: "Estime la tendance de chaque pixel selon une dimension pour une ou plusieurs variables d’un raster multidimensionnel.",
		trendAnalysisDesc: "<div>Cette fonction permet d’ajuster les données sur une courbe de tendance linéaire, harmonique ou polynomiale ou de détecter la tendance au moyen du test de Mann-Kendall ou Kendall saisonnier.</div><br><div>Le raster de tendance en sortie généré avec cette fonction sert en entrée pour la fonction <strong>Prédire à l’aide d’un raster de tendance</strong>.</div><br><div>Les tests de Mann-Kendall et Kendall saisonnier déterminent si les données présentent une tendance monotonique. Ils ne sont pas paramétriques, c’est-à-dire qu’ils ne formulent aucune hypothèse sur la distribution spécifique des données. Le test de Mann-Kendall ne considère pas une corrélation sérielle ou des effets saisonniers. Si les données ont une saisonnalité, le test de Kendall saisonnier est plus adapté.</div><br><div>Si l’outil réalise le test de Mann-Kendall ou Kendall saisonnier, la sortie est un raster à cinq bandes de type suivant :</div><ul><li>Bande 1 = Pente de Sen </li><li>Bande 2 = Valeur de p</li><li>Bande 3 = Score de Mann-Kendall (S)</li><li>Bande 4 = Variance S</li><li>Bande 4 = Variance S</li><li>Bande 5 = Score z</li></ul><div>Les sorties des tests de Mann-Kendall ou Kendall saisonnier permettent de déterminer les pixels de votre série chronologique multidimensionnelle qui présentent une tendance statistiquement significative. Vous pouvez utiliser cette information avec une analyse de tendance linéaire, harmonique ou polynomiale pour extraire les tendances significatives de vos séries temporelles. Vous générez un masque comportant les pixels avec une valeur de p significative, appliquez le masque au raster multidimensionnel et utilisez ce raster multidimensionnel masqué comme entrée de l’outil pour effectuer une analyse de tendance linéaire, harmonique ou polynomiale.</div><br><div>Il existe trois options de ligne de tendance pour ajuster une tendance aux valeurs des variables le long d’une dimension : linéaire, harmonique et polynomiale.</div><br><div>Pour l’analyse de tendance linéaire, la sortie est un raster à trois bandes du type suivant :</div><ul><li>Bande 1 = Pente</li><li>Bande 2 = Ordonnée à l’origine</li><li>Bande 3 = Racine carrée de l’erreur quadratique moyenne (EQM) ou erreur autour de la ligne de compromis</li></ul><div>Pour l’analyse de tendance polynomiale, le nombre de canaux dans la sortie dépend du degré polynomial. Un ajustement polynomial du deuxième degré génère un raster à quatre bandes de type suivant : </div><ul><li>Bande 1 = Polynomial_2</li><li>Bande 2 = Polynomial_1</li><li>Bande 3 = Polynomial_0</li><li>Bande 4 = EQM</li></ul><div>Un ajustement polynomial du troisième degré génère un raster à cinq canaux de type suivant :</div><ul><li>Bande 1 = Polynomial_3</li><li>Bande 2 = Polynomial_2</li><li>Bande 3 = Polynomial_1</li><li>Bande 4 = Polynomial_0</li><li>Bande 5 = EQM</li></ul><div>Pour l’analyse de tendance harmonique, le nombre de canaux dans la sortie dépend de la fréquence harmonique. Si la fréquence est définie sur 1, la sortie est un raster à cinq bandes de type suivant :</div><ul><li>Bande 1 = Pente</li><li>Bande 2 = Ordonnée à l’origine</li><li>Bande 3 = Harmonic_sin1</li><li>Canal 4 = Harmonic_cos1</li><li>Bande 5 = EQM</li></ul><div>Si la fréquence est définie sur 2, la sortie est un raster à sept canaux de type suivant :</div><ul><li>Bande 1 = Pente</li><li>Bande 2 = Ordonnée à l’origine</li><li>Bande 3 = Harmonic_sin1</li><li>Bande 4 = Harmonic_cos1</li><li>Bande 5 = Harmonic_sin2</li><li>Bande 6 = Harmonic_cos2</li><li>Bande 7 = EQM</li></ul><div>Le paramètre <strong>Durée du cycle</strong> pour l’analyse des tendances harmoniques est utilisé pour indiquer le nombre et la durée des cycles que vous vous attendez à voir dans vos données tout au long d’une journée ou d’une année. Si, par exemple, vous prévoyez que vos données connaissent deux cycles de variation dans l’année, la durée du cycle sera de 182,5 jours, soit 0,5 an. Si vous détenez des données de température collectées toutes les trois heures et qu’elles présentent un cycle de variation par jour, la durée du cycle correspond à 1 jour.</div><br><div>Le paramètre <strong>Fréquence</strong> pour l’analyse des tendances harmoniques est utilisé pour décrire le modèle harmonique à ajuster aux données. Si la fréquence est définie sur 1, une combinaison de tendance linéaire et de courbe harmonique de premier degré est utilisée pour ajuster le modèle. Si la fréquence est définie sur 2, une combinaison de tendance linéaire, de courbe harmonique de premier degré linéaire et de courbe harmonique de second degré est utilisée pour ajuster les données. Si la fréquence est 3, une courbe harmonique de troisième degré supplémentaire est utilisée pour modéliser les données et ainsi de suite.</div><br><div>Il est possible de générer des statistiques de qualité de l’ajustement du modèle sous forme de sorties facultatives. L’erreur quadratique moyenne (EQM), la valeur R-carré et la valeur P de pente de la tendance peuvent être calculées et symbolisées. Symbolisez la couche raster de la tendance en sortie à l’aide de la symbologie <strong>RVB</strong> et spécifiez les statistiques sous forme de canaux rouges, verts et bleus.</div><br>",
		spectralUnmixingName: "Démixage spectral linéaire",
		spectralUnmixingSnip: "Effectue une classification inférieure au pixel et calcule l’abondance fractionnelle de différents types d’occupation du sol pour les pixels individuels.",
		spectralUnmixingDesc: "La fonction Démixage spectral linéaire calcule la couverture fractionnelle pour des pixels contenant plusieurs types d’occupation du sol. Elle génère une couche multicanale dans laquelle chaque canal correspond à l’abondance fractionnelle d’une classe d’occupation du sol. Par exemple, vous pouvez l’utiliser pour procéder à la classification des occupations du sol sur une image multispectrale afin d’identifier la végétation photosynthétique, le sol nul, la végétation morte ou non photosynthétique.<div><br/>L’ordre du raster multicanal en sortie reflète l’ordre du profil spectral en entrée. Le nombre de classes ne doit pas dépasser le nombre de canaux du raster en entrée. Par exemple, vous ne pouvez pas extraire des informations sur plus de 8 classes à partir d’un raster à 8 canaux.</div>",
		multidimensionalFilterName: "Filtre multidimensionnel",
		interpolateRasterByDimensionFunctionName: "Interpoler un raster par dimension",
		interpolateRasterByDimensionFunctionSnip: "Interpole un raster multidimensionnel à des valeurs de dimension spécifiées à l’aide des tranches adjacentes.",
		interpolateRasterByDimensionFunctionDesc: "<p>Cette fonction vous permet d’estimer les valeurs en pixels d’une tranche dimensionnelle non définie dans un raster multidimensionnel. Par exemple, si un jeu de données contient la température de l’océan en surface et 100 mètres sous le niveau de la mer et que vous souhaitez estimer la température 50 mètres sous le niveau de la mer, vous pouvez utiliser cette fonction pour obtenir une estimation à cette profondeur à l’aide de la définition de la dimension Par valeurs.</p><p>Vous pouvez également sous-échantillonner un jeu de données mensuel dans un jeu de données quotidien en utilisant la définition de la dimension Par intervalle et en spécifiant la valeur 1 pour le paramètre Étape et la valeur Jours pour le paramètre Unité.</p><p>Utilisez la définition de la dimension Par raster cible pour estimer la valeur de Raster cible.</p>",
		multidimensionalFilterSnip: "Crée une couche raster à partir d’un jeu de données raster multidimensionnelles ou d’une couche raster multidimensionnelle en découpant des tranches de données le long de variables et de dimensions définies.",
		multidimensionalFilterDesc: "Le Filtre multidimensionnel crée une couche raster multimensionnelle en filtrant et extrayant un sous-ensemble de variables à partir d’un raster multimensionnel. Vous pouvez ainsi disposer d’un jeu de données multidimensionnel contenant 30 années de données de précipitations mensuelles et souhaiter extraire uniquement les données de chaque mois de janvier afin d’observer l’évolution des précipitations pour ce mois.<div><br/>Utilisez le paramètre Dimension Definition (Définition de la dimension) pour découper des tranches de dimensions à l’aide d’un intervalle, d’une valeur ou d’une plage de valeurs. Si, par exemple, vous possédez 10 ans de données relatives à la salinité des océans, recueillies mensuellement et tous les 2 mètres de profondeur jusqu’à 500 mètres, vous pouvez utiliser les différentes options de définition de la dimension pour les scénarios suivants. Scénario 1 : Extraire les données relatives à la salinité pour le mois de janvier sur la période de 10 ans. Sélectionnez By Values (Par valeurs), définissez Dimension sur StdTime et Values (Valeurs) sur January (Janvier). Scénario 2 : Découper des tranches de données relatives à la salinité sur une plage de profondeur allant de 0 à 150 mètres. Sélectionnez By Ranges (Par plages), définissez Dimension sur StdZ, Minimum Value (Valeur minimale) sur -150 et Maximum Value (Valeur maximale) sur 0. Scénario 3 : Extraire les données relatives à la salinité pour les 10 premiers jours du mois de janvier sur une période de 10 ans. Sélectionnez By Iteration (Par itération), définissez Dimension sur StdTime, définissez Start of first iteration (Début de la première itération) et End of first iteration (Fin de la première itération) sur le début et la fin correspondants de la période d’itération, définissez Step (Étape) sur 1, puis définissez Unit (Unité) sur Years (Années).</div>",
		multidimensionalRasterName: "Raster multidimensionnel",
		multidimensionalRasterSnip: "Ajoute des données multidimensionnelles à une carte sous forme de couche raster multimensionnelle.",
		multidimensionalRasterDesc: "La fonction Raster multidimensionnel ajoute des données multidimensionnelles sur une carte en tant que couche raster multidimensionnelle. Cette fonction est utile lors de l’exécution de processus d’analyse de raster à l’aide d’une chaîne de fonctions.<div><br/>Les jeux de données raster multidimensionnelles incluent les formats netCDF, GRIB, HDF et CRF d’Esri. Les jeux de données mosaïque multidimensionnelles sont également pris en charge.</div>",
		optimalPathAsRasterName: "Chemin optimal comme raster",
		optimalPathAsRasterSnip: "Calcule le chemin de moindre coût entre une source et une destination.",
		optimalPathAsRasterDesc: "Cette fonction globale permet d’obtenir un raster en sortie qui enregistre le chemin optimal ou les chemins optimaux correspondant aux emplacements sélectionnés par rapport à la cellule source la plus proche que vous avez définie dans la surface de coûts cumulés (nous tenons compte des distances de coût).<div><br/>Une ou plusieurs des fonctions de calcul des coûts pondérés (Accumulation de distance ou Allocation de distance) doivent généralement être exécutées avant de lancer la fonction raster Chemin optimal comme raster pour créer les rasters d’accumulation de distance et de direction arrière en entrée. Ces couches raster en entrée sont obligatoires si vous souhaitez utiliser la fonction Chemin optimal. Les valeurs du chemin optimal en sortie représentent le nombre de chemins à un emplacement donné. Dans de nombreux cas, les chemins suivent le même itinéraire, quittant une source puis divergeant pour se rendre à une destination propre à chacun. Par exemple, la valeur un indique qu’il n’existe qu’un seul chemin optimal à un emplacement donné, tandis que la valeur cinq indique qu’à cet emplacement il existe cinq chemins optimaux traversant cette cellule dans la zone d’étude.<div><br/>Les données de destination en entrée doivent correspondre à une couche raster. L’ensemble des cellules de destination englobe toutes les cellules du raster en entrée comprenant des valeurs autorisées. Les cellules associées à la valeur NoData ne figurent pas dans l’ensemble. La valeur zéro est une destination pertinente. Vous pouvez créer un raster de destination à l’aide des outils d’extraction. Si vous avez des entités source ou de destination, vous pouvez les convertir en raster à l’aide de la fonction Rasteriser les entités. Utilisez le raster d’accumulation de distance ou le raster de direction arrière comme raster en entrée pour la fonction de tramage. Vous aurez ainsi l’assurance que l’entité sera rasterisée avec les mêmes paramètres (étendue des données, référence spatiale et taille de cellule) que les autres rasters traités par la fonction Chemin optimal comme raster. Vous pouvez également utiliser la fonction Chemin optimal comme raster pour obtenir le chemin offrant le moins de résistance sous la forme d’un modèle numérique d’élévation (MNE). Dans ce cas, utilisez le MNE avec le raster d’accumulation de distance en entrée et les résultats obtenus via la fonction Direction de flux pour traiter le raster de direction arrière.</div>",
		trendName: "Predict Using Trend (Prévoir à l’aide d’une tendance)",
		trendSnip: "Calcule une couche raster multidimensionnelle prévue en utilisant le raster de tendance en sortie à partir de la fonction Générer une tendance ou l’outil de géotraitement Générer un raster de tendance.",
		trendDesc: "La fonction Prévoir à l’aide d’une tendance calcule une couche raster multidimensionnelle prévue en utilisant le raster de tendance en sortie à partir de la fonction Générer une tendance ou l’outil de géotraitement Générer un raster de tendance.",
		rasterCollectionName: "Traiter un ensemble de rasters",
		rasterCollectionSnip: "Traite chaque tranche dans un raster multidimensionnel ou chaque élément dans un raster mosaïque. Cette fonction peut également agréger plusieurs tranches en une seule.",
		rasterCollectionDesc: "La fonction Traiter un ensemble de rasters traite chaque tranche dans un raster multidimensionnel ou chaque élément dans un raster mosaïque. Cette fonction peut également agréger plusieurs tranches en une seule.<div><br/>Cette fonction traite chaque tranche dans un raster multidimensionnel ou un raster mosaïque en utilisant un modèle de fonction raster. Cette fonction prend en charge les options suivantes : 1. Spécifier un modèle de fonction raster pour Item Function (Fonction de l’élément). Vous possédez par exemple un jeu de données mosaïque contenant 20 années d’imagerie Landsat et vous souhaitez calculer l’indice NDVI pour chaque scène dans la série chronologique. Pour Item Function (Fonction de l’élément), spécifiez un modèle de fonction raster contenant la fonction raster NDVI. 2. Spécifier un modèle de fonction raster pour Aggregation Function (Fonction d’agrégation). Vous avez, par exemple, un raster multidimensionnel contenant les données de températures journalières sur 10 années et souhaitez calculer la température maximum pour chaque année. Dans Aggregation Function (Fonction d’agrégation), spécifiez un modèle de fonction raster contenant la fonction Cell Statistics (Statistiques de cellule) et définissez Operation (Opération) sur Maximum. Sous la définition de l’agrégation, définissez Dimension sur StdTime, définissez Type sur Interval Keyword (Mot-clé de l’intervalle) et Keyword Interval (Intervalle de mot-clé) sur Yearly (Annuel). Notez que si le jeu de données mosaïque en entrée n’est pas multidimensionnel, la fonction d’agrégation ne respecte pas la définition de l’agrégation. La fonction d’agrégation agrège tous les éléments ou chaque groupe en un seul s’ils sont définis dans le modèle de fonction d’agrégation. Pour en savoir plus sur l’utilisation des groupes dans un jeu de données mosaïque, reportez-vous à la rubrique Utiliser les éléments de jeu de données mosaïque dans les modèles de fonction raster. 3. Spécifier un modèle de fonction raster pour Processing Function (Fonction de traitement). La fonction ou chaîne de fonctions dans ce modèle est utilisée pour afficher le nouveau raster traité. Par exemple, spécifiez un modèle de fonction raster contenant la fonction Colormap pour modifier la façon dont est affichée la couche de raster traitée. Veuillez noter que si l’entrée est un raster multidimensionnel, la fonction de traitement est appliquée à la tranche actuellement affichée. Si l’entrée est une couche de mosaïque ou un jeu de données mosaïque, la fonction de traitement est appliquée au raster mosaïque selon la première méthode pour corriger les superpositions. 3. Spécifiez des modèles pour chaque combinaison des trois fonctions. Vous disposez par exemple d’un jeu de données mosaïque contenant une série chronologique d’imageries Landsat et vous souhaitez générer une image composite d’indice NDVI maximum. Pour Item Function (Fonction de l’élément), spécifiez un modèle de fonction raster contenant la fonction raster NDVI. Pour Aggregation Function (Fonction d’agrégation), spécifiez un modèle de fonction raster contenant la fonction Cell Statistics (Statistiques de cellule) et définissez Operation (Opération) sur Maximum. Pour Processing Function (Fonction de traitement), spécifiez un modèle de fonction raster contenant la fonction Colormap. Notez que l’ordre de traitement de la fonction respecte l’ordre des paramètres en entrée. Ainsi, Item Function (Fonction de l’élément) sera traité en premier.</div>",
		randomName: "Aléatoire",
		randomSnip: "Crée un raster avec des valeurs de pixels aléatoires dessinées à partir d’une distribution pseudo aléatoire. Plusieurs distributions et générateurs de nombres aléatoires sont pris en charge.",
		randomDesc: "La fonction Aléatoire crée un raster avec des valeurs de pixels aléatoires qui peuvent être utilisées dans des modèles de fonctions raster ou des jeux de données mosaïque.<div><br/>Nombre de fonctions utilisent un ou plusieurs rasters en entrée, mais la fonction Aléatoire ne requiert pas de raster en entrée. Cela signifie qu’elle se comporte davantage comme un jeu de données raster qu’une fonction. Vous devez donc être vigilant lorsque vous l’ajoutez à la chaîne de fonctions ou que vous l’en supprimez.</div>",
		shrinkName: "Réduire",
		shrinkSnip: "Réduit la taille des zones sélectionnées selon un nombre de cellules défini, en remplaçant leur valeur par celle de la cellule la plus fréquente dans leur voisinage.",
		shrinkDesc: "Avec la fonction globale Réduire, vous pouvez généraliser ou simplifier les rasters en réduisant des zones particulières. Vous pouvez également contrôler le niveau de généralisation qui aura lieu.<div><br/>Les zones que vous sélectionnez seront réduites, ou diminuent en taille, des cellules des zones alentour se développant en elles. En théorie, les valeurs de zone sélectionnées peuvent être vues comme des zones de premier plan, les autres valeurs restant des zones d’arrière-plan. Les cellules des zones de premier plan peuvent être remplacées par les cellules des zones d’arrière-plan. Les îles fines présentes à l’intérieur d’une zone qui sont susceptibles d’être interprétées comme partageant des limites avec la zone, peuvent également être remplacées.<div><br/>Le niveau de généralisation peut être contrôlé à l’aide du paramètre Number of Cells (Nombre de cellules). Par défaut, ce paramètre a une valeur égale à 1, ce qui signifie que les zones sélectionnées diminueront du volume correspondant à la taille d’une cellule. Pour augmenter le degré de généralisation, vous pouvez spécifier une valeur supérieure pour ce paramètre. Cela revient à utiliser l’outil un nombre de fois équivalant au nombre spécifié, les résultats de l’exécution précédente formant l’entrée de l’itération suivante.</div>",
		trendToRGBName: "Tendance vers RVB",
		trendToRGBSnip: "Convertit un raster de tendance en un raster à trois canaux (rouge, vert et bleu).",
		trendToRGBDesc: "La fonction Tendance vers RVB convertit un raster de tendance en un raster à trois canaux (rouge, vert et bleu). Le raster de tendance est généré par la fonction Générer un raster de tendances ou la fonction raster d’analyse CCDC.<div><br/>Cette fonction est utile pour la visualisation des données de coefficient de modèle à partir de la fonction Générer une tendance ou la fonction d’analyse CCDC. Les deux fonctions estiment les tendances en modifiant les valeurs de pixels, mais l’interprétation directe des résultats des fonctions est difficile.<div><br/>Comme de nombreuses fonctions raster, vous aurez peut-être besoin d’utiliser l’ajustement dynamique de la plage (DRA) pour un meilleur affichage des résultats de cette fonction.</div>",
		landTrendrName: "Analyse LandTrendr",
		landTrendrSnip: "Évaluer les changements des valeurs de pixels au fil du temps à l’aide de la méthode de détection des tendances en matière de perturbation et de récupération des forêts basée sur Landsat (LandTrendr), puis générer un raster d’analyse des changements contenant les résultats du modèle.",
		landTrendrDesc: "Cette fonction raster peut uniquement être utilisée comme entrée pour la fonction raster Détecter les modifications à l’aide de l’analyse des changements. Pour générer une sortie raster, connectez la fonction d’analyse LandTrendr à la fonction Détecter les modifications à l’aide de l’analyse des changements dans un modèle de fonction raster, puis utilisez le modèle comme entrée dans l’outil de géotraitement Générer un raster à partir d’une fonction raster. Le résultat est un raster contenant des informations concernant la date/l’heure à laquelle les valeurs de pixels ont changé.<div><br>Cette fonction raster a pour finalité d’extraire les changements survenus dans une entité observée, de sorte que l’imagerie multidimensionnelle en entrée idéale puisse capturer une observation cohérente au fil du temps et ne puisse pas inclure d’interférences atmosphériques ou liées au capteur, de nuages ou l’ombre des nuages. Une bonne pratique consiste à utiliser des données qui ont été normalisées et qui peuvent être masquées à l’aide d’une bande QA (les produits de réflectance de surface Landsat Collection 1 avec un masque de nuage, par exemple).<div><br>La fonction effectue l’analyse sur une image par an, et le nombre de tranches annuelles doit être supérieur ou égal à la valeur spécifiée dans le paramètre <strong>Nombre minimal d’observations</strong>. Il est recommandé de disposer de données couvrant une période d’au moins six ans.<div><br>Si vous disposez de données mensuelles, hebdomadaires ou quotidiennes, il est recommandé de choisir plusieurs images pour chaque année (de préférence pour la même saison), de retirer les nuages et l’ombre des nuages, et de combiner les images pour générer une seule image qui capture bien l’observation. Si des données mensuelles, hebdomadaires ou quotidiennes sont fournies comme raster multidimensionnel en entrée, la fonction identifie une tranche pour l’analyse en s’appuyant sur la date la plus proche de celle indiquée dans le paramètre <strong>Date de capture</strong>.<div><br>Une entité dans un paysage prend généralement du temps pour récupérer d’un changement non permanent (un incendie de forêt ou une infestation par des insectes, par exemple). Pour contrôler la vitesse de récupération reconnue par le modèle, définissez le paramètre Seuil de récupération. Un segment distinct ne peut pas avoir une vitesse de récupération supérieure à 1/seuil de récupération.<div><br>La récupération après un changement dans un paysage peut se produire dans le sens positif ou négatif. Par exemple, lorsqu’un paysage subit une déforestation, une série temporelle des valeurs d’indice de végétation montre une chute des valeurs d’indice, puis la récupération montre une augmentation progressive des valeurs d’indice de végétation, autrement dit une tendance de récupération positive. Spécifiez le sens de la tendance de récupération avec le paramètre <strong>La tendance de récupération augmente</strong>.",
		aggregateMultidimensionalName: "Agréger un raster multidimensionnel",
		aggregateMultidimensionalSnip: "Associer les variables existantes du raster multidimensionnel le long d’une dimension.",
		aggregateMultidimensionalDesc: "La fonction Agréger un raster multidimensionnel crée une couche raster multidimensionnel en combinant les données des variables existantes du raster multidimensionnel le long d’une dimension.<div><br>Utilisez le paramètre <strong>Définition de la dimension</strong> pour filtrer en premier lieu les données en entrée que vous souhaitez agréger. Par exemple, si vous disposez de données mensuelles couvrant une période de 30 ans, mais que vous souhaitez uniquement créer une couche agrégée pour les 15 premières années, vous pouvez utiliser le paramètre <strong>Définition de la dimension</strong> pour spécifier les années à inclure dans l’analyse.<div><br><ul><li>Extraire les données de salinité pour le mois de janvier sur une période de 10 ans. Sélectionnez <strong>Par valeurs</strong>, définissez <strong>Dimension</strong> sur <strong>StdTime</strong> et <strong>Valeurs</strong> sur <strong>Janvier</strong>.</li><li>Découper les données de salinité sur une plage de profondeurs comprise entre 0 et 150 mètres. Sélectionnez <strong>Par plages</strong>, définissez <strong>Dimension</strong> sur <strong>StdZ</strong>, <strong>Valeur minimale</strong> sur <strong>-150</strong> et <strong>Valeur maximale</strong> sur <strong>0</strong>.</li><li>Extraire les données de salinité pour les 10 premiers jours de chaque mois de janvier sur une période de 10 ans. Sélectionnez <strong>Par itération</strong>, définissez <strong>Dimension</strong> sur <strong>StdTime</strong>, <strong>Début de la première itération</strong> et <strong>Fin de la première itération</strong> sur le début et la fin de la période d’itération correspondante, <strong>Étape</strong> sur <strong>1</strong> et <strong>Unité</strong> sur <strong>Années</strong>.</li></ul><div><br>Utilisez les paramètres <strong>Définition de l’agrégation</strong> pour choisir la dimension à évaluer et l’intervalle d’agrégation à l’aide d’un mot-clé, d’une valeur ou d’une plage de valeurs. Par exemple, si vous disposez de données sur la température de surface de la mer couvrant une période de 30 ans, collectées quotidiennement et tous les 5 mètres de profondeur jusqu’à 100 mètres, vous pouvez utiliser les différentes options d’intervalle pour les scénarios suivants :<div><br><ul><li>Agréger les données de température quotidiennes en données mensuelles, le résultat étant un raster multidimensionnel avec 12 tranches temporelles, chaque tranche étant l’agrégat de chaque mois sur toutes les années. Sélectionnez <strong>Mot-clé de l’intervalle</strong> et définissez le mot-clé sur <strong>Récurrence mensuelle</strong>.</li><li>Agréger les données de température quotidiennes en données mensuelles, le résultat étant un raster multidimensionnel avec 360 tranches ou 12 tranches temporelles par an (30 années x 12 mois = 360 tranches). Sélectionnez <strong>Mot-clé de l’intervalle</strong> et définissez le mot-clé sur <strong>Par mois</strong>.</li><li>Agréger les données de température mensuelles en intervalles de 4 mois. Sélectionnez <strong>Valeur de l’intervalle</strong>, définissez <strong>Valeur de l’intervalle</strong> sur 4 et définissez <strong>Unité</strong> sur <strong>Mois</strong>.</li><li>Agréger les données de température entre 0 et 25 mètres, puis entre 25 et 50 mètres, et enfin entre 50 et 100 mètres. Sélectionnez <strong>Plages d’intervalle</strong> et définissez les profondeurs minimales et maximales sur <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Fusionner des rasters",
		mergeRastersSnip: "Combiner plusieurs jeux de données raster spatialement ou selon des variables et des dimensions.",
		mergeRastersDesc: "Cette fonction crée un raster fusionné à partir d’une liste de rasters. Par exemple, si vous disposez d’un jeu de données mosaïque qui contient les relevés mensuels de précipitations sur 30 ans et un autre jeu de données avec les données de température mensuelles sur 10 ans, vous pouvez les associer pour créer un raster multidimensionnel avec les deux variables. <div><br>Si les rasters multidimensionnels en entrée contiennent des variables différentes, le raster multidimensionnel en sortie contient toutes les variables. <div><br>Si les rasters multidimensionnels en entrée contiennent des dimensions ou valeurs de dimension différentes, le raster multidimensionnel en sortie inclut toutes les dimensions et valeurs de dimension. <div><br>Si les rasters multidimensionnels en entrée contiennent les mêmes dimensions et variables, mais des étendues spatiales différentes, le raster multidimensionnel en sortie inclut les variables et les dimensions des étendues spatiales fusionnées.<div><br>Cette fonction peut également être utilisée si vous disposez de plusieurs rasters que vous souhaitez traiter comme un seul élément, par exemple pour calculer les mêmes statistiques pour tous ou pour l’équilibrage des couleurs, de manière à ne pas avoir besoin d’équilibrer les couleurs de chaque image séparément. Cette fonction est utile lorsque vous utilisez des images stockées sous forme de tuiles distinctes en raison de contraintes liées à la taille des fichiers. Les tuiles sont alors considérées comme faisant partie de la même image.",
		boundaryCleanName: "Nettoyage de limites",
		boundaryCleanSnip: "Lisse la limite entre des zones.",
		boundaryCleanDesc: "<p>Cette fonction généralise ou simplifie les rasters en lissant les limites entre les zones. Elle offre des options permettant de contrôler la manière dont les cellules des zones en entrée influencent le lissage et la quantité de lissage qui sera appliquée. Chaque cellule en entrée est évaluée à l’aide de ses huit voisins immédiats.</p><p>Le processus de lissage trie d’abord les cellules voisines selon une priorité particulière. La priorité détermine, parmi les cellules voisines, la zone qui peut remplacer la valeur de la cellule de traitement dans la sortie.</p><p>La priorité peut être basée soit sur la valeur des zones, soit sur la taille des zones. Le paramètre <strong>Type de tri</strong> détermine le type de tri à utiliser. </p><p>Le réglage par défaut <strong>Ne pas trier</strong> évalue la priorité en fonction de la valeur des zones. Les cellules de zones dotées de valeurs plus importantes seront prioritaires pour s’étendre dans des zones à valeurs moindres.</p><p>La taille, ou surface totale, des zones peut être utilisée pour trier la priorité. Si le paramètre est défini sur <strong>Décroissant</strong>, les zones sont triées par ordre de taille décroissant. Les zones dotées de surfaces totales plus importantes seront prioritaires pour s’étendre dans des zones à surfaces totales moindres. Si le paramètre est défini sur <strong>Croissant</strong>, c’est le contraire : les zones à surfaces totales moindres seront prioritaires pour s’étendre dans des zones dotées de surfaces totales plus importantes.</p><p>La quantité de lissage est contrôlée par le paramètre <strong>Exécuter deux fois l’expansion et la contraction</strong>, qui détermine le nombre d’exécutions du processus d’expansion et de contraction.</p><p>Si le paramètre est désélectionné, le processus d’expansion et de contraction est effectué une seule fois. Si le paramètre est coché, le processus d’expansion et de contraction est effectué deux fois, ce qui ajoute un degré supplémentaire de lissage des limites des zones.</p><p>Si les valeurs des huit cellules voisines sont identiques à celles de la cellule de traitement, la cellule en sortie conserve la valeur de la cellule en entrée.</p>",
		predictUsingRegressionName: "Prévoir à l’aide d’une régression",
		predictUsingRegressionSnip: "Calcule un raster prévu en fonction d’entrées de données raster et d’un modèle de régression. Le modèle de régression constitue la sortie de l’outil de géotraitement raster <strong>Entraîner le modèle de régression Arbres aléatoires</strong>.",
		predictUsingRegressionDesc: "<p>Le modèle de régression est défini dans un fichier de définition de régression Esri (.ecd). Ce fichier contient toutes les informations relatives à un jeu de données spécifique ou à un ensemble de jeux de données, ainsi que le modèle de régression. Il est généré par l’outil de géotraitement raster <strong>Entraîner le modèle de régression Arbres aléatoires</strong>.</p><p>L’entrée peut être un raster à une seule bande ou à plusieurs bandes, un raster multidimensionnel ou une liste de ces types. Les types des rasters en entrée doivent être identiques au type du raster entraîné par le modèle de régression.</p><ul><li>Lorsque l’entrée est un raster à plusieurs bandes, chaque bande est traitée comme une variable de prévision. Les bandes doivent être dans le même ordre que dans l’entrée à plusieurs bandes de l’outil d’entraînement du modèle de régression.</li><li>Lorsque l’entrée est un raster multidimensionnel, chaque variable est traitée comme une variable de prévision et doit présenter une seule bande et une dimension temporelle. L’ordre et les noms des variables doivent être les mêmes que ceux de l’entrée lors de l’entraînement du modèle de régression. La sortie est un raster multidimensionnel.</li><li>L’entrée peut être une liste d’éléments. Le nombre d’éléments et leur ordre doivent correspondre à l’entrée lors de l’entraînement du modèle de régression.</li></ul>",
		dimensionalMovingStatisticsName: "Statistiques mobiles dimensionnelles",
		dimensionalMovingStatisticsSnip: "Calcule les statistiques sur une fenêtre de déplacement sur des données multidimensionnelles le long d’une dimension spécifiée.",
		dimensionalMovingStatisticsDesc: "<p>La fonction Statistiques de déplacement dimensionnel calcule diverses statistiques dans une fenêtre prédéfinie pour toutes les valeurs de dimension le long d’une dimension. Cette fonction extrait une couche raster multidimensionnelle en tant qu’entrée et crée une couche raster multidimensionnelle en tant que sortie ayant la même taille de dimension que la couche en entrée.</p><p>Vous pouvez spécifier une dimension dont les valeurs sont considérées lors du calcul. Par défaut, la fonction calcule les valeurs le long de la première dimension non spatiale. Vous pouvez également spécifier une taille de fenêtre en spécifiant les paramètres Fenêtre arrière et Fenêtre avant.</p><p>Lorsque le paramètre Type de statistique est défini sur Centile, les paramètres Valeur de centile et Type d’interpolation de centile deviennent disponibles. Vous pouvez utiliser ces paramètres afin de spécifier le centile à calculer et choisir le type d’interpolation à utiliser, respectivement. Lorsque le paramètre Type de statistique est défini sur Moyenne circulaire, le paramètre Valeur de repli circulaire devient disponible. La valeur de repli circulaire est utilisée pour convertir une valeur linéaire en plage d’une moyenne circulaire donnée</p>.",
		terrainFlattenFunctionName: "Aplanir le terrain",
		terrainFlattenFunctionSnip: "Corrige les distorsions radiométriques, liées à la topographie, des données de radar à synthèse d’ouverture (SAR) en entrée.",
		terrainFlattenFunctionDesc: "<p>La fonction raster Aplanir le terrain corrige les distorsions radiométriques, liées à la topographie, des données de radar à synthèse d’ouverture (SAR) en entrée.</p><p>Les données radar en entrée doivent être calibrées sur bêta zéro. Utilisez l’outil Appliquer le calibrage radiométrique pour calibrer les données radar sur bêta zéro.</p><p>Si le MNE en entrée ne couvre pas l’intégralité du jeu de données SAR, l’outil génère des valeurs NoData pour les pixels en dehors de l’étendue du MNE pour les sorties gamma zéro, sigma zéro, de la surface de dispersion et de la distorsion géométrique. Pour la sortie du masque de distorsion géométrique, l’outil génère des valeurs indéterminées pour les pixels en dehors de l’étendue du MNE.</p><p>Le MNE en entrée doit utiliser le système de coordonnées géographiques WGS 1984 (EPSG:4326).</p>",
		createColorCompositeFunctionName: "Créer une composition colorée",
		createColorCompositeFunctionSnip: "Produit un raster à trois bandes à partir d’un jeu de données raster multibande dans lequel chaque bande utilise un calcul algébrique basé sur l’algèbre des bandes.",
		createColorCompositeFunctionDesc: "<p>La fonction raster Créer une composition colorée produit un raster à trois bandes à partir d’un jeu de données raster multibande dans lequel chaque bande utilise un calcul algébrique basé sur l’algèbre des bandes.</p><p>Lorsque vous définissez un algorithme arithmétique de bande, vous pouvez saisir une formule algébrique uniligne pour chaque expression afin de créer une sortie multibande. Les opérateurs pris en charge sont unaires : addition (+), soustraction (-), multiplication (*) et division (/).</p><p>Lors de l’utilisation d’un identifiant de bande dans une expression, identifiez la bande en ajoutant un préfixe B ou b au numéro de la bande.</p><p>Une combinaison de bandes courante utilisée pour le radar à synthèse d’ouverture (SAR) dans les unités linéaires est VV pour rouge, VH pour vert et VV-VH pour bleu. Si les données en entrée sont exprimées en décibels, la combinaison de bandes doit être VV pour rouge, VH pour vert et VV-VH pour bleu.</p>",
		surfaceParametersName: "Paramètres de surface",
		surfaceParametersSnip: "Détermine les paramètres d’un raster de surface, tels que l’exposition, la pente et plusieurs types de courbures à l’aide de méthodes géodésiques.",
		surfaceParametersDesc: "<p>La fonction Paramètres de surface détermine les paramètres d’un raster de surface, tels que l’exposition, la pente et plusieurs types de courbures à l’aide de méthodes géodésiques.</p><p>Cette fonction peut être utilisée dans les applications suivantes :</p><ul><li>Calculer l’exposition et la pente à l’aide de méthodes géodésiques.</li><li>Calculer différents types de courbures à partir d’un raster de surface en entrée, par exemple, <strong>Courbure tangentielle (isoligne normale)</strong> qui caractérise la convergence et la divergence topographiques du flux sur la surface.</li></ul>",
		leastCostCorridorName: "Couloir de moindre coût",
		leastCostCorridorSnip: "Calcule la somme de deux rasters de distance de coût cumulé avec la possibilité d’appliquer un seuil en fonction du pourcentage ou du coût cumulé.",
		leastCostCorridorDesc: "<p>Les rasters en entrée doivent être des rasters d’accumulation de distance et de direction arrière générés par la fonction <strong>Accumulation de distance</strong> ou <strong>Allocation de distance</strong>. Ils doivent être basés sur la distance de coût et les mêmes paramétrages doivent être utilisés pour la création des couches de chaque source. Aucun paramètre dépendant de la directionnalité (facteur horizontal, facteur vertical et sens de déplacement) ne doit être utilisé pour la création de ces rasters.</p><p>Les valeurs du raster de couloir en sortie correspondent à la somme du coût cumulé pour atteindre un emplacement donné avec les mêmes unités que celles des rasters de distance de coût cumulé en entrée.</p><p>Si une valeur <strong>Seuil</strong> spécifiée est supérieure au coût cumulé maximal lorsque les deux rasters d’accumulation de distance sont additionnés, le raster de couloir en sortie couvre la même zone que les rasters de coût cumulé en entrée.</p><p>Si une valeur de seuil spécifiée est inférieure à la valeur minimale dans le raster de couloir, un message d’avertissement est renvoyé et le raster en sortie est vide.</p><p>Il est possible que le raster de couloir en sortie contienne des cellules avec des coûts cumulés légèrement supérieurs à la valeur de seuil. C’est le cas lorsque les rasters de direction arrière utilisent des cellules auxquelles des coûts légèrement supérieurs au seuil ont été attribués afin de connecter des cellules déconnectées au couloir.</p>",
		geometricMedianName: "Médiane géométrique",
		geometricMedianSnip: "La fonction Médiane géométrique calcule la médiane géométrique des pixels dans une série chronologique d’images multibandes.",
		geometricMedianDesc: "<p>Cette fonction réduit le bruit et les points aberrants dans les images d’une série chronologique en calculant un pixel médian géométrique pour chaque matrice de pixels dans la pile d’images. L’algorithme conserve les relations spectrales entre les bandes dans les spectres des pixels afin que la sortie puisse être utilisée dans une analyse, telle que le calcul des indices de végétation.</p><p>Vous devez masquer les nuages et les ombres à l’aide de la bande d’assurance qualité (QA) du jeu de données avant d’appliquer cette fonction.</p><p>Si l’image en entrée comporte des données à virgule flottante, comme une réflectance de surface avec des valeurs comprises entre 0 et 1, une valeur epsilon de 0,001 produit généralement des résultats de qualité satisfaisante.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Type de combinaison de couleurs",
		colormapName: "Palette de couleurs",
		colormapNameName: "Nom de la palette de couleurs",
		colorRampName: "Dégradé de couleurs",
		contrastOffsetName: "Décalage de contraste",
		brightnessOffsetName: "Décalage de la luminosité",
		methodName: "Méthode",
		bandNamesName: "Noms des canaux",
		bandWavelengthsName: "Longueurs d'ondes des canaux",
		bandIdsName: "Identifiants des canaux",
		missingBandActionName: "Action concernant le canal manquant",
		conversionParametersName: "Paramètres de conversion",
		hillshadeTypeName: "Type d'ombrage",
		azimuthName: "Azimut",
		altitudeName: "Altitude",
		slopeTypeName: "Mise à l’échelle",
		zFactorName: "Facteur Z",
		PSPowerName: "Puissance de la taille de pixel",
		PSZFactorName: "Facteur de taille de pixel",
		removeEdgeEffectName: "Désactiver l'interpolation des pixels de tronçon par défaut",
		fromUnitName: "De l’unité",
		toUnitName: "À l’unité",
		rasterTypeName: "Type",
		minName: "Sortie minimale",
		maxName: "Sortie maximale",
		minPercentName: "Pourcentage de découpe minimal",
		maxPercentName: "Pourcentage de découpe maximal",
		numberOfStandardDeviationName: "Nombre d’écarts types",
		sigmoidStrengthLevelName: "Niveau de force sigmoïde",
		estimateStatsHistogramName: "Estimer les statistiques",
		DRAName: "Ajustement dynamique de la plage",
		statisticsName: "Statistiques",
		histogramsName: "Histogrammes",
		statisticsHistogramName: "Définir des statistiques et un histogramme",
		computeGammaName: "Valeur Gamma automatique",
		useGammaName: "Utiliser la valeur Gamma",
		gammaName: "Gamma",
		inputNamesName: "Noms",
		expressionName: "Expression",
		cellsizeTypeName: "Type de taille de cellule",
		extentTypeName: "Type d’étendue",
		classifierDefinitionFileName: "Fichier de définition en entrée",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Raster vrai",
		falseRasterName: "Raster faux",
		noDataInterpretationName: "Interprétation NoData",
		noDataValuesName: "Valeurs NoData",
		includedRangesName: "Plages incluses",
		curvatureTypeName: "Type de courbure",
		rastersName: "Rasters",
		attributeTableName: "Tableau",
		attributeTableTypeName: "Type de table",
		rowsName: "Nombre de lignes",
		columnsName: "Nombre de colonnes",
		kernelName: "Noyau",
		mirrorEdgesName: "Symétrie des tronçons",
		influencesName: "Influences",
		fieldsName: "Champs",
		remapsName: "Table de classification",
		evalFromName: "Echelle d'évaluation d'origine",
		evalToName: "Echelle d'évaluation de destination",
		weightsName: "Pondérations",
		DEMName: "USGS DEM",
		shortRangeIDWRadiusName: "Rayon IDW de courte portée",
		maxVoidWidthName: "Largeur de vide max",
		sigmaGaussianName: "Lissage adaptatif",
		contourTypeName: "Type d’isoligne",
		zBaseName: "Base Z",
		numberOfContoursName: "Nombre d'isolignes",
		contourIntervalName: "Intervalle des isolignes",
		nthContourLineInBoldName: "Isoligne nord en gras",
		featureClassName: "Entités en entrée",
		classIndexFieldName: "Terrain",
		resolveOverlapMethodName: "Méthode Résoudre la superposition",
		resamplingTypeName: "Type de rééchantillonnage",
		inputCellsizeName: "Taille de cellule en entrée",
		outputCellsizeName: "Taille de cellule en sortie",
		pointFeatureClassName: "Points d'origine",
		maxGrowthRadiusFieldName: "Champ de rayon d'évolution maximale",
		similarityThresholdFieldName: "Champ de seuil de similarité",
		fillValueFieldName: "Champ de valeurs de remplissage",
		spectralDetailName: "Détail spectral [1..20]",
		spatialDetailName: "Détail spatial [1..20]",
		minNumPixelsPerSegmentName: "Taille minimale du segment en pixels",
		boundariesOnlyName: "Limites du segment uniquement",
		statisticsTypeName: "Type de statistique",
		fillNoDataOnlyName: "Remplir uniquement les pixels NoData",
		inputDataTypeName: "Type de données en entrée",
		angleReferenceSystemName: "Système de référence angulaire",
		outputDataTypeName: "Type de données en sortie",
		inputSamplePointFeatureClassName: "Exemples en entrée",
		valueFieldName: "Champ de valeur",
		rasterInfoName: "Informations raster",
		interpolationMethodName: "Méthode d’interpolation",
		radiusName: "Rayon",
		radianceGainValuesName: "Gain de rayonnement",
		radianceBiasValuesName: "Tendance de rayonnement",
		reflectedGainValuesName: "Gain de réflectance",
		reflectedBiasValuesName: "Tendance de réflectance",
		sunElevationName: "Altitude du soleil (degrés)",
		albedoName: "Albédo",
		scaleFactorName: "Facteur d'échelle",
		offsetName: "Décalage",
		thresholdTypeName: "Type de seuil",
		thresholdsName: "Seuils",
		undefinedClassName: "Classe non définie",
		minValueName: "Min",
		maxValueName: "Max",
		operationName: "Opération",
		clippingTypeName: "Type de découpage",
		clippingGeometryName: "Géométrie de découpage / Raster",
		extentName: "Étendue en sortie",
		useInputFeatureGeometryName: "Utiliser les entités en entrée pour la géométrie de découpage",
		remapDefinitionTypeName: "Type de définition de classification",
		inputRangeName: "Plages en entrée",
		outputValuesName: "Valeurs en sortie",
		noDataRangeName: "Plages NoData",
		inputFieldName: "Champ en entrée",
		outputFieldName: "Champ en sortie",
		inputMaxFieldName: "Champ max en entrée (facultatif)",
		remapTableTypeName: "Type de table de classification",
		allowUnmatchedName: "Autoriser les valeurs de pixels non appariées",
		changeMissingValuesToNoDataName: "Remplacer les valeurs manquantes par NoData",
		visibleBandIDName: "ID de canal visible",
		infraredBandIDName: "ID de canal infrarouge",
		scientificOutputName: "Sortie scientifique",
		bandIndexesName: "Index de canaux",
		constantName: "Constante",
		weightName: "Pondération",
		minimumName: "Minimal",
		maximumName: "Maximum",
		sourceDataName: "Raster source",
		sourceFieldName: "Champ source",
		costRasterName: "Raster de coût",
		maxDistanceName: "Echelle minimale",
		valueRasterName: "Raster de valeur",
		costMultiplierName: "Multiplicateur à appliquer aux coûts",
		startCostName: "Coût de début",
		accumCostResistanceRateName: "Taux de résistance du coût cumulé",
		capacityName: "Capacité",
		travelDirectionName: "Sens de déplacement",
		cellSizeName: "Taille de cellule",
		populationFieldName: "Champ de population",
		areaUnitsName: "Unités de surface",
		outputValueTypeName: "Valeurs des cellules en sortie",
		barriersName: "Interruptions en entrée",
		destinationDataName: "Raster de destination",
		destinationFieldName: "Champ de destination",
		pathTypeName: "Type de chemin",
		observerFeaturesName: "Entités points d'observation",
		analysisMethodName: "Méthode d'analyse",
		analysisTypeName: "Type d'analyse",
		verticalErrorName: "Erreur verticale",
		refractivityCoefficientName: "Coefficient de réfraction",
		surfaceOffsetName: "Décalage de la surface",
		observerElevationName: "Altitude du point d'observation",
		observerOffsetName: "Décalage du point d'observation",
		innerRadiusName: "Rayon intérieur",
		innerRadiusIs3DDistanceName: "Le rayon intérieur est une distance 3D",
		outerRadiusName: "Rayon extérieur",
		outerRadiusIs3DDistanceName: "Le rayon extérieur est une distance 3D",
		horizontalStartAngleName: "Angle de départ horizontal",
		horizontalEndAngleName: "Angle de fin horizontal",
		verticalUpperAngleName: "Angle supérieur vertical",
		verticalLowerAngleName: "Angle inférieur vertical",
		zoneDataName: "Raster de zones",
		zoneFieldName: "Champ de zone",
		ignoreNoDataName: "Ignorer NoData dans les calculs",
		temperatureRasterName: "Raster de température",
		inTemperatureUnitsName: "Unités de température",
		outHeatIndexTemperatureUnitsName: "Unités d'indice de chaleur",
		relativeHumidityRasterName: "Raster d'humidité relative",
		outWindChillTemperatureUnitsName: "Unités de température ressentie",
		windSpeedRasterName: "Raster de vitesse du vent",
		inWindSpeedUnitsName: "Unités de vitesse du vent",
		valueName: "Valeur",
		propertyName: "Nom de la propriété",
		jsonName: "Les métadonnées JSON",
		zoneTableName: "Table des attributs zonaux",
		attributeFieldNames: "Noms de champ d'attribut",
		backgroundName: "Valeur d’arrière-plan",
		whereClauseName: "Clause Where",
		minimumValueFieldName: "Nom du champ de la valeur minimale",
		maximumValueFieldName: "Nom du champ de la valeur maximale",
		outValueFieldName: "Nom du champ de la valeur en sortie",
		defaultValueName: "Valeur en sortie par défaut",
		conversionMatrixName: "Matrice de conversion",
		IsPseudoColorOutputName: "Est une pseudo-couleur en sortie",
		unmappedAsRandomColorName: "Couleur attribuée de manière aléatoire aux pixels non appariés",
		distanceMethodName: "Méthode de calcul de distance",
		flowDirRasterName: "Raster de direction de flux",
		pourPointName: "Raster de points d’écoulement",
		pourPointFieldName: "Champ de point d’écoulement",
		constantZName: "Constante Z",
		zOffsetName: "Décalage Z",
		geoIdName: "Géoïde",
		calibrationTypeName: "Type de calibrage",
		filterTypeName: "Type de filtre",
		filterSizeName: "Taille de filtre",
		noiseModelName: "Modèle de bruit",
		noiseVarianceName: "Variance de bruit",
		additiveNoiseMeanName: "Moyenne de bruit additif",
		multiplicativeNoiseMeanName: "Moyenne de bruit multiplicatif",
		numberofLooksName: "Nombre de vues",
		dampingFactorName: "Facteur d’humidité",
		maskRasterName: "Raster de masque",
		nibbleValuesName: "Utiliser les valeurs NoData s’il s’agit du voisin le plus proche",
		nibbleNoDataName: "Grignoter les cellules NoData",
		zLimitName: "Limite Z",
		flowDirectionTypeName: "Type de direction de flux",
		weightRasterName: "Raster de pondération",
		forceEdgeName: "Forcer l’écoulement vers l’extérieur sur les quatre bords",
		streamRasterName: "Raster en mode continu",
		surfaceRasterName: "Surface raster",
		conversionType: "Type de conversion",
		distanceRaster1: "Raster de distance 1",
		distanceRaster2: "Raster de distance 2",
		costDistanceRaster: "Raster de distance de coût",
		costBacklinkRaster: "Raster d’antécédence de coût",
		overridesName: "Débrayages",
		fieldName: "Terrain",
		signatureFileOrUrl: "Fichier de signatures ou URL",
		redName: "Rouge",
		greenName: "Vert",
		blueName: "Bleu",
		infraredName: "Infrarouge",
		panchromaticName: "Panchromatique",
		multispectralName: "Multispectral",
		pansharpeningType: "Type d’affinage panchromatique",
		sensorName: "Capteur",
		spatialReferenceName: "Référence spatiale",
		xCellsizeName: "Taille de cellule X",
		yCellsizeName: "Taille de cellule Y",
		xOriginName: "Point de calage X",
		yOriginName: "Point de calage Y",
		percentileName: "Valeur de pourcentage",
		neighborhoodType: "Type de voisinage",
		widthName: "Largeur",
		heightName: "Hauteur",
		startAngleName: "Angle de départ",
		endAngleName: "Angle d’arrivée",
		neighborhoodValues: "Valeurs voisines",
		horizontalRaster: "Raster horizontal",
		horizontalFactor: "Facteur horizontal",
		verticalRaster: "Raster vertical",
		verticalFactor: "Facteur vertical",
		streamRaster: "Raster en mode continu",
		flowDirRaster: "Raster de direction de flux",
		numberNeighborCells: "Nombre de cellules voisines",
		zoneConnectivity: "Connectivité de zone",
		addLinkBehavior: "Ajouter un lien",
		excludedValue: "Valeur exclue",
		constantFillCheck: "Générer un raster de remplissage à partir d’une constante",
		fillRaster: "Raster de remplissage",
		constantFillValue: "Valeur constante",
		inputBitPositions: "Bit en entrée",
		outputBitPositions: "Bit en sortie",
		distanceTypeName: "Type de distance",
		barrierDataName: "Interruptions du raster",
		pourPointDataName: "Raster de capture des points d'écoulement",
		accumulationRasterName: "Raster d’accumulation de flux",
		snapDistanceName: "Distance de capture",
		orderMethodName: "Méthode de tri",
		directionMeasurementName: "Direction de mesure",
		processAsMultiband: "Traiter comme multibande",
		processMultidimensional: "Traiter comme multidimensionnel",
		forceFlowDirectionConvention: "Forcer la convention de sens de circulation pour le raster d’antécédence",
		initialAccumulation: "Accumulation initiale",
		maximumAccumulation: "Accumulation maximale",
		sourceLocationBands: "Générer la ligne et la colonne sources en tant que bandes supplémentaires dans la sortie",
		backDirectionBand: "Générer la direction arrière en tant que bande supplémentaire dans la sortie",
		numberOfCells: "Nombre de cellules",
		zoneValues: "Valeurs de zone",
		shrinkMethod: "Méthode de réduction",
		expandMethod: "Méthode de développement",
		inputSpectralProfileType: "Type de profil spectral",
		spectralProfileFileName: "Profil spectral",
		trainingFeatureFileName: "Entité d’entraînement",
		nonNegative: "Non négatif",
		sumToOne: "Somme égale à un",
		randomDistribution: "Distribution",
		meanName: "Moyenne",
		probabilityName: "Probabilité",
		alphaName: "Alpha",
		betaName: "Bêta",
		rName: "r",
		nName: "N",
		seed: "Valeur init.",
		randomNumberGenerator: "Générateur de nombres aléatoires",
		cellFactor: "Facteur de cellule",
		aggregationType: "Méthode d’agrégation",
		extentHandling: "Augmenter l’étendue si nécessaire",
		trendAnalysisDimensionName: "Nom de la dimension",
		trendAnalysisType: "Type de tendance",
		harmonicFrequency: "Fréquence harmonique",
		polynomialOrder: "Ordre polynomial",
		cycleLengthName: "Durée du cycle",
		trendAnalysisRMSE: "EQM",
		trendAnalysisR2: "R-carré",
		trendAnalysisSlopePValue: "Valeur P du coefficient de pente",
		trendAnalysisSeasonalPeriod: "Période saisonnière",
		cycleUnitName: "Unité de cycle",
		predictDimensionValues: "Valeurs",
		dimensionDefinitionType: "Définition de la dimension",
		predictDimensionStart: "Début",
		predictDimensionEnd: "Fin",
		predictDimensionInterval: "Valeur de l’intervalle",
		dimensionUnit: "Unité",
		interpolationCellsizeName: "Taille de cellule d’interpolation",
		variableName: "Variables",
		dimensionlessName: "Sans dimension",
		mdimDefinition: "Dimension Definition (Définition de la dimension)",
		dimensionName: "Cotation",
		iterationStart: "Start of first iteration (Début de la première itération)",
		iterationEnd: "End of first iteration (Fin de la première itération)",
		intervalStart: "Début de l’intervalle",
		intervalEnd: "Fin de l’intervalle",
		stepName: "Pas",
		rangesName: "Plages",
		minValue: "Valeur minimale",
		maxValue: "Valeur maximale",
		changeAnalysisRasterName: "Raster d’analyse des changements",
		changeTypeName: "Modifier le type",
		segmentDate: "Date du segment",
		changeDirectionName: "Sens du changement",
		maxNumChangesName: "Nombre maximal de changements",
		filterByYear: "Filtrer par année",
		minimumYear: "Valeur minimale",
		maximumYear: "Valeur maximale",
		filterByDuration: "Filtrer par durée",
		minimumDuration: "Durée minimale",
		maximumDuration: "Durée maximale",
		filterByMagnitude: "Filtrer par magnitude",
		minimumMagnitude: "Magnitude minimale",
		maximumMagnitude: "Magnitude maximale",
		filterByStartValue: "Filtrer par valeur de départ",
		minimumStartValue: "Valeur de départ minimale",
		maximumStartValue: "Valeur de départ maximale",
		filterByEndValue: "Filtrer par valeur de fin",
		minimumEndValue: "Valeur de fin minimale",
		maximumEndValue: "Valeur de fin maximale",
		modelTypeName: "Type de modèle",
		fromRasterName: "Raster d’origine",
		toRasterName: "Raster de destination",
		computeChangeMethod: "Méthode Calculer les modifications",
		fromClassValues: "Valeurs de classe d’origine (exemple : 2 5)",
		toClassValues: "Valeurs de classe de destination (exemple : 2 5)",
		keepMethod: "Méthode de filtrage",
		useColorMethod: "Définir les couleurs de transition",
		detectChangeBands: "Bandes pour la détection des changements (commencent à 0)",
		tmaskBands: "Bandes pour le masquage temporel (commencent à 0)",
		chiSquaredThreshold: "Seuil du khi deux pour la détection des changements",
		minAnomaly: "Observations des anomalies consécutives minimales",
		updatingFrequency: "Mise à jour de la fréquence de pertinence (en années)",
		distanceAccumulationRasterName: "Raster d’accumulation de distance",
		costBackdirectionRasterName: "Raster de direction arrière ou de direction de flux",
		rasterCollectionName: "Ensemble de rasters",
		itemFunctionName: "Fonction de l’élément",
		aggregationFunctionName: "Fonction d’agrégation",
		processingFunctionName: "Fonction de traitement",
		aggregationDefinitionName: "Définition de l’agrégation",
		queryGeometryName: "Requête Géométrie",
		factorFunctionZeroFactor: "Facteur zéro",
		factorFunctionCutAngle: "Angle d’inflexion",
		factorFunctionSideFactor: "Facteur latéral",
		factorFunctionSlope: "Pente",
		factorFunctionLowCutAngle: "Angle d’inflexion inférieur",
		factorFunctionHighCutAngle: "Angle d’inflexion supérieur",
		factorFunctionCosPower: "Puissance de cosinus",
		factorFunctionSecPower: "Puissance de sécante",
		factorFunctionTablePath: "Chemin d’accès à la table",
		processingBand: "Bande de traitement",
		processingBandName: "Nom de la bande de traitement",
		snappingDate: "Date de capture",
		maxNumSegments: "Nombre maximal de segments",
		vertexCountOvershoot: "Dépassement du nombre de sommets",
		spikeThreshold: "Seuil de pic",
		recoveryThreshold: "Seuil de récupération",
		minNumObs: "Nombre minimal d’observations",
		pValueThreshold: "Seuil de la valeur P",
		bestModelProportion: "Proportion de modèle idéale",
		preventOneYearRecovery: "Empêcher la récupération sur un an",
		recoveryIncreaseTrend: "La tendance de récupération augmente",
		outputOtherBands: "Générer d’autres bandes en sortie",
		sortType: "Type de tri",
		numberOfRuns: "Exécuter deux fois l'expansion et la contraction",
		percentileValue: "Valeur du centile",
		percentileInterpolationType: "Percentile interpolation type (Type d’interpolation en centile)",
		rasterInfoProperty: "Propriété",
		rasterInfoValue: "Valeur",
		rasterInfoColumns: "Colonnes",
		rasterInfoRows: "Lignes",
		rasterInfoBandCount: "Nombre de bandes",
		rasterInfoPixelSizeX: "Taille de cellule X",
		rasterInfoPixelSizeY: "Taille de cellule Y",
		rasterInfoPixelType: "Type de pixel",
		rasterExtentTop: "Haut",
		rasterExtentBottom: "Bas",
		rasterExtentLeft: "Gauche",
		rasterExtentRight: "Droite",
		rasterStatisticsNotCalculated: "Les statistiques n’ont pas été calculées.",
		spatialReferenceProjection: "Projection",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "WKID précédent",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "VCSWKID précédent",
		spatialReferenceAuthority: "Autorité",
		spatialReferenceLinearUnit: "Unité linéaire",
		spatialReferenceAngularUnit: "Unité angulaire",
		spatialReferenceFalseEasting: "Abscisse fictive",
		spatialReferenceFalseNorthing: "Ordonnée fictive",
		spatialReferenceCentralMeridian: "Méridien central",
		spatialReferencePrimeMeridian: "Méridien principal",
		spatialReferenceStandardParallel1: "Parallèle de référence 1",
		spatialReferenceStandardParallel2: "Parallèle de référence 2",
		spatialReferenceLatitudeOfOrigin: "Latitude de l’origine",
		spatialReferenceAuxiliarySphereType: "Type de sphère auxiliaire",
		spatialReferenceDatum: "Datum",
		spatialReferenceSpheroid: "Sphéroïde",
		spatialReferenceSemimajorAxis: "Demi-grand axe",
		spatialReferenceSemiminorAxis: "Demi-petit axe",
		spatialReferenceInverseFlattening: "Aplatissement inverse",
		inputDefinitionFileName: "Fichier de définition en entrée",
		deleteName: "Supprimer",
		addVariableName: "Ajouter une variable",
		maxNumPixelsPerSegment: "Taille maximale du segment en pixels",
		forwardWindowName: "Fenêtre avant",
		backwardWindowName: "Fenêtre arrière",
		noDataHandlingName: "Gestion des valeurs NoData",
		circularWrapValueName: "Valeur de repli circulaire",
		fromClassNameFieldName: "Nom de champ pour les noms de classe dans le raster d’origine",
		toClassNameFieldName: "Nom de champ pour les noms de classe dans le raster de destination",
		targetRasterName: "Raster cible",
		circularWrapValue: "Valeur de repli circulaire",
		bandIndexesR: "Expression rouge",
		bandIndexesG: "Expression verte",
		bandIndexesB: "Expression bleue",
		exampleName: "Exemple",
		inputName: "Entrée",
		outputName: "Sortie",
		optionalName: "Facultatif",
		browseDefinitionFile: "Rechercher le fichier de définition",
		selectDefinitionFile: "Sélectionner le fichier de définition en entrée",
		inputDefinitionURL: "URL du fichier de définition en entrée",
		enterDefinitionFileURL: "Saisir l’URL du fichier de définition",
		browseXMLFile: "Rechercher le fichier XML",
		selectStatsFile: "Sélectionner le fichier de statistiques et d’histogrammes",
		enterXMLFileURL: "Saisir l’URL du fichier XML",
		xmlFileURL: "URL du fichier XML",
		circularCalculation: "Calculer les statistiques circulaires",
		localSurfaceType: "Type de surface locale",
		surfaceParameterType: "Type de paramètre",
		neighborhoodDistance: "Distance de voisinage",
		useAdaptiveNeighborhood: "Utiliser le voisinage adaptatif",
		outputSlopeType: "Mesure de pente en sortie",
		projectAzimuths: "Projeter des azimuts géodésiques",
		useEquatorialAspect: "Utiliser l’aspect équatorial",
		zUnit: "Unité Z",
		analysisMask: "Masque d’analyse",
		stdDeviation: "Écart type",
		"true": "Vrai",
		"false": "Faux",
		costDistanceRaster1: "1er raster de distance de coût cumulé en entrée",
		costDistanceRaster2: "2e raster de distance de coût cumulé en entrée",
		threshold: "Seuil",
		thresholdMethod: "Méthode de seuil",
		directionRaster1: "1er raster de direction arrière en entrée",
		directionRaster2: "2e raster de direction arrière en entrée",
		maxIterations: "Nombre maximum d’itérations",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Manuelle",
		attributeTableTypeExternal: "Externe",
		clrSchemeTypeColormap: "Palette de couleurs",
		clrSchemeTypeColorRamp: "Dégradé de couleurs",
		colormapTypeElevation: "Altitude",
		colormapTypeGray: "Gris",
		colormapTypeNDVI: "Indice NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Aléatoire",
		none: "Aucun",
		slopeTypeAdjusted: "Ajusté",
		slopeTypeDegree: "Degré",
		slopeTypePercentRise: "Pourcentage d’élévation",
		slopeTypeScaled: "Mise à l’échelle",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "PourcentageMinMax",
		stretchTypeSigmoid: "Sigmoïde",
		stretchTypeStdDev: "Ecart type",
		hillshadeTypeSimple: "Traditionnel",
		hillshadeTypeMultidirectional: "Multidirectionnel",
		bandComboByNames: "Noms des canaux",
		bandComboByWavelength: "Longueurs d'ondes des canaux",
		bandComboByIDs: "Identifiants des canaux",
		missingBandActionBestMatch: "Meilleur résultat",
		missingBandActionFail: "Échec",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Centimètres",
		unitTypeDecimeters: "Décimètres",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Pieds",
		unitTypeFeetPerSec: "Pieds par seconde (pd/s)",
		unitTypeInches: "Pouces",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilomètres",
		unitTypeKmsPerHour: "Kilomètres par heure (km/h)",
		unitTypeKnots: "Nœuds (nd)",
		unitTypeMeters: "Mètres",
		unitTypeMetersPerSec: "Mètres par seconde (m/s)",
		unitTypeMiles: "Milles",
		unitTypeMilesPerHour: "Miles par heure (mph)",
		unitTypeMillimeters: "Millimètres",
		unitTypeNauticalMiles: "Milles nautiques",
		unitTypeYards: "Yards",
		unitTypeDecimalDegrees: "Degrés décimaux",
		unitTypePoints: "Points",
		unitTypeUnknown: "Inconnu",
		unitTypeSqMapUnits: "Unité de carte au carré",
		unitTypeSqMiles: "Miles carrés",
		unitTypeSqKms: "Kilomètres carrés",
		unitTypeAcres: "Ares",
		unitTypeHectares: "Hectares",
		unitTypeSqYards: "Yards carrés",
		unitTypeSqFt: "Pieds carrés",
		unitTypeSqInches: "Pouces carrés",
		unitTypeSqMts: "Mètres carrés",
		unitTypeSqCms: "Centimètres carrés",
		unitTypeSqMms: "Millimètres carrés",
		cellsizeTypeFirst: "Premier de",
		cellsizeTypeMin: "Mini de",
		cellsizeTypeMax: "Max de",
		cellsizeTypeMean: "Moyenne de",
		cellsizeTypeLast: "Dernier de",
		extentTypeFirst: "Premier de",
		extentTypeIntersection: "Intersection de",
		extentTypeUnion: "Union de",
		extentTypeLast: "Dernier de",
		noDataInterpretAny: "Certains critères",
		noDataInterpretAll: "Tous les critères",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Profil",
		curvatureTypePlanform: "Planiforme",
		filterTypeLineDetectionHorizontal: "Détection de ligne horizontale",
		filterTypeLineDetectionVertical: "Détection de ligne verticale",
		filterTypeLineDetectionLeftDiagonal: "Détection de ligne diagonale gauche",
		filterTypeLineDetectionRightDiagonal: "Détection de ligne diagonale droite",
		filterTypeGradientNorth: "Dégradé nord",
		filterTypeGradientWest: "Dégradé ouest",
		filterTypeGradientEast: "Dégradé est",
		filterTypeGradientSouth: "Dégradé sud",
		filterTypeGradientNorthEast: "Dégradé nord-est",
		filterTypeGradientNorthWest: "Dégradé nord-ouest",
		filterTypeSmoothArithmeticMean: "Moyenne arithmétique lissée",
		filterTypeSmoothing3x3: "Lissage 3x3",
		filterTypeSmoothing5x5: "Lissage 5x5",
		filterTypeSharpening3x3: "Affinage 3x3",
		filterTypeSharpening5x5: "Affinage 5x5",
		filterTypeLaplacian3x3: "Laplacien 3x3",
		filterTypeLaplacian5x5: "Laplacien 5x5",
		filterTypeSobelHorizontal: "Sobel horizontal",
		filterTypeSobelVertical: "Sobel vertical",
		filterTypeSharpen: "Affinage",
		filterTypeSharpen2: "Affiner davantage",
		filterTypePointSpread: "Dispersion des points",
		userDefined: "Défini par l’utilisateur",
		ContourTypeLines: "Isolignes",
		ContourTypeFill: "Remplissage d’isolignes",
		ContourTypeSmoothOnly: "Surface lisse uniquement",
		rasterizeFirst: "Premier",
		rasterizeLast: "Dernier",
		rasterizeSmallest: "Le plus petit",
		rasterizeLargest: "Le plus grand",
		resamplingTypeNearest: "Voisin le plus proche",
		resamplingTypeBilinear: "Interpolation bilinéaire",
		resamplingTypeCubic: "Convolution cubique",
		resamplingTypeMajority: "Majorité",
		resamplingTypeBilinearPlus: "Interpolation bilinéaire Plus",
		resamplingTypeGauss: "Flou gaussien",
		resamplingTypeGaussPlus: "Flou gaussien Plus",
		resamplingTypeAverage: "Moyenne",
		resamplingTypeMinimum: "Minimal",
		resamplingTypeMaximum: "Maximum",
		resamplingTypeVectorAvg: "Moyenne vectorielle",
		minimum: "Minimal",
		maximum: "Maximum",
		mean: "Moyenne",
		stdDeviation: "Écart type",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Magnitude-Direction",
		unknown: "Inconnu",
		angleRefSysGeographic: "Géographique",
		angleRefSysArithmetic: "Arithmétique",
		interpolateIrregularDataNearest: "Voisin le plus proche",
		interpolateIrregularDataBilinear: "Bilinéaire",
		interpolateIrregularDataTinningLinear: "TIN linéaire",
		interpolateIrregularDataTinningNaturalNeighbor: "Voisin naturel",
		interpolateIrregularDataTinningIDW: "Pondération par l'inverse de la distance",
		esriRasterThresholdTypeConstant: "Constante",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg Max",
		argStatsTypeMin: "Arg Min",
		argStatsTypeMedian: "Arg médian",
		argStatsTypeDuration: "Duration",
		arithmeticOpPlus: "Addition",
		arithmeticOpMinus: "Soustraction",
		arithmeticOpMultiply: "Multiplication",
		arithmeticOpDivide: "Division",
		arithmeticOpPower: "Puissance",
		arithmeticOpMode: "Mode",
		clipTypeOutside: "Découpage extérieur",
		clipTypeInside: "Découpage intérieur",
		yes: "Oui",
		no: "Non",
		densities: "Densités",
		expectedCounts: "Volumes attendus",
		planar: "plane",
		geodesic: "Géodésique",
		eachCell: "Chaque cellule",
		eachZone: "Chaque zone",
		bestSingle: "Le moins coûteux",
		allSightlines: "Toutes les lignes de visée",
		perimeterSightlines: "Lignes de visée du périmètre",
		frequency: "Fréquence",
		observers: "Points d'observation",
		majority: "Majorité",
		median: "Médian",
		minority: "Minorité",
		percentile: "Centile",
		range: "Plage",
		sum: "Somme",
		variety: "Variété",
		ndvi: "Indice NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "SAVI transformé",
		bandArithmeticMethodMSAVI: "SAVI modifié",
		bandArithmeticMethodSultan: "Formule de Sultan",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Oxyde de fer",
		ferrousMinerals: "Minéraux ferreux",
		clayMinerals: "Minéraux argileux",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Racine carrée",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Non bit à bit",
		localBooleanNot: "Non booléen",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Entier",
		localIsNull: "Est nul",
		localFloat: "Flottant",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Opposé",
		localRoundDown: "Arrondi inférieur",
		localRoundUp: "Arrondi supérieur",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Addition",
		localMinus: "Soustraction",
		localTimes: "Multiplier",
		localPower: "Puissance",
		localBitwiseAnd: "Et bit à bit",
		localBitwiseLeftShift: "Décalage à gauche bit à bit",
		localBitwiseOr: "Ou bit à bit",
		localBitwiseRightShift: "Décalage à droite bit à bit",
		localBitwiseXor: "Ou exclusif bit à bit",
		localBooleanAnd: "Et booléen",
		localBooleanOr: "Ou booléen",
		localBooleanXor: "Ou exclusif booléen",
		localDivide: "Division",
		localEqualTo: "Egal à",
		localGreaterThan: "Supérieur à",
		localGreaterThanEqual: "Supérieur ou égal à",
		localLessThan: "Inférieur à",
		localLessThanEqual: "Inférieur ou égal à",
		localMod: "Mod",
		localNotEqual: "Différent de",
		localATan2: "ATan2",
		localSquare: "Carré",
		localSetNull: "SetNull",
		remapDefTypeList: "Liste",
		remapDefTypeTable: "Tableau",
		remapTableTypeSimple: "Simple",
		remapTableTypeDynamic: "Dynamique",
		remapTableTypeReassignment: "Réaffectation",
		geomCorrectionByConstZ: "Utiliser la constante Z",
		geomCorrectionByDEM: "Utiliser MNA",
		radarCalibBetaNought: "Bêta zéro",
		radarCalibSigmaNought: "Sigma zéro",
		radarCalibGammaNought: "Gamma zéro",
		speckleFilterTypeLee: "Filtre LEE",
		speckleFilterTypeEnhancedLee: "Filtre LEE amélioré",
		speckleFilterTypeFrost: "Filtre de givre",
		speckleFilterTypeKuan: "Filtre Kuan",
		speckleNoiseModelMul: "Bruit multiplicatif",
		speckleNoiseModelAdd: "Bruit additif",
		speckleNoiseModelAddnMul: "Bruit additif et multiplicatif",
		mosaicOpTypeFirst: "Premier",
		mosaicOpTypeLast: "Dernier",
		mosaicOpTypeMin: "Min",
		mosaicOpTypeMax: "Max",
		mosaicOpTypeMean: "Moyenne",
		mosaicOpTypeBlend: "Fusionner",
		mosaicOpTypeSum: "Somme",
		integer: "Entier",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Verticale",
		horizontal: "Horizontale",
		localCellStatisticsMajority: "Majorité",
		localCellStatisticsMax: "Maximum",
		localCellStatisticsMean: "Moyenne",
		localCellStatisticsMedian: "Médian",
		localCellStatisticsMin: "Minimal",
		localCellStatisticsMinority: "Minorité",
		localCellStatisticsRange: "Plage",
		localCellStatisticsStdDev: "Écart type",
		localCellStatisticsSum: "Somme",
		localCellStatisticsVariety: "Variété",
		localCellStatisticsMajorityIgnoreND: "Majorité (Ignorer NoData)",
		localCellStatisticsMaxIgnoreND: "Maximum (Ignorer NoData)",
		localCellStatisticsMeanIgnoreND: "Moyenne (Ignorer NoData)",
		localCellStatisticsMedianIgnoreND: "Médiane (Ignorer NoData)",
		localCellStatisticsMinIgnoreND: "Minimum (Ignorer NoData)",
		localCellStatisticsMinorityIgnoreND: "Minorité (Ignorer NoData)",
		localCellStatisticsRangeIgnoreND: "Plage (Ignorer NoData)",
		localCellStatisticsStdDevIgnoreND: "Ecart type (Ignorer NoData)",
		localCellStatisticsSumIgnoreND: "Somme (Ignorer NoData)",
		localCellStatisticsVarietyIgnoreND: "Variété (Ignorer NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Centile (Ignorer les valeurs NoData)",
		fromSource: "À partir de la source",
		toSource: "Vers la source",
		colorspaceConversionRgbToHsv: "RVB vers TSL",
		colorspaceConversionHsvToRgb: "TSL vers RVB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Moyenne",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Rectangle",
		circleNeighborhood: "Cercle",
		annulusNeighborhood: "Anneau",
		wedgeNeighborhood: "Secteur",
		irregularNeighborhood: "Irrégulière",
		weightNeighborhood: "Pondération",
		four: "Four",
		eight: "Eight",
		within: "Dans",
		cross: "Croiser",
		addLink: "Ajouter un lien",
		noLink: "Aucun lien",
		weightedMean: "Moyenne pondérée",
		ls8QCBitPatternCirrus: "Landsat 8 Cirrus",
		ls8QCBitPatternCloud: "Landsat 8 Nuage",
		ls8QCBitPatternCloudShadow: "Landsat 8 Ombre nuage",
		ls8QCBitPatternDesignatedFill: "Landsat 8 Remplissage désigné",
		ls8QCBitPatternDroppedFrame: "Landsat 8 Image déplacée",
		ls8QCBitPatternSnowIce: "Landsat 8 Neige/glace",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 Occlusion de terrain",
		ls8QCBitPatternVegetation: "Landsat 8 Végétation",
		ls8QCBitPatternWater: "Landsat 8 Eau",
		downStream: "En aval",
		upStream: "En amont",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Coupe actuelle",
		allSlices: "Toutes les coupes",
		expandDistance: "DISTANCE",
		expandMorphological: "MORPHOLOGIQUE",
		spectralProfileFile: "Profil spectral",
		trainingFeatureFile: "Entité d’entraînement",
		randomDistributionTypeUniform: "Uniforme",
		randomDistributionTypeUniformInteger: "Entiers",
		randomDistributionTypeNormal: "Normale",
		randomDistributionTypeExponential: "Exponentielle",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binomiale",
		randomDistributionTypeGeometric: "Géométrique",
		randomDistributionTypeNegativeBinomial: "Binomiale négative",
		randomGeneratorTypeStandardCRand: "Standard C Rand",
		randomGeneratorTypeAlgorithmACM599: "Algorithme de collecte ACM 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Somme",
		medainName: "Médiane",
		trendLinear: "Linéaire",
		trendHarmonic: "Harmonique",
		trendPolynomial: "Polynomiale",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Kendall saisonnier",
		dimensionByValue: "Par valeur",
		dimensionByInterval: "Par intervalle",
		mdimDefTypeAll: "chacune",
		mdimDefTypeByValues: "By Values (Par valeurs)",
		mdimDefTypeByRanges: "By Ranges (Par plages)",
		mdimDefTypeByIteration: "By Iteration (Par itération)",
		mdimDefTypeByInterval: "Par intervalle",
		mdimDefTypeByTargetRaster: "Par raster cible",
		esriTimeUnitsHours: "Heures",
		esriTimeUnitsDays: "Jours",
		esriTimeUnitsWeeks: "Semaines",
		esriTimeUnitsMonths: "Mois",
		esriTimeUnitsYears: "Années",
		esriTimeIntervalKeywordHourly: "Par heure",
		esriTimeIntervalKeywordDaily: "Par jour",
		esriTimeIntervalKeywordWeekly: "Par semaine",
		esriTimeIntervalKeywordDekadly: "Par 10 jours",
		esriTimeIntervalKeywordPentadly: "Par 5 jours",
		esriTimeIntervalKeywordMonthly: "Par mois",
		esriTimeIntervalKeywordQuarterly: "Par trimestre",
		esriTimeIntervalKeywordYearly: "Par an",
		esriTimeIntervalKeywordRecurringDaily: "Récurrence quotidienne",
		esriTimeIntervalKeywordRecurringWeekly: "Récurrence hebdomadaire",
		esriTimeIntervalKeywordRecurringMonthly: "Récurrence mensuelle",
		esriTimeIntervalKeywordRecurringQuarterly: "Récurrence trimestrielle",
		aggDefTypeAll: "Tout",
		aggDefTypeIntervalKeyword: "Mot-clé de l’intervalle",
		aggDefTypeIntervalValue: "Valeur de l’intervalle",
		aggDefTypeIntervalRanges: "Plages d’intervalle",
		latestChange: "Heure du dernier changement",
		earliestChange: "Heure du premier changement",
		largestChange: "Heure du changement le plus important",
		numberOfChanges: "Nombre de changements",
		longestChange: "Date/heure du plus long changement",
		shortestChange: "Date/heure du plus court changement",
		fastestChange: "Date/heure du changement le plus rapide",
		slowestChange: "Date/heure du changement le plus lent",
		allChanges: "Tout",
		increaseChanges: "Augmenter",
		decreaseChanges: "Diminuer",
		segmentBeginning: "Début du segment",
		segmentEnd: "Fin du segment",
		esriComputeChangeMethodDifference: "Différence",
		esriComputeChangeMethodRelativeDifference: "Différence relative",
		esriComputeChangeMethodCategorical: "Différence catégorielle",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Distance euclidienne spectrale",
		esriComputeChangeMethodMultispectralAngularDifference: "Écart de l’angle spectral",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Bande avec le plus de changements",
		esriComputeChangeKeepAll: "Tout conserver",
		esriComputeChangeKeepChangedOnly: "Conserver uniquement les pixels ayant changé",
		esriComputeChangeKeepUnchangedOnly: "Conserver uniquement les pixels inchangés",
		esriComputeChangeUseColorAverage: "Utiliser la moyenne des couleurs d’origine et de destination",
		esriComputeChangeUseColorFrom: "Utiliser les couleurs d’origine",
		esriComputeChangeUseColorTo: "Utiliser les couleurs de destination",
		factorFunctionBinary: "Binaire",
		factorFunctionForward: "Avant",
		factorFunctionLinear: "Linéaire",
		factorFunctionInvLinear: "Linéaire inverse",
		factorFunctionTable: "Table",
		factorFunctionSymLinear: "Linéaire symétrique",
		factorFunctionSymInvLinear: "Linéaire symétrique inverse",
		factorFunctionCos: "Cosinus",
		factorFunctionSec: "Sécante",
		factorFunctionCosSec: "Cosinus - Sécante",
		factorFunctionSecCos: "Sécante - Cosinus",
		noSort: "Ne pas trier",
		ascend: "Croissant",
		descend: "Décroissant",
		autoDetect: "Détection automatique",
		nearest: "Le plus proche",
		linear: "Linéaire",
		esriMonthJanuary: "Janvier",
		esriMonthFebruary: "Février",
		esriMonthMarch: "Mars",
		esriMonthApril: "Avril",
		esriMonthMay: "Mai",
		esriMonthJune: "Juin",
		esriMonthJuly: "Juillet",
		esriMonthAugust: "Août",
		esriMonthSeptember: "Septembre",
		esriMonthOctober: "Octobre",
		esriMonthNovember: "Novembre",
		esriMonthDecember: "Décembre",
		dimensionalMovingIgnoreNoData: "Données",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "Remplir les valeurs NoData",
		circularMean: "Moyenne circulaire",
		circularName: "Circulaire",
		arithmeticName: "Arithmétique",
		slopeName: "Pente",
		aspectName: "Exposition",
		meanCurvature: "Courbure moyenne",
		profileCurvature: "Courbure longitudinale (ligne de pente normale)",
		tangentialCurvature: "Courbure tangentielle (isoligne normale)",
		planCurvature: "Courbure transversale (isoligne projetée)",
		contourGeodesicTorsion: "Torsion géodésique des isolignes",
		gaussianCurvature: "Courbure gaussienne",
		casoratiCurvature: "Courbure Casorati",
		localSurfaceTypeQuadratic: "Quadratique",
		localSurfaceTypeBiquadratic: "Biquadratique",
		thresholdNoThreshold: "Aucun seuil",
		thresholdPercentLeastCost: "Pourcentage de moindre coût",
		thresholdAccumulativeCost: "Coût cumulé",
		clrmapTypeHillshade: "Ombrage"
	},
	categoryLabels: {
		sourceCharacteristics: "Caractéristiques source",
		neighborhoodSettings: "Paramètres de voisinage",
		statistics: "Statistiques",
		gamma: "Gamma",
		viewshedParameters: "Paramètres du champ de vision",
		observerParameters: "Paramètres du point d'observation",
		irregularDataInterpolation: "Interpolation des données irrégulières",
		modelStatistics: "Statistiques du modèle",
		aggregationDef: "Définition de l’agrégation",
		filterByAttributes: "Filtrer par attributs",
		percentileName: "Centile",
		rasterInfo: "Informations raster",
		extent: "Étendue",
		spatialReference: "Référence spatiale"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Nom de la couche à créer et ajouter à la carte.</p>",
		resultType: "<p>Type de sortie à créer. Les sorties peuvent être des couches d’imagerie tuilée ou des couches d’imagerie dynamique.</p>",
		saveResultIn: "<p>Nom du dossier de <b>Mes contenus</b> dans lequel le résultat sera enregistré.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Paramètres d’environnement pour l’analyse dans Map Viewer. </p>",
		outSR: "<p>Spécifie le système de coordonnées pour l’analyse et la couche de résultat.</p>",
		extent: "<p>Spécifie la zone à utiliser pour l’analyse.</p>",
		snapRaster: "<p>Ajuste l’étendue de la sortie afin qu’elle corresponde à l’alignement des cellules de la couche de raster de capture spécifiée.</p>",
		cellSize: "<p>Spécifie la taille de cellule ou la résolution à utiliser pour l’analyse et pour créer la couche raster en sortie.</p>",
		mask: "<p>Spécifie une couche de masque dans laquelle seules les cellules qui se trouvent dans la zone de masque sont utilisées pour l’analyse.</p>",
		resamplingMethod: "<p>Indique comment interpoler les valeurs de pixel si les rasters en entrée et en sortie ne correspondent pas.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Type non pris en charge",
		currentlyUnsupported: " Un éditeur par défaut pour ${missingType} est en attente, mais sera bientôt disponible. Espace réservé temporaire pour la zone de texte destinée à la spécification des entrées sous forme de chaînes.",
		unsupportedOverrideWarning: "Un composant d’éditeur de remplacement proposant une expérience utilisateur améliorée pour l’utilisation des paramètres suivants est en attente, mais sera bientôt disponible :",
		overrideWidgetMissing: "Composant d’éditeur de remplacement manquant.",
		uiIncomplete: "Échec de l’envoi de la tâche. La fonction ne peut pas s’exécuter car certains champs obligatoires sont incomplets ou manquants dans l’interface utilisateur.",
		count: "Nombre",
		selectVariables: "Sélectionner des variables",
		selectFeature: "Sélectionner une couche d’entités",
		greaterThanErrorMessage: "Le nombre en entrée doit être supérieur à ${min}",
		lesserThanErrorMessage: "Le nombre en entrée doit être inférieur à ${max}",
		greaterThanOrEqualErrorMessage: "Le nombre en entrée doit être supérieur ou égal à ${min}",
		lesserThanOrEqualErrorMessage: "Le nombre en entrée doit être inférieur ou égal à ${max}",
		allowScalar: "Sélectionner une couche ou saisir une constante",
		selectField: "Sélectionner un champ",
		parameterRequired: "Ce paramètre est obligatoire.",
		enterAValue: "Saisir une valeur...",
		invalidInput: "La valeur saisie n’est pas valide.",
		itemNotFound: "L’élément n’existe pas ou est inaccessible.",
		itemPermissionDenied: "Vous n’êtes pas autorisé à accéder à cet élément.",
		layerNotAvailable: "Échec du chargement de la couche ${layerName}.",
		multipleLayersNotAvailable: "Échec du chargement de la couche ${layerName} et d’autres couches.",
		learnMoreLabel: "En savoir plus",
		fieldNotAvailable: "Échec du chargement du champ.",
		allowAnalysis: "L’analyse n’est pas autorisée sur le service d’imagerie.",
		allowAnalysisReason: "Une ou plusieurs couches de la carte ne sont pas répertoriées ici car elles n’autorisent pas l’analyse.",
		learnMoreText: "En savoir plus",
		atLeastOneRasterInput: "Au moins une couche en entrée doit être une couche raster.",
		browseAnalysisLayers: "Rechercher des couches",
		activeMapViewExtent: "Utiliser l’étendue actuelle de la carte",
		chooseRaster: "Choisir le raster de découpage",
		chooseGeometry: "Choisir la géométrie de découpage",
		resultType: "Type de résultat",
		saveInFolder: "Enregistrer dans un dossier",
		outputName: "Nom en sortie",
		outputLayerType: "Type de couche en sortie",
		dynamicImageryLayer: "Couche d’imagerie dynamique",
		tiledImageryLayer: "Couche d’imagerie tuilée",
		custom: "Personnalisé",
		loading: "Chargement...",
		layerMissing: "Une ou plusieurs couches de la carte ne sont pas répertoriées ici car elles n’autorisent pas l’analyse. En savoir plus.",
		browseCoordinateSystems: "Parcourir les systèmes de coordonnées",
		unableToRepopulateOutSR: "Impossible de renseigner le système de coordonnées en sortie.",
		defaultTitle: "Plus",
		"ARC (equal arc-second)": "ARC (Equal Arc-Second)",
		Africa: "Afrique",
		Antarctica: "Antarctique",
		Argentina: "Argentine",
		Asia: "Asie",
		"Asteroid Belt": "Ceinture d’astéroïdes",
		"Atlantic Ocean": "Océan Atlantique",
		Australia: "Australie",
		"Australia and New Zealand": "Australie et Nouvelle-Zélande",
		Austria: "Autriche",
		"BLM (US Feet)": "BLM (Pieds américains)",
		Bangladesh: "Bangladesh",
		"Beijing 1954": "Beijing 1954",
		Bhutan: "Bhoutan",
		CGCS2000: "CGCS2000",
		Canada: "Canada",
		Caribbean: "Caraïbes",
		"Caribbean Sea": "Mer des Caraïbes",
		"Central America": "Amérique centrale",
		"Central and North America": "Amérique centrale et du Nord",
		Colombia: "Colombie",
		Continental: "Continentaux",
		"County Systems": "Systèmes de comtés",
		"Democratic Republic of the Congo": "République démocratique du Congo",
		"EPSG Arctic": "EPSG Arctic",
		Earth: "Terre",
		"Ellipsoidal-based": "Ellipsoïde",
		Europe: "Europe",
		Finland: "Finlande",
		France: "France",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss-Krüger",
		"Geographic Coordinate Systems": "Systèmes de coordonnées géographiques",
		Germany: "Allemagne",
		"Gravity-related": "Gravité",
		"Greenwich-based": "Greenwich",
		"Highways England": "Highways England",
		Illinois: "Illinois",
		"Indian Ocean": "Océan Indien",
		"Indian Subcontinent": "Sous-continent indien",
		Indiana: "Indiana",
		Indonesia: "Indonésie",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irlande et Royaume-Uni",
		Italy: "Italie",
		Japan: "Japon",
		Jupiter: "Jupiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libye",
		Malaysia: "Malaisie",
		"Malaysia and Singapore": "Malaisie et Singapour",
		Mars: "Mars",
		Mercury: "Mercure",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (Pieds américains)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (Pieds internationaux)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (Mètres)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (Pieds américains)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (Pieds internationaux)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (Mètres)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (Pieds américains)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (Pieds internationaux)",
		"NAD 1983 (Meters)": "NAD 1983 (Mètres)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (Mètres)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (Pieds américains)",
		"NAD 1983 (US Feet)": "NAD 1983 (Pieds américains)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (Pieds internationaux)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (Mètres)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (Pieds américains)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (Pieds internationaux)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (Mètres)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (Pieds américains)",
		"National Grids": "Grilles nationales",
		Navajo: "Navajo",
		Neptune: "Neptune",
		"New Beijing": "New Beijing",
		"New Zealand": "Nouvelle-Zélande",
		"North America": "Amérique du Nord",
		"Northern Hemisphere": "Hémisphère Nord",
		Norway: "Norvège",
		Oceans: "Océans",
		Oregon: "Oregon",
		"Other GCS": "Autre GCS",
		"Pacific Ocean": "Océan Pacifique",
		Pluto: "Pluton",
		Polar: "Polaires",
		Portugal: "Portugal",
		"Projected Coordinate Systems": "Systèmes de coordonnées projetées",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Remplacés",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturne",
		"Solar System": "Système solaire",
		"South Africa": "Afrique du Sud",
		"South America": "Amérique du Sud",
		"South Korea": "Corée du Sud",
		"Southern Hemisphere": "Hémisphère Sud",
		"Spheroid-based": "Basés sur un sphéroïde",
		"State Plane": "State Plane",
		"State Systems": "Systèmes d’État",
		Sweden: "Suède",
		"Switzerland and Liechtenstein": "Suisse et Liechtenstein",
		Texas: "Texas",
		Tribal: "Tribaux",
		Turkey: "Turquie",
		"US Feet": "Pieds américains",
		"USA and territories": "États-Unis et territoires",
		UTM: "UTM",
		Ukraine: "Ukraine",
		"Unknown Height Systems": "Système altimétrique inconnu",
		Uranus: "Uranus",
		Venus: "Vénus",
		"Vertical Coordinate Systems": "Systèmes de coordonnées verticales",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Monde",
		"World (Sphere-based)": "Monde (basés sur une sphère)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Terminé",
		noResults: "Aucun résultat trouvé",
		searchPlaceholder: "Nom ou WKID",
		browseTemplate: "Parcourir les modèles de fonction raster",
		saveTemplate: "Enregistrer le modèle de fonction raster",
		preview: "Aperçu",
		previewDescription: "Affichez un aperçu du résultat avant d’exécuter l’analyse.",
		showPreview: "Afficher un aperçu",
		previewLayer: "Couche d’aperçu ${number}",
		newPreview: "Nouvel aperçu",
		previewPopup: "Activer l’affichage d’un aperçu des résultats d’analyse en fonction des paramètres en entrée.",
		updatePreviewLayer: "Mettre à jour la couche d’aperçu sélectionnée",
		createPreviewLayer: "Créer une nouvelle couche d’aperçu",
		maximumPreviewAllowed: "Nombre maximal de couches d’aperçu autorisé : ${maxCount}",
		previewFailure: "Cette couche d’aperçu n’est pas disponible. Vérifiez les paramètres en entrée et procédez à une nouvelle mise à jour de cette couche d’aperçu.",
		header: "Sélectionner un élément",
		content: "Certaines modifications ne sont pas enregistrées dans ${rftTitle}. Si vous recommencez avec un nouveau modèle, ces modifications seront perdues.",
		dontSave: "Ne pas enregistrer",
		"continue": "Continuer",
		stretch: "Ajuster à la fenêtre",
		pan: "Déplacer",
		newTemplate: "Créer un nouveau modèle",
		openTemplate: "Ouvrir un modèle",
		addFunction: "Ajouter des fonctions raster",
		addConstant: "Ajouter une constante",
		addRaster: "Ajouter une variable raster",
		move: "Déplacer",
		zoom: "Zoom",
		saveAs: "Enregistrer sous",
		clear: "Effacer",
		addRasterFunctionTitle: "Ajouter des fonctions raster",
		templatePropertiesTitle: "Propriétés du modèle",
		browseRFT: "Parcourir les modèles de fonction raster",
		defaultToolDescription: "Outil d’analyse ${toolTitle}.",
		openToolText: "Ouvrir l’outil",
		toolDropdownText: "Menu déroulant de l’outil",
		addToMap: "Confirmer et ajouter à la carte",
		confirm: "Confirmer",
		select: "Sélectionner",
		selectTask: "Sélectionner une tâche",
		unsupportedLayer: "Ce paramètre ne prend pas en charge les couches suivantes : ${layerName}.",
		viewDetails: "Afficher les détails complets de l’élément",
		rename: "Renommer",
		duplicate: "Dupliquer",
		launch: "Ouvrir pour exécuter",
		templateEditor: "Éditeur de modèle",
		createItem: "Enregistrer le modèle de fonction raster",
		actionLabel: "Filtrer",
		filterPopoverHeading: "Filtrer les fonctions",
		defaultSearchPlaceholder: "Rechercher par nom",
		settings: "Paramètres",
		summary: "Résumé",
		definitionQuery: "Ensemble de définition",
		matchVariables: "Apparier les variables",
		unionDimension: "Union des dimensions",
		nameEditorPlaceholder: "Saisir un titre",
		summaryEditorPlaceholder: "Saisir une brève description",
		definitionQueryPlaceholder: "Saisir...",
		upload: "Charger",
		chooseImage: "Cliquer pour choisir un fichier",
		update: "Mettre à jour",
		thumbnailErrors: {
			wrongImageType: "Type d’image sélectionné incorrect",
			notAvailable: "Miniature non disponible",
			loadError: "Impossible de charger l’image",
			chooseFile: "Cliquer pour choisir un fichier"
		}
	}
};
const copy = "Copier";
const save = "Enregistrer";
const title = "Titre";
const folder = "Dossier";
const tags = "Balises";
const savingMessage = "Enregistrement de l'élément dans";
const shareWith = "Partager avec";
const share = "Partager";
const setSharingLevel = "Définir le niveau de partage";
const setGroupSharing = "Configurer le partage de groupe";
const owner = "Propriétaire";
const organization = "Organisation";
const everyone = "Tout le monde (public)";
const groups = "Groupes :";
const type = "Type";
const mosaic = "Mosaïque";
const itemGroup = "Groupe d’éléments";
const item = "Elément";
const definitionQuery = "Ensemble de définition";
const groupItemsBy = "Grouper les éléments par";
const groupFieldName = "Nom du champ de groupe";
const tagFieldName = "Nom du champ de balise";
const noTitleTagErrorMsg = "Vous devez attribuer un titre à votre élément et des balises pour que les recherches permettent de trouver la carte.";
const noTitleErrorMsg = "Vous devez fournir un titre pour votre élément.";
const noTagErrorMsg = "Vous devez fournir au moins une balise pour aider les utilisateurs à trouver votre élément au moyen de recherches.";
const error = "Erreur";
const warning = "Avertissement";
const success = "Opération réussie";
const details = "Détails :";
const tryAgain = "Réessayer";
const toolModeler = {
	save: "Enregistrer",
	editProperties: "Mettre à jour les propriétés",
	saveAs: "Enregistrer sous",
	savingNotification: "Enregistrement des modifications apportées à l’élément...",
	savingTitle: "Enregistrement",
	saveFailedMessage: "L'enregistrement des modifications a échoué.",
	saveWithErrorsMessage: "Les modifications ont été enregistrées avec les erreurs suivantes.",
	viewItemMessage: "Afficher l’élément enregistré",
	here: "ici.",
	itemCreatedMessage: "Le nouvel élément a été créé.",
	clickToViewItemMessage: "Cliquez sur OK pour afficher la page des détails de l’élément ou cliquez sur Annuler pour continuer.",
	readingFailed: "Échec du chargement du modèle de fonction raster sélectionné.",
	failedToLoadXML: "Échec du chargement du modèle de fonction raster sélectionné au format XML.",
	learnMore: "En savoir plus",
	overwriteTitle: "Confirmer le remplacement",
	overwriteMessage: "Souhaitez-vous remplacer l’élément existant ?",
	overwriteSuccessMessage: "L’élément a été mis à jour."
};
const toolEditor = {
	run: "Exécuter",
	save: "Enregistrer",
	deleteSelected: "Supprimer les éléments sélectionnés",
	addRaster: "Ajouter un raster",
	addScalar: "Ajouter une valeur scalaire",
	layout: "Mise en page automatique",
	errorTitle: "Erreur",
	invalidToolMessage: "Le modèle de fonction raster n’est pas valide.",
	out: "Dehors",
	zoomIn: "Zoom avant",
	zoomOut: "Zoom arrière",
	zoomToFit: "Ajuster à la fenêtre",
	panOn: "Activer le mode de déplacement",
	panOff: "Désactiver le mode de déplacement",
	defaultModelName: "Modèle d’outil",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Modèle de fonction raster",
	defaultToolDescription: "Ajoutez un bref résumé de la fonction raster.",
	defaultHelpText: "Cliquez sur l’icône d’aide pour mettre à jour le texte d'aide",
	editHelpTitle: "Aide pour la mise à jour",
	saveLabel: "Enregistrer",
	cancelLabel: "Annuler",
	thumbnail: {
		wrongImageType: "Type d’image sélectionné incorrect",
		notAvailable: "Miniature indisponible",
		loadError: "Impossible de charger l’image",
		chooseFile: "Cliquez pour sélectionner un fichier"
	}
};
const saveUtils = {
	thumbnail: "Miniature",
	sharing: "Partage"
};
const close = "Fermer";
const unsavedWarningExisting = "Souhaitez-vous enregistrer les modifications apportées à l’élément <b>${itemTitle}</b> ?";
const unsavedWarningNew = "Souhaitez-vous enregistrer vos modifications ?";
const saveAs = "Enregistrer sous";
const dontSave = "Ne pas enregistrer";
const unsavedTitle = "Modifications non enregistrées";
const invalidRFTMessage = "Le modèle de fonction raster créé n’est pas valide.";
const errorTitle = "Erreur";
const breadcrumb = "Éditeur de fonctions raster";
const breadcrumbEditor = "Contenu > Éditeur de fonctions raster";
const viewerModeTitle = "Lecture seule";
const viewerModeMessage = "L’élément de modèle de fonction raster est en lecture seule. Les modifications ne peuvent pas être enregistrées.";
const userStartDirection = "Sélectionnez une fonction pour commencer à générer un modèle de fonction raster.";
const selectFunction = "Ajouter une fonction";
const deselectFunction = "Supprimer une fonction";
const dialogTitle = "Système";
const category = "Catégories";
const search = "Rechercher les fonctions raster";
const categoryNames = {
	analysis: "Analyse",
	appearance: "Apparence",
	classification: "Classification",
	conversion: "Conversion",
	correction: "Correction",
	dataManagement: "Gestion des données",
	distance: "Distance",
	distanceLegacy: "Distance (existante)",
	hydrology: "Hydrologie",
	math: "Mathématiques",
	mathConditional: "Mathématiques : conditionnelles",
	mathLogical: "Mathématiques : logiques",
	mathTrigonometric: "Mathématiques : trigonométriques",
	reclass: "Reclassement",
	statistical: "Statistique",
	surface: "Surface"
};
const commonStrings_fr = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_fr);


//# sourceMappingURL=common-strings.fr-f066cbe6.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,