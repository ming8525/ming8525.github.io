"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-967fc7"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-background-symbol_6.entry.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-background-symbol_6.entry.js ***!
  \*******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_background_symbol: () => (/* binding */ ArcgisSmartMappingBackgroundSymbol),
/* harmony export */   arcgis_smart_mapping_default_symbol: () => (/* binding */ ArcgisSmartMappingDefaultSymbol),
/* harmony export */   arcgis_smart_mapping_method_button: () => (/* binding */ ArcgisSmartMappingMethodButton),
/* harmony export */   arcgis_smart_mapping_rotation: () => (/* binding */ ArcgisSmartMappingRotation),
/* harmony export */   arcgis_smart_mapping_theme_button: () => (/* binding */ ArcgisSmartMappingThemeButton),
/* harmony export */   arcgis_smart_mapping_transparency: () => (/* binding */ ArcgisSmartMappingTransparency)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./date-79c7d93c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js");
/* harmony import */ var _precision_06a73672_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./precision-06a73672.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/precision-06a73672.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _predominance_a1a2d74d_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./predominance-a1a2d74d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/predominance-a1a2d74d.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */













/**
 * Updates the layer with a DotDensity renderer with default settings
 * @param props: must contain layer, mapView, GalleryFields[]
 * @param options: options
 */
function createOpacityVisualVariable(options) {
    var _a, _b;
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
    const layer = smLayer;
    options = options || {};
    if (!options.fieldInfos && !((_a = options.fieldInfos) === null || _a === void 0 ? void 0 : _a.length)) {
        return Promise.reject();
    }
    const fieldInfo = options.fieldInfos[0];
    return modules.OpacityVariableCreator.createVisualVariable({
        layer,
        field: fieldInfo.field,
        view: mapView,
        valueExpression: fieldInfo.expression,
        valueExpressionTitle: fieldInfo.expressionTitle,
        normalizationField: options.normalizationField,
        forBinning: ((_b = layer.featureReduction) === null || _b === void 0 ? void 0 : _b.type) === "binning"
    });
}

const arcgisSmartMappingBackgroundSymbolCss = ".background-symbol-content{padding-top:6px;border-bottom:1px solid #e0e0e0}";

const ArcgisSmartMappingBackgroundSymbol = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingBackgroundSymbolChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingBackgroundSymbolChange", 7);
        // -------------------------------------------------------------------
        //
        //  Private Properties
        //
        // -------------------------------------------------------------------
        this.lastSettings = {};
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        this.popoverReferenceElement =
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item") ||
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-panel");
    }
    // -------------------------------------------------------------------
    //
    //  Render Methods
    //
    // -------------------------------------------------------------------
    render() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.q)(layer)) {
            return null;
        }
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const backgroundObj = rendererType === "dot-density"
            ? renderer.backgroundColor || renderer.outline
            : renderer.backgroundFillSymbol;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { text: strings.backgroundSymbol.showBackgroundSymbol, open: !!backgroundObj, "toggle-display": "switch", onCalciteBlockSectionToggle: (e) => {
                this.handleBackgroundSymbolToggle(e);
            } }, this.renderBackgroundSymbolContent()));
    }
    renderBackgroundSymbolContent() {
        const { layer, mapView, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const isDotDensity = rendererType === "dot-density";
        let symbol;
        if (isDotDensity) {
            if (renderer.outline || renderer.backgroundColor) {
                symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView);
                symbol.outline = renderer.outline;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.r)(symbol, renderer.backgroundColor);
            }
        }
        else {
            symbol = renderer.backgroundFillSymbol;
        }
        if (!symbol) {
            return null;
        }
        this.popoverReferenceElement =
            this.popoverReferenceElement ||
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item") ||
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-panel");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "background-symbol-content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { type: isDotDensity ? "dot-density-background" : "background", label: strings.backgroundSymbol.backgroundStyle, symbol: symbol, onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.arcgisSmartMappingBackgroundSymbolChange.emit();
            }, popoverReferenceElement: this.popoverReferenceElement })));
    }
    // -------------------------------------------------------------------
    //
    //  Private methods
    //
    // -------------------------------------------------------------------
    handleBackgroundSymbolToggle(e) {
        const { layer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const blockSection = e.currentTarget;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        if (rendererType === "dot-density") {
            if (blockSection.open) {
                if (this.lastSettings.backgroundColor || this.lastSettings.outline) {
                    renderer.backgroundColor = this.lastSettings.backgroundColor;
                    renderer.outline = this.lastSettings.outline;
                }
                else {
                    renderer.backgroundColor = new modules.esriColor({
                        r: 64,
                        g: 64,
                        b: 64,
                        a: 1
                    });
                    renderer.outline = new modules.SimpleLineSymbol();
                }
                if (this.lastSettings.outlineVisVar) {
                    renderer.visualVariables = renderer.visualVariables || [];
                    renderer.visualVariables.push(this.lastSettings.outlineVisVar);
                }
                this.lastSettings.backgroundColor = undefined;
                this.lastSettings.outline = undefined;
                this.lastSettings.outlineVisVar = undefined;
            }
            else {
                this.lastSettings.backgroundColor = renderer.backgroundColor;
                this.lastSettings.outline = renderer.outline;
                this.lastSettings.outlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size", "outline");
                renderer.backgroundColor = new modules.esriColor({
                    r: 0,
                    g: 0,
                    b: 0,
                    a: 0
                });
                renderer.outline = undefined;
                // remove auto outline sizing
                renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.n)(renderer, "size", "outline");
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
            }
        }
        else {
            if (blockSection.open) {
                if (this.lastSettings.backgroundFillSymbol) {
                    renderer.backgroundFillSymbol = this.lastSettings.backgroundFillSymbol;
                }
                else {
                    const newSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView);
                    newSymbol.color = null;
                    renderer.backgroundFillSymbol = newSymbol;
                }
                this.lastSettings.backgroundFillSymbol = undefined;
            }
            else {
                this.lastSettings.backgroundFillSymbol = renderer.backgroundFillSymbol;
                renderer.backgroundFillSymbol = undefined;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
            }
        }
        if (mapImageSublayer) {
            mapImageSublayer.renderer = renderer.clone();
        }
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingBackgroundSymbol.style = arcgisSmartMappingBackgroundSymbolCss;

const arcgisSmartMappingDefaultSymbolCss = ".open{border-bottom:1px solid #e0e0e0}.block-section-padding{padding-top:6px}";

const ArcgisSmartMappingDefaultSymbol = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingDefaultSymbolChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingDefaultSymbolChange", 7);
        this.arcgisSmartMappingDefaultSymbolBeforeToggle = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingDefaultSymbolBeforeToggle", 7);
        this.lastSettings = {};
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        let text = strings.defaultSymbol.showDefaultSymbol;
        if (rendererType === "color") {
            const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
            if (!colorVisVar) {
                text = strings.defaultSymbol.showDefaultSymbolClassed;
            }
        }
        else if (rendererType === "size") {
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "size");
            if (!sizeVisVar) {
                text = strings.defaultSymbol.showDefaultSymbolClassed;
            }
        }
        const symbol = renderer.defaultSymbol;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { text: text, open: !!symbol, "toggle-display": "switch", onCalciteBlockSectionToggle: (event) => {
                this.arcgisSmartMappingDefaultSymbolBeforeToggle.emit();
                this.handleDefaultSymbolToggle(event);
            }, ref: (node) => (this.blockSectionNode = node) }, this.renderDefaultSymbolContent()));
    }
    renderDefaultSymbolContent() {
        const { layer, mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        let symbol;
        if (renderer.defaultSymbol) {
            symbol = renderer.defaultSymbol;
        }
        else if (this.lastSettings.defaultSymbol) {
            symbol = this.lastSettings.defaultSymbol;
        }
        else {
            symbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView);
        }
        if (!symbol) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "symbol-button-content block-section-padding" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { symbol: symbol, type: "default", popoverReferenceElement: this.flowItemNode, onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                this.lastSettings.defaultSymbol = renderer.defaultSymbol;
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } }), this.renderLabel()));
    }
    renderLabel() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const defaultLabel = renderer.defaultLabel || strings.defaultSymbol.other;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.defaultSymbol.label, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", value: defaultLabel, onCalciteInputChange: () => {
                if (!this.defaultLabelNode.value) {
                    this.labelChangeHandle = setTimeout(() => this.handleLabelChange(), 3000);
                }
                else {
                    clearTimeout(this.labelChangeHandle);
                    this.handleLabelChange();
                }
            }, onFocusout: (event) => {
                event.preventDefault();
                event.stopPropagation();
                this.handleLabelChange();
            }, onKeyUp: () => {
                if (!this.defaultLabelNode.value) {
                    this.labelChangeHandle = setTimeout(() => this.handleLabelChange(), 3000);
                }
                else {
                    clearTimeout(this.labelChangeHandle);
                    this.handleLabelChange();
                }
            }, ref: (node) => (this.defaultLabelNode = node) })));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    handleDefaultSymbolToggle(event) {
        const { layer, mapView, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const defaultSymbolToggle = event.currentTarget;
        if (defaultSymbolToggle.open) {
            this.blockSectionNode.classList.add("open");
            if (this.lastSettings.defaultSymbol) {
                renderer.defaultSymbol = this.lastSettings.defaultSymbol;
                renderer.defaultLabel = this.lastSettings.defaultLabel || strings.defaultSymbol.other;
            }
            else {
                const newSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView);
                renderer.defaultSymbol = newSymbol;
                renderer.defaultLabel = renderer.defaultLabel || strings.defaultSymbol.other;
                this.lastSettings.defaultSymbol = renderer.defaultSymbol;
                this.lastSettings.defaultLabel = renderer.defaultLabel;
            }
        }
        else {
            this.blockSectionNode.classList.remove("open");
            this.lastSettings.defaultSymbol = renderer.defaultSymbol;
            this.lastSettings.defaultLabel = renderer.defaultLabel;
            renderer.defaultSymbol = undefined;
            renderer.defaultLabel = undefined;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        this.arcgisSmartMappingDefaultSymbolChange.emit();
    }
    handleLabelChange() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        if (!this.defaultLabelNode.value) {
            renderer.defaultLabel = strings.defaultSymbol.other;
            this.defaultLabelNode.value = strings.defaultSymbol.other;
        }
        else {
            renderer.defaultLabel = this.defaultLabelNode.value;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingDefaultSymbol.style = arcgisSmartMappingDefaultSymbolCss;

const arcgisSmartMappingMethodButtonCss = ".method-button{display:flex;padding:6px;justify-content:space-between;align-items:center;border-radius:0;cursor:pointer;background-color:var(--calcite-color-foreground-1);color:var(--calcite-color-text-1);border-color:var(--calcite-color-foreground-3);border-width:2px;border-style:solid;box-shadow:transparent 0px 0px 0px 1px inset}.method-button:active{box-shadow:inset 0 0 0 1px var(--calcite-color-foreground-3)}.method-button:focus{box-shadow:inset 0 0 0 1px var(--calcite-color-foreground-3);outline:2px solid var(--calcite-color-brand);outline-offset:2px}.method-button.active{outline:1px solid var(--calcite-ui-focus-color, var(--calcite-color-brand))}.method-content{justify-content:space-between;display:flex;align-items:center;width:100%}.method-button-text{display:inline-block;padding:0 10px}.method-button-title{font-weight:bold}.method-button-msg{font-size:80%;line-height:16px}";

const ArcgisSmartMappingMethodButton = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingMethodButtonChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingMethodButtonChange", 7);
        this.arcgisSmartMappingMethodButtonBeforeOpen = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingMethodButtonBeforeOpen", 7);
        this.methodInfos = [];
        this.open = false;
        this.showStdDev = false;
        this.showDefinedInterval = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Set focus on component
     */
    async setFocus() {
        this.buttonNode.focus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        this.populateMethodInfo();
        this.setSelection();
    }
    componentWillUpdate() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const method = authInfo.classificationMethod;
        if (this.selectedMethodInfo.value !== method) {
            this.setSelection();
        }
    }
    //--------------------------------------------------------------------------
    //
    // Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.methodButton.method, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "method-button", role: "button", tabindex: "0", "aria-haspopup": "true", "aria-label": strings.methodButton.selectMethod, ref: (node) => {
                if (node) {
                    this.buttonNode = node;
                }
            }, onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.openMethodDropdown();
                }
            }, onClick: () => this.openMethodDropdown() }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "method-content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "method-button-text" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "method-button-title" }, this.selectedMethodInfo.title), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "method-button-msg" }, this.selectedMethodInfo.msg)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "chevron-down" })))))));
    }
    //--------------------------------------------------------------------------
    //
    // Private Methods
    //
    //--------------------------------------------------------------------------
    setSelection() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const method = authInfo.classificationMethod;
        this.selectedMethodInfo = this.methodInfos.find((info) => info.value === method);
        this.methodInfos.forEach((methodInfo) => {
            methodInfo.selected = methodInfo.value === this.selectedMethodInfo.value;
        });
    }
    populateMethodInfo() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        this.methodInfos.push({
            value: "natural-breaks",
            title: strings.methodButton.naturalBreaks,
            msg: strings.methodButton.naturalBreaksMsg,
            iconPath: null,
            selected: false
        }, {
            value: "equal-interval",
            title: strings.methodButton.equalInterval,
            msg: strings.methodButton.equalIntervalMsg,
            iconPath: null,
            selected: false
        });
        if (this.showStdDev) {
            this.methodInfos.push({
                value: "standard-deviation",
                title: strings.methodButton.standardDeviation,
                msg: strings.methodButton.standardDeviationMsg,
                iconPath: null,
                selected: false
            });
        }
        this.methodInfos.push({
            value: "quantile",
            title: strings.methodButton.quantile,
            msg: strings.methodButton.quantileMsg,
            iconPath: null,
            selected: false
        });
        if (this.showDefinedInterval) {
            this.methodInfos.push({
                value: "defined-interval",
                title: strings.methodButton.definedInterval,
                msg: strings.methodButton.definedIntervalMsg,
                iconPath: null,
                selected: false
            });
        }
        this.methodInfos.push({
            value: "manual",
            title: strings.methodButton.manualBreaks,
            msg: strings.methodButton.manualBreaksMsg,
            iconPath: null,
            selected: false
        });
    }
    closePopover() {
        var _a;
        this.open = false;
        if (this.dropdownNode) {
            (_a = this.dropdownNode.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.dropdownNode);
            this.dropdownNode = null;
            this.buttonNode.classList.remove("active");
        }
    }
    openMethodDropdown() {
        if (!this.open) {
            this.arcgisSmartMappingMethodButtonBeforeOpen.emit();
            const dropdown = document.createElement("arcgis-smart-mapping-dropdown");
            dropdown.buttonNode = this.buttonNode;
            dropdown.infos = this.methodInfos;
            this.dropdownNode = dropdown;
            dropdown.addEventListener("arcgisSmartMappingDropdownClose", (event) => {
                this.closePopover();
                event.detail === "Escape" && this.setFocus();
            });
            dropdown.addEventListener("arcgisSmartMappingDropdownChange", (event) => this.setMethod(event.detail));
            this.buttonNode.classList.add("active");
            document.body.appendChild(dropdown);
            this.open = true;
        }
        else {
            this.open = false;
        }
    }
    setMethod(newMethodInfo) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const currentMethod = authInfo.classificationMethod;
        const newMethod = newMethodInfo.value;
        if (newMethod === currentMethod) {
            this.closePopover();
            setTimeout(() => this.setFocus(), 300);
            return;
        }
        for (let i = 0; i < this.methodInfos.length; i++) {
            this.methodInfos[i].selected = this.methodInfos[i].value === newMethod;
        }
        this.selectedMethodInfo = newMethodInfo;
        this.arcgisSmartMappingMethodButtonChange.emit(this.selectedMethodInfo.value);
        this.closePopover();
        setTimeout(() => this.setFocus(), 300);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingMethodButton.style = arcgisSmartMappingMethodButtonCss;

const arcgisSmartMappingRotationCss = ".toggle-button{margin-top:2px}.block-section-padding{padding-top:6px}.block-content-padding{margin:6px 0}.block-content-loading{height:150px}.rotation-type{margin-top:5px}.rotation-type-selection{margin-top:15px}.rotation-type-display{margin:10px 20px 0 20px;position:relative}.rotation-type-display svg{height:120px}.rotation-type-symbol{position:absolute;top:56px;left:33px}.arcgis--rtl .rotation-type-symbol{left:auto;right:61px}";

const ArcgisSmartMappingRotation = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingRotationError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingRotationError", 7);
        this.open = false;
        this.isLoading = false;
        this.rotationType = "geographic";
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), "rotation");
        this.isBlockOpen = this.open || !!rotationVisVar;
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { isRTL, layer, mapImageSublayer, strings, supportsArcade } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), "size");
        const isGeoRSSLayer = layer.type === "geo-rss";
        if ((mapImageSublayer && !supportsArcade) ||
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.B)(layer) ||
            ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.q)(layer) && !sizeVisVar) ||
            !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ag)() ||
            isGeoRSSLayer) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { id: "rotation-block", class: {
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.C.rtl]: isRTL
            }, heading: strings.rotation.rotationByAttribute, collapsible: true, open: this.isBlockOpen, loading: this.isLoading, ref: (node) => (this.blockNode = node), onCalciteBlockOpen: () => {
                this.isBlockOpen = true;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aI)(this.blockNode);
            }, onCalciteBlockClose: () => (this.isBlockOpen = false) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderRotationToggle()))));
    }
    renderLoading() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "block-content-loading" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: strings.loading })));
    }
    renderRotationToggle() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), "rotation");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { text: strings.rotation.rotationLabel, class: "toggle-button", toggleDisplay: "switch", open: !!rotationVisVar, onCalciteBlockSectionToggle: () => this.handleToggle() }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "block-section-padding" }, this.isLoading
            ? this.renderLoading()
            : rotationVisVar
                ? this.renderRotationContent()
                : this.renderLoading())));
    }
    renderRotationContent() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderRotationAttribute(), this.renderRotationType()));
    }
    renderRotationAttribute() {
        const { layer, fields, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), "rotation");
        const fieldInfo = {
            field: rotationVisVar.field,
            expression: rotationVisVar.valueExpression,
            expressionTitle: rotationVisVar.valueExpressionTitle,
            simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-attribute-input", { fieldList: fields.filter((field) => field.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER), selectedField: fieldInfo, label: strings.rotation.field, mode: "expression", popoverReferenceElement: this.flowItemNode, onArcgisSmartMappingAttributeInputChange: (event) => {
                if (event.detail) {
                    const fieldInfo = event.detail;
                    this.setRotationVisualVariable(fieldInfo);
                }
            }, onArcgisSmartMappingAttributeInputError: (event) => {
                this.arcgisSmartMappingRotationError.emit(event.detail);
            } }));
    }
    renderRotationType() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        let leadingDegree = false;
        if (strings.rotation.rotateZeroDegrees.indexOf("°") === 0) {
            leadingDegree = true;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rotation-type block-content-padding" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button-group", { class: "rotation-type-selection", name: "rotationType", onCalciteRadioButtonGroupChange: (event) => {
                this.handleTypeChange(event.target.selectedItem.value);
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { checked: this.rotationType === "geographic", value: "geographic" }), strings.rotation.geographic), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { checked: this.rotationType === "arithmetic", value: "arithmetic" }), strings.rotation.arithmetic)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rotation-type-display", "aria-hidden": "true" }, this.rotationType === "arithmetic"
            ? leadingDegree
                ? this.renderRotationSVG_Ari_leading()
                : this.renderRotationSVG_Ari()
            : leadingDegree
                ? this.renderRotationSVG_Geo_leading()
                : this.renderRotationSVG_Geo(), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "rotation-type-symbol", ref: (node) => this.createSymbol(node) }))));
    }
    renderRotationSVG_Geo() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 80 80" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("defs", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("style", null, ".cls-1,.cls-4", `{fill:none;}`, ".cls-2", `{fill:#f3f3f3;}`, ".cls-3", `{fill:#ccc;}`, ".cls-4", `{stroke:#353535;stroke-miterlimit:10;}`, ".cls-5", `{fill:#353535;}`, ".cls-6", `{fill:#595959;}`)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-1", width: "80", height: "80" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("circle", { class: "cls-2", cx: "30.5", cy: "46.5", r: "30.5" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "30", y: "16", width: "1", height: "6" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "30", y: "71", width: "1", height: "6" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "57.5", y: "43.5", width: "1", height: "6", transform: "translate(11.5 104.5) rotate(-90)" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "2.5", y: "43.5", width: "1", height: "6", transform: "translate(-43.5 49.5) rotate(-90)" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-4", d: "M35.8,16.46A30.51,30.51,0,0,1,60.39,40.4" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("polygon", { class: "cls-5", points: "57.06 38.77 57.46 38.2 60.31 40.15 62.05 37.16 62.65 37.51 60.53 41.15 57.06 38.77" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M29.12,4.24a1.84,1.84,0,0,1,1.1.32,2.34,2.34,0,0,1,.72.86,4.16,4.16,0,0,1,.38,1.19,7.77,7.77,0,0,1,0,2.72,4.26,4.26,0,0,1-.38,1.19,2.27,2.27,0,0,1-.72.84,2.07,2.07,0,0,1-2.21,0,2.27,2.27,0,0,1-.72-.84,4.26,4.26,0,0,1-.38-1.19,9.3,9.3,0,0,1,0-2.72,4.16,4.16,0,0,1,.38-1.19A2.34,2.34,0,0,1,28,4.56,1.85,1.85,0,0,1,29.12,4.24Zm0,.61a1.11,1.11,0,0,0-.78.29,2,2,0,0,0-.49.74,3.86,3.86,0,0,0-.25,1A8.23,8.23,0,0,0,27.52,8a8.09,8.09,0,0,0,.08,1.08,3.59,3.59,0,0,0,.25,1,2,2,0,0,0,.49.74,1.15,1.15,0,0,0,.78.28,1.12,1.12,0,0,0,.77-.28,2,2,0,0,0,.49-.74,4,4,0,0,0,.26-1A8.09,8.09,0,0,0,30.72,8a8.23,8.23,0,0,0-.08-1.09,4.31,4.31,0,0,0-.26-1,2,2,0,0,0-.49-.74A1.08,1.08,0,0,0,29.12,4.85Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M35.52,5.79a1.45,1.45,0,0,1-.12.59,1.21,1.21,0,0,1-.31.48,1.38,1.38,0,0,1-.47.31,1.66,1.66,0,0,1-1.19,0A1.38,1.38,0,0,1,33,6.86a1.21,1.21,0,0,1-.31-.48,1.51,1.51,0,0,1,0-1.18A1.21,1.21,0,0,1,33,4.72a1.38,1.38,0,0,1,.47-.31,1.66,1.66,0,0,1,1.19,0,1.38,1.38,0,0,1,.47.31,1.21,1.21,0,0,1,.31.48A1.45,1.45,0,0,1,35.52,5.79Zm-.49,0a1.09,1.09,0,0,0-.07-.4,1.16,1.16,0,0,0-.22-.31.87.87,0,0,0-.32-.22,1,1,0,0,0-.4-.08,1,1,0,0,0-.39.08.87.87,0,0,0-.32.22,1.16,1.16,0,0,0-.22.31,1.18,1.18,0,0,0,0,.8,1,1,0,0,0,.22.31.87.87,0,0,0,.32.22A1,1,0,0,0,34,6.8a1,1,0,0,0,.4-.08.87.87,0,0,0,.32-.22A1,1,0,0,0,35,6.19,1.09,1.09,0,0,0,35,5.79Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M66.94,46.41l0,0a1.33,1.33,0,0,1-.46.19,2.2,2.2,0,0,1-.56.07,2.18,2.18,0,0,1-.85-.16,2.12,2.12,0,0,1-.68-.45,1.9,1.9,0,0,1-.46-.68,2.38,2.38,0,0,1-.16-.89,2.27,2.27,0,0,1,.17-.91,1.9,1.9,0,0,1,.48-.7,2.45,2.45,0,0,1,.73-.46,2.7,2.7,0,0,1,1.83,0,2.33,2.33,0,0,1,.73.46,1.9,1.9,0,0,1,.48.7,2.27,2.27,0,0,1,.18.91,2.61,2.61,0,0,1-.2,1,6.24,6.24,0,0,1-.44.9L65.77,49.5h-.83Zm.69-1.94a1.69,1.69,0,0,0-.12-.64,1.62,1.62,0,0,0-.32-.52,1.92,1.92,0,0,0-.5-.34,1.79,1.79,0,0,0-1.29,0,1.77,1.77,0,0,0-.5.34,1.82,1.82,0,0,0-.32.52,1.77,1.77,0,0,0,0,1.28,1.49,1.49,0,0,0,.31.51,1.45,1.45,0,0,0,.5.33,1.75,1.75,0,0,0,.65.12A1.73,1.73,0,0,0,66.7,46a1.45,1.45,0,0,0,.5-.33,1.69,1.69,0,0,0,.32-.51A1.91,1.91,0,0,0,67.63,44.47Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M71.82,42.24a1.84,1.84,0,0,1,1.1.32,2.34,2.34,0,0,1,.72.86A4.16,4.16,0,0,1,74,44.61a8.46,8.46,0,0,1,0,2.72,4.26,4.26,0,0,1-.38,1.19,2.27,2.27,0,0,1-.72.84,2.07,2.07,0,0,1-2.21,0,2.27,2.27,0,0,1-.72-.84,4.26,4.26,0,0,1-.38-1.19,8.46,8.46,0,0,1,0-2.72A4.16,4.16,0,0,1,70,43.42a2.34,2.34,0,0,1,.72-.86A1.85,1.85,0,0,1,71.82,42.24Zm0,.61a1.11,1.11,0,0,0-.78.29,2,2,0,0,0-.49.74,4.31,4.31,0,0,0-.26,1A10.3,10.3,0,0,0,70.22,46a10.11,10.11,0,0,0,.07,1.08,4,4,0,0,0,.26,1,2,2,0,0,0,.49.74,1.21,1.21,0,0,0,1.55,0,2,2,0,0,0,.49-.74,4,4,0,0,0,.26-1A8.09,8.09,0,0,0,73.42,46a8.23,8.23,0,0,0-.08-1.09,4.31,4.31,0,0,0-.26-1,2,2,0,0,0-.49-.74A1.1,1.1,0,0,0,71.82,42.85Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M78.21,43.79a1.44,1.44,0,0,1-.11.59,1.21,1.21,0,0,1-.31.48,1.38,1.38,0,0,1-.47.31,1.66,1.66,0,0,1-1.19,0,1.52,1.52,0,0,1-.48-.31,1.47,1.47,0,0,1-.31-.48,1.64,1.64,0,0,1,0-1.18,1.47,1.47,0,0,1,.31-.48,1.52,1.52,0,0,1,.48-.31,1.66,1.66,0,0,1,1.19,0,1.38,1.38,0,0,1,.47.31,1.21,1.21,0,0,1,.31.48A1.44,1.44,0,0,1,78.21,43.79Zm-.48,0a.92.92,0,0,0-.08-.4,1,1,0,0,0-.21-.31.87.87,0,0,0-.32-.22,1.06,1.06,0,0,0-.4-.08,1,1,0,0,0-.39.08.87.87,0,0,0-.32.22,1.16,1.16,0,0,0-.22.31,1,1,0,0,0,0,.8,1,1,0,0,0,.22.31.87.87,0,0,0,.32.22,1,1,0,0,0,.39.08,1.06,1.06,0,0,0,.4-.08.87.87,0,0,0,.32-.22.85.85,0,0,0,.21-.31A.92.92,0,0,0,77.73,43.79Z" })));
    }
    renderRotationSVG_Ari() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 80 80" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("defs", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("style", null, ".cls-1,.cls-4", `{fill:none;}`, ".cls-2", `{fill:#f3f3f3;}`, ".cls-3", `{fill:#ccc;}`, ".cls-4", `{stroke:#353535;stroke-miterlimit:10;}`, ".cls-5", `{fill:#353535;}`, ".cls-6", `{fill:#595959;}`)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-1", width: "80", height: "80" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("circle", { class: "cls-2", cx: "30.5", cy: "46.5", r: "30.5" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "30", y: "16", width: "1", height: "6" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "30", y: "71", width: "1", height: "6" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "57.5", y: "43.5", width: "1", height: "6", transform: "translate(11.5 104.5) rotate(-90)" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "2.5", y: "43.5", width: "1", height: "6", transform: "translate(-43.5 49.5) rotate(-90)" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-4", d: "M36.54,16.6a30.55,30.55,0,0,1,24,24.55" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("polygon", { class: "cls-5", points: "38.19 19.92 38.76 19.52 36.8 16.69 39.77 14.94 39.42 14.33 35.8 16.46 38.19 19.92" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M27.14,8.41l0,0a1.35,1.35,0,0,1-.45.19,2.28,2.28,0,0,1-.57.07,2.18,2.18,0,0,1-.85-.16A2.12,2.12,0,0,1,24.57,8a1.94,1.94,0,0,1-.46-.69A2.3,2.3,0,0,1,24,6.47a2.27,2.27,0,0,1,.17-.91,1.9,1.9,0,0,1,.48-.7,2.32,2.32,0,0,1,1.65-.62,2.51,2.51,0,0,1,.92.16,2.59,2.59,0,0,1,.73.46,2.18,2.18,0,0,1,.48.7,2.46,2.46,0,0,1,.17.91,2.61,2.61,0,0,1-.2,1,6.24,6.24,0,0,1-.44.9L26,11.5h-.83Zm.69-1.94a1.69,1.69,0,0,0-.12-.64,1.62,1.62,0,0,0-.32-.52,1.56,1.56,0,0,0-.5-.33A1.67,1.67,0,0,0,25.6,5a1.67,1.67,0,0,0-.5.33,1.82,1.82,0,0,0-.32.52,1.69,1.69,0,0,0-.11.64,1.61,1.61,0,0,0,.11.63,1.35,1.35,0,0,0,.81.85,1.76,1.76,0,0,0,.66.12A1.71,1.71,0,0,0,26.9,8a1.45,1.45,0,0,0,.5-.33,1.62,1.62,0,0,0,.32-.52A1.81,1.81,0,0,0,27.83,6.47Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M32,4.24a1.84,1.84,0,0,1,1.1.32,2.34,2.34,0,0,1,.72.86,4.16,4.16,0,0,1,.38,1.19A7.72,7.72,0,0,1,34.33,8a7.72,7.72,0,0,1-.11,1.36,4.26,4.26,0,0,1-.38,1.19,2.27,2.27,0,0,1-.72.84,2.07,2.07,0,0,1-2.21,0,2.27,2.27,0,0,1-.72-.84,4.26,4.26,0,0,1-.38-1.19,9.3,9.3,0,0,1,0-2.72,4.16,4.16,0,0,1,.38-1.19,2.34,2.34,0,0,1,.72-.86A1.85,1.85,0,0,1,32,4.24Zm0,.61a1.11,1.11,0,0,0-.78.29,2,2,0,0,0-.49.74,3.86,3.86,0,0,0-.25,1A8.23,8.23,0,0,0,30.42,8a8.09,8.09,0,0,0,.08,1.08,3.59,3.59,0,0,0,.25,1,1.92,1.92,0,0,0,.49.73,1.18,1.18,0,0,0,1.55,0,1.92,1.92,0,0,0,.49-.73,4,4,0,0,0,.26-1A8.09,8.09,0,0,0,33.62,8a8.23,8.23,0,0,0-.08-1.09,4.31,4.31,0,0,0-.26-1,2,2,0,0,0-.49-.74A1.1,1.1,0,0,0,32,4.85Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M38.42,5.79a1.45,1.45,0,0,1-.12.59,1.21,1.21,0,0,1-.31.48,1.38,1.38,0,0,1-.47.31,1.66,1.66,0,0,1-1.19,0,1.52,1.52,0,0,1-.48-.31,1.47,1.47,0,0,1-.31-.48,1.63,1.63,0,0,1-.11-.59,1.73,1.73,0,0,1,.11-.6,1.38,1.38,0,0,1,.79-.78,1.66,1.66,0,0,1,1.19,0,1.38,1.38,0,0,1,.47.31,1.25,1.25,0,0,1,.31.47A1.53,1.53,0,0,1,38.42,5.79Zm-.49,0a.85.85,0,0,0-.08-.39.89.89,0,0,0-.21-.32.87.87,0,0,0-.32-.22,1.06,1.06,0,0,0-.4-.08,1,1,0,0,0-.39.08.87.87,0,0,0-.32.22A1.07,1.07,0,0,0,36,5.4a1,1,0,0,0-.07.39,1.09,1.09,0,0,0,.07.4,1,1,0,0,0,.22.31.87.87,0,0,0,.32.22,1,1,0,0,0,.39.08,1.06,1.06,0,0,0,.4-.08.87.87,0,0,0,.32-.22.85.85,0,0,0,.21-.31A.92.92,0,0,0,37.93,5.79Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M67,42.24a1.84,1.84,0,0,1,1.1.32,2.34,2.34,0,0,1,.72.86,4.16,4.16,0,0,1,.38,1.19,8.46,8.46,0,0,1,0,2.72,4.26,4.26,0,0,1-.38,1.19,2.27,2.27,0,0,1-.72.84,2.07,2.07,0,0,1-2.21,0,2.27,2.27,0,0,1-.72-.84,4.26,4.26,0,0,1-.38-1.19,9.3,9.3,0,0,1,0-2.72,4.16,4.16,0,0,1,.38-1.19,2.34,2.34,0,0,1,.72-.86A1.85,1.85,0,0,1,67,42.24Zm0,.61a1.11,1.11,0,0,0-.78.29,2,2,0,0,0-.49.74,3.86,3.86,0,0,0-.25,1A8.23,8.23,0,0,0,65.42,46a8.09,8.09,0,0,0,.08,1.08,3.59,3.59,0,0,0,.25,1,2,2,0,0,0,.49.74,1.21,1.21,0,0,0,1.55,0,2,2,0,0,0,.49-.74,4,4,0,0,0,.26-1A8.09,8.09,0,0,0,68.62,46a8.23,8.23,0,0,0-.08-1.09,4.31,4.31,0,0,0-.26-1,2,2,0,0,0-.49-.74A1.1,1.1,0,0,0,67,42.85Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M73.42,43.79a1.45,1.45,0,0,1-.12.59,1.21,1.21,0,0,1-.31.48,1.38,1.38,0,0,1-.47.31,1.66,1.66,0,0,1-1.19,0,1.52,1.52,0,0,1-.48-.31,1.47,1.47,0,0,1-.31-.48,1.63,1.63,0,0,1-.11-.59,1.73,1.73,0,0,1,.11-.6,1.38,1.38,0,0,1,.79-.78,1.66,1.66,0,0,1,1.19,0,1.38,1.38,0,0,1,.47.31,1.25,1.25,0,0,1,.31.47A1.53,1.53,0,0,1,73.42,43.79Zm-.49,0a.85.85,0,0,0-.08-.39.89.89,0,0,0-.21-.32.87.87,0,0,0-.32-.22,1.06,1.06,0,0,0-.4-.08,1,1,0,0,0-.39.08.87.87,0,0,0-.32.22,1.07,1.07,0,0,0-.22.32,1,1,0,0,0-.07.39,1.09,1.09,0,0,0,.07.4,1,1,0,0,0,.22.31.87.87,0,0,0,.32.22,1,1,0,0,0,.39.08,1.06,1.06,0,0,0,.4-.08.87.87,0,0,0,.32-.22.85.85,0,0,0,.21-.31A.92.92,0,0,0,72.93,43.79Z" })));
    }
    renderRotationSVG_Geo_leading() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 80 80" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("defs", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("style", null, ".cls-1,.cls-4", `{fill:none;}`, ".cls-2", `{fill:#f3f3f3;}`, ".cls-3", `{fill:#ccc;}`, ".cls-4", `{stroke:#353535;stroke-miterlimit:10;}`, ".cls-5", `{fill:#353535;}`, ".cls-6", `{fill:#595959;}`)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-1", width: "80", height: "80" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("circle", { class: "cls-2", cx: "30.5", cy: "46.5", r: "30.5" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "30", y: "16", width: "1", height: "6" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "30", y: "71", width: "1", height: "6" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "57.5", y: "43.5", width: "1", height: "6", transform: "translate(11.5 104.5) rotate(-90)" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "2.5", y: "43.5", width: "1", height: "6", transform: "translate(-43.5 49.5) rotate(-90)" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-4", d: "M35.8,16.46A30.51,30.51,0,0,1,60.39,40.4" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("polygon", { class: "cls-5", points: "57.06 38.77 57.46 38.2 60.31 40.15 62.05 37.16 62.65 37.51 60.53 41.15 57.06 38.77" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M28.72,5.79a1.45,1.45,0,0,1-.12.59,1.21,1.21,0,0,1-.31.48,1.38,1.38,0,0,1-.47.31,1.66,1.66,0,0,1-1.19,0,1.38,1.38,0,0,1-.47-.31,1.21,1.21,0,0,1-.31-.48,1.51,1.51,0,0,1,0-1.18,1.21,1.21,0,0,1,.31-.48,1.38,1.38,0,0,1,.47-.31,1.66,1.66,0,0,1,1.19,0,1.38,1.38,0,0,1,.47.31,1.21,1.21,0,0,1,.31.48A1.45,1.45,0,0,1,28.72,5.79Zm-.49,0a1.09,1.09,0,0,0-.07-.4,1.16,1.16,0,0,0-.22-.31.87.87,0,0,0-.32-.22,1,1,0,0,0-.39-.08,1,1,0,0,0-.4.08.87.87,0,0,0-.32.22,1.16,1.16,0,0,0-.22.31,1.18,1.18,0,0,0,0,.8,1,1,0,0,0,.22.31.87.87,0,0,0,.32.22,1,1,0,0,0,.4.08,1,1,0,0,0,.39-.08.87.87,0,0,0,.32-.22,1,1,0,0,0,.22-.31A1.09,1.09,0,0,0,28.23,5.79Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M32.12,4.24a1.84,1.84,0,0,1,1.1.32,2.34,2.34,0,0,1,.72.86,4.16,4.16,0,0,1,.38,1.19,7.77,7.77,0,0,1,0,2.72,4.26,4.26,0,0,1-.38,1.19,2.27,2.27,0,0,1-.72.84,2.07,2.07,0,0,1-2.21,0,2.27,2.27,0,0,1-.72-.84,4.26,4.26,0,0,1-.38-1.19,9.3,9.3,0,0,1,0-2.72,4.16,4.16,0,0,1,.38-1.19A2.34,2.34,0,0,1,31,4.56,1.85,1.85,0,0,1,32.12,4.24Zm0,.61a1.11,1.11,0,0,0-.78.29,2,2,0,0,0-.49.74,3.86,3.86,0,0,0-.25,1A8.23,8.23,0,0,0,30.52,8a8.09,8.09,0,0,0,.08,1.08,3.59,3.59,0,0,0,.25,1,2,2,0,0,0,.49.74,1.15,1.15,0,0,0,.78.28,1.12,1.12,0,0,0,.77-.28,2,2,0,0,0,.49-.74,4,4,0,0,0,.26-1A8.09,8.09,0,0,0,33.72,8a8.23,8.23,0,0,0-.08-1.09,4.31,4.31,0,0,0-.26-1,2,2,0,0,0-.49-.74A1.08,1.08,0,0,0,32.12,4.85Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M66.62,43.79a1.45,1.45,0,0,1-.12.59,1.21,1.21,0,0,1-.31.48,1.38,1.38,0,0,1-.47.31,1.66,1.66,0,0,1-1.19,0,1.38,1.38,0,0,1-.47-.31,1.21,1.21,0,0,1-.31-.48,1.51,1.51,0,0,1,0-1.18,1.21,1.21,0,0,1,.31-.48,1.38,1.38,0,0,1,.47-.31,1.66,1.66,0,0,1,1.19,0,1.38,1.38,0,0,1,.47.31,1.21,1.21,0,0,1,.31.48A1.45,1.45,0,0,1,66.62,43.79Zm-.49,0a1.09,1.09,0,0,0-.07-.4,1.16,1.16,0,0,0-.22-.31.87.87,0,0,0-.32-.22,1,1,0,0,0-.39-.08,1,1,0,0,0-.4.08.87.87,0,0,0-.32.22,1.16,1.16,0,0,0-.22.31,1.18,1.18,0,0,0,0,.8,1,1,0,0,0,.22.31.87.87,0,0,0,.32.22,1,1,0,0,0,.4.08,1,1,0,0,0,.39-.08.87.87,0,0,0,.32-.22,1,1,0,0,0,.22-.31A1.09,1.09,0,0,0,66.13,43.79Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M70.94,46.41l0,0a1.33,1.33,0,0,1-.46.19,2.2,2.2,0,0,1-.56.07,2.18,2.18,0,0,1-.85-.16,2.12,2.12,0,0,1-.68-.45,1.9,1.9,0,0,1-.46-.68,2.38,2.38,0,0,1-.16-.89,2.27,2.27,0,0,1,.17-.91,1.9,1.9,0,0,1,.48-.7,2.45,2.45,0,0,1,.73-.46,2.7,2.7,0,0,1,1.83,0,2.33,2.33,0,0,1,.73.46,1.9,1.9,0,0,1,.48.7,2.27,2.27,0,0,1,.18.91,2.61,2.61,0,0,1-.2,1,6.24,6.24,0,0,1-.44.9L69.77,49.5h-.83Zm.69-1.94a1.69,1.69,0,0,0-.12-.64,1.62,1.62,0,0,0-.32-.52,1.92,1.92,0,0,0-.5-.34,1.79,1.79,0,0,0-1.29,0,1.77,1.77,0,0,0-.5.34,1.82,1.82,0,0,0-.32.52,1.77,1.77,0,0,0,0,1.28,1.49,1.49,0,0,0,.31.51,1.45,1.45,0,0,0,.5.33,1.75,1.75,0,0,0,.65.12A1.73,1.73,0,0,0,70.7,46a1.45,1.45,0,0,0,.5-.33,1.69,1.69,0,0,0,.32-.51A1.91,1.91,0,0,0,71.63,44.47Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M75.82,42.24a1.84,1.84,0,0,1,1.1.32,2.34,2.34,0,0,1,.72.86A4.16,4.16,0,0,1,78,44.61a8.46,8.46,0,0,1,0,2.72,4.26,4.26,0,0,1-.38,1.19,2.27,2.27,0,0,1-.72.84,2.07,2.07,0,0,1-2.21,0,2.27,2.27,0,0,1-.72-.84,4.26,4.26,0,0,1-.38-1.19,8.46,8.46,0,0,1,0-2.72A4.16,4.16,0,0,1,74,43.42a2.34,2.34,0,0,1,.72-.86A1.85,1.85,0,0,1,75.82,42.24Zm0,.61a1.11,1.11,0,0,0-.78.29,2,2,0,0,0-.49.74,4.31,4.31,0,0,0-.26,1A10.3,10.3,0,0,0,74.22,46a10.11,10.11,0,0,0,.07,1.08,4,4,0,0,0,.26,1,2,2,0,0,0,.49.74,1.21,1.21,0,0,0,1.55,0,2,2,0,0,0,.49-.74,4,4,0,0,0,.26-1A8.09,8.09,0,0,0,77.42,46a8.23,8.23,0,0,0-.08-1.09,4.31,4.31,0,0,0-.26-1,2,2,0,0,0-.49-.74A1.1,1.1,0,0,0,75.82,42.85Z" })));
    }
    renderRotationSVG_Ari_leading() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 80 80" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("defs", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("style", null, ".cls-1,.cls-4", `{fill:none;}`, ".cls-2", `{fill:#f3f3f3;}`, ".cls-3", `{fill:#ccc;}`, ".cls-4", `{stroke:#353535;stroke-miterlimit:10;}`, ".cls-5", `{fill:#353535;}`, ".cls-6", `{fill:#595959;}`)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-1", width: "80", height: "80" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("circle", { class: "cls-2", cx: "30.5", cy: "46.5", r: "30.5" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "30", y: "16", width: "1", height: "6" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "30", y: "71", width: "1", height: "6" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "57.5", y: "43.5", width: "1", height: "6", transform: "translate(11.5 104.5) rotate(-90)" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("rect", { class: "cls-3", x: "2.5", y: "43.5", width: "1", height: "6", transform: "translate(-43.5 49.5) rotate(-90)" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-4", d: "M36.54,16.6a30.55,30.55,0,0,1,24,24.55" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("polygon", { class: "cls-5", points: "38.19 19.92 38.76 19.52 36.8 16.69 39.77 14.94 39.42 14.33 35.8 16.46 38.19 19.92" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M24.82,5.79a1.63,1.63,0,0,1-.11.59,1.47,1.47,0,0,1-.31.48,1.52,1.52,0,0,1-.48.31,1.66,1.66,0,0,1-1.19,0,1.38,1.38,0,0,1-.47-.31A1.21,1.21,0,0,1,22,6.38a1.45,1.45,0,0,1-.12-.59,1.53,1.53,0,0,1,.12-.6,1.25,1.25,0,0,1,.31-.47,1.38,1.38,0,0,1,.47-.31,1.66,1.66,0,0,1,1.19,0,1.38,1.38,0,0,1,.79.78A1.73,1.73,0,0,1,24.82,5.79Zm-.49,0a1,1,0,0,0-.07-.39A1.07,1.07,0,0,0,24,5.08a.87.87,0,0,0-.32-.22,1,1,0,0,0-.39-.08,1.06,1.06,0,0,0-.4.08.87.87,0,0,0-.32.22.89.89,0,0,0-.21.32.85.85,0,0,0-.08.39.92.92,0,0,0,.08.4.85.85,0,0,0,.21.31.87.87,0,0,0,.32.22,1.06,1.06,0,0,0,.4.08,1,1,0,0,0,.39-.08A.87.87,0,0,0,24,6.5a1,1,0,0,0,.22-.31A1.09,1.09,0,0,0,24.33,5.79Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M29.14,8.41l0,0a1.35,1.35,0,0,1-.45.19,2.28,2.28,0,0,1-.57.07,2.18,2.18,0,0,1-.85-.16A2.12,2.12,0,0,1,26.57,8a1.94,1.94,0,0,1-.46-.69A2.3,2.3,0,0,1,26,6.47a2.27,2.27,0,0,1,.17-.91,1.9,1.9,0,0,1,.48-.7,2.32,2.32,0,0,1,1.65-.62,2.51,2.51,0,0,1,.92.16,2.59,2.59,0,0,1,.73.46,2.18,2.18,0,0,1,.48.7,2.46,2.46,0,0,1,.17.91,2.61,2.61,0,0,1-.2,1,6.24,6.24,0,0,1-.44.9L28,11.5h-.83Zm.69-1.94a1.69,1.69,0,0,0-.12-.64,1.62,1.62,0,0,0-.32-.52,1.56,1.56,0,0,0-.5-.33A1.67,1.67,0,0,0,27.6,5a1.67,1.67,0,0,0-.5.33,1.82,1.82,0,0,0-.32.52,1.69,1.69,0,0,0-.11.64,1.61,1.61,0,0,0,.11.63,1.35,1.35,0,0,0,.81.85,1.76,1.76,0,0,0,.66.12A1.71,1.71,0,0,0,28.9,8a1.45,1.45,0,0,0,.5-.33,1.62,1.62,0,0,0,.32-.52A1.81,1.81,0,0,0,29.83,6.47Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M34,4.24a1.84,1.84,0,0,1,1.1.32,2.34,2.34,0,0,1,.72.86,4.16,4.16,0,0,1,.38,1.19A7.72,7.72,0,0,1,36.33,8a7.72,7.72,0,0,1-.11,1.36,4.26,4.26,0,0,1-.38,1.19,2.27,2.27,0,0,1-.72.84,2.07,2.07,0,0,1-2.21,0,2.27,2.27,0,0,1-.72-.84,4.26,4.26,0,0,1-.38-1.19,9.3,9.3,0,0,1,0-2.72,4.16,4.16,0,0,1,.38-1.19,2.34,2.34,0,0,1,.72-.86A1.85,1.85,0,0,1,34,4.24Zm0,.61a1.11,1.11,0,0,0-.78.29,2,2,0,0,0-.49.74,3.86,3.86,0,0,0-.25,1A8.23,8.23,0,0,0,32.42,8a8.09,8.09,0,0,0,.08,1.08,3.59,3.59,0,0,0,.25,1,1.92,1.92,0,0,0,.49.73,1.18,1.18,0,0,0,1.55,0,1.92,1.92,0,0,0,.49-.73,4,4,0,0,0,.26-1A8.09,8.09,0,0,0,35.62,8a8.23,8.23,0,0,0-.08-1.09,4.31,4.31,0,0,0-.26-1,2,2,0,0,0-.49-.74A1.1,1.1,0,0,0,34,4.85Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M67.62,43.79a1.45,1.45,0,0,1-.12.59,1.21,1.21,0,0,1-.31.48,1.38,1.38,0,0,1-.47.31,1.66,1.66,0,0,1-1.19,0,1.38,1.38,0,0,1-.47-.31,1.21,1.21,0,0,1-.31-.48,1.45,1.45,0,0,1-.12-.59,1.53,1.53,0,0,1,.12-.6,1.25,1.25,0,0,1,.31-.47,1.38,1.38,0,0,1,.47-.31,1.66,1.66,0,0,1,1.19,0,1.38,1.38,0,0,1,.47.31,1.25,1.25,0,0,1,.31.47A1.53,1.53,0,0,1,67.62,43.79Zm-.49,0a1,1,0,0,0-.07-.39,1.07,1.07,0,0,0-.22-.32.87.87,0,0,0-.32-.22,1,1,0,0,0-.39-.08,1,1,0,0,0-.4.08.87.87,0,0,0-.32.22,1.07,1.07,0,0,0-.22.32,1,1,0,0,0-.07.39,1.09,1.09,0,0,0,.07.4,1,1,0,0,0,.22.31.87.87,0,0,0,.32.22,1,1,0,0,0,.4.08,1,1,0,0,0,.39-.08.87.87,0,0,0,.32-.22,1,1,0,0,0,.22-.31A1.09,1.09,0,0,0,67.13,43.79Z" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("path", { class: "cls-6", d: "M71,42.24a1.84,1.84,0,0,1,1.1.32,2.34,2.34,0,0,1,.72.86,4.16,4.16,0,0,1,.38,1.19,8.46,8.46,0,0,1,0,2.72,4.26,4.26,0,0,1-.38,1.19,2.27,2.27,0,0,1-.72.84,2.07,2.07,0,0,1-2.21,0,2.27,2.27,0,0,1-.72-.84,4.26,4.26,0,0,1-.38-1.19,9.3,9.3,0,0,1,0-2.72,4.16,4.16,0,0,1,.38-1.19,2.34,2.34,0,0,1,.72-.86A1.85,1.85,0,0,1,71,42.24Zm0,.61a1.11,1.11,0,0,0-.78.29,2,2,0,0,0-.49.74,3.86,3.86,0,0,0-.25,1A8.23,8.23,0,0,0,69.42,46a8.09,8.09,0,0,0,.08,1.08,3.59,3.59,0,0,0,.25,1,2,2,0,0,0,.49.74,1.21,1.21,0,0,0,1.55,0,2,2,0,0,0,.49-.74,4,4,0,0,0,.26-1A8.09,8.09,0,0,0,72.62,46a8.23,8.23,0,0,0-.08-1.09,4.31,4.31,0,0,0-.26-1,2,2,0,0,0-.49-.74A1.1,1.1,0,0,0,71,42.85Z" })));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    createSymbol(symbolNode) {
        var _a, _b, _c;
        if (!symbolNode) {
            return;
        }
        const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        let symbol = renderer.symbol ||
            (((_a = renderer.classBreakInfos) === null || _a === void 0 ? void 0 : _a.length) && renderer.classBreakInfos[0].symbol) ||
            (((_b = renderer.uniqueValueInfos) === null || _b === void 0 ? void 0 : _b.length) && renderer.uniqueValueInfos[0].symbol) ||
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView);
        symbol = symbol.clone();
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.r)(symbol, new modules.esriColor({ r: 170, g: 170, b: 170, a: 1 }));
        // remove old symbol if there is one
        while ((_c = symbolNode.childNodes) === null || _c === void 0 ? void 0 : _c.length) {
            symbolNode.removeChild(symbolNode.childNodes[0]);
        }
        if (symbol) {
            // add new symbol
            modules.symbolUtils
                .renderPreviewHTML(symbol, {
                size: 20
            })
                .then((node) => symbolNode.appendChild(node));
        }
    }
    handleToggle() {
        var _a;
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "rotation");
        if (rotationVisVar) {
            this.lastSettings = { rotationVisVar };
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aJ)("rotation", layer);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        }
        else {
            if ((_a = this.lastSettings) === null || _a === void 0 ? void 0 : _a.rotationVisVar) {
                renderer.visualVariables = renderer.visualVariables || [];
                renderer.visualVariables.push(this.lastSettings.rotationVisVar);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aI)(this.blockNode);
            }
            else {
                // pick first field by default if active
                const firstNumField = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aK)();
                const field = firstNumField ? firstNumField.layerField.name : "";
                const rVisVar = new modules.RotationVariable({
                    field,
                    rotationType: "geographic"
                });
                renderer.visualVariables = renderer.visualVariables || [];
                renderer.visualVariables.push(rVisVar);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aI)(this.blockNode);
            }
        }
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    handleTypeChange(type) {
        if (type === this.rotationType) {
            return;
        }
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "rotation");
        rotationVisVar.rotationType = type;
        this.rotationType = rotationVisVar.rotationType;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    setRotationVisualVariable(fieldInfo) {
        this.isLoading = true;
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        try {
            let rotationVisVar;
            if (fieldInfo.expression) {
                rotationVisVar = new modules.RotationVariable({
                    valueExpression: fieldInfo.expression,
                    valueExpressionTitle: fieldInfo.expressionTitle,
                    rotationType: this.rotationType
                });
            }
            else if (fieldInfo.field) {
                rotationVisVar = new modules.RotationVariable({
                    field: fieldInfo.field,
                    rotationType: this.rotationType
                });
            }
            this.rotationType = this.rotationType;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aJ)("rotation", layer);
            renderer.visualVariables = renderer.visualVariables || [];
            renderer.visualVariables.push(rotationVisVar);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aI)(this.blockNode);
            this.isLoading = false;
        }
        catch (e) {
            console.log(e);
        }
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingRotation.style = arcgisSmartMappingRotationCss;

var ImagePaths;
(function (ImagePaths) {
    ImagePaths["highToLow"] = "HighToLow.svg";
    ImagePaths["aboveAndBelow"] = "AboveAndBelow.svg";
    ImagePaths["above"] = "Above.svg";
    ImagePaths["below"] = "Below.svg";
    ImagePaths["centeredOn"] = "CenteredOn.svg";
    ImagePaths["extremes"] = "Extremes.svg";
})(ImagePaths || (ImagePaths = {}));

const arcgisSmartMappingThemeButtonCss = ".theme-button{display:flex;padding:6px;justify-content:space-between;align-items:center;border-radius:0;cursor:pointer;background-color:var(--calcite-color-foreground-1);color:var(--calcite-color-text-1);border-color:var(--calcite-color-foreground-3);border-width:1px;border-style:solid;box-shadow:transparent 0px 0px 0px 1px inset}.theme-button:hover{box-shadow:inset 0 0 0 1px var(--calcite-color-foreground-3)}.theme-button:active{box-shadow:inset 0 0 0 2px var(--calcite-color-foreground-3)}.theme-button:focus{box-shadow:inset 0 0 0 2px var(--calcite-color-foreground-3);outline:2px solid var(--calcite-color-brand);outline-offset:2px}.theme-button.active,.calcite-theme-button.active{outline:1px solid var(--calcite-ui-focus-color, var(--calcite-color-brand))}.theme-content{display:flex;align-items:center;width:100%}.theme-sub-content{display:flex;justify-content:space-between;align-items:center;width:100%}.theme-button-icon{min-width:16px;background-repeat:no-repeat;height:48px;padding:0;display:inline-block}.theme-button-text{display:inline-block;padding:0 10px}.theme-button-title{font-weight:bold}.theme-button-msg{font-size:80%;line-height:16px}";

const ArcgisSmartMappingThemeButton = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingThemeButtonChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingThemeButtonChange", 7);
        this.arcgisSmartMappingThemeButtonBeforeOpen = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingThemeButtonBeforeOpen", 7);
        //--------------------------------------------------------------------------
        //
        //  Private Properties
        //
        //--------------------------------------------------------------------------
        this.open = false;
        this.themeInfos = [];
        this.rendererSubtype = undefined;
        this.buttonVersion = "default";
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Set focus on component
     */
    async setFocus() {
        if (this.buttonVersion === "minimal") {
            this.buttonNode.setFocus();
        }
        else {
            this.buttonNode.focus();
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        this.populateThemeInfo();
        this.setSelection();
    }
    componentWillUpdate() {
        const theme = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.J)();
        if (this.selectedThemeInfo.value !== theme) {
            this.setSelection();
        }
    }
    // --------------------------------------------------------------------------
    //
    // Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, this.buttonVersion === "minimal" ? this.renderMinimalButton() : this.renderDefaultButton()));
    }
    renderDefaultButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.themeButton.theme, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "theme-button", role: "button", tabindex: "0", "aria-haspopup": "true", "aria-label": strings.themeButton.selectTheme, ref: (node) => (this.buttonNode = node), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.openThemeDropdown();
                }
            }, onClick: () => this.openThemeDropdown() }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "theme-content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "theme-button-icon", style: {
                backgroundImage: `url(${(0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/arcgis-smart-mapping-dropdown-images/`)}${this.selectedThemeInfo.iconPath})`
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "theme-sub-content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "theme-button-text" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "theme-button-title" }, this.selectedThemeInfo.title), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "theme-button-msg" }, this.selectedThemeInfo.msg)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "chevron-down" })))))));
    }
    renderMinimalButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { onClick: (event) => event.stopImmediatePropagation() }, strings.themeButton.theme, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { scale: "m", class: "calcite-theme-button", alignment: "icon-end-space-between", iconEnd: "chevron-down", appearance: "outline-fill", width: "full", tabindex: "0", role: "button", kind: "neutral", "aria-haspopup": "true", label: strings.themeButton.selectTheme, ref: (node) => (this.buttonNode = node), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.openThemeDropdown();
                }
            }, onClick: () => this.openThemeDropdown() }, this.selectedThemeInfo.title)));
    }
    // --------------------------------------------------------------------------
    //
    // Private methods
    //
    // --------------------------------------------------------------------------
    setSelection() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const authInfo = renderer.authoringInfo;
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), "color");
        const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), "size");
        let newValue = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) ||
            (this.rendererSubtype === "size" ? authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.theme : authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.theme);
        if (rendererType === "color-size" &&
            (authInfo === null || authInfo === void 0 ? void 0 : authInfo.type) !== "univariate-color-size" &&
            this.rendererSubtype === "size") {
            newValue = authSizeVisVar.theme;
        }
        this.selectedThemeInfo = !newValue
            ? this.themeInfos.find((info) => info.value === "high-to-low")
            : this.themeInfos.find((info) => info.value === newValue);
        this.themeInfos.forEach((themeInfo) => {
            themeInfo.selected = themeInfo.value === this.selectedThemeInfo.value;
        });
    }
    closePopover() {
        var _a;
        this.open = false;
        if (this.dropdownNode) {
            (_a = this.dropdownNode.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.dropdownNode);
            this.dropdownNode = null;
            this.buttonNode.classList.remove("active");
        }
    }
    openThemeDropdown() {
        if (!this.open) {
            this.arcgisSmartMappingThemeButtonBeforeOpen.emit();
            const dropdown = document.createElement("arcgis-smart-mapping-dropdown");
            dropdown.buttonNode = this.buttonNode;
            dropdown.infos = this.themeInfos;
            this.dropdownNode = dropdown;
            dropdown.addEventListener("arcgisSmartMappingDropdownClose", (event) => {
                this.closePopover();
                event.detail === "Escape" && this.setFocus();
            });
            dropdown.addEventListener("arcgisSmartMappingDropdownChange", (event) => this.setTheme(event.detail));
            this.buttonNode.classList.add("active");
            document.body.appendChild(dropdown);
            this.open = true;
        }
        else {
            this.open = false;
        }
    }
    setTheme(newThemeInfo) {
        const currentTheme = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.J)(this.rendererSubtype);
        const newTheme = newThemeInfo.value;
        if (newTheme === currentTheme) {
            this.closePopover();
            setTimeout(() => this.setFocus(), 300);
            return;
        }
        for (let i = 0; i < this.themeInfos.length; i++) {
            this.themeInfos[i].selected = this.themeInfos[i].value === newTheme;
        }
        this.selectedThemeInfo = newThemeInfo;
        this.arcgisSmartMappingThemeButtonChange.emit(newTheme);
        this.closePopover();
        setTimeout(() => this.setFocus(), 300);
    }
    populateThemeInfo() {
        const { layer, mapImageSublayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const newMS = mapImageSublayer && layer.version >= 11;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const isAgeRenderer = ["color-age", "size-age"].indexOf(rendererType) > -1 ||
            (this.rendererSubtype !== "size" && ["color-age-size"].indexOf(rendererType) > -1) ||
            (this.rendererSubtype === "size" &&
                ["color-size-age", "type-size-age"].indexOf(rendererType) > -1);
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const isUnivariate = (authInfo === null || authInfo === void 0 ? void 0 : authInfo.type) === "univariate-color-size";
        const visVar = rendererType === "color-size" && isUnivariate
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), "size")
            : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), this.rendererSubtype);
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(visVar.field);
        this.isDate = (field === null || field === void 0 ? void 0 : field.simpleFieldType) === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE && !isAgeRenderer;
        const imgStr = rendererType === "color-size" && isUnivariate
            ? "ColorAndSize_"
            : this.rendererSubtype === "color"
                ? "Color_"
                : "Size_";
        this.themeInfos.push({
            value: "high-to-low",
            title: this.isDate ? strings.themeButton.newToOld : strings.themeButton.highToLow,
            msg: this.isDate
                ? strings.themeButton[this.rendererSubtype].newToOldMsg
                : strings.themeButton[this.rendererSubtype].highToLowMsg,
            iconPath: `${imgStr}${ImagePaths.highToLow}`,
            selected: false
        });
        if (rendererType === "color" ||
            (rendererType === "color-size" &&
                this.rendererSubtype !== "size" &&
                (!mapImageSublayer || newMS))) {
            this.themeInfos.push({
                value: "above-and-below",
                title: this.isDate ? strings.themeButton.beforeAndAfter : strings.themeButton.aboveAndBelow,
                msg: this.isDate
                    ? strings.themeButton[this.rendererSubtype].beforeAndAfterMsg
                    : strings.themeButton[this.rendererSubtype].aboveAndBelowMsg,
                iconPath: `${imgStr}${ImagePaths.aboveAndBelow}`,
                selected: false
            });
        }
        this.themeInfos.push({
            value: "above",
            title: this.isDate ? strings.themeButton.after : strings.themeButton.above,
            msg: this.isDate
                ? strings.themeButton[this.rendererSubtype].afterMsg
                : strings.themeButton[this.rendererSubtype].aboveMsg,
            iconPath: `${imgStr}${ImagePaths.above}`,
            selected: false
        });
        this.themeInfos.push({
            value: "below",
            title: this.isDate ? strings.themeButton.before : strings.themeButton.below,
            msg: this.isDate
                ? strings.themeButton[this.rendererSubtype].beforeMsg
                : strings.themeButton[this.rendererSubtype].belowMsg,
            iconPath: `${imgStr}${ImagePaths.below}`,
            selected: false
        });
        if (rendererType === "color") {
            this.themeInfos.push({
                value: "centered-on",
                title: strings.themeButton.centered,
                msg: strings.themeButton[this.rendererSubtype].centeredMsg,
                iconPath: `${imgStr}${ImagePaths.centeredOn}`,
                selected: false
            });
            this.themeInfos.push({
                value: "extremes",
                title: strings.themeButton.extremes,
                msg: strings.themeButton[this.rendererSubtype].extremesMsg,
                iconPath: `${imgStr}${ImagePaths.extremes}`,
                selected: false
            });
        }
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingThemeButton.style = arcgisSmartMappingThemeButtonCss;

const arcgisSmartMappingTransparencyCss = ".block-content-loading{height:150px}.transparency-block{overflow-x:hidden}.block-section-padding{padding-top:6px}.transparency-range{display:flex;justify-content:space-between}.transparency-range-item{width:49%;display:flex;flex-flow:column;justify-content:space-between}.include-legend{margin:10px 0 0 0}.slider-box{height:300px}.slider-box .esri-opacity-slider__histogram-container{width:85px}.slider-box .esri-opacity-slider .esri-slider .esri-slider__content{height:175px}.slider-box .esri-opacity-slider{min-width:200px}.slider-box .esri-opacity-slider .esri-slider .esri-slider__label,.slider-box .esri-opacity-slider .esri-slider .esri-slider__min,.slider-box .esri-opacity-slider .esri-slider .esri-slider__max{text-decoration:underline}.slider-box .esri-opacity-slider .esri-slider .esri-slider__label:hover,.slider-box .esri-opacity-slider .esri-slider .esri-slider__min:hover,.slider-box .esri-opacity-slider .esri-slider .esri-slider__max:hover{border:1px solid #bbb;background-color:#f3f3f3;text-decoration:none;z-index:1}.slider-box-buttons-front{display:flex}";

const ArcgisSmartMappingTransparency = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingSymbolTransparencyError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingSymbolTransparencyError", 7);
        /*
         * When toggling off remember settings
         */
        this.lastSettings = {};
        /**
         * Necessary for tracking stops for non-classed sliders,
         * whose values are updated immediately even given incorrect inputs.
         */
        this.currentStopValues = [];
        this.zigzagClick = false;
        this.lastFieldSortBy = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_3__.L.default;
        this.styleSheetStatus = "not-loaded";
        this.open = false;
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.sliderZoomed = false;
        this.isLoading = false;
    }
    //--------------------------------------------------------------------------
    //
    //  public calls
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.blockNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    async updateStatistics() {
        var _a;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.statistics = null;
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.histogram = null;
        (_a = this.transparencySlider) === null || _a === void 0 ? void 0 : _a.destroy();
        this.transparencySlider = undefined;
        this.sliderZoomed = false;
        this.getStatistics();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillLoad() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        this.isBlockOpen = this.open || !!opacityVisVar;
        this.getStatistics();
        this.percentLabelFlip = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.at)(this.hostElement);
    }
    componentDidLoad() {
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { config, strings, mapImageSublayer, supportsArcade, layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const { isBlockOpen, isLoading } = this;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        if ((mapImageSublayer && !supportsArcade) || layer.type === "geo-rss" || !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ag)()) {
            return null;
        }
        const isPredominance = ["predominance", "predominance-size"].indexOf(rendererType) > -1;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("link", { rel: "stylesheet", href: `${config.jsapiUrl}/themes/light/main.css`, onLoad: () => {
                this.styleSheetStatus = "loaded";
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }, onError: () => {
                this.styleSheetStatus = "failed";
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: isPredominance
                ? strings.transparency.transparencyByPredominance
                : strings.transparency.transparencyByAttribute, collapsible: true, open: isBlockOpen, loading: isLoading, class: "transparency-block", ref: (node) => (this.blockNode = node), onCalciteBlockOpen: () => {
                this.isBlockOpen = true;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aI)(this.blockNode);
            }, onCalciteBlockClose: () => (this.isBlockOpen = false) }, this.renderTransparencyToggle())));
    }
    renderTransparencyToggle() {
        const { styleSheetStatus } = this;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const isPredominance = ["predominance", "predominance-size"].indexOf(rendererType) > -1;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { text: isPredominance
                ? strings.transparency.transparencyLabelPredominance
                : strings.transparency.transparencyLabel, "toggle-display": "switch", open: !!opacityVisVar, onCalciteBlockSectionToggle: (event) => this.handleToggle(event), ref: (node) => (this.blockSectionNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "block-section-padding" }, opacityVisVar && styleSheetStatus === "loaded"
            ? this.renderContent()
            : opacityVisVar && styleSheetStatus === "not-loaded"
                ? this.renderLoading()
                : null)));
    }
    renderLoading() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "block-content-loading" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: strings.loading })));
    }
    renderContent() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, this.renderAttributes(), this.renderSlider(), this.renderRange(), this.renderLegend()));
    }
    renderAttributes() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        if (["predominance", "predominance-size"].indexOf(rendererType) > -1) {
            return null;
        }
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(opacityVisVar.field);
        const normalizationField = opacityVisVar.normalizationField && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(opacityVisVar.normalizationField);
        const fieldInfo = {
            field: opacityVisVar.field,
            expression: opacityVisVar.valueExpression,
            expressionTitle: opacityVisVar.valueExpressionTitle,
            simpleFieldType: field ? field.simpleFieldType : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, this.renderAttributeMain(fieldInfo), this.renderAttributeDividedBy(normalizationField)));
    }
    renderAttributeMain(fieldInfo) {
        var _a;
        const { fields, layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const isBinningLayer = "featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning";
        const canArcade = !isBinningLayer;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-attribute-input", { fieldList: fields.filter((field) => [_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE, _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER].includes(field.simpleFieldType)), popoverReferenceElement: this.flowItemNode, selectedField: fieldInfo, label: strings.transparency.field, mode: canArcade ? "expression" : "simple", ref: (node) => (this.attributeInputNode = node), onArcgisSmartMappingAttributeInputChange: async (event) => {
                var _a;
                if (event.detail) {
                    const fieldInfo = event.detail;
                    await this.getOpacityVisualVariable(fieldInfo);
                    (_a = this.dividedByAttributeInputNode) === null || _a === void 0 ? void 0 : _a.clear();
                }
                // refresh slider when switching between fields and Arcade expressions
                this.updateStatistics();
            }, onArcgisSmartMappingAttributeInputError: (event) => {
                this.arcgisSmartMappingSymbolTransparencyError.emit(event.detail);
            } }));
    }
    renderAttributeDividedBy(normalizationField) {
        const { layer, fields, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(opacityVisVar.field);
        const fieldInfo = {
            field: opacityVisVar.field,
            expression: opacityVisVar.valueExpression,
            expressionTitle: opacityVisVar.valueExpressionTitle,
            simpleFieldType: field ? field.simpleFieldType : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        };
        if (fieldInfo.expression || fieldInfo.simpleFieldType !== _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER) {
            // main field is expression or not a number, we don't support dividedBy
            return null;
        }
        const counts = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.I)(fields);
        if (counts.number < 2) {
            // the layer has only 1 or no number field
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-attribute-input", { fieldList: fields.filter((field) => field.layerField.name !== opacityVisVar.field &&
                field.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER), popoverReferenceElement: this.flowItemNode, label: strings.transparency.dividedBy, selectedField: normalizationField
                ? {
                    field: normalizationField.layerField.name,
                    simpleFieldType: normalizationField.simpleFieldType
                }
                : null, mode: "remove", ref: (node) => {
                if (node) {
                    this.dividedByAttributeInputNode = node;
                }
            }, onArcgisSmartMappingAttributeInputChange: async (event) => {
                if (event.detail) {
                    const fieldInfo = event.detail;
                    await this.getOpacityVisualVariable({
                        field: opacityVisVar.field,
                        simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
                    }, fieldInfo.field);
                }
                else {
                    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                    const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
                    await this.getOpacityVisualVariable({
                        field: opacityVisVar.field,
                        simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
                    }, null);
                }
                // refresh slider when normalizing and removing the normalization field
                this.updateStatistics();
            } }));
    }
    renderSlider() {
        var _a;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const { statisticsStatus, histogramStatus, sliderZoomed } = this;
        if (statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED || statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING) {
            (_a = this.transparencySlider) === null || _a === void 0 ? void 0 : _a.destroy();
            this.transparencySlider = undefined;
        }
        else if (statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS ||
            (histogramStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS && !this.transparencySlider)) {
            return this.renderTransparencySliderLoading();
        }
        else {
            const ok = this.prepareTransparencySlider();
            let disableZoomButton = false;
            const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
            const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
            if (!sliderZoomed) {
                const authOpacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), "opacity");
                const zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(opacityVisVar.stops, authOpacityVisVar === null || authOpacityVisVar === void 0 ? void 0 : authOpacityVisVar.minSliderValue, authOpacityVisVar === null || authOpacityVisVar === void 0 ? void 0 : authOpacityVisVar.maxSliderValue);
                if ((zoomOptions === null || zoomOptions === void 0 ? void 0 : zoomOptions.minMaxSame) ||
                    (!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(zoomOptions === null || zoomOptions === void 0 ? void 0 : zoomOptions.min) && !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(zoomOptions === null || zoomOptions === void 0 ? void 0 : zoomOptions.max))) {
                    disableZoomButton = true;
                    if (this.zoomButtonNode) {
                        this.zoomButtonNode.disabled = true;
                    }
                }
            }
            this.currentStopValues = opacityVisVar.stops.map((stop) => stop.value);
            if (ok || this.transparencySlider) {
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box-buttons-front" }, this.renderZoomButton(disableZoomButton), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, "\u00A0"), this.renderResetButton()), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (node) => {
                        if (node) {
                            this.afterTransparencySliderCreate(node);
                        }
                    } })));
            }
            else {
                return this.renderTransparencySliderLoading();
            }
        }
    }
    renderTransparencySliderLoading() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: strings.loading })));
    }
    renderZoomButton(disableZoomButton) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const { sliderZoomed } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { text: strings.transparency.zoomSlider, icon: sliderZoomed ? "magnifyingGlassMinus" : "magnifyingGlassPlus", disabled: disableZoomButton, onClick: () => this.handleZoomSlider(), ref: (node) => (this.zoomButtonNode = node) }));
    }
    renderResetButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { text: strings.transparency.resetSlider, icon: "undo", onClick: () => this.handleResetSlider() }));
    }
    renderRange() {
        const { percentLabelFlip } = this;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const stops = opacityVisVar.stops;
        const highValue = Math.round(100 - stops[1].opacity * 100);
        const lowValue = Math.round(100 - stops[0].opacity * 100);
        // We don't want to re-create the input whenever the value changes,
        // otherwise that affects the multiple up/down-clicking.
        // But we need to refresh if the value of the input needs to get corrected
        if (this.highInputNode) {
            this.highInputNode.value = "" + highValue;
        }
        if (this.lowInputNode) {
            this.lowInputNode.value = "" + lowValue;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.transparency.transparencyRange), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "transparency-range" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "transparency-range-item" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, strings.transparency.transparencyHighValues, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { prefixText: percentLabelFlip ? "%" : undefined, suffixText: !percentLabelFlip ? "%" : undefined, value: `${100 - Math.round(stops[1].opacity * 100)}`, min: 0, max: 100, step: 1, scale: "s", numberButtonType: "vertical", ref: (node) => (this.highInputNode = node), onCalciteInputNumberInput: (event) => this.handleRangeChange(event, "high"), label: strings.transparency.transparencyHighValues }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "transparency-range-item" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "s" }, strings.transparency.transparencyLowValues, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-number", { prefixText: percentLabelFlip ? "%" : undefined, suffixText: !percentLabelFlip ? "%" : undefined, value: `${100 - Math.round(stops[0].opacity * 100)}`, min: 0, max: 100, step: 1, scale: "s", numberButtonType: "vertical", ref: (node) => (this.lowInputNode = node), onCalciteInputNumberInput: (event) => this.handleRangeChange(event, "low"), label: strings.transparency.transparencyLowValues }))))));
    }
    renderLegend() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        let isChecked = true;
        const legendOptions = opacityVisVar.legendOptions;
        if (legendOptions && legendOptions.showLegend === false) {
            isChecked = false;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "include-legend", layout: "inline-space-between" }, strings.transparency.includeInLegend, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: isChecked, onCalciteSwitchChange: () => this.handleIncludeInLegendToggle() })));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    prepareTransparencySlider() {
        var _a;
        const { statistics, histogram, histogramStatus, sliderZoomed } = this;
        const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const authOpacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "opacity");
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(opacityVisVar.field);
        const fieldInfo = {
            field: opacityVisVar.field,
            expression: opacityVisVar.valueExpression,
            expressionTitle: opacityVisVar.valueExpressionTitle,
            simpleFieldType: (field === null || field === void 0 ? void 0 : field.simpleFieldType) || _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        };
        const isDateField = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aH)(fieldInfo);
        if (histogramStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS) {
            return false;
        }
        let min = authOpacityVisVar === null || authOpacityVisVar === void 0 ? void 0 : authOpacityVisVar.minSliderValue;
        let max = authOpacityVisVar === null || authOpacityVisVar === void 0 ? void 0 : authOpacityVisVar.maxSliderValue;
        ({ min, max } = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ad)({ min, max }));
        if (!this.transparencySlider) {
            const config = {
                histogramConfig: {
                    bins: histogram === null || histogram === void 0 ? void 0 : histogram.bins,
                    average: Math.round(statistics.avg * 10) / 10,
                    standardDeviation: statistics.stddev,
                    standardDeviationCount: 1
                },
                style: {
                    trackFillColor: new modules.esriColor([84, 84, 84])
                },
                min: min !== null && min !== void 0 ? min : statistics.min,
                max: max !== null && max !== void 0 ? max : statistics.max,
                stops: modules.esriLang.clone(opacityVisVar.stops),
                precision: (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_6__.g)(opacityVisVar.stops)
            };
            if (isDateField) {
                config.hasTimeData = true;
                (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_5__.a)(config, mapView.timeZone);
            }
            this.transparencySlider = new modules.OpacitySlider(config);
            this.createTransparencySliderChangeEvents();
        }
        else {
            const slider = this.transparencySlider;
            if (((_a = slider.slider) === null || _a === void 0 ? void 0 : _a.state) === "dragging") {
                return true;
            }
            const config = {
                histogramConfig: {
                    bins: histogram === null || histogram === void 0 ? void 0 : histogram.bins,
                    average: Math.round(statistics.avg * 10) / 10,
                    standardDeviation: statistics.stddev,
                    standardDeviationCount: 1
                },
                min: min !== null && min !== void 0 ? min : statistics.min,
                max: max !== null && max !== void 0 ? max : statistics.max,
                stops: modules.esriLang.clone(opacityVisVar.stops),
                hasTimeData: isDateField
            };
            isDateField && (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_5__.a)(config, mapView.timeZone);
            if (sliderZoomed) {
                /**
                 * clicking a zigzag already updates the internal slider zoomOptions;
                 * setting them here again would incorrectly override a user's decision
                 * to manually zoom out one side of the slider.
                 */
                if (!this.zigzagClick) {
                    config.zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(opacityVisVar.stops, authOpacityVisVar === null || authOpacityVisVar === void 0 ? void 0 : authOpacityVisVar.minSliderValue, authOpacityVisVar === null || authOpacityVisVar === void 0 ? void 0 : authOpacityVisVar.maxSliderValue);
                }
            }
            else {
                config.zoomOptions = null;
            }
            if (this.sliderZoomed && this.adjustedZoomOptions && !this.zigzagClick) {
                config.zoomOptions = this.adjustedZoomOptions;
                /**
                 * handles edge cases where the slider is zoomed, handles have been manually modified,
                 * and a user executes a label change. This prevents zoom options from changing and preserves
                 * the histogram display.
                 */
                if (this.zoomAdjustment === "min") {
                    this.transparencySlider.slider.min = config.zoomOptions.min;
                    config.zoomOptions.min = null;
                }
                else {
                    this.transparencySlider.slider.max = config.zoomOptions.max;
                    config.zoomOptions.max = null;
                }
            }
            this.adjustedZoomOptions = null;
            this.zoomAdjustment = null;
            this.transparencySlider.set(config);
            this.zigzagClick = false;
        }
        return true;
    }
    createTransparencySliderChangeEvents() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(opacityVisVar.field);
        const fieldInfo = {
            field: opacityVisVar.field,
            expression: opacityVisVar.valueExpression,
            expressionTitle: opacityVisVar.valueExpressionTitle,
            simpleFieldType: field ? field.simpleFieldType : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        };
        const isDateField = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aH)(fieldInfo);
        if (!this.transparencySlider) {
            return;
        }
        // handles zigzag click
        this.transparencySlider.watch("zoomOptions", (newValue, oldValue) => {
            if (this.sliderZoomed &&
                (((oldValue === null || oldValue === void 0 ? void 0 : oldValue.min) && !(newValue === null || newValue === void 0 ? void 0 : newValue.min)) || ((oldValue === null || oldValue === void 0 ? void 0 : oldValue.max) && !(newValue === null || newValue === void 0 ? void 0 : newValue.max)))) {
                this.zigzagClick = true;
                this.handleZigzagClick(newValue);
            }
        });
        this.transparencySlider.on("min-change", (info) => {
            if (info.value > this.currentStopValues[0]) {
                this.transparencySlider.stops.forEach((stop, idx) => {
                    stop.value = this.currentStopValues[idx];
                });
                this.onMinMaxChange(this.currentStopValues[0], this.transparencySlider.slider.max, "min");
            }
            else {
                this.onMinMaxChange(info.value, this.transparencySlider.slider.max, "min");
            }
        });
        this.transparencySlider.on("max-change", (info) => {
            if (info.value < this.currentStopValues[this.currentStopValues.length - 1]) {
                this.transparencySlider.stops.forEach((stop, idx) => {
                    stop.value = this.currentStopValues[idx];
                });
                this.onMinMaxChange(this.transparencySlider.slider.min, this.currentStopValues[this.currentStopValues.length - 1], "max");
            }
            else {
                this.onMinMaxChange(this.transparencySlider.slider.min, info.value, "max");
            }
        });
        this.transparencySlider.on("thumb-change", (info) => {
            if (isDateField && info.value === 0) {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                return;
            }
            const stops = this.transparencySlider.stops;
            this.updateRendererStops(stops);
        });
        this.transparencySlider.on("thumb-drag", () => {
            const stops = this.transparencySlider.stops;
            this.updateRendererStops(stops);
        });
    }
    afterTransparencySliderCreate(node) {
        if (!this.transparencySlider.container) {
            const divNode = document.createElement("div");
            node.append(divNode);
            this.transparencySlider.container = divNode;
        }
    }
    handleToggle(event) {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const sectionNode = event.target;
        if ((sectionNode.open && opacityVisVar) || (!sectionNode.open && !opacityVisVar)) {
            // nothing has changed; happens when we leave
            return;
        }
        if (opacityVisVar) {
            const authOpacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "opacity");
            this.lastSettings.opacityVisVar = opacityVisVar;
            this.lastSettings.authOpacityVisVar = authOpacityVisVar;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aJ)("opacity", layer);
            this.sliderZoomed = false;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        }
        else {
            if (this.lastSettings.opacityVisVar) {
                renderer.visualVariables = renderer.visualVariables || [];
                renderer.visualVariables.push(this.lastSettings.opacityVisVar);
                renderer.authoringInfo = renderer.authoringInfo || new modules.AuthoringInfo({});
                if (this.lastSettings.authOpacityVisVar) {
                    renderer.authoringInfo.visualVariables = renderer.authoringInfo.visualVariables || [];
                    renderer.authoringInfo.visualVariables.push(this.lastSettings.authOpacityVisVar);
                }
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aI)(this.blockNode);
            }
            else {
                // pick first field by default if active
                const firstNumField = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aK)();
                const field = firstNumField ? firstNumField.layerField.name : "";
                this.getOpacityVisualVariable({
                    field,
                    simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
                });
            }
        }
    }
    handleResetSlider() {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        this.sliderZoomed = false;
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const fieldInfo = {
            field: opacityVisVar.field,
            expression: opacityVisVar.valueExpression,
            expressionTitle: opacityVisVar.valueExpressionTitle,
            simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        };
        const normalizationField = opacityVisVar.normalizationField;
        createOpacityVisualVariable({
            fieldInfos: [fieldInfo],
            normalizationField
        })
            .then((result) => {
            var _a;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aJ)("opacity", layer);
            if (result.statistics &&
                (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(result.statistics.min) &&
                (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(result.statistics.max) &&
                result.statistics.min <= result.statistics.max) {
                this.statistics = result.statistics;
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
                this.getHistogram(fieldInfo, normalizationField, result.statistics, result.statistics.min, result.statistics.max);
            }
            else if (((_a = result.statistics) === null || _a === void 0 ? void 0 : _a.count) === 0) {
                // empty layer
                const [defaultMin, defaultMax] = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aL)(fieldInfo);
                this.statistics = {
                    min: defaultMin,
                    max: defaultMax,
                    avg: (defaultMax - defaultMin) / 2,
                    count: 0,
                    median: undefined,
                    stddev: undefined,
                    sum: undefined,
                    variance: undefined
                };
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
            }
            else {
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
            }
            renderer.visualVariables = renderer.visualVariables || [];
            renderer.visualVariables.push(result.visualVariable);
            renderer.authoringInfo = renderer.authoringInfo || new modules.AuthoringInfo({});
            renderer.authoringInfo.visualVariables = renderer.authoringInfo.visualVariables || [];
            renderer.authoringInfo.visualVariables.push(result.authoringInfo.visualVariables[0]);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aI)(this.blockNode);
        })
            .catch((err) => {
            console.log(err);
        });
    }
    handleZoomSlider(zoomed) {
        var _a, _b, _c, _d;
        if (this.histogramStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS) {
            return;
        }
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        this.sliderZoomed = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(zoomed) ? zoomed : !this.sliderZoomed;
        const { sliderZoomed, statistics } = this;
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const authOpacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "opacity");
        const zoomOptions = sliderZoomed
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(opacityVisVar.stops, (_a = authOpacityVisVar === null || authOpacityVisVar === void 0 ? void 0 : authOpacityVisVar.minSliderValue) !== null && _a !== void 0 ? _a : statistics.min, (_b = authOpacityVisVar === null || authOpacityVisVar === void 0 ? void 0 : authOpacityVisVar.maxSliderValue) !== null && _b !== void 0 ? _b : statistics.max)
            : null;
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(opacityVisVar.field);
        this.getHistogram({
            field: opacityVisVar.field,
            expression: opacityVisVar.valueExpression,
            expressionTitle: opacityVisVar.valueExpressionTitle,
            simpleFieldType: field ? field.simpleFieldType : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        }, opacityVisVar.normalizationField, statistics, (zoomOptions && zoomOptions.min) || ((_c = authOpacityVisVar === null || authOpacityVisVar === void 0 ? void 0 : authOpacityVisVar.minSliderValue) !== null && _c !== void 0 ? _c : statistics.min), (zoomOptions && zoomOptions.max) || ((_d = authOpacityVisVar === null || authOpacityVisVar === void 0 ? void 0 : authOpacityVisVar.maxSliderValue) !== null && _d !== void 0 ? _d : statistics.max));
    }
    handleRangeChange(event, type) {
        const node = event.target;
        let value = node.value ? parseInt(node.value) : 0;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        if (value < 0) {
            value = 0;
        }
        else if (value > 100) {
            value = 100;
        }
        const stops = opacityVisVar.stops;
        let newVal = Math.round((1 - value / 100) * 100) / 100;
        if (type === "high") {
            stops[1].opacity = newVal;
        }
        else {
            // "low"
            stops[0].opacity = newVal;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    handleIncludeInLegendToggle() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const legendOptions = opacityVisVar.legendOptions;
        if (legendOptions && legendOptions.showLegend === false) {
            if (legendOptions && legendOptions.title) {
                legendOptions.showLegend = true;
            }
            else {
                opacityVisVar.legendOptions = undefined;
            }
        }
        else {
            opacityVisVar.legendOptions = legendOptions || {};
            opacityVisVar.legendOptions.showLegend = false;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    updateRendererStops(stops) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const authOpacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "opacity");
        opacityVisVar.stops = stops;
        this.transparencySlider.stops = stops;
        this.currentStopValues = opacityVisVar.stops.map((stop) => stop.value);
        const zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(opacityVisVar === null || opacityVisVar === void 0 ? void 0 : opacityVisVar.stops, authOpacityVisVar === null || authOpacityVisVar === void 0 ? void 0 : authOpacityVisVar.minSliderValue, authOpacityVisVar === null || authOpacityVisVar === void 0 ? void 0 : authOpacityVisVar.maxSliderValue);
        if (this.sliderZoomed) {
            this.zoomButtonNode.disabled = false;
        }
        else if (!zoomOptions ||
            zoomOptions.minMaxSame ||
            (!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(zoomOptions.min) && !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(zoomOptions.max))) {
            this.zoomButtonNode.disabled = true;
        }
        else {
            this.zoomButtonNode.disabled = false;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    async getOpacityVisualVariable(fieldInfo, normalizationField) {
        var _a;
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        this.statistics = undefined;
        this.histogram = undefined;
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.sliderZoomed = false;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS;
        if (["predominance", "predominance-size"].indexOf(rendererType) > -1) {
            try {
                const result = await (0,_predominance_a1a2d74d_js__WEBPACK_IMPORTED_MODULE_8__.a)({
                    includeOpacityVariable: true
                });
                //console.log("createPredominanceRendererFromExisting-result", result);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer, layer);
                this.getStatistics();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aI)(this.blockNode);
            }
            catch (error) {
                this.arcgisSmartMappingSymbolTransparencyError.emit({
                    message: error.message,
                    type: "error"
                });
            }
        }
        else {
            try {
                const result = await createOpacityVisualVariable({
                    fieldInfos: [fieldInfo],
                    normalizationField
                });
                //console.log("createOpacityVisualVariable-result", result);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aJ)("opacity", layer);
                if (result.statistics &&
                    (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(result.statistics.min) &&
                    (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(result.statistics.max) &&
                    result.statistics.min <= result.statistics.max) {
                    this.statistics = result.statistics;
                    this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
                    this.getHistogram(fieldInfo, normalizationField, result.statistics, result.statistics.min, result.statistics.max);
                }
                else if (((_a = result.statistics) === null || _a === void 0 ? void 0 : _a.count) === 0) {
                    // empty layer
                    const [defaultMin, defaultMax] = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aL)(fieldInfo);
                    this.statistics = {
                        min: defaultMin,
                        max: defaultMax,
                        avg: (defaultMax - defaultMin) / 2,
                        count: 0,
                        median: undefined,
                        stddev: undefined,
                        sum: undefined,
                        variance: undefined
                    };
                    this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
                }
                else {
                    this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
                }
                renderer.visualVariables = renderer.visualVariables || [];
                renderer.visualVariables.push(result.visualVariable);
                renderer.authoringInfo = renderer.authoringInfo || new modules.AuthoringInfo({});
                renderer.authoringInfo.visualVariables = renderer.authoringInfo.visualVariables || [];
                renderer.authoringInfo.visualVariables.push(result.authoringInfo.visualVariables[0]);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aI)(this.blockNode);
            }
            catch (e) {
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
                // can't toggle on without an opacityVisVar
                this.blockSectionNode.open = false;
                console.log(e);
            }
        }
    }
    getStatistics() {
        var _a;
        const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        let normalizationField;
        let opacityVisVar;
        let min;
        let max;
        opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        if (!opacityVisVar) {
            // no transparency set
            return;
        }
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(opacityVisVar.field);
        const fieldInfo = {
            field: opacityVisVar.field,
            expression: opacityVisVar.valueExpression,
            expressionTitle: opacityVisVar.valueExpressionTitle,
            simpleFieldType: field ? field.simpleFieldType : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        };
        normalizationField = opacityVisVar.normalizationField;
        const authOpacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "opacity");
        min = authOpacityVisVar === null || authOpacityVisVar === void 0 ? void 0 : authOpacityVisVar.minSliderValue;
        max = authOpacityVisVar === null || authOpacityVisVar === void 0 ? void 0 : authOpacityVisVar.maxSliderValue;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS;
        if (!this.statistics && layer) {
            modules
                .summaryStatistics({
                layer,
                view: mapView,
                field: fieldInfo.field,
                valueExpression: fieldInfo.expression,
                normalizationField,
                forBinning: "featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
            })
                .then((statistics) => {
                if (statistics.count === 0) {
                    // field has no values
                    // make up some basic statistics so we can show a slider
                    const [defaultMin, defaultMax] = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aL)(fieldInfo);
                    const min = authOpacityVisVar.minSliderValue || defaultMin;
                    const max = authOpacityVisVar.maxSliderValue || defaultMax;
                    statistics = {
                        min,
                        max,
                        avg: (max + min) / 2,
                        count: 0,
                        median: undefined,
                        stddev: undefined,
                        sum: undefined,
                        variance: undefined
                    };
                    this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
                    return;
                }
                else if (!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(statistics.avg) ||
                    !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(statistics.min) ||
                    !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(statistics.max)) {
                    // statistics unusable
                    this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
                    return;
                }
                statistics = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ad)(statistics);
                min = statistics.min;
                max = statistics.max;
                this.statistics = statistics;
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
                this.getHistogram(fieldInfo, normalizationField, statistics, min, max);
            }, (error) => {
                console.log("error-summaryStatistics", error);
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
            });
        }
    }
    getHistogram(fieldInfo, normalizationField, statistics, min, max) {
        var _a;
        const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        statistics = statistics || this.statistics;
        if (!statistics || statistics.count === 0) {
            return;
        }
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS;
        modules
            .histogram({
            layer: layer,
            view: mapView,
            field: fieldInfo.field,
            valueExpression: fieldInfo.expression,
            numBins: 50,
            minValue: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(min) ? min : statistics.min,
            maxValue: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(max) ? max : statistics.max,
            normalizationField,
            forBinning: "featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
        })
            .then((histogram) => {
            //console.log("success-histogram", histogram, min, max);
            //isDefined(min) ? min : statistics.min,
            //isDefined(max) ? max : statistics.max,
            this.histogram = histogram;
            this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
        }, (error) => {
            console.log("error-histogram", error);
            this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
        });
    }
    onMinMaxChange(min, max, changing) {
        const { statistics } = this;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const authOpacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "opacity") || {};
        // update only the label that the user is changing
        changing === "min"
            ? (authOpacityVisVar.minSliderValue = min)
            : (authOpacityVisVar.maxSliderValue = max);
        // determine if label updates merit zooming or not
        const zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(opacityVisVar === null || opacityVisVar === void 0 ? void 0 : opacityVisVar.stops, authOpacityVisVar.minSliderValue, authOpacityVisVar.maxSliderValue);
        // handles zoom button display for transparency slider
        if (this.sliderZoomed) {
            this.zoomButtonNode.disabled = false;
        }
        else if (!zoomOptions ||
            zoomOptions.minMaxSame ||
            (!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(zoomOptions.min) && !(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_7__.i)(zoomOptions.max))) {
            this.zoomButtonNode.disabled = true;
        }
        else {
            this.zoomButtonNode.disabled = false;
        }
        // zoom adjustment
        if (this.sliderZoomed) {
            this.adjustedZoomOptions = this.transparencySlider.zoomOptions;
            if (changing === "min") {
                this.adjustedZoomOptions.min = min;
                this.zoomAdjustment = "min";
            }
            else {
                this.adjustedZoomOptions.max = max;
                this.zoomAdjustment = "max";
            }
        }
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(opacityVisVar.field);
        const fieldInfo = {
            field: opacityVisVar.field,
            expression: opacityVisVar.valueExpression,
            expressionTitle: opacityVisVar.valueExpressionTitle,
            simpleFieldType: field ? field.simpleFieldType : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        };
        const normalizationField = opacityVisVar.normalizationField;
        this.getHistogram(fieldInfo, normalizationField, statistics, min, max);
        if (min === authOpacityVisVar.minSliderValue && max === authOpacityVisVar.maxSliderValue) {
            this.sliderZoomed = false;
        }
    }
    handleZigzagClick(newValue) {
        var _a, _b;
        const { statistics } = this;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const authOpacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "opacity");
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(opacityVisVar.field);
        const normalizationField = opacityVisVar === null || opacityVisVar === void 0 ? void 0 : opacityVisVar.normalizationField;
        const fieldInfo = {
            field: opacityVisVar.field,
            expression: opacityVisVar.valueExpression,
            expressionTitle: opacityVisVar.valueExpressionTitle,
            simpleFieldType: field ? field.simpleFieldType : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        };
        this.getHistogram(fieldInfo, normalizationField, statistics, (_a = newValue === null || newValue === void 0 ? void 0 : newValue.min) !== null && _a !== void 0 ? _a : authOpacityVisVar.minSliderValue, (_b = newValue === null || newValue === void 0 ? void 0 : newValue.max) !== null && _b !== void 0 ? _b : authOpacityVisVar.maxSliderValue);
        if (!newValue) {
            this.sliderZoomed = false;
        }
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingTransparency.style = arcgisSmartMappingTransparencyCss;



//# sourceMappingURL=arcgis-smart-mapping-background-symbol_6.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addDateFormatFunctions),
/* harmony export */   b: () => (/* binding */ utcToTimePicker),
/* harmony export */   d: () => (/* binding */ datePickerToUTC),
/* harmony export */   u: () => (/* binding */ utcToDatePicker)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




function addDateFormatFunctions(config, timeZone) {
    config.labelFormatFunction = (value) => {
        return getDateDisplayString(value, timeZone, "short-date");
    };
    config.inputFormatFunction = (value) => {
        return getDateDisplayString(value, timeZone, "short-date");
    };
    config.inputParseFunction = (value) => {
        return mapTZToUTC(Date.parse(value), timeZone);
    };
}
function utcToDatePicker(value, timeZone) {
    // date is in UTC
    // we need a map timezone
    let str;
    if (!timeZone || timeZone === "system") {
        const diff = new Date().getTimezoneOffset();
        str = new Date(value - diff * 60000).toISOString();
    }
    else if (timeZone === "unknown") {
        str = new Date(value).toISOString();
    }
    else {
        const diff = new Date().getTimezoneOffset();
        const mapDateStr = new Date(value).toLocaleString("en-US", { timeZone });
        str = new Date(new Date(mapDateStr).getTime() - diff * 60000).toISOString();
    }
    // console.log("utcToDatePicker", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}
function utcToTimePicker(value, timeZone, addSeconds) {
    // date is in UTC
    // we need a map timezone
    let str;
    if (!timeZone || timeZone === "system") {
        const diff = new Date().getTimezoneOffset();
        str = new Date(value - diff * 60000).toISOString();
    }
    else if (timeZone === "unknown") {
        str = new Date(value).toISOString();
    }
    else {
        const diff = new Date().getTimezoneOffset();
        const mapDateStr = new Date(value).toLocaleString("en-US", { timeZone });
        str = new Date(new Date(mapDateStr).getTime() - diff * 60000).toISOString();
    }
    // str = "2023-09-20T13:06:00.000Z"
    str = addSeconds ? str.substring(11, 19) : str.substring(11, 16);
    // console.log("utcToTimePicker", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}
function datePickerToUTC(dateString, timeZone) {
    // date is in map timezone
    // we need a UTC UNIX timestamp
    let date = new Date(dateString);
    // this is read as current time; toISOString() would reaturn UTC time (e.g. +7 hours from pacific)
    // fix the offset
    date = new Date(date.getTime() - date.getTimezoneOffset() * 60000);
    // date now contains the user's entered time
    let value;
    if (!timeZone || timeZone === "system") {
        // add difference between local time and UTC
        value = date.getTime() + date.getTimezoneOffset() * 60000;
    }
    else if (timeZone === "unknown") {
        // take what you get
        value = date.getTime();
    }
    else {
        // add difference between map time and UTC
        const diff = new Date(date.toLocaleString("en-US", { timeZone: "utc" })).getTime() -
            new Date(date.toLocaleString("en-US", { timeZone })).getTime();
        value = date.getTime() + diff;
    }
    // console.log("datePickerToUTC", date.toISOString(), " -> ", new Date(value).toISOString());
    return value;
}
function mapTZToUTC(value, timeZone) {
    if (!value) {
        return value;
    }
    // value is in map timezone
    // we need a UTC timestamp
    let newValue;
    if (!timeZone || timeZone === "system") {
        // add difference between local time and UTC
        const date = new Date();
        newValue = value + date.getTimezoneOffset() * 60000;
    }
    else if (timeZone === "unknown") {
        // take what you get
        newValue = value;
    }
    else {
        // add difference between map time and UTC
        const date = new Date();
        const diff = new Date(date.toLocaleString("en-US", { timeZone: "utc" })).getTime() -
            new Date(date.toLocaleString("en-US", { timeZone })).getTime();
        newValue = value + diff;
    }
    console.log("mapTZToUTC", value, " - ", new Date(value).toISOString(), " - ", new Date(newValue).toISOString());
    return newValue;
}
function getDateDisplayString(value, timeZone, dateFormat) {
    const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    let str;
    if (timeZone === "unknown") {
        str = modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions(dateFormat || "short-date-short-time")), { timeZone: "utc", timeZoneName: "shortOffset" }));
    }
    else {
        // known issues with formatting it-CH
        str = modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions(dateFormat || "short-date-short-time")), { timeZone }));
    }
    // console.log("getDateDisplayString", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}



//# sourceMappingURL=date-79c7d93c.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,