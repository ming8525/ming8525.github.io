"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-6cd7c6"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-flow-color-slider.entry.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-flow-color-slider.entry.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_flow_color_slider: () => (/* binding */ ArcgisSmartMappingFlowColorSlider)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loading-69139907.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _precision_06a73672_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./precision-06a73672.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/precision-06a73672.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _raster_flow_761a3470_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./raster-flow-761a3470.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-flow-761a3470.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */













const arcgisSmartMappingFlowColorSliderCss = ".slider-box{height:275px}.slider-box .esri-color-slider{min-width:200px}.slider-box .esri-color-slider .esri-slider .esri-slider__content{height:130px}.slider-box .esri-color-slider .esri-slider .esri-slider__label,.slider-box .esri-color-slider .esri-slider .esri-slider__min,.slider-box .esri-color-slider .esri-slider .esri-slider__max{text-decoration:underline}.slider-box .esri-color-slider .esri-slider .esri-slider__label:hover,.slider-box .esri-color-slider .esri-slider .esri-slider__min:hover,.slider-box .esri-color-slider .esri-slider .esri-slider__max:hover{border:1px solid #bbb;background-color:#f3f3f3;text-decoration:none;z-index:1}.slider-box-buttons-front{display:flex}";

const ArcgisSmartMappingFlowColorSlider = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingFlowColorSliderChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingFlowColorSliderChange", 7);
        this.arcgisSmartMappingFlowColorSliderError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingFlowColorSliderError", 7);
        /**
         * Necessary for tracking stops for non-classed sliders,
         * whose values are updated immediately even given incorrect inputs.
         */
        this.currentStopValues = [];
        this.styleSheetStatus = "not-loaded";
    }
    // -------------------------------------------------------------------
    //
    // Lifecycle
    //
    // -------------------------------------------------------------------
    componentDidLoad() {
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
    }
    // -------------------------------------------------------------------
    //
    //  Render Methods
    //
    // -------------------------------------------------------------------
    render() {
        const { config } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("link", { rel: "stylesheet", href: `${config.jsapiUrl}/themes/light/main.css`, onLoad: () => {
                this.styleSheetStatus = "loaded";
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }, onError: () => {
                this.styleSheetStatus = "failed";
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } }), this.styleSheetStatus === "loaded"
            ? this.renderFlowColorSlider()
            : this.styleSheetStatus === "not-loaded"
                ? this.renderFlowColorSliderLoading()
                : null));
    }
    renderFlowColorSlider() {
        var _a, _b;
        const { layer: smLayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        if (!colorVisVar) {
            return;
        }
        const { sourceJSON } = layer;
        const { minValues, maxValues } = sourceJSON;
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color");
        const min = (_a = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.minSliderValue) !== null && _a !== void 0 ? _a : minValues === null || minValues === void 0 ? void 0 : minValues[0];
        const max = (_b = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.maxSliderValue) !== null && _b !== void 0 ? _b : maxValues === null || maxValues === void 0 ? void 0 : maxValues[0];
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(min) || !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(max) || min === max || (colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.stops.length) === 1) {
            if (this.flowColorSlider) {
                this.flowColorSlider.destroy();
                this.flowColorSlider = undefined;
            }
        }
        else {
            const ok = this.prepareFlowColorSlider();
            colorVisVar.stops.forEach((stop, idx) => {
                this.currentStopValues[idx] = stop.value;
            });
            if (ok || this.flowColorSlider) {
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.flow.dataRange), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box-buttons-front" }, this.renderInvertButton(), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, "\u00A0"), this.renderResetButton()), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (node) => {
                        if (node) {
                            this.afterFlowColorSliderCreate(node);
                        }
                    } })));
            }
            else {
                return this.renderFlowColorSliderLoading();
            }
        }
    }
    renderFlowColorSliderLoading() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: strings.loading })));
    }
    renderInvertButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { text: strings.panels.flow.invertSlider, icon: "arrowUpDown", onClick: () => this.handleInvertSlider() }));
    }
    renderResetButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { text: strings.panels.flow.resetSlider, icon: "undo", onClick: () => this.handleResetSlider() }));
    }
    // -------------------------------------------------------------------
    //
    //  Private methods
    //
    // -------------------------------------------------------------------
    prepareFlowColorSlider() {
        var _a, _b, _c, _d;
        const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const { sourceJSON } = layer;
        const { minValues, maxValues } = sourceJSON;
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color");
        const min = (_a = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.minSliderValue) !== null && _a !== void 0 ? _a : minValues === null || minValues === void 0 ? void 0 : minValues[0];
        const max = (_b = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.maxSliderValue) !== null && _b !== void 0 ? _b : maxValues === null || maxValues === void 0 ? void 0 : maxValues[0];
        const handleInfo = authColorVisVar
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aD)(authColorVisVar.theme, colorVisVar.stops)
            : undefined;
        if (!this.flowColorSlider ||
            (!colorVisVar && this.flowColorSlider.stops)) {
            (_c = this.flowColorSlider) === null || _c === void 0 ? void 0 : _c.destroy();
            let config = {
                min,
                max
            };
            config = Object.assign(Object.assign({}, config), handleInfo);
            config.stops = colorVisVar.stops;
            config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_4__.g)(colorVisVar.stops);
            config.labelFormatFunction = (value) => {
                return value.toFixed(config.precision);
            };
            this.flowColorSlider = new modules.ColorSlider(config);
            this.createFlowColorSliderChangeEvents();
        }
        else {
            if (((_d = this.flowColorSlider.slider) === null || _d === void 0 ? void 0 : _d.state) === "dragging") {
                return true;
            }
            let config = {
                min,
                max
            };
            config = Object.assign(Object.assign({}, config), handleInfo);
            config.stops = colorVisVar.stops;
            config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_4__.g)(colorVisVar.stops);
            this.flowColorSlider.set(config);
        }
        return (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(this.flowColorSlider);
    }
    handleInvertSlider() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        let colors = colorVisVar.stops.map((stop) => {
            return stop.color;
        });
        colors = colors.reverse();
        colorVisVar.stops.forEach((stop, idx) => {
            stop.color = colors[idx];
        });
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        this.arcgisSmartMappingFlowColorSliderChange.emit();
    }
    handleResetSlider() {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)((0,_raster_flow_761a3470_js__WEBPACK_IMPORTED_MODULE_6__.c)({ includeColorVariable: true }), this.flowItemNode).then((result) => {
            const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(layer.renderer, "color");
            const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color");
            const newColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(result.renderer, "color");
            const newAuthColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(result.renderer, "color");
            authColorVisVar.minSliderValue = newAuthColorVisVar.minSliderValue;
            authColorVisVar.maxSliderValue = newAuthColorVisVar.maxSliderValue;
            colorVisVar.stops.forEach((stop, idx) => {
                stop.value = newColorVisVar.stops[idx].value;
            });
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        }, (error) => this.arcgisSmartMappingFlowColorSliderError.emit(error));
    }
    afterFlowColorSliderCreate(node) {
        if (!this.flowColorSlider.container) {
            const divNode = document.createElement("div");
            node.append(divNode);
            this.flowColorSlider.container = divNode;
        }
    }
    createFlowColorSliderChangeEvents() {
        if (!this.flowColorSlider) {
            return;
        }
        this.flowColorSlider.on("min-change", (info) => {
            if (info.value > this.currentStopValues[0]) {
                this.flowColorSlider.stops.forEach((stop, idx) => {
                    stop.value = this.currentStopValues[idx];
                });
                this.handleMinMaxChange(this.currentStopValues[0], this.flowColorSlider.max);
            }
            else {
                this.handleMinMaxChange(info.value, this.flowColorSlider.max);
            }
        });
        this.flowColorSlider.on("max-change", (info) => {
            if (info.value < this.currentStopValues[this.currentStopValues.length - 1]) {
                this.flowColorSlider.stops.forEach((stop, idx) => {
                    stop.value = this.currentStopValues[idx];
                });
                this.handleMinMaxChange(this.flowColorSlider.min, this.currentStopValues[this.currentStopValues.length - 1]);
            }
            else {
                this.handleMinMaxChange(this.flowColorSlider.min, info.value);
            }
        });
        this.flowColorSlider.on("thumb-change", () => this.updateRendererStops(this.flowColorSlider.stops));
        this.flowColorSlider.on("thumb-drag", () => this.updateRendererStops(this.flowColorSlider.stops));
        this.flowColorSlider.on("segment-drag", () => this.updateRendererStops(this.flowColorSlider.stops));
    }
    handleMinMaxChange(min, max) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color") || {};
        authColorVisVar.minSliderValue = min;
        authColorVisVar.maxSliderValue = max;
        renderer.authoringInfo.classificationMethod = "manual";
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        this.arcgisSmartMappingFlowColorSliderChange.emit();
    }
    updateRendererStops(stops) {
        const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = layer.renderer;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        colorVisVar.stops = stops;
        colorVisVar.stops.forEach((stop, idx) => {
            this.currentStopValues[idx] = stop.value;
        });
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        this.arcgisSmartMappingFlowColorSliderChange.emit();
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingFlowColorSlider.style = arcgisSmartMappingFlowColorSliderCss;



//# sourceMappingURL=arcgis-smart-mapping-flow-color-slider.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   r: () => (/* binding */ requestWrapper)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
let _loadingTimer;
let _requestCancelled;
function startLoading(node) {
    node.loading = true;
    _requestCancelled = false;
    if (_loadingTimer) {
        clearTimeout(_loadingTimer);
    }
    _loadingTimer = setTimeout(() => {
        // took too long
        endLoading(node);
        _requestCancelled = true;
    }, 60000);
}
function endLoading(node) {
    node.loading = false;
}
function requestWrapper(request, node) {
    startLoading(node);
    return request
        .then((result) => {
        endLoading(node);
        if (!_requestCancelled) {
            return Promise.resolve(result);
        }
        else {
            return Promise.reject(new Error("timeout"));
        }
    })
        .catch((error) => {
        endLoading(node);
        return Promise.reject(error);
    });
}



//# sourceMappingURL=loading-69139907.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-flow-761a3470.js":
/*!*****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-flow-761a3470.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createFlowRendererFromExisting),
/* harmony export */   c: () => (/* binding */ createFlowRenderer),
/* harmony export */   f: () => (/* binding */ findFlowScheme)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * creates a Flow renderer with default settings
 * @param options: options
 */
function createFlowRenderer(options) {
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    return modules.RasterFlowCreator.createRenderer({
        layer,
        view: mapView,
        theme: options.flowTheme || "flow-line",
        includeColorVariable: options.includeColorVariable,
        legendOptions: options.legendOptions,
        flowRepresentation: options.flowRepresentation,
        flowScheme: options.flowScheme || findFlowScheme()
    }).then((result) => {
        if (result.layerEffect && result.layerEffect.indexOf("drop-shadow") === -1) {
            layer.effect = result.layerEffect;
        }
        result.renderer.color = result.renderer.color && (options.color || result.renderer.color);
        layer.renderer = result.renderer;
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Flow renderer with some settings from the current renderer
 * @param options: options
 */
function createFlowRendererFromExisting(options) {
    var _a;
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const renderer = layer.renderer;
    const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
    const authoringInfo = renderer.authoringInfo;
    const theme = options.flowTheme || (authoringInfo === null || authoringInfo === void 0 ? void 0 : authoringInfo.flowTheme) || "flow-line";
    return modules.RasterFlowCreator.createRenderer({
        layer,
        view: mapView,
        theme,
        includeColorVariable: (_a = options.includeColorVariable) !== null && _a !== void 0 ? _a : !!colorVisVar,
        legendOptions: options.legendOptions || (colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.legendOptions),
        flowRepresentation: options.flowRepresentation || renderer.flowRepresentation,
        // flowScheme: theme === "flow-line" ? options.flowScheme || findFlowScheme() : undefined /* bug */
        flowScheme: options.flowScheme
    }).then((result) => {
        // keep old slider min/max
        const colorAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "color");
        const newColorAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(result.renderer, "color");
        if ((colorAuthVisVar === null || colorAuthVisVar === void 0 ? void 0 : colorAuthVisVar.minSliderValue) && (colorAuthVisVar === null || colorAuthVisVar === void 0 ? void 0 : colorAuthVisVar.maxSliderValue) && newColorAuthVisVar) {
            newColorAuthVisVar.minSliderValue = colorAuthVisVar.minSliderValue;
            newColorAuthVisVar.maxSliderValue = colorAuthVisVar.maxSliderValue;
        }
        // keep old stops
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(layer.renderer, "color");
        const newColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "color");
        if (colorVisVar && newColorVisVar) {
            colorVisVar.stops.forEach((stop, idx) => {
                newColorVisVar.stops[idx].value = stop.value;
            });
        }
        // keep old single color
        result.renderer.color = result.renderer.color && (options.color || renderer.color || result.renderer.color);
        // keep old stop colors
        const scheme = options.flowScheme || findFlowScheme();
        if (scheme && colorVisVar && newColorVisVar) {
            colorVisVar.stops.forEach((stop, idx) => {
                newColorVisVar.stops[idx].color = new modules.esriColor(stop.color.toJSON());
            });
        }
        if (theme === authoringInfo.flowTheme) {
            result.renderer.flowSpeed = renderer.flowSpeed;
            result.renderer.density = renderer.density;
            result.renderer.trailLength = renderer.trailLength;
            result.renderer.trailWidth = renderer.trailWidth;
            result.renderer.trailCap = renderer.trailCap;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
function findFlowScheme() {
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const renderer = layer.renderer;
    const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
    if (!colorVisVar) {
        return null;
    }
    const colors = colorVisVar.stops.map((stop) => {
        return stop.color;
    });
    const schemes = modules.flowSchemes.getSchemes({
        basemap: mapView.map.basemap || "topo"
    });
    const allSchemes = [schemes.primaryScheme].concat(schemes.secondarySchemes);
    const matchingSchemes = [];
    allSchemes.forEach((scheme) => {
        let hasNoMatch = colors.some((color, idx) => {
            return !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a4)(scheme.colors[idx], color);
        });
        if (!hasNoMatch) {
            matchingSchemes.push(scheme);
        }
        else {
            // try flipped ramp
            scheme.colors = scheme.colors.reverse();
            hasNoMatch = colors.some((color, idx) => {
                return !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a4)(scheme.colors[idx], color);
            });
            if (!hasNoMatch) {
                matchingSchemes.push(scheme);
            }
        }
    });
    return matchingSchemes.length ? matchingSchemes[0] : null;
}



//# sourceMappingURL=raster-flow-761a3470.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,