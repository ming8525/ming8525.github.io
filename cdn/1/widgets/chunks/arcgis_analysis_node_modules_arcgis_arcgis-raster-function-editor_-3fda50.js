"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-3fda50"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.es-c65ca642.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.es-c65ca642.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "Aceptar";
const cancel = "Cancelar";
const enterURL = "Introducir URL de servicio de imágenes";
const serviceURL = "URL de servicio";
const selectRaster = "Seleccionar ráster";
const failedToLoadLayer = "Fallo al cargar la capa";
const loadingLayer = "Cargando capa";
const selectFeature = "Seleccionar capa de entidad";
const enterFURL = "Introducir URL de servicio de entidades";
const addRaster = "Agregar variable de ráster";
const addScalar = "Agregar constante";
const raster = "Calculadora ráster";
const scalar = "Escalar";
const defaultModelName = "Plantilla de función ráster";
const general = "General";
const parameters = "Parámetros";
const variables = "Variables";
const name = "Nombre";
const description = "Descripción";
const parameter = "Parámetro";
const isPublic = "IsPublic";
const isDataset = "IsDataset";
const unknownPixelType = "Desconocido";
const outputPixelType = "Tipo de píxel de salida";
const u8PixelType = "8 bits sin signo";
const s8PixelType = "8 bits con signo";
const u16PixelType = "16 bits sin signo";
const s16PixelType = "16 bits con signo";
const u32PixelType = "32 bits sin signo";
const s32PixelType = "32 bits con signo";
const f32PixelType = "32 bits flotante";
const f64PixelType = "64 bits doble";
const properties = "Propiedades";
const multidimensionalRules = "Reglas multidimensionales";
const matchVariables = "Reasociar variables";
const unionDimensions = "Combinar dimensiones";
const rasterFunctionEditor = {
	invalidRFTMessage: "La plantilla de función ráster no es válida.",
	rfxArgsEditor: {
		outputRaster: "Ráster de salida",
		raster: "Calculadora ráster",
		unsupportedDataTypeWarning: "Los siguientes argumentos no se visualizan, ya que no se admiten actualmente.",
		unsupportedFunction: "Contiene funciones ráster actualmente no admitidas."
	},
	rfxRasterInput: {
		selectLayer: "Seleccionar capa",
		browseLayers: "Examinar capas",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Método",
		bandLabel: "Banda",
		combinationLabel: "Combinación"
	},
	rfxRemapGrid: {
		minimum: "Mínimo",
		maximum: "Máximo",
		output: "Salida",
		noData: "NoData",
		remapValuesLabel: "Nueva representación cartográfica de valores"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Variables de ráster",
		deleteSelectedVars: "Eliminar variables seleccionadas"
	},
	rfxClippingGeometry: {
		clippingLayer: "Capa de recorte",
		clippingRaster: "Ráster de clipping",
		clippingGeometry: "Geometría de recorte",
		customExtent: "Extensión personalizada",
		outputExtent: "Extensión de salida",
		currentExtent: "Extensión de mapa actual",
		drawLabel: "Dibujar"
	},
	rfxCustomExtent: {
		top: "Superior",
		right: "Derecha",
		bottom: "Inferior",
		left: "Izquierda"
	},
	rfxRasterArrayEditor: {
		moveUp: "Mover hacia arriba",
		moveDown: "Mover hacia abajo",
		remove: "Eliminar"
	},
	rfxStatisticsGrid: {
		stdDev: "Desviación estándar",
		min: "Mín.",
		max: "Máx.",
		mean: "Valor medio"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Tabla de sumas ponderadas",
		id: "Id.",
		layer: "Capa",
		field: "Campo",
		weight: "Peso",
		value: "Valor",
		selectLayer: "Seleccionar capa"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Tabla Superposición ponderada",
		id: "Id.",
		layer: "Capa",
		field: "Campo",
		influence: "Influencia",
		sumOfInfluence: "Suma de influencia",
		value: "Valor",
		remapTable: "Volver a representar la tabla",
		scale: "Escala",
		scales: "Escalas",
		selectRaster: "Seleccionar ráster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Buscar una capa de entidades",
		addPointLayer: "Buscar una capa de puntos"
	},
	rfxFieldSelect: {
		value: "Valor",
		count: "Recuento"
	},
	rfxAttributeTable: {
		tableType: "Tipo de tabla",
		manual: "Manual",
		external: "Externo",
		minVal: "Valor mínimo",
		maxVal: "Valor Máximo",
		baseClassName: "Nombre base de clase",
		colorScheme: "Esquema de colores",
		defaultClassName: "Etiqueta_",
		generateTable: "Generar tabla",
		browseTable: "Tabla de explorador",
		value: "Valor",
		classname: "ClassName",
		color: "Color"
	},
	rfxFieldNumberSwitchable: {
		number: "Numérico",
		field: "Campo",
		string: "Cadena",
		linearUnit: "Unidad lineal"
	},
	rfxPropertySet: {
		name: "Nombre",
		value: "Valor"
	},
	rfxConversionGrid: {
		size: "Tamaño"
	},
	rfxTransposeBit: {
		bitPattern: "Patrón de bits",
		outputBit: "Bit de salida",
		inputBit: "Bit de entrada"
	},
	rfxSpatialReference: {
		placeHolder: "Refinar por palabra clave",
		coordinateSystem: "Sistema de coordenadas",
		gcs: "Sistema de coordenadas geográficas",
		pcs: "Sistema de coordenadas proyectadas",
		vcs: "Sistema de coordenadas vertical"
	}
};
const rfxLicenseInfo = "Esta plantilla de función ráster se puede usar para procesar sus imágenes mediante ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "Arcocoseno hiperbólico (ACosH)",
		aCosHSnip: "Calcula el coseno inverso hiperbólico de celdas en un ráster.",
		aCosHDesc: "La función calcula el coseno inverso hiperbólico de los píxeles de un ráster.",
		aCosName: "Arcocoseno (ACos)",
		aCosSnip: "Calcula el coseno inverso de los píxeles de un ráster.",
		aCosDesc: "Esta función ráster calcula el coseno inverso de las celdas de un ráster. En matemáticas, todas las funciones trigonométricas tienen un rango definido de valores de entrada válidos, llamado dominio. Los valores de salida de cada función también tienen un rango definido. Para esta herramienta, el dominio es [-1, 1] y el rango es [0, pi].",
		aSinHName: "Arcoseno hiperbólico (ASinH)",
		aSinHSnip: "Calcula el seno inverso hiperbólico de celdas en un ráster.",
		aSinHDesc: "La función calcula el arcoseno inverso hiperbólico de los píxeles de un ráster.",
		aSinName: "Arcoseno (ASin)",
		aSinSnip: "Calcula el seno inverso de celdas en un ráster.",
		aSinDesc: "La función calcula el seno inverso de los píxeles de un ráster.",
		aTan2Name: "Arcotangente (x/y) (ATan2)",
		aTan2Snip: "Calcula la tangente inversa (basada en x,y) de celdas en un ráster.",
		aTan2Desc: "La función calcula la tangente inversa (basada en x,y) de los píxeles de un ráster.",
		aTanHName: "Arcotangente hiperbólica (ATanH)",
		aTanHSnip: "Calcula la tangente inversa hiperbólica de celdas en un ráster.",
		aTanHDesc: "La función calcula la tangente inversa hiperbólica de los píxeles de un ráster.",
		aTanName: "Arcotangente (ATan)",
		aTanSnip: "Calcula la tangente inversa de celdas en un ráster.",
		aTanDesc: "La función calcula la tangente inversa de los píxeles de un ráster.",
		absName: "Valor absoluto",
		absSnip: "Calcula el valor absoluto de las celdas de un ráster.",
		absDesc: "La función Abs calcula el valor absoluto de los píxeles de un ráster.",
		reflectanceName: "Reflectancia aparente",
		reflectanceSnip: "Convierte las imágenes sin procesar en valores de Parte superior de la atmósfera teniendo en cuenta características del sensor, la posición del sol y el momento de captura.",
		reflectanceDesc: "Esta función ajusta los valores de número digital (DN) de brillo de la imagen para algunos de los sensores de satélites. Los ajustes se basan en la elevación del sol, la fecha de adquisición y las propiedades del sensor para configurar la ganancia y el sesgo de cada banda. Esta función se usa para ajustar los valores de reflectancia o brillo de algunas imágenes de satélite en función de la iluminación de la escena y de los ajustes de ganancia del sensor. Las imágenes se ajustan a una condición de iluminación teóricamente común, por lo que debería haber menos variación entre las escenas de diferentes fechas y de diferentes sensores. Esto puede ser útil para la clasificación de imágenes, el balance de color y la creación de mosaicos. Esta función solo se puede usar con imágenes concretas. Los sensores válidos son Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 y Pleiades.<div><br/>La función realiza dos correcciones. La primera se basa en la configuración de ganancia. Los valores de brillo originales se vuelven a crear a partir de los valores de la imagen al revertir las ecuaciones de ganancia. La segunda corrección tiene que ver con las diferencias en el ángulo del sol y el brillo. Los valores de brillo originales se ajustan a una condición de iluminación común mediante la normalización de las escenas capturadas en condiciones de iluminación variables. En general, mientras que el tipo de datos de imagen de salida coincide con el de entrada, los valores de salida son más bajos que los de entrada y están limitados al rango de datos válido.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Calcula estadísticas arg, como Arg Max, Arg Min, Arg Medio y Duración.",
		argStatisticsDesc: "Esta función computa estadísticas arg. En la función ArgStatistics existen cuatro métodos: ArgMax, ArgMin, ArgMedian y Duration.",
		arithmeticName: "Aritmética",
		arithmeticSnip: "Realiza una operación aritmética entre dos rásteres o un ráster y un escalar.",
		arithmeticDesc: "La función aritmética realiza una operación aritmética entre dos rásteres o un ráster y un escalar y viceversa.",
		aspectSlopeName: "Orientación-pendiente",
		aspectSlopeSnip: "Crea un ráster que muestra al mismo tiempo la orientación (dirección) y la pendiente (inclinación) de una superficie continua, representado en un modelo digital de elevación.",
		aspectSlopeDesc: "La función Pendiente de orientación crea una capa ráster que visualiza simultáneamente la orientación y la pendiente de una superficie. La orientación identifica la dirección de la pendiente descendente de la tasa de cambio máxima en un valor desde cada píxel hacia sus vecinos. La orientación puede pensarse como la dirección de la pendiente. Los valores del ráster de salida serán la dirección de brújula de la orientación, representada por un tono (color). La pendiente representa la tasa de cambio de elevación para cada píxel de modelo digital de elevación (DEM). La pendiente representa la inclinación de la superficie y se simboliza en tres clases que se muestran mediante la saturación (viveza) del color.<div><br/>Los valores de píxel del ráster de orientación-pendiente de salida reflejan una combinación de la orientación y la pendiente. Los píxeles con valores inferiores a 20 se consideran planos y se muestran en gris. Los valores de orientación-pendiente de 21 y superiores se mostrarán con saturaciones variables, de la siguiente forma: 21 a 30: —saturación de pendiente baja, 31 a 40: —saturación de pendiente media, 41 y superiores: —saturación de pendiente alta</div>",
		aspectName: "Orientación",
		aspectSnip: "Muestra la dirección de un píxel, donde 0 es el norte y los ángulos aumentan en el sentido de las agujas del reloj hasta 360.",
		aspectDesc: "La función Orientación identifica la dirección de la pendiente descendente de la tasa de cambio máxima en un valor desde cada celda hacia sus vecinas. La orientación puede pensarse como la dirección de la pendiente. Los valores del ráster de salida serán la dirección de brújula de la orientación.<div><br/>La entrada para esta función es el ráster de entrada. La función Orientación se aplica frecuentemente a un modelo digital de elevación (DEM). De forma predeterminada, la orientación aparece como una imagen en escala de grises. Puede agregar la función Mapa de color para especificar una combinación de colores determinada o permitir a la persona que visualiza el mosaico modificar la simbología con su propio esquema de colores.</div>",
		tableName: "Tabla de atributos",
		tableSnip: "Utiliza una tabla para dar nombre y simbolizar los valores de un dataset. Las columnas de la tabla están delimitadas por comas: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "La función Tabla de atributos le permite definir una tabla de atributos para simbolizar un dataset ráster o dataset de mosaico de banda única. <div><br/>Es útil cuando desea presentar imágenes que se han sometido a una clasificación del uso del suelo, por ejemplo, suelo del bosque, pantano, suelos de cultivo y urbano. Además, si su tabla contiene campos denominados rojo, verde y azul, los valores dentro de esos campos se utilizarán como un mapa de color al representar en pantalla la imagen.</div>",
		bandArithmeticName: "Aritmética de banda",
		bandArithmeticSnip: "Calcula índices usando fórmulas predefinidas o una expresión definida por el usuario.",
		bandArithmeticDesc: "La función Aritmética de banda realiza una operación aritmética en las bandas de un dataset ráster. Puede elegir algoritmos predefinidos o puede introducir su propia fórmula de línea única. Los operadores permitidos son -,+,/,* y unario -.",
		thresholdName: "Definición de umbral binario",
		thresholdSnip: "Organiza datos continuos en los valores de primer plano y de fondo minimizando la covarianza entre las dos clases.",
		thresholdDesc: "Cuando un dataset ráster tiene una distribución bimodal, esta función crea un nuevo ráster que divide los datos en dos clases distintas. Crea una clase de valor bajo, que se muestra con píxeles negros, y una clase de valor alto, que se muestra con píxeles blancos.",
		bitwiseAndName: "Bitwise And",
		bitwiseAndSnip: "Realiza una operación Bitwise And (Y bit a bit) sobre los valores binarios de dos rásteres de entrada.",
		bitwiseAndDesc: "Bitwise And realiza la operación Bitwise And (Y bit a bit) sobre los valores binarios de dos rásteres de entrada.",
		bitwiseLeftShiftName: "Bitwise Left Shift",
		bitwiseLeftShiftSnip: "Realiza una operación del método Bitwise Left Shift sobre los valores binarios de dos rásteres de entrada.",
		bitwiseLeftShiftDesc: "Bitwise Left Shift realiza una operación del método Bitwise Left Shift sobre los valores binarios de dos rásteres de entrada.",
		bitwiseNotName: "Bitwise Not",
		bitwiseNotSnip: "Realiza una operación Bitwise Not (complemento) sobre valores binarios de dos rásteres de entrada.",
		bitwiseNotDesc: "La función realiza una operación Bitwise Not (complemento) sobre el valor binario de un ráster de entrada.",
		bitwiseOrName: "Bitwise Or",
		bitwiseOrSnip: "Realiza una operación Bitwise Or sobre los valores binarios de dos rásteres de entrada.",
		bitwiseOrDesc: "La función realiza una operación Bitwise Or sobre los valores binarios de dos rásteres de entrada. ",
		bitwiseRightShiftName: "Bitwise Right Shift",
		bitwiseRightShiftSnip: "Realiza una operación Bitwise Right Shift sobre los valores binarios de dos rásteres de entrada.",
		bitwiseRightShiftDesc: "La función realiza una operación Bitwise Right Shift sobre los valores binarios de dos rásteres de entrada.",
		bitwiseXorName: "Bitwise XOr",
		bitwiseXorSnip: "Realiza una operación Bitwise eXclusive Or sobre los valores binarios de dos rásteres de entrada.",
		bitwiseXorDesc: "La función realiza una operación Bitwise eXclusive Or sobre los valores binarios de dos rásteres de entrada.",
		booleanAndName: "Booleana And",
		booleanAndSnip: "Realiza una operación Booleana And sobre los valores de celda de dos rásteres de entrada. Si los dos valores de entrada son verdaderos (distintos de cero), el valor de salida es 1. Si una o ambas entradas son falsas (cero), la salida es 0.",
		booleanAndDesc: "La función realiza una operación Boolean And sobre los valores de los píxeles de dos entradas. Si los dos valores de entrada son verdaderos (distintos de cero), el valor de salida es 1. Si uno o los dos valores de entrada son falsos (cero), el valor de salida es 0. ",
		booleanNotName: "Booleana Not",
		booleanNotSnip: "Realiza una operación booleana Not (complementario) sobre los valores de celda del ráster de entrada. Si los valores de entrada son verdaderos (distintos de cero), el valor de salida es 0. Si los valores de entrada son falsos (cero), la salida es 1.",
		booleanNotDesc: "La función realiza una operación Booleana Not (complementaria) sobre los valores de los píxeles del ráster de entrada. Si los valores de entrada son verdaderos (distintos de cero), el valor de salida es 0. Si los valores de entrada son falsos (cero), el valor de salida es 1.",
		booleanOrName: "Booleana Or",
		booleanOrSnip: "Realiza una operación Booleana Or sobre los valores de las celdas de dos rásteres de entrada. Si uno o ambos valores de entrada son verdaderos (distintos de cero), el valor de salida es 1. Si los dos valores de entrada son falsos (cero), la salida es 0.",
		booleanOrDesc: "La función realiza una operación Booleana Or sobre los valores de las celdas de dos rásteres de entrada. Si uno o los dos valores de entrada son verdaderos (distintos de cero), el valor de salida es 1. Si los dos valores de entrada son falsos (cero), el valor de salida es 0.",
		booleanXorName: "Booleana XOr",
		booleanXorSnip: "Realiza una operación booleana Or exclusiva sobre los valores de celda de dos rásteres de entrada. Si un valor de entrada es verdadero (distinto de cero) y el otro es falso (cero), la salida es 1. Si los dos valores de entrada son verdaderos o los dos son falsos, la salida es 0.",
		booleanXorDesc: "La función realiza una operación booleana Or exclusiva sobre los valores de celda de dos rásteres de entrada. Si un valor de entrada es verdadero (distinto de cero) y el otro valor es falso (cero), el valor de salida es 1. Si los dos valores de entrada son verdaderos, o si los dos son falsos, el valor de salida es 0.",
		bufferedRasterName: "Zona de influencia",
		bufferedRasterSnip: "Crea una zona de influencia alrededor de los últimos bloques de píxeles a los cuales se ha accedido.",
		bufferedRasterDesc: "La función En zona de influencia se utiliza para optimizar el rendimiento de cadenas de funciones complejas. Almacena en la memoria la salida de la parte de la cadena de funciones que la precede. <div><br/>Inserte esta función en el Editor de función donde desee almacenar la salida.</div>",
		rasterCalculatorName: "Calculadora",
		rasterCalculatorSnip: "Calcula un ráster a partir de una expresión matemática basada en rásteres.",
		rasterCalculatorDesc: "La función Calculadora permite crear y ejecutar expresiones e incorporarlas en cadenas de funciones.",
		cellStatisticsName: "Estadísticas de celdas",
		cellStatisticsSnip: "Calcula una estadística por celda de rásteres múltiples. Las estadísticas disponibles son mayoría, máximo, valor medio, mediana, mínimo, minoría, percentil, rango, desviación estándar, suma y variedad.",
		cellStatisticsDesc: "Esta función calcula las estadísticas de varios rásteres píxel por píxel. Las estadísticas disponibles son mayoría, máximo, valor medio, mediana, mínimo, minoría, rango, desviación estándar, suma y variedad.",
		classifyName: "Clasificar",
		classifySnip: "Asigna cada píxel a una clase. Incorpore datos secundarios, por ejemplo, una imagen segmentada.",
		classifyDesc: "Esta función ráster clasifica un dataset ráster a partir de un archivo de definición de clasificador de Esri (.ecd) y de entradas de dataset ráster. El archivo .ecd utilizado en la función Clasificar contiene toda la información necesaria para un dataset y un clasificador concretos, y se genera con herramientas de preparación de clasificación, por ejemplo, las herramientas Preparar clasificador de máquina de vectores de soporte o Preparar clasificador de árboles aleatorios.",
		clipName: "Recortar",
		clipSnip: "Establece la extensión de un ráster mediante coordenadas u otro dataset.",
		clipDesc: "Esta función recorta un ráster utilizando una forma rectangular según la extensión definida o recorta un ráster según la forma de una clase de entidad poligonal de entrada. La forma que define el recorte puede exceder la extensión del ráster o sobresalir de un área dentro del ráster.",
		colorspaceConversionName: "Conversión de modelo de color",
		colorspaceConversionSnip: "Convierte un ráster de RGB a HSV y viceversa.",
		colorspaceConversionDesc: "La función Conversión de modelo de color convierte el modelo de color de una imagen de tono, saturación y valor (HSV) a rojo, verde y azul (RGB) o viceversa.<div><br/>Esta función se puede usar en un dataset de mosaico.</div>",
		colormapToRGBName: "Mapa de color a RGB",
		colormapToRGBSnip: "Convierte un ráster de banda simple con un mapa de color en un ráster de banda triple (rojo, verde y azul).",
		colormapToRGBDesc: "Esta función convierte un ráster de banda simple con un mapa de color en un ráster de banda triple (rojo, verde y azul).<div><br/>Esta función resulta útil cuando se necesita crear un ráster de tres bandas a partir de un ráster de una sola banda que tiene un mapa de color asociado. Los valores del mapa de color se usan para crear las distintas bandas: roja, verde y azul. Esta función se puede usar en un dataset de mosaico.</div>",
		colormapName: "Mapa de color",
		colormapSnip: "Cambia los valores de píxel para mostrar los datos ráster como una escala de grises o como una imagen roja, verde, azul (RGB), basándose en un mapa de color o en una rampa de color.",
		colormapDesc: "La función Mapa de color es un tipo de renderizador de datos ráster. Transforma los valores de píxel para mostrar datos ráster como escala de grises o imagen de color RGB basada en un esquema de color o colores específicos de un archivo de mapa de color. Puede utilizar un mapa de color para representar datos analizados, por ejemplo, una imagen clasificada, o al mostrar un mapa topográfico (o una imagen digitalizada en color indexada).<div><br/>Los mapas de color contienen un conjunto de valores que se asocian con colores utilizados para visualizar un ráster de una única banda de forma consistente con los mismos colores. Cada valor de píxel está asociado a un color, que se define como un conjunto de valores RGB. Los mapas de color tienen la capacidad de admitir cualquier profundidad de bit, excepto el punto flotante. También pueden admitir los valores positivos y negativos, y pueden contener valores asignados de color que faltan. Al visualizar un dataset con un mapa de colores que contiene valores perdidos, los píxeles de dichos valores no se visualizan.</div>",
		complexName: "Complejo",
		complexSnip: "Extrae la magnitud de números complejos.",
		complexDesc: "Esta función calcula la magnitud de los valores complejos.<div><br/>Esta función se utiliza típicamente con las imágenes de radar que tienen un tipo de datos complejo. Se puede usar en un dataset de mosaico.</div>",
		compositeBandName: "Bandas compuestas",
		compositeBandSnip: "Combina varios datasets en un ráster multibanda.",
		compositeBandDesc: "La función Bandas compuestas permite combinar rásteres para crear una imagen multibanda.",
		conName: "Evaluación condicional",
		conSnip: "Realiza una operación If, Then, Else condicional. Cuando se utiliza un operador condicional, normalmente se necesitan dos o más funciones encadenadas, en la que la primera función indica los criterios y la segunda función es el operador condicional que usa los criterios y dicta cuáles deberían ser las salidas verdaderas y falsas.",
		conDesc: "La función Con define los píxeles del ráster de salida en función de una evaluación ifelse de cada píxel de entrada. Devuelve los valores de píxel del Ráster verdadero si la evaluación es True (1) o devuelve los valores de píxel del Ráster falso si la evaluación condicional es False (0). Este criterio viene determinado por la salida de una función matemática lógica, que será el Ráster de entrada.",
		constantName: "Constante",
		constantSnip: "Crea un ráster virtual con un valor de píxel único.",
		constantDesc: "Esta función crea un ráster virtual con un único valor de píxel que se puede utilizar en plantillas de función ráster y para procesar un dataset de mosaico.<div><br/>El valor de constante se utiliza para cada valor de píxel en el ráster.</div>",
		contourName: "Curvas de nivel",
		contourSnip: "Crea líneas de curvas de nivel.",
		contourDesc: "La función Curvas de nivel genera líneas de curvas de nivel uniendo puntos con la misma elevación a partir de un dataset de elevación ráster. Los contornos son isolíneas creadas como rásteres para la visualización. Las siguientes características clave hacen que esta función sea potente: las curvas de nivel se generan de forma rápida y dinámica en datasets muy grandes como, por ejemplo, la World Elevation; el intervalo de curvas de nivel se pueden suavizar para proporcionar una apariencia más agradable cartográficamente, manteniendo la precisión de las curvas de nivel; se proporciona control dinámico sobre el intervalo de las curvas de nivel; entre las opciones de salida se incluyen líneas de curvas de nivel, curvas de nivel de índice y curvas de nivel rellenas.<div><br/>La creación de una capa de curvas de nivel como un producto ráster resulta muy valioso para una amplia gama de aplicaciones, dado que las curvas de nivel se pueden superponer en un mapa y proporcionar información sobre el terreno sin ocultar los datos subyacentes. Resultan útiles en aplicaciones relacionadas con la ingeniería, la agricultura y la gestión de aguas.</div>",
		contrastBrightnessName: "Contraste y brillo",
		contrastBrightnessSnip: "Ajusta el contraste y brillo de un ráster.",
		contrastBrightnessDesc: "La función Brillo y contraste mejora la apariencia de los datos ráster al modificar el brillo y el contraste dentro de la imagen. El brillo aumenta la luminosidad total de la imagen, por ejemplo, aclarando los colores oscuros y blanqueando los claros, mientras que el contraste ajusta la diferencia entre los colores más claros y los más oscuros.<div><br/>Al utilizar esta función se alteran los valores de píxel. Por lo tanto, esta función se debe utilizar cuando desee mejorar la apariencia de los datos y no debe utilizarla si desea usar los datos como parte de un análisis que requerirá los valores de píxel originales. Esta función resulta útil a la hora de publicar los datos como un servicio de imágenes que se pueden utilizar en aplicaciones, sin poder alterar el contraste ni el brillo de las imágenes, o para garantizar que se muestren utilizando sus ajustes preferidos.</div>",
		convolutionName: "Convolución",
		convolutionSnip: "Aplica un filtro para mejorar la nitidez, desenfocar, detectar los bordes, suavizar, o bien un gradiente a través de un ráster.",
		convolutionDesc: "La función de convolución realiza el filtrado de los valores de píxel de una imagen, lo que se puede utilizar para aumentar su nitidez, difuminarla, detectar sus ejes u otros realces basados en el kernel. Los filtros se utilizan para mejorar la calidad de la imagen de ráster al eliminar datos falsos o mejorar las entidades de los datos. Estos filtros de convolución se aplican a un kernel móvil o superpuesto (ventana o vecindad), como 3 x 3. Los filtros de convolución actúan calculando el valor de píxel en función de la ponderación de sus vecinos.",
		corridorName: "Corredor",
		corridorSnip: "Calcula la suma de los costes acumulativos de dos rásteres acumulativos de entrada.",
		corridorDesc: "La función Corredor calcula la suma de los costes acumulativos de dos rásteres de costes acumulativos de entrada. Aunque para la entrada se pueden utilizar dos rásteres cualquiera, para obtener un resultado significativo deben ser rásteres de coste acumulativo de salida sin alterar. El orden de las dos entradas es irrelevante.",
		cosHName: "Coseno hiperbólico (CosH)",
		cosHSnip: "Calcula el coseno hiperbólico de celdas en un ráster.",
		cosHDesc: "La función calcula el coseno hiperbólico de los píxeles de un ráster.",
		cosName: "Coseno (Cos)",
		cosSnip: "Calcula el coseno de una celda de un ráster.",
		cosDesc: "La función calcula el coseno de los píxeles de un ráster.",
		costAllocationName: "Asignación de costes",
		costAllocationSnip: "Calcula, para cada celda, el origen de menor coste en función del menor coste acumulativo por una superficie de coste.",
		costAllocationDesc: "La función Asignación de costes calcula, para cada celda, el origen de menor coste en función del menor coste acumulativo por una superficie de coste.",
		costBackLinkName: "Vínculo de menor coste",
		costBackLinkSnip: "Define el vecino que es la celda siguiente en la ruta de menor coste acumulativo al origen de menor coste.",
		costBackLinkDesc: "La función Vínculo de menor coste define el vecino que es la celda siguiente en la ruta de menor coste acumulativo al origen de menor coste.<div><br/>El ráster de vínculo de menor coste contiene valores de cero a ocho que definen la dirección o identifican la siguiente celda vecina (la celda que sigue) a lo largo de la ruta con menor coste acumulativo desde una celda para llegar al origen de menor coste. Si la ruta es pasar al elemento próximo derecho, se le asignará a la celda el valor 1, 2 para la celda diagonal derecha inferior y continuando en el sentido de las agujas del reloj. El valor 0 se reserva para las celdas de origen.</div>",
		costDistanceName: "Coste de distancia",
		costDistanceSnip: "Calcula el menor coste de distancia acumulativo para cada celda desde o hasta el origen de menor coste por una superficie de coste.",
		costDistanceDesc: "La función Coste de distancia calcula el menor coste-distancia acumulativo para cada celda desde o hasta el origen de menor coste por una superficie de coste.",
		costPathName: "Ruta de coste",
		costPathSnip: "Calcula la ruta de menor coste desde un origen a su destino.",
		costPathDesc: "La función global Ruta de coste calcula la ruta de menor coste desde un origen a un destino.<div><br/>Esta función produce un ráster de salida que registra la ruta o las rutas de menor coste desde las ubicaciones seleccionadas hasta la celda de origen más cercana definida dentro de la superficie de coste acumulativo, en términos de coste-distancia.</div>",
		curvatureName: "Curvatura",
		curvatureSnip: "Calcula la curvatura de una superficie de ráster e incluye, opcionalmente, la curvatura del perfil y del plano.",
		curvatureDesc: "La función de curvatura muestra la forma o la curvatura de la pendiente. Una parte de la superficie puede ser cóncava o convexa; eso se puede comprobar consultando el valor de la curvatura. La curvatura se obtiene calculando la derivada segunda de la superficie.<div><br/>La salida de la función de curvatura se puede utilizar para describir las características físicas de una cuenca de drenaje para intentar entender los procesos de erosión y escorrentía. El valor de la curvatura se puede utilizar para buscar patrones de erosión del suelo, así como la distribución del agua en la tierra. La curvatura del perfil afecta la aceleración y desaceleración del flujo y, por lo tanto, influye en la erosión y la sedimentación. La curvatura de la plataforma influye en la convergencia y divergencia del flujo.</div>",
		divideName: "División",
		divideSnip: "Divide los valores de dos rásteres celda por celda.",
		divideDesc: "La función Dividir divide los valores de dos rásteres píxel por píxel.",
		elevationVoidFillName: "Relleno de vacío de elevación",
		elevationVoidFillSnip: "Crea píxeles donde hay agujeros dentro de los datos de elevación.",
		elevationVoidFillDesc: "La función de relleno de vacío de elevación se utiliza para crear píxeles donde existen agujeros en la elevación.<div><br/>Los vacíos se producen cuando no hay puntos capturados dentro del área representada por un píxel en el ráster resultante. Los vacíos a menudo se ocasionan por masas de agua, por la selección de tipos de clase o por exclusión. El llenado de vacío se usa más comúnmente cuando se genera una superficie de tierra.</div>",
		equalToName: "Igual a",
		equalToSnip: "Realiza una operación relacional de igualdad sobre dos entradas en una base de celda a celda. Devuelve un 1 para las celdas donde el primer ráster es igual al segundo ráster y un 0 para las celdas donde no lo es.",
		equalToDesc: "La función realiza una operación Igual a en dos rásteres píxel por píxel. Devuelve un valor de 1 para los píxeles en los que el primer ráster es igual al segundo ráster, y un valor de 0 para los píxeles en los que los rásteres no son iguales.",
		eucAllocationName: "Asignación euclidiana",
		eucAllocationSnip: "Calcula, para cada celda, el origen más cercano según la distancia euclidiana.",
		eucAllocationDesc: "La función Asignación euclidiana calcula, para cada celda, el origen más cercano según la distancia euclidiana.",
		eucDirectionName: "Dirección euclidiana",
		eucDirectionSnip: "Calcula, para cada celda, la dirección en grados hacia el origen más cercano.",
		eucDirectionDesc: "La función Dirección euclidiana calcula, para cada celda, la dirección en grados hacia el origen más cercano. <div><br/>La dirección se calcula desde el centro de cada celda hasta el centro de la celda de origen que está más cerca. El rango de valores es de 0 grados hasta 360 grados, con el 0 reservado para las celdas de origen. Hacia el este (derecha) es 90 y los valores aumentan en el sentido de las agujas del reloj (180 es sur, 270 es oeste y 360 es norte).</div>",
		eucDistanceName: "Distancia euclidiana",
		eucDistanceSnip: "Calcula, para cada celda, la distancia euclidiana hasta el origen más cercano.",
		eucDistanceDesc: "La función Distancia euclidiana calcula, para cada celda, la distancia euclidiana hasta el origen más cercano.",
		exp10Name: "Exponencial en base 10 (Exp10)",
		exp10Snip: "Calcula el exponencial en base 10 de las celdas de un ráster.",
		exp10Desc: "La función Exp 10 calcula el exponencial en base 10 de los píxeles de un ráster.",
		exp2Name: "Exponencial en base 2 (Exp2)",
		exp2Snip: "Calcula el exponencial en base 2 de las celdas de un ráster.",
		exp2Desc: "Esta función calcula el exponencial en base 2 de los píxeles de un ráster.",
		expName: "Exponencial en base e (Exp)",
		expSnip: "Calcula el exponencial en base e de las celdas de un ráster.",
		expDesc: "Esta función calcula el exponencial en base e de los píxeles de un ráster.",
		extractBandName: "Extraer bandas",
		extractBandSnip: "Especifica las bandas con las que se va a trabajar al usar datasets multibanda.",
		extractBandDesc: " La función Extraer bandas permite extraer una o varias bandas de un dataset ráster multibanda o reordenar sus bandas.<div><br/>Puede utilizar la función Extraer bandas antes de otras funciones, como Aritmética, para controlar las bandas que se utilizan como entrada en la siguiente función.</div>",
		fillName: "Relleno",
		fillSnip: "Rellena hendiduras en una superficie de ráster para quitar pequeñas imperfecciones en los datos.",
		fillDesc: "La función global Relleno localiza y rellena los sumideros y picos de un ráster de superficie de elevación para eliminar las pequeñas imperfecciones de los datos. La función rellena un proceso iterativo hasta que todos los sumideros quedan rellenos dentro del Límite Z especificado.<div><br/>Cuando se crea una superficie de elevación con las herramientas de Representación cartográfica de ortofotos o con otros medios, a menudo se producen errores pequeños, pero significativos, en forma de sumideros y picos en los datos. En fotogrametría, los sumideros y picos a menudo se conocen como agujeros y picos. Dado que los datos de superficie a menudo se usan en el modelado, como el modelado hidrológico, es importante corregir estos errores de sumidero y pico de forma consistente con los datos circundantes.</div>",
		floatName: "Flotante",
		floatSnip: "Convierte el valor de cada celda de un ráster en una representación de punto flotante.",
		floatDesc: "La función Flotante convierte el valor de píxel de un ráster en una representación con punto flotante.",
		flowAccumulationName: "Acumulación de flujo",
		flowAccumulationSnip: "Crea un ráster de flujo acumulado en cada celda. Opcionalmente, puede aplicar un factor de peso.",
		flowAccumulationDesc: "La función global Acumulación de flujo crea un ráster del flujo acumulado para cada píxel, determinada al acumular el peso de todos los píxeles que fluyen hacia cada píxel descendente. Si no se indica un ráster de peso, se aplica un peso de 1 a cada píxel, y el valor de los píxeles del ráster de salida es el número de píxeles que fluyen en cada píxel.<div><br/>Los píxeles de salida con una acumulación de flujo alta son áreas de flujo concentrado y se pueden utilizar para identificar canales de curso de agua. Los píxeles de salida con una acumulación de flujo cero son las alturas topográficas locales y se pueden utilizar para identificar crestas.</div>",
		flowDirectionName: "Dirección de flujo",
		flowDirectionSnip: "Crea un ráster de dirección de flujo desde cada celda hasta su vecina con la pendiente descendente más empinada.",
		flowDirectionDesc: "Una de las claves para derivar características hidrológicas de una superficie es la capacidad de determinar la dirección de flujo de cada píxel del ráster. La función ráster Dirección de flujo toma una superficie como entrada y crea un ráster de dirección de flujo desde cada píxel hasta su vecino con la pendiente descendente más empinada. La función Dirección de flujo admite tres métodos de modelado de flujo: D8 (ocho direcciones), Dirección del flujo múltiple (MFD) y D-Infinity (DINF). ",
		flowDistanceName: "Distancia de flujo",
		flowDistanceSnip: "Computa, para cada celda, la distancia horizontal o vertical mínima en una pendiente descendente hasta varias celdas de un curso de agua o un río hacia el que fluyen.",
		flowDistanceDesc: "Para cada píxel, la función calcula la distancia horizontal o vertical mínima en pendiente descendente al píxel o los píxeles del río o curso de agua en el que fluyen. Si se proporciona un ráster de dirección de flujo opcional, las direcciones de pendiente descendente se limitarán a aquellas definidas por el ráster de dirección del flujo de entrada. La salida es un ráster de distancia de flujo.",
		focalName: "Estadísticas focalizadas",
		focalSnip: "Calcula las estadísticas focales para cada píxel de una imagen basándose en una vecindad focal definida.",
		focalDesc: "La función Estadísticas focalizadas calcula las estadísticas focales para cada píxel de una imagen basándose en una vecindad focal definida.",
		geometricName: "Geométrica",
		geometricSnip: "Aumenta la exactitud de posición de un dataset teniendo en cuenta la elevación.",
		geometricDesc: "La función Geométrica genera una imagen ortorrectificada basada en una definición de sensor y un modelo de terreno. Aumenta la exactitud de posición de un dataset teniendo en cuenta la elevación.",
		grayscaleName: "Escala de grises",
		grayscaleSnip: "Convierte una imagen multibanda en una imagen en escala de grises de banda única.",
		grayscaleDesc: "Esta función convierte una imagen multibanda en una imagen en escala de grises de banda única.<div><br/>Esta función aplica los pesos especificados a cada una de las bandas de entrada y normaliza la imagen de salida. Los pesos se aplican a menudo porque algunas bandas tienen una importancia variable en función de la aplicación. Por ejemplo, la banda azul a menudo contiene más ruido que otras bandas.</div>",
		greaterThanEqualName: "Mayor o igual que",
		greaterThanEqualSnip: "Realiza una operación relacional mayor que sobre dos entradas en una base de celda a celda. Devuelve 1 para las celdas donde el primer ráster es mayor o igual que el segundo ráster y 0 si no lo es.",
		greaterThanEqualDesc: "La función realiza una operación relacional Mayor o igual que sobre dos entradas píxel por píxel. Devuelve un valor de 1 para los píxeles en los que el primer ráster es mayor o igual que el segundo ráster, y un valor de 0 para los píxeles en los que el primer ráster no es mayor ni igual que el segundo ráster.",
		greaterThanName: "Mayor que",
		greaterThanSnip: "Realiza una operación relacional mayor que sobre dos entradas en una base de celda a celda. Devuelve 1 para las celdas donde el primer ráster es mayor que el segundo ráster y 0 para las celdas si no lo es.",
		greaterThanDesc: "La función realiza una operación relacional Mayor que sobre dos entradas píxel por píxel. Devuelve un valor de 1 para los píxeles en los que el primer ráster es mayor que el segundo ráster, y un valor de 0 para los píxeles en los que el primer ráster no es mayor que el segundo ráster.",
		heatIndexName: "Índice de calor",
		heatIndexSnip: "Combina la temperatura ambiente del aire y la humedad relativa para devolver la sensación térmica.",
		heatIndexDesc: "Esta función calcula la sensación térmica a partir de la temperatura ambiente y la humedad relativa. La temperatura aparente se suele describir como la percepción de temperatura del cuerpo humano.<div><br/>Este índice puede resultar útil para calcular los peligros relacionados con problemas médicos como calambres musculares, deshidratación, agotamiento por calor o insolaciones graves en días calurosos y húmedos. Cuando la humedad relativa es alta, aumenta la dificultad de que se evapore el sudor del cuerpo, con lo que las personas pierden la capacidad natural de reducir su temperatura. Los avisos o advertencias de los mapas de calor suelen ser el resultado de reclasificar los resultados del índice de calor en clases; cuanto mayor es el valor del índice, más probable es que se convierta en una advertencia en lugar de un simple aviso.</div>",
		hillshadeName: "Sombreado",
		hillshadeSnip: "Crea una representación 3D de la superficie que tiene en cuenta la posición relativa del sol para sombrear la imagen.",
		hillshadeDesc: "La función Sombreado produce una representación 3D en escala de grises de la superficie del terreno, que tiene en cuenta la posición relativa del sol para sombrear la imagen. <div><br/>El sombreado es una técnica que permite visualizar terreno en función de una fuente de luz y de la pendiente y la orientación de la superficie de elevación. Es un método cualitativo para visualizar la topografía y no proporciona valores de elevación absolutos. </div>",
		intName: "Entero",
		intSnip: "Convierte cada valor de celda de un ráster a un entero mediante truncamiento.",
		intDesc: "La función Int convierte cada valor de píxel de un ráster a un entero mediante truncamiento.",
		interpolateIrregularDataName: "Interpolar datos irregulares",
		interpolateIrregularDataSnip: "Interpola a partir de nubes de puntos o cuadrículas irregulares.",
		interpolateIrregularDataDesc: "Algunos datasets de netCDF o HDF almacenan su geolocalización como matrices de píxeles o datos de puntos con espacios irregulares. Al agregar estos datasets a un dataset de mosaico, la función de interpolar datos irregulares toma los datos cuadriculados irregulares y los remuestrea para cada píxel tenga un tamaño uniforme y sea cuadrado.<div><br/>Al agregar variables de netCDF o HDF a un dataset de mosaico, comprobará automáticamente si los datos están dispuestos en la matriz de forma regular. Si no es así, se puede utilizar la función de interpolar datos irregulares para convertir los datos irregulares en un ráster cuadriculado regular. Puede cambiar el método de interpolación y el tamaño de celda utilizados en la función de interpolar ráster de datos irregulares. Para los datos ráster con espacios regulares, no se aplicará la interpolación y los datos se leerán tal cual.</div>",
		isNullName: "Es nulo",
		isNullSnip: "Determina qué valores de los rásteres de entrada son NoData a través de cada celda individual. Devuelve un valor de 1 si los valores de entrada es NoData y 0 para las celdas que no lo son.",
		isNullDesc: "La función Es nulo determina qué valores del ráster de entrada son NoData píxel por píxel. Devuelve un valor de 1 si el valor de entrada es NoData, y un valor de 0 para los píxeles que no sean NoData.",
		kernelDensityName: "Densidad kernel",
		kernelDensitySnip: "Calcula una magnitud por unidad de área a partir de entidades de punto o polilínea mediante una función kernel para adaptar una superficie suavemente estrechada a cada punto o polilínea.",
		kernelDensityDesc: "Esta función calcula una magnitud por unidad de área a partir de entidades de punto o polilínea mediante una función kernel para adaptar una superficie suavemente estrechada a cada punto o polilínea.",
		keyMetadataName: "Metadatos clave",
		keyMetadataSnip: "Invalida o inserta metadatos clave de un ráster en una cadena de función.",
		keyMetadataDesc: "Esta función le permite insertar o invalidar metadatos clave de un ráster.<div><br/>La información de los metadatos clave se usa para ayudar a la aplicación con parte del procesamiento y la representación en pantalla, incluyendo proporcionar información útil como, por ejemplo, el nombre del sensor, los nombres de bandas o la cobertura de la nube asociada a las imágenes.</div>",
		shortestPathName: "Ruta de menor coste",
		shortestPathSnip: "Realiza un análisis de coste-distancia con las entradas de origen y destino, que se utilizan a continuación para determinar la ruta de menor coste desde un origen a un destino.",
		shortestPathDesc: "La función Ruta de menor coste calcula la ruta de menor coste desde un origen a un destino. La distancia de menor coste acumulativo se calcula para cada píxel hasta la fuente más cercana sobre una superficie de coste. Esto genera un ráster de salida que registra la ruta o las rutas de menor coste desde las ubicaciones seleccionadas hasta los píxeles de origen más cercanos definidos dentro de la superficie de coste acumulativo en términos de coste de distancia.<div><br/>A cada ruta de menor coste se le asigna un valor cuando se encuentra en el proceso de escaneado. El píxel final del Ráster de origen de una ruta de coste recibe un valor igual a 1. La primera ruta recibe un valor igual a 3, el segundo igual a 4 y así sucesivamente. Cuando se fusionan varias rutas y siguen la distancia restante hasta un origen en la misma ruta, al segmento en el que las dos rutas viajan juntas se le asigna el valor 2. A la parte fusionada de la ruta no se le puede asignar el valor de una de las rutas, ya que la parte fusionada pertenece a ambas rutas.</div>",
		lessThanEqualName: "Menor o igual que",
		lessThanEqualSnip: "Realiza una operación relacional menor o igual que sobre dos entradas en una base de celda a celda. Devuelve 1 para las celdas donde el primer ráster es menor o igual que el segundo ráster y 0 donde no lo es.",
		lessThanEqualDesc: "La función realiza una operación relacional Menor o igual que sobre dos entradas píxel por píxel. Devuelve un valor de 1 para los píxeles en los que el primer ráster es menor o igual que el segundo ráster, y un valor de 0 si no es menor ni igual que el segundo ráster.",
		lessThanName: "Menor que",
		lessThanSnip: "Realiza una operación relacional menor que sobre dos entradas en una base de celda a celda. Devuelve 1 para las celdas donde el primer ráster es menor que el segundo ráster y 0 si no lo es.",
		lessThanDesc: "La función realiza una operación relacional Menor que sobre dos entradas píxel por píxel. Devuelve un valor de 1 para los píxeles en los que el primer ráster es menor que el segundo ráster, y un valor de 0 si no es menor que el segundo ráster.",
		lnName: "Logaritmo neperiano (Ln)",
		lnSnip: "Calcula el logaritmo natural (base e) de las celdas en un ráster.",
		lnDesc: "La función Ln calcula el logaritmo natural (base e) de cada píxel de un ráster.",
		log10Name: "Logaritmo en base 10 (Log10)",
		log10Snip: "Calcula el logaritmo base 10 de las celdas en un ráster.",
		log10Desc: "La función Log10 calcula el logaritmo en base 10 de cada píxel de un ráster.",
		log2Name: "Logaritmo en base 2 (Log2)",
		log2Snip: "Calcula el logaritmo base 2 de las celdas en un ráster.",
		log2Desc: "La función Log2 calcula el logaritmo en base 2 de cada píxel de un ráster.",
		lookupName: "Búsqueda",
		lookupSnip: "Crea un nuevo ráster a partir de la búsqueda de valores que se encuentran en otro campo en la tabla del ráster de entrada.",
		lookupDesc: "La función crea un nuevo ráster a partir de la búsqueda de valores que se encuentran en otro campo en la tabla del ráster de entrada.",
		mlClassifyName: "Clasificar ML",
		mlClassifySnip: "Clasifica las imágenes aplicando un planteamiento de píxel a píxel. Se asignan píxeles mixtos a la entidad con el porcentaje más alto de ese píxel.",
		mlClassifyDesc: "La función Clasificar ML le permite realizar una clasificación supervisada utilizando el algoritmo de clasificación de máxima verosimilitud sobre un dataset ráster o un dataset de mosaico. Esta función requiere un archivo de firma de clasificación.",
		maskName: "Máscara",
		maskSnip: "Establece los valores que no quiere mostrar.",
		maskDesc: "Esta función ráster define valores que no deseará mostrar en su ráster. Con la función Máscara, especificará uno o varios valores NoData o un rango de valores de píxel válido. ",
		minusName: "Resta",
		minusSnip: "Resta el valor del segundo ráster de entrada al valor del primer ráster de entrada celda por celda.",
		minusDesc: "La función Menos resta el valor del segundo ráster de entrada del valor del primer ráster de entrada píxel por píxel.",
		modName: "Módulo",
		modSnip: "Determina el resto (módulo) del primer ráster cuando se divide por el segundo ráster celda por celda.",
		modDesc: "La función Mod determina el resto (módulo) del primer ráster cuando se divide por el segundo ráster píxel por píxel. El orden de las entradas es importante y afecta al resultado de salida.",
		mosaicRastersName: "Rásteres de mosaico",
		mosaicRastersSnip: "Une un conjunto de datasets ráster para crear un dataset.",
		mosaicRastersDesc: "La función Rásteres de mosaico crea una imagen de mosaico a partir de varias imágenes. Si hay superposición entre las imágenes, hay varios métodos entre los que se puede elegir para determinar qué imágenes se muestran.",
		ndviColorizedName: "NDVI a color",
		ndviColorizedSnip: "Crea un dataset multibanda que representa la salud de la vegetación, en función de la diferencia entre las bandas roja e infrarroja cercana.",
		ndviColorizedDesc: "La función NDVI a color aplica la función NVDI a la imagen de entrada y, a continuación, utiliza un mapa de color o una rampa de color para mostrar el resultado.",
		ndviName: "NDVI",
		ndviSnip: "Calcula un Índice de Vegetación de Diferencia Normalizada (NDVI).",
		ndviDesc: "La función NDVI crea un dataset de banda única que representa la salud de la vegetación, en función de la diferencia entre las bandas roja e infrarroja cercana.<div><br/>El NDVI es un índice normalizado que le permite generar una imagen que muestra el verdor, también conocida como biomasa relativa. Este índice aprovecha el contraste de características entre dos bandas de un dataset ráster multiespectral: la absorción de pigmento de clorofila en la banda roja y la alta reflectividad del material de las plantas en la banda infrarroja cercana (NIR). Los valores NDVI extremadamente bajos o negativos representan a las áreas sin ninguna vegetación, tales como nubes, agua o nieve. Los valores muy bajos representan a áreas con muy poca vegetación o sin ninguna vegetación, tales como hormigón, piedra o suelo desnudo. Los valores moderados representan áreas de matorrales y praderas. Los valores altos representan a las zonas forestales y la vegetación densa.</div>",
		negateName: "Cambio de signo",
		negateSnip: "Cambia el signo (multiplica por -1) de los valores de celda del ráster de entrada celda por celda.",
		negateDesc: "La función Cambio de Signo cambia el signo (multiplica por -1) de los valores de píxel del ráster de entrada en un píxel. ",
		nibbleName: "Nibble",
		nibbleSnip: "Reemplaza las celdas de un ráster que corresponden a una máscara con los valores de los vecinos más cercanos.",
		nibbleDesc: "La función global Nibble permite asignar a las áreas seleccionadas de un ráster el valor de su vecino más cercano. Resulta útil para la edición de áreas de un ráster en las que los datos pueden ser erróneos.",
		notEqualName: "No igual",
		notEqualSnip: "Realiza una operación relacional de desigualdad sobre dos entradas a través de cada celda individual. Devuelve 1 para las celdas donde el primer ráster no es igual al segundo ráster y 0 donde es igual.",
		notEqualDesc: "La función realiza una operación relacional No igual que sobre dos entradas píxel por píxel. Devuelve un valor de 1 para los píxeles en los que el primer ráster no es igual al segundo ráster, y un valor de 0 para los píxeles donde es igual al segundo ráster.",
		pansharpeningName: "Refinado pancromático",
		pansharpeningSnip: "Mejora artificialmente la resolución espacial de una imagen multibanda mediante su fusión con una imagen pancromática de mayor resolución.",
		pansharpeningDesc: "La función Refinado pancromático utiliza una imagen pancromática de mayor resolución o banda de ráster para fusionarla con un dataset ráster multibanda de menor resolución y así aumentar la resolución espacial de la imagen multibanda.<div><br/>La finalidad del refinado pancromático es crear una imagen visual de mayor calidad. Dado que las técnicas modifican las características radiométricas y espectrales de las imágenes multibanda, las imágenes con refinado pancromático se deben usar con cautela para fines de teledetección analítica.</div>",
		pathAllocationName: "Asignación de la distancia de ruta",
		pathAllocationSnip: "Calcula el origen de menor coste para cada celda en función del menor coste acumulativo por una superficie de coste y tiene en cuenta la distancia de la superficie y los factores de coste horizontal y vertical.",
		pathAllocationDesc: "La función Asignación de distancia de ruta calcula la fuente más cercana a cada celda en función del coste acumulativo inferior sobre una superficie de coste a la vez que se tiene en cuenta la distancia de la superficie y los factores de coste vertical y horizontal.",
		pathBackLinkName: "Vínculo de menor distancia de ruta",
		pathBackLinkSnip: "Define el vecino que es la celda siguiente en la ruta de menor coste acumulativo hasta el origen de menor coste y tiene en cuenta la distancia de la superficie y los factores de coste horizontal y vertical.",
		pathBackLinkDesc: "La función Vínculo de menor distancia de ruta identifica la direccionalidad del vecino que es la celda siguiente en la ruta de coste acumulativo inferior a la fuente más cercana, a la vez que se tiene en cuenta la distancia de la superficie y los factores de coste horizontal y vertical.",
		pathDistanceName: "Distancia de ruta",
		pathDistanceSnip: "Calcula, para cada celda, el menor coste de distancia acumulativo desde o hasta el origen de menor coste y tiene en cuenta la distancia de la superficie y los factores de coste horizontal y vertical.",
		pathDistanceDesc: "La función Distancia de ruta calcula para cada celda la distancia de coste acumulativo inferior a la fuente más cercana a la vez que se tiene en cuenta la distancia de la superficie y los factores de coste vertical y horizontal.",
		plusName: "Plus",
		plusSnip: "Agrega (suma) los valores de dos rásteres celda por celda.",
		plusDesc: "La función Suma agrega (suma) los valores de dos rásteres píxel por píxel.",
		powerName: "Potencia",
		powerSnip: "Eleva los valores de celda de un ráster a la potencia de los valores encontrados en otro ráster.",
		powerDesc: "La función Potencia eleva los valores de píxel de un ráster a la potencia de los valores encontrados en otro ráster.",
		radarCalibrationName: "Calibración de radar",
		radarCalibrationSnip: "Convierte RADARSAT-2 a retrodispersión.",
		radarCalibrationDesc: "Esta función se utiliza para calibrar imágenes RADARSAT-2 en un dataset de mosaico o como producto ráster. La calibración se realiza en las imágenes de radar de manera que los valores de píxel sean una representación verdadera de la retrodispersión del radar.",
		rasterInfoName: "RasterInfo",
		rasterInfoSnip: "Modifica las propiedades del ráster, como la profundidad de bit, el valor NoData, el tamaño de celda, etc.",
		rasterInfoDesc: "La Información de ráster abre un cuadro de diálogo con propiedades del dataset ráster, como el número de columnas y filas, el número de bandas, el tipo de píxel, la extensión y la referencia espacial. Puede editar estas propiedades al seleccionar un dataset ráster para utilizar como plantilla. ",
		rasterizeAttributesName: "Rasterizar atributos",
		rasterizeAttributesSnip: "Enriquece un ráster mediante bandas adicionales derivadas de valores de atributos especificados, desde una tabla externa o un servicio de entidades.",
		rasterizeAttributesDesc: "La función Rasterizar atributos enriquece un ráster agregando bandas derivadas de valores de atributos especificados, desde una tabla externa o un servicio de entidades. También puede especificar un ráster de zona y el atributo de Id. de zona asociado para habilitar consultas regionales.",
		rasterizeFeatureClassName: "Rasterizar entidades",
		rasterizeFeatureClassSnip: "Convierte entidades en un ráster.",
		rasterizeFeatureClassDesc: "Esta función convierte datos de una clase de entidad poligonal, de polilínea y de punto en una capa ráster.<div><br/>A las entidades se les asignan valores de píxel según el OBJECTID de la entidad (predeterminado). Opcionalmente, los valores de píxel pueden estar basados en un campo de valor definido por el usuario en la tabla de atributos de la entidad de entrada.</div>",
		recastName: "Reformular",
		recastSnip: "Modifica los parámetros de una cadena de funciones de un dataset de mosaico o un servicio de imágenes. Se utiliza con frecuencia con los datasets LAS para evitar tener que crear un dataset de mosaico separado para distintas representaciones del terreno.",
		recastDesc: "La función Reformular se utiliza para modificar dinámicamente el parámetro de función empleado en un dataset de mosaico o un servicio de imágenes sin mantener físicamente los cambios.",
		regionGroupName: "Grupo de regiones",
		regionGroupSnip: "Para cada celda en la salida, se registra la identidad de la región conectada a la que pertenece esa celda. Se asigna un número único a cada región.",
		regionGroupDesc: "La función Grupo de regiones registra, para cada celda de la salida, la identidad de la región conectada a la que pertenece la celda. Se asigna un número único a cada región.<div><br/>La primera región escaneada recibe el valor uno, la segunda dos, y así sucesivamente, hasta que se asigna un valor a todas las regiones. El escaneo se desplaza de izquierda a derecha, de arriba hacia abajo. Los valores que se asignen a las zonas de salida dependerán del momento en que se encuentran en el proceso de escaneo.</div>",
		regionGrowName: "Crecimiento de región",
		regionGrowSnip: "Hace crecer las regiones a partir de puntos semilla.",
		regionGrowDesc: "La función Crecimiento de región agrupa píxeles vecinos en grupos en función del radio especificado respecto desde el punto de semilla. Se asigna al grupo de píxeles u objetos un valor de relleno especificado.",
		remapName: "Nueva representación cartográfica",
		remapSnip: "Cambia los valores de píxel asignando nuevos valores a rangos de valores de píxel o usando una tabla externa.",
		remapDesc: "La función de nueva representación cartográfica le permite cambiar o reclasificar los valores de píxel de los datos ráster. Se puede hacer especificando un rango de valores de píxel para representar cartográficamente un valor de píxel de salida, o bien usando una tabla para representar cartográficamente los valores de píxeles para generar el valor de píxel.",
		reprojectName: "Volver a proyectar",
		reprojectSnip: "Modifica la proyección de un dataset ráster, dataset de mosaico o elemento de ráster en un dataset de mosaico. También pueden remuestrear los datos para un nuevo tamaño de celda y definir un origen.",
		reprojectDesc: "La función Reproyectar modifica la proyección de un dataset ráster, dataset de mosaico o elemento de ráster en un dataset de mosaico. También pueden remuestrear los datos para un nuevo tamaño de celda y definir un origen.<div><br/>La función Reproyectar se puede usar al crear una caché a partir de un dataset ráster o de mosaico que no se encuentra en la proyección requerida. Por ejemplo, al crear un servicio de imágenes en caché que se puede integrar con aplicaciones con otros servicios en caché, es importante que todos se encuentren en la misma proyección. Con frecuencia se trata de una proyección Web Mercator. Dado que no es posible reproyectar el dataset de mosaico, es posible hacer una de dos cosas: crear un dataset de mosaico al que se hace referencia desde su dataset de mosaico en la proyección necesaria o agregar la función Reproyectar a la cadena de funciones del dataset de mosaico. Otro ejemplo usa esta función con el elemento de ráster de un dataset de mosaico. Al utilizar la función Ráster en caché, quizá desee insertar la función Reproyectar de forma que la caché se cree en la nueva proyección. Los elementos de ráster en un dataset de mosaico se pueden almacenar en caché cuando el procesamiento es intenso y está tratando publicar un servicio de imágenes rápido, sin el almacenar en caché todo el servicio de imágenes.</div>",
		resampleName: "Remuestrear",
		resampleSnip: "Cambia el tamaño de celda de un ráster.",
		resampleDesc: "La función Remuestrear cambia el tamaño de celda, el tipo de remuestreo o ambos.<div><br/>La función Remuestrear solo se debería utilizar con requisitos de cálculo específicos, por ejemplo, cuando calcula la magnitud-dirección del viento o la corriente que requiere el remuestreo de la resolución de origen.</div>",
		roundDownName: "Redondeo hacia abajo",
		roundDownSnip: "Devuelve el valor entero inmediatamente más bajo, representado como un punto flotante, con cada celda de un ráster.",
		roundDownDesc: "La función Redondeo hacia abajo devuelve el número entero inmediatamente inferior, como un valor de punto flotante, para cada píxel de un ráster.",
		roundUpName: "Redondeo hacia arriba",
		roundUpSnip: "Devuelve el valor entero inmediatamente más alto, representado como un punto flotante, con cada celda de un ráster.",
		roundUpDesc: "Redondeo hacia arriba devuelve el número entero inmediatamente superior, como un valor de punto flotante, para cada píxel de un ráster.",
		segmentMeanShiftName: "Segmentación (desplazamiento medio)",
		segmentMeanShiftSnip: "Agrupa los píxeles adyacentes con características espectrales similares en segmentos.",
		segmentMeanShiftDesc: "Esta función identifica objetos, entidades o segmentos en sus imágenes agrupando los píxeles adyacentes que tienen características espectrales y espaciales similares. Puede controlar la cantidad de suavizado espacial y espectral para ayudarle a obtener entidades de interés.",
		s1RadiometricCalibrationName: "Calibración radiométrica de Sentinel-1",
		s1RadiometricCalibrationSnip: "Realiza diferentes tipos de calibraciones radiométricas en datos de Sentinel-1.",
		s1RadiometricCalibrationDesc: "Esta función ráster realiza tres calibraciones diferentes para datasets de Sentinel-1, incluidas beta cero y sigma cero, y genera el dataset calibrado. El objetivo de la calibración de SAR consiste en ofrecer imágenes en las que los valores de píxel se pueden relacionar directamente con la retrodispersión del radar de la escena. Aunque las imágenes de SAR sin calibrar bastan para un uso cualitativo, las imágenes de SAR calibradas son primordiales para un uso cuantitativo de los datos de SAR.<div><br/>El procesamiento habitual de los datos de SAR, que genera imágenes de nivel 1, no incluye correcciones radiométricas y persiste una importante desviación radiométrica. Por tanto, debe aplicar correcciones radiométricas a las imágenes de SAR para que los valores de píxel de las imágenes representen verdaderamente la retrodispersión del radar de la superficie reflectante. La corrección radiométrica también se necesita para comparar las imágenes de SAR adquiridas de sensores distintos, o adquiridas del mismo sensor a horas distintas, en modos distintos o procesadas por procesadores distintos.</div>",
		s1ThermalNoiseRemovalName: "Eliminación de ruido térmico de Sentinel-1",
		s1ThermalNoiseRemovalSnip: "Elimina el ruido térmico de los datos de Sentinel-1.",
		s1ThermalNoiseRemovalDesc: "La corrección del ruido térmico se puede aplicar a los productos Single Look Complex (SLC) de nivel 1 y a los productos Ground Range Detection (GRD) de nivel 1 de Sentinel-1 que no hayan sido corregidos. El operador también puede eliminar esta corrección en función de las anotaciones del producto para reintroducir la señal de ruido eliminada para generar el producto original. Las anotaciones de producto se actualizarán en consecuencia para permitir que se vuelva a aplicar la corrección. ",
		setNullName: "Establecer nulos",
		setNullSnip: "Establecer nulos establece las ubicaciones de celda identificadas en NoData según los criterios especificados. Devuelve NoData si una evaluación condicional es verdadera y devuelve un valor especificado por otro ráster si es falsa.",
		setNullDesc: "La función Establecer nulos define los píxeles identificados como NoData según criterios específicos. Devuelve NoData si una evaluación condicional es verdadera (1) y devuelve el valor especificado en el Ráster falso si una evaluación condicional es falsa (0). Este criterio viene determinado por la salida de una función matemática lógica, que será el Ráster de entrada.",
		shadedReliefName: "Relieve con sombra",
		shadedReliefSnip: "Crea una representación multibanda, con códigos de color y 3D de la superficie, teniendo en cuenta la posición relativa del sol para sombrear la imagen.",
		shadedReliefDesc: "La función Relieve sombreado crea un modelo de representación 3D del terreno en color mediante la fusión de imágenes a partir de los métodos de codificación de elevación y de sombreado. Esta función utiliza las propiedades de altitud y acimut para especificar la posición del sol.<div><br/></div>",
		sinHName: "Seno hiperbólico (SinH)",
		sinHSnip: "Calcula el seno hiperbólico de las celdas de un ráster.",
		sinHDesc: "La función calcula el seno hiperbólico de los píxeles de un ráster.",
		sinName: "Seno (Sin)",
		sinSnip: "Calcula el seno de las celdas de un ráster.",
		sinDesc: "La función calcula el seno de los píxeles de un ráster.",
		slopeName: "Pendiente",
		slopeSnip: "Calcula la tasa de cambio desde un valor de píxel hacia sus vecinos.",
		slopeDesc: "La función ráster calcula la pendiente, que es la tasa de cambio de elevación para cada celda de modelo digital de elevación (DEM). Es la primera derivada de un DEM.<div><br/>Esta función utiliza una función atan() acelerada. Es seis veces más rápido, y el error de aproximación siempre es menor de 0.3 grados.</div>",
		speckleName: "Moteado",
		speckleSnip: "Proporciona filtros para quitar ruido a datasets de radar de apertura sintética.",
		speckleDesc: "El moteado es el ruido de alta frecuencia de los datos de radar. Las imágenes generadas por los sistemas de radar de apertura sintética (SAR) son muy proclives a contener ruido de moteado debido al procesamiento de señales dispersas y la interferencia de las ondas electromagnéticas dispersadas por superficies u objetos. Esta función de ruido filtra el dataset de radar con ruido y suaviza el ruido mientas retiene los bordes o entidades precisas en la imagen.",
		spectralConversionName: "Conversión espectral",
		spectralConversionSnip: "Aplica una matriz a una imagen multibanda.",
		spectralConversionDesc: "La función Conversión espectral aplica una matriz a una imagen multibanda para influir en los valores de color del resultado.<div><br/>Algunos sensores no recogen bandas azules debido a una baja relación señal-ruido. Se puede utilizar, por ejemplo, para convertir una imagen de infrarrojos de colores falsos en una imagen en color pseudonatural.</div>",
		squareRootName: "Raíz cuadrada",
		squareRootSnip: "Calcula la raíz cuadrada de los valores de celda de un ráster.",
		squareRootDesc: "La función Raíz cuadrada calcula la raíz cuadrada de los valores de píxel de un ráster.",
		squareName: "Cuadrado",
		squareSnip: "Calcula el cuadrado de los valores de celda de un ráster.",
		squareDesc: "Cuadrado calcula el cuadrado de los valores de píxel de un ráster.",
		statisticsHistogramName: "Estadísticas e histograma",
		statisticsHistogramSnip: "Definir o asociar estadísticas e histograma.",
		statisticsHistogramDesc: "La función Estadísticas e histograma se utiliza para definir las estadísticas y el histograma de un ráster. Puede insertar esta función al final de la cadena de funciones para describir las estadísticas y el histograma de una plantilla de función ráster (RFT). Puede ser necesario hacerlo para controlar la visualización predeterminada del resultado de procesamiento, especialmente al definir una cadena de funciones que contiene muchas funciones.<div><br/>Puede definir estadísticas escribiendo los valores o importar desde un dataset ráster o un archivo XML. Los histogramas solo pueden definirse importando un archivo.</div>",
		statisticsName: "Estadísticas",
		statisticsSnip: "Calcula las estadísticas focales para cada píxel de una imagen basándose en una vecindad focal definida.",
		statisticsDesc: "La función Estadísticas calcula las estadísticas focales para cada píxel de una imagen basándose en una vecindad focal definida.<div><br/>La función Estadísticas se puede utilizar para rellenar líneas no continuas en una imagen. Las líneas no continuas con frecuencia las ocasionan los problemas en el sensor donde no se recopilan los datos. Esto ha ocurrido en los sensores como el instrumento de asignador temático mejorado Plus (ETM+) de Landsat 7. Este datos faltantes ocasionan problemas para el análisis y también a la hora de examinar las imágenes. No hay mucho que hacer al utilizar las imágenes para el análisis; sin embargo, si hubo alguna imagen superpuesta, se podría utilizar en lugar del contenido faltante. Lo mismo se podría hacer si las imágenes se utilizan para visualización. Sin embargo, no siempre hay una imagen adicional para rellenar el contenido que falta, así que se debe derivar de los datos existentes.</div>",
		streamLinkName: "Vínculo de curso de agua",
		streamLinkSnip: "Asigna valores únicos a secciones de una red lineal de ráster entre intersecciones.",
		streamLinkDesc: "La función global Vínculo de curso de agua asigna valores únicos a secciones de una red de ráster lineal entre intersecciones.<div><br/>Los vínculos son las secciones de un canal de curso de agua que conecta dos cruces sucesivos, un cruce y la salida o un cruce y la división de drenaje. En hidrología, estos segmentos de curso de agua se llaman alcances. Un cruce se relaciona con un punto de fluidez y ayuda a delinear el límite de la subcuenca de la cuenca hidrográfica o del drenaje.</div>",
		stretchName: "Extensión",
		stretchSnip: "Mejora una imagen ajustando el rango de valores mostrados. Con ello no se alteran los valores de píxel subyacentes. Si un píxel tiene un valor ajeno al rango especificado, aparecerá como el valor mínimo o el máximo.",
		stretchDesc: "La función Extender mejora las imágenes, para ello, cambia propiedades como el brillo, el contraste y gamma a través de varios tipos de extensión. Esta función usa las estadísticas de los rásteres del dataset de mosaico; por tanto, si usa esta función, debe asegurarse de que se han calculado las estadísticas.<div><br/>El tipo de extensión define una extensión del histograma que se va a aplicar a los rásteres para mejorar su apariencia. La extensión mejora el aspecto de los datos ya que expande los valores de píxel en un histograma a partir de los valores máximo y mínimo que se han definido según su profundidad de bits. </div>",
		swathName: "Franja",
		swathSnip: "Interpola a partir de cuadrículas irregulares o datos de franjas.",
		swathDesc: "Algunos datasets de netCDF o HDF almacenan su geolocalización como matrices con espacios irregulares. Al agregar estos datasets a un dataset de mosaico, la función de franja toma los datos cuadriculados irregulares y los remuestrea para que cada píxel tenga un tamaño uniforme y sea cuadrado.<div><br/>Al agregar variables de netCDF o HDF a un dataset de mosaico, comprobará automáticamente si los datos están dispuestos en la matriz de forma regular. Si no es así, se aplica automáticamente la función de franja para convertir los rásteres irregulares en puntos y, después, en un ráster cuadriculado regular. Puede cambiar el método de interpolación y el tamaño de celda utilizados en la función ráster de franja. Para los datos ráster con espacios regulares, no se aplicará la interpolación y los datos se leerán tal cual.</div>",
		tanHName: "Tangente hiperbólica (TanH)",
		tanHSnip: "Calcula la tangente hiperbólica de celdas en un ráster.",
		tanHDesc: "La función calcula la tangente hiperbólica de los píxeles de un ráster.",
		tanName: "Tangente (Tan)",
		tanSnip: "Calcula la tangente de celdas en un ráster.",
		tanDesc: "La función calcula la tangente de los píxeles de un ráster. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Calcula los niveles de vegetación, la humedad y la luminosidad. Esta técnica se basa en coeficientes que deben calcularse específicamente para un sensor.",
		tasseledCapDesc: "La transformación Tasseled Cap (Kauth-Thomas) está diseñada para analizar y representar fenomenología de la vegetación y cambios de desarrollo urbano detectados por diversos sistemas de sensor de satélite. Se conoce como la transformación Tasseled Cap debido a la forma de la distribución gráfica de los datos. Esta transformación proporcionó una lógica para los patrones encontrados en los datos MSS Landsat de campos agrícolas como una función del ciclo de vida del cultivo. Esencialmente, a medida que los cultivos crecen desde la semilla hasta la madurez, hay un aumento neto de infrarrojo cercano y una disminución de reflectancia roja con base en el color del suelo<div><br/>La utilidad de esta transformación se ha ampliado de los cultivos de seguimiento para al análisis y la representación cartográfica de la vegetación para apoyar una variedad de aplicaciones, como la silvicultura, la gestión de vegetación industrial, la representación cartográfica y la gestión de ecosistemas, el inventario y el control de la retención del carbono y los créditos, el desarrollo urbanístico, y muchas más. También se ha ampliado su compatibilidad inicial con Landsat MSS para incluir otros sistemas de satélite populares, como Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 y los sensores multiespectrales RapidEye.</div>",
		timesName: "Times",
		timesSnip: "Multiplica los valores de dos rásteres celda por celda.",
		timesDesc: "La función Multiplicación multiplica los valores de dos rásteres píxel por píxel.",
		transposeBitsName: "Transponer bits",
		transposeBitsSnip: "Desempaqueta los bits del píxel de entrada y los asigna a los bits especificados en el píxel de salida. El objetivo de esta función es manipular bits de un par de entradas, como los productos de banda de calidad de Landsat 8.",
		transposeBitsDesc: "La función Transponer bits desempaqueta los bits del píxel de entrada y los asigna a los bits especificados en el píxel de salida. El objetivo de esta función es manipular bits de un par de entradas, como los productos de banda de calidad de Landsat 8.",
		unitConversionName: "Conversión de unidad",
		unitConversionSnip: "Cambia los valores de una unidad de medida a otra.",
		unitConversionDesc: "Esta función convierte píxeles de una unidad a otra. Admite la conversión de distancia, velocidad y temperatura.",
		vectorFieldName: "Campo vectorial",
		vectorFieldSnip: "Muestra datasets con magnitud (u) y dirección (v) como flechas cuyo tamaño representa la magnitud, mientras que el ángulo representa la dirección.",
		vectorFieldDesc: "La función Campo de vector se utiliza para combinar y convertir dos rásteres en un ráster de dos bandas que sea del tipo de datos Magnitud-Dirección o del tipo de datos U-V.<div><br/>El valor U en ocasiones se conoce como velocidad zonal, y el valor V, como velocidad meridional.</div>",
		viewshed2Name: "Cuenca visual",
		viewshed2Snip: "Determina las ubicaciones de superficie ráster visibles para un conjunto de entidades de observador utilizando métodos geodésicos.",
		viewshed2Desc: "La función Cuenca visual determina las ubicaciones de superficie ráster visibles para un conjunto de entidades de observador utilizando métodos geodésicos<div><br/>Una prueba de línea de visión entre el destino y cada observador determina la visibilidad de cada centro de píxel. Si un observador puede ver el destino en el centro del píxel, se considera que el píxel es visible. Esta herramienta siempre tiene en cuenta la curvatura de la tierra a la hora de determinar la visibilidad.</div>",
		watershedName: "Cuenca hidrográfica",
		watershedSnip: "Determina el área de contribución por sobre un conjunto de celdas de un ráster.",
		watershedDesc: "La función global Cuenca hidrográfica determina el área de cuenca contribuyente por encima de un conjunto de píxeles de un ráster. Las cuencas hidrográficas se delinean a partir de un ráster de dirección de flujo que identifica la dirección de flujo de cada píxel.",
		weightedOverlayName: "Superposición ponderada",
		weightedOverlaySnip: "Superpone varios rásters con una escala de medición común y pondera cada uno según su importancia.",
		weightedOverlayDesc: "Esta función permite superponer varios rásteres con una escala de medición común y pondera cada uno según su importancia.",
		weightedSumName: "Suma ponderada",
		weightedSumSnip: "Pondera y agrega un conjunto de rásteres celda por celda.",
		weightedSumDesc: "La función Suma ponderada permite superponer varios rásteres al multiplicar cada uno por su peso y sumar los resultados.",
		windchillName: "Sensación térmica",
		windchillSnip: "Combina la temperatura ambiente del aire y la velocidad del viento para calcular el factor de sensación térmica.",
		windchillDesc: "La función de sensación térmica resulta útil para identificar las condiciones invernales peligrosas que, dependiendo de los tiempos de exposición a los elementos, pueden causar congelación o incluso hipotermia. La sensación térmica es una forma de medir cuánto frío siente una persona cuando se tiene en cuenta el viento combinado con unas temperaturas ya de por sí frías. Cuanto más rápida sea la velocidad del viento, más rápida será la pérdida de calor del cuerpo y más frío se sentirá.",
		zonalRemapName: "Nueva representación cartográfica zonal",
		zonalRemapSnip: "Se realiza una nueva representación cartográfica de los píxeles de un ráster basándose en las zonas definidas en otro ráster y en la representación cartográfica de los valores que dependen de la zona que se haya definido en una tabla.",
		zonalRemapDesc: "Esta función le permite realizar una nueva representación cartográfica de los píxeles de un ráster basándose en las zonas definidas en otro ráster y en la representación cartográfica de los valores que dependen de la zona que se haya definido en una tabla.",
		zonalStatisticsName: "Estadísticas zonales",
		zonalStatisticsSnip: "Calcula estadísticas sobre valores de un ráster dentro de zonas de otro dataset.",
		zonalStatisticsDesc: "La función calcula estadísticas sobre valores de un ráster dentro de zonas de otro dataset. Una zona se define como todas las áreas de la entrada que tienen el mismo valor. No es necesario que estas áreas sean contiguas. Cuando tanto las entradas de zona como las de valor son rásteres de la misma resolución, se utilizarán directamente. Si las resoluciones son diferentes, se aplica un remuestreo interno para hacerlas coincidir antes de realizar la operación zonal.",
		flowLengthName: "Longitud de flujo",
		flowLengthSnip: "Calcula la distancia aguas arriba o aguas abajo o la distancia ponderada a lo largo de la ruta de flujo para cada celda.",
		flowLengthDesc: "Esta es una función ráster global. Esta función crea una capa ráster de distancia aguas arriba o aguas abajo, o distancia ponderada, a lo largo de la ruta de flujo de cada celda.<div><br/>Un uso principal de la función Longitud de flujo es calcular la longitud de la ruta de flujo más larga dentro de una cuenca determinada. Esta medida se utiliza generalmente para calcular el tiempo de concentración de una cuenca. Se realiza con la opción Aguas arriba. La función también se puede utilizar para crear diagramas de distancia-área de eventos hipotéticos de precipitación y escorrentía mediante el ráster de peso, como una impedancia al movimiento descendente.</div>",
		streamOrderName: "Clasificación de arroyos",
		streamOrderSnip: "Asigna un orden numérico a segmentos de un ráster que representa las ramas de una red lineal",
		streamOrderDesc: "Esta es una función ráster global. Esta función crea una capa ráster que asigna un orden numérico a los segmentos de un ráster que representan las ramas de una red lineal.<div><br/>La salida de la función Clasificación de cursos de agua será de mayor calidad si la capa ráster de curso de agua de entrada y el ráster de dirección del flujo de entrada se derivan de la misma superficie. Si el ráster de curso de agua se deriva de un dataset de curso de agua rasterizado, la salida puede no ser útil porque, a través de cada celda individual, la dirección no corresponderá con la ubicación de las celdas de curso de agua. El resultado de la función Acumulación de flujo se puede usar para crear una red de cursos de agua en ráster aplicando un valor de umbral para seleccionar las celdas que presentan un flujo acumulado elevado. Por ejemplo, las celdas que tienen más de 100 celdas que fluyen hacia ellas se utilizan para definir la red de corrientes. Use la función Con o Establecer nulos para crear un ráster de red de cursos de agua en el que los valores de acumulación de flujo de 100 o más se convierten en uno y el resto se dejan en segundo plano (NoData). La red de cursos de agua resultante puede usarse en la función Clasificación de cursos de agua. Esta función solo admite una capa ráster de dirección del flujo de entrada D8. Puede crear direcciones de flujo D8 con la función Dirección de flujo y ejecutarla con el tipo de dirección de flujo predeterminado, D8.</div>",
		snapPourPointName: "Ajuste de corrientes",
		snapPourPointSnip: "Ajusta las corrientes a las celdas de la acumulación de flujo más alta dentro de una distancia específica",
		snapPourPointDesc: "Esta es una función ráster global. Esta función ajusta las corrientes a las celdas de la acumulación de flujo más alta dentro de una distancia específica.<div><br/>La función Alinear punto de fluidez se utiliza para asegurar la selección de puntos de flujo acumulado alto cuando se delinean cuencas de drenaje al utilizar la función Cuenca hidrográfica. Alinear punto de fluidez buscará, dentro de una distancia de alineación alrededor de los puntos de fluidez especificados, la celda de mayor flujo acumulado y moverá el punto de fluidez a esa ubicación. La salida es una capa ráster de tipo entero cuando las ubicaciones originales del punto de fluidez se han alineado a ubicaciones de mayor flujo acumulado.</div>",
		sinkName: "Sumidero",
		sinkSnip: "Crea una capa ráster que identifica todos los sumideros o áreas de drenaje interno",
		sinkDesc: "Esta es una función ráster global. Esta función crea una capa ráster que identifica todos los sumideros o áreas de drenaje interno. Un sumidero es una celda o un conjunto de celdas conectadas espacialmente, con una dirección de flujo a la que no se le puede asignar uno de los ocho valores válidos en un ráster de dirección de flujo. Esto puede ocurrir cuando todas las celdas vecinas son mayores que la celda de procesamiento o cuando dos celdas fluyen entre sí, creando un bucle de dos celdas.<div><br/>La función Sumidero solo admite una capa ráster de dirección del flujo de entrada D8. Puede crear direcciones de flujo D8 con la función Dirección de flujo y ejecutarla con el tipo de dirección de flujo predeterminado, D8. La salida de la función Sumidero es un ráster entero en el que cada sumidero tiene asignado un valor único. Estos valores únicos presentan un rango entre uno y el número total de sumideros. Por ejemplo, si el número total de sumideros fuera 1.000, el rango de valores únicos sería de 1 a 1.000.</div>",
		aggregateName: "Agregar",
		aggregateSnip: "Genera una versión de resolución reducida de un ráster.",
		aggregateDesc: "La función Agregar remuestrea un ráster de entrada a una resolución más gruesa basándose en una estrategia de agregación especificada. Cada celda de salida contiene la Suma, el Mínimo, el Máximo, el Valor medio o la Mediana de las celdas de entrada abarcadas por la extensión de esa celda.<div><br/>Puede especificar el factor por el que se multiplica el tamaño de celda del ráster de entrada. Por ejemplo, un valor de factor de celda de 3 resultaría en una salida donde el tamaño de celda es tres veces mayor que el del ráster de entrada. Puede definir cómo tratar la extensión de la salida si el número de filas o columnas de la entrada no es un múltiplo exacto del factor de celda. Por defecto, los límites superior y derecho se expandirán para cubrir una extensión espacial mayor que la del ráster de entrada, a fin de garantizar que todas las celdas de entrada se procesen. Como alternativa, los límites superior y derecho se pueden reducir para cubrir una extensión menor, de forma que el número de filas y columnas procesado sea un múltiplo exacto del factor de celda. Puede definir cómo va a tratar el cálculo de agregación de las celdas NoData. El mecanismo predeterminado es que las celdas NoData de entrada que se encuentren dentro de la extensión espacial de una celda más grande del ráster de salida se ignorarán al determinar el valor de esa celda de salida. Como alternativa, puede especificar que, si existe incluso una sola celda NoData de entrada dentro de la extensión espacial de una celda de salida, dicha celda será NoData en el ráster de salida.</div>",
		ccdcName: "Análisis CCDC",
		ccdcSnip: "Evalúa los cambios en los valores de píxel a lo largo del tiempo utilizando el algoritmo Clasificación y detección de cambios continuas (CCDC) y genera los resultados del modelo.",
		ccdcDesc: "La función Análisis CCDC evalúa los cambios en los valores de píxel a lo largo del tiempo utilizando el algoritmo Clasificación y detección de cambios continuas (CCDC) y genera un ráster multidimensional que contiene los resultados del modelo. Solo se admite junto con la función Detectar cambios con análisis de cambios en una plantilla de función ráster. Para generar una salida de ráster, conecte la función Análisis CCDC con la función Detectar cambios con análisis de cambios, guarde como una plantilla de función ráster y ejecute Análisis de ráster con la plantilla de función.<div><br/>Esta función utiliza el algoritmo Clasificación y detección de cambios continuas (CCDC) para evaluar los cambios en los valores de píxel a lo largo del tiempo para una pila de imágenes. En una serie temporal de imágenes ópticas o derivados de imágenes (por ejemplo, NDVI), los valores de píxel pueden fluctuar por diversos motivos: 1. Cambio estacional: los cambios de valor de píxel reflejan cambios en la vegetación debido a la variabilidad estacional de la temperatura y las precipitaciones. En el hemisferio norte, por ejemplo, se espera ver una mayor densidad de vegetación verde en verano en comparación con el invierno. 2. Cambio gradual: los cambios de valor de píxel reflejan las tendencias de la vegetación o del agua superficial debido a la variabilidad climática o a prácticas de gestión del suelo a largo plazo. Por ejemplo, el área de suelo desnudo podría aumentar gradualmente debido a una disminución a largo plazo de las precipitaciones. 3. Cambio abrupto: los cambios de valor de píxel reflejan los cambios de la cobertura del suelo que ocurren repentinamente debido a la deforestación, el desarrollo urbanístico, catástrofes naturales, etc. El algoritmo CCDC identifica los tres tipos de cambio con el fin principal de identificar un cambio abrupto. Los modelos de tendencia y regresión armónicas se ajustan a los datos para estimar un cambio estacional o gradual, y las desviaciones repentinas de los modelos de tendencia son indicaciones de un cambio abrupto.<div><br/>El algoritmo CCDC se diseñó originalmente para datos de Temperatura de brillo o Reflectancia de superficie de datos de Landsat TM, Landsat ETM+ y Landsat OLI. Sin embargo, la función Detectar cambios con análisis de cambios junto con esta función detectará cambios en las imágenes multibanda de cualquier sensor admitido, así como derivados de imágenes de una sola banda como índices de banda. Por ejemplo, puede realizar una detección de cambios continua en un ráster de Índice de vegetación de diferencia normalizada (NDVI), porque los cambios abruptos en un NDVI pueden ser indicio de deforestación.</div>",
		computeChangeName: "Calcular cambio",
		computeChangeSnip: "Calcula la diferencia entre dos datasets ráster continuos o de categorías.",
		computeChangeDesc: "La función Calcular cambio se puede utilizar para enumerar las diferencias entre dos rásteres clasificados para el análisis de cambios de cobertura de suelo o se puede utilizar para examinar los cambios entre dos rásteres continuos de una sola banda, por ejemplo, elevación, temperatura, extensión de cobertura, etc.",
		detectChangeName: "Detectar cambios con análisis de cambios",
		detectChangeSnip: "Genera una capa ráster que contiene información de cambios de píxel con el ráster de análisis de cambios de salida.",
		detectChangeDesc: "<div>La función Detectar cambios con análisis de cambios genera una capa ráster que contiene información de fecha de cambio de píxel con el ráster de análisis de cambios. El ráster de análisis de cambios debe ser generado por la herramienta Analizar cambios usando CCDC o la herramienta Analizar cambios con LandTrendr, o bien la función ráster Análisis CCDC o Análisis LandTrendr.</div><br><div>Esta función ráster se puede combinar con las funciones ráster Análisis CCDC o Análisis LandTrendr en una plantilla de función ráster. Para generar una salida de ráster permanente, conecte la función Análisis CCDC o la función Análisis LandTrendr con la función Detectar cambios con análisis de cambios, guarde como una plantilla de función ráster y ejecute Análisis de ráster con la plantilla.</div><br><div>El parámetro <strong>Tipo de cambio</strong> indica la información que se genera. La información se extrae del ráster de análisis de cambios. Cuando se ejecuta esta función en la salida de la función/herramienta CCDC, puede elegir entre las siguientes opciones:</div><ul><li><strong>Hora del último cambio</strong>: la fecha y hora más recientes en las que se marcó un píxel como cambiado.</li><li><strong>Hora del cambio más antiguo</strong>: la fecha y hora en la que se marcó un píxel como cambiado.</li><li><strong>Hora del cambio más grande</strong>: la fecha y hora en las que el cambio calculado era la más significativa para un píxel.</li><li> <strong>Número de cambios</strong>: el número total de veces que el píxel ha cambiado.</li></ul><div>Al ejecutar esta función en la salida de la función/herramienta LandTrendr, están disponibles las siguientes opciones adicionales:</div><ul><li><strong>Hora del cambio más largo</strong>: la fecha en la que un píxel fue marcado como cambiado, al principio o al final del periodo de cambio más largo.</li><li><strong>Hora del cambio más corto</strong>: la fecha en la que un píxel se marcó como cambiado, al principio o al final del periodo de cambio más corto.</li><li><strong>Hora del cambio más rápido</strong>: la fecha en la que un píxel se marcó como cambiado, al principio o al final del periodo de cambio más rápido.</li><li><strong>Hora del cambio más lento</strong>: la fecha en la que un píxel se marcó como cambiado, al principio o al final del periodo de cambio más lento.</li></ul><div>El ráster de salida es un ráster multibanda en el que cada banda contiene información de cambios en función del tipo de cambio seleccionado y del número máximo de cambios especificado. Por ejemplo, si <strong>Tipo de cambio</strong> está definido como <strong>Hora del cambio más temprano</strong> y <strong>Número máximo de cambios</strong> está definido como 2, la función calcula las dos fechas más tempranas en las que se produjeron cambios durante toda la serie temporal para cada píxel. El resultado es un ráster en el que la primera banda contiene las fechas del cambio más temprano por píxel y la segunda banda contiene las fechas del segundo cambio más temprano por píxel.</div><br><div>Al aplicar esta función en la salida de las herramientas LandTrendr, puede elegir si desea extraer la fecha que marca el inicio de un cambio o el final de un cambio con el parámetro <strong>Fecha de segmento</strong>. Por ejemplo, para entender cómo se inició el cambio más reciente en la serie temporal, establezca el <strong>Tipo de cambio</strong> en <strong>Hora del cambio más reciente</strong> y la <strong>Fecha de segmento</strong> en <strong>Inicio de segmento</strong>.</div><br><div>Utilice los siguientes parámetros de filtrado para extraer fechas de cambio más específicas del ráster de análisis de cambios:</div><ul><li><strong>Filtrar por año</strong>: identifique los cambios que se produjeron en un período de tiempo específico, por ejemplo, si está buscando cambios que se produjeran en un paisaje durante cinco años de sequía.</li><li><strong>Filtrar por duración</strong>: identifique los cambios que se produjeron a lo largo de un rango determinado de años, por ejemplo, si solo está buscando cambios abruptos que se produjeran en 1 o 2 años. Puede calcular la duración que le interese con la fórmula <strong>año final - año inicial +1</strong>. Se incluirán los huecos en las series temporales.</li><li><strong>Filtrar por magnitud</strong>: identifique los cambios de una magnitud determinada, por ejemplo, si solo está buscando cambios grandes en el índice de vegetación NDVI. La magnitud es un valor absoluto, por lo que los valores mínimo y máximo no pueden ser negativos. Para especificar el cambio direccional, utilice el parámetro <strong>Cambiar dirección</strong>.</li></ul>",
		distanceAccumulationName: "Acumulación de distancia",
		distanceAccumulationSnip: "Calcula la distancia acumulada para cada celda a los orígenes, teniendo en cuenta la distancia en línea recta, coste-distancia, verdadera distancia de superficie y factores de coste vertical y horizontal.",
		distanceAccumulationDesc: "Acumulación de distancia calcula la distancia de cada ubicación del área de estudio al origen más cercano, o de menor coste. Si solo se proporcionan los orígenes para la entrada, entonces se calcula una distancia en línea recta hasta cada ubicación del área de estudio. Si se utilizan orígenes y barreras como entrada, entonces Acumulación de distancia calcula la distancia en línea recta alrededor de las barreras. Para el ráster de origen y el ráster de barrera, el valor de fondo debería ser NoData, mientras que los orígenes y las barreras se representan con valores de celda válidos. Entre los valores válidos se incluye cero. <div><br/>Cuando se proporciona un ráster de superficie como entrada, entonces se calcula la distancia de superficie real entre las celdas. Para realizar un análisis de coste con Acumulación de distancia, se necesita una superficie de coste. Si se proporciona una superficie de coste, entonces el resultado es un ráster de coste-distancia acumulado. Cuando se proporcionan los factores horizontal y vertical, entonces se acumula la direccionalidad que se considera como coste. Se pueden utilizar cuatro características de origen. Estas características, que pueden ser del origen o de los elementos que se mueven desde el origen, se controlan por medio de parámetros específicos: 1. Acumulación inicial: define el coste inicial antes de que se inicie el movimiento. 2. Acumulación máxima: especifica el coste que puede acumular un origen antes de alcanzar su límite. 3. Multiplicador para aplicar a los costes: especifica el modo de desplazamiento o la magnitud en el origen. 4. Dirección del viaje: identifica si el elemento que se mueve comienza en un origen y se mueve a ubicaciones distintas del origen, o comienza en ubicaciones distintas del origen y regresa a un origen.<div><br/>Por defecto, el resultado de Acumulación de distancia es una banda única, que es el ráster de acumulación de distancia. Sin embargo, también se puede crear una segunda banda, la banda de dirección hacia atrás.  Esta banda indica para cada ubicación del área de estudio la dirección en la que ir para llegar al origen de menor coste.  Se necesitarán ambas bandas para determinar las rutas óptimas dentro del área de estudio. Para generar una ruta, utilice primero la función Extraer banda para extraer el ráster de acumulación de distancia y el ráster de dirección hacia atrás. Utilice estas capas como entrada de la función Ruta de coste. En la función, use el ráster de acumulación de distancia como entrada del Ráster de coste-distancia y el ráster de dirección hacia atrás como la entrada del Ráster de vínculo de menor coste.</div>",
		distanceAllocationName: "Asignación de distancia",
		distanceAllocationSnip: "Calcula la asignación de distancia para cada celda a los orígenes proporcionados en función de la distancia en línea recta, coste-distancia, verdadera distancia de superficie y factores de coste vertical y horizontal.",
		distanceAllocationDesc: "Asignación de distancia calcula a qué origen se asigna cada ubicación del área de estudio. Si solo se proporcionan los orígenes para la entrada, entonces se asignan las ubicaciones con una distancia en línea recta hasta el origen más cercano. Si se utilizan orígenes y barreras como entrada, entonces Asignación de distancia calcula la distancia en línea recta alrededor de las barreras para determinar a qué ubicación se asigna un origen. Para el ráster de origen y el ráster de barrera, el valor de fondo debería ser NoData, mientras que los orígenes y las barreras se representan con valores de celda válidos. Entre los valores válidos se incluye cero.<div><br/>Para realizar un análisis de coste con Asignación de distancia, se necesita una superficie de coste. Si se proporciona una superficie de coste, entonces el resultado es un ráster de asignación basado en el coste acumulativo, no en una distancia en línea recta. Cuando se proporcionan los factores horizontal y vertical, entonces se acumula la direccionalidad que se considera como coste. Cuando se proporciona un ráster de superficie como entrada, entonces la distancia de superficie real cubierta al pasar entre celdas se calcula cuando se determina la asignación. Se pueden utilizar cuatro características de origen. Estas características, que pueden ser del origen o de los elementos que se mueven desde el origen, se controlan por medio de parámetros específicos: 1. Acumulación inicial: define el coste inicial antes de que se inicie el movimiento. 2. Acumulación máxima: especifica el coste que puede acumular un origen antes de alcanzar su límite. 3. Multiplicador para aplicar a los costes: especifica el modo de desplazamiento o la magnitud en el origen. 4. Dirección del viaje: identifica si el elemento que se mueve comienza en un origen y se mueve a ubicaciones distintas del origen, o comienza en ubicaciones distintas del origen y regresa a un origen.<div><br/>Por defecto, el resultado de Asignación de distancia es una banda única, que es el ráster de asignación de distancia. Al activar la opción booleana Generar fila y columna de origen como bandas adicionales en la salida resultará en un ráster multibanda que consta de tres bandas. La primera banda es la banda de asignación de distancia, la segunda banda contiene un índice de fila y la tercera banda contiene un índice de columna. Estos índices identifican la ubicación de la celda de origen más cercana al menor coste-distancia acumulado. El índice de fila de origen y el índice de columna de origen se pueden utilizar juntos para realizar una representación de la intensidad. Si consulta cualquier ubicación en su área de estudio en las bandas dos y tres, sabrá la fila y la columna del origen de menor coste para esa ubicación.</div>",
		eucBackDirectionName: "Dirección euclidiana hacia atrás",
		eucBackDirectionSnip: "Calcula en grados, para cada celda, la dirección a la celda vecina por la ruta más corta, de vuelta al origen más cercano, a la vez que evita las barreras.",
		eucBackDirectionDesc: "La función Dirección euclidiana hacia atrás resulta en un ráster de punto flotante continuo que representa la dirección en grados de vuelta al origen más cercano a la vez que se evitan las barreras, si se proporcionan.<div><br/>Las entradas de Dirección euclidiana hacia atrás son el origen para el que se calculará la dirección. Una entrada opcional es un ráster que representa barreras dentro del área de estudio. Para el ráster de origen y el ráster de barrera, el valor de fondo debería ser NoData, mientras que los orígenes y las barreras se representan con valores válidos. Entre los valores válidos se incluye cero. Por defecto, el cálculo se procesará a la extensión combinada de los orígenes y barreras, además de 2 filas y columnas. Si solo se necesita el análisis dentro de una distancia especificada de los orígenes, entonces se puede usar el parámetro Distancia máxima. Dirección euclidiana hacia atrás admite un método planar y un método geodésico en el cálculo. El cálculo del método planar se realizará en un plano llano proyectado con un sistema de coordenadas cartesianas 2D. El cálculo del método geodésico se realizará en el elipsoide, lo que significa que, independientemente de la proyección de entrada o salida, los resultados no cambian.<div><br/>El resultado de la función Dirección euclidiana hacia atrás se puede utilizar junto con el resultado de la función Distancia euclidiana para determinar las rutas más cortas de las ubicaciones dentro del área de estudio hasta el origen. El resultado de Dirección euclidiana hacia atrás y el resultado de Distancia euclidiana se utilizan en la función Ruta de coste junto con destinos para generar las rutas más cortas.</div>",
		expandName: "Expandir",
		expandSnip: "Expande las zonas seleccionadas de un ráster por zonas en una cantidad especificada de celdas.",
		expandDesc: "Con la función global Expandir, puede generalizar, o simplificar, rásteres haciendo más grandes determinadas zonas. También puede controlar la cantidad de generalización que se producirá.<div><br/>Las zonas que seleccione se incrementarán en tamaño expandiéndose a otras zonas. Conceptualmente, puede visualizar los Valores de zona seleccionados como zonas en primer plano, mientras que el resto de valores permanecen en zonas en segundo plano. Las zonas en primer plano se pueden expandir en zonas en segundo plano.<div><br/>Es posible controlar la cantidad de generalización con el parámetro Número de celdas. De manera predeterminada, este valor es 1, que significa que las zonas seleccionadas se expandirán según la cantidad que corresponda al tamaño de una celda. Para aumentar el grado de generalización, puede especificar un valor mayor para este parámetro. Conceptualmente, es como ejecutar la herramienta tantas veces como el número especificado, siendo los resultados de la ejecución anterior la entrada a la iteración subsiguiente.</div>",
		trendAnalysisName: "Generar tendencia",
		trendAnalysisSnip: "Estima la tendencia de cada píxel a lo largo de una dimensión para una o varias variables de un ráster multidimensional.",
		trendAnalysisDesc: "<div>Esta función se puede utilizar para ajustar datos a lo largo de una línea de tendencia lineal, armónica o polinómica, o se puede utilizar para realizar la detección de tendencias utilizando la prueba de Mann-Kendall o Seasonal-Kendall.</div><br><div>El ráster de tendencia de salida generado con esta función se utiliza como entrada para la función <strong>Predecir con tendencia</strong>.</div><br><div>Las pruebas de Mann-Kendall y Seasonal-Kendall se utilizan para determinar si existe una tendencia monotónica en los datos. Son no paramétricos, lo que significa que no asumen una distribución específica de los datos. La prueba Mann-Kendall no considera la correlación de serie o los efectos estacionales. Si los datos son estacionales, la prueba de Seasonal-Kendall es más apropiada.</div><br><div>Si la herramienta se utiliza para realizar la prueba de Mann-Kendall o Seasonal-Kendall, la salida es un ráster de cinco bandas con la siguiente información:</div><ul><li>Banda 1 = Banda de pendiente de Sen</li><li>Banda 2 = valor P</li><li>Banda 3 = Puntuación de Mann-Kendall (S)</li><li>Banda 4 = Varianza S</li><li></li><li>Banda 5 = Puntuación Z</li></ul><div>Las salidas de las pruebas Mann-Kendall o Seasonal-Kendall se pueden usar para determinar qué píxeles de su serie temporal multidimensional presentan una tendencia estadísticamente significativa. Puede utilizar esta información junto con el análisis de tendencia lineal, armónica o polinómica para extraer tendencias significativas en su serie temporal. Puede generar una máscara que incluya píxeles con valores p significativos, aplicar la máscara al ráster multidimensional y utilizar este ráster multidimensional enmascarado como entrada de la herramienta para realizar un análisis de tendencia lineal, monotónica o polinómica.</div><br><div>Existen tres opciones de línea de tendencia para ajustar una tendencia a los valores de la variable a lo largo de una dimensión: lineal, polinómica y armónica.</div><br><div>En el caso del análisis de tendencia lineal, la salida es un ráster de tres bandas, donde:</div><ul><li>Banda 1 = Pendiente</li><li>Banda 2 = Interceptar</li><li>Banda 3 = Error cuadrático medio (RMSE) o error alrededor de la línea de mejor ajuste</li></ul><div>En el caso del análisis de tendencia polinómica, el número de bandas de la salida depende del orden polinómico. Un ajuste polinómico de segundo orden produce un ráster de cuatro bandas, donde:</div><ul><li>Banda 1 = Polynomial_2</li><li>Banda 2 = Polynomial_1</li><li>Banda 3 = Polynomial_0</li><li>Banda 4 = RMSE</li></ul><div>Un ajuste polinómico de tercer orden produce un ráster de cinco bandas, donde:</div><ul><li>Banda 1 = Polynomial_3</li><li>Banda 2 = Polynomial_2</li><li>Banda 3 = Polynomial_1</li><li>Banda 4 = Polynomial_0</li><li>Banda 5 = RMSE</li></ul><div>En el caso del análisis de tendencia armónico, el número de bandas de la salida depende de la frecuencia armónica. Si la frecuencia se establece en 1, la salida será un ráster de cinco bandas, donde:</div><ul><li>Banda 1 = Pendiente</li><li>Banda 2 = Interceptar</li><li>Banda 3 = Harmonic_sin1</li><li>Banda 4 = Harmonic_cos1</li><li>Banda 5 = RMSE</li></ul><div>Si la frecuencia se establece en 2, la salida será un ráster de siete bandas, donde::</div><ul><li>Banda 1 = Pendiente</li><li>Banda 2 = Interceptar</li><li>Banda 3 = Harmonic_sin1</li><li>Banda 4 = Harmonic_cos1</li><li>Banda 5 = Harmonic_sin2</li><li>Banda 6 = Harmonic_cos2</li><li>Banda 7 = RMSE</li></ul><div>El parámetro <strong>Longitud del ciclo</strong> del análisis de tendencia armónico se utiliza para indicar el número y longitud de ciclos que espera ver en sus datos a lo largo de un día o año. Por ejemplo, si espera que sus datos pasen dos ciclos de variación en un año, la longitud de ciclo será 182,5 días o 0,5 años. Si recopila datos de temperatura cada tres horas y hay un ciclo de variación al día, la longitud de ciclo es de un día.</div><br><div>El parámetro <strong>Frecuencia del análisis</strong> de tendencia armónico se utiliza para describir el modelo armónico que se ajustará a los datos. Si la frecuencia se define como 1, se utilizará una combinación de curva lineal y curva armónica de primer orden para ajustar el modelo. Si la frecuencia es 2, se utilizará una combinación de lineal, curva armónica de primer orden y curva armónica de segundo orden para ajustar los datos. Si la frecuencia es 3, se utilizará una curva armónica adicional de tercer orden para modelar los datos, y así sucesivamente.</div><br><div>Se pueden generar estadísticas de idoneidad de ajuste del modelo como salidas opcionales. Se pueden calcular y simbolizar el error cuadrático medio (RMSE), R cuadrado y el valor P de pendiente de tendencia. Simbolice la capa ráster de tendencia de salida mediante la simbología <strong>RGB</strong> y especifique las estadísticas como las bandas roja, verde y azul.</div><br>",
		spectralUnmixingName: "Espectral lineal sin mezclas",
		spectralUnmixingSnip: "Realiza la clasificación por subpíxeles y calcula la abundancia fraccionaria de los diferentes tipos de cobertura de suelo de los píxeles individuales.",
		spectralUnmixingDesc: "La función Espectral lineal sin mezclas calcula la cobertura fraccional de píxeles individuales que contienen varios tipos de cobertura de suelo. Genera una capa multibanda, donde cada banda corresponde a la abundancia fraccional de cada clase de cobertura de suelo. Por ejemplo, puede utilizarla para realizar la clasificación de la cobertura de suelo en una imagen multiespectral para identificar la vegetación fotosintética, el suelo desnudo y vegetación muerta o no fotosintética.<div><br/>El orden del ráster multibanda de salida sigue el orden del perfil espectral de entrada. El número de clases no puede ser mayor que el número de bandas del ráster de entrada. Por ejemplo, no puede extraer información sobre más de 8 clases de un ráster de 8 bandas.</div>",
		multidimensionalFilterName: "Filtro multidimensional",
		interpolateRasterByDimensionFunctionName: "Interpolar ráster por dimensión",
		interpolateRasterByDimensionFunctionSnip: "Interpola un ráster multidimensional con valores de dimensión especificados usando porciones adyacentes.",
		interpolateRasterByDimensionFunctionDesc: "<p>Esta función le permite estimar los valores de píxel de una división de dimensión no definida en un ráster multidimensional. Por ejemplo, si tiene un dataset que contiene la temperatura del océano en el nivel de la superficie y a 100 metros por debajo del nivel del mar y desea estimar la temperatura a 50 metros por debajo del nivel del mar, puede utilizar esta función para obtener una estimación de esa profundidad mediante la definición de dimensión Por valores.</p><p>También puede reducir el tamaño de un datase mensual al de un dataset diario utilizando la definición de la dimensión Por intervalo y especificando el valor del parámetro Paso como 1 y el valor del parámetro Unidad como Días.</p><p>Utilice la definición de dimensión Por ráster de destino para estimar el valor del ráster de destino.</p>",
		multidimensionalFilterSnip: "Crea una capa ráster a partir de un dataset ráster multidimensional o una capa ráster multidimensional dividiendo los datos en variables y dimensiones definidas.",
		multidimensionalFilterDesc: "Filtro multidimensional crea una capa ráster multidimensional filtrando y extrayendo un subconjunto de variables de un ráster multidimensional. Por ejemplo, tiene un dataset multidimensional con 30 años de datos de precipitaciones mensuales, y solo desea extraer datos de cada enero para ver cómo han cambiado las precipitaciones ese mes.<div><br/>Use el parámetro Definición de dimensión para dividir las dimensiones por un intervalo, un valor o un rango de valores. Por ejemplo, si cuenta con 10 años de datos de salinidad del océano que se han recopilado mensualmente y a cada 2 metros de profundidad hasta llegar a los 500 metros, podría usar las distintas opciones de definición de dimensión en los siguientes escenarios. Escenario 1: extraer los datos de salinidad para el mes de enero durante el período de 10 años. Elija Por valores, cambie Dimensión a StdTime y cambie Valores a Enero. Escenario 2: dividir los datos de salinidad en un rango de profundidad de 0 a 150 metros. Elija Por rangos, cambie Dimensión a StdZ y cambie Valor mínimo a -150 y Valor máximo a 0. Escenario 3: extraer los datos de salinidad de los primeros 10 días de cada mes de enero durante un período de 10 años. Elija Por iteración, cambie Dimensión a StdTime, cambie Inicio de la primera iteración y Fin de la primera iteración para el inicio y el fin correspondientes del periodo de iteración, cambie Paso a 1 y cambie Unidad a Años.</div>",
		multidimensionalRasterName: "Ráster multidimensional",
		multidimensionalRasterSnip: "Agrega datos multidimensionales a un mapa como capa ráster multidimensional.",
		multidimensionalRasterDesc: "La función Ráster multidimensional agrega datos multidimensionales a un mapa como capa ráster multidimensional. Esta función resulta útil al realizar flujos de trabajo de análisis de ráster con una cadena de funciones.<div><br/>Entre los datasets ráster multidimensionales admitidos se encuentran netCDF, GRIB, HDF y CRF de Esri. También se admiten datasets de mosaico multidimensionales.</div>",
		optimalPathAsRasterName: "Ruta óptima como ráster",
		optimalPathAsRasterSnip: "Calcula la ruta de menor coste desde un origen a su destino.",
		optimalPathAsRasterDesc: "Esta función global produce un ráster de salida que registra la ruta o las rutas óptimas desde las ubicaciones seleccionadas hasta la celda de origen más cercana definida dentro de la superficie de coste acumulativo, en términos de coste-distancia.<div><br/>En general, se requiere que se ejecuten una o varias de las funciones de coste ponderado (Acumulación de distancia o Asignación de distancia) antes de ejecutar la función Ruta óptima como ráster para crear los rásteres de acumulación de distancia de entrada y dirección hacia atrás. Son capas ráster de entrada obligatorias para la función Ruta óptima. Los valores de la ruta óptima de salida representan el número de rutas en una ubicación determinada. En muchos casos, las vías siguen las mismas rutas, abandonan un origen y divergen para ir a destinos diferentes. Por ejemplo, un valor de uno indica que solo hay una ruta óptima en una ubicación determinada, mientras que un valor de cinco significa que hay cinco rutas óptimas en la ubicación que atraviesan esa celda en el área de estudio.<div><br/>Los datos de destino de entrada deben ser una capa ráster. El conjunto de celdas de destino son todas las celdas del ráster de entrada con valores válidos. Las celdas sin valores NoData no se incluyen en el conjunto. El valor cero se considera un destino legítimo. Se puede crear un ráster de destino con las herramientas de extracción. Si tiene entidades de origen o destino, puede convertirlas a ráster con la función Rasterizar entidades. Use el ráster de acumulación de distancia o dirección hacia atrás como entrada del ráster para la función de rasterización. De esta manera, se garantiza que la entidad se rasterice con los mismos valores de tamaño de celda, extensión y referencia espacial que el resto de rásteres de la función Ruta óptima como ráster. La función Ruta óptima como ráster también se puede utilizar para derivar la ruta de menor resistencia a un modelo digital de elevación (DEM). En este caso, utilice el DEM para el ráster de acumulación de distancia de entrada y la salida de la función Dirección de flujo para el ráster de dirección hacia atrás.</div>",
		trendName: "Predecir con tendencia",
		trendSnip: "Calcula una capa ráster multidimensional prevista utilizando el ráster de tendencia de salida de la función Generar tendencia o la herramienta de geoprocesamiento Generar ráster de tendencia.",
		trendDesc: "La función Predecir con tendencia calcula una capa ráster multidimensional prevista utilizando el ráster de tendencia de salida de la función Generar tendencia o la herramienta de geoprocesamiento Generar ráster de tendencia.",
		rasterCollectionName: "Procesar colección de rásteres",
		rasterCollectionSnip: "Procesa cada división de un ráster multidimensional o cada elemento de un ráster de mosaico. Esta función también puede agregar varias divisiones a una única división.",
		rasterCollectionDesc: "La función Procesar colección de rásteres procesa cada división de un ráster multidimensional o cada elemento de un ráster de mosaico. Esta función también puede agregar varias divisiones a una única división.<div><br/>Esta función procesa cada división de un ráster multidimensional o ráster de mosaico con una plantilla de función ráster. Esta función admite las siguientes opciones: 1. Especificar una plantilla de función ráster para la Función de elemento. Por ejemplo, tiene un dataset de mosaico con 20 años de imágenes de Landsat y desea calcular el NDVI para cada escena de la serie temporal. En Función de elemento, especifique una plantilla de función ráster que contenga la función ráster NDVI. 2. Especificar una plantilla de función ráster para la Función de agregación. Por ejemplo, tiene un ráster multidimensional con 10 años de datos de temperatura diarios y desea calcular la temperatura máxima de cada año. En la Función de agregación, especifique una plantilla de función ráster que contenga la función Estadísticas de celdas, con la operación definida como Máximo. En Definición de agregación, defina Dimensión como StdTime, Tipo como Palabra clave de intervalo e Intervalo de palabra clave como Anualmente. Tenga en cuenta que si el dataset de mosaico de entrada no es multidimensional, la función de agregación no respetará la definición de agregación. La función de agregación agregará todos los elementos o cada grupo en uno si se definen en la plantilla de función de agregación. Para más información sobre el uso de grupos en un dataset de mosaico, consulte Usar elementos de un dataset de mosaico en plantillas de función ráster. 3. Especificar una plantilla de función ráster para la Función de procesamiento. La función o cadena de funciones de esta plantilla se utiliza para visualizar el nuevo ráster procesado. Por ejemplo, especifique una plantilla de función ráster con la función Mapa de color para cambiar la manera de visualizar la capa ráster procesada. Tenga en cuenta que, si la entrada es un ráster multidimensional, se aplica la función de procesamiento a la división de visualización actual. Si la entrada es una capa de mosaico o dataset de mosaico, se aplica la función de procesamiento al ráster de mosaico con el Primer método para resolver superposiciones. 3. Especificar plantillas para cualquier combinación de las tres funciones. Por ejemplo, tiene un dataset de mosaico con imágenes de Landsat de serie temporal y desea generar una imagen compuesta del máximo NDVI. En Función de elemento, especifique una plantilla de función ráster que contenga la función ráster NDVI. En Función de agregación, especifique una plantilla de función ráster que contenga la función Estadísticas de celdas, con la operación definida como Máximo. En Función de procesamiento, especifique una plantilla de función ráster que contenga la función Mapa de color. Tenga en cuenta que el orden de procesamiento de la función sigue el de los parámetros de entrada. Por ejemplo, la Función de elemento se procesará primero.</div>",
		randomName: "Aleatorio",
		randomSnip: "Crea un ráster con valores de píxel aleatorios dibujados a partir de una distribución pseudoaleatoria. Se admiten varias distribuciones y generadores de números aleatorios.",
		randomDesc: "La función Aleatorio crea un ráster con valores de píxel aleatorios que se puede utilizar en plantillas de función ráster o datasets de mosaico.<div><br/>Aunque muchas funciones operan en uno o varios rásteres de entrada, la función Aleatorio no requiere ningún ráster de entrada. Significa que se comporta más como un dataset ráster que como una función; por ello, debe prestar especial atención al agregarla o eliminarla de la cadena de funciones.</div>",
		shrinkName: "Encoger",
		shrinkSnip: "Encoge las zonas seleccionadas en una cantidad especificada de celdas al reemplazarlas con el valor de la celda que es más frecuente en la vecindad.",
		shrinkDesc: "Con la función global Encoger, puede generalizar, o simplificar, rásteres haciendo más pequeñas determinadas zonas. También puede controlar la cantidad de generalización que se producirá.<div><br/>Las zonas seleccionadas se encogen, o reducen su tamaño, puesto que las celdas zonas circundantes se expanden sobre ellas. Conceptualmente, puede visualizar los Valores de zona seleccionados como zonas en primer plano, mientras que el resto de valores permanecen en zonas en segundo plano. Las celdas de las zonas en primer plano se pueden sustituir por celdas de las zonas en segundo plano. También es probable que se reemplacen las islas finas dentro de una zona, que pueden verse como que comparten límites con la zona.<div><br/>Es posible controlar la cantidad de generalización con el parámetro Número de celdas. De manera predeterminada, este valor es 1, que significa que las zonas seleccionadas se encogerán según la cantidad que corresponda al tamaño de una celda. Para aumentar el grado de generalización, puede especificar un valor mayor para este parámetro. Conceptualmente, es como ejecutar la herramienta tantas veces como el número especificado, siendo los resultados de la ejecución anterior la entrada a la iteración subsiguiente.</div>",
		trendToRGBName: "De tendencia a RGB",
		trendToRGBSnip: "Convierte un ráster de tendencia en un ráster de tres bandas (roja, verde y azul).",
		trendToRGBDesc: "La función De tendencia a RGB convierte un ráster de tendencia en un ráster de tres bandas (roja, verde y azul). El ráster de tendencia se genera a partir de la función ráster Generar tendencia o la función ráster Análisis CCDC.<div><br/>Esta función resulta útil para visualizar los datos de coeficiente del modelo desde las funciones Generar tendencia o Análisis CCDC. Ambas funciones estiman tendencias para valores de píxel cambiantes, pero los resultados de las funciones son difíciles de interpretar directamente.<div><br/>Al igual que muchas funciones ráster, puede que necesite utilizar Ajuste de rango dinámico (DRA) para visualizar mejor los resultados de esta función.</div>",
		landTrendrName: "Análisis LandTrendr",
		landTrendrSnip: "Evalúa los cambios en los valores de píxel a lo largo del tiempo utilizando la detección de tendencias basada en Landsat en el método de alteraciones y recuperación (LandTrendr) y genera un ráster de análisis de cambios que contiene los resultados del modelo.",
		landTrendrDesc: "Esta función ráster solo se puede utilizar como entrada para la función ráster Detectar cambios con análisis de cambios. Para generar una salida de ráster, conecte la función Análisis LandTrendr con la función Detectar cambios con análisis de cambios en una plantilla de función ráster y utilice la plantilla como entrada en la herramienta de geoprocesamiento Generar ráster a partir de la función Ráster. El resultado es un ráster que contiene información sobre el momento en el que cambiaron los valores de píxel.<div><br>La finalidad de esta función de ráster consiste en extraer cambios en una entidad observada, por lo que las imágenes multidimensionales de entrada ideales deben capturar una observación consistente a través del tiempo y no deben incluir interferencia atmosférica o de sensores, nubes ni sombra de nubes. La mejor práctica consiste en utilizar datos que se hayan normalizado y puedan enmascararse usando una banda de control de calidad, por ejemplo productos de Reflectancia de superficie de Colección de Landsat 1 con una máscara de nube.<div><br>La función realiza análisis en una imagen al año, y el número de periodos anuales debe ser igual o mayor que el valor especificado en el parámetro <strong>Cantidad mínima de observaciones</strong>. Se recomienda disponer de al menos seis años de datos.<div><br>Si tuviera datos mensuales, semanales o diarios, se recomienda seleccionar varias imágenes de cada año (preferiblemente de la misma estación), retirar nubes y sombra de nubes, y combinar las imágenes para generar una única imagen que capture adecuadamente la observación. Si se proporcionan datos mensualmente, semanalmente o diariamente como el ráster multidimensional de entrada, la función identificará una división para análisis basada en la fecha más cercana que se proporciona en el parámetro <strong>Fecha de alineación</strong>.<div><br>Una entidad en un paisaje suele requerir tiempo de recuperación con respecto a un cambio no permanente como por ejemplo un incendio forestal o plaga de insectos. Para controlar la velocidad de recuperación reconocida por el modelo, establezca el parámetro Umbral de recuperación. Un segmento distinto no puede tener una velocidad de recuperación que sea mayor de 1/umbral de recuperación.<div><br>La recuperación de un cambio en el paisaje puede producirse en la dirección positiva o negativa. Por ejemplo, cuando un paisaje experimenta pérdida forestal, una serie temporal de valores del índice de vegetación muestra una caída en los valores del índice, y la recuperación muestra un incremento gradual en los valores del índice de vegetación, o una tendencia de recuperación positiva. Especifique la dirección de la tendencia de recuperación con el parámetro <strong>Recuperación con tendencia en aumento</strong>.",
		aggregateMultidimensionalName: "Agregar multidimensional",
		aggregateMultidimensionalSnip: "Combine los datos de variables de ráster multidimensional existentes a lo largo de una dimensión.",
		aggregateMultidimensionalDesc: "La función Agregar multidimensional crea una capa ráster multidimensional combinando los datos de variables ráster multidimensionales existentes a lo largo de una dimensión.<div><br>Utilice el parámetro <strong>Definición de dimensión</strong> para filtrar primero los datos de entrada que desea agregar. Por ejemplo, si tiene 30 años de datos mensuales, pero solo desea crear una capa agregada de los 15 primeros años, puede utilizar el parámetro <strong>Definición de dimensión</strong> para especificar los años que desea incluir en el análisis.<div><br><ul><li>Extraiga los datos de salinidad para el mes de enero durante el periodo de 10 años. Elija <strong>Por valores</strong>, defina <strong>Dimensión</strong> como <strong>StdTime</strong> y defina <strong>Valores</strong> como <strong>Enero</strong>.</li><li>Divida los datos de salinidad en un rango de profundidad de 0 a 150 metros. Elija <strong>Por rangos</strong>, defina <strong>Dimensión</strong> como <strong>StdZ</strong> y defina <strong>Valor mínimo</strong> como <strong>-150</strong> y <strong>Valor máximo</strong> como <strong>0</strong>.</li><li>Extraiga los datos de salinidad de los primeros 10 días de cada mes de enero durante un periodo de 10 años. Elija <strong>Por iteración</strong>, defina <strong>Dimensión</strong> como <strong>StdTime</strong>, defina <strong>Inicio de la primera iteración</strong> y <strong>Fin de la primera iteración</strong> como el inicio y el fin correspondientes del periodo de iteración, defina <strong>Paso</strong> como <strong>1</strong> y defina <strong>Unidad</strong> como <strong>Años</strong>.</li></ul><div><br>Utilice los parámetros <strong>Definición de agregación</strong> para elegir la dimensión que se va a evaluar y el intervalo de agregación mediante una palabra clave, un valor o un rango de valores. Por ejemplo, si cuenta con 30 años de datos de temperatura de la superficie del mar que se han recopilado diariamente y en cada 5 metros de profundidad hasta llegar a los 100 metros, puede utilizar las distintas opciones de intervalos en estos escenarios:<div><br><ul><li>Agregue datos de temperatura diarios en datos mensuales, donde el resultado es un ráster multidimensional con 12 periodos de tiempo, y cada periodo es la agregación de cada mes a lo largo de los años. Elija <strong>Palabra clave de intervalo</strong> y defina la palabra clave como <strong>Recurrente mensualmente</strong>.</li><li>Agregue datos de temperatura diarios en datos mensuales, donde el resultado es un ráster multidimensional con 360 periodos, o bien 12 periodos de tiempo por año (30 años x 12 meses = 360 periodos). Seleccione <strong>Palabra clave de intervalo</strong> y defina la palabra clave como <strong>Mensualmente</strong>.</li><li>Agregue datos de temperatura mensuales en intervalos de 4 meses. Seleccione <strong>Valor de intervalo</strong>, defina <strong>Intervalo de valor</strong> como 4 y defina <strong>Unidad</strong> como <strong>Meses</strong>.</li><li>Agregue datos de temperatura de 0 a 25 metros, después de 25 a 50 metros, por último, de 50 a 100 metros. Seleccione <strong>Rangos de intervalos</strong> y especifique las profundidades mínima y máxima como <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Fusionar rásters",
		mergeRastersSnip: "Combina varios datasets de ráster espacialmente, o a través de variables y dimensiones.",
		mergeRastersDesc: "Esta función crea un ráster fusionado a partir de una lista de rásteres. Por ejemplo, si tiene un dataset de mosaico con 30 años de datos de precipitaciones mensuales y otro dataset con 10 años de datos de temperatura mensuales, puede combinarlos en un ráster multidimensional con ambas variables. <div><br>Si los rásteres multidimensionales de entrada contienen diferentes variables, el ráster multidimensional de salida contendrá todas las variables. <div><br>Si los rásteres multidimensionales de entrada contienen diferentes dimensiones o valores de dimensiones, el ráster multidimensional incluirá todas las dimensiones y valores de dimensiones. <div><br>Si los rásteres multidimensionales de entrada contienen las mismas dimensiones y variables pero diferentes extensiones espaciales, el ráster multidimensional de salida contendrá las variables y dimensiones a través de las extensiones espaciales fusionadas.<div><br>Esta función también puede utilizarse si tiene varios rásteres que desea tratar como un único elemento, por ejemplo, para calcular las mismas estadísticas para todos, o al realizar un balance de color para no tener que hacerlo en cada imagen por separado. Resulta útil al trabajar con imágenes almacenadas como teselas separadas debido a restricciones de tamaño de archivos; de esta forma, las teselas se tratarán como parte de la misma imagen.",
		boundaryCleanName: "Refinado de límites",
		boundaryCleanSnip: "Suaviza el límite entre zonas.",
		boundaryCleanDesc: "<p>La función generaliza o simplifica rásteres al suavizar los límites entre zonas. La función proporciona opciones para controlar cómo las celdas de las zonas de la entrada influyen en el suavizado y la cantidad de suavizado que se aplicará. Cada celda de entrada se evalúa utilizando sus ocho vecinos inmediatos.</p><p>El proceso de suavizado primero ordena las celdas vecinas por una prioridad en particular. La prioridad determina qué zona de las celdas vecinas puede reemplazar el valor de la celda de procesamiento en la salida.</p><p>La prioridad puede basarse en el valor o en el tamaño de las zonas. El parámetro <strong>Tipo de ordenación</strong> determina el tipo de ordenación que se debe utilizar. </p><p>La configuración predeterminada <strong>No ordenar</strong> evalúa la prioridad en función del valor de las zonas. Las celdas de zonas con valores más grandes tendrán mayor prioridad para expandirse en zonas con valores más pequeños.</p><p>El tamaño o el área total de las zonas se puede utilizar para ordenar la prioridad. Con el ajuste <strong>Descendente</strong>, las zonas se ordenan por tamaño en orden descendente. Las zonas con áreas totales más grandes tendrán prioridad para expandirse en zonas con áreas más pequeñas. Con la configuración <strong>Ascendente</strong> ocurre lo contrario: las zonas con áreas totales más pequeñas tendrán prioridad para expandirse en zonas con áreas totales más grandes.</p><p>La cantidad de suavizado se controla mediante el parámetro <strong>Ejecutar expansión y contracción dos veces</strong>, que determina el número de veces que se realizará el proceso de expansión y contracción.</p><p>Con esta configuración desactivada, el proceso de expansión y contracción se realiza una vez. Con esta configuración activada, el proceso de expansión y contracción se realiza dos veces, lo que da lugar a un grado adicional de suavizado de los límites de la zona.</p><p>Si los valores de las ocho celdas vecinas son los mismos que la celda de procesamiento, la celda de salida conservará el valor de la celda de entrada.</p>",
		predictUsingRegressionName: "Predecir con regresión",
		predictUsingRegressionSnip: "Calcula un ráster predicho basado en las entradas de datos del ráster y un modelo de regresión. El modelo de regresión es el resultado de la herramienta de geoprocesamiento ráster del <strong>modelo de regresión de árboles aleatorios</strong>.",
		predictUsingRegressionDesc: "<p>El modelo de regresión se define en un archivo de definición de regresión de Esri (.ecd). Contiene toda la información de un dataset específico o un conjunto de datasets, así como el modelo de regresión, y se genera con la herramienta de geoprocesamiento ráster <strong>Entrenar modelo de regresión de árboles aleatorios</strong>.</p><p>El resultado puede ser una sola banda, una multibanda, un ráster multidimensional o una lista de estos tipos. Los tipos de los rásteres de resultados deben ser del mismo tipo de ráster entrenado por el modelo de regresión.</p><ul><li>Cuando la entrada es un ráster multibanda, se trata a cada banda como un predictor variable. Las bandas deben tener el mismo orden que la entrada de multibanda para la herramienta de entrenamiento del modelo de regresión.</li><li>Cuando la entrada es un ráster multidimensional, cada variable se trata como una variable de indicador, y la variable debe ser de banda única y debe tener una dimensión de tiempo. El orden y los nombres de las variables deben ser los mismos que los de entrada cuando se entrenó el modelo de regresión. El resultado es un ráster multidimensional.</li><li>El resultado puede ser una lista de elementos. El número de elementos y el orden de los elementos deben coincidir con los de la entrada cuando se entrenó el modelo de regresión.</li></ul>",
		dimensionalMovingStatisticsName: "Estadísticas móviles dimensionales",
		dimensionalMovingStatisticsSnip: "Calcula estadísticas en una ventana móvil de datos multidimensionales a lo largo de una dimensión especificada.",
		dimensionalMovingStatisticsDesc: "<p>La función Estadística móvil dimensional calcula varias estadísticas en una ventana predefinida correspondiente a todos los valores de dimensión a lo largo de una dimensión. Esta función toma una capa ráster multidimensional como entrada y crea una capa ráster multidimensional como salida que tienen el mismo tamaño dimensional que la capa de entrada.</p><p>Puede especificar una dimensión para la que se tienen en cuenta los valores de dimensión durante el cálculo. De forma predeterminada, se calcula a lo largo de la primera dimensión no espacial. También puede especificar un tamaño de ventana especificando los parámetros Ventana regresiva y Ventana progresiva.</p><p>Cuando Tipo de estadísticas se configura en Percentil, los parámetros Valor de percentil y Tipo de interpolación de percentil pasan a estar disponibles. Puede utilizar estos parámetros para especificar el percentil para calcular y elegir respectivamente el tipo de interpolación que se va a utilizar. Cuando Tipo de estadística se configura en Media circular, el parámetro Valor de envoltura circular pasa a estar disponible. El valor de envoltura circular se utiliza para convertir un valor lineal al rango de una media circular determinada.</p>",
		terrainFlattenFunctionName: "Aplanamiento del terreno",
		terrainFlattenFunctionSnip: "Corrige los datos de entrada de radar de apertura sintética (SAR) para detectar distorsiones radiométricas debidas a la topografía.",
		terrainFlattenFunctionDesc: "<p>La función ráster Aplanamiento del terreno corrige los datos de entrada de radar de apertura sintética (SAR) para detectar distorsiones radiométricas debidas a la topografía.</p><p>Los datos de radar de entrada se deben calibrar primero en beta cero. Utilice la herramienta Aplicar calibración radiométrica para calibrar los datos del radar en beta cero.</p><p>Si el DEM de entrada no abarca todo el dataset de SAR, la herramienta generará valores NoData para los píxeles fuera de la extensión del DEM para las salidas de gamma cero, sigma cero, área de dispersión y distorsión geométrica. Para la salida de máscara de distorsión geométrica, la herramienta generará valores no determinados para los píxeles fuera de la extensión del DEM.</p><p>El DEM de entrada debe estar en el sistema de coordenadas geográficas WGS 1984 (EPSG:4326).</p>",
		createColorCompositeFunctionName: "Crear composición de color",
		createColorCompositeFunctionSnip: "Crea un ráster de tres bandas a partir de un dataset ráster multibanda en el que cada banda puede utilizar un cálculo algebraico en función del álgebra de bandas.",
		createColorCompositeFunctionDesc: "<p>La función ráster Crear composición de color crea un ráster de tres bandas a partir de un dataset ráster multibanda en el que cada banda puede utilizar un cálculo algebraico en función del álgebra de bandas.</p><p>Al definir un algoritmo de aritmética de banda, puede introducir una fórmula algebraica de línea única para cada expresión con el fin de crear una salida multibanda. Los operadores admitidos son unarios: suma (+), resta (-), multiplicación (*) y división (/).</p><p>Al utilizar un Id. de banda en una expresión, identifique la banda agregando el prefijo B o b al número de banda.</p><p>Una combinación de bandas habitual utilizada para radar de apertura sintética (SAR) en unidades lineales es VV para rojo, VH para verde y VV/VH para azul. Si los datos de entrada están en decibelios, la combinación de bandas debe ser VV para rojo, VH para verde y VV-VH para azul.</p>",
		surfaceParametersName: "Parámetros de superficie",
		surfaceParametersSnip: "Determina los parámetros de un ráster de superficie como la orientación, la pendiente y varios tipos de curvaturas utilizando métodos geodésicos.",
		surfaceParametersDesc: "<p>La función Parámetros de superficie determina los parámetros de un ráster de superficie como la orientación, la pendiente y varios tipos de curvaturas utilizando métodos geodésicos.</p><p>Esta función se puede utilizar para las siguientes aplicaciones:</p><ul><li>Calcular la orientación y la pendiente utilizando métodos geodésicos.</li><li>Calcular distintos tipos de curvaturas a partir de un ráster de superficie de entrada, por ejemplo, <strong>Curvatura tangencial (curva de nivel normal),</strong> que caracteriza la convergencia topográfica y la divergencia del flujo por la superficie.</li></ul>",
		leastCostCorridorName: "Corredor de menor coste",
		leastCostCorridorSnip: "Calcula la suma de dos rásteres de coste de distancia acumulativo con la opción de aplicar un umbral basado en un porcentaje o un coste acumulativo.",
		leastCostCorridorDesc: "<p>Los rásteres de entrada deben ser la salida de rásteres de acumulación de distancia y dirección hacia atrás desde la función <strong>Acumulación de distancia</strong> o <strong>Asignación de distancia</strong>. Deben basarse en el coste-distancia y se debe utilizar la misma configuración de parámetros al crear las capas para cada origen. En la creación de estos rásteres no deben utilizarse parámetros que dependan de la direccionalidad (factor horizontal, factor vertical y dirección del viaje).</p><p>Los valores del ráster de corredor de salida son la suma del coste acumulativo para alcanzar una ubicación determinada con las mismas unidades que los rásteres de coste-distancia acumulativo de entrada.</p><p>Si un valor de <strong>Umbral</strong> especificado es mayor que el coste acumulativo máximo cuando se suman los dos rásteres de acumulación de distancia, el ráster de corredor de salida abarcará la misma área que los rásteres acumulativos de entrada.</p><p>Si un valor de umbral especificado es menor que el valor mínimo del ráster de corredor, se devuelve un mensaje de advertencia y el ráster de salida estará vacío.</p><p>El ráster de corredor de salida puede contener celdas con costes acumulativos ligeramente mayores que el valor de umbral. Procede de los rásteres de dirección hacia atrás que utilizan celdas que tienen asignados costes ligeramente mayores que el umbral para conectar celdas desconectadas al corredor.</p>",
		geometricMedianName: "Mediana geométrica",
		geometricMedianSnip: "La función Mediana geométrica calcula la mediana geométrica en los píxeles de una serie temporal de imágenes multibanda.",
		geometricMedianDesc: "<p>Esta función reduce el ruido y los valores atípicos en imágenes de serie temporal calculando un píxel de mediana geométrica para cada matriz de píxeles en la pila de imágenes. El algoritmo mantiene las relaciones espectrales entre las bandas del espectro de píxeles, de modo que la salida se puede utilizar en análisis, como los índices de vegetación.</p><p>Las nubes y sombras deben enmascararse con la banda de QA del dataset antes de aplicar esta función.</p><p>Si la imagen de entrada es de punto flotante, como una reflectancia de superficie con valores entre 0 y 1, un valor de épsilon de 0,001 debería producir resultados de calidad.</p>"
	},
	rfxArgs: {
		rasterName: "Calculadora ráster",
		colorSchemeTypeName: "Tipo de esquema de colores",
		colormapName: "Mapa de color",
		colormapNameName: "Nombre de mapa de color",
		colorRampName: "Rampa de color",
		contrastOffsetName: "Desplazamiento de contraste",
		brightnessOffsetName: "Desplazamiento de brillo",
		methodName: "Método",
		bandNamesName: "Nombres de banda",
		bandWavelengthsName: "Longitudes de onda de bandas",
		bandIdsName: "Id. de banda",
		missingBandActionName: "Acción de banda ausente",
		conversionParametersName: "Parámetros de conversión",
		hillshadeTypeName: "Tipo sombreado",
		azimuthName: "Acimut",
		altitudeName: "Altitud",
		slopeTypeName: "Escalado",
		zFactorName: "Factor Z",
		PSPowerName: "Potencia de tamaño de píxel",
		PSZFactorName: "Factor de tamaño de píxeles",
		removeEdgeEffectName: "Deshabilitar interpolación de píxeles de borde predeterminada",
		fromUnitName: "Unidad de origen",
		toUnitName: "Unidad de destino",
		rasterTypeName: "Tipo",
		minName: "Mínimo de salida",
		maxName: "Máximo de salida",
		minPercentName: "Mínimo de porcentaje de recorte",
		maxPercentName: "Máximo de porcentaje de recorte",
		numberOfStandardDeviationName: "Número de desviaciones estándar",
		sigmoidStrengthLevelName: "Nivel de fuerza sigmoidea",
		estimateStatsHistogramName: "Estimar estadísticas",
		DRAName: "Ajuste de rango dinámico",
		statisticsName: "Estadísticas",
		histogramsName: "Histogramas",
		statisticsHistogramName: "Definir estadísticas e histograma",
		computeGammaName: "Gamma automático",
		useGammaName: "Usar gamma",
		gammaName: "Gamma",
		inputNamesName: "Nombres",
		expressionName: "Expresión",
		cellsizeTypeName: "Tipo de tamaño de celda",
		extentTypeName: "Tipo de extensión",
		classifierDefinitionFileName: "Archivo de definición de entrada",
		raster1Name: "Ráster 1",
		raster2Name: "Ráster 2",
		raster3Name: "Ráster 3",
		trueRasterName: "Ráster verdadero",
		falseRasterName: "Ráster falso",
		noDataInterpretationName: "Interpretación de NoData",
		noDataValuesName: "Valores de NoData",
		includedRangesName: "Rangos incluidos",
		curvatureTypeName: "Tipo de curvatura",
		rastersName: "Rásteres",
		attributeTableName: "Tabla",
		attributeTableTypeName: "Tipo de tabla",
		rowsName: "Número de filas",
		columnsName: "Número de columnas",
		kernelName: "Kernel",
		mirrorEdgesName: "Reflejar bordes",
		influencesName: "Influencias",
		fieldsName: "Campos",
		remapsName: "Volver a representar la tabla",
		evalFromName: "Escala de evaluación inicial",
		evalToName: "Escala de evaluación final",
		weightsName: "Pesos",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "Radio de IDW de corto alcance",
		maxVoidWidthName: "Ancho máx. de vacío",
		sigmaGaussianName: "Alisado adaptable",
		contourTypeName: "Tipo de curva de nivel",
		zBaseName: "Base Z",
		numberOfContoursName: "Cantidad de curvas de nivel",
		contourIntervalName: "Intervalo de curvas de nivel",
		nthContourLineInBoldName: "Línea de contorno N en negrita",
		featureClassName: "Entidades de entrada",
		classIndexFieldName: "Campo",
		resolveOverlapMethodName: "Método Resolver superposición",
		resamplingTypeName: "Tipo de remuestreo",
		inputCellsizeName: "Tamaño de celda de entrada",
		outputCellsizeName: "Tamaño de celda de salida",
		pointFeatureClassName: "Puntos iniciales",
		maxGrowthRadiusFieldName: "Campo de radio de crecimiento máximo",
		similarityThresholdFieldName: "Campo de umbral de similitud",
		fillValueFieldName: "Campo de valor de relleno",
		spectralDetailName: "Detalle espectral [1..20]",
		spatialDetailName: "Detalle espacial [1..20]",
		minNumPixelsPerSegmentName: "Tamaño de segmento mínimo en píxeles",
		boundariesOnlyName: "Solo límites de segmento",
		statisticsTypeName: "Tipo de estadísticas",
		fillNoDataOnlyName: "Rellenar solo píxeles NoData",
		inputDataTypeName: "Tipo de datos de entrada",
		angleReferenceSystemName: "Sistema de referencia angular",
		outputDataTypeName: "Tipo de Datos de Salida",
		inputSamplePointFeatureClassName: "Muestras de entrada",
		valueFieldName: "Campo de valor",
		rasterInfoName: "Información de ráster",
		interpolationMethodName: "Método de interpolación",
		radiusName: "Radio",
		radianceGainValuesName: "Ganancia de radiancia",
		radianceBiasValuesName: "Sesgo de radiancia",
		reflectedGainValuesName: "Ganancia de reflectancia",
		reflectedBiasValuesName: "Sesgo de reflectancia",
		sunElevationName: "Elevación del sol (grados)",
		albedoName: "Albedo",
		scaleFactorName: "Factor de escala",
		offsetName: "Desplazamiento",
		thresholdTypeName: "Tipo de umbral",
		thresholdsName: "Umbrales",
		undefinedClassName: "Clase sin definir",
		minValueName: "Mín.",
		maxValueName: "Máx.",
		operationName: "Operación",
		clippingTypeName: "Tipo de clipping",
		clippingGeometryName: "Geometría/ráster de recorte",
		extentName: "Extensión de salida",
		useInputFeatureGeometryName: "Utilizar entidades de entrada para recortar geometría",
		remapDefinitionTypeName: "Tipo de definición de nueva representación cartográfica",
		inputRangeName: "Rangos de entrada",
		outputValuesName: "Valores de salida",
		noDataRangeName: "Rangos de NoData",
		inputFieldName: "Campo de entrada",
		outputFieldName: "Campo de salida",
		inputMaxFieldName: "Campo de máx. de entrada (opcional)",
		remapTableTypeName: "Tipo de tabla de nueva representación cartográfica",
		allowUnmatchedName: "Permitir valores de píxel sin concordancia",
		changeMissingValuesToNoDataName: "Cambiar los valores ausentes por NoData",
		visibleBandIDName: "Id. de banda visible",
		infraredBandIDName: "Id. de banda infrarroja",
		scientificOutputName: "Salida científica",
		bandIndexesName: "Índices de banda",
		constantName: "Constante",
		weightName: "Peso",
		minimumName: "Mínimo",
		maximumName: "Máximo",
		sourceDataName: "Ráster de origen",
		sourceFieldName: "Campo de origen",
		costRasterName: "Ráster de costes",
		maxDistanceName: "Distancia máxima",
		valueRasterName: "Ráster de valor",
		costMultiplierName: "Multiplicador para aplicar a los costes",
		startCostName: "Coste inicial",
		accumCostResistanceRateName: "Tasa de resistencia del coste acumulado",
		capacityName: "Capacidad",
		travelDirectionName: "Dirección del viaje",
		cellSizeName: "Tamaño de celda",
		populationFieldName: "Campo de población",
		areaUnitsName: "Unidades de área",
		outputValueTypeName: "Valores de celda de salida",
		barriersName: "Barreras de entrada",
		destinationDataName: "Ráster de destino",
		destinationFieldName: "Campo de destino",
		pathTypeName: "Tipo de ruta",
		observerFeaturesName: "Entidades de observador",
		analysisMethodName: "Método de análisis",
		analysisTypeName: "Tipo de análisis",
		verticalErrorName: "Error vertical",
		refractivityCoefficientName: "Coeficiente de refracción",
		surfaceOffsetName: "Desplazamiento de superficie",
		observerElevationName: "Elevación de observador",
		observerOffsetName: "Desplazamiento de observador",
		innerRadiusName: "Radio interno",
		innerRadiusIs3DDistanceName: "El radio interno es una distancia 3D",
		outerRadiusName: "Radio externo",
		outerRadiusIs3DDistanceName: "El radio externo es una distancia 3D",
		horizontalStartAngleName: "Ángulo de inicio horizontal",
		horizontalEndAngleName: "Ángulo de finalización horizontal",
		verticalUpperAngleName: "Ángulo superior vertical",
		verticalLowerAngleName: "Ángulo inferior vertical",
		zoneDataName: "Ráster de zona",
		zoneFieldName: "Campo de zona",
		ignoreNoDataName: "Ignorar los NoData en los cálculos",
		temperatureRasterName: "Ráster de temperatura",
		inTemperatureUnitsName: "Unidades de temperatura",
		outHeatIndexTemperatureUnitsName: "Unidades de índice de calor",
		relativeHumidityRasterName: "Ráster de humedad relativa",
		outWindChillTemperatureUnitsName: "Unidades de sensación térmica",
		windSpeedRasterName: "Ráster de velocidad del viento",
		inWindSpeedUnitsName: "Unidades de velocidad del viento",
		valueName: "Valor",
		propertyName: "Nombre de Propiedades",
		jsonName: "JSON de metadatos",
		zoneTableName: "Tabla de atributos zonales",
		attributeFieldNames: "Nombres de campo de atributo",
		backgroundName: "Valor de fondo",
		whereClauseName: "Cláusula Where",
		minimumValueFieldName: "Nombre de campo de valor mínimo",
		maximumValueFieldName: "Nombre de campo de valor máximo",
		outValueFieldName: "Nombre de campo de valor de salida",
		defaultValueName: "Valor de salida predeterminado",
		conversionMatrixName: "Matriz de conversión",
		IsPseudoColorOutputName: "Es una salida en pseudocolor",
		unmappedAsRandomColorName: "Asignar color aleatoriamente a píxeles no asignados",
		distanceMethodName: "Método de distancia",
		flowDirRasterName: "Ráster de dirección de flujo",
		pourPointName: "Ráster de puntos de fluidez",
		pourPointFieldName: "Campo de punto de fluidez",
		constantZName: "Z constante",
		zOffsetName: "Desplazamiento Z",
		geoIdName: "Geoide",
		calibrationTypeName: "Tipo de calibración",
		filterTypeName: "Tipo de filtro",
		filterSizeName: "Tamaño de filtro",
		noiseModelName: "Modelo de ruido",
		noiseVarianceName: "Varianza de ruido",
		additiveNoiseMeanName: "Media de ruido aditivo",
		multiplicativeNoiseMeanName: "Media de ruido multiplicativo",
		numberofLooksName: "Cantidad de aspectos",
		dampingFactorName: "Factor de vaciado",
		maskRasterName: "Ráster de máscara",
		nibbleValuesName: "Utilizar los valores NoData si son los del vecino más próximo (nearest neighbor)",
		nibbleNoDataName: "Celdas NoData de Nibble",
		zLimitName: "Límite Z",
		flowDirectionTypeName: "Tipo de dirección de flujo",
		weightRasterName: "Ráster de peso",
		forceEdgeName: "Forzar todas las celdas de eje para que se desplacen hacia fuera",
		streamRasterName: "Ráster de curso de agua",
		surfaceRasterName: "Ráster de superficie",
		conversionType: "Tipo de conversión",
		distanceRaster1: "Ráster de distancia 1",
		distanceRaster2: "Ráster de distancia 2",
		costDistanceRaster: "Ráster de coste-distancia",
		costBacklinkRaster: "Ráster de vínculo de menor coste",
		overridesName: "Invalidaciones",
		fieldName: "Campo",
		signatureFileOrUrl: "Archivo de firma o URL",
		redName: "Rojo",
		greenName: "Verde",
		blueName: "Azul",
		infraredName: "Infrarrojo",
		panchromaticName: "Pancromático",
		multispectralName: "Multiespectral",
		pansharpeningType: "Tipo de refinado pancromático",
		sensorName: "Sensor",
		spatialReferenceName: "Referencia espacial",
		xCellsizeName: "Tamaño de celda X",
		yCellsizeName: "Tamaño de celda Y",
		xOriginName: "Punto de registro X",
		yOriginName: "Punto de registro Y",
		percentileName: "Valor de percentil",
		neighborhoodType: "Tipo de vecindad",
		widthName: "Ancho",
		heightName: "Altura",
		startAngleName: "Ángulo inicial",
		endAngleName: "Ángulo final",
		neighborhoodValues: "Valores vecinos",
		horizontalRaster: "Ráster horizontal",
		horizontalFactor: "Factores horizontales",
		verticalRaster: "Ráster vertical",
		verticalFactor: "Factor vertical",
		streamRaster: "Ráster de curso de agua",
		flowDirRaster: "Ráster de dirección de flujo",
		numberNeighborCells: "Cantidad de celdas vecinas",
		zoneConnectivity: "Conectividad de zona",
		addLinkBehavior: "Agregar vínculo",
		excludedValue: "Valor excluido",
		constantFillCheck: "Generar ráster de relleno a partir de constante",
		fillRaster: "Ráster de relleno",
		constantFillValue: "Valor constante",
		inputBitPositions: "Bit de entrada",
		outputBitPositions: "Bit de salida",
		distanceTypeName: "Tipo de distancia",
		barrierDataName: "Barreras de ráster",
		pourPointDataName: "Ráster de puntos de fluidez",
		accumulationRasterName: "Ráster de acumulación de flujo",
		snapDistanceName: "Distancia de alineación",
		orderMethodName: "Método de ordenación",
		directionMeasurementName: "Dirección de medición",
		processAsMultiband: "Procesar como multibanda",
		processMultidimensional: "Procesar como multidimensional",
		forceFlowDirectionConvention: "Forzar convención de dirección del flujo para ráster de vínculo",
		initialAccumulation: "Acumulación inicial",
		maximumAccumulation: "Acumulación máxima",
		sourceLocationBands: "Generar fila y columna de origen como bandas adicionales en la salida",
		backDirectionBand: "Generar dirección hacia atrás como banda adicional en la salida",
		numberOfCells: "Número de celdas",
		zoneValues: "Valores de zona",
		shrinkMethod: "Método Encoger",
		expandMethod: "Método de expansión",
		inputSpectralProfileType: "Tipo de perfil espectral",
		spectralProfileFileName: "Perfil espectral",
		trainingFeatureFileName: "Entidad de entrenamiento",
		nonNegative: "No negativo",
		sumToOne: "Sumar uno",
		randomDistribution: "Distribución",
		meanName: "Valor medio",
		probabilityName: "Probabilidad",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "N",
		seed: "Valor de inicialización",
		randomNumberGenerator: "Generador de números aleatorios",
		cellFactor: "Factor de celda",
		aggregationType: "Técnica de agregación",
		extentHandling: "Ampliar la extensión si es necesario",
		trendAnalysisDimensionName: "Nombre de dimensión",
		trendAnalysisType: "Tipo de tendencia",
		harmonicFrequency: "Frecuencia armónica",
		polynomialOrder: "Orden polinómico",
		cycleLengthName: "Longitud del ciclo",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R cuadrado",
		trendAnalysisSlopePValue: "Valor P del coeficiente de pendiente",
		trendAnalysisSeasonalPeriod: "Periodo estacional",
		cycleUnitName: "Unidad de ciclo",
		predictDimensionValues: "Valores",
		dimensionDefinitionType: "Definición de dimensión",
		predictDimensionStart: "Comenzar",
		predictDimensionEnd: "Fin",
		predictDimensionInterval: "Intervalo de valor",
		dimensionUnit: "Unidad",
		interpolationCellsizeName: "Tamaño de celda de interpolación",
		variableName: "Variables",
		dimensionlessName: "Sin dimensión",
		mdimDefinition: "Definición de dimensión",
		dimensionName: "Dimensión",
		iterationStart: "Inicio de la primera iteración",
		iterationEnd: "Final de la primera iteración",
		intervalStart: "Inicio de intervalo",
		intervalEnd: "Fin de intervalo",
		stepName: "Paso",
		rangesName: "Rangos",
		minValue: "Valor mínimo",
		maxValue: "Valor máximo",
		changeAnalysisRasterName: "Ráster de análisis de cambios",
		changeTypeName: "Cambiar tipo",
		segmentDate: "Fecha del segmento",
		changeDirectionName: "Cambiar dirección",
		maxNumChangesName: "Número máximo de cambios",
		filterByYear: "Filtrar por año",
		minimumYear: "Valor Mínimo",
		maximumYear: "Valor Máximo",
		filterByDuration: "Filtrar por duración",
		minimumDuration: "Duración mínima",
		maximumDuration: "Duración máxima",
		filterByMagnitude: "Filtrar por magnitud",
		minimumMagnitude: "Magnitud mínima",
		maximumMagnitude: "Magnitud máxima",
		filterByStartValue: "Filtrar por valor de inicio",
		minimumStartValue: "Valor de inicio mínimo",
		maximumStartValue: "Valor de inicio máximo",
		filterByEndValue: "Filtrar por valor final",
		minimumEndValue: "Valor final mínimo",
		maximumEndValue: "Valor final máximo",
		modelTypeName: "Tipo de modelo",
		fromRasterName: "De ráster",
		toRasterName: "A ráster",
		computeChangeMethod: "Método de cálculo del cambio",
		fromClassValues: "Valores de clase desde (Ejemplo: 2 5)",
		toClassValues: "Valores de clase hasta (Ejemplo: 2 5)",
		keepMethod: "Método de filtrado",
		useColorMethod: "Definir colores de transición",
		detectChangeBands: "Bandas para detectar cambios (empezar en 0)",
		tmaskBands: "Bandas para el enmascaramiento temporal (empezar en 0)",
		chiSquaredThreshold: "Umbral de chi cuadrado para detectar cambios",
		minAnomaly: "Observaciones de anomalías consecutivas mínimas",
		updatingFrequency: "Actualizando la frecuencia de ajuste (en años)",
		distanceAccumulationRasterName: "Ráster de acumulación de distancia",
		costBackdirectionRasterName: "Ráster de dirección de flujo o dirección hacia atrás",
		rasterCollectionName: "Colección de rásteres",
		itemFunctionName: "Función de elemento",
		aggregationFunctionName: "Función de consolidación",
		processingFunctionName: "Función de procesamiento",
		aggregationDefinitionName: "Definición de agregación",
		queryGeometryName: "Geometría de consultas",
		factorFunctionZeroFactor: "Factor cero",
		factorFunctionCutAngle: "Ángulo de corte",
		factorFunctionSideFactor: "Factor de lado",
		factorFunctionSlope: "Pendiente",
		factorFunctionLowCutAngle: "Ángulo de corte bajo",
		factorFunctionHighCutAngle: "Ángulo de corte alto",
		factorFunctionCosPower: "Potencia de coseno",
		factorFunctionSecPower: "Potencia de secante",
		factorFunctionTablePath: "Ruta de tabla",
		processingBand: "Banda de procesamiento",
		processingBandName: "Nombre de la banda de procesamiento",
		snappingDate: "Fecha de alineación",
		maxNumSegments: "Número máximo de segmentos",
		vertexCountOvershoot: "Arco colgante de conteo de vértices",
		spikeThreshold: "Umbral de pico",
		recoveryThreshold: "Umbral de recuperación",
		minNumObs: "Cantidad mínima de observaciones",
		pValueThreshold: "Umbral de valor P",
		bestModelProportion: "Mejor proporción de modelo",
		preventOneYearRecovery: "Prevenir recuperación de un año",
		recoveryIncreaseTrend: "Recuperación con tendencia en aumento",
		outputOtherBands: "Salida otras bandas",
		sortType: "Tipo de ordenación",
		numberOfRuns: "Ejecutar la expansión y el acortamiento en ambos sentidos",
		percentileValue: "Valor de percentil",
		percentileInterpolationType: "Tipo de interpolación percentil",
		rasterInfoProperty: "Propiedad",
		rasterInfoValue: "Valor",
		rasterInfoColumns: "Columnas",
		rasterInfoRows: "Filas",
		rasterInfoBandCount: "Número de bandas",
		rasterInfoPixelSizeX: "Tamaño de celda X",
		rasterInfoPixelSizeY: "Tamaño de celda Y",
		rasterInfoPixelType: "Tipo de píxel",
		rasterExtentTop: "Arriba",
		rasterExtentBottom: "Abajo",
		rasterExtentLeft: "Izquierda",
		rasterExtentRight: "Derecha",
		rasterStatisticsNotCalculated: "No se han calculado las estadísticas.",
		spatialReferenceProjection: "Proyección",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "WKID anterior",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "VCSWKID anterior",
		spatialReferenceAuthority: "Autoridad",
		spatialReferenceLinearUnit: "Unidad lineal",
		spatialReferenceAngularUnit: "Unidad angular",
		spatialReferenceFalseEasting: "Falso Este",
		spatialReferenceFalseNorthing: "Falso Norte",
		spatialReferenceCentralMeridian: "Meridiano central",
		spatialReferencePrimeMeridian: "Meridiano base",
		spatialReferenceStandardParallel1: "Paralelo estándar 1",
		spatialReferenceStandardParallel2: "Paralelo estándar 2",
		spatialReferenceLatitudeOfOrigin: "Latitud de origen",
		spatialReferenceAuxiliarySphereType: "Tipo de esfera auxiliar",
		spatialReferenceDatum: "Datum",
		spatialReferenceSpheroid: "Esferoide",
		spatialReferenceSemimajorAxis: "Semieje mayor",
		spatialReferenceSemiminorAxis: "Semieje menor",
		spatialReferenceInverseFlattening: "Aplanamiento inverso",
		inputDefinitionFileName: "Archivo de definición de entrada",
		deleteName: "Eliminar",
		addVariableName: "Agregar variable",
		maxNumPixelsPerSegment: "Tamaño de segmento máximo en píxeles",
		forwardWindowName: "Ventana de avance",
		backwardWindowName: "Ventana de retroceso",
		noDataHandlingName: "Manejo de NoData",
		circularWrapValueName: "Valor de envoltura circular",
		fromClassNameFieldName: "Nombre de campo para nombres de clase en Desde ráster",
		toClassNameFieldName: "Nombre de campo para nombres de clase en Hasta ráster",
		targetRasterName: "Ráster de destino",
		circularWrapValue: "Valor de envoltura circular",
		bandIndexesR: "Expresión roja",
		bandIndexesG: "Expresión verde",
		bandIndexesB: "Expresión azul",
		exampleName: "Ejemplo",
		inputName: "Entrada",
		outputName: "Salida",
		optionalName: "Opcional",
		browseDefinitionFile: "Examinar archivo de definición",
		selectDefinitionFile: "Seleccionar archivo de definición de entrada",
		inputDefinitionURL: "URL de archivo de definición de entrada",
		enterDefinitionFileURL: "Introducir la URL del archivo de definición",
		browseXMLFile: "Examinar archivo XML",
		selectStatsFile: "Seleccionar archivo de estadísticas e histogramas",
		enterXMLFileURL: "Introducir la URL del archivo XML",
		xmlFileURL: "URL de archivo XML",
		circularCalculation: "Calcular estadísticas circulares",
		localSurfaceType: "Tipo de superficie local",
		surfaceParameterType: "Tipo de parámetro",
		neighborhoodDistance: "Distancia de vecindad",
		useAdaptiveNeighborhood: "Utilizar vecindad adaptable",
		outputSlopeType: "Medida de pendiente de salida",
		projectAzimuths: "Acimuts geodésicos del proyecto",
		useEquatorialAspect: "Utilizar orientación ecuatorial",
		zUnit: "Unidad z",
		analysisMask: "Máscara de análisis",
		stdDeviation: "Desviación estándar",
		"true": "Verdadero",
		"false": "Falso",
		costDistanceRaster1: "Ráster de distancia de coste acumulativo de entrada 1",
		costDistanceRaster2: "Ráster de distancia de coste acumulativo de entrada 2",
		threshold: "Umbral",
		thresholdMethod: "Método de umbral",
		directionRaster1: "Ráster de dirección hacia atrás de entrada 1",
		directionRaster2: "Ráster de dirección hacia atrás de entrada 2",
		maxIterations: "Número máximo de iteraciones",
		epsilon: "Ípsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Manual",
		attributeTableTypeExternal: "Externo",
		clrSchemeTypeColormap: "Mapa de color",
		clrSchemeTypeColorRamp: "Rampa de color",
		colormapTypeElevation: "Elevación",
		colormapTypeGray: "Gris",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Aleatorio",
		none: "Ninguna",
		slopeTypeAdjusted: "Ajustado",
		slopeTypeDegree: "Grado",
		slopeTypePercentRise: "Elevación en porcentaje",
		slopeTypeScaled: "Escalado",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "PercentMinMax",
		stretchTypeSigmoid: "Sigmoideo",
		stretchTypeStdDev: "StdDev",
		hillshadeTypeSimple: "Tradicional",
		hillshadeTypeMultidirectional: "Multidireccional",
		bandComboByNames: "Nombres de banda",
		bandComboByWavelength: "Longitudes de onda de bandas",
		bandComboByIDs: "Id. de banda",
		missingBandActionBestMatch: "Mejor coincidencia",
		missingBandActionFail: "Error",
		unitTypeCelsius: "Centígrados",
		unitTypeCentimeters: "Centímetros",
		unitTypeDecimeters: "Decímetros",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Pies",
		unitTypeFeetPerSec: "Pies por segundo (pies/s)",
		unitTypeInches: "Pulgadas",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilómetros",
		unitTypeKmsPerHour: "Kilómetros por hora (km/h)",
		unitTypeKnots: "Nudos (kn)",
		unitTypeMeters: "Metros",
		unitTypeMetersPerSec: "Metros por segundo (m/s)",
		unitTypeMiles: "Millas",
		unitTypeMilesPerHour: "Millas por hora (mph)",
		unitTypeMillimeters: "Milímetros",
		unitTypeNauticalMiles: "Millas náuticas",
		unitTypeYards: "Yardas",
		unitTypeDecimalDegrees: "Grados decimales",
		unitTypePoints: "Puntos",
		unitTypeUnknown: "Desconocido",
		unitTypeSqMapUnits: "Unidades de mapa Cuadradas",
		unitTypeSqMiles: "Millas cuadradas",
		unitTypeSqKms: "Kilómetros cuadrados",
		unitTypeAcres: "Acres",
		unitTypeHectares: "Hectáreas",
		unitTypeSqYards: "Yardas cuadradas",
		unitTypeSqFt: "Pies cuadrados",
		unitTypeSqInches: "Pulgadas Cuadradas",
		unitTypeSqMts: "Metros cuadrados",
		unitTypeSqCms: "Centímetros Cuadrados",
		unitTypeSqMms: "Milímetros Cuadrados",
		cellsizeTypeFirst: "Primero de",
		cellsizeTypeMin: "Mínimo de",
		cellsizeTypeMax: "Máximo de",
		cellsizeTypeMean: "Valor medio de",
		cellsizeTypeLast: "Último de",
		extentTypeFirst: "Primero de",
		extentTypeIntersection: "Intersección de",
		extentTypeUnion: "Combinación de",
		extentTypeLast: "Último de",
		noDataInterpretAny: "Hacer coincidir con cualquiera",
		noDataInterpretAll: "Hacer coincidir con todos",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Perfil",
		curvatureTypePlanform: "Plano",
		filterTypeLineDetectionHorizontal: "Horizontal de detección de línea",
		filterTypeLineDetectionVertical: "Vertical de detección de línea",
		filterTypeLineDetectionLeftDiagonal: "Diagonal izquierda de detección de línea",
		filterTypeLineDetectionRightDiagonal: "Diagonal derecha de detección de línea",
		filterTypeGradientNorth: "Gradiente norte",
		filterTypeGradientWest: "Gradiente oeste",
		filterTypeGradientEast: "Gradiente este",
		filterTypeGradientSouth: "Gradiente sur",
		filterTypeGradientNorthEast: "Gradiente noreste",
		filterTypeGradientNorthWest: "Gradiente noroeste",
		filterTypeSmoothArithmeticMean: "Suavizar valor medio aritmético",
		filterTypeSmoothing3x3: "Suavizado 3x3",
		filterTypeSmoothing5x5: "Suavizado 5x5",
		filterTypeSharpening3x3: "Nitidez 3x3",
		filterTypeSharpening5x5: "Nitidez 5x5",
		filterTypeLaplacian3x3: "Laplaciano 3x3",
		filterTypeLaplacian5x5: "Laplaciano 5x5",
		filterTypeSobelHorizontal: "Horizontal de Sobel",
		filterTypeSobelVertical: "Vertical de Sobel",
		filterTypeSharpen: "Refinar",
		filterTypeSharpen2: "Refinar más",
		filterTypePointSpread: "Extensión de punto",
		userDefined: "Definido por el usuario",
		ContourTypeLines: "Líneas de curvas de nivel",
		ContourTypeFill: "Relleno de curvas de nivel",
		ContourTypeSmoothOnly: "Suavizar solo superficie",
		rasterizeFirst: "Primero",
		rasterizeLast: "Último(a)",
		rasterizeSmallest: "Más pequeño",
		rasterizeLargest: "Más grande",
		resamplingTypeNearest: "Vecino Más Próximo",
		resamplingTypeBilinear: "Interpolación bilineal",
		resamplingTypeCubic: "Convolución cúbica",
		resamplingTypeMajority: "Mayoría",
		resamplingTypeBilinearPlus: "Interpolación bilineal plus",
		resamplingTypeGauss: "Desenfoque gaussiano",
		resamplingTypeGaussPlus: "Desenfoque gaussiano plus",
		resamplingTypeAverage: "Media",
		resamplingTypeMinimum: "Mínimo",
		resamplingTypeMaximum: "Máximo",
		resamplingTypeVectorAvg: "Promedio vectorial",
		minimum: "Mínimo",
		maximum: "Máximo",
		mean: "Valor medio",
		stdDeviation: "Desviación estándar",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Magnitud-dirección",
		unknown: "Desconocido",
		angleRefSysGeographic: "Geográfico",
		angleRefSysArithmetic: "Aritmética",
		interpolateIrregularDataNearest: "Vecino Más Próximo",
		interpolateIrregularDataBilinear: "Bilineal",
		interpolateIrregularDataTinningLinear: "Simplificación lineal",
		interpolateIrregularDataTinningNaturalNeighbor: "Vecino natural",
		interpolateIrregularDataTinningIDW: "Distancia inversa ponderada",
		esriRasterThresholdTypeConstant: "Constante",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg Max",
		argStatsTypeMin: "Arg Min",
		argStatsTypeMedian: "Arg Medio",
		argStatsTypeDuration: "Duración",
		arithmeticOpPlus: "Plus",
		arithmeticOpMinus: "Resta",
		arithmeticOpMultiply: "Multiplicar",
		arithmeticOpDivide: "Dividir",
		arithmeticOpPower: "Potencia",
		arithmeticOpMode: "Modo",
		clipTypeOutside: "Clip fuera",
		clipTypeInside: "Clip dentro",
		yes: "Sí",
		no: "No",
		densities: "Densidades",
		expectedCounts: "Recuentos esperados",
		planar: "Planar",
		geodesic: "Geodésico",
		eachCell: "Cada celda",
		eachZone: "Cada zona",
		bestSingle: "Mejor Simple",
		allSightlines: "Todas las líneas de visión",
		perimeterSightlines: "Líneas de visión de perímetro",
		frequency: "Frecuencia",
		observers: "Observadores",
		majority: "Mayoría",
		median: "Mediana",
		minority: "Minoría",
		percentile: "Percentil",
		range: "Rango",
		sum: "Suma",
		variety: "Variedad",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "SAVI transformado",
		bandArithmeticMethodMSAVI: "SAVI modificado",
		bandArithmeticMethodSultan: "Fórmula de Sultan",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Óxido de hierro",
		ferrousMinerals: "Minerales ferrosos",
		clayMinerals: "Minerales arcillosos",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Raíz cuadrada",
		localACos: "Arcocoseno (ACos)",
		localASin: "Arcoseno (ASin)",
		localATan: "Arcotangente (ATan)",
		localATanH: "Arcotangente hiperbólica (ATanH)",
		localAbs: "Valor absoluto",
		localBitwiseNot: "Bitwise Not",
		localBooleanNot: "Booleana Not",
		localCos: "Coseno (Cos)",
		localCosH: "Coseno hiperbólico (CosH)",
		localExp: "Exponencial en base e (Exp)",
		localExp10: "Exponencial en base 10 (Exp10)",
		localExp2: "Exponencial en base 2 (Exp2)",
		localInt: "Entero",
		localIsNull: "Es nulo",
		localFloat: "Flotante",
		localLn: "Logaritmo neperiano (Ln)",
		localLog10: "Logaritmo en base 10 (Log10)",
		localLog2: "Logaritmo en base 2 (Log2)",
		localNegate: "Cambio de signo",
		localRoundDown: "Redondeo hacia abajo",
		localRoundUp: "Redondeo hacia arriba",
		localSin: "Seno (Sin)",
		localSinH: "Seno hiperbólico (SinH)",
		localTan: "Tangente (Tan)",
		localTanH: "Tangente hiperbólica (TanH)",
		localACosH: "Arcocoseno hiperbólico (ACosH)",
		localASinH: "Arcoseno hiperbólico (ASinH)",
		localPlus: "Plus",
		localMinus: "Resta",
		localTimes: "Multiplicación",
		localPower: "Potencia",
		localBitwiseAnd: "Bitwise And",
		localBitwiseLeftShift: "Bitwise Left Shift",
		localBitwiseOr: "Bitwise Or",
		localBitwiseRightShift: "Bitwise Right Shift",
		localBitwiseXor: "Bitwise XOr",
		localBooleanAnd: "Booleana And",
		localBooleanOr: "Booleana Or",
		localBooleanXor: "Booleana XOr",
		localDivide: "Dividir",
		localEqualTo: "Igual a",
		localGreaterThan: "Mayor que",
		localGreaterThanEqual: "Mayor o igual que",
		localLessThan: "Menor que",
		localLessThanEqual: "Menor o igual que",
		localMod: "Módulo",
		localNotEqual: "No igual",
		localATan2: "Arcotangente (x/y) (ATan2)",
		localSquare: "Cuadrado",
		localSetNull: "Establecer nulos",
		remapDefTypeList: "Lista",
		remapDefTypeTable: "Tabla",
		remapTableTypeSimple: "Simple",
		remapTableTypeDynamic: "Dynamic",
		remapTableTypeReassignment: "Reasignación",
		geomCorrectionByConstZ: "Usar Z constante",
		geomCorrectionByDEM: "Usar DEM",
		radarCalibBetaNought: "Beta cero",
		radarCalibSigmaNought: "Sigma cero",
		radarCalibGammaNought: "Gamma cero",
		speckleFilterTypeLee: "Filtro Lee",
		speckleFilterTypeEnhancedLee: "Filtro Lee mejorado",
		speckleFilterTypeFrost: "Filtro Congelamiento",
		speckleFilterTypeKuan: "Filtro Kuan",
		speckleNoiseModelMul: "Ruido multiplicativo",
		speckleNoiseModelAdd: "Ruido aditivo",
		speckleNoiseModelAddnMul: "Ruido aditivo y multiplicativo",
		mosaicOpTypeFirst: "Primero",
		mosaicOpTypeLast: "Último(a)",
		mosaicOpTypeMin: "Mín.",
		mosaicOpTypeMax: "Máx.",
		mosaicOpTypeMean: "Valor medio",
		mosaicOpTypeBlend: "Combinar",
		mosaicOpTypeSum: "Suma",
		integer: "Entero",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Vertical",
		horizontal: "Horizontal",
		localCellStatisticsMajority: "Mayoría",
		localCellStatisticsMax: "Máximo",
		localCellStatisticsMean: "Valor medio",
		localCellStatisticsMedian: "Mediana",
		localCellStatisticsMin: "Mínimo",
		localCellStatisticsMinority: "Minoría",
		localCellStatisticsRange: "Rango",
		localCellStatisticsStdDev: "Desviación estándar",
		localCellStatisticsSum: "Suma",
		localCellStatisticsVariety: "Variedad",
		localCellStatisticsMajorityIgnoreND: "Mayoría (ignorar NoData)",
		localCellStatisticsMaxIgnoreND: "Máximo (ignorar NoData)",
		localCellStatisticsMeanIgnoreND: "Media (ignorar NoData)",
		localCellStatisticsMedianIgnoreND: "Mediana (ignorar NoData)",
		localCellStatisticsMinIgnoreND: "Mínimo (ignorar NoData)",
		localCellStatisticsMinorityIgnoreND: "Minoría (ignorar NoData)",
		localCellStatisticsRangeIgnoreND: "Rango (ignorar NoData)",
		localCellStatisticsStdDevIgnoreND: "Desviación estándar (ignorar NoData)",
		localCellStatisticsSumIgnoreND: "Suma (ignorar NoData)",
		localCellStatisticsVarietyIgnoreND: "Variedad (ignorar NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Percentil (ignorar NoData)",
		fromSource: "De origen",
		toSource: "A origen",
		colorspaceConversionRgbToHsv: "RGB a HSV",
		colorspaceConversionHsvToRgb: "HSV a RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Valor medio",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Rectángulo",
		circleNeighborhood: "Círculo",
		annulusNeighborhood: "Anillo",
		wedgeNeighborhood: "Porción de círculo",
		irregularNeighborhood: "Irregular",
		weightNeighborhood: "Peso",
		four: "Cuatro",
		eight: "Ocho",
		within: "Dentro de",
		cross: "Cruz",
		addLink: "Agregar vínculo",
		noLink: "Sin vínculo",
		weightedMean: "Media ponderada",
		ls8QCBitPatternCirrus: "Landsat 8 Cirrus",
		ls8QCBitPatternCloud: "Landsat 8 Nube",
		ls8QCBitPatternCloudShadow: "Landsat 8 Sombra de nube",
		ls8QCBitPatternDesignatedFill: "Landsat 8 Relleno",
		ls8QCBitPatternDroppedFrame: "Landsat 8 Dropped Frame",
		ls8QCBitPatternSnowIce: "Landsat 8 Nieve/Hielo",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 Oclusión del terreno",
		ls8QCBitPatternVegetation: "Landsat 8 Vegetación",
		ls8QCBitPatternWater: "Landsat 8 Agua",
		downStream: "Aguas abajo",
		upStream: "Aguas arriba",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "División actual",
		allSlices: "Todas las divisiones",
		expandDistance: "DISTANCE",
		expandMorphological: "MORFOLÓGICO",
		spectralProfileFile: "Perfil espectral",
		trainingFeatureFile: "Entidad de entrenamiento",
		randomDistributionTypeUniform: "Uniforme",
		randomDistributionTypeUniformInteger: "Entero",
		randomDistributionTypeNormal: "Normal",
		randomDistributionTypeExponential: "Exponencial",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binomial",
		randomDistributionTypeGeometric: "Geométrica",
		randomDistributionTypeNegativeBinomial: "Binomial negativa",
		randomGeneratorTypeStandardCRand: "Rand C estándar",
		randomGeneratorTypeAlgorithmACM599: "Algoritmo 599 capturado por ACM",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Suma",
		medainName: "Mediana",
		trendLinear: "Lineal",
		trendHarmonic: "Armónica",
		trendPolynomial: "Polinómica",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Seasonal Kendall",
		dimensionByValue: "Por valor",
		dimensionByInterval: "Por intervalo",
		mdimDefTypeAll: "Todo",
		mdimDefTypeByValues: "Por valores",
		mdimDefTypeByRanges: "Por rangos",
		mdimDefTypeByIteration: "Por iteración",
		mdimDefTypeByInterval: "Por intervalo",
		mdimDefTypeByTargetRaster: "Por ráster de destino",
		esriTimeUnitsHours: "Horas",
		esriTimeUnitsDays: "Días",
		esriTimeUnitsWeeks: "Semanas",
		esriTimeUnitsMonths: "Meses",
		esriTimeUnitsYears: "Años",
		esriTimeIntervalKeywordHourly: "Cada hora",
		esriTimeIntervalKeywordDaily: "Diariamente",
		esriTimeIntervalKeywordWeekly: "Semanalmente",
		esriTimeIntervalKeywordDekadly: "Cada década",
		esriTimeIntervalKeywordPentadly: "Cada lustro",
		esriTimeIntervalKeywordMonthly: "Mensualmente",
		esriTimeIntervalKeywordQuarterly: "Trimestralmente",
		esriTimeIntervalKeywordYearly: "Anualmente",
		esriTimeIntervalKeywordRecurringDaily: "Recurrente diariamente",
		esriTimeIntervalKeywordRecurringWeekly: "Recurrente semanalmente",
		esriTimeIntervalKeywordRecurringMonthly: "Recurrente mensualmente",
		esriTimeIntervalKeywordRecurringQuarterly: "Recurrente trimestralmente",
		aggDefTypeAll: "Todo",
		aggDefTypeIntervalKeyword: "Palabra clave de intervalo",
		aggDefTypeIntervalValue: "Valor de intervalo",
		aggDefTypeIntervalRanges: "Rangos de intervalos",
		latestChange: "Hora del cambio más reciente",
		earliestChange: "Hora del cambio más temprano",
		largestChange: "Hora del cambio más grande",
		numberOfChanges: "Número de cambios",
		longestChange: "Hora del cambio más largo",
		shortestChange: "Hora del cambio más corto",
		fastestChange: "Hora del cambio más rápido",
		slowestChange: "Hora del cambio más lento",
		allChanges: "Todo",
		increaseChanges: "Aumentar",
		decreaseChanges: "Disminuir",
		segmentBeginning: "Inicio del segmento",
		segmentEnd: "Fin del segmento",
		esriComputeChangeMethodDifference: "Diferencia",
		esriComputeChangeMethodRelativeDifference: "Diferencia relativa",
		esriComputeChangeMethodCategorical: "Diferencia de categoría",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Distancia euclidiana espectral",
		esriComputeChangeMethodMultispectralAngularDifference: "Diferencia de ángulo espectral",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Banda con más cambio",
		esriComputeChangeKeepAll: "Conservar todo",
		esriComputeChangeKeepChangedOnly: "Conservar solo píxeles modificados",
		esriComputeChangeKeepUnchangedOnly: "Conservar solo píxeles no modificados",
		esriComputeChangeUseColorAverage: "Promedio de desde y hasta colores",
		esriComputeChangeUseColorFrom: "Utilizar colores desde",
		esriComputeChangeUseColorTo: "Utilizar colores hasta",
		factorFunctionBinary: "Binario",
		factorFunctionForward: "Hacia delante",
		factorFunctionLinear: "Lineal",
		factorFunctionInvLinear: "Lineal inversa",
		factorFunctionTable: "Tabla",
		factorFunctionSymLinear: "Lineal simétrico",
		factorFunctionSymInvLinear: "Lineal inverso simétrico",
		factorFunctionCos: "Coseno",
		factorFunctionSec: "Secante",
		factorFunctionCosSec: "Secante de coseno",
		factorFunctionSecCos: "Coseno de secante",
		noSort: "No ordenar",
		ascend: "Ascender",
		descend: "Descender",
		autoDetect: "Detección automática",
		nearest: "Más cercano",
		linear: "Lineal",
		esriMonthJanuary: "Enero",
		esriMonthFebruary: "Febrero",
		esriMonthMarch: "Marzo",
		esriMonthApril: "Abril",
		esriMonthMay: "Mayo",
		esriMonthJune: "Junio",
		esriMonthJuly: "Julio",
		esriMonthAugust: "Agosto",
		esriMonthSeptember: "Septiembre",
		esriMonthOctober: "Octubre",
		esriMonthNovember: "Noviembre",
		esriMonthDecember: "Diciembre",
		dimensionalMovingIgnoreNoData: "Datos",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "Rellenar NoData",
		circularMean: "Valor medio circular",
		circularName: "Circular",
		arithmeticName: "Aritmética",
		slopeName: "Pendiente",
		aspectName: "Orientación",
		meanCurvature: "Curvatura media",
		profileCurvature: "Curvatura de perfil (línea de pendiente normal)",
		tangentialCurvature: "Curvatura tangencial (curva de nivel normal)",
		planCurvature: "Curvatura del plano (curva de nivel proyectada)",
		contourGeodesicTorsion: "Torsión geodésica de curvas de nivel",
		gaussianCurvature: "Curvatura gaussiana",
		casoratiCurvature: "Curvatura de Casorati",
		localSurfaceTypeQuadratic: "Cuadrática",
		localSurfaceTypeBiquadratic: "Bicuadrática",
		thresholdNoThreshold: "Ningún umbral",
		thresholdPercentLeastCost: "Porcentaje del menor coste",
		thresholdAccumulativeCost: "Coste acumulativo",
		clrmapTypeHillshade: "Sombreado"
	},
	categoryLabels: {
		sourceCharacteristics: "Características de origen",
		neighborhoodSettings: "Configuración de vecindad",
		statistics: "Estadísticas",
		gamma: "Gamma",
		viewshedParameters: "Parámetros de cuenca visual",
		observerParameters: "Parámetros de observador",
		irregularDataInterpolation: "Interpolación de datos irregulares",
		modelStatistics: "Estadísticas de modelo",
		aggregationDef: "Definición de agregación",
		filterByAttributes: "Filtrar por atributos",
		percentileName: "Percentil",
		rasterInfo: "Información del ráster",
		extent: "Extensión",
		spatialReference: "Referencia espacial"
	},
	outputRasterHelpTexts: {
		outputName: "<p>El nombre de la capa que se creará y se agregará al mapa.</p>",
		resultType: "<p>El tipo de salida que se creará. Las salidas pueden ser capas de imágenes en teselas o capas de imágenes dinámicas.</p>",
		saveResultIn: "<p>El nombre de la carpeta de <b>Mi contenido</b> en la que se guardará el resultado.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Configuración del entorno para el análisis en Map Viewer. </p>",
		outSR: "<p>Especifica el sistema de coordenadas para el análisis y la capa de resultados.</p>",
		extent: "<p>Especifica el área que se va a utilizar para el análisis.</p>",
		snapRaster: "<p>Ajusta la extensión de la salida para que coincida con la alineación de celda de la capa ráster de alineación especificada.</p>",
		cellSize: "<p>Especifica el tamaño o la resolución de celda que se utilizará para crear la capa ráster de salida.</p>",
		mask: "<p>Especifica una capa de máscara, en la que solo se utilizarán para el análisis las celdas que se encuentren dentro del área de la máscara.</p>",
		resamplingMethod: "<p>Especifica cómo interpolar valores de píxel cuando los rásteres de entrada y salida no se alinean.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Tipo no admitido",
		currentlyUnsupported: " Hay pendiente un editor predeterminado para ${missingType}, pero estará disponible próximamente. Cuadro de texto de marcador de posición temporal para especificar entradas basadas en cadenas de caracteres.",
		unsupportedOverrideWarning: "Hay pendiente un componente de editor de excepciones que proporciona una mejor experiencia de usuario para trabajar con los siguientes parámetros, pero estará disponible próximamente:",
		overrideWidgetMissing: "¡Falta el componente de editor de excepciones!",
		uiIncomplete: "Error al enviar trabajo. No se puede ejecutar la función porque algunos de los campos requeridos están incompletos o faltan en la UI.",
		count: "Recuento",
		selectVariables: "Seleccionar variables",
		selectFeature: "Seleccionar una capa de entidades",
		greaterThanErrorMessage: "El número de entrada debe ser mayor que ${min}",
		lesserThanErrorMessage: "El número de entrada debe ser menor que ${max}",
		greaterThanOrEqualErrorMessage: "El número de entrada debe ser mayor o igual que ${min}",
		lesserThanOrEqualErrorMessage: "El número de entrada debe ser menor o igual que ${max}",
		allowScalar: "Seleccione una capa o introduzca una constante",
		selectField: "Seleccionar campo",
		parameterRequired: "Este parámetro es obligatorio.",
		enterAValue: "Introduzca un valor...",
		invalidInput: "El valor introducido no es válido.",
		itemNotFound: "El elemento no existe o no es accesible.",
		itemPermissionDenied: "No tiene permisos para acceder a este elemento.",
		layerNotAvailable: "Fallo al cargar la capa ${layerName}.",
		multipleLayersNotAvailable: "Error al cargar la capa ${layerName} y otros.",
		learnMoreLabel: "Más información",
		fieldNotAvailable: "Error al cargar el campo.",
		allowAnalysis: "No se permite el análisis en el servicio de imágenes.",
		allowAnalysisReason: "Una o varias capas del mapa no figuran aquí porque no permiten el análisis.",
		learnMoreText: "Más información",
		atLeastOneRasterInput: "Al menos una capa de entrada debe ser una capa ráster.",
		browseAnalysisLayers: "Examinar capas",
		activeMapViewExtent: "Usar extensión del mapa actual",
		chooseRaster: "Elegir ráster de recorte",
		chooseGeometry: "Elegir geometría de recorte",
		resultType: "Tipo de resultado",
		saveInFolder: "Guardar en carpeta",
		outputName: "Nombre de salida",
		outputLayerType: "Tipo de capa de salida",
		dynamicImageryLayer: "Capa de imágenes dinámicas",
		tiledImageryLayer: "Capa de imágenes en teselas",
		custom: "Personalizada",
		loading: "Cargando...",
		layerMissing: "Una o varias capas del mapa no figuran aquí porque no permiten el análisis. Más información.",
		browseCoordinateSystems: "Examinar sistemas de coordenadas",
		unableToRepopulateOutSR: "No se puede completar el sistema de coordenadas de salida.",
		defaultTitle: "Ver más",
		"ARC (equal arc-second)": "ARC (arcosegundo equivalente)",
		Africa: "África",
		Antarctica: "Antártida",
		Argentina: "Argentina",
		Asia: "Asia",
		"Asteroid Belt": "Cinturón de asteroides",
		"Atlantic Ocean": "Océano Atlántico",
		Australia: "Australia",
		"Australia and New Zealand": "Australia y Nueva Zelanda",
		Austria: "Austria",
		"BLM (US Feet)": "BLM (pies EE. UU.)",
		Bangladesh: "Bangladés",
		"Beijing 1954": "Pekín 1954",
		Bhutan: "Bután",
		CGCS2000: "CGCS2000",
		Canada: "Canadá",
		Caribbean: "Caribe",
		"Caribbean Sea": "Mar Caribe",
		"Central America": "Centroamérica",
		"Central and North America": "Norteamérica y Centroamérica",
		Colombia: "Colombia",
		Continental: "Continental",
		"County Systems": "Sistemas de condado",
		"Democratic Republic of the Congo": "República Democrática del Congo",
		"EPSG Arctic": "EPSG Arctic",
		Earth: "Tierra",
		"Ellipsoidal-based": "Basado en elipsoidales",
		Europe: "Europa",
		Finland: "Finlandia",
		France: "Francia",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss-Krüger",
		"Geographic Coordinate Systems": "Sistemas de coordenadas geográficas",
		Germany: "Alemania",
		"Gravity-related": "Relacionado con gravedad",
		"Greenwich-based": "Basado en Greenwich",
		"Highways England": "Highways England",
		Illinois: "Illinois",
		"Indian Ocean": "Océano Índico",
		"Indian Subcontinent": "Subcontinente indio",
		Indiana: "Indiana",
		Indonesia: "Indonesia",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irlanda y Reino Unido",
		Italy: "Italia",
		Japan: "Japón",
		Jupiter: "Júpiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libia",
		Malaysia: "Malasia",
		"Malaysia and Singapore": "Malasia y Singapur",
		Mars: "Marte",
		Mercury: "Mercurio",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (pies EE. UU.)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (pies internacional)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (metros)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (pies EE. UU.)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (pies internacional)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (metros)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (pies EE. UU.)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (pies internacional)",
		"NAD 1983 (Meters)": "NAD 1983 (metros)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (metros)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (pies EE. UU.)",
		"NAD 1983 (US Feet)": "NAD 1983 (pies EE. UU.)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (pies internacional)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (metros)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (pies EE. UU.)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (pies internacional)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (metros)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (pies EE. UU.)",
		"National Grids": "Cuadrículas nacionales",
		Navajo: "Navajo",
		Neptune: "Neptuno",
		"New Beijing": "Nuevo Pekín",
		"New Zealand": "Nueva Zelanda",
		"North America": "Norteamérica",
		"Northern Hemisphere": "Hemisferio septentrional",
		Norway: "Noruega",
		Oceans: "Océanos",
		Oregon: "Oregón",
		"Other GCS": "Otros sistemas GCS",
		"Pacific Ocean": "Océano Pacífico",
		Pluto: "Plutón",
		Polar: "Polar",
		Portugal: "Portugal",
		"Projected Coordinate Systems": "Sistemas de coordenadas proyectadas",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Sustituido",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturno",
		"Solar System": "Sistema solar",
		"South Africa": "Sudáfrica",
		"South America": "Sudamérica",
		"South Korea": "Corea del Sur",
		"Southern Hemisphere": "Hemisferio meridional",
		"Spheroid-based": "Basado en esferoides",
		"State Plane": "Plano estatal",
		"State Systems": "Sistemas estatales",
		Sweden: "Suecia",
		"Switzerland and Liechtenstein": "Suiza y Liechtenstein",
		Texas: "Texas",
		Tribal: "Tribal",
		Turkey: "Turquía",
		"US Feet": "Pies de EE. UU.",
		"USA and territories": "Estados Unidos y territorios",
		UTM: "UTM",
		Ukraine: "Ucrania",
		"Unknown Height Systems": "Sistemas de altura desconocidos",
		Uranus: "Urano",
		Venus: "Venus",
		"Vertical Coordinate Systems": "Sistemas de coordenadas verticales",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Mundo",
		"World (Sphere-based)": "Mundo (basado en Sphere)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Listo",
		noResults: "No se encontró ningún resultado",
		searchPlaceholder: "Nombre en WKID",
		browseTemplate: "Examinar plantillas de función ráster",
		saveTemplate: "Guardar plantilla de función ráster",
		preview: "Previsualización",
		previewDescription: "Obtenga una vista previa del resultado antes de ejecutar el análisis.",
		showPreview: "Mostrar vista previa",
		previewLayer: "Capa de vista previa ${number}",
		newPreview: "Nueva vista previa",
		previewPopup: "Habilite la vista previa de los resultados del análisis según los parámetros de entrada.",
		updatePreviewLayer: "Actualizar la capa de vista previa seleccionada",
		createPreviewLayer: "Crear nueva capa de vista previa",
		maximumPreviewAllowed: "Número máximo de capas de vista previa permitidas: ${maxCount}",
		previewFailure: "Esta capa de vista previa no está disponible. Compruebe los parámetros de entrada y vuelva a actualizar esta capa de vista previa.",
		header: "Seleccionar elemento",
		content: "Hay cambios sin guardar en ${rftTitle}. Si vuelve a empezar con una plantilla nueva, esos cambios se perderán.",
		dontSave: "No guardar",
		"continue": "Continuar",
		stretch: "Ajustar a ventana",
		pan: "Desplazamiento panorámico",
		newTemplate: "Crear nueva plantilla",
		openTemplate: "Abrir plantilla",
		addFunction: "Agregar funciones de ráster",
		addConstant: "Agregar constante",
		addRaster: "Agregar variable de ráster",
		move: "Mover",
		zoom: "Zoom",
		saveAs: "Guardar como",
		clear: "Borrar",
		addRasterFunctionTitle: "Agregar funciones de ráster",
		templatePropertiesTitle: "Propiedades de plantilla",
		browseRFT: "Examinar plantillas de función ráster",
		defaultToolDescription: "Herramienta de análisis ${toolTitle}.",
		openToolText: "Herramienta Abrir",
		toolDropdownText: "Menú desplegable de herramientas",
		addToMap: "Confirmar y agregar al mapa",
		confirm: "Confirmar",
		select: "Seleccionar",
		selectTask: "Seleccionar tarea",
		unsupportedLayer: "Este parámetro no admite las siguientes capas: ${layerName}.",
		viewDetails: "Ver todos los detalles del elemento",
		rename: "Cambiar nombre",
		duplicate: "Duplicada",
		launch: "Abrir para ejecutar",
		templateEditor: "Editor de plantillas",
		createItem: "Guardar plantilla de función ráster",
		actionLabel: "Filtrar",
		filterPopoverHeading: "Filtrar las funciones",
		defaultSearchPlaceholder: "Buscar por nombre",
		settings: "Ajustes",
		summary: "Resumen",
		definitionQuery: "Consulta de definición",
		matchVariables: "Variables de coincidencia",
		unionDimension: "Combinar dimensión",
		nameEditorPlaceholder: "Introducir título",
		summaryEditorPlaceholder: "Introduzca una descripción corta.",
		definitionQueryPlaceholder: "Introducir...",
		upload: "Cargar",
		chooseImage: "Haga clic para elegir un archivo",
		update: "Actualizar",
		thumbnailErrors: {
			wrongImageType: "Tipo de imagen incorrecto seleccionado",
			notAvailable: "Vista en miniatura no disponible",
			loadError: "No se puede cargar la imagen",
			chooseFile: "Haga clic para elegir archivo"
		}
	}
};
const copy = "Copiar";
const save = "Guardar";
const title = "Título";
const folder = "Carpeta";
const tags = "Etiquetas";
const savingMessage = "Guardando elemento en";
const shareWith = "Compartir con";
const share = "Compartir";
const setSharingLevel = "Definir nivel de uso compartido";
const setGroupSharing = "Definir uso compartido de grupo";
const owner = "Propietario";
const organization = "Organización";
const everyone = "Todos (público)";
const groups = "Grupos:";
const type = "Tipo";
const mosaic = "Mosaico";
const itemGroup = "Grupo de elementos";
const item = "Elemento";
const definitionQuery = "Consulta de definición";
const groupItemsBy = "Agrupar elementos por";
const groupFieldName = "Nombre de campo de grupo";
const tagFieldName = "Nombre de campo de etiqueta";
const noTitleTagErrorMsg = "Debe proporcionar un título para su elemento y etiquetas para que su mapa aparezca en búsquedas.";
const noTitleErrorMsg = "Debe proporcionar un título para su elemento.";
const noTagErrorMsg = "Debe proporcionar al menos una etiqueta para que las personas puedan encontrar su elemento en búsquedas.";
const error = "Error";
const warning = "Advertencia";
const success = "Correcto";
const details = "Detalles:";
const tryAgain = "Volver a intentarlo";
const toolModeler = {
	save: "Guardar",
	editProperties: "Editar propiedades",
	saveAs: "Guardar como",
	savingNotification: "Guardando cambios en el elemento...",
	savingTitle: "Guardando",
	saveFailedMessage: "Error al guardar los cambios.",
	saveWithErrorsMessage: "Los cambios se guardaron con los siguientes errores.",
	viewItemMessage: "Visualizar el elemento guardado",
	here: "aquí.",
	itemCreatedMessage: "Se ha creado un nuevo elemento.",
	clickToViewItemMessage: "Haga clic en Aceptar para ver la página de detalles del elemento; haga clic en Cancelar para continuar.",
	readingFailed: "Error al cargar la plantilla de función ráster seleccionada.",
	failedToLoadXML: "Error al cargar la plantilla de función ráster seleccionada en formato XML.",
	learnMore: "Más información",
	overwriteTitle: "Confirmar sobrescritura",
	overwriteMessage: "¿Desea sobrescribir el elemento existente?",
	overwriteSuccessMessage: "El elemento se ha actualizado."
};
const toolEditor = {
	run: "Ejecutar",
	save: "Guardar",
	deleteSelected: "Eliminar elementos seleccionados",
	addRaster: "Agregar ráster",
	addScalar: "Agregar escalar",
	layout: "Diseño automático",
	errorTitle: "Error",
	invalidToolMessage: "La plantilla de función ráster no es válida.",
	out: "Salida",
	zoomIn: "Acercar",
	zoomOut: "Alejar",
	zoomToFit: "Ajustar a ventana",
	panOn: "Cambiar al modo de desplazamiento panorámico",
	panOff: "Desactivar modo de desplazamiento panorámico",
	defaultModelName: "Modelo de herramienta",
	defaultRasterName: "Ráster"
};
const toolDetailsEditor = {
	defaultToolName: "Plantilla de función ráster",
	defaultToolDescription: "Agregue un breve resumen sobre la función ráster.",
	defaultHelpText: "Haga clic en el icono de ayuda para editar el texto de ayuda",
	editHelpTitle: "Editar Ayuda",
	saveLabel: "Guardar",
	cancelLabel: "Cancelar",
	thumbnail: {
		wrongImageType: "Tipo de imagen incorrecto seleccionado",
		notAvailable: "Miniatura no disponible",
		loadError: "No se puede cargar la imagen",
		chooseFile: "Haga clic para seleccionar el archivo"
	}
};
const saveUtils = {
	thumbnail: "Vista en miniatura",
	sharing: "Compartir"
};
const close = "Cerrar";
const unsavedWarningExisting = "¿Desea guardar los cambios del elemento <b>${itemTitle}</b>?";
const unsavedWarningNew = "¿Desea guardar los cambios?";
const saveAs = "Guardar como";
const dontSave = "No guardar";
const unsavedTitle = "Cambios no guardados";
const invalidRFTMessage = "La plantilla de función ráster creada no es válida.";
const errorTitle = "Error";
const breadcrumb = "Editor de funciones ráster";
const breadcrumbEditor = "Contenido > Editor de funciones ráster";
const viewerModeTitle = "Solo lectura";
const viewerModeMessage = "El elemento de la plantilla de la función ráster es de solo lectura. Los cambios no se pueden guardar.";
const userStartDirection = "Seleccione una función para empezar a crear una plantilla de función ráster.";
const selectFunction = "Agregar función";
const deselectFunction = "Eliminar función";
const dialogTitle = "Sistema";
const category = "Categorías";
const search = "Buscar funciones ráster";
const categoryNames = {
	analysis: "Análisis",
	appearance: "Apariencia",
	classification: "Clasificación",
	conversion: "Conversión",
	correction: "Corrección",
	dataManagement: "Administración de datos",
	distance: "Distancia",
	distanceLegacy: "Distancia (heredada)",
	hydrology: "Hidrología",
	math: "Matemática",
	mathConditional: "Matemática: condicional",
	mathLogical: "Matemática: lógica",
	mathTrigonometric: "Matemática: trigonométrica",
	reclass: "Reclasificar",
	statistical: "Estadístico",
	surface: "Superficie"
};
const commonStrings_es = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_es);


//# sourceMappingURL=common-strings.es-c65ca642.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,