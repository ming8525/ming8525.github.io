"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-320569"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/color-ramp-8935ed29.js":
/*!*******************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/color-ramp-8935ed29.js ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ COLOR_RAMP_TYPES),
/* harmony export */   a: () => (/* binding */ getRasterSymbolStylerProps),
/* harmony export */   b: () => (/* binding */ getRFxArgColorRampValue),
/* harmony export */   c: () => (/* binding */ convertColorRampToColors),
/* harmony export */   d: () => (/* binding */ createColorRamp),
/* harmony export */   e: () => (/* binding */ getColormapFromColorRamp),
/* harmony export */   f: () => (/* binding */ getDefaultColorRamp),
/* harmony export */   g: () => (/* binding */ getColorRampColors)
/* harmony export */ });
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");






/* eslint-disable @typescript-eslint/restrict-plus-operands */
const COLOR_RAMP_TYPES = {
    ALGORITHMIC_COLOR_RAMP: "AlgorithmicColorRamp",
    MULTIPART_COLOR_RAMP: "MultiPartColorRamp"
};
// Ported from https://devtopia.esri.com/WebGIS/arcgis-js-api/blob/13c39065cc0917772e9db5aed74ab60367317a17/esri/core/colorUtils.ts#L196
function hsv2rgb(color) {
    //handling case where h is negative, computing value between 0-360
    const h = ((color.h + 360) % 360) / 60; //0-6
    const s = color.s / 100; //0-1
    const v = (color.v / 100) * 255; //0-255 (v is max color)
    const c = v * s; //chroma max-min
    const x = c * (1 - Math.abs((h % 2) - 1));
    let rgb;
    switch (Math.floor(h)) {
        case 0:
            rgb = { r: c, g: x, b: 0 };
            break;
        case 1:
            rgb = { r: x, g: c, b: 0 };
            break;
        case 2:
            rgb = { r: 0, g: c, b: x };
            break;
        case 3:
            rgb = { r: 0, g: x, b: c };
            break;
        case 4:
            rgb = { r: x, g: 0, b: c };
            break;
        case 5:
        case 6:
            rgb = { r: c, g: 0, b: x };
            break;
        default:
            rgb = { r: 0, g: 0, b: 0 };
    }
    rgb.r = Math.round(rgb.r + v - c);
    rgb.g = Math.round(rgb.g + v - c);
    rgb.b = Math.round(rgb.b + v - c);
    return rgb;
}
// ported from: https://devtopia.esri.com/WebGIS/arcgis-js-api/blob/7162aee51c2f6d4f011e8b62bbc5a3e858476b75/esri/layers/support/rasterFunctions/rasterFunctionHelper.ts#L362-L375
function convertAlgorithmColorRamp(ramp) {
    // looks like this is always hsv
    const algorithm = ramp.algorithm ?? "esriHSVAlgorithm";
    let { FromColor: fromColor, ToColor: toColor } = ramp;
    if (!Array.isArray(fromColor)) {
        const { r, g, b } = hsv2rgb({ h: fromColor.Hue, s: fromColor.Saturation, v: fromColor.Value });
        fromColor = [r, g, b, fromColor.AlphaValue];
    }
    if (!Array.isArray(toColor)) {
        const { r, g, b } = hsv2rgb({ h: toColor.Hue, s: toColor.Saturation, v: toColor.Value });
        toColor = [r, g, b, toColor.AlphaValue];
    }
    return { type: "algorithmic", algorithm, fromColor, toColor };
}
/**
 * Returns an array of color values from a given color ramp object.
 * @param {any} colorRamp - The color ramp object to extract colors from.
 * @returns {number[][]} An array of color values.
 */
function getColorRampColors(colorRamp) {
    // type === "multipart" from jsapi
    // type === COLOR_RAMP_TYPES.MULTIPART_COLOR_RAMP from persistence
    if (colorRamp?.type === "multipart") {
        const colorRamps = colorRamp.colorRamps;
        const colors = colorRamps.map((_colorRamp) => _colorRamp.fromColor);
        colors.push(colorRamps[colorRamps.length - 1].toColor);
        return colors;
    }
    else {
        return [colorRamp.fromColor, colorRamp.toColor];
    }
}
/**
 * Formats an array of colors to RGBA format.
 * @param {number[][]} colors - The array of colors to format.
 * @returns {Object[]} - The formatted colors in RGBA format.
 */
function formatColorsToRGBA(colors) {
    if (!Array.isArray(colors)) {
        return colors;
    }
    // check if color is already RGBA
    const invalidColors = colors.some((color) => !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_4__.i)(color.r) && !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_4__.i)(color.g) && !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_4__.i)(color.b));
    if (invalidColors) {
        return colors;
    }
    // TODO: Alpha (a) is set to 1, as transparency cannot be modified
    return colors.map((color) => ({ r: color[0], g: color[1], b: color[2], a: 1 }));
}
/**
 * Function is used to convert colorramp object which has "ArrayOfColorRamp",
 * "FromColor", "ToColor" to a colorramp with "fromColor", "toColor", "colorramps"
 * @param colorRamp
 * @returns
 */
function normalizeColorRamp(colorRamp) {
    if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_4__.i)(colorRamp)) {
        return;
    }
    const isNormalized = !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_4__.i)(colorRamp.colorRamps) ||
        (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_4__.i)(colorRamp.toColor) && !(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_4__.i)(colorRamp.fromColor));
    if (isNormalized) {
        return colorRamp;
    }
    const colorRampType = colorRamp?.type === COLOR_RAMP_TYPES.MULTIPART_COLOR_RAMP ? "multipart" : "algorithmic";
    const colorRamps = colorRampType === "multipart"
        ? colorRamp.ArrayOfColorRamp.map((colorramp) => {
            return convertAlgorithmColorRamp(colorramp);
        })
        : undefined;
    const algorithmicColorRamp = colorRampType === "algorithmic" ? convertAlgorithmColorRamp(colorRamp) : undefined;
    const normalizedColorRamp = {
        type: colorRampType,
        colorRamps: colorRamps,
        fromColor: algorithmicColorRamp?.fromColor,
        toColor: algorithmicColorRamp?.toColor
    };
    return normalizedColorRamp;
}
/**
 * TODO: Make function typesafe when jsapi is updated
 * Converts a color ramp to colors array. (Used to persist colorramps)
 * @param {Object} colorRamp - The color ramp to convert.
 * @returns {Object} - The converted color ramp with colors array.
 */
function convertColorRampToColors(colorRamp) {
    const normalizedColorRamp = normalizeColorRamp(colorRamp);
    const rgbColors = getColorRampColors(normalizedColorRamp);
    return formatColorsToRGBA(rgbColors);
}
/**
 * Returns an array of formatted color ramp objects for getRasterSymbolStylerProps.
 * @returns {ColorRamp[]} An array of formatted color ramp objects.
 */
function getRasterColorRamps() {
    const formattedColorRamps = [];
    _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_3__.P.forEach((jsonRamp) => {
        // colorRampUtils.PREDEFINED_JSON_COLOR_RAMPS.forEach((jsonRamp) => {
        formattedColorRamps.push({
            name: _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_3__.a.toJSON(jsonRamp.id),
            // name: colorRampUtils.colorRampDict.toJSON(jsonRamp.id),
            stops: getColorRampColors(jsonRamp)
                .reverse()
                .map((stop) => new _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_2__["default"](stop)),
            tags: ["raster"]
        });
    });
    return formattedColorRamps;
}
/**
 * Returns an object containing symbol styling properties for raster symbols.
 * @param {any} props - The props object.
 * @param {any} options - The options object.
 * @returns {any} An object containing symbol styling properties.
 */
function getRasterSymbolStylerProps(props, options) {
    const { portal } = props;
    const { extraColorRamps = [], defaultColors } = options;
    //fill
    const fill = {
        color: defaultColors || [new _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_2__["default"]([0, 0, 0, 1]), new _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_2__["default"]([255, 255, 255, 1])]
    };
    //stroke
    const stroke = {
        color: new _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_2__["default"]([0, 0, 0, 0.5]),
        size: 1,
        style: "solid"
    };
    // add raster color schemes
    const colorRamps = getRasterColorRamps();
    colorRamps.push(...extraColorRamps);
    colorRamps.sort((a) => (a.tags.indexOf("raster") > -1 ? -1 : 1));
    return {
        portal,
        sections: {
            marker: {
                parts: {
                    preview: false,
                    rotation: false,
                    size: false
                }
            },
            fill: {
                type: "color-ramp",
                style: "continuous",
                colorRamps: colorRamps,
                open: true,
                colorRampsOpen: true,
                transparencyOpen: false,
                parts: {
                    colorRamps: true,
                    transparency: false
                },
                extraParts: {
                    autoStrokeAdjust: false,
                    width: true
                }
            }
        },
        stroke: {
            ...stroke,
            color: [
                new _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_2__["default"]([13, 38, 68, 1]),
                new _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_2__["default"]([56, 98, 122, 1]),
                new _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_2__["default"]([98, 158, 176, 1]),
                new _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_2__["default"]([177, 205, 194, 1]),
                new _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_2__["default"]([255, 252, 212, 1])
            ]
        },
        fill
    };
}
/**
 * Returns the value of a color ramp object as an RFX argument.
 * @param {MultipartColorRamp | AlgorithmicColorRamp} colorramp - The color ramp object to convert.
 * @returns {any} The value of the color ramp object as an RFX argument.
 */
function getRFxArgColorRampValue(colorramp) {
    const normalizedColorRamp = normalizeColorRamp(colorramp);
    if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_4__.i)(normalizedColorRamp)) {
        return;
    }
    // if colorRamp doesn't have clone method, it breaks workflow
    const isColorrampObject = (0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_4__.i)(normalizedColorRamp?.clone);
    const isMultipart = colorramp?.type === "multipart" || colorramp?.type === COLOR_RAMP_TYPES.MULTIPART_COLOR_RAMP;
    const colorRampObject = isColorrampObject
        ? isMultipart
            ? _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_1__["default"].fromJSON(normalizedColorRamp)
            : _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_0__["default"].fromJSON(normalizedColorRamp)
        : normalizedColorRamp;
    return (0,_colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_3__.g)(colorRampObject);
    // return colorRampUtils.getRFxArgColorRampValue(colorRampObject);
}
/**
 * create a colorramp from array of colors;
 * required before passing to getRFxArgColorRampValue
 */
function createColorRamp(colors) {
    const rampColors = [];
    for (let i = 0; i < colors.length - 1; i++) {
        rampColors[i] = new _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_0__["default"]({
            algorithm: "hsv",
            fromColor: colors[i],
            toColor: colors[i + 1] || new _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_2__["default"]({ r: 255, g: 255, b: 255, a: 1 })
        });
    }
    if (colors.length > 2) {
        const colorRamp = new _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_1__["default"]({
            colorRamps: rampColors
        });
        return colorRamp;
    }
    return rampColors[0];
}
/**
 * convert a ColorRamp object/json to a raster colormap. Default colormap size is 256.
 */
function getColormapFromColorRamp(colorRamp, numColors) {
    return (0,_colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_3__.c)(colorRamp, { numColors });
    // return colorRampUtils.convertColorRampToColormap(colorRamp, { numColors });
}
function getDefaultColorRamp() {
    const fistColorramp = _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_3__.P[0];
    // const fistColorramp = colorRampUtils.PREDEFINED_JSON_COLOR_RAMPS[0];
    return _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_1__["default"].fromJSON(fistColorramp);
}



//# sourceMappingURL=color-ramp-8935ed29.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CalciteScale),
/* harmony export */   U: () => (/* binding */ UIDefaults),
/* harmony export */   a: () => (/* binding */ CalciteOverlayPositioning)
/* harmony export */ });
const UIDefaults = {
    Scale: "s",
    PopoverTimer: 60
};
const CalciteScale = {
    s: "s",
    m: "m"
};
const CalciteOverlayPositioning = {
    absolute: "absolute",
    fixed: "fixed"
};



//# sourceMappingURL=ui-utils-928a4096.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,