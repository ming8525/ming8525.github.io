"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-fcb6a6"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-item-browser_31.entry.js":
/*!*************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-item-browser_31.entry.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_item_browser: () => (/* binding */ ArcgisItemBrowser),
/* harmony export */   arcgis_item_browser_actions: () => (/* binding */ ArcgisItemBrowserActions),
/* harmony export */   arcgis_item_browser_bucket_select: () => (/* binding */ ArcgisItemBrowserBucketSelect),
/* harmony export */   arcgis_item_browser_card: () => (/* binding */ ArcgisItemBrowserCard$1),
/* harmony export */   arcgis_item_browser_card_sublayer_select: () => (/* binding */ ArcgisItemBrowserCard),
/* harmony export */   arcgis_item_browser_card_thumbnail: () => (/* binding */ ArcgisItemBrowserCardThumbnail),
/* harmony export */   arcgis_item_browser_content: () => (/* binding */ ArcgisItemBrowserContent),
/* harmony export */   arcgis_item_browser_filter_categories: () => (/* binding */ ArcgisItemBrowserFilterCategories),
/* harmony export */   arcgis_item_browser_filter_collaborations: () => (/* binding */ ArcgisItemBrowserFilterCollaborations),
/* harmony export */   arcgis_item_browser_filter_content_status: () => (/* binding */ ArcgisItemBrowserFilterContentStatus),
/* harmony export */   arcgis_item_browser_filter_date: () => (/* binding */ ArcgisItemBrowserFilterDate),
/* harmony export */   arcgis_item_browser_filter_extent: () => (/* binding */ ArcgisItemBrowserFilterExtent),
/* harmony export */   arcgis_item_browser_filter_folder: () => (/* binding */ ArcgisItemBrowserFilterFolder),
/* harmony export */   arcgis_item_browser_filter_group: () => (/* binding */ ArcgisItemBrowserFilterGroup),
/* harmony export */   arcgis_item_browser_filter_industry: () => (/* binding */ ArcgisItemBrowserFilterIndustry),
/* harmony export */   arcgis_item_browser_filter_item_type: () => (/* binding */ ArcgisItemBrowserFilterItemType),
/* harmony export */   arcgis_item_browser_filter_location: () => (/* binding */ ArcgisItemBrowserFilterLocation),
/* harmony export */   arcgis_item_browser_filter_region: () => (/* binding */ ArcgisItemBrowserFilterRegion),
/* harmony export */   arcgis_item_browser_filter_sharing: () => (/* binding */ ArcgisItemBrowserFilterSharing),
/* harmony export */   arcgis_item_browser_filter_tags: () => (/* binding */ ArcgisItemBrowserFilterTags),
/* harmony export */   arcgis_item_browser_filters: () => (/* binding */ ArcgisItemBrowserFilters),
/* harmony export */   arcgis_item_browser_pagination: () => (/* binding */ ArcgisItemBrowserPagination),
/* harmony export */   arcgis_item_browser_preview: () => (/* binding */ ArcgisItemBrowserPreview),
/* harmony export */   arcgis_item_browser_preview_copy: () => (/* binding */ ArcgisItemBrowserPreviewCopy),
/* harmony export */   arcgis_item_browser_preview_field_details: () => (/* binding */ ArcgisItemBrowserPreviewFieldDetails),
/* harmony export */   arcgis_item_browser_search: () => (/* binding */ ArcgisItemBrowserSearch),
/* harmony export */   arcgis_item_browser_sort: () => (/* binding */ ArcgisItemBrowserSort),
/* harmony export */   arcgis_item_browser_table: () => (/* binding */ ArcgisItemBrowserTable),
/* harmony export */   arcgis_item_browser_table_row: () => (/* binding */ ArcgisItemBrowserTableRow),
/* harmony export */   arcgis_item_browser_top_bar: () => (/* binding */ ArcgisItemBrowserTopBar),
/* harmony export */   arcgis_item_browser_view: () => (/* binding */ ArcgisItemBrowserView)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./resize-a17b7292.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/resize-a17b7292.js");
/* harmony import */ var _thumbnail_bcb89e69_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./thumbnail-bcb89e69.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/thumbnail-bcb89e69.js");
/* harmony import */ var _store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./store-7fa26472.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-7fa26472.js");
/* harmony import */ var _privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./privileges-5c382f61.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js");
/* harmony import */ var _api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./api-2e3a136f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/api-2e3a136f.js");
/* harmony import */ var _privileges_74639dae_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./privileges-74639dae.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-74639dae.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _services_5925c4b4_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./services-5925c4b4.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-5925c4b4.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _categories_9f0f37ee_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./categories-9f0f37ee.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-9f0f37ee.js");
/* harmony import */ var _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./categories-ca134005.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js");
/* harmony import */ var _store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./store-8b1b0846.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js");
/* harmony import */ var _items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./items-a4f5e98b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/items-a4f5e98b.js");
/* harmony import */ var _user_3ea69c3a_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./user-3ea69c3a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-3ea69c3a.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./geocode-64e0b0d3.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/geocode-64e0b0d3.js");
/* harmony import */ var _file_bf8ab90f_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./file-bf8ab90f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/file-bf8ab90f.js");
/* harmony import */ var _badges_555e1b90_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./badges-555e1b90.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/badges-555e1b90.js");
/* harmony import */ var _user_0fa9ff5a_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./user-0fa9ff5a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-0fa9ff5a.js");
/* harmony import */ var _utils_aa26c49f_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./utils-aa26c49f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-aa26c49f.js");
/* harmony import */ var _type_to_icon_7546439f_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./type-to-icon-7546439f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/type-to-icon-7546439f.js");
/* harmony import */ var _utils_2f459d6d_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./utils-2f459d6d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-2f459d6d.js");
/* harmony import */ var _delete_items_32d24534_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./delete-items-32d24534.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/delete-items-32d24534.js");
/* harmony import */ var _url_35875a10_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./url-35875a10.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-35875a10.js");
/* harmony import */ var _service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./service-8c2c4241.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/service-8c2c4241.js");
/* harmony import */ var _query_d62660d4_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./query-d62660d4.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/query-d62660d4.js");
/* harmony import */ var _string_58a5fef3_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./string-58a5fef3.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/string-58a5fef3.js");
/* harmony import */ var _item_c58ffced_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./item-c58ffced.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-c58ffced.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/* harmony import */ var _server_item_8d384796_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./server-item-8d384796.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/server-item-8d384796.js");
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/* harmony import */ var _item_properties_10491b2e_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./item-properties-10491b2e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-properties-10491b2e.js");
/* harmony import */ var _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./add-item-dbbe2f57.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-dbbe2f57.js");
/* harmony import */ var _ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./ui-bca7bcd1.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-bca7bcd1.js");
/* harmony import */ var _functional_81373f6d_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./functional-81373f6d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-81373f6d.js");
/* harmony import */ var _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./item-types-2029b06b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-2029b06b.js");
/* harmony import */ var _group_6a6303b0_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./group-6a6303b0.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/group-6a6303b0.js");
/* harmony import */ var _guid_aeaed84d_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./guid-aeaed84d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-aeaed84d.js");
/* harmony import */ var _storage_0353a769_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./storage-0353a769.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/storage-0353a769.js");
/* harmony import */ var _ags_eb458a03_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./ags-eb458a03.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ags-eb458a03.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */















































function getSearchSublayerIcon(geo) {
    const lookup = {
        point: "point",
        polyline: "line",
        polygon: "polygon",
        nonspatial: "table",
        multipoint: "layer-points"
    };
    return lookup[geo] || "table";
}
const geometryTypeLookup = {
    esriGeometryPoint: "point",
    esriGeometryPolyline: "polyline",
    esriGeometryPolygon: "polygon",
    esriGeometryMultipoint: "multipoint",
    none: "nonspatial",
    table: "nonspatial"
};
/* Convert a real feature layer to the search result index's form **/
function getSearchResultSublayer(sublayer) {
    const { description, geometryType, fieldAliases, title, id } = sublayer;
    return {
        description,
        fieldAliases: Array.isArray(fieldAliases) ? fieldAliases.join(",") : fieldAliases,
        geometryType: geometryTypeLookup[geometryType] || "nonspatial",
        id,
        title
    };
}

/**
 * Check if items are being stored with sublayers
 */
function isSublayer(selectedItem) {
    const entry = selectedItem;
    return !!(entry.item && entry.sublayer);
}
/**
 * Given a selected item entry and an item + sublayer,
 * determine if they represent the same entity
 */
function isSameItem({ item, sublayer, selectedItem }) {
    var _a, _b;
    if (isSublayer(selectedItem) && sublayer) {
        return (item === null || item === void 0 ? void 0 : item.id) === ((_a = selectedItem.item) === null || _a === void 0 ? void 0 : _a.id) && sublayer.id === ((_b = selectedItem.sublayer) === null || _b === void 0 ? void 0 : _b.id);
    }
    else {
        return (item === null || item === void 0 ? void 0 : item.id) === selectedItem.id;
    }
}
/**
 * Check if an item is present in a set of selected items
 */
function isSelected({ item, sublayer, selectedItems }) {
    return selectedItems.some((selectedItem) => isSameItem({ item, sublayer, selectedItem }));
}
/**
 * Filter out an item from a set of selected items
 */
function deselectItem({ item, sublayer, selectedItems }) {
    return selectedItems.filter((selectedItem) => !isSameItem({ item, sublayer, selectedItem }));
}
/**
 * Add an element to the selectedItems array
 */
function selectItem({ item, sublayer, selectedItems }) {
    // assume that if there is a sublayer we should be storing in that form
    const entry = sublayer ? { item, sublayer } : item;
    if (!isSelected({ item, sublayer, selectedItems })) {
        return [...selectedItems, entry];
    }
    return [...selectedItems];
}
/**
 * Find all selected sublayers for a given item
 */
function findSelectedSublayers({ item, selectedItems }) {
    return selectedItems.filter((selectedItem) => { var _a; return ((_a = selectedItem.item) === null || _a === void 0 ? void 0 : _a.id) === (item === null || item === void 0 ? void 0 : item.id); });
}

const arcgisItemBrowserCss = ":host{position:relative;display:flex;height:100%;min-height:100%;width:100%;flex-direction:column;overflow-y:auto;overflow-x:hidden;background-color:var(--calcite-color-background);--item-browser-max-width:100%;--item-browser-pane-width:18.75rem;--item-browser-pane-z-index:11;--item-browser-top-bar-background:var(--calcite-color-foreground-1)}:host([height=auto]){display:flex;height:auto;flex-direction:column}arcgis-browser{--arcgis-browser-max-width:var(--item-browser-max-width);--arcgis-browser-pane-width:var(--item-browser-pane-width);--arcgis-browser-pane-z-index:var(--item-browser-pane-z-index);--arcgis-browser-top-bar-background:var(--item-browser-top-bar-background)}.content--padded-bottom{padding-bottom:1.5rem}@media screen and (max-width: 640px){:host{--item-browser-pane-width:100%}}";

const ArcgisItemBrowser = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserUpdate = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserUpdate", 7);
        this.arcgisItemBrowserLoading = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserLoading", 7);
        this.arcgisItemBrowserSelect = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserSelect", 7);
        this.arcgisItemBrowserPreview = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserPreview", 7);
        this.arcgisItemBrowserSublayerPreview = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserSublayerPreview", 7);
        this.arcgisItemBrowserInternalUIAction = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserInternalUIAction", 7);
        this.liveRegionUpdate = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "liveRegionUpdate", 7);
        this.allowFetch = false;
        this.currentResults = [];
        this.updateFiltersEmpty = () => {
            var _a;
            this.store.state.filtersEmpty = !((_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelector(`[slot="filters"]`));
        };
        this.updateTopbarEmpty = () => {
            var _a;
            this.store.state.topbarEmpty = !((_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelector(`[slot="top-bar"]`));
        };
        this.updateSortEmpty = () => {
            var _a;
            this.store.state.sortEmpty = !((_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelector(`[slot="sort"]`));
        };
        this.filterMutationObserver = new MutationObserver(this.updateFiltersEmpty);
        this.topbarMutationObserver = new MutationObserver(this.updateTopbarEmpty);
        this.sortMutationObserver = new MutationObserver(this.updateSortEmpty);
        this.fetchItems = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.d)(async () => {
            var _a, _b;
            this.loading = true;
            this.arcgisItemBrowserLoading.emit();
            this.currentResults = [];
            this.store.state.preview = null;
            if (!this.portal || !this.allowFetch) {
                this.loading = false;
                return;
            }
            let query = this.getQuery();
            if (this.preflight) {
                query = await this.preflight(query);
            }
            const { response, error } = await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.m)(this.queryItems(query), 500);
            // TODO: handle more error cases here.
            // for now this is a no-op for the recycle bin case.
            if (error) {
                return;
            }
            this.arcgisItemBrowserUpdate.emit(Object.assign(Object.assign(Object.assign({}, response), { selectedItems: this.selectedItems, filters: (0,_thumbnail_bcb89e69_js__WEBPACK_IMPORTED_MODULE_7__.c)(Object.assign({}, this.store.state.filters), this.bucket), searchTerm: this.searchTerm, recycleBin: this.store.state.recycleBin }), this.sort));
            this.currentResponse = response;
            this.currentResults = response.results;
            // add all tags from the items to the tags picker.
            this.store.state.knownTags = (0,_thumbnail_bcb89e69_js__WEBPACK_IMPORTED_MODULE_7__.a)(response, this.store.state.knownTags, (_b = (_a = this.store.state.filters) === null || _a === void 0 ? void 0 : _a.tags) === null || _b === void 0 ? void 0 : _b.tags);
            this.store.state.highlights = (0,_thumbnail_bcb89e69_js__WEBPACK_IMPORTED_MODULE_7__.b)(response, _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config);
            await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(100);
            this.loading = false;
        }, 150);
        this.resize = () => {
            var _a, _b;
            const width = this.el.clientWidth || ((_a = this.el.parentElement) === null || _a === void 0 ? void 0 : _a.clientWidth) || 0;
            const height = this.el.clientHeight || ((_b = this.el.parentElement) === null || _b === void 0 ? void 0 : _b.clientHeight) || 0;
            this.formFactor = width > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.sm ? "large" : "small";
            const oldFormFactor = this.store.state.width > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.sm ? "large" : "small";
            /** when going from large to small or small to large, collapse or expand filters, accordingly */
            if (oldFormFactor === "large" && this.formFactor === "small") {
                /** use panel layout if enabled on smaller item browsers */
                this.store.state.panel = this.usePanelLayout;
                this.store.state.filtersExpanded = false;
            }
            if (oldFormFactor === "small" && this.formFactor === "large") {
                /** panel layout won't work on larger item browsers */
                this.store.state.panel = false;
                this.store.state.filtersExpanded = true;
            }
            this.store.state.width = width;
            this.store.state.height = height;
        };
        this.renderSelectedItem = (selectedItem) => {
            const usingSublayers = isSublayer(selectedItem);
            const item = usingSublayers ? selectedItem.item : selectedItem;
            const sublayer = usingSublayers ? selectedItem.sublayer : null;
            const description = usingSublayers ? sublayer.title : null;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-selected-item", { heading: item.title, description: description, onArcgisSelectedItemRemove: () => {
                    this.selectedItems = deselectItem({ item, sublayer, selectedItems: this.selectedItems });
                    this.arcgisItemBrowserSelect.emit(this.selectedItems);
                } }, usingSublayers ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { slot: "content-start", icon: getSearchSublayerIcon(selectedItem.sublayer.geometryType), scale: "s" })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-type", { slot: "content-start", item: item, portal: this.portal, scale: "s", showText: false }))));
        };
        this.api = undefined;
        this.portal = undefined;
        this.user = undefined;
        this.subscriptionInfo = undefined;
        this.userLicensedItems = undefined;
        this.config = undefined;
        this.groupId = undefined;
        this.selection = "none";
        this.selectedItems = [];
        this.allowedGeometries = [..._thumbnail_bcb89e69_js__WEBPACK_IMPORTED_MODULE_7__.d];
        this.allowedSubscriptionContentTypes = undefined;
        this.view = "list";
        this.bucket = undefined;
        this.num = 20;
        this.q = "";
        this.filter = "";
        this.height = "full";
        this.preflight = undefined;
        this.fetch = undefined;
        this.showFieldStatistics = false;
        this.store = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_1__.c)({ filters: {} });
        this.hidePreviewFooters = false;
        this.hideContentTop = false;
        this.contentPaddedBottom = false;
        this.usePanelLayout = false;
        this.baseUrls = {};
        this.searchTerm = "";
        this.sort = undefined;
        this.page = { num: this.num, start: 1, nextStart: -1 };
        this.loading = true;
        this.formFactor = undefined;
        this.previewItem = undefined;
        this.currentResponse = undefined;
    }
    /** Manually trigger a fetch of new results */
    async refresh() {
        this.fetchItems();
    }
    async componentWillLoad() {
        const { el, groupId, view, bucket, allowedGeometries, selectedItems, showFieldStatistics } = this;
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_5__.g)(el);
        this.i18n = locale[0];
        if (bucket) {
            this.store.state.bucket = bucket;
        }
        this.store.state.groupId = groupId;
        this.store.state.i18n = locale[0];
        this.store.state.lang = locale[1];
        this.store.state.view = view;
        this.store.state.selection = this.selection;
        this.store.state.selectedItems = selectedItems;
        this.store.state.allowedGeometries = allowedGeometries;
        this.store.state.showFieldStatistics = showFieldStatistics;
        this.store.state.interaction = "keyboard";
        this.initializeConfig();
        this.store.state.width = 420;
        this.store.state.panel = true;
        this.store.state.filtersExpanded = false;
        this.formFactor = "small";
        this.filterMutationObserver.observe(el, { childList: true });
        this.topbarMutationObserver.observe(el, { childList: true });
        this.sortMutationObserver.observe(el, { childList: true });
        this.updateFiltersEmpty();
        this.updateTopbarEmpty();
        this.updateSortEmpty();
        this.resize();
        this.resizeHandler = () => requestAnimationFrame(this.resize);
        window.addEventListener("resize", this.resizeHandler);
        if (this.usePanelLayout || (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_3__.c)(this.el, "calcite-shell-panel")) {
            this.store.state.panel = true;
            this.store.state.filtersExpanded = false;
        }
    }
    disconnectedCallback() {
        var _a;
        (_a = this.store.state.resizeObserver) === null || _a === void 0 ? void 0 : _a.unobserve(this.el);
        this.filterMutationObserver.disconnect();
        this.topbarMutationObserver.disconnect();
        this.sortMutationObserver.disconnect();
        this.filterClearHandler(false);
        window.removeEventListener("resize", this.resizeHandler);
    }
    updateUser(newUser) {
        var _a;
        (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) !== null && _a !== void 0 ? _a : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user = newUser);
    }
    updateUserLicensedItems(licensedItems) {
        var _a;
        (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.userLicensedItems) !== null && _a !== void 0 ? _a : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.userLicensedItems = licensedItems);
    }
    updateSubscriptionInfo(subscriptionInfo) {
        var _a;
        (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.subscriptionInfo) !== null && _a !== void 0 ? _a : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.subscriptionInfo = subscriptionInfo);
    }
    updatePortal(newPortal) {
        var _a;
        (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) !== null && _a !== void 0 ? _a : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal = newPortal);
    }
    updateAPI(newValue) {
        var _a;
        (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.api) !== null && _a !== void 0 ? _a : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.api = newValue);
    }
    updateConfig(newConfig) {
        var _a;
        (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config) !== null && _a !== void 0 ? _a : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config = newConfig);
    }
    updateSelection(newValue) {
        this.store.state.selection = newValue;
    }
    updateGroupID(id) {
        this.store.state.groupId = id;
    }
    updateSublayerSelectionGeometryTypes(types) {
        this.store.state.allowedGeometries = types;
    }
    updateSelectedItems(items) {
        this.store.state.selectedItems = items;
    }
    updateFieldStatistics(value) {
        this.store.state.showFieldStatistics = value;
    }
    updateView(view) {
        this.store.state.view = view;
    }
    updateBucket(bucket) {
        var _a, _b, _c, _d;
        this.store.state.bucket = bucket;
        const isMyRecycleBin = bucket === "my" && ((_b = (_a = this.store.state.filters) === null || _a === void 0 ? void 0 : _a.folder) === null || _b === void 0 ? void 0 : _b.folder) === "recycle";
        const isOrgRecycleBin = bucket === "org" && ((_d = (_c = this.store.state.filters) === null || _c === void 0 ? void 0 : _c.contentType) === null || _d === void 0 ? void 0 : _d.contentType) === "recycle";
        this.store.state.recycleBin = isMyRecycleBin || isOrgRecycleBin;
        this.selectedItems = [];
        this.arcgisItemBrowserSelect.emit(this.selectedItems);
        this.fetchItems();
    }
    updateQ() {
        this.resetPagination();
        this.fetchItems();
    }
    async componentDidLoad() {
        this.resize();
        this.initializeConfig();
        // initially, fetch is locked
        // wait for all components to emit events impacting state prior to initial fetch
        await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(400);
        this.allowFetch = true;
        if (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) {
            this.fetchItems();
        }
        else {
            (0,_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.o)("portal", () => {
                this.initializeConfig();
                this.fetchItems();
            });
        }
    }
    filterHandler(e) {
        var _a, _b;
        const filters = Object.assign(Object.assign({}, this.store.state.filters), { [e.detail.id]: e.detail });
        // when we move to the recycle bin, set a flag in state
        if (((_a = e.detail) === null || _a === void 0 ? void 0 : _a.id) === "folder") {
            this.store.state.recycleBin = e.detail.folder === "recycle";
        }
        if (((_b = e.detail) === null || _b === void 0 ? void 0 : _b.id) === "contentType") {
            this.store.state.recycleBin =
                e.detail.contentType === "recycle";
        }
        // remove filter from set
        if (!e.detail.value) {
            delete filters[e.detail.id];
        }
        this.store.state.filters = filters;
        this.resetPagination();
        this.fetchItems();
    }
    filterRemoveHandler(e) {
        if (!e.detail) {
            return;
        }
        const filters = Object.assign({}, this.store.state.filters);
        delete filters[e.detail];
        this.store.state.filters = filters;
        this.resetPagination();
        this.fetchItems();
    }
    filterClearHandler(doFetchItems = true) {
        const newFilters = {};
        const filters = this.store.state.filters;
        // preserve filters we don't show in the filter chip set
        if (this.bucket === "my" && (filters === null || filters === void 0 ? void 0 : filters.folder)) {
            newFilters.folder = filters.folder;
        }
        if (this.bucket === "group" && (filters === null || filters === void 0 ? void 0 : filters.group)) {
            newFilters.group = filters.group;
        }
        this.store.state.filters = newFilters;
        this.resetPagination();
        doFetchItems && this.fetchItems();
    }
    genericFilterClearHandler() {
        this.filterClearHandler();
    }
    searchHandler(e) {
        const newTerm = e.detail;
        this.searchTerm = newTerm;
        this.resetPagination();
        if (newTerm) {
            this.fetchItems();
        }
        else {
            this.fetchItems.invoke();
        }
    }
    bucketHandler(e) {
        this.store.state.bucket = e.detail;
        this.bucket = e.detail;
        this.store.state.recycleBin = false;
        this.resetPagination();
        this.fetchItems();
    }
    sortHandler(e) {
        this.sort = e.detail;
        this.store.state.sort = e.detail;
        this.fetchItems();
    }
    viewHandler(e) {
        this.view = e.detail;
        this.store.state.view = e.detail;
    }
    async pageHandler(e) {
        var _a;
        this.page = e.detail;
        if (this.allowFetch) {
            await this.fetchItems();
            await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(400);
            (_a = this.el.shadowRoot.querySelector(".scrolling")) === null || _a === void 0 ? void 0 : _a.scrollTo({ behavior: "smooth", top: 0 });
        }
    }
    selectHandler(e) {
        const selectedItems = this.selectedItems;
        const { selected, item, sublayer } = e.detail;
        switch (this.selection) {
            case "single":
            case "single-sublayer":
                // by passing an empty array for selected items we ensure only the current item is selected
                this.selectedItems = selectItem({ item, sublayer, selectedItems: [] });
                break;
            case "multiple":
            case "multiple-sublayer":
                this.selectedItems = selected
                    ? selectItem({ item, sublayer, selectedItems })
                    : deselectItem({ item, sublayer, selectedItems });
                break;
        }
        this.arcgisItemBrowserSelect.emit(this.selectedItems);
    }
    async togglePreview({ detail }) {
        this.store.state.filtersExpanded = false;
        // don't show preview for recycle bin
        if (this.store.state.recycleBin) {
            return;
        }
        if (!detail || this.store.state.preview === detail.id) {
            this.store.state.preview = null;
            this.previewItem = null;
            this.arcgisItemBrowserPreview.emit();
            this.arcgisItemBrowserSublayerPreview.emit();
            this.restoreFocus();
        }
        else {
            this.restoreFocusElement = document.activeElement;
            this.store.state.preview = detail.id;
            this.previewItem = Object.assign({}, detail);
            this.arcgisItemBrowserPreview.emit(Object.assign({}, detail));
        }
        this.arcgisItemBrowserInternalUIAction.emit({
            action: this.previewItem ? "open panel" : "close panel",
            category: "card action"
        });
    }
    tileSelectHandler(e) {
        const { item } = e.detail;
        this.arcgisItemBrowserSelect.emit([item]);
    }
    columnUpdateHandler(e) {
        this.store.state.columns = e.detail;
    }
    handleMove() {
        this.store.state.interaction = "mouse";
    }
    handleTouch() {
        this.store.state.interaction = "touch";
    }
    handleKey() {
        this.store.state.interaction = "keyboard";
    }
    async initializeConfig() {
        var _a, _b, _c, _d;
        (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.api) !== null && _a !== void 0 ? _a : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.api = this.api);
        (_b = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) !== null && _b !== void 0 ? _b : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user = this.user);
        (_c = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) !== null && _c !== void 0 ? _c : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal = this.portal);
        (_d = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config) !== null && _d !== void 0 ? _d : (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config = this.config);
    }
    resetPagination() {
        this.page.start = 1;
        this.page.total = 0;
    }
    getQuery() {
        return Object.assign(Object.assign({ filters: this.store.state.filters, searchTerm: this.searchTerm, baseQuery: this.q, baseFilter: this.filter, bucket: this.bucket, allowedGeometries: this.allowedGeometries }, this.sort), this.page);
    }
    async queryItems(query) {
        var _a, _b;
        let response;
        if (this.fetch) {
            response = await this.fetch(query);
        }
        else {
            const { portal, user, store, groupId, config } = this;
            try {
                response = await (0,_thumbnail_bcb89e69_js__WEBPACK_IMPORTED_MODULE_7__.q)({ portal, query, user, store, groupId, config });
            }
            catch (error) {
                return { error };
            }
        }
        if (await (0,_thumbnail_bcb89e69_js__WEBPACK_IMPORTED_MODULE_7__.i)(this.portal, (_a = this.store) === null || _a === void 0 ? void 0 : _a.state.bucket)) {
            (_b = response === null || response === void 0 ? void 0 : response.results) === null || _b === void 0 ? void 0 : _b.forEach(({ id }) => {
                this.baseUrls[id] = "arcgis.com";
            });
        }
        return { response };
    }
    restoreFocus() {
        if (this.restoreFocusElement) {
            const el = this.restoreFocusElement;
            if (el.restoreFocus) {
                el.restoreFocus();
            }
            else if (el.setFocus) {
                el.setFocus();
            }
            else if (el.focus) {
                el.focus();
            }
        }
    }
    renderSelected() {
        var _a, _b, _c, _d, _e, _f;
        const wholePageSelected = ((_a = this.currentResults) === null || _a === void 0 ? void 0 : _a.length) &&
            ((_b = this.currentResults) === null || _b === void 0 ? void 0 : _b.every((item) => isSelected({ item, selectedItems: this.selectedItems })));
        const totalSelectedItems = (_c = this.selectedItems) === null || _c === void 0 ? void 0 : _c.length;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-selected", { slot: "selection", loading: this.loading, total: (_d = this.currentResults) === null || _d === void 0 ? void 0 : _d.length, totalSelected: (_e = this.store.state.selectedItems) === null || _e === void 0 ? void 0 : _e.length, hideSelectedText: this.store.state.width < _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.sm, heading: this.selection === "multiple-sublayer"
                ? this.i18n.itemBrowser.selectedLayers
                : this.i18n.itemBrowser.selectedItems, emptyText: this.selection === "multiple-sublayer"
                ? this.i18n.itemBrowser.noSelectedLayers
                : this.i18n.itemBrowser.noSelectedItems, checked: wholePageSelected, indeterminate: !wholePageSelected && !!totalSelectedItems, hideCheckbox: this.selection === "multiple-sublayer", onArcgisSelectedDeselectAll: () => {
                this.selectedItems = [];
                this.arcgisItemBrowserSelect.emit(this.selectedItems);
            }, onArcgisSelectedSelectPage: () => {
                var _a;
                let selectedItems = [...this.selectedItems];
                (_a = this.currentResults) === null || _a === void 0 ? void 0 : _a.forEach((item) => {
                    selectedItems = selectItem({ item, selectedItems });
                });
                this.selectedItems = selectedItems;
                this.arcgisItemBrowserSelect.emit(this.selectedItems);
            } }, (_f = this.store.state.selectedItems) === null || _f === void 0 ? void 0 : _f.map(this.renderSelectedItem)));
    }
    renderSlot(name, defaultContent) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: name }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: name }, defaultContent)));
    }
    render() {
        const { previewItem, loading, hideContentTop, i18n, selectedItems, selection, currentResponse, store, api, renderSlot, searchTerm, formFactor, view, height } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser", { preview: !!previewItem, loading: loading, hideContentTop: hideContentTop, selected: selectedItems, alwaysShowSelection: selection === null || selection === void 0 ? void 0 : selection.includes("multiple"), alwaysShowContent: view === "table", response: currentResponse, store: store, api: api, formFactor: formFactor, searchTerm: searchTerm, height: height }, renderSlot("top-bar"), renderSlot("view"), renderSlot("sort"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-preview", { slot: "preview", item: this.previewItem, portal: this.portal, user: this.user, key: this.store.state.preview, onArcgisItemBrowserPreviewClose: () => {
                this.store.state.preview = null;
                this.arcgisItemBrowserPreview.emit();
                this.arcgisItemBrowserSublayerPreview.emit();
                this.restoreFocus();
            }, onArcgisInternalItemBrowserSublayer: (e) => {
                e.stopPropagation();
                this.arcgisItemBrowserSublayerPreview.emit(e.detail);
            }, hidePreviewFooters: this.hidePreviewFooters }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "summary-top" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "preview-summary-top" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "preview-footer" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "sublayer-footer" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "sublayer-preview-footer" }))), this.renderSelected(), renderSlot("actions"), renderSlot("content-start"), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content", class: { "content--padded-bottom": this.contentPaddedBottom } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content" })), renderSlot("content-end"), renderSlot("pagination"), renderSlot("filters"), renderSlot("scroll-end"), renderSlot("no-results", i18n.content.noResults), renderSlot("no-content", i18n.content.noContent))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "user": ["updateUser"],
        "userLicensedItems": ["updateUserLicensedItems"],
        "subscriptionInfo": ["updateSubscriptionInfo"],
        "portal": ["updatePortal"],
        "api": ["updateAPI"],
        "config": ["updateConfig"],
        "selection": ["updateSelection"],
        "groupId": ["updateGroupID"],
        "allowedGeometries": ["updateSublayerSelectionGeometryTypes"],
        "selectedItems": ["updateSelectedItems"],
        "showFieldStatistics": ["updateFieldStatistics"],
        "view": ["updateView"],
        "bucket": ["updateBucket"],
        "q": ["updateQ"],
        "filter": ["updateQ"]
    }; }
};
ArcgisItemBrowser.style = arcgisItemBrowserCss;

const ArcgisItemBrowserActions = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.actions = [];
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-actions", { actions: this.actions, selection: this.store.state.selectedItems, store: this.store })));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

function canViewAGO(settings, portal, user) {
    var _a, _b, _c, _d, _e;
    if (portal.isPortal) {
        return (_b = (_a = settings === null || settings === void 0 ? void 0 : settings.portalConfigProperties) === null || _a === void 0 ? void 0 : _a.searchArcGISOnlineEnabled) !== null && _b !== void 0 ? _b : true;
    }
    if (!user || (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.b)(user)) {
        return true;
    }
    return (_e = (_d = (_c = portal.sourceJSON) === null || _c === void 0 ? void 0 : _c.canSearchPublic) !== null && _d !== void 0 ? _d : portal.canSearchPublic) !== null && _e !== void 0 ? _e : true;
}
async function getValidOptions(portal, user, options) {
    var _a, _b;
    if (!portal) {
        return [];
    }
    const settings = await (0,_api_2e3a136f_js__WEBPACK_IMPORTED_MODULE_10__.j)(portal);
    const provisionedListings = (_a = ((options === null || options === void 0 ? void 0 : options.includes("subscription content")) && await (0,_thumbnail_bcb89e69_js__WEBPACK_IMPORTED_MODULE_7__.e)(user, portal))) !== null && _a !== void 0 ? _a : [];
    const properties = settings === null || settings === void 0 ? void 0 : settings.portalConfigProperties;
    const canViewLivingAtlas = (_b = properties === null || properties === void 0 ? void 0 : properties.portalLivingAtlasConfigEnabled) !== null && _b !== void 0 ? _b : true;
    return options.filter((option) => {
        // for public portals, allow anonymous users to see the portal's public content
        if (!user && option === "org") {
            return (portal === null || portal === void 0 ? void 0 : portal.access) === "public";
        }
        // anonymous should not see my content or org content
        if (!user && ["my", "favorites", "group", "org"].includes(option)) {
            return false;
        }
        // users without create/receive item privs can't have my content (#4398)
        if (user && !((0,_privileges_74639dae_js__WEBPACK_IMPORTED_MODULE_11__.l)(user) || (0,_privileges_74639dae_js__WEBPACK_IMPORTED_MODULE_11__.n)(user)) && option === "my") {
            return false;
        }
        // public users should not see org option
        if (user && (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.a)(user) && option === "org") {
            return false;
        }
        if (option === "subscription content" && (!user || !(provisionedListings === null || provisionedListings === void 0 ? void 0 : provisionedListings.length))) {
            return false;
        }
        // portals can configure wether users should see LA or AGO #3817
        if ((!canViewLivingAtlas && (option === "living atlas" || option === "living atlas analysis")) ||
            (!canViewAGO(settings, portal, user) && option === "all")) {
            return false;
        }
        return true;
    });
}

const arcgisItemBrowserBucketSelectCss = ":host{display:block}.large{border-inline-end:1px solid var(--calcite-color-border-3)}.button{padding:0.5rem;--calcite-font-weight-normal:500}";

const ArcgisItemBrowserBucketSelect = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserBucketSelect = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserBucketSelect", 7);
        this.selectOption = (option) => {
            this.bucket = option;
            // assume if the user clicked it, it's valid
            this.validBucket = option;
            this.arcgisItemBrowserBucketSelect.emit(option);
        };
        this.optionLabel = (option) => {
            var _a;
            if (option === "org" && !_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) {
                return (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) === null || _a === void 0 ? void 0 : _a.name;
            }
            return this.i18n[option];
        };
        this.options = [
            "my",
            "favorites",
            "group",
            "org",
            "living atlas",
            "all"
        ];
        this.bucket = "my";
        this.validBucket = undefined;
        this.validOptions = undefined;
    }
    updateOptions(newOptions) {
        this.updateValidOptions(newOptions);
    }
    async updateValidOptions(options, forceEmit) {
        const oldBucket = this.validBucket;
        const { user, portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c;
        this.validOptions = await getValidOptions(portal, user, options);
        this.validBucket = this.validOptions.includes(this.bucket) ? this.bucket : this.validOptions[0];
        // if we had to change the bucket, emit an event
        if (oldBucket !== this.validBucket || forceEmit) {
            this.arcgisItemBrowserBucketSelect.emit(this.validBucket);
        }
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.bucketSelect;
        await this.updateValidOptions(this.options, true);
        (0,_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.o)("user", () => {
            this.updateValidOptions(this.options);
        });
        (0,_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.o)("portal", () => {
            this.updateValidOptions(this.options);
        });
    }
    render() {
        const { validOptions, validBucket, selectOption, optionLabel } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                large: this.store.state.width >= _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.sm
            } }, (validOptions === null || validOptions === void 0 ? void 0 : validOptions.length) > 0 && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { placement: "bottom-start", scale: "m", widthScale: "m", type: "click" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "button", kind: "neutral", appearance: "transparent", "icon-end": "chevron-down", slot: "trigger" }, optionLabel(validBucket)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { selectionMode: "single" }, validOptions.map((option) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { selected: validBucket === option, onCalciteDropdownItemSelect: () => selectOption(option) }, optionLabel(option))))))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "options": ["updateOptions"]
    }; }
};
ArcgisItemBrowserBucketSelect.style = arcgisItemBrowserBucketSelectCss;

const arcgisItemBrowserCardCss = ":host{display:block;min-width:0px}.item-browser-card{position:relative;box-sizing:border-box;display:flex;height:100%;flex-direction:column;color:var(--calcite-color-text-1);opacity:0;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);transition-duration:150ms;outline-color:transparent;background-color:var(--calcite-color-foreground-1);transition-property:background-color, outline, outline-offset, opacity;border:1px solid var(--calcite-color-border-3)}.item-browser-card:focus{z-index:10;outline:2px solid var(--calcite-color-brand);outline-offset:-2px}.item-browser-card--loaded{opacity:1}.item-browser-card--selected{border-color:var(--calcite-color-brand)}.item-browser-card--hoverable{cursor:pointer}.item-browser-card__top{padding:1rem}.item-browser-card__hover-text{position:absolute;inset:0px;display:flex;align-items:center;justify-content:center;text-align:center;font-size:1rem;font-weight:500;opacity:0;transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;background-color:rgba(21, 21, 21, 0.7);color:white}.item-browser-card__upper{flex:1 1 0%;background-color:var(--calcite-color-foreground-1);transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s}.item-browser-card__upper:hover{background-color:var(--calcite-color-background)}.item-browser-card__upper:hover .item-browser-card__hover-text,.item-browser-card:focus .item-browser-card__hover-text{opacity:1}.item-browser-card__upper--link{color:var(--calcite-color-text-1);text-decoration-line:none;outline-color:transparent}.item-browser-card__upper--link:focus{z-index:10;outline:2px solid var(--calcite-color-brand);outline-offset:2px}.item-browser-card__title__span{position:relative;display:inline;border-style:none;background-color:transparent;padding:0px;transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s;background-image:linear-gradient(transparent, transparent);background-position-x:0%, 100%;background-position-y:min(1.25em, 100%);background-repeat:no-repeat, no-repeat;background-size:100% 1px, 100% 1px}.item-browser-card--previewed .item-browser-card__title__span{background-image:linear-gradient(var(--calcite-color-text-3), var(--calcite-color-text-3))}.item-browser-card--previewed{outline:1px solid var(--calcite-color-brand);outline-offset:-2px}.item-browser-card--previewed .item-browser-card__top{background-color:var(--calcite-color-background)}.item-browser-card__content{display:flex;min-width:0px;flex:1 1 0%;flex-direction:column}.item-browser-card__details{margin-top:0.25rem;display:flex;flex-direction:row}.item-browser-card__detail{font-size:0.875rem;color:var(--calcite-color-text-2)}.item-browser-card__calendar-icon{color:var(--calcite-color-text-3);margin-inline-end:0.5rem}.item-browser-card__footer{margin-top:auto;display:flex;align-items:center;background-color:var(--calcite-color-foreground-1);padding-left:1rem;padding-right:1rem;padding-top:0.5rem;padding-bottom:0.5rem;border-top:1px solid var(--calcite-color-border-3)}.item-browser-card__footer__start{display:flex;min-width:0px;flex:1 1 0%;flex-direction:row;align-items:center;overflow:hidden;margin-inline-end:0.75rem}.item-browser-card__footer__start--owner{margin-inline-start:-0.25rem}.item-browser-card__footer-divider{border-right:1px solid var(--calcite-color-border-input);margin-inline-start:0.75rem;margin-inline-end:0.5rem;display:inline-block;height:1.5rem;width:0px}.item-browser-card__footer-divider--list{margin-left:1rem;margin-right:1rem}.item-browser-card__profile-wrap{box-sizing:border-box;max-width:100%;padding:0.25rem}.item-browser-card__summary{margin:0px;padding:0px;font-size:0.875rem;color:var(--calcite-color-text-2)}.item-browser-card__divider{display:flex;align-items:center;flex:0 0 auto}.item-browser-card__divider:not([empty]):before{content:\"\";height:1.25rem;width:1px;background-color:var(--calcite-color-border-1);margin-inline:0.75rem}.item-browser-card__divider:first-child:before{display:none}.item-browser-card-flex{display:flex}.item-browser-card-flex-1{min-width:0px;flex:1 1 0%}.screen-readers-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.item-browser-card__input{margin-inline-end:1rem;margin-top:0.125rem}.item-browser-card__input--end{margin-inline-end:0px;margin-inline-start:1rem}.item-browser-card__title{margin-top:0px;margin-bottom:0px;overflow-wrap:break-word;padding-top:0px;padding-bottom:0px;font-size:1.125rem;font-weight:500;line-height:1.375}.item-browser-card__title--grid{font-size:1rem}.item-browser-card__title--padded{margin-bottom:0.5rem}.item-browser-card__snippet{margin:0px;margin-bottom:0.75rem;flex:1 1 0%;padding:0px;font-size:0.875rem}.item-browser-card__badges--stacked{margin-top:0.5rem}.item-browser-card__thumbnail{margin:0px;box-sizing:content-box;width:8rem;padding:0px;padding-inline-start:2rem;flex:0 0 auto}.item-browser-card__thumbnail--grid{position:relative;margin:0px;width:100%;padding:0px;border-bottom:1px solid var(--calcite-color-foreground-2)}.item-browser-card__owner{min-width:0px}.item-browser-card--panel{margin-bottom:0px;cursor:pointer;display:block;width:100%}.item-browser-card--xs .item-browser-card__top,.item-browser-card--xxs .item-browser-card__top{padding:0.75rem}.item-browser-card--xs .item-browser-card__title--padded,.item-browser-card--xxs .item-browser-card__title--padded{margin-bottom:0.25rem}.item-browser-card--xs .item-browser-card__footer,.item-browser-card--xxs .item-browser-card__footer{padding-top:0.25rem;padding-bottom:0.25rem;padding-left:0.75rem;padding-right:0.75rem}.item-browser-card--xs .item-browser-card__detail,.item-browser-card--xxs .item-browser-card__detail{font-size:0.75rem}.item-browser-card--xs .item-browser-card__title,.item-browser-card--xxs .item-browser-card__title{font-size:0.875rem}.item-browser-card--xxs .item-browser-card__title{font-size:0.75rem}.item-browser-card--xxs .item-browser-card__thumbnail{padding-inline-start:0.75rem;width:55px}.item-browser-card--xxs .item-browser-card__footer__start{margin-inline-end:0.5rem}.item-browser-card--xs .item-browser-card__thumbnail{width:5rem;padding-inline-start:0.5rem}";

const ArcgisItemBrowserCard$1 = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserInternalUIAction = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserInternalUIAction", 7);
        this.arcgisItemBrowserActionsOpen = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserActionsOpen", 7);
        this.arcgisItemBrowserCardSelect = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserCardSelect", 7);
        this.arcgisItemBrowserCardPreview = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserCardPreview", 7);
        var _a;
        this.handleResizeEvent = (e) => {
            e.stopPropagation();
            this.resize(e.detail.width);
        };
        this.handleCardClick = () => {
            var _a;
            // when using the cards as a link, don't do any special handling
            if (this.link) {
                return;
            }
            const preview = this.preview === "top";
            const selection = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state.selection;
            const { item } = this;
            if (preview && !this.store.state.recycleBin) {
                this.arcgisItemBrowserCardPreview.emit(item);
                return;
            }
            if (selection === "single") {
                this.arcgisItemBrowserCardSelect.emit({ item, selected: true });
            }
            else if (selection === "multiple") {
                this.arcgisItemBrowserCardSelect.emit({
                    item,
                    selected: !isSelected({ item, selectedItems: this.store.state.selectedItems })
                });
            }
        };
        this.item = undefined;
        this.portal = undefined;
        this.user = undefined;
        this.api = 4;
        this.baseUrl = (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config) === null || _a === void 0 ? void 0 : _a.baseUrl;
        this.link = undefined;
        this.newTab = undefined;
        this.selected = undefined;
        this.selection = undefined;
        this.name = undefined;
        this.preview = undefined;
        this.showOwner = true;
        this.showDateUpdated = true;
        this.showItemType = true;
        this.showSummary = false;
        this.showBadges = true;
        this.showAccess = undefined;
        this.showFavorite = undefined;
        this.showThumbnail = true;
        this.actions = [];
        this.hover = undefined;
        this.formFactor = undefined;
        this.updatedText = "";
        this.shortUpdatedText = "";
        this.loaded = undefined;
        this.noSpaceForDate = true;
    }
    /* Calling this setFocus causes calcite to focus here when the user popup is closed... */
    async restoreFocus() {
        if (this.link && this.linkEl) {
            this.linkEl.focus();
            return;
        }
        if (this.preview === "top" && this.sectionEl) {
            this.sectionEl.focus();
            return;
        }
    }
    async componentWillLoad() {
        var _a, _b, _c, _d, _e;
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.card;
        (_a = this.formFactor) !== null && _a !== void 0 ? _a : (this.formFactor = ((_b = this.store) === null || _b === void 0 ? void 0 : _b.state.panel) ? "xs" : "lg");
        (0,_resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.s)(this.store).observe(this.el);
        this.el.addEventListener("arcgisBrowserResize", this.handleResizeEvent);
        const formattedDate = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_12__.a)(this.item.modified);
        this.updatedText = this.i18n.lastUpdated.replace("${date}", formattedDate);
        this.shortUpdatedText = formattedDate;
        this.portal = (_c = this.portal) !== null && _c !== void 0 ? _c : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal;
        this.user = (_d = this.user) !== null && _d !== void 0 ? _d : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user;
        this.api = (_e = this.api) !== null && _e !== void 0 ? _e : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.api;
    }
    async componentDidLoad() {
        await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(100);
        this.loaded = true;
    }
    disconnectedCallback() {
        var _a, _b, _c, _d;
        (_c = (_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.resizeObserver) === null || _c === void 0 ? void 0 : _c.unobserve(this.el);
        (_d = this.el) === null || _d === void 0 ? void 0 : _d.removeEventListener("arcgisBrowserResize", this.handleResizeEvent);
    }
    resize(width) {
        switch (true) {
            case width > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.md:
                this.formFactor = "lg";
                break;
            case width > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.sm:
                this.formFactor = "md";
                break;
            case width > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.xs:
                this.formFactor = "sm";
                break;
            case width > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.xxs:
                this.formFactor = "xs";
                break;
            default:
                this.formFactor = "xxs";
                break;
        }
    }
    renderSelection(selected) {
        var _a, _b;
        const { i18n, item } = this;
        const selection = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state.selection;
        const classes = {
            "item-browser-card__input": true,
            "item-browser-card__input--end": ((_b = this.store) === null || _b === void 0 ? void 0 : _b.state.view) === "grid"
        };
        if (selection === "single") {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-radio-button", { class: classes, checked: selected, value: item.title, name: this.name, onClick: (e) => {
                    e.stopPropagation();
                }, onCalciteRadioButtonChange: () => {
                    this.arcgisItemBrowserCardSelect.emit({ item, selected: true });
                } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "screen-readers-only" }, i18n.select.replace("${title}", item.title))));
        }
        if (selection === "multiple") {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { class: classes, checked: selected, onClick: (e) => {
                    e.stopPropagation();
                }, onCalciteCheckboxChange: () => {
                    this.arcgisItemBrowserCardSelect.emit({ item, selected: !selected });
                }, value: item.id }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "screen-readers-only" }, item.title)));
        }
        return null;
    }
    renderOwner() {
        var _a, _b, _c;
        const { item, api, portal, formFactor } = this;
        const isOnlineInPortal = (portal === null || portal === void 0 ? void 0 : portal.isPortal) && this.store.state.bucket === "all";
        const baseUrl = isOnlineInPortal
            ? "https://www.arcgis.com/home/"
            : (_a = this.baseUrl) !== null && _a !== void 0 ? _a : (_b = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config) === null || _b === void 0 ? void 0 : _b.baseUrl;
        if (!this.showOwner) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "item-browser-card__profile-wrap", onClick: (e) => {
                e.preventDefault();
                e.stopPropagation();
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-user-popup", { underline: true, item: item, api: api, portal: portal, baseUrl: baseUrl, showName: ((_c = this.store) === null || _c === void 0 ? void 0 : _c.state.view) !== "grid", checkOnline: portal.isPortal && this.store.state.bucket === "all", class: "item-browser-card__owner", scale: ["md", "lg"].includes(formFactor) ? "m" : "s", onArcgisUserPopupInternalUIAction: (e) => {
                e.stopPropagation();
                this.arcgisItemBrowserInternalUIAction.emit(e.detail);
            } })));
    }
    renderItemType() {
        var _a;
        const { item, portal, showItemType, formFactor } = this;
        if (!showItemType) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-type", { class: {
                "item-browser-card__divider": !((_a = this.store) === null || _a === void 0 ? void 0 : _a.state.panel)
            }, scale: ["xxs", "xs"].includes(formFactor) ? "s" : "m", item: item, portal: portal }));
    }
    render() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const { item, user, portal, formFactor, i18n, loaded, showDateUpdated, showItemType, showOwner, showBadges, showSummary, showThumbnail, link, newTab, showAccess, actions } = this;
        const current = ((_a = this.store) === null || _a === void 0 ? void 0 : _a.state.preview) === this.item.id;
        const grid = ((_b = this.store) === null || _b === void 0 ? void 0 : _b.state.view) === "grid";
        const topPreview = this.preview === "top";
        const topPreviewAttributes = {
            tabIndex: 0,
            role: "button",
            "aria-haspopup": "dialog",
            "aria-labelledby": "open-details",
            onKeyPress: (e) => {
                if (e.key === "Enter" || e.key == " ") {
                    e.preventDefault();
                    this.handleCardClick();
                }
            }
        };
        const selection = (_c = this.store) === null || _c === void 0 ? void 0 : _c.state.selection;
        const itemSelection = ["single", "multiple"].includes(selection);
        const selected = itemSelection &&
            isSelected({ item: this.item, selectedItems: (_d = this.store) === null || _d === void 0 ? void 0 : _d.state.selectedItems });
        const CardTag = this.link ? "a" : "div";
        const linkAttributes = Object.assign({ href: link }, (newTab ? { target: "_blank", rel: "noopener noreferrer" } : {}));
        const extraSmall = ["xxs", "xs"].includes(formFactor);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", Object.assign({ class: {
                "item-browser-card": true,
                "item-browser-card--hoverable": true,
                [`item-browser-card--${formFactor}`]: true,
                "item-browser-card--panel": (_e = this.store) === null || _e === void 0 ? void 0 : _e.state.panel,
                "item-browser-card--loaded": loaded,
                "item-browser-card--previewed": ((_f = this.store) === null || _f === void 0 ? void 0 : _f.state.preview) === item.id,
                "item-browser-card--selected": selected
            }, onMouseOver: () => (this.hover = true), onMouseOut: () => (this.hover = false) }, (link ? {} : { onClick: this.handleCardClick }), (topPreview && !link ? topPreviewAttributes : {}), { ref: (el) => (this.sectionEl = el) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-top" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(CardTag, Object.assign({ class: { "item-browser-card__upper": true, "item-browser-card__upper--link": !!link } }, (link ? linkAttributes : {}), { ref: (el) => (this.linkEl = el) }), grid && showThumbnail && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("figure", { class: "item-browser-card__thumbnail--grid" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-card-thumbnail", { item: item, user: user, portal: portal }), topPreview && !link && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "item-browser-card__hover-text", id: "open-details" }, ((_h = (_g = this.store) === null || _g === void 0 ? void 0 : _g.state) === null || _h === void 0 ? void 0 : _h.preview) === item.id ? i18n.closeDetails : i18n.openDetails)))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "item-browser-card-flex item-browser-card__top" }, !grid && this.renderSelection(selected), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "item-browser-card-flex-1" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "item-browser-card-flex" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "item-browser-card__content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "item-browser-card-flex" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", { class: {
                "item-browser-card__title": true,
                "item-browser-card__title--padded": showItemType || (showSummary && !!item.snippet),
                "item-browser-card__title--grid": grid,
                "item-browser-card-flex-1": true
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "item-browser-card__title__span" }, item.title)), grid && this.renderSelection(selected)), showSummary && item.snippet && !extraSmall && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "item-browser-card__summary" }, item.snippet.length > 250
            ? `${item.snippet.substring(0, 250)}…`
            : item.snippet)), ((_j = this.store) === null || _j === void 0 ? void 0 : _j.state.panel) && this.renderItemType(), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "item-browser-card__details" }, !((_k = this.store) === null || _k === void 0 ? void 0 : _k.state.panel) && this.renderItemType(), showDateUpdated && formFactor !== "xxs" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: {
                "item-browser-card__detail": true,
                "item-browser-card__divider": true
            } }, ["xxs", "xs", "sm"].includes(formFactor) || grid
            ? this.shortUpdatedText
            : this.updatedText)), showBadges && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-badges", { item: item, user: user, portal: portal, width: formFactor === "lg" && !grid ? "full" : "narrow", showTooltips: true, class: {
                "item-browser-card__badges": true,
                "item-browser-card__divider": true
            }, scale: "s" })))), !grid && showThumbnail && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("figure", { class: "item-browser-card__thumbnail" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-card-thumbnail", { item: item, user: user, portal: portal })))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-end" })))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "item-browser-card__footer", onClick: (e) => {
                const classList = e.target.classList;
                // any slotted components will not propagate up, as we don't want them to trigger a preview
                if (!classList.contains("item-browser-card__footer") &&
                    !classList.contains("item-browser-card__footer__start")) {
                    e.stopPropagation();
                }
            }, onKeyPress: (e) => {
                if (e.key === "Enter" || e.key == " ") {
                    e.stopPropagation();
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                "item-browser-card__footer__start": true,
                "item-browser-card__footer__start--owner": showOwner
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "actions-start" }), !grid && this.renderOwner()), grid && this.renderOwner(), showAccess && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "item-browser-card__access-wrap", onClick: (e) => {
                e.preventDefault();
                e.stopPropagation();
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-share-summary", { item: item, class: "item-browser-card__access", scale: "s", showText: !grid && formFactor === "lg" }))), (showAccess || (grid && showOwner)) && ((_l = this.actions) === null || _l === void 0 ? void 0 : _l.length) > 0 && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: {
                "item-browser-card__footer-divider": true,
                "item-browser-card__footer-divider--list": !grid
            } })), this.showFavorite && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-favorite", { item: item, portal: portal, user: user || (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user), iconOnly: true })), this.preview === "action" && !this.store.state.recycleBin && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { scale: "s", appearance: current ? "solid" : "outline", kind: "neutral", onClick: (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.arcgisItemBrowserCardPreview.emit(this.item);
            } }, current ? i18n.hidePreview : i18n.preview)), (selection === null || selection === void 0 ? void 0 : selection.includes("sublayer")) && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-card-sublayer-select", { item: item, user: user, portal: portal, selection: selection === "multiple-sublayer" ? "multiple" : "single", showErrors: true })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "actions-end" }), actions.length > 0 && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { scale: "s", slot: "trigger", alignment: "center", appearance: "solid", text: i18n.moreOptions, textEnabled: false, icon: "ellipsis", onClick: (e) => {
                this.arcgisItemBrowserActionsOpen.emit({
                    el: e.target,
                    actions
                });
            } }))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisItemBrowserCard$1.style = arcgisItemBrowserCardCss;

const arcgisItemBrowserCardSublayerSelectCss = ".title{max-width:32rem;word-wrap:break-word;word-break:break-word}.dropdown-item-disabled{pointer-events:none;opacity:var(--calcite-ui-opacity-disabled)}.dropdown{display:block}";

const ArcgisItemBrowserCard = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserCardSelect = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserCardSelect", 7);
        this.renderSublayer = (sublayer) => {
            var _a, _b;
            const { item, store } = this;
            const disabled = !((_b = (_a = store === null || store === void 0 ? void 0 : store.state) === null || _a === void 0 ? void 0 : _a.allowedGeometries) === null || _b === void 0 ? void 0 : _b.includes(sublayer.geometryType));
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", Object.assign({ iconStart: getSearchSublayerIcon(sublayer.geometryType), selected: isSelected({
                    item,
                    sublayer,
                    selectedItems: store.state.selectedItems
                }) }, (disabled
                ? { ariaDisabled: true, tabIndex: -1, className: "dropdown-item-disabled" }
                : {}), { ref: (el) => {
                    if (disabled) {
                        el.tabIndex = -1;
                    }
                }, onCalciteDropdownItemSelect: (e) => {
                    const selected = e.currentTarget.selected;
                    const { item } = this;
                    this.arcgisItemBrowserCardSelect.emit({
                        item,
                        sublayer,
                        // single select should remain selected on click, multi select should toggle
                        selected: this.selection === "single" || !selected
                    });
                } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "title" }, sublayer.title)));
        };
        this.isAllowedGeometry = (geometry) => { var _a, _b, _c; return (_c = (_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.allowedGeometries) === null || _c === void 0 ? void 0 : _c.includes(geometry); };
        this.sortSublayers = (a, b) => {
            const validA = this.isAllowedGeometry(a.geometryType);
            const validB = this.isAllowedGeometry(b.geometryType);
            if (validA === validB) {
                return b.id - a.id;
            }
            return validA ? -1 : 1;
        };
        this.renderSelectText = (selectedSublayers) => {
            var _a, _b;
            const multiple = this.selection === "multiple";
            if (this.item && !this.item.sublayers) {
                if (isSelected({ item: this.item, selectedItems: (_a = this.store) === null || _a === void 0 ? void 0 : _a.state.selectedItems })) {
                    return this.i18n.selectedSingle;
                }
                return this.i18n.select;
            }
            if ((selectedSublayers === null || selectedSublayers === void 0 ? void 0 : selectedSublayers.length) === 0) {
                return multiple ? this.i18n.selectLayers : this.i18n.select;
            }
            if (multiple) {
                return this.i18n.selectedLayers.replace("${num}", `${selectedSublayers.length}`);
            }
            const selected = selectedSublayers[0];
            // @ts-ignore
            return this.i18n.selectedName.replace("${name}", (_b = selected.sublayer) === null || _b === void 0 ? void 0 : _b.title);
        };
        this.item = undefined;
        this.user = undefined;
        this.portal = undefined;
        this.width = "auto";
        this.appearance = "outline";
        this.selection = undefined;
        this.showErrors = false;
        this.sublayers = undefined;
        this.loading = false;
        this.fetched = false;
        this.alertActive = false;
    }
    async componentWillLoad() {
        var _a, _b, _c;
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state.i18n.cardSublayerSelect;
        this.sublayers = (_b = this.item) === null || _b === void 0 ? void 0 : _b.sublayers;
        if (!this.item) {
            return;
        }
        if ((_c = this.item) === null || _c === void 0 ? void 0 : _c.sublayers) {
            this.sublayers = this.item.sublayers;
        }
        else {
            const response = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_14__.o)("serviceInfo", this.item.id);
            if (response === null || response === void 0 ? void 0 : response.result) {
                this.processResponse(response);
            }
        }
    }
    processResponse(response) {
        if (response === null || response === void 0 ? void 0 : response.result) {
            const layers = response.result.map(getSearchResultSublayer).sort(this.sortSublayers);
            this.sublayers = layers;
            this.item.sublayers = layers;
            this.fetched = true;
        }
        else if (response.error) {
            this.alertActive = true;
        }
    }
    async attemptLoad() {
        var _a;
        this.loading = true;
        this.alertActive = false;
        // for items without sublayers in the search index,
        // try fetching the service info
        const response = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_14__.f)(() => (0,_services_5925c4b4_js__WEBPACK_IMPORTED_MODULE_13__.f)({
            item: this.item,
            portal: this.portal,
            layers: null,
            isSecure: false
        }), "serviceInfo", this.item.id);
        // make real sublayers look like search sublayers
        this.processResponse(response);
        await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(100);
        if (this.dropdown) {
            this.dropdown.open = true;
        }
        this.loading = false;
        return !!((_a = this.sublayers) === null || _a === void 0 ? void 0 : _a.length);
    }
    render() {
        var _a, _b;
        const { store, width, appearance, loading, i18n, alertActive } = this;
        const item = this.item;
        if (!store || !item) {
            return null;
        }
        const scale = width === "auto" ? "s" : "m";
        const selectedItems = store === null || store === void 0 ? void 0 : store.state.selectedItems;
        const selectedSublayers = findSelectedSublayers({ item, selectedItems });
        const isItemSelected = isSelected({ item, selectedItems });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, ((_a = item === null || item === void 0 ? void 0 : item.sublayers) === null || _a === void 0 ? void 0 : _a.length) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { class: "dropdown", widthScale: "l", placement: appearance === "solid" ? "top" : "bottom-end", scale: "s", closeOnSelectDisabled: true, overlayPositioning: "fixed", ref: (el) => (this.dropdown = el) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { loading: loading, disabled: loading, slot: "trigger", scale: scale, appearance: (selectedSublayers === null || selectedSublayers === void 0 ? void 0 : selectedSublayers.length) || appearance === "solid" ? "solid" : "outline", kind: "neutral", iconEnd: "chevron-down", width: width }, this.renderSelectText(selectedSublayers)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { selectionMode: this.selection }, (_b = this.sublayers) === null || _b === void 0 ? void 0 : _b.sort(this.sortSublayers).map(this.renderSublayer)))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { loading: loading, disabled: loading || alertActive, class: "dropdown", slot: "trigger", scale: scale, appearance: (selectedSublayers === null || selectedSublayers === void 0 ? void 0 : selectedSublayers.length) ? "solid" : "outline", kind: "neutral", width: width, onClick: async () => {
                if (this.item &&
                    !this.sublayers &&
                    this.item.type !== "Image Service" &&
                    !this.fetched) {
                    const foundLayers = await this.attemptLoad();
                    if (foundLayers || this.alertActive) {
                        return;
                    }
                }
                this.arcgisItemBrowserCardSelect.emit({
                    item,
                    selected: !isItemSelected
                });
            } }, this.renderSelectText(selectedSublayers))), this.showErrors && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-alert", { label: i18n.errorTitle, icon: true, kind: "danger", onCalciteAlertClose: () => {
                this.alertActive = false;
            }, open: !!alertActive, tabIndex: !alertActive ? -1 : null }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "title" }, i18n.errorTitle), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message", class: "alert__message" }, i18n.errorBody), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { slot: "link", onClick: async () => {
                (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_14__.c)("serviceInfo", this.item.id);
                await this.attemptLoad();
            } }, i18n.retry)))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisItemBrowserCard.style = arcgisItemBrowserCardSublayerSelectCss;

const arcgisItemBrowserCardThumbnailCss = ":host{position:relative;display:block}.outer{position:relative;width:100%;padding-top:66.66%}.inner{position:absolute;inset:0px;background-color:var(--calcite-color-background)}.inner--loading{animation-duration:1s;animation-fill-mode:forwards;animation-iteration-count:infinite;animation-name:thumbnail-shimmer;animation-timing-function:linear;background-image:linear-gradient(to right, var(--calcite-color-background) 0%, var(--calcite-color-foreground-2), var(--calcite-color-background) 40%, var(--calcite-color-background) 100%);background-repeat:no-repeat;background-size:800px 100%}.thumbnail{height:100%;width:100%;-o-object-fit:cover;object-fit:cover;opacity:1;transition-property:opacity;transition:opacity 300ms linear}.thumbnail--loading{opacity:0}@keyframes thumbnail-shimmer{0%{background-position:-468px 0}100%{background-position:468px 0}}";

const ArcgisItemBrowserCardThumbnail = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.item = undefined;
        this.user = undefined;
        this.portal = undefined;
        this.loading = true;
        this.useDefault = undefined;
        this.thumbnailUrl = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.setThumbnailUrl();
    }
    handleItemChange() {
        this.setThumbnailUrl();
    }
    async setThumbnailUrl() {
        var _a, _b;
        const { item, portal } = this;
        if (this.useDefault) {
            this.thumbnailUrl = (0,_thumbnail_bcb89e69_js__WEBPACK_IMPORTED_MODULE_7__.f)(this.item);
            return;
        }
        this.thumbnailUrl = await (0,_thumbnail_bcb89e69_js__WEBPACK_IMPORTED_MODULE_7__.h)(portal, item, (_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.bucket);
    }
    render() {
        const { loading, useDefault, thumbnailUrl } = this;
        if (!thumbnailUrl) {
            return;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "outer" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { inner: true, "inner--loading": loading } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("img", { class: {
                thumbnail: true,
                "thumbnail--loading": loading
            }, alt: "", src: thumbnailUrl,
            // @ts-ignore
            crossorigin: "anonymous", onLoad: (e) => {
                const image = e.currentTarget;
                if (!useDefault && (0,_thumbnail_bcb89e69_js__WEBPACK_IMPORTED_MODULE_7__.j)(image)) {
                    this.useDefault = true;
                }
                this.loading = false;
            }, onError: () => {
                this.useDefault = true;
                this.loading = false;
                this.setThumbnailUrl();
            } }), loading && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "placeholder" })))));
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "item": ["handleItemChange"]
    }; }
};
ArcgisItemBrowserCardThumbnail.style = arcgisItemBrowserCardThumbnailCss;

const arcgisItemBrowserContentCss = ":host{--arcgis-item-browser-content-spacing:0.5rem}.grid-container slot,.list slot{display:grid;grid-gap:var(--arcgis-item-browser-content-spacing)}.columns-1 slot{grid-template-columns:repeat(1, 1fr)}.columns-2 slot{grid-template-columns:repeat(2, 1fr)}.columns-3 slot{grid-template-columns:repeat(3, 1fr)}.columns-4 slot{grid-template-columns:repeat(4, 1fr)}.no-space slot{gap:0.25rem}";

const ArcgisItemBrowserContent = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.actionElement = undefined;
        this.actions = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
    }
    getColumnCount(width) {
        if (this.store.state.view !== "grid") {
            return 1;
        }
        const filter = this.store.state.filtersEmpty ? 1 : 0;
        switch (true) {
            case width < _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.xs:
                return 1;
            case width < _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.sm:
                return 2;
            case width < _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.md:
                return 1 + filter;
            case width < _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.xl:
                return 2 + filter;
            default:
                return 3 + filter;
        }
    }
    async updateActionsMenu(e) {
        var _a;
        const { actions, el } = e.detail;
        // close if already open
        if (el === this.actionElement && ((_a = this.popoverElement) === null || _a === void 0 ? void 0 : _a.open)) {
            this.popoverElement.open = false;
            this.focusAction();
            return;
        }
        this.actions = actions;
        this.actionElement = el;
        if (this.popoverElement) {
            this.popoverElement.open = true;
        }
    }
    async focusAction() {
        var _a, _b, _c, _d;
        (_b = (_a = this.actionElement) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);
        (_d = (_c = this.actionElement) === null || _c === void 0 ? void 0 : _c.setFocus) === null || _d === void 0 ? void 0 : _d.call(_c);
    }
    render() {
        var _a;
        const view = this.store.state.view;
        const columnCount = this.getColumnCount(this.store.state.width);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: {
                [view === "grid" ? "grid-container" : view]: true,
                [`columns-${columnCount}`]: true,
                "no-space": this.store.state.width < _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.b.xs && this.store.state.panel
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { referenceElement: this.actionElement, label: this.store.state.i18n.card.moreOptions, placement: "bottom-end", scale: "m", overlayPositioning: "fixed", pointerDisabled: true, autoClose: true, triggerDisabled: true, onCalcitePopoverClose: () => {
                this.focusAction();
            }, ref: async (el) => {
                this.popoverElement = el;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { selectionMode: "none", onKeyDown: (e) => {
                e.stopPropagation();
            } }, (_a = this.actions) === null || _a === void 0 ? void 0 : _a.map(({ text, newTab, link, action }) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", Object.assign({ onClick: (e) => {
                if (action) {
                    e.preventDefault();
                    action();
                }
            }, key: text }, (!action && link
            ? Object.assign(Object.assign({}, (newTab ? { target: "_blank", rel: "noopener noreferrer" } : {})), { href: link }) : {})), text)))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisItemBrowserContent.style = arcgisItemBrowserContentCss;

const canEditCategorySchema = async ({ groupId, portal, user }) => {
    var _a;
    const isAnon = !user;
    const userPublic = (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.a)(user);
    const customRole = (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.d)(user);
    const isAdmin = (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.b)(user);
    const isEditingGroupSchema = !!groupId;
    const group = isEditingGroupSchema ? await (0,_items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_18__.f)(groupId, portal) : null;
    const groupOwnerName = group === null || group === void 0 ? void 0 : group.owner;
    const groupOwner = isEditingGroupSchema ? await (0,_user_3ea69c3a_js__WEBPACK_IMPORTED_MODULE_19__.f)(groupOwnerName, portal) : null;
    const groupOwnedByMyOrg = !userPublic && user.orgId === (groupOwner === null || groupOwner === void 0 ? void 0 : groupOwner.orgId);
    const groupMembershipType = (_a = group === null || group === void 0 ? void 0 : group.userMembership) === null || _a === void 0 ? void 0 : _a.memberType;
    const canManageGroupCategories = !isAnon &&
        (groupMembershipType === "owner" ||
            groupMembershipType === "admin" ||
            (groupOwnedByMyOrg && (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.e)(user)));
    const canManageItemCategories = !isAnon && !userPublic && (isAdmin || (customRole && (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.f)(user)));
    return !group ? canManageItemCategories : canManageGroupCategories;
};

const arcgisItemBrowserFilterCategoriesCss = ".no-category-title{margin-bottom:0.25rem;margin-top:1rem;font-size:1rem}.no-category-description:not(:last-child){margin-bottom:1rem;margin-top:0px}";

const ArcgisItemBrowserFilterCategories = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserFilter", 7);
        this.arcgisItemBrowserCategorySchemaUpdate = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserCategorySchemaUpdate", 7);
        this.refetchCategories = async () => {
            if (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) {
                await this.fetchCategories(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal, false);
            }
        };
        this.fetchCategories = async (portal, useCache = false) => {
            var _a, _b, _c, _d, _e, _f;
            const isLivingAtlas = ((_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.bucket) === "living atlas";
            const isGroup = ((_d = (_c = this.store) === null || _c === void 0 ? void 0 : _c.state) === null || _d === void 0 ? void 0 : _d.bucket) === "group";
            const groupId = this.groupId || this.store.state.groupId;
            if (this.isAllGroups()) {
                this.schema = null;
                this.arcgisItemBrowserCategorySchemaUpdate.emit(null);
                return;
            }
            const response = isLivingAtlas
                ? await (0,_categories_9f0f37ee_js__WEBPACK_IMPORTED_MODULE_15__.a)(portal, "LivingAtlas", useCache)
                : groupId && groupId !== "all" && isGroup
                    ? await (0,_categories_9f0f37ee_js__WEBPACK_IMPORTED_MODULE_15__.b)(groupId, portal, useCache)
                    : await (0,_categories_9f0f37ee_js__WEBPACK_IMPORTED_MODULE_15__.f)(portal, _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user, useCache);
            const schema = (_f = (_e = response === null || response === void 0 ? void 0 : response.categorySchema) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.categories;
            this.setSchema(schema);
            this.loading = false;
        };
        this.setSchema = (schema) => {
            this.schema = schema;
            this.arcgisItemBrowserCategorySchemaUpdate.emit(schema);
        };
        this.renderSchemaEditor = () => {
            const { groupId, allowEdit, isEditing, handleEditSchemaComplete, setSchema } = this;
            const { user, portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c;
            if (!allowEdit) {
                return null;
            }
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-tunnel", { reference: this.el }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-category-schema-editor", { isActive: isEditing, group: groupId ? { id: groupId } : undefined, user: user, config: _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config, portal: portal, onWorkflowCancel: async (event) => {
                    handleEditSchemaComplete(event.detail.hasChangeSinceLastOpen);
                }, onNewSchemaWorkflowComplete: async ({ detail }) => {
                    this.isEditing = false;
                    setSchema(detail.newSchema);
                }, onDeleteAllSchema: async () => {
                    handleEditSchemaComplete(true);
                } })));
        };
        this.handleEditSchemaComplete = async (doRefetchCategories) => {
            this.isEditing = false;
            if (doRefetchCategories) {
                await this.refetchCategories();
            }
            const { category, schema, clearFilter, checkSchemaFilterStillValid } = this;
            if (category && !checkSchemaFilterStillValid(schema, category, _categories_ca134005_js__WEBPACK_IMPORTED_MODULE_16__.U)) {
                clearFilter();
            }
        };
        this.checkSchemaFilterStillValid = (schema, category, parentPath) => {
            return schema.some((item) => {
                var _a;
                const categoryPath = (0,_categories_ca134005_js__WEBPACK_IMPORTED_MODULE_16__.a)(parentPath, item, false);
                if (categoryPath === category) {
                    return true;
                }
                if ((_a = item.categories) === null || _a === void 0 ? void 0 : _a.length) {
                    return this.checkSchemaFilterStillValid(item.categories, category, categoryPath);
                }
                return false;
            });
        };
        this.clearFilter = () => {
            this.category = null;
            this.emitFilterEvent();
        };
        this.category = undefined;
        this.expanded = undefined;
        this.groupId = undefined;
        this.allowEdit = undefined;
        this.loading = undefined;
        this.schema = [];
        this.isEditing = false;
        this.canEdit = false;
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.filterCategories;
        if (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) {
            await this.fetchCategories(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal);
            await this.checkAllowEdit();
        }
        else {
            (0,_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.o)("portal", (portal) => {
                this.fetchCategories(portal);
            });
        }
        // when a group is selected, trigger a fetch of categories
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_17__.b)(this.store, () => {
            this.fetchCategories(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal);
        });
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_17__.a)("categories", this.store, () => (this.category = null));
        // when the bucket is changed, it will impact which categories we want to show, so fetch again
        (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.o)(this.store, () => {
            this.fetchCategories(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal);
        });
    }
    isAllGroups() {
        var _a, _b;
        const groupId = this.groupId || this.store.state.groupId;
        return ((_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.bucket) === "group" && (!groupId || groupId === "all");
    }
    async checkAllowEdit() {
        const { allowEdit, groupId } = this;
        const { user, portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c;
        if (!allowEdit) {
            this.canEdit = false;
            return;
        }
        this.canEdit = await canEditCategorySchema({ user, portal, groupId });
    }
    async componentDidLoad() {
        if (this.category) {
            this.emitFilterEvent();
        }
        this.store.onChange("bucket", () => this.refetchCategories());
        this.store.onChange("groupId", () => {
            this.refetchCategories();
            this.checkAllowEdit();
        });
    }
    emitFilterEvent() {
        const { category, i18n } = this;
        const value = category ? JSON.stringify([category]) : "";
        const categoryLabel = category === "_none_" ? i18n.uncategorized : category === null || category === void 0 ? void 0 : category.replace("/Categories/", "");
        const label = i18n.category.replace("${category}", categoryLabel);
        this.arcgisItemBrowserFilter.emit({
            id: "categories",
            param: "categories",
            value,
            label,
            category
        });
    }
    renderNestedCategories(schema, previousValue) {
        return schema.map((category) => {
            var _a;
            // Keep breadcrumbs of categories' ancestry
            const value = previousValue
                ? `${previousValue}/${category.title}`
                : `/Categories/${category.title}`;
            const hasChildren = !!((_a = category.categories) === null || _a === void 0 ? void 0 : _a.length);
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-value": value, "data-children": hasChildren, selected: this.category === value, key: `${value}--${hasChildren}` }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, category.title), hasChildren && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { slot: "children", selectionMode: "children" }, this.renderNestedCategories(category.categories, value)))));
        });
    }
    render() {
        var _a, _b, _c;
        const { loading, schema, allowEdit, canEdit, i18n, renderSchemaEditor } = this;
        const hasSchema = (schema === null || schema === void 0 ? void 0 : schema.length) > 0;
        if (loading ||
            (!hasSchema && !allowEdit) ||
            this.isAllGroups() ||
            ((0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.a)(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) && ((_a = this.store) === null || _a === void 0 ? void 0 : _a.state.bucket) !== "group")) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: this.i18n.categories, expanded: this.expanded, active: !!this.category, filterID: "categories", onArcgisBrowserFilterRemove: () => {
                this.category = null;
            } }, hasSchema ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { selectionMode: "children", scale: "m", onCalciteTreeSelect: (event) => {
                var _a, _b;
                const node = event.target;
                const dataset = (_b = (_a = node === null || node === void 0 ? void 0 : node.selectedItems) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.dataset;
                const category = (dataset === null || dataset === void 0 ? void 0 : dataset.value) || "";
                if (this.category === category) {
                    this.category = null;
                }
                else {
                    this.category = category;
                }
                this.emitFilterEvent();
            } }, !!(this.groupId || this.store.state.groupId) && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-value": "_none_", selected: this.category === "_none_" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, i18n.uncategorized))), this.renderNestedCategories(schema))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "no-category-title" }, i18n.noCategoriesTitle), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "no-category-description" }, i18n.noCategories), canEdit && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "add-category-button", appearance: "outline", color: "blue", onClick: () => (this.isEditing = true) }, i18n.setupCategories)))), hasSchema && allowEdit && canEdit && ((_c = (_b = this.store) === null || _b === void 0 ? void 0 : _b.state) === null || _c === void 0 ? void 0 : _c.bucket) !== "living atlas" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { iconStart: "pencil", appearance: "transparent", kind: "neutral", slot: "action", onClick: () => (this.isEditing = true) }))), renderSchemaEditor()));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisItemBrowserFilterCategories.style = arcgisItemBrowserFilterCategoriesCss;

async function fetchCollaborations(portal) {
    const restBaseUrl = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_14__.s)(portal);
    const { collaborations } = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_14__.r)(`${restBaseUrl}portals/self/collaborationsSummary`, {
        includeParticipantInfo: true
    });
    return collaborations;
}
// gets the collaborated items and returns just the unique item ids for that collaboration as an array
async function fetchCollaboratedItems(collaborationId, participantId, portal) {
    const restBaseUrl = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_14__.s)(portal);
    const { collaboratedItems } = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_14__.r)(`${restBaseUrl}portals/self/collaboratedItems`, Object.assign({ collaborationId }, (participantId ? { participantId } : {})));
    if (collaboratedItems === null || collaboratedItems === void 0 ? void 0 : collaboratedItems.length) {
        return collaboratedItems.map((entry) => Object.keys(entry)[0]);
    }
    return [];
}
// Looks up items used in a collaboration, returns an array of item ids
async function fetchCollaborationContent(collaborationId, participantId, portal) {
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_14__.f)(() => fetchCollaboratedItems(collaborationId, participantId, portal), "collaborationContent", `${collaborationId}/${participantId}`);
}

const ArcgisItemBrowserFilterCollaborations = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserFilter", 7);
        this.loadCollaborations = async () => {
            const { portal, user, config, subscriptionInfo } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c !== null && _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c !== void 0 ? _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c : {};
            if (!this.collaborations &&
                portal &&
                user &&
                !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.a)(user) &&
                (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.g)(config, user, portal, subscriptionInfo)) {
                this.collaborations = await fetchCollaborations(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal);
            }
        };
        this.collaboration = undefined;
        this.participant = undefined;
        this.collaborationName = undefined;
        this.expanded = undefined;
        this.collaborations = undefined;
    }
    componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.filterCollaborations;
    }
    async componentDidLoad() {
        if (this.collaboration) {
            this.emitEvent();
        }
        this.loadCollaborations();
        (0,_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.o)("portal", this.loadCollaborations);
        (0,_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.o)("user", this.loadCollaborations);
        (0,_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.o)("subscriptionInfo", this.loadCollaborations);
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_17__.a)("collaborations", this.store, () => (this.collaboration = null));
    }
    async getEventDetail() {
        const { collaboration, participant, collaborationName, i18n } = this;
        if (!collaboration) {
            return {
                id: "collaborations",
                param: "q",
                value: "",
                label: "",
                collaboration: {
                    id: "",
                    name: ""
                }
            };
        }
        const items = await fetchCollaborationContent(collaboration, participant, _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal);
        const participantSuffix = participant ? `__${participant}` : "";
        return {
            id: "collaborations",
            param: "q",
            value: items ? `id:(${items.join(" OR ")})` : "",
            label: collaborationName ? i18n.label.replace("${name}", this.collaborationName) : "",
            collaboration: {
                id: collaboration,
                name: collaborationName
            },
            additionalParams: {
                origin: `${collaboration}${participantSuffix}`
            }
        };
    }
    async emitEvent() {
        const detail = await this.getEventDetail();
        this.arcgisItemBrowserFilter.emit(detail);
    }
    renderParticipant(participant, collaborationId) {
        var _a;
        const [id, name] = Object.entries(participant)[0];
        const participantId = `${collaborationId}/${id}`;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-id": participantId, "data-name": name, selected: (_a = this.collaboration) === null || _a === void 0 ? void 0 : _a.includes(participantId) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, name)));
    }
    render() {
        const { config, user, portal, subscriptionInfo } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c;
        const { collaborations } = this;
        if (!user ||
            !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.g)(config, user, portal, subscriptionInfo) ||
            !(collaborations === null || collaborations === void 0 ? void 0 : collaborations.length)) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: this.i18n.title, expanded: this.expanded, active: !!this.collaboration, filterID: "collaborations", onArcgisBrowserFilterRemove: () => {
                this.collaboration = null;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { selectionMode: "children", scale: "m", onCalciteTreeSelect: (event) => {
                var _a, _b;
                const node = event.target;
                const item = (_a = node.selectedItems) === null || _a === void 0 ? void 0 : _a[0];
                const [collaborationId, participantId] = (_b = item === null || item === void 0 ? void 0 : item.dataset.id.split("/")) !== null && _b !== void 0 ? _b : [];
                const collaborationName = item === null || item === void 0 ? void 0 : item.dataset.name;
                if (!collaborationName) {
                    return;
                }
                if (this.collaboration === collaborationId &&
                    (!participantId || participantId === this.participant)) {
                    this.collaboration = null;
                    this.collaborationName = null;
                    this.participant = null;
                }
                else {
                    this.collaboration = collaborationId;
                    this.collaborationName = collaborationName;
                    this.participant = participantId;
                }
                this.emitEvent();
            } }, collaborations.map(({ collaborationId, collaborationName, participants }) => {
            var _a;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-id": collaborationId, "data-name": collaborationName, selected: (_a = this.collaboration) === null || _a === void 0 ? void 0 : _a.includes(collaborationId) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, collaborationName), (participants === null || participants === void 0 ? void 0 : participants.length) && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { slot: "children" }, (participants || []).map((participant) => this.renderParticipant(participant, collaborationId))))));
        }))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisItemBrowserFilterContentStatus = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserFilter", 7);
        this.contentStatus = undefined;
        this.expanded = undefined;
    }
    componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.filterContentStatus;
    }
    componentDidLoad() {
        if (this.contentStatus) {
            this.arcgisItemBrowserFilter.emit(this.getEventDetail());
        }
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_17__.a)("contentStatus", this.store, () => (this.contentStatus = null));
    }
    getEventDetail() {
        var _a;
        const { contentStatus, i18n } = this;
        const { user, portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c;
        const orgId = portal && !portal.isPortal ? ` orgid:${portal.id}` : "";
        const orgMember = user && !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.a)(user);
        const orgAuthoritativeQuery = `((contentstatus:org_authoritative${orgId}) OR contentstatus:public_authoritative)`;
        const values = {
            authoritative: orgMember ? orgAuthoritativeQuery : "contentstatus:public_authoritative",
            deprecated: "contentstatus:deprecated"
        };
        return {
            id: "contentStatus",
            param: "filter",
            value: (_a = values[contentStatus]) !== null && _a !== void 0 ? _a : "",
            label: contentStatus ? i18n.label.replace("${contentStatus}", i18n[contentStatus]) : "",
            contentStatus
        };
    }
    render() {
        const statuses = ["authoritative", "deprecated"];
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: this.i18n.title, expanded: this.expanded, active: !!this.contentStatus, filterID: "contentStatus", onArcgisBrowserFilterRemove: () => {
                this.contentStatus = null;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { selectionMode: "single", scale: "m", onCalciteTreeSelect: (event) => {
                var _a;
                const node = event.target;
                const item = (_a = node.selectedItems) === null || _a === void 0 ? void 0 : _a[0];
                const contentStatus = item === null || item === void 0 ? void 0 : item.dataset.contentStatus;
                if (this.contentStatus === contentStatus) {
                    this.contentStatus = null;
                }
                else {
                    this.contentStatus = contentStatus;
                }
                this.arcgisItemBrowserFilter.emit(this.getEventDetail());
            } }, statuses.map((status) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-content-status": status, selected: status === this.contentStatus }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, this.i18n[status])))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisItemBrowserFilterDate = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserFilter", 7);
        this.property = "modified";
        this.range = undefined;
        this.start = undefined;
        this.end = undefined;
        this.expanded = undefined;
    }
    componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
    }
    getEventDetail(detail) {
        return Object.assign({ param: "q" }, detail);
    }
    render() {
        const { property, range, start, end, store, expanded } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter-date", { serverProperty: property === "modified" ? property : "uploaded", property: this.property, store: store, start: start, end: end, range: range, expanded: expanded, onArcgisBrowserFilter: (e) => {
                this.arcgisItemBrowserFilter.emit(this.getEventDetail(e.detail));
            } }));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const arcgisItemBrowserFilterExtentCss = ".filter-extent{margin-bottom:0.5rem;display:flex;width:100%}.filter-extent__label{flex:1 1 0%}.filter-extent__switch{padding-left:0.25rem;padding-right:0.25rem}.filter-extent--padded{box-sizing:border-box;padding-left:1rem;padding-right:1rem;padding-top:0px;padding-bottom:0.5rem}";

const ArcgisItemBrowserFilterExtent = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserFilter", 7);
        this.extent = undefined;
        this.checked = undefined;
    }
    emitCheckedChange() {
        this.arcgisItemBrowserFilter.emit(this.getEventDetail());
    }
    emitExtentChange() {
        if (this.checked) {
            this.arcgisItemBrowserFilter.emit(this.getEventDetail());
        }
    }
    componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.filterExtent;
    }
    componentDidLoad() {
        if (this.extent && this.checked) {
            this.arcgisItemBrowserFilter.emit(this.getEventDetail());
        }
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_17__.a)("extent", this.store, () => (this.checked = false));
    }
    getEventDetail() {
        const { extent, checked, i18n } = this;
        return {
            id: "extent",
            param: "bbox",
            value: checked && extent ? extent : "",
            label: extent && checked ? i18n.label : "",
            extent
        };
    }
    render() {
        var _a, _b;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { "filter-extent": true, "filter-extent--padded": (_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.panel } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "filter-extent__label" }, this.i18n.title), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { class: "filter-extent__switch", checked: this.checked, onCalciteSwitchChange: (e) => {
                this.checked = e.target.checked;
            } })))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "checked": ["emitCheckedChange"],
        "extent": ["emitExtentChange"]
    }; }
};
ArcgisItemBrowserFilterExtent.style = arcgisItemBrowserFilterExtentCss;

const arcgisItemBrowserFilterFolderCss = ".hide.sc-arcgis-item-browser-filter-folder{display:none}.folders.sc-arcgis-item-browser-filter-folder{max-height:16.5rem;min-height:4rem;position:relative;z-index:0;overflow:auto;padding-top:2.5rem}.folder-action.sc-arcgis-item-browser-filter-folder{opacity:0;margin:2px}.folder.sc-arcgis-item-browser-filter-folder:hover .folder-action.sc-arcgis-item-browser-filter-folder,.folder.sc-arcgis-item-browser-filter-folder:focus-within .folder-action.sc-arcgis-item-browser-filter-folder{opacity:1}calcite-list-item.sc-arcgis-item-browser-filter-folder:not([selected]){--calcite-color-foreground-1:var(--calcite-color-background)}.recycle-bin.sc-arcgis-item-browser-filter-folder{position:sticky;bottom:0px}.tooltip.sc-arcgis-item-browser-filter-folder{margin:0px;padding:0px}.folder-edit.sc-arcgis-item-browser-filter-folder{position:relative;display:flex}.folder-edit__input.sc-arcgis-item-browser-filter-folder{position:relative;z-index:0;box-sizing:border-box;display:block;height:2.5rem;width:100%;border-style:none;padding-top:1rem;padding-bottom:1rem;padding-inline-end:0.5rem;padding-inline-start:3.5rem;font-size:0.75rem;color:var(--calcite-color-text-1);--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;transition-duration:150ms;outline-color:transparent;border:1px solid var(--calcite-color-border-1);margin-inline-end:-1px;background-color:transparent;font-family:inherit}.folder-edit__input.sc-arcgis-item-browser-filter-folder:focus{--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);outline:2px solid var(--calcite-color-brand);outline-offset:-2px}.folder-edit__icon.sc-arcgis-item-browser-filter-folder{position:absolute;inset:0px;margin-left:1rem;margin-right:1rem;margin-top:0.75rem;margin-bottom:0.75rem}.header.sc-arcgis-item-browser-filter-folder{margin:0px;padding:0px;font-size:1.25rem;font-weight:400;color:var(--calcite-color-text-1)}.headline.sc-arcgis-item-browser-filter-folder{margin:0px;padding:0px;padding-bottom:0.5rem;font-size:1rem;font-weight:500;color:var(--calcite-color-text-1)}.description.sc-arcgis-item-browser-filter-folder{margin:0px;padding:0px;font-size:0.875rem;font-weight:400;color:var(--calcite-color-text-2)}";

const ArcgisItemBrowserFilterFolder = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserFilter", 7);
        this.hovered = false;
        this.folder = "all";
        this.showRecycle = undefined;
        this.allowEdits = undefined;
        this.expanded = undefined;
        this.folders = [];
        this.currentEdit = undefined;
        this.deleteFolderId = undefined;
        this.createOpen = undefined;
        this.createClosing = undefined;
        this.createTitle = "";
        this.deleteOpen = undefined;
        this.deleteClosing = undefined;
        this.processing = undefined;
        this.tooltip = undefined;
        this.tooltipReferenceElement = undefined;
        this.deleteItemsModalRef = undefined;
        this.deleteFolderContent = undefined;
    }
    async updateFolders() {
        this.fetchUserFolders(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user);
    }
    componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.filterFolder;
        if (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) {
            this.fetchUserFolders(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user);
        }
        else {
            (0,_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.o)("user", (user) => this.fetchUserFolders(user));
        }
    }
    componentDidLoad() {
        var _a, _b, _c;
        // if we're navigating back to the folder picker but we already had selected a folder, restore it
        if ((_c = (_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.filters) === null || _c === void 0 ? void 0 : _c.folder) {
            this.folder = this.store.state.filters.folder.folder;
        }
        if (this.folder && this.folder !== "all") {
            this.arcgisItemBrowserFilter.emit(this.getEventDetail());
        }
        if (this.expanded && this.accordionItem) {
            this.accordionItem.expanded = true;
        }
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_17__.a)("folder", this.store, () => (this.folder = "all"));
    }
    getEventDetail() {
        var _a;
        const { folder } = this;
        const folderName = folder === _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user.username ? "root" : folder;
        const selectedFolder = (_a = this.folders) === null || _a === void 0 ? void 0 : _a.find((f) => f.id === folder);
        const folderTitle = (selectedFolder === null || selectedFolder === void 0 ? void 0 : selectedFolder.title) || "";
        const value = folder !== "all" ? `ownerfolder:${folderName}` : "";
        return {
            id: "folder",
            param: "q",
            value,
            label: this.i18n.label.replace("${folder}", folderTitle),
            folder,
            folderData: selectedFolder
        };
    }
    resetEdit() {
        this.inlineEdit = null;
        this.currentEdit = null;
    }
    // close the dialog, and then clear local state
    async resetCreate() {
        this.createClosing = true;
        await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(250);
        this.createOpen = false;
        this.createClosing = false;
        this.processing = false;
        this.createTitle = "";
    }
    async resetDelete() {
        this.deleteClosing = true;
        await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(250);
        this.deleteOpen = false;
        this.deleteClosing = false;
        this.processing = false;
        this.deleteFolderId = "";
    }
    async setTooltip(text, el, hover) {
        // fast movements over an element will give a mouse over event, but tooltip won't have time to register the mouse out
        // to avoid that, wait a bit on hover events prior to setting up the tooltip
        if (hover) {
            await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(40);
            if (!el.matches(`${el.tagName}:hover`)) {
                return;
            }
        }
        this.tooltip = text;
        this.tooltipReferenceElement = el;
        requestAnimationFrame(() => {
            if (this.tooltipElement && (!hover || el.matches(`${el.tagName}:hover`))) {
                this.tooltipElement.open = true;
                // as a failsafe, attach a mouse out event to the reference element as calcite tooltip doesn't always clean up correctly
                this.tooltipReferenceElement.addEventListener("mouseout", async () => {
                    await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(200);
                    if (this.tooltipReferenceElement === el) {
                        this.tooltipElement.open = false;
                    }
                });
                this.tooltipReferenceElement.addEventListener("keydown", (e) => {
                    if (e.key === "Escape") {
                        this.tooltipElement.open = false;
                    }
                });
            }
        });
    }
    async createFolder() {
        // TODO: handle missing or invalid title, possible errors
        if (this.createTitle) {
            this.processing = true;
            await (0,_user_3ea69c3a_js__WEBPACK_IMPORTED_MODULE_19__.c)(this.createTitle, _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user);
            this.resetCreate();
            // reset the list of folders
            this.fetchUserFolders(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user);
        }
    }
    updateFolder(folder) {
        // optimistically update the folder title in the dom
        this.folders = this.folders.map((existingFolder) => {
            if (existingFolder.id == folder.id) {
                existingFolder.title = this.currentEdit.title;
            }
            return existingFolder;
        });
        (0,_user_3ea69c3a_js__WEBPACK_IMPORTED_MODULE_19__.u)(folder.id, this.currentEdit.title, _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user);
        this.resetEdit();
        // TODO: handle errors here
    }
    async fetchUserFolders(user) {
        const folders = await (0,_user_3ea69c3a_js__WEBPACK_IMPORTED_MODULE_19__.g)(user);
        this.folders = [
            { id: "all", created: new Date(), title: this.i18n.all, username: "" },
            ...folders
        ];
    }
    getFolderIcon(id) {
        var _a;
        switch (id) {
            case "all":
                return "folders";
            case (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) === null || _a === void 0 ? void 0 : _a.username:
                return "home";
            case "recycle":
                return "recycle-bin";
            default:
                return "folder";
        }
    }
    renderListItem(folder) {
        var _a;
        const { i18n } = this;
        const { title, id } = folder;
        const specialFolders = ["all", (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) === null || _a === void 0 ? void 0 : _a.username, "recycle"];
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { class: { folder: true, "recycle-bin": id === "recycle" }, label: title, value: title, key: id, onCalciteListItemSelect: () => {
                this.resetEdit();
                this.folder = id;
                this.arcgisItemBrowserFilter.emit(this.getEventDetail());
            }, selected: this.folder === id }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: this.getFolderIcon(id), slot: "content-start", scale: "s" }), !specialFolders.includes(id) && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { class: "folder-action", icon: "pencil", text: i18n.editFolder, slot: "actions-end", scale: "s", onClick: () => {
                this.resetEdit();
                this.currentEdit = Object.assign({}, folder);
            }, onMouseOver: (e) => {
                this.setTooltip(i18n.editFolder, e.target, true);
            }, onFocus: (e) => {
                this.setTooltip(i18n.editFolder, e.target);
            }, id: `${id}-edit-button` }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { icon: "trash", text: i18n.deleteFolder, slot: "actions-end", class: "folder-action", scale: "s", id: `${id}-delete-button`, onMouseEnter: (e) => {
                this.setTooltip(i18n.deleteFolder, e.target, true);
            }, onFocus: (e) => {
                this.setTooltip(i18n.deleteFolder, e.target);
            }, onClick: async () => {
                this.deleteFolderId = folder.id;
                this.deleteOpen = true;
            } })))));
    }
    renderEdit(folder) {
        const { i18n } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("form", { class: "folder-edit", onSubmit: (e) => {
                var _a;
                e.preventDefault();
                if ((_a = this.currentEdit) === null || _a === void 0 ? void 0 : _a.title) {
                    this.updateFolder(folder);
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("input", { class: "folder-edit__input", value: folder.title, onInput: (e) => {
                this.currentEdit.title = e.target.value;
            }, ref: (el) => {
                if (!this.inlineEdit && this.currentEdit) {
                    this.inlineEdit = el;
                    requestAnimationFrame(() => {
                        el === null || el === void 0 ? void 0 : el.focus();
                    });
                }
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "folder", class: "folder-edit__icon", scale: "s" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { iconStart: "x", label: i18n.cancel, appearance: "outline", kind: "neutral", scale: "m", onClick: () => this.resetEdit(), onMouseEnter: (e) => {
                this.setTooltip(i18n.cancel, e.target, true);
            }, onFocus: (e) => {
                this.setTooltip(i18n.cancel, e.target);
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { iconStart: "check", label: i18n.save, appearance: "solid", kind: "brand", scale: "m", type: "submit", onMouseEnter: (e) => {
                this.setTooltip(i18n.save, e.target, true);
            }, onFocus: (e) => {
                this.setTooltip(i18n.save, e.target);
            } })));
    }
    renderCreate() {
        const { i18n, el } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-tunnel", { reference: el, key: "create-modal" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { open: !this.createClosing, onCalciteModalClose: () => this.resetCreate(), outsideCloseDisabled: true, scale: "m", widthScale: "s" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h2", { slot: "header", class: "header" }, i18n.createAFolder), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, i18n.folderName, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { onCalciteInputInput: (e) => {
                this.createTitle = e.target.value;
            }, onKeyDown: (e) => {
                if (this.createTitle && e.key === "Enter") {
                    e.preventDefault();
                    this.createFolder();
                }
            } }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "secondary", appearance: "outline-fill", "data-id": "cancelButton", onClick: () => this.resetCreate(), width: "full" }, i18n.cancel), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "primary", appearance: "solid", kind: "brand", loading: this.processing, onClick: () => this.createFolder(), width: "full", disabled: !this.createTitle }, i18n.save))));
    }
    renderDelete() {
        var _a;
        const { el } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-tunnel", { reference: el, key: "delete-modal" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-delete-folder", { folder: (_a = this.folders) === null || _a === void 0 ? void 0 : _a.find((f) => f.id === this.deleteFolderId), portal: _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal, user: _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user, active: !this.deleteClosing, onArcgisDeleteFolderClose: async () => {
                var _a;
                this.resetDelete();
                // reset the list of folders
                await this.fetchUserFolders(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user);
                // TODO: Force content update if active folder was deleted
                const selectedFolder = (_a = this.folders) === null || _a === void 0 ? void 0 : _a.find((f) => f.id === this.folder);
                if (!selectedFolder) {
                    this.folder = "all";
                    this.arcgisItemBrowserFilter.emit(this.getEventDetail());
                }
            } })));
    }
    render() {
        var _a;
        const { user, portal } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c;
        const bucket = this.store.state.bucket;
        const { i18n, folders, deleteOpen, createOpen, tooltip, tooltipReferenceElement, showRecycle } = this;
        const hide = !user || !folders || (bucket && bucket !== "my");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: i18n.folders, expanded: this.expanded, noPadding: true, class: { hide }, onMouseOver: () => {
                this.hovered = true;
            }, onMouseOut: () => {
                this.hovered = false;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { filterEnabled: true, selectionAppearance: "border", selectionMode: "single-persist", loading: !folders, class: "folders", ref: (el) => {
                var _a;
                const filter = (_a = el === null || el === void 0 ? void 0 : el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector("calcite-filter");
                if (filter) {
                    filter.style.setProperty("--calcite-color-foreground-1", "var(--calcite-color-background)");
                    // for some reason, inside shadow dom _and_ a popover, in safari the sticky positioning used by calcite stops working.
                    filter.style.position = "absolute";
                    filter.style.top = "-48px";
                }
            } }, folders.map((folder) => {
            var _a;
            return this.currentEdit && ((_a = this.currentEdit) === null || _a === void 0 ? void 0 : _a.id) === (folder === null || folder === void 0 ? void 0 : folder.id)
                ? this.renderEdit(folder)
                : this.renderListItem(folder);
        }), showRecycle && !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.a)(user) && !(portal === null || portal === void 0 ? void 0 : portal.isPortal) &&
            this.renderListItem({
                created: "now",
                id: "recycle",
                title: i18n.recycleBin,
                username: (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) === null || _a === void 0 ? void 0 : _a.username
            })), this.allowEdits && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { id: "create-folder-button", iconStart: "folder-plus", appearance: "transparent", kind: "neutral", slot: "action", onClick: () => {
                this.createOpen = true;
            }, onMouseEnter: async (e) => {
                this.setTooltip(i18n.createFolder, e.target, true);
            }, onFocus: (e) => {
                this.setTooltip(i18n.createFolder, e.target);
            } }))), createOpen && this.renderCreate(), deleteOpen && this.renderDelete(), !!tooltip && tooltipReferenceElement && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { referenceElement: this.tooltipReferenceElement, ref: (el) => {
                if (!this.tooltipElement) {
                    this.tooltipElement = el;
                    el.open = true;
                }
            } }, tooltip))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisItemBrowserFilterFolder.style = arcgisItemBrowserFilterFolderCss;

const arcgisItemBrowserFilterGroupCss = ".hide.sc-arcgis-item-browser-filter-group{display:none}.groups.sc-arcgis-item-browser-filter-group{max-height:16.5rem;min-height:4rem;position:relative;z-index:0;overflow:auto;padding-top:2.5rem}calcite-list-item.sc-arcgis-item-browser-filter-group:not([selected]){--calcite-color-foreground-1:var(--calcite-color-background)}.group-thumbnail.sc-arcgis-item-browser-filter-group{margin-left:0.5rem;margin-right:0.5rem}";

const ArcgisItemBrowserFilterGroup = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserFilter", 7);
        this.group = "all";
        this.allowEdits = undefined;
        this.expanded = undefined;
        this.groups = [];
    }
    componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.filterGroup;
        if (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user && _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) {
            this.fetchUserGroups();
        }
        else {
            (0,_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.o)("user", () => this.fetchUserGroups());
            (0,_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.o)("portal", () => this.fetchUserGroups());
        }
    }
    componentDidLoad() {
        if (this.expanded && this.accordionItem) {
            this.accordionItem.expanded = true;
        }
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_17__.a)("group", this.store, () => (this.group = "all"));
    }
    getEventDetail() {
        var _a, _b;
        const { group } = this;
        const selectedGroup = (_a = this.groups) === null || _a === void 0 ? void 0 : _a.find((f) => f.id === group);
        const groupTitle = (selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.title) || "";
        const value = group !== "all"
            ? `group:${group}`
            : `group:(${(_b = this.groups) === null || _b === void 0 ? void 0 : _b.map(({ id }) => id).join(" OR ")})`;
        return {
            id: "group",
            param: "q",
            value,
            label: this.i18n.label.replace("${group}", groupTitle),
            group
        };
    }
    async fetchUserGroups() {
        var _a, _b;
        if (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user && _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) {
            const groups = await (0,_user_3ea69c3a_js__WEBPACK_IMPORTED_MODULE_19__.d)();
            this.groups = [{ id: "all", title: this.i18n.all }, ...groups];
            if (((_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.bucket) === "group") {
                this.arcgisItemBrowserFilter.emit(this.getEventDetail());
            }
        }
    }
    render() {
        const { user } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c;
        const bucket = this.store.state.bucket;
        const { i18n, groups } = this;
        const hide = !user || !groups || (bucket && bucket !== "group");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: i18n.groups, expanded: this.expanded, noPadding: true, class: { hide } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { filterEnabled: true, selectionAppearance: "border", selectionMode: "single", loading: !groups, class: "groups", ref: (el) => {
                var _a;
                const filter = (_a = el === null || el === void 0 ? void 0 : el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector("calcite-filter");
                if (filter) {
                    filter.style.setProperty("--calcite-color-foreground-1", "var(--calcite-color-background)");
                    // for some reason, inside shadow dom _and_ a popover, in safari the sticky positioning used by calcite stops working.
                    filter.style.position = "absolute";
                    filter.style.top = "-48px";
                }
            } }, groups === null || groups === void 0 ? void 0 : groups.map((group) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { class: "group", label: group.title, value: group.id, key: group.id, onCalciteListItemSelect: () => {
                this.group = group.id;
                this.store.state.groupId = group.id;
                this.arcgisItemBrowserFilter.emit(this.getEventDetail());
            }, selected: this.group === group.id }, group.id === "all" ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "users", slot: "content-start", scale: "s" })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-thumbnail", { slot: "content-start", class: "group-thumbnail", group: group, portal: _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal, tooltip: false, scale: "s" })))))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisItemBrowserFilterGroup.style = arcgisItemBrowserFilterGroupCss;

const templateIndustries = [
    "Agriculture",
    "Electric Utilities",
    "Environment",
    "Forestry",
    "Gas Utilities",
    "General",
    "Natural Resources",
    "Petroleum",
    "Public Safety",
    "Telecommunications",
    "Transportation",
    "Water Utilities"
];

const ArcgisItemBrowserFilterIndustry = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserFilter", 7);
        this.industry = undefined;
        this.expanded = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.filterIndustry;
    }
    async componentDidLoad() {
        if (this.industry) {
            this.arcgisItemBrowserFilter.emit(this.getEventDetail());
        }
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_17__.a)("industry", this.store, () => (this.industry = null));
    }
    getEventDetail() {
        const { industry } = this;
        const value = industry ? `typekeywords: "${industry}"` : "";
        const label = this.i18n.Industry.replace("${industry}", this.i18n[industry]);
        return { id: "industry", param: "filter", value, label, industry };
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: this.i18n.title, expanded: this.expanded, active: !!this.industry, filterID: "industry", onArcgisBrowserFilterRemove: () => {
                this.industry = null;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { selectionMode: "single", scale: "s", onCalciteTreeSelect: (event) => {
                var _a, _b;
                const node = event.target;
                const industry = ((_b = (_a = node.selectedItems) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.dataset.industry) || "";
                if (this.industry === industry) {
                    this.industry = null;
                }
                else {
                    this.industry = industry;
                }
                this.arcgisItemBrowserFilter.emit(this.getEventDetail());
            } }, templateIndustries.map((industry) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-industry": industry, selected: industry === this.industry }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, this.i18n[industry])))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisItemBrowserFilterItemType = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserFilter", 7);
        this.renderItemType = ([key, option]) => {
            const { itemType, allowedItemTypes } = this;
            const disallowedType = !(allowedItemTypes === null || allowedItemTypes === void 0 ? void 0 : allowedItemTypes.includes(key));
            const childrenAllowed = allowedItemTypes &&
                disallowedType &&
                option.children &&
                Object.keys(option.children).some((child) => allowedItemTypes.includes(child));
            if ((disallowedType && !childrenAllowed) ||
                (option.show && !option.show(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal, _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.userLicensedItems))) {
                return null;
            }
            if (disallowedType && childrenAllowed) {
                return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, Object.entries(option.children).map(this.renderItemType));
            }
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-item-type": key, "data-children": !!option.children, selected: key === itemType }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, _items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_18__.a[key]), option.children && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { slot: "children", selectionMode: "children" }, Object.entries(option.children).map(this.renderItemType)))));
        };
        this.itemType = undefined;
        this.allowedItemTypes = _items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_18__.d;
        this.expanded = undefined;
    }
    componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.filterItemType;
    }
    componentDidLoad() {
        var _a;
        if (this.itemType) {
            this.arcgisItemBrowserFilter.emit(this.getEventDetail());
            let activeItem = (_a = this.el) === null || _a === void 0 ? void 0 : _a.querySelector(`calcite-tree-item[data-item-type="${this.itemType}"]`);
            // expand parents on load if initial value was provided
            while (activeItem) {
                activeItem.expanded = true;
                activeItem = activeItem.parentElement.closest("calcite-tree-item");
                if (!(activeItem === null || activeItem === void 0 ? void 0 : activeItem.closest("arcgis-item-browser-filter-item-type"))) {
                    activeItem = null;
                }
            }
        }
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_17__.a)("itemType", this.store, () => (this.itemType = null));
    }
    getEventDetail() {
        const { itemType } = this;
        const option = (0,_items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_18__.g)(itemType);
        const value = (option === null || option === void 0 ? void 0 : option.q) ? `(${option.q})` : "";
        const label = option ? this.i18n.itemType.replace("${itemType}", _items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_18__.a[itemType]) : "";
        return { id: "itemType", param: "q", value, label, itemType };
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: this.i18n.title, expanded: this.expanded, active: !!this.itemType, filterID: "itemType", onArcgisBrowserFilterRemove: () => {
                this.itemType = null;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { selectionMode: "children", scale: "m", onCalciteTreeSelect: (event) => {
                var _a, _b;
                const node = event.target;
                const dataset = (_b = (_a = node === null || node === void 0 ? void 0 : node.selectedItems) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.dataset;
                const itemType = (dataset === null || dataset === void 0 ? void 0 : dataset.itemType) || "";
                if (this.itemType === itemType) {
                    this.itemType = null;
                }
                else {
                    this.itemType = itemType;
                }
                this.arcgisItemBrowserFilter.emit(this.getEventDetail());
            } }, Object.entries(_items_a4f5e98b_js__WEBPACK_IMPORTED_MODULE_18__.i).map(this.renderItemType))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

function geocoderSupportsSuggestions(geocoder) {
    return !!((geocoder.singleLineFieldName || (0,_geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_21__.i)(geocoder.url) || geocoder.enableSuggestions) &&
        geocoder.placefinding);
}
function getSearchGeocodingServices(portal, config, i18n) {
    var _a;
    const helperServices = portal.helperServices || {};
    let geocoders = [...(helperServices.geocode || [])];
    const geocodeAutoComplete = (_a = config.geocodeAutoComplete) !== null && _a !== void 0 ? _a : false;
    return geocoders
        .filter(geocoderSupportsSuggestions)
        .map((geocoder) => {
        // determine if we need to enable suggestions
        const enableSuggestions = geocoder.suggest === true && geocodeAutoComplete ? true : false;
        const isEsri = (0,_geocode_64e0b0d3_js__WEBPACK_IMPORTED_MODULE_21__.i)(geocoder.url);
        return Object.assign(Object.assign({}, geocoder), { name: isEsri ? "ArcGIS World Geocoding Service" : geocoder.name, enableSuggestions, categories: isEsri ? ["Populated Place", "Coordinate System"] : null, placefinding: isEsri ? true : geocoder.placefinding, outFields: isEsri ? ["Match_addr", "Addr_type", "StAddr", "City"] : null, placeholder: geocoder.placeholder || i18n.findLocationText, singleLineFieldName: geocoder.singleLineFieldName || "SingleLine", highlightSymbol: null, localSearchOptions: {
                minScale: 300000,
                distance: 50000
            } });
    });
}
function createExtentSearchOptions(portal, config, i18n, value) {
    var _a;
    const suggestionsEnabled = (_a = config === null || config === void 0 ? void 0 : config.geocodeAutoComplete) !== null && _a !== void 0 ? _a : false;
    const searchLayers = []; // type === "extent"
    const geocoders = getSearchGeocodingServices(portal, config, i18n);
    const options = {
        suggestionsEnabled,
        minSuggestCharacters: 3,
        maxResults: 5,
        searchTerm: value || null,
        activeSourceIndex: "all",
        sources: searchLayers.concat(geocoders),
        popupEnabled: false,
        portal
    };
    // remove activeSourceIndex if there is only a single geocoder
    if (options.sources.length === 1) {
        delete options.activeSourceIndex;
    }
    return options;
}

const arcgisItemBrowserFilterLocationCss = ".location-filter__container{box-sizing:border-box;display:flex;width:100%}.location-filter__input{flex:1 1 0%;--calcite-color-border-input:var(--calcite-color-border-3)}.location-filter__button{margin-inline-start:-1px}.location-filter__suggestions{box-sizing:border-box;height:8rem;overflow-y:auto;border-top:1px solid var(--calcite-color-border-1);border-bottom:1px solid var(--calcite-color-border-1);width:calc(var(--item-browser-pane-width) - 2.5rem)}.location-filter__no-results{margin-top:3rem;margin-bottom:0px;padding-top:0.5rem;padding-bottom:0px;text-align:center;color:var(--calcite-color-text-3)}";

const ArcgisItemBrowserFilterLocation = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserFilter", 7);
        this.arcgisItemBrowserSort = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserSort", 7);
        this.suggest = (term) => {
            this.loadingSuggestions = true;
            if ((term === null || term === void 0 ? void 0 : term.length) > 2) {
                this.searchViewModel.suggest(term);
            }
            else {
                this.loadingSuggestions = false;
                this.suggestions = [];
            }
        };
        this.debouncedSuggest = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.d)(this.suggest.bind(this), 1000);
        this.updateSuggest = (term) => {
            if ((term === null || term === void 0 ? void 0 : term.length) > 2) {
                this.loadingSuggestions = true;
            }
            this.debouncedSuggest(term);
        };
        this.location = undefined;
        this.extent = undefined;
        this.expanded = undefined;
        this.loading = undefined;
        this.searching = undefined;
        this.suggestions = [];
        this.loadingSuggestions = undefined;
        this.searchTerm = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.filterLocation;
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_17__.a)("location", this.store, () => {
            var _a;
            this.location = null;
            this.extent = null;
            (_a = this.searchViewModel) === null || _a === void 0 ? void 0 : _a.clear();
            this.searchTerm = "";
        });
    }
    async componentDidLoad() {
        if (this.location && this.extent) {
            this.searchTerm = this.location;
            this.emitFilterEvent();
        }
        if (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) {
            this.setupSearch();
        }
        else {
            (0,_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.o)("portal", () => {
                this.setupSearch();
            });
        }
    }
    async setupSearch() {
        const options = createExtentSearchOptions(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal, _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config, this.i18n, this.location);
        const [SearchViewModel] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_20__.l)(["esri/widgets/Search/SearchViewModel"]);
        this.searchViewModel = new SearchViewModel(Object.assign(Object.assign({}, options), { allPlaceholder: this.i18n.findLocationText, showInfoWindowOnSelect: false }));
        this.searchViewModel.on("suggest-start", () => {
            this.loadingSuggestions = true;
        });
        this.searchViewModel.on("suggest-complete", async (e) => {
            this.suggestions = [...e.results];
            this.loadingSuggestions = false;
        });
        this.searchViewModel.on("search-start", () => {
            this.loadingSuggestions = false;
            this.searching = true;
            this.suggestPopover.open = false;
        });
        this.searchViewModel.on("search-complete", () => {
            this.searching = false;
        });
        this.searchViewModel.on("select-result", this.handleLocationChange.bind(this));
        this.searchViewModel.on("search-clear", () => {
            if (this.extent && this.location) {
                this.location = null;
                this.extent = null;
                this.emitFilterEvent();
            }
        });
    }
    handleLocationChange(event) {
        this.location = event.result.name;
        const ext = event.result.extent;
        this.extent = `${ext.xmin},${ext.ymin},${ext.xmax},${ext.ymax}`;
        this.emitFilterEvent();
    }
    emitFilterEvent() {
        const { location, extent } = this;
        const label = this.i18n.label.replace("${location}", location);
        this.arcgisItemBrowserFilter.emit({
            id: "location",
            param: "bbox",
            value: extent !== null && extent !== void 0 ? extent : "",
            label,
            location,
            extent
        });
        // when filtering by location, only relevance sort order is allowed
        if (extent) {
            this.arcgisItemBrowserSort.emit({ sortField: "relevance", sortOrder: "desc" });
        }
    }
    handleSuggestSelect(suggestion) {
        var _a;
        this.searchViewModel.search(suggestion);
        this.searchTerm = suggestion.text;
        (_a = this.input) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    hasResults() {
        var _a;
        return (_a = this.suggestions) === null || _a === void 0 ? void 0 : _a.some((service) => { var _a; return (_a = service === null || service === void 0 ? void 0 : service.results) === null || _a === void 0 ? void 0 : _a.length; });
    }
    renderSuggestions(service) {
        var _a;
        return (_a = service === null || service === void 0 ? void 0 : service.results) === null || _a === void 0 ? void 0 : _a.map((suggestion) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { class: "location-filter__suggestion", key: suggestion.key, label: suggestion.text, onClick: () => this.handleSuggestSelect(suggestion), onKeyPress: (e) => {
                if (e.key === "Enter") {
                    this.handleSuggestSelect(suggestion);
                }
            } })));
    }
    render() {
        var _a, _b;
        if ((_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.api) === 3) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: this.i18n.location, expanded: this.expanded, active: !!this.location, filterID: "location", onArcgisBrowserFilterRemove: () => {
                this.location = null;
                this.extent = null;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "location-filter__container" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { loading: this.searching || this.loadingSuggestions, type: "text", value: this.searchTerm, placeholder: this.i18n.findLocationText, scale: "m", class: "location-filter__input", ref: (el) => (this.input = el), clearable: true, onKeyPress: (e) => {
                const value = e.target.value;
                if (e.key === "Enter" && e.target === e.currentTarget) {
                    this.searchTerm = value;
                    this.searchViewModel.suggest(value);
                    return;
                }
            }, onKeyDown: (e) => {
                var _a, _b;
                if (e.key === "ArrowDown" && !this.loadingSuggestions && ((_a = this.suggestions) === null || _a === void 0 ? void 0 : _a.length)) {
                    e.preventDefault();
                    e.stopPropagation();
                    (_b = this.el.querySelector("calcite-list-item")) === null || _b === void 0 ? void 0 : _b.setFocus();
                }
            }, onCalciteInputInput: (e) => {
                const value = e.target.value;
                this.searchTerm = value;
                this.updateSuggest(value);
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "location-filter__button", label: "search", slot: "action", kind: "neutral", appearance: "outline-fill", iconStart: "search", scale: "m", ref: (el) => (this.searchButton = el), onClick: () => {
                this.suggest(this.searchTerm);
            }, onKeyPress: (e) => {
                if (e.key === "Enter" || e.key === " ") {
                    this.suggest(this.searchTerm);
                }
            }, disabled: !this.searchTerm })), !this.loadingSuggestions && ((_a = this.searchTerm) === null || _a === void 0 ? void 0 : _a.length) > 2 && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { label: this.i18n.suggestions, referenceElement: this.searchButton, ref: (el) => (this.suggestPopover = el), autoClose: true, pointerDisabled: true, offsetDistance: 0, overlayPositioning: "fixed", open: true, placement: "bottom-end", flipPlacements: ["top-end"] }, this.hasResults() ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { key: this.searchTerm, class: "location-filter__suggestions" }, (_b = this.suggestions) === null || _b === void 0 ? void 0 : _b.map((service) => this.renderSuggestions(service)))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "location-filter__suggestions" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "location-filter__no-results" }, this.i18n.noResults.replace("${searchTerm}", this.searchTerm)))))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisItemBrowserFilterLocation.style = arcgisItemBrowserFilterLocationCss;

async function fetchRegions(portal) {
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_14__.r)(`${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_14__.g)(portal)}portals/regions`);
}

const ArcgisItemBrowserFilterRegion = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserFilter", 7);
        this.regions = [];
        this.region = undefined;
        this.expanded = undefined;
        this.loading = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.filterRegion;
        if (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal) {
            this.fetchRegions(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal);
        }
        else {
            (0,_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.o)("portal", (portal) => this.fetchRegions(portal));
        }
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_17__.a)("region", this.store, () => (this.region = null));
    }
    async fetchRegions(portal) {
        this.regions = await fetchRegions(portal);
        this.loading = false;
    }
    async componentDidLoad() {
        if (this.region) {
            this.emitFilterEvent();
        }
    }
    emitFilterEvent() {
        var _a;
        const { region, i18n } = this;
        const categoryValue = region ? `/region/${region.toLowerCase()}` : "";
        const value = region ? JSON.stringify([categoryValue]) : "";
        const activeRegion = (_a = this.regions) === null || _a === void 0 ? void 0 : _a.find((r) => r.region === region);
        const label = i18n.region.replace("${region}", (activeRegion === null || activeRegion === void 0 ? void 0 : activeRegion.localizedName) || (activeRegion === null || activeRegion === void 0 ? void 0 : activeRegion.name) || "");
        this.arcgisItemBrowserFilter.emit({
            id: "region",
            param: "categories",
            categoryValue,
            value,
            label,
            region
        });
    }
    render() {
        var _a;
        const { loading, regions, store } = this;
        if (loading || !(regions === null || regions === void 0 ? void 0 : regions.length) || ((_a = store.state) === null || _a === void 0 ? void 0 : _a.bucket) !== "living atlas") {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: this.i18n.regions, expanded: this.expanded, active: !!this.region, filterID: "region", onArcgisBrowserFilterRemove: () => {
                this.region = null;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { selectionMode: "children", scale: "m", onCalciteTreeSelect: (event) => {
                var _a, _b;
                const node = event.target;
                const dataset = (_b = (_a = node === null || node === void 0 ? void 0 : node.selectedItems) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.dataset;
                const region = (dataset === null || dataset === void 0 ? void 0 : dataset.value) || "";
                if (this.region === region) {
                    this.region = null;
                }
                else {
                    this.region = region;
                }
                this.emitFilterEvent();
            } }, regions.map(({ name, region, localizedName }) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-value": region, selected: this.region === region }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, localizedName || name)))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisItemBrowserFilterSharing = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserFilter", 7);
        this.filterLevel = (sharingLevel) => {
            if (sharingLevel === "org") {
                return !(0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_9__.a)(_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user);
            }
            return true;
        };
        this.sharingLevels = [["owner", ["private", "shared"]], "org", "public"];
        this.renderLevel = (sharingLevel) => {
            const [level, children] = Array.isArray(sharingLevel) ? sharingLevel : [sharingLevel];
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree-item", { "data-sharing": level, selected: (children === null || children === void 0 ? void 0 : children.includes(this.sharing)) || level === this.sharing }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", null, this.i18n[level]), children && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { slot: "children", selectionMode: "children" }, children.map(this.renderLevel)))));
        };
        this.sharing = undefined;
        this.expanded = undefined;
    }
    componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.filterSharing;
    }
    componentDidLoad() {
        if (this.sharing) {
            this.arcgisItemBrowserFilter.emit(this.getEventDetail());
        }
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_17__.a)("sharing", this.store, () => (this.sharing = null));
    }
    getEventDetail() {
        const { sharing, i18n } = this;
        const value = sharing === "owner" ? `(access:private OR access:shared)` : `(access: ${sharing})`;
        return {
            id: "sharing",
            param: "q",
            value: sharing ? value : "",
            label: sharing ? i18n.label.replace("${sharing}", i18n[sharing]) : "",
            sharing
        };
    }
    render() {
        var _a, _b;
        if (((_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.bucket) === "all" || !_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: this.i18n.title, expanded: this.expanded, active: !!this.sharing, filterID: "sharing", onArcgisBrowserFilterRemove: () => {
                this.sharing = null;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tree", { selectionMode: "children", scale: "m", onCalciteTreeSelect: (event) => {
                var _a;
                const node = event.target;
                const item = (_a = node.selectedItems) === null || _a === void 0 ? void 0 : _a[0];
                const sharing = item === null || item === void 0 ? void 0 : item.dataset.sharing;
                if (this.sharing === sharing) {
                    this.sharing = null;
                }
                else {
                    this.sharing = sharing;
                }
                this.arcgisItemBrowserFilter.emit(this.getEventDetail());
            } }, this.sharingLevels.filter(this.filterLevel).map((level) => this.renderLevel(level)))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisItemBrowserFilterTags = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserFilter = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserFilter", 7);
        this.deselectAllTags = () => {
            this.el
                .querySelectorAll("calcite-combobox-item[selected]")
                .forEach((item) => {
                item.selected = false;
            });
        };
        this.tags = undefined;
        this.expanded = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.filterTags;
    }
    async componentDidLoad() {
        if (this.tags) {
            this.arcgisItemBrowserFilter.emit(this.getEventDetail());
        }
        (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_17__.a)("tags", this.store, () => {
            this.tags = null;
            this.deselectAllTags();
        });
    }
    getEventDetail() {
        const { tags } = this;
        const value = (tags === null || tags === void 0 ? void 0 : tags.length) ? `tags:(${tags.map((tag) => `"${tag}"`).join(" OR ")})` : "";
        const label = (tags === null || tags === void 0 ? void 0 : tags.length) ? this.i18n.label.replace("${tags}", tags.join(", ")) : "";
        return { id: "tags", param: "filter", value, tags, label };
    }
    componentDidRender() {
        const items = this.el.querySelectorAll("calcite-combobox-item");
        const values = [];
        items.forEach((item) => {
            // remove duplicate items which were added by calcite combobox
            if (values.includes(item.value)) {
                item.parentElement.removeChild(item);
            }
            else {
                values.push(item.value);
            }
        });
    }
    render() {
        var _a;
        const { i18n } = this;
        const knownTags = this.store.state.knownTags || [];
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filter", { heading: i18n.title, expanded: this.expanded, active: !!((_a = this.tags) === null || _a === void 0 ? void 0 : _a.length), onArcgisBrowserFilterRemove: () => {
                this.tags = [];
                this.deselectAllTags();
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox", { label: i18n.title, overlayPositioning: "fixed", placeholder: i18n.selectTags, scale: "s", maxItems: 5, allowCustomValues: true, clearDisabled: true, onCalciteComboboxChange: (e) => {
                var _a;
                this.tags = (_a = e.target.selectedItems) === null || _a === void 0 ? void 0 : _a.map((item) => item.value);
                this.arcgisItemBrowserFilter.emit(this.getEventDetail());
            }, style: { marginBottom: "1rem" }, ref: (el) => {
                var _a;
                const div = el.shadowRoot.querySelector("div");
                if (div && ((_a = this.store.state) === null || _a === void 0 ? void 0 : _a.panel)) {
                    div.insertAdjacentHTML("beforeend", `<style>
              .floating-ui-container--active {
                visibility: visible !important;
                pointer-events: auto !important;
                position: absolute !important;
              }
              </style>`);
                }
            } }, knownTags.map((tag) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item", { key: tag, value: tag, textLabel: tag.length > 36 ? `${tag.slice(0, 36)}...` : tag }))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisItemBrowserFilters = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
    }
    render() {
        var _a, _b;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-filters", { store: this.store, style: ((_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.bucket) === "subscription content" ? { display: "none" } : {} }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "top" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "top" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "bottom" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "bottom" }))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisItemBrowserPagination = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserPage = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserPage", 7);
        this.total = undefined;
        this.start = undefined;
        this.num = 60;
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        const { start, total, num } = this;
        this.arcgisItemBrowserPage.emit({ start, total, num });
    }
    render() {
        const { start, total, num, store } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-pagination", { start: start, total: total, num: num, store: store, onArcgisBrowserPage: (e) => this.arcgisItemBrowserPage.emit(e.detail) }));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const arcgisItemBrowserPreviewCss = ":host{display:flex;height:100%;width:100%;flex:1 1 0%;flex-direction:column;background-color:var(--calcite-color-background)}.preview__header{margin-inline-start:0.75rem}.preview__title{margin:0px;overflow-wrap:break-word;padding:0px;font-size:1rem;font-weight:500;color:var(--calcite-color-text-1);line-height:1.375}.title{margin-top:0.75rem;margin-bottom:0.75rem;padding:0px;font-size:1.125rem;font-weight:500;color:var(--calcite-color-text-1);word-wrap:break-word;word-break:break-word}.badges{margin-bottom:1rem;display:block}.badges[empty]{display:none}calcite-accordion-item{--calcite-accordion-item-padding:1rem 1rem;--calcite-accordion-item-background:var(--calcite-color-foreground-1);width:100%;box-sizing:border-box;border-bottom:1px solid var(--calcite-color-border-2)}.section{background-color:var(--calcite-color-background);padding-left:1rem;padding-right:1rem;padding-top:1rem;padding-bottom:1rem;margin:0rem -1rem calc(-1rem - 1px) -1rem;line-height:1.35}.section--tight{padding-top:0px;padding-bottom:0px;padding-left:0px;padding-right:0px}.details-title{margin-top:1rem;margin-bottom:0px;padding-bottom:0.25rem;padding-top:0px;font-size:0.75rem;font-weight:500;color:var(--calcite-color-text-3);--calcite-label-margin-bottom:0}.details-title:first-of-type{margin-top:0px}.details-title--label{padding-bottom:0px}.details-text{margin:0px;overflow-wrap:break-word;padding:0px;font-size:0.875rem;font-weight:400;color:var(--calcite-color-text-1)}.details-text a{color:var(--calcite-color-text-link)}.details--text-empty{font-size:0.875rem;font-weight:400;color:var(--calcite-color-text-3)}.description{width:100%;overflow:auto;overflow-wrap:break-word;padding-bottom:0.25rem;line-height:1.35}.description *{max-width:100%;font-size:0.875rem !important}.description{--item-browser-table-border:1px solid var(--calcite-color-border-2)}.description table{width:100%;border-collapse:collapse;--tw-border-spacing-x:0px;--tw-border-spacing-y:0px;border-spacing:var(--tw-border-spacing-x) var(--tw-border-spacing-y);overflow:auto;background-color:var(--calcite-color-foreground-1);text-align:start;font-size:0.75rem;border:var(--item-browser-table-border)}.description table>thead{background-color:var(--calcite-color-foreground-1);font-weight:400;border-bottom:var(--item-browser-table-border)}.description table>tbody{width:100%;overflow:auto}.description table>tfoot{border-top:var(--item-browser-table-border)}.description table th,.description table td{padding:0.5rem;text-align:start;font-weight:300;border-left:var(--item-browser-table-border);border-right:var(--item-browser-table-border)}.description table tr{text-align:start;border-bottom:var(--item-browser-table-border)}.description table tr:last-child{border-bottom:none}.favorite{display:block;padding-top:1.5rem}.copy-input{--calcite-color-background:var(--calcite-color-foreground-1)}.sublayer-item{--tw-shadow:none}.sublayer__tabs{flex:1 1 auto;background-color:var(--calcite-color-background)}.sublayer__tabs--white{background-color:var(--calcite-color-foreground-1)}.sublayer-item__content{max-width:10.875rem;display:flex;min-width:0px;flex-direction:column}.sublayer-item__title{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;padding-top:0.5rem;padding-bottom:0.5rem;font-size:0.875rem;color:var(--calcite-color-text-2);text-decoration-line:underline}.sublayer-item__title--matched{padding-top:0px;padding-bottom:0px}.sublayer-item__description{font-size:0.75rem;color:var(--calcite-color-text-3)}.sublayer__header{display:flex;background-color:var(--calcite-color-foreground-1);padding-left:1rem;padding-right:1rem;padding-top:1rem;padding-bottom:0.5rem;font-weight:500;color:var(--calcite-color-text-1)}.sublayer__header__title{min-width:0px;overflow-wrap:break-word}.sublayer__tab-nav{background-color:var(--calcite-color-foreground-1);padding-left:1rem;padding-right:1rem}.sublayer__content{height:100%;background-color:var(--calcite-color-foreground-1);margin-top:-0.5rem}.sublayer__content--overview{box-sizing:border-box;background-color:var(--calcite-color-background);padding-top:2rem;padding-bottom:2rem;padding-left:1.25rem;padding-right:1.25rem}.footer-actions{display:grid;width:100%;grid-template-columns:repeat(1, minmax(0, 1fr));gap:0.5rem}.error-container{display:flex;height:100%;padding:1rem}";

const ArcgisItemBrowserPreview = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserPreviewClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserPreviewClose", 7);
        this.arcgisInternalItemBrowserSublayer = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisInternalItemBrowserSublayer", 7);
        this.arcgisItemBrowserInternalUIAction = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserInternalUIAction", 7);
        this.sortSublayers = (a, b) => {
            const matchedA = this.layerMatches(a);
            const matchedB = this.layerMatches(b);
            if (matchedA === matchedB) {
                return b.id - a.id;
            }
            return matchedA ? -1 : 1;
        };
        this.layerMatches = (layer) => {
            var _a, _b, _c, _d, _e;
            return (_e = (_d = (_c = (_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.highlights) === null || _c === void 0 ? void 0 : _c[this.item.id]) === null || _d === void 0 ? void 0 : _d.sublayers) === null || _e === void 0 ? void 0 : _e.includes(layer.id);
        };
        this.renderField = (field) => {
            if (field.name === "OBJECTID") {
                return;
            }
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-preview-field-details", { field: field, item: this.item, sublayer: this.sublayer, api: _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.api, showFieldStatistics: this.store.state.showFieldStatistics }));
        };
        this.handleLayerClick = (layer) => {
            this.sublayer = layer;
            this.fetchSublayer();
            this.arcgisItemBrowserInternalUIAction.emit({
                action: "click",
                category: "panel action",
                details: "sublayer"
            });
            this.arcgisInternalItemBrowserSublayer.emit(Object.assign({}, layer));
        };
        this.renderLayer = (layer) => {
            const matches = this.layerMatches(layer);
            const { icon } = (0,_utils_aa26c49f_js__WEBPACK_IMPORTED_MODULE_25__.g)({ geometry: layer.geometryType, type: layer.type });
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { onClick: () => this.handleLayerClick(layer), onKeyDown: (event) => {
                    if (event.key === " " || event.key === "Enter") {
                        event.preventDefault();
                        this.handleLayerClick(layer);
                    }
                }, class: "sublayer-item" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: icon, flipRtl: true, scale: "s", slot: "content-start" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { slot: "content", class: "sublayer-item__content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: { "sublayer-item__title": true, "sublayer-item__title--matched": matches } }, layer.title || layer.name), matches && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "sublayer-item__description" }, this.i18n.matched)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", slot: "content-end", icon: "chevron-right", flipRtl: true, style: { display: "flex", justifyContent: "flex-end" } })));
        };
        this.item = undefined;
        this.portal = undefined;
        this.user = undefined;
        this.hidePreviewFooters = false;
        this.fullItem = undefined;
        this.formattedViews = undefined;
        this.loadingLayers = true;
        this.layerError = undefined;
        this.layers = [];
        this.sublayer = undefined;
        this.fullSublayer = undefined;
        this.showLayers = undefined;
        this.userInfo = undefined;
        this.tab = "fields";
        this.itemError = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.preview;
        this.layerTypes = this.store.state.i18n.layerTypes;
        this.lang = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_5__.a)(this.el);
        this.init();
    }
    updatePreview() {
        this.init();
    }
    async fetchItem() {
        this.itemError = null;
        return (0,_thumbnail_bcb89e69_js__WEBPACK_IMPORTED_MODULE_7__.k)(this.item, this.portal, this.user, this.store);
    }
    async init() {
        var _a, _b, _c, _d, _e, _f;
        if (!this.item) {
            return;
        }
        const { item, portal, lang } = this;
        this.fullItem = null;
        this.shouldExpandOverview = true;
        this.loadingLayers = true;
        const response = await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.m)(this.fetchItem(), 600);
        if (response.error) {
            this.itemError =
                response.error.code === "disabledSubscription"
                    ? this.i18n.itemError.subscription
                    : this.i18n.itemError.unhandled;
            return;
        }
        this.fullItem = response.result;
        this.formattedViews = await (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_12__.f)(item.numViews || 0, {
            api: _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.api,
            places: 0,
            type: "decimal"
        });
        this.userInfo = await (0,_user_0fa9ff5a_js__WEBPACK_IMPORTED_MODULE_24__.a)(item, portal, lang);
        (_a = this.flowItem) === null || _a === void 0 ? void 0 : _a.setFocus();
        const typeToShowLayers = [
            "Feature Service",
            "Layer Template",
            "Feature Collection"
        ];
        this.showLayers =
            typeToShowLayers.includes(item.type) && !((_b = item.typeKeywords) === null || _b === void 0 ? void 0 : _b.includes("Route Layer"));
        if (this.showLayers) {
            // layer templates store their layers/schema in item data
            if (item.type === "Layer Template" &&
                ((_c = item.typeKeywords) === null || _c === void 0 ? void 0 : _c.map((keyword) => keyword.toLowerCase()).includes("service template"))) {
                const data = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_14__.r)(`${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_14__.g)(this.portal)}content/items/${this.item.id}/data`);
                this.layers = [...((_d = data.layers) !== null && _d !== void 0 ? _d : []), ...((_e = data.tables) !== null && _e !== void 0 ? _e : [])];
            }
            else {
                const response = await (0,_services_5925c4b4_js__WEBPACK_IMPORTED_MODULE_13__.f)({
                    item: this.fullItem,
                    portal: _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.portal,
                    layers: null,
                    isSecure: false
                });
                if (response.result) {
                    this.layers = (_f = response.result) === null || _f === void 0 ? void 0 : _f.sort(this.sortSublayers);
                }
                else if (response.error) {
                    this.layerError = this.i18n.layerError;
                    if (response.error.code === "serviceNotExist") {
                        this.layerError.message = this.i18n.noServiceMessage;
                    }
                }
            }
        }
        this.loadingLayers = false;
    }
    handleAccordionItemClick(element, details) {
        this.arcgisItemBrowserInternalUIAction.emit({
            action: element.expanded ? "expand" : "collapse",
            category: "panel action",
            details
        });
    }
    async fetchSublayer() {
        const layerResponse = await (0,_services_5925c4b4_js__WEBPACK_IMPORTED_MODULE_13__.a)(this.portal, this.sublayer.id, this.item.url);
        this.fullSublayer = layerResponse === null || layerResponse === void 0 ? void 0 : layerResponse.result;
    }
    closePreview() {
        this.sublayer = null;
        this.fullItem = null;
        this.arcgisItemBrowserInternalUIAction.emit({
            action: "close panel",
            category: "panel action"
        });
        this.arcgisItemBrowserPreviewClose.emit();
    }
    renderHeader() {
        var _a;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header-content", class: "preview__header" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", { class: "preview__title" }, (_a = this.item) === null || _a === void 0 ? void 0 : _a.title), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-type", { item: this.item, portal: this.portal, scale: "m" })));
    }
    renderLayers() {
        var _a;
        return this.loadingLayers ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: this.i18n.loading, scale: "s" })) : this.layerError ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { icon: true, open: true, scale: "s", width: "full", kind: "warning" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "title" }, this.layerError.title), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, this.layerError.message)))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section section--tight" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { "selection-mode": "none", loading: this.loadingLayers, ref: (list) => {
                var _a;
                const table = (_a = list === null || list === void 0 ? void 0 : list.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector("table");
                if (table) {
                    table.style.borderSpacing = "0";
                }
            } }, (_a = this.layers) === null || _a === void 0 ? void 0 : _a.map(this.renderLayer))));
    }
    isAccordionItem(element) {
        return element.tagName === "CALCITE-ACCORDION-ITEM";
    }
    handleSublayerSectionChange(section) {
        this.tab = section;
        this.arcgisItemBrowserInternalUIAction.emit({
            action: "click",
            category: "panel action",
            details: `sublayer ${section}`
        });
    }
    renderSublayerPreview() {
        var _a, _b, _c, _d;
        const { sublayer, item, i18n, fullSublayer } = this;
        const { geometryType, title, name, description } = sublayer;
        const { type, isGeometry } = (0,_utils_aa26c49f_js__WEBPACK_IMPORTED_MODULE_25__.g)({
            geometry: geometryType,
            type: sublayer.type
        });
        const layerType = this.layerTypes[type];
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { closable: true, onCalciteFlowItemBack: (e) => {
                e.stopPropagation();
                this.arcgisInternalItemBrowserSublayer.emit();
                this.sublayer = null;
            }, onCalciteFlowItemClose: (e) => {
                e.stopPropagation();
                this.closePreview();
            } }, this.renderHeader(), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "sublayer__header" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-sublayer-type", { name: name || title, geometry: sublayer.geometryType, type: sublayer.type, showType: false, scale: "s" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tabs", { position: "top", scale: "m", layout: "center", class: { sublayer__tabs: true, "sublayer__tabs--white": this.tab === "fields" } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tab-nav", { slot: "title-group", class: "sublayer__tab-nav" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tab-title", { onClick: () => this.handleSublayerSectionChange("fields"), selected: this.tab === "fields" }, i18n.fields), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tab-title", { onClick: () => this.handleSublayerSectionChange("overview"), selected: this.tab === "overview" }, i18n.overview)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tab", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "sublayer__content" }, sublayer.fields ? (sublayer.fields.map(this.renderField)) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "details-text details-text--empty" }, i18n.noFields)))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tab", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "sublayer__content sublayer__content--overview" }, this.renderDetail(isGeometry ? i18n.geometryTypeTitle : i18n.layerTypeTitle, layerType), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h4", { class: "details-title" }, i18n.description), description ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "details-text description", innerHTML: (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_3__.s)((0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_3__.d)(description)) })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "details-text details-text--empty" }, i18n.noDescription)), !((_a = this.portal) === null || _a === void 0 ? void 0 : _a.isPortal) &&
            this.renderDetail(i18n.dataUpdated, (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_12__.a)((_b = fullSublayer === null || fullSublayer === void 0 ? void 0 : fullSublayer.editingInfo) === null || _b === void 0 ? void 0 : _b.dataLastEditDate)), !((_c = this.portal) === null || _c === void 0 ? void 0 : _c.isPortal) &&
            this.renderDetail(i18n.schemaUpdated, (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_12__.a)((_d = fullSublayer === null || fullSublayer === void 0 ? void 0 : fullSublayer.editingInfo) === null || _d === void 0 ? void 0 : _d.schemaLastEditDate)), item.url && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-preview-copy", { text: `${item.url}/${sublayer.id}`, heading: i18n.URL }))))), !this.hidePreviewFooters && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer", class: "footer-actions" }, this.renderSublayerSelect(), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "sublayer-footer" })))));
    }
    renderDetail(title, text, emptyText, html) {
        const textNode = !emptyText || text ? (html ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "details-text", innerHTML: (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_3__.s)(text) })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "details-text" }, text))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "details-text details-text--empty" }, emptyText));
        return [(0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h4", { class: "details-title" }, title), textNode];
    }
    renderSublayerSelect() {
        var _a, _b, _c;
        if ((_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state.selection) === null || _b === void 0 ? void 0 : _b.includes("sublayer")) {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-card-sublayer-select", { item: this.item, user: this.user, portal: this.portal, selection: ((_c = this.store) === null || _c === void 0 ? void 0 : _c.state.selection) === "multiple-sublayer" ? "multiple" : "single", appearance: "solid", width: "full" }));
        }
        return null;
    }
    render() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const { item, fullItem, i18n, user, sublayer, userInfo, portal, itemError } = this;
        const owner = (_a = item === null || item === void 0 ? void 0 : item.owner) !== null && _a !== void 0 ? _a : "";
        const managedBy = (0,_badges_555e1b90_js__WEBPACK_IMPORTED_MODULE_23__.g)(fullItem) === "public_authoritative"
            ? this.i18n.itemManagedBy.replace("${username}", owner)
            : owner;
        const layersHeader = ((_b = this.layers) === null || _b === void 0 ? void 0 : _b.length)
            ? i18n.layersCount.replace("${count}", `${((_c = this.layers) === null || _c === void 0 ? void 0 : _c.length) || 0}`)
            : i18n.layers;
        const matchedSublayers = (_f = (_e = (_d = this.store) === null || _d === void 0 ? void 0 : _d.state.highlights) === null || _e === void 0 ? void 0 : _e[item === null || item === void 0 ? void 0 : item.id]) === null || _f === void 0 ? void 0 : _f.sublayers;
        const layersDescription = (matchedSublayers === null || matchedSublayers === void 0 ? void 0 : matchedSublayers.length) && !this.loadingLayers
            ? i18n.matchedNumber.replace("${num}", `${matchedSublayers.length}`)
            : null;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { closable: true, loading: !fullItem && !itemError, onCalciteFlowItemClose: (e) => {
                e.stopPropagation();
                this.closePreview();
            }, ref: (el) => (this.flowItem = el) }, this.renderHeader(), !!itemError && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "error-container" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { kind: "danger", open: true, scale: "s" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "title" }, this.i18n.itemError.title), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, itemError)))), fullItem && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion", { "icon-position": "start", appearance: "transparent", key: item.id, class: "accordion", onClick: async (e) => {
                const target = e.target;
                if (this.isAccordionItem(target)) {
                    await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(300);
                    if (target.expanded) {
                        target.scrollIntoView({ behavior: "smooth", block: "start" });
                    }
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { heading: i18n.thumbnail, ref: (el) => {
                this.thumbnailElement = el;
            }, onClick: (e) => this.isAccordionItem(e.target) &&
                this.handleAccordionItemClick(this.thumbnailElement, "thumbnail") }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section section--tight" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-card-thumbnail", { item: item, user: user, portal: portal }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { heading: i18n.overview, ref: (el) => {
                this.overviewElement = el;
                if (this.shouldExpandOverview) {
                    el.expanded = true;
                    this.shouldExpandOverview = false;
                }
            }, onClick: (e) => this.isAccordionItem(e.target) &&
                this.handleAccordionItemClick(this.overviewElement, "overview") }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "summary-top" }), this.renderDetail(i18n.summary, fullItem.snippet, i18n.noSummary), !!((_g = (0,_badges_555e1b90_js__WEBPACK_IMPORTED_MODULE_23__.a)(item, portal, user)) === null || _g === void 0 ? void 0 : _g.length) && [
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h4", { class: "details-title" }, i18n.itemStatus),
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-badges", { class: "badges", item: item, portal: portal, user: user, scale: "s", width: "full" })
        ], (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h4", { class: "details-title" }, i18n.owner), ((_h = this.store) === null || _h === void 0 ? void 0 : _h.state.panel) ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-user-avatar", { user: userInfo, scale: "s", portal: portal, showName: true, description: managedBy })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-user-popup", { baseUrl: _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config.baseUrl, portal: portal, item: fullItem })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h4", { class: "details-title" }, i18n.shared), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-share-summary", { item: fullItem, scale: "s" }), this.renderDetail(i18n.updated, (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_12__.a)(fullItem.modified)), !!user && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-favorite", { class: "favorite", user: user, portal: portal, item: fullItem, width: "full" })))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { heading: i18n.description, key: "description", ref: (el) => {
                this.descriptionElement = el;
            }, onClick: (e) => this.isAccordionItem(e.target) &&
                this.handleAccordionItemClick(this.descriptionElement, "description") }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, fullItem.description ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "description", innerHTML: (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_3__.s)(fullItem.description) })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "details-text details-text--empty" }, i18n.noDescription)))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { heading: i18n.details, ref: (el) => {
                this.detailsElement = el;
            }, onClick: (e) => this.isAccordionItem(e.target) &&
                this.handleAccordionItemClick(this.detailsElement, "details") }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, this.renderDetail(i18n.created, (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_12__.a)(fullItem.created)), this.renderDetail(i18n.viewCount, this.formattedViews), item.type === "Dashboard" &&
            this.renderDetail(i18n.dashboardViews, ((_j = item.typeKeywords) === null || _j === void 0 ? void 0 : _j.includes("Mobile"))
                ? i18n.dashboardMobile
                : i18n.dashboardDesktop), !!fullItem.size &&
            this.renderDetail(i18n.fileSize, (0,_file_bf8ab90f_js__WEBPACK_IMPORTED_MODULE_22__.f)(fullItem.size)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-preview-copy", { text: fullItem.id, heading: i18n.ID }), fullItem.url && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-preview-copy", { text: fullItem.url, heading: i18n.URL })), this.renderDetail(i18n.credits, fullItem.accessInformation, i18n.noCredits), this.renderDetail(i18n.termsOfUse, fullItem.licenseInfo, i18n.noTermsOfUse, true))), this.showLayers && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-accordion-item", { heading: layersHeader, description: layersDescription, ref: (el) => {
                this.layersElement = el;
            }, onClick: async (e) => {
                if (this.isAccordionItem(e.target)) {
                    this.handleAccordionItemClick(this.layersElement, "layers");
                }
            } }, this.renderLayers()))))), !this.hidePreviewFooters && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer", class: "footer-actions" }, this.renderSublayerSelect(), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "footer" })))), !!sublayer && this.renderSublayerPreview())));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "item": ["updatePreview"]
    }; }
};
ArcgisItemBrowserPreview.style = arcgisItemBrowserPreviewCss;

const arcgisItemBrowserPreviewCopyCss = ".heading{margin-top:1rem;margin-bottom:0px;padding-bottom:0.25rem;padding-top:0px;font-size:0.75rem;font-weight:500;color:var(--calcite-color-text-3);--calcite-label-margin-bottom:0}.label{padding-bottom:0px}.input{--calcite-color-background:var(--calcite-color-foreground-1)}.action{position:relative}.tooltip{position:absolute;white-space:nowrap;border-radius:var(--calcite-border-radius);background-color:var(--calcite-color-foreground-1);padding-top:0.5rem;padding-bottom:0.5rem;padding-left:0.75rem;padding-right:0.75rem;font-size:0.75rem;font-weight:500;color:var(--calcite-color-text-1);opacity:0;--tw-shadow:0 4px 8px -1px rgba(0, 0, 0, 0.08), 0 2px 4px -1px rgba(0, 0, 0, 0.04);--tw-shadow-colored:0 4px 8px -1px var(--tw-shadow-color), 0 2px 4px -1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;transition-property:color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;transition-duration:150ms;transform:translateY(-8px);top:calc(100% + 4px);inset-inline-end:0;width:auto;border:1px solid var(--calcite-color-border-3);line-height:1.375}.button:hover+.tooltip,.button:focus+.tooltip{opacity:1;transform:translateY(0)}";

const ArcgisItemBrowserPreviewCopy = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserInternalUIAction = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserInternalUIAction", 7);
        this.heading = undefined;
        this.text = undefined;
        this.copied = false;
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.copy;
    }
    async handleCopy(text) {
        navigator.clipboard.writeText(text);
        this.copied = true;
        const isSublayer = this.el.parentElement.classList.contains("sublayer__content");
        this.arcgisItemBrowserInternalUIAction.emit({
            action: "copy",
            category: "panel action",
            details: isSublayer ? "layers" : "details"
        });
        await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(10000);
        this.copied = false;
    }
    render() {
        const { heading, text, i18n } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "label", scale: "s" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h4", { class: "heading" }, heading), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { value: text, readOnly: true, alignment: "start", type: "text", label: heading, scale: "s", class: "input" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "action", class: "action" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "button", slot: "action", iconStart: "copy-to-clipboard", id: "copy-button", kind: "neutral", scale: "s", onClick: () => this.handleCopy(text), onMouseOut: async () => {
                await (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_4__.t)(200);
                this.copied = false;
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "tooltip" }, this.copied ? i18n === null || i18n === void 0 ? void 0 : i18n.copied : i18n === null || i18n === void 0 ? void 0 : i18n.copy))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisItemBrowserPreviewCopy.style = arcgisItemBrowserPreviewCopyCss;

const ArcgisItemBrowserPreviewFieldDetails = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.field = undefined;
        this.item = undefined;
        this.sublayer = undefined;
        this.showFieldStatistics = undefined;
        this.api = 4;
        this.layer = undefined;
    }
    async getFieldData() {
        if (!this.layer) {
            const [FeatureLayer] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_20__.l)(["esri/layers/FeatureLayer"]);
            const layer = new FeatureLayer({
                // Notice that the url doesn't end with /2
                url: this.item.url,
                layerId: this.sublayer.id
            });
            await layer.load();
            this.layer = layer;
        }
    }
    render() {
        const { field, showFieldStatistics, api } = this;
        if (!field) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: field.alias || field.name, description: field.name, headingLevel: 5, collapsible: showFieldStatistics && api === 4 && this.item.type === "Feature Service", onCalciteBlockToggle: () => {
                this.getFieldData();
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { slot: "icon", icon: _type_to_icon_7546439f_js__WEBPACK_IMPORTED_MODULE_26__.f[field.type] || "string", scale: "s", class: "layer-icon" }), !!this.layer && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-field-info", { layer: this.layer, fieldName: field.name }))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisItemBrowserSearch = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserSearch = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserSearch", 7);
        this.arcgisItemBrowserSearchInput = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserSearchInput", 7);
        this.term = undefined;
        this.placeholder = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
    }
    render() {
        var _a, _b;
        const { term, placeholder } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, ((_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.bucket) !== "subscription content" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-search", { term: term, placeholder: placeholder, onArcgisBrowserSearch: (e) => this.arcgisItemBrowserSearch.emit(e.detail), onArcgisBrowserSearchInput: (e) => this.arcgisItemBrowserSearchInput.emit(e.detail) }))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const defaultSortOrders = {
    my: {
        sortField: "modified",
        sortOrder: "desc"
    },
    favorites: {
        sortField: "modified",
        sortOrder: "desc"
    },
    group: {
        sortField: "modified",
        sortOrder: "desc"
    },
    org: {
        sortField: "modified",
        sortOrder: "desc"
    },
    "subscription content": {
        sortField: "relevance",
        sortOrder: "asc"
    },
    "living atlas": {
        sortField: "relevance",
        sortOrder: "asc"
    },
    "living atlas analysis": {
        sortField: "relevance",
        sortOrder: "asc"
    },
    all: {
        sortField: "relevance",
        sortOrder: "asc"
    }
};

const ArcgisItemBrowserSort = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserSort = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserSort", 7);
        this.options = ["title", "relevance", "modified"];
        this.field = undefined;
        this.order = undefined;
        this.activeField = undefined;
        this.activeOrder = undefined;
        this.userSetSort = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        const { field, options } = this;
        if (!field) {
            const bucketSort = this.store.state.bucket && defaultSortOrders[this.store.state.bucket];
            this.activeField = bucketSort ? bucketSort.sortField : (options === null || options === void 0 ? void 0 : options[0]) || "relevance";
            this.activeOrder = (0,_utils_2f459d6d_js__WEBPACK_IMPORTED_MODULE_27__.a)(this.activeField);
        }
        else {
            this.userSetSort = true;
            this.activeField = field;
            this.activeOrder = this.order || (0,_utils_2f459d6d_js__WEBPACK_IMPORTED_MODULE_27__.a)(field);
        }
        (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.o)(this.store, (bucket) => {
            const defaultSort = defaultSortOrders[bucket];
            if (defaultSort) {
                this.updateSortField(defaultSort.sortField);
            }
        });
        (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.a)(this.store, (sort) => {
            this.activeField = sort.sortField;
            this.activeOrder = sort.sortOrder;
        });
    }
    componentDidLoad() {
        this.arcgisItemBrowserSort.emit({
            sortField: this.field || this.activeField,
            sortOrder: this.order || (this.field ? (0,_utils_2f459d6d_js__WEBPACK_IMPORTED_MODULE_27__.a)(this.field) : this.activeOrder)
        });
    }
    updateSortField(field) {
        this.activeField = field;
        this.activeOrder = (0,_utils_2f459d6d_js__WEBPACK_IMPORTED_MODULE_27__.a)(field);
        this.arcgisItemBrowserSort.emit({
            sortField: this.activeField,
            sortOrder: this.activeOrder
        });
    }
    updateSortOrder(order) {
        this.activeOrder = order;
        this.arcgisItemBrowserSort.emit({
            sortField: this.activeField,
            sortOrder: this.activeOrder
        });
    }
    render() {
        var _a, _b;
        const { activeField, activeOrder, field, order, options } = this;
        const selectedField = activeField || (options.includes(field) ? field : options[0]);
        const selectedOrder = activeOrder || order;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, ((_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.bucket) !== "subscription content" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-sort", { store: this.store, field: selectedField, order: selectedOrder, options: options, onArcgisBrowserSortFieldChange: (e) => this.updateSortField(e.detail), onArcgisBrowserSortOrderChange: (e) => this.updateSortOrder(e.detail) }))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const COLUMNS = {
    title: {
        width: "minmax(0, 7fr)"
    },
    type: {
        width: "minmax(0, 5fr)",
        hidden: true
    },
    modified: {
        width: "7.5rem"
    },
    badges: {
        width: "6.5rem",
        hidden: true
    },
    owner: {
        width: "minmax(0, 3fr)"
    },
    sharing: {
        width: "6rem",
        hidden: true
    },
    size: {
        width: "minmax(0, 2fr)"
    },
    deleted: {
        width: "12rem"
    },
    details: {
        width: "8rem",
        hidden: true
    },
    favorite: {
        width: "3.5rem",
        hidden: true
    },
    actions: {
        width: "3.5rem",
        hidden: true
    }
};
function calculateDaysUntilDeletion(date) {
    const dateDeleted = new Date(date);
    const expirationDate = new Date(dateDeleted.setDate(dateDeleted.getDate() + _delete_items_32d24534_js__WEBPACK_IMPORTED_MODULE_28__.D));
    // Cap minimum days remaining at 1 to ensure cultureUtil doesn't lose its `single` string
    return Math.max(Math.ceil((expirationDate.valueOf() - Date.now()) / 86400000), 1);
}

const arcgisItemBrowserTableCss = ".table{background-color:var(--calcite-color-foreground-1)}.header{display:grid;grid-template-columns:var(--item-browser-table-columns)}.button__-text-sorted{font-weight:500}.column-header{border-bottom:1px solid var(--calcite-color-border-2);margin-bottom:1px}.column-header--sorted{border-bottom-color:var(--calcite-color-brand)}.screen-reader-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}";

const ArcgisItemBrowserTable = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserColumnUpdate = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserColumnUpdate", 7);
        this.arcgisItemBrowserSort = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserSort", 7);
        this.rows = [];
        this.columns = [
            "title",
            "type",
            "modified",
            "badges",
            "owner",
            "sharing",
            "details",
            "actions"
        ];
        this.activeFocus = [0, 0];
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.table;
        (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.b)(this.store, (preview) => {
            // when the preview is closed, restore focus to the grid
            if (!preview && this.store.state.activeFocus) {
                const [row, column] = this.store.state.activeFocus;
                this.updateRows();
                const rowElement = this.rows[row];
                rowElement === null || rowElement === void 0 ? void 0 : rowElement.focusColumn(column);
            }
        });
    }
    async componentDidLoad() {
        this.arcgisItemBrowserColumnUpdate.emit(this.columns);
    }
    updateColumns(columns) {
        this.arcgisItemBrowserColumnUpdate.emit(columns);
    }
    async attemptMove([row, column], direction) {
        const rowElement = this.rows[row];
        if (await rowElement.canFocusColumn(column)) {
            this.store.state.activeFocus = [row, column];
            requestAnimationFrame(() => rowElement.focusColumn(column));
        }
        else {
            switch (direction) {
                case "right":
                    return this.moveRight([row, column]);
                case "left":
                    return this.moveLeft([row, column]);
                case "up":
                    return this.moveUp([row, column]);
                case "down":
                    return this.moveDown([row, column]);
            }
        }
    }
    updateRows() {
        this.rows = this.rowSlot.assignedElements();
    }
    getLastColumnIndex() {
        const isMultiSelect = this.store.state.selection === "multiple";
        return this.columns.length - (isMultiSelect ? 0 : 1);
    }
    getLastRowIndex() {
        return this.rows.length - 1;
    }
    async moveRight([row, currentColumn]) {
        const desiredColumn = currentColumn >= this.getLastColumnIndex() ? 0 : currentColumn + 1;
        this.attemptMove([row, desiredColumn], "right");
    }
    async moveLeft([row, currentColumn]) {
        const desiredColumn = currentColumn < 1 ? this.getLastColumnIndex() : currentColumn - 1;
        this.attemptMove([row, desiredColumn], "left");
    }
    async moveUp([currentRow, column]) {
        const desiredRow = currentRow < 1 ? this.getLastRowIndex() : currentRow - 1;
        this.attemptMove([desiredRow, column], "up");
    }
    async moveDown([currentRow, column]) {
        const desiredRow = currentRow + 1 > this.getLastRowIndex() ? 0 : currentRow + 1;
        this.attemptMove([desiredRow, column], "down");
    }
    handleKeyboard(e) {
        const { key } = e;
        const current = this.store.state.activeFocus || [0, 0];
        this.updateRows();
        switch (key) {
            case "ArrowDown":
                e.preventDefault();
                return this.moveDown(current);
            case "ArrowUp":
                e.preventDefault();
                return this.moveUp(current);
            case "ArrowLeft":
                e.preventDefault();
                return this.moveLeft(current);
            case "ArrowRight":
                e.preventDefault();
                return this.moveRight(current);
        }
    }
    renderColumn(id) {
        const label = this.i18n.headers[id];
        const { hidden } = COLUMNS[id];
        const { sortField, sortOrder } = this.store.state.sort || {};
        const sortID = id === "deleted" ? "modified" : id;
        const isSorted = sortField === sortID;
        return hidden ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { role: "columnheader", class: "column-header" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "screen-reader-only" }, label))) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: { "column-header": true, "column-header--sorted": isSorted } }, !!(id === "title" && this.store.state.selection === "multiple") && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { role: "columnheader", class: "screen-reader-only" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, this.i18n.selection))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { role: "columnheader", "aria-sort": sortOrder === "asc" ? "ascending" : "descending" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { width: "full", alignment: "icon-end-space-between", tabindex: "-1", scale: "m", appearance: "transparent", kind: isSorted ? "brand" : "neutral", "icon-end": isSorted && sortOrder === "asc" ? "caret-up" : "caret-down", onClick: () => {
                // if we are already sorting on this field, flip it
                if (isSorted) {
                    this.arcgisItemBrowserSort.emit({
                        sortField: sortID,
                        sortOrder: sortOrder === "asc" ? "desc" : "asc"
                    });
                }
                else {
                    this.arcgisItemBrowserSort.emit({
                        sortField: sortID,
                        sortOrder: (0,_utils_2f459d6d_js__WEBPACK_IMPORTED_MODULE_27__.a)(sortID)
                    });
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: { button__text: true, "button__text--sorted": isSorted } }, label)))));
    }
    render() {
        const isMultiSelect = this.store.state.selection === "multiple";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { style: {
                "--item-browser-table-columns": `${this.columns.map((id) => COLUMNS[id].width).join(" ")}`
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", Object.assign({ class: "table", "aria-label": this.i18n.caption, role: "grid", "aria-readonly": "true" }, (isMultiSelect ? { "aria-multiselectable": "true" } : {}), { onKeyDown: (e) => this.handleKeyboard(e) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { role: "rowgroup" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { role: "row", class: "header" }, this.columns.map((id) => this.renderColumn(id)))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { ref: (el) => (this.rowSlot = el) })))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "columns": ["updateColumns"]
    }; }
};
ArcgisItemBrowserTable.style = arcgisItemBrowserTableCss;

const arcgisItemBrowserTableRowCss = ":host{display:block;--item-browser-table-row-active-background:#bbd5fa26}.row{display:grid;background-color:var(--calcite-color-foreground-1);grid-template-columns:var(--item-browser-table-columns);border:1px solid var(--calcite-color-foreground-1);border-top:1px solid var(--calcite-color-border-2);margin-top:-1px}.row--first{border-top-color:var(--calcite-color-foreground-1)}.row--selected{position:relative;border-color:var(--calcite-color-brand);background-color:var(--item-browser-table-row-active-background)}.row--selected-last{border-top-color:var(--item-browser-table-row-active-background)}.cell{display:flex;align-items:center;justify-content:flex-start;padding-left:0.75rem;padding-right:0.75rem;padding-top:0.5rem;padding-bottom:0.5rem;font-size:0.875rem;color:var(--calcite-color-text-1);outline-color:transparent;line-height:1.35}.cell:focus{outline:2px solid var(--calcite-color-brand);outline-offset:-2px}.cell--narrow{padding-inline-start:0.5rem}.cell--overflow{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;overflow-wrap:break-word}.checkbox-wrap{display:flex}.checkbox__title{flex:1 1 0%}.user-popup{width:100%}.screen-readers-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.date-deleted{display:block;padding-bottom:0.25rem;font-size:0.875rem;font-weight:400;color:var(--calcite-color-text-1)}.deletes-in{display:block;font-size:0.75rem;font-weight:400;color:var(--calcite-color-text-2)}.button{border:1px solid var(--calcite-color-foreground-3);font-family:inherit;box-sizing:border-box;display:flex;height:2rem;max-width:100%;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;align-items:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;background-color:var(--calcite-color-foreground-1);padding-left:0.75rem;padding-right:0.75rem;padding-top:0.5rem;padding-bottom:0.5rem;color:var(--calcite-color-text-1);text-decoration-line:none;outline-color:transparent;transition:all var(--calcite-animation-timing) ease-in-out 0s, outline 0s, outline-offset 0s}.button:hover{box-shadow:inset 0 0 0 1px var(--calcite-color-foreground-3)}.button:focus{outline:2px solid var(--calcite-color-brand);outline-offset:2px}.button--transparent{border:1px solid transparent;background:transparent;padding-left:0.5rem;padding-right:0.5rem}.button--transparent:hover{background-color:var(--calcite-color-foreground-2);box-shadow:none}.button__icon{pointer-events:none}";

const ArcgisItemBrowserTableRow = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserColumnUpdate = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserColumnUpdate", 7);
        this.arcgisItemBrowserCardSelect = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserCardSelect", 7);
        this.arcgisItemBrowserCardPreview = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserCardPreview", 7);
        this.arcgisItemBrowserActionsOpen = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserActionsOpen", 7);
        this.arcgisItemBrowserRestoreItem = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserRestoreItem", 7);
        var _a;
        this.columnRefs = {};
        this.item = undefined;
        this.portal = undefined;
        this.index = undefined;
        this.user = undefined;
        this.api = 4;
        this.baseUrl = (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.config) === null || _a === void 0 ? void 0 : _a.baseUrl;
        this.link = undefined;
        this.newTab = undefined;
        this.name = undefined;
        this.preview = undefined;
        this.showItemType = true;
        this.showBadges = true;
        this.showSharing = true;
        this.actions = [];
        this.hasMouse = undefined;
        this.mouseOverColumn = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.tableRow;
    }
    async canFocusColumn(index) {
        var _a;
        const columns = this.store.state.columns || [];
        const adjustedIndex = this.getColumnNumber(index);
        const id = columns[adjustedIndex];
        // only allow tabbing to the badges if there are badges displayed
        if (id === "badges") {
            return !this.badges.empty;
        }
        return !!((_a = this.columnRefs[id]) === null || _a === void 0 ? void 0 : _a.method) || adjustedIndex < 0;
    }
    async focusColumn(column) {
        var _a;
        let adjustedColumn = column;
        // selectable tables have the checkbox and title in a single column
        // offset the column number to allow movement as if they were separate columns
        if (this.store.state.selection === "multiple") {
            if (column === 0) {
                (_a = this.checkbox) === null || _a === void 0 ? void 0 : _a.setFocus();
                return;
            }
            adjustedColumn = column - 1;
        }
        const { el, method } = this.columnRefs[this.store.state.columns[adjustedColumn]] || {};
        el[method]();
    }
    getColumnNumber(column) {
        if (this.store.state.selection === "multiple") {
            return column - 1;
        }
        return column;
    }
    isSimpleColumn(id) {
        return !["owner", "details", "favorite", "actions"].includes(id);
    }
    onClick(cb) {
        return {
            onClick: () => {
                cb();
            },
            onKeyDown: (e) => {
                if (e.key === "Enter" || e.key === " ") {
                    cb();
                }
            }
        };
    }
    renderTitle(selected) {
        var _a, _b, _c, _d;
        const { item } = this;
        const activeColumn = (_b = (_a = this.store.state.activeFocus) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : 0;
        const rowHasFocus = ((_d = (_c = this.store.state.activeFocus) === null || _c === void 0 ? void 0 : _c[0]) !== null && _d !== void 0 ? _d : 0) === this.index;
        const columnHasFocus = activeColumn < 2;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "checkbox-wrap", onMouseOver: () => {
                this.mouseOverColumn = 0;
            }, key: "title" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { role: "gridcell", class: "cell" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", Object.assign({}, ((rowHasFocus && columnHasFocus) || (this.hasMouse && this.mouseOverColumn === 0)
            ? {}
            : { inert: true }), { class: "checkbox", checked: selected, ref: (el) => {
                this.checkbox = el;
            }, onClick: (e) => {
                e.stopPropagation();
                this.store.state.activeFocus = [this.index, 0];
            }, onCalciteCheckboxChange: () => {
                this.arcgisItemBrowserCardSelect.emit({ item, selected: !selected });
            }, value: item.id }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "screen-readers-only" }, item.title))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", Object.assign({ onMouseOver: () => {
                this.mouseOverColumn = 0;
            }, role: "gridcell", class: "cell cell--narrow checkbox__title", id: `row-${item.id}`, tabindex: activeColumn === 1 && rowHasFocus ? 0 : -1 }, this.onClick(() => {
            if (this.preview === "title" && !this.store.state.recycleBin) {
                this.arcgisItemBrowserCardPreview.emit(item);
            }
            this.store.state.activeFocus = [this.index, 1];
        }), { ref: (el) => {
                this.columnRefs.title = { el, method: "focus" };
            } }), this.item.title)));
    }
    renderDeleted() {
        const { item, i18n, store } = this;
        const days = calculateDaysUntilDeletion(item.modified);
        const dateText = days < 2 ? i18n.deletesTomorrow : (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_12__.b)(store.state.lang, i18n.deletes, days);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "date-deleted" }, (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_12__.a)(item.modified)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "deletes-in" }, dateText)));
    }
    renderColumn(id, columnIndex, selected) {
        var _a, _b, _c, _d;
        const { item, api, portal, baseUrl, user, actions } = this;
        const activeColumn = (_b = (_a = this.store.state.activeFocus) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : 0;
        const isSimpleColumn = this.isSimpleColumn(id);
        const rowHasFocus = ((_d = (_c = this.store.state.activeFocus) === null || _c === void 0 ? void 0 : _c[0]) !== null && _d !== void 0 ? _d : 0) === this.index;
        const columnHasFocus = columnIndex === this.getColumnNumber(activeColumn);
        if (id === "title" && this.store.state.selection === "multiple") {
            return this.renderTitle(selected);
        }
        const tab = { tabIndex: columnHasFocus && rowHasFocus ? 0 : -1 };
        const truncate = ["owner"].includes(id);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", Object.assign({ key: id }, (isSimpleColumn ? tab : {}), { role: "gridcell", class: { cell: true, "cell--overflow": truncate }, ref: (el) => {
                if (isSimpleColumn) {
                    this.columnRefs[id] = { el, method: "focus" };
                }
            },
            // on click, set the active focus coordinates to that cell
            onClick: () => {
                setTimeout(() => {
                    const column = this.store.state.selection === "multiple" ? columnIndex + 1 : columnIndex;
                    if (!columnHasFocus || !rowHasFocus) {
                        this.store.state.activeFocus = [this.index, column];
                    }
                    if (id === "title" && this.preview === "title" && !this.store.state.recycleBin) {
                        this.arcgisItemBrowserCardPreview.emit(item);
                    }
                }, 100);
            }, onMouseOver: () => {
                this.mouseOverColumn = columnIndex;
            } }), id === "title" && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, this.item.title), id === "type" && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-type", { item: item, portal: this.portal, scale: "m" }), id === "modified" && (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_12__.a)(item.modified), id === "deleted" && this.renderDeleted(), id === "size" && (0,_file_bf8ab90f_js__WEBPACK_IMPORTED_MODULE_22__.f)(item.size), id === "badges" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-badges", { ref: (el) => (this.badges = el), showTooltips: true, item: item, width: "narrow", scale: "s", tabIndex: -1 })), id === "sharing" && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-share-summary", { showText: false, item: item, scale: "s" }), id === "owner" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-user-popup", { item: item, underline: true, api: api, portal: portal, baseUrl: baseUrl, scale: "m", class: "user-popup", showAvatar: false, ref: (el) => {
                this.columnRefs.owner = { el, method: "setFocus" };
            }, tabIndex: -1 })), id === "details" &&
            (this.store.state.recycleBin ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", Object.assign({}, tab, { class: "button", ref: (el) => {
                    this.columnRefs.details = { el, method: "focus" };
                }, onClick: () => {
                    this.arcgisItemBrowserRestoreItem.emit(this.item);
                } }), this.i18n.restore)) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("a", Object.assign({}, tab, { href: `${(0,_url_35875a10_js__WEBPACK_IMPORTED_MODULE_29__.r)(this.baseUrl)}/item.html?id=${item.id}`, class: "button", ref: (el) => {
                    this.columnRefs.details = { el, method: "focus" };
                } }), this.i18n.details))), id === "favorite" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-favorite", { item: item, portal: portal, user: user || (_config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_2__.c.user), iconOnly: true, ref: (el) => {
                this.columnRefs.favorite = { el, method: "setFocus" };
            }, tabIndex: -1 })), id === "actions" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, actions.length > 0 && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", Object.assign({}, tab, { class: "button button--transparent", "aria-label": this.i18n.moreOptions, "aria-haspopup": "true", slot: "trigger", ref: (el) => {
                this.columnRefs.actions = { el, method: "focus" };
            }, onClick: (e) => {
                this.arcgisItemBrowserActionsOpen.emit({
                    el: e.target,
                    actions
                });
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: "ellipsis", scale: "s", class: "button__icon" })))))));
    }
    render() {
        var _a, _b;
        const columns = this.store.state.columns || [];
        const { item } = this;
        const selection = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state.selection;
        const itemSelection = ["single", "multiple"].includes(selection);
        const selected = itemSelection && isSelected({ item, selectedItems: (_b = this.store) === null || _b === void 0 ? void 0 : _b.state.selectedItems });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, Object.assign({}, (selected ? { "data-selected": true } : {}), { onMouseOver: () => {
                this.hasMouse = true;
            }, onMouseOut: () => {
                this.hasMouse = false;
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", Object.assign({ class: {
                row: true,
                "row--selected": selected,
                "row--first": this.index === 0
            }, role: "row" }, (selected ? { ariaSelected: true } : {}), { "aria-labelledby": `row-${item.id}` }), columns.map((id, i) => this.renderColumn(id, i, selected)))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisItemBrowserTableRow.style = arcgisItemBrowserTableRowCss;

const ArcgisItemBrowserTopBar = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
    }
    render() {
        var _a, _b;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-browser-top-bar", { store: this.store, filtersDisabled: ((_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.bucket) === "subscription content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content-start" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-start" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "bucket" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "bucket" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "search" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "search" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content-end" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", { name: "content-end" })))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};

const ArcgisItemBrowserView = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisItemBrowserView = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisItemBrowserView", 7);
        this.options = ["grid", "list"];
        this.view = undefined;
    }
    async componentWillLoad() {
        this.store = (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.g)(this.el);
        this.i18n = this.store.state.i18n.view;
        const { view } = this;
        if (!view) {
            this.view = this.store.state.view || "list";
        }
        (0,_store_7fa26472_js__WEBPACK_IMPORTED_MODULE_8__.c)(this.store, (newView) => {
            this.view = newView;
        });
    }
    syncStore(newView) {
        this.store.state.view = newView;
    }
    componentDidLoad() {
        this.arcgisItemBrowserView.emit(this.view);
    }
    renderOption(option) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { key: option, selected: option === this.view, onCalciteDropdownItemSelect: () => this.arcgisItemBrowserView.emit(option), iconStart: option }, this.i18n[option]));
    }
    renderButton() {
        var _a, _b;
        const { i18n, view } = this;
        const baseAttrs = {
            class: "button",
            slot: "trigger",
            scale: "m",
            appearance: "outline-fill",
            kind: "neutral",
            iconStart: view,
            iconFlipRtl: "start",
            ariaLabel: `${i18n.view}: ${i18n[view]}`
        };
        return ((_b = (_a = this.store) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.width) > _resize_a17b7292_js__WEBPACK_IMPORTED_MODULE_6__.D ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", Object.assign({}, baseAttrs), i18n[view])) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", Object.assign({}, baseAttrs)));
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { placement: "bottom-end", scale: "m", overlayPositioning: "fixed", widthScale: "s" }, this.renderButton(), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", { selectionMode: "single" }, this.options.map((option) => this.renderOption(option))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "view": ["syncStore"]
    }; }
};



//# sourceMappingURL=arcgis-item-browser_31.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/badges-555e1b90.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/badges-555e1b90.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getBadges),
/* harmony export */   b: () => (/* binding */ getTooltip),
/* harmony export */   g: () => (/* binding */ getContentStatus),
/* harmony export */   i: () => (/* binding */ isPublicAuthoritative)
/* harmony export */ });
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/* harmony import */ var _privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./privileges-5c382f61.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js");
/* harmony import */ var _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./item-types-2029b06b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-2029b06b.js");
/* harmony import */ var _user_0fa9ff5a_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./user-0fa9ff5a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-0fa9ff5a.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */





const retiredUrlParts = [
    "3DInsetMap",
    "3DScene",
    "3DViz",
    "AttachmentViewer",
    "CapacityAnalysis",
    "Compare/storytelling_compare",
    "Compare/storytelling_tabbed",
    "Compare/storytelling_sidepanel",
    "Compare/Multiviewer",
    "Compare/Search",
    "Compare/Configure",
    "Compare/SideBySideViewer_Configure",
    "Compare3d",
    "CompareAnalysis",
    "CompareMaps",
    "Directions",
    "Edit",
    "Editor",
    "Elevations",
    "ElevationsProfile",
    "Embed",
    "Filter",
    "FilterGallery",
    "GeoList",
    "GeoTour",
    "HeaderFooter",
    "Identify",
    "ImageInterpretation",
    "ImageryViewer",
    "ImpactSummary",
    "InformationLookup",
    "InteractiveFilter",
    "InteractiveLegend",
    "LayerShowcase",
    "Legend",
    "LiveMaps",
    "LocalPerspective",
    "MapAndAppGallery",
    "MapCarousel",
    "MapTools",
    "Media",
    "MinimalGallery",
    "Minimalist",
    "Nearby",
    "OnePane",
    "Panels",
    "PanelsLegend",
    "Profile",
    "PublicGallery",
    "PublicInformation",
    "ServiceLookup",
    "SimpleMapViewer",
    "SimpleViewer",
    "SocialMedia",
    "Solutions/s2.html?app=apps2/FindEditFilter",
    "Solutions/s2.html?app=apps2/Finder",
    "StorytellingTextLegend",
    "StoryMapBasic",
    "Styler",
    "SummaryViewer",
    "Time",
    "TimeAware",
    "TwoPane",
    "Viewer",
    "ZoneLookup"
];

function isRetiredItemType(type) {
    return _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_2__.r.includes(type);
}
function isRetiredStoryMap(item) {
    var _a, _b;
    return ((_a = item.portal) === null || _a === void 0 ? void 0 : _a.isPortal) && item.type === "Web Mapping Application" && ((_b = item.typeKeywords) === null || _b === void 0 ? void 0 : _b.includes("Story Map"));
}
function isCityEngineWebScene(item) {
    return item.type === "CityEngine Web Scene";
}
function isRetiredApp(item) {
    var _a;
    const isRetiredUrl = retiredUrlParts.some((urlPart) => {
        var _a;
        const containsHtml = urlPart.includes(".html");
        const fullRetiredPath = `/apps/${urlPart}${!containsHtml ? "/" : ""}`;
        return (_a = item.url) === null || _a === void 0 ? void 0 : _a.includes(fullRetiredPath);
    });
    return ((_a = item.portal) === null || _a === void 0 ? void 0 : _a.isPortal) && item.type === "Web Mapping Application" && item.url && isRetiredUrl;
}
function getContentStatus(item) {
    var _a;
    return (item === null || item === void 0 ? void 0 : item.contentStatus) || ((_a = item === null || item === void 0 ? void 0 : item.sourceJSON) === null || _a === void 0 ? void 0 : _a.contentStatus);
}
function isOrgAuthoritative(item) {
    return getContentStatus(item) === "org_authoritative";
}
function isPublicAuthoritative(item) {
    return getContentStatus(item) === "public_authoritative";
}
function getBadges(item, portal, user) {
    var _a, _b, _c, _d, _e, _f, _g;
    const badges = [];
    const groupDesignations = (_b = (item.groupDesignations || ((_a = item.sourceJSON) === null || _a === void 0 ? void 0 : _a.groupDesignations))) === null || _b === void 0 ? void 0 : _b.split(", ");
    if (isOrgAuthoritative(item) || isPublicAuthoritative(item)) {
        badges.push("Authoritative");
    }
    if (getContentStatus(item) === "deprecated") {
        badges.push("Deprecated");
    }
    if (item.type === "Solution" && ((_c = item.typeKeywords) === null || _c === void 0 ? void 0 : _c.includes("ArcGIS Solution"))) {
        badges.push("Solution");
    }
    if (((_d = item.typeKeywords) === null || _d === void 0 ? void 0 : _d.includes("Public Data Collection")) && user) {
        badges.push("Public Data Collection");
    }
    if (isRetiredItemType(item.type) || isRetiredStoryMap(item) || isRetiredApp(item)) {
        badges.push("Retired");
    }
    if (groupDesignations === null || groupDesignations === void 0 ? void 0 : groupDesignations.includes("livingatlas")) {
        badges.push("Living Atlas");
    }
    if (groupDesignations && groupDesignations.includes("opendata")) {
        badges.push("Open Data");
    }
    if ((0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.b)(item)) {
        badges.push("Premium");
    }
    if ((0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_0__.a)(item)) {
        badges.push("Subscriber");
    }
    if (item.origin || ((_e = item.sourceJSON) === null || _e === void 0 ? void 0 : _e.origin)) {
        badges.push("Collaboration");
    }
    if ((item.listed || ((_f = item.sourceJSON) === null || _f === void 0 ? void 0 : _f.listed)) && !(portal === null || portal === void 0 ? void 0 : portal.isPortal)) {
        badges.push("Marketplace");
    }
    if (((_g = item.typeKeywords) === null || _g === void 0 ? void 0 : _g.includes("Registered App")) &&
        item.type !== "API Key" &&
        (!(portal === null || portal === void 0 ? void 0 : portal.isPortal) || item.owner !== "esri_apps")) {
        badges.push("Registered");
    }
    return badges;
}
async function getTooltip(badgeType, item, user, i18n, locale) {
    var _a, _b;
    const publicUser = !user || (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_1__.a)(user);
    switch (badgeType) {
        case "Authoritative":
            if (getContentStatus(item) === "public_authoritative") {
                const verified = await (0,_user_0fa9ff5a_js__WEBPACK_IMPORTED_MODULE_3__.b)(item, locale);
                const name = ((_a = item.portal) === null || _a === void 0 ? void 0 : _a.isPortal) ? (_b = item.portal) === null || _b === void 0 ? void 0 : _b.name : verified === null || verified === void 0 ? void 0 : verified.name;
                return i18n.Authoritative.tooltip.public.replace("${name}", name);
            }
            else {
                return i18n.Authoritative.tooltip.org;
            }
        case "Retired":
            const retired = i18n.Retired.tooltip;
            if (isRetiredStoryMap(item)) {
                return retired.storyMap;
            }
            else if (isCityEngineWebScene(item)) {
                return retired.cityEngine;
            }
            else if (isRetiredApp(item)) {
                return retired.app;
            }
            else {
                return retired.general;
            }
        case "Subscriber":
            return publicUser ? i18n.Subscriber.tooltip.public : i18n.Subscriber.tooltip.org;
        case "Premium":
            return publicUser ? i18n.Premium.tooltip.public : i18n.Premium.tooltip.org;
        case "Registered":
            return i18n.Registered.tooltip;
        default:
            return i18n[badgeType].tooltip;
    }
}



//# sourceMappingURL=badges-555e1b90.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-9f0f37ee.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-9f0f37ee.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ fetchLivingAtlasCategories),
/* harmony export */   b: () => (/* binding */ fetchGroupCategories),
/* harmony export */   f: () => (/* binding */ fetchCategories),
/* harmony export */   g: () => (/* binding */ getItemCategorySchema),
/* harmony export */   u: () => (/* binding */ updateCategories)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _group_6a6303b0_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./group-6a6303b0.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/group-6a6303b0.js");
/* harmony import */ var _privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./privileges-5c382f61.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */





const getItemCategorySchema = async ({ portal, user, group, useCache = false }) => {
    var _a;
    try {
        const fetchResult = await (group
            ? fetchGroupCategories(group.id, portal, useCache)
            : fetchCategories(portal, user, useCache));
        return { result: (_a = fetchResult === null || fetchResult === void 0 ? void 0 : fetchResult.categorySchema) !== null && _a !== void 0 ? _a : null };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
async function fetchCategories(portal, user, useCache = true) {
    portal !== null && portal !== void 0 ? portal : (portal = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal);
    user !== null && user !== void 0 ? user : (user = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user);
    if (!(portal === null || portal === void 0 ? void 0 : portal.id) || (user && (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_3__.a)(user))) {
        return null;
    }
    const getSchema = () => (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}portals/${portal.id}/categorySchema`);
    return useCache ? (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(getSchema, "categorySchema", portal.id) : getSchema();
}
async function fetchGroupCategories(groupId, portal, useCache = true) {
    portal !== null && portal !== void 0 ? portal : (portal = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal);
    if (!groupId || !portal) {
        return null;
    }
    const getSchema = () => (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${(0,_group_6a6303b0_js__WEBPACK_IMPORTED_MODULE_2__.g)(portal, { id: groupId })}categorySchema`);
    return useCache ? (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(getSchema, "categorySchema", groupId) : getSchema();
}
async function fetchLivingAtlasSchema(portal, categoryName) {
    var _a;
    const base = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal);
    const self = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${base}portals/self`);
    const groupSearch = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${base}community/groups?q=${self.contentCategorySetsGroupQuery}`);
    const categoryGroup = (_a = groupSearch === null || groupSearch === void 0 ? void 0 : groupSearch.results) === null || _a === void 0 ? void 0 : _a[0];
    const schemaItemSearch = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${base}content/groups/${categoryGroup.id}/search`, {
        q: `typekeywords: ${categoryName}`
    });
    const schemaItem = schemaItemSearch.results[0];
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${base}content/items/${schemaItem.id}/data`);
}
async function fetchLivingAtlasCategories(portal, categoryName, useCache = true) {
    const getSchema = () => fetchLivingAtlasSchema(portal, categoryName);
    return useCache ? (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(getSchema, "categorySchema", categoryName) : getSchema();
}
async function updateCategories({ categories, itemIds, portal }) {
    try {
        const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}/content/updateItems`;
        const items = JSON.stringify(itemIds.map((id) => {
            return {
                [id]: { categories: Array.isArray(categories) ? categories : categories[id] }
            };
        }));
        return { result: await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, { items }, {}, "post") };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
}



//# sourceMappingURL=categories-9f0f37ee.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/categories-ca134005.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CATEGORY_BASE_PATH),
/* harmony export */   U: () => (/* binding */ UPPER_CATEGORY_BASE_PATH),
/* harmony export */   a: () => (/* binding */ getCategoryUIPath),
/* harmony export */   g: () => (/* binding */ getRootCategoryPath)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const CATEGORY_BASE_PATH = "/categories";
const UPPER_CATEGORY_BASE_PATH = "/Categories";

// TODO: add unit tests
/**
 * Construct the path of the category based on the parent path and the category title
 */
const getCategoryUIPath = (parentPath, category, lowerCase = true) => {
    const basePath = parentPath !== null && parentPath !== void 0 ? parentPath : "";
    return `${basePath}${basePath.endsWith("/") ? "" : "/"}${lowerCase ? category.title.toLocaleLowerCase() : category.title}`;
};
/**
 * Find the root node title to use for categories
 */
function getRootCategoryPath(categories) {
    var _a;
    let categoryTitle = (_a = categories === null || categories === void 0 ? void 0 : categories[0]) === null || _a === void 0 ? void 0 : _a.title;
    if (categoryTitle && categoryTitle.charAt(0) !== "/") {
        categoryTitle = `/${categoryTitle}`;
    }
    return categoryTitle || UPPER_CATEGORY_BASE_PATH;
}



//# sourceMappingURL=categories-ca134005.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/file-bf8ab90f.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/file-bf8ab90f.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ sanitizeFileName),
/* harmony export */   f: () => (/* binding */ formatFileSize),
/* harmony export */   g: () => (/* binding */ getItemInfoByType),
/* harmony export */   s: () => (/* binding */ sanitizeFileInput),
/* harmony export */   v: () => (/* binding */ validateOverwriteFileName)
/* harmony export */ });
/* harmony import */ var _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item-types-2029b06b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-2029b06b.js");
/* harmony import */ var _guid_aeaed84d_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./guid-aeaed84d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/guid-aeaed84d.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



function sanitizeFileName(name, addGUID) {
    //TODO: add new param to spec file.
    const expression = /(?:\.([^.]+))?$/;
    const invalidTitleCharacters = /\.|-/g;
    let fileName = name.replace(/^.*(\\|\/|:)/, "");
    let extension = (fileName && expression.exec(fileName)[1] ? expression.exec(fileName)[1].toLowerCase() : "");
    let title = "";
    if (fileName.indexOf(".rft.") > -1) {
        const [name, suffix] = fileName.split(".rft.");
        extension = `rft.${suffix}`;
        title = name;
    }
    if (fileName && !title) {
        title = fileName.lastIndexOf(".") === -1 ? fileName : fileName.substring(0, fileName.lastIndexOf("."));
    }
    // Replace any invalid characters with an underscore
    title = title.replace(invalidTitleCharacters, "_");
    // Allow file upload of existing item's file name // currently used in append
    if (addGUID) {
        title = makeUniqueFileName(title);
        fileName = `${title}.${extension}`;
    }
    return { title, fileName, extension };
}
// Helper method that takes in a file & returns the cleaned up file name as is and in title form, and the detected file extension
function sanitizeFileInput(file, addGUID) {
    return sanitizeFileName(file.name, !!addGUID);
}
function makeUniqueFileName(name) {
    return `${name}_${(0,_guid_aeaed84d_js__WEBPACK_IMPORTED_MODULE_1__.g)()}`;
}
function validateOverwriteFileName(uploadedFileName, sourceFileName) {
    let fileName = uploadedFileName;
    const position = uploadedFileName.lastIndexOf("\\");
    if (position > -1) {
        fileName = fileName.substring(position + 1, fileName.length);
    }
    return fileName.replace(/\ /g, "_") === sourceFileName.replace(/\ /g, "_");
}
function getItemInfoByType(type) {
    if (_item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_0__.a[type]) {
        return _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_0__.a[type];
    }
    else {
        return _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_0__.a[Object.keys(_item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_0__.a).find((fileType) => _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_0__.a[fileType].type === type)];
    }
}
function formatFileSize(size) {
    if (!size) {
        return "0 B";
    }
    const i = Math.floor(Math.log(size) / Math.log(1024));
    const adjustedSize = Math.round(size / Math.pow(1024, i));
    const unit = ["B", "KB", "MB", "GB", "TB"][i];
    return `${adjustedSize} ${unit}`;
}



//# sourceMappingURL=file-bf8ab90f.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-5925c4b4.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-5925c4b4.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ fetchLayer),
/* harmony export */   f: () => (/* binding */ fetchFeatureServiceInfo),
/* harmony export */   s: () => (/* binding */ setMatched)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _url_35875a10_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./url-35875a10.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-35875a10.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




function parseSublayer(sublayer, layers, isTable) {
    var _a, _b;
    return {
        description: sublayer.description,
        fieldAliases: (_a = sublayer.fields) === null || _a === void 0 ? void 0 : _a.map((field) => field.alias),
        fields: sublayer.fields,
        geometryType: isTable ? "table" : sublayer.geometryType,
        id: sublayer.id,
        title: sublayer.name,
        type: sublayer.type,
        matched: (_b = layers === null || layers === void 0 ? void 0 : layers.find((layer) => layer.id === sublayer.id)) === null || _b === void 0 ? void 0 : _b.matched
    };
}
function serverRequest(url, isSecure) {
    const { config } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c;
    const hosted = (0,_url_35875a10_js__WEBPACK_IMPORTED_MODULE_2__.a)(url);
    const requestOptions = Object.assign(Object.assign({ useProxy: false, timeout: config.isMultiTenant === false ? 60000 : 5000, addSSL: hosted }, (isSecure ? {} : { addTokenManually: false })), { usePost: true, disableIdentityLookup: true });
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, {}, requestOptions, "post");
}
function getErrorCode(error) {
    var _a, _b;
    return (error === null || error === void 0 ? void 0 : error.code) || ((_b = (_a = error === null || error === void 0 ? void 0 : error.details) === null || _a === void 0 ? void 0 : _a.raw) === null || _b === void 0 ? void 0 : _b.code);
}
function serviceDoesNotExist(error) {
    const code = getErrorCode(error);
    return [404, 500].includes(code) || (error === null || error === void 0 ? void 0 : error.message) === "Invalid URL";
}
function shouldRetryWithToken(isSecure, error) {
    const code = getErrorCode(error);
    return !isSecure && ((code === 499 && (error === null || error === void 0 ? void 0 : error.message) === "Token Required") || code === 403) && !!_config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user;
}
async function fetchLayer(portal, id, url, isSecure) {
    const errorResult = { error: { code: "unhandledError" } };
    try {
        try {
            const result = await serverRequest(`${url}/${id}`, isSecure);
            return { result };
        }
        catch (error) {
            if (shouldRetryWithToken(isSecure, error)) {
                return fetchLayer(portal, id, url, true);
            }
            if (serviceDoesNotExist(error)) {
                errorResult.error.code = "serviceNotExist";
            }
            return errorResult;
        }
    }
    catch (error) {
        return errorResult;
    }
}
function filterLayers(layers, matchedLayers, data, isTable) {
    var _a, _b;
    const hasTables = data === null || data === void 0 ? void 0 : data.tables;
    const hasDefinedDataLayers = ((_a = data === null || data === void 0 ? void 0 : data.layers) === null || _a === void 0 ? void 0 : _a.length) > 0 || hasTables;
    const ids = [...((data === null || data === void 0 ? void 0 : data.layers) || []).map((layer) => layer.id), ...(_b = ((data === null || data === void 0 ? void 0 : data.tables) || [])) === null || _b === void 0 ? void 0 : _b.map((table) => table.id)];
    // if data has defined layers, only use layers in data, not the whole service (WebGIS/arcgis-portal-app#39768)
    // if data has defined layers, but no defined tables, allow all tables through (WebGIS/arcgis-portal-app#40067)
    const sublayers = (layers || [])
        .filter(({ id, type }) => !hasDefinedDataLayers || (type === "Table" && !hasTables) || ids.includes(id))
        .map((layer) => parseSublayer(layer, matchedLayers, isTable));
    return sublayers;
}
async function fetchLayers({ serviceInfo, item, layers, isSecure, data }) {
    var _a, _b;
    const { url } = item;
    if (!((_a = serviceInfo.layers) === null || _a === void 0 ? void 0 : _a.length) && !((_b = serviceInfo.tables) === null || _b === void 0 ? void 0 : _b.length) && (serviceInfo === null || serviceInfo === void 0 ? void 0 : serviceInfo.fields)) {
        return { result: [parseSublayer(serviceInfo, layers)] };
    }
    try {
        const { layers: sublayers, tables } = await serverRequest(`${url}/layers`, isSecure);
        return {
            result: [...filterLayers(sublayers, layers, data), ...filterLayers(tables, layers, data, true)].sort((a, b) => a.id - b.id)
        };
    }
    catch (error) {
        return { error: { code: "unhandledError" } };
    }
}
function setMatched(sublayers, matchedLayers) {
    return sublayers.map((sublayer) => {
        var _a;
        return Object.assign(Object.assign({}, sublayer), { matched: (_a = matchedLayers === null || matchedLayers === void 0 ? void 0 : matchedLayers.find((layer) => layer.id === sublayer.id)) === null || _a === void 0 ? void 0 : _a.matched });
    });
}
async function fetchFeatureServiceInfo({ item, portal, layers, isSecure, data, retry }) {
    var _a;
    const errorResult = { error: { code: "unhandledError" } };
    try {
        if (!data && !retry) {
            try {
                const token = (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.e)(portal);
                const tokenParam = token ? `&token=${token}` : "";
                const url = `${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}content/items/${item.id}/data?f=json${tokenParam}`;
                // Use fetch instead of request to stop redirects (WebGIS/arcgis-portal-app#40164)
                const response = await fetch(url);
                const text = await response.text();
                if (text) {
                    data = JSON.parse(text);
                }
                if (data === null || data === void 0 ? void 0 : data.error) {
                    // Treat this expired account as if the service doesn't exist (WebGIS/arcgis-portal-app#40163)
                    if (data.error.code === 403 && ((_a = data.error) === null || _a === void 0 ? void 0 : _a.messageCode) === "SB_0006") {
                        errorResult.error.code = "serviceNotExist";
                        return errorResult;
                    }
                }
            }
            catch (error) {
                // if we can't get item data, just move on
                data = null;
            }
        }
        if (item.type === "Feature Collection") {
            if (data === null || data === void 0 ? void 0 : data.layers) {
                return {
                    result: data.layers.map(({ layerDefinition }, id) => {
                        var _a;
                        return ({
                            description: "",
                            fields: layerDefinition.fields,
                            fieldAliases: (_a = layerDefinition.fields) === null || _a === void 0 ? void 0 : _a.map((field) => field.alias),
                            geometryType: layerDefinition.geometryType,
                            type: layerDefinition.type,
                            id,
                            matched: false,
                            title: layerDefinition.name
                        });
                    })
                };
            }
        }
        try {
            const { url } = item;
            const serviceInfo = await serverRequest(url, isSecure);
            return fetchLayers({
                serviceInfo,
                item,
                layers,
                isSecure,
                data
            });
        }
        catch (error) {
            if (shouldRetryWithToken(isSecure, error)) {
                return fetchFeatureServiceInfo({ item, portal, layers, data, isSecure: true });
            }
            if (serviceDoesNotExist(error)) {
                errorResult.error.code = "serviceNotExist";
            }
            return errorResult;
        }
    }
    catch (error) {
        return errorResult;
    }
}



//# sourceMappingURL=services-5925c4b4.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-7fa26472.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-7fa26472.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ onItemBrowserSortChange),
/* harmony export */   b: () => (/* binding */ onItemBrowserPreviewChange),
/* harmony export */   c: () => (/* binding */ onItemBrowserViewChange),
/* harmony export */   g: () => (/* binding */ getItemBrowserStore),
/* harmony export */   o: () => (/* binding */ onItemBrowserBucketChange)
/* harmony export */ });
/* harmony import */ var _store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./store-8b1b0846.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/store-8b1b0846.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


function getItemBrowserStore(el) {
    return (0,_store_8b1b0846_js__WEBPACK_IMPORTED_MODULE_0__.g)(el, "arcgis-item-browser");
}
const onItemBrowserViewChange = (store, callback) => {
    store.onChange("view", (newView) => {
        callback(newView);
    });
};
const onItemBrowserBucketChange = (store, callback) => {
    store.onChange("bucket", (newBucket) => {
        callback(newBucket);
    });
};
const onItemBrowserPreviewChange = (store, callback) => {
    store.onChange("preview", (preview) => {
        callback(preview);
    });
};
const onItemBrowserSortChange = (store, callback) => {
    store.onChange("sort", (sort) => {
        callback(sort);
    });
};



//# sourceMappingURL=store-7fa26472.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/type-to-icon-7546439f.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/type-to-icon-7546439f.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ featureLayerIconInfo),
/* harmony export */   e: () => (/* binding */ esriGeometryIcons),
/* harmony export */   f: () => (/* binding */ fieldTypeIcons)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const featureLayerIconInfo = {
    point: "point",
    line: "line",
    polygon: "polygon",
    multipatch: "cube",
    table: "table",
    multipoint: "layer-points"
};
const esriGeometryIcons = {
    esriGeometryPoint: "point",
    esriGeometryPolyline: "line",
    esriGeometryPolygon: "polygon",
    esriGeometryMultiPatch: "cube",
    esriGeometryMultipoint: "point",
    none: "table"
};
const fieldTypeIcons = {
    esriFieldTypeOID: "key",
    esriFieldTypeBoolean: "boolean",
    esriFieldTypeString: "string",
    esriFieldTypeSingle: "number",
    esriFieldTypeDouble: "number",
    esriFieldTypeInteger: "integer",
    esriFieldTypeSmallInteger: "integer",
    esriFieldTypeGlobalID: "key",
    esriFieldTypeDate: "date-time",
    esriFieldTypeBigInteger: "integer",
    esriFieldTypeDateOnly: "calendar",
    esriFieldTypeTimeOnly: "clock",
    esriFieldTypeTimestampOffset: "time-zone"
};



//# sourceMappingURL=type-to-icon-7546439f.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-aa26c49f.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-aa26c49f.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ getSublayerTypeInfo)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/** Get the correct geometry icon based on layer/table type and geometry type
 * will handles types used by the jsapi, the esri types used on the server,
 * and the types returned by the Search API
 */
function getSublayerTypeInfo({ geometry, type }) {
    switch (type) {
        case "Catalog Layer":
            return {
                icon: "catalog-dataset",
                type: "catalog",
                isGeometry: false
            };
        case "Parcel Layer":
            return {
                icon: "parcel-layer",
                type: "parcel",
                isGeometry: false
            };
        case "Oriented Imagery Layer":
            return {
                icon: "oriented-imagery-layer",
                type: "oriented imagery",
                isGeometry: false
            };
        case "Table":
            return {
                icon: "table",
                type: "table",
                isGeometry: true
            };
    }
    switch (geometry) {
        case "point":
        case "esriGeometryPoint":
            return {
                type: "point",
                icon: "point",
                isGeometry: true
            };
        case "esriGeometryMultipoint":
        case "multipoint":
            return {
                type: "multipoint",
                icon: "layer-points",
                isGeometry: true
            };
        case "line":
        case "polyline":
        case "esriGeometryPolyline":
            return {
                type: "line",
                icon: "line",
                isGeometry: true
            };
        case "polygon":
        case "esriGeometryPolygon":
            return {
                type: "polygon",
                icon: "polygon",
                isGeometry: true
            };
        case "multipatch":
        case "esriGeometryMultiPatch":
            return {
                type: "multipatch",
                icon: "cube",
                isGeometry: true
            };
        default:
            return {
                type: "table",
                icon: "table",
                isGeometry: true
            };
    }
}



//# sourceMappingURL=utils-aa26c49f.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,