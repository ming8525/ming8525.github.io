"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-c3d16a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-simple-matrix.entry.js":
/*!***********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-simple-matrix.entry.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rfx_simple_matrix: () => (/* binding */ RfxSimpleMatrix)
/* harmony export */ });
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
/* harmony import */ var _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interfaces-d0c68944.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/interfaces-d0c68944.js");
/* harmony import */ var _arcgis_core_identity_IdentityManager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @arcgis/core/identity/IdentityManager.js */ "@arcgis/core/identity/IdentityManager.js");
/* harmony import */ var _arcgis_core_core_urlUtils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @arcgis/core/core/urlUtils.js */ "@arcgis/core/core/urlUtils.js");
/* harmony import */ var _arcgis_core_layers_Layer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @arcgis/core/layers/Layer.js */ "@arcgis/core/layers/Layer.js");
/* harmony import */ var _arcgis_core_layers_ImageryLayer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @arcgis/core/layers/ImageryLayer.js */ "@arcgis/core/layers/ImageryLayer.js");
/* harmony import */ var _arcgis_core_smartMapping_raster_renderers_stretch_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @arcgis/core/smartMapping/raster/renderers/stretch.js */ "@arcgis/core/smartMapping/raster/renderers/stretch.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");
/* harmony import */ var _sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./sanitize-number-d84114f7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/sanitize-number-d84114f7.js");
/* harmony import */ var _multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./multidimensional-helper-fc8fbe0e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/multidimensional-helper-fc8fbe0e.js");
/* harmony import */ var _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./_getTag-96af029d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_getTag-96af029d.js");
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./_Uint8Array-68e1e3f9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_Uint8Array-68e1e3f9.js");






















/**
 * Creates a matrix schema for the grid layout.
 * @param {number} columns - The number of columns in the matrix.
 * @param {GridColumnType} dataType - The data type of the matrix cells.
 * @returns {Object} The matrix schema for the grid layout.
 */
const createMatrixSchema = ({ columns, dataType, style }) => {
    const gridLayout = {};
    for (let i = 1; i <= columns; i++) {
        gridLayout[i.toString()] = {
            label: i.toString(),
            uiType: dataType,
            style
        };
    }
    return gridLayout;
};
/**
 * Private function
 * Creates an array with specified size and default value.
 * @param {number} size - The size of the array.
 * @param {number} defaultValue - The default value for the array elements.
 * @returns {number[]} The created array.
 */
function createArrayOfSize(size, defaultValue) {
    return Array.from({ length: size }, () => defaultValue);
}
/**
 * Private function
 * Generates an updated value array based on the specified rows and columns.
 * @param {number} rows - The number of rows.
 * @param {number} columns - The number of columns.
 * @param {any[]} value - The existing value array.
 * @returns {any[]} The updated value array.
 */
function generateUpdatedValue(rows, columns, value) {
    const gridSize = rows * columns;
    if (!value) {
        return createArrayOfSize(gridSize, 0);
    }
    if (value.length < gridSize) {
        const additionalCount = Math.abs(gridSize - value.length);
        const addOn = createArrayOfSize(additionalCount, 0);
        return value.concat(addOn);
    }
    if (value.length > gridSize) {
        const additionalCount = Math.abs(gridSize - value.length);
        const toPreserve = value.length - additionalCount;
        return value.slice(0, toPreserve);
    }
    // case value.length === gridSize
    return value;
}
/**
 * Creates a matrix object from an array of values.
 * @param {number} rows - The number of rows.
 * @param {number} columns - The number of columns.
 * @param {any[]} value - The array of value.
 * @returns {object[]} The array of matrix objects.
 */
const createMatrixDataObject = ({ columns, rows, value }) => {
    const matrix = [];
    const updatedValue = generateUpdatedValue(rows, columns, value);
    let idCounter = 0;
    while (updatedValue.length > 0) {
        const groupedValues = updatedValue.splice(0, columns);
        const dataObject = {
            id: idCounter
        };
        idCounter += 1;
        groupedValues.forEach((val, index) => {
            dataObject[index + 1] = val;
        });
        matrix.push(dataObject);
    }
    return matrix;
};
/**
 * Parses matrix data and flattens the values of each key (excluding "id") into a single array.
 * @param {Object[]} data - The array of objects containing matrix data.
 * @returns {any[]} The flattened array of values from the matrix data.
 */
const parseMatrixData = (data) => {
    const result = [];
    data.forEach((obj) => {
        Object.keys(obj).forEach((key) => {
            if (key !== "id") {
                result.push((0,_sanitize_number_d84114f7_js__WEBPACK_IMPORTED_MODULE_16__.p)(obj[key].toString()));
            }
        });
    });
    return result;
};

const component = "rfx-simple-matrix";
const HTMLClasses = {
    gridContainer: `${component}__grid-container`,
    gridColumn: `${component}__grid-column`
};

const rfxSimpleMatrixCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.rfx-simple-matrix__grid-container{display:flex;flex-direction:column;width:100%;max-width:100%;overflow:auto;max-height:var(--rfx-widget-content-height)}.rfx-simple-matrix__grid-column{min-width:3rem}";

const RfxSimpleMatrix = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        this.updateGridValue = (event) => {
            const { detail: { gridOptions } } = event;
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_2__.i)(gridOptions)) {
                return;
            }
            this.gridSchema = {
                ...this.gridSchema,
                gridOptions
            };
            this.setWidgetValue();
        };
        this.gridSchema = {
            gridLayout: {},
            gridOptions: [],
            hasBorder: true,
            hasHeader: true,
            canAdd: false,
            hasIdColumn: false,
            canRemove: false,
            isStacked: false
        };
        this.columns = undefined;
        this.rows = undefined;
        this.value = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    componentWillRender() {
        this.initGrid();
        this.setWidgetValue();
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    initGrid() {
        const gridLayout = createMatrixSchema({
            columns: this.columns,
            dataType: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_3__.G.number,
            style: HTMLClasses.gridColumn
        });
        // set when data is persisted & whenever factor function type is changed
        const gridOptions = createMatrixDataObject({
            columns: this.columns,
            rows: this.rows,
            value: (0,_multidimensional_helper_fc8fbe0e_js__WEBPACK_IMPORTED_MODULE_17__.c)(this.value)
        });
        this.gridSchema = {
            ...this.gridSchema,
            gridLayout,
            gridOptions
        };
    }
    setWidgetValue() {
        const matrixData = parseMatrixData(this.gridSchema?.gridOptions);
        this.value = matrixData;
        this.rfxArgumentChange.emit({ value: this.value });
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-grid", { ref: (e) => {
                this.widgetContainer = e;
            }, class: HTMLClasses.gridContainer, hasHeader: this.gridSchema.hasHeader, canAdd: this.gridSchema.canAdd, hasIdColumn: this.gridSchema.hasIdColumn, gridLayout: this.gridSchema.gridLayout, gridOptions: this.gridSchema.gridOptions, hasBorder: this.gridSchema.hasBorder, canRemove: this.gridSchema.canRemove, isStacked: this.gridSchema.isStacked, onRfxGridOptionChange: this.updateGridValue }));
    }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RfxSimpleMatrix.style = rfxSimpleMatrixCss;



//# sourceMappingURL=rfx-simple-matrix.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/sanitize-number-d84114f7.js":
/*!************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/sanitize-number-d84114f7.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ formatNumberToLocale),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   i: () => (/* binding */ isValidNumber),
/* harmony export */   p: () => (/* binding */ parseNumber),
/* harmony export */   s: () => (/* binding */ sanitizeNumber)
/* harmony export */ });
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");



/**
 * Indicates if a provided number value is valid.
 * An invalid value is: undefined | NaN | Infinite | -Infinite | null
 * See for more details:
 *   - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite
 *   - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
 * @param {number | undefined | null} value value to check
 * @returns {boolean} if valid or not
 */
function isValidNumber(value) {
    return value !== undefined && value !== null && Number.isNaN(value) === false && Number.isFinite(value) === true;
}
/**
 * Returns a string representation of the provided number for use with calcite-input. It also
 * guards against invalid types following this logic:
 *   - If the value is valid (not NaN, finite), the value is returned as a string
 *   - If not and if a valid default value is provided, the default value is returned as a string
 *   - If not, an empty string is returned
 * @param value
 * @param defaultValue
 * @returns a sanitized string
 */
function sanitizeNumber(value, defaultValue) {
    let returnedValue;
    if (value !== null) {
        const testedValue = typeof value === "string" ? Number.parseFloat(value) : value;
        if (isValidNumber(testedValue))
            returnedValue = testedValue;
        else if (isValidNumber(defaultValue))
            returnedValue = defaultValue;
    }
    return returnedValue === undefined ? "" : `${returnedValue}`;
}
/**
 * Parses a value string to a number for use with calcite-input. If the string is empty, it will return undefined.
 * If the string is otherwise invalid, it will return NaN.
 * @param value calcite-input value
 * @returns {number | undefined} the parsed number
 */
function parseNumber(value) {
    if (value === "")
        return undefined;
    return Number.parseFloat(value);
}
/**
 * Formats a number to a specified number of decimal places.
 *
 * @param {number} value - The number to format.
 * @param {number} [fractionDigits=3] - The number of decimal places to include in the formatted number. Defaults to 3.
 * @returns {number|undefined} - The formatted number, or undefined if the input value is empty.
 */
function formatNumber(value, fractionDigits = 3) {
    if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_1__.i)(value))
        return undefined;
    return Number.parseFloat(value.toFixed(fractionDigits));
}
/**
 * Formats a number or string representing a number according to the locale, passing Intl number format options
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/ReferenceGlobal_Objects/Intl/NumberFormat/NumberFormat#options
 * @param {number | string | undefined} value to be formatted and localized
 * @param {Intl.NumberFormatOptions} formatOptions options object matching Intl.NumberFormat
 * @returns {string} localized / rounded string
 */
function formatNumberToLocale(value, formatOptions) {
    let formattedValue = "";
    if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_1__.i)(value) && !Number.isNaN(value)) {
        const localeCode = (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_0__.g)().locale;
        formattedValue = Intl.NumberFormat(localeCode, formatOptions).format(Number(value));
    }
    return formattedValue;
}



//# sourceMappingURL=sanitize-number-d84114f7.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,