"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-6bf2b8"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/portal-d50d8334.js":
/*!***************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/portal-d50d8334.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getRenderingServiceValidateUrl),
/* harmony export */   b: () => (/* binding */ getRenderingImageServiceUrl),
/* harmony export */   g: () => (/* binding */ getBaseUrl)
/* harmony export */ });
/**
 * Returns a base url to pass to the item browser
 * Taken from https://devtopia.esri.com/WebGIS/arcgis-webviewer-app/blob/master/src/utils/urlUtils.ts#L106
 * @param {__esri.Portal} portal portal instance
 * @returns {string} formatted baseUrl
 */
function getBaseUrl(portal) {
    const { customBaseUrl, portalHostname, urlKey } = portal;
    const { protocol } = window.location;
    const url = urlKey !== undefined ? `${urlKey}.${customBaseUrl}` : portalHostname;
    return `${protocol}//${url}`;
}
/**
 * To get the rendering service base url based on agol/enterprise
 * @param portal
 * @returns
 */
function getRenderingServiceBaseUrl(portal) {
    const { helperServices: { rasterAnalytics: { url: GPServer } }, isPortal } = portal;
    return isPortal ? GPServer : GPServer.replace("rasteranalysis", "rasterutils");
}
/**
 * function to get rendering service validate url
 * @param {Portal} portal portal instance
 * @returns {string} url string
 */
function getRenderingServiceValidateUrl(portal) {
    return getRenderingServiceBaseUrl(portal).replace("RasterAnalysisTools/GPServer", "RasterRendering/ImageServer/validate");
}
/**
 * function to get rendering service image service url
 * @param {Portal} portal portal instance
 * @returns {string} url string
 */
function getRenderingImageServiceUrl(portal) {
    return getRenderingServiceBaseUrl(portal).replace("RasterAnalysisTools/GPServer", "RasterRendering/ImageServer");
}



//# sourceMappingURL=portal-d50d8334.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-preview.entry.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-preview.entry.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rfx_preview: () => (/* binding */ RFxPreview)
/* harmony export */ });
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
/* harmony import */ var _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui-utils-928a4096.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js");
/* harmony import */ var _help_text_34a29835_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./help-text-34a29835.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-text-34a29835.js");
/* harmony import */ var _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./interfaces-d0c68944.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/interfaces-d0c68944.js");
/* harmony import */ var _layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./layer-helper-3867eef7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/layer-helper-3867eef7.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");
/* harmony import */ var _common_fda1462e_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./common-fda1462e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-fda1462e.js");
/* harmony import */ var _portal_d50d8334_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./portal-d50d8334.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/portal-d50d8334.js");
/* harmony import */ var _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./_getTag-96af029d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_getTag-96af029d.js");
/* harmony import */ var _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./resources-27c66f5c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/resources-27c66f5c.js");
/* harmony import */ var _functions_f1f2dffd_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./functions-f1f2dffd.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/functions-f1f2dffd.js");
/* harmony import */ var _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./rfx-args-helper-ab401543.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-args-helper-ab401543.js");
/* harmony import */ var _arcgis_core_identity_IdentityManager_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @arcgis/core/identity/IdentityManager.js */ "@arcgis/core/identity/IdentityManager.js");
/* harmony import */ var _arcgis_core_core_urlUtils_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @arcgis/core/core/urlUtils.js */ "@arcgis/core/core/urlUtils.js");
/* harmony import */ var _arcgis_core_layers_Layer_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @arcgis/core/layers/Layer.js */ "@arcgis/core/layers/Layer.js");
/* harmony import */ var _arcgis_core_layers_ImageryLayer_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @arcgis/core/layers/ImageryLayer.js */ "@arcgis/core/layers/ImageryLayer.js");
/* harmony import */ var _arcgis_core_smartMapping_raster_renderers_stretch_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @arcgis/core/smartMapping/raster/renderers/stretch.js */ "@arcgis/core/smartMapping/raster/renderers/stretch.js");
/* harmony import */ var _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./_Uint8Array-68e1e3f9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_Uint8Array-68e1e3f9.js");




























const HTMLClasses = {
    actionButtonCotainer: "action-button-container",
    actionButton: "action-button",
    previewList: "preview-list",
    helpAction: "help-action"
};

const rfxPreviewCss = ":root{--calcite-color-brand:#007ac2;--calcite-color-brand-hover:#00619b;--calcite-color-brand-press:#004874;--calcite-color-status-info:#00619b;--calcite-color-status-success:#35ac46;--calcite-color-status-warning:#edd317;--calcite-color-status-danger:#d83020;--calcite-color-status-danger-hover:#a82b1e;--calcite-color-status-danger-press:#7c1d13;--calcite-color-background:#f8f8f8;--calcite-color-foreground-1:#ffffff;--calcite-color-foreground-2:#f3f3f3;--calcite-color-foreground-3:#eaeaea;--calcite-color-text-1:#151515;--calcite-color-text-2:#4a4a4a;--calcite-color-text-3:#6a6a6a;--calcite-color-text-inverse:#ffffff;--calcite-color-text-link:#00619b;--calcite-color-border-1:#cacaca;--calcite-color-border-2:#d4d4d4;--calcite-color-border-3:#dfdfdf;--calcite-color-border-input:#949494;--rfx-quarter-spacing:0.25rem;--rfx-half-spacing:0.5rem;--rfx-three-quarter-spacing:0.75rem;--rfx-full-spacing:1rem;--rfx-component-default-width:100%;--rfx-ui-border-input:var(--calcite-color-border-2);--rfx-popover-content-min-height:30vh;--rfx-popover-content-max-height:60vh;--rfx-popover-content-height:45vh;--rfx-widget-content-height:30vh}.action-button-container{display:flex;justify-content:space-between}.action-button{width:48%}.preview-list{padding:var(--rfx-full-spacing) 0 var(--rfx-full-spacing) 0}.help-action{-webkit-margin-start:auto;margin-inline-start:auto}";

const RFxPreview = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxPreviewSelection = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxPreviewSelection", 7);
        this.previewHelpClick = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "previewHelpClick", 7);
        /**
         * Controls opening the preview details block on load
         * @category Private
         */
        this.openBlockInitially = true;
        this.maxPreviewLayers = 5;
        this.previewIndexCounter = 1;
        /**
         * handles the create preview layer workflow
         */
        this.createPreviewLayer = async () => {
            await this.addToPreviewLayerList();
            this.loadPreviewLayer();
        };
        /**
         * Creates and show preview if the if switch is checked. Remove preview if its unchecked
         * @param event Preview switch event
         */
        this.handlePreviewSwitchChange = (event) => {
            const element = event.target;
            const checked = element.checked;
            this.showPreviewBlock = checked;
            if (this.showPreviewBlock === false) {
                this.hidePreviewLayers();
            }
            else {
                if (this.previewLayers.length === 0) {
                    //if no layers are there, add a layer by default
                    this.createPreviewLayer();
                }
                else {
                    this.rfxPreviewSelection.emit(this.getSelectedPreviewListItem().data);
                    this.loadPreviewLayer();
                }
            }
        };
        /**
         * Update the selected preview layer with current params from the editor app
         */
        this.updatePreviewLayer = async () => {
            const updatedData = await this.getTemplate();
            this.previewLayers.forEach((layer) => {
                if (layer.index === this.selectedPreviewLayerIndex) {
                    layer.data = updatedData;
                }
            });
            this.loadPreviewLayer();
        };
        /**
         * Show preview for the selected preview layer and load editor with the arg values with which the preview was created
         * @param event Event emitted when a preview layer is selected from the list
         */
        this.onPreviewSelect = (event) => {
            this.hidePreviewLayers();
            this.selectedPreviewLayerIndex = event.target?.value;
            this.rfxPreviewSelection.emit(this.getSelectedPreviewListItem().data);
            this.getSelectedPreviewListItem().layer.visible = true;
        };
        /**
         * Removes the item from the list and also remove the preview from the map
         * @param event Event emitted when the preview item is closed
         */
        this.onPreviewClose = (event) => {
            const closedPreviewIndex = event.target?.value;
            this.removePreviewLayerFromMap(this.previewLayers.find((prevLayer) => prevLayer.index === closedPreviewIndex).layer);
            this.previewLayers = this.previewLayers.filter((layer) => layer.index !== closedPreviewIndex);
            if (this.previewLayers.length === 0) {
                this.showPreviewBlock = false;
            }
        };
        /**
         * Render the error icon when the preview fail to load
         */
        this.renderPreviewError = (index) => {
            return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content-end" }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { id: `preview-layer-load-error-${index}`, iconStart: "exclamation-mark-triangle", appearance: "transparent", kind: "neutral", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { label: "preview failed to load", "reference-element": `preview-layer-load-error-${index}` }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, this.strings.previewError))));
        };
        /**
         * Render the preview layer list
         */
        this.renderPreviewLayers = () => {
            return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { class: HTMLClasses.previewList, loading: this.previewLayerLoading, selectionAppearance: "border", selectionMode: "single", dir: this.direction }, this.previewLayers.map((previewLayer) => {
                return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { key: `preview-layer-item${previewLayer.index}`, id: `preview-layer-item${previewLayer.index}`, dir: this.direction, label: previewLayer.label, value: previewLayer.index, selected: previewLayer.index === this.selectedPreviewLayerIndex, closable: true, onCalciteListItemSelect: this.onPreviewSelect, onCalciteListItemClose: this.onPreviewClose }, previewLayer.status === _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_6__.P.error &&
                    this.renderPreviewError(previewLayer.index)));
            })));
        };
        /**
         * render the switch button to enable and disable preview
         */
        this.renderPreviewSwitch = () => {
            return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { dir: this.direction, layout: "inline", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, ref: (el) => {
                    this.showPreviewElement = el;
                } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", {
                // scale={UIDefaults.Scale}
                checked: this.showPreviewBlock, onCalciteSwitchChange: this.handlePreviewSwitchChange, dir: this.direction, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale
            }), this.strings.showPreview, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { class: HTMLClasses.helpAction, text: "show help", icon: "information", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, onClick: (e) => {
                    e.stopPropagation();
                    const helpText = (0,_help_text_34a29835_js__WEBPACK_IMPORTED_MODULE_5__.d)(this.strings.previewPopup);
                    this.previewHelpClick.emit({
                        referenceElement: this.showPreviewElement,
                        helpSrcdoc: helpText,
                        heading: this.strings.showPreview
                    });
                } })));
        };
        this.previewLayers = [];
        this.showPreviewBlock = false;
        this.previewLayerLoading = false;
        this.mapView = undefined;
        this.getTemplate = undefined;
        this.portal = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        ({ strings: this.strings, dir: this.direction } = await (0,_localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_1__.b)(this.hostElement, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.g)(".")));
    }
    disconnectedCallback() {
        this.removePreviewLayerFromMap(this.getSelectedPreviewListItem()?.layer);
    }
    /**
     * Add to the list to preview layers
     */
    async addToPreviewLayerList() {
        const rfxTemplate = await this.getTemplate();
        const { previewIndexCounter: currentIndex } = this;
        this.previewLayers.push({
            index: currentIndex,
            label: (0,_common_fda1462e_js__WEBPACK_IMPORTED_MODULE_15__.f)(this.strings.previewLayer, { number: currentIndex.toString() }),
            data: rfxTemplate,
            status: _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_6__.P.loading
        });
        this.selectedPreviewLayerIndex = currentIndex;
        this.previewIndexCounter++;
    }
    /**
     * Validate RFT using rendering service
     * @param {rfxTemplate} template which should be validated
     * @returns {boolean} boolean value if the template is valid or not
     */
    validateRFT(rfxTemplate) {
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(rfxTemplate)) {
            return;
        }
        const rasterRenderingService = (0,_portal_d50d8334_js__WEBPACK_IMPORTED_MODULE_16__.a)(this.portal);
        const query = {
            renderingRule: JSON.stringify(rfxTemplate),
            f: "json"
        };
        return (0,_common_fda1462e_js__WEBPACK_IMPORTED_MODULE_15__.r)(rasterRenderingService, { query }).then((response) => {
            return response?.data?.renderingRule?.isValid;
        }, (validateFail) => {
            console.log("validate request failed", validateFail);
        });
    }
    /**
     * To remove preview layer from the map
     */
    removePreviewLayerFromMap(previewLayer) {
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(previewLayer)) {
            return;
        }
        previewLayer.opacity = 0;
        this.mapView.map.remove(previewLayer);
    }
    /**
     * To add preview layer to the map using raster rendering service
     * whose raster value is rfxTemplate in base64 format
     * @param rfxTemplate template with which the rendering service should be created
     */
    addPreviewLayerToMap(rfxTemplate) {
        const selectedPreview = this.getSelectedPreviewListItem();
        const layer = (0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_7__.o)((0,_portal_d50d8334_js__WEBPACK_IMPORTED_MODULE_16__.b)(this.portal), rfxTemplate);
        //TODO: need to check 3x why and how this is working
        // if (
        //   rfxTemplate.function?.type === "LocalFunction" &&
        //   binFunctions.indexOf(rfxTemplate.function.name) > -1
        // ) {
        //   const result = await createStrecthRenderer(layer);
        //   layer.renderer = result.renderer;
        // }
        layer
            .load()
            .catch(() => (selectedPreview.status = _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_6__.P.error))
            .then(() => {
            selectedPreview.layer = layer;
            this.mapView.map.add(layer);
            this.mapView.whenLayerView(layer).then((layerView) => {
                layerView.watch("updating", (status) => {
                    this.previewLayerLoading = status;
                });
            });
        });
    }
    /**
     * Hide all the preview layers in the map
     */
    hidePreviewLayers() {
        this.previewLayers.forEach((previewLayer) => {
            if (!(0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(previewLayer.layer)) {
                previewLayer.layer.visible = false;
            }
        });
    }
    /**
     * Load the selectedPreview layer or otherwise the last one in the list
     */
    async loadPreviewLayer() {
        this.previewLayerLoading = true;
        this.hidePreviewLayers();
        const selectedPreviewLayer = this.getSelectedPreviewListItem();
        const rfxTemplate = selectedPreviewLayer.data;
        selectedPreviewLayer.isValid = await this.validateRFT(rfxTemplate);
        if (selectedPreviewLayer.isValid) {
            selectedPreviewLayer.status = _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_6__.P.success;
            this.addPreviewLayerToMap(rfxTemplate);
        }
        else {
            selectedPreviewLayer.status = _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_6__.P.error;
            this.previewLayerLoading = false;
        }
    }
    /**
     * Gives the selected previewlist item
     * @returns <PreviewList>
     */
    getSelectedPreviewListItem() {
        if (this.selectedPreviewLayerIndex === undefined) {
            return this.previewLayers[0];
        }
        return this.previewLayers.find((previewLayer) => previewLayer.index === this.selectedPreviewLayerIndex);
    }
    /**
     * Render the action buttons update and new preview
     */
    renderActions() {
        const disableCreatePreview = this.previewLayers.length === this.maxPreviewLayers;
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: HTMLClasses.actionButtonCotainer }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { id: "preview-update-button", class: HTMLClasses.actionButton, kind: "neutral", appearance: "outline-fill", iconStart: "refresh", onClick: this.updatePreviewLayer, dir: this.direction, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale, disabled: this.previewLayerLoading }, this.strings.update), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { label: "", placement: "bottom-start", "reference-element": "preview-update-button" }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, this.strings.updatePopover)), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { id: "preview-create-button", class: HTMLClasses.actionButton, kind: "neutral", appearance: "outline-fill", iconStart: "plus", dir: this.direction, onClick: this.createPreviewLayer, disabled: disableCreatePreview || this.previewLayerLoading, scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_4__.U.Scale }, this.strings.newPreview), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tooltip", { label: "", placement: "bottom-start", "reference-element": "preview-create-button" }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, disableCreatePreview
            ? (0,_common_fda1462e_js__WEBPACK_IMPORTED_MODULE_15__.f)(this.strings.maxPreview, {
                maxCount: this.maxPreviewLayers.toString()
            })
            : this.strings.createPopover))));
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, heading: this.strings.header, description: this.strings.description, open: this.openBlockInitially, dir: this.direction }, this.renderPreviewSwitch(), this.showPreviewBlock && this.renderPreviewLayers(), this.showPreviewBlock && this.renderActions()));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};
RFxPreview.style = rfxPreviewCss;



//# sourceMappingURL=rfx-preview.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CalciteScale),
/* harmony export */   U: () => (/* binding */ UIDefaults),
/* harmony export */   a: () => (/* binding */ CalciteOverlayPositioning)
/* harmony export */ });
const UIDefaults = {
    Scale: "s",
    PopoverTimer: 60
};
const CalciteScale = {
    s: "s",
    m: "m"
};
const CalciteOverlayPositioning = {
    absolute: "absolute",
    fixed: "fixed"
};



//# sourceMappingURL=ui-utils-928a4096.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,