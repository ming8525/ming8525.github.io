"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_ba-infographic_node_modules_arcgis_business-analyst-components_dis-56832c"],{

/***/ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgis-report-list.entry.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgis-report-list.entry.js ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_report_list: () => (/* binding */ ArcgisReportList)
/* harmony export */ });
/* harmony import */ var _index_4e647411_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-4e647411.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/index-4e647411.js");
/* harmony import */ var _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ElementIds-f7d257e8.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/ElementIds-f7d257e8.js");
/* harmony import */ var _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GEClient-1a83a657.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/GEClient-1a83a657.js");
/* harmony import */ var _arcgisReports_a1dc26aa_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./arcgisReports-a1dc26aa.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgisReports-a1dc26aa.js");





const arcgisReportListCss = ":host{display:block}calcite-tree-item{font-size:14.5pt;color:#333;font-family:Arial, Helvetica, sans-serif}.notReadyOuter{position:absolute;top:0;left:0;width:100%;height:100%}.notReadyDiv{position:absolute;top:calc(50% - 50px);left:calc(50% - 50px);width:100px;height:100px}.notReadySvg{position:absolute;top:calc(50% - 29px);left:calc(50% - 33px)}.arcgisReportsTreeItem{background-color:white;color:#585859;font-size:13pt;min-height:33px;border-bottom:solid 1px lightgray}.arcgisReportsTreeItemIcon{margin-top:-3px;margin-right:6px}calcite-tree-item[aria-selected=\"true\"]{background-color:#f6f6f6 !important}calcite-tab-title[aria-expanded=\"true\"]{background-color:#4991df;color:whitesmoke;font-size:11.5pt;margin:4px 0 1px 4px;min-width:calc(50% - 17px);border:solid 1px #4991df;border-top-left-radius:4px;border-bottom-left-radius:4px}calcite-tab-title[aria-expanded=\"false\"]{background-color:white;color:#4590e1;font-size:11.5pt;margin:4px 4px 1px 0;min-width:calc(50% - 17px);border:solid 1px #4991df;border-top-right-radius:4px;border-bottom-right-radius:4px}.arcgisReportsTreeDiv{width:100%;max-height:500px;overflow:scroll}.ba-dark{background-color:#2b2b2b !important;color:#fefefe !important}.ba-dark-item{background-color:#464646 !important;color:#fefefe !important}.ba-dark-item-selected{background-color:#363636 !important;color:#fefefe !important}";

const ArcgisReportList = class {
  constructor(hostRef) {
    (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.reportSelected = (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "reportSelected", 7);
    this.reportChecked = (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "reportChecked", 7);
    this.accordionInit = (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "accordionInit", 7);
    this._idPrefix = 'arcgis-report-list-';
    this._containerPrefix = 'arl-container-';
    this._accordionPrefix = 'acc-';
    this._itemPrefix = 'arl-item-';
    this._groupPrefix = 'arl-group-';
    this._hasSetEnv = false;
    this._accList = ['MyInfographics', 'EsriInfographics', 'SharedInfographics', 'GalleryInfographics'];
    this._dbg = false;
    this.stSourceCountry = 'US';
    this._isInitialized = false;
    this.stMultipleChoice = false;
    this.stShowCheckboxes = true;
    this.stShowDefault = false;
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.A._verbose = true;
    this._groupId = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.E.generateId(this._groupPrefix).id;
    this.langCode = 'en-us';
    this.sourceCountry = 'US';
    this.stMultipleChoice = false;
    this.stShowCheckboxes = true;
    this.stReportList = {};
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.B._initialize(this.langCode);
    this._instanceId = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.E.generateId(this._idPrefix).id;
    this._infographics = {
      MyInfographics: {
        dataId: 2,
        tag: 'report-my-infographics',
        data: undefined,
        accordionId: _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.E.generateId(this._instanceId + this._accordionPrefix).id
      },
      EsriInfographics: {
        dataId: 3,
        tag: 'report-esri-infographics',
        data: undefined,
        accordionId: _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.E.generateId(this._instanceId + this._accordionPrefix).id
      },
      SharedInfographics: {
        dataId: 4,
        tag: 'report-shared-infographics',
        data: undefined,
        accordionId: _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.E.generateId(this._instanceId + this._accordionPrefix).id
      },
      GalleryInfographics: {
        dataId: 5,
        tag: 'report-gallery-infographics',
        data: undefined,
        accordionId: _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.E.generateId(this._instanceId + this._accordionPrefix).id
      }
    };
    this._onChangeQueue = {};
  }
  queryElementById(id) {
    const elem = (!this.el || !this.el.shadowRoot) ? null
      : this.el.shadowRoot.querySelector(_ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.A.fixId(id));
    return elem;
  }
  // ---------------------------------------------------------------------------------------------------
  // watches
  onEnvChanged() {
    this.stEnv = this.env;
    _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__.E.setEnvironment(this.env);
  }
  onLangCodeChanged() {
    this.stLangCode = this.langCode;
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.B._initialize(this.stLangCode);
  }
  onSourceCountryChanged() {
    this.stSourceCountry = this.sourceCountry;
  }
  onColorsChanged() {
    this.stColors = JSON.parse(this.colors);
  }
  onDefaultReportChanged() {
    this.stDefaultReportId = this.defaultReportId;
  }
  onSelectedReportChanged() {
    this.stSelectedReportId = this.selectedReportId;
  }
  onshowCheckboxesChanged() {
    this.stShowCheckboxes = this.showCheckboxes;
  }
  onshowDefaultChanged() {
    // this.stShowDefault = this.showDefault == 'true'
  }
  onreportListChanged() {
    // reportList comes in as {
    //   public: [ {id, title, date, isChecked }, ...]},
    //   shared: [...]
    //   user: [...]
    // }
    this.stReportList = Object.keys(this.reportList).length ? JSON.parse(this.reportList) : {};
    this.initializeTemplatesList();
  }
  async setColors(colors) {
    this.stColors = colors;
  }
  async initialize(username, token, country, language, showCheckboxes, reportList, showDefault) {
    const self = this;
    self.token = token;
    self.username = username;
    self.sourceCountry = country;
    self.langCode = language;
    self.stShowCheckboxes = !showCheckboxes ? false : true;
    self.stReportList = Object.keys(reportList).length ? JSON.parse(reportList) : {};
    if (showDefault) {
      this._tmpIgnoreDefault = true;
    }
    // self.stShowDefault = !showDefault ? false : true
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.a.Log('ArcgisBaReports initialize -flags=', self.stShowCheckboxes, self.stShowDefault);
    (0,_arcgisReports_a1dc26aa_js__WEBPACK_IMPORTED_MODULE_3__.s)(username, token); // set the ba-reports token
    // Set if GeoenrichmentUrl was optionally passed in
    if (self.geoenrichmentUrl) {
      _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__.E.setGeoenrichmentUrl(self.geoenrichmentUrl);
    }
    // Set if PortalUrl was optionally passed in
    if (self.portalUrl) {
      _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__.E.setPortalUrl(self.portalUrl);
    }
    try {
      // Fetch infographic templates from server
      let infos = await (0,_arcgisReports_a1dc26aa_js__WEBPACK_IMPORTED_MODULE_3__.g)(country, false);
      if (infos) {
        self.initializeTemplatesList(infos);
      }
      else {
        self._infographics.MyInfographics.data = undefined;
        self._infographics.EsriInfographics.data = undefined;
        self._infographics.SharedInfographics.data = undefined;
        self._infographics.GalleryInfographics.data = undefined;
      }
      this._isInitialized = true;
    }
    catch (ex) {
      _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.a.Error('arcgis-report-list request for esri reports failed', ex);
    }
  }
  // Merges the previous template list checked states into a new list.
  // If all items in list1 are checked, the new items will be checked,
  // otherwise the new items will remain unchecked.  The result is an
  // updated list2
  //    list1 = previous report list
  //    list2 = new report list just fetched from server
  //
  mergeChecked(list1, list2) {
    if (!list1)
      return list2;
    if (!list2)
      return list1;
    let allChecked = true, ii, idx1 = {}, idx2 = {};
    // build list2 index
    for (ii = 0; ii < list2.length; ii++) {
      idx2[list2[ii].id] = list2[ii];
    }
    // create list1 index and update idx2 checked states from list1
    for (ii = 0; ii < list1.length; ii++) {
      if (!list1.isChecked) {
        allChecked = false;
      }
      const lid = list1[ii].id;
      idx1[lid] = true; // id exists in idx1
      // if list1 item exists in list2 - we are removing any
      // list1 items that are not in the new fetched list
      if (idx2[lid]) {
        // keep prev isChecked state
        idx2[lid].isChecked = list1[ii].isChecked;
      }
    }
    // idx2 is now updated with all the list1 checked states.
    // Next, update the checked status of new items only if all
    // the list1 items were checked (category was checked)
    if (allChecked) {
      for (ii = 0; ii < list2.length; ii++) {
        const lid = list2[ii].id;
        // if the item is new to list1
        if (!idx1[lid]) {
          list2[ii].isChecked = true;
        }
      }
    }
    return list2;
  }
  initializeTemplatesList(infos) {
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.a.Log('REPORT LIST: init list', infos, this.stReportList);
    let userReports, publicReports, sharedReports, galleryReports;
    if (Object.keys(this.stReportList).length) {
      userReports = this.mergeChecked(this.stReportList.user, infos?.user);
      publicReports = this.mergeChecked(this.stReportList.public, infos?.public);
      sharedReports = this.mergeChecked(this.stReportList.shared, infos?.shared);
      galleryReports = this.mergeChecked(this.stReportList.gallery, infos?.gallery);
    }
    else if (infos) {
      // default list and checked states
      userReports = infos.user.map(report => { return { ...report, isChecked: false }; });
      publicReports = infos.public.map(report => { return { ...report, isChecked: true }; });
      sharedReports = infos.shared.map(report => { return { ...report, isChecked: false }; });
      galleryReports = infos.gallery.map(report => { return { ...report, isChecked: false }; });
    }
    else {
      _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.a.Error('ArcgisReportList error initializing infographic templates - no data');
      return;
    }
    this.accordionInit.emit({ user: userReports, public: publicReports, shared: sharedReports, gallery: galleryReports });
    this._infographics.MyInfographics.data = userReports;
    this._infographics.EsriInfographics.data = publicReports;
    this._infographics.SharedInfographics.data = sharedReports;
    this._infographics.GalleryInfographics.data = galleryReports;
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.a.Log('REPORT LIST init end', this._infographics);
  }
  _accordianItemClickHandler(ev) {
    this.onReportClicked.call(this, ev);
  }
  _accordianItemsCheckedHandler(ev) {
    this.reportChecked.emit(ev.detail);
  }
  // @Method()
  async setShowDefault(flag, defaultId) {
    if (flag) {
      this._tmpIgnoreDefault = true;
    }
    if (defaultId) {
      this._tmpIgnoreDefault = true;
    } // tmp remove this
    // this.stShowDefault = flag
    // this.stDefaultReportId = defaultId
  }
  async setMultipleChoice(flag) {
    this.stMultipleChoice = flag;
  }
  /**
   * Sets host callback for property change notifications
   * @param callback  - function supplied by host after component is instantiated
   * @param context   - object reference that is returned in the callback (to the host)
   *
   * Callback data format:
   *    {
   *      <property name>: <value>,
   *      <other prop name: value,
   *      ...
   *    }
   */
  async onPropChange(callback, context) {
    this._onChangeCallback = { fn: callback, ctx: context };
  }
  async setColorTheme(name) {
    if (name && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.A.hasText(name) && this.el) {
      this.stColorTheme = name.trim().toLowerCase();
      const n = name.trim().toLowerCase();
      if (n === 'light') {
        this._accordionTheme = n;
        this.el.style.setProperty('--calcite-ui-brand', '#007ac2');
        this.el.style.setProperty('--calcite-ui-brand-hover', '#00619b');
        this.el.style.setProperty('--calcite-ui-brand-press', '#004874');
        this.el.style.setProperty('--calcite-ui-background', '#f8f8f8');
        this.el.style.setProperty('--calcite-ui-foreground-1', '#ffffff');
        this.el.style.setProperty('--calcite-ui-foreground-2', '#f3f3f3');
        this.el.style.setProperty('--calcite-ui-foreground-3', '#eaeaea');
        this.el.style.setProperty('--calcite-ui-text-1', '#151515');
        this.el.style.setProperty('--calcite-ui-text-2', '#4a4a4a');
        this.el.style.setProperty('--calcite-ui-text-3', '#6a6a6a');
        this.el.style.setProperty('--calcite-ui-text-inverse', '#ffffff');
        this.el.style.setProperty('--calcite-ui-text-link', '#00619b');
        this.el.style.setProperty('--calcite-ui-border-1', '#cacaca');
        this.el.style.setProperty('--calcite-ui-border-2', '#d4d4d4');
        this.el.style.setProperty('--calcite-ui-border-3', '#dfdfdf');
        this.el.style.setProperty('--calcite-ui-border-input', '#949494');
        this.el.style.setProperty('--calcite-ui-info', '#00619b');
        this.el.style.setProperty('--calcite-ui-success', '#35ac46');
      }
      else if (n === 'dark') {
        this._accordionTheme = n;
        this.el.style.setProperty('--calcite-ui-brand', '#009af2');
        this.el.style.setProperty('--calcite-ui-brand-hover', '#007ac2');
        this.el.style.setProperty('--calcite-ui-brand-press', '#00619b');
        this.el.style.setProperty('--calcite-ui-background', '#353535');
        this.el.style.setProperty('--calcite-ui-foreground-1', '#2b2b2b');
        this.el.style.setProperty('--calcite-ui-foreground-2', '#202020');
        this.el.style.setProperty('--calcite-ui-foreground-3', '#151515');
        this.el.style.setProperty('--calcite-ui-text-1', '#ffffff');
        this.el.style.setProperty('--calcite-ui-text-2', '#bfbfbf');
        this.el.style.setProperty('--calcite-ui-text-3', '#9f9f9f');
        this.el.style.setProperty('--calcite-ui-text-inverse', '#151515');
        this.el.style.setProperty('--calcite-ui-text-link', '#00a0ff');
        this.el.style.setProperty('--calcite-ui-border-1', '#555555');
        this.el.style.setProperty('--calcite-ui-border-2', '#4a4a4a');
        this.el.style.setProperty('--calcite-ui-border-3', '#404040');
        this.el.style.setProperty('--calcite-ui-border-input', '#757575');
        this.el.style.setProperty('--calcite-ui-info', '#00a0ff');
        this.el.style.setProperty('--calcite-ui-success', '#36da43');
      }
      // @ts-ignore
      this._getShadowAccordion('MyInfographics').setColorTheme(n);
      // @ts-ignore
      this._getShadowAccordion('EsriInfographics').setColorTheme(n);
      // @ts-ignore
      this._getShadowAccordion('SharedInfographics').setColorTheme(n);
      // @ts-ignore
      this._getShadowAccordion('GalleryInfographics').setColorTheme(n);
    }
  }
  // @Method()
  async setSelectedId(id) {
    this.stSelectedReportId = id;
    this._setAccordionsReportId();
  }
  async onDefaultReportChange(callback, context) {
    this._onDefaultReportCallback = { fn: callback, ctx: context };
  }
  async onAccordionItemsChecked(callback, context) {
    this._onCheckboxChangeCallback = { fn: callback, ctx: context };
  }
  // infographic tree default report id changed
  reportSelectedEventHandler(e) {
    const result = { reportId: e.detail.reportId, name: e.detail.name };
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.a.Log('REPORT LIST DEFAULT IG CHANGED=', result);
    const cb = this._onDefaultReportCallback;
    if (cb && typeof cb.fn === 'function') {
      cb.fn.call(cb.ctx, result);
    }
  }
  _getShadowAccordion(name) {
    const id = this._infographics[name].accordionId;
    const elem = (this.el?.shadowRoot) ? this.el.shadowRoot.getElementById(id) : null;
    return elem;
  }
  _setAccordionsReportId() {
    const self = this;
    if (this.stSelectedReportId) {
      this._accList.forEach((a) => {
        const accElem = self._getShadowAccordion(a);
        if (accElem) {
          // @ts-ignore
          accElem.setSelectedId(self.stSelectedReportId);
        }
      });
    }
  }
  _setAccordionsCheckbox() {
    const self = this;
    this._accList.forEach((a) => {
      const accElem = self._getShadowAccordion(a);
      if (accElem) {
        // @ts-ignore
        accElem.setShowCheckbox(self.stShowCheckboxes);
      }
    });
  }
  _setAccordionsDefault() {
    // const self = this
    // if (this.stShowDefault) {
    //   const id = this.stDefaultReportId
    //   this._accList.forEach((a) => {
    //     const accElem = self._getShadowAccordion(a)
    //     if (accElem) {
    //       // @ts-ignore
    //       accElem.setShowDefault(true, id)
    //     }
    //   })
    // }
  }
  /**
   * Filters out multiple rapid events of the same type.  The callback
   * function will be called if no new events have happened during the
   * 'wait' time.
   * @param callback - your function to call when the events have settled
   * @param wait     - milliseconds delay (ex: 250)
   */
  _debounce2(callback, wait) {
    const self = this;
    const delayedCall = function () {
      self._debounceTimer = null;
      callback.apply(self);
    };
    // everytime _debounce2 is called we kill the previous timer
    if (self._debounceTimer)
      clearTimeout(self._debounceTimer);
    self._debounceTimer = setTimeout(delayedCall, wait);
  }
  _onFilteredPropChanged() {
    if (this._onChangeCallback)
      this._onChangeCallback.fn(this._onChangeCallback.ctx, this._onChangeQueue);
    // clear queue
    this._onChangeQueue = {};
  }
  /**
   * Function called by this component internally when a Prop changes
   * @param name  - of Prop
   * @param value - value after change
   */
  _onPropChanged(name, value) {
    // Add name/value to queue
    // Subsequent calls with the same name/value just updates
    // the value until the callback clears the queue
    this._onChangeQueue[name] = value;
    this._debounce2(this._onFilteredPropChanged, 250);
  }
  onReportClicked(e) {
    let id = e.detail.item.id;
    this.setReportId(id, e.detail.item.name);
  }
  setReportId(newValue, name) {
    const self = this;
    this.selectedReportId = newValue;
    this.reportSelected.emit({ id: self.selectedReportId, name: name });
    this._onPropChanged('reportId', this.selectedReportId);
  }
  async componentWillLoad() {
    this.stColors = this.colors;
    if (!this._hasSetEnv && this.env) {
      this._hasSetEnv = true;
      this.stEnv = this.env;
      _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__.E.setEnvironment(this.env);
    }
    this.stShowCheckboxes = this.showCheckboxes;
    this.stSelectedReportId = this.selectedReportId;
    // this.stShowDefault = this.showDefault == 'true'
    this.stDefaultReportId = this.defaultReportId || 'f9d96323b8cf4be9b052ee33fcdb6675'; // debug only
  }
  componentDidLoad() {
    const self = this;
    if (_ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.A.hasText(this.colors)) {
      this.stColors = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.A.parseThemeString(this.colors);
    }
    if (self.stColors) {
      self.el.style.setProperty('--calcite-ui-brand', self.stColors.brand);
      self.el.style.setProperty('--calcite-ui-foreground-1', self.stColors.foreground1);
      self.el.style.setProperty('--calcite-ui-foreground-2', self.stColors.foreground2);
      self.el.style.setProperty('--calcite-ui-foreground-3', self.stColors.foreground2);
      self.el.style.setProperty('--calcite-ui-text-1', self.stColors.text1);
      self.el.style.setProperty('--calcite-ui-text-2', self.stColors.text2);
      self.el.style.setProperty('--calcite-ui-text-3', self.stColors.text3);
      self.el.style.setProperty('--calcite-ui-border-2', self.stColors.border2);
      self.el.style.setProperty('--calcite-accordion-item-background', self.stColors.accordionBackground);
      self.el.style.setProperty('--calcite-accordion-item-foreground', self.stColors.accordionForeground);
    }
    // if (self.stShowDefault) {
    //   self._setAccordionsDefault()
    // }
  }
  componentDidUpdate() {
    this._setAccordionsReportId();
    // if (this.stShowDefault) {
    //   this._setAccordionsDefault()
    // }
    if (this.stShowCheckboxes) {
      this._setAccordionsCheckbox();
    }
  }
  render() {
    if (!this._isInitialized)
      return;
    const self = this;
    return ((0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, self.renderList('EsriInfographics'), self.renderList('MyInfographics'), self.renderList('SharedInfographics'), self.renderList('GalleryInfographics')));
  }
  renderList(name) {
    const self = this;
    const multi = self.stMultipleChoice.toString();
    const tags = {
      'MyInfographics': 'report-my-infographics',
      'EsriInfographics': 'report-esri-infographics',
      'SharedInfographics': 'report-shared-infographics',
      'GalleryInfographics': 'report-gallery-infographics'
    };
    const reports = self._infographics[name].data;
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.a.Log('REPORT LIST renderList', name, reports);
    if (reports && reports.length > 0) {
      let arr = [];
      if ((multi == 'true') && reports.length > 4) {
        // Add 'All' row with checkbox
        let a = {
          id: -1,
          name: _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('dropdown-all'),
          icon: 'file-text',
          usesCheckbox: true,
          isChecked: (name == 'EsriInfographics')
        };
        arr.push(a);
      }
      reports.forEach(function (item) {
        let row = {
          id: item.id,
          name: item.title,
          date: item.date,
          isChecked: item.isChecked,
          icon: 'file-text'
        };
        if (multi == 'true') {
          row.usesCheckbox = true;
          //row.isChecked = (name == 'EsriInfographics')
        }
        arr.push(row);
      });
      const content = JSON.stringify(arr);
      const displayName = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n(tags[name]);
      const accId = self._infographics[name].accordionId;
      _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.a.Log('REPORTS render: ', this.stShowCheckboxes, this.stShowDefault, content);
      // create an accordion for this level with all records
      return ((0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_0__.h)("ba-accordion", { id: accId, class: "reportList", displayname: displayName, reportsGroupId: name, content: content, showCheckboxes: this.stShowCheckboxes,
        //  showDefault={this.stShowDefault.toString()}
        //  defaultReportId={this.stDefaultReportId}
        // removing reportList prop, use content only
        //reportList={JSON.stringify(this.stReportList)}
        selectedId: this.stSelectedReportId, onAccordionItemClicked: ev => this._accordianItemClickHandler(ev), onAccordionItemsChecked: (ev) => this._accordianItemsCheckedHandler(ev) }));
    }
    return '';
  }
  get el() { return (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_0__.g)(this); }
  static get watchers() { return {
    "env": ["onEnvChanged"],
    "langCode": ["onLangCodeChanged"],
    "sourceCountry": ["onSourceCountryChanged"],
    "colors": ["onColorsChanged"],
    "defaultReportId": ["onDefaultReportChanged"],
    "selectedReportId": ["onSelectedReportChanged"],
    "showCheckboxes": ["onshowCheckboxesChanged"],
    "showDefault": ["onshowDefaultChanged"],
    "reportList": ["onreportListChanged"]
  }; }
};
ArcgisReportList.style = arcgisReportListCss;



//# sourceMappingURL=arcgis-report-list.entry.js.map

/***/ }),

/***/ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgisReports-a1dc26aa.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgisReports-a1dc26aa.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ getInfographicTemplatesList),
/* harmony export */   s: () => (/* binding */ setToken)
/* harmony export */ });
/* harmony import */ var _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GEClient-1a83a657.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/GEClient-1a83a657.js");
/* harmony import */ var _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ElementIds-f7d257e8.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/ElementIds-f7d257e8.js");



function setToken(username, token) {
    try {
        if (username != null && username.length > 0) {
            if (token != null && token.length > 0) {
                _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_0__.T.setToken(username, token);
                return _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('ok');
            }
            else {
                return _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('invalid-token');
            }
        }
        else {
            return _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('invalid-username');
        }
    }
    catch (ex) {
        return ex;
    }
}
async function getInfographicTemplatesList(countryCode, full = false) {
    return await _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_0__.G.getInfographicTemplatesList(countryCode, full);
}



//# sourceMappingURL=arcgisReports-a1dc26aa.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,