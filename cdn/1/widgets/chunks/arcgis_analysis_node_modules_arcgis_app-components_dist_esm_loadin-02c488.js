"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_loadin-02c488"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   r: () => (/* binding */ requestWrapper)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
let _loadingTimer;
let _requestCancelled;
function startLoading(node) {
    node.loading = true;
    _requestCancelled = false;
    if (_loadingTimer) {
        clearTimeout(_loadingTimer);
    }
    _loadingTimer = setTimeout(() => {
        // took too long
        endLoading(node);
        _requestCancelled = true;
    }, 60000);
}
function endLoading(node) {
    node.loading = false;
}
function requestWrapper(request, node) {
    startLoading(node);
    return request
        .then((result) => {
        endLoading(node);
        if (!_requestCancelled) {
            return Promise.resolve(result);
        }
        else {
            return Promise.reject(new Error("timeout"));
        }
    })
        .catch((error) => {
        endLoading(node);
        return Promise.reject(error);
    });
}



//# sourceMappingURL=loading-69139907.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-class-breaks-50c446bd.js":
/*!*************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-class-breaks-50c446bd.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createVectorFieldRenderer),
/* harmony export */   b: () => (/* binding */ createClassBreaksRendererFromExisting),
/* harmony export */   c: () => (/* binding */ createClassBreaksRenderer),
/* harmony export */   d: () => (/* binding */ createVectorFieldRendererFromExisting),
/* harmony export */   g: () => (/* binding */ getRasterClassBreaksFields)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _raster_symbolStyler_9b32ef48_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./raster-symbolStyler-9b32ef48.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-symbolStyler-9b32ef48.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */





/**
 * creates a Vector Field renderer with default settings
 * @param options: options
 */
function createVectorFieldRenderer() {
    const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const rasterFunction = layer.type === "imagery" ? layer.rasterFunction : undefined;
    return modules.RasterVectorFieldCreator.createRenderer({ layer, rasterFunction }).then((result) => {
        layer.effect = undefined;
        layer.renderer = result.renderer;
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Vector Field renderer with some settings from the current renderer
 * @param options: options
 */
function createVectorFieldRendererFromExisting(options) {
    const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const renderer = layer.renderer;
    const rasterFunction = layer.type === "imagery" ? layer.rasterFunction : undefined;
    options = options || {};
    return modules.RasterVectorFieldCreator.createRenderer({
        layer,
        rasterFunction,
        style: options.style || renderer.style
    }).then((result) => {
        // save old tile size
        result.renderer.symbolTileSize = renderer.symbolTileSize;
        // save old size variable variable
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
        result.renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(result.renderer, "size") || [];
        result.renderer.visualVariables.push(sizeVisVar);
        // save old symbol direction
        result.renderer.flowRepresentation = renderer.flowRepresentation;
        // save old input unit
        result.renderer.inputUnit = renderer.inputUnit;
        // save old output unit
        result.renderer.outputUnit = renderer.outputUnit;
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}

/**
 * creates a Class Breaks renderer with default settings
 */
function createClassBreaksRenderer() {
    const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const rasterFunction = layer.type === "imagery" ? layer.rasterFunction : undefined;
    const colorRamp = (0,_raster_symbolStyler_9b32ef48_js__WEBPACK_IMPORTED_MODULE_3__.c)([
        [245, 245, 0],
        [255, 0, 0]
    ].map((color) => new modules.esriColor(color)));
    return modules.RasterClassBreaksCreator.createRenderer({
        layer,
        rasterFunction,
        colorRamp
    }).then((result) => {
        result.renderer.classBreakInfos.forEach((classBreakInfo) => (classBreakInfo.symbol.outline.width = 0));
        return Promise.resolve(result);
    });
}
function createClassBreaksRendererFromExisting(options) {
    const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const renderer = layer.renderer;
    const rasterFunction = layer.type === "imagery" ? layer.rasterFunction : undefined;
    return modules.RasterClassBreaksCreator.createRenderer({
        layer,
        rasterFunction,
        field: options.field || renderer.field,
        classificationMethod: options.classificationMethod || renderer.authoringInfo.classificationMethod,
        numClasses: options.numClasses || renderer.classBreakInfos.length,
        colorRamp: renderer.authoringInfo.colorRamp,
        definedInterval: options.definedInterval
    }).then((result) => {
        result.renderer.classBreakInfos.forEach((classBreakInfo) => (classBreakInfo.symbol.outline.width = 0));
        return Promise.resolve(result);
    });
}
function getRasterClassBreaksFields() {
    var _a;
    const { layer: smLayer, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    let fields;
    const { rasterInfo } = layer;
    const rasterAttributeTableFields = (_a = rasterInfo === null || rasterInfo === void 0 ? void 0 : rasterInfo.attributeTable) === null || _a === void 0 ? void 0 : _a.fields;
    if (rasterAttributeTableFields) {
        fields = rasterAttributeTableFields.filter((field) => field.type !== "oid" && field.type !== "string");
    }
    else {
        fields = [new modules.Field({ name: "value", alias: strings.panels.classBreaks.value })];
    }
    return fields;
}



//# sourceMappingURL=raster-class-breaks-50c446bd.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-flow-761a3470.js":
/*!*****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-flow-761a3470.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createFlowRendererFromExisting),
/* harmony export */   c: () => (/* binding */ createFlowRenderer),
/* harmony export */   f: () => (/* binding */ findFlowScheme)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * creates a Flow renderer with default settings
 * @param options: options
 */
function createFlowRenderer(options) {
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    return modules.RasterFlowCreator.createRenderer({
        layer,
        view: mapView,
        theme: options.flowTheme || "flow-line",
        includeColorVariable: options.includeColorVariable,
        legendOptions: options.legendOptions,
        flowRepresentation: options.flowRepresentation,
        flowScheme: options.flowScheme || findFlowScheme()
    }).then((result) => {
        if (result.layerEffect && result.layerEffect.indexOf("drop-shadow") === -1) {
            layer.effect = result.layerEffect;
        }
        result.renderer.color = result.renderer.color && (options.color || result.renderer.color);
        layer.renderer = result.renderer;
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Flow renderer with some settings from the current renderer
 * @param options: options
 */
function createFlowRendererFromExisting(options) {
    var _a;
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const renderer = layer.renderer;
    const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
    const authoringInfo = renderer.authoringInfo;
    const theme = options.flowTheme || (authoringInfo === null || authoringInfo === void 0 ? void 0 : authoringInfo.flowTheme) || "flow-line";
    return modules.RasterFlowCreator.createRenderer({
        layer,
        view: mapView,
        theme,
        includeColorVariable: (_a = options.includeColorVariable) !== null && _a !== void 0 ? _a : !!colorVisVar,
        legendOptions: options.legendOptions || (colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.legendOptions),
        flowRepresentation: options.flowRepresentation || renderer.flowRepresentation,
        // flowScheme: theme === "flow-line" ? options.flowScheme || findFlowScheme() : undefined /* bug */
        flowScheme: options.flowScheme
    }).then((result) => {
        // keep old slider min/max
        const colorAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "color");
        const newColorAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(result.renderer, "color");
        if ((colorAuthVisVar === null || colorAuthVisVar === void 0 ? void 0 : colorAuthVisVar.minSliderValue) && (colorAuthVisVar === null || colorAuthVisVar === void 0 ? void 0 : colorAuthVisVar.maxSliderValue) && newColorAuthVisVar) {
            newColorAuthVisVar.minSliderValue = colorAuthVisVar.minSliderValue;
            newColorAuthVisVar.maxSliderValue = colorAuthVisVar.maxSliderValue;
        }
        // keep old stops
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(layer.renderer, "color");
        const newColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "color");
        if (colorVisVar && newColorVisVar) {
            colorVisVar.stops.forEach((stop, idx) => {
                newColorVisVar.stops[idx].value = stop.value;
            });
        }
        // keep old single color
        result.renderer.color = result.renderer.color && (options.color || renderer.color || result.renderer.color);
        // keep old stop colors
        const scheme = options.flowScheme || findFlowScheme();
        if (scheme && colorVisVar && newColorVisVar) {
            colorVisVar.stops.forEach((stop, idx) => {
                newColorVisVar.stops[idx].color = new modules.esriColor(stop.color.toJSON());
            });
        }
        if (theme === authoringInfo.flowTheme) {
            result.renderer.flowSpeed = renderer.flowSpeed;
            result.renderer.density = renderer.density;
            result.renderer.trailLength = renderer.trailLength;
            result.renderer.trailWidth = renderer.trailWidth;
            result.renderer.trailCap = renderer.trailCap;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
function findFlowScheme() {
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const renderer = layer.renderer;
    const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
    if (!colorVisVar) {
        return null;
    }
    const colors = colorVisVar.stops.map((stop) => {
        return stop.color;
    });
    const schemes = modules.flowSchemes.getSchemes({
        basemap: mapView.map.basemap || "topo"
    });
    const allSchemes = [schemes.primaryScheme].concat(schemes.secondarySchemes);
    const matchingSchemes = [];
    allSchemes.forEach((scheme) => {
        let hasNoMatch = colors.some((color, idx) => {
            return !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a4)(scheme.colors[idx], color);
        });
        if (!hasNoMatch) {
            matchingSchemes.push(scheme);
        }
        else {
            // try flipped ramp
            scheme.colors = scheme.colors.reverse();
            hasNoMatch = colors.some((color, idx) => {
                return !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a4)(scheme.colors[idx], color);
            });
            if (!hasNoMatch) {
                matchingSchemes.push(scheme);
            }
        }
    });
    return matchingSchemes.length ? matchingSchemes[0] : null;
}



//# sourceMappingURL=raster-flow-761a3470.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,