"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-bac55a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.ro-3a5c4e11.js":
/*!**********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/help-texts.ro-3a5c4e11.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   rfxArgsHelpTexts: () => (/* binding */ rfxArgsHelpTexts)
/* harmony export */ });
const rfxArgsHelpTexts = {
	"@@Abs_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Abs_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Abs_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Abs_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Abs_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Abs_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Abs_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Abs_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Abs_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Abs_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Abs_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Abs_Raster_tag0@@": "Rasterul de intrare pentru care se calculează valorile absolute.",
	"@@ACos_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@ACos_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@ACos_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@ACos_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@ACos_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@ACos_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@ACos_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@ACos_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@ACos_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@ACos_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@ACos_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@ACos_Raster_tag0@@": "Intrarea pentru care se calculează valorile inverse pentru cosinus.",
	"@@ACosH_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@ACosH_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@ACosH_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@ACosH_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@ACosH_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@ACosH_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@ACosH_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@ACosH_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@ACosH_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@ACosH_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@ACosH_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@ACosH_Raster_tag0@@": "Intrarea pentru care se calculează valorile hiperbolice inverse pentru cosinus.",
	"@@Apparent-Reflectance_Albedo_tag0@@": "Rezultatele funcției Reflectanță aparentă pot fi exprimate și ca un coeficient de reflexie, acesta fiind procentajul energiei disponibile reflectate de către suprafața planetară. Datele aferente coeficientului de reflexie sunt utilizate de utilizatorii științifici pentru modelarea complexă și aplicațiile tehnice la distanță.",
	"@@Apparent-Reflectance_Albedo_tag1@@": "Nebifat--Funcția returnează valori de reflectanță aparentă. Aceasta este setarea implicită.",
	"@@Apparent-Reflectance_Albedo_tag2@@": "Bifat--Funcția returnează valori cu virgule mobile de 32 biți, care sunt de obicei în intervalul 0 și 1. Nu se efectuează decuparea datelor dacă este selectată această opțiune.",
	"@@Apparent-Reflectance_Albedo_tag3@@": "Din moment ce tipul datelor de ieșire pentru albedo este cu virgulă mobilă, trebuie să setați în mod explicit <strong>Tipul Pixelului de Ieșire</strong> preferat fie la mobil de 32-biți sau dublu de 64-biți. Parametrul <strong>Tipul Pixelului de Ieșire</strong> se regăsește pe fila <strong>General</strong> din funcția de raster <strong>Reflectanță Aparentă</strong>. Dacă <strong>Tipul Pixelului de Ieșire</strong> nu este setat corect pentru opțiunea <strong>Albedo</strong>, valorile rezultante vor fi nevalabile și vor primi o valoare de 0.",
	"@@Apparent-Reflectance_Offset_tag0@@": "Opțional, valoarea scalată a coeficientului de reflexie poate avea o valoare de decalare:",
	"@@Apparent-Reflectance_Offset_tag1@@": "Pentru tipurile de date nesemnate de 16 biți, decalarea de scalare implicită este de 5.000.",
	"@@Apparent-Reflectance_Offset_tag2@@": "Pentru tipurile de date nesemnate de 8 biți, decalarea de scalare implicită este de 0.",
	"@@Apparent-Reflectance_Offset_tag3@@": "Nu se aplică scalarea atunci când ieșirea este coeficientul de reflexie.",
	"@@Apparent-Reflectance_Radiance-Gains-and-Bias-Values-per-Band_tag0@@": "Puteți seta sau edita manual această valoare pentru fiecare bandă. Informațiile corespunzătoare pot fi citite în metadatele produsului raster de intrare.",
	"@@Apparent-Reflectance_Raster_tag0@@": "Produsul raster la care se va aplica reflectanța aparentă.",
	"@@Apparent-Reflectance_Scale-Factor_tag0@@": "Valoarea rezultată pentru reflectanța aparentă poate fi exprimată sub formă de număr întreg. Factorul de scalare este înmulțit cu coeficientul de reflexie pentru a converti toate valorile de tip virgulă mobilă în valori de tip număr întreg.",
	"@@Apparent-Reflectance_Scale-Factor_tag1@@": "Dacă factorul de scalare este ${0} sau nu este specificat, se va aplica scalarea implicită, în funcție de tipul de pixeli pentru datele introduse:",
	"@@Apparent-Reflectance_Scale-Factor_tag2@@": "Pentru tipurile de date nesemnate de 16 biți, factorul de scalare implicit este de 50.000.",
	"@@Apparent-Reflectance_Scale-Factor_tag3@@": "Pentru tipurile de date nesemnate de 8 biți, factorul de scalare implicit este de 255.",
	"@@Apparent-Reflectance_Scale-Factor_tag4@@": "Factorul de scalare este întotdeauna aplicat când ieșirea este reflectanță aparentă. Nu se aplică scalarea atunci când ieșirea este coeficientul de reflexie.",
	"@@Apparent-Reflectance_Sun-Elevation_tag0@@": "Aceasta este valoarea de elevație a soarelui, exprimată în grade. Va fi populată de sistem dacă pot fi citite informațiile corespunzătoare din metadate. Puteți seta sau edita manual această valoare.",
	"@@ArgStatistics_Max_tag0@@": "Valoarea maximă pe care o setați este cea mai mare valoare egală cu sau mai mică decât sfârșitul duratei.",
	"@@ArgStatistics_Max_tag1@@": "Această intrare este aplicabilă numai atunci când metoda este Durată.",
	"@@ArgStatistics_Method_tag0@@": "Selectați metoda de statistică pentru calcul:",
	"@@ArgStatistics_Method_tag1@@": "Arg. max.--Argumentul pentru valoarea maximă, care returnează ${Band index} pentru care pixelul dat își atinge valoarea minimă pentru toate benzile. Tuturor benzilor raster pentru fiecare raster de intrare li se alocă un index de bandă incrementală bazat pe 0 care este mai întâi ordonat după indexul rasterului de intrare și apoi după ordinea benzilor relative din fiecare raster de intrare.",
	"@@ArgStatistics_Method_tag2@@": "Arg. med.--Argumentul pentru mediană, care returnează ${Band index} pentru care pixelul dat își atinge valoarea medie a valorilor pentru toate benzile.",
	"@@ArgStatistics_Method_tag3@@": "Arg. min.--Argumentul pentru valoarea minimă, care returnează ${Band index} pentru care pixelul dat își atinge valoarea minimă pentru toate benzile.",
	"@@ArgStatistics_Method_tag4@@": "Durată--Metoda duratei găsește cele mai lungi elemente consecutive din matrice, unde fiecare element are o valoare mai mare decât sau egală cu <strong>Min</strong> și mai mică decât sau egală cu <strong>Max</strong>, și apoi indică lungimea.",
	"@@ArgStatistics_Min_tag0@@": "Valoarea minimă pe care o setați este cea mai mică valoare egală cu sau mai mare decât începutul duratei.",
	"@@ArgStatistics_Min_tag1@@": "Această intrare este aplicabilă numai atunci când metoda este Durată.",
	"@@ArgStatistics_Rasters_tag0@@": "Rasterul de intrare pe care îl veți utiliza pentru a desfășura diversele metode statistice.",
	"@@ArgStatistics_Undefined-Class_tag0@@": "Va fi returnată o intrare constantă atunci când nu vor putea fi atinse valori maxime, minime sau medii definitive. Cel mai uzual scenariu este atunci când valoarea maximă sau minimă apare de mai multe ori în valorile de la toate benzile. Valoarea implicită pentru constanta nedefinită este 100.",
	"@@ArgStatistics_Undefined-Class_tag1@@": "Clasa nedefinită este alicabilă doar atunci când metoda este <strong>ArgMax</strong>, <strong>ArgMin</strong> sau <strong>ArgMedian</strong>.",
	"@@ArgStatistics_ignorenodata_tag0@@": "Denotă dacă valorile NoData sunt ignorate în calculul statistic.",
	"@@ArgStatistics_ignorenodata_tag1@@": "Bifat-Analiza va include toți pixelii valizi din rasterele de intrare și va ignora pixelii NoData.",
	"@@ArgStatistics_ignorenodata_tag2@@": "Nebifat-Analiza va duce la NoData dacă există valori NoData pentru pixelii din rasterele de intrare. Aceasta este acţiunea implicită.",
	"@@Arithmetic_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Arithmetic_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Arithmetic_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Arithmetic_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Arithmetic_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Arithmetic_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Arithmetic_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Arithmetic_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Arithmetic_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Arithmetic_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Arithmetic_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Arithmetic_Operation_tag0@@": "Operația aritmetică care trebuie efectuată între cele două rastere de intrare.",
	"@@Arithmetic_Operation_tag1@@": "Opțiunile sunt următoarele:",
	"@@Arithmetic_Operation_tag2@@": "<strong>Împărțire</strong>--Reiese rezultatul divizibil dintre valorile corespunzătoare ale pixelilor pentru fiecare raster.",
	"@@Arithmetic_Operation_tag4@@": "<strong>Minus</strong>--Rezultă diferența dintre valorile corespunzătoare ale pixelilor pentru fiecare raster. Se poate utiliza pentru a calcula modificările detectate.",
	"@@Arithmetic_Operation_tag6@@": "<strong>Mod</strong>--Rezultă valoarea pixelilor pentru toți pixelii care se suprapun, care apare cel mai des. De exemplu, dacă există șase benzi într-un raster, vor exista șase pixeli care se suprapun. Pentru valorile 4, 5, 6, 4, 7, 9, valoarea modului este 4.",
	"@@Arithmetic_Operation_tag8@@": "<strong>Înmulțire</strong>--Reiese rezultatul valorilor corespunzătoare ale pixelilor pentru fiecare raster. Se poate utiliza pentru a executa anumite funcții de cost.",
	"@@Arithmetic_Operation_tag10@@": "<strong>Plus</strong>--Rezultă suma valorilor corespunzătoare ale pixelilor pentru fiecare raster.",
	"@@Arithmetic_Operation_tag12@@": "<strong>Putere</strong>--Reiese rezultatul valorilor pixelilor corespunzătoare ridicat la puterea rasterului de intrare sau a scalei.",
	"@@Arithmetic_Raster_tag0@@": "Primul set de date raster de intrare.",
	"@@Arithmetic_Raster2_tag0@@": "Al doilea set de date raster de intrare.",
	"@@ASin_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@ASin_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@ASin_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@ASin_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@ASin_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@ASin_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@ASin_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@ASin_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@ASin_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@ASin_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@ASin_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@ASin_Raster_tag0@@": "Intrarea pentru care se calculează valorile inverse pentru sinus.",
	"@@ASinH_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@ASinH_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@ASinH_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@ASinH_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@ASinH_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@ASinH_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@ASinH_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@ASinH_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@ASinH_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@ASinH_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@ASinH_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@ASinH_Raster_tag0@@": "Intrarea pentru care se calculează valorile hiperbolice inverse pentru sinus.",
	"@@Aspect_Raster_tag0@@": "DEM de intrare utilizat pentru derivarea setului de date pentru aspect.",
	"@@Aspect-Slope_Raster_tag0@@": "DEM de intrare.",
	"@@Aspect-Slope_Z-Factor_tag0@@": "Un factor de scalare utilizat pentru a converti valorile de elevație în următoarele două scopuri:",
	"@@Aspect-Slope_Z-Factor_tag1@@": "Convertiți unitățile de elevație (cum ar fi metri sau ft) la unitățile coordonatelor orizontale ale setului de date, care pot fi ft, metri sau grade.",
	"@@Aspect-Slope_Z-Factor_tag2@@": "Adăugați exagerarea verticală pentru un efect vizual.",
	"@@ATan_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@ATan_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@ATan_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@ATan_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@ATan_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@ATan_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@ATan_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@ATan_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@ATan_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@ATan_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@ATan_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@ATan_Raster_tag0@@": "Intrarea pentru care se calculează valorile tangențiale inverse.",
	"@@ATan2_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@ATan2_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@ATan2_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@ATan2_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@ATan2_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@ATan2_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@ATan2_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@ATan2_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@ATan2_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@ATan2_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@ATan2_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@ATan2_Raster_tag0@@": "Intrarea care specifică numărătorul sau valoarea y care se va utiliza la calcularea tangentei inverse.",
	"@@ATan2_Raster2_tag0@@": "Intrarea care specifică numitorul sau valoarea y care se va utiliza la calcularea tangentei inverse.",
	"@@ATanH_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@ATanH_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@ATanH_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@ATanH_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@ATanH_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@ATanH_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@ATanH_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@ATanH_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@ATanH_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@ATanH_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@ATanH_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@ATanH_Raster_tag0@@": "Intrarea pentru care se calculează valorile tangențiale hiperbolice inverse.",
	"@@Attribute-Table_Raster_tag0@@": "Rasterul de intrare.",
	"@@Attribute-Table_Table-Type_tag0@@": "Tabelul cu atribute de intrare poate fi introdus folosind tipul <strong>Manual</strong> pentru care atribuiți un nume de clasă sau o culoare la fiecare valoare sau puteți introduce o referință la un tabel existent care provine dintr-un fișier ${.dbf}.",
	"@@Band-Arithmetic_Band-Indexes_tag0@@": "Definiți formula dvs. aritmetică de bandă dacă alegeți <strong>Definit de utilizator</strong> la <strong>Metoda</strong> dvs.",
	"@@Band-Arithmetic_Band-Indexes_tag5@@": "Dacă ați ales un exponent prestabilit pentru <strong>Metoda</strong> dvs., definiți benzile adecvate ale setului dvs. de date pentru rasterul de intrare care corespund acelui exponent.",
	"@@Band-Arithmetic_Method_tag0@@": "Tipul algoritmului aritmetic al benzii pe care doriți să-l implementați. Puteți defini un algoritm personalizat sau alege un indice predefinit.",
	"@@Band-Arithmetic_Method_tag1@@": "<strong>BAI</strong>--Indice zonă de ardere",
	"@@Band-Arithmetic_Method_tag2@@": "<strong>CIg</strong>--Indice de clorofilă - verde",
	"@@Band-Arithmetic_Method_tag3@@": "<strong>Clre</strong>--Indice de clorofilă – muchie roșie",
	"@@Band-Arithmetic_Method_tag4@@": "<strong>Minerale argiloase</strong>--proporție de minerale argiloase",
	"@@Band-Arithmetic_Method_tag5@@": "<strong>EVI</strong>--Indice de vegetație îmbunătățit",
	"@@Band-Arithmetic_Method_tag6@@": "<strong>Minerale feroase</strong>--proporție de minerale feroase",
	"@@Band-Arithmetic_Method_tag7@@": "<strong>GEMI</strong>--Indice de monitorizare mediu global",
	"@@Band-Arithmetic_Method_tag8@@": "<strong>GNDVI</strong>--Indice de vegetație diferență normalizată",
	"@@Band-Arithmetic_Method_tag9@@": "<strong>GVI (Landsat TM)</strong>--Indice de vegetație verde Landsat TM",
	"@@Band-Arithmetic_Method_tag10@@": "<strong>Oxid de fier</strong>--proporție de oxid de fier",
	"@@Band-Arithmetic_Method_tag11@@": "<strong>MNDWI</strong>--Indice ponderat de apă diferență modificată",
	"@@Band-Arithmetic_Method_tag12@@": "<strong>MTVI2</strong>--Indice de vegetație modificată sub formă de triunghiuri (iterație secundară)",
	"@@Band-Arithmetic_Method_tag13@@": "<strong>SAVI modificat</strong>--Indice de vegetație ajustat cu sol",
	"@@Band-Arithmetic_Method_tag14@@": "<strong>NBR</strong>--Indice zonă de ardere normalizat",
	"@@Band-Arithmetic_Method_tag15@@": "<strong>NDBI</strong>--Indice cumulat diferență normalizată",
	"@@Band-Arithmetic_Method_tag16@@": "<strong>NDMI</strong>--Indice de umezeală diferență normalizată",
	"@@Band-Arithmetic_Method_tag17@@": "<strong>NDSI</strong>--Indice de zăpadă diferență normalizată",
	"@@Band-Arithmetic_Method_tag18@@": "<strong>NDVI</strong>--Indice de vegetație diferență normalizată",
	"@@Band-Arithmetic_Method_tag19@@": "<strong>NDVIre</strong>-Indice de vegetație diferență normalizată -margine roșie",
	"@@Band-Arithmetic_Method_tag20@@": "<strong>NDWI</strong>--Indice de apă diferență normalizată",
	"@@Band-Arithmetic_Method_tag21@@": "<strong>PVI</strong>--Indice de vegetație perpendicular",
	"@@Band-Arithmetic_Method_tag22@@": "<strong>RTVICore</strong>--Indice de vegetație sub formă de truiunghiri - margine roșie",
	"@@Band-Arithmetic_Method_tag23@@": "<strong>SAVI</strong>--Indice de vegetație ajustat cu solul",
	"@@Band-Arithmetic_Method_tag24@@": "<strong>SR</strong>--proporție simplă",
	"@@Band-Arithmetic_Method_tag25@@": "<strong>SRre</strong>--Proporție simplă - margine roșie",
	"@@Band-Arithmetic_Method_tag26@@": "<strong>Formula lui Sultan</strong>--Formula lui Sultan",
	"@@Band-Arithmetic_Method_tag27@@": "<strong>SAVI transformat</strong>--Indice de vegetație ajustat cu sol",
	"@@Band-Arithmetic_Method_tag28@@": "<strong>Definit de utilizator</strong>--Vă permite să vă definiți expresia aritmetică a benzii personalizate.",
	"@@Band-Arithmetic_Method_tag29@@": "<strong>VARI</strong>--Indice rezistent la atmosferă vizibil",
	"@@Band-Arithmetic_Method_tag30@@": "<strong>WNDWI</strong>--Indice ponderat de apă diferență normalizată",
	"@@Band-Arithmetic_Raster_tag0@@": "Rasterul de intrare.",
	"@@Binary-Thresholding_Raster_tag0@@": "Rasterul de intrare.",
	"@@Bitwise-And_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Bitwise-And_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Bitwise-And_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Bitwise-And_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Bitwise-And_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Bitwise-And_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Bitwise-And_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Bitwise-And_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Bitwise-And_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Bitwise-And_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Bitwise-And_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Bitwise-And_Raster_tag0@@": "Prima intrare de utilizat în această operație Bitwise.",
	"@@Bitwise-And_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Bitwise-And_Raster2_tag0@@": "A doua intrare de utilizat în această operație Bitwise.",
	"@@Bitwise-And_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Bitwise-Left-Shift_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Bitwise-Left-Shift_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Bitwise-Left-Shift_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Bitwise-Left-Shift_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Bitwise-Left-Shift_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Bitwise-Left-Shift_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Bitwise-Left-Shift_Raster_tag0@@": "Intrarea la care se efectuează transferul.",
	"@@Bitwise-Left-Shift_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Bitwise-Left-Shift_Raster2_tag0@@": "Intrarea care definește numărul de poziții pentru transferul biților.",
	"@@Bitwise-Left-Shift_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Bitwise-Not_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Bitwise-Not_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Bitwise-Not_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Bitwise-Not_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Bitwise-Not_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Bitwise-Not_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Bitwise-Not_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Bitwise-Not_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Bitwise-Not_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Bitwise-Not_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Bitwise-Not_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Bitwise-Not_Raster_tag0@@": "Rasterul de intrare asupra căruia se efectuează operația Bitwise Not (de completare).",
	"@@Bitwise-Or_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Bitwise-Or_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Bitwise-Or_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Bitwise-Or_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Bitwise-Or_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Bitwise-Or_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Bitwise-Or_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Bitwise-Or_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Bitwise-Or_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Bitwise-Or_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Bitwise-Or_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Bitwise-Or_Raster_tag0@@": "Prima intrare de utilizat în această operație Bitwise.",
	"@@Bitwise-Or_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Bitwise-Or_Raster2_tag0@@": "A doua intrare de utilizat în această operație Bitwise.",
	"@@Bitwise-Or_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Bitwise-Right-Shift_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Bitwise-Right-Shift_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Bitwise-Right-Shift_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Bitwise-Right-Shift_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Bitwise-Right-Shift_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Bitwise-Right-Shift_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Bitwise-Right-Shift_Raster_tag0@@": "Intrarea la care se efectuează transferul.",
	"@@Bitwise-Right-Shift_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Bitwise-Right-Shift_Raster2_tag0@@": "Intrarea care definește numărul de poziții pentru transferul biților.",
	"@@Bitwise-Right-Shift_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Bitwise-Xor_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Bitwise-Xor_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Bitwise-Xor_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Bitwise-Xor_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Bitwise-Xor_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Bitwise-Xor_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Bitwise-Xor_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Bitwise-Xor_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Bitwise-Xor_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Bitwise-Xor_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Bitwise-Xor_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Bitwise-Xor_Raster_tag0@@": "Prima intrare de utilizat în această operație Bitwise.",
	"@@Bitwise-Xor_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Bitwise-Xor_Raster2_tag0@@": "A doua intrare de utilizat în această operație Bitwise.",
	"@@Bitwise-Xor_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Boolean-and_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Boolean-and_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Boolean-and_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Boolean-and_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Boolean-and_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Boolean-and_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Boolean-and_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Boolean-and_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Boolean-and_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Boolean-and_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Boolean-and_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Boolean-and_Raster_tag0@@": "Prima intrare de utilizat în această operație Boolean.",
	"@@Boolean-and_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Boolean-and_Raster2_tag0@@": "A doua intrare de utilizat în această operație Boolean.",
	"@@Boolean-and_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Boolean-Not_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Boolean-Not_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Boolean-Not_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Boolean-Not_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Boolean-Not_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Boolean-Not_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Boolean-Not_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Boolean-Not_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Boolean-Not_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Boolean-Not_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Boolean-Not_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Boolean-Not_Raster_tag0@@": "Prima intrare de utilizat în această operație Boolean.",
	"@@Boolean-Or_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Boolean-Or_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Boolean-Or_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Boolean-Or_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Boolean-Or_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Boolean-Or_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Boolean-Or_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Boolean-Or_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Boolean-Or_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Boolean-Or_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Boolean-Or_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Boolean-Or_Raster_tag0@@": "Prima intrare de utilizat în această operație Boolean.",
	"@@Boolean-Or_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Boolean-Or_Raster2_tag0@@": "A doua intrare de utilizat în această operație Boolean.",
	"@@Boolean-Or_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Boolean-Xor_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Boolean-Xor_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Boolean-Xor_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Boolean-Xor_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Boolean-Xor_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Boolean-Xor_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Boolean-Xor_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Boolean-Xor_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Boolean-Xor_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Boolean-Xor_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Boolean-Xor_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Boolean-Xor_Raster_tag0@@": "Prima intrare de utilizat în această operație Boolean.",
	"@@Boolean-Xor_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Boolean-Xor_Raster2_tag0@@": "A doua intrare de utilizat în această operație Boolean.",
	"@@Boolean-Xor_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Buffered_Raster_tag0@@": "Rasterul de intrare care trebuie stocat în memorie.",
	"@@Calculator_Cellsize-Type_tag0@@": "Dimensiunea celulei utilizate pentru a crea rasterul de ieșire.",
	"@@Calculator_Cellsize-Type_tag1@@": "Puteți alege dimensiunea celulei de ieșire dintre următoarele opțiuni din lista verticală:",
	"@@Calculator_Cellsize-Type_tag2@@": "<strong>Primul dintre</strong>--Dimensiunea celulei pentru variabila primului raster.",
	"@@Calculator_Cellsize-Type_tag4@@": "<strong>Min dintre</strong>--Dimensiunea minimă a celulei pentru rasterele de intrare.",
	"@@Calculator_Cellsize-Type_tag6@@": "<strong>Max dintre</strong>--Dimensiunea maximă a celulei pentru rasterele de intrare.",
	"@@Calculator_Cellsize-Type_tag8@@": "<strong>Medie dintre</strong>--Dimensiunea medie a celulei pentru rasterele de intrare.",
	"@@Calculator_Cellsize-Type_tag10@@": "<strong>Ultimul dintre</strong>--Dimensiunea celulei pentru variabila ultimului raster.",
	"@@Calculator_Cellsize-Type_tag12@@": "Selecția implicită este <strong>Max dintre</strong>.",
	"@@Calculator_Expression_tag0@@": "Creați o expresie algebrică pentru efectuarea analizei spațiale asupra rasterului de intrare.",
	"@@Calculator_Expression_tag1@@": "Pot fi apelate toate funcțiile matematice existente pentru crearea expresiei. Operatorii disponibili sunt listați mai jos.",
	"@@Calculator_Expression_tag2@@": "Operațiuni aritmetice",
	"@@Calculator_Expression_tag3@@": "Adunare: +",
	"@@Calculator_Expression_tag4@@": "Împărțire: /",
	"@@Calculator_Expression_tag5@@": "Modulo: %",
	"@@Calculator_Expression_tag6@@": "Înmulțire: *",
	"@@Calculator_Expression_tag7@@": "Putere: **",
	"@@Calculator_Expression_tag8@@": "Scădere: -",
	"@@Calculator_Expression_tag9@@": "Operațiuni Boolean",
	"@@Calculator_Expression_tag10@@": "Boolean Și: &&",
	"@@Calculator_Expression_tag11@@": "Boolean Sau: ||",
	"@@Calculator_Expression_tag12@@": "Operații relaționale",
	"@@Calculator_Expression_tag13@@": "Egal cu: ==",
	"@@Calculator_Expression_tag14@@": "Mai mare decât: >",
	"@@Calculator_Expression_tag15@@": "Mai mare sau egal cu: >=",
	"@@Calculator_Expression_tag16@@": "Mai mic decât: <",
	"@@Calculator_Expression_tag17@@": "Mai mic sau egal cu: <=",
	"@@Calculator_Expression_tag18@@": "Nu egal cu: !=",
	"@@Calculator_Expression_tag19@@": "Operații suplimentare",
	"@@Calculator_Expression_tag20@@": "Minimum două rastere pe pixel: min(a,b)",
	"@@Calculator_Expression_tag21@@": "Maximum două rastere pe pixel: max(a,b)",
	"@@Calculator_Expression_tag22@@": "Iată câteva exemple de expresii:",
	"@@Calculator_Expression_tag23@@": "Declarație condițională simplă: într-un raster (reprezentat de T), găsiți valori de elevație peste 4.000 de picioare și atribuiți acestor zone valoarea 1, iar tuturor celorlalte zone valoarea 0.",
	"@@Calculator_Expression_tag24@@": "Con(T > 4000, 1, 0)",
	"@@Calculator_Expression_tag25@@": "Declarație condițională imbricată: găsiți zone în care panta (reprezentată de b1)) este sub 10 de grade și NDVI (reprezentată de b2) este peste 0,5 și atribuiți acestor zone valoarea 1. Pentru toate celelalte zone, atribuiți valoarea 2 dacă panta este peste 10 grade și elevația (reprezentată de b3) este peste 2.500 de picioare. Tuturor celorlalte zone li se atribuie valoarea 3.",
	"@@Calculator_Expression_tag26@@": "Con((b1 < 10 && b2 > .5, 1, Con(b1 > 10 && b3 > 2500, 2, 3)))",
	"@@Calculator_extenttype_tag0@@": "<p>Alegeți ce extindere trebuie folosită în rasterul de ieșire:</p><ul><li><p>Primul dintre--Utilizați extinderea primului raster de intrare pentru a stabili măsura prelucrării.</p></li><li>Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este starea implicită.</li><li>Uniunea dintre--Utilizați extinderea tututor rasterelor pentru a stabili extinderea prelucrării.</li><li>Ultimul dintre--Utilizați extinderea ultimului raster de intrare pentru a stabili extinderea prelucrării.</li></ul>",
	"@@Calculator_Raster-Variables_tag0@@": "Denumirea variabilei definite de utilizator și rasterul de intrare.",
	"@@Classify_Input-Definition-File_tag0@@": "Fișierul de definire a clasificatorului Esri pentru intrare (${.ecd}) care conține statisticile și alte informații de clasificare pentru setul de date specific, clasificator și atributele alese.",
	"@@Classify_Raster_tag0@@": "Setul de date raster pe care îl doriți pentru clasificare.",
	"@@Classify_Raster2_tag0@@": "Un set de date raster auxiliar opțional pentru incorporarea în clasificator, precum o imagine segmentată, o imagine multispectrală sau date de elevație, care se utilizează pentru generarea unei definiții de clasificare mai robuste pentru setul dvs. de date. Setul de date raster pentru acest parametru trebuie să corespundă celui utilizat pentru crearea fișierului de definire a clasificatorului Esri pentru intrare.",
	"@@Clip_Clipping-Geometry-or-Raster_tag0@@": "Se pot utiliza următoarele pentru specificarea extinderii de decupare:",
	"@@Clip_Clipping-Geometry-or-Raster_tag1@@": "<strong>Raster cu decupaj</strong>--Extinderea rasterului cu decupaj",
	"@@Clip_Clipping-Geometry-or-Raster_tag3@@": "<strong>Extindere personalizată</strong>--coordonate minime și maxime X și Y",
	"@@Clip_Clipping-Geometry-or-Raster_tag5@@": "<strong>Extinderea actuală a hărții</strong>--Extinderea afișajului actual al hărții",
	"@@Clip_Clipping-Raster_tag0@@": "Stratul tematic raster utilizat pentru decupare.",
	"@@Clip_Clipping-Type_tag0@@": "Specificați dacă doriți să păstrați zona în interiorul sau în afara geometriei de decupare.",
	"@@Clip_Clipping-Type_tag1@@": "<strong>Decupaj în interior</strong>--Imaginile din spațiile delimitate de decupare vor fi eliminate.",
	"@@Clip_Clipping-Type_tag3@@": "<strong>Decupaj în exterior</strong>--Imaginile din afara spațiilor delimitate de decupare vor fi eliminate.",
	"@@Clip_Custom-Extent_tag0@@": "Specificați cele patru coordonate care definesc extinderea casetei de legătură, utilizată pentru decuparea rasterului.",
	"@@Clip_Output-Extent_tag0@@": "Coordonatele x și y ale spațiului actual de decupare.",
	"@@Clip_Output-Extent_tag1@@": "Butonul <strong>Capturează Extinderea Actuală a Hărții</strong> utilizează extinderea afișajului pentru harta actuală.",
	"@@Clip_Raster_tag0@@": "Stratul tematic raster de intrare.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag0@@": "Atunci se selectează, datele sunt decupate în funcție de geometria clasei de obiecte spațiale specificate.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag1@@": "Nebifat--Funcția utilizează geometria de decupare specificată de <strong>Dreptunghi</strong>. Aceasta este setarea implicită.",
	"@@Clip_Use-Input-Features-for-Clipping-Geometry_tag4@@": "Bifat--Funcția utilizează geometria de decupare definită de o clasă de obiecte spațiale.",
	"@@Color-Model-Conversion_Conversion-Type_tag0@@": "Tipul de conversie a culorilor de efectuat:",
	"@@Color-Model-Conversion_Conversion-Type_tag1@@": "De la HSV la RGB",
	"@@Color-Model-Conversion_Conversion-Type_tag2@@": "De la RGB la HSV",
	"@@Color-Model-Conversion_Raster_tag0@@": "Rasterul de intrare.",
	"@@Colormap_Color-Ramp_tag0@@": "Alegeți o rampă de culoare preexistentă.",
	"@@Colormap_Color-Scheme-Type_tag0@@": "Alegeți tipul schemei de culori pentru redarea rasterului de intrare",
	"@@Colormap_Color-Scheme-Type_tag1@@": "Rampă de culoare--Utilizați o rampă de culoare",
	"@@Colormap_Color-Scheme-Type_tag2@@": "Hartă color--Utilizați o hartă color preexistentă.",
	"@@Colormap_Colormap_tag0@@": "Sunt disponibile următoarele hărți color în lista verticală:",
	"@@Colormap_Colormap_tag1@@": "Elevație--O hartă color care se schimbă progresiv, de la bleu la mov și apoi la negru.",
	"@@Colormap_Colormap_tag2@@": "Gri--O hartă color care se schimbă progresiv, de la negru la alb.",
	"@@Colormap_Colormap_tag7@@": "Hillshade-O hartă de culoare cu nuanțe de gri pentru a vizualiza o reprezentare 3D a suprafeței de teren, cu poziția relativă a soarelui luată în calcul pentru umbrirea imaginii.",
	"@@Colormap_Colormap_tag3@@": "NDVI--O hartă color pentru vizualizarea vegetației. Valorile apropiate de zero sunt albastre. Valorile scăzute sunt maro. Apoi culorile se schimbă progresiv, de la roșu la portocaliu, verde și negru, pe măsură ce indicele de vegetație trece de la scăzut la ridicat.",
	"@@Colormap_Colormap_tag4@@": "NDVI2--O hartă color pentru vizualizarea vegetației. Valorile scăzute sunt reprezentate cu alb și verde. Apoi culorile se schimbă de la gri la mov, violet, albastru închis și negru, pe măsură ce indicele de vegetație trece de la scăzut la ridicat.",
	"@@Colormap_Colormap_tag5@@": "NDVI3--O hartă color pentru vizualizarea vegetației. Valorile apropiate de zero sunt albastre. Apoi culorile se schimbă progresiv, de la roșu la portocaliu și verde, pe măsură ce indicele de vegetație trece de la scăzut la ridicat.",
	"@@Colormap_Colormap_tag6@@": "Aleatoriu--O hartă color aleatorie.",
	"@@Colormap_Raster_tag0@@": "Rasterul de intrare.",
	"@@Colormap-To-RGB_Raster_tag0@@": "Rasterul de hartă color pentru intrare.",
	"@@Complex_Raster_tag0@@": "Rasterul de intrare.",
	"@@Composite-Bands_Rasters_tag0@@": "Folosiți lista verticală sau butonul <strong>Căutare</strong> pentru a alege intrările de raster.",
	"@@Composite-Bands_cellsizetype_tag0@@": "<p>Alegeți ce dimensiune de celulă să utilizați în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt la fel, toate opțiunile vor da aceleași rezultate.</p><ul><li>Prima--Utilizați prima dimensiune a celulelor rasterelor de intrare.</li><li>Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.</li><li>Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.</li><li>Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.</li><li>Ultima--Utilizați ultima dimensiune a celulelor rasterelor de intrare.</li></ul>",
	"@@Con-function_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Con-function_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Con-function_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Con-function_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Con-function_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Con-function_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Con_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Con_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Con_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Con_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Con_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Con_False-Raster_tag0@@": "Intrarea ale cărei valori vor fi utilizate ca valori ale pixelilor de ieșire dacă condiția este falsă. Poate fi un raster de tip număr întreg, cu virgulă mobilă sau o valoare constantă.",
	"@@Con_Raster_tag0@@": "Rasterul de intrare care reprezintă rezultatul Boolean al unei funcții raster matematice logice. Valorile pot fi între 1 (pentru adevărat) sau 0 (pentru fals). Poate fi un raster de tip număr întreg sau cu virgulă mobilă.",
	"@@Con_True-Raster_tag0@@": "Intrarea ale cărei valori vor fi utilizate ca valori ale pixelilor de ieșire dacă condiția este adevărată. Poate fi un raster de tip număr întreg, cu virgulă mobilă sau o valoare constantă.",
	"@@Constant_Constant_tag0@@": "Valoarea constantei care se va adăuga la rasterul virtual.",
	"@@Constant_Raster-Info_tag0@@": "Folosiți butonul <strong>Încarcă raster șablon</strong> pentru a încărca un șablon dintr-un director sau portal.",
	"@@Contour_Adaptive-Smoothing_tag0@@": "Gradul de netezire care se aplică pentru linia de contur. Valoarea implicită este 2,5.",
	"@@Contour_Adaptive-Smoothing_tag1@@": "O valoare mai mică are ca rezultat o linie de contur cu mai multă granularitate și mai puțină netezire, în timp ce o valoare mai mare are ca rezultat o linie de contur cu mai multă netezire, care pare mai puțin crestată.",
	"@@Contour_Contour-Interval_tag0@@": "Diferența de altitudine între liniile de contur.",
	"@@Contour_Contour-Interval_tag1@@": "Este utilizat un interval de contur mic în zonele relativ plane, în timp ce pe teren montan sau variabil se utilizează intervale de contur mai mari.",
	"@@Contour_Contour-Type_tag0@@": "Tipul de contur de creat:",
	"@@Contour_Contour-Type_tag1@@": "<strong>Umplere contur</strong>--Umple zona dintre fiecare linie de contur cu valoarea de elevație cuantificată.",
	"@@Contour_Contour-Type_tag3@@": "<strong>Linii de contur</strong>--Îmbină puncte de elevație egală pentru a crea o linie care reprezintă elevația constantă.",
	"@@Contour_Contour-Type_tag5@@": "<strong>Doar suprafață netedă</strong>--Netezește stratul tematic de elevație de intrare, dar nu efectuează contururi.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag0@@": "Conturul de indice, care este reprezentat ca linie îngroșată.",
	"@@Contour_Nth-Contour-Line-In-Bold_tag1@@": "Valoarea implicită este 5; astfel, fiecare a 5-a linie de contur este aldină.",
	"@@Contour_Number-Of-Contours_tag0@@": "Numărul de contururi de generat la afișare. Această funcție ajustează dinamic intervalul de contur pentru încadrarea terenului pe ecran, menținând intervale standardizate, precum 1, 5, 10 etc.",
	"@@Contour_Raster_tag0@@": "Un set de date de elevație raster pentru o bandă unică.",
	"@@Contour_Z-Base_tag0@@": "Valoarea conturului de bază. Contururile sunt generate peste și sub această valoare, după cum este necesar, pentru a acoperi întregul interval de valori al rasterului de intrare. Valoarea implicită este 0.",
	"@@Contour_Z-Base_tag1@@": "Valoarea 0 reprezintă deseori nivelul mediu al mării, în funcție de setul de date de elevație sursă.",
	"@@Contour_Z-Factor_tag0@@": "Factorul de conversie unitar utilizat la generarea contururilor. Valoarea implicită este 1.",
	"@@Contour_Z-Factor_tag1@@": "Liniile de contur sunt generate pe baza valorilor z din rasterul de intrare, care sunt deseori măsurate în metri sau picioare. Cu valoarea implicită 1, contururile vor avea aceleași unități ca valorile z ale rasterului de intrare. Pentru a crea contururi cu o unitate diferită de valorile z, setați o valoare corespunzătoare pentru factorul z. Rețineți că nu este necesar ca unitățile z de suprafață și x și y de teren să fie consecvente pentru acest instrument.",
	"@@Contour_Z-Factor_tag2@@": "De exemplu, dacă valorile de elevație din rasterul de intrare sunt exprimate în picioare, dar doriți generarea contururilor în funcție de unitățile de măsură, setați factorul z la 0,3048 (1 picior =0,3048 metri).",
	"@@Contrast-and-Brightness_Brightness-Offset_tag0@@": "Ajustați luminozitatea stratului tematic raster.",
	"@@Contrast-and-Brightness_Brightness-Offset_tag1@@": "Puteți utiliza glisorul pentru a modifica decalajul de luminozitate sau puteți introduce o anumită valoare.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag0@@": "Ajustați contrastul stratului tematic raster.",
	"@@Contrast-and-Brightness_Contrast-Offset_tag1@@": "Puteți utiliza glisorul pentru a modifica decalajul de contrast sau puteți introduce o anumită valoare.",
	"@@Contrast-and-Brightness_Raster_tag0@@": "Rasterul de intrare pentru care editați luminozitatea și contrastul.",
	"@@Convolution_kernel_tag0@@": "<p>Acest tabel afișează modul în care fiecare pixel va fi ponderat în procesul de filtrare. Acest tabel poate fi editat dacă doriți<strong>Utilizator definit</strong>ca<strong>Tip</strong>.</p>",
	"@@Convolution_Raster_tag0@@": "Setul de date raster de intrare.",
	"@@Convolution_Type_tag0@@": "Selectați tipul de filtrare pe care doriți să o efectuați. Există opțiuni pentru claritatea, estomparea și detectarea marginilor sau puteți defini propriul filtru bazat pe nucleu.",
	"@@Corridor_Distance-Raster-1_tag0@@": "Primul raster de distanță de intrare. Ar trebui să fie o ieșire cost-distanță acumulată din Cost distanță sau Cale distanță.",
	"@@Corridor_Distance-Raster-2_tag0@@": "Al doilea raster de distanță de intrare. Ar trebui să fie o ieșire cost-distanță acumulată din Cost distanță sau Cale distanță.",
	"@@Cos_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Cos_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Cos_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Cos_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Cos_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Cos_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Cos_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Cos_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Cos_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Cos_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Cos_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Cos_Raster_tag0@@": "Intrarea pentru care se calculează valorile pentru cosinus.",
	"@@CosH_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@CosH_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@CosH_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@CosH_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@CosH_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@CosH_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@CosH_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@CosH_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@CosH_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@CosH_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@CosH_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@CosH_Raster_tag0@@": "Intrarea pentru care se calculează valorile hiperbolice pentru cosinus.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Acest parametru simulează creșterea efortului de a face față costurilor pe măsură ce costul acumulat crește. Se utilizează pentru a modela oboseala persoanei care călătorește. Costul acumulat în creștere pentru a ajunge la o celulă este înmulțit cu rata de rezistență și adăugat la costul de deplasare la celula subsecventă.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Este o versiune modificată a formulei dobânzii compuse care se utilizează pentru a calcula costul aparent de deplasare printr-o celulă. Pe măsură ce valoarea ratei de rezistență crește, crește și costul pentru celulele vizitate mai târziu. Cu cât este mai mare rata de rezistență, cu atât este mai mare costul de deplasare la următoarea celulă, fiind compusă pentru fiecare mișcare subsecventă. Având în vedere că rata de rezistență este similară unei rate compuse și că, în general, valorile costului acumulat sunt foarte mari, sunt sugerate rate de rezistență mici, precum 0,005 sau chiar mai mici, în funcție de valoarea costului acumulat.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Cost-Allocation_Accumulative-Cost-Resistance-Rate_tag3@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Cost-Allocation_Capacity_tag0@@": "Definește capacitatea costului pentru persoana care călătorește pentru o sursă. Calculele de cost continuă pentru fiecare sursă până când este atinsă capacitatea specificată.",
	"@@Cost-Allocation_Capacity_tag1@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Cost-Allocation_Capacity_tag2@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Cost-Allocation_Cost-Raster_tag0@@": "Un raster de intrare necesar, care definește costul sau impedanța deplasării planimetrice prin fiecare celulă. Valoarea din fiecare amplasare a celulei reprezintă distanța cost-pe-unitate pentru deplasarea prin aceasta. Fiecare valoare de amplasare a celulei este înmulțită cu rezoluția celulei și se compensează deplasarea pe diagonală pentru a obține costul total al deplasării prin celulă.",
	"@@Cost-Allocation_Cost-Raster_tag1@@": "Valorile <strong>Raster de Cost</strong> poate fi un număr întreg sau o virgulă mobilă, dar nu pot fi negative sau zero.",
	"@@Cost-Allocation_Maximum-Distance_tag0@@": "Limita pe care valorile de cost acumulate nu o pot depăși. În cazul în care distanța-cost acumulată depășește această valoare, valoarea rezultată pentru amplasarea celulei va fi ${NoData}. Distanța maximă definește extinderea pentru care sunt calculate distanțele-cost acumulate pentru distanță. Distanța implicită este reprezentată de extinderea rasterului de ieșire.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Un multiplicator care se aplică valorilor de cost.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Acest parametru permite controlul modului de deplasare sau magnitudinea pentru o sursă. Cu cât multiplicatorul este mai mare, cu atât costul de deplasare prin fiecare celulă este mai mare.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Valorile trebuie să fie mai mari decât zero. Valoarea implicită este 1.",
	"@@Cost-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Cost-Allocation_Source-Field_tag0@@": "Câmpul utilizat pentru alocarea valorilor la amplasările sursă. Trebuie să fie un tip de număr întreg. Dacă a fost stabilit <strong>Rasterul Valoare</strong>, valorile din acea intrare vor avea prioritate față de orice setare pentru <strong>Câmpul Sursă</strong>.",
	"@@Cost-Allocation_Source-Raster_tag0@@": "Rasterul de intrare necesar pentru amplasările sursă.",
	"@@Cost-Allocation_Source-Raster_tag1@@": "Acesta este un raster care identifică celulele sau amplasările pe baza cărora se calculează cea mai mică valoare cost-distanță pentru fiecare amplasare de celulă de ieșire.",
	"@@Cost-Allocation_Source-Raster_tag2@@": "Dacă intrarea <strong>Raster Sursă</strong> este o virgulă mobilă, <strong>Rasterul Valoare</strong> trebuie setat, iar acesta trebuie să fie un număr întreg. <strong>Rasterul Valoare</strong> va avea prioritate față de orice setare a <strong>Câmpului Sursă</strong>.",
	"@@Cost-Allocation_Start-Cost_tag0@@": "Costul inițial de la care pornesc calculele de cost. Acest parametru permite specificarea costului fix asociat unei surse. În loc să înceapă la un cost cu valoarea 0, algoritmul de cost va începe cu valoarea specificată.",
	"@@Cost-Allocation_Start-Cost_tag1@@": "Valoarea trebuie să fie cel puțin zero. Valoarea implicită este 0.",
	"@@Cost-Allocation_Travel-Direction_tag0@@": "Definește direcția de deplasare la aplicarea ratei de rezistență a sursei și costul inițial al sursei.",
	"@@Cost-Allocation_Travel-Direction_tag1@@": "<strong>De la sursă</strong>----Rata de rezistență a sursei și costul inițial al sursei vor fi aplicate începând cu sursa de intrare și ajungând la celule care nu aparțin sursei. Aceasta este setarea implicită.",
	"@@Cost-Allocation_Travel-Direction_tag3@@": "<strong>La sursă</strong>----Rata de rezistență a sursei și costul inițial al sursei vor fi aplicate începând cu fiecare celulă care nu aparține sursei și ajungând la sursa de intrare.",
	"@@Cost-Allocation_Travel-Direction_tag5@@": "Fie specificați cuvântul-cheie <strong>De la sursă</strong> sau <strong>La sursă</strong>, care va fi aplicat tuturor surselor, fie specificați un câmp din <strong>Rasterul Sursă</strong> care include cuvintele cheie pentru a identifica direcția de deplasare pentru fiecare sursă. Câmpul respectiv trebuie să conțină șirul ${FROM_SOURCE} sau ${TO_SOURCE}.",
	"@@Cost-Allocation_Value-Raster_tag0@@": "Rasterul de tip număr întreg care identifică valorile de zonă care trebuie să se utilizeze pentru fiecare amplasare sursă de intrare. Pentru fiecare celulă de localizare a sursei, valoarea definită de <strong>Rasterul Valoare</strong> va fi atribuită tuturor celulelor alocate localizării sursă pentru calcul. <strong>Rasterul Valoare</strong> va avea prioritate față de orice setare pentru <strong>Câmpul Sursă</strong>.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Acest parametru simulează creșterea efortului de a face față costurilor pe măsură ce costul acumulat crește. Se utilizează pentru a modela oboseala persoanei care călătorește. Costul acumulat în creștere pentru a ajunge la o celulă este înmulțit cu rata de rezistență și adăugat la costul de deplasare la celula subsecventă.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Este o versiune modificată a formulei dobânzii compuse care se utilizează pentru a calcula costul aparent de deplasare printr-o celulă. Pe măsură ce valoarea ratei de rezistență crește, crește și costul pentru celulele vizitate mai târziu. Cu cât este mai mare rata de rezistență, cu atât este mai mare costul de deplasare la următoarea celulă, fiind compusă pentru fiecare mișcare subsecventă. Având în vedere că rata de rezistență este similară unei rate compuse și că, în general, valorile costului acumulat sunt foarte mari, sunt sugerate rate de rezistență mici, precum 0,005 sau chiar mai mici, în funcție de valoarea costului acumulat.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Cost-Back-Link_Accumulative-Cost-Resistance-Rate_tag3@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Cost-Back-Link_Capacity_tag0@@": "Definește capacitatea costului pentru persoana care călătorește pentru o sursă. Calculele de cost continuă pentru fiecare sursă până când este atinsă capacitatea specificată.",
	"@@Cost-Back-Link_Capacity_tag1@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Cost-Back-Link_Capacity_tag2@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Cost-Back-Link_Cost-Raster_tag0@@": "Un raster de intrare necesar, care definește costul sau impedanța deplasării planimetrice prin fiecare celulă. Valoarea din fiecare amplasare a celulei reprezintă distanța cost-pe-unitate pentru deplasarea prin aceasta. Fiecare valoare de amplasare a celulei este înmulțită cu rezoluția celulei și se compensează deplasarea pe diagonală pentru a obține costul total al deplasării prin celulă.",
	"@@Cost-Back-Link_Cost-Raster_tag1@@": "Valorile <strong>Raster de Cost</strong> poate fi un număr întreg sau o virgulă mobilă, dar nu pot fi negative sau zero.",
	"@@Cost-Back-Link_Maximum-Distance_tag0@@": "Limita pe care valorile de cost acumulate nu o pot depăși. În cazul în care distanța-cost acumulată depășește această valoare, valoarea rezultată pentru amplasarea celulei va fi NoData. Distanța maximă definește extinderea pentru care sunt calculate distanțele-cost acumulate pentru distanță. Distanța implicită este reprezentată de extinderea rasterului de ieșire.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Un multiplicator care se aplică valorilor de cost.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Acest parametru permite controlul modului de deplasare sau magnitudinea pentru o sursă. Cu cât multiplicatorul este mai mare, cu atât costul de deplasare prin fiecare celulă este mai mare.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Valorile trebuie să fie mai mari decât zero. Valoarea implicită este 1.",
	"@@Cost-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Cost-Back-Link_Source-Raster_tag0@@": "Rasterul de intrare necesar pentru amplasările sursă.",
	"@@Cost-Back-Link_Source-Raster_tag1@@": "Acesta este un raster care identifică celulele sau amplasările pe baza cărora se calculează cea mai mică valoare cost-distanță pentru fiecare amplasare de celulă de ieșire.",
	"@@Cost-Back-Link_Start-Cost_tag0@@": "Costul inițial de la care pornesc calculele de cost. Acest parametru permite specificarea costului fix asociat unei surse. În loc să înceapă la un cost cu valoarea 0, algoritmul de cost va începe cu valoarea specificată.",
	"@@Cost-Back-Link_Start-Cost_tag1@@": "Valoarea trebuie să fie cel puțin zero. Valoarea implicită este 0.",
	"@@Cost-Back-Link_Travel-Direction_tag0@@": "Definește direcția de deplasare la aplicarea ratei de rezistență a sursei și costul inițial al sursei.",
	"@@Cost-Back-Link_Travel-Direction_tag1@@": "<strong>De la sursă</strong>----Rata de rezistență a sursei și costul inițial al sursei vor fi aplicate începând cu sursa de intrare și ajungând la celule care nu aparțin sursei. Aceasta este setarea implicită.",
	"@@Cost-Back-Link_Travel-Direction_tag3@@": "<strong>La sursă</strong>----Rata de rezistență a sursei și costul inițial al sursei vor fi aplicate începând cu fiecare celulă care nu aparține sursei și ajungând la sursa de intrare.",
	"@@Cost-Back-Link_Travel-Direction_tag5@@": "Fie specificați cuvântul-cheie <strong>De la sursă</strong> sau <strong>La sursă</strong>, care va fi aplicat tuturor surselor, fie specificați un câmp din <strong>Rasterul Sursă</strong> care include cuvintele cheie pentru a identifica direcția de deplasare pentru fiecare sursă. Câmpul respectiv trebuie să conțină șirul ${FROM_SOURCE} sau ${TO_SOURCE}.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Acest parametru simulează creșterea efortului de a face față costurilor pe măsură ce costul acumulat crește. Se utilizează pentru a modela oboseala persoanei care călătorește. Costul acumulat în creștere pentru a ajunge la o celulă este înmulțit cu rata de rezistență și adăugat la costul de deplasare la celula subsecventă.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Este o versiune modificată a formulei dobânzii compuse care se utilizează pentru a calcula costul aparent de deplasare printr-o celulă. Pe măsură ce valoarea ratei de rezistență crește, crește și costul pentru celulele vizitate mai târziu. Cu cât este mai mare rata de rezistență, cu atât este mai mare costul de deplasare la următoarea celulă, fiind compusă pentru fiecare mișcare subsecventă. Având în vedere că rata de rezistență este similară unei rate compuse și că, în general, valorile costului acumulat sunt foarte mari, sunt sugerate rate de rezistență mici, precum 0,005 sau chiar mai mici, în funcție de valoarea costului acumulat.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Cost-Distance_Accumulative-Cost-Resistance-Rate_tag3@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Cost-Distance_Capacity_tag0@@": "Definește capacitatea costului pentru persoana care călătorește pentru o sursă. Calculele de cost continuă pentru fiecare sursă până când este atinsă capacitatea specificată.",
	"@@Cost-Distance_Capacity_tag1@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Cost-Distance_Capacity_tag2@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Cost-Distance_Cost-Raster_tag0@@": "Un raster de intrare necesar, care definește costul sau impedanța deplasării planimetrice prin fiecare celulă. Valoarea din fiecare amplasare a celulei reprezintă distanța cost-pe-unitate pentru deplasarea prin aceasta. Fiecare valoare de amplasare a celulei este înmulțită cu rezoluția celulei și se compensează deplasarea pe diagonală pentru a obține costul total al deplasării prin celulă.",
	"@@Cost-Distance_Cost-Raster_tag1@@": "Valorile <strong>Raster de Cost</strong> poate fi un număr întreg sau o virgulă mobilă, dar nu pot fi negative sau zero.",
	"@@Cost-Distance_Maximum-Distance_tag0@@": "Limita pe care valorile de cost acumulate nu o pot depăși. În cazul în care distanța-cost acumulată depășește această valoare, valoarea rezultată pentru amplasarea celulei va fi NoData. Distanța maximă definește extinderea pentru care sunt calculate distanțele-cost acumulate pentru distanță. Distanța implicită este reprezentată de extinderea rasterului de ieșire.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Un multiplicator care se aplică valorilor de cost.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Acest parametru permite controlul modului de deplasare sau magnitudinea pentru o sursă. Cu cât multiplicatorul este mai mare, cu atât costul de deplasare prin fiecare celulă este mai mare.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Valorile trebuie să fie mai mari decât zero. Valoarea implicită este 1.",
	"@@Cost-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Cost-Distance_Source-Raster_tag0@@": "Rasterul de intrare necesar pentru amplasările sursă.",
	"@@Cost-Distance_Source-Raster_tag1@@": "Acesta este un raster care identifică celulele sau amplasările pe baza cărora se calculează cea mai mică valoare cost-distanță pentru fiecare amplasare de celulă de ieșire.",
	"@@Cost-Distance_Start-Cost_tag0@@": "Costul inițial de la care pornesc calculele de cost. Acest parametru permite specificarea costului fix asociat unei surse. În loc să înceapă la un cost cu valoarea 0, algoritmul de cost va începe cu valoarea specificată.",
	"@@Cost-Distance_Start-Cost_tag1@@": "Valoarea trebuie să fie cel puțin zero. Valoarea implicită este 0.",
	"@@Cost-Distance_Travel-Direction_tag0@@": "Definește direcția de deplasare la aplicarea ratei de rezistență a sursei și costul inițial al sursei.",
	"@@Cost-Distance_Travel-Direction_tag1@@": "<strong>De la sursă</strong>----Rata de rezistență a sursei și costul inițial al sursei vor fi aplicate începând cu sursa de intrare și ajungând la celule care nu aparțin sursei. Aceasta este setarea implicită.",
	"@@Cost-Distance_Travel-Direction_tag3@@": "<strong>La sursă</strong>----Rata de rezistență a sursei și costul inițial al sursei vor fi aplicate începând cu fiecare celulă care nu aparține sursei și ajungând la sursa de intrare.",
	"@@Cost-Distance_Travel-Direction_tag5@@": "Fie specificați cuvântul-cheie <strong>De la sursă</strong> sau <strong>La sursă</strong>, care va fi aplicat tuturor surselor, fie specificați un câmp din <strong>Rasterul Sursă</strong> care include cuvintele cheie pentru a identifica direcția de deplasare pentru fiecare sursă. Câmpul respectiv trebuie să conțină șirul ${FROM_SOURCE} sau ${TO_SOURCE}.",
	"@@Curvature_Curvature-Type_tag0@@": "Tipul de curbură accentuează diferite aspecte ale pantei. Există trei opțiuni de curbură:",
	"@@Curvature_Curvature-Type_tag1@@": "Proiecție la sol--este perpendiculară pe direcția pantei maxime. Afectează convergența și divergența fluxului pe o suprafață.",
	"@@Curvature_Curvature-Type_tag2@@": "Profil--este paralelă pe pantă și indică direcția pantei maxime. Afectează accelerarea și decelerarea fluxului pe suprafață.",
	"@@Curvature_Curvature-Type_tag3@@": "Standard--Combină  curburile <strong>Profil</strong> și <strong>Planform</strong>.",
	"@@Curvature_DEM_tag0@@": "Un raster de model digital de elevare (DEM).",
	"@@Curvature_Z-Factor_tag0@@": "Factorul z ajustează unitățile de măsură pentru unitățile z atunci când sunt diferite de unitățile x și y ale suprafeței de intrare. Dacă unitățile x și y și z au aceleași unități de măsură, factorul z trebuie setat la 1. Valorile z ale suprafeței de intrare sunt înmulțite cu factorul z atunci când se calculează suprafața de ieșire finală. De exemplu, dacă unitățile z sunt exprimate în picioare și unitățile x și y în metri, ar trebui să utilizați un factor z de 0,3048 pentru a converti unitățile z din picioare în metri, având în vedere că 1 picior = 0,3048 metri.",
	"@@Divide_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Divide_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Divide_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Divide_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Divide_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Divide_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Divide_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Divide_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Divide_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Divide_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Divide_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Divide_Raster_tag0@@": "Intrarea a cărei valoare va fi împărțită la cea de-a doua intrare.",
	"@@Divide_Raster_tag1@@": "Un număr poate fi utilizat ca intrare pentru acest parametru, dacă este specificat un raster pentru ${Raster2}.",
	"@@Divide_Raster2_tag0@@": "Intrarea la a cărei valoare va fi împărțită prima intrare.",
	"@@Divide_Raster2_tag1@@": "Un număr poate fi utilizat ca intrare pentru acest parametru, dacă este specificat un raster pentru ${Raster}.",
	"@@Elevation-Void-Fill_DEM_tag0@@": "DEM de intrare.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag0@@": "Valoarea lățimii maxime a vidului este utilizată pentru a specifica cea mai mare mărime a unui vid pe care doriți să-l umpleți. Dacă lățimea sau înălțimea casetei de legătură din jurul vidului este mai mare decât valoarea maximă a vidului, vidul nu este umplut. Unitățile acestui parametru sunt aceleași ca unitățile utilizate în sistemul de referință spațială a datelor.",
	"@@Elevation-Void-Fill_Max-Void-Width_tag1@@": "Dacă acest parametru este gol sau are valoarea ${0}, nu va fi utilizată lățimea maximă, iar toate vidurile vor fi umplute. Valoarea ${-1} înseamnă că vidul nu va fi umplut.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag0@@": "Va fi utilizată raza maximă de căutare pentru umplerea vidului. Un vid care se află la distanță de orice pixel valid decât această valoare limită va rămâne vid. Unitățile acestui parametru sunt aceleași ca unitățile utilizate în sistemul de referință spațială a datelor.",
	"@@Elevation-Void-Fill_Short-Range-IDW-Radius_tag1@@": "Dacă valoarea acestui parametru este goală, ${0} sau ${-1}, acest parametru nu va fi utilizat.",
	"@@Equal-to_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Equal-to_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Equal-to_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Equal-to_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Equal-to_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Equal-to_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Equal-to_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Equal-to_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Equal-to_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Equal-to_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Equal-to_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Equal-to_Raster_tag0@@": "Intrarea care va fi utilizată pentru compararea egalității de către a doua intrare.",
	"@@Equal-to_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Equal-to_Raster2_tag0@@": "Intrarea care va fi utilizată pentru compararea egalității de către prima intrare.",
	"@@Equal-to_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Euclidean-Allocation_Cellsize_tag0@@": "Dimensiunea celulei la care va fi creat rasterul de ieșire.",
	"@@Euclidean-Allocation_Cellsize_tag1@@": "Dacă dimensiunea celulei a fost stabilită în mod explicit în <strong>Mediile de Analiză</strong>, aceasta va fi dimensiunea implicită a celulei. Dacă nu a fost setată, dimensiunea celulei de ieșire va fi aceeași cu <strong>Rasterul Sursă</strong>.",
	"@@Euclidean-Allocation_Distance-Method_tag0@@": "Stabilește dacă distanța se calculează utilizând o metodă în plan (pământ plat) sau una geodezică (elipsoid).",
	"@@Euclidean-Allocation_Distance-Method_tag1@@": "Geodezic--Cea mai scurtă linie dintre două puncte de pe suprafața pământului pe un sferoid (elipsoid). Prin urmare, indiferent de proiecția de intrare sau de ieșire, rezultatele nu se schimbă. O utilizare a liniei geodezice este determinarea cele mai scurte distanțe dintre două orașe pentru un traseu de zbor al unui avion. Aceasta mai este cunoscută și drept linie circulară mare, dacă este bazată pe o sferă și nu pe un elipsoid.",
	"@@Euclidean-Allocation_Distance-Method_tag2@@": "Planar--Măsurătorile planare coordonate carteziene 2D pentru a calcula lungimea și suprafața. Opțiunea este disponibilă numai la măsurarea în cadrul unui sistem de coordonate proiectate, iar planul 2D al sistemului de coordonate respectiv va fi utilizat ca bază pentru măsurători.",
	"@@Euclidean-Allocation_Maximum-Distance_tag0@@": "Definește distanța limită în cadrul căreia va fi determinată cea mai apropiată sursă. Dacă distanța față de cea mai apropiată sursă depășește această valoare, ieșirea pentru celula respectivă va fi ${NoData}.",
	"@@Euclidean-Allocation_Maximum-Distance_tag1@@": "Distanța implicită este reprezentată de extinderea rasterului de ieșire.",
	"@@Euclidean-Allocation_Raster-Barriers_tag0@@": "Rasterul care definește barierele.",
	"@@Euclidean-Allocation_Raster-Barriers_tag1@@": "Setul de date trebuie să conțină ${NoData} acolo unde nu există bariere. Barierele sunt reprezentate de valori valide, inclusiv zero.",
	"@@Euclidean-Allocation_Raster-Barriers_tag2@@": "Barierele pot fi definite de un raster de tip număr întreg sau cu virgulă mobilă.",
	"@@Euclidean-Allocation_Source-Field_tag0@@": "Câmpul utilizat pentru alocarea valorilor la amplasările sursă. Trebuie să fie un tip de număr întreg. Dacă a fost stabilit <strong>Rasterul Valoare</strong>, valorile din acea intrare vor avea prioritate față de orice setare pentru <strong>Câmpul Sursă</strong>.",
	"@@Euclidean-Allocation_Source-Raster_tag0@@": "Un raster de intrare necesar, care identifică amplasările sursă. Bazat pe distanța euclidiană, va fi determinată cea mai apropiată sursă pentru fiecare celulă din ieșire",
	"@@Euclidean-Allocation_Source-Raster_tag1@@": "Tipul de intrare poate fi un număr întreg sau un tip cu virgulă mobilă.",
	"@@Euclidean-Allocation_Value-Raster_tag0@@": "Rasterul de tip număr întreg care identifică valorile de zonă care trebuie să se utilizeze pentru fiecare amplasare sursă de intrare. Pentru fiecare celulă de localizare a sursei, valoarea definită de <strong>Rasterul Valoare</strong> va fi atribuită tuturor celulelor alocate localizării sursă pentru calcul. <strong>Rasterul Valoare</strong> va avea prioritate față de orice setare pentru <strong>Câmpul Sursă</strong>.",
	"@@Euclidean-Direction_Cellsize_tag0@@": "Dimensiunea celulei la care va fi creat rasterul de ieșire.",
	"@@Euclidean-Direction_Cellsize_tag1@@": "Dacă dimensiunea celulei a fost stabilită în mod explicit în <strong>Mediile de Analiză</strong>, aceasta va fi dimensiunea implicită a celulei. Dacă nu a fost setată, dimensiunea celulei de ieșire va fi aceeași cu <strong>Rasterul Sursă</strong>.",
	"@@Euclidean-Direction_Distance-Method_tag0@@": "Stabilește dacă distanța se calculează utilizând o metodă în plan (pământ plat) sau una geodezică (elipsoid).",
	"@@Euclidean-Direction_Distance-Method_tag1@@": "Geodezic--Cea mai scurtă linie dintre două puncte de pe suprafața pământului pe un sferoid (elipsoid). Prin urmare, indiferent de proiecția de intrare sau de ieșire, rezultatele nu se schimbă. O utilizare a liniei geodezice este determinarea cele mai scurte distanțe dintre două orașe pentru un traseu de zbor al unui avion. Aceasta mai este cunoscută și drept linie circulară mare, dacă este bazată pe o sferă și nu pe un elipsoid.",
	"@@Euclidean-Direction_Distance-Method_tag2@@": "Planar--Măsurătorile planare coordonate carteziene 2D pentru a calcula lungimea și suprafața. Opțiunea este disponibilă numai la măsurarea în cadrul unui sistem de coordonate proiectate, iar planul 2D al sistemului de coordonate respectiv va fi utilizat ca bază pentru măsurători.",
	"@@Euclidean-Direction_Maximum-Distance_tag0@@": "Definește distanța limită în cadrul căreia va fi calculată direcția către cea mai apropiată sursă. Dacă distanța față de cea mai apropiată sursă depășește această valoare, ieșirea pentru celula respectivă va fi ${NoData}.",
	"@@Euclidean-Direction_Maximum-Distance_tag1@@": "Distanța implicită este reprezentată de extinderea rasterului de ieșire.",
	"@@Euclidean-Direction_Raster-Barriers_tag0@@": "Rasterul care definește barierele.",
	"@@Euclidean-Direction_Raster-Barriers_tag1@@": "Setul de date trebuie să conțină NoData acolo unde nu există bariere. Barierele sunt reprezentate de valori valide, inclusiv zero.",
	"@@Euclidean-Direction_Raster-Barriers_tag2@@": "Barierele pot fi definite de un raster de tip număr întreg sau cu virgulă mobilă.",
	"@@Euclidean-Direction_Source-Raster_tag0@@": "Un raster de intrare necesar, care identifică celulele sau amplasările pe baza cărora se calculează direcția euclidiană pentru fiecare amplasare de celulă de ieșire.",
	"@@Euclidean-Direction_Source-Raster_tag1@@": "Tipul de intrare poate fi un număr întreg sau un tip cu virgulă mobilă.",
	"@@Euclidean-Distance_Cellsize_tag0@@": "Dimensiunea celulei la care va fi creat rasterul de ieșire.",
	"@@Euclidean-Distance_Cellsize_tag1@@": "Dacă dimensiunea celulei a fost stabilită în mod explicit în <strong>Mediile de Analiză</strong>, aceasta va fi dimensiunea implicită a celulei. Dacă nu a fost setată, dimensiunea celulei de ieșire va fi aceeași cu <strong>Rasterul Sursă</strong>.",
	"@@Euclidean-Distance_Distance-Method_tag0@@": "Stabilește dacă distanța se calculează utilizând o metodă în plan (pământ plat) sau una geodezică (elipsoid).",
	"@@Euclidean-Distance_Distance-Method_tag1@@": "Geodezic--Cea mai scurtă linie dintre două puncte de pe suprafața pământului pe un sferoid (elipsoid). Prin urmare, indiferent de proiecția de intrare sau de ieșire, rezultatele nu se schimbă. O utilizare a liniei geodezice este determinarea cele mai scurte distanțe dintre două orașe pentru un traseu de zbor al unui avion. Aceasta mai este cunoscută și drept linie circulară mare, dacă este bazată pe o sferă și nu pe un elipsoid.",
	"@@Euclidean-Distance_Distance-Method_tag2@@": "Planar--Măsurătorile planare coordonate carteziene 2D pentru a calcula lungimea și suprafața. Opțiunea este disponibilă numai la măsurarea în cadrul unui sistem de coordonate proiectate, iar planul 2D al sistemului de coordonate respectiv va fi utilizat ca bază pentru măsurători.",
	"@@Euclidean-Distance_Maximum-Distance_tag0@@": "Limita pe care valorile de distanță acumulate nu o pot depăși. În cazul în care distanța euclidiană depășește această valoare, valoarea de ieșire pentru localizarea celulei va fi NoData.",
	"@@Euclidean-Distance_Maximum-Distance_tag1@@": "Distanța implicită este reprezentată de extinderea rasterului de ieșire.",
	"@@Euclidean-Distance_Raster-Barriers_tag0@@": "Rasterul care definește barierele.",
	"@@Euclidean-Distance_Raster-Barriers_tag1@@": "Setul de date trebuie să conțină ${NoData} acolo unde nu există bariere. Barierele sunt reprezentate de valori valide, inclusiv zero.",
	"@@Euclidean-Distance_Raster-Barriers_tag2@@": "Barierele pot fi definite de un raster de tip număr întreg sau cu virgulă mobilă.",
	"@@Euclidean-Distance_Source-Raster_tag0@@": "Rasterul de intrare necesar, care identifică celulele sau amplasările pe baza cărora se calculează distanța euclidiană pentru fiecare amplasare de celulă de ieșire.",
	"@@Euclidean-Distance_Source-Raster_tag1@@": "Tipul de intrare poate fi un număr întreg sau un tip cu virgulă mobilă.",
	"@@Exp_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Exp_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Exp_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Exp_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Exp_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Exp_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Exp_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Exp_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Exp_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Exp_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Exp_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Exp_Raster_tag0@@": "Valorile introduse pentru care trebuie determinată exponențiala e de bază.",
	"@@Exp10_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Exp10_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Exp10_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Exp10_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Exp10_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Exp10_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Exp10_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Exp10_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Exp10_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Exp10_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Exp10_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Exp10_Raster_tag0@@": "Valorile introduse pentru care trebuie determinată exponențiala 10 de bază.",
	"@@Exp2_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Exp2_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Exp2_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Exp2_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Exp2_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Exp2_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Exp2_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Exp2_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Exp2_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Exp2_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Exp2_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Exp2_Raster_tag0@@": "Valorile introduse pentru care trebuie determinată exponențiala 2 de bază.",
	"@@Extract-Bands_Band_tag0@@": "Selectați benzile de extras dintr-o listă pe baza opțiunii de parametru <strong>Metodă</strong> utilizată.",
	"@@Extract-Bands_Combination_tag0@@": "Combinația de benzi sau ordinea benzilor. Șista de selecție depinde de opțiunea <strong>Metodă</strong> specificată. De exemplu, dacă <strong>Metoda</strong> este <strong>Nume de benzi</strong>, puteți selecta o combinație de Albastru, Verde și Roșu pentru a extrage o imagine cu culoare naturală.",
	"@@Extract-Bands_Method_tag0@@": "Selectați una dintre următoarele metode pentru extragerea benzilor:",
	"@@Extract-Bands_Method_tag1@@": "<strong>ID-uri bandă</strong>--Denumirea sau numărul de benzi, unice pentru fiecare senzor.. Acestea pot fi identice cu <strong>Numele de bandă</strong>.",
	"@@Extract-Bands_Method_tag4@@": "<strong>Nume de bandă</strong>--Utilizează numele benzii care reprezintă intervalul de lungimi de undă de la nivelul spectrului electromagnetic (de ex. roșu, infraroșu apropiat, infraroșu termic). De asemenea, se poate desemna ca ID număr bandă.",
	"@@Extract-Bands_Method_tag6@@": "<strong>Lungimi de undă ale benzii</strong>--Lungimea de undă din spectrul electromagnetic.",
	"@@Extract-Bands_Missing-Band-Action_tag0@@": "Specificați acțiunea care are loc când nu este disponibilă o bandă în cadrul listei de benzi de extras.",
	"@@Extract-Bands_Missing-Band-Action_tag1@@": "<strong>Cea mai bună potrivire</strong>--Găsește cea mai bună bandă disponibilă pentru a fi utilizată în locul benzii lipsă, în funcție de lungimea de undă, astfel încât să nu eșueze funcționarea",
	"@@Extract-Bands_Missing-Band-Action_tag3@@": "<strong>Eșuare</strong>--Dacă setului de date de intrare îi lipsește orice bandă specificată în parametrul <strong>Bandă</strong>, funcția va eșua.",
	"@@Extract-Bands_Raster_tag0@@": "Produsul raster din care banda sau benzile vor fi extrase.",
	"@@Fill_Raster_tag0@@": "Un raster de elevație de bandă unică.",
	"@@Fill_Z-Limit_tag0@@": "Diferența de elevație maximă între o dolină și punctul de curgere care trebuie să se umple.",
	"@@Fill_Z-Limit_tag1@@": "Dacă nu este specificată o valoare pentru acest parametru, toate dolinele vor fi umplute, indiferent de adâncime.",
	"@@Fill_Z-Limit_tag2@@": "Valoarea pentru <strong>Limita Z</strong> trebuie să fie mai mare decât zero.",
	"@@Float_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Float_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Float_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Float_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Float_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Float_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Float_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Float_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Float_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Float_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Float_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Float_Raster_tag0@@": "Rasterul de intrare care trebuie convertit la o valoare cu virgulă mobilă.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag0@@": "Rasterul de intrare care prezintă direcția de curgere din fiecare celulă.",
	"@@Flow-Accumulation_Flow-Direction-Raster_tag1@@": "Rasterul de direcție a fluxului poate fi creat utilizând funcția <strong>Direcție Flux</strong>.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag0@@": "Definește tipul rasterului de direcție a fluxului de intrare.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--Rasterul de direcție a fluxului de intrare este de tip D8. Aceasta este setarea implicită.",
	"@@Flow-Accumulation_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Rasterul de direcție a fluxului de intrare este de tip D-Infinity (DINF).",
	"@@Flow-Accumulation_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Rasterul de direcție a fluxului de intrare este de tip Flux cu direcții multiple (MFD).",
	"@@Flow-Accumulation_Output-Data-Type_tag0@@": "Rasterul acumulării de ieșire poate fi de tip număr întreg sau virgulă mobilă.",
	"@@Flow-Accumulation_Output-Data-Type_tag1@@": "<strong>Virgulă mobilă</strong>--Rasterul de ieșire va fi de tip virgulă mobilă. Aceasta este setarea implicită.",
	"@@Flow-Accumulation_Output-Data-Type_tag3@@": "<strong>Număr întreg</strong>--Rasterul de ieșire va fi de tip număr întreg.",
	"@@Flow-Accumulation_Weight-Raster_tag0@@": "Un raster de intrare opțional pentru aplicarea unei ponderi pentru fiecare pixel.",
	"@@Flow-Accumulation_Weight-Raster_tag1@@": "Dacă nu este specificat niciun raster ponderat, este aplicată o pondere de 1 pentru fiecare pixel.",
	"@@Flow-Direction_Flow-Direction-Type_tag0@@": "Definește tipul rasterului de direcție a fluxului de intrare.",
	"@@Flow-Direction_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--Rasterul de direcție a fluxului de intrare este de tip D8. Aceasta este setarea implicită.",
	"@@Flow-Direction_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Rasterul de direcție a fluxului de intrare este de tip D-Infinity (DINF).",
	"@@Flow-Direction_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Rasterul de direcție a fluxului de intrare este de tip Flux cu direcții multiple (MFD).",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag0@@": "Specifică dacă fluxul pixelilor de muchie va fi întotdeauna în afara sau în cadrul intervalului normal.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag1@@": "<strong>Nu</strong>--Dacă panta maximă în interiorul unui pixel de muchie este mai mare decât zero, direcția fluxului va fi determinată ca de obicei; în caz contrar, direcția fluxului va fi către muchie. Pixelii al căror flux ar trebui să înceapă de la marginea interioară a rasterului de suprafață vor face acest lucru. Aceasta este setarea implicită.",
	"@@Flow-Direction_Force-all-edge-cells-to-flow-outward_tag3@@": "<strong>Da</strong>--Fluxul tuturor pixelilor de pe marginea rasterului de suprafață se va deplasa în exteriorul rasterului de suprafață.",
	"@@Flow-Direction_Raster_tag0@@": "Rasterul de intrare care reprezintă o suprafață de elevație continuă.",
	"@@Flow-Distance_Distance-Type_tag0@@": "Determină dacă este calculată componenta verticală sau orizontală a distanței fluxului.",
	"@@Flow-Distance_Distance-Type_tag1@@": "<strong>Orizontal</strong>--Calculele distanței fluxului reprezintă componenta orizontală a distanței fluxului de la fiecare pixel din domeniul în care se deplasează fluxul pixelului/pixelilor.",
	"@@Flow-Distance_Distance-Type_tag3@@": "<strong>Vertical</strong>--Calculele distanței fluxului reprezintă componenta verticală a distanței fluxului de la fiecare pixel din domeniul în care se deplasează fluxul pixelului/pixelilor. Aceasta este setarea implicită.",
	"@@Flow-Distance_Flow-Direction-Raster_tag0@@": "Rasterul de intrare care prezintă direcția de curgere din fiecare pixel.",
	"@@Flow-Distance_Flow-Direction-Raster_tag1@@": "Când este pus la dispoziție un raster de direcție a fluxului, direcția(iile) pantei de coborâre va fi limitată la cele definite de direcția fluxului de intrare.",
	"@@Flow-Distance_Flow-Direction-Raster_tag2@@": "Rasterul de direcție a fluxului poate fi creat utilizând funcția Direcție flux.",
	"@@Flow-Distance_Flow-Direction-Type_tag0@@": "Definește tipul rasterului de direcție a fluxului de intrare.",
	"@@Flow-Distance_Flow-Direction-Type_tag1@@": "<strong>D8</strong>--Rasterul de direcție a fluxului de intrare este de tip D8. Aceasta este setarea implicită.",
	"@@Flow-Distance_Flow-Direction-Type_tag3@@": "<strong>DINF</strong>--Rasterul de direcție a fluxului de intrare este de tip D-Infinity (DINF).",
	"@@Flow-Distance_Flow-Direction-Type_tag5@@": "<strong>MFD</strong>--Rasterul de direcție a fluxului de intrare este de tip Flux cu direcții multiple (MFD).",
	"@@Flow-Distance_Statistics-Type_tag0@@": "Determină tipul de statistică care se utilizează pentru calcularea distanței de flux pe mai multe căi de flux. Dacă există o singură cale de flux de la fiecare celulă la o celulă în cadrul fluxului, toate tipurile de statistică au același rezultat.",
	"@@Flow-Distance_Statistics-Type_tag1@@": "<strong>Minimum</strong>--Acolo unde există mai multe căi de flux, este calculată distanța minimă a fluxului. Aceasta este setarea implicită.",
	"@@Flow-Distance_Statistics-Type_tag3@@": "<strong>Medie Ponderată</strong>--Acolo unde există mai multe căi de flux, este calculată o medie ponderată a distanței fluxului. Proporția fluxului de la o celulă la celulele învecinate în aval sunt utilizate ca ponderi pentru calcularea mediei ponderate.",
	"@@Flow-Distance_Statistics-Type_tag5@@": "<strong>Maximum</strong>--Când există mai multe căi de flux, este calculată distanța maximă a fluxului.",
	"@@Flow-Distance_Stream-Raster_tag0@@": "Un raster de tip flux de intrare care reprezintă o rețea liniară de flux.",
	"@@Flow-Distance_Surface-Raster_tag0@@": "Rasterul de intrare care reprezintă o suprafață de elevație continuă.",
	"@@Flow-Length_Direction-of-Measurement_tag0@@": "Direcția de măsurare pe calea fluxului.",
	"@@Flow-Length_Direction-of-Measurement_tag1@@": "<strong>Descendent</strong>--Calculează distanța în pantă descendentă pe calea fluxului, de la fiecare celulă la o dolină sau la ieșirea de pe marginea rasterului.",
	"@@Flow-Length_Direction-of-Measurement_tag3@@": "<strong>Ascendent</strong>--Calculează cea mai mare distanță în pantă ascendentă pe calea fluxului, de la fiecare celulă în partea de sus a împărțirii de scurgere.",
	"@@Flow-Length_Flow-Direction-Raster_tag0@@": "Rasterul de intrare care prezintă direcția de curgere din fiecare celulă.",
	"@@Flow-Length_Flow-Direction-Raster_tag1@@": "Rasterul de direcție a fluxului poate fi creat utilizând funcția <strong>Direcție Flux</strong>.",
	"@@Flow-Length_Weight-Raster_tag0@@": "Un raster de intrare opțional pentru aplicarea unei ponderi pentru fiecare celulă.",
	"@@Flow-Length_Weight-Raster_tag1@@": "Dacă nu este specificat niciun raster ponderat, este aplicată o pondere de 1 pentru fiecare celulă.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag0@@": "Denotă dacă valorile ${NoData} sunt ignorate de calculul statistic.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag1@@": "<strong>Verificat</strong>--Specifică faptul că, în cazul în care există o valoare ${NoData} în vecinătate, valoarea ${NoData} va fi ignorată. Vor fi utilizate doar celulele din vecinătate care au valori de date utilizate pentru determinarea valorii de ieșire. Aceasta este setarea implicită.",
	"@@Focal-Statistics_Ignore-NoData-in-calculations_tag3@@": "<strong>Neverificat</strong>--Specifică faptul că, în cazul în care o celulă din vecinătate are o valoare ${NoData}, rezultatul pentru celula de procesare va fi ${NoData}.",
	"@@Focal-Statistics_Neighborhood_tag0@@": "Forma zonei din jurul fiecărei celule, utilizată pentru a calcula statistica.",
	"@@Focal-Statistics_Neighborhood_tag1@@": "Fiecare vecinătate are parametri suplimentari cu ajutorul cărora este definită forma.",
	"@@Focal-Statistics_Neighborhood_tag2@@": "Coroană circulară, Rază interioară, Rază exterioară",
	"@@Focal-Statistics_Neighborhood_tag3@@": "Cerc, Rază",
	"@@Focal-Statistics_Neighborhood_tag4@@": "Valorile Vecinătate Neregulată, Lățime, Înălțime, Vecinătate",
	"@@Focal-Statistics_Neighborhood_tag5@@": "Dreptunghi, Lățime, Înălțime",
	"@@Focal-Statistics_Neighborhood_tag6@@": "Secțiune, Rază, Unghi de pornire, Unghi de finalizare",
	"@@Focal-Statistics_Neighborhood_tag7@@": "Valorile Vecinătate, Înălțime, Lățime, Pondere",
	"@@Focal-Statistics_Neighborhood_tag8@@": "Vecinătatea neregulată vă permite să specificați o vecinătate cu o formă neregulată în jurul celulei de procesare. Utilizați tabelul cu valori Vecinătate pentru a defini forma nucleului învecinat. Valoarea 0 pentru o poziție de celulă indică faptul că celula nu este învecinată și că aceasta nu va fi utilizată pentru procesare. Valoarea 1 indică faptul că celula (și valoarea) învecinată este un membru învecinat.",
	"@@Focal-Statistics_Neighborhood_tag9@@": "Vecinătatea Pondere este similară tipului de vecinătate neregulată, deoarece permite definirea unei vecinătăți neregulate în jurul celulei de procesare, dar vă permite și să aplicați ponderi la valorile de intrare. Valorile din nucleul de pondere specifică ce poziții de celule trebuie incluse în vecinătate și ponderile cu care vor fi înmulțite. Utilizați valoarea 0 pentru a exclude o celulă din procesare. Valorile pozitive, negative și zecimale sunt opțiuni valabile pentru a fi utilizate ca pondere. Pentru tipul de vecinătate Pondere, se acceptă doar statisticile Medie, Deviație standard sau Statistici sumă.",
	"@@Focal-Statistics_Percentile-Value_tag0@@": "Denotă percentila de calculat atunci când <strong>Percentilă</strong> este selectată ca tip al statisticii. Valoarea este 90 pentru cea de-a 90-a percentilă.",
	"@@Focal-Statistics_Percentile-Value_tag3@@": "Valorile variază între 0 și 100. În principiu, percentila 0 este echivalentă cu statistica Minimă, iar cea de-a 100-a percentilă este echivalentă cu Maximă, cu excepția faptului că rezultatul va fi cu virgulă mobilă. În principiu, valoarea 50 are același rezultat ca statistica Mediană.",
	"@@Focal-Statistics_Raster_tag0@@": "Rasterul de intrare necesar.",
	"@@Focal-Statistics_Statistics-Type_tag0@@": "Tipul de statistică care trebuie să se calculeze.",
	"@@Focal-Statistics_Statistics-Type_tag1@@": "<strong>Majoritate</strong>--Calculează majoritatea (valoarea care apare cel mai des) celulelor din vecinătate.",
	"@@Focal-Statistics_Statistics-Type_tag3@@": "<strong>Maximum</strong>--Calculează numărul maxim (cea mai mare valoare) de celule din vecinătate.",
	"@@Focal-Statistics_Statistics-Type_tag5@@": "<strong>Medie</strong>--Calculează media celulelor (valoarea medie) din vecinătate.",
	"@@Focal-Statistics_Statistics-Type_tag7@@": "<strong>Mediană</strong>--Calculează mediana celulelor din vecinătate.",
	"@@Focal-Statistics_Statistics-Type_tag9@@": "<strong>Minimum</strong>--Calculează numărul minim (cea mai mică valoare) de celule din vecinătate.",
	"@@Focal-Statistics_Statistics-Type_tag11@@": "<strong>Minoritate</strong>--Calculează minoritatea (valoarea care apare cel mai rar) celulelor din vecinătate.",
	"@@Focal-Statistics_Statistics-Type_tag13@@": "<strong>Percentilă</strong>--Calculează o percentilă a celulelor din vecinătate. Puteți stabili ce percentilă trebuie calculată cu parametrul <strong>Valoare Percentilă</strong>.",
	"@@Focal-Statistics_Statistics-Type_tag17@@": "<strong>Interval</strong>--Calculează intervalul celulelor (diferența dintre cea mai mică și cea mai mare valoare) din vecinătate.",
	"@@Focal-Statistics_Statistics-Type_tag19@@": "<strong>Abatere Standard</strong>--Calculează abaterea standard a celulelor din vecinătate.",
	"@@Focal-Statistics_Statistics-Type_tag21@@": "<strong>Sumă</strong>--Calculează suma celulelor (totalul valorilor) din vecinătate.",
	"@@Focal-Statistics_Statistics-Type_tag23@@": "<strong>Varietate</strong>--Calculează varietatea celulelor (numărul de valori unice) din vecinătate.",
	"@@Focal-Statistics_Statistics-Type_tag25@@": "Dacă rasterul de intrare este de tip virgulă mobilă, doar tipurile de statistică Medie, Maximă, Mediană, Minimă, Percentilă, Interval, Deviație standard și Sumă sunt disponibile.",
	"@@Focal-Statistics_Statistics-Type_tag26@@": "Pentru Medie, Mediană, Percentilă și Deviație standard, rezultatul este întotdeauna de tip virgulă mobilă.",
	"@@Focal-Statistics_Statistics-Type_tag27@@": "Tipul implicit de statistică este Medie.",
	"@@Geometric_Constant-Z_tag0@@": "Specificați o elevație constantă de utilizat pentru funcția Geometrie.",
	"@@Geometric_DEM_tag0@@": "Specificați DEM de utilizat pentru funcția Geometrie. Puteți utiliza un DEM inclus în setul de date mozaic ca set de date raster sau set de date mozaic, al cărui rezultat este DEM.",
	"@@Geometric_Geoid_tag0@@": "Majoritatea seturilor de date despre elevație, cum ar fi USGS NED sau ArcGIS Online World Elevation, sunt înălțimi ortometrice, ceea ce înseamnă că este necesar să selectați corecția Glob pentru compatibilitate cu modelele RPC de satelit, care necesită înălțimi elipsoidale. Bifați căsuța <strong>Glob</strong> pentru a aplica corecția globului (EGM96) la valorile z, exceptând cazul în care DEM are deja referință la înălțimi elipsoidale.",
	"@@Geometric_Method_tag0@@": "Alegeți metoda de elevație pentru funcția geometrică:",
	"@@Geometric_Method_tag1@@": "Utilizați Constanta Z--Specificați o elevație constantă pentru a executa Funcția geometrică.",
	"@@Geometric_Method_tag2@@": "Utilizați DEM--Specificați un DEM pentru a executa Funcția geometrică.",
	"@@Geometric_Raster_tag0@@": "Rasterul de intrare.",
	"@@Geometric_Z-Factor_tag0@@": "Coeficienții polinomiali raționali (RPC) de satelit sunt scalați pentru seturi de date de elevație cu unități verticale în metri. Dacă elevația dvs. folosește alte unități verticale, introduceți un <strong>Factor Z</strong> pentru a readuce scara la metri. De exemplu, dacă unitățile de elevație sunt în picioare, ar trebui să utilizați o valoare de 0,3048 pentru a converti unitățile din picioare în metri.",
	"@@Geometric_Z-Offset_tag0@@": "Valoarea de bază care trebuie adăugată la valoarea de elevație în DEM. Se poate utiliza la valorile de elevație decalate care nu încep la nivelul mării.",
	"@@Geometric_Tolerance_tag0@@": "Precizați eroarea maximă tolerabilă a funcției geometrice, exprimată în număr de pixeli. Valoarea implicită pentru tipul de raster NITF (NCDRD) este doi.",
	"@@Grayscale_Raster_tag0@@": "Rasterul de intrare.",
	"@@Grayscale_Conversion-Parameters_tag0@@": "Ponderile pentru fiecare dintre benzile care alcătuiesc rasterul de intrare.",
	"@@Greater-Than_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Greater-Than_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Greater-Than_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Greater-Than_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Greater-Than_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Greater-Than_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Greater-Than_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Greater-Than_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Greater-Than_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Greater-Than_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Greater-Than_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Greater-Than_Raster_tag0@@": "Intrarea testată pentru a determina dacă este mai mare decât cea de-a doua intrare.",
	"@@Greater-Than_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Greater-Than_Raster2_tag0@@": "Intrarea utilizată care să se testeze pentru a vedea dacă este mai mare decât prima intrare.",
	"@@Greater-Than_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Greater-Than-Equal_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Greater-Than-Equal_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Greater-Than-Equal_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Greater-Than-Equal_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Greater-Than-Equal_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Greater-Than-Equal_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Greater-Than-Equal_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Greater-Than-Equal_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Greater-Than-Equal_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Greater-Than-Equal_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Greater-Than-Equal_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Greater-Than-Equal_Raster_tag0@@": "Intrarea testată pentru a determina dacă este mai mare sau egală cu cea de-a doua intrare.",
	"@@Greater-Than-Equal_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Greater-Than-Equal_Raster2_tag0@@": "Intrarea utilizată care să se testeze pentru a vedea dacă este mai mare sau egală cu prima intrare.",
	"@@Greater-Than-Equal_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Heat-Index_Heat-Index-Units_tag0@@": "Unitatea de măsură asociată cu rasterul de ieșire. Unitățile de ieșire disponibile sunt Celsius, Fahrenheit și Kelvin.",
	"@@Heat-Index_Relative-Humidity-Raster_tag0@@": "Un raster de bandă unică în care valorile pixelilor reprezintă umiditatea relativă ca o valoare procentuală între 0 și 100.",
	"@@Heat-Index_Temperature-Raster_tag0@@": "Un raster de bandă unică în care valorile pixelilor reprezintă temperatura aerului ambiental.",
	"@@Heat-Index_Temperature-Units_tag0@@": "Unitatea de măsură asociată cu rasterul de temperatură de intrare. Unitățile de intrare disponibile sunt Celsius, Fahrenheit și Kelvin.",
	"@@Hillshade_Altitude_tag0@@": "Altitudinea este unghiul de elevație al soarelui deasupra orizonului și variază între 0 și 90 de grade. Valoarea de 0 grade indică faptul că soarele este la orizont, adică pe același plan orizontal precum cadrul de referință. Valoarea de 90 de grade indică faptul că soarele se află exact deasupra.",
	"@@Hillshade_Altitude_tag1@@": "Acest parametru este valabil doar atunci când <strong>Tip Hillshade</strong> este <strong>Tradițional</strong>. Valoarea implicită este de 45 de grade deasupra orizontului.",
	"@@Hillshade_Azimuth_tag0@@": "Azimutul este poziția relativă a soarelui de-a lungul orizontului (în grade). Această poziție este indicată de unghiul soarelui măsurat în sens orar de la nord. Un azimut de 0 grade indică nordul, estul este de 90 de grade, sudul este de 180 de grade, iar vestul este de 270 de grade.",
	"@@Hillshade_Azimuth_tag1@@": "Acest parametru este valabil doar atunci când <strong>Tip Hillshade</strong> este <strong>Tradițional</strong>. Valoarea implicită este de 315 de grade, de la nord-vest.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag0@@": "Utilizând această opțiune, va fi evitată apariția posibilelor artefacte de reeșantionare pe marginile unui raster. Pixelii de ieșire de pe marginea unui raster sau de lângă pixelii NoData vor fi populați cu NoData; prin urmare, se recomandă acest parametru să fie utilizat numai cu seturile de date mozaic de elevație care se suprapun. Atunci când sunt disponibili pixeli care se suprapun, zonele NoData vor afișa valorile de pixeli care se suprapun în locul pixelilor goi.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag1@@": "Nebifat--Reeșantionarea biliniară va fi aplicată uniform pentru reeșantionarea efectului de umbră. Utilizați această opțiune atunci când setul de date mozaic care conține datele rasterului de elevație este îmbinat. Aceasta este setarea implicită.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag2@@": "Bifat--Reeșantionarea biliniară va fi utilizată în efectul de umbră, exceptând de-a lungul marginilor rasterelor sau lângă pixelii NoData. Acești pixeli vor fi populați cu NoData și afișează valorile pixelilor care se suprapun, reducând astfel orice efect de margine ascuțită care ar putea apărea. Utilizați această opțiune atunci când setul de date mozaic care conține datele rasterului de elevație care au repere sau segmente tile care se suprapun.",
	"@@Hillshade_Disable-default-edge-pixel-interpolation_tag3@@": "Rezultatele asociate funcției pot fi dependente de date. Dacă observați artefacte de limită pentru segmentele tile în rezultat, selectați opțiunea alternativă a casetei de selectare.",
	"@@Hillshade_Hillshade-Type_tag0@@": "Controlează sursa de iluminare pentru efectul de umbră:",
	"@@Hillshade_Hillshade-Type_tag1@@": "Tradițional--Calculează efectul de umbră dintr-o direcție de iluminare unică. Aceasta este setarea implicită. Puteți seta <strong>Azimut</strong> și <strong>Altitudine</strong> pentru a controla amplasarea sursei de lumină.",
	"@@Hillshade_Hillshade-Type_tag6@@": "Multidirecțional--Combină lumina din mai multe surse pentru a reprezenta o vizualizare îmbunătățită a terenului.",
	"@@Hillshade_Pixel-Size-Factor_tag0@@": "Factorul de dimensiune a pixelilor ia în calcul schimbările de scalare pe măsură ce aplicația de vizualizare mărește și micșorează afișarea hărții. Controlează rata la care se schimbă <strong>Factorul Z</strong>.",
	"@@Hillshade_Pixel-Size-Factor_tag3@@": "Acest parametru este valabil doar atunci când tipul <strong>Scalare</strong> este <strong>Ajustat</strong>. Valoarea implicită este 0,024.",
	"@@Hillshade_Pixel-Size-Power_tag0@@": "Puterea de dimensiune a pixelilor ia în calcul schimbările de altitudine (sau scalare) pe măsură ce vizualizatorul mărește și micșorează afișarea hărții. Este exponentul aplicat la termenul dimensiunii pixelului din ecuație care controlează rata la care se schimbă <strong>Factorul Z</strong> pentru a evita pierderi semnificative de relief.",
	"@@Hillshade_Pixel-Size-Power_tag3@@": "Acest parametru este valabil doar atunci când tipul <strong>Scalare</strong> este <strong>Ajustat</strong>. Valoarea implicită este 0,664.",
	"@@Hillshade_Raster_tag0@@": "Setul de date elevație de intrare.",
	"@@Hillshade_Scaling_tag0@@": "Rezultatul umbrit este scalat dinamic prin ajustarea factorului Z, utilizând una dintre cele două opțiuni:",
	"@@Hillshade_Scaling_tag1@@": "Ajustat--Acest lucru aplică o ajustare nonliniară folosind valorile implicite <strong>Puterea Dimensiunii Pixelului</strong> și <strong>Factorul Dimensiunii Pixelului</strong>, care includ o largă varietate de schimbări de altitudine (scară) pe măsură ce privitorul mărește și micșorează imaginea. Setarea parametrului <strong>Ajustat</strong> este recomandată la utilizarea unui set de date din întreaga lume.",
	"@@Hillshade_Scaling_tag8@@": "Niciuna--Nu este aplicată scalarea. Această opțiune este ideală pentru un set de date raster unic care acoperă o suprafață locală. Nu este recomandată pentru seturile de date din întreaga lume cu variații mari în elevație sau pentru hărțile cu scări multiple, deoarece vor produce un relief de teren cu mici variații la scară mică.",
	"@@Hillshade_Z-Factor_tag0@@": "Factorul z este un factor de scalare utilizat pentru a converti valorile de elevație în două scopuri:",
	"@@Hillshade_Z-Factor_tag1@@": "Convertiți unitățile de elevație (cum ar fi metri sau ft) la unitățile coordonatelor orizontale ale setului de date, care pot fi ft, metri sau grade.",
	"@@Hillshade_Z-Factor_tag2@@": "Adăugați exagerarea verticală pentru un efect vizual.",
	"@@Int_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Int_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Int_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Int_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Int_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Int_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Int_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Int_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Int_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Int_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Int_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Int_Raster_tag0@@": "Rasterul de intrare care trebuie convertit în număr întreg.",
	"@@Interpolate-Irregular-Data_Cellsize_tag0@@": "Dimensiunea celulelor pentru rasterul de ieșire va fi detectată automat; cu toate acestea, o puteți schimba. În timp ce dimensiunea celulelor poate fi schimbată, extinderea setului de date raster va rămâne aceeași.",
	"@@Interpolate-Irregular-Data_Input-Samples_tag0@@": "Datele punctelor de intrare.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag0@@": "Există patru metode de reeșantionare pentru această funcție:",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag1@@": "<strong>Distanță Inversă Ponderată</strong>--Determină valorile celulelor utilizând o combinație ponderată liniar a unui set de puncte sau celule de eșantionare. Ponderarea este o funcție inversă a distanței de la puncte sau celule cunoscute.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag3@@": "<strong>Cositorire Liniară</strong>--Utilizează o rețea triunghiulară neregulată de la punctele centrale ale fiecărei celule a rasterului neregulat pentru interpolarea unei suprafețe care este apoi convertită la un raster regulat.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag5@@": "<strong>Vecin Natural</strong>--Găsește cel mai apropiat subset de eșantioane de intrare de la un punct de interogare și aplică ponderi la acesta pe baza zonelor proporționate pentru interpolarea unei valori.",
	"@@Interpolate-Irregular-Data_Interpolation-Method_tag7@@": "<strong>Cel mai apropiat vecin</strong>--Calculează valoarea pixelului folosind cel mai apropiat pixel. Dacă nu există niciun pixel sursă, nu poate fi creat un pixel nou în ieșire. Aceasta este setarea implicită.",
	"@@Interpolate-Irregular-Data_Search-Radius_tag0@@": "Identifică numărul de pixeli care vor fi incluși pentru metoda de reeșantionare selectată. Valoarea implicită este ${3} pixeli.",
	"@@Interpolate-Irregular-Data_Value-Field_tag0@@": "Dacă selectați o clasă de obiecte spațiale de tip punct ca intrare, va trebui să identificați câmpul din tabelul de atribute cu valoarea punctelor",
	"@@Is-Null_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Is-Null_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Is-Null_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Is-Null_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Is-Null_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Is-Null_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Is-Null_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Is-Null_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Is-Null_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Is-Null_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Is-Null_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Is-Null_Raster_tag0@@": "Rasterul de intrare de testat pentru identificarea celulelor care sunt ${NoData} (nul).",
	"@@Is-Null_Raster_tag1@@": "Intrarea poate fi de tip număr întreg sau virgulă mobilă.",
	"@@Key-Metadata_Band-Names_tag0@@": "Această opțiune se utilizează pentru suprascrierea numelor de benzi ale unui raster. Este un șir separat prin virgule care reprezintă numele de benzi actualizate.",
	"@@Key-Metadata_Band-Names_tag1@@": "Acest parametru este opțional.",
	"@@Key-Metadata_Metadata-JSON_tag0@@": "Metadatele cheie care trebuie injectate în rasterul de ieșire descris ca un șir JSON care reprezintă colectarea perechilor cheie-valoare. În continuare, vă prezentăm un exemplu al unui șir JSON care poate fi utilizat ca intrare pentru această funcție. Toate intrările pentru acest parametru trebuie să aibă același format.",
	"@@Key-Metadata_Metadata-JSON_tag1@@": "Șirul JSON care reprezintă metadate cheie",
	"@@Key-Metadata_Metadata-JSON_tag2@@": "{ \"CloudCover\": 4, \"BandProperties\":[ { \"BandName\": \"Blue\", \"WavelengthMin\": 445, \"WavelengthMax\": 516 }, { \"BandName\": \"Green\", \"WavelengthMin\": 506, \"WavelengthMax\": 595 }, ]}",
	"@@Key-Metadata_Property-Name_tag0@@": "Numele proprietății cheie a nivelului de set de date de suprascris.",
	"@@Key-Metadata_Raster_tag0@@": "Setul de date raster sau mozaic care conține metadatele cheie pe care doriți să le inserați sau suprascrieți.",
	"@@Key-Metadata_Value_tag0@@": "Valoarea de suprascriere a proprietății cheie a nivelului de set de date de setat.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag0@@": "Acest parametru simulează creșterea efortului de a face față costurilor pe măsură ce costul acumulat crește. Se utilizează pentru a modela oboseala persoanei care călătorește. Costul acumulat în creștere pentru a ajunge la o celulă este înmulțit cu rata de rezistență și adăugat la costul de deplasare la celula subsecventă.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag1@@": "Este o versiune modificată a formulei dobânzii compuse care se utilizează pentru a calcula costul aparent de deplasare printr-o celulă. Pe măsură ce valoarea ratei de rezistență crește, crește și costul pentru celulele vizitate mai târziu. Cu cât este mai mare rata de rezistență, cu atât este mai mare costul de deplasare la următoarea celulă, fiind compusă pentru fiecare mișcare subsecventă. Având în vedere că rata de rezistență este similară unei rate compuse și că, în general, valorile costului acumulat sunt foarte mari, sunt sugerate rate de rezistență mici, precum 0,005 sau chiar mai mici, în funcție de valoarea costului acumulat.",
	"@@Least-Cost-Path_Accumulative-Cost-Resistance-Rate_tag2@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Least-Cost-Path_Capacity_tag0@@": "Definește capacitatea costului pentru persoana care călătorește pentru o sursă. Calculele de cost continuă pentru fiecare sursă până când este atinsă capacitatea specificată.",
	"@@Least-Cost-Path_Capacity_tag1@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Least-Cost-Path_Cost-Raster_tag0@@": "Un raster de intrare necesar, care definește costul sau impedanța deplasării planimetrice prin fiecare celulă. Valoarea din fiecare amplasare a celulei reprezintă distanța cost-pe-unitate pentru deplasarea prin aceasta. Fiecare valoare de amplasare a celulei este înmulțită cu rezoluția celulei și se compensează deplasarea pe diagonală pentru a obține costul total al deplasării prin celulă.",
	"@@Least-Cost-Path_Cost-Raster_tag1@@": "Valorile <strong>Raster de Cost</strong> poate fi un număr întreg sau o virgulă mobilă, dar nu pot fi negative sau zero.",
	"@@Least-Cost-Path_Destination-Field_tag0@@": "Câmpul utilizat pentru a obține valori pentru amplasările de destinație.",
	"@@Least-Cost-Path_Destination-Raster_tag0@@": "Un raster de intrare necesar care identifică pixelii pe baza cărora este determinată calea cu cel mai mic cost la sursa cu cel mai mic cost. Această intrare conține pixelii care au valori valide, iar pixelilor rămași li se alocă ${NoData}. Valorile 0 sunt valide.",
	"@@Least-Cost-Path_Maximum-Distance_tag0@@": "Limita pe care valorile de cost acumulate nu o pot depăși. În cazul în care distanța-cost acumulată depășește această valoare, valoarea rezultată pentru amplasarea celulei va fi ${NoData}. Distanța maximă definește extinderea pentru care sunt calculate distanțele-cost acumulate pentru distanță. Distanța implicită este reprezentată de extinderea rasterului de ieșire.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag0@@": "Acest parametru permite controlul modului de deplasare sau magnitudinea pentru o sursă. Cu cât multiplicatorul este mai mare, cu atât costul de deplasare prin fiecare celulă este mai mare.",
	"@@Least-Cost-Path_Multiplier-to-Apply-to-Costs_tag1@@": "Valorile trebuie să fie mai mari decât zero. Valoarea implicită este 1.",
	"@@Least-Cost-Path_Path-Type_tag0@@": "Un cuvânt cheie care definește modul în care valorile și zonele privind datele de destinație introduse va fi interpretat în calculele căilor de cost:",
	"@@Least-Cost-Path_Path-Type_tag1@@": "<strong>Cel mai bun luat individual</strong>--Pentru toți pixelii privind datele de destinație introduse, calea de cost minim este determinată din pixel pe baza minimului dintre căile de cost minim către celulele sursă.",
	"@@Least-Cost-Path_Path-Type_tag3@@": "<strong>Fiecare celulă</strong>--Este determinată o cale de cost minim pentru fiecare pixel cu valori valide în datele de destinație introduse și salvate în rasterul de ieșire. Fiecare celulă a datelor de destinație introduse este tratată separat și este determinată o cale de cost minim pentru celulă.",
	"@@Least-Cost-Path_Path-Type_tag5@@": "<strong>Fiecare Zonă</strong>--Este determinată o cale de cost minim pentru fiecare zonă din datele de destinație introduse și salvate în rasterul de ieșire. Calea de cost minim pentru fiecare zonă începe la pixelul cu distanța de cost minim ponderată în zonă.",
	"@@Least-Cost-Path_Source-Raster_tag0@@": "Acesta este un raster de intrare obligatoriu, care identifică celulele sau amplasările pe baza cărora se calculează cele mai mici costuri pentru distanță pentru fiecare amplasare de celulă de ieșire.",
	"@@Least-Cost-Path_Start-Cost_tag0@@": "Costul inițial de la care pornesc calculele de cost. Acest parametru permite specificarea costului fix asociat unei surse. În loc să înceapă la un cost cu valoarea 0, algoritmul de cost va începe cu valoarea specificată.",
	"@@Least-Cost-Path_Start-Cost_tag1@@": "Valoarea trebuie să fie cel puțin zero. Valoarea implicită este 0.",
	"@@Least-Cost-Path_Travel-Direction_tag0@@": "Definește direcția de deplasare la aplicarea ratei de rezistență a sursei și costul inițial al sursei.",
	"@@Least-Cost-Path_Travel-Direction_tag1@@": "<strong>De la sursă</strong>----Rata de rezistență a sursei și costul inițial al sursei vor fi aplicate începând cu sursa de intrare și ajungând la celule care nu aparțin sursei. Aceasta este setarea implicită.",
	"@@Least-Cost-Path_Travel-Direction_tag3@@": "<strong>La sursă</strong>----Rata de rezistență a sursei și costul inițial al sursei vor fi aplicate începând cu fiecare celulă care nu aparține sursei și ajungând la sursa de intrare.",
	"@@Least-Cost-Path_Travel-Direction_tag5@@": "Fie specificați cuvântul-cheie <strong>De la sursă</strong> sau <strong>La sursă</strong>, care va fi aplicat tuturor surselor, fie specificați un câmp din <strong>Rasterul Sursă</strong> care include cuvintele cheie pentru a identifica direcția de deplasare pentru fiecare sursă. Câmpul respectiv trebuie să conțină șirul ${FROM_SOURCE} sau ${TO_SOURCE}.",
	"@@Less-Than_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Less-Than_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Less-Than_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Less-Than_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Less-Than_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Less-Than_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Less-Than_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Less-Than_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Less-Than_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Less-Than_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Less-Than_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Less-Than_Raster_tag0@@": "Intrarea testată pentru a determina dacă este mai mică decât cea de-a doua intrare.",
	"@@Less-Than_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Less-Than_Raster2_tag0@@": "Intrarea utilizată care să se testeze pentru a vedea dacă este mai mică decât prima intrare.",
	"@@Less-Than_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Less-Than-Equal_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Less-Than-Equal_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Less-Than-Equal_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Less-Than-Equal_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Less-Than-Equal_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Less-Than-Equal_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Less-Than-Equal_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Less-Than-Equal_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Less-Than-Equal_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Less-Than-Equal_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Less-Than-Equal_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Less-Than-Equal_Raster_tag0@@": "Intrarea testată pentru a determina dacă este mai mică sau egală cu cea de-a doua intrare.",
	"@@Less-Than-Equal_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Less-Than-Equal_Raster2_tag0@@": "Intrarea utilizată care să se testeze pentru a vedea dacă este mai mică sau egală cu prima intrare.",
	"@@Less-Than-Equal_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Ln_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Ln_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Ln_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Ln_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Ln_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Ln_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Ln_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Ln_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Ln_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Ln_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Ln_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Ln_Raster_tag0@@": "Valorile introduse pentru care trebuie determinat logaritmul natural (Ln).",
	"@@Log10_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Log10_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Log10_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Log10_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Log10_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Log10_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Log10_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Log10_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Log10_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Log10_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Log10_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Log10_Raster_tag0@@": "Valorile introduse pentru care trebuie determinată logaritmul 10 de bază.",
	"@@Log2_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Log2_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Log2_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Log2_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Log2_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Log2_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Log2_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Log2_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Log2_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Log2_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Log2_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Log2_Raster_tag0@@": "Valorile introduse pentru care trebuie determinată logaritmul 2 de bază.",
	"@@Lookup_Field_tag0@@": "Câmpurile care conțin valorile dorite pentru noul raster.",
	"@@Lookup_Field_tag1@@": "Trebuie să fie de tip numeric.",
	"@@Lookup_Raster_tag0@@": "Rasterul de intrare care conține un câmp pe baza căruia se creează un nou raster.",
	"@@Lookup_Raster_tag1@@": "Poate fi de tip număr întreg sau virgulă mobilă.",
	"@@Mask_Included-Ranges_tag0@@": "Intervalele incluse pot fi specificate pentru fiecare bandă prin specificarea unei valori minime și maxime; orice valoare în afara intervalului va fi returnată ca ${NoData}. Este inclus un pixel dacă valoarea pixelului se încadrează în oricare dintre intervalele specificate. Prin urmare, dacă banda 1 are un interval de 5-10 și banda 2 are un interval de 15-20, iar valoarea pixelului pentru banda 1 este 8, acest pixel nu va fi mascat.",
	"@@Mask_NoData-Interpretation_tag0@@": "Acesta se referă la modul în care <strong>${NoData} Valorile</strong> vor afecta imaginea obținută.",
	"@@Mask_NoData-Interpretation_tag3@@": "Puteți selecta dintre următoarele două opțiuni:",
	"@@Mask_NoData-Interpretation_tag4@@": "<strong>Corespunde tuturor</strong>--Valorile ${NoData} pe care le specificați pentru fiecare bandă trebuie să apară în același pixel pentru imaginea rezultată care conține pixelul ${NoData}.",
	"@@Mask_NoData-Interpretation_tag6@@": "<strong>Corespunde oricăruia</strong>--Dacă valoarea ${NoData} pe care o specificați apare pentru un pixel dintr-o bandă specificată, pixelul respectiv din imaginea rezultată va fi ${NoData}. Aceasta este setarea implicită.",
	"@@Mask_NoData-Values_tag0@@": "Valorile NoData pot fi specificate pentru fiecare bandă. Puteți specifica mai mult de o valoare, introducând o listă cu limită de spațiu.",
	"@@Mask_Raster_tag0@@": "Rasterul de intrare.",
	"@@Minus_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Minus_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Minus_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Minus_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Minus_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Minus_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Minus_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Minus_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Minus_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Minus_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Minus_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Minus_Raster_tag0@@": "Intrarea din care se scad valorile din a doua intrare.",
	"@@Minus_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Minus_Raster2_tag0@@": "Valorile de intrare care se scad din valorile primei intrări.",
	"@@Minus_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@ML-Classify_Raster_tag0@@": "Rasterul de intrare care se va clasifica utilizând algoritmul de clasificare a probabilității maxime.",
	"@@ML-Classify_Signature-File-or-URL_tag0@@": "Fișierul de semnătură ${.gsg}.",
	"@@Mod_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Mod_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Mod_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Mod_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Mod_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Mod_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Mod_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Mod_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Mod_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Mod_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Mod_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Mod_Raster_tag0@@": "Intrarea numărătorului.",
	"@@Mod_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Mod_Raster2_tag0@@": "Intrarea numitorului.",
	"@@Mod_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Mosaic-Rasters_Operation_tag0@@": "Rezolvați orice conflict atunci când aveți părți ale două sau mai multor imagini care se suprapun. Opțiunile includ următoarele:",
	"@@Mosaic-Rasters_Operation_tag1@@": "<strong>Amestec</strong>--Calculați și afișați o medie a pixelilor care se suprapun, adăugând o pondere mai mare pixelilor care sunt mai aproape de imaginile învecinate, rezultatul fiind o imagine mai netedă. Aceasta este setarea implicită.",
	"@@Mosaic-Rasters_Operation_tag3@@": "<strong>Prima</strong>--Afișați pixelii din prima imagine în lista de imagini care se suprapun cu o anumită suprafață.",
	"@@Mosaic-Rasters_Operation_tag5@@": "<strong>Ultima</strong>--Afișați pixelii din ultima imagine în lista de imagini care se suprapun cu o anumită suprafață.",
	"@@Mosaic-Rasters_Operation_tag7@@": "<strong>Max</strong>--Afișați pixelul cu cea mai mare valoare a tuturor straturilor tematice care se suprapun. Cu această opțiune, nu aveți nicio garanție a afișării pixelilor unei singure imagini în zona de suprapunere, ci o combinație a tuturor straturilor tematice posibile.",
	"@@Mosaic-Rasters_Operation_tag9@@": "<strong>Medie</strong>--Calculați și afișați o medie a pixelilor care se suprapun.",
	"@@Mosaic-Rasters_Operation_tag11@@": "<strong>Min</strong>--Afișați pixelul cu cea mai mică valoare a tuturor straturilor tematice care se suprapun. Cu această opțiune, nu aveți nicio garanție a afișării pixelilor unei singure imagini în zona de suprapunere, ci o combinație a tuturor straturilor tematice posibile.",
	"@@Mosaic-Rasters_Rasters_tag0@@": "Selectați rasterele pe care doriți să le mozaicați pentru a forma o singură imagine.",
	"@@NDVI_Infrared-Band-ID_tag0@@": "Specifică ID-ul benzii care reprezintă partea aproape infraroșie a spectrului electromagnetic.",
	"@@NDVI_Raster_tag0@@": "Rasterul multispectral de intrare.",
	"@@NDVI_Scientific-Output_tag0@@": "Valorile de ieșire vor fi între -1 și 1, care se utilizează în mai multe aplicații științifice.",
	"@@NDVI_Visible-Band-ID_tag0@@": "Specifică ID-ul benzii care reprezintă partea roșie a spectrului electromagnetic.",
	"@@NDVI-Colorized_Color-Ramp_tag0@@": "Alegeți o schemă de culori predefinită din lista verticală.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag0@@": "Alegeți ce tip de schemă de culori se va folosi pentru colorarea ieșirii NDVI:",
	"@@NDVI-Colorized_Color-Scheme-Type_tag1@@": "Hartă color--Alegeți o hartă color predefinită din lista verticală. Alternativ, puteți naviga la un fișier de hartă color persistent care există.",
	"@@NDVI-Colorized_Color-Scheme-Type_tag2@@": "Rampă de culori--Alegeți o schemă de culori predefinită din lista verticală.",
	"@@NDVI-Colorized_Colormap_tag0@@": "Alegeți o hartă color predefinită din lista verticală. Alternativ, puteți naviga la un fișier de hartă color existent.",
	"@@NDVI-Colorized_Infrared-Band-ID_tag0@@": "Specifică ID-ul benzii care reprezintă partea aproape infraroșie a spectrului electromagnetic.",
	"@@NDVI-Colorized_Raster_tag0@@": "Rasterul multispectral de intrare.",
	"@@NDVI-Colorized_Scientific-Output_tag0@@": "Valorile de ieșire vor fi între -1 și 1, care se utilizează în mai multe aplicații științifice.",
	"@@NDVI-Colorized_Visible-Band-ID_tag0@@": "Specifică ID-ul benzii care reprezintă partea roșie a spectrului electromagnetic.",
	"@@Negate_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Negate_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Negate_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Negate_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Negate_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Negate_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Negate_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Negate_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Negate_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Negate_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Negate_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Negate_Raster_tag0@@": "Rasterul de intrare care va fi negat (înmulțit cu -1).",
	"@@Nibble_Mask-Raster_tag0@@": "Rasterul de intrare necesar care este utilizat ca mască.",
	"@@Nibble_Mask-Raster_tag1@@": "Celulele cu NoData ca valoare vor fi preluate în intrarea <strong>Raster</strong>.",
	"@@Nibble_Mask-Raster_tag4@@": "Rasterul de mască poate fi de tip număr întreg sau virgulă mobilă.",
	"@@Nibble_Nibble-NoData-cells_tag0@@": "Definește dacă celulele NoData din rasterul de intrare vor rămâne NoData în rasterul de ieșire.",
	"@@Nibble_Nibble-NoData-cells_tag1@@": "<strong>Nu</strong>--Specifică faptul că celulele NoData din rasterul de intrare vor rămâne NoData în ieșire. Aceasta este setarea implicită.",
	"@@Nibble_Nibble-NoData-cells_tag3@@": "<strong>Da</strong>--Specifică faptul că celulele NoData din rasterul de intrare și din mască pot fi preluate în valori de ieșire valabile.",
	"@@Nibble_Raster_tag0@@": "Rasterul de intrare necesar care va fi preluat.",
	"@@Nibble_Raster_tag1@@": "Rasterul de intrare poate fi de tip număr întreg sau virgulă mobilă.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag0@@": "Definește dacă valorile ${NoData} din rasterul de intrare sunt permise pentru preluarea în zona definită de rasterul de mască.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag1@@": "<strong>Da</strong>--Specifică faptul că va fi utilizată valoarea învecinată cea mai apropiată, indiferent dacă este ${NoData} sau o altă valoare de date în rasterul de intrare. Valorile ${NoData} din rasterul de intrare pot fi preluate în zonele definite în mască dacă sunt cele mai apropiate valori învecinate. Aceasta este setarea implicită.",
	"@@Nibble_Use-NoData-values-if-they-are-the-nearest-neighbor_tag3@@": "<strong>Nu</strong>--Specifică faptul că doar valorile de date pot fi preluate în zonele definite în rasterul de mască. Valorile ${NoData} din rasterul de intrare nu pot fi preluate în zonele definite în mască chiar dacă sunt cele mai apropiate valori învecinate.",
	"@@Nibble_Zone-Raster_tag0@@": "Rasterul zonei de intrare.",
	"@@Nibble_Zone-Raster_tag1@@": "O zonă este reprezentată de toate celulele dintr-un raster care au aceeași valoare, indiferent dacă sunt continue sau nu. Stratul tematic al zonei de intrare definește forma, valorile și amplasările zonelor. Rasterul de zonă poate fi de tip număr întreg sau virgulă mobilă.",
	"@@Not-Equal_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Not-Equal_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Not-Equal_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Not-Equal_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Not-Equal_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Not-Equal_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Not-Equal_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Not-Equal_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Not-Equal_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Not-Equal_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Not-Equal_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Not-Equal_Raster_tag0@@": "Intrarea care va fi comparată în privința inegalității de către a doua intrare.",
	"@@Not-Equal_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Not-Equal_Raster2_tag0@@": "Intrarea care va fi comparată cu prima intrare în privința inegalității.",
	"@@Not-Equal_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Pansharpening_Multispectral_tag0@@": "Rasterul multispectral pe care doriți să-l conturați utilizând banda pancromatică.",
	"@@Pansharpening_Panchromatic_tag0@@": "Rasterul de bandă unică și de înaltă rezoluție care va fi utilizat pentru îmbunătățirea rasterului multispectral de rezoluție scăzută.",
	"@@Pansharpening_Pansharpening-Type_tag0@@": "Alegeți algoritmul de îmbunătățire pe care doriți să-l utilizați.",
	"@@Pansharpening_Pansharpening-Type_tag1@@": "Brovey--Utilizează algoritmul Brovey bazat pe modelare spectrală pentru fuziunea datelor.",
	"@@Pansharpening_Pansharpening-Type_tag2@@": "Esri--Utilizează algoritmul Esri bazat pe modelare spectrală pentru fuziunea datelor.",
	"@@Pansharpening_Pansharpening-Type_tag3@@": "Gram-Schmidt--Utilizează algoritmul spectral de îmbunătățire Gram-Schmidt pentru îmbunătățirea datelor multispectrale.",
	"@@Pansharpening_Pansharpening-Type_tag4@@": "IHS--Utilizează spațiul de culoare intensitate, nuanță și saturație pentru fuziunea datelor.",
	"@@Pansharpening_Pansharpening-Type_tag5@@": "Medie--Utilizează valoarea medie între valorile de roșu, verde și albastru și valoarea pixelilor pancromatici.",
	"@@Pansharpening_Weights_tag0@@": "Specificați ponderile pentru benzile roșii, verzi, albastre și infraroșii. Toate valorile trebuie să fie cuprinse între 0 și 1.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag0@@": "Acest parametru simulează creșterea efortului de a face față costurilor pe măsură ce costul acumulat crește. Se utilizează pentru a modela oboseala persoanei care călătorește. Costul acumulat în creștere pentru a ajunge la o celulă este înmulțit cu rata de rezistență și adăugat la costul de deplasare la celula subsecventă.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag1@@": "Este o versiune modificată a formulei dobânzii compuse care se utilizează pentru a calcula costul aparent de deplasare printr-o celulă. Pe măsură ce valoarea ratei de rezistență crește, crește și costul pentru celulele vizitate mai târziu. Cu cât este mai mare rata de rezistență, cu atât este mai mare costul de deplasare la următoarea celulă, fiind compusă pentru fiecare mișcare subsecventă. Având în vedere că rata de rezistență este similară unei rate compuse și că, în general, valorile costului acumulat sunt foarte mari, sunt sugerate rate de rezistență mici, precum 0,005 sau chiar mai mici, în funcție de valoarea costului acumulat.",
	"@@Path-Distance_Accumulative-Cost-Resistance-Rate_tag2@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Path-Distance_Capacity_tag0@@": "Definește capacitatea costului pentru persoana care călătorește pentru o sursă. Calculele de cost continuă pentru fiecare sursă până când este atinsă capacitatea specificată.",
	"@@Path-Distance_Capacity_tag1@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Path-Distance_Cost-Raster_tag0@@": "Un raster de intrare necesar, care definește costul sau impedanța deplasării planimetrice prin fiecare celulă. Valoarea din fiecare amplasare a celulei reprezintă distanța cost-pe-unitate pentru deplasarea prin aceasta. Fiecare valoare de amplasare a celulei este înmulțită cu rezoluția celulei și se compensează deplasarea pe diagonală pentru a obține costul total al deplasării prin celulă.",
	"@@Path-Distance_Cost-Raster_tag1@@": "Valorile <strong>Raster de Cost</strong> poate fi un număr întreg sau o virgulă mobilă, dar nu pot fi negative sau zero.",
	"@@Path-Distance_horizontalfactor_tag0@@": "<p>Definește relația dintre factorul de cost orizontal și unghiul de deplasare relativă orizontală (HRMA).</p><p>Există mai mulți factori cu modificatori care identifică un grafic vertical definit al factorilor. În plus, se poate utiliza un tabel pentru a crea un grafic personalizat. Graficele sunt utilizate pentru a identifica factorul vertical utilizat la calcularea costului total pentru deplasarea pe o celulă învecinată.</p><p>În explicațiile de mai jos, sunt utilizate două acronime: HF și HRMA. HF vine de la factor orizontal, care definește dificultatea orizontală apărută la deplasarea de la o celulă la următoarea. HRMA vine de la unghi de deplasare relativă orizontală, care identifică unghiul dintre direcția orizontală de la o celulă și direcția de deplasare.</p><p><strong>Tipurile de factori orizontali</strong> includ următoarele:</p><ul><li><strong>Binar</strong>--Indică faptul că, în cazul în care HRMA este mai mic decât unghiul de tăiere, HF este setat la valoarea asociată factorului zero; în caz contrar, este infinit.</li><li><strong>Înainte</strong>--Stabilește că este permisă numai deplasarea înainte. HRMA trebuie să fie mai mare sau egal cu 0 și nu mai mic decât 90 de grade (0 &lt;= HRMA &lt; 90). Dacă HRMA este mai mare decât 0 și mai mic decât 45 de grade, HF pentru celulă este setat la valoarea asociată cu factorul zero. Dacă HRMA este mai mare sau egal cu 45 de grade, este utilizată valoarea modificatorului pentru valoarea laterală. HF pentru orice valoare HRMA egală sau mai mare de 90 de grade este setată la infinit.</li><li><strong>Liniar</strong>--Specifică faptul că HF este o funcție liniară a HRMA.</li><li><strong>Liniar invers</strong>--Specifică faptul că HF este o funcție liniară inversă a HRMA..</li><li><strong>Tabel</strong>--Identifică faptul că un fișier tabel va fi utilizat pentru a defini graficul factorului orizontal utilizat pentru a determina HF.</li></ul><p>:Factorii de modificare a factorilor orizontali includ următoarele</p><ul><li><strong>Zero factor</strong>--Factorul orizontal care urmează să fie utilizat atunci când HRMA este zero. Acest factor poziționează intersecția y pentru oricare dintre funcțiile factorului orizontal.</li><li><strong>Unghiul de tăiere</strong>--Definește unghiul HRMA dincolo de care HF va fi setat la infinit.</li><li><strong>Panta</strong>--Stabilește panta liniei drepte utilizate cu cuvintele cheie pentru factorul <strong>Liniar</strong>și<strong>Liniar invers</strong>orizontal. Panta este specificată ca o fracțiune de creștere față de cursă (de exemplu, o pantă de 45 la sută este 1/45, care se introduce ca 0,02222).</li><li><strong>Valoare secundară</strong>--Stabilește HF atunci când HRMA este mai mare sau egală cu 45 de grade și mai mică de 90 de grade atunci când cuvântul cheie al factorului <strong>înainte</strong>orizontal este specificat.</li><li><strong>N umele tabelului</strong>--Identifică numele tabelului care definește HF.</li></ul>",
	"@@Path-Distance_Horizontal-Raster_tag0@@": "Un raster care definește direcția orizontală pentru fiecare celulă.",
	"@@Path-Distance_Horizontal-Raster_tag1@@": "Valorile din raster trebuie să fie numere întregi cuprinse între 0 și 360, 0 grade reprezentând nordul sau către partea superioară a ecranului, crescând în sens orar. Zonelor plate ar trebui să li se atribuie valoarea -1. Valorile din fiecare amplasare vor fi folosite împreună cu <strong>Factorul orizontal</strong> pentru a determina costul orizontal înregistrat la deplasarea de la o celulă la vecinele acesteia.",
	"@@Path-Distance_Maximum-Distance_tag0@@": "Limita pe care valorile de cost acumulate nu o pot depăși. În cazul în care distanța-cost acumulată depășește această valoare, valoarea rezultată pentru amplasarea celulei va fi NoData. Distanța maximă definește extinderea pentru care sunt calculate distanțele-cost acumulate pentru distanță. Distanța implicită este reprezentată de extinderea rasterului de ieșire.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag0@@": "Un multiplicator care se aplică valorilor de cost.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag1@@": "Acest parametru permite controlul modului de deplasare sau magnitudinea pentru o sursă. Cu cât multiplicatorul este mai mare, cu atât costul de deplasare prin fiecare celulă este mai mare.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag2@@": "Valorile trebuie să fie mai mari decât zero. Valoarea implicită este 1.",
	"@@Path-Distance_Multiplier-to-Apply-to-Costs_tag3@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Path-Distance_Source-Raster_tag0@@": "Rasterul de intrare necesar pentru amplasările sursă.",
	"@@Path-Distance_Source-Raster_tag1@@": "Acesta este un raster care identifică celulele sau amplasările pe baza cărora se calculează cea mai mică valoare cost-distanță pentru fiecare amplasare de celulă de ieșire.",
	"@@Path-Distance_Source-Raster_tag2@@": "Poate fi de tip număr întreg sau virgulă mobilă.",
	"@@Path-Distance_Start-Cost_tag0@@": "Costul inițial de la care pornesc calculele de cost. Acest parametru permite specificarea costului fix asociat unei surse. În loc să înceapă la un cost cu valoarea 0, algoritmul de cost va începe cu valoarea specificată.",
	"@@Path-Distance_Start-Cost_tag1@@": "Valoarea trebuie să fie cel puțin zero. Valoarea implicită este 0.",
	"@@Path-Distance_Surface-Raster_tag0@@": "Un raster care definește valorile de elevație pentru fiecare amplasare de celulă.",
	"@@Path-Distance_Surface-Raster_tag1@@": "Valorile sunt utilizate pentru a calcula distanța suprafeței efective acoperite la comutarea între celule.",
	"@@Path-Distance_Travel-Direction_tag0@@": "Definește direcția de deplasare la aplicarea ratei de rezistență a sursei și costul inițial al sursei.",
	"@@Path-Distance_Travel-Direction_tag1@@": "<strong>De la sursă</strong>----Rata de rezistență a sursei și costul inițial al sursei vor fi aplicate începând cu sursa de intrare și ajungând la celule care nu aparțin sursei. Aceasta este setarea implicită.",
	"@@Path-Distance_Travel-Direction_tag3@@": "<strong>La sursă</strong>----Rata de rezistență a sursei și costul inițial al sursei vor fi aplicate începând cu fiecare celulă care nu aparține sursei și ajungând la sursa de intrare.",
	"@@Path-Distance_Travel-Direction_tag5@@": "Fie specificați cuvântul-cheie <strong>De la sursă</strong> sau <strong>La sursă</strong>, care va fi aplicat tuturor surselor, fie specificați un câmp din <strong>Rasterul Sursă</strong> care include cuvintele cheie pentru a identifica direcția de deplasare pentru fiecare sursă. Câmpul respectiv trebuie să conțină șirul ${FROM_SOURCE} sau ${TO_SOURCE}.",
	"@@Path-Distance_verticalfactor_tag0@@": "<p>Definește relația dintre factorul de cost vertical și unghiul de deplasare relativă orizontală (VRMA).</p><p>Există mai mulți factori cu modificatori care identifică un grafic vertical definit al factorilor. În plus, se poate utiliza un tabel pentru a crea un grafic personalizat. Graficele sunt utilizate pentru a identifica factorul vertical utilizat la calcularea costului total pentru deplasarea pe o celulă învecinată.</p><p>În explicațiile de mai jos, sunt utilizate două acronime: VF și VRMA. VF vine de la factor vertical, care definește dificultatea verticală apărută la deplasarea de la o celulă la următoarea. VRMA reprezintă unghiul de deplasare relativă verticală, care identifică unghiul de înclinare dintre celula DE LA, sau de procesare, și celula CĂTRE.</p><p><strong>Tipurile de factori verticali</strong> includ următoarele:</p><ul><li><strong>Binar</strong>--Specifică faptul că, dacă VRMA este mai mare decât unghiul de tăietură joasă și mai mic decât unghiul de tăietură înaltă, VF este setat la valoarea asociată cu factorul zero; în caz contrar, este infinit.</li><li><strong>Liniar</strong>--Indică că VF este o funcție liniară a VRMA.</li><li><strong>Liniar simetric</strong>--Specifică faptul că VF este o funcție liniară a VRMA în partea negativă, respectiv pozitivă a VRMA, iar cele două funcții liniare sunt simetrice în raport cu axa VF (y).</li><li><strong>Liniar invers</strong>--Indică că VF este o funcție liniară inversă a VRMA.</li><li><strong>Liniar invers simetric</strong>--Specifică faptul că VF este o funcție liniară inversă a VRMA în partea negativă, respectiv pozitivă a VRMA, iar cele două funcții liniare sunt simetrice în raport cu axa VF (y).</li><li><strong>Cos</strong>--Identifică VF ca funcția pe bază de cosinus a VRMA.</li><li><strong>Sec</strong>--Identifică VF ca funcția pe bază de secantă a VRMA.</li><li><strong>Cos-Sec</strong>--Specifică faptul că VF este funcția bazată pe cosinus a VRMA atunci când VRMA este negativă și funcția bazată pe secantă a VRMA atunci când VRMA nu este negativă.</li><li><strong>Sec-Cos</strong>--Specifică faptul că VF este funcția bazată pe secante a VRMA atunci când VRMA este negativă și funcția bazată pe cosinus a VRMA atunci când VRMA nu este negativă.</li><li><strong>Tabel</strong>--Identifică faptul că un fișier tabel va fi utilizat pentru a defini graficul factorului vertical care este utilizat pentru a determina VF-urile.</li></ul><p>Modificatori ai cuvintelor cheie verticale includ următoarele:</p><ul><li><strong>Factorul zero</strong>--Stabilește factorul vertical utilizat atunci când VRMA este zero. Acest factor poziționează interceptarea y a funcției specificate. Potrivit definiției, factorul zero nu se aplică niciunei funcții verticale trigonometrice (COS, SEC, COS-SEC sau SEC-COS). Y-intercept este definit de aceste funcții.</li><li><strong>Unghiul de tăiere joasă</strong>--Definește unghiul VRMA sub care VF va fi setat la infinit.</li><li><strong>Unghi tăiere înaltă</strong>--Definește unghiul VRMA peste care VF va fi setat la infinit.</li><li><strong>Panta</strong>--Stabilește panta liniei drepte utilizate cu cuvintele<strong> cheie de factor vertic</strong>al Liniar</strong>și<strong>Liniar invers. Panta este specificată ca o fracție a gradientului (de exemplu, o pantă de 45 la sută este 1/45, care se introduce ca 0,02222).</li><li><strong>Numele tabelului</strong>--Identifică numele tabelului care definește VF.</li></ul>",
	"@@Path-Distance_Vertical-Raster_tag0@@": "Definește relația dintre factorul de cost vertical și unghiul de deplasare relativă verticală (VRMA).",
	"@@Path-Distance_Vertical-Raster_tag1@@": "Valorile sunt utilizate pentru calcularea pantei utilizate pentru identificarea factorului vertical apărut la deplasarea de la o celulă la alta.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag0@@": "Acest parametru simulează creșterea efortului de a face față costurilor pe măsură ce costul acumulat crește. Se utilizează pentru a modela oboseala persoanei care călătorește. Costul acumulat în creștere pentru a ajunge la o celulă este înmulțit cu rata de rezistență și adăugat la costul de deplasare la celula subsecventă.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag1@@": "Este o versiune modificată a formulei dobânzii compuse care se utilizează pentru a calcula costul aparent de deplasare printr-o celulă. Pe măsură ce valoarea ratei de rezistență crește, crește și costul pentru celulele vizitate mai târziu. Cu cât este mai mare rata de rezistență, cu atât este mai mare costul de deplasare la următoarea celulă, fiind compusă pentru fiecare mișcare subsecventă. Având în vedere că rata de rezistență este similară unei rate compuse și că, în general, valorile costului acumulat sunt foarte mari, sunt sugerate rate de rezistență mici, precum 0,005 sau chiar mai mici, în funcție de valoarea costului acumulat.",
	"@@Path-Distance-Allocation_Accumulative-Cost-Resistance-Rate_tag2@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Path-Distance-Allocation_Capacity_tag0@@": "Definește capacitatea costului pentru persoana care călătorește pentru o sursă. Calculele de cost continuă pentru fiecare sursă până când este atinsă capacitatea specificată.",
	"@@Path-Distance-Allocation_Capacity_tag1@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Path-Distance-Allocation_Cost-Raster_tag0@@": "Un raster de intrare necesar, care definește costul sau impedanța deplasării planimetrice prin fiecare celulă. Valoarea din fiecare amplasare a celulei reprezintă distanța cost-pe-unitate pentru deplasarea prin aceasta. Fiecare valoare de amplasare a celulei este înmulțită cu rezoluția celulei și se compensează deplasarea pe diagonală pentru a obține costul total al deplasării prin celulă.",
	"@@Path-Distance-Allocation_Cost-Raster_tag1@@": "Valorile <strong>Raster de Cost</strong> poate fi un număr întreg sau o virgulă mobilă, dar nu pot fi negative sau zero.",
	"@@Path-Distance-Allocation_horizontalfactor_tag0@@": "<p>Definește relația dintre factorul de cost orizontal și unghiul de deplasare relativă orizontală (HRMA).</p><p>Există mai mulți factori cu modificatori care identifică un grafic vertical definit al factorilor. În plus, se poate utiliza un tabel pentru a crea un grafic personalizat. Graficele sunt utilizate pentru a identifica factorul vertical utilizat la calcularea costului total pentru deplasarea pe o celulă învecinată.</p><p>În explicațiile de mai jos, sunt utilizate două acronime: HF și HRMA. HF vine de la factor orizontal, care definește dificultatea orizontală apărută la deplasarea de la o celulă la următoarea. HRMA vine de la unghi de deplasare relativă orizontală, care identifică unghiul dintre direcția orizontală de la o celulă și direcția de deplasare.</p><p><strong>Tipurile de factori orizontali</strong> includ următoarele:</p><ul><li><strong>Binar</strong>--Indică faptul că, în cazul în care HRMA este mai mic decât unghiul de tăiere, HF este setat la valoarea asociată factorului zero; în caz contrar, este infinit.</li><li><strong>Înainte</strong>--Stabilește că este permisă numai deplasarea înainte. HRMA trebuie să fie mai mare sau egal cu 0 și nu mai mic decât 90 de grade (0 &lt;= HRMA &lt; 90). Dacă HRMA este mai mare decât 0 și mai mic decât 45 de grade, HF pentru celulă este setat la valoarea asociată cu factorul zero. Dacă HRMA este mai mare sau egal cu 45 de grade, este utilizată valoarea modificatorului pentru valoarea laterală. HF pentru orice valoare HRMA egală sau mai mare de 90 de grade este setată la infinit.</li><li><strong>Liniar</strong>--Specifică faptul că HF este o funcție liniară a HRMA.</li><li><strong>Liniar invers</strong>--Specifică faptul că HF este o funcție liniară inversă a HRMA..</li><li><strong>Tabel</strong>--Identifică faptul că un fișier tabel va fi utilizat pentru a defini graficul factorului orizontal utilizat pentru a determina HF.</li></ul><p>:Factorii de modificare a factorilor orizontali includ următoarele</p><ul><li><strong>Zero factor</strong>--Factorul orizontal care urmează să fie utilizat atunci când HRMA este zero. Acest factor poziționează intersecția y pentru oricare dintre funcțiile factorului orizontal.</li><li><strong>Unghiul de tăiere</strong>--Definește unghiul HRMA dincolo de care HF va fi setat la infinit.</li><li><strong>Panta</strong>--Stabilește panta liniei drepte utilizate cu cuvintele cheie pentru factorul <strong>Liniar</strong>și<strong>Liniar invers</strong>orizontal. Panta este specificată ca o fracțiune de creștere față de cursă (de exemplu, o pantă de 45 la sută este 1/45, care se introduce ca 0,02222).</li><li><strong>Valoare secundară</strong>--Stabilește HF atunci când HRMA este mai mare sau egală cu 45 de grade și mai mică de 90 de grade atunci când cuvântul cheie al factorului <strong>înainte</strong>orizontal este specificat.</li><li><strong>N umele tabelului</strong>--Identifică numele tabelului care definește HF.</li></ul>",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag0@@": "Un raster care definește direcția orizontală pentru fiecare celulă.",
	"@@Path-Distance-Allocation_Horizontal-Raster_tag1@@": "Valorile din raster trebuie să fie numere întregi cuprinse între 0 și 360, 0 grade reprezentând nordul sau către partea superioară a ecranului, crescând în sens orar. Zonelor plate ar trebui să li se atribuie valoarea -1. Valorile din fiecare amplasare vor fi folosite împreună cu <strong>Factorul orizontal</strong> pentru a determina costul orizontal înregistrat la deplasarea de la o celulă la vecinele acesteia.",
	"@@Path-Distance-Allocation_Maximum-Distance_tag0@@": "Limita pe care valorile de cost acumulate nu o pot depăși. În cazul în care distanța-cost acumulată depășește această valoare, valoarea rezultată pentru amplasarea celulei va fi NoData. Distanța maximă definește extinderea pentru care sunt calculate distanțele-cost acumulate pentru distanță. Distanța implicită este reprezentată de extinderea rasterului de ieșire.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag0@@": "Un multiplicator care se aplică valorilor de cost.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag1@@": "Acest parametru permite controlul modului de deplasare sau magnitudinea pentru o sursă. Cu cât multiplicatorul este mai mare, cu atât costul de deplasare prin fiecare celulă este mai mare.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag2@@": "Valorile trebuie să fie mai mari decât zero. Valoarea implicită este 1.",
	"@@Path-Distance-Allocation_Multiplier-to-Apply-to-Costs_tag3@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Path-Distance-Allocation_Source-Field_tag0@@": "Câmpul utilizat pentru alocarea valorilor la amplasările sursă. Trebuie să fie un tip de număr întreg. Dacă a fost stabilit <strong>Rasterul Valoare</strong>, valorile din acea intrare vor avea prioritate față de orice setare pentru <strong>Câmpul Sursă</strong>.",
	"@@Path-Distance-Allocation_Source-Raster_tag0@@": "Rasterul de intrare necesar pentru amplasările sursă.",
	"@@Path-Distance-Allocation_Source-Raster_tag1@@": "Acesta este un raster care identifică celulele sau amplasările pe baza cărora se calculează cea mai mică valoare cost-distanță pentru fiecare amplasare de celulă de ieșire.",
	"@@Path-Distance-Allocation_Source-Raster_tag2@@": "Poate fi de tip număr întreg sau virgulă mobilă.",
	"@@Path-Distance-Allocation_Start-Cost_tag0@@": "Costul inițial de la care pornesc calculele de cost. Acest parametru permite specificarea costului fix asociat unei surse. În loc să înceapă la un cost cu valoarea 0, algoritmul de cost va începe cu valoarea specificată.",
	"@@Path-Distance-Allocation_Start-Cost_tag1@@": "Valoarea trebuie să fie cel puțin zero. Valoarea implicită este 0.",
	"@@Path-Distance-Allocation_Surface-Raster_tag0@@": "Un raster care definește valorile de elevație pentru fiecare amplasare de celulă.",
	"@@Path-Distance-Allocation_Surface-Raster_tag1@@": "Valorile sunt utilizate pentru a calcula distanța suprafeței efective acoperite la comutarea între celule.",
	"@@Path-Distance-Allocation_Travel-Direction_tag0@@": "Definește direcția de deplasare la aplicarea ratei de rezistență a sursei și costul inițial al sursei.",
	"@@Path-Distance-Allocation_Travel-Direction_tag1@@": "<strong>De la sursă</strong>----Rata de rezistență a sursei și costul inițial al sursei vor fi aplicate începând cu sursa de intrare și ajungând la celule care nu aparțin sursei. Aceasta este setarea implicită.",
	"@@Path-Distance-Allocation_Travel-Direction_tag3@@": "<strong>La sursă</strong>----Rata de rezistență a sursei și costul inițial al sursei vor fi aplicate începând cu fiecare celulă care nu aparține sursei și ajungând la sursa de intrare.",
	"@@Path-Distance-Allocation_Travel-Direction_tag5@@": "Fie specificați cuvântul-cheie <strong>De la sursă</strong> sau <strong>La sursă</strong>, care va fi aplicat tuturor surselor, fie specificați un câmp din <strong>Rasterul Sursă</strong> care include cuvintele cheie pentru a identifica direcția de deplasare pentru fiecare sursă. Câmpul respectiv trebuie să conțină șirul ${FROM_SOURCE} sau ${TO_SOURCE}.",
	"@@Path-Distance-Allocation_Value-Raster_tag0@@": "Rasterul de tip număr întreg care identifică valorile de zonă care trebuie să se utilizeze pentru fiecare amplasare sursă de intrare. Pentru fiecare celulă de localizare a sursei, valoarea definită de <strong>Rasterul Valoare</strong> va fi atribuită tuturor celulelor alocate localizării sursă pentru calcul. <strong>Rasterul Valoare</strong> va avea prioritate față de orice setare pentru <strong>Câmpul Sursă</strong>.",
	"@@Path-Distance-Allocation_verticalfactor_tag0@@": "<p>Definește relația dintre factorul de cost vertical și unghiul de deplasare relativă orizontală (VRMA).</p><p>Există mai mulți factori cu modificatori care identifică un grafic vertical definit al factorilor. În plus, se poate utiliza un tabel pentru a crea un grafic personalizat. Graficele sunt utilizate pentru a identifica factorul vertical utilizat la calcularea costului total pentru deplasarea pe o celulă învecinată.</p><p>În explicațiile de mai jos, sunt utilizate două acronime: VF și VRMA. VF vine de la factor vertical, care definește dificultatea verticală apărută la deplasarea de la o celulă la următoarea. VRMA reprezintă unghiul de deplasare relativă verticală, care identifică unghiul de înclinare dintre celula DE LA, sau de procesare, și celula CĂTRE.</p><p><strong>Tipurile de factori verticali</strong> includ următoarele:</p><ul><li><strong>Binar</strong>--Specifică faptul că, dacă VRMA este mai mare decât unghiul de tăietură joasă și mai mic decât unghiul de tăietură înaltă, VF este setat la valoarea asociată cu factorul zero; în caz contrar, este infinit.</li><li><strong>Liniar</strong>--Indică că VF este o funcție liniară a VRMA.</li><li><strong>Liniar simetric</strong>--Specifică faptul că VF este o funcție liniară a VRMA în partea negativă, respectiv pozitivă a VRMA, iar cele două funcții liniare sunt simetrice în raport cu axa VF (y).</li><li><strong>Liniar invers</strong>--Indică că VF este o funcție liniară inversă a VRMA.</li><li><strong>Liniar invers simetric</strong>--Specifică faptul că VF este o funcție liniară inversă a VRMA în partea negativă, respectiv pozitivă a VRMA, iar cele două funcții liniare sunt simetrice în raport cu axa VF (y).</li><li><strong>Cos</strong>--Identifică VF ca funcția pe bază de cosinus a VRMA.</li><li><strong>Sec</strong>--Identifică VF ca funcția pe bază de secantă a VRMA.</li><li><strong>Cos-Sec</strong>--Specifică faptul că VF este funcția bazată pe cosinus a VRMA atunci când VRMA este negativă și funcția bazată pe secantă a VRMA atunci când VRMA nu este negativă.</li><li><strong>Sec-Cos</strong>--Specifică faptul că VF este funcția bazată pe secante a VRMA atunci când VRMA este negativă și funcția bazată pe cosinus a VRMA atunci când VRMA nu este negativă.</li><li><strong>Tabel</strong>--Identifică faptul că un fișier tabel va fi utilizat pentru a defini graficul factorului vertical care este utilizat pentru a determina VF-urile.</li></ul><p>Modificatori ai cuvintelor cheie verticale includ următoarele:</p><ul><li><strong>Factorul zero</strong>--Stabilește factorul vertical utilizat atunci când VRMA este zero. Acest factor poziționează interceptarea y a funcției specificate. Potrivit definiției, factorul zero nu se aplică niciunei funcții verticale trigonometrice (COS, SEC, COS-SEC sau SEC-COS). Y-intercept este definit de aceste funcții.</li><li><strong>Unghiul de tăiere joasă</strong>--Definește unghiul VRMA sub care VF va fi setat la infinit..</li><li><strong>Unghiul de tăiere înaltă</strong>--Definește unghiul VRMA peste care VF va fi setat la infinit.</li><li><strong>Panta</strong>--Stabilește panta liniei drepte utilizate cu cuvintele cheie de factor vertical <strong>Liniar</strong>și<strong>Invers Liniar</strong>. Panta este specificată ca o fracție a gradientului (de exemplu, o pantă de 45 la sută este 1/45, care se introduce ca 0,02222).</li><li><strong>Numele tabelului</strong>--Identifică numele tabelului care definește VF.</li></ul>",
	"@@Path-Distance-Allocation_Vertical-Raster_tag0@@": "Definește relația dintre factorul de cost vertical și unghiul de deplasare relativă verticală (VRMA).",
	"@@Path-Distance-Allocation_Vertical-Raster_tag1@@": "Valorile sunt utilizate pentru calcularea pantei utilizate pentru identificarea factorului vertical apărut la deplasarea de la o celulă la alta.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag0@@": "Acest parametru simulează creșterea efortului de a face față costurilor pe măsură ce costul acumulat crește. Se utilizează pentru a modela oboseala persoanei care călătorește. Costul acumulat în creștere pentru a ajunge la o celulă este înmulțit cu rata de rezistență și adăugat la costul de deplasare la celula subsecventă.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag1@@": "Este o versiune modificată a formulei dobânzii compuse care se utilizează pentru a calcula costul aparent de deplasare printr-o celulă. Pe măsură ce valoarea ratei de rezistență crește, crește și costul pentru celulele vizitate mai târziu. Cu cât este mai mare rata de rezistență, cu atât este mai mare costul de deplasare la următoarea celulă, fiind compusă pentru fiecare mișcare subsecventă. Având în vedere că rata de rezistență este similară unei rate compuse și că, în general, valorile costului acumulat sunt foarte mari, sunt sugerate rate de rezistență mici, precum 0,005 sau chiar mai mici, în funcție de valoarea costului acumulat.",
	"@@Path-Distance-Back-Link_Accumulative-Cost-Resistance-Rate_tag2@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Path-Distance-Back-Link_Capacity_tag0@@": "Definește capacitatea costului pentru persoana care călătorește pentru o sursă. Calculele de cost continuă pentru fiecare sursă până când este atinsă capacitatea specificată.",
	"@@Path-Distance-Back-Link_Capacity_tag1@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag0@@": "Un raster de intrare necesar, care definește costul sau impedanța deplasării planimetrice prin fiecare celulă. Valoarea din fiecare amplasare a celulei reprezintă distanța cost-pe-unitate pentru deplasarea prin aceasta. Fiecare valoare de amplasare a celulei este înmulțită cu rezoluția celulei și se compensează deplasarea pe diagonală pentru a obține costul total al deplasării prin celulă.",
	"@@Path-Distance-Back-Link_Cost-Raster_tag1@@": "Valorile <strong>Raster de Cost</strong> poate fi un număr întreg sau o virgulă mobilă, dar nu pot fi negative sau zero.",
	"@@Path-Distance-Back-Link_horizontalfactor_tag0@@": "<p>Definește relația dintre factorul de cost orizontal și unghiul de deplasare relativă orizontală (HRMA).</p><p>Există mai mulți factori cu modificatori care identifică un grafic vertical definit al factorilor. În plus, se poate utiliza un tabel pentru a crea un grafic personalizat. Graficele sunt utilizate pentru a identifica factorul vertical utilizat la calcularea costului total pentru deplasarea pe o celulă învecinată.</p><p>În explicațiile de mai jos, sunt utilizate două acronime: HF și HRMA. HF vine de la factor orizontal, care definește dificultatea orizontală apărută la deplasarea de la o celulă la următoarea. HRMA vine de la unghi de deplasare relativă orizontală, care identifică unghiul dintre direcția orizontală de la o celulă și direcția de deplasare.</p><p><strong>Tipurile de factori orizontali</strong> includ următoarele:</p><ul><li><strong>Binar</strong>--Indică faptul că, în cazul în care HRMA este mai mic decât unghiul de tăiere, HF este setat la valoarea asociată factorului zero; în caz contrar, este infinit.</li><li><strong>Înainte</strong>--Stabilește că este permisă numai deplasarea înainte. HRMA trebuie să fie mai mare sau egal cu 0 și nu mai mic decât 90 de grade (0 &lt;= HRMA &lt; 90). Dacă HRMA este mai mare decât 0 și mai mic decât 45 de grade, HF pentru celulă este setat la valoarea asociată cu factorul zero. Dacă HRMA este mai mare sau egal cu 45 de grade, este utilizată valoarea modificatorului pentru valoarea laterală. HF pentru orice valoare HRMA egală sau mai mare de 90 de grade este setată la infinit.</li><li><strong>Liniar</strong>--Specifică faptul că HF este o funcție liniară a HRMA.</li><li><strong>Liniar invers</strong>--Specifică faptul că HF este o funcție liniară inversă a HRMA..</li><li><strong>Tabel</strong>--Identifică faptul că un fișier tabel va fi utilizat pentru a defini graficul factorului orizontal utilizat pentru a determina HF.</li></ul><p>:Factorii de modificare a factorilor orizontali includ următoarele</p><ul><li><strong>Zero factor</strong>--Factorul orizontal care urmează să fie utilizat atunci când HRMA este zero. Acest factor poziționează intersecția y pentru oricare dintre funcțiile factorului orizontal.</li><li><strong>Unghiul de tăiere</strong>--Definește unghiul HRMA dincolo de care HF va fi setat la infinit.</li><li><strong>Panta</strong>--Stabilește panta liniei drepte utilizate cu cuvintele cheie pentru factorul <strong>Liniar</strong>și<strong>Liniar invers</strong>orizontal. Panta este specificată ca o fracțiune de creștere față de cursă (de exemplu, o pantă de 45 la sută este 1/45, care se introduce ca 0,02222).</li><li><strong>Valoare secundară</strong>--Stabilește HF atunci când HRMA este mai mare sau egală cu 45 de grade și mai mică de 90 de grade atunci când cuvântul cheie al factorului <strong>înainte</strong>orizontal este specificat.</li><li><strong>N umele tabelului</strong>--Identifică numele tabelului care definește HF.</li></ul>",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag0@@": "Un raster care definește direcția orizontală pentru fiecare celulă.",
	"@@Path-Distance-Back-Link_Horizontal-Raster_tag1@@": "Valorile din raster trebuie să fie numere întregi cuprinse între 0 și 360, 0 grade reprezentând nordul sau către partea superioară a ecranului, crescând în sens orar. Zonelor plate ar trebui să li se atribuie valoarea -1. Valorile din fiecare amplasare vor fi folosite împreună cu <strong>Factorul orizontal</strong> pentru a determina costul orizontal înregistrat la deplasarea de la o celulă la vecinele acesteia.",
	"@@Path-Distance-Back-Link_Maximum-Distance_tag0@@": "Limita pe care valorile de cost acumulate nu o pot depăși. În cazul în care distanța-cost acumulată depășește această valoare, valoarea rezultată pentru amplasarea celulei va fi NoData. Distanța maximă definește extinderea pentru care sunt calculate distanțele-cost acumulate pentru distanță. Distanța implicită este reprezentată de extinderea rasterului de ieșire.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag0@@": "Un multiplicator care se aplică valorilor de cost.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag1@@": "Acest parametru permite controlul modului de deplasare sau magnitudinea pentru o sursă. Cu cât multiplicatorul este mai mare, cu atât costul de deplasare prin fiecare celulă este mai mare.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag2@@": "Valorile trebuie să fie mai mari decât zero. Valoarea implicită este 1.",
	"@@Path-Distance-Back-Link_Multiplier-to-Apply-to-Costs_tag3@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Path-Distance-Back-Link_Source-Raster_tag0@@": "Rasterul de intrare necesar pentru amplasările sursă.",
	"@@Path-Distance-Back-Link_Source-Raster_tag1@@": "Acesta este un raster care identifică celulele sau amplasările pe baza cărora se calculează cea mai mică valoare cost-distanță pentru fiecare amplasare de celulă de ieșire.",
	"@@Path-Distance-Back-Link_Source-Raster_tag2@@": "Poate fi de tip număr întreg sau virgulă mobilă.",
	"@@Path-Distance-Back-Link_Start-Cost_tag0@@": "Costul inițial de la care pornesc calculele de cost. Acest parametru permite specificarea costului fix asociat unei surse. În loc să înceapă la un cost cu valoarea 0, algoritmul de cost va începe cu valoarea specificată.",
	"@@Path-Distance-Back-Link_Start-Cost_tag1@@": "Valoarea trebuie să fie cel puțin zero. Valoarea implicită este 0.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag0@@": "Un raster care definește valorile de elevație pentru fiecare amplasare de celulă.",
	"@@Path-Distance-Back-Link_Surface-Raster_tag1@@": "Valorile sunt utilizate pentru a calcula distanța suprafeței efective acoperite la comutarea între celule.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag0@@": "Definește direcția de deplasare la aplicarea ratei de rezistență a sursei și costul inițial al sursei.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag1@@": "<strong>De la sursă</strong>----Rata de rezistență a sursei și costul inițial al sursei vor fi aplicate începând cu sursa de intrare și ajungând la celule care nu aparțin sursei. Aceasta este setarea implicită.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag3@@": "<strong>La sursă</strong>----Rata de rezistență a sursei și costul inițial al sursei vor fi aplicate începând cu fiecare celulă care nu aparține sursei și ajungând la sursa de intrare.",
	"@@Path-Distance-Back-Link_Travel-Direction_tag5@@": "Fie specificați cuvântul-cheie <strong>De la sursă</strong> sau <strong>La sursă</strong>, care va fi aplicat tuturor surselor, fie specificați un câmp din <strong>Rasterul Sursă</strong> care include cuvintele cheie pentru a identifica direcția de deplasare pentru fiecare sursă. Câmpul respectiv trebuie să conțină șirul ${FROM_SOURCE} sau ${TO_SOURCE}.",
	"@@Path-Distance-Back-Link_verticalfactor_tag0@@": "<p>Definește relația dintre factorul de cost vertical și unghiul de deplasare relativă orizontală (VRMA).</p><p>Există mai mulți factori cu modificatori care identifică un grafic vertical definit al factorilor. În plus, se poate utiliza un tabel pentru a crea un grafic personalizat. Graficele sunt utilizate pentru a identifica factorul vertical utilizat la calcularea costului total pentru deplasarea pe o celulă învecinată.</p><p>În explicațiile de mai jos, sunt utilizate două acronime: VF și VRMA. VF vine de la factor vertical, care definește dificultatea verticală apărută la deplasarea de la o celulă la următoarea. VRMA reprezintă unghiul de deplasare relativă verticală, care identifică unghiul de înclinare dintre celula DE LA, sau de procesare, și celula CĂTRE.</p><p><strong>Tipurile de factori verticali</strong> includ următoarele:</p><ul><li><strong>Binar</strong>--Specifică faptul că, dacă VRMA este mai mare decât unghiul de tăietură joasă și mai mic decât unghiul de tăietură înaltă, VF este setat la valoarea asociată cu factorul zero; în caz contrar, este infinit.</li><li><strong>Liniar</strong>--Indică că VF este o funcție liniară a VRMA.</li><li><strong>Liniar simetric</strong>--Specifică faptul că VF este o funcție liniară a VRMA în partea negativă, respectiv pozitivă a VRMA, iar cele două funcții liniare sunt simetrice în raport cu axa VF (y).</li><li><strong>Liniar invers</strong>--Indică că VF este o funcție liniară inversă a VRMA.</li><li><strong>Liniar invers simetric</strong>--Specifică faptul că VF este o funcție liniară inversă a VRMA în partea negativă, respectiv pozitivă a VRMA, iar cele două funcții liniare sunt simetrice în raport cu axa VF (y).</li><li><strong>Cos</strong>--Identifică VF ca funcția pe bază de cosinus a VRMA.</li><li><strong>Sec</strong>--Identifică VF ca funcția pe bază de secantă a VRMA.</li><li><strong>Cos-Sec</strong>--Specifică faptul că VF este funcția bazată pe cosinus a VRMA atunci când VRMA este negativă și funcția bazată pe secantă a VRMA atunci când VRMA nu este negativă.</li><li><strong>Sec-Cos</strong>--Specifică faptul că VF este funcția bazată pe secante a VRMA atunci când VRMA este negativă și funcția bazată pe cosinus a VRMA atunci când VRMA nu este negativă.</li><li><strong>Tabel</strong>--Identifică faptul că un fișier tabel va fi utilizat pentru a defini graficul factorului vertical care este utilizat pentru a determina VF-urile.</li></ul><p>Modificatori ai cuvintelor cheie verticale includ următoarele:</p><ul><li><strong>Factorul zero</strong>--Stabilește factorul vertical utilizat atunci când VRMA este zero. Acest factor poziționează interceptarea y a funcției specificate. Potrivit definiției, factorul zero nu se aplică niciunei funcții verticale trigonometrice (COS, SEC, COS-SEC sau SEC-COS). Y-intercept este definit de aceste funcții.</li><li><strong>Unghiul de tăiere joasă</strong>--Definește unghiul VRMA sub care VF va fi setat la infinit..</li><li><strong>Unghiul de tăiere înaltă</strong>--Definește unghiul VRMA peste care VF va fi setat la infinit.</li><li><strong>Panta</strong>--Stabilește panta liniei drepte utilizate cu cuvintele cheie de factor vertical <strong>Liniar</strong>și<strong>Invers Liniar</strong>. Panta este specificată ca o fracție a gradientului (de exemplu, o pantă de 45 la sută este 1/45, care se introduce ca 0,02222).</li><li><strong>Numele tabelului</strong>--Identifică numele tabelului care definește VF.</li></ul>",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag0@@": "Definește relația dintre factorul de cost vertical și unghiul de deplasare relativă verticală (VRMA).",
	"@@Path-Distance-Back-Link_Vertical-Raster_tag1@@": "Valorile sunt utilizate pentru calcularea pantei utilizate pentru identificarea factorului vertical apărut la deplasarea de la o celulă la alta.",
	"@@Plus_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Plus_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Plus_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Plus_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Plus_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Plus_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Plus_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Plus_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Plus_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Plus_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Plus_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Plus_Raster_tag0@@": "Intrarea din care vor fi adăugate valorile.",
	"@@Plus_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Plus_Raster2_tag0@@": "Intrarea din care vor fi adăugate valorile în prima intrare.",
	"@@Plus_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Local_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Local_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Local_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Local_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este acţiunea implicită.",
	"@@Local_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Local_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Local_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Local_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Local_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este acţiunea implicită.",
	"@@Local_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Local_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Local_Raster_tag0@@": "Intrarea din care vor fi adăugate valorile.",
	"@@Local_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Local_Raster2_tag0@@": "Intrarea din care vor fi adăugate valorile în prima intrare.",
	"@@Local_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Local_False-Raster_tag0@@": "Intrarea ale cărei valori vor fi utilizate ca valori ale pixelilor de ieșire dacă condiția este falsă. Poate fi un raster de tip număr întreg, cu virgulă mobilă sau o valoare constantă.",
	"@@Local_True-Raster_tag0@@": "Intrarea ale cărei valori vor fi utilizate ca valori ale pixelilor de ieșire dacă condiția este adevărată. Poate fi un raster de tip număr întreg, cu virgulă mobilă sau o valoare constantă.",
	"@@Power_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Power_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Power_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Power_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Power_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Power_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Power_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Power_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Power_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Power_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Power_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Power_Raster_tag0@@": "Valorile de intrare care vor fi ridicate la puterea definită de <strong>Raster2</strong>.",
	"@@Power_Raster_tag3@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Power_Raster2_tag0@@": "Intrarea care determină puterea la care vor fi ridicate valorile <strong>Raster</strong>.",
	"@@Power_Raster2_tag3@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Radar-Calibration_Calibration-Type_tag0@@": "Tipul de calibrare care va fi efectuat.",
	"@@Radar-Calibration_Calibration-Type_tag1@@": "Zero beta--Funcția returnează reflectivitatea radarului pe suprafață liniară în intervalul înclinat. Acesta este tipul implicit de calibrare.",
	"@@Radar-Calibration_Calibration-Type_tag2@@": "Zero sigma--Funcția returnează reflectivitatea radarului pe suprafață liniară în intervalul solului. Rezultatele sunt valori cu virgule mobile de 32 biți, de obicei în intervalul 0-1. Nu se efectuează decuparea datelor dacă este selectată această opțiune.",
	"@@Radar-Calibration_Calibration-Type_tag3@@": "Gamma--Funcția returnează reflectivitatea radarului pe suprafață liniară în plan perpendicular pe direcția de măsurare.",
	"@@Radar-Calibration_Calibration-Type_tag4@@": "Niciuna",
	"@@Radar-Calibration_Raster_tag0@@": "Rasterul de intrare.",
	"@@RasterInfo_Raster-Info_tag0@@": "Selectați un set de date raster pentru utilizare ca șablon",
	"@@RasterInfo_Raster_tag0@@": "Rasterul de intrare.",
	"@@Rasterize-Attributes_Attribute-Field-Names_tag0@@": "O listă a câmpurilor din <strong>Tabel cu Atribute Zonale</strong>, unde fiecare câmp este separat cu o virgulă. Valorile din fiecare câmp vor fi reprezentate de către o bandă în rasterul de ieșire.",
	"@@Rasterize-Attributes_Background-Value_tag0@@": "Valoarea inițială a pixelilor pentru benzile de ieșire dintr-un raster înainte de recartografiere.",
	"@@Rasterize-Attributes_Background-Value_tag1@@": "Dacă un pixel nu se încadrează într-o zonă, acesta va rămâne ca valoare fundal.",
	"@@Rasterize-Attributes_Value-Raster_tag0@@": "Rasterul de intrare necesar.",
	"@@Rasterize-Attributes_Value-Raster_tag1@@": "Intrarea ar trebui să fie un raster de bandă unică. Dacă este utilizat un raster cu benzi multiple, va fi utilizată doar prima bandă.",
	"@@Rasterize-Attributes_Where-Clause_tag0@@": "O interogare suplimentară opțională aplicată <strong>Tabelului cu Atribute Zonale</strong>.",
	"@@Rasterize-Attributes_Where-Clause_tag3@@": "Dacă ați utiliza tabelul de mai sus ca exemplu, interogarea ar fi ${Variable1 = 'bare earth'}.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag0@@": "Atributele zonale specificate, precum calea către o clasă de obiecte spațiale locale, calea către un tabel, URL-ul către un strat tematic de obiecte spațiale de serviciu sau un șir JSON.",
	"@@Rasterize-Attributes_Zonal-Attributes-Table_tag1@@": "În JSON, se descrie ca o colecție de cartografiere de la ID-urile de zonă la o serie de numere întregi. ${{ zoneId:[f1,f2,...,fn], ... } }",
	"@@Rasterize-Attributes_Zone-Field_tag0@@": "Numele de câmp care conțin valorile ID-urilor de zonă.",
	"@@Rasterize-Attributes_Zone-Raster_tag0@@": "Un raster de bandă unică opțional unde fiecare pixel conține ID-ul zonei asociate cu amplasarea. ID-ul zonei este utilizat pentru căutarea rândurilor în tabelul cu atribute zonale pentru ingestia specifică zonei.",
	"@@Rasterize-Attributes_Zone-Raster_tag1@@": "Nu specificați acest parametru dacă doriți doar importul atributului.",
	"@@Rasterize-Features_Field_tag0@@": "Selectați câmpul de utilizat pentru identificarea fiecărui obiect spațial.",
	"@@Rasterize-Features_Input-Features_tag0@@": "Selectați clasa de obiecte spațiale de convertit la formatul rasterului.",
	"@@Rasterize-Features_Raster_tag0@@": "Selectați un raster pentru definirea dimensiunii celulei și a limitei pentru conversia obiectelor spațiale.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag0@@": "Determinați modul de gestionare a obiectelor spațiale care se suprapun:",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag1@@": "<strong>Primul</strong>--Zonelor suprapuse le va fi alocată o valoare din primul set de date listat.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag3@@": "<strong>Ultimul</strong>--Zonelor suprapuse le va fi alocată o valoare din ultimul set de date listat.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag5@@": "<strong>Cel mai mic</strong>--Zonelor suprapuse le va fi alocată o valoare din cel mai mic dintre obiectele spațiale.",
	"@@Rasterize-Features_Resolve-Overlap-Method_tag7@@": "<strong>Cel mai mare</strong>--Zonelor suprapuse le va fi alocată o valoare din cel mai mare dintre obiectele spațiale.",
	"@@Recast_Overrides_tag0@@": "Un tabel cu numele variabilelor și valorile definite de utilizator utilizate pentru modificarea unui set de date mozaic.",
	"@@Recast_Raster_tag0@@": "Produsul raster la care se va aplica funcția Realocare.",
	"@@Region-Group_Add-Link_tag0@@": "Specifică dacă este adăugat un câmp de legătură în tabelul de ieșire.",
	"@@Region-Group_Add-Link_tag1@@": "<strong>Adaugă Link</strong>----Va fi adăugat un reper ${LINK} în tabelul rasterului de ieșire.",
	"@@Region-Group_Add-Link_tag3@@": "<strong>Niciun Link</strong>--Tabelul de atribute pentru rasterul de ieșire va conține doar reperele ${Value} și ${Count}.",
	"@@Region-Group_Excluded-Value_tag0@@": "Identifică o valoare, iar în momentul în care o amplasare de celulă conține valoarea, conectivitatea spațială nu va fi evaluată, indiferent de numărul de vecini specificat (PATRU sau OPT).",
	"@@Region-Group_Excluded-Value_tag1@@": "Celulele cu valoarea exclusă vor fi tratate ca NoData și vor fi eliminate din calcule. Amplasările de celule care conțin valoarea exclusă vor primi 0 în rasterul de ieșire.",
	"@@Region-Group_Excluded-Value_tag2@@": "Valoarea exclusă este similară conceptului de valoare fundal sau aplicării unei măști. Trebuie specificată o valoare pentru acest parametru dacă este specificat parametrul <strong>${CROSS}</strong>.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag0@@": "Numărul de celule învecinate de utilizat la evaluarea conectivității între celule.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag1@@": "<strong>PATRU</strong>--Definește conectivitatea între celule cu aceeași valoare numai dacă celulele sunt direct în stânga, în dreapta, deasupra sau sub unul dintre cei mai apropiați patru vecini. Aceasta este setarea implicită.",
	"@@Region-Group_Number-of-Neighbor-Cells_tag3@@": "<strong>OPT</strong>--Definește conectivitatea între celule cu aceeași valoare numai dacă se numără printre cele opt celule din imediata apropiere. Aceasta înseamnă că trebuie să fie și în dreapta, în stânga, deasupra sau pe diagonală una față de cealaltă.",
	"@@Region-Group_Zone-Connectivity_tag0@@": "Definește valorile celulelor care trebuie luate în considerare la testarea conectivității.",
	"@@Region-Group_Zone-Connectivity_tag1@@": "<strong>ÎN CADRUL</strong>--Testează conectivitatea între valorile de intrare care se află în aceeași zonă. Aceasta este setarea implicită.",
	"@@Region-Group_Zone-Connectivity_tag3@@": "Singurele celule care pot fi grupate ca celule din aceeași zonă (valoare) care îndeplinesc cerințele spațiale de conectivitate specificate de parametrul <strong>Număr de vecini</strong> (în patru sau în opt).",
	"@@Region-Group_Zone-Connectivity_tag6@@": "<strong>ÎNCRUCIȘAT</strong>--Testează conectivitatea în privința cerințelor spațiale specificate de parametrul referitor la numărul de vecini, între celule de orice valoare, cu excepția valorii identificată ca fiind exclusă de parametrul referitor la valoarea exclusă.",
	"@@Region-Group_Zone-Connectivity_tag8@@": "La utilizarea acestei opțiuni, trebuie specificată o valoare pentru parametrul <strong>Valoarea exclusă</strong>.",
	"@@Region-Group_Zone-Raster_tag0@@": "Rasterul de intrare necesar, al căror regiuni conectate unice vor fi identificate.",
	"@@Region-Group_Zone-Raster_tag1@@": "Trebuie să fie de tip număr întreg.",
	"@@Region-Grow_Fill-Value-Field_tag0@@": "Câmpul din tabelul de atribute care definește valoarea de completare pentru grupul de pixeli. În cadrul unei imagini cu mai multe benzi, tuturor benzilor li se va atribui această valoare.",
	"@@Region-Grow_Max-Growth-Radius-Field_tag0@@": "Câmpul din tabelul de atribute care definește raza maximă de creștere, în unitățile de referință spațiale ale imaginii.",
	"@@Region-Grow_Raster_tag0@@": "Rasterul în care doriți să fie efectuată această funcție.",
	"@@Region-Grow_Seed-Points_tag0@@": "O clasă de obiecte spațiale de tip punct, care servesc drept elemente inițiale ale algoritmului. Fiecare punct inițial corespunde unei intrări din tabelul de atribute, care conține raza de creștere maximă, limita de similaritate și informațiile privind valoarea de completat.",
	"@@Region-Grow_Similarity-Threshold-Field_tag0@@": "Câmpul din tabelul de atribute care definește limita de similaritate, precum distanța euclidiană într-un spațiu spectral.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag0@@": "Valorile lipsă din tabelul de reclasificare pot rămâne aceleași sau pot fi recartografiate la NoData.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag1@@": "Debifat--Orice pixel din rasterul de intrare care nu este reclasificat într-un tabel de recartografiere își va păstra valoarea și va fi creat pentru amplasarea sa din rasterul de ieșire. Aceasta este acţiunea implicită.",
	"@@Remap_Allow-Unmatched-Pixel-Values_tag2@@": "Debifat--Oricărui pixel din rasterul de intrare care nu este reclasificat într-un tabel de recartografiere îi va recartografiată valoarea la NoData pentru amplasarea sa din rasterul de ieșire.",
	"@@Remap_Input-Field_tag0@@": "Alegeți câmpul care specifică valoarea pixelilor de intrare care vor fi recartografiați.",
	"@@Remap_Input-Field_tag1@@": "Dacă tabelul dvs. are un interval de valori, acesta va fi câmpul valorii minime, și trebuie specificat și parametrul <strong>Câmp Intrare Max</strong>.",
	"@@Remap_Input-Max-Field_tag0@@": "Alegeți câmpul de valoare maximă dacă tabelul specifică un interval de valori.",
	"@@Remap_List_tag0@@": "Specificați valorile de hartă și specificați intervalul de valoare minimă și maximă și noile valori de recartografiere. În plus, intervalul de valori va fi setat ca pixeli NoData.",
	"@@Remap_Output-Field_tag0@@": "Alegeți câmpul care va fi utilizat ca valoare recartografiată rezultată.",
	"@@Remap_Raster_tag0@@": "Rasterul de intrare.",
	"@@Remap_Remap-Definition-Type_tag0@@": "Alegeți opțiunea pe care doriți să o utilizați pentru setarea valorilor de recartografiere:",
	"@@Remap_Remap-Definition-Type_tag1@@": "Listă--Specificați un interval de valori de pixeli pentru a-l cartografia la o valoare de pixel de ieșire",
	"@@Remap_Remap-Table-Type_tag0@@": "Alegeți tipul de tabel pe care îl veți utiliza pentru recartografierea rasterului de intrare:",
	"@@Remap_Remap-Table-Type_tag1@@": "Simplu--Utilizează intrarea <strong>Tabel de Recartografiere</strong> pentru a recartografia valorile pixelului din <strong>Câmp Intrare</strong> conform valorii corespondente din parametrul <strong>Câmp Ieșire</strong>. Această metodă stochează tabelul de recartografiere într-o memorie cache pentru a funcționa mai rapid.",
	"@@Remap_Remap-Table-Type_tag8@@": "Dinamic--Această metodă nu stochează tabelul de recartografiere în memoria cache și va efectua o interogare de fiecare dată când este efectuată o solicitare (panoramare, transfocare sau reîmprospătare). Dacă tabelul se schimbă, următoarea solicitare poate recartografia dinamic valorile în mod corespunzător.",
	"@@Remap_Remap-Table-Type_tag9@@": "Realocare--Un tabel specific utilizat pentru procesul de reclasificare, unde fiecare rând din tabel va fi recartografiat numai pe baza fiecărei limite de obiect spațial.",
	"@@Remap_Remap-Table_tag0@@": "Navigați la tabelul care vă setează valorile de recartografiere.",
	"@@Reproject_Raster_tag0@@": "Setul de date raster care va fi reproiectat sau reeșantionat.",
	"@@Reproject_Spatial-Reference_tag0@@": "Sistemul de coordonate utilizat pentru reproiectarea datelor.",
	"@@Reproject_X-Cellsize_tag0@@": "Dimensiunea x la care datele ar trebui reeșantionate. Aceasta este opțională. Dacă valoarea este 0 sau mai mică, înfășurătoarea de ieșire (dimensiunile celulei și extinderea) este calculată pe baza rasterului de intrare.",
	"@@Reproject_X-Registration-Point_tag0@@": "Coordonata x utilizată pentru definirea colțului din stânga sus al setului de date. Această coordonată trebuie definită în unitățile pentru noua referință spațială. Dacă atât parametrul <strong>Dimensiune celulă X</strong> cât și parametrul <strong>Dimensiune celulă Y</strong> sunt mai mari decât 0, aceștia sunt folosiți împreună cu parametrii <strong>Punct de Înregistrare X</strong> și <strong>Punct de Înregistrare Y</strong> pentru a defini anvelopa de ieșire.",
	"@@Reproject_Y-Cellsize_tag0@@": "Dimensiunea y la care datele ar trebui reeșantionate. Aceasta este opțională. Dacă valoarea este 0 sau mai mică, înfășurătoarea de ieșire (dimensiunile celulei și extinderea) este calculată pe baza rasterului de intrare.",
	"@@Reproject_Y-Registration-Point_tag0@@": "Coordonata y utilizată pentru definirea colțului din stânga sus al setului de date. Această coordonată trebuie definită în unitățile pentru noua referință spațială. Dacă atât parametrul <strong>Dimensiune celulă X</strong> cât și parametrul <strong>Dimensiune celulă Y</strong> sunt mai mari decât 0, aceștia sunt folosiți împreună cu parametrii <strong>Punct de Înregistrare X</strong> și <strong>Punct de Înregistrare Y</strong> pentru a defini anvelopa de ieșire.",
	"@@Resample_Input-Cellsize_tag0@@": "Dimensiunea celulelor pixelilor pentru rasterul de intrare.",
	"@@Resample_Output-Cellsize_tag0@@": "Dimensiunea celulelor pixelilor pentru rasterul de ieșire. Dimensiunea celulelor poate fi schimbată, dar extinderea setului de date raster va rămâne aceeași. Reeșantionarea dintr-o dimensiune a celulelor definită de utilizator poate fi mult mai lentă decât setarea implicită de sistem, deoarece reeșantionarea implicită de sistem procesează cantitatea minimă a datelor din cea mai apropiată rezoluție posibilă.",
	"@@Resample_Raster_tag0@@": "Rasterul de intrare care trebuie reeșantionat.",
	"@@Resample_Resampling-Type_tag0@@": "<strong>Cel mai apropiat vecin</strong>--Calculează valoarea pixelului de ieșire folosind cel mai apropiat pixel de intrare. Pixelii NoData vor rămâne neschimbați în setul de date raster de ieșire. Aceasta este setarea implicită.",
	"@@Resample_Resampling-Type_tag2@@": "<strong>Interpolare biliniară</strong>--Calculează valoarea pixelilor utilizând valoarea ponderată a distanței pentru cei mai apropiați patru pixeli. Această metodă este eficientă pentru proces în ceea ce privește calculul.",
	"@@Resample_Resampling-Type_tag4@@": "<strong>Convoluție cubică</strong>--Determină noua valoare a unui pixel la încadrarea unei curbe netede prin cele mai apropiate 16 centre ale pixelilor de intrare.",
	"@@Resample_Resampling-Type_tag6@@": "<strong>Majoritate</strong>--Calculează valoarea pixelilor utilizând valoarea majorității pixelilor din cei mai apropiați 16 pixeli. Pixelii NoData vor rămâne neschimbați în setul de date raster de ieșire.",
	"@@Resample_Resampling-Type_tag8@@": "<strong>Interpolare Biliniară Plus</strong>--Utilizează <strong>Interpolarea Biliniară</strong>, exceptând faptul că pixelii de la nivelul marginilor sunt definiți ca NoData și că nu sunt duplicate sau luate în considerare la calcul. Utilizați <strong>Interpolare Biliniară Plus</strong> pentru datele optimizate deoarece marginile se vor potrivi mai bine.",
	"@@Resample_Resampling-Type_tag14@@": "<strong>Estompare Gauss</strong>--Aplică o convoluție gaussiană la rasterul sursă și calculează valoarea pixelilor utilizând valoarea ponderată a distanței celor mai apropiați patru pixeli de la rasterul estompat. Este o opțiune corespunzătoare pentru eliminarea zgomotului din datele reeșantionate și pentru reducerea eșantionării la o dimensiune mai mare a pixelilor.",
	"@@Resample_Resampling-Type_tag16@@": "<strong>Estompare Gauss Plus</strong>--Utilizează aceeași metodă ca <strong>Estomparea Gauss</strong>, exceptând faptul că pixelii de la nivelul marginilor sunt definiți ca NoData și că nu sunt duplicate sau luate în considerare la calcul. Utilizați <strong>Estompare Gauss Plus</strong> pentru datele optimizate deoarece marginile se vor potrivi mai bine.",
	"@@Resample_Resampling-Type_tag22@@": "<strong>Medie</strong>--Calculează valorile pixelilor utilizând valoarea medie a tuturor pixelilor suprapuși, pentru fiecare pixel țintă.",
	"@@Resample_Resampling-Type_tag24@@": "<strong>Minimum</strong>--Calculează valoarea pixelilor utilizând valoare minimă a tuturor pixelilor suprapuși. Pixelii NoData vor rămâne neschimbați în setul de date raster de ieșire.",
	"@@Resample_Resampling-Type_tag26@@": "<strong>Maximum</strong>--Opțiunea corespunzătoare pentru datele continue, rezultă o imagine mai netedă decât în cazul metodei de reeșantionare Cel mai apropiat vecin.",
	"@@Resample_Resampling-Type_tag28@@": "<strong>Media Vectorului</strong>--Calculează media vectorului pentru magnitudine-direcție utilizând toți pixelii implicați. Această metodă se aplică numai pentru rasterele cu două benzi care reprezintă magnitudinea și direcția. Mai întâi convertește magnitudine-direcție în U-V, apoi preia media aritmetică de la toți pixelii implicați pentru a obține U-V pentru pixelul țintă și face din nou conversia la magnitudine-direcție.",
	"@@Round-Down_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Round-Down_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Round-Down_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Round-Down_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Round-Down_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Round-Down_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Round-Down_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Round-Down_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Round-Down_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Round-Down_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Round-Down_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Round-Down_Raster_tag0@@": "Valoarea de intrare care trebuie rotunjită prin lipsă.",
	"@@Round-Up_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Round-Up_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Round-Up_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Round-Up_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Round-Up_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Round-Up_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Round-Up_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Round-Up_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Round-Up_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Round-Up_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Round-Up_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Round-Up_Raster_tag0@@": "Valoarea de intrare care trebuie rotunjită prin adăugare.",
	"@@Segment-Mean-Shift_Minimum-Segment-Size-in-Pixels_tag0@@": "Dimensiunea maximă a segmentelor, măsurată în pixeli. Această valoare are legătură cu unitatea minimă de cartografiere și va filtra blocurile mai mici de pixeli. Toate segmentele care sunt mai mici decât valoarea specificată vor fuziona segmentele mai mici cu segment învecinatul care se potrivește cel mai bine.",
	"@@Segment-Mean-Shift_Raster_tag0@@": "Rasterul de intrare care trebuie segmentat.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag0@@": "Limitele segmentelor sunt desenate precum o linie de contur de culoare neagră în jurul fiecărui segment. Acest lucru este util pentru a distinge segmentele adiacente care au culori similare.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag1@@": "Nebifat--Limitele segmentelor nu sunt afișate. Aceasta este setarea implicită.",
	"@@Segment-Mean-Shift_Segment-boundaries-only_tag2@@": "Bifat--Limitele segmentelor sunt afișate cu linii de contur de culoare neagră în jurul fiecărui segment.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag0@@": "Importanța relativă a separării obiectelor se bazează pe caracteristicile spațiale.",
	"@@Segment-Mean-Shift_Spatial-Detail_tag1@@": "Valorile valide de număr întreg variază între 1 și 20. Valorile mai mici rezultă în clase extinse și mai netede. O valoare mai mare este potrivită pentru discriminarea între obiectele spațiale care au un spațiu restrâns și care sunt grupate împreună. De exemplu, într-o scenă urbană, ați putea clasifica obiecte spațiale de suprafață impermeabilă generală utilizând o valoare de detaliu spațial mai mică sau ați putea clasifica clădirile și drumurile ca și clase separate utilizând o valoare de detaliu spațial mai mare.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag0@@": "Importanța relativă a separării obiectelor se bazează pe caracteristicile de culoare.",
	"@@Segment-Mean-Shift_Spectral-Detail_tag1@@": "Valorile valide cu virgulă mobilă variază între 1 și 20. Valorile mai mici rezultă în clase extinse și mai netede. O valoare mai mare este adecvată atunci când doriți să diferențiați între obiectele spațiale care au caracteristici relativ similare. De exemplu, utilizând o valoare mai mare pentru detaliul spectral într-o scenă de pădure vă permite să distingeți specii diferite de copaci.",
	"@@Segment-Mean-Shift_maximumsegmentsizeinpixels_tag0@@": "<p>Dimensiunea maximă a unui segment. Segmentele care sunt mai mari decât dimensiunea specificată vor fi împărțite. Utilizați acest parametru pentru a preveni apariția unor artefacte în stratul de ieșire care rezultă din segmente mari. Valoarea implicită este -1.</p>",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag0@@": "Selectați una dintre cele patru tipuri de calibrare:",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag1@@": "<strong>Beta zero</strong>--are un rezultat care conține coeficientul de luminozitate a radarului.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag3@@": "<strong>Sigma zero</strong>--retroîmprăștierea returnată la antenă de la o suprafață unitară de la nivelul solului, referitoare la intervalul solului.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag5@@": "<strong>Gama</strong>--măsurarea energiei emise și returnate, utilă pentru determinarea tiparelor de antenă.",
	"@@Sentinel-1-Radiometric-Calibration_Calibration-Type_tag7@@": "<strong>Niciuna</strong>--nu aplicați o corecție. Aceasta este setarea implicită.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag0@@": "Rasterul de intrare Sentinel-1 Level-1 GRD sau SLC pe care doriți să-l procesați.",
	"@@Sentinel-1-Radiometric-Calibration_Raster_tag1@@": "Funcția va utiliza fișierul LUT pentru a aplica corecția termică sau pentru a elimina corecția, în funcție de conținutul LUT.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag0@@": "Rasterul de intrare Sentinel-1 pe care doriți să-l procesați.",
	"@@Sentinel-1-Thermal-Noise-Removal_Raster_tag1@@": "Funcția va utiliza fișierul LUT pentru a aplica corecția termică sau pentru a elimina corecția în funcție de conținutul LUT.",
	"@@Set-Null_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Set-Null_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Set-Null_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Set-Null_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Set-Null_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Set-Null_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Set-Null_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Set-Null_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Set-Null_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Set-Null_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Set-Null_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Set-Null_False-Raster_tag0@@": "Intrarea ale cărei valori vor fi utilizate ca valori ale pixelilor de ieșire dacă condiția este falsă. Poate fi un raster de tip număr întreg, cu virgulă mobilă sau o valoare constantă.",
	"@@Set-Null_Raster_tag0@@": "Rasterul de intrare care reprezintă rezultatul Boolean al unei funcții raster matematice logice. Valorile pot fi între 1 (pentru adevărat) sau 0 (pentru fals). Poate fi un raster de tip număr întreg sau cu virgulă mobilă.",
	"@@Shaded-Relief_Altitude_tag0@@": "Altitudinea este unghiul de elevație al soarelui deasupra orizonului și variază între 0 și 90 de grade. Valoarea de 0 grade indică faptul că soarele este la orizont, adică pe același plan orizontal precum cadrul de referință. Valoarea de 90 de grade indică faptul că soarele se află exact deasupra. Valoarea implicită este de 45 de grade deasupra orizontului.",
	"@@Shaded-Relief_Azimuth_tag0@@": "Azimutul este poziția relativă a soarelui de-a lungul orizontului (în grade). Această poziție este indicată de unghiul soarelui măsurat în sens orar de la nord. Un azimut de 0 grade indică nordul, estul este de 90 de grade, sudul este de 180 de grade, iar vestul este de 270 de grade.",
	"@@Shaded-Relief_Color-Scheme-Type_tag0@@": "Specificați dacă va fi utilizată o rampă de culoare sau o hartă color pentru afișarea reliefului umbrit.",
	"@@Shaded-Relief_Color-Scheme-Type_tag1@@": "<strong>Rampă de culori</strong>--Atunci când alegeți <strong>Rampă de culori</strong>, vi se va cere să selectați o rampă de culori adecvată.",
	"@@Shaded-Relief_Color-Scheme-Type_tag5@@": "<strong>Hartă de culoare</strong>--Atunci când alegeți <strong>Hartă de culoare</strong>, vi se va cere să specificați fișierul hărții de culori de utilizat.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag0@@": "Specificați dacă va fi dezactivată interpolarea pixelilor de muchie.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag1@@": "Nebifat--Reeșantionarea biliniară va fi aplicată uniform pentru reeșantionarea reliefului umbrit. Aceasta este setarea implicită.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag2@@": "Bifat--Reeșantionarea biliniară va fi utilizată în relieful umbrit, exceptând de-a lungul marginilor rasterelor sau lângă pixelii NoData. Acești pixeli vor fi populați cu NoData, deoarece se va reduce orice efect de margine ascuțită care apare.",
	"@@Shaded-Relief_Disable-default-edge-pixel-interpolation_tag3@@": "Utilizând această opțiune, va fi evitată apariția posibilelor artefactelor de reeșantionare pe marginile unui raster. Pixelii de ieșire de pe marginea unui raster sau lângă pixelii fără valoare vor fi populați cu NoData; prin urmare, se recomandă utilizarea acestei opțiuni numai dacă există alte rastere cu pixeli suprapuși disponibili. Atunci când sunt disponibili pixeli care se suprapun, aceste zone NoData vor afișa valorile de pixeli care se suprapun în locul unora goi.",
	"@@Shaded-Relief_Raster_tag0@@": "Rasterul de elevație de intrare.",
	"@@Shaded-Relief_Scaling_tag0@@": "Rezultatul umbrit este scalat dinamic prin ajustarea factorului Z, utilizând una dintre cele două opțiuni:",
	"@@Shaded-Relief_Scaling_tag1@@": "<strong>Niciuna</strong>--Nu se aplică nicio scalare. Această opțiune este ideală pentru un set de date raster unic care acoperă o suprafață locală. Nu este recomandată pentru seturile de date din întreaga lume cu variații mari în elevație sau pentru hărțile cu scări multiple, deoarece vor produce un relief cu mici variații la scară mică.",
	"@@Shaded-Relief_Scaling_tag3@@": "<strong>Ajustat</strong>--O ajustare neliniară se aplică folosind valorile implicite <strong>Puterea Dimensiunii Pixelului</strong> și <strong>Factorul Dimensiunii Pixelului</strong>, care includ o largă varietate de schimbări de altitudine (scară) pe măsură ce privitorul mărește și micșorează imaginea. Opțiunea <strong>Ajustat</strong> este recomandată la utilizarea unui set de date din întreaga lume.",
	"@@Shaded-Relief_Z-Factor_tag0@@": "Factorul z este un factor de scalare utilizat pentru a converti valorile de elevație în două scopuri:",
	"@@Shaded-Relief_Z-Factor_tag1@@": "Pentru a converti unitățile de elevație (cum ar fi metri sau ft) la unitățile coordonatelor orizontale ale setului de date, care pot fi ft, metri sau grade",
	"@@Shaded-Relief_Z-Factor_tag2@@": "Pentru a adăuga exagerare verticală pentru un efect vizual",
	"@@Shaded-Relief_Z-Factor_tag3@@": "Rezultatul umbrit este scalat dinamic prin ajustarea factorului Z, utilizând una dintre cele două opțiuni:",
	"@@Shaded-Relief_Z-Factor_tag4@@": "<strong>Niciuna</strong>--Nu se aplică nicio scalare. Această opțiune este ideală pentru un set de date raster unic care acoperă o suprafață locală. Nu este recomandată pentru seturile de date din întreaga lume cu variații mari în elevație sau pentru hărțile cu scări multiple, deoarece vor produce un relief cu mici variații la scară mică.",
	"@@Shaded-Relief_Z-Factor_tag6@@": "<strong>Ajustat</strong>--O ajustare neliniară se aplică folosind valorile implicite <strong>Puterea Dimensiunii Pixelului</strong> și <strong>Factorul Dimensiunii Pixelului</strong>, care includ o largă varietate de schimbări de altitudine (scară) pe măsură ce privitorul mărește și micșorează imaginea. Opțiunea <strong>Ajustat</strong> este recomandată la utilizarea unui set de date din întreaga lume.",
	"@@Shaded-Relief_hillshadetype_tag0@@": "Controlează sursa de iluminare pentru efectul de umbră.",
	"@@Shaded-Relief_hillshadetype_tag1@@": "<strong>Tradițional<strong>--Calculează efectul de umbră dintr-o direcție de iluminare unică. Puteți seta opțiunile <strong>Azimut</strong> și <strong>Altitudine</strong> pentru a controla amplasarea sursei de lumină. Aceasta este setarea implicită.",
	"@@Shaded-Relief_hillshadetype_tag2@@": "<strong>Multidirecțional<strong>--Combină lumina din mai multe surse pentru a reprezenta o vizualizare îmbunătățită a terenului.",
	"@@Shaded-Relief_PSPower_tag0@@": "<strong>Puterea de dimensiune a pixelilor</strong> ia în calcul schimbările de altitudine (sau scalare) pe măsură ce vizualizatorul mărește și micșorează afișarea hărții. Este exponentul aplicat la termenul dimensiunii pixelului din ecuație care controlează rata la care se schimbă <strong>Factorul Z</strong> pentru a evita pierderi semnificative de relief.",
	"@@Shaded-Relief_PSPower_tag1@@": "Acest parametru este valabil doar atunci când tipul <strong>Scalare</strong> este <strong>ajustat</strong>. Valoarea implicită este 0,664.",
	"@@Shaded-Relief_PSZFactor_tag0@@": "<strong>Factorul de dimensiune a pixelilor</strong> ia în calcul schimbările de scalare pe măsură ce aplicația de vizualizare mărește și micșorează afișarea hărții. Controlează rata la care se schimbă <strong>Factorul Z</strong>.",
	"@@Shaded-Relief_PSZFactor_tag1@@": "Acest parametru este valabil doar atunci când tipul <strong>Scalare</strong> este <strong>ajustat</strong>. Valoarea implicită este 0,024.",
	"@@Sin_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Sin_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Sin_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Sin_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Sin_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Sin_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Sin_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Sin_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Sin_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Sin_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Sin_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Sin_Raster_tag0@@": "Intrarea pentru care se calculează valorile pentru sinus.",
	"@@SinH_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@SinH_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@SinH_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@SinH_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@SinH_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@SinH_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@SinH_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@SinH_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@SinH_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@SinH_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@SinH_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@SinH_Raster_tag0@@": "Intrarea pentru care se calculează valorile hiperbolice pentru sinus.",
	"@@Sink_Flow-Direction-Raster_tag0@@": "Rasterul de intrare care prezintă direcția de curgere din fiecare celulă.",
	"@@Sink_Flow-Direction-Raster_tag1@@": "Rasterul de direcție a fluxului poate fi creat utilizând funcția <strong>Direcție Flux</strong>.",
	"@@Slope_DEM_tag0@@": "Rasterul de elevație de intrare.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag0@@": "Utilizând această opțiune, va fi evitată apariția posibilelor artefactelor de reeșantionare pe marginile unui raster. Pixelii de ieșire de pe marginea unui raster sau lângă pixelii fără valoare vor fi populați cu NoData; prin urmare, se recomandă utilizarea acestei opțiuni numai dacă există alte rastere cu pixeli suprapuși disponibili. Atunci când sunt disponibili pixeli care se suprapun, aceste zone NoData vor afișa valorile de pixeli care se suprapun în locul unora goi.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag1@@": "Nebifat--Reeșantionarea biliniară va fi aplicată uniform pentru reeșantionarea pantei. Aceasta este setarea implicită.",
	"@@Slope_Disable-default-edge-pixel-interpolation_tag2@@": "Bifat--Reeșantionarea biliniară va fi utilizată în pantă, exceptând de-a lungul marginilor rasterelor sau lângă pixelii NoData. Acești pixeli vor fi populați cu NoData, deoarece se va reduce orice efect de margine ascuțită care apare.",
	"@@Slope_Scaling_tag0@@": "Inclinarea pantei poate rezulta ca valoare în grade sau creștere procentuală. Există trei opțiuni pentru <strong>Scalare</strong>:",
	"@@Slope_Scaling_tag3@@": "<strong>Grad</strong>--Înclinarea pantei este calculată în grade. Valorile valide variază de la 0 la 90.",
	"@@Slope_Scaling_tag5@@": "<strong>Percent_Rise</strong>--Înclinarea pantei este calculată sub formă de valori procentuale. Valorile variază între 0 și infinit. O suprafață plană reprezintă o creștere procentuală cu valoarea 0, în timp ce o suprafață de 45 de grade reprezintă o creștere procentuală cu valoarea 100. Pe măsură ce suprafața devine mai verticală, creșterea procentuală devine din ce în ce mai mare.",
	"@@Slope_Scaling_tag7@@": "<strong>Scalat</strong>--Înclinarea pantei este calculată la fel ca GRADELE, dar factorul z este ajustat pentru scalare. Utilizează valorile <strong>Puterea Dimensiunii Pixelului</strong> și <strong>Factorul Dimensiunii Pixelului</strong>, care reprezintă schimbări de rezoluție (scară) pe măsură ce privitorul mărește și micșorează imaginea. Această opțiune este recomandată atunci când se utilizează seturi de date din întreaga lume, în special când se utilizează panta ca suprafață pentru vizualizare.",
	"@@Slope_Scaling_tag13@@": "Factorul z este ajustat utilizând următoarea ecuație:",
	"@@Slope_Scaling_tag14@@": "Factorul Z ajustat = (factor Z) + (dimensiune pixeli)",
	"@@Slope_Scaling_tag15@@": "x (factor dimensiune pixeli)",
	"@@Slope_Scaling_tag16@@": "Putere dimensiune pixel",
	"@@Slope_Z-Factor_tag0@@": "<strong>Factorul Z</strong> este un factor de scalare utilizat pentru a converti valorile de elevație în două scopuri:",
	"@@Slope_Z-Factor_tag3@@": "Pentru a converti unitățile de elevație (cum ar fi metri sau ft) la unitățile coordonatelor orizontale ale setului de date, care pot fi ft, metri sau grade",
	"@@Slope_Z-Factor_tag4@@": "Pentru a adăuga exagerare verticală pentru un efect vizual",
	"@@Slope_PSPower_tag0@@": "<strong>Puterea de dimensiune a pixelilor</strong> ia în calcul schimbările de altitudine (sau scalare) pe măsură ce vizualizatorul mărește și micșorează afișarea hărții. Este exponentul aplicat la termenul dimensiunii pixelului din ecuație care controlează rata la care se schimbă <strong>Factorul Z</strong> pentru a evita pierderi semnificative de relief.",
	"@@Slope_PSPower_tag1@@": "Acest parametru este valabil doar atunci când tipul <strong>Scalare</strong> este <strong>scalat</strong>. Valoarea implicită este 0,664.",
	"@@Slope_PSZFactor_tag0@@": "<strong>Factorul de dimensiune a pixelilor</strong> ia în calcul schimbările de scalare pe măsură ce aplicația de vizualizare mărește și micșorează afișarea hărții. Controlează rata la care se schimbă <strong>Factorul Z</strong>.",
	"@@Slope_PSZFactor_tag1@@": "Acest parametru este valabil doar atunci când tipul <strong>Scalare</strong> este <strong>scalat</strong>. Valoarea implicită este 0,024.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag0@@": "Stratul tematic raster pentru acumularea fluxului de intrare.",
	"@@Snap-Pour-Point_Flow-Accumulation-Raster_tag1@@": "Acesta poate fi creat cu funcția <strong>Acumulare Flux</strong>.",
	"@@Snap-Pour-Point_Pour-Point-Field_tag0@@": "Câmp utilizat pentru alocarea valorilor în amplasările punctului de congelare.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag0@@": "Amplasările punctului de congelare de intrare care trebuie fixate.",
	"@@Snap-Pour-Point_Pour-Point-Raster_tag1@@": "Pentru un strat tematic de raster de intrare, toate celulele care nu sunt NoData (cele care au o valoare) vor fi considerate puncte de congelare și vor fi fixate.",
	"@@Snap-Pour-Point_Snap-Distance_tag0@@": "Distanța maximă din unitățile de hartă în care se caută o celulă cu un flux de acumulare mai mare.",
	"@@Speckle_Additive-Noise-Mean_tag0@@": "Specifică valoarea medie a zgomotului de adăugare. O valoare medie a zgomotului mai mare va reprezenta un grad de netezire mai mic, în timp ce o valoare mai mică va avea un grad de netezire mai mare.",
	"@@Speckle_Additive-Noise-Mean_tag1@@": "Acest parametru este valabil doar atunci când <strong>Tipul Filtrului</strong> este <strong>Filtru Lee</strong> iar <strong>Modelul de Zgomot</strong> este <strong>Zgomot Suplimentar</strong> sau <strong>Zgomot Suplimentar și Multiplicativ</strong>. Valoarea implicită este 0.",
	"@@Speckle_Damping-Factor_tag0@@": "Specifică extinderea efectului de atenuare exponențială la filtrare. O valoare de atenuare mai mare menține marginile mai bine, dar netezește mai puțin, în timp ce o valoare mai mică netezește mai mult. Valoarea 0 are același rezultat ca un filtru de trecere inferioară.",
	"@@Speckle_Damping-Factor_tag1@@": "Acest parametru este valabil doar atunci când <strong>Tipul Filtrului</strong> este <strong>Filtru Lee Îmbunătățit</strong> sau <strong>Filtru Frost</strong>. Valoarea implicită este 1.",
	"@@Speckle_Filter-Size_tag0@@": "Specifică dimensiunea intervalului de pixeli care se utilizează pentru filtrarea zgomotului:",
	"@@Speckle_Filter-Size_tag1@@": "3x3",
	"@@Speckle_Filter-Size_tag2@@": "5x5",
	"@@Speckle_Filter-Size_tag3@@": "7x7",
	"@@Speckle_Filter-Size_tag4@@": "9x9",
	"@@Speckle_Filter-Size_tag5@@": "11x11",
	"@@Speckle_Filter-Type_tag0@@": "Specifică tipul de filtru care se va utiliza în algoritmul de netezire pentru eliminarea zgomotului de tip impuls:",
	"@@Speckle_Filter-Type_tag1@@": "<strong>Filtru Lee</strong>--Reduce zgomotul de tip impuls prin aplicarea unui filtru spațial la fiecare pixel dintr-o imagine, ceea ce filtrează datele pe baza statisticilor locale calculate în cadrul unei ferestre pătrate. Acest filtru este util atunci când doriți să filtrați datele cu zgomot de tip impuls care au o componentă de adăugare sau multiplicativă. Aceasta este setarea implicită.",
	"@@Speckle_Filter-Type_tag3@@": "<strong>Filtru Lee Îmbunătățit</strong>--O versiune adaptată a filtrului Lee care include <strong>Factorul de Amortizare</strong> și <strong>Numărul de aspecte</strong>. Acest filtru este util atunci când doriți să reduceți zgomotul de tip impuls, menținând informațiile privind textura.",
	"@@Speckle_Filter-Type_tag9@@": "<strong>Filtru Frost</strong>--Reduce zgomotul de tip impuls cu un filtru simetric circular estompat exponențial care utilizează statisticile locale din cadrul ferestrelor de filtrare individuale. Acest filtru este util atunci când doriți să reduceți zgomotul de tip impuls, menținând muchiile în imaginile radarului.",
	"@@Speckle_Filter-Type_tag11@@": "<strong>Filtru Kuan</strong>--Similar filtrului Lee, acest filtru aplică un filtru spațial la fiecare pixel dintr-o imagine și filtrează datele pe baza statisticilor locale calculate în cadrul unei ferestre pătrate. Acest filtru este util atunci când doriți să reduceți zgomotul de tip impuls, menținând muchiile în imaginile radarului.",
	"@@Speckle_Multiplicative-Noise-Mean_tag0@@": "Specifică valoarea medie a zgomotului multiplicativ. O valoare medie a zgomotului mai mare va reprezenta un grad de netezire mai mic, în timp ce o valoare mai mică va avea un grad de netezire mai mare.",
	"@@Speckle_Multiplicative-Noise-Mean_tag1@@": "Acest parametru este valabil doar atunci când <strong>Tipul Filtrului</strong> este <strong>Filtru Lee</strong> iar <strong>Modelul de Zgomot</strong> este <strong>Zgomot Suplimentar</strong> sau <strong>Zgomot Suplimentar și Multiplicativ</strong>. Valoarea implicită este 1.",
	"@@Speckle_Noise-Model_tag0@@": "Specifică tipul de zgomot care reduce calitatea imaginii radarului:",
	"@@Speckle_Noise-Model_tag1@@": "<strong>Zgomot Multiplicativ</strong>--Zgomot de semnal aleatoriu care este multiplicat în semnalul relevant în timpul capturării sau al transmisiei",
	"@@Speckle_Noise-Model_tag3@@": "<strong>Zgomot Suplimentar</strong>--Zgomot de semnal aleatoriu care este adăugat în semnalul relevant în timpul capturării sau al transmisiei",
	"@@Speckle_Noise-Model_tag5@@": "<strong>Zgomot Suplimentar și Multiplicativ</strong>--Ambele modele de zgomot",
	"@@Speckle_Noise-Variance_tag0@@": "Specifică varianța zgomotului pentru imaginea radarului.",
	"@@Speckle_Noise-Variance_tag1@@": "Acest parametru este valabil doar atunci când <strong>Tipul Filtrului</strong> este <strong>Filtru Lee</strong> iar <strong>Modelul de Zgomot</strong> este <strong>Zgomot Suplimentar</strong> sau <strong>Zgomot Suplimentar și Multiplicativ</strong>. Valoarea implicită este 0,25.",
	"@@Speckle_Number-of-Looks_tag0@@": "Specifică numărul de aspecte pentru imagine, care controlează netezirea imaginii și estimează varianța zgomotului. O valoare mai mică reprezintă un grad de netezire mai mare, în timp ce o valoare mai mică păstrează mai multe caracteristici ale imaginii.",
	"@@Speckle_Number-of-Looks_tag1@@": "Acest parametru este valabil doar atunci când <strong>Tipul Filtrului</strong> este <strong>Filtru Lee</strong> iar <strong>Modelul de Zgomot</strong> este <strong>Zgomot Multiplicativ</strong>, sau când <strong>Tipul Filtrului</strong> este <strong>Filtru Kuan</strong>. Valoarea implicită este 1.",
	"@@Speckle_Raster_tag0@@": "Rasterul de intrare.",
	"@@Spectral-Conversion_Conversion-Matrix_tag0@@": "Matricea utilizată pentru conversia rasterului de intrare.",
	"@@Spectral-Conversion_Conversion-Matrix_tag1@@": "Ecuația utilizată pentru efectuarea conversiei este:",
	"@@Spectral-Conversion_Conversion-Matrix_tag2@@": "Bandă ieșire_R = Pondere_P * Bandă_C",
	"@@Spectral-Conversion_Conversion-Matrix_tag3@@": "unde:",
	"@@Spectral-Conversion_Conversion-Matrix_tag4@@": "Bandă_R este o bandă de ieșire, unde R este un număr de la 1 până la numărul benzilor de ieșire.",
	"@@Spectral-Conversion_Conversion-Matrix_tag5@@": "Pondere_P este o listă de ponderi, delimitate prin virgule, 1 pentru fiecare bandă de intrare. Suma ponderilor pentru fiecare bandă ar trebui să fie 1.",
	"@@Spectral-Conversion_Conversion-Matrix_tag6@@": "Bandă_C este imaginea de intrare, unde C este un număr de la 1 la numărul benzilor imaginii de intrare.",
	"@@Spectral-Conversion_Raster_tag0@@": "Rasterul de intrare.",
	"@@Spectral-Conversion_Raster_tag1@@": "Acesta poate fi un set de date raster, un set de date mozaic sau un serviciu de imagini.",
	"@@Spectral-Conversion_Size_tag0@@": "Numărul de rânduri și coloane din <strong>Matricea de Conversie</strong>.",
	"@@Square_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Square_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Square_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Square_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Square_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Square_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Square_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Square_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Square_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Square_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Square_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Square_Raster_tag0@@": "Valorile de intrare vor trebui ridicate la pătrat.",
	"@@Square-Root_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Square-Root_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Square-Root_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Square-Root_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Square-Root_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Square-Root_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Square-Root_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Square-Root_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Square-Root_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Square-Root_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Square-Root_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Square-Root_Raster_tag0@@": "Valorile de intrare utilizate pentru a găsi rădăcina pătrată.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag0@@": "Setați valorile statistice pentru fiecare bandă.",
	"@@Statistics-and-Histogram_Define-Statistics-and-Histogram_tag1@@": "Coloana ${Histogram} este un câmp doar pentru citire care poate fi populat utilizând parametrul <strong>Import</strong>. Dacă importați un fișier de histogramă, coloana ${Histogram} va fi marcată ca <strong>Definită</strong>.",
	"@@Statistics-and-Histogram_Import_tag0@@": "Importați informațiile despre statistică și histogramă dintr-un raster sau fișier XML existent.",
	"@@Statistics-and-Histogram_Raster_tag0@@": "Rasterul de intrare care necesită setarea statisticii și a histogramei.",
	"@@Statistics-and-Histogram_Statistics_tag0@@": "Setați valorile statistice pentru fiecare bandă.",
	"@@Stream-Link_Flow-Direction-Raster_tag0@@": "Rasterul de intrare care prezintă direcția de curgere din fiecare celulă.",
	"@@Stream-Link_Flow-Direction-Raster_tag1@@": "Rasterul de direcție a fluxului poate fi creat utilizând funcția <strong>Direcție Flux</strong>.",
	"@@Stream-Link_Stream-Raster_tag0@@": "Rasterul de intrare care reprezintă o rețea liniară de flux.",
	"@@Stream-Order_Flow-Direction-Raster_tag0@@": "Rasterul de intrare care prezintă direcția de curgere din fiecare celulă.",
	"@@Stream-Order_Flow-Direction-Raster_tag1@@": "Rasterul de direcție a fluxului poate fi creat utilizând funcția <strong>Direcție Flux</strong>.",
	"@@Stream-Order_Order-Method_tag0@@": "Metoda utilizată pentru alocarea ordinii fluxului.",
	"@@Stream-Order_Order-Method_tag1@@": "<strong>STRAHLER</strong>--Metoda de ordonare a fluxului propusă de Strahler în 1952. Ordinea fluxului crește doar atunci când se intersectează fluxuri de același ordin. Intersectarea unei legături de prim ordin și a uneia de al doilea ordin va rămâne o legătură de al doilea ordin, nefiind creată o legătură de al treilea ordin. Aceasta este setarea implicită.",
	"@@Stream-Order_Order-Method_tag3@@": "<strong>SHREVE</strong>--Metoda de ordonare a fluxului după magnitudine, propusă de Shreve în 1967. Tuturor legăturilor fără afluenți le este alocată magnitudinea (ordinul) cu valoarea unu. Magnitudinile sunt pante în aval adiționale. Când se intersectează două legături, magnitudinile acestora sunt adăugate și alocate la legătura de pantă în aval.",
	"@@Stream-Order_Stream-Raster_tag0@@": "Un raster de tip flux de intrare care reprezintă o rețea liniară de flux.",
	"@@Stretch_Auto-Gamma_tag0@@": "Utilizați <strong>Auto Gama</strong> la calcularea factorului gama pe baza statisticii și a histogramei setului de date. Statisticile pot fi valori statistice estimate chiar de către funcție sau statisticile pot fi estimate de către software dacă ați ales un strat tematic.",
	"@@Stretch_Dynamic-Range-Adjustment_tag0@@": "Bifați căsuța <strong>Ajustarea Dinamică a Intervalului</strong> dacă doriți să fie calculate statisticile doar pe baza pixelilor afișați pe ecran. În general, această opțiune este aplicată atunci când imaginea va fi publicată și utilizată într-o aplicație web care nu poate efectua acest tip de întindere.",
	"@@Stretch_Estimate-Statistics_tag0@@": "Bifați căsuța <strong>Estimarea Statisticilor</strong> dacă doriți să vă estimați statisticile. Statisticile estimate sunt calculate pe baza unei eșantionări de 1000 la 1000 din centrul rasterului și se utilizează de întindere.",
	"@@Stretch_Estimate-Statistics_tag3@@": "Dacă aceasta este bifată iar rasterul are statistici, sau dacă ați introdus valori în tabelul <strong>Statistici</strong>, acestea vor fi folosite în locul estimărilor, dacă întinderea nu necesită o histogramă. Dacă întinderea necesită o histogramă care nu există, aceasta va fi estimată.",
	"@@Stretch_Gamma_tag0@@": "Utilizați bara glisantă pentru setarea manuală a valorii <strong>Gamma</strong>.",
	"@@Stretch_Number-Of-Standard-Deviations_tag0@@": "Specificați valoarea n pentru numărul de deviații standard de utilizat. Această metodă este utilizată pentru a evidenția cât de mult variază valorile obiectelor spațiale față de valoarea medie; modul optim de utilizare este asupra valorilor distribuite în mod normal.",
	"@@Stretch_Output-Maximum_tag0@@": "Setați cea mai mare valoare a pixelilor pentru histogramă.",
	"@@Stretch_Output-Maximum_tag1@@": "<strong>Ieșire Minimum</strong> și <strong>Ieșire Maximum</strong> vor stabili intervalul de valori care vor fi apoi întinse cu contrast liniar.",
	"@@Stretch_Output-Minimum_tag0@@": "Setați cea mai mică valoare a pixelilor pentru histogramă.",
	"@@Stretch_Output-Minimum_tag1@@": "<strong>Ieșire Minimum</strong> și <strong>Ieșire Maximum</strong> vor stabili intervalul de valori care vor fi apoi întinse cu contrast liniar.",
	"@@Stretch_Percent-Clip-Maximum_tag0@@": "Specificați procentul valorilor ridicate care să se excludă din întindere.",
	"@@Stretch_Percent-Clip-Maximum_tag1@@": "Valorile valide variază de la 0 la 99.",
	"@@Stretch_Percent-Clip-Minimum_tag0@@": "Specificați procentul valorilor scăzute care să se excludă din întindere.",
	"@@Stretch_Percent-Clip-Minimum_tag1@@": "Valorile valide variază de la 0 la 99.",
	"@@Stretch_Raster_tag0@@": "Rasterul de intrare pentru întinderea referitoare la contrast.",
	"@@Stretch_Sigmoid-Strength-Level_tag0@@": "<strong>Nivelul de Rezistență</strong> determină cât de mult din funcția sigmoidă se va utiliza la întindere. O valoare scăzută, precum 1, va utiliza doar porțiunea de mijloc a curbei, care are tendința de a produce culori cu un contrast prea mic și prea deschise. O valoare ridicată, precum 6, va utiliza întreaga curbă, care are tendința de a produce culori puternice și clare.",
	"@@Stretch_Statistics_tag0@@": "Puteți introduce propriile statistici în caseta de dialog. În mod implicit, statisticile sunt recuperate din date; cu toate acestea, vor fi utilizate toate valorile pe care le introduceți în acest parametru.",
	"@@Stretch_Type_tag0@@": "Alegeți metoda aferentă tipului de întindere:",
	"@@Stretch_Type_tag1@@": "Niciuna--fără întinderea referitoare la contrast",
	"@@Stretch_Type_tag2@@": "StdDev--întinderea de deviație standard",
	"@@Stretch_Type_tag3@@": "MinMax--întinderea minimă-maximă",
	"@@Stretch_Type_tag4@@": "PercentMinMax--întinderea de tăiere procentuală",
	"@@Stretch_Type_tag5@@": "Sigmoid--întindere sigmoid",
	"@@Stretch_Use-Gamma_tag0@@": "Bifați căsuța <strong>Utilizare Gama</strong> dacă doriți să aplicați o întindere gama.",
	"@@Swath_Cellsize_tag0@@": "Dimensiunea celulelor pentru rasterul de ieșire va fi detectată automat; cu toate acestea, o puteți schimba, dacă doriți. Dimensiunea celulelor poate fi schimbată, dar extinderea setului de date raster va rămâne aceeași.",
	"@@Swath_Interpolation-Method_tag0@@": "Există patru metode de reeșantionare pentru această funcție:",
	"@@Swath_Interpolation-Method_tag1@@": "<strong>Cel mai apropiat vecin</strong>--Calculează valoarea pixelului folosind cel mai apropiat pixel. Dacă nu există niciun pixel sursă, nu poate fi creat un pixel nou în ieșire.",
	"@@Swath_Interpolation-Method_tag3@@": "<strong>Biliniar</strong>--Calculează valoarea pixelului utilizând valoarea ponderată a distanței pentru cei mai apropiați patru pixeli.",
	"@@Swath_Interpolation-Method_tag5@@": "<strong>Cositorire Liniară</strong>--Utilizează o rețea triangulată neregulată de la punctele centrale ale fiecărei celule a rasterului neregulat pentru interpolarea unei suprafețe care este apoi convertită la un raster regulat.",
	"@@Swath_Interpolation-Method_tag7@@": "<strong>Vecin Natural</strong>--Efectuează alocarea celui mai apropiat vecin, este cea mai rapidă metodă de interpolare. Se utilizează în special pentru datele discrete, precum o clasificare a utilizării terenului, deoarece nu va schimba valorile celulelor. Eroarea spațială maximă va reprezenta jumătate din dimensiunea celulei.",
	"@@Swath_Raster_tag0@@": "Rasterul cu grile neregulate care trebuie reeșantionat.",
	"@@Tan_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Tan_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Tan_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Tan_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Tan_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Tan_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Tan_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Tan_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Tan_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Tan_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Tan_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Tan_Raster_tag0@@": "Intrarea pentru care se calculează valorile tangențiale.",
	"@@TanH_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@TanH_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@TanH_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@TanH_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@TanH_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@TanH_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@TanH_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@TanH_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@TanH_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@TanH_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@TanH_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@TanH_Raster_tag0@@": "Intrarea pentru care se calculează valorile tangențiale hiperbolice.",
	"@@Tasseled-Cap_Raster_tag0@@": "Rasterul de intrare asupra căruia se efectuează transformarea Tasseled Cap.",
	"@@Times_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Times_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Times_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Times_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Times_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Times_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Times_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Times_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Times_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Times_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Times_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Times_Raster_tag0@@": "Intrarea care conține valorile care trebuie multiplicate.",
	"@@Times_Raster_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Times_Raster2_tag0@@": "Intrarea care conține valorile cu care va fi înmulțită prima intrare.",
	"@@Times_Raster2_tag1@@": "O valoare constantă poate fi utilizată ca intrare pentru acest parametru, dacă este specificat un raster pentru celălalt parametru.",
	"@@Transpose-Bits_Bit-Pattern_tag0@@": "Alegeți tipul de decalare de efectuat sau specificați unul personalizat:",
	"@@Transpose-Bits_Bit-Pattern_tag1@@": "Landsat 8 Cirrus",
	"@@Transpose-Bits_Bit-Pattern_tag2@@": "Landsat 8 Nor",
	"@@Transpose-Bits_Bit-Pattern_tag3@@": "Landsat 8 Nor Umbră",
	"@@Transpose-Bits_Bit-Pattern_tag4@@": "Landsat 8 Umplere desemnată",
	"@@Transpose-Bits_Bit-Pattern_tag5@@": "Landsat 8 Cadru omis",
	"@@Transpose-Bits_Bit-Pattern_tag6@@": "Landsat 8 Zăpadă/Gheață",
	"@@Transpose-Bits_Bit-Pattern_tag7@@": "Landsat 8 Ocluzie teren",
	"@@Transpose-Bits_Bit-Pattern_tag8@@": "Landsat 8 Vegetație",
	"@@Transpose-Bits_Bit-Pattern_tag9@@": "Landsat 8 Apă",
	"@@Transpose-Bits_Bit-Pattern_tag10@@": "Definit de utilizator",
	"@@Transpose-Bits_Constant-Value_tag0@@": "O valoare opțională care va fi utilizată pentru completarea tuturor biților care nu sunt implicați în decalare. Acest parametru este expus atunci când parametrul <strong>Generează Umplere Raster din Constantă</strong> este setat la <strong>Da</strong>.",
	"@@Transpose-Bits_Fill-Raster_tag0@@": "Specificați un set de date raster care va fi utilizat pentru completarea tuturor biților care nu sunt implicați în decalare. Acest parametru este expus atunci când parametrul <strong>Generează Umplere Raster din Constantă</strong> este setat la <strong>Nu</strong>.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag0@@": "Generați un raster de umplere utilizând o valoare de constantă:",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag1@@": "<strong>Da</strong>--Un raster va fi generat utilizând o valoare de constantă pentru completarea biților care nu sunt implicați în decalare. Aceasta este setarea implicită.",
	"@@Transpose-Bits_Generate-Fill-Raster-from-Constant_tag3@@": "<strong>Nu</strong>--Un raster va fi generat utilizând valorile pixelilor dintr-un set de date raster existent pentru completarea biților care nu sunt implicați în decalare.",
	"@@Transpose-Bits_Output-Bit-and-Input-Bit_tag0@@": "Un tabel doar pentru citire care afișează biții de ieșire și intrările care vor fi în locul acestora.",
	"@@Transpose-Bits_Raster_tag0@@": "Rasterul de intrare pentru dezarhivare și recartografiere.",
	"@@Unit-Conversion_From-Unit_tag0@@": "Tipul de unitate inițial al pixelilor.",
	"@@Unit-Conversion_Raster_tag0@@": "Rasterul de intrare care va conține unitățile convertite.",
	"@@Unit-Conversion_To-Unit_tag0@@": "Tipul de unitate convertit al pixelilor.",
	"@@Vector-Field_Angle-Reference-System_tag0@@": "Specifică modul în care s-a măsurat componenta de direcție.",
	"@@Vector-Field_Angle-Reference-System_tag1@@": "Geografic--0° puncte de la nord și 90° de la est",
	"@@Vector-Field_Angle-Reference-System_tag2@@": "Aritmetic--0° puncte de la est și 90° de la nord",
	"@@Vector-Field_Input-Data-Type_tag0@@": "Tipul de câmp vectorial reprezentat de intrările dvs.",
	"@@Vector-Field_Input-Data-Type_tag1@@": "Necunoscut--Nu se știe dacă intrările reprezintă U-V sau magnitudine-direcție.",
	"@@Vector-Field_Input-Data-Type_tag2@@": "U-V--Datele de intrare reprezintă componentele U și V.",
	"@@Vector-Field_Input-Data-Type_tag3@@": "Magnitudine-direcție--Datele de intrare reprezintă magnitudinea și direcția.",
	"@@Vector-Field_Output-Data-Type_tag0@@": "Specifică tipul de câmp vectorial reprezentat de ieșirea dvs.",
	"@@Vector-Field_Output-Data-Type_tag1@@": "Magnitudine-direcție--Datele de ieșire reprezintă magnitudinea și direcția.",
	"@@Vector-Field_Output-Data-Type_tag2@@": "U-V--Datele de ieșire reprezintă componentele U și V.",
	"@@Vector-Field_Raster1_tag0@@": "Primul raster de intrare.",
	"@@Vector-Field_Raster1_tag1@@": "Acesta va fi valoarea U sau magnitudinea.",
	"@@Vector-Field_Raster2_tag0@@": "Al doilea raster de intrare.",
	"@@Vector-Field_Raster2_tag1@@": "Acesta va fi valoarea V sau direcția.",
	"@@Viewshed_Analysis-Method_tag0@@": "Alegeți metoda cu care se va calcula vizibilitatea. Această opțiune vă permite să renunțați la un anumit procent din precizie pentru o performanță ridicată.",
	"@@Viewshed_Analysis-Method_tag1@@": "Toate razele vizuale--Se va aplica o rază vizuală pentru fiecare pixel din raster pentru a stabili zonele vizibile. Aceasta este metoda implicită.",
	"@@Viewshed_Analysis-Method_tag2@@": "Razele vizuale ale perimetrului--Razele vizuale sunt efectuate doar asupra pixelilor zonelor vizibile pentru a stabili zone de vizibilitate. Această metodă are performanțe mai bune decât metoda <strong>Toate Liniile de Vizare</strong> din moment ce calculul include mai puține linii de vizare.",
	"@@Viewshed_Analysis-Type_tag0@@": "Alegeți ce tip de analiză a vizibilității doriți să se efectueze, determinând cât de vizibilă să fie fiecare celulă pentru observatori sau identificând ce observatori sunt vizibili pentru fiecare amplasare de suprafață.",
	"@@Viewshed_Analysis-Type_tag1@@": "Frecvență--De câte ori poate fi văzută fiecare amplasare a pixelilor în rasterul de suprafață de intrare de către amplasările de observare de intrare (ca puncte sau ca noduri pentru obiecte spațiale observator de tip linie poligonală). Aceasta este setarea implicită.",
	"@@Viewshed_Analysis-Type_tag2@@": "Observatori--Ieșirea identifică exact ce puncte de observatori sunt vizibile de la fiecare amplasare a suprafeței raster. Numărul maxim permis de observatori de intrare este 32 cu acest tip de analiză.",
	"@@Viewshed_Horizontal-End-Angle_tag0@@": "Această valoare definește unghiul de finalizare al intervalului de scanare orizontală. Valoarea trebuie specificată în grade de la 0 la 360, iar 0 este orientată spre nord. Valoarea implicită este 360.",
	"@@Viewshed_Horizontal-End-Angle_tag1@@": "Poate fi un câmp în setul de date de intrare <strong>Obiecte Spațiale Observator</strong> sau o valoare numerică. Dacă acest parametru este setat la o valoare, acea valoare se va aplica tuturor observatorilor. Pentru a specifica valori diferite pentru fiecare observator, setați acest parametru la un câmp din setul de date <strong>Obiecte Spațiale Observator</strong>.",
	"@@Viewshed_Horizontal-Start-Angle_tag0@@": "Această valoare definește unghiul de pornire al intervalului de scanare orizontală. Valoarea trebuie specificată în grade de la 0 la 360, iar 0 este orientată spre nord. Valoarea implicită este 0.",
	"@@Viewshed_Horizontal-Start-Angle_tag1@@": "Poate fi un câmp în setul de date de intrare <strong>Obiecte Spațiale Observator</strong> sau o valoare numerică. Dacă acest parametru este setat la o valoare, acea valoare se va aplica tuturor observatorilor. Pentru a specifica valori diferite pentru fiecare observator, setați acest parametru la un câmp din setul de date <strong>Obiecte Spațiale Observator</strong>.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag0@@": "Tipul de distanță pentru parametrul de rază interioară.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag1@@": "Nebifat--<strong>Raza Interioară</strong> va fi interpretată ca distanță 2D. Aceasta este setarea implicită.",
	"@@Viewshed_Inner-Radius-is-3D-Distance_tag4@@": "Bifat--<strong>Raza Interioară</strong> va fi interpretată ca distanță 3D.",
	"@@Viewshed_Inner-Radius_tag0@@": "Această valoare definește distanța inițială (minimă) de la care este determinată vizibilitatea. Pixelii mai apropiați decât această distanță sunt considerați ca fiind nevizibili în rezultat, dar mai pot bloca vizibilitatea pixelilor între <strong>Raza Interioară</strong> și <strong>Raza Exterioară</strong>. Valoarea implicită este 0.",
	"@@Viewshed_Inner-Radius_tag5@@": "Poate fi un câmp în setul de date de intrare <strong>Obiecte Spațiale Observator</strong> sau o valoare numerică. Dacă acest parametru este setat la o valoare, acea valoare se va aplica tuturor observatorilor. Pentru a specifica valori diferite pentru fiecare observator, setați acest parametru la un câmp din setul de date <strong>Obiecte Spațiale Observator</strong>.",
	"@@Viewshed_Observer-Elevation_tag0@@": "Această valoare este utilizată pentru a defini elevațiile de suprafață ale punctelor sau nodurilor de observatori.",
	"@@Viewshed_Observer-Elevation_tag1@@": "Poate fi un câmp în setul de date de intrare <strong>Obiecte Spațiale Observator</strong> sau o valoare numerică. Dacă acest parametru nu este specificat, elevația de observator se va obține din rasterul de suprafață utilizând interpolarea biliniară. Dacă acest parametru este setat la o valoare, atunci acea valoare se va aplica tuturor observatorilor. Pentru a specifica valori diferite pentru fiecare observator, setați acest parametru la un câmp din setul de date <strong>Obiecte Spațiale Observator</strong>.",
	"@@Viewshed_Observer-Features_tag0@@": "Clasa de obiecte spațiale de intrare necesară, care identifică amplasările observatorului. Pot fi obiecte spațiale de tip linie poligonală, multipunct sau punct.",
	"@@Viewshed_Observer-Features_tag1@@": "Clasa de obiecte spațiale de intrare este transformată într-un sistem de coordonate geocentrice 3D în timpul calculului de vizibilitate. Observatorii din afara extinderii pentru rasterul de suprafață sau localizați în celule NoData, vor fi ignorați în calcul.",
	"@@Viewshed_Observer-Offset_tag0@@": "Această valoare indică o distanță verticală (în unități de suprafață) care trebuie adăugată în elevația de observator. Trebuie să fie un număr întreg pozitiv sau o valoare cu virgulă mobilă.",
	"@@Viewshed_Observer-Offset_tag1@@": "Poate fi un câmp în setul de date de intrare <strong>Obiecte Spațiale Observator</strong> sau o valoare numerică. Dacă acest parametru este setat la o valoare, acea valoare se va aplica tuturor observatorilor. Pentru a specifica valori diferite pentru fiecare observator, setați acest parametru la un câmp din setul de date <strong>Obiecte Spațiale Observator</strong>.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag0@@": "Tipul de distanță pentru parametrul de rază exterioară.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag1@@": "Nebifat--<strong>Raza Exterioară</strong> va fi interpretată ca distanță 2D. Aceasta este setarea implicită.",
	"@@Viewshed_Outer-Radius-is-3D-Distance_tag4@@": "Bifat--<strong>Raza Exterioară</strong> va fi interpretată ca distanță 3D.",
	"@@Viewshed_Outer-Radius_tag0@@": "Această valoare definește distanța maximă de la care este determinată vizibilitatea. Pixelii care depășesc această distanță sunt excluși din analiză.",
	"@@Viewshed_Outer-Radius_tag1@@": "Poate fi un câmp în setul de date de intrare <strong>Obiecte Spațiale Observator</strong> sau o valoare numerică. Dacă acest parametru este setat la o valoare, acea valoare se va aplica tuturor observatorilor. Pentru a specifica valori diferite pentru fiecare observator, setați acest parametru la un câmp din setul de date <strong>Obiecte Spațiale Observator</strong>.",
	"@@Viewshed_Raster_tag0@@": "Rasterul de suprafață de intrare necesar. Poate fi un raster de tip număr întreg sau cu virgulă mobilă.",
	"@@Viewshed_Raster_tag1@@": "Intrarea este transformată într-un sistem de coordonate geocentrice 3D în timpul calculului de vizibilitate. Celulele NoData de pe rasterul de intrare nu blochează determinarea vizibilității.",
	"@@Viewshed_Refractive-Coefficient_tag0@@": "Coeficientul de refracție pentru lumina vizibilă din aer.",
	"@@Viewshed_Refractive-Coefficient_tag1@@": "Valoarea implicită este 0,13.",
	"@@Viewshed_Surface-Offset_tag0@@": "Această valoare indică o distanță verticală (în unități de suprafață) care trebuie adăugată la valoarea z a fiecărui pixel țintă, fiind luată în considerare pentru vizibilitate. Trebuie să fie un număr întreg pozitiv sau o valoare cu virgulă mobilă.",
	"@@Viewshed_Surface-Offset_tag1@@": "Poate fi un câmp în setul de date de intrare <strong>Obiecte Spațiale Observator</strong> sau o valoare numerică. Dacă acest parametru este setat la o valoare, acea valoare se va aplica tuturor observatorilor. Pentru a specifica valori diferite pentru fiecare observator, setați acest parametru la un câmp din setul de date <strong>Obiecte Spațiale Observator</strong>.",
	"@@Viewshed_Vertical-Error_tag0@@": "Gradul de incertitudine, măsurată ca eroare de rădăcină pătrată a mediei aritmetice (RMSE) în valorile de elevație a suprafeței. Este o valoare cu virgulă mobilă care reprezintă eroarea așteptată a valorilor de elevație de intrare. Când acestui parametru i se alocă o valoare mai mare decât 0, rasterul de vizibilitate rezultat va avea o valoare cu virgulă mobilă. În acest caz, fiecare valoare de pixel din rasterul de vizibilitate rezultat reprezintă suma probabilităților că celula este vizibilă oricăruia dintre observatori.",
	"@@Viewshed_Vertical-Error_tag1@@": "Atunci când <strong>Tipul Analizei</strong> este <strong>Observatori</strong> sau <strong>Metioda de Analiză</strong> este <strong>Razele Vizuale ale Perimetrului</strong>, acest parametru este dezactivat.",
	"@@Viewshed_Vertical-Lower-Angle_tag0@@": "Această valoare definește limita unghiului vertical inferior a scanării sub un plan orizontal. Valoarea trebuie specificată în grade de la -90 la 0, care poate fi număr întreg sau valoare cu virgulă mobilă. Valoarea implicită este -90.",
	"@@Viewshed_Vertical-Lower-Angle_tag1@@": "Poate fi un câmp în setul de date de intrare <strong>Obiecte Spațiale Observator</strong> sau o valoare numerică. Dacă acest parametru este setat la o valoare, acea valoare se va aplica tuturor observatorilor. Pentru a specifica valori diferite pentru fiecare observator, setați acest parametru la un câmp din setul de date <strong>Obiecte Spațiale Observator</strong>.",
	"@@Viewshed_Vertical-Upper-Angle_tag0@@": "Această valoare definește limita unghiului vertical superior a scanării peste un plan orizontal. Valoarea trebuie specificată în grade de la 0 la 90, care poate fi număr întreg sau valoare cu virgulă mobilă. Valoarea implicită este 90.",
	"@@Viewshed_Vertical-Upper-Angle_tag1@@": "Poate fi un câmp în setul de date de intrare <strong>Obiecte Spațiale Observator</strong> sau o valoare numerică. Dacă acest parametru este setat la o valoare, acea valoare se va aplica tuturor observatorilor. Pentru a specifica valori diferite pentru fiecare observator, setați acest parametru la un câmp din setul de date <strong>Obiecte Spațiale Observator</strong>.",
	"@@Watershed_Flow-Direction-Raster_tag0@@": "Rasterul de intrare care prezintă direcția de curgere din fiecare celulă.",
	"@@Watershed_Flow-Direction-Raster_tag1@@": "Rasterul de direcție a fluxului poate fi creat utilizând funcția <strong>Direcție Flux</strong>.",
	"@@Watershed_Pour-Point(s)-Raster_tag0@@": "Amplasările punctului de congelare de intrare.",
	"@@Watershed_Pour-Point(s)-Raster_tag1@@": "Acest raster reprezintă celulele deasupra cărora va fi stabilită zona de contribuție sau de captare. Toate celulele care nu sunt NoData vor fi folosite ca celule sursă.",
	"@@Watershed_Pour-Point-Field_tag0@@": "Câmp utilizat pentru alocarea valorilor în amplasările punctului de congelare.",
	"@@Watershed_Pour-Point-Field_tag1@@": "Pentru un set de date raster pentru punctul de congelare, este utilizată valoarea ${Value} în mod implicit.",
	"@@Weighted-Overlay_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Weighted-Overlay_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Weighted-Overlay_Cellsize-Type_tag2@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Weighted-Overlay_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Weighted-Overlay_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Weighted-Overlay_Cellsize-Type_tag5@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Weighted-Overlay_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Weighted-Overlay_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Weighted-Overlay_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Weighted-Overlay_Extent-Type_tag3@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Weighted-Overlay_Extent-Type_tag4@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Weighted-Overlay_Scales_tag0@@": "Intervalul pentru noile valori după care se recartografiază vechile valori.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag0@@": "Tabelul de suprapunere ponderată este format din patru părți:",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag1@@": "Strat tematic--Toate rasterele de intrare trebuie să fie de tip număr întreg.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag2@@": "Influență--Fiecare raster de intrare este ponderat în funcție de importanță sau de influență, ca procentaj relativ. Suma ponderilor de influență procentuale trebuie să fie 100 și trebuie specificată fiecare pondere după valorile numerelor întregi.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag3@@": "Câmp--Un câmp de număr întreg sau șir din rasterul de intrare care se utilizează pentru ponderare.",
	"@@Weighted-Overlay_Weighted-Overlay-Table_tag4@@": "Tabel de recartografiere--Fiecărei valori dintr-un raster de intrare îi este alocată o nouă valoare de scalare pe baza tabelului de recartografiere. Valoarea de scalare poate fi o valoare validă sau o valoare NoData.",
	"@@Weighted-Sum_Cellsize-Type_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Weighted-Sum_Cellsize-Type_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Weighted-Sum_Cellsize-Type_tag2@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Weighted-Sum_Cellsize-Type_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Weighted-Sum_Cellsize-Type_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Weighted-Sum_Cellsize-Type_tag5@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Weighted-Sum_Extent-Type_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Weighted-Sum_Extent-Type_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Weighted-Sum_Extent-Type_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Weighted-Sum_Extent-Type_tag3@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Weighted-Sum_Extent-Type_tag4@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag0@@": "Tabelul de sume ponderate este definit de următoarele trei proprietăți:",
	"@@Weighted-Sum_Weighted-Sum-Table_tag1@@": "Strat tematic--Rasterul care este ponderat.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag2@@": "Câmp--Câmpul rasterului care se utilizează pentru ponderare.",
	"@@Weighted-Sum_Weighted-Sum-Table_tag3@@": "Pondere--Valoarea de pondere cu care se înmulțește rasterul. Poate fi o valoare zecimală negativă sau pozitivă.",
	"@@Wind-Chill_Temperature-Raster_tag0@@": "Un raster de bandă unică în care valorile pixelilor reprezintă temperatura aerului ambiental.",
	"@@Wind-Chill_Temperature-Units_tag0@@": "Unitatea de măsură asociată cu rasterul de temperatură de intrare. Unitățile de intrare disponibile sunt Celsius, Fahrenheit și Kelvin.",
	"@@Wind-Chill_Wind-Chill-Units_tag0@@": "Unitatea de măsură asociată cu rasterul de ieșire. Unitățile de ieșire disponibile sunt Celsius, Fahrenheit și Kelvin.",
	"@@Wind-Chill_Wind-Speed-Raster_tag0@@": "Un raster de bandă unică în care valorile pixelilor reprezintă viteza vântului.",
	"@@Wind-Chill_Wind-Speed-Units_tag0@@": "Definește unitatea de măsură pentru rasterul de tip viteza vântului:",
	"@@Wind-Chill_Wind-Speed-Units_tag1@@": "Mile pe oră (mph)",
	"@@Wind-Chill_Wind-Speed-Units_tag2@@": "Kilometri pe oră (km/h)",
	"@@Wind-Chill_Wind-Speed-Units_tag3@@": "Metri pe secundă (m/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag4@@": "Picioare pe secundă (ft/s)",
	"@@Wind-Chill_Wind-Speed-Units_tag5@@": "Noduri (kn)",
	"@@Zonal-Remap_Background-Value_tag0@@": "Valoarea inițială a pixelilor ale rasterului rezultat, înainte de a fi recartografiați pixelii de intrare.",
	"@@Zonal-Remap_Default-Output-Value_tag0@@": "Valoarea care va fi alocată unui pixel care nu îndeplinește niciuna dintre condițiile setate în <strong>Tabelul Atributelor Zonale</strong>.",
	"@@Zonal-Remap_Default-Output-Value_tag3@@": "Aceasta va fi și valoarea pixelului de ieșire dacă oricare dintre parametrii <strong>Numele Câmpului Valorii de Ieșire</strong> este lăsat nespecificat sau valoarea de ieșire a limitei zonale corespunzătoare este lăsată nespecificată în <strong>Tabelul Atributelor Zonale</strong>.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag0@@": "Numele câmpului care conține valoarea maximă sub care este recartografiat un pixel de intrare.",
	"@@Zonal-Remap_Maximum-Value-Field-Name_tag1@@": "Dacă nu se specifică sau dacă valoarea câmpului este zero, valorile pixelilor nu sunt testate pentru valoarea maximă.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag0@@": "Numele câmpului care conține valoarea minimă peste care este recartografiat un pixel de intrare.",
	"@@Zonal-Remap_Minimum-Value-Field-Name_tag1@@": "Dacă nu este specificat sau dacă valoarea câmpului este zero, valorile pixelilor nu sunt testate pentru valoarea minimă.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag0@@": "Numele câmpului care conține valoarea țintă la care este recartografiat un pixel de intrare.",
	"@@Zonal-Remap_Output-Value-Field-Name_tag1@@": "Dacă nu se specifică sau dacă valoarea câmpului este zero, valorile pixelilor recartografiați sunt setate la <strong>Valoarea de Ieșire Implicită</strong>.",
	"@@Zonal-Remap_Value-Raster_tag0@@": "O intrare de raster de bandă unică necesară, care conține valorile pixelilor care trebuie să se recartografieze.",
	"@@Zonal-Remap_Where-Clause_tag0@@": "O interogare opțională aplicată <strong>Tabelului cu Atribute Zonale</strong>.",
	"@@Zonal-Remap_Where-Clause_tag3@@": "Dacă ați utiliza tabelul de mai sus ca exemplu, interogarea ar fi ${Variable1 = 'bare earth' AND Variable2 = 'California'}.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag0@@": "Un tabel de intrare obligatoriu care conține cel puțin trei câmpuri. Trebuie să aibă o valoare limită minimă, o valoare limită maximă și o valoare țintă. Valoarea țintă este câmpul care conține valoarea recartografiată.",
	"@@Zonal-Remap_Zonal-Attributes-Table_tag1@@": "Formatul fișierului poate fi o clasă de obiecte spațiale, un serviciu de obiecte spațiale sau orice tip de tabel acceptat de ArcGIS.",
	"@@Zonal-Remap_Zone-Field_tag0@@": "Denumirea câmpului din <strong>Tabelul Atributelor Zonale</strong> care include valorile ID ale zonei.",
	"@@Zonal-Remap_Zone-Field_tag3@@": "Valorile ID de zonă sunt legate direct de ID-urile de zonă din rasterul dvs. zonal. Acestea oferă un alt nivel de filtrare la recartografiere. Dacă nu există niciun ID de zonă asociat cu o anumită înregistrare din tabel, nu va participa la recartografiere.",
	"@@Zonal-Remap_Zone-Raster_tag0@@": "Un raster de bandă unică în care fiecare pixel definește zonele asociate unei anumite amplasări. O zonă este definită ca toate suprafețele din intrare care au aceeași valoare. Suprafețele nu trebuie să fie continue.",
	"@@Predict-Using-Trend_dimensiondefinition_tag0@@": "Specifică metoda folosită pentru asigurarea valorilor dimensiunii de prognoză.",
	"@@Predict-Using-Trend_dimensiondefinition_tag1@@": "<strong>După Valoare</strong>--Predicția va fi calculată pentru o valoare dimensională singulară. De exemplu, doriți să prognozați precipitațiile anuale pentru anii 2050, 2100, și 2150. Aceasta este setarea implicită.",
	"@@Predict-Using-Trend_dimensiondefinition_tag2@@": "<strong>După Interval</strong>--Prognoza va fi calculată pentru un interval al dimensiunii definit după o valoare de început și una de sfârșit. De exemplu, doriți să prognozați precipitațiile anuale pentru fiecare an dintre 2050 și 2150.",
	"@@Predict-Using-Trend_end_tag0@@": "Data de sfârșit, înălțimea sau adâncimea intervalului de dimensiuni de utilizat în prognoză.",
	"@@Predict-Using-Trend_end_tag1@@": "Acest parametru este solicitat atunci când parametrul <strong>Definiția Dimensiunii</strong> este setat la <strong>După Interval</strong>.",
	"@@Predict-Using-Trend_raster_tag0@@": "Rasterul de tendință multidimensională de intrare din funcția <strong>Generează Tendință</strong>.",
	"@@Predict-Using-Trend_start_tag0@@": "Data de început, înălțimea sau adâncimea intervalului de dimensiuni de utilizat în prognoză.",
	"@@Predict-Using-Trend_start_tag1@@": "Acest parametru este solicitat atunci când parametrul <strong>Definiția Dimensiunii</strong> este setat la <strong>După Interval</strong>.",
	"@@Predict-Using-Trend_unit_tag0@@": "Unitatea care va fi folosită pentru intervalul de valori. Acest parametru se aplică doar atunci când dimensiunea analizei este o dimensiune de timp.",
	"@@Predict-Using-Trend_unit_tag1@@": "<strong>Ore</strong>--Prognoza va fi calculată pentru fiecare oră din intervalul de timp descris de parametrii <strong>Început</strong>, <strong>Sfârșit</strong> și <strong>Interval de Valori</strong>.",
	"@@Predict-Using-Trend_unit_tag2@@": "<strong>Zile</strong>--Prognoza va fi calculată pentru fiecare zi din intervalul de timp descris de parametrii <strong>Început</strong>, <strong>Sfârșit</strong> și <strong>Interval de Valori</strong>.",
	"@@Predict-Using-Trend_unit_tag3@@": "<strong>Săptămâni</strong>--Prognoza va fi calculată pentru fiecare săptămână din intervalul de timp descris de parametrii <strong>Început</strong>, <strong>Sfârșit</strong> și <strong>Interval de Valori</strong>.",
	"@@Predict-Using-Trend_unit_tag4@@": "<strong>Luni</strong>--Prognoza va fi calculată pentru fiecare lună din intervalul de timp descris de parametrii <strong>Început</strong>, <strong>Sfârșit</strong> și <strong>Interval de Valori</strong>.",
	"@@Predict-Using-Trend_unit_tag5@@": "<strong>Ani</strong>--Prognoza va fi calculată pentru fiecare an din intervalul de timp descris de parametrii <strong>Început</strong>, <strong>Sfârșit</strong> și <strong>Interval de Valori</strong>.",
	"@@Predict-Using-Trend_valueinterval_tag0@@": "Numărul de pași dintre două valori ale dimensiunilor de inclus în prognoză. Valoarea implicită este 1.",
	"@@Predict-Using-Trend_valueinterval_tag1@@": "Acest parametru este solicitat atunci când parametrul <strong>Definiția Dimensiunii</strong> este setat la <strong>După Interval</strong>.",
	"@@Predict-Using-Trend_values_tag0@@": "Valoarea sau valorile dimensiunii de utilizat în prognoză.",
	"@@Predict-Using-Trend_values_tag1@@": "Formatul valorilor orei, adâncimii și înălțimii trebuie să corespundă formatului valorilor dimensiunii folosite pentru a genera rasterul de tendință. Dacă rasterul de tendință a fost generat pentru dimensiunea StdTime, formatul trebuie să fie AAAA-LL-ZZTHH:MM:SS, de exemplu 2050-01-01T00:00:00. Valorile multiple sunt separate cu punct și virgulă.",
	"@@Process-Raster-Collection_aggregationfunction_tag0@@": "Specificați șablonul funcției raster utilizat pentru agregarea împărțirilor multiple în împărțiri mai puține sau o singură împărțire.",
	"@@Process-Raster-Collection_dimension_tag0@@": "Dimensiunea agregării. Aceasta este dimensiunea de-a lungul căreia vor fi agregate variabilele.",
	"@@Process-Raster-Collection_itemfunction_tag0@@": "Specificați șablonul funcției raster utilizat pentru prelucrarea fiecărei împărțiri sau element din colecția de raster de intrare.",
	"@@Process-Raster-Collection_keywordinterval_tag0@@": "Specifică intervalul cuvântului cheie care va fi utilizat la agregarea de-a lungul dimensiunii. Acest parametru este necesar atunci când <strong>Tipul</strong> este setat la <strong>Cuvânt Cheie Interval</strong>, iar agregarea trebuie să fie pe timp.",
	"@@Process-Raster-Collection_keywordinterval_tag1@@": "<strong>Orar</strong>--Valorile datelor vor fi agregate în etape de timp orare, iar rezultatul va include fiecare oră din seria de timp.",
	"@@Process-Raster-Collection_keywordinterval_tag2@@": "<strong>Zilnic</strong>--Valorile datelor vor fi agregate în etape de timp zilnice, iar rezultatul va include fiecare zi din seria de timp.",
	"@@Process-Raster-Collection_keywordinterval_tag3@@": "<strong>Săptămânal</strong>--Valorile datelor vor fi agregate în etape de timp săptămânale, iar rezultatul va include fiecare săptămână din seria de timp.",
	"@@Process-Raster-Collection_keywordinterval_tag4@@": "<strong>După decadă</strong>--Valorile datelor vor fi agregate în 3 perioade a câte 10 zile fiecare. Ultima perioadă poate include mai mult sau mai puțin de 10 zile. Rezultatul va include 3 împărțiri pentru fiecare lună.",
	"@@Process-Raster-Collection_keywordinterval_tag5@@": "<strong>După pentadă</strong>--Valorile datelor vor fi agregate în 6 perioade a câte 5 zile fiecare. Ultima perioadă poate include mai mult sau mai puțin de 5 zile. Rezultatul va include 6 împărțiri pentru fiecare lună.",
	"@@Process-Raster-Collection_keywordinterval_tag6@@": "<strong>Lunar</strong>--Valorile datelor vor fi agregate în etape de timp lunare, iar rezultatul va include fiecare săptămână din seria de timp.",
	"@@Process-Raster-Collection_keywordinterval_tag7@@": "<strong>Trimestrial</strong>--Valorile datelor vor fi agregate în etape de timp trimestriale, iar rezultatul va include fiecare trimestru din seria de timp.",
	"@@Process-Raster-Collection_keywordinterval_tag8@@": "<strong>Anual</strong>--Valorile datelor vor fi agregate în etape de timp anuale, iar rezultatul va include fiecare an din seria de timp.",
	"@@Process-Raster-Collection_keywordinterval_tag9@@": "<strong>Recurent zilnic</strong>--Valorile datelor vor fi agregate în etape de timp zilnice, iar rezultatul va include o valoare agregată pe zi din calendarul iulian. Rezultatul va include maximum 366 împărțiri de timp zilnice.",
	"@@Process-Raster-Collection_keywordinterval_tag10@@": "<strong>Recurent săptămânal</strong>--Valorile datelor vor fi agregate în etape de timp săptămânale, iar rezultatul va include o valoare agregată pe săptămână. Rezultatul va include maximum 53 împărțiri de timp săptămânal.",
	"@@Process-Raster-Collection_keywordinterval_tag11@@": "<strong>Recurent lunar</strong>--Valorile datelor vor fi agregate în etape de timp lunare, iar rezultatul va include o valoare agregată pe lună. Rezultatul va include maximum 12 împărțiri de timp lunar.",
	"@@Process-Raster-Collection_keywordinterval_tag12@@": "<strong>Recurent trimestrial</strong>--Valorile datelor vor fi agregate în etape de timp trimestriale, iar rezultatul va include o valoare agregată pe trimestru. Rezultatul va include maximum 4 împărțiri de timp trimestrial.",
	"@@Process-Raster-Collection_maximumvalue_tag0@@": "Valoarea maximă pentru un interval.",
	"@@Process-Raster-Collection_maximumvalue_tag1@@": "Acest parametru este solicitat atunci când parametrul <strong>Tip</strong> este setat la <strong>Game de Interval</strong>.",
	"@@Process-Raster-Collection_minimumvalue_tag0@@": "Valoarea minimă pentru un interval.",
	"@@Process-Raster-Collection_minimumvalue_tag1@@": "Acest parametru este solicitat atunci când parametrul <strong>Tip</strong> este setat la <strong>Game de Interval</strong>.",
	"@@Process-Raster-Collection_processingfunction_tag0@@": "Specificați șablonul funcției raster folosit pentru afișarea stratului tematic de raster procesat.",
	"@@Process-Raster-Collection_rastercollection_tag0@@": "Rasterul multidimensional de intrare, stratul tematic mozaic sau setul de date mozaic.",
	"@@Process-Raster-Collection_type_tag0@@": "Specifică intervalul de dimensiuni pentru care vor fi agregate datele.",
	"@@Process-Raster-Collection_type_tag1@@": "<strong>Toate</strong>--Valorile datelor vor fi agregate pe toate împărțirile. Aceasta este setarea implicită.",
	"@@Process-Raster-Collection_type_tag2@@": "<strong>Cuvânt cheie Interval</strong>--Datele variabile vor fi agregate folosind un interval cunoscut.",
	"@@Process-Raster-Collection_type_tag3@@": "<strong>Game de Interval</strong>--Datele variabile vor fi agregate între perechi specifice de valori sau date.",
	"@@Process-Raster-Collection_type_tag4@@": "<strong>Valori de Interval</strong>--Datele variabile vor fi agregate folosind un interval și o unitate specificate de utilizator.",
	"@@Process-Raster-Collection_unit_tag0@@": "Unitatea care va fi folosită pentru valoarea de interval. Acest parametru este solicitat atunci când parametrul <strong>Dimensiune</strong> este un câmp de timp iar parametrul <strong>Tip</strong> este setat la <strong>Valoare de Interval</strong>.",
	"@@Process-Raster-Collection_unit_tag1@@": "Dacă agregați pe orice altceva în afara timpului, această opțiune nu va fi disponibilă iar unitatea pentru valoarea de interval ca corespunde unității variabile a datelor de raster multidimensional introduse.",
	"@@Process-Raster-Collection_unit_tag2@@": "<strong>Ore</strong>--Valorile datelor vor fi agregate în împărțiri de timp orare la intervalul specificat.",
	"@@Process-Raster-Collection_unit_tag3@@": "<strong>Zile</strong>--Valorile datelor vor fi agregate în împărțiri de timp zilnice la intervalul specificat.",
	"@@Process-Raster-Collection_unit_tag4@@": "<strong>Săptămâni</strong>--Valorile datelor vor fi agregate în împărțiri de timp săptămânale la intervalul specificat.",
	"@@Process-Raster-Collection_unit_tag5@@": "<strong>Luni</strong>--Valorile datelor vor fi agregate în împărțiri de timp lunare la intervalul specificat.",
	"@@Process-Raster-Collection_unit_tag6@@": "<strong>Ani</strong>--Valorile datelor vor fi agregate în împărțiri de timp anuale la intervalul specificat.",
	"@@Process-Raster-Collection_valueinterval_tag0@@": "Dimensiunea intervalului care va fi utilizat pentru agregare. Acest parametru este solicitat atunci când parametrul <strong>Tip</strong> este setat la <strong>Valoare de Interval</strong>.",
	"@@Process-Raster-Collection_valueinterval_tag1@@": "De exemplu, pentru a agrega 30 ani de date privind temperaturile lunare în etape de câte 5 ani, introduceți 5 ca <strong>Interval de Valori</strong>, și specificați <strong>Unitatea</strong> ca fiind <strong>Ani</strong>.",
	"@@Linear-Spectral-Unmixing_non-negative_tag0@@": "Specifică opțiunile pentru definirea valorilor pixelilor de ieșire.",
	"@@Linear-Spectral-Unmixing_non-negative_tag1@@": "Bifat--Nu vor exista valori de ieșire negative.",
	"@@Linear-Spectral-Unmixing_non-negative_tag2@@": "Nebifat--Pot exista valori negative ale acoperirii fracționale a terenului.",
	"@@Linear-Spectral-Unmixing_raster_tag0@@": "Rasterul de intrare.",
	"@@Linear-Spectral-Unmixing_spectralprofile_tag0@@": "Fișierul de intrare al profilului spectral.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag0@@": "Informațiile spectrale pentru diversele clase de acoperire a terenului.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag1@@": "<strong>Profil Spectral</strong>--Un fișier de definiție a clasificatorului (${.ecd}), generat din instrumentul <strong><strong>Instruire Clasificator de Probabilitate Maximă</strong></strong>, sau un fișier de Notare a Obiectelor JavaScript (${.json}) care include profilurile spectrale ale clasei.",
	"@@Linear-Spectral-Unmixing_spectralprofiletype_tag2@@": "<strong>Obiect spațial pentru instruire</strong>--Obiecte spațiale poligonale sau o clasă de obiecte spațiale eșantioane pentru instruire, generate din <strong>Managerul Eșantioanelor pentru Instruire</strong>.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag0@@": "Specifică opțiunile pentru definirea valorilor pixelilor de ieșire.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag1@@": "Bifat--Valorile de clasă pentru fiecare pixel sunt specificate în format zecimal cu suma tuturor claselor egală cu 1. De exemplu, Clasa1 = 0,16; Clasa2 = 0,24; Clasa3 = 0,60.",
	"@@Linear-Spectral-Unmixing_sumtoone_tag2@@": "Nebifat--Suma tuturor claselor dintr-un pixel poate depăși 1.",
	"@@Linear-Spectral-Unmixing_trainingfeature_tag0@@": "Fișierul de intrare cu obiecte spațiale pentru instruire.",
	"@@Aggregate_aggregationtechnique_tag0@@": "Mteoda folosită pentru agregare. Valorile celulelor de intrare înconjurate de celulele de ieșire mai brute sunt agregate conform uneia dintre statisticile următoare:",
	"@@Aggregate_aggregationtechnique_tag1@@": "<strong>Sumă</strong>--Totalul celulelor de intrare. Aceasta este setarea implicită.",
	"@@Aggregate_aggregationtechnique_tag2@@": "<strong>Maximum</strong>--Cea mai mare valoare a celulelor de intrare.",
	"@@Aggregate_aggregationtechnique_tag3@@": "<strong>Medie</strong>--Valoarea medie a celulelor de intrare.",
	"@@Aggregate_aggregationtechnique_tag4@@": "<strong>Mediană</strong>--Valoarea mediană a celulelor de intrare.",
	"@@Aggregate_aggregationtechnique_tag5@@": "<strong>Minimum</strong>--Cea mai mică valoare a celulelor de intrare.",
	"@@Aggregate_cellfactor_tag0@@": "Factorul cu care trebuie să se înmulțească dimensiunea celulei rasterului de intrare..",
	"@@Aggregate_cellfactor_tag1@@": "De exemplu, o valoare de trei a factorului de celulă ar duce la o dimensiune a celulei de ieșire de trei ori mai mare decât aceea a rasterului de intrare.",
	"@@Aggregate_expandextentifneeded_tag0@@": "Definește modalitatea de tratare a granițelor rasterului de intrare atunci când rândurile sau coloanele acestuia nu sunt un multiplu al factorului de celulă.",
	"@@Aggregate_expandextentifneeded_tag1@@": "Bifat--Extinde granițele de sus sau din dreapta ale rasterului de intrare astfel încât numărul total de celule dintr-un rând sau coloană este un multiplu al factorului de celulă. Cu această opțiune, rasterul de ieșire poate acoperi o întindere spațială mai mare decât rasterul de intrare. Aceasta este setarea implicită.",
	"@@Aggregate_expandextentifneeded_tag2@@": "Nebifat--Reduce numărul de rânduri sau coloane din rasterul de ieșire. Acest lucru trunchiază restul celulelor de la granițele de sus sau din dreapta ale rasterului de intrare, făcând ca numărul de rânduri sau coloane din rasterul de intrare să fie un multiplu al factorului de celulă. Cu această opțiune, rasterul de ieșire poate acoperi o întindere spațială mai mică decât rasterul de intrare.",
	"@@Aggregate_ignorenodataincalculations_tag0@@": "Denotă dacă valorile ${NoData} sunt ignorate de calculul de agregare.",
	"@@Aggregate_ignorenodataincalculations_tag1@@": "Bifat--Specifică faptul că dacă valorile ${NoData} există pentru oricare dintre celulele care se înscriu în întinderea spațială a unei celule mai mari din rasterul de ieșire, valorile ${NoData} vor fi ignorate la stabilirea valorii amplasării celulei de ieșire. Vor fi utilizate doar celulele de intrare din întinderea celulei de ieșire care au valori de date pentru determinarea valorii celulei de ieșire. Aceasta este setarea implicită.",
	"@@Aggregate_ignorenodataincalculations_tag2@@": "Nebifat--Specifică faptul că dacă orice celulă care intră în întinderea spațială a unei celule mai mari de pe rasterul de ieșire are o valoare de ${NoData}, valoarea pentru amplasarea acelei celule de ieșire va fi de ${NoData}. Atunci când se utilizează această opțiune, se presupune că atunci când celulele dintr-o agregare conțin valoarea ${NoData}, există suficiente informații pentru efectuarea calculelor necesare pentru stabilirea unei valori de ieșire.",
	"@@Aggregate_raster_tag0@@": "Rasterul de intrare de agregat.",
	"@@Expand_numberofcells_tag0@@": "Numărul de celule cu care să se extindă.",
	"@@Expand_numberofcells_tag1@@": "Valoarea trebuie să fie un număr întreg și poate fi de 1 sau mai mare.",
	"@@Expand_raster_tag0@@": "Rasterul de intrare pentru care vor fi extinse zonele identificate.",
	"@@Expand_raster_tag1@@": "Trebuie să fie de tip număr întreg.",
	"@@Expand_zonevalues_tag0@@": "Lista de zone de extins.",
	"@@Expand_zonevalues_tag1@@": "Valorile zonei trebuie să fie un număr întreg și pot fi în orice ordine.",
	"@@Expand_zonevalues_tag2@@": "Pentru a specifica zone multiple, folosiți un spațiu pentru a separa valorile zonei.",
	"@@Multidimensional-Filter_dimension_tag0@@": "Dimensiunea din care să se extragă variabile.",
	"@@Multidimensional-Filter_dimensiondefinition_tag0@@": "Specifică metoda care va fi utilizată pentru împărțirea dimensiunii.",
	"@@Multidimensional-Filter_dimensiondefinition_tag1@@": "<strong>Tot</strong>--Va fi folosită gama completă pentru fiecare dimensiune. Aceasta este setarea implicită.",
	"@@Multidimensional-Filter_dimensiondefinition_tag2@@": "<strong>După Valori</strong>--Dimensiunea va fi împărțită folosind o valoare a dimensiunii sau o listă de valori.",
	"@@Multidimensional-Filter_dimensiondefinition_tag3@@": "<strong>După Game</strong>--Dimensiunea va fi împărțită folosind o gamă sau o listă de game.",
	"@@Multidimensional-Filter_dimensiondefinition_tag4@@": "<strong>După Iterare</strong>--Dimensiunea va fi împărțită pe o mărime specificată a intervalului.",
	"@@Multidimensional-Filter_endoffirstiteration_tag0@@": "Sfârșitul primului interval. Acest interval este folosit pentru iterarea în cadrul setului de date. Acest parametru este solicitat atunci când parametrul <strong>Definiția Dimensiunii</strong> este setat la <strong>După Iterare</strong>.",
	"@@Multidimensional-Filter_maximumvalue_tag0@@": "Valoarea maximă pentru gamă. Acest parametru este solicitat atunci când parametrul <strong>Definiția Dimensiunii</strong> este setat la <strong>După Game</strong>.",
	"@@Multidimensional-Filter_minimumvalue_tag0@@": "Valoarea minimă pentru gamă. Acest parametru este solicitat atunci când parametrul <strong>Definiția Dimensiunii</strong> este setat la <strong>După Game</strong>.",
	"@@Multidimensional-Filter_raster_tag0@@": "Raster multidimensional de intrare.",
	"@@Multidimensional-Filter_ranges_tag0@@": "<p>Gamele de interval specificate într-un tabel sunt utilizate pentru a agrega grupuri de valori. Valorile minimă și maximă specifică intervalul care trebuie inclus.</p><p>Acest parametru este solicitat atunci când parametrul<strong>Tip</strong>este setat la<strong>Game de interval</strong>.</p>",
	"@@Multidimensional-Filter_startoffirstiteration_tag0@@": "Începutul primului interval. Acest interval este folosit pentru iterarea în cadrul setului de date. Acest parametru este solicitat atunci când parametrul <strong>Definiția Dimensiunii</strong> este setat la <strong>După Iterare</strong>.",
	"@@Multidimensional-Filter_step_tag0@@": "Frecvența cu care vor fi împărțite datele. Acest parametru este solicitat atunci când parametrul <strong>Definiția Dimensiunii</strong> este setat la <strong>După Iterare</strong>. Valoarea implicită este 3.",
	"@@Multidimensional-Filter_unit_tag0@@": "Specifică unitatea de iterare. Acest parametru este solicitat atunci când parametrul <strong>Definiția Dimensiunii</strong> este setat la <strong>După Iterare</strong> iar parametrul <strong>Dimensiune</strong> este setat la <strong>StdTime</strong>.",
	"@@Multidimensional-Filter_value_tag0@@": "Valoarea pentru dimensiunea specificată. Acest parametru este solicitat atunci când parametrul <strong>Definiția Dimensiunii</strong> este setat la <strong>După Valoare</strong>.",
	"@@Multidimensional-Filter_variables_tag0@@": "Variabilele care vor fi incluse în stratul tematic de raster multidimensional de ieșire. Dacă nu este specificată nicio variabilă, va fi folosită prima variabilă.",
	"@@Multidimensional-Filter_dimensionless_tag0@@": "Specifică dacă stratul tematic ar trebui să aibă valori de dimensiune. Această opțiune este disponibilă numai dacă este selectat un singur segment pentru crearea unui strat tematic.",
	"@@Multidimensional-Filter_dimensionless_tag1@@": "Bifată--Stratul tematic nu va avea valori de dimensiune.",
	"@@Multidimensional-Filter_dimensionless_tag2@@": "Nebifată--Stratul tematic va avea valori de dimensiune. Aceasta este setarea implicită.",
	"@@Multidimensional-Raster_interpolationcellsize_tag0@@": "Dimensiunea celulelor pentru rasterul interpolat. Valoarea implicită este ${1}.",
	"@@Multidimensional-Raster_interpolationmethod_tag0@@": "Metoda de reeșantionare folosită pentru interpolarea datelor neregulate.",
	"@@Multidimensional-Raster_interpolationmethod_tag1@@": "<strong>Cel mai apropiat vecin</strong>--Calculează valoarea pixelului de ieșire folosind cel mai apropiat pixel de intrare. Dacă nu există niciun pixel sursă, nu poate fi creat un pixel nou în ieșire. Aceasta este setarea implicită.",
	"@@Multidimensional-Raster_interpolationmethod_tag2@@": "<strong>Cositorire Liniară</strong>--Utilizează o rețea triangulată neregulată de la punctul central ale fiecărui pixel din rasterul neregulat pentru interpolarea unei suprafețe care este apoi convertită la un raster regulat.",
	"@@Multidimensional-Raster_interpolationmethod_tag3@@": "<strong>Vecin Natural</strong>--Găsește cel mai apropiat subset de eșantioane de intrare de la un punct de interogare și aplică ponderi la acestea pe baza zonelor proporționate pentru interpolarea unei valori.",
	"@@Multidimensional-Raster_interpolationmethod_tag4@@": "<strong>Ponderarea Distanței Inverse</strong>--Determină valorile pixelilor utilizând o combinație ponderată liniar a unui set de puncte sau pixeli. Ponderarea este o funcție inversă a distanței de la puncte sau pixeli cunoscuți.",
	"@@Multidimensional-Raster_raster_tag0@@": "Raster multidimensional de intrare.",
	"@@Multidimensional-Raster_variables_tag0@@": "Variabila sau variabilele care vor fi incluse în stratul tematic de raster multidimensional.",
	"@@Random_distribution_tag0@@": "Specificați metoda de distribuire a valorii aleatorii de utilizat.",
	"@@Random_distribution_tag1@@": "<strong>Uniform</strong> (Minimum, Maximum)--O distribuire uniformă cu un interval definit. Valorile implicite sunt 0 pentru Minimum și 1 pentru Maximum. Aceasta este setarea implicită.",
	"@@Random_distribution_tag2@@": "<strong>Număr Întreg</strong> (Minimum, Maximum)--O distribuire a unui număr întreg cu un interval definit. Valorile implicite sunt 1 pentru Minimum și 10 pentru Maximum.",
	"@@Random_distribution_tag3@@": "<strong>Normal</strong> (Deviere Medie, Standard)--O distribuire normală cu o deviere medie și standard. Valorile implicite sunt 0 pentru Deviere Medie și 1 pentru Standard.",
	"@@Random_distribution_tag4@@": "<strong>Exponențial</strong> (Medie)--O distribuire exponențială cu o medie definită. Valoarea implicită este 1.",
	"@@Random_distribution_tag5@@": "<strong>Poisson</strong> (Medie)--O distribuire Poisson cu o medie definită. Valoarea implicită este 1.",
	"@@Random_distribution_tag6@@": "<strong>Gamma</strong> (Alfa, Beta)--O distribuire gama cu alfa și beta definite. Valorile implicite sunt 1 pentru Alfa și 1 pentru Beta.",
	"@@Random_distribution_tag7@@": "<strong>Binomial</strong> (N, Probabilitate)--O distribuire binomială cu N și probabilitate definită. Valorile implicite sunt 10 pentru N și 0,5 pentru Probabilitate.",
	"@@Random_distribution_tag8@@": "<strong>Geometric</strong> (Probabilitate)--O distribuire geometrică cu o probabilitate definită. Valoarea implicită este 0,5.",
	"@@Random_distribution_tag9@@": "<strong>Binomial Negativ</strong> (r, Probabilitate)--O distribuire Pascal cu r și probabilitate definită. Valorile implicite sunt 10,0 pentru r și 0,5 pentru Probabilitate.",
	"@@Random_randomnumbergenerator_tag0@@": "Specificați algoritmul generator aleatoriu care folosește plecarea și distribuția pentru a produce o secvență de numere aleatorii. Opţiunile disponibile sunt următoarele:",
	"@@Random_randomnumbergenerator_tag1@@": "Chenar C Standard",
	"@@Random_randomnumbergenerator_tag2@@": "Algoritm colectat ACM 599",
	"@@Random_randomnumbergenerator_tag3@@": "Mersenne Twister",
	"@@Random_randomnumbergenerator_tag4@@": "Valoarea implicită este Mersenne Twister.",
	"@@Random_rasterinfo_tag0@@": "Folosiți butonul <strong>Încarcă raster șablon</strong> pentru a încărca un șablon dintr-un director sau portal.",
	"@@Random_seed_tag0@@": "Plecarea este o valoare de număr întreg și este folosită pentru a iniția generatorul de numere aleatorii. Valoarea implicită este 1.",
	"@@Shrink_numberofcells_tag0@@": "Numărul de celule cu care să se contracte fiecare zonă specificată.",
	"@@Shrink_numberofcells_tag1@@": "Valoarea trebuie să fie un număr întreg și poate fi de 1 sau mai mare.",
	"@@Shrink_raster_tag0@@": "Rasterul de intrare pentru care vor fi micșorate zonele identificate.",
	"@@Shrink_raster_tag1@@": "Trebuie să fie de tip număr întreg.",
	"@@Shrink_zonevalues_tag0@@": "Lista de zone de micșorat.",
	"@@Shrink_zonevalues_tag1@@": "Valorile zonei trebuie să fie un număr întreg și pot fi în orice ordine.",
	"@@Shrink_zonevalues_tag2@@": "Pentru a specifica zone multiple, folosiți un spațiu pentru a separa valorile zonei.",
	"@@Distance-Accumulation_costraster_tag0@@": "Un raster care definește costul sau impedanța deplasării planimetrice prin fiecare celulă. Valoarea din fiecare amplasare a celulei reprezintă distanța cost-pe-unitate pentru deplasarea prin aceasta. Fiecare valoare de amplasare a celulei este înmulțită cu rezoluția celulei și se compensează deplasarea pe diagonală pentru a obține costul total al deplasării prin celulă.",
	"@@Distance-Accumulation_costraster_tag1@@": "Valorile <strong>Raster de Cost</strong> poate fi un număr întreg sau o virgulă mobilă, dar nu pot fi negative sau zero.",
	"@@Distance-Accumulation_distancemethod_tag0@@": "Stabilește dacă distanța se calculează utilizând o metodă în plan (pământ plat) sau una geodezică (elipsoid).",
	"@@Distance-Accumulation_distancemethod_tag1@@": "Planar--Măsurătorile planare coordonate carteziene 2D pentru a calcula lungimea și suprafața. Opțiunea este disponibilă numai la măsurarea în cadrul unui sistem de coordonate proiectate, iar planul 2D al sistemului de coordonate respectiv va fi utilizat ca bază pentru măsurători.",
	"@@Distance-Accumulation_distancemethod_tag2@@": "Geodezic--Cea mai scurtă linie dintre două puncte de pe suprafața pământului pe un sferoid (elipsoid). Prin urmare, indiferent de proiecția de intrare sau de ieșire, rezultatele nu se schimbă.",
	"@@Distance-Accumulation_distancemethod_tag3@@": "<strong>Notă:</strong> o utilizare a liniei geodezice este determinarea cele mai scurte distanțe dintre două orașe pentru un traseu de zbor al unui avion. Aceasta mai este cunoscută și drept linie circulară mare, dacă este bazată pe o sferă și nu pe un elipsoid.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag0@@": "Stabilește dacă este creat doar rasterul de acumulare a distanței sau este creat un raster multibandă care să constea atât în rasterul de acumulare a distanței cât și rasterul de direcție inversă.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag1@@": "Nebifat--Rezultatul este rasterul de acumulare a distanței. Acesta este un rezultat cu bandă singulară. Aceasta este setarea implicită.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag2@@": "Bifat--Este creat un rezultat multibandă. Prima bandă este rasterul de acumulare a distanței iar banda a doua este rasterul de direcție inversă.",
	"@@Distance-Accumulation_generatebackdirectionbandasadditionalbandinoutput_tag3@@": "Rasterul de direcție inversă calculează, pentru fiecare celulă, direcția, în grade, până la celula vecină de-a lungul celui mai scurt traseu înapoi către cea mai apropiată sursă în timp ce se evită barierele.",
	"@@Distance-Accumulation_horizontalfactor_tag0@@": "<p>Definește relația dintre factorul de cost orizontal și unghiul de deplasare relativă orizontală (HRMA).</p><p>Există mai mulți factori cu modificatori care identifică un grafic vertical definit al factorilor. În plus, se poate utiliza un tabel pentru a crea un grafic personalizat. Graficele sunt utilizate pentru a identifica factorul vertical utilizat la calcularea costului total pentru deplasarea pe o celulă învecinată.</p><p>În explicațiile de mai jos, sunt utilizate două acronime: HF și HRMA. HF vine de la factor orizontal, care definește dificultatea orizontală apărută la deplasarea de la o celulă la următoarea. HRMA vine de la unghi de deplasare relativă orizontală, care identifică unghiul dintre direcția orizontală de la o celulă și direcția de deplasare.</p><p><strong>Tipurile de factori orizontali</strong> includ următoarele:</p><ul><li><strong>Binar</strong>--Indică faptul că, în cazul în care HRMA este mai mic decât unghiul de tăiere, HF este setat la valoarea asociată factorului zero; în caz contrar, este infinit.</li><li><strong>Înainte</strong>--Stabilește că este permisă numai deplasarea înainte. HRMA trebuie să fie mai mare sau egal cu 0 și nu mai mic decât 90 de grade (0 &lt;= HRMA &lt; 90). Dacă HRMA este mai mare decât 0 și mai mic decât 45 de grade, HF pentru celulă este setat la valoarea asociată cu factorul zero. Dacă HRMA este mai mare sau egal cu 45 de grade, este utilizată valoarea modificatorului pentru valoarea laterală. HF pentru orice valoare HRMA egală sau mai mare de 90 de grade este setată la infinit.</li><li><strong>Liniar</strong>--Specifică faptul că HF este o funcție liniară a HRMA.</li><li><strong>Liniar invers</strong>--Specifică faptul că HF este o funcție liniară inversă a HRMA..</li><li><strong>Tabel</strong>--Identifică faptul că un fișier tabel va fi utilizat pentru a defini graficul factorului orizontal utilizat pentru a determina HF.</li></ul><p>:Factorii de modificare a factorilor orizontali includ următoarele</p><ul><li><strong>Zero factor</strong>--Factorul orizontal care urmează să fie utilizat atunci când HRMA este zero. Acest factor poziționează intersecția y pentru oricare dintre funcțiile factorului orizontal.</li><li><strong>Unghiul de tăiere</strong>--Definește unghiul HRMA dincolo de care HF va fi setat la infinit.</li><li><strong>Panta</strong>--Stabilește panta liniei drepte utilizate cu cuvintele cheie pentru factorul <strong>Liniar</strong>și<strong>Liniar invers</strong>orizontal. Panta este specificată ca o fracțiune de creștere față de cursă (de exemplu, o pantă de 45 la sută este 1/45, care se introduce ca 0,02222).</li><li><strong>Valoare secundară</strong>--Stabilește HF atunci când HRMA este mai mare sau egală cu 45 de grade și mai mică de 90 de grade atunci când cuvântul cheie al factorului <strong>înainte</strong>orizontal este specificat.</li><li><strong>N umele tabelului</strong>--Identifică numele tabelului care definește HF.</li></ul>",
	"@@Distance-Accumulation_horizontalraster_tag0@@": "Un raster care definește direcția orizontală pentru fiecare celulă.",
	"@@Distance-Accumulation_horizontalraster_tag1@@": "Valorile din raster trebuie să fie numere întregi cuprinse între 0 și 360, 0 grade reprezentând nordul sau către partea superioară a ecranului, crescând în sens orar. Zonelor plate ar trebui să li se atribuie valoarea -1. Valorile din fiecare amplasare vor fi folosite împreună cu <strong>Factorul orizontal</strong> pentru a determina costul orizontal înregistrat la deplasarea de la o celulă la vecinele acesteia.",
	"@@Distance-Accumulation_initialaccumulation_tag0@@": "Costul acumulativ inițial pentru a începe calcularea costurilor. Acest parametru permite specificarea costului fix asociat unei surse. În loc să înceapă la un cost cu valoarea 0, algoritmul de cost va începe cu valoarea specificată.",
	"@@Distance-Accumulation_initialaccumulation_tag1@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Distance-Accumulation_initialaccumulation_tag2@@": "Valoarea trebuie să fie cel puțin zero. Valoarea implicită este 0.",
	"@@Distance-Accumulation_maximumaccumulation_tag0@@": "Definește costul acumulativ maxim pentru călător pentru o sursă. Calculele de cost continuă pentru fiecare sursă până când este atinsă capacitatea specificată.",
	"@@Distance-Accumulation_maximumaccumulation_tag1@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Distance-Accumulation_maximumaccumulation_tag2@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag0@@": "Un multiplicator care se aplică valorilor de cost.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag1@@": "Acest parametru permite controlul modului de deplasare sau magnitudinea pentru o sursă. Cu cât multiplicatorul este mai mare, cu atât costul de deplasare prin fiecare celulă este mai mare.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag2@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Distance-Accumulation_multipliertoapplytocosts_tag3@@": "Valorile trebuie să fie mai mari decât zero. Valoarea implicită este 1.",
	"@@Distance-Accumulation_rasterbarriers_tag0@@": "Rasterul care definește barierele.",
	"@@Distance-Accumulation_rasterbarriers_tag1@@": "Setul de date trebuie să conțină NoData acolo unde nu există bariere. Barierele sunt reprezentate de valori valide, inclusiv zero.",
	"@@Distance-Accumulation_rasterbarriers_tag2@@": "Barierele pot fi definite de un raster de tip număr întreg sau cu virgulă mobilă.",
	"@@Distance-Accumulation_sourceraster_tag0@@": "Amplasările sursei de intrare.",
	"@@Distance-Accumulation_sourceraster_tag1@@": "Acesta este un set de date raster care identifică celulele sau amplasările pe baza cărora se calculează cea mai mică valoare cost-distanță pentru fiecare amplasare de celulă de ieșire.",
	"@@Distance-Accumulation_sourceraster_tag2@@": "Poate fi de tip număr întreg sau virgulă mobilă.",
	"@@Distance-Accumulation_surfaceraster_tag0@@": "Un raster care definește valorile de elevație pentru fiecare amplasare de celulă.",
	"@@Distance-Accumulation_surfaceraster_tag1@@": "Valorile sunt utilizate pentru a calcula distanța suprafeței efective acoperite la comutarea între celule.",
	"@@Distance-Accumulation_traveldirection_tag0@@": "Definește direcția călătorului la aplicarea factorului vertical, factorului orizontal și ratei de rezistență a sursei.",
	"@@Distance-Accumulation_traveldirection_tag1@@": "<strong>De la sursă</strong>--Factorul vertical, factorul orizontal și rata de rezistență a sursei vor fi aplicate începând cu sursa de intrare și ajungând la celulele care nu aparțin sursei. Aceasta este setarea implicită.",
	"@@Distance-Accumulation_traveldirection_tag2@@": "<strong>La sursă</strong>--Factorul vertical, factorul orizontal și rata de rezistență a sursei vor fi aplicate începând cu fiecare celulă care nu aparține sursei și ajungând la sursa de intrare.",
	"@@Distance-Accumulation_traveldirection_tag3@@": "Fie specificați cuvântul-cheie <strong>De la sursă</strong> sau <strong>La sursă</strong>, care va fi aplicat tuturor surselor, fie specificați un câmp din <strong>Rasterul Sursă</strong> care include cuvintele cheie pentru a identifica direcția de deplasare pentru fiecare sursă. Câmpul respectiv trebuie să conțină șirul ${FROM_SOURCE} sau ${TO_SOURCE}.",
	"@@Distance-Accumulation_verticalfactor_tag0@@": "<p>Definește relația dintre factorul de cost vertical și unghiul de deplasare relativă orizontală (VRMA).</p><p>Există mai mulți factori cu modificatori care identifică un grafic vertical definit al factorilor. În plus, se poate utiliza un tabel pentru a crea un grafic personalizat. Graficele sunt utilizate pentru a identifica factorul vertical utilizat la calcularea costului total pentru deplasarea pe o celulă învecinată.</p><p>În explicațiile de mai jos, sunt utilizate două acronime: VF și VRMA. VF vine de la factor vertical, care definește dificultatea verticală apărută la deplasarea de la o celulă la următoarea. VRMA reprezintă unghiul de deplasare relativă verticală, care identifică unghiul de înclinare dintre celula DE LA, sau de procesare, și celula CĂTRE.</p><p><strong>Tipurile de factori verticali</strong> includ următoarele:</p><ul><li><strong>Binar</strong>--Specifică faptul că, dacă VRMA este mai mare decât unghiul de tăietură joasă și mai mic decât unghiul de tăietură înaltă, VF este setat la valoarea asociată cu factorul zero; în caz contrar, este infinit.</li><li><strong>Liniar</strong>--Indică că VF este o funcție liniară a VRMA.</li><li><strong>Liniar simetric</strong>--Specifică faptul că VF este o funcție liniară a VRMA în partea negativă, respectiv pozitivă a VRMA, iar cele două funcții liniare sunt simetrice în raport cu axa VF (y).</li><li><strong>Liniar invers</strong>--Indică că VF este o funcție liniară inversă a VRMA.</li><li><strong>Liniar invers simetric</strong>--Specifică faptul că VF este o funcție liniară inversă a VRMA în partea negativă, respectiv pozitivă a VRMA, iar cele două funcții liniare sunt simetrice în raport cu axa VF (y).</li><li><strong>Cos</strong>--Identifică VF ca funcția pe bază de cosinus a VRMA.</li><li><strong>Sec</strong>--Identifică VF ca funcția pe bază de secantă a VRMA.</li><li><strong>Cos-Sec</strong>--Specifică faptul că VF este funcția bazată pe cosinus a VRMA atunci când VRMA este negativă și funcția bazată pe secantă a VRMA atunci când VRMA nu este negativă.</li><li><strong>Sec-Cos</strong>--Specifică faptul că VF este funcția bazată pe secante a VRMA atunci când VRMA este negativă și funcția bazată pe cosinus a VRMA atunci când VRMA nu este negativă.</li><li><strong>Tabel</strong>--Identifică faptul că un fișier tabel va fi utilizat pentru a defini graficul factorului vertical care este utilizat pentru a determina VF-urile.</li></ul><p>Modificatori ai cuvintelor cheie verticale includ următoarele:</p><ul><li><strong>Factorul zero</strong>--Stabilește factorul vertical utilizat atunci când VRMA este zero. Acest factor poziționează interceptarea y a funcției specificate. Potrivit definiției, factorul zero nu se aplică niciunei funcții verticale trigonometrice (COS, SEC, COS-SEC sau SEC-COS). Y-intercept este definit de aceste funcții.</li><li><strong>Unghiul de tăiere joasă</strong>--Definește unghiul VRMA sub care VF va fi setat la infinit..</li><li><strong>Unghiul de tăiere înaltă</strong>--Definește unghiul VRMA peste care VF va fi setat la infinit.</li><li><strong>Panta</strong>--Stabilește panta liniei drepte utilizate cu cuvintele cheie de factor vertical <strong>Liniar</strong>și<strong>Invers Liniar</strong>. Panta este specificată ca o fracție a gradientului (de exemplu, o pantă de 45 la sută este 1/45, care se introduce ca 0,02222).</li><li><strong>Numele tabelului</strong>--Identifică numele tabelului care definește VF.</li></ul>",
	"@@Distance-Accumulation_verticalraster_tag0@@": "Definește relația dintre factorul de cost vertical și unghiul de deplasare relativă verticală (VRMA).",
	"@@Distance-Accumulation_verticalraster_tag1@@": "Valorile sunt utilizate pentru calcularea pantei utilizate pentru identificarea factorului vertical apărut la deplasarea de la o celulă la alta.",
	"@@Distance-Allocation_costraster_tag0@@": "Un raster care definește costul sau impedanța deplasării planimetrice prin fiecare celulă. Valoarea din fiecare amplasare a celulei reprezintă distanța cost-pe-unitate pentru deplasarea prin aceasta. Fiecare valoare de amplasare a celulei este înmulțită cu rezoluția celulei și se compensează deplasarea pe diagonală pentru a obține costul total al deplasării prin celulă.",
	"@@Distance-Allocation_costraster_tag1@@": "Valorile <strong>Raster de Cost</strong> poate fi un număr întreg sau o virgulă mobilă, dar nu pot fi negative sau zero.",
	"@@Distance-Allocation_distancemethod_tag0@@": "Stabilește dacă distanța se calculează utilizând o metodă în plan (pământ plat) sau una geodezică (elipsoid).",
	"@@Distance-Allocation_distancemethod_tag1@@": "Planar--Măsurătorile planare coordonate carteziene 2D pentru a calcula lungimea și suprafața. Opțiunea este disponibilă numai la măsurarea în cadrul unui sistem de coordonate proiectate, iar planul 2D al sistemului de coordonate respectiv va fi utilizat ca bază pentru măsurători.",
	"@@Distance-Allocation_distancemethod_tag2@@": "Geodezic--Cea mai scurtă linie dintre două puncte de pe suprafața pământului pe un sferoid (elipsoid). Prin urmare, indiferent de proiecția de intrare sau de ieșire, rezultatele nu se schimbă.",
	"@@Distance-Allocation_distancemethod_tag3@@": "<strong>Notă:</strong> o utilizare a liniei geodezice este determinarea cele mai scurte distanțe dintre două orașe pentru un traseu de zbor al unui avion. Aceasta mai este cunoscută și drept linie circulară mare, dacă este bazată pe o sferă și nu pe un elipsoid.",
	"@@Distance-Allocation_horizontalfactor_tag0@@": "<p>Definește relația dintre factorul de cost orizontal și unghiul de deplasare relativă orizontală (HRMA).</p><p>Există mai mulți factori cu modificatori care identifică un grafic vertical definit al factorilor. În plus, se poate utiliza un tabel pentru a crea un grafic personalizat. Graficele sunt utilizate pentru a identifica factorul vertical utilizat la calcularea costului total pentru deplasarea pe o celulă învecinată.</p><p>În explicațiile de mai jos, sunt utilizate două acronime: HF și HRMA. HF vine de la factor orizontal, care definește dificultatea orizontală apărută la deplasarea de la o celulă la următoarea. HRMA vine de la unghi de deplasare relativă orizontală, care identifică unghiul dintre direcția orizontală de la o celulă și direcția de deplasare.</p><p><strong>Tipurile de factori orizontali</strong> includ următoarele:</p><ul><li><strong>Binar</strong>--Indică faptul că, în cazul în care HRMA este mai mic decât unghiul de tăiere, HF este setat la valoarea asociată factorului zero; în caz contrar, este infinit.</li><li><strong>Înainte</strong>--Stabilește că este permisă numai deplasarea înainte. HRMA trebuie să fie mai mare sau egal cu 0 și nu mai mic decât 90 de grade (0 &lt;= HRMA &lt; 90). Dacă HRMA este mai mare decât 0 și mai mic decât 45 de grade, HF pentru celulă este setat la valoarea asociată cu factorul zero. Dacă HRMA este mai mare sau egal cu 45 de grade, este utilizată valoarea modificatorului pentru valoarea laterală. HF pentru orice valoare HRMA egală sau mai mare de 90 de grade este setată la infinit.</li><li><strong>Liniar</strong>--Specifică faptul că HF este o funcție liniară a HRMA.</li><li><strong>Liniar invers</strong>--Specifică faptul că HF este o funcție liniară inversă a HRMA..</li><li><strong>Tabel</strong>--Identifică faptul că un fișier tabel va fi utilizat pentru a defini graficul factorului orizontal utilizat pentru a determina HF.</li></ul><p>:Factorii de modificare a factorilor orizontali includ următoarele</p><ul><li><strong>Zero factor</strong>--Factorul orizontal care urmează să fie utilizat atunci când HRMA este zero. Acest factor poziționează intersecția y pentru oricare dintre funcțiile factorului orizontal.</li><li><strong>Unghiul de tăiere</strong>--Definește unghiul HRMA dincolo de care HF va fi setat la infinit.</li><li><strong>Panta</strong>--Stabilește panta liniei drepte utilizate cu cuvintele cheie pentru factorul <strong>Liniar</strong>și<strong>Liniar invers</strong>orizontal. Panta este specificată ca o fracțiune de creștere față de cursă (de exemplu, o pantă de 45 la sută este 1/45, care se introduce ca 0,02222).</li><li><strong>Valoare secundară</strong>--Stabilește HF atunci când HRMA este mai mare sau egală cu 45 de grade și mai mică de 90 de grade atunci când cuvântul cheie al factorului <strong>înainte</strong>orizontal este specificat.</li><li><strong>N umele tabelului</strong>--Identifică numele tabelului care definește HF.</li></ul>",
	"@@Distance-Allocation_horizontalraster_tag0@@": "Un raster care definește direcția orizontală pentru fiecare celulă.",
	"@@Distance-Allocation_horizontalraster_tag1@@": "Valorile din raster trebuie să fie numere întregi cuprinse între 0 și 360, 0 grade reprezentând nordul sau către partea superioară a ecranului, crescând în sens orar. Zonelor plate ar trebui să li se atribuie valoarea -1. Valorile din fiecare amplasare vor fi folosite împreună cu <strong>Factorul orizontal</strong> pentru a determina costul orizontal înregistrat la deplasarea de la o celulă la vecinele acesteia.",
	"@@Distance-Allocation_initialaccumulation_tag0@@": "Costul acumulativ inițial pentru a începe calcularea costurilor. Acest parametru permite specificarea costului fix asociat unei surse. În loc să înceapă la un cost cu valoarea 0, algoritmul de cost va începe cu valoarea specificată.",
	"@@Distance-Allocation_initialaccumulation_tag1@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Distance-Allocation_initialaccumulation_tag2@@": "Valoarea trebuie să fie cel puțin zero. Valoarea implicită este 0.",
	"@@Distance-Allocation_maximumaccumulation_tag0@@": "Definește costul acumulativ maxim pentru călător pentru o sursă. Calculele de cost continuă pentru fiecare sursă până când este atinsă capacitatea specificată.",
	"@@Distance-Allocation_maximumaccumulation_tag1@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Distance-Allocation_maximumaccumulation_tag2@@": "Valoarea trebuie să fie mai mare decât zero. Capacitatea implicită este la marginea rasterului de ieșire.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag0@@": "Un multiplicator care se aplică valorilor de cost.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag1@@": "Acest parametru permite controlul modului de deplasare sau magnitudinea pentru o sursă. Cu cât multiplicatorul este mai mare, cu atât costul de deplasare prin fiecare celulă este mai mare.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag2@@": "Valorile trebuie să fie mai mari decât zero. Valoarea implicită este 1.",
	"@@Distance-Allocation_multipliertoapplytocosts_tag3@@": "O valoare numerică (dublă) sau un câmp din <strong>Raster Sursă</strong> poate fi utilizată pentru acest parametru.",
	"@@Distance-Allocation_rasterbarriers_tag0@@": "Rasterul care definește barierele.",
	"@@Distance-Allocation_rasterbarriers_tag1@@": "Setul de date trebuie să conțină NoData acolo unde nu există bariere. Barierele sunt reprezentate de valori valide, inclusiv zero.",
	"@@Distance-Allocation_rasterbarriers_tag2@@": "Barierele pot fi definite de un raster de tip număr întreg sau cu virgulă mobilă.",
	"@@Distance-Allocation_sourcefield_tag0@@": "Câmpul utilizat pentru alocarea valorilor la amplasările sursă. Trebuie să fie un tip de număr întreg.",
	"@@Distance-Allocation_sourceraster_tag0@@": "Amplasările sursei de intrare.",
	"@@Distance-Allocation_sourceraster_tag1@@": "Acesta este un set de date raster care identifică celulele sau amplasările pe baza cărora se calculează cea mai mică valoare cost-distanță pentru fiecare amplasare de celulă de ieșire.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag0@@": "Determină dacă este creat doar rasterul de alocare sau dacă este creat un rezultat multibandă.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag1@@": "Nebifat--Rezultatul este rasterul de alocare a distanței. Acesta este un rezultat cu bandă singulară. Aceasta este setarea implicită.",
	"@@Distance-Allocation_sourcerowandcolumnbands_tag2@@": "Bifat--Este creat un raster multibandă. Prima bandă este rasterul de alocare a distanței, a doua bandă include un indice de rând iar a treia bandă include un indice de coloană. Acești indici identifică amplasarea celulei sursă care este la cea mai mică distanță de cost acumulată.",
	"@@Distance-Allocation_surfaceraster_tag0@@": "Un raster care definește valorile de elevație pentru fiecare amplasare de celulă.",
	"@@Distance-Allocation_surfaceraster_tag1@@": "Valorile sunt utilizate pentru a calcula distanța suprafeței efective acoperite la comutarea între celule.",
	"@@Distance-Allocation_traveldirection_tag0@@": "Definește direcția călătorului la aplicarea factorului vertical, factorului orizontal și ratei de rezistență a sursei.",
	"@@Distance-Allocation_traveldirection_tag1@@": "<strong>De la sursă</strong>--Factorul vertical, factorul orizontal și rata de rezistență a sursei vor fi aplicate începând cu sursa de intrare și ajungând la celulele care nu aparțin sursei. Aceasta este setarea implicită.",
	"@@Distance-Allocation_traveldirection_tag2@@": "<strong>La sursă</strong>--Factorul vertical, factorul orizontal și rata de rezistență a sursei vor fi aplicate începând cu fiecare celulă care nu aparține sursei și ajungând la sursa de intrare.",
	"@@Distance-Allocation_traveldirection_tag3@@": "Fie specificați cuvântul-cheie <strong>De la sursă</strong> sau <strong>La sursă</strong>, care va fi aplicat tuturor surselor, fie specificați un câmp din <strong>Rasterul Sursă</strong> care include cuvintele cheie pentru a identifica direcția de deplasare pentru fiecare sursă. Câmpul respectiv trebuie să conțină șirul ${FROM_SOURCE} sau ${TO_SOURCE}.",
	"@@Distance-Allocation_verticalfactor_tag0@@": "<p>Definește relația dintre factorul de cost vertical și unghiul de deplasare relativă orizontală (VRMA).</p><p>Există mai mulți factori cu modificatori care identifică un grafic vertical definit al factorilor. În plus, se poate utiliza un tabel pentru a crea un grafic personalizat. Graficele sunt utilizate pentru a identifica factorul vertical utilizat la calcularea costului total pentru deplasarea pe o celulă învecinată.</p><p>În explicațiile de mai jos, sunt utilizate două acronime: VF și VRMA. VF vine de la factor vertical, care definește dificultatea verticală apărută la deplasarea de la o celulă la următoarea. VRMA reprezintă unghiul de deplasare relativă verticală, care identifică unghiul de înclinare dintre celula DE LA, sau de procesare, și celula CĂTRE.</p><p><strong>Tipurile de factori verticali</strong> includ următoarele:</p><ul><li><strong>Binar</strong>--Specifică faptul că, dacă VRMA este mai mare decât unghiul de tăietură joasă și mai mic decât unghiul de tăietură înaltă, VF este setat la valoarea asociată cu factorul zero; în caz contrar, este infinit.</li><li><strong>Liniar</strong>--Indică că VF este o funcție liniară a VRMA.</li><li><strong>Liniar simetric</strong>--Specifică faptul că VF este o funcție liniară a VRMA în partea negativă, respectiv pozitivă a VRMA, iar cele două funcții liniare sunt simetrice în raport cu axa VF (y).</li><li><strong>Liniar invers</strong>--Indică că VF este o funcție liniară inversă a VRMA.</li><li><strong>Liniar invers simetric</strong>--Specifică faptul că VF este o funcție liniară inversă a VRMA în partea negativă, respectiv pozitivă a VRMA, iar cele două funcții liniare sunt simetrice în raport cu axa VF (y).</li><li><strong>Cos</strong>--Identifică VF ca funcția pe bază de cosinus a VRMA.</li><li><strong>Sec</strong>--Identifică VF ca funcția pe bază de secantă a VRMA.</li><li><strong>Cos-Sec</strong>--Specifică faptul că VF este funcția bazată pe cosinus a VRMA atunci când VRMA este negativă și funcția bazată pe secantă a VRMA atunci când VRMA nu este negativă.</li><li><strong>Sec-Cos</strong>--Specifică faptul că VF este funcția bazată pe secante a VRMA atunci când VRMA este negativă și funcția bazată pe cosinus a VRMA atunci când VRMA nu este negativă.</li><li><strong>Tabel</strong>--Identifică faptul că un fișier tabel va fi utilizat pentru a defini graficul factorului vertical care este utilizat pentru a determina VF-urile.</li></ul><p>Modificatori ai cuvintelor cheie verticale includ următoarele:</p><ul><li><strong>Factorul zero</strong>--Stabilește factorul vertical utilizat atunci când VRMA este zero. Acest factor poziționează interceptarea y a funcției specificate. Potrivit definiției, factorul zero nu se aplică niciunei funcții verticale trigonometrice (COS, SEC, COS-SEC sau SEC-COS). Y-intercept este definit de aceste funcții.</li><li><strong>Unghiul de tăiere joasă</strong>--Definește unghiul VRMA sub care VF va fi setat la infinit..</li><li><strong>Unghiul de tăiere înaltă</strong>--Definește unghiul VRMA peste care VF va fi setat la infinit.</li><li><strong>Panta</strong>--Stabilește panta liniei drepte utilizate cu cuvintele cheie de factor vertical <strong>Liniar</strong>și<strong>Invers Liniar</strong>. Panta este specificată ca o fracție a gradientului (de exemplu, o pantă de 45 la sută este 1/45, care se introduce ca 0,02222).</li><li><strong>Numele tabelului</strong>--Identifică numele tabelului care definește VF.</li></ul>",
	"@@Distance-Allocation_verticalraster_tag0@@": "Definește relația dintre factorul de cost vertical și unghiul de deplasare relativă verticală (VRMA).",
	"@@Distance-Allocation_verticalraster_tag1@@": "Valorile sunt utilizate pentru calcularea pantei utilizate pentru identificarea factorului vertical apărut la deplasarea de la o celulă la alta.",
	"@@Euclidean-Back-Direction_cellsize_tag0@@": "Dimensiunea celulei la care va fi creat rasterul de ieșire.",
	"@@Euclidean-Back-Direction_cellsize_tag1@@": "Dacă dimensiunea celulei a fost stabilită în mod explicit în <strong>Medii</strong>, aceasta va fi dimensiunea implicită a celulei. Dacă nu a fost setată, dimensiunea celulei de ieșire va fi aceeași cu <strong>Rasterul Sursă</strong>.",
	"@@Euclidean-Back-Direction_distancemethod_tag0@@": "Stabilește dacă distanța se calculează utilizând o metodă în plan (pământ plat) sau una geodezică (elipsoid).",
	"@@Euclidean-Back-Direction_distancemethod_tag1@@": "Planar--Măsurătorile planare coordonate carteziene 2D pentru a calcula lungimea și suprafața. Opțiunea este disponibilă numai la măsurarea în cadrul unui sistem de coordonate proiectate, iar planul 2D al sistemului de coordonate respectiv va fi utilizat ca bază pentru măsurători.",
	"@@Euclidean-Back-Direction_distancemethod_tag2@@": "Geodezic--Cea mai scurtă linie dintre două puncte de pe suprafața pământului pe un sferoid (elipsoid). Prin urmare, indiferent de proiecția de intrare sau de ieșire, rezultatele nu se schimbă.",
	"@@Euclidean-Back-Direction_distancemethod_tag3@@": "<strong>Notă:</strong> o utilizare a liniei geodezice este determinarea cele mai scurte distanțe dintre două orașe pentru un traseu de zbor al unui avion. Aceasta mai este cunoscută și drept linie circulară mare, dacă este bazată pe o sferă și nu pe un elipsoid.",
	"@@Euclidean-Back-Direction_maximumdistance_tag0@@": "Definește distanța limită în cadrul căreia va fi calculată direcția către cea mai apropiată sursă. Dacă distanța față de cea mai apropiată sursă depășește această valoare, ieșirea pentru celula respectivă va fi NoData.",
	"@@Euclidean-Back-Direction_maximumdistance_tag1@@": "Distanța implicită este reprezentată de extinderea rasterului de ieșire.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag0@@": "Rasterul care definește barierele.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag1@@": "Setul de date trebuie să conțină NoData acolo unde nu există bariere. Barierele sunt reprezentate de valori valide, inclusiv zero.",
	"@@Euclidean-Back-Direction_rasterbarriers_tag2@@": "Barierele pot fi definite de un raster de tip număr întreg sau cu virgulă mobilă.",
	"@@Euclidean-Back-Direction_sourceraster_tag0@@": "Un set de date raster care identifică celulele sau amplasările pe baza cărora se calculează direcția euclidiană pentru fiecare amplasare de celulă de ieșire.",
	"@@Euclidean-Back-Direction_sourceraster_tag1@@": "Tipul de intrare poate fi un număr întreg sau un tip cu virgulă mobilă.",
	"@@Cost-Path_costbacklinkraster_tag0@@": "Denumirea unui strat tematic raster de link de întoarcere la cost utilizat pentru a determina calea de întoarcere la o sursă prin intermediul căii cu cel mai mic cost.",
	"@@Cost-Path_costbacklinkraster_tag1@@": "Pentru fiecare celulă din rasterul de link de întoarcere, o valoare identifică elementul învecinat, respectiv următoarea celulă de pe calea cu cel mai mic cost acumulat de la celulă la o celulă cu sursă unică sau la un set de celule sursă.",
	"@@Cost-Path_costdistanceraster_tag0@@": "Denumirea unui raster de cost-distanță care trebuie să se utilizeze pentru a determina calea cu cel mai mic cost de la amplasările de destinație la o sursă.",
	"@@Cost-Path_costdistanceraster_tag1@@": "Rasterul de cost-distanță este creat de obicei cu funcția Cost distanță, Cost alocare sau Cost link de întoarcere. Stratul tematic de tip raster cost-distanță salvează, pentru fiecare celulă, valoarea cost-distanță minimă acumulată pe o suprafață de cost de la fiecare celulă la un set de celule sursă.",
	"@@Cost-Path_destinationfield_tag0@@": "Câmpul utilizat pentru a obține valori pentru amplasările de destinație. Datele obiectelor spațiale de intrare trebuie să conțină cel puțin un câmp valabil.",
	"@@Cost-Path_destinationraster_tag0@@": "Un strat tematic de set de date raster care identifică acele celule pe baza cărora este determinată calea cu cel mai mic cost la sursa cu cel mai mic cost.",
	"@@Cost-Path_destinationraster_tag1@@": "Stratul tematic raster de intrare este reprezentat de celule care au valori valide (zero este o valoare validă), iar celulelor rămase trebuie să li se aloce NoData.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag0@@": "Forțează funcția pentru tratarea rasterului cu link de întoarcere de intrare ca un raster de direcție a fluxului. Rasterele de direcție a fluxului pot avea un număr întreg cu valori de la 0-255.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag1@@": "Nebifat--Dacă valorile rasterului linkului de întoarcere specificat sunt numere întregi în gama 0-8, setul de date va fi tratat ca raster de link de întoarcere la cost. Dacă valorile sunt de la 0-255, intrarea va fi tratată ca raster de direcție a fluxului. Dacă valorile sunt de la 0-360 și cu virgulă mobilă, intrarea va fi tratată ca raster de direcție de întoarcere.",
	"@@Cost-Path_forceflowdirectionconventionforbacklinkraster_tag2@@": "Bifat--Rasterul furnizat pentru rasterul cu link de întoarcere va fi tratat ca raster de direcție a fluxului. Folosiți această opțiune a rasterului de direcție de flux dacă se întâmplă să aibă o valoare maximă de 8 sau mai puțin.",
	"@@Cost-Path_pathtype_tag0@@": "Un cuvânt cheie care definește modul în care valorile și zonele din datele de destinație introduse vor fi interpretate în calculele costului de cale. Opțiunile sunt următoarele:",
	"@@Cost-Path_pathtype_tag1@@": "<strong>Fiecare Celulă</strong>--Pentru fiecare celulă cu valori valide din datele de destinație introduse, este determinată o cale de cost minim și este salvată în rasterul de ieșire. Cu această opțiune, fiecare celulă a datelor de destinație introduse este tratată separat și este determinată o cale de cost minim pentru fiecare celulă.",
	"@@Cost-Path_pathtype_tag2@@": "<strong>Fiecare Zonă</strong>--Pentru fiecare zonă din datele de destinație introduse, este determinată o cale de cost minim și este salvată în rasterul de ieșire. Cu această opțiune, calea de cost minim pentru fiecare zonă începe la celula cu distanța de cost minim ponderată în zonă.",
	"@@Cost-Path_pathtype_tag3@@": "<strong>Cel mai bun luat individual</strong>--Pentru toate celulele privind datele de destinație introduse, calea de cost minim este determinată din celulă pe baza minimului dintre căile de cost minim către celulele sursă.",
	"@@Cell-Statistics_cellsizetype_tag0@@": "Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt aceleași, toate opțiunile vor avea aceleași rezultate.",
	"@@Cell-Statistics_cellsizetype_tag1@@": "Prima--Utilizați prima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Cell-Statistics_cellsizetype_tag2@@": "Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.",
	"@@Cell-Statistics_cellsizetype_tag3@@": "Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.",
	"@@Cell-Statistics_cellsizetype_tag4@@": "Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.",
	"@@Cell-Statistics_cellsizetype_tag5@@": "Ultima--Utilizați ultima dimensiune a celulelor pentru rasterele de intrare.",
	"@@Cell-Statistics_extenttype_tag0@@": "Alegeți extinderea care trebuie utilizată în rasterul de ieșire:",
	"@@Cell-Statistics_extenttype_tag1@@": "Prima--Utilizați extinderea primului raster de intrare pentru a determina extinderea de procesare.",
	"@@Cell-Statistics_extenttype_tag2@@": "Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este setarea implicită.",
	"@@Cell-Statistics_extenttype_tag3@@": "Reuniune--Utilizați extinderea tuturor rasterelor pentru a determina extinderea de procesare.",
	"@@Cell-Statistics_extenttype_tag4@@": "Ultima--Utilizați extinderea ultimului raster de intrare pentru a determina extinderea de procesare.",
	"@@Cell-Statistics_processasmultiband_tag0@@": "Stabilește modalitatea în care sunt procesate benzile raster de intrare.",
	"@@Cell-Statistics_processasmultiband_tag1@@": "Nebifat--Toate intrările multibandă vor fi procesate ca benzi singulare. Aceasta este setarea implicită.",
	"@@Cell-Statistics_processasmultiband_tag2@@": "Bifat--Toate intrările multibandă vor fi procesate ca multibandă.",
	"@@Cell-Statistics_rasters_tag0@@": "Lista rasterelor pe baza cărora se calculează statistici, pixel cu pixel.",
	"@@Cell-Statistics_percentileinterpolationtype_tag0@@": "<p>Specifică metoda de interpolare care urmează să fie utilizată atunci când valoarea percentila specificată se situează între două valori ale celulelor de intrare.</p><ul><li><strong>Auto-detectare</strong>--În cazul în care rasterele de intrare sunt de tip pixel întreg, se folosește metoda<strong>cea mai apropiată</strong>. În cazul în care rasterul de intrare este de tip pixel în virgulă mobilă, atunci se folosește metoda<strong>Liniară</strong>. Aceasta este valoarea implicită.</li><li><strong>Cea mai apropiată</strong>--Se folosește cea mai apropiată valoare disponibilă de percentila dorită. În acest caz, tipul pixelului de ieșire este același cu cel al rasterului valorii de intrare.</li><li><strong>Liniar</strong>--Se folosește media ponderată a celor două valori înconjurătoare de la percentila dorită. În acest caz, tipul de pixel de ieșire este în virgulă mobilă.</li></ul><p>Această opțiune este disponibilă numai dacă parametrul tipului <strong>Operațiunii</strong> este setat la<strong>Median</strong>sau <strong>Percentilă</strong>.</p>",
	"@@Cell-Statistics_percentilevalue_tag0@@": "<p>Percentila de calculat. Valoarea implicită este 90 pentru cea de-a 90-a percentilă.</p><p>Valorile pot ajunge de la 0 la 100. În principiu, percentila 0 este echivalentă cu statistica minimă, iar cea de-a 100-a percentilă este echivalentă cu maxima. O valoare de 50 va produce în esență același rezultat ca și statistica mediană.</p><p>Această opțiune este disponibilă numai dacă parametrul<strong>Operațiunii</strong>este setat la<strong>Percentilă</strong>.</p>",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag0@@": "Rasterul de direcție inversă conține direcții calculate în grade. Direcția identifică următoarea celulă de-a lungul traseului optim înapoi la sursa cu cel mai mic cost acumulativ, în timp ce evită barierele.",
	"@@Optimal-Path-As-Raster_backdirectionrasterorflowdirectionraster_tag1@@": "Gama de valori este de la 0 grade la 360 grade, cu 0 rezervat pentru celulele sursă. Spre Est (dreapta) este 90, iar valoarea crește în sens orar (180 este sudul, 270 este vestul, iar 360 este nordul).",
	"@@Optimal-Path-As-Raster_destinationfield_tag0@@": "Câmpul utilizat pentru a obține valori pentru amplasările de destinație.",
	"@@Optimal-Path-As-Raster_destinationraster_tag0@@": "Un strat tematic de set de date raster care identifică acele celule pe baza cărora este determinat traseul optim la sursa cu cel mai mic cost. Această intrare este obligatorie.",
	"@@Optimal-Path-As-Raster_destinationraster_tag1@@": "Stratul tematic raster de intrare este reprezentat de celule care au valori valide (zero este o valoare validă), iar celulelor rămase trebuie să li se aloce NoData.",
	"@@Optimal-Path-As-Raster_distanceaccumulationraster_tag0@@": "Rasterul de acumulare a distanței este utilizat pentru a determina traseul optim de la destinații la surse. De obicei, rasterul de acumulare a distanței este creat cu funcția <strong>Acumularea distanței</strong>. Fiecare celulă din rasterul de acumulare a distanței reprezintă valoarea cost-distanță minimă acumulată pe o suprafață de la fiecare celulă la un set de celule sursă.",
	"@@Optimal-Path-As-Raster_pathtype_tag0@@": "Specifică un cuvânt cheie care definește modul în care valorile și zonele din datele de destinație introduse vor fi interpretate în calculele traseului de cost.",
	"@@Optimal-Path-As-Raster_pathtype_tag1@@": "<strong>Fiecare Zonă</strong>--Pentru fiecare zonă din datele de destinație introduse, este determinat un traseu de cost minim și este salvat în rasterul de ieșire. Cu această opțiune, traseul optim pentru fiecare zonă începe la celula cu distanța de cost minim ponderată în zonă.",
	"@@Optimal-Path-As-Raster_pathtype_tag2@@": "<strong>Cel mai bun luat individual</strong>--Pentru toate celulele privind datele de destinație introduse, traseul optim este determinat din celulă pe baza minimului dintre căile de cost minim către celulele sursă.",
	"@@Optimal-Path-As-Raster_pathtype_tag3@@": "<strong>Fiecare Celulă</strong>--Pentru fiecare celulă cu valori valide din datele de destinație introduse, este determinat un traseu optim. Cu această opțiune, fiecare celulă a datelor de destinație introduse este tratată separat și este determinată un traseu optim pentru fiecare celulă.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag0@@": "ID-urile de bandă de utilizat pentru detectarea modificărilor. Dacă nu sunt furnizate ID-uri de bandă, vor fi utilizate toate benzile din setul de date al rasterului de intrare.",
	"@@CCDC-Analysis_bandsfordetectingchange_tag1@@": "Valorile de ID trebuie să fie numere întregi separate cu spații.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag0@@": "ID-urile de bandă pentru banda verde și banda SWIR se vor utiliza pentru masca asociată norilor, umbrelor de nori și zăpezii. Dacă nu sunt furnizate ID-uri de bandă, nu va avea loc mascarea.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag1@@": "Valorile de ID trebuie să fie numere întregi separate cu spații.",
	"@@CCDC-Analysis_bandsfortemporalmasking_tag2@@": "Acest parametru specifică benzile de utilizat pentru mascarea norilor, a umbrelor de nori și a zăpezii. Deoarece umbrele de nori și zăpada par foarte închise în banda de infraroșii de bandă scurtă (SWIR), iar norii și zăpada sunt foarte deschise în banda verde; se recomandă ca indicii de bandă pentru SWIR și pentru benzile verzi să fie mascați.",
	"@@CCDC-Analysis_chi-squaredthresholdfordetectchange_tag0@@": "Pragul de probabilitate a modificărilor de chi-pătrat. Dacă o observație are o probabilitate de modificare calculată care se află peste acest prag, este marcată ca o anomalie, ceea ce este un potențial eveniment de modificare. Valoarea implicită este 0,99.",
	"@@CCDC-Analysis_minimumconsecutiveanomalyobservations_tag0@@": "Numărul minim de observații consecutive de anomalii care trebuie să apară înaintea unui eveniment este considerat drept modificare. Un pixel trebuie marcat ca o anomalie pentru numărul specificat de segmente de timp consecutive înainte de a fi considerat drept o modificare reală. Valoarea implicită este 6.",
	"@@CCDC-Analysis_raster_tag0@@": "Stratul tematic de tip raster multidimensional de intrare.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag0@@": "Frecvența la care se actualizează modelul de serie temporală cu noi observații. Valoarea implicită este actualizarea modelului o dată la 1 an.",
	"@@CCDC-Analysis_updatingfittingfrequency(inyears)_tag1@@": "Acest parametru definește cât de des va fi actualizat modelul de serie temporală cu noile observații. Actualizarea frecventă a unui model poate fi costisitoare din punct de vedere al calculului, iar beneficiile pot fi minime. De exemplu, dacă există 365 de segmente sau observații clare per an în rasterul multidimensional, iar frecvența de actualizare este pentru fiecare observație, procesarea va fi 365 de ori mai scumpă din punct de vedere al calcului, în comparație cu actualizarea o dată pe an, dar este posibil ca precizia să nu fie una ridicată.",
	"@@Trend-To-RGB_modeltype_tag0@@": "Tipul de informații despre model ce trebuie convertite la RGB.",
	"@@Trend-To-RGB_modeltype_tag1@@": "Liniar--Informațiile de tendință liniară vor fi convertite în RGB. Aceasta este setarea implicită.",
	"@@Trend-To-RGB_modeltype_tag2@@": "Armonic--Informațiile de tendință armonică vor fi convertite în RGB.",
	"@@Trend-To-RGB_raster_tag0@@": "Raster de tendință de intrare.",
	"@@LandTrendr-Analysis_bestmodelproportion_tag0@@": "<p>Cea mai bună proporție de model. În timpul procesului de selectare a modelului, instrumentul va calcula valoarea p pentru fiecare model și va selecta un model care are cele mai multe noduri de graf în timp ce păstrează cea mai mică valoare p (cea mai semnificativă) pe baza acestei valori a proporției. O valoare de 1 înseamnă că modelul are cea mai mică valoare p dar poate să nu aibă un număr mare de noduri de graf. Valoarea implicită este de 1,25.</p>",
	"@@LandTrendr-Analysis_maximumnumberofsegments_tag0@@": "<p>Numărul maxim de segmente de corelat cu seria de timp a fiecărui pixel. Valoarea implicită este de 5.</p>",
	"@@LandTrendr-Analysis_minimumnumberofobservations_tag0@@": "<p>Numărul minim de observări valabile necesare pentru efectuarea corelării. Numărul de ani din setul de date de intrare multidimensional trebuie să fie egal cu sau mai mare decât această valoare. Valoarea implicită este de 6.</p>",
	"@@LandTrendr-Analysis_outputotherbands_tag0@@": "<p>Specifică dacă alte benzi vor fi incluse în rezultate.</p><ul><li>Bifat--Alte benzi vor fi incluse în rezultate. Informațiile despre segmentare și noduri de graf din banda de segmentare inițială specificate în parametrul<strong>Bandă de Prelucrare</strong>vor fi corelate cu restul benzilor din imaginile multibandă. Rezultatele modelului vor include mai întâi banda de segmentare, apoi result benzilor.</li><li>Nebifat--Nu vor fi incluse alte benzi. Aceasta este setarea implicită.</li></ul>",
	"@@LandTrendr-Analysis_preventoneyearrecovery_tag0@@": "<p>Specifică dacă vor fi excluse segmentele care prezintă o recuperare de un an.</p><ul><li>Bifat--Segmentele care prezintă o recuperare de un an. Aceasta este valoarea implicită.</li><li>Nebifat--Segmentele care prezintă o recuperare de un an nu vor fi excluse.</li></ul>",
	"@@LandTrendr-Analysis_processingband_tag0@@": "<p>Banda de folosit pentru segmentarea traiectoriilor valorii pixelului în timp. Alegeți banda care va exprima cel mai bine schimbările obiectului spațial pe care doriți să le observați.</p>",
	"@@LandTrendr-Analysis_p-valuethreshold_tag0@@": "<p>Pragul valorii p pentru un model de selectat. După detectarea nodurilor de graf în etapa inițială a corelării modelului, instrumentul va corela fiecare segment și va calcula valoarea p pentru a stabili semnificația modelului. La următoarea iterație, modelul va reduce numărul de segmente cu unul și va recalcula valoarea p. Acest lucru va continua și, dacă valoarea p este mai mică decât valoarea specificată în acest parametru, modelul va fi selectat iar instrumentul va înceta căutarea unui model mai bun. Dacă nu este selectat un astfel de model, instrumentul va selecta un model cu o valoare p mai mică decât<strong>cea mai mică valoare p x valoarea proporției celui mai bun model.</strong>. Valoarea implicită este de 0,01.</p>",
	"@@LandTrendr-Analysis_raster_tag0@@": "<p>Stratul tematic cu rasterul multidimensional Landsat de intrare.</p>",
	"@@LandTrendr-Analysis_recoveryhasincreasetrend_tag0@@": "<p>Specifică dacă recuperarea are o tendință crescătoare (pozitivă).</p><ul><li>Bifat--Recuperarea are o tendință crescătoare. Aceasta este valoarea implicită.</li><li>Nebifat--Recuperarea are o tendință descrescătoare.</li></ul>",
	"@@LandTrendr-Analysis_recoverythreshold_tag0@@": "<p>Valoarea pragului de recuperare, în ani. Dacă un segment are o rată de recuperare mai rapidă de<strong>1/prag de recuperare</strong>, segmentul este eliminat și nu este inclus în modelul seriei de timp. Valoarea trebuie să fie între 0 și 1. Valoarea implicită este de 0,25.</p>",
	"@@LandTrendr-Analysis_snappingdate_tag0@@": "<p>Datele folosite pentru selectarea unui sector pentru fiecare an din setul de date multidimensional de intrare. Va fi selectat sectorul cu data cea mai apropiată de data de secționare. Acest parametru este necesar dacă setul de date de intrare conține date sub-anuale.</p>",
	"@@LandTrendr-Analysis_spikethreshold_tag0@@": "<p>Pragul de folosit pentru amortizarea vârfurilor sau anomaliilor din traiectoria valorii pixelului. Valoarea trebuie să fie între 0 și 1, unde 1 înseamnă că nu există amortizare. Valoarea implicită este de 0,9.</p>",
	"@@LandTrendr-Analysis_vertexcountovershoot_tag0@@": "<p>Numărul de noduri de graf suplimentare mai mult de<strong>max_num_segments + 1</strong>care poate fi folosit pentru potrivirea modelului în timpul etapei inițiale de identificare a nodurilor de graf. Ulterior, în cursul procesului de modelare, numărul de noduri de graf suplimentare va fi redus la<strong>max_num_segments + 1</strong>. Valoarea implicită este 2.</p>",
	"@@Merge-Rasters_rasters_tag0@@": "<p>Seturile de date raster de intrare sau seturile de date raster multidimensionale de fuzionat.</p>",
	"@@Merge-Rasters_resolveoverlapmethod_tag0@@": "<p>Specifică metoda de utilizat pentru soluționarea pixelilor suprapuși în seturile de date combinate.</p><ul><li><strong>Primul</strong>--Valoarea pixelului din zonele de suprapunere este valoarea de la primul raster din lista rasterelor de intrare. Aceasta este valoarea implicită.</li><li><strong>Ultimul</strong>--Valoarea pixelului din zonele de suprapunere este valoarea din ultimul raster din lista rasterelor de intrare.</li><li><strong>Min</strong>--Valoarea pixelului din zonele de suprapunere este valoarea minimă a pixelilor care se suprapun.</li><li><strong>Max</strong>--Valoarea pixelului din zonele de suprapunere este valoarea maximă a pixelilor care se suprapun.</li><li><strong>Medie</strong>--Valoarea pixelului din zonele de suprapunere este media pixelilor care se suprapun.</li><li><strong>Sumă</strong>--Valoarea pixelului din zonele de suprapunere este suma totală a pixelilor care se suprapun.</li></ul>",
	"@@Generate-Trend_cycleunit_tag0@@": "<p>Specifică unitatea de timp de folosit pentru lungimea unui ciclu armonic.</p><ul><li><strong>Zile</strong>--Unitatea pentru lungimea ciclului armonic este ziua.</li><li><strong>Ani</strong>--Unitatea pentru lungimea ciclului armonic este anul. Aceasta este setarea implicită.</li></ul>",
	"@@Generate-Trend_dimensionname_tag0@@": "<p>Dimensiunea de-a lungul căreia va fi extrasă o tendință pentru variabila sau variabilele selectate în analiză.</p>",
	"@@Generate-Trend_harmonicfrequency_tag0@@": "<p>Numărul frecvenței de utilizat în fixarea tendinței. Acest parametru specifică frecvența ciclurilor dintr-un an. Valoarea implicită este 1, sau un ciclu armonic pe an.</p><p>Acest parametru este inclus doar în analiza tendinței pentru regresie armonică.</p>",
	"@@Generate-Trend_ignorenodata_tag0@@": "<p>Specifică dacă valorile NoData sunt ignorate în analiză.</p><ul><li>Bifat--Analiza va include toți pixelii valabili de-a lungul unei dimensiuni date și va ignora orice pixeli NoData. Aceasta este setarea implicită.</li><li>Debifat--Analiza va avea ca rezultat NoData dacă există valori NoData pentru pixeli de-a lungul dimensiunii date.</li></ul>",
	"@@Generate-Trend_lengthofcycle_tag0@@": "<p>Lungimea variației periodice conform modelului. Unitatea este ziua, indiferent de unitatea de timp a datelor de intrare. De exempu, culoarea verde a frunzelor are adesea un ciclu puternic de variații într-un singur an, așadar lungimea ciclului este de 365,25, chiar dacă datele de intrare reprezintă culoarea verde lunară. Datele privind temperatura orară au un ciclu puternic de variație într-o singură zi, așadar lungimea cicluuli este de 1.</p><p>Lungimea implicită este de 365,25 zile pentru datele care variază pe un ciclu anual.</p>",
	"@@Generate-Trend_p-valueofslopecoefficient_tag0@@": "<p>Specifică dacă trebuie calculată statistica valorii P pentru coeficientul de pantă al liniei de tendință.</p><ul><li>Bifat--Valoarea P va fi calculată și afișată la detalii la finalizarea funcției.</li><li>Nebifat--Valoarea P nu va fi calculată. Aceasta este setarea implicită.</li></ul>",
	"@@Generate-Trend_polynomialorder_tag0@@": "<p>Numărul ordinului polinomial de utilizat în fixarea tendinței. Acest parametru specifică ordinea polinomială. Valoarea implicită este 2, sau polinomială de ordin doi.</p><p>Acest parametru este inclus doar în analiza tendinței pentru regresie polinomială.</p>",
	"@@Generate-Trend_r-squared_tag0@@": "<p>Specifică dacă să se calculeze statistica indicelui de concordanță a R la pătrat pentru linia de potrivire a tendinței.</p><ul><li>Bifat--R la pătrat va fi calculat și afișat la detalii la finalizarea funcției.</li><li>Nebifat--R la pătrat nu va fi calculat. Aceasta este setarea implicită.</li></ul>",
	"@@Generate-Trend_raster_tag0@@": "<p>Raster multidimensional de intrare.</p>",
	"@@Generate-Trend_rmse_tag0@@": "<p>Specifică dacă să se genereze eroarea mediei pătratice (RMSE) a liniei de potrivire a tendinței.</p><ul><li>BIfat--RMSE va fi calculată și afișată la detalii la finalizarea funcției. Aceasta este setarea implicită.</li><li>Nebifat—RMSE nu va fi calculată.</li></ul>",
	"@@Generate-Trend_seasonalperiod_tag0@@": "<p>Specifică unitatea de timp de folosit pentru lungimea unei perioade sezoniere la efectuarea testului Seasonal-Kendall.</p><ul><li>Zile--Unitatea de lungime a perioadei sezoniere este ziua. Aceasta este setarea implicită.</li><li>Luni--Unitatea de lungime pentru durata unei perioade sezoniere este luna.</li></ul>",
	"@@Generate-Trend_trendtype_tag0@@": "<p>Specifică tipul liniei de utilizat pentru potrivirea valorilor pixelului de-a lungul unei dimensiuni.</p><ul><li><strong>Liniar</strong>--Fixează valorile pixelului pentru o variabilă de-a lungul unei linii de tendință liniară. Aceasta este setarea implicită.</li><li><strong>Armonică</strong>--Fixează valorile pixelului pentru o variabilă de-a lungul unei linii de tendință armonică.</li><li><strong>Polinomială</strong>--Fixează valorile pixelului pentru o variabilă de-a lungul unei linii de tendință polinomială de ordin doi.</li><li><strong>Mann-Kendall</strong>--Valorile variabile ale pixelilor vor fi evaluate cu ajutorul testului de tendință Mann-Kendall.</li><li><strong>Seasonal Kendall</strong>--Valorile variabile ale pixelului vor fi evaluate cu ajutorul testului de tendință Seasonal-Kendall.</li></ul>",
	"@@Compute-Change_cellsizetype_tag0@@": "<p>Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt la fel, toate opțiunile vor da aceleași rezultate.</p><ul><li>Prima--Utilizați prima dimensiune a celulelor rasterelor de intrare.</li><li>Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.</li><li>Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.</li><li>Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.</li><li>Ultima--Utilizați ultima dimensiune a celulelor rasterelor de intrare.</li></ul>",
	"@@Compute-Change_computechangemethod_tag0@@": "<p>Metoda folosită pentru calcul.</p><ul><li><strong>Diferență</strong>--Va fi calculată diferența matematică, sau scăderea, dintre valorile pixelului din rasterele de intrare. Aceasta este setarea implicită.</li><li><strong>Diferența relativă</strong>--Se va calcula diferența dintre valorile pixelilor, ținând cont de mărimile valorilor comparate.</li><li><strong>Diferența categorică</strong>--Se va calcula diferența dintre două rastere categorice sau tematice, iar rezultatul va conține tranzițiile de clasă care au avut loc între cele două rastere.</li><li><strong>Distanța euclidiană spectrală</strong>--Se va calcula distanța euclidiană dintre valorile pixelilor a două rastere multibandă..</li><li><strong>Diferența unghiului spectral</strong>--Se va calcula unghiul spectral dintre valorile pixelilor a două rastere multibandă. Ieșirea este în radiani.</li><li><strong>Banda cu cele mai multe schimbări</strong>--Se va calcula banda care reprezintă cea mai mare schimbare în fiecare pixel între două rastere multibandă.</li></ul><p>Dacă<strong>Metoda de schimbare a calculului</strong>este setată la<strong>Diferența categorică</strong>și una dintre intrări nu este categorică, se va calcula o diferență simplă.</p>",
	"@@Compute-Change_definetransitioncolors_tag0@@": "<p>Specificați metoda de utilizat pentru simbolizarea pixelilor care și-ai schimbat clasele.</p><ul><li><strong>Media culorilor de la și la</strong>--Culoarea pixelului va fi media culorii clasei sale inițiale și culoarea clasei sale finale.</li><li><strong>Utilizați culorile de la</strong>--Culoarea pixelului va fi culoarea clasei sale inițiale.</li><li><strong>Utilizați culorile la</strong>--Culoarea pixelului va fi culoarea clasei sale finale.</li></ul>",
	"@@Compute-Change_extenttype_tag0@@": "<p>Alegeți ce extindere trebuie folosită în rasterul de ieșire:</p><ul><li>Primul dintre--Utilizați extinderea primului raster de intrare pentru a stabili măsura prelucrării.</li><li>Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este starea implicită.</li><li>Uniunea dintre--Utilizați extinderea tututor rasterelor pentru a stabili extinderea prelucrării.</li><li>Ultimul dintre--Utilizați extinderea ultimului raster de intrare pentru a stabili extinderea prelucrării.</li></ul>",
	"@@Compute-Change_filtermethod_tag0@@": "<p>Alegeți metoda de filtrare pentru calcularea schimbării de categorie.</p><ul><li><strong>Păstrează tot</strong>--Toate clasele sunt incluse în rezultat, nu se va produce nicio filtrare. Alegeți această opțiune pentru a vedea schimbările și persistența dintr-un singur set de date.</li><li><strong>Păstrează doar pixelii schimbați</strong>--Doar clasele care s-au schimbat de la un tip de clasă la altul sunt incluse în rezultat. Alegeți această opțiune dacă vă interesează să vedeți doar schimbările.</li><li><strong>Păstrează doar pixelii neschimbați</strong>--Doar clasele care nu s-au schimbat sunt incluse în rezultat. Alegeți această opțiune dacă vă interesează să vedeți doar persistența.</li></ul>",
	"@@Compute-Change_fromclassvalues_tag0@@": "<p>Valorile clasei din <strong>De La Raster</strong>de inclus în calcul, dacă se compară două rastere de categorie. Aceasta este o listă delimitată de spațiu a valorilor întregi care corespund câmpului<strong>ClassValue</strong>din setul de date al rasterului dvs. de intrare.</p>",
	"@@Compute-Change_fromraster_tag0@@": "<p>Primul raster de folosit în calcul. Pentru a evalua schimbarea de la momentul 1 (mai devreme) la momentul 2 (mai târziu), introduceți rasterul momentului 1 aici.</p>",
	"@@Compute-Change_toclassvalues_tag0@@": "<p>Valorile clasei din<strong>La Raster</strong>de inclus în calcul, dacă se compară două rastere de categorie. Aceasta este o listă delimitată de spațiu a valorilor întregi care corespund câmpului<strong>ClassValue</strong>din setul de date al rasterului dvs. de intrare.</p>",
	"@@Compute-Change_toraster_tag0@@": "<p>Al doilea raster de folosit în calcul. Pentru a evalua schimbarea de la momentul 1 (mai devreme) la momentul 2 (mai târziu), introduceți rasterul momentului 2.</p>",
	"@@Compute-Change_usecolormethod_tag0@@": "<p>Specificați metoda de utilizat pentru simbolizarea pixelilor care și-ai schimbat clasele.</p><ul><li><strong>Media culorilor de la și la</strong>--Culoarea pixelului va fi media culorii clasei sale inițiale și culoarea clasei sale finale.</li><li><strong>Utilizați culorile de la</strong>--Culoarea pixelului va fi culoarea clasei sale inițiale.</li><li><strong>Utilizați culorile la</strong>--Culoarea pixelului va fi culoarea clasei sale finale.</li></ul>",
	"@@Compute-Change_fieldnameforclassnamesinfromraster_tag0@@": "<p>Un câmp care stochează nume de clasă în intrarea<strong>Din raster</strong>. Instrumentul caută automat câmpul <strong>Numele Clasei</strong>sau câmpul <strong>Numele_Clasei</strong>de utilizat.</p><p>Utilizați această opțiune în cazul în care datele de intrare nu conțin aceste nume de câmp standard.</p>",
	"@@Compute-Change_fieldnameforclassnamesintoraster_tag0@@": "<p>Un câmp care stochează nume de clasă în inputul <strong>Către Raster</strong>. Instrumentul va căuta automat câmpul<strong>NumeleClasei</strong>sau câmpul<strong>Numele_Clasei</strong>de utilizat.</p><p>Utilizați această opțiune în cazul în care datele de intrare nu conțin aceste nume de câmp standard.</p>",
	"@@Statistics_numberofcolumns_tag0@@": "<p>Numărul coloanelor de pixeli care se vor utiliza într-o dimensiune de focalizare a vecinătății.</p>",
	"@@Statistics_numberofrows_tag0@@": "<p>Numărul rândurilor de pixeli care se vor utiliza într-o dimensiune de focalizare a vecinătății.</p>",
	"@@Statistics_onlyfillnodatapixels_tag0@@": "<p>Umple spațiile NoData din rezultat. Acest lucru este util atunci când imaginile pot să fi pierdut rânduri.</p>",
	"@@Statistics_raster_tag0@@": "<p>Rasterul de intrare pe care se utilizează statisticile de focalizare.</p>",
	"@@Statistics_statisticstype_tag0@@": "<p>Mai jos sunt date cele șapte tipuri de funcții statistice de focalizare:</p><ul><li>Minimă--Calculează valoarea minimă a pixelilor din vecinătate.</li><li>Maximă--Calculează valoarea maximă a pixelilor din vecinătate.</li><li>Medie--Calculează valoarea medie a pixelilor din vecinătate. Aceasta este setarea implicită.</li><li>Abatere Standard--Calculează valoarea abaterii standard a pixelilor din vecinătate.</li><li>Medie--Calculează valoarea medie a pixelilor din vecinătate.</li><li>Majoritate--Calculează valoarea majorității sau valoarea care apare cel mai des a pixelilor din vecinătate.</li><li>Minoritate--Calculează valoarea minorității sau valoarea care apare cel mai rar a pixelilor din vecinătate.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changedirection_tag0@@": "<p>Specifică direcția schimbării de inclus în analiză.</p><p>Acest parametru este disponibil doar când rasterul de analiză a schimbării intrării este rezultatul instrumentelor LandTrendr.</p><ul><li><strong>Toate direcțiie</strong>--Toate direcțiile schimbării sunt incluse în rezultat. Aceasta este setarea implicită.</li><li><strong>În sens crescător</strong>--Rezultatul include doar schimbări în direcție pozitivă sau crescătoare.</li><li><strong>În sens descrescător</strong>--Rezultatul include doar schimbări în direcție negativă sau descrescătoare.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_changetype_tag0@@": "<p>Specifică informațiile despre schimbare de calculat.</p><ul><li><strong>Ora ultimei schimbări</strong>--Fiecare pixel conține data celei mai recente schimbări pentru acel pixel din seria de timp. Aceasta este setarea implicită.</li><li><strong>Ora celei mai vechi schimbări</strong>--Fiecare pixel conține data celei mai vechi schimbări pentru acel pixel din seria de timp.</li><li><strong>Ora celei mai mari schimbări</strong>--Fiecare pixel conține data celei mai semnificative schimbări din seria de timp.</li><li><strong>Număr de Schimbări</strong>--Fiecare pixel conține numărul total de câte ori s-a schimbat pixelul în seria de timp.</li><li><strong>Ora celei mai lungi schimbări</strong>--Fiecate pixel conține data schimbării de la sfârșitul celui mai lung segment de tranziție din seria de timp.</li><li><strong>Ora celei mai scurte schimbări</strong>--Fiecare pixel conține data schimbării de la sfârșitul celui mai scurt segment de tranziție din seria de timp.</li><li><strong>Ora celei mai rapide schimbări</strong>--Fiecare pixel conține data schimbării de la sfârșitul tranziției care s-a produs cel mai repede.</li><li><strong>Ora celei mai lente schimbări</strong>--Fiecare pixel conține data schimbării de la sfârșitul tranziției care s-a produs cel mai lent.</li></ul>",
	"@@Detect-Change-Using-Change-Analysis_filterbyduration_tag0@@": "<p>Specifică dacă să se filtreze după durata schimbării.</p><p></p><ul><li>Bifat--Rezultatele filtrului după durată, pentru a include în rezultat doar schimbările care au durat o anumită perioadă.</li><li>Nebifat--Nu filtrați rezultatele după durată. Aceasta este setarea implicită.</li></ul><p>Acest parametru este disponibil doar când rasterul de analiză a schimbării intrării este rezultatul instrumentelor LandTrendr.</p><p>Dacă acest parametru este bifat, trebuie să setați parametrii<strong>Durata Minimă</strong>și<strong>DUrata Maximă</strong>pentru filtrare.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbymagnitude_tag0@@": "<p>Specifică dacă să se filtreze după magnitudinea schimbării.</p><ul><li>Bifat--Filtrați rezultatele după magnitudine, astfel încât reziltatul să includă doar schimbările de o anumită magnitudine.</li><li>Nebifat--Nu filtrați rezultatele după magnitudine. Aceasta este setarea implicită.</li></ul><p>Acest parametru este disponibil doar când rasterul de analiză a schimbării intrării este rezultatul instrumentelor LandTrendr.</p><p>Dacă acest parametru este bifat, trebuie să setați parametrii<strong>Magnitudine Minimă</strong>și<strong>Magnitudine Maximă</strong>pentru filtrare.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyyear_tag0@@": "<p>Specifică dacă să se limiteze rezultatul după un interval de ani.</p><ul><li>Bifat--Filtrați rezultatele pentru a include în rezultat doar schimbările apărute într-un interval specific de ani.</li><li>Nebifat--Nu filtrați rezultatele după an. Aceasta este setarea implicită.</li></ul><p>Dacă este bifat acest parametru, trebuie să setați parametrii<strong>Valoare Minimă</strong>și<strong>Valoare Maximă</strong>pentru filtrare.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbystartvalue_tag0@@": "<p>Filtrarea rezultatelor în funcție de valoarea inițială, astfel încât numai modificările unei anumite valori inițiale să fie incluse în rezultat.</p>",
	"@@Detect-Change-Using-Change-Analysis_filterbyendvalue_tag0@@": "<p>Filtrarea rezultatelor în funcție de valoarea finală, astfel încât numai modificările unei anumite valori finale să fie incluse în rezultat.</p>",
	"@@Detect-Change-Using-Change-Analysis_maximumnumberofchanges_tag0@@": "<p>Numărul maxim de schimbări per pixel de calculat. Numărul introdus corespunde numărului de benzi din rasterul de ieșire. Valoarea implicită este 1, însemnând că se calculează o singură dată de schimbare, iar rasterul de ieșire conține o singură bandă.</p><p>Acest parametru nu este disponibil atunci când parametrul<strong>Tipul Schimbării</strong>este setat la<strong>Număr de schimbări</strong>.</p>",
	"@@Detect-Change-Using-Change-Analysis_raster_tag0@@": "<p>Rasterul de analiză a schimbării intrării.</p>",
	"@@Detect-Change-Using-Change-Analysis_segmentdate_tag0@@": "<p>Specifică dacă să se extragă data la începutul sau la sfârșitul unui segment de schimbare.</p><p>Acest parametru este disponibil doar când rasterul de analiză a schimbării intrării este rezultatul instrumentelor LandTrendr.</p><ul><li><strong>Începutul segmentului</strong>--Extrageți data de la începutul segmentului de schimbare. Aceasta este setarea implicită.</li><li><strong>Sfârșitul segmentului</strong>--Extrageți data de la sfârșitul unui segment de schimbare.</li></ul>",
	"@@Kernel-Density_areaunits_tag0@@": "<p>Unitățile de suprafață ale valorilor de densitate ale rezultatului.</p><ul><li>Unități de Hartă Pătrate--Pentru pătratul unităților liniare ale referinței spațiale a rezultatului.</li><li>Mile pătrate--Pentru mile (SUA).</li><li>KilometrI pătrați--Pentru kilometri.</li><li>Acri--Pentru acri (SUA).</li><li>Hectare--Pentru hectare.</li><li>Metri pătrați--Pentru metri.</li><li>Yarzi pătrați--Pentru yarzi (SUA).</li><li>Picioare pătrate--Pentru picioare (SUA).</li><li>Inci pătrați--Pentru inci (SUA).</li><li>Centimetri pătrați--Pentru centimetri.</li><li>Milimetri pătrați--Pentru milimetri.</li></ul>",
	"@@Kernel-Density_cellsize_tag0@@": "<p>Dimensiunea pixelilor pentru setul de date raster de ieșire. Dacă valoarea<strong>Dimensiunea celulei</strong>a fost stabilită în mediile de geoprocesare, acesta este valoarea implicită.</p>",
	"@@Kernel-Density_inputbarriers_tag0@@": "<p>Setul de date care definește barierele.</p><p>Barierele pot fi un strat tematic cu obiecte spațiale cu polilinii sau poligoane.</p>",
	"@@Kernel-Density_inputfeatures_tag0@@": "<p>Obiectele spațiale de tip linie sau punct de intrare pentru care se calculează densitatea.</p>",
	"@@Kernel-Density_method_tag0@@": "<p>Determină dacă se utilizează cea mai scurtă cale pentru o metodă sferoidă (geodezică) sau pe pământ plat (în plan).</p><ul><li><strong>Planar</strong>--Utilizează distanțele planare dintre obiectele spațiale. Aceasta este setarea implicită.</li><li><strong>Geodezic</strong>--Folosește distanțele geodezice dintre obiectele spațiale. Această metodă ia în considerare curbura sferoidului și administrează corect datele din apropierea polilor și a liniei de delimitare a datei.</li></ul><p>Se recomandă utilizarea metodei<strong>Geodezice</strong>cu datele stocate într-un sistem de coordonate care nu este corespunzător pentru măsurarea distanței și orice analiză care se raportează la o suprafață geografică mare. De exemplu, Web Mercator sau orice sistem de coordonate geografice ar trebui să utilizeze metoda<strong>Geodezică</strong>.</p>",
	"@@Kernel-Density_outputcellvalues_tag0@@": "<p>Stabilește ceea ce reprezintă valorile din rasterul de ieșire.</p><ul><li><strong>Densități</strong>--Valorile de ieșire reprezintă valoarea densității preconizate. Aceasta este setarea implicită.</li><li><strong>Numere preconizate</strong>--Valorile de ieșire reprezintă intensitatea preconizată a fenomenului în fiecare pixel. Din moment ce valoarea pixelului este corelată cu valoarea<strong>Dimensiunea celulei</strong>specificată, rasterul rezultant nu poate fi re-eșantionat conform unei alte dimensiuni a pixelului și să continue să reprezinte volumul fenomenului.</li></ul>",
	"@@Kernel-Density_populationfield_tag0@@": "<p>Câmpul care denotă valorile populației pentru fiecare obiect spațial. Valoarea <strong>Câmp pentru populație</strong>este numărul sau cantitatea care se extinde la nivelul peisajului pentru a crea o suprafață continuă. Valorile din <strong>Câmp pentru populație</strong>pot fi numere întregi sau cu virgulă mobilă.</p><p>Opțiunile și comportamentele implicite pentru câmp sunt listate mai jos, în ordinea priorității.</p><ul><li>Utilizați<strong>Niciunul</strong>dacă nu vor fi folosite articole sau valori speciale și fiecare element spațial va fi numărat o singură dată.</li><li>Utilizați<strong>Formă</strong>dacă obiectele spațiale de intrare conțin Z.</li><li>În caz contrar, câmpul implicit este <strong>POPULAȚIE</strong>, sau orice derivat acceptabil al populației:<ul><li><strong>POPULATIONxxxx</strong>unde<strong>xxxx</strong>poate fi orice caracter valabil, cum ar fi<strong>POPULATION6</strong>,<strong>POPULATION1974</strong>, sau<strong>POPULATIONROADTYPE</strong>.</li><li><strong>POP</strong>.</li><li><strong>POPxxxx</strong>.</li><li>Dacă nu se aplică niciuna dintre cele de mai sus, valoarea implicită este <strong>Niciuna</strong>.</li></ul></li></ul>",
	"@@Kernel-Density_searchradius_tag0@@": "<p>Raza de căutare pe baza căreia se calculează densitatea. Unitățile se bazează pe unitatea liniară a proiecției.</p><p>De exemplu, dacă unitățile sunt în metri--pentru a include toate obiectele spațiale de pe o rază de o milă--stabiliți raza de căutare egală cu 1609,344 (din moment ce 1 milă înseamnă 1609,344 metri).</p>",
	"@@Zonal-Statistics_ignorenodataincalculations_tag0@@": "<p>Denotă dacă valorile<strong>NoData</strong>din <strong>Raster Valoare</strong>vor influența rezultatele zonei în care se încadrează.</p><ul><li><strong>Da</strong>--În cadrul oricărei zone specifice, doar pixelii care au o valoare din<strong>Raster Valoare</strong>vor fi folosiți pentru stabilirea valorii de ieșire pentru acea zonă. Pixelii <strong>NoData</strong>din<strong>Raster Valoare</strong>vor fi ignorați în calculul statistic. Aceasta este valoarea implicită.</li><li><strong>Nu</strong>--În orice zonă specifică, dacă orice pixeli<strong>NoData</strong>există în<strong>Rasterul Valoare</strong>, se consideră că nu există suficiente informații pentru a efectua calcule statistice pentru toți pixelii din zona respectivă; prin urmare, întreaga zonă va primi valoarea<strong>NoData</strong>pe rasterul rezultat.</li></ul>",
	"@@Zonal-Statistics_percentileinterpolationtype_tag0@@": "<p>Determină metoda de interpolare a percentilei de folosit atunci când numărul valorilor din rasterul de intrare de calculat este par.</p><ul><li><strong>Auto-detectare</strong>--Dacă rasterul valorii de intrare este de tip pixel cu număr întreg, se folosește matoda<strong>Cel mai apropiat</strong>. Dacă rasterul valorii de intrare este de tipul pixelului cu virgulă mobilă, atunci se folosește metoda <strong>Liniară</strong>. Aceasta este valoarea implicită.</li><li><strong>Cea mai apropiată</strong>--Se folosește cea mai apropiată valoare disponibilă de percentila dorită. În acest caz, tipul pixelului de ieșire este același cu cel al rasterului valorii de intrare.</li><li><strong>Liniar</strong>--Se folosește media ponderată a celor două valori înconjurătoare de la percentila dorită. În acest caz, tipul pixelului de ieșire este de virgula mobilă.</li></ul>",
	"@@Zonal-Statistics_percentilevalue_tag0@@": "<p>Percentila de calculat. Valoarea implicită este 90 pentru cea de-a 90-a percentilă.</p><p>Valorile pot ajunge de la 0 la 100. În principiu, percentila 0 este echivalentă cu statistica Minimă, iar cea de-a 100-a percentilă este echivalentă cu Maxima. În principiu, valoarea 50 are același rezultat ca statistica Mediană.</p>",
	"@@Zonal-Statistics_processasmultidimensional_tag0@@": "<p>Stabilește modul în care este prelucrat rasterul cu valori multidimensionale de intrare.</p><ul><li><strong>Împărțire actuală</strong>--Statisticile vor fi calculate din împărțirea actuală a unui set de date multidimensional. Aceasta este setarea implicită.</li><li><strong>Toate Împărțirile</strong>--Vor fi calculate statistici pentru toate dimensiunile (cum ar fi timpul sau adâncimea) unui set de date multidimensional.</li></ul>",
	"@@Zonal-Statistics_statisticstype_tag0@@": "<p>Tipul statisticii de calculat.</p><ul><li><strong>Medie</strong>--Calculează media tuturor pixelilor din<strong>Rasterul Valoare</strong>care aparține aceleiași zone ca pixelul de ieșire.</li><li><strong>Majoritate</strong>--Stabilește valoarea care apare cel mai des dintre toți pixelii din<strong>Rasterul Valoare</strong>care aparțin aceleiași zone ca pixelul de ieșire.</li><li><strong>Maximum</strong>--Stabilește cea mai mare valoare a tuturor pixelilor din<strong>Rasterul Valoare</strong>care aparțin aceleași zone ca pixelul de ieșire.</li><li><strong>Mediană</strong>--Stabilește valoarea mediană a tuturor pixelilor din<strong>Rasterul Valoare</strong>care aparțin aceleiași zone ca pixelul de ieșire.</li><li><strong>Minimum</strong>--Stabilește cea mai mică valoare a tuturor pixelilor din<strong>Rasterul Valoare</strong>care aparțin aceleiași zone ca pixelul de ieșire.</li><li><strong>Minoritate</strong>--Stabilește valoarea care apare cel mai rar dintre toți pixelii din<strong>Rasterul Valoare</strong>care aparțin aceleiași zone ca pixelul de ieșire.</li><li><strong>Percentilă</strong>--Calculează o percentilă a tuturor pixelilor din<strong>Rasterul Valoare</strong>care aparțin aceleiași zone ca pixelul de ieșire. A 90-a percentilă este calculată în mod implicit. Puteți stabili percentila de calculat cu parametrul<strong>Valoarea Percentilei</strong>.</li><li><strong>Interval</strong>--Calculează diferența dintre valoarea cea mai mare și cea mai mică a tuturor pixelilor din<strong>Rasterul Valoare</strong>care aparțin aceleiași zone ca pixelul de ieșire.</li><li><strong>Abatere Standard</strong>--Calculează abaterea standard a tuturor pixelilor din<strong>Rasterul Valoare</strong>care aparțin aceleiași zone ca pixelul de ieșire.</li><li><strong>Sumă</strong>--Calculează valoarea totală a tuturor pixelilor din<strong>Rasterul Valoare</strong>care aparțin aceleiași zone ca pixelul de ieșire.</li><li><strong>Varietate</strong>--Calculează numărul de valori unice pentru toți pixelii din<strong>Rasterul Valoare</strong>care aparțin aceleiași zone ca pixelul de ieșire.</li></ul>",
	"@@Zonal-Statistics_valueraster_tag0@@": "<p>Raster care conține valorile pe baza cărora se calculează o statistică.</p>",
	"@@Zonal-Statistics_zonefield_tag0@@": "<p>Câmp care include valorile care definesc fiecare zonă. Poate fi un câmp de număr întreg sau cu virgulă mobilă al rasterului de tip zonă.</p>",
	"@@Zonal-Statistics_zoneraster_tag0@@": "<p>Set de date care definește zonele. Zonele pot fi definite de un raster de tip număr întreg.</p>",
	"@@Zonal-Statistics_calculatecircularstatistics_tag0@@": "<p>Specifică modul în care va fi calculat tipul de statistici.</p><ul><li><strong>Aritmetic</strong>--Calculează statistici aritmetice. Acesta este tipul implicit.</li><li><strong>Circular</strong>--Calculează statisticile circulare care sunt adecvate pentru cantitățile ciclice, cum ar fi direcția compasului în grade, orele și părțile fracționale din numere reale.</li></ul>",
	"@@Zonal-Statistics_circularwrapvalue_tag0@@": "<p>Cea mai mare valoare posibilă (limită superioară) în datele ciclice. Este un număr pozitiv, cu o valoare implicită de 360. Această valoare reprezintă și aceeași cantitate la cea mai mică valoare posibilă (limită inferioară).</p><p>Acest parametru este aplicabil numai când se calculează statistici circulare.</p>",
	"@@Boundary-Clean-function_inputraster_tag0@@": "<p>Rasterul de intrare pentru care va fi netezită granița dintre zone.</p><p>Trebuie să fie de tipul numărului întreg.</p>",
	"@@Boundary-Clean-function_runexpansionandshrinkingtwice_tag0@@": "<p>Specifică numărul de ori în care va apărea procesul de netezire, de două ori sau o dată.</p><ul><li><p><strong>Bifat</strong>--Efectuează o operațiune de expansiune și de contractare de două ori. Pentru prima oară, operațiunea este efectuată conform tipului de sortare specificat. Apoi se efectuează o operațiune de extindere și de contractare suplimentară, cu prioritatea inversată. Aceasta este setarea implicită.</p></li><li><p><strong>Nebifat</strong>--Efectuează operațiunea de extindere și de contractare o dată conform tipului de sortare.</p></li></ul>",
	"@@Boundary-Clean-function_sorttype_tag0@@": "<p>Specifică tipul de sortare de utilizat în procesul de netezire. Sortarea stabilește prioritatea cu care celulele se pot extinde în vecinele lor.</p><p>Sortarea poate fi realizată pe baza valori zonei sau a suprafeței zonei.</p><ul><li><p><strong>Nu sorta</strong>--Zonele nu sunt sortate după dimensiune. Zonele cu valori mai mari au o prioritate mai mare de extindere în zone cu valori mai mici din rezultatul netezit. Aceasta este setarea implicită.</p></li><li><p><strong>Descrescătoare</strong>--Sortează zonele în ordine descrescătoare după dimensiune. Zonele cu suprafețe totale mai mari au o prioritate de extindere mai mare în zone cu suprafețe totale mai mici. Această opțiune tinde să elimine sau să reducă prevalența celulelor din zonele mai mici din rezultatul netezit.</p></li><li><p><strong>Crescătoare</strong>--Sortează zonele în ordine crescătoare după dimensiune. Zonele cu suprafețe totale mai mici au o prioritate de extindere mai mare în zone cu suprafețe totale mai mari. Această opțiune tinde să conserve sau să crească prevalența celulelor din zonele mai mici din rezultatul netezit.</p></li></ul>",
	"@@Aggregate-Multidimensional_dimension_tag0@@": "<p>Dimensiunea agregării. Aceasta este dimensiunea de-a lungul căreia vor fi agregate variabilele.</p>",
	"@@Aggregate-Multidimensional_dimensiondefinition_tag0@@": "<p>Specifică metoda de utilizat pentru a filtra datele multidimensionale de intrare înainte de efectuarea agregării.</p><ul><li><strong>Tot</strong>--Va fi folosită gama completă pentru fiecare dimensiune. Aceasta este setarea implicită.</li><li><strong>După valori</strong>--Dimensiunea va fi împărțită folosind o valoare a dimensiunii sau o listă de valori.</li><li><strong>După intervale</strong>--Dimensiunea va fi împărțită folosind o gamă sau o listă de game.</li><li><strong>După iterație</strong>--Dimensiunea va fi împărțită pe o mărime specificată a intervalului.</li></ul>",
	"@@Aggregate-Multidimensional_iterationdefinitionparameters_tag0@@": "<p>Parametrii Definiția iterației vă permit să definiți valorile de dimensiune de utilizat pentru a filtra datele multidimensionale de intrare pentru analiză atunci când parametrul <strong>Definiția dimensiunii</strong> este setat la<strong>După iterație</strong>.</p><ul><li><strong>Dimensiune</strong>--Dimensiunea de utilizat pentru filtrare.</li><li><strong>Începutul primei iterații</strong>--Începutul primului interval. Acest interval este folosit pentru iterarea în cadrul setului de date.</li><li><strong>Sfârșitul primei iterații</strong>--Sfârșitul primului interval. Acest interval este folosit pentru iterarea în cadrul setului de date.</li><li><strong>Pas</strong>--Frecvența cu care vor fi împărțite datele.</li><li><strong>Unitate</strong>--Unitatea de iterare.</li></ul>",
	"@@Aggregate-Multidimensional_keywordinterval_tag0@@": "<p>Specifică intervalul cuvântului cheie care va fi utilizat la agregarea de-a lungul dimensiunii.</p><p>Acest parametru este solicitat atunci când parametrul <strong>Tip</strong>este setat la<strong>Interval cuvinte cheie</strong>.</p><ul><li><strong>În fiecare oră</strong>--Valorile de date sunt agregate în etape de timp orare, iar rezultatul include fiecare oră din seria de timp. Aceasta este setarea implicită.</li><li><strong>Zilnic</strong>--Valorile de date sunt agregate în etape de timp zilnice, iar rezultatul va include fiecare zi din seria de timp.</li><li><strong>Săptămânal</strong>--Valorile de date sunt agregate în etape de timp săptămânale, iar rezultatul va include fiecare săptămână din seria de timp.</li><li><strong>O dată la 10 zile</strong>--Valorile datelor sunt agregate în 3 perioade a câte 10 zile fiecare. Ultima perioadă poate include mai mult sau mai puțin de 10 zile. Rezultatul va include 3 împărțiri pentru fiecare lună.</li><li><strong>O dată la 5 zile</strong>--Valorile datelor sunt agregate în 6 perioade a câte 5 zile fiecare. Ultima perioadă poate include mai mult sau mai puțin de 5 zile. Rezultatul include 6 împărțiri pentru fiecare lună.</li><li><strong>Lunar</strong>--Valorile de date vor fi agregate în etape de timp lunare, iar rezultatul va include fiecare lună din seria de timp.</li><li><strong>Trimestrial</strong>--Valorile de date vor sunt agregate în etape de timp trimestriale, iar rezultatul va include fiecare trimestru din seria de timp.</li><li><strong>Anual</strong>--Valorile de date sunt agregate în etape de timp anuale, iar rezultatul va include fiecare an din seria de timp.</li><li><strong>Recurență zilnică</strong>--Valorile datelor sunt agregate în etape de timp zilnice, iar rezultatul include o valoare agregată pe zi din calendarul iulian. Rezultatul include maximum 366 de împărțiri de timp zilnice.</li><li><strong>Recurență săptămânală</strong>--Valorile datelor sunt agregate în etape de timp săptămânale, iar rezultatul include o valoare agregată pe săptămână. Rezultatul include maximum 53 de împărțiri de timp săptămânale.</li><li><strong>Recurență lunară</strong>--Valorile de date sunt agregate în etape de timp lunare, iar rezultatul include o valoare agregată pe lună. Rezultatul include maximum 12 împărțiri de timp lunar.</li><li><strong>Recurență trimestrială</strong>--Valorile datelor sunt agregate în etape de timp trimestriale, iar rezultatul include o valoare agregată pe trimestru. Rezultatul include maximum 4 împărțiri de timp trimestrial.</li></ul>",
	"@@Aggregate-Multidimensional_operation_tag0@@": "<p>Specifică metoda matematică ce va fi utilizată pentru a combina împărțirile agregate într-un interval.</p><ul><li><strong>Majoritate</strong>--Valoarea de pixel care a apărut cel mai frecvent pentru un pixel în toate împărțirile din interval.</li><li><strong>Maximum</strong>--Valoarea maximă a unui pixel pe toate împărțirile din interval.</li><li><strong>Medie</strong>--Media valorilor unui pixel va fi calculată pe toate împărțirile din interval. Aceasta este setarea implicită.</li><li><strong>Mediană</strong>--Valoarea mediană a unui pixel pe toate împărțirile din interval.</li><li><strong>Minimum</strong>--Valoarea minimă a unui pixel pe toate împărțirile din interval.</li><li><strong>Minoritate</strong>--Valoarea de pixel care a apărut cel mai rar pentru un pixel în toate împărțirile din interval.</li><li><strong>Interval</strong>--Gama de valori pentru un pixel pe toate împărțirile din interval.</li><li><strong>Abatere standard</strong>--Abaterea standard a valorilor unui pixel în toate împărțirile din interval.</li><li><strong>Sumă</strong>--Suma valorilor unui pixel pe toate împărțirile din interval.</li><li><strong>Varietate</strong>--Numărul de valori unice ale unui pixel în toate împărțirile din interval.</li></ul><p>De asemenea, toate opțiunile au o opțiune echivalentă cu opțiunea Ignorare NoData. Acestea vor efectua operația matematică la nivelul tuturor pixelilor valabili de-a lungul dimensiunii și vor ignora pixelii NoData.</p>",
	"@@Aggregate-Multidimensional_ranges_tag0@@": "<p>Gamele de interval specificate într-un tabel sunt utilizate pentru a agrega grupuri de valori. Valorile minimă și maximă specifică intervalul care trebuie inclus.</p><p>Acest parametru este solicitat atunci când parametrul<strong>Tip</strong>este setat la<strong>Game de interval</strong>.</p>",
	"@@Aggregate-Multidimensional_raster_tag0@@": "<p>Raster multidimensional de intrare.</p>",
	"@@Aggregate-Multidimensional_type_tag0@@": "<p>Specifică intervalul de dimensiuni pentru care vor fi agregate datele.</p><ul><li><strong>Tot</strong>--Datele variabilelor vor fi agregate pe toate împărțirile. Aceasta este setarea implicită.</li><li><strong>Interval cuvinte cheie</strong>--Datele variabile vor fi agregate folosind un interval cunoscut.</li><li><strong>Interval de valori</strong>--Datele variabile vor fi agregate folosind un interval și o unitate specificate de utilizator.</li><li><strong>Game de interval</strong>--Datele variabile vor fi agregate între perechi specifice de valori sau date.</li></ul>",
	"@@Aggregate-Multidimensional_valueinterval_tag0@@": "<p>Dimensiunea intervalului utilizat pentru agregare.</p><p>Acest parametru este solicitat atunci când parametrul<strong>Tip</strong>este setat la<strong>Interval de valori</strong>.</p>",
	"@@Aggregate-Multidimensional_values_tag0@@": "<p>Valorile dimensiunilor de utilizat pentru a filtra datele multidimensionale de intrare pentru analiză. Acest parametru este solicitat atunci când parametrul<strong>Definiția dimensiunii</strong>este setat la<strong>După valori</strong>.</p>",
	"@@Aggregate-Multidimensional_variables_tag0@@": "<p>Variabila sau variabilele care vor fi agregate de-a lungul dimensiunii date.</p>",
	"@@Predict-Using-Regression_inputdefinitionfile_tag0@@": "<p>Fișierul de definiție a regresiei Ersi de introducere (<strong>.ecd</strong>) care conține datele statistice și informațiile pentru setul de date respectiv, modelul de regresie și atributele alese.</p>",
	"@@Predict-Using-Regression_rasters_tag0@@": "<p>Detul de date sau seturile de date ale rasterului care reprezintă variabilele elementului de predicție. Poate fi un raster cu o singură bandă, un raster cu mai multe benzi, un raster multidimensional, un raster mozaic sau o colecție de rastere.</p>",
	"@@Cell-Statistics_operation_tag0@@": "<p>Tipul de calcul statistic pe care doriți să îl realizați.</p><p>Statisticile disponibile sunt<strong>Majoritate</strong>,<strong>Maxim</strong>,<strong>Medie</strong>,<strong>Mediană</strong>,<strong>Minim</strong>,<strong>Minoritate</strong>,<strong>Percentilă</strong>,<strong>Interval</strong>,<strong>Deviație standard</strong>,<strong>Sumă</strong> și<strong>Varietate</strong>.</p><p>Valoarea implicită este<strong>Medie</strong>.</p>",
	"@@Colormap-To-RGB_randomlyassigncolortounmappedpixels_tag0@@": "<p>Culorile sunt alocate aleatoriu către pixeli care nu sunt incluși în harta de culoare.</p><ul><li>Pixelii nebifați și necartografiați nu sunt alocați unei culori. Aceasta este valoarea implicită.</li><li>Pixelii bifați-necartografiați sunt alocați unei culori.</li></ul>",
	"@@Pansharpen_sensor_tag0@@": "<p>Atunci când este ales algoritmul Gram-Schmidt, puteți specifica și senzorul care a colectat intrarea rasterului cu benzi multiple. Alegerea tipului de senzor va seta ponderile de bandă corespunzătoare.</p>",
	"@@Dimensional-Moving-Statistics_backwardwindow_tag0@@": "<p>Valoarea se referă la numărul de segmente înainte sau peste care trebuie să fie incluse în fereastra definită. Valoarea trebuie să fie un număr întreg pozitiv de la 1 la 100. Valoarea implicită este 1.</p><p>Unitatea acestui parametru este segmentul.</p>",
	"@@Dimensional-Moving-Statistics_circularwrapvalue_tag0@@": "<p>Valoarea care va fi utilizată pentru a rotunji o valoare liniară la intervalul unei medii circulare date.</p><p>Valoarea sa trebuie să fie pozitivă. Valoarea implicită este de 360 de grade.</p>",
	"@@Dimensional-Moving-Statistics_dimension_tag0@@": "<p>Numele dimensiunii împreună cu fereastra în care se va muta.</p><p>Valoarea implicită este prima dimensiune în afară de x,y găsită în rasterul multidimensional de intrare.</p>",
	"@@Dimensional-Moving-Statistics_forwardwindow_tag0@@": "<p>Valoarea se referă la numărul de segmente după sau sub care trebuie să fie incluse în fereastra definită. Valoarea trebuie să fie un număr întreg pozitiv de la 1 la 100. Valoarea implicită este 1.</p><p>Unitatea acestui parametru este segmentul.</p>",
	"@@Dimensional-Moving-Statistics_inputraster_tag0@@": "<p>Rasterul de intrare poate fi doar un raster multidimensional în format de raster cloud (fișier <strong>.crf</strong>).</p>",
	"@@Dimensional-Moving-Statistics_nodatahandling_tag0@@": "<p>Specifică modul în care valorile NoData vor fi manipulate de un calcul statistic.Valorile </p><ul><li><strong>Data</strong>--NoData in introducerea valorii vor fi ignorate în rezultatele ferestrei definite în care se încadrează. Aceasta este valoarea implicită.</li><li><strong>NoData</strong>--Valorile de ieșire vor fi NoData dacă oricare dintre valorile NoData există în introducere în fereastra definită.</li><li><strong>Completare NoData</strong>--Valorile celulelor NoData vor fi înlocuite folosind statistica selectată din fereastra definită.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentileinterpolationtype_tag0@@": "<p>Specifică metoda de interpolare care va fi folosită când valoarea percentilei scade între două valori de celule.</p><ul><li><strong>Detectare automată</strong>--Dacă rasterul de intrare este de tip pixel întreg, va fi utilizată metoda <strong>Cea mai apropiată</strong>. Dacă rasterul de intrare este de tipul pixel flotant, se va utiliza metoda <strong>Liniară</strong>. Aceasta este valoarea implicită.</li><li><strong>Cea mai apropiată</strong>--Va fi utilizată cea mai apropiată valoare disponibilă până la percentilă. În acest caz, tipul pixelului de ieșire va fi același ca și cel al rasterului valorii de intrare.</li><li><strong>Liniar</strong>--Va fi utilizată media ponderată a două valori înconjurătoare din percentilă. În acest caz, tipul pixelului de ieșire va fi de punct flotant.</li></ul>",
	"@@Dimensional-Moving-Statistics_percentilevalue_tag0@@": "<p>Percentila care va fi calculată când se selectează<strong>Percentilă</strong>ca tip statistic. Valoarea implicită este 90 pentru cea de-a 90-a percentilă.</p><p>Valorile pot ajunge de la 0 la 100. În principiu, percentila 0 este echivalentă cu statistica minimă, iar cea de-a 100-a percentilă este echivalentă cu statistica maximă, cu excepția faptului că rezultatul va fi cu virgulă mobilă. O valoare de 50 va produce același rezultat ca și statistica mediană.</p>",
	"@@Dimensional-Moving-Statistics_statisticstype_tag0@@": "<p>Specifică tipul de statistică ce va fi calculat.</p><p></p><ul><li><strong>Medie</strong>--Media (valoarea medie) a celulelor în fereastra definită va fi calculată. Aceasta este valoarea implicită.</li><li><strong>Media circulară</strong>--Va fi calculată media circulară a celulelor din fereastra definită. Când este selectat acest tip de statistică, parametrul<strong>Valoare încadrare circulară</strong>devine disponibil.</li><li><strong>Majoritate</strong>--Majoritatea (valoarea care apare cel mai des) celulelor din fereastra definită va fi identificată.</li><li><strong>Maximum</strong>--Nivelul maxim (cea mai mare valoare) al celulelor din fereastra definită va fi identificat.</li><li><strong>Mediană</strong>--Mediana celulelor din vecinătate va fi identificată.</li><li><strong>Minimum</strong>--Nivelul minim (valoarea cea mai mică) al celulelor din vecinătate va fi identificat.</li><li><strong>Percentilă</strong>--O percentilă a celulelor din vecinătate va fi calculată. Când este selectat acest tip de statistică, parametrii<strong>Valoare percentilă</strong>și<strong>Tip interpolare percentilă</strong>devin disponibili. Utilizați acești noi parametri pentru a desemna percentila pentru a calcula și respectiv a alege tipul de interpolare de utilizat.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_dimension_tag0@@": "<p>Dimensiunea de utilizat pentru interpolare.</p><p>Acest parametru este necesar când parametrul<strong>Definiție dimensiune</strong>este setat la<strong>După interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_dimensiondefinition_tag0@@": "<p>Specifică metoda care va fi utilizată pentru a filtra introducerea datelor multidimensionale înainte de a realiza interpolarea.</p><ul><li><strong>După valori</strong>--Dimensiunea va fi segmentată folosind o valoarea de dimensiune sau o listă de valori.</li><li><strong>După interval</strong>--Dimensiunea va fi segmentată folosind un interval sau o listă de intervale.</li><li><strong>Raster după țintă</strong>--Dimensiunea va fi segmentată folosind un raster țintă multidimensional.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_endofinterval_tag0@@": "<p>Sfârșitul intervalului, care este utilizat pentru interare prin setul de date.</p><p>Acest parametru este necesar când parametrul<strong>Definiție dimensiune</strong>este setat la<strong>După interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_ignorenodata_tag0@@": "<p>Specifică dacă valorile NoData vor fi ignorate în analiză.</p><ul><li>Nebifat--Analiza va duce la NoData dacă există valori NoData în segmentele adiacente. Aceasta este valoarea implicită.</li><li>Bifat--Analiza va utiliza numai segmentele care au pixeli și va ignora segmentele NoData.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_interpolationmethod_tag0@@": "<p>Specifică metoda care va fi folosită pentru a interpola rasterul.</p><ul><li><strong>Liniar</strong>--Ieșirea va fi interpolată liniar folosind segmentele adiacente. Aceasta este valoarea implicită.</li><li><strong>Cel mai apropiat vecin</strong>--Ieșirea va utiliza cel mai apropiat segment adiacent.</li></ul>",
	"@@Interpolate-Raster-By-Dimension_raster_tag0@@": "<p>Raster multidimensional de intrare.</p>",
	"@@Interpolate-Raster-By-Dimension_startofinterval_tag0@@": "<p>Începutul intervaluluiT, care este utilizat pentru a itera prin setul de date.</p><p>Acest parametru este necesar când parametrul<strong>Definiție dimensiune</strong>este setat la<strong>După interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_step_tag0@@": "<p>Frecvența cu care datele vor fi interpolate.</p><p>Acest parametru este necesar când parametrul<strong>Definiție dimensiune</strong>este setat la<strong>După interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_targetraster_tag0@@": "<p>Rasterul țintă specificat de definiția dimensiunii.</p><p>Acest parametru este necesar când parametrul<strong>Definiție dimensiune</strong>este setat la<strong>După raster țintă</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_unit_tag0@@": "<p>Unitatea interval.</p><p>Acest parametru este necesar când parametrul<strong>Definiție dimensiune</strong>este setat la<strong>După interval</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_values_tag0@@": "<p>Valorile dimensionale de utilizat pentru a filtra datele multidimensionale de intrare pentru analiză.</p><p>Acest parametru este necesar când parametrul<strong>Definiție dimensiune</strong>este setat la<strong>După valori</strong>.</p>",
	"@@Interpolate-Raster-By-Dimension_variables_tag0@@": "<p>Variabila sau variabilele care vor fi interpolate după definiția dimensiunii.</p>",
	"@@Terrain-Flatten_calibrationtype_tag0@@": "<p>Specifică dacă ieșirea va fi aplatizată pe teren folosind<strong>Zero sigma</strong>sau<strong>Zero gamma</strong>.</p><ul><li><strong>Zero Gamma</strong>--Retrodifuzia beta zero va fi normalizată folosind suprafața unitară a unui plan tangent local la DEM, cunoscut în mod obișnuit sub numele de unghiul de incidență local. Aceasta este setarea implicită.</li><li><strong>Zero Sigma</strong>--Retrodifuzia beta zero va fi normalizată cu ajutorul unui DEM pentru a calcula suprafața.</li></ul>",
	"@@Terrain-Flatten_dem_tag0@@": "<p>Intrarea DEM.</p><p>DEM-ul este utilizat pentru a estima suprafața iluminată local.</p>",
	"@@Terrain-Flatten_geoid_tag0@@": "<p>Specifică dacă sistemul de referință vertical al DEM-ului de intrare va fi transformat în înălțime elipsoidală. Cele mai multe seturi de date de elevație se raportează la înălțimea ortometrică la nivelul mării, astfel încât în aceste cazuri este necesară o corecție pentru a converti în înălțime elipsoidală.</p><ul><li>Bifat--Se va efectua o corecție geoidală pentru a converti înălțimea ortometrică în înălțime elipsoidală (pe baza geoidului EGM96). Aceasta e setarea implicită.</li><li>Nebifat--Nu se va efectua nicio corecție geoidală. Utilizați această opțiune numai dacă DEM-ul este exprimat în înălțime elipsoidală.</li></ul>",
	"@@Terrain-Flatten_raster_tag0@@": "<p>Datele radar de intrare.</p><p>Acest raster trebuie mai întâi să fie calibrat radiometric la zero beta.</p>",
	"@@Create-Color-Composite_blueexpression_tag0@@": "<p>Calculul atribuit celei de-a treia benzi.</p><p>Un nume de bandă, un ID de bandă sau o expresie algebrică care utilizează benzile.</p><p>Operatorii suportați sunt unari: plus (+), minus (-), ori (*) și împărțit (/).</p>",
	"@@Create-Color-Composite_greenexpression_tag0@@": "<p>Calculul atribuit celei de-a doua benzi.</p><p>Un nume de bandă, un ID de bandă sau o expresie algebrică care utilizează benzile.</p><p>Operatorii suportați sunt unari: plus (+), minus (-), ori (*) și împărțit (/).</p>",
	"@@Create-Color-Composite_inputraster_tag0@@": "<p>Datele raster multibandă de intrare.</p>",
	"@@Create-Color-Composite_method_tag0@@": "<p>Specifică metoda care va fi utilizată pentru extragerea benzilor.</p><ul><li>Numele benzilor - Se va utiliza numele benzii care reprezintă intervalul de lungime de undă din spectrul electromagnetic (cum ar fi roșu, infraroșu apropiat sau infraroșu termic) sau polarizarea (cum ar fi VH, VV, HH sau HV). Aceasta este setarea implicită.</li><li>ID-uri de bandă--Numărul de bandă (cum ar fi B1, B2, sau B3) va fi folosit.</li></ul>",
	"@@Create-Color-Composite_redexpression_tag0@@": "<p>Calculul atribuit primei benzi.</p><p>Un nume de bandă, un ID de bandă sau o expresie algebrică care utilizează benzile.</p><p>Operatorii suportați sunt unari: plus (+), minus (-), ori (*) și împărțit (/).</p>",
	"@@Surface-Parameters_localsurfacetype_tag0@@": "<p>Alegeți tipul de funcție de suprafață care va fi aplicată în jurul celulei țintă.</p><ul><li>CadranQ--O funcție de suprafață cadran va fi aplicată celulelor învecinate. Acesta este tipul implicit.</li><li>Bicadran--O funcție de suprafață bicadran va fi aplicată celulelor învecinate.</li></ul>",
	"@@Surface-Parameters_neighborhooddistance_tag0@@": "<p>Rezultatul va fi calculat pe această distanță din centrul celulei țintă. Acesta determină dimensiunea cartierului Valoarea implicită este dimensiunea celulei rasterului de intrare, rezultând un cartier de 3 pe 3.</p>",
	"@@Surface-Parameters_outputslopemeasurement_tag0@@": "<p>Unitățile de măsură (grade sau procente) care vor fi folosite pentru rasterul de pantă de ieșire. Acest parametru este activ numai când<strong>Tipul de parametru</strong>este<strong>Pantă</strong>.</p><ul><li>Grad--Înclinarea pantei va fi calculată în grade. Aceasta este valoarea implicită.</li><li>Elevație procentuală--Înclinarea pantei va fi calculată ca elevație procentuală, denumită și pantă procentuală.</li></ul>",
	"@@Surface-Parameters_parametertype_tag0@@": "<p>Specifică tipul parametrului suprafeței de ieșire care va fi calculat.</p><ul><li>PantăS--Rata de modificare a elevației va fi calculată. Aceasta este valoarea implicită.</li><li>Aspect--Direcția pantei descendente a ratei maxime de schimbare pentru fiecare celulă va fi calculată.</li><li>Curbura medie--Curbura totală a suprafeței va fi măsurată. Este calculată ca media curburii minime și maxime. Această curbură descrie convexitatea sau concavitatea intrinsecă a suprafeței, independent de direcție sau influența gravitației.</li><li>Curbură tangențială (contur normal)--Curbura geometrică normală perpendiculară pe linia de pantă, tangentă la linia de contur va fi măsurată. Această curbură este de obicei aplicată pentru a caracteriza convergența sau divergența fluxului peste suprafață.</li><li>Profil (linie de pantă normală) Curbură--Curbura geometrică normală de-a lungul liniei de pantă va fi măsurată. Această curbură este aplicată de obicei pentru a caracteriza accelerația și decelerația fluxului de-a lungul suprafeței.</li><li>Curbură plană (contur proiectat)--Curbura de-a lungul liniilor de contur va fi măsurată.</li><li>Torsiune geodezică de contur--Rata de modificare a unghiului pantei de-a lungul liniilor de contur va fi măsurată.</li><li>Curbură gaussiană--Curbura totală a suprafeței va fi măsurată. Se calculează ca produs al curburii minime și maxime.</li><li>Curbură Casorati--Curbura generală a suprafeței va fi măsurată. Poate fi zero sau orice alt număr pozitiv.</li></ul>",
	"@@Surface-Parameters_projectgeodesicazimuths_tag0@@": "<p>Specifică dacă azimutul geodezic va fi proiectat pentru a corecta distorsiunea unghiului cauzată de referința spațială proiectată.Acest parametru este activ numai când<strong>Tipul de parametru</strong>este<strong>Aspect</strong>.</p><ul><li>NeselectatăU--Azimuturile geodezice nu vor fi proiectate. Aceasta este valoarea implicită.</li><li>Selectată--Azimuturile geodezice vor fi proiectate.</li></ul>",
	"@@Surface-Parameters_raster_tag0@@": "<p>Rasterul suprafeței de intrare. Poate fi un raster de tip număr întreg sau cu virgulă mobilă.</p>",
	"@@Surface-Parameters_useadaptiveneighborhood_tag0@@": "<p>Specifică dacă distanța vecinătății va varia în funcție de modificările peisajului (adaptiv). Distanța maximă este determinată de distanța vecinătății. Distanța minimă este dimensiunea celulei rasterului de intrare.</p><ul><li>Neselectată--Va fi utilizată o singură distanță a vecinătății (fixă) în toate locațiile. Aceasta este valoarea implicită.</li><li>Selectată--O distanță a vecinătății adaptive va fi utilizată în toate locațiile.</li></ul>",
	"@@Surface-Parameters_useequatorialaspect_tag0@@": "<p>Specifică dacă aspectul va fi măsurat dintr-un punct al ecuatorului sau de la polul nord. Acest parametru este activ numai atunci când<strong>Tipul parametrului</strong>este<strong>Aspect</strong>.</p><ul><li>Neselectat--Aspectul va fi măsurat de la polul nord. Acesta este valoarea implicită.</li><li>Selectată--Aspectul va fi măsurat dintr-un punct al ecuatorului.</li></ul>",
	"@@Surface-Parameters_zunit_tag0@@": "<p>Unitatea liniară de valori z verticale.</p><p>Este definită de un sistem de coordonate vertical dacă există. Dacă nu există un sistem de coordonate verticale, unitatea z trebuie să fie definită din lista de unități, pentru a asigura calcularea geodezică corectă.</p><ul><li>Inch--Unitatea liniară va fi inch.</li><li>Picior--Unitatea liniară va fi picior.</li><li>Yard--Unitatea liniară va fi yard.</li><li>Milă SUA--Unitatea liniară va fi milă.</li><li>Milă marină--Unitatea liniară va fi milă marină.</li><li>Milimetru--Unitatea liniară va fi milimetru.</li><li>Centimetru--Unitatea liniară va fi centimetru.</li><li>Metru--Unitatea liniară va fi metru. Aceasta este valoarea implicită.</li><li>Kilometru--Unitatea liniară va fi kilometri.</li><li>Decimetru--Unitatea liniară va fi decimetri.</li></ul>",
	"@@Surface-Parameters_analysismask_tag0@@": "<p>Un raster care specifică locațiile în care va avea loc analiza.</p><p>Rasterul poate fi de tip număr întreg sau punct flotant.</p><p>Toate celulele cu o valoare validă, inclusiv zero, vor alcătui masca. Celulele care sunt NoData în intrarea măștii vor fi NoData în ieșire.</p>",
	"@@Geometric-Median_cellsizetype_tag0@@": "<p>Alegeți ce dimensiune de celule se va utiliza în rasterul de ieșire. Dacă toate dimensiunile celulelor de intrare sunt la fel, toate opțiunile vor da aceleași rezultate.</p><ul><li>Prima--Utilizați prima dimensiune a celulelor rasterelor de intrare.</li><li>Minimă--Utilizați cea mai mică dimensiune a celulelor pentru toate rasterele de intrare.</li><li>Maximă--Utilizați cea mai mare dimensiune a celulelor pentru toate rasterele de intrare. Aceasta este setarea implicită.</li><li>Medie--Utilizați dimensiunea medie a celulelor pentru toate rasterele de intrare.</li><li>Ultima--Utilizați ultima dimensiune a celulelor rasterelor de intrare.</li></ul>",
	"@@Geometric-Median_epsilon_tag0@@": "<p>Valoarea de convergență dintre două iterații consecutive. Când epsilon este mai mic sau egal cu valoarea specificată, iterația se oprește și este utilizat rezultatul ultimei iterații.</p>",
	"@@Geometric-Median_extenttype_tag0@@": "<p>Alegeți ce extindere trebuie folosită în rasterul de ieșire:</p><ul><li><p>Primul dintre--Utilizați extinderea primului raster de intrare pentru a stabili măsura prelucrării.</p></li><li>Intersectare--Utilizați extinderea pixelilor care se suprapun pentru a determina extinderea de procesare. Aceasta este starea implicită.</li><li>Uniunea dintre--Utilizați extinderea tututor rasterelor pentru a stabili extinderea prelucrării.</li><li>Ultimul dintre--Utilizați extinderea ultimului raster de intrare pentru a stabili extinderea prelucrării.</li></ul>",
	"@@Geometric-Median_maximumnumberofiterations_tag0@@": "<p>Specifică numărul maxim de iterații de realizat. Calculul se încheie când se atinge valoarea, indiferent de setarea <strong>Epsilon</strong>.</p>",
	"@@Geometric-Median_rasters_tag0@@": "<p>Rastere multibandă de intrare.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster1_tag0@@": "<p>Rasterul de intrare care reprezintă distanța costului cumulativ de la prima sursă.</p><p>Ar trebui să fie un rezultat de distanță cu cost acumulat din funcția<strong>Acumulare distanță</strong>sau<strong>Alocare distanță</strong>.</p>",
	"@@Least-Cost-Corridor_inputaccumulativecostdistanceraster2_tag0@@": "<p>Rasterul de intrare reprezentând distanța de cost acumulat de la sursa secundară.</p><p>Ar trebui să fie un rezultate de distanță de const acumulat din funcția <strong>Acumulare distanță</strong>sau<strong>Alocare distanță</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster1_tag0@@": "<p>Rasterul de direcție înapoi de intrare de la prima sursă.</p><p>Acesta este setul de date de raster care identifică direcția următoarei celule împreună cu cala ultimului cost înapoi la prima sursă. Acesta este rezultatul din funcția<strong>Acumulare distanță</strong>sau<strong>Alocare distanță</strong>.</p>",
	"@@Least-Cost-Corridor_inputbackdirectionraster2_tag0@@": "<p>Rasterul de direcție înapoi de intrare de la a doua sursă.</p><p>Acesta este setul de date de raster care identifică direcția următoarei celule împreună cu cala ultimului cost înapoi la prima sursă. Acesta este rezultatul din funcția<strong>Acumulare distanță</strong>sau<strong>Alocare distanță</strong>.</p>",
	"@@Least-Cost-Corridor_threshold_tag0@@": "<p>Un prag de cost procentual sau cumulativ care va determina dacă o celulă dată va fi inclusă în rasterul coridorului de ieșire.</p><p>Când parametrul<strong>Metodă prag</strong>este setat la<strong>Procentul ultimului cost</strong>, valoarea specificată indică creșterea procentuală care se va aplica de la o valoare minimă a rasterelor de distanță de cost acumulat însumate. Când parametrul<strong>Metodă prag</strong>este setat la<strong>Cost acumulat</strong>, valoarea indică celulele care au un cost acumulat însumat egal cu sau sub valoarea care va fi inclusă în coridor.</p><p>Acest parametru este activ doar dacă parametrul<strong>Metodă prag</strong>este setat la<strong>Procentul ultimului cost</strong>sau<strong>Cost acumulat</strong>.</p>",
	"@@Least-Cost-Corridor_thresholdmethod_tag0@@": "<p>Specifică cum va fi definit pragul.</p><p></p><ul><li><strong>Fără prag</strong>-Nu se va aplica niciun prag, iar coridorul rezultat va acoperi toată extinderea rasterelor de intrare. Acesta este valoarea implicită.</li><li><strong>Procentul ultimului cost</strong>--Pragul va fi definit ca procent al valorii minime a rasterelor de distanță de cost acumulat.</li><li><strong>Cost acumulat</strong>--Pragul va fi definit în unități de distanță de cost acumulat.</li></ul>"
};
const helpTexts_ro = {
	rfxArgsHelpTexts: rfxArgsHelpTexts
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (helpTexts_ro);


//# sourceMappingURL=help-texts.ro-3a5c4e11.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,