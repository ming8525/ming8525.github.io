"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-36f79c"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.lv-21212188.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.lv-21212188.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "Labi";
const cancel = "Atcelt";
const enterURL = "Ievadīt attēlu servisa URL";
const serviceURL = "Servisa URL";
const selectRaster = "Atlasīt rastru";
const failedToLoadLayer = "Neizdevās ielādēt slāni";
const loadingLayer = "Notiek slāņa ielāde";
const selectFeature = "Izvēlēties elemetu slāni";
const enterFURL = "Ievadīt elementu servisa vietrādi URL";
const addRaster = "Pievienot rastra mainīgo";
const addScalar = "Pievienot konstanti";
const raster = "Rastrs";
const scalar = "Skalārs";
const defaultModelName = "Rastra funkciju sagatave";
const general = "Vispārīgi";
const parameters = "Parametri";
const variables = "Mainīgie";
const name = "Nosaukums";
const description = "Apraksts";
const parameter = "Parametrs";
const isPublic = "Ir publisks";
const isDataset = "Ir datu kopa";
const unknownPixelType = "Nezināms";
const outputPixelType = "Izvades pikseļa veids";
const u8PixelType = "8 bitu bez zīmes";
const s8PixelType = "8 bitu ar zīmi";
const u16PixelType = "16 bitu bez zīmes";
const s16PixelType = "16 bitu ar zīmi";
const u32PixelType = "32 bitu bez zīmes";
const s32PixelType = "32 bitu ar zīmi";
const f32PixelType = "32 bitu daļskaitlis";
const f64PixelType = "64 bitu dubultās precizitātes daļskaitlis";
const properties = "Īpašības";
const multidimensionalRules = "Daudzdimensiju kārtulas";
const matchVariables = "Mainīgo saskaņošana";
const unionDimensions = "Apvienošanas dimensijas";
const rasterFunctionEditor = {
	invalidRFTMessage: "Rastra funkciju veidne nav derīga.",
	rfxArgsEditor: {
		outputRaster: "OutputRaster",
		raster: "Rastrs",
		unsupportedDataTypeWarning: "Zemāk norādītie argumenti netiks parādīti, jo tie pašreiz netiek atbalstīti.",
		unsupportedFunction: "Satur pašlaik neatbalstītu(-as) rastra funkciju(-as)."
	},
	rfxRasterInput: {
		selectLayer: "Izvēlieties slāni",
		browseLayers: "Pārlūkot slāņus",
		rfxVariable: "Rastra funkcijas mainīgais"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Metode",
		bandLabel: "Saite",
		combinationLabel: "Kombinācija"
	},
	rfxRemapGrid: {
		minimum: "Minimums",
		maximum: "Maksimums",
		output: "Izvade",
		noData: "Nav datu",
		remapValuesLabel: "Pārkartēt vērtības"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Rastra mainīgie lielumi",
		deleteSelectedVars: "Noņemt izvēlētos mainīgos lielumus"
	},
	rfxClippingGeometry: {
		clippingLayer: "Izgriezumu slānis",
		clippingRaster: "Izgriezumu rastrs",
		clippingGeometry: "Ģeometrijas izgriešana",
		customExtent: "Pielāgots pārklājums",
		outputExtent: "Izvades pārklājums",
		currentExtent: "Pašreizējais kartes pārklājums",
		drawLabel: "Zīmēšana"
	},
	rfxCustomExtent: {
		top: "Augšdaļā",
		right: "Pa labi",
		bottom: "Lejasdaļā",
		left: "Pa kreisi"
	},
	rfxRasterArrayEditor: {
		moveUp: "Pārvietot augšup",
		moveDown: "Pārvietot lejup",
		remove: "Noņemt"
	},
	rfxStatisticsGrid: {
		stdDev: "Standarta nov.",
		min: "Min.",
		max: "Maks.",
		mean: "Vidējais"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Svērtās summas tabula",
		id: "ID",
		layer: "Slānis",
		field: "Lauks",
		weight: "Svars",
		value: "Vērtība",
		selectLayer: "Izvēlieties slāni"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Svērtās pārklāšanās tabula",
		id: "ID",
		layer: "Slānis",
		field: "Lauks",
		influence: "Ietekme",
		sumOfInfluence: "Ietekmju summa",
		value: "Vērtība",
		remapTable: "Pārkartēt tabulu",
		scale: "Mērogs",
		scales: "Mērogi",
		selectRaster: "Atlasīt rastru"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Pārlūkot elementu slāni",
		addPointLayer: "Pārlūkot punktu slāni"
	},
	rfxFieldSelect: {
		value: "Vērtība",
		count: "Skaits"
	},
	rfxAttributeTable: {
		tableType: "Tabulas veids",
		manual: "Instrukcija",
		external: "Ārējā",
		minVal: "Minimālā vērtība",
		maxVal: "Maksimālā vērtība",
		baseClassName: "Klases pamata nosaukums",
		colorScheme: "Krāsu shēma",
		defaultClassName: "Kartes teksts_",
		generateTable: "Ģenerēt tabulu",
		browseTable: "Pārlūkot tabulu",
		value: "Vērtība",
		classname: "Klases nosaukums",
		color: "Krāsa"
	},
	rfxFieldNumberSwitchable: {
		number: "Skaitlisks",
		field: "Lauks",
		string: "Virkne",
		linearUnit: "Lineārā mērvienība"
	},
	rfxPropertySet: {
		name: "Vārds/nosaukums",
		value: "Vērtība"
	},
	rfxConversionGrid: {
		size: "Izmērs"
	},
	rfxTransposeBit: {
		bitPattern: "Bitu shēma",
		outputBit: "Izvades bits",
		inputBit: "Ievades bits"
	},
	rfxSpatialReference: {
		placeHolder: "Filtrēt pēc atslēgvārda",
		coordinateSystem: "Koordinātu sistēma",
		gcs: "Ģeogrāfiskā koordinātu sistēma",
		pcs: "Projicētā koordinātu sistēma",
		vcs: "Vertikālo koordinātu sistēma"
	}
};
const rfxLicenseInfo = "Šo rastra funkciju veidni var izmantot, lai apstrādātu attēlus ar ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Aprēķina rastra šūnu inverso hiperbolisko kosinusu.",
		aCosHDesc: "Funkcija aprēķina rastra pikseļu inverso hiperbolisko kosinusu.",
		aCosName: "ACos",
		aCosSnip: "Aprēķina pikseļu inverso kosinusu rastrā.",
		aCosDesc: "Šī rastra funkcija aprēķina šūnu inverso kosinusu rastrā. Matemātikā visām trigonometriskajām funkcijām ir definēts derīgu ievades vērtību diapazons, ko dēvē par domēnu. Visu funkciju izvades vērtībām arī ir definēts diapazons. Šim rīkam domēns ir [-1, 1] un diapazons — [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Aprēķina rastra šūnu inverso hiperbolisko sinusu.",
		aSinHDesc: "Funkcija aprēķina rastra pikseļu inverso hiperbolisko sinusu.",
		aSinName: "ASin",
		aSinSnip: "Aprēķina rastra šūnu inverso sinusu.",
		aSinDesc: "Funkcija aprēķina rastra pikseļu inverso sinusu.",
		aTan2Name: "ATan2",
		aTan2Snip: "Aprēķina rastra šūnu inverso tangensu (pamatojoties uz x, y koordinātām).",
		aTan2Desc: "Funkcija aprēķina rastra pikseļu inverso tangensu (pamatojoties uz x, y koordinātām).",
		aTanHName: "ATanH",
		aTanHSnip: "Aprēķina rastra šūnu inverso hiperbolisko tangensu.",
		aTanHDesc: "Funkcija aprēķina rastra pikseļu inverso hiperbolisko tangensu.",
		aTanName: "ATan",
		aTanSnip: "Aprēķina rastra šūnu inverso tangensu.",
		aTanDesc: "Funkcija aprēķina rastra pikseļu inverso tangensu.",
		absName: "Abs",
		absSnip: "Aprēķina rastra šūnu absolūto vērtību.",
		absDesc: "Absolūtās vērtības funkcija aprēķina rastra pikseļu absolūto vērtību.",
		reflectanceName: "Šķietamā atstarošanās",
		reflectanceSnip: "Konvertē neapstrādātus attēlus par Atmosfēras augšdaļas vērtībām, ņemot vērā sensora iezīmes, saules pozīciju un uzņemšanas laiku.",
		reflectanceDesc: "Šī funkcija dažiem satelītu sensoriem koriģē attēla spilgtuma digitālā skaitļa (DN — digital number) vērtības. Korekcijas ir balstītas uz saules augstumu, iegūšanas datumu un sensora parametriem, lai katrai joslai iestatītu pastiprinājumu un nobīdi. Šī funkcija tiek izmantota, lai koriģētu atstarošanas vai spilgtuma vērtības dažos satelīta attēlos, balstoties uz ainas apgaismojumu un sensora pastiprinājuma iestatījumiem. Attēli tiek koriģēti līdz teorētiski kopīgam apgaismojuma stāvoklim, lai būtu mazāk atšķirību ainās, kas uzņemtas dažādos datumos un ar dažādiem sensoriem. Tā var būt noderīga attēlu klasificēšanai, krāsu balansēšanai un mozaīku veidošanai. Šo funkciju var izmantot tikai specifiskiem attēliem. Var izmantot sensorus Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 un Pleiades.<div><br/>Šī funkcija veic divas korekcijas. Pirmā ir balstīta uz pastiprinājuma iestatījumiem. Sākotnējās spilgtuma vērtības tiek atkārtoti izveidotas no attēla vērtībām, apvēršot pastiprinājuma vienādojumus. Otrā korekcija ir saistīta ar saules leņķa un spožuma atšķirībām. Sākotnējās spilgtuma vērtības tiek koriģētas līdz kopīgam apgaismojuma stāvoklim, normalizējot ainas, kas uzņemtas dažādos apgaismojuma stāvokļos. Lai gan izvades attēla datu veids ir tāds pats kā ievades attēla datu veids, izvades vērtības ir zemākas nekā ievades vērtības un ir ierobežotas derīgajā datu diapazonā.</div>",
		argStatisticsName: "Argumentu statistika",
		argStatisticsSnip: "Aprēķina argumentu statistiku, tostarp maksimālo argumentu, minimālo argumentu, argumenta mediānu un ilgumu.",
		argStatisticsDesc: "Funkcija aprēķina argumentu statistiku. Argumentu statistikas funkcijā ir četras metodes: maksimālais arguments, minimālais arguments, argumenta mediāna un ilgums.",
		arithmeticName: "Aritmētisks",
		arithmeticSnip: "Veic aritmētisku operāciju ar diviem rastriem vai rastru un skalāru lielumu.",
		arithmeticDesc: "Aritmētikas funkcija veic aritmētisku operāciju ar diviem rastriem vai rastru un skalāru lielumu.",
		aspectSlopeName: "Vērsums-slīpums",
		aspectSlopeSnip: "Izveido rastru, kas vienlaicīgi parāda vienlaidu virsmas vērsumu (virzienu) un slīpumu (stāvumu), kā parādīts digitālajā augstuma modelī.",
		aspectSlopeDesc: "Vērsuma-slīpuma funkcija izveido rastra slāni, kas vienlaicīgi parāda virsmas vērsumu un slīpumu. Vērsums norāda katra pikseļa maksimālās vērtības maiņas krituma virzienu attiecībā pret līdzās esošajiem pikseļiem. Aspektu var uzskatīt par krituma virzienu. Izvades rastra vērtības ir vērsuma debespuse, ko attēlo nokrāsa (krāsa). Slīpums norāda augstuma maiņas līmeni katram digitālā augstuma modeļa (DEM — digital elevation model) pikselim. Slīpums norāda virsmas stāvumu, un to iedala trīs klasēs, ko attēlo krāsas piesātinājums (spilgtums).<div><br/>Pikseļu vērtības vērsuma-slīpuma izvades rastrā parāda vērsuma un slīpuma kombināciju. Pikseļi, kuru vērtība nepārsniedz 20, tiek uzskatīti par līdzeniem un tiek rādīti pelēkā krāsā. Vērsuma-slīpuma vērtības, kas lielākas par 21, tiks parādītas ar dažādu piesātinājumu: 21–30 — mazs slīpums, 31–40 — vidējs slīpums, vairāk par 41 — liels slīpums</div>",
		aspectName: "Proporcijas",
		aspectSnip: "Parāda, kurā virzienā ir vērsts pikselis. 0 apzīmē ziemeļus, un leņķis pieaug pulksteņrādītāju kustības virzienā līdz 360.",
		aspectDesc: "Vērsuma funkcija nosaka katras šūnas maksimālās vērtības izmaiņu krituma virzienu attiecībā pret līdzās esošajām šūnām. Aspektu var uzskatīt par krituma virzienu. Izvades rastra vērtības ir aspekta kompasa virziens.<div><br/>Šajā funkcijā tiek ievadīts ievades rastrs. Vērsuma funkcija bieži tiek lietota digitālajam augstuma modelim (DEM — digital elevation model). Pēc noklusējuma vērsums tiek rādīts kā pelēktoņu attēls. Varat pievienot krāsu kartes funkciju, lai norādītu konkrētu krāsu shēmu vai atļautu personai, kas skata mozaīku, mainīt simbolu sistēmu ar savu krāsu shēmu.</div>",
		tableName: "Atribūtu tabula",
		tableSnip: "Izmanto tabulu, lai nosauktu un simbolizētu vērtības datu kopā. Tabulas kolonnas ir norādītas komatatdalītā formātā: Pikseļa vērtība, Atribūta nosaukums, Sarkanās krāsas vērtība, Zaļās krāsas vērtība, Zilās krāsas vērtība.",
		tableDesc: "Atribūtu tabulas funkcija ļauj definēt atribūtu tabulu, lai simbolizētu vienas joslas mozaīkas datu kopu vai rastra datu kopu. <div><br/>Tā ir noderīga, ja vēlaties parādīt attēlus, kas klasificēti pēc zemes lietojuma, piemēram, meži, mitrāji, lauksaimniecības un apbūves zemes. Turklāt, ja jūsu tabulā ir lauki Sarkans, Zaļš un Zils, atveidojot attēlu, šo lauku vērtības tiks izmantotas kā krāsu karte.</div>",
		bandArithmeticName: "Joslas aritmētika",
		bandArithmeticSnip: "Aprēķina indeksus, izmantojot iepriekšdefinētas formulas vai lietotāja definētu izteiksmi.",
		bandArithmeticDesc: "Joslas aritmētikas funkcija veic aritmētisku operāciju ar rastra datu kopas joslām. Varat izmantot iepriekšdefinētus algoritmus vai ievadīt savu vienas rindas formulu. Tiek atbalstīti operatori -, +, /, * un unārais operators -.",
		thresholdName: "Bināro sliekšņvērtību noteikšana",
		thresholdSnip: "Kārto vienlaidu datus priekšplānā un fonā, minimizējot kovariāciju starp abām klasēm.",
		thresholdDesc: "Ja rastra datu kopai ir bimodāla sadale, šī funkcija izveido jaunu rastru, kas sadala datus divās atsevišķās klasēs. Tā izveido zemu vērtību klasi, kas attēlota ar melniem pikseļiem, un augstu vērtību klasi, kas attēlota ar baltiem pikseļiem.",
		bitwiseAndName: "Bitu \"Un\"",
		bitwiseAndSnip: "Veic bitu operāciju “Un” divu ievades rastru binārajām vērtībām.",
		bitwiseAndDesc: "Izmantojot funkciju “Bitu “Un””, divu ievades rastru binārajām vērtībām tiek veikta bitu operācija “Un”.",
		bitwiseLeftShiftName: "Bitu kreisais taustiņš Shift",
		bitwiseLeftShiftSnip: "Veic bitu pārbīdi pa kreisi divu ievades rastru binārajām vērtībām.",
		bitwiseLeftShiftDesc: "Izmantojot funkciju “Bitu pārbīde pa kreisi”, divu ievades rastru binārajām vērtībām tiek veikta bitu pārbīde pa kreisi.",
		bitwiseNotName: "Bitu \"Nav\"",
		bitwiseNotSnip: "Veic bitu operāciju “Nav” (papildinājums) divu ievades rastru binārajām vērtībām.",
		bitwiseNotDesc: "Funkcija veic bitu operāciju “Nav” (papildinājums) ievades rastra binārajai vērtībai.",
		bitwiseOrName: "Bitu \"Vai\"",
		bitwiseOrSnip: "Veic bitu operāciju “Vai” divu ievades rastru binārajām vērtībām.",
		bitwiseOrDesc: "Funkcija veic bitu operāciju “Vai” divu ievades rastru binārajām vērtībām. ",
		bitwiseRightShiftName: "Bitu labais taustiņš Shift",
		bitwiseRightShiftSnip: "Veic bitu pārbīdi pa labi divu ievades rastru binārajām vērtībām.",
		bitwiseRightShiftDesc: "Funkcija veic bitu pārbīdi pa labi divu ievades rastru binārajām vērtībām.",
		bitwiseXorName: "Bitu Xor",
		bitwiseXorSnip: "Veic bitu operāciju “Izslēdzošais “Vai”” divu ievades rastru binārajām vērtībām.",
		bitwiseXorDesc: "Funkcija veic bitu operāciju “Izslēdzošais “Vai”” divu ievades rastru binārajām vērtībām",
		booleanAndName: "Būla \"Un\"",
		booleanAndSnip: "Veic darbību Būla “Un” divu ievades rastru šūnu vērtībām. Ja abas ievades vērtības ir patiesas (nav nulle), izvades vērtība ir 1. Ja viena vai abas ievades ir aplamas (nulle), izvades vērtība ir 0.",
		booleanAndDesc: "Funkcija veic darbību Būla “Un” divu ievažu binārajām vērtībām. Ja abas ievades vērtības ir patiesas (nav nulle), izvades vērtība ir 1. Ja viena vai abas ievades vērtības ir aplamas (nulle), izvades vērtība ir 0. ",
		booleanNotName: "Būla vērtība \"Nav\"",
		booleanNotSnip: "Veic operāciju Būla “Nav” (papildinājums) ievades rastra šūnu vērtībām. Ja ievades vērtības ir patiesas (nav nulle), izvades vērtība ir 0. Ja ievades vērtības ir aplamas (nulle), izvade ir 1.",
		booleanNotDesc: "Funkcija veic operāciju Būla “Nav” (papildinājums) ievades rastra pikseļu vērtībām. Ja ievades vērtības ir patiesas (nav nulle), izvades vērtība ir 0. Ja ievades vērtības ir aplamas (nulle), izvades vērtība ir 1.",
		booleanOrName: "Būla \"Vai\"",
		booleanOrSnip: "Veic Būla operāciju “Vai” divu ievades rastru šūnu vērtībām. Ja viena vai abas ievades vērtības ir patiesas (nav nulle), izvades vērtība ir 1. Ja abas ievades vērtības ir aplamas (nulle), izvade ir 0.",
		booleanOrDesc: "Funkcija veic Būla operāciju “Vai” divu ievades rastru šūnu vērtībām. Ja viena vai abas ievades vērtības ir patiesas (nav nulle), izvades vērtība ir 1. Ja abas ievades vērtības ir aplamas (nulle), izvades vērtība ir 0.",
		booleanXorName: "Būla Xor",
		booleanXorSnip: "Veic Būla operāciju “Izslēdzošais “Vai”” divu ievades rastru šūnu vērtībām. Ja viena ievades vērtība ir patiesa (nav nulle) un otra vērtība ir aplama (nulle), izvades vērtība ir 1. Ja abas ievades vērtības ir patiesas vai abas vērtības ir aplamas, izvades vērtība ir 0.",
		booleanXorDesc: "Funkcija veic Būla operāciju “Izslēdzošais “Vai”” divu ievades rastru šūnu vērtībām. Ja viena ievades vērtība ir patiesa (nav nulle) un otra vērtība ir aplama (nulle), izvades vērtība ir 1. Ja abas ievades vērtības ir patiesas vai abas vērtības ir aplamas, izvades vērtība ir 0.",
		bufferedRasterName: "Buferzona",
		bufferedRasterSnip: "Saglabā buferzonā pēdējo(-os) izmantoto(-os) pikseļu bloku(-us).",
		bufferedRasterDesc: "Buferzonas funkcija tiek izmantota, lai optimizētu kompleksu funkciju ķēžu darbību. Tā saglabā izvades datus tajā funkciju ķēdes daļā, kas atrodas pirms attiecīgās funkcijas. <div><br/>Ievietojiet šo funkciju tajā funkciju redaktora vietā, kur vēlaties saglabāt izvades datus.</div>",
		rasterCalculatorName: "Kalkulators",
		rasterCalculatorSnip: "Aprēķina rastru no matemātiskas izteiksmes, kas balstīta uz rastru.",
		rasterCalculatorDesc: "Kalkulatora funkcija ļauj izveidot un izrēķināt izteiksmes un iekļaut tās funkciju ķēdēs.",
		cellStatisticsName: "Šūnu statistika",
		cellStatisticsSnip: "Aprēķina statistiku katrai šūnai no vairākiem rastriem. Pieejama šāda veida statistika: vairākums, maksimums, vidējā vērtība, mediānas vērtība, minimums, mazākums, procentile, diapazons, standartnovirze, summa un varietāte.",
		cellStatisticsDesc: "Šī funkcija aprēķina statistiku no vairākiem rastriem pikseli pa pikselim. Pieejama šāda veida statistika: diapazons, maksimums, mazākums, mediāna, minimums, standartnovirze, summa, vairākums, varietāte un vidējais.",
		classifyName: "Klasificēt",
		classifySnip: "Kārto katru pikseli kādā klasē. Iekļauj palīgdatus, piemēram, segmentētu attēlu.",
		classifyDesc: "Šī rastra funkcija klasificē rastra datu kopu, balstoties uz Esri Classifier Definition (.ecd) failu un rastra datu kopas ievadi. Klasificēšanas funkcijā izmantotais .ecd fails ietver visu informāciju par konkrētu datu kopu un klasificētāju, un to ģenerē klasificēšanas apmācību rīki, piemēram, Train Support Vector Machine vai Train Random Trees.",
		clipName: "Izgriešana",
		clipSnip: "Nosaka rastra pārklājumu, izmantojot koordinātas vai citu datu kopu.",
		clipDesc: "Šī funkcija izgriež rastru, izmantojot taisnstūra formu atbilstoši norādītajām robežām, vai izgriež rastru ievades laukuma elementa klases formā. Pamatojoties uz griezuma formu, var izgriezt rastra pārklājumu vai izgriezt teritoriju rastrā.",
		colorspaceConversionName: "Krāsu modeļa konvertēšana",
		colorspaceConversionSnip: "Konvertē rastru no RGB uz HSV un otrādi.",
		colorspaceConversionDesc: "Krāsu modeļa konvertēšanas funkcija konvertē attēla krāsu modeli no toņa, piesātinājuma un vērtību (HSV) krāstelpas modeļa uz sarkanzaļzilo krāsu modeli (RGB) vai otrādi.<div><br/>Šo funkciju var izmantot mozaīkas datu kopā.</div>",
		colormapToRGBName: "Krāsu karte uz RGB",
		colormapToRGBSnip: "Konvertē vienas joslas rastru ar krāsu karti uz trīs joslu (sarkans, zaļš un zils) rastru.",
		colormapToRGBDesc: "Šī funkcija konvertē vienas joslas rastru ar krāsu karti uz trīs joslu (sarkans, zaļš un zils) rastru.<div><br/>Šī funkcija ir noderīga, ja jāizveido trīs joslu rastrs no vienas joslas rastra ar saistītu krāsu karti. Krāsu kartes vērtības tiks izmantotas, lai izveidotu sarkano, zaļo un zilo joslu. Šo funkciju var izmantot mozaīkas datu kopā.</div>",
		colormapName: "Krāsu karte",
		colormapSnip: "Maina pikseļu vērtības, lai attēlotu rastra datus kā pelēktoņu vai sarkanu, zaļu un zilu (RGB) attēlu, balstoties uz krāsu karti vai krāsu paleti.",
		colormapDesc: "Krāsu kartes funkcija ir rastra datu atveidotāja veids. Tā transformē pikseļu vērtības, lai rastra datus attēlotu kā pelēktoņu vai RGB krāsu attēlu, balstoties uz krāsu shēmu vai konkrētām krāsām krāsu kartes failā. Varat izmantot krāsu karti, lai parādītu analizētus datus, piemēram, klasificētu attēlu, vai topogrāfisku karti (vai indeksētu skenētus krāsainus attēlus).<div><br/>Krāsu kartēs ir ietvertas vērtību kopas, kas saistītas ar krāsām, kuras tiek izmantotas vienas joslas rastra nemainīgai parādīšanai ar tām pašām krāsām. Katra pikseļa vērtība ir saistīta ar krāsu, kas definēta kā RGB vērtību kopa. Krāsu kartes var atbalstīt jebkuru bitu dziļumu, izņemot peldošā punkta vērtības. Tās arī atbalsta pozitīvās un negatīvās vērtības un var ietvert trūkstošās krāsu kartēšanas vērtības. Attēlojot datu kopu ar krāsu karti, kurā trūkst vērtību, pikseļi ar trūkstošajām vērtībām netiks attēloti.</div>",
		complexName: "Komplekss",
		complexSnip: "Izvelk komplekso skaitļu moduli.",
		complexDesc: "Šī funkcija aprēķina komplekso vērtību moduli.<div><br/>Šī funkcija parasti tiek izmantota ar RADAR attēliem, kuriem ir komplekso datu veids. To var izmantot mozaīkas datu kopā.</div>",
		compositeBandName: "Saliktās joslas",
		compositeBandSnip: "Apvieno vairākas datu kopas vienā vairākjoslu rastrā.",
		compositeBandDesc: "Salikto joslu funkcija ļauj apvienot rastrus, lai izveidotu daudzjoslu attēlu.",
		conName: "Nosacījums",
		conSnip: "Veic nosacījuma operāciju \"Ja\",\"Tad\",\"Citādi”. Ja tiek izmantots nosacījuma operators, parasti ir savienotas vismaz divas funkcijas. Viena funkcija nosaka kritērijus, savukārt otra funkcija ir nosacījuma operators, kas izmanto kritērijus un nosaka, kādām jābūt patiesajām un aplamajām izvades vērtībām.",
		conDesc: "Nosacījuma funkcija iestata izvades rastra pikseļus, pamatojoties uz nosacījuma “ja/citādi” izvērtējumu katram ievades pikselim. Atgriež pikseļu vērtības no rastra, kas atbilst patiesam izteikumam, ja nosacījuma izvērtējuma rezultāts ir patiess (1), vai atgriež pikseļu vērtības no rastra, kas atbilst aplamam izteikumam, ja nosacījuma izvērtējuma rezultāts ir aplams (0). Šo kritēriju norāda loģiskās matemātiskās funkcijas izvade, kas būs ievades rastrā.",
		constantName: "Konstante",
		constantSnip: "Izveido virtuālu rastru ar vienu pikseļa vērtību.",
		constantDesc: "Šī funkcija izveido virtuālu rastru ar vienu pikseļa vērtību, ko var izmantot rastra funkciju veidnēs un mozaīkas datu kopas apstrādei.<div><br/>Konstantes vērtība tiek izmantota katra rastra pikseļa vērtībai.</div>",
		contourName: "Kontūra",
		contourSnip: "Izveido horizontāles.",
		contourDesc: "Kontūras funkcija ģenerē horizontāles, savienojot vienāda augstuma punktus no rastra augstumu datu kopas. Horizontāles ir izolīnijas, kas vizualizācijas nolūkos tiek izveidotas kā rastri. Šī funkcija ir noderīga, jo: horizontāles tiek ātri un dinamiski izveidotas ļoti lielās datu kopās, piemēram, datu kopā World Elevation; horizontāles var izlīdzināt, lai nodrošinātu kartogrāfiski atbilstošu attēlu, vienlaikus saglabājot horizontāļu precizitāti; tiek nodrošināta horizontāļu intervāla dinamiska kontrole; pieejamās izvades opcijas — horizontāles, indeksu kontūras un aizpildītas kontūras.<div><br/>Veidojot kontūru slāni kā rastru, to var efektīvi izmantot dažādos veidos, jo kontūras var pārklāt kartei. Šādi var iegūt informāciju par reljefu, neaizklājot pamata datus. Tās ir noderīgas celtniecības, lauksaimniecības un ūdenssaimniecības jomā.</div>",
		contrastBrightnessName: "Kontrasts un spilgtums",
		contrastBrightnessSnip: "Koriģē rastra kontrastu un spilgtumu.",
		contrastBrightnessDesc: "Kontrasta un spilgtuma funkcija uzlabo rastra datu izskatu, mainot attēla spilgtumu un kontrastu. Spilgtums palielina attēla vispārējo gaišumu, piemēram, tumšas krāsas tiek padarītas gaišākas un gaišas krāsas tiek padarītas baltākas. Kontrasts koriģē atšķirību starp tumšāko un gaišāko krāsu.<div><br/>Šī funkcija maina pikseļu vērtības, tādēļ to ieteicams izmantot tikai datu izskata uzlabošanai. Neizmantojiet to, ja plānojat analizēt datus un ir nepieciešamas neapstrādātu pikseļu vērtības. Šī funkcija ir noderīga, publicējot datus kā attēlu servisu, ko var izmantot lietotnēs bez iespējas mainīt attēla kontrastu un spilgtumu; tādējādi var arī nodrošināt, ka attēlojumam tiek izmantoti jūsu vēlamie iestatījumi.</div>",
		convolutionName: "Konvolūcija",
		convolutionSnip: "Lieto filtru, lai uzlabotu asumu, izplūdumu, noteiktu malas, izlīdzinātu vai lietotu gradientu rastram.",
		convolutionDesc: "Konvolūcijas funkcija attēlā filtrē pikseļu vērtības, un to var izmantot attēla asuma palielināšanai, attēla izplūdumam, malu noteikšanai attēlā vai citiem uz kodolu balstītiem uzlabojumiem. Filtri tiek izmantoti rastra attēla kvalitātes uzlabošanai, noņemot neatbilstošus datus vai uzlabojot datu elementus. Šie konvolūcijas filtri tiek lietoti kustīgam, pārklātam kodolam (logam vai apvidum), piemēram, 3x3. Konvolūcijas filtri darbojas, aprēķinot pikseļu vērtību, balstoties uz līdzās esošo pikseļu svarīgumu.",
		corridorName: "Koridors",
		corridorSnip: "Aprēķina divu uzkrāto izmaksu ievades rastru uzkrāto izmaksu summu.",
		corridorDesc: "Koridora funkcija aprēķina divu uzkrāto izmaksu ievades rastru uzkrāto izmaksu summu. Ievadei var izmantot jebkurus divus rastrus, taču, lai iegūtu jēgpilnu rezultātu, tiem jābūt nemainītiem uzkrāto izmaksu izvades rastriem. Ievades secība nav svarīga.",
		cosHName: "CosH",
		cosHSnip: "Aprēķina rastra šūnu hiperbolisko kosinusu.",
		cosHDesc: "Funkcija aprēķina rastra pikseļu hiperbolisko kosinusu.",
		cosName: "Kosinuss",
		cosSnip: "Aprēķina rastra šūnas kosinusu.",
		cosDesc: "Funkcija aprēķina rastra pikseļu kosinusu.",
		costAllocationName: "Izmaksu sadalījums",
		costAllocationSnip: "Katrai šūnai aprēķina zemāko izmaksu avotu, balstoties uz zemākajām uzkrātajām izmaksām izmaksu virsmā.",
		costAllocationDesc: "Izmaksu sadalījuma funkcija katrai šūnai aprēķina zemāko izmaksu avotu, balstoties uz zemākajām uzkrātajām izmaksām izmaksu virsmā.",
		costBackLinkName: "Izmaksu izsekošana",
		costBackLinkSnip: "Definē šūnu, kas zemāko uzkrāto izmaksu ceļā ir tieši līdzās zemāko izmaksu avotam.",
		costBackLinkDesc: "Izmaksu izsekošanas funkcija definē šūnu, kura ir nākamā šūna zemāko uzkrāto izmaksu ceļā uz zemāko izmaksu avotu.<div><br/>Izsekošanas rastrā ir vērtības no 0 līdz 8, kas definē virzienu vai norāda tuvāko šūnu (nākamo šūnu) zemāko uzkrāto izmaksu ceļā no šūnas līdz tās zemāko izmaksu avotam. Ja ceļš noved īstajā šūnā, tai tiks piešķirta vērtība 1. Šūnai, kas atrodas pa diagonāli zemāk labajā malā, tiks piešķirta vērtība 2, un attiecīgi tiek piešķirtas vērtības tālāk pulksteņrādītāju kustības virzienā. Vērtība 0 ir rezervēta avota šūnām.</div>",
		costDistanceName: "Izmaksu attālums",
		costDistanceSnip: "Aprēķina katras šūnas zemāko uzkrāto izmaksu attālumu no zemāko izmaksu avota vai līdz tam izmaksu virsmā.",
		costDistanceDesc: "Izmaksu attāluma funkcija aprēķina katras šūnas zemāko uzkrāto izmaksu attālumu no zemāko izmaksu avota vai līdz tam izmaksu virsmā.",
		costPathName: "Izmaksu ceļš",
		costPathSnip: "Aprēķina zemāko izmaksu ceļu no avota līdz galamērķim.",
		costPathDesc: "Globālā izmaksu ceļa funkcija aprēķina zemāko izmaksu ceļu no avota līdz galamērķim.<div><br/>Šī funkcija rada izvades rastru, kas reģistrē zemāko izmaksu ceļu vai ceļus no atlasītām atrašanās vietām līdz tuvākajai avota šūnai, kas definēta uzkrāto izmaksu virsmā, attiecībā uz izmaksu attālumu.</div>",
		curvatureName: "Izliekums",
		curvatureSnip: "Aprēķina rastra virsmas izliekumu, pēc izvēles iekļaujot profila un virsskata izliekumu.",
		curvatureDesc: "Izliekuma funkcija parāda slīpuma formu vai izliekumu. Virsmas daļa var būt izliekta vai ieliekta; to var noteikt pēc izliekuma vērtības. Izliekums tiek aprēķināts, aprēķinot virsmas otrās kārtas atvasinājumu.<div><br/>Izliekuma funkcijas izvadi var izmantot, lai raksturotu sateces baseina fiziskās īpašības un izprastu erozijas un noteces procesus. Izliekuma vērtību var izmantot augsnes erozijas modeļu, kā arī virszemes ūdens sadalījuma noteikšanai. Profila izliekums ietekmē plūsmas paātrinājumu un palēninājumu un tādējādi ietekmē eroziju un uzkrāšanos. Virsskata izliekums ietekmē plūsmas konverģenci un diverģenci.</div>",
		divideName: "Dalīt",
		divideSnip: "Izdala divu rastru vērtības šūnu pa šūnai.",
		divideDesc: "Dalīšanas funkcija izdala divu rastru vērtības pikseli pa pikselim.",
		elevationVoidFillName: "Augstuma tukšuma aizpildīšana",
		elevationVoidFillSnip: "Izveido pikseļus vietās, kur augstuma datos ir tukšumi.",
		elevationVoidFillDesc: "Augstuma tukšuma aizpildīšanas funkcija tiek izmantota, lai izveidotu pikseļus vietās, kur augstumā ir tukšumi.<div><br/>Tukšumi rodas, ja rastrā pikseļa attēlotajā laukumā nav apkopoti punkti. Tukšumi bieži rodas ūdenskrātuvju, klases tipa atlases vai izslēgšanas dēļ. Tukšumu aizpildīšana parasti tiek izmantota, ģenerējot zemes virsmu.</div>",
		equalToName: "Vienāds ar",
		equalToSnip: "Divām ievadēm šūnu pa šūnai veic salīdzināšanas operāciju “Vienāds ar”. Ja pirmais rastrs ir vienāds ar otro rastru, tā šūnām atgriež vērtību 1; ja rastri nav vienādi, atgriež vērtību 0.",
		equalToDesc: "Funkcija diviem rastriem pikseli pa pikselim veic operāciju “Vienāds ar”. Ja pirmais rastrs ir vienāds ar otro rastru, tā pikseļiem atgriež vērtību 1; ja rastri nav vienādi, atgriež vērtību 0.",
		eucAllocationName: "Eiklīda sadalījums",
		eucAllocationSnip: "Katrai šūnai aprēķina tuvāko avotu, balstoties uz Eiklīda attālumu.",
		eucAllocationDesc: "Eiklīda sadalījuma funkcija aprēķina katrai šūnai tuvāko avotu, balstoties uz Eiklīda attālumu.",
		eucDirectionName: "Eiklīda virziens",
		eucDirectionSnip: "Katrai šūnai aprēķina virzienu uz tuvāko avotu (grādos).",
		eucDirectionDesc: "Eiklīda virziena funkcija katrai šūnai aprēķina virzienu uz tuvāko avotu (grādos). <div><br/>Virziens tiek aprēķināts no katras šūnas centra līdz tuvākās avota šūnas centram. Vērtību diapazons ir no 0 grādiem līdz 360 grādiem. 0 apzīmē avota šūnas. Austrumu virzienu (pa labi) apzīmē 90, un vērtības pieaug pulksteņrādītāju kustības virzienā (180 apzīmē dienvidus, 270 — rietumus, 360 — ziemeļus).</div>",
		eucDistanceName: "Eiklīda attālums",
		eucDistanceSnip: "Katrai šūnai aprēķina Eiklīda attālumu līdz tuvākajam avotam.",
		eucDistanceDesc: "Eiklīda attāluma funkcija katrai šūnai aprēķina Eiklīda attālumu līdz tuvākajam avotam.",
		exp10Name: "Exp10",
		exp10Snip: "Aprēķina rastra šūnu kāpinājumu pie kāpināmā 10.",
		exp10Desc: "Funkcija “Exp10” aprēķina rastra pikseļu kāpinājumu pie kāpināmā 10.",
		exp2Name: "Exp2",
		exp2Snip: "Aprēķina rastra šūnu kāpinājumu pie kāpināmā 2.",
		exp2Desc: "Funkcija aprēķina rastra pikseļu kāpinājumu pie kāpināmā 2.",
		expName: "Exp",
		expSnip: "Aprēķina rastra šūnu kāpinājumu pie kāpināmā e.",
		expDesc: "Šī funkcija aprēķina rastra pikseļu kāpinājumu pie kāpināmā e.",
		extractBandName: "Joslu izvilkšana",
		extractBandSnip: "Norāda, ar kurām joslām veikt darbības, ja tiek izmantotas daudzjoslu datu kopas.",
		extractBandDesc: " Joslu izvilkšanas funkcija ļauj izvilkt vienu vai vairākas joslas no daudzjoslu rastra datu kopas vai pārkārtot joslu secību tajā.<div><br/>Varat izmantot funkciju Izvilkt joslu pirms citām funkcijām, piemēram, funkcijas Aritmētika, lai kontrolētu, kuras joslas tiek ievadītas nākamajā funkcijā.</div>",
		fillName: "Aizpildīt",
		fillSnip: "Aizpilda ieplakas virsmas rastrā, lai novērstu nelielas datu nepilnības.",
		fillDesc: "Globālā aizpildīšanas funkcija atrod un aizpilda ieplakas un virsotnes augstuma virsmas rastrā, lai novērstu nelielas datu nepilnības. Funkcija atkārtos aizpildīšanu, līdz visas ieplakas tiks aizpildītas līdz norādītajai Z robežai.<div><br/>Ja augstuma virsma tiek izveidota ar ortokartēšanas rīkiem vai citā veidā, bieži vien datos ir nelielas, taču ievērojamas kļūdas — ieplakas un virsotnes. Fotogrammetrijā ieplakas un virsotnes bieži tiek apzīmētas kā tukšumi un smailes. Tā kā virsmas dati bieži tiek izmantoti modelēšanai, piemēram, hidroloģiskajai modelēšanai, ir svarīgi labot šīs ieplaku un virsotņu kļūdas atbilstoši apkārtējiem datiem.</div>",
		floatName: "Peldošais punkts",
		floatSnip: "Konvertē katru rastra šūnas vērtību par peldošā punkta vērtību.",
		floatDesc: "Peldošā punkta funkcija konvertē katru rastra pikseļa vērtību par peldošā punkta vērtību.",
		flowAccumulationName: "Plūsmas akumulācija",
		flowAccumulationSnip: "Izveido rastru ar katras šūnas akumulēto plūsmu. Pēc izvēles var lietot svarīguma koeficientu.",
		flowAccumulationDesc: "Globālā plūsmas akumulēšanas funkcija izveido katra pikseļa akumulētās plūsmas rastru; to nosaka, apkopojot visu to pikseļu svarīgumu, kas ieplūst katrā krituma pikselī. Ja svarīguma rastrs nav norādīts, katram pikselim tiek lietota svarīguma vērtība 1, un pikseļu vērtība izvades rastrā ir to pikseļu skaits, kas saplūst katrā pikselī.<div><br/>Izvades pikseļi ar augstu plūsmas akumulāciju ir teritorijas, kur plūsma ir koncentrēta, un pikseļus var izmantot straumju joslu noteikšanai. Izvades pikseļi, kuros plūsmas akumulācijas vērtība ir 0, ir lokālie topogrāfiskie pacēlumi un tos var izmantot augstieņu noteikšanai.</div>",
		flowDirectionName: "Plūsmas virziena metode",
		flowDirectionSnip: "Izveido rastru ar plūsmas virzienu no katras šūnas uz tai tuvāko un stāvāko krituma pikseli.",
		flowDirectionDesc: "Viens no veidiem, kā uzzināt virsmas hidroloģiskās iezīmes, ir iespēja noteikt plūsmas virzienu no katra rastra pikseļa. Rastra plūsmas virziena funkcija kā ievadi izmanto virsmu un izveido rastru ar plūsmas virzienu no katra pikseļa uz tam tuvāko un stāvāko krituma pikseli. Plūsmas virziena funkcija atbalsta trīs plūsmas modelēšanas metodes: D8 (astoņi virzieni), Multi-Flow Direction (MFD) un D-Infinity (DINF). ",
		flowDistanceName: "Plūsmas attālums",
		flowDistanceSnip: "Katrai šūnai aprēķina minimālo lejupējo horizontālo vai vertikālo attālumu līdz šūnām upē vai straumē, kurā tās ieplūst.",
		flowDistanceDesc: "Katram pikselim funkcija aprēķinās minimālo lejupējo horizontālo vai vertikālo attālumu līdz pikselim(-ļiem) upē vai straumē, kurā tie ieplūst. Ja tiek nodrošināts plūsmas virziena rastrs, tiks izmantots(-i) tikai lejupējā slīpuma virziens(-i), kas definēti plūsmas virziena ievades rastrā. Tiek izvadīts plūsmas attāluma rastrs.",
		focalName: "Fokālā statistika",
		focalSnip: "Aprēķina fokālo statistiku katram attēla pikselim, balstoties uz definētu fokālo apvidu.",
		focalDesc: "Fokālās statistikas funkcija aprēķina fokālo statistiku katram attēla pikselim, balstoties uz definētu fokālo apvidu.",
		geometricName: "Ģeometrisks",
		geometricSnip: "Palielina datu kopas pozīciju precizitāti, ņemot vērā augstumu.",
		geometricDesc: "Ģeometrijas funkcija rada ortorektificētu attēlu, balstoties uz sensora definīciju un reljefa modeli. Tā palielina datu kopas pozīciju precizitāti, ņemot vērā augstumu.",
		grayscaleName: "Pelēktoņu attēls",
		grayscaleSnip: "Konvertē multijoslu attēlu par vienas joslas pelēktoņu attēlu.",
		grayscaleDesc: "Šī funkcija konvertē vairākjoslu attēlu par vienas joslas pelēktoņu attēlu.<div><br/>Šī funkcija lieto norādīto nozīmīgumu katrai  ievades joslai un normalizē izvades attēlu. Svarīgums bieži tiek lietots, jo dažu joslu nozīmīgums atšķiras atkarībā no lietojuma. Piemēram, zilajā joslā bieži ir vairāk traucējumu nekā citās joslās.</div>",
		greaterThanEqualName: "Lielāks nekā vienāds",
		greaterThanEqualSnip: "Divām ievadēm šūnu pa šūnai veic salīdzināšanas operāciju “Lielāks par vai vienāds ar”. Ja pirmais rastrs ir lielāks par vai vienāds ar otro rastru, šūnām atgriež vērtību 1. Ja tā nav, atgriež vērtību 0.",
		greaterThanEqualDesc: "Funkcija divām ievadēm pikseli pa pikselim veic salīdzināšanas operāciju “Lielāks par vai vienāds ar”. Ja pirmais rastrs ir lielāks par vai vienāds ar otro rastru, tā pikseļiem atgriež vērtību 1. Ja pirmais rastrs nav lielāks par vai vienāds ar otro rastru, pikseļiem atgriež vērtību 0.",
		greaterThanName: "Lielāks nekā",
		greaterThanSnip: "Divām ievadēm šūnu pa šūnai veic salīdzināšanas operāciju “Lielāks par”. Ja pirmais rastrs ir lielāks par otro rastru, šūnām atgriež vērtību 1. Ja tā nav, atgriež vērtību 0.",
		greaterThanDesc: "Funkcija divām ievadēm pikseli pa pikselim veic salīdzināšanas operāciju “Lielāks par”. Ja pirmais rastrs ir lielāks par otro rastru, tā pikseļiem atgriež vērtību 1. Ja pirmais rastrs nav lielāks par otro rastru, pikseļiem atgriež vērtību 0.",
		heatIndexName: "Karstuma indekss",
		heatIndexSnip: "Apvieno gaisa temperatūru ar relatīvo mitrumu, lai iegūtu šķietamo temperatūru.",
		heatIndexDesc: "Šī funkcija aprēķina šķietamo temperatūru, balstoties uz vides temperatūru un relatīvo mitrumu. Šķietamā temperatūra bieži tiek apzīmēta kā cilvēka ķermeņa sajustā temperatūra.<div><br/>Šis rādītājs var būt noderīgs, nosakot apdraudējumu saistībā ar medicīniskām problēmām, piemēram, muskuļu krampjiem, dehidratāciju, pārkaršanu vai nopietnāku karstuma dūrienu karstās un mitrās dienās. Ja relatīvais mitrums ir augsts, sviedriem ir grūtāk iztvaikot, tādējādi cilvēkiem zūd dabiskā termoregulācijas spēja. Karstuma paziņojumu vai brīdinājumu kartes bieži tiek veidotas, pārklasificējot karstuma indeksu klasēs; jo augstāka indeksa vērtība, jo lielāka iespējamība, ka tiks izsludināts brīdinājums, nevis tikai paziņojums.</div>",
		hillshadeName: "Reljefa ēnojums",
		hillshadeSnip: "Rada virsmas pelēktoņu 3D attēlojumu, attēla tonējumā ņemot vērā saules relatīvo pozīciju.",
		hillshadeDesc: "Reljefa ēnojuma funkcija rada reljefa virsmas pelēktoņu 3D attēlojumu, attēla tonējumā ņemot vērā saules relatīvo pozīciju. <div><br/>Reljefa ēnojums ir reljefa vizualizēšanas tehnika, ko nosaka gaismas avots un augstuma virsmas slīpums un vērsums. Tā ir kvalitatīva metode topogrāfijas vizualizēšanai un nesniedz absolūtas augstuma vērtības. </div>",
		intName: "Int",
		intSnip: "Konvertē katru rastra šūnas vērtību par veselu skaitli, to noapaļojot uz leju.",
		intDesc: "Veselā skaitļa funkcija konvertē rastra katra pikseļa vērtību par veselu skaitli, to noapaļojot uz leju.",
		interpolateIrregularDataName: "Neregulāru datu interpolēšana",
		interpolateIrregularDataSnip: "Interpolē no punktu mākoņiem vai neregulāriem tīkliem.",
		interpolateIrregularDataDesc: "Dažas netCDF vai HDF datu kopas glabā ģeogrāfiskā novietojuma informāciju kā neregulāri izkārtotu pikseļu vai punktu datu masīvus. Pievienojot šīs datu kopas mozaīkas datu kopai, neregulāro datu interpolēšanas funkcija neregulāri izkārtotos datus pārģenerē, lai visi pikseļi būtu vienāda izmēra un kvadrātveida formas.<div><br/>Mozaīkas datu kopai pievienojot mainīgos no netCDF vai HDF, tā automātiski pārbaudīs, vai dati ir izkārtoti regulāri. Ja tā nav, neregulāro datu interpolēšanas funkciju var izmantot, lai konvertētu neregulāros datus par regulāri izkārtotu rastru. Varat mainīt interpolācijas metodi un šūnu izmēru, kas tiek izmantoti rastra neregulāro datu interpolēšanas funkcijā. Regulāri izkārtotiem rastru datiem interpolēšana netiks lietota, un dati tiks nolasīti bez izmaiņām.</div>",
		isNullName: "Ir nulle",
		isNullSnip: "Šūnu pa šūnai nosaka, kuras vērtības no ievades rastriem ir vērtības “NoData”. Ja ievades vērtības ir “NoData”, atgriež vērtību 1. Ja tā nav, atgriež vērtību 0.",
		isNullDesc: "Funkcija “Ir nulle” pikseli pa pikselim nosaka, kuras vērtības no ievades rastra ir vērtības “NoData”. Ja ievades vērtība ir “NoData”, atgriež vērtību 1. Ja pikseļa vērtība nav “NoData”, atgriež vērtību 0.",
		kernelDensityName: "Kodola blīvums",
		kernelDensitySnip: "Aprēķina teritoriju (intensitāte uz vienību) no punkta vai līnijas elementa, izmantojot kodola funkciju, lai katram punktam vai līnijai pielāgotu vienmērīgi konisku virsmu.",
		kernelDensityDesc: "Šī funkcija aprēķina teritoriju (intensitāte uz vienību) no punkta vai līnijas elementa, izmantojot kodola funkciju, lai katram punktam vai līnijai pielāgotu vienmērīgi konisku virsmu.",
		keyMetadataName: "Atslēgas metadati",
		keyMetadataSnip: "Ignorē vai ievieto funkciju ķēdē rastra atslēgas metadatus.",
		keyMetadataDesc: "Šī funkcija ļauj ievietot vai ignorēt rastra atslēgas metadatus.<div><br/>Pamata metadatu informācija tiek izmantota, lai lietotnei atvieglotu apstrādi un atveidošanu, tostarp sniegtu noderīgu informāciju, piemēram, sensora nosaukumu, joslu nosaukumus vai ar attēliem saistīto mākoņu pārklājumu.</div>",
		shortestPathName: "Zemāko izmaksu ceļš",
		shortestPathSnip: "Veic izmaksu attāluma analīzi, izmantojot avota un galamērķa ievadi, kas tiek lietotas, lai noteiktu zemāko izmaksu ceļu no avota līdz galamērķim.",
		shortestPathDesc: "Zemāko izmaksu ceļa funkcija aprēķina zemāko izmaksu ceļu no avota līdz galamērķim. Zemāko uzkrāto izmaksu attālums tiek aprēķināts katram pikselim izmaksu virsmā līdz tuvākajam avotam. Tiek radīts izvades rastrs, kas reģistrē zemāko izmaksu ceļu vai ceļus no atlasītām atrašanās vietām līdz tuvākajiem avota pikseļiem, kas definēti uzkrāto izmaksu virsmā, attiecībā uz izmaksu attālumu.<div><br/>Katram zemāko izmaksu ceļam tiek piešķirta vērtība, kad tas tiek konstatēts. Izmaksu ceļa avota rastra pēdējam pikselim tiek piešķirta vērtība 1. Pirmajam ceļam tiek piešķirta vērtība 3, otrajam — 4 utt. Ja vairāki ceļi saplūst un atlikušais ceļš līdz avotam tiek veikts pa vienu maršrutu, segmentam, kurā abi ceļi ir saplūduši, tiek piešķirta vērtība 2. Ceļa kopīgajai daļai nevar piešķirt kāda ceļa vērtību, jo kopīgā daļa ir ietverta abos ceļos.</div>",
		lessThanEqualName: "Mazāks nekā vienāds",
		lessThanEqualSnip: "Divām ievadēm šūnu pa šūnai veic salīdzināšanas operāciju “Mazāks par vai vienāds ar”. Ja pirmais rastrs ir mazāks par vai vienāds ar otro rastru, šūnām atgriež vērtību 1. Ja tā nav, atgriež vērtību 0.",
		lessThanEqualDesc: "Funkcija divām ievadēm pikseli pa pikselim veic salīdzināšanas operāciju “Mazāks par vai vienāds ar”. Ja pirmais rastrs ir mazāks par vai vienāds ar otro rastru, tā pikseļiem atgriež vērtību 1. Ja pirmais rastrs nav mazāks par vai vienāds ar otro rastru, atgriež vērtību 0.",
		lessThanName: "Mazāks par",
		lessThanSnip: "Divām ievadēm šūnu pa šūnai veic salīdzināšanas operāciju “Mazāks par”. Ja pirmais rastrs ir mazāks par otro rastru, šūnām atgriež vērtību 1. Ja tā nav, atgriež vērtību 0.",
		lessThanDesc: "Funkcija divām ievadēm pikseli pa pikselim veic salīdzināšanas operāciju “Mazāks par”. Ja pirmais rastrs ir mazāks par otro rastru, tā pikseļiem atgriež vērtību 1. Ja pirmais rastrs nav mazāks par otro rastru, atgriež vērtību 0.",
		lnName: "Ln",
		lnSnip: "Aprēķina naturāllogaritmu (bāze e) no rastra šūnām.",
		lnDesc: "Funkcija “Ln” aprēķina naturāllogaritmu (bāze e) no katra rastra pikseļa.",
		log10Name: "Log10",
		log10Snip: "Aprēķina logaritmu pie bāzes 10 no rastra šūnām.",
		log10Desc: "Funkcija “Log10” aprēķina logaritmu pie bāzes 10 no katra rastra pikseļa.",
		log2Name: "Log2",
		log2Snip: "Aprēķina logaritmu pie bāzes 2 no rastra šūnām.",
		log2Desc: "Funkcija “Log2” aprēķina logaritmu pie bāzes 2 no katra rastra pikseļa.",
		lookupName: "Meklēšana",
		lookupSnip: "Izveido jaunu rastru, meklējot vērtības, kas atrodas citā laukā ievades rastra tabulā.",
		lookupDesc: "Funkcija izveido jaunu rastru, meklējot vērtības, kas atrodas citā laukā ievades rastra tabulā.",
		mlClassifyName: "Maksimālās iespējamības klasificēšana",
		mlClassifySnip: "Attēli tiek klasificēti pikseli pa pikselim. Jaukta satura pikseļi tiek piešķirti elementam, kuram pikselī ir vislielākā procentuālā daļa.",
		mlClassifyDesc: "Maksimālās iespējamības klasificēšanas funkcija ļauj veikt pārraudzītu klasificēšanu, izmantojot maksimālās iespējamības klasifikācijas algoritmu rastra datu kopai vai mozaīkas datu kopai. Šai funkcijai ir nepieciešams klasifikācijas paraksta fails.",
		maskName: "Maska",
		maskSnip: "Iestata vērtības, ko nevēlaties rādīt.",
		maskDesc: "Šī rastra funkcija iestata vērtības, ko nevēlaties rādīt rastrā. Izmantojot maskas funkciju, jūs norādīsiet vienu vai vairākas vērtības “NoData” vai derīgu pikseļu vērtību diapazonu. ",
		minusName: "Atņemt",
		minusSnip: "Atņem otrā ievades rastra vērtību no pirmā ievades rastra vērtības šūnu pa šūnai.",
		minusDesc: "Mīnusa funkcija atņem otrā ievades rastra vērtību no pirmā ievades rastra vērtības pikseli pa pikselim.",
		modName: "Mod",
		modSnip: "Atrod pirmā rastra atlikumu, šūnu pa šūnai dalot ar otro rastru.",
		modDesc: "Atlikuma funkcija atrod pirmā rastra atlikumu, pikseli pa pikselim dalot ar otro rastru. Ievades secība ir svarīga un ietekmē izvades rezultātu.",
		mosaicRastersName: "Mozaīkas rastri",
		mosaicRastersSnip: "Savieno vairākas rastru datu kopas, lai izveidotu vienu datu kopu.",
		mosaicRastersDesc: "Mozaīkas rastru funkcija izveido mozaīkas attēlu no vairākiem attēliem. Ja attēli pārklājas, ir vairāki veidi, kā varat izvēlēties rādāmos attēlus.",
		ndviColorizedName: "Krāsu NDVI",
		ndviColorizedSnip: "Izveido daudzjoslu datu kopu, kas attēlo veģetācijas stāvokli, balstoties uz atšķirībām sarkanajā un tuvajā infrasarkanajā joslā.",
		ndviColorizedDesc: "Funkcija “Krāsu NDVI” lieto funkciju NDVI ievades attēlam un pēc tam izmanto krāsu karti vai krāsu paleti, lai rādītu rezultātu.",
		ndviName: "NDVI",
		ndviSnip: "Aprēķina normalizētas starpības veģetācijas indeksu (NDVI — Normalized Difference Vegetation Index).",
		ndviDesc: "NDVI funkcija izveido daudzjoslu datu kopu, kas attēlo veģetācijas stāvokli, balstoties uz atšķirībām sarkanajā un tuvajā infrasarkanajā joslā.<div><br/>NDVI ir standartizēts indekss, kas ļauj ģenerēt attēlu, kurā tiek parādīts zaļums, dēvēts arī par relatīvo biomasu. Šis indekss izmanto vairākspektru rastra datu kopas divu joslu kontrastu: hlorofila pigmenta absorbciju sarkanajā joslā un augu materiālu augsto atstarošanu tuvajā infrasarkanajā (NIR) joslā. Ārkārtīgi zemas vai negatīvas NDVI vērtības parāda teritorijas bez veģetācijas, piemēram, mākoņus, ūdeni vai sniegu. Ļoti zemas vērtības parāda teritorijas bez veģetācijas vai ar nelielu veģetāciju, piemēram, betonu, klintis vai neauglīgu zemi. Vidējas vērtības parāda krūmājus un zālājus. Augstas vērtības parāda mežus un bagātīgu veģetāciju.</div>",
		negateName: "Noapaļot uz nulli",
		negateSnip: "Maina ievades rastra šūnu vērtību zīmi (reizina ar –1) šūnu pa šūnai.",
		negateDesc: "Zīmes maiņas funkcija maina ievades rastra pikseļa vērtības zīmi (reizina ar –1). ",
		nibbleName: "Atdarināšana",
		nibbleSnip: "Aizstāj rastra šūnas, kas atbilst maskai, ar tuvāko šūnu vērtībām.",
		nibbleDesc: "Globālā atdarināšanas funkcija ļauj atlasītām rastra teritorijām piešķirt tuvākās vienības vērtību. Tas ir noderīgi, rediģējot rastra vietas, kur dati var būt kļūdaini.",
		notEqualName: "Nav vienāds",
		notEqualSnip: "Divām ievadēm šūnu pa šūnai veic salīdzināšanas operāciju “Nav vienāds ar”. Ja pirmais rastrs ir vienāds ar otro rastru, šūnām atgriež vērtību 1. Ja tā nav, atgriež vērtību 0.",
		notEqualDesc: "Funkcija divām ievadēm pikseli pa pikselim veic salīdzināšanas operāciju “Nav vienāds ar”. Ja pirmais rastrs nav vienāds ar otro rastru, tā pikseļiem atgriež vērtību 1. Ja pirmais rastrs ir vienāds ar otro rastru, pikseļiem atgriež vērtību 0.",
		pansharpeningName: "Panhromatiskā asināšana",
		pansharpeningSnip: "Mākslīgi uzlabo daudzjoslu attēla telpisko izšķirtspēju, sapludinot to ar augstākas izšķirtspējas panhromatisku attēlu.",
		pansharpeningDesc: "Panhromatiskās asināšanas funkcija izmanto augstākas izšķirtspējas panhromatisku attēlu vai rastra joslu, lai sapludinātu to ar zemākas izšķirtspējas daudzjoslu rastru datu kopu un palielinātu daudzjoslu attēla telpisko izšķirtspēju.<div><br/>Panhromatiskās asināšanas mērķis ir izveidot augstākas kvalitātes vizuālo attēlu. Tā kā metodes maina daudzjoslu attēla radiometriju un spektrālās iezīmes, panhromatiski asinātus attēlus analītiskas tālizpētes nolūkiem jāizmanto ar piesardzību.</div>",
		pathAllocationName: "Ceļa attāluma sadalījums",
		pathAllocationSnip: "Aprēķina katras šūnas zemāko izmaksu avotu, balstoties uz zemākajām uzkrātajām izmaksām izmaksu virsmā un ņemot vērā virsmas attālumu un horizontālo un vertikālo izmaksu faktorus.",
		pathAllocationDesc: "Ceļa attāluma sadalījuma funkcija aprēķina katras šūnas tuvāko avotu, balstoties uz zemākajām uzkrātajām izmaksām izmaksu virsmā un ņemot vērā virsmas attālumu un horizontālo un vertikālo izmaksu faktorus.",
		pathBackLinkName: "Ceļa attāluma izsekošana",
		pathBackLinkSnip: "Definē šūnu, kura ir nākamā šūna zemāko uzkrāto izmaksu ceļā uz tuvāko avotu, ņemot vērā virsmas attālumu un horizontālo un vertikālo izmaksu faktorus.",
		pathBackLinkDesc: "Ceļa attāluma izsekošanas funkcija nosaka tās šūnas virzienu, kura ir nākamā šūna zemāko uzkrāto izmaksu ceļā uz tuvāko avotu, ņemot vērā virsmas attālumu un horizontālo un vertikālo izmaksu faktorus.",
		pathDistanceName: "Ceļa attālums",
		pathDistanceSnip: "Katrai šūnai aprēķina zemāko uzkrāto izmaksu attālumu no zemāko izmaksu avota vai līdz tam, ņemot vērā virsmas attālumu un horizontālo un vertikālo izmaksu faktorus.",
		pathDistanceDesc: "Ceļa attāluma funkcija katrai šūnai aprēķina zemāko uzkrātu izmaksu attālumu līdz tuvākajam avotam, ņemot vērā virsmas attālumu un horizontālo un vertikālo izmaksu faktorus.",
		plusName: "Saskaitīt",
		plusSnip: "Saskaita (summē) divu rastru vērtības šūnu pa šūnai.",
		plusDesc: "Plusa funkcija saskaita (summē) divu rastru vērtības pikseli pa pikselim.",
		powerName: "Pakāpe",
		powerSnip: "Kāpina rastra šūnu vērtības ar pakāpēm, kas ir vērtības citā rastrā.",
		powerDesc: "Kāpināšanas funkcija kāpina rastra pikseļu vērtības ar pakāpēm, kas ir vērtības citā rastrā.",
		radarCalibrationName: "Radara kalibrēšana",
		radarCalibrationSnip: "Konvertē RADARSAT-2 atstaroto starojumu.",
		radarCalibrationDesc: "Šo funkciju var izmantot, lai kalibrētu RADARSAT-2 attēlus mozaīkas datu kopā vai kā rastra produktu. Kalibrēšana tiek veikta radara attēliem, lai pikseļu vērtības patiesi attēlotu radara atstaroto starojumu.",
		rasterInfoName: "Rastra informācija",
		rasterInfoSnip: "Maina rastra parametrus, piemēram, bitu dziļumu, vērtību “NoData”, šūnu izmēru utt.",
		rasterInfoDesc: "Rastra informācija atver dialoglodziņu ar rastra datu kopas parametriem, piemēram, kolonnu un rindu skaitu, joslu skaitu, pikseļu tipu, apjomu un telpisko atskaiti. Varat rediģēt šos parametrus, atlasot rastra datu kopu, ko izmantot kā veidni. ",
		rasterizeAttributesName: "Atribūtu rastrēšana",
		rasterizeAttributesSnip: "Bagātina rastru, pievienojot joslas, kas atvasinātas no konkrētu atribūtu vērtībām, ārējas tabulas vai elementu servisa.",
		rasterizeAttributesDesc: "Atribūtu rastrēšanas funkcija bagātina rastru, pievienojot joslas, kas atvasinātas no konkrētu atribūtu vērtībām, ārējas tabulas vai elementu servisa. Pēc izvēles varat norādīt zonas rastru un saistīto zonas ID atribūtu, lai iespējotu uz reģionu balstītu meklēšanu.",
		rasterizeFeatureClassName: "Elementu rastrēšana",
		rasterizeFeatureClassSnip: "Konvertē elementus par rastru.",
		rasterizeFeatureClassDesc: "Šī funkcija konvertē laukuma, līnijas un punkta elementa klases datus par rastra slāni.<div><br/>Elementi ir piešķirtas pikseļu vērtības, pamatojoties uz elementu OBJECTID (noklusējums). Pēc izvēles pikseļu vērtības var būt balstītas uz lietotāju definētu vērtības lauku ievades elementa atribūtu tabulā.</div>",
		recastName: "Pārveidošana",
		recastSnip: "Maina funkciju ķēdes parametrus mozaīkas datu kopā vai attēlu pakalpojumā. Bieži tiek izmantota ar LAS datu kopām, lai izvairītos no atsevišķas mozaīkas datu kopas izveides dažādiem reljefa attēlojumiem.",
		recastDesc: "Pārveidošanas funkcija tiek izmantota, lai dinamiski mainītu funkcijas parametru, kas izmantots mozaīkas datus kopā vai attēlu pakalpojumā, fiziski nesaglabājot izmaiņas.",
		regionGroupName: "Reģionu grupa",
		regionGroupSnip: "Tiek reģistrēts, kuram saistītajam reģionam pieder katra izvades šūna. Katram reģionam tiek piešķirts unikāls numurs.",
		regionGroupDesc: "Globālā reģionu grupas funkcija reģistrē, kuram saistītajam reģionam pieder katra izvades šūna. Katram reģionam tiek piešķirts unikāls numurs.<div><br/>Pirmais skenētais reģions saņem vērtību 1, otrais — 2 utt., līdz visiem reģioniem ir piešķirta vērtība. Skenēšana tiek veikta no kreisās uz labo pusi un no augšas uz leju. Izvades zonām piešķirtās vērtības ir balstītas uz to, kad skenēšanas procesā tās tiek konstatētas.</div>",
		regionGrowName: "Reģionu veidošana",
		regionGrowSnip: "Veido reģionus no sākotnējiem punktiem.",
		regionGrowDesc: "Reģionu veidošanas funkcija grupē līdzās esošus pikseļus grupās atkarībā no sākotnējā punkta norādītā rādiusa. Pikseļu grupai vai objektam tiek piešķirta konkrēta aizpildījuma vērtība.",
		remapName: "Pārkartēšana",
		remapSnip: "Maina pikseļu vērtības, piešķirot jaunas vērtības pikseļu vērtību diapazoniem vai izmantojot ārēju tabulu.",
		remapDesc: "Pārkartēšanas funkcija ļauj mainīt vai pārklasificēt rastra datu pikseļu vērtības. To var paveikt, norādot pikseļu diapazonu, ko kartēt uz izvades pikseļu vērtību, vai izmantojot tabulu, lai pikseļu vērtības kartētu uz izvades pikseļu vērtību.",
		reprojectName: "Pārprojicēšana",
		reprojectSnip: "Maina projekciju rastra datu kopai, mozaīkas datu kopai vai rastra vienībai mozaīkas datu kopā. Tā var arī pārģenerēt datus, lai tiem būtu jauns šūnu izmērs, un definēt koordinātu sākuma punktu.",
		reprojectDesc: "Pārprojicēšanas funkcija maina rastra datu kopas, mozaīkas datu kopas vai mozaīkas datu kopas rastra vienības projekciju. Tā var arī pārģenerēt datus, lai tiem būtu jauns šūnu izmērs, un definēt koordinātu sākuma punktu.<div><br/>Pārprojicēšanas funkciju var izmantot, veidojot kešatmiņu no rastra vai mozaīkas datu kopas, kas nav nepieciešamajā projekcijā. Piemēram, izveidojot kešatmiņas attēlu pakalpojumu, ko lietotne var integrēt ar citiem kešatmiņas pakalpojumiem, ir svarīgi, lai visur projekcija būtu vienāda. Bieži vien tā ir tīmekļa Merkatora projekcija. Tā kā mozaīkas datu kopu nevar pārprojicēt, varat rīkoties divējādi: izveidot jaunu mozaīkas datu kopu ar nepieciešamo projekciju, atsaucoties uz jūsu mozaīkas datu kopu, vai mozaīkas datu kopas funkciju ķēdei pievienot pārprojicēšanas funkciju. Šo funkciju var izmantot arī rastra vienībai mozaīkas datu kopā. Izmantojot kešatmiņas rastra funkciju, ieteicams pārprojicēšanas funkciju ievietot tā, lai kešatmiņa tiktu izveidots jaunajā projekcijā. Rastra vienības mozaīkas datu kopā var ievietot kešatmiņā, ja apstrāde ir intensīva un jūs mēģināt publicēt ātrdarbīgu attēlu pakalpojumu, neievietojot kešatmiņā visu attēlu pakalpojumu.</div>",
		resampleName: "Pārģenerēšana",
		resampleSnip: "Maina rastra šūnu izmēru.",
		resampleDesc: "Pārģenerēšanas funkcija maina šūnu izmērus, pārģenerēšanas tipu vai abus parametrus.<div><br/>Pārģenerēšanas funkciju ieteicams izmantot tikai konkrētām aprēķināšanas prasībām, piemēram, ja aprēķināt vēju vai pašreizējo intensitāti-virzienu, kam nepieciešama pārģenerēšana no avota izšķirtspējas.</div>",
		roundDownName: "Noapaļot uz leju",
		roundDownSnip: "Katrai rastra šūnai atgriež nākamā mazākā veselā skaitļa vērtību, kas izteikta kā peldošā punkta vērtība.",
		roundDownDesc: "Funkcija noapaļošanai uz leju katram rastra pikselim atgriež nākamo mazāko veselo skaitli kā peldošā punkta vērtību.",
		roundUpName: "Noapaļot uz augšu",
		roundUpSnip: "Katrai rastra šūnai atgriež nākamā lielākā veselā skaitļa vērtību, kas izteikta kā peldošā punkta vērtība.",
		roundUpDesc: "Funkcija noapaļošanai uz augšu katram rastra pikselim atgriež nākamo lielāko veselo skaitli kā peldošā punkta vērtību.",
		segmentMeanShiftName: "Segmenta vidējā pārbīde",
		segmentMeanShiftSnip: "Segmentos grupē līdzās esošus pikseļus ar līdzīgām spektrālām iezīmēm.",
		segmentMeanShiftDesc: "Šī funkcija attēlos identificē objektus, elementus vai segmentus, grupējot līdzās esošus pikseļus, kuriem ir līdzīgas spektrālās un telpiskās iezīmes. Varat kontrolēt telpiskās un spektrālās līdzināšanas apmēru, lai palīdzētu atvasināt interesējošus elementus.",
		s1RadiometricCalibrationName: "Sentinel-1 radiometriskā kalibrēšana",
		s1RadiometricCalibrationSnip: "Veic dažāda veida radiometrisko kalibrēšanu Sentinel-1 datiem.",
		s1RadiometricCalibrationDesc: "Šī rastra funkcija veic trīs dažādas kalibrēšanas Sentinel 1 datu kopām, tostarp “beta nought” un “gamma”, un izvada kalibrēto datu kopu. SAR kalibrēšanas mērķis ir sniegt attēlus, kuros pikseļu vērtības var tieši saistīt ar radara ainas atstaroto starojumu. Nekalibrētus SAR attēlus var izmantot kvalitatīviem pētījumiem, savukārt kalibrēti SAR attēli ir būtiski nepieciešami SAR datu kvantitatīviem pētījumiem.<div><br/>Tipiskā SAR datu apstrādē, kurā tiek parādīti 1. līmeņa attēli, nav iekļautas radiometriskās korekcijas un saglabājas ievērojamas radiometriskās nobīdes. Tādēļ SAR attēliem jālieto radiometriskā korekcija, lai attēlu pikseļu vērtības patiesi attēlotu atstarojošās virsmas radara atstaroto starojumu. Radiometriskā korekcija ir nepieciešama arī tādu SAR attēlu salīdzināšanai, kuri iegūti ar dažādiem sensoriem vai iegūti no viena sensora dažādos laikos, dažādos režīmos, vai apstrādāti ar dažādiem rīkiem.</div>",
		s1ThermalNoiseRemovalName: "Sentinel-1 termālo traucējumu noņemšana",
		s1ThermalNoiseRemovalSnip: "Noņem termālos traucējumus no Sentinel-1 datiem.",
		s1ThermalNoiseRemovalDesc: "Sentinel-1 Level-1 Single Look Complex (SLC) produktiem un Level-1 Ground Range Detection (GRD) produktiem, kas vēl nav koriģēti, var lietot termālo traucējumu korekciju. Operators var arī noņemt šo korekciju, balstoties uz produkta anotācijām, lai atkārtoti pievienotu traucējumu signālu, kas tika noņemts, radot oriģinālo produktu. Produktu anotācijas tiks attiecīgi atjauninātas, lai varētu atkārtoti piemērot korekcijas. ",
		setNullName: "Nulles iestatīšana",
		setNullSnip: "Nulles iestatīšana funkcija norādītajām šūnām iestata vērtību “NoData”, balstoties uz konkrētiem kritērijiem. Atgriež vērtību “NoData”, ja nosacījuma izvērtējuma rezultāts ir patiess, vai atgriež cita rastra vērtību, ja nosacījuma izvērtējuma rezultāts ir aplams.",
		setNullDesc: "Nulles iestatīšanas funkcija norādītajiem pikseļiem iestata vērtību “NoData”, balstoties uz konkrētiem kritērijiem. Atgriež vērtību “NoData”, ja nosacījuma izvērtējuma rezultāts ir patiess (1), vai atgriež vērtības no rastra, kas atbilst aplamam izteikumam, ja nosacījuma izvērtējuma rezultāts ir aplams (0). Šo kritēriju norāda loģiskās matemātiskās funkcijas izvade, kas būs ievades rastrā.",
		shadedReliefName: "Noēnots reljefs",
		shadedReliefSnip: "Rada daudzjoslu, krāsu kodējuma virsmas 3D attēlojumu, attēla tonējumā ņemot vērā saules relatīvo pozīciju.",
		shadedReliefDesc: "Noēnota reljefa funkcija rada krāsainu reljefa 3D attēlojumu, sapludinot attēlus no augstuma kodējuma un reljefa ēnojuma metodes. Šī funkcija izmanto augstuma un azimuta parametrus, lai noteiktu saules pozīciju.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Aprēķina rastra šūnu hiperbolisko sinusu.",
		sinHDesc: "Funkcija aprēķina rastra pikseļu hiperbolisko sinusu.",
		sinName: "Sin",
		sinSnip: "Aprēķina rastra šūnu sinusu.",
		sinDesc: "Funkcija aprēķina rastra pikseļu sinusu.",
		slopeName: "Slīpums",
		slopeSnip: "Aprēķina viena pikseļa vērtības izmaiņas attiecībā pret līdzās esošo pikseļu vērtībām.",
		slopeDesc: "Šī rastra funkcija aprēķina slīpumu, kas ir augstuma maiņas līmenis katrai digitālā augstuma modeļa (DEM — digital elevation model) šūnai. Tas ir DEM pirmās kārtas atvasinājums.<div><br/>Šī funkcija izmanto paātrinātu atan() funkciju. Tā ir sešas reizes ātrāka, un tuvinājuma kļūda vienmēr ir mazāka par 0,3 grādiem.</div>",
		speckleName: "Plankumi",
		speckleSnip: "Nodrošina filtrus, lai noņemtu traucējumus sintezētas apertūras radaru datu kopās.",
		speckleDesc: "Plankumi ir augstfrekvences traucējumi radara datos. Sintezētas apertūras radara (SAR — synthetic aperture radar) sistēmu veidotie attēli ir pakļauti plankumu efektiem izkliedēto signālu apstrādes dēļ un elektromagnētisko viļņu interferences dēļ, ko izkliedē virsmas vai objekti. Šī plankumu funkcija filtrē plankumaino radara datu kopu un izlīdzina traucējumus, attēlā saglabājot malas vai asus elementus.",
		spectralConversionName: "Spektrālā konvertēšana",
		spectralConversionSnip: "Lieto matricu daudzjoslu attēlam.",
		spectralConversionDesc: "Spektrālās konvertēšanas funkcija lieto matricu daudzjoslu attēlam, lai ietekmētu izvades krāsu vērtības.<div><br/>Daži sensori neiegūst zilās joslas, jo signāla un traucējumu attiecība ir pārāk zema. To var izmantot, piemēram, lai konvertētu nepareizu krāsu infrasarkano attēlu uz pseidodabisku krāsu attēlu.</div>",
		squareRootName: "Kvadrātsakne",
		squareRootSnip: "Aprēķina rastra šūnu vērtību kvadrātsakni.",
		squareRootDesc: "Kvadrātsaknes funkcija aprēķina kvadrātsakni no rastra pikseļu vērtībām.",
		squareName: "Kvadrāts",
		squareSnip: "Aprēķina rastra šūnu vērtību kvadrātu.",
		squareDesc: "Kvadrāta funkcija aprēķina rastra pikseļu vērtību kvadrātu.",
		statisticsHistogramName: "Statistika un histogramma",
		statisticsHistogramSnip: "Definējiet vai saistiet statistiku un histogrammu.",
		statisticsHistogramDesc: "Statistikas un histogrammas funkcijas tiek izmantotas, lai definētu rastra statistiku un histogrammu. Varat ievietot šo funkciju ķēdes beigās, lai raksturotu rastra funkcijas veidnes (RFT — raster function template) statistiku un histogrammu. To var izmantot, lai kontrolētu apstrādes rezultāta noklusējuma attēlojumu, jo īpaši, definējot funkciju ķēdi ar daudzām funkcijām.<div><br/>Varat definēt statistiku, ievadot vērtības vai importējot tās no rastra datu kopas vai XML faila. Histogrammas var definēt, tikai importējot failu.</div>",
		statisticsName: "Statistika",
		statisticsSnip: "Aprēķina fokālo statistiku katram attēla pikselim, balstoties uz definētu fokālo apvidu.",
		statisticsDesc: "Statistikas funkcija aprēķina fokālo statistiku katram attēla pikselim, balstoties uz definēto fokālo apvidu.<div><br/>Statistikas funkciju var izmantot, lai attēlā ievadītu nomestas līnijas. Nomestas līnijas bieži rodas, ja sensora problēmu dēļ netiek apkopoti dati. Piemēram, šāda situācija ir radusies sensoram Landsat 7's Enhanced Thematic Mapper Plus (ETM+). Trūkstošie dati apgrūtina analīzi un attēlu skatīšanu. Ja attēli jāizmanto analīzei, ir maz risinājumu. Ja ir kāds attēls, kas pārklājas, to var izmantot trūkstošā satura vietā. To pašu var darīt, ja attēls tiek izmantots vizualizācijai. Taču ne vienmēr ir pieejams papildu attēls trūkstošā satura aizstāšanai, tādēļ tas ir jāatvasina no esošajiem datiem.</div>",
		streamLinkName: "Straumju saistīšana",
		streamLinkSnip: "Piešķir unikālas vērtības rastra lineārā tīkla daļām starp krustpunktiem.",
		streamLinkDesc: "Globālā straumju saistīšanas funkcija piešķir unikālas vērtības rastra lineārā tīkla daļām starp krustpunktiem.<div><br/>Saites ir straumju kanāla daļas, kas savieno divas secīgas satekas, sateku un izteku vai sateku un ūdensšķirtni. Hidroloģijā šos straumes segmentus dēvē par posmiem. Sateka ir saistīta ar izteku un palīdz noteikt ūdensšķirtnes vai sateces apakšbaseina robežas.</div>",
		stretchName: "Izstiept",
		stretchSnip: "Uzlabo attēlu, koriģējot parādīto vērtību diapazonu. Tā nemaina pikseļu faktiskās vērtības. Ja pikseļa vērtība ir ārpus norādītā diapazona, tā tiks rādīta kā minimālā vai maksimālā vērtība.",
		stretchDesc: "Stiepšanas funkcija uzlabo attēlu, mainot tādus parametrus kā spilgtums, kontrasts un gamma ar dažādu izstiepšanas tipu palīdzību. Šī funkcija izmanto rastru statistiku mozaīkas datu kopā, tādēļ, ja izmantojat šo funkciju, gādājiet, lai statistika būtu aprēķināta.<div><br/>Izstiepšanas veids norāda histogrammas izstiepšanu, kas tiks lietota rastriem, lai uzlabotu to izskatu. Izstiepšana uzlabo datu izskatu, sadalot pikseļu vērtības histogrammā no minimālajām un maksimālajām vērtībām, kas definētas pēc to bitu dziļuma. </div>",
		swathName: "Platums",
		swathSnip: "Interpolē no neregulāriem režģiem vai platuma datiem.",
		swathDesc: "Dažas netCDF vai HDF datu kopas glabā ģeogrāfiskā novietojuma informāciju kā neregulāri izkārtotus masīvus. Pievienojot šīs datu kopas mozaīkas datu kopai, platuma funkcija neregulāri izkārtotos datus pārģenerē, lai visi pikseļi būtu vienāda izmēra un kvadrātveida formas.<div><br/>Mozaīkas datu kopai pievienojot mainīgos no netCDF vai HDF, tā automātiski pārbaudīs, vai dati ir izkārtoti regulāri. Ja tā nav, automātiski tiek lietota platuma funkcija, lai neregulāro rastru konvertētu par punktiem un pēc tam par regulāri izkārtotu rastru. Varat mainīt interpolācijas metodi un šūnu izmēru, kas tiek izmantoti rastra platuma funkcijā. Regulāri izkārtotiem rastru datiem interpolēšana netiks lietota, dati tiks nolasīti bez izmaiņām.</div>",
		tanHName: "TanH",
		tanHSnip: "Aprēķina rastra šūnu hiperbolisko tangensu.",
		tanHDesc: "Funkcija aprēķina rastra pikseļu hiperbolisko tangensu.",
		tanName: "Tan",
		tanSnip: "Aprēķina rastra šūnu tangensu.",
		tanDesc: "Funkcija aprēķina rastra pikseļu tangensu. ",
		tasseledCapName: "Cepure ar pušķīti (Kauts-Tomass)",
		tasseledCapSnip: "Aprēķina veģetācijas, mitruma un spilgtuma līmeņus. Šī tehnika balstās uz koeficientiem, kas sensoram īpaši jāaprēķina.",
		tasseledCapDesc: "“Cepures ar pušķīti” (Kauta-Tomasa) transformācijas mērķis ir analizēt un kartēt veģetācijas fenomenoloģiju un urbānās attīstības izmaiņas, ko konstatē dažādas satelītu sensoru sistēmas. To dēvē par “cepures ar pušķīti” transformāciju datu vizuālā sadalījuma dēļ. Transformācija sniedz pamatojumu tam, ka modeļi, kas konstatēti Landsat MSS datos par lauksaimniecības zemi, ir kultūraugu dzīvescikla funkcijas. Pēc būtības, graudaugiem augot no sēklām līdz gatavībai, notiek atstarojuma pastiprināšanās tuvāk infrasarkanajam spektram un pavājināšanās sarkanās krāsas atstarojumā pēc augsnes krāsas<div><br/>Šī maiņa tagad tiek izmantota ne tikai graudaugu uzraudzībai, bet arī veģetācijas analizēšanai un kartēšanai, kā arī dažādiem citiem nolūkiem, piemēram, mežkopībai, industriālās veģetācijas pārvaldībai, ekosistēmu kartēšanai un pārvaldībai, oglekļa piesaistes un izcelsmes uzskaitei un pārraudzībai, pilsētvides attīstībai utt. Tagad tā atbalsta ne tikai Landsat MSS, bet arī citas populāras satelītu sistēmas, piemēram, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 un RapidEye multispektrālos sensorus.</div>",
		timesName: "Laiki",
		timesSnip: "Reizina divu rastru vērtības šūnu pa šūnai.",
		timesDesc: "Reizināšanas funkcija reizina divu rastru vērtības pikseli pa pikselim.",
		transposeBitsName: "Bitu transponēšana",
		transposeBitsSnip: "Izpako ievades pikseļa bitus un kartē tos uz konkrētiem bitiem izvades pikselī. Šīs funkcijas mērķis ir apstrādāt bitus no vairākām ievadēm, piemēram, Landsat 8 kvalitātes joslu produktiem.",
		transposeBitsDesc: "Bitu transponēšanas funkcija izpako ievades pikseļa bitus un kartē tos uz konkrētiem bitiem izvades pikselī. Šīs funkcijas mērķis ir apstrādāt bitus no vairākām ievadēm, piemēram, Landsat 8 kvalitātes joslu produktiem.",
		unitConversionName: "Mērvienību konvertēšana",
		unitConversionSnip: "Maina vērtības no vienas mērvienības uz citu.",
		unitConversionDesc: "Šī funkcija konvertē pikseļus no vienas mērvienības citā. Tā atbalsta attāluma, ātruma un temperatūras konvertēšanu.",
		vectorFieldName: "Vektora lauks",
		vectorFieldSnip: "Parāda datu kopas ar intensitāti (u) un virzienu (v) kā bultiņām; intensitāti raksturo bultiņas izmērs, savukārt virzienu — leņķis.",
		vectorFieldDesc: "Vektora lauka funkcija tiek lietota, lai apvienotu un konvertētu divus rastrus par divu joslu rastru ar datu tipu “intensitāte-virziens” vai “U-V”.<div><br/>U vērtību dažreiz dēvē par zonālo ātrumu, un V vērtību — par meridionālo ātrumu.</div>",
		viewshed2Name: "Redzamības lauks",
		viewshed2Snip: "Nosaka rastra virsmas atrašanās vietas, kas ir redzamas novērošanas elementu kopai, izmantojot ģeodēziskas metodes.",
		viewshed2Desc: "Redzamības lauka funkcija nosaka rastra virsmas atrašanās vietas, kas ir redzamas novērošanas elementu kopai, izmantojot ģeodēziskas metodes.<div><br/>Katra pikseļa vidusdaļas redzamība tiek noteikta, izmantojot skata līnijas pārbaudi starp mērķi un katru novērotāju. Ja novērotājs var redzēt mērķi pikseļa centrā, pikselis tiek uzskatīts par redzamu. Nosakot redzamību, šis rīks vienmēr ņem vērā zemes izliekumu.</div>",
		watershedName: "Ūdensšķirtne",
		watershedSnip: "Nosaka baseina teritoriju virs rastra šūnu kopas.",
		watershedDesc: "Globālā ūdensšķirtnes funkcija nosaka baseina teritoriju virs rastra pikseļi kopas. Ūdensšķirtnes tiek noteiktas no plūsmas virziena rastra, kas nosaka katra pikseļa plūsmas virzienu.",
		weightedOverlayName: "Svērts pārklājums",
		weightedOverlaySnip: "Pārklāj vairākus rastrus, izmantojot vienotu mērskalu, un iestata to svarīgumu atkarībā no nozīmīguma.",
		weightedOverlayDesc: "Šī funkcija ļauj pārklāt vairākus rastrus, izmantojot vienotu mērskalu, un iestata to svarīgumu atkarībā no nozīmīguma.",
		weightedSumName: "Svērtā summa",
		weightedSumSnip: "Nosaka rastru svarīgumu un saskaita tos šūnu pa šūnai.",
		weightedSumDesc: "Svērtās summas funkcija ļauj pārklāt vairākus rastrus, reizinot katru ar tā svarīguma vērtību un summējot tos.",
		windchillName: "Vēja temperatūra",
		windchillSnip: "Apvieno gaisa temperatūru un vēja ātrumu, lai aprēķinātu vēja temperatūras koeficientu.",
		windchillDesc: "Vēja temperatūras funkcija ir noderīga, lai noteiktu bīstamus vēja apstākļus, kas atkarībā no iedarbības ilguma var izraisīt apsaldējumus vai hipotermiju. Vēja temperatūra ir veids, kā izmērīt aukstuma sajūtu, ņemot vērā vēju aukstā temperatūrā. Jo lielāks vēja ātrums, jo ātrāk ķermenis zaudēs siltumu un sajutīs lielāku aukstumu.",
		zonalRemapName: "Zonu pārkartēšana",
		zonalRemapSnip: "Pārkartējiet rastra pikseļus, balstoties uz citā rastrā definētām zonām un no zonām atkarīgu vērtību kartēšanas, kas definēta tabulā.",
		zonalRemapDesc: "Šī funkcija ļauj pārkartēt rastra pikseļus, balstoties uz citā rastrā definētām zonām un no zonām atkarīgu vērtību kartēšanas, kas definēta tabulā.",
		zonalStatisticsName: "Zonālā statistika",
		zonalStatisticsSnip: "Aprēķina rastra vērtību statistiku citas datu kopas zonās.",
		zonalStatisticsDesc: "Šī funkcija aprēķina rastra vērtību statistiku citas datu kopas zonās. Zona ir visas ievades teritorijas ar vienādu vērtību. Teritorijām nav jābūt nepārtrauktām. Ja zona un vērtību ievade ir rastri ar vienādu izšķirtspēju, tie tiks izmantoti tieši. Ja izšķirtspējas ir atšķirīgas, tiek veikta iekšēja pārģenerēšana, lai pirms zonēšanas saskaņotu izšķirtspējas.",
		flowLengthName: "Plūsmas garums",
		flowLengthSnip: "Tiek aprēķināts straumes un pretstraumes attālums vai svērtais attālums kopā ar plūsmas ceļu katrai šūnai.",
		flowLengthDesc: "Šī ir globāla rastra funkcija. Šī funkcija dod iespēju izveidot straumes un pretstraumes attāluma vai svērtā attāluma rastra slāni kopā ar plūsmas ceļu katrai šūnai.<div><br/>Galvenais plūsmas garuma funkcijas pielietojums ir garākā plūsmas ceļa garuma aprēķināšana konkrētajā baseinā. Šis mērījums bieži vien tiek lietots, lai aprēķinātu ūdens koncentrācijas laiku baseinā. To veic, izmantojot pretstraumes opciju. Šo funkciju var izmantot, lai izveidotu arī hipotētiskas lietus un ūdens aizplūdes attāluma-teritorijas diagrammas, izmantojot svara rastru un lejupvērstās kustības pretestību.</div>",
		streamOrderName: "Plūsmu secība",
		streamOrderSnip: "Tiek piešķirta numurēta secību rastra segmentiem, kas attēlo lineāra tīkla atzarus",
		streamOrderDesc: "Šī ir globāla rastra funkcija. Ar šo funkciju tiek izveidots rastra slānis, kas sanumurē rastra segmentus, kas attēlo lineāra tīkla atzarus.<div><br/>Straumju secības izvade būs kvalitatīvāka, ja ievades straumes rastra slānis un ievades plūsmas virziena rastra slānis ir veidots no tās pašas virsmas. Ja straumes rastrs ir veidots no rasterizētas straumju datu kopas, izvades informāciju, iespējams, nevarēs izmantot, jo, skatot atsevišķas šūnas, virziens neatbildīs straumes šūnu novietojumam. Plūsmas akumulēšanas funkcijas rezultātus var izmantot, lai izveidotu straumes rastra tīklu, lietojot sliekšņa vērtību, lai atlasītu šūnas ar augtu akumulēto plūsmu. Piemēram, šūnas, kurām ir vairāk nekā 100 ieplūstošo šūnu, tiek izmantotas, lai definētu straumes tīklu. Izmantojiet nosacījuma vai nulles iestatīšanas funkciju, lai izveidotu straumes tīkla rastru, kurā plūsmas akumulēšanas vērtība, kas ir 100 un augstāka, tiek parādīta kā viens, bet pārējās tiek attēlotas fonā (nav datu). Iegūto straumes tīklu var izmantot straumju secības funkcijai. Šī funkcija atbalsta tikai D8 ievadi plūsmas virziena rastra slānī. D8 plūsmas virzienus var izveidot, izmantojot plūsmas virziena funkciju, un palaist ar noklusējuma plūsmas virziena tipu D8.</div>",
		snapPourPointName: "Lietusgāžu punktu piespraušana",
		snapPourPointSnip: "Lietusgāžu punkti tiek piesprausti šūnai, kurā ir augstākā akumulētā plūsma norādītajā attālumā.",
		snapPourPointDesc: "Šī ir globāla rastra funkcija. Šī funkcija piesprauž lietusgāžu punktus šūnai, kurā ir augstākā akumulētā plūsma noteiktajā attālumā.<div><br/>Lietusgāžu punktu piestiprināšanas funkcija tiek izmantota, lai atlasītu punktus ar augstu akumulēto plūsmu, kad tiek parādīti ūdenstilpes baseini, izmantojot ūdensšķirtnes funkciju. Lietusgāžu punktu piespraušanas funkcija piespraušanas attālumā ap norādītajiem lietusgāžu punktiem meklēs šūnu, kurā ir augstākā akumulētā plūsma, un pārvietos lietusgāžu punktu uz attiecīgo vietu. Izvade ir veselu skaitļu rastra slānis, kad sākotnējais lietusgāzes punkta novietojums ir piesprausts atrašanās vietai, kurā akumulētā plūsma ir augstāka.</div>",
		sinkName: "Ieplaka",
		sinkSnip: "Tiek izveidots rastrs, kas identificē visas ieplakas vai iekšējās ūdenstilpes",
		sinkDesc: "Šī ir globāla rastra funkcija. Ar šo funkciju tiek izveidots rastra slānis, kas identificē visas ieplakas vai iekšējās ūdenstilpes. Ieplaka ir šūna vai telpiski saistītu šūnu kopa ar plūsmas virzienu, kuram nevar piešķirt kādu no astoņām derīgajām vērtībām plūsmas virziena rastrā. Tā notiek, ja visas tuvāk esošās šūnas atrodas augstāk nekā apstrādājamā šūna vai ja divas šūnas ieplūst viena otrā, izveidojot divu šūnu cilpu.<div><br/>Ieplakas funkcija atbalsta tikai D8 ievadi plūsmas virziena rastra slānī. D8 plūsmas virzienus var izveidot, izmantojot plūsmas virziena funkciju, un palaist — ar noklusējuma plūsmas virziena tipu D8. Ieplakas funkcijas izvade ir vesels rastrs, kurā katrai ieplakai ir piešķirta unikāla vērtība. Šīs unikālās vērtības ir diapazonā no viens līdz kopējam ieplaku skaitam. Piemēram, ja kopējais ieplaku skaits būtu 1000, unikālās vērtības būtu robežās no 1 līdz 1000.</div>",
		aggregateName: "Apkopot",
		aggregateSnip: "Ģenerē rastra samazinātas izšķirtspējas versiju.",
		aggregateDesc: "Funkcija Apkopot pārģenerē ievades rastru uz vājāku izšķirtspēju, pamatojoties uz norādīto apkopošanas stratēģiju. Katrā izvades šūnā ir šo ievades šūnu ietvertā summa, minimums, maksimums, vidējā vērtība un mediānas vērtība.<div><br/>Varat norādīt koeficientu, ar kuru reizināt ievades rastra šūnas izmēru. Piemēram, šūnas koeficienta vērtība 3 izvadē uzrādīs trīs reizes lielāku šūnas izmēru nekā ievades rastrā. Jūs varat norādīt, kā apstrādāt izvades apjomu, ja rindu un aiļu skaits ievadē nav precīzs šūnu koeficienta reizinājums. Pēc noklusējuma augšējās un labās puses robežas tiks paplašinātas, lai ietvertu lielāko telpisko apjomu salīdzinājumā ar ievades rastru, lai tādējādi panāktu visu ievades šūnu apstrādi. Augšējās un labās puses robežas var samazināt, lai ietvertu mazāku apjomu, un apstrādāto rindu un aiļu skaits tad būs precīzs šūnu koeficienta reizinājums. Jūs varat norādīt, kā apkopošanas aprēķinā jāapstrādā NoData šūnas. Noklusējuma mehānisms ir šāds: ievades NoData šūnas, kas atbilst lielākas šūnas telpiskajam apjomam izvades rastrā, tiks ignorētas, nosakot konkrētās izvades šūnas vērtību. Varat arī norādīt, ka, ja izvades šūnas telpiskajā apjomā ir pat tikai viena ievades NoData šūna, šī šūna būs NoData izvades rastrā.</div>",
		ccdcName: "CCDC analīze",
		ccdcSnip: "Izvērtē izmaiņas pikseļu vērtībās laika gaitā, izmantojot nepārtrauktas izmaiņu noteikšanas un klasificēšanas algoritmu (Continuous Change Detection and Classification, CCDC) un ģenerē modeļa rezultātus.",
		ccdcDesc: "Funkcija CCDC analīze izvērtē izmaiņas pikseļu vērtībās laika gaitā, izmantojot nepārtrauktas izmaiņu noteikšanas un klasificēšanas algoritmu (CCDC), un ģenerē daudzdimensiju rastru, kas ietver modeļa rezultātus. Šī darbība tiek atbalstīta tikai saistībā ar funkciju Noteikt izmaiņas, izmantojot izmaiņu analīzi rastra funkciju veidnē. Lai izveidotu rastra izvadi, savienojiet funkciju CCDC analīze ar funkciju Noteikt izmaiņas, izmantojot izmaiņu analīzi, saglabājiet kā rastra funkcijas veidni un palaidiet funkciju Rastra analīze ar šo funkcijas veidni.<div><br/>Šī funkcija izmanto nepārtrauktas izmaiņu noteikšanas un klasificēšanas algoritmu (CCDC), lai izvērtētu izmaiņas attēlu grupas pikseļu vērtībās laika gaitā. Optisko attēlu vai attēlu atvasinājumu laika sērijās (piemēram, NDVI) pikseļu vērtības var svārstīties dažādu iemeslu dēļ: 1. Sezonālas izmaiņas — pikseļu vērtības izmaiņas atspoguļo izmaiņas veģetācijā temperatūras un nokrišņu sezonālās mainības dēļ. Ziemeļu puslodē, piemēram, mēs prognozējam, ka vasarā būs lielāks zaļās veģetācijas blīvums salīdzinājumā ar ziemas apstākļiem; 2. Pakāpeniskas izmaiņas — pikseļu vērtības izmaiņas atspoguļo veģetācijas vai virszemes ūdeņu tendences klimata pārmaiņu vai ilgtermiņa zemes apsaimniekošanas darbību dēļ. Piemēram, teritorijas ar sausu augsni var palielināties ilglaicīga nokrišņu trūkuma dēļ; un 3. Pēkšņas izmaiņas — pikseļu vērtības izmaiņas atspoguļo izmaiņas, kas rodas pēkšņi — mežu izciršanas, pilsētvides attīstības, dabisku katastrofu un citu faktoru dēļ. CCDC algoritms nosaka visus trīs veidus, ar primāro nolūku identificēt pēkšņas izmaiņas. Saskaņota regresija un tendenču modeļi tiek pielāgoti datiem, lai izvērtētu sezonālas un pakāpeniskas izmaiņas, un pēkšņas atkāpes no tendenču modeļiem norāda pēkšņas izmaiņas.<div><br/>CCDC algoritms sākotnēji tika paredzēts Landsat TM, Landsat ETM+ un Landsat OLI virsmas atstarošanās vai spilgtuma temperatūras datu apstrādei. Tomēr funkcija Noteikt izmaiņas, izmantojot izmaiņu analīzi saistībā ar šo funkciju, noteiks jebkādu atbalstīto sensoru radīto daudzjoslu attēlu izmaiņas, kā arī vienas joslas attēlu atvasinājumus, piemēram, joslu indeksus. Jūs, piemēram, varat veikt nepārtrauktu izmaiņu noteikšanu rastrā Normalizēt atšķirību veģetācijas indeksu (Normalize Difference Vegetation Index, NDVI), jo pēkšņas NDVI izmaiņas var norādīt mežu laukuma mazināšanos.</div>",
		computeChangeName: "Aprēķināt izmaiņas",
		computeChangeSnip: "Aprēķina atšķirību starp divām kategorijas vai nepārtraukta rastra datu kopām.",
		computeChangeDesc: "Funkciju Aprēķināt izmaiņas var izmantot, lai uzskaitītu atšķirības starp diviem klasificētiem rastriem zemes pārklājuma izmaiņu analīzei, vai arī šo funkciju var lietot, lai izpētītu izmaiņas starp diviem vienas joslas nepārtrauktiem rastriem, piemēram, augstumu, temperatūru, lapotnes pārsegumu u.c.",
		detectChangeName: "Noteikt izmaiņas, izmantojot izmaiņu analīzi",
		detectChangeSnip: "Ģenerē rastra slāni, izmantojot izvades izmaiņu analīzes rastru, kurā ir pikseļu izmaiņu informācija.",
		detectChangeDesc: "<div>Funkcija Noteikt izmaiņas, izmantojot izmaiņu analīzi lieto izvades izmaiņu analīzes rastru, lai ģenerētu rastra slāni, kurā ir pikseļu izmaiņu datuma informācija. Izmaiņu analīzes rastrs ir jāizveido, izmantojot rīku Analizēt izmaiņas, lietojot CCDC vai rīku Analizēt izmaiņas, lietojot LandTrendr, funkciju CCDC analīzes rastrs vai funkciju LandTrendr analīzes rastrs.</div><br><div>Šo rastra funkciju var apvienot ar funkciju CCDC analīzes rastrs vai LandTrendr analīzes rastrs rastra funkcijas veidnē. Lai iegūtu pastāvīgu rastra izvadi, pievienojiet funkcijas CCDC analīze vai LandTrendr analīze izvadi funkcijai Noteikt izmaiņas, lietojot izmaiņu analīzes funkciju, saglabājiet kā rastra funkcijas veidni un palaidiet rastra analīzi ar veidni.</div><br><div>Parametrs <strong>Mainīt veidu</strong> norāda ģenerēto informāciju. Informāciju iegūst no izmaiņu analīzes rastra. Palaižot šo funkciju izvadei no CCDC funkcijas/rīka, var izvēlēties kādu no šīm opcijām:</div><ul><li><strong>Jaunāko izmaiņu laiks</strong>-- nesenākais datums un laiks, kad pikselis tika atzīmēts kā mainīts.</li><li><strong>Senāko izmaiņu laiks</strong>-- senākais datums un laiks, kad pikselis tika atzīmēts kā mainīts.</li><li><strong>Lielāko izmaiņu laiks</strong>-- datums un laiks, kurā aprēķinātās izmaiņas bija visnozīmīgākās pikselim.</li><li> <strong>Izmaiņu skaits</strong>-- Kopējais pikseļu izmaiņu reižu skaits.</li></ul><div>Palaižot šo funkciju uz izvadi no LandTrendr funkcijas/rīka, ir pieejamas šādas papildu iespējas:</div><ul><li><strong>Ilgāko izmaiņu laiks</strong>-- Datums, kad pikselis tika atzīmēts kā mainīts ilgākā izmaiņu perioda sākumā vai beigās.</li><li><strong>Īsāko izmaiņu laiks</strong>-- Datums, kad pikselis tika atzīmēts kā mainīts īsākā izmaiņu perioda sākumā vai beigās.</li><li><strong>Ātrāko izmaiņu laiks</strong>-- Datums, kad pikselis tika atzīmēts, kā mainīts ātrākā izmaiņu perioda sākumā vai beigās.</li><li><strong>Lēnāko izmaiņu laiks</strong>-- Datums, kad pikselis tika atzīmēts, kā mainīts lēnākā izmaiņu perioda sākumā vai beigās.</li></ul><div>Izvades rastrs ir vairāku joslu rastrs, kurā katrā joslā ir izmaiņu informācija atkarībā no izvēlētā izmaiņu veida un maksimālā norādīto izmaiņu skaita. Piemēram: ja <strong>Izmaiņu veida</strong> iestatījums ir <strong>Agrāko izmaiņu laiks</strong> un iespēja <strong>Maksimālais izmaiņu reižu skaits</strong> ir iestatīta uz 2, funkcija aprēķina divus agrākos datumus, kad izmaiņas notikušas katrai pikseļa laika sērijai. Rezultāts ir rastrs, kurā pirmā josla satur agrāko izmaiņu datumus katram pikselim, un otrā josla satur otru agrāko izmaiņu datumus katram pikselim.</div><br><div>Lietojot šo funkciju izvadei no LandTrendr rīkiem, var izvēlēties, vai izgūt datumu, kas iezīmē izmaiņu sākumu, vai izmaiņu beigas, izmantojot parametru <strong>Segmenta datums</strong>. Piemēram: lai izprastu, kā sākušās pēdējās izmaiņas laika sērijā, iestatiet opciju <strong>Mainīt veidu</strong> uz <strong>Jaunāko izmaiņu laiks</strong> un <strong>Segmenta datums</strong> uz <strong>Segmenta sākums</strong>.</div><br><div>Izmantojiet šādus filtrēšanas parametrus, lai iegūtu precīzākus izmaiņu datumus no izmaiņu analīzes rastra:</div><ul><li><strong>Filtrēt pēc gada</strong>-- identificējiet izmaiņas, kas notikušas konkrētā laika periodā, piemēram, ja meklējat izmaiņas, kas notikušas ainavā piecu sausuma gadu laikā.</li><li><strong>Filtrēt pēc ilguma</strong>-- identificējiet izmaiņas, kas notikušas konkrētā gadu diapazonā, piemēram, ja meklējat tikai pēkšņas izmaiņas, kas notikušas viena vai divu gadu laikā. Varat aprēķināt jūs interesējošo periodu, izmantojot formulu <strong>beigu gads - sākuma gads +1</strong>. Tiks iekļauti laika sērijas pārtraukumi.</li><li><strong>Filtrēt pēc apjoma</strong>-- identificējiet noteikta mēroga izmaiņas, piemēram, ja tiek meklētas tikai lielas izmaiņas veģetācijas indeksā NDVI. Apjoms ir absolūtā vērtība, tāpēc minimālā un maksimālā vērtība nevar būt negatīva. Lai norādītu virziena maiņu, izmantojiet parametru <strong>Mainīt virzienu</strong>.</li></ul>",
		distanceAccumulationName: "Attāluma akumulācija",
		distanceAccumulationSnip: "Aprēķina akumulēto attālumu no katras šūnas līdz avotiem, nodrošinot taisnas līnijas attālumu, izmaksu attālumu, reālo virsmas attālumu, kā arī vertikālo un horizontālo izmaksu koeficientus.",
		distanceAccumulationDesc: "Funkcija Attāluma akumulācija aprēķina attālumu līdz katrai atrašanās vietai izpētes apgabalā — līdz tuvākajam vai mazāko izmaksu avotam. Ja ievadei ir pieejami tikai avoti, līdz katrai atrašanās vietai izpētes apgabalā aprēķina taisnās līnijas attālumu. Ja ievadē izmanto gan avotus, gan šķēršļus, funkcija Attāluma akumulācija aprēķina taisnās līnijas attālumu ap šķēršļiem. Gan avota, gan robežas rastra fona vērtībai jābūt NoData, turpretim avoti un šķēršļi tiek parādīti ar derīgām šūnu vērtībām. Derīgas vērtības ietver nulli. <div><br/>Kad ievadē ir pieejams virsmas rastrs, tiks aprēķināts faktiskais virsmas attālums starp šūnām. Lai veiktu izmaksu analīzi, izmantojot funkciju Attāluma akumulācija, ir nepieciešama izmaksu virsma. Ja ir nodrošināta izmaksu virsma, rezultāts ir akumulēto izmaksu attāluma rastrs. Ja ir pieejami horizontālie un vertikālie koeficienti, virzieni tiek apcerēti pēc izmaksu uzkrājuma. Ir iespējams izmantot četrus avota raksturlielumus. Šos raksturlielumus, kas var būt vai nu avots, vai pārvietotāji no avota, kontrolē ar īpašiem parametriem: 1. Sākotnējā akumulācija:  iestata sākotnējās izmaksas, pirms kustības sākuma. 2. Maksimālā akumulācija:  norāda, cik daudz izmaksu avots var akumulēt pirms sava ierobežojuma sasniegšanas. 3. Reizinātājs, kas jāpiemēro izmaksām:  norāda pārvietošanās režīmu vai apjomu avotā. 4. Pārvietošanās virziens:  norāda, vai pārvietotājs sāks kustību avotā un tad pārvietosies uz atrašanās vietām ārpus tā, vai sāks atrašanās vietās ārpus avota un pēc tam pārvietosies atpakaļ uz avotu.<div><br/>Pēc noklusējuma, funkcijas Attāluma akumulācija rezultāts ir viena josla, kas ir attāluma akumulācijas rastrs. Taču var tikt izveidota arī otra josla: atpakaļvirziena josla. Šī josla katra izpētes apgabala atrašanās vietā norāda, kādā virzienā pārvietoties, lai nokļūtu pie vismazāko izmaksu avota. Lai noteiktu optimālus ceļus izpētes apgabalā, būs nepieciešamas abas joslas. Lai ģenerētu ceļu, vispirms izmantojiet funkciju Izvilkt joslu, lai izvilktu attāluma akumulācijas rastru un atpakaļvirziena rastru. Izmantojiet šos slāņus kā ievadi funkcijā Izmaksu ceļš. Funkcijā lietojiet attāluma akumulācijas rastru kā ievadi Izmaksu attāluma rastrs un atpakaļvirziena rastru kā ievadi Izmaksu izsekošanas rastrs.</div>",
		distanceAllocationName: "Attāluma sadalījums",
		distanceAllocationSnip: "Aprēķināt attālumu no katras šūnas līdz norādītajiem avotiem, pamatojoties uz taisnas līnijas attālumu, izmaksu attālumu, reālo virsmas attālumu, kā arī vertikālo un horizontālo izmaksu koeficientiem.",
		distanceAllocationDesc: "Funkcija Attāluma sadalījums aprēķina, kuram avotam tiks piešķirta katra atrašanās vieta izpētes apgabalā. Ja ievadei ir pieejami tikai avoti, atrašanās vietas tiks piešķirtas, izmantojot taisnas līnijas attālumu līdz tuvākajam avotam. Ja ievadē izmanto gan avotus, gan šķēršļus, funkcija Attāluma sadalījums aprēķina taisnās līnijas attālumu ap šķēršļiem, lai noteiktu, kuram avotam tiks piešķirta atrašanās vieta. Gan avota, gan robežas rastra fona vērtībai jābūt NoData, turpretim avoti un šķēršļi tiek parādīti ar derīgām šūnu vērtībām. Derīgas vērtības ietver nulli.<div><br/>Lai veiktu izmaksu analīzi, izmantojot funkciju Attāluma sadalījumu, ir nepieciešama izmaksu virsma. Ja ir pieejama izmaksu virsma, rezultāts ir sadalījuma rastrs, pamatojoties uz izmaksu uzkrājumu nevis uz taisnas līnijas attālumu. Ja ir pieejami horizontālie un vertikālie koeficienti, virzieni tiek apcerēti pēc izmaksu uzkrājuma. Kad ievadē ir pieejams virsmas rastrs, tiks aprēķināts faktiskais aptvertais virsmas attālums, kad tiek noteikta piešķire jeb sadalījums. Ir iespējams izmantot četrus avota raksturlielumus. Šos raksturlielumus, kas var būt vai nu avots, vai pārvietotāji no avota, kontrolē ar īpašiem parametriem: 1. Sākotnējā akumulācija:  iestata sākotnējās izmaksas, pirms kustības sākuma. 2. Maksimālā akumulācija:  norāda, cik daudz izmaksu avots var akumulēt pirms sava ierobežojuma sasniegšanas. 3. Reizinātājs, kas jāpiemēro izmaksām:  norāda pārvietošanās režīmu vai apjomu avotā. 4. Pārvietošanās virziens:  norāda, vai pārvietotājs sāks kustību avotā un tad pārvietosies uz atrašanās vietām ārpus tā, vai sāks atrašanās vietās ārpus avota un pēc tam pārvietosies atpakaļ uz avotu.<div><br/>Pēc noklusējuma, funkcijas Attāluma sadalījums rezultāts ir viena josla, kas ir attāluma sadalījuma rastrs. Atzīmējot Būla opciju Ģenerēt avota rindu un aili kā papildu joslas izvadē, tiks iegūts daudzjoslu rastrs, kurā ir trīs joslas. Pirmā josla ir attāluma piešķires josla, otrā josla ietver rindas rādītāju, bet trešā josla ietver ailes rādītāju. Šie rādītāji norāda tās avota šūnas novietojumu, kura atrodas vismazākajā uzkrāto izmaksu attālumā. Avota rindas rādītāju un avota ailes rādītājus var izmantot kopā, lai veiktu intensitātes kartēšanu. Ja aplūkojat jebkuru atrašanās vietu savā izpētes apgabalā otrajā un trešajā joslā, varēsit noskaidrot vismazāko izmaksu avota rindu un aili šai atrašanās vietai.</div>",
		eucBackDirectionName: "Eiklīda atpakaļvirziens",
		eucBackDirectionSnip: "Aprēķina katrai šūnai virzienu grādos uz blakus esošo šūnu pa īsāko ceļu, kas ved atpakaļ uz tuvāko avotu, izvairoties no šķēršļiem.",
		eucBackDirectionDesc: "Izmantojot funkciju Eiklīda atpakaļvirziens, var iegūt nepārtrauktu peldošā punkta rastru, kas parāda atpakaļvirzienu grādos uz tuvāko avotu, vienlaikus izvairoties no šķēršļiem, ja tādi ir.<div><br/>Funkcijas Eiklīda atpakaļvirziens ievades ir avots, uz kuru tiks aprēķināts virziens. Papildu ievade ir rastrs, kas parāda šķēršļus izpētes apgabalā. Gan avota, gan šķēršļu rastram fona vērtībai jābūt NoData, turpretim avoti un šķēršļi tiek parādīti ar derīgām vērtībām. Derīgas vērtības ietver nulli. Pēc noklusējuma aprēķins tiks veikts līdz apvienotam avotu un šķēršļu daudzumam, pievienojot divas rindas un ailes. Ja analīze ir nepieciešama tikai norādītajā attālumā no avotiem, var izmantot parametru Maksimālais attālums. Funkcija Eiklīda atpakaļvirziens aprēķināšanā atbalsta gan plaknes metodi, gan ģeodēzisko metodi. Plaknes metodes aprēķināšana tiks veikta projicētajā plakanajā plaknē, izmantojot 2D Dekarta koordinātu sistēmu. Ģeodēziskās metodes aprēķināšana tiks veikta elipsē, kas nozīmē, ka neatkarīgi no ievades vai izvades projekcijas, rezultāts nemainīsies.<div><br/>Funkcijas Eiklīda atpakaļvirziens rezultātu var izmantot apvienojumā ar funkcijas Eiklīda attālums rezultātu, lai noteiktu īsākos atpakaļceļus uz avotu no atrašanās vietām izpētes apgabalā. Gan funkcijas Eiklīda atpakaļvirziens rezultātu, gan funkcijas Eiklīda attālums rezultātu lieto funkcijā Izmaksu ceļš ar galamērķiem īsāko ceļu ģenerēšanai.</div>",
		expandName: "Izvērst",
		expandSnip: "Paplašina rastra atlasītās zonas par norādīto šūnu skaitu.",
		expandDesc: "Izmantojot vispārējo funkciju Paplašināt, varat vispārināt vai vienkāršot rastrus, palielinot konkrētas zonas. Varēsit arī vadīt vispārinājuma apjomu.<div><br/>Atlasītās zonas tiks palielinātas, iekļaujot tajās daļas no citām zonām. Konceptuāli atlasītās zonu vērtības var skatīt kā priekšplāna zonas, kamēr citas vērtības paliek fona zonas. Priekšplāna zonas var paplašināt fona zonās.<div><br/>Vispārinājuma apjomu var vadīt ar parametru Šūnu skaits. Pēc noklusējuma šī vērtība ir 1, kas nozīmē, ka atlasītās zonas tiks paplašinātas par apjomu, kas atbilst vienas šūnas lielumam. Lai palielinātu vispārinājuma līmeni, varat norādīt lielāku šī parametra vērtību. Konceptuāli tas ir tā, it kā rīks tiek palaists norādītu reižu skaitu, iepriekšējās palaišanas rezultātus ievadot nākamajā iterācijā.</div>",
		trendAnalysisName: "Ģenerēt tendenci",
		trendAnalysisSnip: "Novērtē katra pikseļa tendenci dimensijas ietvaros vienam vai vairākiem daudzdimensiju rastra mainīgajiem.",
		trendAnalysisDesc: "<div>Šo funkciju var izmantot, lai pielāgotu datus lineārai, harmoniskai vai polinoma tendenču līnijai, vai arī to var izmantot tendenču noteikšanai, izmantojot Manna-Kendela vai Sezonas-Kendela testu.</div><br><div>Ar šo funkciju ģenerētais izvades tendences rastrs tiek izmantots kā ievade funkcijā <strong>Prognozēt, izmantojot tendenci</strong>.</div><br><div>Manna-Kendela un Sezonas-Kendela testus izmanto, lai noteiktu, vai datos ir monotona tendence. Tie ir neparametriski, kas nozīmē, ka tie neparedz konkrētu datu sadalījumu. Manna-Kendela testā netiek ņemta vērā sērijveida korelācija vai sezonālais iespaids. Ja dati ir sezonāli, piemērotāks ir Sezonas-Kendela tests.</div><br><div>Ja rīku izmanto, lai veiktu Manna-Kendela vai Sezonas-Kendela testu, izvade ir šāds piecu joslu rastrs:</div><ul><li>1. josla = Sena līkne</li><li>2. josla = p vērtība</li><li>3. josla = Manna-Kendela rezultāts (S)</li><li>4. josla = S dispersija</li><li>4. josla = S dispersija</li><li>5. josla = Z rezultāts</li></ul><div>Rezultātus no Manna-Kendela vai Sezonas-Kendela testa var izmantot, lai noteiktu, kuriem pikseļiem daudzdimensiju laika sērijās ir statistiski nozīmīga tendence. Šo informāciju var izmantot kopā ar lineāro, harmonisko vai polinoma tendenču analīzi, lai iegūtu nozīmīgas tendences jūsu laika sērijās. Jūs varat izveidot masku, kura ietver pikseļus ar nozīmīgām p-vērtībām, lietot masku daudzdimensiju rastram un izmantot šo maskēto daudzdimensiju rastru kā ievadi rīkā, lai veiktu lineāro, harmonisko vai polinoma tendenču analīzi.</div><br><div>Pastāv trīs tendenču līnijas opcijas, lai pielāgotu tendenci mainīgajām vērtībām dimensijā: lineārajā, polinoma un harmoniskajā.</div><br><div>Lineāro tendenču analīzes rezultāts ir trīsjoslu rastrs, kā norādīts turpmāk:</div><ul><li>1. josla = Slope</li><li>2. josla = Intercept</li><li>3. josla = Root Mean Square Error, RMSE vai kļūda ap vispiemērotākās atbilstības rindu.</li></ul><div>Polinoma tendenču analīzei joslu skaits izvadē ir atkarīgs no polinoma secības. Otrās pakāpes polinoma pielāgošana rada šādu četru joslu rastru:</div><ul><li>1. josla = Polynomial_2</li><li>2. josla = Polynomial_1</li><li>3. josla = Polynomial_0</li><li>3. josla = RMSE</li></ul><div>Trešās pakāpes polinoma pielāgošana rada šādu piecu joslu rastru:</div><ul><li>1. josla = Polynomial_3</li><li>2. josla = Polynomial_2</li><li>3. josla = Polynomial_1</li><li>4. josla = Polynomial_0</li><li>5. josla = RMSE</li></ul><div>Harmonisku tendenču analīzei joslu skaits izvadē ir atkarīgs no harmoniskās frekvences. Ja frekvence ir iestatīta uz 1, izvade ir šāds piecu joslu rastrs:</div><ul><li>1. josla = Slope</li><li>2. josla = Intercept</li><li>3. josla = Harmonic_sin1</li><li>4. josla = Harmonic_cos1</li><li>5. josla = RMSE</li></ul><div>Ja frekvence ir iestatīta uz 2, izvade ir šāds septiņu joslu rastrs:</div><ul><li>1. josla = Slope</li><li>2. josla = Intercept</li><li>3. josla = Harmonic_sin1</li><li>4. josla = Harmonic_cos1</li><li>5. josla = Harmonic_sin2</li><li>6. josla = Harmonic_cos2</li><li>7. josla = RMSE</li></ul><div>Parametrs <strong>Cikla ilgums</strong> harmonisko tendenču analīzei tiek izmantots, lai norādītu to ciklu skaitu un ilgumu, kurus sagaidāt redzēt datos dienas vai gada laikā. Piemēram, ja paredzat, ka dati vienā gadā izies divus variāciju ciklus, cikla ilgums būs 182,5 dienas vai 0,5 gadi. Ja temperatūras dati tiek ievākti ik pēc trim stundām un ir viens variāciju cikls dienā, cikla ilgums ir viena diena.</div><br><div>Harmonisko tendenču analīzes biežuma parametru <strong>Biežums</strong> izmanto, lai aprakstītu harmonisku modeli, atbilstoši datiem. Ja biežums ir iestatīts uz 1, modeļa pielāgošanai izmanto lineārās un pirmās pakāpes harmoniskās līknes kombināciju. Ja biežuma iestatījums ir 2, datu pielāgošanai izmanto lineārās, pirmās pakāpes harmoniskās līknes un otrās pakāpes harmoniskās līknes kombināciju. Ja biežuma iestatījums ir 3, datu modelēšanai papildu tiks izmantota trešās pakāpes harmoniskā līkne utt.</div><br><div>Kā papildu rezultātus var ģenerēt modeļa atbilstības statistiku. Saknes vidējo kvadrāta kļūdu (RMSE), R kvadrātu un tendences līknes p-vērtību var aprēķināt un simbolizēt. Simbolizējiet izvades tendences rastra slāni, izmantojot <strong>RGB</strong> simboliku, un norādiet statistiku kā sarkano, zaļo un zilo joslu.</div><br>",
		spectralUnmixingName: "Lineārā spektrālā nesajaukšana",
		spectralUnmixingSnip: "Veic pakārtoto pikseļu klasifikāciju un aprēķina dažāda zemes seguma frakcionālo daudzveidību atsevišķiem pikseļiem.",
		spectralUnmixingDesc: "Funkcija Lineārā spektrālā nesajaukšana aprēķina frakcionālo pārklājumu atsevišķiem pikseļiem, kuros ir vairāki zemes seguma veidi. Funkcija ģenerē daudzjoslu slāni, kurā katra josla atbilst katras zemes seguma klases frakcionālajai daudzveidībai. Piemēram: jūs varat izmantot šo funkciju, lai veiktu zemes seguma klasifikāciju vairāku spektru attēlā un identificētu veģetāciju ar fotosintēzi, neapstrādātu augsni un mirušu veģetāciju vai veģetāciju bez fotosintēzes.<div><br/>Izvades vairāku joslu rastra secība atbilst ievades spektra profila secībai. Klašu skaits nedrīkst pārsniegt joslu skaitu ievades rastrā. Piemēram: jūs nevarat izgūt informāciju par vairāk nekā 8 klasēm no 8 joslu rastra.</div>",
		multidimensionalFilterName: "Daudzdimensiju filtrs",
		interpolateRasterByDimensionFunctionName: "Interpolēt rastru pēc dimensijas",
		interpolateRasterByDimensionFunctionSnip: "Interpolē daudzdimensiju rastru pie noteiktām dimensiju vērtībām, izmantojot blakus esošos slāņus.",
		interpolateRasterByDimensionFunctionDesc: "<p>Šī funkcija ļauj novērtēt pikseļu vērtības nedefinētam dimensijas slānim daudzdimensiju rastrā. Piemēram, ja jums ir datu kopa, kurā ir okeāna temperatūra virsmas līmenī un 100 metru zem jūras līmeņa, un jūs vēlaties noskaidrot temperatūru 50 metru zem jūras līmeņa, varat izmantot šo funkciju, lai iegūtu izvērtējumu šajā dziļumā, lietojot dimensijas definīciju “Pēc vērtībām”.</p><p>Ikmēneša datu kopu var arī samazināt par ikdienas datu kopu, izmantojot dimensijas “Pēc intervāla” definīciju un norādot parametra “Solis” vērtību kā 1 un parametra “Vienība” vērtību kā “Dienas”.</p><p>Izmantojiet dimensijas “Pēc mērķa scenārija” definīciju, lai aprēķinātu mērķa scenārija vērtību.</p>",
		multidimensionalFilterSnip: "Izveido rastra slāni no daudzdimensiju rastra datu kopas vai daudzdimensiju rastra slāņa, sadalot datus atbilstoši norādītajiem mainīgajiem un dimensijām.",
		multidimensionalFilterDesc: "Funkcija Daudzdimensiju filtrs izveido daudzdimensiju rastra slāni, filtrējot un izgūstot no daudzdimensiju rastra mainīgo apakškopu. Piemēram: jums ir daudzdimensiju datu kopa, kurā ir 30 gadu laikā apkopoti ikmēneša nokrišņu dati, un jūs vēlaties izgūt tikai datus par katru janvāri, lai redzētu, kā ir mainījies nokrišņu daudzums šajā mēnesī.<div><br/>Izmantojiet parametru Dimensijas apraksts, lai izdalītu dimensijas, lietojot intervālu, vērtību vai vērtību diapazonu. Piemēram: ja jums ir 10 gadu dati par okeāna sāļumu, kas tiek apkopoti ik mēnesi un dziļumā ik pa diviem metriem līdz 500 metriem, iespējams, ka varēsit izmantot dažādas dimensijas apraksta opcijas zemāk minētajām situācijām. 1. situācija: izgūstiet sāļuma datus par janvāri 10 gadu periodā. Veiciet izvēli pēc vērtībām, iestatiet dimensiju uz StdTime un iestatiet vērtības uz janvāri. 2. situācija: izdaliet sāļuma datus dziļuma diapazonā no 0 līdz 150 metriem. Veiciet izvēli pēc diapazoniem, iestatiet dimensiju uz StdZ un iestatiet minimālo vērtību uz -150 un maksimālo vērtību uz 0. 3. situācija: izgūstiet sāļuma datus par katra janvāra pirmajām 10 dienām 10 gadu periodā. Veiciet izvēli pēc iterācijas, iestatiet dimensiju uz StdTime, iestatiet pirmās iterācijas sākumu un pirmās iterācijas beigas uz attiecīgo iterācijas perioda sākumu un beigām, iestatiet darbību uz 1 un mērvienības uz Gadi.</div>",
		multidimensionalRasterName: "Daudzdimensiju rastrs",
		multidimensionalRasterSnip: "Pievieno daudzdimensiju datus kartei kā daudzdimensiju rastra slāni.",
		multidimensionalRasterDesc: "Funkcija Daudzdimensiju rastrs pievieno daudzdimensiju datus kartei kā daudzdimensiju rastra slāni. Šī funkcija ir noderīga, kad veicat rastra analīzes darbplūsmas, izmantojot funkciju ķēdi.<div><br/>Starp atbalstītajām daudzdimensiju rastra datu kopām ir netCDF, GRIB, HDF un Esri CRF. Tiek atbalstītas arī mozaīkas datu kopas.</div>",
		optimalPathAsRasterName: "Optimāls ceļš kā rastrs",
		optimalPathAsRasterSnip: "Aprēķina zemāko izmaksu ceļu no avota līdz galamērķim.",
		optimalPathAsRasterDesc: "Šī globālā funkcija rada izvades rastru, kas reģistrē optimālo ceļu vai ceļus no atlasītām atrašanās vietām līdz tuvākajai avota šūnai, kas definēta uzkrāto izmaksu virsmā, attiecībā uz izmaksu attālumu.<div><br/>Parasti ir jāizmanto viena vai vairākas svērto izmaksu funkcijas (Attāluma akumulācija vai Attāluma sadalījums), pirms lietot funkciju Optimāls ceļš kā rastrs, lai izveidotu ievades attāluma akumulācijas un atpakaļvirziena rastrus. Šie ir obligāti izmantojami ievades rastra slāņi funkcijai Optimāls ceļš. Izvades optimālā ceļa vērtības atspoguļo ceļu skaitu konkrētajā atrašanās vietā. Daudzos gadījumos ceļi ved pa to pašu maršrutu, atstājot avotu, un tad virzās uz dažādiem galamērķiem. Piemēram: vērtība 1 norāda, ka konkrētajā atrašanās vietā ir tikai viens optimāls ceļš, turpretim vērtība 5 nozīmē, ka šajā atrašanās vietā ir pieci optimāli ceļi, kas virzās caur šo šūnu izpētes apgabalā.<div><br/>Ievades galamērķa datiem jābūt rastra slānim. Galamērķa šūnu komplektu veido visas šūnas ievades rastrā, kurām ir derīgas vērtības. Šūnas, kurām ir NoData vērtības, nav iekļautas komplektā. Nulles vērtība tiek uzskatīta par leģitīmu galamērķi. Galamērķa rastru var izveidot, izmantojot izgūšanas rīkus. Ja ir pieejams galamērķis vai avota elementi, varat pārvērst tos rastrā, lietojot funkciju Elementu rastrēšana. Izmantojiet attāluma akumulācijas vai atpakaļvirziena rastru kā rastra ievadi rastrēšanas funkcijai. Tādējādi elements tiks rastrēts, lietojot to pašu šūnas izmēru, apjomu un telpisko atsauci kāda ir citiem rastriem, kas tiek izmantoti funkcijai Optimāls ceļš kā rastrs. Funkciju Optimāls ceļš kā rastrs var lietot arī, lai atvasinātu mazākās pretestības ceļu pa digitālo augstuma modeli (Digital Elevation Model, DEM). Šādā gadījumā izmantojiet DEM ievades attāluma akumulācijas rastram un izvadi no funkcijas Plūsmas virziens atpakaļvirziena rastram.</div>",
		trendName: "Prognozēt, izmantojot tendenci",
		trendSnip: "Aprēķina prognozēto daudzdimensiju rastra slāni, izmantojot funkcijas Ģenerēt tendenci vai ģeoapstrādes rīka Ģenerēt tendences rastru izvades tendences rastru.",
		trendDesc: "Funkcija Prognozēt, izmantojot tendenci aprēķina prognozēto daudzdimensiju rastra slāni, izmantojot funkcijas Ģenerēt tendenci vai ģeoapstrādes rīka Ģenerēt tendences rastru izvades tendences rastru.",
		rasterCollectionName: "Apstrādāt rastra kolekciju",
		rasterCollectionSnip: "Apstrādā katru sadaļu daudzdimensiju rastrā vai katru vienumu mozaīkas rastrā. Šī funkcija var arī apkopot vairākas sadaļas vienā.",
		rasterCollectionDesc: "Funkcija Apstrādāt rastra kolekciju apstrādā katru sadaļu daudzdimensiju rastrā vai katru vienumu mozaīkas rastrā. Šī funkcija var arī apkopot vairākas sadaļas vienā.<div><br/>Šī funkcija apstrādā katru sadaļu daudzdimensiju rastrā vai mozaīkas rastrā, izmantojot rastra funkciju veidni. Šī funkcija atbalsta šādas opcijas: 1. Norādiet rastra funkciju veidni vienuma funkcijai. Piemēram: jums ir pieejama mozaīkas datu kopa, kurā ir 20 gadu laikā apkopoti Landsat attēli un jūs vēlaties aprēķināt NDVI katram skatam laika sērijās. Izmantojot vienuma funkciju, norādiet rastra funkciju veidni, kurā ir NDVI rastra funkcija. 2. Norādiet rastra funkciju veidni apkopošanas funkcijai. Piemēram: jums ir pieejams daudzdimensiju rastrs, kurā ir 10 gadu laikā apkopoti temperatūras dati un jūs vēlaties aprēķināt maksimālo katra gada temperatūru. Lietojot apkopošanas funkciju, norādiet rastra funkciju veidni, kurā ir funkcija Šūnu statistika, un darbība ir iestatīta stāvoklī Maksimāla. Sadaļā Apkopošanas apraksts, iestatiet dimensiju uz StdTime, iestatiet veidu uz Intervāla atslēgvārds un iestatiet Atslēgvārda intervālu uz Katru gadu. Lūdzu, ņemiet vērā: ja ievades mozaīkas datu kopa nav daudzdimensiju kopa, apkopošanas funkcija neievēros apkopošanas aprakstu. Apkopošanas funkcija apkopos visus vienumus vai katru grupu vienā tikai tad, ja vienumi ir aprakstīti apkopošanas funkciju veidnē. Plašāku informāciju par grupu izmantošanu mozaīkas datu kopā skatiet sadaļā Mozaīkas datu kopas vienumu izmantošana rastra funkciju veidnē. 3. Norādiet rastra funkciju veidni apstrādes funkcijai. Funkciju vai funkciju ķēdi šajā veidnē lieto, lai parādītu jauno apstrādāto rastru. Piemēram: norādiet rastra funkciju veidni, kurā ir funkcija Krāsu karte, lai mainītu apstrādātā rastra slāņa parādīšanas veidu. Lūdzu, ņemiet vērā: ja ievade ir daudzdimensiju rastrs, apstrādes funkcija tiks lietota pašreiz parādītajai sadaļai. Ja ievade ir mozaīkas slānis vai mozaīkas datu kopa, apstrādes funkcija tiek lietota mozaīkas rastram, izmantojot pirmo metodi, lai novērstu pārklājumus. 3. Norādiet veidnes jebkurai šo trīs funkciju kombinācijai. Piemēram: jums ir pieejama datu kopa, kurā ir laika sērijas Landsat attēli un jūs vēlaties ģenerēt maksimālā NDVI salikto attēlu. Izmantojot vienuma funkciju, norādiet rastra funkciju veidni, kurā ir NDVI rastra funkcija. Lietojot apkopošanas funkciju, norādiet rastra funkciju veidni, kurā ir funkcija Šūnu statistika, un darbība ir iestatīta stāvoklī Maksimāla. Izmantojot apstrādes funkciju, norādiet rastra funkciju veidni, kurā ir funkcija Krāsu karte. Lūdzu, ņemiet vērā, ka funkciju apstrādes secība seko ievades parametru secībai. Piemēram: vienuma funkcija tiks apstrādāta vispirms.</div>",
		randomName: "Nejaušā secībā",
		randomSnip: "Izveido rastru ar nejaušām pikseļu vērtībām, kas ņemtas no pseidonejaušas secības sadalījuma. Tiek atbalstīti vairāki sadalījumi un nejaušu skaitļu ģeneratori.",
		randomDesc: "Funkcija Nejaušā secībā izveido rastru ar nejaušām pikseļu vērtībām, ko var izmantot rastra funkciju veidnēs vai mozaīkas datu kopās.<div><br/>Kamēr daudzas funkcijas darbojas vienā vai vairākos ievades rastros, funkcijai Nejaušā secībā nav nepieciešams ievades rastrs. Tas nozīmē, ka funkcija darbojas vairāk kā rastra datu kopa nekā funkcija, tādēļ ir jāpievērš uzmanība, pievienojot to funkciju ķēdei vai noņemot no tās.</div>",
		shrinkName: "Sašaurināt",
		shrinkSnip: "Sašaurina atlasītās zonas par norādīto šūnu skaitu, aizstājot tās ar šūnu, kas ir visbiežāk sastopama tās apkārtnē.",
		shrinkDesc: "Izmantojot vispārējo sašaurināšanas funkciju, varat vispārināt vai vienkāršot rastrus, samazinot konkrētas zonas. Varēsit arī vadīt vispārinājuma apjomu.<div><br/>Atlasītās zonas tiks sašaurinātas, vai to izmērs samazināts, kad šūnas no tuvumā esošajā zonām tiks paplašinātas atlasītajās zonās. Konceptuāli atlasītās zonu vērtības var skatīt kā priekšplāna zonas, kamēr citas vērtības paliek fona zonas. Šūnas priekšplāna zonās var aizstāt ar šūnām fona zonās. Var arī aizstāt plānās saliņas zonas iekšienē, kuras var skatīt kā koplietošanas robežas ar zonu.<div><br/>Vispārinājuma apjomu var vadīt ar parametru Šūnu skaits. Pēc noklusējuma šī vērtība ir 1, kas nozīmē, ka atlasītās zonas tiks sašaurinātas ar apjomu, kas atbilst vienas šūnas lielumam. Lai palielinātu vispārinājuma līmeni, varat norādīt lielāku šī parametra vērtību. Konceptuāli tas ir tā, it kā rīks tiek palaists norādītu reižu skaitu, iepriekšējās palaišanas rezultātus ievadot nākamajā iterācijā.</div>",
		trendToRGBName: "No tendences par RGB",
		trendToRGBSnip: "Pārvērš tendences rastru ar krāsu karti par trīs joslu (sarkans, zaļš un zils) rastru.",
		trendToRGBDesc: "Funkcija No tendences par RGB pārvērš tendences rastru ar krāsu karti par trīs joslu (sarkans, zaļš un zils) rastru. Tendences rastrs tiek ģenerēts no funkcijas Ģenerēt tendences rastru vai funkcijas CCDC analīzes rastrs.<div><br/>Šī funkcija ir noderīga modeļa koeficienta datu vizualizēšanai no funkcijas Ģenerēt tendences rastru vai funkcijas CCDC analīze. Abas funkcijas prognozē tendences, mainot pikseļu vērtības, taču funkciju rezultātus ir grūti interpretēt tieši.<div><br/>Tāpat kā, izmantojot daudzas rastra funkcijas, jums vajadzēs lietot dinamiskās diapazona pielāgošanas funkciju (Dynamic Range Adjustment, DRA), lai labāk parādītu šīs funkcijas rezultātus.</div>",
		landTrendrName: "LandTrendr analīze",
		landTrendrSnip: "Izvērtē pikseļu vērtību izmaiņas laika gaitā, izmantojot uz Landsat balstītu traucējumu un atjaunošanās tendenču noteikšanu (LandTrendr), un ģenerē izmaiņu analīzes rastru, kas satur modeļa rezultātus.",
		landTrendrDesc: "Šo rastra funkciju var izmantot tikai kā ievadi funkcijai Noteikt izmaiņas, izmantojot analīzes rastru. Lai ģenerētu rastra izvadi, rastra funkcijas veidnē pievienojiet funkciju “LandTrendr analīze” funkcijai “Noteikt izmaiņas, izmantojot analīzes rastru” un izmantojiet veidni kā ievadi ģeoapstrādes rīkā “Ģenerēt rastru no rastra funkcijas”. Rezultāts ir rasts, kas satur informāciju par laiku, kad mainījušās pikseļu vērtības.<div><br>Šīs rastra funkcijas mērķis ir iegūt novērotā līdzekļa izmaiņas, tāpēc ideāliem ievades daudzdimensiju attēliem būtu jātver konsekventi novērojumi visā laika gaitā, un tiem nevajadzētu ietvert atmosfēras vai sensoru traucējumus, mākoņus vai mākoņa ēnu. Labākā prakse ir izmantot normalizētus datus, kurus var maskēt, izmantojot QA joslu, piemēram, Landsat Collection 1 Surface Reflectance produktus ar mākoņmu asku.<div><br>Funkcija veic analīzi vienam attēlam gadā, un ikgadējo slāņu skaitam jābūt vienādam ar vai lielākam par vērtību, kas norādīta parametrā <strong>Minimālais novērojumu skaits</strong>. Ir ieteicams izmantot vismaz sešu gadu datus.<div><br>Ja jums ir mēneša, nedēļas vai dienas dati, ieteicams atlasīt vairākus attēlus no katra gada (vēlams no tās pašas sezonas), noņemt mākoņus un mākoņu ēnu un apvienot attēlus, lai ģenerētu vienu attēlu, kas labi aptver novērojumu vietu. Ja mēneša, nedēļas vai dienas dati tiek sniegti kā ievadītais daudzdimensiju rastrs, funkcija nosaka vienu slāni analīzei, pamatojoties uz parametram <strong>Fiksēšanas datums</strong> vistuvāko datumu.<div><br>Ainavas elementam bieži vien būs vajadzīgs laiks, lai atgūtos no īslaicīgām pārmaiņām, piemēram, meža ugunsgrēka vai kukaiņu invāzijas. Lai vadītu modeļa atpazīto atkopšanās ātrumu, iestatiet parametru Atkopšanās slieksnis. Atšķirīga segmenta atkopšanās ātrums nevar pārsniegt 1/atkopšanas slieksni.<div><br>Atkopšanās no ainavas izmaiņām var notikt pozitīvā vai negatīvā virzienā. Piemēram, kad ainava zaudē mežu, veģetācijas indeksu vērtību laika virkne parāda indeksa vērtību kritumu, un atkopšanās uzrāda veģetācijas indeksa vērtību pakāpenisku pieaugumu jeb pozitīvu atkopšanās tendenci. Norādiet atkopšanas tendences virzienu, izmantojot parametru <strong>Atkopšanās ir pieaugoša tendence</strong>.",
		aggregateMultidimensionalName: "Apkopot daudzdimensiju rastru",
		aggregateMultidimensionalSnip: "Apvieno esošos daudzdimensiju rastra mainīgos datus dimensijā.",
		aggregateMultidimensionalDesc: "Funkcija Apkopot daudzdimensiju rastru izveido daudzdimensiju rastra slāni, apvienojot esošos daudzdimensiju rastra mainīgos datus dimensijā.<div><br>Izmantojiet parametru <strong>Dimensijas apraksts</strong> , lai vispirms filtrētu datus, kurus vēlaties apkopot. Piemēram, ja jums ir 30 gadu ikmēneša dati, bet vēlaties izveidot apkopotu slāni tikai pirmajiem 15 gadiem, varat izmantot parametru <strong>Dimensijas apraksts</strong> ,lai norādītu analīzē iekļaujamos gadus.<div><br><ul><li>Izgūstiet sāļuma datus par janvāri 10 gadu periodā. Izvēlieties iespēju <strong>Pēc vērtībām</strong>, iestatiet parametru <strong>Izmērs</strong> stāvoklī <strong>StdTime</strong>, un iestatiet parametru <strong>Vērtības</strong> stāvoklī <strong>Janvāris</strong>.</li><li>Slāņa sāļuma dati dziļuma diapazonā no 0 līdz 150 metriem. Izvēlieties iespēju <strong>Pēc diapazoniem</strong>, iestatiet parametru <strong>Izmērs</strong> stāvoklī <strong>StdZ</strong>, iestatiet parametru <strong>Minimālā vērtība</strong> stāvoklī <strong>-150</strong> un iestatiet parametru <strong>Maksimālā vērtība</strong> stāvoklī <strong>0</strong>.</li><li>Izgūstiet datus par sāļumu 10 gadu periodā katra janvāra pirmajās 10 dienās. Izvēlieties iespēju <strong>Pēc iterācijas</strong>, iestatiet parametru <strong>Izmērs</strong> stāvoklī <strong>StdTime</strong>, iestatiet parametru <strong>Pirmās iterācijas sākums</strong> un <strong>Pirmās iterācijas beigas</strong> stāvoklī, kas atbilst iterācijas perioda sākumam un beigām, iestatiet parametru <strong>Solis</strong> stāvoklī <strong>1</strong>, un iestatiet parametru <strong>Mērvienība </strong> stāvoklī <strong>Gadi</strong>.</li></ul><div><br>Izmantojiet parametrus <strong>Apkopošanas apraksts</strong> , lai izvēlētos izvērtējamo kategoriju un apkopošanas intervālu, izmantojot atslēgvārdu, vērtību vai vērtību diapazonu. Piemēram, ja jums ir 30 gadu jūras virsmas temperatūras dati, kas apkopoti katru dienu ik pa 5 metru dziļumā līdz 100 metriem, varat izmantot dažādas intervālu opcijas šādiem scenārijiem:<div><br><ul><li>Apkopojiet dienas temperatūras datus mēneša datos, kur rezultāts ir daudzdimensiju rastrs ar 12 laika slāņiem, un katrs slānis ir katra mēneša kopsavilkums visos gados. Izvēlieties iespēju <strong>Intervāla atslēgvārds</strong> un iestatiet atslēgvārdu stāvoklī <strong>Atkārtojas ik mēnesi</strong>.</li><li>Apkopojiet dienas temperatūras datus mēneša datos, kur rezultāts ir daudzdimensiju rastrs ar 360 slāņiem jeb 12 laika slāņi gadā (30 gadi × 12 mēneši = 360 slāņi). Izvēlieties iespēju <strong>Intervāla atslēgvārds</strong> un iestatiet atslēgvārdu stāvoklī <strong>Ik mēnesi</strong>.</li><li>Apkopojiet mēneša temperatūras datus 4 mēnešu intervālos. Izvēlieties iespēju <strong>Intervāla vērtība</strong>, iestatiet parametru <strong>Vērtības intervāls</strong> stāvoklī 4, un iestatiet parametru <strong>Mērvienība</strong> stāvoklī <strong>Mēneši</strong>.</li><li>Apkopojiet temperatūras datus no 0 līdz 25 metriem, tad no 25 līdz 50 metriem, tad no 50 līdz 100 metriem. Izvēlieties iespēju <strong>Intervāla diapazoni</strong> un norādiet minimālo un maksimālo dziļumu kā <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Sapludināt rastrus",
		mergeRastersSnip: "Apvieno vairākas rastra datu kopas telpiski vai pa mainīgajiem un dimensijām.",
		mergeRastersDesc: "Šī funkcija izveido sapludinātu rastru no rastru saraksta. Piemēram, ja jums ir mozaīkas datu kopa, kurā ir 30 gadu ik mēneša nokrišņu dati, un cita datu kopa ar 10 gadu mēneša temperatūras datiem, varat tos apvienot daudzdimensiju rastrā ar abiem mainīgajiem. <div><br>Ja ievades daudzdimensiju rastri satur dažādus mainīgos, izvades daudzdimensiju rastrā būs visi mainīgie. <div><br>Ja ievades daudzdimensiju rastri satur dažādas dimensijas vai dimensiju vērtības, izvades daudzdimensiju rastrs ietvers visas dimensijas un dimensiju vērtības. <div><br>Ja ievades daudzdimensiju rastri satur vienas un tās pašas dimensijas un mainīgos, bet dažādus telpiskos apjomus, izvades daudzdimensiju rastrs ietver mainīgos lielumus un dimensijas sapludinātajā telpiskajā pārklājumā.<div><br>Šo funkciju var izmantot arī tad, ja ir vairāki rastri, kurus vēlaties apstrādāt kā vienu vienību, piemēram, aprēķinot vienu un to pašu statistiku visiem, vai arī, veicot krāsu līdzsvarošanu, lai nevajadzētu katru attēlu līdzsvarot atsevišķi. Tas ir noderīgi, strādājot ar attēliem, kas saglabāti kā atsevišķas mozaīkas daļas faila lieluma ierobežojumu dēļ; tādējādi mozaīkas daļas tiks uzskatītas par tā paša attēla daļu.",
		boundaryCleanName: "Robežas notīrīšana",
		boundaryCleanSnip: "Izlīdzina robežu starp zonām.",
		boundaryCleanDesc: "<p>Funkcija vispārina vai vienkāršo rastrus, izlīdzinot robežas starp zonām. Funkcija nodrošina iespējas uzraudzīt, kā ievades zonu šūnas ietekmē izlīdzinājumu un pielietotā izlīdzinājuma apjomu. Katra ievades šūna tiek izvērtēta, izmantojot tās astoņus tuvākos kaimiņus.</p><p>Izlīdzināšanas process vispirms sakārto blakus esošās šūnas pēc konkrētas prioritātes. Prioritāte nosaka, kura zona no blakus esošajām šūnām var aizstāt apstrādes šūnas vērtību izvadē.</p><p>Prioritātes pamatā var būt zonu vērtība vai zonu lielums. Parametrs <strong>Kārtošanas veids</strong> nosaka izmantojamo kārtošanas veidu. <p></p>Noklusējuma iestatījums <strong>Nekārtot</strong> izvērtē prioritāti pēc zonu vērtības. Šūnām no zonām ar lielākām vērtībām būs augstāka prioritāte tikt izvērstām zonās ar mazākām vērtībām.</p><p>Zonu lielumu vai kopējo laukumu var izmantot, lai kārtotu prioritāti. Izmantojot iestatījumu <strong>Dilstošā secībā</strong>, zonas tiek kārtotas pēc lieluma dilstošā secībā. Zonām ar lielāku kopējo laukumu būs prioritāte tikt izvērstām zonās ar mazāku laukumu. Ja iestatījums ir <strong>Pieaugošā secībā</strong>, funkcija darbojas pretēji: zonām ar mazākiem kopējiem laukumiem būs prioritāte tikt izvērstām zonās ar lielāku kopējo laukumu skaitu.</p><p>Izlīdzināšanas apjomu pārrauga parametrs <strong>Veikt izvēršanu un samazināšanu divreiz</strong>, kas nosaka, cik reizes tiks veikta izvēršana un samazināšana.</p><p>Ja iestatījums nav atzīmēts, izvēršana un samazināšana tiek veikta vienu reizi. Ja iestatījums ir atzīmēts, izvēršana un samazināšana tiek veikta divas reizes, kā rezultātā zonas robežas tiek izlīdzinātas vēl vairāk.</p><p>Ja visu astoņu blakus esošo šūnu vērtības ir vienādas ar apstrādes šūnu, izvades šūna saglabā ievades šūnas vērtību.</p>",
		predictUsingRegressionName: "Prognozēt izmantojot regresiju",
		predictUsingRegressionSnip: "Aprēķina prognozēto rastru, pamatojoties uz rastra datu ievadēm un regresijas modeli. Regresijas modelis ir izvade no rastra ģeoapstrādes rīka <strong>Train Random Trees Regression Model</strong>.",
		predictUsingRegressionDesc: "<p>Regresijas modelis ir definēts Esri regresijas definīcijas (.ecd) failā. Tajā ir visa informācija par konkrētu datu kopu vai datu kopu komplektu un regresijas modeli, un to ģenerē rastra ģeoapstrādes rīks <strong>Train Random Trees Regression Model</strong>.</p><p>Ievade var būt viena josla, vairākas joslas vai daudzdimensiju rastrs, vai arī šo veidu saraksts. Ievades rastru veidiem jābūt tāda paša veida rastram, ko apmāca regresijas modelis.</p><ul><li>Ja ievade ir vairāku joslu rastrs, katra josla tiek uzskatīta par prognozētāja mainīgo. Joslām jābūt tādā pašā secībā kā regresijas modeļa apmācības rīka vairākjoslu ievadei.</li><li>Ja ievade ir daudzdimensiju rastrs, katrs mainīgais tiek uzskatīts par prognozētāja mainīgo, un mainīgajam ir jābūt vienas joslas un ar laika dimensiju. Mainīgā secībai un nosaukumiem jābūt tādiem pašiem kā ievadei, kad regresijas modelis tika apmācīts. Izvade ir daudzdimensiju rastrs.</li><li>Ievade var būt vienību saraksts. Vienību skaitam un vienību secībai jāatbilst ievadei laikā, kad regresijas modelis tika apmācīts.</li></ul>",
		dimensionalMovingStatisticsName: "Dimensionālās pārvietošanas statistika",
		dimensionalMovingStatisticsSnip: "Aprēķina norādītās dimensijas daudzdimensiju datu statistiku pārvietojamajā logā.",
		dimensionalMovingStatisticsDesc: "<p>Funkcija Dimensionālā mainīgā statistika aprēķina dažādu statistiku iepriekš definētā logā visām dimensiju vērtībām gar dimensiju. Šī funkcija pieņem daudzdimensiju rastra slāni kā ievadi un izveido daudzdimensiju rastra slāni kā izvadi, kam ir tāds pats lielums kā ievades slānim.</p><p>Jūs varat norādīt dimensiju, kurai aprēķina laikā tiek ņemtas vērā dimensijas vērtības. Pēc noklusējuma tas tiek aprēķināts atbilstoši pirmajai netelpiskajai dimensijai. Loga lielumu var norādīt arī, nosakot parametrus “Regresīvā aprēķina logs” un “Pāradresēšanas logs”.</p><p>Ja ir iestatīts statistikas veids “Procentile”, kļūst pieejams arī parametrs “Procentiles vērtība” un “Procentiles interpolācijas veids”. Šos parametrus var izmantot, lai norādītu procentiles, kas jāaprēķina, un izvēlētos izmantojamo interpolācijas veidu. Ja ir iestatīts statistikas veids “Apļveida vidējais”, kļūst pieejams parametrs “Apļveida aplaušanas vērtība”. Apļveida aplaušanas vērtību izmanto, lai pārvērstu lineāro vērtību norādītajā apļveida vidējā diapazonā.</p>",
		terrainFlattenFunctionName: "Reljefa līdzināšana",
		terrainFlattenFunctionSnip: "Koriģē ievades SAR datus attiecībā uz radiometriskajiem kropļojumiem topogrāfijas dēļ.",
		terrainFlattenFunctionDesc: "<p>Reljefa līdzināšanas rastra funkcija koriģē ievades sintētiskās apertūras radara (SAR) datus attiecībā uz radiometriskajiem kropļojumiem topogrāfijas dēļ.</p><p>Ievades radara dati vispirms ir jākalibrē uz Beta0. Izmantojiet radiometriskās kalibrēšanas rīku, lai kalibrētu radara datus Beta0.</p><p>Ja ievades DEM neaptver visu SAR datu kopu, rīks izvada NoData vērtības pikseļiem ārpus DEM pārklājuma Gamma0, Sigma0, izkliedes teritorijai un ģeometriskā kropļojuma izvadēm. Ģeometriskā kropļojuma maskas izvadei rīks izvada nenoteiktas vērtības pikseļiem ārpus DEM pārklājuma.</p><p>Ievades DEM jābūt WGS 1984 (EPSG:4326) ģeogrāfiskajā koordinātu sistēmā.</p>",
		createColorCompositeFunctionName: "Izveidot krāsu salikumu",
		createColorCompositeFunctionSnip: "Izveido trīs joslu rastru no vairākjoslu rastra datu kopas, kurā katra josla var izmantot algebrisku aprēķinu, ņemot vērā uz joslas algebru.",
		createColorCompositeFunctionDesc: "<p>Krāsu salikuma izveides rastra funkcija izveido trīs joslu rastru no vairākjoslu rastra datu kopas, kurā katra josla var izmantot algebrisku aprēķinu, ņemot vērā uz joslas algebru.</p><p>Definējot joslas aritmētisko algoritmu, katrai izteiksmei var ievadīt vienas rindiņas algebrisko formulu, lai izveidotu vairākjoslu izvadi. Atbalstītie operatori ir unāri, pluss (+), mīnuss (-), reizināšana (*) un dalīšana (/).</p><p>Izmantojot joslas ID izteiksmē, identificējiet joslu, iepriekš pieliekot B vai b pie joslas numura.</p><p>Vispārpieņemta joslu kombinācija, ko izmanto sintētiskās apertūras radaram (SAR) lineārajās mērvienībās, ir VV sarkanai, VH zaļai un VV/VH zilai izteiksmei. Ja ievades dati ir decibelos, joslu kombinācijai jābūt VV sarkanai, VH – zaļai un VV-VH – zilai izteiksmei.</p>",
		surfaceParametersName: "Virsmas parametri",
		surfaceParametersSnip: "Nosaka virsmas rastra parametrus, piemēram, proporciju, slīpumu un vairāku veidu izliekumus, izmantojot ģeodēziskās metodes.",
		surfaceParametersDesc: "<p>Virsmas parametru funkcija nosaka virsmas rastra parametrus, piemēram, leņķi, slīpumu un vairāku veidu izliekumus, izmantojot ģeodēziskas metodes.</p><p>Šo funkciju var izmantot šādām lietojuma iespējām:</p><ul><li>Aprēķina proporciju un slīpumu, izmantojot ģeodēziskās metodes.</li><li>Aprēķina dažādus izliekumu veidus no ieejošā virsmas rastra, piemēram, <strong>tangenci (parastās kontūras) izliekumu</strong>, kas raksturo topogrāfisko konverģenci un plūsmas novirzi pār virsmu.</li></ul>",
		leastCostCorridorName: "Vismazākais izmaksu koridors",
		leastCostCorridorSnip: "Aprēķina divu uzkrājošo izmaksu attāluma rastru summu ar iespēju piemērot slieksni, pamatojoties uz procentuālo vai uzkrājošo izmaksu.",
		leastCostCorridorDesc: "<p>Ievades rastriem jābūt attāluma uzkrāšanas un atpakaļvirziena rastru izvadei no funkcijas <strong>Attāluma uzkrāšana</strong> vai <strong>Attāluma piešķiršana</strong>. To pamatā jābūt izmaksu attālumam, un, veidojot slāņus katram avotam, jāizmanto tie paši parametru iestatījumi. Šo rastru izveidē nedrīkst izmantot parametrus, kas ir atkarīgi no virziena (horizontālais koeficients, vertikālais koeficients un pārvietošanās virziens).</p><p>Izvades koridora rastra vērtības ir uzkrājošo izmaksu summa, lai sasniegtu noteiktu atrašanās vietu ar tādām pašām vienībām kā ievades uzkrājošo izmaksu attāluma rastriem.</p><p>Ja norādītā <strong>Sliekšņa</strong> vērtība ir lielāka par maksimālajām uzkrāšanas izmaksām, summējot divus attāluma uzkrāšanas rastrus, izvades koridora rastrs ietvers to pašu platību, ko ievades uzkrāšanas rastri.</p><p>Ja norādītā sliekšņa vērtība ir mazāka par minimālo vērtību koridora rastrā, tiek uzrādīts brīdinājuma ziņojums un izvades rastrs būs tukšs.</p><p>Izvades koridora rastrā var būt šūnas ar nedaudz lielākām uzkrāšanas izmaksām nekā robežvērtība. Tas ir no atpakaļvirziena rastriem, izmantojot šūnas, kurām ir piešķirtas nedaudz augstākas izmaksas nekā slieksnim, lai savienotu atvienotas šūnas ar koridoru.</p>",
		geometricMedianName: "Ģeometriskā mediāna",
		geometricMedianSnip: "Funkcija Ģeometriskā mediāna aprēķina ģeometrisko mediānu pikseļos vairāku joslu attēlu laika rindās.",
		geometricMedianDesc: "<p>Šī funkcija samazina laika sērijas attēlu troksni un novirzes, aprēķinot ģeometrisko vidējo pikseli katram pikseļu masīvam attēlu grupā. Algoritms uztur spektrālās relācijas starp joslām pikseļu spektrā, tāpēc izvadi var izmantot analīzē, piemēram, veģetācijas indeksos.</p><p>Pirms šīs funkcijas lietošanas mākoņi un ēnas jāmaskē, izmantojot datu kopas QA joslu.</p><p>Ja ievades attēls ir peldošs punkts, piemēram, virsmas atstarošanas koeficients ar vērtībām no 0 līdz 1, epsilona vērtībai 0,001 būtu jāuzrāda kvalitātes rezultāti.</p>"
	},
	rfxArgs: {
		rasterName: "Rastrs",
		colorSchemeTypeName: "Krāsu shēmas veids",
		colormapName: "Krāsu karte",
		colormapNameName: "Krāsu kartes nosaukums",
		colorRampName: "Krāsu palete",
		contrastOffsetName: "Kontrasta nobīde",
		brightnessOffsetName: "Spilgtuma nobīde",
		methodName: "Metode",
		bandNamesName: "Joslu nosaukumi",
		bandWavelengthsName: "Joslas viļņu garumi",
		bandIdsName: "Joslu ID",
		missingBandActionName: "Trūkst darbības joslā",
		conversionParametersName: "Pārvēršanas parametri",
		hillshadeTypeName: "Reljefa ēnojums",
		azimuthName: "Azimuts",
		altitudeName: "Augstums",
		slopeTypeName: "Mērogs",
		zFactorName: "Z koeficients",
		PSPowerName: "Pikseļu izmērs, pakāpe",
		PSZFactorName: "Pikseļu izmērs, koeficients",
		removeEdgeEffectName: "Atspējot noklusējuma malu pikseļu interpolāciju",
		fromUnitName: "No mērvienības",
		toUnitName: "Uz mērvienību",
		rasterTypeName: "Veids",
		minName: "Izvades minimums",
		maxName: "Izvades maksimums",
		minPercentName: "Minimālie izgriezuma procenti",
		maxPercentName: "Maksimālie izgriezuma procenti",
		numberOfStandardDeviationName: "Standartnoviržu skaits",
		sigmoidStrengthLevelName: "Sigmoidālā stipruma līmenis",
		estimateStatsHistogramName: "Izvērtēt statistiku",
		DRAName: "Dinamiska diapazona pielāgošana",
		statisticsName: "Statistika",
		histogramsName: "Histogrammas",
		statisticsHistogramName: "Definēt statistiku un histogrammu",
		computeGammaName: "Automātiska gamma",
		useGammaName: "Izmantot gammu",
		gammaName: "Gamma",
		inputNamesName: "Nosaukumi",
		expressionName: "Izteiksme",
		cellsizeTypeName: "Šūnas izmēra veids",
		extentTypeName: "Pārklājuma veids",
		classifierDefinitionFileName: "Ievadīt definīcijas failu",
		raster1Name: "1. rastrs",
		raster2Name: "2. rastrs",
		raster3Name: "3. rastrs",
		trueRasterName: "Patiess rastrs",
		falseRasterName: "Aplams rastrs",
		noDataInterpretationName: "Nav datu interpretācijas",
		noDataValuesName: "Nav datu vērtību",
		includedRangesName: "Iekļautie diapazoni",
		curvatureTypeName: "Izliekuma veids",
		rastersName: "Rastri",
		attributeTableName: "Tabula",
		attributeTableTypeName: "Tabulas veids",
		rowsName: "Rindu skaits",
		columnsName: "Kolonnu skaits",
		kernelName: "Kodols",
		mirrorEdgesName: "Malas spoguļattēlā",
		influencesName: "Ietekmes",
		fieldsName: "Lauki",
		remapsName: "Pārkartēt tabulu",
		evalFromName: "Izvērtēšanas mērogs no",
		evalToName: "Izvērtēšanas mērogs",
		weightsName: "Svars",
		DEMName: "Digitālā augstuma modelis",
		shortRangeIDWRadiusName: "Īss IDW rādiusa diapazons",
		maxVoidWidthName: "Maks. spēkā neesošs platums",
		sigmaGaussianName: "Adaptīvā līdzināšana",
		contourTypeName: "Kontūras veids",
		zBaseName: "Z bāze",
		numberOfContoursName: "Kontūru skaits",
		contourIntervalName: "Kontūru intervāls",
		nthContourLineInBoldName: "N-tās kontūras līnija treknrakstā",
		featureClassName: "Ievades elementi",
		classIndexFieldName: "Lauks",
		resolveOverlapMethodName: "Pārklājuma atrisināšanas paņēmiens",
		resamplingTypeName: "Atkārtotas iztveršanas veids",
		inputCellsizeName: "Ievades šūnas izmērs",
		outputCellsizeName: "Izvades šūnas izmērs",
		pointFeatureClassName: "Sākotnējie punkti",
		maxGrowthRadiusFieldName: "Maks. pieauguma rādiusa lauks",
		similarityThresholdFieldName: "Līdzības sliekšņa lauks",
		fillValueFieldName: "Aizpildīt vērtību lauks",
		spectralDetailName: "Spektra dati [1..20]",
		spatialDetailName: "Telpiskie dati [1..20]",
		minNumPixelsPerSegmentName: "Minimālais segmenta izmērs pikseļos",
		boundariesOnlyName: "Tikai segmenta robežas",
		statisticsTypeName: "Statistikas veids",
		fillNoDataOnlyName: "Aizpildiet tikai NoData pikseļus",
		inputDataTypeName: "Ievades datu veids",
		angleReferenceSystemName: "Leņķa atsauču sistēma",
		outputDataTypeName: "Izvades datu veids",
		inputSamplePointFeatureClassName: "Ievadīt paraugus",
		valueFieldName: "Vērtības lauks",
		rasterInfoName: "Informācija par rastru",
		interpolationMethodName: "Interpolācijas paņēmiens",
		radiusName: "Rādiuss",
		radianceGainValuesName: "Spīduma pastiprinājums",
		radianceBiasValuesName: "Spīduma nosliece",
		reflectedGainValuesName: "Atstarojuma pastiprinājums",
		reflectedBiasValuesName: "Atstarojuma nobīde",
		sunElevationName: "Saules pozīcija (grādos)",
		albedoName: "Albedo",
		scaleFactorName: "Mēroga koeficients",
		offsetName: "Nobīde",
		thresholdTypeName: "Sliekšņa veids",
		thresholdsName: "Sliekšņi",
		undefinedClassName: "Nedefinēta klase",
		minValueName: "Min.",
		maxValueName: "Maks.",
		operationName: "Darbība",
		clippingTypeName: "Izgriezumu veids",
		clippingGeometryName: "Ģeometrijas/rastra apgriešana",
		extentName: "Izvades pārklājums",
		useInputFeatureGeometryName: "Izmantot ievades elementus ģeometriskās figūras apgriešanai",
		remapDefinitionTypeName: "Pārkartēt definīcijas veidu",
		inputRangeName: "Ievades diapazoni",
		outputValuesName: "Izvades vērtības",
		noDataRangeName: "Bezdatu diapazoni",
		inputFieldName: "Ievades lauks",
		outputFieldName: "Izvades lauks",
		inputMaxFieldName: "Maks. ievades lauks (pēc izvēles)",
		remapTableTypeName: "Pārkartēt tabulas veidu",
		allowUnmatchedName: "Atļaut nesaskanējušas pikseļu vērtības",
		changeMissingValuesToNoDataName: "Mainīt trūkstošās vērtības uz Nav datu",
		visibleBandIDName: "Redzamā kanāla ID",
		infraredBandIDName: "Infrasarkanā kanāla ID",
		scientificOutputName: "Zinātnisko datu izvade",
		bandIndexesName: "Joslas rādītāji",
		constantName: "Konstante",
		weightName: "Svars",
		minimumName: "Minimums",
		maximumName: "Maksimums",
		sourceDataName: "Avota rastrs",
		sourceFieldName: "Avota lauks",
		costRasterName: "Izmaksu rastrs",
		maxDistanceName: "Maksimālais attālums",
		valueRasterName: "Vērtību rastrs",
		costMultiplierName: "Reizinātājs, kas jālieto izmaksām",
		startCostName: "Sākuma izmaksas",
		accumCostResistanceRateName: "Uzkrājumu izmaksu pretestības ātrums",
		capacityName: "Kapacitāte",
		travelDirectionName: "Pārvietošanās virziens",
		cellSizeName: "Šūnas izmērs",
		populationFieldName: "Iedzīvotāju lauks",
		areaUnitsName: "Laukuma vienības",
		outputValueTypeName: "Izvades šūnas vērtības",
		barriersName: "Ievadīt šķēršļus",
		destinationDataName: "Galamērķa rastrs",
		destinationFieldName: "Galamērķa lauks",
		pathTypeName: "Ceļa veids",
		observerFeaturesName: "Vērotāja elementi",
		analysisMethodName: "Analīzes metode",
		analysisTypeName: "Analīzes veids",
		verticalErrorName: "Vertikālā kļūda",
		refractivityCoefficientName: "Lauzuma koeficients",
		surfaceOffsetName: "Virsmas nobīde",
		observerElevationName: "Vērotāja paaugstinājums",
		observerOffsetName: "Vērotāja nobīde",
		innerRadiusName: "Iekšējais rādiuss",
		innerRadiusIs3DDistanceName: "Iekšējais rādiuss ir 3D attālums",
		outerRadiusName: "Ārējais rādiuss",
		outerRadiusIs3DDistanceName: "Ārējais rādiuss ir 3D attālums",
		horizontalStartAngleName: "Horizontāls sākuma leņķis",
		horizontalEndAngleName: "Horizontāls beigu leņķis",
		verticalUpperAngleName: "Vertikāls augšējais leņķis",
		verticalLowerAngleName: "Vertikāls apakšējais leņķis",
		zoneDataName: "Zonas rastrs",
		zoneFieldName: "Zonas lauks",
		ignoreNoDataName: "Ignorēt, ka aprēķinos nav datu",
		temperatureRasterName: "Temperatūras rastrs",
		inTemperatureUnitsName: "Temperatūras mērvienības",
		outHeatIndexTemperatureUnitsName: "Karstuma rādītāja mērvienības",
		relativeHumidityRasterName: "Relatīvā mitruma rastrs",
		outWindChillTemperatureUnitsName: "Vēja temperatūras mērvienības",
		windSpeedRasterName: "Vēja ātruma rastrs",
		inWindSpeedUnitsName: "Vēja ātruma mērvienības",
		valueName: "Vērtība",
		propertyName: "Īpašības nosaukums",
		jsonName: "Metadatu JSON",
		zoneTableName: "Zonas atribūtu tabula",
		attributeFieldNames: "Atribūtu lauka nosaukumi",
		backgroundName: "Fona vērtība",
		whereClauseName: "Where klauzula",
		minimumValueFieldName: "Minimālās vērtības lauka nosaukums",
		maximumValueFieldName: "Maksimālās vērtības lauka nosaukums",
		outValueFieldName: "Izvades vērtības lauka nosaukums",
		defaultValueName: "Noklusējuma izvades vērtība",
		conversionMatrixName: "Konvertācijas matrica",
		IsPseudoColorOutputName: "Ir pseido krāsas izvade",
		unmappedAsRandomColorName: "Piešķirt nejaušu krāsu nekartētiem pikseļiem",
		distanceMethodName: "Attāluma metode",
		flowDirRasterName: "Plūsmas virziena rastrs",
		pourPointName: "Iztekas(-u) rastrs",
		pourPointFieldName: "Iztekas lauks",
		constantZName: "Konstante Z",
		zOffsetName: "Z nobīde",
		geoIdName: "Ģeoīds",
		calibrationTypeName: "Kalibrēšanas veids",
		filterTypeName: "Filtra veids",
		filterSizeName: "Filtra lielums",
		noiseModelName: "Traucējumu modelis",
		noiseVarianceName: "Traucējumu novirze",
		additiveNoiseMeanName: "Summēto traucējumu vidējais",
		multiplicativeNoiseMeanName: "Reizināto traucējumu vidējais",
		numberofLooksName: "Skatu skaits",
		dampingFactorName: "Slāpēšanas koeficients",
		maskRasterName: "Maskas rastrs",
		nibbleValuesName: "Izmantot vērtības “Nav datu”, ja tās atrodas vistuvāk",
		nibbleNoDataName: "Atdarināt šūnas ar vērtībām “Nav datu”",
		zLimitName: "Z ierobežojums",
		flowDirectionTypeName: "Plūsmas virziena veids",
		weightRasterName: "Nozīmīguma rastrs",
		forceEdgeName: "Likt visām šķautnes šūnām plūst uz ārpusi",
		streamRasterName: "Straumes rastrs",
		surfaceRasterName: "Virsmas rastrs",
		conversionType: "Konvertēšanas veids",
		distanceRaster1: "1. attāluma rastrs",
		distanceRaster2: "2. attāluma rastrs",
		costDistanceRaster: "Izmaksu attāluma rastrs",
		costBacklinkRaster: "Izmaksu izsekošanas rastrs",
		overridesName: "Ignorēšana",
		fieldName: "Lauks",
		signatureFileOrUrl: "Paraksta fails vai URL",
		redName: "Sarkans",
		greenName: "Zaļš",
		blueName: "Zils",
		infraredName: "Infrasarkans",
		panchromaticName: "Panhromatisks",
		multispectralName: "Multispektrāls",
		pansharpeningType: "Panhromatiskās asuma uzlabošanas veids",
		sensorName: "Sensors",
		spatialReferenceName: "Telpiskā atskaite",
		xCellsizeName: "X šūnas izmērs",
		yCellsizeName: "Y šūnas izmērs",
		xOriginName: "X reģistrācijas punkts",
		yOriginName: "Y reģistrācijas punkts",
		percentileName: "Procentiles vērtība",
		neighborhoodType: "Apvidus veids",
		widthName: "Platums",
		heightName: "Augstums",
		startAngleName: "Sākuma leņķis",
		endAngleName: "Beigu leņķis",
		neighborhoodValues: "Apvidus vērtības",
		horizontalRaster: "Horizontālais rastrs",
		horizontalFactor: "Horizontālais koeficients",
		verticalRaster: "Vertikālais rastrs",
		verticalFactor: "Vertikālais koeficients",
		streamRaster: "Straumes rastrs",
		flowDirRaster: "Plūsmas virziena rastrs",
		numberNeighborCells: "Līdzās esošo šūnu skaits",
		zoneConnectivity: "Zonas savienojamība",
		addLinkBehavior: "Pievienot saiti",
		excludedValue: "Izslēgtā vērtība",
		constantFillCheck: "Ģenerēt aizpildījuma rastru no konstantes",
		fillRaster: "Aizpildījuma rastrs",
		constantFillValue: "Konstantes vērtība",
		inputBitPositions: "Ievades bits",
		outputBitPositions: "Izvades bits",
		distanceTypeName: "Attāluma veids",
		barrierDataName: "Rastra barjeras",
		pourPointDataName: "Izteces punkta rastrs",
		accumulationRasterName: "Plūsmas akumulācijas rastrs",
		snapDistanceName: "Fiksēšanas attālums",
		orderMethodName: "Pasūtīšanas metode",
		directionMeasurementName: "Mērījuma virziens",
		processAsMultiband: "Apstrādāt kā vairākjoslu",
		processMultidimensional: "Apstrādāt kā daudzdimensiju",
		forceFlowDirectionConvention: "Piespiest ievades rastru izmantot kā plūsmas virzienu.",
		initialAccumulation: "Sākotnējā akumulācija",
		maximumAccumulation: "Maksimālā akumulācija",
		sourceLocationBands: "Ģenerēt avota rindu un kolonnu kā papildu joslas izvadē",
		backDirectionBand: "Ģenerēt atpakaļvirzienu kā papildu joslu izvadē",
		numberOfCells: "Šūnu skaits",
		zoneValues: "Zonas vērtības",
		shrinkMethod: "Sašaurināšanas paņēmiens",
		expandMethod: "Izvēršanas paņēmiens",
		inputSpectralProfileType: "Spektra profila veids",
		spectralProfileFileName: "Spektra profils",
		trainingFeatureFileName: "Trenējamais elements",
		nonNegative: "Nav negatīvs",
		sumToOne: "Summa līdz vienam",
		randomDistribution: "Sadalījums",
		meanName: "Vidējais aritmētiskais",
		probabilityName: "Varbūtība",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "N",
		seed: "Sākotnējā vērtība",
		randomNumberGenerator: "Nejaušu skaitļu ģenerators",
		cellFactor: "Šūnas koeficients",
		aggregationType: "Apkopošanas paņēmiens",
		extentHandling: "Izvērsiet apjomu, ja nepieciešams",
		trendAnalysisDimensionName: "Dimensijas nosaukums",
		trendAnalysisType: "Tendences veids",
		harmonicFrequency: "Harmoniskā frekvence",
		polynomialOrder: "Polinoma kārtība",
		cycleLengthName: "Cikla garums",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R kvadrātā",
		trendAnalysisSlopePValue: "Slīpuma koeficienta P vērtība",
		trendAnalysisSeasonalPeriod: "Sezonas periods",
		cycleUnitName: "Cikla mērvienība",
		predictDimensionValues: "Vērtības",
		dimensionDefinitionType: "Dimensijas definīcija",
		predictDimensionStart: "Sākums",
		predictDimensionEnd: "Beigas",
		predictDimensionInterval: "Vērtības intervāls",
		dimensionUnit: "Mērvienība",
		interpolationCellsizeName: "Interpolācijas šūnas izmērs",
		variableName: "Mainīgie",
		dimensionlessName: "Bez dimensijām",
		mdimDefinition: "Dimensijas apraksts",
		dimensionName: "Dimensija",
		iterationStart: "Pirmās iterācijas sākums",
		iterationEnd: "Pirmās iterācijas beigas",
		intervalStart: "Intervāla sākums",
		intervalEnd: "Intervāla beigas",
		stepName: "Darbība",
		rangesName: "Diapazoni",
		minValue: "Minimālā vērtība",
		maxValue: "Maksimālā vērtība",
		changeAnalysisRasterName: "Mainīt analīzes rastru",
		changeTypeName: "Mainīt veidu",
		segmentDate: "Segmenta datums",
		changeDirectionName: "Mainīt virzienu",
		maxNumChangesName: "Maksimālais izmaiņu skaits",
		filterByYear: "Filtrēt pēc gada",
		minimumYear: "Minimālā vērtība",
		maximumYear: "Maksimālā vērtība",
		filterByDuration: "Filtrēt pēc ilguma",
		minimumDuration: "Minimālais ilgums",
		maximumDuration: "Maksimālais ilgums",
		filterByMagnitude: "Filtrēt pēc lieluma",
		minimumMagnitude: "Minimālais lielums",
		maximumMagnitude: "Maksimālais lielums",
		filterByStartValue: "Filtrēt pēc sākuma vērtības",
		minimumStartValue: "Minimālā sākuma vērtība",
		maximumStartValue: "Maksimālā sākuma vērtība",
		filterByEndValue: "Filtrēt pēc beigu vērtības",
		minimumEndValue: "Minimālā beigu vērtība",
		maximumEndValue: "Maksimālā beigu vērtība",
		modelTypeName: "Modeļa veids",
		fromRasterName: "No rastra",
		toRasterName: "Uz rastru",
		computeChangeMethod: "Aprēķināt izmaiņu metodi",
		fromClassValues: "No klases vērtībām (piemēram: 2 5)",
		toClassValues: "Uz klases vērtībām (piemēram: 2 5)",
		keepMethod: "Filtrēšanas metode",
		useColorMethod: "Norādīt pārejas krāsas",
		detectChangeBands: "Joslas izmaiņu noteikšanai (sāk ar 0)",
		tmaskBands: "Joslas pagaidu maskēšanai (sāk ar 0)",
		chiSquaredThreshold: "Hī kvadrāta slieksnis izmaiņu noteikšanai",
		minAnomaly: "Minimāls secīgu anomāliju novērojumu skaits",
		updatingFrequency: "Atjaunina pielāgošanas biežumu (gados)",
		distanceAccumulationRasterName: "Attāluma akumulācijas rastrs",
		costBackdirectionRasterName: "Atpakaļvirziena vai plūsmas virziena rastrs",
		rasterCollectionName: "Rastru kolekcija",
		itemFunctionName: "Vienības funkcija",
		aggregationFunctionName: "Apkopošanas funkcija",
		processingFunctionName: "Apstrādes funkcija",
		aggregationDefinitionName: "Apkopošanas definīcija",
		queryGeometryName: "Vaicājuma ģeometrija",
		factorFunctionZeroFactor: "Nulles koeficients",
		factorFunctionCutAngle: "Griezuma leņķis",
		factorFunctionSideFactor: "Sānu koeficients",
		factorFunctionSlope: "Slīpums",
		factorFunctionLowCutAngle: "Zems griezuma leņķis",
		factorFunctionHighCutAngle: "Augts griezuma leņķis",
		factorFunctionCosPower: "Kosinusa ietekme",
		factorFunctionSecPower: "Sekantes ietekme",
		factorFunctionTablePath: "Tabulas ceļš",
		processingBand: "Apstrādes josla",
		processingBandName: "Apstrādes joslas nosaukums",
		snappingDate: "Fiksēšanas datums",
		maxNumSegments: "Maksimālais segmentu skaits",
		vertexCountOvershoot: "Virsotņu skaita pārsniegšana",
		spikeThreshold: "Smailes slieksnis",
		recoveryThreshold: "Atkopšanās slieksnis",
		minNumObs: "Minimālais segmentu skaits",
		pValueThreshold: "P vērtības slieksnis",
		bestModelProportion: "Labākā modeļa proporcija",
		preventOneYearRecovery: "Nepieļaut atkopšanu gada laikā",
		recoveryIncreaseTrend: "Atkopšanās ir pieaugoša tendence",
		outputOtherBands: "Citu joslu izvade",
		sortType: "Kārtošanas veids",
		numberOfRuns: "Veikt izvēršanu un samazināšanu divreiz",
		percentileValue: "Procentiles vērtība",
		percentileInterpolationType: "Procentiles interpolācijas veids",
		rasterInfoProperty: "Property",
		rasterInfoValue: "Vērtība",
		rasterInfoColumns: "Kolonnas",
		rasterInfoRows: "Rindas",
		rasterInfoBandCount: "Joslu skaits",
		rasterInfoPixelSizeX: "Šūnu izmērs X",
		rasterInfoPixelSizeY: "Šūnu izmērs Y",
		rasterInfoPixelType: "Pikseļa veids",
		rasterExtentTop: "Augšā",
		rasterExtentBottom: "Lejasdaļā",
		rasterExtentLeft: "Pa kreisi",
		rasterExtentRight: "Pa labi",
		rasterStatisticsNotCalculated: "Statistika nav aprēķināta.",
		spatialReferenceProjection: "Projekcija",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Iepriekšējais WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Iepriekšējais VCSWKID",
		spatialReferenceAuthority: "Iestāde",
		spatialReferenceLinearUnit: "Lineārā mērvienība",
		spatialReferenceAngularUnit: "Leņķa vienība",
		spatialReferenceFalseEasting: "Viltus austrumu virziens",
		spatialReferenceFalseNorthing: "Viltus ziemeļu virziens",
		spatialReferenceCentralMeridian: "Centrālais meridiāns",
		spatialReferencePrimeMeridian: "Nulles meridiāns",
		spatialReferenceStandardParallel1: "Standarta paralēle 1",
		spatialReferenceStandardParallel2: "Standarta paralēle 2",
		spatialReferenceLatitudeOfOrigin: "Koordinātu sākumpunkta platums",
		spatialReferenceAuxiliarySphereType: "Palīgsfēras veids",
		spatialReferenceDatum: "Bāze",
		spatialReferenceSpheroid: "Sferoīds",
		spatialReferenceSemimajorAxis: "Lielā pusass",
		spatialReferenceSemiminorAxis: "Mazā pusass",
		spatialReferenceInverseFlattening: "Apgrieztais saplacinājums",
		inputDefinitionFileName: "Ievadīt definīcijas failu",
		deleteName: "Dzēst",
		addVariableName: "Pievienot mainīgo",
		maxNumPixelsPerSegment: "Maksimālais segmenta izmērs pikseļos",
		forwardWindowName: "Uz priekšu vērsts logs",
		backwardWindowName: "Atpakaļ vērsts logs",
		noDataHandlingName: "Nav datu apstrāde",
		circularWrapValueName: "Cirkulāra aplaušanas vērtība",
		fromClassNameFieldName: "Parametra “Klases nosaukumi no” lauka nosaukums no rastra",
		toClassNameFieldName: "Parametra “Klases nosaukumi no” lauka nosaukums uz rastru",
		targetRasterName: "Mērķa rastrs",
		circularWrapValue: "Cirkulāra aplaušanas vērtība",
		bandIndexesR: "Sarkana izteiksme",
		bandIndexesG: "Zaļa izteiksme",
		bandIndexesB: "Zila izteiksme",
		exampleName: "Piemērs",
		inputName: "Ievade",
		outputName: "Izvade",
		optionalName: "Pēc izvēles",
		browseDefinitionFile: "Pārlūkojiet definīcijas failu",
		selectDefinitionFile: "Atlasiet ievades definīcijas failu",
		inputDefinitionURL: "Ievades definīcijas faila vietrādis (URL)",
		enterDefinitionFileURL: "Ievadiet definīcijas faila vietrādi (URL)",
		browseXMLFile: "Pārlūkojiet XML failu",
		selectStatsFile: "Atlasiet statistikas un histogrammu failu",
		enterXMLFileURL: "Ievadiet XML faila vietrādi (URL)",
		xmlFileURL: "XML faila vietrādis (URL)",
		circularCalculation: "Aprēķināt cirkulāro statistiku",
		localSurfaceType: "Vietējās virsmas veids",
		surfaceParameterType: "Parametra veids",
		neighborhoodDistance: "Tuvākā apgabala attālums",
		useAdaptiveNeighborhood: "Izmantot adaptīvo tuvāko apgabalu",
		outputSlopeType: "Rezultāta slīpuma mērījums",
		projectAzimuths: "Projekta ģeodēziskie azimuti",
		useEquatorialAspect: "Izmantot ekvatoriālo aspektu",
		zUnit: "Z vienība",
		analysisMask: "Analīzes maska",
		stdDeviation: "Standartnovirze",
		"true": "Patiess",
		"false": "Nepatiess",
		costDistanceRaster1: "Ievades uzkrājošo izmaksu attāluma rasts 1",
		costDistanceRaster2: "Ievades uzkrājošo izmaksu attāluma rasts 2",
		threshold: "Slieksnis",
		thresholdMethod: "Sliekšņa metode",
		directionRaster1: "Ievades atpakaļvirziena rastrs 1",
		directionRaster2: "Ievades atpakaļvirziena rastrs 2",
		maxIterations: "Maksimālais iterāciju skaits",
		epsilon: "Epsilons"
	},
	enumLabels: {
		attributeTableTypeManual: "Manuāli",
		attributeTableTypeExternal: "Ārējais",
		clrSchemeTypeColormap: "Krāsu karte",
		clrSchemeTypeColorRamp: "Krāsu rampa",
		colormapTypeElevation: "Augstums",
		colormapTypeGray: "Pelēka",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Nejauši",
		none: "Neviens",
		slopeTypeAdjusted: "Pielāgots",
		slopeTypeDegree: "Grāds",
		slopeTypePercentRise: "Procentuālais pieaugums",
		slopeTypeScaled: "Mērogots",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "PercentMinMax",
		stretchTypeSigmoid: "Sigmoidāls",
		stretchTypeStdDev: "Standartnovirze",
		hillshadeTypeSimple: "Tradicionāla",
		hillshadeTypeMultidirectional: "Vairākvirzienu",
		bandComboByNames: "Joslu nosaukumi",
		bandComboByWavelength: "Joslas viļņu garumi",
		bandComboByIDs: "Joslu ID",
		missingBandActionBestMatch: "Labākā atbilstība",
		missingBandActionFail: "Neizdevās",
		unitTypeCelsius: "Pēc Celsija",
		unitTypeCentimeters: "Centimetri",
		unitTypeDecimeters: "Decimetri",
		unitTypeFahrenheit: "Pēc Fārenheita",
		unitTypeFeet: "Pēdas",
		unitTypeFeetPerSec: "Pēdas sekundē (ft/s)",
		unitTypeInches: "Collas",
		unitTypeKelvin: "Kelvins",
		unitTypeKilometers: "Kilometri",
		unitTypeKmsPerHour: "Kilometri stundā (km/h)",
		unitTypeKnots: "Mezgli (kn)",
		unitTypeMeters: "Metri",
		unitTypeMetersPerSec: "Metri sekundē (m/s)",
		unitTypeMiles: "Jūdzes",
		unitTypeMilesPerHour: "Jūdzes stundā (mph)",
		unitTypeMillimeters: "Milimetri",
		unitTypeNauticalMiles: "Jūras jūdzes",
		unitTypeYards: "Jardi",
		unitTypeDecimalDegrees: "Decimālie grādi",
		unitTypePoints: "Punkti",
		unitTypeUnknown: "Nezināms",
		unitTypeSqMapUnits: "Kartes kvadrātmērvienības",
		unitTypeSqMiles: "Kvadrātjūdzes",
		unitTypeSqKms: "Kvadrātkilometri",
		unitTypeAcres: "Akri",
		unitTypeHectares: "Hektāri",
		unitTypeSqYards: "Kvadrātjardi",
		unitTypeSqFt: "Kvadrātpēdas",
		unitTypeSqInches: "Kvadrātcollas",
		unitTypeSqMts: "Kvadrātmetri",
		unitTypeSqCms: "Kvadrātcentimetri",
		unitTypeSqMms: "Kvadrātmilimetri",
		cellsizeTypeFirst: "Pirmais no",
		cellsizeTypeMin: "Min. no",
		cellsizeTypeMax: "Maks. no",
		cellsizeTypeMean: "Vidējais no",
		cellsizeTypeLast: "Pēdējais no",
		extentTypeFirst: "Pirmais no",
		extentTypeIntersection: "Krustpunkts no",
		extentTypeUnion: "Apvienojums no",
		extentTypeLast: "Pēdējais no",
		noDataInterpretAny: "Atbilst jebkam",
		noDataInterpretAll: "Atbilst visam",
		curvatureTypeStandard: "Standarts",
		curvatureTypeProfile: "Profils",
		curvatureTypePlanform: "Priekšmeta horizontāla projekcija",
		filterTypeLineDetectionHorizontal: "Līnijas noteikšana horizontāli",
		filterTypeLineDetectionVertical: "Līnijas noteikšana vertikāli",
		filterTypeLineDetectionLeftDiagonal: "Līnijas noteikšana diagonāli pa kreisi",
		filterTypeLineDetectionRightDiagonal: "Līnijas noteikšana diagonāli pa labi",
		filterTypeGradientNorth: "Novirze uz ziemeļiem",
		filterTypeGradientWest: "Novirze uz rietumiem",
		filterTypeGradientEast: "Novirze uz austrumiem",
		filterTypeGradientSouth: "Novirze uz dienvidiem",
		filterTypeGradientNorthEast: "Novirze uz ziemeļaustrumiem",
		filterTypeGradientNorthWest: "Novirze uz ziemeļrietumiem",
		filterTypeSmoothArithmeticMean: "Vidējās aritmētiskās vērtības līdzināšana",
		filterTypeSmoothing3x3: "Līdzināšana 3×3",
		filterTypeSmoothing5x5: "Līdzināšana 5×5",
		filterTypeSharpening3x3: "Asuma palielināšana 3×3",
		filterTypeSharpening5x5: "Asuma palielināšana 5×5",
		filterTypeLaplacian3x3: "Laplasa 3×3",
		filterTypeLaplacian5x5: "Laplasa 5×5",
		filterTypeSobelHorizontal: "Objekta malu izcelšana attēlā horizontāli",
		filterTypeSobelVertical: "Objekta malu izcelšana attēlā vertikāli",
		filterTypeSharpen: "Palielināt asumu",
		filterTypeSharpen2: "Vēl vairāk palielināt asumu",
		filterTypePointSpread: "Punktu starpība",
		userDefined: "Lietotāja definēts",
		ContourTypeLines: "Horizontāles",
		ContourTypeFill: "Kontūras pildījums",
		ContourTypeSmoothOnly: "Tikai izlīdzināta virsma",
		rasterizeFirst: "Pirmais",
		rasterizeLast: "Pēdējais",
		rasterizeSmallest: "Mazākais",
		rasterizeLargest: "Lielākais",
		resamplingTypeNearest: "Tuvākais kaimiņš",
		resamplingTypeBilinear: "Bilineārā interpolācija",
		resamplingTypeCubic: "Kubiska konvolūcija",
		resamplingTypeMajority: "Lielākā daļa",
		resamplingTypeBilinearPlus: "Bilineārā interpolācija Plus",
		resamplingTypeGauss: "Gausa izpludinājums",
		resamplingTypeGaussPlus: "Gausa izpludinājums Plus",
		resamplingTypeAverage: "Vidējs",
		resamplingTypeMinimum: "Minimums",
		resamplingTypeMaximum: "Maksimums",
		resamplingTypeVectorAvg: "Vektoru vidējais",
		minimum: "Minimums",
		maximum: "Maksimums",
		mean: "Vidējais",
		stdDeviation: "Standartnovirze",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Magnitūda - virziens",
		unknown: "Nezināms",
		angleRefSysGeographic: "Ģeogrāfisks",
		angleRefSysArithmetic: "Aritmētisks",
		interpolateIrregularDataNearest: "Tuvākā vienība",
		interpolateIrregularDataBilinear: "Bilineārs",
		interpolateIrregularDataTinningLinear: "Lineāri dati",
		interpolateIrregularDataTinningNaturalNeighbor: "Dabiskie kaimiņi",
		interpolateIrregularDataTinningIDW: "Attāluma apgrieztā svērtā vērtība",
		esriRasterThresholdTypeConstant: "Konstante",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Maks. arg.",
		argStatsTypeMin: "Min. arg.",
		argStatsTypeMedian: "Mediānas arg.",
		argStatsTypeDuration: "Ilgums",
		arithmeticOpPlus: "Plus",
		arithmeticOpMinus: "Mīnus",
		arithmeticOpMultiply: "Reizināt",
		arithmeticOpDivide: "Dalīt",
		arithmeticOpPower: "Pakāpe",
		arithmeticOpMode: "Režīms",
		clipTypeOutside: "Izgriezt ārpusē",
		clipTypeInside: "Izgriezt iekšpusē",
		yes: "Jā",
		no: "Nē",
		densities: "Blīvumi",
		expectedCounts: "Paredzētais skaits",
		planar: "Plaknes",
		geodesic: "Ģeodēzisks",
		eachCell: "Katra šūna",
		eachZone: "Katra zona",
		bestSingle: "Viens labākais",
		allSightlines: "Visas skata līnijas",
		perimeterSightlines: "Perimetra skata līnijas",
		frequency: "Frekvence",
		observers: "Vērotāji",
		majority: "Lielākā daļa",
		median: "Mediāna",
		minority: "Mazākā daļa",
		percentile: "Procentile",
		range: "Diapazons",
		sum: "Summa",
		variety: "Dažādība",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Pārveidots SAVI",
		bandArithmeticMethodMSAVI: "Mainīts SAVI",
		bandArithmeticMethodSultan: "Sultāna formula",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Dzelzs oksīds",
		ferrousMinerals: "Dzelzi saturoši minerāli",
		clayMinerals: "Mālu minerāli",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Kvadrātsakne",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Nav bitu",
		localBooleanNot: "Nav būla",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "Ir nulle",
		localFloat: "Peldošais",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Noapaļot uz nulli",
		localRoundDown: "Noapaļot uz leju",
		localRoundUp: "Noapaļot uz augšu",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Plus",
		localMinus: "Mīnus",
		localTimes: "Pakāpē",
		localPower: "Pakāpe",
		localBitwiseAnd: "Bitu un",
		localBitwiseLeftShift: "Bitu kreisais taustiņš Shift",
		localBitwiseOr: "Bitu vai",
		localBitwiseRightShift: "Bitu labais taustiņš Shift",
		localBitwiseXor: "Bitu Xor",
		localBooleanAnd: "Būla un",
		localBooleanOr: "Būla vai",
		localBooleanXor: "Būla Xor",
		localDivide: "Dalīt",
		localEqualTo: "Vienāds ar",
		localGreaterThan: "Lielāks nekā",
		localGreaterThanEqual: "Lielāks nekā vienāds",
		localLessThan: "Mazāks par",
		localLessThanEqual: "Mazāks nekā vienāds",
		localMod: "Mod",
		localNotEqual: "Nav vienāds",
		localATan2: "ATan2",
		localSquare: "Kvadrāts",
		localSetNull: "Nulles iestatīšana",
		remapDefTypeList: "Saraksts",
		remapDefTypeTable: "Tabula",
		remapTableTypeSimple: "Vienkāršs",
		remapTableTypeDynamic: "Dinamiski",
		remapTableTypeReassignment: "Atkārtota piešķiršana",
		geomCorrectionByConstZ: "Izmantot konstanti Z",
		geomCorrectionByDEM: "Izmantot DEM",
		radarCalibBetaNought: "Beta0",
		radarCalibSigmaNought: "Sigma0",
		radarCalibGammaNought: "Gamma0",
		speckleFilterTypeLee: "Lee filtrs",
		speckleFilterTypeEnhancedLee: "Uzlabots Lee filtrs",
		speckleFilterTypeFrost: "Frost filtrs",
		speckleFilterTypeKuan: "Kuan filtrs",
		speckleNoiseModelMul: "Reizinātie traucējumi",
		speckleNoiseModelAdd: "Summētie traucējumi",
		speckleNoiseModelAddnMul: "Summētie un reizinātie traucējumi",
		mosaicOpTypeFirst: "Pirmais",
		mosaicOpTypeLast: "Pēdējais",
		mosaicOpTypeMin: "Min.",
		mosaicOpTypeMax: "Maks.",
		mosaicOpTypeMean: "Vidējais",
		mosaicOpTypeBlend: "Sapludināt",
		mosaicOpTypeSum: "Summa",
		integer: "Vesels skaitlis",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Vertikāli",
		horizontal: "Horizontāli",
		localCellStatisticsMajority: "Lielākā daļa",
		localCellStatisticsMax: "Maksimums",
		localCellStatisticsMean: "Vidējais",
		localCellStatisticsMedian: "Mediāna",
		localCellStatisticsMin: "Minimums",
		localCellStatisticsMinority: "Mazākā daļa",
		localCellStatisticsRange: "Diapazons",
		localCellStatisticsStdDev: "Standartnovirze",
		localCellStatisticsSum: "Summa",
		localCellStatisticsVariety: "Dažādība",
		localCellStatisticsMajorityIgnoreND: "Vairākums (ignorēt vērtību “Nav datu”)",
		localCellStatisticsMaxIgnoreND: "Maksimums (ignorēt vērtību “Nav datu”)",
		localCellStatisticsMeanIgnoreND: "Vidējais (ignorēt vērtību “Nav datu”)",
		localCellStatisticsMedianIgnoreND: "Mediāna (ignorēt vērtību “Nav datu”)",
		localCellStatisticsMinIgnoreND: "Minimums (ignorēt vērtību “Nav datu”)",
		localCellStatisticsMinorityIgnoreND: "Mazākums (ignorēt vērtību “Nav datu”)",
		localCellStatisticsRangeIgnoreND: "Diapazons (ignorēt vērtību “Nav datu”)",
		localCellStatisticsStdDevIgnoreND: "Standartnovirze (ignorēt vērtību “Nav datu”)",
		localCellStatisticsSumIgnoreND: "Summa (ignorēt vērtību “Nav datu”)",
		localCellStatisticsVarietyIgnoreND: "Dažādība (ignorēt vērtību “Nav datu”)",
		localCellStatisticsTypePercentileIgnoreND: "Procentile (ignorēt Nav datu)",
		fromSource: "No avota",
		toSource: "Uz avotu",
		colorspaceConversionRgbToHsv: "No RGB uz HSV",
		colorspaceConversionHsvToRgb: "No HSV uz RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Broveja",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Vidējais",
		pansharpenTypeGramSchmidt: "Grama-Šmita",
		rectangleNeighborhood: "Taisnstūris",
		circleNeighborhood: "Aplis",
		annulusNeighborhood: "Gredzens",
		wedgeNeighborhood: "Ķīlis",
		irregularNeighborhood: "Neregulāri",
		weightNeighborhood: "Svars",
		four: "Četri",
		eight: "Astoņi",
		within: "Ietver",
		cross: "Krusts",
		addLink: "Pievienot saiti",
		noLink: "Nav saites",
		weightedMean: "Svērtais vidējais aritmētiskais",
		ls8QCBitPatternCirrus: "Landsat 8 Cirrus",
		ls8QCBitPatternCloud: "Landsat 8 mākonis",
		ls8QCBitPatternCloudShadow: "Landsat 8 mākoņēna",
		ls8QCBitPatternDesignatedFill: "Landsat 8 paredzētais aizpildījums",
		ls8QCBitPatternDroppedFrame: "Landsat 8 neizmantojamais rāmis",
		ls8QCBitPatternSnowIce: "Landsat 8 sniegs/ledus",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 reljefa oklūzija",
		ls8QCBitPatternVegetation: "Landsat 8 veģetācija",
		ls8QCBitPatternWater: "Landsat 8 ūdens",
		downStream: "Pa straumi",
		upStream: "Pret straumi",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Pašreizējais sektors",
		allSlices: "Visi sektori",
		expandDistance: "ATTĀLUMS",
		expandMorphological: "MORFOLOĢISKS",
		spectralProfileFile: "Spektra profils",
		trainingFeatureFile: "Trenējamais elements",
		randomDistributionTypeUniform: "Viendabīgs",
		randomDistributionTypeUniformInteger: "Vesels skaitlis",
		randomDistributionTypeNormal: "Parasts",
		randomDistributionTypeExponential: "Eksponenciāls",
		randomDistributionTypePoisson: "Puasons",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binomiāls",
		randomDistributionTypeGeometric: "Ģeometrisks",
		randomDistributionTypeNegativeBinomial: "Negatīvs binomiāls",
		randomGeneratorTypeStandardCRand: "Randa C standarts",
		randomGeneratorTypeAlgorithmACM599: "ACM apkopotais algoritms 599",
		randomGeneratorTypeMersenneTwister: "Mersenna vērtību ģenerators",
		sumName: "Summa",
		medainName: "Mediāna",
		trendLinear: "Lineārs",
		trendHarmonic: "Harmonisks",
		trendPolynomial: "Polinomiāls",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Seasonal-Kendall",
		dimensionByValue: "Pēc vērtības",
		dimensionByInterval: "Pēc intervāla",
		mdimDefTypeAll: "Visi",
		mdimDefTypeByValues: "Pēc vērtībām",
		mdimDefTypeByRanges: "Pēc diapazoniem",
		mdimDefTypeByIteration: "Pēc iterācijas",
		mdimDefTypeByInterval: "Pēc intervāla",
		mdimDefTypeByTargetRaster: "Pēc mērķa rastra",
		esriTimeUnitsHours: "Stundas",
		esriTimeUnitsDays: "Dienas",
		esriTimeUnitsWeeks: "Nedēļas",
		esriTimeUnitsMonths: "Mēneši",
		esriTimeUnitsYears: "Gadi",
		esriTimeIntervalKeywordHourly: "Katru stundu",
		esriTimeIntervalKeywordDaily: "Katru dienu",
		esriTimeIntervalKeywordWeekly: "Katru nedēļu",
		esriTimeIntervalKeywordDekadly: "Reizi dekādē",
		esriTimeIntervalKeywordPentadly: "Reizi piecās dienās",
		esriTimeIntervalKeywordMonthly: "Katru mēnesi",
		esriTimeIntervalKeywordQuarterly: "Reizi ceturksnī",
		esriTimeIntervalKeywordYearly: "Katru gadu",
		esriTimeIntervalKeywordRecurringDaily: "Periodiski katru dienu",
		esriTimeIntervalKeywordRecurringWeekly: "Periodiski katru nedēļu",
		esriTimeIntervalKeywordRecurringMonthly: "Periodiski katru mēnesi",
		esriTimeIntervalKeywordRecurringQuarterly: "Periodiski katru ceturksni",
		aggDefTypeAll: "Viss",
		aggDefTypeIntervalKeyword: "Intervāla atslēgvārds",
		aggDefTypeIntervalValue: "Intervāla vērtība",
		aggDefTypeIntervalRanges: "Intervāla diapazons",
		latestChange: "Jaunāko izmaiņu laiks",
		earliestChange: "Agrāko izmaiņu laiks",
		largestChange: "Lielāko izmaiņu laiks",
		numberOfChanges: "Izmaiņu skaits",
		longestChange: "Ilgāko izmaiņu laiks",
		shortestChange: "Īsāko izmaiņu laiks",
		fastestChange: "Ātrāko izmaiņu laiks",
		slowestChange: "Lēnāko izmaiņu laiks",
		allChanges: "Viss",
		increaseChanges: "Palielināt",
		decreaseChanges: "Samazināt",
		segmentBeginning: "Segmenta sākums",
		segmentEnd: "Segmenta beigas",
		esriComputeChangeMethodDifference: "Atšķirība",
		esriComputeChangeMethodRelativeDifference: "Relatīvā atšķirība",
		esriComputeChangeMethodCategorical: "Kategoriju atšķirība",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spektrālais Eiklīda attālums",
		esriComputeChangeMethodMultispectralAngularDifference: "Spektrālā leņķa atšķirība",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Josla ar vislielākajām izmaiņām",
		esriComputeChangeKeepAll: "Paturēt visu",
		esriComputeChangeKeepChangedOnly: "Paturēt tikai mainītos pikseļus",
		esriComputeChangeKeepUnchangedOnly: "Paturēt tikai nemainītos pikseļus",
		esriComputeChangeUseColorAverage: "Vidējā vērtība no un līdz krāsām",
		esriComputeChangeUseColorFrom: "Izmantot no krāsām",
		esriComputeChangeUseColorTo: "Izmantot krāsām",
		factorFunctionBinary: "Binārs",
		factorFunctionForward: "Uz priekšu",
		factorFunctionLinear: "Lineārs",
		factorFunctionInvLinear: "Apgrieztais lineārais",
		factorFunctionTable: "Tabula",
		factorFunctionSymLinear: "Simetriski lineārais",
		factorFunctionSymInvLinear: "Simetriski apgrieztais lineārais",
		factorFunctionCos: "Kosinuss",
		factorFunctionSec: "Sekante",
		factorFunctionCosSec: "Kosinuss, sekante",
		factorFunctionSecCos: "Sekante, kosinuss",
		noSort: "Nekārtot",
		ascend: "Pieaugošā secībā",
		descend: "Dilstošā secībā",
		autoDetect: "Noteikt automātiski",
		nearest: "Tuvākais",
		linear: "Lineārs",
		esriMonthJanuary: "Janvāris",
		esriMonthFebruary: "Februāris",
		esriMonthMarch: "Marts",
		esriMonthApril: "Aprīlis",
		esriMonthMay: "Maijs",
		esriMonthJune: "Jūnijs",
		esriMonthJuly: "Jūlijs",
		esriMonthAugust: "Augusts",
		esriMonthSeptember: "Septembris",
		esriMonthOctober: "Oktobris",
		esriMonthNovember: "Novembris",
		esriMonthDecember: "Decembris",
		dimensionalMovingIgnoreNoData: "Dati",
		dimensionalMovingPropagateNoData: "Nav datu",
		dimensionalMovingFillOnlyNoData: "Aizpildīt NoData",
		circularMean: "Cirkulārā vidējā vērtība",
		circularName: "Aplis",
		arithmeticName: "Aritmētisks",
		slopeName: "Slīpums",
		aspectName: "Vērsums",
		meanCurvature: "Vidējais izliekums",
		profileCurvature: "Profila (normāla slīpuma līnija) izliekums",
		tangentialCurvature: "Tangenciālais (normāla kontūra) izliekums",
		planCurvature: "Plāna (projicēta kontūra) izliekums",
		contourGeodesicTorsion: "Kontūras ģeodēziskā vērpe",
		gaussianCurvature: "Gausa izliekums",
		casoratiCurvature: "Casorati izliekums",
		localSurfaceTypeQuadratic: "Kvadrātisks",
		localSurfaceTypeBiquadratic: "Bikvadrātisks",
		thresholdNoThreshold: "Bez sliekšņa",
		thresholdPercentLeastCost: "Procenti no mazākajām izmaksām",
		thresholdAccumulativeCost: "Uzkrājošās izmaksas",
		clrmapTypeHillshade: "Reljefa ēnojums"
	},
	categoryLabels: {
		sourceCharacteristics: "Avota raksturlielumi",
		neighborhoodSettings: "Apkārtnes iestatījumi",
		statistics: "Statistika",
		gamma: "Gamma",
		viewshedParameters: "Skata aizseguma parametri",
		observerParameters: "Vērotāja parametri",
		irregularDataInterpolation: "Neregulāru datu interpolācija",
		modelStatistics: "Modeļa statistika",
		aggregationDef: "Apkopošanas definīcija",
		filterByAttributes: "Filtrēt pēc atribūtiem",
		percentileName: "Procentile",
		rasterInfo: "Rastra informācija",
		extent: "Pārklājums",
		spatialReference: "Telpiskā atsauce"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Tā slāņa nosaukums, kas tiks izveidots un pievienots kartei.</p>",
		resultType: "<p>Izveidotās izvades veids. Izvades var būt mozaīkas attēlu slāņi vai dinamiski attēlu slāņi.</p>",
		saveResultIn: "<p>Mapes nosaukums sadaļā <b>Mans saturs</b>, kurā tiks saglabāts rezultāts.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Vides iestatījuni analīzei Map Viewer. </p>",
		outSR: "<p>Norāda analīzes un rezultātu slāņa koordinātu sistēmu.</p>",
		extent: "<p>Norāda analizējamo teritoriju.</p>",
		snapRaster: "<p>Pielāgo izvades pārklājumu, lai tas atbilstu pielipināšanas rastra slāņa šūnu līdzinājumam.</p>",
		cellSize: "<p>Norāda šūnas lielumu vai izšķirtspēju, kas tiks izmantota analīzei un izvades rastra slāņa izveidei.</p>",
		mask: "<p>Norāda maskas slāni, kurā analīzei tiks izmantotas tikai tās šūnas, kas ietilpst maskas teritorijā.</p>",
		resamplingMethod: "<p>Norāda, kā interpolēt pikseļu vērtības, ja ievades un izvades rastri nesakrīt.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Neatbalstīts veids",
		currentlyUnsupported: " ${missingType} noklusējuma redaktors gaida, bet drīzumā būs pieejams. Pagaidu viettura tekstlodziņš ievadņu norādīšanai, pamatojoties uz virkni.",
		unsupportedOverrideWarning: "Ignorēšanas redaktora komponents, kas nodrošina labāku UX darbam ar šādiem parametriem, gaida, bet drīz būs pieejams:",
		overrideWidgetMissing: "Trūkst redaktora komponenta ignorēšanas!",
		uiIncomplete: "Darba iesniegšana neizdevās. Funkciju nevar palaist, jo daži no nepieciešamajiem laukiem lietotāja interfeiss ir nepilnīgs vai tā trūkst.",
		count: "Skaits",
		selectVariables: "Izvēlēties mainīgos",
		selectFeature: "Izvēlēties elemetu slāni",
		greaterThanErrorMessage: "Ievades vērtībai jābūt lielākai par ${min}.",
		lesserThanErrorMessage: "Ievades vērtībai jābūt mazākai par ${max}.",
		greaterThanOrEqualErrorMessage: "Ievades vērtībai jābūt lielākai vai vienādai ar ${min}",
		lesserThanOrEqualErrorMessage: "Ievades vērtībai jābūt mazākai vai vienādai ar ${max}",
		allowScalar: "Izvēlēties slāni vai ievadīt konstanti",
		selectField: "Izvēlēties lauku",
		parameterRequired: "Šis parametrs ir obligāts.",
		enterAValue: "Ievadiet vērtību...",
		invalidInput: "Ievadītā vērtība nav derīga.",
		itemNotFound: "Vienība nepastāv vai nav pieejama.",
		itemPermissionDenied: "Jums nav atļaujas, lai piekļūtu šai vienībai.",
		layerNotAvailable: "Neizdevās ielādēt ${layerName} slāni.",
		multipleLayersNotAvailable: "Neizdevās ielādēt ${layerName} slāni un citus",
		learnMoreLabel: "Uzzināt vairāk",
		fieldNotAvailable: "Neizdevās ielādēt lauku.",
		allowAnalysis: "Attēlu pakalpojumā analīze nav atļauta.",
		allowAnalysisReason: "Šeit nav norādīts viens vai vairāki kartes slāņi, jo tie neļauj veikt analīzi.",
		learnMoreText: "Uzzināt vairāk",
		atLeastOneRasterInput: "Vismaz vienam ievades slānim jābūt rastra slānim.",
		browseAnalysisLayers: "Pārlūkot slāņus",
		activeMapViewExtent: "Lietot pašreizējo kartes pārklājumu",
		chooseRaster: "Izvēlēties izgriešanas rastru",
		chooseGeometry: "Izvēlēties izgriešanas ģeometriju",
		resultType: "Rezultāta veids",
		saveInFolder: "Saglabāt mapē",
		outputName: "Izvades nosaukums",
		outputLayerType: "Izvades slāņa veids",
		dynamicImageryLayer: "Dinamisks attēlu slānis",
		tiledImageryLayer: "Mozaīkas attēlu slānis",
		custom: "Pielāgots",
		loading: "Ielādē...",
		layerMissing: "Šeit nav norādīts viens vai vairāki kartes slāņi, jo tie neļauj veikt analīzi. Uzzināt vairāk.",
		browseCoordinateSystems: "Pārlūkot koordinātu sistēmu",
		unableToRepopulateOutSR: "Nevar aizpildīt izvades koordinātu sistēmu.",
		defaultTitle: "Skatīt vairāk",
		"ARC (equal arc-second)": "ARC (vienāds ar arc-sekundi)",
		Africa: "Āfrika",
		Antarctica: "Antarktīda",
		Argentina: "Argentīna",
		Asia: "Āzija",
		"Asteroid Belt": "Asteroīdu josla",
		"Atlantic Ocean": "Atlantijas okeāns",
		Australia: "Austrālija",
		"Australia and New Zealand": "Austrālija un Jaunzēlande",
		Austria: "Austrija",
		"BLM (US Feet)": "BLM (ASV pēdas)",
		Bangladesh: "Bangladeša",
		"Beijing 1954": "Beijing 1954",
		Bhutan: "Butāna",
		CGCS2000: "CGCS2000",
		Canada: "Kanāda",
		Caribbean: "Karību salas",
		"Caribbean Sea": "Karību jūra",
		"Central America": "Centrālamerika",
		"Central and North America": "Centrālā un Ziemeļamerika",
		Colombia: "Kolumbija",
		Continental: "Kontinents",
		"County Systems": "Apgabalu sistēmas",
		"Democratic Republic of the Congo": "Kongo Demokrātiskā Republika",
		"EPSG Arctic": "EPSG Arktika",
		Earth: "Zeme",
		"Ellipsoidal-based": "Elipsoīda bāzes",
		Europe: "Austrumeiropa",
		Finland: "Somija",
		France: "Francija",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss Krīgers",
		"Geographic Coordinate Systems": "Ģeogrāfiskā koordinātu sistēma",
		Germany: "Vācija",
		"Gravity-related": "Ar gravitāciju saistīts",
		"Greenwich-based": "Balstīts uz Griniču",
		"Highways England": "Anglijas lielceļi",
		Illinois: "Ilinoisa",
		"Indian Ocean": "Indijas okeāns",
		"Indian Subcontinent": "Indijas subkontinents",
		Indiana: "Indiāna",
		Indonesia: "Indonēzija",
		Iowa: "Aiova",
		"Ireland and United Kingdom": "Īrija un Apvienotā Karaliste",
		Italy: "Itālija",
		Japan: "Japāna",
		Jupiter: "Jupiters",
		Kansas: "Kanzasa",
		"Las Vegas": "Lasvegasa",
		Libya: "Lībija",
		Malaysia: "Malaizija",
		"Malaysia and Singapore": "Malaizija un Singapūra",
		Mars: "Mars",
		Mercury: "Merkurs",
		Minnesota: "Minesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (ASV pēdas)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (starpt. pēdas)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (metri)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (ASV pēdas)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (starpt. pēdas)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (metri)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (ASV pēdas)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (starpt. pēdas)",
		"NAD 1983 (Meters)": "NAD 1983 (metri)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (metri)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (ASV pēdas)",
		"NAD 1983 (US Feet)": "NAD 1983 (ASV pēdas)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (starpt. pēdas)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (metri)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (ASV pēdas)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (starpt. pēdas)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (metri)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (ASV pēdas)",
		"National Grids": "Nacionālie tīkli",
		Navajo: "Navahu",
		Neptune: "Neptūns",
		"New Beijing": "New Beijing",
		"New Zealand": "Jaunzēlande",
		"North America": "Ziemeļamerika",
		"Northern Hemisphere": "Ziemeļu puslode",
		Norway: "Norvēģija",
		Oceans: "Okeāni",
		Oregon: "Oregona",
		"Other GCS": "Cita ģeogrāfisko kooradinātu sistēma",
		"Pacific Ocean": "Klusais okeāns",
		Pluto: "Pluto",
		Polar: "Polārs",
		Portugal: "Portugāle",
		"Projected Coordinate Systems": "Projicētā koordinātu sistēma",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Aizstāts",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturns",
		"Solar System": "Saules sistēma",
		"South Africa": "Dienvidāfrika",
		"South America": "Dienvidamerika",
		"South Korea": "Dienvidkoreja",
		"Southern Hemisphere": "Dienvidu puslode",
		"Spheroid-based": "Uz spheroīda bāzes",
		"State Plane": "Vlasts plakne",
		"State Systems": "Valsts sistēmas",
		Sweden: "Zviedrija",
		"Switzerland and Liechtenstein": "Šveice un Lihtenšteina",
		Texas: "Teksasa",
		Tribal: "Iezemiešu",
		Turkey: "Turcija",
		"US Feet": "ASV pēdas",
		"USA and territories": "ASV un teritorijas",
		UTM: "UTM",
		Ukraine: "Ukraina",
		"Unknown Height Systems": "Nezināmas augstuma sistēmas",
		Uranus: "Urāns",
		Venus: "Venēra",
		"Vertical Coordinate Systems": "Vertikālā koordinātu sistēma",
		Vietnam: "Vjetnama",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Viskonsina",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Pasaule",
		"World (Sphere-based)": "Pasaule (uz sfēras bāzes)",
		Wyoming: "Vaiominga",
		"Xian 1980": "Xian 1980",
		done: "Gatavs",
		noResults: "Rezultāti nav atrasti",
		searchPlaceholder: "Nosaukums vai WKID",
		browseTemplate: "Pārlūkot rastra funkciju veidnes",
		saveTemplate: "Saglabāt rastra funkciju veidni",
		preview: "Priekšskatījums",
		previewDescription: "Priekšskatiet rezultātu pirms analīzes veikšanas.",
		showPreview: "Rādīt priekšskatījumu",
		previewLayer: "Priekšskatīt slāni ${number}",
		newPreview: "Jauns priekšskatījums",
		previewPopup: "Iespējojiet analīzes rezultātu priekšskatījumu, pamatojoties uz ievades parametriem.",
		updatePreviewLayer: "Atjaunināt atlasīto priekšskatījuma slāni",
		createPreviewLayer: "Izveidot jaunu priekšskatījuma slāni",
		maximumPreviewAllowed: "Maksimālais atļautais priekšskatījuma slāņu skaits: ${maxCount}",
		previewFailure: "Šis priekšskatījuma slānis nav pieejams. Pārbaudiet ievades parametrus un vēlreiz atjauniniet šo priekšskatījuma slāni.",
		header: "Izvēlēties vienību",
		content: "Jums ir nesaglabātas izmaiņas ${rftTitle}. Ja sāksit ar jaunu veidni, šīs izmaiņas tiks zaudētas.",
		dontSave: "Nesaglabāt",
		"continue": "Turpināt",
		stretch: "Ietilpināt logā",
		pan: "Panoramēt",
		newTemplate: "Izveidot jaunu veidni",
		openTemplate: "Atvērt veidni",
		addFunction: "Pievienot rastra funkcijas",
		addConstant: "Pievienot konstanti",
		addRaster: "Pievienot rastra mainīgo",
		move: "Pārvietot",
		zoom: "Tālummaiņa",
		saveAs: "Saglabāt kā",
		clear: "Notīrīt",
		addRasterFunctionTitle: "Pievienot rastra funkcijas",
		templatePropertiesTitle: "Veidnes rekvizīti",
		browseRFT: "Pārlūkot rastra funkciju veidnes",
		defaultToolDescription: "${toolTitle} analīzes rīks.",
		openToolText: "Atvērt rīku",
		toolDropdownText: "Rīka nolaižamā izvēlne",
		addToMap: "Apstiprināt un pievienot kartei",
		confirm: "Apstiprināt",
		select: "Izvēlēties",
		selectTask: "Izvēlieties uzdevumu",
		unsupportedLayer: "Šis parametrs neatbalsta šādus slāņus: ${layerName}.",
		viewDetails: "Skatīt visu vienības informāciju",
		rename: "Pārdēvēt",
		duplicate: "Dublēt",
		launch: "Atvērt, lai palaistu",
		templateEditor: "Veidņu redaktors",
		createItem: "Saglabāt rastra funkciju veidni",
		actionLabel: "Filtrs",
		filterPopoverHeading: "Filtrēt funkcijas",
		defaultSearchPlaceholder: "Meklēt pēc nosaukuma",
		settings: "Iestatījumi",
		summary: "Kopsavilkums",
		definitionQuery: "Definīcijas vaicājums",
		matchVariables: "Saskaņot mainīgos",
		unionDimension: "Apvienojuma izmērs",
		nameEditorPlaceholder: "Ievadiet virsrakstu",
		summaryEditorPlaceholder: "Ievadiet īsu aprakstu.",
		definitionQueryPlaceholder: "Ievadiet...",
		upload: "Augšupielādēt",
		chooseImage: "Noklikšķiniet, lai izvēlētos failu",
		update: "Atjaunināt",
		thumbnailErrors: {
			wrongImageType: "Atlasīts nepareizs attēla veids",
			notAvailable: "Sīktēls nav pieejams",
			loadError: "Nevarēja ielādēt attēlu",
			chooseFile: "Noklikšķiniet, lai izvēlētos failu"
		}
	}
};
const copy = "Kopēt";
const save = "Saglabāt";
const title = "Virsraksts";
const folder = "Mape";
const tags = "Atslēgas vārdi";
const savingMessage = "Saglabā vienību šeit";
const shareWith = "Kopīgot ar";
const share = "Koplietot";
const setSharingLevel = "Iestatīt koplietošanas līmeni";
const setGroupSharing = "Iestatīt grupas koplietošanu";
const owner = "Īpašnieks";
const organization = "Organizācija";
const everyone = "Ikviens (publiski)";
const groups = "Grupas:";
const type = "Veids";
const mosaic = "Mozaīka";
const itemGroup = "Vienības grupa";
const item = "Vienība";
const definitionQuery = "Definīcijas vaicājums";
const groupItemsBy = "Grupēt vienības pēc";
const groupFieldName = "Grupas lauka nosaukums";
const tagFieldName = "Atslēgvārdu nosaukums";
const noTitleTagErrorMsg = "Lai karti varētu atrast, izmantojot meklēšanas funkciju, jānodrošina vienības virsraksts un atslēgvārdi.";
const noTitleErrorMsg = "Jums ir jāsniedz vienības virsraksts.";
const noTagErrorMsg = "Nodrošiniet vismaz vienu atslēgvārdu, lai palīdzētu lietotājiem meklējot atrast jūsu vienību.";
const error = "Kļūda";
const warning = "Brīdinājums";
const success = "Izdevās";
const details = "Informācija:";
const tryAgain = "Mēģināt vēlreiz";
const toolModeler = {
	save: "Saglabāt",
	editProperties: "Rediģēt īpašības",
	saveAs: "Saglabāt kā",
	savingNotification: "Saglabā vienības izmaiņas…",
	savingTitle: "Saglabā",
	saveFailedMessage: "Neizdevās saglabāt izmaiņas.",
	saveWithErrorsMessage: "Izmaiņas tika saglabātas, taču radās tālāk minētās kļūdas.",
	viewItemMessage: "Skatīt saglabāto vienību",
	here: "šeit.",
	itemCreatedMessage: "Izveidota jauna vienība.",
	clickToViewItemMessage: "Noklikšķiniet uz Labi, lai skatītu vienības informācijas lapu; noklikšķiniet uz Atcelt, lai turpinātu.",
	readingFailed: "Neizdevās ielādēt atlasīto rastra funkciju veidni.",
	failedToLoadXML: "Neizdevās ielādēt atlasīto rastra funkciju veidni XML formātā.",
	learnMore: "Uzzināt vairāk",
	overwriteTitle: "Apstiprināt pārrakstīšanu",
	overwriteMessage: "Vai vēlaties pārrakstīt esošo vienību?",
	overwriteSuccessMessage: "Vienība ir atjaunināta."
};
const toolEditor = {
	run: "Palaist",
	save: "Saglabāt",
	deleteSelected: "Izdzēst atlasītās vienības",
	addRaster: "Pievienot rastru",
	addScalar: "Pievienot skalāru",
	layout: "Automātisks izkārtojums",
	errorTitle: "Kļūda",
	invalidToolMessage: "Rastra funkciju sagatave nav derīga.",
	out: "Ārā",
	zoomIn: "Tuvināt",
	zoomOut: "Tālināt",
	zoomToFit: "Ietilpināt logā",
	panOn: "Pārslēgt panoramēšanas režīmu",
	panOff: "Izslēgt panoramēšanas režīmu",
	defaultModelName: "Rīku modelis",
	defaultRasterName: "Rastrs"
};
const toolDetailsEditor = {
	defaultToolName: "Rastra funkciju sagatave",
	defaultToolDescription: "Pievienojiet īsu kopsavilkumu par rastra funkciju.",
	defaultHelpText: "Noklikšķiniet uz palīdzības ikonas, lai rediģētu palīdzības tekstu",
	editHelpTitle: "Rediģēt palīdzības sadaļu",
	saveLabel: "Saglabāt",
	cancelLabel: "Atcelt",
	thumbnail: {
		wrongImageType: "Atlasīts nepareizs attēla veids",
		notAvailable: "Sīktēls nav pieejams",
		loadError: "Nevarēja ielādēt attēlu",
		chooseFile: "Noklikšķiniet, lai izvēlētos failu"
	}
};
const saveUtils = {
	thumbnail: "Sīktēls",
	sharing: "Koplietošana"
};
const close = "Aizvērt";
const unsavedWarningExisting = "Vai vēlaties saglabāt izmaiņas vienībā <b>${itemTitle}</b> ?";
const unsavedWarningNew = "Vai vēlaties saglabāt izmaiņas?";
const saveAs = "Saglabāt kā";
const dontSave = "Nesaglabāt";
const unsavedTitle = "Nesaglabātās izmaiņas";
const invalidRFTMessage = "Izveidotā rastra funkcijas sagatave nav derīga.";
const errorTitle = "Kļūda";
const breadcrumb = "Rastra funkciju redaktors";
const breadcrumbEditor = "Saturs > Rastra funkciju redaktors";
const viewerModeTitle = "Tikai lasāms";
const viewerModeMessage = "Rastra funkcijas veidnes vienība ir tikai lasāma. Izmaiņas nevar saglabāt.";
const userStartDirection = "Atlasiet funkciju, lai sāktu veidot rastra funkcijas sagatavi.";
const selectFunction = "Pievienot funkciju";
const deselectFunction = "Noņemt funkciju";
const dialogTitle = "Sistēma";
const category = "Kategorijas";
const search = "Meklēt rastra funkcijas";
const categoryNames = {
	analysis: "Analīze",
	appearance: "Izskats",
	classification: "Klasifikācija",
	conversion: "Konvertācija",
	correction: "Korekcija",
	dataManagement: "Datu pārvaldība",
	distance: "Attālums",
	distanceLegacy: "Attālums (Legacy)",
	hydrology: "Hidroloģija",
	math: "Matemātika",
	mathConditional: "Matemātika: nosacījumi",
	mathLogical: "Matemātika: loģika",
	mathTrigonometric: "Matemātika: trigonometrija",
	reclass: "Pārklasificēšana",
	statistical: "Statistiski",
	surface: "Virsma"
};
const commonStrings_lv = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_lv);


//# sourceMappingURL=common-strings.lv-21212188.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,