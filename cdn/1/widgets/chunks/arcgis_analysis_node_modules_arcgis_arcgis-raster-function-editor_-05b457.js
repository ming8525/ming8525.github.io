"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-05b457"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.pl-693c2a24.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.pl-693c2a24.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "OK";
const cancel = "Anuluj";
const enterURL = "Wprowadź adres URL usługi rastrowej";
const serviceURL = "Adres URL usługi";
const selectRaster = "Wybierz raster";
const failedToLoadLayer = "Nie udało się wczytać warstwy";
const loadingLayer = "Wczytywanie warstwy";
const selectFeature = "Wybierz warstwę obiektową";
const enterFURL = "Wprowadź adres URL usługi obiektowej";
const addRaster = "Dodaj zmienną rastra";
const addScalar = "Dodaj stałą";
const raster = "Raster";
const scalar = "Skalar";
const defaultModelName = "Szablon funkcji rastrowej";
const general = "Ogólne";
const parameters = "Parametry";
const variables = "Zmienne";
const name = "Nazwa";
const description = "Opis";
const parameter = "Parametr";
const isPublic = "Jest publiczne";
const isDataset = "Jest zestawem danych";
const unknownPixelType = "Nieznane";
const outputPixelType = "Typ piksela wynikowego";
const u8PixelType = "8 bitów bez znaku";
const s8PixelType = "8 bitów ze znakiem";
const u16PixelType = "16 bitów ze znakiem";
const s16PixelType = "16 bitów ze znakiem";
const u32PixelType = "32 bity ze znakiem";
const s32PixelType = "32 bity ze znakiem";
const f32PixelType = "32 bity zmiennoprzecinkowa";
const f64PixelType = "64 bity podwójna";
const properties = "Właściwości";
const multidimensionalRules = "Reguły wielowymiarowe";
const matchVariables = "Dopasuj zmienne";
const unionDimensions = "Wymiary sumy";
const rasterFunctionEditor = {
	invalidRFTMessage: "Szablon funkcji rastrowej jest nieprawidłowy.",
	rfxArgsEditor: {
		outputRaster: "Raster wynikowy",
		raster: "Raster",
		unsupportedDataTypeWarning: "Poniższe argumenty nie są wyświetlane, ponieważ nie są aktualnie obsługiwane.",
		unsupportedFunction: "Zawiera obecnie nieobsługiwane funkcje rastrowe."
	},
	rfxRasterInput: {
		selectLayer: "Wybierz warstwę",
		browseLayers: "Przeglądaj warstwy",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Metoda",
		bandLabel: "Pasmo",
		combinationLabel: "Kombinacja"
	},
	rfxRemapGrid: {
		minimum: "Minimum",
		maximum: "Maksimum",
		output: "Dane wynikowe",
		noData: "Brak danych",
		remapValuesLabel: "Ponownie mapuj wartości"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Zmienne rastrowe",
		deleteSelectedVars: "Usuń wybrane zmienne"
	},
	rfxClippingGeometry: {
		clippingLayer: "Przycinanie warstwy",
		clippingRaster: "Przycinanie rastra",
		clippingGeometry: "Przycinanie geometrii",
		customExtent: "Zasięg niestandardowy",
		outputExtent: "Zasięg wynikowy",
		currentExtent: "Bieżący zasięg mapy",
		drawLabel: "Narysuj"
	},
	rfxCustomExtent: {
		top: "U góry",
		right: "Po prawej",
		bottom: "Dół",
		left: "Po lewej"
	},
	rfxRasterArrayEditor: {
		moveUp: "Przesuń w górę",
		moveDown: "Przesuń w dół",
		remove: "Usuń"
	},
	rfxStatisticsGrid: {
		stdDev: "Odch. stand.",
		min: "Min",
		max: "Maks",
		mean: "Średnia"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Tabela sumy ważonej",
		id: "ID",
		layer: "Warstwa",
		field: "Pole",
		weight: "Waga",
		value: "Wartość",
		selectLayer: "Wybierz warstwę"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Tabela nakładania ważonego",
		id: "ID",
		layer: "Warstwa",
		field: "Pole",
		influence: "Wpływ",
		sumOfInfluence: "Suma oddziaływania",
		value: "Wartość",
		remapTable: "Tabela ponownego przyporządkowania",
		scale: "Skala",
		scales: "Skale",
		selectRaster: "Wybierz raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Przeglądaj w poszukiwaniu warstwy obiektowej",
		addPointLayer: "Przeglądaj w poszukiwaniu warstwy punktowej"
	},
	rfxFieldSelect: {
		value: "Wartość",
		count: "Liczba"
	},
	rfxAttributeTable: {
		tableType: "Typ tabeli",
		manual: "Manualnie",
		external: "Zewnętrzne",
		minVal: "Wartość minimalna",
		maxVal: "Wartość maksymalna",
		baseClassName: "Nazwa podstawowa klasy",
		colorScheme: "Schemat kolorów",
		defaultClassName: "Etykieta_",
		generateTable: "Generuj tabelę",
		browseTable: "Przeglądaj tabelę",
		value: "Wartość",
		classname: "ClassName",
		color: "Kolor"
	},
	rfxFieldNumberSwitchable: {
		number: "Numeryczny",
		field: "Pole",
		string: "Ciąg znakowy",
		linearUnit: "Jednostka liniowa"
	},
	rfxPropertySet: {
		name: "Nazwa",
		value: "Wartość"
	},
	rfxConversionGrid: {
		size: "Rozmiar"
	},
	rfxTransposeBit: {
		bitPattern: "Wzorzec bitu",
		outputBit: "Bit wynikowy",
		inputBit: "Bit wejściowy"
	},
	rfxSpatialReference: {
		placeHolder: "Dopracuj według słowa kluczowego",
		coordinateSystem: "Układ współrzędnych",
		gcs: "Układ współrzędnych geograficznych",
		pcs: "Układ współrzędnych odwzorowanych",
		vcs: "Pionowy układ współrzędnych"
	}
};
const rfxLicenseInfo = "Ten szablon funkcji rastrowych może służyć do przetwarzania zobrazowania na serwerze ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Oblicza arcus cosinus hiperboliczny komórek rastra.",
		aCosHDesc: "Funkcja oblicza arcus cosinus hiperboliczny pikseli w rastrze.",
		aCosName: "ACos",
		aCosSnip: "Oblicza funkcję odwrotną do funkcji cosinus dla pikseli w rastrze.",
		aCosDesc: "Ta funkcja rastrowa oblicza arcus cosinus komórek rastra. W matematyce wszystkie funkcje trygonometryczne mają zdefiniowany zakres prawidłowych wartości wejściowych nazywany dziedziną. Wartości wynikowe każdej funkcji również mają zdefiniowany zakres. W przypadku tego narzędzia dziedzina to [-1, 1], a zakres to [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Oblicza arcus sinus hiperboliczny komórek rastra.",
		aSinHDesc: "Oblicza arcus sinus hiperboliczny pikseli w rastrze.",
		aSinName: "ASin",
		aSinSnip: "Oblicza arcus sinus hiperboliczny komórek rastra.",
		aSinDesc: "Oblicza arcus sinus pikseli w rastrze.",
		aTan2Name: "ATan2",
		aTan2Snip: "Oblicza arcus tangens (w oparciu o x,y) komórek rastra.",
		aTan2Desc: "Oblicza arcus tangens (na podstawie współrzędnych x,y) pikseli w rastrze.",
		aTanHName: "ATanH",
		aTanHSnip: "Oblicza arcus tangens hiperboliczny komórek rastra.",
		aTanHDesc: "Oblicza arcus tangens hiperboliczny pikseli w rastrze.",
		aTanName: "ATan",
		aTanSnip: "Oblicza arcus tangens komórek rastra.",
		aTanDesc: "Oblicza arcus tangens pikseli w rastrze.",
		absName: "Abs",
		absSnip: "Oblicza wartość bezwzględną komórek w rastrze.",
		absDesc: "Funkcja Abs oblicza wartość bezwzględną pikseli w rastrze.",
		reflectanceName: "Funkcja Widoczne odbicie",
		reflectanceSnip: "Przekształca surowe zobrazowanie na wartości początku atmosfery, biorąc pod uwagę parametry czujnika, pozycję słońca i czas rejestracji.",
		reflectanceDesc: "Ta funkcja rastrowa koryguje wartości numeryczne jasności obrazu (DN) dla niektórych sensorów satelitów. Dostosowanie jest dokonywane w oparciu o wysokość słońca, datę rejestracji oraz właściwości czujnika i polega na doborze wartości wzmocnienia i odchylenia w każdym paśmie. Ta funkcja jest używana do korygowania ustawień współczynnika odbicia, jasności, wartości niektórych zobrazowań satelitarnych zależnych od oświetlenia sceny i wzmocnienia czujnika. Obrazy są dostosowywane do teoretycznych przeciętnych warunków oświetlenia, co zapewnia, że między scenami uzyskanymi w różnym czasie i przy użyciu różnych czujników nie będzie większych różnic. Jest to użyteczne podczas dokonywania klasyfikacji obrazu, równoważenia koloru i łączenia kilku obrazów w całość. Ta funkcja może być używana tylko przy zastosowaniu określonego zobrazowania. Odpowiednie czujniki to: Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 i Pleiades.<div><br/>Funkcja przeprowadza dwie korekty. Pierwsza jest dokonywana w oparciu o ustawienia wzmocnienia. Oryginalne wartości jasności są odtwarzane z wartości zapisanych w obrazie poprzez zastosowanie odwróconych równań określających wzmocnienie. Druga korekcja jest związana z różnicami kąta padania światła słonecznego i jego jasności. Oryginalne wartości jasności są dostosowywane do przeciętnych warunków oświetlenia poprzez normalizację scen uzyskanych w różnych warunkach oświetlenia. Typ danych wynikowych obrazu jest taki sam, jak typ danych wejściowych obrazu, natomiast na ogół wartości wynikowe są niższe od wartości wejściowych i zostają ograniczone do zakresu prawidłowych wartości.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Oblicza argumenty funkcji statystycznych, wliczając w to Arg Maksimum, Arg Minimum, Arg Mediana i Czas trwania.",
		argStatisticsDesc: "Funkcja oblicza argumenty funkcji statystycznych. Funkcja Argumenty funkcji statystycznych ma cztery metody: ArgMaksimum, ArgMinimum, ArgMediana i Czas trwania.",
		arithmeticName: "Arytmetyczna",
		arithmeticSnip: "Wykonuje operację arytmetyczną między dwoma rastrami lub rastrem i skalarem.",
		arithmeticDesc: "Funkcja arytmetyczna wykonuje operację arytmetyczną między dwoma rastrami lub rastrem i skalarem bądź odwrotnie.",
		aspectSlopeName: "Aspekt-Spadki",
		aspectSlopeSnip: "Tworzy raster, który wyświetla jednocześnie aspekt (kierunek) i spadki (nachylenie) ciągłej powierzchni reprezentowanej przez numeryczny model wysokościowy.",
		aspectSlopeDesc: "Funkcja Ekspozycja spadki tworzy warstwę rastrową, która wyświetla jednocześnie ekspozycję i spadki powierzchni. Ekspozycja identyfikuje kierunek spadku dla maksymalnej szybkości zmian wartości w danym pikselu względem pikseli sąsiadujących. Ekspozycję można traktować jako kierunek spadku. Wartości rastra wynikowego będą wskazywać kierunek ekspozycji reprezentowany przez barwę (kolor). Spadek reprezentuje szybkość zmian wysokości dla każdego piksela numerycznego modelu terenu (DEM). Spadek reprezentuje nachylenie powierzchni i symbolizuje trzy klasy przedstawiane za pomocą nasycenia koloru (jasność).<div><br/>Wartości pikseli w wynikowym rastrze ekspozycja-spadki odzwierciedlają połączenie ekspozycji i spadków. Piksele o wartościach poniżej 20 są uważane za płaskie i wyświetlane w kolorze szarym. Wartości ekspozycja-spadki wynoszące 21 i więcej zostaną wyświetlone z różnym nasyceniem w następujący sposób: 21 do 30 — Nasycenie niskiego spadku, 31 do 40 — Nasycenie umiarkowanego spadku, 41 i powyżej — Nasycenie wysokiego spadku</div>",
		aspectName: "Ekspozycje",
		aspectSnip: "Pokazuje, w którym kierunku zwrócony jest piksel, gdzie 0 oznacza północ, a kąty zwiększają się zgodnie z ruchem wskazówek zegara do 360.",
		aspectDesc: "Funkcja Ekspozycja identyfikuje kierunek spadku dla maksymalnej szybkości zmian wartości w danej komórce względem komórek sąsiadujących. Ekspozycję można traktować jako kierunek spadku. Wartości rastra wynikowego wskazują kierunek ekspozycji.<div><br/>Danymi wejściowymi dla tej funkcji jest raster wejściowy. Funkcja Ekspozycja jest często stosowana w numerycznym modelu terenu (DEM, digital elevation model). Domyślnie ekspozycja występuje w postaci obrazu w skali szarości. Można dodać funkcję Mapa kolorów w celu określenia konkretnego schematu kolorów lub umożliwienia użytkownikowi przeglądania mozaiki i modyfikowania symbolizacji za pomocą własnego schematu kolorów.</div>",
		tableName: "Tabela atrybutów",
		tableSnip: "Korzysta z tabeli do nazwania wartości i ustawienia symboli w zestawie danych. Kolumny dla tabeli są oddzielone przecinkami: PixelValue (wartość piksela), AttributeName (nazwa atrybutu), RedValue (wartość koloru czerwonego), GreenValue (wartość koloru zielonego), BlueValue (wartość koloru niebieskiego).",
		tableDesc: "Funkcja Tabela atrybutów umożliwia zdefiniowanie tabeli atrybutów służących do przedstawiania jednopasmowego zestawu danych mozaiki lub zestawu danych rastrowych. <div><br/>Jest to przydatne do przedstawienia zobrazowania, w którym zmieniono klasyfikację użytkowania gruntów, np. tereny leśne, tereny podmokłe, tereny uprawne i miejskie. Ponadto jeśli tabela zawiera pola o nazwach: czerwony, zielony i niebieski, wartości w tych polach zostaną użyte jako mapa kolorów przy wyświetlaniu obrazu.</div>",
		bandArithmeticName: "Arytmetyka kanału",
		bandArithmeticSnip: "Oblicza indeksy przy użyciu predefiniowanych wzorów lub wyrażenia zdefiniowanego przez użytkownika.",
		bandArithmeticDesc: "Funkcja Arytmetyka pasma dokonuje operacji arytmetycznych na pasmach zestawu danych rastrowych. Można wybrać jeden ze wcześniej zdefiniowanych algorytmów albo wprowadzić własną jednowierszową formułę. Obsługiwane są operatory -,+,/,* i jednoargumentowy operator -.",
		thresholdName: "Binarne przetwarzanie progowe",
		thresholdSnip: "Porządkuje dane ciągłe na dane pierwszego planu i tła, minimalizując kowariancję między tymi dwoma klasami.",
		thresholdDesc: "Gdy zestaw danych rastrowych ma rozkład modalny, ta funkcja tworzy nowy raster dzielący dane na dwie odrębne klasy. Tworzy ona klasę niskich wartości wyświetlaną za pomocą czarnych pikseli oraz klasę wysokich wartości wyświetlaną za pomocą białych pikseli.",
		bitwiseAndName: "And na poziomie bitowym",
		bitwiseAndSnip: "Wykonuje operację And na poziomie bitowym na wartościach binarnych dwóch wejściowych rastrów.",
		bitwiseAndDesc: "Funkcja And na poziomie bitowym wykonuje operację bitowej koniunkcji na wartościach binarnych dwóch rastrów wejściowych",
		bitwiseLeftShiftName: "Przesunięcie w lewo na poziomie bitowym",
		bitwiseLeftShiftSnip: "Wykonuje operację przesunięcia w lewo na poziomie bitowym na wartościach binarnych dwóch wejściowych rastrów.",
		bitwiseLeftShiftDesc: "Funkcja Przesunięcie w lewo na poziomie bitowym wykonuje operację bitowego przesunięcia w lewo na wartościach binarnych dwóch rastrów wejściowych",
		bitwiseNotName: "Not na poziomie bitowym",
		bitwiseNotSnip: "Wykonuje operację bitowej negacji (uzupełnienia) na wartościach binarnych dwóch rastrów wejściowych.",
		bitwiseNotDesc: "Funkcja ta wykonuje operację bitowej negacji (uzupełnienia) na wartości binarnej rastra wejściowego.",
		bitwiseOrName: "Or na poziomie bitowym",
		bitwiseOrSnip: "Wykonuje operację bitowej alternatywy względem wartości binarnych dwóch rastrów wejściowych.",
		bitwiseOrDesc: "Funkcja ta wykonuje operację bitowej alternatywy na wartościach binarnych dwóch rastrów wejściowych. ",
		bitwiseRightShiftName: "Przesunięcie w prawo na poziomie bitowym",
		bitwiseRightShiftSnip: "Wykonuje operację przesunięcia w prawo na poziomie bitowym na wartościach binarnych dwóch wejściowych rastrów.",
		bitwiseRightShiftDesc: "Funkcja ta wykonuje operację przesunięcia w prawo na poziomie bitowym na wartościach binarnych dwóch rastrów wejściowych.",
		bitwiseXorName: "Bitowa funkcja Xor",
		bitwiseXorSnip: "Wykonuje operację bitowej alternatywy wykluczającej względem wartości binarnych dwóch rastrów wejściowych.",
		bitwiseXorDesc: "Funkcja ta wykonuje operację bitowej alternatywy wykluczającej na wartościach binarnych dwóch rastrów wejściowych.",
		booleanAndName: "Logiczne AND",
		booleanAndSnip: "Wykonuje operację Logiczne AND na wartościach komórek dwóch rastrów wejściowych. Jeśli obie wartości wejściowe to prawda (true — wartość inna niż zero), to wartość wynikowa wynosi 1. Jeśli co najmniej jedna wartość to fałsz (false — wartość zero), to wartość wynikowa wynosi 0.",
		booleanAndDesc: "Funkcja ta wykonuje operację Logiczne AND na wartościach pikseli dwóch rastrów wejściowych. Jeśli obie wartości wejściowe to prawda (true — wartość inna niż zero), to wartość wynikowa wynosi 1. Jeśli co najmniej jedna wartość to fałsz (false — wartość zero), to wartość wynikowa wynosi 0. ",
		booleanNotName: "Logiczne Not",
		booleanNotSnip: "Wykonuje operację Logiczne Not (uzupełnienie) na wartościach komórek rastra wejściowego. Jeśli wartości wejściowe to prawda (true — wartość inna niż zero), to wartość wynikowa wynosi 0. Jeśli wartości wejściowe to fałsz (false — wartość zero), to wartość wynikowa wynosi 1.",
		booleanNotDesc: "Ta funkcja wykonuje operację Logiczne Not (uzupełnienie) na wartościach pikseli rastra wejściowego. Jeśli wartości wejściowe to prawda (true — wartość inna niż zero), to wartość wynikowa wynosi 0. Jeśli wartości wejściowe to fałsz (false — wartość zero), to wartość wynikowa wynosi 1.",
		booleanOrName: "Logiczne Or",
		booleanOrSnip: "Wykonuje operację Logiczne Or na wartościach komórek dwóch rastrów wejściowych. Jeśli co najmniej jedna wartość wejściowa to prawda (true — wartość inna niż zero), to wartość wynikowa wynosi 1. Jeśli obie wartości wejściowe to fałsz (false — wartość zero), to wartość wynikowa wynosi 0.",
		booleanOrDesc: "Funkcja ta wykonuje operację Logiczne Or na wartościach komórek dwóch rastrów wejściowych. Jeśli co najmniej jedna wartość wejściowa to prawda (true — wartość inna niż zero), to wartość wynikowa wynosi 1. Jeśli obie wartości wejściowe to fałsz (false — wartość zero), to wartość wynikowa wynosi 0.",
		booleanXorName: "Logiczna funkcja Xor",
		booleanXorSnip: "Wykonuje operację logicznej alternatywy wykluczającej względem wartości komórek dwóch rastrów wejściowych. Jeśli jedna wartość wejściowa to prawda (true — wartość inna niż zero), a druga to fałsz (false — wartość zero), to wartość wynikowa wynosi 1. Jeśli obie wartości wejściowe to prawda (true) lub obie to fałsz (false), to wartość wynikowa wynosi 0.",
		booleanXorDesc: "Funkcja ta wykonuje operację Logiczna funkcja Xor na wartościach komórek dwóch rastrów wejściowych. Jeśli jedna wartość wejściowa to prawda (true — wartość inna niż zero), a druga to fałsz (false — wartość zero), to wartość wynikowa wynosi 1. Jeśli obie wartości wejściowe to prawda (true) lub obie to fałsz (false), to wartość wynikowa wynosi 0.",
		bufferedRasterName: "Buforowy",
		bufferedRasterSnip: "Buforuje bloki pikseli, do których ostatnio był uzyskiwany dostęp.",
		bufferedRasterDesc: "Funkcja Buforowane służy do optymalizowania wydajności przetwarzanie złożonych łańcuchów funkcji. Przechowuje ona w pamięci dane wyjściowe będące wynikiem przetworzenia tej części łańcucha funkcji, która ją poprzedza. <div><br/>W Edytorze funkcji umieść tę funkcję w miejscu, gdzie mają być przechowywane dane wynikowe.</div>",
		rasterCalculatorName: "Kalkulator",
		rasterCalculatorSnip: "Wyznacza raster na podstawie matematycznego wyrażenia opartego na rastrze.",
		rasterCalculatorDesc: "Funkcja Kalkulator pozwala tworzyć i uruchamiać wyrażenia oraz uwzględniać je w łańcuchach funkcji.",
		cellStatisticsName: "Statystyka komórek",
		cellStatisticsSnip: "Na podstawie wielu rastrów oblicza dane statystyczne przypadające na komórkę. Dostępnymi statystykami są: Większość, Maksimum, Wartość średnia, Mediana, Minimum, Mniejszość, Percentyl, Zakres, Odchylenie standardowe, Suma i Zróżnicowanie.",
		cellStatisticsDesc: "Ta funkcja oblicza dane statystyczne na podstawie wielu rastrów dla wszystkich pikseli po kolei. Dostępne statystyki to: większość, maksimum, wartość średnia, mediana, minimum, mniejszość, zakres, odchylenie standardowe, suma i zróżnicowanie.",
		classifyName: "Klasyfikuj",
		classifySnip: "Przypisuje każdy piksel do klasy. Można używać danych pomocniczych, takich jak obraz podzielony na segmenty.",
		classifyDesc: "Ta funkcja dokonuje klasyfikacji zestawu danych rastrowych w oparciu o plik definicji klasyfikatora Esri (.ecd) i wejściowe zestawy danych rastrowych. Plik .ecd używany przez funkcję Klasyfikuj zawiera wszystkie informacje dotyczące konkretnego zestawu danych oraz klasyfikatora. Jest generowany przez narzędzia treningowe klasyfikacji, takie jak Treningowa maszyna wektorów nośnych lub Treningowe drzewa losowe.",
		clipName: "Wytnij",
		clipSnip: "Ustawia zasięg rastra za pomocą współrzędnych lub innego zestawu danych.",
		clipDesc: "Ta funkcja przycina raster z użyciem prostokątnego kształtu zgodnie ze zdefiniowanym zakresem albo z użyciem kształtu określonego przez wejściową klasę obiektów poligonowych. Kształt określający przycinany obszar może służyć do wycinania zakresu rastra lub wycinania obszaru wewnątrz rastra.",
		colorspaceConversionName: "Konwersja modelu koloru",
		colorspaceConversionSnip: "Konwertuje raster z RGB na HSV i na odwrót.",
		colorspaceConversionDesc: "Funkcja Konwersja modelu koloru konwertuje model koloru obrazu z przestrzeni kolorów HSV (barwa, nasycenie, walor) na RGB (czerwony, zielony, niebieski) i odwrotnie.<div><br/>Ta funkcja może być wykorzystywana w zestawie danych mozaiki.</div>",
		colormapToRGBName: "Skala barw do RGB",
		colormapToRGBSnip: "Przekształca raster o pojedynczym paśmie z kolorową mapą w raster zawierający trzy pasma (czerwone, zielone i niebieskie).",
		colormapToRGBDesc: "Ta funkcja przekształca raster jednopasmowy z mapą kolorów w raster zawierający trzy pasma (czerwone, zielone i niebieskie).<div><br/>Ta funkcja jest przydatna, gdy zachodzi potrzeba utworzenia rastra zawierającego trzy pasma na podstawie rastra jednopasmowego z powiązaną mapą kolorów. Do utworzenia poszczególnych pasm kolorów czerwonego, zielonego i niebieskiego są używane wartości na mapie kolorów. Ta funkcja może być wykorzystywana w zestawie danych mozaiki.</div>",
		colormapName: "Mapa kolorów",
		colormapSnip: "Zmienia wartości pikseli w celu wyświetlenia danych rastrowych jako skali szarości lub obrazu RGB (czerwony, zielony, niebieski) na podstawie mapy kolorów albo skali barw.",
		colormapDesc: "Funkcja Mapa kolorów jest typem modułu renderowania danych rastrowych. Transformuje wartości pikseli w celu wyświetlania danych rastrowych w postaci obrazu w skali szarości lub obrazu RGB na podstawie schematu kolorów lub konkretnych kolorów w pliku mapy kolorów. Za pomocą mapy kolorów można przedstawić przeanalizowane dane, na przykład sklasyfikowany obraz lub można jej użyć przy wyświetlaniu mapy topograficznej (albo zeskanowanego obrazu z indeksowanym kolorem).<div><br/>Mapy kolorów zawierają zbiór wartości powiązanych z kolorami używanymi do wyświetlenia rastra jednopasmowego spójnie w tych samych kolorach. Każda wartość piksela jest powiązana z kolorem zdefiniowanym jako zbiór wartości RGB. Mapy kolorów mogą obsłużyć dowolną głębię bitową oprócz zmiennoprzecinkowej. Obsługują również wartości dodatnie i ujemne oraz mogą zawierać brakujące wartości przyporządkowane kolorom. Przy wyświetlaniu zestawu danych z mapą kolorów zawierającą brakujące wartości, piksele o tych brakujących wartościach nie zostaną wyświetlone.</div>",
		complexName: "Złożony",
		complexSnip: "Wyodrębnia wielkość z liczb złożonych.",
		complexDesc: "Ta funkcja oblicza wielkość na podstawie danych złożonych.<div><br/>Ta funkcja jest zwykle używana przy zobrazowaniu typu RADAR ze złożonym typem danych. Może być wykorzystywana w zestawie danych mozaiki.</div>",
		compositeBandName: "Pasma złożone",
		compositeBandSnip: "Łączy kilka zestawów danych w jeden raster wielopasmowy.",
		compositeBandDesc: "Funkcja Pasma złożone umożliwia połączenie rastrów w celu utworzenia obrazu wielopasmowego.",
		conName: "Con (Warunkowa)",
		conSnip: "Wykonuje operację warunkową Jeśli, To, W przeciwnym razie. Gdy używany jest operator Con, zwykle wymagane są dwie lub większa liczba funkcji połączonych w łańcuch, przy czym jedna funkcja określa kryteria, a druga jest operatorem Con, który na podstawie tych kryteriów wskazuje, jaka wartość odpowiada wynikowi true (prawda), a jaka odpowiada wynikowi false (fałsz).",
		conDesc: "Funkcja Con (warunkowa) ustawia piksele rastra wynikowego na podstawie oszacowania if\\else (jeśli\\w przeciwnym razie) poszczególnych pikseli wejściowych. Zwraca wartości pikseli z rastra dla wartości prawda (true), jeśli wyrażenie warunkowe jest spełnione (1) lub zwraca wartości pikseli z rastra dla wartości fałsz (false), jeśli wyrażenie warunkowe nie jest spełnione (0). To kryterium jest podane w danych wynikowych logicznej funkcji matematycznej, którymi będzie raster wejściowy.",
		constantName: "Stała",
		constantSnip: "Tworzy raster wirtualny z jedną wartością piksela.",
		constantDesc: "Ta funkcja tworzy wirtualny raster zawierający jedną wartość piksela, który może być użyty w szablonach funkcji rastrowych i do przetwarzania zestawów danych mozaiki.<div><br/>Stała wartość jest używana dla każdego piksela w rastrze.</div>",
		contourName: "Warstwice",
		contourSnip: "Tworzy warstwice.",
		contourDesc: "Funkcja Warstwica generuje linie warstwicowe poprzez łączenie punktów o tej samej wysokości z zestawu wysokościowych danych rastrowych. Warstwice są izoliniami utworzonymi w postaci rastrów do celów wizualizacji. Moc tej funkcji tworzą następujące najważniejsze cechy: warstwice są generowane szybko i w sposób dynamiczny na ogromnych zestawach danych, takich jak World Elevation; warstwice mogą być poddawane wygładzaniu, co pozwala uzyskać bardziej zadowalający wygląd kartograficzny przy zachowaniu ich dokładności; możliwa jest dynamiczna kontrola nad skokiem warstwicowym; opcje danych wynikowych obejmują linie warstwicowe, warstwice indeksowe i warstwice wypełnione.<div><br/>Tworzenie warstwy warstwicowej jako produktu rastrowego jest wartościową propozycją w wielu zastosowaniach, ponieważ nałożone na mapę warstwice mogą dostarczać informacji dotyczących terenu bez zasłaniania danych bazowych. Przydają się one w takich zastosowaniach jak projektowanie, rolnictwo czy gospodarka wodna.</div>",
		contrastBrightnessName: "Kontrast i jasność",
		contrastBrightnessSnip: "Dopasowuje kontrast i jasność rastra.",
		contrastBrightnessDesc: "Funkcja Kontrast i jasność poprawia wygląd danych rastrowych przez zmodyfikowanie jasności i kontrastu obrazu. Jasność zwiększa ogólną jasność obrazu — na przykład rozjaśniając ciemne kolory i dodając bieli do jasnych kolorów u2014 a kontrast dopasowuje różnicę między najciemniejszymi i najjaśniejszymi kolorami.<div><br/>Za pomocą tej funkcji są modyfikowane wartości pikseli, dlatego należy jej użyć do wzbogacenia wyglądu danych, a nie w sytuacji, gdy dane mają zostać użyte w ramach analizy, która będzie wymagać surowych wartości pikseli. Ta funkcja jest przydatna, gdy dane są publikowane jako usługa rastrowa, która może być używana w aplikacjach bez możliwości modyfikowania kontrastu i jasności zobrazowania, lub w celu zapewnienia, że do wyświetlania będą używane preferowane ustawienia.</div>",
		convolutionName: "Splot",
		convolutionSnip: "Stosuje filtr do wyostrzania, rozmywania, wykrywania krawędzi, wygładzania lub gradientacji rastra.",
		convolutionDesc: "Funkcja Splatanie wykonuje filtrowanie na wartości pikseli obrazu, które można wykorzystać do wyostrzenia obrazu, rozmycia obrazu, wykrycia krawędzi obrazu lub wprowadzenia innych ulepszeń na podstawie skupień. Filtry służą poprawie jakości obrazu rastrowego przez wyeliminowanie błędnych danych lub rozbudowanie obiektów w danych. Te filtry splatania są stosowane względem przenoszonych, nakładających się skupień (okno lub sąsiedztwo), na przykład o wymiarach 3 na 3. Działanie filtrów splatania polega na obliczeniu wartości piksela na podstawie wag jego sąsiadów.",
		corridorName: "Korytarz",
		corridorSnip: "Oblicza sumę akumulowanych kosztów dla dwóch wejściowych rastrów akumulowanych.",
		corridorDesc: "Funkcja Korytarz oblicza sumę akumulowanych kosztów dla dwóch wejściowych rastrów akumulowanych kosztów. Wprawdzie jako dane wejściowe można użyć dowolnych dwóch rastrów, jednak aby uzyskać przydatne wyniki, powinny to być rastry wynikowe niezmodyfikowanego kosztu akumulowanego. Kolejność dwóch danych wejściowych jest nieistotna.",
		cosHName: "CosH",
		cosHSnip: "Oblicza cosinus hiperboliczny komórek rastra.",
		cosHDesc: "Funkcja oblicza cosinus hiperboliczny pikseli w rastrze.",
		cosName: "Cos",
		cosSnip: "Oblicza cosinus komórki w rastrze.",
		cosDesc: "Funkcja oblicza cosinus pikseli w rastrze.",
		costAllocationName: "Alokacja kosztu",
		costAllocationSnip: "Dla każdej komórki oblicza źródło o najmniejszym koszcie na podstawie najmniejszego akumulowanego kosztu na powierzchni kosztów.",
		costAllocationDesc: "Funkcja Alokacja kosztu oblicza dla każdej komórki źródło o najmniejszym koszcie na podstawie najmniejszego akumulowanego kosztu na powierzchni kosztów.",
		costBackLinkName: "Łącze powrotne kosztu",
		costBackLinkSnip: "Definiuje sąsiada będącego następną komórką w ścieżce o najmniejszym akumulowanym koszcie do źródła o najmniejszym koszcie.",
		costBackLinkDesc: "Funkcja Łącze powrotne kosztu definiuje sąsiada będącego następną komórką w ścieżce o najmniejszym akumulowanym koszcie do źródła o najmniejszym koszcie.<div><br/>Raster łączy powrotnych zawiera wartości od zera do ośmiu, które definiują kierunek lub następną sąsiednią komórkę (kolejną komórkę) na ścieżce o najmniejszym akumulowanym koszcie z komórki w celu osiągnięcia jej źródła o najmniejszym koszcie. Jeśli ścieżka ma przejść do sąsiada po prawej stronie, komórce tej zostanie przypisana wartość 1, a wartość 2 zostanie przypisana dolnej komórce po przekątnej w prawo. Ten proces będzie kontynuowany zgodnie z kierunkiem ruchu wskazówek zegara. Wartość 0 jest zarezerwowana dla komórek źródłowych.</div>",
		costDistanceName: "Koszt odległości",
		costDistanceSnip: "Oblicza odległość o najmniejszym akumulowanym koszcie dla każdej komórki z lub do źródła o najmniejszym koszcie na powierzchni kosztów.",
		costDistanceDesc: "Funkcja Koszt odległości oblicza odległość o najmniejszym akumulowanym koszcie dla każdej komórki z lub do źródła o najmniejszym koszcie na powierzchni kosztów.",
		costPathName: "Ścieżka kosztu",
		costPathSnip: "Oblicza najmniejszy koszt ścieżki ze źródła do celu.",
		costPathDesc: "Funkcja globalna Ścieżka kosztu oblicza ścieżkę o najmniejszym koszcie ze źródła do celu.<div><br/>Ta funkcja generuje raster wynikowy rejestrujący ścieżkę lub ścieżki najmniejszego kosztu prowadzące od wybranych lokalizacji do najbliższej komórki źródłowej zdefiniowanej w obrębie powierzchni akumulowanego kosztu (pod względem odległości kosztu).</div>",
		curvatureName: "Zakrzywienie",
		curvatureSnip: "Oblicza krzywiznę powierzchni rastrowej z opcjonalnym uwzględnieniem krzywizny profilu i planu.",
		curvatureDesc: "Funkcja krzywizny wyświetla kształt lub krzywiznę spadku. Część powierzchni może mieć kształt wklęsły lub wypukły. Kształt można określić, zwracając uwagę na wartość krzywizny. Krzywizna jest obliczana na podstawie drugiej pochodnej powierzchni.<div><br/>Wartości wynikowej funkcji krzywizny można użyć do opisania fizycznej charakterystyki dorzecza w celu przedstawienia zjawisk erozji i odpływu. Wartości krzywizny można użyć do określenia wzorców erozji gleby oraz rozkładu wód na powierzchni. Krzywizna wertykalna określa przyspieszenie i spowolnienie przepływu, a tym samym erozję i powstawanie osadów. Krzywizna planarna określa zbieżność i rozbieżność spływu.</div>",
		divideName: "Podziel",
		divideSnip: "Dzieli wartości dwóch rastrów, przetwarzając wszystkie komórki po kolei.",
		divideDesc: "Funkcja Podziel dzieli wartości dwóch rastrów, przetwarzając wszystkie piksele po kolei.",
		elevationVoidFillName: "Wypełnienie pustych wysokości",
		elevationVoidFillSnip: "Tworzy piksele w miejscach, w których istnieją luki w danych wysokości.",
		elevationVoidFillDesc: "Funkcja wypełniania luk w danych wysokościowych pozwala wygenerować piksele w miejscach luk w danych wysokościowych.<div><br/>Luki występują, gdy w danym obszarze nie zgromadzono danych przedstawianych na wynikowej warstwie rastrowej w postaci pikseli. Luki są często spowodowane obecnością akwenów, wyborem typu klasy lub wykluczeniem. Funkcja wypełniania luk jest najczęściej stosowana podczas generowania powierzchni terenu.</div>",
		equalToName: "Równa się",
		equalToSnip: "Wykonuje relacyjną operację równości na dwóch rastrach wejściowych, przetwarzając wszystkie komórki po kolei. Zwraca wartość 1 dla komórek, których wartość w pierwszym rastrze jest równa wartości w drugim oraz wartość 0 dla komórek, których wartości są różne.",
		equalToDesc: "Ta funkcja wykonuje operację równości względem dwóch rastrów, przetwarzając wszystkie piksele po kolei. Zwraca ona wartość 1 dla pikseli, których wartość w pierwszym rastrze jest równa wartości w drugim oraz wartość 0 dla pikseli, których wartości są różne.",
		eucAllocationName: "Alokacja euklidesowa",
		eucAllocationSnip: "Dla każdej komórki oblicza najbliższe źródło na podstawie odległości euklidesowej.",
		eucAllocationDesc: "Funkcja Przydział euklidesowy oblicza dla każdej komórki najbliższe źródło na podstawie odległości euklidesowej.",
		eucDirectionName: "Kierunek euklidesowy",
		eucDirectionSnip: "Dla każdej komórki oblicza wyrażony w stopniach kierunek do najbliższego źródła.",
		eucDirectionDesc: "Funkcja Kierunek euklidesowy oblicza dla każdej komórki wyrażony w stopniach kierunek do najbliższego źródła. <div><br/>Kierunek jest obliczany od środka każdej komórki do środka jej najbliższej komórki źródłowej. Wartości należą do zakresu od 0 do 360 stopni, przy czym wartość 0 jest zarezerwowana dla komórek źródłowych. Dla kierunku wschodniego (na prawo) wartość wynosi 90, a wartości wzrastają zgodnie z kierunkiem ruchu wskazówek zegara (180 wskazuje południe, 270 — zachód, a 360 — północ).</div>",
		eucDistanceName: "Odległość euklidesowa",
		eucDistanceSnip: "Dla każdej komórki oblicza odległość euklidesową do najbliższego źródła.",
		eucDistanceDesc: "Funkcja Kierunek euklidesowy oblicza dla każdej komórki odległość euklidesową do najbliższego źródła.",
		exp10Name: "Funkcja wykładnicza o podstawie 10",
		exp10Snip: "Oblicza funkcję wykładniczą o podstawie 10 dla komórek w rastrze.",
		exp10Desc: "Funkcja wykładnicza o podstawie 10 oblicza funkcję wykładniczą o podstawie 10 dla pikseli w rastrze.",
		exp2Name: "Funkcja wykładnicza o podstawie 2",
		exp2Snip: "Oblicza funkcję wykładniczą o podstawie 2 dla komórek w rastrze.",
		exp2Desc: "Ta funkcja oblicza funkcję wykładniczą o podstawie 2 dla pikseli w rastrze.",
		expName: "Exp",
		expSnip: "Oblicza funkcję wykładniczą o podstawie e dla komórek w rastrze.",
		expDesc: "Ta funkcja oblicza funkcję wykładniczą o podstawie e dla pikseli w rastrze.",
		extractBandName: "Wydziel kanały",
		extractBandSnip: "Określa pasma, z którymi należy pracować podczas korzystania z jednopasmowych zestawów danych.",
		extractBandDesc: " Funkcja Wydziel kanały umożliwia wyodrębnienie jednego lub większej liczby pasm z wielopasmowego rastrowego zestawu danych bądź zmianę kolejności pasm w tym zestawie danych.<div><br/>Funkcji Wydziel kanały można użyć przed innymi funkcjami, na przykład przed funkcją Arytmetyka, aby kontrolować, które pasma będą używane jako dane wejściowe w następnej funkcji.</div>",
		fillName: "Wypełnienie",
		fillSnip: "Wypełnia obniżenia rastra powierzchni w celu usunięcia drobnych niedokładności danych.",
		fillDesc: "Globalna funkcja Wypełnienie znajduje obniżenia i szczyty w rastrze powierzchni wysokościowej i wypełnia je, aby usunąć drobne niedokładności danych. Funkcja będzie przeprowadzać interaktywny proces wypełniania, dopóki wszystkie obniżenia nie zostaną wypełnione w podanym limicie Z.<div><br/>Gdy powierzchnia wysokościowa jest utworzona za pomocą narzędzi ortomapy lub przy użyciu innych środków, często występują drobne, ale znaczące błędy w postaci obniżeń i szczytów danych. W fotogrametrii obniżenia i szczyty są często nazywane lukami i skokami. Ponieważ dane powierzchni są często używane w modelowaniu, na przykład w modelach hydrologicznych, ważne jest skorygowanie tych błędów obniżeń i szczytów spójnie z otaczającymi je danymi.</div>",
		floatName: "Zmiennoprzecinkowe",
		floatSnip: "Konwertuje wszystkie wartości komórek rastra na reprezentację zmiennoprzecinkową.",
		floatDesc: "Funkcja Zmiennoprzecinkowe konwertuje wszystkie wartości pikseli rastra na reprezentację zmiennoprzecinkową.",
		flowAccumulationName: "Przepływ zbiorczy",
		flowAccumulationSnip: "Tworzy raster przepływu zbiorczego w każdej komórce. Opcjonalnie może być zastosowany współczynnik wagowy.",
		flowAccumulationDesc: "Funkcja globalna Przepływ zbiorczy tworzy raster przepływu zbiorczego w każdym pikselu zgodnie ze zbiorczą wagą dla wszystkich pikseli wpływających do każdego piksela spadku. Jeśli nie zostanie podany raster wagi, to dla każdego piksela jest używana waga 1 i wartością pikseli w rastrze wynikowym będzie liczba pikseli wpływających do każdego piksela.<div><br/>Piksele wynikowe o wysokim przepływie zbiorczym są obszarami zagęszczonego przepływu i można ich użyć do zidentyfikowania kanałów strumieni. Piksele wynikowe z przepływem zbiorczym wynoszącym zero są lokalnymi wysokościami topograficznymi i mogą służyć do zidentyfikowania grzbietów.</div>",
		flowDirectionName: "Kierunek przepływu",
		flowDirectionSnip: "Tworzy raster kierunku spływu z każdej komórki do jej najbardziej stromego sąsiada.",
		flowDirectionDesc: "Jednym z kluczowych czynników przy otrzymywaniu charakterystyki hydrologicznej powierzchni jest możliwość określenia kierunku przepływu z każdego piksela w rastrze. Funkcja rastrowa Kierunek przepływu akceptuje na wejściu powierzchnię i tworzy raster kierunku przepływu z każdego piksela do sąsiedniego leżącego w kierunku największego spadku. Funkcja Kierunek przepływu obsługuje trzy metody modelowania przepływu: D8 (osiem kierunków), Multi-Flow Direction (MFD) oraz D-Infinity (DINF). ",
		flowDistanceName: "Odległość przepływu",
		flowDistanceSnip: "Oblicza dla każdej komórki minimalną odległość w poziomie lub w pionie do komórek leżących w niższym biegu strumienia lub rzeki, do których następuje przepływ.",
		flowDistanceDesc: "Dla każdego piksela funkcja obliczy minimalną odległość w poziomie lub w pionie do pikseli leżących w niższym biegu strumienia lub rzeki, do których następuje przepływ. Jeśli zostanie podany opcjonalny raster kierunku przepływu, kierunki spadku zostaną ograniczone do tych zdefiniowanych w wejściowym rastrze kierunku przepływu. W wyniku powstaje raster odległości przepływu.",
		focalName: "Statystyki z punktami centralnymi",
		focalSnip: "Oblicza statystyki centralne dla każdego piksela obrazu na podstawie zdefiniowanego sąsiedztwa punktu centralnego.",
		focalDesc: "Funkcja Statystyki z punktami centralnymi oblicza statystykę centralną dla każdego piksela obrazu na podstawie zdefiniowanego sąsiedztwa.",
		geometricName: "Geometryzacja",
		geometricSnip: "Zwiększa dokładność pozycyjną zestawu danych przez wzięcie pod uwagę danych wysokościowych.",
		geometricDesc: "Funkcja Geometryzacja generuje ortorektyfikowany obraz na podstawie definicji czujnika oraz modelu terenu. Zwiększa ona dokładność pozycyjną zestawu danych przez wzięcie pod uwagę danych wysokościowych.",
		grayscaleName: "Odcienie szarości",
		grayscaleSnip: "Konwertuje obraz wielopasmowy na obraz jednopasmowy w skali szarości.",
		grayscaleDesc: "Ta funkcja konwertuje obraz wielopasmowy na obraz jednopasmowy w skali szarości.<div><br/>Ta funkcja stosuje podane wagi do każdego pasma wejściowego i normalizuje obraz wynikowy. Wagi są często stosowane, ponieważ niektóre pasma różnią się istotnością w zależności od aplikacji. Pasmo niebieskie na przykład często zawiera więcej szumów od pozostałych pasm.</div>",
		greaterThanEqualName: "Większy lub równy",
		greaterThanEqualSnip: "Wykonuje relacyjną operację większości lub równości na dwóch rastrach wejściowych, przetwarzając wszystkie komórki po kolei. Zwraca wartość 1 dla komórek, które w pierwszym rastrze mają wartość większą niż w drugim rastrze lub jej równą, oraz wartość 0 w przeciwnym razie.",
		greaterThanEqualDesc: "Funkcja wykonuje relacyjną operację większości lub równości na dwóch rastrach wejściowych, przetwarzając wszystkie piksele po kolei. Zwraca ona wartość 1 dla pikseli, które w pierwszym rastrze mają wartość większą niż w drugim rastrze lub jej równą, oraz wartość 0 dla pikseli, które w pierwszym rastrze nie mają wartości większej niż w drugim rastrze lub jej równej.",
		greaterThanName: "Większy niż",
		greaterThanSnip: "Wykonuje relacyjną operację większości na dwóch rastrach wejściowych, przetwarzając wszystkie komórki po kolei. Zwraca wartość 1 dla komórek, których wartość w pierwszym rastrze jest większa niż wartość w drugim, oraz wartość 0 dla pozostałych komórek.",
		greaterThanDesc: "Funkcja wykonuje relacyjną operację większości na dwóch rastrach wejściowych, przetwarzając wszystkie piksele po kolei. Zwraca wartość 1 dla pikseli, które w pierwszym rastrze mają wartość większą niż w drugim oraz wartość 0 dla pikseli, które w pierwszym rastrze nie mają wartości większej niż w drugim.",
		heatIndexName: "Indeks cieplny",
		heatIndexSnip: "Łączy temperaturę powietrza w otoczeniu i wilgotność względną w celu zwrócenia temperatury odczuwalnej.",
		heatIndexDesc: "Ta funkcja oblicza temperaturę pozorną na podstawie temperatury otoczenia i wilgotności względnej. Temperatura pozorna jest często opisywana jako odczuwalna przez ciało ludzkie.<div><br/>Ten indeks jest przydatny przy obliczaniu niebezpieczeństw związanych z problemami zdrowotnymi, takich jak skurcz mięśni, odwodnienie, znużenie cieplne lub poważniejszy udar cieplny w gorące i wilgotne dni. Gdy wilgotność względna jest wysoka, coraz trudniejsze staje się odparowanie potu z ciała, co pozbawia daną osobę bez skutecznej i naturalnej metody schłodzenia. Mapy porad lub ostrzeżeń dotyczących upałów są często wynikiem ponownej klasyfikacji wyniku indeksu cieplnego na klasy, w których im wyższa wartość indeksu, tym bardziej prawdopodobnie chodzi o ostrzeżenie, a nie tylko poradę.</div>",
		hillshadeName: "Cieniowanie rzeźby",
		hillshadeSnip: "Tworzy trójwymiarową reprezentację powierzchni terenu, w której przy cieniowaniu obrazu brane jest pod uwagę względne położenie słońca",
		hillshadeDesc: "Funkcja Cieniowanie rzeźby terenu generuje trójwymiarową reprezentację powierzchni terenu w skali szarości, w której przy cieniowaniu obrazu brane jest pod uwagę względne położenie słońca. <div><br/>Cieniowanie to technika wizualizowania terenu w sposób określony przez źródło światła oraz spadki i ekspozycję powierzchni wysokościowej. Jest to jakościowa metoda wizualizacji topografii i nie daje bezwzględnych wartości wysokości. </div>",
		intName: "Całkowite",
		intSnip: "Konwertuje wartości wszystkich komórek rastra na liczby całkowite przez obcięcie.",
		intDesc: "Funkcja Całkowite konwertuje wszystkie wartości pikseli rastra na liczby całkowite przez obcięcie.",
		interpolateIrregularDataName: "Interpoluj dane nieregularne",
		interpolateIrregularDataSnip: "Interpoluje z chmur punktów lub nieregularnych siatek.",
		interpolateIrregularDataDesc: "Niektóre zestawy danych netCDF lub HDF przechowują dane geolokacyjne w postaci nieregularnie rozmieszczonych zbiorów pikseli lub danych punktów. Dodając te zestawy danych do zestawu danych mozaiki, funkcja interpolacji nieregularnych danych ponownie próbkuje dane o nieregularnej siatce tak, by każdy piksel miał taką samą wielkość i kwadratowy kształt.<div><br/>W trakcie dodawania zmiennych z zestawu danych netCDF lub HDF do zestawu danych mozaiki zostanie przeprowadzona automatyczna weryfikacja, czy dane są rozmieszczone regularnie. Jeśli nie, wówczas funkcja interpolacji nieregularnych danych może przekonwertować dane nieregularne na warstwę rastrową o regularnej siatce. Metodę interpolacji oraz rozmiar komórki używanej na potrzeby funkcji interpolacji nieregularnych danych można zmienić. W przypadku danych warstwy rastrowej rozmieszczonych regularnie interpolacja nie będzie stosowana, a dane zostaną odczytane w takiej postaci, w jakiej są dostępne.</div>",
		isNullName: "Jest pusty",
		isNullSnip: "Określa, które wartości rastrów wejściowych to wartości NoData, przetwarzając wszystkie komórki po kolei. Zwraca wartość 1, jeśli wartości wejściowe to NoData, oraz wartość 0 w przypadku komórek, które nie mają wartości NoData.",
		isNullDesc: "Funkcja Jest pusty określa, które wartości rastra wejściowego to wartości NoData, przetwarzając wszystkie piksele po kolei. Zwraca ona wartość 1, jeśli wartość wejściowa to NoData, oraz wartość 0 w przypadku pikseli, które nie mają wartości NoData.",
		kernelDensityName: "Gęstość skupień",
		kernelDensitySnip: "Oblicza obszar wielkości na jednostkę na podstawie obiektów punktowych lub poliliniowych przy użyciu funkcji skupienia w celu dopasowania ciągłej stożkowej powierzchni do poszczególnych punktów lub polilinii.",
		kernelDensityDesc: "Ta funkcja oblicza obszar wielkości na jednostkę na podstawie obiektów punktowych lub poliliniowych przy użyciu funkcji skupienia w celu dopasowania ciągłej stożkowej powierzchni do poszczególnych punktów lub polilinii.",
		keyMetadataName: "Kluczowe metadane",
		keyMetadataSnip: "Zastępuje lub wstawia kluczowe metadane rastra w łańcuchu funkcji.",
		keyMetadataDesc: "Ta funkcja umożliwia wstawienie lub zastąpienie kluczowych metadanych rastra.<div><br/>Informacje zawarte w kluczowych metadanych są używane przez aplikację przy przetwarzaniu i wyświetlaniu. Obejmują one pewne przydatne dane, takie jak nazwa czujnika, nazwy pasm lub zachmurzenie powiązane ze zobrazowaniem.</div>",
		shortestPathName: "Ścieżka najmniejszego kosztu",
		shortestPathSnip: "Wykonuje analizę kosztów odległości z użyciem danych wejściowych dotyczących źródeł i miejsc docelowych, która jest następnie używana do określenia ścieżki o najmniejszym koszcie od źródła do miejsca docelowego.",
		shortestPathDesc: "Funkcja Ścieżka najmniejszego kosztu oblicza ścieżkę o najmniejszym koszcie ze źródła do celu. Odległość o najmniejszym akumulowanym koszcie jest obliczana dla każdego piksela na powierzchni kosztów do najbliższego źródła. Generuje to raster wynikowy rejestrujący ścieżkę lub ścieżki najmniejszego kosztu prowadzące od wybranych lokalizacji do najbliższego piksela źródłowego zdefiniowanego w obrębie powierzchni akumulowanego kosztu (pod względem odległości kosztu).<div><br/>Każda ścieżka najmniejszego kosztu ma przypisywaną wartość, gdy zostanie napotkana w trakcie procesu skanowania. Piksel kończący rastra źródłowego ścieżki kosztów otrzymuje wartość 1. Pierwsza ścieżka otrzymuje wartość 3, druga 4 itd. Gdy wiele ścieżek zostaje scalonych i pokonują pozostałą odległość z powrotem do źródła tą samą trasą, segment, w którym dwie ścieżki przebiegają razem dostaje przypisaną wartość 2. Scalonej części ścieżki nie można przypisać wartości jednej ze ścieżek, ponieważ scalona część należy do obu tras.</div>",
		lessThanEqualName: "Mniejszy lub równy",
		lessThanEqualSnip: "Wykonuje relacyjną operację mniejszości lub równości na dwóch rastrach wejściowych, przetwarzając wszystkie komórki po kolei. Zwraca wartość 1 dla komórek, które w pierwszym rastrze mają wartość mniejszą niż w drugim rastrze lub jej równą, oraz wartość 0 w przeciwnym razie.",
		lessThanEqualDesc: "Funkcja wykonuje relacyjną operację mniejszości lub równości na dwóch rastrach wejściowych, przetwarzając wszystkie piksele po kolei. Zwraca ona wartość 1 dla pikseli, które w pierwszym rastrze mają wartość mniejszą niż w drugim rastrze lub jej równą, oraz wartość 0 dla pikseli, które w pierwszym rastrze nie mają wartości mniejszej niż w drugim rastrze lub jej równej.",
		lessThanName: "Mniejszy niż",
		lessThanSnip: "Wykonuje relacyjną operację mniejszości na dwóch rastrach wejściowych, przetwarzając wszystkie komórki po kolei. Zwraca wartość 1 dla komórek, które w pierwszym rastrze mają wartość mniejszą niż w drugim rastrze, oraz wartość 0 w przeciwnym razie.",
		lessThanDesc: "Funkcja wykonuje relacyjną operację mniejszości na dwóch rastrach wejściowych, przetwarzając wszystkie piksele po kolei. Zwraca ona wartość 1 dla pikseli, które w pierwszym rastrze mają wartość mniejszą niż w drugim, oraz wartość 0 dla pikseli, które w pierwszym rastrze nie mają wartości mniejszej niż w drugim.",
		lnName: "Logarytm naturalny",
		lnSnip: "Oblicza logarytm naturalny (przy podstawie e) komórek rastra.",
		lnDesc: "Funkcja Logarytm naturalny oblicza logarytm naturalny (podstawa e) dla każdego piksela w rastrze.",
		log10Name: "Logarytm o podstawie 10",
		log10Snip: "Oblicza logarytm przy podstawie 10 z komórek rastra.",
		log10Desc: "Funkcja Logarytm o podstawie 10 oblicza logarytm o podstawie 10 dla każdego piksela w rastrze.",
		log2Name: "Logarytm o podstawie 2",
		log2Snip: "Oblicza logarytm przy podstawie 2 z komórek rastra.",
		log2Desc: "Funkcja Logarytm o podstawie 2 oblicza logarytm o podstawie 2 dla każdego piksela w rastrze.",
		lookupName: "Wyszukiwanie",
		lookupSnip: "Tworzy nowy raster przez wyszukiwanie wartości znajdujących się w innym polu tabeli rastra wejściowego.",
		lookupDesc: "Funkcja tworzy nowy raster przez wyszukiwanie wartości znajdujących się w innym polu tabeli rastra wejściowego.",
		mlClassifyName: "Klasyfikacja największego prawdopodobieństwa",
		mlClassifySnip: "Klasyfikuje zobrazowanie w oparciu o piksele. Mieszane piksele są przypisywane do obiektu o najwyższym procencie danego piksela.",
		mlClassifyDesc: "Funkcja Klasyfikacja największego prawdopodobieństwa umożliwia wykonanie nadzorowanej klasyfikacji przy użyciu algorytmu klasyfikacji na podstawie maksymalnego prawdopodobieństwa na zestawie danych rastrowych lub zestawie danych mozaiki. Ta funkcja wymaga pliku podpisu klasyfikacji.",
		maskName: "Maska",
		maskSnip: "Ustawia wartości, które nie mają być wyświetlane.",
		maskDesc: "Ta funkcja rastrowa ustawia wartości, które nie mają być wyświetlane w danym rastrze. Podczas korzystania z funkcji Maska określa się jedną lub kilka wartości NoData albo zakres prawidłowych wartości pikseli. ",
		minusName: "Minus",
		minusSnip: "Odejmuje wartość z drugiego rastra wejściowego od wartości z pierwszego rastra wejściowego, przetwarzając wszystkie komórki po kolei.",
		minusDesc: "Funkcja Minus odejmuje wartość z drugiego rastra wejściowego od wartości z pierwszego rastra wejściowego, przetwarzając wszystkie piksele po kolei.",
		modName: "Mod",
		modSnip: "Znajduje resztę z dzielenia (modulo) wartości z pierwszego rastra przez wartość z drugiego rastra dla każdej komórki po kolei.",
		modDesc: "Funkcja Mod znajduje resztę z dzielenia (modulo) wartości z pierwszego rastra przez wartość z drugiego rastra dla każdego piksela po kolei. Kolejność danych wejściowych jest istotna i ma wpływ na wynik.",
		mosaicRastersName: "Rastry mozaikowe",
		mosaicRastersSnip: "Zszywa razem kilka zestawów danych rastrowych w jeden zestaw danych.",
		mosaicRastersDesc: "Funkcja Rastry mozaikowe tworzy obraz mozaiki z wielu obrazów. W przypadku nakładania się obrazów możesz wybrać spośród kilku metod określania, które obrazy są wyświetlane.",
		ndviColorizedName: "Kolorowanie NDVI",
		ndviColorizedSnip: "Tworzy wielopasmowy zestaw danych reprezentujący kondycję roślinności na podstawie różnicy między pasmami czerwonym i bliskim podczerwieni.",
		ndviColorizedDesc: "Funkcja Kolorowanie NDVI stosuje funkcję NDVI do rastra wejściowego, a następnie używa mapy kolorów lub skali barw do wyświetlenia wyniku.",
		ndviName: "NDVI",
		ndviSnip: "Oblicza znormalizowany różnicowy wskaźnik roślinności (NDVI).",
		ndviDesc: "Funkcja NDVI Tworzy jednopasmowy zestaw danych reprezentujący kondycję roślinności na podstawie różnicy między pasmami czerwonym i bliskim podczerwieni.<div><br/>NDVI jest standardowym indeksem umożliwiającym generowanie obrazów zawierających obszary zielone (tzw. względną biomasę). Ten indeks wykorzystuje kontrast między charakterystykami dwóch pasm z wielospektralnego zestawu danych rastrowych: absorpcji chlorofilu w paśmie czerwieni i wysokiego współczynnika odbicia roślinności w paśmie bliskiej podczerwieni (NIR). Niezwykle niskie lub ujemne wartości NDVI reprezentują obszary, w których całkowicie brak roślinności, takie jak chmura, woda czy śnieg. Bardzo niskie wartości reprezentują obszary z niewielką roślinnością lub bez roślinności, takie jak beton, skała czy goła gleba. Średnie wartości reprezentują obszary krzewów i łąk. Wysokie wartości reprezentują obszary zalesione i bujną roślinność.</div>",
		negateName: "Neguj",
		negateSnip: "Zmienia znak (mnoży przez -1) wartości komórek rastra wejściowego, przetwarzając wszystkie komórki po kolei.",
		negateDesc: "Funkcja Neguj zmienia znak (mnożąc przez -1) wartości pikseli rastra wejściowego, przetwarzając wszystkie piksele po kolei. ",
		nibbleName: "Zastąp najbliższym sąsiadem",
		nibbleSnip: "Zastępuje komórki rastra odpowiadające masce wartościami najbliższych sąsiadujących komórek.",
		nibbleDesc: "Funkcja globalna Zastąp najbliższym sąsiadem umożliwia przypisanie wybranym obszarom rastra wartości ich najbliższego sąsiada. Jest to przydatne przy edycji obszarów rastra, które mogą zawierać błędne dane.",
		notEqualName: "Nie równy",
		notEqualSnip: "Wykonuje relacyjną operację nierówności na dwóch rastrach wejściowych, przetwarzając wszystkie komórki po kolei. Zwraca wartość 1 dla komórek, które w pierwszym rastrze mają wartość inną niż w drugim rastrze, oraz wartość 0, tam gdzie ta wartość jest równa.",
		notEqualDesc: "Funkcja wykonuje relacyjną operację nierówności na dwóch rastrach wejściowych, przetwarzając wszystkie piksele po kolei. Zwraca ona wartość 1 dla pikseli, które w pierwszym rastrze mają wartość różną od wartości w drugim, oraz wartość 0 dla pikseli, które w pierwszym rastrze mają wartość równą wartości w drugim rastrze.",
		pansharpeningName: "Wyostrzenie panchromatyczne",
		pansharpeningSnip: "Sztucznie rozszerza rozdzielczość przestrzenną obrazu wielopasmowego poprzez złączenie go z obrazem panchromatycznym o wysokiej rozdzielczości.",
		pansharpeningDesc: "Funkcja wyostrzania panchromatycznego używa obrazu panchromatycznego o wysokiej rozdzielczości lub pasma rastra do połączenia z wielopasmowym zestawem danych rastrowych o niskiej rozdzielczości w celu zwiększenia rozdzielczości przestrzennej obrazu wielopasmowego.<div><br/>Celem wyostrzania panchromatycznego jest polepszenie jakości obrazu. Ponieważ te techniki zmieniają radiometrię i charakterystyki spektralne zobrazowania wielopasmowego, zobrazowań wyostrzonych panchromatycznie należy używać z ostrożnością do celów teledetekcji analitycznej.</div>",
		pathAllocationName: "Przydział odległości ścieżki",
		pathAllocationSnip: "Dla każdej komórki oblicza źródło o najmniejszym koszcie na podstawie najmniejszego akumulowanego kosztu na powierzchni kosztów, biorąc pod uwagę odległość powierzchniową, a także poziomy i pionowy składnik kosztów.",
		pathAllocationDesc: "Funkcja Przydział odległości ścieżki oblicza dla każdej komórki najbliższe źródło na podstawie najmniejszego akumulowanego kosztu na powierzchni kosztów, biorąc pod uwagę odległość powierzchniową, a także poziomy i pionowy składnik kosztów.",
		pathBackLinkName: "Łącze powrotne odległości ścieżki",
		pathBackLinkSnip: "Definiuje sąsiada będącego następną komórką w ścieżce o najmniejszym akumulowanym koszcie do źródła o najmniejszym koszcie, biorąc pod uwagę odległość powierzchniową, a także poziomy i pionowy składnik kosztów.",
		pathBackLinkDesc: "Funkcja Łącze powrotne odległości ścieżki identyfikuje kierunkowość sąsiada będącego następną komórką w ścieżce o najmniejszym akumulowanym koszcie do najbliższego źródła, biorąc pod uwagę odległość powierzchniową, a także poziomy i pionowy składnik kosztów.",
		pathDistanceName: "Odległość ścieżki",
		pathDistanceSnip: "Dla każdej komórki oblicza odległość o najmniejszym akumulowanym koszcie z lub do źródła o najmniejszym koszcie, biorąc pod uwagę odległość powierzchniową, a także poziomy i pionowy składnik kosztów.",
		pathDistanceDesc: "Funkcja Odległość ścieżki oblicza dla każdej komórki odległość o najmniejszym akumulowanym koszcie do najbliższego źródła z uwzględnieniem odległości powierzchniowej, a także składnika poziomego i pionowego powierzchni.",
		plusName: "Plus",
		plusSnip: "Dodaje (sumuje) wartości dwóch rastrów, przetwarzając wszystkie komórki po kolei.",
		plusDesc: "Funkcja Plus dodaje (sumuje) wartości dwóch rastrów, przetwarzając wszystkie piksele po kolei.",
		powerName: "Potęga",
		powerSnip: "Podnosi wartości komórki w rastrze do potęgi o wykładniku równym wartościom pochodzącym z innego rastra.",
		powerDesc: "Funkcja Potęga podnosi wartości pikseli w rastrze do potęgi o wykładniku równym wartościom pochodzącym z innego rastra.",
		radarCalibrationName: "Kalibracja radaru",
		radarCalibrationSnip: "Przekształca rozproszenie wsteczne RADARSAT-2.",
		radarCalibrationDesc: "Za pomocą tej funkcji można skalibrować zobrazowanie RADARSAT-2 w zestawie danych mozaiki lub jako produkt rastrowy. Na zobrazowaniu radarowym wykonywana jest kalibracja, aby wartości pikseli stanowiły wierne odzwierciedlenie wstecznego rozpraszania radaru.",
		rasterInfoName: "RasterInfo",
		rasterInfoSnip: "Modyfikuje właściwości rastra, takie jak głębia bitowa, wartość NoData (brak danych), wielkość komórki itd.",
		rasterInfoDesc: "Informacje o rastrze otwierają okno dialogowe z właściwościami zestawów danych rastrowych, takimi jak liczba kolumn i wierszy, liczba pasm, typ piksela, zakres i odniesienie przestrzenne. Te właściwości można edytować, wybierając zestaw danych rastrowych do użycia jako szablon. ",
		rasterizeAttributesName: "Rasteryzuj atrybuty",
		rasterizeAttributesSnip: "Wzbogaca raster, dodając pasma uzyskane na podstawie wartości określonych atrybutów tabeli zewnętrznej lub usługi obiektowej.",
		rasterizeAttributesDesc: "Funkcja rasteryzacji atrybutów wzbogaca raster, dodając pasma uzyskane na podstawie wartości określonych atrybutów tabeli zewnętrznej lub usługi obiektowej. Opcjonalnie można podać raster strefy oraz powiązany atrybut identyfikatora strefy w celu uaktywnienia wyszukiwania opartego na regionach.",
		rasterizeFeatureClassName: "Funkcja rasteryzacji obiektów",
		rasterizeFeatureClassSnip: "Konwertuje obiekty na raster.",
		rasterizeFeatureClassDesc: "Ta funkcja konwertuje dane klasy obiektów poligonowych, poliliniowych oraz punktowych na warstwę rastrową.<div><br/>Obiekty mają przypisane wartości pikseli na podstawie identyfikatora OBJECTID obiektu (domyślnie). Opcjonalnie wartości pikseli mogą być oparte na polu z wartością zdefiniowaną przez użytkownika w tabeli atrybutów obiektu wejściowego.</div>",
		recastName: "Przekształcenie",
		recastSnip: "Modyfikuje parametry łańcucha funkcji w zestawie danych mozaiki lub usłudze rastrowej. Często jest używana z zestawami danych LAS w celu uniknięcia odrębnych zestawów danych mozaiki dla różnych reprezentacji terenu.",
		recastDesc: "Funkcja Przekształcenie służy do dynamicznego modyfikowania parametrów funkcji używanych w zestawie danych mozaiki lub usłudze rastrowej bez fizycznego utrwalenia zmian.",
		regionGroupName: "Grupowanie regionów",
		regionGroupSnip: "W przypadku poszczególnych komórek w danych wynikowych rejestrowana jest tożsamość połączonego regionu, do którego należy komórka. Do każdego regionu jest przypisywana unikalna liczba.",
		regionGroupDesc: "Funkcja globalna Grupowanie regionów rejestruje dla poszczególnych komórek w danych wynikowych tożsamość połączonego regionu, do którego należy komórka. Do każdego regionu jest przypisywana unikalna liczba.<div><br/>Pierwszy przeskanowany region otrzymuje wartość jeden, drugi dwa itd., dopóki wszystkie regiony nie będą mieć przypisanej wartości. Skanowanie przebiega od lewej do prawej, od góry do dołu. Wartości przypisane strefom wynikowym zależą od momentu ich napotkania w procesie skanowania.</div>",
		regionGrowName: "Wzrost regionu",
		regionGrowSnip: "Powoduje wzrost regionów od punktów zaczepienia.",
		regionGrowDesc: "Funkcja wzrostu regionu grupuje sąsiednie piksele w grupy w zależności od podanego promienia od punktu zaczepienia. Do grupy pikseli lub obiektu jest przypisywana podana wartość wypełnienia.",
		remapName: "Ponowne przyporządkowanie",
		remapSnip: "Zmienia wartości pikseli przez przypisanie nowych wartości do zakresów wartości pikseli lub przez użycie tabeli zewnętrznej.",
		remapDesc: "Funkcja Ponowne przyporządkowanie umożliwia modyfikowanie lub ponowne klasyfikowanie wartości pikseli w danych rastrowych. W tym celu można podać zakres wartości pikseli do przyporządkowania do wynikowej wartości piksela lub użyć tabeli do przyporządkowania wartości pikseli do wynikowej wartości piksela.",
		reprojectName: "Odwzoruj",
		reprojectSnip: "Odwzorowuje zestaw danych rastrowych, zestaw danych mozaiki lub element rastrowy w zestawie danych mozaiki. Pozwala ponadto na ponowne próbkowanie danych dla nowego rozmiaru komórki oraz zdefiniowanie początku.",
		reprojectDesc: "Funkcja ponownego odwzorowania pozwala zmodyfikować zestaw danych rastrowych, zestaw danych mozaiki lub element rastrowy w zestawie danych mozaiki. Pozwala ponadto na ponowne próbkowanie danych dla nowego rozmiaru komórki oraz zdefiniowanie początku.<div><br/>Funkcja ponownego odwzorowania może zostać użyta podczas tworzenia pamięci podręcznej na podstawie zestawu danych rastrowych lub mozaiki, który nie zawiera się w wymaganym odwzorowaniu. Przykład: podczas tworzenia zapisanej w pamięci podręcznej usługi rastrowej, która może zostać zintegrowana przy użyciu aplikacji z innymi usługami zapisanymi w pamięci podręcznej, ważne jest, by wszystkie one były uwzględnione w tym samym odwzorowaniu. Jest to często odwzorowanie Web Mercator. Ponieważ zestaw danych mozaiki nie może zostać odwzorowany ponownie, można wówczas wykonać dwie czynności — utworzyć referencyjny zestaw danych mozaiki na podstawie zestawu danych mozaiki w danym odwzorowaniu lub dodać funkcję ponownego odwzorowania do łańcucha funkcji zestawu danych mozaiki. W kolejnym przykładzie wykorzystano tę funkcję na elemencie rastrowym w zestawie danych mozaiki. W przypadku korzystania z funkcji rastra zapisanego w pamięci podręcznej można użyć funkcji ponownego odwzorowania tak, by utworzyć nowe odwzorowanie. Elementy rastrowe w zestawie danych mozaiki można zapisać w pamięci podręcznej, jeśli proces przetwarzania okaże się czasochłonny, a konieczne będzie szybkie opublikowanie usługi rastrowej bez zapisywania w pamięci podręcznej całej usługi rastrowej.</div>",
		resampleName: "Ponowne próbkowanie",
		resampleSnip: "Zmienia rozmiar komórki rastra.",
		resampleDesc: "Funkcja Ponowne próbkowanie zmienia rozmiar komórki, typ ponownego próbkowania lub obydwa te parametry.<div><br/>Funkcji Ponowne próbkowanie należy użyć tylko z konkretnymi wymaganiami obliczeniowymi, na przykład przy obliczaniu bieżącej wartości wielkość-kierunek wiatru, które wymagają ponownego próbkowania z rozdzielczości źródłowej.</div>",
		roundDownName: "Zaokrąglij w dół",
		roundDownSnip: "Zwraca najbliższą mniejszą liczbę całkowitą jako wartość zmiennoprzecinkową dla każdej komórki w rastrze.",
		roundDownDesc: "Funkcja Zaokrąglij w dół zwraca najbliższą mniejszą liczbę całkowitą jako wartość zmiennoprzecinkową dla każdego piksela w rastrze.",
		roundUpName: "Zaokrąglij w górę",
		roundUpSnip: "Zwraca najbliższą większą liczbę całkowitą jako wartość zmiennoprzecinkową dla każdej komórki w rastrze.",
		roundUpDesc: "Funkcja Zaokrąglij w górę zwraca najbliższą większą liczbę całkowitą jako wartość zmiennoprzecinkową dla każdego piksela w rastrze.",
		segmentMeanShiftName: "Średnie przesunięcie segmentu",
		segmentMeanShiftSnip: "Grupuje sąsiednie piksele z podobną charakterystyką spektralną w segmenty.",
		segmentMeanShiftDesc: "Ta funkcja identyfikuje obiekty lub segmenty w zobrazowaniu, grupując ze sobą przylegające piksele o podobnych charakterystykach przestrzennych i spektralnych. Aby móc dostarczać odpowiednie obiekty, można sterować ilością wygładzeń przestrzennych i spektralnych.",
		s1RadiometricCalibrationName: "Kalibracja radiometryczna Sentinel-1",
		s1RadiometricCalibrationSnip: "Wykonuje różne typy kalibracji radiometrycznej na danych Sentinel-1.",
		s1RadiometricCalibrationDesc: "Ta funkcja rastrowa wykonuje trzy różne kalibracje dla zestawów danych Sentinel 1, w tym beta nought i gamma, a jako dane wynikowe podaje skalibrowany zestaw danych. Celem kalibracji SAR jest zapewnienie zobrazowania, w którym wartości pikseli mogą zostać bezpośrednio związane ze wstecznym rozpraszaniem radaru sceny. Chociaż nieskalibrowane zobrazowanie SAR jest odpowiednie do użycia jakościowego, skalibrowane obrazy SAR są kluczowe do użycia ilościowego danych SAR.<div><br/>Typowe przetwarzanie danych SAR, które generuje obrazy poziomu 1, nie obejmuje korekcji radiometrycznej i pozostają istotne odchylenia radiometryczne. Dlatego niezbędne jest zastosowanie korekcji radiometrycznej do obrazów SAR, tak aby wartości pikseli obrazów naprawdę reprezentowały wsteczne rozpraszanie radaru powierzchni odbijającej. Korekcja radiometryczna jest również niezbędna do porównania obrazów SAR uzyskanych za pomocą różnych czujników lub uzyskanych z tego samego czujnika w różnych porach, różnych trybach albo przetworzonych przez różne procesory.</div>",
		s1ThermalNoiseRemovalName: "Usuwanie szumów termicznych Sentinel-1",
		s1ThermalNoiseRemovalSnip: "Usuwa szumy termiczne z danych Sentinel-1.",
		s1ThermalNoiseRemovalDesc: "Korekcję szumów termicznych można zastosować względem produktów Sentinel-1 Level-1 Single Look Complex (SLC) oraz produktów Level-1 Ground Range Detection (GRD), które nie zostały jeszcze poddane korekcie. Operator może również usunąć tę korektę na podstawie opisów produktów, aby ponownie wprowadzić usunięty sygnał szumu w celu wygenerowania produktu pierwotnego. Opisy produktów zostaną odpowiednio zaktualizowane, aby umożliwić ponowne zastosowanie korekty. ",
		setNullName: "Ustaw wartość null",
		setNullSnip: "Funkcja Ustaw puste ustawia w określonych lokalizacjach komórek wartość NoData na podstawie podanych kryteriów. Zwraca wartość NoData, jeśli wyrażenie warunkowe jest spełnione, a w przeciwnym razie zwraca wartość określoną przez inny raster.",
		setNullDesc: "Funkcja Ustaw puste ustawia wskazane piksele na wartość NoData na podstawie podanych kryteriów. Zwraca wartość NoData, jeśli wyrażenie warunkowe jest spełnione (1), i zwraca wartość podaną w rastrze dla wartości fałsz, jeśli wyrażenie warunkowe nie jest spełnione (0). To kryterium jest podane w danych wynikowych logicznej funkcji matematycznej, którymi będzie raster wejściowy.",
		shadedReliefName: "Cieniowana rzeźba terenu",
		shadedReliefSnip: "Tworzy wielopasmową, oznaczoną kolorami, trójwymiarową reprezentację powierzchni, w której przy cieniowaniu obrazu brane jest pod uwagę względne położenie słońca.",
		shadedReliefDesc: "Funkcja Cieniowana rzeźba terenu tworzy trójwymiarową reprezentację terenu przez scalanie obrazów uzyskanych za pomocą metod kodowania wysokości i cieniowania wzniesień. Ta funkcja korzysta z właściwości wysokości i azymutu do określenia pozycji słońca.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Oblicza funkcję sinus hiperboliczny dla komórek w rastrze.",
		sinHDesc: "Funkcja oblicza sinus hiperboliczny pikseli w rastrze.",
		sinName: "Sin",
		sinSnip: "Oblicza funkcję sinus dla komórek w rastrze.",
		sinDesc: "Funkcja oblicza sinus pikseli w rastrze.",
		slopeName: "Spadki",
		slopeSnip: "Szybkość zmiany z jednej wartości piksela na sąsiednią.",
		slopeDesc: "Ta funkcja rastrowa oblicza spadek, który reprezentuje szybkość zmian wysokości dla każdej komórki numerycznego modelu terenu (DEM). Jest to pierwsza wartość pochodna modelu DEM.<div><br/>Ta funkcja korzysta z przyspieszonej funkcji atan(). Jest ona sześć razy szybsza, a błąd przybliżenia jest zawsze mniejszy niż 0,3 stopnia.</div>",
		speckleName: "Plamkowanie",
		speckleSnip: "Udostępnia filtry do usuwania szumów z zestawów danych radaru z syntetyczną aperturą.",
		speckleDesc: "Plamkowanie to szum o wysokiej częstotliwości na danych radaru. Obrazy wygenerowane przez systemy SAR (radar z syntetyczną aperturą) są bardzo podatne na efekty plamkowania z powodu przetwarzania rozproszonych sygnałów i zakłóceń fal elektromagnetycznych rozproszonych od powierzchni lub obiektów. Ta funkcja Plamkowanie filtruje zawierający echa punktowe zestaw danych radarowych i wygładza szumy z zachowaniem krawędzi i ostrych obiektów obrazu.",
		spectralConversionName: "Konwersja spektralna",
		spectralConversionSnip: "Stosuje macierz względem obrazu wielopasmowego.",
		spectralConversionDesc: "Funkcja Konwersja spektralna stosuje macierz względem obrazu wielopasmowego, aby wpłynąć na wartości koloru danych wynikowych.<div><br/>Niektóre czujniki nie gromadzą pasm koloru niebieskiego ze względu na niski współczynnik sygnału do szumu. Można jej użyć na przykład w celu przekonwertowania obrazu w podczerwieni z kolorami fałszywymi na obraz z kolorami pseudonaturalnymi.</div>",
		squareRootName: "Pierwiastek kwadratowy",
		squareRootSnip: "Oblicza pierwiastek kwadratowy wartości komórki w rastrze.",
		squareRootDesc: "Funkcja Pierwiastek kwadratowy oblicza pierwiastek kwadratowy wartości pikseli w rastrze.",
		squareName: "Kwadrat",
		squareSnip: "Oblicza kwadrat wartości komórek w rastrze.",
		squareDesc: "Funkcja Kwadrat oblicza kwadrat wartości pikseli w rastrze.",
		statisticsHistogramName: "Dane statystyczne i histogram",
		statisticsHistogramSnip: "Definiuj lub powiąż dane statystyczne i histogram.",
		statisticsHistogramDesc: "Funkcja tworząca dane statystyczne i histogram pozwala utworzyć dane statystyczne i histogram dla rastra. Tę funkcję można umieścić na końcu łańcucha funkcji w celu określenia danych statystycznych i histogramu szablonu funkcji rastrowej (RFT). Może to być potrzebne w celu określenia domyślnego sposobu wyświetlania wyniku przetwarzania, zwłaszcza przy definiowaniu łańcucha funkcji zawierającego większą ich liczbę.<div><br/>Dane statystyczne można zdefiniować, wpisując wartości lub importując je z zestawu danych rastrowych lub pliku XML. Histogramy można definiować tylko poprzez zaimportowanie pliku.</div>",
		statisticsName: "Statystyka",
		statisticsSnip: "Oblicza statystyki centralne dla każdego piksela obrazu na podstawie zdefiniowanego sąsiedztwa punktu centralnego.",
		statisticsDesc: "Funkcja Statystyki oblicza statystykę centralną dla każdego piksela obrazu na podstawie zdefiniowanego sąsiedztwa.<div><br/>Za pomocą funkcji Statystyki można wypełniać linie usunięte z obrazu. Częstą przyczyną usuniętych linii są problemy z czujnikiem, przez które dane nie są zbierane. Taki problem wystąpił na przykład w przypadku czujnika Enhanced Thematic Mapper Plus (ETM+) w satelicie Landsat 7. Brakujące dane powodują problemy podczas analizy i utrudniają przeglądanie zobrazowań. W przypadku używania zobrazowań do analizy niewiele można zrobić. Jeśli jednak istnieje nakładający się obraz, można go użyć zamiast brakującej zawartości. Ten sam proces można zastosować, jeśli zobrazowanie ma być używane do wizualizacji. Niestety, dodatkowy obraz umożliwiający wypełnienie braków nie zawsze istnieje, więc zawartość trzeba uzyskać na podstawie istniejących danych.</div>",
		streamLinkName: "Łączenie strumieni",
		streamLinkSnip: "Przypisuje unikalne wartości sekcjom liniowej sieci rastrowej między przecięciami.",
		streamLinkDesc: "Funkcja globalna Łączenie strumieni przypisuje unikalne wartości sekcjom liniowej sieci rastrowej między przecięciami.<div><br/>Łączniki to sekcje kanału strumienia łączące dwa kolejne węzły, węzeł i wylot lub węzeł i dział wód. W hydrologii te segmenty strumienia są nazywane biegami. Węzeł jest powiązany z punktem wylewu i pomaga wyznaczyć granicę zlewni lub dorzecza.</div>",
		stretchName: "Rozciągnij",
		stretchSnip: "Ulepsza obraz, dostosowując zakres wyświetlanych wartości. Ta operacja nie zmienia bazowych wartości pikseli. Jeśli wartość piksela jest spoza podanego zakresu, zostanie wyświetlona jako wartość minimalna lub maksymalna.",
		stretchDesc: "Funkcja Rozciągnij ulepsza obraz za pomocą zmiany właściwości, takich jak jasność, kontrast i korekta gamma, przez zastosowanie wielu typów rozciągnięcia. Ta funkcja wykorzystuje statystyki z rastrów w obrębie zestawu danych mozaiki, dlatego jeśli jest ona używana należy zagwarantować obliczenie statystyk.<div><br/>Typ rozciągnięcia definiuje rozciągnięcie histogramu, które zostanie zastosowane względem rastrów w celu ulepszenia ich wyglądu. Rozciąganie poprawia wygląd danych przez rozmieszczenie wartości pikseli w histogramie od wartości minimalnych i maksymalnych zdefiniowanych przez ich głębię bitową. </div>",
		swathName: "Pokos",
		swathSnip: "Interpoluje z nieregularnych siatek lub danych pokosowych (swath).",
		swathDesc: "Niektóre zestawy danych netCDF lub HDF przechowują geolokalizację jako tablice z nieregularnymi odstępami. Podczas dodawania tych zestawów danych do zestawu danych mozaiki funkcja Pas wykonuje ponowne próbkowanie danych o nieregularnej siatce w taki sposób, aby każdy piksel miał jednakowy rozmiar i był kwadratowy.<div><br/>W trakcie dodawania zmiennych z zestawu danych netCDF lub HDF do zestawu danych mozaiki zostanie przeprowadzona automatyczna weryfikacja, czy dane są rozmieszczone regularnie. Jeśli tak nie jest, zostanie automatycznie zastosowana funkcja Pas, która przekonwertuje nieregularny raster w punkty, a następnie w raster o regularnej siatce. Metodę interpolacji i rozmiar komórki używane w funkcji rastrowej Pas można zmienić. W przypadku danych rastrowych o regularnych odstępach nie zostanie zastosowana żadna interpolacja. Dane zostaną odczytane bez zmian.</div>",
		tanHName: "TanH",
		tanHSnip: "Oblicza tangens hiperboliczny komórek rastra.",
		tanHDesc: "Funkcja oblicza tangens hiperboliczny pikseli w rastrze.",
		tanName: "Tan",
		tanSnip: "Oblicza tangens komórek rastra.",
		tanDesc: "Funkcja oblicza tangens pikseli w rastrze. ",
		tasseledCapName: "Funkcja Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Oblicza poziom roślinności, wilgoci i jasności. Ta technika opiera się na współczynnikach, które muszą być obliczane specjalnie dla czujnika.",
		tasseledCapDesc: "Transformacja Tasseled Cap (Kautha-Thomasa) została zaprojektowana na potrzeby analizowania i tworzenia map zmian roślinności i rozwoju urbanistycznego wykrywanych przez różne systemy czujników satelitarnych. Jest nazywana transformacją „czapki z frędzlami” z powodu kształtu graficznego rozkładu danych. Transformacja ta pozwoliła uzasadnić wzorce znalezione w danych Landsat MSS dotyczących pól uprawnych za pomocą funkcji opisującej cykl życia plonów. Zasadniczo wraz ze wzrostem upraw od momentu zasiewu do osiągnięcia dojrzałości następuje zwiększenie odbicia netto w zakresie bliskiej podczerwieni i zmniejszenie w zakresie czerwieni w zależności od koloru gleby<div><br/>Zakres wykorzystania tej transformacji wykroczył poza monitorowanie upraw i obejmuje obecnie analizę oraz tworzenie map roślinności w różnorodnych zastosowaniach, takich jak leśnictwo, zarządzanie przemysłowe roślinnością, tworzenie map ekosystemów i zarządzanie nimi, inwentaryzowanie i monitorowanie sekwestracji węgla, rozwój urbanistyczny i wiele więcej. Zapewnia również obsługę nie tylko danych Landsat MSS, ale także danych pochodzących z czujników wielospektralnych innych popularnych systemów satelitarnych, takich jak Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 i RapidEye.</div>",
		timesName: "Pomnóż",
		timesSnip: "Mnoży wartości dwóch rastrów, przetwarzając wszystkie komórki po kolei.",
		timesDesc: "Funkcja Pomnóż mnoży wartości dwóch rastrów, przetwarzając wszystkie piksele po kolei.",
		transposeBitsName: "Transpoza bitów",
		transposeBitsSnip: "Rozpakowuje bity piksela wejściowego i przyporządkowuje je do podanych bitów w pikselu wynikowym. Celem tej funkcji jest manipulowanie bitami z kilku danych wejściowych, takich jak produkty o jakości pasma Landsat 8.",
		transposeBitsDesc: "Funkcja Transpoza bitów rozpakowuje bity piksela wejściowego i przyporządkowuje je do podanych bitów w pikselu wynikowym. Celem tej funkcji jest manipulowanie bitami z kilku danych wejściowych, takich jak produkty o jakości pasma Landsat 8.",
		unitConversionName: "Konwersja jednostek",
		unitConversionSnip: "Zmienia wartości z jednej jednostki miary na inną.",
		unitConversionDesc: "Ta funkcja konwertuje piksele z jednej jednostki na inną. Obsługuje konwersję odległości, prędkości i temperatury.",
		vectorFieldName: "Pole wektora",
		vectorFieldSnip: "Wyświetla zestawy danych, gdzie zarówno wielkość (u), jak i kierunek (v) są przestawione w postaci strzałek. Wielkość jest reprezentowana przez rozmiar, a kierunek jest reprezentowany przez kąt strzałki.",
		vectorFieldDesc: "Funkcja Pole wektora jest używana do złożenia i konwersji dwóch rastrów w raster dwupasmowy o typie danych Wielkość-kierunek lub U-V.<div><br/>Wartość U jest czasem nazywana prędkością strefową, a wartość V jest czasem nazywana prędkością południkową.</div>",
		viewshed2Name: "Obszar widoczności",
		viewshed2Snip: "Określa, które lokalizacje na powierzchni rastrowej są widoczne dla zbioru obiektów obserwatorów przy użyciu metod geodezyjnych.",
		viewshed2Desc: "Funkcja Obszar widoczności określa, które lokalizacje na powierzchni rastrowej są widoczne dla zbioru obiektów obserwatorów przy użyciu metod geodezyjnych<div><br/>Widoczność środka każdego piksela jest określona przez test linii widoczności przebiegającej między celem i każdym obserwatorem. Jeśli obserwator może widzieć cel w środku piksela, piksel jest traktowany jako widoczny. To narzędzie zawsze przy określaniu widoczności bierze pod uwagę krzywiznę kuli ziemskiej.</div>",
		watershedName: "Zlewnia",
		watershedSnip: "Określa obszar powyżej zbioru komórek w rastrze",
		watershedDesc: "Funkcja globalna Zlewnia określa obszar powyżej zbioru pikseli w rastrze. Zlewnie są wytyczane na podstawie rastra kierunku przepływu, który identyfikuje kierunek przepływu z każdego piksela.",
		weightedOverlayName: "Nakładanie priorytetowe",
		weightedOverlaySnip: "Umożliwia nałożenie na siebie wielu rastrów używających wspólnej skali pomiarowej i waży je odpowiednio do ich ważności.",
		weightedOverlayDesc: "Ta funkcja umożliwia nałożenie na siebie wielu rastrów używających wspólnej skali pomiarowej i określenie ich wagi odpowiednio do ich ważności.",
		weightedSumName: "Suma ważona",
		weightedSumSnip: "Waży i dodaje tablicę rastrów metodą komórka po komórce.",
		weightedSumDesc: "Funkcja Suma ważona umożliwia nałożenie na siebie wielu rastrów, poprzez pomnożenie każdego z nich przez podaną wagę i zsumowanie ich razem.",
		windchillName: "Temperatura odczuwalna",
		windchillSnip: "Łączy temperaturę powietrza w otoczeniu i prędkość wiatru w celu obliczenia temperatury odczuwalnej.",
		windchillDesc: "Funkcja Temperatura odczuwalna jest przydatna do zidentyfikowania niebezpiecznych warunków zimowych, które w zależności od czasu ekspozycji elementów mogą spowodować odmrożenia, a nawet hipotermię. Temperatura odczuwalna to sposób pomiaru uczucia chłodu z uwzględnieniem wiatru przy niskich temperaturach. Im większa prędkość wiatru, tym szybciej ciało utraci ciepło i odczuwany będzie większy chłód.",
		zonalRemapName: "Strefowe ponowne przyporządkowanie",
		zonalRemapSnip: "Ponownie przyporządkowuje piksele w rastrze na podstawie stref zdefiniowanych przez inny raster oraz zdefiniowanego w tabeli przyporządkowania wartości zależnie od strefy.",
		zonalRemapDesc: "Ta funkcja umożliwia ponowne przyporządkowanie pikseli w rastrze na podstawie stref zdefiniowanych w innym rastrze oraz zdefiniowanego w tabeli przyporządkowania wartości zależnie od strefy.",
		zonalStatisticsName: "Statystyka strefowa",
		zonalStatisticsSnip: "Oblicza statystyki wartości rastra wewnątrz stref określonych przez zestaw danych.",
		zonalStatisticsDesc: "Ta funkcja oblicza statystyki wartości rastra wewnątrz stref określonych przez inny zestaw danych. Strefa jest definiowana jako wszystkie obszary w danych wejściowych, które mają tę samą wartość. Te obszary nie muszą być ciągłe. Jeśli zarówno strefa, jak i dane wejściowe wartości są rastrami o takiej samej rozdzielczości, zostaną użyte bezpośrednio. Jeśli rozdzielczości są różne, to w celu ich dopasowania zostanie przeprowadzone wewnętrzne ponowne próbkowanie przed wykonaniem operacji na strefie.",
		flowLengthName: "Długość przepływu",
		flowLengthSnip: "Wylicza odległość w górę lub w dół rzeki lub ważoną odległość wzdłuż ścieżki przepływu dla każdej komórki.",
		flowLengthDesc: "To jest globalna funkcja rastrowa. Ta funkcja tworzy warstwę rastrową odległości w górę lub w dół lub ważoną odległość wzdłuż ścieżki przepływu dla każdej komórki.<div><br/>Funkcja Długość przepływu jest przede wszystkim używana do obliczenia długości najdłuższej ścieżki przepływu w danej zlewni. Ten pomiar jest często wykorzystywany do obliczenia czasu koncentracji zlewni. W tym celu jest używana opcja W górę. Za pomocą tej funkcji można również utworzyć diagramy odległość-obszar hipotetycznych zdarzeń opadów deszczu i odpływów, korzystając z rastra ważonego jako impedancji przy ruchu w dół.</div>",
		streamOrderName: "Kolejność strumieni",
		streamOrderSnip: "Przypisuje liczbową kolejność segmentom rastra reprezentującym gałęzie sieci liniowej",
		streamOrderDesc: "To jest globalna funkcja rastrowa. Ta funkcja tworzy warstwę rastrową przypisującą liczbową kolejność segmentom rastra reprezentującym gałęzie sieci liniowej.<div><br/>Dane wynikowe funkcji Kolejność strumieni będą mieć wyższą jakość, jeśli warstwa wejściowego rastra strumieniowego i warstwa wejściowego rastra kierunku przepływu są pozyskiwane z tej samej powierzchni. Jeśli raster strumieniowy jest pozyskiwany z zestawu danych strumieni przekształconych w raster, dane wynikowe mogą nie być użyteczne, ponieważ przy przetwarzaniu komórek po kolei kierunek nie będzie odpowiadał lokalizacji komórek strumienia. Wynik uzyskany za pomocą funkcji Przepływ zbiorczy może być wykorzystany do utworzenia rastrowej sieci strumieni po zastosowaniu wartości progowej w celu wyboru komórek o najwyższym przepływie zbiorczym. Na przykład w celu utworzenia sieci strumieni używane są komórki, do których wpływa więcej niż 100 komórek. Użyj funkcji Konwersja lub Ustaw wartość null w celu utworzenia rastra sieci strumieni, w którym wartości przepływu zbiorczego o wartości równej 100 lub większej przechodzą w wartość jeden, a pozostałe obszary stają się tłem (NoData). Wynikowa sieć strumieni może zostać użyta w funkcji Kolejność strumieni. Ta funkcja obsługuje tylko wejściową warstwę rastrową kierunku przepływu typu D8. Kierunki przepływu D8 można utworzyć za pomocą funkcji Kierunek przepływu i uruchomić z domyślnym kierunkiem przepływu o typie D8.</div>",
		snapPourPointName: "Dociągnij punkt wylewu",
		snapPourPointSnip: "Dociąga punkty wylewu do komórki o najwyższym przepływie zbiorczym znajdującej się w określonej odległości",
		snapPourPointDesc: "To jest globalna funkcja rastrowa. Ta funkcja dociąga punkty wylewu do komórki o najwyższym przepływie zbiorczym znajdującej się w określonej odległości.<div><br/>Funkcja Dociągnij punkt wylewu jest używana do zapewnienia selekcji punktów o najwyższym przepływie zbiorczym przy określaniu granic dorzeczy za pomocą funkcji Zlewnia. Funkcja Dociągnij punkt wylewu przeprowadzi przeszukanie w obrębie odległości dociągania wokół podanych punktów wylewu dla komórki najwyższego przepływu zbiorczego i przeniesie punkt wylewu do tej lokalizacji. Dane wynikowe stanowi warstwa rastrowa składająca się z liczb całkowitych, w której oryginalne lokalizacje punktów wylewu zostały dociągnięte do lokalizacji najwyższego przepływu zbiorczego.</div>",
		sinkName: "Obniżenie",
		sinkSnip: "Tworzy raster określający wszystkie obniżenia lub obszary wewnętrznego spływu",
		sinkDesc: "To jest globalna funkcja rastrowa. Ta funkcja tworzy warstwę rastrową określającą wszystkie obniżenia lub obszary wewnętrznego spływu. Obniżenie to komórka lub zestaw przestrzennie połączonych komórek z kierunkiem przepływu, do którego nie można przypisać jednej z ośmiu prawidłowych wartości w rastrze kierunku przepływu. Taka sytuacja może nastąpić, gdy wszystkie sąsiadujące komórki mają wartości wyższe od przetwarzanej komórki lub gdy dwie komórki przepływają do siebie wzajemnie, tworząc pętlę złożoną z dwóch komórek.<div><br/>Funkcja Obniżenie obsługuje tylko wejściową warstwę rastrową kierunku przepływu typu D8. Kierunki przepływu D8 można utworzyć za pomocą funkcji Kierunek przepływu i uruchomić z domyślnym kierunkiem przepływu o typie D8. Dane wynikowe funkcji Obniżenie to raster całkowitoliczbowy, w którym każde obniżenie ma przypisaną unikalną wartość. Te unikalne wartości mają zakres od jednego do łącznej liczby obniżeń. Jeśli na przykład łączna liczba obniżeń wyniosła 1000, unikalne wartości mają zakres od 1 do 1000.</div>",
		aggregateName: "Agregacja",
		aggregateSnip: "Generuje raster w wersji ze zmniejszoną rozdzielczością.",
		aggregateDesc: "Funkcja Agreguj przepróbkowuje raster wejściowy do niższej rozdzielczości na podstawie wskazanej strategii agregacji. Każda komórka wynikowa zawiera sumę, wartość minimalną, maksymalną, średnią lub medianę komórek wejściowych mieszczących się w zakresie komórek.<div><br/>Można podać współczynnik, przez który zostanie pomnożony rozmiar komórki rastra wejściowego. Przykładowo wartość współczynnika komórek wynosząca 3 spowoduje, że powstanie raster wynikowy o komórce trzykrotnie większej niż w rastrze wejściowym. Można zdefiniować sposób obsługi zasięgu rastra wynikowego, jeśli liczba wierszy lub kolumn w rastrze wejściowym nie jest dokładną wielokrotnością współczynnika komórek. Domyślnie zostaną rozszerzone granice znajdujące się na górze i po prawej stronie, co pozwoli na pokrycie większego zasięgu przestrzennego, niż ten w rastrze wejściowym i przetworzenie wszystkich komórek wejściowych. Alternatywnie można zmniejszyć górną i prawą granicę, aby pokryć mniejszy zasięg, dzięki czemu liczba przetworzonych wierszy i kolumn będzie dokładną wielokrotnością współczynnika komórek. Można zdefiniować sposób obsługi komórek NoData w obliczeniach agregacji. Domyślny mechanizm polega na tym, że wejściowe komórki NoData należące do zasięgu przestrzennego większej komórki w rastrze wynikowym będą ignorowane podczas ustalania wartości tej komórki wynikowej. Można także wybrać następującą metodę: jeśli w zasięgu przestrzennym komórki wynikowej znajduje się choć jedna komórka wejściowa NoData, komórka ta będzie komórką NoData także w rastrze wynikowym.</div>",
		ccdcName: "Analiza CCDC",
		ccdcSnip: "Ocenia zachodzące z biegiem czasu zmiany w wartościach pikseli przy użyciu algorytmu ciągłego wykrywania i klasyfikacji zmian (Continuous Change Detection and Classification - CCDC) i generuje wyniki modelu.",
		ccdcDesc: "Funkcja Analiza CCDC ocenia zachodzące z biegiem czasu zmiany w wartościach pikseli przy użyciu algorytmu ciągłego wykrywania i klasyfikacji zmian (Continuous Change Detection and Classification - CCDC) i generuje raster wielowymiarowy zawierający wyniki modelu. Jest ona obsługiwana tylko w połączeniu z funkcją Wykrywanie zmian przy użyciu analizy zmian w szablonie funkcji rastrowych. Aby utworzyć raster wynikowy, połącz funkcję Analiza CCDC z funkcją Wykrywanie zmian przy użyciu analizy zmian, zapisz wynik tej operacji jako szablon funkcji rastrowej i uruchom analizę rastrową przy użyciu tego szablonu funkcji.<div><br/>Ta funkcja korzysta z algorytmu ciągłego wykrywania i klasyfikacji zmian (Continuous Change Detection and Classification - CCDC) do przeprowadzania oceny zachodzących z biegiem czasu zmian wartości pikseli w zbiorze obrazów. W przypadku uporządkowanych zbiorów zobrazowań optycznych wykonanych w różnym czasie lub instrumentów pochodnych zobrazowań (na przykład NDVI), wartości pikseli mogą zmieniać się z kilku powodów: 1. Zmiany sezonowe -- zmiany wartości pikseli odzwierciedlają zmiany stanu roślinności spowodowane sezonową zmiennością temperatur i opadów. Na przykład na półkuli północnej latem można spodziewać się gęstszej roślinności zielonej niż zimą; 2. Zmiany stopniowe -- zmiany wartości pikseli odzwierciedlają trendy dotyczące szaty roślinnej lub wód powierzchniowych, które są związane ze zmiennością klimatu lub długoterminowymi zmianami zagospodarowania terenu. Na przykład w wyniku długoterminowego zmniejszania się ilości opadów obszary nieporośnięte roślinnością mogą się stopniowo powiększać; 3. Zmiany nagłe -- zmiany wartości pikseli odzwierciedlają szybko zachodzące zmiany powierzchni terenu, których przyczyną może być wylesianie, rozwój miast, katastrofy naturalne i tak dalej. Algorytm CCDC pozwala identyfikować wszystkie trzy typy zmian, ze szczególnym naciskiem na zmiany nagłe. Podczas przeprowadzania oceny zmian sezonowych i stopniowych do danych jest dopasowywana regresja harmoniczna i modele trendów. Nagłe odchylenia od modeli trendów wskazują na zmiany nagłe.<div><br/>Algorytm CCDC został pierwotnie zaprojektowany dla danych temperaturowych związanych ze współczynnikiem odbicia i jasności powierzchni, takich jak Landsat TM, Landsat ETM+ i Landsat OLI. Jednak funkcja Wykrywanie zmian przy użyciu analizy zmian w połączeniu z tą funkcją będzie wykrywać zmiany w zobrazowaniach wielopasmowych z dowolnych obsługiwanych czujników, jak również w instrumentach pochodnych zobrazowań jednopasmowych, takich jak indeksy pasm. Można na przykład przeprowadzić ciągłe wykrywanie zmian na rastrze znormalizowanego różnicowego wskaźnika roślinności (Normalize Difference Vegetation Index - NDVI), ponieważ nagłe zmiany wskaźnika NDVI mogą świadczyć o wylesieniu.</div>",
		computeChangeName: "Obliczanie zmian",
		computeChangeSnip: "Oblicza zmiany między dwoma zestawami danych kategorialnych lub ciągłych.",
		computeChangeDesc: "Funkcja Obliczanie zmian może być używana do obliczania różnic między dwoma sklasyfikowanymi rastrami w analizie zmian pokrycia terenu lub do badania zmian między dwoma ciągłymi rastrami jednopasmowymi zawierającymi dane o wysokości, temperaturze, pokryciu powierzchni przez korony drzew itp.",
		detectChangeName: "Wykrywanie zmian przy użyciu analizy zmian",
		detectChangeSnip: "Generuje warstwę rastrową zawierającą informacje o zmianach pikseli przy użyciu wynikowego rastra analizy zmian.",
		detectChangeDesc: "<div>Funkcja Wykrywanie zmian przy użyciu analizy zmian generuje warstwę rastrową zawierającą informacje o datach zmiany pikseli przy użyciu rastra analizy zmian. Raster analizy zmian musi być wygenerowany przez narzędzie Analiza zmian z użyciem algorytmu CCDC, narzędzie Analiza zmian z użyciem algorytmu LandTrendr, funkcję rastrową Analiza CCDC lub funkcję rastrową Analiza LandTrendr.</div><br><div>Tę funkcję rastrową można połączyć z funkcją rastrową Analiza CCDC lub funkcją rastrową Analiza LandTrendr w szablonie funkcji rastrowej. Aby utworzyć trwały raster wynikowy, połącz dane wynikowe funkcji Analiza CCDC lub funkcji Analiza LandTrendr z funkcją Wykrywanie zmian przy użyciu analizy zmian, zapisz wynik tej operacji jako szablon funkcji rastrowej i uruchom analizę rastrową przy użyciu tego szablonu.</div><br><div> Parametr <strong>Typ zmian</strong> wskazuje tworzone informacje. Informacje są wyodrębniane z rastra analizy zmian. Uruchamiając tę funkcję z użyciem danych wynikowych funkcji/narzędzia CCDC, dokonuje się wyboru spośród następujących opcji:</div><ul><li><strong>Czas najnowszej zmiany</strong> — data i czas ostatniego oznaczenia piksela jako zmienionego.</li><li><strong>Czas najstarszej zmiany</strong> — data i czas najstarszego oznaczenia piksela jako zmienionego.</li><li><strong>Czas największej zmiany</strong> — data i czas momentu, gdy obliczona zmiana była najbardziej znacząca dla piksela.</li><li> <strong>Liczba zmian</strong> — łączna liczba zmian piksela.</li></ul><div>Uruchamiając tę funkcję z użyciem danych wynikowych funkcji/narzędzia LandTrendr, dostępne są następujące opcje dodatkowe:</div><ul><li><strong>Czas najdłuższej zmiany</strong> — data oznaczenia piksela jako zmienionego: na początku lub na końcu okresu najdłuższej zmiany.</li><li><strong>Czas najkrótszej zmiany</strong> — data oznaczenia piksela jako zmienionego: na początku lub na końcu okresu najkrótszej zmiany.</li><li><strong>Czas najszybszej zmiany</strong> data oznaczenia piksela jako zmienionego: na początku lub na końcu okresu najszybszej zmiany.</li><li><strong>Czas najwolniejszej zmiany</strong> — data oznaczenia piksela jako zmienionego: na początku lub na końcu okresu najwolniejszej zmiany.</li></ul><div>Raster wynikowy jest rastrem wielopasmowym, w którym każde pasmo zawiera informacje o zmianach zależne od wybranego typu zmian i podanej maksymalnej liczby zmian. Jeśli na przykład parametr <strong>Typ zmiany</strong> ma skonfigurowaną wartość <strong>Czas najstarszej zmiany</strong>, a parametr <strong>Maksymalna liczba zmian</strong> ma skonfigurowaną wartość 2, funkcja obliczy dla każdego piksela dwie najstarsze daty wystąpienia zmian w całym szeregu czasowym. Wynikiem jest raster, którego pierwsze pasmo zawiera daty najstarszych zmian poszczególnych pikseli, a drugie pasmo zawiera daty drugich pod względem wieku zmian poszczególnych pikseli.</div><br><div>Gdy funkcja ta jest stosowana z użyciem wyniku z narzędzia LandTrendr, można wybrać, czy wyodrębniać datę oznaczającą początek, czy też koniec zmiany za pomocą parametru <strong>Data segmentu</strong>. Aby na przykład zrozumieć, jak rozpoczęła się ostatnia zmiana w szeregu czasowym, dla parametru <strong>Typ zmiany</strong> skonfiguruj wartość <strong>Czas najnowszej zmiany</strong> i dla parametru <strong>Data segmentu</strong> skonfiguruj wartość <strong>Początek segmentu</strong>.</div><br><div>Użyj następujących parametrów filtrowania, aby wyodrębnić bardziej precyzyjne daty zmian z rastra analizy zmian:</div><ul><li><strong>Filtruj według roku</strong> — identyfikowanie zmian, które wystąpiły w konkretnym okresie czasu, na przykład wtedy, gdy szukasz zmian w krajobrazie, które nastąpiły w czasie pięciu lat suszy.</li><li><strong>Filtruj według czasu trwania</strong> — identyfikowanie zmian, które wystąpiły w ciągu podanego zakresu lat, na przykład wtedy, gdy szukasz tylko nagłych zmian, które nastąpiły w ciągu 1 lub 2 lat. Interesujący Cię okres możesz obliczyć za pomocą wzoru <strong>rok końcowy - rok początkowy +1</strong>. Luki w szeregach czasowych zostaną uwzględnione.</li><li><strong>Filtruj według wielkości</strong> — identyfikowanie zmian o danej wielkości, na przykład wtedy, gdy szukasz tylko dużych zmian we wskaźniku roślinności NDVI. Wielkość jest wartością bezwzględną, więc wartości minimalna i maksymalna nie mogą być ujemne. Aby określić zmianę kierunkową, użyj parametru <strong>Zmień kierunek</strong>.</li></ul>",
		distanceAccumulationName: "Akumulacja odległości",
		distanceAccumulationSnip: "Dla każdej komórki oblicza odległość do źródeł, biorąc pod uwagę odległość w linii prostej, koszt odległości, rzeczywistą odległość powierzchniową, a także poziomy i pionowy składnik kosztów.",
		distanceAccumulationDesc: "Funkcja Akumulacja odległości oblicza odległość do poszczególnych lokalizacji w analizowanym obszarze (do najbliższego źródła lub źródła o najniższym koszcie). Jeśli jako dane wejściowe są podane tylko źródła, obliczana jest tylko odległość w linii prostej do poszczególnych lokalizacji w analizowanym obszarze. Jeśli jako dane wejściowe są podane zarówno źródła, jak i bariery, funkcja Akumulacja odległości oblicza odległość w linii prostej z uwzględnieniem barier. Zarówno w przypadku rastra źródłowego, jak i rastra barier, wartościami tła powinny być wartości NoData, podczas gdy źródła i bariery powinny być reprezentowane przez prawidłowe wartości komórek. Zera są także prawidłowymi wartościami. <div><br/>Jeśli w danych wejściowych został uwzględniony raster powierzchni, obliczana jest rzeczywista odległość między komórkami na powierzchni. Aby przy użyciu funkcji Akumulacja odległości przeprowadzić analizę kosztów, potrzebna jest powierzchnia kosztów. Po podaniu powierzchni kosztów wynikiem działania tej funkcji jest zakumulowany raster kosztów i odległości. Po podaniu współczynnika poziomego i pionowego akumulowana jest kierunkowość traktowana jako koszt. Można użyć czterech charakterystyk źródła. Te charakterystyki, które mogą dotyczyć źródła lub elementów poruszających się ze źródła, są kontrolowane przez następujące parametry: 1. Akumulacja początkowa: konfiguruje początkowy koszt przed rozpoczęciem ruchu. 2. Akumulacja maksymalna: określa poziom akumulacji kosztów przez źródło przed osiągnięciem limitu. 3. Mnożnik do zastosowania dla kosztów: określa tryb podróżowania lub wielkość w źródle. 4. Kierunek podróży: określa, czy element poruszający się rozpoczyna od źródła i przemieszcza się do lokalizacji innych niż źródłowe, czy też rozpoczyna od lokalizacji innych niż źródłowe i wraca do źródła.<div><br/>Domyślnie wynikiem działania funkcji Akumulacja odległości jest pojedyncze pasmo, które jest rastrem akumulacji odległości. Można jednak utworzyć drugie pasmo, czyli pasmo kierunku powrotnego.  To pasmo wskazuje, z której lokalizacji w analizowanym obszarze i w jakim kierunku należy się poruszać, aby dostać się do źródła o najniższym koszcie.  Oba pasma będą potrzebne do ustalenia optymalnych ścieżek w analizowanym obszarze. Aby wygenerować ścieżkę, najpierw użyj funkcji Wyodrębnianie pasm w celu wyodrębnienia rastra akumulacji odległości i rastra kierunku powrotnego. Użyj tych warstw jako danych wejściowych funkcji Ścieżka kosztów. W tej funkcji użyj rastra akumulacji odległości jako wejściowego rastra kosztu i odległości oraz rastra kierunku powrotnego jako wejściowego rastra kosztów łączy powrotnych.</div>",
		distanceAllocationName: "Przydział odległości",
		distanceAllocationSnip: "Dla każdej komórki oblicza odległość do podanych źródeł, biorąc pod uwagę odległość w linii prostej, koszt odległości, rzeczywistą odległość powierzchniową, a także poziomy i pionowy składnik kosztów.",
		distanceAllocationDesc: "Funkcja Przydział odległości oblicza, do których źródeł są przydzielane poszczególne lokalizacje analizowanego obszaru. Jeśli jako dane wejściowe są podane tylko źródła, wówczas lokalizacje są alokowane przy użyciu odległości w linii prostej do najbliższego źródła. Jeśli jako dane wejściowe są podane zarówno źródła, jak i bariery, wówczas funkcja Przydział odległości oblicza odległość w linii prostej z uwzględnieniem barier w celu ustalenia, do których źródeł są alokowane poszczególne lokalizacje. Zarówno w przypadku rastra źródłowego, jak i rastra barier, wartościami tła powinny być wartości NoData, podczas gdy źródła i bariery powinny być reprezentowane przez prawidłowe wartości komórek. Zera są także prawidłowymi wartościami.<div><br/>Aby przy użyciu funkcji Przydział odległości przeprowadzić analizę kosztów, potrzebna jest powierzchnia kosztów. Jeśli została podana powierzchnia kosztów, wówczas wynikiem jest raster przydziału utworzony na podstawie zakumulowanego kosztu, a nie odległości w linii prostej. Po podaniu współczynnika poziomego i pionowego akumulowana jest kierunkowość traktowana jako koszt. Jeśli w danych wejściowych został uwzględniony raster powierzchni, podczas ustalania przydziału obliczana jest rzeczywista odległość na powierzchni pokonywana podczas przechodzenia między komórkami. Można użyć czterech charakterystyk źródła. Te charakterystyki, które mogą dotyczyć źródła lub elementów poruszających się ze źródła, są kontrolowane przez następujące parametry: 1. Akumulacja początkowa: konfiguruje początkowy koszt przed rozpoczęciem ruchu. 2. Akumulacja maksymalna: określa poziom akumulacji kosztów przez źródło przed osiągnięciem limitu. 3. Mnożnik do zastosowania dla kosztów: określa tryb podróżowania lub wielkość w źródle. 4. Kierunek podróży: określa, czy element poruszający się rozpoczyna od źródła i przemieszcza się do lokalizacji innych niż źródłowe, czy też rozpoczyna od lokalizacji innych niż źródłowe i wraca do źródła.<div><br/>Domyślnie wynikiem działania funkcji Przydział odległości jest pojedyncze pasmo, które jest rastrem przydziału odległości. Zaznaczenie opcji logicznej Generuj wiersz i kolumnę źródłową jako dodatkowe pasma w danych wynikowych powoduje powstanie rastra wielopasmowego składającego się z trzech pasm. Pierwszym pasmem jest pasmo przydziału odległości, drugie pasmo zawiera indeks wiersza, a trzecie pasmo zawiera indeks kolumny. Te indeksy wskazują lokalizację komórki źródłowej, która jest odległa o najmniejszy akumulowany koszt. Źródłowego indeksu wiersza i źródłowego indeksu kolumny można używać razem do przyporządkowania intensywności. W przypadku wyszukania dowolnej lokalizacji w analizowanym obszarze obejmującym pasma dwa i trzy, znany będzie wiersz i kolumna źródła o najniższym koszcie dla tej lokalizacji.</div>",
		eucBackDirectionName: "Euklidesowy kierunek powrotny",
		eucBackDirectionSnip: "Oblicza dla każdej komórki kierunek w stopniach do sąsiedniej komórki znajdującej się na najkrótszej ścieżce powrotnej prowadzącej do najbliższego źródła z ominięciem barier.",
		eucBackDirectionDesc: "Wynikiem funkcji Euklidesowy kierunek powrotny jest ciągły raster zmiennoprzecinkowy reprezentujący kierunek w stopniach prowadzący z powrotem do najbliższego źródła, przy czym uwzględniane są bariery, jeśli zostały podane.<div><br/>Danymi wejściowymi funkcji Euklidesowy kierunek powrotny jest źródło, do którego zostanie obliczony kierunek. Opcjonalnymi danymi wejściowymi jest raster reprezentujący bariery w analizowanym obszarze. Zarówno w przypadku rastra źródłowego, jak i rastra barier, wartościami tła powinny być wartości NoData, podczas gdy źródła i bariery powinny być reprezentowane przez prawidłowe wartości. Zera są także prawidłowymi wartościami. Domyślnie podczas obliczeń zostanie przetworzony połączony zasięg źródeł i barier plus dwa wiersze i dwie kolumny. Jeśli analiza ma zostać przeprowadzona tylko w obszarze do określonej odległości od źródeł, można użyć parametru Maksymalna odległość. Podczas obliczeń funkcji Euklidesowy kierunek powrotny obsługiwana jest zarówno metoda planarna, jak i geodezyjna. Obliczenia metodą planarną będą wykonywane na odwzorowanej płaskiej powierzchni przy użyciu 2-wymiarowego kartezjańskiego układu współrzędnych. Obliczenia metodą geodezyjną będą wykonywane na elipsoidzie, co oznacza, że wyniki nie zmienią się niezależnie od odwzorowania wejściowego lub wynikowego.<div><br/>Wyniki funkcji Euklidesowy kierunek powrotny mogą być używane w połączeniu z wynikami funkcji Odległość euklidesowa do ustalania najkrótszych ścieżek z lokalizacji w analizowanym obszarze z powrotem do źródła. Wyniki funkcji Euklidesowy kierunek powrotny i Odległość euklidesowa są używane w funkcji Ścieżka kosztu (wraz z miejscami docelowymi) do generowania najkrótszych ścieżek.</div>",
		expandName: "Rozszerzanie",
		expandSnip: "Rozszerza wybrane strefy rastra o podaną liczbę komórek.",
		expandDesc: "Przy użyciu funkcji globalnej Rozszerzanie można generalizować lub upraszczać rastry poprzez powiększanie określonych stref. Można także kontrolować poziom przeprowadzanej generalizacji.<div><br/>wybrane strefy zostaną powiększone (rozszerzone na inne strefy). Pojęciowo wybrane wartości strefy można traktować jako strefy na pierwszym planie, podczas gdy inne wartości pozostają strefami w tle. Strefy na pierwszym planie można rozszerzać tak, że będą nachodzić na strefy w tle.<div><br/>Poziom generalizacji można kontrolować przy użyciu parametru Liczba komórek. Domyślnie ta wartość wynosi 1, co oznacza, że wybrane strefy będą rozszerzać się o obszar odpowiadający wielkości jednej komórki. Aby zwiększyć poziom generalizacji, można podać większą wartość tego parametru. Pojęciowo można traktować to jak uruchamianie tego narzędzia wskazaną w tym parametrze liczbę razy - wyniki poprzedniego uruchomienia są danymi wejściowymi kolejnej iteracji.</div>",
		trendAnalysisName: "Generowanie trendu",
		trendAnalysisSnip: "Szacuje trend dla każdego piksela wzdłuż wymiaru dla jednej lub większej liczby zmiennych w rastrze wielowymiarowym.",
		trendAnalysisDesc: "<div>Za pomocą tej funkcji można dopasować dane wzdłuż liniowej, harmonicznej lub wielomianowej linii trendu albo przeprowadzić wykrywanie trendu przy użyciu testu Manna-Kendalla lub testu Kendalla (sezonowego).</div><br><div>Wynikowy raster trendu wygenerowany za pomocą tej funkcji jest używany jako dane wejściowe funkcji <strong>Prognozuj przy użyciu trendu</strong>.</div><br><div>Testów Manna-Kendalla i Kendalla (sezonowego) używa się do określania, czy w danych występuje trend monotoniczny. Są one nieparametryczne, co oznacza, że nie zakładają określonego rozkładu danych. Test Manna-Kendalla nie uwzględnia korelacji szeregowej ani wpływu sezonowości. Jeśli dane są sezonowe, test Kendalla (sezonowy) jest bardziej odpowiedni.</div><br><div>Jeśli używa się narzędzia do wykonania testu Manna-Kendalla lub testu Kendalla (sezonowego), wynikiem jest raster pięciopasmowy:</div><ul><li>Pasmo 1 = nachylenie Sena</li><li>Pasmo 2 = wartość p</li><li>Pasmo 3 = wynik Manna-Kendalla (S)</li><li>Pasmo 4 = wariancja S</li><li>Pasmo 4 = wariancja S</li><li>Pasmo 5 = wynik Z</li></ul><div>Wyników testu Manna-Kendalla lub testu Kendalla (sezonowego) można użyć do określenia, które piksele w wielowymiarowym szeregu czasowym mają statystycznie istotny trend. Informacje te można wykorzystywać w połączeniu z analizą trendów liniowych, harmonicznych lub wielomianowych do wyodrębniania istotnych trendów w szeregach czasowych. Można wygenerować maskę uwzględniającą piksele z istotnymi wartościami p, zastosować tę maskę do rastra wielowymiarowego i użyć tego maskowanego rastra wielowymiarowego jako wejścia do narzędzia w celu wykonania analizy trendu liniowego, harmonicznego lub wielomianowego.</div><br><div>Dostępne są trzy opcje linii trendu do dopasowania trendu do zmiennych wartości wzdłuż wymiaru: liniowy, wielomianowy i harmoniczny.</div><br><div>W przypadku analizy trendu liniowego dane wynikowe to raster trójpasmowy:</div><ul><li>Pasmo 1 = Nachylenie</li><li>Pasmo 2 = Przecięcie</li><li>Pasmo 3 = Błąd średni kwadratowy (RMSE) lub błąd wzdłuż linii najlepszego dopasowania</li></ul><div>W przypadku wielomianowej analizy trendu liczba pasm w danych wynikowych zależy od stopnia wielomianu. Dopasowanie wielomianowe drugiego stopnia daje raster zawierający cztery pasma:</div><ul><li>Pasmo 1 = Polynomial_2</li><li>Pasmo 2 = Polynomial_1</li><li>Pasmo 3 = Polynomial_0</li><li>Pasmo 4 = Błąd średni kwadratowy (RMSE)</li></ul><div>Dopasowanie wielomianowe trzeciego stopnia daje raster zawierający pięć pasm:</div><ul><li>Pasmo 1 = Polynomial_3</li><li>Pasmo 2 = Polynomial_2</li><li>Pasmo 3 = Polynomial_1</li><li>Pasmo 4 = Polynomial_0</li><li>Pasmo 5 = Błąd średni kwadratowy (RMSE)</li></ul><div>W przypadku harmonicznej analizy trendu liczba pasm w danych wynikowych zależy od częstotliwości harmonicznej. Gdy częstotliwość wynosi 1, dane wynikowe to raster zawierający pięć pasm:</div><ul><li>Pasmo 1 = Nachylenie</li><li>Pasmo 2 = Przecięcie</li><li>Pasmo 3 = Harmonic_sin1</li><li>Pasmo 4 = Harmonic_cos1</li><li>Pasmo 5 = Błąd średni kwadratowy (RMSE)</li></ul><div>Gdy częstotliwość wynosi 2, dane wynikowe to raster zawierający siedem pasm:</div><ul><li>Pasmo 1 = Nachylenie</li><li>Pasmo 2 = Przecięcie</li><li>Pasmo 3 = Harmonic_sin1</li><li>Pasmo 4 = Harmonic_cos1</li><li>Pasmo 5 = Harmonic_sin2</li><li>Pasmo 6 = Harmonic_cos2</li><li>Pasmo 7 = Błąd średni kwadratowy (RMSE)</li></ul><div>Parametr <strong>Długość cyklu</strong> dla harmonicznej analizy trendu służy do wskazania liczby i długości cykli, których można się spodziewać w danych dla okresu dnia lub roku. Jeśli na przykład oczekujesz, że dane przejdą dwa cykle zmian w ciągu roku, długością cyklu będzie 182,5 dnia lub 0,5 roku. Jeśli dysponujesz danymi dotyczącymi temperatury zbieranymi co trzy godziny i istnieje jeden cykl zmian w ciągu dnia, długością cyklu będzie jeden dzień.</div><br><div>Parametr <strong>Częstotliwość</strong> dla harmonicznej analizy trendu służy do opisania modelu harmonicznego dopasowywanego do danych. Jeśli częstotliwość jest skonfigurowana na wartość 1, do dopasowania modelu zostanie użyta kombinacja następujących krzywych: liniowej i pierwszej składowej harmonicznej. Jeśli częstotliwość ma wartość 2, do dopasowania danych zostanie użyta kombinacja następujących krzywych: liniowej, pierwszej składowej harmonicznej i drugiej składowej harmonicznej. Jeśli częstotliwość ma wartość 3, do modelowania danych zostanie użyta krzywa trzeciej składowej harmonicznej i tak dalej.</div><br><div>Jako opcjonalne dane wynikowe można wygenerować statystykę dokładności dopasowania modelu. Można obliczyć i przedstawić za pomocą symboli błąd średni kwadratowy (RMSE), R kwadrat i wartość p nachylenia trendu. Symbolizuj wynikową warstwę rastra trendu za pomocą symbolizacji <strong>RGB</strong> i określ statystykę jako pasma czerwone, zielone i niebieskie.</div><br>",
		spectralUnmixingName: "Liniowe rozdzielanie spektralne",
		spectralUnmixingSnip: "Przeprowadza klasyfikację pikseli podrzędnych i oblicza ułamkową zawartość różnych typów pokrycia terenu w pojedynczych pikselach.",
		spectralUnmixingDesc: "Funkcja Liniowe rozdzielanie spektralne oblicza ułamkowe pokrycie terenu w pojedynczych pikselach zawierających wiele typów pokrycia terenu. Funkcja ta generuje warstwę wielopasmową, w przypadku której każde pasmo odpowiada ułamkowej zawartości każdej klasy pokrycia terenu. Można jej na przykład użyć do przeprowadzenia klasyfikacji pokrycia terenu na obrazie wielospektralnym w celu zidentyfikowania roślinności fotosyntetycznej, gołej gleby lub martwej lub niefotosyntetycznej roślinności.<div><br/>Porządek wynikowego rastra wielopasmowego odpowiada porządkowi wejściowego profilu spektralnego. Liczba klas nie może przekraczać liczby pasm w rastrze wejściowym. Z rastra 8-pasmowego nie można na przykład wyodrębnić informacji o więcej niż 8 klasach.</div>",
		multidimensionalFilterName: "Filtr wielowymiarowy",
		interpolateRasterByDimensionFunctionName: "Interpoluj raster według wymiaru",
		interpolateRasterByDimensionFunctionSnip: "Interpoluje wielowymiarowy raster w określonych wartościach wymiaru z użyciem przyległych przekrojów.",
		interpolateRasterByDimensionFunctionDesc: "<p>Funkcja umożliwia oszacowanie wartości pikseli w rastrze wielowymiarowym dla przekroju o nieokreślonym wymiarze. Jeśli na przykład dysponujesz zestawem danych zawierającym temperaturę oceanu na jego powierzchni i na głębokości 100 metrów poniżej jego poziomu powierzchni i chcesz oszacować temperaturę na głębokości 50 metrów, możesz użyć tej funkcji, aby uzyskać szacunkową wartość na tej głębokości, korzystając z definicji wymiaru Według wartości.</p><p>Możesz również zmniejszyć próbkę zawierającą miesięczny zestaw danych do dziennego zestawu danych, używając definicji wymiaru Według przedziału i określając wartości 1 dla parametru Etap i wartość Dni dla parametru Jednostka.</p><p>Użyj definicji wymiaru Według rastra docelowego, aby oszacować wartość dla rastra docelowego.</p>",
		multidimensionalFilterSnip: "Tworzy warstwę rastrową na podstawie wielowymiarowego zestawu danych rastrowych lub wielowymiarowej warstwy rastrowej poprzez utworzenie przekrojów danych zgodnie ze zdefiniowanymi zmiennymi i wymiarami.",
		multidimensionalFilterDesc: "Funkcja Filtr wielowymiarowy tworzy wielowymiarową warstwę rastrową poprzez filtrowanie i wyodrębnianie podzbioru zmiennych z rastra wielowymiarowego. Załóżmy na przykład, że istnieje wielowymiarowy zestaw danych zawierający comiesięczne dane dotyczące opadów z okresu 30 lat. Wyodrębniamy dane dotyczące wyłącznie miesiąca stycznia, dzięki czemu można sprawdzić, jak na przestrzeni lat zmieniały się opady w styczniu.<div><br/>Używając parametru Definicja wymiaru, można utworzyć przekroje wymiarów przy użyciu interwału, wartości lub zakresu wartości. Jeśli na przykład dysponujemy danymi o zasoleniu oceanów obejmującymi okres dziesięciu lat, przy czym dane były zbierane co miesiąc, a pomiary były dokonywane co 2 metry aż do głębokości 500 metrów, można użyć różnych opcji definiujących wymiary opisujących następujące scenariusze. Scenariusz 1: wyodrębnianie danych o zasoleniu w miesiącu styczniu obejmujących okres 10 lat. Wybierz opcję Według wartości, skonfiguruj opcję Wymiar na wartość StdTime, a polu Wartości ustaw Styczeń. Scenariusz 2: tworzenie przekrojów danych o zasoleniu dotyczących zakresu głębokości od 0 do 150 metrów. Wybierz opcję Według zakresów, skonfiguruj opcję Wymiar na wartość StdZ i ustaw w polu Wartość minimalna wartość -150, a w polu Wartość maksymalna wartość 0. Scenariusz 3: wyodrębnianie danych o zasoleniu dotyczących pierwszych 10 dni stycznia obejmujących okres 10 lat. Wybierz opcję Według iteracji, skonfiguruj opcję Wymiar na wartość StdTime, w polach Początek iteracji i Koniec iteracji dotyczących pierwszej iteracji ustaw początek i koniec okresu iteracji, w polu Etap skonfiguruj wartość 1, a w polu Jednostka ustaw wartość Lata.</div>",
		multidimensionalRasterName: "Raster wielowymiarowy",
		multidimensionalRasterSnip: "Dodaje do mapy dane wielowymiarowe w postaci wielowymiarowej warstwy rastrowej.",
		multidimensionalRasterDesc: "Funkcja Raster wielowymiarowy dodaje do mapy dane wielowymiarowe w postaci wielowymiarowej warstwy rastrowej. Ta funkcja jest przydatna podczas analizowania rastra przy użyciu łańcucha funkcji.<div><br/>Obsługiwane są między innymi następujące wielowymiarowe zestawy danych rastrowych: netCDF, GRIB, HDF i CRF firmy Esri. Wielowymiarowe zestawy danych mozaiki także są obsługiwane.</div>",
		optimalPathAsRasterName: "Ścieżka optymalna jako raster",
		optimalPathAsRasterSnip: "Oblicza najmniejszy koszt ścieżki ze źródła do celu.",
		optimalPathAsRasterDesc: "Ta funkcja globalna generuje raster wynikowy rejestrujący ścieżkę optymalną lub ścieżki prowadzące z wybranych lokalizacji do najbliższej komórki źródłowej zdefiniowanej w obrębie powierzchni akumulowanego kosztu (pod względem kosztu i odległości).<div><br/>Przed uruchomieniem funkcji Ścieżka optymalna jako raster należy zwykle uruchomić co najmniej jedną z funkcji kosztu ważonego (Akumulacja odległości lub Przydział odległości), aby utworzyć wejściowe rastry akumulacji odległości i kierunku powrotnego. Są to obowiązkowe wejściowe warstwy rastrowe funkcji Ścieżka optymalna. Wartości na wynikowej ścieżce optymalnej reprezentują liczbę ścieżek w danej lokalizacji. W wielu przypadkach ścieżki podążają tą samą trasą - opuszczają źródło, a następnie rozchodzą się w kierunku różnych lokalizacji docelowych. Na przykład wartość 1 wskazuje, że istnieje tylko jedna optymalna ścieżka w danej lokalizacji, a wartość 5 oznacza, że w danej lokalizacji istnieje pięć optymalnych ścieżek przechodzących przez tę komórkę w analizowanym obszarze.<div><br/>Wejściowe dane docelowe muszą być warstwą rastrową. Zestaw komórek docelowych składa się ze wszystkich komórek w rastrze wejściowym, które mają prawidłowe wartości. Komórki mające wartości NoData nie są uwzględniane w tym zestawie. Wartość 0 jest uważana za prawidłową lokalizację docelową. Raster docelowy można utworzyć za pomocą narzędzi do wyodrębniania. W przypadku występowania obiektów źródłowych lub docelowych należy przekształcić je w raster, używając funkcji Rasteryzacja obiektów. Użyj rastra akumulacji odległości lub kierunku powrotnego jako wejściowego rastra funkcji rasteryzacji. Dzięki temu można mieć pewność, że obiekt jest przekształcany w raster przy użyciu tych samych wartości wielkości komórki, zasięgu i odniesienia przestrzennego co inne rastry przekazywane do funkcji Ścieżka optymalna jako raster. Funkcji Ścieżka optymalna jako raster można także używać do uzyskiwania ścieżki najmniejszego oporu z cyfrowego modelu wysokościowego (DEM). W tym przypadku użyj modelu DEM jako wejściowego rastra akumulacji odległości i wyniku działania funkcji Kierunek przepływu jako rastra kierunku powrotnego.</div>",
		trendName: "Prognozowanie przy użyciu trendu",
		trendSnip: "Oblicza prognozowaną wielowymiarową warstwę rastrową przy użyciu rastra trendu będącego wynikiem działania funkcji Generowanie trendu lub narzędzia geoprzetwarzania Generuj raster trendu.",
		trendDesc: "Funkcja Prognozowanie przy użyciu trendu oblicza prognozowaną wielowymiarową warstwę rastrową przy użyciu rastra trendu będącego wynikiem działania funkcji Generowanie trendu lub narzędzia geoprzetwarzania Generuj raster trendu.",
		rasterCollectionName: "Przetwarzanie zbioru rastrów",
		rasterCollectionSnip: "Przetwarza każdy przekrój w rastrze wielowymiarowym lub każdy element w rastrze mozaikowym. Ta funkcja może także agregować wiele przekrojów w jeden przekrój.",
		rasterCollectionDesc: "Funkcja Przetwarzanie zbioru rastrów przetwarza każdy przekrój w rastrze wielowymiarowym lub każdy element w rastrze mozaikowym. Ta funkcja może także agregować wiele przekrojów w jeden przekrój.<div><br/>Ta funkcja przetwarza każdy przekrój w rastrze wielowymiarowym lub rastrze mozaikowym przy użyciu szablonu funkcji rastrowej. Ta funkcja obsługuje następujące opcje: 1. Podaj szablon funkcji rastrowej w polu Funkcja elementów. Mamy na przykład zestaw danych mozaiki zawierający zobrazowania Landsat z okresu 20 lat i chcemy obliczyć wskaźnik NDVI dla każdej sceny w szeregu czasowym. W polu Funkcja elementów podaj szablon funkcji rastrowej, który zawiera funkcję rastrową NDVI. 2. Podaj szablon funkcji rastrowej w polu Funkcja agregacji. Mamy na przykład raster wielowymiarowy zawierający dane o codziennych pomiarach temperatury wykonywanych w okresie 10 lat i chcemy obliczyć temperatury maksymalne w poszczególnych latach. W polu Funkcja agregacji podaj szablon funkcji rastrowej zawierający funkcję Statystyki komórek, konfigurując jednocześnie tę operację na wartość Maksimum. W obszarze Definicja agregacji skonfiguruj w polu Wymiar wartość StdTime, w polu Typ wartość - Słowo kluczowe interwału, a w polu Interwał słowa kluczowego wartość Rocznie. Zwróć uwagę na fakt, że jeśli wejściowy zestaw danych mozaiki nie jest wielowymiarowy, funkcja agregacji nie zaakceptuje definicji agregacji. Funkcja agregacji przeprowadzi agregację wszystkich elementów lub poszczególnych grup w jeden element, jeśli są one zdefiniowane w szablonie funkcji agregacji. Więcej informacji o używaniu grup w zestawie danych mozaiki można znaleźć w temacie Korzystanie z elementów zestawu danych mozaiki w szablonach funkcji rastrowych. 3. Podaj szablon funkcji rastrowej w polu Funkcja przetwarzająca. Funkcja lub łańcuch funkcji w tym szablonie jest używany do wyświetlania nowego przetworzonego rastra. Można na przykład podać szablon funkcji rastrowej zawierający funkcję Mapa kolorów, aby zmienić sposób wyświetlania przetworzonej warstwy rastrowej. Zwróć uwagę na to, że jeśli danymi wejściowymi jest raster wielowymiarowy, funkcja przetwarzająca jest stosowana do aktualnie wyświetlanego przekroju. Jeśli danymi wejściowymi jest warstwa mozaikowa lub zestaw danych mozaiki, funkcja przetwarzająca jest stosowana do rastra mozaikowego przy użyciu metody Pierwsze w celu wyświetlenia nakładających się obszarów. 3. Podaj szablony dla dowolnej kombinacji tych trzech funkcji. Mamy na przykład zestaw danych mozaiki zawierający szereg czasowy zobrazowań Landsat i chcemy wygenerować obraz złożony dla maksymalnego wskaźnika NDVI. W polu Funkcja elementów podaj szablon funkcji rastrowej, który zawiera funkcję rastrową NDVI. W polu Funkcja agregacji podaj szablon funkcji rastrowej zawierający funkcję Statystyki komórek, konfigurując jednocześnie tę operację na wartość Maksimum. W polu Funkcja przetwarzająca podaj szablon funkcji rastrowej, który zawiera funkcję Mapa kolorów. Kolejność przetwarzania funkcji jest zgodna z kolejnością parametrów wejściowych. Funkcja elementów będzie na przykład przetwarzana jako pierwsza.</div>",
		randomName: "Losowe",
		randomSnip: "Tworzy raster z losowymi wartościami pikseli wyświetlonymi w rozkładzie pseudolosowym. Obsługiwanych jest kilka rozkładów i generatorów liczb losowych.",
		randomDesc: "Funkcja Losowe tworzy raster z losowymi wartościami pikseli, którego można używać w szablonach funkcji rastrowych lub zestawach danych mozaiki.<div><br/>Wiele funkcji działa na jednym lub większej liczbie rastrów wejściowych, ale funkcja Losowe nie wymaga rastra wejściowego. Oznacza to, że zachowuje się ona bardziej jak zestaw danych rastrowych niż jak funkcja, zatem należy zachować szczególną ostrożność podczas dodawania lub usuwania jej z łańcucha funkcji.</div>",
		shrinkName: "Zmniejszenie",
		shrinkSnip: "Zmniejsza wybrane strefy o podaną liczbę komórek, zastępując je wartością komórki występującej najczęściej w sąsiednim obszarze.",
		shrinkDesc: "Przy użyciu funkcji globalnej Zmniejszenie można generalizować lub upraszczać rastry poprzez pomniejszenie określonych stref. Można także kontrolować poziom przeprowadzanej generalizacji.<div><br/>Wybrane strefy zostaną zmniejszone lub zostanie zredukowany ich rozmiar w ten sposób, że komórki z otaczających je stref zostaną na nie rozszerzone. Pojęciowo wybrane wartości strefy można traktować jako strefy na pierwszym planie, podczas gdy inne wartości pozostają strefami w tle. Komórki w strefach na pierwszym planie można zastąpić komórkami ze stref znajdujących się w tle. Można także zastąpić cienką wyspę znajdującą się wewnątrz strefy, która dzieli granice z tą strefą.<div><br/>Poziom generalizacji można kontrolować przy użyciu parametru Liczba komórek. Domyślnie ta wartość wynosi 1, co oznacza, że wybrane strefy będą zmniejszać się o obszar odpowiadający wielkości jednej komórki. Aby zwiększyć poziom generalizacji, można podać większą wartość tego parametru. Pojęciowo można traktować to jak uruchamianie tego narzędzia wskazaną w tym parametrze liczbę razy - wyniki poprzedniego uruchomienia są danymi wejściowymi kolejnej iteracji.</div>",
		trendToRGBName: "Trend na RGB",
		trendToRGBSnip: "Przekształca raster trendu w raster zawierający trzy pasma (czerwone, zielone i niebieskie).",
		trendToRGBDesc: "Funkcja Trend na RGB przekształca raster trendu w raster zawierający trzy pasma (czerwone, zielone i niebieskie). Raster trendu jest generowany przy użyciu funkcji rastrowej Generowanie trendu lub funkcji rastrowej Analiza CCDC.<div><br/>Ta funkcja jest przydatna do wizualizowania danych o współczynnikach modelu uzyskanych przy użyciu funkcji Generowanie trendu lub Analiza CCDC. Obie funkcje szacują trendy w zmieniających się wartościach pikseli, jednak wyniki działania tych funkcji są trudne do bezpośredniego zinterpretowania.<div><br/>Podobnie jak w przypadku wielu innych funkcji rastrowych, może być konieczne użycie dynamicznej regulacji zakresu (Dynamic Range Adjustment - DRA), aby w lepiej zaprezentować wyniki działania tej funkcji.</div>",
		landTrendrName: "Analiza LandTrendr",
		landTrendrSnip: "Ocenia zachodzące z biegiem czasu zmiany w wartościach pikseli przy użyciu opartej na systemie Landsat metodzie wykrywania trendów zaburzeń i przywracania (LandTrendr) oraz generuje raster analizy zmian zawierający wyniki modelu.",
		landTrendrDesc: "Ta funkcja rastrowa może być używana tylko do generowania danych wejściowych funkcji rastrowej Wykrywanie zmian przy użyciu analizy zmian. Aby wygenerować raster wynikowy, połącz funkcję Analiza LandTrendr z funkcją Wykrywanie zmian przy użyciu analizy zmian w szablonie funkcji rastrowej i użyj tego szablonu jako danych wejściowych narzędzia geoprzetwarzania Generuj raster z funkcji rastrowej. Wynikiem jest raster zawierający informacje o czasie, w jakim zmieniały się wartości pikseli.<div><br>Celem tej funkcji rastrowej jest ekstrahowanie zmian w obserwowanym obiekcie, zatem idealne wejściowe zobrazowanie wielowymiarowe powinno zawierać spójne obserwacje rejestrowane z biegiem czasu i nie powinno zawierać zakłóceń atmosferycznych ani związanych z nieprawidłową pracą czujników, chmur ani cieni chmur. Najlepszym rozwiązaniem jest stosowanie znormalizowanych danych, które można maskować przy użyciu pasma QA, na przkład produktów Landsat Collection 1 Surface Reflectance (Kolekcja Landsat 1 – współczynnik odbicia powierzchni) z maską chmur.<div><br>Ta funkcja analizuje jeden obraz na rok, a liczba rocznych klatek czasu musi być większa lub równa wartości podanej w parametrze <strong>Minimalna liczba obserwacji</strong>. Zalecane jest posiadanie danych z co najmniej sześciu lat.<div><br>Jeśli dysponujesz danymi miesięcznymi, tygodniowymi lub dziennymi, zaleca się wybranie kilku obrazów z każdego roku (najlepiej obrazów zarejestrowanych o tej samej porze roku), usunięcie chmur i cieni chmur oraz połączenie ich w celu wygenerowania jednego obrazu, który dobrze odzwierciedla obserwację. Jeśli w wejściowym rastrze wielowymiarowym zostaną podane dane miesięczne, tygodniowe lub dzienne, funkcja zidentyfikuje na potrzeby analizy jedną klatkę czasu na podstawie danych najbliższych tym, które zostały podane w parametrze <strong>Data dociągania</strong>.<div><br>Przywrócenie obiektu krajobrazowego do naturalnego stanu po wystąpieniu nietrwałej zmiany, takiej jak pożar lasu lub atak insektów, zazwyczaj wymaga czasu. Aby sterować stosowanym w modelu tempem przywracania, należy skonfigurować parametr Próg przywracania. Poszczególne segmenty nie mogą mieć tempa przywracania o wartości większej niż 1/próg przywracania.<div><br>Trend procesu przywracanie stanu naturalnego po zmianie krajobrazu może mieć kierunek pozytywny lub negatywny. Jeśli na przykład w krajobrazie zajedzie proces wylesienia, szeregi czasowe wartości indeksu roślinności wykazują spadki wartości tego indeksu. W procesie przywracania stanu naturalnego wartości te stopniowo rosną, co oznacza trend pozytywny. Podaj kierunek trendu przywracania w parametrze <strong>Odzyskiwanie ma trend rosnący</strong>.",
		aggregateMultidimensionalName: "Agreguj wielowymiarowe",
		aggregateMultidimensionalSnip: "Łączy istniejące dane zmiennych rastra wielowymiarowego wzdłuż wymiaru.",
		aggregateMultidimensionalDesc: "Funkcja Agreguj wielowymiarowe tworzy wielowymiarową warstwę rastrową, łącząc istniejące dane zmiennych rastra wielowymiarowego wzdłuż wymiaru.<div><br>Użyj parametru <strong>Definicja wymiaru</strong>, aby najpierw przefiltrować dane wejściowe, które mają być agregowane. Jeśli na przykład dysponujesz danymi miesięcznymi za okres 30 lat, ale chcesz utworzyć warstwę agregowaną dla pierwszych 15 lat, możesz użyć parametru <strong>Definicja wymiaru</strong>, aby wskazać lata do uwzględnienia w analizie.<div><br><ul><li>Wyodrębnianie danych o zasoleniu w miesiącu styczniu obejmujących okres 10 lat. Wybierz opcję <strong>Według wartości</strong>, w polu <strong>Wymiar</strong> ustaw wartość <strong>StdTime</strong>, a w polu <strong>Wartości</strong> ustaw <strong>Styczeń</strong>.</li><li>Tworzenie przekrojów danych o zasoleniu dotyczących zakresu głębokości od 0 do 150 metrów. Wybierz opcję <strong>Według zakresów</strong>, w polu <strong>Wymiar</strong> ustaw wartość <strong>StdZ</strong>, w polu <strong>Wartość minimalna</strong> ustaw <strong>-150</strong>, a w polu <strong>Wartość maksymalna</strong> – wartość <strong>0</strong>.</li><li>Wyodrębnianie danych o zasoleniu dotyczących pierwszych 10 dni stycznia obejmujących okres 10 lat. Wybierz opcję <strong>Według iteracji</strong>, w polu <strong>Wymiar</strong> ustaw wartość <strong>StdTime</strong>, w polach <strong>Początek pierwszej iteracji</strong> i <strong>Koniec pierwszej iteracji</strong> podaj daty rozpoczęcia i zakończenia okresu iteracji, w polu <strong>Etap</strong> ustaw wartość <strong>1</strong>, a w polu <strong>Jednostka</strong> ustaw wartość <strong>Lata</strong>.</li></ul><div><br>Użyj parametrów <strong>Definicji agregacji</strong>, aby wybrać wymiar do oszacowania oraz interwał agregacji (przy użyciu słowa kluczowego, wartości lub zakresu wartości). Jeśli na przykład dysponujesz danymi o temperaturze powierzchni morza za okres 30 lat, a dane te były zbierane codziennie, co 5 metrów, aż do głębokości 100 metrów, możesz użyć innych opcji interwału, realizując następujące scenariusze:<div><br><ul><li>Agreguj dzienne dane o temperaturze w dane miesięczne. Wynikiem jest raster wielowymiarowy o 12 klatkach czasu, a każda klatka jest agregatem każdego miesiąca we wszystkich latach. Wybierz opcję <strong>Słowo kluczowe interwału</strong> i ustaw słowo kluczowe <strong>Powtarzane co miesiąc</strong>.</li><li>Agreguj dzienne dane o temperaturze, przekształcając je w dane miesięczne. Wynikiem jest raster wielowymiarowy o 360 klatkach czasu lub 12 klatkach na rok (30 lat x 12 miesięcy = 360 klatek). Wybierz opcję <strong>Słowo kluczowe interwału</strong> i ustaw słowo kluczowe <strong>Miesięcznie</strong>.</li><li>Agreguj miesięczne dane o temperaturze w interwały 4-miesięczne. Wybierz opcję <strong>Wartość interwału</strong>, w polu <strong>Interwał wartości</strong> ustaw wartość 4, a w polu <strong>Jednostka</strong> ustaw wartość <strong>Miesiące</strong>.<li></li>Agreguj dane o temperaturze z głębokości od 0 do 25 metrów, następnie z głębokości od 25 do 50 metrów i z głębokości od 50 do 100 metrów. Wybierz opcję <strong>Zakresy interwałów</strong> i skonfiguruj głębokości minimalne i maksymalne w następujący sposób: <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Połącz rastry",
		mergeRastersSnip: "Łączy wiele zestawów danych rastrowych przestrzennie lub względem różnych zmiennych albo wymiarów.",
		mergeRastersDesc: "Ta funkcja tworzy scalony raster na podstawie listy rastrów. Jeśli na przykład dysponujesz zestawem danych mozaiki zawierającym zbierane przez 30 lat miesięczne dane o opadach, a także innym zestawem danych zawierającym miesięczne dane o temperaturze za okres 10 lat, możesz połączyć je w raster wielowymiarowy zawierający obie zmienne. <div><br>Jeśli wejściowe rastry wielowymiarowe zawierają różne zmienne, wynikowy raster wielowymiarowy będzie zawierał je wszystkie. <div><br>Jeśli wejściowe rastry wielowymiarowe zawierają różne wymiary lub wartości wymiarów, wynikowy raster wielowymiarowy będzie zawierał wszystkie wymiary i wartości wymiarów. <div><br>Jeśli wejściowe rastry wielowymiarowe zawierają te same wymiary i zmienne, ale różne zasięgi przestrzenne, wynikowy raster wielowymiarowy będzie zawierał zmienne i wymiary scalonych zasięgów przestrzennych.<div><br>Tej funkcji można także używać w przypadku wielu rastrów, które mają być traktowane jako pojedynczy element, na przykład obliczając te same statystyki dla wszystkich rastrów lub ustawiając balans kolorów (dzięki temu nie trzeba ustawiać balansu kolorów osobno dla każdego obrazu). Jest to przydatne podczas pracy ze zobrazowaniami przechowywanymi jako osobne kafle ze względu na ograniczenia wielkości plików. Dzięki temu kafle będą traktowane jako część tego samego obrazu.",
		boundaryCleanName: "Czyszczenie granic",
		boundaryCleanSnip: "Wygładza granice między strefami.",
		boundaryCleanDesc: "<p>Funkcja generalizuje (upraszcza) rastry przez wygładzanie granic między strefami. Funkcja udostępnia opcje pozwalające na kontrolowanie sposobu, w jaki komórki stref na wejściu wpływają na wygładzanie, a także ilości wygładzeń, które zostaną zastosowane. Każda komórka wejściowa jest szacowana z użyciem ośmiu bezpośrednich komórek sąsiadujących.</p><p>Proces wygładzania najpierw sortuje komórki sąsiadujące według określonego priorytetu. Priorytet określa, która strefa z komórek sąsiadujących może zastąpić wartość przetwarzanej komórki w danych wynikowych.</p><p>Priorytet może być oparty na wartości stref lub na ich wielkości. Parametr <strong>Typ sortowania</strong> określa typ sortowania, który ma być używany. </p><p>Ustawienie domyślne <strong>Nie sortuj</strong> ocenia priorytet na podstawie wartości stref. Komórki ze stref o większych wartościach będą miały wyższy priorytet w celu rozszerzania do stref o niższych wartościach.</p><p>Na potrzeby sortowania z użyciem priorytetu można użyć wielkości lub powierzchni całkowitej stref. Przy ustawieniu <strong>Malejąco</strong> strefy są sortowane według wielkości w kolejności malejącej. Strefy o większych powierzchniach całkowitych będą miały priorytet w celu rozszerzania do stref o mniejszych powierzchniach. Przy ustawieniu <strong>Rosnąco</strong> dzieje się odwrotnie: strefy o mniejszych powierzchniach całkowitych będą miały priorytet w celu rozszerzania do stref o większych powierzchniach całkowitych.</p><p>Ilością wygładzeń steruje się za pomocą parametru <strong>Uruchom rozszerzanie i zmniejszanie dwukrotnie</strong>, który określa liczbę wykonywanych procesów rozszerzania i zmniejszania.</p><p>Gdy to ustawienie nie jest zaznaczone, proces rozszerzania i zmniejszania jest wykonywany jeden raz. Gdy to ustawienie jest zaznaczone, proces rozszerzania i zmniejszania jest wykonywany dwa razy, co zapewnia dodatkowe wygładzenie granic strefy.</p><p>Jeśli wartości wszystkich ośmiu komórek sąsiadujących są takie same jak przetwarzanej komórki, komórka wynikowa zachowa wartość komórki wejściowej.</p>",
		predictUsingRegressionName: "Prognozuj przy użyciu regresji",
		predictUsingRegressionSnip: "Oblicza prognozowany raster na podstawie danych wejściowych rastra i modelu regresji. Model regresji to dane wyjściowe zwrócone przez narzędzie geoprzetwarzania rastra <strong>Trenuj model regresji drzew losowych.</strong>",
		predictUsingRegressionDesc: "<p>Model regresji jest zdefiniowany w pliku (.ecd) definicji regresji Esri. Zawiera wszystkie informacje dla konkretnego zestawu danych lub kilku zestawów danych oraz model regresji i jest generowany przez narzędzie geoprzetwarzania rastra <strong>Trenuj model regresji drzew losowych</strong>.</p><p>Dane wejściowe mogą być rastrem jednopasmowym, wielopasmowym lub wielowymiarowym albo listą wymienionych typów. Typy rastrów wejściowych muszą być tym samym typem rastra wytrenowanego przez model regresji.</p><ul><li>Jeśli danymi wejściowymi jest raster wielopasmowy, każde pasmo jest traktowane jako zmienna prognozująca. Pasma muszą być w tej samej kolejności, co wielopasmowe dane wejściowe narzędzia treningu modelu regresji.</li><li>Jeśli danymi wejściowymi jest raster wielowymiarowy, każda zmienna jest traktowana jak zmienna prognozująca, przy czym zmienna musi być jednopasmowa i mieć wymiar czasowy. Kolejność i nazwy zmiennych muszą być takie same jak w przypadku danych wejściowych podczas wykonywania treningu modelu regresji. Danymi wyjściowymi jest raster wielowymiarowy.</li><li>Danymi wejściowymi może być lista elementów. Liczba elementów i ich kolejność muszą być zgodne z danymi wejściowymi podczas wykonywania treningu modelu regresji.</li></ul>",
		dimensionalMovingStatisticsName: "Statystyki ruchu w wielu wymiarach",
		dimensionalMovingStatisticsSnip: "Oblicza statystyki w ruchomym oknie na danych wielowymiarowych wzdłuż zadanego wymiaru.",
		dimensionalMovingStatisticsDesc: "<p>Funkcja Statystyki ruchu w wielu wymiarach oblicza różne statystyki w ramach predefiniowanego okna dla wszystkich wartości wymiarów wzdłuż wymiaru. Ta funkcja przyjmuje wielowymiarową warstwę rastrową jako dane wejściowe, a jako dane wynikowe tworzy wielowymiarową warstwę rastrową mającą taki sam wymiar jak warstwa wejściowa.</p><p>Możesz określić wymiar, dla którego wartości wymiaru są brane pod uwagę podczas obliczeń. Domyślnie dokonuje obliczeń wzdłuż pierwszego wymiaru nieprzestrzennego. Można także określić rozmiar okna, podając parametry Okno w tył i Okno w przód.</p><p>Gdy Typ statystyk jest ustawiony na wartość Percentyl, parametry Wartość percentylowa i Typ interpolacji percentylowej stają się dostępne. Za pomocą tych parametrów można odpowiednio określić percentyl do obliczenia i wybrać typ interpolacji do zastosowania. Gdy Typ statystyk jest ustawiony na wartość Średnia kołowa, parametr Wartość zawijania okrężnego staje się dostępny. Wartość zawijania okrężnego jest używana do konwersji wartości liniowej do zakresu danej średniej kołowej.</p>",
		terrainFlattenFunctionName: "Spłaszczenie terenu",
		terrainFlattenFunctionSnip: "Koryguje wejściowe dane zobrazowania radarowego z syntetyczną aperturą (SAR) pod kątem zniekształceń radiometrycznych spowodowanych topografią.",
		terrainFlattenFunctionDesc: "<p>Funkcja rastrowa Spłaszczenie terenu koryguje wejściowe dane zobrazowania radarowego z syntetyczną aperturą (SAR) pod kątem zniekształceń radiometrycznych spowodowanych topografią.</p><p>Wejściowe dane radarowe należy najpierw skalibrować do beta nought. W celu skalibrowania danych radarowych do beta nought użyj narzędzia Zastosuj kalibrację radiometryczną.</p><p>Jeśli wejściowy model DEM nie obejmuje całego zestawu danych SAR, narzędzie zwraca wartości NoData dla pikseli znajdujących się poza zasięgiem modelu GEM dla wartości wynikowych gamma nought, sigma nought, obszaru rozpraszania i zniekształceń geometrycznych. W przypadku danych wynikowych maski zniekształceń geometrycznych narzędzie zwraca wartości nieokreślone dla pikseli znajdujących się poza zasięgiem DEM</p><p>Wejściowy model DEM musi być w układzie współrzędnych geograficznych WGS 1984 (EPSG:4326).</p>",
		createColorCompositeFunctionName: "Utwórz kompozyt kolorów",
		createColorCompositeFunctionSnip: "Tworzy raster zawierający trzy pasma z zestawu danych rastra wielopasmowego, w którym dla każdego pasma można zastosować obliczenia algebraiczne oparte na algebrze pasm.",
		createColorCompositeFunctionDesc: "<p>Funkcja rastrowa Utwórz kompozyt kolorów tworzy raster zawierający trzy pasma z zestawu danych rastra wielopasmowego, w którym dla każdego pasma można zastosować obliczenia algebraiczne oparte na algebrze pasm.</p><p>Podczas definiowania algorytmu arytmetyki pasma można wprowadzić jednowierszową formułę algebraiczną dla każdego wyrażenia, aby utworzyć wielopasmowe dane wynikowe. Obsługiwane są operatory jednoargumentowe, plus (+), minus (-), mnożenie (*) i dzielenie (/).</p><p>Jeśli w wyrażeniu jest używany identyfikator pasma, należy określić pasmo poprzez dodanie przedrostka B lub b do numeru pasma.</p><p>Najczęstszą kombinacją pasm używaną dla radaru z syntetyczną aperturą (SAR) w jednostkach liniowych jest VV dla koloru czerwonego, VH dla koloru zielonego i VV/VH dla koloru niebieskiego. Jeśli dane wejściowe są wyrażone w decybelach, kombinacją pasm powinno być VV dla koloru czerwonego, VH dla koloru zielonego i VV/VH dla koloru niebieskiego.</p>",
		surfaceParametersName: "Parametry powierzchni",
		surfaceParametersSnip: "Określa parametry rastra powierzchni, takie jak ekspozycje, spadki i kilka rodzajów krzywizn, przy użyciu metod geodezyjnych.",
		surfaceParametersDesc: "<p>Funkcja Parametry powierzchni określa parametry rastra powierzchni, takie jak ekspozycje, spadki i kilka rodzajów krzywizn, przy użyciu metod geodezyjnych.</p><p>Tej funkcji można użyć do następujących celów:</p><ul><li>Obliczanie ekspozycji i spadków przy użyciu metod geodezyjnych.</li><li>Obliczanie różnych rodzajów krzywizn z wejściowego rastra powierzchni, na przykład <strong>krzywizny tangencjalnej (normalna warstwica)</strong>, która charakteryzuje topograficzną zbieżność i rozbieżność przepływu przez powierzchnię.</li></ul>",
		leastCostCorridorName: "Korytarz najmniejszego kosztu",
		leastCostCorridorSnip: "Oblicza sumę dwóch rastrów odległości kosztu skumulowanego z możliwością zastosowania progu na podstawie wartości procentowej lub kosztu skumulowanego.",
		leastCostCorridorDesc: "<p>Rastry wejściowe powinny być rastrami akumulacji odległości i kierunku powrotnego będącymi wynikiem funkcji <strong>Akumulacja odległości</strong> lub <strong>Przydział odległości</strong>. Powinny one opierać się na odległości kosztowej, a przy tworzeniu warstw dla poszczególnych źródeł należy stosować te same ustawienia parametrów. Podczas tworzenia tych rastrów nie należy używać żadnych parametrów zależnych od kierunkowości (składnik poziomy, składnik pionowy i kierunek podróży).</p><p>Wartości w wynikowym rastrze korytarza są sumą kosztu skumulowanego dotarcia do danej lokalizacji w tych samych jednostkach co w przypadku wejściowych rastrów odległości kosztu skumulowanego.</p><p>Jeśli określona wartość <strong>progowa</strong> jest większa niż maksymalny koszt skumulowany po zsumowaniu dwóch rastrów akumulacji odległości, wynikowy raster korytarza obejmie ten sam obszar co wejściowe rastry skumulowane.</p><p>Jeśli określona wartość progowa jest mniejsza niż wartość minimalna w rastrze korytarza, zwrócony zostanie komunikat ostrzegawczy, a raster wynikowy będzie pusty.</p><p>Wynikowy raster korytarza może zawierać komórki o nieco większym koszcie skumulowanym niż wartość progowa. Wynika to z tego, że rastry kierunku powrotnego wykorzystują komórki, którym przypisano koszty nieco wyższe niż wartość progowa, aby połączyć odłączone komórki z korytarzem.</p>",
		geometricMedianName: "Mediana geometryczna",
		geometricMedianSnip: "Funkcja Mediana geometryczna oblicza medianę geometryczną pikseli w szeregu czasowym zobrazowań wielopasmowych.",
		geometricMedianDesc: "<p>Funkcja ta redukuje szumy i elementy odstające w zobrazowaniach szeregów czasowych, obliczając geometryczną medianę pikseli dla każdej tablicy pikseli na stosie obrazów. Algorytm zachowuje relacje spektralne między pasmami w widmach pikseli, dzięki czemu dane wynikowe mogą być wykorzystywane w analizach, takich jak wskaźniki roślinności.</p><p>Przed zastosowaniem tej funkcji, chmury i cienie powinny zostać zamaskowane przy użyciu pasma QA zestawu danych.</p><p>Jeśli obraz wejściowy jest zmiennoprzecinkowy, taki jak współczynnik odbicia światła od powierzchni z wartościami od 0 do 1, wartość epsilon równa 0,001 powinna zapewnić wyniki o wysokiej jakości.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Typ schematu koloru",
		colormapName: "Mapa kolorów",
		colormapNameName: "Nazwa mapy kolorów",
		colorRampName: "Skala barw",
		contrastOffsetName: "Kompensacja kontrastu",
		brightnessOffsetName: "Przesunięcie jasności",
		methodName: "Metoda",
		bandNamesName: "Nazwy pasm",
		bandWavelengthsName: "Długości fal pasm",
		bandIdsName: "Identyfikatory pasm",
		missingBandActionName: "Działanie dotyczące brakującego pasma",
		conversionParametersName: "Parametry konwersji",
		hillshadeTypeName: "Typ cieniowania rzeźby terenu",
		azimuthName: "Azymut",
		altitudeName: "Wysokość",
		slopeTypeName: "Skalowanie",
		zFactorName: "Współczynnik Z",
		PSPowerName: "Potęga rozmiaru pikseli",
		PSZFactorName: "Parametr Rozmiaru Piksela",
		removeEdgeEffectName: "Wyłącz domyślną interpolację pikseli krawędziowych",
		fromUnitName: "Z jednostki",
		toUnitName: "Na jednostkę",
		rasterTypeName: "Typ",
		minName: "Wynikowa wartość minimalna",
		maxName: "Wynikowa wartość maksymalna",
		minPercentName: "Min. przycięcia w procentach",
		maxPercentName: "Maks. przycięcia w procentach",
		numberOfStandardDeviationName: "Liczba odchyleń standardowych",
		sigmoidStrengthLevelName: "Poziom siły sigmoidy",
		estimateStatsHistogramName: "Oszacuj statystykę",
		DRAName: "Dynamiczna regulacja zakresu",
		statisticsName: "Statystyka",
		histogramsName: "Histogramy",
		statisticsHistogramName: "Definiuj statystykę i histogram",
		computeGammaName: "Automatyczna korekta gamma",
		useGammaName: "Użyj korekty gamma",
		gammaName: "Gamma",
		inputNamesName: "Nazwy",
		expressionName: "Wyrażenie",
		cellsizeTypeName: "Typ rozmiaru komórki",
		extentTypeName: "Typ zasięgu",
		classifierDefinitionFileName: "Wejściowy plik definicji",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Raster dla wartości prawda (true)",
		falseRasterName: "Raster dla wartości fałsz (false)",
		noDataInterpretationName: "Interpretacja wartości NoData",
		noDataValuesName: "Wartości Brak danych",
		includedRangesName: "Dołączone zakresy",
		curvatureTypeName: "Typ krzywizny",
		rastersName: "Rastry",
		attributeTableName: "Tabela",
		attributeTableTypeName: "Typ tabeli",
		rowsName: "Liczba wierszy",
		columnsName: "Liczba kolumn",
		kernelName: "Jądro",
		mirrorEdgesName: "Krawędzie lustrzane",
		influencesName: "Wpływy",
		fieldsName: "Pola",
		remapsName: "Tabela ponownego przyporządkowania",
		evalFromName: "Początek skali oceny",
		evalToName: "Koniec skali oceny",
		weightsName: "Wagi",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "Promień IDW krótkiego zasięgu",
		maxVoidWidthName: "Maks. szerokość luki",
		sigmaGaussianName: "Wygładzanie adaptacyjne",
		contourTypeName: "Typ warstwicy",
		zBaseName: "Z podstawowy",
		numberOfContoursName: "Liczba warstwic",
		contourIntervalName: "Interwał warstwic",
		nthContourLineInBoldName: "Pogrubiona n-ta linia konturu",
		featureClassName: "Obiekty wejściowe",
		classIndexFieldName: "Pole",
		resolveOverlapMethodName: "Metoda wyświetlania nakładających się obszarów",
		resamplingTypeName: "Typ ponownego próbkowania",
		inputCellsizeName: "Wejściowy rozmiar komórki",
		outputCellsizeName: "Wynikowy rozmiar komórki",
		pointFeatureClassName: "Punkty zaczepienia",
		maxGrowthRadiusFieldName: "Maks. pole wzrostu promienia",
		similarityThresholdFieldName: "Pole progu podobieństwa",
		fillValueFieldName: "Pole wypełniane wartością",
		spectralDetailName: "Szczegół spektralny [1..20]",
		spatialDetailName: "Szczegół przestrzenny [1..20]",
		minNumPixelsPerSegmentName: "Minimalny rozmiar segmentu w pikselach",
		boundariesOnlyName: "Tylko granice segmentów",
		statisticsTypeName: "Typ statystyk",
		fillNoDataOnlyName: "Wypełnij tylko piksele NoData",
		inputDataTypeName: "Typ danych wejściowych",
		angleReferenceSystemName: "Kątowy system odniesienia",
		outputDataTypeName: "Typ danych wynikowych",
		inputSamplePointFeatureClassName: "Próbki wejściowe",
		valueFieldName: "Pole wartości",
		rasterInfoName: "Informacje o rastrze",
		interpolationMethodName: "Metoda interpolacji",
		radiusName: "Promień",
		radianceGainValuesName: "Zysk blasku",
		radianceBiasValuesName: "Korekta blasku",
		reflectedGainValuesName: "Zysk odbicia",
		reflectedBiasValuesName: "Korekta odbicia",
		sunElevationName: "Wysokość słońca (stopnie)",
		albedoName: "Albedo",
		scaleFactorName: "Mianownik skali",
		offsetName: "Przesunięcie",
		thresholdTypeName: "Typ progu",
		thresholdsName: "Progi",
		undefinedClassName: "Niezdefiniowana klasa",
		minValueName: "Min",
		maxValueName: "Maks",
		operationName: "Operacja",
		clippingTypeName: "Typ przycinania",
		clippingGeometryName: "Przycinanie geometrii / rastra",
		extentName: "Zasięg wynikowy",
		useInputFeatureGeometryName: "Użyj obiektów wejściowych do przycinania geometrii",
		remapDefinitionTypeName: "Typ definicji funkcji Remap",
		inputRangeName: "Zakresy wejściowe",
		outputValuesName: "Wartości wynikowe",
		noDataRangeName: "Zakresy braku danych",
		inputFieldName: "Pole wejściowe",
		outputFieldName: "Pole wynikowe",
		inputMaxFieldName: "Wejściowe pole wartości Maks. (opcjonalne)",
		remapTableTypeName: "Typ tabeli funkcji Remap",
		allowUnmatchedName: "Zezwalaj na niedopasowane wartości pikseli",
		changeMissingValuesToNoDataName: "Zmień brakujące wartości na NoData",
		visibleBandIDName: "ID pasma widzialnego",
		infraredBandIDName: "ID pasma podczerwieni",
		scientificOutputName: "Wynik opracowania",
		bandIndexesName: "Indeksy pasm",
		constantName: "Stała",
		weightName: "Waga",
		minimumName: "Minimum",
		maximumName: "Maksimum",
		sourceDataName: "Raster źródłowy",
		sourceFieldName: "Pole źródłowe",
		costRasterName: "Raster kosztów",
		maxDistanceName: "Odległość maksymalna",
		valueRasterName: "Raster wartości",
		costMultiplierName: "Mnożnik do zastosowania dla kosztów",
		startCostName: "Początkowy koszt",
		accumCostResistanceRateName: "Współczynnik oporu akumulowanego kosztu",
		capacityName: "Pojemność",
		travelDirectionName: "Kierunek podróży",
		cellSizeName: "Rozmiar komórki",
		populationFieldName: "Pole populacji",
		areaUnitsName: "Jednostki powierzchni",
		outputValueTypeName: "Wartości komórki danych wynikowych",
		barriersName: "Bariery wejściowe",
		destinationDataName: "Raster docelowy",
		destinationFieldName: "Pole docelowe",
		pathTypeName: "Typ ścieżki",
		observerFeaturesName: "Obiekty obserwatora",
		analysisMethodName: "Metoda analizy",
		analysisTypeName: "Rodzaj analizy",
		verticalErrorName: "Błąd pionowy",
		refractivityCoefficientName: "Współczynnik załamania światła",
		surfaceOffsetName: "Przesunięcie powierzchni",
		observerElevationName: "Wysokość obserwatora",
		observerOffsetName: "Przesunięcie obserwatora",
		innerRadiusName: "Promień wewnętrzny",
		innerRadiusIs3DDistanceName: "Promień wewnętrzny w odległości trójwymiarowej",
		outerRadiusName: "Promień zewnętrzny",
		outerRadiusIs3DDistanceName: "Promień zewnętrzny w odległości trójwymiarowej",
		horizontalStartAngleName: "Poziomy kąt początkowy",
		horizontalEndAngleName: "Poziomy kąt końcowy",
		verticalUpperAngleName: "Górny kąt pionowy",
		verticalLowerAngleName: "Dolny kąt pionowy",
		zoneDataName: "Raster strefy",
		zoneFieldName: "Pole strefy",
		ignoreNoDataName: "Ignoruj w obliczeniach Brak danych",
		temperatureRasterName: "Raster temperatur",
		inTemperatureUnitsName: "Jednostki temperatury",
		outHeatIndexTemperatureUnitsName: "Jednostki indeksu cieplnego",
		relativeHumidityRasterName: "Raster wilgotności względnej",
		outWindChillTemperatureUnitsName: "Jednostki temperatury odczuwalnej",
		windSpeedRasterName: "Raster prędkości wiatru",
		inWindSpeedUnitsName: "Jednostki prędkości wiatru",
		valueName: "Wartość",
		propertyName: "Nazwa właściwości",
		jsonName: "Metadane JSON",
		zoneTableName: "Tabela atrybutów strefowych",
		attributeFieldNames: "Nazwy pól atrybutów",
		backgroundName: "Wartość tła",
		whereClauseName: "Klauzula warunku Where",
		minimumValueFieldName: "Nazwa pola wartości minimalnej",
		maximumValueFieldName: "Nazwa pola wartości maksymalnej",
		outValueFieldName: "Nazwa pola wartości wynikowej",
		defaultValueName: "Domyślna wartość wynikowa",
		conversionMatrixName: "Macierz konwersji",
		IsPseudoColorOutputName: "Jest wynikowym pseudokolorem",
		unmappedAsRandomColorName: "Losowo przypisz kolor do nieprzyporządkowanych pikseli",
		distanceMethodName: "Metoda odległości",
		flowDirRasterName: "Raster kierunku przepływu",
		pourPointName: "Raster punktów wylewu",
		pourPointFieldName: "Pole punktu wylewu",
		constantZName: "Stała Z",
		zOffsetName: "Przesunięcie Z",
		geoIdName: "Geoida",
		calibrationTypeName: "Typ kalibracji",
		filterTypeName: "Typ filtru",
		filterSizeName: "Filtruj wielkość",
		noiseModelName: "Model szumów",
		noiseVarianceName: "Wariancja szumów",
		additiveNoiseMeanName: "Średni addytywny szum",
		multiplicativeNoiseMeanName: "Średni multiplikatywny szum",
		numberofLooksName: "Liczba spojrzeń",
		dampingFactorName: "Współczynnik tłumienia",
		maskRasterName: "Raster maski",
		nibbleValuesName: "Użyj wartości brak danych jeżeli są najbliższym sąsiadem",
		nibbleNoDataName: "Zastąp najbliższym sąsiadem komórki NoData",
		zLimitName: "Limit Z",
		flowDirectionTypeName: "Typ kierunku przepływu",
		weightRasterName: "Raster wagi",
		forceEdgeName: "Wymusza wypływanie na zewnątrz wszystkich komórek krawędziowych",
		streamRasterName: "Raster strumieniowy",
		surfaceRasterName: "Raster powierzchni",
		conversionType: "Typ konwersji",
		distanceRaster1: "Raster odległości 1",
		distanceRaster2: "Raster odległości 2",
		costDistanceRaster: "Raster kosztów odległości",
		costBacklinkRaster: "Raster kosztów łączy powrotnych",
		overridesName: "Zastąpienia",
		fieldName: "Pole",
		signatureFileOrUrl: "Plik lub adres URL podpisu",
		redName: "Czerwony",
		greenName: "Zielony",
		blueName: "Niebieski",
		infraredName: "Podczerwień",
		panchromaticName: "Panchromatyczny",
		multispectralName: "Wielospektralny",
		pansharpeningType: "Typ wyostrzenia panchromatycznego",
		sensorName: "Czujnik",
		spatialReferenceName: "Odniesienie przestrzenne",
		xCellsizeName: "Rozmiar komórki X",
		yCellsizeName: "Rozmiar komórki Y",
		xOriginName: "Punkt rejestracji X",
		yOriginName: "Punkt rejestracji Y",
		percentileName: "Wartość percentylowa",
		neighborhoodType: "Typ sąsiedztwa",
		widthName: "Szerokość",
		heightName: "Wysokość",
		startAngleName: "Kąt początkowy",
		endAngleName: "Kąt końcowy",
		neighborhoodValues: "Wartości w sąsiedztwie",
		horizontalRaster: "Raster ze składnikiem poziomym",
		horizontalFactor: "Składnik poziomy",
		verticalRaster: "Raster ze składnikiem pionowym",
		verticalFactor: "Składnik pionowy",
		streamRaster: "Raster strumieniowy",
		flowDirRaster: "Raster kierunku przepływu",
		numberNeighborCells: "Liczba sąsiadujących komórek",
		zoneConnectivity: "Połączenia strefy",
		addLinkBehavior: "Dodaj łącze",
		excludedValue: "Wartość wykluczona",
		constantFillCheck: "Utwórz wypełnienie rastra ze stałej",
		fillRaster: "Wypełnij raster",
		constantFillValue: "Wartość stała",
		inputBitPositions: "Bit wejściowy",
		outputBitPositions: "Bit wynikowy",
		distanceTypeName: "Typ odległości",
		barrierDataName: "Bariery rastrowe",
		pourPointDataName: "Raster punktów wylewu",
		accumulationRasterName: "Raster akumulowania przepływu",
		snapDistanceName: "Odległość dociągania",
		orderMethodName: "Metoda ustalania kolejności",
		directionMeasurementName: "Kierunek pomiaru",
		processAsMultiband: "Przetwarzaj jako wielopasmowe",
		processMultidimensional: "Przetwarzaj jako wielowymiarowe",
		forceFlowDirectionConvention: "Wymuś konwencję kierunku przepływu dla rastra łączy powrotnych",
		initialAccumulation: "Akumulacja początkowa",
		maximumAccumulation: "Akumulacja maksymalna",
		sourceLocationBands: "Generuj wiersz i kolumnę źródłową jako dodatkowe pasma w danych wynikowych",
		backDirectionBand: "Generuj kierunek wstecz jako dodatkowe pasmo w danych wynikowych",
		numberOfCells: "Liczba komórek",
		zoneValues: "Wartości strefy",
		shrinkMethod: "Metoda zmniejszania",
		expandMethod: "Metoda rozszerzania",
		inputSpectralProfileType: "Typ profilu spektralnego",
		spectralProfileFileName: "Profil spektralny",
		trainingFeatureFileName: "Obiekt treningowy",
		nonNegative: "Wartość nieujemna",
		sumToOne: "Sumuj do wartości jeden",
		randomDistribution: "Dystrybucja",
		meanName: "Średnia",
		probabilityName: "Prawdopodobieństwo",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "N",
		seed: "Punkt zaczepienia",
		randomNumberGenerator: "Generator liczb losowych",
		cellFactor: "Współczynnik komórki",
		aggregationType: "Technika agregacji",
		extentHandling: "W razie potrzeby rozszerz zasięg",
		trendAnalysisDimensionName: "Nazwa wymiaru",
		trendAnalysisType: "Typ trendu",
		harmonicFrequency: "Częstotliwość harmoniczna",
		polynomialOrder: "Kolejność wielomianowa",
		cycleLengthName: "Długość cyklu",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R kwadrat",
		trendAnalysisSlopePValue: "Wartość P współczynnika spadków",
		trendAnalysisSeasonalPeriod: "Okres sezonowy",
		cycleUnitName: "Jednostka cyklu",
		predictDimensionValues: "Wartości",
		dimensionDefinitionType: "Definicja wymiaru",
		predictDimensionStart: "Początek",
		predictDimensionEnd: "Koniec",
		predictDimensionInterval: "Przedział wartości",
		dimensionUnit: "Jednostka",
		interpolationCellsizeName: "Rozmiar komórki interpolacji",
		variableName: "Zmienne",
		dimensionlessName: "Bez wymiarów",
		mdimDefinition: "Definicja wymiaru",
		dimensionName: "Wymiar",
		iterationStart: "Rozpocznij pierwszą iterację",
		iterationEnd: "Zakończ pierwszą iterację",
		intervalStart: "Początek interwału",
		intervalEnd: "Koniec interwału",
		stepName: "Odstęp",
		rangesName: "Zakresy",
		minValue: "Wartość minimalna",
		maxValue: "Wartość maksymalna",
		changeAnalysisRasterName: "Raster analizy zmian",
		changeTypeName: "Zmień typ",
		segmentDate: "Data segmentu",
		changeDirectionName: "Zmień kierunek",
		maxNumChangesName: "Maksymalna liczba zmian",
		filterByYear: "Filtruj według roku",
		minimumYear: "Wartość minimalna",
		maximumYear: "Wartość maksymalna",
		filterByDuration: "Filtruj według czasu trwania",
		minimumDuration: "Minimalny czas trwania",
		maximumDuration: "Maksymalny czas trwania",
		filterByMagnitude: "Filtruj według wielkości",
		minimumMagnitude: "Wielkość minimalna",
		maximumMagnitude: "Wielkość maksymalna",
		filterByStartValue: "Filtruj według wartości początkowej",
		minimumStartValue: "Minimalna wartość początkowa",
		maximumStartValue: "Maksymalna wartość początkowa",
		filterByEndValue: "Filtruj według wartości końcowej",
		minimumEndValue: "Minimalna wartość końcowa",
		maximumEndValue: "Maksymalna wartość końcowa",
		modelTypeName: "Typ modelu",
		fromRasterName: "Z rastra",
		toRasterName: "Do rastra",
		computeChangeMethod: "Metoda obliczania zmian",
		fromClassValues: "Wartości klasy początkowej (na przykład: 2 5)",
		toClassValues: "Wartości klasy końcowej (na przykład: 2 5)",
		keepMethod: "Metoda filtrowania",
		useColorMethod: "Zdefiniuj kolory przejścia",
		detectChangeBands: "Pasma na potrzeby wykrywania zmian (rozpoczynają się od 0)",
		tmaskBands: "Pasma na potrzeby maskowania czasowego (rozpoczynają się od 0)",
		chiSquaredThreshold: "Próg chi kwadrat na potrzeby wykrywania zmian",
		minAnomaly: "Minimalna liczba kolejnych obserwacji anomalii",
		updatingFrequency: "Aktualizowanie częstotliwości dopasowywania (w latach)",
		distanceAccumulationRasterName: "Raster akumulacji odległości",
		costBackdirectionRasterName: "Raster kierunku wstecz lub kierunku przepływu",
		rasterCollectionName: "Zbiór rastrów",
		itemFunctionName: "Funkcja elementu",
		aggregationFunctionName: "Funkcja agregująca",
		processingFunctionName: "Funkcja przetwarzająca",
		aggregationDefinitionName: "Definicja agregacji",
		queryGeometryName: "Zapytanie o geometrię",
		factorFunctionZeroFactor: "Składnik o wartości zerowej",
		factorFunctionCutAngle: "Kąt odcinania",
		factorFunctionSideFactor: "Składnik boczny",
		factorFunctionSlope: "Spadki",
		factorFunctionLowCutAngle: "Niski kąt odcinania",
		factorFunctionHighCutAngle: "Wysoki kąt odcinania",
		factorFunctionCosPower: "Potęga cosinusa",
		factorFunctionSecPower: "Potęga secansa",
		factorFunctionTablePath: "Ścieżka tabeli",
		processingBand: "Pasmo przetwarzania",
		processingBandName: "Przetwarzanie nazwy pasma",
		snappingDate: "Data dociągania",
		maxNumSegments: "Maksymalna liczba segmentów",
		vertexCountOvershoot: "Minięcie liczby wierzchołków",
		spikeThreshold: "Próg skoku",
		recoveryThreshold: "Próg odzyskiwania",
		minNumObs: "Minimalna liczba obserwacji",
		pValueThreshold: "Próg wartości p",
		bestModelProportion: "Najlepsze proporcje modelu",
		preventOneYearRecovery: "Zapobiegaj odzyskiwaniu jednego roku",
		recoveryIncreaseTrend: "Odzyskiwanie ma trend rosnący",
		outputOtherBands: "Wynikowe pozostałe pasma",
		sortType: "Typ sortowania",
		numberOfRuns: "Uruchom rozszerzanie i zmniejszanie dwukrotnie",
		percentileValue: "Wartość percentylowa",
		percentileInterpolationType: "Typ interpolacji percentylowej",
		rasterInfoProperty: "Własność",
		rasterInfoValue: "Wartość",
		rasterInfoColumns: "Kolumny",
		rasterInfoRows: "Wiersze",
		rasterInfoBandCount: "Liczba pasm",
		rasterInfoPixelSizeX: "Rozmiar komórki X",
		rasterInfoPixelSizeY: "Rozmiar komórki Y",
		rasterInfoPixelType: "Typ piksela",
		rasterExtentTop: "Góra",
		rasterExtentBottom: "Dół",
		rasterExtentLeft: "Lewy",
		rasterExtentRight: "Prawy",
		rasterStatisticsNotCalculated: "Nie obliczono statystyki.",
		spatialReferenceProjection: "Odwzorowanie",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Poprzedni identyfikator WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Poprzedni identyfikator VCSWKID",
		spatialReferenceAuthority: "Instytucja",
		spatialReferenceLinearUnit: "Jednostka liniowa",
		spatialReferenceAngularUnit: "Jednostka kątowa",
		spatialReferenceFalseEasting: "Stała dodawania składowej y",
		spatialReferenceFalseNorthing: "Stała dodawania składowej x",
		spatialReferenceCentralMeridian: "Południk centralny",
		spatialReferencePrimeMeridian: "Południk początkowy",
		spatialReferenceStandardParallel1: "Równoleżnik standardowy 1",
		spatialReferenceStandardParallel2: "Równoleżnik standardowy 2",
		spatialReferenceLatitudeOfOrigin: "Szerokość geograficzna punktu początkowego",
		spatialReferenceAuxiliarySphereType: "Typ sfery pomocniczej",
		spatialReferenceDatum: "Układ odniesienia",
		spatialReferenceSpheroid: "Sferoida",
		spatialReferenceSemimajorAxis: "Wielka półoś",
		spatialReferenceSemiminorAxis: "Mała półoś",
		spatialReferenceInverseFlattening: "Odwrotność spłaszczenia",
		inputDefinitionFileName: "Wejściowy plik definicji",
		deleteName: "Usuń",
		addVariableName: "Dodaj zmienną",
		maxNumPixelsPerSegment: "Maksymalny rozmiar segmentu w pikselach",
		forwardWindowName: "Okno w przód",
		backwardWindowName: "Okno w tył",
		noDataHandlingName: "Obsługa wartości Brak danych",
		circularWrapValueName: "Wartość zawijania okrężnego",
		fromClassNameFieldName: "Nazwa pola dla nazw klas w rastrze początkowym",
		toClassNameFieldName: "Nazwa pola dla nazw klas w rastrze końcowym",
		targetRasterName: "Raster docelowy",
		circularWrapValue: "Wartość zawijania okrężnego",
		bandIndexesR: "Wyrażenie dla koloru czerwonego",
		bandIndexesG: "Wyrażenie dla koloru zielonego",
		bandIndexesB: "Wyrażenie dla koloru niebieskiego",
		exampleName: "Przykład",
		inputName: "Dane wejściowe",
		outputName: "Dane wynikowe",
		optionalName: "Opcjonalnie",
		browseDefinitionFile: "Przejdź do pliku definicji",
		selectDefinitionFile: "Wybierz wejściowy plik definicji",
		inputDefinitionURL: "Adres URL wejściowego pliku definicji",
		enterDefinitionFileURL: "Wprowadź adres URL pliku definicji",
		browseXMLFile: "Przejdź do pliku XML",
		selectStatsFile: "Wybierz plik statystyki i histogramów",
		enterXMLFileURL: "Wprowadź adres URL pliku XML",
		xmlFileURL: "Adres URL pliku XML",
		circularCalculation: "Oblicz statystyki kołowe",
		localSurfaceType: "Typ powierzchni lokalnej",
		surfaceParameterType: "Typ parametru",
		neighborhoodDistance: "Odległość sąsiedztwa",
		useAdaptiveNeighborhood: "Użyj sąsiedztwa adaptacyjnego",
		outputSlopeType: "Wynikowy pomiar spadku",
		projectAzimuths: "Odwzoruj azymut geodezyjny",
		useEquatorialAspect: "Użyj aspektu równikowego",
		zUnit: "Jednostka Z",
		analysisMask: "Maska analizy",
		stdDeviation: "Odchylenie standardowe",
		"true": "Prawda",
		"false": "Fałsz",
		costDistanceRaster1: "Wejściowy raster kosztów akumulowanych odległości 1",
		costDistanceRaster2: "Wejściowy raster kosztów akumulowanych odległości 2",
		threshold: "Próg",
		thresholdMethod: "Metoda progowa",
		directionRaster1: "Wejściowy raster kierunku wstecz 1",
		directionRaster2: "Wejściowy raster kierunku wstecz 2",
		maxIterations: "Maksymalna liczba iteracji",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Manualnie",
		attributeTableTypeExternal: "Zewnętrzne",
		clrSchemeTypeColormap: "Mapa kolorów",
		clrSchemeTypeColorRamp: "Skala barw",
		colormapTypeElevation: "Dane wysokościowe",
		colormapTypeGray: "Szara",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Losowe",
		none: "Brak",
		slopeTypeAdjusted: "Dostosowane",
		slopeTypeDegree: "Stopień",
		slopeTypePercentRise: "Wzrost procentowy",
		slopeTypeScaled: "Skalowane",
		stretchTypeMinMax: "MinMaks",
		stretchTypePercentMinMax: "Procentowa wartość MinMaks",
		stretchTypeSigmoid: "Sigmoid",
		stretchTypeStdDev: "OdchStd",
		hillshadeTypeSimple: "Tradycyjne",
		hillshadeTypeMultidirectional: "Wielokierunkowe",
		bandComboByNames: "Nazwy pasm",
		bandComboByWavelength: "Długości fal pasm",
		bandComboByIDs: "Identyfikatory pasm",
		missingBandActionBestMatch: "Najlepsze dopasowanie",
		missingBandActionFail: "NIEPOWODZENIE",
		unitTypeCelsius: "Celsjusz",
		unitTypeCentimeters: "Centymetry",
		unitTypeDecimeters: "Decymetry",
		unitTypeFahrenheit: "Fahrenheita",
		unitTypeFeet: "Stopy",
		unitTypeFeetPerSec: "Stopy na sekundę (st/s)",
		unitTypeInches: "Cale",
		unitTypeKelvin: "Kelwin",
		unitTypeKilometers: "Kilometry",
		unitTypeKmsPerHour: "Kilometry na godzinę (km/h)",
		unitTypeKnots: "Węzły (kn)",
		unitTypeMeters: "Metry",
		unitTypeMetersPerSec: "Metry na sekundę (m/s)",
		unitTypeMiles: "Mile",
		unitTypeMilesPerHour: "Mile na godzinę (mph)",
		unitTypeMillimeters: "Milimetry",
		unitTypeNauticalMiles: "Mile morskie",
		unitTypeYards: "Jardy",
		unitTypeDecimalDegrees: "Stopnie dziesiętne",
		unitTypePoints: "Punkty",
		unitTypeUnknown: "Nieznane",
		unitTypeSqMapUnits: "Kwadratowe jednostki mapy",
		unitTypeSqMiles: "Mile kwadratowe",
		unitTypeSqKms: "Kilometry kwadratowe",
		unitTypeAcres: "Akry",
		unitTypeHectares: "Hektary",
		unitTypeSqYards: "Jardy kwadratowe",
		unitTypeSqFt: "Stopy kwadratowe",
		unitTypeSqInches: "Cale kwadratowe",
		unitTypeSqMts: "Metry kwadratowe",
		unitTypeSqCms: "Centymetry kwadratowe",
		unitTypeSqMms: "Milimetry kwadratowe",
		cellsizeTypeFirst: "Pierwszy z",
		cellsizeTypeMin: "Min. z",
		cellsizeTypeMax: "Maks. z",
		cellsizeTypeMean: "Średnia z",
		cellsizeTypeLast: "Ostatni z",
		extentTypeFirst: "Pierwszy z",
		extentTypeIntersection: "Przecięcie",
		extentTypeUnion: "Suma",
		extentTypeLast: "Ostatni z",
		noDataInterpretAny: "Dopasuj dowolne",
		noDataInterpretAll: "Dopasuj wszystkie",
		curvatureTypeStandard: "Standardowy",
		curvatureTypeProfile: "Profil",
		curvatureTypePlanform: "Rzut",
		filterTypeLineDetectionHorizontal: "Horyzontalna linia detekcji",
		filterTypeLineDetectionVertical: "Pionowa linia detekcji",
		filterTypeLineDetectionLeftDiagonal: "Lewa przekątna linii detekcji",
		filterTypeLineDetectionRightDiagonal: "Prawa przekątna linii detekcji",
		filterTypeGradientNorth: "Północny gradient",
		filterTypeGradientWest: "Zachodni gradient",
		filterTypeGradientEast: "Wschodni gradient",
		filterTypeGradientSouth: "Południowy gradient",
		filterTypeGradientNorthEast: "Gradient w kierunku północno-wschodnim",
		filterTypeGradientNorthWest: "Gradient w kierunku północno-zachodnim",
		filterTypeSmoothArithmeticMean: "Wygładzona średnia arytmetyczna",
		filterTypeSmoothing3x3: "Wygładzenie 3x3",
		filterTypeSmoothing5x5: "Wygładzenie 5x5",
		filterTypeSharpening3x3: "Wyostrzenie 3x3",
		filterTypeSharpening5x5: "Wyostrzenie 5x5",
		filterTypeLaplacian3x3: "Laplasjan 3x3",
		filterTypeLaplacian5x5: "Laplasjan 5x5",
		filterTypeSobelHorizontal: "Sobel poziomy",
		filterTypeSobelVertical: "Sobel pionowy",
		filterTypeSharpen: "Wyostrzenie",
		filterTypeSharpen2: "Większe wyostrzenie",
		filterTypePointSpread: "Rozpiętość punktów",
		userDefined: "Zdefiniowane przez użytkownika",
		ContourTypeLines: "Linie konturu",
		ContourTypeFill: "Wypełnienie konturu",
		ContourTypeSmoothOnly: "Tylko gładka powierzchnia",
		rasterizeFirst: "Pierwszy",
		rasterizeLast: "Ostatni",
		rasterizeSmallest: "Najmniejszy",
		rasterizeLargest: "Największy",
		resamplingTypeNearest: "Najbliższe sąsiedztwo",
		resamplingTypeBilinear: "Interpolacja bilinearna",
		resamplingTypeCubic: "Splot sześcienny",
		resamplingTypeMajority: "Większość",
		resamplingTypeBilinearPlus: "Interpolacja bilinearna plus",
		resamplingTypeGauss: "Rozmycie Gaussa",
		resamplingTypeGaussPlus: "Rozmycie Gaussa",
		resamplingTypeAverage: "Średnia",
		resamplingTypeMinimum: "Minimum",
		resamplingTypeMaximum: "Maksimum",
		resamplingTypeVectorAvg: "Średnia wektora",
		minimum: "Minimum",
		maximum: "Maksimum",
		mean: "Średnia",
		stdDeviation: "Odchylenie standardowe",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Wielkość-kierunek",
		unknown: "Nieznane",
		angleRefSysGeographic: "Geograficzny",
		angleRefSysArithmetic: "Arytmetyczna",
		interpolateIrregularDataNearest: "Najbliższe sąsiedztwo",
		interpolateIrregularDataBilinear: "Dwuliniowe",
		interpolateIrregularDataTinningLinear: "Pocienianie liniowe",
		interpolateIrregularDataTinningNaturalNeighbor: "Naturalne sąsiedztwo",
		interpolateIrregularDataTinningIDW: "Ważone odwrotności odległości (IDW)",
		esriRasterThresholdTypeConstant: "Stała",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg Maks",
		argStatsTypeMin: "Arg Minimum",
		argStatsTypeMedian: "Arg Mediana",
		argStatsTypeDuration: "Czas trwania",
		arithmeticOpPlus: "Plus",
		arithmeticOpMinus: "Minus",
		arithmeticOpMultiply: "Pomnóż",
		arithmeticOpDivide: "Podziel",
		arithmeticOpPower: "Potęga",
		arithmeticOpMode: "Tryb",
		clipTypeOutside: "Przytnij na zewnątrz",
		clipTypeInside: "Przytnij wewnątrz",
		yes: "Tak",
		no: "Nie",
		densities: "Gęstości",
		expectedCounts: "Oczekiwana liczba",
		planar: "Płaskie",
		geodesic: "Geodezyjne",
		eachCell: "Każda komórka",
		eachZone: "Każda strefa",
		bestSingle: "Najlepsza pojedyncza",
		allSightlines: "Wszystkie pola widzenia",
		perimeterSightlines: "Pola widzenia po obwodzie",
		frequency: "Częstotliwość",
		observers: "Obserwatorzy",
		majority: "Większość",
		median: "Mediana",
		minority: "Mniejszość",
		percentile: "Percentyl",
		range: "Zakres",
		sum: "Suma",
		variety: "Zróżnicowanie",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Przetransformowany SAVI",
		bandArithmeticMethodMSAVI: "Zmodyfikowany SAVI",
		bandArithmeticMethodSultan: "Wzór Sultana",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Tlenek żelaza",
		ferrousMinerals: "Minerały żelazowe",
		clayMinerals: "Minerały ilaste",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Pierwiastek kwadratowy",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Not na poziomie bitowym",
		localBooleanNot: "Logiczne Not",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Funkcja wykładnicza o podstawie 10",
		localExp2: "Funkcja wykładnicza o podstawie 2",
		localInt: "Całkowite",
		localIsNull: "Jest pusty",
		localFloat: "Zmiennoprzecinkowe",
		localLn: "Logarytm naturalny",
		localLog10: "Logarytm o podstawie 10",
		localLog2: "Logarytm o podstawie 2",
		localNegate: "Neguj",
		localRoundDown: "Zaokrąglij w dół",
		localRoundUp: "Zaokrąglij w górę",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Plus",
		localMinus: "Minus",
		localTimes: "Pomnóż",
		localPower: "Potęga",
		localBitwiseAnd: "And na poziomie bitowym",
		localBitwiseLeftShift: "Przesunięcie w lewo na poziomie bitowym",
		localBitwiseOr: "Or na poziomie bitowym",
		localBitwiseRightShift: "Przesunięcie w prawo na poziomie bitowym",
		localBitwiseXor: "Bitowa funkcja Xor",
		localBooleanAnd: "Logiczne AND",
		localBooleanOr: "Logiczne Or",
		localBooleanXor: "Logiczna funkcja Xor",
		localDivide: "Podziel",
		localEqualTo: "Równa się",
		localGreaterThan: "Większy niż",
		localGreaterThanEqual: "Większy lub równy",
		localLessThan: "Mniejszy niż",
		localLessThanEqual: "Mniejszy lub równy",
		localMod: "Mod",
		localNotEqual: "Nie równy",
		localATan2: "ATan2",
		localSquare: "Kwadrat",
		localSetNull: "Ustaw puste",
		remapDefTypeList: "Lista",
		remapDefTypeTable: "Tabela",
		remapTableTypeSimple: "Prosty",
		remapTableTypeDynamic: "Dynamiczny",
		remapTableTypeReassignment: "Ponowne przypisanie",
		geomCorrectionByConstZ: "Użyj stałej Z",
		geomCorrectionByDEM: "Użyj DEM",
		radarCalibBetaNought: "Beta nought",
		radarCalibSigmaNought: "Sigma nought",
		radarCalibGammaNought: "Gamma nought",
		speckleFilterTypeLee: "Filtr Lee",
		speckleFilterTypeEnhancedLee: "Rozszerzony filtr Lee",
		speckleFilterTypeFrost: "Filtr Frost",
		speckleFilterTypeKuan: "Filtr Kuan",
		speckleNoiseModelMul: "Multiplikatywny szum",
		speckleNoiseModelAdd: "Addytywny szum",
		speckleNoiseModelAddnMul: "Addytywny i multiplikatywny szum",
		mosaicOpTypeFirst: "Pierwszy",
		mosaicOpTypeLast: "Ostatni",
		mosaicOpTypeMin: "Min",
		mosaicOpTypeMax: "Maks",
		mosaicOpTypeMean: "Średnia",
		mosaicOpTypeBlend: "Mieszanie",
		mosaicOpTypeSum: "Suma",
		integer: "Całkowite",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "DINF",
		vertical: "Pionowo",
		horizontal: "Poziomo",
		localCellStatisticsMajority: "Większość",
		localCellStatisticsMax: "Maksimum",
		localCellStatisticsMean: "Średnia",
		localCellStatisticsMedian: "Mediana",
		localCellStatisticsMin: "Minimum",
		localCellStatisticsMinority: "Mniejszość",
		localCellStatisticsRange: "Zakres",
		localCellStatisticsStdDev: "Odchylenie standardowe",
		localCellStatisticsSum: "Suma",
		localCellStatisticsVariety: "Zróżnicowanie",
		localCellStatisticsMajorityIgnoreND: "Większość (Ignoruj brak danych)",
		localCellStatisticsMaxIgnoreND: "Maksimum (Ignoruj brak danych)",
		localCellStatisticsMeanIgnoreND: "Średnia (Ignoruj brak danych)",
		localCellStatisticsMedianIgnoreND: "Mediana (Ignoruj brak danych)",
		localCellStatisticsMinIgnoreND: "Minimum (Ignoruj brak danych)",
		localCellStatisticsMinorityIgnoreND: "Mniejszość (Ignoruj brak danych)",
		localCellStatisticsRangeIgnoreND: "Zakres (Ignoruj brak danych)",
		localCellStatisticsStdDevIgnoreND: "Odchylenie standardowe (Ignoruj brak danych)",
		localCellStatisticsSumIgnoreND: "Suma (Ignoruj brak danych)",
		localCellStatisticsVarietyIgnoreND: "Zróżnicowanie (Ignoruj brak danych)",
		localCellStatisticsTypePercentileIgnoreND: "Percentyl (ignoruj wartości Brak danych)",
		fromSource: "Ze źródła",
		toSource: "Do źródła",
		colorspaceConversionRgbToHsv: "RGB do HSV",
		colorspaceConversionHsvToRgb: "HSV do RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Średnia",
		pansharpenTypeGramSchmidt: "Grama-Schmidta",
		rectangleNeighborhood: "Prostokąt",
		circleNeighborhood: "Okrąg",
		annulusNeighborhood: "Pierścień",
		wedgeNeighborhood: "Klin",
		irregularNeighborhood: "Nieregularny",
		weightNeighborhood: "Waga",
		four: "Cztery",
		eight: "Osiem",
		within: "W obrębie",
		cross: "Krzyż",
		addLink: "Dodaj łącze",
		noLink: "Brak łącza",
		weightedMean: "Średnia ważona",
		ls8QCBitPatternCirrus: "Cirrus Landsat 8",
		ls8QCBitPatternCloud: "Chmura Landsat 8",
		ls8QCBitPatternCloudShadow: "Cień chmury Landsat 8",
		ls8QCBitPatternDesignatedFill: "Wyznaczone wypełnienie Landsat 8",
		ls8QCBitPatternDroppedFrame: "Pominięta ramka Landsat 8",
		ls8QCBitPatternSnowIce: "Śnieg/Lód Landsat 8",
		ls8QCBitPatternTerrainOcclusion: "Okluzja terenu Landsat 8",
		ls8QCBitPatternVegetation: "Roślinność Landsat 8",
		ls8QCBitPatternWater: "Woda Landsat 8",
		downStream: "W dół",
		upStream: "W górę",
		strahler: "STRAHLERA",
		shreve: "SHREVA",
		currentSlice: "Bieżący przekrój",
		allSlices: "Wszystkie przekroje",
		expandDistance: "ODLEGŁOŚĆ",
		expandMorphological: "MORFOLOGICZNA",
		spectralProfileFile: "Profil spektralny",
		trainingFeatureFile: "Obiekt treningowy",
		randomDistributionTypeUniform: "Jednorodne",
		randomDistributionTypeUniformInteger: "Całkowite",
		randomDistributionTypeNormal: "Normalne",
		randomDistributionTypeExponential: "Wykładniczy",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Dwumian",
		randomDistributionTypeGeometric: "Geometryzacja",
		randomDistributionTypeNegativeBinomial: "Ujemny dwumian",
		randomGeneratorTypeStandardCRand: "Liczba pseudolosowa z biblioteki standardowej języka C",
		randomGeneratorTypeAlgorithmACM599: "Algorytm 599 publikacji ACM collected algorithms",
		randomGeneratorTypeMersenneTwister: "Generator Mersenne Twister",
		sumName: "Suma",
		medainName: "Mediana",
		trendLinear: "Liniowy",
		trendHarmonic: "Harmoniczna",
		trendPolynomial: "Wielomianowa",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Kendalla (sezonowy)",
		dimensionByValue: "Przez wartość",
		dimensionByInterval: "Według przedziału",
		mdimDefTypeAll: "Wszystkie",
		mdimDefTypeByValues: "Według wartości",
		mdimDefTypeByRanges: "Według zakresów",
		mdimDefTypeByIteration: "Według iteracji",
		mdimDefTypeByInterval: "Według przedziału",
		mdimDefTypeByTargetRaster: "Według rastra docelowego",
		esriTimeUnitsHours: "Godziny",
		esriTimeUnitsDays: "Dni",
		esriTimeUnitsWeeks: "Tygodnie",
		esriTimeUnitsMonths: "Miesiące",
		esriTimeUnitsYears: "Lata",
		esriTimeIntervalKeywordHourly: "Co godzinę",
		esriTimeIntervalKeywordDaily: "Codziennie",
		esriTimeIntervalKeywordWeekly: "Co tydzień",
		esriTimeIntervalKeywordDekadly: "Co dziesięć",
		esriTimeIntervalKeywordPentadly: "Co pięć",
		esriTimeIntervalKeywordMonthly: "Co miesiąc",
		esriTimeIntervalKeywordQuarterly: "Co kwartał",
		esriTimeIntervalKeywordYearly: "Co rok",
		esriTimeIntervalKeywordRecurringDaily: "Powtarzane codziennie",
		esriTimeIntervalKeywordRecurringWeekly: "Powtarzane co tydzień",
		esriTimeIntervalKeywordRecurringMonthly: "Powtarzane co miesiąc",
		esriTimeIntervalKeywordRecurringQuarterly: "Powtarzane co kwartał",
		aggDefTypeAll: "Wszystkie",
		aggDefTypeIntervalKeyword: "Słowo kluczowe przedziału",
		aggDefTypeIntervalValue: "Wartość przedziału",
		aggDefTypeIntervalRanges: "Zakresy przedziałów",
		latestChange: "Czas najnowszej zmiany",
		earliestChange: "Czas najstarszej zmiany",
		largestChange: "Czas największej zmiany",
		numberOfChanges: "Liczba zmian",
		longestChange: "Czas najdłuższej zmiany",
		shortestChange: "Czas najkrótszej zmiany",
		fastestChange: "Czas najszybszej zmiany",
		slowestChange: "Czas najwolniejszej zmiany",
		allChanges: "Wszystkie",
		increaseChanges: "Zwiększ",
		decreaseChanges: "Zmniejsz",
		segmentBeginning: "Początek segmentu",
		segmentEnd: "Koniec segmentu",
		esriComputeChangeMethodDifference: "Różnica",
		esriComputeChangeMethodRelativeDifference: "Różnica względna",
		esriComputeChangeMethodCategorical: "Różnica kategorialna",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spektralna odległość euklidesowa",
		esriComputeChangeMethodMultispectralAngularDifference: "Różnica kątów spektralnych",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Pasmo z największymi zmianami",
		esriComputeChangeKeepAll: "Zachowaj wszystko",
		esriComputeChangeKeepChangedOnly: "Zachowaj tylko zmienione piksele",
		esriComputeChangeKeepUnchangedOnly: "Zachowaj tylko niezmienione piksele",
		esriComputeChangeUseColorAverage: "Uśrednij kolory początkowy i końcowy",
		esriComputeChangeUseColorFrom: "Użyj kolorów początkowych",
		esriComputeChangeUseColorTo: "Użyj kolorów końcowych",
		factorFunctionBinary: "Binarny",
		factorFunctionForward: "Do przodu",
		factorFunctionLinear: "Liniowy",
		factorFunctionInvLinear: "Odwrotna liniowa",
		factorFunctionTable: "Tabela",
		factorFunctionSymLinear: "Symetryczna liniowa",
		factorFunctionSymInvLinear: "Symetryczna odwrotna liniowa",
		factorFunctionCos: "Cosinus",
		factorFunctionSec: "Secans",
		factorFunctionCosSec: "Cosinus secans",
		factorFunctionSecCos: "Secans cosinus",
		noSort: "Nie sortuj",
		ascend: "Rosnąco",
		descend: "Malejąco",
		autoDetect: "Automatyczne wykrywanie",
		nearest: "Najbliższy",
		linear: "Liniowy",
		esriMonthJanuary: "Styczeń",
		esriMonthFebruary: "Luty",
		esriMonthMarch: "Marzec",
		esriMonthApril: "Kwiecień",
		esriMonthMay: "Maj",
		esriMonthJune: "Czerwiec",
		esriMonthJuly: "Lipiec",
		esriMonthAugust: "Sierpień",
		esriMonthSeptember: "Wrzesień",
		esriMonthOctober: "Październik",
		esriMonthNovember: "Listopad",
		esriMonthDecember: "Grudzień",
		dimensionalMovingIgnoreNoData: "Dane",
		dimensionalMovingPropagateNoData: "Brak danych",
		dimensionalMovingFillOnlyNoData: "Wypełnij wartości Brak danych",
		circularMean: "Średnia kołowa",
		circularName: "Kołowa",
		arithmeticName: "Arytmetyczna",
		slopeName: "Spadki",
		aspectName: "Ekspozycje",
		meanCurvature: "Krzywizna średnia",
		profileCurvature: "Krzywizna profilu (normalna linia spadku)",
		tangentialCurvature: "Krzywizna tangencjalna (normalna warstwica)",
		planCurvature: "Krzywizna planu (krzywizna odwzorowana)",
		contourGeodesicTorsion: "Skręcenie geodezyjne warstwicy",
		gaussianCurvature: "Krzywizna gaussowska",
		casoratiCurvature: "Krzywizna Casoratiego",
		localSurfaceTypeQuadratic: "Kwadratowa",
		localSurfaceTypeBiquadratic: "Bikwadratowa",
		thresholdNoThreshold: "Brak progu",
		thresholdPercentLeastCost: "Procent najmniejszego kosztu",
		thresholdAccumulativeCost: "Koszt akumulowany",
		clrmapTypeHillshade: "Cieniowanie rzeźby"
	},
	categoryLabels: {
		sourceCharacteristics: "Charakterystyka źródła",
		neighborhoodSettings: "Ustawienia sąsiedztwa",
		statistics: "Statystyka",
		gamma: "Gamma",
		viewshedParameters: "Parametry widoczności",
		observerParameters: "Parametry obserwatora",
		irregularDataInterpolation: "Interpolacja nieregularnych danych",
		modelStatistics: "Statystyki modelu",
		aggregationDef: "Definicja agregacji",
		filterByAttributes: "Filtruj według atrybutów",
		percentileName: "Percentyl",
		rasterInfo: "Informacje o rastrze",
		extent: "Zasięg",
		spatialReference: "Odniesienie przestrzenne"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Nazwa warstwy, która zostanie utworzona i dodana do mapy.</p>",
		resultType: "<p>Typ wynikowy, który zostanie utworzony. Danymi wynikowymi mogą być warstwy zobrazowań kafelkowych lub dynamiczne warstwy zobrazowań.</p>",
		saveResultIn: "<p>Nazwa folderu na stronie <b>Moje zasoby</b>, w którym zostanie zapisany wynik.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Ustawienia środowiskowe analiz w przeglądarce map Map Viewer. </p>",
		outSR: "<p>Określa układ współrzędnych dla analizy i warstwy wynikowej.</p>",
		extent: "<p>Określa obszar, który ma być używany podczas analizy.</p>",
		snapRaster: "<p>Dostosowuje zasięg danych wynikowych, tak aby był zgodny z wyrównaniem komórek podanej warstwy rastra dociągania.</p>",
		cellSize: "<p>Określa wielkość komórki lub rozdzielczość, która będzie używana do analizy i do tworzenia wynikowej warstwy rastrowej.</p>",
		mask: "<p>Określa warstwę maski, dzięki której do analizy zostaną użyte tylko komórki znajdujące się w obszarze maski.</p>",
		resamplingMethod: "<p>Określa sposób interpolacji wartości pikseli, gdy rastry wejściowy i wynikowy nie są zgodne.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Nieobsługiwany typ",
		currentlyUnsupported: " Domyślny edytor typu ${missingType} jest w trakcie realizacji i będzie wkrótce dostępny. Pole tekstowe tymczasowego tekstu zastępczego do podania danych wejściowych opartych na ciągach znakowych.",
		unsupportedOverrideWarning: "Komponent edytora zastępowania zapewniający lepszy interfejs użytkownika do pracy z następującymi parametrami jest w trakcie realizacji i będzie wkrótce dostępny:",
		overrideWidgetMissing: "Brak komponentu edytora zastępowania!",
		uiIncomplete: "Nie powiodło się wysłanie zadania. Nie można uruchomić tej funkcji, ponieważ w interfejsie użytkownika brak niektórych wymaganych pól lub są one niepełne.",
		count: "Liczba",
		selectVariables: "Wybierz zmienne",
		selectFeature: "Wybierz warstwę obiektową",
		greaterThanErrorMessage: "Wejściowa wartość liczbowa musi być większa niż ${min}",
		lesserThanErrorMessage: "Wejściowa wartość liczbowa musi być mniejsza niż ${max}",
		greaterThanOrEqualErrorMessage: "Wejściowa wartość liczbowa musi być większa niż lub równa ${min}",
		lesserThanOrEqualErrorMessage: "Wejściowa wartość liczbowa musi być mniejsza niż lub równa ${max}",
		allowScalar: "Wybierz warstwę lub wprowadź stałą",
		selectField: "Wybierz pole",
		parameterRequired: "Ten parametr jest wymagany.",
		enterAValue: "Wprowadź wartość...",
		invalidInput: "Wprowadzona wartość nie jest prawidłowa.",
		itemNotFound: "Element nie istnieje lub jest niedostępny.",
		itemPermissionDenied: "Nie masz uprawnień dostępu do tego elementu.",
		layerNotAvailable: "Nie udało się wczytać warstwy ${layerName}.",
		multipleLayersNotAvailable: "Nie udało się wczytać warstwy ${layerName} i innych.",
		learnMoreLabel: "Dowiedz się więcej",
		fieldNotAvailable: "Niepowodzenie wczytania pola.",
		allowAnalysis: "Analiza nie jest dozwolona w usłudze obrazowej.",
		allowAnalysisReason: "Co najmniej jedna warstwa z mapy nie została tu wymieniona, ponieważ nie umożliwia analizy.",
		learnMoreText: "Dowiedz się więcej",
		atLeastOneRasterInput: "Co najmniej jedna warstwa wejściowa powinna być warstwą rastrową.",
		browseAnalysisLayers: "Przeglądaj warstwy",
		activeMapViewExtent: "Użyj obecnego zasięgu mapy",
		chooseRaster: "Wybierz przycinanie rastra",
		chooseGeometry: "Wybierz przycinanie geometrii",
		resultType: "Typ wyniku",
		saveInFolder: "Zapisz w folderze",
		outputName: "Nazwa danych wynikowych",
		outputLayerType: "Typ warstwy wynikowej",
		dynamicImageryLayer: "Dynamiczna warstwa zobrazowań",
		tiledImageryLayer: "Kafelkowana warstwa zobrazowań",
		custom: "Niestandardowe",
		loading: "Wczytywanie...",
		layerMissing: "Co najmniej jedna warstwa z mapy nie została tu wymieniona, ponieważ nie umożliwia analizy. Dowiedz się więcej.",
		browseCoordinateSystems: "Przeglądaj układy współrzędnych",
		unableToRepopulateOutSR: "Nie można wypełnić wynikowego układu współrzędnych.",
		defaultTitle: "Pokaż więcej",
		"ARC (equal arc-second)": "ŁUK (równa sekunda łuku)",
		Africa: "Afryka",
		Antarctica: "Antarktyka",
		Argentina: "Argentyna",
		Asia: "Azja",
		"Asteroid Belt": "Pas asteroid",
		"Atlantic Ocean": "Ocean Atlantycki",
		Australia: "Australia",
		"Australia and New Zealand": "Australia i Nowa Zelandia",
		Austria: "Austria",
		"BLM (US Feet)": "BLM (stopa amerykańska)",
		Bangladesh: "Bangladesz",
		"Beijing 1954": "Pekin 1954",
		Bhutan: "Bhutan",
		CGCS2000: "CGCS2000",
		Canada: "Kanada",
		Caribbean: "Karaiby",
		"Caribbean Sea": "Morze Karaibskie",
		"Central America": "Ameryka Środkowa",
		"Central and North America": "Ameryka Środkowa i Północna",
		Colombia: "Kolumbia",
		Continental: "Kontynentalne",
		"County Systems": "Systemy powiatowe",
		"Democratic Republic of the Congo": "Demokratyczna Republika Konga",
		"EPSG Arctic": "Arktyka EPSG",
		Earth: "Ziemia",
		"Ellipsoidal-based": "Oparty na elipsoidzie",
		Europe: "Europa",
		Finland: "Finlandia",
		France: "Francja",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gaussa Krugera",
		"Geographic Coordinate Systems": "Układy współrzędnych geograficznych",
		Germany: "Niemcy",
		"Gravity-related": "Grawitacyjny",
		"Greenwich-based": "Według Greenwich",
		"Highways England": "Autostrady angielskie",
		Illinois: "Illinois",
		"Indian Ocean": "Ocean Indyjski",
		"Indian Subcontinent": "Subkontynent indyjski",
		Indiana: "Indiana",
		Indonesia: "Indonezja",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irlandia i Wielka Brytania",
		Italy: "Włochy",
		Japan: "Japonia",
		Jupiter: "Jowisz",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libia",
		Malaysia: "Malezja",
		"Malaysia and Singapore": "Malezja i Singapur",
		Mars: "Mars",
		Mercury: "Merkury",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (stopa amerykańska)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (stopa międzynarodowa)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (metry)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (stopa amerykańska)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (stopa międzynarodowa)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (metry)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (stopa amerykańska)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (stopa międzynarodowa)",
		"NAD 1983 (Meters)": "NAD 1983 (metry)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (metry)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (stopa amerykańska)",
		"NAD 1983 (US Feet)": "NAD 1983 (stopa amerykańska)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (stopa międzynarodowa)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (metry)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (stopa amerykańska)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (stopa międzynarodowa)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (metry)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (stopa amerykańska)",
		"National Grids": "Siatki narodowe",
		Navajo: "Navajo",
		Neptune: "Neptun",
		"New Beijing": "Nowy Pekin",
		"New Zealand": "Nowa Zelandia",
		"North America": "Ameryka Północna",
		"Northern Hemisphere": "Półkula północna",
		Norway: "Norwegia",
		Oceans: "Oceany",
		Oregon: "Oregon",
		"Other GCS": "Inne układy współrzędnych geograficznych",
		"Pacific Ocean": "Ocean Spokojny",
		Pluto: "Pluton",
		Polar: "Polarny",
		Portugal: "Portugalia",
		"Projected Coordinate Systems": "Układy współrzędnych odwzorowanych",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Zastąpiony",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturn",
		"Solar System": "System słoneczny",
		"South Africa": "Afryka Południowa",
		"South America": "Ameryka Południowa",
		"South Korea": "Korea Południowa",
		"Southern Hemisphere": "Półkula południowa",
		"Spheroid-based": "Na bazie sferoidy",
		"State Plane": "Płaski stanowy",
		"State Systems": "Systemy stanowe",
		Sweden: "Szwecja",
		"Switzerland and Liechtenstein": "Szwajcaria i Liechtenstein",
		Texas: "Teksas",
		Tribal: "Plemienne",
		Turkey: "Turcja",
		"US Feet": "Stopa amerykańska",
		"USA and territories": "Stany Zjednoczone i terytoria",
		UTM: "UTM",
		Ukraine: "Ukraina",
		"Unknown Height Systems": "Nieznane systemy wysokości",
		Uranus: "Uran",
		Venus: "Wenus",
		"Vertical Coordinate Systems": "Pionowe układy współrzędnych",
		Vietnam: "Wietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Świat",
		"World (Sphere-based)": "Świat (sferyczny)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Gotowe",
		noResults: "Nie znaleziono wyników",
		searchPlaceholder: "Nazwa lub identyfikator WKID",
		browseTemplate: "Przeglądaj szablony funkcji rastrowych",
		saveTemplate: "Zapisz szablon funkcji rastrowej",
		preview: "Podgląd",
		previewDescription: "Wyświetl podgląd wyniku przed uruchomieniem analizy.",
		showPreview: "Wyświetl podgląd",
		previewLayer: "Wyświetl podgląd warstwy ${number}",
		newPreview: "Nowy podgląd",
		previewPopup: "Włącz podgląd wyników analizy na podstawie parametrów wejściowych.",
		updatePreviewLayer: "Zaktualizuj wybraną warstwę podglądu",
		createPreviewLayer: "Utwórz nową warstwę podglądu",
		maximumPreviewAllowed: "Maksymalna liczba dozwolonych warstw podglądu: ${maxCount}",
		previewFailure: "Ta warstwa podglądu nie jest dostępna. Sprawdź parametry wejściowe i jeszcze raz zaktualizuj tę warstwę podglądu.",
		header: "Wybierz element",
		content: "Istnieją niezapisane zmiany: ${rftTitle}. Jeśli zaczniesz od nowa przy użyciu nowego szablonu, te zmiany zostaną utracone.",
		dontSave: "Nie zapisuj",
		"continue": "Kontynuuj",
		stretch: "Dopasuj do okna",
		pan: "Przesuń",
		newTemplate: "Utwórz nowy szablon",
		openTemplate: "Otwórz szablon",
		addFunction: "Dodaj funkcje rastrowe",
		addConstant: "Dodaj stałą",
		addRaster: "Dodaj zmienną rastrową",
		move: "Przenieś",
		zoom: "Powiększ",
		saveAs: "Zapisz jako",
		clear: "Wyczyść",
		addRasterFunctionTitle: "Dodaj funkcje rastrowe",
		templatePropertiesTitle: "Właściwości szablonu",
		browseRFT: "Przeglądaj szablony funkcji rastrowych",
		defaultToolDescription: "Narzędzie analizy ${toolTitle}.",
		openToolText: "Otwórz narzędzie",
		toolDropdownText: "Menu rozwijane narzędzia",
		addToMap: "Potwierdź i dodaj do mapy",
		confirm: "Potwierdź",
		select: "Wybierz",
		selectTask: "Wybierz zadanie",
		unsupportedLayer: "Ten parametr nie obsługuje następujących warstw: ${layerName}.",
		viewDetails: "Wyświetl pełne szczegóły elementu",
		rename: "Zmień nazwę",
		duplicate: "Duplikuj",
		launch: "Otwórz do uruchomienia",
		templateEditor: "Edytor szablonów",
		createItem: "Zapisz szablon funkcji rastrowej",
		actionLabel: "Filtruj",
		filterPopoverHeading: "Filtruj funkcje",
		defaultSearchPlaceholder: "Szukaj według nazwy",
		settings: "Parametry",
		summary: "Podsumowanie",
		definitionQuery: "Zapytanie definiujące",
		matchVariables: "Dopasuj zmienne",
		unionDimension: "Wymiar sumy",
		nameEditorPlaceholder: "Wprowadź tytuł",
		summaryEditorPlaceholder: "Wprowadź krótki opis.",
		definitionQueryPlaceholder: "Wprowadź...",
		upload: "Prześlij",
		chooseImage: "Kliknij, aby wybrać plik.",
		update: "Zmień",
		thumbnailErrors: {
			wrongImageType: "Wybrano nieprawidłowy typ obrazu.",
			notAvailable: "Miniatura niedostępna",
			loadError: "Nie można wczytać obrazu.",
			chooseFile: "Kliknij, aby wybrać plik."
		}
	}
};
const copy = "Kopiuj";
const save = "Zapisz";
const title = "Tytuł";
const folder = "Folder";
const tags = "Znaczniki";
const savingMessage = "Zapisywanie elementu do";
const shareWith = "Udostępnij";
const share = "Udostępnianie";
const setSharingLevel = "Skonfiguruj poziom udostępniania";
const setGroupSharing = "Skonfiguruj udostępnianie grupie";
const owner = "Właściciel";
const organization = "Instytucja";
const everyone = "Wszyscy (publiczne)";
const groups = "Grupy:";
const type = "Typ";
const mosaic = "Mozaika";
const itemGroup = "Grupa elementu";
const item = "Element";
const definitionQuery = "Zapytanie definiujące";
const groupItemsBy = "Grupuj elementy według";
const groupFieldName = "Nazwa pola grupy";
const tagFieldName = "Nazwa pola znaczników";
const noTitleTagErrorMsg = "Należy podać tytuł elementu oraz znaczniki, aby można było odnaleźć mapę podczas wyszukiwania.";
const noTitleErrorMsg = "Należy wprowadzić tytuł elementu.";
const noTagErrorMsg = "Należy wprowadzić co najmniej jeden znacznik ułatwiający wyszukiwanie elementu.";
const error = "Błąd";
const warning = "Ostrzeżenie";
const success = "Sukces";
const details = "Szczegóły:";
const tryAgain = "Spróbuj ponownie";
const toolModeler = {
	save: "Zapisz",
	editProperties: "Edytuj właściwości",
	saveAs: "Zapisz jako",
	savingNotification: "Zapisywanie zmian elementu...",
	savingTitle: "Zapisywanie",
	saveFailedMessage: "Zapisanie zmian nie powiodło się.",
	saveWithErrorsMessage: "Zmiany zostały zapisane i wystąpiły następujące błędy.",
	viewItemMessage: "Wyświetl zapisany element",
	here: "w tym miejscu.",
	itemCreatedMessage: "Utworzono nowy element.",
	clickToViewItemMessage: "Kliknij przycisk OK, aby wyświetlić stronę szczegółów elementu. Kliknij przycisk Anuluj, aby kontynuować.",
	readingFailed: "Wczytywanie wybranego szablonu funkcji rastrowej nie powiodło się.",
	failedToLoadXML: "Wczytywanie wybranego szablonu funkcji rastrowej w formacie XML zakończyło się niepowodzeniem.",
	learnMore: "Dowiedz się więcej",
	overwriteTitle: "Potwierdź zastąpienie",
	overwriteMessage: "Czy chcesz zastąpić istniejący element?",
	overwriteSuccessMessage: "Element został zaktualizowany."
};
const toolEditor = {
	run: "Uruchom",
	save: "Zapisz",
	deleteSelected: "Usuń wybrane elementy",
	addRaster: "Dodaj raster",
	addScalar: "Dodaj skalar",
	layout: "Kompozycja automatyczna",
	errorTitle: "Błąd",
	invalidToolMessage: "Szablon funkcji rastrowej jest nieprawidłowy.",
	out: "Wyjście",
	zoomIn: "Powiększ",
	zoomOut: "Pomniejsz",
	zoomToFit: "Dopasuj do okna",
	panOn: "Przełącz do trybu przesuwania",
	panOff: "Wyłącz tryb przesuwania",
	defaultModelName: "Model narzędzia",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Szablon funkcji rastrowej",
	defaultToolDescription: "Dodaj krótkie podsumowanie dotyczące funkcji rastrowej.",
	defaultHelpText: "Kliknij ikonę pomocy w celu edycji tekstu pomocy",
	editHelpTitle: "Pomoc dotycząca edycji",
	saveLabel: "Zapisz",
	cancelLabel: "Anuluj",
	thumbnail: {
		wrongImageType: "Wybrano nieprawidłowy typ obrazu",
		notAvailable: "Miniatura nie dostępna",
		loadError: "Nie można wczytać obrazu",
		chooseFile: "Kliknij, aby wybrać plik"
	}
};
const saveUtils = {
	thumbnail: "Miniatura",
	sharing: "Udostępnianie"
};
const close = "Zamknij";
const unsavedWarningExisting = "Czy chcesz zapisać zmiany elementu <b>${itemTitle}</b> ?";
const unsavedWarningNew = "Czy chcesz zapisać swoje zmiany?";
const saveAs = "Zapisz jako";
const dontSave = "Nie zapisuj";
const unsavedTitle = "Niezapisane zmiany";
const invalidRFTMessage = "Utworzony szablon funkcji rastrowej jest nieprawidłowy.";
const errorTitle = "Błąd";
const breadcrumb = "Edytor funkcji rastrów";
const breadcrumbEditor = "Zasoby > Edytor funkcji rastrów";
const viewerModeTitle = "Tylko do odczytu";
const viewerModeMessage = "Element szablonu funkcji rastrowej jest tylko do odczytu. Zmiany nie zostaną zapisane.";
const userStartDirection = "Wybierz funkcję, aby rozpocząć budowanie szablonu funkcji rastrowej.";
const selectFunction = "Dodaj funkcję";
const deselectFunction = "Usuń funkcję";
const dialogTitle = "Układ";
const category = "Kategorie";
const search = "Wyszukaj funkcje rastrowe";
const categoryNames = {
	analysis: "Analiza",
	appearance: "Wygląd",
	classification: "Klasyfikacja",
	conversion: "Konwersja",
	correction: "Korekta",
	dataManagement: "Zarządzanie danymi",
	distance: "Odległość",
	distanceLegacy: "Odległość (wcześniejsza)",
	hydrology: "Hydrologia",
	math: "Matematyczne",
	mathConditional: "Matematyczne: warunkowe",
	mathLogical: "Matematyczne: logiczne",
	mathTrigonometric: "Matematyczne: trygonometryczne",
	reclass: "Ponowna klasyfikacja",
	statistical: "Statystyczne",
	surface: "Powierzchnia"
};
const commonStrings_pl = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_pl);


//# sourceMappingURL=common-strings.pl-693c2a24.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,