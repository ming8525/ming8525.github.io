"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-aa2602"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-aggregation_8.entry.js":
/*!***********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-aggregation_8.entry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_aggregation: () => (/* binding */ ArcgisAggregation),
/* harmony export */   arcgis_aggregation_binning: () => (/* binding */ ArcgisAggregationBinning),
/* harmony export */   arcgis_aggregation_clustering: () => (/* binding */ ArcgisAggregationClustering),
/* harmony export */   arcgis_aggregation_field: () => (/* binding */ ArcgisAggregationField),
/* harmony export */   arcgis_aggregation_fields: () => (/* binding */ ArcgisAggregationFields),
/* harmony export */   arcgis_aggregation_info_popover: () => (/* binding */ ArcgisAggregationInfoPopover),
/* harmony export */   arcgis_aggregation_symbol_styler_popover: () => (/* binding */ ArcgisAggregationSymbolStylerPopover),
/* harmony export */   arcgis_aggregation_tile: () => (/* binding */ ArcgisAggregationTile)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */









// clustering
const clusteringRadiusMinVal = 9; // 12px
const clusteringRadiusMaxVal = 90; // 120px
const clusteringRadiusInitialVal = 37.5; // 50px
const clusteringSizeMinVal = 9; // 12px
const clusteringSizeMaxVal = 90; // 120px
const clusteringSizeMaxInitialVal = 37.5; // 50px
var AggregationType;
(function (AggregationType) {
    AggregationType["CLUSTERING"] = "clustering";
    AggregationType["CHART_CLUSTERING"] = "chartClustering";
    AggregationType["BINNING"] = "binning";
})(AggregationType || (AggregationType = {}));
/**
 * Returns a parent element with that tag name or class name
 * @param node - starting node
 * @param tagName - tag name to find up the tree
 * @param className - class name to find up the tree
 */
function findParentNode(node, tagName, className) {
    if ((tagName && (node === null || node === void 0 ? void 0 : node.tagName) === tagName.toUpperCase()) || (className && (node === null || node === void 0 ? void 0 : node.classList.contains(className)))) {
        return node;
    }
    else {
        let parentNode = node === null || node === void 0 ? void 0 : node.parentElement;
        while (parentNode) {
            if ((tagName && parentNode.tagName === tagName.toUpperCase()) ||
                (className && parentNode.classList.contains(className))) {
                return parentNode;
            }
            else if (parentNode.tagName === "BODY") {
                break;
            }
            else {
                parentNode = parentNode.parentElement;
            }
        }
    }
    return;
}
function getStatsTypeString(statisticType, strings) {
    switch (statisticType) {
        case "sum":
            return strings.fields.sum;
        case "avg":
            return strings.fields.mean;
        case "min":
            return strings.fields.min;
        case "max":
            return strings.fields.max;
        case "stddev":
            return strings.fields.stdDev;
        case "mode":
            return strings.fields.mode;
        case "var":
            return strings.fields.var;
        case "count":
            return strings.fields.count;
        default:
            return "";
    }
}
function getAggregationType(layer) {
    const featureReduction = layer.featureReduction;
    if (!featureReduction) {
        return undefined;
    }
    else if (featureReduction.type === "binning") {
        return "binning";
    }
    else if (featureReduction.type === "cluster") {
        if (isPieChartRenderer(layer)) {
            return "pie-chart";
        }
        return "cluster";
    }
}
function isRendererAutoGenerated(layer) {
    var _a, _b;
    const featureReduction = layer.featureReduction;
    return !(featureReduction === null || featureReduction === void 0 ? void 0 : featureReduction.renderer) || ((_b = (_a = featureReduction === null || featureReduction === void 0 ? void 0 : featureReduction.renderer) === null || _a === void 0 ? void 0 : _a.authoringInfo) === null || _b === void 0 ? void 0 : _b.isAutoGenerated);
}
function isPieChartRenderer(layer) {
    var _a, _b;
    const featureReduction = layer.featureReduction;
    return (featureReduction.renderer &&
        featureReduction.renderer.type === "pie-chart" &&
        !((_b = (_a = featureReduction === null || featureReduction === void 0 ? void 0 : featureReduction.renderer) === null || _a === void 0 ? void 0 : _a.authoringInfo) === null || _b === void 0 ? void 0 : _b.isAutoGenerated));
}

function isSupportedSymbol(sym) {
    return ["simple-fill", "simple-marker", "simple-line", "picture-marker", "cim"].indexOf(sym.type) > -1;
}
function getDefaultSymbol(modules) {
    /*
    "symbol":{
      "type":"esriSMS",
      "color":[227,139,79,255],
      "angle":0,
      "xoffset":0,
      "yoffset":0,
      "size":9,
      "style":"esriSMSCircle",
      "outline":{
        "type":"esriSLS",
        "color":[92,92,92,64],
        "width":0.75,
        "style":"esriSLSSolid"
      }
    }
    */
    const { SimpleLineSymbol, SimpleMarkerSymbol, Color } = modules;
    const outlineSym = new SimpleLineSymbol({
        style: "solid",
        color: new Color([92, 92, 92, 64]),
        width: 1
    });
    const symbol = new SimpleMarkerSymbol({
        style: "circle",
        size: 6.75,
        outline: outlineSym,
        color: new Color([227, 139, 79, 255])
    });
    return symbol;
}
function hasSymbolOutline(sym) {
    var _a;
    return sym.type === "picture-marker" ? false : sym.type === "cim" ? false : !!((_a = sym.outline) === null || _a === void 0 ? void 0 : _a.color);
}
function isPictureMarker(sym, modules) {
    if (sym.type === "picture-marker") {
        return true;
    }
    else if (sym.type === "cim" && !isFillOnlyCIM(sym, modules)) {
        return true;
    }
    return false;
}
function isFillOnlyCIM(sym, modules) {
    const { cimSymbolUtils } = modules;
    return !!cimSymbolUtils.getCIMSymbolColor(sym);
}
function getSymbolColor(symbol, modules) {
    var _a, _b;
    const { cimSymbolUtils, Color } = modules;
    return (symbol === null || symbol === void 0 ? void 0 : symbol.type) === "cim"
        ? Color.fromJSON((_a = cimSymbolUtils.getCIMSymbolColor(symbol)) === null || _a === void 0 ? void 0 : _a.toJSON())
        : (symbol === null || symbol === void 0 ? void 0 : symbol.type) === "simple-marker" && ["x", "cross"].indexOf(symbol === null || symbol === void 0 ? void 0 : symbol.style) > -1
            ? (_b = symbol === null || symbol === void 0 ? void 0 : symbol.outline) === null || _b === void 0 ? void 0 : _b.color
            : symbol === null || symbol === void 0 ? void 0 : symbol.color;
}
function getSymbolSize(sym, modules) {
    const { cimSymbolUtils } = modules;
    if (sym.type === "cim") {
        return cimSymbolUtils.getCIMSymbolSize(sym);
    }
    else if (sym.size) {
        return sym.size;
    }
    return sym.width;
}
function adjustAlpha(color, alpha) {
    color.a = alpha;
    return color;
}

function getLayerNumberOrStringFields(layer) {
    return layer.fields.filter((field) => ["small-integer", "big-integer", "integer", "single", "double", "long", "number", "string"].indexOf(field.type) > -1);
}
function getLayerField(layer, fieldName) {
    return fieldName && layer.fields.find((field) => field.name === fieldName);
}
function hasFieldAlready(layer, fieldName, statisticType) {
    var _a;
    const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
    return !!((_a = featureReduction.fields) === null || _a === void 0 ? void 0 : _a.find((fi /* __esri.AggregateField */) => fi.onStatisticField === fieldName && fi.statisticType === statisticType));
}
/*
 * no more stats options available for this field
 */
function isFieldDone(layer, fieldName) {
    const field = getLayerField(layer, fieldName);
    const types = getStatsTypes(field);
    return !types.find((type) => !hasFieldAlready(layer, fieldName, type));
}
function getStatsTypes(field) {
    return field.type === "string" ? ["mode"] : ["sum", "avg", "min", "max", /* "var", "stddev", */ "mode"];
}
function addPopupField(aggregateField, layer, modules) {
    // don't know where to store the alias for this field otherwise
    /* if (aggregateField.isAutoGenerated && aggregateField.statisticType === "mode") {
      // don't add this field generated for the renderer
      return;
    } */
    const { FieldInfo } = modules;
    const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
    const { popupTemplate } = featureReduction;
    popupTemplate.fieldInfos = popupTemplate.fieldInfos || [];
    const fieldInfo = popupTemplate.fieldInfos.find((fieldInfo) => fieldInfo.fieldName === aggregateField.name);
    if (!fieldInfo) {
        popupTemplate.fieldInfos.push(new FieldInfo({
            fieldName: aggregateField.name,
            label: aggregateField.alias,
            isEditable: false,
            visible: true,
            format: getFormat(aggregateField, layer)
        }));
    } // else fieldInfo is already there
}
function getPopupFieldInfo(layer, fieldName) {
    const featureReduction = layer.featureReduction;
    return featureReduction.popupTemplate.fieldInfos.find((fieldInfo) => fieldInfo.fieldName === fieldName);
}
function getFormat(aggregateField, layer) {
    const statsField = aggregateField.onStatisticField;
    const statsExpr = aggregateField.onStatisticExpression;
    const isSum = aggregateField.statisticType === "sum";
    const isCount = aggregateField.statisticType === "count";
    const field = getLayerField(layer, statsField);
    const isInt = isCount ||
        (statsExpr && isSum) ||
        (field && ["small-integer", "big-integer", "integer", "long", "number"].indexOf(field.type) > -1);
    const isDouble = field && ["single", "double"].indexOf(field.type) > -1;
    return isDouble
        ? {
            digitSeparator: true,
            places: 1
        }
        : isInt
            ? {
                digitSeparator: true
            }
            : undefined;
}

const arcgisAggregationCss = ":host{height:100%}.flow{height:100%}.panel{height:100%}.toggle{background-color:white;padding:15px 10px 5px 10px}";

const ArcgisAggregation = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisAggregationStyleClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationStyleClick", 7);
        this.arcgisAggregationClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationClose", 7);
        this.arcgisAggregationChanged = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationChanged", 7);
        this.arcgisAggregationError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationError", 7);
        this.tileNodes = [];
        this.lastFeatureReduction = [];
        this.view = undefined;
        this.layer = undefined;
        this.portal = undefined;
        this.config = undefined;
        this.hideLayerTitle = false;
        this.options = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Set focus on component
     */
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        const [strings, currentLanguage] = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement);
        this.strings = strings;
        this.locale = currentLanguage;
        const [popupClusters, popupUtils, binLevel, clusterLabelCreator, binLabelCreator, AggregateField, FieldInfo, pieChartCreator, colorCreator, SimpleRenderer] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__.l)([
            "esri/smartMapping/popup/clusters",
            "esri/support/popupUtils",
            "esri/smartMapping/heuristics/binLevel",
            "esri/smartMapping/labels/clusters",
            "esri/smartMapping/labels/bins",
            "esri/layers/support/AggregateField",
            "esri/popup/FieldInfo",
            "esri/smartMapping/renderers/pieChart",
            "esri/smartMapping/renderers/color",
            "esri/renderers/SimpleRenderer"
        ]);
        this.modules = {
            popupClusters,
            popupUtils,
            binLevel,
            clusterLabelCreator,
            binLabelCreator,
            AggregateField,
            FieldInfo,
            pieChartCreator,
            colorCreator,
            SimpleRenderer
        };
        const { view, layer } = this;
        this.props = {
            view,
            layer
        };
    }
    componentDidLoad() {
        var _a;
        const { props, modules } = this;
        const { layer } = props;
        const { AggregateField } = modules;
        const featureReduction = layer.featureReduction;
        if (featureReduction && !((_a = featureReduction.fields) === null || _a === void 0 ? void 0 : _a.length)) {
            // we need at least one field
            const aggregateField = new AggregateField({
                name: "aggregateCount",
                onStatisticField: undefined,
                alias: "aggregateCount",
                statisticType: "count",
                visible: true
            });
            layer.featureReduction.fields = [aggregateField];
        }
        requestAnimationFrame(() => this.flowItemNode.setFocus());
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { layer, options } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { class: "flow", dir: (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement), ref: (node) => (this.flowNode = node) }, layer.featureEffect ? this.renderMsg() : this.renderContent(), (options === AggregationType.CLUSTERING ||
            options === AggregationType.CHART_CLUSTERING) &&
            this.renderClusteringOptions(), options === AggregationType.BINNING && this.renderBinningOptions())));
    }
    renderContent() {
        var _a, _b, _c;
        const { props, hideLayerTitle, config, flowItemNode, tileNodes, strings } = this;
        const { layer } = props;
        const featureReduction = layer.featureReduction;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        const generalProps = { flowItemNode, strings, config };
        const { renderer } = layer;
        const isUniqueValue = renderer.type === "unique-value";
        const isMultiFieldTypes = isUniqueValue && !!renderer.field2;
        const isHeatmap = renderer.type === "heatmap";
        const usesArcade = !!renderer.valueExpression;
        const isClassedColor = renderer.type === "class-breaks" && ((_a = renderer.authoringInfo) === null || _a === void 0 ? void 0 : _a.type) === "class-breaks-color";
        const infosCount = isUniqueValue
            ? (_b = renderer.uniqueValueInfos) === null || _b === void 0 ? void 0 : _b.length
            : isClassedColor
                ? (_c = renderer.classBreakInfos) === null || _c === void 0 ? void 0 : _c.length
                : 0;
        const allowClustering = !isHeatmap && !isMultiFieldTypes;
        const allowChart = (isUniqueValue || isClassedColor) && infosCount <= 10 && !isMultiFieldTypes && !usesArcade;
        const aggregationType = getAggregationType(layer);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.aggregation, description: !hideLayerTitle ? layer.title : undefined, class: {
                panel: true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.C.rtl]: rtl
            }, closable: true, onCalciteFlowItemClose: () => {
                this.arcgisAggregationClose.emit();
            }, ref: (node) => {
                this.flowItemNode = node;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "toggle" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between" }, strings.enableAggregation, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: !!featureReduction, label: strings.enableAggregation, onCalciteSwitchChange: (event) => this.handleToggleClustering(event), ref: (node) => (this.switchNode = node) }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, allowClustering && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-aggregation-tile", { props: Object.assign({ title: strings.clustering, imagePath: (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/arcgis-aggregation-thumbnails/clustering.jpg`), moreInfo: strings.info.clustering, helpId: "120003927" }, generalProps), selected: aggregationType === "cluster", ref: (node) => (tileNodes["cluster"] = node), onArcgisAggregationTileSelect: async () => {
                await this.enableAggregation("cluster");
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }, onArcgisAggregationTileOptions: () => {
                this.options = AggregationType.CLUSTERING;
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } })), allowChart && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-aggregation-tile", { props: Object.assign({ title: strings.chartClustering, imagePath: (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/arcgis-aggregation-thumbnails/chartClustering.jpg`), moreInfo: strings.info.chartClustering, helpId: "120003927" }, generalProps), selected: aggregationType === "pie-chart", ref: (node) => (tileNodes["pie-chart"] = node), onArcgisAggregationTileSelect: async () => {
                await this.enableAggregation("pie-chart");
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }, onArcgisAggregationTileOptions: () => {
                this.options = AggregationType.CHART_CLUSTERING;
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } })), ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-aggregation-tile", { props: Object.assign({ title: strings.binning, imagePath: (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.a)(`./assets/arcgis-aggregation-thumbnails/binning.jpg`), moreInfo: strings.info.binning, helpId: "120003926" }, generalProps), selected: aggregationType === "binning", ref: (node) => (tileNodes["binning"] = node), onArcgisAggregationTileSelect: async () => {
                await this.enableAggregation("binning");
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }, onArcgisAggregationTileOptions: () => {
                this.options = AggregationType.BINNING;
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } })))));
    }
    renderMsg() {
        const { layer, hideLayerTitle, strings } = this;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.aggregation, description: !hideLayerTitle ? layer.title : undefined, class: {
                panel: true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.C.rtl]: rtl
            }, closable: true, onCalciteFlowItemClose: () => {
                this.arcgisAggregationClose.emit();
            }, ref: (node) => {
                this.flowItemNode = node;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tip", { "non-dismissible": true }, strings.cluster.leNotSupportedMessage)));
    }
    renderClusteringOptions() {
        const { props, hideLayerTitle, portal, config, flowNode, strings, locale } = this;
        const { layer, view } = props;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-aggregation-clustering", { view: view, layer: layer, portal: portal, config: config, flowNode: flowNode, hideLayerTitle: hideLayerTitle, strings: strings, currentLanguage: locale, onArcgisAggregationClusteringChange: () => {
                this.arcgisAggregationChanged.emit();
            }, onArcgisAggregationClusteringDismissedChange: () => { }, onCalcitePanelBackClick: () => {
                this.options = undefined;
            } }));
    }
    renderBinningOptions() {
        const { props, hideLayerTitle, portal, config, flowNode, strings, locale } = this;
        const { layer, view } = props;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-aggregation-binning", { view: view, layer: layer, portal: portal, config: config, flowNode: flowNode, hideLayerTitle: hideLayerTitle, strings: strings, currentLanguage: locale, onArcgisAggregationBinningChange: () => this.arcgisAggregationChanged.emit(), onArcgisAggregationBinningStyleClick: () => this.arcgisAggregationStyleClick.emit(), onArcgisAggregationBinningDismissedChange: () => { }, onCalcitePanelBackClick: () => {
                this.options = undefined;
            } }));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    async handleToggleClustering(event) {
        if (event.currentTarget.checked) {
            await this.enableAggregation("default");
        }
        else {
            this.disableAggregation();
        }
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    async enableAggregation(type) {
        const { props, flowItemNode } = this;
        const { layer } = props;
        const { renderer } = layer;
        const isUniqueValue = renderer.type === "unique-value";
        const isMultiFieldTypes = isUniqueValue && !!renderer.field2;
        const isHeatmap = renderer.type === "heatmap";
        if (type === "default" &&
            this.lastFeatureReductionType &&
            this.lastFeatureReduction[this.lastFeatureReductionType]) {
            layer.featureReduction = this.lastFeatureReduction[this.lastFeatureReductionType];
            layer.featureReduction = layer.featureReduction.clone();
            this.arcgisAggregationChanged.emit();
        }
        else {
            if (type === "default") {
                if (!isHeatmap && !isMultiFieldTypes) {
                    type = "cluster";
                }
                else {
                    type = "binning";
                }
            }
            // save what we have now
            const currentType = getAggregationType(layer);
            if (currentType) {
                this.lastFeatureReduction[currentType] = layer.featureReduction;
            }
            if (this.lastFeatureReduction[type]) {
                layer.featureReduction = this.lastFeatureReduction[type];
                layer.featureReduction = layer.featureReduction.clone();
                this.arcgisAggregationChanged.emit();
            }
            else {
                try {
                    flowItemNode.loading = true;
                    if (type === "binning") {
                        await this.createBinning();
                    }
                    else {
                        await this.createCluster(type);
                    }
                    flowItemNode.loading = false;
                    layer.featureReduction = layer.featureReduction.clone();
                    this.arcgisAggregationChanged.emit();
                }
                catch (e) {
                    flowItemNode.loading = false;
                    this.arcgisAggregationError.emit({
                        message: "Aggregation style could not be changed.",
                        type: "warning"
                    });
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                }
            }
        }
    }
    async createCluster(type) {
        var _a, _b;
        const { props, switchNode, tileNodes, modules } = this;
        const { layer, view } = props;
        const { popupClusters, clusterLabelCreator, pieChartCreator } = modules;
        const lastFeatureReduction = layer.featureReduction;
        try {
            const labelSchemes = type === "cluster" &&
                (await clusterLabelCreator.getLabelSchemes({
                    layer: layer,
                    renderer: layer.renderer,
                    view: view
                }));
            layer.featureReduction = {
                type: "cluster",
                clusterMinSize: ((_a = labelSchemes === null || labelSchemes === void 0 ? void 0 : labelSchemes.primaryScheme) === null || _a === void 0 ? void 0 : _a.clusterMinSize) || clusteringSizeMinVal,
                clusterMaxSize: clusteringSizeMaxInitialVal,
                clusterRadius: clusteringRadiusInitialVal,
                labelsVisible: type === "cluster",
                labelingInfo: (_b = labelSchemes === null || labelSchemes === void 0 ? void 0 : labelSchemes.primaryScheme) === null || _b === void 0 ? void 0 : _b.labelingInfo
            };
            let result;
            if (type === "pie-chart") {
                // for chart clustering create a pie-chart renderer now
                result = await pieChartCreator.createRendererForClustering({ layer });
                layer.featureReduction.renderer = result.renderer;
                layer.featureReduction.fields = layer.featureReduction.fields.concat(result.fields);
            }
            const template = await popupClusters.getTemplates({
                renderer: layer.renderer,
                layer: layer
            });
            if (type === "cluster") {
                const popupTemplate = template.primaryTemplate.value;
                layer.featureReduction.popupTemplate = popupTemplate;
            }
            else {
                // pie-chart
                const popupTemplate = template.secondaryTemplates[0].value;
                layer.featureReduction.popupTemplate = popupTemplate;
                // add the fields from the renderer to the popup as well
                result.fields.forEach((aggregateField) => addPopupField(aggregateField, layer, modules));
            }
            return Promise.resolve();
        }
        catch (e) {
            layer.featureReduction = lastFeatureReduction;
            if (layer.featureReduction) {
                tileNodes[getAggregationType(layer)].setFocus();
            }
            else {
                switchNode.setFocus();
            }
            return Promise.reject();
        }
    }
    async createBinning() {
        var _a, _b;
        const { props, switchNode, tileNodes, modules } = this;
        const { layer, view } = props;
        const { popupUtils, binLevel, binLabelCreator, AggregateField, colorCreator } = modules;
        const lastFeatureReduction = layer.featureReduction;
        try {
            // create the feature reduction with a transparent renderer
            // so we don't see points flashing on the map
            const _binLevel = binLevel;
            const fixedBinLevel = await _binLevel({ view } /* as __esri.binLevelBinLevelParams */);
            layer.featureReduction = {
                type: "binning",
                fixedBinLevel: fixedBinLevel || 1
            };
            if (!((_a = layer.featureReduction.fields) === null || _a === void 0 ? void 0 : _a.length)) {
                // create count field
                const aggregateField = new AggregateField({
                    name: "aggregateCount",
                    onStatisticField: undefined,
                    alias: "aggregateCount",
                    statisticType: "count",
                    visible: true
                });
                layer.featureReduction.fields = [aggregateField];
            }
            const result = await colorCreator.createContinuousRenderer({
                layer,
                view: view,
                field: "aggregateCount",
                outlineOptimizationEnabled: true,
                sizeOptimizationEnabled: true,
                defaultSymbolEnabled: false,
                forBinning: true
            });
            layer.featureReduction.renderer = result.renderer;
            // layer needs to have the featureReduction + renderer before this can be called
            const labelSchemes = await binLabelCreator.getLabelSchemes({
                layer: layer
            });
            layer.featureReduction.labelingInfo = (_b = labelSchemes === null || labelSchemes === void 0 ? void 0 : labelSchemes.primaryScheme) === null || _b === void 0 ? void 0 : _b.labelingInfo;
            layer.featureReduction.labelsVisible = true;
            const fieldNames = layer.featureReduction.fields.map((aggregateField) => aggregateField.onStatisticField);
            const popupTemplate = popupUtils.createPopupTemplateForFeatureReduction({
                featureReduction: layer.featureReduction,
                fields: layer.fields.filter((field) => fieldNames.indexOf(field.name) > -1)
            });
            layer.featureReduction.popupTemplate = popupTemplate;
            return Promise.resolve();
        }
        catch (e) {
            layer.featureReduction = lastFeatureReduction;
            if (layer.featureReduction) {
                tileNodes[getAggregationType(layer)].setFocus();
            }
            else {
                switchNode.setFocus();
            }
            return Promise.reject();
        }
    }
    disableAggregation() {
        const { props } = this;
        const { layer } = props;
        const aggregationType = getAggregationType(layer);
        this.lastFeatureReduction[aggregationType] = layer.featureReduction;
        this.lastFeatureReductionType = aggregationType;
        layer.featureReduction = null;
        this.arcgisAggregationChanged.emit();
    }
    static get assetsDirs() { return ["assets"]; }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregation.style = arcgisAggregationCss;

const arcgisAggregationBinningCss = ".block-section.sc-arcgis-aggregation-binning{padding:0 10px}.block-content.sc-arcgis-aggregation-binning{padding-top:10px}.slider-title-wrapper.sc-arcgis-aggregation-binning{background-color:var(--arcgis-app-background);border-bottom:1px solid var(--arcgis-app-border);padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing)}.slider-div.sc-arcgis-aggregation-binning{display:flex;align-items:center;justify-content:space-between;flex-flow:row wrap}.slider-heading.sc-arcgis-aggregation-binning{display:inline-block;padding:var(--arcgis-app-cap-spacing-half) 0;font-size:var(--arcgis-app-font-size-0)}.slider-label.sc-arcgis-aggregation-binning{display:inline-block;padding:var(--arcgis-app-cap-spacing-eighth) 0;font-size:var(--arcgis-app-font-size--1);order:2}.slider-slider.sc-arcgis-aggregation-binning{display:inline-block;width:100%;order:1}.btn-section.sc-arcgis-aggregation-binning{background-color:var(--arcgis-app-background)}.btn.sc-arcgis-aggregation-binning{background:var(--arcgis-app-background-clear);border:none;border-bottom:solid 1px var(--arcgis-app-border);color:var(--arcgis-app-font-color);display:flex;align-items:center;justify-content:space-between;padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing);cursor:pointer;width:100%;transition:background-color var(--arcgis-app-animation-time-fast) var(--arcgis-app-easing-function), border-color var(--arcgis-app-animation-time-fast) var(--arcgis-app-easing-function)}.btn.sc-arcgis-aggregation-binning:hover{background-color:var(--arcgis-app-background-hover);border-color:var(--arcgis-app-border-hover)}.btn-text.sc-arcgis-aggregation-binning{font-family:var(--arcgis-app-font-family);font-size:var(--arcgis-app-font-size-0)}.style-button-div.sc-arcgis-aggregation-binning{background-color:white;padding:10px}";

const ArcgisAggregationBinning = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisAggregationBinningChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationBinningChange", 7);
        this.arcgisAggregationBinningDismissedChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationBinningDismissedChange", 7);
        this.arcgisAggregationBinningStyleClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationBinningStyleClick", 7);
        this.calcitePanelBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "calcitePanelBackClick", 7);
        this.internalChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalChange", 7);
        this.closeLabelPopovers = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeLabelPopovers", 7);
        this.closePopupPopovers = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
        this.closeAttributePopovers = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeAttributePopovers", 7);
        this.disableSizeSlider = false;
        this.onBinSizeChange = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_6__.d)(async (newValue) => {
            const { layer, view, modules } = this;
            const { colorCreator, AggregateField } = modules;
            const featureReduction = layer.featureReduction;
            featureReduction.fixedBinLevel = newValue;
            // new renderer
            const binning = layer.featureReduction;
            let field = binning.fields.find((aggregateField) => aggregateField.statisticType === "count");
            if (!field) {
                field = new AggregateField({
                    name: "aggregateCount",
                    onStatisticField: undefined,
                    alias: "aggregateCount",
                    statisticType: "count",
                    visible: true
                });
                layer.featureReduction.fields.push(field);
            }
            const result = await colorCreator.createContinuousRenderer({
                layer,
                view: view,
                field: field.name,
                outlineOptimizationEnabled: true,
                sizeOptimizationEnabled: true,
                defaultSymbolEnabled: false,
                forBinning: true
            });
            layer.featureReduction.renderer = result.renderer;
            this.internalChange.emit();
        }, 300);
        this.view = undefined;
        this.layer = undefined;
        this.portal = undefined;
        this.config = undefined;
        this.flowNode = undefined;
        this.strings = undefined;
        this.currentLanguage = undefined;
        this.hideLayerTitle = false;
    }
    // clone featureReduction to update map
    internalChangeHandler() {
        const { layer } = this;
        const featureReduction = layer.featureReduction;
        layer.featureReduction = featureReduction.clone();
        this.arcgisAggregationBinningChange.emit();
    }
    //--------------------------------------------------------------------------
    //
    //  public calls
    //
    //--------------------------------------------------------------------------
    // Public Methods
    async done() {
        this.closePopovers();
    }
    async setFocus() {
        this.flowItemNode.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        // only valid for point
        this.layerGeometryType = await (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.h)(this.layer);
        const [AggregateField, colorCreator] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__.l)([
            "esri/layers/support/AggregateField",
            "esri/smartMapping/renderers/color"
        ]);
        this.modules = {
            AggregateField,
            colorCreator
        };
    }
    componentDidLoad() {
        setTimeout(() => requestAnimationFrame(() => this.flowItemNode.setFocus()), 200);
    }
    componentDidUpdate() {
        //this.internalChange.emit();
    }
    disconnectedCallback() {
        this.closePopovers();
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { layer, strings, hideLayerTitle } = this;
        //const featureReduction = layer.featureReduction as any; //__esri.FeatureReductionCluster;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.binning, description: !hideLayerTitle ? layer.title : undefined, onCalciteFlowItemBack: () => {
                this.calcitePanelBackClick.emit();
                //this.closePopovers();
            }, ref: (node) => (this.flowItemNode = node) }, this.renderBinSize(), this.renderFieldsBtn(), this.renderLabelBtn(), this.renderPopupBtn(), this.renderGoToStyle())));
    }
    renderBinSize() {
        var _a;
        const { layer, strings } = this;
        // need to switch labels back in rtl
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        const featureReduction = layer.featureReduction;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-title-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-heading" }, strings.bin.binSizeTitle), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-div" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.bin.large : strings.bin.small), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { class: "slider-slider", min: 1, max: 9, value: 10 - ((_a = featureReduction.fixedBinLevel) !== null && _a !== void 0 ? _a : 3), step: 1, minLabel: strings.bin.binSizeTitle, onCalciteSliderInput: (event) => {
                const slider = event.target;
                this.onBinSizeChange(10 - slider.value);
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.bin.small : strings.bin.large))));
    }
    renderFieldsBtn() {
        const { strings } = this;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "btn-section" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "btn", onClick: (event) => this.addFieldsPanel(event) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "btn-text" }, strings.bin.editAttributes), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "btn-icon" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: rtl ? "chevron-left" : "chevron-right" })))));
    }
    renderLabelBtn() {
        const { strings } = this;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "btn-section" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "btn", onClick: (event) => this.addLabelPanel(event) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "btn-text" }, strings.bin.editLabel), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "btn-icon" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: rtl ? "chevron-left" : "chevron-right" })))));
    }
    renderPopupBtn() {
        const { strings } = this;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "btn-section" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "btn", onClick: (event) => this.addPopupPanel(event) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "btn-text" }, strings.bin.editPopups), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "btn-icon" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: rtl ? "chevron-left" : "chevron-right" })))));
    }
    renderGoToStyle() {
        const { strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "style-button-div" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { alignment: "center", appearance: "transparent", scale: "m", width: "full", class: "style-button", onClick: () => this.arcgisAggregationBinningStyleClick.emit() }, strings.bin.editBinStyle)));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    closePopovers() {
        this.closeAttributePopovers.emit();
        this.closeLabelPopovers.emit();
        this.closePopupPopovers.emit();
    }
    addFieldsPanel(event) {
        event.stopPropagation();
        this.closePopovers();
        const { layer, view, currentLanguage, strings, flowNode, hideLayerTitle } = this;
        const fieldsNode = document.createElement("arcgis-aggregation-fields");
        fieldsNode.lang = currentLanguage;
        fieldsNode.layer = layer;
        fieldsNode.mapView = view;
        fieldsNode.strings = strings;
        fieldsNode.currentLanguage = currentLanguage;
        fieldsNode.hideLayerTitle = hideLayerTitle;
        fieldsNode.flowNode = flowNode;
        fieldsNode.addEventListener("arcgisAggregationFieldsChange", () => {
            this.internalChange.emit();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        });
        flowNode.appendChild(fieldsNode);
    }
    addLabelPanel(event) {
        const { layer, view, portal, config, currentLanguage, strings, flowNode, hideLayerTitle } = this;
        event.stopPropagation();
        this.closePopovers();
        const labelFlowItem = document.createElement("calcite-flow-item");
        //labelFlowItem.id = "labelFlowItem_Id";
        labelFlowItem.heading = strings.bin.labelFeaturesHeading;
        labelFlowItem.description = !hideLayerTitle ? layer.title : undefined;
        const calciteFab = document.createElement("calcite-fab");
        calciteFab.icon = "plus";
        calciteFab.slot = "fab";
        calciteFab.scale = "s";
        calciteFab.appearance = "outline-fill";
        calciteFab.kind = "neutral";
        calciteFab.label = strings.bin.labelFab;
        calciteFab.text = strings.bin.labelFab;
        calciteFab.textEnabled = true;
        labelFlowItem.appendChild(calciteFab);
        const labelComponent = document.createElement("arcgis-label");
        labelComponent.lang = currentLanguage;
        labelComponent.layer = layer;
        labelComponent.mapView = view;
        labelComponent.portal = portal;
        labelComponent.config = config;
        labelComponent.layerDisplayType = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_5__.l.cluster;
        labelComponent.calciteFlowProps = { calciteFlowItem: labelFlowItem, calciteFab: calciteFab };
        labelComponent.addEventListener("labelUpdated", () => {
            this.internalChange.emit();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        });
        labelFlowItem.appendChild(labelComponent);
        flowNode.appendChild(labelFlowItem);
        setTimeout(() => requestAnimationFrame(() => labelFlowItem.setFocus()), 200);
    }
    addPopupPanel(event) {
        const { layer, view, portal, config, currentLanguage, strings, flowNode, hideLayerTitle } = this;
        event.stopPropagation();
        this.closePopovers();
        const popupFlowItem = document.createElement("calcite-flow-item");
        popupFlowItem.heading = strings.bin.popupsHeading;
        popupFlowItem.description = !hideLayerTitle ? layer.title : undefined;
        const calciteFab = document.createElement("calcite-fab");
        calciteFab.icon = "plus";
        calciteFab.slot = "fab";
        calciteFab.scale = "s";
        calciteFab.appearance = "outline-fill";
        calciteFab.kind = "neutral";
        calciteFab.label = strings.bin.popupFab;
        calciteFab.text = strings.bin.popupFab;
        calciteFab.textEnabled = true;
        popupFlowItem.appendChild(calciteFab);
        const popupComponent = document.createElement("arcgis-popup");
        popupComponent.lang = currentLanguage;
        popupComponent.layer = layer;
        popupComponent.mapView = view;
        popupComponent.portal = portal;
        popupComponent.config = config;
        popupComponent.layerDisplayType = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_5__.l.cluster;
        popupComponent.calciteFlowProps = {
            flow: flowNode,
            calciteFab: calciteFab,
            calciteFlowItem: popupFlowItem
        };
        popupComponent.addEventListener("popupUpdated", () => {
            this.internalChange.emit();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        });
        popupFlowItem.appendChild(popupComponent);
        flowNode.appendChild(popupFlowItem);
        popupFlowItem.setFocus();
        setTimeout(() => requestAnimationFrame(() => popupFlowItem.setFocus()), 200);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregationBinning.style = arcgisAggregationBinningCss;

const arcgisAggregationClusteringCss = ".block-section.sc-arcgis-aggregation-clustering{padding:0 10px}.block-content.sc-arcgis-aggregation-clustering{padding-top:10px}.symbol-button.sc-arcgis-aggregation-clustering{border:solid 1px var(--arcgis-app-border);display:flex;justify-content:space-between}.symbol-button.selected.sc-arcgis-aggregation-clustering{border-color:var(--calcite-color-brand);border-width:1px}.symbol-button.sc-arcgis-aggregation-clustering:hover{background-color:var(--arcgis-app-background-hover);border-color:var(--arcgis-app-border-hover)}.symbol-button.sc-arcgis-aggregation-clustering:focus{border-color:var(--calcite-color-brand);border-width:2px}.symbol.sc-arcgis-aggregation-clustering{padding:5px}.symbol-icon.sc-arcgis-aggregation-clustering{padding:6px}.slider-title-wrapper.sc-arcgis-aggregation-clustering{background-color:var(--arcgis-app-background);border-bottom:1px solid var(--arcgis-app-border);padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing)}.slider-div.sc-arcgis-aggregation-clustering{display:flex;align-items:center;justify-content:space-between;flex-flow:row wrap}.slider-heading.sc-arcgis-aggregation-clustering{display:inline-block;padding:var(--arcgis-app-cap-spacing-half) 0;font-size:var(--arcgis-app-font-size-0)}.slider-label.sc-arcgis-aggregation-clustering{display:inline-block;padding:var(--arcgis-app-cap-spacing-eighth) 0;font-size:var(--arcgis-app-font-size--1);order:2}.slider-slider.sc-arcgis-aggregation-clustering{display:inline-block;width:100%;order:1}.cluster-btn-section.sc-arcgis-aggregation-clustering{background-color:var(--arcgis-app-background)}.cluster-btn.sc-arcgis-aggregation-clustering{background:var(--arcgis-app-background-clear);border:none;border-bottom:solid 1px var(--arcgis-app-border);color:var(--arcgis-app-font-color);display:flex;align-items:center;justify-content:space-between;padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing);cursor:pointer;width:100%;transition:background-color var(--arcgis-app-animation-time-fast) var(--arcgis-app-easing-function), border-color var(--arcgis-app-animation-time-fast) var(--arcgis-app-easing-function)}.cluster-btn.sc-arcgis-aggregation-clustering:hover{background-color:var(--arcgis-app-background-hover);border-color:var(--arcgis-app-border-hover)}.cluster-btn.sc-arcgis-aggregation-clustering:focus{border:2px solid var(--calcite-color-brand)}.cluster-btn-text.sc-arcgis-aggregation-clustering{font-family:var(--arcgis-app-font-family);font-size:var(--arcgis-app-font-size-0)}";

const ArcgisAggregationClustering = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisAggregationClusteringChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationClusteringChange", 7);
        this.arcgisAggregationClusteringDismissedChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationClusteringDismissedChange", 7);
        this.calcitePanelBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "calcitePanelBackClick", 7);
        this.internalChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalChange", 7);
        this.closeLabelPopovers = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeLabelPopovers", 7);
        this.closePopupPopovers = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closePopupPopovers", 7);
        this.closeAttributePopovers = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeAttributePopovers", 7);
        this.disableSizeSlider = false;
        this.view = undefined;
        this.layer = undefined;
        this.portal = undefined;
        this.config = undefined;
        this.flowNode = undefined;
        this.strings = undefined;
        this.currentLanguage = undefined;
        this.hideLayerTitle = false;
        this.symbolSelected = false;
    }
    // clone featureReduction to update map
    internalChangeHandler() {
        const { layer } = this;
        const featureReduction = layer.featureReduction;
        layer.featureReduction = featureReduction.clone();
        this.arcgisAggregationClusteringChange.emit();
    }
    //--------------------------------------------------------------------------
    //
    //  public calls
    //
    //--------------------------------------------------------------------------
    // Public Methods
    async done() {
        this.closePopovers();
    }
    async setFocus() {
        this.flowItemNode.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        // only valid for point
        this.layerGeometryType = await (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.h)(this.layer);
        const [popupUtils, symbolUtils, cimSymbolUtils, Color, SimpleMarkerSymbol, SimpleLineSymbol] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__.l)([
            "esri/smartMapping/popup/support/utils",
            "esri/symbols/support/symbolUtils",
            "esri/symbols/support/cimSymbolUtils",
            "esri/Color",
            "esri/symbols/SimpleMarkerSymbol",
            "esri/symbols/SimpleLineSymbol"
        ]);
        this.modules = {
            symbolUtils,
            cimSymbolUtils,
            Color,
            SimpleMarkerSymbol,
            SimpleLineSymbol
        };
        // disable size range slider for "size" renderer. undocumented function.
        const visualVariables = popupUtils.getPrimaryVisualVariables(this.layer.renderer);
        this.disableSizeSlider = visualVariables.some((variable) => {
            return (variable === null || variable === void 0 ? void 0 : variable.type) === "size";
        });
    }
    componentDidLoad() {
        setTimeout(() => requestAnimationFrame(() => this.flowItemNode.setFocus()), 200);
    }
    componentDidUpdate() {
        //this.internalChange.emit();
    }
    disconnectedCallback() {
        this.closePopovers();
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { layer, strings, hideLayerTitle } = this;
        //const featureReduction = layer.featureReduction as any; //__esri.FeatureReductionCluster;
        const showSymbol = isRendererAutoGenerated(layer);
        const aggregationType = getAggregationType(layer);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.clustering, description: !hideLayerTitle ? layer.title : undefined, onCalciteFlowItemBack: () => {
                this.calcitePanelBackClick.emit();
                //this.closePopovers();
            }, ref: (node) => (this.flowItemNode = node) }, showSymbol && this.renderSymbol(), aggregationType === "pie-chart" && this.renderShape(), this.renderClusterRadius(), this.renderClusterSize(), this.renderFieldsBtn(), this.renderLabelBtn(), this.renderPopupBtn())));
    }
    renderSymbol() {
        const { layer, strings } = this;
        const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
        const hasSymbol = !!featureReduction.symbol;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block-section", { text: strings.cluster.overrideSymbol, open: hasSymbol, "toggle-display": "switch", class: "block-section", onCalciteBlockSectionToggle: (event) => {
                this.handleToggleSymbol(event);
            } }, this.renderSymbolContent()));
    }
    renderSymbolContent() {
        const { layer, symbolSelected, strings } = this;
        const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
        if (!featureReduction.symbol) {
            return;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "block-content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.symbolStyle, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `symbol-button ${symbolSelected ? `selected` : ``}`, tabindex: "0", role: "button", "aria-label": strings.symbolStyle, onClick: (event) => this.openSymbolStylerPopover(event) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "symbol", ref: (node) => this.createSymbolPreview(node) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "pencil", class: "symbol-icon" })))));
    }
    renderShape() {
        var _a;
        const { layer, strings } = this;
        // need to switch labels back in rtl
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-title-wrapper" }, " ", (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.cluster.shape, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-div" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.cluster.donut : strings.cluster.pie), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { class: "slider-slider", min: 0, max: Math.max(0.9, featureReduction.renderer.holePercentage), value: (_a = featureReduction.renderer.holePercentage) !== null && _a !== void 0 ? _a : 0, step: 0.1, minLabel: strings.cluster.shape, onCalciteSliderInput: (event) => {
                const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
                const slider = event.target;
                featureReduction.renderer.holePercentage = slider.value;
                this.internalChange.emit();
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.cluster.pie : strings.cluster.donut)))));
    }
    renderClusterRadius() {
        var _a;
        const { layer, strings } = this;
        // need to switch labels back in rtl
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        const featureReduction = layer.featureReduction;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-title-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-heading" }, strings.cluster.radiusTitle), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-div" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.cluster.high : strings.cluster.low), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { class: "slider-slider", min: clusteringRadiusMinVal, max: clusteringRadiusMaxVal, value: (_a = featureReduction.clusterRadius) !== null && _a !== void 0 ? _a : clusteringRadiusInitialVal, step: 1, minLabel: strings.cluster.radiusTitle, onCalciteSliderInput: (event) => {
                const featureReduction = layer.featureReduction;
                const slider = event.target;
                featureReduction.clusterRadius = slider.value;
                this.internalChange.emit();
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.cluster.low : strings.cluster.high))));
    }
    renderClusterSize() {
        var _a, _b;
        const { layer, strings, disableSizeSlider } = this;
        // need to switch labels back in rtl
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        const featureReduction = layer.featureReduction;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-title-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-heading" }, strings.cluster.sizeTitle), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-div" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.cluster.max : strings.cluster.min), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { class: "slider-slider", min: clusteringSizeMinVal, max: clusteringSizeMaxVal, minValue: (_a = featureReduction.clusterMinSize) !== null && _a !== void 0 ? _a : clusteringSizeMinVal, maxValue: (_b = featureReduction.clusterMaxSize) !== null && _b !== void 0 ? _b : clusteringSizeMaxVal, step: 1, disabled: disableSizeSlider, minLabel: `${strings.cluster.min} ${strings.cluster.sizeTitle}`, maxLabel: `${strings.cluster.max} ${strings.cluster.sizeTitle}`, onCalciteSliderInput: (event) => {
                const featureReduction = layer.featureReduction;
                const slider = event.target;
                featureReduction.clusterMinSize = slider.minValue;
                featureReduction.clusterMaxSize = slider.maxValue;
                this.internalChange.emit();
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("label", { class: "slider-label" }, rtl ? strings.cluster.min : strings.cluster.max))));
    }
    /* renderScaleThreshold(): VNode {
      /
      World
      Continent    1:50,000,000
      Countries - big    1:25,000,000
      Countries - small    1:12,000,000
      States/Provinces    1:6,000,000
      State/Province    1:3,000,000
      Counties    1:1,500,000
      County    1:750,000
      Metropolitan area    1:320,000
      Cities    1:160,000
      City    1:80,000
      Town    1:40,000
      Neighborhood    1:20,000
      Streets    1:10,000
      Street    1:5,000
      /
      const { layer, strings } = this;
      // need to switch labels back in rtl
      const rtl = getElementDir(this.hostElement) === "rtl";
      const featureReduction = layer.featureReduction as any; //__esri.FeatureReductionCluster;
      if (
        featureReduction.visibilityInfo &&
        featureReduction.visibilityInfo.thresholdType !== "scale"
      ) {
        return;
      }
      const worldScale = 295828764;
      const threshold = featureReduction.visibilityInfo?.maxScale || worldScale;
      const scaleStops = [
        worldScale,
        50000000,
        25000000,
        12000000,
        6000000,
        3000000,
        1500000,
        750000,
        320000,
        160000,
        80000,
        40000,
        20000,
        10000,
        5000
      ];
      const findStop = (value: number): number => {
        let index = 0;
        scaleStops.forEach((stop: number, idx: number) => {
          if (idx === 0) {
            if (stop < value) {
              index = 0;
            }
          } else if (idx === scaleStops.length - 1) {
            if (stop >= value) {
              index = scaleStops.length - 1;
            }
          } else {
            if (stop <= value && scaleStops[idx - 1] > value) {
              index = idx - 1 + (scaleStops[idx - 1] - value) / (scaleStops[idx - 1] - stop);
            }
          }
        });
        return index;
      };
      return (
        <div class="slider-title-wrapper">
          <label class="slider-heading">{strings.cluster.scaleThreshold}</label>
          <div class="slider-div">
            <label class="slider-label">
              {rtl ? strings.cluster.streetScaleLabel : <span>&nbsp;</span>}
            </label>
            <calcite-slider
              class="slider-slider"
              min={0}
              max={14}
              value={findStop(threshold)}
              step={0.1}
              minLabel={strings.cluster.scaleThreshold}
              onCalciteSliderInput={(event: CustomEvent) => {
                const slider = event.target as HTMLCalciteSliderElement;
                const value = slider.value as number;
                const stopMin = scaleStops[Math.ceil(value)];
                const stopMax = scaleStops[Math.floor(value)];
                let threshold = Math.round(
                  stopMin + (value - Math.floor(value)) * (stopMax - stopMin)
                );
                console.log("TODO: set scale threshold to", threshold);
                const featureReduction = layer.featureReduction as any; //__esri.FeatureReductionCluster;
                featureReduction.visibilityInfo = { maxScale: threshold, thresholdType: "scale" };
                this.internalChange.emit();
              }}
            ></calcite-slider>
            <label class="slider-label">
              {rtl ? <span>&nbsp;</span> : strings.cluster.streetScaleLabel}
            </label>
          </div>
        </div>
      );
    } */
    renderFieldsBtn() {
        const { strings } = this;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cluster-btn-section" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "cluster-btn", onClick: (event) => this.addFieldsPanel(event), ref: (node) => (this.fieldsButtonNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cluster-btn-text" }, strings.cluster.editClusterAttributes), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cluster-btn-icon" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: rtl ? "chevron-left" : "chevron-right" })))));
    }
    renderLabelBtn() {
        const { strings } = this;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cluster-btn-section" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "cluster-btn", onClick: (event) => this.addLabelPanel(event), ref: (node) => (this.labelsButtonNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cluster-btn-text" }, strings.cluster.editClusterLabel), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cluster-btn-icon" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: rtl ? "chevron-left" : "chevron-right" })))));
    }
    renderPopupBtn() {
        const { strings } = this;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "cluster-btn-section" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { class: "cluster-btn", onClick: (event) => this.addPopupPanel(event), ref: (node) => (this.popupButtonNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cluster-btn-text" }, strings.cluster.editClusterPopups), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "cluster-btn-icon" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: rtl ? "chevron-left" : "chevron-right" })))));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    closePopovers() {
        var _a, _b;
        this.closeAttributePopovers.emit();
        this.closeLabelPopovers.emit();
        this.closePopupPopovers.emit();
        (_b = (_a = this.stylerPopoverNode) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this.stylerPopoverNode);
        this.stylerPopoverNode = null;
    }
    handleToggleSymbol(event) {
        const { layer, modules } = this;
        const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
        const section = event.currentTarget;
        if (section.open) {
            if (this.lastSymbol) {
                featureReduction.symbol = this.lastSymbol;
                this.lastSymbol = undefined;
            }
            else {
                featureReduction.symbol = getDefaultSymbol(modules);
            }
        }
        else {
            this.lastSymbol = featureReduction.symbol;
            featureReduction.symbol = undefined;
        }
        this.internalChange.emit();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    createSymbolPreview(containerNode) {
        const { layer, modules } = this;
        const { symbolUtils } = modules;
        const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
        if (!featureReduction.symbol) {
            return;
        }
        const symbol = featureReduction.symbol;
        const size = symbol.type === "cim" ? 20 : 14;
        symbolUtils
            .renderPreviewHTML(symbol, {
            size,
            symbolConfig: undefined
        })
            .then((node) => {
            containerNode.childNodes.forEach((child) => containerNode.removeChild(child));
            containerNode.appendChild(node);
        });
    }
    async openSymbolStylerPopover(event) {
        const { layer, portal, strings } = this;
        const refElement = findParentNode(event.target, null, "symbol-button");
        if (this.stylerPopoverNode) {
            this.symbolSelected = false;
            this.closePopovers();
            this.stylerPopoverNode = null;
        }
        else {
            this.closePopovers();
            this.symbolSelected = true;
            this.stylerPopoverNode = document.createElement("arcgis-aggregation-symbol-styler-popover");
            this.stylerPopoverNode.props = { layer, portal, strings };
            this.stylerPopoverNode.referenceElement = this.flowItemNode;
            this.stylerPopoverNode.addEventListener("arcgisAggregationSymbolStylerPopoverClose", () => {
                this.closePopovers();
                this.symbolSelected = false;
                // if we do this too early the enter key executes on the focused div
                setTimeout(() => refElement.focus(), 300);
            });
            this.stylerPopoverNode.addEventListener("arcgisAggregationSymbolStylerChange", () => {
                this.internalChange.emit();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            });
            document.body.appendChild(this.stylerPopoverNode);
            this.stylerPopoverNode.setOpen(true);
        }
    }
    addFieldsPanel(event) {
        event.stopPropagation();
        this.closePopovers();
        const { layer, view, currentLanguage, strings, flowNode, hideLayerTitle } = this;
        const fieldsNode = document.createElement("arcgis-aggregation-fields");
        fieldsNode.lang = currentLanguage;
        fieldsNode.layer = layer;
        fieldsNode.mapView = view;
        fieldsNode.strings = strings;
        fieldsNode.currentLanguage = currentLanguage;
        fieldsNode.hideLayerTitle = hideLayerTitle;
        fieldsNode.flowNode = flowNode;
        fieldsNode.addEventListener("arcgisAggregationFieldsChange", () => {
            this.internalChange.emit();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        });
        fieldsNode.addEventListener("arcgisAggregationFieldsBackClick", () => {
            flowNode.removeChild(fieldsNode);
            setTimeout(() => this.fieldsButtonNode.focus(), 300);
        });
        flowNode.appendChild(fieldsNode);
    }
    addLabelPanel(event) {
        const { layer, view, portal, config, currentLanguage, strings, flowNode, hideLayerTitle } = this;
        event.stopPropagation();
        this.closePopovers();
        const labelFlowItem = document.createElement("calcite-flow-item");
        //labelFlowItem.id = "labelFlowItem_Id";
        labelFlowItem.heading = strings.cluster.labelFeaturesHeading;
        labelFlowItem.description = !hideLayerTitle ? layer.title : undefined;
        const calciteFab = document.createElement("calcite-fab");
        calciteFab.icon = "plus";
        calciteFab.slot = "fab";
        calciteFab.scale = "s";
        calciteFab.appearance = "outline-fill";
        calciteFab.kind = "neutral";
        calciteFab.label = strings.cluster.labelFab;
        calciteFab.text = strings.cluster.labelFab;
        calciteFab.textEnabled = true;
        labelFlowItem.appendChild(calciteFab);
        const labelComponent = document.createElement("arcgis-label");
        labelComponent.lang = currentLanguage;
        labelComponent.layer = layer;
        labelComponent.mapView = view;
        labelComponent.portal = portal;
        labelComponent.config = config;
        labelComponent.layerDisplayType = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_5__.l.cluster;
        labelComponent.calciteFlowProps = { calciteFlowItem: labelFlowItem, calciteFab: calciteFab };
        labelComponent.addEventListener("labelUpdated", () => {
            this.internalChange.emit();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        });
        labelFlowItem.appendChild(labelComponent);
        labelFlowItem.addEventListener("calciteFlowItemBack", () => {
            setTimeout(() => this.labelsButtonNode.focus(), 300);
        });
        flowNode.appendChild(labelFlowItem);
        setTimeout(() => requestAnimationFrame(() => labelFlowItem.setFocus()), 200);
    }
    addPopupPanel(event) {
        const { layer, view, portal, config, currentLanguage, strings, flowNode, hideLayerTitle } = this;
        event.stopPropagation();
        this.closePopovers();
        const popupFlowItem = document.createElement("calcite-flow-item");
        popupFlowItem.heading = strings.cluster.popupsHeading;
        popupFlowItem.description = !hideLayerTitle ? layer.title : undefined;
        const calciteFab = document.createElement("calcite-fab");
        calciteFab.icon = "plus";
        calciteFab.slot = "fab";
        calciteFab.scale = "s";
        calciteFab.appearance = "outline-fill";
        calciteFab.kind = "neutral";
        calciteFab.label = strings.cluster.popupFab;
        calciteFab.text = strings.cluster.popupFab;
        calciteFab.textEnabled = true;
        popupFlowItem.appendChild(calciteFab);
        const popupComponent = document.createElement("arcgis-popup");
        popupComponent.lang = currentLanguage;
        popupComponent.layer = layer;
        popupComponent.mapView = view;
        popupComponent.portal = portal;
        popupComponent.config = config;
        popupComponent.layerDisplayType = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_5__.l.cluster;
        popupComponent.calciteFlowProps = {
            flow: flowNode,
            calciteFab: calciteFab,
            calciteFlowItem: popupFlowItem
        };
        popupComponent.addEventListener("popupUpdated", () => {
            this.internalChange.emit();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        });
        popupFlowItem.appendChild(popupComponent);
        popupFlowItem.addEventListener("calciteFlowItemBack", () => {
            setTimeout(() => this.popupButtonNode.focus(), 300);
        });
        flowNode.appendChild(popupFlowItem);
        setTimeout(() => requestAnimationFrame(() => popupFlowItem.setFocus()), 200);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregationClustering.style = arcgisAggregationClusteringCss;

const arcgisAggregationFieldCss = ".section.sc-arcgis-aggregation-field{padding-top:15px}.format.sc-arcgis-aggregation-field{padding-top:20px}";

const ArcgisAggregationField = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisAggregationFieldChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationFieldChange", 7);
        this.onFieldSelect = () => {
            // not for autoGenerated fields
            //this.hasFocus = true;
            const { layer, mapView, aggregateField, fieldPickListSortBy, strings } = this;
            //const dir = getElementDir(this.hostElement);
            //this.closeFilterPopoversHandler();
            const flowItemNode = findParentNode(this.hostElement, "calcite-flow-item");
            const nodeWidth = flowItemNode.getBoundingClientRect().width || 215;
            this.arcgisFieldPickList = document.createElement("arcgis-field-pick-list");
            this.arcgisFieldPickList.popoverProps = {
                placement: "auto",
                offsetDistance: -1 * (nodeWidth + 10),
                offsetSkidding: 0,
                pointerDisabled: true,
                popoverWidth: nodeWidth + 30,
                refElement: flowItemNode
            };
            this.arcgisFieldPickList.fields = this.createPickListFields();
            this.arcgisFieldPickList.layer = layer;
            this.arcgisFieldPickList.mapView = mapView;
            this.arcgisFieldPickList.showFieldInfo = true;
            this.arcgisFieldPickList.showFieldName = false;
            this.arcgisFieldPickList.selectedFields = [aggregateField.onStatisticField];
            this.arcgisFieldPickList.sortBy = fieldPickListSortBy;
            this.arcgisFieldPickList.addEventListener("arcgisFieldPickListDismissed", (event) => {
                var _a, _b;
                event.stopPropagation();
                const selectedField = (_b = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.selectedFields) === null || _b === void 0 ? void 0 : _b[0];
                flowItemNode.disabled = false;
                if (this.arcgisFieldPickList) {
                    document.body.removeChild(this.arcgisFieldPickList);
                    this.arcgisFieldPickList = null;
                    setTimeout(() => {
                        this.fieldNode.setFocus();
                    }, 1);
                }
                if (selectedField) {
                    const { aggregateField } = this;
                    const field = getLayerField(layer, selectedField);
                    // check if we have this field already...
                    const types = getStatsTypes(field);
                    let idxType = 0;
                    let hasAlready = hasFieldAlready(layer, field.name, types[idxType]);
                    while (idxType < types.length && hasAlready) {
                        idxType++;
                        if (types[idxType] === aggregateField.statisticType) {
                            // skip the current one
                            idxType++;
                        }
                        if (idxType < types.length) {
                            hasAlready = hasFieldAlready(layer, field.name, types[idxType]);
                        }
                    }
                    if (hasAlready) {
                        // all statisticTypes already exist for this field; can't change to this field
                        return;
                    }
                    const oldFieldName = aggregateField.name;
                    const type = types[idxType];
                    aggregateField.name = `${field.name}_${type}`;
                    aggregateField.onStatisticField = field.name;
                    aggregateField.alias = `${field.alias || field.name} ${getStatsTypeString(type, strings).toLowerCase()}`;
                    aggregateField.statisticType = type;
                    this.replacePopupField(oldFieldName);
                    this.arcgisAggregationFieldChange.emit();
                } // else user hit cancel or close
            });
            this.arcgisFieldPickList.addEventListener("arcgisFieldPickListSortByChange", (event) => (this.fieldPickListSortBy = event.detail));
            document.body.appendChild(this.arcgisFieldPickList);
            flowItemNode.disabled = true;
        };
        this.mapView = undefined;
        this.layer = undefined;
        this.aggregateField = undefined;
        this.open = false;
        this.strings = undefined;
        this.currentLanguage = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  public calls
    //
    //--------------------------------------------------------------------------
    // Public Methods
    async done() {
        this.closePopovers();
    }
    async setFocus() {
        this.panelNode.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        const [FieldInfo, FieldInfoFormat] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__.l)([
            "esri/popup/FieldInfo",
            "esri/popup/support/FieldInfoFormat"
        ]);
        this.modules = {
            FieldInfo,
            FieldInfoFormat
        };
        // make sure the field exists in the popup
        const { layer, aggregateField, modules } = this;
        let fieldInfo = getPopupFieldInfo(layer, aggregateField.name);
        if (!fieldInfo) {
            addPopupField(aggregateField, layer, modules);
        }
    }
    disconnectedCallback() {
        this.closePopovers();
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        /*
        {
          "name": "FieldName",
          "alias": "The field alias",
          "onStatisticField": "Layer field",
          "onStatisticExpression": {
            "expression": "Arcade expression goes here",
            "returnType": "<string | number>"
          },
          "statisticType": "<count | sum | min | max | mode | avg | stddev | var>",
          "isInferred": <boolean>  // only needed for Online
        }
        */
        const { layer, aggregateField, open } = this;
        const dir = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
        const fieldInfo = getPopupFieldInfo(layer, aggregateField.name);
        const alias = (aggregateField.isAutoGenerated ? fieldInfo.label : aggregateField.alias) ||
            aggregateField.name;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { dir: dir }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { heading: alias, open: open, collapsible: true, ref: (node) => (this.blockNode = node), onCalciteBlockOpen: (event) => {
                const node = event.target;
                this.open = node.open;
            }, onCalciteBlockClose: (event) => {
                const node = event.target;
                this.open = node.open;
            } }, this.renderDropdown(), this.renderFieldSelection(), this.renderTypeSelection(), this.renderResultFieldName(), this.renderFieldAlias(), this.renderFormatting())));
    }
    renderDropdown() {
        const { layer, aggregateField, strings } = this;
        const field = getLayerField(layer, aggregateField.onStatisticField);
        if (aggregateField.isAutoGenerated || !field) {
            return null;
        }
        const dir = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "control" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { dir: dir, placement: "bottom-end", scale: "s", overlayPositioning: "fixed" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { ref: (node) => (this.dropdownActionNode = node), slot: "trigger", scale: "m", text: strings.delete }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "ellipsis" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { onClick: (event) => {
                event.stopPropagation();
                this.removeField();
            }, onKeyDown: (event) => {
                event.stopPropagation();
                if (event.key === " " || event.key === "Enter") {
                    this.removeField();
                }
            } }, strings.delete)))));
    }
    renderFieldSelection() {
        const { aggregateField, strings } = this;
        if (!aggregateField.onStatisticField) {
            // e.g. cluster_count or onStatisticsExpression
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.fields.field), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", kind: "neutral", width: "full", scale: "m", alignment: "icon-end-space-between", iconEnd: "chevron-down", disabled: aggregateField.isAutoGenerated, onClick: () => this.onFieldSelect(), ref: (node) => (this.fieldNode = node) }, aggregateField.onStatisticField)));
    }
    renderTypeSelection() {
        const { layer, aggregateField, strings } = this;
        const field = getLayerField(layer, aggregateField.onStatisticField);
        const isString = (field === null || field === void 0 ? void 0 : field.type) === "string";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.fields.statsType), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", scale: "m", label: strings.fields.statsType, disabled: aggregateField.isAutoGenerated || !field, onCalciteSelectChange: (event) => {
                // disabled for autoGenerated fields
                const node = event === null || event === void 0 ? void 0 : event.target;
                const type = node.selectedOption.value;
                const oldFieldName = aggregateField.name;
                aggregateField.name = `${field.name}_${type}`;
                aggregateField.onStatisticField = field.name;
                aggregateField.alias = `${field.alias || field.name} ${getStatsTypeString(type, strings).toLowerCase()}`;
                aggregateField.statisticType = type;
                this.replacePopupField(oldFieldName);
                this.arcgisAggregationFieldChange.emit();
            } }, !isString && this.renderTypeOption("sum"), !isString && this.renderTypeOption("avg"), !isString && this.renderTypeOption("min"), !isString && this.renderTypeOption("max"), this.renderTypeOption("mode"), aggregateField.statisticType === "count" && this.renderTypeOption("count"))));
    }
    renderTypeOption(type) {
        const { layer, aggregateField, strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: type, label: getStatsTypeString(type, strings), disabled: aggregateField.statisticType !== type &&
                hasFieldAlready(layer, aggregateField.onStatisticField, type), selected: aggregateField.statisticType === type }));
    }
    renderResultFieldName() {
        const { aggregateField, strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.fields.resultFieldName), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", disabled: true, value: aggregateField.name, scale: "m", label: strings.fields.resultFieldName })));
    }
    renderFieldAlias() {
        const { layer, aggregateField, strings } = this;
        const fieldInfo = getPopupFieldInfo(layer, aggregateField.name);
        const alias = (aggregateField.isAutoGenerated ? fieldInfo.label : aggregateField.alias) ||
            aggregateField.name;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "section" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.fields.fieldAlias), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", value: alias, scale: "m", label: strings.fields.fieldAlias, onCalciteInputInput: (event) => {
                const node = event.target;
                let alias = node.value;
                this.blockNode.heading = alias;
                if (!alias) {
                    // let's give the user time to fill it in;
                    // if not we default to something
                    setTimeout(() => {
                        const fieldInfo = getPopupFieldInfo(layer, aggregateField.name);
                        const curAlias = aggregateField.isAutoGenerated
                            ? fieldInfo.label
                            : aggregateField.alias;
                        if (!curAlias) {
                            const field = getLayerField(layer, aggregateField.onStatisticField);
                            alias = `${field.alias || field.name} ${getStatsTypeString(aggregateField.statisticType, strings).toLocaleLowerCase()}`;
                            this.blockNode.heading = alias;
                            node.value = alias;
                        }
                        this.updateAlias(alias);
                    }, 2000);
                }
                else {
                    this.updateAlias(alias);
                }
            } })));
    }
    renderFormatting() {
        const { layer, aggregateField, modules, strings } = this;
        const { FieldInfoFormat } = modules;
        const featureReduction = layer.featureReduction;
        const popupTemplate = featureReduction.popupTemplate;
        const layerField = getLayerField(layer, aggregateField.onStatisticField);
        if ((!layerField && aggregateField.statisticType !== "count") ||
            (layerField === null || layerField === void 0 ? void 0 : layerField.type) === "string") {
            return null;
        }
        let fieldInfo = popupTemplate.fieldInfos.find((fieldInfo) => fieldInfo.fieldName === aggregateField.name);
        fieldInfo.format =
            fieldInfo.format ||
                new FieldInfoFormat({ dijitSeparator: true, places: 0 });
        const isInt = !layerField || ["integer", "small-integer", "big-integer"].indexOf(layerField.type) > -1;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "format" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { scale: "l" }, strings.fields.formatting), !isInt && this.renderSignificantDigits(fieldInfo.format), this.renderThousandSeperator(fieldInfo.format)));
    }
    renderThousandSeperator(format) {
        const { strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between" }, strings.fields.show1000Separator, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: format.digitSeparator, onCalciteSwitchChange: (event) => {
                const node = event === null || event === void 0 ? void 0 : event.target;
                format.digitSeparator = node.checked;
                this.arcgisAggregationFieldChange.emit();
            } }))));
    }
    renderSignificantDigits(format) {
        const { strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.fields.significantDigits, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: strings.fields.significantDigits, onCalciteSelectChange: (event) => {
                const node = event.target;
                format.places = Number(node.selectedOption.value) || 0;
                this.arcgisAggregationFieldChange.emit();
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "0", selected: format.places === 0 }, strings.fields.decimalPlaces0), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: "1", selected: format.places === 1 }, strings.fields.decimalPlaces1), [2, 3, 4, 5, 6, 7, 8].map((x) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: x.toString(), selected: format.places === x }, strings.fields.decimalPlacesN.replace("${num}", `${x}`))))))));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    closePopovers() {
        if (this.arcgisFieldPickList) {
            document.body.removeChild(this.arcgisFieldPickList);
            this.arcgisFieldPickList = null;
        }
    }
    removeField() {
        const { layer, aggregateField } = this;
        const featureReduction = layer.featureReduction;
        const popupTemplate = featureReduction.popupTemplate;
        let idx = popupTemplate.fieldInfos.findIndex((fieldInfo) => fieldInfo.fieldName === aggregateField.name);
        idx >= 0 && popupTemplate.fieldInfos.splice(idx, 1);
        idx = featureReduction.fields.findIndex((af /* __esri.AggregateField */) => af.name === aggregateField.name);
        featureReduction.fields.splice(idx, 1);
        this.arcgisAggregationFieldChange.emit();
    }
    createPickListFields() {
        const { layer, aggregateField } = this;
        const { fields } = layer;
        const layerFields = fields.filter((field) => [
            "small-integer",
            "big-integer",
            "integer",
            "single",
            "double",
            "long",
            "number",
            "string"
        ].indexOf(field.type) > -1);
        return layerFields
            .filter((field) => aggregateField.onStatisticField === field.name || !isFieldDone(layer, field.name))
            .map((field) => {
            return {
                name: field.name,
                alias: field.alias,
                type: field.type
            };
        });
    }
    replacePopupField(oldName) {
        // after changing field or stats types
        // not for autoGenerated fields
        const { layer, aggregateField, modules } = this;
        const { FieldInfo } = modules;
        const featureReduction = layer.featureReduction;
        const { popupTemplate } = featureReduction;
        popupTemplate.fieldInfos = popupTemplate.fieldInfos || [];
        const idxPopup = popupTemplate.fieldInfos.findIndex((fieldInfo) => fieldInfo.fieldName === oldName);
        const field = getLayerField(layer, aggregateField.onStatisticField);
        popupTemplate.fieldInfos.splice(idxPopup, 1, new FieldInfo({
            fieldName: aggregateField.name,
            label: aggregateField.alias,
            isEditable: false,
            visible: true,
            format: field.type === "string"
                ? undefined
                : ["small-integer", "big-integer", "integer", "long", "number"].indexOf(field.type) > -1
                    ? {
                        digitSeparator: true
                    }
                    : {
                        digitSeparator: true,
                        places: 1
                    }
        }));
    }
    updateAlias(alias) {
        const { layer, aggregateField } = this;
        const fieldInfo = getPopupFieldInfo(layer, aggregateField.name);
        if (aggregateField.isAutoGenerated) {
            // featureReduction.clone() will remove the alias from the aggregation field
            fieldInfo.label = alias;
        }
        else {
            aggregateField.alias = alias;
        }
        this.updatePopupAlias();
        this.arcgisAggregationFieldChange.emit();
    }
    updatePopupAlias() {
        const { layer, aggregateField } = this;
        const featureReduction = layer.featureReduction;
        const fieldInfo = getPopupFieldInfo(layer, aggregateField.name);
        const alias = aggregateField.isAutoGenerated ? fieldInfo.label : aggregateField.alias;
        // main fieldInfos
        if (!aggregateField.isAutoGenerated) {
            fieldInfo.label = alias;
        }
        // search fieldInfos under content
        if (Array.isArray(featureReduction.popupTemplate.content) &&
            featureReduction.popupTemplate.content.length) {
            featureReduction.popupTemplate.content.forEach((content) => {
                if (content.type === "fields" && content.fieldInfos) {
                    const fieldInfo = content.fieldInfos.find((fieldInfo) => fieldInfo.fieldName === aggregateField.name);
                    if (fieldInfo) {
                        fieldInfo.label = alias;
                    }
                }
            });
        }
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregationField.style = arcgisAggregationFieldCss;

const arcgisAggregationFieldsCss = ".fields.sc-arcgis-aggregation-fields{background-color:white}.field-icon.sc-arcgis-aggregation-fields{padding:0 var(--arcgis-app-cap-spacing);display:flex;align-items:center}";

const ArcgisAggregationFields = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisAggregationFieldsChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationFieldsChange", 7);
        this.arcgisAggregationFieldsClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationFieldsClose", 7);
        this.arcgisAggregationFieldsBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationFieldsBackClick", 7);
        this.allFieldsAdded = false;
        this.mapView = undefined;
        this.layer = undefined;
        this.flowNode = undefined;
        this.strings = undefined;
        this.currentLanguage = undefined;
        this.hideLayerTitle = false;
    }
    //--------------------------------------------------------------------------
    //
    //  public calls
    //
    //--------------------------------------------------------------------------
    // Public Methods
    async done() {
        this.closePopovers();
    }
    async setFocus() {
        this.flowItemNode.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        const [AggregateField, FieldInfo] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__.l)([
            "esri/layers/support/AggregateField",
            "esri/popup/FieldInfo"
        ]);
        this.modules = {
            AggregateField,
            FieldInfo
        };
    }
    componentDidLoad() {
        setTimeout(() => requestAnimationFrame(() => this.flowItemNode.setFocus()), 200);
    }
    disconnectedCallback() {
        this.closePopovers();
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        /*
        {
          name: "cluster_count",
          alias: "aggregateCount",
          type: "esriFieldTypeUnsignedInteger", // If this is a valid type...
          statisticType: "count",
          isInferred: true,
        }
        */
        const { layer, strings, hideLayerTitle } = this;
        const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
        const statsFields = featureReduction.fields;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.fields.fields, description: !hideLayerTitle ? layer.title : undefined, onCalciteFlowItemBack: () => {
                this.arcgisAggregationFieldsBackClick.emit();
                this.closePopovers();
            }, ref: (node) => (this.flowItemNode = node) }, this.renderTip(statsFields), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "fields" }, statsFields === null || statsFields === void 0 ? void 0 : statsFields.map((aggregateField, idx) => this.renderStatsField(aggregateField, idx))), this.renderAddField())));
    }
    renderTip(statsFields) {
        const { strings } = this;
        if (statsFields === null || statsFields === void 0 ? void 0 : statsFields.length) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tip", { heading: strings.fields.msgTitle, closeDisabled: true }, strings.fields.msg));
    }
    renderStatsField(aggregateField, idx) {
        const { layer, mapView, selectedFieldName, modules, strings } = this;
        // need to have the field in the popup too
        addPopupField(aggregateField, layer, modules);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-aggregation-field", { layer: layer, mapView: mapView, strings: strings, aggregateField: aggregateField, open: selectedFieldName === aggregateField.name, onArcgisAggregationFieldChange: () => {
                this.selectedFieldName = aggregateField.name;
                layer.featureReduction.fields[idx] = aggregateField;
                this.arcgisAggregationFieldsChange.emit();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } }));
    }
    renderAddField() {
        const { allFieldsAdded, strings } = this;
        if (allFieldsAdded) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-fab", { slot: "fab", appearance: "outline-fill", kind: "neutral", scale: "s", icon: "plus", textEnabled: true, text: strings.fields.addField, onClick: () => this.addStatsField(), ref: (node) => (this.fabNode = node) }));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    closePopovers() {
        if (this.attributeFormatter) {
            document.body.removeChild(this.attributeFormatter);
            this.attributeFormatter = null;
        }
    }
    addStatsField() {
        const { layer, strings, modules } = this;
        const { AggregateField } = modules;
        const fields = getLayerNumberOrStringFields(layer);
        let idxField = 0;
        let types = getStatsTypes(fields[idxField]);
        let idxType = 0;
        let hasAlready = hasFieldAlready(layer, fields[idxField].name, types[idxType]);
        while (idxField < fields.length && hasAlready) {
            // next types
            while (idxType < types.length && hasAlready) {
                idxType++;
                if (idxType < types.length) {
                    hasAlready = hasFieldAlready(layer, fields[idxField].name, types[idxType]);
                }
            }
            if (hasAlready) {
                // next field
                idxField++;
                if (idxField < fields.length) {
                    types = getStatsTypes(fields[idxField]);
                    idxType = 0;
                    hasAlready = hasFieldAlready(layer, fields[idxField].name, types[idxType]);
                }
            }
        }
        if (hasAlready) {
            this.allFieldsAdded = true;
        }
        else {
            const field = fields[idxField];
            const type = types[idxType];
            const aggregateField /* __esri.AggregateField */ = new AggregateField({
                name: `${field.name}_${type}`,
                onStatisticField: field.name,
                alias: `${field.alias || field.name} ${getStatsTypeString(type, strings).toLocaleLowerCase()}`,
                statisticType: type,
                visible: true
            });
            const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
            featureReduction.fields = featureReduction.fields || [];
            featureReduction.fields.push(aggregateField);
            addPopupField(aggregateField, layer, modules);
            this.selectedFieldName = aggregateField.name;
        }
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregationFields.style = arcgisAggregationFieldsCss;

const arcgisAggregationInfoPopoverCss = ".info{padding:10px;background-color:white}.info-popover{max-width:320px}.info-help{padding-top:10px;justify-content:flex-end;display:flex}.info-help-button{display:flex;flex-flow:row-reverse}";

const ArcgisAggregationInfoPopover = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisAggregationInfoPopoverClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationInfoPopoverClose", 7);
        this.arcgisAggregationInfoPopoverDisconnected = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationInfoPopoverDisconnected", 7);
        //--------------------------------------------------------------------------
        //
        //  Private Properties
        //
        //--------------------------------------------------------------------------
        this.documentTabHandler = undefined;
        this.documentClickHandler = undefined;
        this.panelScrollHandler = undefined;
        // --------------------------------------------------------------------------
        //
        //  Private methods
        //
        // --------------------------------------------------------------------------
        this.onOpen = () => {
            setTimeout(() => requestAnimationFrame(() => { var _a; return (_a = this.panelNode) === null || _a === void 0 ? void 0 : _a.setFocus(); }), 1);
        };
        this.props = undefined;
        this.referenceElement = undefined;
        this.open = false;
    }
    //--------------------------------------------------------------------------
    //
    //  public calls
    //
    //--------------------------------------------------------------------------
    async reposition() {
        var _a;
        (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
    }
    async setFocus() {
        var _a;
        (_a = this.panelNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    async setOpen(open) {
        var _a;
        if (this.popoverNode) {
            this.popoverNode.open = open;
            if (open) {
                (_a = this.panelNode) === null || _a === void 0 ? void 0 : _a.setFocus();
                this.popoverNode.reposition();
            }
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    disconnectedCallback() {
        // in case popover got removed by just removing node from DOM
        this.arcgisAggregationInfoPopoverDisconnected.emit();
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { props, referenceElement, open } = this;
        const { config, title, moreInfo, helpId, strings } = props;
        const { helpBase, helpMap } = config;
        const header = strings.tile.info.title.replace("${title}", title);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout arcgis-aggregation-popover" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { open: open, placement: "auto", offsetSkidding: 5, label: "", referenceElement: referenceElement, class: "info-popover", onCalcitePopoverOpen: this.onOpen, ref: (node) => (this.popoverNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: header, closable: true, ref: (node) => (this.panelNode = node), onCalcitePanelClose: () => {
                this.arcgisAggregationInfoPopoverClose.emit();
                // focus on info icon; wait so enter key doesn't re-open it
                setTimeout(() => referenceElement.parentElement.focus(), 300);
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, moreInfo), helpId && helpMap ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "info-help" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "solid", label: strings.tile.info.learnMore, class: "info-help-button", slot: "footer", onClick: () => {
                window.open(`${helpBase}${helpMap[helpId]}`, "_blank");
            } }, strings.tile.info.learnMore))) : null)))));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregationInfoPopover.style = arcgisAggregationInfoPopoverCss;

const arcgisAggregationSymbolStylerPopoverCss = ".popover{z-index:100}.symbol-styler-div{width:328px;height:100%;overflow-y:auto;overflow-x:hidden}arcgis-symbol-styler{max-height:calc(90vh - 100px);}";

const ArcgisAggregationSymbolStylerPopover = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisAggregationSymbolStylerChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationSymbolStylerChange", 7);
        this.arcgisAggregationSymbolStylerPopoverClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationSymbolStylerPopoverClose", 7);
        this.arcgisAggregationSymbolStylerPopoverDisconnected = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationSymbolStylerPopoverDisconnected", 7);
        this.documentTabHandler = undefined;
        this.documentClickHandler = undefined;
        this.panelScrollHandler = undefined;
        this.props = undefined;
        this.referenceElement = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  public calls
    //
    //--------------------------------------------------------------------------
    async reposition() {
        var _a;
        (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
    }
    async setFocus() {
        var _a;
        (_a = this.closeActionNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    async setOpen(open) {
        if (this.popoverNode) {
            this.popoverNode.open = open;
            if (open) {
                setTimeout(() => this.closeActionNode.setFocus(), 100);
                //this.popoverNode.reposition();
            }
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        const [symbolUtils, cimSymbolUtils, Color, SimpleMarkerSymbol, SimpleLineSymbol] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__.l)([
            "esri/symbols/support/symbolUtils",
            "esri/symbols/support/cimSymbolUtils",
            "esri/Color",
            "esri/symbols/SimpleMarkerSymbol",
            "esri/symbols/SimpleLineSymbol"
        ]);
        this.modules = {
            symbolUtils,
            cimSymbolUtils,
            Color,
            SimpleMarkerSymbol,
            SimpleLineSymbol
        };
    }
    disconnectedCallback() {
        // in case popover got removed by just removing node from DOM
        this.arcgisAggregationSymbolStylerPopoverDisconnected.emit();
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { props, referenceElement } = this;
        const { strings } = props;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout arcgis-aggregation-popover" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { placement: "leading-start", offsetDistance: 0, offsetSkidding: 45, pointerDisabled: true, label: strings.symbolStyle, referenceElement: referenceElement, triggerDisabled: true, class: "popover", open: false,
            //onCalcitePopoverOpen={() => this.onOpen()}
            ref: (node) => (this.popoverNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { heading: strings.symbolStyle, closable: false }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header-content" }, strings.symbolStyle), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "header-actions-end", scale: "s", icon: "x", text: "", onClick: () => this.arcgisAggregationSymbolStylerPopoverClose.emit(), ref: (node) => (this.closeActionNode = node) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "symbol-styler-div",
            /* class="-symbol-button__symbol-styler-div" */ ref: (node) => this.buildSymbolStyler(node) })))));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    async buildSymbolStyler(node) {
        const { props, modules } = this;
        const { layer, portal } = props;
        const { Color } = modules;
        const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
        let symbol = featureReduction.symbol;
        if (!isSupportedSymbol(symbol)) {
            symbol = getDefaultSymbol(modules);
        }
        const fillEnabled = symbol.type === "picture-marker" ? false : !!symbol.color;
        const strokeEnabled = hasSymbolOutline(symbol);
        const isPointCIM = symbol.type === "cim" && symbol.data.symbol.type === "CIMPointSymbol";
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        let stroke;
        if (symbol.type === "simple-marker") {
            const sym = symbol;
            if (sym.outline) {
                stroke = {
                    color: sym.outline.color ? sym.outline.color : new Color([0, 0, 0, 0.5]),
                    size: sym.outline.width
                };
            }
            else {
                stroke = {
                    color: new Color([0, 0, 0, 0.5]),
                    size: 1
                };
            }
        }
        else if (symbol.type === "cim") {
            stroke = undefined;
        }
        else {
            stroke = {
                color: new Color([255, 255, 255, 0.5]),
                size: 1
            };
        }
        const symbolStyler = document.createElement("arcgis-symbol-styler");
        symbolStyler.popoverProps = {
            placement: "bottom-end",
            offsetDistance: 10,
            offsetSkidding: rtl ? 3 : -3,
            pointerDisabled: "true",
            popoverWidth: 315,
            //overlayPositioning: "fixed", -- buggy, offset issue
            refElement: this.closeActionNode
        };
        const edit = symbolStyler.edit(symbol.clone(), {
            portal,
            symbolFilter: undefined,
            sections: {
                marker: isPointCIM || ["simple-marker", "picture-marker"].indexOf(symbol.type) > -1
                    ? {
                        open: true,
                        symbolsOpen: true,
                        sizeOpen: true,
                        parts: {
                            size: false
                        },
                        markerType: "all"
                    }
                    : undefined,
                fill: {
                    type: "color",
                    optional: true,
                    open: true,
                    suggestedColorsOpen: true,
                    transparencyOpen: isPictureMarker(symbol, modules)
                },
                stroke: {
                    type: "color",
                    optional: true,
                    extraParts: {
                        style: ["simple-marker", "picture-marker", "cim"].indexOf(symbol.type) === -1,
                        width: true
                    }
                }
            },
            fill: {
                color: getSymbolColor(symbol, modules) || adjustAlpha(new Color("#ff8200"), 0.85)
            },
            marker: {
                size: getSymbolSize(symbol, modules)
            },
            stroke,
            fillEnabled,
            strokeEnabled
        });
        symbolStyler.addEventListener("arcgisSymbolStylerEdit", (detail) => this.onChangeSymbol(detail));
        node.appendChild(symbolStyler);
        await edit;
    }
    onChangeSymbol({ detail: { symbol } }) {
        const { props } = this;
        const { layer } = props;
        const featureReduction = layer.featureReduction; //__esri.FeatureReductionCluster;
        featureReduction.symbol = symbol;
        this.arcgisAggregationSymbolStylerChange.emit();
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregationSymbolStylerPopover.style = arcgisAggregationSymbolStylerPopoverCss;

const arcgisAggregationTileCss = ".tile{background-color:white;position:relative;margin:6px;cursor:pointer;box-shadow:0 1px 10px 2px rgba(0, 0, 0, 0.05), 0 0 0 1px #e0e0e0;transition:box-shadow 125ms ease-in-out}.tile:hover{z-index:5;box-shadow:0 1px 0 2px rgba(0, 0, 0, 0.05), 0 0 0 1px #e0e0e0}.tile:focus{outline:2px solid var(--calcite-color-brand)}.tile-selected{box-shadow:0 1px 10px 2px rgba(0, 0, 0, 0.05), 0 0 0 1px var(--calcite-color-brand)}.tile-selected:hover{z-index:5;box-shadow:0 1px 0 2px rgba(0, 0, 0, 0.05), 0 0 0 1px var(--calcite-color-brand)}.tile-check{position:absolute;top:10px;right:10px}.tile-check.rtl{right:auto;left:10px}.style-link{padding:9px 9px}.style-link-icon{margin-top:-1px}.style-link-text{margin-right:10px}.style-link-text.rtl{margin-right:0;margin-left:10px}.style-link-title{display:flex;font-weight:bold;padding-bottom:5px}.style-link-options{color:#0079c1;display:flex;flex-direction:row nowrap}.style-link-options svg{fill:#0079c1}.tile-image{height:100px;width:100%;background-size:cover;display:flex;align-items:center;justify-content:center}.tile-image-selected{height:68px;background-size:auto 100px}.style-sub-text{font-size:80%;padding:0 0 6px 0}.style-link-info{height:18px}";

const ArcgisAggregationTile = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisAggregationTileSelect = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationTileSelect", 7);
        this.arcgisAggregationTileOptions = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAggregationTileOptions", 7);
        //--------------------------------------------------------------------------
        //
        //  Private Properties
        //
        //--------------------------------------------------------------------------
        this.documentClickHandler = undefined;
        this.panelScrollHandler = undefined;
        this.keyupEventHandler = (event) => {
            const { selected } = this;
            if (event.key === " " || event.key === "Enter") {
                event.stopPropagation();
                this.removeInfoPopover();
                // use latest handler on props
                selected ? this.arcgisAggregationTileOptions.emit() : this.arcgisAggregationTileSelect.emit();
                event.preventDefault();
            }
        };
        this.keydownEventHandler = (event) => {
            if (event.key === " ") {
                // don't scroll panel
                event.stopPropagation();
                event.preventDefault();
            }
        };
        this.clickEventHandler = (event) => {
            var _a;
            const { selected } = this;
            if (((_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.nodeName) === "CALCITE-CHECKBOX") {
                // user clicked on checkbox; we handled this below
                return;
            }
            event.stopPropagation();
            this.removeInfoPopover();
            // use latest handler on props
            selected ? this.arcgisAggregationTileOptions.emit() : this.arcgisAggregationTileSelect.emit();
            event.preventDefault();
        };
        this.checkboxChangeHandler = (event) => {
            const { selected } = this;
            event.preventDefault();
            const node = event.target;
            if (!node.checked) {
                // we don't allow users to uncheck the box
                node.checked = true;
            }
            else {
                this.removeInfoPopover();
                // use latest handler on props
                selected ? this.arcgisAggregationTileOptions.emit() : this.arcgisAggregationTileSelect.emit();
            }
        };
        this.props = undefined;
        this.selected = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Set focus on tile
     */
    async setFocus() {
        var _a;
        (_a = this.tileNode) === null || _a === void 0 ? void 0 : _a.focus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    disconnectedCallback() {
        this.removeInfoPopover();
    }
    // --------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { props, selected } = this;
        const { title, imagePath, strings } = props;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        const styleTileClasses = {
            tile: true,
            "tile-selected": selected
        };
        const styleTileImageClasses = {
            "tile-image": true,
            "tile-image-selected": selected
        };
        const styleTileCheckClasses = {
            "tile-check": true,
            rtl: rtl
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: styleTileClasses, role: "button", tabindex: "0", "aria-label": `${title} ${strings.tile.options}`, "aria-selected": selected, ref: (element) => {
                this.tileNode = element;
                this.addTileListeners(element);
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: styleTileImageClasses, style: { backgroundImage: `url(${imagePath})` }, "aria-hidden": "true" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: styleTileCheckClasses, "aria-label": "", "aria-hidden": "true" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { name: "style-tile-check-name", checked: selected, tabindex: "-1", ref: (element) => this.addCheckboxListener(element) })), this.renderTileLink())));
    }
    renderTileLink() {
        const { props, selected } = this;
        const { strings } = props;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement) === "rtl";
        const styleLinkTextClasses = {
            "style-link-text": true,
            rtl: rtl
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "style-link", "aria-label": props.title }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "style-link-title" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: styleLinkTextClasses, "aria-hidden": "true" }, props.title), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { class: "style-link-info", tabindex: "0", scale: "s", icon: "information", compact: true, onClick: (event) => this.handleInfoClick(event), text: strings.tile.moreInfo, ref: (element) => {
                this.infoIconNode = element;
                element.addEventListener("keyup", (event) => {
                    event.stopPropagation();
                    if (event.key === " " || (!this.infoPopoverNode && event.key === "Enter")) {
                        this.handleInfoClick(event);
                    }
                });
                element.addEventListener("keydown", (event) => {
                    if (event.key === " ") {
                        // prevent panel from scrolling
                        event.stopPropagation();
                        event.preventDefault();
                    }
                });
            } })), selected && this.renderStyleOptions()));
    }
    renderStyleOptions() {
        const { props } = this;
        const { strings } = props;
        // event handling for button click is handled as tile click
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", width: "full", scale: "s", label: strings.tile.options }, strings.tile.options));
    }
    // --------------------------------------------------------------------------
    //
    //  Private methods
    //
    // --------------------------------------------------------------------------
    handleInfoClick(event) {
        // don't execute the event on the entire tile
        event.stopPropagation();
        const { props } = this;
        const { config, title, moreInfo, helpId, flowItemNode, strings } = props;
        this.removeInfoPopover();
        this.infoPopoverNode = document.createElement("arcgis-aggregation-info-popover");
        this.infoPopoverNode.props = {
            title,
            moreInfo,
            helpId,
            config,
            flowItemNode,
            strings
        };
        this.infoPopoverNode.referenceElement = this.infoIconNode;
        this.infoPopoverNode.addEventListener("arcgisAggregationInfoPopoverClose", (event) => {
            event.stopPropagation();
            this.removeInfoPopover();
            setTimeout(() => this.infoIconNode.setFocus(), 200);
        });
        this.infoPopoverNode.addEventListener("arcgisAggregationInfoPopoverDisconnected", (event) => {
            event.stopPropagation();
            this.removeInfoPopover();
        });
        document.body.appendChild(this.infoPopoverNode);
        this.infoPopoverNode.setOpen(true);
        // need to wait until it's all visible
        setTimeout(() => this.infoPopoverNode.setFocus(), 100);
        setTimeout(() => {
            // close popover when clicking outside
            this.documentClickHandler = (event) => {
                if (!this.isInsideInfoPopoverNode(event.target)) {
                    this.removeInfoPopover();
                    setTimeout(() => this.infoIconNode.setFocus(), 200);
                }
            };
            document.addEventListener("click", this.documentClickHandler);
            // click handler is not called when clicking or scrolling panel scrollbars
            this.panelScrollHandler = () => {
                this.removeInfoPopover();
            };
            flowItemNode === null || flowItemNode === void 0 ? void 0 : flowItemNode.addEventListener("calciteFlowItemScroll", this.panelScrollHandler);
        }, 100);
    }
    removeInfoPopover() {
        const { props } = this;
        const { flowItemNode } = props;
        // close popovers
        document.body
            .querySelectorAll(".arcgis-aggregation-popover")
            .forEach((node) => document.body.removeChild(node));
        this.infoPopoverNode = null;
        if (this.documentClickHandler) {
            document.removeEventListener("click", this.documentClickHandler);
            this.documentClickHandler = undefined;
        }
        if (this.panelScrollHandler) {
            flowItemNode === null || flowItemNode === void 0 ? void 0 : flowItemNode.removeEventListener("calciteFlowItemScroll", this.panelScrollHandler);
            this.panelScrollHandler = undefined;
        }
    }
    isInsideInfoPopoverNode(node) {
        if ((node === null || node === void 0 ? void 0 : node.tagName) === "ARCGIS-AGGREGATION-INFO-POPOVER") {
            return true;
        }
        else {
            let parentNode = node === null || node === void 0 ? void 0 : node.parentElement;
            while (parentNode) {
                if (parentNode.tagName === "ARCGIS-AGGREGATION-INFO-POPOVER") {
                    return true;
                }
                else {
                    parentNode = parentNode.parentElement;
                }
            }
        }
        return false;
    }
    addTileListeners(element) {
        element.addEventListener("keyup", this.keyupEventHandler);
        element.addEventListener("keydown", this.keydownEventHandler);
        element.addEventListener("click", this.clickEventHandler);
    }
    addCheckboxListener(element) {
        element.addEventListener("calciteCheckboxChange", this.checkboxChangeHandler);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAggregationTile.style = arcgisAggregationTileCss;



//# sourceMappingURL=arcgis-aggregation_8.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ arrayToLookupMap),
/* harmony export */   b: () => (/* binding */ unique),
/* harmony export */   c: () => (/* binding */ throttle),
/* harmony export */   d: () => (/* binding */ debounce),
/* harmony export */   e: () => (/* binding */ escapeRegExp),
/* harmony export */   f: () => (/* binding */ arraysAreEquivalent),
/* harmony export */   g: () => (/* binding */ chunk),
/* harmony export */   i: () => (/* binding */ isDefined),
/* harmony export */   m: () => (/* binding */ minDelay),
/* harmony export */   t: () => (/* binding */ timeout),
/* harmony export */   u: () => (/* binding */ uniqueBy)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
/**
 * Call a function only after it has not been called for n milliseconds
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const debounce = (fn, delay) => {
    let timeout;
    let status = "idle";
    function flush(...args) {
        status = "flushed";
        return debounced(...args);
    }
    function invoke(...args) {
        status = "invoked";
        return debounced(...args);
    }
    function cancel(...args) {
        status = "cancelled";
        return debounced(...args);
    }
    function getStatus() {
        return status;
    }
    const debounced = (...args) => new Promise((resolve) => {
        switch (status) {
            case "flushed":
                status = "idle";
                if (timeout) {
                    clearTimeout(timeout);
                    resolve(fn(...args));
                }
                else {
                    resolve(null);
                }
                break;
            case "invoked":
                clearTimeout(timeout);
                status = "idle";
                resolve(fn(...args));
                break;
            case "cancelled":
                clearTimeout(timeout);
                status = "idle";
                resolve(null);
                break;
            default:
                if (timeout) {
                    clearTimeout(timeout);
                }
                status = "pending";
                timeout = setTimeout(() => {
                    status = "idle";
                    return resolve(fn(...args));
                }, delay);
                break;
        }
    });
    debounced.flush = flush;
    debounced.invoke = invoke;
    debounced.cancel = cancel;
    debounced.getStatus = getStatus;
    return debounced;
};
/**
 * Call a function only after n milliseconds have elapsed
 * @param fn    - function to call
 * @param delay - delay in milliseconds
 */
const throttle = (fn, delay) => {
    let timeout;
    return (...args) => new Promise((resolve) => {
        if (timeout) {
            return;
        }
        timeout = setTimeout(() => {
            clearTimeout(timeout);
            timeout = undefined;
            resolve(fn(...args));
        }, delay);
    });
};
function escapeRegExp(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
function isDefined(value) {
    return value !== undefined && value !== null;
}
/**
 * Set a minimum time for a promise to resolve (useful for preventing flash of loaders)
 */
async function minDelay(promise, minDelay) {
    await Promise.all([promise, timeout(minDelay)]);
    return promise;
}
/**
 * Helper method to inline setTimeout as an await in async functions
 */
function timeout(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
const arrayToLookupMap = (dataArr, getKeyAndItem) => Object.fromEntries((dataArr || []).map((item) => {
    const { key, data } = getKeyAndItem(item);
    return [key, data];
}));
/**
 * Check whether two arrays have the same number of elements
 * and whether they contain the same elements
 * regardless of order
 */
const arraysAreEquivalent = (arr1, arr2) => arr1.length === arr2.length && arr1.reduce((memo, str) => memo && arr2.indexOf(str) > -1, true);
function uniqueBy(myArr, getItemId) {
    const resultArr = [];
    const lookupMap = {};
    myArr.forEach((item) => {
        const id = getItemId(item);
        if (lookupMap[id] == null) {
            lookupMap[id] = item;
            resultArr.push(item);
        }
    });
    return resultArr;
}
function unique(myArr) {
    const primitives = { boolean: {}, number: {}, string: {} };
    const objs = [];
    return myArr.filter((item) => {
        let type = typeof item;
        if (type in primitives) {
            return primitives[type].hasOwnProperty(item) ? false : (primitives[type][item] = true);
        }
        else {
            return objs.indexOf(item) >= 0 ? false : objs.push(item);
        }
    });
}
const chunk = (arr, size) => [...Array(Math.ceil(arr.length / size))].map((_, i) => arr.slice(size * i, size + size * i));



//# sourceMappingURL=functional-44de8fcf.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLWFhMjYwMi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDaUs7QUFDL0U7QUFDWjtBQUNUO0FBQ2E7QUFDSjtBQUNiO0FBQzlCOztBQUUzQjtBQUNBLGtDQUFrQztBQUNsQyxtQ0FBbUM7QUFDbkMseUNBQXlDO0FBQ3pDLGdDQUFnQztBQUNoQyxpQ0FBaUM7QUFDakMsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBDQUEwQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDhDQUE4QztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtB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QUFDQSx5QkFBeUIsV0FBVyxZQUFZO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVpTTs7QUFFak07Ozs7Ozs7Ozs7Ozs7Ozs7OztBQy9JQTtBQUNBO0FBQ0E7QUFDQTtBQUMyRTtBQUNiO0FBQ047O0FBRXhEO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxtREFBaUM7QUFDbEU7QUFDQTtBQUNBLFFBQVEsd0RBQVc7QUFDbkIsZUFBZSx3REFBVztBQUMxQjtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdEQUFXO0FBQ3ZCLG1CQUFtQix3REFBVztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxtREFBaUM7QUFDbEU7QUFDQTtBQUNBLFFBQVEsd0RBQVc7QUFDbkIsZUFBZSx3REFBVztBQUMxQjtBQUNBO0FBQ0EsWUFBWSx3REFBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxxREFBWSw4QkFBOEIsY0FBYyxRQUFRLE9BQU87QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixjQUFjLEVBQUUsT0FBTztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsZUFBZSxHQUFHLGtCQUFrQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTs7QUFFNEU7O0FBRTVFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vYXJjZ2lzLWFnZ3JlZ2F0aW9uXzguZW50cnkuanMiLCJ3ZWJwYWNrOi8vZXhiLWNsaWVudC8uL2V4dGVuc2lvbnMvd2lkZ2V0cy9hcmNnaXMvYW5hbHlzaXMvbm9kZV9tb2R1bGVzL0BhcmNnaXMvYXBwLWNvbXBvbmVudHMvZGlzdC9lc20vZnVuY3Rpb25hbC00NGRlOGZjZi5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9sb2NhbGUtMDUwYjZkYjkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjQuMC41OFxuICovXG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGMgYXMgY3JlYXRlRXZlbnQsIGgsIEggYXMgSG9zdCwgYSBhcyBnZXRBc3NldFBhdGgsIGYgYXMgZm9yY2VVcGRhdGUsIGQgYXMgZ2V0RWxlbWVudCwgRiBhcyBGcmFnbWVudCB9IGZyb20gJy4vaW5kZXgtZTNiZjdkYTcuanMnO1xuaW1wb3J0IHsgZyBhcyBnZXRFbGVtZW50RGlyLCBDIGFzIENTU19VVElMSVRZIH0gZnJvbSAnLi9sYW5ndWFnZVV0aWwtZWYwZTU0YjIuanMnO1xuaW1wb3J0IHsgZyBhcyBnZXRMb2NhbGVDb21wb25lbnRTdHJpbmdzIH0gZnJvbSAnLi9sb2NhbGUtMDUwYjZkYjkuanMnO1xuaW1wb3J0IHsgbCBhcyBsb2FkTW9kdWxlcyB9IGZyb20gJy4vbG9hZE1vZHVsZXMtYjRhYzEyNDcuanMnO1xuaW1wb3J0IHsgaCBhcyBnZXRMYXllckdlb21ldHJ5VHlwZSB9IGZyb20gJy4vY29tbW9uRnVuY3Rpb25zLWIwODMwZTllLmpzJztcbmltcG9ydCB7IGwgYXMgbGF5ZXJEaXNwbGF5VHlwZUVudW0gfSBmcm9tICcuL2NvbW1vbkVudW1zLWZjZjEzNjYxLmpzJztcbmltcG9ydCB7IGQgYXMgZGVib3VuY2UgfSBmcm9tICcuL2Z1bmN0aW9uYWwtNDRkZThmY2YuanMnO1xuaW1wb3J0ICcuL2RvbS00ZDM2NzY3Ny5qcyc7XG5cbi8vIGNsdXN0ZXJpbmdcbmNvbnN0IGNsdXN0ZXJpbmdSYWRpdXNNaW5WYWwgPSA5OyAvLyAxMnB4XG5jb25zdCBjbHVzdGVyaW5nUmFkaXVzTWF4VmFsID0gOTA7IC8vIDEyMHB4XG5jb25zdCBjbHVzdGVyaW5nUmFkaXVzSW5pdGlhbFZhbCA9IDM3LjU7IC8vIDUwcHhcbmNvbnN0IGNsdXN0ZXJpbmdTaXplTWluVmFsID0gOTsgLy8gMTJweFxuY29uc3QgY2x1c3RlcmluZ1NpemVNYXhWYWwgPSA5MDsgLy8gMTIwcHhcbmNvbnN0IGNsdXN0ZXJpbmdTaXplTWF4SW5pdGlhbFZhbCA9IDM3LjU7IC8vIDUwcHhcbnZhciBBZ2dyZWdhdGlvblR5cGU7XG4oZnVuY3Rpb24gKEFnZ3JlZ2F0aW9uVHlwZSkge1xuICAgIEFnZ3JlZ2F0aW9uVHlwZVtcIkNMVVNURVJJTkdcIl0gPSBcImNsdXN0ZXJpbmdcIjtcbiAgICBBZ2dyZWdhdGlvblR5cGVbXCJDSEFSVF9DTFVTVEVSSU5HXCJdID0gXCJjaGFydENsdXN0ZXJpbmdcIjtcbiAgICBBZ2dyZWdhdGlvblR5cGVbXCJCSU5OSU5HXCJdID0gXCJiaW5uaW5nXCI7XG59KShBZ2dyZWdhdGlvblR5cGUgfHwgKEFnZ3JlZ2F0aW9uVHlwZSA9IHt9KSk7XG4vKipcbiAqIFJldHVybnMgYSBwYXJlbnQgZWxlbWVudCB3aXRoIHRoYXQgdGFnIG5hbWUgb3IgY2xhc3MgbmFtZVxuICogQHBhcmFtIG5vZGUgLSBzdGFydGluZyBub2RlXG4gKiBAcGFyYW0gdGFnTmFtZSAtIHRhZyBuYW1lIHRvIGZpbmQgdXAgdGhlIHRyZWVcbiAqIEBwYXJhbSBjbGFzc05hbWUgLSBjbGFzcyBuYW1lIHRvIGZpbmQgdXAgdGhlIHRyZWVcbiAqL1xuZnVuY3Rpb24gZmluZFBhcmVudE5vZGUobm9kZSwgdGFnTmFtZSwgY2xhc3NOYW1lKSB7XG4gICAgaWYgKCh0YWdOYW1lICYmIChub2RlID09PSBudWxsIHx8IG5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vZGUudGFnTmFtZSkgPT09IHRhZ05hbWUudG9VcHBlckNhc2UoKSkgfHwgKGNsYXNzTmFtZSAmJiAobm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBub2RlLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSkpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgcGFyZW50Tm9kZSA9IG5vZGUgPT09IG51bGwgfHwgbm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm9kZS5wYXJlbnRFbGVtZW50O1xuICAgICAgICB3aGlsZSAocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgaWYgKCh0YWdOYW1lICYmIHBhcmVudE5vZGUudGFnTmFtZSA9PT0gdGFnTmFtZS50b1VwcGVyQ2FzZSgpKSB8fFxuICAgICAgICAgICAgICAgIChjbGFzc05hbWUgJiYgcGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcmVudE5vZGUudGFnTmFtZSA9PT0gXCJCT0RZXCIpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xufVxuZnVuY3Rpb24gZ2V0U3RhdHNUeXBlU3RyaW5nKHN0YXRpc3RpY1R5cGUsIHN0cmluZ3MpIHtcbiAgICBzd2l0Y2ggKHN0YXRpc3RpY1R5cGUpIHtcbiAgICAgICAgY2FzZSBcInN1bVwiOlxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ3MuZmllbGRzLnN1bTtcbiAgICAgICAgY2FzZSBcImF2Z1wiOlxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ3MuZmllbGRzLm1lYW47XG4gICAgICAgIGNhc2UgXCJtaW5cIjpcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzLmZpZWxkcy5taW47XG4gICAgICAgIGNhc2UgXCJtYXhcIjpcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzLmZpZWxkcy5tYXg7XG4gICAgICAgIGNhc2UgXCJzdGRkZXZcIjpcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzLmZpZWxkcy5zdGREZXY7XG4gICAgICAgIGNhc2UgXCJtb2RlXCI6XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5ncy5maWVsZHMubW9kZTtcbiAgICAgICAgY2FzZSBcInZhclwiOlxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ3MuZmllbGRzLnZhcjtcbiAgICAgICAgY2FzZSBcImNvdW50XCI6XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5ncy5maWVsZHMuY291bnQ7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRBZ2dyZWdhdGlvblR5cGUobGF5ZXIpIHtcbiAgICBjb25zdCBmZWF0dXJlUmVkdWN0aW9uID0gbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbjtcbiAgICBpZiAoIWZlYXR1cmVSZWR1Y3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSBpZiAoZmVhdHVyZVJlZHVjdGlvbi50eXBlID09PSBcImJpbm5pbmdcIikge1xuICAgICAgICByZXR1cm4gXCJiaW5uaW5nXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGZlYXR1cmVSZWR1Y3Rpb24udHlwZSA9PT0gXCJjbHVzdGVyXCIpIHtcbiAgICAgICAgaWYgKGlzUGllQ2hhcnRSZW5kZXJlcihsYXllcikpIHtcbiAgICAgICAgICAgIHJldHVybiBcInBpZS1jaGFydFwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcImNsdXN0ZXJcIjtcbiAgICB9XG59XG5mdW5jdGlvbiBpc1JlbmRlcmVyQXV0b0dlbmVyYXRlZChsYXllcikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247XG4gICAgcmV0dXJuICEoZmVhdHVyZVJlZHVjdGlvbiA9PT0gbnVsbCB8fCBmZWF0dXJlUmVkdWN0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmZWF0dXJlUmVkdWN0aW9uLnJlbmRlcmVyKSB8fCAoKF9iID0gKF9hID0gZmVhdHVyZVJlZHVjdGlvbiA9PT0gbnVsbCB8fCBmZWF0dXJlUmVkdWN0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmZWF0dXJlUmVkdWN0aW9uLnJlbmRlcmVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYXV0aG9yaW5nSW5mbykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmlzQXV0b0dlbmVyYXRlZCk7XG59XG5mdW5jdGlvbiBpc1BpZUNoYXJ0UmVuZGVyZXIobGF5ZXIpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IGZlYXR1cmVSZWR1Y3Rpb24gPSBsYXllci5mZWF0dXJlUmVkdWN0aW9uO1xuICAgIHJldHVybiAoZmVhdHVyZVJlZHVjdGlvbi5yZW5kZXJlciAmJlxuICAgICAgICBmZWF0dXJlUmVkdWN0aW9uLnJlbmRlcmVyLnR5cGUgPT09IFwicGllLWNoYXJ0XCIgJiZcbiAgICAgICAgISgoX2IgPSAoX2EgPSBmZWF0dXJlUmVkdWN0aW9uID09PSBudWxsIHx8IGZlYXR1cmVSZWR1Y3Rpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZlYXR1cmVSZWR1Y3Rpb24ucmVuZGVyZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hdXRob3JpbmdJbmZvKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaXNBdXRvR2VuZXJhdGVkKSk7XG59XG5cbmZ1bmN0aW9uIGlzU3VwcG9ydGVkU3ltYm9sKHN5bSkge1xuICAgIHJldHVybiBbXCJzaW1wbGUtZmlsbFwiLCBcInNpbXBsZS1tYXJrZXJcIiwgXCJzaW1wbGUtbGluZVwiLCBcInBpY3R1cmUtbWFya2VyXCIsIFwiY2ltXCJdLmluZGV4T2Yoc3ltLnR5cGUpID4gLTE7XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0U3ltYm9sKG1vZHVsZXMpIHtcbiAgICAvKlxuICAgIFwic3ltYm9sXCI6e1xuICAgICAgXCJ0eXBlXCI6XCJlc3JpU01TXCIsXG4gICAgICBcImNvbG9yXCI6WzIyNywxMzksNzksMjU1XSxcbiAgICAgIFwiYW5nbGVcIjowLFxuICAgICAgXCJ4b2Zmc2V0XCI6MCxcbiAgICAgIFwieW9mZnNldFwiOjAsXG4gICAgICBcInNpemVcIjo5LFxuICAgICAgXCJzdHlsZVwiOlwiZXNyaVNNU0NpcmNsZVwiLFxuICAgICAgXCJvdXRsaW5lXCI6e1xuICAgICAgICBcInR5cGVcIjpcImVzcmlTTFNcIixcbiAgICAgICAgXCJjb2xvclwiOls5Miw5Miw5Miw2NF0sXG4gICAgICAgIFwid2lkdGhcIjowLjc1LFxuICAgICAgICBcInN0eWxlXCI6XCJlc3JpU0xTU29saWRcIlxuICAgICAgfVxuICAgIH1cbiAgICAqL1xuICAgIGNvbnN0IHsgU2ltcGxlTGluZVN5bWJvbCwgU2ltcGxlTWFya2VyU3ltYm9sLCBDb2xvciB9ID0gbW9kdWxlcztcbiAgICBjb25zdCBvdXRsaW5lU3ltID0gbmV3IFNpbXBsZUxpbmVTeW1ib2woe1xuICAgICAgICBzdHlsZTogXCJzb2xpZFwiLFxuICAgICAgICBjb2xvcjogbmV3IENvbG9yKFs5MiwgOTIsIDkyLCA2NF0pLFxuICAgICAgICB3aWR0aDogMVxuICAgIH0pO1xuICAgIGNvbnN0IHN5bWJvbCA9IG5ldyBTaW1wbGVNYXJrZXJTeW1ib2woe1xuICAgICAgICBzdHlsZTogXCJjaXJjbGVcIixcbiAgICAgICAgc2l6ZTogNi43NSxcbiAgICAgICAgb3V0bGluZTogb3V0bGluZVN5bSxcbiAgICAgICAgY29sb3I6IG5ldyBDb2xvcihbMjI3LCAxMzksIDc5LCAyNTVdKVxuICAgIH0pO1xuICAgIHJldHVybiBzeW1ib2w7XG59XG5mdW5jdGlvbiBoYXNTeW1ib2xPdXRsaW5lKHN5bSkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gc3ltLnR5cGUgPT09IFwicGljdHVyZS1tYXJrZXJcIiA/IGZhbHNlIDogc3ltLnR5cGUgPT09IFwiY2ltXCIgPyBmYWxzZSA6ICEhKChfYSA9IHN5bS5vdXRsaW5lKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29sb3IpO1xufVxuZnVuY3Rpb24gaXNQaWN0dXJlTWFya2VyKHN5bSwgbW9kdWxlcykge1xuICAgIGlmIChzeW0udHlwZSA9PT0gXCJwaWN0dXJlLW1hcmtlclwiKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChzeW0udHlwZSA9PT0gXCJjaW1cIiAmJiAhaXNGaWxsT25seUNJTShzeW0sIG1vZHVsZXMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc0ZpbGxPbmx5Q0lNKHN5bSwgbW9kdWxlcykge1xuICAgIGNvbnN0IHsgY2ltU3ltYm9sVXRpbHMgfSA9IG1vZHVsZXM7XG4gICAgcmV0dXJuICEhY2ltU3ltYm9sVXRpbHMuZ2V0Q0lNU3ltYm9sQ29sb3Ioc3ltKTtcbn1cbmZ1bmN0aW9uIGdldFN5bWJvbENvbG9yKHN5bWJvbCwgbW9kdWxlcykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgeyBjaW1TeW1ib2xVdGlscywgQ29sb3IgfSA9IG1vZHVsZXM7XG4gICAgcmV0dXJuIChzeW1ib2wgPT09IG51bGwgfHwgc3ltYm9sID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzeW1ib2wudHlwZSkgPT09IFwiY2ltXCJcbiAgICAgICAgPyBDb2xvci5mcm9tSlNPTigoX2EgPSBjaW1TeW1ib2xVdGlscy5nZXRDSU1TeW1ib2xDb2xvcihzeW1ib2wpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudG9KU09OKCkpXG4gICAgICAgIDogKHN5bWJvbCA9PT0gbnVsbCB8fCBzeW1ib2wgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN5bWJvbC50eXBlKSA9PT0gXCJzaW1wbGUtbWFya2VyXCIgJiYgW1wieFwiLCBcImNyb3NzXCJdLmluZGV4T2Yoc3ltYm9sID09PSBudWxsIHx8IHN5bWJvbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3ltYm9sLnN0eWxlKSA+IC0xXG4gICAgICAgICAgICA/IChfYiA9IHN5bWJvbCA9PT0gbnVsbCB8fCBzeW1ib2wgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN5bWJvbC5vdXRsaW5lKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY29sb3JcbiAgICAgICAgICAgIDogc3ltYm9sID09PSBudWxsIHx8IHN5bWJvbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3ltYm9sLmNvbG9yO1xufVxuZnVuY3Rpb24gZ2V0U3ltYm9sU2l6ZShzeW0sIG1vZHVsZXMpIHtcbiAgICBjb25zdCB7IGNpbVN5bWJvbFV0aWxzIH0gPSBtb2R1bGVzO1xuICAgIGlmIChzeW0udHlwZSA9PT0gXCJjaW1cIikge1xuICAgICAgICByZXR1cm4gY2ltU3ltYm9sVXRpbHMuZ2V0Q0lNU3ltYm9sU2l6ZShzeW0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChzeW0uc2l6ZSkge1xuICAgICAgICByZXR1cm4gc3ltLnNpemU7XG4gICAgfVxuICAgIHJldHVybiBzeW0ud2lkdGg7XG59XG5mdW5jdGlvbiBhZGp1c3RBbHBoYShjb2xvciwgYWxwaGEpIHtcbiAgICBjb2xvci5hID0gYWxwaGE7XG4gICAgcmV0dXJuIGNvbG9yO1xufVxuXG5mdW5jdGlvbiBnZXRMYXllck51bWJlck9yU3RyaW5nRmllbGRzKGxheWVyKSB7XG4gICAgcmV0dXJuIGxheWVyLmZpZWxkcy5maWx0ZXIoKGZpZWxkKSA9PiBbXCJzbWFsbC1pbnRlZ2VyXCIsIFwiYmlnLWludGVnZXJcIiwgXCJpbnRlZ2VyXCIsIFwic2luZ2xlXCIsIFwiZG91YmxlXCIsIFwibG9uZ1wiLCBcIm51bWJlclwiLCBcInN0cmluZ1wiXS5pbmRleE9mKGZpZWxkLnR5cGUpID4gLTEpO1xufVxuZnVuY3Rpb24gZ2V0TGF5ZXJGaWVsZChsYXllciwgZmllbGROYW1lKSB7XG4gICAgcmV0dXJuIGZpZWxkTmFtZSAmJiBsYXllci5maWVsZHMuZmluZCgoZmllbGQpID0+IGZpZWxkLm5hbWUgPT09IGZpZWxkTmFtZSk7XG59XG5mdW5jdGlvbiBoYXNGaWVsZEFscmVhZHkobGF5ZXIsIGZpZWxkTmFtZSwgc3RhdGlzdGljVHlwZSkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBmZWF0dXJlUmVkdWN0aW9uID0gbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbjsgLy9fX2VzcmkuRmVhdHVyZVJlZHVjdGlvbkNsdXN0ZXI7XG4gICAgcmV0dXJuICEhKChfYSA9IGZlYXR1cmVSZWR1Y3Rpb24uZmllbGRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmluZCgoZmkgLyogX19lc3JpLkFnZ3JlZ2F0ZUZpZWxkICovKSA9PiBmaS5vblN0YXRpc3RpY0ZpZWxkID09PSBmaWVsZE5hbWUgJiYgZmkuc3RhdGlzdGljVHlwZSA9PT0gc3RhdGlzdGljVHlwZSkpO1xufVxuLypcbiAqIG5vIG1vcmUgc3RhdHMgb3B0aW9ucyBhdmFpbGFibGUgZm9yIHRoaXMgZmllbGRcbiAqL1xuZnVuY3Rpb24gaXNGaWVsZERvbmUobGF5ZXIsIGZpZWxkTmFtZSkge1xuICAgIGNvbnN0IGZpZWxkID0gZ2V0TGF5ZXJGaWVsZChsYXllciwgZmllbGROYW1lKTtcbiAgICBjb25zdCB0eXBlcyA9IGdldFN0YXRzVHlwZXMoZmllbGQpO1xuICAgIHJldHVybiAhdHlwZXMuZmluZCgodHlwZSkgPT4gIWhhc0ZpZWxkQWxyZWFkeShsYXllciwgZmllbGROYW1lLCB0eXBlKSk7XG59XG5mdW5jdGlvbiBnZXRTdGF0c1R5cGVzKGZpZWxkKSB7XG4gICAgcmV0dXJuIGZpZWxkLnR5cGUgPT09IFwic3RyaW5nXCIgPyBbXCJtb2RlXCJdIDogW1wic3VtXCIsIFwiYXZnXCIsIFwibWluXCIsIFwibWF4XCIsIC8qIFwidmFyXCIsIFwic3RkZGV2XCIsICovIFwibW9kZVwiXTtcbn1cbmZ1bmN0aW9uIGFkZFBvcHVwRmllbGQoYWdncmVnYXRlRmllbGQsIGxheWVyLCBtb2R1bGVzKSB7XG4gICAgLy8gZG9uJ3Qga25vdyB3aGVyZSB0byBzdG9yZSB0aGUgYWxpYXMgZm9yIHRoaXMgZmllbGQgb3RoZXJ3aXNlXG4gICAgLyogaWYgKGFnZ3JlZ2F0ZUZpZWxkLmlzQXV0b0dlbmVyYXRlZCAmJiBhZ2dyZWdhdGVGaWVsZC5zdGF0aXN0aWNUeXBlID09PSBcIm1vZGVcIikge1xuICAgICAgLy8gZG9uJ3QgYWRkIHRoaXMgZmllbGQgZ2VuZXJhdGVkIGZvciB0aGUgcmVuZGVyZXJcbiAgICAgIHJldHVybjtcbiAgICB9ICovXG4gICAgY29uc3QgeyBGaWVsZEluZm8gfSA9IG1vZHVsZXM7XG4gICAgY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247IC8vX19lc3JpLkZlYXR1cmVSZWR1Y3Rpb25DbHVzdGVyO1xuICAgIGNvbnN0IHsgcG9wdXBUZW1wbGF0ZSB9ID0gZmVhdHVyZVJlZHVjdGlvbjtcbiAgICBwb3B1cFRlbXBsYXRlLmZpZWxkSW5mb3MgPSBwb3B1cFRlbXBsYXRlLmZpZWxkSW5mb3MgfHwgW107XG4gICAgY29uc3QgZmllbGRJbmZvID0gcG9wdXBUZW1wbGF0ZS5maWVsZEluZm9zLmZpbmQoKGZpZWxkSW5mbykgPT4gZmllbGRJbmZvLmZpZWxkTmFtZSA9PT0gYWdncmVnYXRlRmllbGQubmFtZSk7XG4gICAgaWYgKCFmaWVsZEluZm8pIHtcbiAgICAgICAgcG9wdXBUZW1wbGF0ZS5maWVsZEluZm9zLnB1c2gobmV3IEZpZWxkSW5mbyh7XG4gICAgICAgICAgICBmaWVsZE5hbWU6IGFnZ3JlZ2F0ZUZpZWxkLm5hbWUsXG4gICAgICAgICAgICBsYWJlbDogYWdncmVnYXRlRmllbGQuYWxpYXMsXG4gICAgICAgICAgICBpc0VkaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgICAgICBmb3JtYXQ6IGdldEZvcm1hdChhZ2dyZWdhdGVGaWVsZCwgbGF5ZXIpXG4gICAgICAgIH0pKTtcbiAgICB9IC8vIGVsc2UgZmllbGRJbmZvIGlzIGFscmVhZHkgdGhlcmVcbn1cbmZ1bmN0aW9uIGdldFBvcHVwRmllbGRJbmZvKGxheWVyLCBmaWVsZE5hbWUpIHtcbiAgICBjb25zdCBmZWF0dXJlUmVkdWN0aW9uID0gbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbjtcbiAgICByZXR1cm4gZmVhdHVyZVJlZHVjdGlvbi5wb3B1cFRlbXBsYXRlLmZpZWxkSW5mb3MuZmluZCgoZmllbGRJbmZvKSA9PiBmaWVsZEluZm8uZmllbGROYW1lID09PSBmaWVsZE5hbWUpO1xufVxuZnVuY3Rpb24gZ2V0Rm9ybWF0KGFnZ3JlZ2F0ZUZpZWxkLCBsYXllcikge1xuICAgIGNvbnN0IHN0YXRzRmllbGQgPSBhZ2dyZWdhdGVGaWVsZC5vblN0YXRpc3RpY0ZpZWxkO1xuICAgIGNvbnN0IHN0YXRzRXhwciA9IGFnZ3JlZ2F0ZUZpZWxkLm9uU3RhdGlzdGljRXhwcmVzc2lvbjtcbiAgICBjb25zdCBpc1N1bSA9IGFnZ3JlZ2F0ZUZpZWxkLnN0YXRpc3RpY1R5cGUgPT09IFwic3VtXCI7XG4gICAgY29uc3QgaXNDb3VudCA9IGFnZ3JlZ2F0ZUZpZWxkLnN0YXRpc3RpY1R5cGUgPT09IFwiY291bnRcIjtcbiAgICBjb25zdCBmaWVsZCA9IGdldExheWVyRmllbGQobGF5ZXIsIHN0YXRzRmllbGQpO1xuICAgIGNvbnN0IGlzSW50ID0gaXNDb3VudCB8fFxuICAgICAgICAoc3RhdHNFeHByICYmIGlzU3VtKSB8fFxuICAgICAgICAoZmllbGQgJiYgW1wic21hbGwtaW50ZWdlclwiLCBcImJpZy1pbnRlZ2VyXCIsIFwiaW50ZWdlclwiLCBcImxvbmdcIiwgXCJudW1iZXJcIl0uaW5kZXhPZihmaWVsZC50eXBlKSA+IC0xKTtcbiAgICBjb25zdCBpc0RvdWJsZSA9IGZpZWxkICYmIFtcInNpbmdsZVwiLCBcImRvdWJsZVwiXS5pbmRleE9mKGZpZWxkLnR5cGUpID4gLTE7XG4gICAgcmV0dXJuIGlzRG91YmxlXG4gICAgICAgID8ge1xuICAgICAgICAgICAgZGlnaXRTZXBhcmF0b3I6IHRydWUsXG4gICAgICAgICAgICBwbGFjZXM6IDFcbiAgICAgICAgfVxuICAgICAgICA6IGlzSW50XG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBkaWdpdFNlcGFyYXRvcjogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG59XG5cbmNvbnN0IGFyY2dpc0FnZ3JlZ2F0aW9uQ3NzID0gXCI6aG9zdHtoZWlnaHQ6MTAwJX0uZmxvd3toZWlnaHQ6MTAwJX0ucGFuZWx7aGVpZ2h0OjEwMCV9LnRvZ2dsZXtiYWNrZ3JvdW5kLWNvbG9yOndoaXRlO3BhZGRpbmc6MTVweCAxMHB4IDVweCAxMHB4fVwiO1xuXG5jb25zdCBBcmNnaXNBZ2dyZWdhdGlvbiA9IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgICAgIHRoaXMuYXJjZ2lzQWdncmVnYXRpb25TdHlsZUNsaWNrID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNBZ2dyZWdhdGlvblN0eWxlQ2xpY2tcIiwgNyk7XG4gICAgICAgIHRoaXMuYXJjZ2lzQWdncmVnYXRpb25DbG9zZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzQWdncmVnYXRpb25DbG9zZVwiLCA3KTtcbiAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkNoYW5nZWQgPSBjcmVhdGVFdmVudCh0aGlzLCBcImFyY2dpc0FnZ3JlZ2F0aW9uQ2hhbmdlZFwiLCA3KTtcbiAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkVycm9yID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNBZ2dyZWdhdGlvbkVycm9yXCIsIDcpO1xuICAgICAgICB0aGlzLnRpbGVOb2RlcyA9IFtdO1xuICAgICAgICB0aGlzLmxhc3RGZWF0dXJlUmVkdWN0aW9uID0gW107XG4gICAgICAgIHRoaXMudmlldyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYXllciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wb3J0YWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY29uZmlnID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmhpZGVMYXllclRpdGxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gIFB1YmxpYyBNZXRob2RzXG4gICAgLy9cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLyoqXG4gICAgICogU2V0IGZvY3VzIG9uIGNvbXBvbmVudFxuICAgICAqL1xuICAgIGFzeW5jIHNldEZvY3VzKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuZmxvd0l0ZW1Ob2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0Rm9jdXMoKTtcbiAgICB9XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gIExpZmVjeWNsZVxuICAgIC8vXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGFzeW5jIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgICAgICBjb25zdCBbc3RyaW5ncywgY3VycmVudExhbmd1YWdlXSA9IGF3YWl0IGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3ModGhpcy5ob3N0RWxlbWVudCk7XG4gICAgICAgIHRoaXMuc3RyaW5ncyA9IHN0cmluZ3M7XG4gICAgICAgIHRoaXMubG9jYWxlID0gY3VycmVudExhbmd1YWdlO1xuICAgICAgICBjb25zdCBbcG9wdXBDbHVzdGVycywgcG9wdXBVdGlscywgYmluTGV2ZWwsIGNsdXN0ZXJMYWJlbENyZWF0b3IsIGJpbkxhYmVsQ3JlYXRvciwgQWdncmVnYXRlRmllbGQsIEZpZWxkSW5mbywgcGllQ2hhcnRDcmVhdG9yLCBjb2xvckNyZWF0b3IsIFNpbXBsZVJlbmRlcmVyXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcbiAgICAgICAgICAgIFwiZXNyaS9zbWFydE1hcHBpbmcvcG9wdXAvY2x1c3RlcnNcIixcbiAgICAgICAgICAgIFwiZXNyaS9zdXBwb3J0L3BvcHVwVXRpbHNcIixcbiAgICAgICAgICAgIFwiZXNyaS9zbWFydE1hcHBpbmcvaGV1cmlzdGljcy9iaW5MZXZlbFwiLFxuICAgICAgICAgICAgXCJlc3JpL3NtYXJ0TWFwcGluZy9sYWJlbHMvY2x1c3RlcnNcIixcbiAgICAgICAgICAgIFwiZXNyaS9zbWFydE1hcHBpbmcvbGFiZWxzL2JpbnNcIixcbiAgICAgICAgICAgIFwiZXNyaS9sYXllcnMvc3VwcG9ydC9BZ2dyZWdhdGVGaWVsZFwiLFxuICAgICAgICAgICAgXCJlc3JpL3BvcHVwL0ZpZWxkSW5mb1wiLFxuICAgICAgICAgICAgXCJlc3JpL3NtYXJ0TWFwcGluZy9yZW5kZXJlcnMvcGllQ2hhcnRcIixcbiAgICAgICAgICAgIFwiZXNyaS9zbWFydE1hcHBpbmcvcmVuZGVyZXJzL2NvbG9yXCIsXG4gICAgICAgICAgICBcImVzcmkvcmVuZGVyZXJzL1NpbXBsZVJlbmRlcmVyXCJcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMubW9kdWxlcyA9IHtcbiAgICAgICAgICAgIHBvcHVwQ2x1c3RlcnMsXG4gICAgICAgICAgICBwb3B1cFV0aWxzLFxuICAgICAgICAgICAgYmluTGV2ZWwsXG4gICAgICAgICAgICBjbHVzdGVyTGFiZWxDcmVhdG9yLFxuICAgICAgICAgICAgYmluTGFiZWxDcmVhdG9yLFxuICAgICAgICAgICAgQWdncmVnYXRlRmllbGQsXG4gICAgICAgICAgICBGaWVsZEluZm8sXG4gICAgICAgICAgICBwaWVDaGFydENyZWF0b3IsXG4gICAgICAgICAgICBjb2xvckNyZWF0b3IsXG4gICAgICAgICAgICBTaW1wbGVSZW5kZXJlclxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB7IHZpZXcsIGxheWVyIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLnByb3BzID0ge1xuICAgICAgICAgICAgdmlldyxcbiAgICAgICAgICAgIGxheWVyXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgeyBwcm9wcywgbW9kdWxlcyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBsYXllciB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IHsgQWdncmVnYXRlRmllbGQgfSA9IG1vZHVsZXM7XG4gICAgICAgIGNvbnN0IGZlYXR1cmVSZWR1Y3Rpb24gPSBsYXllci5mZWF0dXJlUmVkdWN0aW9uO1xuICAgICAgICBpZiAoZmVhdHVyZVJlZHVjdGlvbiAmJiAhKChfYSA9IGZlYXR1cmVSZWR1Y3Rpb24uZmllbGRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSkge1xuICAgICAgICAgICAgLy8gd2UgbmVlZCBhdCBsZWFzdCBvbmUgZmllbGRcbiAgICAgICAgICAgIGNvbnN0IGFnZ3JlZ2F0ZUZpZWxkID0gbmV3IEFnZ3JlZ2F0ZUZpZWxkKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFnZ3JlZ2F0ZUNvdW50XCIsXG4gICAgICAgICAgICAgICAgb25TdGF0aXN0aWNGaWVsZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBcImFnZ3JlZ2F0ZUNvdW50XCIsXG4gICAgICAgICAgICAgICAgc3RhdGlzdGljVHlwZTogXCJjb3VudFwiLFxuICAgICAgICAgICAgICAgIHZpc2libGU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbi5maWVsZHMgPSBbYWdncmVnYXRlRmllbGRdO1xuICAgICAgICB9XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmZsb3dJdGVtTm9kZS5zZXRGb2N1cygpKTtcbiAgICB9XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBSZW5kZXIgTWV0aG9kc1xuICAgIC8vXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciwgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChoKEhvc3QsIHsgY2xhc3M6IFwiY2FsY2l0ZS1tYXRjaC1oZWlnaHRcIiB9LCBoKFwiY2FsY2l0ZS1mbG93XCIsIHsgY2xhc3M6IFwiZmxvd1wiLCBkaXI6IGdldEVsZW1lbnREaXIodGhpcy5ob3N0RWxlbWVudCksIHJlZjogKG5vZGUpID0+ICh0aGlzLmZsb3dOb2RlID0gbm9kZSkgfSwgbGF5ZXIuZmVhdHVyZUVmZmVjdCA/IHRoaXMucmVuZGVyTXNnKCkgOiB0aGlzLnJlbmRlckNvbnRlbnQoKSwgKG9wdGlvbnMgPT09IEFnZ3JlZ2F0aW9uVHlwZS5DTFVTVEVSSU5HIHx8XG4gICAgICAgICAgICBvcHRpb25zID09PSBBZ2dyZWdhdGlvblR5cGUuQ0hBUlRfQ0xVU1RFUklORykgJiZcbiAgICAgICAgICAgIHRoaXMucmVuZGVyQ2x1c3RlcmluZ09wdGlvbnMoKSwgb3B0aW9ucyA9PT0gQWdncmVnYXRpb25UeXBlLkJJTk5JTkcgJiYgdGhpcy5yZW5kZXJCaW5uaW5nT3B0aW9ucygpKSkpO1xuICAgIH1cbiAgICByZW5kZXJDb250ZW50KCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgY29uc3QgeyBwcm9wcywgaGlkZUxheWVyVGl0bGUsIGNvbmZpZywgZmxvd0l0ZW1Ob2RlLCB0aWxlTm9kZXMsIHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCBmZWF0dXJlUmVkdWN0aW9uID0gbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbjtcbiAgICAgICAgY29uc3QgcnRsID0gZ2V0RWxlbWVudERpcih0aGlzLmhvc3RFbGVtZW50KSA9PT0gXCJydGxcIjtcbiAgICAgICAgY29uc3QgZ2VuZXJhbFByb3BzID0geyBmbG93SXRlbU5vZGUsIHN0cmluZ3MsIGNvbmZpZyB9O1xuICAgICAgICBjb25zdCB7IHJlbmRlcmVyIH0gPSBsYXllcjtcbiAgICAgICAgY29uc3QgaXNVbmlxdWVWYWx1ZSA9IHJlbmRlcmVyLnR5cGUgPT09IFwidW5pcXVlLXZhbHVlXCI7XG4gICAgICAgIGNvbnN0IGlzTXVsdGlGaWVsZFR5cGVzID0gaXNVbmlxdWVWYWx1ZSAmJiAhIXJlbmRlcmVyLmZpZWxkMjtcbiAgICAgICAgY29uc3QgaXNIZWF0bWFwID0gcmVuZGVyZXIudHlwZSA9PT0gXCJoZWF0bWFwXCI7XG4gICAgICAgIGNvbnN0IHVzZXNBcmNhZGUgPSAhIXJlbmRlcmVyLnZhbHVlRXhwcmVzc2lvbjtcbiAgICAgICAgY29uc3QgaXNDbGFzc2VkQ29sb3IgPSByZW5kZXJlci50eXBlID09PSBcImNsYXNzLWJyZWFrc1wiICYmICgoX2EgPSByZW5kZXJlci5hdXRob3JpbmdJbmZvKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHlwZSkgPT09IFwiY2xhc3MtYnJlYWtzLWNvbG9yXCI7XG4gICAgICAgIGNvbnN0IGluZm9zQ291bnQgPSBpc1VuaXF1ZVZhbHVlXG4gICAgICAgICAgICA/IChfYiA9IHJlbmRlcmVyLnVuaXF1ZVZhbHVlSW5mb3MpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5sZW5ndGhcbiAgICAgICAgICAgIDogaXNDbGFzc2VkQ29sb3JcbiAgICAgICAgICAgICAgICA/IChfYyA9IHJlbmRlcmVyLmNsYXNzQnJlYWtJbmZvcykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmxlbmd0aFxuICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgY29uc3QgYWxsb3dDbHVzdGVyaW5nID0gIWlzSGVhdG1hcCAmJiAhaXNNdWx0aUZpZWxkVHlwZXM7XG4gICAgICAgIGNvbnN0IGFsbG93Q2hhcnQgPSAoaXNVbmlxdWVWYWx1ZSB8fCBpc0NsYXNzZWRDb2xvcikgJiYgaW5mb3NDb3VudCA8PSAxMCAmJiAhaXNNdWx0aUZpZWxkVHlwZXMgJiYgIXVzZXNBcmNhZGU7XG4gICAgICAgIGNvbnN0IGFnZ3JlZ2F0aW9uVHlwZSA9IGdldEFnZ3JlZ2F0aW9uVHlwZShsYXllcik7XG4gICAgICAgIHJldHVybiAoaChcImNhbGNpdGUtZmxvdy1pdGVtXCIsIHsgaGVhZGluZzogc3RyaW5ncy5hZ2dyZWdhdGlvbiwgZGVzY3JpcHRpb246ICFoaWRlTGF5ZXJUaXRsZSA/IGxheWVyLnRpdGxlIDogdW5kZWZpbmVkLCBjbGFzczoge1xuICAgICAgICAgICAgICAgIHBhbmVsOiB0cnVlLFxuICAgICAgICAgICAgICAgIFtDU1NfVVRJTElUWS5ydGxdOiBydGxcbiAgICAgICAgICAgIH0sIGNsb3NhYmxlOiB0cnVlLCBvbkNhbGNpdGVGbG93SXRlbUNsb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkNsb3NlLmVtaXQoKTtcbiAgICAgICAgICAgIH0sIHJlZjogKG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dJdGVtTm9kZSA9IG5vZGU7XG4gICAgICAgICAgICB9IH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJ0b2dnbGVcIiB9LCBoKFwiY2FsY2l0ZS1sYWJlbFwiLCB7IGxheW91dDogXCJpbmxpbmUtc3BhY2UtYmV0d2VlblwiIH0sIHN0cmluZ3MuZW5hYmxlQWdncmVnYXRpb24sIGgoXCJjYWxjaXRlLXN3aXRjaFwiLCB7IHNjYWxlOiBcInNcIiwgY2hlY2tlZDogISFmZWF0dXJlUmVkdWN0aW9uLCBsYWJlbDogc3RyaW5ncy5lbmFibGVBZ2dyZWdhdGlvbiwgb25DYWxjaXRlU3dpdGNoQ2hhbmdlOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlVG9nZ2xlQ2x1c3RlcmluZyhldmVudCksIHJlZjogKG5vZGUpID0+ICh0aGlzLnN3aXRjaE5vZGUgPSBub2RlKSB9KSkpLCBoKFwiZGl2XCIsIG51bGwsIGFsbG93Q2x1c3RlcmluZyAmJiAoaChcImFyY2dpcy1hZ2dyZWdhdGlvbi10aWxlXCIsIHsgcHJvcHM6IE9iamVjdC5hc3NpZ24oeyB0aXRsZTogc3RyaW5ncy5jbHVzdGVyaW5nLCBpbWFnZVBhdGg6IGdldEFzc2V0UGF0aChgLi9hc3NldHMvYXJjZ2lzLWFnZ3JlZ2F0aW9uLXRodW1ibmFpbHMvY2x1c3RlcmluZy5qcGdgKSwgbW9yZUluZm86IHN0cmluZ3MuaW5mby5jbHVzdGVyaW5nLCBoZWxwSWQ6IFwiMTIwMDAzOTI3XCIgfSwgZ2VuZXJhbFByb3BzKSwgc2VsZWN0ZWQ6IGFnZ3JlZ2F0aW9uVHlwZSA9PT0gXCJjbHVzdGVyXCIsIHJlZjogKG5vZGUpID0+ICh0aWxlTm9kZXNbXCJjbHVzdGVyXCJdID0gbm9kZSksIG9uQXJjZ2lzQWdncmVnYXRpb25UaWxlU2VsZWN0OiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbmFibGVBZ2dyZWdhdGlvbihcImNsdXN0ZXJcIik7XG4gICAgICAgICAgICAgICAgZm9yY2VVcGRhdGUodGhpcy5ob3N0RWxlbWVudCk7XG4gICAgICAgICAgICB9LCBvbkFyY2dpc0FnZ3JlZ2F0aW9uVGlsZU9wdGlvbnM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBBZ2dyZWdhdGlvblR5cGUuQ0xVU1RFUklORztcbiAgICAgICAgICAgICAgICBmb3JjZVVwZGF0ZSh0aGlzLmhvc3RFbGVtZW50KTtcbiAgICAgICAgICAgIH0gfSkpLCBhbGxvd0NoYXJ0ICYmIChoKFwiYXJjZ2lzLWFnZ3JlZ2F0aW9uLXRpbGVcIiwgeyBwcm9wczogT2JqZWN0LmFzc2lnbih7IHRpdGxlOiBzdHJpbmdzLmNoYXJ0Q2x1c3RlcmluZywgaW1hZ2VQYXRoOiBnZXRBc3NldFBhdGgoYC4vYXNzZXRzL2FyY2dpcy1hZ2dyZWdhdGlvbi10aHVtYm5haWxzL2NoYXJ0Q2x1c3RlcmluZy5qcGdgKSwgbW9yZUluZm86IHN0cmluZ3MuaW5mby5jaGFydENsdXN0ZXJpbmcsIGhlbHBJZDogXCIxMjAwMDM5MjdcIiB9LCBnZW5lcmFsUHJvcHMpLCBzZWxlY3RlZDogYWdncmVnYXRpb25UeXBlID09PSBcInBpZS1jaGFydFwiLCByZWY6IChub2RlKSA9PiAodGlsZU5vZGVzW1wicGllLWNoYXJ0XCJdID0gbm9kZSksIG9uQXJjZ2lzQWdncmVnYXRpb25UaWxlU2VsZWN0OiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbmFibGVBZ2dyZWdhdGlvbihcInBpZS1jaGFydFwiKTtcbiAgICAgICAgICAgICAgICBmb3JjZVVwZGF0ZSh0aGlzLmhvc3RFbGVtZW50KTtcbiAgICAgICAgICAgIH0sIG9uQXJjZ2lzQWdncmVnYXRpb25UaWxlT3B0aW9uczogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IEFnZ3JlZ2F0aW9uVHlwZS5DSEFSVF9DTFVTVEVSSU5HO1xuICAgICAgICAgICAgICAgIGZvcmNlVXBkYXRlKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgICAgICAgICAgfSB9KSksIChoKFwiYXJjZ2lzLWFnZ3JlZ2F0aW9uLXRpbGVcIiwgeyBwcm9wczogT2JqZWN0LmFzc2lnbih7IHRpdGxlOiBzdHJpbmdzLmJpbm5pbmcsIGltYWdlUGF0aDogZ2V0QXNzZXRQYXRoKGAuL2Fzc2V0cy9hcmNnaXMtYWdncmVnYXRpb24tdGh1bWJuYWlscy9iaW5uaW5nLmpwZ2ApLCBtb3JlSW5mbzogc3RyaW5ncy5pbmZvLmJpbm5pbmcsIGhlbHBJZDogXCIxMjAwMDM5MjZcIiB9LCBnZW5lcmFsUHJvcHMpLCBzZWxlY3RlZDogYWdncmVnYXRpb25UeXBlID09PSBcImJpbm5pbmdcIiwgcmVmOiAobm9kZSkgPT4gKHRpbGVOb2Rlc1tcImJpbm5pbmdcIl0gPSBub2RlKSwgb25BcmNnaXNBZ2dyZWdhdGlvblRpbGVTZWxlY3Q6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmVuYWJsZUFnZ3JlZ2F0aW9uKFwiYmlubmluZ1wiKTtcbiAgICAgICAgICAgICAgICBmb3JjZVVwZGF0ZSh0aGlzLmhvc3RFbGVtZW50KTtcbiAgICAgICAgICAgIH0sIG9uQXJjZ2lzQWdncmVnYXRpb25UaWxlT3B0aW9uczogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IEFnZ3JlZ2F0aW9uVHlwZS5CSU5OSU5HO1xuICAgICAgICAgICAgICAgIGZvcmNlVXBkYXRlKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgICAgICAgICAgfSB9KSkpKSk7XG4gICAgfVxuICAgIHJlbmRlck1zZygpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciwgaGlkZUxheWVyVGl0bGUsIHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHJ0bCA9IGdldEVsZW1lbnREaXIodGhpcy5ob3N0RWxlbWVudCkgPT09IFwicnRsXCI7XG4gICAgICAgIHJldHVybiAoaChcImNhbGNpdGUtZmxvdy1pdGVtXCIsIHsgaGVhZGluZzogc3RyaW5ncy5hZ2dyZWdhdGlvbiwgZGVzY3JpcHRpb246ICFoaWRlTGF5ZXJUaXRsZSA/IGxheWVyLnRpdGxlIDogdW5kZWZpbmVkLCBjbGFzczoge1xuICAgICAgICAgICAgICAgIHBhbmVsOiB0cnVlLFxuICAgICAgICAgICAgICAgIFtDU1NfVVRJTElUWS5ydGxdOiBydGxcbiAgICAgICAgICAgIH0sIGNsb3NhYmxlOiB0cnVlLCBvbkNhbGNpdGVGbG93SXRlbUNsb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkNsb3NlLmVtaXQoKTtcbiAgICAgICAgICAgIH0sIHJlZjogKG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dJdGVtTm9kZSA9IG5vZGU7XG4gICAgICAgICAgICB9IH0sIGgoXCJjYWxjaXRlLXRpcFwiLCB7IFwibm9uLWRpc21pc3NpYmxlXCI6IHRydWUgfSwgc3RyaW5ncy5jbHVzdGVyLmxlTm90U3VwcG9ydGVkTWVzc2FnZSkpKTtcbiAgICB9XG4gICAgcmVuZGVyQ2x1c3RlcmluZ09wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IHsgcHJvcHMsIGhpZGVMYXllclRpdGxlLCBwb3J0YWwsIGNvbmZpZywgZmxvd05vZGUsIHN0cmluZ3MsIGxvY2FsZSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBsYXllciwgdmlldyB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiAoaChcImFyY2dpcy1hZ2dyZWdhdGlvbi1jbHVzdGVyaW5nXCIsIHsgdmlldzogdmlldywgbGF5ZXI6IGxheWVyLCBwb3J0YWw6IHBvcnRhbCwgY29uZmlnOiBjb25maWcsIGZsb3dOb2RlOiBmbG93Tm9kZSwgaGlkZUxheWVyVGl0bGU6IGhpZGVMYXllclRpdGxlLCBzdHJpbmdzOiBzdHJpbmdzLCBjdXJyZW50TGFuZ3VhZ2U6IGxvY2FsZSwgb25BcmNnaXNBZ2dyZWdhdGlvbkNsdXN0ZXJpbmdDaGFuZ2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uQ2hhbmdlZC5lbWl0KCk7XG4gICAgICAgICAgICB9LCBvbkFyY2dpc0FnZ3JlZ2F0aW9uQ2x1c3RlcmluZ0Rpc21pc3NlZENoYW5nZTogKCkgPT4geyB9LCBvbkNhbGNpdGVQYW5lbEJhY2tDbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0gfSkpO1xuICAgIH1cbiAgICByZW5kZXJCaW5uaW5nT3B0aW9ucygpIHtcbiAgICAgICAgY29uc3QgeyBwcm9wcywgaGlkZUxheWVyVGl0bGUsIHBvcnRhbCwgY29uZmlnLCBmbG93Tm9kZSwgc3RyaW5ncywgbG9jYWxlIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGxheWVyLCB2aWV3IH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIChoKFwiYXJjZ2lzLWFnZ3JlZ2F0aW9uLWJpbm5pbmdcIiwgeyB2aWV3OiB2aWV3LCBsYXllcjogbGF5ZXIsIHBvcnRhbDogcG9ydGFsLCBjb25maWc6IGNvbmZpZywgZmxvd05vZGU6IGZsb3dOb2RlLCBoaWRlTGF5ZXJUaXRsZTogaGlkZUxheWVyVGl0bGUsIHN0cmluZ3M6IHN0cmluZ3MsIGN1cnJlbnRMYW5ndWFnZTogbG9jYWxlLCBvbkFyY2dpc0FnZ3JlZ2F0aW9uQmlubmluZ0NoYW5nZTogKCkgPT4gdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkNoYW5nZWQuZW1pdCgpLCBvbkFyY2dpc0FnZ3JlZ2F0aW9uQmlubmluZ1N0eWxlQ2xpY2s6ICgpID0+IHRoaXMuYXJjZ2lzQWdncmVnYXRpb25TdHlsZUNsaWNrLmVtaXQoKSwgb25BcmNnaXNBZ2dyZWdhdGlvbkJpbm5pbmdEaXNtaXNzZWRDaGFuZ2U6ICgpID0+IHsgfSwgb25DYWxjaXRlUGFuZWxCYWNrQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IH0pKTtcbiAgICB9XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBQcml2YXRlIG1ldGhvZHNcbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgYXN5bmMgaGFuZGxlVG9nZ2xlQ2x1c3RlcmluZyhldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5jaGVja2VkKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmVuYWJsZUFnZ3JlZ2F0aW9uKFwiZGVmYXVsdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZUFnZ3JlZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yY2VVcGRhdGUodGhpcy5ob3N0RWxlbWVudCk7XG4gICAgfVxuICAgIGFzeW5jIGVuYWJsZUFnZ3JlZ2F0aW9uKHR5cGUpIHtcbiAgICAgICAgY29uc3QgeyBwcm9wcywgZmxvd0l0ZW1Ob2RlIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGxheWVyIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgeyByZW5kZXJlciB9ID0gbGF5ZXI7XG4gICAgICAgIGNvbnN0IGlzVW5pcXVlVmFsdWUgPSByZW5kZXJlci50eXBlID09PSBcInVuaXF1ZS12YWx1ZVwiO1xuICAgICAgICBjb25zdCBpc011bHRpRmllbGRUeXBlcyA9IGlzVW5pcXVlVmFsdWUgJiYgISFyZW5kZXJlci5maWVsZDI7XG4gICAgICAgIGNvbnN0IGlzSGVhdG1hcCA9IHJlbmRlcmVyLnR5cGUgPT09IFwiaGVhdG1hcFwiO1xuICAgICAgICBpZiAodHlwZSA9PT0gXCJkZWZhdWx0XCIgJiZcbiAgICAgICAgICAgIHRoaXMubGFzdEZlYXR1cmVSZWR1Y3Rpb25UeXBlICYmXG4gICAgICAgICAgICB0aGlzLmxhc3RGZWF0dXJlUmVkdWN0aW9uW3RoaXMubGFzdEZlYXR1cmVSZWR1Y3Rpb25UeXBlXSkge1xuICAgICAgICAgICAgbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbiA9IHRoaXMubGFzdEZlYXR1cmVSZWR1Y3Rpb25bdGhpcy5sYXN0RmVhdHVyZVJlZHVjdGlvblR5cGVdO1xuICAgICAgICAgICAgbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24uY2xvbmUoKTtcbiAgICAgICAgICAgIHRoaXMuYXJjZ2lzQWdncmVnYXRpb25DaGFuZ2VkLmVtaXQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICAgICAgICAgIGlmICghaXNIZWF0bWFwICYmICFpc011bHRpRmllbGRUeXBlcykge1xuICAgICAgICAgICAgICAgICAgICB0eXBlID0gXCJjbHVzdGVyXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0eXBlID0gXCJiaW5uaW5nXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc2F2ZSB3aGF0IHdlIGhhdmUgbm93XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VHlwZSA9IGdldEFnZ3JlZ2F0aW9uVHlwZShsYXllcik7XG4gICAgICAgICAgICBpZiAoY3VycmVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RGZWF0dXJlUmVkdWN0aW9uW2N1cnJlbnRUeXBlXSA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5sYXN0RmVhdHVyZVJlZHVjdGlvblt0eXBlXSkge1xuICAgICAgICAgICAgICAgIGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24gPSB0aGlzLmxhc3RGZWF0dXJlUmVkdWN0aW9uW3R5cGVdO1xuICAgICAgICAgICAgICAgIGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24gPSBsYXllci5mZWF0dXJlUmVkdWN0aW9uLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkNoYW5nZWQuZW1pdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZmxvd0l0ZW1Ob2RlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJiaW5uaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlQmlubmluZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVDbHVzdGVyKHR5cGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZsb3dJdGVtTm9kZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24gPSBsYXllci5mZWF0dXJlUmVkdWN0aW9uLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXJjZ2lzQWdncmVnYXRpb25DaGFuZ2VkLmVtaXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZmxvd0l0ZW1Ob2RlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkVycm9yLmVtaXQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJBZ2dyZWdhdGlvbiBzdHlsZSBjb3VsZCBub3QgYmUgY2hhbmdlZC5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBmb3JjZVVwZGF0ZSh0aGlzLmhvc3RFbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgY3JlYXRlQ2x1c3Rlcih0eXBlKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IHsgcHJvcHMsIHN3aXRjaE5vZGUsIHRpbGVOb2RlcywgbW9kdWxlcyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBsYXllciwgdmlldyB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IHsgcG9wdXBDbHVzdGVycywgY2x1c3RlckxhYmVsQ3JlYXRvciwgcGllQ2hhcnRDcmVhdG9yIH0gPSBtb2R1bGVzO1xuICAgICAgICBjb25zdCBsYXN0RmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBsYWJlbFNjaGVtZXMgPSB0eXBlID09PSBcImNsdXN0ZXJcIiAmJlxuICAgICAgICAgICAgICAgIChhd2FpdCBjbHVzdGVyTGFiZWxDcmVhdG9yLmdldExhYmVsU2NoZW1lcyh7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyOiBsYXllcixcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXI6IGxheWVyLnJlbmRlcmVyLFxuICAgICAgICAgICAgICAgICAgICB2aWV3OiB2aWV3XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImNsdXN0ZXJcIixcbiAgICAgICAgICAgICAgICBjbHVzdGVyTWluU2l6ZTogKChfYSA9IGxhYmVsU2NoZW1lcyA9PT0gbnVsbCB8fCBsYWJlbFNjaGVtZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxhYmVsU2NoZW1lcy5wcmltYXJ5U2NoZW1lKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2x1c3Rlck1pblNpemUpIHx8IGNsdXN0ZXJpbmdTaXplTWluVmFsLFxuICAgICAgICAgICAgICAgIGNsdXN0ZXJNYXhTaXplOiBjbHVzdGVyaW5nU2l6ZU1heEluaXRpYWxWYWwsXG4gICAgICAgICAgICAgICAgY2x1c3RlclJhZGl1czogY2x1c3RlcmluZ1JhZGl1c0luaXRpYWxWYWwsXG4gICAgICAgICAgICAgICAgbGFiZWxzVmlzaWJsZTogdHlwZSA9PT0gXCJjbHVzdGVyXCIsXG4gICAgICAgICAgICAgICAgbGFiZWxpbmdJbmZvOiAoX2IgPSBsYWJlbFNjaGVtZXMgPT09IG51bGwgfHwgbGFiZWxTY2hlbWVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsYWJlbFNjaGVtZXMucHJpbWFyeVNjaGVtZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmxhYmVsaW5nSW5mb1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJwaWUtY2hhcnRcIikge1xuICAgICAgICAgICAgICAgIC8vIGZvciBjaGFydCBjbHVzdGVyaW5nIGNyZWF0ZSBhIHBpZS1jaGFydCByZW5kZXJlciBub3dcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBhd2FpdCBwaWVDaGFydENyZWF0b3IuY3JlYXRlUmVuZGVyZXJGb3JDbHVzdGVyaW5nKHsgbGF5ZXIgfSk7XG4gICAgICAgICAgICAgICAgbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbi5yZW5kZXJlciA9IHJlc3VsdC5yZW5kZXJlcjtcbiAgICAgICAgICAgICAgICBsYXllci5mZWF0dXJlUmVkdWN0aW9uLmZpZWxkcyA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24uZmllbGRzLmNvbmNhdChyZXN1bHQuZmllbGRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gYXdhaXQgcG9wdXBDbHVzdGVycy5nZXRUZW1wbGF0ZXMoe1xuICAgICAgICAgICAgICAgIHJlbmRlcmVyOiBsYXllci5yZW5kZXJlcixcbiAgICAgICAgICAgICAgICBsYXllcjogbGF5ZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwiY2x1c3RlclwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9wdXBUZW1wbGF0ZSA9IHRlbXBsYXRlLnByaW1hcnlUZW1wbGF0ZS52YWx1ZTtcbiAgICAgICAgICAgICAgICBsYXllci5mZWF0dXJlUmVkdWN0aW9uLnBvcHVwVGVtcGxhdGUgPSBwb3B1cFRlbXBsYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gcGllLWNoYXJ0XG4gICAgICAgICAgICAgICAgY29uc3QgcG9wdXBUZW1wbGF0ZSA9IHRlbXBsYXRlLnNlY29uZGFyeVRlbXBsYXRlc1swXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBsYXllci5mZWF0dXJlUmVkdWN0aW9uLnBvcHVwVGVtcGxhdGUgPSBwb3B1cFRlbXBsYXRlO1xuICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgZmllbGRzIGZyb20gdGhlIHJlbmRlcmVyIHRvIHRoZSBwb3B1cCBhcyB3ZWxsXG4gICAgICAgICAgICAgICAgcmVzdWx0LmZpZWxkcy5mb3JFYWNoKChhZ2dyZWdhdGVGaWVsZCkgPT4gYWRkUG9wdXBGaWVsZChhZ2dyZWdhdGVGaWVsZCwgbGF5ZXIsIG1vZHVsZXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbiA9IGxhc3RGZWF0dXJlUmVkdWN0aW9uO1xuICAgICAgICAgICAgaWYgKGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0aWxlTm9kZXNbZ2V0QWdncmVnYXRpb25UeXBlKGxheWVyKV0uc2V0Rm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN3aXRjaE5vZGUuc2V0Rm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGNyZWF0ZUJpbm5pbmcoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IHsgcHJvcHMsIHN3aXRjaE5vZGUsIHRpbGVOb2RlcywgbW9kdWxlcyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBsYXllciwgdmlldyB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IHsgcG9wdXBVdGlscywgYmluTGV2ZWwsIGJpbkxhYmVsQ3JlYXRvciwgQWdncmVnYXRlRmllbGQsIGNvbG9yQ3JlYXRvciB9ID0gbW9kdWxlcztcbiAgICAgICAgY29uc3QgbGFzdEZlYXR1cmVSZWR1Y3Rpb24gPSBsYXllci5mZWF0dXJlUmVkdWN0aW9uO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gY3JlYXRlIHRoZSBmZWF0dXJlIHJlZHVjdGlvbiB3aXRoIGEgdHJhbnNwYXJlbnQgcmVuZGVyZXJcbiAgICAgICAgICAgIC8vIHNvIHdlIGRvbid0IHNlZSBwb2ludHMgZmxhc2hpbmcgb24gdGhlIG1hcFxuICAgICAgICAgICAgY29uc3QgX2JpbkxldmVsID0gYmluTGV2ZWw7XG4gICAgICAgICAgICBjb25zdCBmaXhlZEJpbkxldmVsID0gYXdhaXQgX2JpbkxldmVsKHsgdmlldyB9IC8qIGFzIF9fZXNyaS5iaW5MZXZlbEJpbkxldmVsUGFyYW1zICovKTtcbiAgICAgICAgICAgIGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJiaW5uaW5nXCIsXG4gICAgICAgICAgICAgICAgZml4ZWRCaW5MZXZlbDogZml4ZWRCaW5MZXZlbCB8fCAxXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCEoKF9hID0gbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbi5maWVsZHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGNvdW50IGZpZWxkXG4gICAgICAgICAgICAgICAgY29uc3QgYWdncmVnYXRlRmllbGQgPSBuZXcgQWdncmVnYXRlRmllbGQoe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImFnZ3JlZ2F0ZUNvdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIG9uU3RhdGlzdGljRmllbGQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6IFwiYWdncmVnYXRlQ291bnRcIixcbiAgICAgICAgICAgICAgICAgICAgc3RhdGlzdGljVHlwZTogXCJjb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbi5maWVsZHMgPSBbYWdncmVnYXRlRmllbGRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29sb3JDcmVhdG9yLmNyZWF0ZUNvbnRpbnVvdXNSZW5kZXJlcih7XG4gICAgICAgICAgICAgICAgbGF5ZXIsXG4gICAgICAgICAgICAgICAgdmlldzogdmlldyxcbiAgICAgICAgICAgICAgICBmaWVsZDogXCJhZ2dyZWdhdGVDb3VudFwiLFxuICAgICAgICAgICAgICAgIG91dGxpbmVPcHRpbWl6YXRpb25FbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNpemVPcHRpbWl6YXRpb25FbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRTeW1ib2xFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb3JCaW5uaW5nOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24ucmVuZGVyZXIgPSByZXN1bHQucmVuZGVyZXI7XG4gICAgICAgICAgICAvLyBsYXllciBuZWVkcyB0byBoYXZlIHRoZSBmZWF0dXJlUmVkdWN0aW9uICsgcmVuZGVyZXIgYmVmb3JlIHRoaXMgY2FuIGJlIGNhbGxlZFxuICAgICAgICAgICAgY29uc3QgbGFiZWxTY2hlbWVzID0gYXdhaXQgYmluTGFiZWxDcmVhdG9yLmdldExhYmVsU2NoZW1lcyh7XG4gICAgICAgICAgICAgICAgbGF5ZXI6IGxheWVyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24ubGFiZWxpbmdJbmZvID0gKF9iID0gbGFiZWxTY2hlbWVzID09PSBudWxsIHx8IGxhYmVsU2NoZW1lcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGFiZWxTY2hlbWVzLnByaW1hcnlTY2hlbWUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5sYWJlbGluZ0luZm87XG4gICAgICAgICAgICBsYXllci5mZWF0dXJlUmVkdWN0aW9uLmxhYmVsc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgZmllbGROYW1lcyA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24uZmllbGRzLm1hcCgoYWdncmVnYXRlRmllbGQpID0+IGFnZ3JlZ2F0ZUZpZWxkLm9uU3RhdGlzdGljRmllbGQpO1xuICAgICAgICAgICAgY29uc3QgcG9wdXBUZW1wbGF0ZSA9IHBvcHVwVXRpbHMuY3JlYXRlUG9wdXBUZW1wbGF0ZUZvckZlYXR1cmVSZWR1Y3Rpb24oe1xuICAgICAgICAgICAgICAgIGZlYXR1cmVSZWR1Y3Rpb246IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24sXG4gICAgICAgICAgICAgICAgZmllbGRzOiBsYXllci5maWVsZHMuZmlsdGVyKChmaWVsZCkgPT4gZmllbGROYW1lcy5pbmRleE9mKGZpZWxkLm5hbWUpID4gLTEpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24ucG9wdXBUZW1wbGF0ZSA9IHBvcHVwVGVtcGxhdGU7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24gPSBsYXN0RmVhdHVyZVJlZHVjdGlvbjtcbiAgICAgICAgICAgIGlmIChsYXllci5mZWF0dXJlUmVkdWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGlsZU5vZGVzW2dldEFnZ3JlZ2F0aW9uVHlwZShsYXllcildLnNldEZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2hOb2RlLnNldEZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNhYmxlQWdncmVnYXRpb24oKSB7XG4gICAgICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCBhZ2dyZWdhdGlvblR5cGUgPSBnZXRBZ2dyZWdhdGlvblR5cGUobGF5ZXIpO1xuICAgICAgICB0aGlzLmxhc3RGZWF0dXJlUmVkdWN0aW9uW2FnZ3JlZ2F0aW9uVHlwZV0gPSBsYXllci5mZWF0dXJlUmVkdWN0aW9uO1xuICAgICAgICB0aGlzLmxhc3RGZWF0dXJlUmVkdWN0aW9uVHlwZSA9IGFnZ3JlZ2F0aW9uVHlwZTtcbiAgICAgICAgbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuYXJjZ2lzQWdncmVnYXRpb25DaGFuZ2VkLmVtaXQoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBhc3NldHNEaXJzKCkgeyByZXR1cm4gW1wiYXNzZXRzXCJdOyB9XG4gICAgZ2V0IGhvc3RFbGVtZW50KCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbkFyY2dpc0FnZ3JlZ2F0aW9uLnN0eWxlID0gYXJjZ2lzQWdncmVnYXRpb25Dc3M7XG5cbmNvbnN0IGFyY2dpc0FnZ3JlZ2F0aW9uQmlubmluZ0NzcyA9IFwiLmJsb2NrLXNlY3Rpb24uc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWJpbm5pbmd7cGFkZGluZzowIDEwcHh9LmJsb2NrLWNvbnRlbnQuc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWJpbm5pbmd7cGFkZGluZy10b3A6MTBweH0uc2xpZGVyLXRpdGxlLXdyYXBwZXIuc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWJpbm5pbmd7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1hcmNnaXMtYXBwLWJhY2tncm91bmQpO2JvcmRlci1ib3R0b206MXB4IHNvbGlkIHZhcigtLWFyY2dpcy1hcHAtYm9yZGVyKTtwYWRkaW5nOnZhcigtLWFyY2dpcy1hcHAtY2FwLXNwYWNpbmcpIHZhcigtLWFyY2dpcy1hcHAtc2lkZS1zcGFjaW5nKX0uc2xpZGVyLWRpdi5zYy1hcmNnaXMtYWdncmVnYXRpb24tYmlubmluZ3tkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2ZsZXgtZmxvdzpyb3cgd3JhcH0uc2xpZGVyLWhlYWRpbmcuc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWJpbm5pbmd7ZGlzcGxheTppbmxpbmUtYmxvY2s7cGFkZGluZzp2YXIoLS1hcmNnaXMtYXBwLWNhcC1zcGFjaW5nLWhhbGYpIDA7Zm9udC1zaXplOnZhcigtLWFyY2dpcy1hcHAtZm9udC1zaXplLTApfS5zbGlkZXItbGFiZWwuc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWJpbm5pbmd7ZGlzcGxheTppbmxpbmUtYmxvY2s7cGFkZGluZzp2YXIoLS1hcmNnaXMtYXBwLWNhcC1zcGFjaW5nLWVpZ2h0aCkgMDtmb250LXNpemU6dmFyKC0tYXJjZ2lzLWFwcC1mb250LXNpemUtLTEpO29yZGVyOjJ9LnNsaWRlci1zbGlkZXIuc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWJpbm5pbmd7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MTAwJTtvcmRlcjoxfS5idG4tc2VjdGlvbi5zYy1hcmNnaXMtYWdncmVnYXRpb24tYmlubmluZ3tiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWFyY2dpcy1hcHAtYmFja2dyb3VuZCl9LmJ0bi5zYy1hcmNnaXMtYWdncmVnYXRpb24tYmlubmluZ3tiYWNrZ3JvdW5kOnZhcigtLWFyY2dpcy1hcHAtYmFja2dyb3VuZC1jbGVhcik7Ym9yZGVyOm5vbmU7Ym9yZGVyLWJvdHRvbTpzb2xpZCAxcHggdmFyKC0tYXJjZ2lzLWFwcC1ib3JkZXIpO2NvbG9yOnZhcigtLWFyY2dpcy1hcHAtZm9udC1jb2xvcik7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtwYWRkaW5nOnZhcigtLWFyY2dpcy1hcHAtY2FwLXNwYWNpbmcpIHZhcigtLWFyY2dpcy1hcHAtc2lkZS1zcGFjaW5nKTtjdXJzb3I6cG9pbnRlcjt3aWR0aDoxMDAlO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciB2YXIoLS1hcmNnaXMtYXBwLWFuaW1hdGlvbi10aW1lLWZhc3QpIHZhcigtLWFyY2dpcy1hcHAtZWFzaW5nLWZ1bmN0aW9uKSwgYm9yZGVyLWNvbG9yIHZhcigtLWFyY2dpcy1hcHAtYW5pbWF0aW9uLXRpbWUtZmFzdCkgdmFyKC0tYXJjZ2lzLWFwcC1lYXNpbmctZnVuY3Rpb24pfS5idG4uc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWJpbm5pbmc6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1hcmNnaXMtYXBwLWJhY2tncm91bmQtaG92ZXIpO2JvcmRlci1jb2xvcjp2YXIoLS1hcmNnaXMtYXBwLWJvcmRlci1ob3Zlcil9LmJ0bi10ZXh0LnNjLWFyY2dpcy1hZ2dyZWdhdGlvbi1iaW5uaW5ne2ZvbnQtZmFtaWx5OnZhcigtLWFyY2dpcy1hcHAtZm9udC1mYW1pbHkpO2ZvbnQtc2l6ZTp2YXIoLS1hcmNnaXMtYXBwLWZvbnQtc2l6ZS0wKX0uc3R5bGUtYnV0dG9uLWRpdi5zYy1hcmNnaXMtYWdncmVnYXRpb24tYmlubmluZ3tiYWNrZ3JvdW5kLWNvbG9yOndoaXRlO3BhZGRpbmc6MTBweH1cIjtcblxuY29uc3QgQXJjZ2lzQWdncmVnYXRpb25CaW5uaW5nID0gY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkJpbm5pbmdDaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImFyY2dpc0FnZ3JlZ2F0aW9uQmlubmluZ0NoYW5nZVwiLCA3KTtcbiAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkJpbm5pbmdEaXNtaXNzZWRDaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImFyY2dpc0FnZ3JlZ2F0aW9uQmlubmluZ0Rpc21pc3NlZENoYW5nZVwiLCA3KTtcbiAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkJpbm5pbmdTdHlsZUNsaWNrID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNBZ2dyZWdhdGlvbkJpbm5pbmdTdHlsZUNsaWNrXCIsIDcpO1xuICAgICAgICB0aGlzLmNhbGNpdGVQYW5lbEJhY2tDbGljayA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiY2FsY2l0ZVBhbmVsQmFja0NsaWNrXCIsIDcpO1xuICAgICAgICB0aGlzLmludGVybmFsQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpbnRlcm5hbENoYW5nZVwiLCA3KTtcbiAgICAgICAgdGhpcy5jbG9zZUxhYmVsUG9wb3ZlcnMgPSBjcmVhdGVFdmVudCh0aGlzLCBcImNsb3NlTGFiZWxQb3BvdmVyc1wiLCA3KTtcbiAgICAgICAgdGhpcy5jbG9zZVBvcHVwUG9wb3ZlcnMgPSBjcmVhdGVFdmVudCh0aGlzLCBcImNsb3NlUG9wdXBQb3BvdmVyc1wiLCA3KTtcbiAgICAgICAgdGhpcy5jbG9zZUF0dHJpYnV0ZVBvcG92ZXJzID0gY3JlYXRlRXZlbnQodGhpcywgXCJjbG9zZUF0dHJpYnV0ZVBvcG92ZXJzXCIsIDcpO1xuICAgICAgICB0aGlzLmRpc2FibGVTaXplU2xpZGVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25CaW5TaXplQ2hhbmdlID0gZGVib3VuY2UoYXN5bmMgKG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGxheWVyLCB2aWV3LCBtb2R1bGVzIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgeyBjb2xvckNyZWF0b3IsIEFnZ3JlZ2F0ZUZpZWxkIH0gPSBtb2R1bGVzO1xuICAgICAgICAgICAgY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247XG4gICAgICAgICAgICBmZWF0dXJlUmVkdWN0aW9uLmZpeGVkQmluTGV2ZWwgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIC8vIG5ldyByZW5kZXJlclxuICAgICAgICAgICAgY29uc3QgYmlubmluZyA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247XG4gICAgICAgICAgICBsZXQgZmllbGQgPSBiaW5uaW5nLmZpZWxkcy5maW5kKChhZ2dyZWdhdGVGaWVsZCkgPT4gYWdncmVnYXRlRmllbGQuc3RhdGlzdGljVHlwZSA9PT0gXCJjb3VudFwiKTtcbiAgICAgICAgICAgIGlmICghZmllbGQpIHtcbiAgICAgICAgICAgICAgICBmaWVsZCA9IG5ldyBBZ2dyZWdhdGVGaWVsZCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiYWdncmVnYXRlQ291bnRcIixcbiAgICAgICAgICAgICAgICAgICAgb25TdGF0aXN0aWNGaWVsZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBhbGlhczogXCJhZ2dyZWdhdGVDb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICBzdGF0aXN0aWNUeXBlOiBcImNvdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsYXllci5mZWF0dXJlUmVkdWN0aW9uLmZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbG9yQ3JlYXRvci5jcmVhdGVDb250aW51b3VzUmVuZGVyZXIoe1xuICAgICAgICAgICAgICAgIGxheWVyLFxuICAgICAgICAgICAgICAgIHZpZXc6IHZpZXcsXG4gICAgICAgICAgICAgICAgZmllbGQ6IGZpZWxkLm5hbWUsXG4gICAgICAgICAgICAgICAgb3V0bGluZU9wdGltaXphdGlvbkVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgc2l6ZU9wdGltaXphdGlvbkVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgZGVmYXVsdFN5bWJvbEVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGZvckJpbm5pbmc6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbi5yZW5kZXJlciA9IHJlc3VsdC5yZW5kZXJlcjtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxDaGFuZ2UuZW1pdCgpO1xuICAgICAgICB9LCAzMDApO1xuICAgICAgICB0aGlzLnZpZXcgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGF5ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucG9ydGFsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5mbG93Tm9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zdHJpbmdzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmN1cnJlbnRMYW5ndWFnZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oaWRlTGF5ZXJUaXRsZSA9IGZhbHNlO1xuICAgIH1cbiAgICAvLyBjbG9uZSBmZWF0dXJlUmVkdWN0aW9uIHRvIHVwZGF0ZSBtYXBcbiAgICBpbnRlcm5hbENoYW5nZUhhbmRsZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGZlYXR1cmVSZWR1Y3Rpb24gPSBsYXllci5mZWF0dXJlUmVkdWN0aW9uO1xuICAgICAgICBsYXllci5mZWF0dXJlUmVkdWN0aW9uID0gZmVhdHVyZVJlZHVjdGlvbi5jbG9uZSgpO1xuICAgICAgICB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uQmlubmluZ0NoYW5nZS5lbWl0KCk7XG4gICAgfVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBwdWJsaWMgY2FsbHNcbiAgICAvL1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBQdWJsaWMgTWV0aG9kc1xuICAgIGFzeW5jIGRvbmUoKSB7XG4gICAgICAgIHRoaXMuY2xvc2VQb3BvdmVycygpO1xuICAgIH1cbiAgICBhc3luYyBzZXRGb2N1cygpIHtcbiAgICAgICAgdGhpcy5mbG93SXRlbU5vZGUuc2V0Rm9jdXMoKTtcbiAgICB9XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gIExpZmVjeWNsZVxuICAgIC8vXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGFzeW5jIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgICAgICAvLyBvbmx5IHZhbGlkIGZvciBwb2ludFxuICAgICAgICB0aGlzLmxheWVyR2VvbWV0cnlUeXBlID0gYXdhaXQgZ2V0TGF5ZXJHZW9tZXRyeVR5cGUodGhpcy5sYXllcik7XG4gICAgICAgIGNvbnN0IFtBZ2dyZWdhdGVGaWVsZCwgY29sb3JDcmVhdG9yXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcbiAgICAgICAgICAgIFwiZXNyaS9sYXllcnMvc3VwcG9ydC9BZ2dyZWdhdGVGaWVsZFwiLFxuICAgICAgICAgICAgXCJlc3JpL3NtYXJ0TWFwcGluZy9yZW5kZXJlcnMvY29sb3JcIlxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy5tb2R1bGVzID0ge1xuICAgICAgICAgICAgQWdncmVnYXRlRmllbGQsXG4gICAgICAgICAgICBjb2xvckNyZWF0b3JcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5mbG93SXRlbU5vZGUuc2V0Rm9jdXMoKSksIDIwMCk7XG4gICAgfVxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgLy90aGlzLmludGVybmFsQ2hhbmdlLmVtaXQoKTtcbiAgICB9XG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuY2xvc2VQb3BvdmVycygpO1xuICAgIH1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gIFJlbmRlciBNZXRob2RzXG4gICAgLy9cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGxheWVyLCBzdHJpbmdzLCBoaWRlTGF5ZXJUaXRsZSB9ID0gdGhpcztcbiAgICAgICAgLy9jb25zdCBmZWF0dXJlUmVkdWN0aW9uID0gbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbiBhcyBhbnk7IC8vX19lc3JpLkZlYXR1cmVSZWR1Y3Rpb25DbHVzdGVyO1xuICAgICAgICByZXR1cm4gKGgoSG9zdCwgeyBjbGFzczogXCJjYWxjaXRlLW1hdGNoLWhlaWdodFwiIH0sIGgoXCJjYWxjaXRlLWZsb3ctaXRlbVwiLCB7IGhlYWRpbmc6IHN0cmluZ3MuYmlubmluZywgZGVzY3JpcHRpb246ICFoaWRlTGF5ZXJUaXRsZSA/IGxheWVyLnRpdGxlIDogdW5kZWZpbmVkLCBvbkNhbGNpdGVGbG93SXRlbUJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGNpdGVQYW5lbEJhY2tDbGljay5lbWl0KCk7XG4gICAgICAgICAgICAgICAgLy90aGlzLmNsb3NlUG9wb3ZlcnMoKTtcbiAgICAgICAgICAgIH0sIHJlZjogKG5vZGUpID0+ICh0aGlzLmZsb3dJdGVtTm9kZSA9IG5vZGUpIH0sIHRoaXMucmVuZGVyQmluU2l6ZSgpLCB0aGlzLnJlbmRlckZpZWxkc0J0bigpLCB0aGlzLnJlbmRlckxhYmVsQnRuKCksIHRoaXMucmVuZGVyUG9wdXBCdG4oKSwgdGhpcy5yZW5kZXJHb1RvU3R5bGUoKSkpKTtcbiAgICB9XG4gICAgcmVuZGVyQmluU2l6ZSgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB7IGxheWVyLCBzdHJpbmdzIH0gPSB0aGlzO1xuICAgICAgICAvLyBuZWVkIHRvIHN3aXRjaCBsYWJlbHMgYmFjayBpbiBydGxcbiAgICAgICAgY29uc3QgcnRsID0gZ2V0RWxlbWVudERpcih0aGlzLmhvc3RFbGVtZW50KSA9PT0gXCJydGxcIjtcbiAgICAgICAgY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247XG4gICAgICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcInNsaWRlci10aXRsZS13cmFwcGVyXCIgfSwgaChcImxhYmVsXCIsIHsgY2xhc3M6IFwic2xpZGVyLWhlYWRpbmdcIiB9LCBzdHJpbmdzLmJpbi5iaW5TaXplVGl0bGUpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwic2xpZGVyLWRpdlwiIH0sIGgoXCJsYWJlbFwiLCB7IGNsYXNzOiBcInNsaWRlci1sYWJlbFwiIH0sIHJ0bCA/IHN0cmluZ3MuYmluLmxhcmdlIDogc3RyaW5ncy5iaW4uc21hbGwpLCBoKFwiY2FsY2l0ZS1zbGlkZXJcIiwgeyBjbGFzczogXCJzbGlkZXItc2xpZGVyXCIsIG1pbjogMSwgbWF4OiA5LCB2YWx1ZTogMTAgLSAoKF9hID0gZmVhdHVyZVJlZHVjdGlvbi5maXhlZEJpbkxldmVsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAzKSwgc3RlcDogMSwgbWluTGFiZWw6IHN0cmluZ3MuYmluLmJpblNpemVUaXRsZSwgb25DYWxjaXRlU2xpZGVySW5wdXQ6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlciA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQmluU2l6ZUNoYW5nZSgxMCAtIHNsaWRlci52YWx1ZSk7XG4gICAgICAgICAgICB9IH0pLCBoKFwibGFiZWxcIiwgeyBjbGFzczogXCJzbGlkZXItbGFiZWxcIiB9LCBydGwgPyBzdHJpbmdzLmJpbi5zbWFsbCA6IHN0cmluZ3MuYmluLmxhcmdlKSkpKTtcbiAgICB9XG4gICAgcmVuZGVyRmllbGRzQnRuKCkge1xuICAgICAgICBjb25zdCB7IHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHJ0bCA9IGdldEVsZW1lbnREaXIodGhpcy5ob3N0RWxlbWVudCkgPT09IFwicnRsXCI7XG4gICAgICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImJ0bi1zZWN0aW9uXCIgfSwgaChcImJ1dHRvblwiLCB7IGNsYXNzOiBcImJ0blwiLCBvbkNsaWNrOiAoZXZlbnQpID0+IHRoaXMuYWRkRmllbGRzUGFuZWwoZXZlbnQpIH0sIGgoXCJzcGFuXCIsIHsgY2xhc3M6IFwiYnRuLXRleHRcIiB9LCBzdHJpbmdzLmJpbi5lZGl0QXR0cmlidXRlcyksIGgoXCJzcGFuXCIsIHsgY2xhc3M6IFwiYnRuLWljb25cIiB9LCBoKFwiY2FsY2l0ZS1pY29uXCIsIHsgc2NhbGU6IFwic1wiLCBpY29uOiBydGwgPyBcImNoZXZyb24tbGVmdFwiIDogXCJjaGV2cm9uLXJpZ2h0XCIgfSkpKSkpO1xuICAgIH1cbiAgICByZW5kZXJMYWJlbEJ0bigpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBydGwgPSBnZXRFbGVtZW50RGlyKHRoaXMuaG9zdEVsZW1lbnQpID09PSBcInJ0bFwiO1xuICAgICAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczogXCJidG4tc2VjdGlvblwiIH0sIGgoXCJidXR0b25cIiwgeyBjbGFzczogXCJidG5cIiwgb25DbGljazogKGV2ZW50KSA9PiB0aGlzLmFkZExhYmVsUGFuZWwoZXZlbnQpIH0sIGgoXCJzcGFuXCIsIHsgY2xhc3M6IFwiYnRuLXRleHRcIiB9LCBzdHJpbmdzLmJpbi5lZGl0TGFiZWwpLCBoKFwic3BhblwiLCB7IGNsYXNzOiBcImJ0bi1pY29uXCIgfSwgaChcImNhbGNpdGUtaWNvblwiLCB7IHNjYWxlOiBcInNcIiwgaWNvbjogcnRsID8gXCJjaGV2cm9uLWxlZnRcIiA6IFwiY2hldnJvbi1yaWdodFwiIH0pKSkpKTtcbiAgICB9XG4gICAgcmVuZGVyUG9wdXBCdG4oKSB7XG4gICAgICAgIGNvbnN0IHsgc3RyaW5ncyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgcnRsID0gZ2V0RWxlbWVudERpcih0aGlzLmhvc3RFbGVtZW50KSA9PT0gXCJydGxcIjtcbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiYnRuLXNlY3Rpb25cIiB9LCBoKFwiYnV0dG9uXCIsIHsgY2xhc3M6IFwiYnRuXCIsIG9uQ2xpY2s6IChldmVudCkgPT4gdGhpcy5hZGRQb3B1cFBhbmVsKGV2ZW50KSB9LCBoKFwic3BhblwiLCB7IGNsYXNzOiBcImJ0bi10ZXh0XCIgfSwgc3RyaW5ncy5iaW4uZWRpdFBvcHVwcyksIGgoXCJzcGFuXCIsIHsgY2xhc3M6IFwiYnRuLWljb25cIiB9LCBoKFwiY2FsY2l0ZS1pY29uXCIsIHsgc2NhbGU6IFwic1wiLCBpY29uOiBydGwgPyBcImNoZXZyb24tbGVmdFwiIDogXCJjaGV2cm9uLXJpZ2h0XCIgfSkpKSkpO1xuICAgIH1cbiAgICByZW5kZXJHb1RvU3R5bGUoKSB7XG4gICAgICAgIGNvbnN0IHsgc3RyaW5ncyB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwic3R5bGUtYnV0dG9uLWRpdlwiIH0sIGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IGFsaWdubWVudDogXCJjZW50ZXJcIiwgYXBwZWFyYW5jZTogXCJ0cmFuc3BhcmVudFwiLCBzY2FsZTogXCJtXCIsIHdpZHRoOiBcImZ1bGxcIiwgY2xhc3M6IFwic3R5bGUtYnV0dG9uXCIsIG9uQ2xpY2s6ICgpID0+IHRoaXMuYXJjZ2lzQWdncmVnYXRpb25CaW5uaW5nU3R5bGVDbGljay5lbWl0KCkgfSwgc3RyaW5ncy5iaW4uZWRpdEJpblN0eWxlKSkpO1xuICAgIH1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gIFByaXZhdGUgbWV0aG9kc1xuICAgIC8vXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBjbG9zZVBvcG92ZXJzKCkge1xuICAgICAgICB0aGlzLmNsb3NlQXR0cmlidXRlUG9wb3ZlcnMuZW1pdCgpO1xuICAgICAgICB0aGlzLmNsb3NlTGFiZWxQb3BvdmVycy5lbWl0KCk7XG4gICAgICAgIHRoaXMuY2xvc2VQb3B1cFBvcG92ZXJzLmVtaXQoKTtcbiAgICB9XG4gICAgYWRkRmllbGRzUGFuZWwoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMuY2xvc2VQb3BvdmVycygpO1xuICAgICAgICBjb25zdCB7IGxheWVyLCB2aWV3LCBjdXJyZW50TGFuZ3VhZ2UsIHN0cmluZ3MsIGZsb3dOb2RlLCBoaWRlTGF5ZXJUaXRsZSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZmllbGRzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhcmNnaXMtYWdncmVnYXRpb24tZmllbGRzXCIpO1xuICAgICAgICBmaWVsZHNOb2RlLmxhbmcgPSBjdXJyZW50TGFuZ3VhZ2U7XG4gICAgICAgIGZpZWxkc05vZGUubGF5ZXIgPSBsYXllcjtcbiAgICAgICAgZmllbGRzTm9kZS5tYXBWaWV3ID0gdmlldztcbiAgICAgICAgZmllbGRzTm9kZS5zdHJpbmdzID0gc3RyaW5ncztcbiAgICAgICAgZmllbGRzTm9kZS5jdXJyZW50TGFuZ3VhZ2UgPSBjdXJyZW50TGFuZ3VhZ2U7XG4gICAgICAgIGZpZWxkc05vZGUuaGlkZUxheWVyVGl0bGUgPSBoaWRlTGF5ZXJUaXRsZTtcbiAgICAgICAgZmllbGRzTm9kZS5mbG93Tm9kZSA9IGZsb3dOb2RlO1xuICAgICAgICBmaWVsZHNOb2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJhcmNnaXNBZ2dyZWdhdGlvbkZpZWxkc0NoYW5nZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmludGVybmFsQ2hhbmdlLmVtaXQoKTtcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgZmxvd05vZGUuYXBwZW5kQ2hpbGQoZmllbGRzTm9kZSk7XG4gICAgfVxuICAgIGFkZExhYmVsUGFuZWwoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciwgdmlldywgcG9ydGFsLCBjb25maWcsIGN1cnJlbnRMYW5ndWFnZSwgc3RyaW5ncywgZmxvd05vZGUsIGhpZGVMYXllclRpdGxlIH0gPSB0aGlzO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy5jbG9zZVBvcG92ZXJzKCk7XG4gICAgICAgIGNvbnN0IGxhYmVsRmxvd0l0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FsY2l0ZS1mbG93LWl0ZW1cIik7XG4gICAgICAgIC8vbGFiZWxGbG93SXRlbS5pZCA9IFwibGFiZWxGbG93SXRlbV9JZFwiO1xuICAgICAgICBsYWJlbEZsb3dJdGVtLmhlYWRpbmcgPSBzdHJpbmdzLmJpbi5sYWJlbEZlYXR1cmVzSGVhZGluZztcbiAgICAgICAgbGFiZWxGbG93SXRlbS5kZXNjcmlwdGlvbiA9ICFoaWRlTGF5ZXJUaXRsZSA/IGxheWVyLnRpdGxlIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBjYWxjaXRlRmFiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbGNpdGUtZmFiXCIpO1xuICAgICAgICBjYWxjaXRlRmFiLmljb24gPSBcInBsdXNcIjtcbiAgICAgICAgY2FsY2l0ZUZhYi5zbG90ID0gXCJmYWJcIjtcbiAgICAgICAgY2FsY2l0ZUZhYi5zY2FsZSA9IFwic1wiO1xuICAgICAgICBjYWxjaXRlRmFiLmFwcGVhcmFuY2UgPSBcIm91dGxpbmUtZmlsbFwiO1xuICAgICAgICBjYWxjaXRlRmFiLmtpbmQgPSBcIm5ldXRyYWxcIjtcbiAgICAgICAgY2FsY2l0ZUZhYi5sYWJlbCA9IHN0cmluZ3MuYmluLmxhYmVsRmFiO1xuICAgICAgICBjYWxjaXRlRmFiLnRleHQgPSBzdHJpbmdzLmJpbi5sYWJlbEZhYjtcbiAgICAgICAgY2FsY2l0ZUZhYi50ZXh0RW5hYmxlZCA9IHRydWU7XG4gICAgICAgIGxhYmVsRmxvd0l0ZW0uYXBwZW5kQ2hpbGQoY2FsY2l0ZUZhYik7XG4gICAgICAgIGNvbnN0IGxhYmVsQ29tcG9uZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFyY2dpcy1sYWJlbFwiKTtcbiAgICAgICAgbGFiZWxDb21wb25lbnQubGFuZyA9IGN1cnJlbnRMYW5ndWFnZTtcbiAgICAgICAgbGFiZWxDb21wb25lbnQubGF5ZXIgPSBsYXllcjtcbiAgICAgICAgbGFiZWxDb21wb25lbnQubWFwVmlldyA9IHZpZXc7XG4gICAgICAgIGxhYmVsQ29tcG9uZW50LnBvcnRhbCA9IHBvcnRhbDtcbiAgICAgICAgbGFiZWxDb21wb25lbnQuY29uZmlnID0gY29uZmlnO1xuICAgICAgICBsYWJlbENvbXBvbmVudC5sYXllckRpc3BsYXlUeXBlID0gbGF5ZXJEaXNwbGF5VHlwZUVudW0uY2x1c3RlcjtcbiAgICAgICAgbGFiZWxDb21wb25lbnQuY2FsY2l0ZUZsb3dQcm9wcyA9IHsgY2FsY2l0ZUZsb3dJdGVtOiBsYWJlbEZsb3dJdGVtLCBjYWxjaXRlRmFiOiBjYWxjaXRlRmFiIH07XG4gICAgICAgIGxhYmVsQ29tcG9uZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJsYWJlbFVwZGF0ZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbENoYW5nZS5lbWl0KCk7XG4gICAgICAgICAgICBmb3JjZVVwZGF0ZSh0aGlzLmhvc3RFbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxhYmVsRmxvd0l0ZW0uYXBwZW5kQ2hpbGQobGFiZWxDb21wb25lbnQpO1xuICAgICAgICBmbG93Tm9kZS5hcHBlbmRDaGlsZChsYWJlbEZsb3dJdGVtKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gbGFiZWxGbG93SXRlbS5zZXRGb2N1cygpKSwgMjAwKTtcbiAgICB9XG4gICAgYWRkUG9wdXBQYW5lbChldmVudCkge1xuICAgICAgICBjb25zdCB7IGxheWVyLCB2aWV3LCBwb3J0YWwsIGNvbmZpZywgY3VycmVudExhbmd1YWdlLCBzdHJpbmdzLCBmbG93Tm9kZSwgaGlkZUxheWVyVGl0bGUgfSA9IHRoaXM7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLmNsb3NlUG9wb3ZlcnMoKTtcbiAgICAgICAgY29uc3QgcG9wdXBGbG93SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYWxjaXRlLWZsb3ctaXRlbVwiKTtcbiAgICAgICAgcG9wdXBGbG93SXRlbS5oZWFkaW5nID0gc3RyaW5ncy5iaW4ucG9wdXBzSGVhZGluZztcbiAgICAgICAgcG9wdXBGbG93SXRlbS5kZXNjcmlwdGlvbiA9ICFoaWRlTGF5ZXJUaXRsZSA/IGxheWVyLnRpdGxlIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBjYWxjaXRlRmFiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbGNpdGUtZmFiXCIpO1xuICAgICAgICBjYWxjaXRlRmFiLmljb24gPSBcInBsdXNcIjtcbiAgICAgICAgY2FsY2l0ZUZhYi5zbG90ID0gXCJmYWJcIjtcbiAgICAgICAgY2FsY2l0ZUZhYi5zY2FsZSA9IFwic1wiO1xuICAgICAgICBjYWxjaXRlRmFiLmFwcGVhcmFuY2UgPSBcIm91dGxpbmUtZmlsbFwiO1xuICAgICAgICBjYWxjaXRlRmFiLmtpbmQgPSBcIm5ldXRyYWxcIjtcbiAgICAgICAgY2FsY2l0ZUZhYi5sYWJlbCA9IHN0cmluZ3MuYmluLnBvcHVwRmFiO1xuICAgICAgICBjYWxjaXRlRmFiLnRleHQgPSBzdHJpbmdzLmJpbi5wb3B1cEZhYjtcbiAgICAgICAgY2FsY2l0ZUZhYi50ZXh0RW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHBvcHVwRmxvd0l0ZW0uYXBwZW5kQ2hpbGQoY2FsY2l0ZUZhYik7XG4gICAgICAgIGNvbnN0IHBvcHVwQ29tcG9uZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFyY2dpcy1wb3B1cFwiKTtcbiAgICAgICAgcG9wdXBDb21wb25lbnQubGFuZyA9IGN1cnJlbnRMYW5ndWFnZTtcbiAgICAgICAgcG9wdXBDb21wb25lbnQubGF5ZXIgPSBsYXllcjtcbiAgICAgICAgcG9wdXBDb21wb25lbnQubWFwVmlldyA9IHZpZXc7XG4gICAgICAgIHBvcHVwQ29tcG9uZW50LnBvcnRhbCA9IHBvcnRhbDtcbiAgICAgICAgcG9wdXBDb21wb25lbnQuY29uZmlnID0gY29uZmlnO1xuICAgICAgICBwb3B1cENvbXBvbmVudC5sYXllckRpc3BsYXlUeXBlID0gbGF5ZXJEaXNwbGF5VHlwZUVudW0uY2x1c3RlcjtcbiAgICAgICAgcG9wdXBDb21wb25lbnQuY2FsY2l0ZUZsb3dQcm9wcyA9IHtcbiAgICAgICAgICAgIGZsb3c6IGZsb3dOb2RlLFxuICAgICAgICAgICAgY2FsY2l0ZUZhYjogY2FsY2l0ZUZhYixcbiAgICAgICAgICAgIGNhbGNpdGVGbG93SXRlbTogcG9wdXBGbG93SXRlbVxuICAgICAgICB9O1xuICAgICAgICBwb3B1cENvbXBvbmVudC5hZGRFdmVudExpc3RlbmVyKFwicG9wdXBVcGRhdGVkXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxDaGFuZ2UuZW1pdCgpO1xuICAgICAgICAgICAgZm9yY2VVcGRhdGUodGhpcy5ob3N0RWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICBwb3B1cEZsb3dJdGVtLmFwcGVuZENoaWxkKHBvcHVwQ29tcG9uZW50KTtcbiAgICAgICAgZmxvd05vZGUuYXBwZW5kQ2hpbGQocG9wdXBGbG93SXRlbSk7XG4gICAgICAgIHBvcHVwRmxvd0l0ZW0uc2V0Rm9jdXMoKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gcG9wdXBGbG93SXRlbS5zZXRGb2N1cygpKSwgMjAwKTtcbiAgICB9XG4gICAgZ2V0IGhvc3RFbGVtZW50KCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbkFyY2dpc0FnZ3JlZ2F0aW9uQmlubmluZy5zdHlsZSA9IGFyY2dpc0FnZ3JlZ2F0aW9uQmlubmluZ0NzcztcblxuY29uc3QgYXJjZ2lzQWdncmVnYXRpb25DbHVzdGVyaW5nQ3NzID0gXCIuYmxvY2stc2VjdGlvbi5zYy1hcmNnaXMtYWdncmVnYXRpb24tY2x1c3RlcmluZ3twYWRkaW5nOjAgMTBweH0uYmxvY2stY29udGVudC5zYy1hcmNnaXMtYWdncmVnYXRpb24tY2x1c3RlcmluZ3twYWRkaW5nLXRvcDoxMHB4fS5zeW1ib2wtYnV0dG9uLnNjLWFyY2dpcy1hZ2dyZWdhdGlvbi1jbHVzdGVyaW5ne2JvcmRlcjpzb2xpZCAxcHggdmFyKC0tYXJjZ2lzLWFwcC1ib3JkZXIpO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn0uc3ltYm9sLWJ1dHRvbi5zZWxlY3RlZC5zYy1hcmNnaXMtYWdncmVnYXRpb24tY2x1c3RlcmluZ3tib3JkZXItY29sb3I6dmFyKC0tY2FsY2l0ZS1jb2xvci1icmFuZCk7Ym9yZGVyLXdpZHRoOjFweH0uc3ltYm9sLWJ1dHRvbi5zYy1hcmNnaXMtYWdncmVnYXRpb24tY2x1c3RlcmluZzpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWFyY2dpcy1hcHAtYmFja2dyb3VuZC1ob3Zlcik7Ym9yZGVyLWNvbG9yOnZhcigtLWFyY2dpcy1hcHAtYm9yZGVyLWhvdmVyKX0uc3ltYm9sLWJ1dHRvbi5zYy1hcmNnaXMtYWdncmVnYXRpb24tY2x1c3RlcmluZzpmb2N1c3tib3JkZXItY29sb3I6dmFyKC0tY2FsY2l0ZS1jb2xvci1icmFuZCk7Ym9yZGVyLXdpZHRoOjJweH0uc3ltYm9sLnNjLWFyY2dpcy1hZ2dyZWdhdGlvbi1jbHVzdGVyaW5ne3BhZGRpbmc6NXB4fS5zeW1ib2wtaWNvbi5zYy1hcmNnaXMtYWdncmVnYXRpb24tY2x1c3RlcmluZ3twYWRkaW5nOjZweH0uc2xpZGVyLXRpdGxlLXdyYXBwZXIuc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWNsdXN0ZXJpbmd7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1hcmNnaXMtYXBwLWJhY2tncm91bmQpO2JvcmRlci1ib3R0b206MXB4IHNvbGlkIHZhcigtLWFyY2dpcy1hcHAtYm9yZGVyKTtwYWRkaW5nOnZhcigtLWFyY2dpcy1hcHAtY2FwLXNwYWNpbmcpIHZhcigtLWFyY2dpcy1hcHAtc2lkZS1zcGFjaW5nKX0uc2xpZGVyLWRpdi5zYy1hcmNnaXMtYWdncmVnYXRpb24tY2x1c3RlcmluZ3tkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2ZsZXgtZmxvdzpyb3cgd3JhcH0uc2xpZGVyLWhlYWRpbmcuc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWNsdXN0ZXJpbmd7ZGlzcGxheTppbmxpbmUtYmxvY2s7cGFkZGluZzp2YXIoLS1hcmNnaXMtYXBwLWNhcC1zcGFjaW5nLWhhbGYpIDA7Zm9udC1zaXplOnZhcigtLWFyY2dpcy1hcHAtZm9udC1zaXplLTApfS5zbGlkZXItbGFiZWwuc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWNsdXN0ZXJpbmd7ZGlzcGxheTppbmxpbmUtYmxvY2s7cGFkZGluZzp2YXIoLS1hcmNnaXMtYXBwLWNhcC1zcGFjaW5nLWVpZ2h0aCkgMDtmb250LXNpemU6dmFyKC0tYXJjZ2lzLWFwcC1mb250LXNpemUtLTEpO29yZGVyOjJ9LnNsaWRlci1zbGlkZXIuc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWNsdXN0ZXJpbmd7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MTAwJTtvcmRlcjoxfS5jbHVzdGVyLWJ0bi1zZWN0aW9uLnNjLWFyY2dpcy1hZ2dyZWdhdGlvbi1jbHVzdGVyaW5ne2JhY2tncm91bmQtY29sb3I6dmFyKC0tYXJjZ2lzLWFwcC1iYWNrZ3JvdW5kKX0uY2x1c3Rlci1idG4uc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWNsdXN0ZXJpbmd7YmFja2dyb3VuZDp2YXIoLS1hcmNnaXMtYXBwLWJhY2tncm91bmQtY2xlYXIpO2JvcmRlcjpub25lO2JvcmRlci1ib3R0b206c29saWQgMXB4IHZhcigtLWFyY2dpcy1hcHAtYm9yZGVyKTtjb2xvcjp2YXIoLS1hcmNnaXMtYXBwLWZvbnQtY29sb3IpO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47cGFkZGluZzp2YXIoLS1hcmNnaXMtYXBwLWNhcC1zcGFjaW5nKSB2YXIoLS1hcmNnaXMtYXBwLXNpZGUtc3BhY2luZyk7Y3Vyc29yOnBvaW50ZXI7d2lkdGg6MTAwJTt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgdmFyKC0tYXJjZ2lzLWFwcC1hbmltYXRpb24tdGltZS1mYXN0KSB2YXIoLS1hcmNnaXMtYXBwLWVhc2luZy1mdW5jdGlvbiksIGJvcmRlci1jb2xvciB2YXIoLS1hcmNnaXMtYXBwLWFuaW1hdGlvbi10aW1lLWZhc3QpIHZhcigtLWFyY2dpcy1hcHAtZWFzaW5nLWZ1bmN0aW9uKX0uY2x1c3Rlci1idG4uc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWNsdXN0ZXJpbmc6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1hcmNnaXMtYXBwLWJhY2tncm91bmQtaG92ZXIpO2JvcmRlci1jb2xvcjp2YXIoLS1hcmNnaXMtYXBwLWJvcmRlci1ob3Zlcil9LmNsdXN0ZXItYnRuLnNjLWFyY2dpcy1hZ2dyZWdhdGlvbi1jbHVzdGVyaW5nOmZvY3Vze2JvcmRlcjoycHggc29saWQgdmFyKC0tY2FsY2l0ZS1jb2xvci1icmFuZCl9LmNsdXN0ZXItYnRuLXRleHQuc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWNsdXN0ZXJpbmd7Zm9udC1mYW1pbHk6dmFyKC0tYXJjZ2lzLWFwcC1mb250LWZhbWlseSk7Zm9udC1zaXplOnZhcigtLWFyY2dpcy1hcHAtZm9udC1zaXplLTApfVwiO1xuXG5jb25zdCBBcmNnaXNBZ2dyZWdhdGlvbkNsdXN0ZXJpbmcgPSBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgICAgICB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uQ2x1c3RlcmluZ0NoYW5nZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzQWdncmVnYXRpb25DbHVzdGVyaW5nQ2hhbmdlXCIsIDcpO1xuICAgICAgICB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uQ2x1c3RlcmluZ0Rpc21pc3NlZENoYW5nZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzQWdncmVnYXRpb25DbHVzdGVyaW5nRGlzbWlzc2VkQ2hhbmdlXCIsIDcpO1xuICAgICAgICB0aGlzLmNhbGNpdGVQYW5lbEJhY2tDbGljayA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiY2FsY2l0ZVBhbmVsQmFja0NsaWNrXCIsIDcpO1xuICAgICAgICB0aGlzLmludGVybmFsQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpbnRlcm5hbENoYW5nZVwiLCA3KTtcbiAgICAgICAgdGhpcy5jbG9zZUxhYmVsUG9wb3ZlcnMgPSBjcmVhdGVFdmVudCh0aGlzLCBcImNsb3NlTGFiZWxQb3BvdmVyc1wiLCA3KTtcbiAgICAgICAgdGhpcy5jbG9zZVBvcHVwUG9wb3ZlcnMgPSBjcmVhdGVFdmVudCh0aGlzLCBcImNsb3NlUG9wdXBQb3BvdmVyc1wiLCA3KTtcbiAgICAgICAgdGhpcy5jbG9zZUF0dHJpYnV0ZVBvcG92ZXJzID0gY3JlYXRlRXZlbnQodGhpcywgXCJjbG9zZUF0dHJpYnV0ZVBvcG92ZXJzXCIsIDcpO1xuICAgICAgICB0aGlzLmRpc2FibGVTaXplU2xpZGVyID0gZmFsc2U7XG4gICAgICAgIHRoaXMudmlldyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYXllciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wb3J0YWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY29uZmlnID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmZsb3dOb2RlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnN0cmluZ3MgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY3VycmVudExhbmd1YWdlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmhpZGVMYXllclRpdGxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3ltYm9sU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgLy8gY2xvbmUgZmVhdHVyZVJlZHVjdGlvbiB0byB1cGRhdGUgbWFwXG4gICAgaW50ZXJuYWxDaGFuZ2VIYW5kbGVyKCkge1xuICAgICAgICBjb25zdCB7IGxheWVyIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBmZWF0dXJlUmVkdWN0aW9uID0gbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbjtcbiAgICAgICAgbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbiA9IGZlYXR1cmVSZWR1Y3Rpb24uY2xvbmUoKTtcbiAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkNsdXN0ZXJpbmdDaGFuZ2UuZW1pdCgpO1xuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgcHVibGljIGNhbGxzXG4gICAgLy9cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gUHVibGljIE1ldGhvZHNcbiAgICBhc3luYyBkb25lKCkge1xuICAgICAgICB0aGlzLmNsb3NlUG9wb3ZlcnMoKTtcbiAgICB9XG4gICAgYXN5bmMgc2V0Rm9jdXMoKSB7XG4gICAgICAgIHRoaXMuZmxvd0l0ZW1Ob2RlLnNldEZvY3VzKCk7XG4gICAgfVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBMaWZlY3ljbGVcbiAgICAvL1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBhc3luYyBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICAgICAgLy8gb25seSB2YWxpZCBmb3IgcG9pbnRcbiAgICAgICAgdGhpcy5sYXllckdlb21ldHJ5VHlwZSA9IGF3YWl0IGdldExheWVyR2VvbWV0cnlUeXBlKHRoaXMubGF5ZXIpO1xuICAgICAgICBjb25zdCBbcG9wdXBVdGlscywgc3ltYm9sVXRpbHMsIGNpbVN5bWJvbFV0aWxzLCBDb2xvciwgU2ltcGxlTWFya2VyU3ltYm9sLCBTaW1wbGVMaW5lU3ltYm9sXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcbiAgICAgICAgICAgIFwiZXNyaS9zbWFydE1hcHBpbmcvcG9wdXAvc3VwcG9ydC91dGlsc1wiLFxuICAgICAgICAgICAgXCJlc3JpL3N5bWJvbHMvc3VwcG9ydC9zeW1ib2xVdGlsc1wiLFxuICAgICAgICAgICAgXCJlc3JpL3N5bWJvbHMvc3VwcG9ydC9jaW1TeW1ib2xVdGlsc1wiLFxuICAgICAgICAgICAgXCJlc3JpL0NvbG9yXCIsXG4gICAgICAgICAgICBcImVzcmkvc3ltYm9scy9TaW1wbGVNYXJrZXJTeW1ib2xcIixcbiAgICAgICAgICAgIFwiZXNyaS9zeW1ib2xzL1NpbXBsZUxpbmVTeW1ib2xcIlxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy5tb2R1bGVzID0ge1xuICAgICAgICAgICAgc3ltYm9sVXRpbHMsXG4gICAgICAgICAgICBjaW1TeW1ib2xVdGlscyxcbiAgICAgICAgICAgIENvbG9yLFxuICAgICAgICAgICAgU2ltcGxlTWFya2VyU3ltYm9sLFxuICAgICAgICAgICAgU2ltcGxlTGluZVN5bWJvbFxuICAgICAgICB9O1xuICAgICAgICAvLyBkaXNhYmxlIHNpemUgcmFuZ2Ugc2xpZGVyIGZvciBcInNpemVcIiByZW5kZXJlci4gdW5kb2N1bWVudGVkIGZ1bmN0aW9uLlxuICAgICAgICBjb25zdCB2aXN1YWxWYXJpYWJsZXMgPSBwb3B1cFV0aWxzLmdldFByaW1hcnlWaXN1YWxWYXJpYWJsZXModGhpcy5sYXllci5yZW5kZXJlcik7XG4gICAgICAgIHRoaXMuZGlzYWJsZVNpemVTbGlkZXIgPSB2aXN1YWxWYXJpYWJsZXMuc29tZSgodmFyaWFibGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAodmFyaWFibGUgPT09IG51bGwgfHwgdmFyaWFibGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhcmlhYmxlLnR5cGUpID09PSBcInNpemVcIjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuZmxvd0l0ZW1Ob2RlLnNldEZvY3VzKCkpLCAyMDApO1xuICAgIH1cbiAgICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIC8vdGhpcy5pbnRlcm5hbENoYW5nZS5lbWl0KCk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLmNsb3NlUG9wb3ZlcnMoKTtcbiAgICB9XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBSZW5kZXIgTWV0aG9kc1xuICAgIC8vXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciwgc3RyaW5ncywgaGlkZUxheWVyVGl0bGUgfSA9IHRoaXM7XG4gICAgICAgIC8vY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb24gYXMgYW55OyAvL19fZXNyaS5GZWF0dXJlUmVkdWN0aW9uQ2x1c3RlcjtcbiAgICAgICAgY29uc3Qgc2hvd1N5bWJvbCA9IGlzUmVuZGVyZXJBdXRvR2VuZXJhdGVkKGxheWVyKTtcbiAgICAgICAgY29uc3QgYWdncmVnYXRpb25UeXBlID0gZ2V0QWdncmVnYXRpb25UeXBlKGxheWVyKTtcbiAgICAgICAgcmV0dXJuIChoKEhvc3QsIHsgY2xhc3M6IFwiY2FsY2l0ZS1tYXRjaC1oZWlnaHRcIiB9LCBoKFwiY2FsY2l0ZS1mbG93LWl0ZW1cIiwgeyBoZWFkaW5nOiBzdHJpbmdzLmNsdXN0ZXJpbmcsIGRlc2NyaXB0aW9uOiAhaGlkZUxheWVyVGl0bGUgPyBsYXllci50aXRsZSA6IHVuZGVmaW5lZCwgb25DYWxjaXRlRmxvd0l0ZW1CYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxjaXRlUGFuZWxCYWNrQ2xpY2suZW1pdCgpO1xuICAgICAgICAgICAgICAgIC8vdGhpcy5jbG9zZVBvcG92ZXJzKCk7XG4gICAgICAgICAgICB9LCByZWY6IChub2RlKSA9PiAodGhpcy5mbG93SXRlbU5vZGUgPSBub2RlKSB9LCBzaG93U3ltYm9sICYmIHRoaXMucmVuZGVyU3ltYm9sKCksIGFnZ3JlZ2F0aW9uVHlwZSA9PT0gXCJwaWUtY2hhcnRcIiAmJiB0aGlzLnJlbmRlclNoYXBlKCksIHRoaXMucmVuZGVyQ2x1c3RlclJhZGl1cygpLCB0aGlzLnJlbmRlckNsdXN0ZXJTaXplKCksIHRoaXMucmVuZGVyRmllbGRzQnRuKCksIHRoaXMucmVuZGVyTGFiZWxCdG4oKSwgdGhpcy5yZW5kZXJQb3B1cEJ0bigpKSkpO1xuICAgIH1cbiAgICByZW5kZXJTeW1ib2woKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGZlYXR1cmVSZWR1Y3Rpb24gPSBsYXllci5mZWF0dXJlUmVkdWN0aW9uOyAvL19fZXNyaS5GZWF0dXJlUmVkdWN0aW9uQ2x1c3RlcjtcbiAgICAgICAgY29uc3QgaGFzU3ltYm9sID0gISFmZWF0dXJlUmVkdWN0aW9uLnN5bWJvbDtcbiAgICAgICAgcmV0dXJuIChoKFwiY2FsY2l0ZS1ibG9jay1zZWN0aW9uXCIsIHsgdGV4dDogc3RyaW5ncy5jbHVzdGVyLm92ZXJyaWRlU3ltYm9sLCBvcGVuOiBoYXNTeW1ib2wsIFwidG9nZ2xlLWRpc3BsYXlcIjogXCJzd2l0Y2hcIiwgY2xhc3M6IFwiYmxvY2stc2VjdGlvblwiLCBvbkNhbGNpdGVCbG9ja1NlY3Rpb25Ub2dnbGU6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlVG9nZ2xlU3ltYm9sKGV2ZW50KTtcbiAgICAgICAgICAgIH0gfSwgdGhpcy5yZW5kZXJTeW1ib2xDb250ZW50KCkpKTtcbiAgICB9XG4gICAgcmVuZGVyU3ltYm9sQ29udGVudCgpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciwgc3ltYm9sU2VsZWN0ZWQsIHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGZlYXR1cmVSZWR1Y3Rpb24gPSBsYXllci5mZWF0dXJlUmVkdWN0aW9uOyAvL19fZXNyaS5GZWF0dXJlUmVkdWN0aW9uQ2x1c3RlcjtcbiAgICAgICAgaWYgKCFmZWF0dXJlUmVkdWN0aW9uLnN5bWJvbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImJsb2NrLWNvbnRlbnRcIiB9LCBoKFwiY2FsY2l0ZS1sYWJlbFwiLCBudWxsLCBzdHJpbmdzLnN5bWJvbFN0eWxlLCBoKFwiZGl2XCIsIHsgY2xhc3M6IGBzeW1ib2wtYnV0dG9uICR7c3ltYm9sU2VsZWN0ZWQgPyBgc2VsZWN0ZWRgIDogYGB9YCwgdGFiaW5kZXg6IFwiMFwiLCByb2xlOiBcImJ1dHRvblwiLCBcImFyaWEtbGFiZWxcIjogc3RyaW5ncy5zeW1ib2xTdHlsZSwgb25DbGljazogKGV2ZW50KSA9PiB0aGlzLm9wZW5TeW1ib2xTdHlsZXJQb3BvdmVyKGV2ZW50KSB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwic3ltYm9sXCIsIHJlZjogKG5vZGUpID0+IHRoaXMuY3JlYXRlU3ltYm9sUHJldmlldyhub2RlKSB9KSwgaChcImNhbGNpdGUtaWNvblwiLCB7IHNjYWxlOiBcInNcIiwgaWNvbjogXCJwZW5jaWxcIiwgY2xhc3M6IFwic3ltYm9sLWljb25cIiB9KSkpKSk7XG4gICAgfVxuICAgIHJlbmRlclNoYXBlKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAgIC8vIG5lZWQgdG8gc3dpdGNoIGxhYmVscyBiYWNrIGluIHJ0bFxuICAgICAgICBjb25zdCBydGwgPSBnZXRFbGVtZW50RGlyKHRoaXMuaG9zdEVsZW1lbnQpID09PSBcInJ0bFwiO1xuICAgICAgICBjb25zdCBmZWF0dXJlUmVkdWN0aW9uID0gbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbjsgLy9fX2VzcmkuRmVhdHVyZVJlZHVjdGlvbkNsdXN0ZXI7XG4gICAgICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcInNsaWRlci10aXRsZS13cmFwcGVyXCIgfSwgXCIgXCIsIGgoXCJjYWxjaXRlLWxhYmVsXCIsIG51bGwsIHN0cmluZ3MuY2x1c3Rlci5zaGFwZSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInNsaWRlci1kaXZcIiB9LCBoKFwibGFiZWxcIiwgeyBjbGFzczogXCJzbGlkZXItbGFiZWxcIiB9LCBydGwgPyBzdHJpbmdzLmNsdXN0ZXIuZG9udXQgOiBzdHJpbmdzLmNsdXN0ZXIucGllKSwgaChcImNhbGNpdGUtc2xpZGVyXCIsIHsgY2xhc3M6IFwic2xpZGVyLXNsaWRlclwiLCBtaW46IDAsIG1heDogTWF0aC5tYXgoMC45LCBmZWF0dXJlUmVkdWN0aW9uLnJlbmRlcmVyLmhvbGVQZXJjZW50YWdlKSwgdmFsdWU6IChfYSA9IGZlYXR1cmVSZWR1Y3Rpb24ucmVuZGVyZXIuaG9sZVBlcmNlbnRhZ2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDAsIHN0ZXA6IDAuMSwgbWluTGFiZWw6IHN0cmluZ3MuY2x1c3Rlci5zaGFwZSwgb25DYWxjaXRlU2xpZGVySW5wdXQ6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVSZWR1Y3Rpb24gPSBsYXllci5mZWF0dXJlUmVkdWN0aW9uOyAvL19fZXNyaS5GZWF0dXJlUmVkdWN0aW9uQ2x1c3RlcjtcbiAgICAgICAgICAgICAgICBjb25zdCBzbGlkZXIgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgZmVhdHVyZVJlZHVjdGlvbi5yZW5kZXJlci5ob2xlUGVyY2VudGFnZSA9IHNsaWRlci52YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmludGVybmFsQ2hhbmdlLmVtaXQoKTtcbiAgICAgICAgICAgIH0gfSksIGgoXCJsYWJlbFwiLCB7IGNsYXNzOiBcInNsaWRlci1sYWJlbFwiIH0sIHJ0bCA/IHN0cmluZ3MuY2x1c3Rlci5waWUgOiBzdHJpbmdzLmNsdXN0ZXIuZG9udXQpKSkpKTtcbiAgICB9XG4gICAgcmVuZGVyQ2x1c3RlclJhZGl1cygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB7IGxheWVyLCBzdHJpbmdzIH0gPSB0aGlzO1xuICAgICAgICAvLyBuZWVkIHRvIHN3aXRjaCBsYWJlbHMgYmFjayBpbiBydGxcbiAgICAgICAgY29uc3QgcnRsID0gZ2V0RWxlbWVudERpcih0aGlzLmhvc3RFbGVtZW50KSA9PT0gXCJydGxcIjtcbiAgICAgICAgY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247XG4gICAgICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcInNsaWRlci10aXRsZS13cmFwcGVyXCIgfSwgaChcImxhYmVsXCIsIHsgY2xhc3M6IFwic2xpZGVyLWhlYWRpbmdcIiB9LCBzdHJpbmdzLmNsdXN0ZXIucmFkaXVzVGl0bGUpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwic2xpZGVyLWRpdlwiIH0sIGgoXCJsYWJlbFwiLCB7IGNsYXNzOiBcInNsaWRlci1sYWJlbFwiIH0sIHJ0bCA/IHN0cmluZ3MuY2x1c3Rlci5oaWdoIDogc3RyaW5ncy5jbHVzdGVyLmxvdyksIGgoXCJjYWxjaXRlLXNsaWRlclwiLCB7IGNsYXNzOiBcInNsaWRlci1zbGlkZXJcIiwgbWluOiBjbHVzdGVyaW5nUmFkaXVzTWluVmFsLCBtYXg6IGNsdXN0ZXJpbmdSYWRpdXNNYXhWYWwsIHZhbHVlOiAoX2EgPSBmZWF0dXJlUmVkdWN0aW9uLmNsdXN0ZXJSYWRpdXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGNsdXN0ZXJpbmdSYWRpdXNJbml0aWFsVmFsLCBzdGVwOiAxLCBtaW5MYWJlbDogc3RyaW5ncy5jbHVzdGVyLnJhZGl1c1RpdGxlLCBvbkNhbGNpdGVTbGlkZXJJbnB1dDogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247XG4gICAgICAgICAgICAgICAgY29uc3Qgc2xpZGVyID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgICAgIGZlYXR1cmVSZWR1Y3Rpb24uY2x1c3RlclJhZGl1cyA9IHNsaWRlci52YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmludGVybmFsQ2hhbmdlLmVtaXQoKTtcbiAgICAgICAgICAgIH0gfSksIGgoXCJsYWJlbFwiLCB7IGNsYXNzOiBcInNsaWRlci1sYWJlbFwiIH0sIHJ0bCA/IHN0cmluZ3MuY2x1c3Rlci5sb3cgOiBzdHJpbmdzLmNsdXN0ZXIuaGlnaCkpKSk7XG4gICAgfVxuICAgIHJlbmRlckNsdXN0ZXJTaXplKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCB7IGxheWVyLCBzdHJpbmdzLCBkaXNhYmxlU2l6ZVNsaWRlciB9ID0gdGhpcztcbiAgICAgICAgLy8gbmVlZCB0byBzd2l0Y2ggbGFiZWxzIGJhY2sgaW4gcnRsXG4gICAgICAgIGNvbnN0IHJ0bCA9IGdldEVsZW1lbnREaXIodGhpcy5ob3N0RWxlbWVudCkgPT09IFwicnRsXCI7XG4gICAgICAgIGNvbnN0IGZlYXR1cmVSZWR1Y3Rpb24gPSBsYXllci5mZWF0dXJlUmVkdWN0aW9uO1xuICAgICAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczogXCJzbGlkZXItdGl0bGUtd3JhcHBlclwiIH0sIGgoXCJsYWJlbFwiLCB7IGNsYXNzOiBcInNsaWRlci1oZWFkaW5nXCIgfSwgc3RyaW5ncy5jbHVzdGVyLnNpemVUaXRsZSksIGgoXCJkaXZcIiwgeyBjbGFzczogXCJzbGlkZXItZGl2XCIgfSwgaChcImxhYmVsXCIsIHsgY2xhc3M6IFwic2xpZGVyLWxhYmVsXCIgfSwgcnRsID8gc3RyaW5ncy5jbHVzdGVyLm1heCA6IHN0cmluZ3MuY2x1c3Rlci5taW4pLCBoKFwiY2FsY2l0ZS1zbGlkZXJcIiwgeyBjbGFzczogXCJzbGlkZXItc2xpZGVyXCIsIG1pbjogY2x1c3RlcmluZ1NpemVNaW5WYWwsIG1heDogY2x1c3RlcmluZ1NpemVNYXhWYWwsIG1pblZhbHVlOiAoX2EgPSBmZWF0dXJlUmVkdWN0aW9uLmNsdXN0ZXJNaW5TaXplKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjbHVzdGVyaW5nU2l6ZU1pblZhbCwgbWF4VmFsdWU6IChfYiA9IGZlYXR1cmVSZWR1Y3Rpb24uY2x1c3Rlck1heFNpemUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGNsdXN0ZXJpbmdTaXplTWF4VmFsLCBzdGVwOiAxLCBkaXNhYmxlZDogZGlzYWJsZVNpemVTbGlkZXIsIG1pbkxhYmVsOiBgJHtzdHJpbmdzLmNsdXN0ZXIubWlufSAke3N0cmluZ3MuY2x1c3Rlci5zaXplVGl0bGV9YCwgbWF4TGFiZWw6IGAke3N0cmluZ3MuY2x1c3Rlci5tYXh9ICR7c3RyaW5ncy5jbHVzdGVyLnNpemVUaXRsZX1gLCBvbkNhbGNpdGVTbGlkZXJJbnB1dDogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247XG4gICAgICAgICAgICAgICAgY29uc3Qgc2xpZGVyID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgICAgIGZlYXR1cmVSZWR1Y3Rpb24uY2x1c3Rlck1pblNpemUgPSBzbGlkZXIubWluVmFsdWU7XG4gICAgICAgICAgICAgICAgZmVhdHVyZVJlZHVjdGlvbi5jbHVzdGVyTWF4U2l6ZSA9IHNsaWRlci5tYXhWYWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmludGVybmFsQ2hhbmdlLmVtaXQoKTtcbiAgICAgICAgICAgIH0gfSksIGgoXCJsYWJlbFwiLCB7IGNsYXNzOiBcInNsaWRlci1sYWJlbFwiIH0sIHJ0bCA/IHN0cmluZ3MuY2x1c3Rlci5taW4gOiBzdHJpbmdzLmNsdXN0ZXIubWF4KSkpKTtcbiAgICB9XG4gICAgLyogcmVuZGVyU2NhbGVUaHJlc2hvbGQoKTogVk5vZGUge1xuICAgICAgL1xuICAgICAgV29ybGRcbiAgICAgIENvbnRpbmVudCAgICAxOjUwLDAwMCwwMDBcbiAgICAgIENvdW50cmllcyAtIGJpZyAgICAxOjI1LDAwMCwwMDBcbiAgICAgIENvdW50cmllcyAtIHNtYWxsICAgIDE6MTIsMDAwLDAwMFxuICAgICAgU3RhdGVzL1Byb3ZpbmNlcyAgICAxOjYsMDAwLDAwMFxuICAgICAgU3RhdGUvUHJvdmluY2UgICAgMTozLDAwMCwwMDBcbiAgICAgIENvdW50aWVzICAgIDE6MSw1MDAsMDAwXG4gICAgICBDb3VudHkgICAgMTo3NTAsMDAwXG4gICAgICBNZXRyb3BvbGl0YW4gYXJlYSAgICAxOjMyMCwwMDBcbiAgICAgIENpdGllcyAgICAxOjE2MCwwMDBcbiAgICAgIENpdHkgICAgMTo4MCwwMDBcbiAgICAgIFRvd24gICAgMTo0MCwwMDBcbiAgICAgIE5laWdoYm9yaG9vZCAgICAxOjIwLDAwMFxuICAgICAgU3RyZWV0cyAgICAxOjEwLDAwMFxuICAgICAgU3RyZWV0ICAgIDE6NSwwMDBcbiAgICAgIC9cbiAgICAgIGNvbnN0IHsgbGF5ZXIsIHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAvLyBuZWVkIHRvIHN3aXRjaCBsYWJlbHMgYmFjayBpbiBydGxcbiAgICAgIGNvbnN0IHJ0bCA9IGdldEVsZW1lbnREaXIodGhpcy5ob3N0RWxlbWVudCkgPT09IFwicnRsXCI7XG4gICAgICBjb25zdCBmZWF0dXJlUmVkdWN0aW9uID0gbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbiBhcyBhbnk7IC8vX19lc3JpLkZlYXR1cmVSZWR1Y3Rpb25DbHVzdGVyO1xuICAgICAgaWYgKFxuICAgICAgICBmZWF0dXJlUmVkdWN0aW9uLnZpc2liaWxpdHlJbmZvICYmXG4gICAgICAgIGZlYXR1cmVSZWR1Y3Rpb24udmlzaWJpbGl0eUluZm8udGhyZXNob2xkVHlwZSAhPT0gXCJzY2FsZVwiXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgd29ybGRTY2FsZSA9IDI5NTgyODc2NDtcbiAgICAgIGNvbnN0IHRocmVzaG9sZCA9IGZlYXR1cmVSZWR1Y3Rpb24udmlzaWJpbGl0eUluZm8/Lm1heFNjYWxlIHx8IHdvcmxkU2NhbGU7XG4gICAgICBjb25zdCBzY2FsZVN0b3BzID0gW1xuICAgICAgICB3b3JsZFNjYWxlLFxuICAgICAgICA1MDAwMDAwMCxcbiAgICAgICAgMjUwMDAwMDAsXG4gICAgICAgIDEyMDAwMDAwLFxuICAgICAgICA2MDAwMDAwLFxuICAgICAgICAzMDAwMDAwLFxuICAgICAgICAxNTAwMDAwLFxuICAgICAgICA3NTAwMDAsXG4gICAgICAgIDMyMDAwMCxcbiAgICAgICAgMTYwMDAwLFxuICAgICAgICA4MDAwMCxcbiAgICAgICAgNDAwMDAsXG4gICAgICAgIDIwMDAwLFxuICAgICAgICAxMDAwMCxcbiAgICAgICAgNTAwMFxuICAgICAgXTtcbiAgICAgIGNvbnN0IGZpbmRTdG9wID0gKHZhbHVlOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICBzY2FsZVN0b3BzLmZvckVhY2goKHN0b3A6IG51bWJlciwgaWR4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICBpZiAoaWR4ID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoc3RvcCA8IHZhbHVlKSB7XG4gICAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlkeCA9PT0gc2NhbGVTdG9wcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBpZiAoc3RvcCA+PSB2YWx1ZSkge1xuICAgICAgICAgICAgICBpbmRleCA9IHNjYWxlU3RvcHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHN0b3AgPD0gdmFsdWUgJiYgc2NhbGVTdG9wc1tpZHggLSAxXSA+IHZhbHVlKSB7XG4gICAgICAgICAgICAgIGluZGV4ID0gaWR4IC0gMSArIChzY2FsZVN0b3BzW2lkeCAtIDFdIC0gdmFsdWUpIC8gKHNjYWxlU3RvcHNbaWR4IC0gMV0gLSBzdG9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzcz1cInNsaWRlci10aXRsZS13cmFwcGVyXCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwic2xpZGVyLWhlYWRpbmdcIj57c3RyaW5ncy5jbHVzdGVyLnNjYWxlVGhyZXNob2xkfTwvbGFiZWw+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNsaWRlci1kaXZcIj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cInNsaWRlci1sYWJlbFwiPlxuICAgICAgICAgICAgICB7cnRsID8gc3RyaW5ncy5jbHVzdGVyLnN0cmVldFNjYWxlTGFiZWwgOiA8c3Bhbj4mbmJzcDs8L3NwYW4+fVxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDxjYWxjaXRlLXNsaWRlclxuICAgICAgICAgICAgICBjbGFzcz1cInNsaWRlci1zbGlkZXJcIlxuICAgICAgICAgICAgICBtaW49ezB9XG4gICAgICAgICAgICAgIG1heD17MTR9XG4gICAgICAgICAgICAgIHZhbHVlPXtmaW5kU3RvcCh0aHJlc2hvbGQpfVxuICAgICAgICAgICAgICBzdGVwPXswLjF9XG4gICAgICAgICAgICAgIG1pbkxhYmVsPXtzdHJpbmdzLmNsdXN0ZXIuc2NhbGVUaHJlc2hvbGR9XG4gICAgICAgICAgICAgIG9uQ2FsY2l0ZVNsaWRlcklucHV0PXsoZXZlbnQ6IEN1c3RvbUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2xpZGVyID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxDYWxjaXRlU2xpZGVyRWxlbWVudDtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHNsaWRlci52YWx1ZSBhcyBudW1iZXI7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcE1pbiA9IHNjYWxlU3RvcHNbTWF0aC5jZWlsKHZhbHVlKV07XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcE1heCA9IHNjYWxlU3RvcHNbTWF0aC5mbG9vcih2YWx1ZSldO1xuICAgICAgICAgICAgICAgIGxldCB0aHJlc2hvbGQgPSBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICAgc3RvcE1pbiArICh2YWx1ZSAtIE1hdGguZmxvb3IodmFsdWUpKSAqIChzdG9wTWF4IC0gc3RvcE1pbilcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVE9ETzogc2V0IHNjYWxlIHRocmVzaG9sZCB0b1wiLCB0aHJlc2hvbGQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVSZWR1Y3Rpb24gPSBsYXllci5mZWF0dXJlUmVkdWN0aW9uIGFzIGFueTsgLy9fX2VzcmkuRmVhdHVyZVJlZHVjdGlvbkNsdXN0ZXI7XG4gICAgICAgICAgICAgICAgZmVhdHVyZVJlZHVjdGlvbi52aXNpYmlsaXR5SW5mbyA9IHsgbWF4U2NhbGU6IHRocmVzaG9sZCwgdGhyZXNob2xkVHlwZTogXCJzY2FsZVwiIH07XG4gICAgICAgICAgICAgICAgdGhpcy5pbnRlcm5hbENoYW5nZS5lbWl0KCk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+PC9jYWxjaXRlLXNsaWRlcj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cInNsaWRlci1sYWJlbFwiPlxuICAgICAgICAgICAgICB7cnRsID8gPHNwYW4+Jm5ic3A7PC9zcGFuPiA6IHN0cmluZ3MuY2x1c3Rlci5zdHJlZXRTY2FsZUxhYmVsfVxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH0gKi9cbiAgICByZW5kZXJGaWVsZHNCdG4oKSB7XG4gICAgICAgIGNvbnN0IHsgc3RyaW5ncyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgcnRsID0gZ2V0RWxlbWVudERpcih0aGlzLmhvc3RFbGVtZW50KSA9PT0gXCJydGxcIjtcbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiY2x1c3Rlci1idG4tc2VjdGlvblwiIH0sIGgoXCJidXR0b25cIiwgeyBjbGFzczogXCJjbHVzdGVyLWJ0blwiLCBvbkNsaWNrOiAoZXZlbnQpID0+IHRoaXMuYWRkRmllbGRzUGFuZWwoZXZlbnQpLCByZWY6IChub2RlKSA9PiAodGhpcy5maWVsZHNCdXR0b25Ob2RlID0gbm9kZSkgfSwgaChcInNwYW5cIiwgeyBjbGFzczogXCJjbHVzdGVyLWJ0bi10ZXh0XCIgfSwgc3RyaW5ncy5jbHVzdGVyLmVkaXRDbHVzdGVyQXR0cmlidXRlcyksIGgoXCJzcGFuXCIsIHsgY2xhc3M6IFwiY2x1c3Rlci1idG4taWNvblwiIH0sIGgoXCJjYWxjaXRlLWljb25cIiwgeyBzY2FsZTogXCJzXCIsIGljb246IHJ0bCA/IFwiY2hldnJvbi1sZWZ0XCIgOiBcImNoZXZyb24tcmlnaHRcIiB9KSkpKSk7XG4gICAgfVxuICAgIHJlbmRlckxhYmVsQnRuKCkge1xuICAgICAgICBjb25zdCB7IHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHJ0bCA9IGdldEVsZW1lbnREaXIodGhpcy5ob3N0RWxlbWVudCkgPT09IFwicnRsXCI7XG4gICAgICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImNsdXN0ZXItYnRuLXNlY3Rpb25cIiB9LCBoKFwiYnV0dG9uXCIsIHsgY2xhc3M6IFwiY2x1c3Rlci1idG5cIiwgb25DbGljazogKGV2ZW50KSA9PiB0aGlzLmFkZExhYmVsUGFuZWwoZXZlbnQpLCByZWY6IChub2RlKSA9PiAodGhpcy5sYWJlbHNCdXR0b25Ob2RlID0gbm9kZSkgfSwgaChcInNwYW5cIiwgeyBjbGFzczogXCJjbHVzdGVyLWJ0bi10ZXh0XCIgfSwgc3RyaW5ncy5jbHVzdGVyLmVkaXRDbHVzdGVyTGFiZWwpLCBoKFwic3BhblwiLCB7IGNsYXNzOiBcImNsdXN0ZXItYnRuLWljb25cIiB9LCBoKFwiY2FsY2l0ZS1pY29uXCIsIHsgc2NhbGU6IFwic1wiLCBpY29uOiBydGwgPyBcImNoZXZyb24tbGVmdFwiIDogXCJjaGV2cm9uLXJpZ2h0XCIgfSkpKSkpO1xuICAgIH1cbiAgICByZW5kZXJQb3B1cEJ0bigpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBydGwgPSBnZXRFbGVtZW50RGlyKHRoaXMuaG9zdEVsZW1lbnQpID09PSBcInJ0bFwiO1xuICAgICAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczogXCJjbHVzdGVyLWJ0bi1zZWN0aW9uXCIgfSwgaChcImJ1dHRvblwiLCB7IGNsYXNzOiBcImNsdXN0ZXItYnRuXCIsIG9uQ2xpY2s6IChldmVudCkgPT4gdGhpcy5hZGRQb3B1cFBhbmVsKGV2ZW50KSwgcmVmOiAobm9kZSkgPT4gKHRoaXMucG9wdXBCdXR0b25Ob2RlID0gbm9kZSkgfSwgaChcInNwYW5cIiwgeyBjbGFzczogXCJjbHVzdGVyLWJ0bi10ZXh0XCIgfSwgc3RyaW5ncy5jbHVzdGVyLmVkaXRDbHVzdGVyUG9wdXBzKSwgaChcInNwYW5cIiwgeyBjbGFzczogXCJjbHVzdGVyLWJ0bi1pY29uXCIgfSwgaChcImNhbGNpdGUtaWNvblwiLCB7IHNjYWxlOiBcInNcIiwgaWNvbjogcnRsID8gXCJjaGV2cm9uLWxlZnRcIiA6IFwiY2hldnJvbi1yaWdodFwiIH0pKSkpKTtcbiAgICB9XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBQcml2YXRlIG1ldGhvZHNcbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgY2xvc2VQb3BvdmVycygpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdGhpcy5jbG9zZUF0dHJpYnV0ZVBvcG92ZXJzLmVtaXQoKTtcbiAgICAgICAgdGhpcy5jbG9zZUxhYmVsUG9wb3ZlcnMuZW1pdCgpO1xuICAgICAgICB0aGlzLmNsb3NlUG9wdXBQb3BvdmVycy5lbWl0KCk7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuc3R5bGVyUG9wb3Zlck5vZGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXJlbnRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVtb3ZlQ2hpbGQodGhpcy5zdHlsZXJQb3BvdmVyTm9kZSk7XG4gICAgICAgIHRoaXMuc3R5bGVyUG9wb3Zlck5vZGUgPSBudWxsO1xuICAgIH1cbiAgICBoYW5kbGVUb2dnbGVTeW1ib2woZXZlbnQpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciwgbW9kdWxlcyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247IC8vX19lc3JpLkZlYXR1cmVSZWR1Y3Rpb25DbHVzdGVyO1xuICAgICAgICBjb25zdCBzZWN0aW9uID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICAgICAgaWYgKHNlY3Rpb24ub3Blbikge1xuICAgICAgICAgICAgaWYgKHRoaXMubGFzdFN5bWJvbCkge1xuICAgICAgICAgICAgICAgIGZlYXR1cmVSZWR1Y3Rpb24uc3ltYm9sID0gdGhpcy5sYXN0U3ltYm9sO1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdFN5bWJvbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZlYXR1cmVSZWR1Y3Rpb24uc3ltYm9sID0gZ2V0RGVmYXVsdFN5bWJvbChtb2R1bGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGFzdFN5bWJvbCA9IGZlYXR1cmVSZWR1Y3Rpb24uc3ltYm9sO1xuICAgICAgICAgICAgZmVhdHVyZVJlZHVjdGlvbi5zeW1ib2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnRlcm5hbENoYW5nZS5lbWl0KCk7XG4gICAgICAgIGZvcmNlVXBkYXRlKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgIH1cbiAgICBjcmVhdGVTeW1ib2xQcmV2aWV3KGNvbnRhaW5lck5vZGUpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciwgbW9kdWxlcyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBzeW1ib2xVdGlscyB9ID0gbW9kdWxlcztcbiAgICAgICAgY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247IC8vX19lc3JpLkZlYXR1cmVSZWR1Y3Rpb25DbHVzdGVyO1xuICAgICAgICBpZiAoIWZlYXR1cmVSZWR1Y3Rpb24uc3ltYm9sKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3ltYm9sID0gZmVhdHVyZVJlZHVjdGlvbi5zeW1ib2w7XG4gICAgICAgIGNvbnN0IHNpemUgPSBzeW1ib2wudHlwZSA9PT0gXCJjaW1cIiA/IDIwIDogMTQ7XG4gICAgICAgIHN5bWJvbFV0aWxzXG4gICAgICAgICAgICAucmVuZGVyUHJldmlld0hUTUwoc3ltYm9sLCB7XG4gICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgc3ltYm9sQ29uZmlnOiB1bmRlZmluZWRcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChub2RlKSA9PiB7XG4gICAgICAgICAgICBjb250YWluZXJOb2RlLmNoaWxkTm9kZXMuZm9yRWFjaCgoY2hpbGQpID0+IGNvbnRhaW5lck5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpKTtcbiAgICAgICAgICAgIGNvbnRhaW5lck5vZGUuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBvcGVuU3ltYm9sU3R5bGVyUG9wb3ZlcihldmVudCkge1xuICAgICAgICBjb25zdCB7IGxheWVyLCBwb3J0YWwsIHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHJlZkVsZW1lbnQgPSBmaW5kUGFyZW50Tm9kZShldmVudC50YXJnZXQsIG51bGwsIFwic3ltYm9sLWJ1dHRvblwiKTtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGVyUG9wb3Zlck5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuc3ltYm9sU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VQb3BvdmVycygpO1xuICAgICAgICAgICAgdGhpcy5zdHlsZXJQb3BvdmVyTm9kZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlUG9wb3ZlcnMoKTtcbiAgICAgICAgICAgIHRoaXMuc3ltYm9sU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zdHlsZXJQb3BvdmVyTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhcmNnaXMtYWdncmVnYXRpb24tc3ltYm9sLXN0eWxlci1wb3BvdmVyXCIpO1xuICAgICAgICAgICAgdGhpcy5zdHlsZXJQb3BvdmVyTm9kZS5wcm9wcyA9IHsgbGF5ZXIsIHBvcnRhbCwgc3RyaW5ncyB9O1xuICAgICAgICAgICAgdGhpcy5zdHlsZXJQb3BvdmVyTm9kZS5yZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5mbG93SXRlbU5vZGU7XG4gICAgICAgICAgICB0aGlzLnN0eWxlclBvcG92ZXJOb2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJhcmNnaXNBZ2dyZWdhdGlvblN5bWJvbFN0eWxlclBvcG92ZXJDbG9zZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZVBvcG92ZXJzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zeW1ib2xTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIGlmIHdlIGRvIHRoaXMgdG9vIGVhcmx5IHRoZSBlbnRlciBrZXkgZXhlY3V0ZXMgb24gdGhlIGZvY3VzZWQgZGl2XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZWZFbGVtZW50LmZvY3VzKCksIDMwMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuc3R5bGVyUG9wb3Zlck5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcImFyY2dpc0FnZ3JlZ2F0aW9uU3ltYm9sU3R5bGVyQ2hhbmdlXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmludGVybmFsQ2hhbmdlLmVtaXQoKTtcbiAgICAgICAgICAgICAgICBmb3JjZVVwZGF0ZSh0aGlzLmhvc3RFbGVtZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnN0eWxlclBvcG92ZXJOb2RlKTtcbiAgICAgICAgICAgIHRoaXMuc3R5bGVyUG9wb3Zlck5vZGUuc2V0T3Blbih0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRGaWVsZHNQYW5lbChldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy5jbG9zZVBvcG92ZXJzKCk7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIHZpZXcsIGN1cnJlbnRMYW5ndWFnZSwgc3RyaW5ncywgZmxvd05vZGUsIGhpZGVMYXllclRpdGxlIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBmaWVsZHNOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFyY2dpcy1hZ2dyZWdhdGlvbi1maWVsZHNcIik7XG4gICAgICAgIGZpZWxkc05vZGUubGFuZyA9IGN1cnJlbnRMYW5ndWFnZTtcbiAgICAgICAgZmllbGRzTm9kZS5sYXllciA9IGxheWVyO1xuICAgICAgICBmaWVsZHNOb2RlLm1hcFZpZXcgPSB2aWV3O1xuICAgICAgICBmaWVsZHNOb2RlLnN0cmluZ3MgPSBzdHJpbmdzO1xuICAgICAgICBmaWVsZHNOb2RlLmN1cnJlbnRMYW5ndWFnZSA9IGN1cnJlbnRMYW5ndWFnZTtcbiAgICAgICAgZmllbGRzTm9kZS5oaWRlTGF5ZXJUaXRsZSA9IGhpZGVMYXllclRpdGxlO1xuICAgICAgICBmaWVsZHNOb2RlLmZsb3dOb2RlID0gZmxvd05vZGU7XG4gICAgICAgIGZpZWxkc05vZGUuYWRkRXZlbnRMaXN0ZW5lcihcImFyY2dpc0FnZ3JlZ2F0aW9uRmllbGRzQ2hhbmdlXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxDaGFuZ2UuZW1pdCgpO1xuICAgICAgICAgICAgZm9yY2VVcGRhdGUodGhpcy5ob3N0RWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICBmaWVsZHNOb2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJhcmNnaXNBZ2dyZWdhdGlvbkZpZWxkc0JhY2tDbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBmbG93Tm9kZS5yZW1vdmVDaGlsZChmaWVsZHNOb2RlKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5maWVsZHNCdXR0b25Ob2RlLmZvY3VzKCksIDMwMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBmbG93Tm9kZS5hcHBlbmRDaGlsZChmaWVsZHNOb2RlKTtcbiAgICB9XG4gICAgYWRkTGFiZWxQYW5lbChldmVudCkge1xuICAgICAgICBjb25zdCB7IGxheWVyLCB2aWV3LCBwb3J0YWwsIGNvbmZpZywgY3VycmVudExhbmd1YWdlLCBzdHJpbmdzLCBmbG93Tm9kZSwgaGlkZUxheWVyVGl0bGUgfSA9IHRoaXM7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLmNsb3NlUG9wb3ZlcnMoKTtcbiAgICAgICAgY29uc3QgbGFiZWxGbG93SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYWxjaXRlLWZsb3ctaXRlbVwiKTtcbiAgICAgICAgLy9sYWJlbEZsb3dJdGVtLmlkID0gXCJsYWJlbEZsb3dJdGVtX0lkXCI7XG4gICAgICAgIGxhYmVsRmxvd0l0ZW0uaGVhZGluZyA9IHN0cmluZ3MuY2x1c3Rlci5sYWJlbEZlYXR1cmVzSGVhZGluZztcbiAgICAgICAgbGFiZWxGbG93SXRlbS5kZXNjcmlwdGlvbiA9ICFoaWRlTGF5ZXJUaXRsZSA/IGxheWVyLnRpdGxlIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBjYWxjaXRlRmFiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbGNpdGUtZmFiXCIpO1xuICAgICAgICBjYWxjaXRlRmFiLmljb24gPSBcInBsdXNcIjtcbiAgICAgICAgY2FsY2l0ZUZhYi5zbG90ID0gXCJmYWJcIjtcbiAgICAgICAgY2FsY2l0ZUZhYi5zY2FsZSA9IFwic1wiO1xuICAgICAgICBjYWxjaXRlRmFiLmFwcGVhcmFuY2UgPSBcIm91dGxpbmUtZmlsbFwiO1xuICAgICAgICBjYWxjaXRlRmFiLmtpbmQgPSBcIm5ldXRyYWxcIjtcbiAgICAgICAgY2FsY2l0ZUZhYi5sYWJlbCA9IHN0cmluZ3MuY2x1c3Rlci5sYWJlbEZhYjtcbiAgICAgICAgY2FsY2l0ZUZhYi50ZXh0ID0gc3RyaW5ncy5jbHVzdGVyLmxhYmVsRmFiO1xuICAgICAgICBjYWxjaXRlRmFiLnRleHRFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgbGFiZWxGbG93SXRlbS5hcHBlbmRDaGlsZChjYWxjaXRlRmFiKTtcbiAgICAgICAgY29uc3QgbGFiZWxDb21wb25lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXJjZ2lzLWxhYmVsXCIpO1xuICAgICAgICBsYWJlbENvbXBvbmVudC5sYW5nID0gY3VycmVudExhbmd1YWdlO1xuICAgICAgICBsYWJlbENvbXBvbmVudC5sYXllciA9IGxheWVyO1xuICAgICAgICBsYWJlbENvbXBvbmVudC5tYXBWaWV3ID0gdmlldztcbiAgICAgICAgbGFiZWxDb21wb25lbnQucG9ydGFsID0gcG9ydGFsO1xuICAgICAgICBsYWJlbENvbXBvbmVudC5jb25maWcgPSBjb25maWc7XG4gICAgICAgIGxhYmVsQ29tcG9uZW50LmxheWVyRGlzcGxheVR5cGUgPSBsYXllckRpc3BsYXlUeXBlRW51bS5jbHVzdGVyO1xuICAgICAgICBsYWJlbENvbXBvbmVudC5jYWxjaXRlRmxvd1Byb3BzID0geyBjYWxjaXRlRmxvd0l0ZW06IGxhYmVsRmxvd0l0ZW0sIGNhbGNpdGVGYWI6IGNhbGNpdGVGYWIgfTtcbiAgICAgICAgbGFiZWxDb21wb25lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImxhYmVsVXBkYXRlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmludGVybmFsQ2hhbmdlLmVtaXQoKTtcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGFiZWxGbG93SXRlbS5hcHBlbmRDaGlsZChsYWJlbENvbXBvbmVudCk7XG4gICAgICAgIGxhYmVsRmxvd0l0ZW0uYWRkRXZlbnRMaXN0ZW5lcihcImNhbGNpdGVGbG93SXRlbUJhY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmxhYmVsc0J1dHRvbk5vZGUuZm9jdXMoKSwgMzAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZsb3dOb2RlLmFwcGVuZENoaWxkKGxhYmVsRmxvd0l0ZW0pO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBsYWJlbEZsb3dJdGVtLnNldEZvY3VzKCkpLCAyMDApO1xuICAgIH1cbiAgICBhZGRQb3B1cFBhbmVsKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIHZpZXcsIHBvcnRhbCwgY29uZmlnLCBjdXJyZW50TGFuZ3VhZ2UsIHN0cmluZ3MsIGZsb3dOb2RlLCBoaWRlTGF5ZXJUaXRsZSB9ID0gdGhpcztcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMuY2xvc2VQb3BvdmVycygpO1xuICAgICAgICBjb25zdCBwb3B1cEZsb3dJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbGNpdGUtZmxvdy1pdGVtXCIpO1xuICAgICAgICBwb3B1cEZsb3dJdGVtLmhlYWRpbmcgPSBzdHJpbmdzLmNsdXN0ZXIucG9wdXBzSGVhZGluZztcbiAgICAgICAgcG9wdXBGbG93SXRlbS5kZXNjcmlwdGlvbiA9ICFoaWRlTGF5ZXJUaXRsZSA/IGxheWVyLnRpdGxlIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBjYWxjaXRlRmFiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbGNpdGUtZmFiXCIpO1xuICAgICAgICBjYWxjaXRlRmFiLmljb24gPSBcInBsdXNcIjtcbiAgICAgICAgY2FsY2l0ZUZhYi5zbG90ID0gXCJmYWJcIjtcbiAgICAgICAgY2FsY2l0ZUZhYi5zY2FsZSA9IFwic1wiO1xuICAgICAgICBjYWxjaXRlRmFiLmFwcGVhcmFuY2UgPSBcIm91dGxpbmUtZmlsbFwiO1xuICAgICAgICBjYWxjaXRlRmFiLmtpbmQgPSBcIm5ldXRyYWxcIjtcbiAgICAgICAgY2FsY2l0ZUZhYi5sYWJlbCA9IHN0cmluZ3MuY2x1c3Rlci5wb3B1cEZhYjtcbiAgICAgICAgY2FsY2l0ZUZhYi50ZXh0ID0gc3RyaW5ncy5jbHVzdGVyLnBvcHVwRmFiO1xuICAgICAgICBjYWxjaXRlRmFiLnRleHRFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgcG9wdXBGbG93SXRlbS5hcHBlbmRDaGlsZChjYWxjaXRlRmFiKTtcbiAgICAgICAgY29uc3QgcG9wdXBDb21wb25lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXJjZ2lzLXBvcHVwXCIpO1xuICAgICAgICBwb3B1cENvbXBvbmVudC5sYW5nID0gY3VycmVudExhbmd1YWdlO1xuICAgICAgICBwb3B1cENvbXBvbmVudC5sYXllciA9IGxheWVyO1xuICAgICAgICBwb3B1cENvbXBvbmVudC5tYXBWaWV3ID0gdmlldztcbiAgICAgICAgcG9wdXBDb21wb25lbnQucG9ydGFsID0gcG9ydGFsO1xuICAgICAgICBwb3B1cENvbXBvbmVudC5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHBvcHVwQ29tcG9uZW50LmxheWVyRGlzcGxheVR5cGUgPSBsYXllckRpc3BsYXlUeXBlRW51bS5jbHVzdGVyO1xuICAgICAgICBwb3B1cENvbXBvbmVudC5jYWxjaXRlRmxvd1Byb3BzID0ge1xuICAgICAgICAgICAgZmxvdzogZmxvd05vZGUsXG4gICAgICAgICAgICBjYWxjaXRlRmFiOiBjYWxjaXRlRmFiLFxuICAgICAgICAgICAgY2FsY2l0ZUZsb3dJdGVtOiBwb3B1cEZsb3dJdGVtXG4gICAgICAgIH07XG4gICAgICAgIHBvcHVwQ29tcG9uZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwb3B1cFVwZGF0ZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbENoYW5nZS5lbWl0KCk7XG4gICAgICAgICAgICBmb3JjZVVwZGF0ZSh0aGlzLmhvc3RFbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBvcHVwRmxvd0l0ZW0uYXBwZW5kQ2hpbGQocG9wdXBDb21wb25lbnQpO1xuICAgICAgICBwb3B1cEZsb3dJdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJjYWxjaXRlRmxvd0l0ZW1CYWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5wb3B1cEJ1dHRvbk5vZGUuZm9jdXMoKSwgMzAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZsb3dOb2RlLmFwcGVuZENoaWxkKHBvcHVwRmxvd0l0ZW0pO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBwb3B1cEZsb3dJdGVtLnNldEZvY3VzKCkpLCAyMDApO1xuICAgIH1cbiAgICBnZXQgaG9zdEVsZW1lbnQoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG59O1xuQXJjZ2lzQWdncmVnYXRpb25DbHVzdGVyaW5nLnN0eWxlID0gYXJjZ2lzQWdncmVnYXRpb25DbHVzdGVyaW5nQ3NzO1xuXG5jb25zdCBhcmNnaXNBZ2dyZWdhdGlvbkZpZWxkQ3NzID0gXCIuc2VjdGlvbi5zYy1hcmNnaXMtYWdncmVnYXRpb24tZmllbGR7cGFkZGluZy10b3A6MTVweH0uZm9ybWF0LnNjLWFyY2dpcy1hZ2dyZWdhdGlvbi1maWVsZHtwYWRkaW5nLXRvcDoyMHB4fVwiO1xuXG5jb25zdCBBcmNnaXNBZ2dyZWdhdGlvbkZpZWxkID0gY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkZpZWxkQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNBZ2dyZWdhdGlvbkZpZWxkQ2hhbmdlXCIsIDcpO1xuICAgICAgICB0aGlzLm9uRmllbGRTZWxlY3QgPSAoKSA9PiB7XG4gICAgICAgICAgICAvLyBub3QgZm9yIGF1dG9HZW5lcmF0ZWQgZmllbGRzXG4gICAgICAgICAgICAvL3RoaXMuaGFzRm9jdXMgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgeyBsYXllciwgbWFwVmlldywgYWdncmVnYXRlRmllbGQsIGZpZWxkUGlja0xpc3RTb3J0QnksIHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAgICAgICAvL2NvbnN0IGRpciA9IGdldEVsZW1lbnREaXIodGhpcy5ob3N0RWxlbWVudCk7XG4gICAgICAgICAgICAvL3RoaXMuY2xvc2VGaWx0ZXJQb3BvdmVyc0hhbmRsZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IGZsb3dJdGVtTm9kZSA9IGZpbmRQYXJlbnROb2RlKHRoaXMuaG9zdEVsZW1lbnQsIFwiY2FsY2l0ZS1mbG93LWl0ZW1cIik7XG4gICAgICAgICAgICBjb25zdCBub2RlV2lkdGggPSBmbG93SXRlbU5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggfHwgMjE1O1xuICAgICAgICAgICAgdGhpcy5hcmNnaXNGaWVsZFBpY2tMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFyY2dpcy1maWVsZC1waWNrLWxpc3RcIik7XG4gICAgICAgICAgICB0aGlzLmFyY2dpc0ZpZWxkUGlja0xpc3QucG9wb3ZlclByb3BzID0ge1xuICAgICAgICAgICAgICAgIHBsYWNlbWVudDogXCJhdXRvXCIsXG4gICAgICAgICAgICAgICAgb2Zmc2V0RGlzdGFuY2U6IC0xICogKG5vZGVXaWR0aCArIDEwKSxcbiAgICAgICAgICAgICAgICBvZmZzZXRTa2lkZGluZzogMCxcbiAgICAgICAgICAgICAgICBwb2ludGVyRGlzYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcG9wb3ZlcldpZHRoOiBub2RlV2lkdGggKyAzMCxcbiAgICAgICAgICAgICAgICByZWZFbGVtZW50OiBmbG93SXRlbU5vZGVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmFyY2dpc0ZpZWxkUGlja0xpc3QuZmllbGRzID0gdGhpcy5jcmVhdGVQaWNrTGlzdEZpZWxkcygpO1xuICAgICAgICAgICAgdGhpcy5hcmNnaXNGaWVsZFBpY2tMaXN0LmxheWVyID0gbGF5ZXI7XG4gICAgICAgICAgICB0aGlzLmFyY2dpc0ZpZWxkUGlja0xpc3QubWFwVmlldyA9IG1hcFZpZXc7XG4gICAgICAgICAgICB0aGlzLmFyY2dpc0ZpZWxkUGlja0xpc3Quc2hvd0ZpZWxkSW5mbyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmFyY2dpc0ZpZWxkUGlja0xpc3Quc2hvd0ZpZWxkTmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5hcmNnaXNGaWVsZFBpY2tMaXN0LnNlbGVjdGVkRmllbGRzID0gW2FnZ3JlZ2F0ZUZpZWxkLm9uU3RhdGlzdGljRmllbGRdO1xuICAgICAgICAgICAgdGhpcy5hcmNnaXNGaWVsZFBpY2tMaXN0LnNvcnRCeSA9IGZpZWxkUGlja0xpc3RTb3J0Qnk7XG4gICAgICAgICAgICB0aGlzLmFyY2dpc0ZpZWxkUGlja0xpc3QuYWRkRXZlbnRMaXN0ZW5lcihcImFyY2dpc0ZpZWxkUGlja0xpc3REaXNtaXNzZWRcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZEZpZWxkID0gKF9iID0gKF9hID0gZXZlbnQuZGV0YWlsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2VsZWN0ZWRGaWVsZHMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYlswXTtcbiAgICAgICAgICAgICAgICBmbG93SXRlbU5vZGUuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hcmNnaXNGaWVsZFBpY2tMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5hcmNnaXNGaWVsZFBpY2tMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcmNnaXNGaWVsZFBpY2tMaXN0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkTm9kZS5zZXRGb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkRmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBhZ2dyZWdhdGVGaWVsZCB9ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGQgPSBnZXRMYXllckZpZWxkKGxheWVyLCBzZWxlY3RlZEZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2UgaGF2ZSB0aGlzIGZpZWxkIGFscmVhZHkuLi5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZXMgPSBnZXRTdGF0c1R5cGVzKGZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlkeFR5cGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaGFzQWxyZWFkeSA9IGhhc0ZpZWxkQWxyZWFkeShsYXllciwgZmllbGQubmFtZSwgdHlwZXNbaWR4VHlwZV0pO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaWR4VHlwZSA8IHR5cGVzLmxlbmd0aCAmJiBoYXNBbHJlYWR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHhUeXBlKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZXNbaWR4VHlwZV0gPT09IGFnZ3JlZ2F0ZUZpZWxkLnN0YXRpc3RpY1R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBza2lwIHRoZSBjdXJyZW50IG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkeFR5cGUrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHhUeXBlIDwgdHlwZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQWxyZWFkeSA9IGhhc0ZpZWxkQWxyZWFkeShsYXllciwgZmllbGQubmFtZSwgdHlwZXNbaWR4VHlwZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNBbHJlYWR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbGwgc3RhdGlzdGljVHlwZXMgYWxyZWFkeSBleGlzdCBmb3IgdGhpcyBmaWVsZDsgY2FuJ3QgY2hhbmdlIHRvIHRoaXMgZmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvbGRGaWVsZE5hbWUgPSBhZ2dyZWdhdGVGaWVsZC5uYW1lO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gdHlwZXNbaWR4VHlwZV07XG4gICAgICAgICAgICAgICAgICAgIGFnZ3JlZ2F0ZUZpZWxkLm5hbWUgPSBgJHtmaWVsZC5uYW1lfV8ke3R5cGV9YDtcbiAgICAgICAgICAgICAgICAgICAgYWdncmVnYXRlRmllbGQub25TdGF0aXN0aWNGaWVsZCA9IGZpZWxkLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGFnZ3JlZ2F0ZUZpZWxkLmFsaWFzID0gYCR7ZmllbGQuYWxpYXMgfHwgZmllbGQubmFtZX0gJHtnZXRTdGF0c1R5cGVTdHJpbmcodHlwZSwgc3RyaW5ncykudG9Mb3dlckNhc2UoKX1gO1xuICAgICAgICAgICAgICAgICAgICBhZ2dyZWdhdGVGaWVsZC5zdGF0aXN0aWNUeXBlID0gdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlUG9wdXBGaWVsZChvbGRGaWVsZE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uRmllbGRDaGFuZ2UuZW1pdCgpO1xuICAgICAgICAgICAgICAgIH0gLy8gZWxzZSB1c2VyIGhpdCBjYW5jZWwgb3IgY2xvc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5hcmNnaXNGaWVsZFBpY2tMaXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJhcmNnaXNGaWVsZFBpY2tMaXN0U29ydEJ5Q2hhbmdlXCIsIChldmVudCkgPT4gKHRoaXMuZmllbGRQaWNrTGlzdFNvcnRCeSA9IGV2ZW50LmRldGFpbCkpO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmFyY2dpc0ZpZWxkUGlja0xpc3QpO1xuICAgICAgICAgICAgZmxvd0l0ZW1Ob2RlLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tYXBWaWV3ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxheWVyID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmFnZ3JlZ2F0ZUZpZWxkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdHJpbmdzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmN1cnJlbnRMYW5ndWFnZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gIHB1YmxpYyBjYWxsc1xuICAgIC8vXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFB1YmxpYyBNZXRob2RzXG4gICAgYXN5bmMgZG9uZSgpIHtcbiAgICAgICAgdGhpcy5jbG9zZVBvcG92ZXJzKCk7XG4gICAgfVxuICAgIGFzeW5jIHNldEZvY3VzKCkge1xuICAgICAgICB0aGlzLnBhbmVsTm9kZS5zZXRGb2N1cygpO1xuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgTGlmZWN5Y2xlXG4gICAgLy9cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgYXN5bmMgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgICAgIGNvbnN0IFtGaWVsZEluZm8sIEZpZWxkSW5mb0Zvcm1hdF0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXG4gICAgICAgICAgICBcImVzcmkvcG9wdXAvRmllbGRJbmZvXCIsXG4gICAgICAgICAgICBcImVzcmkvcG9wdXAvc3VwcG9ydC9GaWVsZEluZm9Gb3JtYXRcIlxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy5tb2R1bGVzID0ge1xuICAgICAgICAgICAgRmllbGRJbmZvLFxuICAgICAgICAgICAgRmllbGRJbmZvRm9ybWF0XG4gICAgICAgIH07XG4gICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgZmllbGQgZXhpc3RzIGluIHRoZSBwb3B1cFxuICAgICAgICBjb25zdCB7IGxheWVyLCBhZ2dyZWdhdGVGaWVsZCwgbW9kdWxlcyB9ID0gdGhpcztcbiAgICAgICAgbGV0IGZpZWxkSW5mbyA9IGdldFBvcHVwRmllbGRJbmZvKGxheWVyLCBhZ2dyZWdhdGVGaWVsZC5uYW1lKTtcbiAgICAgICAgaWYgKCFmaWVsZEluZm8pIHtcbiAgICAgICAgICAgIGFkZFBvcHVwRmllbGQoYWdncmVnYXRlRmllbGQsIGxheWVyLCBtb2R1bGVzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5jbG9zZVBvcG92ZXJzKCk7XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgUmVuZGVyIE1ldGhvZHNcbiAgICAvL1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIC8qXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJGaWVsZE5hbWVcIixcbiAgICAgICAgICBcImFsaWFzXCI6IFwiVGhlIGZpZWxkIGFsaWFzXCIsXG4gICAgICAgICAgXCJvblN0YXRpc3RpY0ZpZWxkXCI6IFwiTGF5ZXIgZmllbGRcIixcbiAgICAgICAgICBcIm9uU3RhdGlzdGljRXhwcmVzc2lvblwiOiB7XG4gICAgICAgICAgICBcImV4cHJlc3Npb25cIjogXCJBcmNhZGUgZXhwcmVzc2lvbiBnb2VzIGhlcmVcIixcbiAgICAgICAgICAgIFwicmV0dXJuVHlwZVwiOiBcIjxzdHJpbmcgfCBudW1iZXI+XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic3RhdGlzdGljVHlwZVwiOiBcIjxjb3VudCB8IHN1bSB8IG1pbiB8IG1heCB8IG1vZGUgfCBhdmcgfCBzdGRkZXYgfCB2YXI+XCIsXG4gICAgICAgICAgXCJpc0luZmVycmVkXCI6IDxib29sZWFuPiAgLy8gb25seSBuZWVkZWQgZm9yIE9ubGluZVxuICAgICAgICB9XG4gICAgICAgICovXG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIGFnZ3JlZ2F0ZUZpZWxkLCBvcGVuIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBkaXIgPSBnZXRFbGVtZW50RGlyKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgICAgICBjb25zdCBmaWVsZEluZm8gPSBnZXRQb3B1cEZpZWxkSW5mbyhsYXllciwgYWdncmVnYXRlRmllbGQubmFtZSk7XG4gICAgICAgIGNvbnN0IGFsaWFzID0gKGFnZ3JlZ2F0ZUZpZWxkLmlzQXV0b0dlbmVyYXRlZCA/IGZpZWxkSW5mby5sYWJlbCA6IGFnZ3JlZ2F0ZUZpZWxkLmFsaWFzKSB8fFxuICAgICAgICAgICAgYWdncmVnYXRlRmllbGQubmFtZTtcbiAgICAgICAgcmV0dXJuIChoKEhvc3QsIHsgZGlyOiBkaXIgfSwgaChcImNhbGNpdGUtYmxvY2tcIiwgeyBoZWFkaW5nOiBhbGlhcywgb3Blbjogb3BlbiwgY29sbGFwc2libGU6IHRydWUsIHJlZjogKG5vZGUpID0+ICh0aGlzLmJsb2NrTm9kZSA9IG5vZGUpLCBvbkNhbGNpdGVCbG9ja09wZW46IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuID0gbm9kZS5vcGVuO1xuICAgICAgICAgICAgfSwgb25DYWxjaXRlQmxvY2tDbG9zZTogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW4gPSBub2RlLm9wZW47XG4gICAgICAgICAgICB9IH0sIHRoaXMucmVuZGVyRHJvcGRvd24oKSwgdGhpcy5yZW5kZXJGaWVsZFNlbGVjdGlvbigpLCB0aGlzLnJlbmRlclR5cGVTZWxlY3Rpb24oKSwgdGhpcy5yZW5kZXJSZXN1bHRGaWVsZE5hbWUoKSwgdGhpcy5yZW5kZXJGaWVsZEFsaWFzKCksIHRoaXMucmVuZGVyRm9ybWF0dGluZygpKSkpO1xuICAgIH1cbiAgICByZW5kZXJEcm9wZG93bigpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciwgYWdncmVnYXRlRmllbGQsIHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0TGF5ZXJGaWVsZChsYXllciwgYWdncmVnYXRlRmllbGQub25TdGF0aXN0aWNGaWVsZCk7XG4gICAgICAgIGlmIChhZ2dyZWdhdGVGaWVsZC5pc0F1dG9HZW5lcmF0ZWQgfHwgIWZpZWxkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXIgPSBnZXRFbGVtZW50RGlyKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBzbG90OiBcImNvbnRyb2xcIiB9LCBoKFwiY2FsY2l0ZS1kcm9wZG93blwiLCB7IGRpcjogZGlyLCBwbGFjZW1lbnQ6IFwiYm90dG9tLWVuZFwiLCBzY2FsZTogXCJzXCIsIG92ZXJsYXlQb3NpdGlvbmluZzogXCJmaXhlZFwiIH0sIGgoXCJjYWxjaXRlLWFjdGlvblwiLCB7IHJlZjogKG5vZGUpID0+ICh0aGlzLmRyb3Bkb3duQWN0aW9uTm9kZSA9IG5vZGUpLCBzbG90OiBcInRyaWdnZXJcIiwgc2NhbGU6IFwibVwiLCB0ZXh0OiBzdHJpbmdzLmRlbGV0ZSB9LCBoKFwiY2FsY2l0ZS1pY29uXCIsIHsgc2NhbGU6IFwic1wiLCBpY29uOiBcImVsbGlwc2lzXCIgfSkpLCBoKFwiY2FsY2l0ZS1kcm9wZG93bi1ncm91cFwiLCBudWxsLCBoKFwiY2FsY2l0ZS1kcm9wZG93bi1pdGVtXCIsIHsgb25DbGljazogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVGaWVsZCgpO1xuICAgICAgICAgICAgfSwgb25LZXlEb3duOiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBcIiBcIiB8fCBldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUZpZWxkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB9LCBzdHJpbmdzLmRlbGV0ZSkpKSkpO1xuICAgIH1cbiAgICByZW5kZXJGaWVsZFNlbGVjdGlvbigpIHtcbiAgICAgICAgY29uc3QgeyBhZ2dyZWdhdGVGaWVsZCwgc3RyaW5ncyB9ID0gdGhpcztcbiAgICAgICAgaWYgKCFhZ2dyZWdhdGVGaWVsZC5vblN0YXRpc3RpY0ZpZWxkKSB7XG4gICAgICAgICAgICAvLyBlLmcuIGNsdXN0ZXJfY291bnQgb3Igb25TdGF0aXN0aWNzRXhwcmVzc2lvblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChoKEZyYWdtZW50LCBudWxsLCBoKFwiY2FsY2l0ZS1sYWJlbFwiLCBudWxsLCBzdHJpbmdzLmZpZWxkcy5maWVsZCksIGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IGFwcGVhcmFuY2U6IFwib3V0bGluZS1maWxsXCIsIGtpbmQ6IFwibmV1dHJhbFwiLCB3aWR0aDogXCJmdWxsXCIsIHNjYWxlOiBcIm1cIiwgYWxpZ25tZW50OiBcImljb24tZW5kLXNwYWNlLWJldHdlZW5cIiwgaWNvbkVuZDogXCJjaGV2cm9uLWRvd25cIiwgZGlzYWJsZWQ6IGFnZ3JlZ2F0ZUZpZWxkLmlzQXV0b0dlbmVyYXRlZCwgb25DbGljazogKCkgPT4gdGhpcy5vbkZpZWxkU2VsZWN0KCksIHJlZjogKG5vZGUpID0+ICh0aGlzLmZpZWxkTm9kZSA9IG5vZGUpIH0sIGFnZ3JlZ2F0ZUZpZWxkLm9uU3RhdGlzdGljRmllbGQpKSk7XG4gICAgfVxuICAgIHJlbmRlclR5cGVTZWxlY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIGFnZ3JlZ2F0ZUZpZWxkLCBzdHJpbmdzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBmaWVsZCA9IGdldExheWVyRmllbGQobGF5ZXIsIGFnZ3JlZ2F0ZUZpZWxkLm9uU3RhdGlzdGljRmllbGQpO1xuICAgICAgICBjb25zdCBpc1N0cmluZyA9IChmaWVsZCA9PT0gbnVsbCB8fCBmaWVsZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmllbGQudHlwZSkgPT09IFwic3RyaW5nXCI7XG4gICAgICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcInNlY3Rpb25cIiB9LCBoKFwiY2FsY2l0ZS1sYWJlbFwiLCBudWxsLCBzdHJpbmdzLmZpZWxkcy5zdGF0c1R5cGUpLCBoKFwiY2FsY2l0ZS1zZWxlY3RcIiwgeyB3aWR0aDogXCJmdWxsXCIsIHNjYWxlOiBcIm1cIiwgbGFiZWw6IHN0cmluZ3MuZmllbGRzLnN0YXRzVHlwZSwgZGlzYWJsZWQ6IGFnZ3JlZ2F0ZUZpZWxkLmlzQXV0b0dlbmVyYXRlZCB8fCAhZmllbGQsIG9uQ2FsY2l0ZVNlbGVjdENoYW5nZTogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gZGlzYWJsZWQgZm9yIGF1dG9HZW5lcmF0ZWQgZmllbGRzXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGV2ZW50ID09PSBudWxsIHx8IGV2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IG5vZGUuc2VsZWN0ZWRPcHRpb24udmFsdWU7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2xkRmllbGROYW1lID0gYWdncmVnYXRlRmllbGQubmFtZTtcbiAgICAgICAgICAgICAgICBhZ2dyZWdhdGVGaWVsZC5uYW1lID0gYCR7ZmllbGQubmFtZX1fJHt0eXBlfWA7XG4gICAgICAgICAgICAgICAgYWdncmVnYXRlRmllbGQub25TdGF0aXN0aWNGaWVsZCA9IGZpZWxkLm5hbWU7XG4gICAgICAgICAgICAgICAgYWdncmVnYXRlRmllbGQuYWxpYXMgPSBgJHtmaWVsZC5hbGlhcyB8fCBmaWVsZC5uYW1lfSAke2dldFN0YXRzVHlwZVN0cmluZyh0eXBlLCBzdHJpbmdzKS50b0xvd2VyQ2FzZSgpfWA7XG4gICAgICAgICAgICAgICAgYWdncmVnYXRlRmllbGQuc3RhdGlzdGljVHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlUG9wdXBGaWVsZChvbGRGaWVsZE5hbWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXJjZ2lzQWdncmVnYXRpb25GaWVsZENoYW5nZS5lbWl0KCk7XG4gICAgICAgICAgICB9IH0sICFpc1N0cmluZyAmJiB0aGlzLnJlbmRlclR5cGVPcHRpb24oXCJzdW1cIiksICFpc1N0cmluZyAmJiB0aGlzLnJlbmRlclR5cGVPcHRpb24oXCJhdmdcIiksICFpc1N0cmluZyAmJiB0aGlzLnJlbmRlclR5cGVPcHRpb24oXCJtaW5cIiksICFpc1N0cmluZyAmJiB0aGlzLnJlbmRlclR5cGVPcHRpb24oXCJtYXhcIiksIHRoaXMucmVuZGVyVHlwZU9wdGlvbihcIm1vZGVcIiksIGFnZ3JlZ2F0ZUZpZWxkLnN0YXRpc3RpY1R5cGUgPT09IFwiY291bnRcIiAmJiB0aGlzLnJlbmRlclR5cGVPcHRpb24oXCJjb3VudFwiKSkpKTtcbiAgICB9XG4gICAgcmVuZGVyVHlwZU9wdGlvbih0eXBlKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIGFnZ3JlZ2F0ZUZpZWxkLCBzdHJpbmdzIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGgoXCJjYWxjaXRlLW9wdGlvblwiLCB7IHZhbHVlOiB0eXBlLCBsYWJlbDogZ2V0U3RhdHNUeXBlU3RyaW5nKHR5cGUsIHN0cmluZ3MpLCBkaXNhYmxlZDogYWdncmVnYXRlRmllbGQuc3RhdGlzdGljVHlwZSAhPT0gdHlwZSAmJlxuICAgICAgICAgICAgICAgIGhhc0ZpZWxkQWxyZWFkeShsYXllciwgYWdncmVnYXRlRmllbGQub25TdGF0aXN0aWNGaWVsZCwgdHlwZSksIHNlbGVjdGVkOiBhZ2dyZWdhdGVGaWVsZC5zdGF0aXN0aWNUeXBlID09PSB0eXBlIH0pKTtcbiAgICB9XG4gICAgcmVuZGVyUmVzdWx0RmllbGROYW1lKCkge1xuICAgICAgICBjb25zdCB7IGFnZ3JlZ2F0ZUZpZWxkLCBzdHJpbmdzIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczogXCJzZWN0aW9uXCIgfSwgaChcImNhbGNpdGUtbGFiZWxcIiwgbnVsbCwgc3RyaW5ncy5maWVsZHMucmVzdWx0RmllbGROYW1lKSwgaChcImNhbGNpdGUtaW5wdXRcIiwgeyB0eXBlOiBcInRleHRcIiwgZGlzYWJsZWQ6IHRydWUsIHZhbHVlOiBhZ2dyZWdhdGVGaWVsZC5uYW1lLCBzY2FsZTogXCJtXCIsIGxhYmVsOiBzdHJpbmdzLmZpZWxkcy5yZXN1bHRGaWVsZE5hbWUgfSkpKTtcbiAgICB9XG4gICAgcmVuZGVyRmllbGRBbGlhcygpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciwgYWdncmVnYXRlRmllbGQsIHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGZpZWxkSW5mbyA9IGdldFBvcHVwRmllbGRJbmZvKGxheWVyLCBhZ2dyZWdhdGVGaWVsZC5uYW1lKTtcbiAgICAgICAgY29uc3QgYWxpYXMgPSAoYWdncmVnYXRlRmllbGQuaXNBdXRvR2VuZXJhdGVkID8gZmllbGRJbmZvLmxhYmVsIDogYWdncmVnYXRlRmllbGQuYWxpYXMpIHx8XG4gICAgICAgICAgICBhZ2dyZWdhdGVGaWVsZC5uYW1lO1xuICAgICAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczogXCJzZWN0aW9uXCIgfSwgaChcImNhbGNpdGUtbGFiZWxcIiwgbnVsbCwgc3RyaW5ncy5maWVsZHMuZmllbGRBbGlhcyksIGgoXCJjYWxjaXRlLWlucHV0XCIsIHsgdHlwZTogXCJ0ZXh0XCIsIHZhbHVlOiBhbGlhcywgc2NhbGU6IFwibVwiLCBsYWJlbDogc3RyaW5ncy5maWVsZHMuZmllbGRBbGlhcywgb25DYWxjaXRlSW5wdXRJbnB1dDogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgICAgICBsZXQgYWxpYXMgPSBub2RlLnZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tOb2RlLmhlYWRpbmcgPSBhbGlhcztcbiAgICAgICAgICAgICAgICBpZiAoIWFsaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxldCdzIGdpdmUgdGhlIHVzZXIgdGltZSB0byBmaWxsIGl0IGluO1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiBub3Qgd2UgZGVmYXVsdCB0byBzb21ldGhpbmdcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZEluZm8gPSBnZXRQb3B1cEZpZWxkSW5mbyhsYXllciwgYWdncmVnYXRlRmllbGQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJBbGlhcyA9IGFnZ3JlZ2F0ZUZpZWxkLmlzQXV0b0dlbmVyYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmllbGRJbmZvLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhZ2dyZWdhdGVGaWVsZC5hbGlhcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY3VyQWxpYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IGdldExheWVyRmllbGQobGF5ZXIsIGFnZ3JlZ2F0ZUZpZWxkLm9uU3RhdGlzdGljRmllbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWFzID0gYCR7ZmllbGQuYWxpYXMgfHwgZmllbGQubmFtZX0gJHtnZXRTdGF0c1R5cGVTdHJpbmcoYWdncmVnYXRlRmllbGQuc3RhdGlzdGljVHlwZSwgc3RyaW5ncykudG9Mb2NhbGVMb3dlckNhc2UoKX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tOb2RlLmhlYWRpbmcgPSBhbGlhcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnZhbHVlID0gYWxpYXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUFsaWFzKGFsaWFzKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUFsaWFzKGFsaWFzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IH0pKSk7XG4gICAgfVxuICAgIHJlbmRlckZvcm1hdHRpbmcoKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIGFnZ3JlZ2F0ZUZpZWxkLCBtb2R1bGVzLCBzdHJpbmdzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IEZpZWxkSW5mb0Zvcm1hdCB9ID0gbW9kdWxlcztcbiAgICAgICAgY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247XG4gICAgICAgIGNvbnN0IHBvcHVwVGVtcGxhdGUgPSBmZWF0dXJlUmVkdWN0aW9uLnBvcHVwVGVtcGxhdGU7XG4gICAgICAgIGNvbnN0IGxheWVyRmllbGQgPSBnZXRMYXllckZpZWxkKGxheWVyLCBhZ2dyZWdhdGVGaWVsZC5vblN0YXRpc3RpY0ZpZWxkKTtcbiAgICAgICAgaWYgKCghbGF5ZXJGaWVsZCAmJiBhZ2dyZWdhdGVGaWVsZC5zdGF0aXN0aWNUeXBlICE9PSBcImNvdW50XCIpIHx8XG4gICAgICAgICAgICAobGF5ZXJGaWVsZCA9PT0gbnVsbCB8fCBsYXllckZpZWxkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsYXllckZpZWxkLnR5cGUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZmllbGRJbmZvID0gcG9wdXBUZW1wbGF0ZS5maWVsZEluZm9zLmZpbmQoKGZpZWxkSW5mbykgPT4gZmllbGRJbmZvLmZpZWxkTmFtZSA9PT0gYWdncmVnYXRlRmllbGQubmFtZSk7XG4gICAgICAgIGZpZWxkSW5mby5mb3JtYXQgPVxuICAgICAgICAgICAgZmllbGRJbmZvLmZvcm1hdCB8fFxuICAgICAgICAgICAgICAgIG5ldyBGaWVsZEluZm9Gb3JtYXQoeyBkaWppdFNlcGFyYXRvcjogdHJ1ZSwgcGxhY2VzOiAwIH0pO1xuICAgICAgICBjb25zdCBpc0ludCA9ICFsYXllckZpZWxkIHx8IFtcImludGVnZXJcIiwgXCJzbWFsbC1pbnRlZ2VyXCIsIFwiYmlnLWludGVnZXJcIl0uaW5kZXhPZihsYXllckZpZWxkLnR5cGUpID4gLTE7XG4gICAgICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImZvcm1hdFwiIH0sIGgoXCJjYWxjaXRlLWxhYmVsXCIsIHsgc2NhbGU6IFwibFwiIH0sIHN0cmluZ3MuZmllbGRzLmZvcm1hdHRpbmcpLCAhaXNJbnQgJiYgdGhpcy5yZW5kZXJTaWduaWZpY2FudERpZ2l0cyhmaWVsZEluZm8uZm9ybWF0KSwgdGhpcy5yZW5kZXJUaG91c2FuZFNlcGVyYXRvcihmaWVsZEluZm8uZm9ybWF0KSkpO1xuICAgIH1cbiAgICByZW5kZXJUaG91c2FuZFNlcGVyYXRvcihmb3JtYXQpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGgoXCJzZWN0aW9uXCIsIG51bGwsIGgoXCJjYWxjaXRlLWxhYmVsXCIsIHsgbGF5b3V0OiBcImlubGluZS1zcGFjZS1iZXR3ZWVuXCIgfSwgc3RyaW5ncy5maWVsZHMuc2hvdzEwMDBTZXBhcmF0b3IsIGgoXCJjYWxjaXRlLXN3aXRjaFwiLCB7IHNjYWxlOiBcInNcIiwgY2hlY2tlZDogZm9ybWF0LmRpZ2l0U2VwYXJhdG9yLCBvbkNhbGNpdGVTd2l0Y2hDaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBldmVudCA9PT0gbnVsbCB8fCBldmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgICAgIGZvcm1hdC5kaWdpdFNlcGFyYXRvciA9IG5vZGUuY2hlY2tlZDtcbiAgICAgICAgICAgICAgICB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uRmllbGRDaGFuZ2UuZW1pdCgpO1xuICAgICAgICAgICAgfSB9KSkpKTtcbiAgICB9XG4gICAgcmVuZGVyU2lnbmlmaWNhbnREaWdpdHMoZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IHsgc3RyaW5ncyB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChoKFwic2VjdGlvblwiLCBudWxsLCBoKFwiY2FsY2l0ZS1sYWJlbFwiLCBudWxsLCBzdHJpbmdzLmZpZWxkcy5zaWduaWZpY2FudERpZ2l0cywgaChcImNhbGNpdGUtc2VsZWN0XCIsIHsgbGFiZWw6IHN0cmluZ3MuZmllbGRzLnNpZ25pZmljYW50RGlnaXRzLCBvbkNhbGNpdGVTZWxlY3RDaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0LnBsYWNlcyA9IE51bWJlcihub2RlLnNlbGVjdGVkT3B0aW9uLnZhbHVlKSB8fCAwO1xuICAgICAgICAgICAgICAgIHRoaXMuYXJjZ2lzQWdncmVnYXRpb25GaWVsZENoYW5nZS5lbWl0KCk7XG4gICAgICAgICAgICB9IH0sIGgoXCJjYWxjaXRlLW9wdGlvblwiLCB7IHZhbHVlOiBcIjBcIiwgc2VsZWN0ZWQ6IGZvcm1hdC5wbGFjZXMgPT09IDAgfSwgc3RyaW5ncy5maWVsZHMuZGVjaW1hbFBsYWNlczApLCBoKFwiY2FsY2l0ZS1vcHRpb25cIiwgeyB2YWx1ZTogXCIxXCIsIHNlbGVjdGVkOiBmb3JtYXQucGxhY2VzID09PSAxIH0sIHN0cmluZ3MuZmllbGRzLmRlY2ltYWxQbGFjZXMxKSwgWzIsIDMsIDQsIDUsIDYsIDcsIDhdLm1hcCgoeCkgPT4gKGgoXCJjYWxjaXRlLW9wdGlvblwiLCB7IHZhbHVlOiB4LnRvU3RyaW5nKCksIHNlbGVjdGVkOiBmb3JtYXQucGxhY2VzID09PSB4IH0sIHN0cmluZ3MuZmllbGRzLmRlY2ltYWxQbGFjZXNOLnJlcGxhY2UoXCIke251bX1cIiwgYCR7eH1gKSkpKSkpKSk7XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgUHJpdmF0ZSBtZXRob2RzXG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGNsb3NlUG9wb3ZlcnMoKSB7XG4gICAgICAgIGlmICh0aGlzLmFyY2dpc0ZpZWxkUGlja0xpc3QpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5hcmNnaXNGaWVsZFBpY2tMaXN0KTtcbiAgICAgICAgICAgIHRoaXMuYXJjZ2lzRmllbGRQaWNrTGlzdCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlRmllbGQoKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIGFnZ3JlZ2F0ZUZpZWxkIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBmZWF0dXJlUmVkdWN0aW9uID0gbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbjtcbiAgICAgICAgY29uc3QgcG9wdXBUZW1wbGF0ZSA9IGZlYXR1cmVSZWR1Y3Rpb24ucG9wdXBUZW1wbGF0ZTtcbiAgICAgICAgbGV0IGlkeCA9IHBvcHVwVGVtcGxhdGUuZmllbGRJbmZvcy5maW5kSW5kZXgoKGZpZWxkSW5mbykgPT4gZmllbGRJbmZvLmZpZWxkTmFtZSA9PT0gYWdncmVnYXRlRmllbGQubmFtZSk7XG4gICAgICAgIGlkeCA+PSAwICYmIHBvcHVwVGVtcGxhdGUuZmllbGRJbmZvcy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgaWR4ID0gZmVhdHVyZVJlZHVjdGlvbi5maWVsZHMuZmluZEluZGV4KChhZiAvKiBfX2VzcmkuQWdncmVnYXRlRmllbGQgKi8pID0+IGFmLm5hbWUgPT09IGFnZ3JlZ2F0ZUZpZWxkLm5hbWUpO1xuICAgICAgICBmZWF0dXJlUmVkdWN0aW9uLmZpZWxkcy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkZpZWxkQ2hhbmdlLmVtaXQoKTtcbiAgICB9XG4gICAgY3JlYXRlUGlja0xpc3RGaWVsZHMoKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIGFnZ3JlZ2F0ZUZpZWxkIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGZpZWxkcyB9ID0gbGF5ZXI7XG4gICAgICAgIGNvbnN0IGxheWVyRmllbGRzID0gZmllbGRzLmZpbHRlcigoZmllbGQpID0+IFtcbiAgICAgICAgICAgIFwic21hbGwtaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJiaWctaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcInNpbmdsZVwiLFxuICAgICAgICAgICAgXCJkb3VibGVcIixcbiAgICAgICAgICAgIFwibG9uZ1wiLFxuICAgICAgICAgICAgXCJudW1iZXJcIixcbiAgICAgICAgICAgIFwic3RyaW5nXCJcbiAgICAgICAgXS5pbmRleE9mKGZpZWxkLnR5cGUpID4gLTEpO1xuICAgICAgICByZXR1cm4gbGF5ZXJGaWVsZHNcbiAgICAgICAgICAgIC5maWx0ZXIoKGZpZWxkKSA9PiBhZ2dyZWdhdGVGaWVsZC5vblN0YXRpc3RpY0ZpZWxkID09PSBmaWVsZC5uYW1lIHx8ICFpc0ZpZWxkRG9uZShsYXllciwgZmllbGQubmFtZSkpXG4gICAgICAgICAgICAubWFwKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBmaWVsZC5uYW1lLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBmaWVsZC5hbGlhcyxcbiAgICAgICAgICAgICAgICB0eXBlOiBmaWVsZC50eXBlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVwbGFjZVBvcHVwRmllbGQob2xkTmFtZSkge1xuICAgICAgICAvLyBhZnRlciBjaGFuZ2luZyBmaWVsZCBvciBzdGF0cyB0eXBlc1xuICAgICAgICAvLyBub3QgZm9yIGF1dG9HZW5lcmF0ZWQgZmllbGRzXG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIGFnZ3JlZ2F0ZUZpZWxkLCBtb2R1bGVzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IEZpZWxkSW5mbyB9ID0gbW9kdWxlcztcbiAgICAgICAgY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247XG4gICAgICAgIGNvbnN0IHsgcG9wdXBUZW1wbGF0ZSB9ID0gZmVhdHVyZVJlZHVjdGlvbjtcbiAgICAgICAgcG9wdXBUZW1wbGF0ZS5maWVsZEluZm9zID0gcG9wdXBUZW1wbGF0ZS5maWVsZEluZm9zIHx8IFtdO1xuICAgICAgICBjb25zdCBpZHhQb3B1cCA9IHBvcHVwVGVtcGxhdGUuZmllbGRJbmZvcy5maW5kSW5kZXgoKGZpZWxkSW5mbykgPT4gZmllbGRJbmZvLmZpZWxkTmFtZSA9PT0gb2xkTmFtZSk7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0TGF5ZXJGaWVsZChsYXllciwgYWdncmVnYXRlRmllbGQub25TdGF0aXN0aWNGaWVsZCk7XG4gICAgICAgIHBvcHVwVGVtcGxhdGUuZmllbGRJbmZvcy5zcGxpY2UoaWR4UG9wdXAsIDEsIG5ldyBGaWVsZEluZm8oe1xuICAgICAgICAgICAgZmllbGROYW1lOiBhZ2dyZWdhdGVGaWVsZC5uYW1lLFxuICAgICAgICAgICAgbGFiZWw6IGFnZ3JlZ2F0ZUZpZWxkLmFsaWFzLFxuICAgICAgICAgICAgaXNFZGl0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgZm9ybWF0OiBmaWVsZC50eXBlID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA6IFtcInNtYWxsLWludGVnZXJcIiwgXCJiaWctaW50ZWdlclwiLCBcImludGVnZXJcIiwgXCJsb25nXCIsIFwibnVtYmVyXCJdLmluZGV4T2YoZmllbGQudHlwZSkgPiAtMVxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZ2l0U2VwYXJhdG9yOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWdpdFNlcGFyYXRvcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlczogMVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgdXBkYXRlQWxpYXMoYWxpYXMpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciwgYWdncmVnYXRlRmllbGQgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGZpZWxkSW5mbyA9IGdldFBvcHVwRmllbGRJbmZvKGxheWVyLCBhZ2dyZWdhdGVGaWVsZC5uYW1lKTtcbiAgICAgICAgaWYgKGFnZ3JlZ2F0ZUZpZWxkLmlzQXV0b0dlbmVyYXRlZCkge1xuICAgICAgICAgICAgLy8gZmVhdHVyZVJlZHVjdGlvbi5jbG9uZSgpIHdpbGwgcmVtb3ZlIHRoZSBhbGlhcyBmcm9tIHRoZSBhZ2dyZWdhdGlvbiBmaWVsZFxuICAgICAgICAgICAgZmllbGRJbmZvLmxhYmVsID0gYWxpYXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhZ2dyZWdhdGVGaWVsZC5hbGlhcyA9IGFsaWFzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlUG9wdXBBbGlhcygpO1xuICAgICAgICB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uRmllbGRDaGFuZ2UuZW1pdCgpO1xuICAgIH1cbiAgICB1cGRhdGVQb3B1cEFsaWFzKCkge1xuICAgICAgICBjb25zdCB7IGxheWVyLCBhZ2dyZWdhdGVGaWVsZCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247XG4gICAgICAgIGNvbnN0IGZpZWxkSW5mbyA9IGdldFBvcHVwRmllbGRJbmZvKGxheWVyLCBhZ2dyZWdhdGVGaWVsZC5uYW1lKTtcbiAgICAgICAgY29uc3QgYWxpYXMgPSBhZ2dyZWdhdGVGaWVsZC5pc0F1dG9HZW5lcmF0ZWQgPyBmaWVsZEluZm8ubGFiZWwgOiBhZ2dyZWdhdGVGaWVsZC5hbGlhcztcbiAgICAgICAgLy8gbWFpbiBmaWVsZEluZm9zXG4gICAgICAgIGlmICghYWdncmVnYXRlRmllbGQuaXNBdXRvR2VuZXJhdGVkKSB7XG4gICAgICAgICAgICBmaWVsZEluZm8ubGFiZWwgPSBhbGlhcztcbiAgICAgICAgfVxuICAgICAgICAvLyBzZWFyY2ggZmllbGRJbmZvcyB1bmRlciBjb250ZW50XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZlYXR1cmVSZWR1Y3Rpb24ucG9wdXBUZW1wbGF0ZS5jb250ZW50KSAmJlxuICAgICAgICAgICAgZmVhdHVyZVJlZHVjdGlvbi5wb3B1cFRlbXBsYXRlLmNvbnRlbnQubGVuZ3RoKSB7XG4gICAgICAgICAgICBmZWF0dXJlUmVkdWN0aW9uLnBvcHVwVGVtcGxhdGUuY29udGVudC5mb3JFYWNoKChjb250ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQudHlwZSA9PT0gXCJmaWVsZHNcIiAmJiBjb250ZW50LmZpZWxkSW5mb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRJbmZvID0gY29udGVudC5maWVsZEluZm9zLmZpbmQoKGZpZWxkSW5mbykgPT4gZmllbGRJbmZvLmZpZWxkTmFtZSA9PT0gYWdncmVnYXRlRmllbGQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZEluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkSW5mby5sYWJlbCA9IGFsaWFzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGhvc3RFbGVtZW50KCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbkFyY2dpc0FnZ3JlZ2F0aW9uRmllbGQuc3R5bGUgPSBhcmNnaXNBZ2dyZWdhdGlvbkZpZWxkQ3NzO1xuXG5jb25zdCBhcmNnaXNBZ2dyZWdhdGlvbkZpZWxkc0NzcyA9IFwiLmZpZWxkcy5zYy1hcmNnaXMtYWdncmVnYXRpb24tZmllbGRze2JhY2tncm91bmQtY29sb3I6d2hpdGV9LmZpZWxkLWljb24uc2MtYXJjZ2lzLWFnZ3JlZ2F0aW9uLWZpZWxkc3twYWRkaW5nOjAgdmFyKC0tYXJjZ2lzLWFwcC1jYXAtc3BhY2luZyk7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcn1cIjtcblxuY29uc3QgQXJjZ2lzQWdncmVnYXRpb25GaWVsZHMgPSBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgICAgICB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uRmllbGRzQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNBZ2dyZWdhdGlvbkZpZWxkc0NoYW5nZVwiLCA3KTtcbiAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkZpZWxkc0Nsb3NlID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNBZ2dyZWdhdGlvbkZpZWxkc0Nsb3NlXCIsIDcpO1xuICAgICAgICB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uRmllbGRzQmFja0NsaWNrID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNBZ2dyZWdhdGlvbkZpZWxkc0JhY2tDbGlja1wiLCA3KTtcbiAgICAgICAgdGhpcy5hbGxGaWVsZHNBZGRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1hcFZpZXcgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGF5ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZmxvd05vZGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc3RyaW5ncyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jdXJyZW50TGFuZ3VhZ2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGlkZUxheWVyVGl0bGUgPSBmYWxzZTtcbiAgICB9XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gIHB1YmxpYyBjYWxsc1xuICAgIC8vXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFB1YmxpYyBNZXRob2RzXG4gICAgYXN5bmMgZG9uZSgpIHtcbiAgICAgICAgdGhpcy5jbG9zZVBvcG92ZXJzKCk7XG4gICAgfVxuICAgIGFzeW5jIHNldEZvY3VzKCkge1xuICAgICAgICB0aGlzLmZsb3dJdGVtTm9kZS5zZXRGb2N1cygpO1xuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgTGlmZWN5Y2xlXG4gICAgLy9cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgYXN5bmMgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgICAgIGNvbnN0IFtBZ2dyZWdhdGVGaWVsZCwgRmllbGRJbmZvXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcbiAgICAgICAgICAgIFwiZXNyaS9sYXllcnMvc3VwcG9ydC9BZ2dyZWdhdGVGaWVsZFwiLFxuICAgICAgICAgICAgXCJlc3JpL3BvcHVwL0ZpZWxkSW5mb1wiXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLm1vZHVsZXMgPSB7XG4gICAgICAgICAgICBBZ2dyZWdhdGVGaWVsZCxcbiAgICAgICAgICAgIEZpZWxkSW5mb1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb21wb25lbnREaWRMb2FkKCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmZsb3dJdGVtTm9kZS5zZXRGb2N1cygpKSwgMjAwKTtcbiAgICB9XG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuY2xvc2VQb3BvdmVycygpO1xuICAgIH1cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gIFJlbmRlciBNZXRob2RzXG4gICAgLy9cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgcmVuZGVyKCkge1xuICAgICAgICAvKlxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogXCJjbHVzdGVyX2NvdW50XCIsXG4gICAgICAgICAgYWxpYXM6IFwiYWdncmVnYXRlQ291bnRcIixcbiAgICAgICAgICB0eXBlOiBcImVzcmlGaWVsZFR5cGVVbnNpZ25lZEludGVnZXJcIiwgLy8gSWYgdGhpcyBpcyBhIHZhbGlkIHR5cGUuLi5cbiAgICAgICAgICBzdGF0aXN0aWNUeXBlOiBcImNvdW50XCIsXG4gICAgICAgICAgaXNJbmZlcnJlZDogdHJ1ZSxcbiAgICAgICAgfVxuICAgICAgICAqL1xuICAgICAgICBjb25zdCB7IGxheWVyLCBzdHJpbmdzLCBoaWRlTGF5ZXJUaXRsZSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247IC8vX19lc3JpLkZlYXR1cmVSZWR1Y3Rpb25DbHVzdGVyO1xuICAgICAgICBjb25zdCBzdGF0c0ZpZWxkcyA9IGZlYXR1cmVSZWR1Y3Rpb24uZmllbGRzO1xuICAgICAgICByZXR1cm4gKGgoSG9zdCwgeyBjbGFzczogXCJjYWxjaXRlLW1hdGNoLWhlaWdodFwiIH0sIGgoXCJjYWxjaXRlLWZsb3ctaXRlbVwiLCB7IGhlYWRpbmc6IHN0cmluZ3MuZmllbGRzLmZpZWxkcywgZGVzY3JpcHRpb246ICFoaWRlTGF5ZXJUaXRsZSA/IGxheWVyLnRpdGxlIDogdW5kZWZpbmVkLCBvbkNhbGNpdGVGbG93SXRlbUJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uRmllbGRzQmFja0NsaWNrLmVtaXQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlUG9wb3ZlcnMoKTtcbiAgICAgICAgICAgIH0sIHJlZjogKG5vZGUpID0+ICh0aGlzLmZsb3dJdGVtTm9kZSA9IG5vZGUpIH0sIHRoaXMucmVuZGVyVGlwKHN0YXRzRmllbGRzKSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImZpZWxkc1wiIH0sIHN0YXRzRmllbGRzID09PSBudWxsIHx8IHN0YXRzRmllbGRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdGF0c0ZpZWxkcy5tYXAoKGFnZ3JlZ2F0ZUZpZWxkLCBpZHgpID0+IHRoaXMucmVuZGVyU3RhdHNGaWVsZChhZ2dyZWdhdGVGaWVsZCwgaWR4KSkpLCB0aGlzLnJlbmRlckFkZEZpZWxkKCkpKSk7XG4gICAgfVxuICAgIHJlbmRlclRpcChzdGF0c0ZpZWxkcykge1xuICAgICAgICBjb25zdCB7IHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAgIGlmIChzdGF0c0ZpZWxkcyA9PT0gbnVsbCB8fCBzdGF0c0ZpZWxkcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3RhdHNGaWVsZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGgoXCJjYWxjaXRlLXRpcFwiLCB7IGhlYWRpbmc6IHN0cmluZ3MuZmllbGRzLm1zZ1RpdGxlLCBjbG9zZURpc2FibGVkOiB0cnVlIH0sIHN0cmluZ3MuZmllbGRzLm1zZykpO1xuICAgIH1cbiAgICByZW5kZXJTdGF0c0ZpZWxkKGFnZ3JlZ2F0ZUZpZWxkLCBpZHgpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciwgbWFwVmlldywgc2VsZWN0ZWRGaWVsZE5hbWUsIG1vZHVsZXMsIHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAgIC8vIG5lZWQgdG8gaGF2ZSB0aGUgZmllbGQgaW4gdGhlIHBvcHVwIHRvb1xuICAgICAgICBhZGRQb3B1cEZpZWxkKGFnZ3JlZ2F0ZUZpZWxkLCBsYXllciwgbW9kdWxlcyk7XG4gICAgICAgIHJldHVybiAoaChcImFyY2dpcy1hZ2dyZWdhdGlvbi1maWVsZFwiLCB7IGxheWVyOiBsYXllciwgbWFwVmlldzogbWFwVmlldywgc3RyaW5nczogc3RyaW5ncywgYWdncmVnYXRlRmllbGQ6IGFnZ3JlZ2F0ZUZpZWxkLCBvcGVuOiBzZWxlY3RlZEZpZWxkTmFtZSA9PT0gYWdncmVnYXRlRmllbGQubmFtZSwgb25BcmNnaXNBZ2dyZWdhdGlvbkZpZWxkQ2hhbmdlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZpZWxkTmFtZSA9IGFnZ3JlZ2F0ZUZpZWxkLm5hbWU7XG4gICAgICAgICAgICAgICAgbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbi5maWVsZHNbaWR4XSA9IGFnZ3JlZ2F0ZUZpZWxkO1xuICAgICAgICAgICAgICAgIHRoaXMuYXJjZ2lzQWdncmVnYXRpb25GaWVsZHNDaGFuZ2UuZW1pdCgpO1xuICAgICAgICAgICAgICAgIGZvcmNlVXBkYXRlKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgICAgICAgICAgfSB9KSk7XG4gICAgfVxuICAgIHJlbmRlckFkZEZpZWxkKCkge1xuICAgICAgICBjb25zdCB7IGFsbEZpZWxkc0FkZGVkLCBzdHJpbmdzIH0gPSB0aGlzO1xuICAgICAgICBpZiAoYWxsRmllbGRzQWRkZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoaChcImNhbGNpdGUtZmFiXCIsIHsgc2xvdDogXCJmYWJcIiwgYXBwZWFyYW5jZTogXCJvdXRsaW5lLWZpbGxcIiwga2luZDogXCJuZXV0cmFsXCIsIHNjYWxlOiBcInNcIiwgaWNvbjogXCJwbHVzXCIsIHRleHRFbmFibGVkOiB0cnVlLCB0ZXh0OiBzdHJpbmdzLmZpZWxkcy5hZGRGaWVsZCwgb25DbGljazogKCkgPT4gdGhpcy5hZGRTdGF0c0ZpZWxkKCksIHJlZjogKG5vZGUpID0+ICh0aGlzLmZhYk5vZGUgPSBub2RlKSB9KSk7XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgUHJpdmF0ZSBtZXRob2RzXG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGNsb3NlUG9wb3ZlcnMoKSB7XG4gICAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZUZvcm1hdHRlcikge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmF0dHJpYnV0ZUZvcm1hdHRlcik7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZUZvcm1hdHRlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkU3RhdHNGaWVsZCgpIHtcbiAgICAgICAgY29uc3QgeyBsYXllciwgc3RyaW5ncywgbW9kdWxlcyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBBZ2dyZWdhdGVGaWVsZCB9ID0gbW9kdWxlcztcbiAgICAgICAgY29uc3QgZmllbGRzID0gZ2V0TGF5ZXJOdW1iZXJPclN0cmluZ0ZpZWxkcyhsYXllcik7XG4gICAgICAgIGxldCBpZHhGaWVsZCA9IDA7XG4gICAgICAgIGxldCB0eXBlcyA9IGdldFN0YXRzVHlwZXMoZmllbGRzW2lkeEZpZWxkXSk7XG4gICAgICAgIGxldCBpZHhUeXBlID0gMDtcbiAgICAgICAgbGV0IGhhc0FscmVhZHkgPSBoYXNGaWVsZEFscmVhZHkobGF5ZXIsIGZpZWxkc1tpZHhGaWVsZF0ubmFtZSwgdHlwZXNbaWR4VHlwZV0pO1xuICAgICAgICB3aGlsZSAoaWR4RmllbGQgPCBmaWVsZHMubGVuZ3RoICYmIGhhc0FscmVhZHkpIHtcbiAgICAgICAgICAgIC8vIG5leHQgdHlwZXNcbiAgICAgICAgICAgIHdoaWxlIChpZHhUeXBlIDwgdHlwZXMubGVuZ3RoICYmIGhhc0FscmVhZHkpIHtcbiAgICAgICAgICAgICAgICBpZHhUeXBlKys7XG4gICAgICAgICAgICAgICAgaWYgKGlkeFR5cGUgPCB0eXBlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzQWxyZWFkeSA9IGhhc0ZpZWxkQWxyZWFkeShsYXllciwgZmllbGRzW2lkeEZpZWxkXS5uYW1lLCB0eXBlc1tpZHhUeXBlXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc0FscmVhZHkpIHtcbiAgICAgICAgICAgICAgICAvLyBuZXh0IGZpZWxkXG4gICAgICAgICAgICAgICAgaWR4RmllbGQrKztcbiAgICAgICAgICAgICAgICBpZiAoaWR4RmllbGQgPCBmaWVsZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVzID0gZ2V0U3RhdHNUeXBlcyhmaWVsZHNbaWR4RmllbGRdKTtcbiAgICAgICAgICAgICAgICAgICAgaWR4VHlwZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGhhc0FscmVhZHkgPSBoYXNGaWVsZEFscmVhZHkobGF5ZXIsIGZpZWxkc1tpZHhGaWVsZF0ubmFtZSwgdHlwZXNbaWR4VHlwZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzQWxyZWFkeSkge1xuICAgICAgICAgICAgdGhpcy5hbGxGaWVsZHNBZGRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1tpZHhGaWVsZF07XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gdHlwZXNbaWR4VHlwZV07XG4gICAgICAgICAgICBjb25zdCBhZ2dyZWdhdGVGaWVsZCAvKiBfX2VzcmkuQWdncmVnYXRlRmllbGQgKi8gPSBuZXcgQWdncmVnYXRlRmllbGQoe1xuICAgICAgICAgICAgICAgIG5hbWU6IGAke2ZpZWxkLm5hbWV9XyR7dHlwZX1gLFxuICAgICAgICAgICAgICAgIG9uU3RhdGlzdGljRmllbGQ6IGZpZWxkLm5hbWUsXG4gICAgICAgICAgICAgICAgYWxpYXM6IGAke2ZpZWxkLmFsaWFzIHx8IGZpZWxkLm5hbWV9ICR7Z2V0U3RhdHNUeXBlU3RyaW5nKHR5cGUsIHN0cmluZ3MpLnRvTG9jYWxlTG93ZXJDYXNlKCl9YCxcbiAgICAgICAgICAgICAgICBzdGF0aXN0aWNUeXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgIHZpc2libGU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgZmVhdHVyZVJlZHVjdGlvbiA9IGxheWVyLmZlYXR1cmVSZWR1Y3Rpb247IC8vX19lc3JpLkZlYXR1cmVSZWR1Y3Rpb25DbHVzdGVyO1xuICAgICAgICAgICAgZmVhdHVyZVJlZHVjdGlvbi5maWVsZHMgPSBmZWF0dXJlUmVkdWN0aW9uLmZpZWxkcyB8fCBbXTtcbiAgICAgICAgICAgIGZlYXR1cmVSZWR1Y3Rpb24uZmllbGRzLnB1c2goYWdncmVnYXRlRmllbGQpO1xuICAgICAgICAgICAgYWRkUG9wdXBGaWVsZChhZ2dyZWdhdGVGaWVsZCwgbGF5ZXIsIG1vZHVsZXMpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZpZWxkTmFtZSA9IGFnZ3JlZ2F0ZUZpZWxkLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yY2VVcGRhdGUodGhpcy5ob3N0RWxlbWVudCk7XG4gICAgfVxuICAgIGdldCBob3N0RWxlbWVudCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5BcmNnaXNBZ2dyZWdhdGlvbkZpZWxkcy5zdHlsZSA9IGFyY2dpc0FnZ3JlZ2F0aW9uRmllbGRzQ3NzO1xuXG5jb25zdCBhcmNnaXNBZ2dyZWdhdGlvbkluZm9Qb3BvdmVyQ3NzID0gXCIuaW5mb3twYWRkaW5nOjEwcHg7YmFja2dyb3VuZC1jb2xvcjp3aGl0ZX0uaW5mby1wb3BvdmVye21heC13aWR0aDozMjBweH0uaW5mby1oZWxwe3BhZGRpbmctdG9wOjEwcHg7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kO2Rpc3BsYXk6ZmxleH0uaW5mby1oZWxwLWJ1dHRvbntkaXNwbGF5OmZsZXg7ZmxleC1mbG93OnJvdy1yZXZlcnNlfVwiO1xuXG5jb25zdCBBcmNnaXNBZ2dyZWdhdGlvbkluZm9Qb3BvdmVyID0gY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkluZm9Qb3BvdmVyQ2xvc2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImFyY2dpc0FnZ3JlZ2F0aW9uSW5mb1BvcG92ZXJDbG9zZVwiLCA3KTtcbiAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvbkluZm9Qb3BvdmVyRGlzY29ubmVjdGVkID0gY3JlYXRlRXZlbnQodGhpcywgXCJhcmNnaXNBZ2dyZWdhdGlvbkluZm9Qb3BvdmVyRGlzY29ubmVjdGVkXCIsIDcpO1xuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vXG4gICAgICAgIC8vICBQcml2YXRlIFByb3BlcnRpZXNcbiAgICAgICAgLy9cbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB0aGlzLmRvY3VtZW50VGFiSGFuZGxlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kb2N1bWVudENsaWNrSGFuZGxlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wYW5lbFNjcm9sbEhhbmRsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vXG4gICAgICAgIC8vICBQcml2YXRlIG1ldGhvZHNcbiAgICAgICAgLy9cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgdGhpcy5vbk9wZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IHRoaXMucGFuZWxOb2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0Rm9jdXMoKTsgfSksIDEpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByb3BzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJlZmVyZW5jZUVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3BlbiA9IGZhbHNlO1xuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgcHVibGljIGNhbGxzXG4gICAgLy9cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgYXN5bmMgcmVwb3NpdGlvbigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLnBvcG92ZXJOb2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVwb3NpdGlvbigpO1xuICAgIH1cbiAgICBhc3luYyBzZXRGb2N1cygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLnBhbmVsTm9kZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEZvY3VzKCk7XG4gICAgfVxuICAgIGFzeW5jIHNldE9wZW4ob3Blbikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLnBvcG92ZXJOb2RlKSB7XG4gICAgICAgICAgICB0aGlzLnBvcG92ZXJOb2RlLm9wZW4gPSBvcGVuO1xuICAgICAgICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLnBhbmVsTm9kZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldEZvY3VzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3BvdmVyTm9kZS5yZXBvc2l0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gIExpZmVjeWNsZVxuICAgIC8vXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAvLyBpbiBjYXNlIHBvcG92ZXIgZ290IHJlbW92ZWQgYnkganVzdCByZW1vdmluZyBub2RlIGZyb20gRE9NXG4gICAgICAgIHRoaXMuYXJjZ2lzQWdncmVnYXRpb25JbmZvUG9wb3ZlckRpc2Nvbm5lY3RlZC5lbWl0KCk7XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgUmVuZGVyIE1ldGhvZHNcbiAgICAvL1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgcHJvcHMsIHJlZmVyZW5jZUVsZW1lbnQsIG9wZW4gfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgY29uZmlnLCB0aXRsZSwgbW9yZUluZm8sIGhlbHBJZCwgc3RyaW5ncyB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IHsgaGVscEJhc2UsIGhlbHBNYXAgfSA9IGNvbmZpZztcbiAgICAgICAgY29uc3QgaGVhZGVyID0gc3RyaW5ncy50aWxlLmluZm8udGl0bGUucmVwbGFjZShcIiR7dGl0bGV9XCIsIHRpdGxlKTtcbiAgICAgICAgcmV0dXJuIChoKEhvc3QsIHsgY2xhc3M6IFwianMtYXBwLWZseW91dCBhcmNnaXMtYWdncmVnYXRpb24tcG9wb3ZlclwiIH0sIGgoXCJjYWxjaXRlLXBvcG92ZXJcIiwgeyBvcGVuOiBvcGVuLCBwbGFjZW1lbnQ6IFwiYXV0b1wiLCBvZmZzZXRTa2lkZGluZzogNSwgbGFiZWw6IFwiXCIsIHJlZmVyZW5jZUVsZW1lbnQ6IHJlZmVyZW5jZUVsZW1lbnQsIGNsYXNzOiBcImluZm8tcG9wb3ZlclwiLCBvbkNhbGNpdGVQb3BvdmVyT3BlbjogdGhpcy5vbk9wZW4sIHJlZjogKG5vZGUpID0+ICh0aGlzLnBvcG92ZXJOb2RlID0gbm9kZSkgfSwgaChcImNhbGNpdGUtcGFuZWxcIiwgeyBoZWFkaW5nOiBoZWFkZXIsIGNsb3NhYmxlOiB0cnVlLCByZWY6IChub2RlKSA9PiAodGhpcy5wYW5lbE5vZGUgPSBub2RlKSwgb25DYWxjaXRlUGFuZWxDbG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXJjZ2lzQWdncmVnYXRpb25JbmZvUG9wb3ZlckNsb3NlLmVtaXQoKTtcbiAgICAgICAgICAgICAgICAvLyBmb2N1cyBvbiBpbmZvIGljb247IHdhaXQgc28gZW50ZXIga2V5IGRvZXNuJ3QgcmUtb3BlbiBpdFxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVmZXJlbmNlRWxlbWVudC5wYXJlbnRFbGVtZW50LmZvY3VzKCksIDMwMCk7XG4gICAgICAgICAgICB9IH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJpbmZvXCIgfSwgaChcImRpdlwiLCBudWxsLCBtb3JlSW5mbyksIGhlbHBJZCAmJiBoZWxwTWFwID8gKGgoXCJkaXZcIiwgeyBjbGFzczogXCJpbmZvLWhlbHBcIiB9LCBoKFwiY2FsY2l0ZS1idXR0b25cIiwgeyBhcHBlYXJhbmNlOiBcInNvbGlkXCIsIGxhYmVsOiBzdHJpbmdzLnRpbGUuaW5mby5sZWFybk1vcmUsIGNsYXNzOiBcImluZm8taGVscC1idXR0b25cIiwgc2xvdDogXCJmb290ZXJcIiwgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKGAke2hlbHBCYXNlfSR7aGVscE1hcFtoZWxwSWRdfWAsIFwiX2JsYW5rXCIpO1xuICAgICAgICAgICAgfSB9LCBzdHJpbmdzLnRpbGUuaW5mby5sZWFybk1vcmUpKSkgOiBudWxsKSkpKSk7XG4gICAgfVxuICAgIGdldCBob3N0RWxlbWVudCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5BcmNnaXNBZ2dyZWdhdGlvbkluZm9Qb3BvdmVyLnN0eWxlID0gYXJjZ2lzQWdncmVnYXRpb25JbmZvUG9wb3ZlckNzcztcblxuY29uc3QgYXJjZ2lzQWdncmVnYXRpb25TeW1ib2xTdHlsZXJQb3BvdmVyQ3NzID0gXCIucG9wb3Zlcnt6LWluZGV4OjEwMH0uc3ltYm9sLXN0eWxlci1kaXZ7d2lkdGg6MzI4cHg7aGVpZ2h0OjEwMCU7b3ZlcmZsb3cteTphdXRvO292ZXJmbG93LXg6aGlkZGVufWFyY2dpcy1zeW1ib2wtc3R5bGVye21heC1oZWlnaHQ6Y2FsYyg5MHZoIC0gMTAwcHgpO31cIjtcblxuY29uc3QgQXJjZ2lzQWdncmVnYXRpb25TeW1ib2xTdHlsZXJQb3BvdmVyID0gY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICAgICAgdGhpcy5hcmNnaXNBZ2dyZWdhdGlvblN5bWJvbFN0eWxlckNoYW5nZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzQWdncmVnYXRpb25TeW1ib2xTdHlsZXJDaGFuZ2VcIiwgNyk7XG4gICAgICAgIHRoaXMuYXJjZ2lzQWdncmVnYXRpb25TeW1ib2xTdHlsZXJQb3BvdmVyQ2xvc2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImFyY2dpc0FnZ3JlZ2F0aW9uU3ltYm9sU3R5bGVyUG9wb3ZlckNsb3NlXCIsIDcpO1xuICAgICAgICB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uU3ltYm9sU3R5bGVyUG9wb3ZlckRpc2Nvbm5lY3RlZCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzQWdncmVnYXRpb25TeW1ib2xTdHlsZXJQb3BvdmVyRGlzY29ubmVjdGVkXCIsIDcpO1xuICAgICAgICB0aGlzLmRvY3VtZW50VGFiSGFuZGxlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5kb2N1bWVudENsaWNrSGFuZGxlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wYW5lbFNjcm9sbEhhbmRsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucHJvcHMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vXG4gICAgLy8gIHB1YmxpYyBjYWxsc1xuICAgIC8vXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGFzeW5jIHJlcG9zaXRpb24oKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdGhpcy5wb3BvdmVyTm9kZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlcG9zaXRpb24oKTtcbiAgICB9XG4gICAgYXN5bmMgc2V0Rm9jdXMoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdGhpcy5jbG9zZUFjdGlvbk5vZGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRGb2N1cygpO1xuICAgIH1cbiAgICBhc3luYyBzZXRPcGVuKG9wZW4pIHtcbiAgICAgICAgaWYgKHRoaXMucG9wb3Zlck5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMucG9wb3Zlck5vZGUub3BlbiA9IG9wZW47XG4gICAgICAgICAgICBpZiAob3Blbikge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5jbG9zZUFjdGlvbk5vZGUuc2V0Rm9jdXMoKSwgMTAwKTtcbiAgICAgICAgICAgICAgICAvL3RoaXMucG9wb3Zlck5vZGUucmVwb3NpdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBMaWZlY3ljbGVcbiAgICAvL1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBhc3luYyBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICAgICAgY29uc3QgW3N5bWJvbFV0aWxzLCBjaW1TeW1ib2xVdGlscywgQ29sb3IsIFNpbXBsZU1hcmtlclN5bWJvbCwgU2ltcGxlTGluZVN5bWJvbF0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXG4gICAgICAgICAgICBcImVzcmkvc3ltYm9scy9zdXBwb3J0L3N5bWJvbFV0aWxzXCIsXG4gICAgICAgICAgICBcImVzcmkvc3ltYm9scy9zdXBwb3J0L2NpbVN5bWJvbFV0aWxzXCIsXG4gICAgICAgICAgICBcImVzcmkvQ29sb3JcIixcbiAgICAgICAgICAgIFwiZXNyaS9zeW1ib2xzL1NpbXBsZU1hcmtlclN5bWJvbFwiLFxuICAgICAgICAgICAgXCJlc3JpL3N5bWJvbHMvU2ltcGxlTGluZVN5bWJvbFwiXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLm1vZHVsZXMgPSB7XG4gICAgICAgICAgICBzeW1ib2xVdGlscyxcbiAgICAgICAgICAgIGNpbVN5bWJvbFV0aWxzLFxuICAgICAgICAgICAgQ29sb3IsXG4gICAgICAgICAgICBTaW1wbGVNYXJrZXJTeW1ib2wsXG4gICAgICAgICAgICBTaW1wbGVMaW5lU3ltYm9sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAvLyBpbiBjYXNlIHBvcG92ZXIgZ290IHJlbW92ZWQgYnkganVzdCByZW1vdmluZyBub2RlIGZyb20gRE9NXG4gICAgICAgIHRoaXMuYXJjZ2lzQWdncmVnYXRpb25TeW1ib2xTdHlsZXJQb3BvdmVyRGlzY29ubmVjdGVkLmVtaXQoKTtcbiAgICB9XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBSZW5kZXIgTWV0aG9kc1xuICAgIC8vXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBwcm9wcywgcmVmZXJlbmNlRWxlbWVudCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzIH0gPSBwcm9wcztcbiAgICAgICAgcmV0dXJuIChoKEhvc3QsIHsgY2xhc3M6IFwianMtYXBwLWZseW91dCBhcmNnaXMtYWdncmVnYXRpb24tcG9wb3ZlclwiIH0sIGgoXCJjYWxjaXRlLXBvcG92ZXJcIiwgeyBwbGFjZW1lbnQ6IFwibGVhZGluZy1zdGFydFwiLCBvZmZzZXREaXN0YW5jZTogMCwgb2Zmc2V0U2tpZGRpbmc6IDQ1LCBwb2ludGVyRGlzYWJsZWQ6IHRydWUsIGxhYmVsOiBzdHJpbmdzLnN5bWJvbFN0eWxlLCByZWZlcmVuY2VFbGVtZW50OiByZWZlcmVuY2VFbGVtZW50LCB0cmlnZ2VyRGlzYWJsZWQ6IHRydWUsIGNsYXNzOiBcInBvcG92ZXJcIiwgb3BlbjogZmFsc2UsXG4gICAgICAgICAgICAvL29uQ2FsY2l0ZVBvcG92ZXJPcGVuPXsoKSA9PiB0aGlzLm9uT3BlbigpfVxuICAgICAgICAgICAgcmVmOiAobm9kZSkgPT4gKHRoaXMucG9wb3Zlck5vZGUgPSBub2RlKSB9LCBoKFwiY2FsY2l0ZS1wYW5lbFwiLCB7IGhlYWRpbmc6IHN0cmluZ3Muc3ltYm9sU3R5bGUsIGNsb3NhYmxlOiBmYWxzZSB9LCBoKFwiZGl2XCIsIHsgc2xvdDogXCJoZWFkZXItY29udGVudFwiIH0sIHN0cmluZ3Muc3ltYm9sU3R5bGUpLCBoKFwiY2FsY2l0ZS1hY3Rpb25cIiwgeyBzbG90OiBcImhlYWRlci1hY3Rpb25zLWVuZFwiLCBzY2FsZTogXCJzXCIsIGljb246IFwieFwiLCB0ZXh0OiBcIlwiLCBvbkNsaWNrOiAoKSA9PiB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uU3ltYm9sU3R5bGVyUG9wb3ZlckNsb3NlLmVtaXQoKSwgcmVmOiAobm9kZSkgPT4gKHRoaXMuY2xvc2VBY3Rpb25Ob2RlID0gbm9kZSkgfSksIGgoXCJkaXZcIiwgeyBjbGFzczogXCJzeW1ib2wtc3R5bGVyLWRpdlwiLFxuICAgICAgICAgICAgLyogY2xhc3M9XCItc3ltYm9sLWJ1dHRvbl9fc3ltYm9sLXN0eWxlci1kaXZcIiAqLyByZWY6IChub2RlKSA9PiB0aGlzLmJ1aWxkU3ltYm9sU3R5bGVyKG5vZGUpIH0pKSkpKTtcbiAgICB9XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBQcml2YXRlIG1ldGhvZHNcbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgYXN5bmMgYnVpbGRTeW1ib2xTdHlsZXIobm9kZSkge1xuICAgICAgICBjb25zdCB7IHByb3BzLCBtb2R1bGVzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGxheWVyLCBwb3J0YWwgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCB7IENvbG9yIH0gPSBtb2R1bGVzO1xuICAgICAgICBjb25zdCBmZWF0dXJlUmVkdWN0aW9uID0gbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbjsgLy9fX2VzcmkuRmVhdHVyZVJlZHVjdGlvbkNsdXN0ZXI7XG4gICAgICAgIGxldCBzeW1ib2wgPSBmZWF0dXJlUmVkdWN0aW9uLnN5bWJvbDtcbiAgICAgICAgaWYgKCFpc1N1cHBvcnRlZFN5bWJvbChzeW1ib2wpKSB7XG4gICAgICAgICAgICBzeW1ib2wgPSBnZXREZWZhdWx0U3ltYm9sKG1vZHVsZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpbGxFbmFibGVkID0gc3ltYm9sLnR5cGUgPT09IFwicGljdHVyZS1tYXJrZXJcIiA/IGZhbHNlIDogISFzeW1ib2wuY29sb3I7XG4gICAgICAgIGNvbnN0IHN0cm9rZUVuYWJsZWQgPSBoYXNTeW1ib2xPdXRsaW5lKHN5bWJvbCk7XG4gICAgICAgIGNvbnN0IGlzUG9pbnRDSU0gPSBzeW1ib2wudHlwZSA9PT0gXCJjaW1cIiAmJiBzeW1ib2wuZGF0YS5zeW1ib2wudHlwZSA9PT0gXCJDSU1Qb2ludFN5bWJvbFwiO1xuICAgICAgICBjb25zdCBydGwgPSBnZXRFbGVtZW50RGlyKHRoaXMuaG9zdEVsZW1lbnQpID09PSBcInJ0bFwiO1xuICAgICAgICBsZXQgc3Ryb2tlO1xuICAgICAgICBpZiAoc3ltYm9sLnR5cGUgPT09IFwic2ltcGxlLW1hcmtlclwiKSB7XG4gICAgICAgICAgICBjb25zdCBzeW0gPSBzeW1ib2w7XG4gICAgICAgICAgICBpZiAoc3ltLm91dGxpbmUpIHtcbiAgICAgICAgICAgICAgICBzdHJva2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBzeW0ub3V0bGluZS5jb2xvciA/IHN5bS5vdXRsaW5lLmNvbG9yIDogbmV3IENvbG9yKFswLCAwLCAwLCAwLjVdKSxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogc3ltLm91dGxpbmUud2lkdGhcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Ryb2tlID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogbmV3IENvbG9yKFswLCAwLCAwLCAwLjVdKSxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogMVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3ltYm9sLnR5cGUgPT09IFwiY2ltXCIpIHtcbiAgICAgICAgICAgIHN0cm9rZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0cm9rZSA9IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogbmV3IENvbG9yKFsyNTUsIDI1NSwgMjU1LCAwLjVdKSxcbiAgICAgICAgICAgICAgICBzaXplOiAxXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN5bWJvbFN0eWxlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhcmNnaXMtc3ltYm9sLXN0eWxlclwiKTtcbiAgICAgICAgc3ltYm9sU3R5bGVyLnBvcG92ZXJQcm9wcyA9IHtcbiAgICAgICAgICAgIHBsYWNlbWVudDogXCJib3R0b20tZW5kXCIsXG4gICAgICAgICAgICBvZmZzZXREaXN0YW5jZTogMTAsXG4gICAgICAgICAgICBvZmZzZXRTa2lkZGluZzogcnRsID8gMyA6IC0zLFxuICAgICAgICAgICAgcG9pbnRlckRpc2FibGVkOiBcInRydWVcIixcbiAgICAgICAgICAgIHBvcG92ZXJXaWR0aDogMzE1LFxuICAgICAgICAgICAgLy9vdmVybGF5UG9zaXRpb25pbmc6IFwiZml4ZWRcIiwgLS0gYnVnZ3ksIG9mZnNldCBpc3N1ZVxuICAgICAgICAgICAgcmVmRWxlbWVudDogdGhpcy5jbG9zZUFjdGlvbk5vZGVcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZWRpdCA9IHN5bWJvbFN0eWxlci5lZGl0KHN5bWJvbC5jbG9uZSgpLCB7XG4gICAgICAgICAgICBwb3J0YWwsXG4gICAgICAgICAgICBzeW1ib2xGaWx0ZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNlY3Rpb25zOiB7XG4gICAgICAgICAgICAgICAgbWFya2VyOiBpc1BvaW50Q0lNIHx8IFtcInNpbXBsZS1tYXJrZXJcIiwgXCJwaWN0dXJlLW1hcmtlclwiXS5pbmRleE9mKHN5bWJvbC50eXBlKSA+IC0xXG4gICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbHNPcGVuOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZU9wZW46IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyVHlwZTogXCJhbGxcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjb2xvclwiLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25hbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGVkQ29sb3JzT3BlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbmN5T3BlbjogaXNQaWN0dXJlTWFya2VyKHN5bWJvbCwgbW9kdWxlcylcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImNvbG9yXCIsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBleHRyYVBhcnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogW1wic2ltcGxlLW1hcmtlclwiLCBcInBpY3R1cmUtbWFya2VyXCIsIFwiY2ltXCJdLmluZGV4T2Yoc3ltYm9sLnR5cGUpID09PSAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBnZXRTeW1ib2xDb2xvcihzeW1ib2wsIG1vZHVsZXMpIHx8IGFkanVzdEFscGhhKG5ldyBDb2xvcihcIiNmZjgyMDBcIiksIDAuODUpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFya2VyOiB7XG4gICAgICAgICAgICAgICAgc2l6ZTogZ2V0U3ltYm9sU2l6ZShzeW1ib2wsIG1vZHVsZXMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlLFxuICAgICAgICAgICAgZmlsbEVuYWJsZWQsXG4gICAgICAgICAgICBzdHJva2VFbmFibGVkXG4gICAgICAgIH0pO1xuICAgICAgICBzeW1ib2xTdHlsZXIuYWRkRXZlbnRMaXN0ZW5lcihcImFyY2dpc1N5bWJvbFN0eWxlckVkaXRcIiwgKGRldGFpbCkgPT4gdGhpcy5vbkNoYW5nZVN5bWJvbChkZXRhaWwpKTtcbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChzeW1ib2xTdHlsZXIpO1xuICAgICAgICBhd2FpdCBlZGl0O1xuICAgIH1cbiAgICBvbkNoYW5nZVN5bWJvbCh7IGRldGFpbDogeyBzeW1ib2wgfSB9KSB7XG4gICAgICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIgfSA9IHByb3BzO1xuICAgICAgICBjb25zdCBmZWF0dXJlUmVkdWN0aW9uID0gbGF5ZXIuZmVhdHVyZVJlZHVjdGlvbjsgLy9fX2VzcmkuRmVhdHVyZVJlZHVjdGlvbkNsdXN0ZXI7XG4gICAgICAgIGZlYXR1cmVSZWR1Y3Rpb24uc3ltYm9sID0gc3ltYm9sO1xuICAgICAgICB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uU3ltYm9sU3R5bGVyQ2hhbmdlLmVtaXQoKTtcbiAgICB9XG4gICAgZ2V0IGhvc3RFbGVtZW50KCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbkFyY2dpc0FnZ3JlZ2F0aW9uU3ltYm9sU3R5bGVyUG9wb3Zlci5zdHlsZSA9IGFyY2dpc0FnZ3JlZ2F0aW9uU3ltYm9sU3R5bGVyUG9wb3ZlckNzcztcblxuY29uc3QgYXJjZ2lzQWdncmVnYXRpb25UaWxlQ3NzID0gXCIudGlsZXtiYWNrZ3JvdW5kLWNvbG9yOndoaXRlO3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbjo2cHg7Y3Vyc29yOnBvaW50ZXI7Ym94LXNoYWRvdzowIDFweCAxMHB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMDUpLCAwIDAgMCAxcHggI2UwZTBlMDt0cmFuc2l0aW9uOmJveC1zaGFkb3cgMTI1bXMgZWFzZS1pbi1vdXR9LnRpbGU6aG92ZXJ7ei1pbmRleDo1O2JveC1zaGFkb3c6MCAxcHggMCAycHggcmdiYSgwLCAwLCAwLCAwLjA1KSwgMCAwIDAgMXB4ICNlMGUwZTB9LnRpbGU6Zm9jdXN7b3V0bGluZToycHggc29saWQgdmFyKC0tY2FsY2l0ZS1jb2xvci1icmFuZCl9LnRpbGUtc2VsZWN0ZWR7Ym94LXNoYWRvdzowIDFweCAxMHB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMDUpLCAwIDAgMCAxcHggdmFyKC0tY2FsY2l0ZS1jb2xvci1icmFuZCl9LnRpbGUtc2VsZWN0ZWQ6aG92ZXJ7ei1pbmRleDo1O2JveC1zaGFkb3c6MCAxcHggMCAycHggcmdiYSgwLCAwLCAwLCAwLjA1KSwgMCAwIDAgMXB4IHZhcigtLWNhbGNpdGUtY29sb3ItYnJhbmQpfS50aWxlLWNoZWNre3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMHB4O3JpZ2h0OjEwcHh9LnRpbGUtY2hlY2sucnRse3JpZ2h0OmF1dG87bGVmdDoxMHB4fS5zdHlsZS1saW5re3BhZGRpbmc6OXB4IDlweH0uc3R5bGUtbGluay1pY29ue21hcmdpbi10b3A6LTFweH0uc3R5bGUtbGluay10ZXh0e21hcmdpbi1yaWdodDoxMHB4fS5zdHlsZS1saW5rLXRleHQucnRse21hcmdpbi1yaWdodDowO21hcmdpbi1sZWZ0OjEwcHh9LnN0eWxlLWxpbmstdGl0bGV7ZGlzcGxheTpmbGV4O2ZvbnQtd2VpZ2h0OmJvbGQ7cGFkZGluZy1ib3R0b206NXB4fS5zdHlsZS1saW5rLW9wdGlvbnN7Y29sb3I6IzAwNzljMTtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93IG5vd3JhcH0uc3R5bGUtbGluay1vcHRpb25zIHN2Z3tmaWxsOiMwMDc5YzF9LnRpbGUtaW1hZ2V7aGVpZ2h0OjEwMHB4O3dpZHRoOjEwMCU7YmFja2dyb3VuZC1zaXplOmNvdmVyO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0udGlsZS1pbWFnZS1zZWxlY3RlZHtoZWlnaHQ6NjhweDtiYWNrZ3JvdW5kLXNpemU6YXV0byAxMDBweH0uc3R5bGUtc3ViLXRleHR7Zm9udC1zaXplOjgwJTtwYWRkaW5nOjAgMCA2cHggMH0uc3R5bGUtbGluay1pbmZve2hlaWdodDoxOHB4fVwiO1xuXG5jb25zdCBBcmNnaXNBZ2dyZWdhdGlvblRpbGUgPSBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgICAgICB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uVGlsZVNlbGVjdCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzQWdncmVnYXRpb25UaWxlU2VsZWN0XCIsIDcpO1xuICAgICAgICB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uVGlsZU9wdGlvbnMgPSBjcmVhdGVFdmVudCh0aGlzLCBcImFyY2dpc0FnZ3JlZ2F0aW9uVGlsZU9wdGlvbnNcIiwgNyk7XG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gIFByaXZhdGUgUHJvcGVydGllc1xuICAgICAgICAvL1xuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHRoaXMuZG9jdW1lbnRDbGlja0hhbmRsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucGFuZWxTY3JvbGxIYW5kbGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmtleXVwRXZlbnRIYW5kbGVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHNlbGVjdGVkIH0gPSB0aGlzO1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gXCIgXCIgfHwgZXZlbnQua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUluZm9Qb3BvdmVyKCk7XG4gICAgICAgICAgICAgICAgLy8gdXNlIGxhdGVzdCBoYW5kbGVyIG9uIHByb3BzXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQgPyB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uVGlsZU9wdGlvbnMuZW1pdCgpIDogdGhpcy5hcmNnaXNBZ2dyZWdhdGlvblRpbGVTZWxlY3QuZW1pdCgpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMua2V5ZG93bkV2ZW50SGFuZGxlciA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gXCIgXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBkb24ndCBzY3JvbGwgcGFuZWxcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNsaWNrRXZlbnRIYW5kbGVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCB7IHNlbGVjdGVkIH0gPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCgoX2EgPSBldmVudCA9PT0gbnVsbCB8fCBldmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXZlbnQudGFyZ2V0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eubm9kZU5hbWUpID09PSBcIkNBTENJVEUtQ0hFQ0tCT1hcIikge1xuICAgICAgICAgICAgICAgIC8vIHVzZXIgY2xpY2tlZCBvbiBjaGVja2JveDsgd2UgaGFuZGxlZCB0aGlzIGJlbG93XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUluZm9Qb3BvdmVyKCk7XG4gICAgICAgICAgICAvLyB1c2UgbGF0ZXN0IGhhbmRsZXIgb24gcHJvcHNcbiAgICAgICAgICAgIHNlbGVjdGVkID8gdGhpcy5hcmNnaXNBZ2dyZWdhdGlvblRpbGVPcHRpb25zLmVtaXQoKSA6IHRoaXMuYXJjZ2lzQWdncmVnYXRpb25UaWxlU2VsZWN0LmVtaXQoKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2hlY2tib3hDaGFuZ2VIYW5kbGVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHNlbGVjdGVkIH0gPSB0aGlzO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICBpZiAoIW5vZGUuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIC8vIHdlIGRvbid0IGFsbG93IHVzZXJzIHRvIHVuY2hlY2sgdGhlIGJveFxuICAgICAgICAgICAgICAgIG5vZGUuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUluZm9Qb3BvdmVyKCk7XG4gICAgICAgICAgICAgICAgLy8gdXNlIGxhdGVzdCBoYW5kbGVyIG9uIHByb3BzXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQgPyB0aGlzLmFyY2dpc0FnZ3JlZ2F0aW9uVGlsZU9wdGlvbnMuZW1pdCgpIDogdGhpcy5hcmNnaXNBZ2dyZWdhdGlvblRpbGVTZWxlY3QuZW1pdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnByb3BzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNlbGVjdGVkID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgUHVibGljIE1ldGhvZHNcbiAgICAvL1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvKipcbiAgICAgKiBTZXQgZm9jdXMgb24gdGlsZVxuICAgICAqL1xuICAgIGFzeW5jIHNldEZvY3VzKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMudGlsZU5vZGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5mb2N1cygpO1xuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgTGlmZWN5Y2xlXG4gICAgLy9cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlSW5mb1BvcG92ZXIoKTtcbiAgICB9XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBSZW5kZXIgTWV0aG9kc1xuICAgIC8vXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBwcm9wcywgc2VsZWN0ZWQgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgdGl0bGUsIGltYWdlUGF0aCwgc3RyaW5ncyB9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IHJ0bCA9IGdldEVsZW1lbnREaXIodGhpcy5ob3N0RWxlbWVudCkgPT09IFwicnRsXCI7XG4gICAgICAgIGNvbnN0IHN0eWxlVGlsZUNsYXNzZXMgPSB7XG4gICAgICAgICAgICB0aWxlOiB0cnVlLFxuICAgICAgICAgICAgXCJ0aWxlLXNlbGVjdGVkXCI6IHNlbGVjdGVkXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN0eWxlVGlsZUltYWdlQ2xhc3NlcyA9IHtcbiAgICAgICAgICAgIFwidGlsZS1pbWFnZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJ0aWxlLWltYWdlLXNlbGVjdGVkXCI6IHNlbGVjdGVkXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN0eWxlVGlsZUNoZWNrQ2xhc3NlcyA9IHtcbiAgICAgICAgICAgIFwidGlsZS1jaGVja1wiOiB0cnVlLFxuICAgICAgICAgICAgcnRsOiBydGxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIChoKEhvc3QsIG51bGwsIGgoXCJkaXZcIiwgeyBjbGFzczogc3R5bGVUaWxlQ2xhc3Nlcywgcm9sZTogXCJidXR0b25cIiwgdGFiaW5kZXg6IFwiMFwiLCBcImFyaWEtbGFiZWxcIjogYCR7dGl0bGV9ICR7c3RyaW5ncy50aWxlLm9wdGlvbnN9YCwgXCJhcmlhLXNlbGVjdGVkXCI6IHNlbGVjdGVkLCByZWY6IChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50aWxlTm9kZSA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUaWxlTGlzdGVuZXJzKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IHN0eWxlVGlsZUltYWdlQ2xhc3Nlcywgc3R5bGU6IHsgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7aW1hZ2VQYXRofSlgIH0sIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIgfSksIGgoXCJkaXZcIiwgeyBjbGFzczogc3R5bGVUaWxlQ2hlY2tDbGFzc2VzLCBcImFyaWEtbGFiZWxcIjogXCJcIiwgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiB9LCBoKFwiY2FsY2l0ZS1jaGVja2JveFwiLCB7IG5hbWU6IFwic3R5bGUtdGlsZS1jaGVjay1uYW1lXCIsIGNoZWNrZWQ6IHNlbGVjdGVkLCB0YWJpbmRleDogXCItMVwiLCByZWY6IChlbGVtZW50KSA9PiB0aGlzLmFkZENoZWNrYm94TGlzdGVuZXIoZWxlbWVudCkgfSkpLCB0aGlzLnJlbmRlclRpbGVMaW5rKCkpKSk7XG4gICAgfVxuICAgIHJlbmRlclRpbGVMaW5rKCkge1xuICAgICAgICBjb25zdCB7IHByb3BzLCBzZWxlY3RlZCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgcnRsID0gZ2V0RWxlbWVudERpcih0aGlzLmhvc3RFbGVtZW50KSA9PT0gXCJydGxcIjtcbiAgICAgICAgY29uc3Qgc3R5bGVMaW5rVGV4dENsYXNzZXMgPSB7XG4gICAgICAgICAgICBcInN0eWxlLWxpbmstdGV4dFwiOiB0cnVlLFxuICAgICAgICAgICAgcnRsOiBydGxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwic3R5bGUtbGlua1wiLCBcImFyaWEtbGFiZWxcIjogcHJvcHMudGl0bGUgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInN0eWxlLWxpbmstdGl0bGVcIiB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IHN0eWxlTGlua1RleHRDbGFzc2VzLCBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiIH0sIHByb3BzLnRpdGxlKSwgaChcImNhbGNpdGUtYWN0aW9uXCIsIHsgY2xhc3M6IFwic3R5bGUtbGluay1pbmZvXCIsIHRhYmluZGV4OiBcIjBcIiwgc2NhbGU6IFwic1wiLCBpY29uOiBcImluZm9ybWF0aW9uXCIsIGNvbXBhY3Q6IHRydWUsIG9uQ2xpY2s6IChldmVudCkgPT4gdGhpcy5oYW5kbGVJbmZvQ2xpY2soZXZlbnQpLCB0ZXh0OiBzdHJpbmdzLnRpbGUubW9yZUluZm8sIHJlZjogKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZm9JY29uTm9kZSA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBcIiBcIiB8fCAoIXRoaXMuaW5mb1BvcG92ZXJOb2RlICYmIGV2ZW50LmtleSA9PT0gXCJFbnRlclwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVJbmZvQ2xpY2soZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gXCIgXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXZlbnQgcGFuZWwgZnJvbSBzY3JvbGxpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSB9KSksIHNlbGVjdGVkICYmIHRoaXMucmVuZGVyU3R5bGVPcHRpb25zKCkpKTtcbiAgICB9XG4gICAgcmVuZGVyU3R5bGVPcHRpb25zKCkge1xuICAgICAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IHN0cmluZ3MgfSA9IHByb3BzO1xuICAgICAgICAvLyBldmVudCBoYW5kbGluZyBmb3IgYnV0dG9uIGNsaWNrIGlzIGhhbmRsZWQgYXMgdGlsZSBjbGlja1xuICAgICAgICByZXR1cm4gKGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IGFwcGVhcmFuY2U6IFwib3V0bGluZS1maWxsXCIsIHdpZHRoOiBcImZ1bGxcIiwgc2NhbGU6IFwic1wiLCBsYWJlbDogc3RyaW5ncy50aWxlLm9wdGlvbnMgfSwgc3RyaW5ncy50aWxlLm9wdGlvbnMpKTtcbiAgICB9XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vICBQcml2YXRlIG1ldGhvZHNcbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgaGFuZGxlSW5mb0NsaWNrKGV2ZW50KSB7XG4gICAgICAgIC8vIGRvbid0IGV4ZWN1dGUgdGhlIGV2ZW50IG9uIHRoZSBlbnRpcmUgdGlsZVxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBjb25maWcsIHRpdGxlLCBtb3JlSW5mbywgaGVscElkLCBmbG93SXRlbU5vZGUsIHN0cmluZ3MgfSA9IHByb3BzO1xuICAgICAgICB0aGlzLnJlbW92ZUluZm9Qb3BvdmVyKCk7XG4gICAgICAgIHRoaXMuaW5mb1BvcG92ZXJOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFyY2dpcy1hZ2dyZWdhdGlvbi1pbmZvLXBvcG92ZXJcIik7XG4gICAgICAgIHRoaXMuaW5mb1BvcG92ZXJOb2RlLnByb3BzID0ge1xuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICBtb3JlSW5mbyxcbiAgICAgICAgICAgIGhlbHBJZCxcbiAgICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAgIGZsb3dJdGVtTm9kZSxcbiAgICAgICAgICAgIHN0cmluZ3NcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pbmZvUG9wb3Zlck5vZGUucmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuaW5mb0ljb25Ob2RlO1xuICAgICAgICB0aGlzLmluZm9Qb3BvdmVyTm9kZS5hZGRFdmVudExpc3RlbmVyKFwiYXJjZ2lzQWdncmVnYXRpb25JbmZvUG9wb3ZlckNsb3NlXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUluZm9Qb3BvdmVyKCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuaW5mb0ljb25Ob2RlLnNldEZvY3VzKCksIDIwMCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmluZm9Qb3BvdmVyTm9kZS5hZGRFdmVudExpc3RlbmVyKFwiYXJjZ2lzQWdncmVnYXRpb25JbmZvUG9wb3ZlckRpc2Nvbm5lY3RlZFwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVJbmZvUG9wb3ZlcigpO1xuICAgICAgICB9KTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmluZm9Qb3BvdmVyTm9kZSk7XG4gICAgICAgIHRoaXMuaW5mb1BvcG92ZXJOb2RlLnNldE9wZW4odHJ1ZSk7XG4gICAgICAgIC8vIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCdzIGFsbCB2aXNpYmxlXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5pbmZvUG9wb3Zlck5vZGUuc2V0Rm9jdXMoKSwgMTAwKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBjbG9zZSBwb3BvdmVyIHdoZW4gY2xpY2tpbmcgb3V0c2lkZVxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudENsaWNrSGFuZGxlciA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0luc2lkZUluZm9Qb3BvdmVyTm9kZShldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlSW5mb1BvcG92ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmluZm9JY29uTm9kZS5zZXRGb2N1cygpLCAyMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5kb2N1bWVudENsaWNrSGFuZGxlcik7XG4gICAgICAgICAgICAvLyBjbGljayBoYW5kbGVyIGlzIG5vdCBjYWxsZWQgd2hlbiBjbGlja2luZyBvciBzY3JvbGxpbmcgcGFuZWwgc2Nyb2xsYmFyc1xuICAgICAgICAgICAgdGhpcy5wYW5lbFNjcm9sbEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVJbmZvUG9wb3ZlcigpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZsb3dJdGVtTm9kZSA9PT0gbnVsbCB8fCBmbG93SXRlbU5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZsb3dJdGVtTm9kZS5hZGRFdmVudExpc3RlbmVyKFwiY2FsY2l0ZUZsb3dJdGVtU2Nyb2xsXCIsIHRoaXMucGFuZWxTY3JvbGxIYW5kbGVyKTtcbiAgICAgICAgfSwgMTAwKTtcbiAgICB9XG4gICAgcmVtb3ZlSW5mb1BvcG92ZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgZmxvd0l0ZW1Ob2RlIH0gPSBwcm9wcztcbiAgICAgICAgLy8gY2xvc2UgcG9wb3ZlcnNcbiAgICAgICAgZG9jdW1lbnQuYm9keVxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYXJjZ2lzLWFnZ3JlZ2F0aW9uLXBvcG92ZXJcIilcbiAgICAgICAgICAgIC5mb3JFYWNoKChub2RlKSA9PiBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG5vZGUpKTtcbiAgICAgICAgdGhpcy5pbmZvUG9wb3Zlck5vZGUgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5kb2N1bWVudENsaWNrSGFuZGxlcikge1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuZG9jdW1lbnRDbGlja0hhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5kb2N1bWVudENsaWNrSGFuZGxlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wYW5lbFNjcm9sbEhhbmRsZXIpIHtcbiAgICAgICAgICAgIGZsb3dJdGVtTm9kZSA9PT0gbnVsbCB8fCBmbG93SXRlbU5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZsb3dJdGVtTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2FsY2l0ZUZsb3dJdGVtU2Nyb2xsXCIsIHRoaXMucGFuZWxTY3JvbGxIYW5kbGVyKTtcbiAgICAgICAgICAgIHRoaXMucGFuZWxTY3JvbGxIYW5kbGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzSW5zaWRlSW5mb1BvcG92ZXJOb2RlKG5vZGUpIHtcbiAgICAgICAgaWYgKChub2RlID09PSBudWxsIHx8IG5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vZGUudGFnTmFtZSkgPT09IFwiQVJDR0lTLUFHR1JFR0FUSU9OLUlORk8tUE9QT1ZFUlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBwYXJlbnROb2RlID0gbm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBub2RlLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICB3aGlsZSAocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnROb2RlLnRhZ05hbWUgPT09IFwiQVJDR0lTLUFHR1JFR0FUSU9OLUlORk8tUE9QT1ZFUlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhZGRUaWxlTGlzdGVuZXJzKGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5rZXl1cEV2ZW50SGFuZGxlcik7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5rZXlkb3duRXZlbnRIYW5kbGVyKTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5jbGlja0V2ZW50SGFuZGxlcik7XG4gICAgfVxuICAgIGFkZENoZWNrYm94TGlzdGVuZXIoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjYWxjaXRlQ2hlY2tib3hDaGFuZ2VcIiwgdGhpcy5jaGVja2JveENoYW5nZUhhbmRsZXIpO1xuICAgIH1cbiAgICBnZXQgaG9zdEVsZW1lbnQoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG59O1xuQXJjZ2lzQWdncmVnYXRpb25UaWxlLnN0eWxlID0gYXJjZ2lzQWdncmVnYXRpb25UaWxlQ3NzO1xuXG5leHBvcnQgeyBBcmNnaXNBZ2dyZWdhdGlvbiBhcyBhcmNnaXNfYWdncmVnYXRpb24sIEFyY2dpc0FnZ3JlZ2F0aW9uQmlubmluZyBhcyBhcmNnaXNfYWdncmVnYXRpb25fYmlubmluZywgQXJjZ2lzQWdncmVnYXRpb25DbHVzdGVyaW5nIGFzIGFyY2dpc19hZ2dyZWdhdGlvbl9jbHVzdGVyaW5nLCBBcmNnaXNBZ2dyZWdhdGlvbkZpZWxkIGFzIGFyY2dpc19hZ2dyZWdhdGlvbl9maWVsZCwgQXJjZ2lzQWdncmVnYXRpb25GaWVsZHMgYXMgYXJjZ2lzX2FnZ3JlZ2F0aW9uX2ZpZWxkcywgQXJjZ2lzQWdncmVnYXRpb25JbmZvUG9wb3ZlciBhcyBhcmNnaXNfYWdncmVnYXRpb25faW5mb19wb3BvdmVyLCBBcmNnaXNBZ2dyZWdhdGlvblN5bWJvbFN0eWxlclBvcG92ZXIgYXMgYXJjZ2lzX2FnZ3JlZ2F0aW9uX3N5bWJvbF9zdHlsZXJfcG9wb3ZlciwgQXJjZ2lzQWdncmVnYXRpb25UaWxlIGFzIGFyY2dpc19hZ2dyZWdhdGlvbl90aWxlIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyY2dpcy1hZ2dyZWdhdGlvbl84LmVudHJ5LmpzLm1hcCIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHY0LjAuNThcbiAqL1xuLyoqXG4gKiBDYWxsIGEgZnVuY3Rpb24gb25seSBhZnRlciBpdCBoYXMgbm90IGJlZW4gY2FsbGVkIGZvciBuIG1pbGxpc2Vjb25kc1xuICogQHBhcmFtIGZuICAgIC0gZnVuY3Rpb24gdG8gY2FsbFxuICogQHBhcmFtIGRlbGF5IC0gZGVsYXkgaW4gbWlsbGlzZWNvbmRzXG4gKi9cbmNvbnN0IGRlYm91bmNlID0gKGZuLCBkZWxheSkgPT4ge1xuICAgIGxldCB0aW1lb3V0O1xuICAgIGxldCBzdGF0dXMgPSBcImlkbGVcIjtcbiAgICBmdW5jdGlvbiBmbHVzaCguLi5hcmdzKSB7XG4gICAgICAgIHN0YXR1cyA9IFwiZmx1c2hlZFwiO1xuICAgICAgICByZXR1cm4gZGVib3VuY2VkKC4uLmFyZ3MpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbnZva2UoLi4uYXJncykge1xuICAgICAgICBzdGF0dXMgPSBcImludm9rZWRcIjtcbiAgICAgICAgcmV0dXJuIGRlYm91bmNlZCguLi5hcmdzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2FuY2VsKC4uLmFyZ3MpIHtcbiAgICAgICAgc3RhdHVzID0gXCJjYW5jZWxsZWRcIjtcbiAgICAgICAgcmV0dXJuIGRlYm91bmNlZCguLi5hcmdzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0U3RhdHVzKCkge1xuICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgIH1cbiAgICBjb25zdCBkZWJvdW5jZWQgPSAoLi4uYXJncykgPT4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICAgICAgICAgIGNhc2UgXCJmbHVzaGVkXCI6XG4gICAgICAgICAgICAgICAgc3RhdHVzID0gXCJpZGxlXCI7XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGZuKC4uLmFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImludm9rZWRcIjpcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgc3RhdHVzID0gXCJpZGxlXCI7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShmbiguLi5hcmdzKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY2FuY2VsbGVkXCI6XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHN0YXR1cyA9IFwiaWRsZVwiO1xuICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhdHVzID0gXCJwZW5kaW5nXCI7XG4gICAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSBcImlkbGVcIjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZm4oLi4uYXJncykpO1xuICAgICAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICAgIGRlYm91bmNlZC5pbnZva2UgPSBpbnZva2U7XG4gICAgZGVib3VuY2VkLmNhbmNlbCA9IGNhbmNlbDtcbiAgICBkZWJvdW5jZWQuZ2V0U3RhdHVzID0gZ2V0U3RhdHVzO1xuICAgIHJldHVybiBkZWJvdW5jZWQ7XG59O1xuLyoqXG4gKiBDYWxsIGEgZnVuY3Rpb24gb25seSBhZnRlciBuIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWRcbiAqIEBwYXJhbSBmbiAgICAtIGZ1bmN0aW9uIHRvIGNhbGxcbiAqIEBwYXJhbSBkZWxheSAtIGRlbGF5IGluIG1pbGxpc2Vjb25kc1xuICovXG5jb25zdCB0aHJvdHRsZSA9IChmbiwgZGVsYXkpID0+IHtcbiAgICBsZXQgdGltZW91dDtcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgdGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJlc29sdmUoZm4oLi4uYXJncykpO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgfSk7XG59O1xuZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csIFwiXFxcXCQmXCIpOyAvLyAkJiBtZWFucyB0aGUgd2hvbGUgbWF0Y2hlZCBzdHJpbmdcbn1cbmZ1bmN0aW9uIGlzRGVmaW5lZCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsO1xufVxuLyoqXG4gKiBTZXQgYSBtaW5pbXVtIHRpbWUgZm9yIGEgcHJvbWlzZSB0byByZXNvbHZlICh1c2VmdWwgZm9yIHByZXZlbnRpbmcgZmxhc2ggb2YgbG9hZGVycylcbiAqL1xuYXN5bmMgZnVuY3Rpb24gbWluRGVsYXkocHJvbWlzZSwgbWluRGVsYXkpIHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbcHJvbWlzZSwgdGltZW91dChtaW5EZWxheSldKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbi8qKlxuICogSGVscGVyIG1ldGhvZCB0byBpbmxpbmUgc2V0VGltZW91dCBhcyBhbiBhd2FpdCBpbiBhc3luYyBmdW5jdGlvbnNcbiAqL1xuZnVuY3Rpb24gdGltZW91dChtcykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufVxuY29uc3QgYXJyYXlUb0xvb2t1cE1hcCA9IChkYXRhQXJyLCBnZXRLZXlBbmRJdGVtKSA9PiBPYmplY3QuZnJvbUVudHJpZXMoKGRhdGFBcnIgfHwgW10pLm1hcCgoaXRlbSkgPT4ge1xuICAgIGNvbnN0IHsga2V5LCBkYXRhIH0gPSBnZXRLZXlBbmRJdGVtKGl0ZW0pO1xuICAgIHJldHVybiBba2V5LCBkYXRhXTtcbn0pKTtcbi8qKlxuICogQ2hlY2sgd2hldGhlciB0d28gYXJyYXlzIGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIGVsZW1lbnRzXG4gKiBhbmQgd2hldGhlciB0aGV5IGNvbnRhaW4gdGhlIHNhbWUgZWxlbWVudHNcbiAqIHJlZ2FyZGxlc3Mgb2Ygb3JkZXJcbiAqL1xuY29uc3QgYXJyYXlzQXJlRXF1aXZhbGVudCA9IChhcnIxLCBhcnIyKSA9PiBhcnIxLmxlbmd0aCA9PT0gYXJyMi5sZW5ndGggJiYgYXJyMS5yZWR1Y2UoKG1lbW8sIHN0cikgPT4gbWVtbyAmJiBhcnIyLmluZGV4T2Yoc3RyKSA+IC0xLCB0cnVlKTtcbmZ1bmN0aW9uIHVuaXF1ZUJ5KG15QXJyLCBnZXRJdGVtSWQpIHtcbiAgICBjb25zdCByZXN1bHRBcnIgPSBbXTtcbiAgICBjb25zdCBsb29rdXBNYXAgPSB7fTtcbiAgICBteUFyci5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gZ2V0SXRlbUlkKGl0ZW0pO1xuICAgICAgICBpZiAobG9va3VwTWFwW2lkXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBsb29rdXBNYXBbaWRdID0gaXRlbTtcbiAgICAgICAgICAgIHJlc3VsdEFyci5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdEFycjtcbn1cbmZ1bmN0aW9uIHVuaXF1ZShteUFycikge1xuICAgIGNvbnN0IHByaW1pdGl2ZXMgPSB7IGJvb2xlYW46IHt9LCBudW1iZXI6IHt9LCBzdHJpbmc6IHt9IH07XG4gICAgY29uc3Qgb2JqcyA9IFtdO1xuICAgIHJldHVybiBteUFyci5maWx0ZXIoKGl0ZW0pID0+IHtcbiAgICAgICAgbGV0IHR5cGUgPSB0eXBlb2YgaXRlbTtcbiAgICAgICAgaWYgKHR5cGUgaW4gcHJpbWl0aXZlcykge1xuICAgICAgICAgICAgcmV0dXJuIHByaW1pdGl2ZXNbdHlwZV0uaGFzT3duUHJvcGVydHkoaXRlbSkgPyBmYWxzZSA6IChwcmltaXRpdmVzW3R5cGVdW2l0ZW1dID0gdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gb2Jqcy5pbmRleE9mKGl0ZW0pID49IDAgPyBmYWxzZSA6IG9ianMucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuY29uc3QgY2h1bmsgPSAoYXJyLCBzaXplKSA9PiBbLi4uQXJyYXkoTWF0aC5jZWlsKGFyci5sZW5ndGggLyBzaXplKSldLm1hcCgoXywgaSkgPT4gYXJyLnNsaWNlKHNpemUgKiBpLCBzaXplICsgc2l6ZSAqIGkpKTtcblxuZXhwb3J0IHsgYXJyYXlUb0xvb2t1cE1hcCBhcyBhLCB1bmlxdWUgYXMgYiwgdGhyb3R0bGUgYXMgYywgZGVib3VuY2UgYXMgZCwgZXNjYXBlUmVnRXhwIGFzIGUsIGFycmF5c0FyZUVxdWl2YWxlbnQgYXMgZiwgY2h1bmsgYXMgZywgaXNEZWZpbmVkIGFzIGksIG1pbkRlbGF5IGFzIG0sIHRpbWVvdXQgYXMgdCwgdW5pcXVlQnkgYXMgdSB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mdW5jdGlvbmFsLTQ0ZGU4ZmNmLmpzLm1hcCIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHY0LjAuNThcbiAqL1xuaW1wb3J0IHsgYyBhcyBjbG9zZXN0RWxlbWVudENyb3NzU2hhZG93Qm91bmRhcnkgfSBmcm9tICcuL2RvbS00ZDM2NzY3Ny5qcyc7XG5pbXBvcnQgeyBsIGFzIGxhbmd1YWdlTWFwIH0gZnJvbSAnLi9sYW5ndWFnZVV0aWwtZWYwZTU0YjIuanMnO1xuaW1wb3J0IHsgYSBhcyBnZXRBc3NldFBhdGggfSBmcm9tICcuL2luZGV4LWUzYmY3ZGE3LmpzJztcblxuLy8gaHR0cHM6Ly9tZWRpdW0uY29tL3N0ZW5jaWwtdHJpY2tzL2ltcGxlbWVudGluZy1pbnRlcm5hdGlvbmFsaXNhdGlvbi1pMThuLXdpdGgtc3RlbmNpbC01ZTY1NTk1NTQxMTdcbmZ1bmN0aW9uIGdldENvbXBvbmVudENsb3Nlc3RMYW5ndWFnZShlbGVtZW50KSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgY29uc3QgY2xvc2VzdEVsZW1lbnQgPSAoX2EgPSBjbG9zZXN0RWxlbWVudENyb3NzU2hhZG93Qm91bmRhcnkoZWxlbWVudCwgXCJbbGFuZ11cIikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChfYyA9IChfYiA9IGVsZW1lbnQuc2hhZG93Um9vdCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm93bmVyRG9jdW1lbnQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgLy8gbGFuZ3VhZ2Ugc2V0IGJ5IHRoZSBjYWxsaW5nIGFwcGxpY2F0aW9uIG9yIGJyb3dzZXIuIGRlZmF1bHRzIHRvIGVuZ2xpc2guXG4gICAgY29uc3QgbGFuZyA9ICgoY2xvc2VzdEVsZW1lbnQgPT09IG51bGwgfHwgY2xvc2VzdEVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNsb3Nlc3RFbGVtZW50LmxhbmcpIHx8IChuYXZpZ2F0b3IgPT09IG51bGwgfHwgbmF2aWdhdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBuYXZpZ2F0b3IubGFuZ3VhZ2UpIHx8IFwiZW5cIikudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobGFuZ3VhZ2VNYXAuaGFzKGxhbmcpKSB7XG4gICAgICAgIHJldHVybiBsYW5ndWFnZU1hcC5nZXQobGFuZyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBcInJ1LVJVXCIgbWFwcyB0byBcInJ1XCIgdXNlIGNhc2VcbiAgICAgICAgaWYgKGxhbmd1YWdlTWFwLmhhcyhsYW5nLnNsaWNlKDAsIDIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhbmd1YWdlTWFwLmdldChsYW5nLnNsaWNlKDAsIDIpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcImVuXCI7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2VJbnRsKGVsZW1lbnQpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAvLyBpdCdzIE9LIGlmIHdlIGRvbid0IGhhdmUgdGhlIDQgbGV0dGVyIGxhbmd1YWdlIGZpbGUgZm9yIGl0XG4gICAgLy8gNCBsZXR0ZXIgbGFuZ3VhZ2UgY29kZSBuZWVkZWQgZm9yIGZvcm1hdHRpbmcgbnVtYmVyc1xuICAgIGNvbnN0IGNsb3Nlc3RFbGVtZW50ID0gKF9hID0gY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5KGVsZW1lbnQsIFwiW2xhbmddXCIpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoX2MgPSAoX2IgPSBlbGVtZW50LnNoYWRvd1Jvb3QpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5vd25lckRvY3VtZW50KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIC8vIGxhbmd1YWdlIHNldCBieSB0aGUgY2FsbGluZyBhcHBsaWNhdGlvbiBvciBicm93c2VyLiBkZWZhdWx0cyB0byBlbmdsaXNoLlxuICAgIGNvbnN0IGxhbmcgPSAoKGNsb3Nlc3RFbGVtZW50ID09PSBudWxsIHx8IGNsb3Nlc3RFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbG9zZXN0RWxlbWVudC5sYW5nKSB8fCAobmF2aWdhdG9yID09PSBudWxsIHx8IG5hdmlnYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbmF2aWdhdG9yLmxhbmd1YWdlKSB8fCBcImVuXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGxhbmd1YWdlTWFwLmhhcyhsYW5nKSkge1xuICAgICAgICByZXR1cm4gbGFuZ3VhZ2VNYXAuZ2V0KGxhbmcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGxhbmd1YWdlTWFwLmhhcyhsYW5nLnNsaWNlKDAsIDIpKSkge1xuICAgICAgICAgICAgLy8gd2Ugc3VwcG9ydCB0aGUgMiBsZXR0ZXIgY29kZWQgbGFuZ3VhZ2VcbiAgICAgICAgICAgIC8vIGUuZy4gaXQtQ0ggdnMgaXRcbiAgICAgICAgICAgIHJldHVybiBsYW5nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiZW5cIjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGZldGNoTG9jYWxlU3RyaW5nc0ZvckNvbXBvbmVudChjb21wb25lbnROYW1lLCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBmZXRjaChnZXRBc3NldFBhdGgoYC4uL2FyY2dpcy1hcHAtYXNzZXRzL2kxOG4vJHtjb21wb25lbnROYW1lfS5pMThuLiR7bG9jYWxlfS5qc29uYCkpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5vaylcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5qc29uKCkpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICB9LCAoKSA9PiByZWplY3QoKSk7XG4gICAgfSk7XG59XG5jb25zdCBzdHJpbmdDYWNoZSA9IHt9O1xuZnVuY3Rpb24gZmV0Y2hMb2NhbGVTdHJpbmdzRnJvbUNhY2hlKGNvbXBvbmVudE5hbWUsIGxvY2FsZSkge1xuICAgIGNvbnN0IGlkID0gYCR7Y29tcG9uZW50TmFtZX0ke2xvY2FsZX1gO1xuICAgIGlmICghc3RyaW5nQ2FjaGVbaWRdKSB7XG4gICAgICAgIHN0cmluZ0NhY2hlW2lkXSA9IGZldGNoTG9jYWxlU3RyaW5nc0ZvckNvbXBvbmVudChjb21wb25lbnROYW1lLCBsb2NhbGUpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nQ2FjaGVbaWRdO1xufVxuLyoqXG4gKiBHZXQgc3RyaW5ncyBhbmQgbGFuZ3VhZ2UgY29kZXMuXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIDIgbGFuZ3VhZ2UgY29kZXMuXG4gKiBUaGUgZmlyc3Qgb25lIHJldHVybnMgYSBjb2RlIHRoYXQncyBhbHNvIHN1cHBvcnRlZCBhcyBhIGxhbmd1YWdlIGZpbGUuXG4gKiBUaGUgc2Vjb25kIG9uZSByZXR1cm5zIGEgY29kZSB3aGVyZSB0aGVyZSBpcyBzdXBwb3J0IGZvciB0aGUgZmlyc3QgMiBsZXR0ZXJzIG9mIHRoZSBjb2RlIGFzIHBhcnQgb2YgYSBsYW5ndWFnZSBmaWxlLFxuICogYnV0IHdpbGwgcmV0dXJuIHRoZSBvcmlnaW5hbCA0IGxldHRlciBjb2RlIGZyb20gdGhlIHBhZ2UuXG4gKiBFLmcuIEZvciBcIml0LWNoXCIgaXQgd2lsbCByZXR1cm4gXCJpdFwiIGFzIHRoZSBmaXJzdCBsYW5ndWFnZSBjb2RlIGFuZCBcIml0LWNoXCIgYXMgdGhlIHNlY29uZC5cbiAqIFRoZSBzZWNvbmQgb25lIGlzIHJlcXVpcmVkIGZvciBlc3JpLmludGwuc2V0TG9jYWxlKCkgdG8gZ2V0IHRoZSBjb3JyZWN0IGZvcm1hdHRpbmcuXG4gKlxuICogSWYgYSB0YWdOYW1lIGlzIHByb3ZpZGVkIGl0IHdpbGwgb3ZlcndpdGUgdGhlIGVsZW1lbnQncyB0YWdOYW1lXG4gKlxuICogIEByZXR1cm4gWyBzdHJpbmdzLCBmaXJzdCBsYW5ndWFnZSBjb2RlLCBzZWNvbmQgbGFuZ3VhZ2UgY29kZV1cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0TG9jYWxlQ29tcG9uZW50U3RyaW5ncyhlbGVtZW50LCB0YWdOYW1lKSB7XG4gICAgY29uc3QgY29tcG9uZW50TmFtZSA9IHRhZ05hbWUgfHwgZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgY29tcG9uZW50TGFuZ3VhZ2UgPSBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2UoZWxlbWVudCk7XG4gICAgY29uc3QgY29tcG9uZW50TGFuZ3VhZ2VJbnRsID0gZ2V0Q29tcG9uZW50Q2xvc2VzdExhbmd1YWdlSW50bChlbGVtZW50KTtcbiAgICBsZXQgc3RyaW5ncztcbiAgICB0cnkge1xuICAgICAgICBzdHJpbmdzID0gYXdhaXQgZmV0Y2hMb2NhbGVTdHJpbmdzRnJvbUNhY2hlKGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudExhbmd1YWdlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBubyBsb2NhbGUgZm9yICR7Y29tcG9uZW50TmFtZX0gKCR7Y29tcG9uZW50TGFuZ3VhZ2V9KSBsb2FkaW5nIGRlZmF1bHQgbG9jYWxlIGVuLmApO1xuICAgICAgICBzdHJpbmdzID0gYXdhaXQgZmV0Y2hMb2NhbGVTdHJpbmdzRnJvbUNhY2hlKGNvbXBvbmVudE5hbWUsIFwiZW5cIik7XG4gICAgfVxuICAgIHJldHVybiBbc3RyaW5ncywgY29tcG9uZW50TGFuZ3VhZ2UsIGNvbXBvbmVudExhbmd1YWdlSW50bF07XG59XG5cbmV4cG9ydCB7IGdldENvbXBvbmVudENsb3Nlc3RMYW5ndWFnZSBhcyBhLCBnZXRMb2NhbGVDb21wb25lbnRTdHJpbmdzIGFzIGcgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jYWxlLTA1MGI2ZGI5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==