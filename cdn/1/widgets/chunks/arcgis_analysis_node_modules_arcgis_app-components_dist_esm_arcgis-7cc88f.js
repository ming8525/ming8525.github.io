"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-7cc88f"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-color.entry.js":
/*!************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-color.entry.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_panels_color: () => (/* binding */ ArcgisSmartMappingPanelsColor)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loading-69139907.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./color-d6da0a9a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-d6da0a9a.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */












const arcgisSmartMappingPanelsColorCss = ":host{width:100%}.flow-item{height:100%}.color-block{overflow-x:hidden}.attribute-name{word-break:break-all}.legend-toggle-padding{padding-top:12px;padding-bottom:12px}";

const ArcgisSmartMappingPanelsColor = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsColorClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsColorClose", 7);
        this.arcgisSmartMappingPanelsColorBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsColorBackClick", 7);
        this.arcgisSmartMappingPanelsColorError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsColorError", 7);
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsColorClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererJSON, originalFeatureReduction } = this;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.j)(originalRendererJSON, originalFeatureReduction);
            this.arcgisSmartMappingPanelsColorClose.emit("cancel");
        };
        this.hideTransparency = false;
        this.hideRotation = false;
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
        this.visualizationOpen = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        this.visualizationOpen = true;
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        // save original renderer
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { layer, hideLayerTitle, isRTL, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.styleOptions, description: !hideLayerTitle ? layer.title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => {
                this.arcgisSmartMappingPanelsColorBackClick.emit();
            }, ref: (node) => (this.flowItemNode = node) }, this.renderDoneButton(), this.renderCancelButton(), this.renderVisualization(), this.renderTransparency(), this.renderRotation())));
    }
    renderDoneButton() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (!layer) {
            // loading state of panel doesn't position buttons correctly
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (!layer) {
            // loading state of panel doesn't position buttons correctly
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    renderVisualization() {
        var _a, _b;
        const { visualizationOpen, hideTransparency, hideRotation } = this;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const isAgeRenderer = ["color-age", "color-age-size"].indexOf(rendererType) > -1;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const fieldName = colorVisVar
            ? colorVisVar.field
                ? (_a = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(colorVisVar.field)) === null || _a === void 0 ? void 0 : _a.label
                : colorVisVar.valueExpressionTitle || strings.expression
            : renderer.field
                ? (_b = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(renderer.field)) === null || _b === void 0 ? void 0 : _b.label
                : renderer.valueExpressionTitle || strings.expression;
        const fieldInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.f)(layer)[0];
        const isDateField = fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "color-block", heading: isAgeRenderer
                ? strings.panels.color.colorAgeStyle
                : isDateField
                    ? strings.panels.color.colorStyleDate
                    : strings.panels.color.colorStyle, collapsible: !hideTransparency || !hideRotation, open: visualizationOpen, onCalciteBlockOpen: () => (this.visualizationOpen = true), onCalciteBlockClose: () => (this.visualizationOpen = false) }, !isAgeRenderer ? (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "attribute-name" }, fieldName) : null, this.renderAge(), this.renderTheme(), this.renderDividedBy(), this.renderSymbol(), this.renderColorSlider(), this.renderBackgroundStyle(), this.renderDefaultSymbol(), this.renderShowInLegend(), this.renderClassify()));
    }
    renderAge() {
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const isAgeRenderer = ["color-age", "color-age-size"].indexOf(rendererType) > -1;
        if (!isAgeRenderer) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-age", { rendererSubtype: "color", onArcgisSmartMappingAgeChange: () => this.sliderNode.updateStatistics(), onArcgisSmartMappingAgeError: (event) => this.arcgisSmartMappingPanelsColorError.emit(event.detail) }));
    }
    renderTheme() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        if (!colorVisVar) {
            return null;
        }
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-theme-button", { ref: (node) => (this.themeButtonNode = node), rendererSubtype: "color", onArcgisSmartMappingThemeButtonBeforeOpen: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)(), onArcgisSmartMappingThemeButtonChange: (event) => {
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                let updateCall = _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_5__.b;
                if (["color-age", "color-age-size"].indexOf(rendererType) > -1) {
                    updateCall = _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_5__.d;
                }
                (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)(updateCall({
                    theme: event.detail,
                    discardMinMax: true
                }), this.flowItemNode).then((result) => {
                    renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.n)(renderer, "color") || [];
                    renderer.visualVariables.push((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(result.renderer, "color"));
                    renderer.authoringInfo.visualVariables =
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.o)(renderer, "color") || [];
                    renderer.authoringInfo.visualVariables.push((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(result.renderer, "color"));
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                    this.themeButtonNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.themeButtonNode);
                    if (this.sliderNode) {
                        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                        this.sliderNode.updateStatistics();
                    }
                }, (error) => {
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.themeButtonNode);
                    this.arcgisSmartMappingPanelsColorError.emit(error);
                });
            } }));
    }
    renderDividedBy() {
        const { layer, fields } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const isAgeRenderer = ["color-age", "color-age-size"].indexOf(rendererType) > -1;
        if (isAgeRenderer) {
            return null;
        }
        const counts = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.I)(fields);
        if (counts.number < 2) {
            return null;
        }
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        if (colorVisVar) {
            const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(colorVisVar.field);
            const fieldInfo = {
                field: colorVisVar.field,
                expression: colorVisVar.valueExpression,
                expressionTitle: colorVisVar.valueExpressionTitle,
                simpleFieldType: field ? field.simpleFieldType : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
            };
            if (fieldInfo.expression || fieldInfo.simpleFieldType !== _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER) {
                return null;
            }
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-divided-by", { rendererSubtype: "color", normalizationField: colorVisVar ? colorVisVar.normalizationField : renderer.normalizationField, onArcgisSmartMappingDividedByChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.sliderNode.updateStatistics();
                this.classifyNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.classifyNode);
            }, onArcgisSmartMappingDividedByError: (event) => this.arcgisSmartMappingPanelsColorError.emit(event.detail) }));
    }
    renderSymbol() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const classBreakInfos = renderer.classBreakInfos;
        const symbol = classBreakInfos[0].symbol;
        let colors;
        if (colorVisVar) {
            colors = colorVisVar.stops.map((stop) => {
                const color = stop.color.clone();
                color.a = 1;
                return color;
            });
        }
        else if (classBreakInfos === null || classBreakInfos === void 0 ? void 0 : classBreakInfos.length) {
            colors = classBreakInfos.map((classBreakInfo) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(classBreakInfo.symbol));
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { symbol: symbol, colors: colors, type: "color-ramp", rampType: colorVisVar ? "continuous" : "discrete", ref: (node) => {
                if (node) {
                    this.symbolButtonNode = node;
                }
            }, onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                this.classifyNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.classifyNode);
                this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
            } }));
    }
    renderColorSlider() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-color-slider", { ref: (node) => {
                if (node) {
                    this.sliderNode = node;
                }
            }, onArcgisSmartMappingColorSliderChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.classifyNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.classifyNode);
                this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
            }, onArcgisSmartMappingColorSliderError: (event) => this.arcgisSmartMappingPanelsColorError.emit(event.detail) }));
    }
    renderBackgroundStyle() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.q)(layer) || ["color-size"].indexOf(rendererType) === -1) {
            return null;
        }
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-background-symbol", null);
    }
    renderDefaultSymbol() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-default-symbol", { ref: (node) => {
                if (node) {
                    this.defaultSymbolNode = node;
                }
            }, onArcgisSmartMappingDefaultSymbolBeforeToggle: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)(), onArcgisSmartMappingDefaultSymbolChange: () => (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolButtonNode) }));
    }
    renderShowInLegend() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        if (!colorVisVar) {
            return null;
        }
        const legendOptions = colorVisVar.legendOptions;
        const isChecked = !legendOptions || legendOptions.showLegend !== false;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "legend-toggle-padding", layout: "inline-space-between" }, strings.panels.color.includeInLegend, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: isChecked, onCalciteSwitchChange: () => this.handleIncludeInLegendToggle() })));
    }
    renderClassify() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const fieldInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.f)(layer)[0];
        const isDateField = fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE;
        const isAgeRenderer = ["color-age", "color-age-size"].indexOf(rendererType) > -1;
        if (rendererType !== "color" || isDateField || isAgeRenderer) {
            return null;
        }
        const classBreakInfos = renderer.classBreakInfos;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-classify", { ref: (node) => (this.classifyNode = node), onArcgisSmartMappingClassifyChange: (event) => {
                const instructions = event.detail;
                ((instructions === null || instructions === void 0 ? void 0 : instructions.closePopovers) || (instructions === null || instructions === void 0 ? void 0 : instructions.classesChange)) && (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
                if ((instructions === null || instructions === void 0 ? void 0 : instructions.classesChange) || (instructions === null || instructions === void 0 ? void 0 : instructions.symbolChange)) {
                    this.symbolButtonNode.colors = classBreakInfos.map((classBreakInfo) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(classBreakInfo.symbol));
                }
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                if ((instructions === null || instructions === void 0 ? void 0 : instructions.toggle) ||
                    (!(instructions === null || instructions === void 0 ? void 0 : instructions.symbolChange) && !(instructions === null || instructions === void 0 ? void 0 : instructions.closePopovers))) {
                    this.sliderNode.updateStatistics();
                }
                this.classifyNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.classifyNode);
                this.symbolButtonNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolButtonNode);
                this.defaultSymbolNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.defaultSymbolNode);
            }, onArcgisSmartMappingClassifyError: (event) => this.arcgisSmartMappingPanelsColorError.emit(event.detail) }));
    }
    renderTransparency() {
        const { hideTransparency } = this;
        if (hideTransparency) {
            return;
        }
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-transparency", { open: !!opacityVisVar, onArcgisSmartMappingSymbolTransparencyError: ({ detail }) => this.arcgisSmartMappingPanelsColorError.emit(detail) }));
    }
    renderRotation() {
        const { hideRotation } = this;
        if (hideRotation) {
            return;
        }
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "opacity");
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "rotation");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-rotation", { open: !opacityVisVar && !!rotationVisVar, ref: (node) => (this.rotationNode = node), onArcgisSmartMappingRotationError: ({ detail }) => this.arcgisSmartMappingPanelsColorError.emit(detail) }));
    }
    handleIncludeInLegendToggle() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const legendOptions = colorVisVar.legendOptions;
        if (legendOptions && legendOptions.showLegend === false) {
            if (legendOptions.title) {
                legendOptions.showLegend = true;
            }
            else {
                colorVisVar.legendOptions = undefined;
            }
        }
        else {
            colorVisVar.legendOptions = legendOptions || {};
            colorVisVar.legendOptions.showLegend = false;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsColor.style = arcgisSmartMappingPanelsColorCss;



//# sourceMappingURL=arcgis-smart-mapping-panels-color.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   r: () => (/* binding */ requestWrapper)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
let _loadingTimer;
let _requestCancelled;
function startLoading(node) {
    node.loading = true;
    _requestCancelled = false;
    if (_loadingTimer) {
        clearTimeout(_loadingTimer);
    }
    _loadingTimer = setTimeout(() => {
        // took too long
        endLoading(node);
        _requestCancelled = true;
    }, 60000);
}
function endLoading(node) {
    node.loading = false;
}
function requestWrapper(request, node) {
    startLoading(node);
    return request
        .then((result) => {
        endLoading(node);
        if (!_requestCancelled) {
            return Promise.resolve(result);
        }
        else {
            return Promise.reject(new Error("timeout"));
        }
    })
        .catch((error) => {
        endLoading(node);
        return Promise.reject(error);
    });
}



//# sourceMappingURL=loading-69139907.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,