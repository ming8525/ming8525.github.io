"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-ffbdb6"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-attributes_2.entry.js":
/*!**********************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-attributes_2.entry.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_attributes: () => (/* binding */ ArcgisAttributes),
/* harmony export */   arcgis_attributes_formatting: () => (/* binding */ ArcgisAttributesFormatting)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _previewPopup_2acb9488_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./previewPopup-2acb9488.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/previewPopup-2acb9488.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */










const CSS = {
    totalSelectedDiv: "total-selected-div",
    fieldIcons: "field-icons"
};

const FieldIcons = ({ fieldType }) => {
    // key: ids
    if (fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.oid ||
        fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.guid ||
        fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.globalId) {
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "key" });
    }
    // integer
    else if (fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.integer ||
        fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.smallInteger ||
        fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.bigInteger) {
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "integer" });
    }
    // number
    else if (fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.single ||
        fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.double ||
        fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.long ||
        fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.number) {
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "number" });
    }
    // string
    else if (fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.string) {
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "string" });
    }
    // date
    else if (fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.date) {
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "date-time" });
    }
    else if (fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly) {
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "calendar" });
    }
    else if (fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.timestampOffset) {
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "time-zone" });
    }
    else if (fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.timeOnly) {
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "clock" });
    }
    // default string
    else {
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "string" });
    }
};

const arcgisAttributesCss = ".total-selected-div{padding:5px}.field-icons{padding:0 var(--arcgis-app-cap-spacing);display:flex;align-items:center}";

const ArcgisAttributes = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.attributesUpdated = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "attributesUpdated", 7);
        this.arcgisAttributesDismissedChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAttributesDismissedChange", 7);
        this.internalAttributesUpdated = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "internalAttributesUpdated", 7);
        this.closeAttributePopovers = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "closeAttributePopovers", 7);
        this.listItems = [];
        this.listItemsNodes = [];
        this.layerFieldsMap = new Map();
        this.arcadeExpMap = new Map();
        this.filterLength = 5;
        this.isPopupOpenForCurrentLayer = false;
        this.debouncedAttributeUpdates = (0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_6__.d)(() => {
            if (this.layerDisplayType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.l.feature) {
                this.layer.popupTemplate = this.popupTemplate.clone();
            }
            else if (this.layerDisplayType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.l.cluster) {
                this.layer.featureReduction.popupTemplate = this.popupTemplate.clone();
            }
            this.attributesUpdated.emit();
        }, 1000);
        // rendor methods
        this.calciteListItem = (field) => (
        // field.fieldName is always unique
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { id: field.fieldName, label: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.b)(field, this.arcadeExpMap), description: `{${field.fieldName}}`, value: field.fieldName, metadata: {
                label: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.b)(field, this.arcadeExpMap),
                fieldName: field.fieldName
            }, onClick: () => this.selectionClick(), onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.selectionClick();
                }
            }, ref: (node) => this.listItemsNodes.push(node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "actions-end", class: CSS.fieldIcons }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(FieldIcons, { fieldType: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.a)(field.fieldName, this.layerFieldsMap, this.arcadeExpMap) }))));
        this.mapView = undefined;
        this.layer = undefined;
        this.portal = undefined;
        this.displayPopup = true;
        this.config = undefined;
        this.layerDisplayType = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.l.feature;
        this.dismissible = false;
        this.hideLayerTitle = false;
        this.calciteFlowProps = false;
        this.reRender = undefined;
        this.totalSelectedFields = undefined;
    }
    // lifecycle methods
    async componentWillLoad() {
        var _a;
        const localeSettings = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
        this.strings = localeSettings[0];
        this.currentLanguage = localeSettings[1];
        this.serviceType = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.c)(this.layer);
        if (this.layerDisplayType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.l.feature) {
            const layerType = "type" in this.layer ? this.layer.type : "sublayer";
            const sourceLayer = this.mapView.popup.visible
                ? (_a = this.mapView.popup.selectedFeature) === null || _a === void 0 ? void 0 : _a.sourceLayer
                : undefined;
            this.isPopupOpenForCurrentLayer =
                layerType === "subtype-sublayer"
                    ? (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.subtypeCode) === this.layer.subtypeCode &&
                        (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.parent.id) === this.layer.parent.id // TODO any + parent
                    : layerType === "sublayer"
                        ? (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.id) === this.layer.id &&
                            (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.layer.id) === this.layer.layer.id
                        : "id" in this.layer && (sourceLayer === null || sourceLayer === void 0 ? void 0 : sourceLayer.id) === this.layer.id;
            // temp, turn off popupEnabled for MIL
            if (this.serviceType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.s.mapImage && !this.layer.popupTemplate) {
                this.layer.popupEnabled = false;
            }
            // generate default if template is empty
            this.popupTemplate = this.layer.popupTemplate
                ? this.layer.popupTemplate.clone()
                : this.layer.createPopupTemplate();
            // generate master field info
            this.popupTemplate.fieldInfos = [
                ...(await (0,_previewPopup_2acb9488_js__WEBPACK_IMPORTED_MODULE_3__.g)(this.layer, this.popupTemplate))
            ];
        }
        else {
            this.popupTemplate = this.layer.featureReduction.popupTemplate.clone();
        }
    }
    componentDidLoad() {
        this.calciteListNode = this.hostElement.shadowRoot.getElementById("list_Id");
        this.showPreviewPopup(true);
        // MV workflow
        this.setupResizeObserver();
    }
    async componentWillRender() {
        // map for faster access
        this.layerFieldsMap = await (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.d)(this.layer);
        this.arcadeExpMap = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.e)(this.popupTemplate);
        this.listItems = [];
        this.popupTemplate.fieldInfos.forEach((field) => {
            var _a;
            // no relationship support for v1
            // imagery layer might have fieldName:undefined ...
            if (((_a = field.fieldName) === null || _a === void 0 ? void 0 : _a.indexOf(_commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.f.relationship)) === -1) {
                this.listItems.push(this.calciteListItem(field));
            }
        });
    }
    componentDidUpdate() {
        this.internalAttributesUpdated.emit();
    }
    disconnectedCallback() {
        var _a;
        (_a = this.parentShellObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
    // Public Methods
    async done() {
        this.closeAttributePopovers.emit(true);
        this.showPreviewPopup(false);
    }
    async setFocus() {
        var _a, _b;
        if (this.flowItemNode) {
            (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
        }
        else {
            (_b = this.calciteListNode) === null || _b === void 0 ? void 0 : _b.setFocus();
        }
    }
    // Events
    arcgisAttributesFormattingUpdatedHandler(event) {
        event.stopPropagation();
        this.popupTemplate = event.detail.clone();
        this.reRender = !this.reRender;
    }
    arcgisAttributesFormattingDismissedHandler(event) {
        event.stopPropagation();
        this.closeAttributePopovers.emit(true);
    }
    async closeAttributePopoversHandler(event) {
        if (this.attributeFormatter) {
            document.body.removeChild(this.attributeFormatter);
            this.attributeFormatter = null;
            // clear selected fields boolean
            if (event.detail) {
                const selectedFields = this.calciteListNode.selectedItems;
                for (const fieldItem of selectedFields.values()) {
                    fieldItem.selected = false;
                }
                this.totalSelectedFields = 0;
                // add timeout, otherwise panel takes focus
                // when setting focus on entire list then search box gets focus
                setTimeout(() => this.listItemsNodes[0].setFocus(), 300);
            }
        }
    }
    // update attributes
    internalAttributesUpdatedHandler(event) {
        event.stopPropagation();
        this.debouncedAttributeUpdates();
    }
    calciteChipCloseHandler(event) {
        event.stopPropagation();
        this.closeAttributePopovers.emit(true);
    }
    // private methods and properties
    // open popover
    async selectionClick() {
        // close existing popovers
        this.closeAttributePopovers.emit();
        const selectedFields = [
            ...this.calciteListNode.selectedItems.map((item) => item.value)
        ];
        this.totalSelectedFields = selectedFields.length;
        if (!this.attributeFormatter && selectedFields.length > 0) {
            this.attributeFormatter = document.createElement("arcgis-attributes-formatting");
            this.attributeFormatter.popoverProps = { refElement: this.hostElement, offsetSkidding: 45 };
            this.attributeFormatter.layerDisplayType = this.layerDisplayType;
            this.attributeFormatter.selectedFields = selectedFields;
            this.attributeFormatter.layer = this.layer;
            this.attributeFormatter.popupTemplate = this.popupTemplate.clone();
            document.body.appendChild(this.attributeFormatter);
        }
    }
    showPreviewPopup(show) {
        var _a;
        if (this.displayPopup &&
            this.layerDisplayType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.l.feature &&
            !this.isPopupOpenForCurrentLayer) {
            if (show && this.layer.popupEnabled && this.layer.popupTemplate) {
                this.previewPopupController = new AbortController();
                (0,_previewPopup_2acb9488_js__WEBPACK_IMPORTED_MODULE_3__.p)(this.mapView, this.layer, this.previewPopupController);
            }
            else {
                (_a = this.previewPopupController) === null || _a === void 0 ? void 0 : _a.abort();
                this.mapView.closePopup();
            }
        }
    }
    // if parent is shell panel. MV workflow.
    setupResizeObserver() {
        var _a;
        const parentShellPanel = (_a = this.hostElement) === null || _a === void 0 ? void 0 : _a.parentElement;
        if ((0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_6__.i)(parentShellPanel.collapsed)) {
            this.parentShellObserver = new ResizeObserver(() => {
                if (parentShellPanel.collapsed) {
                    this.done();
                }
                else {
                    this.showPreviewPopup(true);
                }
            });
            this.parentShellObserver.observe(parentShellPanel);
        }
    }
    displayList() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { id: "list_Id", filterEnabled: this.listItems.length >= this.filterLength ? true : false, filterPlaceholder: this.strings.filterAttributes, selectionMode: "multiple" }, this.totalSelectedFields > 0 ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: CSS.totalSelectedDiv }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-chip", { value: "totalSelectedValue", closable: true }, `${this.totalSelectedFields} ${this.strings.selected}`))) : null, this.listItems));
    }
    render() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { style: this.calciteFlowProps ? {} : { display: "flex", flex: "1 1 auto", overflow: "hidden" } }, this.calciteFlowProps ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { dir: (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) }, this.displayList())) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { id: "attributes_flow_Id", dir: (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: this.strings.attributesHeading, description: !this.hideLayerTitle ? this.layer.title : undefined, closable: this.dismissible, ref: (node) => (this.flowItemNode = node), onCalciteFlowItemClose: (event) => {
                event.stopPropagation();
                this.done();
                this.arcgisAttributesDismissedChange.emit();
            } }, this.displayList())))));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAttributes.style = arcgisAttributesCss;

const dateFormats = [
    "short-date",
    "long-month-day-year",
    "day-short-month-year",
    "long-date",
    "long-month-year",
    "short-month-year",
    "year"
];
const timeFormats = ["short-time", "long-time", "short-time-24", "long-time-24"];
// when time format is "null", showTime not available
const allDatesMap = new Map();
// short-date
allDatesMap.set("short-date", { dateFormat: dateFormats[0], timeFormat: "" });
allDatesMap.set("short-date-short-time", { dateFormat: dateFormats[0], timeFormat: timeFormats[0] });
allDatesMap.set("short-date-long-time", { dateFormat: dateFormats[0], timeFormat: timeFormats[1] });
allDatesMap.set("short-date-short-time-24", { dateFormat: dateFormats[0], timeFormat: timeFormats[2] });
allDatesMap.set("short-date-long-time-24", { dateFormat: dateFormats[0], timeFormat: timeFormats[3] });
// long-month-day-year
allDatesMap.set("long-month-day-year", { dateFormat: dateFormats[1], timeFormat: "" });
allDatesMap.set("long-month-day-year-short-time", { dateFormat: dateFormats[1], timeFormat: timeFormats[0] });
allDatesMap.set("long-month-day-year-long-time", { dateFormat: dateFormats[1], timeFormat: timeFormats[1] });
allDatesMap.set("long-month-day-year-short-time-24", {
    dateFormat: dateFormats[1],
    timeFormat: timeFormats[2]
});
allDatesMap.set("long-month-day-year-long-time-24", { dateFormat: dateFormats[1], timeFormat: timeFormats[3] });
// day-short-month-year
allDatesMap.set("day-short-month-year", { dateFormat: dateFormats[2], timeFormat: "" });
allDatesMap.set("day-short-month-year-short-time", { dateFormat: dateFormats[2], timeFormat: timeFormats[0] });
allDatesMap.set("day-short-month-year-long-time", { dateFormat: dateFormats[2], timeFormat: timeFormats[1] });
allDatesMap.set("day-short-month-year-short-time-24", {
    dateFormat: dateFormats[2],
    timeFormat: timeFormats[2]
});
allDatesMap.set("day-short-month-year-long-time-24", {
    dateFormat: dateFormats[2],
    timeFormat: timeFormats[3]
});
// long-date
allDatesMap.set("long-date", { dateFormat: dateFormats[3], timeFormat: "" });
allDatesMap.set("long-date-short-time", { dateFormat: dateFormats[3], timeFormat: timeFormats[0] });
allDatesMap.set("long-date-long-time", { dateFormat: dateFormats[3], timeFormat: timeFormats[1] });
allDatesMap.set("long-date-short-time-24", { dateFormat: dateFormats[3], timeFormat: timeFormats[2] });
allDatesMap.set("long-date-long-time-24", { dateFormat: dateFormats[3], timeFormat: timeFormats[3] });
// long-month-year
allDatesMap.set("long-month-year", { dateFormat: dateFormats[4], timeFormat: null });
// short-month-year
allDatesMap.set("short-month-year", { dateFormat: dateFormats[5], timeFormat: null });
// year
allDatesMap.set("year", { dateFormat: dateFormats[6], timeFormat: null });
// default
allDatesMap.set("default", { dateFormat: dateFormats[0], timeFormat: timeFormats[2] });

const arcgisAttributesFormattingCss = ".formatting-div{padding:var(--arcgis-app-cap-spacing) var(--arcgis-app-side-spacing);max-height:60vh}.single-line-label-switch-section{display:flex;margin:0;padding:var(--arcgis-app-cap-spacing-half) 0}.single-line-label-switch-label{display:flex;flex-flow:column nowrap;flex:1 0 0%;overflow:hidden}.single-line-label-switch-switch{flex:0 0 0%;justify-self:flex-end;margin:0}.single-line-label-switch-switch input{display:none}";

const ArcgisAttributesFormatting = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisAttributesFormattingDismissed = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAttributesFormattingDismissed", 7);
        this.arcgisAttributesFormattingUpdated = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisAttributesFormattingUpdated", 7);
        this.displayDate = new Date("December 31, 1969 18:00:00");
        this.layerFieldsMap = new Map();
        this.arcadeExpMap = new Map();
        this.selectedFieldInfoMap = new Map();
        this.hasCommonDataTypes = true;
        this.thousandSeperator = () => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", { class: "single-line-label-switch-section" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "single-line-label-switch-label" }, this.strings.show1000Seperator), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { id: "thousandSeperatorSwitch_Id", scale: "s", class: "single-line-label-switch-switch", checked: this.firstSelected.format.digitSeparator ? true : false })));
        this.significantDigits = () => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.significantDigits, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: this.strings.significantDigits, onCalciteSelectChange: (event) => {
                const select = event.target;
                this.firstSelected.format.places = Number(select.selectedOption.value) || 0;
                this.saveFieldInfo();
            } }, [0, 1, 2, 3, 4, 5, 6, 7, 8].map((x) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: x.toString(), selected: this.firstSelected.format.places === x ? true : false }, `${x} ${this.strings.decimalPlaces}`)))))));
        this.dateFormat = (selectedDateFormat) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.dateFormat, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { id: "dateFormatSelect_Id", label: this.strings.dateFormat, onCalciteSelectChange: () => this.changeDateFormat() }, dateFormats.map((currentDateFormat) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: currentDateFormat, selected: selectedDateFormat === currentDateFormat ? true : false }, this.intl.formatDate(this.displayDate, this.intl.convertDateFormatToIntlOptions(currentDateFormat)))))))));
        this.showTime = (selectedTimeFormat) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", { class: "single-line-label-switch-section", id: "showTime_Id" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "single-line-label-switch-label" }, this.strings.showTime), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { id: "showTimeSwitch_Id", scale: "s", class: "single-line-label-switch-switch", checked: selectedTimeFormat ? true : false })));
        this.timeFormat = (selectedTimeFormat) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("section", { id: "timeFormat_Id" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.timeFormat, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { id: "timeFormatSelect_Id", label: this.strings.timeFormat, onCalciteSelectChange: () => this.changeDateFormat() }, timeFormats.map((currentTimeFormat) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: currentTimeFormat, selected: selectedTimeFormat === currentTimeFormat ? true : false }, this.getTimeFormatString(currentTimeFormat))))))));
        this.layer = undefined;
        this.layerDisplayType = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.l.feature;
        this.selectedFields = undefined;
        this.popoverProps = undefined;
        this.popupTemplate = undefined;
        this.isOpen = false;
    }
    // lifecycle methods
    async componentWillLoad() {
        const localeSettings = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
        this.strings = localeSettings[0];
        this.currentLanguage = localeSettings[1];
        const [tempIntl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_7__.l)(["esri/intl"]);
        this.intl = tempIntl;
        // map for faster access
        this.layerFieldsMap = await (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.d)(this.layer);
        this.arcadeExpMap = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.e)(this.popupTemplate);
        // setup selectedFieldInfoMap with all needed info
        this.selectedFields.forEach((fieldName) => {
            this.popupTemplate.fieldInfos.find((templateFieldInfo, idx) => {
                if (templateFieldInfo.fieldName === fieldName) {
                    this.selectedFieldInfoMap.set(fieldName, {
                        index: idx,
                        fieldType: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.a)(fieldName, this.layerFieldsMap, this.arcadeExpMap),
                        fieldInfo: templateFieldInfo
                    });
                }
            });
        });
        // first selected field to drive the options displayed
        this.firstSelected = this.selectedFieldInfoMap.get(this.selectedFields[0]).fieldInfo;
        this.firstSelectedFieldType = this.selectedFieldInfoMap.get(this.selectedFields[0]).fieldType;
        this.hasCommonDataTypes = this.commonDataTypesCheck(this.firstSelectedFieldType);
        // setup default only for 1st. Rest will be copied on save
        if (!this.firstSelected.format && this.hasCommonDataTypes) {
            await this.setupDefaultFormat(this.firstSelected, this.firstSelectedFieldType);
        }
    }
    componentDidLoad() {
        this.hostElement.shadowRoot.getElementById("managePopover_Id")["reposition"]();
        if (this.aliasInput) {
            this.aliasInput.focus();
        }
        this.setupDateTimeDisplay();
        this.isOpen = true;
        // need timeout because of re-render
        setTimeout(() => requestAnimationFrame(() => {
            this.panelElement.setFocus();
        }), 300);
    }
    // Public Methods
    async reposition() {
        var _a;
        (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
    }
    async setFocus() {
        setTimeout(() => this.panelElement.setFocus(), 100);
    }
    // Events
    calciteSwitchChangeHandler(event) {
        event.stopPropagation();
        if (this.firstSelected.format) {
            if (this.firstSelectedFieldType === "date" ||
                this.firstSelectedFieldType === "timestamp-offset") {
                this.changeDateFormat();
            }
            // numbers
            else {
                this.firstSelected.format.digitSeparator = this.hostElement.shadowRoot.getElementById("thousandSeperatorSwitch_Id").checked
                    ? true
                    : false;
                this.saveFieldInfo();
            }
        }
    }
    // private methods and properties
    commonDataTypesCheck(fieldType) {
        for (let x = 1; x < this.selectedFields.length; x++) {
            const tempFieldType = this.selectedFieldInfoMap.get(this.selectedFields[x]).fieldType;
            if (fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.integer ||
                fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.smallInteger ||
                fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.bigInteger) {
                if ([
                    _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.integer,
                    _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.smallInteger,
                    _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.bigInteger
                ].indexOf(tempFieldType) === -1) {
                    return false;
                }
            }
            else if (fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.single ||
                fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.double ||
                fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.long ||
                fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.number) {
                if ([
                    _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.single,
                    _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.double,
                    _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.long,
                    _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.number
                ].indexOf(tempFieldType) === -1) {
                    return false;
                }
            }
            else if (fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.date ||
                fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.timestampOffset) {
                if ([_commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.date, _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.timestampOffset].indexOf(tempFieldType) === -1) {
                    return false;
                }
            }
            else if (fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly) {
                if ([_commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly].indexOf(tempFieldType) === -1) {
                    return false;
                }
            }
            else if (fieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.timeOnly) {
                if ([_commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.timeOnly].indexOf(tempFieldType) === -1) {
                    return false;
                }
            }
        }
        return true;
    }
    async setupDefaultFormat(currentField, currentFieldType) {
        const [FieldInfoFormat] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_7__.l)([
            "esri/popup/support/FieldInfoFormat"
        ]);
        if (currentFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.integer ||
            currentFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.smallInteger ||
            currentFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.bigInteger) {
            currentField.format = new FieldInfoFormat({ digitSeparator: false });
            this.saveFieldInfo();
        }
        else if (currentFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.single ||
            currentFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.double ||
            currentFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.long ||
            currentFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.number) {
            currentField.format = new FieldInfoFormat({
                digitSeparator: false,
                places: 2
            });
            this.saveFieldInfo();
        }
        // date
        else if ((currentFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.date ||
            currentFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly ||
            currentFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.timeOnly ||
            currentFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.timestampOffset) &&
            this.dateFormattingAvailable()) {
            if (currentFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly) {
                currentField.format = new FieldInfoFormat({
                    dateFormat: "short-date"
                });
            }
            else {
                currentField.format = new FieldInfoFormat({
                    dateFormat: "short-date-short-time" // used to be "default"
                });
            }
            this.saveFieldInfo();
        }
    }
    setupDateTimeDisplay() {
        var _a;
        if ((this.firstSelectedFieldType === "date" ||
            this.firstSelectedFieldType === "time-only" ||
            this.firstSelectedFieldType === "timestamp-offset") &&
            ((_a = this.firstSelected.format) === null || _a === void 0 ? void 0 : _a.dateFormat) &&
            this.hasCommonDataTypes) {
            const showTimeId = this.hostElement.shadowRoot.getElementById("showTime_Id");
            const showTimeSwitchId = this.hostElement.shadowRoot.getElementById("showTimeSwitch_Id");
            const timeFormatId = this.hostElement.shadowRoot.getElementById("timeFormat_Id");
            const tempMap = allDatesMap.get(this.firstSelected.format.dateFormat);
            if (this.firstSelectedFieldType === "date" ||
                this.firstSelectedFieldType === "timestamp-offset") {
                if (tempMap.timeFormat === "") {
                    showTimeId.style.display = "flex";
                    showTimeSwitchId.checked = false;
                    timeFormatId.style.display = "none";
                }
                else if (tempMap.timeFormat === null) {
                    showTimeId.style.display = "none";
                    showTimeSwitchId.checked = false;
                    timeFormatId.style.display = "none";
                }
                else {
                    showTimeId.style.display = "flex";
                    showTimeSwitchId.checked = true;
                    timeFormatId.style.display = "block";
                }
            }
            else if (this.firstSelectedFieldType === "time-only") {
                timeFormatId.style.display = "block";
            }
        }
    }
    getTimeFormatString(currentTimeFormat) {
        if (currentTimeFormat === timeFormats[0]) {
            return this.strings.shortTime;
        }
        else if (currentTimeFormat === timeFormats[1]) {
            return this.strings.longTime;
        }
        else if (currentTimeFormat === timeFormats[2]) {
            return this.strings.shortTime24;
        }
        else if (currentTimeFormat === timeFormats[3]) {
            return this.strings.longTime24;
        }
        else {
            return this.strings.shortTime24;
        }
    }
    changeAlias() {
        // default field name
        if (!(0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(this.aliasInput.value)) {
            this.aliasInput.value = this.firstSelected.fieldName;
        }
        if (this.arcadeExpMap.has(this.firstSelected.fieldName)) {
            this.arcadeExpMap.get(this.firstSelected.fieldName).title = this.aliasInput.value;
        }
        else {
            this.firstSelected.label = this.aliasInput.value;
        }
        this.saveFieldInfo();
    }
    changeDateFormat() {
        const tempSelectDate = this.hostElement.shadowRoot.getElementById("dateFormatSelect_Id");
        const tempSelectTime = this.hostElement.shadowRoot.getElementById("timeFormatSelect_Id");
        const showTimeSwitchId = this.hostElement.shadowRoot.getElementById("showTimeSwitch_Id");
        if (this.firstSelectedFieldType === "date" ||
            this.firstSelectedFieldType === "timestamp-offset") {
            const tempDateMap = allDatesMap.get(tempSelectDate.selectedOption.value);
            if (tempDateMap.timeFormat === "") {
                this.firstSelected.format.dateFormat = showTimeSwitchId.checked
                    ? `${tempSelectDate.selectedOption.value}-${tempSelectTime.selectedOption.value}`
                    : `${tempSelectDate.selectedOption.value}`;
            }
            else if (tempDateMap.timeFormat === null) {
                this.firstSelected.format.dateFormat = `${tempSelectDate.selectedOption.value}`;
            }
        }
        else if (this.firstSelectedFieldType === "date-only") {
            this.firstSelected.format.dateFormat = `${tempSelectDate.selectedOption.value}`;
        }
        else if (this.firstSelectedFieldType === "time-only") {
            this.firstSelected.format.dateFormat = `short-date-${tempSelectTime.selectedOption.value}`;
        }
        this.saveFieldInfo();
        this.setupDateTimeDisplay();
        this.hostElement.shadowRoot.getElementById("managePopover_Id")["reposition"]();
    }
    saveFieldInfo() {
        var _a;
        // hasCommonDataTypes always true when something can be changed
        if (this.hasCommonDataTypes) {
            this.selectedFieldInfoMap.forEach((value) => {
                if (value.fieldInfo.fieldName === this.firstSelected.fieldName) {
                    value.fieldInfo = this.firstSelected.clone();
                }
                else {
                    value.fieldInfo.format = this.firstSelected.format.clone();
                }
            });
            // for arcade, also clone to popupTemplate.expressionInfos(for title)
            // only valid for title update use case
            if (this.selectedFields.length === 1 && this.arcadeExpMap.has(this.firstSelected.fieldName)) {
                if ((_a = this.popupTemplate) === null || _a === void 0 ? void 0 : _a.expressionInfos) {
                    this.popupTemplate.expressionInfos.find((arcadeField, index) => {
                        if (`${_commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.f.expression}${arcadeField.name}` ===
                            this.firstSelected.fieldName) {
                            return (this.popupTemplate.expressionInfos[index] = this.arcadeExpMap
                                .get(this.firstSelected.fieldName)
                                .clone());
                        }
                    });
                }
            }
            // clone/change in fieldinfo
            this.selectedFieldInfoMap.forEach((value) => {
                this.popupTemplate.fieldInfos[value.index] = value.fieldInfo.clone();
            });
            // clone/change in content
            if (Array.isArray(this.popupTemplate.content)) {
                this.popupTemplate.content.forEach((content) => {
                    if (content.type === "fields" && content.fieldInfos) {
                        content.fieldInfos.forEach((contentField, index) => {
                            if (this.selectedFieldInfoMap.has(contentField.fieldName)) {
                                const tempField = this.selectedFieldInfoMap
                                    .get(contentField.fieldName)
                                    .fieldInfo.clone();
                                tempField.visible = true;
                                content.fieldInfos[index] = tempField;
                            }
                        });
                    }
                });
            }
            this.arcgisAttributesFormattingUpdated.emit(this.popupTemplate.clone());
        }
    }
    // rendor methods
    formattingOptions() {
        if (this.firstSelected.format) {
            if (this.firstSelectedFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.integer ||
                this.firstSelectedFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.smallInteger ||
                this.firstSelectedFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.bigInteger) {
                return this.thousandSeperator();
            }
            // number
            else if (this.firstSelectedFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.single ||
                this.firstSelectedFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.double ||
                this.firstSelectedFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.long ||
                this.firstSelectedFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.number) {
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.significantDigits(), this.thousandSeperator()));
            }
            // date
            else if ((this.firstSelectedFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.date ||
                this.firstSelectedFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly ||
                this.firstSelectedFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.timeOnly ||
                this.firstSelectedFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.timestampOffset) &&
                this.dateFormattingAvailable()) {
                const tempMap = allDatesMap.has(this.firstSelected.format.dateFormat)
                    ? allDatesMap.get(this.firstSelected.format.dateFormat)
                    : this.firstSelectedFieldType === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly
                        ? allDatesMap.get("short-date")
                        : allDatesMap.get("short-date-short-time"); // used to be "default"
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.firstSelectedFieldType !== _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.timeOnly &&
                    this.dateFormat(tempMap.dateFormat), this.firstSelectedFieldType !== _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.timeOnly &&
                    this.firstSelectedFieldType !== _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly &&
                    this.showTime(tempMap.timeFormat), this.firstSelectedFieldType !== _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.a.dateOnly &&
                    this.timeFormat(tempMap.timeFormat)));
            }
            // default string
            else {
                return null;
            }
        }
        else {
            return null;
        }
    }
    dateFormattingAvailable() {
        return (!((0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.c)(this.layer) === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__.s.scene) ||
            this.layer.associatedLayer != null);
    }
    render() {
        const doneBtn = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", scale: "m", slot: "footer", width: "full", onClick: () => this.arcgisAttributesFormattingDismissed.emit("done") }, this.strings.done));
        const aliasDiv = ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, this.strings.displayName, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { type: "text", ref: (element) => {
                this.aliasInput = element;
            }, value: this.arcadeExpMap.has(this.firstSelected.fieldName)
                ? this.arcadeExpMap.get(this.firstSelected.fieldName).title
                : this.firstSelected.label, onCalciteInputInput: () => this.changeAlias() })));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.hostElement), id: "managePopover_Id", placement: this.popoverProps.placement || "leading-start", open: this.isOpen, pointerDisabled: true, referenceElement: this.popoverProps.refElement, offsetDistance: this.popoverProps.offsetDistance || 0, offsetSkidding: this.popoverProps.offsetSkidding || 0, label: "", style: {
                zIndex: "100"
            }, ref: (node) => (this.popoverNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { ref: (el) => (this.panelElement = el), closable: true, style: {
                width: `${this.popoverProps.popoverWidth ||
                    this.popoverProps.refElement.getBoundingClientRect().width}px`
            }, onCalcitePanelClose: () => this.arcgisAttributesFormattingDismissed.emit() }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header-content" }, this.strings.formatting), doneBtn, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "formatting-div" }, this.selectedFields.length === 1 ? (aliasDiv) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", null, `${this.strings.multipleSelection} (${this.selectedFields.length})`)), this.hasCommonDataTypes ? (this.formattingOptions()) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("h3", null, this.strings.selectCommon)))))));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisAttributesFormatting.style = arcgisAttributesFormattingCss;



//# sourceMappingURL=arcgis-attributes_2.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,