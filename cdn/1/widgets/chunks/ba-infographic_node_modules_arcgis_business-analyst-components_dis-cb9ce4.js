"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_ba-infographic_node_modules_arcgis_business-analyst-components_dis-cb9ce4"],{

/***/ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgis-infographic-selector_2.entry.js":
/*!********************************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgis-infographic-selector_2.entry.js ***!
  \********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_infographic_selector: () => (/* binding */ ArcgisInfographicSelector),
/* harmony export */   arcgis_infographic_tree: () => (/* reexport safe */ _arcgis_infographic_tree_b71f4b45_js__WEBPACK_IMPORTED_MODULE_0__.A)
/* harmony export */ });
/* harmony import */ var _index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-4e647411.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/index-4e647411.js");
/* harmony import */ var _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ElementIds-f7d257e8.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/ElementIds-f7d257e8.js");
/* harmony import */ var _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GEClient-1a83a657.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/GEClient-1a83a657.js");
/* harmony import */ var _arcgis_infographic_tree_b71f4b45_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arcgis-infographic-tree-b71f4b45.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgis-infographic-tree-b71f4b45.js");






const arcgisInfographicSelectorCss = ":host{display:block}.infographicSelectorOuter{position:relative;width:100%;height:30px;justify-content:left;align-items:center}.selector-label-placeholder{color:gray}.infoSel-magnify{position:absolute;top:2px;left:100px;height:32px;width:32px;background-color:blue}.arcSel-combo{width:100%;height:32px;font-size:11pt;color:darkslategray}.arcSel-reports{width:calc(100% - 16px);height:100%;overflow:auto}.selector-dropdown-label{position:absolute;top:7px;left:6px;width:calc(100% - 35px);height:25px;font-size:10.5pt;font-weight:300;text-align:left;text-overflow:ellipsis;border-radius:0px;overflow:hidden;white-space:nowrap;cursor:pointer}.selector-dropdown{position:relative;height:32px;width:100%;cursor:pointer}.selector-dropdown-arrow{position:absolute;top:9px;right:7px;width:12px;height:12px;transition:all 0.15s 0.15s;transform:rotate(0)}.selector-drop-open{transform:rotate(180deg)}calcite-popover ::-webkit-scrollbar{background-color:var(--calcite-ui-background-1);width:8px;height:8px}calcite-popover ::-webkit-scrollbar-thumb{background-color:var(--calcite-ui-foreground-3)}calcite-popover ::-webkit-scrollbar-track{background-color:transparent}calcite-popover ::-webkit-scrollbar-corner{background-color:var(--calcite-ui-background-1);width:8px;height:8px}";

const ArcgisInfographicSelector = class {
  constructor(hostRef) {
    (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.infographicSelectorPopupOpened = (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "infographicSelectorPopupOpened", 6);
    this.infographicSelectorPopupClosed = (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "infographicSelectorPopupClosed", 6);
    this._localeSettings = {};
    this._popoverIsOpen = false;
    this._idPrefix = 'arcgis-infographic-selector-';
    this._elementIds = {}; // button
    this._idButtonPrefix = 'selector-dropdown-button-';
    this._idDropdownArrowPrefix = 'selector-dropdown-arrow-';
    this._idDropdownLabelPrefix = 'selector-dropdown-label-';
    this._idReportListPrefix = 'selector-report-list-';
    this._idPopoverPrefix = 'selector-popover-';
    this._idPopoverContentPrefix = 'selector-popover-content-';
    this._report = { id: null, name: '' };
    this.baseConfig = new _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.a('selector', this, this.onUpdateUI);
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.announceVersion();
    this.langCode = this.langCode || 'en-us';
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.B._initialize(this.langCode);
    this.setLocaleStrings();
    this.sourceCountry = this.sourceCountry || 'US';
    this.baseConfig.updateLocaleSettings({ language: this.langCode, country: this.sourceCountry });
  }
  onEnvChanged() {
    _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_3__.E.setEnvironment(this.env);
    if (this.baseConfig) {
      // updates config and sub-component configs
      this.baseConfig.updateConfig({ env: this.env }, null);
    }
  }
  onTokenChanged() {
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.a.Log('selector: token changed', this.token);
    const t = this.token;
    const u = this.baseConfig?.config?.username;
    if (t && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.hasText(t) && u && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.hasText(u)) {
      _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_3__.T.setToken(u, t);
    }
    if (this.baseConfig) {
      this.baseConfig.updateConfig({ token: this.token }, null);
    }
  }
  onUsernameChanged() {
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.a.Log('selector: username changed', this.username);
    const u = this.username;
    const t = this.baseConfig?.config?.token;
    if (t && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.hasText(t) && u && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.hasText(u)) {
      _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_3__.T.setToken(u, t);
    }
    if (this.baseConfig) {
      this.baseConfig.updateConfig({ username: this.username }, null);
    }
  }
  onLangCodeChanged() {
    if (this.baseConfig) {
      this.baseConfig.updateConfig({ langCode: this.langCode }, null);
    }
  }
  onGeoenrichmentUrlChanged() {
    if (this.baseConfig) {
      this.baseConfig.updateConfig({ geoenrichmentUrl: this.geoenrichmentUrl }, null);
    }
  }
  onSelectedReportIdChanged() {
    if (this.baseConfig) {
      this.baseConfig.updateConfig({ sourceCountry: this.sourceCountry }, null);
    }
  }
  onSourceCountryChanged() {
    if (this.baseConfig) {
      this.baseConfig.updateConfig({ sourceCountry: this.sourceCountry }, null);
    }
  }
  onThemeChanged() {
    this.stTheme = this.theme;
    if (this.baseConfig) {
      this.baseConfig.setTheme(this.theme);
    }
  }
  onConfigChange(newConfig, oldConfig) {
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.a.Log('arcgis-infographic-selector Config changed:', newConfig);
    // let changed: string[] = [];
    if (this.baseConfig) {
      if (newConfig && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.hasText(newConfig)) {
        const newCfg = JSON.parse(newConfig);
        const oldCfg = (oldConfig && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.hasText(oldConfig)) ? JSON.parse(oldConfig) : null;
        // changed = this._base.updateConfig(newCfg, oldCfg);
        this.baseConfig.updateConfig(newCfg, oldCfg);
      }
    }
  }
  async getConfig() {
    const myCfg = this.baseConfig;
    return myCfg;
  }
  // infographic tree report id changed
  reportSelectedEventHandler(e) {
    const report = e.detail?.report;
    if (report?.id && report?.name) {
      this.selectedReportId = report.id;
      this.onSelectedReportIdChanged();
      this._hidePlaceholderAndShowLabel(report.name);
      this.hidePopover();
    }
  }
  // Default infographic selected
  defaultReportSelectedEventHandler(e) {
    const reportId = e.detail?.reportId;
    const reportName = e.detail?.name;
    if (reportId && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.hasText(reportId)) {
      this.selectedReportId = reportId;
      this.onSelectedReportIdChanged();
      if (reportName) {
        const elem = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.queryElementById.call(this, this._elementIds.label);
        if (elem) {
          elem.innerText = reportName;
          this.hidePopover();
        }
      }
    }
  }
  onUpdateUI() { }
  _loadInstances() {
    // this.searchPlaceholder
    if (!this._instanceId)
      this._instanceId = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.E.generateId(this._idPrefix).id;
    if (!this._elementIds.label)
      this._elementIds.label = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.E.generateId(this._idDropdownLabelPrefix).id;
    if (!this._elementIds.button)
      this._elementIds.button = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.E.generateId(this._idButtonPrefix).id;
    if (!this._elementIds.popover)
      this._elementIds.popover = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.E.generateId(this._idPopoverPrefix).id;
    if (!this._elementIds.content)
      this._elementIds.content = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.E.generateId(this._idPopoverContentPrefix).id;
    if (!this._elementIds.arrow)
      this._elementIds.arrow = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.E.generateId(this._idDropdownArrowPrefix).id;
    if (!this._elementIds.reports)
      this._elementIds.reports = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.E.generateId(this._idReportListPrefix).id;
  }
  setLocaleStrings() {
    // console.log("setLocaleStrings() for infographic-selector")
    // example:
    // this.labels = {
    //   dropdownLocation: BaReportsLanguage.i18n('address-location-or-place'),
    //   dropdownBoundary: BaReportsLanguage.i18n('boundary-name'),
    //   dropdownAll: BaReportsLanguage.i18n('dropdown-all'),
    //   watermarkAll: BaReportsLanguage.i18n('all-placeholder'),
    //   watermarkLocation: BaReportsLanguage.i18n('enter-address-loc-or-place'),
    //   watermarkBoundary: BaReportsLanguage.i18n('enter-boundary-name')
    // }
    // this.showSearch = BaReportsLanguage.i18n('show-search')
    // this.searchPlaceholder = BaReportsLanguage.i18n('search-placeholder')
    // this.searchLabel = BaReportsLanguage.i18n('search-label')
    // this.searchAll = BaReportsLanguage.i18n('dropdown-all')
    // this.searchAllPlaceholder = BaReportsLanguage.i18n('all-placeholder')
    // this.searchPlaceholderShort = BaReportsLanguage.i18n('search-placeholder-short')
    // this.searchEnterBoundary = BaReportsLanguage.i18n('search-enter-boundary')
    // this.searchBoundary = BaReportsLanguage.i18n('search-boundary')
  }
  // Stencil lifecycle - called once after component is first connected to the DOM
  async componentWillLoad() {
    // Load props that may have values but no Watches have triggered yet
    if (this.env) {
      this.onEnvChanged();
    }
    if (this.token) {
      this.onTokenChanged();
    }
    if (this.username) {
      this.onUsernameChanged();
    }
    if (this.langCode) {
      this.onLangCodeChanged();
    }
    if (this.geoenrichmentUrl) {
      this.onGeoenrichmentUrlChanged();
    }
    if (this.sourceCountry) {
      this.onSourceCountryChanged();
    }
    if (this.config) {
      this.onConfigChange(this.config, '');
    }
    if (this.selectedReportId) {
      this.onSelectedReportIdChanged();
    }
    if (this.theme) {
      this.baseConfig.setTheme(this.theme);
    }
    else {
      this.baseConfig.setTheme('light');
    }
    this._loadInstances();
    // if (!this.baseConfig.hasSubComponents()) {
    //   // add the step's sub components for config updates
    //   this.baseConfig.addSubComponents([{name:'tree', @@@@ the subcomponent's baseConfig @@@}]);
    // }
  }
  // Stencil lifecycle - called just after component updates, but not called during first render()
  componentDidUpdate() {
    const self = this;
    if (self.baseConfig) {
      self.baseConfig.onComponentHasRendered();
    }
  }
  onClickDropdown(e) {
    e.stopPropagation();
    this.onUpdatePopoverSize();
    this._popoverIsOpen = !this._popoverIsOpen;
    if (this._popoverIsOpen) {
      this.infographicSelectorPopupOpened.emit();
    }
    else {
      this.infographicSelectorPopupClosed.emit();
    }
    const arrow = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.queryElementById.call(this.el, this._elementIds.arrow);
    if (arrow) {
      if (this._popoverIsOpen) {
        arrow.classList.add('selector-drop-open');
      }
      else {
        arrow.classList.remove('selector-drop-open');
      }
    }
    return false;
  }
  // Stencil lifecycle - called once after component is fully loaded and 1st render occurred
  componentDidLoad() {
    const self = this;
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.a.Log('arcgis-infographic-selector didUpdate');
    self._loadInstances();
    function _clicked(e) {
      self.onClickDropdown.call(self, e);
    }
    // Component configuration notify sub-components is duplicated in all components
    // if (!self._base.hasSubComponents()) {
    //   // add the workflow sub components for config updates
    //   self._base.addSubComponents([self._elementIds.list]);
    //   //
    // }
    const dropButton = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.queryElementById.call(self.el, this._elementIds.button);
    if (dropButton) {
      dropButton.removeEventListener('click', _clicked);
      dropButton.addEventListener('click', _clicked);
    }
    const dropLabel = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.queryElementById.call(self.el, this._elementIds.label);
    if (dropLabel) {
      dropLabel.removeEventListener('click', _clicked);
      dropLabel.addEventListener('click', _clicked);
    }
    const dropArrow = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.queryElementById.call(self.el, this._elementIds.arrow);
    if (dropArrow) {
      dropArrow.removeEventListener('click', _clicked);
      dropArrow.addEventListener('click', _clicked);
    }
    function _onResize() {
      self.hidePopover();
      self.onUpdatePopoverSize();
    }
    window.removeEventListener('resize', _onResize);
    window.addEventListener('resize', _onResize);
    if (self.baseConfig) {
      self.baseConfig.onComponentHasRendered();
    }
  }
  hidePopover() {
    const popover = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.queryElementById.call(this.el, this._elementIds.popover);
    if (popover) {
      popover.setAttribute('open', 'false');
    }
    this._popoverIsOpen = false;
    this.infographicSelectorPopupClosed.emit();
    const arrow = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.queryElementById.call(this.el, this._elementIds.arrow);
    if (arrow) {
      arrow.classList.remove('selector-drop-open');
    }
  }
  onUpdatePopoverSize() {
    if (!this.el) {
      return;
    }
    let fullContentHt = 100;
    const minContentHt = 100;
    const maxPopoverWt = 450;
    const vpad = 36;
    const hpad = 16;
    const clientHt = document.documentElement.clientHeight;
    const clientWt = document.documentElement.clientWidth;
    const brr = this.el.getBoundingClientRect();
    const htAbove = brr.top;
    const htBelow = clientHt - (brr.top + brr.height) + window.scrollY;
    let fullContentWt = clientWt / 2;
    const wtRight = clientWt - brr.left + window.scrollX;
    if ((htBelow < minContentHt && htBelow < htAbove) ||
      (htAbove > htBelow && htAbove >= minContentHt)) {
      // popover max height = ht above if that space is larger than below
      fullContentHt = htAbove - vpad;
    }
    else {
      fullContentHt = htBelow - vpad;
    }
    if ((wtRight < brr.width && brr.left > wtRight) ||
      (brr.left > wtRight && brr.left >= brr.width)) {
      fullContentWt = brr.left - hpad;
    }
    else {
      fullContentWt = clientWt - brr.left - hpad;
    }
    fullContentWt = Math.min(maxPopoverWt, fullContentWt);
    // fullContentWt = Math.max(minPopoverWt, Math.min(wtRight - hpad, maxPopoverWt))
    const contentElem = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.queryElementById.call(this.el, this._elementIds.content);
    if (contentElem) {
      if (contentElem) {
        contentElem.style.height = fullContentHt + 'px';
      }
    }
    const popoverElem = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.queryElementById.call(this.el, this._elementIds.popover);
    if (popoverElem) {
      popoverElem.style.width = Math.min(450, fullContentWt) + 'px';
    }
    // notify tree that our size may have changed
    const tree = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.queryElementById.call(this.el, this._elementIds.reports);
    if (tree) {
      tree.updateLayout();
    }
  }
  _showPlaceholder() {
    const txt = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.B.i18n('select-infographic');
    const elem = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.queryElementById.call(this, this._elementIds.label);
    if (elem) {
      elem.classList.add('selector-label-placeholder');
      elem.innerText = txt;
    }
  }
  _hidePlaceholderAndShowLabel(replacementText) {
    const elem = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.queryElementById.call(this, this._elementIds.label);
    if (elem) {
      elem.classList.remove('selector-label-placeholder');
      if (replacementText) {
        elem.innerText = replacementText;
      }
    }
  }
  render() {
    // const cfg = this.baseConfig.config
    // let reportList: string = '{}'
    if (!this.baseConfig.config?.username || !_ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.hasText(this.baseConfig.config.username)) {
      _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.a.Error('ERROR: arcgis-infographic-selector missing [username]');
    }
    if (!this.baseConfig.config?.token || !_ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.A.hasText(this.baseConfig.config.token)) {
      _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.a.Error('ERROR: arcgis-infographic-selector missing [token]');
    }
    const pText = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_2__.B.i18n('select-infographic');
    const popStyle = {
      // 'padding-right': '20px',
      'position': 'absolute',
      'top': '0px',
      'left': '0px',
      'transform': 'translate(-312px, 7px)',
      'border': 'none',
      'box-shadow': 'none',
      'width': '450px'
    };
    const popoverStyle = {
      'padding': '6px',
      'width': '300px',
      'height': '200px'
    };
    const popupCloseHandler = () => {
      this.infographicSelectorPopupClosed.emit();
    };
    return ((0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { id: this._instanceId, class: "infographicSelectorOuter" }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { id: this._elementIds.button, class: "selector-dropdown" }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { id: this._elementIds.label, class: "selector-dropdown-label" }, pText), (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("svg", { id: this._elementIds.arrow, class: "selector-dropdown-arrow", width: "24", height: "24", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("path", { fill: "currentColor", "fill-rule": "evenodd", stroke: "currentColor", d: "M2.146 4.653a.485.485 0 0 1 .708 0L8 10.24l5.146-5.587a.485.485 0 0 1 .708 0 .538.538 0 0 1 0 .738l-5.5 5.956a.485.485 0 0 1-.708 0l-5.5-5.956a.538.538 0 0 1 0-.738Z", "clip-rule": "evenodd" }))), (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("calcite-popover", { id: this._elementIds.popover, style: popStyle, label: "Choose infographics", "pointer-disabled": "true", "overlay-positioning": "absolute", placement: "bottom-start", "offset-skidding": "4", "auto-close": "true", "reference-element": this._elementIds.button, onCalcitePopoverClose: popupCloseHandler }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { id: this._elementIds.content, style: popoverStyle }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("arcgis-infographic-tree", { id: this._elementIds.reports, portalOnlineGEProxy: this.portalOnlineGEProxy, class: "arcSel-reports", config: this.baseConfig.getConfigString() })))));
  }
  get el() { return (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.g)(this); }
  static get watchers() { return {
    "env": ["onEnvChanged"],
    "token": ["onTokenChanged"],
    "username": ["onUsernameChanged"],
    "langCode": ["onLangCodeChanged"],
    "geoenrichmentUrl": ["onGeoenrichmentUrlChanged"],
    "selectedReportId": ["onSelectedReportIdChanged"],
    "sourceCountry": ["onSourceCountryChanged"],
    "theme": ["onThemeChanged"],
    "config": ["onConfigChange"]
  }; }
};
ArcgisInfographicSelector.style = arcgisInfographicSelectorCss;



//# sourceMappingURL=arcgis-infographic-selector_2.entry.js.map

/***/ }),

/***/ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgis-infographic-tree-b71f4b45.js":
/*!*****************************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgis-infographic-tree-b71f4b45.js ***!
  \*****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ ArcgisInfographicTree)
/* harmony export */ });
/* harmony import */ var _index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-4e647411.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/index-4e647411.js");
/* harmony import */ var _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ElementIds-f7d257e8.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/ElementIds-f7d257e8.js");
/* harmony import */ var _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GEClient-1a83a657.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/GEClient-1a83a657.js");
/* harmony import */ var _arcgisReports_a1dc26aa_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./arcgisReports-a1dc26aa.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgisReports-a1dc26aa.js");





var _a;
class PreviewPopup {
  static nextCallback(f) {
    if (f) {
      this._callbackNext = f;
    }
  }
  static previousCallback(f) {
    if (f) {
      this._callbackPrev = f;
    }
  }
  static hidePopup() {
    // remove popup elements
    this._cancelTimer();
    this._removePopup();
    this._reportId = '';
  }
  static _onTimerTick() {
    this._timer = undefined;
    this.hidePopup();
  }
  static _onGoToNext() {
    if (this._callbackNext) {
      this._callbackNext(this._reportId);
    }
  }
  static _onGoToPrev() {
    if (this._callbackPrev) {
      this._callbackPrev(this._reportId);
    }
  }
  static _startTimer() {
    const self = this;
    self._cancelTimer();
    self._timer = setTimeout(() => { self._onTimerTick.call(self); }, this.timeoutSeconds * 1000);
  }
  static _cancelTimer() {
    if (this._timer) {
      clearTimeout(this._timer);
      this._timer = undefined;
    }
  }
  static _resetTimer() {
    this._cancelTimer();
    this._startTimer();
  }
  static _removePopup() {
    if (this._popupElement)
      this._popupElement.remove();
    this._popupElement = undefined;
  }
  static _generatePopup(y, ratio, src) {
    const self = this;
    // create the full size mask div that is transparent
    const maskDiv = document.createElement('div');
    maskDiv.style.position = 'absolute';
    maskDiv.style.left = '0';
    maskDiv.style.top = '0';
    maskDiv.style.width = (this._container.offsetWidth - this._rightPad) + 'px';
    maskDiv.style.height = this._container.offsetHeight + 'px';
    maskDiv.style.backgroundColor = 'transparent';
    maskDiv.style.zIndex = '900';
    this._popupElement = maskDiv;
    this._container.appendChild(this._popupElement);
    maskDiv.addEventListener('mouseover', () => { self.hidePopup(); });
    // create the image div with calculated size and placement
    this._placeImageDiv(y, ratio, src);
  }
  static _placeImageDiv(y, ratio, url) {
    // console.log( y, url)
    try {
      //Image padding constants
      const pad = 20;
      const popElem = document.createElement('img');
      let o = {
        click: { y: y },
        popup: { top: 0, right: 0, wt: 1, ht: 1 },
        adjustedContHt: 0,
        adjustedContWt: 0,
        ratio: ratio
      };
      o.adjustedContHt = this._popupElement.offsetHeight - (pad * 2);
      o.adjustedContWt = this._popupElement.offsetWidth - pad;
      // place popup centered and to the left of the click point x,y and fit as needed
      // If W >= H
      if (o.ratio >= 1) {
        // width >= height
        o.popup.wt = o.adjustedContWt;
        o.popup.ht = o.popup.wt / o.ratio;
        if (o.popup.ht > o.adjustedContHt) {
          // reduce target height to fit
          o.popup.ht = o.adjustedContHt;
          o.popup.wt = o.adjustedContHt * o.ratio;
        }
      }
      else {
        // height > width
        o.popup.ht = o.adjustedContHt;
        o.popup.wt = o.popup.ht * o.ratio;
        if (o.popup.wt > o.adjustedContWt) {
          // reduce target width to fit
          o.popup.wt = o.adjustedContWt;
          o.popup.ht = o.adjustedContWt / o.ratio;
        }
      }
      // Place in container
      const desiredTop = Math.max(o.click.y - (o.popup.ht / 2), pad);
      const maxTop = o.adjustedContHt - o.popup.ht + pad;
      o.popup.top = Math.min(desiredTop, maxTop);
      o.popup.right = 0;
      // Set the popup placement
      popElem.style.position = 'absolute';
      popElem.style.right = o.popup.right + 'px';
      popElem.style.top = o.popup.top + 'px';
      popElem.style.width = o.popup.wt + 'px';
      popElem.style.height = o.popup.ht + 'px';
      popElem.src = url;
      // Add the image source url
      this._popupElement.appendChild(popElem);
      popElem.addEventListener('mouseover', (e) => {
        e.stopPropagation();
        e.preventDefault();
        return false;
      });
    }
    catch (ex) {
      console.log('%c PreviewPopup error', 'color:red;font-size:10pt', ex);
    }
    return document.createElement('img');
  }
}
_a = PreviewPopup;
/** showPopup
*
*  applies the src attribute to the image element in the popup
*
* @param imageSrcUrl  = valid url for image
*/
PreviewPopup.show = (reportId, containerElement, clickY, ratioW2H, imageSrcUrl) => {
  if (containerElement && clickY && imageSrcUrl && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.U.hasText(imageSrcUrl)) {
    if (reportId == _a._reportId) {
      _a._resetTimer();
    }
    else {
      _a.hidePopup();
      if (!_a.timeoutSeconds) {
        _a.timeoutSeconds = 6;
      }
      _a._container = containerElement;
      _a._reportId = reportId;
      _a._generatePopup(clickY, ratioW2H, imageSrcUrl);
      _a._startTimer();
    }
  }
};
PreviewPopup._rightPad = 60;

const arcgisInfographicTreeCss = ":host{display:block}::slotted([slot=\"children\"]){width:100%}.reportList{font-weight:200}.reportItems{font-weight:200;margin-inline-end:0.25rem}.report-item-buttons{position:relative;width:23px;height:28px}.report-item-preview{position:absolute;top:5px;width:22px;height:22px}.report-item-dots{position:absolute;top:7px;left:34px;width:22px;height:22px}.reportTree{padding-bottom:2px}.infographic-tree-busy{position:absolute;top:0;left:0;width:100%;height:100%;background:url(./assets/largeBusy.gif);background-repeat:no-repeat;background-position:center;z-index:999;display:none}calcite-tree-item [selected]{font-weight:bold}.report-item-content{width:100%;height:32px;display:flex}.report-refresh-button{position:absolute;top:8px;right:10px;width:18px;height:18px}.info-tree-search-div{position:absolute;top:3px;left:3px;width:calc(100% - 165px);height:33px;display:flex}.info-tree-search{flex:1 1 0%;width:calc(100% - 29px);height:24px;float:left}.info-tree-icon{position:relative;top:4px;left:2px;width:24px;height:26px;float:right;transform:scale(0.6);background-repeat:no-repeat}.info-tree-sort{position:absolute;top:3px;left:calc(100% - 148px);width:144px;height:32px;z-index:6}.info-tree-list{position:absolute;top:36px;left:3px;height:calc(100% - 40px);width:calc(100% - 6px)}.report-item-text{position:relative;top:7px;flex:1 1 0%;text-align:left;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;font-weight:200}.report-item-popover{width:auto;height:auto;min-width:300px;min-height:200px;background-color:transparent}.report-item-popover-content{min-height:32px;line-height:200px;text-align:right}.report-item-default-popover{min-width:160px;padding:3px;height:42px}.tree-container{position:absolute;width:calc(100% - 12px);height:calc(100% - 18px);overflow-x:hidden;overflow-y:scroll}.thumbnail-preview{position:absolute;top:0;right:0;max-width:300px;max-height:200px;background-color:transparent;border:none;z-index:6;opacity:1;object-fit:cover}.report-item-popover-not-found{position:absolute;top:4px;right:41px;min-width:160px;height:32px !important;line-height:24px !important}";

const ArcgisInfographicTree = class {
  constructor(hostRef) {
    (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.reportSelected = (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "reportSelected", 7);
    this._idPrefix = 'arcgis-infographic-tree-';
    this._idPrefixBusy = 'arcgis-infographic-tree-busy-';
    this._busyIdPrefix = 'ig-tree-busy-';
    this._containerPrefix = 'ait-container-';
    this._elementIds = {}; // list, search, sort
    this._idListPrefix = 'ig-tree-list-';
    this._idSearchPrefix = 'ig-tree-search-';
    this._idSortPrefix = 'ig-tree-sort-';
    this._idPrefixReports = 'selector-popover-reports-';
    this._imgOffset = 1;
    this._dbg = false;
    this.stSourceCountry = 'US';
    this.stMultipleChoice = false;
    this.stSortType = 'newest';
    // Internal use only --------------------------------
    this._isInitialized = false;
    this.openPopoverId = null;
    this.baseConfig = new _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.a('tree', this, this.onUpdateUI);
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.announceVersion();
    this._instanceId = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.E.generateId(this._idPrefix).id;
    this._busyId = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.E.generateId(this._busyIdPrefix).id;
    this._infographics = {
      MyInfographics: {
        dataId: 2,
        tag: 'report-my-infographics',
        data: undefined,
      },
      EsriInfographics: {
        dataId: 3,
        tag: 'report-esri-infographics',
        data: undefined,
      },
      SharedInfographics: {
        dataId: 4,
        tag: 'report-shared-infographics',
        data: undefined,
      },
      GalleryInfographics: {
        dataId: 5,
        tag: 'report-gallery-infographics',
        data: undefined,
      }
    };
    this.langCode = 'en-us';
    this.sourceCountry = 'US';
    this.stMultipleChoice = false;
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.B._initialize(this.langCode);
  }
  //
  // Update Props/States and base config when the component config changes
  onConfigChange(newConfig, oldConfig) {
    if (!newConfig || typeof newConfig != 'string') {
      return;
    }
    if (this.baseConfig && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.hasText(newConfig)) {
      const newCfg = JSON.parse(newConfig);
      const oldCfg = (oldConfig && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.hasText(oldConfig)) ? JSON.parse(oldConfig) : null;
      this.baseConfig.updateConfig(newCfg, oldCfg);
      // Filter out reports not checked
      //
      // Handle reportList where items are unchecked and we dont want to show them
      if (this.baseConfig.config?.reportList) {
        // config reportList filtered to contain only checked reports
        let filtered = {};
        const raw = typeof (this.baseConfig.config.reportList) === 'string' ? JSON.parse(this.baseConfig.config.reportList) : this.baseConfig.config.reportList;
        const keys = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.getKeys(raw);
        if (keys && keys.length > 0) {
          for (let k = 0; k < keys.length; k++) {
            let reports = [];
            const key = keys[k];
            const category = raw[key];
            if (category.length > 0) {
              category.forEach((r) => {
                if (r.isChecked) {
                  reports.push(r);
                }
              });
            }
            if (reports.length > 0) {
              filtered[key] = reports;
            }
          }
        }
        // update our tree list
        this._configFilteredReports = filtered;
      }
      else {
        this._configFilteredReports = undefined;
      }
    }
  }
  // ---------------------------------------------------------------------------------------------------
  // watches
  onEnvChanged() {
    this.stEnv = this.env;
    _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__.E.setEnvironment(this.env);
    if (this.baseConfig) {
      // updates config and sub-component configs
      this.baseConfig.updateConfig({ env: this.env }, null);
    }
  }
  onLangCodeChanged() {
    this.stLangCode = this.langCode;
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.B._initialize(this.stLangCode);
    if (this.baseConfig) {
      // updates config and sub-component configs
      this.baseConfig.updateConfig({ langCode: this.langCode }, null);
    }
  }
  onSourceCountryChanged() {
    this.stSourceCountry = this.sourceCountry;
    if (this.baseConfig) {
      // updates config and sub-component configs
      this.baseConfig.updateConfig({ sourceCountry: this.sourceCountry }, null);
    }
    // Clear cached reports when country changes
    this._configFilteredReports = undefined;
    this._cachedReports = undefined;
    this.stReportList = undefined;
  }
  onTokenChanged() {
    this.stToken = this.token;
    if (this.baseConfig) {
      // updates config and sub-component configs
      this.baseConfig.updateConfig({ token: this.token }, null);
    }
    if (this.username && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.hasText(this.username) && this.token && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.hasText(this.token)) {
      (0,_arcgisReports_a1dc26aa_js__WEBPACK_IMPORTED_MODULE_3__.s)(this.username, this.token); // set the ba-reports token
    }
  }
  onUsernameChanged() {
    this.stUsername = this.username;
    if (this.baseConfig) {
      // updates config and sub-component configs
      this.baseConfig.updateConfig({ username: this.username }, null);
    }
    if (this.username && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.hasText(this.username) && this.token && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.hasText(this.token)) {
      (0,_arcgisReports_a1dc26aa_js__WEBPACK_IMPORTED_MODULE_3__.s)(this.username, this.token); // set the ba-reports token
    }
  }
  onSelectedReportChanged() {
    this.stSelectedReportId = this.selectedReportId;
  }
  onReportListChanged() {
    this.stReportList = Object.keys(this.reportList).length ? JSON.parse(this.reportList) : {};
  }
  onThemeChanged() {
    this.stTheme = this.theme;
    if (this.baseConfig) {
      this.baseConfig.setTheme(this.theme);
    }
  }
  onPortalUrlChanged() {
    // Set if PortalUrl was optionally passed in
    if (this.portalUrl) {
      _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__.E.setPortalUrl(this.portalUrl);
    }
  }
  onGeoenrichmentUrlChanged() {
    this.stGeoenrichmentUrl = this.geoenrichmentUrl;
    if (this.baseConfig) {
      // updates config and sub-component configs
      this.baseConfig.updateConfig({ geoenrichmentUrl: this.geoenrichmentUrl }, null);
    }
    // Set if GeoenrichmentUrl was optionally passed in
    if (this.geoenrichmentUrl) {
      _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__.E.setGeoenrichmentUrl(this.geoenrichmentUrl);
    }
  }
  async updateLayout() {
    this.adjustTreeItemsWidth();
  }
  async getConfig() {
    const myCfg = this.baseConfig;
    return myCfg;
  }
  async initialize(username, token, env, country, language, reportList) {
    const self = this;
    self.token = token;
    self.username = username;
    self.sourceCountry = country;
    self.langCode = language;
    self.env = env;
    self.stReportList = Object.keys(reportList).length ? JSON.parse(reportList) : {};
    _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__.E.setEnvironment(self.env);
    // Set if GeoenrichmentUrl was optionally passed in
    if (self.geoenrichmentUrl) {
      _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__.E.setGeoenrichmentUrl(self.geoenrichmentUrl);
    }
    // Set if PortalUrl was optionally passed in
    if (self.portalUrl) {
      _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__.E.setPortalUrl(self.portalUrl);
    }
    (0,_arcgisReports_a1dc26aa_js__WEBPACK_IMPORTED_MODULE_3__.s)(username, token); // set the ba-reports token
    try {
      let userReports, publicReports, sharedReports, galleryReports;
      const infos = await (0,_arcgisReports_a1dc26aa_js__WEBPACK_IMPORTED_MODULE_3__.g)(country, false);
      if (Object.keys(self.stReportList).length) {
        userReports = self.stReportList.user;
        publicReports = self.stReportList.public;
        sharedReports = self.stReportList.shared;
      }
      else {
        userReports = infos.user.map(report => { return { ...report, isChecked: true }; });
        publicReports = infos.public.map(report => { return { ...report, isChecked: true }; });
        sharedReports = infos.shared.map(report => { return { ...report, isChecked: true }; });
        galleryReports = infos.gallery.map(report => { return { ...report, isChecked: false }; });
        self.stReportList = { user: userReports, public: publicReports, shared: sharedReports, gallery: galleryReports };
      }
      if (infos) {
        self._infographics.MyInfographics.data = userReports;
        self._infographics.EsriInfographics.data = publicReports;
        self._infographics.SharedInfographics.data = sharedReports;
        self._infographics.GalleryInfographics.data = galleryReports;
      }
      else {
        self._infographics.MyInfographics.data = undefined;
        self._infographics.EsriInfographics.data = undefined;
        self._infographics.SharedInfographics.data = undefined;
        self._infographics.GalleryInfographics.data = undefined;
      }
      this._isInitialized = true;
      const content = ((0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("calcite-tree", { scale: "m", selectionMode: "single" }, self.renderList('EsriInfographics', true), self.renderList('MyInfographics', this.isOnlyConfiguredReportList('MyInfographics')), self.renderList('SharedInfographics', this.isOnlyConfiguredReportList('SharedInfographics')), self.renderList('GalleryInfographics', this.isOnlyConfiguredReportList('GalleryInfographics'))));
      self._content = content;
      self.showBusy.call(self, false);
    }
    catch (ex) {
      _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.a.Log('arcgis-infographic-tree request for esri reports failed', ex);
    }
  }
  setLocaleStrings() {
  }
  showBusy(flag) {
    const b = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.queryElementById.call(this, this._busyId);
    if (b) {
      if (flag) {
        b.style.display = 'block';
      }
      else {
        b.style.display = 'none';
      }
    }
  }
  async setColorTheme(name) {
    if (name && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.hasText(name) && this.el) {
      this.stColorTheme = name.trim().toLowerCase();
      const n = name.trim().toLowerCase();
      if (n === 'light') {
        this.el.style.setProperty('--calcite-ui-brand', '#007ac2');
        this.el.style.setProperty('--calcite-ui-brand-hover', '#00619b');
        this.el.style.setProperty('--calcite-ui-brand-press', '#004874');
        this.el.style.setProperty('--calcite-ui-background', '#f8f8f8');
        this.el.style.setProperty('--calcite-ui-foreground-1', '#ffffff');
        this.el.style.setProperty('--calcite-ui-foreground-2', '#f3f3f3');
        this.el.style.setProperty('--calcite-ui-foreground-3', '#eaeaea');
        this.el.style.setProperty('--calcite-ui-text-1', '#151515');
        this.el.style.setProperty('--calcite-ui-text-2', '#4a4a4a');
        this.el.style.setProperty('--calcite-ui-text-3', '#6a6a6a');
        this.el.style.setProperty('--calcite-ui-text-inverse', '#ffffff');
        this.el.style.setProperty('--calcite-ui-text-link', '#00619b');
        this.el.style.setProperty('--calcite-ui-border-1', '#cacaca');
        this.el.style.setProperty('--calcite-ui-border-2', '#d4d4d4');
        this.el.style.setProperty('--calcite-ui-border-3', '#dfdfdf');
        this.el.style.setProperty('--calcite-ui-border-input', '#949494');
        this.el.style.setProperty('--calcite-ui-info', '#00619b');
        this.el.style.setProperty('--calcite-ui-success', '#35ac46');
        this.el.style.setProperty('--calcite-tree-padding-y', '0');
      }
      else if (n === 'dark') {
        this.el.style.setProperty('--calcite-ui-brand', '#009af2');
        this.el.style.setProperty('--calcite-ui-brand-hover', '#007ac2');
        this.el.style.setProperty('--calcite-ui-brand-press', '#00619b');
        this.el.style.setProperty('--calcite-ui-background', '#353535');
        this.el.style.setProperty('--calcite-ui-foreground-1', '#2b2b2b');
        this.el.style.setProperty('--calcite-ui-foreground-2', '#202020');
        this.el.style.setProperty('--calcite-ui-foreground-3', '#151515');
        this.el.style.setProperty('--calcite-ui-text-1', '#ffffff');
        this.el.style.setProperty('--calcite-ui-text-2', '#bfbfbf');
        this.el.style.setProperty('--calcite-ui-text-3', '#9f9f9f');
        this.el.style.setProperty('--calcite-ui-text-inverse', '#151515');
        this.el.style.setProperty('--calcite-ui-text-link', '#00a0ff');
        this.el.style.setProperty('--calcite-ui-border-1', '#555555');
        this.el.style.setProperty('--calcite-ui-border-2', '#4a4a4a');
        this.el.style.setProperty('--calcite-ui-border-3', '#404040');
        this.el.style.setProperty('--calcite-ui-border-input', '#757575');
        this.el.style.setProperty('--calcite-ui-info', '#00a0ff');
        this.el.style.setProperty('--calcite-ui-success', '#36da43');
      }
    }
  }
  _loadInstances() {
    if (!this._instanceId)
      this._instanceId = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.E.generateId(this._idPrefix).id;
    if (!this._busyId)
      this._busyId = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.E.generateId(this._idPrefixBusy).id;
    if (!this._elementIds.list)
      this._elementIds.list = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.E.generateId(this._idListPrefix).id;
    if (!this._elementIds.search)
      this._elementIds.search = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.E.generateId(this._idSearchPrefix).id;
    if (!this._elementIds.sort)
      this._elementIds.sort = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.E.generateId(this._idSortPrefix).id;
  }
  // BaseUtil config-changed render callback
  onUpdateUI() {
  }
  onClickTreeItem(e, data) {
    PreviewPopup.hidePopup();
    this.reportSelected.emit({ report: data });
    e.stopPropagation();
    e.preventDefault();
    return false;
  }
  applySort(list) {
    if (list && list.length > 0) {
      const sortedList = [...list];
      let sortType = this.stSortType || 'newest';
      const elem = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.queryElementById.call(this, _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.fixId(this._elementIds.sort));
      if (typeof elem != 'undefined') {
        sortType = elem.value;
      }
      if (sortType) {
        switch (sortType) {
          case ('oldest'): {
            sortedList.sort((a, b) => {
              let da = a.date;
              let db = b.date;
              return da - db;
            });
            break;
          }
          case ('ascending'): {
            sortedList.sort((a, b) => {
              let s1 = a.title;
              let s2 = b.title;
              if (s1 < s2) {
                return -1;
              }
              if (s1 > s2) {
                return 1;
              }
              return 0;
            });
            break;
          }
          case ('descending'): {
            sortedList.sort((a, b) => {
              let s1 = a.title;
              let s2 = b.title;
              if (s1 > s2) {
                return -1;
              }
              if (s1 < s2) {
                return 1;
              }
              return 0;
            });
            break;
          }
          default: {
            // newest
            sortedList.sort((a, b) => {
              let da = a.date;
              let db = b.date;
              return db - da;
            });
            break;
          }
        }
      }
      return sortedList;
    }
    return list;
  }
  // Returns search-filtered list that is also sorted
  getFilteredReportList(name) {
    const tree = this;
    const searchFilteredList = [];
    const listNames = { 'MyInfographics': 'user', 'EsriInfographics': 'public', 'SharedInfographics': 'shared', 'GalleryInfographics': 'gallery' };
    const objName = listNames[name];
    const list = this._configFilteredReports || this.stReportList || this._cachedReports;
    const defaultList = list[objName];
    const searchInput = tree.el.querySelector('#' + tree._elementIds.search);
    if (searchInput) {
      const query = searchInput.value.trim().toLowerCase();
      if (query && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.hasText(query)) {
        if (list && list[objName] && list[objName].length > 0) {
          list[objName].forEach((item) => {
            const n = item.title;
            if (n && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.hasText(n) && n.toLowerCase().includes(query)) {
              searchFilteredList.push(item);
            }
          });
        }
      }
      else {
        return this.applySort(defaultList);
      }
    }
    else {
      return this.applySort(defaultList);
    }
    return this.applySort(searchFilteredList);
  }
  isOnlyConfiguredReportList(name) {
    const listNames = { 'MyInfographics': 'user', 'EsriInfographics': 'public', 'SharedInfographics': 'shared', 'GalleryInfographics': 'gallery' };
    const objName = listNames[name];
    const list = this._configFilteredReports || this.stReportList || this._cachedReports;
    const defaultList = list[objName];
    // If list is not configured, return false
    if (!defaultList)
      return false;
    return Object.keys(list).length === 1;
  }
  onUpdateThumbnailPopoverSize() {
    if (!this.el) {
      return;
    }
    let fullContentHt = 100;
    const minContentHt = 100;
    const minPopoverWt = 200;
    const maxPopoverWt = 735;
    const vpad = 36;
    const hpad = 16;
    const clientHt = document.documentElement.clientHeight;
    const clientWt = document.documentElement.clientWidth;
    const htAbove = this.el.offsetTop;
    const htBelow = clientHt - (this.el.offsetTop + this.el.offsetHeight) + window.scrollY;
    let fullContentWt = clientWt / 2;
    const rightSpace = clientWt - this.el.offsetLeft + window.scrollX;
    if (htBelow < minContentHt && htBelow < htAbove) {
      // popover max height = ht above if that space is larger than below
      fullContentHt = htAbove - vpad;
    }
    else {
      fullContentHt = htBelow - vpad;
    }
    fullContentWt = Math.max(minPopoverWt, Math.min(rightSpace - hpad, maxPopoverWt));
    const contentElem = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.queryElementById.call(this.el, this._elementIds.content);
    if (contentElem) {
      if (contentElem) {
        contentElem.style.height = fullContentHt + 'px';
      }
    }
    const popoverElem = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.queryElementById.call(this.el, this._elementIds.popover);
    if (popoverElem) {
      popoverElem.style.width = fullContentWt + 'px';
      // popoverElem.style.left = this.el.offsetLeft + 'px'
    }
    // notify tree that our size may have changed
    const tree = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.queryElementById.call(this.el, this._elementIds.reports);
    if (tree) {
      tree.updateLayout();
    }
  }
  handleMouseOver(ev, reportId) {
    const y = ev.clientY;
    const id = reportId;
    this._debounce2(() => {
      PreviewPopup.hidePopup();
      const imgData = ArcgisInfographicTree._getThumbnailUrl(id);
      if (imgData && imgData.isOk) {
        const popover = this.el.closest('calcite-popover');
        if (popover) {
          const rr = popover.getBoundingClientRect();
          const clickY = y - rr.top;
          PreviewPopup.show(id, popover, clickY, imgData.ratio, imgData.url);
        }
      }
    }, 200);
    return true;
  }
  handleMouseOut() {
    this._debounce2(() => {
      PreviewPopup.hidePopup();
    }, 300);
  }
  static _setThumbnailIndex(id, ratioW2H, url, isValid) {
    ArcgisInfographicTree.ThumbnailIndex[id] = { url: url, ratio: ratioW2H, isOk: isValid };
  }
  static _getThumbnailUrl(id) {
    return ArcgisInfographicTree.ThumbnailIndex[id];
  }
  renderList(name, expanded) {
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.a.Log(' TREE renderList', name);
    const self = this;
    const tags = {
      'MyInfographics': 'report-my-infographics',
      'EsriInfographics': 'report-esri-infographics',
      'SharedInfographics': 'report-shared-infographics',
      'GalleryInfographics': 'report-gallery-infographics',
      'NoPreviewAvailable': 'preview-not-available'
    };
    function _getImgId() {
      return self._instanceId + '-' + 'img' + self._imgOffset++;
    }
    // this function operates asynchronously to check image urls.  The results from requesting
    // an image are added to the Thumbnail Index for future reference
    function _cacheThumbnailUrlAndData(imgId, id, popoverId, prevId, name) {
      if (_ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.hasText(imgId) && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.hasText(id) && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.hasText(popoverId)) {
        _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.a.Log('TREE _getThumbnail');
        // const imgElementId = imgId
        const thumbnailId = id;
        const popId = popoverId;
        const treePrevId = prevId;
        // Adds tooltips to preview items that do not have a valid thumbnail
        function _addNoPreviewTooltip(itemId) {
          const pop = self.el.querySelector(_ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.fixId(popId));
          if (pop) {
            pop.remove();
          }
          const prevElem = self.el.querySelector(_ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.fixId(itemId));
          if (prevElem) {
            // add no-preview tooltip
            const tip = document.createElement('calcite-tooltip');
            tip.setAttribute('reference-element', itemId);
            tip.style.minWidth = '160px';
            tip.style.left = '-40px';
            const sp = document.createElement('span');
            sp.innerText = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.B.i18n(tags.NoPreviewAvailable);
            tip.appendChild(sp);
            prevElem.appendChild(tip);
          }
        }
        function _useAGOForThumbnail(name) {
          if (name !== "EsriInfographics")
            return false;
          if (self.portalOnlineGEProxy && !_GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__.E.isAGOPortal(_GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__.E.getPortalBase()))
            return true;
          return false;
        }
        // use pre-cached info if possible
        let fetchItem = true;
        const imgData = ArcgisInfographicTree._getThumbnailUrl(id);
        if (imgData) {
          if (imgData.isOk || imgData.isOk == false) {
            // already have cached results
            fetchItem = false;
          }
        }
        // check server if the thumbnail can be used
        if (fetchItem) {
          // determine if the image url is valid or not by creating an image in memory
          // const p = new Promise((resolve, reject) => {
          let url = '';
          // If we have a GE Online proxy setup and are connected to a portal (not AGO), we need to use www.arcgis.com for the Esri Infographics thumbnails
          if (_useAGOForThumbnail(name)) {
            url = 'https://www.arcgis.com/sharing/rest/content/items/' + thumbnailId + '/resources/thumbnail.png';
          }
          else {
            url = _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_2__.E.getPortalBase() + '/sharing/rest/content/items/' + thumbnailId + '/resources/thumbnail.png?token=' + self.token;
          }
          function urlIsValid(pid, u, rid, wt, ht) {
            // const w: number = imgInstance.width
            // const h: number = imgInstance.height
            // save our results into the thumbnail index to avoid this step later
            ArcgisInfographicTree._setThumbnailIndex(rid, (wt / ht), u, true);
            // remove the no-preview tooltip
            const prevElem = self.el.querySelector(_ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.fixId(pid));
            if (prevElem) {
              const oldTip = prevElem.querySelector('calcite-tooltip');
              if (oldTip) {
                oldTip.remove();
              }
            }
          }
          function urlHadError(pid, u, rid) {
            ArcgisInfographicTree._setThumbnailIndex(rid, 1, u, false);
            _addNoPreviewTooltip(pid);
          }
          try {
            const img = new Image();
            img.onload = function () {
              const imgInst = this;
              const w = imgInst.width;
              const h = imgInst.height;
              urlIsValid(treePrevId, url, thumbnailId, w, h);
            };
            img.onerror = () => { urlHadError(treePrevId, url, thumbnailId); };
            img.src = url;
          }
          catch (ex) {
            urlHadError(treePrevId, url, thumbnailId);
          }
          // })
        }
      }
    }
    const outerStyle = {
      'position': 'relative',
      'width': '100%',
      'height': '100%'
    };
    // const noPreviewStyle = {
    //   'position': 'absolute',
    //   'top': '0',
    //   'left': '0',
    //   'width': '100%',
    //   'height': '100%',
    //   'zIndex': '5'
    // }
    // const iconName = 'file-text'
    // function getThumbnailStyle(id: string) {
    //   return {
    //     'position': 'absolute',
    //     'top': '0',
    //     'left': '0',
    //     'width': '100%',
    //     'height': '100%',
    //     'zIndex': '6',
    //     'backgroundImage': 'url(' + _getThumbnail(id) + ')',
    //     'backgroundSize': 'auto'
    //   }
    // }
    // const thumbnailDiv = {
    //   'width':'100%',
    //   'height':'100%',
    //   'backgroundImage' : 'url(https://www.arcgis.com/sharing/rest/content/items/697887220b9f47b8a22383a1acd4f203/resources/thumbnail.png)',
    //   'backgroundSize' : 'contain'
    // }
    // const reports = self._infographics[name].data
    const reports = self.getFilteredReportList(name);
    if (reports && reports.length > 0) {
      // let arr: any[] = reports.map((v) => { return {id: v.id, name: v.title}})
      let displayName = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.B.i18n(tags[name]);
      if (displayName === '??') {
        _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.a.Error('Missing Report Category name', tags[name]);
        displayName = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.B.i18n(tags[name]); // without the option
      }
      const filteredReportList = this.getFilteredReportList(name);
      _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.a.Log('TREE renderList[' + name + '] filtered=', filteredReportList);
      if (!filteredReportList) {
        return;
      }
      if (_ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.isDef(filteredReportList)) {
        let showReportCat = false;
        filteredReportList.forEach((element) => {
          if (element.isChecked) {
            showReportCat = true;
          }
        });
        // create a tree node for this level with all records
        if (showReportCat) {
          return ((0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { style: outerStyle }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("calcite-tree-item", { class: "reportList", slot: "children", expanded: expanded }, displayName, reports.length > 0 && ((0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("calcite-tree", { slot: "children", class: "reportTree" }, reports.map(report => {
            if (filteredReportList.some(obj => { return obj.id === report.id && obj.isChecked === true; })) {
              const itemId = 'tree-item-' + report.id;
              const prevId = itemId + '-prev';
              const thumbnailPopId = itemId + '-pop';
              const imgId = _getImgId();
              _cacheThumbnailUrlAndData(imgId, report.id, thumbnailPopId, prevId, name);
              return ((0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { class: "report-tree-dropdown" }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("calcite-tree-item", { id: itemId, selected: report.id === self.stSelectedReportId ? true : false, class: "reportItems", data: report.id, onClick: (e) => self.onClickTreeItem(e, { thumbnail: thumbnailPopId, id: report.id, name: report.title }) }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { class: "report-item-content" }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { class: "report-item-text" }, report.title), (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { class: "report-item-buttons" }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", null, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { id: prevId, class: "report-item-preview", onMouseOver: (e) => this.handleMouseOver(e, report.id), onMouseOut: () => this.handleMouseOut() }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("svg", { "aria-hidden": "true", class: "svg", fill: "currentColor", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("path", { d: "M17 16h-5.525a5.95 5.95 0 0 0-.172-1H17zm2-7h-9v1h9zm0 3h-9v.544q.193.22.364.456H19zm3 8H11.818l-.913-.913c.014-.028.023-.059.037-.087H21V7h-4V3H8v8.053a5.945 5.945 0 0 0-1-.356V2h11.4L22 5.6zM21 5.69L18.31 3H18v3h3zM8.926 19.23l3.085 3.084a.476.476 0 0 1 0 .674l-.017.017a.476.476 0 0 1-.673 0L8.237 19.92A4.383 4.383 0 1 1 9.9 16.5a4.358 4.358 0 0 1-.974 2.73zM5.5 19.9a3.4 3.4 0 1 0-3.4-3.4 3.404 3.404 0 0 0 3.4 3.4z" })))))))));
            }
          }))))));
        }
        else {
          return '';
        }
      }
      else {
        return '';
      }
    }
    else {
      return '';
    }
  }
  async refreshInfographicList() {
    const self = this;
    let userReports, publicReports, sharedReports, galleryReports;
    _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.a.Log('TREE refreshInfographicList', self.stReportList);
    const list = this._configFilteredReports || this.stReportList || this._cachedReports;
    // If no reports configuration is specified, default to ONLY Esri Reports (public)
    if (this.baseConfig.config?.reportList) {
      const raw = typeof (this.baseConfig.config.reportList) === 'string' ? JSON.parse(this.baseConfig.config.reportList) : this.baseConfig.config.reportList;
      const keys = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.getKeys(raw);
      if (keys?.length == 0) {
        delete list?.user;
        delete list?.shared;
        delete list?.gallery;
      }
    }
    let infos;
    if (list && Object.keys(list).length) {
      userReports = list.user;
      publicReports = list.public;
      sharedReports = list.shared;
      galleryReports = list.gallery;
    }
    else {
      // fetch reports from server
      self._isInitialized = false;
      infos = await (0,_arcgisReports_a1dc26aa_js__WEBPACK_IMPORTED_MODULE_3__.g)(self.sourceCountry, false);
      userReports = infos.user.map(report => { return { ...report, isChecked: true }; });
      publicReports = infos.public.map(report => { return { ...report, isChecked: true }; });
      sharedReports = infos.shared.map(report => { return { ...report, isChecked: true }; });
      galleryReports = infos.gallery.map(report => { return { ...report, isChecked: true }; });
      this._configFilteredReports = undefined;
      // do not update stReportList here or we have endless render loop
      self._cachedReports = { user: userReports, public: publicReports, shared: sharedReports, gallery: galleryReports };
      self._isInitialized = true;
    }
    if (list || infos) {
      self._infographics.MyInfographics.data = userReports;
      self._infographics.EsriInfographics.data = publicReports;
      self._infographics.SharedInfographics.data = sharedReports;
      self._infographics.GalleryInfographics.data = galleryReports;
    }
    else {
      self._infographics.MyInfographics.data = undefined;
      self._infographics.EsriInfographics.data = undefined;
      self._infographics.SharedInfographics.data = undefined;
      self._infographics.GalleryInfographics.data = undefined;
    }
    const content = ((0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("calcite-tree", { scale: "m", selectionMode: "single" }, self.renderList('EsriInfographics', true), self.renderList('MyInfographics', this.isOnlyConfiguredReportList('MyInfographics')), self.renderList('SharedInfographics', this.isOnlyConfiguredReportList('SharedInfographics')), self.renderList('GalleryInfographics', this.isOnlyConfiguredReportList('GalleryInfographics'))));
    self._content = content;
    self.adjustTreeItemsWidth();
  }
  async getLocalFilteredInfographicsList() {
  }
  // Stencil lifecycle - called once after component is first connected to the DOM
  async componentWillLoad() {
    const self = this;
    if (self.env) {
      self.onEnvChanged();
    }
    if (self.token) {
      self.onTokenChanged();
    }
    if (self.username) {
      self.onUsernameChanged();
    }
    if (self.selectedReportId) {
      self.onSelectedReportChanged();
    }
    if (self.reportList) {
      self.onReportListChanged();
    }
    if (self.langCode) {
      self.onLangCodeChanged();
    }
    if (self.geoenrichmentUrl) {
      self.onGeoenrichmentUrlChanged();
    }
    if (self.sourceCountry) {
      self.onSourceCountryChanged();
    }
    if (self.portalUrl) {
      self.onPortalUrlChanged();
    }
    if (self.config) {
      self.onConfigChange(self.config, '');
    }
    if (this.theme) {
      this.baseConfig.setTheme(this.theme);
    }
    else {
      this.baseConfig.setTheme('light');
    }
    self._loadInstances();
    try {
      await self.refreshInfographicList();
      self._isInitialized = true;
      // TODO: at some point we should add ba-accordion as a subcomponent
      // when it starts using baseConfig
    }
    catch (ex) {
      _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.a.Error('arcgis-infographic-tree request for esri reports failed', ex);
    }
  }
  // Stencil lifecycle - called just after component updates, but not called during first render()
  componentDidUpdate() {
    const self = this;
    self.showBusy.call(this, false);
    if (self.baseConfig) {
      self.baseConfig.onComponentHasRendered();
    }
    if (self._cachedReports) {
      self.stReportList = self._cachedReports;
      // cached reports only updates in refreshInfographicList() and resets here after render
      self._cachedReports = undefined;
    }
  }
  // Stencil lifecycle - called once after component is fully loaded and 1st render occurred
  componentDidLoad() {
    const self = this;
    self._loadInstances();
    self.showBusy.call(self, false);
    const searchInput = this.el.querySelector('#' + this._elementIds.search);
    function _onResize() {
      self.adjustTreeItemsWidth();
    }
    window.removeEventListener('resize', _onResize);
    window.addEventListener('resize', _onResize);
    self.adjustTreeItemsWidth();
    const onClickItemMakeDefault = (e) => {
      const item = e.currentTarget.closest('calcite-tree-item');
      if (item) {
        const itemId = item.id;
        const reportId = itemId.substring(10);
        if (_ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.hasText(reportId)) {
          self.selectedReportId = reportId;
          self.onSelectedReportChanged();
          let n = '';
          const textElem = item.querySelector('div.report-item-text');
          if (textElem) {
            n = textElem.innerText;
          }
          self.onClickTreeItem(e, { id: reportId, name: n });
        }
      }
    };
    // item 'make default' click handler
    const items = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.queryElementAll.call(self, 'div.default-popover-content');
    if (!items || items.length > 0) {
      for (let ii = 0; ii < items.length; ii++) {
        items[ii].removeEventListener('click', onClickItemMakeDefault);
        items[ii].addEventListener('click', onClickItemMakeDefault);
      }
    }
    // called when the tree search text changes
    const onSearchQueryChanged = () => {
      self._debounce2(() => {
        //self.refreshInfographicList.call(self)
        self.stTimestamp = new Date().getTime();
      }, 500);
    };
    const sortElem = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.queryElementById.call(self, _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.fixId(self._elementIds.sort));
    if (sortElem) {
      sortElem.addEventListener('calciteSelectChange', () => {
        self.stSortType = sortElem.value;
        //self.refreshInfographicList()
      });
    }
    if (searchInput) {
      searchInput.removeEventListener('input', onSearchQueryChanged);
      searchInput.addEventListener('input', onSearchQueryChanged);
      searchInput.addEventListener('calciteInputChange', onSearchQueryChanged);
    }
    self.adjustTreeItemsWidth();
  }
  /**
   * Filters out multiple rapid events of the same type.  The callback
   * function will be called if no new events have happened during the
   * 'wait' time.
   * @param callback - your function to call when the events have settled
   * @param wait     - milliseconds delay (ex: 250)
   */
  _debounce2(callback, wait) {
    const self = this;
    const delayedCall = function () {
      self._debounceTimer = null;
      callback.apply(self);
    };
    // everytime _debounce2 is called we kill the previous timer
    if (self._debounceTimer)
      clearTimeout(self._debounceTimer);
    self._debounceTimer = setTimeout(delayedCall, wait);
  }
  adjustTreeItemsWidth() {
    if (this.el) {
      const items = this.el.querySelectorAll('div.report-item-content');
      if (!items || items.length <= 0) {
        return;
      }
      const p = items[0].closest('.reportList');
      if (p) {
        const wt = p.offsetWidth;
        items.forEach((item) => {
          item.style.width = (wt - 60) + 'px';
        });
      }
    }
    // adjust infographic preview size
    const pop = this.el.parentElement?.parentElement;
    const sWt = pop?.style?.width;
    if (sWt && _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.A.hasText(sWt)) {
      const wt = parseInt(sWt);
      if (!Number.isNaN(wt)) {
        const adjustedWidth = wt * 0.9;
        if (adjustedWidth > 300) {
          // apply new width
          const pops = this.el.querySelectorAll('img.thumbnail-preview');
          if (pops) {
            pops.forEach((t) => {
              t.style.maxWidth = adjustedWidth + 'px';
              t.style.maxHeight = (adjustedWidth * 0.66) + 'px';
            });
          }
        }
      }
    }
  }
  render() {
    const outerDivStyle = {
      'position': 'absolute',
      'width': 'calc(100% - 12px)',
      'height': 'calc(100% - 8px)',
      'overflow-x': 'hidden',
      'overflow-y': 'scroll'
    };
    const placeText = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.B.i18n('search-infos-by-name');
    const sortNewest = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.B.i18n('date-sort-newest');
    const sortOldest = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.B.i18n('date-sort-oldest');
    const nameAsc = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.B.i18n('name-sort-asc');
    const nameDesc = _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_0__.B.i18n('name-sort-desc');
    this.refreshInfographicList();
    // Render just the outer div and busy spinner until the component
    // initialize() function is called - and the infographic data is
    // received.  The content is added in the initialize() function.
    return ((0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { id: this._instanceId, style: outerDivStyle, class: "arcgis-tree-outer" }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { id: this._busyId, class: "infographic-tree-busy" }), (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { class: "info-tree-search-div" }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("calcite-input", { clearable: "true", id: this._elementIds.search, placeholder: placeText, class: "info-tree-search" }), (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { id: this._elementIds.icon, class: "info-tree-icon" }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("calcite-icon", { scale: 'l', icon: 'search' }))), (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("calcite-select", { id: this._elementIds.sort, class: "info-tree-sort" }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("calcite-option", { value: "newest" }, sortNewest), (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("calcite-option", { value: "oldest" }, sortOldest), (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("calcite-option", { value: "ascending" }, nameAsc), (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("calcite-option", { value: "descending" }, nameDesc)), (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", { id: this._elementIds.list, class: "info-tree-list" }, (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", null, this._content))));
  }
  get el() { return (0,_index_4e647411_js__WEBPACK_IMPORTED_MODULE_1__.g)(this); }
  static get watchers() { return {
    "config": ["onConfigChange"],
    "env": ["onEnvChanged"],
    "langCode": ["onLangCodeChanged"],
    "sourceCountry": ["onSourceCountryChanged"],
    "token": ["onTokenChanged"],
    "username": ["onUsernameChanged"],
    "selectedReportId": ["onSelectedReportChanged"],
    "reportList": ["onReportListChanged"],
    "theme": ["onThemeChanged"],
    "portalUrl": ["onPortalUrlChanged"],
    "geoenrichmentUrl": ["onGeoenrichmentUrlChanged"]
  }; }
};
ArcgisInfographicTree.ThumbnailIndex = {};
ArcgisInfographicTree.style = arcgisInfographicTreeCss;



//# sourceMappingURL=arcgis-infographic-tree-b71f4b45.js.map

/***/ }),

/***/ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgisReports-a1dc26aa.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/arcgisReports-a1dc26aa.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ getInfographicTemplatesList),
/* harmony export */   s: () => (/* binding */ setToken)
/* harmony export */ });
/* harmony import */ var _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GEClient-1a83a657.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/GEClient-1a83a657.js");
/* harmony import */ var _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ElementIds-f7d257e8.js */ "./extensions/widgets/ba-infographic/node_modules/@arcgis/business-analyst-components/dist/stencil-components/dist/esm/ElementIds-f7d257e8.js");



function setToken(username, token) {
    try {
        if (username != null && username.length > 0) {
            if (token != null && token.length > 0) {
                _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_0__.T.setToken(username, token);
                return _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('ok');
            }
            else {
                return _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('invalid-token');
            }
        }
        else {
            return _ElementIds_f7d257e8_js__WEBPACK_IMPORTED_MODULE_1__.B.i18n('invalid-username');
        }
    }
    catch (ex) {
        return ex;
    }
}
async function getInfographicTemplatesList(countryCode, full = false) {
    return await _GEClient_1a83a657_js__WEBPACK_IMPORTED_MODULE_0__.G.getInfographicTemplatesList(countryCode, full);
}



//# sourceMappingURL=arcgisReports-a1dc26aa.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,