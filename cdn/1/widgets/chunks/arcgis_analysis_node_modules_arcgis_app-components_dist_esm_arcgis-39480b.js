"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-39480b"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-color-slider.entry.js":
/*!************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-color-slider.entry.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_color_slider: () => (/* binding */ ArcgisSmartMappingColorSlider)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./date-79c7d93c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js");
/* harmony import */ var _loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loading-69139907.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _precision_06a73672_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./precision-06a73672.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/precision-06a73672.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./slider-e162e136.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/slider-e162e136.js");
/* harmony import */ var _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./color-d6da0a9a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-d6da0a9a.js");
/* harmony import */ var _compare_ba1292fe_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./compare-ba1292fe.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/compare-ba1292fe.js");
/* harmony import */ var _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./colorSize-ce0ccdeb.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorSize-ce0ccdeb.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */

















const arcgisSmartMappingColorSliderCss = ".slider-box{height:320px}.slider-box .esri-color-slider,.slider-box .esri-classed-color-slider{min-width:200px}.slider-box .esri-color-slider .esri-slider .esri-slider__content,.slider-box .esri-classed-color-slider .esri-slider .esri-slider__content{height:175px}.slider-box .esri-color-slider__histogram-container,.slider-box .esri-classed-color-slider__histogram-container{width:85px}.slider-box .esri-color-slider .esri-slider .esri-slider__label,.slider-box .esri-color-slider .esri-slider .esri-slider__min,.slider-box .esri-color-slider .esri-slider .esri-slider__max,.slider-box .esri-classed-color-slider .esri-slider .esri-slider__label,.slider-box .esri-classed-color-slider .esri-slider .esri-slider__min,.slider-box .esri-classed-color-slider .esri-slider .esri-slider__max{text-decoration:underline}.slider-box .esri-color-slider .esri-slider .esri-slider__label:hover,.slider-box .esri-color-slider .esri-slider .esri-slider__min:hover,.slider-box .esri-color-slider .esri-slider .esri-slider__max:hover,.slider-box .esri-classed-color-slider .esri-slider .esri-slider__label:hover,.slider-box .esri-classed-color-slider .esri-slider .esri-slider__min:hover,.slider-box .esri-classed-color-slider .esri-slider .esri-slider__max:hover{border:1px solid #bbb;background-color:#f3f3f3;text-decoration:none;z-index:1}.slider-box-buttons-front{display:flex}";

const ArcgisSmartMappingColorSlider = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingColorSliderChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingColorSliderChange", 7);
        this.arcgisSmartMappingColorSliderError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingColorSliderError", 7);
        /**
         * Necessary for tracking stops for non-classed sliders,
         * whose values are updated immediately even given incorrect inputs.
         * Classed sliders do not have this issue, but we handle them
         * identically for logical parity.
         */
        this.currentStopValues = [];
        this.currentBreakValues = [];
        this.zigzagClick = false;
        this.styleSheetStatus = "not-loaded";
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.sliderZoomed = false;
        this.cap = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Calls
    //
    //--------------------------------------------------------------------------
    async updateStatistics() {
        var _a;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.statistics = null;
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING;
        this.histogram = null;
        (_a = this.colorSlider) === null || _a === void 0 ? void 0 : _a.destroy();
        this.colorSlider = undefined;
        this.sliderZoomed = false;
        this.getStatistics();
    }
    // -------------------------------------------------------------------
    //
    // Lifecycle
    //
    // -------------------------------------------------------------------
    componentWillLoad() {
        this.getStatistics();
    }
    componentDidLoad() {
        this.flowItemNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow-item");
    }
    // -------------------------------------------------------------------
    //
    //  Render Methods
    //
    // -------------------------------------------------------------------
    render() {
        const { config } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("link", { rel: "stylesheet", href: `${config.jsapiUrl}/themes/light/main.css`, onLoad: () => {
                this.styleSheetStatus = "loaded";
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }, onError: () => {
                this.styleSheetStatus = "failed";
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } }), this.styleSheetStatus === "loaded"
            ? this.renderColorSlider()
            : this.styleSheetStatus === "not-loaded"
                ? this.renderColorSliderLoading()
                : null));
    }
    renderColorSlider() {
        const { statisticsStatus, histogramStatus, sliderZoomed } = this;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        if (statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED ||
            statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.MISSING ||
            (colorVisVar && colorVisVar.stops.length === 1) ||
            (!colorVisVar && renderer.classBreakInfos.length === 1)) {
            if (this.colorSlider) {
                this.colorSlider.destroy();
                this.colorSlider = undefined;
            }
        }
        else if (statisticsStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS ||
            (histogramStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS && !this.colorSlider)) {
            return this.renderColorSliderLoading();
        }
        else {
            const ok = this.prepareColorSlider();
            let disableZoomButton = false;
            if (colorVisVar && !sliderZoomed) {
                const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color");
                const zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(colorVisVar.stops, authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.minSliderValue, authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.maxSliderValue);
                if ((zoomOptions === null || zoomOptions === void 0 ? void 0 : zoomOptions.minMaxSame) ||
                    (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions === null || zoomOptions === void 0 ? void 0 : zoomOptions.min) && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions === null || zoomOptions === void 0 ? void 0 : zoomOptions.max))) {
                    disableZoomButton = true;
                    if (this.zoomButtonNode) {
                        this.zoomButtonNode.disabled = true;
                    }
                }
            }
            if (colorVisVar) {
                this.currentStopValues = colorVisVar.stops.map((stop) => stop.value);
            }
            else {
                this.currentBreakValues = renderer.classBreakInfos.map((classBreakInfo) => ({
                    min: classBreakInfo.minValue,
                    max: classBreakInfo.maxValue
                }));
            }
            if (ok || this.colorSlider) {
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.color.dataRange), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box-buttons-front" }, this.renderInvertButton(), colorVisVar && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, "\u00A0"), this.renderZoomButton(disableZoomButton), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, "\u00A0"), this.renderResetButton()))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { ref: (node) => {
                        if (node) {
                            this.afterColorSliderCreate(node);
                        }
                    } })));
            }
            else {
                return this.renderColorSliderLoading();
            }
        }
    }
    renderColorSliderLoading() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-box" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: strings.loading })));
    }
    renderInvertButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { text: strings.panels.color.invertSlider, icon: "arrowUpDown", onClick: () => this.handleInvertSlider() }));
    }
    renderZoomButton(disableZoomButton) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const { sliderZoomed } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { text: strings.panels.color.zoomSlider, icon: sliderZoomed ? "magnifyingGlassMinus" : "magnifyingGlassPlus", disabled: disableZoomButton, onClick: () => this.handleZoomSlider(), ref: (node) => (this.zoomButtonNode = node) }));
    }
    renderResetButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-action", { text: strings.panels.color.resetSlider, icon: "undo", onClick: () => this.handleResetSlider() }));
    }
    // -------------------------------------------------------------------
    //
    //  Private methods
    //
    // -------------------------------------------------------------------
    prepareColorSlider() {
        var _a, _b;
        const { statistics, histogram, histogramStatus, sliderZoomed } = this;
        const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        const isAgeRenderer = ["color-age", "color-age-size"].indexOf(rendererType) > -1;
        const fieldInfo = this.getFieldInfo();
        const isDateField = fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color");
        let handleInfo, min, max;
        if (authColorVisVar) {
            handleInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aD)(authColorVisVar.theme, colorVisVar.stops);
            min = authColorVisVar.minSliderValue;
            max = authColorVisVar.maxSliderValue;
        }
        else {
            min = renderer.classBreakInfos[0].minValue;
            max = renderer.classBreakInfos[renderer.classBreakInfos.length - 1].maxValue;
        }
        ({ min, max } = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ad)({ min, max }));
        if (histogramStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS) {
            return false;
        }
        if (!this.colorSlider ||
            (colorVisVar && this.colorSlider.breaks) ||
            (!colorVisVar && this.colorSlider.stops)) {
            (_a = this.colorSlider) === null || _a === void 0 ? void 0 : _a.destroy();
            this.colorSliderBars = [];
            let config = {
                histogramConfig: {
                    bins: histogram === null || histogram === void 0 ? void 0 : histogram.bins,
                    average: Math.round(statistics.avg * 10) / 10,
                    standardDeviation: statistics.stddev,
                    standardDeviationCount: 1
                },
                min: min !== null && min !== void 0 ? min : statistics.min,
                max: max !== null && max !== void 0 ? max : statistics.max
            };
            if (colorVisVar) {
                config = Object.assign(Object.assign({}, config), handleInfo);
                if (isDateField && !isAgeRenderer) {
                    config.hasTimeData = true;
                    (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__.a)(config, mapView.timeZone);
                }
                config.stops = colorVisVar.stops;
                config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_5__.g)(colorVisVar.stops);
                config.histogramConfig.barCreatedFunction =
                    histogram && _slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.b.bind(this, colorVisVar, histogram, this.colorSliderBars);
                this.colorSlider = new modules.ColorSlider(config);
            }
            else {
                config.histogramConfig.min = renderer.classBreakInfos[0].minValue;
                config.histogramConfig.max =
                    renderer.classBreakInfos[renderer.classBreakInfos.length - 1].maxValue;
                this.sliderZoomed = false;
                config.breaks = (0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_8__.g)();
                config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_5__.g)(config.breaks);
                config.histogramConfig.barCreatedFunction =
                    histogram &&
                        _slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.b.bind(this, config.breaks, histogram, this.colorSliderBars);
                this.colorSlider = new modules.ClassedColorSlider(config);
                (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.u)(this.colorSlider, this.colorSliderBars, config.breaks, histogram);
            }
            this.createColorSliderChangeEvents();
        }
        else {
            const slider = this.colorSlider;
            if (((_b = slider.slider) === null || _b === void 0 ? void 0 : _b.state) === "dragging") {
                return true;
            }
            let config = {
                histogramConfig: {
                    bins: histogram === null || histogram === void 0 ? void 0 : histogram.bins,
                    average: Math.round(statistics.avg * 10) / 10,
                    standardDeviation: statistics.stddev,
                    standardDeviationCount: 1
                },
                min: min !== null && min !== void 0 ? min : statistics.min,
                max: max !== null && max !== void 0 ? max : statistics.max
            };
            if (colorVisVar) {
                config = Object.assign(Object.assign({}, config), handleInfo);
                config.stops = colorVisVar.stops;
                config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_5__.g)(colorVisVar.stops);
                config.hasTimeData = isDateField && !isAgeRenderer;
                if (isDateField && !isAgeRenderer) {
                    (0,_date_79c7d93c_js__WEBPACK_IMPORTED_MODULE_2__.a)(config, mapView.timeZone);
                }
                if (sliderZoomed) {
                    /**
                     * clicking a zigzag already updates the internal slider zoomOptions;
                     * setting them here again would incorrectly override a user's decision
                     * to manually zoom out one side of the slider.
                     */
                    if (!this.zigzagClick) {
                        config.zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(colorVisVar.stops, authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.minSliderValue, authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.maxSliderValue);
                    }
                }
                else {
                    config.zoomOptions = null;
                }
                config.histogramConfig.barCreatedFunction =
                    histogram && _slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.b.bind(this, colorVisVar, histogram, this.colorSliderBars);
                (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.u)(slider, this.colorSliderBars, colorVisVar, histogram);
            }
            else {
                config.breaks = (0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_8__.g)();
                config.precision = (0,_precision_06a73672_js__WEBPACK_IMPORTED_MODULE_5__.g)(config.breaks);
                config.histogramConfig.barCreatedFunction =
                    histogram &&
                        _slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.b.bind(this, config.breaks, histogram, this.colorSliderBars);
                (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.u)(slider, this.colorSliderBars, config.breaks, histogram);
            }
            if (this.sliderZoomed && this.adjustedZoomOptions && !this.zigzagClick) {
                config.zoomOptions = this.adjustedZoomOptions;
                /**
                 * handles edge cases where the slider is zoomed, handles have been manually modified,
                 * and a user executes a label change. This prevents zoom options from changing and preserves
                 * the histogram display.
                 */
                if (this.zoomAdjustment === "min") {
                    this.colorSlider.slider.min = config.zoomOptions.min;
                    config.zoomOptions.min = null;
                }
                else {
                    this.colorSlider.slider.max = config.zoomOptions.max;
                    config.zoomOptions.max = null;
                }
            }
            this.adjustedZoomOptions = null;
            this.zoomAdjustment = null;
            this.colorSlider.set(config);
            this.zigzagClick = false;
        }
        return (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(this.colorSlider);
    }
    handleInvertSlider() {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.u)(this.colorSlider, this.colorSliderBars, colorVisVar || (0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_8__.g)(), this.histogram);
        if (colorVisVar) {
            let colors = colorVisVar.stops.map((stop) => {
                return stop.color;
            });
            colors = colors.reverse();
            colorVisVar.stops.forEach((stop, idx) => {
                stop.color = colors[idx];
            });
        }
        else {
            let colors = renderer.classBreakInfos.map((classBreakInfo) => {
                return ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(classBreakInfo.symbol) ||
                    new modules.esriColor({ r: 64, g: 64, b: 64, a: 1 }));
            });
            colors = colors.reverse();
            renderer.classBreakInfos.map((classBreakInfo, idx) => {
                if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(classBreakInfo.symbol)) {
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.r)(classBreakInfo.symbol, colors[idx]);
                }
            });
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
        this.arcgisSmartMappingColorSliderChange.emit();
    }
    handleZoomSlider(zoomed) {
        var _a, _b, _c, _d;
        this.cap = this.colorSlider.slider.max;
        if (this.histogramStatus === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS) {
            return;
        }
        const { statistics } = this;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        this.sliderZoomed = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomed) ? zoomed : !this.sliderZoomed;
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        if (!colorVisVar) {
            this.sliderZoomed = false;
        }
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color");
        const zoomOptions = this.sliderZoomed
            ? (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(colorVisVar.stops, (_a = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.minSliderValue) !== null && _a !== void 0 ? _a : statistics.min, (_b = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.maxSliderValue) !== null && _b !== void 0 ? _b : statistics.max)
            : null;
        this.getHistogram({
            field: colorVisVar.field,
            expression: colorVisVar.valueExpression,
            expressionTitle: colorVisVar.valueExpressionTitle,
            simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        }, colorVisVar.normalizationField, statistics, (zoomOptions && zoomOptions.min) || ((_c = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.minSliderValue) !== null && _c !== void 0 ? _c : statistics.min), (zoomOptions && zoomOptions.max) || ((_d = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.maxSliderValue) !== null && _d !== void 0 ? _d : statistics.max));
    }
    handleResetSlider() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)();
        this.sliderZoomed = false;
        let colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color");
        const theme = authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.theme;
        const fieldInfo = this.getFieldInfo();
        const normalizationField = colorVisVar
            ? colorVisVar.normalizationField
            : renderer.normalizationField;
        let updateCall;
        if (rendererType === "color") {
            updateCall = _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_8__.b;
        }
        else if (rendererType === "color-age") {
            fieldInfo.field = authColorVisVar.field;
            updateCall = _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_8__.d;
        }
        else if (rendererType === "color-age-size") {
            fieldInfo.field = authColorVisVar.field;
            updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.h;
        }
        else if (rendererType === "color-size-age") {
            updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.i;
        }
        else if (rendererType === "color-size") {
            updateCall = _colorSize_ce0ccdeb_js__WEBPACK_IMPORTED_MODULE_10__.j;
        }
        else if (rendererType === "compare") {
            updateCall = _compare_ba1292fe_js__WEBPACK_IMPORTED_MODULE_9__.a;
        }
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_3__.r)(updateCall({
            fieldInfos: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.f)(layer),
            normalizationField: normalizationField,
            noReuse: true,
            theme,
            discardMinMax: true
        }, "color"), this.flowItemNode).then((result) => {
            var _a;
            if (((_a = result.statistics) === null || _a === void 0 ? void 0 : _a.count) === 0) {
                const [defaultMin, defaultMax] = this.getDefaultDataRange(fieldInfo);
                const min = (authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.minSliderValue) || defaultMin;
                const max = (authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.maxSliderValue) || defaultMax;
                result.statistics.min = min;
                result.statistics.max = max;
                result.statistics.avg = (max + min) / 2;
                this.statistics = result.statistics;
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
            }
            else if (result.statistics &&
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(result.statistics.min) &&
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(result.statistics.max) &&
                result.statistics.min <= result.statistics.max) {
                this.statistics = result.statistics;
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
                this.getHistogram(fieldInfo, normalizationField, result.statistics, result.statistics.min, result.statistics.max);
            }
            else {
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
            }
            authColorVisVar.minSliderValue = this.statistics.min;
            authColorVisVar.maxSliderValue = this.statistics.max;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        }, (error) => this.arcgisSmartMappingColorSliderError.emit(error));
    }
    afterColorSliderCreate(node) {
        if (!this.colorSlider.container) {
            const divNode = document.createElement("div");
            node.append(divNode);
            this.colorSlider.container = divNode;
        }
    }
    getStatistics() {
        /**
         * Handles the following:
         *  1.) Retrieving statistics on slider load
         *  2.) Retrieving updated statistics after changing age, normalization field, theme, or classify method/number of classes
         */
        var _a;
        const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        let min;
        let max;
        const fieldInfo = this.getFieldInfo();
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const normalizationField = colorVisVar
            ? colorVisVar.normalizationField
            : renderer.normalizationField;
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color") || {};
        min = authColorVisVar.minSliderValue;
        max = authColorVisVar.maxSliderValue;
        // handles equal interval behavior
        const authInfo = renderer.authoringInfo;
        if ((authInfo === null || authInfo === void 0 ? void 0 : authInfo.classificationMethod) === "equal-interval") {
            const classBreaks = renderer.classBreakInfos;
            min = classBreaks[0].minValue;
            max = classBreaks[classBreaks.length - 1].maxValue;
        }
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS;
        if (!this.statistics) {
            modules
                .summaryStatistics({
                layer,
                view: mapView,
                field: fieldInfo.field,
                valueExpression: fieldInfo.expression,
                normalizationField,
                forBinning: "featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
            })
                .then((statistics) => {
                if (statistics.count === 0) {
                    // field has no values
                    // make up some basic statistics so we can show a slider
                    const [defaultMin, defaultMax] = this.getDefaultDataRange(fieldInfo);
                    const min = authColorVisVar.minSliderValue || defaultMin;
                    const max = authColorVisVar.maxSliderValue || defaultMax;
                    statistics.min = min;
                    statistics.max = max;
                    statistics.avg = (max + min) / 2;
                    if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(authColorVisVar.minSliderValue)) {
                        authColorVisVar.minSliderValue = min;
                        authColorVisVar.maxSliderValue = max;
                    }
                }
                else if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(statistics.avg) ||
                    !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(statistics.min) ||
                    !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(statistics.max)) {
                    // statistics unusable
                    this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
                    return;
                }
                statistics = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ad)(statistics);
                min = min !== null && min !== void 0 ? min : statistics.min;
                max = max !== null && max !== void 0 ? max : statistics.max;
                this.statistics = statistics;
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
                this.getHistogram(fieldInfo, normalizationField, statistics, min, max);
            }, (error) => {
                console.log(error);
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
            });
        }
    }
    getHistogram(fieldInfo, normalizationField, statistics, min, max) {
        var _a;
        const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        statistics = statistics || this.statistics;
        if (!statistics || statistics.count === 0) {
            return;
        }
        this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.IN_PROGRESS;
        modules
            .histogram({
            layer: layer,
            view: mapView,
            field: fieldInfo.field,
            valueExpression: fieldInfo.expression,
            numBins: 50,
            minValue: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(min) ? min : statistics.min,
            maxValue: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(max) ? max : statistics.max,
            normalizationField,
            forBinning: "featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
        })
            .then((histogram) => {
            this.histogram = histogram;
            this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.SUCCESS;
        }, (error) => {
            console.log(error);
            this.histogramStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.b.FAILED;
        });
    }
    onMinMaxChange(min, max, changing) {
        const { statistics } = this;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color") || {};
        if (!colorVisVar) {
            let minClassBreak = renderer.classBreakInfos[0];
            let maxClassBreak = renderer.classBreakInfos[renderer.classBreakInfos.length - 1];
            minClassBreak.minValue = min;
            minClassBreak.label =
                minClassBreak.minValue.toLocaleString() + " - " + minClassBreak.maxValue.toLocaleString();
            maxClassBreak.maxValue = max;
            maxClassBreak.label =
                "> " +
                    maxClassBreak.minValue.toLocaleString() +
                    " - " +
                    maxClassBreak.maxValue.toLocaleString();
        }
        // update only the label that the user is changing
        changing === "min"
            ? (authColorVisVar.minSliderValue = min)
            : (authColorVisVar.maxSliderValue = max);
        // determine if label updates merit zooming or not
        const zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.stops, authColorVisVar.minSliderValue, authColorVisVar.maxSliderValue);
        // handles zoom button display for non-classed color sliders
        if (this.zoomButtonNode) {
            if (this.sliderZoomed) {
                this.zoomButtonNode.disabled = false;
            }
            else if (!zoomOptions ||
                zoomOptions.minMaxSame ||
                (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions.min) && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions.max))) {
                this.zoomButtonNode.disabled = true;
            }
            else {
                this.zoomButtonNode.disabled = false;
            }
        }
        // zoom adjustment
        if (this.sliderZoomed) {
            this.adjustedZoomOptions = this.colorSlider.zoomOptions;
            if (changing === "min") {
                this.adjustedZoomOptions.min = min;
                this.zoomAdjustment = "min";
            }
            else {
                this.adjustedZoomOptions.max = max;
                this.zoomAdjustment = "max";
            }
        }
        const fieldInfo = this.getFieldInfo();
        const normalizationField = colorVisVar
            ? colorVisVar.normalizationField
            : renderer.normalizationField;
        this.getHistogram(fieldInfo, normalizationField, statistics, min, max);
        (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.u)(this.colorSlider, this.colorSliderBars, colorVisVar || (0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_8__.g)(), this.histogram);
        if (min === authColorVisVar.minSliderValue && max === authColorVisVar.maxSliderValue) {
            this.sliderZoomed = false;
        }
        renderer.authoringInfo.classificationMethod = "manual";
        this.arcgisSmartMappingColorSliderChange.emit();
    }
    createColorSliderChangeEvents() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        if (!this.colorSlider) {
            return;
        }
        // handles zigzag click
        this.colorSlider.watch("zoomOptions", (newValue, oldValue) => {
            if (this.sliderZoomed &&
                (((oldValue === null || oldValue === void 0 ? void 0 : oldValue.min) && !(newValue === null || newValue === void 0 ? void 0 : newValue.min)) || ((oldValue === null || oldValue === void 0 ? void 0 : oldValue.max) && !(newValue === null || newValue === void 0 ? void 0 : newValue.max)))) {
                this.zigzagClick = true;
                this.handleZigzagClick(newValue);
            }
        });
        this.colorSlider.on("min-change", (info) => {
            if (colorVisVar) {
                if (info.value > this.currentStopValues[0]) {
                    this.colorSlider.stops.forEach((stop, idx) => {
                        stop.value = this.currentStopValues[idx];
                    });
                    this.onMinMaxChange(this.currentStopValues[0], this.colorSlider.slider.max, "min");
                }
                else {
                    this.onMinMaxChange(info.value, this.colorSlider.slider.max, "min");
                }
            }
            else {
                if (info.value > this.currentBreakValues[0].max) {
                    this.onMinMaxChange(this.currentBreakValues[0].max, this.colorSlider.slider.max, "min");
                }
                else {
                    this.onMinMaxChange(info.value, this.colorSlider.slider.max, "min");
                }
            }
        });
        this.colorSlider.on("max-change", (info) => {
            if (colorVisVar) {
                if (info.value < this.currentStopValues[this.currentStopValues.length - 1]) {
                    this.colorSlider.stops.forEach((stop, idx) => {
                        stop.value = this.currentStopValues[idx];
                    });
                    this.onMinMaxChange(this.colorSlider.slider.min, this.currentStopValues[this.currentStopValues.length - 1], "max");
                }
                else {
                    this.onMinMaxChange(this.colorSlider.slider.min, info.value, "max");
                }
            }
            else {
                if (info.value < this.currentBreakValues[this.currentBreakValues.length - 1].min) {
                    this.onMinMaxChange(this.colorSlider.slider.min, this.currentBreakValues[this.currentBreakValues.length - 1].min, "max");
                }
                else {
                    this.onMinMaxChange(this.colorSlider.slider.min, info.value, "max");
                }
            }
        });
        this.colorSlider.on("thumb-change", (info) => {
            if (colorVisVar) {
                const fieldInfo = this.getFieldInfo();
                const isDateField = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aH)(fieldInfo);
                if (isDateField && info.value === 0) {
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                    return;
                }
                const stops = this.colorSlider.stops;
                this.updateRendererStops(stops);
            }
            else {
                this.updateRendererBreaks(this.colorSlider.breaks);
            }
            this.arcgisSmartMappingColorSliderChange.emit();
        });
        this.colorSlider.on("thumb-drag", () => {
            if (colorVisVar) {
                const stops = this.colorSlider.stops;
                this.updateRendererStops(stops);
            }
            else {
                this.updateRendererBreaks(this.colorSlider.breaks);
            }
            this.arcgisSmartMappingColorSliderChange.emit();
        });
        this.colorSlider.on("segment-drag", () => {
            if (colorVisVar) {
                const stops = this.colorSlider.stops;
                this.updateRendererStops(stops);
            }
            else {
                this.updateRendererBreaks(this.colorSlider.breaks);
            }
            this.arcgisSmartMappingColorSliderChange.emit();
        });
    }
    updateRendererStops(stops) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color");
        colorVisVar.stops = stops;
        this.currentStopValues = colorVisVar.stops.map((stop) => stop.value);
        const zoomOptions = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aC)(colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.stops, authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.minSliderValue, authColorVisVar === null || authColorVisVar === void 0 ? void 0 : authColorVisVar.maxSliderValue);
        if (this.sliderZoomed) {
            this.zoomButtonNode.disabled = false;
        }
        else if (!zoomOptions ||
            zoomOptions.minMaxSame ||
            (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions.min) && !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(zoomOptions.max))) {
            this.zoomButtonNode.disabled = true;
        }
        else {
            this.zoomButtonNode.disabled = false;
        }
        (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.u)(this.colorSlider, this.colorSliderBars, colorVisVar, this.histogram);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
    }
    updateRendererBreaks(breaks) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        renderer.authoringInfo.classificationMethod = "manual";
        renderer.classBreakInfos.forEach((classBreakInfo, idx) => {
            if (classBreakInfo.minValue !== breaks[idx].min ||
                classBreakInfo.maxValue !== breaks[idx].max) {
                classBreakInfo.minValue = breaks[idx].min;
                classBreakInfo.maxValue = breaks[idx].max;
                const prefix = idx > 0 ? "> " : "";
                classBreakInfo.label = `${prefix} ${classBreakInfo.minValue.toLocaleString()} - ${classBreakInfo.maxValue.toLocaleString()}`;
                this.currentBreakValues[idx].min = breaks[idx].min;
                this.currentBreakValues[idx].max = breaks[idx].max;
            }
        });
        (0,_slider_e162e136_js__WEBPACK_IMPORTED_MODULE_7__.u)(this.colorSlider, this.colorSliderBars, (0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_8__.g)(), this.histogram);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        this.arcgisSmartMappingColorSliderChange.emit();
    }
    getDefaultDataRange(fieldInfo) {
        if (fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.DATE) {
            const year = new Date().getFullYear();
            return [new Date(`1/1/${year}`).getTime(), new Date(`12/31/${year}`).getTime()];
        }
        else {
            return [0, 100];
        }
    }
    getFieldInfo() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.u)(colorVisVar ? colorVisVar.field : renderer.field);
        const fieldInfo = {
            field: (colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.field) || renderer.field,
            expression: (colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.valueExpression) || renderer.valueExpression,
            expressionTitle: (colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.valueExpressionTitle) || renderer.valueExpressionTitle,
            simpleFieldType: field ? field.simpleFieldType : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
        };
        return fieldInfo;
    }
    handleZigzagClick(newValue) {
        var _a, _b;
        const { statistics } = this;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)(renderer, "color");
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.p)(renderer, "color");
        const fieldInfo = this.getFieldInfo();
        const normalizationField = colorVisVar
            ? colorVisVar.normalizationField
            : renderer.normalizationField;
        this.getHistogram(fieldInfo, normalizationField, statistics, (_a = newValue === null || newValue === void 0 ? void 0 : newValue.min) !== null && _a !== void 0 ? _a : authColorVisVar.minSliderValue, (_b = newValue === null || newValue === void 0 ? void 0 : newValue.max) !== null && _b !== void 0 ? _b : authColorVisVar.maxSliderValue);
        if (!newValue) {
            this.sliderZoomed = false;
        }
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingColorSlider.style = arcgisSmartMappingColorSliderCss;



//# sourceMappingURL=arcgis-smart-mapping-color-slider.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/compare-ba1292fe.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/compare-ba1292fe.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createCompareRendererFromExisting),
/* harmony export */   c: () => (/* binding */ createCompareRenderer)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * Updates the layer with a Compare renderer with default settings
 * @param props: must contain layer, mapView, field
 * @param options: options
 */
function createCompareRenderer(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    return modules.ColorCreator.createContinuousRenderer({
        layer,
        view: mapView,
        field: options.fieldInfos[0].field,
        theme: "above-and-below",
        colorScheme: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.P)("above-and-below"),
        normalizationField: options.fieldInfos[1].field,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer),
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : true,
        legendOptions: options.legendOptions,
        defaultSymbolEnabled: false,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        const colorAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(result.renderer, "color") || {};
        colorAuthVisVar.style = "ratio"; // "ratio", "percent", "percent-of-total"
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Compare renderer with settings from current renderer
 * @param props: only contains properties that need to be overwritten
 */
function createCompareRendererFromExisting(options) {
    var _a, _b, _c, _d;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
    if (colorVisVar &&
        options.fieldInfo &&
        options.fieldInfo.field == colorVisVar.field &&
        options.normalizationField === colorVisVar.normalizationField) {
        // no changes to fields
        delete options.fieldInfos;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.R)(options)) {
            // nothing really changes
            return Promise.resolve({ renderer: renderer.clone() });
        }
    }
    const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "color");
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)(renderer);
    let fieldInfo = options.fieldInfos
        ? options.fieldInfos[0]
        : colorVisVar
            ? {
                field: colorVisVar.field,
                expression: colorVisVar.valueExpression,
                expressionTitle: colorVisVar.valueExpressionTitle,
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
            }
            : {
                field: renderer.field,
                expression: renderer.valueExpression,
                expressionTitle: renderer.valueExpressionTitle,
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
            };
    const normalizationField = options.normalizationField
        ? options.normalizationField
        : colorVisVar
            ? colorVisVar.normalizationField
            : renderer.normalizationField;
    const symbol = renderer.classBreakInfos && renderer.classBreakInfos.length ? renderer.classBreakInfos[0].symbol : null;
    const defaultSymbol = renderer.defaultSymbol;
    const defaultLabel = renderer.defaultLabel;
    let needNewStatistics = false;
    if (options.normalizationField === null || options.normalizationField || options.fieldInfo) {
        needNewStatistics = true;
    }
    const minValue = options.discardMinMax
        ? undefined
        : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.min)
            ? options.min
            : needNewStatistics
                ? undefined
                : authColorVisVar
                    ? authColorVisVar.minSliderValue
                    : renderer.classBreakInfos[0].minValue;
    const maxValue = options.discardMinMax
        ? undefined
        : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.max)
            ? options.max
            : needNewStatistics
                ? undefined
                : authColorVisVar
                    ? authColorVisVar.maxSliderValue
                    : renderer.classBreakInfos[renderer.classBreakInfos.length - 1].maxValue;
    return modules.ColorCreator.createContinuousRenderer({
        layer,
        view: mapView,
        field: fieldInfo ? fieldInfo.field : renderer.field,
        theme: "above-and-below",
        colorScheme: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.P)("above-and-below"),
        normalizationField,
        minValue,
        maxValue,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : !!extras.sizeOutlineVisVar,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : !!extras.sizeAutoVisVar,
        legendOptions: ((_a = options.legendOptions) === null || _a === void 0 ? void 0 : _a.toJSON()) ||
            ((_b = colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.legendOptions) === null || _b === void 0 ? void 0 : _b.toJSON()) ||
            ((_c = renderer.legendOptions) === null || _c === void 0 ? void 0 : _c.toJSON()),
        defaultSymbolEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_2__.i)(options.defaultSymbolEnabled)
            ? options.defaultSymbolEnabled
            : !!renderer.defaultSymbol,
        forBinning: ((_d = layer.featureReduction) === null || _d === void 0 ? void 0 : _d.type) === "binning"
    }).then((result) => {
        // reset handles if necessary
        if (options.discardMinMax) {
            const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "color");
            const newColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "color");
            colorVisVar.stops.forEach((stop, idx) => (stop.value = newColorVisVar.stops[idx].value));
        }
        const colorAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(result.renderer, "color") || {};
        colorAuthVisVar.style = "ratio";
        //console.log("createContinuousRenderer", result);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        if (symbol && result.renderer.classBreakInfos && result.renderer.classBreakInfos.length) {
            result.renderer.classBreakInfos[0].symbol = symbol;
        }
        if (defaultSymbol) {
            result.renderer.defaultSymbol = defaultSymbol;
            result.renderer.defaultLabel = defaultLabel;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}



//# sourceMappingURL=compare-ba1292fe.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/date-79c7d93c.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addDateFormatFunctions),
/* harmony export */   b: () => (/* binding */ utcToTimePicker),
/* harmony export */   d: () => (/* binding */ datePickerToUTC),
/* harmony export */   u: () => (/* binding */ utcToDatePicker)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




function addDateFormatFunctions(config, timeZone) {
    config.labelFormatFunction = (value) => {
        return getDateDisplayString(value, timeZone, "short-date");
    };
    config.inputFormatFunction = (value) => {
        return getDateDisplayString(value, timeZone, "short-date");
    };
    config.inputParseFunction = (value) => {
        return mapTZToUTC(Date.parse(value), timeZone);
    };
}
function utcToDatePicker(value, timeZone) {
    // date is in UTC
    // we need a map timezone
    let str;
    if (!timeZone || timeZone === "system") {
        const diff = new Date().getTimezoneOffset();
        str = new Date(value - diff * 60000).toISOString();
    }
    else if (timeZone === "unknown") {
        str = new Date(value).toISOString();
    }
    else {
        const diff = new Date().getTimezoneOffset();
        const mapDateStr = new Date(value).toLocaleString("en-US", { timeZone });
        str = new Date(new Date(mapDateStr).getTime() - diff * 60000).toISOString();
    }
    // console.log("utcToDatePicker", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}
function utcToTimePicker(value, timeZone, addSeconds) {
    // date is in UTC
    // we need a map timezone
    let str;
    if (!timeZone || timeZone === "system") {
        const diff = new Date().getTimezoneOffset();
        str = new Date(value - diff * 60000).toISOString();
    }
    else if (timeZone === "unknown") {
        str = new Date(value).toISOString();
    }
    else {
        const diff = new Date().getTimezoneOffset();
        const mapDateStr = new Date(value).toLocaleString("en-US", { timeZone });
        str = new Date(new Date(mapDateStr).getTime() - diff * 60000).toISOString();
    }
    // str = "2023-09-20T13:06:00.000Z"
    str = addSeconds ? str.substring(11, 19) : str.substring(11, 16);
    // console.log("utcToTimePicker", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}
function datePickerToUTC(dateString, timeZone) {
    // date is in map timezone
    // we need a UTC UNIX timestamp
    let date = new Date(dateString);
    // this is read as current time; toISOString() would reaturn UTC time (e.g. +7 hours from pacific)
    // fix the offset
    date = new Date(date.getTime() - date.getTimezoneOffset() * 60000);
    // date now contains the user's entered time
    let value;
    if (!timeZone || timeZone === "system") {
        // add difference between local time and UTC
        value = date.getTime() + date.getTimezoneOffset() * 60000;
    }
    else if (timeZone === "unknown") {
        // take what you get
        value = date.getTime();
    }
    else {
        // add difference between map time and UTC
        const diff = new Date(date.toLocaleString("en-US", { timeZone: "utc" })).getTime() -
            new Date(date.toLocaleString("en-US", { timeZone })).getTime();
        value = date.getTime() + diff;
    }
    // console.log("datePickerToUTC", date.toISOString(), " -> ", new Date(value).toISOString());
    return value;
}
function mapTZToUTC(value, timeZone) {
    if (!value) {
        return value;
    }
    // value is in map timezone
    // we need a UTC timestamp
    let newValue;
    if (!timeZone || timeZone === "system") {
        // add difference between local time and UTC
        const date = new Date();
        newValue = value + date.getTimezoneOffset() * 60000;
    }
    else if (timeZone === "unknown") {
        // take what you get
        newValue = value;
    }
    else {
        // add difference between map time and UTC
        const date = new Date();
        const diff = new Date(date.toLocaleString("en-US", { timeZone: "utc" })).getTime() -
            new Date(date.toLocaleString("en-US", { timeZone })).getTime();
        newValue = value + diff;
    }
    console.log("mapTZToUTC", value, " - ", new Date(value).toISOString(), " - ", new Date(newValue).toISOString());
    return newValue;
}
function getDateDisplayString(value, timeZone, dateFormat) {
    const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    let str;
    if (timeZone === "unknown") {
        str = modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions(dateFormat || "short-date-short-time")), { timeZone: "utc", timeZoneName: "shortOffset" }));
    }
    else {
        // known issues with formatting it-CH
        str = modules.intl.formatDate(value, Object.assign(Object.assign({}, modules.intl.convertDateFormatToIntlOptions(dateFormat || "short-date-short-time")), { timeZone }));
    }
    // console.log("getDateDisplayString", value, " - ", new Date(value).toISOString(), " -> ", str);
    return str;
}



//# sourceMappingURL=date-79c7d93c.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   r: () => (/* binding */ requestWrapper)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
let _loadingTimer;
let _requestCancelled;
function startLoading(node) {
    node.loading = true;
    _requestCancelled = false;
    if (_loadingTimer) {
        clearTimeout(_loadingTimer);
    }
    _loadingTimer = setTimeout(() => {
        // took too long
        endLoading(node);
        _requestCancelled = true;
    }, 60000);
}
function endLoading(node) {
    node.loading = false;
}
function requestWrapper(request, node) {
    startLoading(node);
    return request
        .then((result) => {
        endLoading(node);
        if (!_requestCancelled) {
            return Promise.resolve(result);
        }
        else {
            return Promise.reject(new Error("timeout"));
        }
    })
        .catch((error) => {
        endLoading(node);
        return Promise.reject(error);
    });
}



//# sourceMappingURL=loading-69139907.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/slider-e162e136.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/slider-e162e136.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   b: () => (/* binding */ barCreatedFunction),
/* harmony export */   u: () => (/* binding */ updateHistogramColors)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




function barCreatedFunction(colorVisVarOrBreaks, histogram, sliderBars, idx, element) {
    const color = (colorVisVarOrBreaks === null || colorVisVarOrBreaks === void 0 ? void 0 : colorVisVarOrBreaks.length)
        ? getColorForValueClassed(colorVisVarOrBreaks, histogram.bins[idx])
        : getColorForValue(colorVisVarOrBreaks.stops, histogram.bins[idx]);
    color && element.setAttribute("fill", color.toHex());
    color && element.setAttribute("opacity", `${Math.max(color.a, 0.2)}`);
    sliderBars.push(element);
}
function updateHistogramColors(slider, sliderBars, colorVisVarOrBreaks, histogram) {
    sliderBars === null || sliderBars === void 0 ? void 0 : sliderBars.forEach((element, index) => {
        const bin = (histogram || slider.histogramConfig).bins[index];
        const color = slider.breaks
            ? getColorForValueClassed(colorVisVarOrBreaks || slider.breaks, bin)
            : getColorForValue((colorVisVarOrBreaks || slider)
                .stops, bin);
        color && element.setAttribute("fill", color.toHex());
        color && element.setAttribute("opacity", `${Math.max(color.a, 0.2)}`);
    });
}
function getColorForValue(stops, bin) {
    // infers the color for a given value
    // based on the stops from a ColorVariable
    const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    if (!bin) {
        return;
    }
    const value = (bin.maxValue - bin.minValue) / 2 + bin.minValue;
    let minStop = stops[0];
    let maxStop = stops[stops.length - 1];
    const minStopValue = minStop.value;
    const maxStopValue = maxStop.value;
    if (value < minStopValue) {
        return minStop.color;
    }
    if (value > maxStopValue) {
        return maxStop.color;
    }
    const exactMatches = stops.filter((stop) => stop.value === value);
    if (exactMatches.length > 0) {
        return exactMatches[0].color;
    }
    minStop = null;
    maxStop = null;
    stops.forEach((stop, i) => {
        if (!minStop && !maxStop && stop.value >= value) {
            minStop = stops[i - 1];
            maxStop = stop;
        }
    });
    const weightedPosition = (value - minStop.value) / (maxStop.value - minStop.value);
    return modules.esriColor.blendColors(minStop.color, maxStop.color, weightedPosition);
}
function getColorForValueClassed(breaks, bin) {
    // infers the color for a given value
    // based on the classBreakInfo
    if (!bin) {
        return;
    }
    const value = (bin.maxValue - bin.minValue) / 2 + bin.minValue;
    let minBreak = breaks[0];
    let maxBreak = breaks[breaks.length - 1];
    if (value < minBreak.min || value > maxBreak.max) {
        return undefined;
    }
    const exactMatches = breaks.filter((b) => b.min === value);
    if (exactMatches.length > 0) {
        return exactMatches[0].color;
    }
    minBreak = breaks[breaks.length - 1];
    maxBreak = null;
    breaks.forEach((b, i) => {
        if (!maxBreak && b.min >= value) {
            minBreak = breaks[i - 1];
            maxBreak = b;
        }
    });
    return minBreak.color;
}



//# sourceMappingURL=slider-e162e136.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,