"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-8d355f"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-predominance.entry.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-predominance.entry.js ***!
  \*******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_panels_predominance: () => (/* binding */ ArcgisSmartMappingPanelsPredominance)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./symbolStyler-04635b2b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/symbolStyler-04635b2b.js");
/* harmony import */ var _predominance_a1a2d74d_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./predominance-a1a2d74d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/predominance-a1a2d74d.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _location_e26b539f_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./location-e26b539f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */













const arcgisSmartMappingPanelsPredominanceCss = ":host{width:100%}.flow-item{height:100%}.predominance-block{overflow-x:hidden}.checkbox{margin:0 6.5px}.hidden{display:none}.label{font-size:var(--calcite-font-size--1);padding-top:5px;padding-bottom:5px}.label:focus,.symbol:focus{outline:2px solid var(--calcite-color-brand)}.selected{outline:1px solid var(--calcite-color-brand)}.symbol{min-width:26px;display:flex}.symbol div{margin:auto}.symbol-is-white{background-color:#f3f3f3}.text-wrap{overflow-wrap:anywhere}.top-grey-border{border-top:1px solid #e0e0e0}.list-item-top-grey-border{border-top:1.5px solid #e0e0e0}";

const ArcgisSmartMappingPanelsPredominance = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsPredominanceBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsPredominanceBackClick", 7);
        this.arcgisSmartMappingPanelsPredominanceClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsPredominanceClose", 7);
        this.arcgisSmartMappingPanelsPredominanceError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsPredominanceError", 7);
        this.valueSymbolNodes = [];
        this.labelNodes = [];
        this.inputNodes = [];
        this.maxCountOtherValues = 200;
        this.popoverSettings = {
            index: null,
            popoverNode: null
        };
        //-------------------------------------------------------------------
        //
        //  Private Methods
        //
        //-------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
            this.arcgisSmartMappingPanelsPredominanceClose.emit("save");
        };
        this.hideRotation = false;
        this.hideTransparency = false;
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
        this.visualizationOpen = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //-------------------------------------------------------------------
    //
    //  Lifecycle Methods
    //
    //-------------------------------------------------------------------
    componentWillLoad() {
        const { mapView, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.layer;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.lastDefault = {
            defaultSymbol: renderer.defaultSymbol || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.S)(layer, mapView),
            defaultLabel: renderer.defaultLabel || strings.panels.predominance.other
        };
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
        this.originalOrderBy = layer.orderBy;
        this.visualizationOpen = true;
        return new Promise((resolve, reject) => {
            (0,_predominance_a1a2d74d_js__WEBPACK_IMPORTED_MODULE_5__.g)({
                fieldInfos: renderer.uniqueValueGroups[0].classes.map((info) => {
                    return {
                        field: info.values[0].value,
                        simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.w.NUMBER
                    };
                })
            })
                .then((result) => {
                this.predominantCategoryInfos = result.predominantCategoryInfos;
                resolve(result.predominantCategoryInfos);
            })
                .catch((error) => {
                this.arcgisSmartMappingPanelsPredominanceError.emit({
                    message: error,
                    type: "error"
                });
                reject(error);
            });
        });
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    disconnectedCallback() {
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.lastDefault = null;
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.selectedValue = null;
    }
    //-------------------------------------------------------------------
    //
    //  Render Methods
    //
    //-------------------------------------------------------------------
    render() {
        var _a;
        const { hideLayerTitle, isRTL, layer, mapImageSublayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const title = hideLayerTitle ? undefined : (_a = mapImageSublayer === null || mapImageSublayer === void 0 ? void 0 : mapImageSublayer.title) !== null && _a !== void 0 ? _a : layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.C.rtl]: isRTL
            }, heading: strings.panels.predominance.styleOptions, description: title, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsPredominanceBackClick.emit(), ref: (node) => (this.flowItemNode = node) }, this.renderVisualization(), this.renderTransparency(), this.renderRotation(), this.renderDone(), this.renderCancel())));
    }
    renderVisualization() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const hasOtherBlocks = !this.hideTransparency || !this.hideRotation;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "predominance-block", heading: strings.panels.predominance.predominanceStyle, collapsible: hasOtherBlocks, open: this.visualizationOpen, onCalciteBlockOpen: () => (this.visualizationOpen = true), onCalciteBlockClose: () => (this.visualizationOpen = false) }, this.renderPredominanceSymbol(), this.renderDrawingOrder(), this.renderValues(), this.renderMsg(), this.renderBackgroundStyle()));
    }
    renderPredominanceSymbol() {
        const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const uniqueValueClasses = renderer.uniqueValueGroups[0].classes;
        const schemes = modules.predominanceSchemes.getSchemes({
            basemap: mapView.map.basemap,
            geometryType: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.D)(layer),
            numColors: uniqueValueClasses.length
        });
        const colorRampsAndSchemes = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a9)(schemes, Math.min(uniqueValueClasses.length, 10));
        const defaultColors = colorRampsAndSchemes[0].colors;
        let colors = (uniqueValueClasses === null || uniqueValueClasses === void 0 ? void 0 : uniqueValueClasses.length)
            ? uniqueValueClasses
                .slice(0, 10)
                .map((uniqueValueClass, idx) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.t)(uniqueValueClass.symbol) ||
                new modules.esriColor(defaultColors[idx % defaultColors.length]))
            : [];
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { type: "predominance-ramp", colors: colors, rampType: "discrete", popoverReferenceElement: this.flowItemNode, onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
            } }));
    }
    renderDrawingOrder() {
        const { layer, mapImageSublayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if (mapImageSublayer) {
            return null;
        }
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between" }, strings.panels.predominance.drawingOrder, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: renderer.orderByClassesEnabled, onCalciteSwitchChange: (event) => {
                const node = event.target;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
                const layer = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.layer;
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
                renderer.orderByClassesEnabled = node.checked;
                if (node.checked) {
                    layer.orderBy = null;
                }
                else {
                    layer.orderBy = this.originalOrderBy;
                }
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
            } })));
    }
    renderValues() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.predominance.fieldName), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { class: "top-grey-border", "drag-enabled": true, onCalciteListOrderChange: (event) => {
                let items = Array.from(event.target.children);
                this.handleSortValues(items);
            } }, renderer.uniqueValueGroups[0].classes.map((uniqueValueClass, index) => {
            return this.renderValue(uniqueValueClass, index);
        })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", null, this.renderDefaultValue())));
    }
    renderValue(uniqueValueClass, index) {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { value: uniqueValueClass.values[0].value, key: `values-${uniqueValueClass.values[0].value}`, "sort-values": uniqueValueClass.values[0].value }, this.renderSymbolNode(uniqueValueClass, index), this.renderTextNode(uniqueValueClass, index), this.renderCountNode(uniqueValueClass)));
    }
    renderSymbolNode(uniqueValueClass, index) {
        const { selectedValue, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const symbolNodeClasses = {
            "symbol": true,
            "symbol-is-white": (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.aq)(uniqueValueClass.symbol)
        };
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: symbolNodeClasses, slot: "content-start", onClick: () => this.handleValueSymbolClick(index), role: "button", tabIndex: 0, "aria-label": strings.panels.predominance.accessibility.editSymbolFor.replace("${value}", uniqueValueClass.label), "aria-haspopup": "true", "aria-expanded": selectedValue === index, onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.handleValueSymbolClick(index);
                }
            }, ref: (node) => {
                if (index > -1) {
                    this.valueSymbolNodes[index] = node;
                }
                else {
                    this.defaultSymbolNode = node;
                }
                this.createValueSymbol(index, node);
            } }));
    }
    renderTextNode(uniqueValueClass, index) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { "aria-label": strings.panels.predominance.accessibility.editLabelFor.replace("${fieldName}", uniqueValueClass.label), class: "label text-wrap", slot: "content", tabIndex: 0, onClick: (event) => {
                event.target.classList.add("hidden");
                let inputNode = index === -1 ? this.defaultInputNode : this.inputNodes[index];
                inputNode.classList.remove("hidden");
                inputNode.setFocus();
            }, onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    event.target.classList.add("hidden");
                    let inputNode = index === -1 ? this.defaultInputNode : this.inputNodes[index];
                    inputNode.classList.remove("hidden");
                    inputNode.setFocus();
                }
            }, ref: (node) => {
                if (index > -1) {
                    this.labelNodes[index] = node;
                }
                else {
                    this.defaultLabelNode = node;
                }
            } }, uniqueValueClass.label), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { class: "hidden", slot: "content", tabIndex: 0, value: uniqueValueClass.label, onFocusout: (event) => {
                const node = event.target;
                this.handleValueTextChange(index, node.value);
            }, onKeyDown: (event) => {
                event.stopPropagation();
                if (event.key === "Escape" || event.key === "Enter") {
                    event.preventDefault();
                    const node = event.currentTarget;
                    this.handleValueTextChange(index, node.value);
                }
            }, ref: (node) => {
                if (index > -1) {
                    this.inputNodes[index] = node;
                }
                else {
                    this.defaultInputNode = node;
                }
            } })));
    }
    renderCountNode(uniqueValueClass) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const info = this.getPredominantCategoryValue(uniqueValueClass.values[0].value);
        if (!info || !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(info.count)) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content-end", class: "value-count", "aria-label": strings.panels.predominance.accessibility.countFor.replace("${value}", uniqueValueClass.label) }, `${info.count}`));
    }
    renderDefaultValue() {
        const { layer, lastDefault, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const defaultSymbol = renderer.defaultSymbol || lastDefault.defaultSymbol;
        const defaultLabel = renderer.defaultLabel || lastDefault.defaultLabel;
        const info = this.getPredominantCategoryValue(undefined);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { class: "top-grey-border" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { class: "checkbox", scale: "s", tabIndex: 0, slot: "actions-start", checked: !!renderer.defaultSymbol, onClick: () => {
                if (renderer.defaultSymbol) {
                    renderer.defaultSymbol = undefined;
                    renderer.defaultLabel = undefined;
                }
                else {
                    renderer.defaultSymbol = lastDefault.defaultSymbol;
                    renderer.defaultLabel = lastDefault.defaultLabel;
                }
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            } }), this.renderSymbolNode(defaultLabel, -1), this.renderTextNode({
            symbol: defaultSymbol,
            label: defaultLabel
        }, -1), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content-end", "aria-label": strings.panels.predominance.accessibility.countFor.replace("${value}", defaultLabel) }, "" + (!info || !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ac)(info.count) ? 0 : info.count))));
    }
    renderMsg() {
        const { layer, lastDefault, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        // TODO estimatedValuesMsg
        if (renderer.uniqueValueGroups[0].classes &&
            renderer.uniqueValueGroups[0].classes.length > this.maxCountOtherValues) {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, strings.panels.predominance.tooManyValues.replace("${count}", this.maxCountOtherValues.toString())));
        }
        else if (!renderer.uniqueValueGroups[0].classes.length) {
            // only otherCategory
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, strings.panels.predominance.noFeatures.replace("${other}", lastDefault.defaultLabel)));
        }
        else {
            return null;
        }
    }
    renderBackgroundStyle() {
        const { mapImageSublayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.g)() !== "predominance-size" || mapImageSublayer) {
            return null;
        }
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-background-symbol", null);
    }
    renderTransparency() {
        if (this.hideTransparency) {
            return null;
        }
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), "opacity");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-transparency", { open: !!opacityVisVar, onArcgisSmartMappingSymbolTransparencyError: ({ detail }) => this.arcgisSmartMappingPanelsPredominanceError.emit(detail) }));
    }
    renderRotation() {
        if (this.hideRotation) {
            return null;
        }
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), "opacity");
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer), "rotation");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-rotation", { open: !opacityVisVar && !!rotationVisVar, onArcgisSmartMappingRotationError: ({ detail }) => this.arcgisSmartMappingPanelsPredominanceError.emit(detail), ref: (node) => (this.rotationNode = node) }));
    }
    renderDone() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancel() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: () => {
                const { originalRendererJSON, originalFeatureReduction, originalOrderBy } = this;
                const layer = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.layer;
                layer.orderBy = originalOrderBy;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.j)(originalRendererJSON, originalFeatureReduction);
                this.arcgisSmartMappingPanelsPredominanceClose.emit("cancel");
            }, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    async createValueSymbol(index, element) {
        var _a;
        const { layer, lastDefault, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        let symbol;
        if (index === -1) {
            symbol = renderer.defaultSymbol || lastDefault.defaultSymbol;
        }
        else {
            symbol = renderer.uniqueValueGroups[0].classes[index].symbol.clone();
        }
        // remove old symbol if there is one
        while ((_a = element === null || element === void 0 ? void 0 : element.childNodes) === null || _a === void 0 ? void 0 : _a.length) {
            element.removeChild(element.childNodes[0]);
        }
        if (symbol) {
            // add new symbol
            const symbolNode = await modules.symbolUtils.renderPreviewHTML(symbol, {
                size: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ar)(symbol),
                symbolConfig: 
                //symbol.type === "simple-fill" || ... while CIMs have that shape
                symbol.type === "cim" && symbol.data.symbol.type === "CIMPolygonSymbol"
                    ? { isSquareFill: true }
                    : undefined
            });
            element.appendChild(symbolNode);
        }
    }
    getPredominantCategoryValue(value) {
        if (!this.predominantCategoryInfos) {
            return undefined;
        }
        // no exact match!
        const infos = this.predominantCategoryInfos.filter((info) => info.value == value);
        return (infos === null || infos === void 0 ? void 0 : infos.length) ? infos[0] : undefined;
    }
    handleSortValues(items) {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        const itemValues = items.map((item) => item.value);
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const uniqueValueClasses = renderer.uniqueValueGroups[0].classes
            .filter((uniqueValueClass) => itemValues.indexOf(`${uniqueValueClass.values[0].value}`) > -1)
            .map((uniqueValueClass) => modules.esriLang.clone(uniqueValueClass));
        uniqueValueClasses.sort((a, b) => {
            const aIndex = itemValues.indexOf(a.values[0].value);
            const bIndex = itemValues.indexOf(b.values[0].value);
            return aIndex - bIndex;
        });
        renderer.uniqueValueGroups[0].classes = uniqueValueClasses;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    handleValueSymbolClick(index) {
        var _a;
        if ((_a = this.popoverSettings) === null || _a === void 0 ? void 0 : _a.popoverNode) {
            const valueSymbolNode = index === -1 ? this.defaultSymbolNode : this.valueSymbolNodes[index];
            valueSymbolNode.classList.remove("selected");
            if (this.popoverSettings.index === index) {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
                this.popoverSettings.popoverNode = null;
                this.popoverSettings.index = null;
            }
            else {
                this.popoverSettings.index = index;
                this.openSymbolStylerForValue(index);
            }
        }
        else {
            this.popoverSettings.index = index;
            this.openSymbolStylerForValue(index);
        }
    }
    handleValueTextChange(index, newValue) {
        const { layer, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.h)(layer);
        const originalRenderer = modules.rendererJsonUtils.fromJSON(this.originalRendererJSON);
        if (!newValue.length) {
            if (index === -1) {
                newValue = originalRenderer.defaultLabel || strings.panels.predominance.other;
            }
            else {
                let matchingClass = originalRenderer.uniqueValueGroups[0].classes.find((uvClass) => uvClass.values[0].value === renderer.uniqueValueGroups[0].classes[index].values[0].value);
                newValue = matchingClass.label;
            }
        }
        if (index === -1) {
            if (renderer.defaultSymbol) {
                renderer.defaultLabel = newValue;
            }
        }
        else {
            renderer.uniqueValueGroups[0].classes[index].label = newValue;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
        let inputNode = index === -1 ? this.defaultInputNode : this.inputNodes[index];
        inputNode.classList.add("hidden");
        let labelNode = index === -1 ? this.defaultLabelNode : this.labelNodes[index];
        labelNode.classList.remove("hidden");
        labelNode.innerHTML = newValue;
        inputNode.value = newValue;
        setTimeout(() => labelNode.focus(), 300);
    }
    openSymbolStylerForValue(index) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.E)();
        const valueSymbolNode = index === -1 ? this.defaultSymbolNode : this.valueSymbolNodes[index];
        this.popoverSettings.popoverNode = (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_4__.c)({
            referenceElement: this.flowItemNode,
            heading: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.strings.styler.symbolStyle
        });
        this.popoverSettings.popoverNode.addEventListener("arcgisSmartMappingStylerPopoverClose", () => {
            (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_4__.r)(this.popoverSettings.popoverNode);
            this.popoverSettings.popoverNode = null;
            setTimeout(() => valueSymbolNode.focus(), 300);
            valueSymbolNode.classList.remove("selected");
        });
        this.popoverSettings.popoverNode.addEventListener("arcgisSmartMappingStylerPopoverDisconnected", () => {
            (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_4__.r)(this.popoverSettings.popoverNode);
            this.popoverSettings.popoverNode = null;
            valueSymbolNode.classList.remove("selected");
        });
        _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s.selectedValue = index;
        (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_4__.d)({
            popoverNode: this.popoverSettings.popoverNode,
            onChange: () => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
            }
        });
        valueSymbolNode.classList.add("selected");
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsPredominance.style = arcgisSmartMappingPanelsPredominanceCss;



//# sourceMappingURL=arcgis-smart-mapping-panels-predominance.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,